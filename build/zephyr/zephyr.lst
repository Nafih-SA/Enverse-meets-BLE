
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	c0 18 01 20 69 78 00 00 5b 41 02 00 99 78 00 00     ... ix..[A...x..
  10:	99 78 00 00 99 78 00 00 99 78 00 00 00 00 00 00     .x...x...x......
	...
  2c:	c9 75 00 00 99 78 00 00 00 00 00 00 75 75 00 00     .u...x......uu..
  3c:	15 2f 02 00                                         ./..

00000040 <_irq_vector_table>:
  40:	29 78 00 00 75 a8 01 00 29 78 00 00 29 78 00 00     )x..u...)x..)x..
  50:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  60:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  70:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  80:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  90:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  a0:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  b0:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  c0:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  d0:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  e0:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..
  f0:	29 78 00 00 29 78 00 00 29 78 00 00 29 78 00 00     )x..)x..)x..)x..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__aeabi_d2iz>:
     89c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     8a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8a4:	d215      	bcs.n	8d2 <__aeabi_d2iz+0x36>
     8a6:	d511      	bpl.n	8cc <__aeabi_d2iz+0x30>
     8a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     8b0:	d912      	bls.n	8d8 <__aeabi_d2iz+0x3c>
     8b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     8b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     8ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     8be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     8c2:	fa23 f002 	lsr.w	r0, r3, r2
     8c6:	bf18      	it	ne
     8c8:	4240      	negne	r0, r0
     8ca:	4770      	bx	lr
     8cc:	f04f 0000 	mov.w	r0, #0
     8d0:	4770      	bx	lr
     8d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     8d6:	d105      	bne.n	8e4 <__aeabi_d2iz+0x48>
     8d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     8dc:	bf08      	it	eq
     8de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     8e2:	4770      	bx	lr
     8e4:	f04f 0000 	mov.w	r0, #0
     8e8:	4770      	bx	lr
     8ea:	bf00      	nop

000008ec <__aeabi_d2uiz>:
     8ec:	004a      	lsls	r2, r1, #1
     8ee:	d211      	bcs.n	914 <__aeabi_d2uiz+0x28>
     8f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     8f4:	d211      	bcs.n	91a <__aeabi_d2uiz+0x2e>
     8f6:	d50d      	bpl.n	914 <__aeabi_d2uiz+0x28>
     8f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     8fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     900:	d40e      	bmi.n	920 <__aeabi_d2uiz+0x34>
     902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     90a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     90e:	fa23 f002 	lsr.w	r0, r3, r2
     912:	4770      	bx	lr
     914:	f04f 0000 	mov.w	r0, #0
     918:	4770      	bx	lr
     91a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     91e:	d102      	bne.n	926 <__aeabi_d2uiz+0x3a>
     920:	f04f 30ff 	mov.w	r0, #4294967295
     924:	4770      	bx	lr
     926:	f04f 0000 	mov.w	r0, #0
     92a:	4770      	bx	lr

0000092c <__aeabi_d2f>:
     92c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     930:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     934:	bf24      	itt	cs
     936:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     93a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     93e:	d90d      	bls.n	95c <__aeabi_d2f+0x30>
     940:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     944:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     948:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     94c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     950:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     954:	bf08      	it	eq
     956:	f020 0001 	biceq.w	r0, r0, #1
     95a:	4770      	bx	lr
     95c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     960:	d121      	bne.n	9a6 <__aeabi_d2f+0x7a>
     962:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     966:	bfbc      	itt	lt
     968:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     96c:	4770      	bxlt	lr
     96e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     972:	ea4f 5252 	mov.w	r2, r2, lsr #21
     976:	f1c2 0218 	rsb	r2, r2, #24
     97a:	f1c2 0c20 	rsb	ip, r2, #32
     97e:	fa10 f30c 	lsls.w	r3, r0, ip
     982:	fa20 f002 	lsr.w	r0, r0, r2
     986:	bf18      	it	ne
     988:	f040 0001 	orrne.w	r0, r0, #1
     98c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     990:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     994:	fa03 fc0c 	lsl.w	ip, r3, ip
     998:	ea40 000c 	orr.w	r0, r0, ip
     99c:	fa23 f302 	lsr.w	r3, r3, r2
     9a0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     9a4:	e7cc      	b.n	940 <__aeabi_d2f+0x14>
     9a6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     9aa:	d107      	bne.n	9bc <__aeabi_d2f+0x90>
     9ac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     9b0:	bf1e      	ittt	ne
     9b2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     9b6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     9ba:	4770      	bxne	lr
     9bc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     9c0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     9c4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     9c8:	4770      	bx	lr
     9ca:	bf00      	nop

000009cc <__aeabi_frsub>:
     9cc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     9d0:	e002      	b.n	9d8 <__addsf3>
     9d2:	bf00      	nop

000009d4 <__aeabi_fsub>:
     9d4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000009d8 <__addsf3>:
     9d8:	0042      	lsls	r2, r0, #1
     9da:	bf1f      	itttt	ne
     9dc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     9e0:	ea92 0f03 	teqne	r2, r3
     9e4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     9e8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     9ec:	d06a      	beq.n	ac4 <__addsf3+0xec>
     9ee:	ea4f 6212 	mov.w	r2, r2, lsr #24
     9f2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     9f6:	bfc1      	itttt	gt
     9f8:	18d2      	addgt	r2, r2, r3
     9fa:	4041      	eorgt	r1, r0
     9fc:	4048      	eorgt	r0, r1
     9fe:	4041      	eorgt	r1, r0
     a00:	bfb8      	it	lt
     a02:	425b      	neglt	r3, r3
     a04:	2b19      	cmp	r3, #25
     a06:	bf88      	it	hi
     a08:	4770      	bxhi	lr
     a0a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     a0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     a12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     a16:	bf18      	it	ne
     a18:	4240      	negne	r0, r0
     a1a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     a1e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     a22:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     a26:	bf18      	it	ne
     a28:	4249      	negne	r1, r1
     a2a:	ea92 0f03 	teq	r2, r3
     a2e:	d03f      	beq.n	ab0 <__addsf3+0xd8>
     a30:	f1a2 0201 	sub.w	r2, r2, #1
     a34:	fa41 fc03 	asr.w	ip, r1, r3
     a38:	eb10 000c 	adds.w	r0, r0, ip
     a3c:	f1c3 0320 	rsb	r3, r3, #32
     a40:	fa01 f103 	lsl.w	r1, r1, r3
     a44:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     a48:	d502      	bpl.n	a50 <__addsf3+0x78>
     a4a:	4249      	negs	r1, r1
     a4c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     a50:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     a54:	d313      	bcc.n	a7e <__addsf3+0xa6>
     a56:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     a5a:	d306      	bcc.n	a6a <__addsf3+0x92>
     a5c:	0840      	lsrs	r0, r0, #1
     a5e:	ea4f 0131 	mov.w	r1, r1, rrx
     a62:	f102 0201 	add.w	r2, r2, #1
     a66:	2afe      	cmp	r2, #254	; 0xfe
     a68:	d251      	bcs.n	b0e <__addsf3+0x136>
     a6a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     a6e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     a72:	bf08      	it	eq
     a74:	f020 0001 	biceq.w	r0, r0, #1
     a78:	ea40 0003 	orr.w	r0, r0, r3
     a7c:	4770      	bx	lr
     a7e:	0049      	lsls	r1, r1, #1
     a80:	eb40 0000 	adc.w	r0, r0, r0
     a84:	3a01      	subs	r2, #1
     a86:	bf28      	it	cs
     a88:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     a8c:	d2ed      	bcs.n	a6a <__addsf3+0x92>
     a8e:	fab0 fc80 	clz	ip, r0
     a92:	f1ac 0c08 	sub.w	ip, ip, #8
     a96:	ebb2 020c 	subs.w	r2, r2, ip
     a9a:	fa00 f00c 	lsl.w	r0, r0, ip
     a9e:	bfaa      	itet	ge
     aa0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     aa4:	4252      	neglt	r2, r2
     aa6:	4318      	orrge	r0, r3
     aa8:	bfbc      	itt	lt
     aaa:	40d0      	lsrlt	r0, r2
     aac:	4318      	orrlt	r0, r3
     aae:	4770      	bx	lr
     ab0:	f092 0f00 	teq	r2, #0
     ab4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     ab8:	bf06      	itte	eq
     aba:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     abe:	3201      	addeq	r2, #1
     ac0:	3b01      	subne	r3, #1
     ac2:	e7b5      	b.n	a30 <__addsf3+0x58>
     ac4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     ac8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     acc:	bf18      	it	ne
     ace:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     ad2:	d021      	beq.n	b18 <__addsf3+0x140>
     ad4:	ea92 0f03 	teq	r2, r3
     ad8:	d004      	beq.n	ae4 <__addsf3+0x10c>
     ada:	f092 0f00 	teq	r2, #0
     ade:	bf08      	it	eq
     ae0:	4608      	moveq	r0, r1
     ae2:	4770      	bx	lr
     ae4:	ea90 0f01 	teq	r0, r1
     ae8:	bf1c      	itt	ne
     aea:	2000      	movne	r0, #0
     aec:	4770      	bxne	lr
     aee:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     af2:	d104      	bne.n	afe <__addsf3+0x126>
     af4:	0040      	lsls	r0, r0, #1
     af6:	bf28      	it	cs
     af8:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     afc:	4770      	bx	lr
     afe:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     b02:	bf3c      	itt	cc
     b04:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     b08:	4770      	bxcc	lr
     b0a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b0e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     b12:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b16:	4770      	bx	lr
     b18:	ea7f 6222 	mvns.w	r2, r2, asr #24
     b1c:	bf16      	itet	ne
     b1e:	4608      	movne	r0, r1
     b20:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     b24:	4601      	movne	r1, r0
     b26:	0242      	lsls	r2, r0, #9
     b28:	bf06      	itte	eq
     b2a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     b2e:	ea90 0f01 	teqeq	r0, r1
     b32:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     b36:	4770      	bx	lr

00000b38 <__aeabi_ui2f>:
     b38:	f04f 0300 	mov.w	r3, #0
     b3c:	e004      	b.n	b48 <__aeabi_i2f+0x8>
     b3e:	bf00      	nop

00000b40 <__aeabi_i2f>:
     b40:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     b44:	bf48      	it	mi
     b46:	4240      	negmi	r0, r0
     b48:	ea5f 0c00 	movs.w	ip, r0
     b4c:	bf08      	it	eq
     b4e:	4770      	bxeq	lr
     b50:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     b54:	4601      	mov	r1, r0
     b56:	f04f 0000 	mov.w	r0, #0
     b5a:	e01c      	b.n	b96 <__aeabi_l2f+0x2a>

00000b5c <__aeabi_ul2f>:
     b5c:	ea50 0201 	orrs.w	r2, r0, r1
     b60:	bf08      	it	eq
     b62:	4770      	bxeq	lr
     b64:	f04f 0300 	mov.w	r3, #0
     b68:	e00a      	b.n	b80 <__aeabi_l2f+0x14>
     b6a:	bf00      	nop

00000b6c <__aeabi_l2f>:
     b6c:	ea50 0201 	orrs.w	r2, r0, r1
     b70:	bf08      	it	eq
     b72:	4770      	bxeq	lr
     b74:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     b78:	d502      	bpl.n	b80 <__aeabi_l2f+0x14>
     b7a:	4240      	negs	r0, r0
     b7c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     b80:	ea5f 0c01 	movs.w	ip, r1
     b84:	bf02      	ittt	eq
     b86:	4684      	moveq	ip, r0
     b88:	4601      	moveq	r1, r0
     b8a:	2000      	moveq	r0, #0
     b8c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     b90:	bf08      	it	eq
     b92:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     b96:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     b9a:	fabc f28c 	clz	r2, ip
     b9e:	3a08      	subs	r2, #8
     ba0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     ba4:	db10      	blt.n	bc8 <__aeabi_l2f+0x5c>
     ba6:	fa01 fc02 	lsl.w	ip, r1, r2
     baa:	4463      	add	r3, ip
     bac:	fa00 fc02 	lsl.w	ip, r0, r2
     bb0:	f1c2 0220 	rsb	r2, r2, #32
     bb4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     bb8:	fa20 f202 	lsr.w	r2, r0, r2
     bbc:	eb43 0002 	adc.w	r0, r3, r2
     bc0:	bf08      	it	eq
     bc2:	f020 0001 	biceq.w	r0, r0, #1
     bc6:	4770      	bx	lr
     bc8:	f102 0220 	add.w	r2, r2, #32
     bcc:	fa01 fc02 	lsl.w	ip, r1, r2
     bd0:	f1c2 0220 	rsb	r2, r2, #32
     bd4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     bd8:	fa21 f202 	lsr.w	r2, r1, r2
     bdc:	eb43 0002 	adc.w	r0, r3, r2
     be0:	bf08      	it	eq
     be2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     be6:	4770      	bx	lr

00000be8 <__aeabi_fmul>:
     be8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     bec:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     bf0:	bf1e      	ittt	ne
     bf2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     bf6:	ea92 0f0c 	teqne	r2, ip
     bfa:	ea93 0f0c 	teqne	r3, ip
     bfe:	d06f      	beq.n	ce0 <__aeabi_fmul+0xf8>
     c00:	441a      	add	r2, r3
     c02:	ea80 0c01 	eor.w	ip, r0, r1
     c06:	0240      	lsls	r0, r0, #9
     c08:	bf18      	it	ne
     c0a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     c0e:	d01e      	beq.n	c4e <__aeabi_fmul+0x66>
     c10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     c14:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     c18:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     c1c:	fba0 3101 	umull	r3, r1, r0, r1
     c20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     c24:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     c28:	bf3e      	ittt	cc
     c2a:	0049      	lslcc	r1, r1, #1
     c2c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     c30:	005b      	lslcc	r3, r3, #1
     c32:	ea40 0001 	orr.w	r0, r0, r1
     c36:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     c3a:	2afd      	cmp	r2, #253	; 0xfd
     c3c:	d81d      	bhi.n	c7a <__aeabi_fmul+0x92>
     c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     c42:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     c46:	bf08      	it	eq
     c48:	f020 0001 	biceq.w	r0, r0, #1
     c4c:	4770      	bx	lr
     c4e:	f090 0f00 	teq	r0, #0
     c52:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     c56:	bf08      	it	eq
     c58:	0249      	lsleq	r1, r1, #9
     c5a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     c5e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     c62:	3a7f      	subs	r2, #127	; 0x7f
     c64:	bfc2      	ittt	gt
     c66:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     c6a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     c6e:	4770      	bxgt	lr
     c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c74:	f04f 0300 	mov.w	r3, #0
     c78:	3a01      	subs	r2, #1
     c7a:	dc5d      	bgt.n	d38 <__aeabi_fmul+0x150>
     c7c:	f112 0f19 	cmn.w	r2, #25
     c80:	bfdc      	itt	le
     c82:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     c86:	4770      	bxle	lr
     c88:	f1c2 0200 	rsb	r2, r2, #0
     c8c:	0041      	lsls	r1, r0, #1
     c8e:	fa21 f102 	lsr.w	r1, r1, r2
     c92:	f1c2 0220 	rsb	r2, r2, #32
     c96:	fa00 fc02 	lsl.w	ip, r0, r2
     c9a:	ea5f 0031 	movs.w	r0, r1, rrx
     c9e:	f140 0000 	adc.w	r0, r0, #0
     ca2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     ca6:	bf08      	it	eq
     ca8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     cac:	4770      	bx	lr
     cae:	f092 0f00 	teq	r2, #0
     cb2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     cb6:	bf02      	ittt	eq
     cb8:	0040      	lsleq	r0, r0, #1
     cba:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     cbe:	3a01      	subeq	r2, #1
     cc0:	d0f9      	beq.n	cb6 <__aeabi_fmul+0xce>
     cc2:	ea40 000c 	orr.w	r0, r0, ip
     cc6:	f093 0f00 	teq	r3, #0
     cca:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     cce:	bf02      	ittt	eq
     cd0:	0049      	lsleq	r1, r1, #1
     cd2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     cd6:	3b01      	subeq	r3, #1
     cd8:	d0f9      	beq.n	cce <__aeabi_fmul+0xe6>
     cda:	ea41 010c 	orr.w	r1, r1, ip
     cde:	e78f      	b.n	c00 <__aeabi_fmul+0x18>
     ce0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     ce4:	ea92 0f0c 	teq	r2, ip
     ce8:	bf18      	it	ne
     cea:	ea93 0f0c 	teqne	r3, ip
     cee:	d00a      	beq.n	d06 <__aeabi_fmul+0x11e>
     cf0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     cf4:	bf18      	it	ne
     cf6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     cfa:	d1d8      	bne.n	cae <__aeabi_fmul+0xc6>
     cfc:	ea80 0001 	eor.w	r0, r0, r1
     d00:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d04:	4770      	bx	lr
     d06:	f090 0f00 	teq	r0, #0
     d0a:	bf17      	itett	ne
     d0c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     d10:	4608      	moveq	r0, r1
     d12:	f091 0f00 	teqne	r1, #0
     d16:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     d1a:	d014      	beq.n	d46 <__aeabi_fmul+0x15e>
     d1c:	ea92 0f0c 	teq	r2, ip
     d20:	d101      	bne.n	d26 <__aeabi_fmul+0x13e>
     d22:	0242      	lsls	r2, r0, #9
     d24:	d10f      	bne.n	d46 <__aeabi_fmul+0x15e>
     d26:	ea93 0f0c 	teq	r3, ip
     d2a:	d103      	bne.n	d34 <__aeabi_fmul+0x14c>
     d2c:	024b      	lsls	r3, r1, #9
     d2e:	bf18      	it	ne
     d30:	4608      	movne	r0, r1
     d32:	d108      	bne.n	d46 <__aeabi_fmul+0x15e>
     d34:	ea80 0001 	eor.w	r0, r0, r1
     d38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     d3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d44:	4770      	bx	lr
     d46:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     d4a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     d4e:	4770      	bx	lr

00000d50 <__aeabi_fdiv>:
     d50:	f04f 0cff 	mov.w	ip, #255	; 0xff
     d54:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d58:	bf1e      	ittt	ne
     d5a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d5e:	ea92 0f0c 	teqne	r2, ip
     d62:	ea93 0f0c 	teqne	r3, ip
     d66:	d069      	beq.n	e3c <__aeabi_fdiv+0xec>
     d68:	eba2 0203 	sub.w	r2, r2, r3
     d6c:	ea80 0c01 	eor.w	ip, r0, r1
     d70:	0249      	lsls	r1, r1, #9
     d72:	ea4f 2040 	mov.w	r0, r0, lsl #9
     d76:	d037      	beq.n	de8 <__aeabi_fdiv+0x98>
     d78:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     d7c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     d80:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     d84:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d88:	428b      	cmp	r3, r1
     d8a:	bf38      	it	cc
     d8c:	005b      	lslcc	r3, r3, #1
     d8e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     d92:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     d96:	428b      	cmp	r3, r1
     d98:	bf24      	itt	cs
     d9a:	1a5b      	subcs	r3, r3, r1
     d9c:	ea40 000c 	orrcs.w	r0, r0, ip
     da0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     da4:	bf24      	itt	cs
     da6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     daa:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     dae:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     db2:	bf24      	itt	cs
     db4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     db8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     dbc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     dc0:	bf24      	itt	cs
     dc2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     dc6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     dca:	011b      	lsls	r3, r3, #4
     dcc:	bf18      	it	ne
     dce:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     dd2:	d1e0      	bne.n	d96 <__aeabi_fdiv+0x46>
     dd4:	2afd      	cmp	r2, #253	; 0xfd
     dd6:	f63f af50 	bhi.w	c7a <__aeabi_fmul+0x92>
     dda:	428b      	cmp	r3, r1
     ddc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     de0:	bf08      	it	eq
     de2:	f020 0001 	biceq.w	r0, r0, #1
     de6:	4770      	bx	lr
     de8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     dec:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     df0:	327f      	adds	r2, #127	; 0x7f
     df2:	bfc2      	ittt	gt
     df4:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     df8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     dfc:	4770      	bxgt	lr
     dfe:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e02:	f04f 0300 	mov.w	r3, #0
     e06:	3a01      	subs	r2, #1
     e08:	e737      	b.n	c7a <__aeabi_fmul+0x92>
     e0a:	f092 0f00 	teq	r2, #0
     e0e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     e12:	bf02      	ittt	eq
     e14:	0040      	lsleq	r0, r0, #1
     e16:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     e1a:	3a01      	subeq	r2, #1
     e1c:	d0f9      	beq.n	e12 <__aeabi_fdiv+0xc2>
     e1e:	ea40 000c 	orr.w	r0, r0, ip
     e22:	f093 0f00 	teq	r3, #0
     e26:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     e2a:	bf02      	ittt	eq
     e2c:	0049      	lsleq	r1, r1, #1
     e2e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     e32:	3b01      	subeq	r3, #1
     e34:	d0f9      	beq.n	e2a <__aeabi_fdiv+0xda>
     e36:	ea41 010c 	orr.w	r1, r1, ip
     e3a:	e795      	b.n	d68 <__aeabi_fdiv+0x18>
     e3c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     e40:	ea92 0f0c 	teq	r2, ip
     e44:	d108      	bne.n	e58 <__aeabi_fdiv+0x108>
     e46:	0242      	lsls	r2, r0, #9
     e48:	f47f af7d 	bne.w	d46 <__aeabi_fmul+0x15e>
     e4c:	ea93 0f0c 	teq	r3, ip
     e50:	f47f af70 	bne.w	d34 <__aeabi_fmul+0x14c>
     e54:	4608      	mov	r0, r1
     e56:	e776      	b.n	d46 <__aeabi_fmul+0x15e>
     e58:	ea93 0f0c 	teq	r3, ip
     e5c:	d104      	bne.n	e68 <__aeabi_fdiv+0x118>
     e5e:	024b      	lsls	r3, r1, #9
     e60:	f43f af4c 	beq.w	cfc <__aeabi_fmul+0x114>
     e64:	4608      	mov	r0, r1
     e66:	e76e      	b.n	d46 <__aeabi_fmul+0x15e>
     e68:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e6c:	bf18      	it	ne
     e6e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e72:	d1ca      	bne.n	e0a <__aeabi_fdiv+0xba>
     e74:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     e78:	f47f af5c 	bne.w	d34 <__aeabi_fmul+0x14c>
     e7c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     e80:	f47f af3c 	bne.w	cfc <__aeabi_fmul+0x114>
     e84:	e75f      	b.n	d46 <__aeabi_fmul+0x15e>
     e86:	bf00      	nop

00000e88 <__aeabi_uldivmod>:
     e88:	b953      	cbnz	r3, ea0 <__aeabi_uldivmod+0x18>
     e8a:	b94a      	cbnz	r2, ea0 <__aeabi_uldivmod+0x18>
     e8c:	2900      	cmp	r1, #0
     e8e:	bf08      	it	eq
     e90:	2800      	cmpeq	r0, #0
     e92:	bf1c      	itt	ne
     e94:	f04f 31ff 	movne.w	r1, #4294967295
     e98:	f04f 30ff 	movne.w	r0, #4294967295
     e9c:	f000 b974 	b.w	1188 <__aeabi_idiv0>
     ea0:	f1ad 0c08 	sub.w	ip, sp, #8
     ea4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     ea8:	f000 f806 	bl	eb8 <__udivmoddi4>
     eac:	f8dd e004 	ldr.w	lr, [sp, #4]
     eb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     eb4:	b004      	add	sp, #16
     eb6:	4770      	bx	lr

00000eb8 <__udivmoddi4>:
     eb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     ebc:	9e08      	ldr	r6, [sp, #32]
     ebe:	460d      	mov	r5, r1
     ec0:	4604      	mov	r4, r0
     ec2:	4688      	mov	r8, r1
     ec4:	2b00      	cmp	r3, #0
     ec6:	d14d      	bne.n	f64 <__udivmoddi4+0xac>
     ec8:	428a      	cmp	r2, r1
     eca:	4694      	mov	ip, r2
     ecc:	d968      	bls.n	fa0 <__udivmoddi4+0xe8>
     ece:	fab2 f282 	clz	r2, r2
     ed2:	b152      	cbz	r2, eea <__udivmoddi4+0x32>
     ed4:	fa01 f302 	lsl.w	r3, r1, r2
     ed8:	f1c2 0120 	rsb	r1, r2, #32
     edc:	fa20 f101 	lsr.w	r1, r0, r1
     ee0:	fa0c fc02 	lsl.w	ip, ip, r2
     ee4:	ea41 0803 	orr.w	r8, r1, r3
     ee8:	4094      	lsls	r4, r2
     eea:	ea4f 451c 	mov.w	r5, ip, lsr #16
     eee:	0c21      	lsrs	r1, r4, #16
     ef0:	fbb8 fef5 	udiv	lr, r8, r5
     ef4:	fa1f f78c 	uxth.w	r7, ip
     ef8:	fb05 831e 	mls	r3, r5, lr, r8
     efc:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
     f00:	fb0e f107 	mul.w	r1, lr, r7
     f04:	4299      	cmp	r1, r3
     f06:	d90b      	bls.n	f20 <__udivmoddi4+0x68>
     f08:	eb1c 0303 	adds.w	r3, ip, r3
     f0c:	f10e 30ff 	add.w	r0, lr, #4294967295
     f10:	f080 811e 	bcs.w	1150 <__udivmoddi4+0x298>
     f14:	4299      	cmp	r1, r3
     f16:	f240 811b 	bls.w	1150 <__udivmoddi4+0x298>
     f1a:	f1ae 0e02 	sub.w	lr, lr, #2
     f1e:	4463      	add	r3, ip
     f20:	1a5b      	subs	r3, r3, r1
     f22:	b2a4      	uxth	r4, r4
     f24:	fbb3 f0f5 	udiv	r0, r3, r5
     f28:	fb05 3310 	mls	r3, r5, r0, r3
     f2c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
     f30:	fb00 f707 	mul.w	r7, r0, r7
     f34:	42a7      	cmp	r7, r4
     f36:	d90a      	bls.n	f4e <__udivmoddi4+0x96>
     f38:	eb1c 0404 	adds.w	r4, ip, r4
     f3c:	f100 33ff 	add.w	r3, r0, #4294967295
     f40:	f080 8108 	bcs.w	1154 <__udivmoddi4+0x29c>
     f44:	42a7      	cmp	r7, r4
     f46:	f240 8105 	bls.w	1154 <__udivmoddi4+0x29c>
     f4a:	4464      	add	r4, ip
     f4c:	3802      	subs	r0, #2
     f4e:	1be4      	subs	r4, r4, r7
     f50:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
     f54:	2100      	movs	r1, #0
     f56:	b11e      	cbz	r6, f60 <__udivmoddi4+0xa8>
     f58:	40d4      	lsrs	r4, r2
     f5a:	2300      	movs	r3, #0
     f5c:	e9c6 4300 	strd	r4, r3, [r6]
     f60:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f64:	428b      	cmp	r3, r1
     f66:	d908      	bls.n	f7a <__udivmoddi4+0xc2>
     f68:	2e00      	cmp	r6, #0
     f6a:	f000 80ee 	beq.w	114a <__udivmoddi4+0x292>
     f6e:	2100      	movs	r1, #0
     f70:	e9c6 0500 	strd	r0, r5, [r6]
     f74:	4608      	mov	r0, r1
     f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     f7a:	fab3 f183 	clz	r1, r3
     f7e:	2900      	cmp	r1, #0
     f80:	d14a      	bne.n	1018 <__udivmoddi4+0x160>
     f82:	42ab      	cmp	r3, r5
     f84:	d302      	bcc.n	f8c <__udivmoddi4+0xd4>
     f86:	4282      	cmp	r2, r0
     f88:	f200 80f9 	bhi.w	117e <__udivmoddi4+0x2c6>
     f8c:	1a84      	subs	r4, r0, r2
     f8e:	eb65 0303 	sbc.w	r3, r5, r3
     f92:	2001      	movs	r0, #1
     f94:	4698      	mov	r8, r3
     f96:	2e00      	cmp	r6, #0
     f98:	d0e2      	beq.n	f60 <__udivmoddi4+0xa8>
     f9a:	e9c6 4800 	strd	r4, r8, [r6]
     f9e:	e7df      	b.n	f60 <__udivmoddi4+0xa8>
     fa0:	b902      	cbnz	r2, fa4 <__udivmoddi4+0xec>
     fa2:	deff      	udf	#255	; 0xff
     fa4:	fab2 f282 	clz	r2, r2
     fa8:	2a00      	cmp	r2, #0
     faa:	f040 8091 	bne.w	10d0 <__udivmoddi4+0x218>
     fae:	eba1 050c 	sub.w	r5, r1, ip
     fb2:	ea4f 471c 	mov.w	r7, ip, lsr #16
     fb6:	fa1f fe8c 	uxth.w	lr, ip
     fba:	2101      	movs	r1, #1
     fbc:	fbb5 f3f7 	udiv	r3, r5, r7
     fc0:	fb07 5013 	mls	r0, r7, r3, r5
     fc4:	0c25      	lsrs	r5, r4, #16
     fc6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
     fca:	fb0e f003 	mul.w	r0, lr, r3
     fce:	42a8      	cmp	r0, r5
     fd0:	d908      	bls.n	fe4 <__udivmoddi4+0x12c>
     fd2:	eb1c 0505 	adds.w	r5, ip, r5
     fd6:	f103 38ff 	add.w	r8, r3, #4294967295
     fda:	d202      	bcs.n	fe2 <__udivmoddi4+0x12a>
     fdc:	42a8      	cmp	r0, r5
     fde:	f200 80cb 	bhi.w	1178 <__udivmoddi4+0x2c0>
     fe2:	4643      	mov	r3, r8
     fe4:	1a2d      	subs	r5, r5, r0
     fe6:	b2a4      	uxth	r4, r4
     fe8:	fbb5 f0f7 	udiv	r0, r5, r7
     fec:	fb07 5510 	mls	r5, r7, r0, r5
     ff0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     ff4:	fb0e fe00 	mul.w	lr, lr, r0
     ff8:	45a6      	cmp	lr, r4
     ffa:	d908      	bls.n	100e <__udivmoddi4+0x156>
     ffc:	eb1c 0404 	adds.w	r4, ip, r4
    1000:	f100 35ff 	add.w	r5, r0, #4294967295
    1004:	d202      	bcs.n	100c <__udivmoddi4+0x154>
    1006:	45a6      	cmp	lr, r4
    1008:	f200 80bb 	bhi.w	1182 <__udivmoddi4+0x2ca>
    100c:	4628      	mov	r0, r5
    100e:	eba4 040e 	sub.w	r4, r4, lr
    1012:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    1016:	e79e      	b.n	f56 <__udivmoddi4+0x9e>
    1018:	f1c1 0720 	rsb	r7, r1, #32
    101c:	408b      	lsls	r3, r1
    101e:	fa22 fc07 	lsr.w	ip, r2, r7
    1022:	ea4c 0c03 	orr.w	ip, ip, r3
    1026:	fa20 f407 	lsr.w	r4, r0, r7
    102a:	fa05 f301 	lsl.w	r3, r5, r1
    102e:	431c      	orrs	r4, r3
    1030:	40fd      	lsrs	r5, r7
    1032:	ea4f 491c 	mov.w	r9, ip, lsr #16
    1036:	fa00 f301 	lsl.w	r3, r0, r1
    103a:	fbb5 f8f9 	udiv	r8, r5, r9
    103e:	0c20      	lsrs	r0, r4, #16
    1040:	fa1f fe8c 	uxth.w	lr, ip
    1044:	fb09 5518 	mls	r5, r9, r8, r5
    1048:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    104c:	fb08 f00e 	mul.w	r0, r8, lr
    1050:	42a8      	cmp	r0, r5
    1052:	fa02 f201 	lsl.w	r2, r2, r1
    1056:	d90b      	bls.n	1070 <__udivmoddi4+0x1b8>
    1058:	eb1c 0505 	adds.w	r5, ip, r5
    105c:	f108 3aff 	add.w	sl, r8, #4294967295
    1060:	f080 8088 	bcs.w	1174 <__udivmoddi4+0x2bc>
    1064:	42a8      	cmp	r0, r5
    1066:	f240 8085 	bls.w	1174 <__udivmoddi4+0x2bc>
    106a:	f1a8 0802 	sub.w	r8, r8, #2
    106e:	4465      	add	r5, ip
    1070:	1a2d      	subs	r5, r5, r0
    1072:	b2a4      	uxth	r4, r4
    1074:	fbb5 f0f9 	udiv	r0, r5, r9
    1078:	fb09 5510 	mls	r5, r9, r0, r5
    107c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1080:	fb00 fe0e 	mul.w	lr, r0, lr
    1084:	45ae      	cmp	lr, r5
    1086:	d908      	bls.n	109a <__udivmoddi4+0x1e2>
    1088:	eb1c 0505 	adds.w	r5, ip, r5
    108c:	f100 34ff 	add.w	r4, r0, #4294967295
    1090:	d26c      	bcs.n	116c <__udivmoddi4+0x2b4>
    1092:	45ae      	cmp	lr, r5
    1094:	d96a      	bls.n	116c <__udivmoddi4+0x2b4>
    1096:	3802      	subs	r0, #2
    1098:	4465      	add	r5, ip
    109a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    109e:	fba0 9402 	umull	r9, r4, r0, r2
    10a2:	eba5 050e 	sub.w	r5, r5, lr
    10a6:	42a5      	cmp	r5, r4
    10a8:	46c8      	mov	r8, r9
    10aa:	46a6      	mov	lr, r4
    10ac:	d356      	bcc.n	115c <__udivmoddi4+0x2a4>
    10ae:	d053      	beq.n	1158 <__udivmoddi4+0x2a0>
    10b0:	b15e      	cbz	r6, 10ca <__udivmoddi4+0x212>
    10b2:	ebb3 0208 	subs.w	r2, r3, r8
    10b6:	eb65 050e 	sbc.w	r5, r5, lr
    10ba:	fa05 f707 	lsl.w	r7, r5, r7
    10be:	fa22 f301 	lsr.w	r3, r2, r1
    10c2:	40cd      	lsrs	r5, r1
    10c4:	431f      	orrs	r7, r3
    10c6:	e9c6 7500 	strd	r7, r5, [r6]
    10ca:	2100      	movs	r1, #0
    10cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    10d0:	f1c2 0320 	rsb	r3, r2, #32
    10d4:	fa20 f103 	lsr.w	r1, r0, r3
    10d8:	fa0c fc02 	lsl.w	ip, ip, r2
    10dc:	fa25 f303 	lsr.w	r3, r5, r3
    10e0:	4095      	lsls	r5, r2
    10e2:	430d      	orrs	r5, r1
    10e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    10e8:	fa1f fe8c 	uxth.w	lr, ip
    10ec:	fbb3 f1f7 	udiv	r1, r3, r7
    10f0:	fb07 3011 	mls	r0, r7, r1, r3
    10f4:	0c2b      	lsrs	r3, r5, #16
    10f6:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    10fa:	fb01 f00e 	mul.w	r0, r1, lr
    10fe:	4298      	cmp	r0, r3
    1100:	fa04 f402 	lsl.w	r4, r4, r2
    1104:	d908      	bls.n	1118 <__udivmoddi4+0x260>
    1106:	eb1c 0303 	adds.w	r3, ip, r3
    110a:	f101 38ff 	add.w	r8, r1, #4294967295
    110e:	d22f      	bcs.n	1170 <__udivmoddi4+0x2b8>
    1110:	4298      	cmp	r0, r3
    1112:	d92d      	bls.n	1170 <__udivmoddi4+0x2b8>
    1114:	3902      	subs	r1, #2
    1116:	4463      	add	r3, ip
    1118:	1a1b      	subs	r3, r3, r0
    111a:	b2ad      	uxth	r5, r5
    111c:	fbb3 f0f7 	udiv	r0, r3, r7
    1120:	fb07 3310 	mls	r3, r7, r0, r3
    1124:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1128:	fb00 f30e 	mul.w	r3, r0, lr
    112c:	42ab      	cmp	r3, r5
    112e:	d908      	bls.n	1142 <__udivmoddi4+0x28a>
    1130:	eb1c 0505 	adds.w	r5, ip, r5
    1134:	f100 38ff 	add.w	r8, r0, #4294967295
    1138:	d216      	bcs.n	1168 <__udivmoddi4+0x2b0>
    113a:	42ab      	cmp	r3, r5
    113c:	d914      	bls.n	1168 <__udivmoddi4+0x2b0>
    113e:	3802      	subs	r0, #2
    1140:	4465      	add	r5, ip
    1142:	1aed      	subs	r5, r5, r3
    1144:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1148:	e738      	b.n	fbc <__udivmoddi4+0x104>
    114a:	4631      	mov	r1, r6
    114c:	4630      	mov	r0, r6
    114e:	e707      	b.n	f60 <__udivmoddi4+0xa8>
    1150:	4686      	mov	lr, r0
    1152:	e6e5      	b.n	f20 <__udivmoddi4+0x68>
    1154:	4618      	mov	r0, r3
    1156:	e6fa      	b.n	f4e <__udivmoddi4+0x96>
    1158:	454b      	cmp	r3, r9
    115a:	d2a9      	bcs.n	10b0 <__udivmoddi4+0x1f8>
    115c:	ebb9 0802 	subs.w	r8, r9, r2
    1160:	eb64 0e0c 	sbc.w	lr, r4, ip
    1164:	3801      	subs	r0, #1
    1166:	e7a3      	b.n	10b0 <__udivmoddi4+0x1f8>
    1168:	4640      	mov	r0, r8
    116a:	e7ea      	b.n	1142 <__udivmoddi4+0x28a>
    116c:	4620      	mov	r0, r4
    116e:	e794      	b.n	109a <__udivmoddi4+0x1e2>
    1170:	4641      	mov	r1, r8
    1172:	e7d1      	b.n	1118 <__udivmoddi4+0x260>
    1174:	46d0      	mov	r8, sl
    1176:	e77b      	b.n	1070 <__udivmoddi4+0x1b8>
    1178:	3b02      	subs	r3, #2
    117a:	4465      	add	r5, ip
    117c:	e732      	b.n	fe4 <__udivmoddi4+0x12c>
    117e:	4608      	mov	r0, r1
    1180:	e709      	b.n	f96 <__udivmoddi4+0xde>
    1182:	4464      	add	r4, ip
    1184:	3802      	subs	r0, #2
    1186:	e742      	b.n	100e <__udivmoddi4+0x156>

00001188 <__aeabi_idiv0>:
    1188:	4770      	bx	lr
    118a:	bf00      	nop
    118c:	0000      	movs	r0, r0
	...

00001190 <brightness_task>:
		k_msleep(500);
	}
}

void brightness_task()
{
    1190:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1194:	b094      	sub	sp, #80	; 0x50
    1196:	466d      	mov	r5, sp
	float light_data[LIGHT_BUFFER_COUNT];
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    1198:	2400      	movs	r4, #0
		light_data[i] = AnalogRead(4);
    119a:	2004      	movs	r0, #4
    119c:	f000 f8cc 	bl	1338 <AnalogRead>
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    11a0:	3401      	adds	r4, #1
    11a2:	2c14      	cmp	r4, #20
		light_data[i] = AnalogRead(4);
    11a4:	f845 0b04 	str.w	r0, [r5], #4
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    11a8:	d1f7      	bne.n	119a <brightness_task+0xa>
		}
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
		float light_value = sum / LIGHT_BUFFER_COUNT;
		//printf("light =%f\n",light_value);
		brightness_value = 75.55 * light_value;
    11aa:	a717      	add	r7, pc, #92	; (adr r7, 1208 <brightness_task+0x78>)
    11ac:	e9d7 6700 	ldrd	r6, r7, [r7]
		float light_value = sum / LIGHT_BUFFER_COUNT;
    11b0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1210 <brightness_task+0x80>
		float sum = 0;
    11b4:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    11b8:	46e8      	mov	r8, sp
    11ba:	2513      	movs	r5, #19
		float sum = 0;
    11bc:	4654      	mov	r4, sl
			light_data[i] = light_data[i + 1];
    11be:	f8d8 1004 	ldr.w	r1, [r8, #4]
    11c2:	f848 1b04 	str.w	r1, [r8], #4
			sum = sum + light_data[i];
    11c6:	4620      	mov	r0, r4
    11c8:	f7ff fc06 	bl	9d8 <__addsf3>
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    11cc:	3d01      	subs	r5, #1
			sum = sum + light_data[i];
    11ce:	4604      	mov	r4, r0
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    11d0:	d1f5      	bne.n	11be <brightness_task+0x2e>
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    11d2:	2004      	movs	r0, #4
    11d4:	f000 f8b0 	bl	1338 <AnalogRead>
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    11d8:	4621      	mov	r1, r4
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    11da:	9013      	str	r0, [sp, #76]	; 0x4c
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    11dc:	f7ff fbfc 	bl	9d8 <__addsf3>
		float light_value = sum / LIGHT_BUFFER_COUNT;
    11e0:	4649      	mov	r1, r9
    11e2:	f7ff fdb5 	bl	d50 <__aeabi_fdiv>
		brightness_value = 75.55 * light_value;
    11e6:	f7ff f8ef 	bl	3c8 <__aeabi_f2d>
    11ea:	4632      	mov	r2, r6
    11ec:	463b      	mov	r3, r7
    11ee:	f7ff f943 	bl	478 <__aeabi_dmul>
    11f2:	f7ff fb53 	bl	89c <__aeabi_d2iz>
    11f6:	4b07      	ldr	r3, [pc, #28]	; (1214 <brightness_task+0x84>)
    11f8:	6018      	str	r0, [r3, #0]
		k_msleep(1000);
    11fa:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    11fe:	f01f fd20 	bl	20c42 <k_msleep.isra.0>
		hrs_notify();
    1202:	f001 fb9b 	bl	293c <hrs_notify>
	{
    1206:	e7d7      	b.n	11b8 <brightness_task+0x28>
    1208:	33333333 	.word	0x33333333
    120c:	4052e333 	.word	0x4052e333
    1210:	41a00000 	.word	0x41a00000
    1214:	20000220 	.word	0x20000220

00001218 <main>:
{
    1218:	b5f0      	push	{r4, r5, r6, r7, lr}
	err = bt_enable(NULL);
    121a:	2000      	movs	r0, #0
{
    121c:	b089      	sub	sp, #36	; 0x24
	err = bt_enable(NULL);
    121e:	f009 f94b 	bl	a4b8 <bt_enable>
	if (err) {
    1222:	4606      	mov	r6, r0
    1224:	b130      	cbz	r0, 1234 <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    1226:	4601      	mov	r1, r0
    1228:	4827      	ldr	r0, [pc, #156]	; (12c8 <main+0xb0>)
}
    122a:	b009      	add	sp, #36	; 0x24
    122c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    1230:	f020 bbc6 	b.w	219c0 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    1234:	4d25      	ldr	r5, [pc, #148]	; (12cc <main+0xb4>)
	printk("Bluetooth initialized\n");
    1236:	4826      	ldr	r0, [pc, #152]	; (12d0 <main+0xb8>)
    1238:	f020 fbc2 	bl	219c0 <printk>
	hts_init();		// Health Thermometer Initialize
    123c:	f003 f858 	bl	42f0 <hts_init>
		settings_load();
    1240:	f021 fcdf 	bl	22c02 <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    1244:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    1246:	ac03      	add	r4, sp, #12
    1248:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    124a:	682b      	ldr	r3, [r5, #0]
    124c:	6023      	str	r3, [r4, #0]
    124e:	4921      	ldr	r1, [pc, #132]	; (12d4 <main+0xbc>)
    1250:	9600      	str	r6, [sp, #0]
    1252:	4633      	mov	r3, r6
    1254:	2204      	movs	r2, #4
    1256:	a803      	add	r0, sp, #12
    1258:	f009 fcb0 	bl	abbc <bt_le_adv_start>
	if (err) {
    125c:	4601      	mov	r1, r0
    125e:	b318      	cbz	r0, 12a8 <main+0x90>
		printk("Advertising failed to start (err %d)\n", err);
    1260:	481d      	ldr	r0, [pc, #116]	; (12d8 <main+0xc0>)
    1262:	f020 fbad 	bl	219c0 <printk>
	bt_conn_cb_register(&conn_callbacks);
    1266:	481d      	ldr	r0, [pc, #116]	; (12dc <main+0xc4>)
	while (display_mode == DISPLAY_MODE_BOOTING)
    1268:	4c1d      	ldr	r4, [pc, #116]	; (12e0 <main+0xc8>)
	bt_conn_cb_register(&conn_callbacks);
    126a:	f00a f821 	bl	b2b0 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    126e:	481d      	ldr	r0, [pc, #116]	; (12e4 <main+0xcc>)
    1270:	f00a fc3e 	bl	baf0 <bt_conn_auth_cb_register>
	printk("\n\n Booting Enverse Smart Watch \n\n");
    1274:	481c      	ldr	r0, [pc, #112]	; (12e8 <main+0xd0>)
    1276:	f020 fba3 	bl	219c0 <printk>
	while (display_mode == DISPLAY_MODE_BOOTING)
    127a:	6823      	ldr	r3, [r4, #0]
    127c:	b1c3      	cbz	r3, 12b0 <main+0x98>
		hts_indicate(38.22);
    127e:	a710      	add	r7, pc, #64	; (adr r7, 12c0 <main+0xa8>)
    1280:	e9d7 6700 	ldrd	r6, r7, [r7]
		sensor_mode = SENSOR_MODE_READ_ALL;
    1284:	4d19      	ldr	r5, [pc, #100]	; (12ec <main+0xd4>)
		k_msleep(5000);
    1286:	f241 3088 	movw	r0, #5000	; 0x1388
    128a:	f01f fcda 	bl	20c42 <k_msleep.isra.0>
		sensor_mode = SENSOR_MODE_READ_ALL;
    128e:	2301      	movs	r3, #1
    1290:	602b      	str	r3, [r5, #0]
		k_msleep(10000);
    1292:	f242 7010 	movw	r0, #10000	; 0x2710
		display_mode = DISPLAY_MODE_VALUES;
    1296:	2304      	movs	r3, #4
    1298:	6023      	str	r3, [r4, #0]
		k_msleep(10000);
    129a:	f01f fcd2 	bl	20c42 <k_msleep.isra.0>
		hts_indicate(38.22);
    129e:	4630      	mov	r0, r6
    12a0:	4639      	mov	r1, r7
    12a2:	f003 f841 	bl	4328 <hts_indicate>
	while (1)
    12a6:	e7ee      	b.n	1286 <main+0x6e>
	printk("Advertising successfully started\n");
    12a8:	4811      	ldr	r0, [pc, #68]	; (12f0 <main+0xd8>)
    12aa:	f020 fb89 	bl	219c0 <printk>
    12ae:	e7da      	b.n	1266 <main+0x4e>
		k_msleep(1000);
    12b0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    12b4:	f01f fcc5 	bl	20c42 <k_msleep.isra.0>
    12b8:	e7df      	b.n	127a <main+0x62>
    12ba:	bf00      	nop
    12bc:	f3af 8000 	nop.w
    12c0:	f5c28f5c 	.word	0xf5c28f5c
    12c4:	40431c28 	.word	0x40431c28
    12c8:	000292a4 	.word	0x000292a4
    12cc:	000278f0 	.word	0x000278f0
    12d0:	000292c4 	.word	0x000292c4
    12d4:	000279e8 	.word	0x000279e8
    12d8:	000292db 	.word	0x000292db
    12dc:	20000224 	.word	0x20000224
    12e0:	2000ad4c 	.word	0x2000ad4c
    12e4:	200001f8 	.word	0x200001f8
    12e8:	00029323 	.word	0x00029323
    12ec:	2000ad58 	.word	0x2000ad58
    12f0:	00029301 	.word	0x00029301
    12f4:	00000000 	.word	0x00000000

000012f8 <max30208_read_temp>:
        // printk("READING FROM MAX30208 FIFO : FAILED\n");
    return rslt;
}

u16_t max30208_read_temp(float *value)
{
    12f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
    12fa:	4605      	mov	r5, r0
    int temp;
    u16_t rslt = 0x00;
    rslt |= max30208_read_fifo(&temp);
    12fc:	a801      	add	r0, sp, #4
    12fe:	f020 f88e 	bl	2141e <max30208_read_fifo>
    if (temp & 0x8000)
    1302:	9b01      	ldr	r3, [sp, #4]
    1304:	041a      	lsls	r2, r3, #16
    {
        temp = ~(temp - 1);
    1306:	bf44      	itt	mi
    1308:	425b      	negmi	r3, r3
    130a:	9301      	strmi	r3, [sp, #4]
    rslt |= max30208_read_fifo(&temp);
    130c:	4604      	mov	r4, r0
    }
    *value = (float)temp * 0.005;
    130e:	9801      	ldr	r0, [sp, #4]
    1310:	f7ff fc16 	bl	b40 <__aeabi_i2f>
    1314:	f7ff f858 	bl	3c8 <__aeabi_f2d>
    1318:	a305      	add	r3, pc, #20	; (adr r3, 1330 <max30208_read_temp+0x38>)
    131a:	e9d3 2300 	ldrd	r2, r3, [r3]
    131e:	f7ff f8ab 	bl	478 <__aeabi_dmul>
    1322:	f7ff fb03 	bl	92c <__aeabi_d2f>
    1326:	6028      	str	r0, [r5, #0]
    return rslt;
}
    1328:	4620      	mov	r0, r4
    132a:	b003      	add	sp, #12
    132c:	bd30      	pop	{r4, r5, pc}
    132e:	bf00      	nop
    1330:	47ae147b 	.word	0x47ae147b
    1334:	3f747ae1 	.word	0x3f747ae1

00001338 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
    1338:	b5f0      	push	{r4, r5, r6, r7, lr}
		.channels    = BIT(channel),		// bit mask of channels to read
    133a:	2301      	movs	r3, #1
{
    133c:	b087      	sub	sp, #28
		.channels    = BIT(channel),		// bit mask of channels to read
    133e:	4083      	lsls	r3, r0
	const struct adc_sequence sequence = {
    1340:	9302      	str	r3, [sp, #8]
    1342:	230c      	movs	r3, #12
    1344:	2600      	movs	r6, #0
    1346:	9304      	str	r3, [sp, #16]
    1348:	4f27      	ldr	r7, [pc, #156]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    134a:	9601      	str	r6, [sp, #4]
    134c:	230a      	movs	r3, #10
{
    134e:	4605      	mov	r5, r0
	const struct adc_sequence sequence = {
    1350:	f8ad 3014 	strh.w	r3, [sp, #20]
    1354:	9703      	str	r7, [sp, #12]
    1356:	f88d 6016 	strb.w	r6, [sp, #22]
	struct device *adc_dev = getAdcDevice();
    135a:	f002 facb 	bl	38f4 <getAdcDevice>
	if(_LastChannel != channel)
    135e:	4b23      	ldr	r3, [pc, #140]	; (13ec <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x64>)
    1360:	781a      	ldrb	r2, [r3, #0]
    1362:	4295      	cmp	r5, r2
	struct device *adc_dev = getAdcDevice();
    1364:	4604      	mov	r4, r0
	if(_LastChannel != channel)
    1366:	d00c      	beq.n	1382 <AnalogRead+0x4a>
		_IsInitialized = false;
    1368:	4a21      	ldr	r2, [pc, #132]	; (13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>)
		_LastChannel = channel;
    136a:	701d      	strb	r5, [r3, #0]
		_IsInitialized = false;
    136c:	7016      	strb	r6, [r2, #0]
	if ( adc_dev != NULL && !_IsInitialized)
    136e:	b970      	cbnz	r0, 138e <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6>
{
    1370:	2400      	movs	r4, #0
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
    1372:	481d      	ldr	r0, [pc, #116]	; (13e8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x60>)
    1374:	220c      	movs	r2, #12
    1376:	2100      	movs	r1, #0
    1378:	f022 ffef 	bl	2435a <memset>
	if (adc_dev)
    137c:	b9b4      	cbnz	r4, 13ac <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x24>

	s16_t sv = readOneChannel(channel);
	if(sv == -1)
	{
		return sv;
    137e:	481d      	ldr	r0, [pc, #116]	; (13f4 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x6c>)
    1380:	e02c      	b.n	13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>
	if ( adc_dev != NULL && !_IsInitialized)
    1382:	2800      	cmp	r0, #0
    1384:	d0f4      	beq.n	1370 <AnalogRead+0x38>
    1386:	4b1a      	ldr	r3, [pc, #104]	; (13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>)
    1388:	781b      	ldrb	r3, [r3, #0]
    138a:	2b00      	cmp	r3, #0
    138c:	d1f1      	bne.n	1372 <AnalogRead+0x3a>
		m_1st_channel_cfg.channel_id = channel;
    138e:	491a      	ldr	r1, [pc, #104]	; (13f8 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x70>)
    1390:	790b      	ldrb	r3, [r1, #4]
    1392:	f365 0304 	bfi	r3, r5, #0, #5
    1396:	710b      	strb	r3, [r1, #4]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    1398:	68a3      	ldr	r3, [r4, #8]
    139a:	4620      	mov	r0, r4
    139c:	681b      	ldr	r3, [r3, #0]
    139e:	4798      	blx	r3
		if(ret != 0)
    13a0:	2800      	cmp	r0, #0
    13a2:	d1e5      	bne.n	1370 <AnalogRead+0x38>
			_IsInitialized = true;	// we don't have any other analog users
    13a4:	4b12      	ldr	r3, [pc, #72]	; (13f0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x68>)
    13a6:	2201      	movs	r2, #1
    13a8:	701a      	strb	r2, [r3, #0]
    13aa:	e7e2      	b.n	1372 <AnalogRead+0x3a>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    13ac:	68a3      	ldr	r3, [r4, #8]
    13ae:	a901      	add	r1, sp, #4
    13b0:	685b      	ldr	r3, [r3, #4]
    13b2:	4620      	mov	r0, r4
    13b4:	4798      	blx	r3
		if(ret == 0)
    13b6:	2800      	cmp	r0, #0
    13b8:	d1e1      	bne.n	137e <AnalogRead+0x46>
			sample_value = m_sample_buffer[0];
    13ba:	f9b7 0000 	ldrsh.w	r0, [r7]
	if(sv == -1)
    13be:	1c43      	adds	r3, r0, #1
    13c0:	d0dd      	beq.n	137e <AnalogRead+0x46>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
    13c2:	f7fe ffef 	bl	3a4 <__aeabi_i2d>
    13c6:	a306      	add	r3, pc, #24	; (adr r3, 13e0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x58>)
    13c8:	e9d3 2300 	ldrd	r2, r3, [r3]
    13cc:	f7ff f854 	bl	478 <__aeabi_dmul>
    13d0:	4b0a      	ldr	r3, [pc, #40]	; (13fc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x74>)
    13d2:	2200      	movs	r2, #0
    13d4:	f7ff f850 	bl	478 <__aeabi_dmul>
    13d8:	f7ff faa8 	bl	92c <__aeabi_d2f>
	return fout;
    13dc:	b007      	add	sp, #28
    13de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    13e0:	cccccccd 	.word	0xcccccccd
    13e4:	400ccccc 	.word	0x400ccccc
    13e8:	2000ed46 	.word	0x2000ed46
    13ec:	200008eb 	.word	0x200008eb
    13f0:	2000ed79 	.word	0x2000ed79
    13f4:	bf800000 	.word	0xbf800000
    13f8:	200007a6 	.word	0x200007a6
    13fc:	3f500000 	.word	0x3f500000

00001400 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    1400:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1402:	4d44      	ldr	r5, [pc, #272]	; (1514 <bt_init+0x114>)
    1404:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    1408:	6899      	ldr	r1, [r3, #8]
    140a:	f011 0101 	ands.w	r1, r1, #1
{
    140e:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1410:	d11f      	bne.n	1452 <bt_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    1412:	aa03      	add	r2, sp, #12
    1414:	f640 4003 	movw	r0, #3075	; 0xc03
    1418:	f008 f87e 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    141c:	4604      	mov	r4, r0
    141e:	2800      	cmp	r0, #0
    1420:	d174      	bne.n	150c <bt_init+0x10c>
	uint8_t status = buf->data[0];
    1422:	9b03      	ldr	r3, [sp, #12]
    1424:	689b      	ldr	r3, [r3, #8]
	if (status) {
    1426:	781b      	ldrb	r3, [r3, #0]
    1428:	b983      	cbnz	r3, 144c <bt_init+0x4c>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    142a:	f105 0394 	add.w	r3, r5, #148	; 0x94
    142e:	4618      	mov	r0, r3
    1430:	f023 f927 	bl	24682 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    1434:	f3bf 8f5b 	dmb	ish
    1438:	f000 0005 	and.w	r0, r0, #5
    143c:	e853 2f00 	ldrex	r2, [r3]
    1440:	e843 0100 	strex	r1, r0, [r3]
    1444:	2900      	cmp	r1, #0
    1446:	d1f9      	bne.n	143c <bt_init+0x3c>
    1448:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    144c:	9803      	ldr	r0, [sp, #12]
    144e:	f01c f87b 	bl	1d548 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    1452:	aa03      	add	r2, sp, #12
    1454:	2100      	movs	r1, #0
    1456:	f241 0003 	movw	r0, #4099	; 0x1003
    145a:	f008 f85d 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    145e:	4604      	mov	r4, r0
    1460:	2800      	cmp	r0, #0
    1462:	d153      	bne.n	150c <bt_init+0x10c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    1464:	9b03      	ldr	r3, [sp, #12]
    1466:	482c      	ldr	r0, [pc, #176]	; (1518 <bt_init+0x118>)
    1468:	6899      	ldr	r1, [r3, #8]
    146a:	2208      	movs	r2, #8
    146c:	3101      	adds	r1, #1
    146e:	f022 ff49 	bl	24304 <memcpy>
	net_buf_unref(rsp);
    1472:	9803      	ldr	r0, [sp, #12]
    1474:	f01c f868 	bl	1d548 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    1478:	4621      	mov	r1, r4
    147a:	aa03      	add	r2, sp, #12
    147c:	f241 0001 	movw	r0, #4097	; 0x1001
    1480:	f008 f84a 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    1484:	4604      	mov	r4, r0
    1486:	2800      	cmp	r0, #0
    1488:	d140      	bne.n	150c <bt_init+0x10c>
	read_local_ver_complete(rsp);
    148a:	9803      	ldr	r0, [sp, #12]
    148c:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    148e:	785a      	ldrb	r2, [r3, #1]
    1490:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    1494:	78d9      	ldrb	r1, [r3, #3]
    1496:	789a      	ldrb	r2, [r3, #2]
    1498:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    149c:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    149e:	791a      	ldrb	r2, [r3, #4]
    14a0:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    14a4:	7a19      	ldrb	r1, [r3, #8]
    14a6:	79da      	ldrb	r2, [r3, #7]
    14a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    14ac:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    14ae:	795a      	ldrb	r2, [r3, #5]
    14b0:	799b      	ldrb	r3, [r3, #6]
    14b2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    14b6:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    14b8:	f01c f846 	bl	1d548 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    14bc:	4621      	mov	r1, r4
    14be:	aa03      	add	r2, sp, #12
    14c0:	f241 0002 	movw	r0, #4098	; 0x1002
    14c4:	f008 f828 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    14c8:	4604      	mov	r4, r0
    14ca:	b9f8      	cbnz	r0, 150c <bt_init+0x10c>
	memcpy(bt_dev.supported_commands, rp->commands,
    14cc:	9b03      	ldr	r3, [sp, #12]
    14ce:	4813      	ldr	r0, [pc, #76]	; (151c <bt_init+0x11c>)
    14d0:	6899      	ldr	r1, [r3, #8]
    14d2:	2240      	movs	r2, #64	; 0x40
    14d4:	3101      	adds	r1, #1
    14d6:	f022 ff15 	bl	24304 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    14da:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    14de:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
    14e0:	f043 0306 	orr.w	r3, r3, #6
    14e4:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    14e8:	f01c f82e 	bl	1d548 <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    14ec:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    14f0:	065a      	lsls	r2, r3, #25
    14f2:	d41b      	bmi.n	152c <bt_init+0x12c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    14f4:	4b0a      	ldr	r3, [pc, #40]	; (1520 <bt_init+0x120>)
    14f6:	490b      	ldr	r1, [pc, #44]	; (1524 <bt_init+0x124>)
		BT_ERR("Non-LE capable controller detected!");
    14f8:	480b      	ldr	r0, [pc, #44]	; (1528 <bt_init+0x128>)
    14fa:	1ac9      	subs	r1, r1, r3
    14fc:	08c9      	lsrs	r1, r1, #3
    14fe:	0189      	lsls	r1, r1, #6
    1500:	f041 0101 	orr.w	r1, r1, #1
    1504:	f020 fef2 	bl	222ec <log_0>
		return -ENODEV;
    1508:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    150c:	4620      	mov	r0, r4
    150e:	b008      	add	sp, #32
    1510:	bd70      	pop	{r4, r5, r6, pc}
    1512:	bf00      	nop
    1514:	20000000 	.word	0x20000000
    1518:	2000003c 	.word	0x2000003c
    151c:	20000044 	.word	0x20000044
    1520:	0002775c 	.word	0x0002775c
    1524:	00027814 	.word	0x00027814
    1528:	0002c512 	.word	0x0002c512
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    152c:	4621      	mov	r1, r4
    152e:	aa03      	add	r2, sp, #12
    1530:	f242 0003 	movw	r0, #8195	; 0x2003
    1534:	f007 fff0 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    1538:	4604      	mov	r4, r0
    153a:	2800      	cmp	r0, #0
    153c:	d1e6      	bne.n	150c <bt_init+0x10c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    153e:	9b03      	ldr	r3, [sp, #12]
    1540:	48b5      	ldr	r0, [pc, #724]	; (1818 <bt_init+0x418>)
    1542:	6899      	ldr	r1, [r3, #8]
    1544:	2208      	movs	r2, #8
    1546:	3101      	adds	r1, #1
    1548:	f022 fedc 	bl	24304 <memcpy>
	net_buf_unref(rsp);
    154c:	9803      	ldr	r0, [sp, #12]
    154e:	f01b fffb 	bl	1d548 <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    1552:	4621      	mov	r1, r4
    1554:	aa03      	add	r2, sp, #12
    1556:	f242 0002 	movw	r0, #8194	; 0x2002
    155a:	f007 ffdd 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    155e:	4604      	mov	r4, r0
    1560:	2800      	cmp	r0, #0
    1562:	d1d3      	bne.n	150c <bt_init+0x10c>
		le_read_buffer_size_complete(rsp);
    1564:	9b03      	ldr	r3, [sp, #12]
    1566:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    1568:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    156c:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    1570:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    1572:	b121      	cbz	r1, 157e <bt_init+0x17e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    1574:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    1576:	48a9      	ldr	r0, [pc, #676]	; (181c <bt_init+0x41c>)
    1578:	4611      	mov	r1, r2
    157a:	f025 fcf0 	bl	26f5e <z_impl_k_sem_init>
		net_buf_unref(rsp);
    157e:	9803      	ldr	r0, [sp, #12]
    1580:	f01b ffe2 	bl	1d548 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    1584:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    1588:	f016 0620 	ands.w	r6, r6, #32
    158c:	f000 811e 	beq.w	17cc <bt_init+0x3cc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    1590:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    1594:	071b      	lsls	r3, r3, #28
    1596:	d512      	bpl.n	15be <bt_init+0x1be>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1598:	aa03      	add	r2, sp, #12
    159a:	2100      	movs	r1, #0
    159c:	f242 001c 	movw	r0, #8220	; 0x201c
    15a0:	f007 ffba 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    15a4:	4604      	mov	r4, r0
    15a6:	2800      	cmp	r0, #0
    15a8:	d1b0      	bne.n	150c <bt_init+0x10c>
		le_read_supp_states_complete(rsp);
    15aa:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    15ac:	6883      	ldr	r3, [r0, #8]
    15ae:	f8d3 2001 	ldr.w	r2, [r3, #1]
    15b2:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    15b6:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    15ba:	f01b ffc5 	bl	1d548 <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    15be:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    15c2:	069e      	lsls	r6, r3, #26
    15c4:	d524      	bpl.n	1610 <bt_init+0x210>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    15c6:	a902      	add	r1, sp, #8
    15c8:	f10d 0006 	add.w	r0, sp, #6
    15cc:	f008 f974 	bl	98b8 <hci_le_read_max_data_len>
		if (err) {
    15d0:	4604      	mov	r4, r0
    15d2:	2800      	cmp	r0, #0
    15d4:	d19a      	bne.n	150c <bt_init+0x10c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    15d6:	2104      	movs	r1, #4
    15d8:	f242 0024 	movw	r0, #8228	; 0x2024
    15dc:	f007 fe3c 	bl	9258 <bt_hci_cmd_create>
		if (!buf) {
    15e0:	4606      	mov	r6, r0
    15e2:	2800      	cmp	r0, #0
    15e4:	f000 80f9 	beq.w	17da <bt_init+0x3da>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    15e8:	2104      	movs	r1, #4
    15ea:	3008      	adds	r0, #8
    15ec:	f024 fede 	bl	263ac <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    15f0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    15f4:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    15f6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    15fa:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    15fc:	4622      	mov	r2, r4
    15fe:	4631      	mov	r1, r6
    1600:	f242 0024 	movw	r0, #8228	; 0x2024
    1604:	f007 ff88 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    1608:	4604      	mov	r4, r0
    160a:	2800      	cmp	r0, #0
    160c:	f47f af7e 	bne.w	150c <bt_init+0x10c>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    1610:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    1614:	065c      	lsls	r4, r3, #25
    1616:	d52c      	bpl.n	1672 <bt_init+0x272>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
    1618:	2102      	movs	r1, #2
    161a:	f242 002e 	movw	r0, #8238	; 0x202e
    161e:	f007 fe1b 	bl	9258 <bt_hci_cmd_create>
		if (!buf) {
    1622:	4604      	mov	r4, r0
    1624:	2800      	cmp	r0, #0
    1626:	f000 80d8 	beq.w	17da <bt_init+0x3da>
    162a:	2102      	movs	r1, #2
    162c:	3008      	adds	r0, #8
    162e:	f024 febd 	bl	263ac <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
    1632:	f06f 037b 	mvn.w	r3, #123	; 0x7b
    1636:	7003      	strb	r3, [r0, #0]
    1638:	2303      	movs	r3, #3
    163a:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
    163c:	4621      	mov	r1, r4
    163e:	2200      	movs	r2, #0
    1640:	f242 002e 	movw	r0, #8238	; 0x202e
    1644:	f007 ff68 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    1648:	4604      	mov	r4, r0
    164a:	2800      	cmp	r0, #0
    164c:	f47f af5e 	bne.w	150c <bt_init+0x10c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    1650:	4601      	mov	r1, r0
    1652:	aa03      	add	r2, sp, #12
    1654:	f242 002a 	movw	r0, #8234	; 0x202a
    1658:	f007 ff5e 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    165c:	4604      	mov	r4, r0
    165e:	2800      	cmp	r0, #0
    1660:	f47f af54 	bne.w	150c <bt_init+0x10c>
		le_read_resolving_list_size_complete(rsp);
    1664:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    1666:	6883      	ldr	r3, [r0, #8]
    1668:	785b      	ldrb	r3, [r3, #1]
    166a:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    166e:	f01b ff6b 	bl	1d548 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    1672:	2108      	movs	r1, #8
    1674:	f242 0001 	movw	r0, #8193	; 0x2001
    1678:	f007 fdee 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    167c:	4604      	mov	r4, r0
    167e:	2800      	cmp	r0, #0
    1680:	f000 80ab 	beq.w	17da <bt_init+0x3da>
    1684:	2108      	movs	r1, #8
    1686:	4408      	add	r0, r1
    1688:	f024 fe90 	bl	263ac <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    168c:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    1690:	f011 0f40 	tst.w	r1, #64	; 0x40
    1694:	4602      	mov	r2, r0
    1696:	f240 2302 	movw	r3, #514	; 0x202
    169a:	bf08      	it	eq
    169c:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    169e:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    16a0:	bf4c      	ite	mi
    16a2:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    16a6:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    16aa:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    16ac:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    16b0:	bf48      	it	mi
    16b2:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    16b6:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    16ba:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    16be:	bf18      	it	ne
    16c0:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    16c4:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    16c8:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    16ca:	bf48      	it	mi
    16cc:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    16d0:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    16d2:	bf08      	it	eq
    16d4:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    16d8:	2100      	movs	r1, #0
    16da:	f023 f811 	bl	24700 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    16de:	4621      	mov	r1, r4
    16e0:	2200      	movs	r2, #0
    16e2:	f242 0001 	movw	r0, #8193	; 0x2001
    16e6:	f007 ff17 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    16ea:	4604      	mov	r4, r0
    16ec:	2800      	cmp	r0, #0
    16ee:	f47f af0d 	bne.w	150c <bt_init+0x10c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    16f2:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    16f6:	0698      	lsls	r0, r3, #26
    16f8:	d41e      	bmi.n	1738 <bt_init+0x338>
	if (bt_dev.le.acl_mtu) {
    16fa:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    16fe:	b9d9      	cbnz	r1, 1738 <bt_init+0x338>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    1700:	aa03      	add	r2, sp, #12
    1702:	f241 0005 	movw	r0, #4101	; 0x1005
    1706:	f007 ff07 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    170a:	4604      	mov	r4, r0
    170c:	2800      	cmp	r0, #0
    170e:	f47f aefd 	bne.w	150c <bt_init+0x10c>
	if (bt_dev.le.acl_mtu) {
    1712:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    1716:	b963      	cbnz	r3, 1732 <bt_init+0x332>
    1718:	9b03      	ldr	r3, [sp, #12]
    171a:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    171c:	785a      	ldrb	r2, [r3, #1]
    171e:	7899      	ldrb	r1, [r3, #2]
    1720:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1724:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1728:	889a      	ldrh	r2, [r3, #4]
    172a:	483c      	ldr	r0, [pc, #240]	; (181c <bt_init+0x41c>)
    172c:	4611      	mov	r1, r2
    172e:	f025 fc16 	bl	26f5e <z_impl_k_sem_init>
	net_buf_unref(rsp);
    1732:	9803      	ldr	r0, [sp, #12]
    1734:	f01b ff08 	bl	1d548 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    1738:	2108      	movs	r1, #8
    173a:	f640 4001 	movw	r0, #3073	; 0xc01
    173e:	f007 fd8b 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    1742:	4604      	mov	r4, r0
    1744:	2800      	cmp	r0, #0
    1746:	d048      	beq.n	17da <bt_init+0x3da>
    1748:	2108      	movs	r1, #8
    174a:	4408      	add	r0, r1
    174c:	f024 fe2e 	bl	263ac <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1750:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    1754:	07d9      	lsls	r1, r3, #31
    1756:	4602      	mov	r2, r0
    1758:	d554      	bpl.n	1804 <bt_init+0x404>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    175a:	a12d      	add	r1, pc, #180	; (adr r1, 1810 <bt_init+0x410>)
    175c:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    1760:	f022 ffce 	bl	24700 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    1764:	4621      	mov	r1, r4
    1766:	2200      	movs	r2, #0
    1768:	f640 4001 	movw	r0, #3073	; 0xc01
    176c:	f007 fed4 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    1770:	4604      	mov	r4, r0
    1772:	2800      	cmp	r0, #0
    1774:	f47f aeca 	bne.w	150c <bt_init+0x10c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    1778:	4601      	mov	r1, r0
    177a:	aa02      	add	r2, sp, #8
    177c:	f64f 4001 	movw	r0, #64513	; 0xfc01
    1780:	f007 feca 	bl	9518 <bt_hci_cmd_send_sync>
    1784:	4e26      	ldr	r6, [pc, #152]	; (1820 <bt_init+0x420>)
    1786:	4b27      	ldr	r3, [pc, #156]	; (1824 <bt_init+0x424>)
    1788:	1af6      	subs	r6, r6, r3
    178a:	08f6      	lsrs	r6, r6, #3
    178c:	01b6      	lsls	r6, r6, #6
	if (err) {
    178e:	2800      	cmp	r0, #0
    1790:	d054      	beq.n	183c <bt_init+0x43c>
		BT_WARN("Vendor HCI extensions not available");
    1792:	4825      	ldr	r0, [pc, #148]	; (1828 <bt_init+0x428>)
    1794:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    1798:	f020 fda8 	bl	222ec <log_0>
		err = bt_conn_init();
    179c:	f00a f9d0 	bl	bb40 <bt_conn_init>
		if (err) {
    17a0:	4604      	mov	r4, r0
    17a2:	2800      	cmp	r0, #0
    17a4:	f47f aeb2 	bne.w	150c <bt_init+0x10c>
 * @return N/A
 */
static inline void k_delayed_work_init(struct k_delayed_work *work,
				       k_work_handler_t handler)
{
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    17a8:	4601      	mov	r1, r0
    17aa:	2230      	movs	r2, #48	; 0x30
    17ac:	481f      	ldr	r0, [pc, #124]	; (182c <bt_init+0x42c>)
    17ae:	f022 fdd4 	bl	2435a <memset>
    17b2:	4b1f      	ldr	r3, [pc, #124]	; (1830 <bt_init+0x430>)
    17b4:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
		if (!bt_dev.id_count) {
    17b8:	79eb      	ldrb	r3, [r5, #7]
    17ba:	2b00      	cmp	r3, #0
    17bc:	f040 80ab 	bne.w	1916 <bt_init+0x516>
			BT_INFO("No ID address. App must call settings_load()");
    17c0:	481c      	ldr	r0, [pc, #112]	; (1834 <bt_init+0x434>)
    17c2:	f046 0103 	orr.w	r1, r6, #3
    17c6:	f020 fd91 	bl	222ec <log_0>
			return 0;
    17ca:	e69f      	b.n	150c <bt_init+0x10c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    17cc:	2102      	movs	r1, #2
    17ce:	f640 406d 	movw	r0, #3181	; 0xc6d
    17d2:	f007 fd41 	bl	9258 <bt_hci_cmd_create>
		if (!buf) {
    17d6:	4604      	mov	r4, r0
    17d8:	b910      	cbnz	r0, 17e0 <bt_init+0x3e0>
		return -ENOBUFS;
    17da:	f06f 0436 	mvn.w	r4, #54	; 0x36
    17de:	e695      	b.n	150c <bt_init+0x10c>
    17e0:	2102      	movs	r1, #2
    17e2:	3008      	adds	r0, #8
    17e4:	f024 fde2 	bl	263ac <net_buf_simple_add>
		cp_le->le = 0x01;
    17e8:	2301      	movs	r3, #1
    17ea:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    17ec:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    17ee:	4621      	mov	r1, r4
    17f0:	4632      	mov	r2, r6
    17f2:	f640 406d 	movw	r0, #3181	; 0xc6d
    17f6:	f007 fe8f 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    17fa:	4604      	mov	r4, r0
    17fc:	2800      	cmp	r0, #0
    17fe:	f43f aec7 	beq.w	1590 <bt_init+0x190>
    1802:	e683      	b.n	150c <bt_init+0x10c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    1804:	480c      	ldr	r0, [pc, #48]	; (1838 <bt_init+0x438>)
    1806:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    180a:	e7a9      	b.n	1760 <bt_init+0x360>
    180c:	f3af 8000 	nop.w
    1810:	02008890 	.word	0x02008890
    1814:	20008000 	.word	0x20008000
    1818:	20000098 	.word	0x20000098
    181c:	200000c8 	.word	0x200000c8
    1820:	00027814 	.word	0x00027814
    1824:	0002775c 	.word	0x0002775c
    1828:	0002c536 	.word	0x0002c536
    182c:	20000130 	.word	0x20000130
    1830:	0000986d 	.word	0x0000986d
    1834:	0002c60a 	.word	0x0002c60a
    1838:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    183c:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    183e:	4839      	ldr	r0, [pc, #228]	; (1924 <bt_init+0x524>)
	rp.info = (void *)rsp->data;
    1840:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    1842:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    1846:	2a03      	cmp	r2, #3
		return plat_str[platform];
    1848:	bf96      	itet	ls
    184a:	4937      	ldrls	r1, [pc, #220]	; (1928 <bt_init+0x528>)
	return "unknown";
    184c:	4937      	ldrhi	r1, [pc, #220]	; (192c <bt_init+0x52c>)
		return plat_str[platform];
    184e:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    1852:	f046 0303 	orr.w	r3, r6, #3
    1856:	f020 fd6a 	bl	2232e <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    185a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    185e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1862:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    1864:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    1868:	d12e      	bne.n	18c8 <bt_init+0x4c8>
	if (variant < ARRAY_SIZE(nordic_str)) {
    186a:	2a03      	cmp	r2, #3
    186c:	d82c      	bhi.n	18c8 <bt_init+0x4c8>
		return nordic_str[variant];
    186e:	4930      	ldr	r1, [pc, #192]	; (1930 <bt_init+0x530>)
    1870:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    1874:	482f      	ldr	r0, [pc, #188]	; (1934 <bt_init+0x534>)
    1876:	f020 fd5a 	bl	2232e <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    187a:	7962      	ldrb	r2, [r4, #5]
    187c:	482e      	ldr	r0, [pc, #184]	; (1938 <bt_init+0x538>)
	if (variant < ARRAY_SIZE(var_str)) {
    187e:	2a03      	cmp	r2, #3
		return var_str[variant];
    1880:	bf96      	itet	ls
    1882:	492e      	ldrls	r1, [pc, #184]	; (193c <bt_init+0x53c>)
	return "unknown";
    1884:	4929      	ldrhi	r1, [pc, #164]	; (192c <bt_init+0x52c>)
		return var_str[variant];
    1886:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    188a:	e9cd 1203 	strd	r1, r2, [sp, #12]
    188e:	79a2      	ldrb	r2, [r4, #6]
    1890:	9205      	str	r2, [sp, #20]
    1892:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    1896:	9206      	str	r2, [sp, #24]
    1898:	f8d4 2009 	ldr.w	r2, [r4, #9]
    189c:	9207      	str	r2, [sp, #28]
    189e:	f046 0303 	orr.w	r3, r6, #3
    18a2:	2205      	movs	r2, #5
    18a4:	a903      	add	r1, sp, #12
    18a6:	f020 fd77 	bl	22398 <log_n>
	net_buf_unref(rsp);
    18aa:	9802      	ldr	r0, [sp, #8]
    18ac:	f01b fe4c 	bl	1d548 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    18b0:	aa02      	add	r2, sp, #8
    18b2:	2100      	movs	r1, #0
    18b4:	f64f 4002 	movw	r0, #64514	; 0xfc02
    18b8:	f007 fe2e 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    18bc:	4604      	mov	r4, r0
    18be:	b128      	cbz	r0, 18cc <bt_init+0x4cc>
		BT_WARN("Failed to read supported vendor commands");
    18c0:	481f      	ldr	r0, [pc, #124]	; (1940 <bt_init+0x540>)
    18c2:	f046 0102 	orr.w	r1, r6, #2
    18c6:	e767      	b.n	1798 <bt_init+0x398>
		return "unknown";
    18c8:	4918      	ldr	r1, [pc, #96]	; (192c <bt_init+0x52c>)
    18ca:	e7d3      	b.n	1874 <bt_init+0x474>
	rp.cmds = (void *)rsp->data;
    18cc:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    18ce:	481d      	ldr	r0, [pc, #116]	; (1944 <bt_init+0x544>)
    18d0:	6899      	ldr	r1, [r3, #8]
    18d2:	2202      	movs	r2, #2
    18d4:	3101      	adds	r1, #1
    18d6:	f022 fd15 	bl	24304 <memcpy>
	net_buf_unref(rsp);
    18da:	9802      	ldr	r0, [sp, #8]
    18dc:	f01b fe34 	bl	1d548 <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    18e0:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    18e4:	075b      	lsls	r3, r3, #29
    18e6:	f57f af59 	bpl.w	179c <bt_init+0x39c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    18ea:	aa02      	add	r2, sp, #8
    18ec:	4621      	mov	r1, r4
    18ee:	f64f 4003 	movw	r0, #64515	; 0xfc03
    18f2:	f007 fe11 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    18f6:	b118      	cbz	r0, 1900 <bt_init+0x500>
			BT_WARN("Failed to read supported vendor features");
    18f8:	4813      	ldr	r0, [pc, #76]	; (1948 <bt_init+0x548>)
    18fa:	f046 0102 	orr.w	r1, r6, #2
    18fe:	e74b      	b.n	1798 <bt_init+0x398>
		rp.feat = (void *)rsp->data;
    1900:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    1902:	4812      	ldr	r0, [pc, #72]	; (194c <bt_init+0x54c>)
    1904:	6899      	ldr	r1, [r3, #8]
    1906:	2201      	movs	r2, #1
    1908:	4411      	add	r1, r2
    190a:	f022 fcfb 	bl	24304 <memcpy>
		net_buf_unref(rsp);
    190e:	9802      	ldr	r0, [sp, #8]
    1910:	f01b fe1a 	bl	1d548 <net_buf_unref>
    1914:	e742      	b.n	179c <bt_init+0x39c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1916:	2104      	movs	r1, #4
    1918:	480d      	ldr	r0, [pc, #52]	; (1950 <bt_init+0x550>)
    191a:	f022 fec1 	bl	246a0 <atomic_or>
	bt_finalize_init();
    191e:	f008 fd53 	bl	a3c8 <bt_finalize_init>
	return 0;
    1922:	e5f3      	b.n	150c <bt_init+0x10c>
    1924:	0002c55a 	.word	0x0002c55a
    1928:	00027f60 	.word	0x00027f60
    192c:	0002bf04 	.word	0x0002bf04
    1930:	00027f20 	.word	0x00027f20
    1934:	0002c573 	.word	0x0002c573
    1938:	0002c58b 	.word	0x0002c58b
    193c:	00027f98 	.word	0x00027f98
    1940:	0002c5b8 	.word	0x0002c5b8
    1944:	20000085 	.word	0x20000085
    1948:	0002c5e1 	.word	0x0002c5e1
    194c:	20000084 	.word	0x20000084
    1950:	20000094 	.word	0x20000094
    1954:	00000000 	.word	0x00000000

00001958 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1958:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    195c:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1960:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1962:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    1964:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1966:	42a6      	cmp	r6, r4
{
    1968:	4688      	mov	r8, r1
    196a:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    196c:	d818      	bhi.n	19a0 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    196e:	4d1c      	ldr	r5, [pc, #112]	; (19e0 <ull_drift_ticks_get+0x88>)
    1970:	fba3 0105 	umull	r0, r1, r3, r5
    1974:	a318      	add	r3, pc, #96	; (adr r3, 19d8 <ull_drift_ticks_get+0x80>)
    1976:	e9d3 2300 	ldrd	r2, r3, [r3]
    197a:	f7ff fa85 	bl	e88 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    197e:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1980:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1984:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1988:	a313      	add	r3, pc, #76	; (adr r3, 19d8 <ull_drift_ticks_get+0x80>)
    198a:	e9d3 2300 	ldrd	r2, r3, [r3]
    198e:	fba4 0105 	umull	r0, r1, r4, r5
    1992:	f7ff fa79 	bl	e88 <__aeabi_uldivmod>
    1996:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    199a:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    199c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    19a0:	4c0f      	ldr	r4, [pc, #60]	; (19e0 <ull_drift_ticks_get+0x88>)
    19a2:	a30d      	add	r3, pc, #52	; (adr r3, 19d8 <ull_drift_ticks_get+0x80>)
    19a4:	e9d3 2300 	ldrd	r2, r3, [r3]
    19a8:	fba6 0104 	umull	r0, r1, r6, r4
    19ac:	f7ff fa6c 	bl	e88 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    19b0:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    19b4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    19b8:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    19bc:	a306      	add	r3, pc, #24	; (adr r3, 19d8 <ull_drift_ticks_get+0x80>)
    19be:	e9d3 2300 	ldrd	r2, r3, [r3]
    19c2:	fba1 0104 	umull	r0, r1, r1, r4
    19c6:	f7ff fa5f 	bl	e88 <__aeabi_uldivmod>
    19ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    19ce:	6038      	str	r0, [r7, #0]
}
    19d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    19d4:	f3af 8000 	nop.w
    19d8:	1afd498d 	.word	0x1afd498d
    19dc:	00000007 	.word	0x00000007
    19e0:	3b9aca00 	.word	0x3b9aca00
    19e4:	00000000 	.word	0x00000000

000019e8 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    19e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    19ec:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    19ee:	2800      	cmp	r0, #0
    19f0:	f000 814b 	beq.w	1c8a <ll_adv_enable+0x2a2>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    19f4:	4caa      	ldr	r4, [pc, #680]	; (1ca0 <ll_adv_enable+0x2b8>)
    19f6:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    19fa:	f016 0601 	ands.w	r6, r6, #1
    19fe:	d136      	bne.n	1a6e <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1a00:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1a04:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	ull_filter_adv_update(lll->filter_policy);
    1a08:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1a0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1a10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	lll->rl_idx = FILTER_IDX_NONE;
    1a14:	21ff      	movs	r1, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    1a16:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1a1a:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1a1e:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
	lll->rl_idx = FILTER_IDX_NONE;
    1a22:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
    1a26:	f018 fb37 	bl	1a098 <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1a2a:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
    1a2e:	0747      	lsls	r7, r0, #29
    1a30:	f100 8117 	bmi.w	1c62 <ll_adv_enable+0x27a>
	if (pdu_adv_to_update) {
    1a34:	f1b8 0f00 	cmp.w	r8, #0
    1a38:	d011      	beq.n	1a5e <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    1a3a:	4899      	ldr	r0, [pc, #612]	; (1ca0 <ll_adv_enable+0x2b8>)
    1a3c:	4641      	mov	r1, r8
    1a3e:	f013 fa43 	bl	14ec8 <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    1a42:	f898 3000 	ldrb.w	r3, [r8]
    1a46:	065d      	lsls	r5, r3, #25
    1a48:	d505      	bpl.n	1a56 <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    1a4a:	2106      	movs	r1, #6
    1a4c:	f00e fdfc 	bl	10648 <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1a50:	2800      	cmp	r0, #0
    1a52:	f000 81df 	beq.w	1e14 <ll_adv_enable+0x42c>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1a56:	4892      	ldr	r0, [pc, #584]	; (1ca0 <ll_adv_enable+0x2b8>)
    1a58:	4649      	mov	r1, r9
    1a5a:	f013 fa35 	bl	14ec8 <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1a5e:	f898 3000 	ldrb.w	r3, [r8]
    1a62:	f013 0f0e 	tst.w	r3, #14
    1a66:	f040 80d3 	bne.w	1c10 <ll_adv_enable+0x228>
		if (lll->conn) {
    1a6a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1a6c:	b123      	cbz	r3, 1a78 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1a6e:	260c      	movs	r6, #12
}
    1a70:	4630      	mov	r0, r6
    1a72:	b00f      	add	sp, #60	; 0x3c
    1a74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1a78:	f012 fb8e 	bl	14198 <ll_rx_link_alloc>
		if (!link) {
    1a7c:	4682      	mov	sl, r0
    1a7e:	2800      	cmp	r0, #0
    1a80:	f000 81d7 	beq.w	1e32 <ll_adv_enable+0x44a>
		node_rx = ll_rx_alloc();
    1a84:	f012 fb94 	bl	141b0 <ll_rx_alloc>
		if (!node_rx) {
    1a88:	4683      	mov	fp, r0
    1a8a:	2800      	cmp	r0, #0
    1a8c:	f000 81d6 	beq.w	1e3c <ll_adv_enable+0x454>
		conn = ll_conn_acquire();
    1a90:	f013 ff76 	bl	15980 <ll_conn_acquire>
		if (!conn) {
    1a94:	4605      	mov	r5, r0
    1a96:	2800      	cmp	r0, #0
    1a98:	f000 81cd 	beq.w	1e36 <ll_adv_enable+0x44e>
		if (!conn_lll->link_tx_free) {
    1a9c:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
    1a9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1aa2:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
    1aa4:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    1aa8:	2800      	cmp	r0, #0
    1aaa:	f000 81be 	beq.w	1e2a <ll_adv_enable+0x442>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    1aae:	f105 026c 	add.w	r2, r5, #108	; 0x6c
    1ab2:	f105 0168 	add.w	r1, r5, #104	; 0x68
    1ab6:	930b      	str	r3, [sp, #44]	; 0x2c
    1ab8:	f00e fdd2 	bl	10660 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    1abc:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
    1ac0:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
    1ac4:	f8c5 a13c 	str.w	sl, [r5, #316]	; 0x13c
			conn_lll->phy_tx = PHY_1M;
    1ac8:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    1acc:	f022 0207 	bic.w	r2, r2, #7
    1ad0:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    1ad4:	f042 0201 	orr.w	r2, r2, #1
    1ad8:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
    1adc:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
    1ae0:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    1ae4:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1ae8:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1aec:	f895 2132 	ldrb.w	r2, [r5, #306]	; 0x132
    1af0:	f022 0203 	bic.w	r2, r2, #3
    1af4:	f885 2132 	strb.w	r2, [r5, #306]	; 0x132
		conn_lll->sn = 0;
    1af8:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    1afc:	f022 021f 	bic.w	r2, r2, #31
    1b00:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1b04:	4a67      	ldr	r2, [pc, #412]	; (1ca4 <ll_adv_enable+0x2bc>)
    1b06:	662a      	str	r2, [r5, #96]	; 0x60
		conn->llcp_feature.features_conn = LL_FEAT;
    1b08:	4a67      	ldr	r2, [pc, #412]	; (1ca8 <ll_adv_enable+0x2c0>)
    1b0a:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
		conn_lll->data_chan_use = 0;
    1b0e:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1b10:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->slave.latency_enabled = 0;
    1b14:	f367 0100 	bfi	r1, r7, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1b18:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->connect_expire = 6;
    1b1a:	2206      	movs	r2, #6
		conn_lll->slave.latency_enabled = 0;
    1b1c:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
		conn_lll->slave.window_widening_event_us = 0;
    1b20:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
    1b24:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    1b28:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
    1b2a:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
    1b2c:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
    1b2e:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
    1b32:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_rx = NULL;
    1b36:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1b3a:	f8a5 7110 	strh.w	r7, [r5, #272]	; 0x110
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1b3e:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_feature.features_peer = 0;
    1b42:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    1b46:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_terminate.reason_peer = 0;
    1b4a:	f885 713b 	strb.w	r7, [r5, #315]	; 0x13b
		conn_lll->link_tx_free = NULL;
    1b4e:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
    1b50:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    1b54:	f8a5 715c 	strh.w	r7, [r5, #348]	; 0x15c
		conn->connect_expire = 6;
    1b58:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1b5c:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
		conn->llcp_conn_param.req = 0;
    1b60:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1b64:	f022 0207 	bic.w	r2, r2, #7
    1b68:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
		conn->common.fex_valid = 0;
    1b6c:	f8b5 20dc 	ldrh.w	r2, [r5, #220]	; 0xdc
		conn->slave.ticks_to_offset = 0;
    1b70:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
		conn->common.fex_valid = 0;
    1b74:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    1b78:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
		conn->llcp_conn_param.disabled = 0;
    1b7c:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1b80:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
		conn->llcp_conn_param.disabled = 0;
    1b84:	f367 1204 	bfi	r2, r7, #4, #1
    1b88:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_length.disabled = 0U;
    1b8c:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1b90:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_length.disabled = 0U;
    1b94:	f367 02c3 	bfi	r2, r7, #3, #1
    1b98:	f885 21a6 	strb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    1b9c:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.cache.tx_octets = 0U;
    1ba0:	f8a5 71b0 	strh.w	r7, [r5, #432]	; 0x1b0
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1ba4:	f014 fa26 	bl	15ff4 <ull_conn_default_tx_octets_get>
    1ba8:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1bac:	f014 fa28 	bl	16000 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1bb0:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
    1bb4:	4a3d      	ldr	r2, [pc, #244]	; (1cac <ll_adv_enable+0x2c4>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1bb6:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1bba:	400a      	ands	r2, r1
    1bbc:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1bc0:	f014 fa24 	bl	1600c <ull_conn_default_phy_tx_get>
    1bc4:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
    1bc8:	f360 0202 	bfi	r2, r0, #0, #3
    1bcc:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1bd0:	f014 fa22 	bl	16018 <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    1bd4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1bd6:	6263      	str	r3, [r4, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    1bd8:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1bdc:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1be0:	f8c5 71bc 	str.w	r7, [r5, #444]	; 0x1bc
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1be4:	f360 03c5 	bfi	r3, r0, #3, #3
    1be8:	f885 31b8 	strb.w	r3, [r5, #440]	; 0x1b8
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    1bec:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->parent = parent;
    1bf0:	61ed      	str	r5, [r5, #28]
	hdr->is_stop = 0U;
    1bf2:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
    1bf6:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1bfa:	e9c5 7770 	strd	r7, r7, [r5, #448]	; 0x1c0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1bfe:	e9c5 7705 	strd	r7, r7, [r5, #20]
    1c02:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
    1c06:	f019 fa6b 	bl	1b0e0 <lll_clock_wait>
		if (err) {
    1c0a:	2800      	cmp	r0, #0
    1c0c:	f040 8104 	bne.w	1e18 <ll_adv_enable+0x430>
	uint8_t ch_map = lll->chan_map;
    1c10:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1c14:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1c16:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1c1a:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    1c1e:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1c22:	f00e fe97 	bl	10954 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1c26:	2800      	cmp	r0, #0
    1c28:	f000 8099 	beq.w	1d5e <ll_adv_enable+0x376>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    1c2c:	f898 2000 	ldrb.w	r2, [r8]
    1c30:	f002 020f 	and.w	r2, r2, #15
    1c34:	2a02      	cmp	r2, #2
    1c36:	d03b      	beq.n	1cb0 <ll_adv_enable+0x2c8>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1c38:	2a01      	cmp	r2, #1
    1c3a:	f000 80f1 	beq.w	1e20 <ll_adv_enable+0x438>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    1c3e:	f899 3001 	ldrb.w	r3, [r9, #1]
    1c42:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    1c44:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    1c46:	2a00      	cmp	r2, #0
    1c48:	f000 80d9 	beq.w	1dfe <ll_adv_enable+0x416>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1c4c:	2a06      	cmp	r2, #6
    1c4e:	f000 80fa 	beq.w	1e46 <ll_adv_enable+0x45e>
    1c52:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    1c56:	f44f 711b 	mov.w	r1, #620	; 0x26c
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1c5a:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    1c5c:	fb03 1100 	mla	r1, r3, r0, r1
    1c60:	e032      	b.n	1cc8 <ll_adv_enable+0x2e0>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1c62:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1c66:	4632      	mov	r2, r6
    1c68:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    1c6c:	f018 fb80 	bl	1a370 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1c70:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1c72:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1c76:	f43f aedd 	beq.w	1a34 <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    1c7a:	4630      	mov	r0, r6
    1c7c:	f018 fa26 	bl	1a0cc <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    1c80:	f1b8 0f00 	cmp.w	r8, #0
    1c84:	f47f aed9 	bne.w	1a3a <ll_adv_enable+0x52>
    1c88:	e6e9      	b.n	1a5e <ll_adv_enable+0x76>
	if (!adv || !adv->is_enabled) {
    1c8a:	4b05      	ldr	r3, [pc, #20]	; (1ca0 <ll_adv_enable+0x2b8>)
    1c8c:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    1c90:	07db      	lsls	r3, r3, #31
    1c92:	f57f aeec 	bpl.w	1a6e <ll_adv_enable+0x86>
}
    1c96:	b00f      	add	sp, #60	; 0x3c
    1c98:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1c9c:	f012 bee0 	b.w	14a60 <disable.part.0>
    1ca0:	2000e1ac 	.word	0x2000e1ac
    1ca4:	01480148 	.word	0x01480148
    1ca8:	0001417f 	.word	0x0001417f
    1cac:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
    1cb0:	f898 3001 	ldrb.w	r3, [r8, #1]
    1cb4:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1cb6:	00db      	lsls	r3, r3, #3
    1cb8:	fb00 f303 	mul.w	r3, r0, r3
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1cbc:	1e41      	subs	r1, r0, #1
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1cbe:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1cc2:	2064      	movs	r0, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1cc4:	fb00 3101 	mla	r1, r0, r1, r3
    1cc8:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1ccc:	4866      	ldr	r0, [pc, #408]	; (1e68 <ll_adv_enable+0x480>)
	hdr->parent = parent;
    1cce:	61e4      	str	r4, [r4, #28]
    1cd0:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    1cd2:	f365 0300 	bfi	r3, r5, #0, #1
    1cd6:	f884 3020 	strb.w	r3, [r4, #32]
	adv->evt.ticks_xtal_to_start =
    1cda:	2331      	movs	r3, #49	; 0x31
    1cdc:	6023      	str	r3, [r4, #0]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1cde:	fba1 0100 	umull	r0, r1, r1, r0
    1ce2:	a35f      	add	r3, pc, #380	; (adr r3, 1e60 <ll_adv_enable+0x478>)
    1ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ce8:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
    1cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1cf0:	f7ff f8ca 	bl	e88 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    1cf4:	f8b4 704c 	ldrh.w	r7, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1cf8:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1cfa:	f00f ff6f 	bl	11bdc <ticker_ticks_now_get>
    1cfe:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1d00:	b947      	cbnz	r7, 1d14 <ll_adv_enable+0x32c>
    1d02:	f898 5000 	ldrb.w	r5, [r8]
    1d06:	f005 050f 	and.w	r5, r5, #15
    1d0a:	f1a5 0501 	sub.w	r5, r5, #1
    1d0e:	fab5 f585 	clz	r5, r5
    1d12:	096d      	lsrs	r5, r5, #5
    1d14:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    1d18:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    1d1c:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1d20:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
    1d24:	d022      	beq.n	1d6c <ll_adv_enable+0x384>
				   (adv->evt.ticks_slot + ticks_slot_overhead),
    1d26:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d28:	4a50      	ldr	r2, [pc, #320]	; (1e6c <ll_adv_enable+0x484>)
    1d2a:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1e70 <ll_adv_enable+0x488>
    1d2e:	9304      	str	r3, [sp, #16]
    1d30:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    1d32:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d34:	af0d      	add	r7, sp, #52	; 0x34
    1d36:	9301      	str	r3, [sp, #4]
    1d38:	9205      	str	r2, [sp, #20]
    1d3a:	2103      	movs	r1, #3
    1d3c:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1d40:	9406      	str	r4, [sp, #24]
    1d42:	464b      	mov	r3, r9
    1d44:	9000      	str	r0, [sp, #0]
    1d46:	9708      	str	r7, [sp, #32]
    1d48:	f8cd 801c 	str.w	r8, [sp, #28]
    1d4c:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1d4e:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1d50:	f00f fe78 	bl	11a44 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1d54:	4639      	mov	r1, r7
    1d56:	f012 fad5 	bl	14304 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1d5a:	2800      	cmp	r0, #0
    1d5c:	d03b      	beq.n	1dd6 <ll_adv_enable+0x3ee>
	if (adv->lll.conn) {
    1d5e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1d60:	2b00      	cmp	r3, #0
    1d62:	f43f ae84 	beq.w	1a6e <ll_adv_enable+0x86>
		conn_release(adv);
    1d66:	f012 fe39 	bl	149dc <conn_release.constprop.0>
    1d6a:	e680      	b.n	1a6e <ll_adv_enable+0x86>
		const uint32_t ticks_slot = adv->evt.ticks_slot +
    1d6c:	68e3      	ldr	r3, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1d6e:	4a41      	ldr	r2, [pc, #260]	; (1e74 <ll_adv_enable+0x48c>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1d70:	4841      	ldr	r0, [pc, #260]	; (1e78 <ll_adv_enable+0x490>)
		ret = ticker_start_ext(
    1d72:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1d74:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1d78:	fba7 0100 	umull	r0, r1, r7, r0
		ret = ticker_start_ext(
    1d7c:	9406      	str	r4, [sp, #24]
    1d7e:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1d80:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1d82:	2391      	movs	r3, #145	; 0x91
    1d84:	fb03 1107 	mla	r1, r3, r7, r1
		ret = ticker_start_ext(
    1d88:	4b39      	ldr	r3, [pc, #228]	; (1e70 <ll_adv_enable+0x488>)
    1d8a:	9307      	str	r3, [sp, #28]
    1d8c:	4b37      	ldr	r3, [pc, #220]	; (1e6c <ll_adv_enable+0x484>)
    1d8e:	9305      	str	r3, [sp, #20]
    1d90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1d94:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1d96:	f04f 0802 	mov.w	r8, #2
		ret = ticker_start_ext(
    1d9a:	9303      	str	r3, [sp, #12]
    1d9c:	af0d      	add	r7, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1d9e:	a330      	add	r3, pc, #192	; (adr r3, 1e60 <ll_adv_enable+0x478>)
    1da0:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1da4:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    1da8:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1daa:	f7ff f86d 	bl	e88 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1dae:	464b      	mov	r3, r9
    1db0:	e9cd 5000 	strd	r5, r0, [sp]
    1db4:	4642      	mov	r2, r8
    1db6:	4628      	mov	r0, r5
    1db8:	2103      	movs	r1, #3
    1dba:	f00f fded 	bl	11998 <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1dbe:	4639      	mov	r1, r7
    1dc0:	f012 faa0 	bl	14304 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1dc4:	2800      	cmp	r0, #0
    1dc6:	d1ca      	bne.n	1d5e <ll_adv_enable+0x376>
	adv->is_enabled = 1;
    1dc8:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    1dcc:	f043 0301 	orr.w	r3, r3, #1
    1dd0:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
    1dd4:	e64c      	b.n	1a70 <ll_adv_enable+0x88>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1dd6:	4a29      	ldr	r2, [pc, #164]	; (1e7c <ll_adv_enable+0x494>)
    1dd8:	9205      	str	r2, [sp, #20]
    1dda:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    1dde:	9200      	str	r2, [sp, #0]
    1de0:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1de4:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1de8:	f8cd 801c 	str.w	r8, [sp, #28]
    1dec:	9708      	str	r7, [sp, #32]
    1dee:	9406      	str	r4, [sp, #24]
    1df0:	464b      	mov	r3, r9
    1df2:	2201      	movs	r2, #1
    1df4:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1df6:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1df8:	f00f fe24 	bl	11a44 <ticker_start>
    1dfc:	e7df      	b.n	1dbe <ll_adv_enable+0x3d6>
				adv_size += pdu_adv->len;
    1dfe:	f898 1001 	ldrb.w	r1, [r8, #1]
    1e02:	3110      	adds	r1, #16
				slot_us += MAX(scan_req_us + EVENT_IFS_MAX_US +
    1e04:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1e08:	00ca      	lsls	r2, r1, #3
    1e0a:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1e0e:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1e12:	e722      	b.n	1c5a <ll_adv_enable+0x272>
			return BT_HCI_ERR_INVALID_PARAM;
    1e14:	2612      	movs	r6, #18
    1e16:	e62b      	b.n	1a70 <ll_adv_enable+0x88>
			conn_release(adv);
    1e18:	f012 fde0 	bl	149dc <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    1e1c:	2603      	movs	r6, #3
    1e1e:	e627      	b.n	1a70 <ll_adv_enable+0x88>
    1e20:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    1e24:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1e28:	e717      	b.n	1c5a <ll_adv_enable+0x272>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1e2a:	f105 0070 	add.w	r0, r5, #112	; 0x70
    1e2e:	67a8      	str	r0, [r5, #120]	; 0x78
    1e30:	e63d      	b.n	1aae <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1e32:	2607      	movs	r6, #7
    1e34:	e61c      	b.n	1a70 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    1e36:	4658      	mov	r0, fp
    1e38:	f012 f9c0 	bl	141bc <ll_rx_release>
			ll_rx_link_release(link);
    1e3c:	4650      	mov	r0, sl
    1e3e:	f012 f9b1 	bl	141a4 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1e42:	2607      	movs	r6, #7
    1e44:	e614      	b.n	1a70 <ll_adv_enable+0x88>
				adv_size += pdu_adv->len;
    1e46:	f898 2001 	ldrb.w	r2, [r8, #1]
    1e4a:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    1e4c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1e50:	00d2      	lsls	r2, r2, #3
    1e52:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1e56:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1e5a:	e6fe      	b.n	1c5a <ll_adv_enable+0x272>
    1e5c:	f3af 8000 	nop.w
    1e60:	1afd498d 	.word	0x1afd498d
    1e64:	00000007 	.word	0x00000007
    1e68:	3b9aca00 	.word	0x3b9aca00
    1e6c:	000147bd 	.word	0x000147bd
    1e70:	00013455 	.word	0x00013455
    1e74:	2000e204 	.word	0x2000e204
    1e78:	84e72a00 	.word	0x84e72a00
    1e7c:	000146a1 	.word	0x000146a1

00001e80 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1e84:	4dc2      	ldr	r5, [pc, #776]	; (2190 <event_conn_upd_prep+0x310>)

	/* set mutex */
	if (!conn_upd) {
    1e86:	682b      	ldr	r3, [r5, #0]
{
    1e88:	b08b      	sub	sp, #44	; 0x2c
    1e8a:	4604      	mov	r4, r0
    1e8c:	460f      	mov	r7, r1
    1e8e:	4690      	mov	r8, r2
	if (!conn_upd) {
    1e90:	2b00      	cmp	r3, #0
    1e92:	f000 8216 	beq.w	22c2 <event_conn_upd_prep+0x442>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1e96:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    1e98:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    1e9a:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1e9c:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1ea0:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1ea2:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1ea6:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    1ea8:	f040 818e 	bne.w	21c8 <event_conn_upd_prep+0x348>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    1eac:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    1eb0:	eba6 0209 	sub.w	r2, r6, r9
    1eb4:	fa1f fb82 	uxth.w	fp, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    1eb8:	0412      	lsls	r2, r2, #16
    1eba:	f100 81eb 	bmi.w	2294 <event_conn_upd_prep+0x414>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    1ebe:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
    1ec2:	2a00      	cmp	r2, #0
    1ec4:	f2c0 812b 	blt.w	211e <event_conn_upd_prep+0x29e>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    1ec8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    1ecc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1ed0:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
    1ed4:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
		conn->llcp_cu.ack = conn->llcp_cu.req;
    1ed8:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
    1edc:	f884 1111 	strb.w	r1, [r4, #273]	; 0x111
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1ee0:	4293      	cmp	r3, r2
    1ee2:	d006      	beq.n	1ef2 <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    1ee4:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    1ee8:	f003 0307 	and.w	r3, r3, #7
    1eec:	2b05      	cmp	r3, #5
    1eee:	f000 823e 	beq.w	236e <event_conn_upd_prep+0x4ee>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    1ef2:	682b      	ldr	r3, [r5, #0]
    1ef4:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    1ef6:	bf04      	itt	eq
    1ef8:	2300      	moveq	r3, #0
    1efa:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    1efc:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
    1f00:	2d00      	cmp	r5, #0
    1f02:	f000 8130 	beq.w	2166 <event_conn_upd_prep+0x2e6>
    1f06:	6828      	ldr	r0, [r5, #0]
    1f08:	2800      	cmp	r0, #0
    1f0a:	f000 812c 	beq.w	2166 <event_conn_upd_prep+0x2e6>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    1f0e:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    1f10:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		conn->llcp_rx = rx->hdr.link->mem;
    1f14:	6841      	ldr	r1, [r0, #4]
    1f16:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		if ((conn->llcp_cu.interval != lll->interval) ||
    1f1a:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
    1f1c:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
		if ((conn->llcp_cu.interval != lll->interval) ||
    1f20:	f000 8105 	beq.w	212e <event_conn_upd_prep+0x2ae>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    1f24:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    1f28:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    1f2c:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    1f2e:	2315      	movs	r3, #21
    1f30:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    1f32:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    1f34:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    1f38:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    1f3a:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    1f3c:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    1f3e:	4629      	mov	r1, r5
    1f40:	f012 f942 	bl	141c8 <ll_rx_put>
		ll_rx_sched();
    1f44:	f012 f94a 	bl	141dc <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    1f48:	6823      	ldr	r3, [r4, #0]
    1f4a:	2b00      	cmp	r3, #0
    1f4c:	da0a      	bge.n	1f64 <event_conn_upd_prep+0xe4>
			uint32_t ticks_prepare_to_start =
    1f4e:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    1f52:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    1f56:	4291      	cmp	r1, r2
    1f58:	bf2c      	ite	cs
    1f5a:	4488      	addcs	r8, r1
    1f5c:	4490      	addcc	r8, r2
    1f5e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    1f60:	eba8 0803 	sub.w	r8, r8, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    1f64:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    1f66:	f8b4 5114 	ldrh.w	r5, [r4, #276]	; 0x114
		conn_interval_old = instant_latency * lll->interval;
    1f6a:	fb10 f00b 	smulbb	r0, r0, fp
    1f6e:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    1f70:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    1f74:	fb15 f301 	smulbb	r3, r5, r1
    1f78:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    1f7a:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    1f7c:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    1f80:	f080 818d 	bcs.w	229e <event_conn_upd_prep+0x41e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    1f84:	1a1b      	subs	r3, r3, r0
    1f86:	4983      	ldr	r1, [pc, #524]	; (2194 <event_conn_upd_prep+0x314>)
    1f88:	f240 40e2 	movw	r0, #1250	; 0x4e2
    1f8c:	fb03 f000 	mul.w	r0, r3, r0
    1f90:	fba0 0101 	umull	r0, r1, r0, r1
    1f94:	a37c      	add	r3, pc, #496	; (adr r3, 2188 <event_conn_upd_prep+0x308>)
    1f96:	e9d3 2300 	ldrd	r2, r3, [r3]
    1f9a:	f7fe ff75 	bl	e88 <__aeabi_uldivmod>
    1f9e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1fa2:	4480      	add	r8, r0
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    1fa4:	8e61      	ldrh	r1, [r4, #50]	; 0x32
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    1fa6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    1faa:	eba9 0906 	sub.w	r9, r9, r6
    1fae:	44d1      	add	r9, sl
		lll->latency_prepare += lazy;
    1fb0:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    1fb2:	444f      	add	r7, r9
    1fb4:	8667      	strh	r7, [r4, #50]	; 0x32
		} else if (lll->role) {
    1fb6:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    1fb8:	f240 47e2 	movw	r7, #1250	; 0x4e2
    1fbc:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    1fc0:	f2c0 8181 	blt.w	22c6 <event_conn_upd_prep+0x446>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    1fc4:	4a74      	ldr	r2, [pc, #464]	; (2198 <event_conn_upd_prep+0x318>)
    1fc6:	4975      	ldr	r1, [pc, #468]	; (219c <event_conn_upd_prep+0x31c>)
    1fc8:	4875      	ldr	r0, [pc, #468]	; (21a0 <event_conn_upd_prep+0x320>)
    1fca:	f640 13f6 	movw	r3, #2550	; 0x9f6
    1fce:	f01f fcf7 	bl	219c0 <printk>
    1fd2:	4040      	eors	r0, r0
    1fd4:	f380 8811 	msr	BASEPRI, r0
    1fd8:	f04f 0003 	mov.w	r0, #3
    1fdc:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    1fde:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    1fe0:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1fe2:	4a70      	ldr	r2, [pc, #448]	; (21a4 <event_conn_upd_prep+0x324>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1fe4:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    1fe8:	486f      	ldr	r0, [pc, #444]	; (21a8 <event_conn_upd_prep+0x328>)
		lll->latency = conn->llcp_cu.latency;
    1fea:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    1fee:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    1ff0:	4432      	add	r2, r6
    1ff2:	fbb2 f2f6 	udiv	r2, r2, r6
    1ff6:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    1ffa:	f242 7210 	movw	r2, #10000	; 0x2710
    1ffe:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2002:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2004:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2006:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    200a:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    200e:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    2012:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2014:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2016:	1d88      	adds	r0, r1, #6
    2018:	4283      	cmp	r3, r0
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    201a:	f8a4 60c6 	strh.w	r6, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    201e:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2022:	dd02      	ble.n	202a <event_conn_upd_prep+0x1aa>
				     (conn->apto_reload - (lll->latency + 6)) :
    2024:	1a5b      	subs	r3, r3, r1
    2026:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2028:	b29b      	uxth	r3, r3
    202a:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    202e:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    2032:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    2034:	bf44      	itt	mi
    2036:	2300      	movmi	r3, #0
    2038:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    203c:	2102      	movs	r1, #2
    203e:	2001      	movs	r0, #1
    2040:	f01a ffcc 	bl	1cfdc <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    2044:	2200      	movs	r2, #0
    2046:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    2048:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    204a:	2001      	movs	r0, #1
    204c:	f00e fb58 	bl	10700 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    2050:	4956      	ldr	r1, [pc, #344]	; (21ac <event_conn_upd_prep+0x32c>)
    2052:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
    2056:	4620      	mov	r0, r4
    2058:	f00e fae2 	bl	10620 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    205c:	f100 0a03 	add.w	sl, r0, #3
    2060:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2064:	4b52      	ldr	r3, [pc, #328]	; (21b0 <event_conn_upd_prep+0x330>)
    2066:	9400      	str	r4, [sp, #0]
    2068:	4652      	mov	r2, sl
    206a:	2101      	movs	r1, #1
    206c:	2000      	movs	r0, #0
    206e:	f00f fd73 	bl	11b58 <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2072:	f030 0302 	bics.w	r3, r0, #2
    2076:	d00c      	beq.n	2092 <event_conn_upd_prep+0x212>
    2078:	4a47      	ldr	r2, [pc, #284]	; (2198 <event_conn_upd_prep+0x318>)
    207a:	494e      	ldr	r1, [pc, #312]	; (21b4 <event_conn_upd_prep+0x334>)
    207c:	4848      	ldr	r0, [pc, #288]	; (21a0 <event_conn_upd_prep+0x320>)
    207e:	f640 2325 	movw	r3, #2597	; 0xa25
    2082:	f01f fc9d 	bl	219c0 <printk>
    2086:	4040      	eors	r0, r0
    2088:	f380 8811 	msr	BASEPRI, r0
    208c:	f04f 0003 	mov.w	r0, #3
    2090:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    2092:	4e40      	ldr	r6, [pc, #256]	; (2194 <event_conn_upd_prep+0x314>)
    2094:	fbab 6b06 	umull	r6, fp, fp, r6
    2098:	a33b      	add	r3, pc, #236	; (adr r3, 2188 <event_conn_upd_prep+0x308>)
    209a:	e9d3 2300 	ldrd	r2, r3, [r3]
    209e:	4630      	mov	r0, r6
    20a0:	4659      	mov	r1, fp
    20a2:	f7fe fef1 	bl	e88 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    20a6:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    20a8:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    20ac:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    20ae:	4842      	ldr	r0, [pc, #264]	; (21b8 <event_conn_upd_prep+0x338>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    20b0:	68e3      	ldr	r3, [r4, #12]
    20b2:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    20b4:	fba5 0100 	umull	r0, r1, r5, r0
    20b8:	2307      	movs	r3, #7
    20ba:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    20be:	4b3f      	ldr	r3, [pc, #252]	; (21bc <event_conn_upd_prep+0x33c>)
    20c0:	9307      	str	r3, [sp, #28]
    20c2:	4b3f      	ldr	r3, [pc, #252]	; (21c0 <event_conn_upd_prep+0x340>)
    20c4:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    20c6:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    20c8:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    20cc:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    20d0:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    20d2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    20d6:	2300      	movs	r3, #0
    20d8:	f7fe fed6 	bl	e88 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    20dc:	4643      	mov	r3, r8
    20de:	e9cd 5001 	strd	r5, r0, [sp, #4]
    20e2:	9700      	str	r7, [sp, #0]
    20e4:	4652      	mov	r2, sl
    20e6:	2101      	movs	r1, #1
    20e8:	2000      	movs	r0, #0
    20ea:	f00f fcab 	bl	11a44 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    20ee:	f030 0302 	bics.w	r3, r0, #2
    20f2:	d00c      	beq.n	210e <event_conn_upd_prep+0x28e>
    20f4:	4a28      	ldr	r2, [pc, #160]	; (2198 <event_conn_upd_prep+0x318>)
    20f6:	492f      	ldr	r1, [pc, #188]	; (21b4 <event_conn_upd_prep+0x334>)
    20f8:	4829      	ldr	r0, [pc, #164]	; (21a0 <event_conn_upd_prep+0x320>)
    20fa:	f640 233f 	movw	r3, #2623	; 0xa3f
    20fe:	f01f fc5f 	bl	219c0 <printk>
    2102:	4040      	eors	r0, r0
    2104:	f380 8811 	msr	BASEPRI, r0
    2108:	f04f 0003 	mov.w	r0, #3
    210c:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    210e:	f1b9 0f00 	cmp.w	r9, #0
    2112:	f040 8123 	bne.w	235c <event_conn_upd_prep+0x4dc>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    2116:	4648      	mov	r0, r9
	}

	return -EINPROGRESS;
}
    2118:	b00b      	add	sp, #44	; 0x2c
    211a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    211e:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
    2122:	2a00      	cmp	r2, #0
    2124:	f43f aed0 	beq.w	1ec8 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    2128:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
    212c:	e6d0      	b.n	1ed0 <event_conn_upd_prep+0x50>
		if ((conn->llcp_cu.interval != lll->interval) ||
    212e:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    2130:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    2132:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
		if ((conn->llcp_cu.interval != lll->interval) ||
    2136:	f47f aef7 	bne.w	1f28 <event_conn_upd_prep+0xa8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    213a:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    213e:	fb0c fe03 	mul.w	lr, ip, r3
    2142:	f242 7c10 	movw	ip, #10000	; 0x2710
    2146:	fb0c ec01 	mla	ip, ip, r1, lr
    214a:	f10c 3cff 	add.w	ip, ip, #4294967295
    214e:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    2152:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
    2156:	fa1f fc8c 	uxth.w	ip, ip
    215a:	45e6      	cmp	lr, ip
    215c:	f47f aee4 	bne.w	1f28 <event_conn_upd_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    2160:	2301      	movs	r3, #1
    2162:	712b      	strb	r3, [r5, #4]
    2164:	e6eb      	b.n	1f3e <event_conn_upd_prep+0xbe>
		LL_ASSERT(rx && rx->hdr.link);
    2166:	4a0c      	ldr	r2, [pc, #48]	; (2198 <event_conn_upd_prep+0x318>)
    2168:	4916      	ldr	r1, [pc, #88]	; (21c4 <event_conn_upd_prep+0x344>)
    216a:	480d      	ldr	r0, [pc, #52]	; (21a0 <event_conn_upd_prep+0x320>)
    216c:	f640 137a 	movw	r3, #2426	; 0x97a
    2170:	f01f fc26 	bl	219c0 <printk>
    2174:	4040      	eors	r0, r0
    2176:	f380 8811 	msr	BASEPRI, r0
    217a:	f04f 0003 	mov.w	r0, #3
    217e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    2180:	6828      	ldr	r0, [r5, #0]
    2182:	e6c4      	b.n	1f0e <event_conn_upd_prep+0x8e>
    2184:	f3af 8000 	nop.w
    2188:	1afd498d 	.word	0x1afd498d
    218c:	00000007 	.word	0x00000007
    2190:	2000e3f8 	.word	0x2000e3f8
    2194:	3b9aca00 	.word	0x3b9aca00
    2198:	00028760 	.word	0x00028760
    219c:	0002833c 	.word	0x0002833c
    21a0:	000282a4 	.word	0x000282a4
    21a4:	026259ff 	.word	0x026259ff
    21a8:	01c9c37f 	.word	0x01c9c37f
    21ac:	2000e224 	.word	0x2000e224
    21b0:	000151e5 	.word	0x000151e5
    21b4:	00028840 	.word	0x00028840
    21b8:	1afd498d 	.word	0x1afd498d
    21bc:	0001518d 	.word	0x0001518d
    21c0:	00019581 	.word	0x00019581
    21c4:	0002882c 	.word	0x0002882c
		rx = ll_pdu_rx_alloc_peek(1);
    21c8:	2001      	movs	r0, #1
    21ca:	f012 f80d 	bl	141e8 <ll_pdu_rx_alloc_peek>
		if (!rx) {
    21ce:	4607      	mov	r7, r0
    21d0:	2800      	cmp	r0, #0
    21d2:	f000 80de 	beq.w	2392 <event_conn_upd_prep+0x512>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    21d6:	4876      	ldr	r0, [pc, #472]	; (23b0 <event_conn_upd_prep+0x530>)
    21d8:	f00e f9ec 	bl	105b4 <mem_acquire>
		if (!tx) {
    21dc:	4605      	mov	r5, r0
    21de:	2800      	cmp	r0, #0
    21e0:	f000 80d7 	beq.w	2392 <event_conn_upd_prep+0x512>
		(void)ll_pdu_rx_alloc();
    21e4:	f012 f81e 	bl	14224 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21e8:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    21ea:	683a      	ldr	r2, [r7, #0]
    21ec:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    21f0:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21f2:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    21f6:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    21fa:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    21fc:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    21fe:	230c      	movs	r3, #12
    2200:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2202:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    2204:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    2208:	722b      	strb	r3, [r5, #8]
		conn->llcp.conn_upd.instant = event_counter +
    220a:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    220c:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		conn->llcp.conn_upd.instant = event_counter +
    2210:	441e      	add	r6, r3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2212:	4b68      	ldr	r3, [pc, #416]	; (23b4 <event_conn_upd_prep+0x534>)
    2214:	fba3 3202 	umull	r3, r2, r3, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2218:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    221c:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2220:	0a92      	lsrs	r2, r2, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2222:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    2226:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    222a:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    222e:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    2232:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
    2236:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    223a:	3606      	adds	r6, #6
	    conn->tx_head &&
    223c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
					      conn->lll.latency + 6;
    2240:	b2b6      	uxth	r6, r6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2242:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    2246:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    224a:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    224e:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    2252:	2b00      	cmp	r3, #0
    2254:	f000 8091 	beq.w	237a <event_conn_upd_prep+0x4fa>
	    !conn->llcp_enc.pause_tx &&
    2258:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
    225c:	0790      	lsls	r0, r2, #30
    225e:	f100 808c 	bmi.w	237a <event_conn_upd_prep+0x4fa>
	    !conn->llcp_phy.pause_tx &&
    2262:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
    2266:	07d1      	lsls	r1, r2, #31
    2268:	f100 8087 	bmi.w	237a <event_conn_upd_prep+0x4fa>
		if (conn->tx_head == conn->tx_data) {
    226c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    2270:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    2272:	bf04      	itt	eq
    2274:	681a      	ldreq	r2, [r3, #0]
    2276:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    227a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    227e:	2a00      	cmp	r2, #0
    2280:	d17e      	bne.n	2380 <event_conn_upd_prep+0x500>
			tx->next = conn->tx_head->next;
    2282:	681a      	ldr	r2, [r3, #0]
    2284:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    2286:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    2288:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    228a:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
    228e:	b90b      	cbnz	r3, 2294 <event_conn_upd_prep+0x414>
		conn->tx_data_last = tx;
    2290:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	return -EINPROGRESS;
    2294:	f06f 0043 	mvn.w	r0, #67	; 0x43
}
    2298:	b00b      	add	sp, #44	; 0x2c
    229a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    229e:	fb05 0111 	mls	r1, r5, r1, r0
    22a2:	f240 43e2 	movw	r3, #1250	; 0x4e2
    22a6:	4844      	ldr	r0, [pc, #272]	; (23b8 <event_conn_upd_prep+0x538>)
    22a8:	b289      	uxth	r1, r1
    22aa:	fb03 f101 	mul.w	r1, r3, r1
    22ae:	fba1 0100 	umull	r0, r1, r1, r0
    22b2:	a33d      	add	r3, pc, #244	; (adr r3, 23a8 <event_conn_upd_prep+0x528>)
    22b4:	e9d3 2300 	ldrd	r2, r3, [r3]
    22b8:	f7fe fde6 	bl	e88 <__aeabi_uldivmod>
    22bc:	eba8 0800 	sub.w	r8, r8, r0
    22c0:	e670      	b.n	1fa4 <event_conn_upd_prep+0x124>
		conn_upd_curr = conn;
    22c2:	6028      	str	r0, [r5, #0]
    22c4:	e5e7      	b.n	1e96 <event_conn_upd_prep+0x16>
				lll->slave.window_widening_periodic_us *
    22c6:	6c62      	ldr	r2, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    22c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    22ca:	fb02 331b 	mls	r3, r2, fp, r3
    22ce:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    22d0:	f018 ff58 	bl	1b184 <lll_clock_ppm_local_get>
    22d4:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    22d6:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    22da:	f3c0 0082 	ubfx	r0, r0, #2, #3
    22de:	f018 ff53 	bl	1b188 <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    22e2:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    22e4:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    22e8:	4b34      	ldr	r3, [pc, #208]	; (23bc <event_conn_upd_prep+0x53c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    22ea:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    22ee:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    22f2:	f205 253f 	addw	r5, r5, #575	; 0x23f
    22f6:	fba3 3505 	umull	r3, r5, r3, r5
    22fa:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    22fc:	fb07 f202 	mul.w	r2, r7, r2
			lll->slave.window_widening_prepare_us +=
    2300:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			lll->slave.window_size_prepare_us =
    2302:	6562      	str	r2, [r4, #84]	; 0x54
				lll->slave.window_widening_periodic_us *
    2304:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2308:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
    230a:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    230c:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    230e:	4293      	cmp	r3, r2
    2310:	bf28      	it	cs
    2312:	4613      	movcs	r3, r2
			lll->slave.window_widening_periodic_us =
    2314:	6465      	str	r5, [r4, #68]	; 0x44
			periodic_us -= lll->slave.window_widening_periodic_us;
    2316:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    231a:	4d27      	ldr	r5, [pc, #156]	; (23b8 <event_conn_upd_prep+0x538>)
			lll->slave.window_widening_prepare_us +=
    231c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			conn->slave.ticks_to_offset = 0U;
    2320:	2300      	movs	r3, #0
    2322:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2326:	fba0 0105 	umull	r0, r1, r0, r5
    232a:	a31f      	add	r3, pc, #124	; (adr r3, 23a8 <event_conn_upd_prep+0x528>)
    232c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2330:	f7fe fdaa 	bl	e88 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    2334:	491f      	ldr	r1, [pc, #124]	; (23b4 <event_conn_upd_prep+0x534>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2336:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    233a:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    233e:	fba1 3000 	umull	r3, r0, r1, r0
    2342:	0a80      	lsrs	r0, r0, #10
    2344:	fb07 f000 	mul.w	r0, r7, r0
    2348:	a317      	add	r3, pc, #92	; (adr r3, 23a8 <event_conn_upd_prep+0x528>)
    234a:	e9d3 2300 	ldrd	r2, r3, [r3]
    234e:	fba0 0105 	umull	r0, r1, r0, r5
    2352:	f7fe fd99 	bl	e88 <__aeabi_uldivmod>
    2356:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    235a:	e642      	b.n	1fe2 <event_conn_upd_prep+0x162>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    235c:	2201      	movs	r2, #1
    235e:	4610      	mov	r0, r2
    2360:	2102      	movs	r1, #2
    2362:	f00e f9cd 	bl	10700 <mayfly_enable>
		return 0;
    2366:	2000      	movs	r0, #0
}
    2368:	b00b      	add	sp, #44	; 0x2c
    236a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conn->procedure_expire = 0U;
    236e:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    2370:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
			conn->procedure_expire = 0U;
    2374:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    2378:	e5bb      	b.n	1ef2 <event_conn_upd_prep+0x72>
		if (!conn->tx_ctrl) {
    237a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    237e:	b16a      	cbz	r2, 239c <event_conn_upd_prep+0x51c>
	tx->next = conn->tx_ctrl_last->next;
    2380:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    2384:	681a      	ldr	r2, [r3, #0]
    2386:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    2388:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    238a:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    238c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
    2390:	e77d      	b.n	228e <event_conn_upd_prep+0x40e>
			return -ENOBUFS;
    2392:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    2396:	b00b      	add	sp, #44	; 0x2c
    2398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    239c:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    239e:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
    23a2:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    23a6:	e772      	b.n	228e <event_conn_upd_prep+0x40e>
    23a8:	1afd498d 	.word	0x1afd498d
    23ac:	00000007 	.word	0x00000007
    23b0:	2000e47c 	.word	0x2000e47c
    23b4:	d1b71759 	.word	0xd1b71759
    23b8:	3b9aca00 	.word	0x3b9aca00
    23bc:	431bde83 	.word	0x431bde83

000023c0 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    23c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    23c4:	b093      	sub	sp, #76	; 0x4c
    23c6:	4692      	mov	sl, r2
    23c8:	900a      	str	r0, [sp, #40]	; 0x28
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    23ca:	6812      	ldr	r2, [r2, #0]
	conn = lll->hdr.parent;
    23cc:	4618      	mov	r0, r3
{
    23ce:	461d      	mov	r5, r3
    23d0:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    23d2:	6817      	ldr	r7, [r2, #0]
	conn = lll->hdr.parent;
    23d4:	f850 8b0c 	ldr.w	r8, [r0], #12

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    23d8:	2203      	movs	r2, #3
    23da:	312e      	adds	r1, #46	; 0x2e
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    23dc:	f105 0908 	add.w	r9, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    23e0:	f021 ff90 	bl	24304 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    23e4:	f105 061c 	add.w	r6, r5, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    23e8:	2204      	movs	r2, #4
    23ea:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    23ee:	4648      	mov	r0, r9
    23f0:	f021 ff88 	bl	24304 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    23f4:	2205      	movs	r2, #5
    23f6:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    23fa:	4630      	mov	r0, r6
    23fc:	f021 ff82 	bl	24304 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2400:	4630      	mov	r0, r6
    2402:	2105      	movs	r1, #5
    2404:	f00e faa6 	bl	10954 <util_ones_count_get>
    2408:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    240c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2410:	f360 0205 	bfi	r2, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    2414:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2416:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    241a:	d90a      	bls.n	2432 <ull_slave_setup+0x72>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    241c:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
    2420:	f001 021f 	and.w	r2, r1, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2424:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2426:	f3c1 0004 	ubfx	r0, r1, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    242a:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    242c:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2430:	d902      	bls.n	2438 <ull_slave_setup+0x78>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    2432:	b013      	add	sp, #76	; 0x4c
    2434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    2438:	f8da 2000 	ldr.w	r2, [sl]
    243c:	2000      	movs	r0, #0
    243e:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2440:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
	lll->interval = interval;
    2442:	826e      	strh	r6, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    2444:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    2448:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    244c:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    2450:	82aa      	strh	r2, [r5, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    2452:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    2456:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2458:	930c      	str	r3, [sp, #48]	; 0x30
	conn->slave.sca = pdu_adv->connect_ind.sca;
    245a:	0949      	lsrs	r1, r1, #5
    245c:	f361 0284 	bfi	r2, r1, #2, #3
    2460:	f888 20dc 	strb.w	r2, [r8, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    2464:	f018 fe8e 	bl	1b184 <lll_clock_ppm_local_get>
    2468:	900b      	str	r0, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    246a:	f898 00dc 	ldrb.w	r0, [r8, #220]	; 0xdc
    246e:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2472:	f018 fe89 	bl	1b188 <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    2476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2478:	4ac3      	ldr	r2, [pc, #780]	; (2788 <ull_slave_setup+0x3c8>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    247a:	49c4      	ldr	r1, [pc, #784]	; (278c <ull_slave_setup+0x3cc>)
	conn_interval_us = interval * CONN_INT_UNIT_US;
    247c:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    2480:	b2b6      	uxth	r6, r6
	conn_interval_us = interval * CONN_INT_UNIT_US;
    2482:	fb0b f606 	mul.w	r6, fp, r6
		(((lll_clock_ppm_local_get() +
    2486:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    2488:	fb06 f000 	mul.w	r0, r6, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    248c:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    2490:	f200 203f 	addw	r0, r0, #575	; 0x23f
    2494:	fba2 3000 	umull	r3, r0, r2, r0
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2498:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    249c:	fb0b f202 	mul.w	r2, fp, r2
    24a0:	63ea      	str	r2, [r5, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    24a2:	0872      	lsrs	r2, r6, #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    24a4:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    24a6:	3a96      	subs	r2, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    24a8:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    24aa:	62ea      	str	r2, [r5, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    24ac:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    24ae:	8aa8      	ldrh	r0, [r5, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    24b0:	4ab7      	ldr	r2, [pc, #732]	; (2790 <ull_slave_setup+0x3d0>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    24b2:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    24b6:	f242 7c10 	movw	ip, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    24ba:	4431      	add	r1, r6
    24bc:	fbb1 f1f6 	udiv	r1, r1, r6
    24c0:	f8a8 10ca 	strh.w	r1, [r8, #202]	; 0xca
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    24c4:	b299      	uxth	r1, r3
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    24c6:	fb0c 6101 	mla	r1, ip, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    24ca:	4432      	add	r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    24cc:	3901      	subs	r1, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    24ce:	f100 0c06 	add.w	ip, r0, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    24d2:	fbb1 f1f6 	udiv	r1, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    24d6:	fbb2 f2f6 	udiv	r2, r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    24da:	f8a8 10c6 	strh.w	r1, [r8, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    24de:	b291      	uxth	r1, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    24e0:	4561      	cmp	r1, ip
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    24e2:	f8a8 10d2 	strh.w	r1, [r8, #210]	; 0xd2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    24e6:	dd02      	ble.n	24ee <ull_slave_setup+0x12e>
			     (conn->apto_reload - (lll->latency + 6)) :
    24e8:	1a09      	subs	r1, r1, r0
    24ea:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    24ec:	b289      	uxth	r1, r1
    24ee:	f8a8 10ce 	strh.w	r1, [r8, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    24f2:	2204      	movs	r2, #4
    24f4:	4649      	mov	r1, r9
    24f6:	f108 00e0 	add.w	r0, r8, #224	; 0xe0
    24fa:	f021 ff03 	bl	24304 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    24fe:	7f22      	ldrb	r2, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2500:	f104 091e 	add.w	r9, r4, #30
	peer_addr_type = pdu_adv->tx_addr;
    2504:	f3c2 1380 	ubfx	r3, r2, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2508:	4649      	mov	r1, r9
    250a:	2206      	movs	r2, #6
    250c:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    250e:	930f      	str	r3, [sp, #60]	; 0x3c
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2510:	f021 fef8 	bl	24304 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    2514:	7f22      	ldrb	r2, [r4, #28]
	cc->status = 0U;
    2516:	f44f 7180 	mov.w	r1, #256	; 0x100
    251a:	83a1      	strh	r1, [r4, #28]
		chan_sel = pdu_adv->chan_sel;
    251c:	f3c2 1340 	ubfx	r3, r2, #5, #1
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2520:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    2524:	f89a b012 	ldrb.w	fp, [sl, #18]
		chan_sel = pdu_adv->chan_sel;
    2528:	930e      	str	r3, [sp, #56]	; 0x38
    252a:	930b      	str	r3, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    252c:	f018 f8b6 	bl	1a69c <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2530:	2206      	movs	r2, #6
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2532:	4601      	mov	r1, r0
    2534:	2800      	cmp	r0, #0
    2536:	f040 80ea 	bne.w	270e <ull_slave_setup+0x34e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    253a:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    253e:	f021 ff0c 	bl	2435a <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    2542:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    2546:	f000 80ec 	beq.w	2722 <ull_slave_setup+0x362>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    254a:	4649      	mov	r1, r9
    254c:	4658      	mov	r0, fp
    254e:	f104 021f 	add.w	r2, r4, #31
    2552:	f017 fb31 	bl	19bb8 <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    2556:	7fa2      	ldrb	r2, [r4, #30]
    2558:	3202      	adds	r2, #2
    255a:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    255c:	a910      	add	r1, sp, #64	; 0x40
    255e:	2206      	movs	r2, #6
    2560:	f104 0025 	add.w	r0, r4, #37	; 0x25
    2564:	f021 fece 	bl	24304 <memcpy>
	cc->sca = conn->slave.sca;
    2568:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	cc->interval = lll->interval;
    256c:	8a69      	ldrh	r1, [r5, #18]
	cc->timeout = timeout;
    256e:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cc->interval = lll->interval;
    2572:	8661      	strh	r1, [r4, #50]	; 0x32
	cc->sca = conn->slave.sca;
    2574:	f3c2 0282 	ubfx	r2, r2, #2, #3
	cc->latency = lll->latency;
    2578:	8aa9      	ldrh	r1, [r5, #20]
    257a:	86a1      	strh	r1, [r4, #52]	; 0x34
	cc->timeout = timeout;
    257c:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = conn->slave.sca;
    257e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    2582:	4640      	mov	r0, r8
    2584:	f013 fa08 	bl	15998 <ll_conn_handle_get>
		ll_rx_put(link, rx);
    2588:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    258a:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    258c:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    258e:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
    2592:	980a      	ldr	r0, [sp, #40]	; 0x28
    2594:	f011 fe18 	bl	141c8 <ll_rx_put>
		rx->handle = lll->handle;
    2598:	8a2b      	ldrh	r3, [r5, #16]
    259a:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    259c:	2318      	movs	r3, #24
    259e:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    25a0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    25a2:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    25a4:	2b00      	cmp	r3, #0
    25a6:	f000 80cc 	beq.w	2742 <ull_slave_setup+0x382>
			lll->data_chan_sel = 1;
    25aa:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    25ae:	892a      	ldrh	r2, [r5, #8]
    25b0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    25b4:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    25b8:	896b      	ldrh	r3, [r5, #10]
			lll->data_chan_id = aa_ms ^ aa_ls;
    25ba:	4053      	eors	r3, r2
    25bc:	846b      	strh	r3, [r5, #34]	; 0x22
			cs->csa = 0x01;
    25be:	2301      	movs	r3, #1
    25c0:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    25c2:	4621      	mov	r1, r4
    25c4:	f011 fe00 	bl	141c8 <ll_rx_put>
	ll_rx_sched();
    25c8:	f011 fe08 	bl	141dc <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    25cc:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    25d0:	2101      	movs	r1, #1
    25d2:	f000 0007 	and.w	r0, r0, #7
    25d6:	f018 fcdb 	bl	1af90 <lll_radio_rx_ready_delay_get>
    25da:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    25dc:	486d      	ldr	r0, [pc, #436]	; (2794 <ull_slave_setup+0x3d4>)
	conn->evt.ticks_active_to_start = 0U;
    25de:	f04f 0900 	mov.w	r9, #0
	conn->evt.ticks_xtal_to_start =
    25e2:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    25e4:	f20b 4152 	addw	r1, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    25e8:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    25ec:	e9c8 9901 	strd	r9, r9, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    25f0:	a363      	add	r3, pc, #396	; (adr r3, 2780 <ull_slave_setup+0x3c0>)
    25f2:	e9d3 2300 	ldrd	r2, r3, [r3]
    25f6:	fba1 0100 	umull	r0, r1, r1, r0
    25fa:	f7fe fc45 	bl	e88 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    25fe:	6aab      	ldr	r3, [r5, #40]	; 0x28
	conn_offset_us = ftr->radio_end_us;
    2600:	f8da 400c 	ldr.w	r4, [sl, #12]
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2604:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    2606:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2608:	f240 41e2 	movw	r1, #1250	; 0x4e2
    260c:	fb01 4403 	mla	r4, r1, r3, r4
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2610:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    2614:	f204 3486 	addw	r4, r4, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    2618:	eba4 030b 	sub.w	r3, r4, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    261c:	464a      	mov	r2, r9
    261e:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2620:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2624:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    2626:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2628:	f00e f86a 	bl	10700 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    262c:	4638      	mov	r0, r7
    262e:	f012 fbd3 	bl	14dd8 <ull_adv_handle_get>
    2632:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    2634:	4b58      	ldr	r3, [pc, #352]	; (2798 <ull_slave_setup+0x3d8>)
    2636:	9700      	str	r7, [sp, #0]
    2638:	b2d2      	uxtb	r2, r2
    263a:	4648      	mov	r0, r9
    263c:	2101      	movs	r1, #1
    263e:	f00f fa8b 	bl	11b58 <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    2642:	2801      	cmp	r0, #1
    2644:	f000 8089 	beq.w	275a <ull_slave_setup+0x39a>
	if (adv->lll.is_hdcd) {
    2648:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    264c:	07db      	lsls	r3, r3, #31
    264e:	d47c      	bmi.n	274a <ull_slave_setup+0x38a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2650:	4640      	mov	r0, r8
    2652:	f013 f9a1 	bl	15998 <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2656:	f8df 913c 	ldr.w	r9, [pc, #316]	; 2794 <ull_slave_setup+0x3d4>
    265a:	fba6 4609 	umull	r4, r6, r6, r9
    265e:	a348      	add	r3, pc, #288	; (adr r3, 2780 <ull_slave_setup+0x3c0>)
    2660:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2664:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    2666:	4631      	mov	r1, r6
    2668:	4620      	mov	r0, r4
    266a:	f7fe fc0d 	bl	e88 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    266e:	f8da 3008 	ldr.w	r3, [sl, #8]
    2672:	f8cd 8018 	str.w	r8, [sp, #24]
    2676:	f1a3 0a31 	sub.w	sl, r3, #49	; 0x31
    267a:	4b48      	ldr	r3, [pc, #288]	; (279c <ull_slave_setup+0x3dc>)
    267c:	9307      	str	r3, [sp, #28]
    267e:	4b48      	ldr	r3, [pc, #288]	; (27a0 <ull_slave_setup+0x3e0>)
    2680:	9305      	str	r3, [sp, #20]
    2682:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    2686:	9308      	str	r3, [sp, #32]
    2688:	f8d8 300c 	ldr.w	r3, [r8, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    268c:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    2690:	4844      	ldr	r0, [pc, #272]	; (27a4 <ull_slave_setup+0x3e4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2692:	f04f 0b00 	mov.w	fp, #0
    2696:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    269a:	fba7 0100 	umull	r0, r1, r7, r0
    269e:	2307      	movs	r3, #7
    26a0:	1a20      	subs	r0, r4, r0
    26a2:	fb03 1107 	mla	r1, r3, r7, r1
    26a6:	eb66 0101 	sbc.w	r1, r6, r1
    26aa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    26ae:	2300      	movs	r3, #0
    26b0:	f7fe fbea 	bl	e88 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    26b4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    26b6:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    26ba:	fba3 0109 	umull	r0, r1, r3, r9
    26be:	a330      	add	r3, pc, #192	; (adr r3, 2780 <ull_slave_setup+0x3c0>)
    26c0:	e9d3 2300 	ldrd	r2, r3, [r3]
    26c4:	f7fe fbe0 	bl	e88 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    26c8:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    26ca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    26ce:	b2ed      	uxtb	r5, r5
    26d0:	9000      	str	r0, [sp, #0]
    26d2:	4653      	mov	r3, sl
    26d4:	462a      	mov	r2, r5
    26d6:	2101      	movs	r1, #1
    26d8:	4658      	mov	r0, fp
    26da:	f00f f9b3 	bl	11a44 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    26de:	f030 0302 	bics.w	r3, r0, #2
    26e2:	d00c      	beq.n	26fe <ull_slave_setup+0x33e>
    26e4:	4a30      	ldr	r2, [pc, #192]	; (27a8 <ull_slave_setup+0x3e8>)
    26e6:	4931      	ldr	r1, [pc, #196]	; (27ac <ull_slave_setup+0x3ec>)
    26e8:	4831      	ldr	r0, [pc, #196]	; (27b0 <ull_slave_setup+0x3f0>)
    26ea:	f240 136d 	movw	r3, #365	; 0x16d
    26ee:	f01f f967 	bl	219c0 <printk>
    26f2:	4040      	eors	r0, r0
    26f4:	f380 8811 	msr	BASEPRI, r0
    26f8:	f04f 0003 	mov.w	r0, #3
    26fc:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    26fe:	2201      	movs	r2, #1
    2700:	2102      	movs	r1, #2
    2702:	4610      	mov	r0, r2
    2704:	f00d fffc 	bl	10700 <mayfly_enable>
}
    2708:	b013      	add	sp, #76	; 0x4c
    270a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    270e:	f104 0124 	add.w	r1, r4, #36	; 0x24
    2712:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    2716:	f021 fdf5 	bl	24304 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    271a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    271e:	f47f af14 	bne.w	254a <ull_slave_setup+0x18a>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    2722:	2206      	movs	r2, #6
    2724:	2100      	movs	r1, #0
    2726:	f104 0025 	add.w	r0, r4, #37	; 0x25
    272a:	f021 fe16 	bl	2435a <memset>
		cc->peer_addr_type = peer_addr_type;
    272e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    2732:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    2734:	a910      	add	r1, sp, #64	; 0x40
    2736:	2206      	movs	r2, #6
    2738:	f104 001f 	add.w	r0, r4, #31
    273c:	f021 fde2 	bl	24304 <memcpy>
    2740:	e712      	b.n	2568 <ull_slave_setup+0x1a8>
			cs->csa = 0x00;
    2742:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    2746:	7723      	strb	r3, [r4, #28]
    2748:	e73b      	b.n	25c2 <ull_slave_setup+0x202>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    274a:	2300      	movs	r3, #0
    274c:	2201      	movs	r2, #1
    274e:	9300      	str	r3, [sp, #0]
    2750:	4618      	mov	r0, r3
    2752:	4611      	mov	r1, r2
    2754:	f00f fa00 	bl	11b58 <ticker_stop>
    2758:	e77a      	b.n	2650 <ull_slave_setup+0x290>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    275a:	f011 fe11 	bl	14380 <ull_disable_mark_get>
    275e:	4287      	cmp	r7, r0
    2760:	f43f af72 	beq.w	2648 <ull_slave_setup+0x288>
    2764:	4a10      	ldr	r2, [pc, #64]	; (27a8 <ull_slave_setup+0x3e8>)
    2766:	4913      	ldr	r1, [pc, #76]	; (27b4 <ull_slave_setup+0x3f4>)
    2768:	4811      	ldr	r0, [pc, #68]	; (27b0 <ull_slave_setup+0x3f0>)
    276a:	f240 13fd 	movw	r3, #509	; 0x1fd
    276e:	f01f f927 	bl	219c0 <printk>
    2772:	4040      	eors	r0, r0
    2774:	f380 8811 	msr	BASEPRI, r0
    2778:	f04f 0003 	mov.w	r0, #3
    277c:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    277e:	e763      	b.n	2648 <ull_slave_setup+0x288>
    2780:	1afd498d 	.word	0x1afd498d
    2784:	00000007 	.word	0x00000007
    2788:	431bde83 	.word	0x431bde83
    278c:	026259ff 	.word	0x026259ff
    2790:	01c9c37f 	.word	0x01c9c37f
    2794:	3b9aca00 	.word	0x3b9aca00
    2798:	00019545 	.word	0x00019545
    279c:	00019515 	.word	0x00019515
    27a0:	00019581 	.word	0x00019581
    27a4:	1afd498d 	.word	0x1afd498d
    27a8:	00028988 	.word	0x00028988
    27ac:	00028840 	.word	0x00028840
    27b0:	000282a4 	.word	0x000282a4
    27b4:	000289e0 	.word	0x000289e0

000027b8 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    27b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    27bc:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    27be:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2898 <nrf_flash_sync_exe+0xe0>
{
    27c2:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    27c4:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    27c8:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    27cc:	f011 fd74 	bl	142b8 <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    27d0:	4f32      	ldr	r7, [pc, #200]	; (289c <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    27d2:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    27d6:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    27da:	f00f f9ff 	bl	11bdc <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    27de:	f8d8 4000 	ldr.w	r4, [r8]
    27e2:	fba4 5407 	umull	r5, r4, r4, r7
    27e6:	a32a      	add	r3, pc, #168	; (adr r3, 2890 <nrf_flash_sync_exe+0xd8>)
    27e8:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    27ec:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    27ee:	4621      	mov	r1, r4
    27f0:	4628      	mov	r0, r5
    27f2:	f7fe fb49 	bl	e88 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    27f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    27f8:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    27fa:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    27fe:	9306      	str	r3, [sp, #24]
    2800:	4b27      	ldr	r3, [pc, #156]	; (28a0 <nrf_flash_sync_exe+0xe8>)
    2802:	9305      	str	r3, [sp, #20]
    2804:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2806:	a322      	add	r3, pc, #136	; (adr r3, 2890 <nrf_flash_sync_exe+0xd8>)
    2808:	e9d3 2300 	ldrd	r2, r3, [r3]
    280c:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    2810:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2814:	f7fe fb38 	bl	e88 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2818:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    281a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    281e:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2822:	4820      	ldr	r0, [pc, #128]	; (28a4 <nrf_flash_sync_exe+0xec>)
    2824:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    2828:	fba7 0100 	umull	r0, r1, r7, r0
    282c:	2307      	movs	r3, #7
    282e:	1a28      	subs	r0, r5, r0
    2830:	fb03 1107 	mla	r1, r3, r7, r1
    2834:	eb64 0101 	sbc.w	r1, r4, r1
    2838:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    283c:	2300      	movs	r3, #0
    283e:	f7fe fb23 	bl	e88 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    2842:	9600      	str	r6, [sp, #0]
    2844:	e9cd 7001 	strd	r7, r0, [sp, #4]
    2848:	464b      	mov	r3, r9
    284a:	465a      	mov	r2, fp
    284c:	2103      	movs	r1, #3
    284e:	4650      	mov	r0, sl
    2850:	f00f f8f8 	bl	11a44 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    2854:	f030 0402 	bics.w	r4, r0, #2
    2858:	d116      	bne.n	2888 <nrf_flash_sync_exe+0xd0>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    285a:	4a13      	ldr	r2, [pc, #76]	; (28a8 <nrf_flash_sync_exe+0xf0>)
    285c:	4813      	ldr	r0, [pc, #76]	; (28ac <nrf_flash_sync_exe+0xf4>)
    285e:	2300      	movs	r3, #0
    2860:	f01d fd74 	bl	2034c <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    2864:	b168      	cbz	r0, 2882 <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    2866:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    286a:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    286e:	9400      	str	r4, [sp, #0]
    2870:	4623      	mov	r3, r4
    2872:	2103      	movs	r1, #3
    2874:	f00f f970 	bl	11b58 <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    2878:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    287c:	b00f      	add	sp, #60	; 0x3c
    287e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    2882:	f8d8 000c 	ldr.w	r0, [r8, #12]
    2886:	e7f9      	b.n	287c <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    2888:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    288c:	e7f6      	b.n	287c <nrf_flash_sync_exe+0xc4>
    288e:	bf00      	nop
    2890:	1afd498d 	.word	0x1afd498d
    2894:	00000007 	.word	0x00000007
    2898:	2000ebb4 	.word	0x2000ebb4
    289c:	3b9aca00 	.word	0x3b9aca00
    28a0:	0001e2a9 	.word	0x0001e2a9
    28a4:	1afd498d 	.word	0x1afd498d
    28a8:	000b7b44 	.word	0x000b7b44
    28ac:	2000ebc4 	.word	0x2000ebc4

000028b0 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    28b0:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    28b2:	4d0f      	ldr	r5, [pc, #60]	; (28f0 <nrf_flash_sync_check_time_limit+0x40>)
{
    28b4:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    28b6:	f00f f991 	bl	11bdc <ticker_ticks_now_get>
    28ba:	68a9      	ldr	r1, [r5, #8]
    28bc:	f00f f990 	bl	11be0 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    28c0:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    28c2:	fbb0 f4f4 	udiv	r4, r0, r4
    28c6:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    28c8:	480a      	ldr	r0, [pc, #40]	; (28f4 <nrf_flash_sync_check_time_limit+0x44>)
    28ca:	a307      	add	r3, pc, #28	; (adr r3, 28e8 <nrf_flash_sync_check_time_limit+0x38>)
    28cc:	e9d3 2300 	ldrd	r2, r3, [r3]
    28d0:	fba1 0100 	umull	r0, r1, r1, r0
    28d4:	f7fe fad8 	bl	e88 <__aeabi_uldivmod>
    28d8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    28dc:	4284      	cmp	r4, r0
    28de:	bf94      	ite	ls
    28e0:	2000      	movls	r0, #0
    28e2:	2001      	movhi	r0, #1
    28e4:	bd38      	pop	{r3, r4, r5, pc}
    28e6:	bf00      	nop
    28e8:	1afd498d 	.word	0x1afd498d
    28ec:	00000007 	.word	0x00000007
    28f0:	2000ebb4 	.word	0x2000ebb4
    28f4:	3b9aca00 	.word	0x3b9aca00

000028f8 <vnd_ccc_cfg_changed>:
	printk("CSTM notifications %s", notif_enabled ? "enabled" : "disabled");
    28f8:	4a04      	ldr	r2, [pc, #16]	; (290c <vnd_ccc_cfg_changed+0x14>)
    28fa:	4b05      	ldr	r3, [pc, #20]	; (2910 <vnd_ccc_cfg_changed+0x18>)
    28fc:	4805      	ldr	r0, [pc, #20]	; (2914 <vnd_ccc_cfg_changed+0x1c>)
    28fe:	2901      	cmp	r1, #1
    2900:	bf0c      	ite	eq
    2902:	4611      	moveq	r1, r2
    2904:	4619      	movne	r1, r3
    2906:	f01f b85b 	b.w	219c0 <printk>
    290a:	bf00      	nop
    290c:	000291c2 	.word	0x000291c2
    2910:	000291ca 	.word	0x000291ca
    2914:	000291d3 	.word	0x000291d3

00002918 <disconnected>:
	printk("Disconnected (reason 0x%02x)\n", reason);
    2918:	4801      	ldr	r0, [pc, #4]	; (2920 <disconnected+0x8>)
    291a:	f01f b851 	b.w	219c0 <printk>
    291e:	bf00      	nop
    2920:	000291e9 	.word	0x000291e9

00002924 <connected>:
	if (err) {
    2924:	b111      	cbz	r1, 292c <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    2926:	4803      	ldr	r0, [pc, #12]	; (2934 <connected+0x10>)
    2928:	f01f b84a 	b.w	219c0 <printk>
		printk("Connected\n");
    292c:	4802      	ldr	r0, [pc, #8]	; (2938 <connected+0x14>)
    292e:	f01f b847 	b.w	219c0 <printk>
    2932:	bf00      	nop
    2934:	00029207 	.word	0x00029207
    2938:	00029227 	.word	0x00029227

0000293c <hrs_notify>:
	if (heart_rate > 200U) {
    293c:	4b04      	ldr	r3, [pc, #16]	; (2950 <hrs_notify+0x14>)
    293e:	681a      	ldr	r2, [r3, #0]
    2940:	2ac8      	cmp	r2, #200	; 0xc8
		heart_rate = 0U;
    2942:	bf84      	itt	hi
    2944:	2200      	movhi	r2, #0
    2946:	601a      	strhi	r2, [r3, #0]
	bt_hrs_notify(heart_rate);
    2948:	8818      	ldrh	r0, [r3, #0]
    294a:	f003 baeb 	b.w	5f24 <bt_hrs_notify>
    294e:	bf00      	nop
    2950:	2000ad50 	.word	0x2000ad50

00002954 <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2954:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2956:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2958:	b08a      	sub	sp, #40	; 0x28
    295a:	4604      	mov	r4, r0
    295c:	460e      	mov	r6, r1
    295e:	ad07      	add	r5, sp, #28
    2960:	2b03      	cmp	r3, #3
    2962:	d820      	bhi.n	29a6 <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    2964:	e8df f003 	tbb	[pc, r3]
    2968:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    296c:	4911      	ldr	r1, [pc, #68]	; (29b4 <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    296e:	4628      	mov	r0, r5
    2970:	f021 fc6e 	bl	24250 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2974:	7863      	ldrb	r3, [r4, #1]
    2976:	9304      	str	r3, [sp, #16]
    2978:	78a3      	ldrb	r3, [r4, #2]
    297a:	9303      	str	r3, [sp, #12]
    297c:	78e3      	ldrb	r3, [r4, #3]
    297e:	9302      	str	r3, [sp, #8]
    2980:	7923      	ldrb	r3, [r4, #4]
    2982:	9301      	str	r3, [sp, #4]
    2984:	7963      	ldrb	r3, [r4, #5]
    2986:	9300      	str	r3, [sp, #0]
    2988:	4a0b      	ldr	r2, [pc, #44]	; (29b8 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    298a:	79a3      	ldrb	r3, [r4, #6]
    298c:	9505      	str	r5, [sp, #20]
    298e:	211e      	movs	r1, #30
    2990:	4630      	mov	r0, r6
    2992:	f01f f822 	bl	219da <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    2996:	b00a      	add	sp, #40	; 0x28
    2998:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    299a:	4908      	ldr	r1, [pc, #32]	; (29bc <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    299c:	e7e7      	b.n	296e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    299e:	4908      	ldr	r1, [pc, #32]	; (29c0 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    29a0:	e7e5      	b.n	296e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    29a2:	4908      	ldr	r1, [pc, #32]	; (29c4 <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    29a4:	e7e3      	b.n	296e <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    29a6:	4a08      	ldr	r2, [pc, #32]	; (29c8 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    29a8:	210a      	movs	r1, #10
    29aa:	4628      	mov	r0, r5
    29ac:	f01f f815 	bl	219da <snprintk>
		break;
    29b0:	e7e0      	b.n	2974 <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    29b2:	bf00      	nop
    29b4:	00029232 	.word	0x00029232
    29b8:	00029254 	.word	0x00029254
    29bc:	00029239 	.word	0x00029239
    29c0:	00029240 	.word	0x00029240
    29c4:	0002924a 	.word	0x0002924a
    29c8:	0002d2d5 	.word	0x0002d2d5

000029cc <auth_cancel>:
{
    29cc:	b500      	push	{lr}
    29ce:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    29d0:	f022 f909 	bl	24be6 <bt_conn_get_dst>
    29d4:	4669      	mov	r1, sp
    29d6:	f7ff ffbd 	bl	2954 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
    29da:	4803      	ldr	r0, [pc, #12]	; (29e8 <auth_cancel+0x1c>)
    29dc:	4669      	mov	r1, sp
    29de:	f01e ffef 	bl	219c0 <printk>
}
    29e2:	b009      	add	sp, #36	; 0x24
    29e4:	f85d fb04 	ldr.w	pc, [sp], #4
    29e8:	00029277 	.word	0x00029277

000029ec <auth_passkey_display>:
{
    29ec:	b510      	push	{r4, lr}
    29ee:	b088      	sub	sp, #32
    29f0:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    29f2:	f022 f8f8 	bl	24be6 <bt_conn_get_dst>
    29f6:	4669      	mov	r1, sp
    29f8:	f7ff ffac 	bl	2954 <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
    29fc:	4803      	ldr	r0, [pc, #12]	; (2a0c <auth_passkey_display+0x20>)
    29fe:	4622      	mov	r2, r4
    2a00:	4669      	mov	r1, sp
    2a02:	f01e ffdd 	bl	219c0 <printk>
}
    2a06:	b008      	add	sp, #32
    2a08:	bd10      	pop	{r4, pc}
    2a0a:	bf00      	nop
    2a0c:	0002928e 	.word	0x0002928e

00002a10 <buzzer_task>:
{
    2a10:	b508      	push	{r3, lr}
		if (latch_status == false)
    2a12:	4c05      	ldr	r4, [pc, #20]	; (2a28 <buzzer_task+0x18>)
    2a14:	7823      	ldrb	r3, [r4, #0]
    2a16:	b913      	cbnz	r3, 2a1e <buzzer_task+0xe>
			toggle_buzzer(1);
    2a18:	2001      	movs	r0, #1
    2a1a:	f001 fc17 	bl	424c <toggle_buzzer>
		k_msleep(500);
    2a1e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2a22:	f01e f90e 	bl	20c42 <k_msleep.isra.0>
		if (latch_status == false)
    2a26:	e7f5      	b.n	2a14 <buzzer_task+0x4>
    2a28:	20000863 	.word	0x20000863

00002a2c <vibration_task>:
{
    2a2c:	b508      	push	{r3, lr}
		if (latch_status == false)
    2a2e:	4c06      	ldr	r4, [pc, #24]	; (2a48 <vibration_task+0x1c>)
    2a30:	7823      	ldrb	r3, [r4, #0]
    2a32:	b93b      	cbnz	r3, 2a44 <vibration_task+0x18>
			toggle_motor(1); //1
    2a34:	2001      	movs	r0, #1
			toggle_motor(0); //0
    2a36:	f001 fc23 	bl	4280 <toggle_motor>
		k_msleep(500);
    2a3a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2a3e:	f01e f900 	bl	20c42 <k_msleep.isra.0>
		if (latch_status == false)
    2a42:	e7f5      	b.n	2a30 <vibration_task+0x4>
			toggle_motor(0); //0
    2a44:	2000      	movs	r0, #0
    2a46:	e7f6      	b.n	2a36 <vibration_task+0xa>
    2a48:	20000863 	.word	0x20000863

00002a4c <latch_sensor_task>:
{
    2a4c:	b508      	push	{r3, lr}
	init_latch();
    2a4e:	f000 fdf9 	bl	3644 <init_latch>
	init_output();
    2a52:	f001 fbbf 	bl	41d4 <init_output>
		latch_status = detect_latch();
    2a56:	4c04      	ldr	r4, [pc, #16]	; (2a68 <latch_sensor_task+0x1c>)
    2a58:	f000 fe5c 	bl	3714 <detect_latch>
    2a5c:	7020      	strb	r0, [r4, #0]
		k_msleep(500);
    2a5e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2a62:	f01e f8ee 	bl	20c42 <k_msleep.isra.0>
	while (1)
    2a66:	e7f7      	b.n	2a58 <latch_sensor_task+0xc>
    2a68:	20000863 	.word	0x20000863

00002a6c <sensors_read_task>:
{
    2a6c:	b508      	push	{r3, lr}
	initialize_bma();
    2a6e:	f000 f9fb 	bl	2e68 <initialize_bma>
	stepCounterEnable();
    2a72:	f000 fa55 	bl	2f20 <stepCounterEnable>
	init_max30102();
    2a76:	f000 fc5f 	bl	3338 <init_max30102>
	set_max30102_for_reading_data();
    2a7a:	f01e fc51 	bl	21320 <set_max30102_for_reading_data>
	first_data_read();
    2a7e:	f000 fce1 	bl	3444 <first_data_read>
	init_max30208();
    2a82:	f000 fec7 	bl	3814 <init_max30208>
	configure_max30208();
    2a86:	f000 fee3 	bl	3850 <configure_max30208>
	configure_mpu6050();
    2a8a:	f000 ff17 	bl	38bc <configure_mpu6050>
	display_mode = DISPLAY_MODE_TIME;
    2a8e:	4b11      	ldr	r3, [pc, #68]	; (2ad4 <sensors_read_task+0x68>)
		switch (sensor_mode)
    2a90:	4e11      	ldr	r6, [pc, #68]	; (2ad8 <sensors_read_task+0x6c>)
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2a92:	4d12      	ldr	r5, [pc, #72]	; (2adc <sensors_read_task+0x70>)
    2a94:	4c12      	ldr	r4, [pc, #72]	; (2ae0 <sensors_read_task+0x74>)
	display_mode = DISPLAY_MODE_TIME;
    2a96:	2201      	movs	r2, #1
    2a98:	601a      	str	r2, [r3, #0]
		switch (sensor_mode)
    2a9a:	6833      	ldr	r3, [r6, #0]
    2a9c:	b1ab      	cbz	r3, 2aca <sensors_read_task+0x5e>
    2a9e:	2b01      	cmp	r3, #1
    2aa0:	d1fc      	bne.n	2a9c <sensors_read_task+0x30>
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2aa2:	4910      	ldr	r1, [pc, #64]	; (2ae4 <sensors_read_task+0x78>)
    2aa4:	4810      	ldr	r0, [pc, #64]	; (2ae8 <sensors_read_task+0x7c>)
    2aa6:	4622      	mov	r2, r4
    2aa8:	462b      	mov	r3, r5
    2aaa:	f000 fd2b 	bl	3504 <read_heart_rate_spio2>
			max30208_read_temp(&temp_data);
    2aae:	480f      	ldr	r0, [pc, #60]	; (2aec <sensors_read_task+0x80>)
    2ab0:	f7fe fc22 	bl	12f8 <max30208_read_temp>
			steps = getStepCounterOutput();
    2ab4:	f000 fabe 	bl	3034 <getStepCounterOutput>
    2ab8:	4b0d      	ldr	r3, [pc, #52]	; (2af0 <sensors_read_task+0x84>)
    2aba:	6018      	str	r0, [r3, #0]
			mpu6050_read_Acc(&mpu_data);
    2abc:	480d      	ldr	r0, [pc, #52]	; (2af4 <sensors_read_task+0x88>)
    2abe:	f01e fcd1 	bl	21464 <mpu6050_read_Acc>
			hrs_notify();
    2ac2:	f7ff ff3b 	bl	293c <hrs_notify>
			k_msleep(10);
    2ac6:	200a      	movs	r0, #10
    2ac8:	e001      	b.n	2ace <sensors_read_task+0x62>
			k_msleep(500);
    2aca:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			k_msleep(10);
    2ace:	f01e f8b8 	bl	20c42 <k_msleep.isra.0>
			break;
    2ad2:	e7e2      	b.n	2a9a <sensors_read_task+0x2e>
    2ad4:	2000ad4c 	.word	0x2000ad4c
    2ad8:	2000ad58 	.word	0x2000ad58
    2adc:	2000ed75 	.word	0x2000ed75
    2ae0:	2000ed74 	.word	0x2000ed74
    2ae4:	2000ad60 	.word	0x2000ad60
    2ae8:	2000ad50 	.word	0x2000ad50
    2aec:	2000ad68 	.word	0x2000ad68
    2af0:	2000ad64 	.word	0x2000ad64
    2af4:	2000ed44 	.word	0x2000ed44

00002af8 <refresh_display>:
{
    2af8:	b508      	push	{r3, lr}
	resetDisplay();
    2afa:	f01e fdc9 	bl	21690 <resetDisplay>
	k_msleep(1);
    2afe:	2001      	movs	r0, #1
    2b00:	f01e f89f 	bl	20c42 <k_msleep.isra.0>
	LCD_Init();
    2b04:	f001 face 	bl	40a4 <LCD_Init>
	SetBrightness(current_brightness);
    2b08:	4b02      	ldr	r3, [pc, #8]	; (2b14 <refresh_display+0x1c>)
    2b0a:	6818      	ldr	r0, [r3, #0]
}
    2b0c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SetBrightness(current_brightness);
    2b10:	f01e bd88 	b.w	21624 <SetBrightness>
    2b14:	20000240 	.word	0x20000240

00002b18 <display_task>:
{
    2b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2b1c:	b088      	sub	sp, #32
	LCD_Init();
    2b1e:	f001 fac1 	bl	40a4 <LCD_Init>
	SetBrightness(255);
    2b22:	20ff      	movs	r0, #255	; 0xff
    2b24:	f01e fd7e 	bl	21624 <SetBrightness>
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2b28:	4e8e      	ldr	r6, [pc, #568]	; (2d64 <display_task+0x24c>)
		if (current_brightness < brightness_value)
    2b2a:	4d8f      	ldr	r5, [pc, #572]	; (2d68 <display_task+0x250>)
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2b2c:	6833      	ldr	r3, [r6, #0]
    2b2e:	2bff      	cmp	r3, #255	; 0xff
    2b30:	dd31      	ble.n	2b96 <display_task+0x7e>
			brightness_value = MAXIMUM_BRIGHTNESS;
    2b32:	23ff      	movs	r3, #255	; 0xff
			brightness_value = MINIMUM_BRIGHTNESS;
    2b34:	6033      	str	r3, [r6, #0]
		if (current_brightness < brightness_value)
    2b36:	682b      	ldr	r3, [r5, #0]
    2b38:	6832      	ldr	r2, [r6, #0]
    2b3a:	4293      	cmp	r3, r2
    2b3c:	da2f      	bge.n	2b9e <display_task+0x86>
			current_brightness += brightness_step;
    2b3e:	4a8b      	ldr	r2, [pc, #556]	; (2d6c <display_task+0x254>)
    2b40:	6812      	ldr	r2, [r2, #0]
    2b42:	4413      	add	r3, r2
			current_brightness -= brightness_step;
    2b44:	602b      	str	r3, [r5, #0]
		if (current_brightness > MAXIMUM_BRIGHTNESS)
    2b46:	682b      	ldr	r3, [r5, #0]
    2b48:	2bff      	cmp	r3, #255	; 0xff
    2b4a:	dd2d      	ble.n	2ba8 <display_task+0x90>
			current_brightness = MAXIMUM_BRIGHTNESS;
    2b4c:	23ff      	movs	r3, #255	; 0xff
			current_brightness = MINIMUM_BRIGHTNESS;
    2b4e:	602b      	str	r3, [r5, #0]
		SetBrightness(current_brightness);
    2b50:	6828      	ldr	r0, [r5, #0]
    2b52:	f01e fd67 	bl	21624 <SetBrightness>
		switch (display_mode)
    2b56:	4b86      	ldr	r3, [pc, #536]	; (2d70 <display_task+0x258>)
    2b58:	681c      	ldr	r4, [r3, #0]
    2b5a:	2c01      	cmp	r4, #1
    2b5c:	d028      	beq.n	2bb0 <display_task+0x98>
    2b5e:	2c04      	cmp	r4, #4
    2b60:	d040      	beq.n	2be4 <display_task+0xcc>
    2b62:	2c00      	cmp	r4, #0
    2b64:	d1e2      	bne.n	2b2c <display_task+0x14>
			DispLogo(logo_colour[i]);
    2b66:	4f83      	ldr	r7, [pc, #524]	; (2d74 <display_task+0x25c>)
			DispStr("BOOTING", 150, 150, WHITE, BLACK);
    2b68:	4883      	ldr	r0, [pc, #524]	; (2d78 <display_task+0x260>)
    2b6a:	9400      	str	r4, [sp, #0]
    2b6c:	2296      	movs	r2, #150	; 0x96
    2b6e:	4611      	mov	r1, r2
    2b70:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2b74:	f01e fe27 	bl	217c6 <DispStr>
			DispLogo(logo_colour[i]);
    2b78:	683a      	ldr	r2, [r7, #0]
    2b7a:	4b80      	ldr	r3, [pc, #512]	; (2d7c <display_task+0x264>)
    2b7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    2b80:	f001 f9b4 	bl	3eec <DispLogo>
			if (i >= (sizeof(logo_colour) / sizeof(int)))
    2b84:	683b      	ldr	r3, [r7, #0]
    2b86:	2b03      	cmp	r3, #3
				i++;
    2b88:	bf98      	it	ls
    2b8a:	1c5c      	addls	r4, r3, #1
			current_state_display = DISPLAY_MODE_BOOTING;
    2b8c:	4b7c      	ldr	r3, [pc, #496]	; (2d80 <display_task+0x268>)
    2b8e:	603c      	str	r4, [r7, #0]
    2b90:	2200      	movs	r2, #0
    2b92:	601a      	str	r2, [r3, #0]
			break;
    2b94:	e7ca      	b.n	2b2c <display_task+0x14>
		if (brightness_value < MINIMUM_BRIGHTNESS)
    2b96:	2b31      	cmp	r3, #49	; 0x31
    2b98:	dccd      	bgt.n	2b36 <display_task+0x1e>
			brightness_value = MINIMUM_BRIGHTNESS;
    2b9a:	2332      	movs	r3, #50	; 0x32
    2b9c:	e7ca      	b.n	2b34 <display_task+0x1c>
		else if (current_brightness > brightness_value)
    2b9e:	ddd2      	ble.n	2b46 <display_task+0x2e>
			current_brightness -= brightness_step;
    2ba0:	4a72      	ldr	r2, [pc, #456]	; (2d6c <display_task+0x254>)
    2ba2:	6812      	ldr	r2, [r2, #0]
    2ba4:	1a9b      	subs	r3, r3, r2
    2ba6:	e7cd      	b.n	2b44 <display_task+0x2c>
		if (current_brightness < MINIMUM_BRIGHTNESS)
    2ba8:	2b31      	cmp	r3, #49	; 0x31
    2baa:	dcd1      	bgt.n	2b50 <display_task+0x38>
			current_brightness = MINIMUM_BRIGHTNESS;
    2bac:	2332      	movs	r3, #50	; 0x32
    2bae:	e7ce      	b.n	2b4e <display_task+0x36>
			if (current_state_display != DISPLAY_MODE_TIME)
    2bb0:	4c73      	ldr	r4, [pc, #460]	; (2d80 <display_task+0x268>)
    2bb2:	6823      	ldr	r3, [r4, #0]
    2bb4:	2b01      	cmp	r3, #1
    2bb6:	d001      	beq.n	2bbc <display_task+0xa4>
				refresh_display();
    2bb8:	f7ff ff9e 	bl	2af8 <refresh_display>
			DispStr("10 : 10", 150, 150, WHITE, BLACK);
    2bbc:	2296      	movs	r2, #150	; 0x96
    2bbe:	2700      	movs	r7, #0
    2bc0:	4611      	mov	r1, r2
    2bc2:	4870      	ldr	r0, [pc, #448]	; (2d84 <display_task+0x26c>)
    2bc4:	9700      	str	r7, [sp, #0]
    2bc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bca:	f01e fdfc 	bl	217c6 <DispStr>
			DispStr("11/11  Wed", 130, 200, WHITE, BLACK);
    2bce:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2bd2:	486d      	ldr	r0, [pc, #436]	; (2d88 <display_task+0x270>)
    2bd4:	9700      	str	r7, [sp, #0]
    2bd6:	22c8      	movs	r2, #200	; 0xc8
    2bd8:	2182      	movs	r1, #130	; 0x82
    2bda:	f01e fdf4 	bl	217c6 <DispStr>
			current_state_display = DISPLAY_MODE_TIME;
    2bde:	2301      	movs	r3, #1
    2be0:	6023      	str	r3, [r4, #0]
			break;
    2be2:	e7a3      	b.n	2b2c <display_task+0x14>
			if (current_state_display != DISPLAY_MODE_VALUES)
    2be4:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2d80 <display_task+0x268>
    2be8:	f8d8 3000 	ldr.w	r3, [r8]
    2bec:	2b04      	cmp	r3, #4
    2bee:	d04d      	beq.n	2c8c <display_task+0x174>
				refresh_display();
    2bf0:	f7ff ff82 	bl	2af8 <refresh_display>
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2bf4:	2432      	movs	r4, #50	; 0x32
    2bf6:	2364      	movs	r3, #100	; 0x64
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2bf8:	2700      	movs	r7, #0
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2bfa:	461a      	mov	r2, r3
    2bfc:	4863      	ldr	r0, [pc, #396]	; (2d8c <display_task+0x274>)
    2bfe:	211f      	movs	r1, #31
    2c00:	e9cd 4400 	strd	r4, r4, [sp]
    2c04:	f001 f9dc 	bl	3fc0 <DispIcon>
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2c08:	4861      	ldr	r0, [pc, #388]	; (2d90 <display_task+0x278>)
    2c0a:	9700      	str	r7, [sp, #0]
    2c0c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c10:	22a0      	movs	r2, #160	; 0xa0
    2c12:	215a      	movs	r1, #90	; 0x5a
    2c14:	f01e fdd7 	bl	217c6 <DispStr>
				DispIcon(heart_logo, RED, 260, 100, 50, 50);
    2c18:	485e      	ldr	r0, [pc, #376]	; (2d94 <display_task+0x27c>)
    2c1a:	2364      	movs	r3, #100	; 0x64
    2c1c:	f44f 7282 	mov.w	r2, #260	; 0x104
    2c20:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2c24:	e9cd 4400 	strd	r4, r4, [sp]
    2c28:	f001 f9ca 	bl	3fc0 <DispIcon>
				DispStr("H R", 264, 160, WHITE, BLACK);
    2c2c:	485a      	ldr	r0, [pc, #360]	; (2d98 <display_task+0x280>)
    2c2e:	9700      	str	r7, [sp, #0]
    2c30:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c34:	22a0      	movs	r2, #160	; 0xa0
    2c36:	f44f 7184 	mov.w	r1, #264	; 0x108
    2c3a:	f01e fdc4 	bl	217c6 <DispStr>
				DispIcon(temperature_logo, GREEN, 100, 280, 50, 50);
    2c3e:	4857      	ldr	r0, [pc, #348]	; (2d9c <display_task+0x284>)
    2c40:	f44f 738c 	mov.w	r3, #280	; 0x118
    2c44:	2264      	movs	r2, #100	; 0x64
    2c46:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    2c4a:	e9cd 4400 	strd	r4, r4, [sp]
    2c4e:	f001 f9b7 	bl	3fc0 <DispIcon>
				DispStr("Temp", 94, 340, WHITE, BLACK);
    2c52:	4853      	ldr	r0, [pc, #332]	; (2da0 <display_task+0x288>)
    2c54:	9700      	str	r7, [sp, #0]
    2c56:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c5a:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2c5e:	215e      	movs	r1, #94	; 0x5e
    2c60:	f01e fdb1 	bl	217c6 <DispStr>
				DispIcon(spio2_logo, RED, 260, 280, 50, 50);
    2c64:	484f      	ldr	r0, [pc, #316]	; (2da4 <display_task+0x28c>)
    2c66:	f44f 738c 	mov.w	r3, #280	; 0x118
    2c6a:	f44f 7282 	mov.w	r2, #260	; 0x104
    2c6e:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2c72:	e9cd 4400 	strd	r4, r4, [sp]
    2c76:	f001 f9a3 	bl	3fc0 <DispIcon>
				DispStr("Spo2", 250, 340, WHITE, BLACK);
    2c7a:	484b      	ldr	r0, [pc, #300]	; (2da8 <display_task+0x290>)
    2c7c:	9700      	str	r7, [sp, #0]
    2c7e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c82:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2c86:	21fa      	movs	r1, #250	; 0xfa
    2c88:	f01e fd9d 	bl	217c6 <DispStr>
			sprintf(step_count, "%d", steps);
    2c8c:	4b47      	ldr	r3, [pc, #284]	; (2dac <display_task+0x294>)
    2c8e:	4948      	ldr	r1, [pc, #288]	; (2db0 <display_task+0x298>)
    2c90:	681a      	ldr	r2, [r3, #0]
    2c92:	a802      	add	r0, sp, #8
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2c94:	2400      	movs	r4, #0
			sprintf(step_count, "%d", steps);
    2c96:	f005 f959 	bl	7f4c <sprintf>
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2c9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2c9e:	9400      	str	r4, [sp, #0]
    2ca0:	22be      	movs	r2, #190	; 0xbe
    2ca2:	2178      	movs	r1, #120	; 0x78
    2ca4:	a802      	add	r0, sp, #8
    2ca6:	f01e fd8e 	bl	217c6 <DispStr>
			if (valid_hr)
    2caa:	4b42      	ldr	r3, [pc, #264]	; (2db4 <display_task+0x29c>)
    2cac:	781b      	ldrb	r3, [r3, #0]
    2cae:	b173      	cbz	r3, 2cce <display_task+0x1b6>
				sprintf(hr, "%d  ", heart_rate);
    2cb0:	4b41      	ldr	r3, [pc, #260]	; (2db8 <display_task+0x2a0>)
    2cb2:	4942      	ldr	r1, [pc, #264]	; (2dbc <display_task+0x2a4>)
    2cb4:	681a      	ldr	r2, [r3, #0]
    2cb6:	a806      	add	r0, sp, #24
    2cb8:	f005 f948 	bl	7f4c <sprintf>
				DispStr(hr, 270, 190, WHITE, BLACK); //update hr
    2cbc:	9400      	str	r4, [sp, #0]
    2cbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2cc2:	22be      	movs	r2, #190	; 0xbe
    2cc4:	f44f 7187 	mov.w	r1, #270	; 0x10e
    2cc8:	a806      	add	r0, sp, #24
    2cca:	f01e fd7c 	bl	217c6 <DispStr>
			sprintf(temperature_value, "%.2f", temp_data);
    2cce:	4b3c      	ldr	r3, [pc, #240]	; (2dc0 <display_task+0x2a8>)
    2cd0:	6818      	ldr	r0, [r3, #0]
    2cd2:	f7fd fb79 	bl	3c8 <__aeabi_f2d>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2cd6:	2400      	movs	r4, #0
			sprintf(temperature_value, "%.2f", temp_data);
    2cd8:	4602      	mov	r2, r0
    2cda:	460b      	mov	r3, r1
    2cdc:	a804      	add	r0, sp, #16
    2cde:	4939      	ldr	r1, [pc, #228]	; (2dc4 <display_task+0x2ac>)
    2ce0:	f005 f934 	bl	7f4c <sprintf>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2ce4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2ce8:	4837      	ldr	r0, [pc, #220]	; (2dc8 <display_task+0x2b0>)
    2cea:	9400      	str	r4, [sp, #0]
    2cec:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2cf0:	215a      	movs	r1, #90	; 0x5a
    2cf2:	f01e fd68 	bl	217c6 <DispStr>
			if (valid_sp02)
    2cf6:	4b35      	ldr	r3, [pc, #212]	; (2dcc <display_task+0x2b4>)
    2cf8:	781b      	ldrb	r3, [r3, #0]
    2cfa:	b17b      	cbz	r3, 2d1c <display_task+0x204>
				sprintf(sp, "%d", sp02);
    2cfc:	4b34      	ldr	r3, [pc, #208]	; (2dd0 <display_task+0x2b8>)
    2cfe:	492c      	ldr	r1, [pc, #176]	; (2db0 <display_task+0x298>)
    2d00:	681a      	ldr	r2, [r3, #0]
    2d02:	a806      	add	r0, sp, #24
    2d04:	f005 f922 	bl	7f4c <sprintf>
				DispStr(sp, 260, 370, WHITE, BLACK); //update spo2
    2d08:	9400      	str	r4, [sp, #0]
    2d0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d0e:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2d12:	f44f 7182 	mov.w	r1, #260	; 0x104
    2d16:	a806      	add	r0, sp, #24
    2d18:	f01e fd55 	bl	217c6 <DispStr>
			if(!latch_status)
    2d1c:	4b2d      	ldr	r3, [pc, #180]	; (2dd4 <display_task+0x2bc>)
    2d1e:	781b      	ldrb	r3, [r3, #0]
    2d20:	b9eb      	cbnz	r3, 2d5e <display_task+0x246>
				DispStr("Detached !", 128, 30, RED, BLACK);
    2d22:	9300      	str	r3, [sp, #0]
    2d24:	f44f 4378 	mov.w	r3, #63488	; 0xf800
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2d28:	482b      	ldr	r0, [pc, #172]	; (2dd8 <display_task+0x2c0>)
    2d2a:	221e      	movs	r2, #30
    2d2c:	2180      	movs	r1, #128	; 0x80
    2d2e:	f01e fd4a 	bl	217c6 <DispStr>
			current_state_display = DISPLAY_MODE_VALUES;
    2d32:	2304      	movs	r3, #4
    2d34:	f8c8 3000 	str.w	r3, [r8]
			mpu_data = mpu_data-213;
    2d38:	4b28      	ldr	r3, [pc, #160]	; (2ddc <display_task+0x2c4>)
			sprintf(Accx, "%d", mpu_data);
    2d3a:	491d      	ldr	r1, [pc, #116]	; (2db0 <display_task+0x298>)
			mpu_data = mpu_data-213;
    2d3c:	881a      	ldrh	r2, [r3, #0]
    2d3e:	3ad5      	subs	r2, #213	; 0xd5
    2d40:	b292      	uxth	r2, r2
			sprintf(Accx, "%d", mpu_data);
    2d42:	a806      	add	r0, sp, #24
			mpu_data = mpu_data-213;
    2d44:	801a      	strh	r2, [r3, #0]
			sprintf(Accx, "%d", mpu_data);
    2d46:	f005 f901 	bl	7f4c <sprintf>
			DispStr(Accx, 190, 240, WHITE, BLACK); //update acceleration
    2d4a:	2300      	movs	r3, #0
    2d4c:	9300      	str	r3, [sp, #0]
    2d4e:	22f0      	movs	r2, #240	; 0xf0
    2d50:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2d54:	21be      	movs	r1, #190	; 0xbe
    2d56:	a806      	add	r0, sp, #24
    2d58:	f01e fd35 	bl	217c6 <DispStr>
			break;
    2d5c:	e6e6      	b.n	2b2c <display_task+0x14>
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2d5e:	2300      	movs	r3, #0
    2d60:	9300      	str	r3, [sp, #0]
    2d62:	e7e1      	b.n	2d28 <display_task+0x210>
    2d64:	20000220 	.word	0x20000220
    2d68:	20000240 	.word	0x20000240
    2d6c:	2000021c 	.word	0x2000021c
    2d70:	2000ad4c 	.word	0x2000ad4c
    2d74:	2000ad54 	.word	0x2000ad54
    2d78:	00029345 	.word	0x00029345
    2d7c:	20000244 	.word	0x20000244
    2d80:	2000ad48 	.word	0x2000ad48
    2d84:	0002934d 	.word	0x0002934d
    2d88:	00029355 	.word	0x00029355
    2d8c:	200089f4 	.word	0x200089f4
    2d90:	00029360 	.word	0x00029360
    2d94:	200018ac 	.word	0x200018ac
    2d98:	00029366 	.word	0x00029366
    2d9c:	200093b8 	.word	0x200093b8
    2da0:	0002936a 	.word	0x0002936a
    2da4:	20008030 	.word	0x20008030
    2da8:	0002936f 	.word	0x0002936f
    2dac:	2000ad64 	.word	0x2000ad64
    2db0:	0002bf9d 	.word	0x0002bf9d
    2db4:	2000ed74 	.word	0x2000ed74
    2db8:	2000ad50 	.word	0x2000ad50
    2dbc:	00029374 	.word	0x00029374
    2dc0:	2000ad68 	.word	0x2000ad68
    2dc4:	00029379 	.word	0x00029379
    2dc8:	0002937e 	.word	0x0002937e
    2dcc:	2000ed75 	.word	0x2000ed75
    2dd0:	2000ad60 	.word	0x2000ad60
    2dd4:	20000863 	.word	0x20000863
    2dd8:	00029383 	.word	0x00029383
    2ddc:	2000ed44 	.word	0x2000ed44

00002de0 <bma_i2c_read>:
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
}

/* BMA i2c read function */
static uint16_t bma_i2c_read(u8_t reg, u8_t *data, u16_t len, void *intf_ptr)
{
    2de0:	b570      	push	{r4, r5, r6, lr}
    2de2:	4606      	mov	r6, r0
    2de4:	b088      	sub	sp, #32
    2de6:	460d      	mov	r5, r1
    2de8:	4614      	mov	r4, r2
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    2dea:	480d      	ldr	r0, [pc, #52]	; (2e20 <bma_i2c_read+0x40>)
    2dec:	f01c fbf2 	bl	1f5d4 <z_impl_device_get_binding>
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    2df0:	f10d 0207 	add.w	r2, sp, #7
    2df4:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    2df6:	2201      	movs	r2, #1
    2df8:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    2dfa:	2200      	movs	r2, #0
    2dfc:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    2e00:	2207      	movs	r2, #7
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    2e02:	e9cd 5405 	strd	r5, r4, [sp, #20]
    2e06:	f88d 6007 	strb.w	r6, [sp, #7]
    2e0a:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    2e0e:	6883      	ldr	r3, [r0, #8]
    2e10:	2202      	movs	r2, #2
    2e12:	685c      	ldr	r4, [r3, #4]
    2e14:	a902      	add	r1, sp, #8
    2e16:	2319      	movs	r3, #25
    2e18:	47a0      	blx	r4
}
    2e1a:	b2c0      	uxtb	r0, r0
    2e1c:	b008      	add	sp, #32
    2e1e:	bd70      	pop	{r4, r5, r6, pc}
    2e20:	0002942f 	.word	0x0002942f

00002e24 <bma_i2c_write>:
{
    2e24:	b570      	push	{r4, r5, r6, lr}
    2e26:	4606      	mov	r6, r0
    2e28:	b088      	sub	sp, #32
    2e2a:	460d      	mov	r5, r1
    2e2c:	4614      	mov	r4, r2
    2e2e:	480d      	ldr	r0, [pc, #52]	; (2e64 <bma_i2c_write+0x40>)
    2e30:	f01c fbd0 	bl	1f5d4 <z_impl_device_get_binding>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
    2e34:	f10d 0207 	add.w	r2, sp, #7
    2e38:	9202      	str	r2, [sp, #8]
	msg[0].len = 1U;
    2e3a:	2201      	movs	r2, #1
    2e3c:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    2e3e:	2200      	movs	r2, #0
    2e40:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    2e44:	2202      	movs	r2, #2
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    2e46:	e9cd 5405 	strd	r5, r4, [sp, #20]
    2e4a:	f88d 6007 	strb.w	r6, [sp, #7]
    2e4e:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    2e52:	6883      	ldr	r3, [r0, #8]
    2e54:	a902      	add	r1, sp, #8
    2e56:	685c      	ldr	r4, [r3, #4]
    2e58:	2319      	movs	r3, #25
    2e5a:	47a0      	blx	r4
}
    2e5c:	b2c0      	uxtb	r0, r0
    2e5e:	b008      	add	sp, #32
    2e60:	bd70      	pop	{r4, r5, r6, pc}
    2e62:	bf00      	nop
    2e64:	0002942f 	.word	0x0002942f

00002e68 <initialize_bma>:
    k_busy_wait(ms);
}

/*Initialise BMA sensor */
void initialize_bma()
{
    2e68:	b530      	push	{r4, r5, lr}
    2e6a:	b08d      	sub	sp, #52	; 0x34
    2e6c:	4821      	ldr	r0, [pc, #132]	; (2ef4 <initialize_bma+0x8c>)
    2e6e:	f01c fbb1 	bl	1f5d4 <z_impl_device_get_binding>
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    if (!i2c_dev)
    2e72:	b928      	cbnz	r0, 2e80 <initialize_bma+0x18>
    {
        printk("I2C: Device driver not found.\n");
    2e74:	4820      	ldr	r0, [pc, #128]	; (2ef8 <initialize_bma+0x90>)
    if (rslt == BMA4_OK)
        printk("Writing config file : OK\n");
    else
        printk("Writing config file : FAILED!!!\n");
    bma456_device_global = bma456_device;
}
    2e76:	b00d      	add	sp, #52	; 0x34
    2e78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        printk("I2C: Device driver not found.\n");
    2e7c:	f01e bda0 	b.w	219c0 <printk>
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    2e80:	4b1e      	ldr	r3, [pc, #120]	; (2efc <initialize_bma+0x94>)
    bma456_device.intf_ptr = &dev_addr;
    2e82:	9301      	str	r3, [sp, #4]
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    2e84:	2219      	movs	r2, #25
    2e86:	701a      	strb	r2, [r3, #0]
    bma456_device.bus_read = bma_i2c_read;
    2e88:	4a1d      	ldr	r2, [pc, #116]	; (2f00 <initialize_bma+0x98>)
    2e8a:	9208      	str	r2, [sp, #32]
    bma456_device.bus_write = bma_i2c_write;
    2e8c:	4a1d      	ldr	r2, [pc, #116]	; (2f04 <initialize_bma+0x9c>)
    2e8e:	9209      	str	r2, [sp, #36]	; 0x24
    bma456_device.delay_us = bma_delay_us;
    2e90:	4a1d      	ldr	r2, [pc, #116]	; (2f08 <initialize_bma+0xa0>)
    2e92:	920a      	str	r2, [sp, #40]	; 0x28
    bma456_device.read_write_len = 8;
    2e94:	2208      	movs	r2, #8
    2e96:	f8ad 2014 	strh.w	r2, [sp, #20]
    bma456_device.resolution = 12;
    2e9a:	220c      	movs	r2, #12
    2e9c:	f88d 200c 	strb.w	r2, [sp, #12]
    rslt |= bma456_init(&bma456_device);
    2ea0:	4668      	mov	r0, sp
    bma456_device.feature_len = BMA456_FEATURE_SIZE;
    2ea2:	2246      	movs	r2, #70	; 0x46
    2ea4:	f88d 2016 	strb.w	r2, [sp, #22]
    rslt |= bma456_init(&bma456_device);
    2ea8:	f01e f94d 	bl	21146 <bma456_init>
    if (rslt == BMA4_OK)
    2eac:	b9f0      	cbnz	r0, 2eec <initialize_bma+0x84>
        printk("Communication with BMA : OK\n");
    2eae:	4817      	ldr	r0, [pc, #92]	; (2f0c <initialize_bma+0xa4>)
        printk("Communication with BMA : FAILED!!! \n");
    2eb0:	f01e fd86 	bl	219c0 <printk>
    bma4_set_command_register(0xB6, &bma456_device);
    2eb4:	4669      	mov	r1, sp
    2eb6:	20b6      	movs	r0, #182	; 0xb6
    2eb8:	f01e f934 	bl	21124 <bma4_set_command_register>
	return z_impl_k_sleep(timeout);
    2ebc:	f44f 70a4 	mov.w	r0, #328	; 0x148
    2ec0:	2100      	movs	r1, #0
    2ec2:	f01d f9fd 	bl	202c0 <z_impl_k_sleep>
    rslt |= bma456_write_config_file(&bma456_device);
    2ec6:	4668      	mov	r0, sp
    2ec8:	f000 f9c4 	bl	3254 <bma456_write_config_file>
    if (rslt == BMA4_OK)
    2ecc:	b980      	cbnz	r0, 2ef0 <initialize_bma+0x88>
        printk("Writing config file : OK\n");
    2ece:	4810      	ldr	r0, [pc, #64]	; (2f10 <initialize_bma+0xa8>)
    bma456_device_global = bma456_device;
    2ed0:	4d10      	ldr	r5, [pc, #64]	; (2f14 <initialize_bma+0xac>)
    2ed2:	466c      	mov	r4, sp
        printk("Writing config file : FAILED!!!\n");
    2ed4:	f01e fd74 	bl	219c0 <printk>
    bma456_device_global = bma456_device;
    2ed8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2eda:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2edc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    2ede:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2ee0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    2ee4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    2ee8:	b00d      	add	sp, #52	; 0x34
    2eea:	bd30      	pop	{r4, r5, pc}
        printk("Communication with BMA : FAILED!!! \n");
    2eec:	480a      	ldr	r0, [pc, #40]	; (2f18 <initialize_bma+0xb0>)
    2eee:	e7df      	b.n	2eb0 <initialize_bma+0x48>
        printk("Writing config file : FAILED!!!\n");
    2ef0:	480a      	ldr	r0, [pc, #40]	; (2f1c <initialize_bma+0xb4>)
    2ef2:	e7ed      	b.n	2ed0 <initialize_bma+0x68>
    2ef4:	0002942f 	.word	0x0002942f
    2ef8:	00029435 	.word	0x00029435
    2efc:	2000ed76 	.word	0x2000ed76
    2f00:	00002de1 	.word	0x00002de1
    2f04:	00002e25 	.word	0x00002e25
    2f08:	00020c63 	.word	0x00020c63
    2f0c:	00029454 	.word	0x00029454
    2f10:	00029496 	.word	0x00029496
    2f14:	2000ad6c 	.word	0x2000ad6c
    2f18:	00029471 	.word	0x00029471
    2f1c:	000294b0 	.word	0x000294b0

00002f20 <stepCounterEnable>:
    bma456_device_global = bma456_device;
    return data;
}

u16_t stepCounterEnable()
{
    2f20:	b570      	push	{r4, r5, r6, lr}
    struct bma4_accel sens_data;
    struct bma4_dev bma456_device = bma456_device_global;
    2f22:	4d37      	ldr	r5, [pc, #220]	; (3000 <stepCounterEnable+0xe0>)
    2f24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    2f26:	b08c      	sub	sp, #48	; 0x30
    struct bma4_dev bma456_device = bma456_device_global;
    2f28:	466c      	mov	r4, sp
    2f2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f2c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2f2e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2f30:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2f34:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    // /* Soft-reset */
    rslt |= bma4_set_command_register(0xB6, &bma456_device);
    2f38:	4669      	mov	r1, sp
    2f3a:	20b6      	movs	r0, #182	; 0xb6
    2f3c:	f01e f8f2 	bl	21124 <bma4_set_command_register>
    if (rslt == BMA4_OK)
    2f40:	4604      	mov	r4, r0
    2f42:	b990      	cbnz	r0, 2f6a <stepCounterEnable+0x4a>
        printk("Soft reset before enabling step counter : OK\n");
    2f44:	482f      	ldr	r0, [pc, #188]	; (3004 <stepCounterEnable+0xe4>)
    else
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    2f46:	f01e fd3b 	bl	219c0 <printk>
    2f4a:	2100      	movs	r1, #0
    2f4c:	f640 40cd 	movw	r0, #3277	; 0xccd
    2f50:	f01d f9b6 	bl	202c0 <z_impl_k_sleep>
    k_msleep(100);

    /* Initialize BMA456 */
    rslt |= bma456_init(&bma456_device);
    2f54:	4668      	mov	r0, sp
    2f56:	f01e f8f6 	bl	21146 <bma456_init>
    2f5a:	4304      	orrs	r4, r0
    2f5c:	b260      	sxtb	r0, r4
    2f5e:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2f60:	b12c      	cbz	r4, 2f6e <stepCounterEnable+0x4e>
    {
        printk("Testing communication with BMA : FAILED!!!\n");
    2f62:	4829      	ldr	r0, [pc, #164]	; (3008 <stepCounterEnable+0xe8>)
    //     return rslt;
    // }
    // else
    //     printk("Setting watermark : OK\n");
    bma456_device_global = bma456_device;
    printk("Step counter init : OK\n");
    2f64:	f01e fd2c 	bl	219c0 <printk>
    return rslt;
    2f68:	e015      	b.n	2f96 <stepCounterEnable+0x76>
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    2f6a:	4828      	ldr	r0, [pc, #160]	; (300c <stepCounterEnable+0xec>)
    2f6c:	e7eb      	b.n	2f46 <stepCounterEnable+0x26>
        printk("Testing communication with BMA : OK\n");
    2f6e:	4828      	ldr	r0, [pc, #160]	; (3010 <stepCounterEnable+0xf0>)
    2f70:	f01e fd26 	bl	219c0 <printk>
    rslt = bma4_set_accel_enable(0x01, &bma456_device);
    2f74:	4669      	mov	r1, sp
    2f76:	2001      	movs	r0, #1
    2f78:	f01e f8af 	bl	210da <bma4_set_accel_enable>
    2f7c:	b284      	uxth	r4, r0
    if (rslt == BMA4_OK)
    2f7e:	b96c      	cbnz	r4, 2f9c <stepCounterEnable+0x7c>
        printk("Enabling accelerometer : OK\n");
    2f80:	4824      	ldr	r0, [pc, #144]	; (3014 <stepCounterEnable+0xf4>)
    2f82:	f01e fd1d 	bl	219c0 <printk>
    rslt = bma456_write_config_file(&bma456_device);
    2f86:	4668      	mov	r0, sp
    2f88:	f000 f964 	bl	3254 <bma456_write_config_file>
    2f8c:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2f8e:	b13c      	cbz	r4, 2fa0 <stepCounterEnable+0x80>
        printf("Load configuration fail\r\n");
    2f90:	4821      	ldr	r0, [pc, #132]	; (3018 <stepCounterEnable+0xf8>)
        printf("Step counter not enabled\r\n");
    2f92:	f004 fff3 	bl	7f7c <printf>
}
    2f96:	4620      	mov	r0, r4
    2f98:	b00c      	add	sp, #48	; 0x30
    2f9a:	bd70      	pop	{r4, r5, r6, pc}
        printk("Enabling accelerometer : FAILED!!!\n");
    2f9c:	481f      	ldr	r0, [pc, #124]	; (301c <stepCounterEnable+0xfc>)
    2f9e:	e7e1      	b.n	2f64 <stepCounterEnable+0x44>
        printf("Load configuration successful\r\n");
    2fa0:	481f      	ldr	r0, [pc, #124]	; (3020 <stepCounterEnable+0x100>)
    2fa2:	f004 ffeb 	bl	7f7c <printf>
    rslt = bma456_feature_enable(BMA456_STEP_CNTR, 1, &bma456_device);
    2fa6:	2101      	movs	r1, #1
    2fa8:	466a      	mov	r2, sp
    2faa:	4608      	mov	r0, r1
    2fac:	f01e f8f3 	bl	21196 <bma456_feature_enable>
    2fb0:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2fb2:	b10c      	cbz	r4, 2fb8 <stepCounterEnable+0x98>
        printf("Step counter not enabled\r\n");
    2fb4:	481b      	ldr	r0, [pc, #108]	; (3024 <stepCounterEnable+0x104>)
    2fb6:	e7ec      	b.n	2f92 <stepCounterEnable+0x72>
        printf("Step counter enabled\r\n");
    2fb8:	481b      	ldr	r0, [pc, #108]	; (3028 <stepCounterEnable+0x108>)
    2fba:	f004 ffdf 	bl	7f7c <printf>
    rslt = bma456_map_interrupt(BMA4_INTR1_MAP, BMA456_STEP_CNTR_INT, 1, &bma456_device);
    2fbe:	4620      	mov	r0, r4
    2fc0:	466b      	mov	r3, sp
    2fc2:	2201      	movs	r2, #1
    2fc4:	2102      	movs	r1, #2
    2fc6:	f01e f8d2 	bl	2116e <bma456_map_interrupt>
    2fca:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2fcc:	b124      	cbz	r4, 2fd8 <stepCounterEnable+0xb8>
        printf("Error code: %d\n", rslt);
    2fce:	4621      	mov	r1, r4
    2fd0:	4816      	ldr	r0, [pc, #88]	; (302c <stepCounterEnable+0x10c>)
    2fd2:	f004 ffd3 	bl	7f7c <printf>
        return rslt;
    2fd6:	e7de      	b.n	2f96 <stepCounterEnable+0x76>
    rslt = bma456_step_counter_set_watermark(1, &bma456_device);
    2fd8:	4669      	mov	r1, sp
    2fda:	2001      	movs	r0, #1
    2fdc:	f01e f952 	bl	21284 <bma456_step_counter_set_watermark>
    2fe0:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    2fe2:	2c00      	cmp	r4, #0
    2fe4:	d1f3      	bne.n	2fce <stepCounterEnable+0xae>
    bma456_device_global = bma456_device;
    2fe6:	466d      	mov	r5, sp
    2fe8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2fea:	4e05      	ldr	r6, [pc, #20]	; (3000 <stepCounterEnable+0xe0>)
    2fec:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2fee:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2ff0:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    2ff2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    2ff6:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    printk("Step counter init : OK\n");
    2ffa:	480d      	ldr	r0, [pc, #52]	; (3030 <stepCounterEnable+0x110>)
    2ffc:	e7b2      	b.n	2f64 <stepCounterEnable+0x44>
    2ffe:	bf00      	nop
    3000:	2000ad6c 	.word	0x2000ad6c
    3004:	000294d1 	.word	0x000294d1
    3008:	00029534 	.word	0x00029534
    300c:	000294ff 	.word	0x000294ff
    3010:	00029560 	.word	0x00029560
    3014:	00029585 	.word	0x00029585
    3018:	000295c6 	.word	0x000295c6
    301c:	000295a2 	.word	0x000295a2
    3020:	000295e0 	.word	0x000295e0
    3024:	00029600 	.word	0x00029600
    3028:	0002961b 	.word	0x0002961b
    302c:	00029632 	.word	0x00029632
    3030:	00029642 	.word	0x00029642

00003034 <getStepCounterOutput>:

u32_t getStepCounterOutput()
{
    3034:	b530      	push	{r4, r5, lr}
    struct bma4_dev bma456_device = bma456_device_global;
    3036:	4d0c      	ldr	r5, [pc, #48]	; (3068 <getStepCounterOutput+0x34>)
    3038:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    303a:	b08f      	sub	sp, #60	; 0x3c
    struct bma4_dev bma456_device = bma456_device_global;
    303c:	ac02      	add	r4, sp, #8
    303e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3040:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3042:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3044:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3048:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    uint32_t step_out = 0;
    304c:	2300      	movs	r3, #0
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    304e:	a902      	add	r1, sp, #8
    3050:	a801      	add	r0, sp, #4
    uint32_t step_out = 0;
    3052:	9301      	str	r3, [sp, #4]
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    3054:	f01e f949 	bl	212ea <bma456_step_counter_output>
    if (rslt == BMA4_OK)
    3058:	b110      	cbz	r0, 3060 <getStepCounterOutput+0x2c>
    {
        //printk("\nSteps counter output is %u\r\n", step_out);
    }
    else
    {
        printk("Reading step count : FAILED\n");
    305a:	4804      	ldr	r0, [pc, #16]	; (306c <getStepCounterOutput+0x38>)
    305c:	f01e fcb0 	bl	219c0 <printk>
    }
    return step_out;
    3060:	9801      	ldr	r0, [sp, #4]
    3062:	b00f      	add	sp, #60	; 0x3c
    3064:	bd30      	pop	{r4, r5, pc}
    3066:	bf00      	nop
    3068:	2000ad6c 	.word	0x2000ad6c
    306c:	0002965a 	.word	0x0002965a

00003070 <bma4_write_config_file>:

/*!
 *  @brief This API is used to write the binary configuration in the sensor
 */
int8_t bma4_write_config_file(struct bma4_dev *dev)
{
    3070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    3072:	4605      	mov	r5, r0
    uint8_t config_load = 0;
    uint16_t index = 0;
    uint8_t config_stream_status = 0;

    /* Disable advanced power save */
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    3074:	4629      	mov	r1, r5
    uint8_t config_load = 0;
    3076:	2000      	movs	r0, #0
    3078:	f88d 0004 	strb.w	r0, [sp, #4]
    uint8_t config_stream_status = 0;
    307c:	f88d 0005 	strb.w	r0, [sp, #5]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    3080:	f01d ff58 	bl	20f34 <bma4_set_advance_power_save>

    /* Wait for sensor time synchronization. Refer the data-sheet for
     * more information
     */
    dev->delay_us(450, dev->intf_ptr);
    3084:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3086:	6869      	ldr	r1, [r5, #4]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    3088:	4604      	mov	r4, r0
    dev->delay_us(450, dev->intf_ptr);
    308a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    308e:	4798      	blx	r3
    if (rslt == BMA4_OK)
    3090:	b94c      	cbnz	r4, 30a6 <bma4_write_config_file+0x36>
    {
        /* Disable config loading*/
        rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    3092:	462b      	mov	r3, r5
    3094:	2201      	movs	r2, #1
    3096:	a901      	add	r1, sp, #4
    3098:	2059      	movs	r0, #89	; 0x59
    309a:	f01d ff6f 	bl	20f7c <bma4_write_regs>

        if (rslt == BMA4_OK)
    309e:	4604      	mov	r4, r0
    30a0:	2800      	cmp	r0, #0
    30a2:	f000 8087 	beq.w	31b4 <bma4_write_config_file+0x144>
            }
        }
    }

    return rslt;
}
    30a6:	4620      	mov	r0, r4
    30a8:	b003      	add	sp, #12
    30aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *  @note index value should be even number.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index, struct bma4_dev *dev)
{
    int8_t rslt;
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    30ac:	0973      	lsrs	r3, r6, #5
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    30ae:	692f      	ldr	r7, [r5, #16]
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    30b0:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_lsb = ((index / 2) & 0x0F);

    /* Check the dev structure as NULL */
    rslt = null_pointer_check(dev);
    30b4:	4628      	mov	r0, r5
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    30b6:	f3c6 0343 	ubfx	r3, r6, #1, #4
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    30ba:	4437      	add	r7, r6
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    30bc:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    30c0:	f01d fdd1 	bl	20c66 <null_pointer_check>

    if ((rslt == BMA4_OK) && (stream_data != NULL))
    30c4:	2800      	cmp	r0, #0
    30c6:	d172      	bne.n	31ae <bma4_write_config_file+0x13e>
    30c8:	2f00      	cmp	r7, #0
    30ca:	d070      	beq.n	31ae <bma4_write_config_file+0x13e>
    {
        rslt = bma4_write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    30cc:	462b      	mov	r3, r5
    30ce:	2201      	movs	r2, #1
    30d0:	f10d 0107 	add.w	r1, sp, #7
    30d4:	205b      	movs	r0, #91	; 0x5b
    30d6:	f01d ff51 	bl	20f7c <bma4_write_regs>
        if (rslt == BMA4_OK)
    30da:	4604      	mov	r4, r0
    30dc:	b978      	cbnz	r0, 30fe <bma4_write_config_file+0x8e>
        {
            rslt = bma4_write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    30de:	462b      	mov	r3, r5
    30e0:	2201      	movs	r2, #1
    30e2:	f10d 0106 	add.w	r1, sp, #6
    30e6:	205c      	movs	r0, #92	; 0x5c
    30e8:	f01d ff48 	bl	20f7c <bma4_write_regs>
            if (rslt == BMA4_OK)
    30ec:	4604      	mov	r4, r0
    30ee:	b930      	cbnz	r0, 30fe <bma4_write_config_file+0x8e>
            {
                rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, (uint8_t *)stream_data, dev->read_write_len, dev);
    30f0:	8aaa      	ldrh	r2, [r5, #20]
    30f2:	462b      	mov	r3, r5
    30f4:	4639      	mov	r1, r7
    30f6:	205e      	movs	r0, #94	; 0x5e
    30f8:	f01d fdc3 	bl	20c82 <write_regs>
    30fc:	4604      	mov	r4, r0
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    30fe:	8aab      	ldrh	r3, [r5, #20]
    3100:	441e      	add	r6, r3
    3102:	b2b6      	uxth	r6, r6
    3104:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3106:	42b3      	cmp	r3, r6
    3108:	d8d0      	bhi.n	30ac <bma4_write_config_file+0x3c>
            if (rslt == BMA4_OK)
    310a:	2c00      	cmp	r4, #0
    310c:	d1cb      	bne.n	30a6 <bma4_write_config_file+0x36>
                config_load = 0x01;
    310e:	2601      	movs	r6, #1
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    3110:	462b      	mov	r3, r5
    3112:	4632      	mov	r2, r6
    3114:	a901      	add	r1, sp, #4
    3116:	2059      	movs	r0, #89	; 0x59
                config_load = 0x01;
    3118:	f88d 6004 	strb.w	r6, [sp, #4]
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    311c:	f01d ff2e 	bl	20f7c <bma4_write_regs>
                if (rslt == BMA4_OK)
    3120:	4604      	mov	r4, r0
    3122:	2800      	cmp	r0, #0
    3124:	d1bf      	bne.n	30a6 <bma4_write_config_file+0x36>
                    dev->delay_us(BMA4_MS_TO_US(150), dev->intf_ptr);
    3126:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3128:	6869      	ldr	r1, [r5, #4]
    312a:	4825      	ldr	r0, [pc, #148]	; (31c0 <bma4_write_config_file+0x150>)
    312c:	4798      	blx	r3
                    rslt = bma4_read_regs(BMA4_INTERNAL_STAT, &config_stream_status, 1, dev);
    312e:	4632      	mov	r2, r6
    3130:	462b      	mov	r3, r5
    3132:	f10d 0105 	add.w	r1, sp, #5
    3136:	202a      	movs	r0, #42	; 0x2a
    3138:	f01d fe74 	bl	20e24 <bma4_read_regs>
                    config_stream_status = config_stream_status & BMA4_CONFIG_STREAM_MESSAGE_MSK;
    313c:	f89d 6005 	ldrb.w	r6, [sp, #5]
    3140:	f006 060f 	and.w	r6, r6, #15
    3144:	f88d 6005 	strb.w	r6, [sp, #5]
                    if (rslt == BMA4_OK)
    3148:	4604      	mov	r4, r0
    314a:	2800      	cmp	r0, #0
    314c:	d1ab      	bne.n	30a6 <bma4_write_config_file+0x36>
                        if (config_stream_status != BMA4_ASIC_INITIALIZED)
    314e:	2e01      	cmp	r6, #1
    3150:	d132      	bne.n	31b8 <bma4_write_config_file+0x148>
                            rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    3152:	4629      	mov	r1, r5
    3154:	4630      	mov	r0, r6
    3156:	f01d feed 	bl	20f34 <bma4_set_advance_power_save>
                            if (rslt == BMA4_OK)
    315a:	4604      	mov	r4, r0
    315c:	2800      	cmp	r0, #0
    315e:	d1a2      	bne.n	30a6 <bma4_write_config_file+0x36>
    uint8_t asic_lsb = 0;
    3160:	f88d 0006 	strb.w	r0, [sp, #6]
    uint8_t asic_msb = 0;
    3164:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
    3168:	4628      	mov	r0, r5
    316a:	f01d fd7c 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
    316e:	4604      	mov	r4, r0
    3170:	2800      	cmp	r0, #0
    3172:	d198      	bne.n	30a6 <bma4_write_config_file+0x36>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    3174:	462b      	mov	r3, r5
    3176:	4632      	mov	r2, r6
    3178:	f10d 0106 	add.w	r1, sp, #6
    317c:	205b      	movs	r0, #91	; 0x5b
    317e:	f01d fda5 	bl	20ccc <read_regs>
        if (rslt == BMA4_OK)
    3182:	4604      	mov	r4, r0
    3184:	2800      	cmp	r0, #0
    3186:	d18e      	bne.n	30a6 <bma4_write_config_file+0x36>
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    3188:	462b      	mov	r3, r5
    318a:	4632      	mov	r2, r6
    318c:	f10d 0107 	add.w	r1, sp, #7
    3190:	205c      	movs	r0, #92	; 0x5c
    3192:	f01d fd9b 	bl	20ccc <read_regs>
        if (rslt == BMA4_OK)
    3196:	4604      	mov	r4, r0
    3198:	2800      	cmp	r0, #0
    319a:	d184      	bne.n	30a6 <bma4_write_config_file+0x36>
            dev->asic_data.asic_lsb = asic_lsb & 0x0F;
    319c:	f89d 3006 	ldrb.w	r3, [sp, #6]
    31a0:	f003 030f 	and.w	r3, r3, #15
    31a4:	75eb      	strb	r3, [r5, #23]
            dev->asic_data.asic_msb = asic_msb;
    31a6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    31aa:	762b      	strb	r3, [r5, #24]
    return rslt;
    31ac:	e77b      	b.n	30a6 <bma4_write_config_file+0x36>
            }
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    31ae:	f04f 34ff 	mov.w	r4, #4294967295
    31b2:	e7a4      	b.n	30fe <bma4_write_config_file+0x8e>
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    31b4:	4606      	mov	r6, r0
    31b6:	e7a5      	b.n	3104 <bma4_write_config_file+0x94>
                            rslt = BMA4_E_CONFIG_STREAM_ERROR;
    31b8:	f06f 0404 	mvn.w	r4, #4
    31bc:	e773      	b.n	30a6 <bma4_write_config_file+0x36>
    31be:	bf00      	nop
    31c0:	000249f0 	.word	0x000249f0

000031c4 <bma4_map_interrupt>:
{
    31c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    31c6:	461c      	mov	r4, r3
    uint8_t data[3] = { 0, 0, 0 };
    31c8:	4b21      	ldr	r3, [pc, #132]	; (3250 <bma4_map_interrupt+0x8c>)
{
    31ca:	4616      	mov	r6, r2
    uint8_t data[3] = { 0, 0, 0 };
    31cc:	f8b3 2003 	ldrh.w	r2, [r3, #3]
    31d0:	795b      	ldrb	r3, [r3, #5]
    31d2:	f88d 3006 	strb.w	r3, [sp, #6]
{
    31d6:	4607      	mov	r7, r0
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    31d8:	f245 7356 	movw	r3, #22358	; 0x5756
    rslt = null_pointer_check(dev);
    31dc:	4620      	mov	r0, r4
{
    31de:	460d      	mov	r5, r1
    uint8_t data[3] = { 0, 0, 0 };
    31e0:	f8ad 2004 	strh.w	r2, [sp, #4]
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    31e4:	f8ad 3000 	strh.w	r3, [sp]
    rslt = null_pointer_check(dev);
    31e8:	f01d fd3d 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
    31ec:	bb70      	cbnz	r0, 324c <bma4_map_interrupt+0x88>
        rslt = bma4_read_regs(BMA4_INT_MAP_1_ADDR, data, 3, dev);
    31ee:	4623      	mov	r3, r4
    31f0:	2203      	movs	r2, #3
    31f2:	a901      	add	r1, sp, #4
    31f4:	2056      	movs	r0, #86	; 0x56
    31f6:	f01d fe15 	bl	20e24 <bma4_read_regs>
        if (rslt == BMA4_OK)
    31fa:	bb38      	cbnz	r0, 324c <bma4_map_interrupt+0x88>
            if (enable == TRUE)
    31fc:	ab02      	add	r3, sp, #8
    31fe:	2e01      	cmp	r6, #1
    3200:	eb03 0607 	add.w	r6, r3, r7
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    3204:	ea4f 2215 	mov.w	r2, r5, lsr #8
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    3208:	bf17      	itett	ne
    320a:	f816 1c04 	ldrbne.w	r1, [r6, #-4]
                data[int_line] = (uint8_t)(int_map & (0x00FF));
    320e:	f806 5c04 	strbeq.w	r5, [r6, #-4]
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    3212:	ea21 0505 	bicne.w	r5, r1, r5
    3216:	f806 5c04 	strbne.w	r5, [r6, #-4]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    321a:	bf16      	itet	ne
    321c:	f89d 3006 	ldrbne.w	r3, [sp, #6]
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    3220:	f88d 2006 	strbeq.w	r2, [sp, #6]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    3224:	4393      	bicne	r3, r2
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    3226:	a901      	add	r1, sp, #4
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    3228:	bf18      	it	ne
    322a:	f88d 3006 	strbne.w	r3, [sp, #6]
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    322e:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    3232:	4623      	mov	r3, r4
    3234:	2201      	movs	r2, #1
    3236:	4439      	add	r1, r7
    3238:	f01d fea0 	bl	20f7c <bma4_write_regs>
            if (rslt == BMA4_OK)
    323c:	b930      	cbnz	r0, 324c <bma4_map_interrupt+0x88>
                rslt = bma4_write_regs(BMA4_INT_MAP_DATA_ADDR, &data[2], 1, dev);
    323e:	4623      	mov	r3, r4
    3240:	2201      	movs	r2, #1
    3242:	f10d 0106 	add.w	r1, sp, #6
    3246:	2058      	movs	r0, #88	; 0x58
    3248:	f01d fe98 	bl	20f7c <bma4_write_regs>
}
    324c:	b003      	add	sp, #12
    324e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    3250:	00027998 	.word	0x00027998

00003254 <bma456_write_config_file>:
 */
int8_t bma456_write_config_file(struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
    3254:	b190      	cbz	r0, 327c <bma456_write_config_file+0x28>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
    3256:	7803      	ldrb	r3, [r0, #0]
    3258:	2b16      	cmp	r3, #22
    325a:	d112      	bne.n	3282 <bma456_write_config_file+0x2e>
        {
            /* Configuration stream read/write length boundary
             * check
             */
            if ((dev->read_write_len >= BMA456_RD_WR_MIN_LEN) && (dev->read_write_len <= BMA456_RD_WR_MAX_LEN))
    325c:	8a83      	ldrh	r3, [r0, #20]
    325e:	1e9a      	subs	r2, r3, #2
    3260:	b292      	uxth	r2, r2
    3262:	f241 71fe 	movw	r1, #6142	; 0x17fe
    3266:	428a      	cmp	r2, r1
    3268:	d80e      	bhi.n	3288 <bma456_write_config_file+0x34>
            {
                /* Even or odd check */
                if ((dev->read_write_len % 2) != 0)
    326a:	07da      	lsls	r2, r3, #31
                {
                    dev->read_write_len = dev->read_write_len - 1;
    326c:	bf44      	itt	mi
    326e:	f103 33ff 	addmi.w	r3, r3, #4294967295
    3272:	8283      	strhmi	r3, [r0, #20]
                }

                /* Assign stream data */
                dev->config_file_ptr = bma456_config_file;
    3274:	4b06      	ldr	r3, [pc, #24]	; (3290 <bma456_write_config_file+0x3c>)
    3276:	6103      	str	r3, [r0, #16]
                rslt = bma4_write_config_file(dev);
    3278:	f7ff befa 	b.w	3070 <bma4_write_config_file>
            rslt = BMA4_E_INVALID_SENSOR;
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    327c:	f04f 30ff 	mov.w	r0, #4294967295
    3280:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
    3282:	f06f 0003 	mvn.w	r0, #3
    3286:	4770      	bx	lr
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
    3288:	f06f 0009 	mvn.w	r0, #9
    }

    return rslt;
}
    328c:	4770      	bx	lr
    328e:	bf00      	nop
    3290:	00029677 	.word	0x00029677

00003294 <max30102_i2c_write.constprop.0>:
#endif
    return ret;
}

/* MAX30102 i2c write function */
static uint16_t max30102_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    3294:	b530      	push	{r4, r5, lr}
    3296:	4605      	mov	r5, r0
    3298:	b085      	sub	sp, #20
    329a:	460c      	mov	r4, r1
    329c:	480a      	ldr	r0, [pc, #40]	; (32c8 <max30102_i2c_write.constprop.0+0x34>)
    329e:	f01c f999 	bl	1f5d4 <z_impl_device_get_binding>
	msg.len = num_bytes;
    32a2:	2202      	movs	r2, #2
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    32a4:	f88d 5000 	strb.w	r5, [sp]
    buffer[1] = data;
    32a8:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    32ac:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    32b0:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    32b2:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    32b6:	6883      	ldr	r3, [r0, #8]
    32b8:	2201      	movs	r2, #1
    32ba:	685c      	ldr	r4, [r3, #4]
    32bc:	a901      	add	r1, sp, #4
    32be:	2357      	movs	r3, #87	; 0x57
    32c0:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return write_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    32c2:	b2c0      	uxtb	r0, r0
    32c4:	b005      	add	sp, #20
    32c6:	bd30      	pop	{r4, r5, pc}
    32c8:	0002942f 	.word	0x0002942f

000032cc <max30102_i2c_read.constprop.0>:

/* MAX30102 i2c read function */
static uint16_t max30102_i2c_read(u8_t reg, u8_t *data, u16_t len)
    32cc:	b530      	push	{r4, r5, lr}
    32ce:	4605      	mov	r5, r0
    32d0:	b089      	sub	sp, #36	; 0x24
    32d2:	460c      	mov	r4, r1
    32d4:	480d      	ldr	r0, [pc, #52]	; (330c <max30102_i2c_read.constprop.0+0x40>)
    32d6:	f01c f97d 	bl	1f5d4 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    32da:	f10d 0207 	add.w	r2, sp, #7
    32de:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    32e0:	2201      	movs	r2, #1
	msg[1].len = num_read;
    32e2:	e9cd 4205 	strd	r4, r2, [sp, #20]
	msg[0].len = num_write;
    32e6:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    32e8:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    32ea:	2207      	movs	r2, #7
    32ec:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    32f0:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    32f4:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    32f8:	6883      	ldr	r3, [r0, #8]
    32fa:	2202      	movs	r2, #2
    32fc:	685c      	ldr	r4, [r3, #4]
    32fe:	a902      	add	r1, sp, #8
    3300:	2357      	movs	r3, #87	; 0x57
    3302:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    3304:	b2c0      	uxtb	r0, r0
    3306:	b009      	add	sp, #36	; 0x24
    3308:	bd30      	pop	{r4, r5, pc}
    330a:	bf00      	nop
    330c:	0002942f 	.word	0x0002942f

00003310 <max30102_reset>:
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes_fifo(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}

bool max30102_reset()
{
    3310:	b508      	push	{r3, lr}
    u16_t rslt = MAX3_OK;
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x40, 1);
    3312:	2140      	movs	r1, #64	; 0x40
    3314:	2009      	movs	r0, #9
    3316:	f7ff ffbd 	bl	3294 <max30102_i2c_write.constprop.0>
    if (rslt == MAX3_OK)
    331a:	b920      	cbnz	r0, 3326 <max30102_reset+0x16>
    {
        printk("RESET MAX30102 : OK \n ");
    331c:	4804      	ldr	r0, [pc, #16]	; (3330 <max30102_reset+0x20>)
    331e:	f01e fb4f 	bl	219c0 <printk>
        return true;
    3322:	2001      	movs	r0, #1
    else
    {
        printk("RESET MAX30102 : FAILED !!!\n ");
        return false;
    }
}
    3324:	bd08      	pop	{r3, pc}
        printk("RESET MAX30102 : FAILED !!!\n ");
    3326:	4803      	ldr	r0, [pc, #12]	; (3334 <max30102_reset+0x24>)
    3328:	f01e fb4a 	bl	219c0 <printk>
        return false;
    332c:	2000      	movs	r0, #0
    332e:	e7f9      	b.n	3324 <max30102_reset+0x14>
    3330:	0002ae77 	.word	0x0002ae77
    3334:	0002ae8e 	.word	0x0002ae8e

00003338 <init_max30102>:

u16_t init_max30102()
{
    3338:	b513      	push	{r0, r1, r4, lr}
    max30102_reset();
    333a:	f7ff ffe9 	bl	3310 <max30102_reset>
    333e:	2100      	movs	r1, #0
    3340:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3344:	f01c ffbc 	bl	202c0 <z_impl_k_sleep>
    k_msleep(1000);
    u8_t dummyData;
    max30102_i2c_read(0x00, &dummyData, 1);
    3348:	f10d 0106 	add.w	r1, sp, #6
    334c:	2000      	movs	r0, #0
    334e:	f7ff ffbd 	bl	32cc <max30102_i2c_read.constprop.0>
    u8_t chipId;
    u16_t rslt = 0x00;
    rslt = max30102_i2c_read(MAX30102_PART_ID, &chipId, 1);
    3352:	f10d 0107 	add.w	r1, sp, #7
    3356:	20ff      	movs	r0, #255	; 0xff
    3358:	f7ff ffb8 	bl	32cc <max30102_i2c_read.constprop.0>
    if (rslt == MAX3_OK)
    335c:	4604      	mov	r4, r0
    335e:	b950      	cbnz	r0, 3376 <init_max30102+0x3e>
    {
        if (chipId == I_AM_MAX30102)
    3360:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3364:	2b15      	cmp	r3, #21
        {
            printk("Communication with MAX30102 : OK\n");
    3366:	bf0c      	ite	eq
    3368:	4804      	ldreq	r0, [pc, #16]	; (337c <init_max30102+0x44>)
        }
        else
        {
            printk("Communication with MAX30102 : FAILED!!!\n");
    336a:	4805      	ldrne	r0, [pc, #20]	; (3380 <init_max30102+0x48>)
        }
    }
    else
    {
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    336c:	f01e fb28 	bl	219c0 <printk>
    }
    return rslt;
}
    3370:	4620      	mov	r0, r4
    3372:	b002      	add	sp, #8
    3374:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    3376:	4803      	ldr	r0, [pc, #12]	; (3384 <init_max30102+0x4c>)
    3378:	e7f8      	b.n	336c <init_max30102+0x34>
    337a:	bf00      	nop
    337c:	0002aeac 	.word	0x0002aeac
    3380:	0002aece 	.word	0x0002aece
    3384:	0002aef7 	.word	0x0002aef7

00003388 <max30102_read_fifo>:
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
    return (rslt);
}

u16_t max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
    3388:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    338c:	b090      	sub	sp, #64	; 0x40
    u16_t rslt = MAX3_OK;
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    338e:	2218      	movs	r2, #24
{
    3390:	4606      	mov	r6, r0
    3392:	460d      	mov	r5, r1
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    3394:	a804      	add	r0, sp, #16
    3396:	2100      	movs	r1, #0
    3398:	f020 ffdf 	bl	2435a <memset>
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    339c:	4b27      	ldr	r3, [pc, #156]	; (343c <max30102_read_fifo+0xb4>)
    *pun_ir_led = 0;
    339e:	2400      	movs	r4, #0
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    33a0:	6818      	ldr	r0, [r3, #0]
    33a2:	9002      	str	r0, [sp, #8]
    33a4:	889b      	ldrh	r3, [r3, #4]
    *pun_ir_led = 0;
    33a6:	602c      	str	r4, [r5, #0]
    *pun_red_led = 0;
    u8_t temp1;
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    33a8:	f10d 0106 	add.w	r1, sp, #6
    *pun_red_led = 0;
    33ac:	6034      	str	r4, [r6, #0]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    33ae:	2004      	movs	r0, #4
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    33b0:	f8ad 300c 	strh.w	r3, [sp, #12]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    33b4:	f7ff ff8a 	bl	32cc <max30102_i2c_read.constprop.0>
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    33b8:	f10d 0106 	add.w	r1, sp, #6
    33bc:	2006      	movs	r0, #6
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    33be:	af02      	add	r7, sp, #8
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    33c0:	f7ff ff84 	bl	32cc <max30102_i2c_read.constprop.0>
    33c4:	481e      	ldr	r0, [pc, #120]	; (3440 <max30102_read_fifo+0xb8>)
    33c6:	f01c f905 	bl	1f5d4 <z_impl_device_get_binding>
static inline int i2c_burst_read(const struct device *dev,
    33ca:	2207      	movs	r2, #7
	msg[0].buf = (uint8_t *)write_buf;
    33cc:	eb0d 0102 	add.w	r1, sp, r2
    33d0:	910a      	str	r1, [sp, #40]	; 0x28
	msg[0].len = num_write;
    33d2:	2101      	movs	r1, #1
    33d4:	910b      	str	r1, [sp, #44]	; 0x2c
	msg[1].len = num_read;
    33d6:	2106      	movs	r1, #6
    33d8:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    33dc:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	msg[1].buf = (uint8_t *)read_buf;
    33e0:	970d      	str	r7, [sp, #52]	; 0x34
	msg[1].len = num_read;
    33e2:	910e      	str	r1, [sp, #56]	; 0x38
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    33e4:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
	return api->transfer(dev, msgs, num_msgs, addr);
    33e8:	6883      	ldr	r3, [r0, #8]
    33ea:	2202      	movs	r2, #2
    33ec:	f8d3 8004 	ldr.w	r8, [r3, #4]
    33f0:	a90a      	add	r1, sp, #40	; 0x28
    33f2:	2357      	movs	r3, #87	; 0x57
    33f4:	47c0      	blx	r8
    max30102_i2c_read_fifo(MAX30102_FIFO_DATA_REG, temp_dat1, 6);
    for (int i = 0; i < 6; i++)
    33f6:	ab04      	add	r3, sp, #16
    33f8:	3401      	adds	r4, #1
        temp_dat[i] = temp_dat1[i];
    33fa:	f817 2b01 	ldrb.w	r2, [r7], #1
    33fe:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < 6; i++)
    3402:	2c06      	cmp	r4, #6
    3404:	d1f8      	bne.n	33f8 <max30102_read_fifo+0x70>
    *pun_ir_led = (temp_dat[0] << 16) + (temp_dat[1] << 8) + temp_dat[2];
    3406:	9b05      	ldr	r3, [sp, #20]
    3408:	9a04      	ldr	r2, [sp, #16]
    340a:	021b      	lsls	r3, r3, #8
    340c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    3410:	9a06      	ldr	r2, [sp, #24]
    3412:	4413      	add	r3, r2
    3414:	602b      	str	r3, [r5, #0]
    *pun_red_led = (temp_dat[3] << 16) + (temp_dat[4] << 8) + temp_dat[5];
    3416:	9b08      	ldr	r3, [sp, #32]
    3418:	9a07      	ldr	r2, [sp, #28]
    341a:	021b      	lsls	r3, r3, #8
    341c:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    3420:	9a09      	ldr	r2, [sp, #36]	; 0x24
    3422:	4413      	add	r3, r2
    *pun_red_led &= 0x03FFFF; //Mask MSB [23:18]
    3424:	f3c3 0311 	ubfx	r3, r3, #0, #18
    3428:	6033      	str	r3, [r6, #0]
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    342a:	682b      	ldr	r3, [r5, #0]
    return rslt;
}
    342c:	2000      	movs	r0, #0
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    342e:	f3c3 0311 	ubfx	r3, r3, #0, #18
    3432:	602b      	str	r3, [r5, #0]
}
    3434:	b010      	add	sp, #64	; 0x40
    3436:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    343a:	bf00      	nop
    343c:	0002799e 	.word	0x0002799e
    3440:	0002942f 	.word	0x0002942f

00003444 <first_data_read>:
int8_t ch_hr_valid;                   //indicator to show if the heart rate calculation is valid

uint32_t un_min, un_max, un_prev_data;

void first_data_read()
{
    3444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    un_min = 0x3FFFF;
    3448:	4f23      	ldr	r7, [pc, #140]	; (34d8 <first_data_read+0x94>)
    344a:	4b24      	ldr	r3, [pc, #144]	; (34dc <first_data_read+0x98>)
    un_max = 0;
    344c:	f8df b090 	ldr.w	fp, [pc, #144]	; 34e0 <first_data_read+0x9c>
    n_ir_buffer_length = BUFFER_SIZE; //*
    3450:	f8df 8090 	ldr.w	r8, [pc, #144]	; 34e4 <first_data_read+0xa0>
    3454:	4d24      	ldr	r5, [pc, #144]	; (34e8 <first_data_read+0xa4>)
    un_min = 0x3FFFF;
    3456:	603b      	str	r3, [r7, #0]
    un_max = 0;
    3458:	2400      	movs	r4, #0
    n_ir_buffer_length = BUFFER_SIZE; //*
    345a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    345e:	4e23      	ldr	r6, [pc, #140]	; (34ec <first_data_read+0xa8>)
    un_max = 0;
    3460:	f8cb 4000 	str.w	r4, [fp]
{
    3464:	b087      	sub	sp, #28
    n_ir_buffer_length = BUFFER_SIZE; //*
    3466:	f8c8 3000 	str.w	r3, [r8]
    int i = 0;
    for (i = 0; i < n_ir_buffer_length; i++)
    346a:	46a9      	mov	r9, r5
    {
        u8_t data = 0;
    346c:	46a2      	mov	sl, r4
    for (i = 0; i < n_ir_buffer_length; i++)
    346e:	f8d8 1000 	ldr.w	r1, [r8]
    3472:	42a1      	cmp	r1, r4
    3474:	dc11      	bgt.n	349a <first_data_read+0x56>
        // printf("red=");
        // printf("%d", aun_red_buffer[i]);
        // printf(",ir=");
        // printf("%d\n\r", aun_ir_buffer[i]);
    }
    un_prev_data = aun_red_buffer[i];
    3476:	4b1e      	ldr	r3, [pc, #120]	; (34f0 <first_data_read+0xac>)
    3478:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
    347c:	601a      	str	r2, [r3, #0]
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    347e:	4b1d      	ldr	r3, [pc, #116]	; (34f4 <first_data_read+0xb0>)
    3480:	9302      	str	r3, [sp, #8]
    3482:	4b1d      	ldr	r3, [pc, #116]	; (34f8 <first_data_read+0xb4>)
    3484:	9301      	str	r3, [sp, #4]
    3486:	4b1d      	ldr	r3, [pc, #116]	; (34fc <first_data_read+0xb8>)
    3488:	9300      	str	r3, [sp, #0]
    348a:	4a17      	ldr	r2, [pc, #92]	; (34e8 <first_data_read+0xa4>)
    348c:	4b1c      	ldr	r3, [pc, #112]	; (3500 <first_data_read+0xbc>)
    348e:	4817      	ldr	r0, [pc, #92]	; (34ec <first_data_read+0xa8>)
    3490:	f000 fa36 	bl	3900 <maxim_heart_rate_and_oxygen_saturation>
}
    3494:	b007      	add	sp, #28
    3496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u8_t data = 0;
    349a:	f88d a017 	strb.w	sl, [sp, #23]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    349e:	f10d 0117 	add.w	r1, sp, #23
    34a2:	2000      	movs	r0, #0
    34a4:	f7ff ff12 	bl	32cc <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    34a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    34ac:	2b40      	cmp	r3, #64	; 0x40
    34ae:	d1f6      	bne.n	349e <first_data_read+0x5a>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i)); //read from MAX30102 FIFO
    34b0:	4631      	mov	r1, r6
    34b2:	4628      	mov	r0, r5
    34b4:	f7ff ff68 	bl	3388 <max30102_read_fifo>
        if (un_min > aun_red_buffer[i])
    34b8:	f855 3b04 	ldr.w	r3, [r5], #4
    34bc:	683a      	ldr	r2, [r7, #0]
    34be:	4293      	cmp	r3, r2
        if (un_max < aun_red_buffer[i])
    34c0:	f8db 2000 	ldr.w	r2, [fp]
            un_min = aun_red_buffer[i]; //update signal min
    34c4:	bf38      	it	cc
    34c6:	603b      	strcc	r3, [r7, #0]
        if (un_max < aun_red_buffer[i])
    34c8:	4293      	cmp	r3, r2
            un_max = aun_red_buffer[i]; //update signal max
    34ca:	bf88      	it	hi
    34cc:	f8cb 3000 	strhi.w	r3, [fp]
    for (i = 0; i < n_ir_buffer_length; i++)
    34d0:	3401      	adds	r4, #1
    34d2:	3604      	adds	r6, #4
    34d4:	e7cb      	b.n	346e <first_data_read+0x2a>
    34d6:	bf00      	nop
    34d8:	2000bd4c 	.word	0x2000bd4c
    34dc:	0003ffff 	.word	0x0003ffff
    34e0:	2000bd48 	.word	0x2000bd48
    34e4:	2000bd40 	.word	0x2000bd40
    34e8:	2000b56c 	.word	0x2000b56c
    34ec:	2000ad9c 	.word	0x2000ad9c
    34f0:	2000bd50 	.word	0x2000bd50
    34f4:	2000ed77 	.word	0x2000ed77
    34f8:	2000bd3c 	.word	0x2000bd3c
    34fc:	2000ed78 	.word	0x2000ed78
    3500:	2000bd44 	.word	0x2000bd44

00003504 <read_heart_rate_spio2>:

void read_heart_rate_spio2(int *rate, int *spo2, bool *valid_hr, bool *valid_spo2)
{
    3504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i = 0;
    un_min = 0x3FFFF;
    3508:	4d3f      	ldr	r5, [pc, #252]	; (3608 <read_heart_rate_spio2+0x104>)
    350a:	f8df 9100 	ldr.w	r9, [pc, #256]	; 360c <read_heart_rate_spio2+0x108>
    350e:	f8df c100 	ldr.w	ip, [pc, #256]	; 3610 <read_heart_rate_spio2+0x10c>
{
    3512:	b089      	sub	sp, #36	; 0x24
    3514:	460e      	mov	r6, r1
    un_max = 0;
    3516:	493f      	ldr	r1, [pc, #252]	; (3614 <read_heart_rate_spio2+0x110>)
{
    3518:	e9cd 2304 	strd	r2, r3, [sp, #16]
    un_max = 0;
    351c:	2300      	movs	r3, #0
    un_min = 0x3FFFF;
    351e:	4a3e      	ldr	r2, [pc, #248]	; (3618 <read_heart_rate_spio2+0x114>)
    3520:	602a      	str	r2, [r5, #0]
{
    3522:	4607      	mov	r7, r0
    un_max = 0;
    3524:	600b      	str	r3, [r1, #0]
    3526:	46ce      	mov	lr, r9
    3528:	f44f 74f5 	mov.w	r4, #490	; 0x1ea
    352c:	4618      	mov	r0, r3
    352e:	469a      	mov	sl, r3

    //dumping the first 100 sets of samples in the memory and shift the last 400 sets of samples to the top
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    {
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    3530:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    3534:	f8de 8028 	ldr.w	r8, [lr, #40]	; 0x28
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    3538:	f84c 1b04 	str.w	r1, [ip], #4

        //update the signal min and max
        if (un_min > aun_red_buffer[i])
    353c:	4291      	cmp	r1, r2
    353e:	bf3c      	itt	cc
    3540:	460a      	movcc	r2, r1
    3542:	f04f 0a01 	movcc.w	sl, #1
            un_min = aun_red_buffer[i];
        if (un_max < aun_red_buffer[i])
    3546:	4281      	cmp	r1, r0
    3548:	bf84      	itt	hi
    354a:	4608      	movhi	r0, r1
    354c:	2301      	movhi	r3, #1
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    354e:	3c01      	subs	r4, #1
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    3550:	f84e 8b04 	str.w	r8, [lr], #4
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    3554:	d1ec      	bne.n	3530 <read_heart_rate_spio2+0x2c>
    3556:	f1ba 0f00 	cmp.w	sl, #0
    355a:	d000      	beq.n	355e <read_heart_rate_spio2+0x5a>
    355c:	602a      	str	r2, [r5, #0]
    355e:	b10b      	cbz	r3, 3564 <read_heart_rate_spio2+0x60>
    3560:	4b2c      	ldr	r3, [pc, #176]	; (3614 <read_heart_rate_spio2+0x110>)
    3562:	6018      	str	r0, [r3, #0]
    3564:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 361c <read_heart_rate_spio2+0x118>
    }

    //take 100 sets of samples before calculating the heart rate.
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    {
        un_prev_data = aun_red_buffer[i - 1];
    3568:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 3620 <read_heart_rate_spio2+0x11c>
        // printf("%d", aun_ir_buffer[i]);
        // printf(", HR=%d, ", n_heart_rate);
        // printf("HRvalid=%d, ", ch_hr_valid);
        // printf("SpO2=%d, ", n_sp02);
        // printf("SPO2Valid=%d\n\r", ch_spo2_valid);
        *rate = n_heart_rate;
    356c:	4d2d      	ldr	r5, [pc, #180]	; (3624 <read_heart_rate_spio2+0x120>)
    356e:	f44f 64f5 	mov.w	r4, #1960	; 0x7a8
        u8_t data = 0;
    3572:	f04f 0b00 	mov.w	fp, #0
        un_prev_data = aun_red_buffer[i - 1];
    3576:	f858 3b04 	ldr.w	r3, [r8], #4
    357a:	f8ca 3000 	str.w	r3, [sl]
        u8_t data = 0;
    357e:	f88d b01f 	strb.w	fp, [sp, #31]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    3582:	f10d 011f 	add.w	r1, sp, #31
    3586:	2000      	movs	r0, #0
    3588:	f7ff fea0 	bl	32cc <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    358c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3590:	2b40      	cmp	r3, #64	; 0x40
    3592:	d1f6      	bne.n	3582 <read_heart_rate_spio2+0x7e>
        max30102_i2c_read(MAX30102_FIFO_W_POINTER, &data, 1);
    3594:	f10d 011f 	add.w	r1, sp, #31
    3598:	2004      	movs	r0, #4
    359a:	f7ff fe97 	bl	32cc <max30102_i2c_read.constprop.0>
        max30102_i2c_read(MAX30102_FIFO_R_POINTER, &data, 1);
    359e:	f10d 011f 	add.w	r1, sp, #31
    35a2:	2006      	movs	r0, #6
    35a4:	f7ff fe92 	bl	32cc <max30102_i2c_read.constprop.0>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));
    35a8:	eb09 0104 	add.w	r1, r9, r4
    35ac:	4640      	mov	r0, r8
    35ae:	f7ff feeb 	bl	3388 <max30102_read_fifo>
        *rate = n_heart_rate;
    35b2:	682b      	ldr	r3, [r5, #0]
    35b4:	603b      	str	r3, [r7, #0]
        *spo2 = n_sp02;
    35b6:	4b1c      	ldr	r3, [pc, #112]	; (3628 <read_heart_rate_spio2+0x124>)
        if (ch_hr_valid == 1)
    35b8:	491c      	ldr	r1, [pc, #112]	; (362c <read_heart_rate_spio2+0x128>)
        *spo2 = n_sp02;
    35ba:	681a      	ldr	r2, [r3, #0]
    35bc:	6032      	str	r2, [r6, #0]
        if (ch_hr_valid == 1)
    35be:	f991 2000 	ldrsb.w	r2, [r1]
    35c2:	1e50      	subs	r0, r2, #1
    35c4:	4242      	negs	r2, r0
    35c6:	4142      	adcs	r2, r0
    35c8:	9804      	ldr	r0, [sp, #16]
    35ca:	7002      	strb	r2, [r0, #0]
            *valid_hr = true;
        else
            *valid_hr = false;
        if (ch_spo2_valid == 1)
    35cc:	4818      	ldr	r0, [pc, #96]	; (3630 <read_heart_rate_spio2+0x12c>)
    35ce:	f990 2000 	ldrsb.w	r2, [r0]
    35d2:	f102 3cff 	add.w	ip, r2, #4294967295
    35d6:	f1dc 0200 	rsbs	r2, ip, #0
    35da:	eb42 020c 	adc.w	r2, r2, ip
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    35de:	3404      	adds	r4, #4
        if (ch_spo2_valid == 1)
    35e0:	f8dd c014 	ldr.w	ip, [sp, #20]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    35e4:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
        if (ch_spo2_valid == 1)
    35e8:	f88c 2000 	strb.w	r2, [ip]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    35ec:	d1c3      	bne.n	3576 <read_heart_rate_spio2+0x72>
            *valid_spo2 = true;
        else
            *valid_spo2 = false;
    }
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    35ee:	e9cd 5101 	strd	r5, r1, [sp, #4]
    35f2:	4910      	ldr	r1, [pc, #64]	; (3634 <read_heart_rate_spio2+0x130>)
    35f4:	9000      	str	r0, [sp, #0]
    35f6:	4a06      	ldr	r2, [pc, #24]	; (3610 <read_heart_rate_spio2+0x10c>)
    35f8:	6809      	ldr	r1, [r1, #0]
    35fa:	4804      	ldr	r0, [pc, #16]	; (360c <read_heart_rate_spio2+0x108>)
    35fc:	f000 f980 	bl	3900 <maxim_heart_rate_and_oxygen_saturation>
    3600:	b009      	add	sp, #36	; 0x24
    3602:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3606:	bf00      	nop
    3608:	2000bd4c 	.word	0x2000bd4c
    360c:	2000ad9c 	.word	0x2000ad9c
    3610:	2000b56c 	.word	0x2000b56c
    3614:	2000bd48 	.word	0x2000bd48
    3618:	0003ffff 	.word	0x0003ffff
    361c:	2000bd10 	.word	0x2000bd10
    3620:	2000bd50 	.word	0x2000bd50
    3624:	2000bd3c 	.word	0x2000bd3c
    3628:	2000bd44 	.word	0x2000bd44
    362c:	2000ed77 	.word	0x2000ed77
    3630:	2000ed78 	.word	0x2000ed78
    3634:	2000bd40 	.word	0x2000bd40

00003638 <button_pressed>:
static struct gpio_callback button_cb_data;

void button_pressed(struct device *dev, struct gpio_callback *cb,
                    u32_t pins)
{
    printk("Device Detached\n");
    3638:	4801      	ldr	r0, [pc, #4]	; (3640 <button_pressed+0x8>)
    363a:	f01e b9c1 	b.w	219c0 <printk>
    363e:	bf00      	nop
    3640:	0002af2b 	.word	0x0002af2b

00003644 <init_latch>:

struct device *globalButton;
struct device *globalLed;

void init_latch()
{
    3644:	b570      	push	{r4, r5, r6, lr}
    3646:	4828      	ldr	r0, [pc, #160]	; (36e8 <init_latch+0xa4>)
    3648:	f01b ffc4 	bl	1f5d4 <z_impl_device_get_binding>
    struct device *button;
    struct device *led;
    int ret;

    button = device_get_binding(SW0_GPIO_LABEL);
    if (button == NULL)
    364c:	4604      	mov	r4, r0
    364e:	b928      	cbnz	r0, 365c <init_latch+0x18>

    led = initialize_led();
    globalButton=button;
    globalLed=led;

}
    3650:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    3654:	4924      	ldr	r1, [pc, #144]	; (36e8 <init_latch+0xa4>)
    3656:	4825      	ldr	r0, [pc, #148]	; (36ec <init_latch+0xa8>)
    3658:	f01e b9b2 	b.w	219c0 <printk>
    ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    365c:	2107      	movs	r1, #7
    365e:	f240 1211 	movw	r2, #273	; 0x111
    3662:	f01d fea0 	bl	213a6 <gpio_pin_configure>
    if (ret != 0)
    3666:	4601      	mov	r1, r0
    3668:	b130      	cbz	r0, 3678 <init_latch+0x34>
        printk("Error %d: failed to configure %s pin %d\n",
    366a:	4a1f      	ldr	r2, [pc, #124]	; (36e8 <init_latch+0xa4>)
    366c:	4820      	ldr	r0, [pc, #128]	; (36f0 <init_latch+0xac>)
    366e:	2307      	movs	r3, #7
}
    3670:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    3674:	f01e b9a4 	b.w	219c0 <printk>
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
    3678:	68a3      	ldr	r3, [r4, #8]
    367a:	2107      	movs	r1, #7
    367c:	699d      	ldr	r5, [r3, #24]
    367e:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    3682:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    3686:	4620      	mov	r0, r4
    3688:	47a8      	blx	r5
    if (ret != 0)
    368a:	4601      	mov	r1, r0
    368c:	b118      	cbz	r0, 3696 <init_latch+0x52>
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    368e:	4a16      	ldr	r2, [pc, #88]	; (36e8 <init_latch+0xa4>)
    3690:	4818      	ldr	r0, [pc, #96]	; (36f4 <init_latch+0xb0>)
    3692:	2307      	movs	r3, #7
    3694:	e7ec      	b.n	3670 <init_latch+0x2c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    3696:	4918      	ldr	r1, [pc, #96]	; (36f8 <init_latch+0xb4>)
    3698:	4b18      	ldr	r3, [pc, #96]	; (36fc <init_latch+0xb8>)
    369a:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    369c:	2380      	movs	r3, #128	; 0x80
    369e:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    36a0:	68a3      	ldr	r3, [r4, #8]
    36a2:	69db      	ldr	r3, [r3, #28]
    36a4:	b113      	cbz	r3, 36ac <init_latch+0x68>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    36a6:	2201      	movs	r2, #1
    36a8:	4620      	mov	r0, r4
    36aa:	4798      	blx	r3
    36ac:	4814      	ldr	r0, [pc, #80]	; (3700 <init_latch+0xbc>)
    36ae:	f01b ff91 	bl	1f5d4 <z_impl_device_get_binding>
{
    struct device *led;
    int ret;

    led = device_get_binding(LED0_GPIO_LABEL);
    if (led == NULL)
    36b2:	4605      	mov	r5, r0
    36b4:	b940      	cbnz	r0, 36c8 <init_latch+0x84>
    {
        printk("Didn't find LED device %s\n", LED0_GPIO_LABEL);
    36b6:	4912      	ldr	r1, [pc, #72]	; (3700 <init_latch+0xbc>)
    36b8:	4812      	ldr	r0, [pc, #72]	; (3704 <init_latch+0xc0>)
    36ba:	f01e f981 	bl	219c0 <printk>
    globalButton=button;
    36be:	4b12      	ldr	r3, [pc, #72]	; (3708 <init_latch+0xc4>)
    36c0:	601c      	str	r4, [r3, #0]
    globalLed=led;
    36c2:	4b12      	ldr	r3, [pc, #72]	; (370c <init_latch+0xc8>)
    36c4:	601d      	str	r5, [r3, #0]
}
    36c6:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    }

    ret = gpio_pin_configure(led, LED0_GPIO_PIN, LED0_GPIO_FLAGS);
    36c8:	210a      	movs	r1, #10
    36ca:	f44f 7200 	mov.w	r2, #512	; 0x200
    36ce:	f01d fe6a 	bl	213a6 <gpio_pin_configure>
    if (ret != 0)
    36d2:	4601      	mov	r1, r0
    36d4:	2800      	cmp	r0, #0
    36d6:	d0f2      	beq.n	36be <init_latch+0x7a>
    {
        printk("Error %d: failed to configure LED device %s pin %d\n",
    36d8:	4a09      	ldr	r2, [pc, #36]	; (3700 <init_latch+0xbc>)
    36da:	480d      	ldr	r0, [pc, #52]	; (3710 <init_latch+0xcc>)
    36dc:	230a      	movs	r3, #10
    36de:	f01e f96f 	bl	219c0 <printk>
               ret, LED0_GPIO_LABEL, LED0_GPIO_PIN);
        return NULL;
    36e2:	2500      	movs	r5, #0
    36e4:	e7eb      	b.n	36be <init_latch+0x7a>
    36e6:	bf00      	nop
    36e8:	0002af3c 	.word	0x0002af3c
    36ec:	0002af43 	.word	0x0002af43
    36f0:	0002af61 	.word	0x0002af61
    36f4:	0002af8a 	.word	0x0002af8a
    36f8:	2000bd54 	.word	0x2000bd54
    36fc:	00003639 	.word	0x00003639
    3700:	0002afc0 	.word	0x0002afc0
    3704:	0002afc7 	.word	0x0002afc7
    3708:	2000bd60 	.word	0x2000bd60
    370c:	2000bd64 	.word	0x2000bd64
    3710:	0002afe2 	.word	0x0002afe2

00003714 <detect_latch>:
    return match_led_to_button(globalButton,globalLed);
    3714:	4b02      	ldr	r3, [pc, #8]	; (3720 <detect_latch+0xc>)
    3716:	6819      	ldr	r1, [r3, #0]
    3718:	4b02      	ldr	r3, [pc, #8]	; (3724 <detect_latch+0x10>)
    371a:	6818      	ldr	r0, [r3, #0]
    371c:	f01d be56 	b.w	213cc <match_led_to_button>
    3720:	2000bd64 	.word	0x2000bd64
    3724:	2000bd60 	.word	0x2000bd60

00003728 <max30208_i2c_write.constprop.0>:
static uint16_t max30208_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    3728:	b530      	push	{r4, r5, lr}
    372a:	4605      	mov	r5, r0
    372c:	b085      	sub	sp, #20
    372e:	460c      	mov	r4, r1
    3730:	480a      	ldr	r0, [pc, #40]	; (375c <max30208_i2c_write.constprop.0+0x34>)
    3732:	f01b ff4f 	bl	1f5d4 <z_impl_device_get_binding>
	msg.len = num_bytes;
    3736:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    3738:	f88d 5000 	strb.w	r5, [sp]
    ret = i2c_reg_write_byte(i2c_dev, slaveAddr, addr, data);
    373c:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    3740:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    3744:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3746:	f88d 300c 	strb.w	r3, [sp, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
    374a:	2350      	movs	r3, #80	; 0x50
    374c:	2201      	movs	r2, #1
    374e:	a901      	add	r1, sp, #4
    3750:	f01d fe5f 	bl	21412 <z_impl_i2c_transfer>
}
    3754:	b2c0      	uxtb	r0, r0
    3756:	b005      	add	sp, #20
    3758:	bd30      	pop	{r4, r5, pc}
    375a:	bf00      	nop
    375c:	0002942f 	.word	0x0002942f

00003760 <max30208_i2c_read.constprop.0>:
static uint16_t max30208_i2c_read(u8_t reg, u8_t *data, u16_t len)
    3760:	b530      	push	{r4, r5, lr}
    3762:	4605      	mov	r5, r0
    3764:	b089      	sub	sp, #36	; 0x24
    3766:	460c      	mov	r4, r1
    3768:	480c      	ldr	r0, [pc, #48]	; (379c <max30208_i2c_read.constprop.0+0x3c>)
    376a:	f01b ff33 	bl	1f5d4 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    376e:	f10d 0307 	add.w	r3, sp, #7
    3772:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    3774:	2301      	movs	r3, #1
	msg[1].len = num_read;
    3776:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    377a:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    377c:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    377e:	2307      	movs	r3, #7
    3780:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3784:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3788:	f88d 301c 	strb.w	r3, [sp, #28]
    378c:	2350      	movs	r3, #80	; 0x50
    378e:	2202      	movs	r2, #2
    3790:	a902      	add	r1, sp, #8
    3792:	f01d fe3e 	bl	21412 <z_impl_i2c_transfer>
}
    3796:	b2c0      	uxtb	r0, r0
    3798:	b009      	add	sp, #36	; 0x24
    379a:	bd30      	pop	{r4, r5, pc}
    379c:	0002942f 	.word	0x0002942f

000037a0 <mpu6050_i2c_write.constprop.0.isra.0>:



/* MPU6050 i2c write function */
static uint16_t mpu6050_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    37a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    37a2:	4604      	mov	r4, r0
    37a4:	480a      	ldr	r0, [pc, #40]	; (37d0 <mpu6050_i2c_write.constprop.0.isra.0+0x30>)
    37a6:	f01b ff15 	bl	1f5d4 <z_impl_device_get_binding>
	uint8_t tx_buf[2] = {reg_addr, value};
    37aa:	2300      	movs	r3, #0
    37ac:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
    37b0:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    37b2:	f88d 4000 	strb.w	r4, [sp]
	msg.buf = (uint8_t *)buf;
    37b6:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    37ba:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    37bc:	f88d 300c 	strb.w	r3, [sp, #12]
    37c0:	2368      	movs	r3, #104	; 0x68
    37c2:	2201      	movs	r2, #1
    37c4:	a901      	add	r1, sp, #4
    37c6:	f01d fe24 	bl	21412 <z_impl_i2c_transfer>
	} else {
		printk("Wrote 0xAE to address 0x00.\n");
	}
    #endif
    return ret;
}
    37ca:	b004      	add	sp, #16
    37cc:	bd10      	pop	{r4, pc}
    37ce:	bf00      	nop
    37d0:	0002942f 	.word	0x0002942f

000037d4 <mpu6050_i2c_read.constprop.0>:

/* MPU6050 i2c read function */
static uint16_t mpu6050_i2c_read(u8_t reg, u8_t *data, u16_t len)
    37d4:	b530      	push	{r4, r5, lr}
    37d6:	4605      	mov	r5, r0
    37d8:	b089      	sub	sp, #36	; 0x24
    37da:	460c      	mov	r4, r1
    37dc:	480c      	ldr	r0, [pc, #48]	; (3810 <mpu6050_i2c_read.constprop.0+0x3c>)
    37de:	f01b fef9 	bl	1f5d4 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    37e2:	f10d 0307 	add.w	r3, sp, #7
    37e6:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    37e8:	2301      	movs	r3, #1
	msg[1].len = num_read;
    37ea:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    37ee:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    37f0:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    37f2:	2307      	movs	r3, #7
    37f4:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    37f8:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    37fc:	f88d 301c 	strb.w	r3, [sp, #28]
    3800:	2368      	movs	r3, #104	; 0x68
    3802:	2202      	movs	r2, #2
    3804:	a902      	add	r1, sp, #8
    3806:	f01d fe04 	bl	21412 <z_impl_i2c_transfer>
	} else {
		printk("Read 0x%X from address %X.\n", *data, reg);
	}
    #endif
    return ret;
}
    380a:	b2c0      	uxtb	r0, r0
    380c:	b009      	add	sp, #36	; 0x24
    380e:	bd30      	pop	{r4, r5, pc}
    3810:	0002942f 	.word	0x0002942f

00003814 <init_max30208>:
{
    3814:	b513      	push	{r0, r1, r4, lr}
    rslt = max30208_i2c_read(MAX30208_PART_ID, &chipId, 1);
    3816:	20ff      	movs	r0, #255	; 0xff
    3818:	f10d 0107 	add.w	r1, sp, #7
    381c:	f7ff ffa0 	bl	3760 <max30208_i2c_read.constprop.0>
    if (rslt == MAX_OK)
    3820:	4604      	mov	r4, r0
    3822:	b950      	cbnz	r0, 383a <init_max30208+0x26>
        if (chipId == I_AM_MAX30208)
    3824:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3828:	2b30      	cmp	r3, #48	; 0x30
            printk("Communication with MAX30208 : OK\n");
    382a:	bf0c      	ite	eq
    382c:	4805      	ldreq	r0, [pc, #20]	; (3844 <init_max30208+0x30>)
            printk("Communication with MAX30208 : FAILED!!!\n");
    382e:	4806      	ldrne	r0, [pc, #24]	; (3848 <init_max30208+0x34>)
    3830:	f01e f8c6 	bl	219c0 <printk>
}
    3834:	4620      	mov	r0, r4
    3836:	b002      	add	sp, #8
    3838:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30208 : FAILED!!!\n I2C error %d\n", rslt);
    383a:	4601      	mov	r1, r0
    383c:	4803      	ldr	r0, [pc, #12]	; (384c <init_max30208+0x38>)
    383e:	f01e f8bf 	bl	219c0 <printk>
    3842:	e7f7      	b.n	3834 <init_max30208+0x20>
    3844:	0002b016 	.word	0x0002b016
    3848:	0002b038 	.word	0x0002b038
    384c:	0002b061 	.word	0x0002b061

00003850 <configure_max30208>:
{
    3850:	b510      	push	{r4, lr}
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    3852:	2100      	movs	r1, #0
    3854:	2001      	movs	r0, #1
    3856:	f7ff ff67 	bl	3728 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    385a:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    385c:	4604      	mov	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    385e:	2004      	movs	r0, #4
    3860:	f7ff ff62 	bl	3728 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3864:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3866:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3868:	2005      	movs	r0, #5
    386a:	f7ff ff5d 	bl	3728 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    386e:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3870:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3872:	2100      	movs	r1, #0
    3874:	2006      	movs	r0, #6
    3876:	f7ff ff57 	bl	3728 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    387a:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    387c:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    387e:	210f      	movs	r1, #15
    3880:	2009      	movs	r0, #9
    3882:	f7ff ff51 	bl	3728 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3886:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    3888:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    388a:	211a      	movs	r1, #26
    388c:	200a      	movs	r0, #10
    388e:	f7ff ff4b 	bl	3728 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    3892:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    3894:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    3896:	21c1      	movs	r1, #193	; 0xc1
    3898:	2014      	movs	r0, #20
    389a:	f7ff ff45 	bl	3728 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    389e:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    38a0:	4304      	orrs	r4, r0
    38a2:	b2a4      	uxth	r4, r4
    if (rslt == MAX_OK)
    38a4:	b924      	cbnz	r4, 38b0 <configure_max30208+0x60>
        printk("CONFIGURING MAX30208 : OK\n");
    38a6:	4803      	ldr	r0, [pc, #12]	; (38b4 <configure_max30208+0x64>)
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    38a8:	f01e f88a 	bl	219c0 <printk>
}
    38ac:	4620      	mov	r0, r4
    38ae:	bd10      	pop	{r4, pc}
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    38b0:	4801      	ldr	r0, [pc, #4]	; (38b8 <configure_max30208+0x68>)
    38b2:	e7f9      	b.n	38a8 <configure_max30208+0x58>
    38b4:	0002b098 	.word	0x0002b098
    38b8:	0002b0b3 	.word	0x0002b0b3

000038bc <configure_mpu6050>:

/*** Config MPU6050 ***/
void configure_mpu6050()
{
    38bc:	b507      	push	{r0, r1, r2, lr}
    int rslt;
	mpu6050_i2c_write(0x6B, 0x00, 1);	//Setting power
    38be:	206b      	movs	r0, #107	; 0x6b
    38c0:	f7ff ff6e 	bl	37a0 <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x1B, 0x00, 1);	//Setting Gyro
    38c4:	201b      	movs	r0, #27
    38c6:	f7ff ff6b 	bl	37a0 <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x38, 0x00, 1);	//Setting Accl
    38ca:	2038      	movs	r0, #56	; 0x38
    38cc:	f7ff ff68 	bl	37a0 <mpu6050_i2c_write.constprop.0.isra.0>
    
    mpu6050_i2c_read(0x75, &rslt, 1);   //Reading Who_AM_I register of MPU6050 
    38d0:	a901      	add	r1, sp, #4
    38d2:	2075      	movs	r0, #117	; 0x75
    38d4:	f7ff ff7e 	bl	37d4 <mpu6050_i2c_read.constprop.0>
    if(rslt == 0x68)
    38d8:	9b01      	ldr	r3, [sp, #4]
    38da:	2b68      	cmp	r3, #104	; 0x68
        printk("CONFIGURING MPU6050 : OK\n");
    38dc:	bf0c      	ite	eq
    38de:	4803      	ldreq	r0, [pc, #12]	; (38ec <configure_mpu6050+0x30>)
    else
      printk("CONFIGURING MPU6050 : FAILED !!!\n");  
    38e0:	4803      	ldrne	r0, [pc, #12]	; (38f0 <configure_mpu6050+0x34>)
    38e2:	f01e f86d 	bl	219c0 <printk>
}
    38e6:	b003      	add	sp, #12
    38e8:	f85d fb04 	ldr.w	pc, [sp], #4
    38ec:	0002b0d5 	.word	0x0002b0d5
    38f0:	0002b0ef 	.word	0x0002b0ef

000038f4 <getAdcDevice>:
    38f4:	4801      	ldr	r0, [pc, #4]	; (38fc <getAdcDevice+0x8>)
    38f6:	f01b be6d 	b.w	1f5d4 <z_impl_device_get_binding>
    38fa:	bf00      	nop
    38fc:	0002b111 	.word	0x0002b111

00003900 <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
    3900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3904:	b0bd      	sub	sp, #244	; 0xf4
    3906:	4690      	mov	r8, r2
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5], n_ratio_average;
    int32_t n_nume, n_denom;
    // remove DC of ir signal
    un_ir_mean = 0;
    for (k = 0; k < n_ir_buffer_length; k++)
    3908:	2200      	movs	r2, #0
{
    390a:	9305      	str	r3, [sp, #20]
    390c:	4606      	mov	r6, r0
    390e:	460d      	mov	r5, r1
    un_ir_mean = 0;
    3910:	4613      	mov	r3, r2
    for (k = 0; k < n_ir_buffer_length; k++)
    3912:	42aa      	cmp	r2, r5
    3914:	db45      	blt.n	39a2 <maxim_heart_rate_and_oxygen_saturation+0xa2>
        un_ir_mean += pun_ir_buffer[k];
    un_ir_mean = un_ir_mean / n_ir_buffer_length;
    3916:	fbb3 f3f5 	udiv	r3, r3, r5
    for (k = 0; k < n_ir_buffer_length; k++)
    391a:	4c9b      	ldr	r4, [pc, #620]	; (3b88 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    391c:	2200      	movs	r2, #0
    391e:	4620      	mov	r0, r4
    3920:	42aa      	cmp	r2, r5
    3922:	db43      	blt.n	39ac <maxim_heart_rate_and_oxygen_saturation+0xac>
    3924:	4a98      	ldr	r2, [pc, #608]	; (3b88 <maxim_heart_rate_and_oxygen_saturation+0x288>)
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;

    // 4 pt Moving Average
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3926:	2100      	movs	r1, #0
    {
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    3928:	6817      	ldr	r7, [r2, #0]
    392a:	f852 3f04 	ldr.w	r3, [r2, #4]!
    392e:	6850      	ldr	r0, [r2, #4]
    3930:	4403      	add	r3, r0
    3932:	6890      	ldr	r0, [r2, #8]
    3934:	443b      	add	r3, r7
        an_x[k] = n_denom / (int32_t)4;
    3936:	181b      	adds	r3, r3, r0
    3938:	bf48      	it	mi
    393a:	3303      	addmi	r3, #3
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    393c:	3101      	adds	r1, #1
        an_x[k] = n_denom / (int32_t)4;
    393e:	109b      	asrs	r3, r3, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3940:	f5b1 7ff8 	cmp.w	r1, #496	; 0x1f0
        an_x[k] = n_denom / (int32_t)4;
    3944:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3948:	d1ee      	bne.n	3928 <maxim_heart_rate_and_oxygen_saturation+0x28>
    394a:	4890      	ldr	r0, [pc, #576]	; (3b8c <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    394c:	4f8e      	ldr	r7, [pc, #568]	; (3b88 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    394e:	4684      	mov	ip, r0
    }

    // get difference of smoothed IR signal

    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3950:	2200      	movs	r2, #0
    3952:	f240 1eef 	movw	lr, #495	; 0x1ef
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    3956:	463b      	mov	r3, r7
    3958:	6879      	ldr	r1, [r7, #4]
    395a:	681b      	ldr	r3, [r3, #0]
    395c:	3201      	adds	r2, #1
    395e:	1acb      	subs	r3, r1, r3
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3960:	4572      	cmp	r2, lr
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    3962:	f84c 3b04 	str.w	r3, [ip], #4
    3966:	f107 0704 	add.w	r7, r7, #4
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    396a:	d1f4      	bne.n	3956 <maxim_heart_rate_and_oxygen_saturation+0x56>
    396c:	4a87      	ldr	r2, [pc, #540]	; (3b8c <maxim_heart_rate_and_oxygen_saturation+0x28c>)

    // 2-pt Moving Average to an_dx
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    396e:	2100      	movs	r1, #0
    {
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    3970:	6813      	ldr	r3, [r2, #0]
    3972:	f852 7f04 	ldr.w	r7, [r2, #4]!
    3976:	443b      	add	r3, r7
    3978:	3101      	adds	r1, #1
    397a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    397e:	105b      	asrs	r3, r3, #1
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3980:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    3984:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3988:	d1f2      	bne.n	3970 <maxim_heart_rate_and_oxygen_saturation+0x70>
    398a:	4f80      	ldr	r7, [pc, #512]	; (3b8c <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    398c:	2100      	movs	r1, #0
    398e:	1d4b      	adds	r3, r1, #5
    3990:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 3b90 <maxim_heart_rate_and_oxygen_saturation+0x290>
    3994:	428b      	cmp	r3, r1
    3996:	bfb4      	ite	lt
    3998:	2301      	movlt	r3, #1
    399a:	2306      	movge	r3, #6
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    399c:	46bc      	mov	ip, r7
    {
        s = 0;
    399e:	2200      	movs	r2, #0
    39a0:	e012      	b.n	39c8 <maxim_heart_rate_and_oxygen_saturation+0xc8>
        un_ir_mean += pun_ir_buffer[k];
    39a2:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    for (k = 0; k < n_ir_buffer_length; k++)
    39a6:	3201      	adds	r2, #1
        un_ir_mean += pun_ir_buffer[k];
    39a8:	440b      	add	r3, r1
    for (k = 0; k < n_ir_buffer_length; k++)
    39aa:	e7b2      	b.n	3912 <maxim_heart_rate_and_oxygen_saturation+0x12>
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;
    39ac:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    39b0:	1ac9      	subs	r1, r1, r3
    39b2:	f840 1b04 	str.w	r1, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    39b6:	3201      	adds	r2, #1
    39b8:	e7b2      	b.n	3920 <maxim_heart_rate_and_oxygen_saturation+0x20>
        for (k = i; k < i + HAMMING_SIZE; k++)
        {
            s -= an_dx[k] * auw_hamm[k - i];
    39ba:	f85c ab04 	ldr.w	sl, [ip], #4
    39be:	46d1      	mov	r9, sl
    39c0:	f83e ab02 	ldrh.w	sl, [lr], #2
    39c4:	fb09 221a 	mls	r2, r9, sl, r2
        for (k = i; k < i + HAMMING_SIZE; k++)
    39c8:	3b01      	subs	r3, #1
    39ca:	d1f6      	bne.n	39ba <maxim_heart_rate_and_oxygen_saturation+0xba>
        }
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    39cc:	f240 4c7a 	movw	ip, #1146	; 0x47a
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    39d0:	3101      	adds	r1, #1
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    39d2:	fb92 f2fc 	sdiv	r2, r2, ip
    39d6:	f847 2b04 	str.w	r2, [r7], #4
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    39da:	f240 12e9 	movw	r2, #489	; 0x1e9
    39de:	4291      	cmp	r1, r2
    39e0:	d1d5      	bne.n	398e <maxim_heart_rate_and_oxygen_saturation+0x8e>
    }

    n_th1 = 0; // threshold calculation
    39e2:	461a      	mov	r2, r3
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    39e4:	f240 17ef 	movw	r7, #495	; 0x1ef
    {
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    39e8:	f850 1b04 	ldr.w	r1, [r0], #4
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    39ec:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    39ee:	2900      	cmp	r1, #0
    39f0:	bfb8      	it	lt
    39f2:	4249      	neglt	r1, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    39f4:	42bb      	cmp	r3, r7
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    39f6:	440a      	add	r2, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    39f8:	d1f6      	bne.n	39e8 <maxim_heart_rate_and_oxygen_saturation+0xe8>
    }
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    39fa:	2108      	movs	r1, #8
    39fc:	2005      	movs	r0, #5
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    39fe:	fb92 f2f3 	sdiv	r2, r2, r3
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    3a02:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3a06:	9200      	str	r2, [sp, #0]
    3a08:	a909      	add	r1, sp, #36	; 0x24
    3a0a:	4a60      	ldr	r2, [pc, #384]	; (3b8c <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    3a0c:	a82d      	add	r0, sp, #180	; 0xb4
    3a0e:	f01d fdc5 	bl	2159c <maxim_find_peaks>

    n_peak_interval_sum = 0;
    if (n_npks >= 2)
    3a12:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3a14:	2f01      	cmp	r7, #1
    3a16:	f04f 0300 	mov.w	r3, #0
    3a1a:	dd38      	ble.n	3a8e <maxim_heart_rate_and_oxygen_saturation+0x18e>
    3a1c:	aa2d      	add	r2, sp, #180	; 0xb4
    {
        for (k = 1; k < n_npks; k++)
    3a1e:	2001      	movs	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3a20:	4611      	mov	r1, r2
    3a22:	f8d2 c004 	ldr.w	ip, [r2, #4]
    3a26:	6809      	ldr	r1, [r1, #0]
        for (k = 1; k < n_npks; k++)
    3a28:	3001      	adds	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3a2a:	ebac 0101 	sub.w	r1, ip, r1
        for (k = 1; k < n_npks; k++)
    3a2e:	4287      	cmp	r7, r0
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3a30:	f102 0204 	add.w	r2, r2, #4
    3a34:	440b      	add	r3, r1
        for (k = 1; k < n_npks; k++)
    3a36:	d1f3      	bne.n	3a20 <maxim_heart_rate_and_oxygen_saturation+0x120>
        n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
    3a38:	1e7a      	subs	r2, r7, #1
    3a3a:	fb93 f3f2 	sdiv	r3, r3, r2
        *pn_heart_rate = (int32_t)(6000 / n_peak_interval_sum); // beats per minutes
    3a3e:	f241 7270 	movw	r2, #6000	; 0x1770
    3a42:	fb92 f3f3 	sdiv	r3, r2, r3
    3a46:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3a48:	6013      	str	r3, [r2, #0]
        *pch_hr_valid = 1;
    3a4a:	2301      	movs	r3, #1
    3a4c:	9a48      	ldr	r2, [sp, #288]	; 0x120
    3a4e:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
    3a52:	7013      	strb	r3, [r2, #0]
    3a54:	a82d      	add	r0, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
    3a56:	4661      	mov	r1, ip
    3a58:	2300      	movs	r3, #0
    {
        *pn_heart_rate = -999;
        *pch_hr_valid = 0;
    }

    for (k = 0; k < n_npks; k++)
    3a5a:	429f      	cmp	r7, r3
    3a5c:	dc1b      	bgt.n	3a96 <maxim_heart_rate_and_oxygen_saturation+0x196>
    3a5e:	4b4d      	ldr	r3, [pc, #308]	; (3b94 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    3a60:	4949      	ldr	r1, [pc, #292]	; (3b88 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    3a62:	4618      	mov	r0, r3
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;

    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    for (k = 0; k < n_ir_buffer_length; k++)
    3a64:	2200      	movs	r2, #0
    3a66:	468e      	mov	lr, r1
    3a68:	42aa      	cmp	r2, r5
    3a6a:	db1b      	blt.n	3aa4 <maxim_heart_rate_and_oxygen_saturation+0x1a4>
        an_x[k] = pun_ir_buffer[k];
        an_y[k] = pun_red_buffer[k];
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = 0;
    3a6c:	2000      	movs	r0, #0
    for (k = 0; k < n_npks; k++)
    3a6e:	4605      	mov	r5, r0
                    if (un_only_once > 0)
                    {
                        un_only_once = 0;
                    }
                    n_c_min = an_x[i];
                    an_exact_ir_valley_locs[k] = i;
    3a70:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
    for (k = 0; k < n_npks; k++)
    3a74:	42af      	cmp	r7, r5
    3a76:	dc1f      	bgt.n	3ab8 <maxim_heart_rate_and_oxygen_saturation+0x1b8>
                }
            if (un_only_once == 0)
                n_exact_ir_valley_locs_count++;
        }
    }
    if (n_exact_ir_valley_locs_count < 2)
    3a78:	2801      	cmp	r0, #1
    3a7a:	dc3f      	bgt.n	3afc <maxim_heart_rate_and_oxygen_saturation+0x1fc>
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
    3a7c:	9a05      	ldr	r2, [sp, #20]
    3a7e:	4b46      	ldr	r3, [pc, #280]	; (3b98 <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3a80:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 0;
    3a82:	2300      	movs	r3, #0

    if (n_ratio_average > 2 && n_ratio_average < 184)
    {
        n_spo2_calc = uch_spo2_table[n_ratio_average];
        *pn_spo2 = n_spo2_calc;
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3a84:	9a46      	ldr	r2, [sp, #280]	; 0x118
    3a86:	7013      	strb	r3, [r2, #0]
    else
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
        *pch_spo2_valid = 0;
    }
}
    3a88:	b03d      	add	sp, #244	; 0xf4
    3a8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *pn_heart_rate = -999;
    3a8e:	9947      	ldr	r1, [sp, #284]	; 0x11c
    3a90:	4a41      	ldr	r2, [pc, #260]	; (3b98 <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3a92:	600a      	str	r2, [r1, #0]
        *pch_hr_valid = 0;
    3a94:	e7da      	b.n	3a4c <maxim_heart_rate_and_oxygen_saturation+0x14c>
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
    3a96:	f850 2b04 	ldr.w	r2, [r0], #4
    3a9a:	3202      	adds	r2, #2
    3a9c:	f841 2b04 	str.w	r2, [r1], #4
    for (k = 0; k < n_npks; k++)
    3aa0:	3301      	adds	r3, #1
    3aa2:	e7da      	b.n	3a5a <maxim_heart_rate_and_oxygen_saturation+0x15a>
        an_x[k] = pun_ir_buffer[k];
    3aa4:	f856 9022 	ldr.w	r9, [r6, r2, lsl #2]
    3aa8:	f841 9b04 	str.w	r9, [r1], #4
        an_y[k] = pun_red_buffer[k];
    3aac:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
    3ab0:	f840 9b04 	str.w	r9, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    3ab4:	3201      	adds	r2, #1
    3ab6:	e7d7      	b.n	3a68 <maxim_heart_rate_and_oxygen_saturation+0x168>
        m = an_ir_valley_locs[k];
    3ab8:	f85c 6b04 	ldr.w	r6, [ip], #4
        if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0)
    3abc:	1d71      	adds	r1, r6, #5
    3abe:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
    3ac2:	dc0f      	bgt.n	3ae4 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3ac4:	1f72      	subs	r2, r6, #5
    3ac6:	2a00      	cmp	r2, #0
    3ac8:	dd0c      	ble.n	3ae4 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3aca:	3e06      	subs	r6, #6
    3acc:	4291      	cmp	r1, r2
    3ace:	bfb4      	ite	lt
    3ad0:	2101      	movlt	r1, #1
    3ad2:	210b      	movge	r1, #11
    3ad4:	4431      	add	r1, r6
        n_c_min = 16777216; //2^24;
    3ad6:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
        un_only_once = 1;
    3ada:	2601      	movs	r6, #1
            for (i = m - 5; i < m + 5; i++)
    3adc:	428a      	cmp	r2, r1
    3ade:	d103      	bne.n	3ae8 <maxim_heart_rate_and_oxygen_saturation+0x1e8>
            if (un_only_once == 0)
    3ae0:	b906      	cbnz	r6, 3ae4 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
                n_exact_ir_valley_locs_count++;
    3ae2:	3001      	adds	r0, #1
    for (k = 0; k < n_npks; k++)
    3ae4:	3501      	adds	r5, #1
    3ae6:	e7c5      	b.n	3a74 <maxim_heart_rate_and_oxygen_saturation+0x174>
                if (an_x[i] < n_c_min)
    3ae8:	f85e 9022 	ldr.w	r9, [lr, r2, lsl #2]
    3aec:	45c1      	cmp	r9, r8
                    an_exact_ir_valley_locs[k] = i;
    3aee:	bfbe      	ittt	lt
    3af0:	f84a 2025 	strlt.w	r2, [sl, r5, lsl #2]
    3af4:	46c8      	movlt	r8, r9
    3af6:	2600      	movlt	r6, #0
            for (i = m - 5; i < m + 5; i++)
    3af8:	3201      	adds	r2, #1
    3afa:	e7ef      	b.n	3adc <maxim_heart_rate_and_oxygen_saturation+0x1dc>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3afc:	2500      	movs	r5, #0
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3afe:	6821      	ldr	r1, [r4, #0]
    3b00:	f854 2f04 	ldr.w	r2, [r4, #4]!
    3b04:	6866      	ldr	r6, [r4, #4]
    3b06:	4432      	add	r2, r6
    3b08:	4411      	add	r1, r2
    3b0a:	68a2      	ldr	r2, [r4, #8]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3b0c:	681e      	ldr	r6, [r3, #0]
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3b0e:	188a      	adds	r2, r1, r2
    3b10:	bf48      	it	mi
    3b12:	3203      	addmi	r2, #3
    3b14:	1092      	asrs	r2, r2, #2
    3b16:	f844 2c04 	str.w	r2, [r4, #-4]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3b1a:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3b1e:	6859      	ldr	r1, [r3, #4]
    3b20:	440a      	add	r2, r1
    3b22:	6899      	ldr	r1, [r3, #8]
    3b24:	4432      	add	r2, r6
    3b26:	1852      	adds	r2, r2, r1
    3b28:	bf48      	it	mi
    3b2a:	3203      	addmi	r2, #3
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3b2c:	3501      	adds	r5, #1
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3b2e:	1092      	asrs	r2, r2, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3b30:	f5b5 7ff8 	cmp.w	r5, #496	; 0x1f0
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3b34:	f843 2c04 	str.w	r2, [r3, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3b38:	d1e1      	bne.n	3afe <maxim_heart_rate_and_oxygen_saturation+0x1fe>
        an_ratio[k] = 0;
    3b3a:	2300      	movs	r3, #0
    3b3c:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    3b40:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    3b44:	ac1e      	add	r4, sp, #120	; 0x78
    3b46:	930e      	str	r3, [sp, #56]	; 0x38
    3b48:	4622      	mov	r2, r4
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE)
    3b4a:	f852 1b04 	ldr.w	r1, [r2], #4
    3b4e:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    3b52:	dc93      	bgt.n	3a7c <maxim_heart_rate_and_oxygen_saturation+0x17c>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++)
    3b54:	3301      	adds	r3, #1
    3b56:	4298      	cmp	r0, r3
    3b58:	d1f7      	bne.n	3b4a <maxim_heart_rate_and_oxygen_saturation+0x24a>
    n_i_ratio_count = 0;
    3b5a:	2100      	movs	r1, #0
    3b5c:	4d0a      	ldr	r5, [pc, #40]	; (3b88 <maxim_heart_rate_and_oxygen_saturation+0x288>)
                if (an_y[i] > n_y_dc_max)
    3b5e:	4e0d      	ldr	r6, [pc, #52]	; (3b94 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3b60:	468e      	mov	lr, r1
    3b62:	f100 3aff 	add.w	sl, r0, #4294967295
        if (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k] > 10)
    3b66:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3b6a:	f854 2b04 	ldr.w	r2, [r4], #4
    3b6e:	ebac 0802 	sub.w	r8, ip, r2
    3b72:	f1b8 0f0a 	cmp.w	r8, #10
    3b76:	f10e 0e01 	add.w	lr, lr, #1
    3b7a:	dd56      	ble.n	3c2a <maxim_heart_rate_and_oxygen_saturation+0x32a>
        n_x_dc_max = -16777216;
    3b7c:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3b80:	4613      	mov	r3, r2
        n_y_dc_max = -16777216;
    3b82:	46b9      	mov	r9, r7
    3b84:	e018      	b.n	3bb8 <maxim_heart_rate_and_oxygen_saturation+0x2b8>
    3b86:	bf00      	nop
    3b88:	2000c528 	.word	0x2000c528
    3b8c:	2000bd68 	.word	0x2000bd68
    3b90:	00029184 	.word	0x00029184
    3b94:	2000ccf8 	.word	0x2000ccf8
    3b98:	fffffc19 	.word	0xfffffc19
                if (an_x[i] > n_x_dc_max)
    3b9c:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3ba0:	42b8      	cmp	r0, r7
    3ba2:	bfc8      	it	gt
    3ba4:	4607      	movgt	r7, r0
                if (an_y[i] > n_y_dc_max)
    3ba6:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
                if (an_x[i] > n_x_dc_max)
    3baa:	bfc8      	it	gt
    3bac:	9307      	strgt	r3, [sp, #28]
                if (an_y[i] > n_y_dc_max)
    3bae:	4548      	cmp	r0, r9
    3bb0:	bfc4      	itt	gt
    3bb2:	469b      	movgt	fp, r3
    3bb4:	4681      	movgt	r9, r0
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3bb6:	3301      	adds	r3, #1
    3bb8:	459c      	cmp	ip, r3
    3bba:	dcef      	bgt.n	3b9c <maxim_heart_rate_and_oxygen_saturation+0x29c>
            n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]] - an_x[an_exact_ir_valley_locs[k]]) * (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
    3bbc:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    3bc0:	f855 002c 	ldr.w	r0, [r5, ip, lsl #2]
    3bc4:	1ac0      	subs	r0, r0, r3
    3bc6:	9b07      	ldr	r3, [sp, #28]
    3bc8:	1a9b      	subs	r3, r3, r2
    3bca:	4358      	muls	r0, r3
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3bcc:	fb90 f3f8 	sdiv	r3, r0, r8
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3bd0:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3bd4:	9306      	str	r3, [sp, #24]
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3bd6:	f855 302b 	ldr.w	r3, [r5, fp, lsl #2]
    3bda:	1a1b      	subs	r3, r3, r0
    3bdc:	9806      	ldr	r0, [sp, #24]
    3bde:	1a1b      	subs	r3, r3, r0
            n_denom = (n_x_ac * n_y_dc_max) >> 7;
    3be0:	fb09 f303 	mul.w	r3, r9, r3
    3be4:	ea4f 19e3 	mov.w	r9, r3, asr #7
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3be8:	f1b9 0f00 	cmp.w	r9, #0
    3bec:	dd1d      	ble.n	3c2a <maxim_heart_rate_and_oxygen_saturation+0x32a>
    3bee:	2904      	cmp	r1, #4
    3bf0:	dc1b      	bgt.n	3c2a <maxim_heart_rate_and_oxygen_saturation+0x32a>
            n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]] - an_y[an_exact_ir_valley_locs[k]]) * (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); //red
    3bf2:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
    3bf6:	f856 302c 	ldr.w	r3, [r6, ip, lsl #2]
    3bfa:	ebab 0202 	sub.w	r2, fp, r2
    3bfe:	1a1b      	subs	r3, r3, r0
    3c00:	435a      	muls	r2, r3
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3c02:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
            n_y_ac = an_y[an_exact_ir_valley_locs[k]] + n_y_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3c06:	fb92 f8f8 	sdiv	r8, r2, r8
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3c0a:	1a1b      	subs	r3, r3, r0
    3c0c:	eba3 0308 	sub.w	r3, r3, r8
            n_nume = (n_y_ac * n_x_dc_max) >> 7;    //prepare X100 to preserve floating value
    3c10:	435f      	muls	r7, r3
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3c12:	11ff      	asrs	r7, r7, #7
    3c14:	d009      	beq.n	3c2a <maxim_heart_rate_and_oxygen_saturation+0x32a>
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3c16:	ab3c      	add	r3, sp, #240	; 0xf0
    3c18:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    3c1c:	2364      	movs	r3, #100	; 0x64
    3c1e:	435f      	muls	r7, r3
                n_i_ratio_count++;
    3c20:	3101      	adds	r1, #1
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3c22:	fb97 f7f9 	sdiv	r7, r7, r9
    3c26:	f84c 7cc8 	str.w	r7, [ip, #-200]
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3c2a:	45d6      	cmp	lr, sl
    3c2c:	db9b      	blt.n	3b66 <maxim_heart_rate_and_oxygen_saturation+0x266>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
    3c2e:	a80a      	add	r0, sp, #40	; 0x28
    3c30:	f01d fc4a 	bl	214c8 <maxim_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
    3c34:	104a      	asrs	r2, r1, #1
    if (n_middle_idx > 1)
    3c36:	2903      	cmp	r1, #3
    3c38:	ea4f 0382 	mov.w	r3, r2, lsl #2
    3c3c:	dd14      	ble.n	3c68 <maxim_heart_rate_and_oxygen_saturation+0x368>
        n_ratio_average = (an_ratio[n_middle_idx - 1] + an_ratio[n_middle_idx]) / 2; // use median
    3c3e:	a93c      	add	r1, sp, #240	; 0xf0
    3c40:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    3c44:	f851 3ccc 	ldr.w	r3, [r1, #-204]
    3c48:	f851 2cc8 	ldr.w	r2, [r1, #-200]
    3c4c:	4413      	add	r3, r2
    3c4e:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    3c52:	105b      	asrs	r3, r3, #1
    if (n_ratio_average > 2 && n_ratio_average < 184)
    3c54:	1eda      	subs	r2, r3, #3
    3c56:	2ab4      	cmp	r2, #180	; 0xb4
    3c58:	f63f af10 	bhi.w	3a7c <maxim_heart_rate_and_oxygen_saturation+0x17c>
        n_spo2_calc = uch_spo2_table[n_ratio_average];
    3c5c:	4a05      	ldr	r2, [pc, #20]	; (3c74 <maxim_heart_rate_and_oxygen_saturation+0x374>)
    3c5e:	5cd3      	ldrb	r3, [r2, r3]
    3c60:	9a05      	ldr	r2, [sp, #20]
    3c62:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3c64:	2301      	movs	r3, #1
    3c66:	e70d      	b.n	3a84 <maxim_heart_rate_and_oxygen_saturation+0x184>
        n_ratio_average = an_ratio[n_middle_idx];
    3c68:	aa3c      	add	r2, sp, #240	; 0xf0
    3c6a:	4413      	add	r3, r2
    3c6c:	f853 3cc8 	ldr.w	r3, [r3, #-200]
    3c70:	e7f0      	b.n	3c54 <maxim_heart_rate_and_oxygen_saturation+0x354>
    3c72:	bf00      	nop
    3c74:	0002b117 	.word	0x0002b117

00003c78 <init_lcd_output>:
const int spi_freq = 8000000;

static uint8_t data[MAX_USER_DATA_LENGTH];

s16_t init_lcd_output()
{
    3c78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3c7c:	4828      	ldr	r0, [pc, #160]	; (3d20 <init_lcd_output+0xa8>)
    3c7e:	f01b fca9 	bl	1f5d4 <z_impl_device_get_binding>
    struct device *cs;
    int ret;
    cs = device_get_binding(CS_GPIO_LABEL);
    if (cs == NULL)
    3c82:	4605      	mov	r5, r0
    3c84:	b938      	cbnz	r0, 3c96 <init_lcd_output+0x1e>
    {
        printk("Didn't find device %s\n", CS_GPIO_LABEL);
    3c86:	4827      	ldr	r0, [pc, #156]	; (3d24 <init_lcd_output+0xac>)
    3c88:	4925      	ldr	r1, [pc, #148]	; (3d20 <init_lcd_output+0xa8>)
    3c8a:	f01d fe99 	bl	219c0 <printk>
        return -1;
    3c8e:	f04f 30ff 	mov.w	r0, #4294967295
    globalLcdRst = lcdRst;
    globalVciEn = vciEn;
    globalDcx = dcx;

    return 0;
}
    3c92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = gpio_pin_configure(cs, CS_GPIO_PIN, CS_GPIO_FLAGS);
    3c96:	210c      	movs	r1, #12
    3c98:	f01d fca3 	bl	215e2 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3c9c:	4604      	mov	r4, r0
    3c9e:	b138      	cbz	r0, 3cb0 <init_lcd_output+0x38>
        printk("Error %d: failed to configure device %s pin %d\n",
    3ca0:	230c      	movs	r3, #12
        printk("Error %d: failed to configure device %s pin %d\n",
    3ca2:	4821      	ldr	r0, [pc, #132]	; (3d28 <init_lcd_output+0xb0>)
    3ca4:	4a1e      	ldr	r2, [pc, #120]	; (3d20 <init_lcd_output+0xa8>)
    3ca6:	4621      	mov	r1, r4
    3ca8:	f01d fe8a 	bl	219c0 <printk>
        return ret;
    3cac:	b220      	sxth	r0, r4
    3cae:	e7f0      	b.n	3c92 <init_lcd_output+0x1a>
    3cb0:	481b      	ldr	r0, [pc, #108]	; (3d20 <init_lcd_output+0xa8>)
    3cb2:	f01b fc8f 	bl	1f5d4 <z_impl_device_get_binding>
    if (lcdRst == NULL)
    3cb6:	4606      	mov	r6, r0
    3cb8:	2800      	cmp	r0, #0
    3cba:	d0e4      	beq.n	3c86 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, LCD_RST_GPIO_PIN, LCD_RST_GPIO_FLAGS);
    3cbc:	210a      	movs	r1, #10
    3cbe:	f01d fc90 	bl	215e2 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3cc2:	4604      	mov	r4, r0
    3cc4:	b108      	cbz	r0, 3cca <init_lcd_output+0x52>
        printk("Error %d: failed to configure device %s pin %d\n",
    3cc6:	230a      	movs	r3, #10
    3cc8:	e7eb      	b.n	3ca2 <init_lcd_output+0x2a>
    3cca:	4815      	ldr	r0, [pc, #84]	; (3d20 <init_lcd_output+0xa8>)
    3ccc:	f01b fc82 	bl	1f5d4 <z_impl_device_get_binding>
    if (vciEn == NULL)
    3cd0:	4680      	mov	r8, r0
    3cd2:	2800      	cmp	r0, #0
    3cd4:	d0d7      	beq.n	3c86 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, VCI_EN_GPIO_PIN, VCI_EN_GPIO_FLAGS);
    3cd6:	2106      	movs	r1, #6
    3cd8:	4630      	mov	r0, r6
    3cda:	f01d fc82 	bl	215e2 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3cde:	4604      	mov	r4, r0
    3ce0:	b108      	cbz	r0, 3ce6 <init_lcd_output+0x6e>
        printk("Error %d: failed to configure device %s pin %d\n",
    3ce2:	2306      	movs	r3, #6
    3ce4:	e7dd      	b.n	3ca2 <init_lcd_output+0x2a>
    3ce6:	480e      	ldr	r0, [pc, #56]	; (3d20 <init_lcd_output+0xa8>)
    3ce8:	f01b fc74 	bl	1f5d4 <z_impl_device_get_binding>
    if (dcx == NULL)
    3cec:	4607      	mov	r7, r0
    3cee:	2800      	cmp	r0, #0
    3cf0:	d0c9      	beq.n	3c86 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, DCX_GPIO_PIN, DCX_GPIO_FLAGS);
    3cf2:	2105      	movs	r1, #5
    3cf4:	4630      	mov	r0, r6
    3cf6:	f01d fc74 	bl	215e2 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3cfa:	4604      	mov	r4, r0
    3cfc:	b108      	cbz	r0, 3d02 <init_lcd_output+0x8a>
        printk("Error %d: failed to configure device %s pin %d\n",
    3cfe:	2305      	movs	r3, #5
    3d00:	e7cf      	b.n	3ca2 <init_lcd_output+0x2a>
    printk("INITIALISING OUTPUTS : OK\n");
    3d02:	480a      	ldr	r0, [pc, #40]	; (3d2c <init_lcd_output+0xb4>)
    3d04:	f01d fe5c 	bl	219c0 <printk>
    globalcs = cs;
    3d08:	4b09      	ldr	r3, [pc, #36]	; (3d30 <init_lcd_output+0xb8>)
    3d0a:	601d      	str	r5, [r3, #0]
    globalLcdRst = lcdRst;
    3d0c:	4b09      	ldr	r3, [pc, #36]	; (3d34 <init_lcd_output+0xbc>)
    3d0e:	601e      	str	r6, [r3, #0]
    globalVciEn = vciEn;
    3d10:	4b09      	ldr	r3, [pc, #36]	; (3d38 <init_lcd_output+0xc0>)
    3d12:	f8c3 8000 	str.w	r8, [r3]
    globalDcx = dcx;
    3d16:	4b09      	ldr	r3, [pc, #36]	; (3d3c <init_lcd_output+0xc4>)
    return 0;
    3d18:	4620      	mov	r0, r4
    globalDcx = dcx;
    3d1a:	601f      	str	r7, [r3, #0]
    return 0;
    3d1c:	e7b9      	b.n	3c92 <init_lcd_output+0x1a>
    3d1e:	bf00      	nop
    3d20:	0002af3c 	.word	0x0002af3c
    3d24:	0002b1cf 	.word	0x0002b1cf
    3d28:	0002b1e6 	.word	0x0002b1e6
    3d2c:	0002b216 	.word	0x0002b216
    3d30:	2000d4d4 	.word	0x2000d4d4
    3d34:	2000d4cc 	.word	0x2000d4cc
    3d38:	2000d4d0 	.word	0x2000d4d0
    3d3c:	2000d4c8 	.word	0x2000d4c8

00003d40 <setOutputcs>:

bool setOutputcs(bool val)
{
    3d40:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3d42:	4b06      	ldr	r3, [pc, #24]	; (3d5c <setOutputcs+0x1c>)
{
    3d44:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3d46:	210c      	movs	r1, #12
    3d48:	6818      	ldr	r0, [r3, #0]
    3d4a:	f01d fc3a 	bl	215c2 <gpio_pin_set>
    if (err != 0)
    3d4e:	b118      	cbz	r0, 3d58 <setOutputcs+0x18>
    {
        printk("Error in gpio cs");
    3d50:	4803      	ldr	r0, [pc, #12]	; (3d60 <setOutputcs+0x20>)
    3d52:	f01d fe35 	bl	219c0 <printk>
        return 1;
    3d56:	2001      	movs	r0, #1
    }
    return 0;
}
    3d58:	bd08      	pop	{r3, pc}
    3d5a:	bf00      	nop
    3d5c:	2000d4d4 	.word	0x2000d4d4
    3d60:	0002b231 	.word	0x0002b231

00003d64 <setOutputLcdRst>:

bool setOutputLcdRst(bool val)
{
    3d64:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3d66:	4b06      	ldr	r3, [pc, #24]	; (3d80 <setOutputLcdRst+0x1c>)
{
    3d68:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3d6a:	210a      	movs	r1, #10
    3d6c:	6818      	ldr	r0, [r3, #0]
    3d6e:	f01d fc28 	bl	215c2 <gpio_pin_set>
    if (err != 0)
    3d72:	b118      	cbz	r0, 3d7c <setOutputLcdRst+0x18>
    {
        printk("Error in gpio reset");
    3d74:	4803      	ldr	r0, [pc, #12]	; (3d84 <setOutputLcdRst+0x20>)
    3d76:	f01d fe23 	bl	219c0 <printk>
        return 1;
    3d7a:	2001      	movs	r0, #1
    }
    return 0;
}
    3d7c:	bd08      	pop	{r3, pc}
    3d7e:	bf00      	nop
    3d80:	2000d4cc 	.word	0x2000d4cc
    3d84:	0002b242 	.word	0x0002b242

00003d88 <setOutputVciEn>:

bool setOutputVciEn(bool val)
{
    3d88:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3d8a:	4b06      	ldr	r3, [pc, #24]	; (3da4 <setOutputVciEn+0x1c>)
{
    3d8c:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3d8e:	2106      	movs	r1, #6
    3d90:	6818      	ldr	r0, [r3, #0]
    3d92:	f01d fc16 	bl	215c2 <gpio_pin_set>
    if (err != 0)
    3d96:	b118      	cbz	r0, 3da0 <setOutputVciEn+0x18>
    {
        printk("Error in gpio vcien");
    3d98:	4803      	ldr	r0, [pc, #12]	; (3da8 <setOutputVciEn+0x20>)
    3d9a:	f01d fe11 	bl	219c0 <printk>
        return 1;
    3d9e:	2001      	movs	r0, #1
    }
    return 0;
}
    3da0:	bd08      	pop	{r3, pc}
    3da2:	bf00      	nop
    3da4:	2000d4d0 	.word	0x2000d4d0
    3da8:	0002b256 	.word	0x0002b256

00003dac <setOutputDcx>:

bool setOutputDcx(bool val)
{
    3dac:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3dae:	4b06      	ldr	r3, [pc, #24]	; (3dc8 <setOutputDcx+0x1c>)
{
    3db0:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3db2:	2105      	movs	r1, #5
    3db4:	6818      	ldr	r0, [r3, #0]
    3db6:	f01d fc04 	bl	215c2 <gpio_pin_set>
    if (err != 0)
    3dba:	b118      	cbz	r0, 3dc4 <setOutputDcx+0x18>
    {
        printk("Error in gpio dcx");
    3dbc:	4803      	ldr	r0, [pc, #12]	; (3dcc <setOutputDcx+0x20>)
    3dbe:	f01d fdff 	bl	219c0 <printk>
        return 1;
    3dc2:	2001      	movs	r0, #1
    }
    return 0;
}
    3dc4:	bd08      	pop	{r3, pc}
    3dc6:	bf00      	nop
    3dc8:	2000d4c8 	.word	0x2000d4c8
    3dcc:	0002b26a 	.word	0x0002b26a

00003dd0 <write_bytes>:
    return spi_write(spi, spi_cfg, &tx);
}

int write_bytes(const struct device *spi, struct spi_config *spi_cfg,
                       uint16_t addr, uint8_t *data, uint32_t num_bytes)
{
    3dd0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct spi_buf bufs[] =
    3dd2:	9300      	str	r3, [sp, #0]
    3dd4:	9b06      	ldr	r3, [sp, #24]
    3dd6:	9301      	str	r3, [sp, #4]
    struct spi_buf_set tx =
    3dd8:	2301      	movs	r3, #1
    3dda:	f8cd d008 	str.w	sp, [sp, #8]
    3dde:	9303      	str	r3, [sp, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    3de0:	6883      	ldr	r3, [r0, #8]
    3de2:	aa02      	add	r2, sp, #8
    3de4:	681c      	ldr	r4, [r3, #0]
    3de6:	2300      	movs	r3, #0
    3de8:	47a0      	blx	r4
    int err;
    err = spi_acess(spi, spi_cfg, 0, addr, data, num_bytes);
    if (err)
    3dea:	b120      	cbz	r0, 3df6 <write_bytes+0x26>
    {
        printk("Error during SPI write\n");
    3dec:	4803      	ldr	r0, [pc, #12]	; (3dfc <write_bytes+0x2c>)
    3dee:	f01d fde7 	bl	219c0 <printk>
        return -EIO;
    3df2:	f06f 0004 	mvn.w	r0, #4
    }
    return 0;
}
    3df6:	b004      	add	sp, #16
    3df8:	bd10      	pop	{r4, pc}
    3dfa:	bf00      	nop
    3dfc:	0002b27c 	.word	0x0002b27c

00003e00 <device_get_binding.constprop.0>:
    3e00:	4801      	ldr	r0, [pc, #4]	; (3e08 <device_get_binding.constprop.0+0x8>)
    3e02:	f01b bbe7 	b.w	1f5d4 <z_impl_device_get_binding>
    3e06:	bf00      	nop
    3e08:	0002b294 	.word	0x0002b294

00003e0c <WriteComm>:
	0, 0, 0, 0
};
extern const int spi_freq;

void WriteComm(uint8_t data)
{
    3e0c:	b570      	push	{r4, r5, r6, lr}
    3e0e:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3e10:	2400      	movs	r4, #0
    3e12:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    3e16:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    3e1a:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3e1c:	f7ff fff0 	bl	3e00 <device_get_binding.constprop.0>
	if (!spi) {
    3e20:	4605      	mov	r5, r0
    3e22:	b920      	cbnz	r0, 3e2e <WriteComm+0x22>
		printk("Could not find SPI driver\n");
    3e24:	4812      	ldr	r0, [pc, #72]	; (3e70 <WriteComm+0x64>)
    3e26:	f01d fdcb 	bl	219c0 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    3e2a:	b008      	add	sp, #32
    3e2c:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    3e2e:	f44f 7380 	mov.w	r3, #256	; 0x100
    3e32:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    3e36:	4b0f      	ldr	r3, [pc, #60]	; (3e74 <WriteComm+0x68>)
	setOutputcs(0);
    3e38:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    3e3a:	681b      	ldr	r3, [r3, #0]
    3e3c:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3e3e:	2601      	movs	r6, #1
	setOutputcs(0);
    3e40:	f7ff ff7e 	bl	3d40 <setOutputcs>
	setOutputDcx(0);
    3e44:	4620      	mov	r0, r4
    3e46:	f7ff ffb1 	bl	3dac <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3e4a:	a905      	add	r1, sp, #20
    3e4c:	9600      	str	r6, [sp, #0]
    3e4e:	f10d 030f 	add.w	r3, sp, #15
    3e52:	4622      	mov	r2, r4
    3e54:	4628      	mov	r0, r5
    3e56:	f7ff ffbb 	bl	3dd0 <write_bytes>
	if (err) {
    3e5a:	4601      	mov	r1, r0
    3e5c:	b118      	cbz	r0, 3e66 <WriteComm+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    3e5e:	4806      	ldr	r0, [pc, #24]	; (3e78 <WriteComm+0x6c>)
    3e60:	f01d fdae 	bl	219c0 <printk>
		return;
    3e64:	e7e1      	b.n	3e2a <WriteComm+0x1e>
	setOutputcs(1);
    3e66:	4630      	mov	r0, r6
    3e68:	f7ff ff6a 	bl	3d40 <setOutputcs>
    3e6c:	e7dd      	b.n	3e2a <WriteComm+0x1e>
    3e6e:	bf00      	nop
    3e70:	0002b29a 	.word	0x0002b29a
    3e74:	00027b0c 	.word	0x00027b0c
    3e78:	0002b2b5 	.word	0x0002b2b5

00003e7c <WriteData>:

void WriteData(uint8_t data)
{
    3e7c:	b570      	push	{r4, r5, r6, lr}
    3e7e:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3e80:	2400      	movs	r4, #0
    3e82:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    3e86:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    3e8a:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3e8c:	f7ff ffb8 	bl	3e00 <device_get_binding.constprop.0>
	if (!spi) {
    3e90:	4605      	mov	r5, r0
    3e92:	b920      	cbnz	r0, 3e9e <WriteData+0x22>
		printk("Could not find SPI driver\n");
    3e94:	4812      	ldr	r0, [pc, #72]	; (3ee0 <WriteData+0x64>)
    3e96:	f01d fd93 	bl	219c0 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    3e9a:	b008      	add	sp, #32
    3e9c:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    3e9e:	f44f 7380 	mov.w	r3, #256	; 0x100
    3ea2:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    3ea6:	4b0f      	ldr	r3, [pc, #60]	; (3ee4 <WriteData+0x68>)
	setOutputcs(0);
    3ea8:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    3eaa:	681b      	ldr	r3, [r3, #0]
    3eac:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3eae:	2601      	movs	r6, #1
	setOutputcs(0);
    3eb0:	f7ff ff46 	bl	3d40 <setOutputcs>
	setOutputDcx(1);
    3eb4:	2001      	movs	r0, #1
    3eb6:	f7ff ff79 	bl	3dac <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3eba:	a905      	add	r1, sp, #20
    3ebc:	9600      	str	r6, [sp, #0]
    3ebe:	f10d 030f 	add.w	r3, sp, #15
    3ec2:	4622      	mov	r2, r4
    3ec4:	4628      	mov	r0, r5
    3ec6:	f7ff ff83 	bl	3dd0 <write_bytes>
	if (err) {
    3eca:	4601      	mov	r1, r0
    3ecc:	b118      	cbz	r0, 3ed6 <WriteData+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    3ece:	4806      	ldr	r0, [pc, #24]	; (3ee8 <WriteData+0x6c>)
    3ed0:	f01d fd76 	bl	219c0 <printk>
		return;
    3ed4:	e7e1      	b.n	3e9a <WriteData+0x1e>
	setOutputcs(1);
    3ed6:	4630      	mov	r0, r6
    3ed8:	f7ff ff32 	bl	3d40 <setOutputcs>
    3edc:	e7dd      	b.n	3e9a <WriteData+0x1e>
    3ede:	bf00      	nop
    3ee0:	0002b29a 	.word	0x0002b29a
    3ee4:	00027b0c 	.word	0x00027b0c
    3ee8:	0002b2b5 	.word	0x0002b2b5

00003eec <DispLogo>:
	}
	setOutputcs(1);
}

void DispLogo(unsigned int color)
{
    3eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ef0:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3ef2:	2500      	movs	r5, #0
    3ef4:	e9cd 5507 	strd	r5, r5, [sp, #28]
{
    3ef8:	9003      	str	r0, [sp, #12]
	struct spi_config spi_cfg = { 0 };
    3efa:	9509      	str	r5, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3efc:	f7ff ff80 	bl	3e00 <device_get_binding.constprop.0>
	if (!spi) {
    3f00:	4606      	mov	r6, r0
    3f02:	b928      	cbnz	r0, 3f10 <DispLogo+0x24>
		printk("Could not find SPI driver\n");
    3f04:	482b      	ldr	r0, [pc, #172]	; (3fb4 <DispLogo+0xc8>)
    3f06:	f01d fd5b 	bl	219c0 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    3f0a:	b00b      	add	sp, #44	; 0x2c
    3f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    3f10:	f44f 7380 	mov.w	r3, #256	; 0x100
    3f14:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    3f18:	4b27      	ldr	r3, [pc, #156]	; (3fb8 <DispLogo+0xcc>)
			if (logo[j][i]) {
    3f1a:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 3fbc <DispLogo+0xd0>
	spi_cfg.frequency = spi_freq;
    3f1e:	681b      	ldr	r3, [r3, #0]
    3f20:	9307      	str	r3, [sp, #28]
	BlockWrite(xoffset, xoffset + logowidth - 1, yoffset,
    3f22:	22c8      	movs	r2, #200	; 0xc8
    3f24:	f240 1317 	movw	r3, #279	; 0x117
    3f28:	f240 115d 	movw	r1, #349	; 0x15d
    3f2c:	2032      	movs	r0, #50	; 0x32
    3f2e:	f01d fb83 	bl	21638 <BlockWrite>
	setOutputcs(0);
    3f32:	4628      	mov	r0, r5
    3f34:	f7ff ff04 	bl	3d40 <setOutputcs>
	setOutputDcx(1);
    3f38:	2001      	movs	r0, #1
    3f3a:	f7ff ff37 	bl	3dac <setOutputDcx>
			if (logo[j][i]) {
    3f3e:	f04f 0a50 	mov.w	sl, #80	; 0x50
		for (j = 0; j < logowidth; j++) {
    3f42:	2700      	movs	r7, #0
			if (logo[j][i]) {
    3f44:	eb05 0809 	add.w	r8, r5, r9
    3f48:	fb0a f307 	mul.w	r3, sl, r7
    3f4c:	f818 4003 	ldrb.w	r4, [r8, r3]
    3f50:	b1ec      	cbz	r4, 3f8e <DispLogo+0xa2>
				data = color >> 8;
    3f52:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3f54:	2401      	movs	r4, #1
				data = color >> 8;
    3f56:	0a1b      	lsrs	r3, r3, #8
    3f58:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3f5c:	2200      	movs	r2, #0
    3f5e:	ab06      	add	r3, sp, #24
    3f60:	9400      	str	r4, [sp, #0]
    3f62:	a907      	add	r1, sp, #28
    3f64:	4630      	mov	r0, r6
    3f66:	f7ff ff33 	bl	3dd0 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    3f6a:	9400      	str	r4, [sp, #0]
    3f6c:	ab03      	add	r3, sp, #12
    3f6e:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    3f70:	a907      	add	r1, sp, #28
    3f72:	4630      	mov	r0, r6
		for (j = 0; j < logowidth; j++) {
    3f74:	3701      	adds	r7, #1
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    3f76:	f7ff ff2b 	bl	3dd0 <write_bytes>
		for (j = 0; j < logowidth; j++) {
    3f7a:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
    3f7e:	d1e3      	bne.n	3f48 <DispLogo+0x5c>
	for (i = 0; i < logoheight; i++) {
    3f80:	3501      	adds	r5, #1
    3f82:	2d50      	cmp	r5, #80	; 0x50
    3f84:	d1dd      	bne.n	3f42 <DispLogo+0x56>
	setOutputcs(1);
    3f86:	2001      	movs	r0, #1
    3f88:	f7ff feda 	bl	3d40 <setOutputcs>
    3f8c:	e7bd      	b.n	3f0a <DispLogo+0x1e>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3f8e:	f04f 0b01 	mov.w	fp, #1
    3f92:	f10d 0317 	add.w	r3, sp, #23
    3f96:	4622      	mov	r2, r4
    3f98:	f8cd b000 	str.w	fp, [sp]
    3f9c:	a907      	add	r1, sp, #28
    3f9e:	4630      	mov	r0, r6
				unsigned int bg_clr = BLACK;
    3fa0:	9406      	str	r4, [sp, #24]
				data = bg_clr >> 8;
    3fa2:	f88d 4017 	strb.w	r4, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    3fa6:	f7ff ff13 	bl	3dd0 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    3faa:	f8cd b000 	str.w	fp, [sp]
    3fae:	ab06      	add	r3, sp, #24
    3fb0:	4622      	mov	r2, r4
    3fb2:	e7dd      	b.n	3f70 <DispLogo+0x84>
    3fb4:	0002b29a 	.word	0x0002b29a
    3fb8:	00027b0c 	.word	0x00027b0c
    3fbc:	20002270 	.word	0x20002270

00003fc0 <DispIcon>:

void DispIcon(bool pic[50][50], unsigned int color, int xstart, int ystart,
	      int height, int width)
{
    3fc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3fc4:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    3fc6:	2400      	movs	r4, #0
    3fc8:	e9cd 4407 	strd	r4, r4, [sp, #28]
{
    3fcc:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    3fd0:	9103      	str	r1, [sp, #12]
    3fd2:	4607      	mov	r7, r0
    3fd4:	4616      	mov	r6, r2
    3fd6:	4699      	mov	r9, r3
	struct spi_config spi_cfg = { 0 };
    3fd8:	9409      	str	r4, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    3fda:	f7ff ff11 	bl	3e00 <device_get_binding.constprop.0>
	if (!spi) {
    3fde:	4605      	mov	r5, r0
    3fe0:	b928      	cbnz	r0, 3fee <DispIcon+0x2e>
		printk("Could not find SPI driver\n");
    3fe2:	482e      	ldr	r0, [pc, #184]	; (409c <DispIcon+0xdc>)
    3fe4:	f01d fcec 	bl	219c0 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    3fe8:	b00b      	add	sp, #44	; 0x2c
    3fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    3fee:	f44f 7380 	mov.w	r3, #256	; 0x100
    3ff2:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    3ff6:	4b2a      	ldr	r3, [pc, #168]	; (40a0 <DispIcon+0xe0>)
    3ff8:	681b      	ldr	r3, [r3, #0]
    3ffa:	9307      	str	r3, [sp, #28]
	BlockWrite(xstart, xstart + width - 1, ystart, ystart + height - 1);
    3ffc:	9b14      	ldr	r3, [sp, #80]	; 0x50
    3ffe:	f108 31ff 	add.w	r1, r8, #4294967295
    4002:	3b01      	subs	r3, #1
    4004:	444b      	add	r3, r9
    4006:	464a      	mov	r2, r9
    4008:	4431      	add	r1, r6
    400a:	4630      	mov	r0, r6
    400c:	f01d fb14 	bl	21638 <BlockWrite>
	setOutputcs(0);
    4010:	4620      	mov	r0, r4
    4012:	f7ff fe95 	bl	3d40 <setOutputcs>
	setOutputDcx(1);
    4016:	2001      	movs	r0, #1
    4018:	f7ff fec8 	bl	3dac <setOutputDcx>
			if (pic[j][i]) {
    401c:	f04f 0a32 	mov.w	sl, #50	; 0x32
	for (i = 0; i < height; i++) {
    4020:	9b14      	ldr	r3, [sp, #80]	; 0x50
    4022:	42a3      	cmp	r3, r4
    4024:	d836      	bhi.n	4094 <DispIcon+0xd4>
	setOutputcs(1);
    4026:	2001      	movs	r0, #1
    4028:	f7ff fe8a 	bl	3d40 <setOutputcs>
    402c:	e7dc      	b.n	3fe8 <DispIcon+0x28>
			if (pic[j][i]) {
    402e:	fb0a f306 	mul.w	r3, sl, r6
    4032:	f81b 2003 	ldrb.w	r2, [fp, r3]
    4036:	b1d2      	cbz	r2, 406e <DispIcon+0xae>
				data = color >> 8;
    4038:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    403a:	f04f 0901 	mov.w	r9, #1
				data = color >> 8;
    403e:	0a1b      	lsrs	r3, r3, #8
    4040:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4044:	2200      	movs	r2, #0
    4046:	ab06      	add	r3, sp, #24
    4048:	f8cd 9000 	str.w	r9, [sp]
    404c:	a907      	add	r1, sp, #28
    404e:	4628      	mov	r0, r5
    4050:	f7ff febe 	bl	3dd0 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    4054:	f8cd 9000 	str.w	r9, [sp]
    4058:	ab03      	add	r3, sp, #12
    405a:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    405c:	a907      	add	r1, sp, #28
    405e:	4628      	mov	r0, r5
    4060:	f7ff feb6 	bl	3dd0 <write_bytes>
		for (j = 0; j < width; j++) {
    4064:	3601      	adds	r6, #1
    4066:	45b0      	cmp	r8, r6
    4068:	d8e1      	bhi.n	402e <DispIcon+0x6e>
	for (i = 0; i < height; i++) {
    406a:	3401      	adds	r4, #1
    406c:	e7d8      	b.n	4020 <DispIcon+0x60>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    406e:	f04f 0901 	mov.w	r9, #1
    4072:	f10d 0317 	add.w	r3, sp, #23
    4076:	f8cd 9000 	str.w	r9, [sp]
    407a:	a907      	add	r1, sp, #28
    407c:	4628      	mov	r0, r5
				unsigned int bg_clr = BLACK;
    407e:	9206      	str	r2, [sp, #24]
				data = bg_clr >> 8;
    4080:	f88d 2017 	strb.w	r2, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4084:	9202      	str	r2, [sp, #8]
    4086:	f7ff fea3 	bl	3dd0 <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    408a:	9a02      	ldr	r2, [sp, #8]
    408c:	f8cd 9000 	str.w	r9, [sp]
    4090:	ab06      	add	r3, sp, #24
    4092:	e7e3      	b.n	405c <DispIcon+0x9c>
		for (j = 0; j < width; j++) {
    4094:	2600      	movs	r6, #0
			if (pic[j][i]) {
    4096:	eb07 0b04 	add.w	fp, r7, r4
    409a:	e7e4      	b.n	4066 <DispIcon+0xa6>
    409c:	0002b29a 	.word	0x0002b29a
    40a0:	00027b0c 	.word	0x00027b0c

000040a4 <LCD_Init>:
void resetDisplay()
{
	WriteComm(0x01);
}
void LCD_Init(void)
{
    40a4:	b508      	push	{r3, lr}
	init_lcd_output();
    40a6:	f7ff fde7 	bl	3c78 <init_lcd_output>
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
	int err;
	k_msleep(1);
    40aa:	2001      	movs	r0, #1
    40ac:	f01d faaa 	bl	21604 <k_msleep.isra.0>
	printk("Initialising DISPLAY  : ");
    40b0:	4815      	ldr	r0, [pc, #84]	; (4108 <LCD_Init+0x64>)
    40b2:	f01d fc85 	bl	219c0 <printk>
	setOutputVciEn(1);
    40b6:	2001      	movs	r0, #1
    40b8:	f7ff fe66 	bl	3d88 <setOutputVciEn>
	k_msleep(100);
    40bc:	2064      	movs	r0, #100	; 0x64
    40be:	f01d faa1 	bl	21604 <k_msleep.isra.0>
	setOutputcs(1);
    40c2:	2001      	movs	r0, #1
    40c4:	f7ff fe3c 	bl	3d40 <setOutputcs>
	setOutputLcdRst(1);
    40c8:	2001      	movs	r0, #1
    40ca:	f7ff fe4b 	bl	3d64 <setOutputLcdRst>
	k_msleep(80);
    40ce:	2050      	movs	r0, #80	; 0x50
    40d0:	f01d fa98 	bl	21604 <k_msleep.isra.0>
	setOutputLcdRst(0);
    40d4:	2000      	movs	r0, #0
    40d6:	f7ff fe45 	bl	3d64 <setOutputLcdRst>
	k_msleep(80);
    40da:	2050      	movs	r0, #80	; 0x50
    40dc:	f01d fa92 	bl	21604 <k_msleep.isra.0>
	setOutputLcdRst(1);
    40e0:	2001      	movs	r0, #1
    40e2:	f7ff fe3f 	bl	3d64 <setOutputLcdRst>
	k_msleep(480);
    40e6:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    40ea:	f01d fa8b 	bl	21604 <k_msleep.isra.0>
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    40ee:	f7ff fe87 	bl	3e00 <device_get_binding.constprop.0>
	if (!spi) {
    40f2:	b920      	cbnz	r0, 40fe <LCD_Init+0x5a>
		printk("Could not find SPI driver\n");
    40f4:	4805      	ldr	r0, [pc, #20]	; (410c <LCD_Init+0x68>)
	//spi_cfg.operation = SPI_WORD_SET(8);
	spi_cfg.operation = 256;
	spi_cfg.frequency = spi_freq;
	setDisplay();
	printk("OK\n");
}
    40f6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("OK\n");
    40fa:	f01d bc61 	b.w	219c0 <printk>
	setDisplay();
    40fe:	f01d faca 	bl	21696 <setDisplay>
	printk("OK\n");
    4102:	4803      	ldr	r0, [pc, #12]	; (4110 <LCD_Init+0x6c>)
    4104:	e7f7      	b.n	40f6 <LCD_Init+0x52>
    4106:	bf00      	nop
    4108:	0002b2dd 	.word	0x0002b2dd
    410c:	0002b29a 	.word	0x0002b29a
    4110:	0002b0eb 	.word	0x0002b0eb

00004114 <WriteOneDot>:
		}
	}
}

void WriteOneDot(unsigned int color)
{
    4114:	b570      	push	{r4, r5, r6, lr}
    4116:	b088      	sub	sp, #32
	setOutputcs(0);
	setOutputDcx(1);
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    4118:	2400      	movs	r4, #0
{
    411a:	9003      	str	r0, [sp, #12]
	setOutputcs(0);
    411c:	2000      	movs	r0, #0
    411e:	f7ff fe0f 	bl	3d40 <setOutputcs>
	setOutputDcx(1);
    4122:	2001      	movs	r0, #1
    4124:	f7ff fe42 	bl	3dac <setOutputDcx>
	struct spi_config spi_cfg = { 0 };
    4128:	e9cd 4405 	strd	r4, r4, [sp, #20]
    412c:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    412e:	f7ff fe67 	bl	3e00 <device_get_binding.constprop.0>
	if (!spi) {
    4132:	4605      	mov	r5, r0
    4134:	b920      	cbnz	r0, 4140 <WriteOneDot+0x2c>
		printk("Could not find SPI driver\n");
    4136:	4811      	ldr	r0, [pc, #68]	; (417c <WriteOneDot+0x68>)
    4138:	f01d fc42 	bl	219c0 <printk>
	u8_t data;
	data = color >> 8;
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
	setOutputcs(1);
}
    413c:	b008      	add	sp, #32
    413e:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    4140:	f44f 7380 	mov.w	r3, #256	; 0x100
    4144:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    4148:	4b0d      	ldr	r3, [pc, #52]	; (4180 <WriteOneDot+0x6c>)
    414a:	681b      	ldr	r3, [r3, #0]
    414c:	9305      	str	r3, [sp, #20]
	data = color >> 8;
    414e:	9b03      	ldr	r3, [sp, #12]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4150:	2601      	movs	r6, #1
	data = color >> 8;
    4152:	0a1b      	lsrs	r3, r3, #8
    4154:	f88d 3013 	strb.w	r3, [sp, #19]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4158:	4622      	mov	r2, r4
    415a:	f10d 0313 	add.w	r3, sp, #19
    415e:	a905      	add	r1, sp, #20
    4160:	9600      	str	r6, [sp, #0]
    4162:	f7ff fe35 	bl	3dd0 <write_bytes>
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    4166:	9600      	str	r6, [sp, #0]
    4168:	ab03      	add	r3, sp, #12
    416a:	4622      	mov	r2, r4
    416c:	a905      	add	r1, sp, #20
    416e:	4628      	mov	r0, r5
    4170:	f7ff fe2e 	bl	3dd0 <write_bytes>
	setOutputcs(1);
    4174:	4630      	mov	r0, r6
    4176:	f7ff fde3 	bl	3d40 <setOutputcs>
    417a:	e7df      	b.n	413c <WriteOneDot+0x28>
    417c:	0002b29a 	.word	0x0002b29a
    4180:	00027b0c 	.word	0x00027b0c

00004184 <DispOneChar>:
{
    4184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    4188:	4604      	mov	r4, r0
    418a:	461e      	mov	r6, r3
    418c:	4608      	mov	r0, r1
	BlockWrite(Xstart, Xstart + (FONT_W - 1), Ystart,
    418e:	f102 0314 	add.w	r3, r2, #20
    4192:	310f      	adds	r1, #15
    4194:	f01d fa50 	bl	21638 <BlockWrite>
	if (index > 95) //95:ASCII CHAR NUM
    4198:	4620      	mov	r0, r4
    419a:	2c5f      	cmp	r4, #95	; 0x5f
	p = p + index;
    419c:	4c0c      	ldr	r4, [pc, #48]	; (41d0 <DispOneChar+0x4c>)
    419e:	f04f 032a 	mov.w	r3, #42	; 0x2a
    41a2:	bf28      	it	cs
    41a4:	205f      	movcs	r0, #95	; 0x5f
    41a6:	fb03 4400 	mla	r4, r3, r0, r4
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    41aa:	18e7      	adds	r7, r4, r3
		dat = *p++;
    41ac:	f814 8b01 	ldrb.w	r8, [r4], #1
    41b0:	2500      	movs	r5, #0
			if ((dat << j) & 0x80) {
    41b2:	fa08 f305 	lsl.w	r3, r8, r5
    41b6:	061b      	lsls	r3, r3, #24
				WriteOneDot(BackColor);
    41b8:	bf54      	ite	pl
    41ba:	9806      	ldrpl	r0, [sp, #24]
				WriteOneDot(TextColor);
    41bc:	4630      	movmi	r0, r6
		for (j = 0; j < 8; j++) {
    41be:	3501      	adds	r5, #1
				WriteOneDot(BackColor);
    41c0:	f7ff ffa8 	bl	4114 <WriteOneDot>
		for (j = 0; j < 8; j++) {
    41c4:	2d08      	cmp	r5, #8
    41c6:	d1f4      	bne.n	41b2 <DispOneChar+0x2e>
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    41c8:	42a7      	cmp	r7, r4
    41ca:	d1ef      	bne.n	41ac <DispOneChar+0x28>
}
    41cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    41d0:	200008ec 	.word	0x200008ec

000041d4 <init_output>:

struct device *globalBuzzer;
struct device *globalMotor;

s16_t init_output()
{
    41d4:	b570      	push	{r4, r5, r6, lr}
    41d6:	4817      	ldr	r0, [pc, #92]	; (4234 <init_output+0x60>)
    41d8:	f01b f9fc 	bl	1f5d4 <z_impl_device_get_binding>
    struct device *buzzer;
    int ret;
    buzzer = device_get_binding(BUZZER_GPIO_LABEL);
    if (buzzer == NULL)
    41dc:	4606      	mov	r6, r0
    41de:	b930      	cbnz	r0, 41ee <init_output+0x1a>
    {
        printk("Didn't find device %s\n", BUZZER_GPIO_LABEL);
    41e0:	4815      	ldr	r0, [pc, #84]	; (4238 <init_output+0x64>)
    41e2:	4914      	ldr	r1, [pc, #80]	; (4234 <init_output+0x60>)
    41e4:	f01d fbec 	bl	219c0 <printk>
        return -1;
    41e8:	f04f 30ff 	mov.w	r0, #4294967295
    }
    printk("INITIALISING OUTPUTS : OK\n");
    globalBuzzer = buzzer;
    globalMotor = motor;
    return 0;
}
    41ec:	bd70      	pop	{r4, r5, r6, pc}
    ret = gpio_pin_configure(buzzer, BUZZER_GPIO_PIN, BUZZER_GPIO_FLAGS);
    41ee:	2104      	movs	r1, #4
    41f0:	f01d fb13 	bl	2181a <gpio_pin_configure.constprop.0>
    if (ret != 0)
    41f4:	4604      	mov	r4, r0
    41f6:	b138      	cbz	r0, 4208 <init_output+0x34>
        printk("Error %d: failed to configure device %s pin %d\n",
    41f8:	2304      	movs	r3, #4
        printk("Error %d: failed to configure device %s pin %d\n",
    41fa:	4810      	ldr	r0, [pc, #64]	; (423c <init_output+0x68>)
    41fc:	4a0d      	ldr	r2, [pc, #52]	; (4234 <init_output+0x60>)
    41fe:	4621      	mov	r1, r4
    4200:	f01d fbde 	bl	219c0 <printk>
        return ret;
    4204:	b220      	sxth	r0, r4
    4206:	e7f1      	b.n	41ec <init_output+0x18>
    4208:	480a      	ldr	r0, [pc, #40]	; (4234 <init_output+0x60>)
    420a:	f01b f9e3 	bl	1f5d4 <z_impl_device_get_binding>
    if (motor == NULL)
    420e:	4605      	mov	r5, r0
    4210:	2800      	cmp	r0, #0
    4212:	d0e5      	beq.n	41e0 <init_output+0xc>
    ret = gpio_pin_configure(motor, MOTOR_GPIO_PIN, MOTOR_GPIO_FLAGS);
    4214:	2103      	movs	r1, #3
    4216:	f01d fb00 	bl	2181a <gpio_pin_configure.constprop.0>
    if (ret != 0)
    421a:	4604      	mov	r4, r0
    421c:	b108      	cbz	r0, 4222 <init_output+0x4e>
        printk("Error %d: failed to configure device %s pin %d\n",
    421e:	2303      	movs	r3, #3
    4220:	e7eb      	b.n	41fa <init_output+0x26>
    printk("INITIALISING OUTPUTS : OK\n");
    4222:	4807      	ldr	r0, [pc, #28]	; (4240 <init_output+0x6c>)
    4224:	f01d fbcc 	bl	219c0 <printk>
    globalBuzzer = buzzer;
    4228:	4b06      	ldr	r3, [pc, #24]	; (4244 <init_output+0x70>)
    422a:	601e      	str	r6, [r3, #0]
    globalMotor = motor;
    422c:	4b06      	ldr	r3, [pc, #24]	; (4248 <init_output+0x74>)
    return 0;
    422e:	4620      	mov	r0, r4
    globalMotor = motor;
    4230:	601d      	str	r5, [r3, #0]
    return 0;
    4232:	e7db      	b.n	41ec <init_output+0x18>
    4234:	0002afc0 	.word	0x0002afc0
    4238:	0002b1cf 	.word	0x0002b1cf
    423c:	0002b1e6 	.word	0x0002b1e6
    4240:	0002b216 	.word	0x0002b216
    4244:	2000d4d8 	.word	0x2000d4d8
    4248:	2000d4dc 	.word	0x2000d4dc

0000424c <toggle_buzzer>:

bool toggle_buzzer(bool val)
{
    424c:	b538      	push	{r3, r4, r5, lr}
    if (val = 1)
    {
        for (int i = 0; i < 1000; i++)
        {
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    424e:	4d0b      	ldr	r5, [pc, #44]	; (427c <toggle_buzzer+0x30>)
{
    4250:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    4254:	6828      	ldr	r0, [r5, #0]
    4256:	2201      	movs	r2, #1
    4258:	2104      	movs	r1, #4
    425a:	f01d faee 	bl	2183a <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
    425e:	20fa      	movs	r0, #250	; 0xfa
    4260:	f022 fe93 	bl	26f8a <z_impl_k_busy_wait>
            k_busy_wait(250);
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 0);
    4264:	6828      	ldr	r0, [r5, #0]
    4266:	2200      	movs	r2, #0
    4268:	2104      	movs	r1, #4
    426a:	f01d fae6 	bl	2183a <gpio_pin_set.isra.0>
    426e:	20fa      	movs	r0, #250	; 0xfa
    4270:	f022 fe8b 	bl	26f8a <z_impl_k_busy_wait>
        for (int i = 0; i < 1000; i++)
    4274:	3c01      	subs	r4, #1
    4276:	d1ed      	bne.n	4254 <toggle_buzzer+0x8>
        }
    }
    else
        gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    return val;
}
    4278:	2001      	movs	r0, #1
    427a:	bd38      	pop	{r3, r4, r5, pc}
    427c:	2000d4d8 	.word	0x2000d4d8

00004280 <toggle_motor>:
bool toggle_motor(bool val)
{
    4280:	b510      	push	{r4, lr}
    if (val)
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    4282:	4c09      	ldr	r4, [pc, #36]	; (42a8 <toggle_motor+0x28>)
{
    4284:	4603      	mov	r3, r0
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    4286:	2201      	movs	r2, #1
    4288:	6820      	ldr	r0, [r4, #0]
    428a:	2103      	movs	r1, #3
    if (val)
    428c:	b14b      	cbz	r3, 42a2 <toggle_motor+0x22>
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    428e:	f01d fad4 	bl	2183a <gpio_pin_set.isra.0>
	return z_impl_k_sleep(timeout);
    4292:	2100      	movs	r1, #0
    4294:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    4298:	f01c f812 	bl	202c0 <z_impl_k_sleep>
        k_msleep(250);
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 0);
    429c:	6820      	ldr	r0, [r4, #0]
    429e:	2200      	movs	r2, #0
    42a0:	2103      	movs	r1, #3
    }
    else
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    42a2:	f01d faca 	bl	2183a <gpio_pin_set.isra.0>
    }
    42a6:	bd10      	pop	{r4, pc}
    42a8:	2000d4dc 	.word	0x2000d4dc

000042ac <htmc_ccc_cfg_changed>:
static struct bt_gatt_indicate_params ind_params;

static void htmc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
				 uint16_t value)
{
	simulate_htm = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
    42ac:	1e8b      	subs	r3, r1, #2
    42ae:	4259      	negs	r1, r3
    42b0:	4159      	adcs	r1, r3
    42b2:	4b01      	ldr	r3, [pc, #4]	; (42b8 <htmc_ccc_cfg_changed+0xc>)
    42b4:	7019      	strb	r1, [r3, #0]
}
    42b6:	4770      	bx	lr
    42b8:	2000ed80 	.word	0x2000ed80

000042bc <indicate_destroy>:
{
	printk("Indication %s\n", err != 0U ? "fail" : "success");
}

static void indicate_destroy(struct bt_gatt_indicate_params *params)
{
    42bc:	b508      	push	{r3, lr}
	printk("Indication complete\n");
    42be:	4803      	ldr	r0, [pc, #12]	; (42cc <indicate_destroy+0x10>)
    42c0:	f01d fb7e 	bl	219c0 <printk>
	indicating = 0U;
    42c4:	4b02      	ldr	r3, [pc, #8]	; (42d0 <indicate_destroy+0x14>)
    42c6:	2200      	movs	r2, #0
    42c8:	701a      	strb	r2, [r3, #0]
}
    42ca:	bd08      	pop	{r3, pc}
    42cc:	0002b2f6 	.word	0x0002b2f6
    42d0:	2000ed7f 	.word	0x2000ed7f

000042d4 <indicate_cb>:
	printk("Indication %s\n", err != 0U ? "fail" : "success");
    42d4:	4903      	ldr	r1, [pc, #12]	; (42e4 <indicate_cb+0x10>)
    42d6:	4b04      	ldr	r3, [pc, #16]	; (42e8 <indicate_cb+0x14>)
    42d8:	4804      	ldr	r0, [pc, #16]	; (42ec <indicate_cb+0x18>)
    42da:	2a00      	cmp	r2, #0
    42dc:	bf08      	it	eq
    42de:	4619      	moveq	r1, r3
    42e0:	f01d bb6e 	b.w	219c0 <printk>
    42e4:	0002b30b 	.word	0x0002b30b
    42e8:	0002b310 	.word	0x0002b310
    42ec:	0002b318 	.word	0x0002b318

000042f0 <hts_init>:
		    BT_GATT_PERM_READ | BT_GATT_PERM_WRITE),
	/* more optional Characteristics */
);

void hts_init(void)
{
    42f0:	b508      	push	{r3, lr}
    42f2:	4809      	ldr	r0, [pc, #36]	; (4318 <hts_init+0x28>)
    42f4:	f01b f96e 	bl	1f5d4 <z_impl_device_get_binding>
	temp_dev = device_get_binding("TEMP_0");
    42f8:	4b08      	ldr	r3, [pc, #32]	; (431c <hts_init+0x2c>)
    42fa:	4601      	mov	r1, r0
    42fc:	6018      	str	r0, [r3, #0]

	if (!temp_dev) {
    42fe:	b920      	cbnz	r0, 430a <hts_init+0x1a>
		return;
	}

	printk("temp device is %p, name is %s\n", temp_dev,
	       temp_dev->name);
}
    4300:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("error: no temp device\n");
    4304:	4806      	ldr	r0, [pc, #24]	; (4320 <hts_init+0x30>)
    4306:	f01d bb5b 	b.w	219c0 <printk>
	printk("temp device is %p, name is %s\n", temp_dev,
    430a:	6802      	ldr	r2, [r0, #0]
    430c:	4805      	ldr	r0, [pc, #20]	; (4324 <hts_init+0x34>)
}
    430e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("temp device is %p, name is %s\n", temp_dev,
    4312:	f01d bb55 	b.w	219c0 <printk>
    4316:	bf00      	nop
    4318:	0002b327 	.word	0x0002b327
    431c:	2000d4f8 	.word	0x2000d4f8
    4320:	0002b32e 	.word	0x0002b32e
    4324:	0002b345 	.word	0x0002b345

00004328 <hts_indicate>:

void hts_indicate(double temp)
{
    4328:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Temperature measurements simulation */
	struct sensor_value temp_value;

	if (simulate_htm) {
    432a:	4b25      	ldr	r3, [pc, #148]	; (43c0 <hts_indicate+0x98>)
    432c:	781b      	ldrb	r3, [r3, #0]
{
    432e:	4604      	mov	r4, r0
    4330:	460d      	mov	r5, r1
	if (simulate_htm) {
    4332:	2b00      	cmp	r3, #0
    4334:	d042      	beq.n	43bc <hts_indicate+0x94>
		static double temperature = 20U;
		uint32_t mantissa;
		uint8_t exponent;
		int r;

		if (indicating) {
    4336:	4e23      	ldr	r6, [pc, #140]	; (43c4 <hts_indicate+0x9c>)
    4338:	7833      	ldrb	r3, [r6, #0]
    433a:	2b00      	cmp	r3, #0
    433c:	d13e      	bne.n	43bc <hts_indicate+0x94>
			return;
		}

		if (!temp_dev) {
    433e:	4f22      	ldr	r7, [pc, #136]	; (43c8 <hts_indicate+0xa0>)
    4340:	6838      	ldr	r0, [r7, #0]
    4342:	b198      	cbz	r0, 436c <hts_indicate+0x44>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    4344:	6883      	ldr	r3, [r0, #8]
    4346:	2138      	movs	r1, #56	; 0x38
    4348:	68db      	ldr	r3, [r3, #12]
    434a:	4798      	blx	r3

			goto gatt_indicate;
		}

		r = sensor_sample_fetch(temp_dev);
		if (r) {
    434c:	4601      	mov	r1, r0
    434e:	b110      	cbz	r0, 4356 <hts_indicate+0x2e>
			printk("sensor_sample_fetch failed return: %d\n", r);
    4350:	481e      	ldr	r0, [pc, #120]	; (43cc <hts_indicate+0xa4>)
    4352:	f01d fb35 	bl	219c0 <printk>
		}

		r = sensor_channel_get(temp_dev, SENSOR_CHAN_DIE_TEMP,
    4356:	6838      	ldr	r0, [r7, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    4358:	6883      	ldr	r3, [r0, #8]
    435a:	210c      	movs	r1, #12
    435c:	691b      	ldr	r3, [r3, #16]
    435e:	466a      	mov	r2, sp
    4360:	4798      	blx	r3
				       &temp_value);
		if (r) {
    4362:	4601      	mov	r1, r0
    4364:	b110      	cbz	r0, 436c <hts_indicate+0x44>
			printk("sensor_channel_get failed return: %d\n", r);
    4366:	481a      	ldr	r0, [pc, #104]	; (43d0 <hts_indicate+0xa8>)
    4368:	f01d fb2a 	bl	219c0 <printk>
		}

		temperature = sensor_value_to_double(&temp_value);

gatt_indicate:
		printf("temperature is %g C\n", temp);
    436c:	4622      	mov	r2, r4
    436e:	462b      	mov	r3, r5
    4370:	4818      	ldr	r0, [pc, #96]	; (43d4 <hts_indicate+0xac>)
    4372:	f003 fe03 	bl	7f7c <printf>

		mantissa = (uint32_t)(temp * 100);
    4376:	4b18      	ldr	r3, [pc, #96]	; (43d8 <hts_indicate+0xb0>)
    4378:	2200      	movs	r2, #0
    437a:	4620      	mov	r0, r4
    437c:	4629      	mov	r1, r5
    437e:	f7fc f87b 	bl	478 <__aeabi_dmul>
    4382:	f7fc fab3 	bl	8ec <__aeabi_d2uiz>
		exponent = (uint8_t)-2;

		htm[0] = 0; /* temperature in celcius */
    4386:	4a15      	ldr	r2, [pc, #84]	; (43dc <hts_indicate+0xb4>)
		mantissa = (uint32_t)(temp * 100);
    4388:	4603      	mov	r3, r0
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    438a:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
    438e:	7053      	strb	r3, [r2, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    4390:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    4392:	7091      	strb	r1, [r2, #2]
	dst[2] = val >> 16;
    4394:	70d3      	strb	r3, [r2, #3]
		sys_put_le24(mantissa, (uint8_t *)&htm[1]);
		htm[4] = exponent;

		ind_params.attr = &hts_svc.attrs[2];
    4396:	4912      	ldr	r1, [pc, #72]	; (43e0 <hts_indicate+0xb8>)
		htm[4] = exponent;
    4398:	23fe      	movs	r3, #254	; 0xfe
    439a:	7113      	strb	r3, [r2, #4]
		ind_params.attr = &hts_svc.attrs[2];
    439c:	4b11      	ldr	r3, [pc, #68]	; (43e4 <hts_indicate+0xbc>)
    439e:	604b      	str	r3, [r1, #4]
		ind_params.func = indicate_cb;
    43a0:	4b11      	ldr	r3, [pc, #68]	; (43e8 <hts_indicate+0xc0>)
    43a2:	608b      	str	r3, [r1, #8]
		ind_params.destroy = indicate_destroy;
    43a4:	4b11      	ldr	r3, [pc, #68]	; (43ec <hts_indicate+0xc4>)
		htm[0] = 0; /* temperature in celcius */
    43a6:	2000      	movs	r0, #0
		ind_params.data = &htm;
    43a8:	e9c1 3203 	strd	r3, r2, [r1, #12]
		htm[0] = 0; /* temperature in celcius */
    43ac:	7010      	strb	r0, [r2, #0]
		ind_params.len = sizeof(htm);
    43ae:	2305      	movs	r3, #5
    43b0:	828b      	strh	r3, [r1, #20]

		if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    43b2:	f009 fddd 	bl	df70 <bt_gatt_indicate>
    43b6:	b908      	cbnz	r0, 43bc <hts_indicate+0x94>
			indicating = 1U;
    43b8:	2301      	movs	r3, #1
    43ba:	7033      	strb	r3, [r6, #0]
		}
	}
}
    43bc:	b003      	add	sp, #12
    43be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    43c0:	2000ed80 	.word	0x2000ed80
    43c4:	2000ed7f 	.word	0x2000ed7f
    43c8:	2000d4f8 	.word	0x2000d4f8
    43cc:	0002b364 	.word	0x0002b364
    43d0:	0002b38b 	.word	0x0002b38b
    43d4:	0002b3b1 	.word	0x0002b3b1
    43d8:	40590000 	.word	0x40590000
    43dc:	2000ed7a 	.word	0x2000ed7a
    43e0:	2000d4e0 	.word	0x2000d4e0
    43e4:	00027b38 	.word	0x00027b38
    43e8:	000042d5 	.word	0x000042d5
    43ec:	000042bd 	.word	0x000042bd

000043f0 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    43f0:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    43f2:	4c0a      	ldr	r4, [pc, #40]	; (441c <crc8_ccitt+0x2c>)
    43f4:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    43f6:	4291      	cmp	r1, r2
    43f8:	d100      	bne.n	43fc <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    43fa:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    43fc:	f811 3b01 	ldrb.w	r3, [r1], #1
    4400:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    4402:	0903      	lsrs	r3, r0, #4
    4404:	5ce3      	ldrb	r3, [r4, r3]
    4406:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    440a:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    440c:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4410:	5ce0      	ldrb	r0, [r4, r3]
    4412:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    4416:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    4418:	e7ed      	b.n	43f6 <crc8_ccitt+0x6>
    441a:	bf00      	nop
    441c:	0002b3c6 	.word	0x0002b3c6

00004420 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4420:	680b      	ldr	r3, [r1, #0]
    4422:	3301      	adds	r3, #1
    4424:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    4426:	4b01      	ldr	r3, [pc, #4]	; (442c <char_out+0xc>)
    4428:	681b      	ldr	r3, [r3, #0]
    442a:	4718      	bx	r3
    442c:	20000274 	.word	0x20000274

00004430 <__printk_hook_install>:
	_char_out = fn;
    4430:	4b01      	ldr	r3, [pc, #4]	; (4438 <__printk_hook_install+0x8>)
    4432:	6018      	str	r0, [r3, #0]
}
    4434:	4770      	bx	lr
    4436:	bf00      	nop
    4438:	20000274 	.word	0x20000274

0000443c <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    443c:	b507      	push	{r0, r1, r2, lr}
    443e:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    4440:	2100      	movs	r1, #0
{
    4442:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    4444:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    4446:	4803      	ldr	r0, [pc, #12]	; (4454 <vprintk+0x18>)
    4448:	a901      	add	r1, sp, #4
    444a:	f000 f8f9 	bl	4640 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    444e:	b003      	add	sp, #12
    4450:	f85d fb04 	ldr.w	pc, [sp], #4
    4454:	00004421 	.word	0x00004421

00004458 <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    4458:	b530      	push	{r4, r5, lr}
    445a:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    445c:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    4460:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    4462:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    4464:	a901      	add	r1, sp, #4
    4466:	4805      	ldr	r0, [pc, #20]	; (447c <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    4468:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    446a:	f000 f8e9 	bl	4640 <cbvprintf>

	if (ctx.count < ctx.max) {
    446e:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    4472:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    4474:	bfb8      	it	lt
    4476:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    4478:	b005      	add	sp, #20
    447a:	bd30      	pop	{r4, r5, pc}
    447c:	0002199b 	.word	0x0002199b

00004480 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    4480:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4484:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    4488:	f019 0808 	ands.w	r8, r9, #8
{
    448c:	4604      	mov	r4, r0
    448e:	4693      	mov	fp, r2
	if (processing) {
    4490:	d00d      	beq.n	44ae <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    4492:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    4494:	bf0c      	ite	eq
    4496:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    449a:	f049 0920 	orrne.w	r9, r9, #32
    449e:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    44a2:	f38b 8811 	msr	BASEPRI, fp
    44a6:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    44aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    44ae:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    44b2:	2902      	cmp	r1, #2
    44b4:	d107      	bne.n	44c6 <process_event+0x46>
			evt = process_recheck(mgr);
    44b6:	4620      	mov	r0, r4
    44b8:	f01d fa9c 	bl	219f4 <process_recheck>
		if (evt == EVT_NOP) {
    44bc:	2800      	cmp	r0, #0
    44be:	d0f0      	beq.n	44a2 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    44c0:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    44c2:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    44c4:	d14e      	bne.n	4564 <process_event+0xe4>
			res = mgr->last_res;
    44c6:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    44c8:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    44ca:	2f00      	cmp	r7, #0
    44cc:	da15      	bge.n	44fa <process_event+0x7a>
		*clients = mgr->clients;
    44ce:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    44d0:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    44d4:	e9c4 8800 	strd	r8, r8, [r4]
    44d8:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    44dc:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    44de:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    44e0:	8b21      	ldrh	r1, [r4, #24]
    44e2:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    44e6:	45ca      	cmp	sl, r9
    44e8:	d002      	beq.n	44f0 <process_event+0x70>
		if (do_monitors
    44ea:	68a3      	ldr	r3, [r4, #8]
    44ec:	2b00      	cmp	r3, #0
    44ee:	d15a      	bne.n	45a6 <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    44f0:	b90d      	cbnz	r5, 44f6 <process_event+0x76>
		    || (transit != NULL)) {
    44f2:	2e00      	cmp	r6, #0
    44f4:	d071      	beq.n	45da <process_event+0x15a>
    44f6:	2300      	movs	r3, #0
    44f8:	e056      	b.n	45a8 <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    44fa:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    44fe:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4500:	2a01      	cmp	r2, #1
    4502:	d81e      	bhi.n	4542 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4504:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    4508:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    450a:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    450c:	b289      	uxth	r1, r1
    450e:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4512:	d10a      	bne.n	452a <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4514:	b13d      	cbz	r5, 4526 <process_event+0xa6>
    4516:	8b63      	ldrh	r3, [r4, #26]
    4518:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    451a:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    451c:	3301      	adds	r3, #1
    451e:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4520:	2a00      	cmp	r2, #0
    4522:	d1fa      	bne.n	451a <process_event+0x9a>
    4524:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4526:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    452a:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    452c:	4620      	mov	r0, r4
    452e:	f01d fa61 	bl	219f4 <process_recheck>
    4532:	4606      	mov	r6, r0
    4534:	2800      	cmp	r0, #0
    4536:	d0d3      	beq.n	44e0 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    4538:	8b23      	ldrh	r3, [r4, #24]
    453a:	f043 0320 	orr.w	r3, r3, #32
    453e:	8323      	strh	r3, [r4, #24]
    4540:	e7cd      	b.n	44de <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    4542:	2b04      	cmp	r3, #4
    4544:	d10c      	bne.n	4560 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4546:	f021 0107 	bic.w	r1, r1, #7
    454a:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    454c:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    454e:	4620      	mov	r0, r4
    4550:	f01d fa50 	bl	219f4 <process_recheck>
    4554:	4605      	mov	r5, r0
    4556:	2800      	cmp	r0, #0
    4558:	d0c1      	beq.n	44de <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    455a:	f041 0120 	orr.w	r1, r1, #32
    455e:	8321      	strh	r1, [r4, #24]
    4560:	2500      	movs	r5, #0
    4562:	e7bc      	b.n	44de <process_event+0x5e>
		} else if (evt == EVT_START) {
    4564:	2803      	cmp	r0, #3
    4566:	d109      	bne.n	457c <process_event+0xfc>
			transit = mgr->transitions->start;
    4568:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    456a:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    456e:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4570:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    4574:	8323      	strh	r3, [r4, #24]
}
    4576:	2500      	movs	r5, #0
		res = 0;
    4578:	462f      	mov	r7, r5
    457a:	e7b1      	b.n	44e0 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    457c:	2804      	cmp	r0, #4
    457e:	d106      	bne.n	458e <process_event+0x10e>
			transit = mgr->transitions->stop;
    4580:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4582:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    4586:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4588:	f043 0304 	orr.w	r3, r3, #4
    458c:	e7f2      	b.n	4574 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    458e:	2805      	cmp	r0, #5
    4590:	d106      	bne.n	45a0 <process_event+0x120>
			transit = mgr->transitions->reset;
    4592:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4594:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    4598:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    459a:	f043 0305 	orr.w	r3, r3, #5
    459e:	e7e9      	b.n	4574 <process_event+0xf4>
    45a0:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    45a2:	462e      	mov	r6, r5
    45a4:	e7e8      	b.n	4578 <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    45a6:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    45a8:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    45ac:	8321      	strh	r1, [r4, #24]
    45ae:	f38b 8811 	msr	BASEPRI, fp
    45b2:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    45b6:	b9fb      	cbnz	r3, 45f8 <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    45b8:	bb85      	cbnz	r5, 461c <process_event+0x19c>
			if (transit != NULL) {
    45ba:	b116      	cbz	r6, 45c2 <process_event+0x142>
				transit(mgr, transition_complete);
    45bc:	491f      	ldr	r1, [pc, #124]	; (463c <process_event+0x1bc>)
    45be:	4620      	mov	r0, r4
    45c0:	47b0      	blx	r6
	__asm__ volatile(
    45c2:	f04f 0320 	mov.w	r3, #32
    45c6:	f3ef 8b11 	mrs	fp, BASEPRI
    45ca:	f383 8811 	msr	BASEPRI, r3
    45ce:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    45d2:	8b23      	ldrh	r3, [r4, #24]
    45d4:	f023 0308 	bic.w	r3, r3, #8
    45d8:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    45da:	8b23      	ldrh	r3, [r4, #24]
    45dc:	06da      	lsls	r2, r3, #27
    45de:	d525      	bpl.n	462c <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    45e0:	f023 0310 	bic.w	r3, r3, #16
    45e4:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    45e6:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    45e8:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    45ec:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    45f0:	2900      	cmp	r1, #0
    45f2:	f47f af5e 	bne.w	44b2 <process_event+0x32>
out:
    45f6:	e754      	b.n	44a2 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    45f8:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    45fa:	2900      	cmp	r1, #0
    45fc:	d0dc      	beq.n	45b8 <process_event+0x138>
	return node->next;
    45fe:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    4602:	f8d1 b004 	ldr.w	fp, [r1, #4]
    4606:	463b      	mov	r3, r7
    4608:	4652      	mov	r2, sl
    460a:	4620      	mov	r0, r4
    460c:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    460e:	f1b9 0f00 	cmp.w	r9, #0
    4612:	d0d1      	beq.n	45b8 <process_event+0x138>
    4614:	4649      	mov	r1, r9
    4616:	f8d9 9000 	ldr.w	r9, [r9]
    461a:	e7f2      	b.n	4602 <process_event+0x182>
    461c:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    461e:	463b      	mov	r3, r7
    4620:	4652      	mov	r2, sl
    4622:	4620      	mov	r0, r4
    4624:	682d      	ldr	r5, [r5, #0]
    4626:	f01d fa01 	bl	21a2c <notify_one>
    462a:	e7c5      	b.n	45b8 <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    462c:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4630:	bf1e      	ittt	ne
    4632:	f023 0320 	bicne.w	r3, r3, #32
    4636:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    4638:	2102      	movne	r1, #2
    463a:	e7d5      	b.n	45e8 <process_event+0x168>
    463c:	00021a59 	.word	0x00021a59

00004640 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    4640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4644:	4681      	mov	r9, r0
    4646:	b09b      	sub	sp, #108	; 0x6c
    4648:	468a      	mov	sl, r1
    464a:	4615      	mov	r5, r2
    464c:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    464e:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    4650:	7828      	ldrb	r0, [r5, #0]
    4652:	b910      	cbnz	r0, 465a <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    4654:	4630      	mov	r0, r6
    4656:	f000 bdee 	b.w	5236 <cbvprintf+0xbf6>
			OUTC(*fp++);
    465a:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    465c:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    465e:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    4660:	d006      	beq.n	4670 <cbvprintf+0x30>
			OUTC(*fp++);
    4662:	4651      	mov	r1, sl
			OUTC('%');
    4664:	47c8      	blx	r9
    4666:	2800      	cmp	r0, #0
    4668:	f2c0 85e5 	blt.w	5236 <cbvprintf+0xbf6>
    466c:	3601      	adds	r6, #1
		if (bps == NULL) {
    466e:	e24c      	b.n	4b0a <cbvprintf+0x4ca>
		} state = {
    4670:	2218      	movs	r2, #24
    4672:	2100      	movs	r1, #0
    4674:	a80c      	add	r0, sp, #48	; 0x30
    4676:	f01f fe70 	bl	2435a <memset>
	if (*sp == '%') {
    467a:	786b      	ldrb	r3, [r5, #1]
    467c:	2b25      	cmp	r3, #37	; 0x25
    467e:	d07c      	beq.n	477a <cbvprintf+0x13a>
    4680:	2200      	movs	r2, #0
    4682:	1c68      	adds	r0, r5, #1
    4684:	4696      	mov	lr, r2
    4686:	4690      	mov	r8, r2
    4688:	4694      	mov	ip, r2
    468a:	4617      	mov	r7, r2
    468c:	4601      	mov	r1, r0
		switch (*sp) {
    468e:	f810 3b01 	ldrb.w	r3, [r0], #1
    4692:	2b2b      	cmp	r3, #43	; 0x2b
    4694:	f000 80a0 	beq.w	47d8 <cbvprintf+0x198>
    4698:	f200 8097 	bhi.w	47ca <cbvprintf+0x18a>
    469c:	2b20      	cmp	r3, #32
    469e:	f000 809e 	beq.w	47de <cbvprintf+0x19e>
    46a2:	2b23      	cmp	r3, #35	; 0x23
    46a4:	f000 809e 	beq.w	47e4 <cbvprintf+0x1a4>
    46a8:	b12f      	cbz	r7, 46b6 <cbvprintf+0x76>
    46aa:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    46ae:	f040 0004 	orr.w	r0, r0, #4
    46b2:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    46b6:	f1bc 0f00 	cmp.w	ip, #0
    46ba:	d005      	beq.n	46c8 <cbvprintf+0x88>
    46bc:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    46c0:	f040 0008 	orr.w	r0, r0, #8
    46c4:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    46c8:	f1b8 0f00 	cmp.w	r8, #0
    46cc:	d005      	beq.n	46da <cbvprintf+0x9a>
    46ce:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    46d2:	f040 0010 	orr.w	r0, r0, #16
    46d6:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    46da:	f1be 0f00 	cmp.w	lr, #0
    46de:	d005      	beq.n	46ec <cbvprintf+0xac>
    46e0:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    46e4:	f040 0020 	orr.w	r0, r0, #32
    46e8:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    46ec:	b12a      	cbz	r2, 46fa <cbvprintf+0xba>
    46ee:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    46f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    46f6:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    46fa:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    46fe:	f002 0044 	and.w	r0, r2, #68	; 0x44
    4702:	2844      	cmp	r0, #68	; 0x44
    4704:	d103      	bne.n	470e <cbvprintf+0xce>
		conv->flag_zero = false;
    4706:	f36f 1286 	bfc	r2, #6, #1
    470a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    470e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    4712:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    4714:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4718:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    471c:	d17e      	bne.n	481c <cbvprintf+0x1dc>
		conv->width_star = true;
    471e:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4722:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    4726:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    4728:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    472c:	781a      	ldrb	r2, [r3, #0]
    472e:	2a2e      	cmp	r2, #46	; 0x2e
    4730:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4734:	bf0c      	ite	eq
    4736:	2101      	moveq	r1, #1
    4738:	2100      	movne	r1, #0
    473a:	f361 0241 	bfi	r2, r1, #1, #1
    473e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    4742:	d177      	bne.n	4834 <cbvprintf+0x1f4>
	if (*sp == '*') {
    4744:	785a      	ldrb	r2, [r3, #1]
    4746:	2a2a      	cmp	r2, #42	; 0x2a
    4748:	d06d      	beq.n	4826 <cbvprintf+0x1e6>
	++sp;
    474a:	3301      	adds	r3, #1
	size_t val = 0;
    474c:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    474e:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    4752:	4618      	mov	r0, r3
    4754:	f810 2b01 	ldrb.w	r2, [r0], #1
    4758:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    475c:	2f09      	cmp	r7, #9
    475e:	f240 80ab 	bls.w	48b8 <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    4762:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    4766:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    4768:	f3c2 0040 	ubfx	r0, r2, #1, #1
    476c:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    4770:	f361 0241 	bfi	r2, r1, #1, #1
    4774:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    4778:	e05c      	b.n	4834 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    477a:	1caa      	adds	r2, r5, #2
    477c:	9202      	str	r2, [sp, #8]
    477e:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    4782:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4786:	07df      	lsls	r7, r3, #31
    4788:	f140 8173 	bpl.w	4a72 <cbvprintf+0x432>
			width = va_arg(ap, int);
    478c:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    4790:	f1bb 0f00 	cmp.w	fp, #0
    4794:	da07      	bge.n	47a6 <cbvprintf+0x166>
				conv->flag_dash = true;
    4796:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    479a:	f042 0204 	orr.w	r2, r2, #4
    479e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    47a2:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    47a6:	0758      	lsls	r0, r3, #29
    47a8:	f140 816c 	bpl.w	4a84 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    47ac:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    47b0:	f1b8 0f00 	cmp.w	r8, #0
    47b4:	f280 816b 	bge.w	4a8e <cbvprintf+0x44e>
				conv->prec_present = false;
    47b8:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    47bc:	f36f 0341 	bfc	r3, #1, #1
    47c0:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    47c4:	f04f 38ff 	mov.w	r8, #4294967295
    47c8:	e161      	b.n	4a8e <cbvprintf+0x44e>
		switch (*sp) {
    47ca:	2b2d      	cmp	r3, #45	; 0x2d
    47cc:	d00d      	beq.n	47ea <cbvprintf+0x1aa>
    47ce:	2b30      	cmp	r3, #48	; 0x30
    47d0:	f47f af6a 	bne.w	46a8 <cbvprintf+0x68>
			conv->flag_zero = true;
    47d4:	2201      	movs	r2, #1
	} while (loop);
    47d6:	e759      	b.n	468c <cbvprintf+0x4c>
			conv->flag_plus = true;
    47d8:	f04f 0c01 	mov.w	ip, #1
    47dc:	e756      	b.n	468c <cbvprintf+0x4c>
			conv->flag_space = true;
    47de:	f04f 0801 	mov.w	r8, #1
    47e2:	e753      	b.n	468c <cbvprintf+0x4c>
			conv->flag_hash = true;
    47e4:	f04f 0e01 	mov.w	lr, #1
    47e8:	e750      	b.n	468c <cbvprintf+0x4c>
		switch (*sp) {
    47ea:	2701      	movs	r7, #1
    47ec:	e74e      	b.n	468c <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    47ee:	fb0c 7202 	mla	r2, ip, r2, r7
    47f2:	3a30      	subs	r2, #48	; 0x30
    47f4:	4603      	mov	r3, r0
    47f6:	4618      	mov	r0, r3
    47f8:	f810 7b01 	ldrb.w	r7, [r0], #1
    47fc:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4800:	f1be 0f09 	cmp.w	lr, #9
    4804:	d9f3      	bls.n	47ee <cbvprintf+0x1ae>
	if (sp != wp) {
    4806:	4299      	cmp	r1, r3
    4808:	d090      	beq.n	472c <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    480a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    480e:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    4810:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    4812:	f362 0141 	bfi	r1, r2, #1, #1
    4816:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    481a:	e787      	b.n	472c <cbvprintf+0xec>
    481c:	460b      	mov	r3, r1
	size_t val = 0;
    481e:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    4820:	f04f 0c0a 	mov.w	ip, #10
    4824:	e7e7      	b.n	47f6 <cbvprintf+0x1b6>
		conv->prec_star = true;
    4826:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    482a:	f042 0204 	orr.w	r2, r2, #4
    482e:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    4832:	3302      	adds	r3, #2
	switch (*sp) {
    4834:	4619      	mov	r1, r3
    4836:	f811 2b01 	ldrb.w	r2, [r1], #1
    483a:	2a6c      	cmp	r2, #108	; 0x6c
    483c:	d05c      	beq.n	48f8 <cbvprintf+0x2b8>
    483e:	d840      	bhi.n	48c2 <cbvprintf+0x282>
    4840:	2a68      	cmp	r2, #104	; 0x68
    4842:	d046      	beq.n	48d2 <cbvprintf+0x292>
    4844:	2a6a      	cmp	r2, #106	; 0x6a
    4846:	d061      	beq.n	490c <cbvprintf+0x2cc>
    4848:	2a4c      	cmp	r2, #76	; 0x4c
    484a:	d067      	beq.n	491c <cbvprintf+0x2dc>
    484c:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    484e:	460b      	mov	r3, r1
    4850:	f813 2b01 	ldrb.w	r2, [r3], #1
    4854:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    4856:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    4858:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    485c:	f200 80df 	bhi.w	4a1e <cbvprintf+0x3de>
    4860:	2a57      	cmp	r2, #87	; 0x57
    4862:	d868      	bhi.n	4936 <cbvprintf+0x2f6>
    4864:	2a41      	cmp	r2, #65	; 0x41
    4866:	d004      	beq.n	4872 <cbvprintf+0x232>
    4868:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    486c:	2b02      	cmp	r3, #2
    486e:	f200 80d6 	bhi.w	4a1e <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    4872:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    4876:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    487a:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    487c:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    4880:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    4884:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    4888:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    488c:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    4890:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    4894:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    4898:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    489a:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    489e:	b2cb      	uxtb	r3, r1
    48a0:	f100 80e5 	bmi.w	4a6e <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    48a4:	f003 0278 	and.w	r2, r3, #120	; 0x78
    48a8:	2a18      	cmp	r2, #24
    48aa:	f040 80b5 	bne.w	4a18 <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    48ae:	f36f 03c6 	bfc	r3, #3, #4
    48b2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    48b6:	e09c      	b.n	49f2 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    48b8:	fb0c 2101 	mla	r1, ip, r1, r2
    48bc:	3930      	subs	r1, #48	; 0x30
    48be:	4603      	mov	r3, r0
    48c0:	e747      	b.n	4752 <cbvprintf+0x112>
	switch (*sp) {
    48c2:	2a74      	cmp	r2, #116	; 0x74
    48c4:	d026      	beq.n	4914 <cbvprintf+0x2d4>
    48c6:	2a7a      	cmp	r2, #122	; 0x7a
    48c8:	d1c0      	bne.n	484c <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    48ca:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    48ce:	2206      	movs	r2, #6
    48d0:	e00d      	b.n	48ee <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    48d2:	785a      	ldrb	r2, [r3, #1]
    48d4:	2a68      	cmp	r2, #104	; 0x68
    48d6:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    48da:	d106      	bne.n	48ea <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    48dc:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    48de:	f361 02c6 	bfi	r2, r1, #3, #4
    48e2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    48e6:	1c99      	adds	r1, r3, #2
    48e8:	e7b1      	b.n	484e <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    48ea:	4613      	mov	r3, r2
    48ec:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    48ee:	f362 03c6 	bfi	r3, r2, #3, #4
    48f2:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    48f6:	e7aa      	b.n	484e <cbvprintf+0x20e>
		if (*++sp == 'l') {
    48f8:	785a      	ldrb	r2, [r3, #1]
    48fa:	2a6c      	cmp	r2, #108	; 0x6c
    48fc:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4900:	d101      	bne.n	4906 <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    4902:	2104      	movs	r1, #4
    4904:	e7eb      	b.n	48de <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    4906:	4613      	mov	r3, r2
    4908:	2203      	movs	r2, #3
    490a:	e7f0      	b.n	48ee <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    490c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4910:	2205      	movs	r2, #5
    4912:	e7ec      	b.n	48ee <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    4914:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4918:	2207      	movs	r2, #7
    491a:	e7e8      	b.n	48ee <cbvprintf+0x2ae>
		conv->unsupported = true;
    491c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    4920:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    4924:	f023 0302 	bic.w	r3, r3, #2
    4928:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    492c:	f043 0302 	orr.w	r3, r3, #2
    4930:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    4934:	e78b      	b.n	484e <cbvprintf+0x20e>
    4936:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    493a:	2b20      	cmp	r3, #32
    493c:	d86f      	bhi.n	4a1e <cbvprintf+0x3de>
    493e:	a101      	add	r1, pc, #4	; (adr r1, 4944 <cbvprintf+0x304>)
    4940:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    4944:	000049f7 	.word	0x000049f7
    4948:	00004a1f 	.word	0x00004a1f
    494c:	00004a1f 	.word	0x00004a1f
    4950:	00004a1f 	.word	0x00004a1f
    4954:	00004a1f 	.word	0x00004a1f
    4958:	00004a1f 	.word	0x00004a1f
    495c:	00004a1f 	.word	0x00004a1f
    4960:	00004a1f 	.word	0x00004a1f
    4964:	00004a1f 	.word	0x00004a1f
    4968:	00004873 	.word	0x00004873
    496c:	00004a1f 	.word	0x00004a1f
    4970:	000049f7 	.word	0x000049f7
    4974:	000049c9 	.word	0x000049c9
    4978:	00004873 	.word	0x00004873
    497c:	00004873 	.word	0x00004873
    4980:	00004873 	.word	0x00004873
    4984:	00004a1f 	.word	0x00004a1f
    4988:	000049c9 	.word	0x000049c9
    498c:	00004a1f 	.word	0x00004a1f
    4990:	00004a1f 	.word	0x00004a1f
    4994:	00004a1f 	.word	0x00004a1f
    4998:	00004a1f 	.word	0x00004a1f
    499c:	00004a2d 	.word	0x00004a2d
    49a0:	000049f7 	.word	0x000049f7
    49a4:	00004a51 	.word	0x00004a51
    49a8:	00004a1f 	.word	0x00004a1f
    49ac:	00004a1f 	.word	0x00004a1f
    49b0:	00004a51 	.word	0x00004a51
    49b4:	00004a1f 	.word	0x00004a1f
    49b8:	000049f7 	.word	0x000049f7
    49bc:	00004a1f 	.word	0x00004a1f
    49c0:	00004a1f 	.word	0x00004a1f
    49c4:	000049f7 	.word	0x000049f7
		conv->specifier_cat = SPECIFIER_SINT;
    49c8:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    49cc:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    49ce:	f361 0302 	bfi	r3, r1, #0, #3
    49d2:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    49d6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    49da:	f003 0378 	and.w	r3, r3, #120	; 0x78
    49de:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    49e0:	bf02      	ittt	eq
    49e2:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    49e6:	f041 0101 	orreq.w	r1, r1, #1
    49ea:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    49ee:	2a63      	cmp	r2, #99	; 0x63
    49f0:	d005      	beq.n	49fe <cbvprintf+0x3be>
	bool unsupported = false;
    49f2:	2300      	movs	r3, #0
    49f4:	e006      	b.n	4a04 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    49f6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    49fa:	2102      	movs	r1, #2
    49fc:	e7e7      	b.n	49ce <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    49fe:	3b00      	subs	r3, #0
    4a00:	bf18      	it	ne
    4a02:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    4a04:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4a08:	f3c2 0140 	ubfx	r1, r2, #1, #1
    4a0c:	430b      	orrs	r3, r1
    4a0e:	f363 0241 	bfi	r2, r3, #1, #1
    4a12:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    4a16:	e6b4      	b.n	4782 <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    4a18:	f013 0f38 	tst.w	r3, #56	; 0x38
    4a1c:	d0e9      	beq.n	49f2 <cbvprintf+0x3b2>
			conv->invalid = true;
    4a1e:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4a22:	f043 0301 	orr.w	r3, r3, #1
    4a26:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    4a2a:	e7e2      	b.n	49f2 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    4a2c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4a30:	2203      	movs	r2, #3
    4a32:	f362 0302 	bfi	r3, r2, #0, #3
    4a36:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    4a3a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4a3e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4a42:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    4a46:	f1dc 0300 	rsbs	r3, ip, #0
    4a4a:	eb43 030c 	adc.w	r3, r3, ip
    4a4e:	e7d9      	b.n	4a04 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    4a50:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4a54:	2203      	movs	r2, #3
    4a56:	f362 0302 	bfi	r3, r2, #0, #3
    4a5a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    4a5e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4a62:	f013 0f78 	tst.w	r3, #120	; 0x78
    4a66:	bf14      	ite	ne
    4a68:	2301      	movne	r3, #1
    4a6a:	2300      	moveq	r3, #0
    4a6c:	e7ca      	b.n	4a04 <cbvprintf+0x3c4>
			unsupported = true;
    4a6e:	2301      	movs	r3, #1
    4a70:	e7c8      	b.n	4a04 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    4a72:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    4a76:	2a00      	cmp	r2, #0
			width = conv->width_value;
    4a78:	bfb4      	ite	lt
    4a7a:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    4a7e:	f04f 3bff 	movge.w	fp, #4294967295
    4a82:	e690      	b.n	47a6 <cbvprintf+0x166>
		} else if (conv->prec_present) {
    4a84:	0799      	lsls	r1, r3, #30
    4a86:	f57f ae9d 	bpl.w	47c4 <cbvprintf+0x184>
			precision = conv->prec_value;
    4a8a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    4a8e:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    4a92:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    4a94:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    4a98:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    4a9c:	f003 0207 	and.w	r2, r3, #7
    4aa0:	2a04      	cmp	r2, #4
    4aa2:	d109      	bne.n	4ab8 <cbvprintf+0x478>
		    && !conv->prec_present) {
    4aa4:	078a      	lsls	r2, r1, #30
    4aa6:	d407      	bmi.n	4ab8 <cbvprintf+0x478>
			if (conv->specifier_a) {
    4aa8:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    4aac:	2a00      	cmp	r2, #0
    4aae:	bfb4      	ite	lt
    4ab0:	f04f 080d 	movlt.w	r8, #13
    4ab4:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    4ab8:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    4abc:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    4abe:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    4ac2:	d137      	bne.n	4b34 <cbvprintf+0x4f4>
			switch (length_mod) {
    4ac4:	1ecb      	subs	r3, r1, #3
    4ac6:	2b04      	cmp	r3, #4
    4ac8:	d821      	bhi.n	4b0e <cbvprintf+0x4ce>
    4aca:	e8df f003 	tbb	[pc, r3]
    4ace:	0903      	.short	0x0903
    4ad0:	2009      	.short	0x2009
    4ad2:	20          	.byte	0x20
    4ad3:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    4ad4:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    4ad8:	17da      	asrs	r2, r3, #31
    4ada:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    4ade:	e006      	b.n	4aee <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    4ae0:	3407      	adds	r4, #7
    4ae2:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    4ae6:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    4aea:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    4aee:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    4af2:	07bb      	lsls	r3, r7, #30
    4af4:	d056      	beq.n	4ba4 <cbvprintf+0x564>
			OUTS(sp, fp);
    4af6:	9b02      	ldr	r3, [sp, #8]
    4af8:	462a      	mov	r2, r5
    4afa:	4651      	mov	r1, sl
    4afc:	4648      	mov	r0, r9
    4afe:	f01d fb9b 	bl	22238 <outs>
    4b02:	2800      	cmp	r0, #0
    4b04:	f2c0 8397 	blt.w	5236 <cbvprintf+0xbf6>
    4b08:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    4b0a:	9d02      	ldr	r5, [sp, #8]
    4b0c:	e5a0      	b.n	4650 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4b0e:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    4b12:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4b14:	ea4f 72e3 	mov.w	r2, r3, asr #31
    4b18:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4b1c:	d105      	bne.n	4b2a <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    4b1e:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    4b22:	930c      	str	r3, [sp, #48]	; 0x30
    4b24:	2300      	movs	r3, #0
    4b26:	930d      	str	r3, [sp, #52]	; 0x34
    4b28:	e7e1      	b.n	4aee <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    4b2a:	2902      	cmp	r1, #2
    4b2c:	d1df      	bne.n	4aee <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    4b2e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    4b32:	e7d1      	b.n	4ad8 <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4b34:	2b02      	cmp	r3, #2
    4b36:	d123      	bne.n	4b80 <cbvprintf+0x540>
			switch (length_mod) {
    4b38:	1ecb      	subs	r3, r1, #3
    4b3a:	2b04      	cmp	r3, #4
    4b3c:	d813      	bhi.n	4b66 <cbvprintf+0x526>
    4b3e:	e8df f003 	tbb	[pc, r3]
    4b42:	0a03      	.short	0x0a03
    4b44:	120a      	.short	0x120a
    4b46:	12          	.byte	0x12
    4b47:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    4b48:	6822      	ldr	r2, [r4, #0]
    4b4a:	920c      	str	r2, [sp, #48]	; 0x30
    4b4c:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    4b4e:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    4b50:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    4b52:	4604      	mov	r4, r0
    4b54:	e7cb      	b.n	4aee <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    4b56:	1de0      	adds	r0, r4, #7
    4b58:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    4b5c:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    4b60:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    4b64:	e7f5      	b.n	4b52 <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    4b66:	f854 3b04 	ldr.w	r3, [r4], #4
    4b6a:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4b6c:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    4b6e:	f04f 0300 	mov.w	r3, #0
    4b72:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    4b74:	d0d3      	beq.n	4b1e <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    4b76:	2902      	cmp	r1, #2
    4b78:	d1b9      	bne.n	4aee <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    4b7a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    4b7e:	e7d0      	b.n	4b22 <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    4b80:	2b04      	cmp	r3, #4
    4b82:	d109      	bne.n	4b98 <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    4b84:	1de3      	adds	r3, r4, #7
    4b86:	f023 0307 	bic.w	r3, r3, #7
    4b8a:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    4b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
    4b92:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    4b96:	e7aa      	b.n	4aee <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4b98:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    4b9a:	bf04      	itt	eq
    4b9c:	f854 3b04 	ldreq.w	r3, [r4], #4
    4ba0:	930c      	streq	r3, [sp, #48]	; 0x30
    4ba2:	e7a4      	b.n	4aee <cbvprintf+0x4ae>
		switch (conv->specifier) {
    4ba4:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    4ba8:	2a78      	cmp	r2, #120	; 0x78
    4baa:	d8ae      	bhi.n	4b0a <cbvprintf+0x4ca>
    4bac:	2a57      	cmp	r2, #87	; 0x57
    4bae:	f200 808c 	bhi.w	4cca <cbvprintf+0x68a>
    4bb2:	2a25      	cmp	r2, #37	; 0x25
    4bb4:	f000 80d4 	beq.w	4d60 <cbvprintf+0x720>
    4bb8:	2a24      	cmp	r2, #36	; 0x24
    4bba:	d9a6      	bls.n	4b0a <cbvprintf+0x4ca>
    4bbc:	2a41      	cmp	r2, #65	; 0x41
    4bbe:	d003      	beq.n	4bc8 <cbvprintf+0x588>
    4bc0:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    4bc4:	2b02      	cmp	r3, #2
    4bc6:	d8a0      	bhi.n	4b0a <cbvprintf+0x4ca>
	} u = {
    4bc8:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    4bcc:	2b00      	cmp	r3, #0
    4bce:	f2c0 81be 	blt.w	4f4e <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    4bd2:	0738      	lsls	r0, r7, #28
    4bd4:	f100 81bd 	bmi.w	4f52 <cbvprintf+0x912>
		*sign = ' ';
    4bd8:	f017 0710 	ands.w	r7, r7, #16
    4bdc:	bf18      	it	ne
    4bde:	2720      	movne	r7, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    4be0:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    4be4:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4be8:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (exp == 0) && (fract != 0);
    4bec:	2d00      	cmp	r5, #0
    4bee:	f040 81b2 	bne.w	4f56 <cbvprintf+0x916>
    4bf2:	ea51 0003 	orrs.w	r0, r1, r3
    4bf6:	bf14      	ite	ne
    4bf8:	2001      	movne	r0, #1
    4bfa:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    4bfc:	02db      	lsls	r3, r3, #11
    4bfe:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    4c02:	02c9      	lsls	r1, r1, #11
		c = 'f';
    4c04:	2a46      	cmp	r2, #70	; 0x46
	if ((exp | fract) != 0) {
    4c06:	ea45 0e01 	orr.w	lr, r5, r1
    4c0a:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    4c0e:	bf08      	it	eq
    4c10:	2266      	moveq	r2, #102	; 0x66
	if ((exp | fract) != 0) {
    4c12:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    4c16:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((exp | fract) != 0) {
    4c1a:	f000 8206 	beq.w	502a <cbvprintf+0x9ea>
		if (is_subnormal) {
    4c1e:	2800      	cmp	r0, #0
    4c20:	f040 81ce 	bne.w	4fc0 <cbvprintf+0x980>
		fract |= BIT_63;
    4c24:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4c28:	f04f 0c00 	mov.w	ip, #0
    4c2c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    4c30:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    4c34:	9109      	str	r1, [sp, #36]	; 0x24
    4c36:	4663      	mov	r3, ip
		fract *= 5U;
    4c38:	f04f 0e05 	mov.w	lr, #5
	while (exp < -2) {
    4c3c:	f115 0f02 	cmn.w	r5, #2
    4c40:	f2c0 81c5 	blt.w	4fce <cbvprintf+0x98e>
    4c44:	f1bc 0f00 	cmp.w	ip, #0
    4c48:	d001      	beq.n	4c4e <cbvprintf+0x60e>
    4c4a:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (exp > 0) {
    4c4e:	2d00      	cmp	r5, #0
		fract += 2;
    4c50:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (exp > 0) {
    4c54:	f300 81d0 	bgt.w	4ff8 <cbvprintf+0x9b8>
	fract >>= (4 - exp);
    4c58:	9809      	ldr	r0, [sp, #36]	; 0x24
    4c5a:	9908      	ldr	r1, [sp, #32]
    4c5c:	f1c5 0c04 	rsb	ip, r5, #4
    4c60:	351c      	adds	r5, #28
    4c62:	fa00 f505 	lsl.w	r5, r0, r5
    4c66:	f1ac 0e20 	sub.w	lr, ip, #32
    4c6a:	fa21 f10c 	lsr.w	r1, r1, ip
    4c6e:	fa20 fe0e 	lsr.w	lr, r0, lr
    4c72:	4329      	orrs	r1, r5
    4c74:	ea41 010e 	orr.w	r1, r1, lr
    4c78:	fa20 f00c 	lsr.w	r0, r0, ip
    4c7c:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    4c80:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    4c84:	2947      	cmp	r1, #71	; 0x47
    4c86:	f040 81d7 	bne.w	5038 <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    4c8a:	1cdd      	adds	r5, r3, #3
    4c8c:	db02      	blt.n	4c94 <cbvprintf+0x654>
    4c8e:	4598      	cmp	r8, r3
    4c90:	f280 81ce 	bge.w	5030 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    4c94:	3a02      	subs	r2, #2
			if (precision > 0) {
    4c96:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    4c9a:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    4c9c:	dd01      	ble.n	4ca2 <cbvprintf+0x662>
				precision--;
    4c9e:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
    4ca2:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    4ca6:	0688      	lsls	r0, r1, #26
    4ca8:	f100 81c6 	bmi.w	5038 <cbvprintf+0x9f8>
    4cac:	f1b8 0f00 	cmp.w	r8, #0
    4cb0:	bfd4      	ite	le
    4cb2:	2100      	movle	r1, #0
    4cb4:	2101      	movgt	r1, #1
	if (c == 'f') {
    4cb6:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    4cb8:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    4cba:	f040 81bf 	bne.w	503c <cbvprintf+0x9fc>
		if (decimals < 0) {
    4cbe:	eb18 0503 	adds.w	r5, r8, r3
    4cc2:	f140 81bd 	bpl.w	5040 <cbvprintf+0xa00>
			decimals = 0;
    4cc6:	2500      	movs	r5, #0
    4cc8:	e1bd      	b.n	5046 <cbvprintf+0xa06>
    4cca:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    4cce:	2b20      	cmp	r3, #32
    4cd0:	f63f af1b 	bhi.w	4b0a <cbvprintf+0x4ca>
    4cd4:	a001      	add	r0, pc, #4	; (adr r0, 4cdc <cbvprintf+0x69c>)
    4cd6:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    4cda:	bf00      	nop
    4cdc:	00004ef1 	.word	0x00004ef1
    4ce0:	00004b0b 	.word	0x00004b0b
    4ce4:	00004b0b 	.word	0x00004b0b
    4ce8:	00004b0b 	.word	0x00004b0b
    4cec:	00004b0b 	.word	0x00004b0b
    4cf0:	00004b0b 	.word	0x00004b0b
    4cf4:	00004b0b 	.word	0x00004b0b
    4cf8:	00004b0b 	.word	0x00004b0b
    4cfc:	00004b0b 	.word	0x00004b0b
    4d00:	00004bc9 	.word	0x00004bc9
    4d04:	00004b0b 	.word	0x00004b0b
    4d08:	00004d8d 	.word	0x00004d8d
    4d0c:	00004e91 	.word	0x00004e91
    4d10:	00004bc9 	.word	0x00004bc9
    4d14:	00004bc9 	.word	0x00004bc9
    4d18:	00004bc9 	.word	0x00004bc9
    4d1c:	00004b0b 	.word	0x00004b0b
    4d20:	00004e91 	.word	0x00004e91
    4d24:	00004b0b 	.word	0x00004b0b
    4d28:	00004b0b 	.word	0x00004b0b
    4d2c:	00004b0b 	.word	0x00004b0b
    4d30:	00004b0b 	.word	0x00004b0b
    4d34:	00004f27 	.word	0x00004f27
    4d38:	00004ef1 	.word	0x00004ef1
    4d3c:	00004ef5 	.word	0x00004ef5
    4d40:	00004b0b 	.word	0x00004b0b
    4d44:	00004b0b 	.word	0x00004b0b
    4d48:	00004d67 	.word	0x00004d67
    4d4c:	00004b0b 	.word	0x00004b0b
    4d50:	00004ef1 	.word	0x00004ef1
    4d54:	00004b0b 	.word	0x00004b0b
    4d58:	00004b0b 	.word	0x00004b0b
    4d5c:	00004ef1 	.word	0x00004ef1
			OUTC('%');
    4d60:	4651      	mov	r1, sl
    4d62:	4610      	mov	r0, r2
    4d64:	e47e      	b.n	4664 <cbvprintf+0x24>
			if (precision >= 0) {
    4d66:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    4d6a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    4d6c:	db09      	blt.n	4d82 <cbvprintf+0x742>
				len = strnlen(bps, precision);
    4d6e:	4641      	mov	r1, r8
    4d70:	4610      	mov	r0, r2
    4d72:	9203      	str	r2, [sp, #12]
    4d74:	f01f fa8f 	bl	24296 <strnlen>
				len = strlen(bps);
    4d78:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    4d7a:	2700      	movs	r7, #0
			bpe = bps + len;
    4d7c:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    4d7e:	b962      	cbnz	r2, 4d9a <cbvprintf+0x75a>
    4d80:	e6c3      	b.n	4b0a <cbvprintf+0x4ca>
				len = strlen(bps);
    4d82:	4610      	mov	r0, r2
    4d84:	9203      	str	r2, [sp, #12]
    4d86:	f01f fa7f 	bl	24288 <strlen>
    4d8a:	e7f5      	b.n	4d78 <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4d8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4d8e:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    4d92:	2700      	movs	r7, #0
			bpe = buf + 1;
    4d94:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    4d98:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    4d9a:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    4d9c:	b107      	cbz	r7, 4da0 <cbvprintf+0x760>
			nj_len += 1U;
    4d9e:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    4da0:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    4da4:	06c1      	lsls	r1, r0, #27
    4da6:	f140 823a 	bpl.w	521e <cbvprintf+0xbde>
			nj_len += 2U;
    4daa:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    4dac:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    4dae:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    4db0:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    4db2:	bf44      	itt	mi
    4db4:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    4db6:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    4db8:	f1bb 0f00 	cmp.w	fp, #0
    4dbc:	dd23      	ble.n	4e06 <cbvprintf+0x7c6>
			width -= (int)nj_len;
    4dbe:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    4dc2:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4dc6:	0759      	lsls	r1, r3, #29
    4dc8:	f3c3 0880 	ubfx	r8, r3, #2, #1
    4dcc:	d41b      	bmi.n	4e06 <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    4dce:	0658      	lsls	r0, r3, #25
    4dd0:	f140 8234 	bpl.w	523c <cbvprintf+0xbfc>
					if (sign != 0) {
    4dd4:	2f00      	cmp	r7, #0
    4dd6:	f000 8234 	beq.w	5242 <cbvprintf+0xc02>
						OUTC(sign);
    4dda:	4651      	mov	r1, sl
    4ddc:	4638      	mov	r0, r7
    4dde:	9203      	str	r2, [sp, #12]
    4de0:	47c8      	blx	r9
    4de2:	2800      	cmp	r0, #0
    4de4:	f2c0 8227 	blt.w	5236 <cbvprintf+0xbf6>
    4de8:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    4dea:	4647      	mov	r7, r8
						OUTC(sign);
    4dec:	3601      	adds	r6, #1
					pad = '0';
    4dee:	f04f 0830 	mov.w	r8, #48	; 0x30
    4df2:	445e      	add	r6, fp
    4df4:	465b      	mov	r3, fp
				while (width-- > 0) {
    4df6:	2b00      	cmp	r3, #0
    4df8:	eba6 000b 	sub.w	r0, r6, fp
    4dfc:	f10b 3bff 	add.w	fp, fp, #4294967295
    4e00:	f300 8211 	bgt.w	5226 <cbvprintf+0xbe6>
    4e04:	4606      	mov	r6, r0
		if (sign != 0) {
    4e06:	b147      	cbz	r7, 4e1a <cbvprintf+0x7da>
			OUTC(sign);
    4e08:	4651      	mov	r1, sl
    4e0a:	4638      	mov	r0, r7
    4e0c:	9203      	str	r2, [sp, #12]
    4e0e:	47c8      	blx	r9
    4e10:	2800      	cmp	r0, #0
    4e12:	f2c0 8210 	blt.w	5236 <cbvprintf+0xbf6>
    4e16:	9a03      	ldr	r2, [sp, #12]
    4e18:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    4e1a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4e1e:	0659      	lsls	r1, r3, #25
    4e20:	f140 8265 	bpl.w	52ee <cbvprintf+0xcae>
			if (conv->specifier_a) {
    4e24:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    4e28:	2b00      	cmp	r3, #0
    4e2a:	eba6 0302 	sub.w	r3, r6, r2
    4e2e:	9303      	str	r3, [sp, #12]
    4e30:	f2c0 820a 	blt.w	5248 <cbvprintf+0xc08>
    4e34:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    4e36:	7838      	ldrb	r0, [r7, #0]
    4e38:	9b03      	ldr	r3, [sp, #12]
    4e3a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4e3e:	2a09      	cmp	r2, #9
    4e40:	46b8      	mov	r8, r7
    4e42:	eb03 0607 	add.w	r6, r3, r7
    4e46:	f107 0701 	add.w	r7, r7, #1
    4e4a:	f240 8229 	bls.w	52a0 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    4e4e:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    4e52:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    4e54:	0693      	lsls	r3, r2, #26
    4e56:	d408      	bmi.n	4e6a <cbvprintf+0x82a>
    4e58:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    4e5a:	2f00      	cmp	r7, #0
    4e5c:	eba6 0307 	sub.w	r3, r6, r7
    4e60:	f107 37ff 	add.w	r7, r7, #4294967295
    4e64:	f300 8222 	bgt.w	52ac <cbvprintf+0xc6c>
    4e68:	461e      	mov	r6, r3
				if (*cp == '.') {
    4e6a:	f898 0000 	ldrb.w	r0, [r8]
    4e6e:	282e      	cmp	r0, #46	; 0x2e
    4e70:	d10b      	bne.n	4e8a <cbvprintf+0x84a>
					OUTC(*cp++);
    4e72:	4651      	mov	r1, sl
    4e74:	47c8      	blx	r9
						OUTC('0');
    4e76:	2800      	cmp	r0, #0
    4e78:	f2c0 81dd 	blt.w	5236 <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    4e7c:	2f00      	cmp	r7, #0
						OUTC('0');
    4e7e:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    4e82:	f300 821a 	bgt.w	52ba <cbvprintf+0xc7a>
					OUTC(*cp++);
    4e86:	f108 0801 	add.w	r8, r8, #1
    4e8a:	eba6 0608 	sub.w	r6, r6, r8
    4e8e:	e21d      	b.n	52cc <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    4e90:	073d      	lsls	r5, r7, #28
    4e92:	d42b      	bmi.n	4eec <cbvprintf+0x8ac>
				sign = ' ';
    4e94:	f017 0710 	ands.w	r7, r7, #16
    4e98:	bf18      	it	ne
    4e9a:	2720      	movne	r7, #32
			sint = value->sint;
    4e9c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    4ea0:	2b00      	cmp	r3, #0
    4ea2:	da05      	bge.n	4eb0 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    4ea4:	4252      	negs	r2, r2
    4ea6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    4eaa:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    4eae:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    4eb0:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    4eb4:	9300      	str	r3, [sp, #0]
    4eb6:	aa0e      	add	r2, sp, #56	; 0x38
    4eb8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    4ebc:	ab13      	add	r3, sp, #76	; 0x4c
    4ebe:	f01d f975 	bl	221ac <encode_uint>
    4ec2:	4602      	mov	r2, r0
			if (precision >= 0) {
    4ec4:	f1b8 0f00 	cmp.w	r8, #0
    4ec8:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    4ecc:	f6ff af57 	blt.w	4d7e <cbvprintf+0x73e>
				conv->flag_zero = false;
    4ed0:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    4ed4:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    4ed6:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    4eda:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    4edc:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    4ee0:	f67f af4d 	bls.w	4d7e <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    4ee4:	eba8 0303 	sub.w	r3, r8, r3
    4ee8:	930f      	str	r3, [sp, #60]	; 0x3c
    4eea:	e748      	b.n	4d7e <cbvprintf+0x73e>
				sign = '+';
    4eec:	272b      	movs	r7, #43	; 0x2b
    4eee:	e7d5      	b.n	4e9c <cbvprintf+0x85c>
		switch (conv->specifier) {
    4ef0:	2700      	movs	r7, #0
    4ef2:	e7dd      	b.n	4eb0 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    4ef4:	980c      	ldr	r0, [sp, #48]	; 0x30
    4ef6:	2800      	cmp	r0, #0
    4ef8:	f000 818d 	beq.w	5216 <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4efc:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    4f00:	9300      	str	r3, [sp, #0]
    4f02:	aa0e      	add	r2, sp, #56	; 0x38
    4f04:	ab13      	add	r3, sp, #76	; 0x4c
    4f06:	2100      	movs	r1, #0
    4f08:	f01d f950 	bl	221ac <encode_uint>
				conv->altform_0c = true;
    4f0c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    4f10:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    4f14:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    4f18:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    4f1c:	4602      	mov	r2, r0
				conv->altform_0c = true;
    4f1e:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    4f22:	2700      	movs	r7, #0
				goto prec_int_pad0;
    4f24:	e7ce      	b.n	4ec4 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    4f26:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    4f28:	2907      	cmp	r1, #7
    4f2a:	f63f adee 	bhi.w	4b0a <cbvprintf+0x4ca>
    4f2e:	e8df f001 	tbb	[pc, r1]
    4f32:	040c      	.short	0x040c
    4f34:	08080c06 	.word	0x08080c06
    4f38:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    4f3a:	701e      	strb	r6, [r3, #0]
		break;
    4f3c:	e5e5      	b.n	4b0a <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    4f3e:	801e      	strh	r6, [r3, #0]
		break;
    4f40:	e5e3      	b.n	4b0a <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    4f42:	17f2      	asrs	r2, r6, #31
    4f44:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    4f48:	e5df      	b.n	4b0a <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    4f4a:	601e      	str	r6, [r3, #0]
		break;
    4f4c:	e5dd      	b.n	4b0a <cbvprintf+0x4ca>
		*sign = '-';
    4f4e:	272d      	movs	r7, #45	; 0x2d
    4f50:	e646      	b.n	4be0 <cbvprintf+0x5a0>
		*sign = '+';
    4f52:	272b      	movs	r7, #43	; 0x2b
    4f54:	e644      	b.n	4be0 <cbvprintf+0x5a0>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    4f56:	f240 70ff 	movw	r0, #2047	; 0x7ff
    4f5a:	4285      	cmp	r5, r0
    4f5c:	d12d      	bne.n	4fba <cbvprintf+0x97a>
		if (fract == 0) {
    4f5e:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    4f60:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    4f64:	d11b      	bne.n	4f9e <cbvprintf+0x95e>
			if (isupper((int)c)) {
    4f66:	2a19      	cmp	r2, #25
    4f68:	d811      	bhi.n	4f8e <cbvprintf+0x94e>
				*buf++ = 'I';
    4f6a:	2349      	movs	r3, #73	; 0x49
    4f6c:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    4f70:	234e      	movs	r3, #78	; 0x4e
    4f72:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    4f76:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    4f78:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    4f7c:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4f80:	f36f 1386 	bfc	r3, #6, #1
    4f84:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    4f88:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    4f8c:	e704      	b.n	4d98 <cbvprintf+0x758>
				*buf++ = 'i';
    4f8e:	2369      	movs	r3, #105	; 0x69
    4f90:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    4f94:	236e      	movs	r3, #110	; 0x6e
    4f96:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    4f9a:	2366      	movs	r3, #102	; 0x66
    4f9c:	e7ec      	b.n	4f78 <cbvprintf+0x938>
			if (isupper((int)c)) {
    4f9e:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    4fa0:	bf99      	ittee	ls
    4fa2:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    4fa4:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    4fa6:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    4fa8:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    4faa:	bf94      	ite	ls
    4fac:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    4fb0:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    4fb4:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    4fb8:	e7de      	b.n	4f78 <cbvprintf+0x938>
	bool is_subnormal = (exp == 0) && (fract != 0);
    4fba:	2000      	movs	r0, #0
    4fbc:	e61e      	b.n	4bfc <cbvprintf+0x5bc>
				exp--;
    4fbe:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    4fc0:	1849      	adds	r1, r1, r1
    4fc2:	415b      	adcs	r3, r3
    4fc4:	2b00      	cmp	r3, #0
    4fc6:	dafa      	bge.n	4fbe <cbvprintf+0x97e>
    4fc8:	e9cd 1308 	strd	r1, r3, [sp, #32]
    4fcc:	e62a      	b.n	4c24 <cbvprintf+0x5e4>
			fract >>= 1;
    4fce:	0840      	lsrs	r0, r0, #1
    4fd0:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    4fd4:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    4fd6:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    4fda:	46ac      	mov	ip, r5
			exp++;
    4fdc:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    4fe0:	d2f5      	bcs.n	4fce <cbvprintf+0x98e>
		fract *= 5U;
    4fe2:	fb0e f501 	mul.w	r5, lr, r1
    4fe6:	fba0 010e 	umull	r0, r1, r0, lr
    4fea:	4429      	add	r1, r5
		decexp--;
    4fec:	3b01      	subs	r3, #1
		exp++;
    4fee:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    4ff2:	f04f 0c01 	mov.w	ip, #1
    4ff6:	e621      	b.n	4c3c <cbvprintf+0x5fc>
		fract += 2;
    4ff8:	3102      	adds	r1, #2
    4ffa:	f140 0000 	adc.w	r0, r0, #0
    4ffe:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    5002:	a808      	add	r0, sp, #32
    5004:	e9cd 2303 	strd	r2, r3, [sp, #12]
    5008:	f01d f8a1 	bl	2214e <_ldiv5>
		decexp++;
    500c:	9b04      	ldr	r3, [sp, #16]
    500e:	9a03      	ldr	r2, [sp, #12]
    5010:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		exp--;
    5014:	3d01      	subs	r5, #1
		decexp++;
    5016:	3301      	adds	r3, #1
			fract <<= 1;
    5018:	1849      	adds	r1, r1, r1
    501a:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    501c:	2800      	cmp	r0, #0
			exp--;
    501e:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
    5022:	daf9      	bge.n	5018 <cbvprintf+0x9d8>
    5024:	e9cd 1008 	strd	r1, r0, [sp, #32]
    5028:	e611      	b.n	4c4e <cbvprintf+0x60e>
    502a:	2300      	movs	r3, #0
    502c:	461d      	mov	r5, r3
    502e:	e613      	b.n	4c58 <cbvprintf+0x618>
			precision -= decexp;
    5030:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    5034:	2266      	movs	r2, #102	; 0x66
    5036:	e634      	b.n	4ca2 <cbvprintf+0x662>
	bool prune_zero = false;
    5038:	2100      	movs	r1, #0
    503a:	e63c      	b.n	4cb6 <cbvprintf+0x676>
		decimals = precision + 1;
    503c:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    5040:	2d10      	cmp	r5, #16
    5042:	bfa8      	it	ge
    5044:	2510      	movge	r5, #16
    5046:	2110      	movs	r1, #16
    5048:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    504a:	2000      	movs	r0, #0
    504c:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    5050:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    5054:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    5058:	b9a5      	cbnz	r5, 5084 <cbvprintf+0xa44>
	fract += round;
    505a:	9d08      	ldr	r5, [sp, #32]
    505c:	1949      	adds	r1, r1, r5
    505e:	9d09      	ldr	r5, [sp, #36]	; 0x24
    5060:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    5064:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    5068:	d21b      	bcs.n	50a2 <cbvprintf+0xa62>
	fract += round;
    506a:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    506e:	2a66      	cmp	r2, #102	; 0x66
    5070:	f040 8099 	bne.w	51a6 <cbvprintf+0xb66>
		if (decexp > 0) {
    5074:	2b00      	cmp	r3, #0
    5076:	dc23      	bgt.n	50c0 <cbvprintf+0xa80>
			*buf++ = '0';
    5078:	2130      	movs	r1, #48	; 0x30
    507a:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    507e:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    5082:	e02f      	b.n	50e4 <cbvprintf+0xaa4>
	*v >>= 1;
    5084:	0849      	lsrs	r1, r1, #1
    5086:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    508a:	0840      	lsrs	r0, r0, #1
    508c:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    5090:	a80a      	add	r0, sp, #40	; 0x28
    5092:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5096:	3d01      	subs	r5, #1
    5098:	f01d f859 	bl	2214e <_ldiv5>
    509c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    50a0:	e7d8      	b.n	5054 <cbvprintf+0xa14>
	*v >>= 1;
    50a2:	0849      	lsrs	r1, r1, #1
    50a4:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    50a8:	a808      	add	r0, sp, #32
	*v >>= 1;
    50aa:	086d      	lsrs	r5, r5, #1
    50ac:	e9cd 2304 	strd	r2, r3, [sp, #16]
    50b0:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    50b4:	f01d f84b 	bl	2214e <_ldiv5>
		decexp++;
    50b8:	9b05      	ldr	r3, [sp, #20]
    50ba:	9a04      	ldr	r2, [sp, #16]
    50bc:	3301      	adds	r3, #1
    50be:	e7d6      	b.n	506e <cbvprintf+0xa2e>
	char *buf = bps;
    50c0:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    50c2:	9907      	ldr	r1, [sp, #28]
    50c4:	2900      	cmp	r1, #0
    50c6:	dd0b      	ble.n	50e0 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    50c8:	a907      	add	r1, sp, #28
    50ca:	a808      	add	r0, sp, #32
    50cc:	e9cd 2304 	strd	r2, r3, [sp, #16]
    50d0:	f01d f855 	bl	2217e <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    50d4:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    50d6:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    50da:	3b01      	subs	r3, #1
    50dc:	9a04      	ldr	r2, [sp, #16]
    50de:	d1f0      	bne.n	50c2 <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    50e0:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    50e2:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    50e4:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    50e8:	0689      	lsls	r1, r1, #26
    50ea:	d402      	bmi.n	50f2 <cbvprintf+0xab2>
    50ec:	f1b8 0f00 	cmp.w	r8, #0
    50f0:	dd1d      	ble.n	512e <cbvprintf+0xaee>
			*buf++ = '.';
    50f2:	212e      	movs	r1, #46	; 0x2e
    50f4:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    50f8:	b19b      	cbz	r3, 5122 <cbvprintf+0xae2>
    50fa:	f1b8 0f00 	cmp.w	r8, #0
    50fe:	dd16      	ble.n	512e <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    5100:	4259      	negs	r1, r3
    5102:	4541      	cmp	r1, r8
    5104:	bfa8      	it	ge
    5106:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    5108:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    510c:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    510e:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    5110:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    5114:	bfd4      	ite	le
    5116:	2100      	movle	r1, #0
    5118:	2101      	movgt	r1, #1
    511a:	f361 1045 	bfi	r0, r1, #5, #1
    511e:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    5122:	f1b8 0f00 	cmp.w	r8, #0
    5126:	dd02      	ble.n	512e <cbvprintf+0xaee>
    5128:	9907      	ldr	r1, [sp, #28]
    512a:	2900      	cmp	r1, #0
    512c:	dc56      	bgt.n	51dc <cbvprintf+0xb9c>
	if (prune_zero) {
    512e:	9903      	ldr	r1, [sp, #12]
    5130:	2900      	cmp	r1, #0
    5132:	d163      	bne.n	51fc <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    5134:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    5138:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    513c:	2945      	cmp	r1, #69	; 0x45
    513e:	d121      	bne.n	5184 <cbvprintf+0xb44>
		if (decexp < 0) {
    5140:	2b00      	cmp	r3, #0
		*buf++ = c;
    5142:	4629      	mov	r1, r5
			decexp = -decexp;
    5144:	bfb8      	it	lt
    5146:	425b      	neglt	r3, r3
		*buf++ = c;
    5148:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    514c:	bfb4      	ite	lt
    514e:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    5150:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    5152:	2b63      	cmp	r3, #99	; 0x63
    5154:	706a      	strb	r2, [r5, #1]
    5156:	dd09      	ble.n	516c <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    5158:	2064      	movs	r0, #100	; 0x64
    515a:	fb93 f2f0 	sdiv	r2, r3, r0
    515e:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    5162:	1ce9      	adds	r1, r5, #3
    5164:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    5168:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    516c:	200a      	movs	r0, #10
    516e:	460d      	mov	r5, r1
    5170:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    5174:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    5178:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    517c:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    517e:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    5182:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    5184:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    5186:	2b00      	cmp	r3, #0
    5188:	dc43      	bgt.n	5212 <cbvprintf+0xbd2>
    518a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    518c:	2b00      	cmp	r3, #0
    518e:	bfd4      	ite	le
    5190:	2300      	movle	r3, #0
    5192:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    5194:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    5198:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    519c:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    519e:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    51a2:	702b      	strb	r3, [r5, #0]
	return bps;
    51a4:	e5f8      	b.n	4d98 <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    51a6:	a907      	add	r1, sp, #28
    51a8:	a808      	add	r0, sp, #32
    51aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
    51ae:	f01c ffe6 	bl	2217e <_get_digit>
		if (*buf++ != '0') {
    51b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    51b6:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    51ba:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    51be:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    51c0:	bf18      	it	ne
    51c2:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    51c6:	0688      	lsls	r0, r1, #26
    51c8:	d402      	bmi.n	51d0 <cbvprintf+0xb90>
    51ca:	f1b8 0f00 	cmp.w	r8, #0
    51ce:	dd12      	ble.n	51f6 <cbvprintf+0xbb6>
			*buf++ = '.';
    51d0:	212e      	movs	r1, #46	; 0x2e
    51d2:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    51d6:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    51da:	e7a2      	b.n	5122 <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    51dc:	a907      	add	r1, sp, #28
    51de:	a808      	add	r0, sp, #32
    51e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
    51e4:	f01c ffcb 	bl	2217e <_get_digit>
		precision--;
    51e8:	f108 38ff 	add.w	r8, r8, #4294967295
    51ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    51f0:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    51f4:	e795      	b.n	5122 <cbvprintf+0xae2>
		if (*buf++ != '0') {
    51f6:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    51fa:	e798      	b.n	512e <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    51fc:	2100      	movs	r1, #0
    51fe:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    5200:	4628      	mov	r0, r5
    5202:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    5206:	2930      	cmp	r1, #48	; 0x30
    5208:	d0fa      	beq.n	5200 <cbvprintf+0xbc0>
		if (*buf != '.') {
    520a:	292e      	cmp	r1, #46	; 0x2e
    520c:	bf18      	it	ne
    520e:	4605      	movne	r5, r0
    5210:	e792      	b.n	5138 <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    5212:	2301      	movs	r3, #1
    5214:	e7be      	b.n	5194 <cbvprintf+0xb54>
			bpe = bps + 5;
    5216:	4d4b      	ldr	r5, [pc, #300]	; (5344 <cbvprintf+0xd04>)
		char sign = 0;
    5218:	4607      	mov	r7, r0
			bps = "(nil)";
    521a:	1f6a      	subs	r2, r5, #5
    521c:	e5bd      	b.n	4d9a <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    521e:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    5220:	bf48      	it	mi
    5222:	3301      	addmi	r3, #1
    5224:	e5c2      	b.n	4dac <cbvprintf+0x76c>
					OUTC(pad);
    5226:	4651      	mov	r1, sl
    5228:	4640      	mov	r0, r8
    522a:	9203      	str	r2, [sp, #12]
    522c:	47c8      	blx	r9
    522e:	2800      	cmp	r0, #0
    5230:	9a03      	ldr	r2, [sp, #12]
    5232:	f6bf addf 	bge.w	4df4 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    5236:	b01b      	add	sp, #108	; 0x6c
    5238:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    523c:	f04f 0820 	mov.w	r8, #32
    5240:	e5d7      	b.n	4df2 <cbvprintf+0x7b2>
					pad = '0';
    5242:	f04f 0830 	mov.w	r8, #48	; 0x30
    5246:	e5d4      	b.n	4df2 <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    5248:	4690      	mov	r8, r2
    524a:	9b03      	ldr	r3, [sp, #12]
    524c:	4647      	mov	r7, r8
    524e:	4443      	add	r3, r8
				while (*cp != 'p') {
    5250:	f818 0b01 	ldrb.w	r0, [r8], #1
    5254:	2870      	cmp	r0, #112	; 0x70
    5256:	d11e      	bne.n	5296 <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    5258:	461e      	mov	r6, r3
    525a:	9b10      	ldr	r3, [sp, #64]	; 0x40
    525c:	eb03 0806 	add.w	r8, r3, r6
    5260:	eba8 0306 	sub.w	r3, r8, r6
    5264:	2b00      	cmp	r3, #0
    5266:	dc3b      	bgt.n	52e0 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    5268:	462b      	mov	r3, r5
    526a:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    526c:	4651      	mov	r1, sl
    526e:	4648      	mov	r0, r9
    5270:	f01c ffe2 	bl	22238 <outs>
    5274:	2800      	cmp	r0, #0
    5276:	dbde      	blt.n	5236 <cbvprintf+0xbf6>
    5278:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    527a:	4606      	mov	r6, r0
    527c:	4483      	add	fp, r0
		while (width > 0) {
    527e:	ebab 0306 	sub.w	r3, fp, r6
    5282:	2b00      	cmp	r3, #0
    5284:	f77f ac41 	ble.w	4b0a <cbvprintf+0x4ca>
			OUTC(' ');
    5288:	4651      	mov	r1, sl
    528a:	2020      	movs	r0, #32
    528c:	47c8      	blx	r9
    528e:	2800      	cmp	r0, #0
    5290:	dbd1      	blt.n	5236 <cbvprintf+0xbf6>
    5292:	3601      	adds	r6, #1
			--width;
    5294:	e7f3      	b.n	527e <cbvprintf+0xc3e>
					OUTC(*cp++);
    5296:	4651      	mov	r1, sl
    5298:	47c8      	blx	r9
    529a:	2800      	cmp	r0, #0
    529c:	dad5      	bge.n	524a <cbvprintf+0xc0a>
    529e:	e7ca      	b.n	5236 <cbvprintf+0xbf6>
					OUTC(*cp++);
    52a0:	4651      	mov	r1, sl
    52a2:	47c8      	blx	r9
    52a4:	2800      	cmp	r0, #0
    52a6:	f6bf adc6 	bge.w	4e36 <cbvprintf+0x7f6>
    52aa:	e7c4      	b.n	5236 <cbvprintf+0xbf6>
						OUTC('0');
    52ac:	4651      	mov	r1, sl
    52ae:	2030      	movs	r0, #48	; 0x30
    52b0:	47c8      	blx	r9
    52b2:	2800      	cmp	r0, #0
    52b4:	f6bf add1 	bge.w	4e5a <cbvprintf+0x81a>
    52b8:	e7bd      	b.n	5236 <cbvprintf+0xbf6>
						OUTC('0');
    52ba:	4651      	mov	r1, sl
    52bc:	2030      	movs	r0, #48	; 0x30
    52be:	47c8      	blx	r9
    52c0:	3f01      	subs	r7, #1
    52c2:	e5d8      	b.n	4e76 <cbvprintf+0x836>
					OUTC(*cp++);
    52c4:	4651      	mov	r1, sl
    52c6:	47c8      	blx	r9
    52c8:	2800      	cmp	r0, #0
    52ca:	dbb4      	blt.n	5236 <cbvprintf+0xbf6>
    52cc:	4647      	mov	r7, r8
    52ce:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    52d2:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    52d6:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    52da:	2a09      	cmp	r2, #9
    52dc:	d9f2      	bls.n	52c4 <cbvprintf+0xc84>
    52de:	e7bb      	b.n	5258 <cbvprintf+0xc18>
				OUTC('0');
    52e0:	4651      	mov	r1, sl
    52e2:	2030      	movs	r0, #48	; 0x30
    52e4:	47c8      	blx	r9
    52e6:	2800      	cmp	r0, #0
    52e8:	dba5      	blt.n	5236 <cbvprintf+0xbf6>
    52ea:	3601      	adds	r6, #1
    52ec:	e7b8      	b.n	5260 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    52ee:	06d8      	lsls	r0, r3, #27
    52f0:	d401      	bmi.n	52f6 <cbvprintf+0xcb6>
    52f2:	0719      	lsls	r1, r3, #28
    52f4:	d507      	bpl.n	5306 <cbvprintf+0xcc6>
				OUTC('0');
    52f6:	4651      	mov	r1, sl
    52f8:	2030      	movs	r0, #48	; 0x30
    52fa:	9203      	str	r2, [sp, #12]
    52fc:	47c8      	blx	r9
    52fe:	2800      	cmp	r0, #0
    5300:	db99      	blt.n	5236 <cbvprintf+0xbf6>
    5302:	9a03      	ldr	r2, [sp, #12]
    5304:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    5306:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    530a:	06db      	lsls	r3, r3, #27
    530c:	d508      	bpl.n	5320 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    530e:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5312:	9203      	str	r2, [sp, #12]
    5314:	4651      	mov	r1, sl
    5316:	47c8      	blx	r9
    5318:	2800      	cmp	r0, #0
    531a:	db8c      	blt.n	5236 <cbvprintf+0xbf6>
    531c:	9a03      	ldr	r2, [sp, #12]
    531e:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    5320:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5322:	4437      	add	r7, r6
    5324:	1bbb      	subs	r3, r7, r6
    5326:	2b00      	cmp	r3, #0
    5328:	dc01      	bgt.n	532e <cbvprintf+0xcee>
			OUTS(bps, bpe);
    532a:	462b      	mov	r3, r5
    532c:	e79e      	b.n	526c <cbvprintf+0xc2c>
				OUTC('0');
    532e:	4651      	mov	r1, sl
    5330:	2030      	movs	r0, #48	; 0x30
    5332:	9203      	str	r2, [sp, #12]
    5334:	47c8      	blx	r9
    5336:	2800      	cmp	r0, #0
    5338:	f6ff af7d 	blt.w	5236 <cbvprintf+0xbf6>
    533c:	9a03      	ldr	r2, [sp, #12]
    533e:	3601      	adds	r6, #1
    5340:	e7f0      	b.n	5324 <cbvprintf+0xce4>
    5342:	bf00      	nop
    5344:	0002b3db 	.word	0x0002b3db

00005348 <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    5348:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    534a:	4910      	ldr	r1, [pc, #64]	; (538c <enable_logger+0x44>)
    534c:	4810      	ldr	r0, [pc, #64]	; (5390 <enable_logger+0x48>)
{
    534e:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    5350:	2200      	movs	r2, #0
    5352:	f021 ff0c 	bl	2716e <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    5356:	4d0f      	ldr	r5, [pc, #60]	; (5394 <enable_logger+0x4c>)
    5358:	490f      	ldr	r1, [pc, #60]	; (5398 <enable_logger+0x50>)
    535a:	2200      	movs	r2, #0
    535c:	2300      	movs	r3, #0
    535e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    5362:	2400      	movs	r4, #0
    5364:	230e      	movs	r3, #14
    5366:	e9cd 3403 	strd	r3, r4, [sp, #12]
    536a:	e9cd 4401 	strd	r4, r4, [sp, #4]
    536e:	4b0b      	ldr	r3, [pc, #44]	; (539c <enable_logger+0x54>)
    5370:	9400      	str	r4, [sp, #0]
    5372:	f44f 7240 	mov.w	r2, #768	; 0x300
    5376:	4628      	mov	r0, r5
    5378:	f01b f85a 	bl	20430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    537c:	4908      	ldr	r1, [pc, #32]	; (53a0 <enable_logger+0x58>)
    537e:	4628      	mov	r0, r5
    5380:	f021 fe07 	bl	26f92 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    5384:	4620      	mov	r0, r4
    5386:	b009      	add	sp, #36	; 0x24
    5388:	bd30      	pop	{r4, r5, pc}
    538a:	bf00      	nop
    538c:	000053a5 	.word	0x000053a5
    5390:	2000a498 	.word	0x2000a498
    5394:	2000a4d0 	.word	0x2000a4d0
    5398:	2000ffe0 	.word	0x2000ffe0
    539c:	000056fd 	.word	0x000056fd
    53a0:	0002b3dc 	.word	0x0002b3dc

000053a4 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    53a4:	4801      	ldr	r0, [pc, #4]	; (53ac <log_process_thread_timer_expiry_fn+0x8>)
    53a6:	f01a bfab 	b.w	20300 <z_impl_k_sem_give>
    53aa:	bf00      	nop
    53ac:	20009fd8 	.word	0x20009fd8

000053b0 <log_core_init>:
{
    53b0:	b508      	push	{r3, lr}
		log_msg_pool_init();
    53b2:	f000 fa67 	bl	5884 <log_msg_pool_init>
		log_list_init(&list);
    53b6:	4809      	ldr	r0, [pc, #36]	; (53dc <log_core_init+0x2c>)
    53b8:	f01c ff55 	bl	22266 <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    53bc:	2304      	movs	r3, #4
    53be:	2228      	movs	r2, #40	; 0x28
    53c0:	4907      	ldr	r1, [pc, #28]	; (53e0 <log_core_init+0x30>)
    53c2:	4808      	ldr	r0, [pc, #32]	; (53e4 <log_core_init+0x34>)
    53c4:	f021 fbe6 	bl	26b94 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    53c8:	4b07      	ldr	r3, [pc, #28]	; (53e8 <log_core_init+0x38>)
    53ca:	4a08      	ldr	r2, [pc, #32]	; (53ec <log_core_init+0x3c>)
    53cc:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    53ce:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    53d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    53d6:	f000 bc9d 	b.w	5d14 <log_output_timestamp_freq_set>
    53da:	bf00      	nop
    53dc:	2000d508 	.word	0x2000d508
    53e0:	20012b98 	.word	0x20012b98
    53e4:	2000d510 	.word	0x2000d510
    53e8:	20000278 	.word	0x20000278
    53ec:	000222a5 	.word	0x000222a5

000053f0 <dropped_notify>:
{
    53f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    53f2:	4b0f      	ldr	r3, [pc, #60]	; (5430 <dropped_notify+0x40>)
    53f4:	f3bf 8f5b 	dmb	ish
    53f8:	2500      	movs	r5, #0
    53fa:	e853 7f00 	ldrex	r7, [r3]
    53fe:	e843 5200 	strex	r2, r5, [r3]
    5402:	2a00      	cmp	r2, #0
    5404:	d1f9      	bne.n	53fa <dropped_notify+0xa>
    5406:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    540a:	4c0a      	ldr	r4, [pc, #40]	; (5434 <dropped_notify+0x44>)
    540c:	4e0a      	ldr	r6, [pc, #40]	; (5438 <dropped_notify+0x48>)
    540e:	1b36      	subs	r6, r6, r4
    5410:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5412:	42b5      	cmp	r5, r6
    5414:	db00      	blt.n	5418 <dropped_notify+0x28>
}
    5416:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    5418:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    541a:	795b      	ldrb	r3, [r3, #5]
    541c:	b12b      	cbz	r3, 542a <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    541e:	6823      	ldr	r3, [r4, #0]
    5420:	68db      	ldr	r3, [r3, #12]
    5422:	b113      	cbz	r3, 542a <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    5424:	4639      	mov	r1, r7
    5426:	4620      	mov	r0, r4
    5428:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    542a:	3501      	adds	r5, #1
    542c:	3410      	adds	r4, #16
    542e:	e7f0      	b.n	5412 <dropped_notify+0x22>
    5430:	2000d500 	.word	0x2000d500
    5434:	000278c4 	.word	0x000278c4
    5438:	000278e4 	.word	0x000278e4

0000543c <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    543c:	4b06      	ldr	r3, [pc, #24]	; (5458 <log_dropped+0x1c>)
    543e:	f3bf 8f5b 	dmb	ish
    5442:	e853 2f00 	ldrex	r2, [r3]
    5446:	3201      	adds	r2, #1
    5448:	e843 2100 	strex	r1, r2, [r3]
    544c:	2900      	cmp	r1, #0
    544e:	d1f8      	bne.n	5442 <log_dropped+0x6>
    5450:	f3bf 8f5b 	dmb	ish
}
    5454:	4770      	bx	lr
    5456:	bf00      	nop
    5458:	2000d500 	.word	0x2000d500

0000545c <log_source_name_get>:
    545c:	4a04      	ldr	r2, [pc, #16]	; (5470 <log_source_name_get+0x14>)
    545e:	4b05      	ldr	r3, [pc, #20]	; (5474 <log_source_name_get+0x18>)
    5460:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5462:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    5466:	bf34      	ite	cc
    5468:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    546c:	2000      	movcs	r0, #0
}
    546e:	4770      	bx	lr
    5470:	0002775c 	.word	0x0002775c
    5474:	000278c4 	.word	0x000278c4

00005478 <log_backend_enable>:
	id += backend - log_backend_get(0);
    5478:	4a09      	ldr	r2, [pc, #36]	; (54a0 <log_backend_enable+0x28>)
	backend->cb->id = id;
    547a:	6843      	ldr	r3, [r0, #4]
    547c:	1a80      	subs	r0, r0, r2
{
    547e:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    5480:	1100      	asrs	r0, r0, #4
	if (!backend_attached) {
    5482:	4c08      	ldr	r4, [pc, #32]	; (54a4 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    5484:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    5486:	3001      	adds	r0, #1
	backend->cb->active = true;
    5488:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    548a:	7118      	strb	r0, [r3, #4]
    548c:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    548e:	7823      	ldrb	r3, [r4, #0]
    5490:	b913      	cbnz	r3, 5498 <log_backend_enable+0x20>
    5492:	4805      	ldr	r0, [pc, #20]	; (54a8 <log_backend_enable+0x30>)
    5494:	f01a ff34 	bl	20300 <z_impl_k_sem_give>
	backend_attached = true;
    5498:	2301      	movs	r3, #1
    549a:	7023      	strb	r3, [r4, #0]
}
    549c:	bd10      	pop	{r4, pc}
    549e:	bf00      	nop
    54a0:	000278c4 	.word	0x000278c4
    54a4:	2000ed81 	.word	0x2000ed81
    54a8:	20009fd8 	.word	0x20009fd8

000054ac <log_init>:
{
    54ac:	b570      	push	{r4, r5, r6, lr}
    54ae:	4b11      	ldr	r3, [pc, #68]	; (54f4 <log_init+0x48>)
    54b0:	f3bf 8f5b 	dmb	ish
    54b4:	e853 5f00 	ldrex	r5, [r3]
    54b8:	1c6a      	adds	r2, r5, #1
    54ba:	e843 2100 	strex	r1, r2, [r3]
    54be:	2900      	cmp	r1, #0
    54c0:	d1f8      	bne.n	54b4 <log_init+0x8>
    54c2:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    54c6:	b92d      	cbnz	r5, 54d4 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    54c8:	4c0b      	ldr	r4, [pc, #44]	; (54f8 <log_init+0x4c>)
    54ca:	4e0c      	ldr	r6, [pc, #48]	; (54fc <log_init+0x50>)
    54cc:	1b36      	subs	r6, r6, r4
    54ce:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    54d0:	42b5      	cmp	r5, r6
    54d2:	db00      	blt.n	54d6 <log_init+0x2a>
}
    54d4:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    54d6:	7b23      	ldrb	r3, [r4, #12]
    54d8:	b143      	cbz	r3, 54ec <log_init+0x40>
			if (backend->api->init != NULL) {
    54da:	6823      	ldr	r3, [r4, #0]
    54dc:	695b      	ldr	r3, [r3, #20]
    54de:	b103      	cbz	r3, 54e2 <log_init+0x36>
				backend->api->init();
    54e0:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    54e2:	2204      	movs	r2, #4
    54e4:	2100      	movs	r1, #0
    54e6:	4620      	mov	r0, r4
    54e8:	f7ff ffc6 	bl	5478 <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    54ec:	3501      	adds	r5, #1
    54ee:	3410      	adds	r4, #16
    54f0:	e7ee      	b.n	54d0 <log_init+0x24>
    54f2:	bf00      	nop
    54f4:	2000d504 	.word	0x2000d504
    54f8:	000278c4 	.word	0x000278c4
    54fc:	000278e4 	.word	0x000278e4

00005500 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    5500:	4b16      	ldr	r3, [pc, #88]	; (555c <log_strdup+0x5c>)
    5502:	4298      	cmp	r0, r3
{
    5504:	b537      	push	{r0, r1, r2, r4, r5, lr}
    5506:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    5508:	d302      	bcc.n	5510 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    550a:	4b15      	ldr	r3, [pc, #84]	; (5560 <log_strdup+0x60>)
    550c:	4298      	cmp	r0, r3
    550e:	d320      	bcc.n	5552 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    5510:	4814      	ldr	r0, [pc, #80]	; (5564 <log_strdup+0x64>)
    5512:	2200      	movs	r2, #0
    5514:	2300      	movs	r3, #0
    5516:	a901      	add	r1, sp, #4
    5518:	f01a fa24 	bl	1f964 <k_mem_slab_alloc>
	if (err != 0) {
    551c:	4605      	mov	r5, r0
    551e:	b9d8      	cbnz	r0, 5558 <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5520:	2201      	movs	r2, #1
    5522:	9b01      	ldr	r3, [sp, #4]
    5524:	f3bf 8f5b 	dmb	ish
    5528:	e853 1f00 	ldrex	r1, [r3]
    552c:	e843 2000 	strex	r0, r2, [r3]
    5530:	2800      	cmp	r0, #0
    5532:	d1f9      	bne.n	5528 <log_strdup+0x28>
    5534:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    5538:	9801      	ldr	r0, [sp, #4]
    553a:	4621      	mov	r1, r4
    553c:	221f      	movs	r2, #31
    553e:	3004      	adds	r0, #4
    5540:	f01e fe90 	bl	24264 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    5544:	9c01      	ldr	r4, [sp, #4]
    5546:	237e      	movs	r3, #126	; 0x7e
    5548:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    554c:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    5550:	3404      	adds	r4, #4
}
    5552:	4620      	mov	r0, r4
    5554:	b003      	add	sp, #12
    5556:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    5558:	4c03      	ldr	r4, [pc, #12]	; (5568 <log_strdup+0x68>)
    555a:	e7fa      	b.n	5552 <log_strdup+0x52>
    555c:	00027478 	.word	0x00027478
    5560:	0002d920 	.word	0x0002d920
    5564:	2000d510 	.word	0x2000d510
    5568:	0002b3e4 	.word	0x0002b3e4

0000556c <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    556c:	b148      	cbz	r0, 5582 <log_is_strdup+0x16>
    556e:	4b05      	ldr	r3, [pc, #20]	; (5584 <log_is_strdup+0x18>)
    5570:	4298      	cmp	r0, r3
    5572:	d305      	bcc.n	5580 <log_is_strdup+0x14>
    5574:	33a0      	adds	r3, #160	; 0xa0
    5576:	4298      	cmp	r0, r3
    5578:	bf2c      	ite	cs
    557a:	2000      	movcs	r0, #0
    557c:	2001      	movcc	r0, #1
    557e:	4770      	bx	lr
    5580:	2000      	movs	r0, #0
}
    5582:	4770      	bx	lr
    5584:	20012b98 	.word	0x20012b98

00005588 <z_impl_log_process>:
{
    5588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    558c:	4b4d      	ldr	r3, [pc, #308]	; (56c4 <z_impl_log_process+0x13c>)
    558e:	781b      	ldrb	r3, [r3, #0]
{
    5590:	b085      	sub	sp, #20
    5592:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    5594:	b903      	cbnz	r3, 5598 <z_impl_log_process+0x10>
    5596:	b360      	cbz	r0, 55f2 <z_impl_log_process+0x6a>
    5598:	f04f 0320 	mov.w	r3, #32
    559c:	f3ef 8611 	mrs	r6, BASEPRI
    55a0:	f383 8811 	msr	BASEPRI, r3
    55a4:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    55a8:	4847      	ldr	r0, [pc, #284]	; (56c8 <z_impl_log_process+0x140>)
    55aa:	f01c fe6c 	bl	22286 <log_list_head_get>
    55ae:	4605      	mov	r5, r0
	__asm__ volatile(
    55b0:	f386 8811 	msr	BASEPRI, r6
    55b4:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    55b8:	b178      	cbz	r0, 55da <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    55ba:	f3bf 8f5b 	dmb	ish
    55be:	4b43      	ldr	r3, [pc, #268]	; (56cc <z_impl_log_process+0x144>)
    55c0:	e853 2f00 	ldrex	r2, [r3]
    55c4:	3a01      	subs	r2, #1
    55c6:	e843 2100 	strex	r1, r2, [r3]
    55ca:	2900      	cmp	r1, #0
    55cc:	d1f8      	bne.n	55c0 <z_impl_log_process+0x38>
    55ce:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    55d2:	b194      	cbz	r4, 55fa <z_impl_log_process+0x72>
	log_msg_put(msg);
    55d4:	4628      	mov	r0, r5
    55d6:	f01c ff6f 	bl	224b8 <log_msg_put>
	if (!bypass && dropped_cnt) {
    55da:	b924      	cbnz	r4, 55e6 <z_impl_log_process+0x5e>
    55dc:	4b3c      	ldr	r3, [pc, #240]	; (56d0 <z_impl_log_process+0x148>)
    55de:	681b      	ldr	r3, [r3, #0]
    55e0:	b10b      	cbz	r3, 55e6 <z_impl_log_process+0x5e>
		dropped_notify();
    55e2:	f7ff ff05 	bl	53f0 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    55e6:	4838      	ldr	r0, [pc, #224]	; (56c8 <z_impl_log_process+0x140>)
    55e8:	f01c fe4b 	bl	22282 <log_list_head_peek>
    55ec:	1e04      	subs	r4, r0, #0
    55ee:	bf18      	it	ne
    55f0:	2401      	movne	r4, #1
}
    55f2:	4620      	mov	r0, r4
    55f4:	b005      	add	sp, #20
    55f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    55fa:	4b36      	ldr	r3, [pc, #216]	; (56d4 <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    55fc:	781b      	ldrb	r3, [r3, #0]
    55fe:	b9e3      	cbnz	r3, 563a <z_impl_log_process+0xb2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5600:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    5602:	07db      	lsls	r3, r3, #31
    5604:	d419      	bmi.n	563a <z_impl_log_process+0xb2>
	msg_str = log_msg_str_get(msg);
    5606:	f01c ff6a 	bl	224de <log_msg_str_get>
    560a:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    560c:	4628      	mov	r0, r5
    560e:	f01c ff31 	bl	22474 <log_msg_nargs_get>
    5612:	4601      	mov	r1, r0
    5614:	4638      	mov	r0, r7
    5616:	f01c fe49 	bl	222ac <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    561a:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 56d8 <z_impl_log_process+0x150>
    561e:	4b2f      	ldr	r3, [pc, #188]	; (56dc <z_impl_log_process+0x154>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5620:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 56e0 <z_impl_log_process+0x158>
    5624:	eba3 0308 	sub.w	r3, r3, r8
    5628:	08db      	lsrs	r3, r3, #3
    562a:	9303      	str	r3, [sp, #12]
    562c:	4b2d      	ldr	r3, [pc, #180]	; (56e4 <z_impl_log_process+0x15c>)
    562e:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5632:	4606      	mov	r6, r0
    5634:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    5638:	b936      	cbnz	r6, 5648 <z_impl_log_process+0xc0>
    563a:	4e2b      	ldr	r6, [pc, #172]	; (56e8 <z_impl_log_process+0x160>)
    563c:	4f2b      	ldr	r7, [pc, #172]	; (56ec <z_impl_log_process+0x164>)
    563e:	1bbf      	subs	r7, r7, r6
    5640:	113f      	asrs	r7, r7, #4
    5642:	f04f 0800 	mov.w	r8, #0
    5646:	e03a      	b.n	56be <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    5648:	fab6 f186 	clz	r1, r6
    564c:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    5650:	4649      	mov	r1, r9
    5652:	4628      	mov	r0, r5
    5654:	f01c ff11 	bl	2247a <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    5658:	4b25      	ldr	r3, [pc, #148]	; (56f0 <z_impl_log_process+0x168>)
    565a:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    565c:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    565e:	d302      	bcc.n	5666 <z_impl_log_process+0xde>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    5660:	4a24      	ldr	r2, [pc, #144]	; (56f4 <z_impl_log_process+0x16c>)
    5662:	4290      	cmp	r0, r2
    5664:	d31a      	bcc.n	569c <z_impl_log_process+0x114>
    5666:	4608      	mov	r0, r1
    5668:	f7ff ff80 	bl	556c <log_is_strdup>
    566c:	4602      	mov	r2, r0
    566e:	b9a8      	cbnz	r0, 569c <z_impl_log_process+0x114>
    5670:	4b21      	ldr	r3, [pc, #132]	; (56f8 <z_impl_log_process+0x170>)
    5672:	4299      	cmp	r1, r3
    5674:	d012      	beq.n	569c <z_impl_log_process+0x114>
	return msg->hdr.ids.source_id;
    5676:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    5678:	9903      	ldr	r1, [sp, #12]
    567a:	f3c3 1389 	ubfx	r3, r3, #6, #10
    567e:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    5680:	bf38      	it	cc
    5682:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5686:	ea4f 138a 	mov.w	r3, sl, lsl #6
    568a:	f043 0301 	orr.w	r3, r3, #1
    568e:	f8ad 3000 	strh.w	r3, [sp]
    5692:	4649      	mov	r1, r9
    5694:	463b      	mov	r3, r7
    5696:	4658      	mov	r0, fp
    5698:	f01c fe62 	bl	22360 <log_3>
		mask &= ~BIT(idx);
    569c:	2301      	movs	r3, #1
    569e:	fa03 f109 	lsl.w	r1, r3, r9
    56a2:	ea26 0601 	bic.w	r6, r6, r1
    56a6:	e7c7      	b.n	5638 <z_impl_log_process+0xb0>
	return backend->cb->active;
    56a8:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    56aa:	795b      	ldrb	r3, [r3, #5]
    56ac:	b123      	cbz	r3, 56b8 <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    56ae:	6833      	ldr	r3, [r6, #0]
    56b0:	4629      	mov	r1, r5
    56b2:	681b      	ldr	r3, [r3, #0]
    56b4:	4630      	mov	r0, r6
    56b6:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    56b8:	f108 0801 	add.w	r8, r8, #1
    56bc:	3610      	adds	r6, #16
    56be:	45b8      	cmp	r8, r7
    56c0:	dbf2      	blt.n	56a8 <z_impl_log_process+0x120>
    56c2:	e787      	b.n	55d4 <z_impl_log_process+0x4c>
    56c4:	2000ed81 	.word	0x2000ed81
    56c8:	2000d508 	.word	0x2000d508
    56cc:	2000d4fc 	.word	0x2000d4fc
    56d0:	2000d500 	.word	0x2000d500
    56d4:	2000ed82 	.word	0x2000ed82
    56d8:	0002775c 	.word	0x0002775c
    56dc:	000278c4 	.word	0x000278c4
    56e0:	0002b3fe 	.word	0x0002b3fe
    56e4:	0002787c 	.word	0x0002787c
    56e8:	000278c4 	.word	0x000278c4
    56ec:	000278e4 	.word	0x000278e4
    56f0:	00027478 	.word	0x00027478
    56f4:	0002d920 	.word	0x0002d920
    56f8:	0002b3e4 	.word	0x0002b3e4

000056fc <log_process_thread_func>:
{
    56fc:	b510      	push	{r4, lr}
	log_init();
    56fe:	f7ff fed5 	bl	54ac <log_init>
	return z_impl_k_current_get();
    5702:	f01a fdf7 	bl	202f4 <z_impl_k_current_get>
	proc_tid = process_tid;
    5706:	4b0c      	ldr	r3, [pc, #48]	; (5738 <log_process_thread_func+0x3c>)
    5708:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    570a:	b130      	cbz	r0, 571a <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    570c:	4b0b      	ldr	r3, [pc, #44]	; (573c <log_process_thread_func+0x40>)
	    process_tid &&
    570e:	681b      	ldr	r3, [r3, #0]
    5710:	2b09      	cmp	r3, #9
    5712:	dd02      	ble.n	571a <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5714:	480a      	ldr	r0, [pc, #40]	; (5740 <log_process_thread_func+0x44>)
    5716:	f01a fdf3 	bl	20300 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    571a:	4c09      	ldr	r4, [pc, #36]	; (5740 <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    571c:	2000      	movs	r0, #0
    571e:	f7ff ff33 	bl	5588 <z_impl_log_process>
		if (log_process(false) == false) {
    5722:	2800      	cmp	r0, #0
    5724:	d1fa      	bne.n	571c <log_process_thread_func+0x20>
    5726:	f04f 32ff 	mov.w	r2, #4294967295
    572a:	f04f 33ff 	mov.w	r3, #4294967295
    572e:	4620      	mov	r0, r4
    5730:	f01a fe0c 	bl	2034c <z_impl_k_sem_take>
    5734:	e7f2      	b.n	571c <log_process_thread_func+0x20>
    5736:	bf00      	nop
    5738:	2000d52c 	.word	0x2000d52c
    573c:	2000d4fc 	.word	0x2000d4fc
    5740:	20009fd8 	.word	0x20009fd8

00005744 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    5744:	4b29      	ldr	r3, [pc, #164]	; (57ec <msg_finalize+0xa8>)
{
    5746:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    5748:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    574a:	8141      	strh	r1, [r0, #10]
{
    574c:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    574e:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    5750:	4d27      	ldr	r5, [pc, #156]	; (57f0 <msg_finalize+0xac>)
    5752:	60e0      	str	r0, [r4, #12]
    5754:	f3bf 8f5b 	dmb	ish
    5758:	e855 3f00 	ldrex	r3, [r5]
    575c:	3301      	adds	r3, #1
    575e:	e845 3200 	strex	r2, r3, [r5]
    5762:	2a00      	cmp	r2, #0
    5764:	d1f8      	bne.n	5758 <msg_finalize+0x14>
    5766:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    576a:	f04f 0320 	mov.w	r3, #32
    576e:	f3ef 8611 	mrs	r6, BASEPRI
    5772:	f383 8811 	msr	BASEPRI, r3
    5776:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    577a:	481e      	ldr	r0, [pc, #120]	; (57f4 <msg_finalize+0xb0>)
    577c:	4621      	mov	r1, r4
    577e:	f01c fd76 	bl	2226e <log_list_add_tail>
	__asm__ volatile(
    5782:	f386 8811 	msr	BASEPRI, r6
    5786:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    578a:	4b1b      	ldr	r3, [pc, #108]	; (57f8 <msg_finalize+0xb4>)
    578c:	781b      	ldrb	r3, [r3, #0]
    578e:	b183      	cbz	r3, 57b2 <msg_finalize+0x6e>
	__asm__ volatile(
    5790:	f04f 0320 	mov.w	r3, #32
    5794:	f3ef 8411 	mrs	r4, BASEPRI
    5798:	f383 8811 	msr	BASEPRI, r3
    579c:	f3bf 8f6f 	isb	sy
    57a0:	2000      	movs	r0, #0
    57a2:	f7ff fef1 	bl	5588 <z_impl_log_process>
	__asm__ volatile(
    57a6:	f384 8811 	msr	BASEPRI, r4
    57aa:	f3bf 8f6f 	isb	sy
}
    57ae:	b002      	add	sp, #8
    57b0:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    57b2:	4a12      	ldr	r2, [pc, #72]	; (57fc <msg_finalize+0xb8>)
    57b4:	682b      	ldr	r3, [r5, #0]
    57b6:	6812      	ldr	r2, [r2, #0]
    57b8:	2a00      	cmp	r2, #0
    57ba:	d0f8      	beq.n	57ae <msg_finalize+0x6a>
    57bc:	2b01      	cmp	r3, #1
    57be:	d10a      	bne.n	57d6 <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    57c0:	2200      	movs	r2, #0
    57c2:	2300      	movs	r3, #0
    57c4:	e9cd 2300 	strd	r2, r3, [sp]
    57c8:	480d      	ldr	r0, [pc, #52]	; (5800 <msg_finalize+0xbc>)
    57ca:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    57ce:	2300      	movs	r3, #0
    57d0:	f01b f8be 	bl	20950 <z_impl_k_timer_start>
    57d4:	e7eb      	b.n	57ae <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    57d6:	2b0a      	cmp	r3, #10
    57d8:	d1e9      	bne.n	57ae <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    57da:	4809      	ldr	r0, [pc, #36]	; (5800 <msg_finalize+0xbc>)
    57dc:	f021 fcd3 	bl	27186 <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    57e0:	4808      	ldr	r0, [pc, #32]	; (5804 <msg_finalize+0xc0>)
}
    57e2:	b002      	add	sp, #8
    57e4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    57e8:	f01a bd8a 	b.w	20300 <z_impl_k_sem_give>
    57ec:	20000278 	.word	0x20000278
    57f0:	2000d4fc 	.word	0x2000d4fc
    57f4:	2000d508 	.word	0x2000d508
    57f8:	2000ed82 	.word	0x2000ed82
    57fc:	2000d52c 	.word	0x2000d52c
    5800:	2000a498 	.word	0x2000a498
    5804:	20009fd8 	.word	0x20009fd8

00005808 <z_impl_log_panic>:
{
    5808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    580a:	4f0e      	ldr	r7, [pc, #56]	; (5844 <z_impl_log_panic+0x3c>)
    580c:	783d      	ldrb	r5, [r7, #0]
    580e:	b975      	cbnz	r5, 582e <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5810:	4c0d      	ldr	r4, [pc, #52]	; (5848 <z_impl_log_panic+0x40>)
    5812:	4e0e      	ldr	r6, [pc, #56]	; (584c <z_impl_log_panic+0x44>)
	log_init();
    5814:	f7ff fe4a 	bl	54ac <log_init>
    5818:	1b36      	subs	r6, r6, r4
    581a:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    581c:	42b5      	cmp	r5, r6
    581e:	db07      	blt.n	5830 <z_impl_log_panic+0x28>
    5820:	2000      	movs	r0, #0
    5822:	f7ff feb1 	bl	5588 <z_impl_log_process>
		while (log_process(false) == true) {
    5826:	2800      	cmp	r0, #0
    5828:	d1fa      	bne.n	5820 <z_impl_log_panic+0x18>
	panic_mode = true;
    582a:	2301      	movs	r3, #1
    582c:	703b      	strb	r3, [r7, #0]
}
    582e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5830:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5832:	795b      	ldrb	r3, [r3, #5]
    5834:	b11b      	cbz	r3, 583e <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    5836:	6823      	ldr	r3, [r4, #0]
    5838:	4620      	mov	r0, r4
    583a:	691b      	ldr	r3, [r3, #16]
    583c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    583e:	3501      	adds	r5, #1
    5840:	3410      	adds	r4, #16
    5842:	e7eb      	b.n	581c <z_impl_log_panic+0x14>
    5844:	2000ed82 	.word	0x2000ed82
    5848:	000278c4 	.word	0x000278c4
    584c:	000278e4 	.word	0x000278e4

00005850 <log_free>:
{
    5850:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    5852:	3804      	subs	r0, #4
    5854:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    5856:	f3bf 8f5b 	dmb	ish
    585a:	e850 3f00 	ldrex	r3, [r0]
    585e:	1e5a      	subs	r2, r3, #1
    5860:	e840 2100 	strex	r1, r2, [r0]
    5864:	2900      	cmp	r1, #0
    5866:	d1f8      	bne.n	585a <log_free+0xa>
    5868:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    586c:	2b01      	cmp	r3, #1
    586e:	d103      	bne.n	5878 <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    5870:	4803      	ldr	r0, [pc, #12]	; (5880 <log_free+0x30>)
    5872:	a901      	add	r1, sp, #4
    5874:	f01a f8a6 	bl	1f9c4 <k_mem_slab_free>
}
    5878:	b003      	add	sp, #12
    587a:	f85d fb04 	ldr.w	pc, [sp], #4
    587e:	bf00      	nop
    5880:	2000d510 	.word	0x2000d510

00005884 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    5884:	2320      	movs	r3, #32
    5886:	4902      	ldr	r1, [pc, #8]	; (5890 <log_msg_pool_init+0xc>)
    5888:	4802      	ldr	r0, [pc, #8]	; (5894 <log_msg_pool_init+0x10>)
    588a:	461a      	mov	r2, r3
    588c:	f021 b982 	b.w	26b94 <k_mem_slab_init>
    5890:	20012c38 	.word	0x20012c38
    5894:	2000d530 	.word	0x2000d530

00005898 <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    5898:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    589a:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    589c:	4d09      	ldr	r5, [pc, #36]	; (58c4 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    589e:	9301      	str	r3, [sp, #4]
    58a0:	2001      	movs	r0, #1
    58a2:	f7ff fe71 	bl	5588 <z_impl_log_process>
    58a6:	4604      	mov	r4, r0
			log_dropped();
    58a8:	f7ff fdc8 	bl	543c <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    58ac:	2200      	movs	r2, #0
    58ae:	2300      	movs	r3, #0
    58b0:	a901      	add	r1, sp, #4
    58b2:	4628      	mov	r0, r5
    58b4:	f01a f856 	bl	1f964 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    58b8:	b108      	cbz	r0, 58be <log_msg_no_space_handle+0x26>
    58ba:	2c00      	cmp	r4, #0
    58bc:	d1f0      	bne.n	58a0 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    58be:	9801      	ldr	r0, [sp, #4]
    58c0:	b003      	add	sp, #12
    58c2:	bd30      	pop	{r4, r5, pc}
    58c4:	2000d530 	.word	0x2000d530

000058c8 <log_msg_chunk_alloc>:
{
    58c8:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    58ca:	2300      	movs	r3, #0
    58cc:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    58ce:	4807      	ldr	r0, [pc, #28]	; (58ec <log_msg_chunk_alloc+0x24>)
    58d0:	2200      	movs	r2, #0
    58d2:	2300      	movs	r3, #0
    58d4:	a901      	add	r1, sp, #4
    58d6:	f01a f845 	bl	1f964 <k_mem_slab_alloc>
	if (err != 0) {
    58da:	b110      	cbz	r0, 58e2 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    58dc:	f7ff ffdc 	bl	5898 <log_msg_no_space_handle>
    58e0:	9001      	str	r0, [sp, #4]
}
    58e2:	9801      	ldr	r0, [sp, #4]
    58e4:	b003      	add	sp, #12
    58e6:	f85d fb04 	ldr.w	pc, [sp], #4
    58ea:	bf00      	nop
    58ec:	2000d530 	.word	0x2000d530

000058f0 <msg_free>:
{
    58f0:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    58f2:	7a03      	ldrb	r3, [r0, #8]
    58f4:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    58f6:	07dc      	lsls	r4, r3, #31
{
    58f8:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    58fa:	d41e      	bmi.n	593a <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    58fc:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    58fe:	092d      	lsrs	r5, r5, #4
    5900:	d01b      	beq.n	593a <msg_free+0x4a>
		uint32_t smask = 0;
    5902:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    5904:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    5906:	9801      	ldr	r0, [sp, #4]
    5908:	4631      	mov	r1, r6
    590a:	f01c fdb6 	bl	2247a <log_msg_arg_get>
    590e:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    5910:	f7ff fe2c 	bl	556c <log_is_strdup>
    5914:	b170      	cbz	r0, 5934 <msg_free+0x44>
				if (smask == 0) {
    5916:	b934      	cbnz	r4, 5926 <msg_free+0x36>
					smask = z_log_get_s_mask(
    5918:	9b01      	ldr	r3, [sp, #4]
    591a:	4629      	mov	r1, r5
    591c:	6918      	ldr	r0, [r3, #16]
    591e:	f01c fcc5 	bl	222ac <z_log_get_s_mask>
					if (smask == 0) {
    5922:	4604      	mov	r4, r0
    5924:	b148      	cbz	r0, 593a <msg_free+0x4a>
				if (smask & BIT(i)) {
    5926:	fa24 f306 	lsr.w	r3, r4, r6
    592a:	07d9      	lsls	r1, r3, #31
    592c:	d502      	bpl.n	5934 <msg_free+0x44>
					log_free(buf);
    592e:	4638      	mov	r0, r7
    5930:	f7ff ff8e 	bl	5850 <log_free>
		for (i = 0; i < nargs; i++) {
    5934:	3601      	adds	r6, #1
    5936:	42ae      	cmp	r6, r5
    5938:	d3e5      	bcc.n	5906 <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    593a:	9b01      	ldr	r3, [sp, #4]
    593c:	7a1a      	ldrb	r2, [r3, #8]
    593e:	0792      	lsls	r2, r2, #30
    5940:	d504      	bpl.n	594c <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5942:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5944:	4c08      	ldr	r4, [pc, #32]	; (5968 <msg_free+0x78>)
    5946:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5948:	9b03      	ldr	r3, [sp, #12]
    594a:	b92b      	cbnz	r3, 5958 <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    594c:	4806      	ldr	r0, [pc, #24]	; (5968 <msg_free+0x78>)
    594e:	a901      	add	r1, sp, #4
    5950:	f01a f838 	bl	1f9c4 <k_mem_slab_free>
}
    5954:	b005      	add	sp, #20
    5956:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5958:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    595a:	a903      	add	r1, sp, #12
    595c:	4620      	mov	r0, r4
    595e:	f01a f831 	bl	1f9c4 <k_mem_slab_free>
		cont = next;
    5962:	9503      	str	r5, [sp, #12]
    5964:	e7f0      	b.n	5948 <msg_free+0x58>
    5966:	bf00      	nop
    5968:	2000d530 	.word	0x2000d530

0000596c <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    596c:	b40e      	push	{r1, r2, r3}
    596e:	b503      	push	{r0, r1, lr}
    5970:	ab03      	add	r3, sp, #12
    5972:	4601      	mov	r1, r0
    5974:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    5978:	4804      	ldr	r0, [pc, #16]	; (598c <print_formatted+0x20>)
	va_start(args, fmt);
    597a:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    597c:	f7fe fe60 	bl	4640 <cbvprintf>
	va_end(args);

	return length;
}
    5980:	b002      	add	sp, #8
    5982:	f85d eb04 	ldr.w	lr, [sp], #4
    5986:	b003      	add	sp, #12
    5988:	4770      	bx	lr
    598a:	bf00      	nop
    598c:	00022897 	.word	0x00022897

00005990 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5994:	461d      	mov	r5, r3
    5996:	9b08      	ldr	r3, [sp, #32]
    5998:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    599a:	06da      	lsls	r2, r3, #27
{
    599c:	4604      	mov	r4, r0
    599e:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    59a0:	d405      	bmi.n	59ae <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    59a2:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    59a4:	bf4c      	ite	mi
    59a6:	492a      	ldrmi	r1, [pc, #168]	; (5a50 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    59a8:	492a      	ldrpl	r1, [pc, #168]	; (5a54 <hexdump_line_print+0xc4>)
    59aa:	f7ff ffdf 	bl	596c <print_formatted>
	newline_print(log_output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(log_output, " ");
    59ae:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 5a58 <hexdump_line_print+0xc8>
{
    59b2:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    59b6:	45a8      	cmp	r8, r5
    59b8:	db2a      	blt.n	5a10 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    59ba:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5a5c <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    59be:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 5a60 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    59c2:	f8df a094 	ldr.w	sl, [pc, #148]	; 5a58 <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    59c6:	2500      	movs	r5, #0
		if (i < length) {
    59c8:	42bd      	cmp	r5, r7
    59ca:	d22f      	bcs.n	5a2c <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    59cc:	5d72      	ldrb	r2, [r6, r5]
    59ce:	4649      	mov	r1, r9
    59d0:	4620      	mov	r0, r4
    59d2:	f7ff ffcb 	bl	596c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    59d6:	3501      	adds	r5, #1
    59d8:	2d10      	cmp	r5, #16
    59da:	d120      	bne.n	5a1e <hexdump_line_print+0x8e>
		}
	}

	print_formatted(log_output, "|");
    59dc:	4921      	ldr	r1, [pc, #132]	; (5a64 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(log_output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    59de:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5a58 <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    59e2:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5a68 <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    59e6:	4620      	mov	r0, r4
    59e8:	f7ff ffc0 	bl	596c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    59ec:	2500      	movs	r5, #0
		if (i < length) {
    59ee:	42af      	cmp	r7, r5
    59f0:	d928      	bls.n	5a44 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    59f2:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    59f4:	f1a2 0320 	sub.w	r3, r2, #32
    59f8:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(log_output, "%c",
    59fa:	bf28      	it	cs
    59fc:	222e      	movcs	r2, #46	; 0x2e
    59fe:	4649      	mov	r1, r9
    5a00:	4620      	mov	r0, r4
    5a02:	f7ff ffb3 	bl	596c <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5a06:	3501      	adds	r5, #1
    5a08:	2d10      	cmp	r5, #16
    5a0a:	d114      	bne.n	5a36 <hexdump_line_print+0xa6>
		}
	}
}
    5a0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    5a10:	4649      	mov	r1, r9
    5a12:	4620      	mov	r0, r4
    5a14:	f7ff ffaa 	bl	596c <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5a18:	f108 0801 	add.w	r8, r8, #1
    5a1c:	e7cb      	b.n	59b6 <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5a1e:	076a      	lsls	r2, r5, #29
    5a20:	d1d2      	bne.n	59c8 <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    5a22:	4651      	mov	r1, sl
    5a24:	4620      	mov	r0, r4
    5a26:	f7ff ffa1 	bl	596c <print_formatted>
    5a2a:	e7cd      	b.n	59c8 <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    5a2c:	4641      	mov	r1, r8
    5a2e:	4620      	mov	r0, r4
    5a30:	f7ff ff9c 	bl	596c <print_formatted>
    5a34:	e7cf      	b.n	59d6 <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5a36:	076b      	lsls	r3, r5, #29
    5a38:	d1d9      	bne.n	59ee <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5a3a:	4641      	mov	r1, r8
    5a3c:	4620      	mov	r0, r4
    5a3e:	f7ff ff95 	bl	596c <print_formatted>
    5a42:	e7d4      	b.n	59ee <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5a44:	4641      	mov	r1, r8
    5a46:	4620      	mov	r0, r4
    5a48:	f7ff ff90 	bl	596c <print_formatted>
    5a4c:	e7db      	b.n	5a06 <hexdump_line_print+0x76>
    5a4e:	bf00      	nop
    5a50:	00029343 	.word	0x00029343
    5a54:	0002962f 	.word	0x0002962f
    5a58:	0002ae8c 	.word	0x0002ae8c
    5a5c:	0002b447 	.word	0x0002b447
    5a60:	0002b441 	.word	0x0002b441
    5a64:	0002b44b 	.word	0x0002b44b
    5a68:	0002b44d 	.word	0x0002b44d

00005a6c <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5a70:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5a72:	f011 0402 	ands.w	r4, r1, #2
{
    5a76:	4690      	mov	r8, r2
    5a78:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5a7c:	4606      	mov	r6, r0
    5a7e:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5a80:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5a84:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5a88:	d006      	beq.n	5a98 <prefix_print+0x2c>
	if (!format) {
    5a8a:	f011 0f44 	tst.w	r1, #68	; 0x44
    5a8e:	d136      	bne.n	5afe <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    5a90:	4932      	ldr	r1, [pc, #200]	; (5b5c <prefix_print+0xf0>)
    5a92:	f7ff ff6b 	bl	596c <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    5a96:	4604      	mov	r4, r0
	if (color) {
    5a98:	f1b9 0f00 	cmp.w	r9, #0
    5a9c:	d00a      	beq.n	5ab4 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    5a9e:	4b30      	ldr	r3, [pc, #192]	; (5b60 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    5aa0:	4930      	ldr	r1, [pc, #192]	; (5b64 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    5aa2:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    5aa6:	4b30      	ldr	r3, [pc, #192]	; (5b68 <prefix_print+0xfc>)
    5aa8:	4630      	mov	r0, r6
    5aaa:	2a00      	cmp	r2, #0
    5aac:	bf08      	it	eq
    5aae:	461a      	moveq	r2, r3
    5ab0:	f7ff ff5c 	bl	596c <print_formatted>
	if (level_on) {
    5ab4:	b13d      	cbz	r5, 5ac6 <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    5ab6:	4b2d      	ldr	r3, [pc, #180]	; (5b6c <prefix_print+0x100>)
    5ab8:	492d      	ldr	r1, [pc, #180]	; (5b70 <prefix_print+0x104>)
    5aba:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    5abe:	4630      	mov	r0, r6
    5ac0:	f7ff ff54 	bl	596c <print_formatted>
    5ac4:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    5ac6:	f1b8 0f00 	cmp.w	r8, #0
    5aca:	d044      	beq.n	5b56 <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5acc:	2301      	movs	r3, #1
    5ace:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    5ad2:	4b28      	ldr	r3, [pc, #160]	; (5b74 <prefix_print+0x108>)
    5ad4:	f017 0f10 	tst.w	r7, #16
    5ad8:	4f27      	ldr	r7, [pc, #156]	; (5b78 <prefix_print+0x10c>)
    5ada:	bf18      	it	ne
    5adc:	461f      	movne	r7, r3
    5ade:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    5ae2:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    5ae6:	f7ff fcb9 	bl	545c <log_source_name_get>
    5aea:	4639      	mov	r1, r7
    5aec:	4602      	mov	r2, r0
    5aee:	4630      	mov	r0, r6
    5af0:	f7ff ff3c 	bl	596c <print_formatted>
    5af4:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    5af6:	4420      	add	r0, r4
    5af8:	b005      	add	sp, #20
    5afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5afe:	4b1f      	ldr	r3, [pc, #124]	; (5b7c <prefix_print+0x110>)
    5b00:	6819      	ldr	r1, [r3, #0]
    5b02:	b331      	cbz	r1, 5b52 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    5b04:	4b1e      	ldr	r3, [pc, #120]	; (5b80 <prefix_print+0x114>)
    5b06:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    5b0a:	681b      	ldr	r3, [r3, #0]
    5b0c:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5b10:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5b14:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5b18:	fbb4 f2fc 	udiv	r2, r4, ip
    5b1c:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5b20:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5b24:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5b28:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5b2c:	fbb4 faf1 	udiv	sl, r4, r1
    5b30:	fb01 441a 	mls	r4, r1, sl, r4
    5b34:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5b38:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5b3c:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    5b40:	e9cd a101 	strd	sl, r1, [sp, #4]
    5b44:	fb0e c113 	mls	r1, lr, r3, ip
    5b48:	9100      	str	r1, [sp, #0]
    5b4a:	490e      	ldr	r1, [pc, #56]	; (5b84 <prefix_print+0x118>)
    5b4c:	f7ff ff0e 	bl	596c <print_formatted>
    5b50:	e7a1      	b.n	5a96 <prefix_print+0x2a>
		length = 0;
    5b52:	4608      	mov	r0, r1
    5b54:	e79f      	b.n	5a96 <prefix_print+0x2a>
	total += print_formatted(log_output,
    5b56:	4f08      	ldr	r7, [pc, #32]	; (5b78 <prefix_print+0x10c>)
    5b58:	e7c1      	b.n	5ade <prefix_print+0x72>
    5b5a:	bf00      	nop
    5b5c:	0002b45e 	.word	0x0002b45e
    5b60:	00027b60 	.word	0x00027b60
    5b64:	0002c4aa 	.word	0x0002c4aa
    5b68:	0002b450 	.word	0x0002b450
    5b6c:	00027b74 	.word	0x00027b74
    5b70:	0002b483 	.word	0x0002b483
    5b74:	0002b45a 	.word	0x0002b45a
    5b78:	0002b455 	.word	0x0002b455
    5b7c:	2000d54c 	.word	0x2000d54c
    5b80:	2000d550 	.word	0x2000d550
    5b84:	0002b467 	.word	0x0002b467

00005b88 <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    5b88:	b538      	push	{r3, r4, r5, lr}
    5b8a:	460c      	mov	r4, r1
	if (color) {
    5b8c:	07e1      	lsls	r1, r4, #31
{
    5b8e:	4605      	mov	r5, r0
	if (color) {
    5b90:	d503      	bpl.n	5b9a <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    5b92:	4a08      	ldr	r2, [pc, #32]	; (5bb4 <postfix_print+0x2c>)
    5b94:	4908      	ldr	r1, [pc, #32]	; (5bb8 <postfix_print+0x30>)
    5b96:	f7ff fee9 	bl	596c <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5b9a:	06e2      	lsls	r2, r4, #27
    5b9c:	d408      	bmi.n	5bb0 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5b9e:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5ba0:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5ba2:	bf4c      	ite	mi
    5ba4:	4905      	ldrmi	r1, [pc, #20]	; (5bbc <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5ba6:	4906      	ldrpl	r1, [pc, #24]	; (5bc0 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    5ba8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5bac:	f7ff bede 	b.w	596c <print_formatted>
}
    5bb0:	bd38      	pop	{r3, r4, r5, pc}
    5bb2:	bf00      	nop
    5bb4:	0002b450 	.word	0x0002b450
    5bb8:	0002c4aa 	.word	0x0002c4aa
    5bbc:	00029343 	.word	0x00029343
    5bc0:	0002962f 	.word	0x0002962f

00005bc4 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5bc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5bc8:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5bca:	f013 0807 	ands.w	r8, r3, #7
{
    5bce:	b08a      	sub	sp, #40	; 0x28
    5bd0:	4605      	mov	r5, r0
    5bd2:	460e      	mov	r6, r1
    5bd4:	4617      	mov	r7, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5bd6:	d022      	beq.n	5c1e <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5bd8:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    5bda:	8949      	ldrh	r1, [r1, #10]
    5bdc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5be0:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5be4:	43d2      	mvns	r2, r2
    5be6:	e9cd 8300 	strd	r8, r3, [sp]
    5bea:	9102      	str	r1, [sp, #8]
    5bec:	68f3      	ldr	r3, [r6, #12]
    5bee:	f002 0201 	and.w	r2, r2, #1
    5bf2:	4639      	mov	r1, r7
    5bf4:	f7ff ff3a 	bl	5a6c <prefix_print>
    5bf8:	4681      	mov	r9, r0
    5bfa:	7a34      	ldrb	r4, [r6, #8]
    5bfc:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    5bfe:	f014 0401 	ands.w	r4, r4, #1
    5c02:	d00e      	beq.n	5c22 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    5c04:	4629      	mov	r1, r5
    5c06:	4630      	mov	r0, r6
    5c08:	f01c fcdb 	bl	225c2 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    5c0c:	f1b8 0f00 	cmp.w	r8, #0
    5c10:	d02b      	beq.n	5c6a <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    5c12:	4642      	mov	r2, r8
    5c14:	4639      	mov	r1, r7
    5c16:	4628      	mov	r0, r5
    5c18:	f7ff ffb6 	bl	5b88 <postfix_print>
    5c1c:	e025      	b.n	5c6a <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5c1e:	46c1      	mov	r9, r8
    5c20:	e7eb      	b.n	5bfa <log_output_msg_process+0x36>
	} else if (raw_string) {
    5c22:	f1b8 0f00 	cmp.w	r8, #0
    5c26:	d126      	bne.n	5c76 <log_output_msg_process+0xb2>
	size_t offset = 0;
    5c28:	4627      	mov	r7, r4
		length = log_output->size;
    5c2a:	68eb      	ldr	r3, [r5, #12]
    5c2c:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    5c2e:	aa06      	add	r2, sp, #24
    5c30:	463b      	mov	r3, r7
    5c32:	68a9      	ldr	r1, [r5, #8]
    5c34:	4630      	mov	r0, r6
    5c36:	f01c fcb0 	bl	2259a <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    5c3a:	9a06      	ldr	r2, [sp, #24]
    5c3c:	686b      	ldr	r3, [r5, #4]
    5c3e:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5c40:	b13a      	cbz	r2, 5c52 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    5c42:	68ab      	ldr	r3, [r5, #8]
    5c44:	4413      	add	r3, r2
    5c46:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    5c4a:	f1a4 030a 	sub.w	r3, r4, #10
    5c4e:	425c      	negs	r4, r3
    5c50:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    5c52:	4628      	mov	r0, r5
    5c54:	f01c fe12 	bl	2287c <log_output_flush>
		offset += length;
    5c58:	9b06      	ldr	r3, [sp, #24]
    5c5a:	441f      	add	r7, r3
	} while (length > 0);
    5c5c:	2b00      	cmp	r3, #0
    5c5e:	d1e4      	bne.n	5c2a <log_output_msg_process+0x66>
	if (eol) {
    5c60:	b11c      	cbz	r4, 5c6a <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    5c62:	4914      	ldr	r1, [pc, #80]	; (5cb4 <log_output_msg_process+0xf0>)
    5c64:	4628      	mov	r0, r5
    5c66:	f7ff fe81 	bl	596c <print_formatted>
	}

	log_output_flush(log_output);
    5c6a:	4628      	mov	r0, r5
}
    5c6c:	b00a      	add	sp, #40	; 0x28
    5c6e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    5c72:	f01c be03 	b.w	2287c <log_output_flush>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    5c76:	4630      	mov	r0, r6
    5c78:	f01c fc31 	bl	224de <log_msg_str_get>
    5c7c:	490e      	ldr	r1, [pc, #56]	; (5cb8 <log_output_msg_process+0xf4>)
    5c7e:	4602      	mov	r2, r0
    5c80:	4628      	mov	r0, r5
    5c82:	f7ff fe73 	bl	596c <print_formatted>
		length = sizeof(buf);
    5c86:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5c8a:	aa05      	add	r2, sp, #20
    5c8c:	4623      	mov	r3, r4
    5c8e:	a906      	add	r1, sp, #24
    5c90:	4630      	mov	r0, r6
		length = sizeof(buf);
    5c92:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5c96:	f01c fc80 	bl	2259a <log_msg_hexdump_data_get>
		if (length) {
    5c9a:	9a05      	ldr	r2, [sp, #20]
    5c9c:	2a00      	cmp	r2, #0
    5c9e:	d0b8      	beq.n	5c12 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    5ca0:	464b      	mov	r3, r9
    5ca2:	9700      	str	r7, [sp, #0]
    5ca4:	a906      	add	r1, sp, #24
    5ca6:	4628      	mov	r0, r5
    5ca8:	f7ff fe72 	bl	5990 <hexdump_line_print>
			offset += length;
    5cac:	9b05      	ldr	r3, [sp, #20]
    5cae:	441c      	add	r4, r3
		length = sizeof(buf);
    5cb0:	e7eb      	b.n	5c8a <log_output_msg_process+0xc6>
    5cb2:	bf00      	nop
    5cb4:	0002b489 	.word	0x0002b489
    5cb8:	0002c4aa 	.word	0x0002c4aa

00005cbc <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    5cbc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5cbe:	f242 730f 	movw	r3, #9999	; 0x270f
    5cc2:	428b      	cmp	r3, r1
    5cc4:	bf28      	it	cs
    5cc6:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    5cc8:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5cca:	4a0f      	ldr	r2, [pc, #60]	; (5d08 <log_output_dropped_process+0x4c>)
{
    5ccc:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5cce:	2105      	movs	r1, #5
    5cd0:	4668      	mov	r0, sp
    5cd2:	f01b fe82 	bl	219da <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5cd6:	6863      	ldr	r3, [r4, #4]
    5cd8:	490c      	ldr	r1, [pc, #48]	; (5d0c <log_output_dropped_process+0x50>)
    5cda:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5cdc:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5cde:	220b      	movs	r2, #11
    5ce0:	4628      	mov	r0, r5
    5ce2:	f01c fc61 	bl	225a8 <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    5ce6:	6863      	ldr	r3, [r4, #4]
    5ce8:	4632      	mov	r2, r6
    5cea:	4669      	mov	r1, sp
    5cec:	4628      	mov	r0, r5
    5cee:	685b      	ldr	r3, [r3, #4]
    5cf0:	f01c fc5a 	bl	225a8 <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5cf4:	6863      	ldr	r3, [r4, #4]
    5cf6:	4906      	ldr	r1, [pc, #24]	; (5d10 <log_output_dropped_process+0x54>)
    5cf8:	685b      	ldr	r3, [r3, #4]
    5cfa:	221b      	movs	r2, #27
    5cfc:	4628      	mov	r0, r5
    5cfe:	f01c fc53 	bl	225a8 <buffer_write>
		     log_output->control_block->ctx);
}
    5d02:	b002      	add	sp, #8
    5d04:	bd70      	pop	{r4, r5, r6, pc}
    5d06:	bf00      	nop
    5d08:	0002bf9d 	.word	0x0002bf9d
    5d0c:	0002b4c7 	.word	0x0002b4c7
    5d10:	0002b4ab 	.word	0x0002b4ab

00005d14 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5d14:	4a08      	ldr	r2, [pc, #32]	; (5d38 <log_output_timestamp_freq_set+0x24>)
{
    5d16:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5d18:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5d1a:	4c08      	ldr	r4, [pc, #32]	; (5d3c <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5d1c:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5d1e:	2100      	movs	r1, #0
    5d20:	42a0      	cmp	r0, r4
    5d22:	d804      	bhi.n	5d2e <log_output_timestamp_freq_set+0x1a>
    5d24:	b101      	cbz	r1, 5d28 <log_output_timestamp_freq_set+0x14>
    5d26:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5d28:	4b05      	ldr	r3, [pc, #20]	; (5d40 <log_output_timestamp_freq_set+0x2c>)
    5d2a:	6018      	str	r0, [r3, #0]
}
    5d2c:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5d2e:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5d30:	005b      	lsls	r3, r3, #1
    5d32:	2101      	movs	r1, #1
    5d34:	e7f4      	b.n	5d20 <log_output_timestamp_freq_set+0xc>
    5d36:	bf00      	nop
    5d38:	2000d550 	.word	0x2000d550
    5d3c:	000f4240 	.word	0x000f4240
    5d40:	2000d54c 	.word	0x2000d54c

00005d44 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    5d46:	4f07      	ldr	r7, [pc, #28]	; (5d64 <char_out+0x20>)
{
    5d48:	460d      	mov	r5, r1
    5d4a:	4604      	mov	r4, r0
    5d4c:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5d4e:	42b4      	cmp	r4, r6
    5d50:	d101      	bne.n	5d56 <char_out+0x12>
	}

	return length;
}
    5d52:	4628      	mov	r0, r5
    5d54:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    5d56:	6838      	ldr	r0, [r7, #0]
    5d58:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5d5c:	6883      	ldr	r3, [r0, #8]
    5d5e:	685b      	ldr	r3, [r3, #4]
    5d60:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5d62:	e7f4      	b.n	5d4e <char_out+0xa>
    5d64:	2000d568 	.word	0x2000d568

00005d68 <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    5d68:	4801      	ldr	r0, [pc, #4]	; (5d70 <panic+0x8>)
    5d6a:	f01c bd87 	b.w	2287c <log_output_flush>
    5d6e:	bf00      	nop
    5d70:	00027ba0 	.word	0x00027ba0

00005d74 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    5d74:	4801      	ldr	r0, [pc, #4]	; (5d7c <dropped+0x8>)
    5d76:	f7ff bfa1 	b.w	5cbc <log_output_dropped_process>
    5d7a:	bf00      	nop
    5d7c:	00027ba0 	.word	0x00027ba0

00005d80 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    5d80:	b508      	push	{r3, lr}
    5d82:	4803      	ldr	r0, [pc, #12]	; (5d90 <log_backend_uart_init+0x10>)
    5d84:	f019 fc26 	bl	1f5d4 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5d88:	4b02      	ldr	r3, [pc, #8]	; (5d94 <log_backend_uart_init+0x14>)
    5d8a:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    5d8c:	bd08      	pop	{r3, pc}
    5d8e:	bf00      	nop
    5d90:	0002b4d3 	.word	0x0002b4d3
    5d94:	2000d568 	.word	0x2000d568

00005d98 <put>:
{
    5d98:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5d9a:	4608      	mov	r0, r1
    5d9c:	460c      	mov	r4, r1
    5d9e:	f01c fb5c 	bl	2245a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5da2:	4805      	ldr	r0, [pc, #20]	; (5db8 <put+0x20>)
    5da4:	4621      	mov	r1, r4
    5da6:	220f      	movs	r2, #15
    5da8:	f7ff ff0c 	bl	5bc4 <log_output_msg_process>
	log_msg_put(msg);
    5dac:	4620      	mov	r0, r4
}
    5dae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5db2:	f01c bb81 	b.w	224b8 <log_msg_put>
    5db6:	bf00      	nop
    5db8:	00027ba0 	.word	0x00027ba0

00005dbc <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5dbc:	4b01      	ldr	r3, [pc, #4]	; (5dc4 <log_backend_rtt_init+0x8>)
    5dbe:	2201      	movs	r2, #1
    5dc0:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5dc2:	4770      	bx	lr
    5dc4:	2000ed94 	.word	0x2000ed94

00005dc8 <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    5dc8:	4b02      	ldr	r3, [pc, #8]	; (5dd4 <panic+0xc>)
	log_output_flush(log_output);
    5dca:	4803      	ldr	r0, [pc, #12]	; (5dd8 <panic+0x10>)
    5dcc:	2201      	movs	r2, #1
    5dce:	701a      	strb	r2, [r3, #0]
    5dd0:	f01c bd54 	b.w	2287c <log_output_flush>
    5dd4:	2000ed95 	.word	0x2000ed95
    5dd8:	00027bc8 	.word	0x00027bc8

00005ddc <dropped>:
	log_output_dropped_process(log_output, cnt);
    5ddc:	4801      	ldr	r0, [pc, #4]	; (5de4 <dropped+0x8>)
    5dde:	f7ff bf6d 	b.w	5cbc <log_output_dropped_process>
    5de2:	bf00      	nop
    5de4:	00027bc8 	.word	0x00027bc8

00005de8 <put>:
{
    5de8:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5dea:	4608      	mov	r0, r1
    5dec:	460c      	mov	r4, r1
    5dee:	f01c fb34 	bl	2245a <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5df2:	4805      	ldr	r0, [pc, #20]	; (5e08 <put+0x20>)
    5df4:	4621      	mov	r1, r4
    5df6:	220f      	movs	r2, #15
    5df8:	f7ff fee4 	bl	5bc4 <log_output_msg_process>
	log_msg_put(msg);
    5dfc:	4620      	mov	r0, r4
}
    5dfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5e02:	f01c bb59 	b.w	224b8 <log_msg_put>
    5e06:	bf00      	nop
    5e08:	00027bc8 	.word	0x00027bc8

00005e0c <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5e0c:	4b05      	ldr	r3, [pc, #20]	; (5e24 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    5e0e:	781b      	ldrb	r3, [r3, #0]
    5e10:	b11b      	cbz	r3, 5e1a <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    5e12:	f241 3088 	movw	r0, #5000	; 0x1388
    5e16:	f021 b8b8 	b.w	26f8a <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5e1a:	20a4      	movs	r0, #164	; 0xa4
    5e1c:	2100      	movs	r1, #0
    5e1e:	f01a ba4f 	b.w	202c0 <z_impl_k_sleep>
    5e22:	bf00      	nop
    5e24:	2000ed95 	.word	0x2000ed95

00005e28 <data_out_block_mode>:
{
    5e28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5e2c:	f8df 8088 	ldr.w	r8, [pc, #136]	; 5eb8 <data_out_block_mode+0x90>
	return z_impl_k_mutex_lock(mutex, timeout);
    5e30:	f8df a088 	ldr.w	sl, [pc, #136]	; 5ebc <data_out_block_mode+0x94>
{
    5e34:	4607      	mov	r7, r0
    5e36:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5e38:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    5e3a:	f898 3000 	ldrb.w	r3, [r8]
    5e3e:	b933      	cbnz	r3, 5e4e <data_out_block_mode+0x26>
    5e40:	f04f 32ff 	mov.w	r2, #4294967295
    5e44:	f04f 33ff 	mov.w	r3, #4294967295
    5e48:	4650      	mov	r0, sl
    5e4a:	f019 fde7 	bl	1fa1c <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5e4e:	4632      	mov	r2, r6
    5e50:	4639      	mov	r1, r7
    5e52:	2000      	movs	r0, #0
    5e54:	f001 f9f4 	bl	7240 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    5e58:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5e5c:	4681      	mov	r9, r0
		if (!is_sync_mode()) {
    5e5e:	b913      	cbnz	r3, 5e66 <data_out_block_mode+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    5e60:	4650      	mov	r0, sl
    5e62:	f019 fe4d 	bl	1fb00 <z_impl_k_mutex_unlock>
		if (ret) {
    5e66:	4d16      	ldr	r5, [pc, #88]	; (5ec0 <data_out_block_mode+0x98>)
    5e68:	f1b9 0f00 	cmp.w	r9, #0
    5e6c:	d018      	beq.n	5ea0 <data_out_block_mode+0x78>
	host_present = true;
    5e6e:	2301      	movs	r3, #1
    5e70:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5e72:	f898 3000 	ldrb.w	r3, [r8]
    5e76:	b933      	cbnz	r3, 5e86 <data_out_block_mode+0x5e>
}
    5e78:	4630      	mov	r0, r6
    5e7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (retry_cnt == 0) {
    5e7e:	b95c      	cbnz	r4, 5e98 <data_out_block_mode+0x70>
		host_present = false;
    5e80:	702c      	strb	r4, [r5, #0]
    5e82:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5e86:	2000      	movs	r0, #0
    5e88:	f001 fa26 	bl	72d8 <SEGGER_RTT_HasDataUp>
    5e8c:	2800      	cmp	r0, #0
    5e8e:	d0f3      	beq.n	5e78 <data_out_block_mode+0x50>
    5e90:	782b      	ldrb	r3, [r5, #0]
    5e92:	2b00      	cmp	r3, #0
    5e94:	d1f3      	bne.n	5e7e <data_out_block_mode+0x56>
    5e96:	e7ef      	b.n	5e78 <data_out_block_mode+0x50>
			on_failed_write(retry_cnt--);
    5e98:	3c01      	subs	r4, #1
    5e9a:	f7ff ffb7 	bl	5e0c <on_failed_write.part.0>
    5e9e:	e7f2      	b.n	5e86 <data_out_block_mode+0x5e>
		} else if (host_present) {
    5ea0:	782b      	ldrb	r3, [r5, #0]
    5ea2:	b113      	cbz	r3, 5eaa <data_out_block_mode+0x82>
	if (retry_cnt == 0) {
    5ea4:	3c01      	subs	r4, #1
    5ea6:	d104      	bne.n	5eb2 <data_out_block_mode+0x8a>
		host_present = false;
    5ea8:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    5eaa:	782b      	ldrb	r3, [r5, #0]
    5eac:	2b00      	cmp	r3, #0
    5eae:	d1c4      	bne.n	5e3a <data_out_block_mode+0x12>
    5eb0:	e7e2      	b.n	5e78 <data_out_block_mode+0x50>
    5eb2:	f7ff ffab 	bl	5e0c <on_failed_write.part.0>
    5eb6:	e7f8      	b.n	5eaa <data_out_block_mode+0x82>
    5eb8:	2000ed95 	.word	0x2000ed95
    5ebc:	20009f98 	.word	0x20009f98
    5ec0:	2000ed94 	.word	0x2000ed94

00005ec4 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    5ec4:	4b02      	ldr	r3, [pc, #8]	; (5ed0 <hrs_init+0xc>)
    5ec6:	2201      	movs	r2, #1
    5ec8:	701a      	strb	r2, [r3, #0]

	return 0;
}
    5eca:	2000      	movs	r0, #0
    5ecc:	4770      	bx	lr
    5ece:	bf00      	nop
    5ed0:	2000ed98 	.word	0x2000ed98

00005ed4 <read_blsc>:
{
    5ed4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    5ed6:	2401      	movs	r4, #1
    5ed8:	9402      	str	r4, [sp, #8]
    5eda:	4c04      	ldr	r4, [pc, #16]	; (5eec <read_blsc+0x18>)
    5edc:	9401      	str	r4, [sp, #4]
    5ede:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    5ee2:	9400      	str	r4, [sp, #0]
    5ee4:	f01f fd5c 	bl	259a0 <bt_gatt_attr_read>
}
    5ee8:	b004      	add	sp, #16
    5eea:	bd10      	pop	{r4, pc}
    5eec:	2000ed98 	.word	0x2000ed98

00005ef0 <hrmc_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    5ef0:	4b07      	ldr	r3, [pc, #28]	; (5f10 <hrmc_ccc_cfg_changed+0x20>)
    5ef2:	4a08      	ldr	r2, [pc, #32]	; (5f14 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    5ef4:	4808      	ldr	r0, [pc, #32]	; (5f18 <hrmc_ccc_cfg_changed+0x28>)
    5ef6:	1ad2      	subs	r2, r2, r3
    5ef8:	08d2      	lsrs	r2, r2, #3
    5efa:	4b08      	ldr	r3, [pc, #32]	; (5f1c <hrmc_ccc_cfg_changed+0x2c>)
    5efc:	0192      	lsls	r2, r2, #6
    5efe:	2901      	cmp	r1, #1
    5f00:	bf14      	ite	ne
    5f02:	4601      	movne	r1, r0
    5f04:	4619      	moveq	r1, r3
    5f06:	f042 0203 	orr.w	r2, r2, #3
    5f0a:	4805      	ldr	r0, [pc, #20]	; (5f20 <hrmc_ccc_cfg_changed+0x30>)
    5f0c:	f01c b9fb 	b.w	22306 <log_1>
    5f10:	0002775c 	.word	0x0002775c
    5f14:	00027864 	.word	0x00027864
    5f18:	000291ca 	.word	0x000291ca
    5f1c:	000291c2 	.word	0x000291c2
    5f20:	0002b4fb 	.word	0x0002b4fb

00005f24 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
    5f24:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    5f26:	4c0d      	ldr	r4, [pc, #52]	; (5f5c <bt_hrs_notify+0x38>)
{
    5f28:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    5f2a:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    5f2c:	7060      	strb	r0, [r4, #1]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    5f2e:	2218      	movs	r2, #24
    5f30:	2100      	movs	r1, #0
    5f32:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    5f34:	7023      	strb	r3, [r4, #0]
    5f36:	f01e fa10 	bl	2435a <memset>

	params.attr = attr;
    5f3a:	4b09      	ldr	r3, [pc, #36]	; (5f60 <bt_hrs_notify+0x3c>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    5f3c:	4669      	mov	r1, sp
	params.data = data;
    5f3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    5f42:	2000      	movs	r0, #0
	params.len = len;
    5f44:	2302      	movs	r3, #2
    5f46:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    5f4a:	f007 ff9b 	bl	de84 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    5f4e:	f110 0f39 	cmn.w	r0, #57	; 0x39
}
    5f52:	bf08      	it	eq
    5f54:	2000      	moveq	r0, #0
    5f56:	b006      	add	sp, #24
    5f58:	bd10      	pop	{r4, pc}
    5f5a:	bf00      	nop
    5f5c:	2000ed96 	.word	0x2000ed96
    5f60:	00027bec 	.word	0x00027bec

00005f64 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    5f64:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    5f68:	460e      	mov	r6, r1
    5f6a:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5f6c:	2108      	movs	r1, #8
    5f6e:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    5f70:	f8df 904c 	ldr.w	r9, [pc, #76]	; 5fc0 <nvs_recover_last_ate+0x5c>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5f74:	f01c fd51 	bl	22a1a <nvs_al_size.isra.0>
	*addr -= ate_size;
    5f78:	6834      	ldr	r4, [r6, #0]
    5f7a:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5f7c:	4607      	mov	r7, r0
	*addr -= ate_size;
    5f7e:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    5f80:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    5f84:	42ac      	cmp	r4, r5
    5f86:	d803      	bhi.n	5f90 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    5f88:	2000      	movs	r0, #0
}
    5f8a:	b003      	add	sp, #12
    5f8c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5f90:	2308      	movs	r3, #8
    5f92:	466a      	mov	r2, sp
    5f94:	4621      	mov	r1, r4
    5f96:	4640      	mov	r0, r8
    5f98:	f01c fc9b 	bl	228d2 <nvs_flash_rd>
		if (rc) {
    5f9c:	2800      	cmp	r0, #0
    5f9e:	d1f4      	bne.n	5f8a <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    5fa0:	4668      	mov	r0, sp
    5fa2:	f01c fd1a 	bl	229da <nvs_ate_crc8_check>
    5fa6:	b940      	cbnz	r0, 5fba <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    5fa8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    5fac:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    5fb0:	6034      	str	r4, [r6, #0]
			data_end_addr &= ADDR_SECT_MASK;
    5fb2:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    5fb6:	4413      	add	r3, r2
    5fb8:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    5fba:	1be4      	subs	r4, r4, r7
    5fbc:	e7e2      	b.n	5f84 <nvs_recover_last_ate+0x20>
    5fbe:	bf00      	nop
    5fc0:	ffff0000 	.word	0xffff0000

00005fc4 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    5fc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5fc8:	4604      	mov	r4, r0
    5fca:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5fcc:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    5fce:	2108      	movs	r1, #8
    5fd0:	f01c fd23 	bl	22a1a <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    5fd4:	6863      	ldr	r3, [r4, #4]
    5fd6:	0c1b      	lsrs	r3, r3, #16
    5fd8:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    5fda:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
    5fdc:	a901      	add	r1, sp, #4
    5fde:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    5fe0:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    5fe2:	f01c fd0f 	bl	22a04 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    5fe6:	9b01      	ldr	r3, [sp, #4]
    5fe8:	89a1      	ldrh	r1, [r4, #12]
    5fea:	4419      	add	r1, r3
    5fec:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5ff0:	2308      	movs	r3, #8
    5ff2:	aa04      	add	r2, sp, #16
    5ff4:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    5ff6:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    5ff8:	f01c fc6b 	bl	228d2 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    5ffc:	2800      	cmp	r0, #0
    5ffe:	f2c0 8083 	blt.w	6108 <nvs_gc+0x144>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    6002:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6004:	aa04      	add	r2, sp, #16
    6006:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    6008:	2300      	movs	r3, #0
		if (data8[i] != value) {
    600a:	f812 0b01 	ldrb.w	r0, [r2], #1
    600e:	4281      	cmp	r1, r0
    6010:	d16c      	bne.n	60ec <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    6012:	3301      	adds	r3, #1
    6014:	2b08      	cmp	r3, #8
    6016:	d1f8      	bne.n	600a <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    6018:	9901      	ldr	r1, [sp, #4]
    601a:	4620      	mov	r0, r4
    601c:	f01c fcb6 	bl	2298c <nvs_flash_erase_sector>
		if (rc) {
    6020:	e072      	b.n	6108 <nvs_gc+0x144>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    6022:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    6024:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    6028:	0c1b      	lsrs	r3, r3, #16
    602a:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    602c:	4413      	add	r3, r2
    602e:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    6030:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 6110 <nvs_gc+0x14c>
		gc_prev_addr = gc_addr;
    6034:	f8dd 9008 	ldr.w	r9, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    6038:	aa06      	add	r2, sp, #24
    603a:	a902      	add	r1, sp, #8
    603c:	4620      	mov	r0, r4
    603e:	f01c fcf6 	bl	22a2e <nvs_prev_ate>
		if (rc) {
    6042:	2800      	cmp	r0, #0
    6044:	d160      	bne.n	6108 <nvs_gc+0x144>
		if (nvs_ate_crc8_check(&gc_ate)) {
    6046:	a806      	add	r0, sp, #24
    6048:	f01c fcc7 	bl	229da <nvs_ate_crc8_check>
    604c:	bb80      	cbnz	r0, 60b0 <nvs_gc+0xec>
		wlk_addr = fs->ate_wra;
    604e:	6863      	ldr	r3, [r4, #4]
    6050:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    6052:	aa08      	add	r2, sp, #32
    6054:	a903      	add	r1, sp, #12
    6056:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    6058:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    605a:	f01c fce8 	bl	22a2e <nvs_prev_ate>
			if (rc) {
    605e:	2800      	cmp	r0, #0
    6060:	d152      	bne.n	6108 <nvs_gc+0x144>
			if ((wlk_ate.id == gc_ate.id) &&
    6062:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    6066:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    606a:	429a      	cmp	r2, r3
    606c:	d023      	beq.n	60b6 <nvs_gc+0xf2>
		} while (wlk_addr != fs->ate_wra);
    606e:	6862      	ldr	r2, [r4, #4]
    6070:	9b03      	ldr	r3, [sp, #12]
    6072:	429a      	cmp	r2, r3
    6074:	d1ed      	bne.n	6052 <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    6076:	454d      	cmp	r5, r9
    6078:	d11a      	bne.n	60b0 <nvs_gc+0xec>
    607a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    607e:	b1bb      	cbz	r3, 60b0 <nvs_gc+0xec>
			data_addr += gc_ate.offset;
    6080:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    6084:	ea09 060a 	and.w	r6, r9, sl
			data_addr += gc_ate.offset;
    6088:	441e      	add	r6, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    608a:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    608c:	68a3      	ldr	r3, [r4, #8]
    608e:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    6092:	f01c fcae 	bl	229f2 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    6096:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    6098:	f8bd 701c 	ldrh.w	r7, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    609c:	681d      	ldr	r5, [r3, #0]
    609e:	426d      	negs	r5, r5
	block_size =
    60a0:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    60a4:	b96f      	cbnz	r7, 60c2 <nvs_gc+0xfe>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    60a6:	a906      	add	r1, sp, #24
    60a8:	4620      	mov	r0, r4
    60aa:	f01c fd6e 	bl	22b8a <nvs_flash_ate_wrt>
			if (rc) {
    60ae:	bb58      	cbnz	r0, 6108 <nvs_gc+0x144>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    60b0:	45c1      	cmp	r9, r8
    60b2:	d1bf      	bne.n	6034 <nvs_gc+0x70>
    60b4:	e7b0      	b.n	6018 <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    60b6:	a808      	add	r0, sp, #32
    60b8:	f01c fc8f 	bl	229da <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    60bc:	2800      	cmp	r0, #0
    60be:	d1d6      	bne.n	606e <nvs_gc+0xaa>
    60c0:	e7d9      	b.n	6076 <nvs_gc+0xb2>
		bytes_to_copy = MIN(block_size, len);
    60c2:	42bd      	cmp	r5, r7
    60c4:	46ab      	mov	fp, r5
    60c6:	bf28      	it	cs
    60c8:	46bb      	movcs	fp, r7
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    60ca:	465b      	mov	r3, fp
    60cc:	aa0a      	add	r2, sp, #40	; 0x28
    60ce:	4631      	mov	r1, r6
    60d0:	4620      	mov	r0, r4
    60d2:	f01c fbfe 	bl	228d2 <nvs_flash_rd>
		if (rc) {
    60d6:	b9b8      	cbnz	r0, 6108 <nvs_gc+0x144>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    60d8:	465a      	mov	r2, fp
    60da:	a90a      	add	r1, sp, #40	; 0x28
    60dc:	4620      	mov	r0, r4
    60de:	f01c fd41 	bl	22b64 <nvs_flash_data_wrt>
		if (rc) {
    60e2:	b988      	cbnz	r0, 6108 <nvs_gc+0x144>
		len -= bytes_to_copy;
    60e4:	eba7 070b 	sub.w	r7, r7, fp
		addr += bytes_to_copy;
    60e8:	445e      	add	r6, fp
    60ea:	e7db      	b.n	60a4 <nvs_gc+0xe0>
	stop_addr = gc_addr - ate_size;
    60ec:	9802      	ldr	r0, [sp, #8]
    60ee:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    60f2:	a804      	add	r0, sp, #16
    60f4:	f01c fc71 	bl	229da <nvs_ate_crc8_check>
    60f8:	2800      	cmp	r0, #0
    60fa:	d092      	beq.n	6022 <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    60fc:	a902      	add	r1, sp, #8
    60fe:	4620      	mov	r0, r4
    6100:	f7ff ff30 	bl	5f64 <nvs_recover_last_ate>
		if (rc) {
    6104:	2800      	cmp	r0, #0
    6106:	d093      	beq.n	6030 <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    6108:	b013      	add	sp, #76	; 0x4c
    610a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    610e:	bf00      	nop
    6110:	ffff0000 	.word	0xffff0000

00006114 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    6114:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    6118:	4604      	mov	r4, r0
    611a:	b086      	sub	sp, #24
    611c:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    611e:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    6122:	4630      	mov	r0, r6
    6124:	f020 fd59 	bl	26bda <z_impl_k_mutex_init>
    6128:	4628      	mov	r0, r5
    612a:	f019 fa53 	bl	1f5d4 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    612e:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    6130:	b978      	cbnz	r0, 6152 <nvs_init+0x3e>
    6132:	4ba2      	ldr	r3, [pc, #648]	; (63bc <nvs_init+0x2a8>)
    6134:	49a2      	ldr	r1, [pc, #648]	; (63c0 <nvs_init+0x2ac>)
		LOG_ERR("No valid flash device found");
    6136:	48a3      	ldr	r0, [pc, #652]	; (63c4 <nvs_init+0x2b0>)
    6138:	1ac9      	subs	r1, r1, r3
    613a:	08c9      	lsrs	r1, r1, #3
    613c:	0189      	lsls	r1, r1, #6
    613e:	f041 0101 	orr.w	r1, r1, #1
    6142:	f01c f8d3 	bl	222ec <log_0>
		return -ENXIO;
    6146:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    614a:	4628      	mov	r0, r5
    614c:	b006      	add	sp, #24
    614e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    6152:	6883      	ldr	r3, [r0, #8]
    6154:	691b      	ldr	r3, [r3, #16]
    6156:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    6158:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    615a:	b960      	cbnz	r0, 6176 <nvs_init+0x62>
    615c:	4998      	ldr	r1, [pc, #608]	; (63c0 <nvs_init+0x2ac>)
    615e:	4b97      	ldr	r3, [pc, #604]	; (63bc <nvs_init+0x2a8>)
		LOG_ERR("Could not obtain flash parameters");
    6160:	4899      	ldr	r0, [pc, #612]	; (63c8 <nvs_init+0x2b4>)
    6162:	1ac9      	subs	r1, r1, r3
    6164:	08c9      	lsrs	r1, r1, #3
    6166:	0189      	lsls	r1, r1, #6
    6168:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    616c:	f01c f8be 	bl	222ec <log_0>
		return -EINVAL;
    6170:	f06f 0515 	mvn.w	r5, #21
    6174:	e7e9      	b.n	614a <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    6176:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    6178:	6883      	ldr	r3, [r0, #8]
    617a:	691b      	ldr	r3, [r3, #16]
    617c:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    617e:	6803      	ldr	r3, [r0, #0]
    6180:	3b01      	subs	r3, #1
    6182:	2b1f      	cmp	r3, #31
    6184:	d908      	bls.n	6198 <nvs_init+0x84>
    6186:	498e      	ldr	r1, [pc, #568]	; (63c0 <nvs_init+0x2ac>)
    6188:	4b8c      	ldr	r3, [pc, #560]	; (63bc <nvs_init+0x2a8>)
		LOG_ERR("Unsupported write block size");
    618a:	4890      	ldr	r0, [pc, #576]	; (63cc <nvs_init+0x2b8>)
    618c:	1ac9      	subs	r1, r1, r3
    618e:	08c9      	lsrs	r1, r1, #3
    6190:	0189      	lsls	r1, r1, #6
    6192:	f041 0101 	orr.w	r1, r1, #1
    6196:	e7e9      	b.n	616c <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    6198:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    619a:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    619c:	aa03      	add	r2, sp, #12
    619e:	f020 facc 	bl	2673a <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    61a2:	b140      	cbz	r0, 61b6 <nvs_init+0xa2>
    61a4:	4986      	ldr	r1, [pc, #536]	; (63c0 <nvs_init+0x2ac>)
    61a6:	4b85      	ldr	r3, [pc, #532]	; (63bc <nvs_init+0x2a8>)
		LOG_ERR("Unable to get page info");
    61a8:	4889      	ldr	r0, [pc, #548]	; (63d0 <nvs_init+0x2bc>)
    61aa:	1ac9      	subs	r1, r1, r3
    61ac:	08c9      	lsrs	r1, r1, #3
    61ae:	0189      	lsls	r1, r1, #6
    61b0:	f041 0101 	orr.w	r1, r1, #1
    61b4:	e7da      	b.n	616c <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    61b6:	89a5      	ldrh	r5, [r4, #12]
    61b8:	b12d      	cbz	r5, 61c6 <nvs_init+0xb2>
    61ba:	9b04      	ldr	r3, [sp, #16]
    61bc:	fbb5 f2f3 	udiv	r2, r5, r3
    61c0:	fb03 5512 	mls	r5, r3, r2, r5
    61c4:	b145      	cbz	r5, 61d8 <nvs_init+0xc4>
    61c6:	497e      	ldr	r1, [pc, #504]	; (63c0 <nvs_init+0x2ac>)
    61c8:	4b7c      	ldr	r3, [pc, #496]	; (63bc <nvs_init+0x2a8>)
		LOG_ERR("Invalid sector size");
    61ca:	4882      	ldr	r0, [pc, #520]	; (63d4 <nvs_init+0x2c0>)
    61cc:	1ac9      	subs	r1, r1, r3
    61ce:	08c9      	lsrs	r1, r1, #3
    61d0:	0189      	lsls	r1, r1, #6
    61d2:	f041 0101 	orr.w	r1, r1, #1
    61d6:	e7c9      	b.n	616c <nvs_init+0x58>
	if (fs->sector_count < 2) {
    61d8:	89e3      	ldrh	r3, [r4, #14]
    61da:	2b01      	cmp	r3, #1
    61dc:	d808      	bhi.n	61f0 <nvs_init+0xdc>
    61de:	4978      	ldr	r1, [pc, #480]	; (63c0 <nvs_init+0x2ac>)
    61e0:	4b76      	ldr	r3, [pc, #472]	; (63bc <nvs_init+0x2a8>)
		LOG_ERR("Configuration error - sector count");
    61e2:	487d      	ldr	r0, [pc, #500]	; (63d8 <nvs_init+0x2c4>)
    61e4:	1ac9      	subs	r1, r1, r3
    61e6:	08c9      	lsrs	r1, r1, #3
    61e8:	0189      	lsls	r1, r1, #6
    61ea:	f041 0101 	orr.w	r1, r1, #1
    61ee:	e7bd      	b.n	616c <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    61f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    61f2:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    61f4:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    61f8:	f04f 33ff 	mov.w	r3, #4294967295
    61fc:	f04f 32ff 	mov.w	r2, #4294967295
    6200:	4630      	mov	r0, r6
    6202:	f019 fc0b 	bl	1fa1c <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6206:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6208:	2108      	movs	r1, #8
    620a:	f01c fc06 	bl	22a1a <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    620e:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6210:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    6212:	89e3      	ldrh	r3, [r4, #14]
    6214:	fa1f fa85 	uxth.w	sl, r5
    6218:	4553      	cmp	r3, sl
    621a:	d86f      	bhi.n	62fc <nvs_init+0x1e8>
	if (closed_sectors == fs->sector_count) {
    621c:	89e3      	ldrh	r3, [r4, #14]
    621e:	4543      	cmp	r3, r8
    6220:	f000 80af 	beq.w	6382 <nvs_init+0x26e>
	if (i == fs->sector_count) {
    6224:	4553      	cmp	r3, sl
    6226:	d10b      	bne.n	6240 <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    6228:	9900      	ldr	r1, [sp, #0]
    622a:	2308      	movs	r3, #8
    622c:	464a      	mov	r2, r9
    622e:	1bc9      	subs	r1, r1, r7
    6230:	4620      	mov	r0, r4
    6232:	f01c fb86 	bl	22942 <nvs_flash_cmp_const>
		if (!rc) {
    6236:	b918      	cbnz	r0, 6240 <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
    6238:	89e0      	ldrh	r0, [r4, #14]
    623a:	4669      	mov	r1, sp
    623c:	f01c fbe2 	bl	22a04 <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    6240:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    6242:	f8df 8198 	ldr.w	r8, [pc, #408]	; 63dc <nvs_init+0x2c8>
	fs->ate_wra = addr - ate_size;
    6246:	1bda      	subs	r2, r3, r7
	fs->data_wra = addr & ADDR_SECT_MASK;
    6248:	ea03 0308 	and.w	r3, r3, r8
	fs->ate_wra = addr - ate_size;
    624c:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    624e:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    6250:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    6254:	4299      	cmp	r1, r3
    6256:	d30f      	bcc.n	6278 <nvs_init+0x164>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    6258:	2308      	movs	r3, #8
    625a:	aa01      	add	r2, sp, #4
    625c:	4620      	mov	r0, r4
    625e:	f01c fb38 	bl	228d2 <nvs_flash_rd>
		if (rc) {
    6262:	4605      	mov	r5, r0
    6264:	bb30      	cbnz	r0, 62b4 <nvs_init+0x1a0>
    6266:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    6268:	f813 2b01 	ldrb.w	r2, [r3], #1
    626c:	4591      	cmp	r9, r2
    626e:	f040 808b 	bne.w	6388 <nvs_init+0x274>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    6272:	3501      	adds	r5, #1
    6274:	2d08      	cmp	r5, #8
    6276:	d1f7      	bne.n	6268 <nvs_init+0x154>
	while (fs->ate_wra > fs->data_wra) {
    6278:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    627c:	428b      	cmp	r3, r1
    627e:	d907      	bls.n	6290 <nvs_init+0x17c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    6280:	1a5b      	subs	r3, r3, r1
    6282:	464a      	mov	r2, r9
    6284:	4620      	mov	r0, r4
    6286:	f01c fb5c 	bl	22942 <nvs_flash_cmp_const>
		if (rc < 0) {
    628a:	1e05      	subs	r5, r0, #0
    628c:	db12      	blt.n	62b4 <nvs_init+0x1a0>
		if (!rc) {
    628e:	d15a      	bne.n	6346 <nvs_init+0x232>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    6290:	6863      	ldr	r3, [r4, #4]
    6292:	f8df 8148 	ldr.w	r8, [pc, #328]	; 63dc <nvs_init+0x2c8>
	nvs_sector_advance(fs, &addr);
    6296:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    6298:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    629c:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    629e:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    62a0:	f01c fbb0 	bl	22a04 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    62a4:	89a3      	ldrh	r3, [r4, #12]
    62a6:	9900      	ldr	r1, [sp, #0]
    62a8:	464a      	mov	r2, r9
    62aa:	4620      	mov	r0, r4
    62ac:	f01c fb49 	bl	22942 <nvs_flash_cmp_const>
	if (rc < 0) {
    62b0:	1e05      	subs	r5, r0, #0
    62b2:	da4e      	bge.n	6352 <nvs_init+0x23e>
	return z_impl_k_mutex_unlock(mutex);
    62b4:	4630      	mov	r0, r6
    62b6:	f019 fc23 	bl	1fb00 <z_impl_k_mutex_unlock>
	if (rc) {
    62ba:	2d00      	cmp	r5, #0
    62bc:	f47f af45 	bne.w	614a <nvs_init+0x36>
	fs->ready = true;
    62c0:	2301      	movs	r3, #1
    62c2:	7423      	strb	r3, [r4, #16]
    62c4:	4e3e      	ldr	r6, [pc, #248]	; (63c0 <nvs_init+0x2ac>)
    62c6:	4b3d      	ldr	r3, [pc, #244]	; (63bc <nvs_init+0x2a8>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    62c8:	89a2      	ldrh	r2, [r4, #12]
    62ca:	89e1      	ldrh	r1, [r4, #14]
    62cc:	4844      	ldr	r0, [pc, #272]	; (63e0 <nvs_init+0x2cc>)
    62ce:	1af6      	subs	r6, r6, r3
    62d0:	08f6      	lsrs	r6, r6, #3
    62d2:	01b6      	lsls	r6, r6, #6
    62d4:	f046 0603 	orr.w	r6, r6, #3
    62d8:	4633      	mov	r3, r6
    62da:	f01c f828 	bl	2232e <log_2>
	LOG_INF("alloc wra: %d, %x",
    62de:	6861      	ldr	r1, [r4, #4]
    62e0:	4840      	ldr	r0, [pc, #256]	; (63e4 <nvs_init+0x2d0>)
    62e2:	4633      	mov	r3, r6
    62e4:	b28a      	uxth	r2, r1
    62e6:	0c09      	lsrs	r1, r1, #16
    62e8:	f01c f821 	bl	2232e <log_2>
	LOG_INF("data wra: %d, %x",
    62ec:	68a1      	ldr	r1, [r4, #8]
    62ee:	483e      	ldr	r0, [pc, #248]	; (63e8 <nvs_init+0x2d4>)
    62f0:	b28a      	uxth	r2, r1
    62f2:	4633      	mov	r3, r6
    62f4:	0c09      	lsrs	r1, r1, #16
    62f6:	f01c f81a 	bl	2232e <log_2>
	return 0;
    62fa:	e726      	b.n	614a <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
    62fc:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    62fe:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    6300:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    6302:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    6306:	464a      	mov	r2, r9
    6308:	2308      	movs	r3, #8
    630a:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    630c:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    630e:	f01c fb18 	bl	22942 <nvs_flash_cmp_const>
		if (rc) {
    6312:	b180      	cbz	r0, 6336 <nvs_init+0x222>
			nvs_sector_advance(fs, &addr);
    6314:	89e0      	ldrh	r0, [r4, #14]
    6316:	4669      	mov	r1, sp
    6318:	f01c fb74 	bl	22a04 <nvs_sector_advance.isra.0>
			closed_sectors++;
    631c:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    6320:	9900      	ldr	r1, [sp, #0]
    6322:	2308      	movs	r3, #8
    6324:	464a      	mov	r2, r9
    6326:	4620      	mov	r0, r4
			closed_sectors++;
    6328:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    632c:	f01c fb09 	bl	22942 <nvs_flash_cmp_const>
			if (!rc) {
    6330:	2800      	cmp	r0, #0
    6332:	f43f af73 	beq.w	621c <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    6336:	3501      	adds	r5, #1
    6338:	e76b      	b.n	6212 <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    633a:	f1ba 0f00 	cmp.w	sl, #0
    633e:	d039      	beq.n	63b4 <nvs_init+0x2a0>
				rc = -ESPIPE;
    6340:	f06f 051c 	mvn.w	r5, #28
    6344:	e7b6      	b.n	62b4 <nvs_init+0x1a0>
		fs->data_wra += fs->flash_parameters->write_block_size;
    6346:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    6348:	68a3      	ldr	r3, [r4, #8]
    634a:	6812      	ldr	r2, [r2, #0]
    634c:	4413      	add	r3, r2
    634e:	60a3      	str	r3, [r4, #8]
    6350:	e792      	b.n	6278 <nvs_init+0x164>
	if (rc) {
    6352:	d0af      	beq.n	62b4 <nvs_init+0x1a0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    6354:	6861      	ldr	r1, [r4, #4]
    6356:	4620      	mov	r0, r4
    6358:	f01c fb18 	bl	2298c <nvs_flash_erase_sector>
		if (rc) {
    635c:	4605      	mov	r5, r0
    635e:	2800      	cmp	r0, #0
    6360:	d1a8      	bne.n	62b4 <nvs_init+0x1a0>
		fs->ate_wra &= ADDR_SECT_MASK;
    6362:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    6364:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    6366:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    636a:	4403      	add	r3, r0
    636c:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    6370:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    6372:	ea00 0008 	and.w	r0, r0, r8
    6376:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    6378:	4620      	mov	r0, r4
    637a:	f7ff fe23 	bl	5fc4 <nvs_gc>
    637e:	4605      	mov	r5, r0
end:
    6380:	e798      	b.n	62b4 <nvs_init+0x1a0>
		rc = -EDEADLK;
    6382:	f06f 0520 	mvn.w	r5, #32
    6386:	e795      	b.n	62b4 <nvs_init+0x1a0>
		if (!nvs_ate_crc8_check(&last_ate)) {
    6388:	a801      	add	r0, sp, #4
    638a:	f01c fb26 	bl	229da <nvs_ate_crc8_check>
    638e:	6865      	ldr	r5, [r4, #4]
    6390:	b980      	cbnz	r0, 63b4 <nvs_init+0x2a0>
			fs->data_wra = addr & ADDR_SECT_MASK;
    6392:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    6394:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    6398:	f8bd a008 	ldrh.w	sl, [sp, #8]
    639c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    639e:	ea02 0208 	and.w	r2, r2, r8
			fs->data_wra += last_ate.offset;
    63a2:	441a      	add	r2, r3
    63a4:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    63a6:	4651      	mov	r1, sl
    63a8:	f01c fb37 	bl	22a1a <nvs_al_size.isra.0>
    63ac:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    63ae:	42aa      	cmp	r2, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    63b0:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    63b2:	d0c2      	beq.n	633a <nvs_init+0x226>
		fs->ate_wra -= ate_size;
    63b4:	1bed      	subs	r5, r5, r7
    63b6:	6065      	str	r5, [r4, #4]
    63b8:	e74a      	b.n	6250 <nvs_init+0x13c>
    63ba:	bf00      	nop
    63bc:	0002775c 	.word	0x0002775c
    63c0:	0002785c 	.word	0x0002785c
    63c4:	0002b528 	.word	0x0002b528
    63c8:	0002b544 	.word	0x0002b544
    63cc:	0002b566 	.word	0x0002b566
    63d0:	0002b583 	.word	0x0002b583
    63d4:	0002b59b 	.word	0x0002b59b
    63d8:	0002b5af 	.word	0x0002b5af
    63dc:	ffff0000 	.word	0xffff0000
    63e0:	0002b5d2 	.word	0x0002b5d2
    63e4:	0002b5e9 	.word	0x0002b5e9
    63e8:	0002b5fb 	.word	0x0002b5fb

000063ec <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    63ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    63f0:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    63f2:	7c03      	ldrb	r3, [r0, #16]
{
    63f4:	b089      	sub	sp, #36	; 0x24
    63f6:	4604      	mov	r4, r0
    63f8:	4689      	mov	r9, r1
    63fa:	4690      	mov	r8, r2
	if (!fs->ready) {
    63fc:	b97b      	cbnz	r3, 641e <nvs_write+0x32>
    63fe:	4b61      	ldr	r3, [pc, #388]	; (6584 <nvs_write+0x198>)
    6400:	4961      	ldr	r1, [pc, #388]	; (6588 <nvs_write+0x19c>)
		LOG_ERR("NVS not initialized");
    6402:	4862      	ldr	r0, [pc, #392]	; (658c <nvs_write+0x1a0>)
    6404:	1ac9      	subs	r1, r1, r3
    6406:	08c9      	lsrs	r1, r1, #3
    6408:	0189      	lsls	r1, r1, #6
    640a:	f041 0101 	orr.w	r1, r1, #1
    640e:	f01b ff6d 	bl	222ec <log_0>
		return -EACCES;
    6412:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    6416:	4628      	mov	r0, r5
    6418:	b009      	add	sp, #36	; 0x24
    641a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    641e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    6420:	2108      	movs	r1, #8
    6422:	4610      	mov	r0, r2
    6424:	f01c faf9 	bl	22a1a <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    6428:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    642a:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    642c:	4610      	mov	r0, r2
    642e:	f01c faf4 	bl	22a1a <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    6432:	89a3      	ldrh	r3, [r4, #12]
    6434:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    6438:	1a9b      	subs	r3, r3, r2
    643a:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    643c:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    643e:	f0c0 809d 	bcc.w	657c <nvs_write+0x190>
    6442:	b11e      	cbz	r6, 644c <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
    6444:	f1b8 0f00 	cmp.w	r8, #0
    6448:	f000 8098 	beq.w	657c <nvs_write+0x190>
	wlk_addr = fs->ate_wra;
    644c:	6863      	ldr	r3, [r4, #4]
    644e:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    6450:	aa04      	add	r2, sp, #16
    6452:	a903      	add	r1, sp, #12
    6454:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    6456:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    645a:	f01c fae8 	bl	22a2e <nvs_prev_ate>
		if (rc) {
    645e:	4605      	mov	r5, r0
    6460:	2800      	cmp	r0, #0
    6462:	d1d8      	bne.n	6416 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    6464:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    6468:	454b      	cmp	r3, r9
    646a:	d005      	beq.n	6478 <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
    646c:	6862      	ldr	r2, [r4, #4]
    646e:	9b03      	ldr	r3, [sp, #12]
    6470:	429a      	cmp	r2, r3
    6472:	d1ed      	bne.n	6450 <nvs_write+0x64>
		if (len == 0) {
    6474:	b9de      	cbnz	r6, 64ae <nvs_write+0xc2>
    6476:	e7ce      	b.n	6416 <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    6478:	a804      	add	r0, sp, #16
    647a:	f01c faae 	bl	229da <nvs_ate_crc8_check>
    647e:	2800      	cmp	r0, #0
    6480:	d1f4      	bne.n	646c <nvs_write+0x80>
			if (wlk_ate.len == 0U) {
    6482:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    6486:	b186      	cbz	r6, 64aa <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    6488:	42b3      	cmp	r3, r6
    648a:	d110      	bne.n	64ae <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    648c:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    6490:	ea4f 411b 	mov.w	r1, fp, lsr #16
    6494:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    6496:	4401      	add	r1, r0
    6498:	4633      	mov	r3, r6
    649a:	4642      	mov	r2, r8
    649c:	4620      	mov	r0, r4
    649e:	f01c fa26 	bl	228ee <nvs_flash_block_cmp>
			if (rc <= 0) {
    64a2:	2800      	cmp	r0, #0
    64a4:	dc03      	bgt.n	64ae <nvs_write+0xc2>
    64a6:	4605      	mov	r5, r0
    64a8:	e7b5      	b.n	6416 <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    64aa:	2b00      	cmp	r3, #0
    64ac:	d0b3      	beq.n	6416 <nvs_write+0x2a>
	if (data_size) {
    64ae:	bba7      	cbnz	r7, 651a <nvs_write+0x12e>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    64b0:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    64b4:	f04f 32ff 	mov.w	r2, #4294967295
    64b8:	f04f 33ff 	mov.w	r3, #4294967295
    64bc:	4650      	mov	r0, sl
    64be:	f019 faad 	bl	1fa1c <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    64c2:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 6590 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
    64c6:	89e3      	ldrh	r3, [r4, #14]
    64c8:	429d      	cmp	r5, r3
    64ca:	d054      	beq.n	6576 <nvs_write+0x18a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    64cc:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    64d0:	18f9      	adds	r1, r7, r3
    64d2:	428a      	cmp	r2, r1
    64d4:	d324      	bcc.n	6520 <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    64d6:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    64da:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    64dc:	23ff      	movs	r3, #255	; 0xff
    64de:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    64e2:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    64e6:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    64ea:	f01c fa82 	bl	229f2 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    64ee:	4632      	mov	r2, r6
    64f0:	4641      	mov	r1, r8
    64f2:	4620      	mov	r0, r4
    64f4:	f01c fb36 	bl	22b64 <nvs_flash_data_wrt>
	if (rc) {
    64f8:	4603      	mov	r3, r0
    64fa:	b938      	cbnz	r0, 650c <nvs_write+0x120>
	rc = nvs_flash_ate_wrt(fs, &entry);
    64fc:	a906      	add	r1, sp, #24
    64fe:	4620      	mov	r0, r4
    6500:	f01c fb43 	bl	22b8a <nvs_flash_ate_wrt>
	rc = len;
    6504:	2800      	cmp	r0, #0
    6506:	bf14      	ite	ne
    6508:	4603      	movne	r3, r0
    650a:	4633      	moveq	r3, r6
    650c:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    650e:	4650      	mov	r0, sl
    6510:	f019 faf6 	bl	1fb00 <z_impl_k_mutex_unlock>
	return rc;
    6514:	9b01      	ldr	r3, [sp, #4]
    6516:	461d      	mov	r5, r3
    6518:	e77d      	b.n	6416 <nvs_write+0x2a>
		required_space = data_size + ate_size;
    651a:	4457      	add	r7, sl
    651c:	b2bf      	uxth	r7, r7
    651e:	e7c7      	b.n	64b0 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6520:	2108      	movs	r1, #8
    6522:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6524:	f01c fa79 	bl	22a1a <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    6528:	f64f 73ff 	movw	r3, #65535	; 0xffff
    652c:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    6530:	2300      	movs	r3, #0
    6532:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    6536:	1813      	adds	r3, r2, r0
    6538:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    653c:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    653e:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    6542:	441a      	add	r2, r3
    6544:	1a12      	subs	r2, r2, r0
    6546:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    6548:	a806      	add	r0, sp, #24
    654a:	f01c fa52 	bl	229f2 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    654e:	a906      	add	r1, sp, #24
    6550:	4620      	mov	r0, r4
    6552:	f01c fb1a 	bl	22b8a <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    6556:	89e0      	ldrh	r0, [r4, #14]
    6558:	1d21      	adds	r1, r4, #4
    655a:	f01c fa53 	bl	22a04 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    655e:	6863      	ldr	r3, [r4, #4]
    6560:	ea03 030b 	and.w	r3, r3, fp
    6564:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    6566:	4620      	mov	r0, r4
    6568:	f7ff fd2c 	bl	5fc4 <nvs_gc>
		if (rc) {
    656c:	4603      	mov	r3, r0
    656e:	2800      	cmp	r0, #0
    6570:	d1cc      	bne.n	650c <nvs_write+0x120>
		gc_count++;
    6572:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    6574:	e7a7      	b.n	64c6 <nvs_write+0xda>
			rc = -ENOSPC;
    6576:	f06f 031b 	mvn.w	r3, #27
    657a:	e7c7      	b.n	650c <nvs_write+0x120>
		return -EINVAL;
    657c:	f06f 0515 	mvn.w	r5, #21
    6580:	e749      	b.n	6416 <nvs_write+0x2a>
    6582:	bf00      	nop
    6584:	0002775c 	.word	0x0002775c
    6588:	0002785c 	.word	0x0002785c
    658c:	0002b514 	.word	0x0002b514
    6590:	ffff0000 	.word	0xffff0000

00006594 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    6594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    6598:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    659a:	7c03      	ldrb	r3, [r0, #16]
{
    659c:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    65a0:	4604      	mov	r4, r0
    65a2:	460f      	mov	r7, r1
    65a4:	4690      	mov	r8, r2
	if (!fs->ready) {
    65a6:	b973      	cbnz	r3, 65c6 <nvs_read_hist+0x32>
    65a8:	4b2b      	ldr	r3, [pc, #172]	; (6658 <nvs_read_hist+0xc4>)
    65aa:	492c      	ldr	r1, [pc, #176]	; (665c <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    65ac:	482c      	ldr	r0, [pc, #176]	; (6660 <nvs_read_hist+0xcc>)
    65ae:	1ac9      	subs	r1, r1, r3
    65b0:	08c9      	lsrs	r1, r1, #3
    65b2:	0189      	lsls	r1, r1, #6
    65b4:	f041 0101 	orr.w	r1, r1, #1
    65b8:	f01b fe98 	bl	222ec <log_0>
		return -EACCES;
    65bc:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    65c0:	b004      	add	sp, #16
    65c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    65c6:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    65c8:	2108      	movs	r1, #8
    65ca:	f01c fa26 	bl	22a1a <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    65ce:	89a3      	ldrh	r3, [r4, #12]
    65d0:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    65d4:	42b3      	cmp	r3, r6
    65d6:	d33b      	bcc.n	6650 <nvs_read_hist+0xbc>
	wlk_addr = fs->ate_wra;
    65d8:	6863      	ldr	r3, [r4, #4]
    65da:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    65dc:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    65e0:	aa02      	add	r2, sp, #8
    65e2:	a901      	add	r1, sp, #4
    65e4:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    65e6:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    65e8:	f01c fa21 	bl	22a2e <nvs_prev_ate>
		if (rc) {
    65ec:	2800      	cmp	r0, #0
    65ee:	d1e7      	bne.n	65c0 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    65f0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    65f4:	42bb      	cmp	r3, r7
    65f6:	d107      	bne.n	6608 <nvs_read_hist+0x74>
    65f8:	a802      	add	r0, sp, #8
    65fa:	f01c f9ee 	bl	229da <nvs_ate_crc8_check>
    65fe:	b918      	cbnz	r0, 6608 <nvs_read_hist+0x74>
			cnt_his++;
    6600:	f10a 0a01 	add.w	sl, sl, #1
    6604:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    6608:	6862      	ldr	r2, [r4, #4]
    660a:	9b01      	ldr	r3, [sp, #4]
    660c:	429a      	cmp	r2, r3
    660e:	d018      	beq.n	6642 <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    6610:	45ca      	cmp	sl, r9
    6612:	d9e5      	bls.n	65e0 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    6614:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    6618:	b1bb      	cbz	r3, 664a <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    661a:	45ca      	cmp	sl, r9
    661c:	d315      	bcc.n	664a <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    661e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    6622:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    6624:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    6626:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    662a:	bf28      	it	cs
    662c:	4633      	movcs	r3, r6
    662e:	4642      	mov	r2, r8
    6630:	4429      	add	r1, r5
    6632:	4620      	mov	r0, r4
    6634:	f01c f94d 	bl	228d2 <nvs_flash_rd>
	if (rc) {
    6638:	2800      	cmp	r0, #0
    663a:	d1c1      	bne.n	65c0 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    663c:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    6640:	e7be      	b.n	65c0 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    6642:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6646:	42bb      	cmp	r3, r7
    6648:	d0e4      	beq.n	6614 <nvs_read_hist+0x80>
		return -ENOENT;
    664a:	f06f 0001 	mvn.w	r0, #1
    664e:	e7b7      	b.n	65c0 <nvs_read_hist+0x2c>
		return -EINVAL;
    6650:	f06f 0015 	mvn.w	r0, #21
    6654:	e7b4      	b.n	65c0 <nvs_read_hist+0x2c>
    6656:	bf00      	nop
    6658:	0002775c 	.word	0x0002775c
    665c:	0002785c 	.word	0x0002785c
    6660:	0002b514 	.word	0x0002b514

00006664 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    6664:	4b08      	ldr	r3, [pc, #32]	; (6688 <get_flash_area_from_id+0x24>)
{
    6666:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    6668:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    666a:	4b08      	ldr	r3, [pc, #32]	; (668c <get_flash_area_from_id+0x28>)
{
    666c:	4601      	mov	r1, r0
    666e:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    6670:	2300      	movs	r3, #0
    6672:	429c      	cmp	r4, r3
    6674:	dc01      	bgt.n	667a <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    6676:	2000      	movs	r0, #0
}
    6678:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    667a:	4610      	mov	r0, r2
    667c:	3210      	adds	r2, #16
    667e:	7805      	ldrb	r5, [r0, #0]
    6680:	428d      	cmp	r5, r1
    6682:	d0f9      	beq.n	6678 <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    6684:	3301      	adds	r3, #1
    6686:	e7f4      	b.n	6672 <get_flash_area_from_id+0xe>
    6688:	00027cc8 	.word	0x00027cc8
    668c:	200002ac 	.word	0x200002ac

00006690 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    6690:	4b08      	ldr	r3, [pc, #32]	; (66b4 <flash_area_open+0x24>)
    6692:	681b      	ldr	r3, [r3, #0]
{
    6694:	b510      	push	{r4, lr}
    6696:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    6698:	b12b      	cbz	r3, 66a6 <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    669a:	f7ff ffe3 	bl	6664 <get_flash_area_from_id>
	if (area == NULL) {
    669e:	b128      	cbz	r0, 66ac <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    66a0:	6020      	str	r0, [r4, #0]
	return 0;
    66a2:	2000      	movs	r0, #0
}
    66a4:	bd10      	pop	{r4, pc}
		return -EACCES;
    66a6:	f06f 000c 	mvn.w	r0, #12
    66aa:	e7fb      	b.n	66a4 <flash_area_open+0x14>
		return -ENOENT;
    66ac:	f06f 0001 	mvn.w	r0, #1
    66b0:	e7f8      	b.n	66a4 <flash_area_open+0x14>
    66b2:	bf00      	nop
    66b4:	200002ac 	.word	0x200002ac

000066b8 <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    66b8:	b530      	push	{r4, r5, lr}
    66ba:	b089      	sub	sp, #36	; 0x24
    66bc:	460c      	mov	r4, r1
    66be:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    66c0:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    66c2:	f7ff ffcf 	bl	6664 <get_flash_area_from_id>
	if (fa == NULL) {
    66c6:	b1b8      	cbz	r0, 66f8 <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    66c8:	6843      	ldr	r3, [r0, #4]
    66ca:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    66cc:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    66ce:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    66d0:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    66d2:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    66d6:	2300      	movs	r3, #0
	cb_data->status = 0;
    66d8:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    66dc:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    66de:	f01c fa70 	bl	22bc2 <device_get_binding>
	if (flash_dev == NULL) {
    66e2:	b160      	cbz	r0, 66fe <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    66e4:	4907      	ldr	r1, [pc, #28]	; (6704 <flash_area_get_sectors+0x4c>)
    66e6:	aa01      	add	r2, sp, #4
    66e8:	f020 f82b 	bl	26742 <flash_page_foreach>
	if (cb_data->status == 0) {
    66ec:	9807      	ldr	r0, [sp, #28]
    66ee:	b908      	cbnz	r0, 66f4 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    66f0:	9b05      	ldr	r3, [sp, #20]
    66f2:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    66f4:	b009      	add	sp, #36	; 0x24
    66f6:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    66f8:	f06f 0015 	mvn.w	r0, #21
    66fc:	e7fa      	b.n	66f4 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    66fe:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    6702:	e7f7      	b.n	66f4 <flash_area_get_sectors+0x3c>
    6704:	00022bc7 	.word	0x00022bc7

00006708 <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    6708:	4b10      	ldr	r3, [pc, #64]	; (674c <settings_save_one+0x44>)
{
    670a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    670e:	681c      	ldr	r4, [r3, #0]
{
    6710:	4605      	mov	r5, r0
    6712:	460e      	mov	r6, r1
    6714:	4617      	mov	r7, r2
	if (!cs) {
    6716:	b1ac      	cbz	r4, 6744 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    6718:	f04f 32ff 	mov.w	r2, #4294967295
    671c:	f04f 33ff 	mov.w	r3, #4294967295
    6720:	480b      	ldr	r0, [pc, #44]	; (6750 <settings_save_one+0x48>)
    6722:	f019 f97b 	bl	1fa1c <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    6726:	6863      	ldr	r3, [r4, #4]
    6728:	4632      	mov	r2, r6
    672a:	f8d3 8008 	ldr.w	r8, [r3, #8]
    672e:	4629      	mov	r1, r5
    6730:	463b      	mov	r3, r7
    6732:	4620      	mov	r0, r4
    6734:	47c0      	blx	r8
    6736:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6738:	4805      	ldr	r0, [pc, #20]	; (6750 <settings_save_one+0x48>)
    673a:	f019 f9e1 	bl	1fb00 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    673e:	4620      	mov	r0, r4
    6740:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    6744:	f06f 0401 	mvn.w	r4, #1
    6748:	e7f9      	b.n	673e <settings_save_one+0x36>
    674a:	bf00      	nop
    674c:	2000d588 	.word	0x2000d588
    6750:	20009fac 	.word	0x20009fac

00006754 <settings_src_register>:
	parent->next = child;
    6754:	2300      	movs	r3, #0
    6756:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    6758:	4b04      	ldr	r3, [pc, #16]	; (676c <settings_src_register+0x18>)
    675a:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    675c:	b912      	cbnz	r2, 6764 <settings_src_register+0x10>
	list->head = node;
    675e:	e9c3 0000 	strd	r0, r0, [r3]
}
    6762:	4770      	bx	lr
	parent->next = child;
    6764:	6010      	str	r0, [r2, #0]
	list->tail = node;
    6766:	6058      	str	r0, [r3, #4]
}
    6768:	4770      	bx	lr
    676a:	bf00      	nop
    676c:	2000d580 	.word	0x2000d580

00006770 <settings_dst_register>:
	settings_save_dst = cs;
    6770:	4b01      	ldr	r3, [pc, #4]	; (6778 <settings_dst_register+0x8>)
    6772:	6018      	str	r0, [r3, #0]
}
    6774:	4770      	bx	lr
    6776:	bf00      	nop
    6778:	2000d588 	.word	0x2000d588

0000677c <settings_load_subtree>:
{
    677c:	b530      	push	{r4, r5, lr}
    677e:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    6780:	2300      	movs	r3, #0
{
    6782:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    6784:	e9cd 3302 	strd	r3, r3, [sp, #8]
    6788:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    678a:	f04f 33ff 	mov.w	r3, #4294967295
    678e:	480c      	ldr	r0, [pc, #48]	; (67c0 <settings_load_subtree+0x44>)
    6790:	f04f 32ff 	mov.w	r2, #4294967295
    6794:	f019 f942 	bl	1fa1c <z_impl_k_mutex_lock>
	return list->head;
    6798:	4b0a      	ldr	r3, [pc, #40]	; (67c4 <settings_load_subtree+0x48>)
    679a:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    679c:	b134      	cbz	r4, 67ac <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    679e:	6863      	ldr	r3, [r4, #4]
    67a0:	4620      	mov	r0, r4
    67a2:	681b      	ldr	r3, [r3, #0]
    67a4:	a901      	add	r1, sp, #4
    67a6:	4798      	blx	r3
	return node->next;
    67a8:	6824      	ldr	r4, [r4, #0]
    67aa:	e7f7      	b.n	679c <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    67ac:	4628      	mov	r0, r5
    67ae:	f000 f8d3 	bl	6958 <settings_commit_subtree>
    67b2:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    67b4:	4802      	ldr	r0, [pc, #8]	; (67c0 <settings_load_subtree+0x44>)
    67b6:	f019 f9a3 	bl	1fb00 <z_impl_k_mutex_unlock>
}
    67ba:	4620      	mov	r0, r4
    67bc:	b005      	add	sp, #20
    67be:	bd30      	pop	{r4, r5, pc}
    67c0:	20009fac 	.word	0x20009fac
    67c4:	2000d580 	.word	0x2000d580

000067c8 <settings_load_subtree_direct>:
{
    67c8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    67ca:	e9cd 0101 	strd	r0, r1, [sp, #4]
    67ce:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    67d0:	f04f 33ff 	mov.w	r3, #4294967295
    67d4:	480a      	ldr	r0, [pc, #40]	; (6800 <settings_load_subtree_direct+0x38>)
    67d6:	f04f 32ff 	mov.w	r2, #4294967295
    67da:	f019 f91f 	bl	1fa1c <z_impl_k_mutex_lock>
	return list->head;
    67de:	4b09      	ldr	r3, [pc, #36]	; (6804 <settings_load_subtree_direct+0x3c>)
    67e0:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    67e2:	b134      	cbz	r4, 67f2 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    67e4:	6863      	ldr	r3, [r4, #4]
    67e6:	4620      	mov	r0, r4
    67e8:	681b      	ldr	r3, [r3, #0]
    67ea:	a901      	add	r1, sp, #4
    67ec:	4798      	blx	r3
	return node->next;
    67ee:	6824      	ldr	r4, [r4, #0]
    67f0:	e7f7      	b.n	67e2 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    67f2:	4803      	ldr	r0, [pc, #12]	; (6800 <settings_load_subtree_direct+0x38>)
    67f4:	f019 f984 	bl	1fb00 <z_impl_k_mutex_unlock>
}
    67f8:	2000      	movs	r0, #0
    67fa:	b004      	add	sp, #16
    67fc:	bd10      	pop	{r4, pc}
    67fe:	bf00      	nop
    6800:	20009fac 	.word	0x20009fac
    6804:	2000d580 	.word	0x2000d580

00006808 <settings_store_init>:
	list->head = NULL;
    6808:	4b02      	ldr	r3, [pc, #8]	; (6814 <settings_store_init+0xc>)
    680a:	2200      	movs	r2, #0
	list->tail = NULL;
    680c:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    6810:	4770      	bx	lr
    6812:	bf00      	nop
    6814:	2000d580 	.word	0x2000d580

00006818 <settings_init>:
	list->head = NULL;
    6818:	4b02      	ldr	r3, [pc, #8]	; (6824 <settings_init+0xc>)
    681a:	2200      	movs	r2, #0
	list->tail = NULL;
    681c:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    6820:	f7ff bff2 	b.w	6808 <settings_store_init>
    6824:	2000d58c 	.word	0x2000d58c

00006828 <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    6828:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    682c:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    682e:	460e      	mov	r6, r1
    6830:	b109      	cbz	r1, 6836 <settings_parse_and_lookup+0xe>
		*next = NULL;
    6832:	2300      	movs	r3, #0
    6834:	600b      	str	r3, [r1, #0]
    6836:	4c1e      	ldr	r4, [pc, #120]	; (68b0 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6838:	f8df 8078 	ldr.w	r8, [pc, #120]	; 68b4 <settings_parse_and_lookup+0x8c>
    683c:	2500      	movs	r5, #0
    683e:	4544      	cmp	r4, r8
    6840:	d308      	bcc.n	6854 <settings_parse_and_lookup+0x2c>
	return list->head;
    6842:	4b1d      	ldr	r3, [pc, #116]	; (68b8 <settings_parse_and_lookup+0x90>)
    6844:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    6846:	b10c      	cbz	r4, 684c <settings_parse_and_lookup+0x24>
    6848:	3c14      	subs	r4, #20
    684a:	b9c4      	cbnz	r4, 687e <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    684c:	4628      	mov	r0, r5
    684e:	b002      	add	sp, #8
    6850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    6854:	6821      	ldr	r1, [r4, #0]
    6856:	aa01      	add	r2, sp, #4
    6858:	4638      	mov	r0, r7
    685a:	f01c f9d9 	bl	22c10 <settings_name_steq>
    685e:	b160      	cbz	r0, 687a <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    6860:	b925      	cbnz	r5, 686c <settings_parse_and_lookup+0x44>
			if (next) {
    6862:	b10e      	cbz	r6, 6868 <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    6864:	9b01      	ldr	r3, [sp, #4]
    6866:	6033      	str	r3, [r6, #0]
    6868:	4625      	mov	r5, r4
    686a:	e006      	b.n	687a <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    686c:	6829      	ldr	r1, [r5, #0]
    686e:	6820      	ldr	r0, [r4, #0]
    6870:	2200      	movs	r2, #0
    6872:	f01c f9cd 	bl	22c10 <settings_name_steq>
    6876:	2800      	cmp	r0, #0
    6878:	d1f3      	bne.n	6862 <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    687a:	3414      	adds	r4, #20
    687c:	e7df      	b.n	683e <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    687e:	6821      	ldr	r1, [r4, #0]
    6880:	aa01      	add	r2, sp, #4
    6882:	4638      	mov	r0, r7
    6884:	f01c f9c4 	bl	22c10 <settings_name_steq>
    6888:	b160      	cbz	r0, 68a4 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    688a:	b925      	cbnz	r5, 6896 <settings_parse_and_lookup+0x6e>
			if (next) {
    688c:	b10e      	cbz	r6, 6892 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    688e:	9b01      	ldr	r3, [sp, #4]
    6890:	6033      	str	r3, [r6, #0]
    6892:	4625      	mov	r5, r4
    6894:	e006      	b.n	68a4 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    6896:	6829      	ldr	r1, [r5, #0]
    6898:	6820      	ldr	r0, [r4, #0]
    689a:	2200      	movs	r2, #0
    689c:	f01c f9b8 	bl	22c10 <settings_name_steq>
    68a0:	2800      	cmp	r0, #0
    68a2:	d1f3      	bne.n	688c <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    68a4:	f114 0f14 	cmn.w	r4, #20
    68a8:	d0d0      	beq.n	684c <settings_parse_and_lookup+0x24>
	return node->next;
    68aa:	6964      	ldr	r4, [r4, #20]
    68ac:	e7cb      	b.n	6846 <settings_parse_and_lookup+0x1e>
    68ae:	bf00      	nop
    68b0:	000276e4 	.word	0x000276e4
    68b4:	0002775c 	.word	0x0002775c
    68b8:	2000d58c 	.word	0x2000d58c

000068bc <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    68bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    68c0:	b085      	sub	sp, #20
    68c2:	4605      	mov	r5, r0
    68c4:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    68c8:	9003      	str	r0, [sp, #12]
{
    68ca:	460c      	mov	r4, r1
    68cc:	4616      	mov	r6, r2
    68ce:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    68d0:	f1b8 0f00 	cmp.w	r8, #0
    68d4:	d018      	beq.n	6908 <settings_call_set_handler+0x4c>
    68d6:	f8d8 1000 	ldr.w	r1, [r8]
    68da:	b181      	cbz	r1, 68fe <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    68dc:	aa03      	add	r2, sp, #12
    68de:	f01c f997 	bl	22c10 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    68e2:	b960      	cbnz	r0, 68fe <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    68e4:	2000      	movs	r0, #0
    68e6:	e007      	b.n	68f8 <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    68e8:	f8d8 3008 	ldr.w	r3, [r8, #8]
    68ec:	9300      	str	r3, [sp, #0]
    68ee:	9803      	ldr	r0, [sp, #12]
    68f0:	463b      	mov	r3, r7
    68f2:	4632      	mov	r2, r6
    68f4:	4621      	mov	r1, r4
    68f6:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    68f8:	b005      	add	sp, #20
    68fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    68fe:	f8d8 9004 	ldr.w	r9, [r8, #4]
    6902:	f1b9 0f00 	cmp.w	r9, #0
    6906:	d1ef      	bne.n	68e8 <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    6908:	a903      	add	r1, sp, #12
    690a:	4628      	mov	r0, r5
    690c:	f7ff ff8c 	bl	6828 <settings_parse_and_lookup>
		if (!ch) {
    6910:	2800      	cmp	r0, #0
    6912:	d0e7      	beq.n	68e4 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    6914:	f8d0 8008 	ldr.w	r8, [r0, #8]
    6918:	9803      	ldr	r0, [sp, #12]
    691a:	4632      	mov	r2, r6
    691c:	463b      	mov	r3, r7
    691e:	4621      	mov	r1, r4
    6920:	47c0      	blx	r8
		if (rc != 0) {
    6922:	4606      	mov	r6, r0
    6924:	2800      	cmp	r0, #0
    6926:	d0dd      	beq.n	68e4 <settings_call_set_handler+0x28>
    6928:	4b08      	ldr	r3, [pc, #32]	; (694c <settings_call_set_handler+0x90>)
    692a:	4c09      	ldr	r4, [pc, #36]	; (6950 <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    692c:	4628      	mov	r0, r5
    692e:	1ae4      	subs	r4, r4, r3
    6930:	08e4      	lsrs	r4, r4, #3
    6932:	f7fe fde5 	bl	5500 <log_strdup>
    6936:	01a4      	lsls	r4, r4, #6
    6938:	f044 0401 	orr.w	r4, r4, #1
    693c:	4601      	mov	r1, r0
    693e:	4623      	mov	r3, r4
    6940:	4804      	ldr	r0, [pc, #16]	; (6954 <settings_call_set_handler+0x98>)
    6942:	4632      	mov	r2, r6
    6944:	f01b fcf3 	bl	2232e <log_2>
    6948:	e7cc      	b.n	68e4 <settings_call_set_handler+0x28>
    694a:	bf00      	nop
    694c:	0002775c 	.word	0x0002775c
    6950:	000278a4 	.word	0x000278a4
    6954:	0002b626 	.word	0x0002b626

00006958 <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    6958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    695a:	4c1a      	ldr	r4, [pc, #104]	; (69c4 <settings_commit_subtree+0x6c>)
    695c:	4f1a      	ldr	r7, [pc, #104]	; (69c8 <settings_commit_subtree+0x70>)
{
    695e:	4606      	mov	r6, r0
	rc = 0;
    6960:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6962:	42bc      	cmp	r4, r7
    6964:	d306      	bcc.n	6974 <settings_commit_subtree+0x1c>
	return list->head;
    6966:	4b19      	ldr	r3, [pc, #100]	; (69cc <settings_commit_subtree+0x74>)
    6968:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    696a:	b10c      	cbz	r4, 6970 <settings_commit_subtree+0x18>
    696c:	3c14      	subs	r4, #20
    696e:	b99c      	cbnz	r4, 6998 <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    6970:	4628      	mov	r0, r5
    6972:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6974:	b91e      	cbnz	r6, 697e <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    6976:	68e3      	ldr	r3, [r4, #12]
    6978:	b94b      	cbnz	r3, 698e <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    697a:	3414      	adds	r4, #20
    697c:	e7f1      	b.n	6962 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    697e:	6820      	ldr	r0, [r4, #0]
    6980:	2200      	movs	r2, #0
    6982:	4631      	mov	r1, r6
    6984:	f01c f944 	bl	22c10 <settings_name_steq>
    6988:	2800      	cmp	r0, #0
    698a:	d1f4      	bne.n	6976 <settings_commit_subtree+0x1e>
    698c:	e7f5      	b.n	697a <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    698e:	4798      	blx	r3
				rc = rc2;
    6990:	2d00      	cmp	r5, #0
    6992:	bf08      	it	eq
    6994:	4605      	moveq	r5, r0
    6996:	e7f0      	b.n	697a <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6998:	b936      	cbnz	r6, 69a8 <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    699a:	68e3      	ldr	r3, [r4, #12]
    699c:	b963      	cbnz	r3, 69b8 <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    699e:	f114 0f14 	cmn.w	r4, #20
    69a2:	d0e5      	beq.n	6970 <settings_commit_subtree+0x18>
	return node->next;
    69a4:	6964      	ldr	r4, [r4, #20]
    69a6:	e7e0      	b.n	696a <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    69a8:	6820      	ldr	r0, [r4, #0]
    69aa:	2200      	movs	r2, #0
    69ac:	4631      	mov	r1, r6
    69ae:	f01c f92f 	bl	22c10 <settings_name_steq>
    69b2:	2800      	cmp	r0, #0
    69b4:	d1f1      	bne.n	699a <settings_commit_subtree+0x42>
    69b6:	e7f2      	b.n	699e <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    69b8:	4798      	blx	r3
				rc = rc2;
    69ba:	2d00      	cmp	r5, #0
    69bc:	bf08      	it	eq
    69be:	4605      	moveq	r5, r0
    69c0:	e7ed      	b.n	699e <settings_commit_subtree+0x46>
    69c2:	bf00      	nop
    69c4:	000276e4 	.word	0x000276e4
    69c8:	0002775c 	.word	0x0002775c
    69cc:	2000d58c 	.word	0x2000d58c

000069d0 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    69d0:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    69d2:	4c06      	ldr	r4, [pc, #24]	; (69ec <settings_subsys_init+0x1c>)
    69d4:	7823      	ldrb	r3, [r4, #0]
    69d6:	b93b      	cbnz	r3, 69e8 <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    69d8:	f7ff ff1e 	bl	6818 <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    69dc:	f000 f864 	bl	6aa8 <settings_backend_init>

	if (!err) {
    69e0:	b908      	cbnz	r0, 69e6 <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    69e2:	2301      	movs	r3, #1
    69e4:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    69e6:	bd10      	pop	{r4, pc}
		return 0;
    69e8:	2000      	movs	r0, #0
    69ea:	e7fc      	b.n	69e6 <settings_subsys_init+0x16>
    69ec:	2000ed99 	.word	0x2000ed99

000069f0 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    69f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    69f4:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    69f6:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 6aa4 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    69fa:	3401      	adds	r4, #1
{
    69fc:	b098      	sub	sp, #96	; 0x60
    69fe:	4680      	mov	r8, r0
    6a00:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    6a02:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6a04:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    6a08:	1e65      	subs	r5, r4, #1
    6a0a:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    6a0c:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    6a10:	d045      	beq.n	6a9e <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6a12:	234a      	movs	r3, #74	; 0x4a
    6a14:	aa05      	add	r2, sp, #20
    6a16:	4629      	mov	r1, r5
    6a18:	4630      	mov	r0, r6
    6a1a:	f01c f8cb 	bl	22bb4 <nvs_read>
    6a1e:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    6a22:	343f      	adds	r4, #63	; 0x3f
    6a24:	b2a4      	uxth	r4, r4
    6a26:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6a28:	4621      	mov	r1, r4
    6a2a:	2301      	movs	r3, #1
    6a2c:	f10d 020b 	add.w	r2, sp, #11
    6a30:	4630      	mov	r0, r6
    6a32:	f01c f8bf 	bl	22bb4 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    6a36:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6a38:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    6a3a:	dc03      	bgt.n	6a44 <settings_nvs_load+0x54>
    6a3c:	2800      	cmp	r0, #0
    6a3e:	dc03      	bgt.n	6a48 <settings_nvs_load+0x58>
{
    6a40:	462c      	mov	r4, r5
    6a42:	e7e1      	b.n	6a08 <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    6a44:	2800      	cmp	r0, #0
    6a46:	dc16      	bgt.n	6a76 <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    6a48:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    6a4c:	42ab      	cmp	r3, r5
    6a4e:	d109      	bne.n	6a64 <settings_nvs_load+0x74>
				cf->last_name_id--;
    6a50:	4642      	mov	r2, r8
    6a52:	1e6b      	subs	r3, r5, #1
    6a54:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    6a58:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    6a5c:	2302      	movs	r3, #2
    6a5e:	4630      	mov	r0, r6
    6a60:	f7ff fcc4 	bl	63ec <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    6a64:	4629      	mov	r1, r5
    6a66:	4630      	mov	r0, r6
    6a68:	f01c f8a0 	bl	22bac <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    6a6c:	4621      	mov	r1, r4
    6a6e:	4630      	mov	r0, r6
    6a70:	f01c f89c 	bl	22bac <nvs_delete>
			continue;
    6a74:	e7e4      	b.n	6a40 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    6a76:	ab18      	add	r3, sp, #96	; 0x60
    6a78:	441f      	add	r7, r3
    6a7a:	2300      	movs	r3, #0
    6a7c:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    6a80:	4652      	mov	r2, sl
    6a82:	f8cd 9000 	str.w	r9, [sp]
    6a86:	ab03      	add	r3, sp, #12
    6a88:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    6a8a:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    6a8c:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    6a90:	f7ff ff14 	bl	68bc <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    6a94:	2800      	cmp	r0, #0
    6a96:	d0d3      	beq.n	6a40 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    6a98:	b018      	add	sp, #96	; 0x60
    6a9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6a9e:	2000      	movs	r0, #0
	return ret;
    6aa0:	e7fa      	b.n	6a98 <settings_nvs_load+0xa8>
    6aa2:	bf00      	nop
    6aa4:	00022c83 	.word	0x00022c83

00006aa8 <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    6aa8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    6aaa:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6aac:	4669      	mov	r1, sp
    6aae:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    6ab0:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6ab2:	f7ff fded 	bl	6690 <flash_area_open>
	if (rc) {
    6ab6:	4604      	mov	r4, r0
    6ab8:	2800      	cmp	r0, #0
    6aba:	d136      	bne.n	6b2a <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    6abc:	aa02      	add	r2, sp, #8
    6abe:	a901      	add	r1, sp, #4
    6ac0:	2004      	movs	r0, #4
    6ac2:	f7ff fdf9 	bl	66b8 <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    6ac6:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    6aca:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    6acc:	d02d      	beq.n	6b2a <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    6ace:	b138      	cbz	r0, 6ae0 <settings_backend_init+0x38>
    6ad0:	340c      	adds	r4, #12
    6ad2:	d005      	beq.n	6ae0 <settings_backend_init+0x38>
		k_panic();
    6ad4:	4040      	eors	r0, r0
    6ad6:	f380 8811 	msr	BASEPRI, r0
    6ada:	f04f 0004 	mov.w	r0, #4
    6ade:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    6ae0:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    6ae2:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    6ae6:	d223      	bcs.n	6b30 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    6ae8:	9a00      	ldr	r2, [sp, #0]
    6aea:	2300      	movs	r3, #0
    6aec:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    6aee:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    6af0:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    6af2:	4285      	cmp	r5, r0
    6af4:	b29c      	uxth	r4, r3
    6af6:	d303      	bcc.n	6b00 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    6af8:	3301      	adds	r3, #1
    6afa:	2b08      	cmp	r3, #8
    6afc:	d1f8      	bne.n	6af0 <settings_backend_init+0x48>
    6afe:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6b00:	4d0d      	ldr	r5, [pc, #52]	; (6b38 <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    6b02:	6853      	ldr	r3, [r2, #4]
    6b04:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    6b06:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6b08:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    6b0a:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6b0c:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6b0e:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    6b10:	f01c f94e 	bl	22db0 <settings_nvs_backend_init>
	if (rc) {
    6b14:	4604      	mov	r4, r0
    6b16:	b940      	cbnz	r0, 6b2a <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6b18:	4e08      	ldr	r6, [pc, #32]	; (6b3c <settings_backend_init+0x94>)
    6b1a:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    6b1c:	4628      	mov	r0, r5
    6b1e:	f7ff fe19 	bl	6754 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    6b22:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6b24:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    6b26:	f7ff fe23 	bl	6770 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    6b2a:	4620      	mov	r0, r4
    6b2c:	b004      	add	sp, #16
    6b2e:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    6b30:	f06f 0424 	mvn.w	r4, #36	; 0x24
    6b34:	e7f9      	b.n	6b2a <settings_backend_init+0x82>
    6b36:	bf00      	nop
    6b38:	2000d594 	.word	0x2000d594
    6b3c:	200002b0 	.word	0x200002b0

00006b40 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6b42:	4605      	mov	r5, r0
	__asm__ volatile(
    6b44:	f04f 0320 	mov.w	r3, #32
    6b48:	f3ef 8611 	mrs	r6, BASEPRI
    6b4c:	f383 8811 	msr	BASEPRI, r3
    6b50:	f3bf 8f6f 	isb	sy
	return list->head;
    6b54:	4b09      	ldr	r3, [pc, #36]	; (6b7c <pm_state_notify+0x3c>)
    6b56:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6b58:	b15c      	cbz	r4, 6b72 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    6b5a:	4f09      	ldr	r7, [pc, #36]	; (6b80 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    6b5c:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6b60:	2d00      	cmp	r5, #0
    6b62:	bf08      	it	eq
    6b64:	4613      	moveq	r3, r2
		if (callback) {
    6b66:	b10b      	cbz	r3, 6b6c <pm_state_notify+0x2c>
			callback(z_power_state.state);
    6b68:	7838      	ldrb	r0, [r7, #0]
    6b6a:	4798      	blx	r3
	return node->next;
    6b6c:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6b6e:	2c00      	cmp	r4, #0
    6b70:	d1f4      	bne.n	6b5c <pm_state_notify+0x1c>
	__asm__ volatile(
    6b72:	f386 8811 	msr	BASEPRI, r6
    6b76:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6b7c:	2000d5d4 	.word	0x2000d5d4
    6b80:	2000d5dc 	.word	0x2000d5dc

00006b84 <pm_system_suspend>:
	return z_power_state.state;
}


enum pm_state pm_system_suspend(int32_t ticks)
{
    6b84:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_forced_power_state == false) {
    6b88:	4f18      	ldr	r7, [pc, #96]	; (6bec <pm_system_suspend+0x68>)
    6b8a:	4c19      	ldr	r4, [pc, #100]	; (6bf0 <pm_system_suspend+0x6c>)
    6b8c:	783b      	ldrb	r3, [r7, #0]
{
    6b8e:	4601      	mov	r1, r0
	if (z_forced_power_state == false) {
    6b90:	b93b      	cbnz	r3, 6ba2 <pm_system_suspend+0x1e>
		z_power_state = pm_policy_next_state(ticks);
    6b92:	466d      	mov	r5, sp
    6b94:	4628      	mov	r0, r5
    6b96:	f01c f927 	bl	22de8 <pm_policy_next_state>
    6b9a:	e895 0003 	ldmia.w	r5, {r0, r1}
    6b9e:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    6ba2:	7825      	ldrb	r5, [r4, #0]
    6ba4:	b1f5      	cbz	r5, 6be4 <pm_system_suspend+0x60>
	post_ops_done = 0;
    6ba6:	4e13      	ldr	r6, [pc, #76]	; (6bf4 <pm_system_suspend+0x70>)
    6ba8:	f04f 0800 	mov.w	r8, #0
	pm_state_notify(true);
    6bac:	2001      	movs	r0, #1
	if (deep_sleep) {
    6bae:	3d04      	subs	r5, #4
	post_ops_done = 0;
    6bb0:	f8c6 8000 	str.w	r8, [r6]
	pm_state_notify(true);
    6bb4:	f7ff ffc4 	bl	6b40 <pm_state_notify>
	if (deep_sleep) {
    6bb8:	2d01      	cmp	r5, #1
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
    6bba:	bf98      	it	ls
    6bbc:	4b0e      	ldrls	r3, [pc, #56]	; (6bf8 <pm_system_suspend+0x74>)
	pm_power_state_set(z_power_state);
    6bbe:	e894 0003 	ldmia.w	r4, {r0, r1}
    6bc2:	bf98      	it	ls
    6bc4:	f883 8000 	strbls.w	r8, [r3]
    6bc8:	f01d fbfe 	bl	243c8 <pm_power_state_set>
	if (!post_ops_done) {
    6bcc:	6830      	ldr	r0, [r6, #0]
    6bce:	b940      	cbnz	r0, 6be2 <pm_system_suspend+0x5e>
		post_ops_done = 1;
    6bd0:	2301      	movs	r3, #1
		z_forced_power_state = false;
    6bd2:	7038      	strb	r0, [r7, #0]
		post_ops_done = 1;
    6bd4:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
    6bd6:	f7ff ffb3 	bl	6b40 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    6bda:	e894 0003 	ldmia.w	r4, {r0, r1}
    6bde:	f01d fc06 	bl	243ee <pm_power_state_exit_post_ops>
	return z_power_state.state;
    6be2:	7825      	ldrb	r5, [r4, #0]
	return pm_policy_mgr(ticks);
}
    6be4:	4628      	mov	r0, r5
    6be6:	b002      	add	sp, #8
    6be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6bec:	2000ed9a 	.word	0x2000ed9a
    6bf0:	2000d5dc 	.word	0x2000d5dc
    6bf4:	200002c0 	.word	0x200002c0
    6bf8:	2000f31a 	.word	0x2000f31a

00006bfc <pm_system_resume>:

void pm_system_resume(void)
{
    6bfc:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    6bfe:	4b06      	ldr	r3, [pc, #24]	; (6c18 <pm_system_resume+0x1c>)
    6c00:	6818      	ldr	r0, [r3, #0]
    6c02:	b940      	cbnz	r0, 6c16 <pm_system_resume+0x1a>
		post_ops_done = 1;
    6c04:	2201      	movs	r2, #1
    6c06:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
    6c08:	f7ff ff9a 	bl	6b40 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    6c0c:	4b03      	ldr	r3, [pc, #12]	; (6c1c <pm_system_resume+0x20>)
    6c0e:	e893 0003 	ldmia.w	r3, {r0, r1}
    6c12:	f01d fbec 	bl	243ee <pm_power_state_exit_post_ops>
	}
}
    6c16:	bd08      	pop	{r3, pc}
    6c18:	200002c0 	.word	0x200002c0
    6c1c:	2000d5dc 	.word	0x2000d5dc

00006c20 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6c20:	b510      	push	{r4, lr}
    6c22:	4807      	ldr	r0, [pc, #28]	; (6c40 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    6c24:	4c07      	ldr	r4, [pc, #28]	; (6c44 <uart_console_init+0x24>)
    6c26:	f018 fcd5 	bl	1f5d4 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    6c2a:	4b07      	ldr	r3, [pc, #28]	; (6c48 <uart_console_init+0x28>)
    6c2c:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    6c2e:	4620      	mov	r0, r4
    6c30:	f001 f97a 	bl	7f28 <__stdout_hook_install>
	__printk_hook_install(console_out);
    6c34:	4620      	mov	r0, r4
    6c36:	f7fd fbfb 	bl	4430 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    6c3a:	2000      	movs	r0, #0
    6c3c:	bd10      	pop	{r4, pc}
    6c3e:	bf00      	nop
    6c40:	0002b4d3 	.word	0x0002b4d3
    6c44:	00006c4d 	.word	0x00006c4d
    6c48:	2000d5e4 	.word	0x2000d5e4

00006c4c <console_out>:
	if ('\n' == c) {
    6c4c:	280a      	cmp	r0, #10
{
    6c4e:	b538      	push	{r3, r4, r5, lr}
    6c50:	4d07      	ldr	r5, [pc, #28]	; (6c70 <console_out+0x24>)
    6c52:	4604      	mov	r4, r0
	if ('\n' == c) {
    6c54:	d104      	bne.n	6c60 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    6c56:	6828      	ldr	r0, [r5, #0]
    6c58:	6883      	ldr	r3, [r0, #8]
    6c5a:	210d      	movs	r1, #13
    6c5c:	685b      	ldr	r3, [r3, #4]
    6c5e:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    6c60:	6828      	ldr	r0, [r5, #0]
    6c62:	6883      	ldr	r3, [r0, #8]
    6c64:	b2e1      	uxtb	r1, r4
    6c66:	685b      	ldr	r3, [r3, #4]
    6c68:	4798      	blx	r3
}
    6c6a:	4620      	mov	r0, r4
    6c6c:	bd38      	pop	{r3, r4, r5, pc}
    6c6e:	bf00      	nop
    6c70:	2000d5e4 	.word	0x2000d5e4

00006c74 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6c74:	4b08      	ldr	r3, [pc, #32]	; (6c98 <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6c76:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6c78:	1ac3      	subs	r3, r0, r3
{
    6c7a:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6c7c:	4907      	ldr	r1, [pc, #28]	; (6c9c <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    6c7e:	109b      	asrs	r3, r3, #2
{
    6c80:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6c82:	4359      	muls	r1, r3
    6c84:	4806      	ldr	r0, [pc, #24]	; (6ca0 <onoff_stop+0x2c>)
    6c86:	2240      	movs	r2, #64	; 0x40
    6c88:	f01c f8ce 	bl	22e28 <stop>
	notify(mgr, res);
    6c8c:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6c8e:	4601      	mov	r1, r0
	notify(mgr, res);
    6c90:	4620      	mov	r0, r4
}
    6c92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    6c96:	4718      	bx	r3
    6c98:	2000d5f8 	.word	0x2000d5f8
    6c9c:	b6db6db7 	.word	0xb6db6db7
    6ca0:	20009d80 	.word	0x20009d80

00006ca4 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6ca4:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6ca6:	4c0c      	ldr	r4, [pc, #48]	; (6cd8 <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6ca8:	4a0c      	ldr	r2, [pc, #48]	; (6cdc <onoff_start+0x38>)
    6caa:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    6cac:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6cae:	9300      	str	r3, [sp, #0]
{
    6cb0:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6cb2:	460b      	mov	r3, r1
    6cb4:	490a      	ldr	r1, [pc, #40]	; (6ce0 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    6cb6:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6cb8:	4361      	muls	r1, r4
{
    6cba:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6cbc:	4809      	ldr	r0, [pc, #36]	; (6ce4 <onoff_start+0x40>)
    6cbe:	f01c f8e0 	bl	22e82 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6cc2:	1e01      	subs	r1, r0, #0
    6cc4:	da05      	bge.n	6cd2 <onoff_start+0x2e>
		notify(mgr, err);
    6cc6:	4630      	mov	r0, r6
    6cc8:	462b      	mov	r3, r5
	}
}
    6cca:	b002      	add	sp, #8
    6ccc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6cd0:	4718      	bx	r3
}
    6cd2:	b002      	add	sp, #8
    6cd4:	bd70      	pop	{r4, r5, r6, pc}
    6cd6:	bf00      	nop
    6cd8:	2000d5f8 	.word	0x2000d5f8
    6cdc:	00022ef1 	.word	0x00022ef1
    6ce0:	b6db6db7 	.word	0xb6db6db7
    6ce4:	20009d80 	.word	0x20009d80

00006ce8 <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6ce8:	2200      	movs	r2, #0
{
    6cea:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6cec:	2101      	movs	r1, #1
{
    6cee:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6cf0:	4610      	mov	r0, r2
    6cf2:	f000 fcab 	bl	764c <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    6cf6:	2000      	movs	r0, #0
    6cf8:	f000 fc76 	bl	75e8 <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6cfc:	480f      	ldr	r0, [pc, #60]	; (6d3c <clk_init+0x54>)
    6cfe:	f017 ff63 	bl	1ebc8 <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6d02:	4b0f      	ldr	r3, [pc, #60]	; (6d40 <clk_init+0x58>)
    6d04:	4298      	cmp	r0, r3
    6d06:	d115      	bne.n	6d34 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6d08:	f01f fd9b 	bl	26842 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    6d0c:	68e6      	ldr	r6, [r4, #12]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6d0e:	490d      	ldr	r1, [pc, #52]	; (6d44 <clk_init+0x5c>)
    6d10:	4630      	mov	r0, r6
    6d12:	f01a febe 	bl	21a92 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6d16:	2800      	cmp	r0, #0
    6d18:	db0b      	blt.n	6d32 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    6d1a:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6d1c:	4909      	ldr	r1, [pc, #36]	; (6d44 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6d1e:	2501      	movs	r5, #1
    6d20:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6d22:	f104 001c 	add.w	r0, r4, #28
    6d26:	f01a feb4 	bl	21a92 <onoff_manager_init>
		if (err < 0) {
    6d2a:	2800      	cmp	r0, #0
    6d2c:	db01      	blt.n	6d32 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6d2e:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6d30:	2000      	movs	r0, #0
}
    6d32:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6d34:	f06f 0004 	mvn.w	r0, #4
    6d38:	e7fb      	b.n	6d32 <clk_init+0x4a>
    6d3a:	bf00      	nop
    6d3c:	00006d7d 	.word	0x00006d7d
    6d40:	0bad0000 	.word	0x0bad0000
    6d44:	00027cf8 	.word	0x00027cf8

00006d48 <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6d48:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    6d4a:	230c      	movs	r3, #12
    6d4c:	4809      	ldr	r0, [pc, #36]	; (6d74 <clkstarted_handle.constprop.0+0x2c>)
    6d4e:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    6d50:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    6d52:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6d54:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    6d58:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    6d5a:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6d5c:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6d5e:	4418      	add	r0, r3
    6d60:	f01c f84f 	bl	22e02 <set_on_state>
	if (callback) {
    6d64:	b12d      	cbz	r5, 6d72 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6d66:	4632      	mov	r2, r6
    6d68:	462b      	mov	r3, r5
    6d6a:	4803      	ldr	r0, [pc, #12]	; (6d78 <clkstarted_handle.constprop.0+0x30>)
}
    6d6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6d70:	4718      	bx	r3
}
    6d72:	bd70      	pop	{r4, r5, r6, pc}
    6d74:	2000d5f8 	.word	0x2000d5f8
    6d78:	20009d80 	.word	0x20009d80

00006d7c <clock_event_handler>:
	switch (event) {
    6d7c:	b110      	cbz	r0, 6d84 <clock_event_handler+0x8>
    6d7e:	2801      	cmp	r0, #1
    6d80:	d004      	beq.n	6d8c <clock_event_handler+0x10>
    6d82:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6d84:	4b03      	ldr	r3, [pc, #12]	; (6d94 <clock_event_handler+0x18>)
    6d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6d88:	075b      	lsls	r3, r3, #29
    6d8a:	d101      	bne.n	6d90 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6d8c:	f7ff bfdc 	b.w	6d48 <clkstarted_handle.constprop.0>
}
    6d90:	4770      	bx	lr
    6d92:	bf00      	nop
    6d94:	2000d5f8 	.word	0x2000d5f8

00006d98 <generic_hfclk_start>:
{
    6d98:	b508      	push	{r3, lr}
	__asm__ volatile(
    6d9a:	f04f 0320 	mov.w	r3, #32
    6d9e:	f3ef 8111 	mrs	r1, BASEPRI
    6da2:	f383 8811 	msr	BASEPRI, r3
    6da6:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6daa:	4a12      	ldr	r2, [pc, #72]	; (6df4 <generic_hfclk_start+0x5c>)
    6dac:	6813      	ldr	r3, [r2, #0]
    6dae:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    6db2:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    6db6:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6db8:	d00c      	beq.n	6dd4 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6dba:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6dbe:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6dc2:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6dc6:	f013 0301 	ands.w	r3, r3, #1
    6dca:	d003      	beq.n	6dd4 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    6dcc:	480a      	ldr	r0, [pc, #40]	; (6df8 <generic_hfclk_start+0x60>)
    6dce:	f01c f818 	bl	22e02 <set_on_state>
			already_started = true;
    6dd2:	2301      	movs	r3, #1
	__asm__ volatile(
    6dd4:	f381 8811 	msr	BASEPRI, r1
    6dd8:	f3bf 8f6f 	isb	sy
	if (already_started) {
    6ddc:	b123      	cbz	r3, 6de8 <generic_hfclk_start+0x50>
}
    6dde:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    6de2:	2000      	movs	r0, #0
    6de4:	f7ff bfb0 	b.w	6d48 <clkstarted_handle.constprop.0>
}
    6de8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6dec:	2001      	movs	r0, #1
    6dee:	f01f bd32 	b.w	26856 <nrfx_clock_start>
    6df2:	bf00      	nop
    6df4:	2000d648 	.word	0x2000d648
    6df8:	2000d638 	.word	0x2000d638

00006dfc <api_blocking_start>:
{
    6dfc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6dfe:	2200      	movs	r2, #0
    6e00:	2301      	movs	r3, #1
    6e02:	e9cd 2302 	strd	r2, r3, [sp, #8]
    6e06:	ab04      	add	r3, sp, #16
    6e08:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6e0c:	4a09      	ldr	r2, [pc, #36]	; (6e34 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6e0e:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6e12:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6e14:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6e18:	f01c f863 	bl	22ee2 <api_start>
	if (err < 0) {
    6e1c:	2800      	cmp	r0, #0
    6e1e:	db05      	blt.n	6e2c <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    6e20:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6e24:	2300      	movs	r3, #0
    6e26:	4668      	mov	r0, sp
    6e28:	f019 fa90 	bl	2034c <z_impl_k_sem_take>
}
    6e2c:	b007      	add	sp, #28
    6e2e:	f85d fb04 	ldr.w	pc, [sp], #4
    6e32:	bf00      	nop
    6e34:	00022f0f 	.word	0x00022f0f

00006e38 <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6e38:	4b09      	ldr	r3, [pc, #36]	; (6e60 <generic_hfclk_stop+0x28>)
    6e3a:	f3bf 8f5b 	dmb	ish
    6e3e:	e853 2f00 	ldrex	r2, [r3]
    6e42:	f022 0102 	bic.w	r1, r2, #2
    6e46:	e843 1000 	strex	r0, r1, [r3]
    6e4a:	2800      	cmp	r0, #0
    6e4c:	d1f7      	bne.n	6e3e <generic_hfclk_stop+0x6>
    6e4e:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6e52:	07d3      	lsls	r3, r2, #31
    6e54:	d402      	bmi.n	6e5c <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6e56:	2001      	movs	r0, #1
    6e58:	f017 bec6 	b.w	1ebe8 <nrfx_clock_stop>
}
    6e5c:	4770      	bx	lr
    6e5e:	bf00      	nop
    6e60:	2000d648 	.word	0x2000d648

00006e64 <z_nrf_clock_control_get_onoff>:
}
    6e64:	4a02      	ldr	r2, [pc, #8]	; (6e70 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    6e66:	b2c3      	uxtb	r3, r0
}
    6e68:	201c      	movs	r0, #28
    6e6a:	fb03 2000 	mla	r0, r3, r0, r2
    6e6e:	4770      	bx	lr
    6e70:	2000d5f8 	.word	0x2000d5f8

00006e74 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6e74:	4b09      	ldr	r3, [pc, #36]	; (6e9c <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    6e76:	f3bf 8f5b 	dmb	ish
    6e7a:	e853 2f00 	ldrex	r2, [r3]
    6e7e:	f042 0101 	orr.w	r1, r2, #1
    6e82:	e843 1000 	strex	r0, r1, [r3]
    6e86:	2800      	cmp	r0, #0
    6e88:	d1f7      	bne.n	6e7a <z_nrf_clock_bt_ctlr_hf_request+0x6>
    6e8a:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    6e8e:	0793      	lsls	r3, r2, #30
    6e90:	d402      	bmi.n	6e98 <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6e92:	2001      	movs	r0, #1
    6e94:	f01f bcdf 	b.w	26856 <nrfx_clock_start>
}
    6e98:	4770      	bx	lr
    6e9a:	bf00      	nop
    6e9c:	2000d648 	.word	0x2000d648

00006ea0 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6ea0:	4b09      	ldr	r3, [pc, #36]	; (6ec8 <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    6ea2:	f3bf 8f5b 	dmb	ish
    6ea6:	e853 2f00 	ldrex	r2, [r3]
    6eaa:	f022 0101 	bic.w	r1, r2, #1
    6eae:	e843 1000 	strex	r0, r1, [r3]
    6eb2:	2800      	cmp	r0, #0
    6eb4:	d1f7      	bne.n	6ea6 <z_nrf_clock_bt_ctlr_hf_release+0x6>
    6eb6:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    6eba:	0793      	lsls	r3, r2, #30
    6ebc:	d402      	bmi.n	6ec4 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6ebe:	2001      	movs	r0, #1
    6ec0:	f017 be92 	b.w	1ebe8 <nrfx_clock_stop>
}
    6ec4:	4770      	bx	lr
    6ec6:	bf00      	nop
    6ec8:	2000d648 	.word	0x2000d648

00006ecc <z_nrf_clock_control_lf_on>:
{
    6ecc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6ed0:	4939      	ldr	r1, [pc, #228]	; (6fb8 <z_nrf_clock_control_lf_on+0xec>)
    6ed2:	f3bf 8f5b 	dmb	ish
    6ed6:	4607      	mov	r7, r0
    6ed8:	2201      	movs	r2, #1
    6eda:	e851 3f00 	ldrex	r3, [r1]
    6ede:	e841 2000 	strex	r0, r2, [r1]
    6ee2:	2800      	cmp	r0, #0
    6ee4:	d1f9      	bne.n	6eda <z_nrf_clock_control_lf_on+0xe>
    6ee6:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    6eea:	b933      	cbnz	r3, 6efa <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    6eec:	4933      	ldr	r1, [pc, #204]	; (6fbc <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    6eee:	4834      	ldr	r0, [pc, #208]	; (6fc0 <z_nrf_clock_control_lf_on+0xf4>)
    6ef0:	604b      	str	r3, [r1, #4]
    6ef2:	60cb      	str	r3, [r1, #12]
    6ef4:	608a      	str	r2, [r1, #8]
    6ef6:	f01a fddf 	bl	21ab8 <onoff_request>
	switch (start_mode) {
    6efa:	1e7b      	subs	r3, r7, #1
    6efc:	2b01      	cmp	r3, #1
    6efe:	d82f      	bhi.n	6f60 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    6f00:	2f01      	cmp	r7, #1
    6f02:	d107      	bne.n	6f14 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    6f04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6f08:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    6f0c:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    6f10:	2b01      	cmp	r3, #1
    6f12:	d025      	beq.n	6f60 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    6f14:	f020 f833 	bl	26f7e <k_is_in_isr>
    6f18:	4604      	mov	r4, r0
    6f1a:	b918      	cbnz	r0, 6f24 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    6f1c:	4b29      	ldr	r3, [pc, #164]	; (6fc4 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    6f1e:	781b      	ldrb	r3, [r3, #0]
    6f20:	2b00      	cmp	r3, #0
    6f22:	d141      	bne.n	6fa8 <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    6f24:	f04f 0320 	mov.w	r3, #32
    6f28:	f3ef 8611 	mrs	r6, BASEPRI
    6f2c:	f383 8811 	msr	BASEPRI, r3
    6f30:	f3bf 8f6f 	isb	sy
    6f34:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    6f36:	f8df 8090 	ldr.w	r8, [pc, #144]	; 6fc8 <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    6f3a:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    6f3e:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    6f42:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    6f46:	03d2      	lsls	r2, r2, #15
    6f48:	d50c      	bpl.n	6f64 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    6f4a:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    6f4e:	2b01      	cmp	r3, #1
    6f50:	d001      	beq.n	6f56 <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    6f52:	2f01      	cmp	r7, #1
    6f54:	d106      	bne.n	6f64 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    6f56:	b30c      	cbz	r4, 6f9c <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    6f58:	f386 8811 	msr	BASEPRI, r6
    6f5c:	f3bf 8f6f 	isb	sy
}
    6f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    6f64:	b1ac      	cbz	r4, 6f92 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    6f66:	4630      	mov	r0, r6
    6f68:	f000 fbf6 	bl	7758 <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    6f6c:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    6f70:	2b00      	cmp	r3, #0
    6f72:	d1e4      	bne.n	6f3e <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    6f74:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    6f78:	2a00      	cmp	r2, #0
    6f7a:	d0e0      	beq.n	6f3e <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    6f7c:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    6f80:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    6f84:	2301      	movs	r3, #1
    6f86:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    6f8a:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    6f8e:	60ab      	str	r3, [r5, #8]
}
    6f90:	e7d5      	b.n	6f3e <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    6f92:	2100      	movs	r1, #0
    6f94:	2021      	movs	r0, #33	; 0x21
    6f96:	f019 f993 	bl	202c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    6f9a:	e7e7      	b.n	6f6c <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    6f9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fa0:	2202      	movs	r2, #2
    6fa2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    6fa6:	e7db      	b.n	6f60 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    6fa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    6fac:	2202      	movs	r2, #2
    6fae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    6fb2:	4606      	mov	r6, r0
}
    6fb4:	e7bf      	b.n	6f36 <z_nrf_clock_control_lf_on+0x6a>
    6fb6:	bf00      	nop
    6fb8:	2000d64c 	.word	0x2000d64c
    6fbc:	2000d5e8 	.word	0x2000d5e8
    6fc0:	2000d614 	.word	0x2000d614
    6fc4:	2000f31b 	.word	0x2000f31b
    6fc8:	e000e100 	.word	0xe000e100

00006fcc <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    6fcc:	4a04      	ldr	r2, [pc, #16]	; (6fe0 <sys_clock_timeout_handler+0x14>)
    6fce:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    6fd0:	1ac8      	subs	r0, r1, r3
    6fd2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    6fd6:	4403      	add	r3, r0
    6fd8:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    6fda:	f019 bc1d 	b.w	20818 <z_clock_announce>
    6fde:	bf00      	nop
    6fe0:	2000d65c 	.word	0x2000d65c

00006fe4 <set_absolute_alarm>:
{
    6fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6fe8:	0086      	lsls	r6, r0, #2
    6fea:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    6fee:	f100 0450 	add.w	r4, r0, #80	; 0x50
    6ff2:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    6ff6:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    6ff8:	b2a4      	uxth	r4, r4
    6ffa:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    6ffe:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    7002:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    7006:	f8df 806c 	ldr.w	r8, [pc, #108]	; 7074 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    700a:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    700e:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7012:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    7014:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    7018:	eba3 0309 	sub.w	r3, r3, r9
    701c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7020:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    7024:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    7026:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    702a:	d102      	bne.n	7032 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    702c:	2013      	movs	r0, #19
    702e:	f01f ffac 	bl	26f8a <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    7032:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    7036:	1aab      	subs	r3, r5, r2
    7038:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    703c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    7040:	bf88      	it	hi
    7042:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7044:	2300      	movs	r3, #0
    7046:	6023      	str	r3, [r4, #0]
    7048:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    704a:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    704e:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    7052:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    7056:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    705a:	4599      	cmp	r9, r3
    705c:	d006      	beq.n	706c <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    705e:	1aeb      	subs	r3, r5, r3
    7060:	3b02      	subs	r3, #2
    7062:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    7066:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    706a:	d801      	bhi.n	7070 <set_absolute_alarm+0x8c>
}
    706c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    7070:	462b      	mov	r3, r5
    7072:	e7cf      	b.n	7014 <set_absolute_alarm+0x30>
    7074:	40011000 	.word	0x40011000

00007078 <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    7078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    707a:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    707c:	4c10      	ldr	r4, [pc, #64]	; (70c0 <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    707e:	462f      	mov	r7, r5
    7080:	4b10      	ldr	r3, [pc, #64]	; (70c4 <rtc_nrf_isr+0x4c>)
    7082:	681e      	ldr	r6, [r3, #0]
    7084:	b105      	cbz	r5, 7088 <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    7086:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    7088:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    708c:	03d2      	lsls	r2, r2, #15
    708e:	d5fa      	bpl.n	7086 <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    7090:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    7094:	2a00      	cmp	r2, #0
    7096:	d0f6      	beq.n	7086 <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7098:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    709c:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    70a0:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    70a4:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    70a8:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    70ac:	2501      	movs	r5, #1
			if (handler) {
    70ae:	b126      	cbz	r6, 70ba <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    70b0:	685a      	ldr	r2, [r3, #4]
    70b2:	601f      	str	r7, [r3, #0]
    70b4:	2000      	movs	r0, #0
    70b6:	47b0      	blx	r6
    70b8:	e7e2      	b.n	7080 <rtc_nrf_isr+0x8>
    70ba:	601e      	str	r6, [r3, #0]
}
    70bc:	e7e3      	b.n	7086 <rtc_nrf_isr+0xe>
    70be:	bf00      	nop
    70c0:	40011000 	.word	0x40011000
    70c4:	2000d650 	.word	0x2000d650

000070c8 <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    70c8:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    70ca:	4c0f      	ldr	r4, [pc, #60]	; (7108 <z_clock_driver_init+0x40>)
    70cc:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    70ce:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    70d2:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    70d6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    70da:	4b0c      	ldr	r3, [pc, #48]	; (710c <z_clock_driver_init+0x44>)
    70dc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    70e0:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    70e4:	2101      	movs	r1, #1
    70e6:	462a      	mov	r2, r5
    70e8:	2011      	movs	r0, #17
    70ea:	f000 faaf 	bl	764c <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    70ee:	2011      	movs	r0, #17
    70f0:	f000 fa7a 	bl	75e8 <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    70f4:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    70f6:	4a06      	ldr	r2, [pc, #24]	; (7110 <z_clock_driver_init+0x48>)
    70f8:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    70fa:	2002      	movs	r0, #2
    70fc:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    70fe:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    7100:	f7ff fee4 	bl	6ecc <z_nrf_clock_control_lf_on>

	return 0;
}
    7104:	4628      	mov	r0, r5
    7106:	bd38      	pop	{r3, r4, r5, pc}
    7108:	40011000 	.word	0x40011000
    710c:	e000e100 	.word	0xe000e100
    7110:	2000d658 	.word	0x2000d658

00007114 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7114:	4a13      	ldr	r2, [pc, #76]	; (7164 <z_clock_set_timeout+0x50>)
    7116:	f1b0 3fff 	cmp.w	r0, #4294967295
    711a:	bf14      	ite	ne
    711c:	4603      	movne	r3, r0
    711e:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7120:	3b01      	subs	r3, #1
    7122:	2b00      	cmp	r3, #0
    7124:	dd1c      	ble.n	7160 <z_clock_set_timeout+0x4c>
    7126:	4293      	cmp	r3, r2
    7128:	bfa8      	it	ge
    712a:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    712c:	4a0e      	ldr	r2, [pc, #56]	; (7168 <z_clock_set_timeout+0x54>)
    712e:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    7132:	4a0e      	ldr	r2, [pc, #56]	; (716c <z_clock_set_timeout+0x58>)
    7134:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    7136:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    7138:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    713c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    7140:	bf18      	it	ne
    7142:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    7144:	3201      	adds	r2, #1
    7146:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    7148:	4a09      	ldr	r2, [pc, #36]	; (7170 <z_clock_set_timeout+0x5c>)
    714a:	480a      	ldr	r0, [pc, #40]	; (7174 <z_clock_set_timeout+0x60>)
    714c:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    714e:	2000      	movs	r0, #0
    7150:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    7152:	4a04      	ldr	r2, [pc, #16]	; (7164 <z_clock_set_timeout+0x50>)
    7154:	4293      	cmp	r3, r2
    7156:	bf94      	ite	ls
    7158:	18c9      	addls	r1, r1, r3
    715a:	1889      	addhi	r1, r1, r2
    715c:	f7ff bf42 	b.w	6fe4 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7160:	2300      	movs	r3, #0
    7162:	e7e3      	b.n	712c <z_clock_set_timeout+0x18>
    7164:	007fffff 	.word	0x007fffff
    7168:	40011000 	.word	0x40011000
    716c:	2000d65c 	.word	0x2000d65c
    7170:	2000d650 	.word	0x2000d650
    7174:	00006fcd 	.word	0x00006fcd

00007178 <z_clock_elapsed>:
	__asm__ volatile(
    7178:	f04f 0220 	mov.w	r2, #32
    717c:	f3ef 8311 	mrs	r3, BASEPRI
    7180:	f382 8811 	msr	BASEPRI, r2
    7184:	f3bf 8f6f 	isb	sy
    7188:	4a06      	ldr	r2, [pc, #24]	; (71a4 <z_clock_elapsed+0x2c>)
    718a:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    718e:	4a06      	ldr	r2, [pc, #24]	; (71a8 <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    7190:	6812      	ldr	r2, [r2, #0]
    7192:	1a80      	subs	r0, r0, r2
    7194:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    7198:	f383 8811 	msr	BASEPRI, r3
    719c:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    71a0:	4770      	bx	lr
    71a2:	bf00      	nop
    71a4:	40011000 	.word	0x40011000
    71a8:	2000d65c 	.word	0x2000d65c

000071ac <z_timer_cycle_get_32>:
	__asm__ volatile(
    71ac:	f04f 0320 	mov.w	r3, #32
    71b0:	f3ef 8211 	mrs	r2, BASEPRI
    71b4:	f383 8811 	msr	BASEPRI, r3
    71b8:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    71bc:	4906      	ldr	r1, [pc, #24]	; (71d8 <z_timer_cycle_get_32+0x2c>)
    71be:	4b07      	ldr	r3, [pc, #28]	; (71dc <z_timer_cycle_get_32+0x30>)
    71c0:	6808      	ldr	r0, [r1, #0]
    71c2:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    71c6:	f382 8811 	msr	BASEPRI, r2
    71ca:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    71ce:	1a1b      	subs	r3, r3, r0
    71d0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    71d4:	4418      	add	r0, r3
    71d6:	4770      	bx	lr
    71d8:	2000d65c 	.word	0x2000d65c
    71dc:	40011000 	.word	0x40011000

000071e0 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    71e0:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    71e2:	4c11      	ldr	r4, [pc, #68]	; (7228 <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    71e4:	4a11      	ldr	r2, [pc, #68]	; (722c <_DoInit+0x4c>)
    71e6:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    71e8:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    71ea:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    71ee:	4b10      	ldr	r3, [pc, #64]	; (7230 <_DoInit+0x50>)
    71f0:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    71f2:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    71f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    71f8:	4a0e      	ldr	r2, [pc, #56]	; (7234 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    71fa:	490f      	ldr	r1, [pc, #60]	; (7238 <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    71fc:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    71fe:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    7200:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7202:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    7204:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    7206:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    7208:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    720a:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    720c:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    720e:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7210:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7212:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    7214:	f01d f81c 	bl	24250 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    7218:	4908      	ldr	r1, [pc, #32]	; (723c <_DoInit+0x5c>)
    721a:	4620      	mov	r0, r4
    721c:	f01d f818 	bl	24250 <strcpy>
  p->acID[6] = ' ';
    7220:	2320      	movs	r3, #32
    7222:	71a3      	strb	r3, [r4, #6]
}
    7224:	bd10      	pop	{r4, pc}
    7226:	bf00      	nop
    7228:	2000d660 	.word	0x2000d660
    722c:	0002b67b 	.word	0x0002b67b
    7230:	2000edab 	.word	0x2000edab
    7234:	2000ed9b 	.word	0x2000ed9b
    7238:	0002b684 	.word	0x0002b684
    723c:	0002b688 	.word	0x0002b688

00007240 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7240:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    7244:	4f23      	ldr	r7, [pc, #140]	; (72d4 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    7246:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    724a:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    724c:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7250:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    7252:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    7254:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    7256:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    7258:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    725a:	d834      	bhi.n	72c6 <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    725c:	f8d2 a020 	ldr.w	sl, [r2, #32]
    7260:	ebaa 0905 	sub.w	r9, sl, r5
    7264:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    7268:	4294      	cmp	r4, r2
    726a:	d811      	bhi.n	7290 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    726c:	f04f 0918 	mov.w	r9, #24
    7270:	fb06 9309 	mla	r3, r6, r9, r9
    7274:	443b      	add	r3, r7
    7276:	4622      	mov	r2, r4
    7278:	6858      	ldr	r0, [r3, #4]
    727a:	4641      	mov	r1, r8
    727c:	4428      	add	r0, r5
    727e:	f01d f841 	bl	24304 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    7282:	fb09 7606 	mla	r6, r9, r6, r7
    7286:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    7288:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    728a:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    728c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    7290:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    7292:	429c      	cmp	r4, r3
    7294:	d81b      	bhi.n	72ce <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    7296:	fb00 bb0b 	mla	fp, r0, fp, fp
    729a:	44bb      	add	fp, r7
    729c:	464a      	mov	r2, r9
    729e:	f8db 0004 	ldr.w	r0, [fp, #4]
    72a2:	442c      	add	r4, r5
    72a4:	4428      	add	r0, r5
    72a6:	f01d f82d 	bl	24304 <memcpy>
      if (NumBytes) {
    72aa:	ebb4 040a 	subs.w	r4, r4, sl
    72ae:	d006      	beq.n	72be <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    72b0:	f8db 0004 	ldr.w	r0, [fp, #4]
    72b4:	4622      	mov	r2, r4
    72b6:	eb08 0109 	add.w	r1, r8, r9
    72ba:	f01d f823 	bl	24304 <memcpy>
      pRing->WrOff = NumBytes;
    72be:	2018      	movs	r0, #24
    72c0:	fb00 7606 	mla	r6, r0, r6, r7
    72c4:	e7e0      	b.n	7288 <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    72c6:	3b01      	subs	r3, #1
    72c8:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    72ca:	42a3      	cmp	r3, r4
    72cc:	d2ce      	bcs.n	726c <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    72ce:	2000      	movs	r0, #0
    72d0:	e7dc      	b.n	728c <SEGGER_RTT_WriteSkipNoLock+0x4c>
    72d2:	bf00      	nop
    72d4:	2000d660 	.word	0x2000d660

000072d8 <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    72d8:	4b03      	ldr	r3, [pc, #12]	; (72e8 <SEGGER_RTT_HasDataUp+0x10>)
    72da:	2218      	movs	r2, #24
    72dc:	fb02 3300 	mla	r3, r2, r0, r3
    72e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    72e2:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    72e4:	1a80      	subs	r0, r0, r2
    72e6:	4770      	bx	lr
    72e8:	2000d660 	.word	0x2000d660

000072ec <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    72ec:	4b01      	ldr	r3, [pc, #4]	; (72f4 <uECC_get_rng+0x8>)
    72ee:	6818      	ldr	r0, [r3, #0]
    72f0:	4770      	bx	lr
    72f2:	bf00      	nop
    72f4:	200002c4 	.word	0x200002c4

000072f8 <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    72f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    72fa:	2208      	movs	r2, #8
{
    72fc:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    72fe:	f01b ffc9 	bl	23294 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    7302:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7304:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    7306:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    7308:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    730a:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    730c:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    730e:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7310:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    7312:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7314:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7316:	4613      	mov	r3, r2
    7318:	466a      	mov	r2, sp
{
    731a:	460c      	mov	r4, r1
    731c:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    731e:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7320:	4611      	mov	r1, r2
    7322:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    7324:	e9cd 7701 	strd	r7, r7, [sp, #4]
    7328:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    732a:	f01b fec0 	bl	230ae <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    732e:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7330:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7332:	4630      	mov	r0, r6
    7334:	f01b febb 	bl	230ae <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    7338:	6b21      	ldr	r1, [r4, #48]	; 0x30
    733a:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    733c:	6b61      	ldr	r1, [r4, #52]	; 0x34
    733e:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    7340:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    7342:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    7344:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7346:	4405      	add	r5, r0
	tmp[7] = 0;
    7348:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    734c:	4610      	mov	r0, r2
    734e:	4611      	mov	r1, r2
    7350:	f01b fead 	bl	230ae <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7354:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7356:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7358:	4630      	mov	r0, r6
    735a:	f01b fea8 	bl	230ae <uECC_vli_add>
    735e:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    7360:	6a20      	ldr	r0, [r4, #32]
    7362:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    7364:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7366:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    7368:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    736a:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    736c:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    736e:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    7370:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    7372:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7374:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    7376:	e9cd 7704 	strd	r7, r7, [sp, #16]
    737a:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    737c:	f01b fe97 	bl	230ae <uECC_vli_add>
    7380:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    7382:	6a60      	ldr	r0, [r4, #36]	; 0x24
    7384:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    7386:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    7388:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    738c:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    738e:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7390:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    7392:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    7396:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    7398:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    739c:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    739e:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    73a2:	6a20      	ldr	r0, [r4, #32]
    73a4:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    73a6:	4630      	mov	r0, r6
    73a8:	f01b fe81 	bl	230ae <uECC_vli_add>
    73ac:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    73ae:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    73b0:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    73b2:	6b20      	ldr	r0, [r4, #48]	; 0x30
    73b4:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    73b6:	6b60      	ldr	r0, [r4, #52]	; 0x34
    73b8:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    73ba:	6a20      	ldr	r0, [r4, #32]
    73bc:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    73be:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    73c0:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73c2:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    73c4:	e9cd 7704 	strd	r7, r7, [sp, #16]
    73c8:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73ca:	f01b ff99 	bl	23300 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    73ce:	6b23      	ldr	r3, [r4, #48]	; 0x30
    73d0:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    73d2:	6b63      	ldr	r3, [r4, #52]	; 0x34
    73d4:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    73d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    73d8:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    73da:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    73dc:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    73de:	6a63      	ldr	r3, [r4, #36]	; 0x24
    73e0:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    73e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    73e4:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73e6:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73e8:	2308      	movs	r3, #8
    73ea:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    73ec:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    73f0:	f01b ff86 	bl	23300 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    73f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
    73f6:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    73f8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    73fa:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    73fc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    73fe:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    7400:	6a23      	ldr	r3, [r4, #32]
    7402:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    7404:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7406:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    7408:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    740a:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    740e:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7410:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7412:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7414:	2308      	movs	r3, #8
    7416:	4630      	mov	r0, r6
    7418:	f01b ff72 	bl	23300 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    741c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    741e:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    7420:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    7422:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    7426:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7428:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    742a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    742c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    742e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    7430:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    7434:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7436:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7438:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    743a:	2308      	movs	r3, #8
    743c:	4630      	mov	r0, r6
    743e:	f01b ff5f 	bl	23300 <uECC_vli_sub>

	if (carry < 0) {
    7442:	1a2d      	subs	r5, r5, r0
    7444:	d410      	bmi.n	7468 <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    7446:	4c0d      	ldr	r4, [pc, #52]	; (747c <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    7448:	b935      	cbnz	r5, 7458 <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    744a:	2208      	movs	r2, #8
    744c:	4631      	mov	r1, r6
    744e:	4620      	mov	r0, r4
    7450:	f01b ff2c 	bl	232ac <uECC_vli_cmp_unsafe>
		while (carry || 
    7454:	2801      	cmp	r0, #1
    7456:	d00f      	beq.n	7478 <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7458:	2308      	movs	r3, #8
    745a:	4622      	mov	r2, r4
    745c:	4631      	mov	r1, r6
    745e:	4630      	mov	r0, r6
    7460:	f01b ff4e 	bl	23300 <uECC_vli_sub>
    7464:	1a2d      	subs	r5, r5, r0
    7466:	e7ef      	b.n	7448 <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    7468:	4a04      	ldr	r2, [pc, #16]	; (747c <vli_mmod_fast_secp256r1+0x184>)
    746a:	2308      	movs	r3, #8
    746c:	4631      	mov	r1, r6
    746e:	4630      	mov	r0, r6
    7470:	f01b fe1d 	bl	230ae <uECC_vli_add>
		while (carry < 0);
    7474:	182d      	adds	r5, r5, r0
    7476:	d4f8      	bmi.n	746a <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    7478:	b009      	add	sp, #36	; 0x24
    747a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    747c:	00027d08 	.word	0x00027d08

00007480 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    7480:	4904      	ldr	r1, [pc, #16]	; (7494 <sub_bytes+0x14>)
    7482:	1e43      	subs	r3, r0, #1
    7484:	300f      	adds	r0, #15
    7486:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    748a:	5c8a      	ldrb	r2, [r1, r2]
    748c:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    748e:	4283      	cmp	r3, r0
    7490:	d1f9      	bne.n	7486 <sub_bytes+0x6>
	}
}
    7492:	4770      	bx	lr
    7494:	0002b68f 	.word	0x0002b68f

00007498 <tc_aes128_set_encrypt_key>:
{
    7498:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    749a:	4e26      	ldr	r6, [pc, #152]	; (7534 <tc_aes128_set_encrypt_key+0x9c>)
{
    749c:	4607      	mov	r7, r0
    749e:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    74a0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    74a2:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    74a4:	ad01      	add	r5, sp, #4
    74a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    74a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    74aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    74ac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    74b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    74b4:	4638      	mov	r0, r7
    74b6:	2f00      	cmp	r7, #0
    74b8:	d038      	beq.n	752c <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    74ba:	2c00      	cmp	r4, #0
    74bc:	d038      	beq.n	7530 <tc_aes128_set_encrypt_key+0x98>
    74be:	1f38      	subs	r0, r7, #4
    74c0:	4621      	mov	r1, r4
    74c2:	4602      	mov	r2, r0
    74c4:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    74c6:	784b      	ldrb	r3, [r1, #1]
    74c8:	780d      	ldrb	r5, [r1, #0]
    74ca:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    74cc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    74d0:	78cd      	ldrb	r5, [r1, #3]
    74d2:	432b      	orrs	r3, r5
    74d4:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    74d6:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    74d8:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    74dc:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    74de:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    74e2:	d1f0      	bne.n	74c6 <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    74e4:	4c14      	ldr	r4, [pc, #80]	; (7538 <tc_aes128_set_encrypt_key+0xa0>)
    74e6:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    74e8:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    74ea:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    74ec:	d116      	bne.n	751c <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    74ee:	f3c3 4207 	ubfx	r2, r3, #16, #8
    74f2:	5ca5      	ldrb	r5, [r4, r2]
    74f4:	0e1a      	lsrs	r2, r3, #24
    74f6:	5ca2      	ldrb	r2, [r4, r2]
    74f8:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    74fc:	f3c3 2507 	ubfx	r5, r3, #8, #8
    7500:	b2db      	uxtb	r3, r3
    7502:	5d65      	ldrb	r5, [r4, r5]
    7504:	5ce3      	ldrb	r3, [r4, r3]
    7506:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    750a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    750e:	ad0c      	add	r5, sp, #48	; 0x30
    7510:	f021 0303 	bic.w	r3, r1, #3
    7514:	442b      	add	r3, r5
    7516:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    751a:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    751c:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    7520:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    7522:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    7524:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    7526:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    7528:	d1de      	bne.n	74e8 <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    752a:	2001      	movs	r0, #1
}
    752c:	b00d      	add	sp, #52	; 0x34
    752e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    7530:	4620      	mov	r0, r4
    7532:	e7fb      	b.n	752c <tc_aes128_set_encrypt_key+0x94>
    7534:	00027904 	.word	0x00027904
    7538:	0002b68f 	.word	0x0002b68f

0000753c <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    753c:	4a0a      	ldr	r2, [pc, #40]	; (7568 <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    753e:	490b      	ldr	r1, [pc, #44]	; (756c <arch_swap+0x30>)
	_current->arch.basepri = key;
    7540:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    7542:	6809      	ldr	r1, [r1, #0]
    7544:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7548:	4909      	ldr	r1, [pc, #36]	; (7570 <arch_swap+0x34>)
	_current->arch.basepri = key;
    754a:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    754c:	684b      	ldr	r3, [r1, #4]
    754e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7552:	604b      	str	r3, [r1, #4]
    7554:	2300      	movs	r3, #0
    7556:	f383 8811 	msr	BASEPRI, r3
    755a:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    755e:	6893      	ldr	r3, [r2, #8]
}
    7560:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    7564:	4770      	bx	lr
    7566:	bf00      	nop
    7568:	2000ed00 	.word	0x2000ed00
    756c:	0002916c 	.word	0x0002916c
    7570:	e000ed00 	.word	0xe000ed00

00007574 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    7574:	4912      	ldr	r1, [pc, #72]	; (75c0 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    7576:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    7578:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    757c:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    757e:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    7582:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    7586:	2020      	movs	r0, #32
    msr BASEPRI, r0
    7588:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    758c:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    7590:	4f0c      	ldr	r7, [pc, #48]	; (75c4 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    7592:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    7596:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    7598:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    759a:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    759c:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    759e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    75a0:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    75a2:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    75a6:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    75a8:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    75aa:	f000 fbe5 	bl	7d78 <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    75ae:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    75b2:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    75b6:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    75ba:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    75be:	4770      	bx	lr
    ldr r1, =_kernel
    75c0:	2000ed00 	.word	0x2000ed00
    ldr v4, =_SCS_ICSR
    75c4:	e000ed04 	.word	0xe000ed04

000075c8 <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    75c8:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    75cc:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    75ce:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    75d2:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    75d6:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    75d8:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    75dc:	2902      	cmp	r1, #2
    beq _oops
    75de:	d0ff      	beq.n	75e0 <_oops>

000075e0 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    75e0:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    75e2:	f01c fdb6 	bl	24152 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    75e6:	bd01      	pop	{r0, pc}

000075e8 <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    75e8:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    75ea:	2b00      	cmp	r3, #0
    75ec:	db08      	blt.n	7600 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    75ee:	2201      	movs	r2, #1
    75f0:	f000 001f 	and.w	r0, r0, #31
    75f4:	fa02 f000 	lsl.w	r0, r2, r0
    75f8:	095b      	lsrs	r3, r3, #5
    75fa:	4a02      	ldr	r2, [pc, #8]	; (7604 <arch_irq_enable+0x1c>)
    75fc:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    7600:	4770      	bx	lr
    7602:	bf00      	nop
    7604:	e000e100 	.word	0xe000e100

00007608 <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    7608:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    760a:	2b00      	cmp	r3, #0
    760c:	db0d      	blt.n	762a <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    760e:	2201      	movs	r2, #1
    7610:	095b      	lsrs	r3, r3, #5
    7612:	f000 001f 	and.w	r0, r0, #31
    7616:	fa02 f000 	lsl.w	r0, r2, r0
    761a:	3320      	adds	r3, #32
    761c:	4a03      	ldr	r2, [pc, #12]	; (762c <arch_irq_disable+0x24>)
    761e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7622:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7626:	f3bf 8f6f 	isb	sy
}
    762a:	4770      	bx	lr
    762c:	e000e100 	.word	0xe000e100

00007630 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    7630:	4b05      	ldr	r3, [pc, #20]	; (7648 <arch_irq_is_enabled+0x18>)
    7632:	0942      	lsrs	r2, r0, #5
    7634:	f000 001f 	and.w	r0, r0, #31
    7638:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    763c:	2301      	movs	r3, #1
    763e:	fa03 f000 	lsl.w	r0, r3, r0
}
    7642:	4010      	ands	r0, r2
    7644:	4770      	bx	lr
    7646:	bf00      	nop
    7648:	e000e100 	.word	0xe000e100

0000764c <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    764c:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    764e:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7650:	bfa8      	it	ge
    7652:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    7656:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    765a:	bfb8      	it	lt
    765c:	4b06      	ldrlt	r3, [pc, #24]	; (7678 <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    765e:	ea4f 1141 	mov.w	r1, r1, lsl #5
    7662:	bfac      	ite	ge
    7664:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7668:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    766c:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    766e:	bfb4      	ite	lt
    7670:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    7672:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    7676:	4770      	bx	lr
    7678:	e000ed14 	.word	0xe000ed14

0000767c <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    767c:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    767e:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    7680:	4b04      	ldr	r3, [pc, #16]	; (7694 <_arch_isr_direct_pm+0x18>)
    7682:	6a58      	ldr	r0, [r3, #36]	; 0x24
    7684:	b118      	cbz	r0, 768e <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    7686:	2200      	movs	r2, #0
    7688:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    768a:	f018 f845 	bl	1f718 <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    768e:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    7690:	bd08      	pop	{r3, pc}
    7692:	bf00      	nop
    7694:	2000ed00 	.word	0x2000ed00

00007698 <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    7698:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    769c:	9b00      	ldr	r3, [sp, #0]
    769e:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    76a2:	490a      	ldr	r1, [pc, #40]	; (76cc <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    76a4:	9b01      	ldr	r3, [sp, #4]
    76a6:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    76aa:	9b02      	ldr	r3, [sp, #8]
    76ac:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    76b0:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    76b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    76b8:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    76bc:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    76c0:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    76c2:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    76c4:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    76c6:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    76c8:	4770      	bx	lr
    76ca:	bf00      	nop
    76cc:	00021b95 	.word	0x00021b95

000076d0 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    76d0:	4a09      	ldr	r2, [pc, #36]	; (76f8 <z_check_thread_stack_fail+0x28>)
{
    76d2:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    76d4:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    76d6:	b170      	cbz	r0, 76f6 <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    76d8:	f113 0f16 	cmn.w	r3, #22
    76dc:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    76de:	d005      	beq.n	76ec <z_check_thread_stack_fail+0x1c>
    76e0:	f1a0 0220 	sub.w	r2, r0, #32
    76e4:	429a      	cmp	r2, r3
    76e6:	d805      	bhi.n	76f4 <z_check_thread_stack_fail+0x24>
    76e8:	4283      	cmp	r3, r0
    76ea:	d203      	bcs.n	76f4 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    76ec:	4281      	cmp	r1, r0
    76ee:	bf28      	it	cs
    76f0:	2000      	movcs	r0, #0
    76f2:	4770      	bx	lr
    76f4:	2000      	movs	r0, #0
}
    76f6:	4770      	bx	lr
    76f8:	2000ed00 	.word	0x2000ed00

000076fc <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    76fc:	b508      	push	{r3, lr}
    76fe:	4604      	mov	r4, r0
    7700:	460e      	mov	r6, r1
    7702:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    7704:	f000 fb2c 	bl	7d60 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    7708:	4b08      	ldr	r3, [pc, #32]	; (772c <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    770a:	4620      	mov	r0, r4
	_current = main_thread;
    770c:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    770e:	f000 fb33 	bl	7d78 <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    7712:	4628      	mov	r0, r5
    7714:	f386 8809 	msr	PSP, r6
    7718:	2100      	movs	r1, #0
    771a:	b663      	cpsie	if
    771c:	f381 8811 	msr	BASEPRI, r1
    7720:	f3bf 8f6f 	isb	sy
    7724:	2200      	movs	r2, #0
    7726:	2300      	movs	r3, #0
    7728:	f01a fa34 	bl	21b94 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    772c:	2000ed00 	.word	0x2000ed00

00007730 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7730:	4901      	ldr	r1, [pc, #4]	; (7738 <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    7732:	2210      	movs	r2, #16
	str	r2, [r1]
    7734:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    7736:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    7738:	e000ed10 	.word	0xe000ed10

0000773c <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    773c:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    773e:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    7740:	f380 8811 	msr	BASEPRI, r0
	isb
    7744:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    7748:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    774c:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    774e:	b662      	cpsie	i
	isb
    7750:	f3bf 8f6f 	isb	sy

	bx	lr
    7754:	4770      	bx	lr
    7756:	bf00      	nop

00007758 <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    7758:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    775a:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    775c:	f381 8811 	msr	BASEPRI, r1

	wfe
    7760:	bf20      	wfe

	msr	BASEPRI, r0
    7762:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    7766:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    7768:	4770      	bx	lr
    776a:	bf00      	nop

0000776c <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    776c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    776e:	4606      	mov	r6, r0

	if (esf != NULL) {
    7770:	460c      	mov	r4, r1
    7772:	b301      	cbz	r1, 77b6 <z_arm_fatal_error+0x4a>
    7774:	4b13      	ldr	r3, [pc, #76]	; (77c4 <z_arm_fatal_error+0x58>)
    7776:	4d14      	ldr	r5, [pc, #80]	; (77c8 <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    7778:	4814      	ldr	r0, [pc, #80]	; (77cc <z_arm_fatal_error+0x60>)
    777a:	1aed      	subs	r5, r5, r3
    777c:	08ed      	lsrs	r5, r5, #3
    777e:	01ad      	lsls	r5, r5, #6
    7780:	f045 0501 	orr.w	r5, r5, #1
    7784:	f8ad 5000 	strh.w	r5, [sp]
    7788:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    778c:	6809      	ldr	r1, [r1, #0]
    778e:	f01a fde7 	bl	22360 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    7792:	f8ad 5000 	strh.w	r5, [sp]
    7796:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    779a:	68e1      	ldr	r1, [r4, #12]
    779c:	480c      	ldr	r0, [pc, #48]	; (77d0 <z_arm_fatal_error+0x64>)
    779e:	f01a fddf 	bl	22360 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    77a2:	69e1      	ldr	r1, [r4, #28]
    77a4:	480b      	ldr	r0, [pc, #44]	; (77d4 <z_arm_fatal_error+0x68>)
    77a6:	462a      	mov	r2, r5
    77a8:	f01a fdad 	bl	22306 <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    77ac:	69a1      	ldr	r1, [r4, #24]
    77ae:	480a      	ldr	r0, [pc, #40]	; (77d8 <z_arm_fatal_error+0x6c>)
    77b0:	462a      	mov	r2, r5
    77b2:	f01a fda8 	bl	22306 <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    77b6:	4621      	mov	r1, r4
    77b8:	4630      	mov	r0, r6
}
    77ba:	b002      	add	sp, #8
    77bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    77c0:	f017 bf4c 	b.w	1f65c <z_fatal_error>
    77c4:	0002775c 	.word	0x0002775c
    77c8:	00027894 	.word	0x00027894
    77cc:	0002b78f 	.word	0x0002b78f
    77d0:	0002b7be 	.word	0x0002b7be
    77d4:	0002b7ed 	.word	0x0002b7ed
    77d8:	0002b7fc 	.word	0x0002b7fc

000077dc <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    77dc:	bf30      	wfi
    b z_SysNmiOnReset
    77de:	f7ff bffd 	b.w	77dc <z_SysNmiOnReset>
    77e2:	bf00      	nop

000077e4 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    77e4:	4a0e      	ldr	r2, [pc, #56]	; (7820 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    77e6:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    77e8:	4b0e      	ldr	r3, [pc, #56]	; (7824 <z_arm_prep_c+0x40>)
    77ea:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    77ee:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    77f0:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    77f4:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    77f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    77fc:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7800:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7804:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    7808:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    780c:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    7810:	f017 ffcc 	bl	1f7ac <z_bss_zero>
	z_data_copy();
    7814:	f018 ff1a 	bl	2064c <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    7818:	f000 fa74 	bl	7d04 <z_arm_interrupt_init>
	z_cstart();
    781c:	f017 ffea 	bl	1f7f4 <z_cstart>
    7820:	00000000 	.word	0x00000000
    7824:	e000ed00 	.word	0xe000ed00

00007828 <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    7828:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    782a:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    782c:	4a0b      	ldr	r2, [pc, #44]	; (785c <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    782e:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    7830:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    7832:	bf1e      	ittt	ne
	movne	r1, #0
    7834:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    7836:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    7838:	f017 ff6e 	blne	1f718 <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    783c:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    783e:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    7842:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    7846:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    784a:	4905      	ldr	r1, [pc, #20]	; (7860 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    784c:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    784e:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    7850:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    7852:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    7856:	4903      	ldr	r1, [pc, #12]	; (7864 <_isr_wrapper+0x3c>)
	bx r1
    7858:	4708      	bx	r1
    785a:	0000      	.short	0x0000
	ldr r2, =_kernel
    785c:	2000ed00 	.word	0x2000ed00
	ldr r1, =_sw_isr_table
    7860:	00027518 	.word	0x00027518
	ldr r1, =z_arm_int_exit
    7864:	00007ce9 	.word	0x00007ce9

00007868 <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    7868:	f01c fdac 	bl	243c4 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    786c:	2020      	movs	r0, #32
    msr BASEPRI, r0
    786e:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    7872:	4808      	ldr	r0, [pc, #32]	; (7894 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    7874:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    7878:	1840      	adds	r0, r0, r1
    msr PSP, r0
    787a:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    787e:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    7882:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    7884:	4308      	orrs	r0, r1
    msr CONTROL, r0
    7886:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    788a:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    788e:	f7ff ffa9 	bl	77e4 <z_arm_prep_c>
    7892:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    7894:	20011a40 	.word	0x20011a40

00007898 <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    7898:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    789c:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    78a0:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    78a2:	4672      	mov	r2, lr
	bl z_arm_fault
    78a4:	f000 f94e 	bl	7b44 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    78a8:	bd01      	pop	{r0, pc}
    78aa:	bf00      	nop

000078ac <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    78ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    78b0:	4b35      	ldr	r3, [pc, #212]	; (7988 <mem_manage_fault+0xdc>)
    78b2:	4c36      	ldr	r4, [pc, #216]	; (798c <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    78b4:	4d36      	ldr	r5, [pc, #216]	; (7990 <mem_manage_fault+0xe4>)
    78b6:	1ae4      	subs	r4, r4, r3
    78b8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    78ba:	01a4      	lsls	r4, r4, #6
    78bc:	f044 0901 	orr.w	r9, r4, #1
{
    78c0:	4607      	mov	r7, r0
    78c2:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    78c4:	4833      	ldr	r0, [pc, #204]	; (7994 <mem_manage_fault+0xe8>)
    78c6:	4649      	mov	r1, r9
{
    78c8:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    78ca:	f01a fd0f 	bl	222ec <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    78ce:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78d0:	06db      	lsls	r3, r3, #27
    78d2:	d503      	bpl.n	78dc <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    78d4:	4830      	ldr	r0, [pc, #192]	; (7998 <mem_manage_fault+0xec>)
    78d6:	4649      	mov	r1, r9
    78d8:	f01a fd08 	bl	222ec <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    78dc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78de:	0718      	lsls	r0, r3, #28
    78e0:	d504      	bpl.n	78ec <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    78e2:	482e      	ldr	r0, [pc, #184]	; (799c <mem_manage_fault+0xf0>)
    78e4:	f044 0101 	orr.w	r1, r4, #1
    78e8:	f01a fd00 	bl	222ec <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    78ec:	4d28      	ldr	r5, [pc, #160]	; (7990 <mem_manage_fault+0xe4>)
    78ee:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78f0:	0799      	lsls	r1, r3, #30
    78f2:	d423      	bmi.n	793c <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    78f4:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    78f8:	4d25      	ldr	r5, [pc, #148]	; (7990 <mem_manage_fault+0xe4>)
    78fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    78fc:	07db      	lsls	r3, r3, #31
    78fe:	d504      	bpl.n	790a <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    7900:	4827      	ldr	r0, [pc, #156]	; (79a0 <mem_manage_fault+0xf4>)
    7902:	f044 0101 	orr.w	r1, r4, #1
    7906:	f01a fcf1 	bl	222ec <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    790a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    790c:	0698      	lsls	r0, r3, #26
    790e:	d504      	bpl.n	791a <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    7910:	4824      	ldr	r0, [pc, #144]	; (79a4 <mem_manage_fault+0xf8>)
    7912:	f044 0101 	orr.w	r1, r4, #1
    7916:	f01a fce9 	bl	222ec <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    791a:	4b1d      	ldr	r3, [pc, #116]	; (7990 <mem_manage_fault+0xe4>)
    791c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    791e:	06d1      	lsls	r1, r2, #27
    7920:	d424      	bmi.n	796c <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    7922:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7924:	0792      	lsls	r2, r2, #30
    7926:	d421      	bmi.n	796c <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7928:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    792a:	4a19      	ldr	r2, [pc, #100]	; (7990 <mem_manage_fault+0xe4>)
    792c:	6a93      	ldr	r3, [r2, #40]	; 0x28
    792e:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7932:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    7934:	2300      	movs	r3, #0
    7936:	7033      	strb	r3, [r6, #0]

	return reason;
}
    7938:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    793c:	f044 0a01 	orr.w	sl, r4, #1
    7940:	4819      	ldr	r0, [pc, #100]	; (79a8 <mem_manage_fault+0xfc>)
    7942:	4651      	mov	r1, sl
    7944:	f01a fcd2 	bl	222ec <log_0>
		uint32_t temp = SCB->MMFAR;
    7948:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    794c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    794e:	061a      	lsls	r2, r3, #24
    7950:	d5d0      	bpl.n	78f4 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7952:	4816      	ldr	r0, [pc, #88]	; (79ac <mem_manage_fault+0x100>)
    7954:	4652      	mov	r2, sl
    7956:	4649      	mov	r1, r9
    7958:	f01a fcd5 	bl	22306 <log_1>
			if (from_hard_fault) {
    795c:	f1b8 0f00 	cmp.w	r8, #0
    7960:	d0ca      	beq.n	78f8 <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7962:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7964:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7968:	62ab      	str	r3, [r5, #40]	; 0x28
    796a:	e7c5      	b.n	78f8 <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    796c:	685b      	ldr	r3, [r3, #4]
    796e:	051b      	lsls	r3, r3, #20
    7970:	d5da      	bpl.n	7928 <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7972:	4639      	mov	r1, r7
    7974:	4648      	mov	r0, r9
    7976:	f7ff feab 	bl	76d0 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    797a:	2800      	cmp	r0, #0
    797c:	d0d4      	beq.n	7928 <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    797e:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7982:	2002      	movs	r0, #2
    7984:	e7d1      	b.n	792a <mem_manage_fault+0x7e>
    7986:	bf00      	nop
    7988:	0002775c 	.word	0x0002775c
    798c:	00027894 	.word	0x00027894
    7990:	e000ed00 	.word	0xe000ed00
    7994:	0002b82a 	.word	0x0002b82a
    7998:	0002b840 	.word	0x0002b840
    799c:	0002b873 	.word	0x0002b873
    79a0:	0002b8b4 	.word	0x0002b8b4
    79a4:	0002b8d3 	.word	0x0002b8d3
    79a8:	0002b886 	.word	0x0002b886
    79ac:	0002b89e 	.word	0x0002b89e

000079b0 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    79b0:	b570      	push	{r4, r5, r6, lr}
    79b2:	4b23      	ldr	r3, [pc, #140]	; (7a40 <usage_fault.constprop.0+0x90>)
    79b4:	4c23      	ldr	r4, [pc, #140]	; (7a44 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    79b6:	4d24      	ldr	r5, [pc, #144]	; (7a48 <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    79b8:	4824      	ldr	r0, [pc, #144]	; (7a4c <usage_fault.constprop.0+0x9c>)
    79ba:	1ae4      	subs	r4, r4, r3
    79bc:	08e4      	lsrs	r4, r4, #3
    79be:	01a4      	lsls	r4, r4, #6
    79c0:	f044 0601 	orr.w	r6, r4, #1
    79c4:	4631      	mov	r1, r6
    79c6:	f01a fc91 	bl	222ec <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    79ca:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79cc:	019b      	lsls	r3, r3, #6
    79ce:	d503      	bpl.n	79d8 <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    79d0:	481f      	ldr	r0, [pc, #124]	; (7a50 <usage_fault.constprop.0+0xa0>)
    79d2:	4631      	mov	r1, r6
    79d4:	f01a fc8a 	bl	222ec <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    79d8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79da:	01dd      	lsls	r5, r3, #7
    79dc:	d504      	bpl.n	79e8 <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    79de:	481d      	ldr	r0, [pc, #116]	; (7a54 <usage_fault.constprop.0+0xa4>)
    79e0:	f044 0101 	orr.w	r1, r4, #1
    79e4:	f01a fc82 	bl	222ec <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    79e8:	4d17      	ldr	r5, [pc, #92]	; (7a48 <usage_fault.constprop.0+0x98>)
    79ea:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79ec:	0318      	lsls	r0, r3, #12
    79ee:	d504      	bpl.n	79fa <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    79f0:	4819      	ldr	r0, [pc, #100]	; (7a58 <usage_fault.constprop.0+0xa8>)
    79f2:	f044 0101 	orr.w	r1, r4, #1
    79f6:	f01a fc79 	bl	222ec <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    79fa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    79fc:	0359      	lsls	r1, r3, #13
    79fe:	d504      	bpl.n	7a0a <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    7a00:	4816      	ldr	r0, [pc, #88]	; (7a5c <usage_fault.constprop.0+0xac>)
    7a02:	f044 0101 	orr.w	r1, r4, #1
    7a06:	f01a fc71 	bl	222ec <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7a0a:	4d0f      	ldr	r5, [pc, #60]	; (7a48 <usage_fault.constprop.0+0x98>)
    7a0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a0e:	039a      	lsls	r2, r3, #14
    7a10:	d504      	bpl.n	7a1c <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    7a12:	4813      	ldr	r0, [pc, #76]	; (7a60 <usage_fault.constprop.0+0xb0>)
    7a14:	f044 0101 	orr.w	r1, r4, #1
    7a18:	f01a fc68 	bl	222ec <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7a1c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a1e:	03db      	lsls	r3, r3, #15
    7a20:	d504      	bpl.n	7a2c <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    7a22:	4810      	ldr	r0, [pc, #64]	; (7a64 <usage_fault.constprop.0+0xb4>)
    7a24:	f044 0101 	orr.w	r1, r4, #1
    7a28:	f01a fc60 	bl	222ec <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7a2c:	4a06      	ldr	r2, [pc, #24]	; (7a48 <usage_fault.constprop.0+0x98>)
    7a2e:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7a30:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7a34:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    7a38:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    7a3a:	2000      	movs	r0, #0
    7a3c:	bd70      	pop	{r4, r5, r6, pc}
    7a3e:	bf00      	nop
    7a40:	0002775c 	.word	0x0002775c
    7a44:	00027894 	.word	0x00027894
    7a48:	e000ed00 	.word	0xe000ed00
    7a4c:	0002b902 	.word	0x0002b902
    7a50:	0002b91a 	.word	0x0002b91a
    7a54:	0002b92d 	.word	0x0002b92d
    7a58:	0002b947 	.word	0x0002b947
    7a5c:	0002b965 	.word	0x0002b965
    7a60:	0002b98a 	.word	0x0002b98a
    7a64:	0002b9a4 	.word	0x0002b9a4

00007a68 <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7a68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7a6c:	4b2a      	ldr	r3, [pc, #168]	; (7b18 <bus_fault.constprop.0+0xb0>)
    7a6e:	4c2b      	ldr	r4, [pc, #172]	; (7b1c <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7a70:	4d2b      	ldr	r5, [pc, #172]	; (7b20 <bus_fault.constprop.0+0xb8>)
    7a72:	1ae4      	subs	r4, r4, r3
    7a74:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    7a76:	01a4      	lsls	r4, r4, #6
    7a78:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7a7c:	4607      	mov	r7, r0
    7a7e:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7a80:	4828      	ldr	r0, [pc, #160]	; (7b24 <bus_fault.constprop.0+0xbc>)
    7a82:	4641      	mov	r1, r8
    7a84:	f01a fc32 	bl	222ec <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7a88:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a8a:	04d9      	lsls	r1, r3, #19
    7a8c:	d503      	bpl.n	7a96 <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    7a8e:	4826      	ldr	r0, [pc, #152]	; (7b28 <bus_fault.constprop.0+0xc0>)
    7a90:	4641      	mov	r1, r8
    7a92:	f01a fc2b 	bl	222ec <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    7a96:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a98:	051a      	lsls	r2, r3, #20
    7a9a:	d504      	bpl.n	7aa6 <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7a9c:	4823      	ldr	r0, [pc, #140]	; (7b2c <bus_fault.constprop.0+0xc4>)
    7a9e:	f044 0101 	orr.w	r1, r4, #1
    7aa2:	f01a fc23 	bl	222ec <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    7aa6:	4d1e      	ldr	r5, [pc, #120]	; (7b20 <bus_fault.constprop.0+0xb8>)
    7aa8:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7aaa:	059b      	lsls	r3, r3, #22
    7aac:	d512      	bpl.n	7ad4 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    7aae:	f044 0801 	orr.w	r8, r4, #1
    7ab2:	481f      	ldr	r0, [pc, #124]	; (7b30 <bus_fault.constprop.0+0xc8>)
    7ab4:	4641      	mov	r1, r8
    7ab6:	f01a fc19 	bl	222ec <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    7aba:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7abc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7abe:	0418      	lsls	r0, r3, #16
    7ac0:	d508      	bpl.n	7ad4 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    7ac2:	481c      	ldr	r0, [pc, #112]	; (7b34 <bus_fault.constprop.0+0xcc>)
    7ac4:	4642      	mov	r2, r8
    7ac6:	f01a fc1e 	bl	22306 <log_1>
			if (from_hard_fault) {
    7aca:	b11f      	cbz	r7, 7ad4 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7acc:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ace:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    7ad2:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    7ad4:	4d12      	ldr	r5, [pc, #72]	; (7b20 <bus_fault.constprop.0+0xb8>)
    7ad6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ad8:	0559      	lsls	r1, r3, #21
    7ada:	d504      	bpl.n	7ae6 <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    7adc:	4816      	ldr	r0, [pc, #88]	; (7b38 <bus_fault.constprop.0+0xd0>)
    7ade:	f044 0101 	orr.w	r1, r4, #1
    7ae2:	f01a fc03 	bl	222ec <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7ae6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ae8:	05da      	lsls	r2, r3, #23
    7aea:	d50d      	bpl.n	7b08 <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    7aec:	4813      	ldr	r0, [pc, #76]	; (7b3c <bus_fault.constprop.0+0xd4>)
    7aee:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7af2:	f01a fbfb 	bl	222ec <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7af6:	4a0a      	ldr	r2, [pc, #40]	; (7b20 <bus_fault.constprop.0+0xb8>)
    7af8:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7afa:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7afc:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7b00:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7b02:	7030      	strb	r0, [r6, #0]
}
    7b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7b08:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b0a:	049b      	lsls	r3, r3, #18
    7b0c:	d5f3      	bpl.n	7af6 <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7b0e:	480c      	ldr	r0, [pc, #48]	; (7b40 <bus_fault.constprop.0+0xd8>)
    7b10:	f044 0101 	orr.w	r1, r4, #1
    7b14:	e7ed      	b.n	7af2 <bus_fault.constprop.0+0x8a>
    7b16:	bf00      	nop
    7b18:	0002775c 	.word	0x0002775c
    7b1c:	00027894 	.word	0x00027894
    7b20:	e000ed00 	.word	0xe000ed00
    7b24:	0002b9cf 	.word	0x0002b9cf
    7b28:	0002b9e5 	.word	0x0002b9e5
    7b2c:	0002b873 	.word	0x0002b873
    7b30:	0002b9f6 	.word	0x0002b9f6
    7b34:	0002ba0f 	.word	0x0002ba0f
    7b38:	0002ba24 	.word	0x0002ba24
    7b3c:	0002ba3f 	.word	0x0002ba3f
    7b40:	0002b8d3 	.word	0x0002b8d3

00007b44 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7b44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7b48:	4b58      	ldr	r3, [pc, #352]	; (7cac <z_arm_fault+0x168>)
    7b4a:	685e      	ldr	r6, [r3, #4]
{
    7b4c:	b08b      	sub	sp, #44	; 0x2c
    7b4e:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7b50:	f3c6 0408 	ubfx	r4, r6, #0, #9
    7b54:	2500      	movs	r5, #0
    7b56:	f385 8811 	msr	BASEPRI, r5
    7b5a:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7b5e:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7b62:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    7b66:	d10d      	bne.n	7b84 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7b68:	f002 030c 	and.w	r3, r2, #12
    7b6c:	2b08      	cmp	r3, #8
    7b6e:	d10b      	bne.n	7b88 <z_arm_fault+0x44>
    7b70:	494f      	ldr	r1, [pc, #316]	; (7cb0 <z_arm_fault+0x16c>)
    7b72:	4b50      	ldr	r3, [pc, #320]	; (7cb4 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7b74:	4850      	ldr	r0, [pc, #320]	; (7cb8 <z_arm_fault+0x174>)
    7b76:	1ac9      	subs	r1, r1, r3
    7b78:	08c9      	lsrs	r1, r1, #3
    7b7a:	0189      	lsls	r1, r1, #6
    7b7c:	f041 0101 	orr.w	r1, r1, #1
    7b80:	f01a fbb4 	bl	222ec <log_0>
		return NULL;
    7b84:	462f      	mov	r7, r5
    7b86:	e003      	b.n	7b90 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7b88:	0712      	lsls	r2, r2, #28
    7b8a:	d401      	bmi.n	7b90 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    7b8c:	4607      	mov	r7, r0
			*nested_exc = true;
    7b8e:	2501      	movs	r5, #1
	*recoverable = false;
    7b90:	2300      	movs	r3, #0
    7b92:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    7b96:	1ee3      	subs	r3, r4, #3
    7b98:	2b09      	cmp	r3, #9
    7b9a:	d86e      	bhi.n	7c7a <z_arm_fault+0x136>
    7b9c:	e8df f003 	tbb	[pc, r3]
    7ba0:	40605c05 	.word	0x40605c05
    7ba4:	6d6d6d6d 	.word	0x6d6d6d6d
    7ba8:	646d      	.short	0x646d
    7baa:	4b42      	ldr	r3, [pc, #264]	; (7cb4 <z_arm_fault+0x170>)
    7bac:	4e40      	ldr	r6, [pc, #256]	; (7cb0 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7bae:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7cac <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    7bb2:	4842      	ldr	r0, [pc, #264]	; (7cbc <z_arm_fault+0x178>)
    7bb4:	1af6      	subs	r6, r6, r3
    7bb6:	08f6      	lsrs	r6, r6, #3
    7bb8:	01b6      	lsls	r6, r6, #6
    7bba:	f046 0601 	orr.w	r6, r6, #1
    7bbe:	4631      	mov	r1, r6
    7bc0:	f01a fb94 	bl	222ec <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7bc4:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    7bc8:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7bcc:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    7bd0:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7bd4:	d005      	beq.n	7be2 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    7bd6:	483a      	ldr	r0, [pc, #232]	; (7cc0 <z_arm_fault+0x17c>)
    7bd8:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    7bda:	f01a fb87 	bl	222ec <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7bde:	2400      	movs	r4, #0
}
    7be0:	e021      	b.n	7c26 <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7be2:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    7be6:	005b      	lsls	r3, r3, #1
    7be8:	d51d      	bpl.n	7c26 <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
    7bea:	4836      	ldr	r0, [pc, #216]	; (7cc4 <z_arm_fault+0x180>)
    7bec:	4631      	mov	r1, r6
    7bee:	f01a fb7d 	bl	222ec <log_0>
		if (SCB_MMFSR != 0) {
    7bf2:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    7bf6:	b133      	cbz	r3, 7c06 <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    7bf8:	f10d 0207 	add.w	r2, sp, #7
    7bfc:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7bfe:	4638      	mov	r0, r7
    7c00:	f7ff fe54 	bl	78ac <mem_manage_fault>
    7c04:	e00e      	b.n	7c24 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
    7c06:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    7c0a:	b12b      	cbz	r3, 7c18 <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    7c0c:	f10d 0107 	add.w	r1, sp, #7
    7c10:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7c12:	f7ff ff29 	bl	7a68 <bus_fault.constprop.0>
    7c16:	e005      	b.n	7c24 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    7c18:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    7c1c:	b29b      	uxth	r3, r3
    7c1e:	b113      	cbz	r3, 7c26 <z_arm_fault+0xe2>
			reason = usage_fault(esf);
    7c20:	f7ff fec6 	bl	79b0 <usage_fault.constprop.0>
    7c24:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7c26:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7c2a:	b993      	cbnz	r3, 7c52 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7c2c:	2220      	movs	r2, #32
    7c2e:	4639      	mov	r1, r7
    7c30:	a802      	add	r0, sp, #8
    7c32:	f01c fb67 	bl	24304 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7c36:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7c38:	b39d      	cbz	r5, 7ca2 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7c3a:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7c3e:	b922      	cbnz	r2, 7c4a <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7c40:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7c44:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7c48:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    7c4a:	a902      	add	r1, sp, #8
    7c4c:	4620      	mov	r0, r4
    7c4e:	f7ff fd8d 	bl	776c <z_arm_fatal_error>
}
    7c52:	b00b      	add	sp, #44	; 0x2c
    7c54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7c58:	f10d 0207 	add.w	r2, sp, #7
    7c5c:	2100      	movs	r1, #0
    7c5e:	e7ce      	b.n	7bfe <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    7c60:	f10d 0107 	add.w	r1, sp, #7
    7c64:	2000      	movs	r0, #0
    7c66:	e7d4      	b.n	7c12 <z_arm_fault+0xce>
    7c68:	4911      	ldr	r1, [pc, #68]	; (7cb0 <z_arm_fault+0x16c>)
    7c6a:	4b12      	ldr	r3, [pc, #72]	; (7cb4 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    7c6c:	4816      	ldr	r0, [pc, #88]	; (7cc8 <z_arm_fault+0x184>)
    7c6e:	1ac9      	subs	r1, r1, r3
    7c70:	08c9      	lsrs	r1, r1, #3
    7c72:	0189      	lsls	r1, r1, #6
    7c74:	f041 0101 	orr.w	r1, r1, #1
    7c78:	e7af      	b.n	7bda <z_arm_fault+0x96>
    7c7a:	4a0e      	ldr	r2, [pc, #56]	; (7cb4 <z_arm_fault+0x170>)
    7c7c:	4b0c      	ldr	r3, [pc, #48]	; (7cb0 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    7c7e:	4813      	ldr	r0, [pc, #76]	; (7ccc <z_arm_fault+0x188>)
    7c80:	4913      	ldr	r1, [pc, #76]	; (7cd0 <z_arm_fault+0x18c>)
    7c82:	1a9b      	subs	r3, r3, r2
    7c84:	08db      	lsrs	r3, r3, #3
    7c86:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    7c8a:	ea4f 1383 	mov.w	r3, r3, lsl #6
    7c8e:	bf18      	it	ne
    7c90:	4601      	movne	r1, r0
    7c92:	f043 0301 	orr.w	r3, r3, #1
    7c96:	480f      	ldr	r0, [pc, #60]	; (7cd4 <z_arm_fault+0x190>)
    7c98:	f1a4 0210 	sub.w	r2, r4, #16
    7c9c:	f01a fb47 	bl	2232e <log_2>
    7ca0:	e79d      	b.n	7bde <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7ca2:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7ca6:	f023 0301 	bic.w	r3, r3, #1
    7caa:	e7cd      	b.n	7c48 <z_arm_fault+0x104>
    7cac:	e000ed00 	.word	0xe000ed00
    7cb0:	00027894 	.word	0x00027894
    7cb4:	0002775c 	.word	0x0002775c
    7cb8:	0002ba57 	.word	0x0002ba57
    7cbc:	0002ba82 	.word	0x0002ba82
    7cc0:	0002ba99 	.word	0x0002ba99
    7cc4:	0002baba 	.word	0x0002baba
    7cc8:	0002bad9 	.word	0x0002bad9
    7ccc:	0002bb24 	.word	0x0002bb24
    7cd0:	0002bb0f 	.word	0x0002bb0f
    7cd4:	0002bb3d 	.word	0x0002bb3d

00007cd8 <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7cd8:	4a02      	ldr	r2, [pc, #8]	; (7ce4 <z_arm_fault_init+0xc>)
    7cda:	6953      	ldr	r3, [r2, #20]
    7cdc:	f043 0310 	orr.w	r3, r3, #16
    7ce0:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7ce2:	4770      	bx	lr
    7ce4:	e000ed00 	.word	0xe000ed00

00007ce8 <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7ce8:	4b04      	ldr	r3, [pc, #16]	; (7cfc <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7cea:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7cec:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    7cee:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7cf0:	d003      	beq.n	7cfa <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    7cf2:	4903      	ldr	r1, [pc, #12]	; (7d00 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7cf4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7cf8:	600a      	str	r2, [r1, #0]

00007cfa <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7cfa:	4770      	bx	lr
	ldr r3, =_kernel
    7cfc:	2000ed00 	.word	0x2000ed00
	ldr r1, =_SCS_ICSR
    7d00:	e000ed04 	.word	0xe000ed04

00007d04 <z_arm_interrupt_init>:
    7d04:	4804      	ldr	r0, [pc, #16]	; (7d18 <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7d06:	2300      	movs	r3, #0
    7d08:	2120      	movs	r1, #32
    7d0a:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7d0c:	3301      	adds	r3, #1
    7d0e:	2b30      	cmp	r3, #48	; 0x30
    7d10:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7d14:	d1f9      	bne.n	7d0a <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7d16:	4770      	bx	lr
    7d18:	e000e100 	.word	0xe000e100

00007d1c <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    7d1c:	b508      	push	{r3, lr}
	if (_current == thread) {
    7d1e:	4b0e      	ldr	r3, [pc, #56]	; (7d58 <z_impl_k_thread_abort+0x3c>)
    7d20:	689b      	ldr	r3, [r3, #8]
    7d22:	4283      	cmp	r3, r0
    7d24:	d107      	bne.n	7d36 <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7d26:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7d2a:	b193      	cbz	r3, 7d52 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7d2c:	4a0b      	ldr	r2, [pc, #44]	; (7d5c <z_impl_k_thread_abort+0x40>)
    7d2e:	6853      	ldr	r3, [r2, #4]
    7d30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7d34:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    7d36:	f018 f919 	bl	1ff6c <z_thread_single_abort>
	__asm__ volatile(
    7d3a:	f04f 0320 	mov.w	r3, #32
    7d3e:	f3ef 8011 	mrs	r0, BASEPRI
    7d42:	f383 8811 	msr	BASEPRI, r3
    7d46:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    7d4a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    7d4e:	f01f b832 	b.w	26db6 <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    7d52:	f018 fbf5 	bl	20540 <z_self_abort>
    7d56:	bf00      	nop
    7d58:	2000ed00 	.word	0x2000ed00
    7d5c:	e000ed00 	.word	0xe000ed00

00007d60 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7d60:	4b02      	ldr	r3, [pc, #8]	; (7d6c <z_arm_configure_static_mpu_regions+0xc>)
    7d62:	4a03      	ldr	r2, [pc, #12]	; (7d70 <z_arm_configure_static_mpu_regions+0x10>)
    7d64:	4803      	ldr	r0, [pc, #12]	; (7d74 <z_arm_configure_static_mpu_regions+0x14>)
    7d66:	2101      	movs	r1, #1
    7d68:	f000 b8bc 	b.w	7ee4 <arm_core_mpu_configure_static_mpu_regions>
    7d6c:	20040000 	.word	0x20040000
    7d70:	20000000 	.word	0x20000000
    7d74:	00027db4 	.word	0x00027db4

00007d78 <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    7d78:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    7d7a:	4b05      	ldr	r3, [pc, #20]	; (7d90 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    7d7c:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    7d7e:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7d80:	4a04      	ldr	r2, [pc, #16]	; (7d94 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    7d82:	2120      	movs	r1, #32
    7d84:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    7d88:	4618      	mov	r0, r3
    7d8a:	2101      	movs	r1, #1
    7d8c:	f000 b8b4 	b.w	7ef8 <arm_core_mpu_configure_dynamic_mpu_regions>
    7d90:	2000d708 	.word	0x2000d708
    7d94:	150b0000 	.word	0x150b0000

00007d98 <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    7d9a:	4f2a      	ldr	r7, [pc, #168]	; (7e44 <mpu_configure_regions+0xac>)
    7d9c:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7d9e:	2100      	movs	r1, #0
    7da0:	42b1      	cmp	r1, r6
    7da2:	da14      	bge.n	7dce <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    7da4:	6844      	ldr	r4, [r0, #4]
    7da6:	2c00      	cmp	r4, #0
    7da8:	d048      	beq.n	7e3c <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7daa:	b1c3      	cbz	r3, 7dde <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7dac:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7db0:	ea14 0f0c 	tst.w	r4, ip
    7db4:	d00d      	beq.n	7dd2 <mpu_configure_regions+0x3a>
    7db6:	4a24      	ldr	r2, [pc, #144]	; (7e48 <mpu_configure_regions+0xb0>)
    7db8:	4b24      	ldr	r3, [pc, #144]	; (7e4c <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7dba:	4825      	ldr	r0, [pc, #148]	; (7e50 <mpu_configure_regions+0xb8>)
    7dbc:	1ad2      	subs	r2, r2, r3
    7dbe:	08d2      	lsrs	r2, r2, #3
    7dc0:	0192      	lsls	r2, r2, #6
    7dc2:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7dc6:	f01a fa9e 	bl	22306 <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7dca:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7dce:	4610      	mov	r0, r2
    7dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    7dd2:	2c1f      	cmp	r4, #31
    7dd4:	d9ef      	bls.n	7db6 <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    7dd6:	6805      	ldr	r5, [r0, #0]
		&&
    7dd8:	ea1c 0f05 	tst.w	ip, r5
    7ddc:	d1eb      	bne.n	7db6 <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7dde:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7de0:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7de2:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    7de6:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    7de8:	d916      	bls.n	7e18 <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    7dea:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7dee:	d815      	bhi.n	7e1c <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7df0:	3c01      	subs	r4, #1
    7df2:	fab4 f484 	clz	r4, r4
    7df6:	f1c4 041f 	rsb	r4, r4, #31
    7dfa:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7dfc:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7dfe:	ea4c 0404 	orr.w	r4, ip, r4
    7e02:	d90d      	bls.n	7e20 <mpu_configure_regions+0x88>
    7e04:	4a10      	ldr	r2, [pc, #64]	; (7e48 <mpu_configure_regions+0xb0>)
    7e06:	4b11      	ldr	r3, [pc, #68]	; (7e4c <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7e08:	4812      	ldr	r0, [pc, #72]	; (7e54 <mpu_configure_regions+0xbc>)
    7e0a:	1ad2      	subs	r2, r2, r3
    7e0c:	08d2      	lsrs	r2, r2, #3
    7e0e:	0192      	lsls	r2, r2, #6
    7e10:	f042 0201 	orr.w	r2, r2, #1
    7e14:	4629      	mov	r1, r5
    7e16:	e7d6      	b.n	7dc6 <mpu_configure_regions+0x2e>
		return REGION_32B;
    7e18:	2408      	movs	r4, #8
    7e1a:	e7ef      	b.n	7dfc <mpu_configure_regions+0x64>
		return REGION_4G;
    7e1c:	243e      	movs	r4, #62	; 0x3e
    7e1e:	e7ed      	b.n	7dfc <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7e20:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7e24:	432a      	orrs	r2, r5
    7e26:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7e2a:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7e2e:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7e32:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7e36:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    7e3a:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    7e3c:	3101      	adds	r1, #1
    7e3e:	300c      	adds	r0, #12
    7e40:	e7ae      	b.n	7da0 <mpu_configure_regions+0x8>
    7e42:	bf00      	nop
    7e44:	e000ed00 	.word	0xe000ed00
    7e48:	00027884 	.word	0x00027884
    7e4c:	0002775c 	.word	0x0002775c
    7e50:	0002bb54 	.word	0x0002bb54
    7e54:	0002bb77 	.word	0x0002bb77

00007e58 <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7e58:	4b04      	ldr	r3, [pc, #16]	; (7e6c <arm_core_mpu_enable+0x14>)
    7e5a:	2205      	movs	r2, #5
    7e5c:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7e60:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7e64:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7e68:	4770      	bx	lr
    7e6a:	bf00      	nop
    7e6c:	e000ed00 	.word	0xe000ed00

00007e70 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7e70:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7e74:	4b02      	ldr	r3, [pc, #8]	; (7e80 <arm_core_mpu_disable+0x10>)
    7e76:	2200      	movs	r2, #0
    7e78:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7e7c:	4770      	bx	lr
    7e7e:	bf00      	nop
    7e80:	e000ed00 	.word	0xe000ed00

00007e84 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7e84:	4914      	ldr	r1, [pc, #80]	; (7ed8 <arm_mpu_init+0x54>)
    7e86:	6808      	ldr	r0, [r1, #0]
    7e88:	2808      	cmp	r0, #8
{
    7e8a:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7e8c:	d821      	bhi.n	7ed2 <arm_mpu_init+0x4e>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7e8e:	f7ff ffef 	bl	7e70 <arm_core_mpu_disable>
	MPU->RNR = index;
    7e92:	4c12      	ldr	r4, [pc, #72]	; (7edc <arm_mpu_init+0x58>)
    7e94:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7e96:	2200      	movs	r2, #0
    7e98:	4290      	cmp	r0, r2
    7e9a:	f101 010c 	add.w	r1, r1, #12
    7e9e:	d105      	bne.n	7eac <arm_mpu_init+0x28>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    7ea0:	4b0f      	ldr	r3, [pc, #60]	; (7ee0 <arm_mpu_init+0x5c>)
    7ea2:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    7ea4:	f7ff ffd8 	bl	7e58 <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    7ea8:	2000      	movs	r0, #0
}
    7eaa:	bd10      	pop	{r4, pc}
    7eac:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7eb0:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    7eb4:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    7eb8:	4313      	orrs	r3, r2
    7eba:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7ebe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7ec2:	f851 3c04 	ldr.w	r3, [r1, #-4]
    7ec6:	f043 0301 	orr.w	r3, r3, #1
    7eca:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7ece:	3201      	adds	r2, #1
    7ed0:	e7e2      	b.n	7e98 <arm_mpu_init+0x14>
		return -1;
    7ed2:	f04f 30ff 	mov.w	r0, #4294967295
    7ed6:	e7e8      	b.n	7eaa <arm_mpu_init+0x26>
    7ed8:	00027dc0 	.word	0x00027dc0
    7edc:	e000ed00 	.word	0xe000ed00
    7ee0:	2000f1ab 	.word	0x2000f1ab

00007ee4 <arm_core_mpu_configure_static_mpu_regions>:
{
    7ee4:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    7ee6:	4c03      	ldr	r4, [pc, #12]	; (7ef4 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    7ee8:	2301      	movs	r3, #1
    7eea:	7822      	ldrb	r2, [r4, #0]
    7eec:	f7ff ff54 	bl	7d98 <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    7ef0:	7020      	strb	r0, [r4, #0]
}
    7ef2:	bd10      	pop	{r4, pc}
    7ef4:	2000f1ab 	.word	0x2000f1ab

00007ef8 <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    7ef8:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    7efa:	4a09      	ldr	r2, [pc, #36]	; (7f20 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    7efc:	2300      	movs	r3, #0
    7efe:	7812      	ldrb	r2, [r2, #0]
    7f00:	f7ff ff4a 	bl	7d98 <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    7f04:	f110 0f16 	cmn.w	r0, #22
    7f08:	d003      	beq.n	7f12 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    7f0a:	4b06      	ldr	r3, [pc, #24]	; (7f24 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    7f0c:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    7f0e:	2807      	cmp	r0, #7
    7f10:	dd00      	ble.n	7f14 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    7f12:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    7f14:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    7f18:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    7f1c:	3001      	adds	r0, #1
    7f1e:	e7f6      	b.n	7f0e <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    7f20:	2000f1ab 	.word	0x2000f1ab
    7f24:	e000ed00 	.word	0xe000ed00

00007f28 <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    7f28:	4b01      	ldr	r3, [pc, #4]	; (7f30 <__stdout_hook_install+0x8>)
    7f2a:	6018      	str	r0, [r3, #0]
}
    7f2c:	4770      	bx	lr
    7f2e:	bf00      	nop
    7f30:	200002c8 	.word	0x200002c8

00007f34 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    7f34:	3902      	subs	r1, #2
    7f36:	2901      	cmp	r1, #1
    7f38:	d802      	bhi.n	7f40 <z_impl_zephyr_fputc+0xc>
    7f3a:	4b03      	ldr	r3, [pc, #12]	; (7f48 <z_impl_zephyr_fputc+0x14>)
    7f3c:	681b      	ldr	r3, [r3, #0]
    7f3e:	4718      	bx	r3
}
    7f40:	f04f 30ff 	mov.w	r0, #4294967295
    7f44:	4770      	bx	lr
    7f46:	bf00      	nop
    7f48:	200002c8 	.word	0x200002c8

00007f4c <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    7f4c:	b40e      	push	{r1, r2, r3}
    7f4e:	b50f      	push	{r0, r1, r2, r3, lr}
    7f50:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    7f52:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    7f56:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    7f5a:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    7f5c:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    7f5e:	4806      	ldr	r0, [pc, #24]	; (7f78 <sprintf+0x2c>)
	va_start(vargs, format);
    7f60:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    7f62:	a902      	add	r1, sp, #8
    7f64:	f7fc fb6c 	bl	4640 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    7f68:	9b02      	ldr	r3, [sp, #8]
    7f6a:	2200      	movs	r2, #0
    7f6c:	701a      	strb	r2, [r3, #0]
	return r;
}
    7f6e:	b004      	add	sp, #16
    7f70:	f85d eb04 	ldr.w	lr, [sp], #4
    7f74:	b003      	add	sp, #12
    7f76:	4770      	bx	lr
    7f78:	000243ab 	.word	0x000243ab

00007f7c <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    7f7c:	b40f      	push	{r0, r1, r2, r3}
    7f7e:	b507      	push	{r0, r1, r2, lr}
    7f80:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    7f82:	2102      	movs	r1, #2
{
    7f84:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    7f88:	4804      	ldr	r0, [pc, #16]	; (7f9c <printf+0x20>)
	va_start(vargs, format);
    7f8a:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    7f8c:	f7fc fb58 	bl	4640 <cbvprintf>
	va_end(vargs);

	return r;
}
    7f90:	b003      	add	sp, #12
    7f92:	f85d eb04 	ldr.w	lr, [sp], #4
    7f96:	b004      	add	sp, #16
    7f98:	4770      	bx	lr
    7f9a:	bf00      	nop
    7f9c:	000243a7 	.word	0x000243a7

00007fa0 <nordicsemi_nrf52_init>:
    7fa0:	f04f 0320 	mov.w	r3, #32
    7fa4:	f3ef 8211 	mrs	r2, BASEPRI
    7fa8:	f383 8811 	msr	BASEPRI, r3
    7fac:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    7fb0:	4906      	ldr	r1, [pc, #24]	; (7fcc <nordicsemi_nrf52_init+0x2c>)
    7fb2:	2301      	movs	r3, #1
    7fb4:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    7fb8:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    7fbc:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    7fc0:	f382 8811 	msr	BASEPRI, r2
    7fc4:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    7fc8:	2000      	movs	r0, #0
    7fca:	4770      	bx	lr
    7fcc:	4001e000 	.word	0x4001e000

00007fd0 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    7fd0:	b120      	cbz	r0, 7fdc <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    7fd2:	4b03      	ldr	r3, [pc, #12]	; (7fe0 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    7fd4:	0180      	lsls	r0, r0, #6
    7fd6:	f043 0301 	orr.w	r3, r3, #1
    7fda:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    7fdc:	4770      	bx	lr
    7fde:	bf00      	nop
    7fe0:	000279e0 	.word	0x000279e0

00007fe4 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    7fe4:	4b0e      	ldr	r3, [pc, #56]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    7fe6:	2940      	cmp	r1, #64	; 0x40
{
    7fe8:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    7fea:	bf28      	it	cs
    7fec:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    7fee:	4c0d      	ldr	r4, [pc, #52]	; (8024 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x24>)
    7ff0:	1846      	adds	r6, r0, r1
    7ff2:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    7ff4:	42b0      	cmp	r0, r6
    7ff6:	f103 0302 	add.w	r3, r3, #2
    7ffa:	d104      	bne.n	8006 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x6>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    7ffc:	2300      	movs	r3, #0
    7ffe:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    8002:	4807      	ldr	r0, [pc, #28]	; (8020 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x20>)
    8004:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    8006:	7802      	ldrb	r2, [r0, #0]
    8008:	0912      	lsrs	r2, r2, #4
    800a:	5ca2      	ldrb	r2, [r4, r2]
    800c:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    8010:	f810 2b01 	ldrb.w	r2, [r0], #1
    8014:	f002 020f 	and.w	r2, r2, #15
    8018:	5ca2      	ldrb	r2, [r4, r2]
    801a:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    801e:	e7e9      	b.n	7ff4 <bt_hex_real+0x10>
    8020:	2000f1ca 	.word	0x2000f1ca
    8024:	0002bbb0 	.word	0x0002bbb0

00008028 <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    8028:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    802a:	7803      	ldrb	r3, [r0, #0]
    802c:	b08b      	sub	sp, #44	; 0x2c
    802e:	4604      	mov	r4, r0
    8030:	ad07      	add	r5, sp, #28
    8032:	2b03      	cmp	r3, #3
    8034:	d821      	bhi.n	807a <bt_addr_le_str_real+0x52>
    8036:	e8df f003 	tbb	[pc, r3]
    803a:	1a02      	.short	0x1a02
    803c:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    803e:	4912      	ldr	r1, [pc, #72]	; (8088 <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    8040:	4628      	mov	r0, r5
    8042:	f01c f905 	bl	24250 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    8046:	7863      	ldrb	r3, [r4, #1]
    8048:	9304      	str	r3, [sp, #16]
    804a:	78a3      	ldrb	r3, [r4, #2]
    804c:	9303      	str	r3, [sp, #12]
    804e:	78e3      	ldrb	r3, [r4, #3]
    8050:	9302      	str	r3, [sp, #8]
    8052:	7923      	ldrb	r3, [r4, #4]
    8054:	9301      	str	r3, [sp, #4]
    8056:	7963      	ldrb	r3, [r4, #5]
    8058:	9300      	str	r3, [sp, #0]
    805a:	4a0c      	ldr	r2, [pc, #48]	; (808c <bt_addr_le_str_real+0x64>)
    805c:	79a3      	ldrb	r3, [r4, #6]
    805e:	9505      	str	r5, [sp, #20]
    8060:	211e      	movs	r1, #30
    8062:	480b      	ldr	r0, [pc, #44]	; (8090 <bt_addr_le_str_real+0x68>)
    8064:	f019 fcb9 	bl	219da <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    8068:	4809      	ldr	r0, [pc, #36]	; (8090 <bt_addr_le_str_real+0x68>)
    806a:	b00b      	add	sp, #44	; 0x2c
    806c:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    806e:	4909      	ldr	r1, [pc, #36]	; (8094 <bt_addr_le_str_real+0x6c>)
    8070:	e7e6      	b.n	8040 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    8072:	4909      	ldr	r1, [pc, #36]	; (8098 <bt_addr_le_str_real+0x70>)
    8074:	e7e4      	b.n	8040 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    8076:	4909      	ldr	r1, [pc, #36]	; (809c <bt_addr_le_str_real+0x74>)
    8078:	e7e2      	b.n	8040 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    807a:	4a09      	ldr	r2, [pc, #36]	; (80a0 <bt_addr_le_str_real+0x78>)
    807c:	210a      	movs	r1, #10
    807e:	4628      	mov	r0, r5
    8080:	f019 fcab 	bl	219da <snprintk>
		break;
    8084:	e7df      	b.n	8046 <bt_addr_le_str_real+0x1e>
    8086:	bf00      	nop
    8088:	00029232 	.word	0x00029232
    808c:	00029254 	.word	0x00029254
    8090:	2000f1ac 	.word	0x2000f1ac
    8094:	00029239 	.word	0x00029239
    8098:	00029240 	.word	0x00029240
    809c:	0002924a 	.word	0x0002924a
    80a0:	0002d2d5 	.word	0x0002d2d5

000080a4 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    80a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    80a8:	4b64      	ldr	r3, [pc, #400]	; (823c <ecc_thread+0x198>)
    80aa:	4d65      	ldr	r5, [pc, #404]	; (8240 <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    80ac:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8244 <ecc_thread+0x1a0>
	return z_impl_k_sem_take(sem, timeout);
    80b0:	f8df 9194 	ldr.w	r9, [pc, #404]	; 8248 <ecc_thread+0x1a4>
    80b4:	1aed      	subs	r5, r5, r3
    80b6:	08ed      	lsrs	r5, r5, #3
    80b8:	4647      	mov	r7, r8
    80ba:	f04f 32ff 	mov.w	r2, #4294967295
    80be:	f04f 33ff 	mov.w	r3, #4294967295
    80c2:	4648      	mov	r0, r9
    80c4:	f018 f942 	bl	2034c <z_impl_k_sem_take>
    80c8:	f3bf 8f5b 	dmb	ish
    80cc:	f8d8 4000 	ldr.w	r4, [r8]
    80d0:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    80d4:	f014 0401 	ands.w	r4, r4, #1
    80d8:	d05a      	beq.n	8190 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    80da:	f8df a170 	ldr.w	sl, [pc, #368]	; 824c <ecc_thread+0x1a8>
    80de:	4c5c      	ldr	r4, [pc, #368]	; (8250 <ecc_thread+0x1ac>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    80e0:	4e5c      	ldr	r6, [pc, #368]	; (8254 <ecc_thread+0x1b0>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    80e2:	485d      	ldr	r0, [pc, #372]	; (8258 <ecc_thread+0x1b4>)
    80e4:	4652      	mov	r2, sl
    80e6:	4621      	mov	r1, r4
    80e8:	f01a ff35 	bl	22f56 <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    80ec:	bbe8      	cbnz	r0, 816a <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    80ee:	01a9      	lsls	r1, r5, #6
    80f0:	485a      	ldr	r0, [pc, #360]	; (825c <ecc_thread+0x1b8>)
    80f2:	f041 0101 	orr.w	r1, r1, #1
    80f6:	f01a f8f9 	bl	222ec <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    80fa:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    80fe:	f04f 32ff 	mov.w	r2, #4294967295
    8102:	f04f 33ff 	mov.w	r3, #4294967295
    8106:	2001      	movs	r0, #1
    8108:	f000 fb1a 	bl	8740 <bt_buf_get_rx>
    810c:	f100 0608 	add.w	r6, r0, #8
    8110:	2102      	movs	r1, #2
    8112:	4604      	mov	r4, r0
    8114:	4630      	mov	r0, r6
    8116:	f01e f949 	bl	263ac <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    811a:	233e      	movs	r3, #62	; 0x3e
    811c:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    811e:	2342      	movs	r3, #66	; 0x42
    8120:	7043      	strb	r3, [r0, #1]
    8122:	2101      	movs	r1, #1
    8124:	4630      	mov	r0, r6
    8126:	f01e f941 	bl	263ac <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    812a:	2308      	movs	r3, #8
    812c:	7003      	strb	r3, [r0, #0]
    812e:	2141      	movs	r1, #65	; 0x41
    8130:	4630      	mov	r0, r6
    8132:	f01e f93b 	bl	263ac <net_buf_simple_add>
    8136:	4606      	mov	r6, r0
	evt->status = status;
    8138:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    813c:	f1ba 0f00 	cmp.w	sl, #0
    8140:	d01d      	beq.n	817e <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    8142:	2240      	movs	r2, #64	; 0x40
    8144:	2100      	movs	r1, #0
    8146:	f01c f908 	bl	2435a <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    814a:	f3bf 8f5b 	dmb	ish
    814e:	e857 3f00 	ldrex	r3, [r7]
    8152:	f023 0301 	bic.w	r3, r3, #1
    8156:	e847 3200 	strex	r2, r3, [r7]
    815a:	2a00      	cmp	r2, #0
    815c:	d1f7      	bne.n	814e <ecc_thread+0xaa>
    815e:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    8162:	4620      	mov	r0, r4
	bt_recv(buf);
    8164:	f002 f85a 	bl	a21c <bt_recv>
	while (true) {
    8168:	e7a7      	b.n	80ba <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    816a:	2220      	movs	r2, #32
    816c:	4631      	mov	r1, r6
    816e:	4620      	mov	r0, r4
    8170:	f01c f8b7 	bl	242e2 <memcmp>
    8174:	2800      	cmp	r0, #0
    8176:	d0b4      	beq.n	80e2 <ecc_thread+0x3e>
	return 0;
    8178:	f04f 0a00 	mov.w	sl, #0
    817c:	e7bf      	b.n	80fe <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    817e:	4936      	ldr	r1, [pc, #216]	; (8258 <ecc_thread+0x1b4>)
    8180:	f01c f9ab 	bl	244da <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    8184:	3120      	adds	r1, #32
    8186:	f106 0021 	add.w	r0, r6, #33	; 0x21
    818a:	f01c f9a6 	bl	244da <sys_memcpy_swap.constprop.0>
    818e:	e7dc      	b.n	814a <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8190:	f3bf 8f5b 	dmb	ish
    8194:	f8d8 3000 	ldr.w	r3, [r8]
    8198:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    819c:	079b      	lsls	r3, r3, #30
    819e:	d58c      	bpl.n	80ba <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    81a0:	492a      	ldr	r1, [pc, #168]	; (824c <ecc_thread+0x1a8>)
    81a2:	482d      	ldr	r0, [pc, #180]	; (8258 <ecc_thread+0x1b4>)
    81a4:	f01b fd9c 	bl	23ce0 <uECC_valid_public_key>
	if (ret < 0) {
    81a8:	1e01      	subs	r1, r0, #0
    81aa:	da38      	bge.n	821e <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    81ac:	01aa      	lsls	r2, r5, #6
    81ae:	482c      	ldr	r0, [pc, #176]	; (8260 <ecc_thread+0x1bc>)
    81b0:	f042 0201 	orr.w	r2, r2, #1
    81b4:	f01a f8a7 	bl	22306 <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    81b8:	f04f 32ff 	mov.w	r2, #4294967295
    81bc:	f04f 33ff 	mov.w	r3, #4294967295
    81c0:	2001      	movs	r0, #1
    81c2:	f000 fabd 	bl	8740 <bt_buf_get_rx>
    81c6:	f100 0a08 	add.w	sl, r0, #8
    81ca:	2102      	movs	r1, #2
    81cc:	4606      	mov	r6, r0
    81ce:	4650      	mov	r0, sl
    81d0:	f01e f8ec 	bl	263ac <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    81d4:	233e      	movs	r3, #62	; 0x3e
    81d6:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    81d8:	2322      	movs	r3, #34	; 0x22
    81da:	7043      	strb	r3, [r0, #1]
    81dc:	2101      	movs	r1, #1
    81de:	4650      	mov	r0, sl
    81e0:	f01e f8e4 	bl	263ac <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    81e4:	2309      	movs	r3, #9
    81e6:	7003      	strb	r3, [r0, #0]
    81e8:	2121      	movs	r1, #33	; 0x21
    81ea:	4650      	mov	r0, sl
    81ec:	f01e f8de 	bl	263ac <net_buf_simple_add>
    81f0:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    81f2:	3001      	adds	r0, #1
    81f4:	b9e4      	cbnz	r4, 8230 <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    81f6:	221f      	movs	r2, #31
    81f8:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    81fa:	21ff      	movs	r1, #255	; 0xff
    81fc:	2220      	movs	r2, #32
    81fe:	f01c f8ac 	bl	2435a <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8202:	f3bf 8f5b 	dmb	ish
    8206:	e857 3f00 	ldrex	r3, [r7]
    820a:	f023 0302 	bic.w	r3, r3, #2
    820e:	e847 3200 	strex	r2, r3, [r7]
    8212:	2a00      	cmp	r2, #0
    8214:	d1f7      	bne.n	8206 <ecc_thread+0x162>
    8216:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    821a:	4630      	mov	r0, r6
    821c:	e7a2      	b.n	8164 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    821e:	4a0e      	ldr	r2, [pc, #56]	; (8258 <ecc_thread+0x1b4>)
    8220:	4b0a      	ldr	r3, [pc, #40]	; (824c <ecc_thread+0x1a8>)
    8222:	f1a2 0120 	sub.w	r1, r2, #32
    8226:	4610      	mov	r0, r2
    8228:	f01a fee4 	bl	22ff4 <uECC_shared_secret>
    822c:	4604      	mov	r4, r0
    822e:	e7c3      	b.n	81b8 <ecc_thread+0x114>
		evt->status = 0U;
    8230:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    8232:	4909      	ldr	r1, [pc, #36]	; (8258 <ecc_thread+0x1b4>)
		evt->status = 0U;
    8234:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    8236:	f01c f950 	bl	244da <sys_memcpy_swap.constprop.0>
    823a:	e7e2      	b.n	8202 <ecc_thread+0x15e>
    823c:	0002775c 	.word	0x0002775c
    8240:	0002781c 	.word	0x0002781c
    8244:	2000d714 	.word	0x2000d714
    8248:	20009fc0 	.word	0x20009fc0
    824c:	00027de0 	.word	0x00027de0
    8250:	2000f24b 	.word	0x2000f24b
    8254:	0002bc24 	.word	0x0002bc24
    8258:	2000f26b 	.word	0x2000f26b
    825c:	0002bbc8 	.word	0x0002bbc8
    8260:	0002bbf1 	.word	0x0002bbf1

00008264 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    8264:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    8266:	7d05      	ldrb	r5, [r0, #20]
    8268:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    826a:	b9ad      	cbnz	r5, 8298 <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    826c:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    826e:	881a      	ldrh	r2, [r3, #0]
    8270:	f242 0125 	movw	r1, #8229	; 0x2025
    8274:	428a      	cmp	r2, r1
    8276:	d017      	beq.n	82a8 <bt_hci_ecc_send+0x44>
    8278:	f242 0126 	movw	r1, #8230	; 0x2026
    827c:	428a      	cmp	r2, r1
    827e:	d03c      	beq.n	82fa <bt_hci_ecc_send+0x96>
    8280:	f242 0101 	movw	r1, #8193	; 0x2001
    8284:	428a      	cmp	r2, r1
    8286:	d107      	bne.n	8298 <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    8288:	78da      	ldrb	r2, [r3, #3]
    828a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    828e:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    8290:	791a      	ldrb	r2, [r3, #4]
    8292:	f022 0201 	bic.w	r2, r2, #1
    8296:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    8298:	4b31      	ldr	r3, [pc, #196]	; (8360 <bt_hci_ecc_send+0xfc>)
    829a:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    829e:	4620      	mov	r0, r4
    82a0:	691b      	ldr	r3, [r3, #16]
}
    82a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    82a6:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    82a8:	2103      	movs	r1, #3
    82aa:	3008      	adds	r0, #8
    82ac:	f01e f89d 	bl	263ea <net_buf_simple_pull>
	net_buf_unref(buf);
    82b0:	4620      	mov	r0, r4
    82b2:	f015 f949 	bl	1d548 <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    82b6:	f3bf 8f5b 	dmb	ish
    82ba:	4b2a      	ldr	r3, [pc, #168]	; (8364 <bt_hci_ecc_send+0x100>)
    82bc:	681a      	ldr	r2, [r3, #0]
    82be:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    82c2:	0790      	lsls	r0, r2, #30
    82c4:	d507      	bpl.n	82d6 <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    82c6:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    82c8:	4629      	mov	r1, r5
    82ca:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    82ce:	f01c f8e0 	bl	24492 <send_cmd_status>
}
    82d2:	2000      	movs	r0, #0
    82d4:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    82d6:	f3bf 8f5b 	dmb	ish
    82da:	e853 2f00 	ldrex	r2, [r3]
    82de:	f042 0101 	orr.w	r1, r2, #1
    82e2:	e843 1000 	strex	r0, r1, [r3]
    82e6:	2800      	cmp	r0, #0
    82e8:	d1f7      	bne.n	82da <bt_hci_ecc_send+0x76>
    82ea:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    82ee:	07d1      	lsls	r1, r2, #31
    82f0:	d4e9      	bmi.n	82c6 <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    82f2:	481d      	ldr	r0, [pc, #116]	; (8368 <bt_hci_ecc_send+0x104>)
    82f4:	f018 f804 	bl	20300 <z_impl_k_sem_give>
}
    82f8:	e7e6      	b.n	82c8 <bt_hci_ecc_send+0x64>
    82fa:	2103      	movs	r1, #3
    82fc:	3008      	adds	r0, #8
    82fe:	f01e f874 	bl	263ea <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8302:	f3bf 8f5b 	dmb	ish
    8306:	4b17      	ldr	r3, [pc, #92]	; (8364 <bt_hci_ecc_send+0x100>)
    8308:	681a      	ldr	r2, [r3, #0]
    830a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    830e:	07d2      	lsls	r2, r2, #31
    8310:	d507      	bpl.n	8322 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    8312:	250c      	movs	r5, #12
	net_buf_unref(buf);
    8314:	4620      	mov	r0, r4
    8316:	f015 f917 	bl	1d548 <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    831a:	4629      	mov	r1, r5
    831c:	f242 0026 	movw	r0, #8230	; 0x2026
    8320:	e7d5      	b.n	82ce <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    8322:	89a2      	ldrh	r2, [r4, #12]
    8324:	2a3f      	cmp	r2, #63	; 0x3f
    8326:	d919      	bls.n	835c <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8328:	f3bf 8f5b 	dmb	ish
    832c:	e853 2f00 	ldrex	r2, [r3]
    8330:	f042 0102 	orr.w	r1, r2, #2
    8334:	e843 1000 	strex	r0, r1, [r3]
    8338:	2800      	cmp	r0, #0
    833a:	d1f7      	bne.n	832c <bt_hci_ecc_send+0xc8>
    833c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    8340:	0793      	lsls	r3, r2, #30
    8342:	d4e6      	bmi.n	8312 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    8344:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    8346:	4809      	ldr	r0, [pc, #36]	; (836c <bt_hci_ecc_send+0x108>)
    8348:	f01c f8c7 	bl	244da <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    834c:	4808      	ldr	r0, [pc, #32]	; (8370 <bt_hci_ecc_send+0x10c>)
    834e:	3120      	adds	r1, #32
    8350:	f01c f8c3 	bl	244da <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    8354:	4804      	ldr	r0, [pc, #16]	; (8368 <bt_hci_ecc_send+0x104>)
    8356:	f017 ffd3 	bl	20300 <z_impl_k_sem_give>
}
    835a:	e7db      	b.n	8314 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    835c:	2512      	movs	r5, #18
    835e:	e7d9      	b.n	8314 <bt_hci_ecc_send+0xb0>
    8360:	20000000 	.word	0x20000000
    8364:	2000d714 	.word	0x2000d714
    8368:	20009fc0 	.word	0x20009fc0
    836c:	2000f26b 	.word	0x2000f26b
    8370:	2000f28b 	.word	0x2000f28b

00008374 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    8374:	b510      	push	{r4, lr}
    8376:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    8378:	4c0c      	ldr	r4, [pc, #48]	; (83ac <bt_hci_ecc_init+0x38>)
    837a:	490d      	ldr	r1, [pc, #52]	; (83b0 <bt_hci_ecc_init+0x3c>)
    837c:	2200      	movs	r2, #0
    837e:	2300      	movs	r3, #0
    8380:	e9cd 2306 	strd	r2, r3, [sp, #24]
    8384:	2300      	movs	r3, #0
    8386:	220a      	movs	r2, #10
    8388:	e9cd 2303 	strd	r2, r3, [sp, #12]
    838c:	e9cd 3301 	strd	r3, r3, [sp, #4]
    8390:	9300      	str	r3, [sp, #0]
    8392:	f44f 628a 	mov.w	r2, #1104	; 0x450
    8396:	4b07      	ldr	r3, [pc, #28]	; (83b4 <bt_hci_ecc_init+0x40>)
    8398:	4620      	mov	r0, r4
    839a:	f018 f849 	bl	20430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    839e:	4906      	ldr	r1, [pc, #24]	; (83b8 <bt_hci_ecc_init+0x44>)
    83a0:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    83a2:	b008      	add	sp, #32
    83a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    83a8:	f01e bdf3 	b.w	26f92 <z_impl_k_thread_name_set>
    83ac:	2000a558 	.word	0x2000a558
    83b0:	20010300 	.word	0x20010300
    83b4:	000080a5 	.word	0x000080a5
    83b8:	0002bc12 	.word	0x0002bc12

000083bc <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    83bc:	b538      	push	{r3, r4, r5, lr}
    83be:	4b14      	ldr	r3, [pc, #80]	; (8410 <save_id+0x54>)
    83c0:	4c14      	ldr	r4, [pc, #80]	; (8414 <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    83c2:	4d15      	ldr	r5, [pc, #84]	; (8418 <save_id+0x5c>)
	BT_INFO("Saving ID");
    83c4:	4815      	ldr	r0, [pc, #84]	; (841c <save_id+0x60>)
    83c6:	1ae4      	subs	r4, r4, r3
    83c8:	08e4      	lsrs	r4, r4, #3
    83ca:	01a4      	lsls	r4, r4, #6
    83cc:	f044 0103 	orr.w	r1, r4, #3
    83d0:	f019 ff8c 	bl	222ec <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    83d4:	79ea      	ldrb	r2, [r5, #7]
    83d6:	4812      	ldr	r0, [pc, #72]	; (8420 <save_id+0x64>)
    83d8:	4629      	mov	r1, r5
    83da:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    83de:	f7fe f993 	bl	6708 <settings_save_one>
	if (err) {
    83e2:	4601      	mov	r1, r0
    83e4:	b120      	cbz	r0, 83f0 <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
    83e6:	480f      	ldr	r0, [pc, #60]	; (8424 <save_id+0x68>)
    83e8:	f044 0201 	orr.w	r2, r4, #1
    83ec:	f019 ff8b 	bl	22306 <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    83f0:	79ea      	ldrb	r2, [r5, #7]
    83f2:	490d      	ldr	r1, [pc, #52]	; (8428 <save_id+0x6c>)
    83f4:	480d      	ldr	r0, [pc, #52]	; (842c <save_id+0x70>)
    83f6:	0112      	lsls	r2, r2, #4
    83f8:	f7fe f986 	bl	6708 <settings_save_one>
	if (err) {
    83fc:	4601      	mov	r1, r0
    83fe:	b130      	cbz	r0, 840e <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
    8400:	f044 0201 	orr.w	r2, r4, #1
    8404:	480a      	ldr	r0, [pc, #40]	; (8430 <save_id+0x74>)
	}
#endif
}
    8406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    840a:	f019 bf7c 	b.w	22306 <log_1>
}
    840e:	bd38      	pop	{r3, r4, r5, pc}
    8410:	0002775c 	.word	0x0002775c
    8414:	0002783c 	.word	0x0002783c
    8418:	20000000 	.word	0x20000000
    841c:	0002bc44 	.word	0x0002bc44
    8420:	0002bc4e 	.word	0x0002bc4e
    8424:	0002bc54 	.word	0x0002bc54
    8428:	20000120 	.word	0x20000120
    842c:	0002bc6f 	.word	0x0002bc6f
    8430:	0002bc76 	.word	0x0002bc76

00008434 <set>:
{
    8434:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    8438:	4605      	mov	r5, r0
    843a:	4616      	mov	r6, r2
    843c:	461f      	mov	r7, r3
	if (!name) {
    843e:	b960      	cbnz	r0, 845a <set+0x26>
    8440:	4942      	ldr	r1, [pc, #264]	; (854c <set+0x118>)
    8442:	4b43      	ldr	r3, [pc, #268]	; (8550 <set+0x11c>)
		BT_ERR("Insufficient number of arguments");
    8444:	4843      	ldr	r0, [pc, #268]	; (8554 <set+0x120>)
    8446:	1ac9      	subs	r1, r1, r3
    8448:	08c9      	lsrs	r1, r1, #3
    844a:	0189      	lsls	r1, r1, #6
    844c:	f041 0101 	orr.w	r1, r1, #1
    8450:	f019 ff4c 	bl	222ec <log_0>
	return -ENOENT;
    8454:	f06f 0401 	mvn.w	r4, #1
    8458:	e01c      	b.n	8494 <set+0x60>
	len = settings_name_next(name, &next);
    845a:	a901      	add	r1, sp, #4
    845c:	f01a fbfb 	bl	22c56 <settings_name_next>
	if (!strncmp(name, "id", len)) {
    8460:	493d      	ldr	r1, [pc, #244]	; (8558 <set+0x124>)
    8462:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    8464:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    8466:	4628      	mov	r0, r5
    8468:	f01b ff2a 	bl	242c0 <strncmp>
    846c:	4604      	mov	r4, r0
    846e:	bb90      	cbnz	r0, 84d6 <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8470:	f3bf 8f5b 	dmb	ish
    8474:	4d39      	ldr	r5, [pc, #228]	; (855c <set+0x128>)
    8476:	682b      	ldr	r3, [r5, #0]
    8478:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    847c:	075b      	lsls	r3, r3, #29
    847e:	d50d      	bpl.n	849c <set+0x68>
    8480:	4932      	ldr	r1, [pc, #200]	; (854c <set+0x118>)
    8482:	4b33      	ldr	r3, [pc, #204]	; (8550 <set+0x11c>)
			BT_WARN("Ignoring identities stored in flash");
    8484:	4836      	ldr	r0, [pc, #216]	; (8560 <set+0x12c>)
    8486:	1ac9      	subs	r1, r1, r3
    8488:	08c9      	lsrs	r1, r1, #3
    848a:	0189      	lsls	r1, r1, #6
    848c:	f041 0102 	orr.w	r1, r1, #2
    8490:	f019 ff2c 	bl	222ec <log_0>
}
    8494:	4620      	mov	r0, r4
    8496:	b002      	add	sp, #8
    8498:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    849c:	3d94      	subs	r5, #148	; 0x94
    849e:	2207      	movs	r2, #7
    84a0:	4629      	mov	r1, r5
    84a2:	4638      	mov	r0, r7
    84a4:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    84a6:	2806      	cmp	r0, #6
    84a8:	d810      	bhi.n	84cc <set+0x98>
    84aa:	4b29      	ldr	r3, [pc, #164]	; (8550 <set+0x11c>)
    84ac:	4927      	ldr	r1, [pc, #156]	; (854c <set+0x118>)
				BT_ERR("Invalid length ID address in storage");
    84ae:	482d      	ldr	r0, [pc, #180]	; (8564 <set+0x130>)
    84b0:	1ac9      	subs	r1, r1, r3
    84b2:	08c9      	lsrs	r1, r1, #3
    84b4:	0189      	lsls	r1, r1, #6
    84b6:	f041 0101 	orr.w	r1, r1, #1
    84ba:	f019 ff17 	bl	222ec <log_0>
			(void)memset(bt_dev.id_addr, 0,
    84be:	2207      	movs	r2, #7
    84c0:	4621      	mov	r1, r4
    84c2:	4628      	mov	r0, r5
    84c4:	f01b ff49 	bl	2435a <memset>
			bt_dev.id_count = 0U;
    84c8:	71ec      	strb	r4, [r5, #7]
    84ca:	e7e3      	b.n	8494 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    84cc:	2307      	movs	r3, #7
    84ce:	fbb0 f0f3 	udiv	r0, r0, r3
    84d2:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    84d4:	e7de      	b.n	8494 <set+0x60>
	if (!strncmp(name, "name", len)) {
    84d6:	4924      	ldr	r1, [pc, #144]	; (8568 <set+0x134>)
    84d8:	4642      	mov	r2, r8
    84da:	4628      	mov	r0, r5
    84dc:	f01b fef0 	bl	242c0 <strncmp>
    84e0:	4604      	mov	r4, r0
    84e2:	b9a8      	cbnz	r0, 8510 <set+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    84e4:	4921      	ldr	r1, [pc, #132]	; (856c <set+0x138>)
    84e6:	2241      	movs	r2, #65	; 0x41
    84e8:	4638      	mov	r0, r7
    84ea:	47b0      	blx	r6
		if (len < 0) {
    84ec:	1e01      	subs	r1, r0, #0
    84ee:	da0a      	bge.n	8506 <set+0xd2>
    84f0:	4b17      	ldr	r3, [pc, #92]	; (8550 <set+0x11c>)
    84f2:	4a16      	ldr	r2, [pc, #88]	; (854c <set+0x118>)
			BT_ERR("Failed to read device name from storage"
    84f4:	481e      	ldr	r0, [pc, #120]	; (8570 <set+0x13c>)
    84f6:	1ad2      	subs	r2, r2, r3
    84f8:	08d2      	lsrs	r2, r2, #3
    84fa:	0192      	lsls	r2, r2, #6
    84fc:	f042 0201 	orr.w	r2, r2, #1
    8500:	f019 ff01 	bl	22306 <log_1>
    8504:	e7c6      	b.n	8494 <set+0x60>
			bt_dev.name[len] = '\0';
    8506:	481b      	ldr	r0, [pc, #108]	; (8574 <set+0x140>)
    8508:	4408      	add	r0, r1
    850a:	f880 4160 	strb.w	r4, [r0, #352]	; 0x160
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    850e:	e7c1      	b.n	8494 <set+0x60>
	if (!strncmp(name, "irk", len)) {
    8510:	4919      	ldr	r1, [pc, #100]	; (8578 <set+0x144>)
    8512:	4642      	mov	r2, r8
    8514:	4628      	mov	r0, r5
    8516:	f01b fed3 	bl	242c0 <strncmp>
    851a:	4604      	mov	r4, r0
    851c:	2800      	cmp	r0, #0
    851e:	d199      	bne.n	8454 <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    8520:	4916      	ldr	r1, [pc, #88]	; (857c <set+0x148>)
    8522:	2210      	movs	r2, #16
    8524:	4638      	mov	r0, r7
    8526:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    8528:	280f      	cmp	r0, #15
    852a:	d8b3      	bhi.n	8494 <set+0x60>
    852c:	4b08      	ldr	r3, [pc, #32]	; (8550 <set+0x11c>)
    852e:	4907      	ldr	r1, [pc, #28]	; (854c <set+0x118>)
				BT_ERR("Invalid length IRK in storage");
    8530:	4813      	ldr	r0, [pc, #76]	; (8580 <set+0x14c>)
    8532:	1ac9      	subs	r1, r1, r3
    8534:	08c9      	lsrs	r1, r1, #3
    8536:	0189      	lsls	r1, r1, #6
    8538:	f041 0101 	orr.w	r1, r1, #1
    853c:	f019 fed6 	bl	222ec <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    8540:	2210      	movs	r2, #16
    8542:	4621      	mov	r1, r4
    8544:	480d      	ldr	r0, [pc, #52]	; (857c <set+0x148>)
    8546:	f01b ff08 	bl	2435a <memset>
    854a:	e7a3      	b.n	8494 <set+0x60>
    854c:	0002783c 	.word	0x0002783c
    8550:	0002775c 	.word	0x0002775c
    8554:	0002bc92 	.word	0x0002bc92
    8558:	00029247 	.word	0x00029247
    855c:	20000094 	.word	0x20000094
    8560:	0002bcb3 	.word	0x0002bcb3
    8564:	0002bcd7 	.word	0x0002bcd7
    8568:	0002c68a 	.word	0x0002c68a
    856c:	20000160 	.word	0x20000160
    8570:	0002bcfc 	.word	0x0002bcfc
    8574:	20000000 	.word	0x20000000
    8578:	0002bc72 	.word	0x0002bc72
    857c:	20000120 	.word	0x20000120
    8580:	0002bd2e 	.word	0x0002bd2e

00008584 <bt_settings_encode_key>:
{
    8584:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8588:	b088      	sub	sp, #32
		snprintk(path, path_size,
    858a:	799c      	ldrb	r4, [r3, #6]
{
    858c:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    8590:	795d      	ldrb	r5, [r3, #5]
    8592:	791e      	ldrb	r6, [r3, #4]
    8594:	78df      	ldrb	r7, [r3, #3]
    8596:	f893 c002 	ldrb.w	ip, [r3, #2]
    859a:	f893 e001 	ldrb.w	lr, [r3, #1]
    859e:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    85a0:	f1b8 0f00 	cmp.w	r8, #0
    85a4:	d00e      	beq.n	85c4 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    85a6:	e9cd 3806 	strd	r3, r8, [sp, #24]
    85aa:	e9cd ce04 	strd	ip, lr, [sp, #16]
    85ae:	4613      	mov	r3, r2
    85b0:	e9cd 6702 	strd	r6, r7, [sp, #8]
    85b4:	e9cd 4500 	strd	r4, r5, [sp]
    85b8:	4a08      	ldr	r2, [pc, #32]	; (85dc <bt_settings_encode_key+0x58>)
    85ba:	f019 fa0e 	bl	219da <snprintk>
}
    85be:	b008      	add	sp, #32
    85c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    85c4:	e9cd e305 	strd	lr, r3, [sp, #20]
    85c8:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    85cc:	4613      	mov	r3, r2
    85ce:	e9cd 5601 	strd	r5, r6, [sp, #4]
    85d2:	4a03      	ldr	r2, [pc, #12]	; (85e0 <bt_settings_encode_key+0x5c>)
    85d4:	9400      	str	r4, [sp, #0]
    85d6:	f019 fa00 	bl	219da <snprintk>
}
    85da:	e7f0      	b.n	85be <bt_settings_encode_key+0x3a>
    85dc:	0002bd4c 	.word	0x0002bd4c
    85e0:	0002bd70 	.word	0x0002bd70

000085e4 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    85e4:	4909      	ldr	r1, [pc, #36]	; (860c <bt_settings_save_id+0x28>)
    85e6:	f3bf 8f5b 	dmb	ish
    85ea:	e851 3f00 	ldrex	r3, [r1]
    85ee:	f043 0201 	orr.w	r2, r3, #1
    85f2:	e841 2000 	strex	r0, r2, [r1]
    85f6:	2800      	cmp	r0, #0
    85f8:	d1f7      	bne.n	85ea <bt_settings_save_id+0x6>
    85fa:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    85fe:	07db      	lsls	r3, r3, #31
    8600:	d403      	bmi.n	860a <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    8602:	4803      	ldr	r0, [pc, #12]	; (8610 <bt_settings_save_id+0x2c>)
    8604:	3908      	subs	r1, #8
    8606:	f01e bb6c 	b.w	26ce2 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    860a:	4770      	bx	lr
    860c:	200002d4 	.word	0x200002d4
    8610:	2000aca0 	.word	0x2000aca0

00008614 <commit>:

static int commit(void)
{
    8614:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    8616:	4c1d      	ldr	r4, [pc, #116]	; (868c <commit+0x78>)
    8618:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
    861c:	b913      	cbnz	r3, 8624 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    861e:	481c      	ldr	r0, [pc, #112]	; (8690 <commit+0x7c>)
    8620:	f001 ffc4 	bl	a5ac <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    8624:	79e3      	ldrb	r3, [r4, #7]
    8626:	b99b      	cbnz	r3, 8650 <commit+0x3c>
		bt_setup_public_id_addr();
    8628:	f002 f87a 	bl	a720 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    862c:	79e3      	ldrb	r3, [r4, #7]
    862e:	b97b      	cbnz	r3, 8650 <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    8630:	f002 f95c 	bl	a8ec <bt_setup_random_id_addr>
		if (err) {
    8634:	4604      	mov	r4, r0
    8636:	b158      	cbz	r0, 8650 <commit+0x3c>
    8638:	4916      	ldr	r1, [pc, #88]	; (8694 <commit+0x80>)
    863a:	4b17      	ldr	r3, [pc, #92]	; (8698 <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    863c:	4817      	ldr	r0, [pc, #92]	; (869c <commit+0x88>)
    863e:	1ac9      	subs	r1, r1, r3
    8640:	08c9      	lsrs	r1, r1, #3
    8642:	0189      	lsls	r1, r1, #6
    8644:	f041 0101 	orr.w	r1, r1, #1
    8648:	f019 fe50 	bl	222ec <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    864c:	4620      	mov	r0, r4
    864e:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8650:	4d13      	ldr	r5, [pc, #76]	; (86a0 <commit+0x8c>)
    8652:	f3bf 8f5b 	dmb	ish
    8656:	682b      	ldr	r3, [r5, #0]
    8658:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    865c:	079b      	lsls	r3, r3, #30
    865e:	d401      	bmi.n	8664 <commit+0x50>
		bt_finalize_init();
    8660:	f001 feb2 	bl	a3c8 <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8664:	f3bf 8f5b 	dmb	ish
    8668:	e855 4f00 	ldrex	r4, [r5]
    866c:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    8670:	e845 3200 	strex	r2, r3, [r5]
    8674:	2a00      	cmp	r2, #0
    8676:	d1f7      	bne.n	8668 <commit+0x54>
    8678:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    867c:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    8680:	d0e4      	beq.n	864c <commit+0x38>
		bt_settings_save_id();
    8682:	f7ff ffaf 	bl	85e4 <bt_settings_save_id>
	return 0;
    8686:	2400      	movs	r4, #0
    8688:	e7e0      	b.n	864c <commit+0x38>
    868a:	bf00      	nop
    868c:	20000000 	.word	0x20000000
    8690:	0002bd91 	.word	0x0002bd91
    8694:	0002783c 	.word	0x0002783c
    8698:	0002775c 	.word	0x0002775c
    869c:	0002bda9 	.word	0x0002bda9
    86a0:	20000094 	.word	0x20000094

000086a4 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    86a4:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    86a6:	f7fe f993 	bl	69d0 <settings_subsys_init>
	if (err) {
    86aa:	4604      	mov	r4, r0
    86ac:	b150      	cbz	r0, 86c4 <bt_settings_init+0x20>
    86ae:	4a06      	ldr	r2, [pc, #24]	; (86c8 <bt_settings_init+0x24>)
    86b0:	4b06      	ldr	r3, [pc, #24]	; (86cc <bt_settings_init+0x28>)
    86b2:	1ad2      	subs	r2, r2, r3
    86b4:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    86b6:	0192      	lsls	r2, r2, #6
    86b8:	4601      	mov	r1, r0
    86ba:	f042 0201 	orr.w	r2, r2, #1
    86be:	4804      	ldr	r0, [pc, #16]	; (86d0 <bt_settings_init+0x2c>)
    86c0:	f019 fe21 	bl	22306 <log_1>
		return err;
	}

	return 0;
}
    86c4:	4620      	mov	r0, r4
    86c6:	bd10      	pop	{r4, pc}
    86c8:	0002783c 	.word	0x0002783c
    86cc:	0002775c 	.word	0x0002775c
    86d0:	0002bdcd 	.word	0x0002bdcd

000086d4 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    86d4:	b430      	push	{r4, r5}
    86d6:	4603      	mov	r3, r0
    86d8:	4608      	mov	r0, r1
	switch (src->type) {
    86da:	781a      	ldrb	r2, [r3, #0]
    86dc:	2a01      	cmp	r2, #1
    86de:	d013      	beq.n	8708 <uuid_to_uuid128+0x34>
    86e0:	2a02      	cmp	r2, #2
    86e2:	d026      	beq.n	8732 <uuid_to_uuid128+0x5e>
    86e4:	b972      	cbnz	r2, 8704 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    86e6:	4a15      	ldr	r2, [pc, #84]	; (873c <uuid_to_uuid128+0x68>)
    86e8:	f102 0410 	add.w	r4, r2, #16
    86ec:	f852 5b04 	ldr.w	r5, [r2], #4
    86f0:	f841 5b04 	str.w	r5, [r1], #4
    86f4:	42a2      	cmp	r2, r4
    86f6:	d1f9      	bne.n	86ec <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    86f8:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    86fa:	7812      	ldrb	r2, [r2, #0]
    86fc:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    86fe:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    8700:	0a1b      	lsrs	r3, r3, #8
    8702:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    8704:	bc30      	pop	{r4, r5}
    8706:	4770      	bx	lr
		*dst = uuid128_base;
    8708:	4a0c      	ldr	r2, [pc, #48]	; (873c <uuid_to_uuid128+0x68>)
    870a:	f102 0410 	add.w	r4, r2, #16
    870e:	f852 5b04 	ldr.w	r5, [r2], #4
    8712:	f841 5b04 	str.w	r5, [r1], #4
    8716:	42a2      	cmp	r2, r4
    8718:	d1f9      	bne.n	870e <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    871a:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    871c:	7812      	ldrb	r2, [r2, #0]
    871e:	700a      	strb	r2, [r1, #0]
    8720:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    8724:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    8726:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    8728:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    872a:	0a1b      	lsrs	r3, r3, #8
    872c:	7382      	strb	r2, [r0, #14]
    872e:	7403      	strb	r3, [r0, #16]
}
    8730:	e7e8      	b.n	8704 <uuid_to_uuid128+0x30>
}
    8732:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    8734:	2211      	movs	r2, #17
    8736:	4619      	mov	r1, r3
    8738:	f01b bde4 	b.w	24304 <memcpy>
    873c:	0002be01 	.word	0x0002be01

00008740 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    8740:	b538      	push	{r3, r4, r5, lr}
    8742:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    8744:	4805      	ldr	r0, [pc, #20]	; (875c <bt_buf_get_rx+0x1c>)
    8746:	f01d fddb 	bl	26300 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    874a:	4604      	mov	r4, r0
    874c:	b120      	cbz	r0, 8758 <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    874e:	2100      	movs	r1, #0
    8750:	3008      	adds	r0, #8
    8752:	f01d fdf4 	bl	2633e <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    8756:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    8758:	4620      	mov	r0, r4
    875a:	bd38      	pop	{r3, r4, r5, pc}
    875c:	2000a0f0 	.word	0x2000a0f0

00008760 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    8760:	b570      	push	{r4, r5, r6, lr}
    8762:	4602      	mov	r2, r0
    8764:	460b      	mov	r3, r1
	__asm__ volatile(
    8766:	f04f 0120 	mov.w	r1, #32
    876a:	f3ef 8511 	mrs	r5, BASEPRI
    876e:	f381 8811 	msr	BASEPRI, r1
    8772:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    8776:	480c      	ldr	r0, [pc, #48]	; (87a8 <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    8778:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    877a:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    877e:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    8782:	f385 8811 	msr	BASEPRI, r5
    8786:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    878a:	b924      	cbnz	r4, 8796 <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    878c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8790:	2001      	movs	r0, #1
    8792:	f7ff bfd5 	b.w	8740 <bt_buf_get_rx>
    8796:	2301      	movs	r3, #1
    8798:	f104 0008 	add.w	r0, r4, #8
    879c:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    879e:	81a1      	strh	r1, [r4, #12]
    87a0:	f01d fdcd 	bl	2633e <net_buf_simple_reserve>
}
    87a4:	4620      	mov	r0, r4
    87a6:	bd70      	pop	{r4, r5, r6, pc}
    87a8:	20000000 	.word	0x20000000

000087ac <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    87ac:	b570      	push	{r4, r5, r6, lr}
    87ae:	4604      	mov	r4, r0
	switch (evt) {
    87b0:	2c0f      	cmp	r4, #15
{
    87b2:	460d      	mov	r5, r1
    87b4:	4610      	mov	r0, r2
    87b6:	4619      	mov	r1, r3
	switch (evt) {
    87b8:	d805      	bhi.n	87c6 <bt_buf_get_evt+0x1a>
    87ba:	2c0d      	cmp	r4, #13
    87bc:	d912      	bls.n	87e4 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    87be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    87c2:	f7ff bfcd 	b.w	8760 <bt_buf_get_cmd_complete>
	switch (evt) {
    87c6:	2c13      	cmp	r4, #19
    87c8:	d10c      	bne.n	87e4 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    87ca:	480b      	ldr	r0, [pc, #44]	; (87f8 <bt_buf_get_evt+0x4c>)
    87cc:	f01d fd98 	bl	26300 <net_buf_alloc_fixed>
			if (buf) {
    87d0:	4604      	mov	r4, r0
    87d2:	b128      	cbz	r0, 87e0 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    87d4:	2100      	movs	r1, #0
    87d6:	3008      	adds	r0, #8
    87d8:	f01d fdb1 	bl	2633e <net_buf_simple_reserve>
    87dc:	2301      	movs	r3, #1
    87de:	7523      	strb	r3, [r4, #20]
}
    87e0:	4620      	mov	r0, r4
    87e2:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    87e4:	4602      	mov	r2, r0
    87e6:	460b      	mov	r3, r1
		if (discardable) {
    87e8:	b10d      	cbz	r5, 87ee <bt_buf_get_evt+0x42>
    87ea:	4804      	ldr	r0, [pc, #16]	; (87fc <bt_buf_get_evt+0x50>)
    87ec:	e7ee      	b.n	87cc <bt_buf_get_evt+0x20>
}
    87ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    87f2:	2001      	movs	r0, #1
    87f4:	f7ff bfa4 	b.w	8740 <bt_buf_get_rx>
    87f8:	2000a118 	.word	0x2000a118
    87fc:	2000a078 	.word	0x2000a078

00008800 <bt_adv_foreach>:
{
    8800:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    8802:	4801      	ldr	r0, [pc, #4]	; (8808 <bt_adv_foreach+0x8>)
    8804:	4718      	bx	r3
    8806:	bf00      	nop
    8808:	20000018 	.word	0x20000018

0000880c <le_dhkey_complete>:
	if (dh_key_cb) {
    880c:	4905      	ldr	r1, [pc, #20]	; (8824 <le_dhkey_complete+0x18>)
    880e:	680b      	ldr	r3, [r1, #0]
    8810:	b133      	cbz	r3, 8820 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    8812:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    8814:	2000      	movs	r0, #0
    8816:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    8818:	7811      	ldrb	r1, [r2, #0]
    881a:	b901      	cbnz	r1, 881e <le_dhkey_complete+0x12>
    881c:	1c50      	adds	r0, r2, #1
    881e:	4718      	bx	r3
}
    8820:	4770      	bx	lr
    8822:	bf00      	nop
    8824:	2000d730 	.word	0x2000d730

00008828 <ver_str>:
{
    8828:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    882a:	4d0b      	ldr	r5, [pc, #44]	; (8858 <ver_str+0x30>)
{
    882c:	4606      	mov	r6, r0
	const char * const str[] = {
    882e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    8830:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    8832:	466c      	mov	r4, sp
    8834:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    8836:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    8838:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    883a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    883e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    8842:	2e0b      	cmp	r6, #11
		return str[ver];
    8844:	bf9b      	ittet	ls
    8846:	ab0c      	addls	r3, sp, #48	; 0x30
    8848:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    884c:	4803      	ldrhi	r0, [pc, #12]	; (885c <ver_str+0x34>)
		return str[ver];
    884e:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    8852:	b00c      	add	sp, #48	; 0x30
    8854:	bd70      	pop	{r4, r5, r6, pc}
    8856:	bf00      	nop
    8858:	00027930 	.word	0x00027930
    885c:	0002bf04 	.word	0x0002bf04

00008860 <le_rpa_invalidate>:
{
    8860:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    8862:	4c08      	ldr	r4, [pc, #32]	; (8884 <le_rpa_invalidate+0x24>)
    8864:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    8868:	4620      	mov	r0, r4
    886a:	f01b fefb 	bl	24664 <atomic_and>
    886e:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    8872:	4620      	mov	r0, r4
    8874:	f01b fef6 	bl	24664 <atomic_and>
}
    8878:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_adv_foreach(adv_rpa_invalidate, NULL);
    887c:	4802      	ldr	r0, [pc, #8]	; (8888 <le_rpa_invalidate+0x28>)
    887e:	2100      	movs	r1, #0
    8880:	f7ff bfbe 	b.w	8800 <bt_adv_foreach>
    8884:	20000094 	.word	0x20000094
    8888:	0002474b 	.word	0x0002474b

0000888c <hci_data_buf_overflow>:
    888c:	4905      	ldr	r1, [pc, #20]	; (88a4 <hci_data_buf_overflow+0x18>)
    888e:	4a06      	ldr	r2, [pc, #24]	; (88a8 <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    8890:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    8892:	4806      	ldr	r0, [pc, #24]	; (88ac <hci_data_buf_overflow+0x20>)
    8894:	1a52      	subs	r2, r2, r1
    8896:	08d2      	lsrs	r2, r2, #3
    8898:	0192      	lsls	r2, r2, #6
    889a:	7819      	ldrb	r1, [r3, #0]
    889c:	f042 0202 	orr.w	r2, r2, #2
    88a0:	f019 bd31 	b.w	22306 <log_1>
    88a4:	0002775c 	.word	0x0002775c
    88a8:	00027814 	.word	0x00027814
    88ac:	0002bf0c 	.word	0x0002bf0c

000088b0 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    88b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    88b2:	4f0a      	ldr	r7, [pc, #40]	; (88dc <id_find+0x2c>)
{
    88b4:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    88b6:	2500      	movs	r5, #0
    88b8:	79fb      	ldrb	r3, [r7, #7]
    88ba:	b2ec      	uxtb	r4, r5
    88bc:	42a3      	cmp	r3, r4
    88be:	d802      	bhi.n	88c6 <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    88c0:	f06f 0401 	mvn.w	r4, #1
    88c4:	e008      	b.n	88d8 <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    88c6:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    88ca:	4439      	add	r1, r7
    88cc:	4630      	mov	r0, r6
    88ce:	f01b fede 	bl	2468e <bt_addr_le_cmp>
    88d2:	3501      	adds	r5, #1
    88d4:	2800      	cmp	r0, #0
    88d6:	d1ef      	bne.n	88b8 <id_find+0x8>
}
    88d8:	4620      	mov	r0, r4
    88da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    88dc:	20000000 	.word	0x20000000

000088e0 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    88e0:	6843      	ldr	r3, [r0, #4]
{
    88e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
    88e4:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    88e6:	0558      	lsls	r0, r3, #21
    88e8:	d502      	bpl.n	88f0 <valid_adv_param+0x10>
		return false;
    88ea:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    88ec:	b003      	add	sp, #12
    88ee:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    88f0:	6922      	ldr	r2, [r4, #16]
    88f2:	b12a      	cbz	r2, 8900 <valid_adv_param+0x20>
    88f4:	07d9      	lsls	r1, r3, #31
    88f6:	d5f8      	bpl.n	88ea <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    88f8:	f003 0324 	and.w	r3, r3, #36	; 0x24
    88fc:	2b24      	cmp	r3, #36	; 0x24
    88fe:	d0f4      	beq.n	88ea <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    8900:	4d1a      	ldr	r5, [pc, #104]	; (896c <valid_adv_param+0x8c>)
    8902:	7820      	ldrb	r0, [r4, #0]
    8904:	79eb      	ldrb	r3, [r5, #7]
    8906:	4283      	cmp	r3, r0
    8908:	d9ef      	bls.n	88ea <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    890a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    890e:	2300      	movs	r3, #0
    8910:	4669      	mov	r1, sp
    8912:	4428      	add	r0, r5
    8914:	9300      	str	r3, [sp, #0]
    8916:	f8cd 3003 	str.w	r3, [sp, #3]
    891a:	f01b feb8 	bl	2468e <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    891e:	2800      	cmp	r0, #0
    8920:	d0e3      	beq.n	88ea <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8922:	6860      	ldr	r0, [r4, #4]
    8924:	07c2      	lsls	r2, r0, #31
    8926:	d406      	bmi.n	8936 <valid_adv_param+0x56>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    8928:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    892c:	2b08      	cmp	r3, #8
    892e:	d802      	bhi.n	8936 <valid_adv_param+0x56>
    8930:	68a3      	ldr	r3, [r4, #8]
    8932:	2b9f      	cmp	r3, #159	; 0x9f
    8934:	d9d9      	bls.n	88ea <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    8936:	f010 0f30 	tst.w	r0, #48	; 0x30
    893a:	d002      	beq.n	8942 <valid_adv_param+0x62>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    893c:	6923      	ldr	r3, [r4, #16]
    893e:	2b00      	cmp	r3, #0
    8940:	d0d3      	beq.n	88ea <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    8942:	06c3      	lsls	r3, r0, #27
    8944:	d401      	bmi.n	894a <valid_adv_param+0x6a>
    8946:	6923      	ldr	r3, [r4, #16]
    8948:	b943      	cbnz	r3, 895c <valid_adv_param+0x7c>
		if (param->interval_min > param->interval_max ||
    894a:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    894e:	429a      	cmp	r2, r3
    8950:	d8cb      	bhi.n	88ea <valid_adv_param+0xa>
    8952:	2a1f      	cmp	r2, #31
    8954:	d9c9      	bls.n	88ea <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    8956:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    895a:	d8c6      	bhi.n	88ea <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    895c:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    8960:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8964:	bf18      	it	ne
    8966:	2001      	movne	r0, #1
    8968:	e7c0      	b.n	88ec <valid_adv_param+0xc>
    896a:	bf00      	nop
    896c:	20000000 	.word	0x20000000

00008970 <le_pkey_complete>:
{
    8970:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8972:	6885      	ldr	r5, [r0, #8]
    8974:	480f      	ldr	r0, [pc, #60]	; (89b4 <le_pkey_complete+0x44>)
    8976:	f06f 0110 	mvn.w	r1, #16
    897a:	f01b fe73 	bl	24664 <atomic_and>
	if (!evt->status) {
    897e:	782b      	ldrb	r3, [r5, #0]
    8980:	b943      	cbnz	r3, 8994 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    8982:	1c69      	adds	r1, r5, #1
    8984:	480c      	ldr	r0, [pc, #48]	; (89b8 <le_pkey_complete+0x48>)
    8986:	2240      	movs	r2, #64	; 0x40
    8988:	f01b fcbc 	bl	24304 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    898c:	4809      	ldr	r0, [pc, #36]	; (89b4 <le_pkey_complete+0x44>)
    898e:	2108      	movs	r1, #8
    8990:	f01b fe86 	bl	246a0 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8994:	4e09      	ldr	r6, [pc, #36]	; (89bc <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    8996:	4f08      	ldr	r7, [pc, #32]	; (89b8 <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8998:	6834      	ldr	r4, [r6, #0]
    899a:	b90c      	cbnz	r4, 89a0 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    899c:	6034      	str	r4, [r6, #0]
}
    899e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    89a0:	782a      	ldrb	r2, [r5, #0]
    89a2:	6823      	ldr	r3, [r4, #0]
    89a4:	2a00      	cmp	r2, #0
    89a6:	bf0c      	ite	eq
    89a8:	4638      	moveq	r0, r7
    89aa:	2000      	movne	r0, #0
    89ac:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    89ae:	6864      	ldr	r4, [r4, #4]
    89b0:	e7f3      	b.n	899a <le_pkey_complete+0x2a>
    89b2:	bf00      	nop
    89b4:	20000094 	.word	0x20000094
    89b8:	2000f2ab 	.word	0x2000f2ab
    89bc:	2000d734 	.word	0x2000d734

000089c0 <unpair>:
{
    89c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    89c4:	4606      	mov	r6, r0
    89c6:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
    89c8:	f002 fee6 	bl	b798 <bt_conn_lookup_addr_le>
	if (conn) {
    89cc:	4604      	mov	r4, r0
    89ce:	b9b0      	cbnz	r0, 89fe <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
    89d0:	4639      	mov	r1, r7
    89d2:	4630      	mov	r0, r6
    89d4:	f007 fc80 	bl	102d8 <bt_keys_find_addr>
		if (keys) {
    89d8:	4605      	mov	r5, r0
    89da:	b110      	cbz	r0, 89e2 <unpair+0x22>
			bt_keys_clear(keys);
    89dc:	4628      	mov	r0, r5
    89de:	f007 fc8b 	bl	102f8 <bt_keys_clear>
	bt_gatt_clear(id, addr);
    89e2:	4639      	mov	r1, r7
    89e4:	4630      	mov	r0, r6
    89e6:	f005 fcb9 	bl	e35c <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
    89ea:	4b10      	ldr	r3, [pc, #64]	; (8a2c <unpair+0x6c>)
    89ec:	681b      	ldr	r3, [r3, #0]
    89ee:	b1db      	cbz	r3, 8a28 <unpair+0x68>
    89f0:	6a1b      	ldr	r3, [r3, #32]
    89f2:	b1cb      	cbz	r3, 8a28 <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
    89f4:	4639      	mov	r1, r7
    89f6:	4630      	mov	r0, r6
}
    89f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
    89fc:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
    89fe:	7883      	ldrb	r3, [r0, #2]
    8a00:	2b01      	cmp	r3, #1
    8a02:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
    8a06:	bf04      	itt	eq
    8a08:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
    8a0c:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    8a10:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
    8a14:	bf18      	it	ne
    8a16:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    8a18:	f01c f8e7 	bl	24bea <bt_conn_disconnect>
		bt_conn_unref(conn);
    8a1c:	4620      	mov	r0, r4
    8a1e:	f01c f8a9 	bl	24b74 <bt_conn_unref>
		if (!keys) {
    8a22:	2d00      	cmp	r5, #0
    8a24:	d1da      	bne.n	89dc <unpair+0x1c>
    8a26:	e7d3      	b.n	89d0 <unpair+0x10>
}
    8a28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8a2c:	2000d73c 	.word	0x2000d73c

00008a30 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8a30:	6883      	ldr	r3, [r0, #8]
{
    8a32:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8a34:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    8a36:	4620      	mov	r0, r4
    8a38:	f002 fdba 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    8a3c:	b960      	cbnz	r0, 8a58 <le_data_len_change+0x28>
    8a3e:	4a08      	ldr	r2, [pc, #32]	; (8a60 <le_data_len_change+0x30>)
    8a40:	4b08      	ldr	r3, [pc, #32]	; (8a64 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8a42:	4809      	ldr	r0, [pc, #36]	; (8a68 <le_data_len_change+0x38>)
    8a44:	1ad2      	subs	r2, r2, r3
    8a46:	08d2      	lsrs	r2, r2, #3
    8a48:	0192      	lsls	r2, r2, #6
    8a4a:	4621      	mov	r1, r4
    8a4c:	f042 0201 	orr.w	r2, r2, #1
}
    8a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8a54:	f019 bc57 	b.w	22306 <log_1>
}
    8a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    8a5c:	f01c b88a 	b.w	24b74 <bt_conn_unref>
    8a60:	00027814 	.word	0x00027814
    8a64:	0002775c 	.word	0x0002775c
    8a68:	0002bf34 	.word	0x0002bf34

00008a6c <hci_disconn_complete_prio>:
{
    8a6c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8a6e:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    8a70:	781a      	ldrb	r2, [r3, #0]
    8a72:	b9da      	cbnz	r2, 8aac <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8a74:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8a78:	4628      	mov	r0, r5
    8a7a:	f002 fd99 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    8a7e:	4604      	mov	r4, r0
    8a80:	b960      	cbnz	r0, 8a9c <hci_disconn_complete_prio+0x30>
    8a82:	4b0b      	ldr	r3, [pc, #44]	; (8ab0 <hci_disconn_complete_prio+0x44>)
    8a84:	4a0b      	ldr	r2, [pc, #44]	; (8ab4 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8a86:	480c      	ldr	r0, [pc, #48]	; (8ab8 <hci_disconn_complete_prio+0x4c>)
    8a88:	1ad2      	subs	r2, r2, r3
    8a8a:	08d2      	lsrs	r2, r2, #3
    8a8c:	0192      	lsls	r2, r2, #6
    8a8e:	4629      	mov	r1, r5
    8a90:	f042 0201 	orr.w	r2, r2, #1
}
    8a94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8a98:	f019 bc35 	b.w	22306 <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    8a9c:	2101      	movs	r1, #1
    8a9e:	f002 fd8f 	bl	b5c0 <bt_conn_set_state>
	bt_conn_unref(conn);
    8aa2:	4620      	mov	r0, r4
}
    8aa4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8aa8:	f01c b864 	b.w	24b74 <bt_conn_unref>
}
    8aac:	bd38      	pop	{r3, r4, r5, pc}
    8aae:	bf00      	nop
    8ab0:	0002775c 	.word	0x0002775c
    8ab4:	00027814 	.word	0x00027814
    8ab8:	0002bf58 	.word	0x0002bf58

00008abc <hci_disconn_complete>:
{
    8abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8abe:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8ac0:	7835      	ldrb	r5, [r6, #0]
    8ac2:	b9f5      	cbnz	r5, 8b02 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8ac4:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8ac8:	4638      	mov	r0, r7
    8aca:	f002 fd71 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    8ace:	4604      	mov	r4, r0
    8ad0:	b960      	cbnz	r0, 8aec <hci_disconn_complete+0x30>
    8ad2:	4b0c      	ldr	r3, [pc, #48]	; (8b04 <hci_disconn_complete+0x48>)
    8ad4:	4a0c      	ldr	r2, [pc, #48]	; (8b08 <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8ad6:	480d      	ldr	r0, [pc, #52]	; (8b0c <hci_disconn_complete+0x50>)
    8ad8:	1ad2      	subs	r2, r2, r3
    8ada:	08d2      	lsrs	r2, r2, #3
    8adc:	0192      	lsls	r2, r2, #6
    8ade:	4639      	mov	r1, r7
    8ae0:	f042 0201 	orr.w	r2, r2, #1
}
    8ae4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8ae8:	f019 bc0d 	b.w	22306 <log_1>
	conn->err = evt->reason;
    8aec:	78f3      	ldrb	r3, [r6, #3]
    8aee:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8af0:	4629      	mov	r1, r5
    8af2:	f002 fd65 	bl	b5c0 <bt_conn_set_state>
	conn->handle = 0U;
    8af6:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    8af8:	4620      	mov	r0, r4
}
    8afa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8afe:	f01c b839 	b.w	24b74 <bt_conn_unref>
}
    8b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8b04:	0002775c 	.word	0x0002775c
    8b08:	00027814 	.word	0x00027814
    8b0c:	0002bf58 	.word	0x0002bf58

00008b10 <hci_hardware_error>:
{
    8b10:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    8b12:	2101      	movs	r1, #1
    8b14:	3008      	adds	r0, #8
    8b16:	f01d fc70 	bl	263fa <net_buf_simple_pull_mem>
    8b1a:	4b06      	ldr	r3, [pc, #24]	; (8b34 <hci_hardware_error+0x24>)
    8b1c:	4a06      	ldr	r2, [pc, #24]	; (8b38 <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8b1e:	7801      	ldrb	r1, [r0, #0]
    8b20:	4806      	ldr	r0, [pc, #24]	; (8b3c <hci_hardware_error+0x2c>)
    8b22:	1ad2      	subs	r2, r2, r3
    8b24:	08d2      	lsrs	r2, r2, #3
    8b26:	0192      	lsls	r2, r2, #6
}
    8b28:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8b2c:	f042 0201 	orr.w	r2, r2, #1
    8b30:	f019 bbe9 	b.w	22306 <log_1>
    8b34:	0002775c 	.word	0x0002775c
    8b38:	00027814 	.word	0x00027814
    8b3c:	0002bf7e 	.word	0x0002bf7e

00008b40 <hci_vendor_event>:
{
    8b40:	b510      	push	{r4, lr}
    8b42:	4a0a      	ldr	r2, [pc, #40]	; (8b6c <hci_vendor_event+0x2c>)
    8b44:	4c0a      	ldr	r4, [pc, #40]	; (8b70 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    8b46:	8981      	ldrh	r1, [r0, #12]
    8b48:	6880      	ldr	r0, [r0, #8]
    8b4a:	1aa4      	subs	r4, r4, r2
    8b4c:	f7ff fa4a 	bl	7fe4 <bt_hex_real>
    8b50:	f7fc fcd6 	bl	5500 <log_strdup>
    8b54:	08e4      	lsrs	r4, r4, #3
    8b56:	01a4      	lsls	r4, r4, #6
    8b58:	f044 0402 	orr.w	r4, r4, #2
    8b5c:	4601      	mov	r1, r0
    8b5e:	4622      	mov	r2, r4
    8b60:	4804      	ldr	r0, [pc, #16]	; (8b74 <hci_vendor_event+0x34>)
}
    8b62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    8b66:	f019 bbce 	b.w	22306 <log_1>
    8b6a:	bf00      	nop
    8b6c:	0002775c 	.word	0x0002775c
    8b70:	00027814 	.word	0x00027814
    8b74:	0002bfa0 	.word	0x0002bfa0

00008b78 <le_conn_update_complete>:
{
    8b78:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    8b7a:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8b7c:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8b80:	4630      	mov	r0, r6
    8b82:	f002 fd15 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    8b86:	4604      	mov	r4, r0
    8b88:	b968      	cbnz	r0, 8ba6 <le_conn_update_complete+0x2e>
    8b8a:	4b25      	ldr	r3, [pc, #148]	; (8c20 <le_conn_update_complete+0xa8>)
    8b8c:	4a25      	ldr	r2, [pc, #148]	; (8c24 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8b8e:	4826      	ldr	r0, [pc, #152]	; (8c28 <le_conn_update_complete+0xb0>)
    8b90:	1ad2      	subs	r2, r2, r3
    8b92:	08d2      	lsrs	r2, r2, #3
    8b94:	0192      	lsls	r2, r2, #6
    8b96:	f042 0201 	orr.w	r2, r2, #1
    8b9a:	4631      	mov	r1, r6
}
    8b9c:	b002      	add	sp, #8
    8b9e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8ba2:	f019 bbb0 	b.w	22306 <log_1>
	if (!evt->status) {
    8ba6:	782b      	ldrb	r3, [r5, #0]
    8ba8:	b9cb      	cbnz	r3, 8bde <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8baa:	792a      	ldrb	r2, [r5, #4]
    8bac:	78eb      	ldrb	r3, [r5, #3]
    8bae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8bb2:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8bb6:	79aa      	ldrb	r2, [r5, #6]
    8bb8:	796b      	ldrb	r3, [r5, #5]
    8bba:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8bbe:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8bc2:	79eb      	ldrb	r3, [r5, #7]
    8bc4:	7a2a      	ldrb	r2, [r5, #8]
    8bc6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8bca:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    8bce:	f002 fae1 	bl	b194 <notify_le_param_updated>
	bt_conn_unref(conn);
    8bd2:	4620      	mov	r0, r4
}
    8bd4:	b002      	add	sp, #8
    8bd6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8bda:	f01b bfcb 	b.w	24b74 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8bde:	2b1a      	cmp	r3, #26
    8be0:	d1f7      	bne.n	8bd2 <le_conn_update_complete+0x5a>
    8be2:	78c3      	ldrb	r3, [r0, #3]
    8be4:	2b01      	cmp	r3, #1
    8be6:	d1f4      	bne.n	8bd2 <le_conn_update_complete+0x5a>
		   !atomic_test_and_set_bit(conn->flags,
    8be8:	210a      	movs	r1, #10
    8bea:	3004      	adds	r0, #4
    8bec:	f01b fd67 	bl	246be <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    8bf0:	2800      	cmp	r0, #0
    8bf2:	d1ee      	bne.n	8bd2 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    8bf4:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    8bf8:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    8bfc:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    8c00:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    8c04:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    8c08:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    8c0c:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    8c0e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    8c12:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    8c16:	4620      	mov	r0, r4
    8c18:	f003 f922 	bl	be60 <bt_l2cap_update_conn_param>
    8c1c:	e7d9      	b.n	8bd2 <le_conn_update_complete+0x5a>
    8c1e:	bf00      	nop
    8c20:	0002775c 	.word	0x0002775c
    8c24:	00027814 	.word	0x00027814
    8c28:	0002bf34 	.word	0x0002bf34

00008c2c <id_create>:
{
    8c2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8c30:	4f28      	ldr	r7, [pc, #160]	; (8cd4 <id_create+0xa8>)
    8c32:	ebc0 08c0 	rsb	r8, r0, r0, lsl #3
{
    8c36:	b086      	sub	sp, #24
    8c38:	4605      	mov	r5, r0
    8c3a:	4614      	mov	r4, r2
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8c3c:	44b8      	add	r8, r7
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8c3e:	460e      	mov	r6, r1
    8c40:	b351      	cbz	r1, 8c98 <id_create+0x6c>
    8c42:	2300      	movs	r3, #0
    8c44:	4669      	mov	r1, sp
    8c46:	4630      	mov	r0, r6
    8c48:	9300      	str	r3, [sp, #0]
    8c4a:	f8cd 3003 	str.w	r3, [sp, #3]
    8c4e:	f01b fd1e 	bl	2468e <bt_addr_le_cmp>
    8c52:	b308      	cbz	r0, 8c98 <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    8c54:	4631      	mov	r1, r6
    8c56:	4640      	mov	r0, r8
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8c58:	f01b fd1f 	bl	2469a <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    8c5c:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
    8c5e:	3512      	adds	r5, #18
		uint8_t zero_irk[16] = { 0 };
    8c60:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8c64:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
    8c68:	eb07 1505 	add.w	r5, r7, r5, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
    8c6c:	b32c      	cbz	r4, 8cba <id_create+0x8e>
    8c6e:	2210      	movs	r2, #16
    8c70:	a902      	add	r1, sp, #8
    8c72:	4620      	mov	r0, r4
    8c74:	f01b fb35 	bl	242e2 <memcmp>
    8c78:	b1f8      	cbz	r0, 8cba <id_create+0x8e>
			memcpy(&bt_dev.irk[id], irk, 16);
    8c7a:	2210      	movs	r2, #16
    8c7c:	4621      	mov	r1, r4
    8c7e:	4628      	mov	r0, r5
				memcpy(irk, &bt_dev.irk[id], 16);
    8c80:	f01b fb40 	bl	24304 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8c84:	4814      	ldr	r0, [pc, #80]	; (8cd8 <id_create+0xac>)
    8c86:	f01b fcfc 	bl	24682 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    8c8a:	0783      	lsls	r3, r0, #30
    8c8c:	d51f      	bpl.n	8cce <id_create+0xa2>
}
    8c8e:	b006      	add	sp, #24
    8c90:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_settings_save_id();
    8c94:	f7ff bca6 	b.w	85e4 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    8c98:	a802      	add	r0, sp, #8
    8c9a:	f01b fc9c 	bl	245d6 <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8c9e:	a802      	add	r0, sp, #8
    8ca0:	f7ff fe06 	bl	88b0 <id_find>
    8ca4:	2800      	cmp	r0, #0
    8ca6:	daf7      	bge.n	8c98 <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8ca8:	a902      	add	r1, sp, #8
    8caa:	4640      	mov	r0, r8
    8cac:	f01b fcf5 	bl	2469a <bt_addr_le_copy>
		if (addr) {
    8cb0:	2e00      	cmp	r6, #0
    8cb2:	d0d3      	beq.n	8c5c <id_create+0x30>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8cb4:	4641      	mov	r1, r8
    8cb6:	4630      	mov	r0, r6
    8cb8:	e7ce      	b.n	8c58 <id_create+0x2c>
			bt_rand(&bt_dev.irk[id], 16);
    8cba:	2110      	movs	r1, #16
    8cbc:	4628      	mov	r0, r5
    8cbe:	f00a fb77 	bl	133b0 <bt_rand>
			if (irk) {
    8cc2:	2c00      	cmp	r4, #0
    8cc4:	d0de      	beq.n	8c84 <id_create+0x58>
				memcpy(irk, &bt_dev.irk[id], 16);
    8cc6:	2210      	movs	r2, #16
    8cc8:	4629      	mov	r1, r5
    8cca:	4620      	mov	r0, r4
    8ccc:	e7d8      	b.n	8c80 <id_create+0x54>
}
    8cce:	b006      	add	sp, #24
    8cd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8cd4:	20000000 	.word	0x20000000
    8cd8:	20000094 	.word	0x20000094

00008cdc <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    8cdc:	b5f0      	push	{r4, r5, r6, r7, lr}
    8cde:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    8ce0:	7803      	ldrb	r3, [r0, #0]
    8ce2:	f88d 3004 	strb.w	r3, [sp, #4]
{
    8ce6:	4605      	mov	r5, r0
	struct adv_id_check_data check_data = {
    8ce8:	2300      	movs	r3, #0
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    8cea:	4824      	ldr	r0, [pc, #144]	; (8d7c <le_adv_start_add_conn+0xa0>)
	struct adv_id_check_data check_data = {
    8cec:	f88d 3005 	strb.w	r3, [sp, #5]
{
    8cf0:	460f      	mov	r7, r1
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    8cf2:	a901      	add	r1, sp, #4
    8cf4:	f7ff fd84 	bl	8800 <bt_adv_foreach>
	if (check_data.adv_enabled) {
    8cf8:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8cfc:	bba3      	cbnz	r3, 8d68 <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    8cfe:	462e      	mov	r6, r5
    8d00:	4a1f      	ldr	r2, [pc, #124]	; (8d80 <le_adv_start_add_conn+0xa4>)
    8d02:	f816 1b09 	ldrb.w	r1, [r6], #9
    8d06:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    8d0a:	4630      	mov	r0, r6
    8d0c:	a902      	add	r1, sp, #8
    8d0e:	9302      	str	r3, [sp, #8]
    8d10:	f8cd 300b 	str.w	r3, [sp, #11]
    8d14:	f01b fcbb 	bl	2468e <bt_addr_le_cmp>
    8d18:	782a      	ldrb	r2, [r5, #0]
    8d1a:	4604      	mov	r4, r0
    8d1c:	b9b0      	cbnz	r0, 8d4c <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    8d1e:	4b19      	ldr	r3, [pc, #100]	; (8d84 <le_adv_start_add_conn+0xa8>)
    8d20:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8d22:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    8d24:	9004      	str	r0, [sp, #16]
    8d26:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    8d2a:	f8ad 1014 	strh.w	r1, [sp, #20]
    8d2e:	4610      	mov	r0, r2
    8d30:	a904      	add	r1, sp, #16
    8d32:	f88d 3016 	strb.w	r3, [sp, #22]
    8d36:	f002 fc0d 	bl	b554 <bt_conn_add_le>
		if (!conn) {
    8d3a:	4605      	mov	r5, r0
    8d3c:	b1d0      	cbz	r0, 8d74 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8d3e:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8d40:	f002 fc3e 	bl	b5c0 <bt_conn_set_state>
	*out_conn = conn;
    8d44:	603d      	str	r5, [r7, #0]
	return 0;
}
    8d46:	4620      	mov	r0, r4
    8d48:	b007      	add	sp, #28
    8d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    8d4c:	4631      	mov	r1, r6
    8d4e:	4610      	mov	r0, r2
    8d50:	f002 fd40 	bl	b7d4 <bt_conn_exists_le>
    8d54:	4604      	mov	r4, r0
    8d56:	b950      	cbnz	r0, 8d6e <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    8d58:	7828      	ldrb	r0, [r5, #0]
    8d5a:	4631      	mov	r1, r6
    8d5c:	f002 fbfa 	bl	b554 <bt_conn_add_le>
	if (!conn) {
    8d60:	4605      	mov	r5, r0
    8d62:	b138      	cbz	r0, 8d74 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8d64:	2105      	movs	r1, #5
    8d66:	e7eb      	b.n	8d40 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    8d68:	f06f 0422 	mvn.w	r4, #34	; 0x22
    8d6c:	e7eb      	b.n	8d46 <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    8d6e:	f06f 0415 	mvn.w	r4, #21
    8d72:	e7e8      	b.n	8d46 <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    8d74:	f06f 040b 	mvn.w	r4, #11
    8d78:	e7e5      	b.n	8d46 <le_adv_start_add_conn+0x6a>
    8d7a:	bf00      	nop
    8d7c:	00024721 	.word	0x00024721
    8d80:	20000000 	.word	0x20000000
    8d84:	00027930 	.word	0x00027930

00008d88 <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8d88:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8d8a:	4c0d      	ldr	r4, [pc, #52]	; (8dc0 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8d8c:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8d8e:	2205      	movs	r2, #5
    8d90:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    8d94:	f002 fd44 	bl	b820 <bt_conn_lookup_state_le>
		if (!conn) {
    8d98:	b978      	cbnz	r0, 8dba <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    8d9a:	4b0a      	ldr	r3, [pc, #40]	; (8dc4 <find_pending_connect.part.0+0x3c>)
    8d9c:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8d9e:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    8da0:	9000      	str	r0, [sp, #0]
    8da2:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    8da6:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8daa:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    8dae:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8db2:	2204      	movs	r2, #4
    8db4:	4669      	mov	r1, sp
    8db6:	f002 fd33 	bl	b820 <bt_conn_lookup_state_le>
}
    8dba:	b002      	add	sp, #8
    8dbc:	bd10      	pop	{r4, pc}
    8dbe:	bf00      	nop
    8dc0:	20000000 	.word	0x20000000
    8dc4:	00027930 	.word	0x00027930

00008dc8 <handle_event>:
{
    8dc8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8dca:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8dce:	4605      	mov	r5, r0
    8dd0:	4608      	mov	r0, r1
		if (handler->event != event) {
    8dd2:	7811      	ldrb	r1, [r2, #0]
    8dd4:	42a9      	cmp	r1, r5
    8dd6:	d01a      	beq.n	8e0e <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    8dd8:	3208      	adds	r2, #8
    8dda:	4293      	cmp	r3, r2
    8ddc:	d1f9      	bne.n	8dd2 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    8dde:	8986      	ldrh	r6, [r0, #12]
    8de0:	4b16      	ldr	r3, [pc, #88]	; (8e3c <handle_event+0x74>)
    8de2:	4c17      	ldr	r4, [pc, #92]	; (8e40 <handle_event+0x78>)
    8de4:	6880      	ldr	r0, [r0, #8]
    8de6:	4631      	mov	r1, r6
    8de8:	1ae4      	subs	r4, r4, r3
    8dea:	f7ff f8fb 	bl	7fe4 <bt_hex_real>
    8dee:	f7fc fb87 	bl	5500 <log_strdup>
    8df2:	08e4      	lsrs	r4, r4, #3
    8df4:	01a4      	lsls	r4, r4, #6
    8df6:	f044 0402 	orr.w	r4, r4, #2
    8dfa:	4603      	mov	r3, r0
    8dfc:	f8ad 4000 	strh.w	r4, [sp]
    8e00:	4810      	ldr	r0, [pc, #64]	; (8e44 <handle_event+0x7c>)
    8e02:	4632      	mov	r2, r6
    8e04:	4629      	mov	r1, r5
    8e06:	f019 faab 	bl	22360 <log_3>
}
    8e0a:	b002      	add	sp, #8
    8e0c:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    8e0e:	8981      	ldrh	r1, [r0, #12]
    8e10:	7853      	ldrb	r3, [r2, #1]
    8e12:	428b      	cmp	r3, r1
    8e14:	d90d      	bls.n	8e32 <handle_event+0x6a>
    8e16:	4a09      	ldr	r2, [pc, #36]	; (8e3c <handle_event+0x74>)
    8e18:	4b09      	ldr	r3, [pc, #36]	; (8e40 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8e1a:	480b      	ldr	r0, [pc, #44]	; (8e48 <handle_event+0x80>)
    8e1c:	1a9b      	subs	r3, r3, r2
    8e1e:	08db      	lsrs	r3, r3, #3
    8e20:	019b      	lsls	r3, r3, #6
    8e22:	f043 0301 	orr.w	r3, r3, #1
    8e26:	462a      	mov	r2, r5
}
    8e28:	b002      	add	sp, #8
    8e2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8e2e:	f019 ba7e 	b.w	2232e <log_2>
		handler->handler(buf);
    8e32:	6853      	ldr	r3, [r2, #4]
}
    8e34:	b002      	add	sp, #8
    8e36:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    8e3a:	4718      	bx	r3
    8e3c:	0002775c 	.word	0x0002775c
    8e40:	00027814 	.word	0x00027814
    8e44:	0002bfe6 	.word	0x0002bfe6
    8e48:	0002bfc4 	.word	0x0002bfc4

00008e4c <hci_le_meta_event>:
{
    8e4c:	b510      	push	{r4, lr}
    8e4e:	2101      	movs	r1, #1
    8e50:	4604      	mov	r4, r0
    8e52:	3008      	adds	r0, #8
    8e54:	f01d fad1 	bl	263fa <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8e58:	4621      	mov	r1, r4
    8e5a:	4a03      	ldr	r2, [pc, #12]	; (8e68 <hci_le_meta_event+0x1c>)
    8e5c:	7800      	ldrb	r0, [r0, #0]
}
    8e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8e62:	230a      	movs	r3, #10
    8e64:	f7ff bfb0 	b.w	8dc8 <handle_event>
    8e68:	00027ec0 	.word	0x00027ec0

00008e6c <hci_cmd_done>:
{
    8e6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8e70:	4607      	mov	r7, r0
    8e72:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8e74:	7990      	ldrb	r0, [r2, #6]
    8e76:	4e35      	ldr	r6, [pc, #212]	; (8f4c <hci_cmd_done+0xe0>)
{
    8e78:	4688      	mov	r8, r1
    8e7a:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8e7c:	f014 faa6 	bl	1d3cc <net_buf_pool_get>
    8e80:	4286      	cmp	r6, r0
    8e82:	d016      	beq.n	8eb2 <hci_cmd_done+0x46>
    8e84:	4b32      	ldr	r3, [pc, #200]	; (8f50 <hci_cmd_done+0xe4>)
    8e86:	4d33      	ldr	r5, [pc, #204]	; (8f54 <hci_cmd_done+0xe8>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    8e88:	79a0      	ldrb	r0, [r4, #6]
    8e8a:	9700      	str	r7, [sp, #0]
    8e8c:	1aed      	subs	r5, r5, r3
    8e8e:	08ed      	lsrs	r5, r5, #3
    8e90:	9001      	str	r0, [sp, #4]
    8e92:	f014 fa9b 	bl	1d3cc <net_buf_pool_get>
    8e96:	01ad      	lsls	r5, r5, #6
    8e98:	f045 0502 	orr.w	r5, r5, #2
    8e9c:	e9cd 0602 	strd	r0, r6, [sp, #8]
    8ea0:	462b      	mov	r3, r5
    8ea2:	482d      	ldr	r0, [pc, #180]	; (8f58 <hci_cmd_done+0xec>)
    8ea4:	2204      	movs	r2, #4
    8ea6:	4669      	mov	r1, sp
    8ea8:	f019 fa76 	bl	22398 <log_n>
}
    8eac:	b005      	add	sp, #20
    8eae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    8eb2:	4620      	mov	r0, r4
    8eb4:	f014 fa92 	bl	1d3dc <net_buf_id>
    8eb8:	4d28      	ldr	r5, [pc, #160]	; (8f5c <hci_cmd_done+0xf0>)
    8eba:	f04f 090c 	mov.w	r9, #12
    8ebe:	fb09 5000 	mla	r0, r9, r0, r5
    8ec2:	8843      	ldrh	r3, [r0, #2]
    8ec4:	42bb      	cmp	r3, r7
    8ec6:	d011      	beq.n	8eec <hci_cmd_done+0x80>
    8ec8:	4b21      	ldr	r3, [pc, #132]	; (8f50 <hci_cmd_done+0xe4>)
    8eca:	4e22      	ldr	r6, [pc, #136]	; (8f54 <hci_cmd_done+0xe8>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    8ecc:	4620      	mov	r0, r4
    8ece:	1af6      	subs	r6, r6, r3
    8ed0:	f014 fa84 	bl	1d3dc <net_buf_id>
    8ed4:	08f6      	lsrs	r6, r6, #3
    8ed6:	fb09 5000 	mla	r0, r9, r0, r5
    8eda:	01b6      	lsls	r6, r6, #6
    8edc:	f046 0602 	orr.w	r6, r6, #2
    8ee0:	8842      	ldrh	r2, [r0, #2]
    8ee2:	481f      	ldr	r0, [pc, #124]	; (8f60 <hci_cmd_done+0xf4>)
    8ee4:	4633      	mov	r3, r6
    8ee6:	4639      	mov	r1, r7
    8ee8:	f019 fa21 	bl	2232e <log_2>
	if (cmd(buf)->state && !status) {
    8eec:	4620      	mov	r0, r4
    8eee:	f014 fa75 	bl	1d3dc <net_buf_id>
    8ef2:	260c      	movs	r6, #12
    8ef4:	fb06 5000 	mla	r0, r6, r0, r5
    8ef8:	6843      	ldr	r3, [r0, #4]
    8efa:	b16b      	cbz	r3, 8f18 <hci_cmd_done+0xac>
    8efc:	f1b8 0f00 	cmp.w	r8, #0
    8f00:	d10a      	bne.n	8f18 <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    8f02:	4620      	mov	r0, r4
    8f04:	f014 fa6a 	bl	1d3dc <net_buf_id>
    8f08:	fb06 5000 	mla	r0, r6, r0, r5
    8f0c:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    8f0e:	e9d3 0100 	ldrd	r0, r1, [r3]
    8f12:	7a1a      	ldrb	r2, [r3, #8]
    8f14:	f01b fbde 	bl	246d4 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    8f18:	4620      	mov	r0, r4
    8f1a:	f014 fa5f 	bl	1d3dc <net_buf_id>
    8f1e:	260c      	movs	r6, #12
    8f20:	fb06 5000 	mla	r0, r6, r0, r5
    8f24:	6883      	ldr	r3, [r0, #8]
    8f26:	2b00      	cmp	r3, #0
    8f28:	d0c0      	beq.n	8eac <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    8f2a:	4620      	mov	r0, r4
    8f2c:	f014 fa56 	bl	1d3dc <net_buf_id>
    8f30:	4370      	muls	r0, r6
    8f32:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    8f36:	4620      	mov	r0, r4
    8f38:	f014 fa50 	bl	1d3dc <net_buf_id>
    8f3c:	fb06 5500 	mla	r5, r6, r0, r5
    8f40:	68a8      	ldr	r0, [r5, #8]
}
    8f42:	b005      	add	sp, #20
    8f44:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    8f48:	f017 b9da 	b.w	20300 <z_impl_k_sem_give>
    8f4c:	2000a0c8 	.word	0x2000a0c8
    8f50:	0002775c 	.word	0x0002775c
    8f54:	00027814 	.word	0x00027814
    8f58:	0002c008 	.word	0x0002c008
    8f5c:	2000d718 	.word	0x2000d718
    8f60:	0002c03d 	.word	0x0002c03d

00008f64 <hci_cmd_status>:
{
    8f64:	b538      	push	{r3, r4, r5, lr}
    8f66:	2104      	movs	r1, #4
    8f68:	4604      	mov	r4, r0
    8f6a:	3008      	adds	r0, #8
    8f6c:	f01d fa45 	bl	263fa <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    8f70:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    8f72:	7801      	ldrb	r1, [r0, #0]
    8f74:	8840      	ldrh	r0, [r0, #2]
    8f76:	4622      	mov	r2, r4
    8f78:	f7ff ff78 	bl	8e6c <hci_cmd_done>
	if (ncmd) {
    8f7c:	b125      	cbz	r5, 8f88 <hci_cmd_status+0x24>
    8f7e:	4803      	ldr	r0, [pc, #12]	; (8f8c <hci_cmd_status+0x28>)
}
    8f80:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8f84:	f017 b9bc 	b.w	20300 <z_impl_k_sem_give>
    8f88:	bd38      	pop	{r3, r4, r5, pc}
    8f8a:	bf00      	nop
    8f8c:	200000e8 	.word	0x200000e8

00008f90 <hci_cmd_complete>:
{
    8f90:	b538      	push	{r3, r4, r5, lr}
    8f92:	2103      	movs	r1, #3
    8f94:	4604      	mov	r4, r0
    8f96:	3008      	adds	r0, #8
    8f98:	f01d fa2f 	bl	263fa <net_buf_simple_pull_mem>
	status = buf->data[0];
    8f9c:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    8f9e:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    8fa0:	7819      	ldrb	r1, [r3, #0]
    8fa2:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    8fa6:	4622      	mov	r2, r4
    8fa8:	f7ff ff60 	bl	8e6c <hci_cmd_done>
	if (ncmd) {
    8fac:	b125      	cbz	r5, 8fb8 <hci_cmd_complete+0x28>
    8fae:	4803      	ldr	r0, [pc, #12]	; (8fbc <hci_cmd_complete+0x2c>)
}
    8fb0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    8fb4:	f017 b9a4 	b.w	20300 <z_impl_k_sem_give>
    8fb8:	bd38      	pop	{r3, r4, r5, pc}
    8fba:	bf00      	nop
    8fbc:	200000e8 	.word	0x200000e8

00008fc0 <hci_tx_thread>:
{
    8fc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8fc4:	4d51      	ldr	r5, [pc, #324]	; (910c <hci_tx_thread+0x14c>)
    8fc6:	4b52      	ldr	r3, [pc, #328]	; (9110 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    8fc8:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9114 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    8fcc:	f8df a148 	ldr.w	sl, [pc, #328]	; 9118 <hci_tx_thread+0x158>
    8fd0:	1aed      	subs	r5, r5, r3
    8fd2:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    8fd4:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8fd8:	4850      	ldr	r0, [pc, #320]	; (911c <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    8fda:	f36f 3310 	bfc	r3, #12, #5
    8fde:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    8fe2:	f002 fa81 	bl	b4e8 <bt_conn_prepare_events>
    8fe6:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    8fe8:	484a      	ldr	r0, [pc, #296]	; (9114 <hci_tx_thread+0x154>)
    8fea:	f04f 32ff 	mov.w	r2, #4294967295
    8fee:	f04f 33ff 	mov.w	r3, #4294967295
    8ff2:	4639      	mov	r1, r7
    8ff4:	f017 fcf6 	bl	209e4 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    8ff8:	b160      	cbz	r0, 9014 <hci_tx_thread+0x54>
    8ffa:	4949      	ldr	r1, [pc, #292]	; (9120 <hci_tx_thread+0x160>)
    8ffc:	4849      	ldr	r0, [pc, #292]	; (9124 <hci_tx_thread+0x164>)
    8ffe:	f241 437b 	movw	r3, #5243	; 0x147b
    9002:	4652      	mov	r2, sl
    9004:	f018 fcdc 	bl	219c0 <printk>
    9008:	4040      	eors	r0, r0
    900a:	f380 8811 	msr	BASEPRI, r0
    900e:	f04f 0003 	mov.w	r0, #3
    9012:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    9014:	4e44      	ldr	r6, [pc, #272]	; (9128 <hci_tx_thread+0x168>)
{
    9016:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9114 <hci_tx_thread+0x154>
    901a:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    901e:	b917      	cbnz	r7, 9026 <hci_tx_thread+0x66>
	z_impl_k_yield();
    9020:	f017 f8c6 	bl	201b0 <z_impl_k_yield>
	while (1) {
    9024:	e7d6      	b.n	8fd4 <hci_tx_thread+0x14>
		switch (ev->state) {
    9026:	f8d8 100c 	ldr.w	r1, [r8, #12]
    902a:	f3c1 3104 	ubfx	r1, r1, #12, #5
    902e:	2901      	cmp	r1, #1
    9030:	d959      	bls.n	90e6 <hci_tx_thread+0x126>
    9032:	2904      	cmp	r1, #4
    9034:	d163      	bne.n	90fe <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    9036:	f898 300c 	ldrb.w	r3, [r8, #12]
    903a:	2b00      	cmp	r3, #0
    903c:	d157      	bne.n	90ee <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    903e:	483b      	ldr	r0, [pc, #236]	; (912c <hci_tx_thread+0x16c>)
    9040:	2200      	movs	r2, #0
    9042:	2300      	movs	r3, #0
    9044:	f01d f961 	bl	2630a <net_buf_get>
	BT_ASSERT(buf);
    9048:	4604      	mov	r4, r0
    904a:	b960      	cbnz	r0, 9066 <hci_tx_thread+0xa6>
    904c:	4938      	ldr	r1, [pc, #224]	; (9130 <hci_tx_thread+0x170>)
    904e:	4835      	ldr	r0, [pc, #212]	; (9124 <hci_tx_thread+0x164>)
    9050:	f241 4318 	movw	r3, #5144	; 0x1418
    9054:	4652      	mov	r2, sl
    9056:	f018 fcb3 	bl	219c0 <printk>
    905a:	4040      	eors	r0, r0
    905c:	f380 8811 	msr	BASEPRI, r0
    9060:	f04f 0003 	mov.w	r0, #3
    9064:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    9066:	f04f 33ff 	mov.w	r3, #4294967295
    906a:	f04f 32ff 	mov.w	r2, #4294967295
    906e:	4658      	mov	r0, fp
    9070:	f017 f96c 	bl	2034c <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    9074:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    9078:	b163      	cbz	r3, 9094 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    907a:	01a9      	lsls	r1, r5, #6
    907c:	482d      	ldr	r0, [pc, #180]	; (9134 <hci_tx_thread+0x174>)
    907e:	f041 0101 	orr.w	r1, r1, #1
    9082:	f019 f933 	bl	222ec <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    9086:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    908a:	f014 fa5d 	bl	1d548 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    908e:	2300      	movs	r3, #0
    9090:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    9094:	4620      	mov	r0, r4
    9096:	f01d f963 	bl	26360 <net_buf_ref>
    909a:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
		return bt_hci_ecc_send(buf);
    909e:	4620      	mov	r0, r4
    90a0:	f7ff f8e0 	bl	8264 <bt_hci_ecc_send>
	if (err) {
    90a4:	4601      	mov	r1, r0
    90a6:	b1f0      	cbz	r0, 90e6 <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    90a8:	01aa      	lsls	r2, r5, #6
    90aa:	4823      	ldr	r0, [pc, #140]	; (9138 <hci_tx_thread+0x178>)
    90ac:	f042 0201 	orr.w	r2, r2, #1
    90b0:	f019 f929 	bl	22306 <log_1>
	z_impl_k_sem_give(sem);
    90b4:	4821      	ldr	r0, [pc, #132]	; (913c <hci_tx_thread+0x17c>)
    90b6:	f017 f923 	bl	20300 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    90ba:	4620      	mov	r0, r4
    90bc:	f014 f98e 	bl	1d3dc <net_buf_id>
    90c0:	4b1f      	ldr	r3, [pc, #124]	; (9140 <hci_tx_thread+0x180>)
    90c2:	220c      	movs	r2, #12
    90c4:	fb02 3000 	mla	r0, r2, r0, r3
    90c8:	211f      	movs	r1, #31
    90ca:	8840      	ldrh	r0, [r0, #2]
    90cc:	4622      	mov	r2, r4
    90ce:	f7ff fecd 	bl	8e6c <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    90d2:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    90d6:	f014 fa37 	bl	1d548 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    90da:	2300      	movs	r3, #0
		net_buf_unref(buf);
    90dc:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    90de:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    90e2:	f014 fa31 	bl	1d548 <net_buf_unref>
	for (; count; ev++, count--) {
    90e6:	f108 0814 	add.w	r8, r8, #20
    90ea:	3f01      	subs	r7, #1
    90ec:	e797      	b.n	901e <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    90ee:	2b01      	cmp	r3, #1
    90f0:	d1f9      	bne.n	90e6 <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    90f2:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    90f6:	3834      	subs	r0, #52	; 0x34
    90f8:	f002 fc9a 	bl	ba30 <bt_conn_process_tx>
    90fc:	e7f3      	b.n	90e6 <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    90fe:	01aa      	lsls	r2, r5, #6
    9100:	4810      	ldr	r0, [pc, #64]	; (9144 <hci_tx_thread+0x184>)
    9102:	f042 0202 	orr.w	r2, r2, #2
    9106:	f019 f8fe 	bl	22306 <log_1>
    910a:	e7ec      	b.n	90e6 <hci_tx_thread+0x126>
    910c:	00027814 	.word	0x00027814
    9110:	0002775c 	.word	0x0002775c
    9114:	200002d8 	.word	0x200002d8
    9118:	0002c070 	.word	0x0002c070
    911c:	200002ec 	.word	0x200002ec
    9120:	0002c0a4 	.word	0x0002c0a4
    9124:	0002c0ad 	.word	0x0002c0ad
    9128:	20000000 	.word	0x20000000
    912c:	20000104 	.word	0x20000104
    9130:	0002be15 	.word	0x0002be15
    9134:	0002c0ca 	.word	0x0002c0ca
    9138:	0002c0e5 	.word	0x0002c0e5
    913c:	200000e8 	.word	0x200000e8
    9140:	2000d718 	.word	0x2000d718
    9144:	0002c107 	.word	0x0002c107

00009148 <hci_num_completed_packets>:
{
    9148:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    914c:	4d3d      	ldr	r5, [pc, #244]	; (9244 <hci_num_completed_packets+0xfc>)
    914e:	4b3e      	ldr	r3, [pc, #248]	; (9248 <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    9150:	f8d0 8008 	ldr.w	r8, [r0, #8]
    9154:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 924c <hci_num_completed_packets+0x104>
    9158:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    915a:	2600      	movs	r6, #0
    915c:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    915e:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    9160:	f898 3000 	ldrb.w	r3, [r8]
    9164:	429e      	cmp	r6, r3
    9166:	db01      	blt.n	916c <hci_num_completed_packets+0x24>
}
    9168:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    916c:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    9170:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    9174:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    9178:	4658      	mov	r0, fp
    917a:	f002 fa19 	bl	b5b0 <bt_conn_lookup_handle>
		if (!conn) {
    917e:	4604      	mov	r4, r0
    9180:	b1d8      	cbz	r0, 91ba <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    9182:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    9186:	2f00      	cmp	r7, #0
    9188:	d033      	beq.n	91f2 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    918a:	f04f 0320 	mov.w	r3, #32
    918e:	f3ef 8211 	mrs	r2, BASEPRI
    9192:	f383 8811 	msr	BASEPRI, r3
    9196:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    919a:	69e3      	ldr	r3, [r4, #28]
    919c:	b1b3      	cbz	r3, 91cc <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    919e:	3b01      	subs	r3, #1
    91a0:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    91a2:	f382 8811 	msr	BASEPRI, r2
    91a6:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    91aa:	4620      	mov	r0, r4
    91ac:	f001 ffee 	bl	b18c <bt_conn_get_pkts>
    91b0:	3f01      	subs	r7, #1
    91b2:	f017 f8a5 	bl	20300 <z_impl_k_sem_give>
    91b6:	b2bf      	uxth	r7, r7
    91b8:	e7e5      	b.n	9186 <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    91ba:	01aa      	lsls	r2, r5, #6
    91bc:	4824      	ldr	r0, [pc, #144]	; (9250 <hci_num_completed_packets+0x108>)
    91be:	f042 0201 	orr.w	r2, r2, #1
    91c2:	4659      	mov	r1, fp
    91c4:	f019 f89f 	bl	22306 <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    91c8:	3601      	adds	r6, #1
    91ca:	e7c9      	b.n	9160 <hci_num_completed_packets+0x18>
	return list->head;
    91cc:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    91ce:	b12b      	cbz	r3, 91dc <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    91d0:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    91d2:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    91d4:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    91d6:	428b      	cmp	r3, r1
	list->tail = node;
    91d8:	bf08      	it	eq
    91da:	61a0      	streq	r0, [r4, #24]
    91dc:	f382 8811 	msr	BASEPRI, r2
    91e0:	f3bf 8f6f 	isb	sy
			if (!node) {
    91e4:	b94b      	cbnz	r3, 91fa <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    91e6:	01a9      	lsls	r1, r5, #6
    91e8:	481a      	ldr	r0, [pc, #104]	; (9254 <hci_num_completed_packets+0x10c>)
    91ea:	f041 0101 	orr.w	r1, r1, #1
    91ee:	f019 f87d 	bl	222ec <log_0>
		bt_conn_unref(conn);
    91f2:	4620      	mov	r0, r4
    91f4:	f01b fcbe 	bl	24b74 <bt_conn_unref>
    91f8:	e7e6      	b.n	91c8 <hci_num_completed_packets+0x80>
	__asm__ volatile(
    91fa:	f04f 0220 	mov.w	r2, #32
    91fe:	f3ef 8111 	mrs	r1, BASEPRI
    9202:	f382 8811 	msr	BASEPRI, r2
    9206:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    920a:	68da      	ldr	r2, [r3, #12]
    920c:	61e2      	str	r2, [r4, #28]
	return list->tail;
    920e:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    9210:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    9214:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    9218:	b98a      	cbnz	r2, 923e <hci_num_completed_packets+0xf6>
	list->head = node;
    921a:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    921e:	f381 8811 	msr	BASEPRI, r1
    9222:	f3bf 8f6f 	isb	sy
    9226:	2100      	movs	r1, #0
    9228:	f104 0030 	add.w	r0, r4, #48	; 0x30
    922c:	f01b fa47 	bl	246be <atomic_test_and_set_bit>
    9230:	2800      	cmp	r0, #0
    9232:	d1ba      	bne.n	91aa <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    9234:	4659      	mov	r1, fp
    9236:	4650      	mov	r0, sl
    9238:	f01d fd53 	bl	26ce2 <k_queue_append>
    923c:	e7b5      	b.n	91aa <hci_num_completed_packets+0x62>
	parent->next = child;
    923e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    9240:	6263      	str	r3, [r4, #36]	; 0x24
}
    9242:	e7ec      	b.n	921e <hci_num_completed_packets+0xd6>
    9244:	00027814 	.word	0x00027814
    9248:	0002775c 	.word	0x0002775c
    924c:	2000aca0 	.word	0x2000aca0
    9250:	0002c128 	.word	0x0002c128
    9254:	0002c144 	.word	0x0002c144

00009258 <bt_hci_cmd_create>:
{
    9258:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    925c:	f04f 32ff 	mov.w	r2, #4294967295
    9260:	f04f 33ff 	mov.w	r3, #4294967295
    9264:	4606      	mov	r6, r0
    9266:	4817      	ldr	r0, [pc, #92]	; (92c4 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    9268:	4d17      	ldr	r5, [pc, #92]	; (92c8 <bt_hci_cmd_create+0x70>)
{
    926a:	460f      	mov	r7, r1
    926c:	f01d f848 	bl	26300 <net_buf_alloc_fixed>
    9270:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    9272:	f100 0a08 	add.w	sl, r0, #8
    9276:	2100      	movs	r1, #0
    9278:	f04f 0800 	mov.w	r8, #0
    927c:	4650      	mov	r0, sl
    927e:	f01d f85e 	bl	2633e <net_buf_simple_reserve>
    9282:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    9286:	4620      	mov	r0, r4
    9288:	f014 f8a8 	bl	1d3dc <net_buf_id>
    928c:	f04f 090c 	mov.w	r9, #12
    9290:	fb09 5000 	mla	r0, r9, r0, r5
    9294:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    9296:	4620      	mov	r0, r4
    9298:	f014 f8a0 	bl	1d3dc <net_buf_id>
    929c:	fb09 5000 	mla	r0, r9, r0, r5
    92a0:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    92a4:	4620      	mov	r0, r4
    92a6:	f014 f899 	bl	1d3dc <net_buf_id>
    92aa:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    92ae:	2103      	movs	r1, #3
    92b0:	f8c5 8004 	str.w	r8, [r5, #4]
    92b4:	4650      	mov	r0, sl
    92b6:	f01d f879 	bl	263ac <net_buf_simple_add>
	hdr->param_len = param_len;
    92ba:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    92bc:	8006      	strh	r6, [r0, #0]
}
    92be:	4620      	mov	r0, r4
    92c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    92c4:	2000a0c8 	.word	0x2000a0c8
    92c8:	2000d718 	.word	0x2000d718

000092cc <bt_hci_cmd_send>:
{
    92cc:	b538      	push	{r3, r4, r5, lr}
    92ce:	4605      	mov	r5, r0
	if (!buf) {
    92d0:	460c      	mov	r4, r1
    92d2:	b919      	cbnz	r1, 92dc <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    92d4:	f7ff ffc0 	bl	9258 <bt_hci_cmd_create>
		if (!buf) {
    92d8:	4604      	mov	r4, r0
    92da:	b1f0      	cbz	r0, 931a <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    92dc:	f640 4335 	movw	r3, #3125	; 0xc35
    92e0:	429d      	cmp	r5, r3
    92e2:	d114      	bne.n	930e <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    92e4:	4620      	mov	r0, r4
    92e6:	f7fe ffbd 	bl	8264 <bt_hci_ecc_send>
		if (err) {
    92ea:	4605      	mov	r5, r0
    92ec:	b168      	cbz	r0, 930a <bt_hci_cmd_send+0x3e>
    92ee:	4b0c      	ldr	r3, [pc, #48]	; (9320 <bt_hci_cmd_send+0x54>)
    92f0:	4a0c      	ldr	r2, [pc, #48]	; (9324 <bt_hci_cmd_send+0x58>)
    92f2:	1ad2      	subs	r2, r2, r3
    92f4:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    92f6:	0192      	lsls	r2, r2, #6
    92f8:	4601      	mov	r1, r0
    92fa:	f042 0201 	orr.w	r2, r2, #1
    92fe:	480a      	ldr	r0, [pc, #40]	; (9328 <bt_hci_cmd_send+0x5c>)
    9300:	f019 f801 	bl	22306 <log_1>
			net_buf_unref(buf);
    9304:	4620      	mov	r0, r4
    9306:	f014 f91f 	bl	1d548 <net_buf_unref>
}
    930a:	4628      	mov	r0, r5
    930c:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    930e:	4807      	ldr	r0, [pc, #28]	; (932c <bt_hci_cmd_send+0x60>)
    9310:	4621      	mov	r1, r4
    9312:	f01d f818 	bl	26346 <net_buf_put>
	return 0;
    9316:	2500      	movs	r5, #0
    9318:	e7f7      	b.n	930a <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    931a:	f06f 0536 	mvn.w	r5, #54	; 0x36
    931e:	e7f4      	b.n	930a <bt_hci_cmd_send+0x3e>
    9320:	0002775c 	.word	0x0002775c
    9324:	00027814 	.word	0x00027814
    9328:	0002c0e5 	.word	0x0002c0e5
    932c:	20000104 	.word	0x20000104

00009330 <le_ltk_request>:
{
    9330:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    9332:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9334:	882e      	ldrh	r6, [r5, #0]
    9336:	b2b7      	uxth	r7, r6
{
    9338:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    933a:	4638      	mov	r0, r7
    933c:	f002 f938 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    9340:	4604      	mov	r4, r0
    9342:	b968      	cbnz	r0, 9360 <le_ltk_request+0x30>
    9344:	4b27      	ldr	r3, [pc, #156]	; (93e4 <le_ltk_request+0xb4>)
    9346:	4a28      	ldr	r2, [pc, #160]	; (93e8 <le_ltk_request+0xb8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9348:	4828      	ldr	r0, [pc, #160]	; (93ec <le_ltk_request+0xbc>)
    934a:	1ad2      	subs	r2, r2, r3
    934c:	08d2      	lsrs	r2, r2, #3
    934e:	0192      	lsls	r2, r2, #6
    9350:	f042 0201 	orr.w	r2, r2, #1
    9354:	4639      	mov	r1, r7
}
    9356:	b007      	add	sp, #28
    9358:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    935c:	f018 bfd3 	b.w	22306 <log_1>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    9360:	af02      	add	r7, sp, #8
    9362:	f8d5 2002 	ldr.w	r2, [r5, #2]
    9366:	f8d5 3006 	ldr.w	r3, [r5, #6]
    936a:	9701      	str	r7, [sp, #4]
    936c:	8969      	ldrh	r1, [r5, #10]
    936e:	9100      	str	r1, [sp, #0]
    9370:	f01c fe25 	bl	25fbe <bt_smp_request_ltk>
    9374:	b328      	cbz	r0, 93c2 <le_ltk_request+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    9376:	2112      	movs	r1, #18
    9378:	f242 001a 	movw	r0, #8218	; 0x201a
    937c:	f7ff ff6c 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    9380:	4605      	mov	r5, r0
    9382:	b970      	cbnz	r0, 93a2 <le_ltk_request+0x72>
    9384:	4918      	ldr	r1, [pc, #96]	; (93e8 <le_ltk_request+0xb8>)
    9386:	4b17      	ldr	r3, [pc, #92]	; (93e4 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    9388:	4819      	ldr	r0, [pc, #100]	; (93f0 <le_ltk_request+0xc0>)
    938a:	1ac9      	subs	r1, r1, r3
    938c:	08c9      	lsrs	r1, r1, #3
    938e:	0189      	lsls	r1, r1, #6
    9390:	f041 0101 	orr.w	r1, r1, #1
    9394:	f018 ffaa 	bl	222ec <log_0>
	bt_conn_unref(conn);
    9398:	4620      	mov	r0, r4
    939a:	f01b fbeb 	bl	24b74 <bt_conn_unref>
}
    939e:	b007      	add	sp, #28
    93a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    93a2:	2112      	movs	r1, #18
    93a4:	3008      	adds	r0, #8
    93a6:	f01d f801 	bl	263ac <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    93aa:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    93ac:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    93b0:	2210      	movs	r2, #16
    93b2:	f01a ffa7 	bl	24304 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    93b6:	4629      	mov	r1, r5
    93b8:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    93bc:	f7ff ff86 	bl	92cc <bt_hci_cmd_send>
    93c0:	e7ea      	b.n	9398 <le_ltk_request+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    93c2:	2102      	movs	r1, #2
    93c4:	f242 001b 	movw	r0, #8219	; 0x201b
    93c8:	f7ff ff46 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    93cc:	4605      	mov	r5, r0
    93ce:	2800      	cmp	r0, #0
    93d0:	d0d8      	beq.n	9384 <le_ltk_request+0x54>
    93d2:	2102      	movs	r1, #2
    93d4:	3008      	adds	r0, #8
    93d6:	f01c ffe9 	bl	263ac <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    93da:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    93dc:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    93de:	f242 001b 	movw	r0, #8219	; 0x201b
    93e2:	e7eb      	b.n	93bc <le_ltk_request+0x8c>
    93e4:	0002775c 	.word	0x0002775c
    93e8:	00027814 	.word	0x00027814
    93ec:	0002bf34 	.word	0x0002bf34
    93f0:	0002c15b 	.word	0x0002c15b

000093f4 <le_conn_param_neg_reply>:
{
    93f4:	b570      	push	{r4, r5, r6, lr}
    93f6:	4606      	mov	r6, r0
    93f8:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    93fa:	f242 0021 	movw	r0, #8225	; 0x2021
    93fe:	2103      	movs	r1, #3
    9400:	f7ff ff2a 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    9404:	4604      	mov	r4, r0
    9406:	b958      	cbnz	r0, 9420 <le_conn_param_neg_reply+0x2c>
    9408:	490c      	ldr	r1, [pc, #48]	; (943c <le_conn_param_neg_reply+0x48>)
    940a:	4b0d      	ldr	r3, [pc, #52]	; (9440 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    940c:	480d      	ldr	r0, [pc, #52]	; (9444 <le_conn_param_neg_reply+0x50>)
    940e:	1ac9      	subs	r1, r1, r3
    9410:	08c9      	lsrs	r1, r1, #3
    9412:	0189      	lsls	r1, r1, #6
}
    9414:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    9418:	f041 0101 	orr.w	r1, r1, #1
    941c:	f018 bf66 	b.w	222ec <log_0>
    9420:	2103      	movs	r1, #3
    9422:	3008      	adds	r0, #8
    9424:	f01c ffc2 	bl	263ac <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    9428:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    942a:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    942c:	4621      	mov	r1, r4
    942e:	f242 0021 	movw	r0, #8225	; 0x2021
}
    9432:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9436:	f7ff bf49 	b.w	92cc <bt_hci_cmd_send>
    943a:	bf00      	nop
    943c:	00027814 	.word	0x00027814
    9440:	0002775c 	.word	0x0002775c
    9444:	0002c172 	.word	0x0002c172

00009448 <le_conn_param_req>:
{
    9448:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    944a:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    944c:	78d9      	ldrb	r1, [r3, #3]
    944e:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    9450:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    9452:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9456:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    945a:	7959      	ldrb	r1, [r3, #5]
    945c:	791a      	ldrb	r2, [r3, #4]
    945e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    9462:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    9466:	799a      	ldrb	r2, [r3, #6]
    9468:	79d9      	ldrb	r1, [r3, #7]
    946a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    946e:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9472:	7a1a      	ldrb	r2, [r3, #8]
    9474:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    9476:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    9478:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    947c:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    947e:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    9482:	f002 f895 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    9486:	4606      	mov	r6, r0
    9488:	b980      	cbnz	r0, 94ac <le_conn_param_req+0x64>
    948a:	4b20      	ldr	r3, [pc, #128]	; (950c <le_conn_param_req+0xc4>)
    948c:	4a20      	ldr	r2, [pc, #128]	; (9510 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    948e:	4821      	ldr	r0, [pc, #132]	; (9514 <le_conn_param_req+0xcc>)
    9490:	1ad2      	subs	r2, r2, r3
    9492:	08d2      	lsrs	r2, r2, #3
    9494:	0192      	lsls	r2, r2, #6
    9496:	4621      	mov	r1, r4
    9498:	f042 0201 	orr.w	r2, r2, #1
    949c:	f018 ff33 	bl	22306 <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    94a0:	2102      	movs	r1, #2
    94a2:	4620      	mov	r0, r4
    94a4:	f7ff ffa6 	bl	93f4 <le_conn_param_neg_reply>
}
    94a8:	b003      	add	sp, #12
    94aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    94ac:	4669      	mov	r1, sp
    94ae:	f001 fea1 	bl	b1f4 <le_param_req>
    94b2:	b938      	cbnz	r0, 94c4 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    94b4:	211e      	movs	r1, #30
    94b6:	4620      	mov	r0, r4
    94b8:	f7ff ff9c 	bl	93f4 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    94bc:	4630      	mov	r0, r6
    94be:	f01b fb59 	bl	24b74 <bt_conn_unref>
    94c2:	e7f1      	b.n	94a8 <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    94c4:	210e      	movs	r1, #14
    94c6:	f242 0020 	movw	r0, #8224	; 0x2020
    94ca:	f7ff fec5 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    94ce:	4605      	mov	r5, r0
    94d0:	2800      	cmp	r0, #0
    94d2:	d0f3      	beq.n	94bc <le_conn_param_req+0x74>
    94d4:	210e      	movs	r1, #14
    94d6:	3008      	adds	r0, #8
    94d8:	f01c ff68 	bl	263ac <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    94dc:	220e      	movs	r2, #14
    94de:	4604      	mov	r4, r0
    94e0:	2100      	movs	r1, #0
    94e2:	f01a ff3a 	bl	2435a <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    94e6:	f8bd 3000 	ldrh.w	r3, [sp]
    94ea:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    94ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    94f0:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    94f2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    94f6:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    94f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    94fc:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    94fe:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    9500:	4629      	mov	r1, r5
    9502:	f242 0020 	movw	r0, #8224	; 0x2020
    9506:	f7ff fee1 	bl	92cc <bt_hci_cmd_send>
    950a:	e7d7      	b.n	94bc <le_conn_param_req+0x74>
    950c:	0002775c 	.word	0x0002775c
    9510:	00027814 	.word	0x00027814
    9514:	0002bf34 	.word	0x0002bf34

00009518 <bt_hci_cmd_send_sync>:
{
    9518:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    951c:	4607      	mov	r7, r0
    951e:	b086      	sub	sp, #24
    9520:	4615      	mov	r5, r2
	if (!buf) {
    9522:	460c      	mov	r4, r1
    9524:	b921      	cbnz	r1, 9530 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    9526:	f7ff fe97 	bl	9258 <bt_hci_cmd_create>
		if (!buf) {
    952a:	4604      	mov	r4, r0
    952c:	2800      	cmp	r0, #0
    952e:	d057      	beq.n	95e0 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9530:	2201      	movs	r2, #1
    9532:	2100      	movs	r1, #0
    9534:	4668      	mov	r0, sp
    9536:	f01d fd12 	bl	26f5e <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    953a:	4620      	mov	r0, r4
    953c:	f013 ff4e 	bl	1d3dc <net_buf_id>
    9540:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 95e8 <bt_hci_cmd_send_sync+0xd0>
    9544:	230c      	movs	r3, #12
    9546:	fb03 8000 	mla	r0, r3, r0, r8
    954a:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    954e:	4620      	mov	r0, r4
    9550:	f01c ff06 	bl	26360 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9554:	4825      	ldr	r0, [pc, #148]	; (95ec <bt_hci_cmd_send_sync+0xd4>)
    9556:	4621      	mov	r1, r4
    9558:	f01c fef5 	bl	26346 <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    955c:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    9560:	2300      	movs	r3, #0
    9562:	4668      	mov	r0, sp
    9564:	f016 fef2 	bl	2034c <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    9568:	4606      	mov	r6, r0
    956a:	b180      	cbz	r0, 958e <bt_hci_cmd_send_sync+0x76>
    956c:	4a20      	ldr	r2, [pc, #128]	; (95f0 <bt_hci_cmd_send_sync+0xd8>)
    956e:	4921      	ldr	r1, [pc, #132]	; (95f4 <bt_hci_cmd_send_sync+0xdc>)
    9570:	4821      	ldr	r0, [pc, #132]	; (95f8 <bt_hci_cmd_send_sync+0xe0>)
    9572:	f240 134d 	movw	r3, #333	; 0x14d
    9576:	f018 fa23 	bl	219c0 <printk>
    957a:	4820      	ldr	r0, [pc, #128]	; (95fc <bt_hci_cmd_send_sync+0xe4>)
    957c:	4631      	mov	r1, r6
    957e:	f018 fa1f 	bl	219c0 <printk>
    9582:	4040      	eors	r0, r0
    9584:	f380 8811 	msr	BASEPRI, r0
    9588:	f04f 0003 	mov.w	r0, #3
    958c:	df02      	svc	2
	status = cmd(buf)->status;
    958e:	4620      	mov	r0, r4
    9590:	f013 ff24 	bl	1d3dc <net_buf_id>
    9594:	230c      	movs	r3, #12
    9596:	4358      	muls	r0, r3
    9598:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    959c:	b1be      	cbz	r6, 95ce <bt_hci_cmd_send_sync+0xb6>
    959e:	4a18      	ldr	r2, [pc, #96]	; (9600 <bt_hci_cmd_send_sync+0xe8>)
    95a0:	4b18      	ldr	r3, [pc, #96]	; (9604 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    95a2:	4819      	ldr	r0, [pc, #100]	; (9608 <bt_hci_cmd_send_sync+0xf0>)
    95a4:	1a9b      	subs	r3, r3, r2
    95a6:	08db      	lsrs	r3, r3, #3
    95a8:	019b      	lsls	r3, r3, #6
    95aa:	f043 0302 	orr.w	r3, r3, #2
    95ae:	4632      	mov	r2, r6
    95b0:	4639      	mov	r1, r7
    95b2:	f018 febc 	bl	2232e <log_2>
		net_buf_unref(buf);
    95b6:	4620      	mov	r0, r4
    95b8:	f013 ffc6 	bl	1d548 <net_buf_unref>
			return -EIO;
    95bc:	2e09      	cmp	r6, #9
    95be:	bf0c      	ite	eq
    95c0:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    95c4:	f06f 0004 	mvnne.w	r0, #4
}
    95c8:	b006      	add	sp, #24
    95ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    95ce:	b115      	cbz	r5, 95d6 <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    95d0:	602c      	str	r4, [r5, #0]
	return 0;
    95d2:	4630      	mov	r0, r6
    95d4:	e7f8      	b.n	95c8 <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    95d6:	4620      	mov	r0, r4
    95d8:	f013 ffb6 	bl	1d548 <net_buf_unref>
	return 0;
    95dc:	4628      	mov	r0, r5
    95de:	e7f3      	b.n	95c8 <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    95e0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    95e4:	e7f0      	b.n	95c8 <bt_hci_cmd_send_sync+0xb0>
    95e6:	bf00      	nop
    95e8:	2000d718 	.word	0x2000d718
    95ec:	20000104 	.word	0x20000104
    95f0:	0002c070 	.word	0x0002c070
    95f4:	0002c0a4 	.word	0x0002c0a4
    95f8:	0002c0ad 	.word	0x0002c0ad
    95fc:	0002c18c 	.word	0x0002c18c
    9600:	0002775c 	.word	0x0002775c
    9604:	00027814 	.word	0x00027814
    9608:	0002c1ac 	.word	0x0002c1ac

0000960c <set_random_address>:
{
    960c:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    960e:	4e15      	ldr	r6, [pc, #84]	; (9664 <set_random_address+0x58>)
    9610:	2206      	movs	r2, #6
    9612:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    9616:	4605      	mov	r5, r0
    9618:	f01a fe63 	bl	242e2 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    961c:	4604      	mov	r4, r0
    961e:	b1d8      	cbz	r0, 9658 <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9620:	2106      	movs	r1, #6
    9622:	f242 0005 	movw	r0, #8197	; 0x2005
    9626:	f7ff fe17 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    962a:	4604      	mov	r4, r0
    962c:	b1b0      	cbz	r0, 965c <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    962e:	2206      	movs	r2, #6
    9630:	4629      	mov	r1, r5
    9632:	3008      	adds	r0, #8
    9634:	f01c fec0 	bl	263b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    9638:	4621      	mov	r1, r4
    963a:	2200      	movs	r2, #0
    963c:	f242 0005 	movw	r0, #8197	; 0x2005
    9640:	f7ff ff6a 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    9644:	4604      	mov	r4, r0
    9646:	b938      	cbnz	r0, 9658 <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    9648:	4629      	mov	r1, r5
    964a:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    964e:	f01b f821 	bl	24694 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    9652:	2301      	movs	r3, #1
    9654:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    9658:	4620      	mov	r0, r4
    965a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    965c:	f06f 0436 	mvn.w	r4, #54	; 0x36
    9660:	e7fa      	b.n	9658 <set_random_address+0x4c>
    9662:	bf00      	nop
    9664:	20000000 	.word	0x20000000

00009668 <le_set_private_addr>:
{
    9668:	b537      	push	{r0, r1, r2, r4, r5, lr}
    966a:	4d16      	ldr	r5, [pc, #88]	; (96c4 <le_set_private_addr+0x5c>)
    966c:	4603      	mov	r3, r0
    966e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9672:	f01b f806 	bl	24682 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    9676:	04c2      	lsls	r2, r0, #19
    9678:	d422      	bmi.n	96c0 <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    967a:	f103 0012 	add.w	r0, r3, #18
    967e:	4669      	mov	r1, sp
    9680:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    9684:	f01a feee 	bl	24464 <bt_rpa_create>
	if (!err) {
    9688:	4604      	mov	r4, r0
    968a:	b950      	cbnz	r0, 96a2 <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    968c:	4668      	mov	r0, sp
    968e:	f7ff ffbd 	bl	960c <set_random_address>
		if (!err) {
    9692:	4604      	mov	r4, r0
    9694:	b928      	cbnz	r0, 96a2 <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9696:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    969a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    969e:	f01a ffff 	bl	246a0 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    96a2:	4809      	ldr	r0, [pc, #36]	; (96c8 <le_set_private_addr+0x60>)
    96a4:	210d      	movs	r1, #13
    96a6:	f01b f80a 	bl	246be <atomic_test_and_set_bit>
    96aa:	b930      	cbnz	r0, 96ba <le_set_private_addr+0x52>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    96ac:	4907      	ldr	r1, [pc, #28]	; (96cc <le_set_private_addr+0x64>)
    96ae:	4808      	ldr	r0, [pc, #32]	; (96d0 <le_set_private_addr+0x68>)
    96b0:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    96b4:	2300      	movs	r3, #0
    96b6:	f016 ff7d 	bl	205b4 <k_delayed_work_submit_to_queue>
}
    96ba:	4620      	mov	r0, r4
    96bc:	b003      	add	sp, #12
    96be:	bd30      	pop	{r4, r5, pc}
		return 0;
    96c0:	2400      	movs	r4, #0
    96c2:	e7fa      	b.n	96ba <le_set_private_addr+0x52>
    96c4:	20000000 	.word	0x20000000
    96c8:	20000094 	.word	0x20000094
    96cc:	20000130 	.word	0x20000130
    96d0:	2000aca0 	.word	0x2000aca0

000096d4 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    96d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    96d8:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    96dc:	4605      	mov	r5, r0
    96de:	460f      	mov	r7, r1
    96e0:	4690      	mov	r8, r2
    96e2:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    96e4:	d035      	beq.n	9752 <le_adv_set_random_addr.isra.0+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    96e6:	b132      	cbz	r2, 96f6 <le_adv_set_random_addr.isra.0+0x22>
    96e8:	068b      	lsls	r3, r1, #26
    96ea:	d504      	bpl.n	96f6 <le_adv_set_random_addr.isra.0+0x22>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    96ec:	4b28      	ldr	r3, [pc, #160]	; (9790 <le_adv_set_random_addr.isra.0+0xbc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    96ee:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    96f2:	065c      	lsls	r4, r3, #25
    96f4:	d548      	bpl.n	9788 <le_adv_set_random_addr.isra.0+0xb4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    96f6:	0778      	lsls	r0, r7, #29
    96f8:	d40b      	bmi.n	9712 <le_adv_set_random_addr.isra.0+0x3e>
		return le_set_private_addr(adv->id);
    96fa:	4628      	mov	r0, r5
    96fc:	f7ff ffb4 	bl	9668 <le_set_private_addr>
			if (err) {
    9700:	bb00      	cbnz	r0, 9744 <le_adv_set_random_addr.isra.0+0x70>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9702:	f1b8 0f00 	cmp.w	r8, #0
    9706:	d03d      	beq.n	9784 <le_adv_set_random_addr.isra.0+0xb0>
    9708:	06b9      	lsls	r1, r7, #26
    970a:	d53b      	bpl.n	9784 <le_adv_set_random_addr.isra.0+0xb0>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    970c:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    970e:	7033      	strb	r3, [r6, #0]
		if (err) {
    9710:	e018      	b.n	9744 <le_adv_set_random_addr.isra.0+0x70>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9712:	4c1f      	ldr	r4, [pc, #124]	; (9790 <le_adv_set_random_addr.isra.0+0xbc>)
    9714:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    9718:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    971c:	5ce3      	ldrb	r3, [r4, r3]
    971e:	2b01      	cmp	r3, #1
    9720:	d008      	beq.n	9734 <le_adv_set_random_addr.isra.0+0x60>
			*own_addr_type = id_addr->type;
    9722:	eba9 0505 	sub.w	r5, r9, r5
    9726:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9728:	f1b8 0f00 	cmp.w	r8, #0
    972c:	d10c      	bne.n	9748 <le_adv_set_random_addr.isra.0+0x74>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    972e:	7033      	strb	r3, [r6, #0]
	return 0;
    9730:	2000      	movs	r0, #0
    9732:	e007      	b.n	9744 <le_adv_set_random_addr.isra.0+0x70>
				err = set_adv_random_address(adv, &id_addr->a);
    9734:	2007      	movs	r0, #7
    9736:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    973a:	4420      	add	r0, r4
    973c:	f7ff ff66 	bl	960c <set_random_address>
				if (err) {
    9740:	2800      	cmp	r0, #0
    9742:	d0ee      	beq.n	9722 <le_adv_set_random_addr.isra.0+0x4e>
}
    9744:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9748:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    974a:	bf48      	it	mi
    974c:	f043 0302 	orrmi.w	r3, r3, #2
    9750:	e7ed      	b.n	972e <le_adv_set_random_addr.isra.0+0x5a>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    9752:	074b      	lsls	r3, r1, #29
    9754:	d514      	bpl.n	9780 <le_adv_set_random_addr.isra.0+0xac>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9756:	f8df 8038 	ldr.w	r8, [pc, #56]	; 9790 <le_adv_set_random_addr.isra.0+0xbc>
    975a:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    975e:	00c7      	lsls	r7, r0, #3
    9760:	f818 3003 	ldrb.w	r3, [r8, r3]
    9764:	2b01      	cmp	r3, #1
    9766:	d109      	bne.n	977c <le_adv_set_random_addr.isra.0+0xa8>
				err = set_adv_random_address(adv, &id_addr->a);
    9768:	2007      	movs	r0, #7
    976a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    976e:	4440      	add	r0, r8
    9770:	f7ff ff4c 	bl	960c <set_random_address>
			*own_addr_type = id_addr->type;
    9774:	1b7d      	subs	r5, r7, r5
    9776:	f818 3005 	ldrb.w	r3, [r8, r5]
    977a:	e7c8      	b.n	970e <le_adv_set_random_addr.isra.0+0x3a>
	int err = 0;
    977c:	4620      	mov	r0, r4
    977e:	e7f9      	b.n	9774 <le_adv_set_random_addr.isra.0+0xa0>
		return le_set_private_addr(adv->id);
    9780:	f7ff ff72 	bl	9668 <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9784:	2301      	movs	r3, #1
    9786:	e7c2      	b.n	970e <le_adv_set_random_addr.isra.0+0x3a>
			return -ENOTSUP;
    9788:	f06f 0022 	mvn.w	r0, #34	; 0x22
    978c:	e7da      	b.n	9744 <le_adv_set_random_addr.isra.0+0x70>
    978e:	bf00      	nop
    9790:	20000000 	.word	0x20000000

00009794 <set_le_adv_enable_legacy>:
{
    9794:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    9796:	4606      	mov	r6, r0
    9798:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    979a:	f242 000a 	movw	r0, #8202	; 0x200a
    979e:	2101      	movs	r1, #1
    97a0:	f7ff fd5a 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    97a4:	4604      	mov	r4, r0
    97a6:	b1e8      	cbz	r0, 97e4 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    97a8:	3008      	adds	r0, #8
	if (enable) {
    97aa:	b1cd      	cbz	r5, 97e0 <set_le_adv_enable_legacy+0x4c>
    97ac:	2101      	movs	r1, #1
    97ae:	f01c fe0c 	bl	263ca <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    97b2:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    97b4:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    97b6:	4620      	mov	r0, r4
    97b8:	9302      	str	r3, [sp, #8]
	state->target = target;
    97ba:	9601      	str	r6, [sp, #4]
	state->val = val;
    97bc:	f88d 500c 	strb.w	r5, [sp, #12]
    97c0:	f013 fe0c 	bl	1d3dc <net_buf_id>
    97c4:	4b09      	ldr	r3, [pc, #36]	; (97ec <set_le_adv_enable_legacy+0x58>)
    97c6:	220c      	movs	r2, #12
    97c8:	fb02 3300 	mla	r3, r2, r0, r3
    97cc:	aa01      	add	r2, sp, #4
    97ce:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    97d0:	4621      	mov	r1, r4
    97d2:	2200      	movs	r2, #0
    97d4:	f242 000a 	movw	r0, #8202	; 0x200a
    97d8:	f7ff fe9e 	bl	9518 <bt_hci_cmd_send_sync>
}
    97dc:	b004      	add	sp, #16
    97de:	bd70      	pop	{r4, r5, r6, pc}
    97e0:	4629      	mov	r1, r5
    97e2:	e7e4      	b.n	97ae <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    97e4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    97e8:	e7f8      	b.n	97dc <set_le_adv_enable_legacy+0x48>
    97ea:	bf00      	nop
    97ec:	2000d718 	.word	0x2000d718

000097f0 <le_update_private_addr>:
{
    97f0:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    97f2:	4b19      	ldr	r3, [pc, #100]	; (9858 <le_update_private_addr+0x68>)
    97f4:	f103 0028 	add.w	r0, r3, #40	; 0x28
    97f8:	f01a ff43 	bl	24682 <atomic_get>
		if (adv &&
    97fc:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    97fe:	f3c0 1580 	ubfx	r5, r0, #6, #1
    9802:	d412      	bmi.n	982a <le_update_private_addr+0x3a>
	uint8_t id = BT_ID_DEFAULT;
    9804:	2400      	movs	r4, #0
	bool adv_enabled = false;
    9806:	4625      	mov	r5, r4
	err = le_set_private_addr(id);
    9808:	4620      	mov	r0, r4
    980a:	f7ff ff2d 	bl	9668 <le_set_private_addr>
	if (err) {
    980e:	4601      	mov	r1, r0
    9810:	b1c8      	cbz	r0, 9846 <le_update_private_addr+0x56>
    9812:	4b12      	ldr	r3, [pc, #72]	; (985c <le_update_private_addr+0x6c>)
    9814:	4a12      	ldr	r2, [pc, #72]	; (9860 <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
    9816:	4813      	ldr	r0, [pc, #76]	; (9864 <le_update_private_addr+0x74>)
    9818:	1ad2      	subs	r2, r2, r3
    981a:	08d2      	lsrs	r2, r2, #3
    981c:	0192      	lsls	r2, r2, #6
}
    981e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
    9822:	f042 0202 	orr.w	r2, r2, #2
    9826:	f018 bd6e 	b.w	22306 <log_1>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    982a:	f103 0028 	add.w	r0, r3, #40	; 0x28
    982e:	f01a ff28 	bl	24682 <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    9832:	0502      	lsls	r2, r0, #20
    9834:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    9838:	d4e4      	bmi.n	9804 <le_update_private_addr+0x14>
			id = adv->id;
    983a:	4618      	mov	r0, r3
    983c:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    9840:	f7ff ffa8 	bl	9794 <set_le_adv_enable_legacy>
    9844:	e7e0      	b.n	9808 <le_update_private_addr+0x18>
	if (adv && adv_enabled) {
    9846:	b12d      	cbz	r5, 9854 <le_update_private_addr+0x64>
}
    9848:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_le_adv_enable_legacy(adv, true);
    984c:	4806      	ldr	r0, [pc, #24]	; (9868 <le_update_private_addr+0x78>)
    984e:	2101      	movs	r1, #1
    9850:	f7ff bfa0 	b.w	9794 <set_le_adv_enable_legacy>
}
    9854:	bd38      	pop	{r3, r4, r5, pc}
    9856:	bf00      	nop
    9858:	20000000 	.word	0x20000000
    985c:	0002775c 	.word	0x0002775c
    9860:	00027814 	.word	0x00027814
    9864:	0002c1c8 	.word	0x0002c1c8
    9868:	20000018 	.word	0x20000018

0000986c <rpa_timeout>:
{
    986c:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
    986e:	2300      	movs	r3, #0
    9870:	f88d 3007 	strb.w	r3, [sp, #7]
	le_rpa_invalidate();
    9874:	f7fe fff4 	bl	8860 <le_rpa_invalidate>
	bt_adv_foreach(adv_is_private_enabled, &adv_enabled);
    9878:	480d      	ldr	r0, [pc, #52]	; (98b0 <rpa_timeout+0x44>)
    987a:	f10d 0107 	add.w	r1, sp, #7
    987e:	f7fe ffbf 	bl	8800 <bt_adv_foreach>
	if (!(adv_enabled ||
    9882:	f89d 3007 	ldrb.w	r3, [sp, #7]
    9886:	b973      	cbnz	r3, 98a6 <rpa_timeout+0x3a>
    9888:	480a      	ldr	r0, [pc, #40]	; (98b4 <rpa_timeout+0x48>)
    988a:	f01a fefa 	bl	24682 <atomic_get>
    988e:	0501      	lsls	r1, r0, #20
    9890:	d409      	bmi.n	98a6 <rpa_timeout+0x3a>
    9892:	4808      	ldr	r0, [pc, #32]	; (98b4 <rpa_timeout+0x48>)
    9894:	f01a fef5 	bl	24682 <atomic_get>
    9898:	0682      	lsls	r2, r0, #26
    989a:	d506      	bpl.n	98aa <rpa_timeout+0x3e>
    989c:	4805      	ldr	r0, [pc, #20]	; (98b4 <rpa_timeout+0x48>)
    989e:	f01a fef0 	bl	24682 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    98a2:	0603      	lsls	r3, r0, #24
    98a4:	d501      	bpl.n	98aa <rpa_timeout+0x3e>
	le_update_private_addr();
    98a6:	f7ff ffa3 	bl	97f0 <le_update_private_addr>
}
    98aa:	b003      	add	sp, #12
    98ac:	f85d fb04 	ldr.w	pc, [sp], #4
    98b0:	0002476b 	.word	0x0002476b
    98b4:	20000094 	.word	0x20000094

000098b8 <hci_le_read_max_data_len>:
{
    98b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
    98ba:	4606      	mov	r6, r0
    98bc:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    98be:	aa01      	add	r2, sp, #4
    98c0:	2100      	movs	r1, #0
    98c2:	f242 002f 	movw	r0, #8239	; 0x202f
    98c6:	f7ff fe27 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    98ca:	4604      	mov	r4, r0
    98cc:	b160      	cbz	r0, 98e8 <hci_le_read_max_data_len+0x30>
    98ce:	490c      	ldr	r1, [pc, #48]	; (9900 <hci_le_read_max_data_len+0x48>)
    98d0:	4b0c      	ldr	r3, [pc, #48]	; (9904 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    98d2:	480d      	ldr	r0, [pc, #52]	; (9908 <hci_le_read_max_data_len+0x50>)
    98d4:	1ac9      	subs	r1, r1, r3
    98d6:	08c9      	lsrs	r1, r1, #3
    98d8:	0189      	lsls	r1, r1, #6
    98da:	f041 0101 	orr.w	r1, r1, #1
    98de:	f018 fd05 	bl	222ec <log_0>
}
    98e2:	4620      	mov	r0, r4
    98e4:	b002      	add	sp, #8
    98e6:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    98e8:	9801      	ldr	r0, [sp, #4]
    98ea:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    98ec:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    98f0:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    98f2:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    98f6:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    98f8:	f013 fe26 	bl	1d548 <net_buf_unref>
	return 0;
    98fc:	e7f1      	b.n	98e2 <hci_le_read_max_data_len+0x2a>
    98fe:	bf00      	nop
    9900:	00027814 	.word	0x00027814
    9904:	0002775c 	.word	0x0002775c
    9908:	0002c1ea 	.word	0x0002c1ea

0000990c <hci_id_add>:
{
    990c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9910:	4605      	mov	r5, r0
    9912:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    9914:	f242 0027 	movw	r0, #8231	; 0x2027
    9918:	2127      	movs	r1, #39	; 0x27
{
    991a:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    991c:	f7ff fc9c 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    9920:	4604      	mov	r4, r0
    9922:	b1e8      	cbz	r0, 9960 <hci_id_add+0x54>
	return net_buf_simple_add(&buf->b, len);
    9924:	2127      	movs	r1, #39	; 0x27
    9926:	3008      	adds	r0, #8
    9928:	f01c fd40 	bl	263ac <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    992c:	4641      	mov	r1, r8
    992e:	4606      	mov	r6, r0
    9930:	f01a feb3 	bl	2469a <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    9934:	4639      	mov	r1, r7
    9936:	2210      	movs	r2, #16
    9938:	1df0      	adds	r0, r6, #7
    993a:	f01a fce3 	bl	24304 <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    993e:	490a      	ldr	r1, [pc, #40]	; (9968 <hci_id_add+0x5c>)
    9940:	3512      	adds	r5, #18
    9942:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    9946:	2210      	movs	r2, #16
    9948:	f106 0017 	add.w	r0, r6, #23
    994c:	f01a fcda 	bl	24304 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    9950:	4621      	mov	r1, r4
    9952:	2200      	movs	r2, #0
}
    9954:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    9958:	f242 0027 	movw	r0, #8231	; 0x2027
    995c:	f7ff bddc 	b.w	9518 <bt_hci_cmd_send_sync>
}
    9960:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9964:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9968:	20000000 	.word	0x20000000

0000996c <hci_set_ad>:
{
    996c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9970:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9972:	2120      	movs	r1, #32
{
    9974:	4682      	mov	sl, r0
    9976:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9978:	f7ff fc6e 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    997c:	4606      	mov	r6, r0
    997e:	2800      	cmp	r0, #0
    9980:	d05c      	beq.n	9a3c <hci_set_ad+0xd0>
    9982:	2120      	movs	r1, #32
    9984:	3008      	adds	r0, #8
    9986:	f01c fd11 	bl	263ac <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    998a:	2220      	movs	r2, #32
    998c:	2100      	movs	r1, #0
    998e:	4681      	mov	r9, r0
    9990:	f01a fce3 	bl	2435a <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    9994:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    9998:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    999c:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    999e:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    99a0:	f8d4 8000 	ldr.w	r8, [r4]
    99a4:	2300      	movs	r3, #0
    99a6:	6862      	ldr	r2, [r4, #4]
    99a8:	4293      	cmp	r3, r2
    99aa:	d30d      	bcc.n	99c8 <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    99ac:	9b00      	ldr	r3, [sp, #0]
    99ae:	3408      	adds	r4, #8
    99b0:	429c      	cmp	r4, r3
    99b2:	d1f5      	bne.n	99a0 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    99b4:	2200      	movs	r2, #0
    99b6:	4631      	mov	r1, r6
    99b8:	4650      	mov	r0, sl
	*data_len = set_data_len;
    99ba:	f889 5000 	strb.w	r5, [r9]
}
    99be:	b003      	add	sp, #12
    99c0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    99c4:	f7ff bda8 	b.w	9518 <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    99c8:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    99cc:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    99d0:	1ca8      	adds	r0, r5, #2
    99d2:	1881      	adds	r1, r0, r2
    99d4:	291f      	cmp	r1, #31
    99d6:	d91a      	bls.n	9a0e <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    99d8:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    99dc:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    99e0:	d101      	bne.n	99e6 <hci_set_ad+0x7a>
    99e2:	2a00      	cmp	r2, #0
    99e4:	dc11      	bgt.n	9a0a <hci_set_ad+0x9e>
    99e6:	4b17      	ldr	r3, [pc, #92]	; (9a44 <hci_set_ad+0xd8>)
    99e8:	4917      	ldr	r1, [pc, #92]	; (9a48 <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    99ea:	4818      	ldr	r0, [pc, #96]	; (9a4c <hci_set_ad+0xe0>)
    99ec:	1ac9      	subs	r1, r1, r3
    99ee:	08c9      	lsrs	r1, r1, #3
    99f0:	0189      	lsls	r1, r1, #6
    99f2:	f041 0101 	orr.w	r1, r1, #1
    99f6:	f018 fc79 	bl	222ec <log_0>
		net_buf_unref(buf);
    99fa:	4630      	mov	r0, r6
    99fc:	f013 fda4 	bl	1d548 <net_buf_unref>
					return -EINVAL;
    9a00:	f06f 0015 	mvn.w	r0, #21
}
    9a04:	b003      	add	sp, #12
    9a06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    9a0a:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    9a0e:	b2d7      	uxtb	r7, r2
    9a10:	1c79      	adds	r1, r7, #1
    9a12:	f80b 1005 	strb.w	r1, [fp, r5]
    9a16:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    9a18:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    9a1a:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    9a1e:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    9a22:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9a26:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    9a28:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    9a2a:	f01a fc6b 	bl	24304 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    9a2e:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    9a30:	443d      	add	r5, r7
    9a32:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    9a34:	3301      	adds	r3, #1
    9a36:	f108 0808 	add.w	r8, r8, #8
    9a3a:	e7b4      	b.n	99a6 <hci_set_ad+0x3a>
		return -ENOBUFS;
    9a3c:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9a40:	e7e0      	b.n	9a04 <hci_set_ad+0x98>
    9a42:	bf00      	nop
    9a44:	0002775c 	.word	0x0002775c
    9a48:	00027814 	.word	0x00027814
    9a4c:	0002c20a 	.word	0x0002c20a

00009a50 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    9a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9a54:	b087      	sub	sp, #28
    9a56:	4606      	mov	r6, r0
    9a58:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    9a5c:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    9a60:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    9a64:	460c      	mov	r4, r1
    9a66:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    9a68:	2100      	movs	r1, #0
    9a6a:	2210      	movs	r2, #16
    9a6c:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    9a6e:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    9a70:	f01a fc73 	bl	2435a <memset>
	if (use_name) {
    9a74:	f1b8 0f00 	cmp.w	r8, #0
    9a78:	d00e      	beq.n	9a98 <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    9a7a:	bbb4      	cbnz	r4, 9aea <le_adv_update.constprop.0+0x9a>
    9a7c:	2d00      	cmp	r5, #0
    9a7e:	d13f      	bne.n	9b00 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    9a80:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 9b34 <le_adv_update.constprop.0+0xe4>
    9a84:	4658      	mov	r0, fp
    9a86:	f01a fbff 	bl	24288 <strlen>
    9a8a:	2309      	movs	r3, #9
    9a8c:	f88d 3000 	strb.w	r3, [sp]
    9a90:	f88d 0001 	strb.w	r0, [sp, #1]
    9a94:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    9a98:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    9a9c:	f1b8 0f00 	cmp.w	r8, #0
    9aa0:	d030      	beq.n	9b04 <le_adv_update.constprop.0+0xb4>
    9aa2:	f1ba 0f00 	cmp.w	sl, #0
    9aa6:	d12d      	bne.n	9b04 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    9aa8:	2301      	movs	r3, #1
			d[1].data = &data;
    9aaa:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    9aae:	9305      	str	r3, [sp, #20]
			d_len = 2;
    9ab0:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    9ab2:	a902      	add	r1, sp, #8
    9ab4:	f242 0008 	movw	r0, #8200	; 0x2008
    9ab8:	f7ff ff58 	bl	996c <hci_set_ad>
		if (err) {
    9abc:	4604      	mov	r4, r0
    9abe:	b938      	cbnz	r0, 9ad0 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    9ac0:	f1ba 0f00 	cmp.w	sl, #0
    9ac4:	d120      	bne.n	9b08 <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9ac6:	2104      	movs	r1, #4
    9ac8:	f106 0010 	add.w	r0, r6, #16
    9acc:	f01a fde8 	bl	246a0 <atomic_or>
}
    9ad0:	4620      	mov	r0, r4
    9ad2:	b007      	add	sp, #28
    9ad4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9ad8:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    9adc:	3a08      	subs	r2, #8
    9ade:	2a01      	cmp	r2, #1
    9ae0:	d925      	bls.n	9b2e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9ae2:	3301      	adds	r3, #1
    9ae4:	429f      	cmp	r7, r3
    9ae6:	d1f7      	bne.n	9ad8 <le_adv_update.constprop.0+0x88>
    9ae8:	e7c8      	b.n	9a7c <le_adv_update.constprop.0+0x2c>
    9aea:	2300      	movs	r3, #0
    9aec:	e7fa      	b.n	9ae4 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9aee:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    9af2:	3a08      	subs	r2, #8
    9af4:	2a01      	cmp	r2, #1
    9af6:	d91a      	bls.n	9b2e <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9af8:	3301      	adds	r3, #1
    9afa:	4599      	cmp	r9, r3
    9afc:	d1f7      	bne.n	9aee <le_adv_update.constprop.0+0x9e>
    9afe:	e7bf      	b.n	9a80 <le_adv_update.constprop.0+0x30>
    9b00:	2300      	movs	r3, #0
    9b02:	e7fa      	b.n	9afa <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    9b04:	2201      	movs	r2, #1
    9b06:	e7d4      	b.n	9ab2 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    9b08:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    9b0c:	2201      	movs	r2, #1
    9b0e:	f1b8 0f00 	cmp.w	r8, #0
    9b12:	d003      	beq.n	9b1c <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    9b14:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    9b16:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    9b1a:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    9b1c:	a902      	add	r1, sp, #8
    9b1e:	f242 0009 	movw	r0, #8201	; 0x2009
    9b22:	f7ff ff23 	bl	996c <hci_set_ad>
		if (err) {
    9b26:	2800      	cmp	r0, #0
    9b28:	d0cd      	beq.n	9ac6 <le_adv_update.constprop.0+0x76>
    9b2a:	4604      	mov	r4, r0
    9b2c:	e7d0      	b.n	9ad0 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    9b2e:	f06f 0415 	mvn.w	r4, #21
    9b32:	e7cd      	b.n	9ad0 <le_adv_update.constprop.0+0x80>
    9b34:	20000160 	.word	0x20000160

00009b38 <conn_auto_initiate>:
{
    9b38:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9b3a:	7b43      	ldrb	r3, [r0, #13]
    9b3c:	2b07      	cmp	r3, #7
{
    9b3e:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9b40:	d169      	bne.n	9c16 <conn_auto_initiate+0xde>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    9b42:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9b44:	4630      	mov	r0, r6
    9b46:	f01a fd9c 	bl	24682 <atomic_get>
    9b4a:	0483      	lsls	r3, r0, #18
    9b4c:	d41b      	bmi.n	9b86 <conn_auto_initiate+0x4e>
    9b4e:	78e3      	ldrb	r3, [r4, #3]
    9b50:	b123      	cbz	r3, 9b5c <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    9b52:	4b32      	ldr	r3, [pc, #200]	; (9c1c <conn_auto_initiate+0xe4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    9b54:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    9b58:	071d      	lsls	r5, r3, #28
    9b5a:	d514      	bpl.n	9b86 <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9b5c:	2102      	movs	r1, #2
    9b5e:	f242 0016 	movw	r0, #8214	; 0x2016
    9b62:	f7ff fb79 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    9b66:	4605      	mov	r5, r0
    9b68:	b168      	cbz	r0, 9b86 <conn_auto_initiate+0x4e>
    9b6a:	2102      	movs	r1, #2
    9b6c:	3008      	adds	r0, #8
    9b6e:	f01c fc1d 	bl	263ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9b72:	8823      	ldrh	r3, [r4, #0]
    9b74:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9b76:	4629      	mov	r1, r5
    9b78:	f242 0016 	movw	r0, #8214	; 0x2016
}
    9b7c:	b004      	add	sp, #16
    9b7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9b82:	f7ff bba3 	b.w	92cc <bt_hci_cmd_send>
    9b86:	4630      	mov	r0, r6
    9b88:	f01a fd7b 	bl	24682 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9b8c:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9b90:	4d22      	ldr	r5, [pc, #136]	; (9c1c <conn_auto_initiate+0xe4>)
    9b92:	f3c0 3100 	ubfx	r1, r0, #12, #1
    9b96:	d11c      	bne.n	9bd2 <conn_auto_initiate+0x9a>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    9b98:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    9b9c:	07d8      	lsls	r0, r3, #31
    9b9e:	d518      	bpl.n	9bd2 <conn_auto_initiate+0x9a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    9ba0:	2302      	movs	r3, #2
    9ba2:	9100      	str	r1, [sp, #0]
    9ba4:	461a      	mov	r2, r3
    9ba6:	4620      	mov	r0, r4
    9ba8:	f01a fe77 	bl	2489a <bt_le_set_phy>
		if (!err) {
    9bac:	4601      	mov	r1, r0
    9bae:	b930      	cbnz	r0, 9bbe <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9bb0:	2180      	movs	r1, #128	; 0x80
    9bb2:	4630      	mov	r0, r6
}
    9bb4:	b004      	add	sp, #16
    9bb6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9bba:	f01a bd71 	b.w	246a0 <atomic_or>
    9bbe:	4a18      	ldr	r2, [pc, #96]	; (9c20 <conn_auto_initiate+0xe8>)
    9bc0:	4b18      	ldr	r3, [pc, #96]	; (9c24 <conn_auto_initiate+0xec>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    9bc2:	4819      	ldr	r0, [pc, #100]	; (9c28 <conn_auto_initiate+0xf0>)
    9bc4:	1ad2      	subs	r2, r2, r3
    9bc6:	08d2      	lsrs	r2, r2, #3
    9bc8:	0192      	lsls	r2, r2, #6
    9bca:	f042 0201 	orr.w	r2, r2, #1
    9bce:	f018 fb9a 	bl	22306 <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    9bd2:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9bd6:	069a      	lsls	r2, r3, #26
    9bd8:	d51d      	bpl.n	9c16 <conn_auto_initiate+0xde>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    9bda:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    9bde:	689b      	ldr	r3, [r3, #8]
    9be0:	079b      	lsls	r3, r3, #30
    9be2:	d518      	bpl.n	9c16 <conn_auto_initiate+0xde>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9be4:	f10d 010e 	add.w	r1, sp, #14
    9be8:	a803      	add	r0, sp, #12
    9bea:	f7ff fe65 	bl	98b8 <hci_le_read_max_data_len>
			if (!err) {
    9bee:	b990      	cbnz	r0, 9c16 <conn_auto_initiate+0xde>
				err = bt_le_set_data_len(conn,
    9bf0:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9bf4:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9bf8:	4620      	mov	r0, r4
    9bfa:	f01a fe31 	bl	24860 <bt_le_set_data_len>
				if (err) {
    9bfe:	4601      	mov	r1, r0
    9c00:	b148      	cbz	r0, 9c16 <conn_auto_initiate+0xde>
    9c02:	4a07      	ldr	r2, [pc, #28]	; (9c20 <conn_auto_initiate+0xe8>)
    9c04:	4b07      	ldr	r3, [pc, #28]	; (9c24 <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
    9c06:	4809      	ldr	r0, [pc, #36]	; (9c2c <conn_auto_initiate+0xf4>)
    9c08:	1ad2      	subs	r2, r2, r3
    9c0a:	08d2      	lsrs	r2, r2, #3
    9c0c:	0192      	lsls	r2, r2, #6
    9c0e:	f042 0201 	orr.w	r2, r2, #1
    9c12:	f018 fb78 	bl	22306 <log_1>
}
    9c16:	b004      	add	sp, #16
    9c18:	bd70      	pop	{r4, r5, r6, pc}
    9c1a:	bf00      	nop
    9c1c:	20000000 	.word	0x20000000
    9c20:	00027814 	.word	0x00027814
    9c24:	0002775c 	.word	0x0002775c
    9c28:	0002c223 	.word	0x0002c223
    9c2c:	0002c23d 	.word	0x0002c23d

00009c30 <le_phy_update_complete>:
{
    9c30:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9c32:	6883      	ldr	r3, [r0, #8]
    9c34:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    9c38:	4628      	mov	r0, r5
    9c3a:	f001 fcb9 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    9c3e:	4604      	mov	r4, r0
    9c40:	b960      	cbnz	r0, 9c5c <le_phy_update_complete+0x2c>
    9c42:	4b11      	ldr	r3, [pc, #68]	; (9c88 <le_phy_update_complete+0x58>)
    9c44:	4a11      	ldr	r2, [pc, #68]	; (9c8c <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9c46:	4812      	ldr	r0, [pc, #72]	; (9c90 <le_phy_update_complete+0x60>)
    9c48:	1ad2      	subs	r2, r2, r3
    9c4a:	08d2      	lsrs	r2, r2, #3
    9c4c:	0192      	lsls	r2, r2, #6
    9c4e:	4629      	mov	r1, r5
    9c50:	f042 0201 	orr.w	r2, r2, #1
}
    9c54:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9c58:	f018 bb55 	b.w	22306 <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    9c5c:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9c5e:	f06f 0180 	mvn.w	r1, #128	; 0x80
    9c62:	4628      	mov	r0, r5
    9c64:	f01a fcfe 	bl	24664 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9c68:	0603      	lsls	r3, r0, #24
    9c6a:	d507      	bpl.n	9c7c <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9c6c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9c70:	4628      	mov	r0, r5
    9c72:	f01a fd15 	bl	246a0 <atomic_or>
		conn_auto_initiate(conn);
    9c76:	4620      	mov	r0, r4
    9c78:	f7ff ff5e 	bl	9b38 <conn_auto_initiate>
	bt_conn_unref(conn);
    9c7c:	4620      	mov	r0, r4
}
    9c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    9c82:	f01a bf77 	b.w	24b74 <bt_conn_unref>
    9c86:	bf00      	nop
    9c88:	0002775c 	.word	0x0002775c
    9c8c:	00027814 	.word	0x00027814
    9c90:	0002bf34 	.word	0x0002bf34

00009c94 <le_remote_feat_complete>:
{
    9c94:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    9c96:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9c98:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    9c9c:	4630      	mov	r0, r6
    9c9e:	f001 fc87 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    9ca2:	4604      	mov	r4, r0
    9ca4:	b960      	cbnz	r0, 9cc0 <le_remote_feat_complete+0x2c>
    9ca6:	4a10      	ldr	r2, [pc, #64]	; (9ce8 <le_remote_feat_complete+0x54>)
    9ca8:	4b10      	ldr	r3, [pc, #64]	; (9cec <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9caa:	4811      	ldr	r0, [pc, #68]	; (9cf0 <le_remote_feat_complete+0x5c>)
    9cac:	1ad2      	subs	r2, r2, r3
    9cae:	08d2      	lsrs	r2, r2, #3
    9cb0:	0192      	lsls	r2, r2, #6
    9cb2:	4631      	mov	r1, r6
    9cb4:	f042 0201 	orr.w	r2, r2, #1
}
    9cb8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9cbc:	f018 bb23 	b.w	22306 <log_1>
	if (!evt->status) {
    9cc0:	782b      	ldrb	r3, [r5, #0]
    9cc2:	b923      	cbnz	r3, 9cce <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    9cc4:	2208      	movs	r2, #8
    9cc6:	1ce9      	adds	r1, r5, #3
    9cc8:	30ac      	adds	r0, #172	; 0xac
    9cca:	f01a fb1b 	bl	24304 <memcpy>
    9cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    9cd2:	1d20      	adds	r0, r4, #4
    9cd4:	f01a fce4 	bl	246a0 <atomic_or>
	conn_auto_initiate(conn);
    9cd8:	4620      	mov	r0, r4
    9cda:	f7ff ff2d 	bl	9b38 <conn_auto_initiate>
	bt_conn_unref(conn);
    9cde:	4620      	mov	r0, r4
}
    9ce0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9ce4:	f01a bf46 	b.w	24b74 <bt_conn_unref>
    9ce8:	00027814 	.word	0x00027814
    9cec:	0002775c 	.word	0x0002775c
    9cf0:	0002bf34 	.word	0x0002bf34

00009cf4 <bt_unpair>:
{
    9cf4:	b530      	push	{r4, r5, lr}
    9cf6:	b085      	sub	sp, #20
    9cf8:	460d      	mov	r5, r1
    9cfa:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    9cfe:	b9c8      	cbnz	r0, 9d34 <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9d00:	b949      	cbnz	r1, 9d16 <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    9d02:	490e      	ldr	r1, [pc, #56]	; (9d3c <bt_unpair+0x48>)
    9d04:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9d08:	f10d 0207 	add.w	r2, sp, #7
    9d0c:	f006 fa68 	bl	101e0 <bt_foreach_bond>
		return 0;
    9d10:	2000      	movs	r0, #0
}
    9d12:	b005      	add	sp, #20
    9d14:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    9d16:	9002      	str	r0, [sp, #8]
    9d18:	a902      	add	r1, sp, #8
    9d1a:	f8cd 000b 	str.w	r0, [sp, #11]
    9d1e:	4628      	mov	r0, r5
    9d20:	f01a fcb5 	bl	2468e <bt_addr_le_cmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9d24:	2800      	cmp	r0, #0
    9d26:	d0ec      	beq.n	9d02 <bt_unpair+0xe>
	unpair(id, addr);
    9d28:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9d2c:	4629      	mov	r1, r5
    9d2e:	f7fe fe47 	bl	89c0 <unpair>
	return 0;
    9d32:	e7ed      	b.n	9d10 <bt_unpair+0x1c>
		return -EINVAL;
    9d34:	f06f 0015 	mvn.w	r0, #21
    9d38:	e7eb      	b.n	9d12 <bt_unpair+0x1e>
    9d3a:	bf00      	nop
    9d3c:	000246f7 	.word	0x000246f7

00009d40 <bt_security_err_get>:
	switch (hci_err) {
    9d40:	2829      	cmp	r0, #41	; 0x29
    9d42:	bf9a      	itte	ls
    9d44:	4b01      	ldrls	r3, [pc, #4]	; (9d4c <bt_security_err_get+0xc>)
    9d46:	5c18      	ldrbls	r0, [r3, r0]
{
    9d48:	2008      	movhi	r0, #8
}
    9d4a:	4770      	bx	lr
    9d4c:	0002c822 	.word	0x0002c822

00009d50 <hci_encrypt_key_refresh_complete>:
{
    9d50:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    9d52:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9d54:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    9d58:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    9d5a:	4630      	mov	r0, r6
    9d5c:	f001 fc28 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    9d60:	4604      	mov	r4, r0
    9d62:	b960      	cbnz	r0, 9d7e <hci_encrypt_key_refresh_complete+0x2e>
    9d64:	4a1f      	ldr	r2, [pc, #124]	; (9de4 <hci_encrypt_key_refresh_complete+0x94>)
    9d66:	4b20      	ldr	r3, [pc, #128]	; (9de8 <hci_encrypt_key_refresh_complete+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9d68:	4820      	ldr	r0, [pc, #128]	; (9dec <hci_encrypt_key_refresh_complete+0x9c>)
    9d6a:	1ad2      	subs	r2, r2, r3
    9d6c:	08d2      	lsrs	r2, r2, #3
    9d6e:	0192      	lsls	r2, r2, #6
    9d70:	4631      	mov	r1, r6
    9d72:	f042 0201 	orr.w	r2, r2, #1
}
    9d76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    9d7a:	f018 bac4 	b.w	22306 <log_1>
	if (status) {
    9d7e:	b165      	cbz	r5, 9d9a <hci_encrypt_key_refresh_complete+0x4a>
		bt_conn_security_changed(conn, status,
    9d80:	4628      	mov	r0, r5
    9d82:	f7ff ffdd 	bl	9d40 <bt_security_err_get>
    9d86:	4629      	mov	r1, r5
    9d88:	4602      	mov	r2, r0
    9d8a:	4620      	mov	r0, r4
    9d8c:	f001 fa6c 	bl	b268 <bt_conn_security_changed>
	bt_conn_unref(conn);
    9d90:	4620      	mov	r0, r4
}
    9d92:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9d96:	f01a beed 	b.w	24b74 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9d9a:	7883      	ldrb	r3, [r0, #2]
    9d9c:	2b01      	cmp	r3, #1
    9d9e:	d107      	bne.n	9db0 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
    9da0:	f006 f930 	bl	10004 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9da4:	4620      	mov	r0, r4
    9da6:	f01a fc36 	bl	24616 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    9daa:	2800      	cmp	r0, #0
    9dac:	bf08      	it	eq
    9dae:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    9db0:	4628      	mov	r0, r5
    9db2:	f7ff ffc5 	bl	9d40 <bt_security_err_get>
    9db6:	4629      	mov	r1, r5
    9db8:	4602      	mov	r2, r0
    9dba:	4620      	mov	r0, r4
    9dbc:	f001 fa54 	bl	b268 <bt_conn_security_changed>
	if (status) {
    9dc0:	2d00      	cmp	r5, #0
    9dc2:	d0e5      	beq.n	9d90 <hci_encrypt_key_refresh_complete+0x40>
    9dc4:	4b08      	ldr	r3, [pc, #32]	; (9de8 <hci_encrypt_key_refresh_complete+0x98>)
    9dc6:	4907      	ldr	r1, [pc, #28]	; (9de4 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Failed to set required security level");
    9dc8:	4809      	ldr	r0, [pc, #36]	; (9df0 <hci_encrypt_key_refresh_complete+0xa0>)
    9dca:	1ac9      	subs	r1, r1, r3
    9dcc:	08c9      	lsrs	r1, r1, #3
    9dce:	0189      	lsls	r1, r1, #6
    9dd0:	f041 0101 	orr.w	r1, r1, #1
    9dd4:	f018 fa8a 	bl	222ec <log_0>
		bt_conn_disconnect(conn, status);
    9dd8:	4629      	mov	r1, r5
    9dda:	4620      	mov	r0, r4
    9ddc:	f01a ff05 	bl	24bea <bt_conn_disconnect>
    9de0:	e7d6      	b.n	9d90 <hci_encrypt_key_refresh_complete+0x40>
    9de2:	bf00      	nop
    9de4:	00027814 	.word	0x00027814
    9de8:	0002775c 	.word	0x0002775c
    9dec:	0002bf58 	.word	0x0002bf58
    9df0:	0002c259 	.word	0x0002c259

00009df4 <hci_encrypt_change>:
{
    9df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    9df6:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9df8:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    9dfc:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    9dfe:	4638      	mov	r0, r7
    9e00:	f001 fbd6 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    9e04:	4604      	mov	r4, r0
    9e06:	b960      	cbnz	r0, 9e22 <hci_encrypt_change+0x2e>
    9e08:	4b20      	ldr	r3, [pc, #128]	; (9e8c <hci_encrypt_change+0x98>)
    9e0a:	4a21      	ldr	r2, [pc, #132]	; (9e90 <hci_encrypt_change+0x9c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9e0c:	4821      	ldr	r0, [pc, #132]	; (9e94 <hci_encrypt_change+0xa0>)
    9e0e:	1ad2      	subs	r2, r2, r3
    9e10:	08d2      	lsrs	r2, r2, #3
    9e12:	0192      	lsls	r2, r2, #6
    9e14:	4639      	mov	r1, r7
    9e16:	f042 0201 	orr.w	r2, r2, #1
}
    9e1a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    9e1e:	f018 ba72 	b.w	22306 <log_1>
	if (status) {
    9e22:	b165      	cbz	r5, 9e3e <hci_encrypt_change+0x4a>
		bt_conn_security_changed(conn, status,
    9e24:	4628      	mov	r0, r5
    9e26:	f7ff ff8b 	bl	9d40 <bt_security_err_get>
    9e2a:	4629      	mov	r1, r5
    9e2c:	4602      	mov	r2, r0
    9e2e:	4620      	mov	r0, r4
    9e30:	f001 fa1a 	bl	b268 <bt_conn_security_changed>
	bt_conn_unref(conn);
    9e34:	4620      	mov	r0, r4
}
    9e36:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    9e3a:	f01a be9b 	b.w	24b74 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9e3e:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    9e40:	78f3      	ldrb	r3, [r6, #3]
    9e42:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    9e44:	2a01      	cmp	r2, #1
    9e46:	d108      	bne.n	9e5a <hci_encrypt_change+0x66>
		if (conn->encrypt) {
    9e48:	b10b      	cbz	r3, 9e4e <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    9e4a:	f006 f8db 	bl	10004 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9e4e:	4620      	mov	r0, r4
    9e50:	f01a fbe1 	bl	24616 <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    9e54:	2800      	cmp	r0, #0
    9e56:	bf08      	it	eq
    9e58:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    9e5a:	4628      	mov	r0, r5
    9e5c:	f7ff ff70 	bl	9d40 <bt_security_err_get>
    9e60:	4629      	mov	r1, r5
    9e62:	4602      	mov	r2, r0
    9e64:	4620      	mov	r0, r4
    9e66:	f001 f9ff 	bl	b268 <bt_conn_security_changed>
	if (status) {
    9e6a:	2d00      	cmp	r5, #0
    9e6c:	d0e2      	beq.n	9e34 <hci_encrypt_change+0x40>
    9e6e:	4b07      	ldr	r3, [pc, #28]	; (9e8c <hci_encrypt_change+0x98>)
    9e70:	4907      	ldr	r1, [pc, #28]	; (9e90 <hci_encrypt_change+0x9c>)
		BT_ERR("Failed to set required security level");
    9e72:	4809      	ldr	r0, [pc, #36]	; (9e98 <hci_encrypt_change+0xa4>)
    9e74:	1ac9      	subs	r1, r1, r3
    9e76:	08c9      	lsrs	r1, r1, #3
    9e78:	0189      	lsls	r1, r1, #6
    9e7a:	f041 0101 	orr.w	r1, r1, #1
    9e7e:	f018 fa35 	bl	222ec <log_0>
		bt_conn_disconnect(conn, status);
    9e82:	4629      	mov	r1, r5
    9e84:	4620      	mov	r0, r4
    9e86:	f01a feb0 	bl	24bea <bt_conn_disconnect>
    9e8a:	e7d3      	b.n	9e34 <hci_encrypt_change+0x40>
    9e8c:	0002775c 	.word	0x0002775c
    9e90:	00027814 	.word	0x00027814
    9e94:	0002bf58 	.word	0x0002bf58
    9e98:	0002c259 	.word	0x0002c259

00009e9c <bt_id_add>:
{
    9e9c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9e9e:	4c5d      	ldr	r4, [pc, #372]	; (a014 <bt_id_add+0x178>)
    9ea0:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    9ea4:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    9ea8:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    9eaa:	b10a      	cbz	r2, 9eb0 <bt_id_add+0x14>
    9eac:	429a      	cmp	r2, r3
    9eae:	d208      	bcs.n	9ec2 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    9eb0:	3301      	adds	r3, #1
    9eb2:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    9eb6:	7a2b      	ldrb	r3, [r5, #8]
    9eb8:	f043 0304 	orr.w	r3, r3, #4
    9ebc:	722b      	strb	r3, [r5, #8]
}
    9ebe:	b003      	add	sp, #12
    9ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    9ec2:	2100      	movs	r1, #0
    9ec4:	2206      	movs	r2, #6
    9ec6:	4608      	mov	r0, r1
    9ec8:	f001 fcaa 	bl	b820 <bt_conn_lookup_state_le>
	if (conn) {
    9ecc:	4606      	mov	r6, r0
    9ece:	b178      	cbz	r0, 9ef0 <bt_id_add+0x54>
    9ed0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    9ed4:	f104 0094 	add.w	r0, r4, #148	; 0x94
    9ed8:	f01a fbe2 	bl	246a0 <atomic_or>
	keys->state |= flag;
    9edc:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    9ede:	4630      	mov	r0, r6
	keys->state |= flag;
    9ee0:	f043 0301 	orr.w	r3, r3, #1
    9ee4:	722b      	strb	r3, [r5, #8]
}
    9ee6:	b003      	add	sp, #12
    9ee8:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    9eec:	f01a be42 	b.w	24b74 <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    9ef0:	4601      	mov	r1, r0
    9ef2:	4849      	ldr	r0, [pc, #292]	; (a018 <bt_id_add+0x17c>)
    9ef4:	f7fe fc84 	bl	8800 <bt_adv_foreach>
	if (bt_dev.le.rl_entries) {
    9ef8:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9efc:	b173      	cbz	r3, 9f1c <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    9efe:	4630      	mov	r0, r6
    9f00:	f01a fc73 	bl	247ea <addr_res_enable>
		if (err) {
    9f04:	b150      	cbz	r0, 9f1c <bt_id_add+0x80>
    9f06:	4945      	ldr	r1, [pc, #276]	; (a01c <bt_id_add+0x180>)
    9f08:	4b45      	ldr	r3, [pc, #276]	; (a020 <bt_id_add+0x184>)
			BT_WARN("Failed to disable address resolution");
    9f0a:	4846      	ldr	r0, [pc, #280]	; (a024 <bt_id_add+0x188>)
    9f0c:	1ac9      	subs	r1, r1, r3
    9f0e:	08c9      	lsrs	r1, r1, #3
    9f10:	0189      	lsls	r1, r1, #6
    9f12:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    9f16:	f018 f9e9 	bl	222ec <log_0>
	if (err) {
    9f1a:	e023      	b.n	9f64 <bt_id_add+0xc8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    9f1c:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    9f20:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    9f24:	429a      	cmp	r2, r3
    9f26:	d127      	bne.n	9f78 <bt_id_add+0xdc>
    9f28:	4b3d      	ldr	r3, [pc, #244]	; (a020 <bt_id_add+0x184>)
    9f2a:	4e3c      	ldr	r6, [pc, #240]	; (a01c <bt_id_add+0x180>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    9f2c:	483e      	ldr	r0, [pc, #248]	; (a028 <bt_id_add+0x18c>)
    9f2e:	1af6      	subs	r6, r6, r3
    9f30:	08f6      	lsrs	r6, r6, #3
    9f32:	01b6      	lsls	r6, r6, #6
    9f34:	f046 0102 	orr.w	r1, r6, #2
    9f38:	f018 f9d8 	bl	222ec <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    9f3c:	2200      	movs	r2, #0
    9f3e:	4611      	mov	r1, r2
    9f40:	f242 0029 	movw	r0, #8233	; 0x2029
    9f44:	f7ff fae8 	bl	9518 <bt_hci_cmd_send_sync>
		if (err) {
    9f48:	b118      	cbz	r0, 9f52 <bt_id_add+0xb6>
			BT_ERR("Failed to clear resolution list");
    9f4a:	4838      	ldr	r0, [pc, #224]	; (a02c <bt_id_add+0x190>)
    9f4c:	f046 0101 	orr.w	r1, r6, #1
    9f50:	e7e1      	b.n	9f16 <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
    9f52:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9f56:	3301      	adds	r3, #1
    9f58:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    9f5c:	7a2b      	ldrb	r3, [r5, #8]
    9f5e:	f043 0304 	orr.w	r3, r3, #4
    9f62:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    9f64:	2001      	movs	r0, #1
    9f66:	f01a fc40 	bl	247ea <addr_res_enable>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    9f6a:	4831      	ldr	r0, [pc, #196]	; (a030 <bt_id_add+0x194>)
    9f6c:	2100      	movs	r1, #0
}
    9f6e:	b003      	add	sp, #12
    9f70:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    9f74:	f7fe bc44 	b.w	8800 <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    9f78:	462a      	mov	r2, r5
    9f7a:	1c6f      	adds	r7, r5, #1
    9f7c:	f812 0b2a 	ldrb.w	r0, [r2], #42
    9f80:	4639      	mov	r1, r7
    9f82:	f7ff fcc3 	bl	990c <hci_id_add>
	if (err) {
    9f86:	4606      	mov	r6, r0
    9f88:	b140      	cbz	r0, 9f9c <bt_id_add+0x100>
    9f8a:	4924      	ldr	r1, [pc, #144]	; (a01c <bt_id_add+0x180>)
    9f8c:	4b24      	ldr	r3, [pc, #144]	; (a020 <bt_id_add+0x184>)
		BT_ERR("Failed to add IRK to controller");
    9f8e:	4829      	ldr	r0, [pc, #164]	; (a034 <bt_id_add+0x198>)
    9f90:	1ac9      	subs	r1, r1, r3
    9f92:	08c9      	lsrs	r1, r1, #3
    9f94:	0189      	lsls	r1, r1, #6
    9f96:	f041 0101 	orr.w	r1, r1, #1
    9f9a:	e7bc      	b.n	9f16 <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
    9f9c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    9fa0:	3301      	adds	r3, #1
    9fa2:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    9fa6:	7a2b      	ldrb	r3, [r5, #8]
    9fa8:	f043 0304 	orr.w	r3, r3, #4
    9fac:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    9fae:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    9fb2:	075b      	lsls	r3, r3, #29
    9fb4:	d408      	bmi.n	9fc8 <bt_id_add+0x12c>
    9fb6:	4919      	ldr	r1, [pc, #100]	; (a01c <bt_id_add+0x180>)
    9fb8:	4b19      	ldr	r3, [pc, #100]	; (a020 <bt_id_add+0x184>)
		BT_WARN("Set privacy mode command is not supported");
    9fba:	481f      	ldr	r0, [pc, #124]	; (a038 <bt_id_add+0x19c>)
    9fbc:	1ac9      	subs	r1, r1, r3
    9fbe:	08c9      	lsrs	r1, r1, #3
    9fc0:	0189      	lsls	r1, r1, #6
    9fc2:	f041 0102 	orr.w	r1, r1, #2
    9fc6:	e7a6      	b.n	9f16 <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
    9fc8:	4639      	mov	r1, r7
    9fca:	4668      	mov	r0, sp
    9fcc:	f01a fb65 	bl	2469a <bt_addr_le_copy>
	cp.mode = mode;
    9fd0:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9fd2:	2108      	movs	r1, #8
    9fd4:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    9fd8:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    9fdc:	f7ff f93c 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    9fe0:	4604      	mov	r4, r0
    9fe2:	b940      	cbnz	r0, 9ff6 <bt_id_add+0x15a>
    9fe4:	490d      	ldr	r1, [pc, #52]	; (a01c <bt_id_add+0x180>)
    9fe6:	4b0e      	ldr	r3, [pc, #56]	; (a020 <bt_id_add+0x184>)
		BT_ERR("Failed to set privacy mode");
    9fe8:	4814      	ldr	r0, [pc, #80]	; (a03c <bt_id_add+0x1a0>)
    9fea:	1ac9      	subs	r1, r1, r3
    9fec:	08c9      	lsrs	r1, r1, #3
    9fee:	0189      	lsls	r1, r1, #6
    9ff0:	f041 0101 	orr.w	r1, r1, #1
    9ff4:	e78f      	b.n	9f16 <bt_id_add+0x7a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9ff6:	2208      	movs	r2, #8
    9ff8:	4669      	mov	r1, sp
    9ffa:	4410      	add	r0, r2
    9ffc:	f01c f9dc 	bl	263b8 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    a000:	4632      	mov	r2, r6
    a002:	4621      	mov	r1, r4
    a004:	f242 004e 	movw	r0, #8270	; 0x204e
    a008:	f7ff fa86 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    a00c:	2800      	cmp	r0, #0
    a00e:	d0a9      	beq.n	9f64 <bt_id_add+0xc8>
    a010:	e7e8      	b.n	9fe4 <bt_id_add+0x148>
    a012:	bf00      	nop
    a014:	20000000 	.word	0x20000000
    a018:	0002478b 	.word	0x0002478b
    a01c:	00027814 	.word	0x00027814
    a020:	0002775c 	.word	0x0002775c
    a024:	0002c27f 	.word	0x0002c27f
    a028:	0002c2a4 	.word	0x0002c2a4
    a02c:	0002c2d5 	.word	0x0002c2d5
    a030:	000247b5 	.word	0x000247b5
    a034:	0002c2f5 	.word	0x0002c2f5
    a038:	0002c315 	.word	0x0002c315
    a03c:	0002c33f 	.word	0x0002c33f

0000a040 <bt_id_del>:
{
    a040:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    a044:	4d44      	ldr	r5, [pc, #272]	; (a158 <bt_id_del+0x118>)
    a046:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a04a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
{
    a04e:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    a050:	b112      	cbz	r2, a058 <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a052:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    a054:	4293      	cmp	r3, r2
    a056:	dd08      	ble.n	a06a <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    a058:	3b01      	subs	r3, #1
    a05a:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    a05e:	7a23      	ldrb	r3, [r4, #8]
    a060:	f023 0304 	bic.w	r3, r3, #4
    a064:	7223      	strb	r3, [r4, #8]
}
    a066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    a06a:	2100      	movs	r1, #0
    a06c:	2206      	movs	r2, #6
    a06e:	4608      	mov	r0, r1
    a070:	f001 fbd6 	bl	b820 <bt_conn_lookup_state_le>
	if (conn) {
    a074:	4606      	mov	r6, r0
    a076:	b170      	cbz	r0, a096 <bt_id_del+0x56>
    a078:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a07c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    a080:	f01a fb0e 	bl	246a0 <atomic_or>
	keys->state |= flag;
    a084:	7a23      	ldrb	r3, [r4, #8]
    a086:	f043 0302 	orr.w	r3, r3, #2
    a08a:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    a08c:	4630      	mov	r0, r6
}
    a08e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    a092:	f01a bd6f 	b.w	24b74 <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    a096:	4601      	mov	r1, r0
    a098:	4830      	ldr	r0, [pc, #192]	; (a15c <bt_id_del+0x11c>)
    a09a:	f7fe fbb1 	bl	8800 <bt_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    a09e:	4630      	mov	r0, r6
    a0a0:	f01a fba3 	bl	247ea <addr_res_enable>
	if (err) {
    a0a4:	4606      	mov	r6, r0
    a0a6:	b1b0      	cbz	r0, a0d6 <bt_id_del+0x96>
    a0a8:	4a2d      	ldr	r2, [pc, #180]	; (a160 <bt_id_del+0x120>)
    a0aa:	4b2e      	ldr	r3, [pc, #184]	; (a164 <bt_id_del+0x124>)
    a0ac:	1ad2      	subs	r2, r2, r3
    a0ae:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    a0b0:	0192      	lsls	r2, r2, #6
    a0b2:	4601      	mov	r1, r0
    a0b4:	f042 0201 	orr.w	r2, r2, #1
    a0b8:	482b      	ldr	r0, [pc, #172]	; (a168 <bt_id_del+0x128>)
    a0ba:	f018 f924 	bl	22306 <log_1>
	if (bt_dev.le.rl_entries) {
    a0be:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a0c2:	b113      	cbz	r3, a0ca <bt_id_del+0x8a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    a0c4:	2001      	movs	r0, #1
    a0c6:	f01a fb90 	bl	247ea <addr_res_enable>
}
    a0ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    a0ce:	4827      	ldr	r0, [pc, #156]	; (a16c <bt_id_del+0x12c>)
    a0d0:	2100      	movs	r1, #0
    a0d2:	f7fe bb95 	b.w	8800 <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a0d6:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a0da:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
    a0de:	429a      	cmp	r2, r3
    a0e0:	d20c      	bcs.n	a0fc <bt_id_del+0xbc>
		bt_dev.le.rl_entries--;
    a0e2:	3b01      	subs	r3, #1
    a0e4:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    a0e8:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a0ea:	4921      	ldr	r1, [pc, #132]	; (a170 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    a0ec:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a0f0:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    a0f2:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a0f4:	2002      	movs	r0, #2
    a0f6:	f006 f889 	bl	1020c <bt_keys_foreach>
		goto done;
    a0fa:	e7e0      	b.n	a0be <bt_id_del+0x7e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    a0fc:	2107      	movs	r1, #7
    a0fe:	f242 0028 	movw	r0, #8232	; 0x2028
    a102:	f7ff f8a9 	bl	9258 <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    a106:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    a10a:	4607      	mov	r7, r0
    a10c:	b950      	cbnz	r0, a124 <bt_id_del+0xe4>
    a10e:	4b15      	ldr	r3, [pc, #84]	; (a164 <bt_id_del+0x124>)
    a110:	4913      	ldr	r1, [pc, #76]	; (a160 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
    a112:	4818      	ldr	r0, [pc, #96]	; (a174 <bt_id_del+0x134>)
    a114:	1ac9      	subs	r1, r1, r3
    a116:	08c9      	lsrs	r1, r1, #3
    a118:	0189      	lsls	r1, r1, #6
    a11a:	f041 0101 	orr.w	r1, r1, #1
    a11e:	f018 f8e5 	bl	222ec <log_0>
		goto done;
    a122:	e7cc      	b.n	a0be <bt_id_del+0x7e>
	return net_buf_simple_add(&buf->b, len);
    a124:	2107      	movs	r1, #7
    a126:	3008      	adds	r0, #8
    a128:	f01c f940 	bl	263ac <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    a12c:	4641      	mov	r1, r8
    a12e:	f01a fab4 	bl	2469a <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    a132:	4632      	mov	r2, r6
    a134:	4639      	mov	r1, r7
    a136:	f242 0028 	movw	r0, #8232	; 0x2028
    a13a:	f7ff f9ed 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    a13e:	2800      	cmp	r0, #0
    a140:	d1e5      	bne.n	a10e <bt_id_del+0xce>
	bt_dev.le.rl_entries--;
    a142:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a146:	3b01      	subs	r3, #1
    a148:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    a14c:	7a23      	ldrb	r3, [r4, #8]
    a14e:	f023 0304 	bic.w	r3, r3, #4
    a152:	7223      	strb	r3, [r4, #8]
    a154:	e7b3      	b.n	a0be <bt_id_del+0x7e>
    a156:	bf00      	nop
    a158:	20000000 	.word	0x20000000
    a15c:	0002478b 	.word	0x0002478b
    a160:	00027814 	.word	0x00027814
    a164:	0002775c 	.word	0x0002775c
    a168:	0002c35a 	.word	0x0002c35a
    a16c:	000247b5 	.word	0x000247b5
    a170:	000247d5 	.word	0x000247d5
    a174:	0002c387 	.word	0x0002c387

0000a178 <hci_event_prio>:
{
    a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a17c:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    a17e:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    a182:	4630      	mov	r0, r6
    a184:	f01c f949 	bl	2641a <net_buf_simple_headroom>
	state->len = buf->len;
    a188:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a18c:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    a190:	4605      	mov	r5, r0
    a192:	d80c      	bhi.n	a1ae <hci_event_prio+0x36>
    a194:	4a1c      	ldr	r2, [pc, #112]	; (a208 <hci_event_prio+0x90>)
    a196:	491d      	ldr	r1, [pc, #116]	; (a20c <hci_event_prio+0x94>)
    a198:	481d      	ldr	r0, [pc, #116]	; (a210 <hci_event_prio+0x98>)
    a19a:	f641 03b8 	movw	r3, #6328	; 0x18b8
    a19e:	f017 fc0f 	bl	219c0 <printk>
    a1a2:	4040      	eors	r0, r0
    a1a4:	f380 8811 	msr	BASEPRI, r0
    a1a8:	f04f 0003 	mov.w	r0, #3
    a1ac:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a1ae:	4630      	mov	r0, r6
    a1b0:	2102      	movs	r1, #2
    a1b2:	f01c f922 	bl	263fa <net_buf_simple_pull_mem>
    a1b6:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a1b8:	7800      	ldrb	r0, [r0, #0]
    a1ba:	f01a fa1a 	bl	245f2 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a1be:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a1c0:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a1c2:	d40c      	bmi.n	a1de <hci_event_prio+0x66>
    a1c4:	4a10      	ldr	r2, [pc, #64]	; (a208 <hci_event_prio+0x90>)
    a1c6:	4913      	ldr	r1, [pc, #76]	; (a214 <hci_event_prio+0x9c>)
    a1c8:	4811      	ldr	r0, [pc, #68]	; (a210 <hci_event_prio+0x98>)
    a1ca:	f641 03bc 	movw	r3, #6332	; 0x18bc
    a1ce:	f017 fbf7 	bl	219c0 <printk>
    a1d2:	4040      	eors	r0, r0
    a1d4:	f380 8811 	msr	BASEPRI, r0
    a1d8:	f04f 0003 	mov.w	r0, #3
    a1dc:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    a1de:	2305      	movs	r3, #5
    a1e0:	4a0d      	ldr	r2, [pc, #52]	; (a218 <hci_event_prio+0xa0>)
    a1e2:	7838      	ldrb	r0, [r7, #0]
    a1e4:	4621      	mov	r1, r4
    a1e6:	f7fe fdef 	bl	8dc8 <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    a1ea:	07b3      	lsls	r3, r6, #30
    a1ec:	d507      	bpl.n	a1fe <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    a1ee:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    a1f0:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    a1f4:	fa10 f585 	uxtah	r5, r0, r5
    a1f8:	60a5      	str	r5, [r4, #8]
}
    a1fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    a1fe:	4620      	mov	r0, r4
}
    a200:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    a204:	f013 b9a0 	b.w	1d548 <net_buf_unref>
    a208:	0002c070 	.word	0x0002c070
    a20c:	0002c3ac 	.word	0x0002c3ac
    a210:	0002c0ad 	.word	0x0002c0ad
    a214:	0002c3c5 	.word	0x0002c3c5
    a218:	00027f70 	.word	0x00027f70

0000a21c <bt_recv>:
{
    a21c:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    a21e:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    a220:	2901      	cmp	r1, #1
{
    a222:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    a224:	d04b      	beq.n	a2be <bt_recv+0xa2>
    a226:	2903      	cmp	r1, #3
    a228:	d178      	bne.n	a31c <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a22a:	8983      	ldrh	r3, [r0, #12]
    a22c:	2b03      	cmp	r3, #3
    a22e:	d80c      	bhi.n	a24a <bt_recv+0x2e>
    a230:	4a42      	ldr	r2, [pc, #264]	; (a33c <bt_recv+0x120>)
    a232:	4943      	ldr	r1, [pc, #268]	; (a340 <bt_recv+0x124>)
    a234:	4843      	ldr	r0, [pc, #268]	; (a344 <bt_recv+0x128>)
    a236:	f240 43ac 	movw	r3, #1196	; 0x4ac
    a23a:	f017 fbc1 	bl	219c0 <printk>
    a23e:	4040      	eors	r0, r0
    a240:	f380 8811 	msr	BASEPRI, r0
    a244:	f04f 0003 	mov.w	r0, #3
    a248:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a24a:	2104      	movs	r1, #4
    a24c:	f104 0008 	add.w	r0, r4, #8
    a250:	f01c f8d3 	bl	263fa <net_buf_simple_pull_mem>
	if (buf->len != len) {
    a254:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    a256:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    a258:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a25a:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    a25c:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    a260:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    a262:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a264:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    a266:	d00d      	beq.n	a284 <bt_recv+0x68>
    a268:	4837      	ldr	r0, [pc, #220]	; (a348 <bt_recv+0x12c>)
    a26a:	4b38      	ldr	r3, [pc, #224]	; (a34c <bt_recv+0x130>)
    a26c:	1a1b      	subs	r3, r3, r0
    a26e:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    a270:	019b      	lsls	r3, r3, #6
    a272:	4837      	ldr	r0, [pc, #220]	; (a350 <bt_recv+0x134>)
    a274:	f043 0301 	orr.w	r3, r3, #1
    a278:	f018 f859 	bl	2232e <log_2>
	net_buf_unref(buf);
    a27c:	4620      	mov	r0, r4
    a27e:	f013 f963 	bl	1d548 <net_buf_unref>
    a282:	e01a      	b.n	a2ba <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    a284:	f001 f994 	bl	b5b0 <bt_conn_lookup_handle>
	if (!conn) {
    a288:	4605      	mov	r5, r0
    a28a:	b958      	cbnz	r0, a2a4 <bt_recv+0x88>
    a28c:	4b2e      	ldr	r3, [pc, #184]	; (a348 <bt_recv+0x12c>)
    a28e:	4a2f      	ldr	r2, [pc, #188]	; (a34c <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    a290:	8ae1      	ldrh	r1, [r4, #22]
    a292:	4830      	ldr	r0, [pc, #192]	; (a354 <bt_recv+0x138>)
    a294:	1ad2      	subs	r2, r2, r3
    a296:	08d2      	lsrs	r2, r2, #3
    a298:	0192      	lsls	r2, r2, #6
    a29a:	f042 0201 	orr.w	r2, r2, #1
    a29e:	f018 f832 	bl	22306 <log_1>
		net_buf_unref(buf);
    a2a2:	e7eb      	b.n	a27c <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    a2a4:	f001 fc40 	bl	bb28 <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    a2a8:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    a2aa:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    a2ac:	4621      	mov	r1, r4
    a2ae:	4628      	mov	r0, r5
    a2b0:	f001 f828 	bl	b304 <bt_conn_recv>
	bt_conn_unref(conn);
    a2b4:	4628      	mov	r0, r5
    a2b6:	f01a fc5d 	bl	24b74 <bt_conn_unref>
		return 0;
    a2ba:	2000      	movs	r0, #0
}
    a2bc:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a2be:	8983      	ldrh	r3, [r0, #12]
    a2c0:	2b01      	cmp	r3, #1
    a2c2:	d80c      	bhi.n	a2de <bt_recv+0xc2>
    a2c4:	4a1d      	ldr	r2, [pc, #116]	; (a33c <bt_recv+0x120>)
    a2c6:	491e      	ldr	r1, [pc, #120]	; (a340 <bt_recv+0x124>)
    a2c8:	481e      	ldr	r0, [pc, #120]	; (a344 <bt_recv+0x128>)
    a2ca:	f241 4305 	movw	r3, #5125	; 0x1405
    a2ce:	f017 fb77 	bl	219c0 <printk>
    a2d2:	4040      	eors	r0, r0
    a2d4:	f380 8811 	msr	BASEPRI, r0
    a2d8:	f04f 0003 	mov.w	r0, #3
    a2dc:	df02      	svc	2
    a2de:	2102      	movs	r1, #2
    a2e0:	f104 0008 	add.w	r0, r4, #8
    a2e4:	f01c f889 	bl	263fa <net_buf_simple_pull_mem>
    a2e8:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    a2ea:	7800      	ldrb	r0, [r0, #0]
    a2ec:	f01a f981 	bl	245f2 <bt_hci_evt_get_flags>
    a2f0:	0783      	lsls	r3, r0, #30
    a2f2:	d40c      	bmi.n	a30e <bt_recv+0xf2>
    a2f4:	4a11      	ldr	r2, [pc, #68]	; (a33c <bt_recv+0x120>)
    a2f6:	4918      	ldr	r1, [pc, #96]	; (a358 <bt_recv+0x13c>)
    a2f8:	4812      	ldr	r0, [pc, #72]	; (a344 <bt_recv+0x128>)
    a2fa:	f241 4309 	movw	r3, #5129	; 0x1409
    a2fe:	f017 fb5f 	bl	219c0 <printk>
    a302:	4040      	eors	r0, r0
    a304:	f380 8811 	msr	BASEPRI, r0
    a308:	f04f 0003 	mov.w	r0, #3
    a30c:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    a30e:	4a13      	ldr	r2, [pc, #76]	; (a35c <bt_recv+0x140>)
    a310:	7828      	ldrb	r0, [r5, #0]
    a312:	2306      	movs	r3, #6
    a314:	4621      	mov	r1, r4
    a316:	f7fe fd57 	bl	8dc8 <handle_event>
    a31a:	e7af      	b.n	a27c <bt_recv+0x60>
    a31c:	4b0a      	ldr	r3, [pc, #40]	; (a348 <bt_recv+0x12c>)
    a31e:	4a0b      	ldr	r2, [pc, #44]	; (a34c <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    a320:	480f      	ldr	r0, [pc, #60]	; (a360 <bt_recv+0x144>)
    a322:	1ad2      	subs	r2, r2, r3
    a324:	08d2      	lsrs	r2, r2, #3
    a326:	0192      	lsls	r2, r2, #6
    a328:	f042 0201 	orr.w	r2, r2, #1
    a32c:	f017 ffeb 	bl	22306 <log_1>
		net_buf_unref(buf);
    a330:	4620      	mov	r0, r4
    a332:	f013 f909 	bl	1d548 <net_buf_unref>
		return -EINVAL;
    a336:	f06f 0015 	mvn.w	r0, #21
    a33a:	e7bf      	b.n	a2bc <bt_recv+0xa0>
    a33c:	0002c070 	.word	0x0002c070
    a340:	0002c3ac 	.word	0x0002c3ac
    a344:	0002c0ad 	.word	0x0002c0ad
    a348:	0002775c 	.word	0x0002775c
    a34c:	00027814 	.word	0x00027814
    a350:	0002c3de 	.word	0x0002c3de
    a354:	0002c402 	.word	0x0002c402
    a358:	0002c424 	.word	0x0002c424
    a35c:	00027f30 	.word	0x00027f30
    a360:	0002c452 	.word	0x0002c452

0000a364 <bt_recv_prio>:
{
    a364:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a366:	7d03      	ldrb	r3, [r0, #20]
    a368:	2b01      	cmp	r3, #1
{
    a36a:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a36c:	d00c      	beq.n	a388 <bt_recv_prio+0x24>
    a36e:	4a09      	ldr	r2, [pc, #36]	; (a394 <bt_recv_prio+0x30>)
    a370:	4909      	ldr	r1, [pc, #36]	; (a398 <bt_recv_prio+0x34>)
    a372:	480a      	ldr	r0, [pc, #40]	; (a39c <bt_recv_prio+0x38>)
    a374:	f641 03ff 	movw	r3, #6399	; 0x18ff
    a378:	f017 fb22 	bl	219c0 <printk>
    a37c:	4040      	eors	r0, r0
    a37e:	f380 8811 	msr	BASEPRI, r0
    a382:	f04f 0003 	mov.w	r0, #3
    a386:	df02      	svc	2
	hci_event_prio(buf);
    a388:	4620      	mov	r0, r4
    a38a:	f7ff fef5 	bl	a178 <hci_event_prio>
}
    a38e:	2000      	movs	r0, #0
    a390:	bd10      	pop	{r4, pc}
    a392:	bf00      	nop
    a394:	0002c070 	.word	0x0002c070
    a398:	0002c466 	.word	0x0002c466
    a39c:	0002c0ad 	.word	0x0002c0ad

0000a3a0 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    a3a0:	4a08      	ldr	r2, [pc, #32]	; (a3c4 <bt_hci_driver_register+0x24>)
{
    a3a2:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    a3a4:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    a3a8:	b930      	cbnz	r0, a3b8 <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    a3aa:	68d9      	ldr	r1, [r3, #12]
    a3ac:	b139      	cbz	r1, a3be <bt_hci_driver_register+0x1e>
    a3ae:	6919      	ldr	r1, [r3, #16]
    a3b0:	b129      	cbz	r1, a3be <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    a3b2:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    a3b6:	4770      	bx	lr
		return -EALREADY;
    a3b8:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a3bc:	4770      	bx	lr
		return -EINVAL;
    a3be:	f06f 0015 	mvn.w	r0, #21
}
    a3c2:	4770      	bx	lr
    a3c4:	20000000 	.word	0x20000000

0000a3c8 <bt_finalize_init>:
{
    a3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a3cc:	4d2b      	ldr	r5, [pc, #172]	; (a47c <bt_finalize_init+0xb4>)
    a3ce:	4c2c      	ldr	r4, [pc, #176]	; (a480 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    a3d0:	4e2c      	ldr	r6, [pc, #176]	; (a484 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
    a3d2:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a488 <bt_finalize_init+0xc0>
{
    a3d6:	b087      	sub	sp, #28
    a3d8:	2102      	movs	r1, #2
    a3da:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a3de:	f01a f95f 	bl	246a0 <atomic_or>
    a3e2:	4b2a      	ldr	r3, [pc, #168]	; (a48c <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    a3e4:	492a      	ldr	r1, [pc, #168]	; (a490 <bt_finalize_init+0xc8>)
    a3e6:	1ae4      	subs	r4, r4, r3
    a3e8:	79eb      	ldrb	r3, [r5, #7]
    a3ea:	4628      	mov	r0, r5
    a3ec:	2b01      	cmp	r3, #1
    a3ee:	bf88      	it	hi
    a3f0:	460e      	movhi	r6, r1
    a3f2:	f7fd fe19 	bl	8028 <bt_addr_le_str_real>
    a3f6:	f7fb f883 	bl	5500 <log_strdup>
    a3fa:	08e4      	lsrs	r4, r4, #3
    a3fc:	01a4      	lsls	r4, r4, #6
    a3fe:	f044 0803 	orr.w	r8, r4, #3
    a402:	4602      	mov	r2, r0
    a404:	4631      	mov	r1, r6
    a406:	4823      	ldr	r0, [pc, #140]	; (a494 <bt_finalize_init+0xcc>)
    a408:	4643      	mov	r3, r8
    a40a:	f017 ff90 	bl	2232e <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    a40e:	462f      	mov	r7, r5
    a410:	2601      	movs	r6, #1
    a412:	79eb      	ldrb	r3, [r5, #7]
    a414:	429e      	cmp	r6, r3
    a416:	f107 0707 	add.w	r7, r7, #7
    a41a:	db22      	blt.n	a462 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    a41c:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
    a420:	4630      	mov	r0, r6
    a422:	f7fe fa01 	bl	8828 <ver_str>
    a426:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    a428:	9304      	str	r3, [sp, #16]
    a42a:	f044 0403 	orr.w	r4, r4, #3
    a42e:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    a430:	9305      	str	r3, [sp, #20]
    a432:	e9cd 0602 	strd	r0, r6, [sp, #8]
    a436:	4623      	mov	r3, r4
    a438:	a902      	add	r1, sp, #8
    a43a:	2204      	movs	r2, #4
    a43c:	4816      	ldr	r0, [pc, #88]	; (a498 <bt_finalize_init+0xd0>)
    a43e:	f017 ffab 	bl	22398 <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    a442:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
    a446:	4630      	mov	r0, r6
    a448:	f7fe f9ee 	bl	8828 <ver_str>
    a44c:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    a44e:	f8ad 4000 	strh.w	r4, [sp]
    a452:	4601      	mov	r1, r0
    a454:	4632      	mov	r2, r6
    a456:	4811      	ldr	r0, [pc, #68]	; (a49c <bt_finalize_init+0xd4>)
    a458:	f017 ff82 	bl	22360 <log_3>
}
    a45c:	b007      	add	sp, #28
    a45e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    a462:	4638      	mov	r0, r7
    a464:	f7fd fde0 	bl	8028 <bt_addr_le_str_real>
    a468:	f7fb f84a 	bl	5500 <log_strdup>
    a46c:	4631      	mov	r1, r6
    a46e:	4602      	mov	r2, r0
    a470:	4643      	mov	r3, r8
    a472:	4648      	mov	r0, r9
    a474:	f017 ff5b 	bl	2232e <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    a478:	3601      	adds	r6, #1
    a47a:	e7ca      	b.n	a412 <bt_finalize_init+0x4a>
    a47c:	20000000 	.word	0x20000000
    a480:	00027814 	.word	0x00027814
    a484:	00029344 	.word	0x00029344
    a488:	0002c49c 	.word	0x0002c49c
    a48c:	0002775c 	.word	0x0002775c
    a490:	0002c489 	.word	0x0002c489
    a494:	0002c48d 	.word	0x0002c48d
    a498:	0002c4ad 	.word	0x0002c4ad
    a49c:	0002c4eb 	.word	0x0002c4eb

0000a4a0 <init_work>:
{
    a4a0:	b510      	push	{r4, lr}
	err = bt_init();
    a4a2:	f7f6 ffad 	bl	1400 <bt_init>
	if (ready_cb) {
    a4a6:	4b03      	ldr	r3, [pc, #12]	; (a4b4 <init_work+0x14>)
    a4a8:	681b      	ldr	r3, [r3, #0]
    a4aa:	b113      	cbz	r3, a4b2 <init_work+0x12>
}
    a4ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a4b0:	4718      	bx	r3
}
    a4b2:	bd10      	pop	{r4, pc}
    a4b4:	2000d738 	.word	0x2000d738

0000a4b8 <bt_enable>:
{
    a4b8:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    a4ba:	4d31      	ldr	r5, [pc, #196]	; (a580 <bt_enable+0xc8>)
    a4bc:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    a4c0:	b088      	sub	sp, #32
    a4c2:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a4c4:	b973      	cbnz	r3, a4e4 <bt_enable+0x2c>
    a4c6:	4b2f      	ldr	r3, [pc, #188]	; (a584 <bt_enable+0xcc>)
    a4c8:	492f      	ldr	r1, [pc, #188]	; (a588 <bt_enable+0xd0>)
		BT_ERR("No HCI driver registered");
    a4ca:	4830      	ldr	r0, [pc, #192]	; (a58c <bt_enable+0xd4>)
    a4cc:	1ac9      	subs	r1, r1, r3
    a4ce:	08c9      	lsrs	r1, r1, #3
    a4d0:	0189      	lsls	r1, r1, #6
    a4d2:	f041 0101 	orr.w	r1, r1, #1
    a4d6:	f017 ff09 	bl	222ec <log_0>
		return -ENODEV;
    a4da:	f06f 0412 	mvn.w	r4, #18
}
    a4de:	4620      	mov	r0, r4
    a4e0:	b008      	add	sp, #32
    a4e2:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a4e4:	2100      	movs	r1, #0
    a4e6:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a4ea:	f01a f8e8 	bl	246be <atomic_test_and_set_bit>
    a4ee:	2800      	cmp	r0, #0
    a4f0:	d143      	bne.n	a57a <bt_enable+0xc2>
		err = bt_settings_init();
    a4f2:	f7fe f8d7 	bl	86a4 <bt_settings_init>
		if (err) {
    a4f6:	4604      	mov	r4, r0
    a4f8:	2800      	cmp	r0, #0
    a4fa:	d1f0      	bne.n	a4de <bt_enable+0x26>
	ready_cb = cb;
    a4fc:	4b24      	ldr	r3, [pc, #144]	; (a590 <bt_enable+0xd8>)
    a4fe:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a500:	2200      	movs	r2, #0
    a502:	2300      	movs	r3, #0
    a504:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a508:	f06f 0308 	mvn.w	r3, #8
    a50c:	e9cd 0302 	strd	r0, r3, [sp, #8]
    a510:	e9cd 0000 	strd	r0, r0, [sp]
    a514:	9004      	str	r0, [sp, #16]
    a516:	4b1f      	ldr	r3, [pc, #124]	; (a594 <bt_enable+0xdc>)
    a518:	491f      	ldr	r1, [pc, #124]	; (a598 <bt_enable+0xe0>)
    a51a:	4820      	ldr	r0, [pc, #128]	; (a59c <bt_enable+0xe4>)
    a51c:	f44f 7220 	mov.w	r2, #640	; 0x280
    a520:	f015 ff86 	bl	20430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a524:	491e      	ldr	r1, [pc, #120]	; (a5a0 <bt_enable+0xe8>)
    a526:	481d      	ldr	r0, [pc, #116]	; (a59c <bt_enable+0xe4>)
    a528:	f01c fd33 	bl	26f92 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a52c:	f7fd ff22 	bl	8374 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a530:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    a534:	68db      	ldr	r3, [r3, #12]
    a536:	4798      	blx	r3
	if (err) {
    a538:	4604      	mov	r4, r0
    a53a:	b158      	cbz	r0, a554 <bt_enable+0x9c>
    a53c:	4b11      	ldr	r3, [pc, #68]	; (a584 <bt_enable+0xcc>)
    a53e:	4a12      	ldr	r2, [pc, #72]	; (a588 <bt_enable+0xd0>)
    a540:	1ad2      	subs	r2, r2, r3
    a542:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    a544:	0192      	lsls	r2, r2, #6
    a546:	4601      	mov	r1, r0
    a548:	f042 0201 	orr.w	r2, r2, #1
    a54c:	4815      	ldr	r0, [pc, #84]	; (a5a4 <bt_enable+0xec>)
    a54e:	f017 feda 	bl	22306 <log_1>
		return err;
    a552:	e7c4      	b.n	a4de <bt_enable+0x26>
	if (!cb) {
    a554:	b926      	cbnz	r6, a560 <bt_enable+0xa8>
}
    a556:	b008      	add	sp, #32
    a558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    a55c:	f7f6 bf50 	b.w	1400 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a560:	4601      	mov	r1, r0
    a562:	f105 0090 	add.w	r0, r5, #144	; 0x90
    a566:	f01a f8aa 	bl	246be <atomic_test_and_set_bit>
    a56a:	2800      	cmp	r0, #0
    a56c:	d1b7      	bne.n	a4de <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    a56e:	480e      	ldr	r0, [pc, #56]	; (a5a8 <bt_enable+0xf0>)
    a570:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a574:	f01c fbb5 	bl	26ce2 <k_queue_append>
    a578:	e7b1      	b.n	a4de <bt_enable+0x26>
		return -EALREADY;
    a57a:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a57e:	e7ae      	b.n	a4de <bt_enable+0x26>
    a580:	20000000 	.word	0x20000000
    a584:	0002775c 	.word	0x0002775c
    a588:	00027814 	.word	0x00027814
    a58c:	0002c637 	.word	0x0002c637
    a590:	2000d738 	.word	0x2000d738
    a594:	00008fc1 	.word	0x00008fc1
    a598:	20010780 	.word	0x20010780
    a59c:	2000a5e0 	.word	0x2000a5e0
    a5a0:	0002c650 	.word	0x0002c650
    a5a4:	0002c656 	.word	0x0002c656
    a5a8:	2000aca0 	.word	0x2000aca0

0000a5ac <bt_set_name>:
{
    a5ac:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a5ae:	4605      	mov	r5, r0
	size_t len = strlen(name);
    a5b0:	f019 fe6a 	bl	24288 <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    a5b4:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    a5b6:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    a5b8:	d83a      	bhi.n	a630 <bt_set_name+0x84>
	if (!strcmp(bt_dev.name, name)) {
    a5ba:	4e1f      	ldr	r6, [pc, #124]	; (a638 <bt_set_name+0x8c>)
    a5bc:	4629      	mov	r1, r5
    a5be:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    a5c2:	f019 fe71 	bl	242a8 <strcmp>
    a5c6:	b910      	cbnz	r0, a5ce <bt_set_name+0x22>
	return 0;
    a5c8:	2000      	movs	r0, #0
}
    a5ca:	b004      	add	sp, #16
    a5cc:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    a5ce:	4622      	mov	r2, r4
    a5d0:	4629      	mov	r1, r5
    a5d2:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    a5d6:	f019 fe45 	bl	24264 <strncpy>
	bt_dev.name[len] = '\0';
    a5da:	1933      	adds	r3, r6, r4
    a5dc:	2200      	movs	r2, #0
    a5de:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a5e2:	f106 0028 	add.w	r0, r6, #40	; 0x28
    a5e6:	f01a f84c 	bl	24682 <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    a5ea:	0603      	lsls	r3, r0, #24
    a5ec:	d50e      	bpl.n	a60c <bt_set_name+0x60>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    a5ee:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    a5f0:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    a5f2:	a902      	add	r1, sp, #8
    a5f4:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    a5f8:	f88d 3000 	strb.w	r3, [sp]
    a5fc:	f88d 4001 	strb.w	r4, [sp, #1]
    a600:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    a602:	f8cd d008 	str.w	sp, [sp, #8]
    a606:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    a608:	f7ff f9b0 	bl	996c <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    a60c:	490b      	ldr	r1, [pc, #44]	; (a63c <bt_set_name+0x90>)
    a60e:	480c      	ldr	r0, [pc, #48]	; (a640 <bt_set_name+0x94>)
    a610:	4622      	mov	r2, r4
    a612:	f7fc f879 	bl	6708 <settings_save_one>
		if (err) {
    a616:	2800      	cmp	r0, #0
    a618:	d0d6      	beq.n	a5c8 <bt_set_name+0x1c>
    a61a:	4b0a      	ldr	r3, [pc, #40]	; (a644 <bt_set_name+0x98>)
    a61c:	490a      	ldr	r1, [pc, #40]	; (a648 <bt_set_name+0x9c>)
			BT_WARN("Unable to store name");
    a61e:	480b      	ldr	r0, [pc, #44]	; (a64c <bt_set_name+0xa0>)
    a620:	1ac9      	subs	r1, r1, r3
    a622:	08c9      	lsrs	r1, r1, #3
    a624:	0189      	lsls	r1, r1, #6
    a626:	f041 0102 	orr.w	r1, r1, #2
    a62a:	f017 fe5f 	bl	222ec <log_0>
    a62e:	e7cb      	b.n	a5c8 <bt_set_name+0x1c>
		return -ENOMEM;
    a630:	f06f 000b 	mvn.w	r0, #11
    a634:	e7c9      	b.n	a5ca <bt_set_name+0x1e>
    a636:	bf00      	nop
    a638:	20000000 	.word	0x20000000
    a63c:	20000160 	.word	0x20000160
    a640:	0002c672 	.word	0x0002c672
    a644:	0002775c 	.word	0x0002775c
    a648:	00027814 	.word	0x00027814
    a64c:	0002c67a 	.word	0x0002c67a

0000a650 <bt_get_name>:
}
    a650:	4800      	ldr	r0, [pc, #0]	; (a654 <bt_get_name+0x4>)
    a652:	4770      	bx	lr
    a654:	20000160 	.word	0x20000160

0000a658 <bt_id_create>:
{
    a658:	b5f0      	push	{r4, r5, r6, r7, lr}
    a65a:	460e      	mov	r6, r1
    a65c:	b087      	sub	sp, #28
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a65e:	4605      	mov	r5, r0
    a660:	b930      	cbnz	r0, a670 <bt_id_create+0x18>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    a662:	4f2b      	ldr	r7, [pc, #172]	; (a710 <bt_id_create+0xb8>)
    a664:	79fb      	ldrb	r3, [r7, #7]
    a666:	2b01      	cmp	r3, #1
    a668:	d12a      	bne.n	a6c0 <bt_id_create+0x68>
		return -ENOMEM;
    a66a:	f06f 040b 	mvn.w	r4, #11
    a66e:	e024      	b.n	a6ba <bt_id_create+0x62>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a670:	2300      	movs	r3, #0
    a672:	a902      	add	r1, sp, #8
    a674:	9302      	str	r3, [sp, #8]
    a676:	f8cd 300b 	str.w	r3, [sp, #11]
    a67a:	f01a f808 	bl	2468e <bt_addr_le_cmp>
    a67e:	2800      	cmp	r0, #0
    a680:	d0ef      	beq.n	a662 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    a682:	782b      	ldrb	r3, [r5, #0]
    a684:	2b01      	cmp	r3, #1
    a686:	d104      	bne.n	a692 <bt_id_create+0x3a>
    a688:	79ab      	ldrb	r3, [r5, #6]
    a68a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a68e:	2bc0      	cmp	r3, #192	; 0xc0
    a690:	d00c      	beq.n	a6ac <bt_id_create+0x54>
    a692:	4920      	ldr	r1, [pc, #128]	; (a714 <bt_id_create+0xbc>)
    a694:	4b20      	ldr	r3, [pc, #128]	; (a718 <bt_id_create+0xc0>)
			BT_ERR("Only static random identity address supported");
    a696:	4821      	ldr	r0, [pc, #132]	; (a71c <bt_id_create+0xc4>)
    a698:	1ac9      	subs	r1, r1, r3
    a69a:	08c9      	lsrs	r1, r1, #3
    a69c:	0189      	lsls	r1, r1, #6
    a69e:	f041 0101 	orr.w	r1, r1, #1
    a6a2:	f017 fe23 	bl	222ec <log_0>
			return -EINVAL;
    a6a6:	f06f 0415 	mvn.w	r4, #21
    a6aa:	e006      	b.n	a6ba <bt_id_create+0x62>
		if (id_find(addr) >= 0) {
    a6ac:	4628      	mov	r0, r5
    a6ae:	f7fe f8ff 	bl	88b0 <id_find>
    a6b2:	2800      	cmp	r0, #0
    a6b4:	dbd5      	blt.n	a662 <bt_id_create+0xa>
			return -EALREADY;
    a6b6:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    a6ba:	4620      	mov	r0, r4
    a6bc:	b007      	add	sp, #28
    a6be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a6c0:	f107 0094 	add.w	r0, r7, #148	; 0x94
    a6c4:	f019 ffdd 	bl	24682 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a6c8:	f010 0001 	ands.w	r0, r0, #1
    a6cc:	d117      	bne.n	a6fe <bt_id_create+0xa6>
		uint8_t zero_irk[16] = { 0 };
    a6ce:	e9cd 0002 	strd	r0, r0, [sp, #8]
    a6d2:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    a6d6:	2d00      	cmp	r5, #0
    a6d8:	d0e5      	beq.n	a6a6 <bt_id_create+0x4e>
    a6da:	9000      	str	r0, [sp, #0]
    a6dc:	4669      	mov	r1, sp
    a6de:	f8cd 0003 	str.w	r0, [sp, #3]
    a6e2:	4628      	mov	r0, r5
    a6e4:	f019 ffd3 	bl	2468e <bt_addr_le_cmp>
    a6e8:	2800      	cmp	r0, #0
    a6ea:	d0dc      	beq.n	a6a6 <bt_id_create+0x4e>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a6ec:	2e00      	cmp	r6, #0
    a6ee:	d0da      	beq.n	a6a6 <bt_id_create+0x4e>
		    !(irk && memcmp(irk, zero_irk, 16))) {
    a6f0:	2210      	movs	r2, #16
    a6f2:	a902      	add	r1, sp, #8
    a6f4:	4630      	mov	r0, r6
    a6f6:	f019 fdf4 	bl	242e2 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a6fa:	2800      	cmp	r0, #0
    a6fc:	d0d3      	beq.n	a6a6 <bt_id_create+0x4e>
	new_id = bt_dev.id_count++;
    a6fe:	79fc      	ldrb	r4, [r7, #7]
	id_create(new_id, addr, irk);
    a700:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
    a702:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    a704:	4629      	mov	r1, r5
    a706:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    a708:	71fb      	strb	r3, [r7, #7]
	id_create(new_id, addr, irk);
    a70a:	f7fe fa8f 	bl	8c2c <id_create>
	return new_id;
    a70e:	e7d4      	b.n	a6ba <bt_id_create+0x62>
    a710:	20000000 	.word	0x20000000
    a714:	00027814 	.word	0x00027814
    a718:	0002775c 	.word	0x0002775c
    a71c:	0002c68f 	.word	0x0002c68f

0000a720 <bt_setup_public_id_addr>:
{
    a720:	b570      	push	{r4, r5, r6, lr}
    a722:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    a724:	aa01      	add	r2, sp, #4
    a726:	2100      	movs	r1, #0
    a728:	f241 0009 	movw	r0, #4105	; 0x1009
    a72c:	f7fe fef4 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    a730:	4e3b      	ldr	r6, [pc, #236]	; (a820 <bt_setup_public_id_addr+0x100>)
    a732:	4604      	mov	r4, r0
    a734:	b168      	cbz	r0, a752 <bt_setup_public_id_addr+0x32>
    a736:	493b      	ldr	r1, [pc, #236]	; (a824 <bt_setup_public_id_addr+0x104>)
    a738:	4b3b      	ldr	r3, [pc, #236]	; (a828 <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read public address");
    a73a:	483c      	ldr	r0, [pc, #240]	; (a82c <bt_setup_public_id_addr+0x10c>)
    a73c:	1ac9      	subs	r1, r1, r3
    a73e:	08c9      	lsrs	r1, r1, #3
    a740:	0189      	lsls	r1, r1, #6
    a742:	f041 0102 	orr.w	r1, r1, #2
    a746:	f017 fdd1 	bl	222ec <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a74a:	2300      	movs	r3, #0
    a74c:	71f3      	strb	r3, [r6, #7]
}
    a74e:	b00c      	add	sp, #48	; 0x30
    a750:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    a752:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a754:	689d      	ldr	r5, [r3, #8]
    a756:	9008      	str	r0, [sp, #32]
    a758:	3501      	adds	r5, #1
    a75a:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    a75e:	2206      	movs	r2, #6
    a760:	a908      	add	r1, sp, #32
    a762:	4628      	mov	r0, r5
    a764:	f019 fdbd 	bl	242e2 <memcmp>
    a768:	b918      	cbnz	r0, a772 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    a76a:	9801      	ldr	r0, [sp, #4]
    a76c:	f012 feec 	bl	1d548 <net_buf_unref>
    a770:	e7eb      	b.n	a74a <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a772:	23ff      	movs	r3, #255	; 0xff
    a774:	2206      	movs	r2, #6
    a776:	a904      	add	r1, sp, #16
    a778:	4628      	mov	r0, r5
    a77a:	f88d 3010 	strb.w	r3, [sp, #16]
    a77e:	f88d 3011 	strb.w	r3, [sp, #17]
    a782:	f88d 3012 	strb.w	r3, [sp, #18]
    a786:	f88d 3013 	strb.w	r3, [sp, #19]
    a78a:	f88d 3014 	strb.w	r3, [sp, #20]
    a78e:	f88d 3015 	strb.w	r3, [sp, #21]
    a792:	f019 fda6 	bl	242e2 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a796:	2800      	cmp	r0, #0
    a798:	d0e7      	beq.n	a76a <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    a79a:	4629      	mov	r1, r5
    a79c:	f10d 0009 	add.w	r0, sp, #9
    a7a0:	f019 ff78 	bl	24694 <bt_addr_copy>
	net_buf_unref(rsp);
    a7a4:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a7a6:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    a7aa:	f012 fecd 	bl	1d548 <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a7ae:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    a7b0:	2210      	movs	r2, #16
    a7b2:	4621      	mov	r1, r4
    a7b4:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    a7b6:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    a7b8:	f019 fdcf 	bl	2435a <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    a7bc:	f896 3086 	ldrb.w	r3, [r6, #134]	; 0x86
    a7c0:	079b      	lsls	r3, r3, #30
    a7c2:	d510      	bpl.n	a7e6 <bt_setup_public_id_addr+0xc6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    a7c4:	aa04      	add	r2, sp, #16
    a7c6:	4621      	mov	r1, r4
    a7c8:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    a7cc:	f7fe fea4 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    a7d0:	b1c8      	cbz	r0, a806 <bt_setup_public_id_addr+0xe6>
    a7d2:	4914      	ldr	r1, [pc, #80]	; (a824 <bt_setup_public_id_addr+0x104>)
    a7d4:	4b14      	ldr	r3, [pc, #80]	; (a828 <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read identity root");
    a7d6:	4816      	ldr	r0, [pc, #88]	; (a830 <bt_setup_public_id_addr+0x110>)
    a7d8:	1ac9      	subs	r1, r1, r3
    a7da:	08c9      	lsrs	r1, r1, #3
    a7dc:	0189      	lsls	r1, r1, #6
    a7de:	f041 0102 	orr.w	r1, r1, #2
    a7e2:	f017 fd83 	bl	222ec <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    a7e6:	a904      	add	r1, sp, #16
    a7e8:	a808      	add	r0, sp, #32
    a7ea:	f01b fc8a 	bl	26102 <bt_smp_irk_get>
    a7ee:	b1a8      	cbz	r0, a81c <bt_setup_public_id_addr+0xfc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a7f0:	4810      	ldr	r0, [pc, #64]	; (a834 <bt_setup_public_id_addr+0x114>)
    a7f2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a7f6:	f019 ff53 	bl	246a0 <atomic_or>
	uint8_t *irk = NULL;
    a7fa:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    a7fc:	a902      	add	r1, sp, #8
    a7fe:	2000      	movs	r0, #0
    a800:	f7fe fa14 	bl	8c2c <id_create>
    a804:	e7a3      	b.n	a74e <bt_setup_public_id_addr+0x2e>
	rp = (void *)rsp->data;
    a806:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    a808:	6899      	ldr	r1, [r3, #8]
    a80a:	2210      	movs	r2, #16
    a80c:	3101      	adds	r1, #1
    a80e:	a808      	add	r0, sp, #32
    a810:	f019 fd78 	bl	24304 <memcpy>
	net_buf_unref(rsp);
    a814:	9804      	ldr	r0, [sp, #16]
    a816:	f012 fe97 	bl	1d548 <net_buf_unref>
    a81a:	e7e4      	b.n	a7e6 <bt_setup_public_id_addr+0xc6>
		irk = ir_irk;
    a81c:	aa04      	add	r2, sp, #16
    a81e:	e7ed      	b.n	a7fc <bt_setup_public_id_addr+0xdc>
    a820:	20000000 	.word	0x20000000
    a824:	00027814 	.word	0x00027814
    a828:	0002775c 	.word	0x0002775c
    a82c:	0002c6bd 	.word	0x0002c6bd
    a830:	0002c6db 	.word	0x0002c6db
    a834:	20000094 	.word	0x20000094

0000a838 <bt_read_static_addr>:
{
    a838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a83c:	4b25      	ldr	r3, [pc, #148]	; (a8d4 <bt_read_static_addr+0x9c>)
    a83e:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    a842:	f014 0401 	ands.w	r4, r4, #1
{
    a846:	4607      	mov	r7, r0
    a848:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a84a:	d10a      	bne.n	a862 <bt_read_static_addr+0x2a>
    a84c:	4922      	ldr	r1, [pc, #136]	; (a8d8 <bt_read_static_addr+0xa0>)
    a84e:	4b23      	ldr	r3, [pc, #140]	; (a8dc <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    a850:	4823      	ldr	r0, [pc, #140]	; (a8e0 <bt_read_static_addr+0xa8>)
    a852:	1ac9      	subs	r1, r1, r3
    a854:	08c9      	lsrs	r1, r1, #3
    a856:	0189      	lsls	r1, r1, #6
    a858:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    a85c:	f017 fd46 	bl	222ec <log_0>
    a860:	e012      	b.n	a888 <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a862:	aa01      	add	r2, sp, #4
    a864:	2100      	movs	r1, #0
    a866:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a86a:	f7fe fe55 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    a86e:	4605      	mov	r5, r0
    a870:	b170      	cbz	r0, a890 <bt_read_static_addr+0x58>
    a872:	4b1a      	ldr	r3, [pc, #104]	; (a8dc <bt_read_static_addr+0xa4>)
    a874:	4918      	ldr	r1, [pc, #96]	; (a8d8 <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    a876:	481b      	ldr	r0, [pc, #108]	; (a8e4 <bt_read_static_addr+0xac>)
    a878:	1ac9      	subs	r1, r1, r3
    a87a:	08c9      	lsrs	r1, r1, #3
    a87c:	0189      	lsls	r1, r1, #6
    a87e:	f041 0102 	orr.w	r1, r1, #2
    a882:	f017 fd33 	bl	222ec <log_0>
		return 0;
    a886:	2400      	movs	r4, #0
}
    a888:	4620      	mov	r0, r4
    a88a:	b002      	add	sp, #8
    a88c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    a890:	9b01      	ldr	r3, [sp, #4]
    a892:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    a894:	785c      	ldrb	r4, [r3, #1]
    a896:	42b4      	cmp	r4, r6
    a898:	bf28      	it	cs
    a89a:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a89c:	f04f 0816 	mov.w	r8, #22
    a8a0:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    a8a2:	42a5      	cmp	r5, r4
    a8a4:	db0d      	blt.n	a8c2 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    a8a6:	9801      	ldr	r0, [sp, #4]
    a8a8:	f012 fe4e 	bl	1d548 <net_buf_unref>
	if (!cnt) {
    a8ac:	2c00      	cmp	r4, #0
    a8ae:	d1eb      	bne.n	a888 <bt_read_static_addr+0x50>
    a8b0:	4909      	ldr	r1, [pc, #36]	; (a8d8 <bt_read_static_addr+0xa0>)
    a8b2:	4b0a      	ldr	r3, [pc, #40]	; (a8dc <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    a8b4:	480c      	ldr	r0, [pc, #48]	; (a8e8 <bt_read_static_addr+0xb0>)
    a8b6:	1ac9      	subs	r1, r1, r3
    a8b8:	08c9      	lsrs	r1, r1, #3
    a8ba:	0189      	lsls	r1, r1, #6
    a8bc:	f041 0102 	orr.w	r1, r1, #2
    a8c0:	e7cc      	b.n	a85c <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    a8c2:	fb08 7005 	mla	r0, r8, r5, r7
    a8c6:	2216      	movs	r2, #22
    a8c8:	4631      	mov	r1, r6
    a8ca:	f019 fd1b 	bl	24304 <memcpy>
	for (i = 0; i < cnt; i++) {
    a8ce:	3501      	adds	r5, #1
    a8d0:	e7e7      	b.n	a8a2 <bt_read_static_addr+0x6a>
    a8d2:	bf00      	nop
    a8d4:	20000000 	.word	0x20000000
    a8d8:	00027814 	.word	0x00027814
    a8dc:	0002775c 	.word	0x0002775c
    a8e0:	0002c6f8 	.word	0x0002c6f8
    a8e4:	0002c724 	.word	0x0002c724
    a8e8:	0002c744 	.word	0x0002c744

0000a8ec <bt_setup_random_id_addr>:
{
    a8ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    a8f0:	f8df 808c 	ldr.w	r8, [pc, #140]	; a980 <bt_setup_random_id_addr+0x94>
    a8f4:	f898 4007 	ldrb.w	r4, [r8, #7]
{
    a8f8:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    a8fa:	bba4      	cbnz	r4, a966 <bt_setup_random_id_addr+0x7a>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    a8fc:	2101      	movs	r1, #1
    a8fe:	a806      	add	r0, sp, #24
    a900:	f7ff ff9a 	bl	a838 <bt_read_static_addr>
    a904:	f888 0007 	strb.w	r0, [r8, #7]
		if (bt_dev.id_count) {
    a908:	b368      	cbz	r0, a966 <bt_setup_random_id_addr+0x7a>
    a90a:	f04f 0916 	mov.w	r9, #22
    a90e:	f108 0a94 	add.w	sl, r8, #148	; 0x94
    a912:	b2e5      	uxtb	r5, r4
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    a914:	fb09 f705 	mul.w	r7, r9, r5
    a918:	1db8      	adds	r0, r7, #6
    a91a:	ab06      	add	r3, sp, #24
    a91c:	a902      	add	r1, sp, #8
    a91e:	4418      	add	r0, r3
    a920:	f01b fbef 	bl	26102 <bt_smp_irk_get>
    a924:	b1e8      	cbz	r0, a962 <bt_setup_random_id_addr+0x76>
    a926:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a92a:	4650      	mov	r0, sl
    a92c:	f019 feb8 	bl	246a0 <atomic_or>
				uint8_t *irk = NULL;
    a930:	2600      	movs	r6, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    a932:	ab06      	add	r3, sp, #24
    a934:	19d9      	adds	r1, r3, r7
    a936:	f10d 0001 	add.w	r0, sp, #1
    a93a:	f019 feab 	bl	24694 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    a93e:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    a940:	4632      	mov	r2, r6
    a942:	4669      	mov	r1, sp
    a944:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    a946:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a94a:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    a94c:	f7fe f96e 	bl	8c2c <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    a950:	f898 2007 	ldrb.w	r2, [r8, #7]
    a954:	b2e3      	uxtb	r3, r4
    a956:	429a      	cmp	r2, r3
    a958:	d8db      	bhi.n	a912 <bt_setup_random_id_addr+0x26>
}
    a95a:	2000      	movs	r0, #0
    a95c:	b00c      	add	sp, #48	; 0x30
    a95e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    a962:	ae02      	add	r6, sp, #8
    a964:	e7e5      	b.n	a932 <bt_setup_random_id_addr+0x46>
    a966:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a96a:	4806      	ldr	r0, [pc, #24]	; (a984 <bt_setup_random_id_addr+0x98>)
    a96c:	f019 fe98 	bl	246a0 <atomic_or>
	return bt_id_create(NULL, NULL);
    a970:	2100      	movs	r1, #0
    a972:	4608      	mov	r0, r1
}
    a974:	b00c      	add	sp, #48	; 0x30
    a976:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
    a97a:	f7ff be6d 	b.w	a658 <bt_id_create>
    a97e:	bf00      	nop
    a980:	20000000 	.word	0x20000000
    a984:	20000094 	.word	0x20000094

0000a988 <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    a988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    a98c:	690d      	ldr	r5, [r1, #16]
{
    a98e:	b08f      	sub	sp, #60	; 0x3c
    a990:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    a992:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    a994:	ebb5 0b03 	subs.w	fp, r5, r3
{
    a998:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a99a:	4883      	ldr	r0, [pc, #524]	; (aba8 <bt_le_adv_start_legacy+0x220>)
	struct bt_conn *conn = NULL;
    a99c:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    a99e:	bf18      	it	ne
    a9a0:	f04f 0b01 	movne.w	fp, #1
    a9a4:	f019 fe6d 	bl	24682 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a9a8:	0787      	lsls	r7, r0, #30
{
    a9aa:	460c      	mov	r4, r1
    a9ac:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    a9ae:	f140 80ed 	bpl.w	ab8c <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    a9b2:	4608      	mov	r0, r1
    a9b4:	f7fd ff94 	bl	88e0 <valid_adv_param>
    a9b8:	4607      	mov	r7, r0
    a9ba:	2800      	cmp	r0, #0
    a9bc:	f000 80e9 	beq.w	ab92 <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    a9c0:	f106 0810 	add.w	r8, r6, #16
    a9c4:	4640      	mov	r0, r8
    a9c6:	f019 fe5c 	bl	24682 <atomic_get>
    a9ca:	f3c0 1180 	ubfx	r1, r0, #6, #1
    a9ce:	0640      	lsls	r0, r0, #25
    a9d0:	f100 80e2 	bmi.w	ab98 <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    a9d4:	220f      	movs	r2, #15
    a9d6:	a80a      	add	r0, sp, #40	; 0x28
    a9d8:	9105      	str	r1, [sp, #20]
    a9da:	f019 fcbe 	bl	2435a <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    a9de:	68a3      	ldr	r3, [r4, #8]
    a9e0:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    a9e4:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    a9e6:	68e3      	ldr	r3, [r4, #12]
    a9e8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    a9ec:	f019 fe2b 	bl	24646 <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    a9f0:	7832      	ldrb	r2, [r6, #0]
    a9f2:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    a9f4:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    a9f6:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    a9fa:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    a9fc:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    aa00:	d004      	beq.n	aa0c <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    aa02:	4869      	ldr	r0, [pc, #420]	; (aba8 <bt_le_adv_start_legacy+0x220>)
    aa04:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    aa08:	f019 fe2c 	bl	24664 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    aa0c:	4b67      	ldr	r3, [pc, #412]	; (abac <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
    aa0e:	7820      	ldrb	r0, [r4, #0]
    aa10:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    aa12:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    aa16:	465a      	mov	r2, fp
    aa18:	6861      	ldr	r1, [r4, #4]
    aa1a:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    aa1e:	f7fe fe59 	bl	96d4 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    aa22:	4683      	mov	fp, r0
    aa24:	2800      	cmp	r0, #0
    aa26:	d16f      	bne.n	ab08 <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    aa28:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    aa2c:	2d00      	cmp	r5, #0
    aa2e:	d048      	beq.n	aac2 <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    aa30:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    aa32:	f019 fe32 	bl	2469a <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    aa36:	6860      	ldr	r0, [r4, #4]
    aa38:	07c1      	lsls	r1, r0, #31
    aa3a:	d54a      	bpl.n	aad2 <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    aa3c:	2d00      	cmp	r5, #0
    aa3e:	d045      	beq.n	aacc <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    aa40:	f010 0f10 	tst.w	r0, #16
    aa44:	bf14      	ite	ne
    aa46:	2304      	movne	r3, #4
    aa48:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    aa4a:	6921      	ldr	r1, [r4, #16]
    aa4c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    aa50:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    aa54:	f019 fe21 	bl	2469a <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    aa58:	210f      	movs	r1, #15
    aa5a:	f242 0006 	movw	r0, #8198	; 0x2006
    aa5e:	f7fe fbfb 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    aa62:	4683      	mov	fp, r0
    aa64:	2800      	cmp	r0, #0
    aa66:	f000 809a 	beq.w	ab9e <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    aa6a:	220f      	movs	r2, #15
    aa6c:	a90a      	add	r1, sp, #40	; 0x28
    aa6e:	3008      	adds	r0, #8
    aa70:	f01b fca2 	bl	263b8 <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    aa74:	2200      	movs	r2, #0
    aa76:	4659      	mov	r1, fp
    aa78:	f242 0006 	movw	r0, #8198	; 0x2006
    aa7c:	f7fe fd4c 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    aa80:	2800      	cmp	r0, #0
    aa82:	f040 808f 	bne.w	aba4 <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
    aa86:	b37d      	cbz	r5, aae8 <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    aa88:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    aa8a:	07da      	lsls	r2, r3, #31
    aa8c:	d440      	bmi.n	ab10 <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
    aa8e:	2101      	movs	r1, #1
    aa90:	4630      	mov	r0, r6
    aa92:	f7fe fe7f 	bl	9794 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    aa96:	4683      	mov	fp, r0
    aa98:	2800      	cmp	r0, #0
    aa9a:	d070      	beq.n	ab7e <bt_le_adv_start_legacy+0x1f6>
    aa9c:	4b44      	ldr	r3, [pc, #272]	; (abb0 <bt_le_adv_start_legacy+0x228>)
    aa9e:	4945      	ldr	r1, [pc, #276]	; (abb4 <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
    aaa0:	4845      	ldr	r0, [pc, #276]	; (abb8 <bt_le_adv_start_legacy+0x230>)
    aaa2:	1ac9      	subs	r1, r1, r3
    aaa4:	08c9      	lsrs	r1, r1, #3
    aaa6:	0189      	lsls	r1, r1, #6
    aaa8:	f041 0101 	orr.w	r1, r1, #1
    aaac:	f017 fc1e 	bl	222ec <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    aab0:	9807      	ldr	r0, [sp, #28]
    aab2:	b348      	cbz	r0, ab08 <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    aab4:	2100      	movs	r1, #0
    aab6:	f000 fd83 	bl	b5c0 <bt_conn_set_state>
			bt_conn_unref(conn);
    aaba:	9807      	ldr	r0, [sp, #28]
    aabc:	f01a f85a 	bl	24b74 <bt_conn_unref>
    aac0:	e022      	b.n	ab08 <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    aac2:	9508      	str	r5, [sp, #32]
    aac4:	a908      	add	r1, sp, #32
    aac6:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    aaca:	e7b2      	b.n	aa32 <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
    aacc:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    aad0:	e7c2      	b.n	aa58 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    aad2:	9b18      	ldr	r3, [sp, #96]	; 0x60
    aad4:	b933      	cbnz	r3, aae4 <bt_le_adv_start_legacy+0x15c>
    aad6:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    aada:	f1c7 0303 	rsb	r3, r7, #3
    aade:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    aae2:	e7b9      	b.n	aa58 <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    aae4:	2701      	movs	r7, #1
    aae6:	e7f8      	b.n	aada <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    aae8:	6863      	ldr	r3, [r4, #4]
    aaea:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    aaee:	e9cd 7301 	strd	r7, r3, [sp, #4]
    aaf2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    aaf4:	9300      	str	r3, [sp, #0]
    aaf6:	4652      	mov	r2, sl
    aaf8:	9b18      	ldr	r3, [sp, #96]	; 0x60
    aafa:	4649      	mov	r1, r9
    aafc:	4630      	mov	r0, r6
    aafe:	f7fe ffa7 	bl	9a50 <le_adv_update.constprop.0>
		if (err) {
    ab02:	4683      	mov	fp, r0
    ab04:	2800      	cmp	r0, #0
    ab06:	d0bf      	beq.n	aa88 <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    ab08:	4658      	mov	r0, fp
    ab0a:	b00f      	add	sp, #60	; 0x3c
    ab0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    ab10:	a907      	add	r1, sp, #28
    ab12:	4630      	mov	r0, r6
    ab14:	f7fe f8e2 	bl	8cdc <le_adv_start_add_conn>
		if (err) {
    ab18:	4683      	mov	fp, r0
    ab1a:	2800      	cmp	r0, #0
    ab1c:	d0b7      	beq.n	aa8e <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    ab1e:	f110 0f0c 	cmn.w	r0, #12
    ab22:	d1f1      	bne.n	ab08 <bt_le_adv_start_legacy+0x180>
    ab24:	2d00      	cmp	r5, #0
    ab26:	d1ef      	bne.n	ab08 <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    ab28:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    ab2a:	079b      	lsls	r3, r3, #30
    ab2c:	d4ec      	bmi.n	ab08 <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ab2e:	6860      	ldr	r0, [r4, #4]
    ab30:	f080 0002 	eor.w	r0, r0, #2
    ab34:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    ab38:	f00b 0201 	and.w	r2, fp, #1
    ab3c:	210c      	movs	r1, #12
    ab3e:	4640      	mov	r0, r8
    ab40:	f019 fdc8 	bl	246d4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    ab44:	6862      	ldr	r2, [r4, #4]
    ab46:	2107      	movs	r1, #7
    ab48:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    ab4c:	4640      	mov	r0, r8
    ab4e:	f019 fdc1 	bl	246d4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    ab52:	6862      	ldr	r2, [r4, #4]
    ab54:	2108      	movs	r1, #8
    ab56:	f002 0201 	and.w	r2, r2, #1
    ab5a:	4640      	mov	r0, r8
    ab5c:	f019 fdba 	bl	246d4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    ab60:	463a      	mov	r2, r7
    ab62:	2109      	movs	r1, #9
    ab64:	4640      	mov	r0, r8
    ab66:	f019 fdb5 	bl	246d4 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    ab6a:	6862      	ldr	r2, [r4, #4]
    ab6c:	210b      	movs	r1, #11
    ab6e:	f3c2 0280 	ubfx	r2, r2, #2, #1
    ab72:	4640      	mov	r0, r8
    ab74:	f019 fdae 	bl	246d4 <atomic_set_bit_to>
	return 0;
    ab78:	f04f 0b00 	mov.w	fp, #0
    ab7c:	e7c4      	b.n	ab08 <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ab7e:	9807      	ldr	r0, [sp, #28]
    ab80:	b108      	cbz	r0, ab86 <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
    ab82:	f019 fff7 	bl	24b74 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ab86:	2d00      	cmp	r5, #0
    ab88:	d1d6      	bne.n	ab38 <bt_le_adv_start_legacy+0x1b0>
    ab8a:	e7d0      	b.n	ab2e <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
    ab8c:	f06f 0b0a 	mvn.w	fp, #10
    ab90:	e7ba      	b.n	ab08 <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
    ab92:	f06f 0b15 	mvn.w	fp, #21
    ab96:	e7b7      	b.n	ab08 <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
    ab98:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    ab9c:	e7b4      	b.n	ab08 <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
    ab9e:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    aba2:	e7b1      	b.n	ab08 <bt_le_adv_start_legacy+0x180>
    aba4:	4683      	mov	fp, r0
    aba6:	e7af      	b.n	ab08 <bt_le_adv_start_legacy+0x180>
    aba8:	20000094 	.word	0x20000094
    abac:	20000000 	.word	0x20000000
    abb0:	0002775c 	.word	0x0002775c
    abb4:	00027814 	.word	0x00027814
    abb8:	0002c76d 	.word	0x0002c76d

0000abbc <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    abbc:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    abbe:	9c04      	ldr	r4, [sp, #16]
    abc0:	e9cd 3400 	strd	r3, r4, [sp]
    abc4:	4613      	mov	r3, r2
    abc6:	460a      	mov	r2, r1
    abc8:	4601      	mov	r1, r0
    abca:	4802      	ldr	r0, [pc, #8]	; (abd4 <bt_le_adv_start+0x18>)
    abcc:	f7ff fedc 	bl	a988 <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    abd0:	b002      	add	sp, #8
    abd2:	bd10      	pop	{r4, pc}
    abd4:	20000018 	.word	0x20000018

0000abd8 <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    abd8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    abda:	4c1f      	ldr	r4, [pc, #124]	; (ac58 <bt_le_adv_resume+0x80>)
    abdc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    abe0:	f019 fd4f 	bl	24682 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    abe4:	04c0      	lsls	r0, r0, #19
    abe6:	d535      	bpl.n	ac54 <bt_le_adv_resume+0x7c>
    abe8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    abec:	f019 fd49 	bl	24682 <atomic_get>
    abf0:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    abf2:	f3c0 1580 	ubfx	r5, r0, #6, #1
    abf6:	d42d      	bmi.n	ac54 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    abf8:	f104 0028 	add.w	r0, r4, #40	; 0x28
    abfc:	f019 fd41 	bl	24682 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    ac00:	05c2      	lsls	r2, r0, #23
    ac02:	d527      	bpl.n	ac54 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    ac04:	a901      	add	r1, sp, #4
    ac06:	f104 0018 	add.w	r0, r4, #24
    ac0a:	f7fe f867 	bl	8cdc <le_adv_start_add_conn>
	if (err) {
    ac0e:	bb08      	cbnz	r0, ac54 <bt_le_adv_resume+0x7c>
    ac10:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ac14:	f019 fd35 	bl	24682 <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    ac18:	0503      	lsls	r3, r0, #20
    ac1a:	d402      	bmi.n	ac22 <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    ac1c:	7e20      	ldrb	r0, [r4, #24]
    ac1e:	f7fe fd23 	bl	9668 <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    ac22:	480e      	ldr	r0, [pc, #56]	; (ac5c <bt_le_adv_resume+0x84>)
    ac24:	2101      	movs	r1, #1
    ac26:	f7fe fdb5 	bl	9794 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    ac2a:	b150      	cbz	r0, ac42 <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ac2c:	9801      	ldr	r0, [sp, #4]
    ac2e:	2100      	movs	r1, #0
    ac30:	f000 fcc6 	bl	b5c0 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ac34:	480a      	ldr	r0, [pc, #40]	; (ac60 <bt_le_adv_resume+0x88>)
    ac36:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    ac3a:	f019 fd13 	bl	24664 <atomic_and>
	return (old & mask) != 0;
    ac3e:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    ac42:	9801      	ldr	r0, [sp, #4]
    ac44:	f019 ff96 	bl	24b74 <bt_conn_unref>
	if (persist_paused) {
    ac48:	b125      	cbz	r5, ac54 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    ac4a:	4805      	ldr	r0, [pc, #20]	; (ac60 <bt_le_adv_resume+0x88>)
    ac4c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    ac50:	f019 fd26 	bl	246a0 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    ac54:	b003      	add	sp, #12
    ac56:	bd30      	pop	{r4, r5, pc}
    ac58:	20000000 	.word	0x20000000
    ac5c:	20000018 	.word	0x20000018
    ac60:	20000028 	.word	0x20000028

0000ac64 <enh_conn_complete>:
{
    ac64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ac68:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ac6c:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    ac70:	b086      	sub	sp, #24
    ac72:	4604      	mov	r4, r0
    ac74:	4876      	ldr	r0, [pc, #472]	; (ae50 <enh_conn_complete+0x1ec>)
    ac76:	f019 fcf5 	bl	24664 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    ac7a:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ac7c:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    ac80:	d504      	bpl.n	ac8c <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    ac82:	4974      	ldr	r1, [pc, #464]	; (ae54 <enh_conn_complete+0x1f0>)
    ac84:	2200      	movs	r2, #0
    ac86:	2002      	movs	r0, #2
    ac88:	f005 fac0 	bl	1020c <bt_keys_foreach>
	if (evt->status) {
    ac8c:	7825      	ldrb	r5, [r4, #0]
    ac8e:	b385      	cbz	r5, acf2 <enh_conn_complete+0x8e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ac90:	2d3c      	cmp	r5, #60	; 0x3c
    ac92:	d120      	bne.n	acd6 <enh_conn_complete+0x72>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ac94:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ac98:	486f      	ldr	r0, [pc, #444]	; (ae58 <enh_conn_complete+0x1f4>)
    ac9a:	f019 fce3 	bl	24664 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    ac9e:	2000      	movs	r0, #0
    aca0:	f7fe f872 	bl	8d88 <find_pending_connect.part.0>
		if (!conn) {
    aca4:	4604      	mov	r4, r0
    aca6:	b960      	cbnz	r0, acc2 <enh_conn_complete+0x5e>
    aca8:	4b6c      	ldr	r3, [pc, #432]	; (ae5c <enh_conn_complete+0x1f8>)
    acaa:	496d      	ldr	r1, [pc, #436]	; (ae60 <enh_conn_complete+0x1fc>)
			BT_ERR("No pending slave connection");
    acac:	486d      	ldr	r0, [pc, #436]	; (ae64 <enh_conn_complete+0x200>)
    acae:	1ac9      	subs	r1, r1, r3
    acb0:	08c9      	lsrs	r1, r1, #3
    acb2:	0189      	lsls	r1, r1, #6
    acb4:	f041 0101 	orr.w	r1, r1, #1
}
    acb8:	b006      	add	sp, #24
    acba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    acbe:	f017 bb15 	b.w	222ec <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    acc2:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    acc4:	2100      	movs	r1, #0
    acc6:	f000 fc7b 	bl	b5c0 <bt_conn_set_state>
		bt_conn_unref(conn);
    acca:	4620      	mov	r0, r4
}
    accc:	b006      	add	sp, #24
    acce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    acd2:	f019 bf4f 	b.w	24b74 <bt_conn_unref>
    acd6:	4b61      	ldr	r3, [pc, #388]	; (ae5c <enh_conn_complete+0x1f8>)
    acd8:	4a61      	ldr	r2, [pc, #388]	; (ae60 <enh_conn_complete+0x1fc>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    acda:	4863      	ldr	r0, [pc, #396]	; (ae68 <enh_conn_complete+0x204>)
    acdc:	1ad2      	subs	r2, r2, r3
    acde:	08d2      	lsrs	r2, r2, #3
    ace0:	0192      	lsls	r2, r2, #6
    ace2:	f042 0202 	orr.w	r2, r2, #2
    ace6:	4629      	mov	r1, r5
}
    ace8:	b006      	add	sp, #24
    acea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    acee:	f017 bb0a 	b.w	22306 <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    acf2:	7923      	ldrb	r3, [r4, #4]
    acf4:	3b02      	subs	r3, #2
    acf6:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    acf8:	f104 0604 	add.w	r6, r4, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    acfc:	d839      	bhi.n	ad72 <enh_conn_complete+0x10e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    acfe:	4631      	mov	r1, r6
    ad00:	a804      	add	r0, sp, #16
    ad02:	f019 fcca 	bl	2469a <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ad06:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    ad0a:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ad0e:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    ad10:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ad14:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    ad18:	f019 fcbc 	bl	24694 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    ad1c:	2301      	movs	r3, #1
    ad1e:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    ad22:	78e3      	ldrb	r3, [r4, #3]
    ad24:	2b01      	cmp	r3, #1
    ad26:	d10c      	bne.n	ad42 <enh_conn_complete+0xde>
    ad28:	a804      	add	r0, sp, #16
    ad2a:	f7fe f82d 	bl	8d88 <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ad2e:	78e3      	ldrb	r3, [r4, #3]
    ad30:	2b01      	cmp	r3, #1
    ad32:	4605      	mov	r5, r0
    ad34:	d104      	bne.n	ad40 <enh_conn_complete+0xdc>
    ad36:	4848      	ldr	r0, [pc, #288]	; (ae58 <enh_conn_complete+0x1f4>)
    ad38:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ad3c:	f019 fc92 	bl	24664 <atomic_and>
	if (!conn) {
    ad40:	bb55      	cbnz	r5, ad98 <enh_conn_complete+0x134>
    ad42:	4a46      	ldr	r2, [pc, #280]	; (ae5c <enh_conn_complete+0x1f8>)
    ad44:	4c46      	ldr	r4, [pc, #280]	; (ae60 <enh_conn_complete+0x1fc>)
		BT_ERR("No pending conn for peer %s",
    ad46:	4630      	mov	r0, r6
    ad48:	1aa4      	subs	r4, r4, r2
    ad4a:	f7fd f96d 	bl	8028 <bt_addr_le_str_real>
    ad4e:	f7fa fbd7 	bl	5500 <log_strdup>
    ad52:	08e4      	lsrs	r4, r4, #3
    ad54:	01a4      	lsls	r4, r4, #6
    ad56:	f044 0401 	orr.w	r4, r4, #1
    ad5a:	4601      	mov	r1, r0
    ad5c:	4622      	mov	r2, r4
    ad5e:	4843      	ldr	r0, [pc, #268]	; (ae6c <enh_conn_complete+0x208>)
    ad60:	f017 fad1 	bl	22306 <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    ad64:	211f      	movs	r1, #31
    ad66:	4638      	mov	r0, r7
    ad68:	f019 fd5f 	bl	2482a <bt_hci_disconnect>
}
    ad6c:	b006      	add	sp, #24
    ad6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    ad72:	78e3      	ldrb	r3, [r4, #3]
    ad74:	2b01      	cmp	r3, #1
    ad76:	bf04      	itt	eq
    ad78:	4b3d      	ldreq	r3, [pc, #244]	; (ae70 <enh_conn_complete+0x20c>)
    ad7a:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    ad7e:	4631      	mov	r1, r6
    ad80:	4628      	mov	r0, r5
    ad82:	f019 fd4a 	bl	2481a <bt_lookup_id_addr>
    ad86:	4601      	mov	r1, r0
    ad88:	a804      	add	r0, sp, #16
    ad8a:	f019 fc86 	bl	2469a <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    ad8e:	4631      	mov	r1, r6
    ad90:	a802      	add	r0, sp, #8
    ad92:	f019 fc82 	bl	2469a <bt_addr_le_copy>
    ad96:	e7c4      	b.n	ad22 <enh_conn_complete+0xbe>
	conn->handle = handle;
    ad98:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ad9a:	a904      	add	r1, sp, #16
	conn->handle = handle;
    ad9c:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    ada0:	f019 fc7b 	bl	2469a <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    ada4:	7e22      	ldrb	r2, [r4, #24]
    ada6:	7de3      	ldrb	r3, [r4, #23]
    ada8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    adac:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    adb0:	7ea2      	ldrb	r2, [r4, #26]
    adb2:	7e63      	ldrb	r3, [r4, #25]
    adb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    adb8:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    adbc:	7ee3      	ldrb	r3, [r4, #27]
    adbe:	7f22      	ldrb	r2, [r4, #28]
    adc0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    adc4:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    adc8:	78e7      	ldrb	r7, [r4, #3]
    adca:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    adcc:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    adce:	2f01      	cmp	r7, #1
	conn->err = 0U;
    add0:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    add2:	d125      	bne.n	ae20 <enh_conn_complete+0x1bc>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    add4:	4e26      	ldr	r6, [pc, #152]	; (ae70 <enh_conn_complete+0x20c>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    add6:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    adda:	a902      	add	r1, sp, #8
    addc:	f019 fc5d 	bl	2469a <bt_addr_le_copy>
    ade0:	f106 0028 	add.w	r0, r6, #40	; 0x28
    ade4:	f019 fc4d 	bl	24682 <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    ade8:	0502      	lsls	r2, r0, #20
    adea:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    adee:	d425      	bmi.n	ae3c <enh_conn_complete+0x1d8>
				if (bt_addr_cmp(&evt->local_rpa,
    adf0:	340b      	adds	r4, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    adf2:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
    adf6:	2206      	movs	r2, #6
    adf8:	4669      	mov	r1, sp
    adfa:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
    adfc:	9300      	str	r3, [sp, #0]
    adfe:	f8ad 3004 	strh.w	r3, [sp, #4]
    ae02:	f019 fa6e 	bl	242e2 <memcmp>
    ae06:	4603      	mov	r3, r0
					bt_addr_copy(&conn->le.resp_addr.a,
    ae08:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    ae0c:	b19b      	cbz	r3, ae36 <enh_conn_complete+0x1d2>
					bt_addr_copy(&conn->le.resp_addr.a,
    ae0e:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    ae10:	f019 fc40 	bl	24694 <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    ae14:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
    ae18:	065b      	lsls	r3, r3, #25
    ae1a:	d501      	bpl.n	ae20 <enh_conn_complete+0x1bc>
			bt_le_adv_resume();
    ae1c:	f7ff fedc 	bl	abd8 <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    ae20:	2107      	movs	r1, #7
    ae22:	4628      	mov	r0, r5
    ae24:	f000 fbcc 	bl	b5c0 <bt_conn_set_state>
	conn_auto_initiate(conn);
    ae28:	4628      	mov	r0, r5
    ae2a:	f7fe fe85 	bl	9b38 <conn_auto_initiate>
	bt_conn_unref(conn);
    ae2e:	4628      	mov	r0, r5
    ae30:	f019 fea0 	bl	24b74 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ae34:	e79a      	b.n	ad6c <enh_conn_complete+0x108>
					bt_addr_copy(&conn->le.resp_addr.a,
    ae36:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    ae3a:	e7e9      	b.n	ae10 <enh_conn_complete+0x1ac>
						&bt_dev.id_addr[conn->id]);
    ae3c:	7a29      	ldrb	r1, [r5, #8]
    ae3e:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    ae42:	4431      	add	r1, r6
    ae44:	f105 0096 	add.w	r0, r5, #150	; 0x96
    ae48:	f019 fc27 	bl	2469a <bt_addr_le_copy>
    ae4c:	e7e2      	b.n	ae14 <enh_conn_complete+0x1b0>
    ae4e:	bf00      	nop
    ae50:	20000094 	.word	0x20000094
    ae54:	00024929 	.word	0x00024929
    ae58:	20000028 	.word	0x20000028
    ae5c:	0002775c 	.word	0x0002775c
    ae60:	00027814 	.word	0x00027814
    ae64:	0002c788 	.word	0x0002c788
    ae68:	0002c7a4 	.word	0x0002c7a4
    ae6c:	0002c7bd 	.word	0x0002c7bd
    ae70:	20000000 	.word	0x20000000

0000ae74 <le_legacy_conn_complete>:
{
    ae74:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    ae76:	6881      	ldr	r1, [r0, #8]
{
    ae78:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    ae7a:	780b      	ldrb	r3, [r1, #0]
    ae7c:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    ae80:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    ae84:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    ae88:	78cb      	ldrb	r3, [r1, #3]
    ae8a:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    ae8e:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    ae92:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    ae96:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    ae9a:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    ae9e:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    aea2:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    aea6:	7c4b      	ldrb	r3, [r1, #17]
    aea8:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    aeac:	a803      	add	r0, sp, #12
    aeae:	3104      	adds	r1, #4
    aeb0:	f019 fbf3 	bl	2469a <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    aeb4:	f10d 0013 	add.w	r0, sp, #19
    aeb8:	4908      	ldr	r1, [pc, #32]	; (aedc <le_legacy_conn_complete+0x68>)
    aeba:	f019 fbeb 	bl	24694 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    aebe:	2300      	movs	r3, #0
    aec0:	4669      	mov	r1, sp
    aec2:	f10d 0019 	add.w	r0, sp, #25
    aec6:	9300      	str	r3, [sp, #0]
    aec8:	f8ad 3004 	strh.w	r3, [sp, #4]
    aecc:	f019 fbe2 	bl	24694 <bt_addr_copy>
	enh_conn_complete(&enh);
    aed0:	a802      	add	r0, sp, #8
    aed2:	f7ff fec7 	bl	ac64 <enh_conn_complete>
}
    aed6:	b00b      	add	sp, #44	; 0x2c
    aed8:	f85d fb04 	ldr.w	pc, [sp], #4
    aedc:	2000002d 	.word	0x2000002d

0000aee0 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    aee0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    aee2:	4d21      	ldr	r5, [pc, #132]	; (af68 <bt_pub_key_gen+0x88>)
    aee4:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    aee8:	f003 0306 	and.w	r3, r3, #6
    aeec:	2b06      	cmp	r3, #6
    aeee:	d00d      	beq.n	af0c <bt_pub_key_gen+0x2c>
    aef0:	4b1e      	ldr	r3, [pc, #120]	; (af6c <bt_pub_key_gen+0x8c>)
    aef2:	491f      	ldr	r1, [pc, #124]	; (af70 <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    aef4:	481f      	ldr	r0, [pc, #124]	; (af74 <bt_pub_key_gen+0x94>)
    aef6:	1ac9      	subs	r1, r1, r3
    aef8:	08c9      	lsrs	r1, r1, #3
    aefa:	0189      	lsls	r1, r1, #6
    aefc:	f041 0102 	orr.w	r1, r1, #2
    af00:	f017 f9f4 	bl	222ec <log_0>
		return -ENOTSUP;
    af04:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    af08:	4620      	mov	r0, r4
    af0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    af0c:	4e1a      	ldr	r6, [pc, #104]	; (af78 <bt_pub_key_gen+0x98>)
    af0e:	6833      	ldr	r3, [r6, #0]
    af10:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    af12:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    af14:	2104      	movs	r1, #4
    af16:	f105 0094 	add.w	r0, r5, #148	; 0x94
    af1a:	f019 fbd0 	bl	246be <atomic_test_and_set_bit>
    af1e:	4607      	mov	r7, r0
    af20:	bb00      	cbnz	r0, af64 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    af22:	f06f 0108 	mvn.w	r1, #8
    af26:	f105 0094 	add.w	r0, r5, #148	; 0x94
    af2a:	f019 fb9b 	bl	24664 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    af2e:	463a      	mov	r2, r7
    af30:	4639      	mov	r1, r7
    af32:	f242 0025 	movw	r0, #8229	; 0x2025
    af36:	f7fe faef 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    af3a:	4604      	mov	r4, r0
    af3c:	2800      	cmp	r0, #0
    af3e:	d0e3      	beq.n	af08 <bt_pub_key_gen+0x28>
    af40:	4b0a      	ldr	r3, [pc, #40]	; (af6c <bt_pub_key_gen+0x8c>)
    af42:	490b      	ldr	r1, [pc, #44]	; (af70 <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    af44:	480d      	ldr	r0, [pc, #52]	; (af7c <bt_pub_key_gen+0x9c>)
    af46:	1ac9      	subs	r1, r1, r3
    af48:	08c9      	lsrs	r1, r1, #3
    af4a:	0189      	lsls	r1, r1, #6
    af4c:	f041 0101 	orr.w	r1, r1, #1
    af50:	f017 f9cc 	bl	222ec <log_0>
    af54:	f06f 0110 	mvn.w	r1, #16
    af58:	f105 0094 	add.w	r0, r5, #148	; 0x94
    af5c:	f019 fb82 	bl	24664 <atomic_and>
		pub_key_cb = NULL;
    af60:	6037      	str	r7, [r6, #0]
		return err;
    af62:	e7d1      	b.n	af08 <bt_pub_key_gen+0x28>
		return 0;
    af64:	2400      	movs	r4, #0
    af66:	e7cf      	b.n	af08 <bt_pub_key_gen+0x28>
    af68:	20000000 	.word	0x20000000
    af6c:	0002775c 	.word	0x0002775c
    af70:	00027814 	.word	0x00027814
    af74:	0002c7d9 	.word	0x0002c7d9
    af78:	2000d734 	.word	0x2000d734
    af7c:	0002c7f8 	.word	0x0002c7f8

0000af80 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    af80:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    af82:	4804      	ldr	r0, [pc, #16]	; (af94 <bt_pub_key_get+0x14>)
    af84:	f019 fb7d 	bl	24682 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
    af88:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
    af8c:	4802      	ldr	r0, [pc, #8]	; (af98 <bt_pub_key_get+0x18>)
    af8e:	bf08      	it	eq
    af90:	2000      	moveq	r0, #0
    af92:	bd08      	pop	{r3, pc}
    af94:	20000094 	.word	0x20000094
    af98:	2000f2ab 	.word	0x2000f2ab

0000af9c <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    af9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    af9e:	4d1c      	ldr	r5, [pc, #112]	; (b010 <bt_dh_key_gen+0x74>)
    afa0:	682b      	ldr	r3, [r5, #0]
    afa2:	428b      	cmp	r3, r1
{
    afa4:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    afa6:	d02d      	beq.n	b004 <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    afa8:	b113      	cbz	r3, afb0 <bt_dh_key_gen+0x14>
		return -EBUSY;
    afaa:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    afae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    afb0:	4818      	ldr	r0, [pc, #96]	; (b014 <bt_dh_key_gen+0x78>)
    afb2:	f019 fb66 	bl	24682 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    afb6:	06c2      	lsls	r2, r0, #27
    afb8:	f3c0 1700 	ubfx	r7, r0, #4, #1
    afbc:	d4f5      	bmi.n	afaa <bt_dh_key_gen+0xe>
    afbe:	4815      	ldr	r0, [pc, #84]	; (b014 <bt_dh_key_gen+0x78>)
    afc0:	f019 fb5f 	bl	24682 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    afc4:	0703      	lsls	r3, r0, #28
    afc6:	d520      	bpl.n	b00a <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
    afc8:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    afca:	f242 0026 	movw	r0, #8230	; 0x2026
    afce:	2140      	movs	r1, #64	; 0x40
    afd0:	f7fe f942 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
    afd4:	4604      	mov	r4, r0
    afd6:	b918      	cbnz	r0, afe0 <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
    afd8:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    afda:	f06f 0036 	mvn.w	r0, #54	; 0x36
    afde:	e7e6      	b.n	afae <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
    afe0:	2140      	movs	r1, #64	; 0x40
    afe2:	3008      	adds	r0, #8
    afe4:	f01b f9e2 	bl	263ac <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    afe8:	2240      	movs	r2, #64	; 0x40
    afea:	4631      	mov	r1, r6
    afec:	f019 f98a 	bl	24304 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    aff0:	463a      	mov	r2, r7
    aff2:	4621      	mov	r1, r4
    aff4:	f242 0026 	movw	r0, #8230	; 0x2026
    aff8:	f7fe fa8e 	bl	9518 <bt_hci_cmd_send_sync>
	if (err) {
    affc:	2800      	cmp	r0, #0
    affe:	d0d6      	beq.n	afae <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    b000:	602f      	str	r7, [r5, #0]
		return err;
    b002:	e7d4      	b.n	afae <bt_dh_key_gen+0x12>
		return -EALREADY;
    b004:	f06f 0044 	mvn.w	r0, #68	; 0x44
    b008:	e7d1      	b.n	afae <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    b00a:	f06f 0030 	mvn.w	r0, #48	; 0x30
    b00e:	e7ce      	b.n	afae <bt_dh_key_gen+0x12>
    b010:	2000d730 	.word	0x2000d730
    b014:	20000094 	.word	0x20000094

0000b018 <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    b018:	2300      	movs	r3, #0
	tx->user_data = NULL;
    b01a:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    b01e:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    b020:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    b022:	4801      	ldr	r0, [pc, #4]	; (b028 <tx_free+0x10>)
    b024:	f01b be5d 	b.w	26ce2 <k_queue_append>
    b028:	2000a020 	.word	0x2000a020

0000b02c <notify_connected>:
{
    b02c:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    b02e:	4b09      	ldr	r3, [pc, #36]	; (b054 <notify_connected+0x28>)
    b030:	681d      	ldr	r5, [r3, #0]
{
    b032:	4604      	mov	r4, r0
			cb->connected(conn, conn->err);
    b034:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    b036:	b92d      	cbnz	r5, b044 <notify_connected+0x18>
	if (!conn->err) {
    b038:	b951      	cbnz	r1, b050 <notify_connected+0x24>
		bt_gatt_connected(conn);
    b03a:	4620      	mov	r0, r4
}
    b03c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    b040:	f003 b8d4 	b.w	e1ec <bt_gatt_connected>
		if (cb->connected) {
    b044:	682b      	ldr	r3, [r5, #0]
    b046:	b10b      	cbz	r3, b04c <notify_connected+0x20>
			cb->connected(conn, conn->err);
    b048:	4620      	mov	r0, r4
    b04a:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b04c:	69ad      	ldr	r5, [r5, #24]
    b04e:	e7f1      	b.n	b034 <notify_connected+0x8>
}
    b050:	bd38      	pop	{r3, r4, r5, pc}
    b052:	bf00      	nop
    b054:	2000d740 	.word	0x2000d740

0000b058 <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    b058:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    b05c:	694d      	ldr	r5, [r1, #20]
{
    b05e:	4604      	mov	r4, r0
    b060:	460e      	mov	r6, r1
    b062:	4691      	mov	r9, r2
    b064:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    b066:	f04f 33ff 	mov.w	r3, #4294967295
    b06a:	4844      	ldr	r0, [pc, #272]	; (b17c <send_frag+0x124>)
    b06c:	f04f 32ff 	mov.w	r2, #4294967295
    b070:	f015 f96c 	bl	2034c <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    b074:	7b63      	ldrb	r3, [r4, #13]
    b076:	2b07      	cmp	r3, #7
    b078:	d151      	bne.n	b11e <send_frag+0xc6>
	__asm__ volatile(
    b07a:	f04f 0320 	mov.w	r3, #32
    b07e:	f3ef 8211 	mrs	r2, BASEPRI
    b082:	f383 8811 	msr	BASEPRI, r3
    b086:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    b08a:	69a3      	ldr	r3, [r4, #24]
    b08c:	2d00      	cmp	r5, #0
    b08e:	d058      	beq.n	b142 <send_frag+0xea>
	parent->next = child;
    b090:	2100      	movs	r1, #0
    b092:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    b094:	2b00      	cmp	r3, #0
    b096:	d151      	bne.n	b13c <send_frag+0xe4>
	list->head = node;
    b098:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    b09c:	f382 8811 	msr	BASEPRI, r2
    b0a0:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    b0a4:	2104      	movs	r1, #4
    b0a6:	f106 0008 	add.w	r0, r6, #8
    b0aa:	f01b f996 	bl	263da <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b0ae:	8823      	ldrh	r3, [r4, #0]
    b0b0:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    b0b4:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b0b8:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b0ba:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b0be:	3b04      	subs	r3, #4
    b0c0:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    b0c2:	2302      	movs	r3, #2
    b0c4:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    b0c6:	4630      	mov	r0, r6
    b0c8:	f019 fc3e 	bl	24948 <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    b0cc:	4601      	mov	r1, r0
    b0ce:	2800      	cmp	r0, #0
    b0d0:	d051      	beq.n	b176 <send_frag+0x11e>
    b0d2:	4b2b      	ldr	r3, [pc, #172]	; (b180 <send_frag+0x128>)
    b0d4:	4a2b      	ldr	r2, [pc, #172]	; (b184 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    b0d6:	482c      	ldr	r0, [pc, #176]	; (b188 <send_frag+0x130>)
    b0d8:	1ad2      	subs	r2, r2, r3
    b0da:	08d2      	lsrs	r2, r2, #3
    b0dc:	0192      	lsls	r2, r2, #6
    b0de:	f042 0201 	orr.w	r2, r2, #1
    b0e2:	f017 f910 	bl	22306 <log_1>
	__asm__ volatile(
    b0e6:	f04f 0320 	mov.w	r3, #32
    b0ea:	f3ef 8011 	mrs	r0, BASEPRI
    b0ee:	f383 8811 	msr	BASEPRI, r3
    b0f2:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    b0f6:	2d00      	cmp	r5, #0
    b0f8:	d037      	beq.n	b16a <send_frag+0x112>
	return list->head;
    b0fa:	6963      	ldr	r3, [r4, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b0fc:	2200      	movs	r2, #0
    b0fe:	b153      	cbz	r3, b116 <send_frag+0xbe>
    b100:	429d      	cmp	r5, r3
    b102:	d12f      	bne.n	b164 <send_frag+0x10c>
	return node->next;
    b104:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    b106:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    b108:	bb3a      	cbnz	r2, b15a <send_frag+0x102>
    b10a:	428d      	cmp	r5, r1
	list->head = node;
    b10c:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    b10e:	d100      	bne.n	b112 <send_frag+0xba>
	list->tail = node;
    b110:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    b112:	2300      	movs	r3, #0
    b114:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    b116:	f380 8811 	msr	BASEPRI, r0
    b11a:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    b11e:	4817      	ldr	r0, [pc, #92]	; (b17c <send_frag+0x124>)
    b120:	f015 f8ee 	bl	20300 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    b124:	b115      	cbz	r5, b12c <send_frag+0xd4>
		tx_free(tx);
    b126:	4628      	mov	r0, r5
    b128:	f7ff ff76 	bl	b018 <tx_free>
	}

	if (always_consume) {
    b12c:	b11f      	cbz	r7, b136 <send_frag+0xde>
		net_buf_unref(buf);
    b12e:	4630      	mov	r0, r6
    b130:	f012 fa0a 	bl	1d548 <net_buf_unref>
	}
	return false;
    b134:	2700      	movs	r7, #0
}
    b136:	4638      	mov	r0, r7
    b138:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b13c:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b13e:	61a5      	str	r5, [r4, #24]
}
    b140:	e7ac      	b.n	b09c <send_frag+0x44>
		if (tail_tx) {
    b142:	b133      	cbz	r3, b152 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    b144:	f103 080c 	add.w	r8, r3, #12
    b148:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    b14a:	3301      	adds	r3, #1
    b14c:	f8c8 3000 	str.w	r3, [r8]
    b150:	e7a4      	b.n	b09c <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    b152:	69e3      	ldr	r3, [r4, #28]
    b154:	f104 081c 	add.w	r8, r4, #28
    b158:	e7f7      	b.n	b14a <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    b15a:	428d      	cmp	r5, r1
	parent->next = child;
    b15c:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b15e:	bf08      	it	eq
    b160:	61a2      	streq	r2, [r4, #24]
}
    b162:	e7d6      	b.n	b112 <send_frag+0xba>
	return node->next;
    b164:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b166:	681b      	ldr	r3, [r3, #0]
    b168:	e7c9      	b.n	b0fe <send_frag+0xa6>
			(*pending_no_cb)--;
    b16a:	f8d8 3000 	ldr.w	r3, [r8]
    b16e:	3b01      	subs	r3, #1
    b170:	f8c8 3000 	str.w	r3, [r8]
    b174:	e7cf      	b.n	b116 <send_frag+0xbe>
	return true;
    b176:	2701      	movs	r7, #1
    b178:	e7dd      	b.n	b136 <send_frag+0xde>
    b17a:	bf00      	nop
    b17c:	200000c8 	.word	0x200000c8
    b180:	0002775c 	.word	0x0002775c
    b184:	0002776c 	.word	0x0002776c
    b188:	0002c0e5 	.word	0x0002c0e5

0000b18c <bt_conn_get_pkts>:
}
    b18c:	4800      	ldr	r0, [pc, #0]	; (b190 <bt_conn_get_pkts+0x4>)
    b18e:	4770      	bx	lr
    b190:	200000c8 	.word	0x200000c8

0000b194 <notify_le_param_updated>:
{
    b194:	b570      	push	{r4, r5, r6, lr}
    b196:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b198:	f3bf 8f5b 	dmb	ish
    b19c:	6863      	ldr	r3, [r4, #4]
    b19e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    b1a2:	059b      	lsls	r3, r3, #22
    b1a4:	f100 0004 	add.w	r0, r0, #4
    b1a8:	d511      	bpl.n	b1ce <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    b1aa:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    b1ae:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    b1b2:	429a      	cmp	r2, r3
    b1b4:	d80b      	bhi.n	b1ce <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    b1b6:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    b1ba:	429a      	cmp	r2, r3
    b1bc:	d307      	bcc.n	b1ce <notify_le_param_updated+0x3a>
	    conn->le.latency == conn->le.pending_latency &&
    b1be:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    b1c2:	429a      	cmp	r2, r3
    b1c4:	d103      	bne.n	b1ce <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b1c6:	f46f 7100 	mvn.w	r1, #512	; 0x200
    b1ca:	f019 fc02 	bl	249d2 <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
    b1ce:	4b08      	ldr	r3, [pc, #32]	; (b1f0 <notify_le_param_updated+0x5c>)
    b1d0:	681d      	ldr	r5, [r3, #0]
    b1d2:	b905      	cbnz	r5, b1d6 <notify_le_param_updated+0x42>
}
    b1d4:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    b1d6:	68ee      	ldr	r6, [r5, #12]
    b1d8:	b13e      	cbz	r6, b1ea <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    b1da:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    b1de:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    b1e2:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    b1e6:	4620      	mov	r0, r4
    b1e8:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    b1ea:	69ad      	ldr	r5, [r5, #24]
    b1ec:	e7f1      	b.n	b1d2 <notify_le_param_updated+0x3e>
    b1ee:	bf00      	nop
    b1f0:	2000d740 	.word	0x2000d740

0000b1f4 <le_param_req>:
{
    b1f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b1f6:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    b1f8:	4608      	mov	r0, r1
{
    b1fa:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b1fc:	f019 fb73 	bl	248e6 <bt_le_conn_params_valid>
    b200:	4604      	mov	r4, r0
    b202:	b910      	cbnz	r0, b20a <le_param_req+0x16>
		return false;
    b204:	2400      	movs	r4, #0
}
    b206:	4620      	mov	r0, r4
    b208:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    b20a:	4b09      	ldr	r3, [pc, #36]	; (b230 <le_param_req+0x3c>)
    b20c:	681e      	ldr	r6, [r3, #0]
    b20e:	2e00      	cmp	r6, #0
    b210:	d0f9      	beq.n	b206 <le_param_req+0x12>
		if (!cb->le_param_req) {
    b212:	68b3      	ldr	r3, [r6, #8]
    b214:	b90b      	cbnz	r3, b21a <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    b216:	69b6      	ldr	r6, [r6, #24]
    b218:	e7f9      	b.n	b20e <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    b21a:	4629      	mov	r1, r5
    b21c:	4638      	mov	r0, r7
    b21e:	4798      	blx	r3
    b220:	2800      	cmp	r0, #0
    b222:	d0ef      	beq.n	b204 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    b224:	4628      	mov	r0, r5
    b226:	f019 fb5e 	bl	248e6 <bt_le_conn_params_valid>
    b22a:	2800      	cmp	r0, #0
    b22c:	d1f3      	bne.n	b216 <le_param_req+0x22>
    b22e:	e7e9      	b.n	b204 <le_param_req+0x10>
    b230:	2000d740 	.word	0x2000d740

0000b234 <bt_conn_identity_resolved>:
{
    b234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    b236:	78c3      	ldrb	r3, [r0, #3]
{
    b238:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    b23a:	b93b      	cbnz	r3, b24c <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    b23c:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    b240:	4b08      	ldr	r3, [pc, #32]	; (b264 <bt_conn_identity_resolved+0x30>)
    b242:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    b244:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    b248:	b91d      	cbnz	r5, b252 <bt_conn_identity_resolved+0x1e>
}
    b24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    b24c:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    b250:	e7f6      	b.n	b240 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    b252:	692b      	ldr	r3, [r5, #16]
    b254:	b11b      	cbz	r3, b25e <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    b256:	463a      	mov	r2, r7
    b258:	4631      	mov	r1, r6
    b25a:	4620      	mov	r0, r4
    b25c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b25e:	69ad      	ldr	r5, [r5, #24]
    b260:	e7f2      	b.n	b248 <bt_conn_identity_resolved+0x14>
    b262:	bf00      	nop
    b264:	2000d740 	.word	0x2000d740

0000b268 <bt_conn_security_changed>:
{
    b268:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    b26a:	7a43      	ldrb	r3, [r0, #9]
    b26c:	7283      	strb	r3, [r0, #10]
{
    b26e:	4604      	mov	r4, r0
    b270:	4615      	mov	r5, r2
	bt_l2cap_security_changed(conn, hci_err);
    b272:	f019 fd51 	bl	24d18 <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    b276:	4b0d      	ldr	r3, [pc, #52]	; (b2ac <bt_conn_security_changed+0x44>)
    b278:	681e      	ldr	r6, [r3, #0]
    b27a:	b96e      	cbnz	r6, b298 <bt_conn_security_changed+0x30>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    b27c:	b9a5      	cbnz	r5, b2a8 <bt_conn_security_changed+0x40>
    b27e:	7a63      	ldrb	r3, [r4, #9]
    b280:	2b01      	cmp	r3, #1
    b282:	d911      	bls.n	b2a8 <bt_conn_security_changed+0x40>
		if (conn->type == BT_CONN_TYPE_LE) {
    b284:	78a3      	ldrb	r3, [r4, #2]
    b286:	2b01      	cmp	r3, #1
    b288:	d10e      	bne.n	b2a8 <bt_conn_security_changed+0x40>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    b28a:	7a20      	ldrb	r0, [r4, #8]
    b28c:	f104 0188 	add.w	r1, r4, #136	; 0x88
}
    b290:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    b294:	f005 b94a 	b.w	1052c <bt_keys_update_usage>
		if (cb->security_changed) {
    b298:	6973      	ldr	r3, [r6, #20]
    b29a:	b11b      	cbz	r3, b2a4 <bt_conn_security_changed+0x3c>
			cb->security_changed(conn, conn->sec_level, err);
    b29c:	7a61      	ldrb	r1, [r4, #9]
    b29e:	462a      	mov	r2, r5
    b2a0:	4620      	mov	r0, r4
    b2a2:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b2a4:	69b6      	ldr	r6, [r6, #24]
    b2a6:	e7e8      	b.n	b27a <bt_conn_security_changed+0x12>
}
    b2a8:	bd70      	pop	{r4, r5, r6, pc}
    b2aa:	bf00      	nop
    b2ac:	2000d740 	.word	0x2000d740

0000b2b0 <bt_conn_cb_register>:
	cb->_next = callback_list;
    b2b0:	4b02      	ldr	r3, [pc, #8]	; (b2bc <bt_conn_cb_register+0xc>)
    b2b2:	681a      	ldr	r2, [r3, #0]
    b2b4:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    b2b6:	6018      	str	r0, [r3, #0]
}
    b2b8:	4770      	bx	lr
    b2ba:	bf00      	nop
    b2bc:	2000d740 	.word	0x2000d740

0000b2c0 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    b2c0:	b570      	push	{r4, r5, r6, lr}
    b2c2:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    b2c4:	f100 0634 	add.w	r6, r0, #52	; 0x34
    b2c8:	2200      	movs	r2, #0
    b2ca:	2300      	movs	r3, #0
    b2cc:	4630      	mov	r0, r6
    b2ce:	f01b f81c 	bl	2630a <net_buf_get>
    b2d2:	4605      	mov	r5, r0
    b2d4:	b958      	cbnz	r0, b2ee <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    b2d6:	4620      	mov	r0, r4
    b2d8:	f019 fc08 	bl	24aec <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b2dc:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b2e0:	4807      	ldr	r0, [pc, #28]	; (b300 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    b2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b2e6:	2200      	movs	r2, #0
    b2e8:	2300      	movs	r3, #0
    b2ea:	f015 b963 	b.w	205b4 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    b2ee:	6968      	ldr	r0, [r5, #20]
    b2f0:	b108      	cbz	r0, b2f6 <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    b2f2:	f7ff fe91 	bl	b018 <tx_free>
		net_buf_unref(buf);
    b2f6:	4628      	mov	r0, r5
    b2f8:	f012 f926 	bl	1d548 <net_buf_unref>
    b2fc:	e7e4      	b.n	b2c8 <conn_cleanup+0x8>
    b2fe:	bf00      	nop
    b300:	2000aca0 	.word	0x2000aca0

0000b304 <bt_conn_recv>:
{
    b304:	b570      	push	{r4, r5, r6, lr}
    b306:	4616      	mov	r6, r2
    b308:	4604      	mov	r4, r0
    b30a:	460d      	mov	r5, r1
	tx_notify(conn);
    b30c:	f019 fb70 	bl	249f0 <tx_notify>
	switch (flags) {
    b310:	2e01      	cmp	r6, #1
    b312:	d02b      	beq.n	b36c <bt_conn_recv+0x68>
    b314:	2e02      	cmp	r6, #2
    b316:	d158      	bne.n	b3ca <bt_conn_recv+0xc6>
		if (conn->rx) {
    b318:	6923      	ldr	r3, [r4, #16]
    b31a:	b163      	cbz	r3, b336 <bt_conn_recv+0x32>
    b31c:	4b35      	ldr	r3, [pc, #212]	; (b3f4 <bt_conn_recv+0xf0>)
    b31e:	4936      	ldr	r1, [pc, #216]	; (b3f8 <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    b320:	4836      	ldr	r0, [pc, #216]	; (b3fc <bt_conn_recv+0xf8>)
    b322:	1ac9      	subs	r1, r1, r3
    b324:	08c9      	lsrs	r1, r1, #3
    b326:	0189      	lsls	r1, r1, #6
    b328:	f041 0101 	orr.w	r1, r1, #1
    b32c:	f016 ffde 	bl	222ec <log_0>
			bt_conn_reset_rx_state(conn);
    b330:	4620      	mov	r0, r4
    b332:	f019 fbdb 	bl	24aec <bt_conn_reset_rx_state>
		conn->rx = buf;
    b336:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    b338:	6923      	ldr	r3, [r4, #16]
    b33a:	8999      	ldrh	r1, [r3, #12]
    b33c:	2901      	cmp	r1, #1
    b33e:	d958      	bls.n	b3f2 <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    b340:	689a      	ldr	r2, [r3, #8]
    b342:	8812      	ldrh	r2, [r2, #0]
    b344:	3204      	adds	r2, #4
    b346:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    b348:	428a      	cmp	r2, r1
    b34a:	d852      	bhi.n	b3f2 <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    b34c:	d249      	bcs.n	b3e2 <bt_conn_recv+0xde>
    b34e:	4829      	ldr	r0, [pc, #164]	; (b3f4 <bt_conn_recv+0xf0>)
    b350:	4b29      	ldr	r3, [pc, #164]	; (b3f8 <bt_conn_recv+0xf4>)
    b352:	1a1b      	subs	r3, r3, r0
    b354:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    b356:	019b      	lsls	r3, r3, #6
    b358:	4829      	ldr	r0, [pc, #164]	; (b400 <bt_conn_recv+0xfc>)
    b35a:	f043 0301 	orr.w	r3, r3, #1
    b35e:	f016 ffe6 	bl	2232e <log_2>
		bt_conn_reset_rx_state(conn);
    b362:	4620      	mov	r0, r4
}
    b364:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    b368:	f019 bbc0 	b.w	24aec <bt_conn_reset_rx_state>
		if (!conn->rx) {
    b36c:	6920      	ldr	r0, [r4, #16]
    b36e:	b968      	cbnz	r0, b38c <bt_conn_recv+0x88>
    b370:	4921      	ldr	r1, [pc, #132]	; (b3f8 <bt_conn_recv+0xf4>)
    b372:	4b20      	ldr	r3, [pc, #128]	; (b3f4 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    b374:	4823      	ldr	r0, [pc, #140]	; (b404 <bt_conn_recv+0x100>)
    b376:	1ac9      	subs	r1, r1, r3
    b378:	08c9      	lsrs	r1, r1, #3
    b37a:	0189      	lsls	r1, r1, #6
    b37c:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    b380:	f016 ffb4 	bl	222ec <log_0>
			bt_conn_reset_rx_state(conn);
    b384:	4620      	mov	r0, r4
    b386:	f019 fbb1 	bl	24aec <bt_conn_reset_rx_state>
    b38a:	e001      	b.n	b390 <bt_conn_recv+0x8c>
		if (!buf->len) {
    b38c:	89ae      	ldrh	r6, [r5, #12]
    b38e:	b926      	cbnz	r6, b39a <bt_conn_recv+0x96>
			net_buf_unref(buf);
    b390:	4628      	mov	r0, r5
}
    b392:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    b396:	f012 b8d7 	b.w	1d548 <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    b39a:	3008      	adds	r0, #8
    b39c:	f01b f841 	bl	26422 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    b3a0:	4286      	cmp	r6, r0
    b3a2:	d908      	bls.n	b3b6 <bt_conn_recv+0xb2>
    b3a4:	4914      	ldr	r1, [pc, #80]	; (b3f8 <bt_conn_recv+0xf4>)
    b3a6:	4b13      	ldr	r3, [pc, #76]	; (b3f4 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    b3a8:	4817      	ldr	r0, [pc, #92]	; (b408 <bt_conn_recv+0x104>)
    b3aa:	1ac9      	subs	r1, r1, r3
    b3ac:	08c9      	lsrs	r1, r1, #3
    b3ae:	0189      	lsls	r1, r1, #6
    b3b0:	f041 0101 	orr.w	r1, r1, #1
    b3b4:	e7e4      	b.n	b380 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b3b6:	6920      	ldr	r0, [r4, #16]
    b3b8:	89aa      	ldrh	r2, [r5, #12]
    b3ba:	68a9      	ldr	r1, [r5, #8]
    b3bc:	3008      	adds	r0, #8
    b3be:	f01a fffb 	bl	263b8 <net_buf_simple_add_mem>
		net_buf_unref(buf);
    b3c2:	4628      	mov	r0, r5
    b3c4:	f012 f8c0 	bl	1d548 <net_buf_unref>
		break;
    b3c8:	e7b6      	b.n	b338 <bt_conn_recv+0x34>
    b3ca:	4a0a      	ldr	r2, [pc, #40]	; (b3f4 <bt_conn_recv+0xf0>)
    b3cc:	4b0a      	ldr	r3, [pc, #40]	; (b3f8 <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b3ce:	480f      	ldr	r0, [pc, #60]	; (b40c <bt_conn_recv+0x108>)
    b3d0:	1a9b      	subs	r3, r3, r2
    b3d2:	08db      	lsrs	r3, r3, #3
    b3d4:	019b      	lsls	r3, r3, #6
    b3d6:	f043 0201 	orr.w	r2, r3, #1
    b3da:	4631      	mov	r1, r6
    b3dc:	f016 ff93 	bl	22306 <log_1>
		bt_conn_reset_rx_state(conn);
    b3e0:	e7d0      	b.n	b384 <bt_conn_recv+0x80>
	conn->rx = NULL;
    b3e2:	2200      	movs	r2, #0
    b3e4:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    b3e6:	4620      	mov	r0, r4
    b3e8:	4619      	mov	r1, r3
}
    b3ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    b3ee:	f000 bcff 	b.w	bdf0 <bt_l2cap_recv>
}
    b3f2:	bd70      	pop	{r4, r5, r6, pc}
    b3f4:	0002775c 	.word	0x0002775c
    b3f8:	0002776c 	.word	0x0002776c
    b3fc:	0002c84c 	.word	0x0002c84c
    b400:	0002c8cc 	.word	0x0002c8cc
    b404:	0002c869 	.word	0x0002c869
    b408:	0002c887 	.word	0x0002c887
    b40c:	0002c8ae 	.word	0x0002c8ae

0000b410 <bt_conn_send_cb>:
{
    b410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b414:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    b416:	7b43      	ldrb	r3, [r0, #13]
    b418:	2b07      	cmp	r3, #7
{
    b41a:	4606      	mov	r6, r0
    b41c:	460d      	mov	r5, r1
    b41e:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    b420:	d00f      	beq.n	b442 <bt_conn_send_cb+0x32>
    b422:	4b2a      	ldr	r3, [pc, #168]	; (b4cc <bt_conn_send_cb+0xbc>)
    b424:	492a      	ldr	r1, [pc, #168]	; (b4d0 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    b426:	482b      	ldr	r0, [pc, #172]	; (b4d4 <bt_conn_send_cb+0xc4>)
    b428:	1ac9      	subs	r1, r1, r3
    b42a:	08c9      	lsrs	r1, r1, #3
    b42c:	0189      	lsls	r1, r1, #6
    b42e:	f041 0101 	orr.w	r1, r1, #1
    b432:	f016 ff5b 	bl	222ec <log_0>
		net_buf_unref(buf);
    b436:	4628      	mov	r0, r5
    b438:	f012 f886 	bl	1d548 <net_buf_unref>
			return -ENOTCONN;
    b43c:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b440:	e020      	b.n	b484 <bt_conn_send_cb+0x74>
	if (cb) {
    b442:	2a00      	cmp	r2, #0
    b444:	d040      	beq.n	b4c8 <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    b446:	f014 ff55 	bl	202f4 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    b44a:	4b23      	ldr	r3, [pc, #140]	; (b4d8 <bt_conn_send_cb+0xc8>)
    b44c:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    b44e:	4823      	ldr	r0, [pc, #140]	; (b4dc <bt_conn_send_cb+0xcc>)
    b450:	bf07      	ittee	eq
    b452:	2200      	moveq	r2, #0
    b454:	2300      	moveq	r3, #0
    b456:	f04f 32ff 	movne.w	r2, #4294967295
    b45a:	f04f 33ff 	movne.w	r3, #4294967295
    b45e:	f014 fb93 	bl	1fb88 <z_impl_k_queue_get>
    b462:	4604      	mov	r4, r0
		if (!tx) {
    b464:	b980      	cbnz	r0, b488 <bt_conn_send_cb+0x78>
    b466:	4b19      	ldr	r3, [pc, #100]	; (b4cc <bt_conn_send_cb+0xbc>)
    b468:	4919      	ldr	r1, [pc, #100]	; (b4d0 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    b46a:	481d      	ldr	r0, [pc, #116]	; (b4e0 <bt_conn_send_cb+0xd0>)
    b46c:	1ac9      	subs	r1, r1, r3
    b46e:	08c9      	lsrs	r1, r1, #3
    b470:	0189      	lsls	r1, r1, #6
    b472:	f041 0101 	orr.w	r1, r1, #1
    b476:	f016 ff39 	bl	222ec <log_0>
			net_buf_unref(buf);
    b47a:	4628      	mov	r0, r5
    b47c:	f012 f864 	bl	1d548 <net_buf_unref>
			return -ENOBUFS;
    b480:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    b484:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    b488:	7b73      	ldrb	r3, [r6, #13]
    b48a:	2b07      	cmp	r3, #7
    b48c:	d010      	beq.n	b4b0 <bt_conn_send_cb+0xa0>
    b48e:	4b0f      	ldr	r3, [pc, #60]	; (b4cc <bt_conn_send_cb+0xbc>)
    b490:	490f      	ldr	r1, [pc, #60]	; (b4d0 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    b492:	4814      	ldr	r0, [pc, #80]	; (b4e4 <bt_conn_send_cb+0xd4>)
    b494:	1ac9      	subs	r1, r1, r3
    b496:	08c9      	lsrs	r1, r1, #3
    b498:	0189      	lsls	r1, r1, #6
    b49a:	f041 0102 	orr.w	r1, r1, #2
    b49e:	f016 ff25 	bl	222ec <log_0>
			net_buf_unref(buf);
    b4a2:	4628      	mov	r0, r5
    b4a4:	f012 f850 	bl	1d548 <net_buf_unref>
			tx_free(tx);
    b4a8:	4620      	mov	r0, r4
    b4aa:	f7ff fdb5 	bl	b018 <tx_free>
    b4ae:	e7c5      	b.n	b43c <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    b4b0:	2300      	movs	r3, #0
		tx->user_data = user_data;
    b4b2:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    b4b6:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    b4b8:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    b4ba:	f106 0034 	add.w	r0, r6, #52	; 0x34
    b4be:	4629      	mov	r1, r5
    b4c0:	f01a ff41 	bl	26346 <net_buf_put>
	return 0;
    b4c4:	2000      	movs	r0, #0
    b4c6:	e7dd      	b.n	b484 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    b4c8:	614a      	str	r2, [r1, #20]
    b4ca:	e7f6      	b.n	b4ba <bt_conn_send_cb+0xaa>
    b4cc:	0002775c 	.word	0x0002775c
    b4d0:	0002776c 	.word	0x0002776c
    b4d4:	0002c8e7 	.word	0x0002c8e7
    b4d8:	2000acb8 	.word	0x2000acb8
    b4dc:	2000a020 	.word	0x2000a020
    b4e0:	0002c8f6 	.word	0x0002c8f6
    b4e4:	0002c914 	.word	0x0002c914

0000b4e8 <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    b4e8:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    b4ea:	4b17      	ldr	r3, [pc, #92]	; (b548 <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b4ec:	4c17      	ldr	r4, [pc, #92]	; (b54c <bt_conn_prepare_events+0x64>)
    b4ee:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b4f0:	2101      	movs	r1, #1
{
    b4f2:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    b4f4:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b4f6:	f01b ff95 	bl	27424 <k_poll_event_init>
    b4fa:	f3bf 8f5b 	dmb	ish
    b4fe:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    b502:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    b506:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    b50a:	b90b      	cbnz	r3, b510 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    b50c:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    b50e:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b510:	7b63      	ldrb	r3, [r4, #13]
    b512:	b953      	cbnz	r3, b52a <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b514:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b518:	1d20      	adds	r0, r4, #4
    b51a:	f019 fa5a 	bl	249d2 <atomic_and>
    b51e:	0643      	lsls	r3, r0, #25
    b520:	d503      	bpl.n	b52a <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
    b522:	4620      	mov	r0, r4
    b524:	f7ff fecc 	bl	b2c0 <conn_cleanup>
    b528:	e7f0      	b.n	b50c <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    b52a:	7b63      	ldrb	r3, [r4, #13]
    b52c:	2b07      	cmp	r3, #7
    b52e:	d1ed      	bne.n	b50c <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    b530:	4b07      	ldr	r3, [pc, #28]	; (b550 <bt_conn_prepare_events+0x68>)
    b532:	4630      	mov	r0, r6
    b534:	2200      	movs	r2, #0
    b536:	2104      	movs	r1, #4
    b538:	f01b ff74 	bl	27424 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    b53c:	2301      	movs	r3, #1
    b53e:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    b542:	2002      	movs	r0, #2
	return ev_count;
    b544:	e7e3      	b.n	b50e <bt_conn_prepare_events+0x26>
    b546:	bf00      	nop
    b548:	20000314 	.word	0x20000314
    b54c:	2000a668 	.word	0x2000a668
    b550:	2000a69c 	.word	0x2000a69c

0000b554 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    b554:	b570      	push	{r4, r5, r6, lr}
    b556:	4606      	mov	r6, r0
    b558:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    b55a:	4811      	ldr	r0, [pc, #68]	; (b5a0 <bt_conn_add_le+0x4c>)
    b55c:	2101      	movs	r1, #1
    b55e:	f019 fa6d 	bl	24a3c <bt_conn_new>
	if (!conn) {
    b562:	4604      	mov	r4, r0
    b564:	b1c8      	cbz	r0, b59a <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b566:	2230      	movs	r2, #48	; 0x30
    b568:	2100      	movs	r1, #0
    b56a:	3058      	adds	r0, #88	; 0x58
    b56c:	f018 fef5 	bl	2435a <memset>
    b570:	4b0c      	ldr	r3, [pc, #48]	; (b5a4 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b572:	4a0d      	ldr	r2, [pc, #52]	; (b5a8 <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b574:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b576:	2300      	movs	r3, #0
    b578:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    b57c:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    b57e:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    b580:	2207      	movs	r2, #7
    b582:	4629      	mov	r1, r5
    b584:	f104 0088 	add.w	r0, r4, #136	; 0x88
    b588:	f018 febc 	bl	24304 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    b58c:	2301      	movs	r3, #1
    b58e:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    b590:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    b592:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    b594:	4b05      	ldr	r3, [pc, #20]	; (b5ac <bt_conn_add_le+0x58>)
    b596:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    b59a:	4620      	mov	r0, r4
    b59c:	bd70      	pop	{r4, r5, r6, pc}
    b59e:	bf00      	nop
    b5a0:	2000a668 	.word	0x2000a668
    b5a4:	0000b8c9 	.word	0x0000b8c9
    b5a8:	00024a37 	.word	0x00024a37
    b5ac:	00280018 	.word	0x00280018

0000b5b0 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    b5b0:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    b5b2:	2101      	movs	r1, #1
    b5b4:	4801      	ldr	r0, [pc, #4]	; (b5bc <bt_conn_lookup_handle+0xc>)
    b5b6:	f019 baf4 	b.w	24ba2 <conn_lookup_handle>
    b5ba:	bf00      	nop
    b5bc:	2000a668 	.word	0x2000a668

0000b5c0 <bt_conn_set_state>:
{
    b5c0:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    b5c2:	7b46      	ldrb	r6, [r0, #13]
    b5c4:	428e      	cmp	r6, r1
{
    b5c6:	4604      	mov	r4, r0
    b5c8:	460d      	mov	r5, r1
	if (conn->state == state) {
    b5ca:	d112      	bne.n	b5f2 <bt_conn_set_state+0x32>
    b5cc:	4b68      	ldr	r3, [pc, #416]	; (b770 <bt_conn_set_state+0x1b0>)
    b5ce:	4a69      	ldr	r2, [pc, #420]	; (b774 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    b5d0:	4869      	ldr	r0, [pc, #420]	; (b778 <bt_conn_set_state+0x1b8>)
    b5d2:	2e08      	cmp	r6, #8
    b5d4:	eba2 0203 	sub.w	r2, r2, r3
    b5d8:	bf96      	itet	ls
    b5da:	4b68      	ldrls	r3, [pc, #416]	; (b77c <bt_conn_set_state+0x1bc>)
    b5dc:	4968      	ldrhi	r1, [pc, #416]	; (b780 <bt_conn_set_state+0x1c0>)
    b5de:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    b5e2:	08d2      	lsrs	r2, r2, #3
    b5e4:	0192      	lsls	r2, r2, #6
    b5e6:	f042 0202 	orr.w	r2, r2, #2
}
    b5ea:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    b5ee:	f016 be8a 	b.w	22306 <log_1>
	conn->state = state;
    b5f2:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    b5f4:	b90e      	cbnz	r6, b5fa <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    b5f6:	f019 faa2 	bl	24b3e <bt_conn_ref>
	switch (conn->state) {
    b5fa:	7b63      	ldrb	r3, [r4, #13]
    b5fc:	2b08      	cmp	r3, #8
    b5fe:	f200 80ac 	bhi.w	b75a <bt_conn_set_state+0x19a>
    b602:	e8df f003 	tbb	[pc, r3]
    b606:	053e      	.short	0x053e
    b608:	b4b4b4b4 	.word	0xb4b4b4b4
    b60c:	1cb4      	.short	0x1cb4
    b60e:	b4          	.byte	0xb4
    b60f:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    b610:	4d5c      	ldr	r5, [pc, #368]	; (b784 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    b612:	2600      	movs	r6, #0
	__asm__ volatile(
    b614:	f04f 0320 	mov.w	r3, #32
    b618:	f3ef 8211 	mrs	r2, BASEPRI
    b61c:	f383 8811 	msr	BASEPRI, r3
    b620:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    b624:	69e3      	ldr	r3, [r4, #28]
    b626:	2b00      	cmp	r3, #0
    b628:	d078      	beq.n	b71c <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    b62a:	3b01      	subs	r3, #1
    b62c:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    b62e:	f382 8811 	msr	BASEPRI, r2
    b632:	f3bf 8f6f 	isb	sy
    b636:	4628      	mov	r0, r5
    b638:	f014 fe62 	bl	20300 <z_impl_k_sem_give>
}
    b63c:	e7ea      	b.n	b614 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b63e:	78a3      	ldrb	r3, [r4, #2]
    b640:	2b04      	cmp	r3, #4
    b642:	f000 8094 	beq.w	b76e <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    b646:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b64a:	f01b fb3e 	bl	26cca <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    b64e:	2100      	movs	r1, #0
    b650:	484d      	ldr	r0, [pc, #308]	; (b788 <bt_conn_set_state+0x1c8>)
    b652:	f015 fa23 	bl	20a9c <z_impl_k_poll_signal_raise>
	list->head = NULL;
    b656:	2300      	movs	r3, #0
	list->tail = NULL;
    b658:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    b65c:	4620      	mov	r0, r4
    b65e:	f000 faf7 	bl	bc50 <bt_l2cap_connected>
		notify_connected(conn);
    b662:	4620      	mov	r0, r4
    b664:	f7ff fce2 	bl	b02c <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b668:	78e3      	ldrb	r3, [r4, #3]
    b66a:	2b01      	cmp	r3, #1
    b66c:	d17f      	bne.n	b76e <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b66e:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b672:	4846      	ldr	r0, [pc, #280]	; (b78c <bt_conn_set_state+0x1cc>)
}
    b674:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b678:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    b67c:	2300      	movs	r3, #0
    b67e:	f014 bf99 	b.w	205b4 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b682:	78a3      	ldrb	r3, [r4, #2]
    b684:	2b04      	cmp	r3, #4
    b686:	d104      	bne.n	b692 <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
    b688:	4620      	mov	r0, r4
}
    b68a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    b68e:	f019 ba71 	b.w	24b74 <bt_conn_unref>
		switch (old_state) {
    b692:	2e08      	cmp	r6, #8
    b694:	d86b      	bhi.n	b76e <bt_conn_set_state+0x1ae>
    b696:	a301      	add	r3, pc, #4	; (adr r3, b69c <bt_conn_set_state+0xdc>)
    b698:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    b69c:	0000b709 	.word	0x0000b709
    b6a0:	0000b6c1 	.word	0x0000b6c1
    b6a4:	0000b6fb 	.word	0x0000b6fb
    b6a8:	0000b689 	.word	0x0000b689
    b6ac:	0000b689 	.word	0x0000b689
    b6b0:	0000b6fb 	.word	0x0000b6fb
    b6b4:	0000b6fb 	.word	0x0000b6fb
    b6b8:	0000b709 	.word	0x0000b709
    b6bc:	0000b709 	.word	0x0000b709
			tx_notify(conn);
    b6c0:	4620      	mov	r0, r4
    b6c2:	f019 f995 	bl	249f0 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    b6c6:	78a3      	ldrb	r3, [r4, #2]
    b6c8:	2b01      	cmp	r3, #1
    b6ca:	d103      	bne.n	b6d4 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
    b6cc:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b6d0:	f01b fcc7 	bl	27062 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b6d4:	f3bf 8f5b 	dmb	ish
    b6d8:	3404      	adds	r4, #4
    b6da:	e854 3f00 	ldrex	r3, [r4]
    b6de:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b6e2:	e844 3200 	strex	r2, r3, [r4]
    b6e6:	2a00      	cmp	r2, #0
    b6e8:	d1f7      	bne.n	b6da <bt_conn_set_state+0x11a>
    b6ea:	f3bf 8f5b 	dmb	ish
    b6ee:	4826      	ldr	r0, [pc, #152]	; (b788 <bt_conn_set_state+0x1c8>)
}
    b6f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b6f4:	2100      	movs	r1, #0
    b6f6:	f015 b9d1 	b.w	20a9c <z_impl_k_poll_signal_raise>
			if (conn->err) {
    b6fa:	7b23      	ldrb	r3, [r4, #12]
    b6fc:	2b00      	cmp	r3, #0
    b6fe:	d0c3      	beq.n	b688 <bt_conn_set_state+0xc8>
				notify_connected(conn);
    b700:	4620      	mov	r0, r4
    b702:	f7ff fc93 	bl	b02c <notify_connected>
    b706:	e7bf      	b.n	b688 <bt_conn_set_state+0xc8>
    b708:	4a1a      	ldr	r2, [pc, #104]	; (b774 <bt_conn_set_state+0x1b4>)
    b70a:	4b19      	ldr	r3, [pc, #100]	; (b770 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    b70c:	4820      	ldr	r0, [pc, #128]	; (b790 <bt_conn_set_state+0x1d0>)
    b70e:	1ad2      	subs	r2, r2, r3
    b710:	08d2      	lsrs	r2, r2, #3
    b712:	0192      	lsls	r2, r2, #6
    b714:	f042 0202 	orr.w	r2, r2, #2
    b718:	4629      	mov	r1, r5
    b71a:	e766      	b.n	b5ea <bt_conn_set_state+0x2a>
	return list->head;
    b71c:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b71e:	b128      	cbz	r0, b72c <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b720:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    b722:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    b724:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b726:	4288      	cmp	r0, r1
	list->tail = node;
    b728:	bf08      	it	eq
    b72a:	61a3      	streq	r3, [r4, #24]
    b72c:	f382 8811 	msr	BASEPRI, r2
    b730:	f3bf 8f6f 	isb	sy
		if (!node) {
    b734:	b1d8      	cbz	r0, b76e <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    b736:	f04f 0220 	mov.w	r2, #32
    b73a:	f3ef 8311 	mrs	r3, BASEPRI
    b73e:	f382 8811 	msr	BASEPRI, r2
    b742:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b746:	68c2      	ldr	r2, [r0, #12]
    b748:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b74a:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    b74c:	f383 8811 	msr	BASEPRI, r3
    b750:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    b754:	f7ff fc60 	bl	b018 <tx_free>
    b758:	e76d      	b.n	b636 <bt_conn_set_state+0x76>
    b75a:	4a06      	ldr	r2, [pc, #24]	; (b774 <bt_conn_set_state+0x1b4>)
    b75c:	4b04      	ldr	r3, [pc, #16]	; (b770 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    b75e:	480d      	ldr	r0, [pc, #52]	; (b794 <bt_conn_set_state+0x1d4>)
    b760:	1ad2      	subs	r2, r2, r3
    b762:	08d2      	lsrs	r2, r2, #3
    b764:	0192      	lsls	r2, r2, #6
    b766:	f042 0202 	orr.w	r2, r2, #2
    b76a:	4629      	mov	r1, r5
    b76c:	e73d      	b.n	b5ea <bt_conn_set_state+0x2a>
}
    b76e:	bd70      	pop	{r4, r5, r6, pc}
    b770:	0002775c 	.word	0x0002775c
    b774:	0002776c 	.word	0x0002776c
    b778:	0002c944 	.word	0x0002c944
    b77c:	00027fa8 	.word	0x00027fa8
    b780:	0002c93a 	.word	0x0002c93a
    b784:	200000c8 	.word	0x200000c8
    b788:	20000314 	.word	0x20000314
    b78c:	2000aca0 	.word	0x2000aca0
    b790:	0002c955 	.word	0x0002c955
    b794:	0002c96c 	.word	0x0002c96c

0000b798 <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    b798:	b570      	push	{r4, r5, r6, lr}
    b79a:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b79c:	480c      	ldr	r0, [pc, #48]	; (b7d0 <bt_conn_lookup_addr_le+0x38>)
{
    b79e:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b7a0:	f019 f9cd 	bl	24b3e <bt_conn_ref>

		if (!conn) {
    b7a4:	4604      	mov	r4, r0
    b7a6:	b128      	cbz	r0, b7b4 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b7a8:	7883      	ldrb	r3, [r0, #2]
    b7aa:	2b01      	cmp	r3, #1
    b7ac:	d004      	beq.n	b7b8 <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    b7ae:	f019 f9e1 	bl	24b74 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    b7b2:	2400      	movs	r4, #0
}
    b7b4:	4620      	mov	r0, r4
    b7b6:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    b7b8:	4629      	mov	r1, r5
    b7ba:	4632      	mov	r2, r6
    b7bc:	f019 f99f 	bl	24afe <bt_conn_is_peer_addr_le>
    b7c0:	4605      	mov	r5, r0
    b7c2:	2800      	cmp	r0, #0
    b7c4:	d1f6      	bne.n	b7b4 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    b7c6:	4620      	mov	r0, r4
    b7c8:	f019 f9d4 	bl	24b74 <bt_conn_unref>
	return NULL;
    b7cc:	462c      	mov	r4, r5
			continue;
    b7ce:	e7f1      	b.n	b7b4 <bt_conn_lookup_addr_le+0x1c>
    b7d0:	2000a668 	.word	0x2000a668

0000b7d4 <bt_conn_exists_le>:
{
    b7d4:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    b7d6:	f7ff ffdf 	bl	b798 <bt_conn_lookup_addr_le>
	if (conn) {
    b7da:	4604      	mov	r4, r0
    b7dc:	b1a0      	cbz	r0, b808 <bt_conn_exists_le+0x34>
    b7de:	4b0b      	ldr	r3, [pc, #44]	; (b80c <bt_conn_exists_le+0x38>)
    b7e0:	4a0b      	ldr	r2, [pc, #44]	; (b810 <bt_conn_exists_le+0x3c>)
    b7e2:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    b7e4:	7b43      	ldrb	r3, [r0, #13]
    b7e6:	480b      	ldr	r0, [pc, #44]	; (b814 <bt_conn_exists_le+0x40>)
    b7e8:	2b08      	cmp	r3, #8
    b7ea:	bf96      	itet	ls
    b7ec:	490a      	ldrls	r1, [pc, #40]	; (b818 <bt_conn_exists_le+0x44>)
    b7ee:	490b      	ldrhi	r1, [pc, #44]	; (b81c <bt_conn_exists_le+0x48>)
    b7f0:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    b7f4:	08d2      	lsrs	r2, r2, #3
    b7f6:	0192      	lsls	r2, r2, #6
    b7f8:	f042 0202 	orr.w	r2, r2, #2
    b7fc:	f016 fd83 	bl	22306 <log_1>
		bt_conn_unref(conn);
    b800:	4620      	mov	r0, r4
    b802:	f019 f9b7 	bl	24b74 <bt_conn_unref>
		return true;
    b806:	2001      	movs	r0, #1
}
    b808:	bd10      	pop	{r4, pc}
    b80a:	bf00      	nop
    b80c:	0002775c 	.word	0x0002775c
    b810:	0002776c 	.word	0x0002776c
    b814:	0002c988 	.word	0x0002c988
    b818:	00027fa8 	.word	0x00027fa8
    b81c:	0002c93a 	.word	0x0002c93a

0000b820 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    b820:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b822:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b824:	480f      	ldr	r0, [pc, #60]	; (b864 <bt_conn_lookup_state_le+0x44>)
{
    b826:	460e      	mov	r6, r1
    b828:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b82a:	f019 f988 	bl	24b3e <bt_conn_ref>

		if (!conn) {
    b82e:	4604      	mov	r4, r0
    b830:	b1b0      	cbz	r0, b860 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b832:	7883      	ldrb	r3, [r0, #2]
    b834:	2b01      	cmp	r3, #1
    b836:	d003      	beq.n	b840 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    b838:	f019 f981 	bl	24b3e <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    b83c:	2400      	movs	r4, #0
			continue;
    b83e:	e00f      	b.n	b860 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    b840:	b146      	cbz	r6, b854 <bt_conn_lookup_state_le+0x34>
    b842:	4632      	mov	r2, r6
    b844:	4629      	mov	r1, r5
    b846:	f019 f95a 	bl	24afe <bt_conn_is_peer_addr_le>
    b84a:	b918      	cbnz	r0, b854 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    b84c:	4620      	mov	r0, r4
    b84e:	f019 f991 	bl	24b74 <bt_conn_unref>
    b852:	e7f3      	b.n	b83c <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    b854:	7b63      	ldrb	r3, [r4, #13]
    b856:	42bb      	cmp	r3, r7
    b858:	d1f8      	bne.n	b84c <bt_conn_lookup_state_le+0x2c>
    b85a:	7a23      	ldrb	r3, [r4, #8]
    b85c:	42ab      	cmp	r3, r5
    b85e:	d1f5      	bne.n	b84c <bt_conn_lookup_state_le+0x2c>
}
    b860:	4620      	mov	r0, r4
    b862:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b864:	2000a668 	.word	0x2000a668

0000b868 <send_conn_le_param_update>:
{
    b868:	b538      	push	{r3, r4, r5, lr}
    b86a:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b86c:	4608      	mov	r0, r1
{
    b86e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b870:	f019 f839 	bl	248e6 <bt_le_conn_params_valid>
    b874:	b318      	cbz	r0, b8be <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b876:	4b13      	ldr	r3, [pc, #76]	; (b8c4 <send_conn_le_param_update+0x5c>)
    b878:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    b87c:	0799      	lsls	r1, r3, #30
    b87e:	d407      	bmi.n	b890 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    b880:	78e3      	ldrb	r3, [r4, #3]
    b882:	b183      	cbz	r3, b8a6 <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    b884:	4629      	mov	r1, r5
    b886:	4620      	mov	r0, r4
}
    b888:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b88c:	f000 bae8 	b.w	be60 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b890:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b894:	079a      	lsls	r2, r3, #30
    b896:	d5f3      	bpl.n	b880 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b898:	f3bf 8f5b 	dmb	ish
    b89c:	6863      	ldr	r3, [r4, #4]
    b89e:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    b8a2:	055b      	lsls	r3, r3, #21
    b8a4:	d4ec      	bmi.n	b880 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    b8a6:	4629      	mov	r1, r5
    b8a8:	4620      	mov	r0, r4
    b8aa:	f019 f9bf 	bl	24c2c <bt_conn_le_conn_update>
		if (rc == 0) {
    b8ae:	b928      	cbnz	r0, b8bc <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    b8b0:	88ab      	ldrh	r3, [r5, #4]
    b8b2:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    b8b6:	88eb      	ldrh	r3, [r5, #6]
    b8b8:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    b8bc:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    b8be:	f06f 0015 	mvn.w	r0, #21
    b8c2:	e7fb      	b.n	b8bc <send_conn_le_param_update+0x54>
    b8c4:	20000000 	.word	0x20000000

0000b8c8 <deferred_work>:
{
    b8c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    b8ca:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    b8ce:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    b8d0:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    b8d4:	b99b      	cbnz	r3, b8fe <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    b8d6:	4628      	mov	r0, r5
    b8d8:	f019 fa08 	bl	24cec <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    b8dc:	4b22      	ldr	r3, [pc, #136]	; (b968 <deferred_work+0xa0>)
    b8de:	681e      	ldr	r6, [r3, #0]
    b8e0:	b92e      	cbnz	r6, b8ee <deferred_work+0x26>
		bt_conn_unref(conn);
    b8e2:	4628      	mov	r0, r5
}
    b8e4:	b002      	add	sp, #8
    b8e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    b8ea:	f019 b943 	b.w	24b74 <bt_conn_unref>
		if (cb->disconnected) {
    b8ee:	6873      	ldr	r3, [r6, #4]
    b8f0:	b11b      	cbz	r3, b8fa <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    b8f2:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    b8f6:	4628      	mov	r0, r5
    b8f8:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b8fa:	69b6      	ldr	r6, [r6, #24]
    b8fc:	e7f0      	b.n	b8e0 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    b8fe:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    b902:	2b01      	cmp	r3, #1
    b904:	d128      	bne.n	b958 <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
    b906:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b90a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    b90e:	4630      	mov	r0, r6
    b910:	f019 f85f 	bl	249d2 <atomic_and>
    b914:	0583      	lsls	r3, r0, #22
    b916:	d521      	bpl.n	b95c <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    b918:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    b91c:	f8ad 3000 	strh.w	r3, [sp]
    b920:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    b924:	f8ad 3002 	strh.w	r3, [sp, #2]
    b928:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    b92c:	f8ad 3004 	strh.w	r3, [sp, #4]
    b930:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    b934:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    b938:	4669      	mov	r1, sp
    b93a:	4628      	mov	r0, r5
    b93c:	f7ff ff94 	bl	b868 <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b940:	f3bf 8f5b 	dmb	ish
    b944:	e856 3f00 	ldrex	r3, [r6]
    b948:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b94c:	e846 3200 	strex	r2, r3, [r6]
    b950:	2a00      	cmp	r2, #0
    b952:	d1f7      	bne.n	b944 <deferred_work+0x7c>
    b954:	f3bf 8f5b 	dmb	ish
}
    b958:	b002      	add	sp, #8
    b95a:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
    b95c:	4a03      	ldr	r2, [pc, #12]	; (b96c <deferred_work+0xa4>)
    b95e:	6810      	ldr	r0, [r2, #0]
    b960:	6851      	ldr	r1, [r2, #4]
    b962:	466b      	mov	r3, sp
    b964:	c303      	stmia	r3!, {r0, r1}
    b966:	e7e7      	b.n	b938 <deferred_work+0x70>
    b968:	2000d740 	.word	0x2000d740
    b96c:	00027990 	.word	0x00027990

0000b970 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    b970:	b538      	push	{r3, r4, r5, lr}
    b972:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    b974:	490c      	ldr	r1, [pc, #48]	; (b9a8 <bt_conn_create_pdu_timeout+0x38>)
    b976:	2800      	cmp	r0, #0
    b978:	bf08      	it	eq
    b97a:	4608      	moveq	r0, r1
    b97c:	f01a fcc0 	bl	26300 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    b980:	4604      	mov	r4, r0
    b982:	b958      	cbnz	r0, b99c <bt_conn_create_pdu_timeout+0x2c>
    b984:	4909      	ldr	r1, [pc, #36]	; (b9ac <bt_conn_create_pdu_timeout+0x3c>)
    b986:	4b0a      	ldr	r3, [pc, #40]	; (b9b0 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    b988:	480a      	ldr	r0, [pc, #40]	; (b9b4 <bt_conn_create_pdu_timeout+0x44>)
    b98a:	1ac9      	subs	r1, r1, r3
    b98c:	08c9      	lsrs	r1, r1, #3
    b98e:	0189      	lsls	r1, r1, #6
    b990:	f041 0102 	orr.w	r1, r1, #2
    b994:	f016 fcaa 	bl	222ec <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    b998:	4620      	mov	r0, r4
    b99a:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    b99c:	1d29      	adds	r1, r5, #4
    b99e:	3008      	adds	r0, #8
    b9a0:	f01a fccd 	bl	2633e <net_buf_simple_reserve>
	return buf;
    b9a4:	e7f8      	b.n	b998 <bt_conn_create_pdu_timeout+0x28>
    b9a6:	bf00      	nop
    b9a8:	2000a050 	.word	0x2000a050
    b9ac:	0002776c 	.word	0x0002776c
    b9b0:	0002775c 	.word	0x0002775c
    b9b4:	0002c9ab 	.word	0x0002c9ab

0000b9b8 <bt_conn_create_frag_timeout>:
{
    b9b8:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    b9ba:	4801      	ldr	r0, [pc, #4]	; (b9c0 <bt_conn_create_frag_timeout+0x8>)
    b9bc:	f7ff bfd8 	b.w	b970 <bt_conn_create_pdu_timeout>
    b9c0:	2000a0a0 	.word	0x2000a0a0

0000b9c4 <create_frag>:
{
    b9c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b9c8:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    b9ca:	f04f 33ff 	mov.w	r3, #4294967295
    b9ce:	f04f 32ff 	mov.w	r2, #4294967295
    b9d2:	2000      	movs	r0, #0
{
    b9d4:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    b9d6:	f7ff ffef 	bl	b9b8 <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    b9da:	7b73      	ldrb	r3, [r6, #13]
    b9dc:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    b9de:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    b9e0:	f04f 0600 	mov.w	r6, #0
    b9e4:	d005      	beq.n	b9f2 <create_frag+0x2e>
		net_buf_unref(frag);
    b9e6:	f011 fdaf 	bl	1d548 <net_buf_unref>
		return NULL;
    b9ea:	4635      	mov	r5, r6
}
    b9ec:	4628      	mov	r0, r5
    b9ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    b9f2:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    b9f4:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    b9f8:	4e0c      	ldr	r6, [pc, #48]	; (ba2c <create_frag+0x68>)
    b9fa:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    b9fc:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    ba00:	f01a fd0f 	bl	26422 <net_buf_simple_tailroom>
    ba04:	4580      	cmp	r8, r0
    ba06:	d20c      	bcs.n	ba22 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    ba08:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    ba0c:	f854 1f08 	ldr.w	r1, [r4, #8]!
    ba10:	4632      	mov	r2, r6
    ba12:	4638      	mov	r0, r7
    ba14:	f01a fcd0 	bl	263b8 <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    ba18:	4631      	mov	r1, r6
    ba1a:	4620      	mov	r0, r4
    ba1c:	f01a fce5 	bl	263ea <net_buf_simple_pull>
    ba20:	e7e4      	b.n	b9ec <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    ba22:	4638      	mov	r0, r7
    ba24:	f01a fcfd 	bl	26422 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    ba28:	b286      	uxth	r6, r0
    ba2a:	e7ef      	b.n	ba0c <create_frag+0x48>
    ba2c:	20000000 	.word	0x20000000

0000ba30 <bt_conn_process_tx>:
{
    ba30:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    ba32:	7b43      	ldrb	r3, [r0, #13]
{
    ba34:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    ba36:	b95b      	cbnz	r3, ba50 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ba38:	f06f 0140 	mvn.w	r1, #64	; 0x40
    ba3c:	3004      	adds	r0, #4
    ba3e:	f018 ffc8 	bl	249d2 <atomic_and>
    ba42:	0643      	lsls	r3, r0, #25
    ba44:	d504      	bpl.n	ba50 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    ba46:	4620      	mov	r0, r4
}
    ba48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    ba4c:	f7ff bc38 	b.w	b2c0 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    ba50:	2200      	movs	r2, #0
    ba52:	2300      	movs	r3, #0
    ba54:	f104 0034 	add.w	r0, r4, #52	; 0x34
    ba58:	f01a fc57 	bl	2630a <net_buf_get>
	BT_ASSERT(buf);
    ba5c:	4605      	mov	r5, r0
    ba5e:	b960      	cbnz	r0, ba7a <bt_conn_process_tx+0x4a>
    ba60:	4a1f      	ldr	r2, [pc, #124]	; (bae0 <bt_conn_process_tx+0xb0>)
    ba62:	4920      	ldr	r1, [pc, #128]	; (bae4 <bt_conn_process_tx+0xb4>)
    ba64:	4820      	ldr	r0, [pc, #128]	; (bae8 <bt_conn_process_tx+0xb8>)
    ba66:	f240 535f 	movw	r3, #1375	; 0x55f
    ba6a:	f015 ffa9 	bl	219c0 <printk>
    ba6e:	4040      	eors	r0, r0
    ba70:	f380 8811 	msr	BASEPRI, r0
    ba74:	f04f 0003 	mov.w	r0, #3
    ba78:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    ba7a:	4e1c      	ldr	r6, [pc, #112]	; (baec <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    ba7c:	89aa      	ldrh	r2, [r5, #12]
    ba7e:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    ba82:	429a      	cmp	r2, r3
    ba84:	d807      	bhi.n	ba96 <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    ba86:	2300      	movs	r3, #0
    ba88:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    ba8a:	4629      	mov	r1, r5
    ba8c:	4620      	mov	r0, r4
    ba8e:	f7ff fae3 	bl	b058 <send_frag>
	if (!send_buf(conn, buf)) {
    ba92:	b130      	cbz	r0, baa2 <bt_conn_process_tx+0x72>
}
    ba94:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    ba96:	4629      	mov	r1, r5
    ba98:	4620      	mov	r0, r4
    ba9a:	f7ff ff93 	bl	b9c4 <create_frag>
	if (!frag) {
    ba9e:	4601      	mov	r1, r0
    baa0:	b920      	cbnz	r0, baac <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    baa2:	4628      	mov	r0, r5
}
    baa4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    baa8:	f011 bd4e 	b.w	1d548 <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    baac:	2301      	movs	r3, #1
    baae:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bab0:	4620      	mov	r0, r4
    bab2:	f7ff fad1 	bl	b058 <send_frag>
    bab6:	2800      	cmp	r0, #0
    bab8:	d0f3      	beq.n	baa2 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    baba:	89aa      	ldrh	r2, [r5, #12]
    babc:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    bac0:	429a      	cmp	r2, r3
    bac2:	d802      	bhi.n	baca <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    bac4:	2300      	movs	r3, #0
    bac6:	2203      	movs	r2, #3
    bac8:	e7df      	b.n	ba8a <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    baca:	4629      	mov	r1, r5
    bacc:	4620      	mov	r0, r4
    bace:	f7ff ff79 	bl	b9c4 <create_frag>
		if (!frag) {
    bad2:	4601      	mov	r1, r0
    bad4:	2800      	cmp	r0, #0
    bad6:	d0e4      	beq.n	baa2 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bad8:	2301      	movs	r3, #1
    bada:	461a      	mov	r2, r3
    badc:	e7e8      	b.n	bab0 <bt_conn_process_tx+0x80>
    bade:	bf00      	nop
    bae0:	0002c9d4 	.word	0x0002c9d4
    bae4:	0002be15 	.word	0x0002be15
    bae8:	0002c0ad 	.word	0x0002c0ad
    baec:	20000000 	.word	0x20000000

0000baf0 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    baf0:	4b0c      	ldr	r3, [pc, #48]	; (bb24 <bt_conn_auth_cb_register+0x34>)
    baf2:	b908      	cbnz	r0, baf8 <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    baf4:	6018      	str	r0, [r3, #0]
		return 0;
    baf6:	4770      	bx	lr
	}

	if (bt_auth) {
    baf8:	681a      	ldr	r2, [r3, #0]
    bafa:	b962      	cbnz	r2, bb16 <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    bafc:	6902      	ldr	r2, [r0, #16]
    bafe:	b93a      	cbnz	r2, bb10 <bt_conn_auth_cb_register+0x20>
    bb00:	6802      	ldr	r2, [r0, #0]
    bb02:	b95a      	cbnz	r2, bb1c <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    bb04:	6842      	ldr	r2, [r0, #4]
    bb06:	b94a      	cbnz	r2, bb1c <bt_conn_auth_cb_register+0x2c>
    bb08:	6882      	ldr	r2, [r0, #8]
    bb0a:	b93a      	cbnz	r2, bb1c <bt_conn_auth_cb_register+0x2c>
    bb0c:	6942      	ldr	r2, [r0, #20]
    bb0e:	b92a      	cbnz	r2, bb1c <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    bb10:	6018      	str	r0, [r3, #0]
	return 0;
    bb12:	2000      	movs	r0, #0
    bb14:	4770      	bx	lr
		return -EALREADY;
    bb16:	f06f 0044 	mvn.w	r0, #68	; 0x44
    bb1a:	4770      	bx	lr
		return -EINVAL;
    bb1c:	f06f 0015 	mvn.w	r0, #21
}
    bb20:	4770      	bx	lr
    bb22:	bf00      	nop
    bb24:	2000d73c 	.word	0x2000d73c

0000bb28 <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    bb28:	4b03      	ldr	r3, [pc, #12]	; (bb38 <bt_conn_index+0x10>)
    bb2a:	1ac0      	subs	r0, r0, r3
    bb2c:	4b03      	ldr	r3, [pc, #12]	; (bb3c <bt_conn_index+0x14>)
    bb2e:	1180      	asrs	r0, r0, #6
    bb30:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    bb32:	b2c0      	uxtb	r0, r0
    bb34:	4770      	bx	lr
    bb36:	bf00      	nop
    bb38:	2000a668 	.word	0x2000a668
    bb3c:	aaaaaaab 	.word	0xaaaaaaab

0000bb40 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    bb40:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    bb42:	490b      	ldr	r1, [pc, #44]	; (bb70 <bt_conn_init+0x30>)
    bb44:	480b      	ldr	r0, [pc, #44]	; (bb74 <bt_conn_init+0x34>)
    bb46:	f01b f8cc 	bl	26ce2 <k_queue_append>
    bb4a:	490b      	ldr	r1, [pc, #44]	; (bb78 <bt_conn_init+0x38>)
    bb4c:	4809      	ldr	r0, [pc, #36]	; (bb74 <bt_conn_init+0x34>)
    bb4e:	f01b f8c8 	bl	26ce2 <k_queue_append>
    bb52:	490a      	ldr	r1, [pc, #40]	; (bb7c <bt_conn_init+0x3c>)
    bb54:	4807      	ldr	r0, [pc, #28]	; (bb74 <bt_conn_init+0x34>)
    bb56:	f01b f8c4 	bl	26ce2 <k_queue_append>
	}

	bt_att_init();
    bb5a:	f019 fc6c 	bl	25436 <bt_att_init>

	err = bt_smp_init();
    bb5e:	f004 fae1 	bl	10124 <bt_smp_init>
	if (err) {
    bb62:	4604      	mov	r4, r0
    bb64:	b908      	cbnz	r0, bb6a <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    bb66:	f019 f92d 	bl	24dc4 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    bb6a:	4620      	mov	r0, r4
    bb6c:	bd10      	pop	{r4, pc}
    bb6e:	bf00      	nop
    bb70:	2000d744 	.word	0x2000d744
    bb74:	2000a020 	.word	0x2000a020
    bb78:	2000d754 	.word	0x2000d754
    bb7c:	2000d764 	.word	0x2000d764

0000bb80 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    bb80:	4a0b      	ldr	r2, [pc, #44]	; (bbb0 <l2cap_accept+0x30>)
{
    bb82:	b508      	push	{r3, lr}
    bb84:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    bb86:	6810      	ldr	r0, [r2, #0]
    bb88:	b918      	cbnz	r0, bb92 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    bb8a:	4b0a      	ldr	r3, [pc, #40]	; (bbb4 <l2cap_accept+0x34>)
    bb8c:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    bb8e:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    bb90:	bd08      	pop	{r3, pc}
    bb92:	4909      	ldr	r1, [pc, #36]	; (bbb8 <l2cap_accept+0x38>)
    bb94:	4a09      	ldr	r2, [pc, #36]	; (bbbc <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    bb96:	480a      	ldr	r0, [pc, #40]	; (bbc0 <l2cap_accept+0x40>)
    bb98:	1a52      	subs	r2, r2, r1
    bb9a:	08d2      	lsrs	r2, r2, #3
    bb9c:	0192      	lsls	r2, r2, #6
    bb9e:	f042 0201 	orr.w	r2, r2, #1
    bba2:	4619      	mov	r1, r3
    bba4:	f016 fbaf 	bl	22306 <log_1>
	return -ENOMEM;
    bba8:	f06f 000b 	mvn.w	r0, #11
    bbac:	e7f0      	b.n	bb90 <l2cap_accept+0x10>
    bbae:	bf00      	nop
    bbb0:	2000a728 	.word	0x2000a728
    bbb4:	00027fec 	.word	0x00027fec
    bbb8:	0002775c 	.word	0x0002775c
    bbbc:	0002782c 	.word	0x0002782c
    bbc0:	0002ca61 	.word	0x0002ca61

0000bbc4 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bbc6:	4605      	mov	r5, r0
    bbc8:	460f      	mov	r7, r1
    bbca:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    bbcc:	2300      	movs	r3, #0
    bbce:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bbd2:	2104      	movs	r1, #4
    bbd4:	2000      	movs	r0, #0
    bbd6:	f7ff fecb 	bl	b970 <bt_conn_create_pdu_timeout>
	if (!buf) {
    bbda:	4604      	mov	r4, r0
    bbdc:	b960      	cbnz	r0, bbf8 <l2cap_create_le_sig_pdu.constprop.0+0x34>
    bbde:	4a0a      	ldr	r2, [pc, #40]	; (bc08 <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    bbe0:	4b0a      	ldr	r3, [pc, #40]	; (bc0c <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    bbe2:	480b      	ldr	r0, [pc, #44]	; (bc10 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    bbe4:	1ad2      	subs	r2, r2, r3
    bbe6:	08d2      	lsrs	r2, r2, #3
    bbe8:	0192      	lsls	r2, r2, #6
    bbea:	f042 0201 	orr.w	r2, r2, #1
    bbee:	4629      	mov	r1, r5
    bbf0:	f016 fb89 	bl	22306 <log_1>
}
    bbf4:	4620      	mov	r0, r4
    bbf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    bbf8:	2104      	movs	r1, #4
    bbfa:	3008      	adds	r0, #8
    bbfc:	f01a fbd6 	bl	263ac <net_buf_simple_add>
	hdr->code = code;
    bc00:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    bc02:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    bc04:	8046      	strh	r6, [r0, #2]
	return buf;
    bc06:	e7f5      	b.n	bbf4 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    bc08:	0002782c 	.word	0x0002782c
    bc0c:	0002775c 	.word	0x0002775c
    bc10:	0002ca88 	.word	0x0002ca88

0000bc14 <l2cap_rtx_timeout>:
{
    bc14:	b538      	push	{r3, r4, r5, lr}
    bc16:	4a0b      	ldr	r2, [pc, #44]	; (bc44 <l2cap_rtx_timeout+0x30>)
    bc18:	4b0b      	ldr	r3, [pc, #44]	; (bc48 <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    bc1a:	4604      	mov	r4, r0
    bc1c:	1ad2      	subs	r2, r2, r3
    bc1e:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    bc22:	480a      	ldr	r0, [pc, #40]	; (bc4c <l2cap_rtx_timeout+0x38>)
    bc24:	08d2      	lsrs	r2, r2, #3
    bc26:	0192      	lsls	r2, r2, #6
    bc28:	4621      	mov	r1, r4
    bc2a:	f042 0201 	orr.w	r2, r2, #1
    bc2e:	f016 fb6a 	bl	22306 <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    bc32:	4628      	mov	r0, r5
    bc34:	4621      	mov	r1, r4
    bc36:	f019 f823 	bl	24c80 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    bc3a:	4620      	mov	r0, r4
}
    bc3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    bc40:	f019 b83f 	b.w	24cc2 <bt_l2cap_chan_del>
    bc44:	0002782c 	.word	0x0002782c
    bc48:	0002775c 	.word	0x0002775c
    bc4c:	0002cab0 	.word	0x0002cab0

0000bc50 <bt_l2cap_connected>:
{
    bc50:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bc54:	4e2a      	ldr	r6, [pc, #168]	; (bd00 <bt_l2cap_connected+0xb0>)
    bc56:	4f2b      	ldr	r7, [pc, #172]	; (bd04 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    bc58:	f8df 80ac 	ldr.w	r8, [pc, #172]	; bd08 <bt_l2cap_connected+0xb8>
{
    bc5c:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bc5e:	42be      	cmp	r6, r7
    bc60:	d302      	bcc.n	bc68 <bt_l2cap_connected+0x18>
}
    bc62:	b003      	add	sp, #12
    bc64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    bc68:	6873      	ldr	r3, [r6, #4]
    bc6a:	a901      	add	r1, sp, #4
    bc6c:	4628      	mov	r0, r5
    bc6e:	4798      	blx	r3
    bc70:	2800      	cmp	r0, #0
    bc72:	db40      	blt.n	bcf6 <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    bc74:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    bc76:	8833      	ldrh	r3, [r6, #0]
    bc78:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    bc7c:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    bc80:	2230      	movs	r2, #48	; 0x30
    bc82:	2100      	movs	r1, #0
    bc84:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    bc88:	f8d6 9008 	ldr.w	r9, [r6, #8]
    bc8c:	f018 fb65 	bl	2435a <memset>
    bc90:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bc94:	f104 0340 	add.w	r3, r4, #64	; 0x40
    bc98:	2200      	movs	r2, #0
    bc9a:	f3bf 8f5b 	dmb	ish
    bc9e:	e853 1f00 	ldrex	r1, [r3]
    bca2:	e843 2000 	strex	r0, r2, [r3]
    bca6:	2800      	cmp	r0, #0
    bca8:	d1f9      	bne.n	bc9e <bt_l2cap_connected+0x4e>
    bcaa:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    bcae:	60a2      	str	r2, [r4, #8]
	return list->tail;
    bcb0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    bcb2:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
    bcb6:	bb02      	cbnz	r2, bcfa <bt_l2cap_connected+0xaa>
	list->head = node;
    bcb8:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    bcbc:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    bcbe:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    bcc0:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    bcc2:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    bcc6:	681b      	ldr	r3, [r3, #0]
    bcc8:	b103      	cbz	r3, bccc <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    bcca:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bccc:	9b01      	ldr	r3, [sp, #4]
    bcce:	f3bf 8f5b 	dmb	ish
    bcd2:	3340      	adds	r3, #64	; 0x40
    bcd4:	e853 2f00 	ldrex	r2, [r3]
    bcd8:	f042 0201 	orr.w	r2, r2, #1
    bcdc:	e843 2100 	strex	r1, r2, [r3]
    bce0:	2900      	cmp	r1, #0
    bce2:	d1f7      	bne.n	bcd4 <bt_l2cap_connected+0x84>
    bce4:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    bce8:	9801      	ldr	r0, [sp, #4]
    bcea:	6843      	ldr	r3, [r0, #4]
    bcec:	699b      	ldr	r3, [r3, #24]
    bcee:	b113      	cbz	r3, bcf6 <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    bcf0:	f100 0140 	add.w	r1, r0, #64	; 0x40
    bcf4:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bcf6:	360c      	adds	r6, #12
    bcf8:	e7b1      	b.n	bc5e <bt_l2cap_connected+0xe>
	parent->next = child;
    bcfa:	6013      	str	r3, [r2, #0]
	list->tail = node;
    bcfc:	652b      	str	r3, [r5, #80]	; 0x50
}
    bcfe:	e7dd      	b.n	bcbc <bt_l2cap_connected+0x6c>
    bd00:	00027698 	.word	0x00027698
    bd04:	000276bc 	.word	0x000276bc
    bd08:	0000bc15 	.word	0x0000bc15

0000bd0c <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    bd0c:	898b      	ldrh	r3, [r1, #12]
    bd0e:	2b03      	cmp	r3, #3
{
    bd10:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bd12:	4606      	mov	r6, r0
    bd14:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    bd16:	d80a      	bhi.n	bd2e <l2cap_recv+0x22>
    bd18:	492e      	ldr	r1, [pc, #184]	; (bdd4 <l2cap_recv+0xc8>)
    bd1a:	4b2f      	ldr	r3, [pc, #188]	; (bdd8 <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    bd1c:	482f      	ldr	r0, [pc, #188]	; (bddc <l2cap_recv+0xd0>)
    bd1e:	1ac9      	subs	r1, r1, r3
    bd20:	08c9      	lsrs	r1, r1, #3
    bd22:	0189      	lsls	r1, r1, #6
    bd24:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    bd28:	f016 fae0 	bl	222ec <log_0>
		return 0;
    bd2c:	e013      	b.n	bd56 <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    bd2e:	2104      	movs	r1, #4
    bd30:	f105 0008 	add.w	r0, r5, #8
    bd34:	f01a fb61 	bl	263fa <net_buf_simple_pull_mem>
	if (buf->len != len) {
    bd38:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    bd3a:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    bd3c:	428a      	cmp	r2, r1
    bd3e:	4604      	mov	r4, r0
    bd40:	d00c      	beq.n	bd5c <l2cap_recv+0x50>
    bd42:	4825      	ldr	r0, [pc, #148]	; (bdd8 <l2cap_recv+0xcc>)
    bd44:	4b23      	ldr	r3, [pc, #140]	; (bdd4 <l2cap_recv+0xc8>)
    bd46:	1a1b      	subs	r3, r3, r0
    bd48:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    bd4a:	019b      	lsls	r3, r3, #6
    bd4c:	4824      	ldr	r0, [pc, #144]	; (bde0 <l2cap_recv+0xd4>)
    bd4e:	f043 0301 	orr.w	r3, r3, #1
    bd52:	f016 faec 	bl	2232e <log_2>
}
    bd56:	2000      	movs	r0, #0
    bd58:	b002      	add	sp, #8
    bd5a:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    bd5c:	7843      	ldrb	r3, [r0, #1]
    bd5e:	b943      	cbnz	r3, bd72 <l2cap_recv+0x66>
    bd60:	491c      	ldr	r1, [pc, #112]	; (bdd4 <l2cap_recv+0xc8>)
    bd62:	4b1d      	ldr	r3, [pc, #116]	; (bdd8 <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    bd64:	481f      	ldr	r0, [pc, #124]	; (bde4 <l2cap_recv+0xd8>)
    bd66:	1ac9      	subs	r1, r1, r3
    bd68:	08c9      	lsrs	r1, r1, #3
    bd6a:	0189      	lsls	r1, r1, #6
    bd6c:	f041 0101 	orr.w	r1, r1, #1
    bd70:	e7da      	b.n	bd28 <l2cap_recv+0x1c>
	switch (hdr->code) {
    bd72:	7801      	ldrb	r1, [r0, #0]
    bd74:	2901      	cmp	r1, #1
    bd76:	d0ee      	beq.n	bd56 <l2cap_recv+0x4a>
    bd78:	2913      	cmp	r1, #19
    bd7a:	d10a      	bne.n	bd92 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    bd7c:	2a01      	cmp	r2, #1
    bd7e:	d8ea      	bhi.n	bd56 <l2cap_recv+0x4a>
    bd80:	4914      	ldr	r1, [pc, #80]	; (bdd4 <l2cap_recv+0xc8>)
    bd82:	4b15      	ldr	r3, [pc, #84]	; (bdd8 <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    bd84:	4818      	ldr	r0, [pc, #96]	; (bde8 <l2cap_recv+0xdc>)
    bd86:	1ac9      	subs	r1, r1, r3
    bd88:	08c9      	lsrs	r1, r1, #3
    bd8a:	0189      	lsls	r1, r1, #6
    bd8c:	f041 0101 	orr.w	r1, r1, #1
    bd90:	e7ca      	b.n	bd28 <l2cap_recv+0x1c>
    bd92:	4b11      	ldr	r3, [pc, #68]	; (bdd8 <l2cap_recv+0xcc>)
    bd94:	4a0f      	ldr	r2, [pc, #60]	; (bdd4 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    bd96:	4815      	ldr	r0, [pc, #84]	; (bdec <l2cap_recv+0xe0>)
    bd98:	1ad2      	subs	r2, r2, r3
    bd9a:	08d2      	lsrs	r2, r2, #3
    bd9c:	0192      	lsls	r2, r2, #6
    bd9e:	f042 0202 	orr.w	r2, r2, #2
    bda2:	f016 fab0 	bl	22306 <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bda6:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    bda8:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bdaa:	2202      	movs	r2, #2
    bdac:	2001      	movs	r0, #1
    bdae:	f7ff ff09 	bl	bbc4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    bdb2:	4604      	mov	r4, r0
    bdb4:	2800      	cmp	r0, #0
    bdb6:	d0ce      	beq.n	bd56 <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    bdb8:	2102      	movs	r1, #2
    bdba:	3008      	adds	r0, #8
    bdbc:	f01a faf6 	bl	263ac <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    bdc0:	2300      	movs	r3, #0
    bdc2:	7003      	strb	r3, [r0, #0]
    bdc4:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    bdc6:	4622      	mov	r2, r4
    bdc8:	9300      	str	r3, [sp, #0]
    bdca:	2105      	movs	r1, #5
    bdcc:	4628      	mov	r0, r5
    bdce:	f018 ffc0 	bl	24d52 <bt_l2cap_send_cb>
}
    bdd2:	e7c0      	b.n	bd56 <l2cap_recv+0x4a>
    bdd4:	0002782c 	.word	0x0002782c
    bdd8:	0002775c 	.word	0x0002775c
    bddc:	0002cac0 	.word	0x0002cac0
    bde0:	0002cade 	.word	0x0002cade
    bde4:	0002caff 	.word	0x0002caff
    bde8:	0002cb20 	.word	0x0002cb20
    bdec:	0002cb3c 	.word	0x0002cb3c

0000bdf0 <bt_l2cap_recv>:
{
    bdf0:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    bdf2:	898b      	ldrh	r3, [r1, #12]
    bdf4:	2b03      	cmp	r3, #3
{
    bdf6:	4605      	mov	r5, r0
    bdf8:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    bdfa:	d80e      	bhi.n	be1a <bt_l2cap_recv+0x2a>
    bdfc:	4914      	ldr	r1, [pc, #80]	; (be50 <bt_l2cap_recv+0x60>)
    bdfe:	4b15      	ldr	r3, [pc, #84]	; (be54 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    be00:	4815      	ldr	r0, [pc, #84]	; (be58 <bt_l2cap_recv+0x68>)
    be02:	1ac9      	subs	r1, r1, r3
    be04:	08c9      	lsrs	r1, r1, #3
    be06:	0189      	lsls	r1, r1, #6
    be08:	f041 0101 	orr.w	r1, r1, #1
    be0c:	f016 fa6e 	bl	222ec <log_0>
	net_buf_unref(buf);
    be10:	4620      	mov	r0, r4
}
    be12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    be16:	f011 bb97 	b.w	1d548 <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    be1a:	2104      	movs	r1, #4
    be1c:	f104 0008 	add.w	r0, r4, #8
    be20:	f01a faeb 	bl	263fa <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    be24:	8841      	ldrh	r1, [r0, #2]
    be26:	4628      	mov	r0, r5
    be28:	f018 ffbc 	bl	24da4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    be2c:	b950      	cbnz	r0, be44 <bt_l2cap_recv+0x54>
    be2e:	4b09      	ldr	r3, [pc, #36]	; (be54 <bt_l2cap_recv+0x64>)
    be30:	4a07      	ldr	r2, [pc, #28]	; (be50 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    be32:	480a      	ldr	r0, [pc, #40]	; (be5c <bt_l2cap_recv+0x6c>)
    be34:	1ad2      	subs	r2, r2, r3
    be36:	08d2      	lsrs	r2, r2, #3
    be38:	0192      	lsls	r2, r2, #6
    be3a:	f042 0202 	orr.w	r2, r2, #2
    be3e:	f016 fa62 	bl	22306 <log_1>
		net_buf_unref(buf);
    be42:	e7e5      	b.n	be10 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    be44:	6843      	ldr	r3, [r0, #4]
    be46:	4621      	mov	r1, r4
    be48:	691b      	ldr	r3, [r3, #16]
    be4a:	4798      	blx	r3
    be4c:	e7e0      	b.n	be10 <bt_l2cap_recv+0x20>
    be4e:	bf00      	nop
    be50:	0002782c 	.word	0x0002782c
    be54:	0002775c 	.word	0x0002775c
    be58:	0002cb5a 	.word	0x0002cb5a
    be5c:	0002cb77 	.word	0x0002cb77

0000be60 <bt_l2cap_update_conn_param>:
{
    be60:	b573      	push	{r0, r1, r4, r5, r6, lr}
    be62:	460c      	mov	r4, r1
	ident++;
    be64:	4914      	ldr	r1, [pc, #80]	; (beb8 <bt_l2cap_update_conn_param+0x58>)
    be66:	780b      	ldrb	r3, [r1, #0]
    be68:	3301      	adds	r3, #1
	if (!ident) {
    be6a:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    be6e:	bf08      	it	eq
    be70:	2301      	moveq	r3, #1
    be72:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    be74:	7809      	ldrb	r1, [r1, #0]
{
    be76:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    be78:	2208      	movs	r2, #8
    be7a:	2012      	movs	r0, #18
    be7c:	f7ff fea2 	bl	bbc4 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    be80:	4606      	mov	r6, r0
    be82:	b1b0      	cbz	r0, beb2 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    be84:	2108      	movs	r1, #8
    be86:	4408      	add	r0, r1
    be88:	f01a fa90 	bl	263ac <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    be8c:	8822      	ldrh	r2, [r4, #0]
    be8e:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    be90:	8862      	ldrh	r2, [r4, #2]
    be92:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    be94:	88a2      	ldrh	r2, [r4, #4]
    be96:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    be98:	88e2      	ldrh	r2, [r4, #6]
    be9a:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    be9c:	2400      	movs	r4, #0
    be9e:	9400      	str	r4, [sp, #0]
    bea0:	4623      	mov	r3, r4
    bea2:	4632      	mov	r2, r6
    bea4:	2105      	movs	r1, #5
    bea6:	4628      	mov	r0, r5
    bea8:	f018 ff53 	bl	24d52 <bt_l2cap_send_cb>
	return 0;
    beac:	4620      	mov	r0, r4
}
    beae:	b002      	add	sp, #8
    beb0:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    beb2:	f06f 000b 	mvn.w	r0, #11
    beb6:	e7fa      	b.n	beae <bt_l2cap_update_conn_param+0x4e>
    beb8:	2000f2eb 	.word	0x2000f2eb

0000bebc <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    bebc:	4b02      	ldr	r3, [pc, #8]	; (bec8 <att_cfm_sent+0xc>)
    bebe:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    bec2:	f018 bf92 	b.w	24dea <att_sent>
    bec6:	bf00      	nop
    bec8:	00025147 	.word	0x00025147

0000becc <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    becc:	4b02      	ldr	r3, [pc, #8]	; (bed8 <att_rsp_sent+0xc>)
    bece:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    bed2:	f018 bf8a 	b.w	24dea <att_sent>
    bed6:	bf00      	nop
    bed8:	00025163 	.word	0x00025163

0000bedc <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    bedc:	4b02      	ldr	r3, [pc, #8]	; (bee8 <att_req_sent+0xc>)
    bede:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    bee2:	f018 bf82 	b.w	24dea <att_sent>
    bee6:	bf00      	nop
    bee8:	0000c0e9 	.word	0x0000c0e9

0000beec <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    beec:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    beee:	7b43      	ldrb	r3, [r0, #13]
    bef0:	2b07      	cmp	r3, #7
    bef2:	d00b      	beq.n	bf0c <att_get+0x20>
    bef4:	4918      	ldr	r1, [pc, #96]	; (bf58 <att_get+0x6c>)
    bef6:	4b19      	ldr	r3, [pc, #100]	; (bf5c <att_get+0x70>)
		BT_WARN("Not connected");
    bef8:	4819      	ldr	r0, [pc, #100]	; (bf60 <att_get+0x74>)
    befa:	1ac9      	subs	r1, r1, r3
    befc:	08c9      	lsrs	r1, r1, #3
    befe:	0189      	lsls	r1, r1, #6
    bf00:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    bf04:	f016 f9f2 	bl	222ec <log_0>
		return NULL;
    bf08:	2400      	movs	r4, #0
    bf0a:	e00e      	b.n	bf2a <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    bf0c:	2104      	movs	r1, #4
    bf0e:	f018 ff49 	bl	24da4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bf12:	4604      	mov	r4, r0
    bf14:	b958      	cbnz	r0, bf2e <att_get+0x42>
    bf16:	4910      	ldr	r1, [pc, #64]	; (bf58 <att_get+0x6c>)
    bf18:	4b10      	ldr	r3, [pc, #64]	; (bf5c <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    bf1a:	4812      	ldr	r0, [pc, #72]	; (bf64 <att_get+0x78>)
    bf1c:	1ac9      	subs	r1, r1, r3
    bf1e:	08c9      	lsrs	r1, r1, #3
    bf20:	0189      	lsls	r1, r1, #6
    bf22:	f041 0101 	orr.w	r1, r1, #1
    bf26:	f016 f9e1 	bl	222ec <log_0>
	}

	return att_chan->att;
}
    bf2a:	4620      	mov	r0, r4
    bf2c:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf2e:	f3bf 8f5b 	dmb	ish
    bf32:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    bf36:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    bf3a:	075b      	lsls	r3, r3, #29
    bf3c:	d508      	bpl.n	bf50 <att_get+0x64>
    bf3e:	4906      	ldr	r1, [pc, #24]	; (bf58 <att_get+0x6c>)
    bf40:	4b06      	ldr	r3, [pc, #24]	; (bf5c <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    bf42:	4809      	ldr	r0, [pc, #36]	; (bf68 <att_get+0x7c>)
    bf44:	1ac9      	subs	r1, r1, r3
    bf46:	08c9      	lsrs	r1, r1, #3
    bf48:	0189      	lsls	r1, r1, #6
    bf4a:	f041 0102 	orr.w	r1, r1, #2
    bf4e:	e7d9      	b.n	bf04 <att_get+0x18>
	return att_chan->att;
    bf50:	f850 4c08 	ldr.w	r4, [r0, #-8]
    bf54:	e7e9      	b.n	bf2a <att_get+0x3e>
    bf56:	bf00      	nop
    bf58:	0002775c 	.word	0x0002775c
    bf5c:	0002775c 	.word	0x0002775c
    bf60:	0002cbb3 	.word	0x0002cbb3
    bf64:	0002cbc1 	.word	0x0002cbc1
    bf68:	0002cbdc 	.word	0x0002cbdc

0000bf6c <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    bf6c:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    bf6e:	3808      	subs	r0, #8
    bf70:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    bf72:	a901      	add	r1, sp, #4
    bf74:	4802      	ldr	r0, [pc, #8]	; (bf80 <bt_att_released+0x14>)
    bf76:	f013 fd25 	bl	1f9c4 <k_mem_slab_free>
}
    bf7a:	b003      	add	sp, #12
    bf7c:	f85d fb04 	ldr.w	pc, [sp], #4
    bf80:	20009f60 	.word	0x20009f60

0000bf84 <find_type_cb>:
{
    bf84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    bf88:	f8d2 9000 	ldr.w	r9, [r2]
{
    bf8c:	b091      	sub	sp, #68	; 0x44
    bf8e:	4607      	mov	r7, r0
    bf90:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bf92:	2500      	movs	r5, #0
    bf94:	f642 0301 	movw	r3, #10241	; 0x2801
    bf98:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    bf9a:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bf9e:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    bfa2:	a90b      	add	r1, sp, #44	; 0x2c
{
    bfa4:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    bfa6:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    bfaa:	f018 facb 	bl	24544 <bt_uuid_cmp>
    bfae:	2800      	cmp	r0, #0
    bfb0:	d066      	beq.n	c080 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    bfb2:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    bfb6:	6838      	ldr	r0, [r7, #0]
    bfb8:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    bfbc:	a90b      	add	r1, sp, #44	; 0x2c
    bfbe:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    bfc2:	f018 fabf 	bl	24544 <bt_uuid_cmp>
    bfc6:	b138      	cbz	r0, bfd8 <find_type_cb+0x54>
		if (data->group &&
    bfc8:	68a3      	ldr	r3, [r4, #8]
    bfca:	b11b      	cbz	r3, bfd4 <find_type_cb+0x50>
    bfcc:	885a      	ldrh	r2, [r3, #2]
    bfce:	42b2      	cmp	r2, r6
    bfd0:	d200      	bcs.n	bfd4 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    bfd2:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    bfd4:	2001      	movs	r0, #1
    bfd6:	e009      	b.n	bfec <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    bfd8:	6861      	ldr	r1, [r4, #4]
    bfda:	4608      	mov	r0, r1
    bfdc:	f018 fefd 	bl	24dda <net_buf_frags_len>
    bfe0:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    bfe4:	1a1b      	subs	r3, r3, r0
    bfe6:	2b03      	cmp	r3, #3
    bfe8:	d803      	bhi.n	bff2 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    bfea:	2000      	movs	r0, #0
}
    bfec:	b011      	add	sp, #68	; 0x44
    bfee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    bff2:	4608      	mov	r0, r1
    bff4:	f01a f9b8 	bl	26368 <net_buf_frag_last>
    bff8:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    bffa:	6860      	ldr	r0, [r4, #4]
    bffc:	f018 feed 	bl	24dda <net_buf_frags_len>
    c000:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    c004:	f105 0b08 	add.w	fp, r5, #8
    c008:	ebaa 0a00 	sub.w	sl, sl, r0
    c00c:	4658      	mov	r0, fp
    c00e:	f01a fa08 	bl	26422 <net_buf_simple_tailroom>
    c012:	4582      	cmp	sl, r0
    c014:	d237      	bcs.n	c086 <find_type_cb+0x102>
    c016:	6860      	ldr	r0, [r4, #4]
    c018:	f018 fedf 	bl	24dda <net_buf_frags_len>
    c01c:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    c020:	1a18      	subs	r0, r3, r0
	if (!len) {
    c022:	b970      	cbnz	r0, c042 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    c024:	6863      	ldr	r3, [r4, #4]
    c026:	7998      	ldrb	r0, [r3, #6]
    c028:	f011 f9d0 	bl	1d3cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    c02c:	2200      	movs	r2, #0
    c02e:	2300      	movs	r3, #0
    c030:	f01a f966 	bl	26300 <net_buf_alloc_fixed>
		if (!frag) {
    c034:	4605      	mov	r5, r0
    c036:	2800      	cmp	r0, #0
    c038:	d0d7      	beq.n	bfea <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    c03a:	4601      	mov	r1, r0
    c03c:	6860      	ldr	r0, [r4, #4]
    c03e:	f01a f9a4 	bl	2638a <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    c042:	2300      	movs	r3, #0
    c044:	9300      	str	r3, [sp, #0]
    c046:	f8d7 9004 	ldr.w	r9, [r7, #4]
    c04a:	4639      	mov	r1, r7
    c04c:	2310      	movs	r3, #16
    c04e:	aa02      	add	r2, sp, #8
    c050:	4640      	mov	r0, r8
    c052:	47c8      	blx	r9
	if (read < 0) {
    c054:	1e07      	subs	r7, r0, #0
    c056:	db13      	blt.n	c080 <find_type_cb+0xfc>
	if (read != data->value_len) {
    c058:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c05a:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    c05c:	42ba      	cmp	r2, r7
    c05e:	d037      	beq.n	c0d0 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c060:	4601      	mov	r1, r0
    c062:	a80b      	add	r0, sp, #44	; 0x2c
    c064:	f018 fa9c 	bl	245a0 <bt_uuid_create>
    c068:	b988      	cbnz	r0, c08e <find_type_cb+0x10a>
    c06a:	4a1b      	ldr	r2, [pc, #108]	; (c0d8 <find_type_cb+0x154>)
    c06c:	4b1b      	ldr	r3, [pc, #108]	; (c0dc <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    c06e:	7c21      	ldrb	r1, [r4, #16]
    c070:	481b      	ldr	r0, [pc, #108]	; (c0e0 <find_type_cb+0x15c>)
    c072:	1ad2      	subs	r2, r2, r3
    c074:	08d2      	lsrs	r2, r2, #3
    c076:	0192      	lsls	r2, r2, #6
    c078:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    c07c:	f016 f943 	bl	22306 <log_1>
	data->group = NULL;
    c080:	2300      	movs	r3, #0
    c082:	60a3      	str	r3, [r4, #8]
    c084:	e7a6      	b.n	bfd4 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    c086:	4658      	mov	r0, fp
    c088:	f01a f9cb 	bl	26422 <net_buf_simple_tailroom>
    c08c:	e7c9      	b.n	c022 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    c08e:	b2fa      	uxtb	r2, r7
    c090:	a902      	add	r1, sp, #8
    c092:	a806      	add	r0, sp, #24
    c094:	f018 fa84 	bl	245a0 <bt_uuid_create>
    c098:	b948      	cbnz	r0, c0ae <find_type_cb+0x12a>
    c09a:	4a0f      	ldr	r2, [pc, #60]	; (c0d8 <find_type_cb+0x154>)
    c09c:	4b0f      	ldr	r3, [pc, #60]	; (c0dc <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    c09e:	4811      	ldr	r0, [pc, #68]	; (c0e4 <find_type_cb+0x160>)
    c0a0:	1ad2      	subs	r2, r2, r3
    c0a2:	08d2      	lsrs	r2, r2, #3
    c0a4:	0192      	lsls	r2, r2, #6
    c0a6:	f042 0202 	orr.w	r2, r2, #2
    c0aa:	4639      	mov	r1, r7
    c0ac:	e7e6      	b.n	c07c <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    c0ae:	a906      	add	r1, sp, #24
    c0b0:	a80b      	add	r0, sp, #44	; 0x2c
    c0b2:	f018 fa47 	bl	24544 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    c0b6:	2800      	cmp	r0, #0
    c0b8:	d1e2      	bne.n	c080 <find_type_cb+0xfc>
	data->err = 0x00;
    c0ba:	2300      	movs	r3, #0
    c0bc:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    c0be:	2104      	movs	r1, #4
    c0c0:	f105 0008 	add.w	r0, r5, #8
    c0c4:	f01a f972 	bl	263ac <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    c0c8:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c0ca:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c0cc:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    c0ce:	e781      	b.n	bfd4 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    c0d0:	a902      	add	r1, sp, #8
    c0d2:	f018 f906 	bl	242e2 <memcmp>
    c0d6:	e7ee      	b.n	c0b6 <find_type_cb+0x132>
    c0d8:	0002775c 	.word	0x0002775c
    c0dc:	0002775c 	.word	0x0002775c
    c0e0:	0002cc00 	.word	0x0002cc00
    c0e4:	0002cc1f 	.word	0x0002cc1f

0000c0e8 <chan_req_sent>:
	if (chan->req) {
    c0e8:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    c0ec:	b13b      	cbz	r3, c0fe <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c0ee:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    c0f2:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c0f6:	4802      	ldr	r0, [pc, #8]	; (c100 <chan_req_sent+0x18>)
    c0f8:	2300      	movs	r3, #0
    c0fa:	f014 ba5b 	b.w	205b4 <k_delayed_work_submit_to_queue>
}
    c0fe:	4770      	bx	lr
    c100:	2000aca0 	.word	0x2000aca0

0000c104 <chan_send>:
{
    c104:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c108:	688b      	ldr	r3, [r1, #8]
    c10a:	781b      	ldrb	r3, [r3, #0]
    c10c:	2bd2      	cmp	r3, #210	; 0xd2
{
    c10e:	4606      	mov	r6, r0
    c110:	460c      	mov	r4, r1
    c112:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c114:	d116      	bne.n	c144 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    c116:	6803      	ldr	r3, [r0, #0]
    c118:	6818      	ldr	r0, [r3, #0]
    c11a:	f003 fa15 	bl	f548 <bt_smp_sign>
		if (err) {
    c11e:	4605      	mov	r5, r0
    c120:	b180      	cbz	r0, c144 <chan_send+0x40>
    c122:	4b24      	ldr	r3, [pc, #144]	; (c1b4 <chan_send+0xb0>)
    c124:	4924      	ldr	r1, [pc, #144]	; (c1b8 <chan_send+0xb4>)
			BT_ERR("Error signing data");
    c126:	4825      	ldr	r0, [pc, #148]	; (c1bc <chan_send+0xb8>)
    c128:	1ac9      	subs	r1, r1, r3
    c12a:	08c9      	lsrs	r1, r1, #3
    c12c:	0189      	lsls	r1, r1, #6
    c12e:	f041 0101 	orr.w	r1, r1, #1
    c132:	f016 f8db 	bl	222ec <log_0>
			net_buf_unref(buf);
    c136:	4620      	mov	r0, r4
    c138:	f011 fa06 	bl	1d548 <net_buf_unref>
}
    c13c:	4628      	mov	r0, r5
    c13e:	b003      	add	sp, #12
    c140:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    c144:	f104 0008 	add.w	r0, r4, #8
    c148:	f01a f967 	bl	2641a <net_buf_simple_headroom>
	state->len = buf->len;
    c14c:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    c150:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    c152:	b957      	cbnz	r7, c16a <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    c154:	68a3      	ldr	r3, [r4, #8]
    c156:	7818      	ldrb	r0, [r3, #0]
    c158:	f018 fe5d 	bl	24e16 <att_op_get_type>
    c15c:	1e43      	subs	r3, r0, #1
    c15e:	b2db      	uxtb	r3, r3
    c160:	2b04      	cmp	r3, #4
    c162:	bf9c      	itt	ls
    c164:	4a16      	ldrls	r2, [pc, #88]	; (c1c0 <chan_send+0xbc>)
    c166:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c16a:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    c16c:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c170:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    c172:	4b14      	ldr	r3, [pc, #80]	; (c1c4 <chan_send+0xc0>)
    c174:	429f      	cmp	r7, r3
    c176:	d018      	beq.n	c1aa <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    c178:	4b13      	ldr	r3, [pc, #76]	; (c1c8 <chan_send+0xc4>)
    c17a:	429f      	cmp	r7, r3
    c17c:	d017      	beq.n	c1ae <chan_send+0xaa>
		return att_sent;
    c17e:	4913      	ldr	r1, [pc, #76]	; (c1cc <chan_send+0xc8>)
    c180:	4b13      	ldr	r3, [pc, #76]	; (c1d0 <chan_send+0xcc>)
    c182:	4a14      	ldr	r2, [pc, #80]	; (c1d4 <chan_send+0xd0>)
    c184:	428f      	cmp	r7, r1
    c186:	bf18      	it	ne
    c188:	4613      	movne	r3, r2
			       &chan->chan.chan);
    c18a:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c18c:	9600      	str	r6, [sp, #0]
    c18e:	4622      	mov	r2, r4
    c190:	2104      	movs	r1, #4
    c192:	f018 fdde 	bl	24d52 <bt_l2cap_send_cb>
	if (err) {
    c196:	4605      	mov	r5, r0
    c198:	2800      	cmp	r0, #0
    c19a:	d0cf      	beq.n	c13c <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    c19c:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    c19e:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    c1a2:	fa10 f088 	uxtah	r0, r0, r8
    c1a6:	60a0      	str	r0, [r4, #8]
}
    c1a8:	e7c8      	b.n	c13c <chan_send+0x38>
		return att_rsp_sent;
    c1aa:	4b0b      	ldr	r3, [pc, #44]	; (c1d8 <chan_send+0xd4>)
    c1ac:	e7ed      	b.n	c18a <chan_send+0x86>
		return att_cfm_sent;
    c1ae:	4b0b      	ldr	r3, [pc, #44]	; (c1dc <chan_send+0xd8>)
    c1b0:	e7eb      	b.n	c18a <chan_send+0x86>
    c1b2:	bf00      	nop
    c1b4:	0002775c 	.word	0x0002775c
    c1b8:	0002775c 	.word	0x0002775c
    c1bc:	0002cc3e 	.word	0x0002cc3e
    c1c0:	0002800c 	.word	0x0002800c
    c1c4:	00025163 	.word	0x00025163
    c1c8:	00025147 	.word	0x00025147
    c1cc:	0000c0e9 	.word	0x0000c0e9
    c1d0:	0000bedd 	.word	0x0000bedd
    c1d4:	00024deb 	.word	0x00024deb
    c1d8:	0000becd 	.word	0x0000becd
    c1dc:	0000bebd 	.word	0x0000bebd

0000c1e0 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c1e0:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    c1e2:	4a07      	ldr	r2, [pc, #28]	; (c200 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c1e4:	4604      	mov	r4, r0
    c1e6:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    c1e8:	f7ff ff8c 	bl	c104 <chan_send>
	if (err) {
    c1ec:	b130      	cbz	r0, c1fc <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    c1ee:	4629      	mov	r1, r5
    c1f0:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
    c1f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    c1f8:	f01a b8a5 	b.w	26346 <net_buf_put>
}
    c1fc:	bd38      	pop	{r3, r4, r5, pc}
    c1fe:	bf00      	nop
    c200:	00025163 	.word	0x00025163

0000c204 <read_group_cb>:
{
    c204:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c208:	4605      	mov	r5, r0
    c20a:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c20c:	f04f 0800 	mov.w	r8, #0
    c210:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c214:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    c216:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c218:	f88d 8008 	strb.w	r8, [sp, #8]
    c21c:	a902      	add	r1, sp, #8
{
    c21e:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c220:	f8ad 300a 	strh.w	r3, [sp, #10]
    c224:	f018 f98e 	bl	24544 <bt_uuid_cmp>
    c228:	b1a0      	cbz	r0, c254 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c22a:	f642 0301 	movw	r3, #10241	; 0x2801
    c22e:	6828      	ldr	r0, [r5, #0]
    c230:	f88d 800c 	strb.w	r8, [sp, #12]
    c234:	a903      	add	r1, sp, #12
    c236:	f8ad 300e 	strh.w	r3, [sp, #14]
    c23a:	f018 f983 	bl	24544 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c23e:	b148      	cbz	r0, c254 <read_group_cb+0x50>
		if (data->group &&
    c240:	6923      	ldr	r3, [r4, #16]
    c242:	b11b      	cbz	r3, c24c <read_group_cb+0x48>
    c244:	885a      	ldrh	r2, [r3, #2]
    c246:	42b2      	cmp	r2, r6
    c248:	d200      	bcs.n	c24c <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c24a:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c24c:	2001      	movs	r0, #1
}
    c24e:	b004      	add	sp, #16
    c250:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c254:	6861      	ldr	r1, [r4, #4]
    c256:	6828      	ldr	r0, [r5, #0]
    c258:	f018 f974 	bl	24544 <bt_uuid_cmp>
    c25c:	b110      	cbz	r0, c264 <read_group_cb+0x60>
		data->group = NULL;
    c25e:	2300      	movs	r3, #0
    c260:	6123      	str	r3, [r4, #16]
    c262:	e7f3      	b.n	c24c <read_group_cb+0x48>
	if (data->rsp->len &&
    c264:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c266:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    c268:	781a      	ldrb	r2, [r3, #0]
    c26a:	b13a      	cbz	r2, c27c <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c26c:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    c270:	8981      	ldrh	r1, [r0, #12]
    c272:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c274:	4293      	cmp	r3, r2
    c276:	da01      	bge.n	c27c <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    c278:	2000      	movs	r0, #0
    c27a:	e7e8      	b.n	c24e <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    c27c:	2104      	movs	r1, #4
    c27e:	3008      	adds	r0, #8
    c280:	f01a f894 	bl	263ac <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c284:	4b09      	ldr	r3, [pc, #36]	; (c2ac <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c286:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c288:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c28a:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c28c:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c28e:	4629      	mov	r1, r5
    c290:	9300      	str	r3, [sp, #0]
    c292:	9401      	str	r4, [sp, #4]
    c294:	2300      	movs	r3, #0
    c296:	4638      	mov	r0, r7
    c298:	f018 feca 	bl	25030 <att_chan_read>
	if (read < 0) {
    c29c:	2800      	cmp	r0, #0
    c29e:	dbeb      	blt.n	c278 <read_group_cb+0x74>
	if (!data->group) {
    c2a0:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c2a2:	3800      	subs	r0, #0
    c2a4:	bf18      	it	ne
    c2a6:	2001      	movne	r0, #1
    c2a8:	e7d1      	b.n	c24e <read_group_cb+0x4a>
    c2aa:	bf00      	nop
    c2ac:	00024f1f 	.word	0x00024f1f

0000c2b0 <read_type_cb>:
{
    c2b0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    c2b4:	f8d2 8000 	ldr.w	r8, [r2]
{
    c2b8:	4606      	mov	r6, r0
    c2ba:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c2bc:	6800      	ldr	r0, [r0, #0]
    c2be:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c2c0:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    c2c4:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c2c6:	f018 f93d 	bl	24544 <bt_uuid_cmp>
    c2ca:	4607      	mov	r7, r0
    c2cc:	2800      	cmp	r0, #0
    c2ce:	d13e      	bne.n	c34e <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c2d0:	4628      	mov	r0, r5
    c2d2:	2215      	movs	r2, #21
    c2d4:	4631      	mov	r1, r6
    c2d6:	f019 fbf1 	bl	25abc <bt_gatt_check_perm>
    c2da:	4605      	mov	r5, r0
    c2dc:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c2de:	b148      	cbz	r0, c2f4 <read_type_cb+0x44>
		if (data->rsp->len) {
    c2e0:	68e3      	ldr	r3, [r4, #12]
    c2e2:	781b      	ldrb	r3, [r3, #0]
    c2e4:	b923      	cbnz	r3, c2f0 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    c2e6:	2500      	movs	r5, #0
}
    c2e8:	4628      	mov	r0, r5
    c2ea:	b003      	add	sp, #12
    c2ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    c2f0:	7527      	strb	r7, [r4, #20]
    c2f2:	e7f8      	b.n	c2e6 <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c2f4:	68a0      	ldr	r0, [r4, #8]
    c2f6:	f01a f837 	bl	26368 <net_buf_frag_last>
    c2fa:	2102      	movs	r1, #2
    c2fc:	3008      	adds	r0, #8
    c2fe:	f01a f855 	bl	263ac <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c302:	4b14      	ldr	r3, [pc, #80]	; (c354 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c304:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c306:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    c308:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c30c:	4631      	mov	r1, r6
    c30e:	9300      	str	r3, [sp, #0]
    c310:	9401      	str	r4, [sp, #4]
    c312:	462b      	mov	r3, r5
    c314:	4640      	mov	r0, r8
    c316:	f018 fe8b 	bl	25030 <att_chan_read>
	if (read < 0) {
    c31a:	2800      	cmp	r0, #0
    c31c:	da07      	bge.n	c32e <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    c31e:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c322:	bf26      	itte	cs
    c324:	4240      	negcs	r0, r0
    c326:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c328:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c32a:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c32c:	e7dc      	b.n	c2e8 <read_type_cb+0x38>
	if (!data->item) {
    c32e:	6923      	ldr	r3, [r4, #16]
    c330:	2b00      	cmp	r3, #0
    c332:	d0d8      	beq.n	c2e6 <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c334:	68a0      	ldr	r0, [r4, #8]
    c336:	f018 fd50 	bl	24dda <net_buf_frags_len>
    c33a:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c33e:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c340:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c342:	7818      	ldrb	r0, [r3, #0]
    c344:	4285      	cmp	r5, r0
    c346:	bf94      	ite	ls
    c348:	2500      	movls	r5, #0
    c34a:	2501      	movhi	r5, #1
    c34c:	e7cc      	b.n	c2e8 <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    c34e:	2501      	movs	r5, #1
    c350:	e7ca      	b.n	c2e8 <read_type_cb+0x38>
    c352:	bf00      	nop
    c354:	00024df7 	.word	0x00024df7

0000c358 <prep_write_cb>:
{
    c358:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c35c:	4614      	mov	r4, r2
    c35e:	4606      	mov	r6, r0
    c360:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    c362:	222a      	movs	r2, #42	; 0x2a
    c364:	4601      	mov	r1, r0
    c366:	6820      	ldr	r0, [r4, #0]
    c368:	f019 fba8 	bl	25abc <bt_gatt_check_perm>
    c36c:	4605      	mov	r5, r0
    c36e:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    c370:	2800      	cmp	r0, #0
    c372:	d12e      	bne.n	c3d2 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    c374:	7cb3      	ldrb	r3, [r6, #18]
    c376:	065b      	lsls	r3, r3, #25
    c378:	d516      	bpl.n	c3a8 <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    c37a:	2301      	movs	r3, #1
    c37c:	9301      	str	r3, [sp, #4]
    c37e:	89e3      	ldrh	r3, [r4, #14]
    c380:	9300      	str	r3, [sp, #0]
    c382:	f8d6 8008 	ldr.w	r8, [r6, #8]
    c386:	89a3      	ldrh	r3, [r4, #12]
    c388:	68a2      	ldr	r2, [r4, #8]
    c38a:	6820      	ldr	r0, [r4, #0]
    c38c:	4631      	mov	r1, r6
    c38e:	47c0      	blx	r8
	if (write != 0) {
    c390:	b150      	cbz	r0, c3a8 <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    c392:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c396:	bf26      	itte	cs
    c398:	4243      	negcs	r3, r0
    c39a:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    c39c:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c39e:	7423      	strb	r3, [r4, #16]
}
    c3a0:	4628      	mov	r0, r5
    c3a2:	b002      	add	sp, #8
    c3a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    c3a8:	480b      	ldr	r0, [pc, #44]	; (c3d8 <prep_write_cb+0x80>)
    c3aa:	2200      	movs	r2, #0
    c3ac:	2300      	movs	r3, #0
    c3ae:	f019 ffa7 	bl	26300 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    c3b2:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    c3b4:	b908      	cbnz	r0, c3ba <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c3b6:	2309      	movs	r3, #9
    c3b8:	e7f1      	b.n	c39e <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    c3ba:	89e3      	ldrh	r3, [r4, #14]
    c3bc:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    c3be:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c3c0:	89a2      	ldrh	r2, [r4, #12]
    c3c2:	68a1      	ldr	r1, [r4, #8]
    c3c4:	3008      	adds	r0, #8
    c3c6:	f019 fff7 	bl	263b8 <net_buf_simple_add_mem>
	data->err = 0U;
    c3ca:	2300      	movs	r3, #0
    c3cc:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    c3ce:	2501      	movs	r5, #1
    c3d0:	e7e6      	b.n	c3a0 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    c3d2:	2500      	movs	r5, #0
    c3d4:	e7e4      	b.n	c3a0 <prep_write_cb+0x48>
    c3d6:	bf00      	nop
    c3d8:	2000a140 	.word	0x2000a140

0000c3dc <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c3dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c3de:	2300      	movs	r3, #0
{
    c3e0:	4606      	mov	r6, r0
    c3e2:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c3e4:	4828      	ldr	r0, [pc, #160]	; (c488 <bt_att_accept+0xac>)
    c3e6:	2200      	movs	r2, #0
    c3e8:	4669      	mov	r1, sp
    c3ea:	f013 fabb 	bl	1f964 <k_mem_slab_alloc>
    c3ee:	4604      	mov	r4, r0
    c3f0:	b178      	cbz	r0, c412 <bt_att_accept+0x36>
    c3f2:	4a26      	ldr	r2, [pc, #152]	; (c48c <bt_att_accept+0xb0>)
    c3f4:	4b26      	ldr	r3, [pc, #152]	; (c490 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    c3f6:	4827      	ldr	r0, [pc, #156]	; (c494 <bt_att_accept+0xb8>)
    c3f8:	1ad2      	subs	r2, r2, r3
    c3fa:	08d2      	lsrs	r2, r2, #3
    c3fc:	0192      	lsls	r2, r2, #6
    c3fe:	f042 0201 	orr.w	r2, r2, #1
    c402:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c404:	f015 ff7f 	bl	22306 <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c408:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c40c:	4620      	mov	r0, r4
    c40e:	b003      	add	sp, #12
    c410:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    c412:	4601      	mov	r1, r0
    c414:	2244      	movs	r2, #68	; 0x44
    c416:	9800      	ldr	r0, [sp, #0]
    c418:	f017 ff9f 	bl	2435a <memset>
	att->conn = conn;
    c41c:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c41e:	481e      	ldr	r0, [pc, #120]	; (c498 <bt_att_accept+0xbc>)
	list->tail = NULL;
    c420:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    c422:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    c426:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    c42a:	2200      	movs	r2, #0
    c42c:	2300      	movs	r3, #0
    c42e:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c430:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c432:	f013 fa97 	bl	1f964 <k_mem_slab_alloc>
    c436:	4604      	mov	r4, r0
    c438:	b148      	cbz	r0, c44e <bt_att_accept+0x72>
    c43a:	4a14      	ldr	r2, [pc, #80]	; (c48c <bt_att_accept+0xb0>)
    c43c:	4b14      	ldr	r3, [pc, #80]	; (c490 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c43e:	6829      	ldr	r1, [r5, #0]
    c440:	4816      	ldr	r0, [pc, #88]	; (c49c <bt_att_accept+0xc0>)
    c442:	1ad2      	subs	r2, r2, r3
    c444:	08d2      	lsrs	r2, r2, #3
    c446:	0192      	lsls	r2, r2, #6
    c448:	f042 0201 	orr.w	r2, r2, #1
    c44c:	e7da      	b.n	c404 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    c44e:	4601      	mov	r1, r0
    c450:	f44f 728c 	mov.w	r2, #280	; 0x118
    c454:	9801      	ldr	r0, [sp, #4]
    c456:	f017 ff80 	bl	2435a <memset>
	chan->chan.chan.ops = &ops;
    c45a:	9801      	ldr	r0, [sp, #4]
    c45c:	4b10      	ldr	r3, [pc, #64]	; (c4a0 <bt_att_accept+0xc4>)
    c45e:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    c460:	30c8      	adds	r0, #200	; 0xc8
    c462:	f01a fc32 	bl	26cca <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c466:	9b01      	ldr	r3, [sp, #4]
    c468:	f3bf 8f5b 	dmb	ish
    c46c:	33c0      	adds	r3, #192	; 0xc0
    c46e:	e853 2f00 	ldrex	r2, [r3]
    c472:	e843 4100 	strex	r1, r4, [r3]
    c476:	2900      	cmp	r1, #0
    c478:	d1f9      	bne.n	c46e <bt_att_accept+0x92>
    c47a:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c47e:	9b01      	ldr	r3, [sp, #4]
    c480:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    c484:	603b      	str	r3, [r7, #0]
	return 0;
    c486:	e7c1      	b.n	c40c <bt_att_accept+0x30>
    c488:	20009f44 	.word	0x20009f44
    c48c:	0002775c 	.word	0x0002775c
    c490:	0002775c 	.word	0x0002775c
    c494:	0002cc51 	.word	0x0002cc51
    c498:	20009f60 	.word	0x20009f60
    c49c:	0002cc76 	.word	0x0002cc76
    c4a0:	20000324 	.word	0x20000324

0000c4a4 <bt_att_connected>:
{
    c4a4:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c4a6:	2104      	movs	r1, #4
{
    c4a8:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c4aa:	6800      	ldr	r0, [r0, #0]
    c4ac:	f018 fc6a 	bl	24d84 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    c4b0:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    c4b4:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c4b6:	b93b      	cbnz	r3, c4c8 <bt_att_connected+0x24>
    c4b8:	f105 000c 	add.w	r0, r5, #12
    c4bc:	f01a fc05 	bl	26cca <z_impl_k_queue_init>
    c4c0:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c4c4:	f01a fc01 	bl	26cca <z_impl_k_queue_init>
	parent->next = child;
    c4c8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    c4ca:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
Z_GENLIST_PREPEND(slist, snode)
    c4ce:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    c4d0:	f504 7386 	add.w	r3, r4, #268	; 0x10c
	list->head = node;
    c4d4:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    c4d6:	b902      	cbnz	r2, c4da <bt_att_connected+0x36>
	list->tail = node;
    c4d8:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4da:	f3bf 8f5b 	dmb	ish
    c4de:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    c4e2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    c4e6:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c4e8:	bf5e      	ittt	pl
    c4ea:	2317      	movpl	r3, #23
    c4ec:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c4f0:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c4f4:	2230      	movs	r2, #48	; 0x30
    c4f6:	2100      	movs	r1, #0
    c4f8:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    c4fc:	f017 ff2d 	bl	2435a <memset>
    c500:	4b01      	ldr	r3, [pc, #4]	; (c508 <bt_att_connected+0x64>)
    c502:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    c506:	bd38      	pop	{r3, r4, r5, pc}
    c508:	0000cf99 	.word	0x0000cf99

0000c50c <bt_att_chan_create_pdu>:
{
    c50c:	b538      	push	{r3, r4, r5, lr}
    c50e:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c510:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    c514:	3201      	adds	r2, #1
    c516:	428a      	cmp	r2, r1
    c518:	d90c      	bls.n	c534 <bt_att_chan_create_pdu+0x28>
    c51a:	481a      	ldr	r0, [pc, #104]	; (c584 <bt_att_chan_create_pdu+0x78>)
    c51c:	4b1a      	ldr	r3, [pc, #104]	; (c588 <bt_att_chan_create_pdu+0x7c>)
    c51e:	1a1b      	subs	r3, r3, r0
    c520:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    c522:	019b      	lsls	r3, r3, #6
    c524:	4819      	ldr	r0, [pc, #100]	; (c58c <bt_att_chan_create_pdu+0x80>)
    c526:	f043 0302 	orr.w	r3, r3, #2
    c52a:	f015 ff00 	bl	2232e <log_2>
		return NULL;
    c52e:	2400      	movs	r4, #0
}
    c530:	4620      	mov	r0, r4
    c532:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    c534:	4628      	mov	r0, r5
    c536:	f018 fc6e 	bl	24e16 <att_op_get_type>
    c53a:	2802      	cmp	r0, #2
    c53c:	d001      	beq.n	c542 <bt_att_chan_create_pdu+0x36>
    c53e:	2804      	cmp	r0, #4
    c540:	d114      	bne.n	c56c <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    c542:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c546:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    c548:	2100      	movs	r1, #0
    c54a:	4608      	mov	r0, r1
    c54c:	f018 fbfe 	bl	24d4c <bt_l2cap_create_pdu_timeout>
    c550:	4604      	mov	r4, r0
	if (!buf) {
    c552:	b980      	cbnz	r0, c576 <bt_att_chan_create_pdu+0x6a>
    c554:	4b0b      	ldr	r3, [pc, #44]	; (c584 <bt_att_chan_create_pdu+0x78>)
    c556:	4a0c      	ldr	r2, [pc, #48]	; (c588 <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    c558:	480d      	ldr	r0, [pc, #52]	; (c590 <bt_att_chan_create_pdu+0x84>)
    c55a:	1ad2      	subs	r2, r2, r3
    c55c:	08d2      	lsrs	r2, r2, #3
    c55e:	0192      	lsls	r2, r2, #6
    c560:	f042 0201 	orr.w	r2, r2, #1
    c564:	4629      	mov	r1, r5
    c566:	f015 fece 	bl	22306 <log_1>
		return NULL;
    c56a:	e7e1      	b.n	c530 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    c56c:	f04f 32ff 	mov.w	r2, #4294967295
    c570:	f04f 33ff 	mov.w	r3, #4294967295
    c574:	e7e8      	b.n	c548 <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    c576:	2101      	movs	r1, #1
    c578:	3008      	adds	r0, #8
    c57a:	f019 ff17 	bl	263ac <net_buf_simple_add>
	hdr->code = op;
    c57e:	7005      	strb	r5, [r0, #0]
	return buf;
    c580:	e7d6      	b.n	c530 <bt_att_chan_create_pdu+0x24>
    c582:	bf00      	nop
    c584:	0002775c 	.word	0x0002775c
    c588:	0002775c 	.word	0x0002775c
    c58c:	0002cc9b 	.word	0x0002cc9b
    c590:	0002ca88 	.word	0x0002ca88

0000c594 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    c594:	898b      	ldrh	r3, [r1, #12]
{
    c596:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c59a:	4604      	mov	r4, r0
    c59c:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    c59e:	b963      	cbnz	r3, c5ba <bt_att_recv+0x26>
    c5a0:	494c      	ldr	r1, [pc, #304]	; (c6d4 <bt_att_recv+0x140>)
    c5a2:	4b4d      	ldr	r3, [pc, #308]	; (c6d8 <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    c5a4:	484d      	ldr	r0, [pc, #308]	; (c6dc <bt_att_recv+0x148>)
    c5a6:	1ac9      	subs	r1, r1, r3
    c5a8:	08c9      	lsrs	r1, r1, #3
    c5aa:	0189      	lsls	r1, r1, #6
    c5ac:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    c5b0:	f015 fe9c 	bl	222ec <log_0>
}
    c5b4:	2000      	movs	r0, #0
    c5b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c5ba:	2101      	movs	r1, #1
    c5bc:	f108 0008 	add.w	r0, r8, #8
    c5c0:	f019 ff1b 	bl	263fa <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    c5c4:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c5c8:	4605      	mov	r5, r0
    c5ca:	2b00      	cmp	r3, #0
    c5cc:	d0f2      	beq.n	c5b4 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    c5ce:	7801      	ldrb	r1, [r0, #0]
    c5d0:	4a43      	ldr	r2, [pc, #268]	; (c6e0 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    c5d2:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c5d6:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    c5d8:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    c5dc:	4288      	cmp	r0, r1
    c5de:	d11e      	bne.n	c61e <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    c5e0:	00d8      	lsls	r0, r3, #3
    c5e2:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c5e6:	789f      	ldrb	r7, [r3, #2]
    c5e8:	2f01      	cmp	r7, #1
    c5ea:	d133      	bne.n	c654 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c5ec:	f3bf 8f5b 	dmb	ish
    c5f0:	34b8      	adds	r4, #184	; 0xb8
    c5f2:	e854 3f00 	ldrex	r3, [r4]
    c5f6:	f043 0101 	orr.w	r1, r3, #1
    c5fa:	e844 1c00 	strex	ip, r1, [r4]
    c5fe:	f1bc 0f00 	cmp.w	ip, #0
    c602:	d1f6      	bne.n	c5f2 <bt_att_recv+0x5e>
    c604:	f3bf 8f5b 	dmb	ish
    c608:	07d9      	lsls	r1, r3, #31
    c60a:	d53e      	bpl.n	c68a <bt_att_recv+0xf6>
    c60c:	4931      	ldr	r1, [pc, #196]	; (c6d4 <bt_att_recv+0x140>)
    c60e:	4b32      	ldr	r3, [pc, #200]	; (c6d8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    c610:	4834      	ldr	r0, [pc, #208]	; (c6e4 <bt_att_recv+0x150>)
    c612:	1ac9      	subs	r1, r1, r3
    c614:	08c9      	lsrs	r1, r1, #3
    c616:	0189      	lsls	r1, r1, #6
    c618:	f041 0102 	orr.w	r1, r1, #2
    c61c:	e7c8      	b.n	c5b0 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c61e:	3301      	adds	r3, #1
    c620:	2b0e      	cmp	r3, #14
    c622:	d1d9      	bne.n	c5d8 <bt_att_recv+0x44>
    c624:	4b2c      	ldr	r3, [pc, #176]	; (c6d8 <bt_att_recv+0x144>)
    c626:	4a2b      	ldr	r2, [pc, #172]	; (c6d4 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    c628:	482f      	ldr	r0, [pc, #188]	; (c6e8 <bt_att_recv+0x154>)
    c62a:	1ad2      	subs	r2, r2, r3
    c62c:	08d2      	lsrs	r2, r2, #3
    c62e:	0192      	lsls	r2, r2, #6
    c630:	f042 0202 	orr.w	r2, r2, #2
    c634:	f015 fe67 	bl	22306 <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    c638:	7829      	ldrb	r1, [r5, #0]
    c63a:	4608      	mov	r0, r1
    c63c:	f018 fbeb 	bl	24e16 <att_op_get_type>
    c640:	2800      	cmp	r0, #0
    c642:	d0b7      	beq.n	c5b4 <bt_att_recv+0x20>
	if (!req) {
    c644:	2900      	cmp	r1, #0
    c646:	d0b5      	beq.n	c5b4 <bt_att_recv+0x20>
    c648:	2306      	movs	r3, #6
    c64a:	2200      	movs	r2, #0
    c64c:	4630      	mov	r0, r6
    c64e:	f018 fe21 	bl	25294 <send_err_rsp.part.0>
    c652:	e7af      	b.n	c5b4 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    c654:	2f05      	cmp	r7, #5
    c656:	d118      	bne.n	c68a <bt_att_recv+0xf6>
    c658:	f3bf 8f5b 	dmb	ish
    c65c:	34b8      	adds	r4, #184	; 0xb8
    c65e:	e854 3f00 	ldrex	r3, [r4]
    c662:	f043 0102 	orr.w	r1, r3, #2
    c666:	e844 1c00 	strex	ip, r1, [r4]
    c66a:	f1bc 0f00 	cmp.w	ip, #0
    c66e:	d1f6      	bne.n	c65e <bt_att_recv+0xca>
    c670:	f3bf 8f5b 	dmb	ish
    c674:	079b      	lsls	r3, r3, #30
    c676:	d508      	bpl.n	c68a <bt_att_recv+0xf6>
    c678:	4916      	ldr	r1, [pc, #88]	; (c6d4 <bt_att_recv+0x140>)
    c67a:	4b17      	ldr	r3, [pc, #92]	; (c6d8 <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    c67c:	481b      	ldr	r0, [pc, #108]	; (c6ec <bt_att_recv+0x158>)
    c67e:	1ac9      	subs	r1, r1, r3
    c680:	08c9      	lsrs	r1, r1, #3
    c682:	0189      	lsls	r1, r1, #6
    c684:	f041 0102 	orr.w	r1, r1, #2
    c688:	e792      	b.n	c5b0 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    c68a:	1813      	adds	r3, r2, r0
    c68c:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    c690:	785a      	ldrb	r2, [r3, #1]
    c692:	428a      	cmp	r2, r1
    c694:	d90e      	bls.n	c6b4 <bt_att_recv+0x120>
    c696:	4a10      	ldr	r2, [pc, #64]	; (c6d8 <bt_att_recv+0x144>)
    c698:	4b0e      	ldr	r3, [pc, #56]	; (c6d4 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c69a:	4815      	ldr	r0, [pc, #84]	; (c6f0 <bt_att_recv+0x15c>)
    c69c:	1a9b      	subs	r3, r3, r2
    c69e:	08db      	lsrs	r3, r3, #3
    c6a0:	019b      	lsls	r3, r3, #6
    c6a2:	782a      	ldrb	r2, [r5, #0]
    c6a4:	f043 0301 	orr.w	r3, r3, #1
    c6a8:	f015 fe41 	bl	2232e <log_2>
	if (handler->type == ATT_REQUEST && err) {
    c6ac:	2f01      	cmp	r7, #1
    c6ae:	d181      	bne.n	c5b4 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    c6b0:	2304      	movs	r3, #4
    c6b2:	e00a      	b.n	c6ca <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    c6b4:	685b      	ldr	r3, [r3, #4]
    c6b6:	4641      	mov	r1, r8
    c6b8:	4630      	mov	r0, r6
    c6ba:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    c6bc:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    c6be:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    c6c0:	f47f af78 	bne.w	c5b4 <bt_att_recv+0x20>
    c6c4:	2800      	cmp	r0, #0
    c6c6:	f43f af75 	beq.w	c5b4 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    c6ca:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    c6cc:	2900      	cmp	r1, #0
    c6ce:	f43f af71 	beq.w	c5b4 <bt_att_recv+0x20>
    c6d2:	e7ba      	b.n	c64a <bt_att_recv+0xb6>
    c6d4:	0002775c 	.word	0x0002775c
    c6d8:	0002775c 	.word	0x0002775c
    c6dc:	0002ccc0 	.word	0x0002ccc0
    c6e0:	00028020 	.word	0x00028020
    c6e4:	0002ccdb 	.word	0x0002ccdb
    c6e8:	0002cd35 	.word	0x0002cd35
    c6ec:	0002ccf7 	.word	0x0002ccf7
    c6f0:	0002cd16 	.word	0x0002cd16

0000c6f4 <att_write_rsp>:
{
    c6f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6f8:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c6fa:	6803      	ldr	r3, [r0, #0]
    c6fc:	460e      	mov	r6, r1
    c6fe:	3900      	subs	r1, #0
{
    c700:	b086      	sub	sp, #24
    c702:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c704:	bf18      	it	ne
    c706:	2101      	movne	r1, #1
    c708:	6818      	ldr	r0, [r3, #0]
{
    c70a:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c70c:	f019 fa01 	bl	25b12 <bt_gatt_change_aware>
    c710:	2800      	cmp	r0, #0
    c712:	d04d      	beq.n	c7b0 <att_write_rsp+0xbc>
	if (!handle) {
    c714:	2f00      	cmp	r7, #0
    c716:	d04d      	beq.n	c7b4 <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    c718:	2218      	movs	r2, #24
    c71a:	2100      	movs	r1, #0
    c71c:	4668      	mov	r0, sp
    c71e:	f017 fe1c 	bl	2435a <memset>
	if (rsp) {
    c722:	f1b8 0f00 	cmp.w	r8, #0
    c726:	d126      	bne.n	c776 <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    c728:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c72a:	4a23      	ldr	r2, [pc, #140]	; (c7b8 <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    c72c:	681b      	ldr	r3, [r3, #0]
    c72e:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    c730:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    c734:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    c738:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c73a:	9303      	str	r3, [sp, #12]
	data.len = len;
    c73c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    c740:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c744:	2301      	movs	r3, #1
    c746:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c74a:	4639      	mov	r1, r7
    c74c:	466b      	mov	r3, sp
    c74e:	4638      	mov	r0, r7
	data.req = req;
    c750:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c754:	f018 fb8c 	bl	24e70 <bt_gatt_foreach_attr>
	if (data.err) {
    c758:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c75c:	b30c      	cbz	r4, c7a2 <att_write_rsp+0xae>
		if (rsp) {
    c75e:	f1b8 0f00 	cmp.w	r8, #0
    c762:	d019      	beq.n	c798 <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    c764:	9801      	ldr	r0, [sp, #4]
    c766:	f010 feef 	bl	1d548 <net_buf_unref>
	if (!req) {
    c76a:	b976      	cbnz	r6, c78a <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c76c:	2400      	movs	r4, #0
}
    c76e:	4620      	mov	r0, r4
    c770:	b006      	add	sp, #24
    c772:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c776:	2200      	movs	r2, #0
    c778:	4641      	mov	r1, r8
    c77a:	4628      	mov	r0, r5
    c77c:	f7ff fec6 	bl	c50c <bt_att_chan_create_pdu>
    c780:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c782:	2800      	cmp	r0, #0
    c784:	d1d0      	bne.n	c728 <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    c786:	240e      	movs	r4, #14
    c788:	e7f1      	b.n	c76e <att_write_rsp+0x7a>
    c78a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c78e:	463a      	mov	r2, r7
    c790:	4631      	mov	r1, r6
    c792:	4628      	mov	r0, r5
    c794:	f018 fd7e 	bl	25294 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c798:	2e18      	cmp	r6, #24
    c79a:	d1e7      	bne.n	c76c <att_write_rsp+0x78>
    c79c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c7a0:	e7e5      	b.n	c76e <att_write_rsp+0x7a>
	if (data.buf) {
    c7a2:	9901      	ldr	r1, [sp, #4]
    c7a4:	2900      	cmp	r1, #0
    c7a6:	d0e1      	beq.n	c76c <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c7a8:	4628      	mov	r0, r5
    c7aa:	f7ff fd19 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
    c7ae:	e7de      	b.n	c76e <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c7b0:	2412      	movs	r4, #18
    c7b2:	e7dc      	b.n	c76e <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    c7b4:	2401      	movs	r4, #1
    c7b6:	e7da      	b.n	c76e <att_write_rsp+0x7a>
    c7b8:	00024f3f 	.word	0x00024f3f

0000c7bc <att_signed_write_cmd>:
{
    c7bc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    c7c0:	4688      	mov	r8, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    c7c2:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(req->handle);
    c7c4:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
    c7c8:	460c      	mov	r4, r1
    c7ca:	4606      	mov	r6, r0
	return net_buf_simple_push(&buf->b, len);
    c7cc:	2101      	movs	r1, #1
    c7ce:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
    c7d0:	881f      	ldrh	r7, [r3, #0]
    c7d2:	f019 fe02 	bl	263da <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    c7d6:	4628      	mov	r0, r5
    c7d8:	4621      	mov	r1, r4
    c7da:	f002 fe39 	bl	f450 <bt_smp_sign_verify>
	if (err) {
    c7de:	4605      	mov	r5, r0
    c7e0:	b168      	cbz	r0, c7fe <att_signed_write_cmd+0x42>
    c7e2:	4b12      	ldr	r3, [pc, #72]	; (c82c <att_signed_write_cmd+0x70>)
    c7e4:	4912      	ldr	r1, [pc, #72]	; (c830 <att_signed_write_cmd+0x74>)
		BT_ERR("Error verifying data");
    c7e6:	4813      	ldr	r0, [pc, #76]	; (c834 <att_signed_write_cmd+0x78>)
    c7e8:	1ac9      	subs	r1, r1, r3
    c7ea:	08c9      	lsrs	r1, r1, #3
    c7ec:	0189      	lsls	r1, r1, #6
    c7ee:	f041 0101 	orr.w	r1, r1, #1
    c7f2:	f015 fd7b 	bl	222ec <log_0>
		return 0;
    c7f6:	2000      	movs	r0, #0
}
    c7f8:	b004      	add	sp, #16
    c7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull(&buf->b, len);
    c7fe:	2101      	movs	r1, #1
    c800:	4640      	mov	r0, r8
    c802:	f019 fdf2 	bl	263ea <net_buf_simple_pull>
    c806:	2102      	movs	r1, #2
    c808:	4640      	mov	r0, r8
    c80a:	f019 fdee 	bl	263ea <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    c80e:	89a3      	ldrh	r3, [r4, #12]
    c810:	3b0c      	subs	r3, #12
    c812:	b29b      	uxth	r3, r3
    c814:	9302      	str	r3, [sp, #8]
    c816:	68a3      	ldr	r3, [r4, #8]
    c818:	462a      	mov	r2, r5
    c81a:	e9cd 5300 	strd	r5, r3, [sp]
    c81e:	4629      	mov	r1, r5
    c820:	463b      	mov	r3, r7
    c822:	4630      	mov	r0, r6
    c824:	f7ff ff66 	bl	c6f4 <att_write_rsp>
    c828:	e7e6      	b.n	c7f8 <att_signed_write_cmd+0x3c>
    c82a:	bf00      	nop
    c82c:	0002775c 	.word	0x0002775c
    c830:	0002775c 	.word	0x0002775c
    c834:	0002cd4f 	.word	0x0002cd4f

0000c838 <bt_att_create_pdu>:
{
    c838:	b570      	push	{r4, r5, r6, lr}
    c83a:	460e      	mov	r6, r1
    c83c:	4615      	mov	r5, r2
	att = att_get(conn);
    c83e:	f7ff fb55 	bl	beec <att_get>
	if (!att) {
    c842:	b1c0      	cbz	r0, c876 <bt_att_create_pdu+0x3e>
	return list->head;
    c844:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    c846:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c848:	b15b      	cbz	r3, c862 <bt_att_create_pdu+0x2a>
    c84a:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
    c84e:	d008      	beq.n	c862 <bt_att_create_pdu+0x2a>
	return node->next;
    c850:	681b      	ldr	r3, [r3, #0]
    c852:	b10b      	cbz	r3, c858 <bt_att_create_pdu+0x20>
    c854:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c858:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c85c:	4291      	cmp	r1, r2
    c85e:	d90c      	bls.n	c87a <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c860:	b98b      	cbnz	r3, c886 <bt_att_create_pdu+0x4e>
    c862:	4a0e      	ldr	r2, [pc, #56]	; (c89c <bt_att_create_pdu+0x64>)
    c864:	4b0e      	ldr	r3, [pc, #56]	; (c8a0 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c866:	480f      	ldr	r0, [pc, #60]	; (c8a4 <bt_att_create_pdu+0x6c>)
    c868:	1ad2      	subs	r2, r2, r3
    c86a:	08d2      	lsrs	r2, r2, #3
    c86c:	0192      	lsls	r2, r2, #6
    c86e:	f042 0202 	orr.w	r2, r2, #2
    c872:	f015 fd48 	bl	22306 <log_1>
}
    c876:	2000      	movs	r0, #0
    c878:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c87a:	462a      	mov	r2, r5
    c87c:	4631      	mov	r1, r6
}
    c87e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c882:	f7ff be43 	b.w	c50c <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c886:	f513 748a 	adds.w	r4, r3, #276	; 0x114
    c88a:	d004      	beq.n	c896 <bt_att_create_pdu+0x5e>
	return node->next;
    c88c:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c890:	b10c      	cbz	r4, c896 <bt_att_create_pdu+0x5e>
    c892:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
{
    c896:	4618      	mov	r0, r3
    c898:	4623      	mov	r3, r4
    c89a:	e7dd      	b.n	c858 <bt_att_create_pdu+0x20>
    c89c:	0002775c 	.word	0x0002775c
    c8a0:	0002775c 	.word	0x0002775c
    c8a4:	0002cd64 	.word	0x0002cd64

0000c8a8 <att_prepare_write_req>:
{
    c8a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    c8ac:	460c      	mov	r4, r1
    c8ae:	b087      	sub	sp, #28
    c8b0:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    c8b2:	2104      	movs	r1, #4
    c8b4:	f104 0008 	add.w	r0, r4, #8
    c8b8:	f019 fd9f 	bl	263fa <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    c8bc:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    c8c0:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    c8c4:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    c8c8:	f8d4 8008 	ldr.w	r8, [r4, #8]
    c8cc:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    c8ce:	2101      	movs	r1, #1
    c8d0:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    c8d2:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    c8d6:	f019 f91c 	bl	25b12 <bt_gatt_change_aware>
    c8da:	2800      	cmp	r0, #0
    c8dc:	d04a      	beq.n	c974 <att_prepare_write_req+0xcc>
	if (!handle) {
    c8de:	2e00      	cmp	r6, #0
    c8e0:	d04a      	beq.n	c978 <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    c8e2:	2214      	movs	r2, #20
    c8e4:	2100      	movs	r1, #0
    c8e6:	a801      	add	r0, sp, #4
    c8e8:	f017 fd37 	bl	2435a <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c8ec:	2301      	movs	r3, #1
    c8ee:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    c8f2:	4a23      	ldr	r2, [pc, #140]	; (c980 <att_prepare_write_req+0xd8>)
	data.conn = conn;
    c8f4:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    c8f8:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    c8fa:	ab01      	add	r3, sp, #4
    c8fc:	4631      	mov	r1, r6
    c8fe:	4630      	mov	r0, r6
	data.offset = offset;
    c900:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    c904:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    c908:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    c90c:	f018 fab0 	bl	24e70 <bt_gatt_foreach_attr>
	if (data.err) {
    c910:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c914:	b154      	cbz	r4, c92c <att_prepare_write_req+0x84>
	if (!req) {
    c916:	4623      	mov	r3, r4
    c918:	4632      	mov	r2, r6
    c91a:	2116      	movs	r1, #22
    c91c:	4628      	mov	r0, r5
    c91e:	f018 fcb9 	bl	25294 <send_err_rsp.part.0>
		return 0;
    c922:	2400      	movs	r4, #0
}
    c924:	4620      	mov	r0, r4
    c926:	b007      	add	sp, #28
    c928:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    c92c:	6828      	ldr	r0, [r5, #0]
    c92e:	9902      	ldr	r1, [sp, #8]
    c930:	3024      	adds	r0, #36	; 0x24
    c932:	f019 fd08 	bl	26346 <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    c936:	4622      	mov	r2, r4
    c938:	2117      	movs	r1, #23
    c93a:	4658      	mov	r0, fp
    c93c:	f7ff ff7c 	bl	c838 <bt_att_create_pdu>
    c940:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    c942:	b1d8      	cbz	r0, c97c <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    c944:	2104      	movs	r1, #4
    c946:	3008      	adds	r0, #8
    c948:	f019 fd30 	bl	263ac <net_buf_simple_add>
    c94c:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    c94e:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    c952:	f8a0 9002 	strh.w	r9, [r0, #2]
    c956:	9802      	ldr	r0, [sp, #8]
    c958:	4639      	mov	r1, r7
    c95a:	3008      	adds	r0, #8
    c95c:	f019 fd26 	bl	263ac <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    c960:	4641      	mov	r1, r8
    c962:	463a      	mov	r2, r7
    c964:	1d30      	adds	r0, r6, #4
    c966:	f017 fccd 	bl	24304 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c96a:	9902      	ldr	r1, [sp, #8]
    c96c:	4628      	mov	r0, r5
    c96e:	f7ff fc37 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    c972:	e7d7      	b.n	c924 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c974:	2412      	movs	r4, #18
    c976:	e7d5      	b.n	c924 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    c978:	2401      	movs	r4, #1
    c97a:	e7d3      	b.n	c924 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    c97c:	240e      	movs	r4, #14
    c97e:	e7d1      	b.n	c924 <att_prepare_write_req+0x7c>
    c980:	0000c359 	.word	0x0000c359

0000c984 <att_read_group_req>:
{
    c984:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    c988:	898c      	ldrh	r4, [r1, #12]
    c98a:	3c04      	subs	r4, #4
    c98c:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    c98e:	2c02      	cmp	r4, #2
{
    c990:	4605      	mov	r5, r0
    c992:	b08c      	sub	sp, #48	; 0x30
    c994:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    c996:	d001      	beq.n	c99c <att_read_group_req+0x18>
    c998:	2c10      	cmp	r4, #16
    c99a:	d16e      	bne.n	ca7a <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    c99c:	2104      	movs	r1, #4
    c99e:	3008      	adds	r0, #8
    c9a0:	f019 fd2b 	bl	263fa <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c9a4:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    c9a8:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    c9aa:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    c9ac:	1d01      	adds	r1, r0, #4
    c9ae:	4622      	mov	r2, r4
    c9b0:	4640      	mov	r0, r8
    c9b2:	f017 fdf5 	bl	245a0 <bt_uuid_create>
    c9b6:	2800      	cmp	r0, #0
    c9b8:	d061      	beq.n	ca7e <att_read_group_req+0xfa>
	if (!start || !end) {
    c9ba:	2e00      	cmp	r6, #0
    c9bc:	d03a      	beq.n	ca34 <att_read_group_req+0xb0>
    c9be:	2400      	movs	r4, #0
    c9c0:	2f00      	cmp	r7, #0
    c9c2:	d036      	beq.n	ca32 <att_read_group_req+0xae>
	if (start > end) {
    c9c4:	42be      	cmp	r6, r7
    c9c6:	d835      	bhi.n	ca34 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    c9c8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c9cc:	a901      	add	r1, sp, #4
    c9ce:	4640      	mov	r0, r8
    c9d0:	f88d 4004 	strb.w	r4, [sp, #4]
    c9d4:	f8ad 3006 	strh.w	r3, [sp, #6]
    c9d8:	f017 fdb4 	bl	24544 <bt_uuid_cmp>
    c9dc:	2800      	cmp	r0, #0
    c9de:	d134      	bne.n	ca4a <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    c9e0:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    c9e2:	2214      	movs	r2, #20
    c9e4:	2100      	movs	r1, #0
    c9e6:	a807      	add	r0, sp, #28
    c9e8:	f017 fcb7 	bl	2435a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    c9ec:	2201      	movs	r2, #1
    c9ee:	2111      	movs	r1, #17
    c9f0:	4620      	mov	r0, r4
    c9f2:	f7ff ff21 	bl	c838 <bt_att_create_pdu>
    c9f6:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    c9f8:	2800      	cmp	r0, #0
    c9fa:	d040      	beq.n	ca7e <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    c9fc:	2101      	movs	r1, #1
    c9fe:	3008      	adds	r0, #8
	data.uuid = uuid;
    ca00:	e9cd 5807 	strd	r5, r8, [sp, #28]
    ca04:	f019 fcd2 	bl	263ac <net_buf_simple_add>
	data.rsp->len = 0U;
    ca08:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    ca0c:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    ca0e:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    ca10:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    ca14:	4a1b      	ldr	r2, [pc, #108]	; (ca84 <att_read_group_req+0x100>)
	data.group = NULL;
    ca16:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    ca1a:	4639      	mov	r1, r7
    ca1c:	4630      	mov	r0, r6
    ca1e:	f018 fa27 	bl	24e70 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    ca22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    ca24:	781c      	ldrb	r4, [r3, #0]
    ca26:	bb1c      	cbnz	r4, ca70 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    ca28:	9809      	ldr	r0, [sp, #36]	; 0x24
    ca2a:	f010 fd8d 	bl	1d548 <net_buf_unref>
	if (!req) {
    ca2e:	230a      	movs	r3, #10
    ca30:	e018      	b.n	ca64 <att_read_group_req+0xe0>
			*err = 0U;
    ca32:	463e      	mov	r6, r7
	if (!req) {
    ca34:	2301      	movs	r3, #1
    ca36:	4632      	mov	r2, r6
    ca38:	2110      	movs	r1, #16
    ca3a:	4628      	mov	r0, r5
    ca3c:	f018 fc2a 	bl	25294 <send_err_rsp.part.0>
		return 0;
    ca40:	2400      	movs	r4, #0
}
    ca42:	4620      	mov	r0, r4
    ca44:	b00c      	add	sp, #48	; 0x30
    ca46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    ca4a:	f642 0301 	movw	r3, #10241	; 0x2801
    ca4e:	a907      	add	r1, sp, #28
    ca50:	4640      	mov	r0, r8
    ca52:	f88d 401c 	strb.w	r4, [sp, #28]
    ca56:	f8ad 301e 	strh.w	r3, [sp, #30]
    ca5a:	f017 fd73 	bl	24544 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    ca5e:	2800      	cmp	r0, #0
    ca60:	d0be      	beq.n	c9e0 <att_read_group_req+0x5c>
	if (!req) {
    ca62:	2310      	movs	r3, #16
    ca64:	4632      	mov	r2, r6
    ca66:	2110      	movs	r1, #16
    ca68:	4628      	mov	r0, r5
    ca6a:	f018 fc13 	bl	25294 <send_err_rsp.part.0>
		return 0;
    ca6e:	e7e8      	b.n	ca42 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ca70:	9909      	ldr	r1, [sp, #36]	; 0x24
    ca72:	4628      	mov	r0, r5
    ca74:	f7ff fbb4 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    ca78:	e7e2      	b.n	ca40 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    ca7a:	2404      	movs	r4, #4
    ca7c:	e7e1      	b.n	ca42 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    ca7e:	240e      	movs	r4, #14
    ca80:	e7df      	b.n	ca42 <att_read_group_req+0xbe>
    ca82:	bf00      	nop
    ca84:	0000c205 	.word	0x0000c205

0000ca88 <att_read_mult_req>:
{
    ca88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    ca8c:	6886      	ldr	r6, [r0, #8]
{
    ca8e:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    ca90:	2210      	movs	r2, #16
{
    ca92:	4604      	mov	r4, r0
    ca94:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    ca96:	4668      	mov	r0, sp
    ca98:	2100      	movs	r1, #0
    ca9a:	f017 fc5e 	bl	2435a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    ca9e:	2200      	movs	r2, #0
    caa0:	210f      	movs	r1, #15
    caa2:	4630      	mov	r0, r6
    caa4:	f7ff fec8 	bl	c838 <bt_att_create_pdu>
    caa8:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    caaa:	b358      	cbz	r0, cb04 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    caac:	f8df 9058 	ldr.w	r9, [pc, #88]	; cb08 <att_read_mult_req+0x80>
	data.chan = chan;
    cab0:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    cab2:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cab6:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    caba:	89ab      	ldrh	r3, [r5, #12]
    cabc:	2b01      	cmp	r3, #1
    cabe:	d804      	bhi.n	caca <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cac0:	9902      	ldr	r1, [sp, #8]
    cac2:	4620      	mov	r0, r4
    cac4:	f7ff fb8c 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
    cac8:	e018      	b.n	cafc <att_read_mult_req+0x74>
    caca:	4638      	mov	r0, r7
    cacc:	f019 fc9d 	bl	2640a <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cad0:	466b      	mov	r3, sp
    cad2:	464a      	mov	r2, r9
    cad4:	4601      	mov	r1, r0
    cad6:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cad8:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cadc:	f018 f9c8 	bl	24e70 <bt_gatt_foreach_attr>
		if (data.err) {
    cae0:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cae4:	2b00      	cmp	r3, #0
    cae6:	d0e8      	beq.n	caba <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    cae8:	9802      	ldr	r0, [sp, #8]
    caea:	f010 fd2d 	bl	1d548 <net_buf_unref>
	if (!req) {
    caee:	f89d 300c 	ldrb.w	r3, [sp, #12]
    caf2:	4632      	mov	r2, r6
    caf4:	210e      	movs	r1, #14
    caf6:	4620      	mov	r0, r4
    caf8:	f018 fbcc 	bl	25294 <send_err_rsp.part.0>
	return 0;
    cafc:	2000      	movs	r0, #0
}
    cafe:	b005      	add	sp, #20
    cb00:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    cb04:	200e      	movs	r0, #14
    cb06:	e7fa      	b.n	cafe <att_read_mult_req+0x76>
    cb08:	0002517f 	.word	0x0002517f

0000cb0c <att_read_rsp>:
{
    cb0c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    cb10:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    cb14:	4605      	mov	r5, r0
    cb16:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    cb18:	4640      	mov	r0, r8
    cb1a:	2101      	movs	r1, #1
{
    cb1c:	4614      	mov	r4, r2
    cb1e:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    cb20:	f018 fff7 	bl	25b12 <bt_gatt_change_aware>
    cb24:	b388      	cbz	r0, cb8a <att_read_rsp+0x7e>
	if (!handle) {
    cb26:	b396      	cbz	r6, cb8e <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    cb28:	2210      	movs	r2, #16
    cb2a:	2100      	movs	r1, #0
    cb2c:	4668      	mov	r0, sp
    cb2e:	f017 fc14 	bl	2435a <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    cb32:	2200      	movs	r2, #0
    cb34:	4621      	mov	r1, r4
    cb36:	4640      	mov	r0, r8
    cb38:	f7ff fe7e 	bl	c838 <bt_att_create_pdu>
    cb3c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    cb3e:	b340      	cbz	r0, cb92 <att_read_rsp+0x86>
	data.offset = offset;
    cb40:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cb44:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    cb48:	2301      	movs	r3, #1
    cb4a:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cb4e:	4a12      	ldr	r2, [pc, #72]	; (cb98 <att_read_rsp+0x8c>)
	data.chan = chan;
    cb50:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cb52:	466b      	mov	r3, sp
    cb54:	4631      	mov	r1, r6
    cb56:	4630      	mov	r0, r6
    cb58:	f018 f98a 	bl	24e70 <bt_gatt_foreach_attr>
	if (data.err) {
    cb5c:	f89d 400c 	ldrb.w	r4, [sp, #12]
    cb60:	b174      	cbz	r4, cb80 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    cb62:	9802      	ldr	r0, [sp, #8]
    cb64:	f010 fcf0 	bl	1d548 <net_buf_unref>
	if (!req) {
    cb68:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cb6c:	4632      	mov	r2, r6
    cb6e:	4639      	mov	r1, r7
    cb70:	4628      	mov	r0, r5
    cb72:	f018 fb8f 	bl	25294 <send_err_rsp.part.0>
		return 0;
    cb76:	2400      	movs	r4, #0
}
    cb78:	4620      	mov	r0, r4
    cb7a:	b004      	add	sp, #16
    cb7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cb80:	9902      	ldr	r1, [sp, #8]
    cb82:	4628      	mov	r0, r5
    cb84:	f7ff fb2c 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cb88:	e7f6      	b.n	cb78 <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    cb8a:	2412      	movs	r4, #18
    cb8c:	e7f4      	b.n	cb78 <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    cb8e:	2401      	movs	r4, #1
    cb90:	e7f2      	b.n	cb78 <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    cb92:	240e      	movs	r4, #14
    cb94:	e7f0      	b.n	cb78 <att_read_rsp+0x6c>
    cb96:	bf00      	nop
    cb98:	0002517f 	.word	0x0002517f

0000cb9c <att_read_type_req>:
{
    cb9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    cba0:	898c      	ldrh	r4, [r1, #12]
    cba2:	3c04      	subs	r4, #4
    cba4:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    cba6:	2c02      	cmp	r4, #2
{
    cba8:	4605      	mov	r5, r0
    cbaa:	b08c      	sub	sp, #48	; 0x30
    cbac:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cbae:	d001      	beq.n	cbb4 <att_read_type_req+0x18>
    cbb0:	2c10      	cmp	r4, #16
    cbb2:	d14f      	bne.n	cc54 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    cbb4:	2104      	movs	r1, #4
    cbb6:	3008      	adds	r0, #8
    cbb8:	f019 fc1f 	bl	263fa <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cbbc:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    cbc0:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cbc2:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cbc4:	1d01      	adds	r1, r0, #4
    cbc6:	4622      	mov	r2, r4
    cbc8:	4640      	mov	r0, r8
    cbca:	f017 fce9 	bl	245a0 <bt_uuid_create>
    cbce:	b188      	cbz	r0, cbf4 <att_read_type_req+0x58>
	if (!start || !end) {
    cbd0:	b19e      	cbz	r6, cbfa <att_read_type_req+0x5e>
    cbd2:	b18f      	cbz	r7, cbf8 <att_read_type_req+0x5c>
	if (start > end) {
    cbd4:	42b7      	cmp	r7, r6
    cbd6:	d310      	bcc.n	cbfa <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    cbd8:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    cbda:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cbdc:	2100      	movs	r1, #0
    cbde:	eb0d 0002 	add.w	r0, sp, r2
    cbe2:	f017 fbba 	bl	2435a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    cbe6:	2201      	movs	r2, #1
    cbe8:	2109      	movs	r1, #9
    cbea:	4620      	mov	r0, r4
    cbec:	f7ff fe24 	bl	c838 <bt_att_create_pdu>
    cbf0:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    cbf2:	b968      	cbnz	r0, cc10 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    cbf4:	240e      	movs	r4, #14
    cbf6:	e007      	b.n	cc08 <att_read_type_req+0x6c>
			*err = 0U;
    cbf8:	463e      	mov	r6, r7
	if (!req) {
    cbfa:	2301      	movs	r3, #1
    cbfc:	4632      	mov	r2, r6
    cbfe:	2108      	movs	r1, #8
    cc00:	4628      	mov	r0, r5
    cc02:	f018 fb47 	bl	25294 <send_err_rsp.part.0>
		return 0;
    cc06:	2400      	movs	r4, #0
}
    cc08:	4620      	mov	r0, r4
    cc0a:	b00c      	add	sp, #48	; 0x30
    cc0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    cc10:	2101      	movs	r1, #1
    cc12:	3008      	adds	r0, #8
	data.uuid = uuid;
    cc14:	e9cd 5806 	strd	r5, r8, [sp, #24]
    cc18:	f019 fbc8 	bl	263ac <net_buf_simple_add>
	data.rsp->len = 0U;
    cc1c:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cc20:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cc22:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cc24:	4a0c      	ldr	r2, [pc, #48]	; (cc58 <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    cc26:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cc2a:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cc2c:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cc30:	4630      	mov	r0, r6
    cc32:	ab06      	add	r3, sp, #24
    cc34:	f018 f91c 	bl	24e70 <bt_gatt_foreach_attr>
	if (data.err) {
    cc38:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    cc3c:	b12c      	cbz	r4, cc4a <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    cc3e:	9808      	ldr	r0, [sp, #32]
    cc40:	f010 fc82 	bl	1d548 <net_buf_unref>
	if (!req) {
    cc44:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    cc48:	e7d8      	b.n	cbfc <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cc4a:	9908      	ldr	r1, [sp, #32]
    cc4c:	4628      	mov	r0, r5
    cc4e:	f7ff fac7 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cc52:	e7d9      	b.n	cc08 <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    cc54:	2404      	movs	r4, #4
    cc56:	e7d7      	b.n	cc08 <att_read_type_req+0x6c>
    cc58:	0000c2b1 	.word	0x0000c2b1

0000cc5c <att_find_type_req>:
{
    cc5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cc60:	4688      	mov	r8, r1
    cc62:	b086      	sub	sp, #24
    cc64:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    cc66:	2106      	movs	r1, #6
    cc68:	f108 0008 	add.w	r0, r8, #8
    cc6c:	f019 fbc5 	bl	263fa <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    cc70:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    cc72:	b317      	cbz	r7, ccba <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    cc74:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    cc78:	f1b9 0f00 	cmp.w	r9, #0
    cc7c:	d01c      	beq.n	ccb8 <att_find_type_req+0x5c>
	if (start > end) {
    cc7e:	454f      	cmp	r7, r9
    cc80:	d81b      	bhi.n	ccba <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    cc82:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    cc84:	f8ad 3002 	strh.w	r3, [sp, #2]
    cc88:	2400      	movs	r4, #0
    cc8a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cc8e:	a901      	add	r1, sp, #4
    cc90:	4668      	mov	r0, sp
	value = buf->data;
    cc92:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    cc96:	f88d 4000 	strb.w	r4, [sp]
    cc9a:	f88d 4004 	strb.w	r4, [sp, #4]
    cc9e:	f8ad 3006 	strh.w	r3, [sp, #6]
    cca2:	f017 fc4f 	bl	24544 <bt_uuid_cmp>
    cca6:	4606      	mov	r6, r0
    cca8:	b190      	cbz	r0, ccd0 <att_find_type_req+0x74>
	if (!req) {
    ccaa:	230a      	movs	r3, #10
    ccac:	463a      	mov	r2, r7
    ccae:	2106      	movs	r1, #6
    ccb0:	4628      	mov	r0, r5
    ccb2:	f018 faef 	bl	25294 <send_err_rsp.part.0>
		return 0;
    ccb6:	e007      	b.n	ccc8 <att_find_type_req+0x6c>
			*err = 0U;
    ccb8:	464f      	mov	r7, r9
	if (!req) {
    ccba:	2301      	movs	r3, #1
    ccbc:	463a      	mov	r2, r7
    ccbe:	2106      	movs	r1, #6
    ccc0:	4628      	mov	r0, r5
    ccc2:	f018 fae7 	bl	25294 <send_err_rsp.part.0>
		return 0;
    ccc6:	2400      	movs	r4, #0
}
    ccc8:	4620      	mov	r0, r4
    ccca:	b006      	add	sp, #24
    cccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    ccd0:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    ccd4:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    ccd8:	4601      	mov	r1, r0
    ccda:	2214      	movs	r2, #20
    ccdc:	a801      	add	r0, sp, #4
    ccde:	f017 fb3c 	bl	2435a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    cce2:	4632      	mov	r2, r6
    cce4:	2107      	movs	r1, #7
    cce6:	4640      	mov	r0, r8
    cce8:	f7ff fda6 	bl	c838 <bt_att_create_pdu>
    ccec:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ccee:	b1d8      	cbz	r0, cd28 <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ccf0:	230a      	movs	r3, #10
    ccf2:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ccf6:	4a0d      	ldr	r2, [pc, #52]	; (cd2c <att_find_type_req+0xd0>)
	data.value_len = value_len;
    ccf8:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ccfc:	ab01      	add	r3, sp, #4
    ccfe:	4649      	mov	r1, r9
    cd00:	4638      	mov	r0, r7
	data.value = value;
    cd02:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    cd06:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    cd08:	f018 f8b2 	bl	24e70 <bt_gatt_foreach_attr>
	if (data.err) {
    cd0c:	f89d 4015 	ldrb.w	r4, [sp, #21]
    cd10:	b12c      	cbz	r4, cd1e <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    cd12:	9802      	ldr	r0, [sp, #8]
    cd14:	f010 fc18 	bl	1d548 <net_buf_unref>
	if (!req) {
    cd18:	f89d 3015 	ldrb.w	r3, [sp, #21]
    cd1c:	e7ce      	b.n	ccbc <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cd1e:	9902      	ldr	r1, [sp, #8]
    cd20:	4628      	mov	r0, r5
    cd22:	f7ff fa5d 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cd26:	e7cf      	b.n	ccc8 <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    cd28:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    cd2a:	e7cd      	b.n	ccc8 <att_find_type_req+0x6c>
    cd2c:	0000bf85 	.word	0x0000bf85

0000cd30 <att_find_info_req>:
{
    cd30:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    cd32:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    cd34:	881e      	ldrh	r6, [r3, #0]
{
    cd36:	b085      	sub	sp, #20
    cd38:	4605      	mov	r5, r0
	if (!start || !end) {
    cd3a:	b19e      	cbz	r6, cd64 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    cd3c:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    cd3e:	b184      	cbz	r4, cd62 <att_find_info_req+0x32>
	if (start > end) {
    cd40:	42b4      	cmp	r4, r6
    cd42:	d30f      	bcc.n	cd64 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    cd44:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    cd46:	2210      	movs	r2, #16
    cd48:	2100      	movs	r1, #0
    cd4a:	4668      	mov	r0, sp
    cd4c:	f017 fb05 	bl	2435a <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    cd50:	2200      	movs	r2, #0
    cd52:	2105      	movs	r1, #5
    cd54:	4638      	mov	r0, r7
    cd56:	f7ff fd6f 	bl	c838 <bt_att_create_pdu>
    cd5a:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    cd5c:	b958      	cbnz	r0, cd76 <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    cd5e:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    cd60:	e007      	b.n	cd72 <att_find_info_req+0x42>
			*err = 0U;
    cd62:	4626      	mov	r6, r4
	if (!req) {
    cd64:	2301      	movs	r3, #1
    cd66:	4632      	mov	r2, r6
    cd68:	2104      	movs	r1, #4
    cd6a:	4628      	mov	r0, r5
    cd6c:	f018 fa92 	bl	25294 <send_err_rsp.part.0>
	return 0;
    cd70:	2000      	movs	r0, #0
}
    cd72:	b005      	add	sp, #20
    cd74:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cd76:	4621      	mov	r1, r4
    cd78:	4a08      	ldr	r2, [pc, #32]	; (cd9c <att_find_info_req+0x6c>)
	data.chan = chan;
    cd7a:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cd7c:	466b      	mov	r3, sp
    cd7e:	4630      	mov	r0, r6
    cd80:	f018 f876 	bl	24e70 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    cd84:	9c02      	ldr	r4, [sp, #8]
    cd86:	b924      	cbnz	r4, cd92 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    cd88:	9801      	ldr	r0, [sp, #4]
    cd8a:	f010 fbdd 	bl	1d548 <net_buf_unref>
	if (!req) {
    cd8e:	230a      	movs	r3, #10
    cd90:	e7e9      	b.n	cd66 <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cd92:	9901      	ldr	r1, [sp, #4]
    cd94:	4628      	mov	r0, r5
    cd96:	f7ff fa23 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
    cd9a:	e7e9      	b.n	cd70 <att_find_info_req+0x40>
    cd9c:	00024e87 	.word	0x00024e87

0000cda0 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    cda0:	b513      	push	{r0, r1, r4, lr}
    cda2:	4602      	mov	r2, r0
    cda4:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cda6:	4808      	ldr	r0, [pc, #32]	; (cdc8 <bt_att_req_alloc+0x28>)
    cda8:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    cdaa:	2400      	movs	r4, #0
    cdac:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cdae:	f012 fdd9 	bl	1f964 <k_mem_slab_alloc>
    cdb2:	4601      	mov	r1, r0
    cdb4:	b930      	cbnz	r0, cdc4 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    cdb6:	9801      	ldr	r0, [sp, #4]
    cdb8:	221c      	movs	r2, #28
    cdba:	f017 face 	bl	2435a <memset>

	return req;
    cdbe:	9801      	ldr	r0, [sp, #4]
}
    cdc0:	b002      	add	sp, #8
    cdc2:	bd10      	pop	{r4, pc}
		return NULL;
    cdc4:	4620      	mov	r0, r4
    cdc6:	e7fb      	b.n	cdc0 <bt_att_req_alloc+0x20>
    cdc8:	20009f7c 	.word	0x20009f7c

0000cdcc <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    cdcc:	b507      	push	{r0, r1, r2, lr}
    cdce:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    cdd0:	6880      	ldr	r0, [r0, #8]
    cdd2:	b120      	cbz	r0, cdde <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    cdd4:	f010 fbb8 	bl	1d548 <net_buf_unref>
		req->buf = NULL;
    cdd8:	9b01      	ldr	r3, [sp, #4]
    cdda:	2200      	movs	r2, #0
    cddc:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    cdde:	4803      	ldr	r0, [pc, #12]	; (cdec <bt_att_req_free+0x20>)
    cde0:	a901      	add	r1, sp, #4
    cde2:	f012 fdef 	bl	1f9c4 <k_mem_slab_free>
}
    cde6:	b003      	add	sp, #12
    cde8:	f85d fb04 	ldr.w	pc, [sp], #4
    cdec:	20009f7c 	.word	0x20009f7c

0000cdf0 <att_handle_rsp>:
{
    cdf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cdf4:	4605      	mov	r5, r0
    cdf6:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    cdf8:	30e0      	adds	r0, #224	; 0xe0
{
    cdfa:	4689      	mov	r9, r1
    cdfc:	4692      	mov	sl, r2
    cdfe:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    ce00:	f01a f92f 	bl	27062 <k_delayed_work_cancel>
	if (!chan->req) {
    ce04:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    ce08:	bb5c      	cbnz	r4, ce62 <att_handle_rsp+0x72>
    ce0a:	4b2e      	ldr	r3, [pc, #184]	; (cec4 <att_handle_rsp+0xd4>)
    ce0c:	492e      	ldr	r1, [pc, #184]	; (cec8 <att_handle_rsp+0xd8>)
		BT_WARN("No pending ATT request");
    ce0e:	482f      	ldr	r0, [pc, #188]	; (cecc <att_handle_rsp+0xdc>)
    ce10:	1ac9      	subs	r1, r1, r3
    ce12:	08c9      	lsrs	r1, r1, #3
    ce14:	0189      	lsls	r1, r1, #6
    ce16:	f041 0102 	orr.w	r1, r1, #2
    ce1a:	f015 fa67 	bl	222ec <log_0>
	bt_att_func_t func = NULL;
    ce1e:	4627      	mov	r7, r4
	att_process(chan->att);
    ce20:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    ce24:	f10b 0004 	add.w	r0, fp, #4
    ce28:	f017 ffcd 	bl	24dc6 <sys_slist_get>
	if (!node) {
    ce2c:	4606      	mov	r6, r0
    ce2e:	b380      	cbz	r0, ce92 <att_handle_rsp+0xa2>
	return list->head;
    ce30:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ce34:	b152      	cbz	r2, ce4c <att_handle_rsp+0x5c>
    ce36:	f5b2 708a 	subs.w	r0, r2, #276	; 0x114
    ce3a:	d007      	beq.n	ce4c <att_handle_rsp+0x5c>
	return node->next;
    ce3c:	6814      	ldr	r4, [r2, #0]
    ce3e:	b10c      	cbz	r4, ce44 <att_handle_rsp+0x54>
    ce40:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		if (!chan->req) {
    ce44:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    ce48:	b1f2      	cbz	r2, ce88 <att_handle_rsp+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ce4a:	bb7c      	cbnz	r4, ceac <att_handle_rsp+0xbc>
	parent->next = child;
    ce4c:	f8db 2004 	ldr.w	r2, [fp, #4]
    ce50:	6032      	str	r2, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    ce52:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    ce56:	f8cb 6004 	str.w	r6, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    ce5a:	b9d2      	cbnz	r2, ce92 <att_handle_rsp+0xa2>
	list->tail = node;
    ce5c:	f8cb 6008 	str.w	r6, [fp, #8]
}
    ce60:	e017      	b.n	ce92 <att_handle_rsp+0xa2>
	if (chan->req == &cancel) {
    ce62:	4b1b      	ldr	r3, [pc, #108]	; (ced0 <att_handle_rsp+0xe0>)
    ce64:	429c      	cmp	r4, r3
    ce66:	f04f 0600 	mov.w	r6, #0
    ce6a:	d103      	bne.n	ce74 <att_handle_rsp+0x84>
		chan->req = NULL;
    ce6c:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
	bt_att_func_t func = NULL;
    ce70:	4637      	mov	r7, r6
		goto process;
    ce72:	e7d5      	b.n	ce20 <att_handle_rsp+0x30>
	func = chan->req->func;
    ce74:	6867      	ldr	r7, [r4, #4]
	params = chan->req->user_data;
    ce76:	69a3      	ldr	r3, [r4, #24]
	chan->req->func = NULL;
    ce78:	6066      	str	r6, [r4, #4]
	bt_att_req_free(chan->req);
    ce7a:	4620      	mov	r0, r4
	params = chan->req->user_data;
    ce7c:	9303      	str	r3, [sp, #12]
	bt_att_req_free(chan->req);
    ce7e:	f7ff ffa5 	bl	cdcc <bt_att_req_free>
	chan->req = NULL;
    ce82:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    ce86:	e7cb      	b.n	ce20 <att_handle_rsp+0x30>
	return chan_req_send(chan, req);
    ce88:	4631      	mov	r1, r6
    ce8a:	f018 f886 	bl	24f9a <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    ce8e:	2800      	cmp	r0, #0
    ce90:	dbdb      	blt.n	ce4a <att_handle_rsp+0x5a>
	if (func) {
    ce92:	b13f      	cbz	r7, cea4 <att_handle_rsp+0xb4>
		func(chan->att->conn, err, pdu, len, params);
    ce94:	9b03      	ldr	r3, [sp, #12]
    ce96:	6828      	ldr	r0, [r5, #0]
    ce98:	9300      	str	r3, [sp, #0]
    ce9a:	6800      	ldr	r0, [r0, #0]
    ce9c:	4653      	mov	r3, sl
    ce9e:	464a      	mov	r2, r9
    cea0:	4641      	mov	r1, r8
    cea2:	47b8      	blx	r7
}
    cea4:	2000      	movs	r0, #0
    cea6:	b005      	add	sp, #20
    cea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    ceac:	f514 728a 	adds.w	r2, r4, #276	; 0x114
    ceb0:	d004      	beq.n	cebc <att_handle_rsp+0xcc>
	return node->next;
    ceb2:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    ceb6:	b10a      	cbz	r2, cebc <att_handle_rsp+0xcc>
    ceb8:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
	bt_att_func_t func = NULL;
    cebc:	4620      	mov	r0, r4
    cebe:	4614      	mov	r4, r2
    cec0:	e7c0      	b.n	ce44 <att_handle_rsp+0x54>
    cec2:	bf00      	nop
    cec4:	0002775c 	.word	0x0002775c
    cec8:	0002775c 	.word	0x0002775c
    cecc:	0002cd7f 	.word	0x0002cd7f
    ced0:	2000d774 	.word	0x2000d774

0000ced4 <bt_att_disconnected>:
{
    ced4:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    ced6:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    ceda:	b085      	sub	sp, #20
    cedc:	4604      	mov	r4, r0
	if (!att_chan->att) {
    cede:	2d00      	cmp	r5, #0
    cee0:	d056      	beq.n	cf90 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    cee2:	f500 7186 	add.w	r1, r0, #268	; 0x10c
    cee6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    ceea:	f018 f889 	bl	25000 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    ceee:	f1a4 0608 	sub.w	r6, r4, #8
    cef2:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    cef6:	2200      	movs	r2, #0
    cef8:	2300      	movs	r3, #0
    cefa:	4638      	mov	r0, r7
    cefc:	f019 fa05 	bl	2630a <net_buf_get>
    cf00:	4602      	mov	r2, r0
    cf02:	bb50      	cbnz	r0, cf5a <bt_att_disconnected+0x86>
	if (chan->req) {
    cf04:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    cf08:	b123      	cbz	r3, cf14 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    cf0a:	4601      	mov	r1, r0
    cf0c:	230e      	movs	r3, #14
    cf0e:	4630      	mov	r0, r6
    cf10:	f7ff ff6e 	bl	cdf0 <att_handle_rsp>
	chan->att = NULL;
    cf14:	2300      	movs	r3, #0
    cf16:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    cf1a:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    cf1c:	2b00      	cmp	r3, #0
    cf1e:	d137      	bne.n	cf90 <bt_att_disconnected+0xbc>
	att_reset(att);
    cf20:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    cf22:	9803      	ldr	r0, [sp, #12]
    cf24:	2200      	movs	r2, #0
    cf26:	2300      	movs	r3, #0
    cf28:	3024      	adds	r0, #36	; 0x24
    cf2a:	f019 f9ee 	bl	2630a <net_buf_get>
    cf2e:	b9b8      	cbnz	r0, cf60 <bt_att_disconnected+0x8c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    cf30:	9803      	ldr	r0, [sp, #12]
    cf32:	2200      	movs	r2, #0
    cf34:	2300      	movs	r3, #0
    cf36:	300c      	adds	r0, #12
    cf38:	f019 f9e7 	bl	2630a <net_buf_get>
    cf3c:	b998      	cbnz	r0, cf66 <bt_att_disconnected+0x92>
	att->conn = NULL;
    cf3e:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    cf40:	6855      	ldr	r5, [r2, #4]
    cf42:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    cf44:	b995      	cbnz	r5, cf6c <bt_att_disconnected+0x98>
	k_mem_slab_free(&att_slab, (void **)&att);
    cf46:	4813      	ldr	r0, [pc, #76]	; (cf94 <bt_att_disconnected+0xc0>)
    cf48:	a903      	add	r1, sp, #12
    cf4a:	f012 fd3b 	bl	1f9c4 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    cf4e:	6820      	ldr	r0, [r4, #0]
}
    cf50:	b005      	add	sp, #20
    cf52:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    cf56:	f001 ba4f 	b.w	e3f8 <bt_gatt_disconnected>
		net_buf_unref(buf);
    cf5a:	f010 faf5 	bl	1d548 <net_buf_unref>
    cf5e:	e7ca      	b.n	cef6 <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    cf60:	f010 faf2 	bl	1d548 <net_buf_unref>
    cf64:	e7dd      	b.n	cf22 <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
    cf66:	f010 faef 	bl	1d548 <net_buf_unref>
    cf6a:	e7e1      	b.n	cf30 <bt_att_disconnected+0x5c>
	return node->next;
    cf6c:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    cf6e:	686f      	ldr	r7, [r5, #4]
    cf70:	b137      	cbz	r7, cf80 <bt_att_disconnected+0xac>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    cf72:	69ab      	ldr	r3, [r5, #24]
    cf74:	9300      	str	r3, [sp, #0]
    cf76:	2300      	movs	r3, #0
    cf78:	461a      	mov	r2, r3
    cf7a:	210e      	movs	r1, #14
    cf7c:	4618      	mov	r0, r3
    cf7e:	47b8      	blx	r7
		bt_att_req_free(req);
    cf80:	4628      	mov	r0, r5
    cf82:	f7ff ff23 	bl	cdcc <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    cf86:	2e00      	cmp	r6, #0
    cf88:	d0dd      	beq.n	cf46 <bt_att_disconnected+0x72>
    cf8a:	4635      	mov	r5, r6
    cf8c:	6836      	ldr	r6, [r6, #0]
    cf8e:	e7ee      	b.n	cf6e <bt_att_disconnected+0x9a>
}
    cf90:	b005      	add	sp, #20
    cf92:	bdf0      	pop	{r4, r5, r6, r7, pc}
    cf94:	20009f44 	.word	0x20009f44

0000cf98 <att_timeout>:
    cf98:	4b08      	ldr	r3, [pc, #32]	; (cfbc <att_timeout+0x24>)
    cf9a:	4909      	ldr	r1, [pc, #36]	; (cfc0 <att_timeout+0x28>)
{
    cf9c:	b510      	push	{r4, lr}
    cf9e:	1ac9      	subs	r1, r1, r3
    cfa0:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    cfa2:	0189      	lsls	r1, r1, #6
{
    cfa4:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    cfa6:	f041 0101 	orr.w	r1, r1, #1
    cfaa:	4806      	ldr	r0, [pc, #24]	; (cfc4 <att_timeout+0x2c>)
    cfac:	f015 f99e 	bl	222ec <log_0>
	bt_att_disconnected(&chan->chan.chan);
    cfb0:	f1a4 00d8 	sub.w	r0, r4, #216	; 0xd8
}
    cfb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    cfb8:	f7ff bf8c 	b.w	ced4 <bt_att_disconnected>
    cfbc:	0002775c 	.word	0x0002775c
    cfc0:	0002775c 	.word	0x0002775c
    cfc4:	0002cd96 	.word	0x0002cd96

0000cfc8 <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    cfc8:	490a      	ldr	r1, [pc, #40]	; (cff4 <db_hash_store+0x2c>)
    cfca:	480b      	ldr	r0, [pc, #44]	; (cff8 <db_hash_store+0x30>)
{
    cfcc:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    cfce:	2210      	movs	r2, #16
    cfd0:	f7f9 fb9a 	bl	6708 <settings_save_one>
	if (err) {
    cfd4:	4601      	mov	r1, r0
    cfd6:	b158      	cbz	r0, cff0 <db_hash_store+0x28>
    cfd8:	4b08      	ldr	r3, [pc, #32]	; (cffc <db_hash_store+0x34>)
    cfda:	4a09      	ldr	r2, [pc, #36]	; (d000 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    cfdc:	4809      	ldr	r0, [pc, #36]	; (d004 <db_hash_store+0x3c>)
    cfde:	1ad2      	subs	r2, r2, r3
    cfe0:	08d2      	lsrs	r2, r2, #3
    cfe2:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    cfe4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    cfe8:	f042 0201 	orr.w	r2, r2, #1
    cfec:	f015 b98b 	b.w	22306 <log_1>
}
    cff0:	bd08      	pop	{r3, pc}
    cff2:	bf00      	nop
    cff4:	2000f2ec 	.word	0x2000f2ec
    cff8:	0002cda9 	.word	0x0002cda9
    cffc:	0002775c 	.word	0x0002775c
    d000:	0002780c 	.word	0x0002780c
    d004:	0002cdb1 	.word	0x0002cdb1

0000d008 <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    d008:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    d00a:	490b      	ldr	r1, [pc, #44]	; (d038 <db_hash_set+0x30>)
{
    d00c:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    d00e:	4618      	mov	r0, r3
    d010:	2210      	movs	r2, #16
    d012:	47a0      	blx	r4
	if (len < 0) {
    d014:	1e04      	subs	r4, r0, #0
    d016:	da0c      	bge.n	d032 <db_hash_set+0x2a>
    d018:	4a08      	ldr	r2, [pc, #32]	; (d03c <db_hash_set+0x34>)
    d01a:	4b09      	ldr	r3, [pc, #36]	; (d040 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    d01c:	4809      	ldr	r0, [pc, #36]	; (d044 <db_hash_set+0x3c>)
    d01e:	1ad2      	subs	r2, r2, r3
    d020:	08d2      	lsrs	r2, r2, #3
    d022:	0192      	lsls	r2, r2, #6
    d024:	f042 0201 	orr.w	r2, r2, #1
    d028:	4621      	mov	r1, r4
    d02a:	f015 f96c 	bl	22306 <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    d02e:	4620      	mov	r0, r4
    d030:	bd10      	pop	{r4, pc}
	return 0;
    d032:	2400      	movs	r4, #0
    d034:	e7fb      	b.n	d02e <db_hash_set+0x26>
    d036:	bf00      	nop
    d038:	2000f2fc 	.word	0x2000f2fc
    d03c:	0002780c 	.word	0x0002780c
    d040:	0002775c 	.word	0x0002775c
    d044:	0002cdd7 	.word	0x0002cdd7

0000d048 <find_cf_cfg>:
{
    d048:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d04a:	4d0f      	ldr	r5, [pc, #60]	; (d088 <find_cf_cfg+0x40>)
    d04c:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d04e:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    d050:	462e      	mov	r6, r5
		if (!conn) {
    d052:	1c68      	adds	r0, r5, #1
    d054:	b964      	cbnz	r4, d070 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
    d056:	2207      	movs	r2, #7
    d058:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d05a:	9400      	str	r4, [sp, #0]
    d05c:	f8cd 4003 	str.w	r4, [sp, #3]
    d060:	f017 f93f 	bl	242e2 <memcmp>
    d064:	b958      	cbnz	r0, d07e <find_cf_cfg+0x36>
}
    d066:	4630      	mov	r0, r6
    d068:	b003      	add	sp, #12
    d06a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d06c:	2701      	movs	r7, #1
    d06e:	e7ef      	b.n	d050 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d070:	4602      	mov	r2, r0
    d072:	7829      	ldrb	r1, [r5, #0]
    d074:	4620      	mov	r0, r4
    d076:	f017 fd42 	bl	24afe <bt_conn_is_peer_addr_le>
    d07a:	2800      	cmp	r0, #0
    d07c:	d1f3      	bne.n	d066 <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d07e:	3510      	adds	r5, #16
    d080:	2f00      	cmp	r7, #0
    d082:	d0f3      	beq.n	d06c <find_cf_cfg+0x24>
	return NULL;
    d084:	2600      	movs	r6, #0
    d086:	e7ee      	b.n	d066 <find_cf_cfg+0x1e>
    d088:	2000d790 	.word	0x2000d790

0000d08c <cf_write>:
{
    d08c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d090:	461f      	mov	r7, r3
    d092:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	if (offset > sizeof(cfg->data)) {
    d096:	2b01      	cmp	r3, #1
{
    d098:	4680      	mov	r8, r0
    d09a:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    d09c:	d84b      	bhi.n	d136 <cf_write+0xaa>
	if (offset + len > sizeof(cfg->data)) {
    d09e:	443b      	add	r3, r7
    d0a0:	2b01      	cmp	r3, #1
    d0a2:	463d      	mov	r5, r7
    d0a4:	dc4a      	bgt.n	d13c <cf_write+0xb0>
	cfg = find_cf_cfg(conn);
    d0a6:	f7ff ffcf 	bl	d048 <find_cf_cfg>
	if (!cfg) {
    d0aa:	4604      	mov	r4, r0
    d0ac:	b918      	cbnz	r0, d0b6 <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    d0ae:	f7ff ffcb 	bl	d048 <find_cf_cfg>
	if (!cfg) {
    d0b2:	4604      	mov	r4, r0
    d0b4:	b1d8      	cbz	r0, d0ee <cf_write+0x62>
    d0b6:	4632      	mov	r2, r6
    d0b8:	f104 0008 	add.w	r0, r4, #8
    d0bc:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    d0c0:	4596      	cmp	lr, r2
    d0c2:	d123      	bne.n	d10c <cf_write+0x80>
	for (i = 0U; i < len && i < last_byte; i++) {
    d0c4:	b12f      	cbz	r7, d0d2 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    d0c6:	7833      	ldrb	r3, [r6, #0]
    d0c8:	7a22      	ldrb	r2, [r4, #8]
    d0ca:	f003 0307 	and.w	r3, r3, #7
    d0ce:	4313      	orrs	r3, r2
    d0d0:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d0d2:	f108 0188 	add.w	r1, r8, #136	; 0x88
    d0d6:	1c60      	adds	r0, r4, #1
    d0d8:	f018 fa94 	bl	25604 <bt_addr_le_copy>
	cfg->id = conn->id;
    d0dc:	4620      	mov	r0, r4
    d0de:	f898 3008 	ldrb.w	r3, [r8, #8]
    d0e2:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d0e6:	2101      	movs	r1, #1
    d0e8:	f018 fb13 	bl	25712 <atomic_or>
}
    d0ec:	e00b      	b.n	d106 <cf_write+0x7a>
    d0ee:	4b16      	ldr	r3, [pc, #88]	; (d148 <cf_write+0xbc>)
    d0f0:	4916      	ldr	r1, [pc, #88]	; (d14c <cf_write+0xc0>)
		BT_WARN("No space to store Client Supported Features");
    d0f2:	4817      	ldr	r0, [pc, #92]	; (d150 <cf_write+0xc4>)
    d0f4:	1ac9      	subs	r1, r1, r3
    d0f6:	08c9      	lsrs	r1, r1, #3
    d0f8:	0189      	lsls	r1, r1, #6
    d0fa:	f041 0102 	orr.w	r1, r1, #2
    d0fe:	f015 f8f5 	bl	222ec <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d102:	f06f 0510 	mvn.w	r5, #16
}
    d106:	4628      	mov	r0, r5
    d108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    d10c:	f812 1b01 	ldrb.w	r1, [r2], #1
    d110:	f810 cb01 	ldrb.w	ip, [r0], #1
    d114:	2300      	movs	r3, #0
    d116:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
    d11a:	fa21 f903 	lsr.w	r9, r1, r3
    d11e:	f019 0f01 	tst.w	r9, #1
    d122:	d004      	beq.n	d12e <cf_write+0xa2>
    d124:	fa2c f903 	lsr.w	r9, ip, r3
    d128:	f019 0f01 	tst.w	r9, #1
    d12c:	d109      	bne.n	d142 <cf_write+0xb6>
		for (bit = 0U; bit <= last_bit; bit++) {
    d12e:	3301      	adds	r3, #1
    d130:	2b03      	cmp	r3, #3
    d132:	d1f2      	bne.n	d11a <cf_write+0x8e>
    d134:	e7c4      	b.n	d0c0 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d136:	f06f 0506 	mvn.w	r5, #6
    d13a:	e7e4      	b.n	d106 <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d13c:	f06f 050c 	mvn.w	r5, #12
    d140:	e7e1      	b.n	d106 <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    d142:	f06f 0512 	mvn.w	r5, #18
    d146:	e7de      	b.n	d106 <cf_write+0x7a>
    d148:	0002775c 	.word	0x0002775c
    d14c:	0002780c 	.word	0x0002780c
    d150:	0002cdf8 	.word	0x0002cdf8

0000d154 <sc_store>:
{
    d154:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    d156:	4605      	mov	r5, r0
{
    d158:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    d15a:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    d15e:	4604      	mov	r4, r0
	if (cfg->id) {
    d160:	b1fa      	cbz	r2, d1a2 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    d162:	ae02      	add	r6, sp, #8
    d164:	2104      	movs	r1, #4
    d166:	4630      	mov	r0, r6
    d168:	f014 fb77 	bl	2185a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    d16c:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    d16e:	4a0e      	ldr	r2, [pc, #56]	; (d1a8 <sc_store+0x54>)
    d170:	462b      	mov	r3, r5
    d172:	2124      	movs	r1, #36	; 0x24
    d174:	a803      	add	r0, sp, #12
    d176:	f7fb fa05 	bl	8584 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    d17a:	f104 0108 	add.w	r1, r4, #8
    d17e:	2204      	movs	r2, #4
    d180:	a803      	add	r0, sp, #12
    d182:	f7f9 fac1 	bl	6708 <settings_save_one>
	if (err) {
    d186:	4601      	mov	r1, r0
    d188:	b148      	cbz	r0, d19e <sc_store+0x4a>
    d18a:	4a08      	ldr	r2, [pc, #32]	; (d1ac <sc_store+0x58>)
    d18c:	4b08      	ldr	r3, [pc, #32]	; (d1b0 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    d18e:	4809      	ldr	r0, [pc, #36]	; (d1b4 <sc_store+0x60>)
    d190:	1ad2      	subs	r2, r2, r3
    d192:	08d2      	lsrs	r2, r2, #3
    d194:	0192      	lsls	r2, r2, #6
    d196:	f042 0201 	orr.w	r2, r2, #1
    d19a:	f015 f8b4 	bl	22306 <log_1>
}
    d19e:	b00c      	add	sp, #48	; 0x30
    d1a0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    d1a2:	9200      	str	r2, [sp, #0]
    d1a4:	e7e3      	b.n	d16e <sc_store+0x1a>
    d1a6:	bf00      	nop
    d1a8:	0002d022 	.word	0x0002d022
    d1ac:	0002780c 	.word	0x0002780c
    d1b0:	0002775c 	.word	0x0002775c
    d1b4:	0002ce24 	.word	0x0002ce24

0000d1b8 <gatt_indicate>:
{
    d1b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d1bc:	4680      	mov	r8, r0
    d1be:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d1c0:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d1c4:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    d1c6:	8a96      	ldrh	r6, [r2, #20]
{
    d1c8:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d1ca:	f7ff fde9 	bl	cda0 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    d1ce:	3602      	adds	r6, #2
	if (!req) {
    d1d0:	4604      	mov	r4, r0
    d1d2:	b920      	cbnz	r0, d1de <gatt_indicate+0x26>
		return -ENOMEM;
    d1d4:	f06f 050b 	mvn.w	r5, #11
}
    d1d8:	4628      	mov	r0, r5
    d1da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    d1de:	2300      	movs	r3, #0
    d1e0:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    d1e2:	211d      	movs	r1, #29
	req->func = func;
    d1e4:	4b1b      	ldr	r3, [pc, #108]	; (d254 <gatt_indicate+0x9c>)
	req->len = len;
    d1e6:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    d1e8:	7441      	strb	r1, [r0, #17]
	req->func = func;
    d1ea:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    d1ec:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    d1ee:	4632      	mov	r2, r6
    d1f0:	4640      	mov	r0, r8
    d1f2:	f7ff fb21 	bl	c838 <bt_att_create_pdu>
	if (!buf) {
    d1f6:	4606      	mov	r6, r0
    d1f8:	b968      	cbnz	r0, d216 <gatt_indicate+0x5e>
    d1fa:	4b17      	ldr	r3, [pc, #92]	; (d258 <gatt_indicate+0xa0>)
    d1fc:	4917      	ldr	r1, [pc, #92]	; (d25c <gatt_indicate+0xa4>)
		BT_WARN("No buffer available to send indication");
    d1fe:	4818      	ldr	r0, [pc, #96]	; (d260 <gatt_indicate+0xa8>)
    d200:	1ac9      	subs	r1, r1, r3
    d202:	08c9      	lsrs	r1, r1, #3
    d204:	0189      	lsls	r1, r1, #6
    d206:	f041 0102 	orr.w	r1, r1, #2
    d20a:	f015 f86f 	bl	222ec <log_0>
		bt_att_req_free(req);
    d20e:	4620      	mov	r0, r4
    d210:	f7ff fddc 	bl	cdcc <bt_att_req_free>
    d214:	e7de      	b.n	d1d4 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    d216:	f100 0a08 	add.w	sl, r0, #8
    d21a:	2102      	movs	r1, #2
    d21c:	4650      	mov	r0, sl
    d21e:	f019 f8c5 	bl	263ac <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d222:	4607      	mov	r7, r0
    d224:	8aa9      	ldrh	r1, [r5, #20]
    d226:	f827 9b02 	strh.w	r9, [r7], #2
    d22a:	4650      	mov	r0, sl
    d22c:	f019 f8be 	bl	263ac <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d230:	8aaa      	ldrh	r2, [r5, #20]
    d232:	6929      	ldr	r1, [r5, #16]
    d234:	4638      	mov	r0, r7
    d236:	f017 f865 	bl	24304 <memcpy>
	req->buf = buf;
    d23a:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    d23c:	4621      	mov	r1, r4
    d23e:	4640      	mov	r0, r8
    d240:	f018 f98b 	bl	2555a <bt_att_req_send>
	if (err) {
    d244:	4605      	mov	r5, r0
    d246:	2800      	cmp	r0, #0
    d248:	d0c6      	beq.n	d1d8 <gatt_indicate+0x20>
		bt_att_req_free(req);
    d24a:	4620      	mov	r0, r4
    d24c:	f7ff fdbe 	bl	cdcc <bt_att_req_free>
    d250:	e7c2      	b.n	d1d8 <gatt_indicate+0x20>
    d252:	bf00      	nop
    d254:	000255d3 	.word	0x000255d3
    d258:	0002775c 	.word	0x0002775c
    d25c:	0002780c 	.word	0x0002780c
    d260:	0002ce40 	.word	0x0002ce40

0000d264 <gatt_notify>:
{
    d264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d268:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    d26a:	8992      	ldrh	r2, [r2, #12]
{
    d26c:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d26e:	3202      	adds	r2, #2
    d270:	211b      	movs	r1, #27
{
    d272:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d274:	f7ff fae0 	bl	c838 <bt_att_create_pdu>
	if (!buf) {
    d278:	4605      	mov	r5, r0
    d27a:	b1c8      	cbz	r0, d2b0 <gatt_notify+0x4c>
    d27c:	f100 0908 	add.w	r9, r0, #8
    d280:	2102      	movs	r1, #2
    d282:	4648      	mov	r0, r9
    d284:	f019 f892 	bl	263ac <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    d288:	4606      	mov	r6, r0
    d28a:	89a1      	ldrh	r1, [r4, #12]
    d28c:	f826 8b02 	strh.w	r8, [r6], #2
    d290:	4648      	mov	r0, r9
    d292:	f019 f88b 	bl	263ac <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    d296:	89a2      	ldrh	r2, [r4, #12]
    d298:	68a1      	ldr	r1, [r4, #8]
    d29a:	4630      	mov	r0, r6
    d29c:	f017 f832 	bl	24304 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    d2a0:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    d2a4:	4629      	mov	r1, r5
    d2a6:	4638      	mov	r0, r7
}
    d2a8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    d2ac:	f018 b90b 	b.w	254c6 <bt_att_send>
    d2b0:	4b06      	ldr	r3, [pc, #24]	; (d2cc <gatt_notify+0x68>)
    d2b2:	4907      	ldr	r1, [pc, #28]	; (d2d0 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    d2b4:	4807      	ldr	r0, [pc, #28]	; (d2d4 <gatt_notify+0x70>)
    d2b6:	1ac9      	subs	r1, r1, r3
    d2b8:	08c9      	lsrs	r1, r1, #3
    d2ba:	0189      	lsls	r1, r1, #6
    d2bc:	f041 0102 	orr.w	r1, r1, #2
    d2c0:	f015 f814 	bl	222ec <log_0>
}
    d2c4:	f06f 000b 	mvn.w	r0, #11
    d2c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d2cc:	0002775c 	.word	0x0002775c
    d2d0:	0002780c 	.word	0x0002780c
    d2d4:	0002ce67 	.word	0x0002ce67

0000d2d8 <find_cf_cfg_by_addr>:
{
    d2d8:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    d2da:	4c0e      	ldr	r4, [pc, #56]	; (d314 <find_cf_cfg_by_addr+0x3c>)
    d2dc:	7823      	ldrb	r3, [r4, #0]
    d2de:	4283      	cmp	r3, r0
{
    d2e0:	4606      	mov	r6, r0
    d2e2:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    d2e4:	d00a      	beq.n	d2fc <find_cf_cfg_by_addr+0x24>
    d2e6:	7c23      	ldrb	r3, [r4, #16]
    d2e8:	42b3      	cmp	r3, r6
    d2ea:	d111      	bne.n	d310 <find_cf_cfg_by_addr+0x38>
    d2ec:	490a      	ldr	r1, [pc, #40]	; (d318 <find_cf_cfg_by_addr+0x40>)
    d2ee:	2207      	movs	r2, #7
    d2f0:	4628      	mov	r0, r5
    d2f2:	f016 fff6 	bl	242e2 <memcmp>
    d2f6:	b958      	cbnz	r0, d310 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d2f8:	2001      	movs	r0, #1
    d2fa:	e006      	b.n	d30a <find_cf_cfg_by_addr+0x32>
    d2fc:	2207      	movs	r2, #7
    d2fe:	1c61      	adds	r1, r4, #1
    d300:	4628      	mov	r0, r5
    d302:	f016 ffee 	bl	242e2 <memcmp>
			if (id == cf_cfg[i].id &&
    d306:	2800      	cmp	r0, #0
    d308:	d1ed      	bne.n	d2e6 <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    d30a:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    d30e:	e000      	b.n	d312 <find_cf_cfg_by_addr+0x3a>
	return NULL;
    d310:	2000      	movs	r0, #0
}
    d312:	bd70      	pop	{r4, r5, r6, pc}
    d314:	2000d790 	.word	0x2000d790
    d318:	2000d7a1 	.word	0x2000d7a1

0000d31c <cf_set>:
{
    d31c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d320:	4689      	mov	r9, r1
    d322:	b085      	sub	sp, #20
    d324:	4617      	mov	r7, r2
    d326:	4698      	mov	r8, r3
	if (!name) {
    d328:	4605      	mov	r5, r0
    d32a:	b978      	cbnz	r0, d34c <cf_set+0x30>
    d32c:	4934      	ldr	r1, [pc, #208]	; (d400 <cf_set+0xe4>)
    d32e:	4b35      	ldr	r3, [pc, #212]	; (d404 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
    d330:	4835      	ldr	r0, [pc, #212]	; (d408 <cf_set+0xec>)
    d332:	1ac9      	subs	r1, r1, r3
    d334:	08c9      	lsrs	r1, r1, #3
    d336:	0189      	lsls	r1, r1, #6
    d338:	f041 0101 	orr.w	r1, r1, #1
    d33c:	f014 ffd6 	bl	222ec <log_0>
		return -EINVAL;
    d340:	f06f 0415 	mvn.w	r4, #21
}
    d344:	4620      	mov	r0, r4
    d346:	b005      	add	sp, #20
    d348:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    d34c:	a902      	add	r1, sp, #8
    d34e:	f017 f8d5 	bl	244fc <bt_settings_decode_key>
	if (err) {
    d352:	4604      	mov	r4, r0
    d354:	b178      	cbz	r0, d376 <cf_set+0x5a>
    d356:	4a2b      	ldr	r2, [pc, #172]	; (d404 <cf_set+0xe8>)
    d358:	4c29      	ldr	r4, [pc, #164]	; (d400 <cf_set+0xe4>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    d35a:	4628      	mov	r0, r5
    d35c:	1aa4      	subs	r4, r4, r2
    d35e:	08e4      	lsrs	r4, r4, #3
    d360:	f7f8 f8ce 	bl	5500 <log_strdup>
    d364:	01a4      	lsls	r4, r4, #6
    d366:	f044 0401 	orr.w	r4, r4, #1
    d36a:	4601      	mov	r1, r0
    d36c:	4622      	mov	r2, r4
    d36e:	4827      	ldr	r0, [pc, #156]	; (d40c <cf_set+0xf0>)
    d370:	f014 ffc9 	bl	22306 <log_1>
    d374:	e7e4      	b.n	d340 <cf_set+0x24>
	settings_name_next(name, &next);
    d376:	a901      	add	r1, sp, #4
    d378:	4628      	mov	r0, r5
    d37a:	f015 fc6c 	bl	22c56 <settings_name_next>
	if (!next) {
    d37e:	9801      	ldr	r0, [sp, #4]
    d380:	b1d8      	cbz	r0, d3ba <cf_set+0x9e>
		id = strtol(next, NULL, 10);
    d382:	220a      	movs	r2, #10
    d384:	4621      	mov	r1, r4
    d386:	f016 feef 	bl	24168 <strtol>
    d38a:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    d38c:	a902      	add	r1, sp, #8
    d38e:	4630      	mov	r0, r6
    d390:	f7ff ffa2 	bl	d2d8 <find_cf_cfg_by_addr>
	if (!cfg) {
    d394:	4605      	mov	r5, r0
    d396:	b9b8      	cbnz	r0, d3c8 <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
    d398:	f7ff fe56 	bl	d048 <find_cf_cfg>
		if (!cfg) {
    d39c:	4605      	mov	r5, r0
    d39e:	b970      	cbnz	r0, d3be <cf_set+0xa2>
    d3a0:	4b18      	ldr	r3, [pc, #96]	; (d404 <cf_set+0xe8>)
    d3a2:	4917      	ldr	r1, [pc, #92]	; (d400 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
    d3a4:	481a      	ldr	r0, [pc, #104]	; (d410 <cf_set+0xf4>)
    d3a6:	1ac9      	subs	r1, r1, r3
    d3a8:	08c9      	lsrs	r1, r1, #3
    d3aa:	0189      	lsls	r1, r1, #6
    d3ac:	f041 0101 	orr.w	r1, r1, #1
    d3b0:	f014 ff9c 	bl	222ec <log_0>
			return -ENOMEM;
    d3b4:	f06f 040b 	mvn.w	r4, #11
    d3b8:	e7c4      	b.n	d344 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    d3ba:	4626      	mov	r6, r4
    d3bc:	e7e6      	b.n	d38c <cf_set+0x70>
		cfg->id = id;
    d3be:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    d3c2:	a902      	add	r1, sp, #8
    d3c4:	f018 f91e 	bl	25604 <bt_addr_le_copy>
	if (len_rd) {
    d3c8:	f1b9 0f00 	cmp.w	r9, #0
    d3cc:	d013      	beq.n	d3f6 <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    d3ce:	f105 0108 	add.w	r1, r5, #8
    d3d2:	2201      	movs	r2, #1
    d3d4:	4640      	mov	r0, r8
    d3d6:	47b8      	blx	r7
		if (len < 0) {
    d3d8:	1e05      	subs	r5, r0, #0
    d3da:	dab3      	bge.n	d344 <cf_set+0x28>
    d3dc:	4b09      	ldr	r3, [pc, #36]	; (d404 <cf_set+0xe8>)
    d3de:	4a08      	ldr	r2, [pc, #32]	; (d400 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
    d3e0:	480c      	ldr	r0, [pc, #48]	; (d414 <cf_set+0xf8>)
    d3e2:	1ad2      	subs	r2, r2, r3
    d3e4:	08d2      	lsrs	r2, r2, #3
    d3e6:	0192      	lsls	r2, r2, #6
    d3e8:	f042 0201 	orr.w	r2, r2, #1
    d3ec:	4629      	mov	r1, r5
    d3ee:	f014 ff8a 	bl	22306 <log_1>
			return len;
    d3f2:	462c      	mov	r4, r5
    d3f4:	e7a6      	b.n	d344 <cf_set+0x28>
		clear_cf_cfg(cfg);
    d3f6:	4628      	mov	r0, r5
    d3f8:	f018 f99a 	bl	25730 <clear_cf_cfg>
    d3fc:	e7a2      	b.n	d344 <cf_set+0x28>
    d3fe:	bf00      	nop
    d400:	0002780c 	.word	0x0002780c
    d404:	0002775c 	.word	0x0002775c
    d408:	0002bc92 	.word	0x0002bc92
    d40c:	0002ce90 	.word	0x0002ce90
    d410:	0002ceac 	.word	0x0002ceac
    d414:	0002cdd7 	.word	0x0002cdd7

0000d418 <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    d418:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    d41a:	6881      	ldr	r1, [r0, #8]
{
    d41c:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d41e:	4a07      	ldr	r2, [pc, #28]	; (d43c <remove_peer_from_attr+0x24>)
    d420:	4291      	cmp	r1, r2
    d422:	d109      	bne.n	d438 <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    d424:	791a      	ldrb	r2, [r3, #4]
    d426:	6819      	ldr	r1, [r3, #0]
    d428:	68c0      	ldr	r0, [r0, #12]
    d42a:	f018 fa53 	bl	258d4 <ccc_find_cfg>
	if (cfg) {
    d42e:	b118      	cbz	r0, d438 <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    d430:	220a      	movs	r2, #10
    d432:	2100      	movs	r1, #0
    d434:	f016 ff91 	bl	2435a <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    d438:	2001      	movs	r0, #1
    d43a:	bd08      	pop	{r3, pc}
    d43c:	0000d505 	.word	0x0000d505

0000d440 <ccc_save>:
{
    d440:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d442:	4b0c      	ldr	r3, [pc, #48]	; (d474 <ccc_save+0x34>)
{
    d444:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d446:	6882      	ldr	r2, [r0, #8]
    d448:	429a      	cmp	r2, r3
{
    d44a:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    d44c:	d10f      	bne.n	d46e <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    d44e:	7922      	ldrb	r2, [r4, #4]
    d450:	6821      	ldr	r1, [r4, #0]
    d452:	68c0      	ldr	r0, [r0, #12]
    d454:	f018 fa3e 	bl	258d4 <ccc_find_cfg>
	if (!cfg) {
    d458:	b148      	cbz	r0, d46e <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    d45a:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    d45e:	8901      	ldrh	r1, [r0, #8]
    d460:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    d464:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    d466:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    d468:	8151      	strh	r1, [r2, #10]
	save->count++;
    d46a:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    d46e:	2001      	movs	r0, #1
    d470:	bd38      	pop	{r3, r4, r5, pc}
    d472:	bf00      	nop
    d474:	0000d505 	.word	0x0000d505

0000d478 <ccc_load>:
{
    d478:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d47a:	4b21      	ldr	r3, [pc, #132]	; (d500 <ccc_load+0x88>)
{
    d47c:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d47e:	6882      	ldr	r2, [r0, #8]
    d480:	429a      	cmp	r2, r3
    d482:	d002      	beq.n	d48a <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    d484:	2001      	movs	r0, #1
}
    d486:	b002      	add	sp, #8
    d488:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    d48a:	68a3      	ldr	r3, [r4, #8]
    d48c:	68c6      	ldr	r6, [r0, #12]
    d48e:	b94b      	cbnz	r3, d4a4 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    d490:	7922      	ldrb	r2, [r4, #4]
    d492:	6821      	ldr	r1, [r4, #0]
    d494:	4630      	mov	r0, r6
    d496:	f018 fa1d 	bl	258d4 <ccc_find_cfg>
	if (!cfg) {
    d49a:	2800      	cmp	r0, #0
    d49c:	d0f2      	beq.n	d484 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    d49e:	f018 f8b4 	bl	2560a <clear_ccc_cfg>
    d4a2:	e7ef      	b.n	d484 <ccc_load+0xc>
	} else if (!load->count) {
    d4a4:	68e0      	ldr	r0, [r4, #12]
    d4a6:	2800      	cmp	r0, #0
    d4a8:	d0ed      	beq.n	d486 <ccc_load+0xe>
	if (load->entry->handle != handle) {
    d4aa:	881b      	ldrh	r3, [r3, #0]
    d4ac:	4299      	cmp	r1, r3
    d4ae:	d00a      	beq.n	d4c6 <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    d4b0:	d9e8      	bls.n	d484 <ccc_load+0xc>
	load->count--;
    d4b2:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    d4b4:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    d4b6:	3801      	subs	r0, #1
	load->entry++;
    d4b8:	3304      	adds	r3, #4
	load->count--;
    d4ba:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    d4bc:	3800      	subs	r0, #0
	load->entry++;
    d4be:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    d4c0:	bf18      	it	ne
    d4c2:	2001      	movne	r0, #1
    d4c4:	e7df      	b.n	d486 <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    d4c6:	7922      	ldrb	r2, [r4, #4]
    d4c8:	6821      	ldr	r1, [r4, #0]
    d4ca:	4630      	mov	r0, r6
    d4cc:	f018 fa02 	bl	258d4 <ccc_find_cfg>
	if (!cfg) {
    d4d0:	4605      	mov	r5, r0
    d4d2:	b980      	cbnz	r0, d4f6 <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    d4d4:	9000      	str	r0, [sp, #0]
    d4d6:	4602      	mov	r2, r0
    d4d8:	f8cd 0003 	str.w	r0, [sp, #3]
    d4dc:	4669      	mov	r1, sp
    d4de:	4630      	mov	r0, r6
    d4e0:	f018 f9f8 	bl	258d4 <ccc_find_cfg>
		if (!cfg) {
    d4e4:	4605      	mov	r5, r0
    d4e6:	2800      	cmp	r0, #0
    d4e8:	d0e3      	beq.n	d4b2 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    d4ea:	6821      	ldr	r1, [r4, #0]
    d4ec:	3001      	adds	r0, #1
    d4ee:	f018 f889 	bl	25604 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    d4f2:	7923      	ldrb	r3, [r4, #4]
    d4f4:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    d4f6:	68a3      	ldr	r3, [r4, #8]
    d4f8:	885b      	ldrh	r3, [r3, #2]
    d4fa:	812b      	strh	r3, [r5, #8]
    d4fc:	e7d9      	b.n	d4b2 <ccc_load+0x3a>
    d4fe:	bf00      	nop
    d500:	0000d505 	.word	0x0000d505

0000d504 <bt_gatt_attr_write_ccc>:
{
    d504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d508:	461f      	mov	r7, r3
    d50a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d50e:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    d512:	4604      	mov	r4, r0
    d514:	4688      	mov	r8, r1
	if (offset) {
    d516:	2b00      	cmp	r3, #0
    d518:	d147      	bne.n	d5aa <bt_gatt_attr_write_ccc+0xa6>
	if (!len || len > sizeof(uint16_t)) {
    d51a:	1e7b      	subs	r3, r7, #1
    d51c:	2b01      	cmp	r3, #1
    d51e:	d847      	bhi.n	d5b0 <bt_gatt_attr_write_ccc+0xac>
		value = *(uint8_t *)buf;
    d520:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
    d522:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    d524:	4649      	mov	r1, r9
    d526:	bf14      	ite	ne
    d528:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
    d52a:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
    d52c:	f018 f9e1 	bl	258f2 <find_ccc_cfg>
	if (!cfg) {
    d530:	4605      	mov	r5, r0
    d532:	b9e0      	cbnz	r0, d56e <bt_gatt_attr_write_ccc+0x6a>
		if (!value) {
    d534:	b916      	cbnz	r6, d53c <bt_gatt_attr_write_ccc+0x38>
			return len;
    d536:	4638      	mov	r0, r7
}
    d538:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    d53c:	4649      	mov	r1, r9
    d53e:	f018 f9d8 	bl	258f2 <find_ccc_cfg>
		if (!cfg) {
    d542:	4605      	mov	r5, r0
    d544:	b960      	cbnz	r0, d560 <bt_gatt_attr_write_ccc+0x5c>
    d546:	4b1c      	ldr	r3, [pc, #112]	; (d5b8 <bt_gatt_attr_write_ccc+0xb4>)
    d548:	491c      	ldr	r1, [pc, #112]	; (d5bc <bt_gatt_attr_write_ccc+0xb8>)
			BT_WARN("No space to store CCC cfg");
    d54a:	481d      	ldr	r0, [pc, #116]	; (d5c0 <bt_gatt_attr_write_ccc+0xbc>)
    d54c:	1ac9      	subs	r1, r1, r3
    d54e:	08c9      	lsrs	r1, r1, #3
    d550:	0189      	lsls	r1, r1, #6
    d552:	f041 0102 	orr.w	r1, r1, #2
    d556:	f014 fec9 	bl	222ec <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d55a:	f06f 0010 	mvn.w	r0, #16
    d55e:	e7eb      	b.n	d538 <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d560:	f104 0188 	add.w	r1, r4, #136	; 0x88
    d564:	3001      	adds	r0, #1
    d566:	f018 f84d 	bl	25604 <bt_addr_le_copy>
		cfg->id = conn->id;
    d56a:	7a23      	ldrb	r3, [r4, #8]
    d56c:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    d56e:	f8d9 3010 	ldr.w	r3, [r9, #16]
    d572:	b973      	cbnz	r3, d592 <bt_gatt_attr_write_ccc+0x8e>
	if (cfg->value != ccc->value) {
    d574:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    d578:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
    d57a:	42b3      	cmp	r3, r6
    d57c:	d003      	beq.n	d586 <bt_gatt_attr_write_ccc+0x82>
		gatt_ccc_changed(attr, ccc);
    d57e:	4649      	mov	r1, r9
    d580:	4640      	mov	r0, r8
    d582:	f018 f81c 	bl	255be <gatt_ccc_changed>
	if (!value) {
    d586:	2e00      	cmp	r6, #0
    d588:	d1d5      	bne.n	d536 <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
    d58a:	4628      	mov	r0, r5
    d58c:	f018 f83d 	bl	2560a <clear_ccc_cfg>
    d590:	e7d1      	b.n	d536 <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    d592:	4632      	mov	r2, r6
    d594:	4641      	mov	r1, r8
    d596:	4620      	mov	r0, r4
    d598:	4798      	blx	r3
		if (write < 0) {
    d59a:	2800      	cmp	r0, #0
    d59c:	dbcc      	blt.n	d538 <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    d59e:	1e44      	subs	r4, r0, #1
    d5a0:	2c01      	cmp	r4, #1
    d5a2:	d9e7      	bls.n	d574 <bt_gatt_attr_write_ccc+0x70>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    d5a4:	f06f 000d 	mvn.w	r0, #13
    d5a8:	e7c6      	b.n	d538 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d5aa:	f06f 0006 	mvn.w	r0, #6
    d5ae:	e7c3      	b.n	d538 <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d5b0:	f06f 000c 	mvn.w	r0, #12
    d5b4:	e7c0      	b.n	d538 <bt_gatt_attr_write_ccc+0x34>
    d5b6:	bf00      	nop
    d5b8:	0002775c 	.word	0x0002775c
    d5bc:	0002780c 	.word	0x0002780c
    d5c0:	0002cece 	.word	0x0002cece

0000d5c4 <find_sc_cfg>:
{
    d5c4:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    d5c6:	4c0e      	ldr	r4, [pc, #56]	; (d600 <find_sc_cfg+0x3c>)
    d5c8:	7823      	ldrb	r3, [r4, #0]
    d5ca:	4283      	cmp	r3, r0
{
    d5cc:	4605      	mov	r5, r0
    d5ce:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    d5d0:	d00a      	beq.n	d5e8 <find_sc_cfg+0x24>
    d5d2:	7b23      	ldrb	r3, [r4, #12]
    d5d4:	42ab      	cmp	r3, r5
    d5d6:	d111      	bne.n	d5fc <find_sc_cfg+0x38>
    d5d8:	480a      	ldr	r0, [pc, #40]	; (d604 <find_sc_cfg+0x40>)
    d5da:	2207      	movs	r2, #7
    d5dc:	4631      	mov	r1, r6
    d5de:	f016 fe80 	bl	242e2 <memcmp>
    d5e2:	b958      	cbnz	r0, d5fc <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d5e4:	2001      	movs	r0, #1
    d5e6:	e005      	b.n	d5f4 <find_sc_cfg+0x30>
    d5e8:	2207      	movs	r2, #7
    d5ea:	1c60      	adds	r0, r4, #1
    d5ec:	f016 fe79 	bl	242e2 <memcmp>
		if (id == sc_cfg[i].id &&
    d5f0:	2800      	cmp	r0, #0
    d5f2:	d1ee      	bne.n	d5d2 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    d5f4:	230c      	movs	r3, #12
    d5f6:	fb03 4000 	mla	r0, r3, r0, r4
    d5fa:	e000      	b.n	d5fe <find_sc_cfg+0x3a>
	return NULL;
    d5fc:	2000      	movs	r0, #0
}
    d5fe:	bd70      	pop	{r4, r5, r6, pc}
    d600:	2000ed54 	.word	0x2000ed54
    d604:	2000ed61 	.word	0x2000ed61

0000d608 <sc_save>:
{
    d608:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d60c:	4680      	mov	r8, r0
    d60e:	460f      	mov	r7, r1
    d610:	4616      	mov	r6, r2
    d612:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    d614:	f7ff ffd6 	bl	d5c4 <find_sc_cfg>
	if (!cfg) {
    d618:	4604      	mov	r4, r0
    d61a:	b9c8      	cbnz	r0, d650 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d61c:	4669      	mov	r1, sp
    d61e:	9000      	str	r0, [sp, #0]
    d620:	f8cd 0003 	str.w	r0, [sp, #3]
    d624:	f7ff ffce 	bl	d5c4 <find_sc_cfg>
		if (!cfg) {
    d628:	4604      	mov	r4, r0
    d62a:	b960      	cbnz	r0, d646 <sc_save+0x3e>
    d62c:	4916      	ldr	r1, [pc, #88]	; (d688 <sc_save+0x80>)
    d62e:	4b17      	ldr	r3, [pc, #92]	; (d68c <sc_save+0x84>)
			BT_ERR("unable to save SC: no cfg left");
    d630:	4817      	ldr	r0, [pc, #92]	; (d690 <sc_save+0x88>)
    d632:	1ac9      	subs	r1, r1, r3
    d634:	08c9      	lsrs	r1, r1, #3
    d636:	0189      	lsls	r1, r1, #6
    d638:	f041 0101 	orr.w	r1, r1, #1
    d63c:	f014 fe56 	bl	222ec <log_0>
}
    d640:	b002      	add	sp, #8
    d642:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    d646:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    d64a:	4639      	mov	r1, r7
    d64c:	f017 ffda 	bl	25604 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    d650:	8922      	ldrh	r2, [r4, #8]
    d652:	8963      	ldrh	r3, [r4, #10]
    d654:	b97a      	cbnz	r2, d676 <sc_save+0x6e>
    d656:	b983      	cbnz	r3, d67a <sc_save+0x72>
		cfg->data.start = start;
    d658:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    d65a:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    d65c:	4621      	mov	r1, r4
    d65e:	f811 0b01 	ldrb.w	r0, [r1], #1
    d662:	f017 f973 	bl	2494c <bt_addr_le_is_bonded>
    d666:	2800      	cmp	r0, #0
    d668:	d0ea      	beq.n	d640 <sc_save+0x38>
		sc_store(cfg);
    d66a:	4620      	mov	r0, r4
}
    d66c:	b002      	add	sp, #8
    d66e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
    d672:	f7ff bd6f 	b.w	d154 <sc_store>
	if (new_start >= *start && new_end <= *end) {
    d676:	4296      	cmp	r6, r2
    d678:	d302      	bcc.n	d680 <sc_save+0x78>
    d67a:	429d      	cmp	r5, r3
    d67c:	d8ed      	bhi.n	d65a <sc_save+0x52>
    d67e:	e7df      	b.n	d640 <sc_save+0x38>
	if (*end < new_end) {
    d680:	429d      	cmp	r5, r3
		*start = new_start;
    d682:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    d684:	d9ea      	bls.n	d65c <sc_save+0x54>
    d686:	e7e8      	b.n	d65a <sc_save+0x52>
    d688:	0002780c 	.word	0x0002780c
    d68c:	0002775c 	.word	0x0002775c
    d690:	0002cee8 	.word	0x0002cee8

0000d694 <notify_cb>:
{
    d694:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d698:	4b33      	ldr	r3, [pc, #204]	; (d768 <notify_cb+0xd4>)
{
    d69a:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d69c:	6882      	ldr	r2, [r0, #8]
    d69e:	429a      	cmp	r2, r3
{
    d6a0:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d6a2:	d113      	bne.n	d6cc <notify_cb+0x38>
	ccc = attr->user_data;
    d6a4:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    d6a6:	4b31      	ldr	r3, [pc, #196]	; (d76c <notify_cb+0xd8>)
    d6a8:	429f      	cmp	r7, r3
    d6aa:	d013      	beq.n	d6d4 <notify_cb+0x40>
		if (cfg->value != data->type) {
    d6ac:	893a      	ldrh	r2, [r7, #8]
    d6ae:	89a3      	ldrh	r3, [r4, #12]
    d6b0:	429a      	cmp	r2, r3
    d6b2:	d10b      	bne.n	d6cc <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d6b4:	4639      	mov	r1, r7
    d6b6:	f811 0b01 	ldrb.w	r0, [r1], #1
    d6ba:	f7fe f86d 	bl	b798 <bt_conn_lookup_addr_le>
		if (!conn) {
    d6be:	4605      	mov	r5, r0
    d6c0:	b120      	cbz	r0, d6cc <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    d6c2:	7b43      	ldrb	r3, [r0, #13]
    d6c4:	2b07      	cmp	r3, #7
    d6c6:	d02d      	beq.n	d724 <notify_cb+0x90>
			bt_conn_unref(conn);
    d6c8:	f017 fa54 	bl	24b74 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    d6cc:	2001      	movs	r0, #1
}
    d6ce:	b003      	add	sp, #12
    d6d0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d6d4:	f04f 0800 	mov.w	r8, #0
    d6d8:	4d25      	ldr	r5, [pc, #148]	; (d770 <notify_cb+0xdc>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d6da:	46c1      	mov	r9, r8
    d6dc:	2207      	movs	r2, #7
    d6de:	4669      	mov	r1, sp
    d6e0:	4628      	mov	r0, r5
    d6e2:	f8cd 9000 	str.w	r9, [sp]
    d6e6:	f8cd 9003 	str.w	r9, [sp, #3]
    d6ea:	f016 fdfa 	bl	242e2 <memcmp>
    d6ee:	b178      	cbz	r0, d710 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    d6f0:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    d6f4:	2207      	movs	r2, #7
    d6f6:	4629      	mov	r1, r5
    d6f8:	f7fe f892 	bl	b820 <bt_conn_lookup_state_le>
			if (!conn) {
    d6fc:	b978      	cbnz	r0, d71e <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    d6fe:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    d700:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    d704:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    d706:	4629      	mov	r1, r5
    d708:	8853      	ldrh	r3, [r2, #2]
    d70a:	8812      	ldrh	r2, [r2, #0]
    d70c:	f7ff ff7c 	bl	d608 <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d710:	350c      	adds	r5, #12
    d712:	f1b8 0f00 	cmp.w	r8, #0
    d716:	d1c9      	bne.n	d6ac <notify_cb+0x18>
    d718:	f04f 0801 	mov.w	r8, #1
    d71c:	e7de      	b.n	d6dc <notify_cb+0x48>
			bt_conn_unref(conn);
    d71e:	f017 fa29 	bl	24b74 <bt_conn_unref>
    d722:	e7f5      	b.n	d710 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    d724:	697b      	ldr	r3, [r7, #20]
    d726:	b123      	cbz	r3, d732 <notify_cb+0x9e>
    d728:	4631      	mov	r1, r6
    d72a:	4798      	blx	r3
    d72c:	b908      	cbnz	r0, d732 <notify_cb+0x9e>
			bt_conn_unref(conn);
    d72e:	4628      	mov	r0, r5
    d730:	e7ca      	b.n	d6c8 <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d732:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    d734:	88a1      	ldrh	r1, [r4, #4]
    d736:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    d738:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    d73a:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    d73c:	d110      	bne.n	d760 <notify_cb+0xcc>
			err = gatt_indicate(conn, data->handle,
    d73e:	f7ff fd3b 	bl	d1b8 <gatt_indicate>
			if (err == 0) {
    d742:	4606      	mov	r6, r0
    d744:	b918      	cbnz	r0, d74e <notify_cb+0xba>
				data->ind_params->_ref++;
    d746:	6922      	ldr	r2, [r4, #16]
    d748:	7d93      	ldrb	r3, [r2, #22]
    d74a:	3301      	adds	r3, #1
    d74c:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    d74e:	4628      	mov	r0, r5
    d750:	f017 fa10 	bl	24b74 <bt_conn_unref>
		if (err < 0) {
    d754:	2e00      	cmp	r6, #0
    d756:	f04f 0000 	mov.w	r0, #0
    d75a:	dbb8      	blt.n	d6ce <notify_cb+0x3a>
		data->err = 0;
    d75c:	60a0      	str	r0, [r4, #8]
    d75e:	e7b5      	b.n	d6cc <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    d760:	f7ff fd80 	bl	d264 <gatt_notify>
    d764:	4606      	mov	r6, r0
    d766:	e7f2      	b.n	d74e <notify_cb+0xba>
    d768:	0000d505 	.word	0x0000d505
    d76c:	20000374 	.word	0x20000374
    d770:	2000ed55 	.word	0x2000ed55

0000d774 <bt_gatt_clear_sc>:
{
    d774:	b570      	push	{r4, r5, r6, lr}
    d776:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    d778:	f7ff ff24 	bl	d5c4 <find_sc_cfg>
	if (!cfg) {
    d77c:	4604      	mov	r4, r0
    d77e:	b318      	cbz	r0, d7c8 <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    d780:	4605      	mov	r5, r0
    d782:	f815 2b01 	ldrb.w	r2, [r5], #1
    d786:	b312      	cbz	r2, d7ce <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    d788:	ae02      	add	r6, sp, #8
    d78a:	2104      	movs	r1, #4
    d78c:	4630      	mov	r0, r6
    d78e:	f014 f864 	bl	2185a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    d792:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    d794:	2124      	movs	r1, #36	; 0x24
    d796:	4a0f      	ldr	r2, [pc, #60]	; (d7d4 <bt_gatt_clear_sc+0x60>)
    d798:	462b      	mov	r3, r5
    d79a:	a803      	add	r0, sp, #12
    d79c:	f7fa fef2 	bl	8584 <bt_settings_encode_key>
		err = settings_delete(key);
    d7a0:	a803      	add	r0, sp, #12
    d7a2:	f015 fa31 	bl	22c08 <settings_delete>
		if (err) {
    d7a6:	4601      	mov	r1, r0
    d7a8:	b148      	cbz	r0, d7be <bt_gatt_clear_sc+0x4a>
    d7aa:	4a0b      	ldr	r2, [pc, #44]	; (d7d8 <bt_gatt_clear_sc+0x64>)
    d7ac:	4b0b      	ldr	r3, [pc, #44]	; (d7dc <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    d7ae:	480c      	ldr	r0, [pc, #48]	; (d7e0 <bt_gatt_clear_sc+0x6c>)
    d7b0:	1ad2      	subs	r2, r2, r3
    d7b2:	08d2      	lsrs	r2, r2, #3
    d7b4:	0192      	lsls	r2, r2, #6
    d7b6:	f042 0201 	orr.w	r2, r2, #1
    d7ba:	f014 fda4 	bl	22306 <log_1>
	memset(cfg, 0, sizeof(*cfg));
    d7be:	220c      	movs	r2, #12
    d7c0:	2100      	movs	r1, #0
    d7c2:	4620      	mov	r0, r4
    d7c4:	f016 fdc9 	bl	2435a <memset>
}
    d7c8:	2000      	movs	r0, #0
    d7ca:	b00c      	add	sp, #48	; 0x30
    d7cc:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    d7ce:	9200      	str	r2, [sp, #0]
    d7d0:	e7e0      	b.n	d794 <bt_gatt_clear_sc+0x20>
    d7d2:	bf00      	nop
    d7d4:	0002d022 	.word	0x0002d022
    d7d8:	0002780c 	.word	0x0002780c
    d7dc:	0002775c 	.word	0x0002775c
    d7e0:	0002cf07 	.word	0x0002cf07

0000d7e4 <sc_clear>:
{
    d7e4:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d7e6:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    d7ea:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d7ec:	4631      	mov	r1, r6
    d7ee:	7a00      	ldrb	r0, [r0, #8]
    d7f0:	f017 f8ac 	bl	2494c <bt_addr_le_is_bonded>
    d7f4:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d7f6:	4631      	mov	r1, r6
    d7f8:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d7fa:	b17d      	cbz	r5, d81c <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d7fc:	f7ff ffba 	bl	d774 <bt_gatt_clear_sc>
		if (err) {
    d800:	4601      	mov	r1, r0
    d802:	b1a0      	cbz	r0, d82e <sc_clear+0x4a>
    d804:	4a0a      	ldr	r2, [pc, #40]	; (d830 <sc_clear+0x4c>)
    d806:	4b0b      	ldr	r3, [pc, #44]	; (d834 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    d808:	480b      	ldr	r0, [pc, #44]	; (d838 <sc_clear+0x54>)
    d80a:	1ad2      	subs	r2, r2, r3
    d80c:	08d2      	lsrs	r2, r2, #3
    d80e:	0192      	lsls	r2, r2, #6
}
    d810:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    d814:	f042 0201 	orr.w	r2, r2, #1
    d818:	f014 bd75 	b.w	22306 <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d81c:	f7ff fed2 	bl	d5c4 <find_sc_cfg>
		if (cfg) {
    d820:	b128      	cbz	r0, d82e <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    d822:	4629      	mov	r1, r5
    d824:	220c      	movs	r2, #12
}
    d826:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    d82a:	f016 bd96 	b.w	2435a <memset>
}
    d82e:	bd70      	pop	{r4, r5, r6, pc}
    d830:	0002780c 	.word	0x0002780c
    d834:	0002775c 	.word	0x0002775c
    d838:	0002cf24 	.word	0x0002cf24

0000d83c <disconnected_cb>:
{
    d83c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d840:	4b1f      	ldr	r3, [pc, #124]	; (d8c0 <disconnected_cb+0x84>)
{
    d842:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d844:	6882      	ldr	r2, [r0, #8]
    d846:	429a      	cmp	r2, r3
{
    d848:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d84a:	d102      	bne.n	d852 <disconnected_cb+0x16>
	ccc = attr->user_data;
    d84c:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    d84e:	8963      	ldrh	r3, [r4, #10]
    d850:	b9c3      	cbnz	r3, d884 <disconnected_cb+0x48>
}
    d852:	2001      	movs	r0, #1
    d854:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d858:	f105 0888 	add.w	r8, r5, #136	; 0x88
    d85c:	7a28      	ldrb	r0, [r5, #8]
    d85e:	4641      	mov	r1, r8
    d860:	f017 f874 	bl	2494c <bt_addr_le_is_bonded>
    d864:	b948      	cbnz	r0, d87a <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    d866:	4b17      	ldr	r3, [pc, #92]	; (d8c4 <disconnected_cb+0x88>)
    d868:	429c      	cmp	r4, r3
    d86a:	d102      	bne.n	d872 <disconnected_cb+0x36>
					sc_clear(conn);
    d86c:	4628      	mov	r0, r5
    d86e:	f7ff ffb9 	bl	d7e4 <sc_clear>
				clear_ccc_cfg(cfg);
    d872:	4620      	mov	r0, r4
    d874:	f017 fec9 	bl	2560a <clear_ccc_cfg>
	if (!value_used) {
    d878:	e019      	b.n	d8ae <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d87a:	4641      	mov	r1, r8
    d87c:	4638      	mov	r0, r7
    d87e:	f017 fec1 	bl	25604 <bt_addr_le_copy>
	if (!value_used) {
    d882:	e014      	b.n	d8ae <disconnected_cb+0x72>
		if (!cfg->value) {
    d884:	8923      	ldrh	r3, [r4, #8]
    d886:	b193      	cbz	r3, d8ae <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d888:	4627      	mov	r7, r4
    d88a:	4628      	mov	r0, r5
    d88c:	f817 1b01 	ldrb.w	r1, [r7], #1
    d890:	463a      	mov	r2, r7
    d892:	f017 f934 	bl	24afe <bt_conn_is_peer_addr_le>
    d896:	2800      	cmp	r0, #0
    d898:	d1de      	bne.n	d858 <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d89a:	7820      	ldrb	r0, [r4, #0]
    d89c:	4639      	mov	r1, r7
    d89e:	f7fd ff7b 	bl	b798 <bt_conn_lookup_addr_le>
			if (tmp) {
    d8a2:	b120      	cbz	r0, d8ae <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    d8a4:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    d8a6:	f017 f965 	bl	24b74 <bt_conn_unref>
	if (!value_used) {
    d8aa:	2d07      	cmp	r5, #7
    d8ac:	d0d1      	beq.n	d852 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    d8ae:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    d8b0:	2100      	movs	r1, #0
    d8b2:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    d8b4:	2b00      	cmp	r3, #0
    d8b6:	d0cc      	beq.n	d852 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    d8b8:	4630      	mov	r0, r6
    d8ba:	4798      	blx	r3
    d8bc:	e7c9      	b.n	d852 <disconnected_cb+0x16>
    d8be:	bf00      	nop
    d8c0:	0000d505 	.word	0x0000d505
    d8c4:	20000374 	.word	0x20000374

0000d8c8 <sc_set>:
{
    d8c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d8cc:	460e      	mov	r6, r1
    d8ce:	b087      	sub	sp, #28
    d8d0:	4690      	mov	r8, r2
    d8d2:	4699      	mov	r9, r3
	if (!name) {
    d8d4:	4607      	mov	r7, r0
    d8d6:	b978      	cbnz	r0, d8f8 <sc_set+0x30>
    d8d8:	4937      	ldr	r1, [pc, #220]	; (d9b8 <sc_set+0xf0>)
    d8da:	4b38      	ldr	r3, [pc, #224]	; (d9bc <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    d8dc:	4838      	ldr	r0, [pc, #224]	; (d9c0 <sc_set+0xf8>)
    d8de:	1ac9      	subs	r1, r1, r3
    d8e0:	08c9      	lsrs	r1, r1, #3
    d8e2:	0189      	lsls	r1, r1, #6
    d8e4:	f041 0101 	orr.w	r1, r1, #1
    d8e8:	f014 fd00 	bl	222ec <log_0>
		return -EINVAL;
    d8ec:	f06f 0515 	mvn.w	r5, #21
}
    d8f0:	4628      	mov	r0, r5
    d8f2:	b007      	add	sp, #28
    d8f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    d8f8:	a902      	add	r1, sp, #8
    d8fa:	f016 fdff 	bl	244fc <bt_settings_decode_key>
	if (err) {
    d8fe:	4605      	mov	r5, r0
    d900:	b178      	cbz	r0, d922 <sc_set+0x5a>
    d902:	4a2e      	ldr	r2, [pc, #184]	; (d9bc <sc_set+0xf4>)
    d904:	4c2c      	ldr	r4, [pc, #176]	; (d9b8 <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    d906:	4638      	mov	r0, r7
    d908:	1aa4      	subs	r4, r4, r2
    d90a:	08e4      	lsrs	r4, r4, #3
    d90c:	f7f7 fdf8 	bl	5500 <log_strdup>
    d910:	01a4      	lsls	r4, r4, #6
    d912:	f044 0401 	orr.w	r4, r4, #1
    d916:	4601      	mov	r1, r0
    d918:	4622      	mov	r2, r4
    d91a:	482a      	ldr	r0, [pc, #168]	; (d9c4 <sc_set+0xfc>)
    d91c:	f014 fcf3 	bl	22306 <log_1>
    d920:	e7e4      	b.n	d8ec <sc_set+0x24>
	settings_name_next(name, &next);
    d922:	a901      	add	r1, sp, #4
    d924:	4638      	mov	r0, r7
    d926:	f015 f996 	bl	22c56 <settings_name_next>
	if (!next) {
    d92a:	9801      	ldr	r0, [sp, #4]
    d92c:	b308      	cbz	r0, d972 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    d92e:	220a      	movs	r2, #10
    d930:	4629      	mov	r1, r5
    d932:	f016 fc19 	bl	24168 <strtol>
    d936:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    d938:	a902      	add	r1, sp, #8
    d93a:	4638      	mov	r0, r7
    d93c:	f7ff fe42 	bl	d5c4 <find_sc_cfg>
	if (!cfg && len_rd) {
    d940:	4604      	mov	r4, r0
    d942:	bb88      	cbnz	r0, d9a8 <sc_set+0xe0>
    d944:	2e00      	cmp	r6, #0
    d946:	d0d3      	beq.n	d8f0 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d948:	a904      	add	r1, sp, #16
    d94a:	9004      	str	r0, [sp, #16]
    d94c:	f8cd 0013 	str.w	r0, [sp, #19]
    d950:	f7ff fe38 	bl	d5c4 <find_sc_cfg>
		if (!cfg) {
    d954:	4604      	mov	r4, r0
    d956:	b970      	cbnz	r0, d976 <sc_set+0xae>
    d958:	4b18      	ldr	r3, [pc, #96]	; (d9bc <sc_set+0xf4>)
    d95a:	4917      	ldr	r1, [pc, #92]	; (d9b8 <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    d95c:	481a      	ldr	r0, [pc, #104]	; (d9c8 <sc_set+0x100>)
    d95e:	1ac9      	subs	r1, r1, r3
    d960:	08c9      	lsrs	r1, r1, #3
    d962:	0189      	lsls	r1, r1, #6
    d964:	f041 0101 	orr.w	r1, r1, #1
    d968:	f014 fcc0 	bl	222ec <log_0>
			return -ENOMEM;
    d96c:	f06f 050b 	mvn.w	r5, #11
    d970:	e7be      	b.n	d8f0 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    d972:	462f      	mov	r7, r5
    d974:	e7e0      	b.n	d938 <sc_set+0x70>
		cfg->id = id;
    d976:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    d97a:	a902      	add	r1, sp, #8
    d97c:	f017 fe42 	bl	25604 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    d980:	f104 0108 	add.w	r1, r4, #8
    d984:	2204      	movs	r2, #4
    d986:	4648      	mov	r0, r9
    d988:	47c0      	blx	r8
		if (len < 0) {
    d98a:	1e04      	subs	r4, r0, #0
    d98c:	dab0      	bge.n	d8f0 <sc_set+0x28>
    d98e:	4b0b      	ldr	r3, [pc, #44]	; (d9bc <sc_set+0xf4>)
    d990:	4a09      	ldr	r2, [pc, #36]	; (d9b8 <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
    d992:	480e      	ldr	r0, [pc, #56]	; (d9cc <sc_set+0x104>)
    d994:	1ad2      	subs	r2, r2, r3
    d996:	08d2      	lsrs	r2, r2, #3
    d998:	0192      	lsls	r2, r2, #6
    d99a:	f042 0201 	orr.w	r2, r2, #1
    d99e:	4621      	mov	r1, r4
    d9a0:	f014 fcb1 	bl	22306 <log_1>
			return len;
    d9a4:	4625      	mov	r5, r4
    d9a6:	e7a3      	b.n	d8f0 <sc_set+0x28>
	if (len_rd) {
    d9a8:	2e00      	cmp	r6, #0
    d9aa:	d1e9      	bne.n	d980 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
    d9ac:	220c      	movs	r2, #12
    d9ae:	4631      	mov	r1, r6
    d9b0:	f016 fcd3 	bl	2435a <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    d9b4:	e79c      	b.n	d8f0 <sc_set+0x28>
    d9b6:	bf00      	nop
    d9b8:	0002780c 	.word	0x0002780c
    d9bc:	0002775c 	.word	0x0002775c
    d9c0:	0002bc92 	.word	0x0002bc92
    d9c4:	0002ce90 	.word	0x0002ce90
    d9c8:	0002cf3a 	.word	0x0002cf3a
    d9cc:	0002cdd7 	.word	0x0002cdd7

0000d9d0 <sc_commit>:
{
    d9d0:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    d9d2:	4c0c      	ldr	r4, [pc, #48]	; (da04 <sc_commit+0x34>)
    d9d4:	f06f 0102 	mvn.w	r1, #2
    d9d8:	f104 0050 	add.w	r0, r4, #80	; 0x50
    d9dc:	f017 fec5 	bl	2576a <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d9e0:	f3bf 8f5b 	dmb	ish
    d9e4:	6d23      	ldr	r3, [r4, #80]	; 0x50
    d9e6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    d9ea:	07db      	lsls	r3, r3, #31
    d9ec:	d507      	bpl.n	d9fe <sc_commit+0x2e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    d9ee:	4806      	ldr	r0, [pc, #24]	; (da08 <sc_commit+0x38>)
    d9f0:	f44f 72a4 	mov.w	r2, #328	; 0x148
    d9f4:	2300      	movs	r3, #0
    d9f6:	f104 0120 	add.w	r1, r4, #32
    d9fa:	f012 fddb 	bl	205b4 <k_delayed_work_submit_to_queue>
}
    d9fe:	2000      	movs	r0, #0
    da00:	bd10      	pop	{r4, pc}
    da02:	bf00      	nop
    da04:	2000a810 	.word	0x2000a810
    da08:	2000aca0 	.word	0x2000aca0

0000da0c <sc_indicate_rsp>:
{
    da0c:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    da0e:	4d12      	ldr	r5, [pc, #72]	; (da58 <sc_indicate_rsp+0x4c>)
    da10:	4604      	mov	r4, r0
    da12:	f06f 0102 	mvn.w	r1, #2
    da16:	f105 0050 	add.w	r0, r5, #80	; 0x50
    da1a:	f017 fea6 	bl	2576a <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    da1e:	f3bf 8f5b 	dmb	ish
    da22:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    da24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    da28:	07da      	lsls	r2, r3, #31
    da2a:	d506      	bpl.n	da3a <sc_indicate_rsp+0x2e>
    da2c:	480b      	ldr	r0, [pc, #44]	; (da5c <sc_indicate_rsp+0x50>)
    da2e:	2200      	movs	r2, #0
    da30:	2300      	movs	r3, #0
    da32:	f105 0120 	add.w	r1, r5, #32
    da36:	f012 fdbd 	bl	205b4 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    da3a:	4620      	mov	r0, r4
    da3c:	f7ff fb04 	bl	d048 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    da40:	b140      	cbz	r0, da54 <sc_indicate_rsp+0x48>
    da42:	7a03      	ldrb	r3, [r0, #8]
    da44:	07db      	lsls	r3, r3, #31
    da46:	d505      	bpl.n	da54 <sc_indicate_rsp+0x48>
}
    da48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    da4c:	2101      	movs	r1, #1
    da4e:	300c      	adds	r0, #12
    da50:	f017 be5f 	b.w	25712 <atomic_or>
    da54:	bd38      	pop	{r3, r4, r5, pc}
    da56:	bf00      	nop
    da58:	2000a810 	.word	0x2000a810
    da5c:	2000aca0 	.word	0x2000aca0

0000da60 <bt_gatt_init>:
{
    da60:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    da62:	4b26      	ldr	r3, [pc, #152]	; (dafc <bt_gatt_init+0x9c>)
    da64:	f3bf 8f5b 	dmb	ish
    da68:	2201      	movs	r2, #1
    da6a:	e853 1f00 	ldrex	r1, [r3]
    da6e:	2900      	cmp	r1, #0
    da70:	d103      	bne.n	da7a <bt_gatt_init+0x1a>
    da72:	e843 2000 	strex	r0, r2, [r3]
    da76:	2800      	cmp	r0, #0
    da78:	d1f7      	bne.n	da6a <bt_gatt_init+0xa>
    da7a:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    da7e:	d13b      	bne.n	daf8 <bt_gatt_init+0x98>
    da80:	f3bf 8f5b 	dmb	ish
    da84:	4b1e      	ldr	r3, [pc, #120]	; (db00 <bt_gatt_init+0xa0>)
    da86:	e853 1f00 	ldrex	r1, [r3]
    da8a:	2900      	cmp	r1, #0
    da8c:	d103      	bne.n	da96 <bt_gatt_init+0x36>
    da8e:	e843 2000 	strex	r0, r2, [r3]
    da92:	2800      	cmp	r0, #0
    da94:	d1f7      	bne.n	da86 <bt_gatt_init+0x26>
    da96:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    da9a:	d108      	bne.n	daae <bt_gatt_init+0x4e>
    da9c:	4919      	ldr	r1, [pc, #100]	; (db04 <bt_gatt_init+0xa4>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    da9e:	4a1a      	ldr	r2, [pc, #104]	; (db08 <bt_gatt_init+0xa8>)
    daa0:	880b      	ldrh	r3, [r1, #0]
    daa2:	4c1a      	ldr	r4, [pc, #104]	; (db0c <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
    daa4:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    daa6:	42a2      	cmp	r2, r4
    daa8:	d320      	bcc.n	daec <bt_gatt_init+0x8c>
    daaa:	b100      	cbz	r0, daae <bt_gatt_init+0x4e>
    daac:	800b      	strh	r3, [r1, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    daae:	4c18      	ldr	r4, [pc, #96]	; (db10 <bt_gatt_init+0xb0>)
    dab0:	2230      	movs	r2, #48	; 0x30
    dab2:	2100      	movs	r1, #0
    dab4:	4620      	mov	r0, r4
    dab6:	f016 fc50 	bl	2435a <memset>
    daba:	4b16      	ldr	r3, [pc, #88]	; (db14 <bt_gatt_init+0xb4>)
    dabc:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dabe:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dac0:	4c15      	ldr	r4, [pc, #84]	; (db18 <bt_gatt_init+0xb8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dac2:	4816      	ldr	r0, [pc, #88]	; (db1c <bt_gatt_init+0xbc>)
    dac4:	2300      	movs	r3, #0
    dac6:	f44f 72a4 	mov.w	r2, #328	; 0x148
    daca:	f012 fd73 	bl	205b4 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dace:	2100      	movs	r1, #0
    dad0:	f104 0020 	add.w	r0, r4, #32
    dad4:	2230      	movs	r2, #48	; 0x30
    dad6:	f016 fc40 	bl	2435a <memset>
    dada:	4b11      	ldr	r3, [pc, #68]	; (db20 <bt_gatt_init+0xc0>)
    dadc:	6263      	str	r3, [r4, #36]	; 0x24
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    dade:	f104 0050 	add.w	r0, r4, #80	; 0x50
    dae2:	2102      	movs	r1, #2
}
    dae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dae8:	f017 be13 	b.w	25712 <atomic_or>
		last_static_handle += svc->attr_count;
    daec:	6850      	ldr	r0, [r2, #4]
    daee:	4403      	add	r3, r0
    daf0:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    daf2:	3208      	adds	r2, #8
    daf4:	2001      	movs	r0, #1
    daf6:	e7d6      	b.n	daa6 <bt_gatt_init+0x46>
}
    daf8:	bd10      	pop	{r4, pc}
    dafa:	bf00      	nop
    dafc:	2000d7b0 	.word	0x2000d7b0
    db00:	2000d7cc 	.word	0x2000d7cc
    db04:	2000ed52 	.word	0x2000ed52
    db08:	000276bc 	.word	0x000276bc
    db0c:	000276e4 	.word	0x000276e4
    db10:	2000a7e0 	.word	0x2000a7e0
    db14:	00025a81 	.word	0x00025a81
    db18:	2000a810 	.word	0x2000a810
    db1c:	2000aca0 	.word	0x2000aca0
    db20:	0000e065 	.word	0x0000e065

0000db24 <bt_gatt_attr_get_handle>:
{
    db24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    db28:	4603      	mov	r3, r0
    db2a:	b148      	cbz	r0, db40 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    db2c:	8a00      	ldrh	r0, [r0, #16]
    db2e:	b938      	cbnz	r0, db40 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    db30:	4912      	ldr	r1, [pc, #72]	; (db7c <bt_gatt_attr_get_handle+0x58>)
    db32:	f8df e04c 	ldr.w	lr, [pc, #76]	; db80 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    db36:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    db38:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    db3c:	4571      	cmp	r1, lr
    db3e:	d301      	bcc.n	db44 <bt_gatt_attr_get_handle+0x20>
}
    db40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    db44:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    db48:	42bb      	cmp	r3, r7
    db4a:	d304      	bcc.n	db56 <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    db4c:	fb0c 7206 	mla	r2, ip, r6, r7
    db50:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    db52:	4293      	cmp	r3, r2
    db54:	d90e      	bls.n	db74 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    db56:	19a2      	adds	r2, r4, r6
    db58:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    db5a:	3108      	adds	r1, #8
    db5c:	4614      	mov	r4, r2
    db5e:	e7ed      	b.n	db3c <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    db60:	fb0c 7805 	mla	r8, ip, r5, r7
    db64:	4543      	cmp	r3, r8
    db66:	d007      	beq.n	db78 <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    db68:	3501      	adds	r5, #1
    db6a:	1962      	adds	r2, r4, r5
    db6c:	42b5      	cmp	r5, r6
    db6e:	b292      	uxth	r2, r2
    db70:	d1f6      	bne.n	db60 <bt_gatt_attr_get_handle+0x3c>
    db72:	e7f2      	b.n	db5a <bt_gatt_attr_get_handle+0x36>
    db74:	2500      	movs	r5, #0
    db76:	e7f8      	b.n	db6a <bt_gatt_attr_get_handle+0x46>
    db78:	4610      	mov	r0, r2
    db7a:	e7e1      	b.n	db40 <bt_gatt_attr_get_handle+0x1c>
    db7c:	000276bc 	.word	0x000276bc
    db80:	000276e4 	.word	0x000276e4

0000db84 <bt_gatt_foreach_attr_type>:
{
    db84:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    db88:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    db8c:	9100      	str	r1, [sp, #0]
    db8e:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    db90:	f64f 73ff 	movw	r3, #65535	; 0xffff
    db94:	2d00      	cmp	r5, #0
    db96:	bf08      	it	eq
    db98:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    db9a:	4b24      	ldr	r3, [pc, #144]	; (dc2c <bt_gatt_foreach_attr_type+0xa8>)
    db9c:	881b      	ldrh	r3, [r3, #0]
    db9e:	4283      	cmp	r3, r0
{
    dba0:	4607      	mov	r7, r0
    dba2:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    dba4:	d23c      	bcs.n	dc20 <bt_gatt_foreach_attr_type+0x9c>
}
    dba6:	b003      	add	sp, #12
    dba8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    dbac:	6873      	ldr	r3, [r6, #4]
    dbae:	4423      	add	r3, r4
    dbb0:	42bb      	cmp	r3, r7
    dbb2:	d232      	bcs.n	dc1a <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    dbb4:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dbb6:	3608      	adds	r6, #8
    dbb8:	4b1d      	ldr	r3, [pc, #116]	; (dc30 <bt_gatt_foreach_attr_type+0xac>)
    dbba:	429e      	cmp	r6, r3
    dbbc:	d3f6      	bcc.n	dbac <bt_gatt_foreach_attr_type+0x28>
    dbbe:	e7f2      	b.n	dba6 <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dbc0:	5889      	ldr	r1, [r1, r2]
    dbc2:	9301      	str	r3, [sp, #4]
    dbc4:	4640      	mov	r0, r8
    dbc6:	f016 fcbd 	bl	24544 <bt_uuid_cmp>
    dbca:	9b01      	ldr	r3, [sp, #4]
    dbcc:	b190      	cbz	r0, dbf4 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dbce:	3401      	adds	r4, #1
    dbd0:	f10a 0a01 	add.w	sl, sl, #1
    dbd4:	b2a4      	uxth	r4, r4
    dbd6:	6873      	ldr	r3, [r6, #4]
    dbd8:	4553      	cmp	r3, sl
    dbda:	d9ec      	bls.n	dbb6 <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    dbdc:	9b00      	ldr	r3, [sp, #0]
    dbde:	429c      	cmp	r4, r3
    dbe0:	d8e1      	bhi.n	dba6 <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    dbe2:	42bc      	cmp	r4, r7
    dbe4:	d3f3      	bcc.n	dbce <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dbe6:	6831      	ldr	r1, [r6, #0]
    dbe8:	fb0b f20a 	mul.w	r2, fp, sl
    dbec:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dbee:	f1b8 0f00 	cmp.w	r8, #0
    dbf2:	d1e5      	bne.n	dbc0 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    dbf4:	f1b9 0f00 	cmp.w	r9, #0
    dbf8:	d10b      	bne.n	dc12 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    dbfa:	3d01      	subs	r5, #1
    dbfc:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    dbfe:	4618      	mov	r0, r3
    dc00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dc02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dc04:	4621      	mov	r1, r4
    dc06:	4798      	blx	r3
	if (!*num_matches) {
    dc08:	2d00      	cmp	r5, #0
    dc0a:	d0cc      	beq.n	dba6 <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dc0c:	2800      	cmp	r0, #0
    dc0e:	d1de      	bne.n	dbce <bt_gatt_foreach_attr_type+0x4a>
    dc10:	e7c9      	b.n	dba6 <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    dc12:	68da      	ldr	r2, [r3, #12]
    dc14:	4591      	cmp	r9, r2
    dc16:	d1da      	bne.n	dbce <bt_gatt_foreach_attr_type+0x4a>
    dc18:	e7ef      	b.n	dbfa <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dc1a:	f04f 0a00 	mov.w	sl, #0
    dc1e:	e7da      	b.n	dbd6 <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dc20:	4e04      	ldr	r6, [pc, #16]	; (dc34 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    dc22:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dc24:	f04f 0b14 	mov.w	fp, #20
    dc28:	e7c6      	b.n	dbb8 <bt_gatt_foreach_attr_type+0x34>
    dc2a:	bf00      	nop
    dc2c:	2000ed52 	.word	0x2000ed52
    dc30:	000276e4 	.word	0x000276e4
    dc34:	000276bc 	.word	0x000276bc

0000dc38 <db_hash_gen>:
{
    dc38:	b530      	push	{r4, r5, lr}
    dc3a:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    dc3c:	2300      	movs	r3, #0
{
    dc3e:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    dc40:	aa1c      	add	r2, sp, #112	; 0x70
    dc42:	4669      	mov	r1, sp
    dc44:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    dc46:	e9cd 3300 	strd	r3, r3, [sp]
    dc4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    dc4e:	f016 f9b1 	bl	23fb4 <tc_cmac_setup>
    dc52:	b958      	cbnz	r0, dc6c <db_hash_gen+0x34>
    dc54:	4918      	ldr	r1, [pc, #96]	; (dcb8 <db_hash_gen+0x80>)
    dc56:	4b19      	ldr	r3, [pc, #100]	; (dcbc <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    dc58:	4819      	ldr	r0, [pc, #100]	; (dcc0 <db_hash_gen+0x88>)
    dc5a:	1ac9      	subs	r1, r1, r3
    dc5c:	08c9      	lsrs	r1, r1, #3
    dc5e:	0189      	lsls	r1, r1, #6
    dc60:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    dc64:	f014 fb42 	bl	222ec <log_0>
}
    dc68:	b049      	add	sp, #292	; 0x124
    dc6a:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    dc6c:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dc70:	2001      	movs	r0, #1
    dc72:	4a14      	ldr	r2, [pc, #80]	; (dcc4 <db_hash_gen+0x8c>)
    dc74:	ab04      	add	r3, sp, #16
    dc76:	f017 fef8 	bl	25a6a <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    dc7a:	4813      	ldr	r0, [pc, #76]	; (dcc8 <db_hash_gen+0x90>)
    dc7c:	a904      	add	r1, sp, #16
    dc7e:	f016 fa2f 	bl	240e0 <tc_cmac_final>
    dc82:	b940      	cbnz	r0, dc96 <db_hash_gen+0x5e>
    dc84:	490c      	ldr	r1, [pc, #48]	; (dcb8 <db_hash_gen+0x80>)
    dc86:	4b0d      	ldr	r3, [pc, #52]	; (dcbc <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    dc88:	4810      	ldr	r0, [pc, #64]	; (dccc <db_hash_gen+0x94>)
    dc8a:	1ac9      	subs	r1, r1, r3
    dc8c:	08c9      	lsrs	r1, r1, #3
    dc8e:	0189      	lsls	r1, r1, #6
    dc90:	f041 0101 	orr.w	r1, r1, #1
    dc94:	e7e6      	b.n	dc64 <db_hash_gen+0x2c>
    dc96:	4b0c      	ldr	r3, [pc, #48]	; (dcc8 <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    dc98:	2208      	movs	r2, #8
    dc9a:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    dc9e:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    dca0:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    dca4:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    dca8:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    dcaa:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    dcac:	d1f7      	bne.n	dc9e <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    dcae:	2c00      	cmp	r4, #0
    dcb0:	d0da      	beq.n	dc68 <db_hash_gen+0x30>
		db_hash_store();
    dcb2:	f7ff f989 	bl	cfc8 <db_hash_store>
    dcb6:	e7d7      	b.n	dc68 <db_hash_gen+0x30>
    dcb8:	0002780c 	.word	0x0002780c
    dcbc:	0002775c 	.word	0x0002775c
    dcc0:	0002cf5c 	.word	0x0002cf5c
    dcc4:	00025667 	.word	0x00025667
    dcc8:	2000f2ec 	.word	0x2000f2ec
    dccc:	0002cf75 	.word	0x0002cf75

0000dcd0 <db_hash_commit>:
{
    dcd0:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    dcd2:	4820      	ldr	r0, [pc, #128]	; (dd54 <db_hash_commit+0x84>)
    dcd4:	f019 f9c5 	bl	27062 <k_delayed_work_cancel>
	if (!err) {
    dcd8:	b908      	cbnz	r0, dcde <db_hash_commit+0xe>
		db_hash_gen(false);
    dcda:	f7ff ffad 	bl	dc38 <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    dcde:	491e      	ldr	r1, [pc, #120]	; (dd58 <db_hash_commit+0x88>)
    dce0:	481e      	ldr	r0, [pc, #120]	; (dd5c <db_hash_commit+0x8c>)
    dce2:	2210      	movs	r2, #16
    dce4:	f016 fafd 	bl	242e2 <memcmp>
    dce8:	b948      	cbnz	r0, dcfe <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    dcea:	481d      	ldr	r0, [pc, #116]	; (dd60 <db_hash_commit+0x90>)
    dcec:	f019 f9b9 	bl	27062 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    dcf0:	481c      	ldr	r0, [pc, #112]	; (dd64 <db_hash_commit+0x94>)
    dcf2:	f06f 0101 	mvn.w	r1, #1
    dcf6:	f017 fd38 	bl	2576a <atomic_and.isra.0>
}
    dcfa:	2000      	movs	r0, #0
    dcfc:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    dcfe:	4c1a      	ldr	r4, [pc, #104]	; (dd68 <db_hash_commit+0x98>)
    dd00:	2101      	movs	r1, #1
    dd02:	f104 0050 	add.w	r0, r4, #80	; 0x50
    dd06:	f017 fd04 	bl	25712 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    dd0a:	07c2      	lsls	r2, r0, #31
    dd0c:	d412      	bmi.n	dd34 <db_hash_commit+0x64>
		gatt_sc.start = start;
    dd0e:	4b17      	ldr	r3, [pc, #92]	; (dd6c <db_hash_commit+0x9c>)
    dd10:	61a3      	str	r3, [r4, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    dd12:	f3bf 8f5b 	dmb	ish
    dd16:	6d23      	ldr	r3, [r4, #80]	; 0x50
    dd18:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    dd1c:	079b      	lsls	r3, r3, #30
    dd1e:	d406      	bmi.n	dd2e <db_hash_commit+0x5e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dd20:	490f      	ldr	r1, [pc, #60]	; (dd60 <db_hash_commit+0x90>)
    dd22:	4813      	ldr	r0, [pc, #76]	; (dd70 <db_hash_commit+0xa0>)
    dd24:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dd28:	2300      	movs	r3, #0
    dd2a:	f012 fc43 	bl	205b4 <k_delayed_work_submit_to_queue>
	db_hash_store();
    dd2e:	f7ff f94b 	bl	cfc8 <db_hash_store>
	return 0;
    dd32:	e7e2      	b.n	dcfa <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    dd34:	8b23      	ldrh	r3, [r4, #24]
    dd36:	8b62      	ldrh	r2, [r4, #26]
    dd38:	2b01      	cmp	r3, #1
    dd3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd3e:	d805      	bhi.n	dd4c <db_hash_commit+0x7c>
    dd40:	429a      	cmp	r2, r3
    dd42:	d0f4      	beq.n	dd2e <db_hash_commit+0x5e>
		*end = new_end;
    dd44:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dd48:	8363      	strh	r3, [r4, #26]
    dd4a:	e7e2      	b.n	dd12 <db_hash_commit+0x42>
	if (*end < new_end) {
    dd4c:	429a      	cmp	r2, r3
		*start = new_start;
    dd4e:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
    dd50:	d0df      	beq.n	dd12 <db_hash_commit+0x42>
    dd52:	e7f7      	b.n	dd44 <db_hash_commit+0x74>
    dd54:	2000a7e0 	.word	0x2000a7e0
    dd58:	2000f2ec 	.word	0x2000f2ec
    dd5c:	2000f2fc 	.word	0x2000f2fc
    dd60:	2000a830 	.word	0x2000a830
    dd64:	2000a860 	.word	0x2000a860
    dd68:	2000a810 	.word	0x2000a810
    dd6c:	ffff0001 	.word	0xffff0001
    dd70:	2000aca0 	.word	0x2000aca0

0000dd74 <ccc_set_direct>:
{
    dd74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dd78:	b0b9      	sub	sp, #228	; 0xe4
    dd7a:	4688      	mov	r8, r1
    dd7c:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    dd7e:	4939      	ldr	r1, [pc, #228]	; (de64 <ccc_set_direct+0xf0>)
    dd80:	9840      	ldr	r0, [sp, #256]	; 0x100
    dd82:	466a      	mov	r2, sp
{
    dd84:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    dd86:	f014 ff43 	bl	22c10 <settings_name_steq>
    dd8a:	b978      	cbnz	r0, ddac <ccc_set_direct+0x38>
    dd8c:	4b36      	ldr	r3, [pc, #216]	; (de68 <ccc_set_direct+0xf4>)
    dd8e:	4937      	ldr	r1, [pc, #220]	; (de6c <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    dd90:	4837      	ldr	r0, [pc, #220]	; (de70 <ccc_set_direct+0xfc>)
    dd92:	1ac9      	subs	r1, r1, r3
    dd94:	08c9      	lsrs	r1, r1, #3
    dd96:	0189      	lsls	r1, r1, #6
    dd98:	f041 0101 	orr.w	r1, r1, #1
    dd9c:	f014 faa6 	bl	222ec <log_0>
			return -EINVAL;
    dda0:	f06f 0515 	mvn.w	r5, #21
}
    dda4:	4628      	mov	r0, r5
    dda6:	b039      	add	sp, #228	; 0xe4
    dda8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    ddac:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    ddae:	a901      	add	r1, sp, #4
    ddb0:	4630      	mov	r0, r6
    ddb2:	f014 ff50 	bl	22c56 <settings_name_next>
		if (!name) {
    ddb6:	b96e      	cbnz	r6, ddd4 <ccc_set_direct+0x60>
    ddb8:	492c      	ldr	r1, [pc, #176]	; (de6c <ccc_set_direct+0xf8>)
    ddba:	4b2b      	ldr	r3, [pc, #172]	; (de68 <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    ddbc:	482d      	ldr	r0, [pc, #180]	; (de74 <ccc_set_direct+0x100>)
    ddbe:	1ac9      	subs	r1, r1, r3
    ddc0:	08c9      	lsrs	r1, r1, #3
    ddc2:	0189      	lsls	r1, r1, #6
    ddc4:	f041 0101 	orr.w	r1, r1, #1
    ddc8:	f014 fa90 	bl	222ec <log_0>
			return -EINVAL;
    ddcc:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    ddd0:	4625      	mov	r5, r4
    ddd2:	e7e7      	b.n	dda4 <ccc_set_direct+0x30>
		} else if (!next) {
    ddd4:	9801      	ldr	r0, [sp, #4]
    ddd6:	b9c8      	cbnz	r0, de0c <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    ddd8:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    dddc:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    dde0:	4649      	mov	r1, r9
    dde2:	4630      	mov	r0, r6
    dde4:	f016 fb8a 	bl	244fc <bt_settings_decode_key>
		if (err) {
    dde8:	4605      	mov	r5, r0
    ddea:	b1a0      	cbz	r0, de16 <ccc_set_direct+0xa2>
    ddec:	4a1e      	ldr	r2, [pc, #120]	; (de68 <ccc_set_direct+0xf4>)
    ddee:	4c1f      	ldr	r4, [pc, #124]	; (de6c <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    ddf0:	4630      	mov	r0, r6
    ddf2:	1aa4      	subs	r4, r4, r2
    ddf4:	08e4      	lsrs	r4, r4, #3
    ddf6:	f7f7 fb83 	bl	5500 <log_strdup>
    ddfa:	01a4      	lsls	r4, r4, #6
    ddfc:	f044 0401 	orr.w	r4, r4, #1
    de00:	4601      	mov	r1, r0
    de02:	4622      	mov	r2, r4
    de04:	481c      	ldr	r0, [pc, #112]	; (de78 <ccc_set_direct+0x104>)
    de06:	f014 fa7e 	bl	22306 <log_1>
    de0a:	e7df      	b.n	ddcc <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    de0c:	220a      	movs	r2, #10
    de0e:	2100      	movs	r1, #0
    de10:	f016 f9aa 	bl	24168 <strtol>
    de14:	e7e0      	b.n	ddd8 <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    de16:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    de1a:	f1b8 0f00 	cmp.w	r8, #0
    de1e:	d01d      	beq.n	de5c <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    de20:	ae08      	add	r6, sp, #32
    de22:	22c0      	movs	r2, #192	; 0xc0
    de24:	4631      	mov	r1, r6
    de26:	4638      	mov	r0, r7
    de28:	47a0      	blx	r4
			if (len < 0) {
    de2a:	1e04      	subs	r4, r0, #0
    de2c:	da0b      	bge.n	de46 <ccc_set_direct+0xd2>
    de2e:	4b0e      	ldr	r3, [pc, #56]	; (de68 <ccc_set_direct+0xf4>)
    de30:	4a0e      	ldr	r2, [pc, #56]	; (de6c <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    de32:	4812      	ldr	r0, [pc, #72]	; (de7c <ccc_set_direct+0x108>)
    de34:	1ad2      	subs	r2, r2, r3
    de36:	08d2      	lsrs	r2, r2, #3
    de38:	0192      	lsls	r2, r2, #6
    de3a:	f042 0201 	orr.w	r2, r2, #1
    de3e:	4621      	mov	r1, r4
    de40:	f014 fa61 	bl	22306 <log_1>
				return len;
    de44:	e7c4      	b.n	ddd0 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    de46:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    de48:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    de4a:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    de4c:	4a0c      	ldr	r2, [pc, #48]	; (de80 <ccc_set_direct+0x10c>)
    de4e:	ab04      	add	r3, sp, #16
    de50:	f64f 71ff 	movw	r1, #65535	; 0xffff
    de54:	2001      	movs	r0, #1
    de56:	f017 fe08 	bl	25a6a <bt_gatt_foreach_attr>
	return 0;
    de5a:	e7a3      	b.n	dda4 <ccc_set_direct+0x30>
			load.count = 0;
    de5c:	e9cd 0006 	strd	r0, r0, [sp, #24]
    de60:	e7f4      	b.n	de4c <ccc_set_direct+0xd8>
    de62:	bf00      	nop
    de64:	0002cf8e 	.word	0x0002cf8e
    de68:	0002775c 	.word	0x0002775c
    de6c:	0002780c 	.word	0x0002780c
    de70:	0002cf95 	.word	0x0002cf95
    de74:	0002bc92 	.word	0x0002bc92
    de78:	0002ce90 	.word	0x0002ce90
    de7c:	0002cdd7 	.word	0x0002cdd7
    de80:	0000d479 	.word	0x0000d479

0000de84 <bt_gatt_notify_cb>:
{
    de84:	b530      	push	{r4, r5, lr}
    de86:	4b37      	ldr	r3, [pc, #220]	; (df64 <bt_gatt_notify_cb+0xe0>)
    de88:	f3bf 8f5b 	dmb	ish
    de8c:	681b      	ldr	r3, [r3, #0]
    de8e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    de92:	079a      	lsls	r2, r3, #30
{
    de94:	b08b      	sub	sp, #44	; 0x2c
    de96:	4604      	mov	r4, r0
    de98:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    de9a:	d55d      	bpl.n	df58 <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    de9c:	6848      	ldr	r0, [r1, #4]
    de9e:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    dea0:	b114      	cbz	r4, dea8 <bt_gatt_notify_cb+0x24>
    dea2:	7b63      	ldrb	r3, [r4, #13]
    dea4:	2b07      	cmp	r3, #7
    dea6:	d15a      	bne.n	df5e <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    dea8:	f7ff fe3c 	bl	db24 <bt_gatt_attr_get_handle>
    deac:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    deb0:	b918      	cbnz	r0, deba <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    deb2:	f06f 0001 	mvn.w	r0, #1
}
    deb6:	b00b      	add	sp, #44	; 0x2c
    deb8:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    deba:	682a      	ldr	r2, [r5, #0]
    debc:	b9aa      	cbnz	r2, deea <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    debe:	9b05      	ldr	r3, [sp, #20]
    dec0:	6818      	ldr	r0, [r3, #0]
    dec2:	2300      	movs	r3, #0
    dec4:	f88d 3010 	strb.w	r3, [sp, #16]
    dec8:	a904      	add	r1, sp, #16
    deca:	f642 0303 	movw	r3, #10243	; 0x2803
    dece:	f8ad 3012 	strh.w	r3, [sp, #18]
    ded2:	f016 fb37 	bl	24544 <bt_uuid_cmp>
    ded6:	b1c0      	cbz	r0, df0a <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
    ded8:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    dedc:	b314      	cbz	r4, df24 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    dede:	4601      	mov	r1, r0
    dee0:	462a      	mov	r2, r5
    dee2:	4620      	mov	r0, r4
    dee4:	f7ff f9be 	bl	d264 <gatt_notify>
    dee8:	e7e5      	b.n	deb6 <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    deea:	a905      	add	r1, sp, #20
    deec:	9102      	str	r1, [sp, #8]
    deee:	491e      	ldr	r1, [pc, #120]	; (df68 <bt_gatt_notify_cb+0xe4>)
    def0:	9101      	str	r1, [sp, #4]
    def2:	2101      	movs	r1, #1
	found->attr = NULL;
    def4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    def6:	9100      	str	r1, [sp, #0]
    def8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    defc:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    defe:	f7ff fe41 	bl	db84 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    df02:	9b05      	ldr	r3, [sp, #20]
    df04:	2b00      	cmp	r3, #0
    df06:	d1da      	bne.n	debe <bt_gatt_notify_cb+0x3a>
    df08:	e7d3      	b.n	deb2 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    df0a:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    df0c:	68c3      	ldr	r3, [r0, #12]
    df0e:	799b      	ldrb	r3, [r3, #6]
    df10:	06db      	lsls	r3, r3, #27
    df12:	d402      	bmi.n	df1a <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    df14:	f06f 0015 	mvn.w	r0, #21
    df18:	e7cd      	b.n	deb6 <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    df1a:	f017 fd58 	bl	259ce <bt_gatt_attr_value_handle>
    df1e:	f8ad 0018 	strh.w	r0, [sp, #24]
    df22:	e7d9      	b.n	ded8 <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df24:	f642 1202 	movw	r2, #10498	; 0x2902
    df28:	f8ad 2012 	strh.w	r2, [sp, #18]
    df2c:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    df2e:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df32:	9202      	str	r2, [sp, #8]
    df34:	4a0d      	ldr	r2, [pc, #52]	; (df6c <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    df36:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    df38:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df3a:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    df3e:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df42:	aa04      	add	r2, sp, #16
    df44:	4623      	mov	r3, r4
    df46:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    df4a:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    df4c:	f88d 4010 	strb.w	r4, [sp, #16]
    df50:	f7ff fe18 	bl	db84 <bt_gatt_foreach_attr_type>
	return data.err;
    df54:	9807      	ldr	r0, [sp, #28]
    df56:	e7ae      	b.n	deb6 <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    df58:	f06f 000a 	mvn.w	r0, #10
    df5c:	e7ab      	b.n	deb6 <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    df5e:	f06f 0038 	mvn.w	r0, #56	; 0x38
    df62:	e7a8      	b.n	deb6 <bt_gatt_notify_cb+0x32>
    df64:	20000094 	.word	0x20000094
    df68:	000255f9 	.word	0x000255f9
    df6c:	0000d695 	.word	0x0000d695

0000df70 <bt_gatt_indicate>:
{
    df70:	b530      	push	{r4, r5, lr}
    df72:	4b39      	ldr	r3, [pc, #228]	; (e058 <bt_gatt_indicate+0xe8>)
    df74:	f3bf 8f5b 	dmb	ish
    df78:	681b      	ldr	r3, [r3, #0]
    df7a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    df7e:	079a      	lsls	r2, r3, #30
{
    df80:	b08b      	sub	sp, #44	; 0x2c
    df82:	4604      	mov	r4, r0
    df84:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    df86:	d561      	bpl.n	e04c <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    df88:	6848      	ldr	r0, [r1, #4]
    df8a:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    df8c:	b114      	cbz	r4, df94 <bt_gatt_indicate+0x24>
    df8e:	7b63      	ldrb	r3, [r4, #13]
    df90:	2b07      	cmp	r3, #7
    df92:	d15e      	bne.n	e052 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    df94:	f7ff fdc6 	bl	db24 <bt_gatt_attr_get_handle>
    df98:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    df9c:	b918      	cbnz	r0, dfa6 <bt_gatt_indicate+0x36>
		return -ENOENT;
    df9e:	f06f 0001 	mvn.w	r0, #1
}
    dfa2:	b00b      	add	sp, #44	; 0x2c
    dfa4:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    dfa6:	682a      	ldr	r2, [r5, #0]
    dfa8:	b9ba      	cbnz	r2, dfda <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    dfaa:	9b05      	ldr	r3, [sp, #20]
    dfac:	6818      	ldr	r0, [r3, #0]
    dfae:	2300      	movs	r3, #0
    dfb0:	f88d 3010 	strb.w	r3, [sp, #16]
    dfb4:	a904      	add	r1, sp, #16
    dfb6:	f642 0303 	movw	r3, #10243	; 0x2803
    dfba:	f8ad 3012 	strh.w	r3, [sp, #18]
    dfbe:	f016 fac1 	bl	24544 <bt_uuid_cmp>
    dfc2:	b1d0      	cbz	r0, dffa <bt_gatt_indicate+0x8a>
		return gatt_indicate(conn, data.handle, params);
    dfc4:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    dfc8:	b324      	cbz	r4, e014 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    dfca:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    dfcc:	4601      	mov	r1, r0
		params->_ref = 1;
    dfce:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    dfd0:	462a      	mov	r2, r5
    dfd2:	4620      	mov	r0, r4
    dfd4:	f7ff f8f0 	bl	d1b8 <gatt_indicate>
    dfd8:	e7e3      	b.n	dfa2 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    dfda:	a905      	add	r1, sp, #20
    dfdc:	9102      	str	r1, [sp, #8]
    dfde:	491f      	ldr	r1, [pc, #124]	; (e05c <bt_gatt_indicate+0xec>)
    dfe0:	9101      	str	r1, [sp, #4]
    dfe2:	2101      	movs	r1, #1
	found->attr = NULL;
    dfe4:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    dfe6:	9100      	str	r1, [sp, #0]
    dfe8:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    dfec:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    dfee:	f7ff fdc9 	bl	db84 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    dff2:	9b05      	ldr	r3, [sp, #20]
    dff4:	2b00      	cmp	r3, #0
    dff6:	d1d8      	bne.n	dfaa <bt_gatt_indicate+0x3a>
    dff8:	e7d1      	b.n	df9e <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    dffa:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    dffc:	68c3      	ldr	r3, [r0, #12]
    dffe:	799b      	ldrb	r3, [r3, #6]
    e000:	069b      	lsls	r3, r3, #26
    e002:	d402      	bmi.n	e00a <bt_gatt_indicate+0x9a>
			return -EINVAL;
    e004:	f06f 0015 	mvn.w	r0, #21
    e008:	e7cb      	b.n	dfa2 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    e00a:	f017 fce0 	bl	259ce <bt_gatt_attr_value_handle>
    e00e:	f8ad 0018 	strh.w	r0, [sp, #24]
    e012:	e7d7      	b.n	dfc4 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    e014:	f06f 0338 	mvn.w	r3, #56	; 0x38
    e018:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    e01a:	2302      	movs	r3, #2
    e01c:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e020:	f642 1302 	movw	r3, #10498	; 0x2902
    e024:	f8ad 3012 	strh.w	r3, [sp, #18]
    e028:	ab05      	add	r3, sp, #20
    e02a:	9302      	str	r3, [sp, #8]
    e02c:	4b0c      	ldr	r3, [pc, #48]	; (e060 <bt_gatt_indicate+0xf0>)
    e02e:	9301      	str	r3, [sp, #4]
    e030:	2301      	movs	r3, #1
    e032:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    e034:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e036:	4623      	mov	r3, r4
    e038:	aa04      	add	r2, sp, #16
    e03a:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    e03e:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e040:	f88d 4010 	strb.w	r4, [sp, #16]
    e044:	f7ff fd9e 	bl	db84 <bt_gatt_foreach_attr_type>
	return data.err;
    e048:	9807      	ldr	r0, [sp, #28]
    e04a:	e7aa      	b.n	dfa2 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    e04c:	f06f 000a 	mvn.w	r0, #10
    e050:	e7a7      	b.n	dfa2 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    e052:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e056:	e7a4      	b.n	dfa2 <bt_gatt_indicate+0x32>
    e058:	20000094 	.word	0x20000094
    e05c:	000255f9 	.word	0x000255f9
    e060:	0000d695 	.word	0x0000d695

0000e064 <sc_process>:
{
    e064:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    e066:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    e06a:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e06e:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    e072:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    e074:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    e078:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e07c:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e080:	f06f 0101 	mvn.w	r1, #1
    e084:	4628      	mov	r0, r5
    e086:	f017 fb70 	bl	2576a <atomic_and.isra.0>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    e08a:	4b0d      	ldr	r3, [pc, #52]	; (e0c0 <sc_process+0x5c>)
    e08c:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    e090:	4b0c      	ldr	r3, [pc, #48]	; (e0c4 <sc_process+0x60>)
    e092:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    e096:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    e098:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    e09a:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    e09e:	2304      	movs	r3, #4
	sc->start = 0U;
    e0a0:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    e0a4:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    e0a8:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    e0ac:	4631      	mov	r1, r6
    e0ae:	f7ff ff5f 	bl	df70 <bt_gatt_indicate>
    e0b2:	b918      	cbnz	r0, e0bc <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e0b4:	2102      	movs	r1, #2
    e0b6:	4628      	mov	r0, r5
    e0b8:	f017 fb2b 	bl	25712 <atomic_or>
}
    e0bc:	b002      	add	sp, #8
    e0be:	bd70      	pop	{r4, r5, r6, pc}
    e0c0:	000280c8 	.word	0x000280c8
    e0c4:	0000da0d 	.word	0x0000da0d

0000e0c8 <update_ccc>:
{
    e0c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e0cc:	4b3e      	ldr	r3, [pc, #248]	; (e1c8 <update_ccc+0x100>)
	struct bt_conn *conn = data->conn;
    e0ce:	6815      	ldr	r5, [r2, #0]
{
    e0d0:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    e0d2:	6882      	ldr	r2, [r0, #8]
    e0d4:	429a      	cmp	r2, r3
{
    e0d6:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e0d8:	d11c      	bne.n	e114 <update_ccc+0x4c>
	ccc = attr->user_data;
    e0da:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    e0dc:	893b      	ldrh	r3, [r7, #8]
    e0de:	b1cb      	cbz	r3, e114 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e0e0:	463a      	mov	r2, r7
    e0e2:	4628      	mov	r0, r5
    e0e4:	f812 1b01 	ldrb.w	r1, [r2], #1
    e0e8:	f016 fd09 	bl	24afe <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    e0ec:	b190      	cbz	r0, e114 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    e0ee:	222a      	movs	r2, #42	; 0x2a
    e0f0:	4621      	mov	r1, r4
    e0f2:	4628      	mov	r0, r5
    e0f4:	f017 fce2 	bl	25abc <bt_gatt_check_perm>
		if (err) {
    e0f8:	b308      	cbz	r0, e13e <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    e0fa:	2803      	cmp	r0, #3
    e0fc:	d10e      	bne.n	e11c <update_ccc+0x54>
    e0fe:	4a33      	ldr	r2, [pc, #204]	; (e1cc <update_ccc+0x104>)
    e100:	4b33      	ldr	r3, [pc, #204]	; (e1d0 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
    e102:	4834      	ldr	r0, [pc, #208]	; (e1d4 <update_ccc+0x10c>)
    e104:	1ad2      	subs	r2, r2, r3
    e106:	08d2      	lsrs	r2, r2, #3
    e108:	0192      	lsls	r2, r2, #6
    e10a:	f042 0202 	orr.w	r2, r2, #2
    e10e:	4621      	mov	r1, r4
    e110:	f014 f8f9 	bl	22306 <log_1>
}
    e114:	2001      	movs	r0, #1
    e116:	b002      	add	sp, #8
    e118:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    e11c:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    e11e:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    e120:	bf14      	ite	ne
    e122:	f04f 0802 	movne.w	r8, #2
    e126:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    e12a:	f016 fcdd 	bl	24ae8 <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    e12e:	4580      	cmp	r8, r0
    e130:	d905      	bls.n	e13e <update_ccc+0x76>
				if (data->sec < sec) {
    e132:	7933      	ldrb	r3, [r6, #4]
    e134:	4543      	cmp	r3, r8
    e136:	d2ed      	bcs.n	e114 <update_ccc+0x4c>
					data->sec = sec;
    e138:	f886 8004 	strb.w	r8, [r6, #4]
    e13c:	e7ea      	b.n	e114 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
    e13e:	4639      	mov	r1, r7
    e140:	4620      	mov	r0, r4
    e142:	f017 fa3c 	bl	255be <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    e146:	4b24      	ldr	r3, [pc, #144]	; (e1d8 <update_ccc+0x110>)
    e148:	429f      	cmp	r7, r3
    e14a:	d1e3      	bne.n	e114 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e14c:	7a28      	ldrb	r0, [r5, #8]
    e14e:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e152:	f7ff fa37 	bl	d5c4 <find_sc_cfg>
	if (!cfg) {
    e156:	4604      	mov	r4, r0
    e158:	2800      	cmp	r0, #0
    e15a:	d0db      	beq.n	e114 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
    e15c:	8902      	ldrh	r2, [r0, #8]
    e15e:	8943      	ldrh	r3, [r0, #10]
    e160:	ea52 0103 	orrs.w	r1, r2, r3
    e164:	d0d6      	beq.n	e114 <update_ccc+0x4c>
	index = bt_conn_index(conn);
    e166:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    e168:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    e16c:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    e170:	f7fd fcda 	bl	bb28 <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e174:	4919      	ldr	r1, [pc, #100]	; (e1dc <update_ccc+0x114>)
    e176:	4a1a      	ldr	r2, [pc, #104]	; (e1e0 <update_ccc+0x118>)
    e178:	2318      	movs	r3, #24
    e17a:	fb03 1300 	mla	r3, r3, r0, r1
    e17e:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    e180:	4a18      	ldr	r2, [pc, #96]	; (e1e4 <update_ccc+0x11c>)
    e182:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    e184:	aa01      	add	r2, sp, #4
    e186:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    e188:	2204      	movs	r2, #4
    e18a:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e18c:	b203      	sxth	r3, r0
    e18e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e192:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e196:	4628      	mov	r0, r5
    e198:	f7ff feea 	bl	df70 <bt_gatt_indicate>
    e19c:	b148      	cbz	r0, e1b2 <update_ccc+0xea>
    e19e:	490b      	ldr	r1, [pc, #44]	; (e1cc <update_ccc+0x104>)
    e1a0:	4b0b      	ldr	r3, [pc, #44]	; (e1d0 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
    e1a2:	4811      	ldr	r0, [pc, #68]	; (e1e8 <update_ccc+0x120>)
    e1a4:	1ac9      	subs	r1, r1, r3
    e1a6:	08c9      	lsrs	r1, r1, #3
    e1a8:	0189      	lsls	r1, r1, #6
    e1aa:	f041 0101 	orr.w	r1, r1, #1
    e1ae:	f014 f89d 	bl	222ec <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    e1b2:	2204      	movs	r2, #4
    e1b4:	2100      	movs	r1, #0
    e1b6:	f104 0008 	add.w	r0, r4, #8
    e1ba:	f016 f8ce 	bl	2435a <memset>
		sc_store(cfg);
    e1be:	4620      	mov	r0, r4
    e1c0:	f7fe ffc8 	bl	d154 <sc_store>
    e1c4:	e7a6      	b.n	e114 <update_ccc+0x4c>
    e1c6:	bf00      	nop
    e1c8:	0000d505 	.word	0x0000d505
    e1cc:	0002780c 	.word	0x0002780c
    e1d0:	0002775c 	.word	0x0002775c
    e1d4:	0002cfa1 	.word	0x0002cfa1
    e1d8:	20000374 	.word	0x20000374
    e1dc:	2000d7b4 	.word	0x2000d7b4
    e1e0:	000280c8 	.word	0x000280c8
    e1e4:	00025985 	.word	0x00025985
    e1e8:	0002cfb5 	.word	0x0002cfb5

0000e1ec <bt_gatt_connected>:
{
    e1ec:	b570      	push	{r4, r5, r6, lr}
    e1ee:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e1f0:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    e1f4:	4604      	mov	r4, r0
	data.conn = conn;
    e1f6:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    e1f8:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e1fa:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    e1fc:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e200:	4629      	mov	r1, r5
    e202:	f016 fba3 	bl	2494c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e206:	b190      	cbz	r0, e22e <bt_gatt_connected+0x42>
		if (conn->id) {
    e208:	7a22      	ldrb	r2, [r4, #8]
    e20a:	b31a      	cbz	r2, e254 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e20c:	ae02      	add	r6, sp, #8
    e20e:	2104      	movs	r1, #4
    e210:	4630      	mov	r0, r6
    e212:	f013 fb22 	bl	2185a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e216:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e218:	4a0f      	ldr	r2, [pc, #60]	; (e258 <bt_gatt_connected+0x6c>)
    e21a:	2124      	movs	r1, #36	; 0x24
    e21c:	a805      	add	r0, sp, #20
    e21e:	462b      	mov	r3, r5
    e220:	f7fa f9b0 	bl	8584 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    e224:	aa05      	add	r2, sp, #20
    e226:	490d      	ldr	r1, [pc, #52]	; (e25c <bt_gatt_connected+0x70>)
    e228:	4610      	mov	r0, r2
    e22a:	f7f8 facd 	bl	67c8 <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e22e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e232:	4a0b      	ldr	r2, [pc, #44]	; (e260 <bt_gatt_connected+0x74>)
    e234:	ab03      	add	r3, sp, #12
    e236:	2001      	movs	r0, #1
    e238:	f017 fc17 	bl	25a6a <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    e23c:	4620      	mov	r0, r4
    e23e:	f016 fc53 	bl	24ae8 <bt_conn_get_security>
    e242:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    e246:	4288      	cmp	r0, r1
    e248:	d202      	bcs.n	e250 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    e24a:	4620      	mov	r0, r4
    e24c:	f016 fc1c 	bl	24a88 <bt_conn_set_security>
}
    e250:	b00e      	add	sp, #56	; 0x38
    e252:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e254:	9200      	str	r2, [sp, #0]
    e256:	e7df      	b.n	e218 <bt_gatt_connected+0x2c>
    e258:	0002cf91 	.word	0x0002cf91
    e25c:	0000dd75 	.word	0x0000dd75
    e260:	0000e0c9 	.word	0x0000e0c9

0000e264 <bt_gatt_encrypt_change>:
{
    e264:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e266:	4a06      	ldr	r2, [pc, #24]	; (e280 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    e268:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e26a:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    e26c:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e26e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    e272:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e276:	f017 fbf8 	bl	25a6a <bt_gatt_foreach_attr>
}
    e27a:	b003      	add	sp, #12
    e27c:	f85d fb04 	ldr.w	pc, [sp], #4
    e280:	0000e0c9 	.word	0x0000e0c9

0000e284 <db_hash_read>:
{
    e284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e286:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    e288:	4810      	ldr	r0, [pc, #64]	; (e2cc <db_hash_read+0x48>)
{
    e28a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e28e:	4615      	mov	r5, r2
    e290:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    e292:	f018 fee6 	bl	27062 <k_delayed_work_cancel>
	if (!err) {
    e296:	b910      	cbnz	r0, e29e <db_hash_read+0x1a>
		db_hash_gen(true);
    e298:	2001      	movs	r0, #1
    e29a:	f7ff fccd 	bl	dc38 <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    e29e:	2101      	movs	r1, #1
    e2a0:	4620      	mov	r0, r4
    e2a2:	f017 fc36 	bl	25b12 <bt_gatt_change_aware>
	if (offset > value_len) {
    e2a6:	2e10      	cmp	r6, #16
    e2a8:	d80c      	bhi.n	e2c4 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    e2aa:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    e2ae:	4908      	ldr	r1, [pc, #32]	; (e2d0 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    e2b0:	42bc      	cmp	r4, r7
    e2b2:	bfa8      	it	ge
    e2b4:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    e2b6:	4622      	mov	r2, r4
    e2b8:	4431      	add	r1, r6
    e2ba:	4628      	mov	r0, r5
    e2bc:	f016 f822 	bl	24304 <memcpy>
}
    e2c0:	4620      	mov	r0, r4
    e2c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e2c4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    e2c8:	e7fa      	b.n	e2c0 <db_hash_read+0x3c>
    e2ca:	bf00      	nop
    e2cc:	2000a7e0 	.word	0x2000a7e0
    e2d0:	2000f2ec 	.word	0x2000f2ec

0000e2d4 <bt_gatt_store_ccc>:
{
    e2d4:	b570      	push	{r4, r5, r6, lr}
    e2d6:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    e2d8:	2300      	movs	r3, #0
{
    e2da:	4604      	mov	r4, r0
    e2dc:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    e2de:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    e2e0:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    e2e4:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    e2e6:	4a18      	ldr	r2, [pc, #96]	; (e348 <bt_gatt_store_ccc+0x74>)
    e2e8:	ab0d      	add	r3, sp, #52	; 0x34
    e2ea:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e2ee:	2001      	movs	r0, #1
    e2f0:	f017 fbbb 	bl	25a6a <bt_gatt_foreach_attr>
	if (id) {
    e2f4:	b31c      	cbz	r4, e33e <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    e2f6:	ae03      	add	r6, sp, #12
    e2f8:	4622      	mov	r2, r4
    e2fa:	2104      	movs	r1, #4
    e2fc:	4630      	mov	r0, r6
    e2fe:	f013 faac 	bl	2185a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    e302:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e304:	4a11      	ldr	r2, [pc, #68]	; (e34c <bt_gatt_store_ccc+0x78>)
    e306:	462b      	mov	r3, r5
    e308:	2124      	movs	r1, #36	; 0x24
    e30a:	a804      	add	r0, sp, #16
    e30c:	f7fa f93a 	bl	8584 <bt_settings_encode_key>
	if (save.count) {
    e310:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    e312:	b1b2      	cbz	r2, e342 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    e314:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    e316:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    e318:	a804      	add	r0, sp, #16
    e31a:	f7f8 f9f5 	bl	6708 <settings_save_one>
	if (err) {
    e31e:	4604      	mov	r4, r0
    e320:	b150      	cbz	r0, e338 <bt_gatt_store_ccc+0x64>
    e322:	4a0b      	ldr	r2, [pc, #44]	; (e350 <bt_gatt_store_ccc+0x7c>)
    e324:	4b0b      	ldr	r3, [pc, #44]	; (e354 <bt_gatt_store_ccc+0x80>)
    e326:	1ad2      	subs	r2, r2, r3
    e328:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    e32a:	0192      	lsls	r2, r2, #6
    e32c:	4601      	mov	r1, r0
    e32e:	f042 0201 	orr.w	r2, r2, #1
    e332:	4809      	ldr	r0, [pc, #36]	; (e358 <bt_gatt_store_ccc+0x84>)
    e334:	f013 ffe7 	bl	22306 <log_1>
}
    e338:	4620      	mov	r0, r4
    e33a:	b040      	add	sp, #256	; 0x100
    e33c:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e33e:	9400      	str	r4, [sp, #0]
    e340:	e7e0      	b.n	e304 <bt_gatt_store_ccc+0x30>
		str = NULL;
    e342:	4611      	mov	r1, r2
    e344:	e7e8      	b.n	e318 <bt_gatt_store_ccc+0x44>
    e346:	bf00      	nop
    e348:	0000d441 	.word	0x0000d441
    e34c:	0002cf91 	.word	0x0002cf91
    e350:	0002780c 	.word	0x0002780c
    e354:	0002775c 	.word	0x0002775c
    e358:	0002cfd2 	.word	0x0002cfd2

0000e35c <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
    e35c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e35e:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    e360:	ae03      	add	r6, sp, #12
{
    e362:	4604      	mov	r4, r0
    e364:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
    e366:	9103      	str	r1, [sp, #12]
    e368:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    e36c:	4a1f      	ldr	r2, [pc, #124]	; (e3ec <bt_gatt_clear+0x90>)
    e36e:	4633      	mov	r3, r6
    e370:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e374:	2001      	movs	r0, #1
    e376:	f017 fb78 	bl	25a6a <bt_gatt_foreach_attr>
		if (id) {
    e37a:	b394      	cbz	r4, e3e2 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
    e37c:	af02      	add	r7, sp, #8
    e37e:	4622      	mov	r2, r4
    e380:	2104      	movs	r1, #4
    e382:	4638      	mov	r0, r7
    e384:	f013 fa69 	bl	2185a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e388:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e38a:	4a19      	ldr	r2, [pc, #100]	; (e3f0 <bt_gatt_clear+0x94>)
    e38c:	462b      	mov	r3, r5
    e38e:	2124      	movs	r1, #36	; 0x24
    e390:	a805      	add	r0, sp, #20
    e392:	f7fa f8f7 	bl	8584 <bt_settings_encode_key>
		return settings_delete(key);
    e396:	a805      	add	r0, sp, #20
    e398:	f014 fc36 	bl	22c08 <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
    e39c:	2800      	cmp	r0, #0
    e39e:	db1e      	blt.n	e3de <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
    e3a0:	4629      	mov	r1, r5
    e3a2:	4620      	mov	r0, r4
    e3a4:	f7ff f9e6 	bl	d774 <bt_gatt_clear_sc>
		if (err < 0) {
    e3a8:	2800      	cmp	r0, #0
    e3aa:	db18      	blt.n	e3de <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
    e3ac:	4629      	mov	r1, r5
    e3ae:	4620      	mov	r0, r4
    e3b0:	f7fe ff92 	bl	d2d8 <find_cf_cfg_by_addr>
	if (cfg) {
    e3b4:	b108      	cbz	r0, e3ba <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
    e3b6:	f017 f9bb 	bl	25730 <clear_cf_cfg>
		if (id) {
    e3ba:	b1a4      	cbz	r4, e3e6 <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
    e3bc:	4622      	mov	r2, r4
    e3be:	2104      	movs	r1, #4
    e3c0:	4630      	mov	r0, r6
    e3c2:	f013 fa4a 	bl	2185a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e3c6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
    e3c8:	4a0a      	ldr	r2, [pc, #40]	; (e3f4 <bt_gatt_clear+0x98>)
    e3ca:	462b      	mov	r3, r5
    e3cc:	2124      	movs	r1, #36	; 0x24
    e3ce:	a805      	add	r0, sp, #20
    e3d0:	f7fa f8d8 	bl	8584 <bt_settings_encode_key>
		return settings_delete(key);
    e3d4:	a805      	add	r0, sp, #20
    e3d6:	f014 fc17 	bl	22c08 <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
    e3da:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
    e3de:	b00f      	add	sp, #60	; 0x3c
    e3e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e3e2:	9400      	str	r4, [sp, #0]
    e3e4:	e7d1      	b.n	e38a <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e3e6:	9400      	str	r4, [sp, #0]
    e3e8:	e7ee      	b.n	e3c8 <bt_gatt_clear+0x6c>
    e3ea:	bf00      	nop
    e3ec:	0000d419 	.word	0x0000d419
    e3f0:	0002cf91 	.word	0x0002cf91
    e3f4:	0002d01c 	.word	0x0002d01c

0000e3f8 <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    e3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
    e3fa:	4604      	mov	r4, r0
    e3fc:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e3fe:	4603      	mov	r3, r0
    e400:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e404:	2001      	movs	r0, #1
    e406:	4a3a      	ldr	r2, [pc, #232]	; (e4f0 <bt_gatt_disconnected+0xf8>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e408:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e40c:	f017 fb2d 	bl	25a6a <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e410:	7a20      	ldrb	r0, [r4, #8]
    e412:	4629      	mov	r1, r5
    e414:	f016 fa9a 	bl	2494c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e418:	2800      	cmp	r0, #0
    e41a:	d035      	beq.n	e488 <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    e41c:	4629      	mov	r1, r5
    e41e:	7a20      	ldrb	r0, [r4, #8]
    e420:	f7ff ff58 	bl	e2d4 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    e424:	4620      	mov	r0, r4
    e426:	f7fe fe0f 	bl	d048 <find_cf_cfg>
	if (!cfg) {
    e42a:	4606      	mov	r6, r0
    e42c:	2800      	cmp	r0, #0
    e42e:	d04b      	beq.n	e4c8 <bt_gatt_disconnected+0xd0>
		if (conn->id) {
    e430:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    e432:	3608      	adds	r6, #8
		if (conn->id) {
    e434:	2a00      	cmp	r2, #0
    e436:	d049      	beq.n	e4cc <bt_gatt_disconnected+0xd4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e438:	af02      	add	r7, sp, #8
    e43a:	2104      	movs	r1, #4
    e43c:	4638      	mov	r0, r7
    e43e:	f013 fa0c 	bl	2185a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e442:	9700      	str	r7, [sp, #0]
    e444:	462b      	mov	r3, r5
    e446:	4a2b      	ldr	r2, [pc, #172]	; (e4f4 <bt_gatt_disconnected+0xfc>)
    e448:	2124      	movs	r1, #36	; 0x24
    e44a:	a803      	add	r0, sp, #12
    e44c:	f7fa f89a 	bl	8584 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    e450:	7a23      	ldrb	r3, [r4, #8]
    e452:	2701      	movs	r7, #1
    e454:	b93b      	cbnz	r3, e466 <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    e456:	2300      	movs	r3, #0
    e458:	9300      	str	r3, [sp, #0]
    e45a:	4a26      	ldr	r2, [pc, #152]	; (e4f4 <bt_gatt_disconnected+0xfc>)
    e45c:	462b      	mov	r3, r5
    e45e:	2124      	movs	r1, #36	; 0x24
    e460:	a803      	add	r0, sp, #12
    e462:	f7fa f88f 	bl	8584 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    e466:	4631      	mov	r1, r6
    e468:	463a      	mov	r2, r7
    e46a:	a803      	add	r0, sp, #12
    e46c:	f7f8 f94c 	bl	6708 <settings_save_one>
	if (err) {
    e470:	4601      	mov	r1, r0
    e472:	b148      	cbz	r0, e488 <bt_gatt_disconnected+0x90>
    e474:	4a20      	ldr	r2, [pc, #128]	; (e4f8 <bt_gatt_disconnected+0x100>)
    e476:	4b21      	ldr	r3, [pc, #132]	; (e4fc <bt_gatt_disconnected+0x104>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    e478:	4821      	ldr	r0, [pc, #132]	; (e500 <bt_gatt_disconnected+0x108>)
    e47a:	1ad2      	subs	r2, r2, r3
    e47c:	08d2      	lsrs	r2, r2, #3
    e47e:	0192      	lsls	r2, r2, #6
    e480:	f042 0201 	orr.w	r2, r2, #1
    e484:	f013 ff3f 	bl	22306 <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e488:	7a20      	ldrb	r0, [r4, #8]
    e48a:	4629      	mov	r1, r5
    e48c:	f016 fa5e 	bl	2494c <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e490:	b150      	cbz	r0, e4a8 <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    e492:	7a23      	ldrb	r3, [r4, #8]
    e494:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e498:	4a1a      	ldr	r2, [pc, #104]	; (e504 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
    e49a:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e49c:	ab03      	add	r3, sp, #12
    e49e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e4a2:	2001      	movs	r0, #1
    e4a4:	f017 fae1 	bl	25a6a <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    e4a8:	4620      	mov	r0, r4
    e4aa:	f7fe fdcd 	bl	d048 <find_cf_cfg>
	if (!cfg) {
    e4ae:	4606      	mov	r6, r0
    e4b0:	b1d8      	cbz	r0, e4ea <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e4b2:	7a20      	ldrb	r0, [r4, #8]
    e4b4:	4629      	mov	r1, r5
    e4b6:	f016 fa49 	bl	2494c <bt_addr_le_is_bonded>
    e4ba:	b948      	cbnz	r0, e4d0 <bt_gatt_disconnected+0xd8>
		clear_cf_cfg(cfg);
    e4bc:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    e4be:	b00d      	add	sp, #52	; 0x34
    e4c0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
    e4c4:	f017 b934 	b.w	25730 <clear_cf_cfg>
		len = 0;
    e4c8:	4607      	mov	r7, r0
    e4ca:	e7c4      	b.n	e456 <bt_gatt_disconnected+0x5e>
    e4cc:	2701      	movs	r7, #1
    e4ce:	e7c2      	b.n	e456 <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e4d0:	4629      	mov	r1, r5
    e4d2:	1c70      	adds	r0, r6, #1
    e4d4:	f017 f896 	bl	25604 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e4d8:	f06f 0102 	mvn.w	r1, #2
    e4dc:	f106 000c 	add.w	r0, r6, #12
}
    e4e0:	b00d      	add	sp, #52	; 0x34
    e4e2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e4e6:	f017 b940 	b.w	2576a <atomic_and.isra.0>
    e4ea:	b00d      	add	sp, #52	; 0x34
    e4ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e4ee:	bf00      	nop
    e4f0:	0000d83d 	.word	0x0000d83d
    e4f4:	0002d01c 	.word	0x0002d01c
    e4f8:	0002780c 	.word	0x0002780c
    e4fc:	0002775c 	.word	0x0002775c
    e500:	0002cff0 	.word	0x0002cff0
    e504:	0000d419 	.word	0x0000d419

0000e508 <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    e508:	4b10      	ldr	r3, [pc, #64]	; (e54c <get_io_capa+0x44>)
    e50a:	681b      	ldr	r3, [r3, #0]
    e50c:	b1bb      	cbz	r3, e53e <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    e50e:	681a      	ldr	r2, [r3, #0]
    e510:	b142      	cbz	r2, e524 <get_io_capa+0x1c>
    e512:	6859      	ldr	r1, [r3, #4]
    e514:	b131      	cbz	r1, e524 <get_io_capa+0x1c>
    e516:	6899      	ldr	r1, [r3, #8]
    e518:	b911      	cbnz	r1, e520 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    e51a:	490d      	ldr	r1, [pc, #52]	; (e550 <get_io_capa+0x48>)
    e51c:	7809      	ldrb	r1, [r1, #0]
    e51e:	b939      	cbnz	r1, e530 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    e520:	2004      	movs	r0, #4
    e522:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    e524:	490a      	ldr	r1, [pc, #40]	; (e550 <get_io_capa+0x48>)
    e526:	7809      	ldrb	r1, [r1, #0]
    e528:	b111      	cbz	r1, e530 <get_io_capa+0x28>
    e52a:	b10a      	cbz	r2, e530 <get_io_capa+0x28>
    e52c:	6899      	ldr	r1, [r3, #8]
    e52e:	b941      	cbnz	r1, e542 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    e530:	685b      	ldr	r3, [r3, #4]
    e532:	b943      	cbnz	r3, e546 <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    e534:	2a00      	cmp	r2, #0
    e536:	bf0c      	ite	eq
    e538:	2003      	moveq	r0, #3
    e53a:	2000      	movne	r0, #0
    e53c:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    e53e:	2003      	movs	r0, #3
    e540:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    e542:	2001      	movs	r0, #1
    e544:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    e546:	2002      	movs	r0, #2
	}
}
    e548:	4770      	bx	lr
    e54a:	bf00      	nop
    e54c:	2000d73c 	.word	0x2000d73c
    e550:	2000f30d 	.word	0x2000f30d

0000e554 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    e554:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    e556:	1d14      	adds	r4, r2, #4
{
    e558:	b08b      	sub	sp, #44	; 0x2c
    e55a:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    e55c:	588b      	ldr	r3, [r1, r2]
    e55e:	9301      	str	r3, [sp, #4]
{
    e560:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    e562:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    e564:	4628      	mov	r0, r5
    e566:	4621      	mov	r1, r4
    e568:	f017 fb07 	bl	25b7a <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    e56c:	4631      	mov	r1, r6
    e56e:	2210      	movs	r2, #16
    e570:	a802      	add	r0, sp, #8
    e572:	f017 faf8 	bl	25b66 <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    e576:	ab06      	add	r3, sp, #24
    e578:	4622      	mov	r2, r4
    e57a:	4629      	mov	r1, r5
    e57c:	a802      	add	r0, sp, #8
    e57e:	f017 fb0b 	bl	25b98 <bt_smp_aes_cmac>
	if (err) {
    e582:	4606      	mov	r6, r0
    e584:	b160      	cbz	r0, e5a0 <smp_sign_buf+0x4c>
    e586:	4910      	ldr	r1, [pc, #64]	; (e5c8 <smp_sign_buf+0x74>)
    e588:	4b10      	ldr	r3, [pc, #64]	; (e5cc <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    e58a:	4811      	ldr	r0, [pc, #68]	; (e5d0 <smp_sign_buf+0x7c>)
    e58c:	1ac9      	subs	r1, r1, r3
    e58e:	08c9      	lsrs	r1, r1, #3
    e590:	0189      	lsls	r1, r1, #6
    e592:	f041 0101 	orr.w	r1, r1, #1
    e596:	f013 fea9 	bl	222ec <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    e59a:	4630      	mov	r0, r6
    e59c:	b00b      	add	sp, #44	; 0x2c
    e59e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    e5a0:	a806      	add	r0, sp, #24
    e5a2:	2110      	movs	r1, #16
    e5a4:	f017 fae9 	bl	25b7a <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    e5a8:	2204      	movs	r2, #4
    e5aa:	eb0d 0102 	add.w	r1, sp, r2
    e5ae:	a807      	add	r0, sp, #28
    e5b0:	f015 fea8 	bl	24304 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    e5b4:	4621      	mov	r1, r4
    e5b6:	4628      	mov	r0, r5
    e5b8:	f017 fadf 	bl	25b7a <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    e5bc:	220c      	movs	r2, #12
    e5be:	a907      	add	r1, sp, #28
    e5c0:	4638      	mov	r0, r7
    e5c2:	f015 fe9f 	bl	24304 <memcpy>
	return 0;
    e5c6:	e7e8      	b.n	e59a <smp_sign_buf+0x46>
    e5c8:	00027844 	.word	0x00027844
    e5cc:	0002775c 	.word	0x0002775c
    e5d0:	0002d02d 	.word	0x0002d02d

0000e5d4 <smp_chan_get>:
{
    e5d4:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e5d6:	2106      	movs	r1, #6
    e5d8:	f016 fbe4 	bl	24da4 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e5dc:	4604      	mov	r4, r0
    e5de:	b948      	cbnz	r0, e5f4 <smp_chan_get+0x20>
    e5e0:	4905      	ldr	r1, [pc, #20]	; (e5f8 <smp_chan_get+0x24>)
    e5e2:	4b06      	ldr	r3, [pc, #24]	; (e5fc <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    e5e4:	4806      	ldr	r0, [pc, #24]	; (e600 <smp_chan_get+0x2c>)
    e5e6:	1ac9      	subs	r1, r1, r3
    e5e8:	08c9      	lsrs	r1, r1, #3
    e5ea:	0189      	lsls	r1, r1, #6
    e5ec:	f041 0101 	orr.w	r1, r1, #1
    e5f0:	f013 fe7c 	bl	222ec <log_0>
}
    e5f4:	4620      	mov	r0, r4
    e5f6:	bd10      	pop	{r4, pc}
    e5f8:	00027844 	.word	0x00027844
    e5fc:	0002775c 	.word	0x0002775c
    e600:	0002d041 	.word	0x0002d041

0000e604 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    e604:	4a0b      	ldr	r2, [pc, #44]	; (e634 <bt_smp_accept+0x30>)
{
    e606:	b508      	push	{r3, lr}
    e608:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    e60a:	6810      	ldr	r0, [r2, #0]
    e60c:	b918      	cbnz	r0, e616 <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    e60e:	4b0a      	ldr	r3, [pc, #40]	; (e638 <bt_smp_accept+0x34>)
    e610:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    e612:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    e614:	bd08      	pop	{r3, pc}
    e616:	4909      	ldr	r1, [pc, #36]	; (e63c <bt_smp_accept+0x38>)
    e618:	4a09      	ldr	r2, [pc, #36]	; (e640 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    e61a:	480a      	ldr	r0, [pc, #40]	; (e644 <bt_smp_accept+0x40>)
    e61c:	1a52      	subs	r2, r2, r1
    e61e:	08d2      	lsrs	r2, r2, #3
    e620:	0192      	lsls	r2, r2, #6
    e622:	f042 0201 	orr.w	r2, r2, #1
    e626:	4619      	mov	r1, r3
    e628:	f013 fe6d 	bl	22306 <log_1>
	return -ENOMEM;
    e62c:	f06f 000b 	mvn.w	r0, #11
    e630:	e7f0      	b.n	e614 <bt_smp_accept+0x10>
    e632:	bf00      	nop
    e634:	2000a868 	.word	0x2000a868
    e638:	00028244 	.word	0x00028244
    e63c:	0002775c 	.word	0x0002775c
    e640:	00027844 	.word	0x00027844
    e644:	0002d05c 	.word	0x0002d05c

0000e648 <get_auth.constprop.0>:
	if (sc_supported) {
    e648:	4b0c      	ldr	r3, [pc, #48]	; (e67c <get_auth.constprop.0+0x34>)
    e64a:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    e64c:	b510      	push	{r4, lr}
	if (sc_supported) {
    e64e:	b17b      	cbz	r3, e670 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    e650:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e654:	f7ff ff58 	bl	e508 <get_io_capa>
	if (bondable) {
    e658:	4b09      	ldr	r3, [pc, #36]	; (e680 <get_auth.constprop.0+0x38>)
    e65a:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e65c:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    e65e:	bf0c      	ite	eq
    e660:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    e664:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    e668:	b12b      	cbz	r3, e676 <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    e66a:	f044 0001 	orr.w	r0, r4, #1
}
    e66e:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    e670:	f000 0407 	and.w	r4, r0, #7
    e674:	e7ee      	b.n	e654 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    e676:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    e67a:	e7f8      	b.n	e66e <get_auth.constprop.0+0x26>
    e67c:	2000f30d 	.word	0x2000f30d
    e680:	20009d7c 	.word	0x20009d7c

0000e684 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e684:	b513      	push	{r0, r1, r4, lr}
    e686:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e688:	2200      	movs	r2, #0
    e68a:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e68c:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e68e:	460a      	mov	r2, r1
    e690:	6800      	ldr	r0, [r0, #0]
    e692:	2106      	movs	r1, #6
    e694:	f016 fb5d 	bl	24d52 <bt_l2cap_send_cb>
    e698:	4805      	ldr	r0, [pc, #20]	; (e6b0 <smp_send.constprop.0+0x2c>)
    e69a:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e69e:	2300      	movs	r3, #0
    e6a0:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    e6a4:	b002      	add	sp, #8
    e6a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e6aa:	f011 bf83 	b.w	205b4 <k_delayed_work_submit_to_queue>
    e6ae:	bf00      	nop
    e6b0:	2000aca0 	.word	0x2000aca0

0000e6b4 <smp_init>:
{
    e6b4:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e6b6:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    e6ba:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e6bc:	22f0      	movs	r2, #240	; 0xf0
    e6be:	2100      	movs	r1, #0
    e6c0:	4628      	mov	r0, r5
    e6c2:	f015 fe4a 	bl	2435a <memset>
	if (bt_rand(smp->prnd, 16)) {
    e6c6:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    e6ca:	2110      	movs	r1, #16
    e6cc:	f004 fe70 	bl	133b0 <bt_rand>
    e6d0:	4604      	mov	r4, r0
    e6d2:	b948      	cbnz	r0, e6e8 <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e6d4:	2105      	movs	r1, #5
    e6d6:	4628      	mov	r0, r5
    e6d8:	f017 fafc 	bl	25cd4 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    e6dc:	f7fc fc50 	bl	af80 <bt_pub_key_get>
    e6e0:	4b02      	ldr	r3, [pc, #8]	; (e6ec <smp_init+0x38>)
    e6e2:	6018      	str	r0, [r3, #0]
}
    e6e4:	4620      	mov	r0, r4
    e6e6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e6e8:	2408      	movs	r4, #8
    e6ea:	e7fb      	b.n	e6e4 <smp_init+0x30>
    e6ec:	2000d7d0 	.word	0x2000d7d0

0000e6f0 <smp_dhkey_generate>:
{
    e6f0:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e6f2:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    e6f6:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e6f8:	2108      	movs	r1, #8
    e6fa:	4628      	mov	r0, r5
    e6fc:	f017 faea 	bl	25cd4 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    e700:	490a      	ldr	r1, [pc, #40]	; (e72c <smp_dhkey_generate+0x3c>)
    e702:	f204 100f 	addw	r0, r4, #271	; 0x10f
    e706:	f7fc fc49 	bl	af9c <bt_dh_key_gen>
	if (err) {
    e70a:	b170      	cbz	r0, e72a <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e70c:	2108      	movs	r1, #8
    e70e:	4628      	mov	r0, r5
    e710:	f017 fad1 	bl	25cb6 <atomic_clear_bit>
    e714:	4b06      	ldr	r3, [pc, #24]	; (e730 <smp_dhkey_generate+0x40>)
    e716:	4907      	ldr	r1, [pc, #28]	; (e734 <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    e718:	4807      	ldr	r0, [pc, #28]	; (e738 <smp_dhkey_generate+0x48>)
    e71a:	1ac9      	subs	r1, r1, r3
    e71c:	08c9      	lsrs	r1, r1, #3
    e71e:	0189      	lsls	r1, r1, #6
    e720:	f041 0101 	orr.w	r1, r1, #1
    e724:	f013 fde2 	bl	222ec <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    e728:	2008      	movs	r0, #8
}
    e72a:	bd38      	pop	{r3, r4, r5, pc}
    e72c:	000261ad 	.word	0x000261ad
    e730:	0002775c 	.word	0x0002775c
    e734:	00027844 	.word	0x00027844
    e738:	0002d081 	.word	0x0002d081

0000e73c <smp_find>:
{
    e73c:	4601      	mov	r1, r0
    e73e:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    e740:	4803      	ldr	r0, [pc, #12]	; (e750 <smp_find+0x14>)
    e742:	f017 fade 	bl	25d02 <atomic_test_bit>
	return NULL;
    e746:	2800      	cmp	r0, #0
}
    e748:	4802      	ldr	r0, [pc, #8]	; (e754 <smp_find+0x18>)
    e74a:	bf08      	it	eq
    e74c:	2000      	moveq	r0, #0
    e74e:	bd08      	pop	{r3, pc}
    e750:	2000a924 	.word	0x2000a924
    e754:	2000a868 	.word	0x2000a868

0000e758 <smp_ident_info>:
{
    e758:	b570      	push	{r4, r5, r6, lr}
    e75a:	460b      	mov	r3, r1
    e75c:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e75e:	210d      	movs	r1, #13
    e760:	30bc      	adds	r0, #188	; 0xbc
    e762:	f017 face 	bl	25d02 <atomic_test_bit>
    e766:	b308      	cbz	r0, e7ac <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e768:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e76a:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e76c:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e770:	7a19      	ldrb	r1, [r3, #8]
    e772:	462a      	mov	r2, r5
    e774:	2002      	movs	r0, #2
    e776:	f017 fdae 	bl	262d6 <bt_keys_get_type>
		if (!keys) {
    e77a:	b990      	cbnz	r0, e7a2 <smp_ident_info+0x4a>
    e77c:	4a0f      	ldr	r2, [pc, #60]	; (e7bc <smp_ident_info+0x64>)
    e77e:	4c10      	ldr	r4, [pc, #64]	; (e7c0 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e780:	4628      	mov	r0, r5
    e782:	1aa4      	subs	r4, r4, r2
    e784:	f7f9 fc50 	bl	8028 <bt_addr_le_str_real>
    e788:	f7f6 feba 	bl	5500 <log_strdup>
    e78c:	08e4      	lsrs	r4, r4, #3
    e78e:	01a4      	lsls	r4, r4, #6
    e790:	f044 0401 	orr.w	r4, r4, #1
    e794:	4601      	mov	r1, r0
    e796:	4622      	mov	r2, r4
    e798:	480a      	ldr	r0, [pc, #40]	; (e7c4 <smp_ident_info+0x6c>)
    e79a:	f013 fdb4 	bl	22306 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e79e:	2008      	movs	r0, #8
}
    e7a0:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e7a2:	2210      	movs	r2, #16
    e7a4:	4631      	mov	r1, r6
    e7a6:	302a      	adds	r0, #42	; 0x2a
    e7a8:	f015 fdac 	bl	24304 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e7ac:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e7b0:	2109      	movs	r1, #9
    e7b2:	f017 fa8f 	bl	25cd4 <atomic_set_bit>
	return 0;
    e7b6:	2000      	movs	r0, #0
    e7b8:	e7f2      	b.n	e7a0 <smp_ident_info+0x48>
    e7ba:	bf00      	nop
    e7bc:	0002775c 	.word	0x0002775c
    e7c0:	00027844 	.word	0x00027844
    e7c4:	0002d09a 	.word	0x0002d09a

0000e7c8 <smp_encrypt_info>:
{
    e7c8:	b570      	push	{r4, r5, r6, lr}
    e7ca:	460b      	mov	r3, r1
    e7cc:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e7ce:	210d      	movs	r1, #13
    e7d0:	30bc      	adds	r0, #188	; 0xbc
    e7d2:	f017 fa96 	bl	25d02 <atomic_test_bit>
    e7d6:	b308      	cbz	r0, e81c <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e7d8:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e7da:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e7dc:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e7e0:	7a19      	ldrb	r1, [r3, #8]
    e7e2:	462a      	mov	r2, r5
    e7e4:	2004      	movs	r0, #4
    e7e6:	f017 fd76 	bl	262d6 <bt_keys_get_type>
		if (!keys) {
    e7ea:	b990      	cbnz	r0, e812 <smp_encrypt_info+0x4a>
    e7ec:	4a0f      	ldr	r2, [pc, #60]	; (e82c <smp_encrypt_info+0x64>)
    e7ee:	4c10      	ldr	r4, [pc, #64]	; (e830 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e7f0:	4628      	mov	r0, r5
    e7f2:	1aa4      	subs	r4, r4, r2
    e7f4:	f7f9 fc18 	bl	8028 <bt_addr_le_str_real>
    e7f8:	f7f6 fe82 	bl	5500 <log_strdup>
    e7fc:	08e4      	lsrs	r4, r4, #3
    e7fe:	01a4      	lsls	r4, r4, #6
    e800:	f044 0401 	orr.w	r4, r4, #1
    e804:	4601      	mov	r1, r0
    e806:	4622      	mov	r2, r4
    e808:	480a      	ldr	r0, [pc, #40]	; (e834 <smp_encrypt_info+0x6c>)
    e80a:	f013 fd7c 	bl	22306 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e80e:	2008      	movs	r0, #8
}
    e810:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e812:	2210      	movs	r2, #16
    e814:	4631      	mov	r1, r6
    e816:	301a      	adds	r0, #26
    e818:	f015 fd74 	bl	24304 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e81c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e820:	2107      	movs	r1, #7
    e822:	f017 fa57 	bl	25cd4 <atomic_set_bit>
	return 0;
    e826:	2000      	movs	r0, #0
    e828:	e7f2      	b.n	e810 <smp_encrypt_info+0x48>
    e82a:	bf00      	nop
    e82c:	0002775c 	.word	0x0002775c
    e830:	00027844 	.word	0x00027844
    e834:	0002d09a 	.word	0x0002d09a

0000e838 <smp_pairing_req>:
{
    e838:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e83c:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e83e:	78fb      	ldrb	r3, [r7, #3]
    e840:	3b07      	subs	r3, #7
    e842:	2b09      	cmp	r3, #9
{
    e844:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e846:	d904      	bls.n	e852 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e848:	2706      	movs	r7, #6
}
    e84a:	4638      	mov	r0, r7
    e84c:	b002      	add	sp, #8
    e84e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    e852:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
    e854:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    e858:	b163      	cbz	r3, e874 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e85a:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    e85e:	210f      	movs	r1, #15
    e860:	4628      	mov	r0, r5
    e862:	f017 fa4e 	bl	25d02 <atomic_test_bit>
    e866:	b980      	cbnz	r0, e88a <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    e868:	4620      	mov	r0, r4
    e86a:	f7ff ff23 	bl	e6b4 <smp_init>
		if (ret) {
    e86e:	b160      	cbz	r0, e88a <smp_pairing_req+0x52>
			return ret;
    e870:	b2c7      	uxtb	r7, r0
    e872:	e7ea      	b.n	e84a <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e874:	7a30      	ldrb	r0, [r6, #8]
    e876:	f106 0188 	add.w	r1, r6, #136	; 0x88
    e87a:	f001 fc69 	bl	10150 <bt_keys_get_addr>
    e87e:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    e882:	2800      	cmp	r0, #0
    e884:	d1e9      	bne.n	e85a <smp_pairing_req+0x22>
	switch (conn->required_sec_level) {
    e886:	2708      	movs	r7, #8
    e888:	e7df      	b.n	e84a <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e88a:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e88c:	2206      	movs	r2, #6
    e88e:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e890:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e894:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    e898:	f015 fd34 	bl	24304 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    e89c:	2302      	movs	r3, #2
    e89e:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    e8a2:	78b8      	ldrb	r0, [r7, #2]
    e8a4:	f7ff fed0 	bl	e648 <get_auth.constprop.0>
    e8a8:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    e8ac:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    e8ae:	f7ff fe2b 	bl	e508 <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e8b2:	4b9e      	ldr	r3, [pc, #632]	; (eb2c <smp_pairing_req+0x2f4>)
	rsp->io_capability = get_io_capa();
    e8b4:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    e8b8:	781b      	ldrb	r3, [r3, #0]
    e8ba:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    e8be:	2310      	movs	r3, #16
    e8c0:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    e8c4:	793b      	ldrb	r3, [r7, #4]
    e8c6:	f003 0307 	and.w	r3, r3, #7
    e8ca:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e8ce:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e8d0:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    e8d4:	f003 0307 	and.w	r3, r3, #7
    e8d8:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    e8dc:	d012      	beq.n	e904 <smp_pairing_req+0xcc>
    e8de:	78bb      	ldrb	r3, [r7, #2]
    e8e0:	0719      	lsls	r1, r3, #28
    e8e2:	d50f      	bpl.n	e904 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    e8e4:	2105      	movs	r1, #5
    e8e6:	4628      	mov	r0, r5
    e8e8:	f017 f9f4 	bl	25cd4 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    e8ec:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e8f0:	f003 0306 	and.w	r3, r3, #6
    e8f4:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    e8f8:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    e8fc:	f003 0306 	and.w	r3, r3, #6
    e900:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    e904:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e908:	069a      	lsls	r2, r3, #26
    e90a:	d506      	bpl.n	e91a <smp_pairing_req+0xe2>
    e90c:	78bb      	ldrb	r3, [r7, #2]
    e90e:	069b      	lsls	r3, r3, #26
    e910:	d503      	bpl.n	e91a <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    e912:	2114      	movs	r1, #20
    e914:	4628      	mov	r0, r5
    e916:	f017 f9dd 	bl	25cd4 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    e91a:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    e91e:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    e922:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    e926:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    e92a:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    e92e:	07d8      	lsls	r0, r3, #31
    e930:	d506      	bpl.n	e940 <smp_pairing_req+0x108>
    e932:	78bb      	ldrb	r3, [r7, #2]
    e934:	07d9      	lsls	r1, r3, #31
    e936:	d503      	bpl.n	e940 <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    e938:	210d      	movs	r1, #13
    e93a:	4628      	mov	r0, r5
    e93c:	f017 f9ca 	bl	25cd4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    e940:	2103      	movs	r1, #3
    e942:	4628      	mov	r0, r5
    e944:	f017 f9c6 	bl	25cd4 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e948:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    e94a:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e94c:	f017 f9d9 	bl	25d02 <atomic_test_bit>
    e950:	f8d4 8000 	ldr.w	r8, [r4]
    e954:	2800      	cmp	r0, #0
    e956:	d15a      	bne.n	ea0e <smp_pairing_req+0x1d6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    e958:	2f04      	cmp	r7, #4
    e95a:	d879      	bhi.n	ea50 <smp_pairing_req+0x218>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    e95c:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    e960:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    e964:	4013      	ands	r3, r2
    e966:	07da      	lsls	r2, r3, #31
    e968:	d470      	bmi.n	ea4c <smp_pairing_req+0x214>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    e96a:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
    e96e:	f894 00cb 	ldrb.w	r0, [r4, #203]	; 0xcb
    e972:	4301      	orrs	r1, r0
    e974:	f011 0104 	ands.w	r1, r1, #4
    e978:	d00e      	beq.n	e998 <smp_pairing_req+0x160>
	method = gen_method_legacy[remote_io][get_io_capa()];
    e97a:	f7ff fdc5 	bl	e508 <get_io_capa>
    e97e:	4b6c      	ldr	r3, [pc, #432]	; (eb30 <smp_pairing_req+0x2f8>)
    e980:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    e984:	441f      	add	r7, r3
    e986:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
    e988:	2904      	cmp	r1, #4
    e98a:	d105      	bne.n	e998 <smp_pairing_req+0x160>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    e98c:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    e990:	2b00      	cmp	r3, #0
    e992:	bf0c      	ite	eq
    e994:	2102      	moveq	r1, #2
    e996:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
    e998:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    e99c:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    e9a0:	b93b      	cbnz	r3, e9b2 <smp_pairing_req+0x17a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e9a2:	f898 0008 	ldrb.w	r0, [r8, #8]
    e9a6:	f108 0188 	add.w	r1, r8, #136	; 0x88
    e9aa:	f001 fbd1 	bl	10150 <bt_keys_get_addr>
    e9ae:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    e9b2:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    e9b6:	2a00      	cmp	r2, #0
    e9b8:	d163      	bne.n	ea82 <smp_pairing_req+0x24a>
	switch (conn->required_sec_level) {
    e9ba:	6823      	ldr	r3, [r4, #0]
    e9bc:	7a9b      	ldrb	r3, [r3, #10]
    e9be:	2b03      	cmp	r3, #3
    e9c0:	d05a      	beq.n	ea78 <smp_pairing_req+0x240>
    e9c2:	d847      	bhi.n	ea54 <smp_pairing_req+0x21c>
    e9c4:	3b01      	subs	r3, #1
    e9c6:	2b01      	cmp	r3, #1
    e9c8:	f63f af5d 	bhi.w	e886 <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    e9cc:	2105      	movs	r1, #5
    e9ce:	4628      	mov	r0, r5
    e9d0:	f017 f997 	bl	25d02 <atomic_test_bit>
    e9d4:	2800      	cmp	r0, #0
    e9d6:	f040 8104 	bne.w	ebe2 <smp_pairing_req+0x3aa>
	struct bt_conn *conn = smp->chan.chan.conn;
    e9da:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    e9dc:	f106 0188 	add.w	r1, r6, #136	; 0x88
    e9e0:	7a30      	ldrb	r0, [r6, #8]
    e9e2:	f001 fc79 	bl	102d8 <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    e9e6:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    e9ea:	2800      	cmp	r0, #0
    e9ec:	d067      	beq.n	eabe <smp_pairing_req+0x286>
    e9ee:	7b43      	ldrb	r3, [r0, #13]
    e9f0:	07db      	lsls	r3, r3, #31
    e9f2:	d564      	bpl.n	eabe <smp_pairing_req+0x286>
    e9f4:	2900      	cmp	r1, #0
    e9f6:	d162      	bne.n	eabe <smp_pairing_req+0x286>
    e9f8:	4b4e      	ldr	r3, [pc, #312]	; (eb34 <smp_pairing_req+0x2fc>)
    e9fa:	494f      	ldr	r1, [pc, #316]	; (eb38 <smp_pairing_req+0x300>)
		BT_ERR("JustWorks failed, authenticated keys present");
    e9fc:	484f      	ldr	r0, [pc, #316]	; (eb3c <smp_pairing_req+0x304>)
    e9fe:	1ac9      	subs	r1, r1, r3
    ea00:	08c9      	lsrs	r1, r1, #3
    ea02:	0189      	lsls	r1, r1, #6
    ea04:	f041 0101 	orr.w	r1, r1, #1
    ea08:	f013 fc70 	bl	222ec <log_0>
	if (ret) {
    ea0c:	e73b      	b.n	e886 <smp_pairing_req+0x4e>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    ea0e:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    ea12:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    ea16:	ea00 0302 	and.w	r3, r0, r2
    ea1a:	071b      	lsls	r3, r3, #28
    ea1c:	d507      	bpl.n	ea2e <smp_pairing_req+0x1f6>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    ea1e:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    ea22:	f894 c0ca 	ldrb.w	ip, [r4, #202]	; 0xca
    ea26:	ea43 030c 	orr.w	r3, r3, ip
    ea2a:	07db      	lsls	r3, r3, #31
    ea2c:	d4b4      	bmi.n	e998 <smp_pairing_req+0x160>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    ea2e:	2f04      	cmp	r7, #4
    ea30:	d80e      	bhi.n	ea50 <smp_pairing_req+0x218>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    ea32:	ea40 0102 	orr.w	r1, r0, r2
    ea36:	f011 0104 	ands.w	r1, r1, #4
    ea3a:	d0ad      	beq.n	e998 <smp_pairing_req+0x160>
	return gen_method_sc[remote_io][get_io_capa()];
    ea3c:	f7ff fd64 	bl	e508 <get_io_capa>
    ea40:	4b3f      	ldr	r3, [pc, #252]	; (eb40 <smp_pairing_req+0x308>)
    ea42:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    ea46:	441f      	add	r7, r3
    ea48:	5c39      	ldrb	r1, [r7, r0]
    ea4a:	e7a5      	b.n	e998 <smp_pairing_req+0x160>
		return LEGACY_OOB;
    ea4c:	2106      	movs	r1, #6
    ea4e:	e7a3      	b.n	e998 <smp_pairing_req+0x160>
		return JUST_WORKS;
    ea50:	2100      	movs	r1, #0
    ea52:	e7a1      	b.n	e998 <smp_pairing_req+0x160>
	switch (conn->required_sec_level) {
    ea54:	2b04      	cmp	r3, #4
    ea56:	f47f af16 	bne.w	e886 <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    ea5a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    ea5e:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    ea62:	4293      	cmp	r3, r2
    ea64:	bf28      	it	cs
    ea66:	4613      	movcs	r3, r2
    ea68:	2b10      	cmp	r3, #16
    ea6a:	f47f aeed 	bne.w	e848 <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ea6e:	2105      	movs	r1, #5
    ea70:	4628      	mov	r0, r5
    ea72:	f017 f946 	bl	25d02 <atomic_test_bit>
    ea76:	b190      	cbz	r0, ea9e <smp_pairing_req+0x266>
		if (smp->method == JUST_WORKS) {
    ea78:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ea7c:	2b00      	cmp	r3, #0
    ea7e:	d1a5      	bne.n	e9cc <smp_pairing_req+0x194>
    ea80:	e00d      	b.n	ea9e <smp_pairing_req+0x266>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    ea82:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    ea84:	f011 0f24 	tst.w	r1, #36	; 0x24
    ea88:	d097      	beq.n	e9ba <smp_pairing_req+0x182>
	return MIN(req->max_key_size, rsp->max_key_size);
    ea8a:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    ea8e:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    ea92:	7b12      	ldrb	r2, [r2, #12]
    ea94:	4283      	cmp	r3, r0
    ea96:	bf28      	it	cs
    ea98:	4603      	movcs	r3, r0
    ea9a:	429a      	cmp	r2, r3
    ea9c:	d901      	bls.n	eaa2 <smp_pairing_req+0x26a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ea9e:	2703      	movs	r7, #3
    eaa0:	e6d3      	b.n	e84a <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    eaa2:	068a      	lsls	r2, r1, #26
    eaa4:	d404      	bmi.n	eab0 <smp_pairing_req+0x278>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    eaa6:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    eaaa:	2b00      	cmp	r3, #0
    eaac:	d185      	bne.n	e9ba <smp_pairing_req+0x182>
    eaae:	e7f6      	b.n	ea9e <smp_pairing_req+0x266>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eab0:	2105      	movs	r1, #5
    eab2:	4628      	mov	r0, r5
    eab4:	f017 f925 	bl	25d02 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    eab8:	2800      	cmp	r0, #0
    eaba:	d1f4      	bne.n	eaa6 <smp_pairing_req+0x26e>
    eabc:	e7ef      	b.n	ea9e <smp_pairing_req+0x266>
	switch (smp->method) {
    eabe:	2906      	cmp	r1, #6
    eac0:	d877      	bhi.n	ebb2 <smp_pairing_req+0x37a>
    eac2:	e8df f001 	tbb	[pc, r1]
    eac6:	6c1b      	.short	0x6c1b
    eac8:	76767641 	.word	0x76767641
    eacc:	04          	.byte	0x04
    eacd:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    eace:	4e1d      	ldr	r6, [pc, #116]	; (eb44 <smp_pairing_req+0x30c>)
    ead0:	6833      	ldr	r3, [r6, #0]
    ead2:	2b00      	cmp	r3, #0
    ead4:	d078      	beq.n	ebc8 <smp_pairing_req+0x390>
    ead6:	68db      	ldr	r3, [r3, #12]
    ead8:	2b00      	cmp	r3, #0
    eada:	d075      	beq.n	ebc8 <smp_pairing_req+0x390>
			struct bt_conn_oob_info info = {
    eadc:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eade:	210a      	movs	r1, #10
    eae0:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    eae2:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eae6:	f017 f8f5 	bl	25cd4 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    eaea:	6833      	ldr	r3, [r6, #0]
    eaec:	6820      	ldr	r0, [r4, #0]
    eaee:	68db      	ldr	r3, [r3, #12]
    eaf0:	a901      	add	r1, sp, #4
    eaf2:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eaf4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    eaf8:	2b00      	cmp	r3, #0
    eafa:	d167      	bne.n	ebcc <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eafc:	210f      	movs	r1, #15
    eafe:	4628      	mov	r0, r5
    eb00:	f017 f8ff 	bl	25d02 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    eb04:	4607      	mov	r7, r0
    eb06:	2800      	cmp	r0, #0
    eb08:	d160      	bne.n	ebcc <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    eb0a:	4e0e      	ldr	r6, [pc, #56]	; (eb44 <smp_pairing_req+0x30c>)
    eb0c:	6833      	ldr	r3, [r6, #0]
    eb0e:	2b00      	cmp	r3, #0
    eb10:	d05c      	beq.n	ebcc <smp_pairing_req+0x394>
	    bt_auth && bt_auth->pairing_confirm) {
    eb12:	695b      	ldr	r3, [r3, #20]
    eb14:	2b00      	cmp	r3, #0
    eb16:	d059      	beq.n	ebcc <smp_pairing_req+0x394>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eb18:	4628      	mov	r0, r5
    eb1a:	210a      	movs	r1, #10
    eb1c:	f017 f8da 	bl	25cd4 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    eb20:	6833      	ldr	r3, [r6, #0]
    eb22:	6820      	ldr	r0, [r4, #0]
    eb24:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    eb26:	4798      	blx	r3
		return 0;
    eb28:	e68f      	b.n	e84a <smp_pairing_req+0x12>
    eb2a:	bf00      	nop
    eb2c:	2000f30c 	.word	0x2000f30c
    eb30:	0002d455 	.word	0x0002d455
    eb34:	0002775c 	.word	0x0002775c
    eb38:	00027844 	.word	0x00027844
    eb3c:	0002d0b4 	.word	0x0002d0b4
    eb40:	0002d46e 	.word	0x0002d46e
    eb44:	2000d73c 	.word	0x2000d73c
			if (bt_rand(&passkey, sizeof(passkey))) {
    eb48:	2104      	movs	r1, #4
    eb4a:	eb0d 0001 	add.w	r0, sp, r1
    eb4e:	f004 fc2f 	bl	133b0 <bt_rand>
    eb52:	2800      	cmp	r0, #0
    eb54:	f47f ae97 	bne.w	e886 <smp_pairing_req+0x4e>
			passkey %= 1000000;
    eb58:	9b01      	ldr	r3, [sp, #4]
    eb5a:	4a2f      	ldr	r2, [pc, #188]	; (ec18 <smp_pairing_req+0x3e0>)
		if (bt_auth && bt_auth->passkey_display) {
    eb5c:	4f2f      	ldr	r7, [pc, #188]	; (ec1c <smp_pairing_req+0x3e4>)
			passkey %= 1000000;
    eb5e:	fbb3 f1f2 	udiv	r1, r3, r2
    eb62:	fb02 3311 	mls	r3, r2, r1, r3
    eb66:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    eb68:	683b      	ldr	r3, [r7, #0]
    eb6a:	b153      	cbz	r3, eb82 <smp_pairing_req+0x34a>
    eb6c:	681b      	ldr	r3, [r3, #0]
    eb6e:	b143      	cbz	r3, eb82 <smp_pairing_req+0x34a>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    eb70:	210b      	movs	r1, #11
    eb72:	4628      	mov	r0, r5
    eb74:	f017 f8ae 	bl	25cd4 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    eb78:	683b      	ldr	r3, [r7, #0]
    eb7a:	9901      	ldr	r1, [sp, #4]
    eb7c:	681b      	ldr	r3, [r3, #0]
    eb7e:	4630      	mov	r0, r6
    eb80:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    eb82:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    eb84:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    eb88:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    eb8c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    eb8e:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    eb92:	0a1b      	lsrs	r3, r3, #8
    eb94:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    eb98:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
	if (ret) {
    eb9c:	e7aa      	b.n	eaf4 <smp_pairing_req+0x2bc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    eb9e:	4628      	mov	r0, r5
    eba0:	210a      	movs	r1, #10
    eba2:	f017 f897 	bl	25cd4 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    eba6:	4b1d      	ldr	r3, [pc, #116]	; (ec1c <smp_pairing_req+0x3e4>)
    eba8:	681b      	ldr	r3, [r3, #0]
    ebaa:	4630      	mov	r0, r6
    ebac:	685b      	ldr	r3, [r3, #4]
    ebae:	4798      	blx	r3
	if (ret) {
    ebb0:	e7a0      	b.n	eaf4 <smp_pairing_req+0x2bc>
    ebb2:	4b1b      	ldr	r3, [pc, #108]	; (ec20 <smp_pairing_req+0x3e8>)
    ebb4:	4a1b      	ldr	r2, [pc, #108]	; (ec24 <smp_pairing_req+0x3ec>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ebb6:	481c      	ldr	r0, [pc, #112]	; (ec28 <smp_pairing_req+0x3f0>)
    ebb8:	1ad2      	subs	r2, r2, r3
    ebba:	08d2      	lsrs	r2, r2, #3
    ebbc:	0192      	lsls	r2, r2, #6
    ebbe:	f042 0201 	orr.w	r2, r2, #1
    ebc2:	f013 fba0 	bl	22306 <log_1>
	if (ret) {
    ebc6:	e65e      	b.n	e886 <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    ebc8:	2702      	movs	r7, #2
    ebca:	e63e      	b.n	e84a <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ebcc:	2103      	movs	r1, #3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ebce:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ebd2:	f017 f87f 	bl	25cd4 <atomic_set_bit>
	return send_pairing_rsp(smp);
    ebd6:	4620      	mov	r0, r4
}
    ebd8:	b002      	add	sp, #8
    ebda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    ebde:	f017 b8b9 	b.w	25d54 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ebe2:	f894 70c0 	ldrb.w	r7, [r4, #192]	; 0xc0
    ebe6:	b9a7      	cbnz	r7, ec12 <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ebe8:	210f      	movs	r1, #15
    ebea:	4628      	mov	r0, r5
    ebec:	f017 f889 	bl	25d02 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ebf0:	b978      	cbnz	r0, ec12 <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ebf2:	f8df 8028 	ldr.w	r8, [pc, #40]	; ec1c <smp_pairing_req+0x3e4>
    ebf6:	f8d8 3000 	ldr.w	r3, [r8]
    ebfa:	b153      	cbz	r3, ec12 <smp_pairing_req+0x3da>
	    bt_auth && bt_auth->pairing_confirm) {
    ebfc:	695b      	ldr	r3, [r3, #20]
    ebfe:	b143      	cbz	r3, ec12 <smp_pairing_req+0x3da>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec00:	4628      	mov	r0, r5
    ec02:	210a      	movs	r1, #10
    ec04:	f017 f866 	bl	25cd4 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    ec08:	f8d8 3000 	ldr.w	r3, [r8]
    ec0c:	4630      	mov	r0, r6
    ec0e:	695b      	ldr	r3, [r3, #20]
    ec10:	e789      	b.n	eb26 <smp_pairing_req+0x2ee>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ec12:	210c      	movs	r1, #12
    ec14:	e7db      	b.n	ebce <smp_pairing_req+0x396>
    ec16:	bf00      	nop
    ec18:	000f4240 	.word	0x000f4240
    ec1c:	2000d73c 	.word	0x2000d73c
    ec20:	0002775c 	.word	0x0002775c
    ec24:	00027844 	.word	0x00027844
    ec28:	0002d0e1 	.word	0x0002d0e1

0000ec2c <compute_and_check_and_send_slave_dhcheck>:
{
    ec2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    ec30:	2210      	movs	r2, #16
{
    ec32:	b0a3      	sub	sp, #140	; 0x8c
    ec34:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    ec36:	2100      	movs	r1, #0
    ec38:	eb0d 0002 	add.w	r0, sp, r2
    ec3c:	f015 fb8d 	bl	2435a <memset>
	switch (smp->method) {
    ec40:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    ec44:	2905      	cmp	r1, #5
    ec46:	f200 809a 	bhi.w	ed7e <compute_and_check_and_send_slave_dhcheck+0x152>
    ec4a:	e8df f001 	tbb	[pc, r1]
    ec4e:	0309      	.short	0x0309
    ec50:	8f980903 	.word	0x8f980903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    ec54:	2204      	movs	r2, #4
    ec56:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    ec5a:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    ec5c:	f015 fb52 	bl	24304 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    ec60:	4b79      	ldr	r3, [pc, #484]	; (ee48 <compute_and_check_and_send_slave_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
    ec62:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    ec66:	aa14      	add	r2, sp, #80	; 0x50
    ec68:	f103 0630 	add.w	r6, r3, #48	; 0x30
    ec6c:	6818      	ldr	r0, [r3, #0]
    ec6e:	6859      	ldr	r1, [r3, #4]
    ec70:	4615      	mov	r5, r2
    ec72:	c503      	stmia	r5!, {r0, r1}
    ec74:	3308      	adds	r3, #8
    ec76:	42b3      	cmp	r3, r6
    ec78:	462a      	mov	r2, r5
    ec7a:	d1f7      	bne.n	ec6c <compute_and_check_and_send_slave_dhcheck+0x40>
    ec7c:	6818      	ldr	r0, [r3, #0]
    ec7e:	791b      	ldrb	r3, [r3, #4]
    ec80:	6028      	str	r0, [r5, #0]
    ec82:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    ec84:	ad0c      	add	r5, sp, #48	; 0x30
    ec86:	2220      	movs	r2, #32
    ec88:	f204 114f 	addw	r1, r4, #335	; 0x14f
    ec8c:	4628      	mov	r0, r5
    ec8e:	f016 ff6a 	bl	25b66 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    ec92:	486e      	ldr	r0, [pc, #440]	; (ee4c <compute_and_check_and_send_slave_dhcheck+0x220>)
    ec94:	ab08      	add	r3, sp, #32
    ec96:	2220      	movs	r2, #32
    ec98:	4629      	mov	r1, r5
    ec9a:	f016 ff7d 	bl	25b98 <bt_smp_aes_cmac>
	if (err) {
    ec9e:	2800      	cmp	r0, #0
    eca0:	f040 80c9 	bne.w	ee36 <compute_and_check_and_send_slave_dhcheck+0x20a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    eca4:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    eca8:	2210      	movs	r2, #16
    ecaa:	4639      	mov	r1, r7
    ecac:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    ecb0:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    ecb4:	f016 ff57 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    ecb8:	2210      	movs	r2, #16
    ecba:	4641      	mov	r1, r8
    ecbc:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    ecc0:	f016 ff51 	bl	25b66 <sys_memcpy_swap>
	m[37] = a1->type;
    ecc4:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    ecc8:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    eccc:	2206      	movs	r2, #6
    ecce:	f109 0190 	add.w	r1, r9, #144	; 0x90
    ecd2:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    ecd6:	f016 ff46 	bl	25b66 <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    ecda:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    ecde:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    ece2:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ece6:	2206      	movs	r2, #6
    ece8:	f109 0197 	add.w	r1, r9, #151	; 0x97
    ecec:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    ecf0:	f016 ff39 	bl	25b66 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ecf4:	4633      	mov	r3, r6
    ecf6:	2235      	movs	r2, #53	; 0x35
    ecf8:	a914      	add	r1, sp, #80	; 0x50
    ecfa:	a808      	add	r0, sp, #32
    ecfc:	f016 ff4c 	bl	25b98 <bt_smp_aes_cmac>
	if (err) {
    ed00:	2800      	cmp	r0, #0
    ed02:	f040 8098 	bne.w	ee36 <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(mackey, 16);
    ed06:	2110      	movs	r1, #16
    ed08:	4630      	mov	r0, r6
    ed0a:	f016 ff36 	bl	25b7a <sys_mem_swap>
		   smp->tk)) {
    ed0e:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    ed12:	2301      	movs	r3, #1
    ed14:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    ed18:	2235      	movs	r2, #53	; 0x35
    ed1a:	464b      	mov	r3, r9
    ed1c:	a914      	add	r1, sp, #80	; 0x50
    ed1e:	a808      	add	r0, sp, #32
    ed20:	f016 ff3a 	bl	25b98 <bt_smp_aes_cmac>
	if (err) {
    ed24:	2800      	cmp	r0, #0
    ed26:	f040 8086 	bne.w	ee36 <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(ltk, 16);
    ed2a:	2110      	movs	r1, #16
    ed2c:	4648      	mov	r0, r9
    ed2e:	f016 ff24 	bl	25b7a <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    ed32:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    ed34:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    ed36:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    ed3a:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    ed3c:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    ed40:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    ed42:	e9cd 2300 	strd	r2, r3, [sp]
    ed46:	9102      	str	r1, [sp, #8]
    ed48:	ab04      	add	r3, sp, #16
    ed4a:	463a      	mov	r2, r7
    ed4c:	4641      	mov	r1, r8
    ed4e:	4630      	mov	r0, r6
    ed50:	f016 ff64 	bl	25c1c <smp_f6>
    ed54:	b1f8      	cbz	r0, ed96 <compute_and_check_and_send_slave_dhcheck+0x16a>
    ed56:	493e      	ldr	r1, [pc, #248]	; (ee50 <compute_and_check_and_send_slave_dhcheck+0x224>)
    ed58:	4b3e      	ldr	r3, [pc, #248]	; (ee54 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate local DHKey check failed");
    ed5a:	483f      	ldr	r0, [pc, #252]	; (ee58 <compute_and_check_and_send_slave_dhcheck+0x22c>)
    ed5c:	1ac9      	subs	r1, r1, r3
    ed5e:	08c9      	lsrs	r1, r1, #3
    ed60:	0189      	lsls	r1, r1, #6
    ed62:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    ed66:	f013 fac1 	bl	222ec <log_0>
    ed6a:	e012      	b.n	ed92 <compute_and_check_and_send_slave_dhcheck+0x166>
		if (smp->oobd_remote) {
    ed6c:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    ed70:	2900      	cmp	r1, #0
    ed72:	f43f af75 	beq.w	ec60 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    ed76:	2210      	movs	r2, #16
    ed78:	eb0d 0002 	add.w	r0, sp, r2
    ed7c:	e76e      	b.n	ec5c <compute_and_check_and_send_slave_dhcheck+0x30>
    ed7e:	4a34      	ldr	r2, [pc, #208]	; (ee50 <compute_and_check_and_send_slave_dhcheck+0x224>)
    ed80:	4b34      	ldr	r3, [pc, #208]	; (ee54 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ed82:	4836      	ldr	r0, [pc, #216]	; (ee5c <compute_and_check_and_send_slave_dhcheck+0x230>)
    ed84:	1ad2      	subs	r2, r2, r3
    ed86:	08d2      	lsrs	r2, r2, #3
    ed88:	0192      	lsls	r2, r2, #6
    ed8a:	f042 0201 	orr.w	r2, r2, #1
    ed8e:	f013 faba 	bl	22306 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    ed92:	2008      	movs	r0, #8
    ed94:	e04a      	b.n	ee2c <compute_and_check_and_send_slave_dhcheck+0x200>
	if (smp->method == LE_SC_OOB) {
    ed96:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ed9a:	2b05      	cmp	r3, #5
    ed9c:	d107      	bne.n	edae <compute_and_check_and_send_slave_dhcheck+0x182>
		if (smp->oobd_local) {
    ed9e:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    eda2:	2210      	movs	r2, #16
    eda4:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    eda8:	b1d9      	cbz	r1, ede2 <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    edaa:	f015 faab 	bl	24304 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    edae:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    edb0:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    edb2:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    edb6:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    edb8:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    edbc:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    edbe:	e9cd 2300 	strd	r2, r3, [sp]
    edc2:	9102      	str	r1, [sp, #8]
    edc4:	ab04      	add	r3, sp, #16
    edc6:	4642      	mov	r2, r8
    edc8:	4639      	mov	r1, r7
    edca:	f016 ff27 	bl	25c1c <smp_f6>
    edce:	b158      	cbz	r0, ede8 <compute_and_check_and_send_slave_dhcheck+0x1bc>
    edd0:	491f      	ldr	r1, [pc, #124]	; (ee50 <compute_and_check_and_send_slave_dhcheck+0x224>)
    edd2:	4b20      	ldr	r3, [pc, #128]	; (ee54 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate remote DHKey check failed");
    edd4:	4822      	ldr	r0, [pc, #136]	; (ee60 <compute_and_check_and_send_slave_dhcheck+0x234>)
    edd6:	1ac9      	subs	r1, r1, r3
    edd8:	08c9      	lsrs	r1, r1, #3
    edda:	0189      	lsls	r1, r1, #6
    eddc:	f041 0101 	orr.w	r1, r1, #1
    ede0:	e7c1      	b.n	ed66 <compute_and_check_and_send_slave_dhcheck+0x13a>
			memset(r, 0, sizeof(r));
    ede2:	f015 faba 	bl	2435a <memset>
    ede6:	e7e2      	b.n	edae <compute_and_check_and_send_slave_dhcheck+0x182>
	if (memcmp(smp->e, re, 16)) {
    ede8:	4629      	mov	r1, r5
    edea:	2210      	movs	r2, #16
    edec:	f204 106f 	addw	r0, r4, #367	; 0x16f
    edf0:	f015 fa77 	bl	242e2 <memcmp>
    edf4:	4605      	mov	r5, r0
    edf6:	b9e0      	cbnz	r0, ee32 <compute_and_check_and_send_slave_dhcheck+0x206>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    edf8:	210d      	movs	r1, #13
    edfa:	4620      	mov	r0, r4
    edfc:	f016 ff8a 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!buf) {
    ee00:	4606      	mov	r6, r0
    ee02:	2800      	cmp	r0, #0
    ee04:	d0c5      	beq.n	ed92 <compute_and_check_and_send_slave_dhcheck+0x166>
    ee06:	2110      	movs	r1, #16
    ee08:	3008      	adds	r0, #8
    ee0a:	f017 facf 	bl	263ac <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    ee0e:	2210      	movs	r2, #16
    ee10:	a914      	add	r1, sp, #80	; 0x50
    ee12:	f015 fa77 	bl	24304 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    ee16:	462a      	mov	r2, r5
    ee18:	4631      	mov	r1, r6
    ee1a:	4620      	mov	r0, r4
    ee1c:	f7ff fc32 	bl	e684 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ee20:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    ee24:	2101      	movs	r1, #1
    ee26:	f016 ff55 	bl	25cd4 <atomic_set_bit>
	return 0;
    ee2a:	4628      	mov	r0, r5
}
    ee2c:	b023      	add	sp, #140	; 0x8c
    ee2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    ee32:	200b      	movs	r0, #11
    ee34:	e7fa      	b.n	ee2c <compute_and_check_and_send_slave_dhcheck+0x200>
    ee36:	4906      	ldr	r1, [pc, #24]	; (ee50 <compute_and_check_and_send_slave_dhcheck+0x224>)
    ee38:	4b06      	ldr	r3, [pc, #24]	; (ee54 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate LTK failed");
    ee3a:	480a      	ldr	r0, [pc, #40]	; (ee64 <compute_and_check_and_send_slave_dhcheck+0x238>)
    ee3c:	1ac9      	subs	r1, r1, r3
    ee3e:	08c9      	lsrs	r1, r1, #3
    ee40:	0189      	lsls	r1, r1, #6
    ee42:	f041 0101 	orr.w	r1, r1, #1
    ee46:	e78e      	b.n	ed66 <compute_and_check_and_send_slave_dhcheck+0x13a>
    ee48:	000279a4 	.word	0x000279a4
    ee4c:	0002d487 	.word	0x0002d487
    ee50:	00027844 	.word	0x00027844
    ee54:	0002775c 	.word	0x0002775c
    ee58:	0002d0fd 	.word	0x0002d0fd
    ee5c:	0002d0e1 	.word	0x0002d0e1
    ee60:	0002d120 	.word	0x0002d120
    ee64:	0002d144 	.word	0x0002d144

0000ee68 <smp_send_pairing_confirm>:
{
    ee68:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    ee6a:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    ee6e:	2c02      	cmp	r4, #2
{
    ee70:	4606      	mov	r6, r0
	switch (smp->method) {
    ee72:	d823      	bhi.n	eebc <smp_send_pairing_confirm+0x54>
    ee74:	b144      	cbz	r4, ee88 <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ee76:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    ee7a:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    ee7e:	40dc      	lsrs	r4, r3
    ee80:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    ee84:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    ee88:	2103      	movs	r1, #3
    ee8a:	4630      	mov	r0, r6
    ee8c:	f016 ff42 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!buf) {
    ee90:	4605      	mov	r5, r0
    ee92:	b300      	cbz	r0, eed6 <smp_send_pairing_confirm+0x6e>
    ee94:	2110      	movs	r1, #16
    ee96:	3008      	adds	r0, #8
    ee98:	f017 fa88 	bl	263ac <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    ee9c:	9000      	str	r0, [sp, #0]
    ee9e:	4816      	ldr	r0, [pc, #88]	; (eef8 <smp_send_pairing_confirm+0x90>)
    eea0:	4623      	mov	r3, r4
    eea2:	6800      	ldr	r0, [r0, #0]
    eea4:	f106 02df 	add.w	r2, r6, #223	; 0xdf
    eea8:	f206 110f 	addw	r1, r6, #271	; 0x10f
    eeac:	f016 fe90 	bl	25bd0 <smp_f4>
    eeb0:	4604      	mov	r4, r0
    eeb2:	b1a0      	cbz	r0, eede <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
    eeb4:	4628      	mov	r0, r5
    eeb6:	f00e fb47 	bl	1d548 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    eeba:	e00c      	b.n	eed6 <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
    eebc:	2c03      	cmp	r4, #3
    eebe:	d00c      	beq.n	eeda <smp_send_pairing_confirm+0x72>
    eec0:	4a0e      	ldr	r2, [pc, #56]	; (eefc <smp_send_pairing_confirm+0x94>)
    eec2:	4b0f      	ldr	r3, [pc, #60]	; (ef00 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    eec4:	480f      	ldr	r0, [pc, #60]	; (ef04 <smp_send_pairing_confirm+0x9c>)
    eec6:	1ad2      	subs	r2, r2, r3
    eec8:	08d2      	lsrs	r2, r2, #3
    eeca:	0192      	lsls	r2, r2, #6
    eecc:	f042 0201 	orr.w	r2, r2, #1
    eed0:	4621      	mov	r1, r4
    eed2:	f013 fa18 	bl	22306 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    eed6:	2008      	movs	r0, #8
    eed8:	e00c      	b.n	eef4 <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    eeda:	2400      	movs	r4, #0
    eedc:	e7d4      	b.n	ee88 <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    eede:	4602      	mov	r2, r0
    eee0:	4629      	mov	r1, r5
    eee2:	4630      	mov	r0, r6
    eee4:	f7ff fbce 	bl	e684 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    eee8:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    eeec:	4621      	mov	r1, r4
    eeee:	f016 fee2 	bl	25cb6 <atomic_clear_bit>
	return 0;
    eef2:	4620      	mov	r0, r4
}
    eef4:	b002      	add	sp, #8
    eef6:	bd70      	pop	{r4, r5, r6, pc}
    eef8:	2000d7d0 	.word	0x2000d7d0
    eefc:	00027844 	.word	0x00027844
    ef00:	0002775c 	.word	0x0002775c
    ef04:	0002d0e1 	.word	0x0002d0e1

0000ef08 <smp_public_key_slave>:
{
    ef08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ef0c:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
{
    ef10:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ef12:	210e      	movs	r1, #14
    ef14:	4630      	mov	r0, r6
    ef16:	f016 fef4 	bl	25d02 <atomic_test_bit>
    ef1a:	b998      	cbnz	r0, ef44 <smp_public_key_slave+0x3c>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    ef1c:	4b4c      	ldr	r3, [pc, #304]	; (f050 <smp_public_key_slave+0x148>)
    ef1e:	2240      	movs	r2, #64	; 0x40
    ef20:	6819      	ldr	r1, [r3, #0]
    ef22:	f204 100f 	addw	r0, r4, #271	; 0x10f
    ef26:	f015 f9dc 	bl	242e2 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    ef2a:	b958      	cbnz	r0, ef44 <smp_public_key_slave+0x3c>
    ef2c:	4949      	ldr	r1, [pc, #292]	; (f054 <smp_public_key_slave+0x14c>)
    ef2e:	4b4a      	ldr	r3, [pc, #296]	; (f058 <smp_public_key_slave+0x150>)
		BT_WARN("Remote is using identical public key");
    ef30:	484a      	ldr	r0, [pc, #296]	; (f05c <smp_public_key_slave+0x154>)
    ef32:	1ac9      	subs	r1, r1, r3
    ef34:	08c9      	lsrs	r1, r1, #3
    ef36:	0189      	lsls	r1, r1, #6
    ef38:	f041 0102 	orr.w	r1, r1, #2
    ef3c:	f013 f9d6 	bl	222ec <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    ef40:	2008      	movs	r0, #8
    ef42:	e031      	b.n	efa8 <smp_public_key_slave+0xa0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    ef44:	210c      	movs	r1, #12
    ef46:	4620      	mov	r0, r4
    ef48:	f016 fee4 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    ef4c:	4605      	mov	r5, r0
    ef4e:	2800      	cmp	r0, #0
    ef50:	d0f6      	beq.n	ef40 <smp_public_key_slave+0x38>
    ef52:	2140      	movs	r1, #64	; 0x40
    ef54:	3008      	adds	r0, #8
    ef56:	f017 fa29 	bl	263ac <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    ef5a:	f8df 80f4 	ldr.w	r8, [pc, #244]	; f050 <smp_public_key_slave+0x148>
    ef5e:	2220      	movs	r2, #32
    ef60:	f8d8 1000 	ldr.w	r1, [r8]
    ef64:	4607      	mov	r7, r0
    ef66:	f015 f9cd 	bl	24304 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    ef6a:	f8d8 1000 	ldr.w	r1, [r8]
    ef6e:	2220      	movs	r2, #32
    ef70:	4411      	add	r1, r2
    ef72:	18b8      	adds	r0, r7, r2
    ef74:	f015 f9c6 	bl	24304 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    ef78:	4629      	mov	r1, r5
    ef7a:	2200      	movs	r2, #0
    ef7c:	4620      	mov	r0, r4
    ef7e:	f7ff fb81 	bl	e684 <smp_send.constprop.0>
	switch (smp->method) {
    ef82:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    ef86:	2905      	cmp	r1, #5
    ef88:	d854      	bhi.n	f034 <smp_public_key_slave+0x12c>
    ef8a:	e8df f001 	tbb	[pc, r1]
    ef8e:	3603      	.short	0x3603
    ef90:	5153030f 	.word	0x5153030f
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ef94:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ef98:	2104      	movs	r1, #4
    ef9a:	f016 fe9b 	bl	25cd4 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    ef9e:	4620      	mov	r0, r4
    efa0:	f7ff ff62 	bl	ee68 <smp_send_pairing_confirm>
		if (err) {
    efa4:	2800      	cmp	r0, #0
    efa6:	d036      	beq.n	f016 <smp_public_key_slave+0x10e>
}
    efa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    efac:	2104      	movs	r1, #4
    efae:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    efb2:	f004 f9fd 	bl	133b0 <bt_rand>
    efb6:	2800      	cmp	r0, #0
    efb8:	d1c2      	bne.n	ef40 <smp_public_key_slave+0x38>
		smp->passkey %= 1000000;
    efba:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    efbe:	4a28      	ldr	r2, [pc, #160]	; (f060 <smp_public_key_slave+0x158>)
	if (bt_auth && bt_auth->passkey_display) {
    efc0:	4d28      	ldr	r5, [pc, #160]	; (f064 <smp_public_key_slave+0x15c>)
		smp->passkey %= 1000000;
    efc2:	fbb3 f1f2 	udiv	r1, r3, r2
    efc6:	fb02 3311 	mls	r3, r2, r1, r3
    efca:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    efce:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    efd0:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    efd4:	b15b      	cbz	r3, efee <smp_public_key_slave+0xe6>
    efd6:	681b      	ldr	r3, [r3, #0]
    efd8:	b14b      	cbz	r3, efee <smp_public_key_slave+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    efda:	210b      	movs	r1, #11
    efdc:	4630      	mov	r0, r6
    efde:	f016 fe79 	bl	25cd4 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    efe2:	682b      	ldr	r3, [r5, #0]
    efe4:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    efe8:	681b      	ldr	r3, [r3, #0]
    efea:	6820      	ldr	r0, [r4, #0]
    efec:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    efee:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    eff0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    eff4:	f016 fe6e 	bl	25cd4 <atomic_set_bit>
		break;
    eff8:	e00d      	b.n	f016 <smp_public_key_slave+0x10e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    effa:	2103      	movs	r1, #3
    effc:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f000:	f016 fe68 	bl	25cd4 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f004:	4630      	mov	r0, r6
    f006:	210a      	movs	r1, #10
    f008:	f016 fe64 	bl	25cd4 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    f00c:	4b15      	ldr	r3, [pc, #84]	; (f064 <smp_public_key_slave+0x15c>)
    f00e:	6820      	ldr	r0, [r4, #0]
    f010:	681b      	ldr	r3, [r3, #0]
    f012:	685b      	ldr	r3, [r3, #4]
    f014:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    f016:	4630      	mov	r0, r6
    f018:	2107      	movs	r1, #7
    f01a:	f016 fe5b 	bl	25cd4 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    f01e:	2008      	movs	r0, #8
    f020:	f7ff fb8c 	bl	e73c <smp_find>
    f024:	b988      	cbnz	r0, f04a <smp_public_key_slave+0x142>
		return smp_dhkey_generate(smp);
    f026:	4620      	mov	r0, r4
}
    f028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    f02c:	f7ff bb60 	b.w	e6f0 <smp_dhkey_generate>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f030:	2104      	movs	r1, #4
    f032:	e7dd      	b.n	eff0 <smp_public_key_slave+0xe8>
    f034:	4b08      	ldr	r3, [pc, #32]	; (f058 <smp_public_key_slave+0x150>)
    f036:	4a07      	ldr	r2, [pc, #28]	; (f054 <smp_public_key_slave+0x14c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f038:	480b      	ldr	r0, [pc, #44]	; (f068 <smp_public_key_slave+0x160>)
    f03a:	1ad2      	subs	r2, r2, r3
    f03c:	08d2      	lsrs	r2, r2, #3
    f03e:	0192      	lsls	r2, r2, #6
    f040:	f042 0201 	orr.w	r2, r2, #1
    f044:	f013 f95f 	bl	22306 <log_1>
    f048:	e77a      	b.n	ef40 <smp_public_key_slave+0x38>
	return 0;
    f04a:	2000      	movs	r0, #0
    f04c:	e7ac      	b.n	efa8 <smp_public_key_slave+0xa0>
    f04e:	bf00      	nop
    f050:	2000d7d0 	.word	0x2000d7d0
    f054:	00027844 	.word	0x00027844
    f058:	0002775c 	.word	0x0002775c
    f05c:	0002d159 	.word	0x0002d159
    f060:	000f4240 	.word	0x000f4240
    f064:	2000d73c 	.word	0x2000d73c
    f068:	0002d0e1 	.word	0x0002d0e1

0000f06c <smp_public_key>:
{
    f06c:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    f06e:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    f070:	f200 150f 	addw	r5, r0, #271	; 0x10f
{
    f074:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    f076:	2220      	movs	r2, #32
    f078:	4631      	mov	r1, r6
    f07a:	4628      	mov	r0, r5
    f07c:	f015 f942 	bl	24304 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    f080:	2220      	movs	r2, #32
    f082:	18b1      	adds	r1, r6, r2
    f084:	f204 102f 	addw	r0, r4, #303	; 0x12f
    f088:	f015 f93c 	bl	24304 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    f08c:	491e      	ldr	r1, [pc, #120]	; (f108 <smp_public_key+0x9c>)
    f08e:	2240      	movs	r2, #64	; 0x40
    f090:	4628      	mov	r0, r5
    f092:	f015 f926 	bl	242e2 <memcmp>
    f096:	b148      	cbz	r0, f0ac <smp_public_key+0x40>
	if (!sc_public_key) {
    f098:	4b1c      	ldr	r3, [pc, #112]	; (f10c <smp_public_key+0xa0>)
    f09a:	681d      	ldr	r5, [r3, #0]
    f09c:	bb75      	cbnz	r5, f0fc <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f09e:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f0a2:	2106      	movs	r1, #6
    f0a4:	f016 fe16 	bl	25cd4 <atomic_set_bit>
		return 0;
    f0a8:	4628      	mov	r0, r5
    f0aa:	e026      	b.n	f0fa <smp_public_key+0x8e>
    f0ac:	4b18      	ldr	r3, [pc, #96]	; (f110 <smp_public_key+0xa4>)
    f0ae:	4919      	ldr	r1, [pc, #100]	; (f114 <smp_public_key+0xa8>)
		BT_INFO("Remote is using Debug Public key");
    f0b0:	4819      	ldr	r0, [pc, #100]	; (f118 <smp_public_key+0xac>)
    f0b2:	1ac9      	subs	r1, r1, r3
    f0b4:	08c9      	lsrs	r1, r1, #3
    f0b6:	0189      	lsls	r1, r1, #6
    f0b8:	f041 0103 	orr.w	r1, r1, #3
    f0bc:	f013 f916 	bl	222ec <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f0c0:	210e      	movs	r1, #14
    f0c2:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f0c6:	f016 fe05 	bl	25cd4 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    f0ca:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    f0cc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f0d0:	b933      	cbnz	r3, f0e0 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f0d2:	7a28      	ldrb	r0, [r5, #8]
    f0d4:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f0d8:	f001 f83a 	bl	10150 <bt_keys_get_addr>
    f0dc:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f0e0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f0e4:	2b00      	cmp	r3, #0
    f0e6:	d0d7      	beq.n	f098 <smp_public_key+0x2c>
    f0e8:	89da      	ldrh	r2, [r3, #14]
    f0ea:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f0ee:	2a00      	cmp	r2, #0
    f0f0:	d0d2      	beq.n	f098 <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    f0f2:	7b5b      	ldrb	r3, [r3, #13]
    f0f4:	079b      	lsls	r3, r3, #30
    f0f6:	d4cf      	bmi.n	f098 <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f0f8:	2003      	movs	r0, #3
}
    f0fa:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
    f0fc:	4620      	mov	r0, r4
}
    f0fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
    f102:	f7ff bf01 	b.w	ef08 <smp_public_key_slave>
    f106:	bf00      	nop
    f108:	0002d497 	.word	0x0002d497
    f10c:	2000d7d0 	.word	0x2000d7d0
    f110:	0002775c 	.word	0x0002775c
    f114:	00027844 	.word	0x00027844
    f118:	0002d17e 	.word	0x0002d17e

0000f11c <bt_smp_connected>:
{
    f11c:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    f11e:	2230      	movs	r2, #48	; 0x30
    f120:	4604      	mov	r4, r0
    f122:	2100      	movs	r1, #0
    f124:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    f128:	f015 f917 	bl	2435a <memset>
    f12c:	4b03      	ldr	r3, [pc, #12]	; (f13c <bt_smp_connected+0x20>)
    f12e:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
	smp_reset(smp);
    f132:	4620      	mov	r0, r4
}
    f134:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    f138:	f016 be7f 	b.w	25e3a <smp_reset>
    f13c:	0000ffc9 	.word	0x0000ffc9

0000f140 <smp_pairing_confirm>:
{
    f140:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    f142:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f144:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    f148:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f14a:	210b      	movs	r1, #11
    f14c:	4628      	mov	r0, r5
    f14e:	f016 fdb2 	bl	25cb6 <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    f152:	4631      	mov	r1, r6
    f154:	2210      	movs	r2, #16
    f156:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f15a:	f015 f8d3 	bl	24304 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f15e:	2105      	movs	r1, #5
    f160:	4628      	mov	r0, r5
    f162:	f016 fdce 	bl	25d02 <atomic_test_bit>
    f166:	b920      	cbnz	r0, f172 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
    f168:	4620      	mov	r0, r4
}
    f16a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    f16e:	f016 bee4 	b.w	25f3a <legacy_pairing_confirm>
	switch (smp->method) {
    f172:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f176:	2901      	cmp	r1, #1
    f178:	d00b      	beq.n	f192 <smp_pairing_confirm+0x52>
    f17a:	2902      	cmp	r1, #2
    f17c:	d115      	bne.n	f1aa <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f17e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f182:	2104      	movs	r1, #4
    f184:	f016 fda6 	bl	25cd4 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    f188:	4620      	mov	r0, r4
}
    f18a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    f18e:	f7ff be6b 	b.w	ee68 <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f192:	210a      	movs	r1, #10
    f194:	4628      	mov	r0, r5
    f196:	f016 fdb4 	bl	25d02 <atomic_test_bit>
    f19a:	2800      	cmp	r0, #0
    f19c:	d0ef      	beq.n	f17e <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f19e:	4628      	mov	r0, r5
    f1a0:	2100      	movs	r1, #0
    f1a2:	f016 fd97 	bl	25cd4 <atomic_set_bit>
			return 0;
    f1a6:	2000      	movs	r0, #0
}
    f1a8:	bd70      	pop	{r4, r5, r6, pc}
    f1aa:	4b06      	ldr	r3, [pc, #24]	; (f1c4 <smp_pairing_confirm+0x84>)
    f1ac:	4a06      	ldr	r2, [pc, #24]	; (f1c8 <smp_pairing_confirm+0x88>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f1ae:	4807      	ldr	r0, [pc, #28]	; (f1cc <smp_pairing_confirm+0x8c>)
    f1b0:	1ad2      	subs	r2, r2, r3
    f1b2:	08d2      	lsrs	r2, r2, #3
    f1b4:	0192      	lsls	r2, r2, #6
    f1b6:	f042 0201 	orr.w	r2, r2, #1
    f1ba:	f013 f8a4 	bl	22306 <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    f1be:	2008      	movs	r0, #8
    f1c0:	e7f2      	b.n	f1a8 <smp_pairing_confirm+0x68>
    f1c2:	bf00      	nop
    f1c4:	0002775c 	.word	0x0002775c
    f1c8:	00027844 	.word	0x00027844
    f1cc:	0002d0e1 	.word	0x0002d0e1

0000f1d0 <smp_pairing_random>:
{
    f1d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f1d4:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f1d6:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    f1da:	6889      	ldr	r1, [r1, #8]
{
    f1dc:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f1de:	2210      	movs	r2, #16
    f1e0:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f1e2:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f1e6:	f015 f88d 	bl	24304 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f1ea:	2105      	movs	r1, #5
    f1ec:	4630      	mov	r0, r6
    f1ee:	f016 fd88 	bl	25d02 <atomic_test_bit>
    f1f2:	2800      	cmp	r0, #0
    f1f4:	d146      	bne.n	f284 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
    f1f6:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f1f8:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    f1fa:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f1fe:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f200:	f103 0296 	add.w	r2, r3, #150	; 0x96
    f204:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f206:	9201      	str	r2, [sp, #4]
    f208:	9300      	str	r3, [sp, #0]
    f20a:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    f20e:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    f212:	4639      	mov	r1, r7
    f214:	4640      	mov	r0, r8
    f216:	f016 fe35 	bl	25e84 <smp_c1>
	if (err) {
    f21a:	bb18      	cbnz	r0, f264 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f21c:	2210      	movs	r2, #16
    f21e:	4629      	mov	r1, r5
    f220:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f224:	f015 f85d 	bl	242e2 <memcmp>
    f228:	2800      	cmp	r0, #0
    f22a:	f040 8096 	bne.w	f35a <smp_pairing_random+0x18a>
	memcpy(out, r2, 8);
    f22e:	2208      	movs	r2, #8
    f230:	4639      	mov	r1, r7
    f232:	4628      	mov	r0, r5
    f234:	f015 f866 	bl	24304 <memcpy>
	memcpy(out + 8, r1, 8);
    f238:	2208      	movs	r2, #8
    f23a:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f23e:	a80c      	add	r0, sp, #48	; 0x30
    f240:	f015 f860 	bl	24304 <memcpy>
	return bt_encrypt_le(k, out, out);
    f244:	462a      	mov	r2, r5
    f246:	4629      	mov	r1, r5
    f248:	4640      	mov	r0, r8
    f24a:	f004 f8b3 	bl	133b4 <bt_encrypt_le>
		if (err) {
    f24e:	b158      	cbz	r0, f268 <smp_pairing_random+0x98>
    f250:	4976      	ldr	r1, [pc, #472]	; (f42c <smp_pairing_random+0x25c>)
    f252:	4b77      	ldr	r3, [pc, #476]	; (f430 <smp_pairing_random+0x260>)
			BT_ERR("Calculate STK failed");
    f254:	4877      	ldr	r0, [pc, #476]	; (f434 <smp_pairing_random+0x264>)
    f256:	1ac9      	subs	r1, r1, r3
    f258:	08c9      	lsrs	r1, r1, #3
    f25a:	0189      	lsls	r1, r1, #6
    f25c:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    f260:	f013 f844 	bl	222ec <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    f264:	2508      	movs	r5, #8
    f266:	e079      	b.n	f35c <smp_pairing_random+0x18c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    f268:	4629      	mov	r1, r5
    f26a:	2210      	movs	r2, #16
    f26c:	4640      	mov	r0, r8
    f26e:	f015 f849 	bl	24304 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f272:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f274:	4630      	mov	r0, r6
    f276:	f016 fd2d 	bl	25cd4 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    f27a:	4620      	mov	r0, r4
    f27c:	f016 fd83 	bl	25d86 <smp_send_pairing_random>
    f280:	4605      	mov	r5, r0
    f282:	e06b      	b.n	f35c <smp_pairing_random+0x18c>
	switch (smp->method) {
    f284:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f288:	2905      	cmp	r1, #5
    f28a:	f200 80af 	bhi.w	f3ec <smp_pairing_random+0x21c>
    f28e:	e8df f001 	tbb	[pc, r1]
    f292:	413a      	.short	0x413a
    f294:	8ead0341 	.word	0x8ead0341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    f298:	4b67      	ldr	r3, [pc, #412]	; (f438 <smp_pairing_random+0x268>)
    f29a:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    f29c:	2220      	movs	r2, #32
    f29e:	f204 110f 	addw	r1, r4, #271	; 0x10f
    f2a2:	a80a      	add	r0, sp, #40	; 0x28
    f2a4:	f016 fc5f 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    f2a8:	2220      	movs	r2, #32
    f2aa:	4629      	mov	r1, r5
    f2ac:	a812      	add	r0, sp, #72	; 0x48
    f2ae:	f016 fc5a 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    f2b2:	2210      	movs	r2, #16
    f2b4:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f2b8:	a81a      	add	r0, sp, #104	; 0x68
    f2ba:	f016 fc54 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    f2be:	2210      	movs	r2, #16
    f2c0:	4639      	mov	r1, r7
    f2c2:	a806      	add	r0, sp, #24
    f2c4:	f016 fc4f 	bl	25b66 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    f2c8:	ab06      	add	r3, sp, #24
    f2ca:	2250      	movs	r2, #80	; 0x50
    f2cc:	a90a      	add	r1, sp, #40	; 0x28
    f2ce:	4618      	mov	r0, r3
    f2d0:	f016 fc62 	bl	25b98 <bt_smp_aes_cmac>
	if (err) {
    f2d4:	2800      	cmp	r0, #0
    f2d6:	d1c5      	bne.n	f264 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
    f2d8:	2204      	movs	r2, #4
    f2da:	a909      	add	r1, sp, #36	; 0x24
    f2dc:	a805      	add	r0, sp, #20
    f2de:	f015 f811 	bl	24304 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f2e2:	9b05      	ldr	r3, [sp, #20]
    f2e4:	4a55      	ldr	r2, [pc, #340]	; (f43c <smp_pairing_random+0x26c>)
    f2e6:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f2e8:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f2ea:	fbb3 f1f2 	udiv	r1, r3, r2
    f2ee:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f2f2:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f2f4:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f2f6:	f016 fced 	bl	25cd4 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f2fa:	4b51      	ldr	r3, [pc, #324]	; (f440 <smp_pairing_random+0x270>)
    f2fc:	9905      	ldr	r1, [sp, #20]
    f2fe:	681b      	ldr	r3, [r3, #0]
    f300:	6820      	ldr	r0, [r4, #0]
    f302:	689b      	ldr	r3, [r3, #8]
    f304:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f306:	210d      	movs	r1, #13
    f308:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f30c:	f016 fce2 	bl	25cd4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f310:	2110      	movs	r1, #16
    f312:	e7af      	b.n	f274 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f314:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    f318:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f31c:	4946      	ldr	r1, [pc, #280]	; (f438 <smp_pairing_random+0x268>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f31e:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f320:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f322:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f326:	9500      	str	r5, [sp, #0]
    f328:	6809      	ldr	r1, [r1, #0]
    f32a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f32e:	463a      	mov	r2, r7
    f330:	f204 100f 	addw	r0, r4, #271	; 0x10f
    f334:	f016 fc4c 	bl	25bd0 <smp_f4>
    f338:	b140      	cbz	r0, f34c <smp_pairing_random+0x17c>
    f33a:	493c      	ldr	r1, [pc, #240]	; (f42c <smp_pairing_random+0x25c>)
    f33c:	4b3c      	ldr	r3, [pc, #240]	; (f430 <smp_pairing_random+0x260>)
		BT_ERR("Calculate confirm failed");
    f33e:	4841      	ldr	r0, [pc, #260]	; (f444 <smp_pairing_random+0x274>)
    f340:	1ac9      	subs	r1, r1, r3
    f342:	08c9      	lsrs	r1, r1, #3
    f344:	0189      	lsls	r1, r1, #6
    f346:	f041 0101 	orr.w	r1, r1, #1
    f34a:	e789      	b.n	f260 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
    f34c:	2210      	movs	r2, #16
    f34e:	4629      	mov	r1, r5
    f350:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f354:	f014 ffc5 	bl	242e2 <memcmp>
    f358:	b120      	cbz	r0, f364 <smp_pairing_random+0x194>
		return BT_SMP_ERR_CONFIRM_FAILED;
    f35a:	2504      	movs	r5, #4
}
    f35c:	4628      	mov	r0, r5
    f35e:	b01e      	add	sp, #120	; 0x78
    f360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    f364:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    f368:	2103      	movs	r1, #3
    f36a:	4638      	mov	r0, r7
    f36c:	f016 fcb2 	bl	25cd4 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    f370:	4620      	mov	r0, r4
    f372:	f016 fd08 	bl	25d86 <smp_send_pairing_random>
		if (err) {
    f376:	4605      	mov	r5, r0
    f378:	2800      	cmp	r0, #0
    f37a:	d1ef      	bne.n	f35c <smp_pairing_random+0x18c>
		smp->passkey_round++;
    f37c:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    f380:	3301      	adds	r3, #1
    f382:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    f384:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    f386:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    f38a:	d108      	bne.n	f39e <smp_pairing_random+0x1ce>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f38c:	4638      	mov	r0, r7
    f38e:	210d      	movs	r1, #13
    f390:	f016 fca0 	bl	25cd4 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f394:	2110      	movs	r1, #16
    f396:	4630      	mov	r0, r6
    f398:	f016 fc9c 	bl	25cd4 <atomic_set_bit>
			return 0;
    f39c:	e7de      	b.n	f35c <smp_pairing_random+0x18c>
		if (bt_rand(smp->prnd, 16)) {
    f39e:	2110      	movs	r1, #16
    f3a0:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f3a4:	f004 f804 	bl	133b0 <bt_rand>
    f3a8:	2800      	cmp	r0, #0
    f3aa:	d0d7      	beq.n	f35c <smp_pairing_random+0x18c>
    f3ac:	e75a      	b.n	f264 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
    f3ae:	2110      	movs	r1, #16
    f3b0:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f3b4:	f003 fffc 	bl	133b0 <bt_rand>
    f3b8:	2800      	cmp	r0, #0
    f3ba:	f47f af53 	bne.w	f264 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
    f3be:	4f20      	ldr	r7, [pc, #128]	; (f440 <smp_pairing_random+0x270>)
    f3c0:	683b      	ldr	r3, [r7, #0]
    f3c2:	b1f3      	cbz	r3, f402 <smp_pairing_random+0x232>
    f3c4:	68db      	ldr	r3, [r3, #12]
    f3c6:	b1e3      	cbz	r3, f402 <smp_pairing_random+0x232>
			struct bt_conn_oob_info info = {
    f3c8:	4b1f      	ldr	r3, [pc, #124]	; (f448 <smp_pairing_random+0x278>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f3ca:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    f3ce:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    f3d2:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f3d6:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f3da:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f3dc:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f3e0:	d411      	bmi.n	f406 <smp_pairing_random+0x236>
				     BT_CONN_OOB_BOTH_PEERS :
    f3e2:	2b00      	cmp	r3, #0
    f3e4:	bf0c      	ite	eq
    f3e6:	2003      	moveq	r0, #3
    f3e8:	2001      	movne	r0, #1
    f3ea:	e00f      	b.n	f40c <smp_pairing_random+0x23c>
    f3ec:	4b10      	ldr	r3, [pc, #64]	; (f430 <smp_pairing_random+0x260>)
    f3ee:	4a0f      	ldr	r2, [pc, #60]	; (f42c <smp_pairing_random+0x25c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f3f0:	4816      	ldr	r0, [pc, #88]	; (f44c <smp_pairing_random+0x27c>)
    f3f2:	1ad2      	subs	r2, r2, r3
    f3f4:	08d2      	lsrs	r2, r2, #3
    f3f6:	0192      	lsls	r2, r2, #6
    f3f8:	f042 0201 	orr.w	r2, r2, #1
    f3fc:	f012 ff83 	bl	22306 <log_1>
    f400:	e730      	b.n	f264 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f402:	2502      	movs	r5, #2
    f404:	e7aa      	b.n	f35c <smp_pairing_random+0x18c>
				     BT_CONN_OOB_BOTH_PEERS :
    f406:	2b00      	cmp	r3, #0
    f408:	bf18      	it	ne
    f40a:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    f40c:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    f40e:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    f412:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f416:	4630      	mov	r0, r6
    f418:	210c      	movs	r1, #12
    f41a:	f016 fc5b 	bl	25cd4 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f41e:	683b      	ldr	r3, [r7, #0]
    f420:	6820      	ldr	r0, [r4, #0]
    f422:	68db      	ldr	r3, [r3, #12]
    f424:	a90a      	add	r1, sp, #40	; 0x28
    f426:	4798      	blx	r3
			return 0;
    f428:	e798      	b.n	f35c <smp_pairing_random+0x18c>
    f42a:	bf00      	nop
    f42c:	00027844 	.word	0x00027844
    f430:	0002775c 	.word	0x0002775c
    f434:	0002d19f 	.word	0x0002d19f
    f438:	2000d7d0 	.word	0x2000d7d0
    f43c:	000f4240 	.word	0x000f4240
    f440:	2000d73c 	.word	0x2000d73c
    f444:	0002d1b4 	.word	0x0002d1b4
    f448:	000279a4 	.word	0x000279a4
    f44c:	0002d0e1 	.word	0x0002d0e1

0000f450 <bt_smp_sign_verify>:
{
    f450:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
    f452:	898b      	ldrh	r3, [r1, #12]
    f454:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f456:	6889      	ldr	r1, [r1, #8]
{
    f458:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f45a:	3b0c      	subs	r3, #12
    f45c:	4419      	add	r1, r3
    f45e:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    f460:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f464:	a801      	add	r0, sp, #4
    f466:	f014 ff4d 	bl	24304 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    f46a:	7a31      	ldrb	r1, [r6, #8]
    f46c:	462a      	mov	r2, r5
    f46e:	2010      	movs	r0, #16
    f470:	f000 fee4 	bl	1023c <bt_keys_find>
	if (!keys) {
    f474:	4606      	mov	r6, r0
    f476:	b9a0      	cbnz	r0, f4a2 <bt_smp_sign_verify+0x52>
    f478:	4a2e      	ldr	r2, [pc, #184]	; (f534 <bt_smp_sign_verify+0xe4>)
    f47a:	4c2f      	ldr	r4, [pc, #188]	; (f538 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    f47c:	4628      	mov	r0, r5
    f47e:	1aa4      	subs	r4, r4, r2
    f480:	f7f8 fdd2 	bl	8028 <bt_addr_le_str_real>
    f484:	f7f6 f83c 	bl	5500 <log_strdup>
    f488:	08e4      	lsrs	r4, r4, #3
    f48a:	01a4      	lsls	r4, r4, #6
    f48c:	f044 0401 	orr.w	r4, r4, #1
    f490:	4601      	mov	r1, r0
    f492:	4622      	mov	r2, r4
    f494:	4829      	ldr	r0, [pc, #164]	; (f53c <bt_smp_sign_verify+0xec>)
    f496:	f012 ff36 	bl	22306 <log_1>
		return -ENOENT;
    f49a:	f06f 0001 	mvn.w	r0, #1
}
    f49e:	b004      	add	sp, #16
    f4a0:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    f4a2:	6e43      	ldr	r3, [r0, #100]	; 0x64
    f4a4:	9300      	str	r3, [sp, #0]
    f4a6:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    f4a8:	68a0      	ldr	r0, [r4, #8]
    f4aa:	3b0c      	subs	r3, #12
    f4ac:	2204      	movs	r2, #4
    f4ae:	4669      	mov	r1, sp
    f4b0:	4418      	add	r0, r3
    f4b2:	f014 ff27 	bl	24304 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    f4b6:	89a2      	ldrh	r2, [r4, #12]
    f4b8:	68a1      	ldr	r1, [r4, #8]
    f4ba:	3a0c      	subs	r2, #12
    f4bc:	b292      	uxth	r2, r2
    f4be:	f106 0054 	add.w	r0, r6, #84	; 0x54
    f4c2:	f7ff f847 	bl	e554 <smp_sign_buf>
	if (err) {
    f4c6:	b198      	cbz	r0, f4f0 <bt_smp_sign_verify+0xa0>
    f4c8:	4a1a      	ldr	r2, [pc, #104]	; (f534 <bt_smp_sign_verify+0xe4>)
    f4ca:	4c1b      	ldr	r4, [pc, #108]	; (f538 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    f4cc:	4628      	mov	r0, r5
    f4ce:	1aa4      	subs	r4, r4, r2
    f4d0:	f7f8 fdaa 	bl	8028 <bt_addr_le_str_real>
    f4d4:	f7f6 f814 	bl	5500 <log_strdup>
    f4d8:	08e4      	lsrs	r4, r4, #3
    f4da:	01a4      	lsls	r4, r4, #6
    f4dc:	f044 0401 	orr.w	r4, r4, #1
    f4e0:	4601      	mov	r1, r0
    f4e2:	4622      	mov	r2, r4
    f4e4:	4816      	ldr	r0, [pc, #88]	; (f540 <bt_smp_sign_verify+0xf0>)
    f4e6:	f012 ff0e 	bl	22306 <log_1>
		return -EIO;
    f4ea:	f06f 0004 	mvn.w	r0, #4
    f4ee:	e7d6      	b.n	f49e <bt_smp_sign_verify+0x4e>
    f4f0:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    f4f2:	68a1      	ldr	r1, [r4, #8]
    f4f4:	3b0c      	subs	r3, #12
    f4f6:	220c      	movs	r2, #12
    f4f8:	4419      	add	r1, r3
    f4fa:	a801      	add	r0, sp, #4
    f4fc:	f014 fef1 	bl	242e2 <memcmp>
    f500:	b198      	cbz	r0, f52a <bt_smp_sign_verify+0xda>
    f502:	4a0c      	ldr	r2, [pc, #48]	; (f534 <bt_smp_sign_verify+0xe4>)
    f504:	4c0c      	ldr	r4, [pc, #48]	; (f538 <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    f506:	4628      	mov	r0, r5
    f508:	1aa4      	subs	r4, r4, r2
    f50a:	f7f8 fd8d 	bl	8028 <bt_addr_le_str_real>
    f50e:	f7f5 fff7 	bl	5500 <log_strdup>
    f512:	08e4      	lsrs	r4, r4, #3
    f514:	01a4      	lsls	r4, r4, #6
    f516:	f044 0401 	orr.w	r4, r4, #1
    f51a:	4601      	mov	r1, r0
    f51c:	4622      	mov	r2, r4
    f51e:	4809      	ldr	r0, [pc, #36]	; (f544 <bt_smp_sign_verify+0xf4>)
    f520:	f012 fef1 	bl	22306 <log_1>
		return -EBADMSG;
    f524:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f528:	e7b9      	b.n	f49e <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    f52a:	6e73      	ldr	r3, [r6, #100]	; 0x64
    f52c:	3301      	adds	r3, #1
    f52e:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
    f530:	e7b5      	b.n	f49e <bt_smp_sign_verify+0x4e>
    f532:	bf00      	nop
    f534:	0002775c 	.word	0x0002775c
    f538:	00027844 	.word	0x00027844
    f53c:	0002d1cd 	.word	0x0002d1cd
    f540:	0002d1ef 	.word	0x0002d1ef
    f544:	0002d211 	.word	0x0002d211

0000f548 <bt_smp_sign>:
{
    f548:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    f54a:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    f54e:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    f550:	462a      	mov	r2, r5
    f552:	7a01      	ldrb	r1, [r0, #8]
    f554:	2008      	movs	r0, #8
    f556:	f000 fe71 	bl	1023c <bt_keys_find>
	if (!keys) {
    f55a:	4604      	mov	r4, r0
    f55c:	b9a0      	cbnz	r0, f588 <bt_smp_sign+0x40>
    f55e:	4a23      	ldr	r2, [pc, #140]	; (f5ec <bt_smp_sign+0xa4>)
    f560:	4c23      	ldr	r4, [pc, #140]	; (f5f0 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    f562:	4628      	mov	r0, r5
    f564:	1aa4      	subs	r4, r4, r2
    f566:	f7f8 fd5f 	bl	8028 <bt_addr_le_str_real>
    f56a:	f7f5 ffc9 	bl	5500 <log_strdup>
    f56e:	08e4      	lsrs	r4, r4, #3
    f570:	01a4      	lsls	r4, r4, #6
    f572:	f044 0401 	orr.w	r4, r4, #1
    f576:	4601      	mov	r1, r0
    f578:	4622      	mov	r2, r4
    f57a:	481e      	ldr	r0, [pc, #120]	; (f5f4 <bt_smp_sign+0xac>)
    f57c:	f012 fec3 	bl	22306 <log_1>
		return -ENOENT;
    f580:	f06f 0001 	mvn.w	r0, #1
}
    f584:	b002      	add	sp, #8
    f586:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
    f588:	210c      	movs	r1, #12
    f58a:	f106 0008 	add.w	r0, r6, #8
    f58e:	f016 ff0d 	bl	263ac <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    f592:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f594:	9301      	str	r3, [sp, #4]
	return buf->data + buf->len;
    f596:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    f598:	68b0      	ldr	r0, [r6, #8]
    f59a:	2204      	movs	r2, #4
    f59c:	3b0c      	subs	r3, #12
    f59e:	eb0d 0102 	add.w	r1, sp, r2
    f5a2:	4418      	add	r0, r3
    f5a4:	f014 feae 	bl	24304 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    f5a8:	89b2      	ldrh	r2, [r6, #12]
    f5aa:	68b1      	ldr	r1, [r6, #8]
    f5ac:	3a0c      	subs	r2, #12
    f5ae:	b292      	uxth	r2, r2
    f5b0:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f5b4:	f7fe ffce 	bl	e554 <smp_sign_buf>
	if (err) {
    f5b8:	b198      	cbz	r0, f5e2 <bt_smp_sign+0x9a>
    f5ba:	4a0c      	ldr	r2, [pc, #48]	; (f5ec <bt_smp_sign+0xa4>)
    f5bc:	4c0c      	ldr	r4, [pc, #48]	; (f5f0 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    f5be:	4628      	mov	r0, r5
    f5c0:	1aa4      	subs	r4, r4, r2
    f5c2:	f7f8 fd31 	bl	8028 <bt_addr_le_str_real>
    f5c6:	f7f5 ff9b 	bl	5500 <log_strdup>
    f5ca:	08e4      	lsrs	r4, r4, #3
    f5cc:	01a4      	lsls	r4, r4, #6
    f5ce:	f044 0401 	orr.w	r4, r4, #1
    f5d2:	4601      	mov	r1, r0
    f5d4:	4622      	mov	r2, r4
    f5d6:	4808      	ldr	r0, [pc, #32]	; (f5f8 <bt_smp_sign+0xb0>)
    f5d8:	f012 fe95 	bl	22306 <log_1>
		return -EIO;
    f5dc:	f06f 0004 	mvn.w	r0, #4
    f5e0:	e7d0      	b.n	f584 <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    f5e2:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f5e4:	3301      	adds	r3, #1
    f5e6:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
    f5e8:	e7cc      	b.n	f584 <bt_smp_sign+0x3c>
    f5ea:	bf00      	nop
    f5ec:	0002775c 	.word	0x0002775c
    f5f0:	00027844 	.word	0x00027844
    f5f4:	0002d233 	.word	0x0002d233
    f5f8:	0002d1ef 	.word	0x0002d1ef

0000f5fc <bt_smp_start_security>:
{
    f5fc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    f600:	78c4      	ldrb	r4, [r0, #3]
    f602:	2c01      	cmp	r4, #1
{
    f604:	4605      	mov	r5, r0
	switch (conn->role) {
    f606:	d005      	beq.n	f614 <bt_smp_start_security+0x18>
		return -EINVAL;
    f608:	f06f 0415 	mvn.w	r4, #21
}
    f60c:	4620      	mov	r0, r4
    f60e:	b003      	add	sp, #12
    f610:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    f614:	f7fe ffde 	bl	e5d4 <smp_chan_get>
	if (!smp) {
    f618:	4606      	mov	r6, r0
    f61a:	2800      	cmp	r0, #0
    f61c:	f000 80a0 	beq.w	f760 <bt_smp_start_security+0x164>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f620:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    f624:	2104      	movs	r1, #4
    f626:	4638      	mov	r0, r7
    f628:	f016 fb6b 	bl	25d02 <atomic_test_bit>
    f62c:	2800      	cmp	r0, #0
    f62e:	f040 809a 	bne.w	f766 <bt_smp_start_security+0x16a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f632:	2103      	movs	r1, #3
    f634:	4638      	mov	r0, r7
    f636:	f016 fb64 	bl	25d02 <atomic_test_bit>
    f63a:	b110      	cbz	r0, f642 <bt_smp_start_security+0x46>
		return -EBUSY;
    f63c:	f06f 040f 	mvn.w	r4, #15
    f640:	e7e4      	b.n	f60c <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f642:	4621      	mov	r1, r4
    f644:	4638      	mov	r0, r7
    f646:	f016 fb5c 	bl	25d02 <atomic_test_bit>
    f64a:	2800      	cmp	r0, #0
    f64c:	d1f6      	bne.n	f63c <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f64e:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    f650:	2b03      	cmp	r3, #3
    f652:	d03d      	beq.n	f6d0 <bt_smp_start_security+0xd4>
    f654:	d82c      	bhi.n	f6b0 <bt_smp_start_security+0xb4>
    f656:	3b01      	subs	r3, #1
    f658:	2b01      	cmp	r3, #1
    f65a:	d946      	bls.n	f6ea <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    f65c:	210b      	movs	r1, #11
    f65e:	1d28      	adds	r0, r5, #4
    f660:	f016 fb4f 	bl	25d02 <atomic_test_bit>
    f664:	2800      	cmp	r0, #0
    f666:	d1cf      	bne.n	f608 <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    f668:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f66c:	b983      	cbnz	r3, f690 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    f66e:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    f672:	7a29      	ldrb	r1, [r5, #8]
    f674:	4622      	mov	r2, r4
    f676:	2020      	movs	r0, #32
    f678:	f000 fde0 	bl	1023c <bt_keys_find>
    f67c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f680:	b930      	cbnz	r0, f690 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    f682:	7a29      	ldrb	r1, [r5, #8]
    f684:	4622      	mov	r2, r4
    f686:	2004      	movs	r0, #4
    f688:	f000 fdd8 	bl	1023c <bt_keys_find>
    f68c:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f690:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f694:	2b00      	cmp	r3, #0
    f696:	d0b7      	beq.n	f608 <bt_smp_start_security+0xc>
    f698:	89da      	ldrh	r2, [r3, #14]
    f69a:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f69e:	2a00      	cmp	r2, #0
    f6a0:	d0b2      	beq.n	f608 <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    f6a2:	7aaa      	ldrb	r2, [r5, #10]
    f6a4:	2a02      	cmp	r2, #2
    f6a6:	d920      	bls.n	f6ea <bt_smp_start_security+0xee>
    f6a8:	7b5b      	ldrb	r3, [r3, #13]
    f6aa:	07db      	lsls	r3, r3, #31
    f6ac:	d5ac      	bpl.n	f608 <bt_smp_start_security+0xc>
    f6ae:	e01c      	b.n	f6ea <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
    f6b0:	2b04      	cmp	r3, #4
    f6b2:	d1d3      	bne.n	f65c <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f6b4:	f7fe ff28 	bl	e508 <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f6b8:	2803      	cmp	r0, #3
    f6ba:	d104      	bne.n	f6c6 <bt_smp_start_security+0xca>
    f6bc:	4b2b      	ldr	r3, [pc, #172]	; (f76c <bt_smp_start_security+0x170>)
    f6be:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f6c0:	b1f3      	cbz	r3, f700 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f6c2:	68dc      	ldr	r4, [r3, #12]
    f6c4:	b10c      	cbz	r4, f6ca <bt_smp_start_security+0xce>
    f6c6:	4b2a      	ldr	r3, [pc, #168]	; (f770 <bt_smp_start_security+0x174>)
    f6c8:	781c      	ldrb	r4, [r3, #0]
    f6ca:	f004 0401 	and.w	r4, r4, #1
    f6ce:	e00a      	b.n	f6e6 <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f6d0:	f7fe ff1a 	bl	e508 <get_io_capa>
    f6d4:	2803      	cmp	r0, #3
    f6d6:	d106      	bne.n	f6e6 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    f6d8:	4b24      	ldr	r3, [pc, #144]	; (f76c <bt_smp_start_security+0x170>)
    f6da:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f6dc:	b11c      	cbz	r4, f6e6 <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    f6de:	68e4      	ldr	r4, [r4, #12]
    f6e0:	3c00      	subs	r4, #0
    f6e2:	bf18      	it	ne
    f6e4:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f6e6:	2c00      	cmp	r4, #0
    f6e8:	d0b8      	beq.n	f65c <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    f6ea:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f6ee:	b14b      	cbz	r3, f704 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
    f6f0:	4630      	mov	r0, r6
    f6f2:	f7fe ffdf 	bl	e6b4 <smp_init>
    f6f6:	4604      	mov	r4, r0
    f6f8:	b180      	cbz	r0, f71c <bt_smp_start_security+0x120>
		return -ENOBUFS;
    f6fa:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f6fe:	e785      	b.n	f60c <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f700:	2400      	movs	r4, #0
    f702:	e7e2      	b.n	f6ca <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f704:	7a28      	ldrb	r0, [r5, #8]
    f706:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f70a:	f000 fd21 	bl	10150 <bt_keys_get_addr>
    f70e:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f712:	2800      	cmp	r0, #0
    f714:	d1ec      	bne.n	f6f0 <bt_smp_start_security+0xf4>
			return -ENOMEM;
    f716:	f06f 040b 	mvn.w	r4, #11
    f71a:	e777      	b.n	f60c <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    f71c:	210b      	movs	r1, #11
    f71e:	4630      	mov	r0, r6
    f720:	f016 faf8 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f724:	4680      	mov	r8, r0
    f726:	2800      	cmp	r0, #0
    f728:	d0e7      	beq.n	f6fa <bt_smp_start_security+0xfe>
	return net_buf_simple_add(&buf->b, len);
    f72a:	2101      	movs	r1, #1
    f72c:	3008      	adds	r0, #8
    f72e:	f016 fe3d 	bl	263ac <net_buf_simple_add>
    f732:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f734:	2009      	movs	r0, #9
    f736:	f7fe ff87 	bl	e648 <get_auth.constprop.0>
    f73a:	4623      	mov	r3, r4
    f73c:	f889 0000 	strb.w	r0, [r9]
    f740:	4642      	mov	r2, r8
    f742:	9400      	str	r4, [sp, #0]
    f744:	2106      	movs	r1, #6
    f746:	4628      	mov	r0, r5
    f748:	f015 fb03 	bl	24d52 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f74c:	4638      	mov	r0, r7
    f74e:	210f      	movs	r1, #15
    f750:	f016 fac0 	bl	25cd4 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    f754:	2101      	movs	r1, #1
    f756:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f75a:	f016 fabb 	bl	25cd4 <atomic_set_bit>
	return 0;
    f75e:	e755      	b.n	f60c <bt_smp_start_security+0x10>
		return -ENOTCONN;
    f760:	f06f 0438 	mvn.w	r4, #56	; 0x38
    f764:	e752      	b.n	f60c <bt_smp_start_security+0x10>
		return -EIO;
    f766:	f06f 0404 	mvn.w	r4, #4
    f76a:	e74f      	b.n	f60c <bt_smp_start_security+0x10>
    f76c:	2000d73c 	.word	0x2000d73c
    f770:	2000f30d 	.word	0x2000f30d

0000f774 <smp_pairing_complete>:
{
    f774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f778:	4606      	mov	r6, r0
    f77a:	f8df 80a8 	ldr.w	r8, [pc, #168]	; f824 <smp_pairing_complete+0xb0>
    f77e:	f856 4bbc 	ldr.w	r4, [r6], #188
{
    f782:	4607      	mov	r7, r0
	if (!status) {
    f784:	b9e9      	cbnz	r1, f7c2 <smp_pairing_complete+0x4e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f786:	210d      	movs	r1, #13
    f788:	4630      	mov	r0, r6
    f78a:	f016 faba 	bl	25d02 <atomic_test_bit>
		if (bond_flag) {
    f78e:	4605      	mov	r5, r0
    f790:	b118      	cbz	r0, f79a <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
    f792:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f796:	f000 fe95 	bl	104c4 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    f79a:	f8d8 3000 	ldr.w	r3, [r8]
    f79e:	b123      	cbz	r3, f7aa <smp_pairing_complete+0x36>
    f7a0:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    f7a2:	b113      	cbz	r3, f7aa <smp_pairing_complete+0x36>
			bt_auth->pairing_failed(conn, security_err);
    f7a4:	4629      	mov	r1, r5
    f7a6:	4620      	mov	r0, r4
    f7a8:	4798      	blx	r3
	smp_reset(smp);
    f7aa:	4638      	mov	r0, r7
    f7ac:	f016 fb45 	bl	25e3a <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    f7b0:	7a62      	ldrb	r2, [r4, #9]
    f7b2:	7aa3      	ldrb	r3, [r4, #10]
    f7b4:	429a      	cmp	r2, r3
    f7b6:	d033      	beq.n	f820 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
    f7b8:	4620      	mov	r0, r4
}
    f7ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    f7be:	f7ff bf1d 	b.w	f5fc <bt_smp_start_security>
	switch (smp_err) {
    f7c2:	3901      	subs	r1, #1
    f7c4:	b2c9      	uxtb	r1, r1
    f7c6:	290d      	cmp	r1, #13
    f7c8:	bf9c      	itt	ls
    f7ca:	4b17      	ldrls	r3, [pc, #92]	; (f828 <smp_pairing_complete+0xb4>)
    f7cc:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    f7ce:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    f7d2:	bf88      	it	hi
    f7d4:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    f7d6:	b143      	cbz	r3, f7ea <smp_pairing_complete+0x76>
    f7d8:	7b1b      	ldrb	r3, [r3, #12]
    f7da:	b9d3      	cbnz	r3, f812 <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
    f7dc:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f7e0:	f000 fd8a 	bl	102f8 <bt_keys_clear>
			conn->le.keys = NULL;
    f7e4:	2300      	movs	r3, #0
    f7e6:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f7ea:	2102      	movs	r1, #2
    f7ec:	4630      	mov	r0, r6
    f7ee:	f016 fa88 	bl	25d02 <atomic_test_bit>
    f7f2:	b940      	cbnz	r0, f806 <smp_pairing_complete+0x92>
	switch (err) {
    f7f4:	2d08      	cmp	r5, #8
    f7f6:	bf16      	itet	ne
    f7f8:	4b0c      	ldrne	r3, [pc, #48]	; (f82c <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f7fa:	211f      	moveq	r1, #31
    f7fc:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    f7fe:	462a      	mov	r2, r5
    f800:	4620      	mov	r0, r4
    f802:	f7fb fd31 	bl	b268 <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    f806:	f8d8 3000 	ldr.w	r3, [r8]
    f80a:	2b00      	cmp	r3, #0
    f80c:	d0cd      	beq.n	f7aa <smp_pairing_complete+0x36>
    f80e:	69db      	ldr	r3, [r3, #28]
    f810:	e7c7      	b.n	f7a2 <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    f812:	2102      	movs	r1, #2
    f814:	4630      	mov	r0, r6
    f816:	f016 fa74 	bl	25d02 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    f81a:	2800      	cmp	r0, #0
    f81c:	d1de      	bne.n	f7dc <smp_pairing_complete+0x68>
    f81e:	e7e4      	b.n	f7ea <smp_pairing_complete+0x76>
}
    f820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f824:	2000d73c 	.word	0x2000d73c
    f828:	0002d437 	.word	0x0002d437
    f82c:	0002d44d 	.word	0x0002d44d

0000f830 <bt_smp_recv>:
{
    f830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    f832:	898b      	ldrh	r3, [r1, #12]
{
    f834:	4604      	mov	r4, r0
    f836:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f838:	b95b      	cbnz	r3, f852 <bt_smp_recv+0x22>
    f83a:	493a      	ldr	r1, [pc, #232]	; (f924 <bt_smp_recv+0xf4>)
    f83c:	4b3a      	ldr	r3, [pc, #232]	; (f928 <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    f83e:	483b      	ldr	r0, [pc, #236]	; (f92c <bt_smp_recv+0xfc>)
    f840:	1ac9      	subs	r1, r1, r3
    f842:	08c9      	lsrs	r1, r1, #3
    f844:	0189      	lsls	r1, r1, #6
    f846:	f041 0101 	orr.w	r1, r1, #1
    f84a:	f012 fd4f 	bl	222ec <log_0>
}
    f84e:	2000      	movs	r0, #0
    f850:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f852:	2101      	movs	r1, #1
    f854:	f105 0008 	add.w	r0, r5, #8
    f858:	f016 fdcf 	bl	263fa <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f85c:	2104      	movs	r1, #4
    f85e:	4606      	mov	r6, r0
    f860:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f864:	f016 fa4d 	bl	25d02 <atomic_test_bit>
    f868:	7831      	ldrb	r1, [r6, #0]
    f86a:	b150      	cbz	r0, f882 <bt_smp_recv+0x52>
    f86c:	4a2d      	ldr	r2, [pc, #180]	; (f924 <bt_smp_recv+0xf4>)
    f86e:	4b2e      	ldr	r3, [pc, #184]	; (f928 <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f870:	482f      	ldr	r0, [pc, #188]	; (f930 <bt_smp_recv+0x100>)
    f872:	1ad2      	subs	r2, r2, r3
    f874:	08d2      	lsrs	r2, r2, #3
    f876:	0192      	lsls	r2, r2, #6
    f878:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f87c:	f012 fd43 	bl	22306 <log_1>
		return 0;
    f880:	e7e5      	b.n	f84e <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    f882:	290e      	cmp	r1, #14
    f884:	d908      	bls.n	f898 <bt_smp_recv+0x68>
    f886:	4a27      	ldr	r2, [pc, #156]	; (f924 <bt_smp_recv+0xf4>)
    f888:	4b27      	ldr	r3, [pc, #156]	; (f928 <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f88a:	482a      	ldr	r0, [pc, #168]	; (f934 <bt_smp_recv+0x104>)
    f88c:	1ad2      	subs	r2, r2, r3
    f88e:	08d2      	lsrs	r2, r2, #3
    f890:	0192      	lsls	r2, r2, #6
    f892:	f042 0202 	orr.w	r2, r2, #2
    f896:	e7f1      	b.n	f87c <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    f898:	4f27      	ldr	r7, [pc, #156]	; (f938 <bt_smp_recv+0x108>)
    f89a:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f89e:	b973      	cbnz	r3, f8be <bt_smp_recv+0x8e>
    f8a0:	4b21      	ldr	r3, [pc, #132]	; (f928 <bt_smp_recv+0xf8>)
    f8a2:	4a20      	ldr	r2, [pc, #128]	; (f924 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    f8a4:	4825      	ldr	r0, [pc, #148]	; (f93c <bt_smp_recv+0x10c>)
    f8a6:	1ad2      	subs	r2, r2, r3
    f8a8:	08d2      	lsrs	r2, r2, #3
    f8aa:	0192      	lsls	r2, r2, #6
    f8ac:	f042 0202 	orr.w	r2, r2, #2
    f8b0:	f012 fd29 	bl	22306 <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    f8b4:	2107      	movs	r1, #7
		smp_error(smp, err);
    f8b6:	4620      	mov	r0, r4
    f8b8:	f016 fc44 	bl	26144 <smp_error>
    f8bc:	e7c7      	b.n	f84e <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    f8be:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f8c2:	f016 faa2 	bl	25e0a <atomic_test_and_clear_bit>
    f8c6:	7831      	ldrb	r1, [r6, #0]
    f8c8:	b970      	cbnz	r0, f8e8 <bt_smp_recv+0xb8>
    f8ca:	4b17      	ldr	r3, [pc, #92]	; (f928 <bt_smp_recv+0xf8>)
    f8cc:	4a15      	ldr	r2, [pc, #84]	; (f924 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    f8ce:	481c      	ldr	r0, [pc, #112]	; (f940 <bt_smp_recv+0x110>)
    f8d0:	1ad2      	subs	r2, r2, r3
    f8d2:	08d2      	lsrs	r2, r2, #3
    f8d4:	0192      	lsls	r2, r2, #6
    f8d6:	f042 0202 	orr.w	r2, r2, #2
    f8da:	f012 fd14 	bl	22306 <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    f8de:	7833      	ldrb	r3, [r6, #0]
    f8e0:	2b05      	cmp	r3, #5
    f8e2:	d0b4      	beq.n	f84e <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    f8e4:	2108      	movs	r1, #8
    f8e6:	e7e6      	b.n	f8b6 <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    f8e8:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    f8ec:	89a8      	ldrh	r0, [r5, #12]
    f8ee:	791b      	ldrb	r3, [r3, #4]
    f8f0:	4283      	cmp	r3, r0
    f8f2:	d00d      	beq.n	f910 <bt_smp_recv+0xe0>
    f8f4:	4a0c      	ldr	r2, [pc, #48]	; (f928 <bt_smp_recv+0xf8>)
    f8f6:	4b0b      	ldr	r3, [pc, #44]	; (f924 <bt_smp_recv+0xf4>)
    f8f8:	1a9b      	subs	r3, r3, r2
    f8fa:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    f8fc:	019b      	lsls	r3, r3, #6
    f8fe:	460a      	mov	r2, r1
    f900:	f043 0301 	orr.w	r3, r3, #1
    f904:	4601      	mov	r1, r0
    f906:	480f      	ldr	r0, [pc, #60]	; (f944 <bt_smp_recv+0x114>)
    f908:	f012 fd11 	bl	2232e <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    f90c:	210a      	movs	r1, #10
    f90e:	e7d2      	b.n	f8b6 <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    f910:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    f914:	4620      	mov	r0, r4
    f916:	4629      	mov	r1, r5
    f918:	4798      	blx	r3
	if (err) {
    f91a:	4601      	mov	r1, r0
    f91c:	2800      	cmp	r0, #0
    f91e:	d096      	beq.n	f84e <bt_smp_recv+0x1e>
    f920:	e7c9      	b.n	f8b6 <bt_smp_recv+0x86>
    f922:	bf00      	nop
    f924:	00027844 	.word	0x00027844
    f928:	0002775c 	.word	0x0002775c
    f92c:	0002d254 	.word	0x0002d254
    f930:	0002d26f 	.word	0x0002d26f
    f934:	0002d2a0 	.word	0x0002d2a0
    f938:	000281cc 	.word	0x000281cc
    f93c:	0002d2c2 	.word	0x0002d2c2
    f940:	0002d2dc 	.word	0x0002d2dc
    f944:	0002cd16 	.word	0x0002cd16

0000f948 <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    f948:	4b13      	ldr	r3, [pc, #76]	; (f998 <bt_smp_pkey_ready+0x50>)
{
    f94a:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    f94c:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    f94e:	b958      	cbnz	r0, f968 <bt_smp_pkey_ready+0x20>
    f950:	4912      	ldr	r1, [pc, #72]	; (f99c <bt_smp_pkey_ready+0x54>)
    f952:	4b13      	ldr	r3, [pc, #76]	; (f9a0 <bt_smp_pkey_ready+0x58>)
		BT_WARN("Public key not available");
    f954:	4813      	ldr	r0, [pc, #76]	; (f9a4 <bt_smp_pkey_ready+0x5c>)
    f956:	1ac9      	subs	r1, r1, r3
    f958:	08c9      	lsrs	r1, r1, #3
    f95a:	0189      	lsls	r1, r1, #6
}
    f95c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    f960:	f041 0102 	orr.w	r1, r1, #2
    f964:	f012 bcc2 	b.w	222ec <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    f968:	4c0f      	ldr	r4, [pc, #60]	; (f9a8 <bt_smp_pkey_ready+0x60>)
	z_impl_k_sem_give(sem);
    f96a:	4810      	ldr	r0, [pc, #64]	; (f9ac <bt_smp_pkey_ready+0x64>)
    f96c:	f010 fcc8 	bl	20300 <z_impl_k_sem_give>
    f970:	f3bf 8f5b 	dmb	ish
    f974:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    f978:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    f97c:	065b      	lsls	r3, r3, #25
    f97e:	d509      	bpl.n	f994 <bt_smp_pkey_ready+0x4c>
		err = smp_public_key_slave(smp);
    f980:	4620      	mov	r0, r4
    f982:	f7ff fac1 	bl	ef08 <smp_public_key_slave>
		if (err) {
    f986:	4601      	mov	r1, r0
    f988:	b120      	cbz	r0, f994 <bt_smp_pkey_ready+0x4c>
			smp_error(smp, err);
    f98a:	4620      	mov	r0, r4
}
    f98c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    f990:	f016 bbd8 	b.w	26144 <smp_error>
}
    f994:	bd10      	pop	{r4, pc}
    f996:	bf00      	nop
    f998:	2000d7d0 	.word	0x2000d7d0
    f99c:	00027844 	.word	0x00027844
    f9a0:	0002775c 	.word	0x0002775c
    f9a4:	0002d2f7 	.word	0x0002d2f7
    f9a8:	2000a868 	.word	0x2000a868
    f9ac:	20009ff0 	.word	0x20009ff0

0000f9b0 <smp_signing_info>:
{
    f9b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f9b2:	4605      	mov	r5, r0
    f9b4:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    f9b6:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    f9ba:	210d      	movs	r1, #13
    f9bc:	f016 f9a1 	bl	25d02 <atomic_test_bit>
    f9c0:	b300      	cbz	r0, fa04 <smp_signing_info+0x54>
					&conn->le.dst);
    f9c2:	f104 0688 	add.w	r6, r4, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    f9c6:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    f9c8:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    f9ca:	4632      	mov	r2, r6
    f9cc:	2010      	movs	r0, #16
    f9ce:	f016 fc82 	bl	262d6 <bt_keys_get_type>
		if (!keys) {
    f9d2:	b990      	cbnz	r0, f9fa <smp_signing_info+0x4a>
    f9d4:	4a13      	ldr	r2, [pc, #76]	; (fa24 <smp_signing_info+0x74>)
    f9d6:	4c14      	ldr	r4, [pc, #80]	; (fa28 <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    f9d8:	4630      	mov	r0, r6
    f9da:	1aa4      	subs	r4, r4, r2
    f9dc:	f7f8 fb24 	bl	8028 <bt_addr_le_str_real>
    f9e0:	f7f5 fd8e 	bl	5500 <log_strdup>
    f9e4:	08e4      	lsrs	r4, r4, #3
    f9e6:	01a4      	lsls	r4, r4, #6
    f9e8:	f044 0401 	orr.w	r4, r4, #1
    f9ec:	4601      	mov	r1, r0
    f9ee:	4622      	mov	r2, r4
    f9f0:	480e      	ldr	r0, [pc, #56]	; (fa2c <smp_signing_info+0x7c>)
    f9f2:	f012 fc88 	bl	22306 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    f9f6:	2008      	movs	r0, #8
}
    f9f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    f9fa:	2210      	movs	r2, #16
    f9fc:	4639      	mov	r1, r7
    f9fe:	3054      	adds	r0, #84	; 0x54
    fa00:	f014 fc80 	bl	24304 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    fa04:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    fa08:	f023 0304 	bic.w	r3, r3, #4
    fa0c:	f885 31a1 	strb.w	r3, [r5, #417]	; 0x1a1
	if (!smp->local_dist && !smp->remote_dist) {
    fa10:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    fa14:	b91c      	cbnz	r4, fa1e <smp_signing_info+0x6e>
		smp_pairing_complete(smp, 0);
    fa16:	4621      	mov	r1, r4
    fa18:	4628      	mov	r0, r5
    fa1a:	f7ff feab 	bl	f774 <smp_pairing_complete>
	return 0;
    fa1e:	2000      	movs	r0, #0
    fa20:	e7ea      	b.n	f9f8 <smp_signing_info+0x48>
    fa22:	bf00      	nop
    fa24:	0002775c 	.word	0x0002775c
    fa28:	00027844 	.word	0x00027844
    fa2c:	0002d09a 	.word	0x0002d09a

0000fa30 <smp_ident_addr_info>:
{
    fa30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    fa34:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fa36:	6805      	ldr	r5, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fa38:	7833      	ldrb	r3, [r6, #0]
{
    fa3a:	4604      	mov	r4, r0
    fa3c:	b31b      	cbz	r3, fa86 <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    fa3e:	79b3      	ldrb	r3, [r6, #6]
    fa40:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fa44:	2bc0      	cmp	r3, #192	; 0xc0
    fa46:	d01e      	beq.n	fa86 <smp_ident_addr_info+0x56>
    fa48:	4b43      	ldr	r3, [pc, #268]	; (fb58 <smp_ident_addr_info+0x128>)
    fa4a:	4c44      	ldr	r4, [pc, #272]	; (fb5c <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    fa4c:	4630      	mov	r0, r6
    fa4e:	1ae4      	subs	r4, r4, r3
    fa50:	f7f8 faea 	bl	8028 <bt_addr_le_str_real>
    fa54:	f7f5 fd54 	bl	5500 <log_strdup>
    fa58:	08e4      	lsrs	r4, r4, #3
    fa5a:	01a4      	lsls	r4, r4, #6
    fa5c:	f044 0401 	orr.w	r4, r4, #1
    fa60:	4601      	mov	r1, r0
    fa62:	4622      	mov	r2, r4
    fa64:	483e      	ldr	r0, [pc, #248]	; (fb60 <smp_ident_addr_info+0x130>)
    fa66:	f012 fc4e 	bl	22306 <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    fa6a:	f105 0088 	add.w	r0, r5, #136	; 0x88
    fa6e:	f7f8 fadb 	bl	8028 <bt_addr_le_str_real>
    fa72:	f7f5 fd45 	bl	5500 <log_strdup>
    fa76:	4622      	mov	r2, r4
    fa78:	4601      	mov	r1, r0
    fa7a:	483a      	ldr	r0, [pc, #232]	; (fb64 <smp_ident_addr_info+0x134>)
    fa7c:	f012 fc43 	bl	22306 <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    fa80:	200a      	movs	r0, #10
}
    fa82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fa86:	210d      	movs	r1, #13
    fa88:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    fa8c:	f016 f939 	bl	25d02 <atomic_test_bit>
    fa90:	2800      	cmp	r0, #0
    fa92:	d048      	beq.n	fb26 <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    fa94:	f105 0788 	add.w	r7, r5, #136	; 0x88
    fa98:	7a29      	ldrb	r1, [r5, #8]
    fa9a:	463a      	mov	r2, r7
    fa9c:	2002      	movs	r0, #2
    fa9e:	f016 fc1a 	bl	262d6 <bt_keys_get_type>
		if (!keys) {
    faa2:	4680      	mov	r8, r0
    faa4:	b990      	cbnz	r0, facc <smp_ident_addr_info+0x9c>
    faa6:	4a2c      	ldr	r2, [pc, #176]	; (fb58 <smp_ident_addr_info+0x128>)
    faa8:	4c2c      	ldr	r4, [pc, #176]	; (fb5c <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    faaa:	4638      	mov	r0, r7
    faac:	1aa4      	subs	r4, r4, r2
    faae:	f7f8 fabb 	bl	8028 <bt_addr_le_str_real>
    fab2:	f7f5 fd25 	bl	5500 <log_strdup>
    fab6:	08e4      	lsrs	r4, r4, #3
    fab8:	01a4      	lsls	r4, r4, #6
    faba:	f044 0401 	orr.w	r4, r4, #1
    fabe:	4601      	mov	r1, r0
    fac0:	4622      	mov	r2, r4
    fac2:	4829      	ldr	r0, [pc, #164]	; (fb68 <smp_ident_addr_info+0x138>)
    fac4:	f012 fc1f 	bl	22306 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fac8:	2008      	movs	r0, #8
    faca:	e7da      	b.n	fa82 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    facc:	78eb      	ldrb	r3, [r5, #3]
    face:	2b00      	cmp	r3, #0
    fad0:	d13f      	bne.n	fb52 <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    fad2:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fad6:	780b      	ldrb	r3, [r1, #0]
    fad8:	2b01      	cmp	r3, #1
    fada:	d121      	bne.n	fb20 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    fadc:	798b      	ldrb	r3, [r1, #6]
    fade:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fae2:	2b40      	cmp	r3, #64	; 0x40
    fae4:	d11c      	bne.n	fb20 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fae6:	2206      	movs	r2, #6
    fae8:	3101      	adds	r1, #1
    faea:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    faee:	f014 fc09 	bl	24304 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    faf2:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    faf6:	b19b      	cbz	r3, fb20 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    faf8:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    fafc:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fb00:	2bc0      	cmp	r3, #192	; 0xc0
    fb02:	d00d      	beq.n	fb20 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fb04:	2207      	movs	r2, #7
    fb06:	4631      	mov	r1, r6
    fb08:	f108 0001 	add.w	r0, r8, #1
    fb0c:	f014 fbfa 	bl	24304 <memcpy>
    fb10:	2207      	movs	r2, #7
    fb12:	4631      	mov	r1, r6
    fb14:	4638      	mov	r0, r7
    fb16:	f014 fbf5 	bl	24304 <memcpy>
				bt_conn_identity_resolved(conn);
    fb1a:	4628      	mov	r0, r5
    fb1c:	f7fb fb8a 	bl	b234 <bt_conn_identity_resolved>
		bt_id_add(keys);
    fb20:	4640      	mov	r0, r8
    fb22:	f7fa f9bb 	bl	9e9c <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fb26:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fb2a:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fb2e:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fb30:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fb34:	d504      	bpl.n	fb40 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fb36:	210a      	movs	r1, #10
    fb38:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fb3c:	f016 f8ca 	bl	25cd4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    fb40:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    fb44:	b91d      	cbnz	r5, fb4e <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    fb46:	4629      	mov	r1, r5
    fb48:	4620      	mov	r0, r4
    fb4a:	f7ff fe13 	bl	f774 <smp_pairing_complete>
	return 0;
    fb4e:	2000      	movs	r0, #0
    fb50:	e797      	b.n	fa82 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    fb52:	f105 018f 	add.w	r1, r5, #143	; 0x8f
    fb56:	e7be      	b.n	fad6 <smp_ident_addr_info+0xa6>
    fb58:	0002775c 	.word	0x0002775c
    fb5c:	00027844 	.word	0x00027844
    fb60:	0002d310 	.word	0x0002d310
    fb64:	0002d1e7 	.word	0x0002d1e7
    fb68:	0002d09a 	.word	0x0002d09a

0000fb6c <smp_master_ident>:
{
    fb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb6e:	4604      	mov	r4, r0
    fb70:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    fb72:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fb76:	210d      	movs	r1, #13
    fb78:	f016 f8c3 	bl	25d02 <atomic_test_bit>
    fb7c:	b368      	cbz	r0, fbda <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fb7e:	f105 0788 	add.w	r7, r5, #136	; 0x88
    fb82:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    fb84:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fb86:	463a      	mov	r2, r7
    fb88:	2004      	movs	r0, #4
    fb8a:	f016 fba4 	bl	262d6 <bt_keys_get_type>
		if (!keys) {
    fb8e:	4605      	mov	r5, r0
    fb90:	b990      	cbnz	r0, fbb8 <smp_master_ident+0x4c>
    fb92:	4a1d      	ldr	r2, [pc, #116]	; (fc08 <smp_master_ident+0x9c>)
    fb94:	4c1d      	ldr	r4, [pc, #116]	; (fc0c <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    fb96:	4638      	mov	r0, r7
    fb98:	1aa4      	subs	r4, r4, r2
    fb9a:	f7f8 fa45 	bl	8028 <bt_addr_le_str_real>
    fb9e:	f7f5 fcaf 	bl	5500 <log_strdup>
    fba2:	08e4      	lsrs	r4, r4, #3
    fba4:	01a4      	lsls	r4, r4, #6
    fba6:	f044 0401 	orr.w	r4, r4, #1
    fbaa:	4601      	mov	r1, r0
    fbac:	4622      	mov	r2, r4
    fbae:	4818      	ldr	r0, [pc, #96]	; (fc10 <smp_master_ident+0xa4>)
    fbb0:	f012 fba9 	bl	22306 <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fbb4:	2008      	movs	r0, #8
}
    fbb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    fbb8:	2202      	movs	r2, #2
    fbba:	4631      	mov	r1, r6
    fbbc:	3018      	adds	r0, #24
    fbbe:	f014 fba1 	bl	24304 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    fbc2:	2208      	movs	r2, #8
    fbc4:	1cb1      	adds	r1, r6, #2
    fbc6:	f105 0010 	add.w	r0, r5, #16
    fbca:	f014 fb9b 	bl	24304 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    fbce:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fbd2:	f023 0301 	bic.w	r3, r3, #1
    fbd6:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fbda:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fbde:	079a      	lsls	r2, r3, #30
    fbe0:	d50d      	bpl.n	fbfe <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fbe2:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fbe4:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fbe8:	f016 f874 	bl	25cd4 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    fbec:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    fbf0:	b91d      	cbnz	r5, fbfa <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    fbf2:	4629      	mov	r1, r5
    fbf4:	4620      	mov	r0, r4
    fbf6:	f7ff fdbd 	bl	f774 <smp_pairing_complete>
	return 0;
    fbfa:	2000      	movs	r0, #0
    fbfc:	e7db      	b.n	fbb6 <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fbfe:	075b      	lsls	r3, r3, #29
    fc00:	d5f4      	bpl.n	fbec <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fc02:	210a      	movs	r1, #10
    fc04:	e7ee      	b.n	fbe4 <smp_master_ident+0x78>
    fc06:	bf00      	nop
    fc08:	0002775c 	.word	0x0002775c
    fc0c:	00027844 	.word	0x00027844
    fc10:	0002d09a 	.word	0x0002d09a

0000fc14 <smp_pairing_failed>:
{
    fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fc16:	4a15      	ldr	r2, [pc, #84]	; (fc6c <smp_pairing_failed+0x58>)
    fc18:	4b15      	ldr	r3, [pc, #84]	; (fc70 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    fc1a:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fc1c:	4605      	mov	r5, r0
    fc1e:	1ad2      	subs	r2, r2, r3
    fc20:	08d2      	lsrs	r2, r2, #3
    fc22:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    fc26:	7831      	ldrb	r1, [r6, #0]
    fc28:	0192      	lsls	r2, r2, #6
{
    fc2a:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    fc2c:	f042 0201 	orr.w	r2, r2, #1
    fc30:	4810      	ldr	r0, [pc, #64]	; (fc74 <smp_pairing_failed+0x60>)
    fc32:	f012 fb68 	bl	22306 <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fc36:	210a      	movs	r1, #10
    fc38:	4628      	mov	r0, r5
    fc3a:	f016 f8e6 	bl	25e0a <atomic_test_and_clear_bit>
    fc3e:	b140      	cbz	r0, fc52 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    fc40:	4b0d      	ldr	r3, [pc, #52]	; (fc78 <smp_pairing_failed+0x64>)
    fc42:	681b      	ldr	r3, [r3, #0]
    fc44:	b963      	cbnz	r3, fc60 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    fc46:	4620      	mov	r0, r4
    fc48:	7831      	ldrb	r1, [r6, #0]
    fc4a:	f7ff fd93 	bl	f774 <smp_pairing_complete>
}
    fc4e:	2000      	movs	r0, #0
    fc50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    fc52:	210b      	movs	r1, #11
    fc54:	4628      	mov	r0, r5
    fc56:	f016 f8d8 	bl	25e0a <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fc5a:	2800      	cmp	r0, #0
    fc5c:	d1f0      	bne.n	fc40 <smp_pairing_failed+0x2c>
    fc5e:	e7f2      	b.n	fc46 <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    fc60:	691b      	ldr	r3, [r3, #16]
    fc62:	2b00      	cmp	r3, #0
    fc64:	d0ef      	beq.n	fc46 <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    fc66:	4638      	mov	r0, r7
    fc68:	4798      	blx	r3
    fc6a:	e7ec      	b.n	fc46 <smp_pairing_failed+0x32>
    fc6c:	00027844 	.word	0x00027844
    fc70:	0002775c 	.word	0x0002775c
    fc74:	0002d324 	.word	0x0002d324
    fc78:	2000d73c 	.word	0x2000d73c

0000fc7c <bt_smp_encrypt_change>:
{
    fc7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    fc80:	4605      	mov	r5, r0
{
    fc82:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    fc84:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    fc88:	4604      	mov	r4, r0
    fc8a:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    fc8c:	4628      	mov	r0, r5
    fc8e:	2101      	movs	r1, #1
    fc90:	f016 f8bb 	bl	25e0a <atomic_test_and_clear_bit>
    fc94:	2800      	cmp	r0, #0
    fc96:	f000 8178 	beq.w	ff8a <bt_smp_encrypt_change+0x30e>
	if (hci_status) {
    fc9a:	b1de      	cbz	r6, fcd4 <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fc9c:	2103      	movs	r1, #3
    fc9e:	4628      	mov	r0, r5
    fca0:	f016 f82f 	bl	25d02 <atomic_test_bit>
    fca4:	2800      	cmp	r0, #0
    fca6:	f000 8170 	beq.w	ff8a <bt_smp_encrypt_change+0x30e>
			uint8_t smp_err = smp_err_get(
    fcaa:	4630      	mov	r0, r6
    fcac:	f7fa f848 	bl	9d40 <bt_security_err_get>
	switch (auth_err) {
    fcb0:	3801      	subs	r0, #1
    fcb2:	b2c0      	uxtb	r0, r0
    fcb4:	2807      	cmp	r0, #7
    fcb6:	bf9a      	itte	ls
    fcb8:	4bb5      	ldrls	r3, [pc, #724]	; (ff90 <bt_smp_encrypt_change+0x314>)
    fcba:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    fcbc:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    fcbe:	2102      	movs	r1, #2
    fcc0:	4628      	mov	r0, r5
    fcc2:	f016 f807 	bl	25cd4 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    fcc6:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    fcc8:	4620      	mov	r0, r4
}
    fcca:	b009      	add	sp, #36	; 0x24
    fccc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_pairing_complete(smp, 0);
    fcd0:	f7ff bd50 	b.w	f774 <smp_pairing_complete>
	if (!conn->encrypt) {
    fcd4:	7afb      	ldrb	r3, [r7, #11]
    fcd6:	2b00      	cmp	r3, #0
    fcd8:	f000 8157 	beq.w	ff8a <bt_smp_encrypt_change+0x30e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fcdc:	2103      	movs	r1, #3
    fcde:	4628      	mov	r0, r5
    fce0:	f016 f80f 	bl	25d02 <atomic_test_bit>
    fce4:	b928      	cbnz	r0, fcf2 <bt_smp_encrypt_change+0x76>
		smp_reset(smp);
    fce6:	4620      	mov	r0, r4
}
    fce8:	b009      	add	sp, #36	; 0x24
    fcea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_reset(smp);
    fcee:	f016 b8a4 	b.w	25e3a <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fcf2:	2105      	movs	r1, #5
    fcf4:	4628      	mov	r0, r5
    fcf6:	f016 f804 	bl	25d02 <atomic_test_bit>
    fcfa:	b198      	cbz	r0, fd24 <bt_smp_encrypt_change+0xa8>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    fcfc:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    fd00:	071a      	lsls	r2, r3, #28
    fd02:	d507      	bpl.n	fd14 <bt_smp_encrypt_change+0x98>
    fd04:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fd08:	071b      	lsls	r3, r3, #28
    fd0a:	d503      	bpl.n	fd14 <bt_smp_encrypt_change+0x98>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    fd0c:	2111      	movs	r1, #17
    fd0e:	4628      	mov	r0, r5
    fd10:	f015 ffe0 	bl	25cd4 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    fd14:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    fd18:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fd1c:	f023 0308 	bic.w	r3, r3, #8
    fd20:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    fd24:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fd28:	07df      	lsls	r7, r3, #31
    fd2a:	d521      	bpl.n	fd70 <bt_smp_encrypt_change+0xf4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    fd2c:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd2e:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fd32:	f015 ffcf 	bl	25cd4 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    fd36:	2102      	movs	r1, #2
    fd38:	4628      	mov	r0, r5
    fd3a:	f015 ffcb 	bl	25cd4 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    fd3e:	6826      	ldr	r6, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    fd40:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
	if (!keys) {
    fd44:	b9e7      	cbnz	r7, fd80 <bt_smp_encrypt_change+0x104>
    fd46:	4a93      	ldr	r2, [pc, #588]	; (ff94 <bt_smp_encrypt_change+0x318>)
    fd48:	4c93      	ldr	r4, [pc, #588]	; (ff98 <bt_smp_encrypt_change+0x31c>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    fd4a:	f106 0088 	add.w	r0, r6, #136	; 0x88
    fd4e:	1aa4      	subs	r4, r4, r2
    fd50:	f7f8 f96a 	bl	8028 <bt_addr_le_str_real>
    fd54:	f7f5 fbd4 	bl	5500 <log_strdup>
    fd58:	08e4      	lsrs	r4, r4, #3
    fd5a:	01a4      	lsls	r4, r4, #6
    fd5c:	f044 0401 	orr.w	r4, r4, #1
    fd60:	4601      	mov	r1, r0
    fd62:	488e      	ldr	r0, [pc, #568]	; (ff9c <bt_smp_encrypt_change+0x320>)
    fd64:	4622      	mov	r2, r4
}
    fd66:	b009      	add	sp, #36	; 0x24
    fd68:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    fd6c:	f012 bacb 	b.w	22306 <log_1>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fd70:	079e      	lsls	r6, r3, #30
    fd72:	d501      	bpl.n	fd78 <bt_smp_encrypt_change+0xfc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fd74:	2108      	movs	r1, #8
    fd76:	e7da      	b.n	fd2e <bt_smp_encrypt_change+0xb2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fd78:	0758      	lsls	r0, r3, #29
    fd7a:	d5dc      	bpl.n	fd36 <bt_smp_encrypt_change+0xba>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd7c:	210a      	movs	r1, #10
    fd7e:	e7d6      	b.n	fd2e <bt_smp_encrypt_change+0xb2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fd80:	2105      	movs	r1, #5
    fd82:	f015 ffbe 	bl	25d02 <atomic_test_bit>
    fd86:	b9b0      	cbnz	r0, fdb6 <bt_smp_encrypt_change+0x13a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    fd88:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    fd8c:	07d9      	lsls	r1, r3, #31
    fd8e:	d512      	bpl.n	fdb6 <bt_smp_encrypt_change+0x13a>
	struct bt_keys *keys = conn->le.keys;
    fd90:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    fd92:	211a      	movs	r1, #26
    fd94:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    fd96:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    fd9a:	f003 fb09 	bl	133b0 <bt_rand>
    fd9e:	4682      	mov	sl, r0
    fda0:	b310      	cbz	r0, fde8 <bt_smp_encrypt_change+0x16c>
    fda2:	497d      	ldr	r1, [pc, #500]	; (ff98 <bt_smp_encrypt_change+0x31c>)
    fda4:	4b7b      	ldr	r3, [pc, #492]	; (ff94 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to get random bytes");
    fda6:	487e      	ldr	r0, [pc, #504]	; (ffa0 <bt_smp_encrypt_change+0x324>)
    fda8:	1ac9      	subs	r1, r1, r3
    fdaa:	08c9      	lsrs	r1, r1, #3
    fdac:	0189      	lsls	r1, r1, #6
    fdae:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    fdb2:	f012 fa9b 	bl	222ec <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    fdb6:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    fdba:	079a      	lsls	r2, r3, #30
    fdbc:	f140 80ad 	bpl.w	ff1a <bt_smp_encrypt_change+0x29e>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    fdc0:	2108      	movs	r1, #8
    fdc2:	4620      	mov	r0, r4
    fdc4:	f015 ffa6 	bl	25d14 <smp_create_pdu.constprop.0>
		if (!buf) {
    fdc8:	4680      	mov	r8, r0
    fdca:	2800      	cmp	r0, #0
    fdcc:	d174      	bne.n	feb8 <bt_smp_encrypt_change+0x23c>
    fdce:	4972      	ldr	r1, [pc, #456]	; (ff98 <bt_smp_encrypt_change+0x31c>)
    fdd0:	4b70      	ldr	r3, [pc, #448]	; (ff94 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Ident Info buffer");
    fdd2:	4874      	ldr	r0, [pc, #464]	; (ffa4 <bt_smp_encrypt_change+0x328>)
    fdd4:	1ac9      	subs	r1, r1, r3
    fdd6:	08c9      	lsrs	r1, r1, #3
    fdd8:	0189      	lsls	r1, r1, #6
    fdda:	f041 0101 	orr.w	r1, r1, #1
}
    fdde:	b009      	add	sp, #36	; 0x24
    fde0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    fde4:	f012 ba82 	b.w	222ec <log_0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    fde8:	2106      	movs	r1, #6
    fdea:	4620      	mov	r0, r4
    fdec:	f015 ff92 	bl	25d14 <smp_create_pdu.constprop.0>
		if (!buf) {
    fdf0:	4681      	mov	r9, r0
    fdf2:	b940      	cbnz	r0, fe06 <bt_smp_encrypt_change+0x18a>
    fdf4:	4968      	ldr	r1, [pc, #416]	; (ff98 <bt_smp_encrypt_change+0x31c>)
    fdf6:	4b67      	ldr	r3, [pc, #412]	; (ff94 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    fdf8:	486b      	ldr	r0, [pc, #428]	; (ffa8 <bt_smp_encrypt_change+0x32c>)
    fdfa:	1ac9      	subs	r1, r1, r3
    fdfc:	08c9      	lsrs	r1, r1, #3
    fdfe:	0189      	lsls	r1, r1, #6
    fe00:	f041 0101 	orr.w	r1, r1, #1
    fe04:	e7d5      	b.n	fdb2 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
    fe06:	2110      	movs	r1, #16
    fe08:	3008      	adds	r0, #8
    fe0a:	f016 facf 	bl	263ac <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    fe0e:	f898 200c 	ldrb.w	r2, [r8, #12]
    fe12:	a901      	add	r1, sp, #4
    fe14:	4683      	mov	fp, r0
    fe16:	f014 fa75 	bl	24304 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    fe1a:	f898 000c 	ldrb.w	r0, [r8, #12]
    fe1e:	280f      	cmp	r0, #15
    fe20:	d805      	bhi.n	fe2e <bt_smp_encrypt_change+0x1b2>
			(void)memset(info->ltk + keys->enc_size, 0,
    fe22:	f1c0 0210 	rsb	r2, r0, #16
    fe26:	4651      	mov	r1, sl
    fe28:	4458      	add	r0, fp
    fe2a:	f014 fa96 	bl	2435a <memset>
		smp_send(smp, buf, NULL, NULL);
    fe2e:	4649      	mov	r1, r9
    fe30:	2200      	movs	r2, #0
    fe32:	4620      	mov	r0, r4
    fe34:	f7fe fc26 	bl	e684 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    fe38:	2107      	movs	r1, #7
    fe3a:	4620      	mov	r0, r4
    fe3c:	f015 ff6a 	bl	25d14 <smp_create_pdu.constprop.0>
		if (!buf) {
    fe40:	4681      	mov	r9, r0
    fe42:	b940      	cbnz	r0, fe56 <bt_smp_encrypt_change+0x1da>
    fe44:	4954      	ldr	r1, [pc, #336]	; (ff98 <bt_smp_encrypt_change+0x31c>)
    fe46:	4b53      	ldr	r3, [pc, #332]	; (ff94 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Master Ident buffer");
    fe48:	4858      	ldr	r0, [pc, #352]	; (ffac <bt_smp_encrypt_change+0x330>)
    fe4a:	1ac9      	subs	r1, r1, r3
    fe4c:	08c9      	lsrs	r1, r1, #3
    fe4e:	0189      	lsls	r1, r1, #6
    fe50:	f041 0101 	orr.w	r1, r1, #1
    fe54:	e7ad      	b.n	fdb2 <bt_smp_encrypt_change+0x136>
    fe56:	210a      	movs	r1, #10
    fe58:	3008      	adds	r0, #8
    fe5a:	f016 faa7 	bl	263ac <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    fe5e:	2208      	movs	r2, #8
    fe60:	4682      	mov	sl, r0
    fe62:	a905      	add	r1, sp, #20
    fe64:	3002      	adds	r0, #2
    fe66:	f014 fa4d 	bl	24304 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    fe6a:	2202      	movs	r2, #2
    fe6c:	a907      	add	r1, sp, #28
    fe6e:	4650      	mov	r0, sl
    fe70:	f014 fa48 	bl	24304 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    fe74:	4649      	mov	r1, r9
    fe76:	4620      	mov	r0, r4
    fe78:	4a4d      	ldr	r2, [pc, #308]	; (ffb0 <bt_smp_encrypt_change+0x334>)
    fe7a:	f7fe fc03 	bl	e684 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fe7e:	210d      	movs	r1, #13
    fe80:	4628      	mov	r0, r5
    fe82:	f015 ff3e 	bl	25d02 <atomic_test_bit>
    fe86:	2800      	cmp	r0, #0
    fe88:	d095      	beq.n	fdb6 <bt_smp_encrypt_change+0x13a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    fe8a:	4640      	mov	r0, r8
    fe8c:	2101      	movs	r1, #1
    fe8e:	f016 fa32 	bl	262f6 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    fe92:	a901      	add	r1, sp, #4
    fe94:	2210      	movs	r2, #16
    fe96:	f108 0072 	add.w	r0, r8, #114	; 0x72
    fe9a:	f014 fa33 	bl	24304 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
    fe9e:	a905      	add	r1, sp, #20
    fea0:	2208      	movs	r2, #8
    fea2:	f108 0068 	add.w	r0, r8, #104	; 0x68
    fea6:	f014 fa2d 	bl	24304 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
    feaa:	2202      	movs	r2, #2
    feac:	a907      	add	r1, sp, #28
    feae:	f108 0070 	add.w	r0, r8, #112	; 0x70
    feb2:	f014 fa27 	bl	24304 <memcpy>
    feb6:	e77e      	b.n	fdb6 <bt_smp_encrypt_change+0x13a>
    feb8:	2110      	movs	r1, #16
    feba:	3008      	adds	r0, #8
    febc:	f016 fa76 	bl	263ac <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
    fec0:	7a31      	ldrb	r1, [r6, #8]
    fec2:	f8df 90f0 	ldr.w	r9, [pc, #240]	; ffb4 <bt_smp_encrypt_change+0x338>
    fec6:	3112      	adds	r1, #18
    fec8:	2210      	movs	r2, #16
    feca:	eb09 1101 	add.w	r1, r9, r1, lsl #4
    fece:	f014 fa19 	bl	24304 <memcpy>
		smp_send(smp, buf, NULL, NULL);
    fed2:	4641      	mov	r1, r8
    fed4:	2200      	movs	r2, #0
    fed6:	4620      	mov	r0, r4
    fed8:	f7fe fbd4 	bl	e684 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
    fedc:	2109      	movs	r1, #9
    fede:	4620      	mov	r0, r4
    fee0:	f015 ff18 	bl	25d14 <smp_create_pdu.constprop.0>
		if (!buf) {
    fee4:	4680      	mov	r8, r0
    fee6:	b940      	cbnz	r0, fefa <bt_smp_encrypt_change+0x27e>
    fee8:	492b      	ldr	r1, [pc, #172]	; (ff98 <bt_smp_encrypt_change+0x31c>)
    feea:	4b2a      	ldr	r3, [pc, #168]	; (ff94 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    feec:	4832      	ldr	r0, [pc, #200]	; (ffb8 <bt_smp_encrypt_change+0x33c>)
    feee:	1ac9      	subs	r1, r1, r3
    fef0:	08c9      	lsrs	r1, r1, #3
    fef2:	0189      	lsls	r1, r1, #6
    fef4:	f041 0101 	orr.w	r1, r1, #1
    fef8:	e771      	b.n	fdde <bt_smp_encrypt_change+0x162>
    fefa:	2107      	movs	r1, #7
    fefc:	3008      	adds	r0, #8
    fefe:	f016 fa55 	bl	263ac <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
    ff02:	7a31      	ldrb	r1, [r6, #8]
    ff04:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
    ff08:	2207      	movs	r2, #7
    ff0a:	4449      	add	r1, r9
    ff0c:	f014 f9fa 	bl	24304 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
    ff10:	4a2a      	ldr	r2, [pc, #168]	; (ffbc <bt_smp_encrypt_change+0x340>)
    ff12:	4641      	mov	r1, r8
    ff14:	4620      	mov	r0, r4
    ff16:	f7fe fbb5 	bl	e684 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    ff1a:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    ff1e:	075b      	lsls	r3, r3, #29
    ff20:	d52e      	bpl.n	ff80 <bt_smp_encrypt_change+0x304>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
    ff22:	210a      	movs	r1, #10
    ff24:	4620      	mov	r0, r4
    ff26:	f015 fef5 	bl	25d14 <smp_create_pdu.constprop.0>
		if (!buf) {
    ff2a:	4606      	mov	r6, r0
    ff2c:	b940      	cbnz	r0, ff40 <bt_smp_encrypt_change+0x2c4>
    ff2e:	491a      	ldr	r1, [pc, #104]	; (ff98 <bt_smp_encrypt_change+0x31c>)
    ff30:	4b18      	ldr	r3, [pc, #96]	; (ff94 <bt_smp_encrypt_change+0x318>)
			BT_ERR("Unable to allocate Signing Info buffer");
    ff32:	4823      	ldr	r0, [pc, #140]	; (ffc0 <bt_smp_encrypt_change+0x344>)
    ff34:	1ac9      	subs	r1, r1, r3
    ff36:	08c9      	lsrs	r1, r1, #3
    ff38:	0189      	lsls	r1, r1, #6
    ff3a:	f041 0101 	orr.w	r1, r1, #1
    ff3e:	e74e      	b.n	fdde <bt_smp_encrypt_change+0x162>
    ff40:	2110      	movs	r1, #16
    ff42:	3008      	adds	r0, #8
    ff44:	f016 fa32 	bl	263ac <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
    ff48:	2110      	movs	r1, #16
    ff4a:	4681      	mov	r9, r0
    ff4c:	f003 fa30 	bl	133b0 <bt_rand>
    ff50:	4680      	mov	r8, r0
    ff52:	b9d0      	cbnz	r0, ff8a <bt_smp_encrypt_change+0x30e>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ff54:	210d      	movs	r1, #13
    ff56:	4628      	mov	r0, r5
    ff58:	f015 fed3 	bl	25d02 <atomic_test_bit>
    ff5c:	b158      	cbz	r0, ff76 <bt_smp_encrypt_change+0x2fa>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    ff5e:	2108      	movs	r1, #8
    ff60:	4638      	mov	r0, r7
    ff62:	f016 f9c8 	bl	262f6 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ff66:	2210      	movs	r2, #16
    ff68:	4649      	mov	r1, r9
    ff6a:	f107 0040 	add.w	r0, r7, #64	; 0x40
    ff6e:	f014 f9c9 	bl	24304 <memcpy>
			keys->local_csrk.cnt = 0U;
    ff72:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
    ff76:	4a13      	ldr	r2, [pc, #76]	; (ffc4 <bt_smp_encrypt_change+0x348>)
    ff78:	4631      	mov	r1, r6
    ff7a:	4620      	mov	r0, r4
    ff7c:	f7fe fb82 	bl	e684 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
    ff80:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
    ff84:	2900      	cmp	r1, #0
    ff86:	f43f ae9f 	beq.w	fcc8 <bt_smp_encrypt_change+0x4c>
}
    ff8a:	b009      	add	sp, #36	; 0x24
    ff8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ff90:	0002d445 	.word	0x0002d445
    ff94:	0002775c 	.word	0x0002775c
    ff98:	00027844 	.word	0x00027844
    ff9c:	0002d330 	.word	0x0002d330
    ffa0:	0002d345 	.word	0x0002d345
    ffa4:	0002d3ae 	.word	0x0002d3ae
    ffa8:	0002d360 	.word	0x0002d360
    ffac:	0002d387 	.word	0x0002d387
    ffb0:	00026269 	.word	0x00026269
    ffb4:	20000000 	.word	0x20000000
    ffb8:	0002d3d3 	.word	0x0002d3d3
    ffbc:	00026263 	.word	0x00026263
    ffc0:	0002d3fd 	.word	0x0002d3fd
    ffc4:	0002625d 	.word	0x0002625d

0000ffc8 <smp_timeout>:
    ffc8:	4b0b      	ldr	r3, [pc, #44]	; (fff8 <smp_timeout+0x30>)
    ffca:	490c      	ldr	r1, [pc, #48]	; (fffc <smp_timeout+0x34>)
{
    ffcc:	b510      	push	{r4, lr}
    ffce:	1ac9      	subs	r1, r1, r3
    ffd0:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
    ffd2:	0189      	lsls	r1, r1, #6
{
    ffd4:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
    ffd6:	f041 0101 	orr.w	r1, r1, #1
    ffda:	4809      	ldr	r0, [pc, #36]	; (10000 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1>)
    ffdc:	f012 f986 	bl	222ec <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    ffe0:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
    ffe4:	2108      	movs	r1, #8
    ffe6:	f7ff fbc5 	bl	f774 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    ffea:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
    ffee:	2104      	movs	r1, #4
}
    fff0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
    fff4:	f015 be6e 	b.w	25cd4 <atomic_set_bit>
    fff8:	0002775c 	.word	0x0002775c
    fffc:	00027844 	.word	0x00027844
   10000:	0002d424 	.word	0x0002d424

00010004 <bt_smp_update_keys>:
{
   10004:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   10006:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   10008:	f7fe fae4 	bl	e5d4 <smp_chan_get>
	if (!smp) {
   1000c:	4605      	mov	r5, r0
   1000e:	2800      	cmp	r0, #0
   10010:	f000 8081 	beq.w	10116 <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10014:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
   10018:	2103      	movs	r1, #3
   1001a:	4630      	mov	r0, r6
   1001c:	f015 fe71 	bl	25d02 <atomic_test_bit>
   10020:	2800      	cmp	r0, #0
   10022:	d078      	beq.n	10116 <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
   10024:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10028:	b108      	cbz	r0, 1002e <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
   1002a:	f000 f965 	bl	102f8 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   1002e:	f104 0788 	add.w	r7, r4, #136	; 0x88
   10032:	7a20      	ldrb	r0, [r4, #8]
   10034:	4639      	mov	r1, r7
   10036:	f000 f88b 	bl	10150 <bt_keys_get_addr>
   1003a:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   1003e:	b9b0      	cbnz	r0, 1006e <bt_smp_update_keys+0x6a>
   10040:	4a35      	ldr	r2, [pc, #212]	; (10118 <bt_smp_update_keys+0x114>)
   10042:	4c36      	ldr	r4, [pc, #216]	; (1011c <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
   10044:	4638      	mov	r0, r7
   10046:	1aa4      	subs	r4, r4, r2
   10048:	f7f7 ffee 	bl	8028 <bt_addr_le_str_real>
   1004c:	f7f5 fa58 	bl	5500 <log_strdup>
   10050:	08e4      	lsrs	r4, r4, #3
   10052:	01a4      	lsls	r4, r4, #6
   10054:	f044 0401 	orr.w	r4, r4, #1
   10058:	4601      	mov	r1, r0
   1005a:	4622      	mov	r2, r4
   1005c:	4830      	ldr	r0, [pc, #192]	; (10120 <bt_smp_update_keys+0x11c>)
   1005e:	f012 f952 	bl	22306 <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   10062:	4628      	mov	r0, r5
   10064:	2108      	movs	r1, #8
}
   10066:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   1006a:	f016 b86b 	b.w	26144 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   1006e:	210e      	movs	r1, #14
   10070:	4630      	mov	r0, r6
   10072:	f015 fe46 	bl	25d02 <atomic_test_bit>
   10076:	b128      	cbz	r0, 10084 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10078:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   1007c:	7b53      	ldrb	r3, [r2, #13]
   1007e:	f043 0302 	orr.w	r3, r3, #2
   10082:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   10084:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   10088:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   1008c:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   1008e:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   10090:	d838      	bhi.n	10104 <bt_smp_update_keys+0x100>
   10092:	b3d2      	cbz	r2, 1010a <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   10094:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   10098:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   1009a:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   1009e:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
   100a2:	4293      	cmp	r3, r2
   100a4:	bf28      	it	cs
   100a6:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   100a8:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   100aa:	4630      	mov	r0, r6
   100ac:	2105      	movs	r1, #5
   100ae:	f015 fe28 	bl	25d02 <atomic_test_bit>
   100b2:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   100b6:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   100b8:	b350      	cbz	r0, 10110 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
   100ba:	f042 0210 	orr.w	r2, r2, #16
   100be:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   100c0:	210d      	movs	r1, #13
   100c2:	4630      	mov	r0, r6
   100c4:	f015 fe1d 	bl	25d02 <atomic_test_bit>
   100c8:	b328      	cbz	r0, 10116 <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   100ca:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   100ce:	2120      	movs	r1, #32
   100d0:	f016 f911 	bl	262f6 <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   100d4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   100d8:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   100dc:	2210      	movs	r2, #16
   100de:	301a      	adds	r0, #26
   100e0:	f014 f910 	bl	24304 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   100e4:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   100e8:	2208      	movs	r2, #8
   100ea:	2100      	movs	r1, #0
   100ec:	3010      	adds	r0, #16
   100ee:	f014 f934 	bl	2435a <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   100f2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   100f6:	2202      	movs	r2, #2
}
   100f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   100fc:	2100      	movs	r1, #0
   100fe:	3018      	adds	r0, #24
   10100:	f014 b92b 	b.w	2435a <memset>
	switch (smp->method) {
   10104:	3a05      	subs	r2, #5
   10106:	2a01      	cmp	r2, #1
   10108:	d9c4      	bls.n	10094 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1010a:	f023 0301 	bic.w	r3, r3, #1
   1010e:	e7c3      	b.n	10098 <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   10110:	f022 0210 	bic.w	r2, r2, #16
   10114:	735a      	strb	r2, [r3, #13]
}
   10116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   10118:	0002775c 	.word	0x0002775c
   1011c:	00027844 	.word	0x00027844
   10120:	0002d09a 	.word	0x0002d09a

00010124 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   10124:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   10126:	4b07      	ldr	r3, [pc, #28]	; (10144 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   10128:	4807      	ldr	r0, [pc, #28]	; (10148 <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1012a:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   1012e:	f003 0306 	and.w	r3, r3, #6
   10132:	1f9a      	subs	r2, r3, #6
   10134:	4253      	negs	r3, r2
   10136:	4153      	adcs	r3, r2
   10138:	4a04      	ldr	r2, [pc, #16]	; (1014c <bt_smp_init+0x28>)
   1013a:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   1013c:	f7fa fed0 	bl	aee0 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   10140:	2000      	movs	r0, #0
   10142:	bd08      	pop	{r3, pc}
   10144:	20000000 	.word	0x20000000
   10148:	2000038c 	.word	0x2000038c
   1014c:	2000f30d 	.word	0x2000f30d

00010150 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   10150:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10152:	4c1f      	ldr	r4, [pc, #124]	; (101d0 <bt_keys_get_addr+0x80>)
   10154:	7823      	ldrb	r3, [r4, #0]
   10156:	4283      	cmp	r3, r0
{
   10158:	b085      	sub	sp, #20
   1015a:	4606      	mov	r6, r0
   1015c:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   1015e:	d02b      	beq.n	101b8 <bt_keys_get_addr+0x68>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   10160:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
   10162:	481c      	ldr	r0, [pc, #112]	; (101d4 <bt_keys_get_addr+0x84>)
   10164:	9502      	str	r5, [sp, #8]
   10166:	2207      	movs	r2, #7
   10168:	a902      	add	r1, sp, #8
   1016a:	f8cd 500b 	str.w	r5, [sp, #11]
   1016e:	f014 f8b8 	bl	242e2 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   10172:	b188      	cbz	r0, 10198 <bt_keys_get_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   10174:	2207      	movs	r2, #7
   10176:	4917      	ldr	r1, [pc, #92]	; (101d4 <bt_keys_get_addr+0x84>)
   10178:	4668      	mov	r0, sp
   1017a:	f014 f8c3 	bl	24304 <memcpy>
			}
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
   1017e:	4669      	mov	r1, sp
   10180:	7820      	ldrb	r0, [r4, #0]
   10182:	f7f9 fdb7 	bl	9cf4 <bt_unpair>
	return memcmp(a, b, sizeof(*a));
   10186:	4813      	ldr	r0, [pc, #76]	; (101d4 <bt_keys_get_addr+0x84>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   10188:	9502      	str	r5, [sp, #8]
   1018a:	2207      	movs	r2, #7
   1018c:	a902      	add	r1, sp, #8
   1018e:	f8cd 500b 	str.w	r5, [sp, #11]
   10192:	f014 f8a6 	bl	242e2 <memcmp>
   10196:	b9b8      	cbnz	r0, 101c8 <bt_keys_get_addr+0x78>
	memcpy(dst, src, sizeof(*dst));
   10198:	2207      	movs	r2, #7
   1019a:	480e      	ldr	r0, [pc, #56]	; (101d4 <bt_keys_get_addr+0x84>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
   1019c:	7026      	strb	r6, [r4, #0]
   1019e:	4639      	mov	r1, r7
   101a0:	f014 f8b0 	bl	24304 <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
   101a4:	4a0c      	ldr	r2, [pc, #48]	; (101d8 <bt_keys_get_addr+0x88>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
   101a6:	480a      	ldr	r0, [pc, #40]	; (101d0 <bt_keys_get_addr+0x80>)
		keys->aging_counter = ++aging_counter_val;
   101a8:	6813      	ldr	r3, [r2, #0]
   101aa:	3301      	adds	r3, #1
   101ac:	6013      	str	r3, [r2, #0]
   101ae:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   101b2:	4b0a      	ldr	r3, [pc, #40]	; (101dc <bt_keys_get_addr+0x8c>)
   101b4:	601c      	str	r4, [r3, #0]
		return keys;
   101b6:	e008      	b.n	101ca <bt_keys_get_addr+0x7a>
	return memcmp(a, b, sizeof(*a));
   101b8:	2207      	movs	r2, #7
   101ba:	1c60      	adds	r0, r4, #1
   101bc:	f014 f891 	bl	242e2 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   101c0:	2800      	cmp	r0, #0
   101c2:	d1cd      	bne.n	10160 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   101c4:	4620      	mov	r0, r4
   101c6:	e000      	b.n	101ca <bt_keys_get_addr+0x7a>
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   101c8:	4628      	mov	r0, r5
}
   101ca:	b005      	add	sp, #20
   101cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
   101ce:	bf00      	nop
   101d0:	2000d7d8 	.word	0x2000d7d8
   101d4:	2000d7d9 	.word	0x2000d7d9
   101d8:	2000d7d4 	.word	0x2000d7d4
   101dc:	2000d860 	.word	0x2000d860

000101e0 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   101e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
   101e2:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   101e4:	4908      	ldr	r1, [pc, #32]	; (10208 <bt_foreach_bond+0x28>)
   101e6:	89cb      	ldrh	r3, [r1, #14]
{
   101e8:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
   101ea:	b153      	cbz	r3, 10202 <bt_foreach_bond+0x22>
   101ec:	780b      	ldrb	r3, [r1, #0]
   101ee:	4283      	cmp	r3, r0
   101f0:	d107      	bne.n	10202 <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
   101f2:	3101      	adds	r1, #1
   101f4:	2207      	movs	r2, #7
   101f6:	4668      	mov	r0, sp
   101f8:	f014 f884 	bl	24304 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   101fc:	4629      	mov	r1, r5
   101fe:	4668      	mov	r0, sp
   10200:	47a0      	blx	r4
		}
	}
}
   10202:	b003      	add	sp, #12
   10204:	bd30      	pop	{r4, r5, pc}
   10206:	bf00      	nop
   10208:	2000d7d8 	.word	0x2000d7d8

0001020c <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   1020c:	460b      	mov	r3, r1
   1020e:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   10210:	4a04      	ldr	r2, [pc, #16]	; (10224 <bt_keys_foreach+0x18>)
{
   10212:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   10214:	89d4      	ldrh	r4, [r2, #14]
   10216:	4204      	tst	r4, r0
   10218:	d002      	beq.n	10220 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1021a:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   1021c:	4610      	mov	r0, r2
   1021e:	4718      	bx	r3
}
   10220:	bc10      	pop	{r4}
   10222:	4770      	bx	lr
   10224:	2000d7d8 	.word	0x2000d7d8

00010228 <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   10228:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1022a:	4903      	ldr	r1, [pc, #12]	; (10238 <keys_commit+0x10>)
   1022c:	2200      	movs	r2, #0
   1022e:	2002      	movs	r0, #2
   10230:	f7ff ffec 	bl	1020c <bt_keys_foreach>
	}

	return 0;
}
   10234:	2000      	movs	r0, #0
   10236:	bd08      	pop	{r3, pc}
   10238:	000262d3 	.word	0x000262d3

0001023c <bt_keys_find>:
{
   1023c:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   1023e:	4c09      	ldr	r4, [pc, #36]	; (10264 <bt_keys_find+0x28>)
{
   10240:	460b      	mov	r3, r1
   10242:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   10244:	89e2      	ldrh	r2, [r4, #14]
   10246:	4202      	tst	r2, r0
   10248:	d007      	beq.n	1025a <bt_keys_find+0x1e>
   1024a:	7822      	ldrb	r2, [r4, #0]
   1024c:	429a      	cmp	r2, r3
   1024e:	d104      	bne.n	1025a <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   10250:	2207      	movs	r2, #7
   10252:	1c60      	adds	r0, r4, #1
   10254:	f014 f845 	bl	242e2 <memcmp>
   10258:	b108      	cbz	r0, 1025e <bt_keys_find+0x22>
	return NULL;
   1025a:	2000      	movs	r0, #0
}
   1025c:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   1025e:	4620      	mov	r0, r4
   10260:	e7fc      	b.n	1025c <bt_keys_find+0x20>
   10262:	bf00      	nop
   10264:	2000d7d8 	.word	0x2000d7d8

00010268 <bt_keys_find_irk>:
{
   10268:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   1026a:	780b      	ldrb	r3, [r1, #0]
   1026c:	2b01      	cmp	r3, #1
   1026e:	4606      	mov	r6, r0
   10270:	460d      	mov	r5, r1
   10272:	d001      	beq.n	10278 <bt_keys_find_irk+0x10>
		return NULL;
   10274:	2000      	movs	r0, #0
}
   10276:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   10278:	798b      	ldrb	r3, [r1, #6]
   1027a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1027e:	2b40      	cmp	r3, #64	; 0x40
   10280:	d1f8      	bne.n	10274 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10282:	4c12      	ldr	r4, [pc, #72]	; (102cc <bt_keys_find_irk+0x64>)
   10284:	89e3      	ldrh	r3, [r4, #14]
   10286:	079b      	lsls	r3, r3, #30
   10288:	d5f4      	bpl.n	10274 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   1028a:	7823      	ldrb	r3, [r4, #0]
   1028c:	42b3      	cmp	r3, r6
   1028e:	d10b      	bne.n	102a8 <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   10290:	2206      	movs	r2, #6
   10292:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   10296:	1c68      	adds	r0, r5, #1
   10298:	f014 f823 	bl	242e2 <memcmp>
   1029c:	b908      	cbnz	r0, 102a2 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   1029e:	4620      	mov	r0, r4
   102a0:	e7e9      	b.n	10276 <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   102a2:	89e3      	ldrh	r3, [r4, #14]
   102a4:	079a      	lsls	r2, r3, #30
   102a6:	d5e5      	bpl.n	10274 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   102a8:	7823      	ldrb	r3, [r4, #0]
   102aa:	42b3      	cmp	r3, r6
   102ac:	d1e2      	bne.n	10274 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   102ae:	3501      	adds	r5, #1
   102b0:	4807      	ldr	r0, [pc, #28]	; (102d0 <bt_keys_find_irk+0x68>)
   102b2:	4629      	mov	r1, r5
   102b4:	f014 f8c3 	bl	2443e <bt_rpa_irk_matches>
   102b8:	2800      	cmp	r0, #0
   102ba:	d0db      	beq.n	10274 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   102bc:	4805      	ldr	r0, [pc, #20]	; (102d4 <bt_keys_find_irk+0x6c>)
   102be:	2206      	movs	r2, #6
   102c0:	4629      	mov	r1, r5
   102c2:	f014 f81f 	bl	24304 <memcpy>
			return &key_pool[i];
   102c6:	4801      	ldr	r0, [pc, #4]	; (102cc <bt_keys_find_irk+0x64>)
}
   102c8:	e7d5      	b.n	10276 <bt_keys_find_irk+0xe>
   102ca:	bf00      	nop
   102cc:	2000d7d8 	.word	0x2000d7d8
   102d0:	2000d802 	.word	0x2000d802
   102d4:	2000d812 	.word	0x2000d812

000102d8 <bt_keys_find_addr>:
{
   102d8:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   102da:	4c06      	ldr	r4, [pc, #24]	; (102f4 <bt_keys_find_addr+0x1c>)
   102dc:	7823      	ldrb	r3, [r4, #0]
   102de:	4283      	cmp	r3, r0
   102e0:	d104      	bne.n	102ec <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   102e2:	2207      	movs	r2, #7
   102e4:	1c60      	adds	r0, r4, #1
   102e6:	f013 fffc 	bl	242e2 <memcmp>
   102ea:	b108      	cbz	r0, 102f0 <bt_keys_find_addr+0x18>
	return NULL;
   102ec:	2000      	movs	r0, #0
}
   102ee:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   102f0:	4620      	mov	r0, r4
   102f2:	e7fc      	b.n	102ee <bt_keys_find_addr+0x16>
   102f4:	2000d7d8 	.word	0x2000d7d8

000102f8 <bt_keys_clear>:
{
   102f8:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   102fa:	7a03      	ldrb	r3, [r0, #8]
   102fc:	075b      	lsls	r3, r3, #29
{
   102fe:	b08c      	sub	sp, #48	; 0x30
   10300:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   10302:	d501      	bpl.n	10308 <bt_keys_clear+0x10>
		bt_id_del(keys);
   10304:	f7f9 fe9c 	bl	a040 <bt_id_del>
		if (keys->id) {
   10308:	4625      	mov	r5, r4
   1030a:	f815 2b01 	ldrb.w	r2, [r5], #1
   1030e:	b1b2      	cbz	r2, 1033e <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   10310:	ae02      	add	r6, sp, #8
   10312:	2104      	movs	r1, #4
   10314:	4630      	mov	r0, r6
   10316:	f011 faa0 	bl	2185a <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1031a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   1031c:	4a09      	ldr	r2, [pc, #36]	; (10344 <bt_keys_clear+0x4c>)
   1031e:	462b      	mov	r3, r5
   10320:	2124      	movs	r1, #36	; 0x24
   10322:	a803      	add	r0, sp, #12
   10324:	f7f8 f92e 	bl	8584 <bt_settings_encode_key>
		settings_delete(key);
   10328:	a803      	add	r0, sp, #12
   1032a:	f012 fc6d 	bl	22c08 <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   1032e:	2288      	movs	r2, #136	; 0x88
   10330:	2100      	movs	r1, #0
   10332:	4620      	mov	r0, r4
}
   10334:	b00c      	add	sp, #48	; 0x30
   10336:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1033a:	f014 b80e 	b.w	2435a <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1033e:	9200      	str	r2, [sp, #0]
   10340:	e7ec      	b.n	1031c <bt_keys_clear+0x24>
   10342:	bf00      	nop
   10344:	0002d598 	.word	0x0002d598

00010348 <keys_set>:
{
   10348:	b5f0      	push	{r4, r5, r6, r7, lr}
   1034a:	4614      	mov	r4, r2
   1034c:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
   1034e:	4606      	mov	r6, r0
   10350:	b970      	cbnz	r0, 10370 <keys_set+0x28>
   10352:	4952      	ldr	r1, [pc, #328]	; (1049c <keys_set+0x154>)
   10354:	4b52      	ldr	r3, [pc, #328]	; (104a0 <keys_set+0x158>)
		BT_ERR("Insufficient number of arguments");
   10356:	4853      	ldr	r0, [pc, #332]	; (104a4 <keys_set+0x15c>)
   10358:	1ac9      	subs	r1, r1, r3
   1035a:	08c9      	lsrs	r1, r1, #3
   1035c:	0189      	lsls	r1, r1, #6
   1035e:	f041 0101 	orr.w	r1, r1, #1
   10362:	f011 ffc3 	bl	222ec <log_0>
		return -EINVAL;
   10366:	f06f 0415 	mvn.w	r4, #21
}
   1036a:	4620      	mov	r0, r4
   1036c:	b023      	add	sp, #140	; 0x8c
   1036e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   10370:	227c      	movs	r2, #124	; 0x7c
   10372:	a903      	add	r1, sp, #12
   10374:	4618      	mov	r0, r3
   10376:	47a0      	blx	r4
	if (len < 0) {
   10378:	1e05      	subs	r5, r0, #0
   1037a:	da0b      	bge.n	10394 <keys_set+0x4c>
   1037c:	4a47      	ldr	r2, [pc, #284]	; (1049c <keys_set+0x154>)
   1037e:	4b48      	ldr	r3, [pc, #288]	; (104a0 <keys_set+0x158>)
		BT_ERR("Failed to read value (err %zd)", len);
   10380:	4849      	ldr	r0, [pc, #292]	; (104a8 <keys_set+0x160>)
   10382:	1ad2      	subs	r2, r2, r3
   10384:	08d2      	lsrs	r2, r2, #3
   10386:	0192      	lsls	r2, r2, #6
   10388:	f042 0201 	orr.w	r2, r2, #1
   1038c:	4629      	mov	r1, r5
   1038e:	f011 ffba 	bl	22306 <log_1>
   10392:	e7e8      	b.n	10366 <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   10394:	a901      	add	r1, sp, #4
   10396:	4630      	mov	r0, r6
   10398:	f014 f8b0 	bl	244fc <bt_settings_decode_key>
	if (err) {
   1039c:	4604      	mov	r4, r0
   1039e:	b148      	cbz	r0, 103b4 <keys_set+0x6c>
   103a0:	4a3e      	ldr	r2, [pc, #248]	; (1049c <keys_set+0x154>)
   103a2:	4b3f      	ldr	r3, [pc, #252]	; (104a0 <keys_set+0x158>)
		BT_ERR("Unable to decode address %s", name);
   103a4:	4841      	ldr	r0, [pc, #260]	; (104ac <keys_set+0x164>)
   103a6:	1ad2      	subs	r2, r2, r3
   103a8:	08d2      	lsrs	r2, r2, #3
   103aa:	0192      	lsls	r2, r2, #6
   103ac:	f042 0201 	orr.w	r2, r2, #1
   103b0:	4631      	mov	r1, r6
   103b2:	e7ec      	b.n	1038e <keys_set+0x46>
	settings_name_next(name, &next);
   103b4:	4669      	mov	r1, sp
   103b6:	4630      	mov	r0, r6
   103b8:	f012 fc4d 	bl	22c56 <settings_name_next>
	if (!next) {
   103bc:	9800      	ldr	r0, [sp, #0]
   103be:	b188      	cbz	r0, 103e4 <keys_set+0x9c>
		id = strtol(next, NULL, 10);
   103c0:	220a      	movs	r2, #10
   103c2:	4621      	mov	r1, r4
   103c4:	f013 fed0 	bl	24168 <strtol>
   103c8:	b2c0      	uxtb	r0, r0
	if (!len) {
   103ca:	b9fd      	cbnz	r5, 1040c <keys_set+0xc4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   103cc:	4601      	mov	r1, r0
   103ce:	aa01      	add	r2, sp, #4
   103d0:	203f      	movs	r0, #63	; 0x3f
   103d2:	f7ff ff33 	bl	1023c <bt_keys_find>
		if (keys) {
   103d6:	b138      	cbz	r0, 103e8 <keys_set+0xa0>
			(void)memset(keys, 0, sizeof(*keys));
   103d8:	2288      	movs	r2, #136	; 0x88
   103da:	4629      	mov	r1, r5
   103dc:	f013 ffbd 	bl	2435a <memset>
		return 0;
   103e0:	462c      	mov	r4, r5
   103e2:	e7c2      	b.n	1036a <keys_set+0x22>
		id = BT_ID_DEFAULT;
   103e4:	4620      	mov	r0, r4
   103e6:	e7f0      	b.n	103ca <keys_set+0x82>
   103e8:	4a2d      	ldr	r2, [pc, #180]	; (104a0 <keys_set+0x158>)
   103ea:	4c2c      	ldr	r4, [pc, #176]	; (1049c <keys_set+0x154>)
			BT_WARN("Unable to find deleted keys for %s",
   103ec:	a801      	add	r0, sp, #4
   103ee:	1aa4      	subs	r4, r4, r2
   103f0:	f7f7 fe1a 	bl	8028 <bt_addr_le_str_real>
   103f4:	f7f5 f884 	bl	5500 <log_strdup>
   103f8:	08e4      	lsrs	r4, r4, #3
   103fa:	01a4      	lsls	r4, r4, #6
   103fc:	f044 0402 	orr.w	r4, r4, #2
   10400:	4601      	mov	r1, r0
   10402:	4622      	mov	r2, r4
   10404:	482a      	ldr	r0, [pc, #168]	; (104b0 <keys_set+0x168>)
   10406:	f011 ff7e 	bl	22306 <log_1>
   1040a:	e7e9      	b.n	103e0 <keys_set+0x98>
	keys = bt_keys_get_addr(id, &addr);
   1040c:	a901      	add	r1, sp, #4
   1040e:	f7ff fe9f 	bl	10150 <bt_keys_get_addr>
	if (!keys) {
   10412:	4607      	mov	r7, r0
   10414:	b998      	cbnz	r0, 1043e <keys_set+0xf6>
   10416:	4a22      	ldr	r2, [pc, #136]	; (104a0 <keys_set+0x158>)
   10418:	4c20      	ldr	r4, [pc, #128]	; (1049c <keys_set+0x154>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1041a:	a801      	add	r0, sp, #4
   1041c:	1aa4      	subs	r4, r4, r2
   1041e:	f7f7 fe03 	bl	8028 <bt_addr_le_str_real>
   10422:	f7f5 f86d 	bl	5500 <log_strdup>
   10426:	08e4      	lsrs	r4, r4, #3
   10428:	01a4      	lsls	r4, r4, #6
   1042a:	f044 0401 	orr.w	r4, r4, #1
   1042e:	4601      	mov	r1, r0
   10430:	4622      	mov	r2, r4
   10432:	4820      	ldr	r0, [pc, #128]	; (104b4 <keys_set+0x16c>)
   10434:	f011 ff67 	bl	22306 <log_1>
		return -ENOMEM;
   10438:	f06f 040b 	mvn.w	r4, #11
   1043c:	e795      	b.n	1036a <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   1043e:	2d7c      	cmp	r5, #124	; 0x7c
   10440:	d013      	beq.n	1046a <keys_set+0x122>
   10442:	4b16      	ldr	r3, [pc, #88]	; (1049c <keys_set+0x154>)
   10444:	4a16      	ldr	r2, [pc, #88]	; (104a0 <keys_set+0x158>)
   10446:	1a9b      	subs	r3, r3, r2
   10448:	08db      	lsrs	r3, r3, #3
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   1044a:	2d78      	cmp	r5, #120	; 0x78
   1044c:	ea4f 1383 	mov.w	r3, r3, lsl #6
   10450:	d119      	bne.n	10486 <keys_set+0x13e>
				BT_WARN("Keys for %s have no aging counter",
   10452:	a801      	add	r0, sp, #4
   10454:	f043 0602 	orr.w	r6, r3, #2
   10458:	f7f7 fde6 	bl	8028 <bt_addr_le_str_real>
   1045c:	f7f5 f850 	bl	5500 <log_strdup>
   10460:	4632      	mov	r2, r6
   10462:	4601      	mov	r1, r0
   10464:	4814      	ldr	r0, [pc, #80]	; (104b8 <keys_set+0x170>)
   10466:	f011 ff4e 	bl	22306 <log_1>
		memcpy(keys->storage_start, val, len);
   1046a:	462a      	mov	r2, r5
   1046c:	a903      	add	r1, sp, #12
   1046e:	f107 000c 	add.w	r0, r7, #12
   10472:	f013 ff47 	bl	24304 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   10476:	4b11      	ldr	r3, [pc, #68]	; (104bc <keys_set+0x174>)
   10478:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   1047c:	6819      	ldr	r1, [r3, #0]
   1047e:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   10480:	bf88      	it	hi
   10482:	601a      	strhi	r2, [r3, #0]
   10484:	e771      	b.n	1036a <keys_set+0x22>
			BT_ERR("Invalid key length %zd != %zu", len,
   10486:	480e      	ldr	r0, [pc, #56]	; (104c0 <keys_set+0x178>)
   10488:	f043 0301 	orr.w	r3, r3, #1
   1048c:	227c      	movs	r2, #124	; 0x7c
   1048e:	4629      	mov	r1, r5
   10490:	f011 ff4d 	bl	2232e <log_2>
			bt_keys_clear(keys);
   10494:	4638      	mov	r0, r7
   10496:	f7ff ff2f 	bl	102f8 <bt_keys_clear>
			return -EINVAL;
   1049a:	e764      	b.n	10366 <keys_set+0x1e>
   1049c:	00027824 	.word	0x00027824
   104a0:	0002775c 	.word	0x0002775c
   104a4:	0002bc92 	.word	0x0002bc92
   104a8:	0002d4d7 	.word	0x0002d4d7
   104ac:	0002ce90 	.word	0x0002ce90
   104b0:	0002d4f6 	.word	0x0002d4f6
   104b4:	0002d519 	.word	0x0002d519
   104b8:	0002d538 	.word	0x0002d538
   104bc:	2000d7d4 	.word	0x2000d7d4
   104c0:	0002d55a 	.word	0x0002d55a

000104c4 <bt_keys_store>:
{
   104c4:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   104c6:	4605      	mov	r5, r0
{
   104c8:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   104ca:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   104ce:	4604      	mov	r4, r0
	if (keys->id) {
   104d0:	b30a      	cbz	r2, 10516 <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   104d2:	ae02      	add	r6, sp, #8
   104d4:	2104      	movs	r1, #4
   104d6:	4630      	mov	r0, r6
   104d8:	f011 f9bf 	bl	2185a <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   104dc:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   104de:	4a0f      	ldr	r2, [pc, #60]	; (1051c <bt_keys_store+0x58>)
   104e0:	462b      	mov	r3, r5
   104e2:	2124      	movs	r1, #36	; 0x24
   104e4:	a803      	add	r0, sp, #12
   104e6:	f7f8 f84d 	bl	8584 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   104ea:	f104 010c 	add.w	r1, r4, #12
   104ee:	227c      	movs	r2, #124	; 0x7c
   104f0:	a803      	add	r0, sp, #12
   104f2:	f7f6 f909 	bl	6708 <settings_save_one>
	if (err) {
   104f6:	4604      	mov	r4, r0
   104f8:	b150      	cbz	r0, 10510 <bt_keys_store+0x4c>
   104fa:	4a09      	ldr	r2, [pc, #36]	; (10520 <bt_keys_store+0x5c>)
   104fc:	4b09      	ldr	r3, [pc, #36]	; (10524 <bt_keys_store+0x60>)
   104fe:	1ad2      	subs	r2, r2, r3
   10500:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   10502:	0192      	lsls	r2, r2, #6
   10504:	4601      	mov	r1, r0
   10506:	f042 0201 	orr.w	r2, r2, #1
   1050a:	4807      	ldr	r0, [pc, #28]	; (10528 <bt_keys_store+0x64>)
   1050c:	f011 fefb 	bl	22306 <log_1>
}
   10510:	4620      	mov	r0, r4
   10512:	b00c      	add	sp, #48	; 0x30
   10514:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   10516:	9200      	str	r2, [sp, #0]
   10518:	e7e1      	b.n	104de <bt_keys_store+0x1a>
   1051a:	bf00      	nop
   1051c:	0002d598 	.word	0x0002d598
   10520:	00027824 	.word	0x00027824
   10524:	0002775c 	.word	0x0002775c
   10528:	0002d578 	.word	0x0002d578

0001052c <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   1052c:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   1052e:	f7ff fed3 	bl	102d8 <bt_keys_find_addr>

	if (!keys) {
   10532:	b150      	cbz	r0, 1054a <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   10534:	4a05      	ldr	r2, [pc, #20]	; (1054c <bt_keys_update_usage+0x20>)
   10536:	6813      	ldr	r3, [r2, #0]
   10538:	4283      	cmp	r3, r0
   1053a:	d006      	beq.n	1054a <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   1053c:	4904      	ldr	r1, [pc, #16]	; (10550 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   1053e:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   10540:	680b      	ldr	r3, [r1, #0]
   10542:	3301      	adds	r3, #1
   10544:	600b      	str	r3, [r1, #0]
   10546:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   1054a:	bd08      	pop	{r3, pc}
   1054c:	2000d860 	.word	0x2000d860
   10550:	2000d7d4 	.word	0x2000d7d4

00010554 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   10554:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10558:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1055a:	1dc2      	adds	r2, r0, #7
   1055c:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10560:	1e75      	subs	r5, r6, #1
{
   10562:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   10564:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   10566:	6018      	str	r0, [r3, #0]
{
   10568:	b082      	sub	sp, #8
   1056a:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   1056c:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   1056e:	2100      	movs	r1, #0
   10570:	2204      	movs	r2, #4
   10572:	fb07 0005 	mla	r0, r7, r5, r0
   10576:	f013 fef0 	bl	2435a <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   1057a:	b1bd      	cbz	r5, 105ac <mem_init+0x58>
   1057c:	3e02      	subs	r6, #2
   1057e:	b2b6      	uxth	r6, r6
   10580:	fb06 7307 	mla	r3, r6, r7, r7
   10584:	fb06 f807 	mul.w	r8, r6, r7
   10588:	441c      	add	r4, r3
   1058a:	eba8 0803 	sub.w	r8, r8, r3
   1058e:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   10590:	2204      	movs	r2, #4
   10592:	eb04 0008 	add.w	r0, r4, r8
   10596:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   1059a:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   1059c:	f013 feb2 	bl	24304 <memcpy>
	while (mem_count--) {
   105a0:	42b5      	cmp	r5, r6
   105a2:	eba4 0407 	sub.w	r4, r4, r7
   105a6:	f105 0501 	add.w	r5, r5, #1
   105aa:	d1f1      	bne.n	10590 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   105ac:	b002      	add	sp, #8
   105ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   105b2:	bf00      	nop

000105b4 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   105b4:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   105b6:	6805      	ldr	r5, [r0, #0]
{
   105b8:	b082      	sub	sp, #8
	if (*mem_head) {
   105ba:	b195      	cbz	r5, 105e2 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   105bc:	1deb      	adds	r3, r5, #7
   105be:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   105c2:	2204      	movs	r2, #4
   105c4:	4604      	mov	r4, r0
   105c6:	4629      	mov	r1, r5
   105c8:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   105cc:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   105ce:	f013 fe99 	bl	24304 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   105d2:	9b01      	ldr	r3, [sp, #4]
   105d4:	b123      	cbz	r3, 105e0 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   105d6:	1dda      	adds	r2, r3, #7
   105d8:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   105dc:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   105de:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   105e0:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   105e2:	4628      	mov	r0, r5
   105e4:	b002      	add	sp, #8
   105e6:	bd70      	pop	{r4, r5, r6, pc}

000105e8 <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   105e8:	680b      	ldr	r3, [r1, #0]
{
   105ea:	b570      	push	{r4, r5, r6, lr}
   105ec:	460c      	mov	r4, r1
   105ee:	4605      	mov	r5, r0
	if (*mem_head) {
   105f0:	b183      	cbz	r3, 10614 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   105f2:	3307      	adds	r3, #7
   105f4:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   105f8:	881e      	ldrh	r6, [r3, #0]
   105fa:	3601      	adds	r6, #1
   105fc:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   105fe:	2204      	movs	r2, #4
   10600:	4621      	mov	r1, r4
   10602:	4628      	mov	r0, r5
   10604:	f013 fe7e 	bl	24304 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   10608:	1deb      	adds	r3, r5, #7
   1060a:	f023 0303 	bic.w	r3, r3, #3
   1060e:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   10610:	6025      	str	r5, [r4, #0]
}
   10612:	bd70      	pop	{r4, r5, r6, pc}
   10614:	2601      	movs	r6, #1
   10616:	e7f2      	b.n	105fe <mem_release+0x16>

00010618 <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   10618:	fb02 0001 	mla	r0, r2, r1, r0
   1061c:	4770      	bx	lr
   1061e:	bf00      	nop

00010620 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   10620:	1a40      	subs	r0, r0, r1
   10622:	b280      	uxth	r0, r0
}
   10624:	fbb0 f0f2 	udiv	r0, r0, r2
   10628:	4770      	bx	lr
   1062a:	bf00      	nop

0001062c <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   1062c:	1e53      	subs	r3, r2, #1
	src += len;
   1062e:	4411      	add	r1, r2
	while (len--) {
   10630:	b29b      	uxth	r3, r3
   10632:	b142      	cbz	r2, 10646 <mem_rcopy+0x1a>
   10634:	43db      	mvns	r3, r3
   10636:	3801      	subs	r0, #1
   10638:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1063a:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   1063e:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   10642:	4291      	cmp	r1, r2
   10644:	d1f9      	bne.n	1063a <mem_rcopy+0xe>
	}
}
   10646:	4770      	bx	lr

00010648 <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   10648:	4401      	add	r1, r0
   1064a:	e002      	b.n	10652 <mem_nz+0xa>
		if (*src++) {
   1064c:	f810 3b01 	ldrb.w	r3, [r0], #1
   10650:	b91b      	cbnz	r3, 1065a <mem_nz+0x12>
	while (len--) {
   10652:	4288      	cmp	r0, r1
   10654:	d1fa      	bne.n	1064c <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   10656:	2000      	movs	r0, #0
   10658:	4770      	bx	lr
			return 1;
   1065a:	2001      	movs	r0, #1
}
   1065c:	4770      	bx	lr
   1065e:	bf00      	nop

00010660 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   10660:	6010      	str	r0, [r2, #0]
   10662:	6008      	str	r0, [r1, #0]

	return link;
}
   10664:	4770      	bx	lr
   10666:	bf00      	nop

00010668 <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   10668:	680a      	ldr	r2, [r1, #0]
{
   1066a:	4603      	mov	r3, r0
	if (*head != *tail) {
   1066c:	6800      	ldr	r0, [r0, #0]
   1066e:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   10670:	bf05      	ittet	eq
   10672:	2200      	moveq	r2, #0
   10674:	600a      	streq	r2, [r1, #0]
		return NULL;
   10676:	2000      	movne	r0, #0
	*head = *tail = NULL;
   10678:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   1067a:	4770      	bx	lr

0001067c <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   1067c:	f8d2 c000 	ldr.w	ip, [r2]
   10680:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   10684:	f8d2 c000 	ldr.w	ip, [r2]
   10688:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   1068c:	6010      	str	r0, [r2, #0]

	return link;
}
   1068e:	4770      	bx	lr

00010690 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   10690:	4288      	cmp	r0, r1
   10692:	d003      	beq.n	1069c <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   10694:	b11a      	cbz	r2, 1069e <memq_peek+0xe>
		*mem = head->mem;
   10696:	6843      	ldr	r3, [r0, #4]
   10698:	6013      	str	r3, [r2, #0]
   1069a:	4770      	bx	lr
		return NULL;
   1069c:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   1069e:	4770      	bx	lr

000106a0 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   106a0:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   106a2:	4283      	cmp	r3, r0
   106a4:	d009      	beq.n	106ba <memq_dequeue+0x1a>
	if (mem) {
   106a6:	b12a      	cbz	r2, 106b4 <memq_dequeue+0x14>
		*mem = head->mem;
   106a8:	6858      	ldr	r0, [r3, #4]
   106aa:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   106ac:	681a      	ldr	r2, [r3, #0]
   106ae:	600a      	str	r2, [r1, #0]

	return old_head;
}
   106b0:	4618      	mov	r0, r3
   106b2:	4770      	bx	lr
	if (old_head == NULL) {
   106b4:	2b00      	cmp	r3, #0
   106b6:	d1f9      	bne.n	106ac <memq_dequeue+0xc>
   106b8:	e7fa      	b.n	106b0 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   106ba:	2300      	movs	r3, #0
   106bc:	e7f8      	b.n	106b0 <memq_dequeue+0x10>
   106be:	bf00      	nop

000106c0 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   106c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106c4:	f8df 8030 	ldr.w	r8, [pc, #48]	; 106f8 <mayfly_init+0x38>
   106c8:	4e0c      	ldr	r6, [pc, #48]	; (106fc <mayfly_init+0x3c>)
   106ca:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   106cc:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   106d0:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   106d2:	1d22      	adds	r2, r4, #4
   106d4:	4621      	mov	r1, r4
   106d6:	4628      	mov	r0, r5
		while (caller_id--) {
   106d8:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   106da:	f7ff ffc1 	bl	10660 <memq_init>
		while (caller_id--) {
   106de:	42b4      	cmp	r4, r6
   106e0:	f1a5 0508 	sub.w	r5, r5, #8
   106e4:	d1f5      	bne.n	106d2 <mayfly_init+0x12>
	while (callee_id--) {
   106e6:	3f04      	subs	r7, #4
   106e8:	1d3b      	adds	r3, r7, #4
   106ea:	f1a8 0820 	sub.w	r8, r8, #32
   106ee:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   106f2:	d1eb      	bne.n	106cc <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   106f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   106f8:	2000d8dc 	.word	0x2000d8dc
   106fc:	2000d96c 	.word	0x2000d96c

00010700 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   10700:	b410      	push	{r4}
   10702:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   10704:	4c15      	ldr	r4, [pc, #84]	; (1075c <mayfly_enable+0x5c>)
{
   10706:	468c      	mov	ip, r1
	if (enable) {
   10708:	b192      	cbz	r2, 10730 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1070a:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   1070e:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   10712:	0100      	lsls	r0, r0, #4
   10714:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   10718:	4421      	add	r1, r4
   1071a:	7a48      	ldrb	r0, [r1, #9]
   1071c:	7a0c      	ldrb	r4, [r1, #8]
   1071e:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   10720:	bf04      	itt	eq
   10722:	3001      	addeq	r0, #1
   10724:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   10726:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   10728:	4661      	mov	r1, ip
   1072a:	4618      	mov	r0, r3
   1072c:	f00c bc36 	b.w	1cf9c <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10730:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10734:	0112      	lsls	r2, r2, #4
   10736:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1073a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   1073e:	4423      	add	r3, r4
   10740:	7a9c      	ldrb	r4, [r3, #10]
   10742:	7ada      	ldrb	r2, [r3, #11]
   10744:	42a2      	cmp	r2, r4
   10746:	d001      	beq.n	1074c <mayfly_enable+0x4c>
}
   10748:	bc10      	pop	{r4}
   1074a:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   1074c:	3201      	adds	r2, #1
   1074e:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   10750:	4b03      	ldr	r3, [pc, #12]	; (10760 <mayfly_enable+0x60>)
   10752:	2201      	movs	r2, #1
   10754:	545a      	strb	r2, [r3, r1]
}
   10756:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   10758:	f00c bc76 	b.w	1d048 <mayfly_pend>
   1075c:	2000d8e8 	.word	0x2000d8e8
   10760:	2000d8e4 	.word	0x2000d8e4

00010764 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   10764:	b570      	push	{r4, r5, r6, lr}
   10766:	4606      	mov	r6, r0
   10768:	461c      	mov	r4, r3
   1076a:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   1076c:	b322      	cbz	r2, 107b8 <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   1076e:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   10770:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   10772:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10774:	f012 0203 	ands.w	r2, r2, #3
   10778:	d005      	beq.n	10786 <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   1077a:	2a01      	cmp	r2, #1
   1077c:	d040      	beq.n	10800 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   1077e:	3301      	adds	r3, #1
   10780:	b2db      	uxtb	r3, r3
   10782:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   10784:	e00f      	b.n	107a6 <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   10786:	3301      	adds	r3, #1
   10788:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1078a:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   1078c:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   1078e:	2304      	movs	r3, #4
   10790:	fb11 3105 	smlabb	r1, r1, r5, r3
   10794:	4a1b      	ldr	r2, [pc, #108]	; (10804 <mayfly_enqueue+0xa0>)
   10796:	6860      	ldr	r0, [r4, #4]
   10798:	230c      	movs	r3, #12
   1079a:	fb13 1306 	smlabb	r3, r3, r6, r1
   1079e:	441a      	add	r2, r3
   107a0:	4621      	mov	r1, r4
   107a2:	f7ff ff6b 	bl	1067c <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   107a6:	4b18      	ldr	r3, [pc, #96]	; (10808 <mayfly_enqueue+0xa4>)
   107a8:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   107aa:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   107ac:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   107ae:	4629      	mov	r1, r5
   107b0:	f00c fc4a 	bl	1d048 <mayfly_pend>

	return 0;
   107b4:	2000      	movs	r0, #0
}
   107b6:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   107b8:	f00c fc30 	bl	1d01c <mayfly_prio_is_equal>
   107bc:	2800      	cmp	r0, #0
   107be:	d0d6      	beq.n	1076e <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   107c0:	4629      	mov	r1, r5
   107c2:	4630      	mov	r0, r6
   107c4:	f00c fc0a 	bl	1cfdc <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   107c8:	2800      	cmp	r0, #0
   107ca:	d0d0      	beq.n	1076e <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   107cc:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   107d0:	0112      	lsls	r2, r2, #4
   107d2:	490c      	ldr	r1, [pc, #48]	; (10804 <mayfly_enqueue+0xa0>)
   107d4:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   107d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   107dc:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   107de:	7a9a      	ldrb	r2, [r3, #10]
   107e0:	7adb      	ldrb	r3, [r3, #11]
   107e2:	429a      	cmp	r2, r3
   107e4:	d1c3      	bne.n	1076e <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
   107e6:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   107e8:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   107ea:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   107ec:	0792      	lsls	r2, r2, #30
   107ee:	d002      	beq.n	107f6 <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   107f0:	3302      	adds	r3, #2
   107f2:	b2db      	uxtb	r3, r3
   107f4:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   107f6:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   107fa:	4798      	blx	r3
		return 0;
   107fc:	2000      	movs	r0, #0
}
   107fe:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   10800:	4610      	mov	r0, r2
}
   10802:	bd70      	pop	{r4, r5, r6, pc}
   10804:	2000d8e8 	.word	0x2000d8e8
   10808:	2000d8e4 	.word	0x2000d8e4

0001080c <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   1080c:	4a4f      	ldr	r2, [pc, #316]	; (1094c <mayfly_run+0x140>)
   1080e:	5c13      	ldrb	r3, [r2, r0]
   10810:	2b00      	cmp	r3, #0
   10812:	f000 8099 	beq.w	10948 <mayfly_run+0x13c>
{
   10816:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   1081a:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1081c:	4f4c      	ldr	r7, [pc, #304]	; (10950 <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
   1081e:	5413      	strb	r3, [r2, r0]
{
   10820:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   10822:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10824:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   10828:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1082c:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   10830:	9303      	str	r3, [sp, #12]
   10832:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10836:	f10b 0804 	add.w	r8, fp, #4
   1083a:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   1083e:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   10842:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   10844:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10848:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   1084a:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   1084c:	f7ff ff20 	bl	10690 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   10850:	f107 0624 	add.w	r6, r7, #36	; 0x24
   10854:	4683      	mov	fp, r0
   10856:	b398      	cbz	r0, 108c0 <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   10858:	9c05      	ldr	r4, [sp, #20]
   1085a:	7863      	ldrb	r3, [r4, #1]
   1085c:	7825      	ldrb	r5, [r4, #0]
   1085e:	1aed      	subs	r5, r5, r3
   10860:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   10864:	2d01      	cmp	r5, #1
   10866:	d106      	bne.n	10876 <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   10868:	3b01      	subs	r3, #1
   1086a:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   1086c:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   10870:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   10872:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   10874:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   10876:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   10878:	1ac3      	subs	r3, r0, r3
   1087a:	f003 0303 	and.w	r3, r3, #3
   1087e:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   10880:	f04f 0200 	mov.w	r2, #0
   10884:	4631      	mov	r1, r6
	req = m->_req;
   10886:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   1088a:	d00f      	beq.n	108ac <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
   1088c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   1088e:	f7ff ff07 	bl	106a0 <memq_dequeue>
		ack = m->_ack;
   10892:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10896:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   10898:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   1089c:	eba3 030c 	sub.w	r3, r3, ip
   108a0:	f003 0303 	and.w	r3, r3, #3
   108a4:	2b01      	cmp	r3, #1
		m->_ack = req;
   108a6:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   108aa:	d045      	beq.n	10938 <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   108ac:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   108b0:	aa05      	add	r2, sp, #20
   108b2:	f7ff feed 	bl	10690 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   108b6:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   108b8:	4683      	mov	fp, r0
			if (state == 1U) {
   108ba:	d02b      	beq.n	10914 <mayfly_run+0x108>
		while (link) {
   108bc:	2800      	cmp	r0, #0
   108be:	d1cb      	bne.n	10858 <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   108c0:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   108c4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   108c8:	429a      	cmp	r2, r3
   108ca:	d003      	beq.n	108d4 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   108cc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   108d0:	2301      	movs	r3, #1
   108d2:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   108d4:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   108d8:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   108dc:	429a      	cmp	r2, r3
   108de:	d003      	beq.n	108e8 <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   108e0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   108e4:	2301      	movs	r3, #1
   108e6:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   108e8:	f109 39ff 	add.w	r9, r9, #4294967295
   108ec:	fa5f f989 	uxtb.w	r9, r9
   108f0:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   108f4:	f1a7 070c 	sub.w	r7, r7, #12
   108f8:	d1a3      	bne.n	10842 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   108fa:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   108fe:	b1c3      	cbz	r3, 10932 <mayfly_run+0x126>
   10900:	9b03      	ldr	r3, [sp, #12]
   10902:	b9b3      	cbnz	r3, 10932 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10904:	461a      	mov	r2, r3
   10906:	4651      	mov	r1, sl
   10908:	4650      	mov	r0, sl
	}
}
   1090a:	b007      	add	sp, #28
   1090c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   10910:	f00c bb44 	b.w	1cf9c <mayfly_enable_cb>
				if (caller_id || link) {
   10914:	f1b9 0f00 	cmp.w	r9, #0
   10918:	d101      	bne.n	1091e <mayfly_run+0x112>
   1091a:	2800      	cmp	r0, #0
   1091c:	d0d0      	beq.n	108c0 <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
   1091e:	f8dd a008 	ldr.w	sl, [sp, #8]
   10922:	4a0a      	ldr	r2, [pc, #40]	; (1094c <mayfly_run+0x140>)
   10924:	2301      	movs	r3, #1
   10926:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   1092a:	4651      	mov	r1, sl
   1092c:	4650      	mov	r0, sl
   1092e:	f00c fb8b 	bl	1d048 <mayfly_pend>
}
   10932:	b007      	add	sp, #28
   10934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10938:	4642      	mov	r2, r8
   1093a:	4621      	mov	r1, r4
   1093c:	4658      	mov	r0, fp
			m->_ack = ack;
   1093e:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10942:	f7ff fe9b 	bl	1067c <memq_enqueue>
   10946:	e7b1      	b.n	108ac <mayfly_run+0xa0>
   10948:	4770      	bx	lr
   1094a:	bf00      	nop
   1094c:	2000d8e4 	.word	0x2000d8e4
   10950:	2000d8e8 	.word	0x2000d8e8

00010954 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   10954:	1e4b      	subs	r3, r1, #1
   10956:	b2db      	uxtb	r3, r3
   10958:	b189      	cbz	r1, 1097e <util_ones_count_get+0x2a>
   1095a:	1e41      	subs	r1, r0, #1
   1095c:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   10960:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   10962:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   10966:	b13b      	cbz	r3, 10978 <util_ones_count_get+0x24>
			bite &= (bite - 1);
   10968:	b25b      	sxtb	r3, r3
   1096a:	1e5a      	subs	r2, r3, #1
   1096c:	4013      	ands	r3, r2
			one_count++;
   1096e:	3001      	adds	r0, #1
		while (bite) {
   10970:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10974:	b2c0      	uxtb	r0, r0
		while (bite) {
   10976:	d1f7      	bne.n	10968 <util_ones_count_get+0x14>
	while (octets_len--) {
   10978:	4561      	cmp	r1, ip
   1097a:	d1f2      	bne.n	10962 <util_ones_count_get+0xe>
   1097c:	4770      	bx	lr
	uint8_t one_count = 0U;
   1097e:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   10980:	4770      	bx	lr
   10982:	bf00      	nop

00010984 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10984:	eba2 0c01 	sub.w	ip, r2, r1
   10988:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   1098c:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   1098e:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10990:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10992:	d10a      	bne.n	109aa <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10994:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10998:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   1099a:	42a3      	cmp	r3, r4
   1099c:	d914      	bls.n	109c8 <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   1099e:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   109a0:	2100      	movs	r1, #0
}
   109a2:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   109a4:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   109a6:	6141      	str	r1, [r0, #20]
}
   109a8:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   109aa:	1a89      	subs	r1, r1, r2
   109ac:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   109b0:	428b      	cmp	r3, r1
   109b2:	d806      	bhi.n	109c2 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   109b4:	4421      	add	r1, r4
   109b6:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   109b8:	2300      	movs	r3, #0
}
   109ba:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   109bc:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   109be:	6141      	str	r1, [r0, #20]
}
   109c0:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   109c2:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   109c4:	42a3      	cmp	r3, r4
   109c6:	d8ea      	bhi.n	1099e <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   109c8:	1ae1      	subs	r1, r4, r3
   109ca:	e7f5      	b.n	109b8 <ticks_to_expire_prep+0x34>

000109cc <ticker_job_list_insert>:
{
   109cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   109d0:	b087      	sub	sp, #28
   109d2:	4603      	mov	r3, r0
	count_user = instance->count_user;
   109d4:	7a42      	ldrb	r2, [r0, #9]
{
   109d6:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   109d8:	6800      	ldr	r0, [r0, #0]
   109da:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   109dc:	6858      	ldr	r0, [r3, #4]
   109de:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   109e0:	2a00      	cmp	r2, #0
   109e2:	f000 80f6 	beq.w	10bd2 <ticker_job_list_insert+0x206>
   109e6:	1e53      	subs	r3, r2, #1
   109e8:	b2db      	uxtb	r3, r3
   109ea:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   109ee:	460f      	mov	r7, r1
   109f0:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   109f2:	9b03      	ldr	r3, [sp, #12]
   109f4:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   109f6:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   109f8:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   109fa:	2fff      	cmp	r7, #255	; 0xff
   109fc:	d05e      	beq.n	10abc <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   109fe:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   10a02:	9b02      	ldr	r3, [sp, #8]
   10a04:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   10a08:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   10a0a:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   10a0e:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   10a12:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   10a14:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   10a16:	f04f 09ff 	mov.w	r9, #255	; 0xff
   10a1a:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   10a1e:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   10a22:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   10a24:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10a28:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   10a2a:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10a2e:	d10f      	bne.n	10a50 <ticker_job_list_insert+0x84>
   10a30:	e0ca      	b.n	10bc8 <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10a32:	1a09      	subs	r1, r1, r0
   10a34:	d106      	bne.n	10a44 <ticker_job_list_insert+0x78>
   10a36:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   10a3a:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   10a3e:	45e2      	cmp	sl, ip
   10a40:	f200 8086 	bhi.w	10b50 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   10a44:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10a48:	2bff      	cmp	r3, #255	; 0xff
   10a4a:	4691      	mov	r9, r2
   10a4c:	d072      	beq.n	10b34 <ticker_job_list_insert+0x168>
   10a4e:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   10a50:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   10a54:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   10a58:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   10a5a:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10a5e:	4288      	cmp	r0, r1
   10a60:	d9e7      	bls.n	10a32 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   10a62:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   10a66:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   10a6a:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   10a6e:	d166      	bne.n	10b3e <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   10a70:	9b01      	ldr	r3, [sp, #4]
   10a72:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   10a76:	2aff      	cmp	r2, #255	; 0xff
   10a78:	d008      	beq.n	10a8c <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   10a7a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10a7e:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   10a82:	f8de 3008 	ldr.w	r3, [lr, #8]
   10a86:	1a5b      	subs	r3, r3, r1
   10a88:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   10a8c:	78a3      	ldrb	r3, [r4, #2]
   10a8e:	3301      	adds	r3, #1
   10a90:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10a92:	2d00      	cmp	r5, #0
   10a94:	d0b1      	beq.n	109fa <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10a96:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   10a9a:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10a9c:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   10a9e:	2200      	movs	r2, #0
   10aa0:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10aa2:	b113      	cbz	r3, 10aaa <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10aa4:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10aa6:	4610      	mov	r0, r2
   10aa8:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10aaa:	6863      	ldr	r3, [r4, #4]
   10aac:	2b00      	cmp	r3, #0
   10aae:	d1a4      	bne.n	109fa <ticker_job_list_insert+0x2e>
					ticker->op_context =
   10ab0:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   10ab4:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   10ab6:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   10aba:	d1a0      	bne.n	109fe <ticker_job_list_insert+0x32>
   10abc:	9b03      	ldr	r3, [sp, #12]
   10abe:	7898      	ldrb	r0, [r3, #2]
   10ac0:	42b0      	cmp	r0, r6
   10ac2:	d02f      	beq.n	10b24 <ticker_job_list_insert+0x158>
   10ac4:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   10ac8:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10acc:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
   10ad0:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10ad4:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
   10ad8:	3601      	adds	r6, #1
   10ada:	b2f6      	uxtb	r6, r6
					first = 0U;
   10adc:	42b1      	cmp	r1, r6
   10ade:	bf08      	it	eq
   10ae0:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10ae2:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
   10ae4:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10ae8:	d11a      	bne.n	10b20 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   10aea:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   10aee:	9902      	ldr	r1, [sp, #8]
   10af0:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   10af4:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   10af8:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   10afc:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   10afe:	7862      	ldrb	r2, [r4, #1]
   10b00:	1a52      	subs	r2, r2, r1
   10b02:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10b06:	d025      	beq.n	10b54 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10b08:	f04f 0200 	mov.w	r2, #0
   10b0c:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   10b10:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10b12:	2001      	movs	r0, #1
	user_op->status = status;
   10b14:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10b16:	b10b      	cbz	r3, 10b1c <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10b18:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10b1a:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10b1c:	f89b 0002 	ldrb.w	r0, [fp, #2]
   10b20:	42b0      	cmp	r0, r6
   10b22:	d1d1      	bne.n	10ac8 <ticker_job_list_insert+0xfc>
	while (count_user--) {
   10b24:	9a03      	ldr	r2, [sp, #12]
   10b26:	9905      	ldr	r1, [sp, #20]
   10b28:	4291      	cmp	r1, r2
   10b2a:	f1a2 0308 	sub.w	r3, r2, #8
   10b2e:	d050      	beq.n	10bd2 <ticker_job_list_insert+0x206>
   10b30:	9303      	str	r3, [sp, #12]
   10b32:	e75e      	b.n	109f2 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   10b34:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   10b38:	f88b 3000 	strb.w	r3, [fp]
   10b3c:	461a      	mov	r2, r3
		node[previous].next = id;
   10b3e:	fa0f f989 	sxth.w	r9, r9
   10b42:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   10b46:	ea4f 1909 	mov.w	r9, r9, lsl #4
   10b4a:	f80e 8009 	strb.w	r8, [lr, r9]
   10b4e:	e792      	b.n	10a76 <ticker_job_list_insert+0xaa>
   10b50:	4601      	mov	r1, r0
   10b52:	e786      	b.n	10a62 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10b54:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10b56:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10b58:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   10b5c:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   10b5e:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10b60:	d02a      	beq.n	10bb8 <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
   10b62:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10b66:	1a9a      	subs	r2, r3, r2
   10b68:	fab2 f282 	clz	r2, r2
   10b6c:	0952      	lsrs	r2, r2, #5
   10b6e:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10b72:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10b74:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10b76:	68ea      	ldr	r2, [r5, #12]
   10b78:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10b7a:	692a      	ldr	r2, [r5, #16]
   10b7c:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   10b7e:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   10b82:	4293      	cmp	r3, r2
   10b84:	bf88      	it	hi
   10b86:	2300      	movhi	r3, #0
   10b88:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   10b8a:	69ab      	ldr	r3, [r5, #24]
   10b8c:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   10b8e:	69eb      	ldr	r3, [r5, #28]
   10b90:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   10b92:	6a2b      	ldr	r3, [r5, #32]
   10b94:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   10b96:	68ab      	ldr	r3, [r5, #8]
   10b98:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   10b9a:	2300      	movs	r3, #0
   10b9c:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10b9e:	686a      	ldr	r2, [r5, #4]
   10ba0:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   10ba2:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10ba4:	f7ff feee 	bl	10984 <ticks_to_expire_prep>
	ticker->force = 1U;
   10ba8:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   10bac:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10bb0:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   10bb4:	70e3      	strb	r3, [r4, #3]
}
   10bb6:	e72d      	b.n	10a14 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   10bb8:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   10bba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10bbc:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10bbe:	68ea      	ldr	r2, [r5, #12]
   10bc0:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10bc2:	692a      	ldr	r2, [r5, #16]
   10bc4:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   10bc6:	e7df      	b.n	10b88 <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
   10bc8:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   10bcc:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   10bd0:	e75c      	b.n	10a8c <ticker_job_list_insert+0xc0>
}
   10bd2:	b007      	add	sp, #28
   10bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010bd8 <ticker_worker>:
{
   10bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   10bdc:	7f82      	ldrb	r2, [r0, #30]
{
   10bde:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
   10be0:	2301      	movs	r3, #1
	if (instance->job_guard) {
   10be2:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
   10be4:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   10be6:	2a00      	cmp	r2, #0
   10be8:	d15b      	bne.n	10ca2 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   10bea:	7f43      	ldrb	r3, [r0, #29]
   10bec:	2bff      	cmp	r3, #255	; 0xff
   10bee:	4681      	mov	r9, r0
   10bf0:	d056      	beq.n	10ca0 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10bf2:	f00b fd1b 	bl	1c62c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10bf6:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10bfa:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   10bfe:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10c02:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10c04:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10c06:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10c0a:	f000 8139 	beq.w	10e80 <ticker_worker+0x2a8>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   10c0e:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   10c12:	42b3      	cmp	r3, r6
   10c14:	bf94      	ite	ls
   10c16:	2300      	movls	r3, #0
   10c18:	2301      	movhi	r3, #1
   10c1a:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   10c1c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   10c20:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
   10c24:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   10c28:	d046      	beq.n	10cb8 <ticker_worker+0xe0>
			must_expire_skip = 1U;
   10c2a:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
   10c2e:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   10c32:	eb07 140b 	add.w	r4, r7, fp, lsl #4
   10c36:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   10c3a:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10c3c:	42b3      	cmp	r3, r6
   10c3e:	d839      	bhi.n	10cb4 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10c40:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
   10c44:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
   10c48:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
   10c4a:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10c4c:	7863      	ldrb	r3, [r4, #1]
   10c4e:	eba3 030a 	sub.w	r3, r3, sl
   10c52:	b2db      	uxtb	r3, r3
   10c54:	2b01      	cmp	r3, #1
   10c56:	d12a      	bne.n	10cae <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
   10c58:	69a0      	ldr	r0, [r4, #24]
   10c5a:	2800      	cmp	r0, #0
   10c5c:	d054      	beq.n	10d08 <ticker_worker+0x130>
   10c5e:	9b01      	ldr	r3, [sp, #4]
   10c60:	2b00      	cmp	r3, #0
   10c62:	d04c      	beq.n	10cfe <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   10c64:	8be3      	ldrh	r3, [r4, #30]
   10c66:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   10c68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
   10c6a:	b13a      	cbz	r2, 10c7c <ticker_worker+0xa4>
   10c6c:	6813      	ldr	r3, [r2, #0]
   10c6e:	b11b      	cbz	r3, 10c78 <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
   10c70:	7a13      	ldrb	r3, [r2, #8]
   10c72:	2b00      	cmp	r3, #0
   10c74:	f000 80ea 	beq.w	10e4c <ticker_worker+0x274>
				ext_data->reschedule_state =
   10c78:	2300      	movs	r3, #0
   10c7a:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
   10c7c:	9b03      	ldr	r3, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   10c7e:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   10c82:	3301      	adds	r3, #1
   10c84:	b29b      	uxth	r3, r3
   10c86:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   10c88:	b171      	cbz	r1, 10ca8 <ticker_worker+0xd0>
   10c8a:	8ba1      	ldrh	r1, [r4, #28]
   10c8c:	4299      	cmp	r1, r3
   10c8e:	d20b      	bcs.n	10ca8 <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   10c90:	2a00      	cmp	r2, #0
   10c92:	f000 80f8 	beq.w	10e86 <ticker_worker+0x2ae>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   10c96:	7a13      	ldrb	r3, [r2, #8]
   10c98:	2b01      	cmp	r3, #1
   10c9a:	d005      	beq.n	10ca8 <ticker_worker+0xd0>
			must_expire_skip = 1U;
   10c9c:	2301      	movs	r3, #1
   10c9e:	e036      	b.n	10d0e <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   10ca0:	77c2      	strb	r2, [r0, #31]
}
   10ca2:	b00d      	add	sp, #52	; 0x34
   10ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   10ca8:	f10a 33ff 	add.w	r3, sl, #4294967295
   10cac:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   10cae:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10cb2:	d1bc      	bne.n	10c2e <ticker_worker+0x56>
   10cb4:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10cb8:	f899 300b 	ldrb.w	r3, [r9, #11]
   10cbc:	f899 200a 	ldrb.w	r2, [r9, #10]
   10cc0:	429a      	cmp	r2, r3
   10cc2:	d10a      	bne.n	10cda <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   10cc4:	3201      	adds	r2, #1
   10cc6:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   10cc8:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10cca:	bf1c      	itt	ne
   10ccc:	4613      	movne	r3, r2
   10cce:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
   10cd0:	9a04      	ldr	r2, [sp, #16]
   10cd2:	f889 200b 	strb.w	r2, [r9, #11]
   10cd6:	bf08      	it	eq
   10cd8:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10cda:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10cde:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10ce2:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   10ce6:	2200      	movs	r2, #0
   10ce8:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10cec:	464b      	mov	r3, r9
   10cee:	2201      	movs	r2, #1
   10cf0:	2104      	movs	r1, #4
   10cf2:	2003      	movs	r0, #3
   10cf4:	46a4      	mov	ip, r4
}
   10cf6:	b00d      	add	sp, #52	; 0x34
   10cf8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10cfc:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   10cfe:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   10d02:	9305      	str	r3, [sp, #20]
   10d04:	3380      	adds	r3, #128	; 0x80
   10d06:	d136      	bne.n	10d76 <ticker_worker+0x19e>
		if (ticker->ext_data) {
   10d08:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10d0a:	b1c2      	cbz	r2, 10d3e <ticker_worker+0x166>
   10d0c:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
   10d0e:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
   10d10:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
   10d12:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
   10d14:	6051      	str	r1, [r2, #4]
		ticker->ack--;
   10d16:	f10a 30ff 	add.w	r0, sl, #4294967295
   10d1a:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   10d1c:	2d00      	cmp	r5, #0
   10d1e:	d0c6      	beq.n	10cae <ticker_worker+0xd6>
					   ticks_expired -
   10d20:	9a02      	ldr	r2, [sp, #8]
   10d22:	6960      	ldr	r0, [r4, #20]
   10d24:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
   10d26:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   10d28:	eba8 0000 	sub.w	r0, r8, r0
   10d2c:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   10d2e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10d32:	b19b      	cbz	r3, 10d5c <ticker_worker+0x184>
   10d34:	6923      	ldr	r3, [r4, #16]
   10d36:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10d3a:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
   10d3c:	e7b7      	b.n	10cae <ticker_worker+0xd6>
		if (ticker->timeout_func) {
   10d3e:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   10d40:	f10a 33ff 	add.w	r3, sl, #4294967295
   10d44:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   10d46:	2d00      	cmp	r5, #0
   10d48:	d0b1      	beq.n	10cae <ticker_worker+0xd6>
					   ticks_expired -
   10d4a:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   10d4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   10d4e:	eba8 0003 	sub.w	r0, r8, r3
   10d52:	9b02      	ldr	r3, [sp, #8]
   10d54:	695b      	ldr	r3, [r3, #20]
   10d56:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   10d58:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10d5c:	6923      	ldr	r3, [r4, #16]
   10d5e:	8be2      	ldrh	r2, [r4, #30]
   10d60:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   10d62:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   10d64:	2b00      	cmp	r3, #0
   10d66:	9b01      	ldr	r3, [sp, #4]
   10d68:	bf18      	it	ne
   10d6a:	2301      	movne	r3, #1
   10d6c:	9301      	str	r3, [sp, #4]
				ticker->lazy_current = 0U;
   10d6e:	2300      	movs	r3, #0
   10d70:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   10d72:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   10d74:	e79b      	b.n	10cae <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   10d76:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10d7a:	d0c5      	beq.n	10d08 <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
   10d7c:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   10d7e:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   10d80:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   10d84:	9203      	str	r2, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   10d86:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   10d88:	bf28      	it	cs
   10d8a:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   10d8c:	fb02 c10c 	mla	r1, r2, ip, ip
   10d90:	9106      	str	r1, [sp, #24]
				(lazy_current - ticker->priority);
   10d92:	9905      	ldr	r1, [sp, #20]
		uint32_t acc_ticks_to_expire = 0U;
   10d94:	f8cd a020 	str.w	sl, [sp, #32]
   10d98:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   10d9c:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
   10d9e:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
   10da0:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
   10da2:	9207      	str	r2, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   10da4:	2500      	movs	r5, #0
   10da6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   10daa:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
   10dac:	b21b      	sxth	r3, r3
   10dae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10db2:	eb07 1203 	add.w	r2, r7, r3, lsl #4
   10db6:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   10db8:	f8d2 8008 	ldr.w	r8, [r2, #8]
   10dbc:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   10dbe:	42a8      	cmp	r0, r5
   10dc0:	d33c      	bcc.n	10e3c <ticker_worker+0x264>
			if (ticker_next->ticks_slot == 0U) {
   10dc2:	6991      	ldr	r1, [r2, #24]
   10dc4:	2900      	cmp	r1, #0
   10dc6:	d036      	beq.n	10e36 <ticker_worker+0x25e>
			int32_t lazy_next = ticker_next->lazy_current;
   10dc8:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   10dca:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10dcc:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   10dd0:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   10dd4:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
   10dd6:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
   10dd8:	bf28      	it	cs
   10dda:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
   10dde:	f1ba 0f00 	cmp.w	sl, #0
   10de2:	d040      	beq.n	10e66 <ticker_worker+0x28e>
   10de4:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
   10de8:	2c00      	cmp	r4, #0
   10dea:	d038      	beq.n	10e5e <ticker_worker+0x286>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10dec:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
   10df0:	f8dd a018 	ldr.w	sl, [sp, #24]
   10df4:	45c2      	cmp	sl, r8
   10df6:	bf8c      	ite	hi
   10df8:	f04f 0801 	movhi.w	r8, #1
   10dfc:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
   10e00:	bf34      	ite	cc
   10e02:	f04f 0a01 	movcc.w	sl, #1
   10e06:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   10e0a:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   10e0c:	f892 b003 	ldrb.w	fp, [r2, #3]
   10e10:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   10e14:	d30f      	bcc.n	10e36 <ticker_worker+0x25e>
   10e16:	4593      	cmp	fp, r2
   10e18:	d82a      	bhi.n	10e70 <ticker_worker+0x298>
			    (next_force ||
   10e1a:	f11e 0f80 	cmn.w	lr, #128	; 0x80
   10e1e:	d027      	beq.n	10e70 <ticker_worker+0x298>
			     next_is_critical ||
   10e20:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   10e22:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
   10e26:	4594      	cmp	ip, r2
   10e28:	dd02      	ble.n	10e30 <ticker_worker+0x258>
			     (next_has_priority && !current_is_older) ||
   10e2a:	f1b8 0f00 	cmp.w	r8, #0
   10e2e:	d01f      	beq.n	10e70 <ticker_worker+0x298>
   10e30:	9a05      	ldr	r2, [sp, #20]
   10e32:	4572      	cmp	r2, lr
   10e34:	d019      	beq.n	10e6a <ticker_worker+0x292>
			id_head = ticker_next->next;
   10e36:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
   10e38:	2bff      	cmp	r3, #255	; 0xff
   10e3a:	d1b7      	bne.n	10dac <ticker_worker+0x1d4>
   10e3c:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   10e40:	f8dd a020 	ldr.w	sl, [sp, #32]
   10e44:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10e48:	464c      	mov	r4, r9
   10e4a:	e75d      	b.n	10d08 <ticker_worker+0x130>
			    TICKER_RESCHEDULE_STATE_NONE &&
   10e4c:	8ba3      	ldrh	r3, [r4, #28]
   10e4e:	9903      	ldr	r1, [sp, #12]
   10e50:	428b      	cmp	r3, r1
   10e52:	f63f af11 	bhi.w	10c78 <ticker_worker+0xa0>
				ext_data->reschedule_state =
   10e56:	f04f 0301 	mov.w	r3, #1
   10e5a:	7213      	strb	r3, [r2, #8]
   10e5c:	e70e      	b.n	10c7c <ticker_worker+0xa4>
				(ticker->ticks_periodic == 0U) ||
   10e5e:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
   10e62:	46a2      	mov	sl, r4
   10e64:	e7d1      	b.n	10e0a <ticker_worker+0x232>
					  0U :
   10e66:	46d0      	mov	r8, sl
   10e68:	e7be      	b.n	10de8 <ticker_worker+0x210>
			     (equal_priority && next_is_older))) {
   10e6a:	f1ba 0f00 	cmp.w	sl, #0
   10e6e:	d0e2      	beq.n	10e36 <ticker_worker+0x25e>
   10e70:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   10e74:	f8dd a020 	ldr.w	sl, [sp, #32]
   10e78:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10e7c:	464c      	mov	r4, r9
   10e7e:	e6f3      	b.n	10c68 <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
   10e80:	9b04      	ldr	r3, [sp, #16]
   10e82:	9301      	str	r3, [sp, #4]
   10e84:	e6ca      	b.n	10c1c <ticker_worker+0x44>
		if (ticker->timeout_func) {
   10e86:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   10e88:	f10a 33ff 	add.w	r3, sl, #4294967295
   10e8c:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   10e8e:	2d00      	cmp	r5, #0
   10e90:	f43f af0d 	beq.w	10cae <ticker_worker+0xd6>
					   ticks_expired -
   10e94:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   10e96:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   10e98:	eba8 0003 	sub.w	r0, r8, r3
   10e9c:	9b02      	ldr	r3, [sp, #8]
   10e9e:	695b      	ldr	r3, [r3, #20]
   10ea0:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   10ea2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10ea6:	e745      	b.n	10d34 <ticker_worker+0x15c>

00010ea8 <ticker_job>:
	if (instance->worker_trigger) {
   10ea8:	7fc2      	ldrb	r2, [r0, #31]
   10eaa:	2a00      	cmp	r2, #0
   10eac:	f040 83f3 	bne.w	11696 <ticker_job+0x7ee>
{
   10eb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10eb4:	4683      	mov	fp, r0
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10eb6:	7a83      	ldrb	r3, [r0, #10]
   10eb8:	7ac1      	ldrb	r1, [r0, #11]
{
   10eba:	b08f      	sub	sp, #60	; 0x3c
	instance->job_guard = 1U;
   10ebc:	2001      	movs	r0, #1
   10ebe:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10ec2:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   10ec4:	f8db 0014 	ldr.w	r0, [fp, #20]
   10ec8:	900a      	str	r0, [sp, #40]	; 0x28
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10eca:	f000 80a2 	beq.w	11012 <ticker_job+0x16a>
	uint8_t idx = *ticks_elapsed_index + 1;
   10ece:	3301      	adds	r3, #1
   10ed0:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   10ed2:	2b02      	cmp	r3, #2
		idx = 0U;
   10ed4:	bf08      	it	eq
   10ed6:	4613      	moveq	r3, r2
		ticks_elapsed =
   10ed8:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   10edc:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   10ee0:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   10ee4:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   10ee6:	930b      	str	r3, [sp, #44]	; 0x2c
		instance->ticks_current += ticks_elapsed;
   10ee8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticks_elapsed =
   10eea:	9205      	str	r2, [sp, #20]
		instance->ticks_current += ticks_elapsed;
   10eec:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   10eee:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   10ef2:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   10ef6:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   10efa:	f8db 3000 	ldr.w	r3, [fp]
   10efe:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   10f00:	f8db 3004 	ldr.w	r3, [fp, #4]
   10f04:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   10f06:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   10f08:	9208      	str	r2, [sp, #32]
	while (count_user--) {
   10f0a:	b2db      	uxtb	r3, r3
   10f0c:	2a00      	cmp	r2, #0
   10f0e:	f000 84c0 	beq.w	11892 <ticker_job+0x9ea>
		flag_elapsed = 1U;
   10f12:	2201      	movs	r2, #1
   10f14:	920d      	str	r2, [sp, #52]	; 0x34
   10f16:	9a07      	ldr	r2, [sp, #28]
   10f18:	f8cd b004 	str.w	fp, [sp, #4]
   10f1c:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   10f20:	2300      	movs	r3, #0
   10f22:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   10f24:	23ff      	movs	r3, #255	; 0xff
   10f26:	9304      	str	r3, [sp, #16]
   10f28:	46cb      	mov	fp, r9
		user_ops = &user->user_op[0];
   10f2a:	f8db 8004 	ldr.w	r8, [fp, #4]
		while (user->middle != user->last) {
   10f2e:	f89b c003 	ldrb.w	ip, [fp, #3]
   10f32:	f89b 9002 	ldrb.w	r9, [fp, #2]
   10f36:	45e1      	cmp	r9, ip
   10f38:	d063      	beq.n	11002 <ticker_job+0x15a>
			if (middle == user->count_user_op) {
   10f3a:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
   10f3e:	f109 0301 	add.w	r3, r9, #1
			user_op = &user_ops[user->middle];
   10f42:	fa0f f789 	sxth.w	r7, r9
			middle = user->middle + 1;
   10f46:	b2db      	uxtb	r3, r3
				middle = 0U;
   10f48:	429a      	cmp	r2, r3
   10f4a:	bf08      	it	eq
   10f4c:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   10f4e:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   10f52:	eb07 0782 	add.w	r7, r7, r2, lsl #2
			user->middle = middle;
   10f56:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10f5a:	f818 2027 	ldrb.w	r2, [r8, r7, lsl #2]
   10f5e:	2a04      	cmp	r2, #4
			user_op = &user_ops[user->middle];
   10f60:	eb08 0687 	add.w	r6, r8, r7, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10f64:	d969      	bls.n	1103a <ticker_job+0x192>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   10f66:	2a07      	cmp	r2, #7
   10f68:	d879      	bhi.n	1105e <ticker_job+0x1b6>
			ticker = &node[user_op->id];
   10f6a:	7875      	ldrb	r5, [r6, #1]
   10f6c:	9903      	ldr	r1, [sp, #12]
   10f6e:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   10f72:	eb01 1404 	add.w	r4, r1, r4, lsl #4
   10f76:	b229      	sxth	r1, r5
			state = (ticker->req - ticker->ack) & 0xff;
   10f78:	f894 e002 	ldrb.w	lr, [r4, #2]
			ticker = &node[user_op->id];
   10f7c:	9102      	str	r1, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
   10f7e:	7861      	ldrb	r1, [r4, #1]
   10f80:	eba1 010e 	sub.w	r1, r1, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   10f84:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   10f88:	d069      	beq.n	1105e <ticker_job+0x1b6>
			    (state == 0U) ||
   10f8a:	2a05      	cmp	r2, #5
   10f8c:	d057      	beq.n	1103e <ticker_job+0x196>
			if (state == 1U) {
   10f8e:	2901      	cmp	r1, #1
   10f90:	f040 8170 	bne.w	11274 <ticker_job+0x3cc>
	previous = instance->ticker_id_head;
   10f94:	9901      	ldr	r1, [sp, #4]
   10f96:	7f4b      	ldrb	r3, [r1, #29]
	node = &instance->nodes[0];
   10f98:	f8d1 9000 	ldr.w	r9, [r1]
	while (current != TICKER_NULL) {
   10f9c:	2bff      	cmp	r3, #255	; 0xff
   10f9e:	d016      	beq.n	10fce <ticker_job+0x126>
		ticker_current = &node[current];
   10fa0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		if (current == id) {
   10fa4:	429d      	cmp	r5, r3
		ticker_current = &node[current];
   10fa6:	eb09 1101 	add.w	r1, r9, r1, lsl #4
		if (current == id) {
   10faa:	f000 8260 	beq.w	1146e <ticker_job+0x5c6>
	total = 0U;
   10fae:	f04f 0c00 	mov.w	ip, #0
   10fb2:	e001      	b.n	10fb8 <ticker_job+0x110>
		if (current == id) {
   10fb4:	429d      	cmp	r5, r3
   10fb6:	d061      	beq.n	1107c <ticker_job+0x1d4>
		total += ticker_current->ticks_to_expire;
   10fb8:	4618      	mov	r0, r3
		current = ticker_current->next;
   10fba:	780b      	ldrb	r3, [r1, #0]
		total += ticker_current->ticks_to_expire;
   10fbc:	f8d1 a008 	ldr.w	sl, [r1, #8]
	while (current != TICKER_NULL) {
   10fc0:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   10fc2:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   10fc6:	44d4      	add	ip, sl
		ticker_current = &node[current];
   10fc8:	eb09 1101 	add.w	r1, r9, r1, lsl #4
	while (current != TICKER_NULL) {
   10fcc:	d1f2      	bne.n	10fb4 <ticker_job+0x10c>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10fce:	2300      	movs	r3, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10fd0:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10fd2:	60a3      	str	r3, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10fd4:	f000 8135 	beq.w	11242 <ticker_job+0x39a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   10fd8:	9b01      	ldr	r3, [sp, #4]
		ticker->req = ticker->ack;
   10fda:	f884 e001 	strb.w	lr, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   10fde:	7f1b      	ldrb	r3, [r3, #28]
   10fe0:	42ab      	cmp	r3, r5
   10fe2:	f000 8102 	beq.w	111ea <ticker_job+0x342>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10fe6:	2000      	movs	r0, #0
   10fe8:	f808 0027 	strb.w	r0, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   10fec:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->status = status;
   10fee:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   10ff0:	b10b      	cbz	r3, 10ff6 <ticker_job+0x14e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10ff2:	6b31      	ldr	r1, [r6, #48]	; 0x30
   10ff4:	4798      	blx	r3
		while (user->middle != user->last) {
   10ff6:	f89b c003 	ldrb.w	ip, [fp, #3]
   10ffa:	f89b 9002 	ldrb.w	r9, [fp, #2]
   10ffe:	45e1      	cmp	r9, ip
   11000:	d19b      	bne.n	10f3a <ticker_job+0x92>
	while (count_user--) {
   11002:	9a07      	ldr	r2, [sp, #28]
   11004:	455a      	cmp	r2, fp
   11006:	f1ab 0308 	sub.w	r3, fp, #8
   1100a:	f000 8143 	beq.w	11294 <ticker_job+0x3ec>
   1100e:	469b      	mov	fp, r3
   11010:	e78b      	b.n	10f2a <ticker_job+0x82>
	ticker_id_old_head = instance->ticker_id_head;
   11012:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   11016:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1101a:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->nodes[0];
   1101c:	f8db 3000 	ldr.w	r3, [fp]
   11020:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   11022:	f8db 3004 	ldr.w	r3, [fp, #4]
   11026:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   11028:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   1102a:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   1102c:	b2db      	uxtb	r3, r3
   1102e:	2900      	cmp	r1, #0
   11030:	f000 82f5 	beq.w	1161e <ticker_job+0x776>
		flag_elapsed = 0U;
   11034:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   11036:	9205      	str	r2, [sp, #20]
   11038:	e76d      	b.n	10f16 <ticker_job+0x6e>
   1103a:	4699      	mov	r9, r3
   1103c:	e77b      	b.n	10f36 <ticker_job+0x8e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   1103e:	6870      	ldr	r0, [r6, #4]
   11040:	2800      	cmp	r0, #0
   11042:	d1a4      	bne.n	10f8e <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   11044:	68b0      	ldr	r0, [r6, #8]
   11046:	2800      	cmp	r0, #0
   11048:	d1a1      	bne.n	10f8e <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   1104a:	68f0      	ldr	r0, [r6, #12]
   1104c:	2800      	cmp	r0, #0
   1104e:	d19e      	bne.n	10f8e <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   11050:	6930      	ldr	r0, [r6, #16]
   11052:	2800      	cmp	r0, #0
   11054:	d19b      	bne.n	10f8e <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
   11056:	6970      	ldr	r0, [r6, #20]
   11058:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   1105c:	d197      	bne.n	10f8e <ticker_job+0xe6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1105e:	2200      	movs	r2, #0
   11060:	f808 2027 	strb.w	r2, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   11064:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	user_op->status = status;
   11066:	2001      	movs	r0, #1
   11068:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   1106a:	2a00      	cmp	r2, #0
   1106c:	d0e5      	beq.n	1103a <ticker_job+0x192>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   1106e:	6b31      	ldr	r1, [r6, #48]	; 0x30
   11070:	4790      	blx	r2
		while (user->middle != user->last) {
   11072:	f89b c003 	ldrb.w	ip, [fp, #3]
   11076:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1107a:	e75c      	b.n	10f36 <ticker_job+0x8e>
	if (previous == current) {
   1107c:	4285      	cmp	r5, r0
   1107e:	f000 80c9 	beq.w	11214 <ticker_job+0x36c>
	node[previous].next = ticker_current->next;
   11082:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   11086:	780b      	ldrb	r3, [r1, #0]
   11088:	eb09 1000 	add.w	r0, r9, r0, lsl #4
	timeout = ticker_current->ticks_to_expire;
   1108c:	f8d1 a008 	ldr.w	sl, [r1, #8]
	node[previous].next = ticker_current->next;
   11090:	7003      	strb	r3, [r0, #0]
	if (ticker_current->next != TICKER_NULL) {
   11092:	780b      	ldrb	r3, [r1, #0]
   11094:	2bff      	cmp	r3, #255	; 0xff
   11096:	d008      	beq.n	110aa <ticker_job+0x202>
		node[ticker_current->next].ticks_to_expire += timeout;
   11098:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1109c:	eb09 1903 	add.w	r9, r9, r3, lsl #4
   110a0:	f8d9 3008 	ldr.w	r3, [r9, #8]
   110a4:	4453      	add	r3, sl
   110a6:	f8c9 3008 	str.w	r3, [r9, #8]
	return (total + timeout);
   110aa:	eb0a 090c 	add.w	r9, sl, ip
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   110ae:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   110b0:	f8c4 9008 	str.w	r9, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   110b4:	d190      	bne.n	10fd8 <ticker_job+0x130>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   110b6:	9b01      	ldr	r3, [sp, #4]
   110b8:	695d      	ldr	r5, [r3, #20]
   110ba:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   110bc:	f00b fab6 	bl	1c62c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   110c0:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   110c2:	1b42      	subs	r2, r0, r5
   110c4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   110c8:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   110ca:	4591      	cmp	r9, r2
	ticks_now = cntr_cnt_get();
   110cc:	4682      	mov	sl, r0
	if (ticks_to_expire > ticks_elapsed) {
   110ce:	f240 80c4 	bls.w	1125a <ticker_job+0x3b2>
	ticker->ticks_to_expire_minus +=
   110d2:	6963      	ldr	r3, [r4, #20]
   110d4:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   110d6:	eba9 0202 	sub.w	r2, r9, r2
	if ((ticker->ticks_periodic != 0U) &&
   110da:	6865      	ldr	r5, [r4, #4]
   110dc:	2d00      	cmp	r5, #0
   110de:	d059      	beq.n	11194 <ticker_job+0x2ec>
	    (user_op->params.update.lazy != 0U)) {
   110e0:	f8b6 9014 	ldrh.w	r9, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   110e4:	f1b9 0f00 	cmp.w	r9, #0
   110e8:	d054      	beq.n	11194 <ticker_job+0x2ec>
		user_op->params.update.lazy--;
   110ea:	f109 3eff 	add.w	lr, r9, #4294967295
   110ee:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   110f2:	4295      	cmp	r5, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   110f4:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   110f6:	f8a6 e014 	strh.w	lr, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   110fa:	d223      	bcs.n	11144 <ticker_job+0x29c>
   110fc:	1c69      	adds	r1, r5, #1
   110fe:	f8cd 8020 	str.w	r8, [sp, #32]
   11102:	960c      	str	r6, [sp, #48]	; 0x30
   11104:	468c      	mov	ip, r1
   11106:	e018      	b.n	1113a <ticker_job+0x292>
	if ((ticker->remainder_current >= BIT(31)) ||
   11108:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1110a:	f8df 8160 	ldr.w	r8, [pc, #352]	; 1126c <ticker_job+0x3c4>
   1110e:	4e58      	ldr	r6, [pc, #352]	; (11270 <ticker_job+0x3c8>)
   11110:	4488      	add	r8, r1
   11112:	45b0      	cmp	r8, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   11114:	bf84      	itt	hi
   11116:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   1111a:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   1111e:	4660      	mov	r0, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   11120:	6a26      	ldr	r6, [r4, #32]
   11122:	bf94      	ite	ls
   11124:	4628      	movls	r0, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   11126:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   1112a:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   1112c:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   1112e:	1b89      	subs	r1, r1, r6
			ticker->lazy_current--;
   11130:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11132:	4295      	cmp	r5, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   11134:	6261      	str	r1, [r4, #36]	; 0x24
			ticker->lazy_current--;
   11136:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11138:	d201      	bcs.n	1113e <ticker_job+0x296>
   1113a:	459e      	cmp	lr, r3
   1113c:	d3e4      	bcc.n	11108 <ticker_job+0x260>
   1113e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   11142:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11144:	459e      	cmp	lr, r3
   11146:	d923      	bls.n	11190 <ticker_job+0x2e8>
   11148:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   1114a:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1114c:	e9d4 c108 	ldrd	ip, r1, [r4, #32]
   11150:	b29b      	uxth	r3, r3
			ticks_to_expire += ticker->ticks_periodic +
   11152:	9008      	str	r0, [sp, #32]
   11154:	940c      	str	r4, [sp, #48]	; 0x30
   11156:	e005      	b.n	11164 <ticker_job+0x2bc>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11158:	3301      	adds	r3, #1
   1115a:	b29b      	uxth	r3, r3
   1115c:	4628      	mov	r0, r5
   1115e:	4599      	cmp	r9, r3
			ticks_to_expire += ticker->ticks_periodic +
   11160:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11162:	d011      	beq.n	11188 <ticker_job+0x2e0>
	if ((ticker->remainder_current < BIT(31)) &&
   11164:	4841      	ldr	r0, [pc, #260]	; (1126c <ticker_job+0x3c4>)
   11166:	4c42      	ldr	r4, [pc, #264]	; (11270 <ticker_job+0x3c8>)
	ticker->remainder_current += ticker->remainder_periodic;
   11168:	4461      	add	r1, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1116a:	1808      	adds	r0, r1, r0
   1116c:	42a0      	cmp	r0, r4
   1116e:	d8f3      	bhi.n	11158 <ticker_job+0x2b0>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11170:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   11172:	9808      	ldr	r0, [sp, #32]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11174:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11178:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1117a:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   1117e:	4599      	cmp	r9, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11180:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   11184:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   11186:	d1ed      	bne.n	11164 <ticker_job+0x2bc>
   11188:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   1118a:	6261      	str	r1, [r4, #36]	; 0x24
   1118c:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   11190:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   11194:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   11196:	68b0      	ldr	r0, [r6, #8]
	ticker->ticks_to_expire = ticks_to_expire +
   11198:	440a      	add	r2, r1
   1119a:	60a2      	str	r2, [r4, #8]
	ticker->ticks_to_expire_minus +=
   1119c:	9a06      	ldr	r2, [sp, #24]
   1119e:	4402      	add	r2, r0
   111a0:	6162      	str	r2, [r4, #20]
	struct ticker_ext *ext_data = ticker->ext_data;
   111a2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   111a4:	b11a      	cbz	r2, 111ae <ticker_job+0x306>
   111a6:	6813      	ldr	r3, [r2, #0]
   111a8:	b10b      	cbz	r3, 111ae <ticker_job+0x306>
			user_op->params.update.ticks_drift_plus -
   111aa:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   111ac:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   111ae:	4652      	mov	r2, sl
   111b0:	9902      	ldr	r1, [sp, #8]
   111b2:	4620      	mov	r0, r4
   111b4:	f7ff fbe6 	bl	10984 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   111b8:	68f2      	ldr	r2, [r6, #12]
   111ba:	69a3      	ldr	r3, [r4, #24]
   111bc:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   111be:	6932      	ldr	r2, [r6, #16]
   111c0:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   111c2:	bf8c      	ite	hi
   111c4:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   111c6:	2300      	movls	r3, #0
   111c8:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   111ca:	7db3      	ldrb	r3, [r6, #22]
   111cc:	b103      	cbz	r3, 111d0 <ticker_job+0x328>
		ticker->force = user_op->params.update.force;
   111ce:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   111d0:	7df3      	ldrb	r3, [r6, #23]
   111d2:	b113      	cbz	r3, 111da <ticker_job+0x332>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   111d4:	3b01      	subs	r3, #1
   111d6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   111da:	9b04      	ldr	r3, [sp, #16]
   111dc:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   111de:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   111e0:	7872      	ldrb	r2, [r6, #1]
   111e2:	9204      	str	r2, [sp, #16]
		ticker->req++;
   111e4:	3301      	adds	r3, #1
   111e6:	7063      	strb	r3, [r4, #1]
   111e8:	e6fd      	b.n	10fe6 <ticker_job+0x13e>
			instance->ticker_id_slot_previous = TICKER_NULL;
   111ea:	9901      	ldr	r1, [sp, #4]
   111ec:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   111ee:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   111f0:	770b      	strb	r3, [r1, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   111f2:	d123      	bne.n	1123c <ticker_job+0x394>
				ticks_at_stop =
   111f4:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   111f6:	9b01      	ldr	r3, [sp, #4]
   111f8:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
   111fa:	1ac2      	subs	r2, r0, r3
   111fc:	0214      	lsls	r4, r2, #8
   111fe:	d414      	bmi.n	1122a <ticker_job+0x382>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11200:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   11204:	9a05      	ldr	r2, [sp, #20]
   11206:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   11208:	9901      	ldr	r1, [sp, #4]
   1120a:	698a      	ldr	r2, [r1, #24]
   1120c:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   1120e:	bf88      	it	hi
   11210:	618b      	strhi	r3, [r1, #24]
   11212:	e6e8      	b.n	10fe6 <ticker_job+0x13e>
	node[previous].next = ticker_current->next;
   11214:	9b02      	ldr	r3, [sp, #8]
   11216:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1121a:	eb09 1000 	add.w	r0, r9, r0, lsl #4
		instance->ticker_id_head = ticker_current->next;
   1121e:	f8dd a004 	ldr.w	sl, [sp, #4]
   11222:	780b      	ldrb	r3, [r1, #0]
   11224:	f88a 301d 	strb.w	r3, [sl, #29]
   11228:	e730      	b.n	1108c <ticker_job+0x1e4>
				if (ticks_elapsed > ticks_used) {
   1122a:	9a05      	ldr	r2, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   1122c:	1a1b      	subs	r3, r3, r0
   1122e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   11232:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   11234:	bf34      	ite	cc
   11236:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   11238:	2300      	movcs	r3, #0
   1123a:	e7e5      	b.n	11208 <ticker_job+0x360>
				ticks_at_stop = cntr_cnt_get();
   1123c:	f00b f9f6 	bl	1c62c <cntr_cnt_get>
   11240:	e7d9      	b.n	111f6 <ticker_job+0x34e>
		return 0;
   11242:	4699      	mov	r9, r3
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   11244:	9b01      	ldr	r3, [sp, #4]
   11246:	695d      	ldr	r5, [r3, #20]
   11248:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   1124a:	f00b f9ef 	bl	1c62c <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1124e:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11250:	1b42      	subs	r2, r0, r5
   11252:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   11256:	4682      	mov	sl, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11258:	441a      	add	r2, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1125a:	6963      	ldr	r3, [r4, #20]
   1125c:	441a      	add	r2, r3
   1125e:	eba2 0309 	sub.w	r3, r2, r9
   11262:	9306      	str	r3, [sp, #24]
   11264:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   11266:	2200      	movs	r2, #0
   11268:	e737      	b.n	110da <ticker_job+0x232>
   1126a:	bf00      	nop
   1126c:	ff172b5a 	.word	0xff172b5a
   11270:	7f172b59 	.word	0x7f172b59
				instance->sched_cb(TICKER_CALL_ID_JOB,
   11274:	9b01      	ldr	r3, [sp, #4]
   11276:	2104      	movs	r1, #4
   11278:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   1127a:	2201      	movs	r2, #1
   1127c:	4608      	mov	r0, r1
   1127e:	47a0      	blx	r4
	while (count_user--) {
   11280:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   11282:	f88b 9002 	strb.w	r9, [fp, #2]
				pending = 1U;
   11286:	2301      	movs	r3, #1
	while (count_user--) {
   11288:	455a      	cmp	r2, fp
				pending = 1U;
   1128a:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   1128c:	f1ab 0308 	sub.w	r3, fp, #8
   11290:	f47f aebd 	bne.w	1100e <ticker_job+0x166>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11294:	f8dd b004 	ldr.w	fp, [sp, #4]
		flag_compare_update = 1U;
   11298:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
   1129a:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   1129e:	1a9b      	subs	r3, r3, r2
   112a0:	bf18      	it	ne
   112a2:	2301      	movne	r3, #1
   112a4:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   112a6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   112a8:	2b00      	cmp	r3, #0
   112aa:	f000 81bb 	beq.w	11624 <ticker_job+0x77c>
	ticks_now = cntr_cnt_get();
   112ae:	f00b f9bd 	bl	1c62c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   112b2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	while (instance->ticker_id_head != TICKER_NULL) {
   112b4:	f89b 601d 	ldrb.w	r6, [fp, #29]
	node = &instance->nodes[0];
   112b8:	f8db 9000 	ldr.w	r9, [fp]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   112bc:	1ac3      	subs	r3, r0, r3
   112be:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   112c2:	2eff      	cmp	r6, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   112c4:	9303      	str	r3, [sp, #12]
	while (instance->ticker_id_head != TICKER_NULL) {
   112c6:	d051      	beq.n	1136c <ticker_job+0x4c4>
	ticks_expired = 0U;
   112c8:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   112ca:	f8df 829c 	ldr.w	r8, [pc, #668]	; 11568 <ticker_job+0x6c0>
   112ce:	f8df a29c 	ldr.w	sl, [pc, #668]	; 1156c <ticker_job+0x6c4>
	while (instance->ticker_id_head != TICKER_NULL) {
   112d2:	9f05      	ldr	r7, [sp, #20]
	ticks_expired = 0U;
   112d4:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   112d6:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   112da:	eb09 1403 	add.w	r4, r9, r3, lsl #4
   112de:	011b      	lsls	r3, r3, #4
   112e0:	9301      	str	r3, [sp, #4]
		ticks_to_expire = ticker->ticks_to_expire;
   112e2:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   112e4:	42bb      	cmp	r3, r7
   112e6:	f200 82a6 	bhi.w	11836 <ticker_job+0x98e>
		ticks_expired += ticks_to_expire;
   112ea:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   112ec:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
   112f0:	441a      	add	r2, r3
   112f2:	9202      	str	r2, [sp, #8]
		ticks_latency -= ticks_to_expire;
   112f4:	9a03      	ldr	r2, [sp, #12]
   112f6:	1ad2      	subs	r2, r2, r3
   112f8:	9203      	str	r2, [sp, #12]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   112fa:	f8db 2018 	ldr.w	r2, [fp, #24]
   112fe:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   11300:	eba7 0703 	sub.w	r7, r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11304:	bf25      	ittet	cs
   11306:	f04f 33ff 	movcs.w	r3, #4294967295
   1130a:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   1130e:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   11310:	2300      	movcs	r3, #0
   11312:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   11316:	78a2      	ldrb	r2, [r4, #2]
   11318:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1131a:	69a1      	ldr	r1, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   1131c:	1a9b      	subs	r3, r3, r2
   1131e:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11320:	b111      	cbz	r1, 11328 <ticker_job+0x480>
   11322:	2b02      	cmp	r3, #2
   11324:	f000 81a4 	beq.w	11670 <ticker_job+0x7c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11328:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
   1132a:	2100      	movs	r1, #0
   1132c:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   1132e:	9901      	ldr	r1, [sp, #4]
   11330:	f819 1001 	ldrb.w	r1, [r9, r1]
   11334:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   11338:	6865      	ldr	r5, [r4, #4]
   1133a:	2d00      	cmp	r5, #0
   1133c:	f040 809b 	bne.w	11476 <ticker_job+0x5ce>
   11340:	b118      	cbz	r0, 1134a <ticker_job+0x4a2>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   11342:	7a01      	ldrb	r1, [r0, #8]
   11344:	2901      	cmp	r1, #1
   11346:	f000 809d 	beq.w	11484 <ticker_job+0x5dc>
			if (state && ((state == 1U) || skip_collision) &&
   1134a:	b153      	cbz	r3, 11362 <ticker_job+0x4ba>
   1134c:	2b01      	cmp	r3, #1
   1134e:	d002      	beq.n	11356 <ticker_job+0x4ae>
   11350:	f1be 0f00 	cmp.w	lr, #0
   11354:	d005      	beq.n	11362 <ticker_job+0x4ba>
			    ticker->fp_op_func) {
   11356:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   11358:	b11b      	cbz	r3, 11362 <ticker_job+0x4ba>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   1135a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1135c:	2001      	movs	r0, #1
   1135e:	4798      	blx	r3
			ticker->req = ticker->ack;
   11360:	78a2      	ldrb	r2, [r4, #2]
   11362:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   11364:	f89b 601d 	ldrb.w	r6, [fp, #29]
   11368:	2eff      	cmp	r6, #255	; 0xff
   1136a:	d1b4      	bne.n	112d6 <ticker_job+0x42e>
			flag_compare_update = 1U;
   1136c:	9b08      	ldr	r3, [sp, #32]
   1136e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_job_list_insert(instance, insert_head);
   11370:	9904      	ldr	r1, [sp, #16]
			flag_compare_update = 1U;
   11372:	4296      	cmp	r6, r2
   11374:	bf18      	it	ne
   11376:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   11378:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   1137a:	9308      	str	r3, [sp, #32]
		ticker_job_list_insert(instance, insert_head);
   1137c:	f7ff fb26 	bl	109cc <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   11380:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   11384:	f8db 1000 	ldr.w	r1, [fp]
	while (rescheduling) {
   11388:	e9cd 3b01 	strd	r3, fp, [sp, #4]
	uint8_t  rescheduled = 0U;
   1138c:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   1138e:	9b01      	ldr	r3, [sp, #4]
   11390:	2bff      	cmp	r3, #255	; 0xff
   11392:	d00f      	beq.n	113b4 <ticker_job+0x50c>
   11394:	9f01      	ldr	r7, [sp, #4]
			ticker = &nodes[ticker_id_head];
   11396:	b23b      	sxth	r3, r7
   11398:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   1139c:	eb01 1603 	add.w	r6, r1, r3, lsl #4
   113a0:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   113a2:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   113a4:	b118      	cbz	r0, 113ae <ticker_job+0x506>
   113a6:	7a04      	ldrb	r4, [r0, #8]
   113a8:	2c01      	cmp	r4, #1
   113aa:	f000 8083 	beq.w	114b4 <ticker_job+0x60c>
			ticker_id_head = ticker->next;
   113ae:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
   113b0:	2fff      	cmp	r7, #255	; 0xff
   113b2:	d1f0      	bne.n	11396 <ticker_job+0x4ee>
	return rescheduled;
   113b4:	f8dd b008 	ldr.w	fp, [sp, #8]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   113b8:	2a00      	cmp	r2, #0
   113ba:	f000 813a 	beq.w	11632 <ticker_job+0x78a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   113be:	9b01      	ldr	r3, [sp, #4]
   113c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
   113c2:	428b      	cmp	r3, r1
   113c4:	f000 819b 	beq.w	116fe <ticker_job+0x856>
	if (!pending) {
   113c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   113ca:	2b00      	cmp	r3, #0
   113cc:	f000 81a2 	beq.w	11714 <ticker_job+0x86c>
	if (instance->ticker_id_head == TICKER_NULL) {
   113d0:	f89b 201d 	ldrb.w	r2, [fp, #29]
   113d4:	9201      	str	r2, [sp, #4]
	instance->job_guard = 0U;
   113d6:	2300      	movs	r3, #0
   113d8:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   113dc:	9b01      	ldr	r3, [sp, #4]
   113de:	2bff      	cmp	r3, #255	; 0xff
   113e0:	f000 824b 	beq.w	1187a <ticker_job+0x9d2>
	if (ticker_id_old_head == TICKER_NULL) {
   113e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   113e6:	2bff      	cmp	r3, #255	; 0xff
   113e8:	f000 8258 	beq.w	1189c <ticker_job+0x9f4>
	ticker = &instance->nodes[instance->ticker_id_head];
   113ec:	9a01      	ldr	r2, [sp, #4]
	ticks_to_expire = ticker->ticks_to_expire;
   113ee:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   113f2:	f8df 917c 	ldr.w	r9, [pc, #380]	; 11570 <ticker_job+0x6c8>
   113f6:	f8df 817c 	ldr.w	r8, [pc, #380]	; 11574 <ticker_job+0x6cc>
   113fa:	4f5f      	ldr	r7, [pc, #380]	; (11578 <ticker_job+0x6d0>)
	ticker = &instance->nodes[instance->ticker_id_head];
   113fc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   11400:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   11404:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   11406:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   11408:	f00b f910 	bl	1c62c <cntr_cnt_get>
		cc = instance->ticks_current;
   1140c:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11410:	1b03      	subs	r3, r0, r4
   11412:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   11416:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   11418:	42b3      	cmp	r3, r6
   1141a:	bf2c      	ite	cs
   1141c:	18e4      	addcs	r4, r4, r3
   1141e:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   11420:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   11424:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   11428:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   1142a:	4620      	mov	r0, r4
   1142c:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   1142e:	f00b f8fd 	bl	1c62c <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11432:	eba0 030a 	sub.w	r3, r0, sl
   11436:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1143a:	eba4 020a 	sub.w	r2, r4, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   1143e:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11440:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   11444:	4293      	cmp	r3, r2
		i--;
   11446:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   1144a:	f240 8102 	bls.w	11652 <ticker_job+0x7aa>
		LL_ASSERT(i);
   1144e:	2d00      	cmp	r5, #0
   11450:	d1da      	bne.n	11408 <ticker_job+0x560>
   11452:	f640 03ba 	movw	r3, #2234	; 0x8ba
   11456:	464a      	mov	r2, r9
   11458:	4641      	mov	r1, r8
   1145a:	4638      	mov	r0, r7
   1145c:	f010 fab0 	bl	219c0 <printk>
   11460:	4040      	eors	r0, r0
   11462:	f380 8811 	msr	BASEPRI, r0
   11466:	f04f 0003 	mov.w	r0, #3
   1146a:	df02      	svc	2
   1146c:	e7cc      	b.n	11408 <ticker_job+0x560>
		if (current == id) {
   1146e:	4608      	mov	r0, r1
	total = 0U;
   11470:	f04f 0c00 	mov.w	ip, #0
   11474:	e6d3      	b.n	1121e <ticker_job+0x376>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   11476:	2800      	cmp	r0, #0
   11478:	f000 80a6 	beq.w	115c8 <ticker_job+0x720>
   1147c:	7a03      	ldrb	r3, [r0, #8]
   1147e:	2b01      	cmp	r3, #1
   11480:	f040 80a2 	bne.w	115c8 <ticker_job+0x720>
				ticker->req = ticker->ack;
   11484:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   11486:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   11488:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1148a:	9a02      	ldr	r2, [sp, #8]
   1148c:	f8db 1014 	ldr.w	r1, [fp, #20]
   11490:	189a      	adds	r2, r3, r2
   11492:	4620      	mov	r0, r4
   11494:	f7ff fa76 	bl	10984 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   11498:	9a01      	ldr	r2, [sp, #4]
   1149a:	9b04      	ldr	r3, [sp, #16]
   1149c:	f809 3002 	strb.w	r3, [r9, r2]
			ticker->req++;
   114a0:	7863      	ldrb	r3, [r4, #1]
   114a2:	9604      	str	r6, [sp, #16]
   114a4:	3301      	adds	r3, #1
   114a6:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   114a8:	f89b 601d 	ldrb.w	r6, [fp, #29]
   114ac:	2eff      	cmp	r6, #255	; 0xff
   114ae:	f47f af12 	bne.w	112d6 <ticker_job+0x42e>
   114b2:	e75b      	b.n	1136c <ticker_job+0x4c4>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   114b4:	9b02      	ldr	r3, [sp, #8]
   114b6:	7f1b      	ldrb	r3, [r3, #28]
   114b8:	2bff      	cmp	r3, #255	; 0xff
   114ba:	4686      	mov	lr, r0
   114bc:	d044      	beq.n	11548 <ticker_job+0x6a0>
			instance->ticks_slot_previous > ticks_elapsed) {
   114be:	9b02      	ldr	r3, [sp, #8]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   114c0:	9a05      	ldr	r2, [sp, #20]
			instance->ticks_slot_previous > ticks_elapsed) {
   114c2:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   114c4:	4293      	cmp	r3, r2
   114c6:	d93f      	bls.n	11548 <ticker_job+0x6a0>
			window_start_ticks = instance->ticks_slot_previous -
   114c8:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   114cc:	e9de 2300 	ldrd	r2, r3, [lr]
   114d0:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   114d2:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   114d6:	d23f      	bcs.n	11558 <ticker_job+0x6b0>
		while (ticker_id_iter != TICKER_NULL &&
   114d8:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   114dc:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
   114e0:	d03a      	beq.n	11558 <ticker_job+0x6b0>
		       ticks_start_offset + ticker->ticks_slot <=
   114e2:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
   114e6:	45c1      	cmp	r9, r8
   114e8:	f04f 0300 	mov.w	r3, #0
   114ec:	d337      	bcc.n	1155e <ticker_job+0x6b6>
   114ee:	46c2      	mov	sl, r8
   114f0:	465a      	mov	r2, fp
   114f2:	461d      	mov	r5, r3
   114f4:	e01b      	b.n	1152e <ticker_job+0x686>
			if (node->ticks_to_expire >
   114f6:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
   114f8:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   114fa:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   114fc:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   114fe:	d909      	bls.n	11514 <ticker_job+0x66c>
				window_end_ticks =
   11500:	454b      	cmp	r3, r9
   11502:	bf28      	it	cs
   11504:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
   11506:	459a      	cmp	sl, r3
   11508:	d204      	bcs.n	11514 <ticker_job+0x66c>
			if (ticks_to_expire != 0U &&
   1150a:	ebb3 0308 	subs.w	r3, r3, r8
   1150e:	d001      	beq.n	11514 <ticker_job+0x66c>
   11510:	459c      	cmp	ip, r3
   11512:	d924      	bls.n	1155e <ticker_job+0x6b6>
			window_start_ticks  = node->ticks_to_expire +
   11514:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
   11516:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
   11518:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
   1151c:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
   1151e:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
   11522:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   11524:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
   11528:	d019      	beq.n	1155e <ticker_job+0x6b6>
   1152a:	45d1      	cmp	r9, sl
   1152c:	d317      	bcc.n	1155e <ticker_job+0x6b6>
			node = &nodes[ticker_id_iter];
   1152e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11532:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   11536:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   11538:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1153a:	2800      	cmp	r0, #0
   1153c:	d0db      	beq.n	114f6 <ticker_job+0x64e>
   1153e:	7a00      	ldrb	r0, [r0, #8]
   11540:	2801      	cmp	r0, #1
   11542:	d1d8      	bne.n	114f6 <ticker_job+0x64e>
				ticker_id_iter = node->next;
   11544:	5c8a      	ldrb	r2, [r1, r2]
				continue;
   11546:	e7ec      	b.n	11522 <ticker_job+0x67a>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11548:	e9de 2300 	ldrd	r2, r3, [lr]
   1154c:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   1154e:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
   11552:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11556:	d3bf      	bcc.n	114d8 <ticker_job+0x630>
		ticker->ticks_to_expire = ticks_to_expire;
   11558:	2300      	movs	r3, #0
   1155a:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
   1155c:	e02b      	b.n	115b6 <ticker_job+0x70e>
		ticker->ticks_to_expire = ticks_to_expire;
   1155e:	60b3      	str	r3, [r6, #8]
   11560:	465d      	mov	r5, fp
   11562:	f04f 08ff 	mov.w	r8, #255	; 0xff
   11566:	e00a      	b.n	1157e <ticker_job+0x6d6>
   11568:	ff172b5a 	.word	0xff172b5a
   1156c:	7f172b59 	.word	0x7f172b59
   11570:	00028264 	.word	0x00028264
   11574:	00028368 	.word	0x00028368
   11578:	000282a4 	.word	0x000282a4
   1157c:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   1157e:	b228      	sxth	r0, r5
   11580:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   11584:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
   11588:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   1158a:	f8dc 4008 	ldr.w	r4, [ip, #8]
   1158e:	429c      	cmp	r4, r3
   11590:	f080 80ab 	bcs.w	116ea <ticker_job+0x842>
				ticker->ticks_to_expire -=
   11594:	1b1b      	subs	r3, r3, r4
   11596:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
   11598:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
   1159a:	2aff      	cmp	r2, #255	; 0xff
   1159c:	46a8      	mov	r8, r5
   1159e:	d1ed      	bne.n	1157c <ticker_job+0x6d4>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   115a0:	9a02      	ldr	r2, [sp, #8]
			nodes[ticker_id_prev].next = ticker_id_head;
   115a2:	f8cd b004 	str.w	fp, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   115a6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   115aa:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   115ac:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   115b0:	5cca      	ldrb	r2, [r1, r3]
   115b2:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   115b4:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
   115b6:	8bf3      	ldrh	r3, [r6, #30]
   115b8:	3b01      	subs	r3, #1
   115ba:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
   115bc:	f04f 0302 	mov.w	r3, #2
   115c0:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
   115c4:	2201      	movs	r2, #1
   115c6:	e6e2      	b.n	1138e <ticker_job+0x4e6>
				if (!ticker->lazy_current) {
   115c8:	f1be 0f00 	cmp.w	lr, #0
   115cc:	d15f      	bne.n	1168e <ticker_job+0x7e6>
					lazy_periodic = ticker->lazy_periodic;
   115ce:	8ba3      	ldrh	r3, [r4, #28]
   115d0:	9307      	str	r3, [sp, #28]
   115d2:	461a      	mov	r2, r3
				while (count--) {
   115d4:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   115d6:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   115da:	2100      	movs	r1, #0
   115dc:	9006      	str	r0, [sp, #24]
   115de:	e004      	b.n	115ea <ticker_job+0x742>
   115e0:	4628      	mov	r0, r5
				while (count--) {
   115e2:	3a01      	subs	r2, #1
					ticks_to_expire +=
   115e4:	4401      	add	r1, r0
				while (count--) {
   115e6:	1c50      	adds	r0, r2, #1
   115e8:	d00f      	beq.n	1160a <ticker_job+0x762>
	ticker->remainder_current += ticker->remainder_periodic;
   115ea:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   115ec:	eb03 0008 	add.w	r0, r3, r8
   115f0:	4550      	cmp	r0, sl
   115f2:	d8f5      	bhi.n	115e0 <ticker_job+0x738>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   115f4:	9806      	ldr	r0, [sp, #24]
   115f6:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   115fa:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   115fc:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   11600:	4401      	add	r1, r0
				while (count--) {
   11602:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11604:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   11608:	d1ef      	bne.n	115ea <ticker_job+0x742>
				if (!ticker->must_expire) {
   1160a:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   1160e:	6263      	str	r3, [r4, #36]	; 0x24
   11610:	2a00      	cmp	r2, #0
   11612:	d041      	beq.n	11698 <ticker_job+0x7f0>
				ticker->lazy_current += (lazy_periodic + lazy);
   11614:	9b07      	ldr	r3, [sp, #28]
				ticker->ticks_to_expire = ticks_to_expire;
   11616:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   11618:	4473      	add	r3, lr
   1161a:	83e3      	strh	r3, [r4, #30]
   1161c:	e734      	b.n	11488 <ticker_job+0x5e0>
	insert_head = TICKER_NULL;
   1161e:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   11620:	9109      	str	r1, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   11622:	9304      	str	r3, [sp, #16]
		ticker_job_list_insert(instance, insert_head);
   11624:	9904      	ldr	r1, [sp, #16]
   11626:	4658      	mov	r0, fp
   11628:	f7ff f9d0 	bl	109cc <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   1162c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11630:	9301      	str	r3, [sp, #4]
   11632:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11634:	9a01      	ldr	r2, [sp, #4]
   11636:	4293      	cmp	r3, r2
   11638:	f47f aec6 	bne.w	113c8 <ticker_job+0x520>
	if (!pending) {
   1163c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1163e:	2b00      	cmp	r3, #0
   11640:	f000 80fc 	beq.w	1183c <ticker_job+0x994>
	instance->job_guard = 0U;
   11644:	2300      	movs	r3, #0
   11646:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   1164a:	9b08      	ldr	r3, [sp, #32]
   1164c:	2b00      	cmp	r3, #0
   1164e:	f040 8133 	bne.w	118b8 <ticker_job+0xa10>
	if (instance->worker_trigger) {
   11652:	f89b 301f 	ldrb.w	r3, [fp, #31]
   11656:	2b00      	cmp	r3, #0
   11658:	d059      	beq.n	1170e <ticker_job+0x866>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1165a:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   1165e:	465b      	mov	r3, fp
   11660:	2201      	movs	r2, #1
   11662:	2103      	movs	r1, #3
   11664:	2004      	movs	r0, #4
   11666:	46a4      	mov	ip, r4
}
   11668:	b00f      	add	sp, #60	; 0x3c
   1166a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   1166e:	4760      	bx	ip
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   11670:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11672:	f1be 0f00 	cmp.w	lr, #0
   11676:	f47f ae58 	bne.w	1132a <ticker_job+0x482>
   1167a:	b118      	cbz	r0, 11684 <ticker_job+0x7dc>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1167c:	7a05      	ldrb	r5, [r0, #8]
   1167e:	2d01      	cmp	r5, #1
   11680:	f000 80e6 	beq.w	11850 <ticker_job+0x9a8>
			instance->ticks_slot_previous = ticker->ticks_slot;
   11684:	f8cb 1018 	str.w	r1, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   11688:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1168c:	e64d      	b.n	1132a <ticker_job+0x482>
					ticker->req = ticker->ack;
   1168e:	7062      	strb	r2, [r4, #1]
   11690:	2200      	movs	r2, #0
					lazy_periodic = 0U;
   11692:	9207      	str	r2, [sp, #28]
   11694:	e79e      	b.n	115d4 <ticker_job+0x72c>
   11696:	4770      	bx	lr
					while (ticks_to_expire <
   11698:	9803      	ldr	r0, [sp, #12]
   1169a:	4288      	cmp	r0, r1
   1169c:	d9ba      	bls.n	11614 <ticker_job+0x76c>
   1169e:	1c68      	adds	r0, r5, #1
   116a0:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   116a4:	9006      	str	r0, [sp, #24]
   116a6:	f8dd 900c 	ldr.w	r9, [sp, #12]
   116aa:	e005      	b.n	116b8 <ticker_job+0x810>
   116ac:	4628      	mov	r0, r5
						ticks_to_expire +=
   116ae:	4401      	add	r1, r0
						lazy++;
   116b0:	3201      	adds	r2, #1
					while (ticks_to_expire <
   116b2:	4589      	cmp	r9, r1
						lazy++;
   116b4:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   116b6:	d910      	bls.n	116da <ticker_job+0x832>
	ticker->remainder_current += ticker->remainder_periodic;
   116b8:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   116ba:	eb03 0008 	add.w	r0, r3, r8
   116be:	4550      	cmp	r0, sl
   116c0:	d8f4      	bhi.n	116ac <ticker_job+0x804>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   116c2:	9806      	ldr	r0, [sp, #24]
   116c4:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   116c8:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   116ca:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   116ce:	3201      	adds	r2, #1
					while (ticks_to_expire <
   116d0:	4589      	cmp	r9, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   116d2:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   116d6:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   116d8:	d8ee      	bhi.n	116b8 <ticker_job+0x810>
				ticker->lazy_current += (lazy_periodic + lazy);
   116da:	9807      	ldr	r0, [sp, #28]
   116dc:	6263      	str	r3, [r4, #36]	; 0x24
   116de:	4410      	add	r0, r2
   116e0:	b283      	uxth	r3, r0
   116e2:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   116e6:	9307      	str	r3, [sp, #28]
   116e8:	e794      	b.n	11614 <ticker_job+0x76c>
				node->ticks_to_expire -=
   116ea:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
   116ec:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
   116f0:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   116f4:	f43f af5f 	beq.w	115b6 <ticker_job+0x70e>
   116f8:	fa0f f088 	sxth.w	r0, r8
   116fc:	e750      	b.n	115a0 <ticker_job+0x6f8>
	if (!pending) {
   116fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11700:	2b00      	cmp	r3, #0
   11702:	f000 80b1 	beq.w	11868 <ticker_job+0x9c0>
	instance->job_guard = 0U;
   11706:	2300      	movs	r3, #0
   11708:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   1170c:	e666      	b.n	113dc <ticker_job+0x534>
}
   1170e:	b00f      	add	sp, #60	; 0x3c
   11710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	count_user = instance->count_user;
   11714:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11718:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   1171c:	1e5c      	subs	r4, r3, #1
   1171e:	b2e4      	uxtb	r4, r4
   11720:	2b00      	cmp	r3, #0
   11722:	f43f ae55 	beq.w	113d0 <ticker_job+0x528>
		flag_compare_update = 1U;
   11726:	2301      	movs	r3, #1
   11728:	9308      	str	r3, [sp, #32]
   1172a:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   1172e:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
   11730:	f04f 0a01 	mov.w	sl, #1
   11734:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
   11736:	7863      	ldrb	r3, [r4, #1]
   11738:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
   1173a:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
   1173c:	429a      	cmp	r2, r3
   1173e:	d10c      	bne.n	1175a <ticker_job+0x8b2>
   11740:	e068      	b.n	11814 <ticker_job+0x96c>
	switch (uop->op) {
   11742:	2b01      	cmp	r3, #1
   11744:	d05e      	beq.n	11804 <ticker_job+0x95c>
			first = user->first + 1;
   11746:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   11748:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
   1174a:	3301      	adds	r3, #1
   1174c:	b2db      	uxtb	r3, r3
				first = 0U;
   1174e:	4299      	cmp	r1, r3
   11750:	bf08      	it	eq
   11752:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   11754:	429a      	cmp	r2, r3
			user->first = first;
   11756:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11758:	d05c      	beq.n	11814 <ticker_job+0x96c>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1175a:	b21b      	sxth	r3, r3
   1175c:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11760:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   11764:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
	switch (uop->op) {
   11768:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   1176c:	2b02      	cmp	r3, #2
   1176e:	d01d      	beq.n	117ac <ticker_job+0x904>
   11770:	2b03      	cmp	r3, #3
   11772:	d1e6      	bne.n	11742 <ticker_job+0x89a>
		if (uop->id < instance->count_node) {
   11774:	f89c 3001 	ldrb.w	r3, [ip, #1]
   11778:	f89b 2008 	ldrb.w	r2, [fp, #8]
   1177c:	429a      	cmp	r2, r3
   1177e:	d946      	bls.n	1180e <ticker_job+0x966>
			node[uop->id].priority =
   11780:	f8db 2000 	ldr.w	r2, [fp]
   11784:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11788:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   1178c:	f89c 2004 	ldrb.w	r2, [ip, #4]
   11790:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   11794:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   11798:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (fp_op_func) {
   1179c:	b123      	cbz	r3, 117a8 <ticker_job+0x900>
		fp_op_func(uop->status, uop->op_context);
   1179e:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   117a2:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   117a6:	4798      	blx	r3
   117a8:	78e2      	ldrb	r2, [r4, #3]
   117aa:	e7cc      	b.n	11746 <ticker_job+0x89e>
		ticker_by_next_slot_get(instance,
   117ac:	e9dc e101 	ldrd	lr, r1, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   117b0:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   117b4:	f8dc 800c 	ldr.w	r8, [ip, #12]
	node = instance->nodes;
   117b8:	f8db 0000 	ldr.w	r0, [fp]
	    (*ticks_current != instance->ticks_current)) {
   117bc:	f8db 6014 	ldr.w	r6, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   117c0:	2aff      	cmp	r2, #255	; 0xff
   117c2:	d002      	beq.n	117ca <ticker_job+0x922>
   117c4:	680b      	ldr	r3, [r1, #0]
   117c6:	42b3      	cmp	r3, r6
   117c8:	d02e      	beq.n	11828 <ticker_job+0x980>
		_ticker_id_head = instance->ticker_id_head;
   117ca:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   117ce:	600e      	str	r6, [r1, #0]
		_ticks_to_expire = 0U;
   117d0:	2600      	movs	r6, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   117d2:	2aff      	cmp	r2, #255	; 0xff
   117d4:	bf18      	it	ne
   117d6:	46a1      	movne	r9, r4
   117d8:	d105      	bne.n	117e6 <ticker_job+0x93e>
   117da:	e00f      	b.n	117fc <ticker_job+0x954>
		_ticker_id_head = ticker->next;
   117dc:	5cc2      	ldrb	r2, [r0, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   117de:	6889      	ldr	r1, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   117e0:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   117e2:	440e      	add	r6, r1
	while ((_ticker_id_head != TICKER_NULL) &&
   117e4:	d01e      	beq.n	11824 <ticker_job+0x97c>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   117e6:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   117ea:	eb00 1103 	add.w	r1, r0, r3, lsl #4
   117ee:	011b      	lsls	r3, r3, #4
	while ((_ticker_id_head != TICKER_NULL) &&
   117f0:	698c      	ldr	r4, [r1, #24]
   117f2:	2c00      	cmp	r4, #0
   117f4:	d0f2      	beq.n	117dc <ticker_job+0x934>
		_ticks_to_expire += ticker->ticks_to_expire;
   117f6:	688b      	ldr	r3, [r1, #8]
   117f8:	464c      	mov	r4, r9
   117fa:	441e      	add	r6, r3
	*ticker_id_head = _ticker_id_head;
   117fc:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   11800:	f8c8 6000 	str.w	r6, [r8]
		fp_op_func = uop->fp_op_func;
   11804:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   11808:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		break;
   1180c:	e7c6      	b.n	1179c <ticker_job+0x8f4>
			uop->status = TICKER_STATUS_FAILURE;
   1180e:	f8cc a028 	str.w	sl, [ip, #40]	; 0x28
   11812:	e7c1      	b.n	11798 <ticker_job+0x8f0>
	while (count_user--) {
   11814:	9a01      	ldr	r2, [sp, #4]
   11816:	42a2      	cmp	r2, r4
   11818:	f1a4 0308 	sub.w	r3, r4, #8
   1181c:	f43f af12 	beq.w	11644 <ticker_job+0x79c>
   11820:	461c      	mov	r4, r3
   11822:	e788      	b.n	11736 <ticker_job+0x88e>
   11824:	464c      	mov	r4, r9
   11826:	e7e9      	b.n	117fc <ticker_job+0x954>
		ticker = &node[_ticker_id_head];
   11828:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   1182c:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   1182e:	f8d8 6000 	ldr.w	r6, [r8]
		_ticker_id_head = ticker->next;
   11832:	5cc2      	ldrb	r2, [r0, r3]
   11834:	e7cd      	b.n	117d2 <ticker_job+0x92a>
			ticker->ticks_to_expire -= ticks_elapsed;
   11836:	1bdb      	subs	r3, r3, r7
   11838:	60a3      	str	r3, [r4, #8]
			break;
   1183a:	e597      	b.n	1136c <ticker_job+0x4c4>
	count_user = instance->count_user;
   1183c:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   11840:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11844:	1e5c      	subs	r4, r3, #1
   11846:	b2e4      	uxtb	r4, r4
   11848:	2b00      	cmp	r3, #0
   1184a:	f47f af6e 	bne.w	1172a <ticker_job+0x882>
   1184e:	e6f9      	b.n	11644 <ticker_job+0x79c>
		instance->ticker_id_head = ticker->next;
   11850:	9901      	ldr	r1, [sp, #4]
		ticker->ticks_to_expire = 0U;
   11852:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11856:	f819 1001 	ldrb.w	r1, [r9, r1]
   1185a:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1185e:	6861      	ldr	r1, [r4, #4]
   11860:	2900      	cmp	r1, #0
   11862:	f43f ad6e 	beq.w	11342 <ticker_job+0x49a>
   11866:	e60d      	b.n	11484 <ticker_job+0x5dc>
	count_user = instance->count_user;
   11868:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1186c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11870:	1e5c      	subs	r4, r3, #1
   11872:	b2e4      	uxtb	r4, r4
   11874:	b323      	cbz	r3, 118c0 <ticker_job+0xa18>
			flag_compare_update = 1U;
   11876:	9208      	str	r2, [sp, #32]
   11878:	e757      	b.n	1172a <ticker_job+0x882>
		if (cntr_stop() == 0) {
   1187a:	f00a feb1 	bl	1c5e0 <cntr_stop>
   1187e:	2800      	cmp	r0, #0
   11880:	f47f aee7 	bne.w	11652 <ticker_job+0x7aa>
			instance->ticks_slot_previous = 0U;
   11884:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   11888:	f00a fed0 	bl	1c62c <cntr_cnt_get>
   1188c:	f8cb 0014 	str.w	r0, [fp, #20]
   11890:	e6df      	b.n	11652 <ticker_job+0x7aa>
	pending = 0U;
   11892:	9b08      	ldr	r3, [sp, #32]
   11894:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   11896:	23ff      	movs	r3, #255	; 0xff
   11898:	9304      	str	r3, [sp, #16]
   1189a:	e508      	b.n	112ae <ticker_job+0x406>
		ticks_current = cntr_cnt_get();
   1189c:	f00a fec6 	bl	1c62c <cntr_cnt_get>
   118a0:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   118a2:	f00a fe8d 	bl	1c5c0 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   118a6:	f89b 301d 	ldrb.w	r3, [fp, #29]
   118aa:	9301      	str	r3, [sp, #4]
		if (cntr_start() == 0) {
   118ac:	2800      	cmp	r0, #0
   118ae:	f47f ad9d 	bne.w	113ec <ticker_job+0x544>
			instance->ticks_current = ticks_current;
   118b2:	f8cb 4014 	str.w	r4, [fp, #20]
   118b6:	e599      	b.n	113ec <ticker_job+0x544>
	if (instance->ticker_id_head == TICKER_NULL) {
   118b8:	f89b 301d 	ldrb.w	r3, [fp, #29]
   118bc:	9301      	str	r3, [sp, #4]
   118be:	e58d      	b.n	113dc <ticker_job+0x534>
	instance->job_guard = 0U;
   118c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   118c2:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   118c6:	e589      	b.n	113dc <ticker_job+0x534>

000118c8 <ticker_init>:
{
   118c8:	b4f0      	push	{r4, r5, r6, r7}
   118ca:	9d04      	ldr	r5, [sp, #16]
   118cc:	f89d 7014 	ldrb.w	r7, [sp, #20]
   118d0:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   118d2:	2800      	cmp	r0, #0
   118d4:	d137      	bne.n	11946 <ticker_init+0x7e>
	instance->count_node = count_node;
   118d6:	4e1d      	ldr	r6, [pc, #116]	; (1194c <ticker_init+0x84>)
	while (count_node--) {
   118d8:	f101 3cff 	add.w	ip, r1, #4294967295
	instance->count_node = count_node;
   118dc:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   118de:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   118e0:	fa5f fc8c 	uxtb.w	ip, ip
   118e4:	b149      	cbz	r1, 118fa <ticker_init+0x32>
   118e6:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   118ea:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   118ee:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   118f0:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   118f4:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   118f8:	d1f9      	bne.n	118ee <ticker_init+0x26>
	while (count_user--) {
   118fa:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   118fc:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   118fe:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   11900:	b2d2      	uxtb	r2, r2
   11902:	b183      	cbz	r3, 11926 <ticker_init+0x5e>
   11904:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   11908:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   1190a:	4610      	mov	r0, r2
   1190c:	f812 3908 	ldrb.w	r3, [r2], #-8
   11910:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11914:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   11918:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   1191a:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   1191e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   11922:	b2df      	uxtb	r7, r3
	while (count_user--) {
   11924:	d1f0      	bne.n	11908 <ticker_init+0x40>
	if (count_op) {
   11926:	b977      	cbnz	r7, 11946 <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   11928:	9a07      	ldr	r2, [sp, #28]
   1192a:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   1192c:	9a08      	ldr	r2, [sp, #32]
   1192e:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   11930:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   11934:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11936:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   11938:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   1193a:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1193e:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   11940:	8177      	strh	r7, [r6, #10]
}
   11942:	bcf0      	pop	{r4, r5, r6, r7}
   11944:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   11946:	2001      	movs	r0, #1
}
   11948:	bcf0      	pop	{r4, r5, r6, r7}
   1194a:	4770      	bx	lr
   1194c:	2000d9a8 	.word	0x2000d9a8

00011950 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   11950:	4b04      	ldr	r3, [pc, #16]	; (11964 <ticker_is_initialized+0x14>)
   11952:	222c      	movs	r2, #44	; 0x2c
   11954:	fb02 3300 	mla	r3, r2, r0, r3
   11958:	7a18      	ldrb	r0, [r3, #8]
}
   1195a:	3800      	subs	r0, #0
   1195c:	bf18      	it	ne
   1195e:	2001      	movne	r0, #1
   11960:	4770      	bx	lr
   11962:	bf00      	nop
   11964:	2000d9a8 	.word	0x2000d9a8

00011968 <ticker_trigger>:
	if (instance->sched_cb) {
   11968:	4b0a      	ldr	r3, [pc, #40]	; (11994 <ticker_trigger+0x2c>)
   1196a:	222c      	movs	r2, #44	; 0x2c
   1196c:	fb02 3200 	mla	r2, r2, r0, r3
{
   11970:	b410      	push	{r4}
	if (instance->sched_cb) {
   11972:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11974:	b15c      	cbz	r4, 1198e <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   11976:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1197a:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   1197e:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   11982:	46a4      	mov	ip, r4
   11984:	2201      	movs	r2, #1
}
   11986:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11988:	2103      	movs	r1, #3
   1198a:	2002      	movs	r0, #2
   1198c:	4760      	bx	ip
}
   1198e:	bc10      	pop	{r4}
   11990:	4770      	bx	lr
   11992:	bf00      	nop
   11994:	2000d9a8 	.word	0x2000d9a8

00011998 <ticker_start_ext>:
{
   11998:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   1199c:	4e28      	ldr	r6, [pc, #160]	; (11a40 <ticker_start_ext+0xa8>)
{
   1199e:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   119a2:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   119a4:	252c      	movs	r5, #44	; 0x2c
   119a6:	fb05 6504 	mla	r5, r5, r4, r6
{
   119aa:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   119ac:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   119b0:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   119b4:	6869      	ldr	r1, [r5, #4]
   119b6:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   119ba:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   119be:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   119c2:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   119c6:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   119c8:	f10e 0c01 	add.w	ip, lr, #1
   119cc:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   119d0:	4564      	cmp	r4, ip
   119d2:	bf98      	it	ls
   119d4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   119d8:	4561      	cmp	r1, ip
   119da:	d02e      	beq.n	11a3a <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   119dc:	6879      	ldr	r1, [r7, #4]
   119de:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   119e2:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   119e6:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   119ea:	f04f 0904 	mov.w	r9, #4
   119ee:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   119f2:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   119f4:	9b08      	ldr	r3, [sp, #32]
   119f6:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   119f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
   119fa:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   119fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   119fe:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11a00:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11a02:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   11a04:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11a06:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   11a08:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11a0a:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   11a0c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11a0e:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   11a10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11a12:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   11a14:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11a16:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11a18:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11a1a:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11a1c:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   11a1e:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   11a22:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11a26:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   11a2a:	4798      	blx	r3
   11a2c:	4633      	mov	r3, r6
   11a2e:	4649      	mov	r1, r9
   11a30:	2200      	movs	r2, #0
   11a32:	47a8      	blx	r5
	return user_op->status;
   11a34:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11a36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   11a3a:	2001      	movs	r0, #1
}
   11a3c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11a40:	2000d9a8 	.word	0x2000d9a8

00011a44 <ticker_start>:
{
   11a44:	b510      	push	{r4, lr}
   11a46:	b08a      	sub	sp, #40	; 0x28
   11a48:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a4a:	9400      	str	r4, [sp, #0]
{
   11a4c:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a4e:	9401      	str	r4, [sp, #4]
{
   11a50:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a52:	9402      	str	r4, [sp, #8]
{
   11a54:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a58:	9403      	str	r4, [sp, #12]
{
   11a5a:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a5c:	9404      	str	r4, [sp, #16]
{
   11a5e:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a60:	9405      	str	r4, [sp, #20]
{
   11a62:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a64:	9406      	str	r4, [sp, #24]
{
   11a66:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a68:	9407      	str	r4, [sp, #28]
{
   11a6a:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11a6c:	9408      	str	r4, [sp, #32]
   11a6e:	2400      	movs	r4, #0
   11a70:	9409      	str	r4, [sp, #36]	; 0x24
   11a72:	f7ff ff91 	bl	11998 <ticker_start_ext>
}
   11a76:	b00a      	add	sp, #40	; 0x28
   11a78:	bd10      	pop	{r4, pc}
   11a7a:	bf00      	nop

00011a7c <ticker_update_ext>:
{
   11a7c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11a80:	4d28      	ldr	r5, [pc, #160]	; (11b24 <ticker_update_ext+0xa8>)
{
   11a82:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   11a86:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   11a8a:	4604      	mov	r4, r0
   11a8c:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11a8e:	212c      	movs	r1, #44	; 0x2c
   11a90:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11a94:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   11a98:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   11a9c:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   11aa0:	684c      	ldr	r4, [r1, #4]
   11aa2:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   11aa6:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   11aaa:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11aae:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   11ab0:	f10e 0c01 	add.w	ip, lr, #1
   11ab4:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11ab8:	45e1      	cmp	r9, ip
   11aba:	bf98      	it	ls
   11abc:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11ac0:	4564      	cmp	r4, ip
{
   11ac2:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   11ac6:	d02a      	beq.n	11b1e <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   11ac8:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11acc:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   11ad0:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   11ad4:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   11ad8:	f04f 0b05 	mov.w	fp, #5
   11adc:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   11ae0:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   11ae2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11ae4:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   11ae6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11ae8:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   11aea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11aec:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   11aee:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11af0:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   11af2:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11af4:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11af6:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11af8:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11afa:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   11afc:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   11afe:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   11b02:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   11b06:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11b0a:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11b0e:	4798      	blx	r3
   11b10:	462b      	mov	r3, r5
   11b12:	2200      	movs	r2, #0
   11b14:	2104      	movs	r1, #4
   11b16:	47b0      	blx	r6
	return user_op->status;
   11b18:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11b1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   11b1e:	2001      	movs	r0, #1
}
   11b20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11b24:	2000d9a8 	.word	0x2000d9a8

00011b28 <ticker_update>:
{
   11b28:	b510      	push	{r4, lr}
   11b2a:	b088      	sub	sp, #32
   11b2c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11b2e:	9400      	str	r4, [sp, #0]
{
   11b30:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11b32:	9401      	str	r4, [sp, #4]
{
   11b34:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11b36:	9402      	str	r4, [sp, #8]
{
   11b38:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11b3c:	9403      	str	r4, [sp, #12]
{
   11b3e:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11b42:	9404      	str	r4, [sp, #16]
{
   11b44:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11b46:	9405      	str	r4, [sp, #20]
{
   11b48:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11b4a:	9406      	str	r4, [sp, #24]
   11b4c:	2400      	movs	r4, #0
   11b4e:	9407      	str	r4, [sp, #28]
   11b50:	f7ff ff94 	bl	11a7c <ticker_update_ext>
}
   11b54:	b008      	add	sp, #32
   11b56:	bd10      	pop	{r4, pc}

00011b58 <ticker_stop>:
{
   11b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11b5c:	4c1e      	ldr	r4, [pc, #120]	; (11bd8 <ticker_stop+0x80>)
{
   11b5e:	4684      	mov	ip, r0
   11b60:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11b62:	212c      	movs	r1, #44	; 0x2c
   11b64:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   11b68:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   11b6c:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   11b70:	684d      	ldr	r5, [r1, #4]
   11b72:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   11b76:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   11b7a:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11b7e:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   11b80:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   11b84:	f10e 0c01 	add.w	ip, lr, #1
   11b88:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11b8c:	4567      	cmp	r7, ip
   11b8e:	bf98      	it	ls
   11b90:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11b94:	4565      	cmp	r5, ip
   11b96:	d01c      	beq.n	11bd2 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   11b98:	6877      	ldr	r7, [r6, #4]
   11b9a:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   11b9e:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   11ba2:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   11ba6:	f04f 0806 	mov.w	r8, #6
   11baa:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   11bae:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   11bb0:	9b06      	ldr	r3, [sp, #24]
   11bb2:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11bb4:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11bb6:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11bb8:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   11bba:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11bbe:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11bc2:	4798      	blx	r3
   11bc4:	4623      	mov	r3, r4
   11bc6:	2200      	movs	r2, #0
   11bc8:	2104      	movs	r1, #4
   11bca:	47b0      	blx	r6
	return user_op->status;
   11bcc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   11bce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11bd2:	2001      	movs	r0, #1
}
   11bd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11bd8:	2000d9a8 	.word	0x2000d9a8

00011bdc <ticker_ticks_now_get>:
	return cntr_cnt_get();
   11bdc:	f00a bd26 	b.w	1c62c <cntr_cnt_get>

00011be0 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11be0:	1a40      	subs	r0, r0, r1
}
   11be2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11be6:	4770      	bx	lr

00011be8 <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   11be8:	2801      	cmp	r0, #1
{
   11bea:	b508      	push	{r3, lr}
   11bec:	4603      	mov	r3, r0
	if (addr_type > 1) {
   11bee:	d811      	bhi.n	11c14 <ll_addr_get+0x2c>
		return NULL;
	}

	if (addr_type) {
   11bf0:	4608      	mov	r0, r1
   11bf2:	b943      	cbnz	r3, 11c06 <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   11bf4:	b129      	cbz	r1, 11c02 <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   11bf6:	4909      	ldr	r1, [pc, #36]	; (11c1c <ll_addr_get+0x34>)
   11bf8:	2206      	movs	r2, #6
   11bfa:	f012 fb83 	bl	24304 <memcpy>
	}

	return pub_addr;
   11bfe:	4807      	ldr	r0, [pc, #28]	; (11c1c <ll_addr_get+0x34>)
}
   11c00:	bd08      	pop	{r3, pc}
	return pub_addr;
   11c02:	4806      	ldr	r0, [pc, #24]	; (11c1c <ll_addr_get+0x34>)
}
   11c04:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   11c06:	b139      	cbz	r1, 11c18 <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   11c08:	4905      	ldr	r1, [pc, #20]	; (11c20 <ll_addr_get+0x38>)
   11c0a:	2206      	movs	r2, #6
   11c0c:	f012 fb7a 	bl	24304 <memcpy>
		return rnd_addr;
   11c10:	4803      	ldr	r0, [pc, #12]	; (11c20 <ll_addr_get+0x38>)
}
   11c12:	bd08      	pop	{r3, pc}
		return NULL;
   11c14:	2000      	movs	r0, #0
}
   11c16:	bd08      	pop	{r3, pc}
		return rnd_addr;
   11c18:	4801      	ldr	r0, [pc, #4]	; (11c20 <ll_addr_get+0x38>)
}
   11c1a:	bd08      	pop	{r3, pc}
   11c1c:	2000d9d4 	.word	0x2000d9d4
   11c20:	2000d9dc 	.word	0x2000d9dc

00011c24 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   11c24:	b570      	push	{r4, r5, r6, lr}
   11c26:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   11c28:	2000      	movs	r0, #0
{
   11c2a:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   11c2c:	f003 f8fc 	bl	14e28 <ull_adv_is_enabled>
   11c30:	b978      	cbnz	r0, 11c52 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   11c32:	b13c      	cbz	r4, 11c44 <ll_addr_set+0x20>
   11c34:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11c36:	2206      	movs	r2, #6
   11c38:	4631      	mov	r1, r6
   11c3a:	4807      	ldr	r0, [pc, #28]	; (11c58 <ll_addr_set+0x34>)
   11c3c:	f012 fb62 	bl	24304 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   11c40:	4628      	mov	r0, r5
}
   11c42:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11c44:	2206      	movs	r2, #6
   11c46:	4631      	mov	r1, r6
   11c48:	4804      	ldr	r0, [pc, #16]	; (11c5c <ll_addr_set+0x38>)
   11c4a:	f012 fb5b 	bl	24304 <memcpy>
	return 0;
   11c4e:	4620      	mov	r0, r4
}
   11c50:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   11c52:	200c      	movs	r0, #12
}
   11c54:	bd70      	pop	{r4, r5, r6, pc}
   11c56:	bf00      	nop
   11c58:	2000d9dc 	.word	0x2000d9dc
   11c5c:	2000d9d4 	.word	0x2000d9d4

00011c60 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11c60:	2802      	cmp	r0, #2
   11c62:	d001      	beq.n	11c68 <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11c64:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   11c66:	4770      	bx	lr
{
   11c68:	b538      	push	{r3, r4, r5, lr}
   11c6a:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11c6c:	4608      	mov	r0, r1
   11c6e:	461d      	mov	r5, r3
   11c70:	f003 fea2 	bl	159b8 <ll_connected_get>
			if (!conn) {
   11c74:	b110      	cbz	r0, 11c7c <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   11c76:	2000      	movs	r0, #0
   11c78:	7028      	strb	r0, [r5, #0]
}
   11c7a:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11c7c:	4620      	mov	r0, r4
}
   11c7e:	bd38      	pop	{r3, r4, r5, pc}

00011c80 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   11c80:	2300      	movs	r3, #0
   11c82:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   11c84:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   11c86:	4770      	bx	lr

00011c88 <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   11c88:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   11c8a:	4802      	ldr	r0, [pc, #8]	; (11c94 <hci_driver_init+0xc>)
   11c8c:	f7f8 fb88 	bl	a3a0 <bt_hci_driver_register>

	return 0;
}
   11c90:	2000      	movs	r0, #0
   11c92:	bd08      	pop	{r3, pc}
   11c94:	00028394 	.word	0x00028394

00011c98 <hci_driver_send>:
{
   11c98:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   11c9a:	8983      	ldrh	r3, [r0, #12]
{
   11c9c:	b083      	sub	sp, #12
	if (!buf->len) {
   11c9e:	2b00      	cmp	r3, #0
   11ca0:	d03a      	beq.n	11d18 <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11ca2:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11ca4:	4604      	mov	r4, r0
   11ca6:	b31b      	cbz	r3, 11cf0 <hci_driver_send+0x58>
   11ca8:	2b02      	cmp	r3, #2
   11caa:	d00f      	beq.n	11ccc <hci_driver_send+0x34>
   11cac:	4921      	ldr	r1, [pc, #132]	; (11d34 <hci_driver_send+0x9c>)
   11cae:	4a22      	ldr	r2, [pc, #136]	; (11d38 <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   11cb0:	4822      	ldr	r0, [pc, #136]	; (11d3c <hci_driver_send+0xa4>)
   11cb2:	1a52      	subs	r2, r2, r1
   11cb4:	08d2      	lsrs	r2, r2, #3
   11cb6:	0192      	lsls	r2, r2, #6
   11cb8:	f042 0201 	orr.w	r2, r2, #1
   11cbc:	4619      	mov	r1, r3
   11cbe:	f010 fb22 	bl	22306 <log_1>
		return -EINVAL;
   11cc2:	f06f 0515 	mvn.w	r5, #21
}
   11cc6:	4628      	mov	r0, r5
   11cc8:	b003      	add	sp, #12
   11cca:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   11ccc:	a901      	add	r1, sp, #4
   11cce:	f000 ff3f 	bl	12b50 <hci_acl_handle>
	if (evt) {
   11cd2:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   11cd4:	4605      	mov	r5, r0
	if (evt) {
   11cd6:	b113      	cbz	r3, 11cde <hci_driver_send+0x46>
		bt_recv_prio(evt);
   11cd8:	4618      	mov	r0, r3
   11cda:	f7f8 fb43 	bl	a364 <bt_recv_prio>
	if (!err) {
   11cde:	2d00      	cmp	r5, #0
   11ce0:	d1f1      	bne.n	11cc6 <hci_driver_send+0x2e>
		net_buf_unref(buf);
   11ce2:	4620      	mov	r0, r4
   11ce4:	f00b fc30 	bl	1d548 <net_buf_unref>
   11ce8:	2500      	movs	r5, #0
}
   11cea:	4628      	mov	r0, r5
   11cec:	b003      	add	sp, #12
   11cee:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11cf0:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   11cf2:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11cf4:	f000 fa54 	bl	121a0 <hci_cmd_handle>
	if (evt) {
   11cf8:	2800      	cmp	r0, #0
   11cfa:	d0f2      	beq.n	11ce2 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   11cfc:	f7f8 fb32 	bl	a364 <bt_recv_prio>
		if (node_rx) {
   11d00:	9d01      	ldr	r5, [sp, #4]
   11d02:	2d00      	cmp	r5, #0
   11d04:	d0ed      	beq.n	11ce2 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11d06:	4628      	mov	r0, r5
   11d08:	f001 fb1c 	bl	13344 <hci_get_class>
   11d0c:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   11d0e:	9901      	ldr	r1, [sp, #4]
   11d10:	480b      	ldr	r0, [pc, #44]	; (11d40 <hci_driver_send+0xa8>)
   11d12:	f014 ffe6 	bl	26ce2 <k_queue_append>
	if (!err) {
   11d16:	e7e4      	b.n	11ce2 <hci_driver_send+0x4a>
   11d18:	4b06      	ldr	r3, [pc, #24]	; (11d34 <hci_driver_send+0x9c>)
   11d1a:	4907      	ldr	r1, [pc, #28]	; (11d38 <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   11d1c:	4809      	ldr	r0, [pc, #36]	; (11d44 <hci_driver_send+0xac>)
   11d1e:	1ac9      	subs	r1, r1, r3
   11d20:	08c9      	lsrs	r1, r1, #3
   11d22:	0189      	lsls	r1, r1, #6
   11d24:	f041 0101 	orr.w	r1, r1, #1
   11d28:	f010 fae0 	bl	222ec <log_0>
		return -EINVAL;
   11d2c:	f06f 0515 	mvn.w	r5, #21
   11d30:	e7c9      	b.n	11cc6 <hci_driver_send+0x2e>
   11d32:	bf00      	nop
   11d34:	0002775c 	.word	0x0002775c
   11d38:	000277a4 	.word	0x000277a4
   11d3c:	000282e8 	.word	0x000282e8
   11d40:	2000a038 	.word	0x2000a038
   11d44:	000282d4 	.word	0x000282d4

00011d48 <recv_thread>:
{
   11d48:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   11d4a:	4d37      	ldr	r5, [pc, #220]	; (11e28 <recv_thread+0xe0>)
		LL_ASSERT(0);
   11d4c:	4f37      	ldr	r7, [pc, #220]	; (11e2c <recv_thread+0xe4>)
   11d4e:	4e38      	ldr	r6, [pc, #224]	; (11e30 <recv_thread+0xe8>)
{
   11d50:	b083      	sub	sp, #12
   11d52:	e015      	b.n	11d80 <recv_thread+0x38>
	switch (class) {
   11d54:	2b00      	cmp	r3, #0
   11d56:	d13c      	bne.n	11dd2 <recv_thread+0x8a>
		LL_ASSERT(0);
   11d58:	4836      	ldr	r0, [pc, #216]	; (11e34 <recv_thread+0xec>)
   11d5a:	23cf      	movs	r3, #207	; 0xcf
   11d5c:	463a      	mov	r2, r7
   11d5e:	4631      	mov	r1, r6
   11d60:	f00f fe2e 	bl	219c0 <printk>
   11d64:	4040      	eors	r0, r0
   11d66:	f380 8811 	msr	BASEPRI, r0
   11d6a:	f04f 0003 	mov.w	r0, #3
   11d6e:	df02      	svc	2
	node_rx->hdr.next = NULL;
   11d70:	9b01      	ldr	r3, [sp, #4]
   11d72:	2200      	movs	r2, #0
   11d74:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11d76:	a801      	add	r0, sp, #4
   11d78:	f002 f94c 	bl	14014 <ll_rx_mem_release>
	z_impl_k_yield();
   11d7c:	f00e fa18 	bl	201b0 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   11d80:	f04f 32ff 	mov.w	r2, #4294967295
   11d84:	f04f 33ff 	mov.w	r3, #4294967295
   11d88:	4628      	mov	r0, r5
   11d8a:	f00d fefd 	bl	1fb88 <z_impl_k_queue_get>
		if (node_rx && !buf) {
   11d8e:	2800      	cmp	r0, #0
   11d90:	d0f4      	beq.n	11d7c <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   11d92:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   11d94:	9001      	str	r0, [sp, #4]
	switch (class) {
   11d96:	2b04      	cmp	r3, #4
   11d98:	d9dc      	bls.n	11d54 <recv_thread+0xc>
   11d9a:	2b05      	cmp	r3, #5
   11d9c:	d1dc      	bne.n	11d58 <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   11d9e:	f04f 32ff 	mov.w	r2, #4294967295
   11da2:	f04f 33ff 	mov.w	r3, #4294967295
   11da6:	2003      	movs	r0, #3
   11da8:	f7f6 fcca 	bl	8740 <bt_buf_get_rx>
   11dac:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   11dae:	4621      	mov	r1, r4
   11db0:	9801      	ldr	r0, [sp, #4]
   11db2:	f000 ff8b 	bl	12ccc <hci_acl_encode>
	node_rx->hdr.next = NULL;
   11db6:	9b01      	ldr	r3, [sp, #4]
   11db8:	2200      	movs	r2, #0
   11dba:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11dbc:	a801      	add	r0, sp, #4
   11dbe:	f002 f929 	bl	14014 <ll_rx_mem_release>
		if (buf) {
   11dc2:	2c00      	cmp	r4, #0
   11dc4:	d0da      	beq.n	11d7c <recv_thread+0x34>
			if (buf->len) {
   11dc6:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11dc8:	4620      	mov	r0, r4
			if (buf->len) {
   11dca:	b1db      	cbz	r3, 11e04 <recv_thread+0xbc>
				bt_recv(buf);
   11dcc:	f7f8 fa26 	bl	a21c <bt_recv>
   11dd0:	e7d4      	b.n	11d7c <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   11dd2:	2b02      	cmp	r3, #2
   11dd4:	d019      	beq.n	11e0a <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11dd6:	f04f 32ff 	mov.w	r2, #4294967295
   11dda:	f04f 33ff 	mov.w	r3, #4294967295
   11dde:	2001      	movs	r0, #1
   11de0:	f7f6 fcae 	bl	8740 <bt_buf_get_rx>
   11de4:	4604      	mov	r4, r0
		if (buf) {
   11de6:	b1cc      	cbz	r4, 11e1c <recv_thread+0xd4>
			hci_evt_encode(node_rx, buf);
   11de8:	9801      	ldr	r0, [sp, #4]
   11dea:	4621      	mov	r1, r4
   11dec:	f000 ffa8 	bl	12d40 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   11df0:	9b01      	ldr	r3, [sp, #4]
   11df2:	2200      	movs	r2, #0
   11df4:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11df6:	a801      	add	r0, sp, #4
   11df8:	f002 f90c 	bl	14014 <ll_rx_mem_release>
			if (buf->len) {
   11dfc:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11dfe:	4620      	mov	r0, r4
			if (buf->len) {
   11e00:	2b00      	cmp	r3, #0
   11e02:	d1e3      	bne.n	11dcc <recv_thread+0x84>
				net_buf_unref(buf);
   11e04:	f00b fba0 	bl	1d548 <net_buf_unref>
   11e08:	e7b8      	b.n	11d7c <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   11e0a:	2200      	movs	r2, #0
   11e0c:	2300      	movs	r3, #0
   11e0e:	2101      	movs	r1, #1
   11e10:	2000      	movs	r0, #0
   11e12:	f7f6 fccb 	bl	87ac <bt_buf_get_evt>
   11e16:	4604      	mov	r4, r0
		if (buf) {
   11e18:	2c00      	cmp	r4, #0
   11e1a:	d1e5      	bne.n	11de8 <recv_thread+0xa0>
	node_rx->hdr.next = NULL;
   11e1c:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   11e1e:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   11e20:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11e22:	f002 f8f7 	bl	14014 <ll_rx_mem_release>
		if (buf) {
   11e26:	e7a9      	b.n	11d7c <recv_thread+0x34>
   11e28:	2000a038 	.word	0x2000a038
   11e2c:	000282fc 	.word	0x000282fc
   11e30:	0002833c 	.word	0x0002833c
   11e34:	000282a4 	.word	0x000282a4

00011e38 <prio_recv_thread>:
{
   11e38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   11e3c:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 11ef0 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
   11e40:	4f2c      	ldr	r7, [pc, #176]	; (11ef4 <prio_recv_thread+0xbc>)
{
   11e42:	b082      	sub	sp, #8
   11e44:	e00c      	b.n	11e60 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11e46:	f7f6 fcb1 	bl	87ac <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11e4a:	4622      	mov	r2, r4
   11e4c:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11e50:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11e52:	f001 fa5f 	bl	13314 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   11e56:	4620      	mov	r0, r4
   11e58:	f7f8 fa84 	bl	a364 <bt_recv_prio>
	z_impl_k_yield();
   11e5c:	f00e f9a8 	bl	201b0 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11e60:	f10d 0102 	add.w	r1, sp, #2
   11e64:	a801      	add	r0, sp, #4
   11e66:	f001 ff21 	bl	13cac <ll_rx_get>
   11e6a:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11e6c:	f04f 32ff 	mov.w	r2, #4294967295
   11e70:	f04f 33ff 	mov.w	r3, #4294967295
   11e74:	2100      	movs	r1, #0
   11e76:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11e78:	2c00      	cmp	r4, #0
   11e7a:	d1e4      	bne.n	11e46 <prio_recv_thread+0xe>
		if (node_rx) {
   11e7c:	9b01      	ldr	r3, [sp, #4]
   11e7e:	b193      	cbz	r3, 11ea6 <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   11e80:	f001 fffa 	bl	13e78 <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11e84:	9e01      	ldr	r6, [sp, #4]
   11e86:	4630      	mov	r0, r6
   11e88:	f001 fa5c 	bl	13344 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   11e8c:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11e8e:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   11e90:	796b      	ldrb	r3, [r5, #5]
   11e92:	2b03      	cmp	r3, #3
   11e94:	d102      	bne.n	11e9c <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   11e96:	792b      	ldrb	r3, [r5, #4]
   11e98:	2b14      	cmp	r3, #20
   11e9a:	d00c      	beq.n	11eb6 <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   11e9c:	4629      	mov	r1, r5
   11e9e:	4638      	mov	r0, r7
   11ea0:	f014 ff1f 	bl	26ce2 <k_queue_append>
			continue;
   11ea4:	e7dc      	b.n	11e60 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   11ea6:	f04f 32ff 	mov.w	r2, #4294967295
   11eaa:	f04f 33ff 	mov.w	r3, #4294967295
   11eae:	4640      	mov	r0, r8
   11eb0:	f00e fa4c 	bl	2034c <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11eb4:	e7d4      	b.n	11e60 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11eb6:	f04f 33ff 	mov.w	r3, #4294967295
   11eba:	4621      	mov	r1, r4
   11ebc:	f04f 32ff 	mov.w	r2, #4294967295
   11ec0:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   11ec2:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11ec4:	f7f6 fc72 	bl	87ac <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   11ec8:	4631      	mov	r1, r6
   11eca:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   11ecc:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   11ece:	f105 001c 	add.w	r0, r5, #28
   11ed2:	f000 fed3 	bl	12c7c <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   11ed6:	4630      	mov	r0, r6
   11ed8:	f000 fef0 	bl	12cbc <hci_disconn_complete_process>
				bt_recv_prio(buf);
   11edc:	4620      	mov	r0, r4
			if (buf) {
   11ede:	b124      	cbz	r4, 11eea <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   11ee0:	f7f8 fa40 	bl	a364 <bt_recv_prio>
					net_buf_unref(buf);
   11ee4:	4620      	mov	r0, r4
   11ee6:	f00b fb2f 	bl	1d548 <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   11eea:	9d01      	ldr	r5, [sp, #4]
   11eec:	e7d6      	b.n	11e9c <prio_recv_thread+0x64>
   11eee:	bf00      	nop
   11ef0:	2000a008 	.word	0x2000a008
   11ef4:	2000a038 	.word	0x2000a038

00011ef8 <hci_driver_open>:
{
   11ef8:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   11efa:	4821      	ldr	r0, [pc, #132]	; (11f80 <hci_driver_open+0x88>)
{
   11efc:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   11efe:	f001 fdd1 	bl	13aa4 <ll_init>
	if (err) {
   11f02:	4604      	mov	r4, r0
   11f04:	bb70      	cbnz	r0, 11f64 <hci_driver_open+0x6c>
	hci_init(NULL);
   11f06:	f001 fa33 	bl	13370 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   11f0a:	2600      	movs	r6, #0
   11f0c:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11f0e:	f06f 0209 	mvn.w	r2, #9
   11f12:	e9cd 2403 	strd	r2, r4, [sp, #12]
   11f16:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11f1a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11f1e:	4b19      	ldr	r3, [pc, #100]	; (11f84 <hci_driver_open+0x8c>)
   11f20:	4919      	ldr	r1, [pc, #100]	; (11f88 <hci_driver_open+0x90>)
   11f22:	9400      	str	r4, [sp, #0]
   11f24:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   11f28:	4818      	ldr	r0, [pc, #96]	; (11f8c <hci_driver_open+0x94>)
   11f2a:	f00e fa81 	bl	20430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11f2e:	4918      	ldr	r1, [pc, #96]	; (11f90 <hci_driver_open+0x98>)
   11f30:	4816      	ldr	r0, [pc, #88]	; (11f8c <hci_driver_open+0x94>)
   11f32:	f015 f82e 	bl	26f92 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   11f36:	f06f 0207 	mvn.w	r2, #7
   11f3a:	e9cd 2403 	strd	r2, r4, [sp, #12]
   11f3e:	e9cd 6706 	strd	r6, r7, [sp, #24]
   11f42:	e9cd 4401 	strd	r4, r4, [sp, #4]
   11f46:	4b13      	ldr	r3, [pc, #76]	; (11f94 <hci_driver_open+0x9c>)
   11f48:	4913      	ldr	r1, [pc, #76]	; (11f98 <hci_driver_open+0xa0>)
   11f4a:	9400      	str	r4, [sp, #0]
   11f4c:	f640 0298 	movw	r2, #2200	; 0x898
   11f50:	4812      	ldr	r0, [pc, #72]	; (11f9c <hci_driver_open+0xa4>)
   11f52:	f00e fa6d 	bl	20430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   11f56:	4912      	ldr	r1, [pc, #72]	; (11fa0 <hci_driver_open+0xa8>)
   11f58:	4810      	ldr	r0, [pc, #64]	; (11f9c <hci_driver_open+0xa4>)
   11f5a:	f015 f81a 	bl	26f92 <z_impl_k_thread_name_set>
}
   11f5e:	4620      	mov	r0, r4
   11f60:	b008      	add	sp, #32
   11f62:	bdd0      	pop	{r4, r6, r7, pc}
   11f64:	4b0f      	ldr	r3, [pc, #60]	; (11fa4 <hci_driver_open+0xac>)
   11f66:	4a10      	ldr	r2, [pc, #64]	; (11fa8 <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
   11f68:	4810      	ldr	r0, [pc, #64]	; (11fac <hci_driver_open+0xb4>)
   11f6a:	1ad2      	subs	r2, r2, r3
   11f6c:	08d2      	lsrs	r2, r2, #3
   11f6e:	0192      	lsls	r2, r2, #6
   11f70:	f042 0201 	orr.w	r2, r2, #1
   11f74:	4621      	mov	r1, r4
   11f76:	f010 f9c6 	bl	22306 <log_1>
}
   11f7a:	4620      	mov	r0, r4
   11f7c:	b008      	add	sp, #32
   11f7e:	bdd0      	pop	{r4, r6, r7, pc}
   11f80:	2000a008 	.word	0x2000a008
   11f84:	00011e39 	.word	0x00011e39
   11f88:	20010a20 	.word	0x20010a20
   11f8c:	2000aa40 	.word	0x2000aa40
   11f90:	00028360 	.word	0x00028360
   11f94:	00011d49 	.word	0x00011d49
   11f98:	20010c00 	.word	0x20010c00
   11f9c:	2000aac8 	.word	0x2000aac8
   11fa0:	0002836c 	.word	0x0002836c
   11fa4:	0002775c 	.word	0x0002775c
   11fa8:	000277a4 	.word	0x000277a4
   11fac:	00028340 	.word	0x00028340

00011fb0 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   11fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11fb2:	4c19      	ldr	r4, [pc, #100]	; (12018 <le_remote_feat_complete+0x68>)
   11fb4:	6864      	ldr	r4, [r4, #4]
   11fb6:	00a4      	lsls	r4, r4, #2
   11fb8:	d504      	bpl.n	11fc4 <le_remote_feat_complete+0x14>
   11fba:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   11fbc:	4a17      	ldr	r2, [pc, #92]	; (1201c <le_remote_feat_complete+0x6c>)
   11fbe:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   11fc0:	0712      	lsls	r2, r2, #28
   11fc2:	d400      	bmi.n	11fc6 <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   11fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11fc6:	f103 0408 	add.w	r4, r3, #8
   11fca:	4607      	mov	r7, r0
   11fcc:	460e      	mov	r6, r1
   11fce:	4620      	mov	r0, r4
   11fd0:	2102      	movs	r1, #2
   11fd2:	f014 f9eb 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   11fd6:	233e      	movs	r3, #62	; 0x3e
   11fd8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   11fda:	230c      	movs	r3, #12
   11fdc:	7043      	strb	r3, [r0, #1]
   11fde:	2101      	movs	r1, #1
   11fe0:	4620      	mov	r0, r4
   11fe2:	f014 f9e3 	bl	263ac <net_buf_simple_add>
   11fe6:	4603      	mov	r3, r0
	me->subevent = subevt;
   11fe8:	2204      	movs	r2, #4
   11fea:	701a      	strb	r2, [r3, #0]
   11fec:	4620      	mov	r0, r4
   11fee:	210b      	movs	r1, #11
   11ff0:	f014 f9dc 	bl	263ac <net_buf_simple_add>
		memcpy(&sep->features[0],
   11ff4:	2208      	movs	r2, #8
	sep->status = status;
   11ff6:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   11ff8:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   11ffc:	b92f      	cbnz	r7, 1200a <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   11ffe:	1d31      	adds	r1, r6, #4
   12000:	3003      	adds	r0, #3
}
   12002:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   12006:	f012 b97d 	b.w	24304 <memcpy>
}
   1200a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   1200e:	2100      	movs	r1, #0
   12010:	3003      	adds	r0, #3
   12012:	f012 b9a2 	b.w	2435a <memset>
   12016:	bf00      	nop
   12018:	200001a8 	.word	0x200001a8
   1201c:	200001b0 	.word	0x200001b0

00012020 <hci_vendor_cmd_handle_common>:
{
   12020:	b5f0      	push	{r4, r5, r6, r7, lr}
   12022:	3801      	subs	r0, #1
   12024:	b087      	sub	sp, #28
   12026:	4615      	mov	r5, r2
   12028:	2809      	cmp	r0, #9
   1202a:	d806      	bhi.n	1203a <hci_vendor_cmd_handle_common+0x1a>
   1202c:	e8df f000 	tbb	[pc, r0]
   12030:	05432609 	.word	0x05432609
   12034:	6b055705 	.word	0x6b055705
   12038:	9f8a      	.short	0x9f8a
	return 0;
   1203a:	f06f 0015 	mvn.w	r0, #21
}
   1203e:	b007      	add	sp, #28
   12040:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12042:	4b55      	ldr	r3, [pc, #340]	; (12198 <hci_vendor_cmd_handle_common+0x178>)
   12044:	210d      	movs	r1, #13
   12046:	8818      	ldrh	r0, [r3, #0]
   12048:	f012 fc9f 	bl	2498a <bt_hci_cmd_complete_create>
   1204c:	210d      	movs	r1, #13
   1204e:	6028      	str	r0, [r5, #0]
   12050:	3008      	adds	r0, #8
   12052:	f014 f9ab 	bl	263ac <net_buf_simple_add>
   12056:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12058:	2202      	movs	r2, #2
	rp->status = 0x00;
   1205a:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1205c:	2105      	movs	r1, #5
	rp->status = 0x00;
   1205e:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   12060:	705a      	strb	r2, [r3, #1]
   12062:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   12064:	70da      	strb	r2, [r3, #3]
   12066:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   12068:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   1206a:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   1206c:	71d9      	strb	r1, [r3, #7]
   1206e:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   12070:	7258      	strb	r0, [r3, #9]
   12072:	7298      	strb	r0, [r3, #10]
   12074:	72d8      	strb	r0, [r3, #11]
   12076:	7318      	strb	r0, [r3, #12]
}
   12078:	b007      	add	sp, #28
   1207a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1207c:	4b46      	ldr	r3, [pc, #280]	; (12198 <hci_vendor_cmd_handle_common+0x178>)
   1207e:	2141      	movs	r1, #65	; 0x41
   12080:	8818      	ldrh	r0, [r3, #0]
   12082:	f012 fc82 	bl	2498a <bt_hci_cmd_complete_create>
   12086:	2141      	movs	r1, #65	; 0x41
   12088:	6028      	str	r0, [r5, #0]
   1208a:	3008      	adds	r0, #8
   1208c:	f014 f98e 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   12090:	2400      	movs	r4, #0
   12092:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12094:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   12096:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1209a:	4621      	mov	r1, r4
   1209c:	f012 f95d 	bl	2435a <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   120a0:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   120a2:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   120a4:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   120a8:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   120ac:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   120ae:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   120b0:	70ab      	strb	r3, [r5, #2]
}
   120b2:	b007      	add	sp, #28
   120b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   120b6:	4b38      	ldr	r3, [pc, #224]	; (12198 <hci_vendor_cmd_handle_common+0x178>)
   120b8:	2109      	movs	r1, #9
   120ba:	8818      	ldrh	r0, [r3, #0]
   120bc:	f012 fc65 	bl	2498a <bt_hci_cmd_complete_create>
   120c0:	2109      	movs	r1, #9
   120c2:	6028      	str	r0, [r5, #0]
   120c4:	3008      	adds	r0, #8
   120c6:	f014 f971 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   120ca:	2400      	movs	r4, #0
   120cc:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   120d0:	2208      	movs	r2, #8
   120d2:	4621      	mov	r1, r4
   120d4:	f012 f941 	bl	2435a <memset>
	return 0;
   120d8:	4620      	mov	r0, r4
}
   120da:	b007      	add	sp, #28
   120dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   120de:	6889      	ldr	r1, [r1, #8]
   120e0:	2000      	movs	r0, #0
   120e2:	f7ff fd9f 	bl	11c24 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   120e6:	4b2c      	ldr	r3, [pc, #176]	; (12198 <hci_vendor_cmd_handle_common+0x178>)
   120e8:	2101      	movs	r1, #1
   120ea:	8818      	ldrh	r0, [r3, #0]
   120ec:	f012 fc4d 	bl	2498a <bt_hci_cmd_complete_create>
   120f0:	2101      	movs	r1, #1
   120f2:	4604      	mov	r4, r0
   120f4:	3008      	adds	r0, #8
   120f6:	f014 f959 	bl	263ac <net_buf_simple_add>
   120fa:	4603      	mov	r3, r0
	ccst->status = status;
   120fc:	2000      	movs	r0, #0
   120fe:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   12100:	602c      	str	r4, [r5, #0]
}
   12102:	b007      	add	sp, #28
   12104:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   12106:	4e25      	ldr	r6, [pc, #148]	; (1219c <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12108:	4f23      	ldr	r7, [pc, #140]	; (12198 <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   1210a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1210c:	46ec      	mov	ip, sp
   1210e:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12112:	e896 0003 	ldmia.w	r6, {r0, r1}
   12116:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1211a:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   1211c:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12120:	2116      	movs	r1, #22
   12122:	f012 fc32 	bl	2498a <bt_hci_cmd_complete_create>
   12126:	2116      	movs	r1, #22
   12128:	6028      	str	r0, [r5, #0]
   1212a:	3008      	adds	r0, #8
   1212c:	f014 f93e 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   12130:	2400      	movs	r4, #0
   12132:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   12136:	2215      	movs	r2, #21
   12138:	4669      	mov	r1, sp
   1213a:	f012 f8e3 	bl	24304 <memcpy>
	return 0;
   1213e:	4620      	mov	r0, r4
}
   12140:	b007      	add	sp, #28
   12142:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12144:	4b14      	ldr	r3, [pc, #80]	; (12198 <hci_vendor_cmd_handle_common+0x178>)
   12146:	2118      	movs	r1, #24
   12148:	8818      	ldrh	r0, [r3, #0]
   1214a:	f012 fc1e 	bl	2498a <bt_hci_cmd_complete_create>
   1214e:	2118      	movs	r1, #24
   12150:	6028      	str	r0, [r5, #0]
   12152:	3008      	adds	r0, #8
   12154:	f014 f92a 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   12158:	2400      	movs	r4, #0
   1215a:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   1215c:	2101      	movs	r1, #1
	rp->status = 0x00;
   1215e:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   12162:	f00b f877 	bl	1d254 <hci_vendor_read_static_addr>
   12166:	7068      	strb	r0, [r5, #1]
	return 0;
   12168:	4620      	mov	r0, r4
}
   1216a:	b007      	add	sp, #28
   1216c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1216e:	4b0a      	ldr	r3, [pc, #40]	; (12198 <hci_vendor_cmd_handle_common+0x178>)
   12170:	2121      	movs	r1, #33	; 0x21
   12172:	8818      	ldrh	r0, [r3, #0]
   12174:	f012 fc09 	bl	2498a <bt_hci_cmd_complete_create>
   12178:	2121      	movs	r1, #33	; 0x21
   1217a:	6028      	str	r0, [r5, #0]
   1217c:	3008      	adds	r0, #8
   1217e:	f014 f915 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   12182:	4601      	mov	r1, r0
   12184:	2400      	movs	r4, #0
   12186:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   1218a:	3001      	adds	r0, #1
   1218c:	f00b f8d6 	bl	1d33c <hci_vendor_read_key_hierarchy_roots>
	return 0;
   12190:	4620      	mov	r0, r4
}
   12192:	b007      	add	sp, #28
   12194:	bdf0      	pop	{r4, r5, r6, r7, pc}
   12196:	bf00      	nop
   12198:	2000ed6c 	.word	0x2000ed6c
   1219c:	000283a8 	.word	0x000283a8

000121a0 <hci_cmd_handle>:
{
   121a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   121a2:	8983      	ldrh	r3, [r0, #12]
{
   121a4:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   121a6:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   121a8:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   121aa:	9407      	str	r4, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   121ac:	f240 811c 	bls.w	123e8 <hci_cmd_handle+0x248>
	return net_buf_simple_pull_mem(&buf->b, len);
   121b0:	4605      	mov	r5, r0
   121b2:	2103      	movs	r1, #3
   121b4:	3008      	adds	r0, #8
   121b6:	f014 f920 	bl	263fa <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   121ba:	89aa      	ldrh	r2, [r5, #12]
   121bc:	7883      	ldrb	r3, [r0, #2]
   121be:	429a      	cmp	r2, r3
   121c0:	f0c0 8150 	bcc.w	12464 <hci_cmd_handle+0x2c4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   121c4:	8802      	ldrh	r2, [r0, #0]
   121c6:	4ebc      	ldr	r6, [pc, #752]	; (124b8 <hci_cmd_handle+0x318>)
	switch (BT_OGF(_opcode)) {
   121c8:	f3c2 2385 	ubfx	r3, r2, #10, #6
   121cc:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   121ce:	8032      	strh	r2, [r6, #0]
   121d0:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   121d2:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   121d6:	d809      	bhi.n	121ec <hci_cmd_handle+0x4c>
   121d8:	b1a3      	cbz	r3, 12204 <hci_cmd_handle+0x64>
   121da:	3b01      	subs	r3, #1
   121dc:	2b07      	cmp	r3, #7
   121de:	d811      	bhi.n	12204 <hci_cmd_handle+0x64>
   121e0:	e8df f003 	tbb	[pc, r3]
   121e4:	e9c81017 	.word	0xe9c81017
   121e8:	26101010 	.word	0x26101010
   121ec:	2b3f      	cmp	r3, #63	; 0x3f
   121ee:	d109      	bne.n	12204 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   121f0:	4629      	mov	r1, r5
   121f2:	aa07      	add	r2, sp, #28
   121f4:	4620      	mov	r0, r4
   121f6:	f7ff ff13 	bl	12020 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   121fa:	3016      	adds	r0, #22
	return evt;
   121fc:	bf18      	it	ne
   121fe:	9d07      	ldrne	r5, [sp, #28]
	if (err == -EINVAL) {
   12200:	d104      	bne.n	1220c <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12202:	8830      	ldrh	r0, [r6, #0]
   12204:	2101      	movs	r1, #1
   12206:	f012 fbd2 	bl	249ae <bt_hci_cmd_status_create>
   1220a:	4605      	mov	r5, r0
}
   1220c:	4628      	mov	r0, r5
   1220e:	b00d      	add	sp, #52	; 0x34
   12210:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12212:	2c06      	cmp	r4, #6
   12214:	f000 8437 	beq.w	12a86 <hci_cmd_handle+0x8e6>
   12218:	2c1d      	cmp	r4, #29
   1221a:	d1f3      	bne.n	12204 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   1221c:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   1221e:	8818      	ldrh	r0, [r3, #0]
   12220:	f003 fd50 	bl	15cc4 <ll_version_ind_send>
   12224:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12226:	8830      	ldrh	r0, [r6, #0]
   12228:	f012 fbc1 	bl	249ae <bt_hci_cmd_status_create>
   1222c:	4605      	mov	r5, r0
}
   1222e:	e7ed      	b.n	1220c <hci_cmd_handle+0x6c>
	switch (ocf) {
   12230:	1e62      	subs	r2, r4, #1
   12232:	2a4d      	cmp	r2, #77	; 0x4d
   12234:	d8e6      	bhi.n	12204 <hci_cmd_handle+0x64>
   12236:	a301      	add	r3, pc, #4	; (adr r3, 1223c <hci_cmd_handle+0x9c>)
   12238:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   1223c:	000127bf 	.word	0x000127bf
   12240:	00012821 	.word	0x00012821
   12244:	000127f1 	.word	0x000127f1
   12248:	00012205 	.word	0x00012205
   1224c:	000127e7 	.word	0x000127e7
   12250:	000127cb 	.word	0x000127cb
   12254:	0001289f 	.word	0x0001289f
   12258:	00012893 	.word	0x00012893
   1225c:	00012887 	.word	0x00012887
   12260:	0001287d 	.word	0x0001287d
   12264:	00012205 	.word	0x00012205
   12268:	00012205 	.word	0x00012205
   1226c:	00012205 	.word	0x00012205
   12270:	00012205 	.word	0x00012205
   12274:	0001285b 	.word	0x0001285b
   12278:	00012855 	.word	0x00012855
   1227c:	0001284d 	.word	0x0001284d
   12280:	00012845 	.word	0x00012845
   12284:	00012a5f 	.word	0x00012a5f
   12288:	00012205 	.word	0x00012205
   1228c:	00012a33 	.word	0x00012a33
   12290:	00012a1d 	.word	0x00012a1d
   12294:	000129e7 	.word	0x000129e7
   12298:	000129c5 	.word	0x000129c5
   1229c:	00012205 	.word	0x00012205
   122a0:	000129bb 	.word	0x000129bb
   122a4:	000129ab 	.word	0x000129ab
   122a8:	00012975 	.word	0x00012975
   122ac:	00012205 	.word	0x00012205
   122b0:	00012205 	.word	0x00012205
   122b4:	00012205 	.word	0x00012205
   122b8:	0001295f 	.word	0x0001295f
   122bc:	00012929 	.word	0x00012929
   122c0:	00012919 	.word	0x00012919
   122c4:	000128e3 	.word	0x000128e3
   122c8:	000128d7 	.word	0x000128d7
   122cc:	00012205 	.word	0x00012205
   122d0:	00012205 	.word	0x00012205
   122d4:	000128c9 	.word	0x000128c9
   122d8:	000128c1 	.word	0x000128c1
   122dc:	000128bb 	.word	0x000128bb
   122e0:	00012743 	.word	0x00012743
   122e4:	00012715 	.word	0x00012715
   122e8:	000126e7 	.word	0x000126e7
   122ec:	000126dd 	.word	0x000126dd
   122f0:	000127b1 	.word	0x000127b1
   122f4:	00012765 	.word	0x00012765
   122f8:	00012683 	.word	0x00012683
   122fc:	00012665 	.word	0x00012665
   12300:	00012609 	.word	0x00012609
   12304:	00012205 	.word	0x00012205
   12308:	00012205 	.word	0x00012205
   1230c:	00012205 	.word	0x00012205
   12310:	00012205 	.word	0x00012205
   12314:	00012205 	.word	0x00012205
   12318:	00012205 	.word	0x00012205
   1231c:	00012205 	.word	0x00012205
   12320:	00012205 	.word	0x00012205
   12324:	00012205 	.word	0x00012205
   12328:	00012205 	.word	0x00012205
   1232c:	00012205 	.word	0x00012205
   12330:	00012205 	.word	0x00012205
   12334:	00012205 	.word	0x00012205
   12338:	00012205 	.word	0x00012205
   1233c:	00012205 	.word	0x00012205
   12340:	00012205 	.word	0x00012205
   12344:	00012205 	.word	0x00012205
   12348:	00012205 	.word	0x00012205
   1234c:	00012205 	.word	0x00012205
   12350:	00012205 	.word	0x00012205
   12354:	00012205 	.word	0x00012205
   12358:	00012205 	.word	0x00012205
   1235c:	00012205 	.word	0x00012205
   12360:	00012205 	.word	0x00012205
   12364:	000125e5 	.word	0x000125e5
   12368:	00012205 	.word	0x00012205
   1236c:	00012205 	.word	0x00012205
   12370:	000125c3 	.word	0x000125c3
	switch (ocf) {
   12374:	2c63      	cmp	r4, #99	; 0x63
   12376:	f000 8392 	beq.w	12a9e <hci_cmd_handle+0x8fe>
   1237a:	d857      	bhi.n	1242c <hci_cmd_handle+0x28c>
   1237c:	2c03      	cmp	r4, #3
   1237e:	f000 8395 	beq.w	12aac <hci_cmd_handle+0x90c>
   12382:	2c2d      	cmp	r4, #45	; 0x2d
   12384:	d13e      	bne.n	12404 <hci_cmd_handle+0x264>
		read_tx_power_level(cmd, evt);
   12386:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12388:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1238a:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   1238c:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1238e:	f012 fafc 	bl	2498a <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   12392:	2104      	movs	r1, #4
   12394:	9007      	str	r0, [sp, #28]
   12396:	3008      	adds	r0, #8
   12398:	f014 f808 	bl	263ac <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   1239c:	b2b5      	uxth	r5, r6
   1239e:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   123a0:	1cc3      	adds	r3, r0, #3
   123a2:	4629      	mov	r1, r5
   123a4:	463a      	mov	r2, r7
   123a6:	2002      	movs	r0, #2
   123a8:	f7ff fc5a 	bl	11c60 <ll_tx_pwr_lvl_get>
	rp->status = status;
   123ac:	7020      	strb	r0, [r4, #0]
	return evt;
   123ae:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   123b0:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   123b4:	e72a      	b.n	1220c <hci_cmd_handle+0x6c>
	switch (ocf) {
   123b6:	1e62      	subs	r2, r4, #1
   123b8:	2a08      	cmp	r2, #8
   123ba:	f63f af23 	bhi.w	12204 <hci_cmd_handle+0x64>
   123be:	a301      	add	r3, pc, #4	; (adr r3, 123c4 <hci_cmd_handle+0x224>)
   123c0:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   123c4:	0001258d 	.word	0x0001258d
   123c8:	000124d1 	.word	0x000124d1
   123cc:	0001248f 	.word	0x0001248f
   123d0:	00012205 	.word	0x00012205
   123d4:	00012205 	.word	0x00012205
   123d8:	00012205 	.word	0x00012205
   123dc:	00012205 	.word	0x00012205
   123e0:	00012205 	.word	0x00012205
   123e4:	0001246d 	.word	0x0001246d
   123e8:	4934      	ldr	r1, [pc, #208]	; (124bc <hci_cmd_handle+0x31c>)
   123ea:	4b35      	ldr	r3, [pc, #212]	; (124c0 <hci_cmd_handle+0x320>)
		BT_ERR("No HCI Command header");
   123ec:	4835      	ldr	r0, [pc, #212]	; (124c4 <hci_cmd_handle+0x324>)
   123ee:	1ac9      	subs	r1, r1, r3
   123f0:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   123f2:	0189      	lsls	r1, r1, #6
   123f4:	f041 0101 	orr.w	r1, r1, #1
   123f8:	f00f ff78 	bl	222ec <log_0>
		return NULL;
   123fc:	4625      	mov	r5, r4
}
   123fe:	4628      	mov	r0, r5
   12400:	b00d      	add	sp, #52	; 0x34
   12402:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12404:	2c01      	cmp	r4, #1
   12406:	f47f aefd 	bne.w	12204 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1240a:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   1240c:	4b2e      	ldr	r3, [pc, #184]	; (124c8 <hci_cmd_handle+0x328>)
   1240e:	6811      	ldr	r1, [r2, #0]
   12410:	6852      	ldr	r2, [r2, #4]
   12412:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12414:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12416:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12418:	f012 fab7 	bl	2498a <bt_hci_cmd_complete_create>
   1241c:	2101      	movs	r1, #1
   1241e:	4605      	mov	r5, r0
   12420:	3008      	adds	r0, #8
   12422:	f013 ffc3 	bl	263ac <net_buf_simple_add>
	ccst->status = status;
   12426:	2300      	movs	r3, #0
   12428:	7003      	strb	r3, [r0, #0]
}
   1242a:	e6ef      	b.n	1220c <hci_cmd_handle+0x6c>
	switch (ocf) {
   1242c:	2c7b      	cmp	r4, #123	; 0x7b
   1242e:	f000 835f 	beq.w	12af0 <hci_cmd_handle+0x950>
   12432:	2c7c      	cmp	r4, #124	; 0x7c
   12434:	f47f aee6 	bne.w	12204 <hci_cmd_handle+0x64>
		write_auth_payload_timeout(cmd, evt);
   12438:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1243a:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   1243c:	8859      	ldrh	r1, [r3, #2]
   1243e:	b2b8      	uxth	r0, r7
   12440:	f003 fd7a 	bl	15f38 <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12444:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12446:	2103      	movs	r1, #3
   12448:	8830      	ldrh	r0, [r6, #0]
   1244a:	f012 fa9e 	bl	2498a <bt_hci_cmd_complete_create>
   1244e:	2103      	movs	r1, #3
   12450:	4603      	mov	r3, r0
   12452:	3008      	adds	r0, #8
   12454:	9307      	str	r3, [sp, #28]
   12456:	f013 ffa9 	bl	263ac <net_buf_simple_add>
	rp->status = status;
   1245a:	7004      	strb	r4, [r0, #0]
	return evt;
   1245c:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   1245e:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   12462:	e6d3      	b.n	1220c <hci_cmd_handle+0x6c>
   12464:	4915      	ldr	r1, [pc, #84]	; (124bc <hci_cmd_handle+0x31c>)
   12466:	4b16      	ldr	r3, [pc, #88]	; (124c0 <hci_cmd_handle+0x320>)
		BT_ERR("Invalid HCI CMD packet length");
   12468:	4818      	ldr	r0, [pc, #96]	; (124cc <hci_cmd_handle+0x32c>)
   1246a:	e7c0      	b.n	123ee <hci_cmd_handle+0x24e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1246c:	2107      	movs	r1, #7
   1246e:	f012 fa8c 	bl	2498a <bt_hci_cmd_complete_create>
   12472:	2107      	movs	r1, #7
   12474:	4603      	mov	r3, r0
   12476:	3008      	adds	r0, #8
   12478:	9307      	str	r3, [sp, #28]
   1247a:	f013 ff97 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   1247e:	4601      	mov	r1, r0
   12480:	2000      	movs	r0, #0
   12482:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   12486:	f7ff fbaf 	bl	11be8 <ll_addr_get>
	return evt;
   1248a:	9d07      	ldr	r5, [sp, #28]
   1248c:	e6be      	b.n	1220c <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1248e:	2109      	movs	r1, #9
   12490:	f012 fa7b 	bl	2498a <bt_hci_cmd_complete_create>
   12494:	2109      	movs	r1, #9
   12496:	4603      	mov	r3, r0
   12498:	3008      	adds	r0, #8
   1249a:	9307      	str	r3, [sp, #28]
   1249c:	f013 ff86 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   124a0:	2100      	movs	r1, #0
   124a2:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   124a4:	2208      	movs	r2, #8
	rp->status = 0x00;
   124a6:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   124aa:	f011 ff56 	bl	2435a <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   124ae:	2360      	movs	r3, #96	; 0x60
	return evt;
   124b0:	9d07      	ldr	r5, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   124b2:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   124b4:	e6aa      	b.n	1220c <hci_cmd_handle+0x6c>
   124b6:	bf00      	nop
   124b8:	2000ed6c 	.word	0x2000ed6c
   124bc:	0002779c 	.word	0x0002779c
   124c0:	0002775c 	.word	0x0002775c
   124c4:	000283c0 	.word	0x000283c0
   124c8:	200001a8 	.word	0x200001a8
   124cc:	000283d8 	.word	0x000283d8
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   124d0:	2141      	movs	r1, #65	; 0x41
   124d2:	f012 fa5a 	bl	2498a <bt_hci_cmd_complete_create>
   124d6:	2141      	movs	r1, #65	; 0x41
   124d8:	4603      	mov	r3, r0
   124da:	3008      	adds	r0, #8
   124dc:	9307      	str	r3, [sp, #28]
   124de:	f013 ff65 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   124e2:	2100      	movs	r1, #0
   124e4:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   124e6:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   124e8:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   124ec:	f011 ff35 	bl	2435a <memset>
	rp->commands[15] |= BIT(1);
   124f0:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   124f2:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   124f4:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   124f6:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   124f8:	f043 0302 	orr.w	r3, r3, #2
   124fc:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   124fe:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   12500:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   12504:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12508:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   1250c:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   1250e:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   12510:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   12512:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12514:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   12516:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   1251a:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   1251e:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   12522:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   12526:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   1252a:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   1252c:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   1252e:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   12530:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   12532:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   12534:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   12538:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1253a:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   1253e:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   12542:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   12546:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1254a:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   1254e:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   12550:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   12552:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   12556:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   1255a:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1255c:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   12560:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12564:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   12568:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   1256c:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   12570:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   12574:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   12578:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   1257c:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   12580:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   12584:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   12588:	9d07      	ldr	r5, [sp, #28]
   1258a:	e63f      	b.n	1220c <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1258c:	2109      	movs	r1, #9
   1258e:	f012 f9fc 	bl	2498a <bt_hci_cmd_complete_create>
   12592:	2109      	movs	r1, #9
   12594:	4603      	mov	r3, r0
   12596:	3008      	adds	r0, #8
   12598:	9307      	str	r3, [sp, #28]
   1259a:	f013 ff07 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   1259e:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   125a0:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   125a2:	f04f 32ff 	mov.w	r2, #4294967295
	rp->status = 0x00;
   125a6:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   125a8:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   125aa:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   125ae:	7083      	strb	r3, [r0, #2]
   125b0:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   125b2:	2305      	movs	r3, #5
	return evt;
   125b4:	9d07      	ldr	r5, [sp, #28]
	rp->lmp_version = LL_VERSION_NUMBER;
   125b6:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   125b8:	7144      	strb	r4, [r0, #5]
   125ba:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   125bc:	71c2      	strb	r2, [r0, #7]
   125be:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   125c0:	e624      	b.n	1220c <hci_cmd_handle+0x6c>
		le_set_privacy_mode(cmd, evt);
   125c2:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   125c4:	79c1      	ldrb	r1, [r0, #7]
   125c6:	f007 fcff 	bl	19fc8 <ll_priv_mode_set>
   125ca:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   125cc:	2101      	movs	r1, #1
   125ce:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   125d0:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   125d2:	f012 f9da 	bl	2498a <bt_hci_cmd_complete_create>
   125d6:	2101      	movs	r1, #1
   125d8:	4605      	mov	r5, r0
   125da:	3008      	adds	r0, #8
   125dc:	f013 fee6 	bl	263ac <net_buf_simple_add>
	ccst->status = status;
   125e0:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   125e2:	e613      	b.n	1220c <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   125e4:	2103      	movs	r1, #3
   125e6:	f012 f9d0 	bl	2498a <bt_hci_cmd_complete_create>
   125ea:	2103      	movs	r1, #3
   125ec:	4603      	mov	r3, r0
   125ee:	3008      	adds	r0, #8
   125f0:	9307      	str	r3, [sp, #28]
   125f2:	f013 fedb 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   125f6:	4601      	mov	r1, r0
   125f8:	2300      	movs	r3, #0
   125fa:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   125fe:	3001      	adds	r0, #1
   12600:	f7ff fb3e 	bl	11c80 <ll_tx_pwr_get>
	return evt;
   12604:	9d07      	ldr	r5, [sp, #28]
   12606:	e601      	b.n	1220c <hci_cmd_handle+0x6c>
		le_set_phy(cmd, evt);
   12608:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1260a:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   1260c:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   1260e:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   12610:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12614:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
   12616:	bf44      	itt	mi
   12618:	f041 0103 	orrmi.w	r1, r1, #3
   1261c:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   1261e:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   12622:	7913      	ldrb	r3, [r2, #4]
   12624:	bf1c      	itt	ne
   12626:	f043 0303 	orrne.w	r3, r3, #3
   1262a:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   1262c:	ea43 0201 	orr.w	r2, r3, r1
   12630:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   12634:	f040 827d 	bne.w	12b32 <hci_cmd_handle+0x992>
	if (!(cmd->tx_phys & 0x07) ||
   12638:	074f      	lsls	r7, r1, #29
   1263a:	f000 8274 	beq.w	12b26 <hci_cmd_handle+0x986>
   1263e:	075a      	lsls	r2, r3, #29
   12640:	f000 8271 	beq.w	12b26 <hci_cmd_handle+0x986>
	if (phy_opts & 0x03) {
   12644:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   12648:	bf1c      	itt	ne
   1264a:	f104 34ff 	addne.w	r4, r4, #4294967295
		phy_opts &= 1;
   1264e:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   12652:	4628      	mov	r0, r5
   12654:	f003 fbfa 	bl	15e4c <ll_phy_req_send>
   12658:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1265a:	8830      	ldrh	r0, [r6, #0]
   1265c:	f012 f9a7 	bl	249ae <bt_hci_cmd_status_create>
   12660:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12662:	e5d3      	b.n	1220c <hci_cmd_handle+0x6c>
		le_set_default_phy(cmd, evt);
   12664:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12666:	781a      	ldrb	r2, [r3, #0]
   12668:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   1266a:	bf4a      	itet	mi
   1266c:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1266e:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   12670:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   12672:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   12674:	bf4a      	itet	mi
   12676:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   12678:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   1267a:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   1267c:	f003 fbdc 	bl	15e38 <ll_phy_default_set>
   12680:	e7a3      	b.n	125ca <hci_cmd_handle+0x42a>
	handle = sys_le16_to_cpu(cmd->handle);
   12682:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12684:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   12686:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12688:	f012 f97f 	bl	2498a <bt_hci_cmd_complete_create>
   1268c:	2105      	movs	r1, #5
   1268e:	4603      	mov	r3, r0
   12690:	3008      	adds	r0, #8
   12692:	9307      	str	r3, [sp, #28]
   12694:	f013 fe8a 	bl	263ac <net_buf_simple_add>
   12698:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1269a:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   1269c:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   1269e:	1ce1      	adds	r1, r4, #3
   126a0:	f003 fbac 	bl	15dfc <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   126a4:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   126a6:	7020      	strb	r0, [r4, #0]
   126a8:	2b00      	cmp	r3, #0
   126aa:	fa93 f2a3 	rbit	r2, r3
   126ae:	7923      	ldrb	r3, [r4, #4]
   126b0:	fab2 f282 	clz	r2, r2
   126b4:	bf08      	it	eq
   126b6:	f04f 32ff 	moveq.w	r2, #4294967295
   126ba:	2b00      	cmp	r3, #0
   126bc:	fa93 f3a3 	rbit	r3, r3
   126c0:	fab3 f383 	clz	r3, r3
   126c4:	f102 0201 	add.w	r2, r2, #1
   126c8:	bf08      	it	eq
   126ca:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   126ce:	70e2      	strb	r2, [r4, #3]
   126d0:	3301      	adds	r3, #1
	return evt;
   126d2:	9d07      	ldr	r5, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   126d4:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   126d6:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   126da:	e597      	b.n	1220c <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
   126dc:	68ab      	ldr	r3, [r5, #8]
   126de:	7818      	ldrb	r0, [r3, #0]
   126e0:	f007 fc52 	bl	19f88 <ll_rl_enable>
   126e4:	e771      	b.n	125ca <hci_cmd_handle+0x42a>
	memcpy(dst, src, sizeof(*dst));
   126e6:	2207      	movs	r2, #7
   126e8:	68a9      	ldr	r1, [r5, #8]
   126ea:	a808      	add	r0, sp, #32
   126ec:	f011 fe0a 	bl	24304 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   126f0:	2107      	movs	r1, #7
   126f2:	8830      	ldrh	r0, [r6, #0]
   126f4:	f012 f949 	bl	2498a <bt_hci_cmd_complete_create>
   126f8:	2107      	movs	r1, #7
   126fa:	4603      	mov	r3, r0
   126fc:	3008      	adds	r0, #8
   126fe:	9307      	str	r3, [sp, #28]
   12700:	f013 fe54 	bl	263ac <net_buf_simple_add>
   12704:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   12706:	1c41      	adds	r1, r0, #1
   12708:	a808      	add	r0, sp, #32
   1270a:	f007 fc0b 	bl	19f24 <ll_rl_lrpa_get>
   1270e:	7020      	strb	r0, [r4, #0]
	return evt;
   12710:	9d07      	ldr	r5, [sp, #28]
   12712:	e57b      	b.n	1220c <hci_cmd_handle+0x6c>
   12714:	2207      	movs	r2, #7
   12716:	68a9      	ldr	r1, [r5, #8]
   12718:	a808      	add	r0, sp, #32
   1271a:	f011 fdf3 	bl	24304 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1271e:	2107      	movs	r1, #7
   12720:	8830      	ldrh	r0, [r6, #0]
   12722:	f012 f932 	bl	2498a <bt_hci_cmd_complete_create>
   12726:	2107      	movs	r1, #7
   12728:	4603      	mov	r3, r0
   1272a:	3008      	adds	r0, #8
   1272c:	9307      	str	r3, [sp, #28]
   1272e:	f013 fe3d 	bl	263ac <net_buf_simple_add>
   12732:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   12734:	1c41      	adds	r1, r0, #1
   12736:	a808      	add	r0, sp, #32
   12738:	f007 fbba 	bl	19eb0 <ll_rl_crpa_get>
   1273c:	7020      	strb	r0, [r4, #0]
	return evt;
   1273e:	9d07      	ldr	r5, [sp, #28]
   12740:	e564      	b.n	1220c <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12742:	2102      	movs	r1, #2
   12744:	f012 f921 	bl	2498a <bt_hci_cmd_complete_create>
   12748:	2102      	movs	r1, #2
   1274a:	4603      	mov	r3, r0
   1274c:	3008      	adds	r0, #8
   1274e:	9307      	str	r3, [sp, #28]
   12750:	f013 fe2c 	bl	263ac <net_buf_simple_add>
   12754:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   12756:	f007 fa73 	bl	19c40 <ll_rl_size_get>
	rp->status = 0x00;
   1275a:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   1275c:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   1275e:	7023      	strb	r3, [r4, #0]
	return evt;
   12760:	9d07      	ldr	r5, [sp, #28]
   12762:	e553      	b.n	1220c <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12764:	2109      	movs	r1, #9
   12766:	f012 f910 	bl	2498a <bt_hci_cmd_complete_create>
   1276a:	2109      	movs	r1, #9
   1276c:	4603      	mov	r3, r0
   1276e:	3008      	adds	r0, #8
   12770:	9307      	str	r3, [sp, #28]
   12772:	f013 fe1b 	bl	263ac <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   12776:	ab08      	add	r3, sp, #32
   12778:	4604      	mov	r4, r0
   1277a:	f10d 021a 	add.w	r2, sp, #26
   1277e:	a906      	add	r1, sp, #24
   12780:	f10d 0016 	add.w	r0, sp, #22
   12784:	f003 fb2e 	bl	15de4 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12788:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   1278c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   12790:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12794:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   12798:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   1279c:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   127a0:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   127a2:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   127a6:	7022      	strb	r2, [r4, #0]
	return evt;
   127a8:	9d07      	ldr	r5, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   127aa:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   127ae:	e52d      	b.n	1220c <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   127b0:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   127b2:	8818      	ldrh	r0, [r3, #0]
   127b4:	f007 fbfe 	bl	19fb4 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   127b8:	8830      	ldrh	r0, [r6, #0]
   127ba:	2101      	movs	r1, #1
   127bc:	e62c      	b.n	12418 <hci_cmd_handle+0x278>
   127be:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   127c0:	4bb8      	ldr	r3, [pc, #736]	; (12aa4 <hci_cmd_handle+0x904>)
   127c2:	6811      	ldr	r1, [r2, #0]
   127c4:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   127c6:	6019      	str	r1, [r3, #0]
   127c8:	e624      	b.n	12414 <hci_cmd_handle+0x274>
		le_set_adv_param(cmd, evt);
   127ca:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   127cc:	7ba5      	ldrb	r5, [r4, #14]
   127ce:	79a3      	ldrb	r3, [r4, #6]
   127d0:	7962      	ldrb	r2, [r4, #5]
   127d2:	7921      	ldrb	r1, [r4, #4]
   127d4:	8820      	ldrh	r0, [r4, #0]
   127d6:	9502      	str	r5, [sp, #8]
   127d8:	7b65      	ldrb	r5, [r4, #13]
   127da:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   127dc:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   127de:	9400      	str	r4, [sp, #0]
   127e0:	f002 f9e2 	bl	14ba8 <ll_adv_params_set>
   127e4:	e6f1      	b.n	125ca <hci_cmd_handle+0x42a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   127e6:	68a9      	ldr	r1, [r5, #8]
   127e8:	2001      	movs	r0, #1
   127ea:	f7ff fa1b 	bl	11c24 <ll_addr_set>
   127ee:	e6ec      	b.n	125ca <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   127f0:	2109      	movs	r1, #9
   127f2:	f012 f8ca 	bl	2498a <bt_hci_cmd_complete_create>
   127f6:	2109      	movs	r1, #9
   127f8:	4603      	mov	r3, r0
   127fa:	3008      	adds	r0, #8
   127fc:	9307      	str	r3, [sp, #28]
   127fe:	f013 fdd5 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   12802:	2100      	movs	r1, #0
   12804:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12806:	2208      	movs	r2, #8
	rp->status = 0x00;
   12808:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1280c:	f011 fda5 	bl	2435a <memset>
	dst[0] = val;
   12810:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   12812:	2241      	movs	r2, #65	; 0x41
	dst[2] = val >> 16;
   12814:	2301      	movs	r3, #1
	dst[0] = val;
   12816:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   12818:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   1281a:	70e3      	strb	r3, [r4, #3]
	return evt;
   1281c:	9d07      	ldr	r5, [sp, #28]
   1281e:	e4f5      	b.n	1220c <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12820:	2104      	movs	r1, #4
   12822:	f012 f8b2 	bl	2498a <bt_hci_cmd_complete_create>
   12826:	2104      	movs	r1, #4
   12828:	4603      	mov	r3, r0
   1282a:	3008      	adds	r0, #8
   1282c:	9307      	str	r3, [sp, #28]
   1282e:	f013 fdbd 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   12832:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12834:	2103      	movs	r1, #3
	rp->status = 0x00;
   12836:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   12838:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1283a:	70c1      	strb	r1, [r0, #3]
	return evt;
   1283c:	9d07      	ldr	r5, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1283e:	7042      	strb	r2, [r0, #1]
   12840:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   12842:	e4e3      	b.n	1220c <hci_cmd_handle+0x6c>
	status = ll_wl_remove(&cmd->addr);
   12844:	68a8      	ldr	r0, [r5, #8]
   12846:	f007 f969 	bl	19b1c <ll_wl_remove>
   1284a:	e6be      	b.n	125ca <hci_cmd_handle+0x42a>
	status = ll_wl_add(&cmd->addr);
   1284c:	68a8      	ldr	r0, [r5, #8]
   1284e:	f007 f8c5 	bl	199dc <ll_wl_add>
   12852:	e6ba      	b.n	125ca <hci_cmd_handle+0x42a>
	status = ll_wl_clear();
   12854:	f007 f898 	bl	19988 <ll_wl_clear>
   12858:	e6b7      	b.n	125ca <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1285a:	2102      	movs	r1, #2
   1285c:	f012 f895 	bl	2498a <bt_hci_cmd_complete_create>
   12860:	2102      	movs	r1, #2
   12862:	4603      	mov	r3, r0
   12864:	3008      	adds	r0, #8
   12866:	9307      	str	r3, [sp, #28]
   12868:	f013 fda0 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   1286c:	2300      	movs	r3, #0
   1286e:	7003      	strb	r3, [r0, #0]
   12870:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   12872:	f007 f887 	bl	19984 <ll_wl_size_get>
   12876:	7060      	strb	r0, [r4, #1]
	return evt;
   12878:	9d07      	ldr	r5, [sp, #28]
   1287a:	e4c7      	b.n	1220c <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
   1287c:	68ab      	ldr	r3, [r5, #8]
   1287e:	7818      	ldrb	r0, [r3, #0]
   12880:	f7ef f8b2 	bl	19e8 <ll_adv_enable>
   12884:	e6a1      	b.n	125ca <hci_cmd_handle+0x42a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   12886:	68a9      	ldr	r1, [r5, #8]
   12888:	f811 0b01 	ldrb.w	r0, [r1], #1
   1288c:	f002 fb14 	bl	14eb8 <ll_adv_scan_rsp_set>
   12890:	e69b      	b.n	125ca <hci_cmd_handle+0x42a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   12892:	68a9      	ldr	r1, [r5, #8]
   12894:	f811 0b01 	ldrb.w	r0, [r1], #1
   12898:	f002 fa28 	bl	14cec <ll_adv_data_set>
   1289c:	e695      	b.n	125ca <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1289e:	2102      	movs	r1, #2
   128a0:	f012 f873 	bl	2498a <bt_hci_cmd_complete_create>
   128a4:	2102      	movs	r1, #2
   128a6:	4603      	mov	r3, r0
   128a8:	3008      	adds	r0, #8
   128aa:	9307      	str	r3, [sp, #28]
   128ac:	f013 fd7e 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   128b0:	2300      	movs	r3, #0
   128b2:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   128b4:	7043      	strb	r3, [r0, #1]
	return evt;
   128b6:	9d07      	ldr	r5, [sp, #28]
   128b8:	e4a8      	b.n	1220c <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
   128ba:	f007 f9c3 	bl	19c44 <ll_rl_clear>
   128be:	e684      	b.n	125ca <hci_cmd_handle+0x42a>
	status = ll_rl_remove(&cmd->peer_id_addr);
   128c0:	68a8      	ldr	r0, [r5, #8]
   128c2:	f007 f9fd 	bl	19cc0 <ll_rl_remove>
   128c6:	e680      	b.n	125ca <hci_cmd_handle+0x42a>
		le_add_dev_to_rl(cmd, evt);
   128c8:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   128ca:	f100 0217 	add.w	r2, r0, #23
   128ce:	1dc1      	adds	r1, r0, #7
   128d0:	f007 fd8e 	bl	1a3f0 <ll_rl_add>
   128d4:	e679      	b.n	125ca <hci_cmd_handle+0x42a>
		le_write_default_data_len(cmd, evt);
   128d6:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   128d8:	8859      	ldrh	r1, [r3, #2]
   128da:	8818      	ldrh	r0, [r3, #0]
   128dc:	f003 fa78 	bl	15dd0 <ll_length_default_set>
   128e0:	e673      	b.n	125ca <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   128e2:	2105      	movs	r1, #5
   128e4:	f012 f851 	bl	2498a <bt_hci_cmd_complete_create>
   128e8:	2105      	movs	r1, #5
   128ea:	4603      	mov	r3, r0
   128ec:	3008      	adds	r0, #8
   128ee:	9307      	str	r3, [sp, #28]
   128f0:	f013 fd5c 	bl	263ac <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   128f4:	a908      	add	r1, sp, #32
   128f6:	4604      	mov	r4, r0
   128f8:	f10d 001a 	add.w	r0, sp, #26
   128fc:	f003 fa5c 	bl	15db8 <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12900:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12904:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   12908:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   1290a:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1290e:	7022      	strb	r2, [r4, #0]
	return evt;
   12910:	9d07      	ldr	r5, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12912:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   12916:	e479      	b.n	1220c <hci_cmd_handle+0x6c>
		le_set_data_len(cmd, evt);
   12918:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1291a:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   1291c:	889a      	ldrh	r2, [r3, #4]
   1291e:	8859      	ldrh	r1, [r3, #2]
   12920:	b2b8      	uxth	r0, r7
   12922:	f003 f9f5 	bl	15d10 <ll_length_req_send>
   12926:	e58d      	b.n	12444 <hci_cmd_handle+0x2a4>
		le_conn_param_req_neg_reply(cmd, evt);
   12928:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1292a:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   1292c:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   1292e:	7892      	ldrb	r2, [r2, #2]
   12930:	9300      	str	r3, [sp, #0]
   12932:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12936:	2102      	movs	r1, #2
   12938:	b2a0      	uxth	r0, r4
   1293a:	f003 f8a7 	bl	15a8c <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1293e:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12940:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12942:	8830      	ldrh	r0, [r6, #0]
   12944:	f012 f821 	bl	2498a <bt_hci_cmd_complete_create>
   12948:	2103      	movs	r1, #3
   1294a:	4603      	mov	r3, r0
   1294c:	3008      	adds	r0, #8
   1294e:	9307      	str	r3, [sp, #28]
   12950:	f013 fd2c 	bl	263ac <net_buf_simple_add>
	rp->status = status;
   12954:	7005      	strb	r5, [r0, #0]
	return evt;
   12956:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   12958:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   1295c:	e456      	b.n	1220c <hci_cmd_handle+0x6c>
		le_conn_param_req_reply(cmd, evt);
   1295e:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12960:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12962:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12964:	8853      	ldrh	r3, [r2, #2]
   12966:	9102      	str	r1, [sp, #8]
   12968:	88d1      	ldrh	r1, [r2, #6]
   1296a:	9101      	str	r1, [sp, #4]
   1296c:	8891      	ldrh	r1, [r2, #4]
   1296e:	9100      	str	r1, [sp, #0]
   12970:	2200      	movs	r2, #0
   12972:	e7e0      	b.n	12936 <hci_cmd_handle+0x796>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12974:	2109      	movs	r1, #9
   12976:	f012 f808 	bl	2498a <bt_hci_cmd_complete_create>
   1297a:	2109      	movs	r1, #9
   1297c:	4603      	mov	r3, r0
   1297e:	3008      	adds	r0, #8
   12980:	9307      	str	r3, [sp, #28]
   12982:	f013 fd13 	bl	263ac <net_buf_simple_add>
	dst[0] = val;
   12986:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   12988:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   1298a:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   1298c:	2230      	movs	r2, #48	; 0x30
   1298e:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   12990:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   12992:	70c2      	strb	r2, [r0, #3]
   12994:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   12996:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   12998:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   1299a:	2201      	movs	r2, #1
	return evt;
   1299c:	9d07      	ldr	r5, [sp, #28]
   1299e:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   129a0:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   129a2:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   129a4:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   129a6:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   129a8:	e430      	b.n	1220c <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   129aa:	68ab      	ldr	r3, [r5, #8]
   129ac:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   129ae:	2200      	movs	r2, #0
   129b0:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   129b2:	b2b8      	uxth	r0, r7
   129b4:	f006 fe72 	bl	1969c <ll_start_enc_req_send>
   129b8:	e544      	b.n	12444 <hci_cmd_handle+0x2a4>
	handle = sys_le16_to_cpu(cmd->handle);
   129ba:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   129bc:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   129be:	f832 7b02 	ldrh.w	r7, [r2], #2
   129c2:	e7f6      	b.n	129b2 <hci_cmd_handle+0x812>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   129c4:	2109      	movs	r1, #9
   129c6:	f011 ffe0 	bl	2498a <bt_hci_cmd_complete_create>
   129ca:	2109      	movs	r1, #9
   129cc:	4603      	mov	r3, r0
   129ce:	3008      	adds	r0, #8
   129d0:	9307      	str	r3, [sp, #28]
   129d2:	f013 fceb 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   129d6:	2300      	movs	r3, #0
   129d8:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   129dc:	2108      	movs	r1, #8
   129de:	f008 f95b 	bl	1ac98 <lll_csrand_get>
	return evt;
   129e2:	9d07      	ldr	r5, [sp, #28]
   129e4:	e412      	b.n	1220c <hci_cmd_handle+0x6c>
		le_encrypt(cmd, evt);
   129e6:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   129e8:	aa08      	add	r2, sp, #32
   129ea:	2300      	movs	r3, #0
   129ec:	f100 0110 	add.w	r1, r0, #16
   129f0:	f009 fe52 	bl	1c698 <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   129f4:	2111      	movs	r1, #17
   129f6:	8830      	ldrh	r0, [r6, #0]
   129f8:	f011 ffc7 	bl	2498a <bt_hci_cmd_complete_create>
   129fc:	2111      	movs	r1, #17
   129fe:	4603      	mov	r3, r0
   12a00:	3008      	adds	r0, #8
   12a02:	9307      	str	r3, [sp, #28]
   12a04:	f013 fcd2 	bl	263ac <net_buf_simple_add>
	rp->status = 0x00;
   12a08:	2300      	movs	r3, #0
   12a0a:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   12a0e:	2210      	movs	r2, #16
   12a10:	a908      	add	r1, sp, #32
   12a12:	f011 fc77 	bl	24304 <memcpy>
	return evt;
   12a16:	9d07      	ldr	r5, [sp, #28]
   12a18:	f7ff bbf8 	b.w	1220c <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12a1c:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   12a1e:	8818      	ldrh	r0, [r3, #0]
   12a20:	f003 f92a 	bl	15c78 <ll_feature_req_send>
   12a24:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12a26:	8830      	ldrh	r0, [r6, #0]
   12a28:	f011 ffc1 	bl	249ae <bt_hci_cmd_status_create>
   12a2c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12a2e:	f7ff bbed 	b.w	1220c <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12a32:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a34:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   12a36:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a38:	f011 ffa7 	bl	2498a <bt_hci_cmd_complete_create>
   12a3c:	2108      	movs	r1, #8
   12a3e:	4603      	mov	r3, r0
   12a40:	4408      	add	r0, r1
   12a42:	9307      	str	r3, [sp, #28]
   12a44:	f013 fcb2 	bl	263ac <net_buf_simple_add>
   12a48:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   12a4a:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12a4c:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   12a4e:	f003 f8b1 	bl	15bb4 <ll_chm_get>
	rp->status = status;
   12a52:	7020      	strb	r0, [r4, #0]
	return evt;
   12a54:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   12a56:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   12a5a:	f7ff bbd7 	b.w	1220c <hci_cmd_handle+0x6c>
		le_conn_update(cmd, evt);
   12a5e:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12a60:	890a      	ldrh	r2, [r1, #8]
   12a62:	884b      	ldrh	r3, [r1, #2]
   12a64:	8808      	ldrh	r0, [r1, #0]
   12a66:	9202      	str	r2, [sp, #8]
   12a68:	88ca      	ldrh	r2, [r1, #6]
   12a6a:	9201      	str	r2, [sp, #4]
   12a6c:	8889      	ldrh	r1, [r1, #4]
   12a6e:	9100      	str	r1, [sp, #0]
   12a70:	2200      	movs	r2, #0
   12a72:	4611      	mov	r1, r2
   12a74:	f003 f80a 	bl	15a8c <ll_conn_update>
   12a78:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12a7a:	8830      	ldrh	r0, [r6, #0]
   12a7c:	f011 ff97 	bl	249ae <bt_hci_cmd_status_create>
   12a80:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12a82:	f7ff bbc3 	b.w	1220c <hci_cmd_handle+0x6c>
		disconnect(cmd, evt);
   12a86:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   12a88:	7899      	ldrb	r1, [r3, #2]
   12a8a:	8818      	ldrh	r0, [r3, #0]
   12a8c:	f003 f8b2 	bl	15bf4 <ll_terminate_ind_send>
   12a90:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12a92:	8830      	ldrh	r0, [r6, #0]
   12a94:	f011 ff8b 	bl	249ae <bt_hci_cmd_status_create>
   12a98:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12a9a:	f7ff bbb7 	b.w	1220c <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12a9e:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12aa0:	4b01      	ldr	r3, [pc, #4]	; (12aa8 <hci_cmd_handle+0x908>)
   12aa2:	e68e      	b.n	127c2 <hci_cmd_handle+0x622>
   12aa4:	200001b0 	.word	0x200001b0
   12aa8:	2000ab50 	.word	0x2000ab50
	event_mask = DEFAULT_EVENT_MASK;
   12aac:	4b24      	ldr	r3, [pc, #144]	; (12b40 <hci_cmd_handle+0x9a0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12aae:	4a25      	ldr	r2, [pc, #148]	; (12b44 <hci_cmd_handle+0x9a4>)
	event_mask = DEFAULT_EVENT_MASK;
   12ab0:	f04f 30ff 	mov.w	r0, #4294967295
   12ab4:	f641 71ff 	movw	r1, #8191	; 0x1fff
   12ab8:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12abc:	4b22      	ldr	r3, [pc, #136]	; (12b48 <hci_cmd_handle+0x9a8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12abe:	2000      	movs	r0, #0
   12ac0:	2100      	movs	r1, #0
   12ac2:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12ac6:	201f      	movs	r0, #31
   12ac8:	2100      	movs	r1, #0
   12aca:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   12ace:	f001 f857 	bl	13b80 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12ad2:	2101      	movs	r1, #1
   12ad4:	8830      	ldrh	r0, [r6, #0]
   12ad6:	f011 ff58 	bl	2498a <bt_hci_cmd_complete_create>
   12ada:	2101      	movs	r1, #1
   12adc:	4605      	mov	r5, r0
   12ade:	3008      	adds	r0, #8
   12ae0:	f013 fc64 	bl	263ac <net_buf_simple_add>
	conn_count = 0U;
   12ae4:	4a19      	ldr	r2, [pc, #100]	; (12b4c <hci_cmd_handle+0x9ac>)
	ccst->status = status;
   12ae6:	2300      	movs	r3, #0
   12ae8:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   12aea:	6013      	str	r3, [r2, #0]
}
   12aec:	f7ff bb8e 	b.w	1220c <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12af0:	68ab      	ldr	r3, [r5, #8]
   12af2:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   12af4:	a908      	add	r1, sp, #32
   12af6:	b2a8      	uxth	r0, r5
   12af8:	f003 f9fa 	bl	15ef0 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12afc:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   12afe:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b00:	8830      	ldrh	r0, [r6, #0]
   12b02:	f011 ff42 	bl	2498a <bt_hci_cmd_complete_create>
   12b06:	2105      	movs	r1, #5
   12b08:	4603      	mov	r3, r0
   12b0a:	3008      	adds	r0, #8
   12b0c:	9307      	str	r3, [sp, #28]
   12b0e:	f013 fc4d 	bl	263ac <net_buf_simple_add>
	rp->status = status;
   12b12:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12b14:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   12b18:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   12b1c:	9d07      	ldr	r5, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   12b1e:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   12b22:	f7ff bb73 	b.w	1220c <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12b26:	2112      	movs	r1, #18
   12b28:	f011 ff41 	bl	249ae <bt_hci_cmd_status_create>
   12b2c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12b2e:	f7ff bb6d 	b.w	1220c <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12b32:	2111      	movs	r1, #17
   12b34:	f011 ff3b 	bl	249ae <bt_hci_cmd_status_create>
   12b38:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12b3a:	f7ff bb67 	b.w	1220c <hci_cmd_handle+0x6c>
   12b3e:	bf00      	nop
   12b40:	200001a8 	.word	0x200001a8
   12b44:	2000ab50 	.word	0x2000ab50
   12b48:	200001b0 	.word	0x200001b0
   12b4c:	2000d9e4 	.word	0x2000d9e4

00012b50 <hci_acl_handle>:
{
   12b50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   12b54:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   12b56:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   12b58:	2b03      	cmp	r3, #3
	*evt = NULL;
   12b5a:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   12b5c:	d944      	bls.n	12be8 <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
   12b5e:	4605      	mov	r5, r0
   12b60:	460f      	mov	r7, r1
   12b62:	3008      	adds	r0, #8
   12b64:	2104      	movs	r1, #4
   12b66:	f013 fc48 	bl	263fa <net_buf_simple_pull_mem>
	if (buf->len < len) {
   12b6a:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   12b6c:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   12b70:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   12b74:	4543      	cmp	r3, r8
   12b76:	d344      	bcc.n	12c02 <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
   12b78:	f002 ff30 	bl	159dc <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   12b7c:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   12b80:	4604      	mov	r4, r0
   12b82:	2800      	cmp	r0, #0
   12b84:	d041      	beq.n	12c0a <hci_acl_handle+0xba>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   12b86:	08b3      	lsrs	r3, r6, #2
   12b88:	d102      	bne.n	12b90 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   12b8a:	b33e      	cbz	r6, 12bdc <hci_acl_handle+0x8c>
   12b8c:	2e01      	cmp	r6, #1
   12b8e:	d003      	beq.n	12b98 <hci_acl_handle+0x48>
		return -EINVAL;
   12b90:	f06f 0015 	mvn.w	r0, #21
}
   12b94:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12b98:	7903      	ldrb	r3, [r0, #4]
   12b9a:	f366 0301 	bfi	r3, r6, #0, #2
   12b9e:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   12ba0:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   12ba4:	68a9      	ldr	r1, [r5, #8]
   12ba6:	4642      	mov	r2, r8
   12ba8:	1de0      	adds	r0, r4, #7
   12baa:	f011 fbab 	bl	24304 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   12bae:	4621      	mov	r1, r4
   12bb0:	f3c9 000b 	ubfx	r0, r9, #0, #12
   12bb4:	f002 ff1e 	bl	159f4 <ll_tx_mem_enqueue>
   12bb8:	2800      	cmp	r0, #0
   12bba:	d0eb      	beq.n	12b94 <hci_acl_handle+0x44>
   12bbc:	4b28      	ldr	r3, [pc, #160]	; (12c60 <hci_acl_handle+0x110>)
   12bbe:	4929      	ldr	r1, [pc, #164]	; (12c64 <hci_acl_handle+0x114>)
		BT_ERR("Invalid Tx Enqueue");
   12bc0:	4829      	ldr	r0, [pc, #164]	; (12c68 <hci_acl_handle+0x118>)
   12bc2:	1ac9      	subs	r1, r1, r3
   12bc4:	08c9      	lsrs	r1, r1, #3
   12bc6:	0189      	lsls	r1, r1, #6
   12bc8:	f041 0101 	orr.w	r1, r1, #1
   12bcc:	f00f fb8e 	bl	222ec <log_0>
		ll_tx_mem_release(node_tx);
   12bd0:	4620      	mov	r0, r4
   12bd2:	f002 ff09 	bl	159e8 <ll_tx_mem_release>
		return -EINVAL;
   12bd6:	f06f 0015 	mvn.w	r0, #21
   12bda:	e7db      	b.n	12b94 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   12bdc:	7903      	ldrb	r3, [r0, #4]
   12bde:	2202      	movs	r2, #2
   12be0:	f362 0301 	bfi	r3, r2, #0, #2
   12be4:	7103      	strb	r3, [r0, #4]
		break;
   12be6:	e7db      	b.n	12ba0 <hci_acl_handle+0x50>
   12be8:	491e      	ldr	r1, [pc, #120]	; (12c64 <hci_acl_handle+0x114>)
   12bea:	4b1d      	ldr	r3, [pc, #116]	; (12c60 <hci_acl_handle+0x110>)
		BT_ERR("No HCI ACL header");
   12bec:	481f      	ldr	r0, [pc, #124]	; (12c6c <hci_acl_handle+0x11c>)
   12bee:	1ac9      	subs	r1, r1, r3
   12bf0:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   12bf2:	0189      	lsls	r1, r1, #6
   12bf4:	f041 0101 	orr.w	r1, r1, #1
   12bf8:	f00f fb78 	bl	222ec <log_0>
		return -EINVAL;
   12bfc:	f06f 0015 	mvn.w	r0, #21
   12c00:	e7c8      	b.n	12b94 <hci_acl_handle+0x44>
   12c02:	4918      	ldr	r1, [pc, #96]	; (12c64 <hci_acl_handle+0x114>)
   12c04:	4b16      	ldr	r3, [pc, #88]	; (12c60 <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
   12c06:	481a      	ldr	r0, [pc, #104]	; (12c70 <hci_acl_handle+0x120>)
   12c08:	e7f1      	b.n	12bee <hci_acl_handle+0x9e>
   12c0a:	4b15      	ldr	r3, [pc, #84]	; (12c60 <hci_acl_handle+0x110>)
   12c0c:	4915      	ldr	r1, [pc, #84]	; (12c64 <hci_acl_handle+0x114>)
		BT_ERR("Tx Buffer Overflow");
   12c0e:	4819      	ldr	r0, [pc, #100]	; (12c74 <hci_acl_handle+0x124>)
   12c10:	1ac9      	subs	r1, r1, r3
   12c12:	08c9      	lsrs	r1, r1, #3
   12c14:	0189      	lsls	r1, r1, #6
   12c16:	f041 0101 	orr.w	r1, r1, #1
   12c1a:	f00f fb67 	bl	222ec <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   12c1e:	4b16      	ldr	r3, [pc, #88]	; (12c78 <hci_acl_handle+0x128>)
   12c20:	681b      	ldr	r3, [r3, #0]
   12c22:	019b      	lsls	r3, r3, #6
   12c24:	d402      	bmi.n	12c2c <hci_acl_handle+0xdc>
		return -ENOBUFS;
   12c26:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12c2a:	e7b3      	b.n	12b94 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12c2c:	f04f 33ff 	mov.w	r3, #4294967295
   12c30:	f04f 32ff 	mov.w	r2, #4294967295
   12c34:	2001      	movs	r0, #1
   12c36:	f7f5 fd83 	bl	8740 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   12c3a:	2102      	movs	r1, #2
   12c3c:	6038      	str	r0, [r7, #0]
   12c3e:	3008      	adds	r0, #8
   12c40:	f013 fbb4 	bl	263ac <net_buf_simple_add>
	hdr->len = len;
   12c44:	2401      	movs	r4, #1
	hdr->evt = evt;
   12c46:	221a      	movs	r2, #26
   12c48:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12c4a:	7044      	strb	r4, [r0, #1]
   12c4c:	6838      	ldr	r0, [r7, #0]
   12c4e:	4621      	mov	r1, r4
   12c50:	3008      	adds	r0, #8
   12c52:	f013 fbab 	bl	263ac <net_buf_simple_add>
   12c56:	4603      	mov	r3, r0
		return -ENOBUFS;
   12c58:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   12c5c:	701c      	strb	r4, [r3, #0]
   12c5e:	e799      	b.n	12b94 <hci_acl_handle+0x44>
   12c60:	0002775c 	.word	0x0002775c
   12c64:	0002779c 	.word	0x0002779c
   12c68:	00028440 	.word	0x00028440
   12c6c:	000283f8 	.word	0x000283f8
   12c70:	0002840c 	.word	0x0002840c
   12c74:	0002842c 	.word	0x0002842c
   12c78:	200001a8 	.word	0x200001a8

00012c7c <hci_disconn_complete_encode>:
{
   12c7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12c7e:	4b0e      	ldr	r3, [pc, #56]	; (12cb8 <hci_disconn_complete_encode+0x3c>)
   12c80:	681b      	ldr	r3, [r3, #0]
   12c82:	06db      	lsls	r3, r3, #27
   12c84:	d400      	bmi.n	12c88 <hci_disconn_complete_encode+0xc>
}
   12c86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12c88:	f102 0408 	add.w	r4, r2, #8
   12c8c:	4605      	mov	r5, r0
   12c8e:	460e      	mov	r6, r1
   12c90:	4620      	mov	r0, r4
   12c92:	2102      	movs	r1, #2
   12c94:	f013 fb8a 	bl	263ac <net_buf_simple_add>
   12c98:	4603      	mov	r3, r0
	hdr->len = len;
   12c9a:	2104      	movs	r1, #4
	hdr->evt = evt;
   12c9c:	2205      	movs	r2, #5
	hdr->len = len;
   12c9e:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   12ca0:	701a      	strb	r2, [r3, #0]
   12ca2:	4620      	mov	r0, r4
   12ca4:	f013 fb82 	bl	263ac <net_buf_simple_add>
   12ca8:	2700      	movs	r7, #0
	ep->status = 0x00;
   12caa:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12cac:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   12cb0:	782b      	ldrb	r3, [r5, #0]
   12cb2:	70c3      	strb	r3, [r0, #3]
}
   12cb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12cb6:	bf00      	nop
   12cb8:	200001a8 	.word	0x200001a8

00012cbc <hci_disconn_complete_process>:
	conn_count--;
   12cbc:	4a02      	ldr	r2, [pc, #8]	; (12cc8 <hci_disconn_complete_process+0xc>)
   12cbe:	6813      	ldr	r3, [r2, #0]
   12cc0:	3b01      	subs	r3, #1
   12cc2:	6013      	str	r3, [r2, #0]
}
   12cc4:	4770      	bx	lr
   12cc6:	bf00      	nop
   12cc8:	2000d9e4 	.word	0x2000d9e4

00012ccc <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   12ccc:	7f03      	ldrb	r3, [r0, #28]
   12cce:	f003 0303 	and.w	r3, r3, #3
   12cd2:	3b01      	subs	r3, #1
   12cd4:	2b01      	cmp	r3, #1
{
   12cd6:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   12cd8:	d90d      	bls.n	12cf6 <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   12cda:	4a16      	ldr	r2, [pc, #88]	; (12d34 <hci_acl_encode+0x68>)
   12cdc:	4916      	ldr	r1, [pc, #88]	; (12d38 <hci_acl_encode+0x6c>)
   12cde:	4817      	ldr	r0, [pc, #92]	; (12d3c <hci_acl_encode+0x70>)
   12ce0:	f241 737a 	movw	r3, #6010	; 0x177a
   12ce4:	f00e fe6c 	bl	219c0 <printk>
   12ce8:	4040      	eors	r0, r0
   12cea:	f380 8811 	msr	BASEPRI, r0
   12cee:	f04f 0003 	mov.w	r0, #3
   12cf2:	df02      	svc	2
		break;
	}
}
   12cf4:	bd70      	pop	{r4, r5, r6, pc}
   12cf6:	4604      	mov	r4, r0
   12cf8:	f101 0508 	add.w	r5, r1, #8
   12cfc:	4628      	mov	r0, r5
   12cfe:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   12d00:	88e6      	ldrh	r6, [r4, #6]
   12d02:	f013 fb53 	bl	263ac <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   12d06:	7f23      	ldrb	r3, [r4, #28]
   12d08:	f003 0303 	and.w	r3, r3, #3
   12d0c:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   12d0e:	bf0c      	ite	eq
   12d10:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   12d14:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   12d18:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   12d1a:	7f61      	ldrb	r1, [r4, #29]
   12d1c:	8041      	strh	r1, [r0, #2]
   12d1e:	4628      	mov	r0, r5
   12d20:	f013 fb44 	bl	263ac <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12d24:	7f62      	ldrb	r2, [r4, #29]
   12d26:	f104 011f 	add.w	r1, r4, #31
}
   12d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12d2e:	f011 bae9 	b.w	24304 <memcpy>
   12d32:	bf00      	nop
   12d34:	00028454 	.word	0x00028454
   12d38:	0002833c 	.word	0x0002833c
   12d3c:	000282a4 	.word	0x000282a4

00012d40 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   12d40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12d44:	f890 c004 	ldrb.w	ip, [r0, #4]
   12d48:	f1bc 0f03 	cmp.w	ip, #3
{
   12d4c:	4604      	mov	r4, r0
   12d4e:	b088      	sub	sp, #32
   12d50:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   12d52:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12d56:	d00f      	beq.n	12d78 <hci_evt_encode+0x38>
		encode_control(node_rx, pdu_data, buf);
   12d58:	f1ac 0c13 	sub.w	ip, ip, #19
   12d5c:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
   12d5e:	f1bc 0f06 	cmp.w	ip, #6
   12d62:	f200 82be 	bhi.w	132e2 <hci_evt_encode+0x5a2>
   12d66:	e8df f01c 	tbh	[pc, ip, lsl #1]
   12d6a:	0022      	.short	0x0022
   12d6c:	0083007c 	.word	0x0083007c
   12d70:	00c200ac 	.word	0x00c200ac
   12d74:	00f300d4 	.word	0x00f300d4
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
   12d78:	7fe3      	ldrb	r3, [r4, #31]
   12d7a:	88e6      	ldrh	r6, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
   12d7c:	3b03      	subs	r3, #3
   12d7e:	2b12      	cmp	r3, #18
   12d80:	f200 8116 	bhi.w	12fb0 <hci_evt_encode+0x270>
   12d84:	e8df f013 	tbh	[pc, r3, lsl #1]
   12d88:	011401e8 	.word	0x011401e8
   12d8c:	02170114 	.word	0x02170114
   12d90:	01140177 	.word	0x01140177
   12d94:	01140189 	.word	0x01140189
   12d98:	01140114 	.word	0x01140114
   12d9c:	011401a8 	.word	0x011401a8
   12da0:	011401c3 	.word	0x011401c3
   12da4:	01140114 	.word	0x01140114
   12da8:	01220114 	.word	0x01220114
   12dac:	0122      	.short	0x0122
	uint8_t status = cc->status;
   12dae:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   12db0:	2f00      	cmp	r7, #0
   12db2:	f000 8219 	beq.w	131e8 <hci_evt_encode+0x4a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12db6:	4bbd      	ldr	r3, [pc, #756]	; (130ac <hci_evt_encode+0x36c>)
   12db8:	685b      	ldr	r3, [r3, #4]
   12dba:	009a      	lsls	r2, r3, #2
   12dbc:	d54e      	bpl.n	12e5c <hci_evt_encode+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12dbe:	4bbc      	ldr	r3, [pc, #752]	; (130b0 <hci_evt_encode+0x370>)
   12dc0:	681b      	ldr	r3, [r3, #0]
   12dc2:	f240 2201 	movw	r2, #513	; 0x201
   12dc6:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   12dc8:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12dcc:	d046      	beq.n	12e5c <hci_evt_encode+0x11c>
	if (!status) {
   12dce:	2f00      	cmp	r7, #0
   12dd0:	f040 821d 	bne.w	1320e <hci_evt_encode+0x4ce>
		conn_count++;
   12dd4:	4ab7      	ldr	r2, [pc, #732]	; (130b4 <hci_evt_encode+0x374>)
   12dd6:	6813      	ldr	r3, [r2, #0]
   12dd8:	3301      	adds	r3, #1
   12dda:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12ddc:	f1b8 0f00 	cmp.w	r8, #0
   12de0:	f000 8232 	beq.w	13248 <hci_evt_encode+0x508>
   12de4:	3508      	adds	r5, #8
   12de6:	2102      	movs	r1, #2
   12de8:	4628      	mov	r0, r5
   12dea:	f013 fadf 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   12dee:	233e      	movs	r3, #62	; 0x3e
   12df0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12df2:	231f      	movs	r3, #31
   12df4:	7043      	strb	r3, [r0, #1]
   12df6:	2101      	movs	r1, #1
   12df8:	4628      	mov	r0, r5
   12dfa:	f013 fad7 	bl	263ac <net_buf_simple_add>
   12dfe:	4603      	mov	r3, r0
	me->subevent = subevt;
   12e00:	220a      	movs	r2, #10
   12e02:	701a      	strb	r2, [r3, #0]
   12e04:	4628      	mov	r0, r5
   12e06:	211e      	movs	r1, #30
   12e08:	f013 fad0 	bl	263ac <net_buf_simple_add>
		leecc->status = 0x00;
   12e0c:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   12e0e:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   12e12:	7f63      	ldrb	r3, [r4, #29]
   12e14:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   12e16:	7fa3      	ldrb	r3, [r4, #30]
   12e18:	7103      	strb	r3, [r0, #4]
   12e1a:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   12e1c:	2206      	movs	r2, #6
   12e1e:	f104 011f 	add.w	r1, r4, #31
   12e22:	3005      	adds	r0, #5
   12e24:	f011 fa6e 	bl	24304 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   12e28:	2206      	movs	r2, #6
   12e2a:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   12e2e:	f105 000b 	add.w	r0, r5, #11
   12e32:	f011 fa67 	bl	24304 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   12e36:	2206      	movs	r2, #6
   12e38:	f104 0125 	add.w	r1, r4, #37	; 0x25
   12e3c:	f105 0011 	add.w	r0, r5, #17
   12e40:	f011 fa60 	bl	24304 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12e44:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12e46:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   12e48:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12e4a:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12e4e:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12e52:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   12e56:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12e5a:	776b      	strb	r3, [r5, #29]
	}
}
   12e5c:	b008      	add	sp, #32
   12e5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12e62:	460a      	mov	r2, r1
   12e64:	4631      	mov	r1, r6
}
   12e66:	b008      	add	sp, #32
   12e68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12e6c:	f7ff bf06 	b.w	12c7c <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e70:	4b8e      	ldr	r3, [pc, #568]	; (130ac <hci_evt_encode+0x36c>)
   12e72:	685b      	ldr	r3, [r3, #4]
   12e74:	009b      	lsls	r3, r3, #2
   12e76:	d5f1      	bpl.n	12e5c <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   12e78:	4b8d      	ldr	r3, [pc, #564]	; (130b0 <hci_evt_encode+0x370>)
   12e7a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12e7c:	075f      	lsls	r7, r3, #29
   12e7e:	d5ed      	bpl.n	12e5c <hci_evt_encode+0x11c>
   12e80:	3508      	adds	r5, #8
   12e82:	2102      	movs	r1, #2
   12e84:	4628      	mov	r0, r5
   12e86:	f013 fa91 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   12e8a:	233e      	movs	r3, #62	; 0x3e
   12e8c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12e8e:	230a      	movs	r3, #10
   12e90:	7043      	strb	r3, [r0, #1]
   12e92:	2101      	movs	r1, #1
   12e94:	4628      	mov	r0, r5
   12e96:	f013 fa89 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   12e9a:	2303      	movs	r3, #3
   12e9c:	7003      	strb	r3, [r0, #0]
   12e9e:	2109      	movs	r1, #9
   12ea0:	4628      	mov	r0, r5
   12ea2:	f013 fa83 	bl	263ac <net_buf_simple_add>
	sep->status = cu->status;
   12ea6:	7f23      	ldrb	r3, [r4, #28]
   12ea8:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12eaa:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12eac:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12eae:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   12eb0:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   12eb4:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   12eb8:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   12ebc:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   12ec0:	e7cc      	b.n	12e5c <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   12ec2:	4b7a      	ldr	r3, [pc, #488]	; (130ac <hci_evt_encode+0x36c>)
   12ec4:	685b      	ldr	r3, [r3, #4]
   12ec6:	0418      	lsls	r0, r3, #16
   12ec8:	f04f 0400 	mov.w	r4, #0
   12ecc:	d5c6      	bpl.n	12e5c <hci_evt_encode+0x11c>
   12ece:	3508      	adds	r5, #8
   12ed0:	2102      	movs	r1, #2
   12ed2:	4628      	mov	r0, r5
   12ed4:	f013 fa6a 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   12ed8:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   12eda:	2103      	movs	r1, #3
	hdr->evt = evt;
   12edc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12ede:	7041      	strb	r1, [r0, #1]
   12ee0:	4628      	mov	r0, r5
   12ee2:	f013 fa63 	bl	263ac <net_buf_simple_add>
	ep->status = 0x00;
   12ee6:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12ee8:	f8a0 6001 	strh.w	r6, [r0, #1]
   12eec:	e7b6      	b.n	12e5c <hci_evt_encode+0x11c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   12eee:	4b72      	ldr	r3, [pc, #456]	; (130b8 <hci_evt_encode+0x378>)
   12ef0:	681b      	ldr	r3, [r3, #0]
   12ef2:	0219      	lsls	r1, r3, #8
   12ef4:	d5b2      	bpl.n	12e5c <hci_evt_encode+0x11c>
   12ef6:	3508      	adds	r5, #8
   12ef8:	2102      	movs	r1, #2
   12efa:	4628      	mov	r0, r5
   12efc:	f013 fa56 	bl	263ac <net_buf_simple_add>
	hdr->len = len;
   12f00:	2102      	movs	r1, #2
	hdr->evt = evt;
   12f02:	2357      	movs	r3, #87	; 0x57
   12f04:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12f06:	7041      	strb	r1, [r0, #1]
   12f08:	4628      	mov	r0, r5
   12f0a:	f013 fa4f 	bl	263ac <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   12f0e:	8006      	strh	r6, [r0, #0]
   12f10:	e7a4      	b.n	12e5c <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f12:	4b66      	ldr	r3, [pc, #408]	; (130ac <hci_evt_encode+0x36c>)
   12f14:	685b      	ldr	r3, [r3, #4]
   12f16:	009a      	lsls	r2, r3, #2
   12f18:	d5a0      	bpl.n	12e5c <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   12f1a:	4b65      	ldr	r3, [pc, #404]	; (130b0 <hci_evt_encode+0x370>)
   12f1c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f1e:	031b      	lsls	r3, r3, #12
   12f20:	d59c      	bpl.n	12e5c <hci_evt_encode+0x11c>
   12f22:	3508      	adds	r5, #8
   12f24:	2102      	movs	r1, #2
   12f26:	4628      	mov	r0, r5
   12f28:	f013 fa40 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   12f2c:	233e      	movs	r3, #62	; 0x3e
   12f2e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12f30:	2304      	movs	r3, #4
   12f32:	7043      	strb	r3, [r0, #1]
   12f34:	2101      	movs	r1, #1
   12f36:	4628      	mov	r0, r5
   12f38:	f013 fa38 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   12f3c:	2314      	movs	r3, #20
   12f3e:	7003      	strb	r3, [r0, #0]
   12f40:	2103      	movs	r1, #3
   12f42:	4628      	mov	r0, r5
   12f44:	f013 fa32 	bl	263ac <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   12f48:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   12f4a:	7f23      	ldrb	r3, [r4, #28]
   12f4c:	7083      	strb	r3, [r0, #2]
   12f4e:	e785      	b.n	12e5c <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f50:	4b56      	ldr	r3, [pc, #344]	; (130ac <hci_evt_encode+0x36c>)
   12f52:	685b      	ldr	r3, [r3, #4]
   12f54:	009f      	lsls	r7, r3, #2
   12f56:	d503      	bpl.n	12f60 <hci_evt_encode+0x220>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   12f58:	4b55      	ldr	r3, [pc, #340]	; (130b0 <hci_evt_encode+0x370>)
   12f5a:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f5c:	0518      	lsls	r0, r3, #20
   12f5e:	d45c      	bmi.n	1301a <hci_evt_encode+0x2da>
   12f60:	7f62      	ldrb	r2, [r4, #29]
   12f62:	7fa0      	ldrb	r0, [r4, #30]
   12f64:	4955      	ldr	r1, [pc, #340]	; (130bc <hci_evt_encode+0x37c>)
   12f66:	4b56      	ldr	r3, [pc, #344]	; (130c0 <hci_evt_encode+0x380>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   12f68:	7f24      	ldrb	r4, [r4, #28]
   12f6a:	2a00      	cmp	r2, #0
   12f6c:	fa92 f2a2 	rbit	r2, r2
   12f70:	fab2 f282 	clz	r2, r2
   12f74:	eba3 0301 	sub.w	r3, r3, r1
   12f78:	bf08      	it	eq
   12f7a:	f04f 32ff 	moveq.w	r2, #4294967295
   12f7e:	2800      	cmp	r0, #0
   12f80:	fa90 f0a0 	rbit	r0, r0
   12f84:	fab0 f080 	clz	r0, r0
   12f88:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   12f8c:	bf08      	it	eq
   12f8e:	f04f 30ff 	moveq.w	r0, #4294967295
   12f92:	1c51      	adds	r1, r2, #1
   12f94:	3001      	adds	r0, #1
   12f96:	019b      	lsls	r3, r3, #6
   12f98:	9007      	str	r0, [sp, #28]
   12f9a:	9106      	str	r1, [sp, #24]
   12f9c:	4849      	ldr	r0, [pc, #292]	; (130c4 <hci_evt_encode+0x384>)
   12f9e:	f043 0302 	orr.w	r3, r3, #2
   12fa2:	2204      	movs	r2, #4
   12fa4:	a904      	add	r1, sp, #16
   12fa6:	e9cd 6404 	strd	r6, r4, [sp, #16]
   12faa:	f00f f9f5 	bl	22398 <log_n>
		return;
   12fae:	e755      	b.n	12e5c <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   12fb0:	4a45      	ldr	r2, [pc, #276]	; (130c8 <hci_evt_encode+0x388>)
   12fb2:	4946      	ldr	r1, [pc, #280]	; (130cc <hci_evt_encode+0x38c>)
   12fb4:	4846      	ldr	r0, [pc, #280]	; (130d0 <hci_evt_encode+0x390>)
   12fb6:	f241 734e 	movw	r3, #5966	; 0x174e
   12fba:	f00e fd01 	bl	219c0 <printk>
   12fbe:	4040      	eors	r0, r0
   12fc0:	f380 8811 	msr	BASEPRI, r0
   12fc4:	f04f 0003 	mov.w	r0, #3
   12fc8:	df02      	svc	2
}
   12fca:	e747      	b.n	12e5c <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fcc:	4b37      	ldr	r3, [pc, #220]	; (130ac <hci_evt_encode+0x36c>)
   12fce:	685b      	ldr	r3, [r3, #4]
   12fd0:	009a      	lsls	r2, r3, #2
   12fd2:	f57f af43 	bpl.w	12e5c <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   12fd6:	4b36      	ldr	r3, [pc, #216]	; (130b0 <hci_evt_encode+0x370>)
   12fd8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fda:	065b      	lsls	r3, r3, #25
   12fdc:	f57f af3e 	bpl.w	12e5c <hci_evt_encode+0x11c>
   12fe0:	3508      	adds	r5, #8
   12fe2:	2102      	movs	r1, #2
   12fe4:	4628      	mov	r0, r5
   12fe6:	f013 f9e1 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   12fea:	233e      	movs	r3, #62	; 0x3e
   12fec:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12fee:	230b      	movs	r3, #11
   12ff0:	7043      	strb	r3, [r0, #1]
   12ff2:	2101      	movs	r1, #1
   12ff4:	4628      	mov	r0, r5
   12ff6:	f013 f9d9 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   12ffa:	2307      	movs	r3, #7
   12ffc:	7003      	strb	r3, [r0, #0]
   12ffe:	210a      	movs	r1, #10
   13000:	4628      	mov	r0, r5
   13002:	f013 f9d3 	bl	263ac <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13006:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   13008:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1300a:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   1300c:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   1300e:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   13010:	8c23      	ldrh	r3, [r4, #32]
   13012:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   13014:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13016:	8103      	strh	r3, [r0, #8]
   13018:	e720      	b.n	12e5c <hci_evt_encode+0x11c>
   1301a:	3508      	adds	r5, #8
   1301c:	2102      	movs	r1, #2
   1301e:	4628      	mov	r0, r5
   13020:	f013 f9c4 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   13024:	233e      	movs	r3, #62	; 0x3e
   13026:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13028:	2306      	movs	r3, #6
   1302a:	7043      	strb	r3, [r0, #1]
   1302c:	2101      	movs	r1, #1
   1302e:	4628      	mov	r0, r5
   13030:	f013 f9bc 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   13034:	230c      	movs	r3, #12
   13036:	7003      	strb	r3, [r0, #0]
   13038:	2105      	movs	r1, #5
   1303a:	4628      	mov	r0, r5
   1303c:	f013 f9b6 	bl	263ac <net_buf_simple_add>
	sep->status = pu->status;
   13040:	7f23      	ldrb	r3, [r4, #28]
   13042:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   13044:	f8a0 6001 	strh.w	r6, [r0, #1]
   13048:	7f62      	ldrb	r2, [r4, #29]
   1304a:	2a00      	cmp	r2, #0
   1304c:	fa92 f3a2 	rbit	r3, r2
   13050:	fab3 f383 	clz	r3, r3
   13054:	bf08      	it	eq
   13056:	f04f 33ff 	moveq.w	r3, #4294967295
   1305a:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   1305c:	70c3      	strb	r3, [r0, #3]
   1305e:	7fa2      	ldrb	r2, [r4, #30]
   13060:	fa92 f3a2 	rbit	r3, r2
   13064:	2a00      	cmp	r2, #0
   13066:	fab3 f383 	clz	r3, r3
   1306a:	bf08      	it	eq
   1306c:	f04f 33ff 	moveq.w	r3, #4294967295
   13070:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   13072:	7103      	strb	r3, [r0, #4]
   13074:	e6f2      	b.n	12e5c <hci_evt_encode+0x11c>
		le_unknown_rsp(pdu_data, handle, buf);
   13076:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   1307a:	290e      	cmp	r1, #14
   1307c:	f000 8115 	beq.w	132aa <hci_evt_encode+0x56a>
   13080:	4b0e      	ldr	r3, [pc, #56]	; (130bc <hci_evt_encode+0x37c>)
   13082:	4a0f      	ldr	r2, [pc, #60]	; (130c0 <hci_evt_encode+0x380>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   13084:	4813      	ldr	r0, [pc, #76]	; (130d4 <hci_evt_encode+0x394>)
   13086:	1ad2      	subs	r2, r2, r3
   13088:	08d2      	lsrs	r2, r2, #3
   1308a:	0192      	lsls	r2, r2, #6
   1308c:	f042 0202 	orr.w	r2, r2, #2
}
   13090:	b008      	add	sp, #32
   13092:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   13096:	f00f b936 	b.w	22306 <log_1>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   1309a:	460b      	mov	r3, r1
   1309c:	4632      	mov	r2, r6
   1309e:	4601      	mov	r1, r0
   130a0:	2000      	movs	r0, #0
}
   130a2:	b008      	add	sp, #32
   130a4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   130a8:	f7fe bf82 	b.w	11fb0 <le_remote_feat_complete>
   130ac:	200001a8 	.word	0x200001a8
   130b0:	200001b0 	.word	0x200001b0
   130b4:	2000d9e4 	.word	0x2000d9e4
   130b8:	2000ab50 	.word	0x2000ab50
   130bc:	0002775c 	.word	0x0002775c
   130c0:	0002779c 	.word	0x0002779c
   130c4:	00028490 	.word	0x00028490
   130c8:	00028454 	.word	0x00028454
   130cc:	0002833c 	.word	0x0002833c
   130d0:	000282a4 	.word	0x000282a4
   130d4:	000284bc 	.word	0x000284bc
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   130d8:	4b89      	ldr	r3, [pc, #548]	; (13300 <hci_evt_encode+0x5c0>)
   130da:	681b      	ldr	r3, [r3, #0]
   130dc:	061f      	lsls	r7, r3, #24
   130de:	f57f aebd 	bpl.w	12e5c <hci_evt_encode+0x11c>
   130e2:	3508      	adds	r5, #8
   130e4:	2102      	movs	r1, #2
   130e6:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   130e8:	f894 4020 	ldrb.w	r4, [r4, #32]
   130ec:	f013 f95e 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   130f0:	2308      	movs	r3, #8
	hdr->len = len;
   130f2:	2104      	movs	r1, #4
	hdr->evt = evt;
   130f4:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   130f6:	7041      	strb	r1, [r0, #1]
   130f8:	4628      	mov	r0, r5
   130fa:	f013 f957 	bl	263ac <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   130fe:	fab4 f384 	clz	r3, r4
   13102:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   13104:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13106:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1310a:	70c3      	strb	r3, [r0, #3]
   1310c:	e6a6      	b.n	12e5c <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1310e:	4b7c      	ldr	r3, [pc, #496]	; (13300 <hci_evt_encode+0x5c0>)
   13110:	685b      	ldr	r3, [r3, #4]
   13112:	0098      	lsls	r0, r3, #2
   13114:	d571      	bpl.n	131fa <hci_evt_encode+0x4ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   13116:	4b7b      	ldr	r3, [pc, #492]	; (13304 <hci_evt_encode+0x5c4>)
   13118:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1311a:	0699      	lsls	r1, r3, #26
   1311c:	d56d      	bpl.n	131fa <hci_evt_encode+0x4ba>
   1311e:	3508      	adds	r5, #8
   13120:	2102      	movs	r1, #2
   13122:	4628      	mov	r0, r5
   13124:	f013 f942 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   13128:	233e      	movs	r3, #62	; 0x3e
   1312a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1312c:	230b      	movs	r3, #11
   1312e:	7043      	strb	r3, [r0, #1]
   13130:	2101      	movs	r1, #1
   13132:	4628      	mov	r0, r5
   13134:	f013 f93a 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   13138:	2306      	movs	r3, #6
   1313a:	7003      	strb	r3, [r0, #0]
   1313c:	210a      	movs	r1, #10
   1313e:	4628      	mov	r0, r5
   13140:	f013 f934 	bl	263ac <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   13144:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   13146:	8c23      	ldrh	r3, [r4, #32]
   13148:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   1314a:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1314c:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   1314e:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   13150:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   13152:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13154:	8103      	strh	r3, [r0, #8]
   13156:	e681      	b.n	12e5c <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13158:	4b69      	ldr	r3, [pc, #420]	; (13300 <hci_evt_encode+0x5c0>)
   1315a:	685b      	ldr	r3, [r3, #4]
   1315c:	0099      	lsls	r1, r3, #2
   1315e:	f57f ae7d 	bpl.w	12e5c <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   13162:	4b68      	ldr	r3, [pc, #416]	; (13304 <hci_evt_encode+0x5c4>)
   13164:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13166:	06da      	lsls	r2, r3, #27
   13168:	f57f ae78 	bpl.w	12e5c <hci_evt_encode+0x11c>
   1316c:	3508      	adds	r5, #8
   1316e:	2102      	movs	r1, #2
   13170:	4628      	mov	r0, r5
   13172:	f013 f91b 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   13176:	233e      	movs	r3, #62	; 0x3e
   13178:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1317a:	230d      	movs	r3, #13
   1317c:	7043      	strb	r3, [r0, #1]
   1317e:	2101      	movs	r1, #1
   13180:	4628      	mov	r0, r5
   13182:	f013 f913 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   13186:	2305      	movs	r3, #5
   13188:	7003      	strb	r3, [r0, #0]
   1318a:	210c      	movs	r1, #12
   1318c:	4628      	mov	r0, r5
   1318e:	f013 f90d 	bl	263ac <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   13192:	f104 0120 	add.w	r1, r4, #32
   13196:	4605      	mov	r5, r0
   13198:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   1319a:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   1319e:	f011 f8b1 	bl	24304 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   131a2:	2202      	movs	r2, #2
   131a4:	f104 0128 	add.w	r1, r4, #40	; 0x28
   131a8:	f105 000a 	add.w	r0, r5, #10
}
   131ac:	b008      	add	sp, #32
   131ae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   131b2:	f011 b8a7 	b.w	24304 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   131b6:	4b52      	ldr	r3, [pc, #328]	; (13300 <hci_evt_encode+0x5c0>)
   131b8:	681b      	ldr	r3, [r3, #0]
   131ba:	061b      	lsls	r3, r3, #24
   131bc:	f04f 0400 	mov.w	r4, #0
   131c0:	f57f ae4c 	bpl.w	12e5c <hci_evt_encode+0x11c>
   131c4:	3508      	adds	r5, #8
   131c6:	2102      	movs	r1, #2
   131c8:	4628      	mov	r0, r5
   131ca:	f013 f8ef 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   131ce:	2308      	movs	r3, #8
	hdr->len = len;
   131d0:	2104      	movs	r1, #4
	hdr->evt = evt;
   131d2:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   131d4:	7041      	strb	r1, [r0, #1]
   131d6:	4628      	mov	r0, r5
   131d8:	f013 f8e8 	bl	263ac <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   131dc:	2301      	movs	r3, #1
	ep->status = err;
   131de:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   131e0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   131e4:	70c3      	strb	r3, [r0, #3]
   131e6:	e639      	b.n	12e5c <hci_evt_encode+0x11c>
		ll_rl_crpa_set(cc->peer_addr_type,
   131e8:	7fa0      	ldrb	r0, [r4, #30]
   131ea:	f104 0325 	add.w	r3, r4, #37	; 0x25
   131ee:	22ff      	movs	r2, #255	; 0xff
   131f0:	f104 011f 	add.w	r1, r4, #31
   131f4:	f006 fe16 	bl	19e24 <ll_rl_crpa_set>
   131f8:	e5dd      	b.n	12db6 <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   131fa:	2300      	movs	r3, #0
   131fc:	e9cd 3301 	strd	r3, r3, [sp, #4]
   13200:	9300      	str	r3, [sp, #0]
   13202:	221a      	movs	r2, #26
   13204:	2102      	movs	r1, #2
   13206:	4630      	mov	r0, r6
   13208:	f002 fc40 	bl	15a8c <ll_conn_update>
		return;
   1320c:	e626      	b.n	12e5c <hci_evt_encode+0x11c>
   1320e:	3508      	adds	r5, #8
   13210:	2102      	movs	r1, #2
   13212:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13214:	f1b8 0f00 	cmp.w	r8, #0
   13218:	d14c      	bne.n	132b4 <hci_evt_encode+0x574>
   1321a:	f013 f8c7 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   1321e:	233e      	movs	r3, #62	; 0x3e
   13220:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13222:	2313      	movs	r3, #19
   13224:	7043      	strb	r3, [r0, #1]
   13226:	2101      	movs	r1, #1
   13228:	4628      	mov	r0, r5
   1322a:	f013 f8bf 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   1322e:	2301      	movs	r3, #1
   13230:	7003      	strb	r3, [r0, #0]
   13232:	2112      	movs	r1, #18
   13234:	4628      	mov	r0, r5
   13236:	f013 f8b9 	bl	263ac <net_buf_simple_add>
   1323a:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   1323c:	2212      	movs	r2, #18
   1323e:	4641      	mov	r1, r8
   13240:	f011 f88b 	bl	2435a <memset>
		lecc->status = status;
   13244:	7027      	strb	r7, [r4, #0]
		return;
   13246:	e609      	b.n	12e5c <hci_evt_encode+0x11c>
   13248:	3508      	adds	r5, #8
   1324a:	2102      	movs	r1, #2
   1324c:	4628      	mov	r0, r5
   1324e:	f013 f8ad 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   13252:	233e      	movs	r3, #62	; 0x3e
   13254:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13256:	2313      	movs	r3, #19
   13258:	7043      	strb	r3, [r0, #1]
   1325a:	2101      	movs	r1, #1
   1325c:	4628      	mov	r0, r5
   1325e:	f013 f8a5 	bl	263ac <net_buf_simple_add>
   13262:	4603      	mov	r3, r0
	me->subevent = subevt;
   13264:	2201      	movs	r2, #1
   13266:	701a      	strb	r2, [r3, #0]
   13268:	4628      	mov	r0, r5
   1326a:	2112      	movs	r1, #18
   1326c:	f013 f89e 	bl	263ac <net_buf_simple_add>
	lecc->status = 0x00;
   13270:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   13272:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   13276:	7f63      	ldrb	r3, [r4, #29]
   13278:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   1327a:	7fa3      	ldrb	r3, [r4, #30]
   1327c:	f003 0301 	and.w	r3, r3, #1
   13280:	4605      	mov	r5, r0
   13282:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   13284:	2206      	movs	r2, #6
   13286:	f104 011f 	add.w	r1, r4, #31
   1328a:	3005      	adds	r0, #5
   1328c:	f011 f83a 	bl	24304 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13290:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   13292:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   13294:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   13296:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   1329a:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   1329e:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   132a2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   132a6:	746b      	strb	r3, [r5, #17]
   132a8:	e5d8      	b.n	12e5c <hci_evt_encode+0x11c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   132aa:	462b      	mov	r3, r5
   132ac:	4632      	mov	r2, r6
   132ae:	2100      	movs	r1, #0
   132b0:	201a      	movs	r0, #26
   132b2:	e6f6      	b.n	130a2 <hci_evt_encode+0x362>
   132b4:	f013 f87a 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   132b8:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   132ba:	231f      	movs	r3, #31
	hdr->evt = evt;
   132bc:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   132be:	7043      	strb	r3, [r0, #1]
   132c0:	2101      	movs	r1, #1
   132c2:	4628      	mov	r0, r5
   132c4:	f013 f872 	bl	263ac <net_buf_simple_add>
	me->subevent = subevt;
   132c8:	230a      	movs	r3, #10
   132ca:	7003      	strb	r3, [r0, #0]
   132cc:	211e      	movs	r1, #30
   132ce:	4628      	mov	r0, r5
   132d0:	f013 f86c 	bl	263ac <net_buf_simple_add>
   132d4:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   132d6:	221e      	movs	r2, #30
   132d8:	2100      	movs	r1, #0
   132da:	f011 f83e 	bl	2435a <memset>
			leecc->status = status;
   132de:	7027      	strb	r7, [r4, #0]
			return;
   132e0:	e5bc      	b.n	12e5c <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   132e2:	4a09      	ldr	r2, [pc, #36]	; (13308 <hci_evt_encode+0x5c8>)
   132e4:	4909      	ldr	r1, [pc, #36]	; (1330c <hci_evt_encode+0x5cc>)
   132e6:	480a      	ldr	r0, [pc, #40]	; (13310 <hci_evt_encode+0x5d0>)
   132e8:	f241 6385 	movw	r3, #5765	; 0x1685
   132ec:	f00e fb68 	bl	219c0 <printk>
   132f0:	4040      	eors	r0, r0
   132f2:	f380 8811 	msr	BASEPRI, r0
   132f6:	f04f 0003 	mov.w	r0, #3
   132fa:	df02      	svc	2
		return;
   132fc:	e5ae      	b.n	12e5c <hci_evt_encode+0x11c>
   132fe:	bf00      	nop
   13300:	200001a8 	.word	0x200001a8
   13304:	200001b0 	.word	0x200001b0
   13308:	00028454 	.word	0x00028454
   1330c:	0002833c 	.word	0x0002833c
   13310:	000282a4 	.word	0x000282a4

00013314 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   13314:	b570      	push	{r4, r5, r6, lr}
   13316:	f100 0408 	add.w	r4, r0, #8
   1331a:	460e      	mov	r6, r1
   1331c:	4620      	mov	r0, r4
   1331e:	2102      	movs	r1, #2
   13320:	4615      	mov	r5, r2
   13322:	f013 f843 	bl	263ac <net_buf_simple_add>
	hdr->evt = evt;
   13326:	2313      	movs	r3, #19
	hdr->len = len;
   13328:	2105      	movs	r1, #5
	hdr->evt = evt;
   1332a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1332c:	7041      	strb	r1, [r0, #1]
   1332e:	4620      	mov	r0, r4
   13330:	f013 f83c 	bl	263ac <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   13334:	2301      	movs	r3, #1
   13336:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   13338:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   1333c:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   13340:	bd70      	pop	{r4, r5, r6, pc}
   13342:	bf00      	nop

00013344 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   13344:	7903      	ldrb	r3, [r0, #4]
   13346:	2b03      	cmp	r3, #3
   13348:	d009      	beq.n	1335e <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   1334a:	2b13      	cmp	r3, #19
   1334c:	d005      	beq.n	1335a <hci_get_class+0x16>
   1334e:	3b14      	subs	r3, #20
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   13350:	2b05      	cmp	r3, #5
   13352:	bf94      	ite	ls
   13354:	2003      	movls	r0, #3
   13356:	2000      	movhi	r0, #0
   13358:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   1335a:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   1335c:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   1335e:	7f03      	ldrb	r3, [r0, #28]
   13360:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   13364:	2b03      	cmp	r3, #3
   13366:	bf0c      	ite	eq
   13368:	2004      	moveq	r0, #4
   1336a:	2005      	movne	r0, #5
   1336c:	4770      	bx	lr
   1336e:	bf00      	nop

00013370 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   13370:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   13372:	4b0b      	ldr	r3, [pc, #44]	; (133a0 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13374:	490b      	ldr	r1, [pc, #44]	; (133a4 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   13376:	4a0c      	ldr	r2, [pc, #48]	; (133a8 <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   13378:	f04f 34ff 	mov.w	r4, #4294967295
   1337c:	f641 75ff 	movw	r5, #8191	; 0x1fff
   13380:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   13384:	2400      	movs	r4, #0
   13386:	2500      	movs	r5, #0
   13388:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   1338c:	4b07      	ldr	r3, [pc, #28]	; (133ac <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   1338e:	201f      	movs	r0, #31
   13390:	2100      	movs	r1, #0
   13392:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   13396:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   13398:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   1339a:	601a      	str	r2, [r3, #0]
}
   1339c:	4770      	bx	lr
   1339e:	bf00      	nop
   133a0:	200001a8 	.word	0x200001a8
   133a4:	2000ab50 	.word	0x2000ab50
   133a8:	200001b0 	.word	0x200001b0
   133ac:	2000d9e4 	.word	0x2000d9e4

000133b0 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   133b0:	f007 bc72 	b.w	1ac98 <lll_csrand_get>

000133b4 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   133b4:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   133b6:	2300      	movs	r3, #0
   133b8:	f009 f96e 	bl	1c698 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   133bc:	2000      	movs	r0, #0
   133be:	bd08      	pop	{r3, pc}

000133c0 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   133c0:	b510      	push	{r4, lr}
   133c2:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   133c4:	f007 fc9e 	bl	1ad04 <lll_reset>
	LL_ASSERT(!err);
   133c8:	b950      	cbnz	r0, 133e0 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   133ca:	f007 ffc9 	bl	1b360 <lll_adv_reset>
	LL_ASSERT(!err);
   133ce:	b9c0      	cbnz	r0, 13402 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   133d0:	f008 fc5c 	bl	1bc8c <lll_conn_reset>
	LL_ASSERT(!err);
   133d4:	bb30      	cbnz	r0, 13424 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   133d6:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   133d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   133dc:	f00c bf90 	b.w	20300 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   133e0:	4a19      	ldr	r2, [pc, #100]	; (13448 <perform_lll_reset+0x88>)
   133e2:	491a      	ldr	r1, [pc, #104]	; (1344c <perform_lll_reset+0x8c>)
   133e4:	481a      	ldr	r0, [pc, #104]	; (13450 <perform_lll_reset+0x90>)
   133e6:	f240 637c 	movw	r3, #1660	; 0x67c
   133ea:	f00e fae9 	bl	219c0 <printk>
   133ee:	4040      	eors	r0, r0
   133f0:	f380 8811 	msr	BASEPRI, r0
   133f4:	f04f 0003 	mov.w	r0, #3
   133f8:	df02      	svc	2
	err = lll_adv_reset();
   133fa:	f007 ffb1 	bl	1b360 <lll_adv_reset>
	LL_ASSERT(!err);
   133fe:	2800      	cmp	r0, #0
   13400:	d0e6      	beq.n	133d0 <perform_lll_reset+0x10>
   13402:	4a11      	ldr	r2, [pc, #68]	; (13448 <perform_lll_reset+0x88>)
   13404:	4911      	ldr	r1, [pc, #68]	; (1344c <perform_lll_reset+0x8c>)
   13406:	4812      	ldr	r0, [pc, #72]	; (13450 <perform_lll_reset+0x90>)
   13408:	f240 6381 	movw	r3, #1665	; 0x681
   1340c:	f00e fad8 	bl	219c0 <printk>
   13410:	4040      	eors	r0, r0
   13412:	f380 8811 	msr	BASEPRI, r0
   13416:	f04f 0003 	mov.w	r0, #3
   1341a:	df02      	svc	2
	err = lll_conn_reset();
   1341c:	f008 fc36 	bl	1bc8c <lll_conn_reset>
	LL_ASSERT(!err);
   13420:	2800      	cmp	r0, #0
   13422:	d0d8      	beq.n	133d6 <perform_lll_reset+0x16>
   13424:	4a08      	ldr	r2, [pc, #32]	; (13448 <perform_lll_reset+0x88>)
   13426:	4909      	ldr	r1, [pc, #36]	; (1344c <perform_lll_reset+0x8c>)
   13428:	4809      	ldr	r0, [pc, #36]	; (13450 <perform_lll_reset+0x90>)
   1342a:	f240 638d 	movw	r3, #1677	; 0x68d
   1342e:	f00e fac7 	bl	219c0 <printk>
   13432:	4040      	eors	r0, r0
   13434:	f380 8811 	msr	BASEPRI, r0
   13438:	f04f 0003 	mov.w	r0, #3
   1343c:	df02      	svc	2
   1343e:	4620      	mov	r0, r4
}
   13440:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13444:	f00c bf5c 	b.w	20300 <z_impl_k_sem_give>
   13448:	000284e8 	.word	0x000284e8
   1344c:	00028524 	.word	0x00028524
   13450:	000282a4 	.word	0x000282a4

00013454 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   13454:	6008      	str	r0, [r1, #0]
   13456:	4801      	ldr	r0, [pc, #4]	; (1345c <ull_ticker_status_give+0x8>)
   13458:	f00c bf52 	b.w	20300 <z_impl_k_sem_give>
   1345c:	2000ddd4 	.word	0x2000ddd4

00013460 <disabled_cb>:
   13460:	f00c bf4e 	b.w	20300 <z_impl_k_sem_give>

00013464 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   13464:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13468:	4e2f      	ldr	r6, [pc, #188]	; (13528 <tx_cmplt_get+0xc4>)
{
   1346a:	460c      	mov	r4, r1
   1346c:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   1346e:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   13470:	7872      	ldrb	r2, [r6, #1]
   13472:	7831      	ldrb	r1, [r6, #0]
   13474:	429a      	cmp	r2, r3
   13476:	bf9c      	itt	ls
   13478:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   1347a:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
   1347c:	4599      	cmp	r9, r3
{
   1347e:	4682      	mov	sl, r0
   13480:	d049      	beq.n	13516 <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   13482:	fb13 f101 	smulbb	r1, r3, r1
   13486:	4d29      	ldr	r5, [pc, #164]	; (1352c <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   13488:	3301      	adds	r3, #1
   1348a:	b2db      	uxtb	r3, r3
		i = 0U;
   1348c:	429a      	cmp	r2, r3
   1348e:	bf08      	it	eq
   13490:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   13492:	186a      	adds	r2, r5, r1

	*idx = i;
   13494:	7023      	strb	r3, [r4, #0]
   13496:	d03e      	beq.n	13516 <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
   13498:	5a6b      	ldrh	r3, [r5, r1]
   1349a:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   1349c:	2700      	movs	r7, #0
   1349e:	f04f 0802 	mov.w	r8, #2
   134a2:	f04f 0b01 	mov.w	fp, #1
   134a6:	e022      	b.n	134ee <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   134a8:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   134aa:	f030 0303 	bics.w	r3, r0, #3
   134ae:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
   134b2:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   134b4:	d129      	bne.n	1350a <tx_cmplt_get+0xa6>
	if (*idx >= count) {
   134b6:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   134b8:	7872      	ldrb	r2, [r6, #1]
   134ba:	7831      	ldrb	r1, [r6, #0]
   134bc:	429a      	cmp	r2, r3
   134be:	bf9c      	itt	ls
   134c0:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   134c2:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   134c4:	454b      	cmp	r3, r9
   134c6:	d027      	beq.n	13518 <tx_cmplt_get+0xb4>
	i = *idx + 1;
   134c8:	f103 0c01 	add.w	ip, r3, #1
   134cc:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
   134d0:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
   134d4:	4562      	cmp	r2, ip
   134d6:	bf08      	it	eq
   134d8:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   134dc:	18ea      	adds	r2, r5, r3
	*idx = i;
   134de:	f884 c000 	strb.w	ip, [r4]
   134e2:	d019      	beq.n	13518 <tx_cmplt_get+0xb4>
   134e4:	5ae9      	ldrh	r1, [r5, r3]
   134e6:	f8ba 3000 	ldrh.w	r3, [sl]
   134ea:	4299      	cmp	r1, r3
   134ec:	d114      	bne.n	13518 <tx_cmplt_get+0xb4>
		node_tx = tx->node;
   134ee:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   134f0:	2801      	cmp	r0, #1
   134f2:	d9d9      	bls.n	134a8 <tx_cmplt_get+0x44>
   134f4:	f030 0303 	bics.w	r3, r0, #3
   134f8:	d00a      	beq.n	13510 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   134fa:	7903      	ldrb	r3, [r0, #4]
   134fc:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   13500:	3b01      	subs	r3, #1
   13502:	2b01      	cmp	r3, #1
   13504:	d90b      	bls.n	1351e <tx_cmplt_get+0xba>
   13506:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
   1350a:	f002 fa6d 	bl	159e8 <ll_tx_mem_release>
   1350e:	e7d2      	b.n	134b6 <tx_cmplt_get+0x52>
   13510:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   13514:	e7cf      	b.n	134b6 <tx_cmplt_get+0x52>
		return 0;
   13516:	2700      	movs	r7, #0

	return cmplt;
}
   13518:	4638      	mov	r0, r7
   1351a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   1351e:	3701      	adds	r7, #1
   13520:	f8c2 b004 	str.w	fp, [r2, #4]
   13524:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   13526:	e7f0      	b.n	1350a <tx_cmplt_get+0xa6>
   13528:	200004f8 	.word	0x200004f8
   1352c:	200004fc 	.word	0x200004fc

00013530 <rx_alloc>:
{
   13530:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   13534:	4e37      	ldr	r6, [pc, #220]	; (13614 <rx_alloc+0xe4>)
   13536:	7833      	ldrb	r3, [r6, #0]
   13538:	4298      	cmp	r0, r3
   1353a:	bf28      	it	cs
   1353c:	4618      	movcs	r0, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1353e:	b380      	cbz	r0, 135a2 <rx_alloc+0x72>
   13540:	4d35      	ldr	r5, [pc, #212]	; (13618 <rx_alloc+0xe8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   13542:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 1361c <rx_alloc+0xec>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13546:	78ec      	ldrb	r4, [r5, #3]
   13548:	f100 39ff 	add.w	r9, r0, #4294967295
   1354c:	fa5f f989 	uxtb.w	r9, r9
		link = mem_acquire(&mem_link_rx.free);
   13550:	1d37      	adds	r7, r6, #4
	if (last == count) {
   13552:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13554:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13556:	3401      	adds	r4, #1
   13558:	b2e4      	uxtb	r4, r4
		last = 0U;
   1355a:	42a2      	cmp	r2, r4
   1355c:	bf08      	it	eq
   1355e:	2400      	moveq	r4, #0
	if (last == first) {
   13560:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   13562:	4638      	mov	r0, r7
   13564:	d04b      	beq.n	135fe <rx_alloc+0xce>
   13566:	f7fd f825 	bl	105b4 <mem_acquire>
   1356a:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   1356c:	4640      	mov	r0, r8
		if (!link) {
   1356e:	f1ba 0f00 	cmp.w	sl, #0
   13572:	d042      	beq.n	135fa <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   13574:	f7fd f81e 	bl	105b4 <mem_acquire>
		if (!rx) {
   13578:	2800      	cmp	r0, #0
   1357a:	d045      	beq.n	13608 <rx_alloc+0xd8>
		rx->link = link;
   1357c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13580:	78ea      	ldrb	r2, [r5, #3]
   13582:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13584:	fb02 5303 	mla	r3, r2, r3, r5
   13588:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   1358a:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   1358c:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1358e:	f109 39ff 	add.w	r9, r9, #4294967295
	mem_link_rx.quota_pdu += delta;
   13592:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13594:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
   13598:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   1359a:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   1359e:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   135a0:	d1d7      	bne.n	13552 <rx_alloc+0x22>
	while (mem_link_rx.quota_pdu &&
   135a2:	b353      	cbz	r3, 135fa <rx_alloc+0xca>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   135a4:	4d1e      	ldr	r5, [pc, #120]	; (13620 <rx_alloc+0xf0>)
		link = mem_acquire(&mem_link_rx.free);
   135a6:	4f1f      	ldr	r7, [pc, #124]	; (13624 <rx_alloc+0xf4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   135a8:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   135aa:	f8df 8070 	ldr.w	r8, [pc, #112]	; 1361c <rx_alloc+0xec>
		link->mem = NULL;
   135ae:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   135b2:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   135b4:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   135b6:	3401      	adds	r4, #1
   135b8:	b2e4      	uxtb	r4, r4
		last = 0U;
   135ba:	42a2      	cmp	r2, r4
   135bc:	bf08      	it	eq
   135be:	2400      	moveq	r4, #0
	if (last == first) {
   135c0:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   135c2:	4638      	mov	r0, r7
   135c4:	d019      	beq.n	135fa <rx_alloc+0xca>
   135c6:	f7fc fff5 	bl	105b4 <mem_acquire>
   135ca:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   135cc:	4640      	mov	r0, r8
		if (!link) {
   135ce:	f1ba 0f00 	cmp.w	sl, #0
   135d2:	d012      	beq.n	135fa <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   135d4:	f7fc ffee 	bl	105b4 <mem_acquire>
		if (!rx) {
   135d8:	b1b0      	cbz	r0, 13608 <rx_alloc+0xd8>
		link->mem = NULL;
   135da:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   135de:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   135e2:	78ea      	ldrb	r2, [r5, #3]
   135e4:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   135e6:	fb02 5303 	mla	r3, r2, r3, r5
   135ea:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   135ec:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   135ee:	70ec      	strb	r4, [r5, #3]
   135f0:	3b01      	subs	r3, #1
   135f2:	b2db      	uxtb	r3, r3
   135f4:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   135f6:	2b00      	cmp	r3, #0
   135f8:	d1db      	bne.n	135b2 <rx_alloc+0x82>
}
   135fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!max) {
   135fe:	f1b9 0f00 	cmp.w	r9, #0
   13602:	d0fa      	beq.n	135fa <rx_alloc+0xca>
	while (mem_link_rx.quota_pdu &&
   13604:	7833      	ldrb	r3, [r6, #0]
   13606:	e7cc      	b.n	135a2 <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
   13608:	4650      	mov	r0, sl
   1360a:	4906      	ldr	r1, [pc, #24]	; (13624 <rx_alloc+0xf4>)
}
   1360c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   13610:	f7fc bfea 	b.w	105e8 <mem_release>
   13614:	2000dad4 	.word	0x2000dad4
   13618:	200003bc 	.word	0x200003bc
   1361c:	2000db34 	.word	0x2000db34
   13620:	200003a8 	.word	0x200003a8
   13624:	2000dad8 	.word	0x2000dad8

00013628 <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13628:	4b3a      	ldr	r3, [pc, #232]	; (13714 <init_reset+0xec>)
{
   1362a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1362e:	1d18      	adds	r0, r3, #4
   13630:	2203      	movs	r2, #3
   13632:	2134      	movs	r1, #52	; 0x34
   13634:	f7fc ff8e 	bl	10554 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   13638:	4b37      	ldr	r3, [pc, #220]	; (13718 <init_reset+0xf0>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1363a:	4d38      	ldr	r5, [pc, #224]	; (1371c <init_reset+0xf4>)
		link = mem_acquire(&mem_link_done.free);
   1363c:	4f36      	ldr	r7, [pc, #216]	; (13718 <init_reset+0xf0>)
		rx = mem_acquire(&mem_done.free);
   1363e:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 13714 <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   13642:	2203      	movs	r2, #3
   13644:	2108      	movs	r1, #8
   13646:	1d18      	adds	r0, r3, #4
   13648:	f7fc ff84 	bl	10554 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1364c:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   1364e:	786a      	ldrb	r2, [r5, #1]
   13650:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   13652:	3401      	adds	r4, #1
   13654:	b2e4      	uxtb	r4, r4
		last = 0U;
   13656:	42a2      	cmp	r2, r4
   13658:	bf08      	it	eq
   1365a:	2400      	moveq	r4, #0
	if (last == first) {
   1365c:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   1365e:	4638      	mov	r0, r7
   13660:	d013      	beq.n	1368a <init_reset+0x62>
   13662:	f7fc ffa7 	bl	105b4 <mem_acquire>
   13666:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   13668:	4640      	mov	r0, r8
		if (!link) {
   1366a:	b176      	cbz	r6, 1368a <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
   1366c:	f7fc ffa2 	bl	105b4 <mem_acquire>
		if (!rx) {
   13670:	b138      	cbz	r0, 13682 <init_reset+0x5a>
		rx->link = link;
   13672:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13674:	78ea      	ldrb	r2, [r5, #3]
   13676:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13678:	fb02 5303 	mla	r3, r2, r3, r5
   1367c:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   1367e:	70ec      	strb	r4, [r5, #3]
}
   13680:	e7e5      	b.n	1364e <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
   13682:	4925      	ldr	r1, [pc, #148]	; (13718 <init_reset+0xf0>)
   13684:	4630      	mov	r0, r6
   13686:	f7fc ffaf 	bl	105e8 <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   1368a:	4b25      	ldr	r3, [pc, #148]	; (13720 <init_reset+0xf8>)
   1368c:	2209      	movs	r2, #9
   1368e:	1d18      	adds	r0, r3, #4
   13690:	2148      	movs	r1, #72	; 0x48
   13692:	f7fc ff5f 	bl	10554 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   13696:	4b23      	ldr	r3, [pc, #140]	; (13724 <init_reset+0xfc>)
   13698:	220b      	movs	r2, #11
   1369a:	1d18      	adds	r0, r3, #4
   1369c:	2108      	movs	r1, #8
   1369e:	f7fc ff59 	bl	10554 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   136a2:	4820      	ldr	r0, [pc, #128]	; (13724 <init_reset+0xfc>)
   136a4:	f7fc ff86 	bl	105b4 <mem_acquire>
	LL_ASSERT(link);
   136a8:	4604      	mov	r4, r0
   136aa:	b1b8      	cbz	r0, 136dc <init_reset+0xb4>
	MEMQ_INIT(ull_rx, link);
   136ac:	4a1e      	ldr	r2, [pc, #120]	; (13728 <init_reset+0x100>)
   136ae:	4620      	mov	r0, r4
   136b0:	1f11      	subs	r1, r2, #4
   136b2:	f7fc ffd5 	bl	10660 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   136b6:	481b      	ldr	r0, [pc, #108]	; (13724 <init_reset+0xfc>)
   136b8:	f7fc ff7c 	bl	105b4 <mem_acquire>
	LL_ASSERT(link);
   136bc:	4604      	mov	r4, r0
   136be:	b1d8      	cbz	r0, 136f8 <init_reset+0xd0>
	MEMQ_INIT(ll_rx, link);
   136c0:	4a1a      	ldr	r2, [pc, #104]	; (1372c <init_reset+0x104>)
   136c2:	4620      	mov	r0, r4
   136c4:	1f11      	subs	r1, r2, #4
   136c6:	f7fc ffcb 	bl	10660 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   136ca:	4b19      	ldr	r3, [pc, #100]	; (13730 <init_reset+0x108>)
   136cc:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
   136ce:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   136d0:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   136d2:	f7ff ff2d 	bl	13530 <rx_alloc>
}
   136d6:	2000      	movs	r0, #0
   136d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
   136dc:	4a15      	ldr	r2, [pc, #84]	; (13734 <init_reset+0x10c>)
   136de:	4916      	ldr	r1, [pc, #88]	; (13738 <init_reset+0x110>)
   136e0:	4816      	ldr	r0, [pc, #88]	; (1373c <init_reset+0x114>)
   136e2:	f240 6363 	movw	r3, #1635	; 0x663
   136e6:	f00e f96b 	bl	219c0 <printk>
   136ea:	4040      	eors	r0, r0
   136ec:	f380 8811 	msr	BASEPRI, r0
   136f0:	f04f 0003 	mov.w	r0, #3
   136f4:	df02      	svc	2
   136f6:	e7d9      	b.n	136ac <init_reset+0x84>
	LL_ASSERT(link);
   136f8:	4a0e      	ldr	r2, [pc, #56]	; (13734 <init_reset+0x10c>)
   136fa:	490f      	ldr	r1, [pc, #60]	; (13738 <init_reset+0x110>)
   136fc:	480f      	ldr	r0, [pc, #60]	; (1373c <init_reset+0x114>)
   136fe:	f240 636a 	movw	r3, #1642	; 0x66a
   13702:	f00e f95d 	bl	219c0 <printk>
   13706:	4040      	eors	r0, r0
   13708:	f380 8811 	msr	BASEPRI, r0
   1370c:	f04f 0003 	mov.w	r0, #3
   13710:	df02      	svc	2
   13712:	e7d5      	b.n	136c0 <init_reset+0x98>
   13714:	2000da18 	.word	0x2000da18
   13718:	2000dab8 	.word	0x2000dab8
   1371c:	20000394 	.word	0x20000394
   13720:	2000db34 	.word	0x2000db34
   13724:	2000dad8 	.word	0x2000dad8
   13728:	2000ddcc 	.word	0x2000ddcc
   1372c:	2000ddc4 	.word	0x2000ddc4
   13730:	2000dad4 	.word	0x2000dad4
   13734:	000284e8 	.word	0x000284e8
   13738:	000287b0 	.word	0x000287b0
   1373c:	000282a4 	.word	0x000282a4

00013740 <rx_demux>:
{
   13740:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13744:	4c9e      	ldr	r4, [pc, #632]	; (139c0 <rx_demux+0x280>)
	k_sem_give(sem_recv);
   13746:	4e9f      	ldr	r6, [pc, #636]	; (139c4 <rx_demux+0x284>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   13748:	f8df b27c 	ldr.w	fp, [pc, #636]	; 139c8 <rx_demux+0x288>
{
   1374c:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   1374e:	e9d4 0100 	ldrd	r0, r1, [r4]
   13752:	aa03      	add	r2, sp, #12
   13754:	f7fc ff9c 	bl	10690 <memq_peek>
		if (link) {
   13758:	4607      	mov	r7, r0
   1375a:	2800      	cmp	r0, #0
   1375c:	d036      	beq.n	137cc <rx_demux+0x8c>
			LL_ASSERT(rx);
   1375e:	9b03      	ldr	r3, [sp, #12]
   13760:	2b00      	cmp	r3, #0
   13762:	f000 811e 	beq.w	139a2 <rx_demux+0x262>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   13766:	7818      	ldrb	r0, [r3, #0]
   13768:	aa04      	add	r2, sp, #16
   1376a:	a902      	add	r1, sp, #8
   1376c:	f005 fd34 	bl	191d8 <ull_conn_ack_by_last_peek>
			if (link_tx) {
   13770:	4605      	mov	r5, r0
   13772:	2800      	cmp	r0, #0
   13774:	d057      	beq.n	13826 <rx_demux+0xe6>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   13776:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   1377a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   1377e:	f891 9000 	ldrb.w	r9, [r1]
   13782:	f8ad 200a 	strh.w	r2, [sp, #10]
   13786:	f10d 0814 	add.w	r8, sp, #20
   1378a:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   1378c:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   13790:	f005 fd3e 	bl	19210 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   13794:	4629      	mov	r1, r5
   13796:	9a05      	ldr	r2, [sp, #20]
   13798:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   1379c:	f005 fd82 	bl	192a4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   137a0:	4628      	mov	r0, r5
   137a2:	f005 fcf1 	bl	19188 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   137a6:	4642      	mov	r2, r8
   137a8:	4639      	mov	r1, r7
   137aa:	4648      	mov	r0, r9
   137ac:	f005 fd14 	bl	191d8 <ull_conn_ack_by_last_peek>
	} while (link);
   137b0:	4605      	mov	r5, r0
   137b2:	2800      	cmp	r0, #0
   137b4:	d1ec      	bne.n	13790 <rx_demux+0x50>
	k_sem_give(sem_recv);
   137b6:	6830      	ldr	r0, [r6, #0]
   137b8:	f00c fda2 	bl	20300 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   137bc:	e9d4 0100 	ldrd	r0, r1, [r4]
   137c0:	aa03      	add	r2, sp, #12
   137c2:	f7fc ff65 	bl	10690 <memq_peek>
		if (link) {
   137c6:	4607      	mov	r7, r0
   137c8:	2800      	cmp	r0, #0
   137ca:	d1c8      	bne.n	1375e <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   137cc:	aa04      	add	r2, sp, #16
   137ce:	a902      	add	r1, sp, #8
   137d0:	f10d 0007 	add.w	r0, sp, #7
   137d4:	f005 fce4 	bl	191a0 <ull_conn_ack_peek>
			if (link) {
   137d8:	4605      	mov	r5, r0
   137da:	2800      	cmp	r0, #0
   137dc:	f000 80de 	beq.w	1399c <rx_demux+0x25c>
				rx_demux_conn_tx_ack(ack_last, handle,
   137e0:	9b04      	ldr	r3, [sp, #16]
   137e2:	9305      	str	r3, [sp, #20]
   137e4:	f89d 9007 	ldrb.w	r9, [sp, #7]
   137e8:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   137ec:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   137f0:	f10d 0814 	add.w	r8, sp, #20
   137f4:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   137f8:	f005 fd0a 	bl	19210 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   137fc:	4629      	mov	r1, r5
   137fe:	9a05      	ldr	r2, [sp, #20]
   13800:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13804:	f005 fd4e 	bl	192a4 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   13808:	4628      	mov	r0, r5
   1380a:	f005 fcbd 	bl	19188 <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1380e:	4642      	mov	r2, r8
   13810:	4639      	mov	r1, r7
   13812:	4648      	mov	r0, r9
   13814:	f005 fce0 	bl	191d8 <ull_conn_ack_by_last_peek>
	} while (link);
   13818:	4605      	mov	r5, r0
   1381a:	2800      	cmp	r0, #0
   1381c:	d1ec      	bne.n	137f8 <rx_demux+0xb8>
	k_sem_give(sem_recv);
   1381e:	6830      	ldr	r0, [r6, #0]
   13820:	f00c fd6e 	bl	20300 <z_impl_k_sem_give>
			if (nack) {
   13824:	e7ca      	b.n	137bc <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
   13826:	9b03      	ldr	r3, [sp, #12]
   13828:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1382a:	791b      	ldrb	r3, [r3, #4]
   1382c:	3b01      	subs	r3, #1
   1382e:	2b13      	cmp	r3, #19
   13830:	d80b      	bhi.n	1384a <rx_demux+0x10a>
   13832:	e8df f003 	tbb	[pc, r3]
   13836:	2918      	.short	0x2918
   13838:	0a0a0aad 	.word	0x0a0a0aad
   1383c:	0a0a0a0a 	.word	0x0a0a0a0a
   13840:	0a0a0a0a 	.word	0x0a0a0a0a
   13844:	0a0a0a0a 	.word	0x0a0a0a0a
   13848:	18a3      	.short	0x18a3
		LL_ASSERT(0);
   1384a:	4a60      	ldr	r2, [pc, #384]	; (139cc <rx_demux+0x28c>)
   1384c:	4960      	ldr	r1, [pc, #384]	; (139d0 <rx_demux+0x290>)
   1384e:	4861      	ldr	r0, [pc, #388]	; (139d4 <rx_demux+0x294>)
   13850:	f640 0334 	movw	r3, #2100	; 0x834
   13854:	f00e f8b4 	bl	219c0 <printk>
   13858:	4040      	eors	r0, r0
   1385a:	f380 8811 	msr	BASEPRI, r0
   1385e:	f04f 0003 	mov.w	r0, #3
   13862:	df02      	svc	2
			if (nack) {
   13864:	e773      	b.n	1374e <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13866:	4956      	ldr	r1, [pc, #344]	; (139c0 <rx_demux+0x280>)
   13868:	6860      	ldr	r0, [r4, #4]
   1386a:	2200      	movs	r2, #0
   1386c:	f7fc ff18 	bl	106a0 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13870:	4b59      	ldr	r3, [pc, #356]	; (139d8 <rx_demux+0x298>)
		ll_rx_put(link, rx);
   13872:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13874:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13876:	4638      	mov	r0, r7
   13878:	4a58      	ldr	r2, [pc, #352]	; (139dc <rx_demux+0x29c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1387a:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1387c:	f7fc fefe 	bl	1067c <memq_enqueue>
	k_sem_give(sem_recv);
   13880:	6830      	ldr	r0, [r6, #0]
   13882:	f00c fd3d 	bl	20300 <z_impl_k_sem_give>
			if (nack) {
   13886:	e799      	b.n	137bc <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13888:	494d      	ldr	r1, [pc, #308]	; (139c0 <rx_demux+0x280>)
   1388a:	6860      	ldr	r0, [r4, #4]
   1388c:	2200      	movs	r2, #0
   1388e:	f7fc ff07 	bl	106a0 <memq_dequeue>
		rx_demux_event_done(link, rx);
   13892:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   13894:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   13898:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
   1389c:	b17b      	cbz	r3, 138be <rx_demux+0x17e>
   1389e:	2b01      	cmp	r3, #1
   138a0:	f000 80c2 	beq.w	13a28 <rx_demux+0x2e8>
		LL_ASSERT(0);
   138a4:	4a49      	ldr	r2, [pc, #292]	; (139cc <rx_demux+0x28c>)
   138a6:	494a      	ldr	r1, [pc, #296]	; (139d0 <rx_demux+0x290>)
   138a8:	484a      	ldr	r0, [pc, #296]	; (139d4 <rx_demux+0x294>)
   138aa:	f640 0374 	movw	r3, #2164	; 0x874
   138ae:	f00e f887 	bl	219c0 <printk>
   138b2:	4040      	eors	r0, r0
   138b4:	f380 8811 	msr	BASEPRI, r0
   138b8:	f04f 0003 	mov.w	r0, #3
   138bc:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   138be:	4a48      	ldr	r2, [pc, #288]	; (139e0 <rx_demux+0x2a0>)
	done->extra.type = 0U;
   138c0:	2300      	movs	r3, #0
   138c2:	f885 3020 	strb.w	r3, [r5, #32]
	last = last + 1;
   138c6:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   138c8:	7851      	ldrb	r1, [r2, #1]
	last = last + 1;
   138ca:	3301      	adds	r3, #1
   138cc:	b2db      	uxtb	r3, r3
		last = 0U;
   138ce:	4299      	cmp	r1, r3
   138d0:	bf08      	it	eq
   138d2:	2300      	moveq	r3, #0
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   138d4:	7891      	ldrb	r1, [r2, #2]
	if (last == first) {
   138d6:	4299      	cmp	r1, r3
   138d8:	f000 80b7 	beq.w	13a4a <rx_demux+0x30a>
	done->hdr.link = link;
   138dc:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   138de:	78d0      	ldrb	r0, [r2, #3]
   138e0:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   138e2:	fb00 2101 	mla	r1, r0, r1, r2
   138e6:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   138e8:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   138ea:	4d3e      	ldr	r5, [pc, #248]	; (139e4 <rx_demux+0x2a4>)
   138ec:	78aa      	ldrb	r2, [r5, #2]
	if (first == last) {
   138ee:	78e9      	ldrb	r1, [r5, #3]
   138f0:	782b      	ldrb	r3, [r5, #0]
   138f2:	4291      	cmp	r1, r2
   138f4:	d025      	beq.n	13942 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   138f6:	f105 0a04 	add.w	sl, r5, #4
   138fa:	fb02 a303 	mla	r3, r2, r3, sl
	while (next) {
   138fe:	b303      	cbz	r3, 13942 <rx_demux+0x202>
		uint8_t is_aborted = next->is_aborted;
   13900:	f893 2020 	ldrb.w	r2, [r3, #32]
		if (!is_aborted) {
   13904:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   13906:	f3c2 0740 	ubfx	r7, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   1390a:	f002 0801 	and.w	r8, r2, #1
		if (!is_aborted) {
   1390e:	d56d      	bpl.n	139ec <rx_demux+0x2ac>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   13910:	78e9      	ldrb	r1, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   13912:	78ab      	ldrb	r3, [r5, #2]
   13914:	782a      	ldrb	r2, [r5, #0]
   13916:	7868      	ldrb	r0, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   13918:	4299      	cmp	r1, r3
   1391a:	d012      	beq.n	13942 <rx_demux+0x202>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   1391c:	3301      	adds	r3, #1
   1391e:	b2db      	uxtb	r3, r3
	if (_first == count) {
   13920:	4298      	cmp	r0, r3
   13922:	d07b      	beq.n	13a1c <rx_demux+0x2dc>
	if (first == last) {
   13924:	4299      	cmp	r1, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   13926:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   13928:	d00b      	beq.n	13942 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   1392a:	fb03 a302 	mla	r3, r3, r2, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   1392e:	b143      	cbz	r3, 13942 <rx_demux+0x202>
   13930:	2f00      	cmp	r7, #0
   13932:	d1e5      	bne.n	13900 <rx_demux+0x1c0>
   13934:	f1b8 0f00 	cmp.w	r8, #0
   13938:	d003      	beq.n	13942 <rx_demux+0x202>
   1393a:	f893 2020 	ldrb.w	r2, [r3, #32]
   1393e:	07d2      	lsls	r2, r2, #31
   13940:	d5de      	bpl.n	13900 <rx_demux+0x1c0>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   13942:	f1b9 0f00 	cmp.w	r9, #0
   13946:	f43f af02 	beq.w	1374e <rx_demux+0xe>
	return hdr->ref;
   1394a:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   1394e:	2b00      	cmp	r3, #0
   13950:	f000 8089 	beq.w	13a66 <rx_demux+0x326>
	return hdr->ref--;
   13954:	f899 3000 	ldrb.w	r3, [r9]
   13958:	3b01      	subs	r3, #1
   1395a:	b2db      	uxtb	r3, r3
   1395c:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
   13960:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   13964:	2b00      	cmp	r3, #0
   13966:	f47f aef2 	bne.w	1374e <rx_demux+0xe>
   1396a:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1396e:	2b00      	cmp	r3, #0
   13970:	f43f aeed 	beq.w	1374e <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   13974:	f8d9 0008 	ldr.w	r0, [r9, #8]
   13978:	4798      	blx	r3
			if (nack) {
   1397a:	e6e8      	b.n	1374e <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   1397c:	4910      	ldr	r1, [pc, #64]	; (139c0 <rx_demux+0x280>)
   1397e:	6860      	ldr	r0, [r4, #4]
   13980:	2200      	movs	r2, #0
   13982:	f7fc fe8d 	bl	106a0 <memq_dequeue>
		ull_conn_setup(link, rx);
   13986:	9905      	ldr	r1, [sp, #20]
   13988:	4638      	mov	r0, r7
   1398a:	f002 fb4b 	bl	16024 <ull_conn_setup>
			if (nack) {
   1398e:	e6de      	b.n	1374e <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   13990:	a905      	add	r1, sp, #20
   13992:	4638      	mov	r0, r7
   13994:	f002 fb66 	bl	16064 <ull_conn_rx>
		if (nack) {
   13998:	2800      	cmp	r0, #0
   1399a:	d049      	beq.n	13a30 <rx_demux+0x2f0>
}
   1399c:	b007      	add	sp, #28
   1399e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   139a2:	4a0a      	ldr	r2, [pc, #40]	; (139cc <rx_demux+0x28c>)
   139a4:	4910      	ldr	r1, [pc, #64]	; (139e8 <rx_demux+0x2a8>)
   139a6:	480b      	ldr	r0, [pc, #44]	; (139d4 <rx_demux+0x294>)
   139a8:	f240 7333 	movw	r3, #1843	; 0x733
   139ac:	f00e f808 	bl	219c0 <printk>
   139b0:	4040      	eors	r0, r0
   139b2:	f380 8811 	msr	BASEPRI, r0
   139b6:	f04f 0003 	mov.w	r0, #3
   139ba:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   139bc:	9b03      	ldr	r3, [sp, #12]
   139be:	e6d2      	b.n	13766 <rx_demux+0x26>
   139c0:	2000ddc8 	.word	0x2000ddc8
   139c4:	2000ddd0 	.word	0x2000ddd0
   139c8:	2000051c 	.word	0x2000051c
   139cc:	000284e8 	.word	0x000284e8
   139d0:	0002833c 	.word	0x0002833c
   139d4:	000282a4 	.word	0x000282a4
   139d8:	200004f8 	.word	0x200004f8
   139dc:	2000ddc4 	.word	0x2000ddc4
   139e0:	20000394 	.word	0x20000394
   139e4:	200003d4 	.word	0x200003d4
   139e8:	0002852c 	.word	0x0002852c
			mfy.param = next;
   139ec:	f8cb 3008 	str.w	r3, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   139f0:	463a      	mov	r2, r7
   139f2:	465b      	mov	r3, fp
   139f4:	4639      	mov	r1, r7
   139f6:	2001      	movs	r0, #1
   139f8:	f7fc feb4 	bl	10764 <mayfly_enqueue>
			LL_ASSERT(!ret);
   139fc:	2800      	cmp	r0, #0
   139fe:	d087      	beq.n	13910 <rx_demux+0x1d0>
   13a00:	4820      	ldr	r0, [pc, #128]	; (13a84 <rx_demux+0x344>)
   13a02:	4a21      	ldr	r2, [pc, #132]	; (13a88 <rx_demux+0x348>)
   13a04:	4921      	ldr	r1, [pc, #132]	; (13a8c <rx_demux+0x34c>)
   13a06:	f640 038c 	movw	r3, #2188	; 0x88c
   13a0a:	f00d ffd9 	bl	219c0 <printk>
   13a0e:	4040      	eors	r0, r0
   13a10:	f380 8811 	msr	BASEPRI, r0
   13a14:	f04f 0003 	mov.w	r0, #3
   13a18:	df02      	svc	2
   13a1a:	e779      	b.n	13910 <rx_demux+0x1d0>
	*first = _first; /* Write back read-index */
   13a1c:	2300      	movs	r3, #0
   13a1e:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   13a20:	2900      	cmp	r1, #0
   13a22:	d08e      	beq.n	13942 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   13a24:	4b1a      	ldr	r3, [pc, #104]	; (13a90 <rx_demux+0x350>)
   13a26:	e783      	b.n	13930 <rx_demux+0x1f0>
		ull_conn_done(done);
   13a28:	4628      	mov	r0, r5
   13a2a:	f005 f947 	bl	18cbc <ull_conn_done>
		break;
   13a2e:	e746      	b.n	138be <rx_demux+0x17e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13a30:	4918      	ldr	r1, [pc, #96]	; (13a94 <rx_demux+0x354>)
   13a32:	4602      	mov	r2, r0
   13a34:	6860      	ldr	r0, [r4, #4]
   13a36:	f7fc fe33 	bl	106a0 <memq_dequeue>
		if (rx) {
   13a3a:	9905      	ldr	r1, [sp, #20]
   13a3c:	2900      	cmp	r1, #0
   13a3e:	f43f ae86 	beq.w	1374e <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13a42:	4b15      	ldr	r3, [pc, #84]	; (13a98 <rx_demux+0x358>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13a44:	4638      	mov	r0, r7
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13a46:	78db      	ldrb	r3, [r3, #3]
   13a48:	e716      	b.n	13878 <rx_demux+0x138>
	LL_ASSERT(release == done);
   13a4a:	4a0f      	ldr	r2, [pc, #60]	; (13a88 <rx_demux+0x348>)
   13a4c:	4913      	ldr	r1, [pc, #76]	; (13a9c <rx_demux+0x35c>)
   13a4e:	480d      	ldr	r0, [pc, #52]	; (13a84 <rx_demux+0x344>)
   13a50:	f640 037b 	movw	r3, #2171	; 0x87b
   13a54:	f00d ffb4 	bl	219c0 <printk>
   13a58:	4040      	eors	r0, r0
   13a5a:	f380 8811 	msr	BASEPRI, r0
   13a5e:	f04f 0003 	mov.w	r0, #3
   13a62:	df02      	svc	2
   13a64:	e741      	b.n	138ea <rx_demux+0x1aa>
	LL_ASSERT(ull_ref_get(ull_hdr));
   13a66:	4a08      	ldr	r2, [pc, #32]	; (13a88 <rx_demux+0x348>)
   13a68:	490d      	ldr	r1, [pc, #52]	; (13aa0 <rx_demux+0x360>)
   13a6a:	4806      	ldr	r0, [pc, #24]	; (13a84 <rx_demux+0x344>)
   13a6c:	f640 039e 	movw	r3, #2206	; 0x89e
   13a70:	f00d ffa6 	bl	219c0 <printk>
   13a74:	4040      	eors	r0, r0
   13a76:	f380 8811 	msr	BASEPRI, r0
   13a7a:	f04f 0003 	mov.w	r0, #3
   13a7e:	df02      	svc	2
   13a80:	e768      	b.n	13954 <rx_demux+0x214>
   13a82:	bf00      	nop
   13a84:	000282a4 	.word	0x000282a4
   13a88:	000284e8 	.word	0x000284e8
   13a8c:	00028540 	.word	0x00028540
   13a90:	200003d8 	.word	0x200003d8
   13a94:	2000ddc8 	.word	0x2000ddc8
   13a98:	200004f8 	.word	0x200004f8
   13a9c:	00028530 	.word	0x00028530
   13aa0:	00028548 	.word	0x00028548

00013aa4 <ll_init>:
{
   13aa4:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   13aa6:	4b2b      	ldr	r3, [pc, #172]	; (13b54 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13aa8:	4d2b      	ldr	r5, [pc, #172]	; (13b58 <ll_init+0xb4>)
	sem_recv = sem_rx;
   13aaa:	6018      	str	r0, [r3, #0]
{
   13aac:	b087      	sub	sp, #28
	cntr_init();
   13aae:	f008 fd79 	bl	1c5a4 <cntr_init>
	mayfly_init();
   13ab2:	f7fc fe05 	bl	106c0 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13ab6:	4a29      	ldr	r2, [pc, #164]	; (13b5c <ll_init+0xb8>)
   13ab8:	4c29      	ldr	r4, [pc, #164]	; (13b60 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13aba:	492a      	ldr	r1, [pc, #168]	; (13b64 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13abc:	e9cd 2504 	strd	r2, r5, [sp, #16]
   13ac0:	4a29      	ldr	r2, [pc, #164]	; (13b68 <ll_init+0xc4>)
   13ac2:	e9cd 2402 	strd	r2, r4, [sp, #8]
   13ac6:	240c      	movs	r4, #12
   13ac8:	e9cd 1400 	strd	r1, r4, [sp]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13acc:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13ace:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   13ad0:	2402      	movs	r4, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13ad2:	7008      	strb	r0, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   13ad4:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13ad6:	720b      	strb	r3, [r1, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   13ad8:	740c      	strb	r4, [r1, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13ada:	4a24      	ldr	r2, [pc, #144]	; (13b6c <ll_init+0xc8>)
   13adc:	2106      	movs	r1, #6
   13ade:	2000      	movs	r0, #0
   13ae0:	f7fd fef2 	bl	118c8 <ticker_init>
	LL_ASSERT(!err);
   13ae4:	bb40      	cbnz	r0, 13b38 <ll_init+0x94>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13ae6:	2201      	movs	r2, #1
   13ae8:	2100      	movs	r1, #0
   13aea:	4821      	ldr	r0, [pc, #132]	; (13b70 <ll_init+0xcc>)
   13aec:	f013 fa37 	bl	26f5e <z_impl_k_sem_init>
	err = lll_init();
   13af0:	f007 f89e 	bl	1ac30 <lll_init>
	if (err) {
   13af4:	4604      	mov	r4, r0
   13af6:	b110      	cbz	r0, 13afe <ll_init+0x5a>
}
   13af8:	4620      	mov	r0, r4
   13afa:	b007      	add	sp, #28
   13afc:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   13afe:	f7ff fd93 	bl	13628 <init_reset>
	if (err) {
   13b02:	4604      	mov	r4, r0
   13b04:	2800      	cmp	r0, #0
   13b06:	d1f7      	bne.n	13af8 <ll_init+0x54>
	err = lll_adv_init();
   13b08:	f007 fc12 	bl	1b330 <lll_adv_init>
	if (err) {
   13b0c:	4604      	mov	r4, r0
   13b0e:	2800      	cmp	r0, #0
   13b10:	d1f2      	bne.n	13af8 <ll_init+0x54>
	err = ull_adv_init();
   13b12:	f001 f931 	bl	14d78 <ull_adv_init>
	if (err) {
   13b16:	4604      	mov	r4, r0
   13b18:	2800      	cmp	r0, #0
   13b1a:	d1ed      	bne.n	13af8 <ll_init+0x54>
	err = lll_conn_init();
   13b1c:	f008 f8aa 	bl	1bc74 <lll_conn_init>
	if (err) {
   13b20:	4604      	mov	r4, r0
   13b22:	2800      	cmp	r0, #0
   13b24:	d1e8      	bne.n	13af8 <ll_init+0x54>
	err = ull_conn_init();
   13b26:	f002 fa29 	bl	15f7c <ull_conn_init>
	if (err) {
   13b2a:	4604      	mov	r4, r0
   13b2c:	2800      	cmp	r0, #0
   13b2e:	d1e3      	bne.n	13af8 <ll_init+0x54>
		ull_filter_reset(true);
   13b30:	2001      	movs	r0, #1
   13b32:	f006 fd37 	bl	1a5a4 <ull_filter_reset>
	return  0;
   13b36:	e7df      	b.n	13af8 <ll_init+0x54>
	LL_ASSERT(!err);
   13b38:	4a0e      	ldr	r2, [pc, #56]	; (13b74 <ll_init+0xd0>)
   13b3a:	490f      	ldr	r1, [pc, #60]	; (13b78 <ll_init+0xd4>)
   13b3c:	480f      	ldr	r0, [pc, #60]	; (13b7c <ll_init+0xd8>)
   13b3e:	f44f 73b8 	mov.w	r3, #368	; 0x170
   13b42:	f00d ff3d 	bl	219c0 <printk>
   13b46:	4040      	eors	r0, r0
   13b48:	f380 8811 	msr	BASEPRI, r0
   13b4c:	f04f 0003 	mov.w	r0, #3
   13b50:	df02      	svc	2
   13b52:	e7c8      	b.n	13ae6 <ll_init+0x42>
   13b54:	2000ddd0 	.word	0x2000ddd0
   13b58:	0001d24d 	.word	0x0001d24d
   13b5c:	0001d0fd 	.word	0x0001d0fd
   13b60:	0001d099 	.word	0x0001d099
   13b64:	2000e17c 	.word	0x2000e17c
   13b68:	2000df0c 	.word	0x2000df0c
   13b6c:	2000ddec 	.word	0x2000ddec
   13b70:	2000ddd4 	.word	0x2000ddd4
   13b74:	000284e8 	.word	0x000284e8
   13b78:	00028524 	.word	0x00028524
   13b7c:	000282a4 	.word	0x000282a4

00013b80 <ll_reset>:
{
   13b80:	b510      	push	{r4, lr}
   13b82:	b086      	sub	sp, #24
	err = ull_adv_reset();
   13b84:	f001 f906 	bl	14d94 <ull_adv_reset>
	LL_ASSERT(!err);
   13b88:	2800      	cmp	r0, #0
   13b8a:	d130      	bne.n	13bee <ll_reset+0x6e>
	err = ull_conn_reset();
   13b8c:	f002 f9f8 	bl	15f80 <ull_conn_reset>
	LL_ASSERT(!err);
   13b90:	2800      	cmp	r0, #0
   13b92:	d13d      	bne.n	13c10 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   13b94:	4b3b      	ldr	r3, [pc, #236]	; (13c84 <ll_reset+0x104>)
   13b96:	2400      	movs	r4, #0
		ull_filter_reset(false);
   13b98:	4620      	mov	r0, r4
	MFIFO_INIT(tx_ack);
   13b9a:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   13b9c:	f006 fd02 	bl	1a5a4 <ull_filter_reset>
	MFIFO_INIT(prep);
   13ba0:	4839      	ldr	r0, [pc, #228]	; (13c88 <ll_reset+0x108>)
	MFIFO_INIT(done);
   13ba2:	493a      	ldr	r1, [pc, #232]	; (13c8c <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
   13ba4:	4a3a      	ldr	r2, [pc, #232]	; (13c90 <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
   13ba6:	4b3b      	ldr	r3, [pc, #236]	; (13c94 <ll_reset+0x114>)
	MFIFO_INIT(prep);
   13ba8:	8044      	strh	r4, [r0, #2]
	MFIFO_INIT(done);
   13baa:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   13bac:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   13bae:	805c      	strh	r4, [r3, #2]
   13bb0:	2201      	movs	r2, #1
   13bb2:	4621      	mov	r1, r4
   13bb4:	4668      	mov	r0, sp
   13bb6:	f013 f9d2 	bl	26f5e <z_impl_k_sem_init>
		mfy.param = &sem;
   13bba:	4b37      	ldr	r3, [pc, #220]	; (13c98 <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13bbc:	4622      	mov	r2, r4
   13bbe:	4621      	mov	r1, r4
   13bc0:	2003      	movs	r0, #3
		mfy.param = &sem;
   13bc2:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13bc6:	f7fc fdcd 	bl	10764 <mayfly_enqueue>
		LL_ASSERT(!retval);
   13bca:	2800      	cmp	r0, #0
   13bcc:	d14b      	bne.n	13c66 <ll_reset+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   13bce:	f04f 32ff 	mov.w	r2, #4294967295
   13bd2:	f04f 33ff 	mov.w	r3, #4294967295
   13bd6:	4668      	mov	r0, sp
   13bd8:	f00c fbb8 	bl	2034c <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   13bdc:	f001 f8e6 	bl	14dac <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   13be0:	2800      	cmp	r0, #0
   13be2:	d132      	bne.n	13c4a <ll_reset+0xca>
	err = init_reset();
   13be4:	f7ff fd20 	bl	13628 <init_reset>
	LL_ASSERT(!err);
   13be8:	bb00      	cbnz	r0, 13c2c <ll_reset+0xac>
}
   13bea:	b006      	add	sp, #24
   13bec:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   13bee:	4a2b      	ldr	r2, [pc, #172]	; (13c9c <ll_reset+0x11c>)
   13bf0:	492b      	ldr	r1, [pc, #172]	; (13ca0 <ll_reset+0x120>)
   13bf2:	482c      	ldr	r0, [pc, #176]	; (13ca4 <ll_reset+0x124>)
   13bf4:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   13bf8:	f00d fee2 	bl	219c0 <printk>
   13bfc:	4040      	eors	r0, r0
   13bfe:	f380 8811 	msr	BASEPRI, r0
   13c02:	f04f 0003 	mov.w	r0, #3
   13c06:	df02      	svc	2
	err = ull_conn_reset();
   13c08:	f002 f9ba 	bl	15f80 <ull_conn_reset>
	LL_ASSERT(!err);
   13c0c:	2800      	cmp	r0, #0
   13c0e:	d0c1      	beq.n	13b94 <ll_reset+0x14>
   13c10:	4a22      	ldr	r2, [pc, #136]	; (13c9c <ll_reset+0x11c>)
   13c12:	4923      	ldr	r1, [pc, #140]	; (13ca0 <ll_reset+0x120>)
   13c14:	4823      	ldr	r0, [pc, #140]	; (13ca4 <ll_reset+0x124>)
   13c16:	f44f 730f 	mov.w	r3, #572	; 0x23c
   13c1a:	f00d fed1 	bl	219c0 <printk>
   13c1e:	4040      	eors	r0, r0
   13c20:	f380 8811 	msr	BASEPRI, r0
   13c24:	f04f 0003 	mov.w	r0, #3
   13c28:	df02      	svc	2
   13c2a:	e7b3      	b.n	13b94 <ll_reset+0x14>
	LL_ASSERT(!err);
   13c2c:	4a1b      	ldr	r2, [pc, #108]	; (13c9c <ll_reset+0x11c>)
   13c2e:	491c      	ldr	r1, [pc, #112]	; (13ca0 <ll_reset+0x120>)
   13c30:	481c      	ldr	r0, [pc, #112]	; (13ca4 <ll_reset+0x124>)
   13c32:	f44f 7320 	mov.w	r3, #640	; 0x280
   13c36:	f00d fec3 	bl	219c0 <printk>
   13c3a:	4040      	eors	r0, r0
   13c3c:	f380 8811 	msr	BASEPRI, r0
   13c40:	f04f 0003 	mov.w	r0, #3
   13c44:	df02      	svc	2
}
   13c46:	b006      	add	sp, #24
   13c48:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   13c4a:	4a14      	ldr	r2, [pc, #80]	; (13c9c <ll_reset+0x11c>)
   13c4c:	4914      	ldr	r1, [pc, #80]	; (13ca0 <ll_reset+0x120>)
   13c4e:	4815      	ldr	r0, [pc, #84]	; (13ca4 <ll_reset+0x124>)
   13c50:	f240 237b 	movw	r3, #635	; 0x27b
   13c54:	f00d feb4 	bl	219c0 <printk>
   13c58:	4040      	eors	r0, r0
   13c5a:	f380 8811 	msr	BASEPRI, r0
   13c5e:	f04f 0003 	mov.w	r0, #3
   13c62:	df02      	svc	2
   13c64:	e7be      	b.n	13be4 <ll_reset+0x64>
		LL_ASSERT(!retval);
   13c66:	4a0d      	ldr	r2, [pc, #52]	; (13c9c <ll_reset+0x11c>)
   13c68:	490f      	ldr	r1, [pc, #60]	; (13ca8 <ll_reset+0x128>)
   13c6a:	480e      	ldr	r0, [pc, #56]	; (13ca4 <ll_reset+0x124>)
   13c6c:	f240 236e 	movw	r3, #622	; 0x26e
   13c70:	f00d fea6 	bl	219c0 <printk>
   13c74:	4040      	eors	r0, r0
   13c76:	f380 8811 	msr	BASEPRI, r0
   13c7a:	f04f 0003 	mov.w	r0, #3
   13c7e:	df02      	svc	2
   13c80:	e7a5      	b.n	13bce <ll_reset+0x4e>
   13c82:	bf00      	nop
   13c84:	200004f8 	.word	0x200004f8
   13c88:	200003d4 	.word	0x200003d4
   13c8c:	20000394 	.word	0x20000394
   13c90:	200003bc 	.word	0x200003bc
   13c94:	200003a8 	.word	0x200003a8
   13c98:	2000055c 	.word	0x2000055c
   13c9c:	000284e8 	.word	0x000284e8
   13ca0:	00028524 	.word	0x00028524
   13ca4:	000282a4 	.word	0x000282a4
   13ca8:	00028560 	.word	0x00028560

00013cac <ll_rx_get>:
{
   13cac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13cb0:	b085      	sub	sp, #20
   13cb2:	e9cd 0100 	strd	r0, r1, [sp]
   13cb6:	4c65      	ldr	r4, [pc, #404]	; (13e4c <ll_rx_get+0x1a0>)
				mem_release(link, &mem_link_rx.free);
   13cb8:	4d65      	ldr	r5, [pc, #404]	; (13e50 <ll_rx_get+0x1a4>)
   13cba:	4e66      	ldr	r6, [pc, #408]	; (13e54 <ll_rx_get+0x1a8>)
	*node_rx = NULL;
   13cbc:	9a00      	ldr	r2, [sp, #0]
   13cbe:	2300      	movs	r3, #0
   13cc0:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   13cc2:	e9d6 0100 	ldrd	r0, r1, [r6]
   13cc6:	aa03      	add	r2, sp, #12
   13cc8:	f7fc fce2 	bl	10690 <memq_peek>
	if (link) {
   13ccc:	4680      	mov	r8, r0
   13cce:	2800      	cmp	r0, #0
   13cd0:	f000 80a8 	beq.w	13e24 <ll_rx_get+0x178>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13cd4:	9b03      	ldr	r3, [sp, #12]
   13cd6:	4960      	ldr	r1, [pc, #384]	; (13e58 <ll_rx_get+0x1ac>)
   13cd8:	781a      	ldrb	r2, [r3, #0]
   13cda:	9801      	ldr	r0, [sp, #4]
   13cdc:	f7ff fbc2 	bl	13464 <tx_cmplt_get>
		if (!cmplt) {
   13ce0:	2800      	cmp	r0, #0
   13ce2:	f040 80a4 	bne.w	13e2e <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   13ce6:	78a3      	ldrb	r3, [r4, #2]
   13ce8:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13cec:	78e2      	ldrb	r2, [r4, #3]
   13cee:	4607      	mov	r7, r0
   13cf0:	f10d 0109 	add.w	r1, sp, #9
   13cf4:	f10d 000a 	add.w	r0, sp, #10
   13cf8:	f7ff fbb4 	bl	13464 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   13cfc:	ea47 0200 	orr.w	r2, r7, r0
   13d00:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   13d04:	d1f2      	bne.n	13cec <ll_rx_get+0x40>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   13d06:	9b03      	ldr	r3, [sp, #12]
   13d08:	7919      	ldrb	r1, [r3, #4]
   13d0a:	2901      	cmp	r1, #1
   13d0c:	f040 8097 	bne.w	13e3e <ll_rx_get+0x192>
				(void)memq_dequeue(memq_ll_rx.tail,
   13d10:	4950      	ldr	r1, [pc, #320]	; (13e54 <ll_rx_get+0x1a8>)
   13d12:	6870      	ldr	r0, [r6, #4]
   13d14:	f7fc fcc4 	bl	106a0 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13d18:	4950      	ldr	r1, [pc, #320]	; (13e5c <ll_rx_get+0x1b0>)
   13d1a:	4640      	mov	r0, r8
   13d1c:	f7fc fc64 	bl	105e8 <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13d20:	782b      	ldrb	r3, [r5, #0]
   13d22:	2b06      	cmp	r3, #6
   13d24:	d86f      	bhi.n	13e06 <ll_rx_get+0x15a>
	mem_link_rx.quota_pdu += delta;
   13d26:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   13d28:	494d      	ldr	r1, [pc, #308]	; (13e60 <ll_rx_get+0x1b4>)
   13d2a:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   13d2c:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   13d2e:	f7fc fc5b 	bl	105e8 <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13d32:	782b      	ldrb	r3, [r5, #0]
   13d34:	2b00      	cmp	r3, #0
   13d36:	d0c1      	beq.n	13cbc <ll_rx_get+0x10>
   13d38:	f8df 8128 	ldr.w	r8, [pc, #296]	; 13e64 <ll_rx_get+0x1b8>
	last = last + 1;
   13d3c:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   13d40:	f898 2001 	ldrb.w	r2, [r8, #1]
   13d44:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   13d48:	3701      	adds	r7, #1
   13d4a:	b2ff      	uxtb	r7, r7
		last = 0U;
   13d4c:	42ba      	cmp	r2, r7
   13d4e:	bf08      	it	eq
   13d50:	2700      	moveq	r7, #0
	if (last == first) {
   13d52:	429f      	cmp	r7, r3
   13d54:	d0b2      	beq.n	13cbc <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   13d56:	4841      	ldr	r0, [pc, #260]	; (13e5c <ll_rx_get+0x1b0>)
   13d58:	f7fc fc2c 	bl	105b4 <mem_acquire>
		if (!link) {
   13d5c:	4682      	mov	sl, r0
   13d5e:	2800      	cmp	r0, #0
   13d60:	d0ac      	beq.n	13cbc <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   13d62:	483f      	ldr	r0, [pc, #252]	; (13e60 <ll_rx_get+0x1b4>)
   13d64:	f7fc fc26 	bl	105b4 <mem_acquire>
		if (!rx) {
   13d68:	2800      	cmp	r0, #0
   13d6a:	d063      	beq.n	13e34 <ll_rx_get+0x188>
		rx->link = link;
   13d6c:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13d70:	f898 2003 	ldrb.w	r2, [r8, #3]
   13d74:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13d78:	fb02 8303 	mla	r3, r2, r3, r8
   13d7c:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13d7e:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13d80:	f888 7003 	strb.w	r7, [r8, #3]
   13d84:	3b01      	subs	r3, #1
   13d86:	b2db      	uxtb	r3, r3
   13d88:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   13d8a:	2b00      	cmp	r3, #0
   13d8c:	d096      	beq.n	13cbc <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13d8e:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 13e68 <ll_rx_get+0x1bc>
		link = mem_acquire(&mem_link_rx.free);
   13d92:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 13e5c <ll_rx_get+0x1b0>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13d96:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13d9a:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 13e60 <ll_rx_get+0x1b4>
   13d9e:	e014      	b.n	13dca <ll_rx_get+0x11e>
		link->mem = NULL;
   13da0:	2300      	movs	r3, #0
   13da2:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   13da6:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13daa:	f89a 2003 	ldrb.w	r2, [sl, #3]
   13dae:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13db2:	fb02 a303 	mla	r3, r2, r3, sl
   13db6:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13db8:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13dba:	f88a 7003 	strb.w	r7, [sl, #3]
   13dbe:	3b01      	subs	r3, #1
   13dc0:	b2db      	uxtb	r3, r3
   13dc2:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   13dc4:	2b00      	cmp	r3, #0
   13dc6:	f43f af79 	beq.w	13cbc <ll_rx_get+0x10>
	if (last == count) {
   13dca:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13dce:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   13dd2:	3701      	adds	r7, #1
   13dd4:	b2ff      	uxtb	r7, r7
		last = 0U;
   13dd6:	42ba      	cmp	r2, r7
   13dd8:	bf08      	it	eq
   13dda:	2700      	moveq	r7, #0
	if (last == first) {
   13ddc:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   13dde:	4640      	mov	r0, r8
   13de0:	f43f af6c 	beq.w	13cbc <ll_rx_get+0x10>
   13de4:	f7fc fbe6 	bl	105b4 <mem_acquire>
   13de8:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13dea:	4658      	mov	r0, fp
		if (!link) {
   13dec:	f1b9 0f00 	cmp.w	r9, #0
   13df0:	f43f af64 	beq.w	13cbc <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   13df4:	f7fc fbde 	bl	105b4 <mem_acquire>
		if (!rx) {
   13df8:	2800      	cmp	r0, #0
   13dfa:	d1d1      	bne.n	13da0 <ll_rx_get+0xf4>
			mem_release(link, &mem_link_rx.free);
   13dfc:	4917      	ldr	r1, [pc, #92]	; (13e5c <ll_rx_get+0x1b0>)
   13dfe:	4648      	mov	r0, r9
   13e00:	f7fc fbf2 	bl	105e8 <mem_release>
			return;
   13e04:	e75a      	b.n	13cbc <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13e06:	4a19      	ldr	r2, [pc, #100]	; (13e6c <ll_rx_get+0x1c0>)
   13e08:	4919      	ldr	r1, [pc, #100]	; (13e70 <ll_rx_get+0x1c4>)
   13e0a:	481a      	ldr	r0, [pc, #104]	; (13e74 <ll_rx_get+0x1c8>)
   13e0c:	f240 43ac 	movw	r3, #1196	; 0x4ac
   13e10:	f00d fdd6 	bl	219c0 <printk>
   13e14:	4040      	eors	r0, r0
   13e16:	f380 8811 	msr	BASEPRI, r0
   13e1a:	f04f 0003 	mov.w	r0, #3
   13e1e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   13e20:	782b      	ldrb	r3, [r5, #0]
   13e22:	e780      	b.n	13d26 <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   13e24:	78e2      	ldrb	r2, [r4, #3]
   13e26:	490c      	ldr	r1, [pc, #48]	; (13e58 <ll_rx_get+0x1ac>)
   13e28:	9801      	ldr	r0, [sp, #4]
   13e2a:	f7ff fb1b 	bl	13464 <tx_cmplt_get>
}
   13e2e:	b005      	add	sp, #20
   13e30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   13e34:	4909      	ldr	r1, [pc, #36]	; (13e5c <ll_rx_get+0x1b0>)
   13e36:	4650      	mov	r0, sl
   13e38:	f7fc fbd6 	bl	105e8 <mem_release>
			return;
   13e3c:	e73e      	b.n	13cbc <ll_rx_get+0x10>
			*node_rx = rx;
   13e3e:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13e40:	4610      	mov	r0, r2
			*node_rx = rx;
   13e42:	600b      	str	r3, [r1, #0]
}
   13e44:	b005      	add	sp, #20
   13e46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13e4a:	bf00      	nop
   13e4c:	200004f8 	.word	0x200004f8
   13e50:	2000dad4 	.word	0x2000dad4
   13e54:	2000ddc0 	.word	0x2000ddc0
   13e58:	200004fa 	.word	0x200004fa
   13e5c:	2000dad8 	.word	0x2000dad8
   13e60:	2000db34 	.word	0x2000db34
   13e64:	200003bc 	.word	0x200003bc
   13e68:	200003a8 	.word	0x200003a8
   13e6c:	000284e8 	.word	0x000284e8
   13e70:	00028568 	.word	0x00028568
   13e74:	000282a4 	.word	0x000282a4

00013e78 <ll_rx_dequeue>:
{
   13e78:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13e7a:	495c      	ldr	r1, [pc, #368]	; (13fec <ll_rx_dequeue+0x174>)
{
   13e7c:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   13e7e:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13e80:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   13e82:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13e84:	aa01      	add	r2, sp, #4
   13e86:	f7fc fc0b 	bl	106a0 <memq_dequeue>
	LL_ASSERT(link);
   13e8a:	4604      	mov	r4, r0
   13e8c:	2800      	cmp	r0, #0
   13e8e:	d061      	beq.n	13f54 <ll_rx_dequeue+0xdc>
	mem_release(link, &mem_link_rx.free);
   13e90:	4957      	ldr	r1, [pc, #348]	; (13ff0 <ll_rx_dequeue+0x178>)
   13e92:	4620      	mov	r0, r4
   13e94:	f7fc fba8 	bl	105e8 <mem_release>
	switch (rx->type) {
   13e98:	9a01      	ldr	r2, [sp, #4]
   13e9a:	7913      	ldrb	r3, [r2, #4]
   13e9c:	2b19      	cmp	r3, #25
   13e9e:	d80e      	bhi.n	13ebe <ll_rx_dequeue+0x46>
   13ea0:	e8df f003 	tbb	[pc, r3]
   13ea4:	1c0d0d1c 	.word	0x1c0d0d1c
   13ea8:	0d0d0d0d 	.word	0x0d0d0d0d
   13eac:	0d0d0d0d 	.word	0x0d0d0d0d
   13eb0:	0d0d0d0d 	.word	0x0d0d0d0d
   13eb4:	2d0d0d0d 	.word	0x2d0d0d0d
   13eb8:	1c1c1c1c 	.word	0x1c1c1c1c
   13ebc:	1c1c      	.short	0x1c1c
		LL_ASSERT(0);
   13ebe:	4a4d      	ldr	r2, [pc, #308]	; (13ff4 <ll_rx_dequeue+0x17c>)
   13ec0:	494d      	ldr	r1, [pc, #308]	; (13ff8 <ll_rx_dequeue+0x180>)
   13ec2:	484e      	ldr	r0, [pc, #312]	; (13ffc <ll_rx_dequeue+0x184>)
   13ec4:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   13ec8:	f00d fd7a 	bl	219c0 <printk>
   13ecc:	4040      	eors	r0, r0
   13ece:	f380 8811 	msr	BASEPRI, r0
   13ed2:	f04f 0003 	mov.w	r0, #3
   13ed6:	df02      	svc	2
}
   13ed8:	b002      	add	sp, #8
   13eda:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   13edc:	2b00      	cmp	r3, #0
   13ede:	d1fb      	bne.n	13ed8 <ll_rx_dequeue+0x60>
   13ee0:	4a44      	ldr	r2, [pc, #272]	; (13ff4 <ll_rx_dequeue+0x17c>)
   13ee2:	4947      	ldr	r1, [pc, #284]	; (14000 <ll_rx_dequeue+0x188>)
   13ee4:	4845      	ldr	r0, [pc, #276]	; (13ffc <ll_rx_dequeue+0x184>)
   13ee6:	f44f 736e 	mov.w	r3, #952	; 0x3b8
   13eea:	f00d fd69 	bl	219c0 <printk>
   13eee:	4040      	eors	r0, r0
   13ef0:	f380 8811 	msr	BASEPRI, r0
   13ef4:	f04f 0003 	mov.w	r0, #3
   13ef8:	df02      	svc	2
}
   13efa:	b002      	add	sp, #8
   13efc:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   13efe:	7f13      	ldrb	r3, [r2, #28]
   13f00:	2b3c      	cmp	r3, #60	; 0x3c
   13f02:	d035      	beq.n	13f70 <ll_rx_dequeue+0xf8>
   13f04:	7f53      	ldrb	r3, [r2, #29]
   13f06:	b1bb      	cbz	r3, 13f38 <ll_rx_dequeue+0xc0>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   13f08:	6893      	ldr	r3, [r2, #8]
   13f0a:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   13f0c:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   13f0e:	b120      	cbz	r0, 13f1a <ll_rx_dequeue+0xa2>
					adv->node_rx_cc_free = NULL;
   13f10:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   13f12:	493c      	ldr	r1, [pc, #240]	; (14004 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   13f14:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   13f16:	f7fc fb67 	bl	105e8 <mem_release>
			adv->is_enabled = 0U;
   13f1a:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   13f1e:	f36f 0300 	bfc	r3, #0, #1
   13f22:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
   13f26:	2000      	movs	r0, #0
   13f28:	f000 ff7e 	bl	14e28 <ull_adv_is_enabled>
			if (!bm) {
   13f2c:	2800      	cmp	r0, #0
   13f2e:	d1d3      	bne.n	13ed8 <ll_rx_dequeue+0x60>
				ull_filter_adv_scan_state_cb(0);
   13f30:	f006 f890 	bl	1a054 <ull_filter_adv_scan_state_cb>
}
   13f34:	b002      	add	sp, #8
   13f36:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   13f38:	4a2e      	ldr	r2, [pc, #184]	; (13ff4 <ll_rx_dequeue+0x17c>)
   13f3a:	492f      	ldr	r1, [pc, #188]	; (13ff8 <ll_rx_dequeue+0x180>)
   13f3c:	482f      	ldr	r0, [pc, #188]	; (13ffc <ll_rx_dequeue+0x184>)
   13f3e:	f44f 7359 	mov.w	r3, #868	; 0x364
   13f42:	f00d fd3d 	bl	219c0 <printk>
   13f46:	4040      	eors	r0, r0
   13f48:	f380 8811 	msr	BASEPRI, r0
   13f4c:	f04f 0003 	mov.w	r0, #3
   13f50:	df02      	svc	2
   13f52:	e7e8      	b.n	13f26 <ll_rx_dequeue+0xae>
	LL_ASSERT(link);
   13f54:	4a27      	ldr	r2, [pc, #156]	; (13ff4 <ll_rx_dequeue+0x17c>)
   13f56:	492c      	ldr	r1, [pc, #176]	; (14008 <ll_rx_dequeue+0x190>)
   13f58:	4828      	ldr	r0, [pc, #160]	; (13ffc <ll_rx_dequeue+0x184>)
   13f5a:	f240 23d2 	movw	r3, #722	; 0x2d2
   13f5e:	f00d fd2f 	bl	219c0 <printk>
   13f62:	4040      	eors	r0, r0
   13f64:	f380 8811 	msr	BASEPRI, r0
   13f68:	f04f 0003 	mov.w	r0, #3
   13f6c:	df02      	svc	2
   13f6e:	e78f      	b.n	13e90 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   13f70:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   13f72:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   13f74:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   13f76:	b1ed      	cbz	r5, 13fb4 <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
   13f78:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   13f7a:	2200      	movs	r2, #0
   13f7c:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   13f7e:	b163      	cbz	r3, 13f9a <ll_rx_dequeue+0x122>
   13f80:	4a1c      	ldr	r2, [pc, #112]	; (13ff4 <ll_rx_dequeue+0x17c>)
   13f82:	4922      	ldr	r1, [pc, #136]	; (1400c <ll_rx_dequeue+0x194>)
   13f84:	481d      	ldr	r0, [pc, #116]	; (13ffc <ll_rx_dequeue+0x184>)
   13f86:	f44f 734f 	mov.w	r3, #828	; 0x33c
   13f8a:	f00d fd19 	bl	219c0 <printk>
   13f8e:	4040      	eors	r0, r0
   13f90:	f380 8811 	msr	BASEPRI, r0
   13f94:	f04f 0003 	mov.w	r0, #3
   13f98:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   13f9a:	f105 0150 	add.w	r1, r5, #80	; 0x50
   13f9e:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   13fa2:	f7fc fb61 	bl	10668 <memq_deinit>
				LL_ASSERT(link);
   13fa6:	4606      	mov	r6, r0
   13fa8:	b190      	cbz	r0, 13fd0 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
   13faa:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   13fac:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   13fae:	f001 fced 	bl	1598c <ll_conn_release>
   13fb2:	e7b2      	b.n	13f1a <ll_rx_dequeue+0xa2>
				LL_ASSERT(conn_lll);
   13fb4:	4a0f      	ldr	r2, [pc, #60]	; (13ff4 <ll_rx_dequeue+0x17c>)
   13fb6:	4916      	ldr	r1, [pc, #88]	; (14010 <ll_rx_dequeue+0x198>)
   13fb8:	4810      	ldr	r0, [pc, #64]	; (13ffc <ll_rx_dequeue+0x184>)
   13fba:	f240 3339 	movw	r3, #825	; 0x339
   13fbe:	f00d fcff 	bl	219c0 <printk>
   13fc2:	4040      	eors	r0, r0
   13fc4:	f380 8811 	msr	BASEPRI, r0
   13fc8:	f04f 0003 	mov.w	r0, #3
   13fcc:	df02      	svc	2
   13fce:	e7d3      	b.n	13f78 <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
   13fd0:	4a08      	ldr	r2, [pc, #32]	; (13ff4 <ll_rx_dequeue+0x17c>)
   13fd2:	490d      	ldr	r1, [pc, #52]	; (14008 <ll_rx_dequeue+0x190>)
   13fd4:	4809      	ldr	r0, [pc, #36]	; (13ffc <ll_rx_dequeue+0x184>)
   13fd6:	f240 333f 	movw	r3, #831	; 0x33f
   13fda:	f00d fcf1 	bl	219c0 <printk>
   13fde:	4040      	eors	r0, r0
   13fe0:	f380 8811 	msr	BASEPRI, r0
   13fe4:	f04f 0003 	mov.w	r0, #3
   13fe8:	df02      	svc	2
   13fea:	e7de      	b.n	13faa <ll_rx_dequeue+0x132>
   13fec:	2000ddc0 	.word	0x2000ddc0
   13ff0:	2000dad8 	.word	0x2000dad8
   13ff4:	000284e8 	.word	0x000284e8
   13ff8:	0002833c 	.word	0x0002833c
   13ffc:	000282a4 	.word	0x000282a4
   14000:	000285c0 	.word	0x000285c0
   14004:	2000db34 	.word	0x2000db34
   14008:	000287b0 	.word	0x000287b0
   1400c:	000285a8 	.word	0x000285a8
   14010:	0002859c 	.word	0x0002859c

00014014 <ll_rx_mem_release>:
{
   14014:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   14018:	6804      	ldr	r4, [r0, #0]
{
   1401a:	4680      	mov	r8, r0
	while (rx) {
   1401c:	b334      	cbz	r4, 1406c <ll_rx_mem_release+0x58>
			LL_ASSERT(0);
   1401e:	4f54      	ldr	r7, [pc, #336]	; (14170 <ll_rx_mem_release+0x15c>)
   14020:	f8df 9150 	ldr.w	r9, [pc, #336]	; 14174 <ll_rx_mem_release+0x160>
   14024:	4e54      	ldr	r6, [pc, #336]	; (14178 <ll_rx_mem_release+0x164>)
		rx = rx->next;
   14026:	4625      	mov	r5, r4
   14028:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   1402a:	792b      	ldrb	r3, [r5, #4]
   1402c:	2b19      	cmp	r3, #25
   1402e:	d80e      	bhi.n	1404e <ll_rx_mem_release+0x3a>
   14030:	e8df f003 	tbb	[pc, r3]
   14034:	360d0d36 	.word	0x360d0d36
   14038:	0d0d0d0d 	.word	0x0d0d0d0d
   1403c:	0d0d0d0d 	.word	0x0d0d0d0d
   14040:	0d0d0d0d 	.word	0x0d0d0d0d
   14044:	240d0d0d 	.word	0x240d0d0d
   14048:	36363654 	.word	0x36363654
   1404c:	3636      	.short	0x3636
			LL_ASSERT(0);
   1404e:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   14052:	463a      	mov	r2, r7
   14054:	4649      	mov	r1, r9
   14056:	4630      	mov	r0, r6
   14058:	f00d fcb2 	bl	219c0 <printk>
   1405c:	4040      	eors	r0, r0
   1405e:	f380 8811 	msr	BASEPRI, r0
   14062:	f04f 0003 	mov.w	r0, #3
   14066:	df02      	svc	2
	while (rx) {
   14068:	2c00      	cmp	r4, #0
   1406a:	d1dc      	bne.n	14026 <ll_rx_mem_release+0x12>
	*node_rx = rx;
   1406c:	2300      	movs	r3, #0
   1406e:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   14072:	20ff      	movs	r0, #255	; 0xff
}
   14074:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   14078:	f7ff ba5a 	b.w	13530 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   1407c:	7f2b      	ldrb	r3, [r5, #28]
   1407e:	2b3c      	cmp	r3, #60	; 0x3c
   14080:	d05f      	beq.n	14142 <ll_rx_mem_release+0x12e>
				LL_ASSERT(!cc->status);
   14082:	b1db      	cbz	r3, 140bc <ll_rx_mem_release+0xa8>
   14084:	493d      	ldr	r1, [pc, #244]	; (1417c <ll_rx_mem_release+0x168>)
   14086:	f240 4326 	movw	r3, #1062	; 0x426
   1408a:	463a      	mov	r2, r7
   1408c:	4630      	mov	r0, r6
   1408e:	f00d fc97 	bl	219c0 <printk>
   14092:	4040      	eors	r0, r0
   14094:	f380 8811 	msr	BASEPRI, r0
   14098:	f04f 0003 	mov.w	r0, #3
   1409c:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   1409e:	792b      	ldrb	r3, [r5, #4]
   140a0:	b963      	cbnz	r3, 140bc <ll_rx_mem_release+0xa8>
   140a2:	4937      	ldr	r1, [pc, #220]	; (14180 <ll_rx_mem_release+0x16c>)
   140a4:	f240 436c 	movw	r3, #1132	; 0x46c
   140a8:	463a      	mov	r2, r7
   140aa:	4630      	mov	r0, r6
   140ac:	f00d fc88 	bl	219c0 <printk>
   140b0:	4040      	eors	r0, r0
   140b2:	f380 8811 	msr	BASEPRI, r0
   140b6:	f04f 0003 	mov.w	r0, #3
   140ba:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   140bc:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 14184 <ll_rx_mem_release+0x170>
   140c0:	f89a 3000 	ldrb.w	r3, [sl]
   140c4:	2b06      	cmp	r3, #6
   140c6:	d82c      	bhi.n	14122 <ll_rx_mem_release+0x10e>
	mem_link_rx.quota_pdu += delta;
   140c8:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   140ca:	492f      	ldr	r1, [pc, #188]	; (14188 <ll_rx_mem_release+0x174>)
	mem_link_rx.quota_pdu += delta;
   140cc:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   140d0:	4628      	mov	r0, r5
   140d2:	f7fc fa89 	bl	105e8 <mem_release>
	while (rx) {
   140d6:	2c00      	cmp	r4, #0
   140d8:	d1a5      	bne.n	14026 <ll_rx_mem_release+0x12>
   140da:	e7c7      	b.n	1406c <ll_rx_mem_release+0x58>
			conn = ll_conn_get(rx_free->handle);
   140dc:	88e8      	ldrh	r0, [r5, #6]
   140de:	f001 fc63 	bl	159a8 <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   140e2:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   140e4:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   140e6:	b163      	cbz	r3, 14102 <ll_rx_mem_release+0xee>
   140e8:	4928      	ldr	r1, [pc, #160]	; (1418c <ll_rx_mem_release+0x178>)
   140ea:	f240 4393 	movw	r3, #1171	; 0x493
   140ee:	463a      	mov	r2, r7
   140f0:	4630      	mov	r0, r6
   140f2:	f00d fc65 	bl	219c0 <printk>
   140f6:	4040      	eors	r0, r0
   140f8:	f380 8811 	msr	BASEPRI, r0
   140fc:	f04f 0003 	mov.w	r0, #3
   14100:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   14102:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   14106:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1410a:	f7fc faad 	bl	10668 <memq_deinit>
			LL_ASSERT(link);
   1410e:	4682      	mov	sl, r0
   14110:	b1f8      	cbz	r0, 14152 <ll_rx_mem_release+0x13e>
			conn->lll.link_tx_free = link;
   14112:	f8c5 a078 	str.w	sl, [r5, #120]	; 0x78
			ll_conn_release(conn);
   14116:	4628      	mov	r0, r5
   14118:	f001 fc38 	bl	1598c <ll_conn_release>
	while (rx) {
   1411c:	2c00      	cmp	r4, #0
   1411e:	d182      	bne.n	14026 <ll_rx_mem_release+0x12>
   14120:	e7a4      	b.n	1406c <ll_rx_mem_release+0x58>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14122:	491b      	ldr	r1, [pc, #108]	; (14190 <ll_rx_mem_release+0x17c>)
   14124:	f240 43ac 	movw	r3, #1196	; 0x4ac
   14128:	463a      	mov	r2, r7
   1412a:	4630      	mov	r0, r6
   1412c:	f00d fc48 	bl	219c0 <printk>
   14130:	4040      	eors	r0, r0
   14132:	f380 8811 	msr	BASEPRI, r0
   14136:	f04f 0003 	mov.w	r0, #3
   1413a:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   1413c:	f89a 3000 	ldrb.w	r3, [sl]
   14140:	e7c2      	b.n	140c8 <ll_rx_mem_release+0xb4>
				mem_release(rx_free, &mem_pdu_rx.free);
   14142:	4911      	ldr	r1, [pc, #68]	; (14188 <ll_rx_mem_release+0x174>)
   14144:	4628      	mov	r0, r5
   14146:	f7fc fa4f 	bl	105e8 <mem_release>
	while (rx) {
   1414a:	2c00      	cmp	r4, #0
   1414c:	f47f af6b 	bne.w	14026 <ll_rx_mem_release+0x12>
   14150:	e78c      	b.n	1406c <ll_rx_mem_release+0x58>
			LL_ASSERT(link);
   14152:	4910      	ldr	r1, [pc, #64]	; (14194 <ll_rx_mem_release+0x180>)
   14154:	f240 4396 	movw	r3, #1174	; 0x496
   14158:	463a      	mov	r2, r7
   1415a:	4630      	mov	r0, r6
   1415c:	f00d fc30 	bl	219c0 <printk>
   14160:	4040      	eors	r0, r0
   14162:	f380 8811 	msr	BASEPRI, r0
   14166:	f04f 0003 	mov.w	r0, #3
   1416a:	df02      	svc	2
   1416c:	e7d1      	b.n	14112 <ll_rx_mem_release+0xfe>
   1416e:	bf00      	nop
   14170:	000284e8 	.word	0x000284e8
   14174:	0002833c 	.word	0x0002833c
   14178:	000282a4 	.word	0x000282a4
   1417c:	000285e0 	.word	0x000285e0
   14180:	000285ec 	.word	0x000285ec
   14184:	2000dad4 	.word	0x2000dad4
   14188:	2000db34 	.word	0x2000db34
   1418c:	00028610 	.word	0x00028610
   14190:	00028568 	.word	0x00028568
   14194:	000287b0 	.word	0x000287b0

00014198 <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   14198:	4801      	ldr	r0, [pc, #4]	; (141a0 <ll_rx_link_alloc+0x8>)
   1419a:	f7fc ba0b 	b.w	105b4 <mem_acquire>
   1419e:	bf00      	nop
   141a0:	2000dad8 	.word	0x2000dad8

000141a4 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   141a4:	4901      	ldr	r1, [pc, #4]	; (141ac <ll_rx_link_release+0x8>)
   141a6:	f7fc ba1f 	b.w	105e8 <mem_release>
   141aa:	bf00      	nop
   141ac:	2000dad8 	.word	0x2000dad8

000141b0 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   141b0:	4801      	ldr	r0, [pc, #4]	; (141b8 <ll_rx_alloc+0x8>)
   141b2:	f7fc b9ff 	b.w	105b4 <mem_acquire>
   141b6:	bf00      	nop
   141b8:	2000db34 	.word	0x2000db34

000141bc <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   141bc:	4901      	ldr	r1, [pc, #4]	; (141c4 <ll_rx_release+0x8>)
   141be:	f7fc ba13 	b.w	105e8 <mem_release>
   141c2:	bf00      	nop
   141c4:	2000db34 	.word	0x2000db34

000141c8 <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   141c8:	4b02      	ldr	r3, [pc, #8]	; (141d4 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   141ca:	4a03      	ldr	r2, [pc, #12]	; (141d8 <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   141cc:	78db      	ldrb	r3, [r3, #3]
   141ce:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   141d0:	f7fc ba54 	b.w	1067c <memq_enqueue>
   141d4:	200004f8 	.word	0x200004f8
   141d8:	2000ddc4 	.word	0x2000ddc4

000141dc <ll_rx_sched>:
	k_sem_give(sem_recv);
   141dc:	4b01      	ldr	r3, [pc, #4]	; (141e4 <ll_rx_sched+0x8>)
   141de:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   141e0:	f00c b88e 	b.w	20300 <z_impl_k_sem_give>
   141e4:	2000ddd0 	.word	0x2000ddd0

000141e8 <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   141e8:	4b0d      	ldr	r3, [pc, #52]	; (14220 <ll_pdu_rx_alloc_peek+0x38>)
   141ea:	789a      	ldrb	r2, [r3, #2]
   141ec:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   141f0:	4562      	cmp	r2, ip
   141f2:	d809      	bhi.n	14208 <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   141f4:	ebac 0102 	sub.w	r1, ip, r2
   141f8:	b2c9      	uxtb	r1, r1
   141fa:	4288      	cmp	r0, r1
   141fc:	d802      	bhi.n	14204 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   141fe:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14200:	7819      	ldrb	r1, [r3, #0]
   14202:	d108      	bne.n	14216 <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   14204:	2000      	movs	r0, #0
}
   14206:	4770      	bx	lr
		return count - first + last;
   14208:	7859      	ldrb	r1, [r3, #1]
   1420a:	1a89      	subs	r1, r1, r2
   1420c:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1420e:	b2c9      	uxtb	r1, r1
   14210:	4288      	cmp	r0, r1
   14212:	d8f7      	bhi.n	14204 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14214:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   14216:	fb02 3301 	mla	r3, r2, r1, r3
   1421a:	6858      	ldr	r0, [r3, #4]
   1421c:	4770      	bx	lr
   1421e:	bf00      	nop
   14220:	200003a8 	.word	0x200003a8

00014224 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14224:	4b09      	ldr	r3, [pc, #36]	; (1424c <ll_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   14226:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14228:	78da      	ldrb	r2, [r3, #3]
   1422a:	7818      	ldrb	r0, [r3, #0]
   1422c:	f893 c001 	ldrb.w	ip, [r3, #1]
   14230:	428a      	cmp	r2, r1
   14232:	d009      	beq.n	14248 <ll_pdu_rx_alloc+0x24>
	_first += 1U;
   14234:	1c4a      	adds	r2, r1, #1
   14236:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14238:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1423c:	4594      	cmp	ip, r2
   1423e:	bf08      	it	eq
   14240:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   14242:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14244:	709a      	strb	r2, [r3, #2]

	return mem;
   14246:	4770      	bx	lr
		return NULL;
   14248:	2000      	movs	r0, #0
}
   1424a:	4770      	bx	lr
   1424c:	200003a8 	.word	0x200003a8

00014250 <ll_tx_ack_put>:
{
   14250:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   14252:	4a15      	ldr	r2, [pc, #84]	; (142a8 <ll_tx_ack_put+0x58>)
   14254:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   14256:	f892 e001 	ldrb.w	lr, [r2, #1]
   1425a:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   1425e:	1c63      	adds	r3, r4, #1
   14260:	b2db      	uxtb	r3, r3
		last = 0U;
   14262:	459e      	cmp	lr, r3
   14264:	bf08      	it	eq
   14266:	2300      	moveq	r3, #0
	if (last == first) {
   14268:	459c      	cmp	ip, r3
   1426a:	d00c      	beq.n	14286 <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1426c:	4696      	mov	lr, r2
   1426e:	f81e cb04 	ldrb.w	ip, [lr], #4
   14272:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
   14276:	eb1e 040c 	adds.w	r4, lr, ip
   1427a:	d004      	beq.n	14286 <ll_tx_ack_put+0x36>
	tx->handle = handle;
   1427c:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
   14280:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   14282:	70d3      	strb	r3, [r2, #3]
}
   14284:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
   14286:	4a09      	ldr	r2, [pc, #36]	; (142ac <ll_tx_ack_put+0x5c>)
   14288:	4909      	ldr	r1, [pc, #36]	; (142b0 <ll_tx_ack_put+0x60>)
   1428a:	480a      	ldr	r0, [pc, #40]	; (142b4 <ll_tx_ack_put+0x64>)
   1428c:	f240 43f4 	movw	r3, #1268	; 0x4f4
   14290:	f00d fb96 	bl	219c0 <printk>
   14294:	4040      	eors	r0, r0
   14296:	f380 8811 	msr	BASEPRI, r0
   1429a:	f04f 0003 	mov.w	r0, #3
   1429e:	df02      	svc	2
	tx->handle = handle;
   142a0:	2300      	movs	r3, #0
   142a2:	801b      	strh	r3, [r3, #0]
   142a4:	deff      	udf	#255	; 0xff
   142a6:	bf00      	nop
   142a8:	200004f8 	.word	0x200004f8
   142ac:	000284e8 	.word	0x000284e8
   142b0:	000287a4 	.word	0x000287a4
   142b4:	000282a4 	.word	0x000282a4

000142b8 <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   142b8:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   142ba:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   142bc:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   142be:	700b      	strb	r3, [r1, #0]
}
   142c0:	4770      	bx	lr
   142c2:	bf00      	nop

000142c4 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   142c4:	2200      	movs	r2, #0
{
   142c6:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   142c8:	4611      	mov	r1, r2
   142ca:	4b0a      	ldr	r3, [pc, #40]	; (142f4 <ll_radio_state_abort+0x30>)
   142cc:	2001      	movs	r0, #1
   142ce:	f7fc fa49 	bl	10764 <mayfly_enqueue>
	LL_ASSERT(!ret);
   142d2:	b900      	cbnz	r0, 142d6 <ll_radio_state_abort+0x12>
}
   142d4:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   142d6:	4a08      	ldr	r2, [pc, #32]	; (142f8 <ll_radio_state_abort+0x34>)
   142d8:	4908      	ldr	r1, [pc, #32]	; (142fc <ll_radio_state_abort+0x38>)
   142da:	4809      	ldr	r0, [pc, #36]	; (14300 <ll_radio_state_abort+0x3c>)
   142dc:	f240 530c 	movw	r3, #1292	; 0x50c
   142e0:	f00d fb6e 	bl	219c0 <printk>
   142e4:	4040      	eors	r0, r0
   142e6:	f380 8811 	msr	BASEPRI, r0
   142ea:	f04f 0003 	mov.w	r0, #3
   142ee:	df02      	svc	2
}
   142f0:	bd08      	pop	{r3, pc}
   142f2:	bf00      	nop
   142f4:	2000054c 	.word	0x2000054c
   142f8:	000284e8 	.word	0x000284e8
   142fc:	00028540 	.word	0x00028540
   14300:	000282a4 	.word	0x000282a4

00014304 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14304:	f030 0302 	bics.w	r3, r0, #2
{
   14308:	b510      	push	{r4, lr}
   1430a:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1430c:	d002      	beq.n	14314 <ull_ticker_status_take+0x10>
   1430e:	680b      	ldr	r3, [r1, #0]
   14310:	2b02      	cmp	r3, #2
   14312:	d008      	beq.n	14326 <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   14314:	f04f 32ff 	mov.w	r2, #4294967295
   14318:	f04f 33ff 	mov.w	r3, #4294967295
   1431c:	4809      	ldr	r0, [pc, #36]	; (14344 <ull_ticker_status_take+0x40>)
   1431e:	f00c f815 	bl	2034c <z_impl_k_sem_take>
	return *ret_cb;
   14322:	6820      	ldr	r0, [r4, #0]
}
   14324:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14326:	4a08      	ldr	r2, [pc, #32]	; (14348 <ull_ticker_status_take+0x44>)
   14328:	4908      	ldr	r1, [pc, #32]	; (1434c <ull_ticker_status_take+0x48>)
   1432a:	4809      	ldr	r0, [pc, #36]	; (14350 <ull_ticker_status_take+0x4c>)
   1432c:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   14330:	f00d fb46 	bl	219c0 <printk>
   14334:	4040      	eors	r0, r0
   14336:	f380 8811 	msr	BASEPRI, r0
   1433a:	f04f 0003 	mov.w	r0, #3
   1433e:	df02      	svc	2
   14340:	e7e8      	b.n	14314 <ull_ticker_status_take+0x10>
   14342:	bf00      	nop
   14344:	2000ddd4 	.word	0x2000ddd4
   14348:	000284e8 	.word	0x000284e8
   1434c:	00028628 	.word	0x00028628
   14350:	000282a4 	.word	0x000282a4

00014354 <ull_disable_mark>:
	if (!*m) {
   14354:	4a03      	ldr	r2, [pc, #12]	; (14364 <ull_disable_mark+0x10>)
{
   14356:	4603      	mov	r3, r0
	if (!*m) {
   14358:	6810      	ldr	r0, [r2, #0]
   1435a:	b100      	cbz	r0, 1435e <ull_disable_mark+0xa>
}
   1435c:	4770      	bx	lr
		*m = param;
   1435e:	6013      	str	r3, [r2, #0]
   14360:	4618      	mov	r0, r3
}
   14362:	4770      	bx	lr
   14364:	2000da10 	.word	0x2000da10

00014368 <ull_disable_unmark>:
	if (*m && *m == param) {
   14368:	4a04      	ldr	r2, [pc, #16]	; (1437c <ull_disable_unmark+0x14>)
   1436a:	6813      	ldr	r3, [r2, #0]
   1436c:	b123      	cbz	r3, 14378 <ull_disable_unmark+0x10>
   1436e:	4298      	cmp	r0, r3
		*m = NULL;
   14370:	bf06      	itte	eq
   14372:	2100      	moveq	r1, #0
   14374:	6011      	streq	r1, [r2, #0]
	return NULL;
   14376:	2300      	movne	r3, #0
}
   14378:	4618      	mov	r0, r3
   1437a:	4770      	bx	lr
   1437c:	2000da10 	.word	0x2000da10

00014380 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   14380:	4b01      	ldr	r3, [pc, #4]	; (14388 <ull_disable_mark_get+0x8>)
}
   14382:	6818      	ldr	r0, [r3, #0]
   14384:	4770      	bx	lr
   14386:	bf00      	nop
   14388:	2000da10 	.word	0x2000da10

0001438c <ull_update_mark>:
	if (!*m) {
   1438c:	4a03      	ldr	r2, [pc, #12]	; (1439c <ull_update_mark+0x10>)
{
   1438e:	4603      	mov	r3, r0
	if (!*m) {
   14390:	6810      	ldr	r0, [r2, #0]
   14392:	b100      	cbz	r0, 14396 <ull_update_mark+0xa>
}
   14394:	4770      	bx	lr
		*m = param;
   14396:	6013      	str	r3, [r2, #0]
   14398:	4618      	mov	r0, r3
}
   1439a:	4770      	bx	lr
   1439c:	2000da14 	.word	0x2000da14

000143a0 <ull_update_unmark>:
	if (*m && *m == param) {
   143a0:	4a04      	ldr	r2, [pc, #16]	; (143b4 <ull_update_unmark+0x14>)
   143a2:	6813      	ldr	r3, [r2, #0]
   143a4:	b123      	cbz	r3, 143b0 <ull_update_unmark+0x10>
   143a6:	4298      	cmp	r0, r3
		*m = NULL;
   143a8:	bf06      	itte	eq
   143aa:	2100      	moveq	r1, #0
   143ac:	6011      	streq	r1, [r2, #0]
	return NULL;
   143ae:	2300      	movne	r3, #0
}
   143b0:	4618      	mov	r0, r3
   143b2:	4770      	bx	lr
   143b4:	2000da14 	.word	0x2000da14

000143b8 <ull_update_mark_get>:
	return mark_get(mark_update);
   143b8:	4b01      	ldr	r3, [pc, #4]	; (143c0 <ull_update_mark_get+0x8>)
}
   143ba:	6818      	ldr	r0, [r3, #0]
   143bc:	4770      	bx	lr
   143be:	bf00      	nop
   143c0:	2000da14 	.word	0x2000da14

000143c4 <ull_disable>:
{
   143c4:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   143c6:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   143c8:	f115 0f10 	cmn.w	r5, #16
{
   143cc:	b087      	sub	sp, #28
	if (!hdr) {
   143ce:	d00b      	beq.n	143e8 <ull_disable+0x24>
	compiler_barrier();
   143d0:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   143d2:	2201      	movs	r2, #1
   143d4:	2100      	movs	r1, #0
   143d6:	4668      	mov	r0, sp
   143d8:	f012 fdc1 	bl	26f5e <z_impl_k_sem_init>
   143dc:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   143de:	4a13      	ldr	r2, [pc, #76]	; (1442c <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   143e0:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   143e4:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   143e6:	b913      	cbnz	r3, 143ee <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   143e8:	2000      	movs	r0, #0
}
   143ea:	b007      	add	sp, #28
   143ec:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   143ee:	4b10      	ldr	r3, [pc, #64]	; (14430 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   143f0:	2200      	movs	r2, #0
   143f2:	4611      	mov	r1, r2
   143f4:	2003      	movs	r0, #3
	mfy.param = lll;
   143f6:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   143f8:	f7fc f9b4 	bl	10764 <mayfly_enqueue>
	LL_ASSERT(!ret);
   143fc:	b940      	cbnz	r0, 14410 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   143fe:	f04f 32ff 	mov.w	r2, #4294967295
   14402:	f04f 33ff 	mov.w	r3, #4294967295
   14406:	4668      	mov	r0, sp
   14408:	f00b ffa0 	bl	2034c <z_impl_k_sem_take>
}
   1440c:	b007      	add	sp, #28
   1440e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14410:	4a08      	ldr	r2, [pc, #32]	; (14434 <ull_disable+0x70>)
   14412:	4909      	ldr	r1, [pc, #36]	; (14438 <ull_disable+0x74>)
   14414:	4809      	ldr	r0, [pc, #36]	; (1443c <ull_disable+0x78>)
   14416:	f240 539a 	movw	r3, #1434	; 0x59a
   1441a:	f00d fad1 	bl	219c0 <printk>
   1441e:	4040      	eors	r0, r0
   14420:	f380 8811 	msr	BASEPRI, r0
   14424:	f04f 0003 	mov.w	r0, #3
   14428:	df02      	svc	2
   1442a:	e7e8      	b.n	143fe <ull_disable+0x3a>
   1442c:	00013461 	.word	0x00013461
   14430:	2000053c 	.word	0x2000053c
   14434:	000284e8 	.word	0x000284e8
   14438:	00028540 	.word	0x00028540
   1443c:	000282a4 	.word	0x000282a4

00014440 <ull_ticker_stop_with_mark>:
{
   14440:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   14442:	4d1d      	ldr	r5, [pc, #116]	; (144b8 <ull_ticker_stop_with_mark+0x78>)
   14444:	682b      	ldr	r3, [r5, #0]
{
   14446:	b085      	sub	sp, #20
   14448:	460c      	mov	r4, r1
   1444a:	4616      	mov	r6, r2
	if (!*m) {
   1444c:	b323      	cbz	r3, 14498 <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   1444e:	4299      	cmp	r1, r3
   14450:	d112      	bne.n	14478 <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
   14452:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14454:	af03      	add	r7, sp, #12
   14456:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   14458:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   1445a:	2103      	movs	r1, #3
   1445c:	4b17      	ldr	r3, [pc, #92]	; (144bc <ull_ticker_stop_with_mark+0x7c>)
   1445e:	9700      	str	r7, [sp, #0]
   14460:	2000      	movs	r0, #0
   14462:	f7fd fb79 	bl	11b58 <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   14466:	4639      	mov	r1, r7
   14468:	f7ff ff4c 	bl	14304 <ull_ticker_status_take>
	if (ret) {
   1446c:	b140      	cbz	r0, 14480 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   1446e:	682b      	ldr	r3, [r5, #0]
   14470:	b10b      	cbz	r3, 14476 <ull_ticker_stop_with_mark+0x36>
   14472:	429c      	cmp	r4, r3
   14474:	d012      	beq.n	1449c <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   14476:	b1cc      	cbz	r4, 144ac <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   14478:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
   1447c:	b005      	add	sp, #20
   1447e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   14480:	4630      	mov	r0, r6
   14482:	f7ff ff9f 	bl	143c4 <ull_disable>
	if (ret) {
   14486:	b9a0      	cbnz	r0, 144b2 <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   14488:	682b      	ldr	r3, [r5, #0]
   1448a:	b10b      	cbz	r3, 14490 <ull_ticker_stop_with_mark+0x50>
   1448c:	429c      	cmp	r4, r3
   1448e:	d00b      	beq.n	144a8 <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   14490:	2c00      	cmp	r4, #0
   14492:	d1f1      	bne.n	14478 <ull_ticker_stop_with_mark+0x38>
}
   14494:	b005      	add	sp, #20
   14496:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   14498:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   1449a:	e7da      	b.n	14452 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   1449c:	2300      	movs	r3, #0
		return -EALREADY;
   1449e:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
   144a2:	602b      	str	r3, [r5, #0]
}
   144a4:	b005      	add	sp, #20
   144a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   144a8:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   144aa:	e7e7      	b.n	1447c <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   144ac:	f06f 0044 	mvn.w	r0, #68	; 0x44
   144b0:	e7e4      	b.n	1447c <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   144b2:	f06f 000f 	mvn.w	r0, #15
   144b6:	e7e1      	b.n	1447c <ull_ticker_stop_with_mark+0x3c>
   144b8:	2000da10 	.word	0x2000da10
   144bc:	00013455 	.word	0x00013455

000144c0 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   144c0:	4b0d      	ldr	r3, [pc, #52]	; (144f8 <ull_pdu_rx_alloc_peek+0x38>)
   144c2:	789a      	ldrb	r2, [r3, #2]
   144c4:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   144c8:	4562      	cmp	r2, ip
   144ca:	d809      	bhi.n	144e0 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   144cc:	ebac 0102 	sub.w	r1, ip, r2
   144d0:	b2c9      	uxtb	r1, r1
   144d2:	4288      	cmp	r0, r1
   144d4:	d802      	bhi.n	144dc <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   144d6:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   144d8:	7819      	ldrb	r1, [r3, #0]
   144da:	d108      	bne.n	144ee <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   144dc:	2000      	movs	r0, #0
}
   144de:	4770      	bx	lr
		return count - first + last;
   144e0:	7859      	ldrb	r1, [r3, #1]
   144e2:	1a89      	subs	r1, r1, r2
   144e4:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   144e6:	b2c9      	uxtb	r1, r1
   144e8:	4288      	cmp	r0, r1
   144ea:	d8f7      	bhi.n	144dc <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   144ec:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   144ee:	fb02 3301 	mla	r3, r2, r1, r3
   144f2:	6858      	ldr	r0, [r3, #4]
   144f4:	4770      	bx	lr
   144f6:	bf00      	nop
   144f8:	200003bc 	.word	0x200003bc

000144fc <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   144fc:	4b09      	ldr	r3, [pc, #36]	; (14524 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   144fe:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14500:	78da      	ldrb	r2, [r3, #3]
   14502:	7818      	ldrb	r0, [r3, #0]
   14504:	f893 c001 	ldrb.w	ip, [r3, #1]
   14508:	428a      	cmp	r2, r1
   1450a:	d009      	beq.n	14520 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   1450c:	1c4a      	adds	r2, r1, #1
   1450e:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14510:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14514:	4594      	cmp	ip, r2
   14516:	bf08      	it	eq
   14518:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1451a:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   1451c:	709a      	strb	r2, [r3, #2]
	return mem;
   1451e:	4770      	bx	lr
		return NULL;
   14520:	2000      	movs	r0, #0
}
   14522:	4770      	bx	lr
   14524:	200003bc 	.word	0x200003bc

00014528 <ull_rx_put>:
{
   14528:	b538      	push	{r3, r4, r5, lr}
   1452a:	460c      	mov	r4, r1
   1452c:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   1452e:	f004 fe31 	bl	19194 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14532:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14534:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14536:	4a03      	ldr	r2, [pc, #12]	; (14544 <ull_rx_put+0x1c>)
   14538:	4628      	mov	r0, r5
}
   1453a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1453e:	f7fc b89d 	b.w	1067c <memq_enqueue>
   14542:	bf00      	nop
   14544:	2000ddcc 	.word	0x2000ddcc

00014548 <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   14548:	2201      	movs	r2, #1
   1454a:	4b02      	ldr	r3, [pc, #8]	; (14554 <ull_rx_sched+0xc>)
   1454c:	4611      	mov	r1, r2
   1454e:	2000      	movs	r0, #0
   14550:	f7fc b908 	b.w	10764 <mayfly_enqueue>
   14554:	2000052c 	.word	0x2000052c

00014558 <ull_prepare_enqueue>:
{
   14558:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   1455c:	4e18      	ldr	r6, [pc, #96]	; (145c0 <ull_prepare_enqueue+0x68>)
{
   1455e:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
   14562:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14564:	78f3      	ldrb	r3, [r6, #3]
{
   14566:	4680      	mov	r8, r0
	last = last + 1;
   14568:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   1456a:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
   1456c:	b2ed      	uxtb	r5, r5
		last = 0U;
   1456e:	42a8      	cmp	r0, r5
   14570:	bf08      	it	eq
   14572:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   14574:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
   14576:	42a8      	cmp	r0, r5
   14578:	d01e      	beq.n	145b8 <ull_prepare_enqueue+0x60>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   1457a:	4634      	mov	r4, r6
   1457c:	460f      	mov	r7, r1
   1457e:	4611      	mov	r1, r2
   14580:	f814 2b04 	ldrb.w	r2, [r4], #4
   14584:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
   14588:	b1b4      	cbz	r4, 145b8 <ull_prepare_enqueue+0x60>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   1458a:	2210      	movs	r2, #16
   1458c:	4620      	mov	r0, r4
   1458e:	f00f feb9 	bl	24304 <memcpy>
	e->is_resume = is_resume;
   14592:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->prio = prio;
   14596:	9a08      	ldr	r2, [sp, #32]
	e->abort_cb = abort_cb;
   14598:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   1459a:	f00a 0a01 	and.w	sl, sl, #1
   1459e:	f023 0303 	bic.w	r3, r3, #3
   145a2:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   145a6:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->prio = prio;
   145aa:	61e2      	str	r2, [r4, #28]
	e->is_resume = is_resume;
   145ac:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   145b0:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   145b2:	70f5      	strb	r5, [r6, #3]
}
   145b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   145b8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   145bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   145c0:	200003d4 	.word	0x200003d4

000145c4 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   145c4:	4b05      	ldr	r3, [pc, #20]	; (145dc <ull_prepare_dequeue_get+0x18>)
   145c6:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   145c8:	78da      	ldrb	r2, [r3, #3]
   145ca:	7819      	ldrb	r1, [r3, #0]
   145cc:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   145ce:	bf1a      	itte	ne
   145d0:	3304      	addne	r3, #4
   145d2:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   145d6:	2000      	moveq	r0, #0
}
   145d8:	4770      	bx	lr
   145da:	bf00      	nop
   145dc:	200003d4 	.word	0x200003d4

000145e0 <ull_prepare_dequeue_iter>:
{
   145e0:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   145e2:	4b0d      	ldr	r3, [pc, #52]	; (14618 <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   145e4:	7802      	ldrb	r2, [r0, #0]
   145e6:	7859      	ldrb	r1, [r3, #1]
   145e8:	f893 c003 	ldrb.w	ip, [r3, #3]
   145ec:	f893 e000 	ldrb.w	lr, [r3]
   145f0:	4291      	cmp	r1, r2
   145f2:	bf9c      	itt	ls
   145f4:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   145f6:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   145f8:	4594      	cmp	ip, r2
   145fa:	d00a      	beq.n	14612 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   145fc:	1c53      	adds	r3, r2, #1
   145fe:	b2db      	uxtb	r3, r3
		i = 0U;
   14600:	4299      	cmp	r1, r3
   14602:	bf08      	it	eq
   14604:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   14606:	4905      	ldr	r1, [pc, #20]	; (1461c <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   14608:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1460a:	fb02 100e 	mla	r0, r2, lr, r1
}
   1460e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   14612:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14614:	e7fb      	b.n	1460e <ull_prepare_dequeue_iter+0x2e>
   14616:	bf00      	nop
   14618:	200003d4 	.word	0x200003d4
   1461c:	200003d8 	.word	0x200003d8

00014620 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   14620:	4b06      	ldr	r3, [pc, #24]	; (1463c <ull_event_done_extra_get+0x1c>)
   14622:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   14624:	78d9      	ldrb	r1, [r3, #3]
   14626:	7818      	ldrb	r0, [r3, #0]
   14628:	4291      	cmp	r1, r2
   1462a:	d005      	beq.n	14638 <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   1462c:	fb02 3300 	mla	r3, r2, r0, r3
   14630:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   14632:	b110      	cbz	r0, 1463a <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   14634:	3020      	adds	r0, #32
   14636:	4770      	bx	lr
		return NULL;
   14638:	2000      	movs	r0, #0
}
   1463a:	4770      	bx	lr
   1463c:	20000394 	.word	0x20000394

00014640 <ull_event_done>:
{
   14640:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   14642:	4a14      	ldr	r2, [pc, #80]	; (14694 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   14644:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   14646:	78d4      	ldrb	r4, [r2, #3]
   14648:	7811      	ldrb	r1, [r2, #0]
   1464a:	7855      	ldrb	r5, [r2, #1]
   1464c:	429c      	cmp	r4, r3
   1464e:	d01f      	beq.n	14690 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   14650:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   14654:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   14656:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   14658:	b2db      	uxtb	r3, r3
		_first = 0U;
   1465a:	429d      	cmp	r5, r3
   1465c:	bf08      	it	eq
   1465e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   14660:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   14662:	b19c      	cbz	r4, 1468c <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   14664:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   14666:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   14668:	6826      	ldr	r6, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   1466a:	7123      	strb	r3, [r4, #4]
	evdone->hdr.link = NULL;
   1466c:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   1466e:	61e0      	str	r0, [r4, #28]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14670:	f004 fd90 	bl	19194 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14674:	4a08      	ldr	r2, [pc, #32]	; (14698 <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14676:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14678:	4621      	mov	r1, r4
   1467a:	4630      	mov	r0, r6
   1467c:	f7fb fffe 	bl	1067c <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   14680:	2201      	movs	r2, #1
   14682:	4b06      	ldr	r3, [pc, #24]	; (1469c <ull_event_done+0x5c>)
   14684:	4611      	mov	r1, r2
   14686:	4628      	mov	r0, r5
   14688:	f7fc f86c 	bl	10764 <mayfly_enqueue>
}
   1468c:	4620      	mov	r0, r4
   1468e:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   14690:	2400      	movs	r4, #0
   14692:	e7fb      	b.n	1468c <ull_event_done+0x4c>
   14694:	20000394 	.word	0x20000394
   14698:	2000ddcc 	.word	0x2000ddcc
   1469c:	2000052c 	.word	0x2000052c

000146a0 <ticker_stop_cb>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder,
			   uint16_t lazy, void *param)
{
   146a0:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   146a2:	491a      	ldr	r1, [pc, #104]	; (1470c <ticker_stop_cb+0x6c>)
   146a4:	4a1a      	ldr	r2, [pc, #104]	; (14710 <ticker_stop_cb+0x70>)
   146a6:	1a59      	subs	r1, r3, r1
{
   146a8:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   146aa:	fba2 3101 	umull	r3, r1, r2, r1
	struct ll_adv_set *adv = param;
	uint8_t handle;
	uint32_t ret;

	handle = ull_adv_handle_get(adv);
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   146ae:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
   146b2:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   146b4:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   146b8:	d119      	bne.n	146ee <ticker_stop_cb+0x4e>

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
			  TICKER_ID_ADV_BASE + handle,
   146ba:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   146bc:	4b15      	ldr	r3, [pc, #84]	; (14714 <ticker_stop_cb+0x74>)
   146be:	9400      	str	r4, [sp, #0]
   146c0:	b2d2      	uxtb	r2, r2
   146c2:	2101      	movs	r1, #1
   146c4:	2000      	movs	r0, #0
   146c6:	f7fd fa47 	bl	11b58 <ticker_stop>
			  ticker_op_stop_cb, adv);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   146ca:	f030 0302 	bics.w	r3, r0, #2
   146ce:	d00c      	beq.n	146ea <ticker_stop_cb+0x4a>
   146d0:	4a11      	ldr	r2, [pc, #68]	; (14718 <ticker_stop_cb+0x78>)
   146d2:	4912      	ldr	r1, [pc, #72]	; (1471c <ticker_stop_cb+0x7c>)
   146d4:	4812      	ldr	r0, [pc, #72]	; (14720 <ticker_stop_cb+0x80>)
   146d6:	f240 63de 	movw	r3, #1758	; 0x6de
   146da:	f00d f971 	bl	219c0 <printk>
   146de:	4040      	eors	r0, r0
   146e0:	f380 8811 	msr	BASEPRI, r0
   146e4:	f04f 0003 	mov.w	r0, #3
   146e8:	df02      	svc	2
		  (ret == TICKER_STATUS_BUSY));
}
   146ea:	b003      	add	sp, #12
   146ec:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   146ee:	4a0a      	ldr	r2, [pc, #40]	; (14718 <ticker_stop_cb+0x78>)
   146f0:	490c      	ldr	r1, [pc, #48]	; (14724 <ticker_stop_cb+0x84>)
   146f2:	480b      	ldr	r0, [pc, #44]	; (14720 <ticker_stop_cb+0x80>)
   146f4:	f240 63d9 	movw	r3, #1753	; 0x6d9
   146f8:	f00d f962 	bl	219c0 <printk>
   146fc:	4040      	eors	r0, r0
   146fe:	f380 8811 	msr	BASEPRI, r0
   14702:	f04f 0003 	mov.w	r0, #3
   14706:	df02      	svc	2
   14708:	e7d7      	b.n	146ba <ticker_stop_cb+0x1a>
   1470a:	bf00      	nop
   1470c:	2000e1ac 	.word	0x2000e1ac
   14710:	ba2e8ba3 	.word	0xba2e8ba3
   14714:	000148e9 	.word	0x000148e9
   14718:	00028654 	.word	0x00028654
   1471c:	000286a0 	.word	0x000286a0
   14720:	000282a4 	.word	0x000282a4
   14724:	00028694 	.word	0x00028694

00014728 <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   14728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   1472a:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   1472c:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
   1472e:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   14730:	b1d7      	cbz	r7, 14768 <disabled_cb+0x40>
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;

	LL_ASSERT(adv->node_rx_cc_free);
   14732:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
   14734:	2300      	movs	r3, #0
   14736:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   14738:	b34c      	cbz	r4, 1478e <disabled_cb+0x66>
	rx = adv->node_rx_cc_free;
	adv->node_rx_cc_free = NULL;
   1473a:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1473c:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   1473e:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14740:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   14742:	f64f 73ff 	movw	r3, #65535	; 0xffff
   14746:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   14748:	221e      	movs	r2, #30
   1474a:	f104 001c 	add.w	r0, r4, #28
   1474e:	f00f fe04 	bl	2435a <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   14752:	233c      	movs	r3, #60	; 0x3c
   14754:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   14756:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   14758:	4621      	mov	r1, r4
   1475a:	4638      	mov	r0, r7
   1475c:	f7ff fd34 	bl	141c8 <ll_rx_put>
	ll_rx_sched();
}
   14760:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   14764:	f7ff bd3a 	b.w	141dc <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   14768:	4a10      	ldr	r2, [pc, #64]	; (147ac <disabled_cb+0x84>)
   1476a:	4911      	ldr	r1, [pc, #68]	; (147b0 <disabled_cb+0x88>)
   1476c:	4811      	ldr	r0, [pc, #68]	; (147b4 <disabled_cb+0x8c>)
   1476e:	f240 7315 	movw	r3, #1813	; 0x715
   14772:	f00d f925 	bl	219c0 <printk>
   14776:	4040      	eors	r0, r0
   14778:	f380 8811 	msr	BASEPRI, r0
   1477c:	f04f 0003 	mov.w	r0, #3
   14780:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   14782:	6cac      	ldr	r4, [r5, #72]	; 0x48
	link = adv->link_cc_free;
   14784:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   14786:	2300      	movs	r3, #0
   14788:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   1478a:	2c00      	cmp	r4, #0
   1478c:	d1d5      	bne.n	1473a <disabled_cb+0x12>
   1478e:	4a07      	ldr	r2, [pc, #28]	; (147ac <disabled_cb+0x84>)
   14790:	4909      	ldr	r1, [pc, #36]	; (147b8 <disabled_cb+0x90>)
   14792:	4808      	ldr	r0, [pc, #32]	; (147b4 <disabled_cb+0x8c>)
   14794:	f240 7319 	movw	r3, #1817	; 0x719
   14798:	f00d f912 	bl	219c0 <printk>
   1479c:	4040      	eors	r0, r0
   1479e:	f380 8811 	msr	BASEPRI, r0
   147a2:	f04f 0003 	mov.w	r0, #3
   147a6:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   147a8:	6cac      	ldr	r4, [r5, #72]	; 0x48
   147aa:	e7c6      	b.n	1473a <disabled_cb+0x12>
   147ac:	00028654 	.word	0x00028654
   147b0:	000286bc 	.word	0x000286bc
   147b4:	000282a4 	.word	0x000282a4
   147b8:	000286d0 	.word	0x000286d0

000147bc <ticker_cb>:
{
   147bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   147c0:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   147c2:	f64f 72ff 	movw	r2, #65535	; 0xffff
   147c6:	4295      	cmp	r5, r2
{
   147c8:	b08a      	sub	sp, #40	; 0x28
   147ca:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   147cc:	d017      	beq.n	147fe <ticker_cb+0x42>
	return ++hdr->ref;
   147ce:	7c1b      	ldrb	r3, [r3, #16]
   147d0:	3301      	adds	r3, #1
   147d2:	b2db      	uxtb	r3, r3
   147d4:	4680      	mov	r8, r0
   147d6:	460f      	mov	r7, r1
   147d8:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   147da:	2b00      	cmp	r3, #0
   147dc:	d060      	beq.n	148a0 <ticker_cb+0xe4>
		p.ticks_at_expire = ticks_at_expire;
   147de:	4e37      	ldr	r6, [pc, #220]	; (148bc <ticker_cb+0x100>)
		mfy.param = &p;
   147e0:	4b37      	ldr	r3, [pc, #220]	; (148c0 <ticker_cb+0x104>)
		p.ticks_at_expire = ticks_at_expire;
   147e2:	f8c6 8000 	str.w	r8, [r6]
	lll = &adv->lll;
   147e6:	f104 021c 	add.w	r2, r4, #28
		p.param = lll;
   147ea:	60f2      	str	r2, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   147ec:	2200      	movs	r2, #0
   147ee:	4611      	mov	r1, r2
   147f0:	2001      	movs	r0, #1
		p.remainder = remainder;
   147f2:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   147f4:	8135      	strh	r5, [r6, #8]
		mfy.param = &p;
   147f6:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   147f8:	f7fb ffb4 	bl	10764 <mayfly_enqueue>
		LL_ASSERT(!ret);
   147fc:	b938      	cbnz	r0, 1480e <ticker_cb+0x52>
	if (!lll->is_hdcd)
   147fe:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   14802:	f010 0501 	ands.w	r5, r0, #1
   14806:	d014      	beq.n	14832 <ticker_cb+0x76>
}
   14808:	b00a      	add	sp, #40	; 0x28
   1480a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   1480e:	4a2d      	ldr	r2, [pc, #180]	; (148c4 <ticker_cb+0x108>)
   14810:	492d      	ldr	r1, [pc, #180]	; (148c8 <ticker_cb+0x10c>)
   14812:	482e      	ldr	r0, [pc, #184]	; (148cc <ticker_cb+0x110>)
   14814:	f240 6395 	movw	r3, #1685	; 0x695
   14818:	f00d f8d2 	bl	219c0 <printk>
   1481c:	4040      	eors	r0, r0
   1481e:	f380 8811 	msr	BASEPRI, r0
   14822:	f04f 0003 	mov.w	r0, #3
   14826:	df02      	svc	2
	if (!lll->is_hdcd)
   14828:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   1482c:	f010 0501 	ands.w	r5, r0, #1
   14830:	d1ea      	bne.n	14808 <ticker_cb+0x4c>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   14832:	2104      	movs	r1, #4
   14834:	a809      	add	r0, sp, #36	; 0x24
   14836:	f006 fa51 	bl	1acdc <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1483a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1483c:	4a24      	ldr	r2, [pc, #144]	; (148d0 <ticker_cb+0x114>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1483e:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   14840:	fba2 1203 	umull	r1, r2, r2, r3
   14844:	1a99      	subs	r1, r3, r2
   14846:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   1484a:	0a12      	lsrs	r2, r2, #8
   1484c:	f240 1147 	movw	r1, #327	; 0x147
   14850:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14854:	4a1f      	ldr	r2, [pc, #124]	; (148d4 <ticker_cb+0x118>)
   14856:	4920      	ldr	r1, [pc, #128]	; (148d8 <ticker_cb+0x11c>)
   14858:	1aa2      	subs	r2, r4, r2
   1485a:	fba1 1202 	umull	r1, r2, r1, r2
   1485e:	0992      	lsrs	r2, r2, #6
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14860:	491e      	ldr	r1, [pc, #120]	; (148dc <ticker_cb+0x120>)
				    (TICKER_ID_ADV_BASE +
   14862:	3202      	adds	r2, #2
		random_delay += 1;
   14864:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   14866:	e9cd 5104 	strd	r5, r1, [sp, #16]
   1486a:	e9cd 5502 	strd	r5, r5, [sp, #8]
   1486e:	e9cd 5500 	strd	r5, r5, [sp]
   14872:	b2d2      	uxtb	r2, r2
   14874:	2101      	movs	r1, #1
   14876:	4628      	mov	r0, r5
		random_delay += 1;
   14878:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   1487a:	f7fd f955 	bl	11b28 <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1487e:	f030 0302 	bics.w	r3, r0, #2
   14882:	d0c1      	beq.n	14808 <ticker_cb+0x4c>
   14884:	4a0f      	ldr	r2, [pc, #60]	; (148c4 <ticker_cb+0x108>)
   14886:	4916      	ldr	r1, [pc, #88]	; (148e0 <ticker_cb+0x124>)
   14888:	4810      	ldr	r0, [pc, #64]	; (148cc <ticker_cb+0x110>)
   1488a:	f240 63ab 	movw	r3, #1707	; 0x6ab
   1488e:	f00d f897 	bl	219c0 <printk>
   14892:	4040      	eors	r0, r0
   14894:	f380 8811 	msr	BASEPRI, r0
   14898:	f04f 0003 	mov.w	r0, #3
   1489c:	df02      	svc	2
}
   1489e:	e7b3      	b.n	14808 <ticker_cb+0x4c>
		LL_ASSERT(ref);
   148a0:	4a08      	ldr	r2, [pc, #32]	; (148c4 <ticker_cb+0x108>)
   148a2:	4910      	ldr	r1, [pc, #64]	; (148e4 <ticker_cb+0x128>)
   148a4:	4809      	ldr	r0, [pc, #36]	; (148cc <ticker_cb+0x110>)
   148a6:	f240 6389 	movw	r3, #1673	; 0x689
   148aa:	f00d f889 	bl	219c0 <printk>
   148ae:	4040      	eors	r0, r0
   148b0:	f380 8811 	msr	BASEPRI, r0
   148b4:	f04f 0003 	mov.w	r0, #3
   148b8:	df02      	svc	2
   148ba:	e790      	b.n	147de <ticker_cb+0x22>
   148bc:	2000e210 	.word	0x2000e210
   148c0:	2000056c 	.word	0x2000056c
   148c4:	00028654 	.word	0x00028654
   148c8:	00028540 	.word	0x00028540
   148cc:	000282a4 	.word	0x000282a4
   148d0:	90d4f121 	.word	0x90d4f121
   148d4:	2000e1ac 	.word	0x2000e1ac
   148d8:	ba2e8ba3 	.word	0xba2e8ba3
   148dc:	000149a5 	.word	0x000149a5
   148e0:	000286a0 	.word	0x000286a0
   148e4:	000286e8 	.word	0x000286e8

000148e8 <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   148e8:	2800      	cmp	r0, #0
   148ea:	d13d      	bne.n	14968 <ticker_op_stop_cb+0x80>
{
   148ec:	b538      	push	{r3, r4, r5, lr}
   148ee:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   148f0:	4d25      	ldr	r5, [pc, #148]	; (14988 <ticker_op_stop_cb+0xa0>)
	return hdr->ref;
   148f2:	7c09      	ldrb	r1, [r1, #16]
   148f4:	f104 031c 	add.w	r3, r4, #28
   148f8:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   148fa:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   148fe:	b1e1      	cbz	r1, 1493a <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   14900:	6962      	ldr	r2, [r4, #20]
   14902:	b16a      	cbz	r2, 14920 <ticker_op_stop_cb+0x38>
   14904:	4a21      	ldr	r2, [pc, #132]	; (1498c <ticker_op_stop_cb+0xa4>)
   14906:	4922      	ldr	r1, [pc, #136]	; (14990 <ticker_op_stop_cb+0xa8>)
   14908:	4822      	ldr	r0, [pc, #136]	; (14994 <ticker_op_stop_cb+0xac>)
   1490a:	f240 63fc 	movw	r3, #1788	; 0x6fc
   1490e:	f00d f857 	bl	219c0 <printk>
   14912:	4040      	eors	r0, r0
   14914:	f380 8811 	msr	BASEPRI, r0
   14918:	f04f 0003 	mov.w	r0, #3
   1491c:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   1491e:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   14920:	491d      	ldr	r1, [pc, #116]	; (14998 <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
   14922:	481e      	ldr	r0, [pc, #120]	; (1499c <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
   14924:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14926:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   14928:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   1492a:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1492c:	4b16      	ldr	r3, [pc, #88]	; (14988 <ticker_op_stop_cb+0xa0>)
   1492e:	4611      	mov	r1, r2
   14930:	2002      	movs	r0, #2
   14932:	f7fb ff17 	bl	10764 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14936:	b9c0      	cbnz	r0, 1496a <ticker_op_stop_cb+0x82>
}
   14938:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   1493a:	4817      	ldr	r0, [pc, #92]	; (14998 <ticker_op_stop_cb+0xb0>)
   1493c:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   1493e:	462b      	mov	r3, r5
   14940:	2101      	movs	r1, #1
   14942:	2002      	movs	r0, #2
   14944:	f7fb ff0e 	bl	10764 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14948:	2800      	cmp	r0, #0
   1494a:	d0f5      	beq.n	14938 <ticker_op_stop_cb+0x50>
   1494c:	4a0f      	ldr	r2, [pc, #60]	; (1498c <ticker_op_stop_cb+0xa4>)
   1494e:	4914      	ldr	r1, [pc, #80]	; (149a0 <ticker_op_stop_cb+0xb8>)
   14950:	4810      	ldr	r0, [pc, #64]	; (14994 <ticker_op_stop_cb+0xac>)
   14952:	f44f 63e1 	mov.w	r3, #1800	; 0x708
   14956:	f00d f833 	bl	219c0 <printk>
   1495a:	4040      	eors	r0, r0
   1495c:	f380 8811 	msr	BASEPRI, r0
   14960:	f04f 0003 	mov.w	r0, #3
   14964:	df02      	svc	2
}
   14966:	bd38      	pop	{r3, r4, r5, pc}
   14968:	4770      	bx	lr
		LL_ASSERT(!ret);
   1496a:	4a08      	ldr	r2, [pc, #32]	; (1498c <ticker_op_stop_cb+0xa4>)
   1496c:	490c      	ldr	r1, [pc, #48]	; (149a0 <ticker_op_stop_cb+0xb8>)
   1496e:	4809      	ldr	r0, [pc, #36]	; (14994 <ticker_op_stop_cb+0xac>)
   14970:	f240 7303 	movw	r3, #1795	; 0x703
   14974:	f00d f824 	bl	219c0 <printk>
   14978:	4040      	eors	r0, r0
   1497a:	f380 8811 	msr	BASEPRI, r0
   1497e:	f04f 0003 	mov.w	r0, #3
   14982:	df02      	svc	2
}
   14984:	bd38      	pop	{r3, r4, r5, pc}
   14986:	bf00      	nop
   14988:	2000057c 	.word	0x2000057c
   1498c:	00028654 	.word	0x00028654
   14990:	000286ec 	.word	0x000286ec
   14994:	000282a4 	.word	0x000282a4
   14998:	00014729 	.word	0x00014729
   1499c:	0001ad6d 	.word	0x0001ad6d
   149a0:	00028540 	.word	0x00028540

000149a4 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   149a4:	b900      	cbnz	r0, 149a8 <ticker_op_update_cb+0x4>
   149a6:	4770      	bx	lr
{
   149a8:	b510      	push	{r4, lr}
   149aa:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   149ac:	f7ff fce8 	bl	14380 <ull_disable_mark_get>
   149b0:	4284      	cmp	r4, r0
   149b2:	d00c      	beq.n	149ce <ticker_op_update_cb+0x2a>
   149b4:	4a06      	ldr	r2, [pc, #24]	; (149d0 <ticker_op_update_cb+0x2c>)
   149b6:	4907      	ldr	r1, [pc, #28]	; (149d4 <ticker_op_update_cb+0x30>)
   149b8:	4807      	ldr	r0, [pc, #28]	; (149d8 <ticker_op_update_cb+0x34>)
   149ba:	f240 63cc 	movw	r3, #1740	; 0x6cc
   149be:	f00c ffff 	bl	219c0 <printk>
   149c2:	4040      	eors	r0, r0
   149c4:	f380 8811 	msr	BASEPRI, r0
   149c8:	f04f 0003 	mov.w	r0, #3
   149cc:	df02      	svc	2
}
   149ce:	bd10      	pop	{r4, pc}
   149d0:	00028654 	.word	0x00028654
   149d4:	00028700 	.word	0x00028700
   149d8:	000282a4 	.word	0x000282a4

000149dc <conn_release.constprop.0>:

static void conn_release(struct ll_adv_set *adv)
   149dc:	b570      	push	{r4, r5, r6, lr}
{
	struct lll_conn *lll = adv->lll.conn;
   149de:	4c1b      	ldr	r4, [pc, #108]	; (14a4c <conn_release.constprop.0+0x70>)
   149e0:	6a65      	ldr	r5, [r4, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   149e2:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   149e4:	b163      	cbz	r3, 14a00 <conn_release.constprop.0+0x24>
   149e6:	4a1a      	ldr	r2, [pc, #104]	; (14a50 <conn_release.constprop.0+0x74>)
   149e8:	491a      	ldr	r1, [pc, #104]	; (14a54 <conn_release.constprop.0+0x78>)
   149ea:	481b      	ldr	r0, [pc, #108]	; (14a58 <conn_release.constprop.0+0x7c>)
   149ec:	f240 7343 	movw	r3, #1859	; 0x743
   149f0:	f00c ffe6 	bl	219c0 <printk>
   149f4:	4040      	eors	r0, r0
   149f6:	f380 8811 	msr	BASEPRI, r0
   149fa:	f04f 0003 	mov.w	r0, #3
   149fe:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   14a00:	f105 0150 	add.w	r1, r5, #80	; 0x50
   14a04:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   14a08:	f7fb fe2e 	bl	10668 <memq_deinit>
	LL_ASSERT(link);
   14a0c:	4606      	mov	r6, r0
   14a0e:	b170      	cbz	r0, 14a2e <conn_release.constprop.0+0x52>
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   14a10:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   14a12:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   14a14:	f000 ffba 	bl	1598c <ll_conn_release>
	adv->lll.conn = NULL;
   14a18:	2500      	movs	r5, #0

	ll_rx_release(adv->node_rx_cc_free);
   14a1a:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   14a1c:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   14a1e:	f7ff fbcd 	bl	141bc <ll_rx_release>
	adv->node_rx_cc_free = NULL;
	ll_rx_link_release(adv->link_cc_free);
   14a22:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
   14a24:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   14a26:	f7ff fbbd 	bl	141a4 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   14a2a:	6465      	str	r5, [r4, #68]	; 0x44
}
   14a2c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   14a2e:	4a08      	ldr	r2, [pc, #32]	; (14a50 <conn_release.constprop.0+0x74>)
   14a30:	490a      	ldr	r1, [pc, #40]	; (14a5c <conn_release.constprop.0+0x80>)
   14a32:	4809      	ldr	r0, [pc, #36]	; (14a58 <conn_release.constprop.0+0x7c>)
   14a34:	f240 7345 	movw	r3, #1861	; 0x745
   14a38:	f00c ffc2 	bl	219c0 <printk>
   14a3c:	4040      	eors	r0, r0
   14a3e:	f380 8811 	msr	BASEPRI, r0
   14a42:	f04f 0003 	mov.w	r0, #3
   14a46:	df02      	svc	2
   14a48:	e7e2      	b.n	14a10 <conn_release.constprop.0+0x34>
   14a4a:	bf00      	nop
   14a4c:	2000e1ac 	.word	0x2000e1ac
   14a50:	00028654 	.word	0x00028654
   14a54:	00028730 	.word	0x00028730
   14a58:	000282a4 	.word	0x000282a4
   14a5c:	000287b0 	.word	0x000287b0

00014a60 <disable.part.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   14a60:	b530      	push	{r4, r5, lr}
			return err;
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

	mark = ull_disable_mark(adv);
   14a62:	4c4a      	ldr	r4, [pc, #296]	; (14b8c <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   14a64:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   14a66:	4620      	mov	r0, r4
   14a68:	f7ff fc74 	bl	14354 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   14a6c:	4284      	cmp	r4, r0
   14a6e:	d00c      	beq.n	14a8a <disable.part.0+0x2a>
   14a70:	4a47      	ldr	r2, [pc, #284]	; (14b90 <disable.part.0+0x130>)
   14a72:	4948      	ldr	r1, [pc, #288]	; (14b94 <disable.part.0+0x134>)
   14a74:	4848      	ldr	r0, [pc, #288]	; (14b98 <disable.part.0+0x138>)
   14a76:	f44f 63f3 	mov.w	r3, #1944	; 0x798
   14a7a:	f00c ffa1 	bl	219c0 <printk>
   14a7e:	4040      	eors	r0, r0
   14a80:	f380 8811 	msr	BASEPRI, r0
   14a84:	f04f 0003 	mov.w	r0, #3
   14a88:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.is_hdcd) {
   14a8a:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   14a8e:	07db      	lsls	r3, r3, #31
		ret_cb = TICKER_STATUS_BUSY;
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14a90:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   14a92:	d50d      	bpl.n	14ab0 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   14a94:	2102      	movs	r1, #2
   14a96:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14a98:	4b40      	ldr	r3, [pc, #256]	; (14b9c <disable.part.0+0x13c>)
   14a9a:	9500      	str	r5, [sp, #0]
   14a9c:	2103      	movs	r1, #3
   14a9e:	2201      	movs	r2, #1
   14aa0:	2000      	movs	r0, #0
   14aa2:	f7fd f859 	bl	11b58 <ticker_stop>
				  TICKER_USER_ID_THREAD, TICKER_ID_ADV_STOP,
				  ull_ticker_status_give, (void *)&ret_cb);
		ret = ull_ticker_status_take(ret, &ret_cb);
   14aa6:	4629      	mov	r1, r5
   14aa8:	f7ff fc2c 	bl	14304 <ull_ticker_status_take>
		if (ret) {
   14aac:	2800      	cmp	r0, #0
   14aae:	d157      	bne.n	14b60 <disable.part.0+0x100>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}
#endif

	ret_cb = TICKER_STATUS_BUSY;
   14ab0:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14ab2:	2103      	movs	r1, #3
   14ab4:	4b39      	ldr	r3, [pc, #228]	; (14b9c <disable.part.0+0x13c>)
   14ab6:	9500      	str	r5, [sp, #0]
   14ab8:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   14aba:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14abc:	f7fd f84c 	bl	11b58 <ticker_stop>
			  TICKER_ID_ADV_BASE + handle,
			  ull_ticker_status_give, (void *)&ret_cb);
	ret = ull_ticker_status_take(ret, &ret_cb);
   14ac0:	4629      	mov	r1, r5
   14ac2:	f7ff fc1f 	bl	14304 <ull_ticker_status_take>
	if (ret) {
   14ac6:	2800      	cmp	r0, #0
   14ac8:	d135      	bne.n	14b36 <disable.part.0+0xd6>
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	ret = ull_disable(&adv->lll);
   14aca:	4835      	ldr	r0, [pc, #212]	; (14ba0 <disable.part.0+0x140>)
   14acc:	f7ff fc7a 	bl	143c4 <ull_disable>
	LL_ASSERT(!ret);
   14ad0:	b9f0      	cbnz	r0, 14b10 <disable.part.0+0xb0>

	mark = ull_disable_unmark(adv);
   14ad2:	482e      	ldr	r0, [pc, #184]	; (14b8c <disable.part.0+0x12c>)
   14ad4:	f7ff fc48 	bl	14368 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14ad8:	4284      	cmp	r4, r0
   14ada:	d00c      	beq.n	14af6 <disable.part.0+0x96>
   14adc:	4a2c      	ldr	r2, [pc, #176]	; (14b90 <disable.part.0+0x130>)
   14ade:	492d      	ldr	r1, [pc, #180]	; (14b94 <disable.part.0+0x134>)
   14ae0:	482d      	ldr	r0, [pc, #180]	; (14b98 <disable.part.0+0x138>)
   14ae2:	f240 73ba 	movw	r3, #1978	; 0x7ba
   14ae6:	f00c ff6b 	bl	219c0 <printk>
   14aea:	4040      	eors	r0, r0
   14aec:	f380 8811 	msr	BASEPRI, r0
   14af0:	f04f 0003 	mov.w	r0, #3
   14af4:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
   14af6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14af8:	b10b      	cbz	r3, 14afe <disable.part.0+0x9e>
		conn_release(adv);
   14afa:	f7ff ff6f 	bl	149dc <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
   14afe:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
   14b02:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   14b04:	f36f 0300 	bfc	r3, #0, #1
   14b08:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
   14b0c:	b005      	add	sp, #20
   14b0e:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14b10:	4a1f      	ldr	r2, [pc, #124]	; (14b90 <disable.part.0+0x130>)
   14b12:	4924      	ldr	r1, [pc, #144]	; (14ba4 <disable.part.0+0x144>)
   14b14:	4820      	ldr	r0, [pc, #128]	; (14b98 <disable.part.0+0x138>)
   14b16:	f240 73b7 	movw	r3, #1975	; 0x7b7
   14b1a:	f00c ff51 	bl	219c0 <printk>
   14b1e:	4040      	eors	r0, r0
   14b20:	f380 8811 	msr	BASEPRI, r0
   14b24:	f04f 0003 	mov.w	r0, #3
   14b28:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   14b2a:	4818      	ldr	r0, [pc, #96]	; (14b8c <disable.part.0+0x12c>)
   14b2c:	f7ff fc1c 	bl	14368 <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14b30:	4284      	cmp	r4, r0
   14b32:	d1d3      	bne.n	14adc <disable.part.0+0x7c>
   14b34:	e7df      	b.n	14af6 <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
   14b36:	4815      	ldr	r0, [pc, #84]	; (14b8c <disable.part.0+0x12c>)
   14b38:	f7ff fc16 	bl	14368 <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   14b3c:	4284      	cmp	r4, r0
   14b3e:	d021      	beq.n	14b84 <disable.part.0+0x124>
   14b40:	4a13      	ldr	r2, [pc, #76]	; (14b90 <disable.part.0+0x130>)
   14b42:	4914      	ldr	r1, [pc, #80]	; (14b94 <disable.part.0+0x134>)
   14b44:	4814      	ldr	r0, [pc, #80]	; (14b98 <disable.part.0+0x138>)
   14b46:	f240 73b1 	movw	r3, #1969	; 0x7b1
   14b4a:	f00c ff39 	bl	219c0 <printk>
   14b4e:	4040      	eors	r0, r0
   14b50:	f380 8811 	msr	BASEPRI, r0
   14b54:	f04f 0003 	mov.w	r0, #3
   14b58:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   14b5a:	200c      	movs	r0, #12
}
   14b5c:	b005      	add	sp, #20
   14b5e:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
   14b60:	480a      	ldr	r0, [pc, #40]	; (14b8c <disable.part.0+0x12c>)
   14b62:	f7ff fc01 	bl	14368 <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   14b66:	4284      	cmp	r4, r0
   14b68:	d00c      	beq.n	14b84 <disable.part.0+0x124>
   14b6a:	4a09      	ldr	r2, [pc, #36]	; (14b90 <disable.part.0+0x130>)
   14b6c:	4909      	ldr	r1, [pc, #36]	; (14b94 <disable.part.0+0x134>)
   14b6e:	480a      	ldr	r0, [pc, #40]	; (14b98 <disable.part.0+0x138>)
   14b70:	f240 73a3 	movw	r3, #1955	; 0x7a3
   14b74:	f00c ff24 	bl	219c0 <printk>
   14b78:	4040      	eors	r0, r0
   14b7a:	f380 8811 	msr	BASEPRI, r0
   14b7e:	f04f 0003 	mov.w	r0, #3
   14b82:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   14b84:	200c      	movs	r0, #12
}
   14b86:	b005      	add	sp, #20
   14b88:	bd30      	pop	{r4, r5, pc}
   14b8a:	bf00      	nop
   14b8c:	2000e1ac 	.word	0x2000e1ac
   14b90:	00028654 	.word	0x00028654
   14b94:	00028744 	.word	0x00028744
   14b98:	000282a4 	.word	0x000282a4
   14b9c:	00013455 	.word	0x00013455
   14ba0:	2000e1c8 	.word	0x2000e1c8
   14ba4:	00028540 	.word	0x00028540

00014ba8 <ll_adv_params_set>:
{
   14ba8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
   14bac:	4c4d      	ldr	r4, [pc, #308]	; (14ce4 <ll_adv_params_set+0x13c>)
{
   14bae:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14bb0:	4b4d      	ldr	r3, [pc, #308]	; (14ce8 <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   14bb2:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
{
   14bb6:	4680      	mov	r8, r0
   14bb8:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14bba:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   14bbe:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   14bc0:	f016 0601 	ands.w	r6, r6, #1
{
   14bc4:	4615      	mov	r5, r2
   14bc6:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   14bca:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14bce:	9000      	str	r0, [sp, #0]
   14bd0:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   14bd4:	d170      	bne.n	14cb8 <ll_adv_params_set+0x110>
	adv->lll.chan_map = chan_map;
   14bd6:	f00c 0c07 	and.w	ip, ip, #7
   14bda:	f002 0203 	and.w	r2, r2, #3
   14bde:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   14be2:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14be6:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
		adv->interval = 0;
   14bea:	f1be 0f01 	cmp.w	lr, #1
   14bee:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   14bf2:	bf08      	it	eq
   14bf4:	f04f 0800 	moveq.w	r8, #0
   14bf8:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
   14bfc:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	adv->lll.chan_map = chan_map;
   14c00:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	pdu->type = pdu_adv_type[adv_type];
   14c02:	ab02      	add	r3, sp, #8
   14c04:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
   14c06:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   14c0a:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   14c0e:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   14c12:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu->type = pdu_adv_type[adv_type];
   14c16:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
   14c1a:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14c1e:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   14c22:	f022 021f 	bic.w	r2, r2, #31
   14c26:	f003 030f 	and.w	r3, r3, #15
   14c2a:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
   14c2e:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14c32:	bf0c      	ite	eq
   14c34:	2101      	moveq	r1, #1
   14c36:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
   14c38:	f365 0242 	bfi	r2, r5, #1, #2
   14c3c:	f361 1345 	bfi	r3, r1, #5, #1
   14c40:	f888 3000 	strb.w	r3, [r8]
   14c44:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   14c48:	b2d3      	uxtb	r3, r2
   14c4a:	0752      	lsls	r2, r2, #29
   14c4c:	d509      	bpl.n	14c62 <ll_adv_params_set+0xba>
		adv->id_addr_type = direct_addr_type;
   14c4e:	f367 03c3 	bfi	r3, r7, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14c52:	9908      	ldr	r1, [sp, #32]
		adv->id_addr_type = direct_addr_type;
   14c54:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14c58:	2206      	movs	r2, #6
   14c5a:	f104 004f 	add.w	r0, r4, #79	; 0x4f
   14c5e:	f00f fb51 	bl	24304 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14c62:	f898 3000 	ldrb.w	r3, [r8]
   14c66:	f003 020f 	and.w	r2, r3, #15
   14c6a:	2a01      	cmp	r2, #1
   14c6c:	d029      	beq.n	14cc2 <ll_adv_params_set+0x11a>
	} else if (pdu->len == 0) {
   14c6e:	f898 2001 	ldrb.w	r2, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   14c72:	f005 0501 	and.w	r5, r5, #1
   14c76:	f365 1386 	bfi	r3, r5, #6, #1
	} else if (pdu->len == 0) {
   14c7a:	b1aa      	cbz	r2, 14ca8 <ll_adv_params_set+0x100>
		pdu->rx_addr = 0;
   14c7c:	f36f 13c7 	bfc	r3, #7, #1
   14c80:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14c84:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14c88:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14c8c:	01ad      	lsls	r5, r5, #6
   14c8e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		if (pdu->len == 0) {
   14c90:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14c92:	f045 0504 	orr.w	r5, r5, #4
   14c96:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   14c98:	b912      	cbnz	r2, 14ca0 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   14c9a:	2106      	movs	r1, #6
   14c9c:	7059      	strb	r1, [r3, #1]
	return 0;
   14c9e:	4616      	mov	r6, r2
}
   14ca0:	4630      	mov	r0, r6
   14ca2:	b002      	add	sp, #8
   14ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
   14ca8:	f362 13c7 	bfi	r3, r2, #7, #1
   14cac:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   14cb0:	2306      	movs	r3, #6
   14cb2:	f888 3001 	strb.w	r3, [r8, #1]
   14cb6:	e7e5      	b.n	14c84 <ll_adv_params_set+0xdc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14cb8:	260c      	movs	r6, #12
}
   14cba:	4630      	mov	r0, r6
   14cbc:	b002      	add	sp, #8
   14cbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   14cc2:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
   14cc6:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   14cc8:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   14ccc:	f367 13c7 	bfi	r3, r7, #7, #1
   14cd0:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   14cd4:	9908      	ldr	r1, [sp, #32]
   14cd6:	2206      	movs	r2, #6
   14cd8:	f00f fb14 	bl	24304 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   14cdc:	230c      	movs	r3, #12
   14cde:	f888 3001 	strb.w	r3, [r8, #1]
   14ce2:	e7cf      	b.n	14c84 <ll_adv_params_set+0xdc>
   14ce4:	2000e1ac 	.word	0x2000e1ac
   14ce8:	00027968 	.word	0x00027968

00014cec <ll_adv_data_set>:
{
   14cec:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14cee:	4e21      	ldr	r6, [pc, #132]	; (14d74 <ll_adv_data_set+0x88>)
   14cf0:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   14cf4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   14cf8:	b083      	sub	sp, #12
   14cfa:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   14cfc:	782b      	ldrb	r3, [r5, #0]
   14cfe:	f003 030f 	and.w	r3, r3, #15
   14d02:	2b01      	cmp	r3, #1
   14d04:	d032      	beq.n	14d6c <ll_adv_data_set+0x80>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   14d06:	281f      	cmp	r0, #31
   14d08:	4604      	mov	r4, r0
   14d0a:	d82c      	bhi.n	14d66 <ll_adv_data_set+0x7a>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14d0c:	460f      	mov	r7, r1
   14d0e:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   14d12:	f10d 0107 	add.w	r1, sp, #7
   14d16:	f006 fb51 	bl	1b3bc <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   14d1a:	4629      	mov	r1, r5
   14d1c:	4605      	mov	r5, r0
   14d1e:	f811 2b02 	ldrb.w	r2, [r1], #2
   14d22:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   14d26:	f3c2 0303 	ubfx	r3, r2, #0, #4
   14d2a:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   14d2e:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   14d32:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   14d36:	f002 0280 	and.w	r2, r2, #128	; 0x80
   14d3a:	4628      	mov	r0, r5
   14d3c:	4313      	orrs	r3, r2
   14d3e:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   14d42:	2206      	movs	r2, #6
   14d44:	f00f fade 	bl	24304 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   14d48:	4622      	mov	r2, r4
   14d4a:	4639      	mov	r1, r7
   14d4c:	f105 0008 	add.w	r0, r5, #8
   14d50:	f00f fad8 	bl	24304 <memcpy>
	pdu->last = idx;
   14d54:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   14d58:	3406      	adds	r4, #6
	return 0;
   14d5a:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   14d5c:	706c      	strb	r4, [r5, #1]
   14d5e:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
}
   14d62:	b003      	add	sp, #12
   14d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   14d66:	2012      	movs	r0, #18
}
   14d68:	b003      	add	sp, #12
   14d6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   14d6c:	2000      	movs	r0, #0
}
   14d6e:	b003      	add	sp, #12
   14d70:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14d72:	bf00      	nop
   14d74:	2000e1ac 	.word	0x2000e1ac

00014d78 <ull_adv_init>:
{
   14d78:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   14d7a:	4c05      	ldr	r4, [pc, #20]	; (14d90 <ull_adv_init+0x18>)
   14d7c:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14d80:	f006 fb06 	bl	1b390 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   14d84:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14d88:	f006 fb02 	bl	1b390 <lll_adv_data_init>
}
   14d8c:	2000      	movs	r0, #0
   14d8e:	bd10      	pop	{r4, pc}
   14d90:	2000e1ac 	.word	0x2000e1ac

00014d94 <ull_adv_reset>:
{
   14d94:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   14d96:	4b04      	ldr	r3, [pc, #16]	; (14da8 <ull_adv_reset+0x14>)
   14d98:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   14d9c:	07db      	lsls	r3, r3, #31
   14d9e:	d501      	bpl.n	14da4 <ull_adv_reset+0x10>
   14da0:	f7ff fe5e 	bl	14a60 <disable.part.0>
}
   14da4:	2000      	movs	r0, #0
   14da6:	bd08      	pop	{r3, pc}
   14da8:	2000e1ac 	.word	0x2000e1ac

00014dac <ull_adv_reset_finalize>:
{
   14dac:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   14dae:	4c09      	ldr	r4, [pc, #36]	; (14dd4 <ull_adv_reset_finalize+0x28>)
   14db0:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   14db4:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   14db6:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   14db8:	f006 fafa 	bl	1b3b0 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   14dbc:	4620      	mov	r0, r4
   14dbe:	f006 faf7 	bl	1b3b0 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   14dc2:	4628      	mov	r0, r5
   14dc4:	f006 fae4 	bl	1b390 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   14dc8:	4620      	mov	r0, r4
   14dca:	f006 fae1 	bl	1b390 <lll_adv_data_init>
}
   14dce:	2000      	movs	r0, #0
   14dd0:	bd38      	pop	{r3, r4, r5, pc}
   14dd2:	bf00      	nop
   14dd4:	2000e1ac 	.word	0x2000e1ac

00014dd8 <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14dd8:	4a03      	ldr	r2, [pc, #12]	; (14de8 <ull_adv_handle_get+0x10>)
   14dda:	4b04      	ldr	r3, [pc, #16]	; (14dec <ull_adv_handle_get+0x14>)
   14ddc:	1a80      	subs	r0, r0, r2
   14dde:	fba3 3000 	umull	r3, r0, r3, r0
}
   14de2:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14de6:	4770      	bx	lr
   14de8:	2000e1ac 	.word	0x2000e1ac
   14dec:	ba2e8ba3 	.word	0xba2e8ba3

00014df0 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14df0:	4a04      	ldr	r2, [pc, #16]	; (14e04 <ull_adv_lll_handle_get+0x14>)
   14df2:	6800      	ldr	r0, [r0, #0]
   14df4:	4b04      	ldr	r3, [pc, #16]	; (14e08 <ull_adv_lll_handle_get+0x18>)
   14df6:	1a80      	subs	r0, r0, r2
   14df8:	fba3 3000 	umull	r3, r0, r3, r0
}
   14dfc:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14e00:	4770      	bx	lr
   14e02:	bf00      	nop
   14e04:	2000e1ac 	.word	0x2000e1ac
   14e08:	ba2e8ba3 	.word	0xba2e8ba3

00014e0c <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   14e0c:	b938      	cbnz	r0, 14e1e <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   14e0e:	4805      	ldr	r0, [pc, #20]	; (14e24 <ull_adv_is_enabled_get+0x18>)
   14e10:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   14e14:	f013 0f01 	tst.w	r3, #1
   14e18:	bf08      	it	eq
   14e1a:	2000      	moveq	r0, #0
   14e1c:	4770      	bx	lr
		return NULL;
   14e1e:	2000      	movs	r0, #0
}
   14e20:	4770      	bx	lr
   14e22:	bf00      	nop
   14e24:	2000e1ac 	.word	0x2000e1ac

00014e28 <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   14e28:	b928      	cbnz	r0, 14e36 <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   14e2a:	4b04      	ldr	r3, [pc, #16]	; (14e3c <ull_adv_is_enabled+0x14>)
   14e2c:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   14e30:	f000 0001 	and.w	r0, r0, #1
   14e34:	4770      	bx	lr
   14e36:	2000      	movs	r0, #0
}
   14e38:	4770      	bx	lr
   14e3a:	bf00      	nop
   14e3c:	2000e1ac 	.word	0x2000e1ac

00014e40 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   14e40:	b950      	cbnz	r0, 14e58 <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   14e42:	4b06      	ldr	r3, [pc, #24]	; (14e5c <ull_adv_filter_pol_get+0x1c>)
   14e44:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   14e48:	f010 0001 	ands.w	r0, r0, #1
   14e4c:	d005      	beq.n	14e5a <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   14e4e:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   14e52:	f000 0003 	and.w	r0, r0, #3
   14e56:	4770      	bx	lr
		return 0;
   14e58:	2000      	movs	r0, #0
}
   14e5a:	4770      	bx	lr
   14e5c:	2000e1ac 	.word	0x2000e1ac

00014e60 <ull_scan_rsp_set>:
{
   14e60:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14e62:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   14e66:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   14e6a:	b083      	sub	sp, #12
   14e6c:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   14e6e:	460e      	mov	r6, r1
   14e70:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   14e72:	f10d 0107 	add.w	r1, sp, #7
   14e76:	3038      	adds	r0, #56	; 0x38
   14e78:	4617      	mov	r7, r2
   14e7a:	f006 fa9f 	bl	1b3bc <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   14e7e:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   14e80:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   14e82:	f811 3b02 	ldrb.w	r3, [r1], #2
   14e86:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14e8a:	019b      	lsls	r3, r3, #6
   14e8c:	f043 0304 	orr.w	r3, r3, #4
   14e90:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   14e92:	1db3      	adds	r3, r6, #6
   14e94:	7043      	strb	r3, [r0, #1]
   14e96:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   14e98:	3002      	adds	r0, #2
   14e9a:	f00f fa33 	bl	24304 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   14e9e:	4632      	mov	r2, r6
   14ea0:	4639      	mov	r1, r7
   14ea2:	f105 0008 	add.w	r0, r5, #8
   14ea6:	f00f fa2d 	bl	24304 <memcpy>
	pdu->last = idx;
   14eaa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   14eae:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   14eb2:	2000      	movs	r0, #0
   14eb4:	b003      	add	sp, #12
   14eb6:	bdf0      	pop	{r4, r5, r6, r7, pc}

00014eb8 <ll_adv_scan_rsp_set>:
{
   14eb8:	4603      	mov	r3, r0
   14eba:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   14ebc:	4801      	ldr	r0, [pc, #4]	; (14ec4 <ll_adv_scan_rsp_set+0xc>)
   14ebe:	4619      	mov	r1, r3
   14ec0:	f7ff bfce 	b.w	14e60 <ull_scan_rsp_set>
   14ec4:	2000e1ac 	.word	0x2000e1ac

00014ec8 <ull_adv_pdu_update_addrs>:
{
   14ec8:	b570      	push	{r4, r5, r6, lr}
   14eca:	460c      	mov	r4, r1
   14ecc:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
   14ece:	f005 fa0b 	bl	1a2e8 <ull_filter_adva_get>
#else
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
   14ed2:	4601      	mov	r1, r0
   14ed4:	b300      	cbz	r0, 14f18 <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   14ed6:	7823      	ldrb	r3, [r4, #0]
   14ed8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   14edc:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   14ede:	1ca6      	adds	r6, r4, #2
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   14ee0:	2206      	movs	r2, #6
   14ee2:	4630      	mov	r0, r6
   14ee4:	f00f fa0e 	bl	24304 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   14ee8:	7823      	ldrb	r3, [r4, #0]
   14eea:	f003 030f 	and.w	r3, r3, #15
   14eee:	2b01      	cmp	r3, #1
   14ef0:	d001      	beq.n	14ef6 <ull_adv_pdu_update_addrs+0x2e>
}
   14ef2:	4630      	mov	r0, r6
   14ef4:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
   14ef6:	4628      	mov	r0, r5
   14ef8:	f005 fa24 	bl	1a344 <ull_filter_tgta_get>
	if (rx_addr) {
   14efc:	4601      	mov	r1, r0
   14efe:	2800      	cmp	r0, #0
   14f00:	d0f7      	beq.n	14ef2 <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   14f02:	7823      	ldrb	r3, [r4, #0]
   14f04:	4620      	mov	r0, r4
   14f06:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   14f0a:	f800 3b08 	strb.w	r3, [r0], #8

		/* TargetA always follows AdvA in all PDUs */
		tgt_addr = adv_pdu_adva_get(pdu) + BDADDR_SIZE;
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   14f0e:	2206      	movs	r2, #6
   14f10:	f00f f9f8 	bl	24304 <memcpy>
}
   14f14:	4630      	mov	r0, r6
   14f16:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   14f18:	7820      	ldrb	r0, [r4, #0]
   14f1a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   14f1e:	f7fc fe63 	bl	11be8 <ll_addr_get>
   14f22:	4601      	mov	r1, r0
   14f24:	e7db      	b.n	14ede <ull_adv_pdu_update_addrs+0x16>
   14f26:	bf00      	nop

00014f28 <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14f28:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
{
   14f2c:	4603      	mov	r3, r0
   14f2e:	b410      	push	{r4}
   14f30:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14f32:	b172      	cbz	r2, 14f52 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   14f34:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   14f38:	428a      	cmp	r2, r1
   14f3a:	d02b      	beq.n	14f94 <tx_ull_dequeue+0x6c>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14f3c:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   14f40:	4291      	cmp	r1, r2
   14f42:	d01a      	beq.n	14f7a <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
   14f44:	6809      	ldr	r1, [r1, #0]
   14f46:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		tx->next = NULL;
   14f4a:	2200      	movs	r2, #0
}
   14f4c:	bc10      	pop	{r4}
		tx->next = NULL;
   14f4e:	6002      	str	r2, [r0, #0]
}
   14f50:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   14f52:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   14f56:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
   14f5a:	428a      	cmp	r2, r1
   14f5c:	d025      	beq.n	14faa <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14f5e:	7911      	ldrb	r1, [r2, #4]
   14f60:	f001 0103 	and.w	r1, r1, #3
   14f64:	2903      	cmp	r1, #3
   14f66:	d00e      	beq.n	14f86 <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
   14f68:	6812      	ldr	r2, [r2, #0]
   14f6a:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
			conn->tx_ctrl = NULL;
   14f6e:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   14f70:	e9c3 2270 	strd	r2, r2, [r3, #448]	; 0x1c0
}
   14f74:	bc10      	pop	{r4}
		tx->next = tx;
   14f76:	6000      	str	r0, [r0, #0]
}
   14f78:	4770      	bx	lr
   14f7a:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   14f7c:	6809      	ldr	r1, [r1, #0]
   14f7e:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
   14f82:	4611      	mov	r1, r2
   14f84:	e7de      	b.n	14f44 <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
   14f86:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   14f88:	2903      	cmp	r1, #3
   14f8a:	d001      	beq.n	14f90 <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   14f8c:	290a      	cmp	r1, #10
   14f8e:	d1eb      	bne.n	14f68 <tx_ull_dequeue+0x40>
   14f90:	4611      	mov	r1, r2
   14f92:	e7d7      	b.n	14f44 <tx_ull_dequeue+0x1c>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14f94:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
		conn->tx_head = conn->tx_head->next;
   14f98:	6809      	ldr	r1, [r1, #0]
   14f9a:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14f9e:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
   14fa0:	bf18      	it	ne
   14fa2:	f8c3 11c0 	strne.w	r1, [r3, #448]	; 0x1c0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14fa6:	d1e5      	bne.n	14f74 <tx_ull_dequeue+0x4c>
   14fa8:	e7e1      	b.n	14f6e <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
   14faa:	2a00      	cmp	r2, #0
   14fac:	d1e6      	bne.n	14f7c <tx_ull_dequeue+0x54>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   14fae:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
	if (conn->tx_head == conn->tx_ctrl) {
   14fb2:	4611      	mov	r1, r2
   14fb4:	e7f0      	b.n	14f98 <tx_ull_dequeue+0x70>
   14fb6:	bf00      	nop

00014fb8 <init_reset>:
{
   14fb8:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   14fba:	4b15      	ldr	r3, [pc, #84]	; (15010 <init_reset+0x58>)
   14fbc:	4815      	ldr	r0, [pc, #84]	; (15014 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14fbe:	4c16      	ldr	r4, [pc, #88]	; (15018 <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   14fc0:	2201      	movs	r2, #1
   14fc2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   14fc6:	f7fb fac5 	bl	10554 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   14fca:	4b14      	ldr	r3, [pc, #80]	; (1501c <init_reset+0x64>)
   14fcc:	2203      	movs	r2, #3
   14fce:	1d18      	adds	r0, r3, #4
   14fd0:	2124      	movs	r1, #36	; 0x24
   14fd2:	f7fb fabf 	bl	10554 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   14fd6:	4b12      	ldr	r3, [pc, #72]	; (15020 <init_reset+0x68>)
   14fd8:	2204      	movs	r2, #4
   14fda:	1898      	adds	r0, r3, r2
   14fdc:	2120      	movs	r1, #32
   14fde:	f7fb fab9 	bl	10554 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   14fe2:	4b10      	ldr	r3, [pc, #64]	; (15024 <init_reset+0x6c>)
   14fe4:	2207      	movs	r2, #7
   14fe6:	1d18      	adds	r0, r3, #4
   14fe8:	2108      	movs	r1, #8
   14fea:	f7fb fab3 	bl	10554 <mem_init>
	default_phy_tx |= PHY_2M;
   14fee:	490e      	ldr	r1, [pc, #56]	; (15028 <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   14ff0:	4a0e      	ldr	r2, [pc, #56]	; (1502c <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   14ff2:	480f      	ldr	r0, [pc, #60]	; (15030 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   14ff4:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   14ff6:	f04f 0c1b 	mov.w	ip, #27
   14ffa:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   14ffe:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15000:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   15004:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15006:	f8a0 c000 	strh.w	ip, [r0]
}
   1500a:	2000      	movs	r0, #0
   1500c:	bd10      	pop	{r4, pc}
   1500e:	bf00      	nop
   15010:	2000e220 	.word	0x2000e220
   15014:	2000e224 	.word	0x2000e224
   15018:	2000ed6e 	.word	0x2000ed6e
   1501c:	2000e40c 	.word	0x2000e40c
   15020:	2000e47c 	.word	0x2000e47c
   15024:	2000e500 	.word	0x2000e500
   15028:	2000f30f 	.word	0x2000f30f
   1502c:	2000f30e 	.word	0x2000f30e
   15030:	2000ed70 	.word	0x2000ed70

00015034 <tx_lll_flush>:
{
   15034:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   15038:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   1503c:	4934      	ldr	r1, [pc, #208]	; (15110 <tx_lll_flush+0xdc>)
{
   1503e:	b083      	sub	sp, #12
   15040:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15042:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   15046:	4640      	mov	r0, r8
   15048:	f7fb faea 	bl	10620 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1504c:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   15050:	4629      	mov	r1, r5
   15052:	f006 fe1d 	bl	1bc90 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15056:	6d28      	ldr	r0, [r5, #80]	; 0x50
   15058:	aa01      	add	r2, sp, #4
   1505a:	4631      	mov	r1, r6
   1505c:	f7fb fb20 	bl	106a0 <memq_dequeue>
	while (link) {
   15060:	b328      	cbz	r0, 150ae <tx_lll_flush+0x7a>
   15062:	4c2c      	ldr	r4, [pc, #176]	; (15114 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   15064:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15068:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1506c:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   1506e:	f894 c001 	ldrb.w	ip, [r4, #1]
   15072:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   15074:	1c4b      	adds	r3, r1, #1
   15076:	b2db      	uxtb	r3, r3
		last = 0U;
   15078:	459c      	cmp	ip, r3
   1507a:	bf08      	it	eq
   1507c:	2300      	moveq	r3, #0
	if (last == first) {
   1507e:	429a      	cmp	r2, r3
   15080:	d035      	beq.n	150ee <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15082:	7822      	ldrb	r2, [r4, #0]
   15084:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   15088:	eb19 0c02 	adds.w	ip, r9, r2
   1508c:	d02f      	beq.n	150ee <tx_lll_flush+0xba>
		lll_tx->node = tx;
   1508e:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   15090:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   15094:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   15096:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   1509a:	6002      	str	r2, [r0, #0]
		tx->next = link;
   1509c:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   1509e:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   150a0:	70e3      	strb	r3, [r4, #3]
   150a2:	aa01      	add	r2, sp, #4
   150a4:	4631      	mov	r1, r6
   150a6:	f7fb fafb 	bl	106a0 <memq_dequeue>
	while (link) {
   150aa:	2800      	cmp	r0, #0
   150ac:	d1de      	bne.n	1506c <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   150ae:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
	rx = (void *)&conn->llcp_terminate.node_rx;
   150b2:	f508 749e 	add.w	r4, r8, #316	; 0x13c
	LL_ASSERT(rx->hdr.link);
   150b6:	b150      	cbz	r0, 150ce <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   150b8:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   150ba:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   150bc:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
	ull_rx_put(link, rx);
   150c0:	f7ff fa32 	bl	14528 <ull_rx_put>
	ull_rx_sched();
   150c4:	f7ff fa40 	bl	14548 <ull_rx_sched>
}
   150c8:	b003      	add	sp, #12
   150ca:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   150ce:	4a12      	ldr	r2, [pc, #72]	; (15118 <tx_lll_flush+0xe4>)
   150d0:	4912      	ldr	r1, [pc, #72]	; (1511c <tx_lll_flush+0xe8>)
   150d2:	4813      	ldr	r0, [pc, #76]	; (15120 <tx_lll_flush+0xec>)
   150d4:	f240 7394 	movw	r3, #1940	; 0x794
   150d8:	f00c fc72 	bl	219c0 <printk>
   150dc:	4040      	eors	r0, r0
   150de:	f380 8811 	msr	BASEPRI, r0
   150e2:	f04f 0003 	mov.w	r0, #3
   150e6:	df02      	svc	2
	link = rx->hdr.link;
   150e8:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
   150ec:	e7e4      	b.n	150b8 <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   150ee:	4a0a      	ldr	r2, [pc, #40]	; (15118 <tx_lll_flush+0xe4>)
   150f0:	490c      	ldr	r1, [pc, #48]	; (15124 <tx_lll_flush+0xf0>)
   150f2:	480b      	ldr	r0, [pc, #44]	; (15120 <tx_lll_flush+0xec>)
   150f4:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   150f8:	f00c fc62 	bl	219c0 <printk>
   150fc:	4040      	eors	r0, r0
   150fe:	f380 8811 	msr	BASEPRI, r0
   15102:	f04f 0003 	mov.w	r0, #3
   15106:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   15108:	2300      	movs	r3, #0
   1510a:	801b      	strh	r3, [r3, #0]
   1510c:	deff      	udf	#255	; 0xff
   1510e:	bf00      	nop
   15110:	2000e224 	.word	0x2000e224
   15114:	2000058c 	.word	0x2000058c
   15118:	00028760 	.word	0x00028760
   1511c:	000287a8 	.word	0x000287a8
   15120:	000282a4 	.word	0x000282a4
   15124:	000287a0 	.word	0x000287a0

00015128 <ticker_op_stop_cb>:
{
   15128:	b510      	push	{r4, lr}
   1512a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1512c:	b9b0      	cbnz	r0, 1515c <ticker_op_stop_cb+0x34>
	mfy.param = param;
   1512e:	4b12      	ldr	r3, [pc, #72]	; (15178 <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   15130:	2200      	movs	r2, #0
   15132:	4611      	mov	r1, r2
   15134:	2002      	movs	r0, #2
	mfy.param = param;
   15136:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   15138:	f7fb fb14 	bl	10764 <mayfly_enqueue>
	LL_ASSERT(!retval);
   1513c:	b900      	cbnz	r0, 15140 <ticker_op_stop_cb+0x18>
}
   1513e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   15140:	4a0e      	ldr	r2, [pc, #56]	; (1517c <ticker_op_stop_cb+0x54>)
   15142:	490f      	ldr	r1, [pc, #60]	; (15180 <ticker_op_stop_cb+0x58>)
   15144:	480f      	ldr	r0, [pc, #60]	; (15184 <ticker_op_stop_cb+0x5c>)
   15146:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
   1514a:	f00c fc39 	bl	219c0 <printk>
   1514e:	4040      	eors	r0, r0
   15150:	f380 8811 	msr	BASEPRI, r0
   15154:	f04f 0003 	mov.w	r0, #3
   15158:	df02      	svc	2
}
   1515a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1515c:	4a07      	ldr	r2, [pc, #28]	; (1517c <ticker_op_stop_cb+0x54>)
   1515e:	490a      	ldr	r1, [pc, #40]	; (15188 <ticker_op_stop_cb+0x60>)
   15160:	4808      	ldr	r0, [pc, #32]	; (15184 <ticker_op_stop_cb+0x5c>)
   15162:	f240 63e1 	movw	r3, #1761	; 0x6e1
   15166:	f00c fc2b 	bl	219c0 <printk>
   1516a:	4040      	eors	r0, r0
   1516c:	f380 8811 	msr	BASEPRI, r0
   15170:	f04f 0003 	mov.w	r0, #3
   15174:	df02      	svc	2
   15176:	e7da      	b.n	1512e <ticker_op_stop_cb+0x6>
   15178:	200005f4 	.word	0x200005f4
   1517c:	00028760 	.word	0x00028760
   15180:	00028560 	.word	0x00028560
   15184:	000282a4 	.word	0x000282a4
   15188:	000287b8 	.word	0x000287b8

0001518c <ticker_start_conn_op_cb>:
{
   1518c:	b510      	push	{r4, lr}
   1518e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15190:	b990      	cbnz	r0, 151b8 <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   15192:	4620      	mov	r0, r4
   15194:	f7ff f904 	bl	143a0 <ull_update_unmark>
	LL_ASSERT(p == param);
   15198:	4284      	cmp	r4, r0
   1519a:	d00c      	beq.n	151b6 <ticker_start_conn_op_cb+0x2a>
   1519c:	4a0d      	ldr	r2, [pc, #52]	; (151d4 <ticker_start_conn_op_cb+0x48>)
   1519e:	490e      	ldr	r1, [pc, #56]	; (151d8 <ticker_start_conn_op_cb+0x4c>)
   151a0:	480e      	ldr	r0, [pc, #56]	; (151dc <ticker_start_conn_op_cb+0x50>)
   151a2:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
   151a6:	f00c fc0b 	bl	219c0 <printk>
   151aa:	4040      	eors	r0, r0
   151ac:	f380 8811 	msr	BASEPRI, r0
   151b0:	f04f 0003 	mov.w	r0, #3
   151b4:	df02      	svc	2
}
   151b6:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   151b8:	4a06      	ldr	r2, [pc, #24]	; (151d4 <ticker_start_conn_op_cb+0x48>)
   151ba:	4909      	ldr	r1, [pc, #36]	; (151e0 <ticker_start_conn_op_cb+0x54>)
   151bc:	4807      	ldr	r0, [pc, #28]	; (151dc <ticker_start_conn_op_cb+0x50>)
   151be:	f240 63d5 	movw	r3, #1749	; 0x6d5
   151c2:	f00c fbfd 	bl	219c0 <printk>
   151c6:	4040      	eors	r0, r0
   151c8:	f380 8811 	msr	BASEPRI, r0
   151cc:	f04f 0003 	mov.w	r0, #3
   151d0:	df02      	svc	2
   151d2:	e7de      	b.n	15192 <ticker_start_conn_op_cb+0x6>
   151d4:	00028760 	.word	0x00028760
   151d8:	000287c4 	.word	0x000287c4
   151dc:	000282a4 	.word	0x000282a4
   151e0:	000287b8 	.word	0x000287b8

000151e4 <ticker_stop_conn_op_cb>:
{
   151e4:	b510      	push	{r4, lr}
   151e6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   151e8:	b990      	cbnz	r0, 15210 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   151ea:	4620      	mov	r0, r4
   151ec:	f7ff f8ce 	bl	1438c <ull_update_mark>
	LL_ASSERT(p == param);
   151f0:	4284      	cmp	r4, r0
   151f2:	d00c      	beq.n	1520e <ticker_stop_conn_op_cb+0x2a>
   151f4:	4a0d      	ldr	r2, [pc, #52]	; (1522c <ticker_stop_conn_op_cb+0x48>)
   151f6:	490e      	ldr	r1, [pc, #56]	; (15230 <ticker_stop_conn_op_cb+0x4c>)
   151f8:	480e      	ldr	r0, [pc, #56]	; (15234 <ticker_stop_conn_op_cb+0x50>)
   151fa:	f240 63ce 	movw	r3, #1742	; 0x6ce
   151fe:	f00c fbdf 	bl	219c0 <printk>
   15202:	4040      	eors	r0, r0
   15204:	f380 8811 	msr	BASEPRI, r0
   15208:	f04f 0003 	mov.w	r0, #3
   1520c:	df02      	svc	2
}
   1520e:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15210:	4a06      	ldr	r2, [pc, #24]	; (1522c <ticker_stop_conn_op_cb+0x48>)
   15212:	4909      	ldr	r1, [pc, #36]	; (15238 <ticker_stop_conn_op_cb+0x54>)
   15214:	4807      	ldr	r0, [pc, #28]	; (15234 <ticker_stop_conn_op_cb+0x50>)
   15216:	f240 63cb 	movw	r3, #1739	; 0x6cb
   1521a:	f00c fbd1 	bl	219c0 <printk>
   1521e:	4040      	eors	r0, r0
   15220:	f380 8811 	msr	BASEPRI, r0
   15224:	f04f 0003 	mov.w	r0, #3
   15228:	df02      	svc	2
   1522a:	e7de      	b.n	151ea <ticker_stop_conn_op_cb+0x6>
   1522c:	00028760 	.word	0x00028760
   15230:	000287c4 	.word	0x000287c4
   15234:	000282a4 	.word	0x000282a4
   15238:	000287b8 	.word	0x000287b8

0001523c <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   1523c:	b900      	cbnz	r0, 15240 <ticker_update_conn_op_cb+0x4>
   1523e:	4770      	bx	lr
{
   15240:	b510      	push	{r4, lr}
   15242:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   15244:	f7ff f8b8 	bl	143b8 <ull_update_mark_get>
   15248:	4284      	cmp	r4, r0
   1524a:	d010      	beq.n	1526e <ticker_update_conn_op_cb+0x32>
   1524c:	f7ff f898 	bl	14380 <ull_disable_mark_get>
   15250:	4284      	cmp	r4, r0
   15252:	d00c      	beq.n	1526e <ticker_update_conn_op_cb+0x32>
   15254:	4a06      	ldr	r2, [pc, #24]	; (15270 <ticker_update_conn_op_cb+0x34>)
   15256:	4907      	ldr	r1, [pc, #28]	; (15274 <ticker_update_conn_op_cb+0x38>)
   15258:	4807      	ldr	r0, [pc, #28]	; (15278 <ticker_update_conn_op_cb+0x3c>)
   1525a:	f240 63c2 	movw	r3, #1730	; 0x6c2
   1525e:	f00c fbaf 	bl	219c0 <printk>
   15262:	4040      	eors	r0, r0
   15264:	f380 8811 	msr	BASEPRI, r0
   15268:	f04f 0003 	mov.w	r0, #3
   1526c:	df02      	svc	2
}
   1526e:	bd10      	pop	{r4, pc}
   15270:	00028760 	.word	0x00028760
   15274:	000287d0 	.word	0x000287d0
   15278:	000282a4 	.word	0x000282a4

0001527c <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   1527c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1527e:	4607      	mov	r7, r0
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15280:	4825      	ldr	r0, [pc, #148]	; (15318 <reject_ext_ind_send+0x9c>)
{
   15282:	460c      	mov	r4, r1
   15284:	4616      	mov	r6, r2
   15286:	461d      	mov	r5, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15288:	f7fb f994 	bl	105b4 <mem_acquire>
	if (!tx) {
   1528c:	2800      	cmp	r0, #0
   1528e:	d040      	beq.n	15312 <reject_ext_ind_send+0x96>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15290:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   15292:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   15294:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   15296:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   1529a:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1529c:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   1529e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   152a0:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   152a4:	7245      	strb	r5, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   152a6:	7102      	strb	r2, [r0, #4]
	if (
   152a8:	b11b      	cbz	r3, 152b2 <reject_ext_ind_send+0x36>
	    !conn->llcp_enc.pause_tx &&
   152aa:	f897 215e 	ldrb.w	r2, [r7, #350]	; 0x15e
	    conn->tx_head &&
   152ae:	0791      	lsls	r1, r2, #30
   152b0:	d50f      	bpl.n	152d2 <reject_ext_ind_send+0x56>
		if (!conn->tx_ctrl) {
   152b2:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   152b6:	b332      	cbz	r2, 15306 <reject_ext_ind_send+0x8a>
	tx->next = conn->tx_ctrl_last->next;
   152b8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
   152bc:	681a      	ldr	r2, [r3, #0]
   152be:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   152c0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   152c2:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   152c4:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
	if (!tx->next) {
   152c8:	b1d3      	cbz	r3, 15300 <reject_ext_ind_send+0x84>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   152ca:	2301      	movs	r3, #1
   152cc:	7123      	strb	r3, [r4, #4]

	return 0;
   152ce:	2000      	movs	r0, #0
}
   152d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !conn->llcp_phy.pause_tx &&
   152d2:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
   152d6:	07d2      	lsls	r2, r2, #31
   152d8:	d4eb      	bmi.n	152b2 <reject_ext_ind_send+0x36>
		if (conn->tx_head == conn->tx_data) {
   152da:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   152de:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   152e0:	bf04      	itt	eq
   152e2:	681a      	ldreq	r2, [r3, #0]
   152e4:	f8c7 21c8 	streq.w	r2, [r7, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   152e8:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   152ec:	2a00      	cmp	r2, #0
   152ee:	d1e3      	bne.n	152b8 <reject_ext_ind_send+0x3c>
			tx->next = conn->tx_head->next;
   152f0:	681a      	ldr	r2, [r3, #0]
   152f2:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   152f4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   152f6:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   152f8:	e9c7 0070 	strd	r0, r0, [r7, #448]	; 0x1c0
	if (!tx->next) {
   152fc:	2b00      	cmp	r3, #0
   152fe:	d1e4      	bne.n	152ca <reject_ext_ind_send+0x4e>
		conn->tx_data_last = tx;
   15300:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
   15304:	e7e1      	b.n	152ca <reject_ext_ind_send+0x4e>
			tx->next = conn->tx_head;
   15306:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15308:	e9c7 006f 	strd	r0, r0, [r7, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1530c:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
   15310:	e7da      	b.n	152c8 <reject_ext_ind_send+0x4c>
		return -ENOBUFS;
   15312:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15316:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15318:	2000e47c 	.word	0x2000e47c

0001531c <ctrl_tx_sec_enqueue>:
{
   1531c:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
   1531e:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   15322:	079a      	lsls	r2, r3, #30
{
   15324:	4604      	mov	r4, r0
   15326:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   15328:	d50c      	bpl.n	15344 <ctrl_tx_sec_enqueue+0x28>
		if (!conn->tx_ctrl) {
   1532a:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   1532e:	2b00      	cmp	r3, #0
   15330:	d04e      	beq.n	153d0 <ctrl_tx_sec_enqueue+0xb4>
			tx->next = conn->tx_ctrl_last->next;
   15332:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   15336:	681a      	ldr	r2, [r3, #0]
   15338:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1533a:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   1533c:	682b      	ldr	r3, [r5, #0]
   1533e:	2b00      	cmp	r3, #0
   15340:	d034      	beq.n	153ac <ctrl_tx_sec_enqueue+0x90>
}
   15342:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
   15344:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
   15348:	b342      	cbz	r2, 1539c <ctrl_tx_sec_enqueue+0x80>
			if ((conn->llcp_req != conn->llcp_ack) &&
   1534a:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   1534e:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   15352:	4299      	cmp	r1, r3
   15354:	d003      	beq.n	1535e <ctrl_tx_sec_enqueue+0x42>
   15356:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   1535a:	2b03      	cmp	r3, #3
   1535c:	d040      	beq.n	153e0 <ctrl_tx_sec_enqueue+0xc4>
	    !conn->llcp_phy.pause_tx &&
   1535e:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   15362:	f013 0301 	ands.w	r3, r3, #1
   15366:	d124      	bne.n	153b2 <ctrl_tx_sec_enqueue+0x96>
		if (conn->tx_head == conn->tx_data) {
   15368:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   1536c:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   1536e:	bf04      	itt	eq
   15370:	6811      	ldreq	r1, [r2, #0]
   15372:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15376:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1537a:	2900      	cmp	r1, #0
   1537c:	d053      	beq.n	15426 <ctrl_tx_sec_enqueue+0x10a>
			LL_ASSERT(!pause);
   1537e:	b1e3      	cbz	r3, 153ba <ctrl_tx_sec_enqueue+0x9e>
   15380:	4a32      	ldr	r2, [pc, #200]	; (1544c <ctrl_tx_sec_enqueue+0x130>)
   15382:	4933      	ldr	r1, [pc, #204]	; (15450 <ctrl_tx_sec_enqueue+0x134>)
   15384:	4833      	ldr	r0, [pc, #204]	; (15454 <ctrl_tx_sec_enqueue+0x138>)
   15386:	f240 73ef 	movw	r3, #2031	; 0x7ef
   1538a:	f00c fb19 	bl	219c0 <printk>
   1538e:	4040      	eors	r0, r0
   15390:	f380 8811 	msr	BASEPRI, r0
   15394:	f04f 0003 	mov.w	r0, #3
   15398:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   1539a:	e00e      	b.n	153ba <ctrl_tx_sec_enqueue+0x9e>
		if (!conn->tx_ctrl) {
   1539c:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   153a0:	b95b      	cbnz	r3, 153ba <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   153a2:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   153a4:	e9c0 116f 	strd	r1, r1, [r0, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   153a8:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
			conn->tx_data_last = tx;
   153ac:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   153b0:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   153b2:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   153b6:	2b00      	cmp	r3, #0
   153b8:	d040      	beq.n	1543c <ctrl_tx_sec_enqueue+0x120>
	tx->next = conn->tx_ctrl_last->next;
   153ba:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   153be:	681a      	ldr	r2, [r3, #0]
   153c0:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   153c2:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   153c4:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   153c6:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
		if (!tx->next) {
   153ca:	2b00      	cmp	r3, #0
   153cc:	d1b9      	bne.n	15342 <ctrl_tx_sec_enqueue+0x26>
   153ce:	e7ed      	b.n	153ac <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   153d0:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   153d4:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   153d6:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
		if (!tx->next) {
   153da:	2b00      	cmp	r3, #0
   153dc:	d1b1      	bne.n	15342 <ctrl_tx_sec_enqueue+0x26>
   153de:	e7e5      	b.n	153ac <ctrl_tx_sec_enqueue+0x90>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   153e0:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   153e2:	f003 0303 	and.w	r3, r3, #3
   153e6:	2b03      	cmp	r3, #3
   153e8:	d1b9      	bne.n	1535e <ctrl_tx_sec_enqueue+0x42>
			    ((pdu_data_tx->llctrl.opcode ==
   153ea:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   153ec:	2b03      	cmp	r3, #3
   153ee:	d001      	beq.n	153f4 <ctrl_tx_sec_enqueue+0xd8>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   153f0:	2b0a      	cmp	r3, #10
   153f2:	d1b4      	bne.n	1535e <ctrl_tx_sec_enqueue+0x42>
	    !conn->llcp_phy.pause_tx &&
   153f4:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   153f8:	07db      	lsls	r3, r3, #31
   153fa:	d525      	bpl.n	15448 <ctrl_tx_sec_enqueue+0x12c>
		if (!conn->tx_ctrl) {
   153fc:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   15400:	b16b      	cbz	r3, 1541e <ctrl_tx_sec_enqueue+0x102>
			LL_ASSERT(!pause);
   15402:	4a12      	ldr	r2, [pc, #72]	; (1544c <ctrl_tx_sec_enqueue+0x130>)
   15404:	4912      	ldr	r1, [pc, #72]	; (15450 <ctrl_tx_sec_enqueue+0x134>)
   15406:	4813      	ldr	r0, [pc, #76]	; (15454 <ctrl_tx_sec_enqueue+0x138>)
   15408:	f640 0301 	movw	r3, #2049	; 0x801
   1540c:	f00c fad8 	bl	219c0 <printk>
   15410:	4040      	eors	r0, r0
   15412:	f380 8811 	msr	BASEPRI, r0
   15416:	f04f 0003 	mov.w	r0, #3
   1541a:	df02      	svc	2
   1541c:	e7cd      	b.n	153ba <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   1541e:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
   15420:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
}
   15424:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
   15426:	6811      	ldr	r1, [r2, #0]
   15428:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1542a:	6015      	str	r5, [r2, #0]
			if (!pause) {
   1542c:	2b00      	cmp	r3, #0
   1542e:	d185      	bne.n	1533c <ctrl_tx_sec_enqueue+0x20>
	if (!tx->next) {
   15430:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   15432:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
		if (!tx->next) {
   15436:	2b00      	cmp	r3, #0
   15438:	d183      	bne.n	15342 <ctrl_tx_sec_enqueue+0x26>
   1543a:	e7b7      	b.n	153ac <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   1543c:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   1543e:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   15442:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   15446:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
   15448:	2301      	movs	r3, #1
   1544a:	e78d      	b.n	15368 <ctrl_tx_sec_enqueue+0x4c>
   1544c:	00028760 	.word	0x00028760
   15450:	00028824 	.word	0x00028824
   15454:	000282a4 	.word	0x000282a4

00015458 <event_len_prep>:
{
   15458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   1545a:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   1545e:	f003 0207 	and.w	r2, r3, #7
{
   15462:	4604      	mov	r4, r0
   15464:	2a06      	cmp	r2, #6
   15466:	f200 80c6 	bhi.w	155f6 <event_len_prep+0x19e>
   1546a:	e8df f002 	tbb	[pc, r2]
   1546e:	4804      	.short	0x4804
   15470:	49494848 	.word	0x49494848
   15474:	48          	.byte	0x48
   15475:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15476:	4867      	ldr	r0, [pc, #412]	; (15614 <event_len_prep+0x1bc>)
   15478:	f7fb f89c 	bl	105b4 <mem_acquire>
		if (!tx) {
   1547c:	2800      	cmp	r0, #0
   1547e:	d03e      	beq.n	154fe <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15480:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   15484:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   15488:	f8b4 51ae 	ldrh.w	r5, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   1548c:	f8a4 20d6 	strh.w	r2, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   15490:	2301      	movs	r3, #1
   15492:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   15496:	f8a4 50d8 	strh.w	r5, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   1549a:	f884 11a6 	strb.w	r1, [r4, #422]	; 0x1a6
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   1549e:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   154a0:	72c3      	strb	r3, [r0, #11]
   154a2:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   154a4:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   154a6:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   154a8:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   154aa:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   154ac:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   154ae:	2214      	movs	r2, #20
	    conn->tx_head &&
   154b0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   154b4:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   154b6:	221b      	movs	r2, #27
   154b8:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   154ba:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   154bc:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   154be:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   154c2:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   154c4:	7102      	strb	r2, [r0, #4]
	if (
   154c6:	b13b      	cbz	r3, 154d8 <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   154c8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   154cc:	0791      	lsls	r1, r2, #30
   154ce:	d403      	bmi.n	154d8 <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   154d0:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   154d4:	07d2      	lsls	r2, r2, #31
   154d6:	d576      	bpl.n	155c6 <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   154d8:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   154dc:	2a00      	cmp	r2, #0
   154de:	f000 8084 	beq.w	155ea <event_len_prep+0x192>
	tx->next = conn->tx_ctrl_last->next;
   154e2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   154e6:	681a      	ldr	r2, [r3, #0]
   154e8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   154ea:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   154ec:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   154ee:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   154f2:	2b00      	cmp	r3, #0
   154f4:	d056      	beq.n	155a4 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   154f6:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   154fa:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   154fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15500:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   15504:	f8b0 c1a8 	ldrh.w	ip, [r0, #424]	; 0x1a8
		lll->max_rx_time = conn->llcp_length.rx_time;
   15508:	f8b0 11ac 	ldrh.w	r1, [r0, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   1550c:	f8b0 71aa 	ldrh.w	r7, [r0, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   15510:	f8b0 61ae 	ldrh.w	r6, [r0, #430]	; 0x1ae
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   15514:	f8a0 c05e 	strh.w	ip, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15518:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   1551a:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1551e:	d024      	beq.n	1556a <event_len_prep+0x112>
			conn->llcp_length.state =
   15520:	2206      	movs	r2, #6
   15522:	f362 0302 	bfi	r3, r2, #0, #3
   15526:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
		rx = conn->llcp_rx;
   1552a:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   1552e:	b335      	cbz	r5, 1557e <event_len_prep+0x126>
   15530:	6828      	ldr	r0, [r5, #0]
   15532:	b320      	cbz	r0, 1557e <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15534:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   15536:	6842      	ldr	r2, [r0, #4]
   15538:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   1553c:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   15540:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15542:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   15544:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   15546:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   15548:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1554a:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1554c:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1554e:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15550:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   15554:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15556:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   15558:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1555a:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   1555c:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1555e:	f7fe fe33 	bl	141c8 <ll_rx_put>
}
   15562:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   15566:	f7fe be39 	b.w	141dc <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   1556a:	f8b0 21b0 	ldrh.w	r2, [r0, #432]	; 0x1b0
   1556e:	b9e2      	cbnz	r2, 155aa <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   15570:	f890 31a4 	ldrb.w	r3, [r0, #420]	; 0x1a4
				conn->procedure_expire = 0U;
   15574:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
				conn->llcp_length.ack = conn->llcp_length.req;
   15578:	f880 31a5 	strb.w	r3, [r0, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   1557c:	e7d5      	b.n	1552a <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   1557e:	4a26      	ldr	r2, [pc, #152]	; (15618 <event_len_prep+0x1c0>)
   15580:	4926      	ldr	r1, [pc, #152]	; (1561c <event_len_prep+0x1c4>)
   15582:	4827      	ldr	r0, [pc, #156]	; (15620 <event_len_prep+0x1c8>)
   15584:	f640 53f3 	movw	r3, #3571	; 0xdf3
   15588:	f00c fa1a 	bl	219c0 <printk>
   1558c:	4040      	eors	r0, r0
   1558e:	f380 8811 	msr	BASEPRI, r0
   15592:	f04f 0003 	mov.w	r0, #3
   15596:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   15598:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   1559a:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   1559e:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   155a2:	e7c7      	b.n	15534 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   155a4:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   155a8:	e7a5      	b.n	154f6 <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   155aa:	f8a0 21aa 	strh.w	r2, [r0, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   155ae:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   155b0:	f362 0302 	bfi	r3, r2, #0, #3
   155b4:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   155b8:	f8b0 31b2 	ldrh.w	r3, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   155bc:	f8a0 21b0 	strh.w	r2, [r0, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   155c0:	f8a0 31ae 	strh.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   155c4:	e7b1      	b.n	1552a <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   155c6:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   155ca:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   155cc:	bf04      	itt	eq
   155ce:	681a      	ldreq	r2, [r3, #0]
   155d0:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   155d4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   155d8:	2a00      	cmp	r2, #0
   155da:	d182      	bne.n	154e2 <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   155dc:	681a      	ldr	r2, [r3, #0]
   155de:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   155e0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   155e2:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   155e4:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   155e8:	e783      	b.n	154f2 <event_len_prep+0x9a>
			tx->next = conn->tx_head;
   155ea:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   155ec:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   155f0:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   155f4:	e77d      	b.n	154f2 <event_len_prep+0x9a>
		LL_ASSERT(0);
   155f6:	4a08      	ldr	r2, [pc, #32]	; (15618 <event_len_prep+0x1c0>)
   155f8:	490a      	ldr	r1, [pc, #40]	; (15624 <event_len_prep+0x1cc>)
   155fa:	4809      	ldr	r0, [pc, #36]	; (15620 <event_len_prep+0x1c8>)
   155fc:	f640 631b 	movw	r3, #3611	; 0xe1b
   15600:	f00c f9de 	bl	219c0 <printk>
   15604:	4040      	eors	r0, r0
   15606:	f380 8811 	msr	BASEPRI, r0
   1560a:	f04f 0003 	mov.w	r0, #3
   1560e:	df02      	svc	2
}
   15610:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15612:	bf00      	nop
   15614:	2000e47c 	.word	0x2000e47c
   15618:	00028760 	.word	0x00028760
   1561c:	0002882c 	.word	0x0002882c
   15620:	000282a4 	.word	0x000282a4
   15624:	0002833c 	.word	0x0002833c

00015628 <event_phy_upd_ind_prep>:
{
   15628:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   1562c:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   15630:	f013 0201 	ands.w	r2, r3, #1
{
   15634:	4604      	mov	r4, r0
   15636:	460e      	mov	r6, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   15638:	f040 808d 	bne.w	15756 <event_phy_upd_ind_prep+0x12e>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   1563c:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   15640:	1a71      	subs	r1, r6, r1
   15642:	0409      	lsls	r1, r1, #16
   15644:	f100 80d2 	bmi.w	157ec <event_phy_upd_ind_prep+0x1c4>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   15648:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
   1564c:	2900      	cmp	r1, #0
   1564e:	469c      	mov	ip, r3
   15650:	f2c0 80f7 	blt.w	15842 <event_phy_upd_ind_prep+0x21a>
			conn->llcp_ack = conn->llcp_req;
   15654:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   15658:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		old_tx = lll->phy_tx;
   1565c:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
   15660:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		uint16_t eff_rx_time = lll->max_rx_time;
   15664:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
   15668:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   1566c:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   15670:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   15674:	f040 80bc 	bne.w	157f0 <event_phy_upd_ind_prep+0x1c8>
		uint16_t eff_tx_time = lll->max_tx_time;
   15678:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
   1567c:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   15680:	d008      	beq.n	15694 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   15682:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   15686:	095b      	lsrs	r3, r3, #5
   15688:	f363 0202 	bfi	r2, r3, #0, #3
   1568c:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   15690:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   15694:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   15698:	2d00      	cmp	r5, #0
   1569a:	f000 80b2 	beq.w	15802 <event_phy_upd_ind_prep+0x1da>
   1569e:	6828      	ldr	r0, [r5, #0]
   156a0:	2800      	cmp	r0, #0
   156a2:	f000 80ae 	beq.w	15802 <event_phy_upd_ind_prep+0x1da>
		conn->llcp_rx = rx->hdr.link->mem;
   156a6:	6843      	ldr	r3, [r0, #4]
		    (lll->phy_rx == old_rx)) {
   156a8:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
		conn->llcp_rx = rx->hdr.link->mem;
   156ac:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   156b0:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   156b4:	f01c 0f02 	tst.w	ip, #2
   156b8:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   156bc:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   156c0:	d102      	bne.n	156c8 <event_phy_upd_ind_prep+0xa0>
   156c2:	4599      	cmp	r9, r3
   156c4:	f000 80c5 	beq.w	15852 <event_phy_upd_ind_prep+0x22a>
		rx->hdr.handle = lll->handle;
   156c8:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		upd->tx = lll->phy_tx;
   156ca:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   156cc:	2319      	movs	r3, #25
   156ce:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   156d0:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   156d2:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   156d4:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   156d6:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   156d8:	4629      	mov	r1, r5
   156da:	f7fe fd75 	bl	141c8 <ll_rx_put>
		rx = conn->llcp_rx;
   156de:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   156e2:	2d00      	cmp	r5, #0
   156e4:	f000 809e 	beq.w	15824 <event_phy_upd_ind_prep+0x1fc>
   156e8:	6828      	ldr	r0, [r5, #0]
   156ea:	2800      	cmp	r0, #0
   156ec:	f000 809a 	beq.w	15824 <event_phy_upd_ind_prep+0x1fc>
		if ((eff_tx_time <= lll->max_tx_time) &&
   156f0:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
   156f4:	6842      	ldr	r2, [r0, #4]
   156f6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((eff_tx_time <= lll->max_tx_time) &&
   156fa:	42b3      	cmp	r3, r6
   156fc:	d30a      	bcc.n	15714 <event_phy_upd_ind_prep+0xec>
   156fe:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   15702:	d807      	bhi.n	15714 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   15704:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
   15708:	42bb      	cmp	r3, r7
   1570a:	d303      	bcc.n	15714 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   1570c:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   15710:	f240 8116 	bls.w	15940 <event_phy_upd_ind_prep+0x318>
		lll->max_tx_time = eff_tx_time;
   15714:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
   15718:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   1571c:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   1571e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   15720:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15722:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15726:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1572a:	2109      	movs	r1, #9
   1572c:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1572e:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15732:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15734:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   15738:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1573a:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   1573e:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15740:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15742:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   15744:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   15746:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   15748:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   1574a:	f7fe fd3d 	bl	141c8 <ll_rx_put>
}
   1574e:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   15752:	f7fe bd43 	b.w	141dc <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   15756:	2002      	movs	r0, #2
   15758:	f7fe fd46 	bl	141e8 <ll_pdu_rx_alloc_peek>
		if (!rx) {
   1575c:	4680      	mov	r8, r0
   1575e:	2800      	cmp	r0, #0
   15760:	d044      	beq.n	157ec <event_phy_upd_ind_prep+0x1c4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   15762:	4883      	ldr	r0, [pc, #524]	; (15970 <event_phy_upd_ind_prep+0x348>)
   15764:	f7fa ff26 	bl	105b4 <mem_acquire>
		if (!tx) {
   15768:	4605      	mov	r5, r0
   1576a:	2800      	cmp	r0, #0
   1576c:	d03e      	beq.n	157ec <event_phy_upd_ind_prep+0x1c4>
		conn->llcp.phy_upd_ind.initiate = 0U;
   1576e:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   15772:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   15776:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   1577a:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   1577e:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   15782:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
   15786:	b2db      	uxtb	r3, r3
   15788:	d17e      	bne.n	15888 <event_phy_upd_ind_prep+0x260>
			conn->llcp_ack = conn->llcp_req;
   1578a:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
   1578e:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
   15792:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   15794:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
   15798:	f100 80ad 	bmi.w	158f6 <event_phy_upd_ind_prep+0x2ce>
   1579c:	463b      	mov	r3, r7
   1579e:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   157a0:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
   157a2:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   157a4:	722f      	strb	r7, [r5, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   157a6:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->len =
   157a8:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
   157aa:	2218      	movs	r2, #24
	    conn->tx_head &&
   157ac:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode =
   157b0:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   157b2:	792a      	ldrb	r2, [r5, #4]
   157b4:	f042 0203 	orr.w	r2, r2, #3
   157b8:	712a      	strb	r2, [r5, #4]
	if (
   157ba:	b13b      	cbz	r3, 157cc <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_enc.pause_tx &&
   157bc:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   157c0:	0796      	lsls	r6, r2, #30
   157c2:	d403      	bmi.n	157cc <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_phy.pause_tx &&
   157c4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   157c8:	07d0      	lsls	r0, r2, #31
   157ca:	d57b      	bpl.n	158c4 <event_phy_upd_ind_prep+0x29c>
		if (!conn->tx_ctrl) {
   157cc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   157d0:	2a00      	cmp	r2, #0
   157d2:	f000 808a 	beq.w	158ea <event_phy_upd_ind_prep+0x2c2>
	tx->next = conn->tx_ctrl_last->next;
   157d6:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   157da:	681a      	ldr	r2, [r3, #0]
   157dc:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   157de:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   157e0:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   157e2:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   157e6:	b90b      	cbnz	r3, 157ec <event_phy_upd_ind_prep+0x1c4>
		conn->tx_data_last = tx;
   157e8:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   157ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   157f0:	f3c3 0182 	ubfx	r1, r3, #2, #3
   157f4:	f361 0202 	bfi	r2, r1, #0, #3
   157f8:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   157fc:	f44f 76a4 	mov.w	r6, #328	; 0x148
   15800:	e73c      	b.n	1567c <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   15802:	4a5c      	ldr	r2, [pc, #368]	; (15974 <event_phy_upd_ind_prep+0x34c>)
   15804:	495c      	ldr	r1, [pc, #368]	; (15978 <event_phy_upd_ind_prep+0x350>)
   15806:	485d      	ldr	r0, [pc, #372]	; (1597c <event_phy_upd_ind_prep+0x354>)
   15808:	f640 732c 	movw	r3, #3884	; 0xf2c
   1580c:	f00c f8d8 	bl	219c0 <printk>
   15810:	4040      	eors	r0, r0
   15812:	f380 8811 	msr	BASEPRI, r0
   15816:	f04f 0003 	mov.w	r0, #3
   1581a:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1581c:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   1581e:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
   15822:	e740      	b.n	156a6 <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   15824:	4a53      	ldr	r2, [pc, #332]	; (15974 <event_phy_upd_ind_prep+0x34c>)
   15826:	4954      	ldr	r1, [pc, #336]	; (15978 <event_phy_upd_ind_prep+0x350>)
   15828:	4854      	ldr	r0, [pc, #336]	; (1597c <event_phy_upd_ind_prep+0x354>)
   1582a:	f640 7358 	movw	r3, #3928	; 0xf58
   1582e:	f00c f8c7 	bl	219c0 <printk>
   15832:	4040      	eors	r0, r0
   15834:	f380 8811 	msr	BASEPRI, r0
   15838:	f04f 0003 	mov.w	r0, #3
   1583c:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   1583e:	6828      	ldr	r0, [r5, #0]
   15840:	e756      	b.n	156f0 <event_phy_upd_ind_prep+0xc8>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   15842:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   15846:	2900      	cmp	r1, #0
   15848:	f43f af04 	beq.w	15654 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   1584c:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
   15850:	e704      	b.n	1565c <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15852:	4590      	cmp	r8, r2
   15854:	f47f af38 	bne.w	156c8 <event_phy_upd_ind_prep+0xa0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15858:	2301      	movs	r3, #1
   1585a:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   1585c:	4629      	mov	r1, r5
   1585e:	f7fe fcb3 	bl	141c8 <ll_rx_put>
				rx = conn->llcp_rx;
   15862:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
				LL_ASSERT(rx && rx->hdr.link);
   15866:	2d00      	cmp	r5, #0
   15868:	d073      	beq.n	15952 <event_phy_upd_ind_prep+0x32a>
   1586a:	6828      	ldr	r0, [r5, #0]
   1586c:	2800      	cmp	r0, #0
   1586e:	d070      	beq.n	15952 <event_phy_upd_ind_prep+0x32a>
				conn->llcp_rx = rx->hdr.link->mem;
   15870:	6842      	ldr	r2, [r0, #4]
   15872:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15876:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   15878:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1587a:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   1587c:	f7fe fca4 	bl	141c8 <ll_rx_put>
}
   15880:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   15884:	f7fe bcaa 	b.w	141dc <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   15888:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   1588a:	4431      	add	r1, r6
							 lll->latency +
   1588c:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   1588e:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
   15892:	f7fe fcc7 	bl	14224 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   15896:	f8d8 3000 	ldr.w	r3, [r8]
   1589a:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1589e:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   158a0:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
			rx = ll_pdu_rx_alloc();
   158a4:	f7fe fcbe 	bl	14224 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   158a8:	6803      	ldr	r3, [r0, #0]
   158aa:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   158ae:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   158b0:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   158b4:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
			conn->llcp_rx = rx;
   158b8:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   158bc:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   158c0:	095b      	lsrs	r3, r3, #5
   158c2:	e76d      	b.n	157a0 <event_phy_upd_ind_prep+0x178>
		if (conn->tx_head == conn->tx_data) {
   158c4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   158c8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   158ca:	bf04      	itt	eq
   158cc:	681a      	ldreq	r2, [r3, #0]
   158ce:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   158d2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   158d6:	2a00      	cmp	r2, #0
   158d8:	f47f af7d 	bne.w	157d6 <event_phy_upd_ind_prep+0x1ae>
			tx->next = conn->tx_head->next;
   158dc:	681a      	ldr	r2, [r3, #0]
   158de:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   158e0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   158e2:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   158e4:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   158e8:	e77d      	b.n	157e6 <event_phy_upd_ind_prep+0x1be>
			tx->next = conn->tx_head;
   158ea:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   158ec:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   158f0:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   158f4:	e777      	b.n	157e6 <event_phy_upd_ind_prep+0x1be>
				(void)ll_pdu_rx_alloc();
   158f6:	f7fe fc95 	bl	14224 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   158fa:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   158fc:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15900:	2319      	movs	r3, #25
				upd->status = 0U;
   15902:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15906:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   1590a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
   1590e:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   15912:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15916:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   1591a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1591e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15922:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   15926:	4641      	mov	r1, r8
   15928:	f7fe fc4e 	bl	141c8 <ll_rx_put>
				ll_rx_sched();
   1592c:	f7fe fc56 	bl	141dc <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15930:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15934:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15938:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   1593c:	095b      	lsrs	r3, r3, #5
   1593e:	e72f      	b.n	157a0 <event_phy_upd_ind_prep+0x178>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15940:	2301      	movs	r3, #1
   15942:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   15944:	4629      	mov	r1, r5
   15946:	f7fe fc3f 	bl	141c8 <ll_rx_put>
}
   1594a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   1594e:	f7fe bc45 	b.w	141dc <ll_rx_sched>
				LL_ASSERT(rx && rx->hdr.link);
   15952:	4a08      	ldr	r2, [pc, #32]	; (15974 <event_phy_upd_ind_prep+0x34c>)
   15954:	4908      	ldr	r1, [pc, #32]	; (15978 <event_phy_upd_ind_prep+0x350>)
   15956:	4809      	ldr	r0, [pc, #36]	; (1597c <event_phy_upd_ind_prep+0x354>)
   15958:	f640 733b 	movw	r3, #3899	; 0xf3b
   1595c:	f00c f830 	bl	219c0 <printk>
   15960:	4040      	eors	r0, r0
   15962:	f380 8811 	msr	BASEPRI, r0
   15966:	f04f 0003 	mov.w	r0, #3
   1596a:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   1596c:	6828      	ldr	r0, [r5, #0]
   1596e:	e77f      	b.n	15870 <event_phy_upd_ind_prep+0x248>
   15970:	2000e47c 	.word	0x2000e47c
   15974:	00028760 	.word	0x00028760
   15978:	0002882c 	.word	0x0002882c
   1597c:	000282a4 	.word	0x000282a4

00015980 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   15980:	4801      	ldr	r0, [pc, #4]	; (15988 <ll_conn_acquire+0x8>)
   15982:	f7fa be17 	b.w	105b4 <mem_acquire>
   15986:	bf00      	nop
   15988:	2000e220 	.word	0x2000e220

0001598c <ll_conn_release>:
	mem_release(conn, &conn_free);
   1598c:	4901      	ldr	r1, [pc, #4]	; (15994 <ll_conn_release+0x8>)
   1598e:	f7fa be2b 	b.w	105e8 <mem_release>
   15992:	bf00      	nop
   15994:	2000e220 	.word	0x2000e220

00015998 <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15998:	4902      	ldr	r1, [pc, #8]	; (159a4 <ll_conn_handle_get+0xc>)
   1599a:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   1599e:	f7fa be3f 	b.w	10620 <mem_index_get>
   159a2:	bf00      	nop
   159a4:	2000e224 	.word	0x2000e224

000159a8 <ll_conn_get>:
{
   159a8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   159aa:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   159ae:	4801      	ldr	r0, [pc, #4]	; (159b4 <ll_conn_get+0xc>)
   159b0:	f7fa be32 	b.w	10618 <mem_get>
   159b4:	2000e224 	.word	0x2000e224

000159b8 <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   159b8:	b958      	cbnz	r0, 159d2 <ll_connected_get+0x1a>
{
   159ba:	b508      	push	{r3, lr}
   159bc:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   159be:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   159c2:	4805      	ldr	r0, [pc, #20]	; (159d8 <ll_connected_get+0x20>)
   159c4:	f7fa fe28 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   159c8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   159ca:	b903      	cbnz	r3, 159ce <ll_connected_get+0x16>
}
   159cc:	bd08      	pop	{r3, pc}
		return NULL;
   159ce:	2000      	movs	r0, #0
}
   159d0:	bd08      	pop	{r3, pc}
		return NULL;
   159d2:	2000      	movs	r0, #0
}
   159d4:	4770      	bx	lr
   159d6:	bf00      	nop
   159d8:	2000e224 	.word	0x2000e224

000159dc <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   159dc:	4801      	ldr	r0, [pc, #4]	; (159e4 <ll_tx_mem_acquire+0x8>)
   159de:	f7fa bde9 	b.w	105b4 <mem_acquire>
   159e2:	bf00      	nop
   159e4:	2000e40c 	.word	0x2000e40c

000159e8 <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   159e8:	4901      	ldr	r1, [pc, #4]	; (159f0 <ll_tx_mem_release+0x8>)
   159ea:	f7fa bdfd 	b.w	105e8 <mem_release>
   159ee:	bf00      	nop
   159f0:	2000e40c 	.word	0x2000e40c

000159f4 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   159f4:	2800      	cmp	r0, #0
   159f6:	d140      	bne.n	15a7a <ll_tx_mem_enqueue+0x86>
{
   159f8:	b570      	push	{r4, r5, r6, lr}
   159fa:	4602      	mov	r2, r0
   159fc:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   159fe:	4820      	ldr	r0, [pc, #128]	; (15a80 <ll_tx_mem_enqueue+0x8c>)
   15a00:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15a04:	f7fa fe08 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   15a08:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15a0a:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   15a0c:	bb7a      	cbnz	r2, 15a6e <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   15a0e:	4c1d      	ldr	r4, [pc, #116]	; (15a84 <ll_tx_mem_enqueue+0x90>)
   15a10:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   15a12:	f894 c001 	ldrb.w	ip, [r4, #1]
   15a16:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   15a18:	1c4b      	adds	r3, r1, #1
   15a1a:	b2db      	uxtb	r3, r3
		last = 0U;
   15a1c:	459c      	cmp	ip, r3
   15a1e:	bf08      	it	eq
   15a20:	2300      	moveq	r3, #0
	if (last == first) {
   15a22:	4298      	cmp	r0, r3
   15a24:	d026      	beq.n	15a74 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15a26:	46a4      	mov	ip, r4
   15a28:	f81c 0b04 	ldrb.w	r0, [ip], #4
   15a2c:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   15a30:	eb1c 0100 	adds.w	r1, ip, r0
   15a34:	d01e      	beq.n	15a74 <ll_tx_mem_enqueue+0x80>
	lll_tx->handle = handle;
   15a36:	f82c 2000 	strh.w	r2, [ip, r0]
	lll_tx->node = tx;
   15a3a:	604e      	str	r6, [r1, #4]
   15a3c:	7c29      	ldrb	r1, [r5, #16]
	*last = idx; /* Commit: Update write index */
   15a3e:	70e3      	strb	r3, [r4, #3]
	if (ull_ref_get(&conn->ull)) {
   15a40:	b929      	cbnz	r1, 15a4e <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15a42:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15a46:	2b00      	cmp	r3, #0
   15a48:	db0b      	blt.n	15a62 <ll_tx_mem_enqueue+0x6e>
	return 0;
   15a4a:	2000      	movs	r0, #0
}
   15a4c:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   15a4e:	4b0e      	ldr	r3, [pc, #56]	; (15a88 <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   15a50:	2101      	movs	r1, #1
   15a52:	2003      	movs	r0, #3
		mfy.param = conn;
   15a54:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   15a56:	f7fa fe85 	bl	10764 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15a5a:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15a5e:	2b00      	cmp	r3, #0
   15a60:	daf3      	bge.n	15a4a <ll_tx_mem_enqueue+0x56>
		ull_slave_latency_cancel(conn, handle);
   15a62:	4628      	mov	r0, r5
   15a64:	2100      	movs	r1, #0
   15a66:	f003 fde1 	bl	1962c <ull_slave_latency_cancel>
	return 0;
   15a6a:	2000      	movs	r0, #0
}
   15a6c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15a6e:	f06f 0015 	mvn.w	r0, #21
}
   15a72:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   15a74:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15a78:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15a7a:	f06f 0015 	mvn.w	r0, #21
}
   15a7e:	4770      	bx	lr
   15a80:	2000e224 	.word	0x2000e224
   15a84:	200005d0 	.word	0x200005d0
   15a88:	20000604 	.word	0x20000604

00015a8c <ll_conn_update>:
{
   15a8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15a90:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   15a94:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   15a98:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15a9c:	2800      	cmp	r0, #0
   15a9e:	d155      	bne.n	15b4c <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15aa0:	460c      	mov	r4, r1
   15aa2:	4615      	mov	r5, r2
   15aa4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15aa8:	4602      	mov	r2, r0
   15aaa:	4841      	ldr	r0, [pc, #260]	; (15bb0 <ll_conn_update+0x124>)
   15aac:	461e      	mov	r6, r3
   15aae:	f7fa fdb3 	bl	10618 <mem_get>
   15ab2:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   15ab4:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15ab6:	2800      	cmp	r0, #0
   15ab8:	d148      	bne.n	15b4c <ll_conn_update+0xc0>
	if (!cmd) {
   15aba:	bb3c      	cbnz	r4, 15b0c <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   15abc:	f89c 317e 	ldrb.w	r3, [ip, #382]	; 0x17e
   15ac0:	06d9      	lsls	r1, r3, #27
   15ac2:	d44a      	bmi.n	15b5a <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   15ac4:	f89c 30dc 	ldrb.w	r3, [ip, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   15ac8:	07da      	lsls	r2, r3, #31
   15aca:	d442      	bmi.n	15b52 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   15acc:	f89c 217c 	ldrb.w	r2, [ip, #380]	; 0x17c
   15ad0:	f89c 317d 	ldrb.w	r3, [ip, #381]	; 0x17d
   15ad4:	4293      	cmp	r3, r2
   15ad6:	d136      	bne.n	15b46 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   15ad8:	f8bc 217e 	ldrh.w	r2, [ip, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15adc:	f99c 103d 	ldrsb.w	r1, [ip, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   15ae0:	f8ac 6180 	strh.w	r6, [ip, #384]	; 0x180
			conn->llcp_conn_param.state = cmd;
   15ae4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   15ae8:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   15aea:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15aee:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   15af0:	f8ac 9182 	strh.w	r9, [ip, #386]	; 0x182
			conn->llcp_conn_param.latency = latency;
   15af4:	f8ac 8184 	strh.w	r8, [ip, #388]	; 0x184
			conn->llcp_conn_param.timeout = timeout;
   15af8:	f8ac 7186 	strh.w	r7, [ip, #390]	; 0x186
			conn->llcp_conn_param.state = cmd;
   15afc:	f8ac 217e 	strh.w	r2, [ip, #382]	; 0x17e
			conn->llcp_conn_param.req++;
   15b00:	f88c 317c 	strb.w	r3, [ip, #380]	; 0x17c
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15b04:	db4e      	blt.n	15ba4 <ll_conn_update+0x118>
	return 0;
   15b06:	2000      	movs	r0, #0
}
   15b08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   15b0c:	3c01      	subs	r4, #1
		if (cmd) {
   15b0e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15b12:	d0db      	beq.n	15acc <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   15b14:	f89c 217c 	ldrb.w	r2, [ip, #380]	; 0x17c
   15b18:	f89c 317d 	ldrb.w	r3, [ip, #381]	; 0x17d
   15b1c:	429a      	cmp	r2, r3
   15b1e:	d012      	beq.n	15b46 <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   15b20:	f89c 317e 	ldrb.w	r3, [ip, #382]	; 0x17e
			     conn->llcp_conn_param.ack) ||
   15b24:	f003 0207 	and.w	r2, r3, #7
   15b28:	2a03      	cmp	r2, #3
   15b2a:	d10c      	bne.n	15b46 <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   15b2c:	f004 0407 	and.w	r4, r4, #7
   15b30:	f023 030f 	bic.w	r3, r3, #15
   15b34:	f044 0408 	orr.w	r4, r4, #8
   15b38:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   15b3a:	f88c 517f 	strb.w	r5, [ip, #383]	; 0x17f
			conn->llcp_conn_param.state = cmd;
   15b3e:	f88c 417e 	strb.w	r4, [ip, #382]	; 0x17e
}
   15b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   15b46:	200c      	movs	r0, #12
}
   15b48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15b4c:	2002      	movs	r0, #2
}
   15b4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   15b52:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   15b56:	079b      	lsls	r3, r3, #30
   15b58:	d4b8      	bmi.n	15acc <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   15b5a:	f99c 303d 	ldrsb.w	r3, [ip, #61]	; 0x3d
   15b5e:	2b00      	cmp	r3, #0
   15b60:	db1e      	blt.n	15ba0 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   15b62:	f89c 2110 	ldrb.w	r2, [ip, #272]	; 0x110
   15b66:	f89c 3111 	ldrb.w	r3, [ip, #273]	; 0x111
   15b6a:	4293      	cmp	r3, r2
   15b6c:	d1eb      	bne.n	15b46 <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15b6e:	f89c 2112 	ldrb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.interval = interval_max;
   15b72:	f8ac 9114 	strh.w	r9, [ip, #276]	; 0x114
		conn->llcp_cu.req++;
   15b76:	3301      	adds	r3, #1
   15b78:	f88c 3110 	strb.w	r3, [ip, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15b7c:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   15b80:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15b82:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   15b86:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   15b88:	f88c 3120 	strb.w	r3, [ip, #288]	; 0x120
		conn->llcp_cu.latency = latency;
   15b8c:	f8ac 8116 	strh.w	r8, [ip, #278]	; 0x116
		conn->llcp_cu.timeout = timeout;
   15b90:	f8ac 7118 	strh.w	r7, [ip, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15b94:	f88c 2112 	strb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   15b98:	f8cc 011c 	str.w	r0, [ip, #284]	; 0x11c
}
   15b9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15ba0:	201a      	movs	r0, #26
   15ba2:	e7d1      	b.n	15b48 <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   15ba4:	4660      	mov	r0, ip
   15ba6:	2100      	movs	r1, #0
   15ba8:	f003 fd40 	bl	1962c <ull_slave_latency_cancel>
	return 0;
   15bac:	2000      	movs	r0, #0
   15bae:	e7cb      	b.n	15b48 <ll_conn_update+0xbc>
   15bb0:	2000e224 	.word	0x2000e224

00015bb4 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15bb4:	b9d0      	cbnz	r0, 15bec <ll_chm_get+0x38>
{
   15bb6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15bb8:	4602      	mov	r2, r0
   15bba:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15bbc:	480c      	ldr	r0, [pc, #48]	; (15bf0 <ll_chm_get+0x3c>)
   15bbe:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15bc2:	f7fa fd29 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   15bc6:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15bc8:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15bca:	b96e      	cbnz	r6, 15be8 <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   15bcc:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   15bd0:	f884 61d0 	strb.w	r6, [r4, #464]	; 0x1d0
		memcpy(chm, conn->lll.data_chan_map,
   15bd4:	2205      	movs	r2, #5
   15bd6:	4639      	mov	r1, r7
   15bd8:	4628      	mov	r0, r5
   15bda:	f00e fb93 	bl	24304 <memcpy>
	} while (conn->chm_updated);
   15bde:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
   15be2:	2800      	cmp	r0, #0
   15be4:	d1f4      	bne.n	15bd0 <ll_chm_get+0x1c>
}
   15be6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15be8:	2002      	movs	r0, #2
}
   15bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15bec:	2002      	movs	r0, #2
}
   15bee:	4770      	bx	lr
   15bf0:	2000e224 	.word	0x2000e224

00015bf4 <ll_terminate_ind_send>:
	switch (reason) {
   15bf4:	2929      	cmp	r1, #41	; 0x29
{
   15bf6:	b538      	push	{r3, r4, r5, lr}
   15bf8:	460d      	mov	r5, r1
   15bfa:	4604      	mov	r4, r0
	switch (reason) {
   15bfc:	d819      	bhi.n	15c32 <ll_terminate_ind_send+0x3e>
   15bfe:	2904      	cmp	r1, #4
   15c00:	d919      	bls.n	15c36 <ll_terminate_ind_send+0x42>
   15c02:	1f4b      	subs	r3, r1, #5
   15c04:	2b24      	cmp	r3, #36	; 0x24
   15c06:	d816      	bhi.n	15c36 <ll_terminate_ind_send+0x42>
   15c08:	e8df f003 	tbb	[pc, r3]
   15c0c:	15151517 	.word	0x15151517
   15c10:	15151515 	.word	0x15151515
   15c14:	15151515 	.word	0x15151515
   15c18:	17171515 	.word	0x17171515
   15c1c:	15151517 	.word	0x15151517
   15c20:	15151715 	.word	0x15151715
   15c24:	15151515 	.word	0x15151515
   15c28:	15151515 	.word	0x15151515
   15c2c:	15151515 	.word	0x15151515
   15c30:	17          	.byte	0x17
   15c31:	00          	.byte	0x00
   15c32:	293b      	cmp	r1, #59	; 0x3b
   15c34:	d001      	beq.n	15c3a <ll_terminate_ind_send+0x46>
   15c36:	2012      	movs	r0, #18
}
   15c38:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15c3a:	b9a4      	cbnz	r4, 15c66 <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15c3c:	4622      	mov	r2, r4
   15c3e:	480d      	ldr	r0, [pc, #52]	; (15c74 <ll_terminate_ind_send+0x80>)
   15c40:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15c44:	f7fa fce8 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   15c48:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   15c4a:	b962      	cbnz	r2, 15c66 <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   15c4c:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15c50:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   15c54:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
	conn->llcp_terminate.req++;
   15c58:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15c5a:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   15c5c:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15c60:	db03      	blt.n	15c6a <ll_terminate_ind_send+0x76>
	return 0;
   15c62:	4620      	mov	r0, r4
}
   15c64:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15c66:	2002      	movs	r0, #2
}
   15c68:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   15c6a:	4621      	mov	r1, r4
   15c6c:	f003 fcde 	bl	1962c <ull_slave_latency_cancel>
	return 0;
   15c70:	4620      	mov	r0, r4
}
   15c72:	bd38      	pop	{r3, r4, r5, pc}
   15c74:	2000e224 	.word	0x2000e224

00015c78 <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15c78:	bb00      	cbnz	r0, 15cbc <ll_feature_req_send+0x44>
{
   15c7a:	b510      	push	{r4, lr}
   15c7c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15c7e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15c82:	480f      	ldr	r0, [pc, #60]	; (15cc0 <ll_feature_req_send+0x48>)
   15c84:	f7fa fcc8 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   15c88:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   15c8a:	b984      	cbnz	r4, 15cae <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   15c8c:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   15c90:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   15c94:	428a      	cmp	r2, r1
   15c96:	d108      	bne.n	15caa <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c98:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   15c9c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c9e:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   15ca0:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15ca4:	db05      	blt.n	15cb2 <ll_feature_req_send+0x3a>
	return 0;
   15ca6:	4620      	mov	r0, r4
}
   15ca8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15caa:	200c      	movs	r0, #12
}
   15cac:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15cae:	2002      	movs	r0, #2
}
   15cb0:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   15cb2:	4621      	mov	r1, r4
   15cb4:	f003 fcba 	bl	1962c <ull_slave_latency_cancel>
	return 0;
   15cb8:	4620      	mov	r0, r4
}
   15cba:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15cbc:	2002      	movs	r0, #2
}
   15cbe:	4770      	bx	lr
   15cc0:	2000e224 	.word	0x2000e224

00015cc4 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15cc4:	bb00      	cbnz	r0, 15d08 <ll_version_ind_send+0x44>
{
   15cc6:	b510      	push	{r4, lr}
   15cc8:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15cca:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15cce:	480f      	ldr	r0, [pc, #60]	; (15d0c <ll_version_ind_send+0x48>)
   15cd0:	f7fa fca2 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   15cd4:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   15cd6:	b984      	cbnz	r4, 15cfa <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   15cd8:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   15cdc:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   15ce0:	428a      	cmp	r2, r1
   15ce2:	d108      	bne.n	15cf6 <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ce4:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   15ce8:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15cea:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   15cec:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15cf0:	db05      	blt.n	15cfe <ll_version_ind_send+0x3a>
	return 0;
   15cf2:	4620      	mov	r0, r4
}
   15cf4:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15cf6:	200c      	movs	r0, #12
}
   15cf8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15cfa:	2002      	movs	r0, #2
}
   15cfc:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   15cfe:	4621      	mov	r1, r4
   15d00:	f003 fc94 	bl	1962c <ull_slave_latency_cancel>
	return 0;
   15d04:	4620      	mov	r0, r4
}
   15d06:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15d08:	2002      	movs	r0, #2
}
   15d0a:	4770      	bx	lr
   15d0c:	2000e224 	.word	0x2000e224

00015d10 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15d10:	2800      	cmp	r0, #0
   15d12:	d14c      	bne.n	15dae <ll_length_req_send+0x9e>
{
   15d14:	b538      	push	{r3, r4, r5, lr}
   15d16:	460d      	mov	r5, r1
   15d18:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15d1a:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15d1e:	4602      	mov	r2, r0
   15d20:	4824      	ldr	r0, [pc, #144]	; (15db4 <ll_length_req_send+0xa4>)
   15d22:	f7fa fc79 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   15d26:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15d28:	bbc3      	cbnz	r3, 15d9c <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   15d2a:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   15d2e:	071a      	lsls	r2, r3, #28
   15d30:	d432      	bmi.n	15d98 <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   15d32:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   15d36:	07d1      	lsls	r1, r2, #31
   15d38:	d503      	bpl.n	15d42 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   15d3a:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   15d3e:	0692      	lsls	r2, r2, #26
   15d40:	d52a      	bpl.n	15d98 <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   15d42:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   15d46:	f890 21a5 	ldrb.w	r2, [r0, #421]	; 0x1a5
   15d4a:	428a      	cmp	r2, r1
   15d4c:	d011      	beq.n	15d72 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   15d4e:	f003 0307 	and.w	r3, r3, #7
   15d52:	2b03      	cmp	r3, #3
   15d54:	d004      	beq.n	15d60 <ll_length_req_send+0x50>
   15d56:	3303      	adds	r3, #3
   15d58:	f003 0307 	and.w	r3, r3, #7
   15d5c:	2b01      	cmp	r3, #1
   15d5e:	d824      	bhi.n	15daa <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   15d60:	f8b0 31b0 	ldrh.w	r3, [r0, #432]	; 0x1b0
   15d64:	bb0b      	cbnz	r3, 15daa <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   15d66:	f8a0 51b0 	strh.w	r5, [r0, #432]	; 0x1b0
				conn->llcp_length.cache.tx_time = tx_time;
   15d6a:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
				return 0;
   15d6e:	4618      	mov	r0, r3
}
   15d70:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15d72:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
	conn->llcp_length.tx_octets = tx_octets;
   15d76:	f8a0 51aa 	strh.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15d7a:	f36f 0302 	bfc	r3, #0, #3
   15d7e:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15d82:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_length.tx_time = tx_time;
   15d86:	f8a0 41ae 	strh.w	r4, [r0, #430]	; 0x1ae
	conn->llcp_length.req++;
   15d8a:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15d8c:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   15d8e:	f880 21a4 	strb.w	r2, [r0, #420]	; 0x1a4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15d92:	db05      	blt.n	15da0 <ll_length_req_send+0x90>
	return 0;
   15d94:	2000      	movs	r0, #0
}
   15d96:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15d98:	201a      	movs	r0, #26
}
   15d9a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15d9c:	2002      	movs	r0, #2
}
   15d9e:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   15da0:	2100      	movs	r1, #0
   15da2:	f003 fc43 	bl	1962c <ull_slave_latency_cancel>
	return 0;
   15da6:	2000      	movs	r0, #0
}
   15da8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   15daa:	200c      	movs	r0, #12
}
   15dac:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15dae:	2002      	movs	r0, #2
}
   15db0:	4770      	bx	lr
   15db2:	bf00      	nop
   15db4:	2000e224 	.word	0x2000e224

00015db8 <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   15db8:	4a03      	ldr	r2, [pc, #12]	; (15dc8 <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   15dba:	4b04      	ldr	r3, [pc, #16]	; (15dcc <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   15dbc:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   15dbe:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   15dc0:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   15dc2:	800b      	strh	r3, [r1, #0]
}
   15dc4:	4770      	bx	lr
   15dc6:	bf00      	nop
   15dc8:	2000ed6e 	.word	0x2000ed6e
   15dcc:	2000ed70 	.word	0x2000ed70

00015dd0 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   15dd0:	4a02      	ldr	r2, [pc, #8]	; (15ddc <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   15dd2:	4b03      	ldr	r3, [pc, #12]	; (15de0 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   15dd4:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   15dd6:	8019      	strh	r1, [r3, #0]
}
   15dd8:	2000      	movs	r0, #0
   15dda:	4770      	bx	lr
   15ddc:	2000ed6e 	.word	0x2000ed6e
   15de0:	2000ed70 	.word	0x2000ed70

00015de4 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15de4:	f04f 0c1b 	mov.w	ip, #27
   15de8:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15dec:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15df0:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15df4:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15df6:	8018      	strh	r0, [r3, #0]
}
   15df8:	4770      	bx	lr
   15dfa:	bf00      	nop

00015dfc <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15dfc:	b9c0      	cbnz	r0, 15e30 <ll_phy_get+0x34>
{
   15dfe:	b538      	push	{r3, r4, r5, lr}
   15e00:	460d      	mov	r5, r1
   15e02:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15e04:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15e08:	4602      	mov	r2, r0
   15e0a:	480a      	ldr	r0, [pc, #40]	; (15e34 <ll_phy_get+0x38>)
   15e0c:	f7fa fc04 	bl	10618 <mem_get>
   15e10:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   15e12:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15e14:	b950      	cbnz	r0, 15e2c <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   15e16:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   15e1a:	f3c2 0202 	ubfx	r2, r2, #0, #3
   15e1e:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   15e20:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   15e24:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15e28:	7023      	strb	r3, [r4, #0]
}
   15e2a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e2c:	2002      	movs	r0, #2
}
   15e2e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e30:	2002      	movs	r0, #2
}
   15e32:	4770      	bx	lr
   15e34:	2000e224 	.word	0x2000e224

00015e38 <ll_phy_default_set>:
	default_phy_tx = tx;
   15e38:	4a02      	ldr	r2, [pc, #8]	; (15e44 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   15e3a:	4b03      	ldr	r3, [pc, #12]	; (15e48 <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   15e3c:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   15e3e:	7019      	strb	r1, [r3, #0]
}
   15e40:	2000      	movs	r0, #0
   15e42:	4770      	bx	lr
   15e44:	2000f30f 	.word	0x2000f30f
   15e48:	2000f30e 	.word	0x2000f30e

00015e4c <ll_phy_req_send>:
{
   15e4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15e4e:	2800      	cmp	r0, #0
   15e50:	d143      	bne.n	15eda <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15e52:	460c      	mov	r4, r1
   15e54:	4616      	mov	r6, r2
   15e56:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15e5a:	4602      	mov	r2, r0
   15e5c:	4823      	ldr	r0, [pc, #140]	; (15eec <ll_phy_req_send+0xa0>)
   15e5e:	461f      	mov	r7, r3
   15e60:	f7fa fbda 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   15e64:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15e66:	bbc3      	cbnz	r3, 15eda <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   15e68:	f890 51b7 	ldrb.w	r5, [r0, #439]	; 0x1b7
   15e6c:	f015 0508 	ands.w	r5, r5, #8
   15e70:	d130      	bne.n	15ed4 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   15e72:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   15e76:	07db      	lsls	r3, r3, #31
   15e78:	d504      	bpl.n	15e84 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   15e7a:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   15e7e:	f413 6f10 	tst.w	r3, #2304	; 0x900
   15e82:	d027      	beq.n	15ed4 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   15e84:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
   15e88:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
   15e8c:	4299      	cmp	r1, r3
   15e8e:	d11e      	bne.n	15ece <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15e90:	f004 0407 	and.w	r4, r4, #7
   15e94:	f8b0 21b6 	ldrh.w	r2, [r0, #438]	; 0x1b6
   15e98:	00a4      	lsls	r4, r4, #2
   15e9a:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   15e9e:	f007 0307 	and.w	r3, r7, #7
   15ea2:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   15ea6:	f006 0601 	and.w	r6, r6, #1
   15eaa:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   15eae:	f022 0207 	bic.w	r2, r2, #7
   15eb2:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   15eb6:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15eb8:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15ebc:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
	conn->llcp_phy.req++;
   15ec0:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ec2:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   15ec4:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ec8:	db0a      	blt.n	15ee0 <ll_phy_req_send+0x94>
}
   15eca:	4628      	mov	r0, r5
   15ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15ece:	250c      	movs	r5, #12
}
   15ed0:	4628      	mov	r0, r5
   15ed2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15ed4:	251a      	movs	r5, #26
}
   15ed6:	4628      	mov	r0, r5
   15ed8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15eda:	2502      	movs	r5, #2
}
   15edc:	4628      	mov	r0, r5
   15ede:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   15ee0:	2100      	movs	r1, #0
   15ee2:	f003 fba3 	bl	1962c <ull_slave_latency_cancel>
}
   15ee6:	4628      	mov	r0, r5
   15ee8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15eea:	bf00      	nop
   15eec:	2000e224 	.word	0x2000e224

00015ef0 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15ef0:	b9d8      	cbnz	r0, 15f2a <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15ef2:	4602      	mov	r2, r0
{
   15ef4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15ef6:	480e      	ldr	r0, [pc, #56]	; (15f30 <ll_apto_get+0x40>)
   15ef8:	460c      	mov	r4, r1
   15efa:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15efe:	f7fa fb8b 	bl	10618 <mem_get>
   15f02:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   15f04:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15f06:	b970      	cbnz	r0, 15f26 <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   15f08:	f8b2 30d2 	ldrh.w	r3, [r2, #210]	; 0xd2
   15f0c:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   15f0e:	fb02 f303 	mul.w	r3, r2, r3
   15f12:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   15f16:	4a07      	ldr	r2, [pc, #28]	; (15f34 <ll_apto_get+0x44>)
   15f18:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   15f1c:	fba2 2303 	umull	r2, r3, r2, r3
   15f20:	099b      	lsrs	r3, r3, #6
   15f22:	8023      	strh	r3, [r4, #0]
}
   15f24:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f26:	2002      	movs	r0, #2
}
   15f28:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f2a:	2002      	movs	r0, #2
}
   15f2c:	4770      	bx	lr
   15f2e:	bf00      	nop
   15f30:	2000e224 	.word	0x2000e224
   15f34:	10624dd3 	.word	0x10624dd3

00015f38 <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15f38:	b9e0      	cbnz	r0, 15f74 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f3a:	4602      	mov	r2, r0
{
   15f3c:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f3e:	480e      	ldr	r0, [pc, #56]	; (15f78 <ll_apto_set+0x40>)
   15f40:	460c      	mov	r4, r1
   15f42:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15f46:	f7fa fb67 	bl	10618 <mem_get>
   15f4a:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   15f4c:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15f4e:	b978      	cbnz	r0, 15f70 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   15f50:	f8b2 c02e 	ldrh.w	ip, [r2, #46]	; 0x2e
   15f54:	f240 43e2 	movw	r3, #1250	; 0x4e2
   15f58:	fb03 fc0c 	mul.w	ip, r3, ip
   15f5c:	f242 7310 	movw	r3, #10000	; 0x2710
   15f60:	fb03 c304 	mla	r3, r3, r4, ip
   15f64:	3b01      	subs	r3, #1
   15f66:	fbb3 f3fc 	udiv	r3, r3, ip
   15f6a:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   15f6e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f70:	2002      	movs	r0, #2
}
   15f72:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f74:	2002      	movs	r0, #2
}
   15f76:	4770      	bx	lr
   15f78:	2000e224 	.word	0x2000e224

00015f7c <ull_conn_init>:
	err = init_reset();
   15f7c:	f7ff b81c 	b.w	14fb8 <init_reset>

00015f80 <ull_conn_reset>:
{
   15f80:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f82:	2200      	movs	r2, #0
   15f84:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15f88:	4813      	ldr	r0, [pc, #76]	; (15fd8 <ull_conn_reset+0x58>)
   15f8a:	f7fa fb45 	bl	10618 <mem_get>
   15f8e:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   15f90:	f100 021c 	add.w	r2, r0, #28
   15f94:	4601      	mov	r1, r0
   15f96:	2003      	movs	r0, #3
   15f98:	f7fe fa52 	bl	14440 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   15f9c:	b108      	cbz	r0, 15fa2 <ull_conn_reset+0x22>
   15f9e:	3045      	adds	r0, #69	; 0x45
   15fa0:	d10b      	bne.n	15fba <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   15fa2:	480e      	ldr	r0, [pc, #56]	; (15fdc <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   15fa4:	490e      	ldr	r1, [pc, #56]	; (15fe0 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   15fa6:	4a0f      	ldr	r2, [pc, #60]	; (15fe4 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   15fa8:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   15faa:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   15fac:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   15fae:	67a3      	str	r3, [r4, #120]	; 0x78
}
   15fb0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   15fb4:	6013      	str	r3, [r2, #0]
	err = init_reset();
   15fb6:	f7fe bfff 	b.w	14fb8 <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   15fba:	4a0b      	ldr	r2, [pc, #44]	; (15fe8 <ull_conn_reset+0x68>)
   15fbc:	490b      	ldr	r1, [pc, #44]	; (15fec <ull_conn_reset+0x6c>)
   15fbe:	480c      	ldr	r0, [pc, #48]	; (15ff0 <ull_conn_reset+0x70>)
   15fc0:	f240 63f4 	movw	r3, #1780	; 0x6f4
   15fc4:	f00b fcfc 	bl	219c0 <printk>
   15fc8:	4040      	eors	r0, r0
   15fca:	f380 8811 	msr	BASEPRI, r0
   15fce:	f04f 0003 	mov.w	r0, #3
   15fd2:	df02      	svc	2
   15fd4:	e7e5      	b.n	15fa2 <ull_conn_reset+0x22>
   15fd6:	bf00      	nop
   15fd8:	2000e224 	.word	0x2000e224
   15fdc:	200005d0 	.word	0x200005d0
   15fe0:	2000058c 	.word	0x2000058c
   15fe4:	2000e3f8 	.word	0x2000e3f8
   15fe8:	00028760 	.word	0x00028760
   15fec:	00028870 	.word	0x00028870
   15ff0:	000282a4 	.word	0x000282a4

00015ff4 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   15ff4:	4b01      	ldr	r3, [pc, #4]	; (15ffc <ull_conn_default_tx_octets_get+0x8>)
}
   15ff6:	8818      	ldrh	r0, [r3, #0]
   15ff8:	4770      	bx	lr
   15ffa:	bf00      	nop
   15ffc:	2000ed6e 	.word	0x2000ed6e

00016000 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   16000:	4b01      	ldr	r3, [pc, #4]	; (16008 <ull_conn_default_tx_time_get+0x8>)
}
   16002:	8818      	ldrh	r0, [r3, #0]
   16004:	4770      	bx	lr
   16006:	bf00      	nop
   16008:	2000ed70 	.word	0x2000ed70

0001600c <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   1600c:	4b01      	ldr	r3, [pc, #4]	; (16014 <ull_conn_default_phy_tx_get+0x8>)
}
   1600e:	7818      	ldrb	r0, [r3, #0]
   16010:	4770      	bx	lr
   16012:	bf00      	nop
   16014:	2000f30f 	.word	0x2000f30f

00016018 <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   16018:	4b01      	ldr	r3, [pc, #4]	; (16020 <ull_conn_default_phy_rx_get+0x8>)
}
   1601a:	7818      	ldrb	r0, [r3, #0]
   1601c:	4770      	bx	lr
   1601e:	bf00      	nop
   16020:	2000f30e 	.word	0x2000f30e

00016024 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   16024:	688b      	ldr	r3, [r1, #8]
   16026:	689b      	ldr	r3, [r3, #8]
	switch (lll->role) {
   16028:	f893 c021 	ldrb.w	ip, [r3, #33]	; 0x21
   1602c:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
   16030:	d10e      	bne.n	16050 <ull_conn_setup+0x2c>
{
   16032:	b510      	push	{r4, lr}
		LL_ASSERT(0);
   16034:	4a08      	ldr	r2, [pc, #32]	; (16058 <ull_conn_setup+0x34>)
   16036:	4909      	ldr	r1, [pc, #36]	; (1605c <ull_conn_setup+0x38>)
   16038:	4809      	ldr	r0, [pc, #36]	; (16060 <ull_conn_setup+0x3c>)
   1603a:	f240 331d 	movw	r3, #797	; 0x31d
   1603e:	f00b fcbf 	bl	219c0 <printk>
   16042:	4040      	eors	r0, r0
   16044:	f380 8811 	msr	BASEPRI, r0
   16048:	f04f 0003 	mov.w	r0, #3
   1604c:	df02      	svc	2
}
   1604e:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   16050:	460a      	mov	r2, r1
   16052:	3208      	adds	r2, #8
   16054:	f7ec b9b4 	b.w	23c0 <ull_slave_setup>
   16058:	00028760 	.word	0x00028760
   1605c:	0002833c 	.word	0x0002833c
   16060:	000282a4 	.word	0x000282a4

00016064 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   16064:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   16066:	88da      	ldrh	r2, [r3, #6]
   16068:	2a00      	cmp	r2, #0
   1606a:	f040 80c1 	bne.w	161f0 <ull_conn_rx+0x18c>
{
   1606e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16072:	460d      	mov	r5, r1
   16074:	b083      	sub	sp, #12
   16076:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16078:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1607c:	48a6      	ldr	r0, [pc, #664]	; (16318 <ull_conn_rx+0x2b4>)
   1607e:	f7fa facb 	bl	10618 <mem_get>
   16082:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   16084:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   16086:	2800      	cmp	r0, #0
   16088:	f040 80ab 	bne.w	161e2 <ull_conn_rx+0x17e>
	pdu_rx = (void *)(*rx)->pdu;
   1608c:	682f      	ldr	r7, [r5, #0]
	switch (pdu_rx->ll_id) {
   1608e:	7f3a      	ldrb	r2, [r7, #28]
   16090:	f002 0203 	and.w	r2, r2, #3
   16094:	2a03      	cmp	r2, #3
   16096:	d127      	bne.n	160e8 <ull_conn_rx+0x84>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16098:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	opcode = pdu_rx->llctrl.opcode;
   1609c:	f897 801f 	ldrb.w	r8, [r7, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   160a0:	07d3      	lsls	r3, r2, #31
   160a2:	d53b      	bpl.n	1611c <ull_conn_rx+0xb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   160a4:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   160a8:	2b00      	cmp	r3, #0
   160aa:	f2c0 80a5 	blt.w	161f8 <ull_conn_rx+0x194>
	return (!conn->lll.role &&
   160ae:	0750      	lsls	r0, r2, #29
   160b0:	f100 80d1 	bmi.w	16256 <ull_conn_rx+0x1f2>
		((!conn->llcp_enc.refresh &&
   160b4:	f1b8 0f02 	cmp.w	r8, #2
   160b8:	f000 82f2 	beq.w	166a0 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   160bc:	f1b8 0f05 	cmp.w	r8, #5
   160c0:	d04f      	beq.n	16162 <ull_conn_rx+0xfe>
   160c2:	f1b8 0f06 	cmp.w	r8, #6
   160c6:	f000 852b 	beq.w	16b20 <ull_conn_rx+0xabc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   160ca:	f1b8 0f0d 	cmp.w	r8, #13
   160ce:	f000 83ca 	beq.w	16866 <ull_conn_rx+0x802>
   160d2:	f1b8 0f11 	cmp.w	r8, #17
   160d6:	f000 8288 	beq.w	165ea <ull_conn_rx+0x586>
		conn->llcp_terminate.reason_peer =
   160da:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   160dc:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_peer =
   160de:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b

		return 0;
   160e2:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   160e4:	713b      	strb	r3, [r7, #4]
		return 0;
   160e6:	e00a      	b.n	160fe <ull_conn_rx+0x9a>
	switch (pdu_rx->ll_id) {
   160e8:	b962      	cbnz	r2, 16104 <ull_conn_rx+0xa0>
		if (conn->llcp_enc.pause_rx) {
   160ea:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   160ee:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_peer =
   160f0:	bf44      	itt	mi
   160f2:	233d      	movmi	r3, #61	; 0x3d
   160f4:	f884 313b 	strbmi.w	r3, [r4, #315]	; 0x13b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   160f8:	2301      	movs	r3, #1
   160fa:	713b      	strb	r3, [r7, #4]
	return 0;
   160fc:	2000      	movs	r0, #0
}
   160fe:	b003      	add	sp, #12
   16100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   16104:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   16108:	07d2      	lsls	r2, r2, #31
   1610a:	d5f7      	bpl.n	160fc <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_peer =
   1610c:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1610e:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_peer =
   16110:	f884 113b 	strb.w	r1, [r4, #315]	; 0x13b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16114:	713a      	strb	r2, [r7, #4]
}
   16116:	b003      	add	sp, #12
   16118:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   1611c:	f1b8 0f18 	cmp.w	r8, #24
   16120:	d81f      	bhi.n	16162 <ull_conn_rx+0xfe>
   16122:	e8df f018 	tbh	[pc, r8, lsl #1]
   16126:	01f5      	.short	0x01f5
   16128:	02bd01c0 	.word	0x02bd01c0
   1612c:	001e0019 	.word	0x001e0019
   16130:	0441001e 	.word	0x0441001e
   16134:	034d0297 	.word	0x034d0297
   16138:	02cd0318 	.word	0x02cd0318
   1613c:	03e30422 	.word	0x03e30422
   16140:	001e03a0 	.word	0x001e03a0
   16144:	001e0413 	.word	0x001e0413
   16148:	016b0262 	.word	0x016b0262
   1614c:	00fd0161 	.word	0x00fd0161
   16150:	013000fd 	.word	0x013000fd
   16154:	0183001e 	.word	0x0183001e
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   16158:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1615c:	2b00      	cmp	r3, #0
   1615e:	f2c0 8092 	blt.w	16286 <ull_conn_rx+0x222>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16162:	486e      	ldr	r0, [pc, #440]	; (1631c <ull_conn_rx+0x2b8>)
   16164:	f7fa fa26 	bl	105b4 <mem_acquire>
	if (!tx) {
   16168:	2800      	cmp	r0, #0
   1616a:	f000 85ab 	beq.w	16cc4 <ull_conn_rx+0xc60>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   1616e:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   16170:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   16174:	f043 0303 	orr.w	r3, r3, #3
   16178:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   1617a:	2302      	movs	r3, #2
   1617c:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   1617e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   16182:	2207      	movs	r2, #7
   16184:	71c2      	strb	r2, [r0, #7]
	if (
   16186:	b1e3      	cbz	r3, 161c2 <ull_conn_rx+0x15e>
	    !conn->llcp_enc.pause_tx &&
   16188:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1618c:	0795      	lsls	r5, r2, #30
   1618e:	d418      	bmi.n	161c2 <ull_conn_rx+0x15e>
	    !conn->llcp_phy.pause_tx &&
   16190:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   16194:	07d1      	lsls	r1, r2, #31
   16196:	d414      	bmi.n	161c2 <ull_conn_rx+0x15e>
		if (conn->tx_head == conn->tx_data) {
   16198:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1619c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1619e:	bf04      	itt	eq
   161a0:	681a      	ldreq	r2, [r3, #0]
   161a2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   161a6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   161aa:	b97a      	cbnz	r2, 161cc <ull_conn_rx+0x168>
			tx->next = conn->tx_head->next;
   161ac:	681a      	ldr	r2, [r3, #0]
   161ae:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   161b0:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   161b2:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   161b4:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   161b8:	2b00      	cmp	r3, #0
   161ba:	d19d      	bne.n	160f8 <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   161bc:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   161c0:	e79a      	b.n	160f8 <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   161c2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   161c6:	2a00      	cmp	r2, #0
   161c8:	f000 84a0 	beq.w	16b0c <ull_conn_rx+0xaa8>
	tx->next = conn->tx_ctrl_last->next;
   161cc:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   161d0:	681a      	ldr	r2, [r3, #0]
   161d2:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   161d4:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   161d6:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   161d8:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   161dc:	2b00      	cmp	r3, #0
   161de:	d18b      	bne.n	160f8 <ull_conn_rx+0x94>
   161e0:	e7ec      	b.n	161bc <ull_conn_rx+0x158>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   161e2:	682b      	ldr	r3, [r5, #0]
   161e4:	2201      	movs	r2, #1
		return 0;
   161e6:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   161e8:	711a      	strb	r2, [r3, #4]
}
   161ea:	b003      	add	sp, #12
   161ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   161f0:	2201      	movs	r2, #1
   161f2:	711a      	strb	r2, [r3, #4]
		return 0;
   161f4:	2000      	movs	r0, #0
}
   161f6:	4770      	bx	lr
	       (conn->lll.role &&
   161f8:	0751      	lsls	r1, r2, #29
   161fa:	d439      	bmi.n	16270 <ull_conn_rx+0x20c>
		((!conn->llcp_enc.refresh &&
   161fc:	f1b8 0f07 	cmp.w	r8, #7
   16200:	f000 8228 	beq.w	16654 <ull_conn_rx+0x5f0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16204:	f1b8 0f02 	cmp.w	r8, #2
   16208:	f000 824a 	beq.w	166a0 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1620c:	f1b8 0f06 	cmp.w	r8, #6
   16210:	f47f af5b 	bne.w	160ca <ull_conn_rx+0x66>

		break;
#endif /* CONFIG_BT_CENTRAL */

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16214:	7f7b      	ldrb	r3, [r7, #29]
   16216:	2b01      	cmp	r3, #1
   16218:	d1a3      	bne.n	16162 <ull_conn_rx+0xfe>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (conn->lll.role) {
#if !defined(CONFIG_BT_CTLR_FAST_ENC)
			if ((conn->llcp_req != conn->llcp_ack) &&
   1621a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1621e:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16222:	428b      	cmp	r3, r1
   16224:	f001 8061 	beq.w	172ea <ull_conn_rx+0x1286>
   16228:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1622c:	2b03      	cmp	r3, #3
   1622e:	d198      	bne.n	16162 <ull_conn_rx+0xfe>
			    (conn->llcp_type != LLCP_ENCRYPTION)) {
				goto ull_conn_rx_unknown_rsp_send;
			}

			/* start enc rsp to be scheduled in slave  prepare */
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16230:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16234:	f36f 0301 	bfc	r3, #0, #2
   16238:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_enc.pause_rx = 0U;
			conn->llcp_enc.pause_tx = 0U;
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (conn->llcp_enc.refresh) {
   1623c:	0750      	lsls	r0, r2, #29
   1623e:	d505      	bpl.n	1624c <ull_conn_rx+0x1e8>
			conn->llcp_enc.refresh = 0U;
   16240:	f36f 0282 	bfc	r2, #2, #1

			/* key refresh event */
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   16244:	2316      	movs	r3, #22
			conn->llcp_enc.refresh = 0U;
   16246:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   1624a:	713b      	strb	r3, [r7, #4]
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   1624c:	2300      	movs	r3, #0
   1624e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   16252:	4618      	mov	r0, r3
		break;
   16254:	e753      	b.n	160fe <ull_conn_rx+0x9a>
		 (conn->llcp_enc.refresh &&
   16256:	f1b8 0f02 	cmp.w	r8, #2
   1625a:	f000 8221 	beq.w	166a0 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1625e:	f1b8 0f0b 	cmp.w	r8, #11
   16262:	f000 8462 	beq.w	16b2a <ull_conn_rx+0xac6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16266:	f1b8 0f04 	cmp.w	r8, #4
   1626a:	f47f af27 	bne.w	160bc <ull_conn_rx+0x58>
   1626e:	e778      	b.n	16162 <ull_conn_rx+0xfe>
		 (conn->llcp_enc.refresh &&
   16270:	f1b8 0f02 	cmp.w	r8, #2
   16274:	f000 8214 	beq.w	166a0 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   16278:	f1b8 0f0b 	cmp.w	r8, #11
   1627c:	f000 845a 	beq.w	16b34 <ull_conn_rx+0xad0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   16280:	f1b8 0f03 	cmp.w	r8, #3
   16284:	d1c2      	bne.n	1620c <ull_conn_rx+0x1a8>
		if (!conn->lll.role ||
   16286:	7f7b      	ldrb	r3, [r7, #29]
   16288:	2b17      	cmp	r3, #23
   1628a:	f47f af6a 	bne.w	16162 <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   1628e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   16292:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16296:	1a9b      	subs	r3, r3, r2
   16298:	f003 0303 	and.w	r3, r3, #3
   1629c:	2b02      	cmp	r3, #2
   1629e:	f001 8104 	beq.w	174aa <ull_conn_rx+0x1446>
		memcpy(&conn->llcp_enc.rand[0],
   162a2:	2208      	movs	r2, #8
   162a4:	f107 0120 	add.w	r1, r7, #32
   162a8:	f204 1061 	addw	r0, r4, #353	; 0x161
   162ac:	f00e f82a 	bl	24304 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   162b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   162b4:	f884 315f 	strb.w	r3, [r4, #351]	; 0x15f
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   162b8:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   162bc:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   162c0:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   162c4:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   162c6:	2301      	movs	r3, #1
   162c8:	f363 0201 	bfi	r2, r3, #0, #2
   162cc:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   162d0:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   162d2:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   162d6:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   162d8:	3b02      	subs	r3, #2
   162da:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   162de:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   162e0:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		memcpy(&conn->llcp.encryption.skd[0],
   162e4:	f104 00fa 	add.w	r0, r4, #250	; 0xfa
   162e8:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   162ec:	f00e f80a 	bl	24304 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   162f0:	2204      	movs	r2, #4
   162f2:	f107 0132 	add.w	r1, r7, #50	; 0x32
   162f6:	f104 0098 	add.w	r0, r4, #152	; 0x98
   162fa:	f00e f803 	bl	24304 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   162fe:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   16302:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
   16306:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   1630a:	f043 0301 	orr.w	r3, r3, #1
   1630e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	int nack = 0;
   16312:	2000      	movs	r0, #0
		break;
   16314:	e6f3      	b.n	160fe <ull_conn_rx+0x9a>
   16316:	bf00      	nop
   16318:	2000e224 	.word	0x2000e224
   1631c:	2000e47c 	.word	0x2000e47c

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   16320:	7f7b      	ldrb	r3, [r7, #29]
   16322:	2b09      	cmp	r3, #9
   16324:	f47f af1d 	bne.w	16162 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   16328:	f1b8 0f14 	cmp.w	r8, #20
   1632c:	f000 8442 	beq.w	16bb4 <ull_conn_rx+0xb50>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16330:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
	if (/* Local idle, and Peer request then complete the Peer procedure
   16334:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   16338:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   1633c:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   16340:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   16344:	f8b4 a060 	ldrh.w	sl, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   16348:	4293      	cmp	r3, r2
   1634a:	f000 87df 	beq.w	1730c <ull_conn_rx+0x12a8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1634e:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
	struct node_tx *tx = NULL;
   16352:	2300      	movs	r3, #0
	       tx) ||
   16354:	f001 0107 	and.w	r1, r1, #7
   16358:	2902      	cmp	r1, #2
   1635a:	f000 8441 	beq.w	16be0 <ull_conn_rx+0xb7c>
   1635e:	f897 801f 	ldrb.w	r8, [r7, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   16362:	f1b8 0f15 	cmp.w	r8, #21
   16366:	f43f aec9 	beq.w	160fc <ull_conn_rx+0x98>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1636a:	4618      	mov	r0, r3
   1636c:	49d2      	ldr	r1, [pc, #840]	; (166b8 <ull_conn_rx+0x654>)
   1636e:	f7fa f93b 	bl	105e8 <mem_release>
			if (conn->llcp_length.state ==
   16372:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
   16376:	f003 0307 	and.w	r3, r3, #7
   1637a:	2b04      	cmp	r3, #4
   1637c:	f47f aebe 	bne.w	160fc <ull_conn_rx+0x98>
				return -EBUSY;
   16380:	f06f 000f 	mvn.w	r0, #15
   16384:	e6bb      	b.n	160fe <ull_conn_rx+0x9a>
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

#if defined(CONFIG_BT_CTLR_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   16386:	7f7b      	ldrb	r3, [r7, #29]
   16388:	2b03      	cmp	r3, #3
   1638a:	f47f aeea 	bne.w	16162 <ull_conn_rx+0xfe>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role) {
   1638e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16392:	2b00      	cmp	r3, #0
   16394:	f2c0 84d0 	blt.w	16d38 <ull_conn_rx+0xcd4>
			if ((conn->llcp_phy.ack !=
   16398:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
			     conn->llcp_phy.req) &&
   1639c:	f894 01b4 	ldrb.w	r0, [r4, #436]	; 0x1b4
			if ((conn->llcp_phy.ack !=
   163a0:	4281      	cmp	r1, r0
   163a2:	d007      	beq.n	163b4 <ull_conn_rx+0x350>
			    ((conn->llcp_phy.state ==
			      LLCP_PHY_STATE_ACK_WAIT) ||
			     (conn->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
   163a4:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
   163a8:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   163ac:	3a01      	subs	r2, #1
   163ae:	2a02      	cmp	r2, #2
   163b0:	f240 8711 	bls.w	171d6 <ull_conn_rx+0x1172>
				nack = reject_ext_ind_send(conn, *rx,
					PDU_DATA_LLCTRL_TYPE_PHY_REQ,
					BT_HCI_ERR_LL_PROC_COLLISION);
#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
#if defined(CONFIG_BT_CTLR_LE_ENC)
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   163b4:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   163b8:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   163bc:	1a9b      	subs	r3, r3, r2
   163be:	f003 0303 	and.w	r3, r3, #3
   163c2:	2b02      	cmp	r3, #2
   163c4:	f000 8640 	beq.w	17048 <ull_conn_rx+0xfe4>
				      0x03) == 0x02) &&
				    (conn->llcp_type !=
				     LLCP_ENCRYPTION)) ||
   163c8:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   163cc:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
   163d0:	429a      	cmp	r2, r3
   163d2:	f000 86bd 	beq.w	17150 <ull_conn_rx+0x10ec>
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   163d6:	232a      	movs	r3, #42	; 0x2a
   163d8:	2216      	movs	r2, #22
   163da:	4639      	mov	r1, r7
   163dc:	4620      	mov	r0, r4
}
   163de:	b003      	add	sp, #12
   163e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   163e4:	f7fe bf4a 	b.w	1527c <reject_ext_ind_send>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   163e8:	7f7a      	ldrb	r2, [r7, #29]
   163ea:	2a01      	cmp	r2, #1
   163ec:	f47f aeb9 	bne.w	16162 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   163f0:	2300      	movs	r3, #0
   163f2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   163f6:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   163f8:	713a      	strb	r2, [r7, #4]
		break;
   163fa:	e680      	b.n	160fe <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   163fc:	7f7d      	ldrb	r5, [r7, #29]
   163fe:	2d01      	cmp	r5, #1
   16400:	f47f aeaf 	bne.w	16162 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16404:	48ac      	ldr	r0, [pc, #688]	; (166b8 <ull_conn_rx+0x654>)
   16406:	f7fa f8d5 	bl	105b4 <mem_acquire>
	if (!tx) {
   1640a:	4601      	mov	r1, r0
   1640c:	2800      	cmp	r0, #0
   1640e:	f000 8459 	beq.w	16cc4 <ull_conn_rx+0xc60>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16412:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   16414:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16416:	f043 0303 	orr.w	r3, r3, #3
   1641a:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   1641c:	2313      	movs	r3, #19
   1641e:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16420:	4620      	mov	r0, r4
   16422:	f7fe ff7b 	bl	1531c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16426:	713d      	strb	r5, [r7, #4]
	return 0;
   16428:	2000      	movs	r0, #0
   1642a:	e668      	b.n	160fe <ull_conn_rx+0x9a>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   1642c:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16430:	2b00      	cmp	r3, #0
   16432:	f6bf ae96 	bge.w	16162 <ull_conn_rx+0xfe>
   16436:	7f7b      	ldrb	r3, [r7, #29]
   16438:	2b05      	cmp	r3, #5
   1643a:	f47f ae92 	bne.w	16162 <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   1643e:	f897 1020 	ldrb.w	r1, [r7, #32]
   16442:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16446:	ea41 0203 	orr.w	r2, r1, r3
   1644a:	f012 0007 	ands.w	r0, r2, #7
   1644e:	f040 8602 	bne.w	17056 <ull_conn_rx+0xff2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   16452:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   16456:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   1645a:	429a      	cmp	r2, r3
   1645c:	f43f ae4c 	beq.w	160f8 <ull_conn_rx+0x94>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   16460:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   16464:	f001 0103 	and.w	r1, r1, #3
   16468:	2902      	cmp	r1, #2
   1646a:	f47f ae45 	bne.w	160f8 <ull_conn_rx+0x94>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1646e:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16472:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16476:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   1647a:	460b      	mov	r3, r1
   1647c:	f361 1306 	bfi	r3, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   16480:	f360 0200 	bfi	r2, r0, #0, #1
   16484:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16488:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		if (!conn->llcp_phy.cmd) {
   1648c:	f012 0204 	ands.w	r2, r2, #4
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16490:	682b      	ldr	r3, [r5, #0]
		conn->procedure_expire = 0U;
   16492:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16496:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   1649a:	f041 8013 	bne.w	174c4 <ull_conn_rx+0x1460>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1649e:	2101      	movs	r1, #1
   164a0:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   164a2:	4610      	mov	r0, r2
   164a4:	e62b      	b.n	160fe <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   164a6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   164aa:	2b00      	cmp	r3, #0
   164ac:	f6bf ae59 	bge.w	16162 <ull_conn_rx+0xfe>
   164b0:	7f7b      	ldrb	r3, [r7, #29]
   164b2:	2b08      	cmp	r3, #8
   164b4:	f47f ae55 	bne.w	16162 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   164b8:	f8b7 5025 	ldrh.w	r5, [r7, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   164bc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   164be:	1aeb      	subs	r3, r5, r3
   164c0:	041e      	lsls	r6, r3, #16
   164c2:	f100 868b 	bmi.w	171dc <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   164c6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   164ca:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   164ce:	1a9b      	subs	r3, r3, r2
   164d0:	f003 0303 	and.w	r3, r3, #3
   164d4:	2b02      	cmp	r3, #2
   164d6:	f000 86bb 	beq.w	17250 <ull_conn_rx+0x11ec>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   164da:	2205      	movs	r2, #5
   164dc:	f107 0120 	add.w	r1, r7, #32
   164e0:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   164e4:	f00d ff0e 	bl	24304 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   164e8:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   164ec:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   164f0:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
   164f4:	f36f 0200 	bfc	r2, #0, #1
   164f8:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
   164fc:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   164fe:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16500:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   16502:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   16506:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	int nack = 0;
   1650a:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1650c:	713a      	strb	r2, [r7, #4]
		if (err) {
   1650e:	e5f6      	b.n	160fe <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   16510:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16514:	2b00      	cmp	r3, #0
   16516:	f6bf ae24 	bge.w	16162 <ull_conn_rx+0xfe>
   1651a:	7f7b      	ldrb	r3, [r7, #29]
   1651c:	2b0c      	cmp	r3, #12
   1651e:	f47f ae20 	bne.w	16162 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   16522:	f8b7 2029 	ldrh.w	r2, [r7, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   16526:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   16528:	1ad3      	subs	r3, r2, r3
   1652a:	041b      	lsls	r3, r3, #16
   1652c:	f100 8656 	bmi.w	171dc <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16530:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16534:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   16538:	1a5b      	subs	r3, r3, r1
   1653a:	f003 0303 	and.w	r3, r3, #3
   1653e:	2b02      	cmp	r3, #2
   16540:	f000 8686 	beq.w	17250 <ull_conn_rx+0x11ec>
	if (!conn_upd_curr) {
   16544:	4b5d      	ldr	r3, [pc, #372]	; (166bc <ull_conn_rx+0x658>)
   16546:	6819      	ldr	r1, [r3, #0]
   16548:	2900      	cmp	r1, #0
   1654a:	f000 86dc 	beq.w	17306 <ull_conn_rx+0x12a2>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   1654e:	f897 3020 	ldrb.w	r3, [r7, #32]
   16552:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   16556:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
   1655a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   1655e:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   16562:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   16566:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
   1656a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   1656e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   16572:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   16576:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   1657a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   1657e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   16582:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   16586:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1658a:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   1658e:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   16592:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   16596:	f023 030f 	bic.w	r3, r3, #15
   1659a:	f043 0308 	orr.w	r3, r3, #8
   1659e:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.ack--;
   165a2:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   165a6:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   165aa:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
	conn->llcp_cu.ack--;
   165ae:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   165b0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
	conn->llcp_cu.ack--;
   165b4:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	link->mem = conn->llcp_rx;
   165b8:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   165ba:	682a      	ldr	r2, [r5, #0]
   165bc:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   165be:	682a      	ldr	r2, [r5, #0]
   165c0:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
	*rx = NULL;
   165c4:	2300      	movs	r3, #0
   165c6:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   165c8:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   165cc:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
   165d0:	4293      	cmp	r3, r2
   165d2:	f43f ae3b 	beq.w	1624c <ull_conn_rx+0x1e8>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   165d6:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   165da:	f003 0307 	and.w	r3, r3, #7
   165de:	2b04      	cmp	r3, #4
   165e0:	f47f ae34 	bne.w	1624c <ull_conn_rx+0x1e8>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   165e4:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
		if (err) {
   165e8:	e630      	b.n	1624c <ull_conn_rx+0x1e8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   165ea:	7f7b      	ldrb	r3, [r7, #29]
   165ec:	2b03      	cmp	r3, #3
   165ee:	f47f adb8 	bne.w	16162 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   165f2:	f897 3020 	ldrb.w	r3, [r7, #32]
   165f6:	3b03      	subs	r3, #3
   165f8:	2b13      	cmp	r3, #19
   165fa:	f63f ad7d 	bhi.w	160f8 <ull_conn_rx+0x94>
   165fe:	a201      	add	r2, pc, #4	; (adr r2, 16604 <ull_conn_rx+0x5a0>)
   16600:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16604:	00016acd 	.word	0x00016acd
   16608:	000160f9 	.word	0x000160f9
   1660c:	000160f9 	.word	0x000160f9
   16610:	000160f9 	.word	0x000160f9
   16614:	000160f9 	.word	0x000160f9
   16618:	000160f9 	.word	0x000160f9
   1661c:	000160f9 	.word	0x000160f9
   16620:	000160f9 	.word	0x000160f9
   16624:	000160f9 	.word	0x000160f9
   16628:	000160f9 	.word	0x000160f9
   1662c:	000160f9 	.word	0x000160f9
   16630:	000160f9 	.word	0x000160f9
   16634:	00016a67 	.word	0x00016a67
   16638:	000160f9 	.word	0x000160f9
   1663c:	000160f9 	.word	0x000160f9
   16640:	000160f9 	.word	0x000160f9
   16644:	000160f9 	.word	0x000160f9
   16648:	000169c9 	.word	0x000169c9
   1664c:	000160f9 	.word	0x000160f9
   16650:	00016a19 	.word	0x00016a19
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   16654:	7f7b      	ldrb	r3, [r7, #29]
   16656:	2b02      	cmp	r3, #2
   16658:	f47f ad83 	bne.w	16162 <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   1665c:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   16660:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   16664:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   16666:	f897 2020 	ldrb.w	r2, [r7, #32]
		} else if ((conn->llcp_conn_param.ack !=
   1666a:	d002      	beq.n	16672 <ull_conn_rx+0x60e>
			    conn->llcp_conn_param.req) &&
   1666c:	2a0f      	cmp	r2, #15
   1666e:	f000 83da 	beq.w	16e26 <ull_conn_rx+0xdc2>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   16672:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   16676:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
   1667a:	4299      	cmp	r1, r3
   1667c:	d002      	beq.n	16684 <ull_conn_rx+0x620>
   1667e:	2a14      	cmp	r2, #20
   16680:	f000 855c 	beq.w	1713c <ull_conn_rx+0x10d8>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   16684:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   16688:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   1668c:	428b      	cmp	r3, r1
   1668e:	d002      	beq.n	16696 <ull_conn_rx+0x632>
   16690:	2a16      	cmp	r2, #22
   16692:	f000 85ab 	beq.w	171ec <ull_conn_rx+0x1188>
			switch (llctrl->unknown_rsp.type) {
   16696:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16698:	bf04      	itt	eq
   1669a:	2301      	moveq	r3, #1
   1669c:	713b      	strbeq	r3, [r7, #4]
				break;
   1669e:	e5d5      	b.n	1624c <ull_conn_rx+0x1e8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   166a0:	7f7b      	ldrb	r3, [r7, #29]
   166a2:	2b02      	cmp	r3, #2
   166a4:	f47f ad5d 	bne.w	16162 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   166a8:	f897 2020 	ldrb.w	r2, [r7, #32]
   166ac:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   166b0:	2301      	movs	r3, #1
	int nack = 0;
   166b2:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   166b4:	713b      	strb	r3, [r7, #4]
}
   166b6:	e522      	b.n	160fe <ull_conn_rx+0x9a>
   166b8:	2000e47c 	.word	0x2000e47c
   166bc:	2000e3f8 	.word	0x2000e3f8
		if (!conn->lll.role ||
   166c0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   166c4:	2b00      	cmp	r3, #0
   166c6:	f6bf ad4c 	bge.w	16162 <ull_conn_rx+0xfe>
   166ca:	7f7d      	ldrb	r5, [r7, #29]
   166cc:	2d01      	cmp	r5, #1
   166ce:	f47f ad48 	bne.w	16162 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   166d2:	48cd      	ldr	r0, [pc, #820]	; (16a08 <ull_conn_rx+0x9a4>)
   166d4:	f7f9 ff6e 	bl	105b4 <mem_acquire>
		if (!tx) {
   166d8:	2800      	cmp	r0, #0
   166da:	f000 82f3 	beq.w	16cc4 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   166de:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   166e2:	f023 0305 	bic.w	r3, r3, #5
   166e6:	f043 0305 	orr.w	r3, r3, #5
   166ea:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   166ee:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   166f2:	f36f 03c3 	bfc	r3, #3, #1
   166f6:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   166fa:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   166fc:	7145      	strb	r5, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   166fe:	f043 0303 	orr.w	r3, r3, #3
   16702:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   16704:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   16708:	220b      	movs	r2, #11
   1670a:	71c2      	strb	r2, [r0, #7]
	if (
   1670c:	2b00      	cmp	r3, #0
   1670e:	f000 8246 	beq.w	16b9e <ull_conn_rx+0xb3a>
	    !conn->llcp_enc.pause_tx &&
   16712:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   16716:	0791      	lsls	r1, r2, #30
   16718:	f100 8241 	bmi.w	16b9e <ull_conn_rx+0xb3a>
	    !conn->llcp_phy.pause_tx &&
   1671c:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   16720:	07d2      	lsls	r2, r2, #31
   16722:	f100 823c 	bmi.w	16b9e <ull_conn_rx+0xb3a>
		if (conn->tx_head == conn->tx_data) {
   16726:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1672a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1672c:	bf04      	itt	eq
   1672e:	681a      	ldreq	r2, [r3, #0]
   16730:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   16734:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   16738:	2a00      	cmp	r2, #0
   1673a:	f000 86de 	beq.w	174fa <ull_conn_rx+0x1496>
	tx->next = conn->tx_ctrl_last->next;
   1673e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   16742:	681a      	ldr	r2, [r3, #0]
   16744:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16746:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   16748:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1674c:	6803      	ldr	r3, [r0, #0]
   1674e:	2b00      	cmp	r3, #0
   16750:	f47f acd2 	bne.w	160f8 <ull_conn_rx+0x94>
   16754:	e532      	b.n	161bc <ull_conn_rx+0x158>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   16756:	7f7b      	ldrb	r3, [r7, #29]
   16758:	2b09      	cmp	r3, #9
   1675a:	f47f ad02 	bne.w	16162 <ull_conn_rx+0xfe>
	       (features[1] << 8) | (features[2] << 16);
   1675e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16762:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16766:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   1676a:	48a8      	ldr	r0, [pc, #672]	; (16a0c <ull_conn_rx+0x9a8>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1676c:	4da8      	ldr	r5, [pc, #672]	; (16a10 <ull_conn_rx+0x9ac>)
	       (features[1] << 8) | (features[2] << 16);
   1676e:	041b      	lsls	r3, r3, #16
   16770:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   16774:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   16776:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   1677a:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   1677c:	4013      	ands	r3, r2
   1677e:	f3c3 0310 	ubfx	r3, r3, #0, #17
   16782:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   16786:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   1678a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   1678e:	f897 3020 	ldrb.w	r3, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   16792:	0412      	lsls	r2, r2, #16
   16794:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16798:	431a      	orrs	r2, r3
	conn->common.fex_valid = 1U;
   1679a:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   1679e:	4302      	orrs	r2, r0
	conn->procedure_expire = 0U;
   167a0:	2300      	movs	r3, #0
	conn->llcp_feature.ack = conn->llcp_feature.req;
   167a2:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
   167a6:	f884 0125 	strb.w	r0, [r4, #293]	; 0x125
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   167aa:	4015      	ands	r5, r2
	conn->common.fex_valid = 1U;
   167ac:	f041 0201 	orr.w	r2, r1, #1
	conn->llcp_feature.features_peer =
   167b0:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   167b4:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	conn->procedure_expire = 0U;
   167b8:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   167bc:	4618      	mov	r0, r3
}
   167be:	e49e      	b.n	160fe <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   167c0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   167c4:	2b00      	cmp	r3, #0
   167c6:	f6bf accc 	bge.w	16162 <ull_conn_rx+0xfe>
   167ca:	7f7e      	ldrb	r6, [r7, #29]
   167cc:	2e09      	cmp	r6, #9
   167ce:	f47f acc8 	bne.w	16162 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   167d2:	488d      	ldr	r0, [pc, #564]	; (16a08 <ull_conn_rx+0x9a4>)
   167d4:	f7f9 feee 	bl	105b4 <mem_acquire>
	if (!tx) {
   167d8:	4605      	mov	r5, r0
   167da:	2800      	cmp	r0, #0
   167dc:	f000 8272 	beq.w	16cc4 <ull_conn_rx+0xc60>
	       (features[1] << 8) | (features[2] << 16);
   167e0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   167e4:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   167e8:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   167ec:	041b      	lsls	r3, r3, #16
   167ee:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   167f2:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   167f6:	4313      	orrs	r3, r2
   167f8:	4a84      	ldr	r2, [pc, #528]	; (16a0c <ull_conn_rx+0x9a8>)
   167fa:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   167fc:	400b      	ands	r3, r1
   167fe:	f3c3 0310 	ubfx	r3, r3, #0, #17
   16802:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   16806:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   1680a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
   1680e:	041b      	lsls	r3, r3, #16
   16810:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16814:	f897 1020 	ldrb.w	r1, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   16818:	430b      	orrs	r3, r1
   1681a:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   1681c:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16820:	497b      	ldr	r1, [pc, #492]	; (16a10 <ull_conn_rx+0x9ac>)
	conn->common.fex_valid = 1U;
   16822:	f042 0201 	orr.w	r2, r2, #1
   16826:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1682a:	7902      	ldrb	r2, [r0, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1682c:	4019      	ands	r1, r3
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1682e:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp_feature.features_peer =
   16832:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16836:	7102      	strb	r2, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   16838:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1683a:	7146      	strb	r6, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   1683c:	71c6      	strb	r6, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1683e:	2100      	movs	r1, #0
   16840:	4410      	add	r0, r2
   16842:	f00d fd8a 	bl	2435a <memset>
	feat_result &= 0xFF;
   16846:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[2] = val >> 16;
   1684a:	2601      	movs	r6, #1
   1684c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	dst[1] = val >> 8;
   16850:	2241      	movs	r2, #65	; 0x41
	ctrl_tx_sec_enqueue(conn, tx);
   16852:	4620      	mov	r0, r4
   16854:	726a      	strb	r2, [r5, #9]
	dst[0] = val;
   16856:	722b      	strb	r3, [r5, #8]
	dst[2] = val >> 16;
   16858:	72ae      	strb	r6, [r5, #10]
   1685a:	4629      	mov	r1, r5
   1685c:	f7fe fd5e 	bl	1531c <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16860:	713e      	strb	r6, [r7, #4]
	return 0;
   16862:	2000      	movs	r0, #0
   16864:	e44b      	b.n	160fe <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   16866:	7f7b      	ldrb	r3, [r7, #29]
   16868:	2b02      	cmp	r3, #2
   1686a:	f47f ac7a 	bne.w	16162 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   1686e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   16872:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   16876:	4293      	cmp	r3, r2
   16878:	d004      	beq.n	16884 <ull_conn_rx+0x820>
   1687a:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1687e:	2b03      	cmp	r3, #3
   16880:	f000 84d8 	beq.w	17234 <ull_conn_rx+0x11d0>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16884:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
   16888:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   1688c:	4293      	cmp	r3, r2
   1688e:	f000 821d 	beq.w	16ccc <ull_conn_rx+0xc68>
		rej_ext_ind->error_code = rej_ind->error_code;
   16892:	f897 1020 	ldrb.w	r1, [r7, #32]
   16896:	f887 1021 	strb.w	r1, [r7, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1689a:	2923      	cmp	r1, #35	; 0x23
   1689c:	d012      	beq.n	168c4 <ull_conn_rx+0x860>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1689e:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   168a2:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   168a6:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   168aa:	f36f 0200 	bfc	r2, #0, #1
   168ae:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   168b2:	2200      	movs	r2, #0
   168b4:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   168b8:	f3c3 0202 	ubfx	r2, r3, #0, #3
   168bc:	f362 1306 	bfi	r3, r2, #4, #3
   168c0:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (!conn->llcp_phy.cmd) {
   168c4:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   168c8:	0758      	lsls	r0, r3, #29
   168ca:	f57f ac15 	bpl.w	160f8 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   168ce:	2319      	movs	r3, #25
   168d0:	713b      	strb	r3, [r7, #4]
	p->status = rej_ext_ind->error_code;
   168d2:	7739      	strb	r1, [r7, #28]
	p->tx = conn->lll.phy_tx;
   168d4:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   168d8:	f3c3 0302 	ubfx	r3, r3, #0, #3
   168dc:	777b      	strb	r3, [r7, #29]
	p->rx = conn->lll.phy_rx;
   168de:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   168e2:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   168e6:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   168e8:	77bb      	strb	r3, [r7, #30]
	if (err) {
   168ea:	e408      	b.n	160fe <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   168ec:	7f7d      	ldrb	r5, [r7, #29]
   168ee:	2d06      	cmp	r5, #6
   168f0:	f47f ac37 	bne.w	16162 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   168f4:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   168f8:	07de      	lsls	r6, r3, #31
   168fa:	f140 8375 	bpl.w	16fe8 <ull_conn_rx+0xf84>
	} else if (!conn->llcp_version.rx) {
   168fe:	f013 0302 	ands.w	r3, r3, #2
   16902:	f47f abf9 	bne.w	160f8 <ull_conn_rx+0x94>
		conn->llcp_version.ack = conn->llcp_version.req;
   16906:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
   1690a:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
		conn->procedure_expire = 0U;
   1690e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	conn->llcp_version.version_number = v->version_number;
   16912:	f897 3020 	ldrb.w	r3, [r7, #32]
   16916:	f884 3133 	strb.w	r3, [r4, #307]	; 0x133
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   1691a:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
   1691e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   16922:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16926:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   1692a:	f8a4 2134 	strh.w	r2, [r4, #308]	; 0x134
		sys_le16_to_cpu(v->sub_version_number);
   1692e:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   16932:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   16936:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   1693a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   1693e:	f8a4 2136 	strh.w	r2, [r4, #310]	; 0x136
	conn->llcp_version.rx = 1U;
   16942:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	return 0;
   16946:	2000      	movs	r0, #0
   16948:	f7ff bbd9 	b.w	160fe <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   1694c:	7f7b      	ldrb	r3, [r7, #29]
   1694e:	2b18      	cmp	r3, #24
   16950:	f47f ac07 	bne.w	16162 <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   16954:	4e2f      	ldr	r6, [pc, #188]	; (16a14 <ull_conn_rx+0x9b0>)
   16956:	6833      	ldr	r3, [r6, #0]
   16958:	2b00      	cmp	r3, #0
   1695a:	f000 80f7 	beq.w	16b4c <ull_conn_rx+0xae8>
   1695e:	429c      	cmp	r4, r3
   16960:	f000 80f4 	beq.w	16b4c <ull_conn_rx+0xae8>
			nack = reject_ext_ind_send(conn, *rx,
   16964:	2320      	movs	r3, #32
   16966:	220f      	movs	r2, #15
   16968:	e537      	b.n	163da <ull_conn_rx+0x376>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   1696a:	7f7b      	ldrb	r3, [r7, #29]
   1696c:	2b01      	cmp	r3, #1
   1696e:	f47f abf8 	bne.w	16162 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   16972:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16976:	2b00      	cmp	r3, #0
   16978:	f2c0 80e0 	blt.w	16b3c <ull_conn_rx+0xad8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1697c:	4822      	ldr	r0, [pc, #136]	; (16a08 <ull_conn_rx+0x9a4>)
   1697e:	f7f9 fe19 	bl	105b4 <mem_acquire>
		if (!tx) {
   16982:	2800      	cmp	r0, #0
   16984:	f000 819e 	beq.w	16cc4 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   16988:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   1698c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   16990:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   16994:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   16998:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1699c:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   1699e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   169a2:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   169a4:	7142      	strb	r2, [r0, #5]
   169a6:	e6aa      	b.n	166fe <ull_conn_rx+0x69a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   169a8:	7f7b      	ldrb	r3, [r7, #29]
   169aa:	2b01      	cmp	r3, #1
   169ac:	f47f abd9 	bne.w	16162 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   169b0:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   169b4:	2b00      	cmp	r3, #0
   169b6:	f6ff ac30 	blt.w	1621a <ull_conn_rx+0x1b6>
			conn->llcp_enc.pause_rx = 0U;
   169ba:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   169be:	f022 0203 	bic.w	r2, r2, #3
   169c2:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
   169c6:	e439      	b.n	1623c <ull_conn_rx+0x1d8>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   169c8:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   169cc:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
   169d0:	4293      	cmp	r3, r2
   169d2:	f43f ab91 	beq.w	160f8 <ull_conn_rx+0x94>
	conn->procedure_expire = 0U;
   169d6:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   169d8:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   169da:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
	conn->procedure_expire = 0U;
   169de:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   169e2:	7779      	strb	r1, [r7, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   169e4:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   169e8:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   169ec:	843a      	strh	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   169ee:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   169f0:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   169f4:	77f9      	strb	r1, [r7, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   169f6:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   169fa:	8479      	strh	r1, [r7, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   169fc:	84b8      	strh	r0, [r7, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   169fe:	84fa      	strh	r2, [r7, #38]	; 0x26
	int nack = 0;
   16a00:	4618      	mov	r0, r3
   16a02:	f7ff bb7c 	b.w	160fe <ull_conn_rx+0x9a>
   16a06:	bf00      	nop
   16a08:	2000e47c 	.word	0x2000e47c
   16a0c:	fffe30d0 	.word	0xfffe30d0
   16a10:	0001ff7f 	.word	0x0001ff7f
   16a14:	2000e3f8 	.word	0x2000e3f8
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16a18:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   16a1c:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   16a20:	428b      	cmp	r3, r1
   16a22:	f43f ab69 	beq.w	160f8 <ull_conn_rx+0x94>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16a26:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16a2a:	2a23      	cmp	r2, #35	; 0x23
   16a2c:	d012      	beq.n	16a54 <ull_conn_rx+0x9f0>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16a2e:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   16a32:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16a36:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16a3a:	f36f 0100 	bfc	r1, #0, #1
   16a3e:	f884 11b7 	strb.w	r1, [r4, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   16a42:	2100      	movs	r1, #0
   16a44:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16a48:	f3c3 0102 	ubfx	r1, r3, #0, #3
   16a4c:	f361 1306 	bfi	r3, r1, #4, #3
   16a50:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (!conn->llcp_phy.cmd) {
   16a54:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   16a58:	075e      	lsls	r6, r3, #29
   16a5a:	f57f ab4d 	bpl.w	160f8 <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16a5e:	2319      	movs	r3, #25
   16a60:	713b      	strb	r3, [r7, #4]
	p->status = rej_ext_ind->error_code;
   16a62:	773a      	strb	r2, [r7, #28]
   16a64:	e736      	b.n	168d4 <ull_conn_rx+0x870>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16a66:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   16a6a:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   16a6e:	429a      	cmp	r2, r3
   16a70:	f43f ab42 	beq.w	160f8 <ull_conn_rx+0x94>
	if (!lll->role && (rej_ext_ind->error_code ==
   16a74:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16a78:	2a00      	cmp	r2, #0
   16a7a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16a7e:	f2c0 8565 	blt.w	1754c <ull_conn_rx+0x14e8>
   16a82:	2a1a      	cmp	r2, #26
   16a84:	f000 8588 	beq.w	17598 <ull_conn_rx+0x1534>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16a88:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16a8c:	f002 0107 	and.w	r1, r2, #7
   16a90:	2904      	cmp	r1, #4
   16a92:	f000 8564 	beq.w	1755e <ull_conn_rx+0x14fa>
	if (!conn->llcp_conn_param.cmd) {
   16a96:	0715      	lsls	r5, r2, #28
   16a98:	f57f ab2e 	bpl.w	160f8 <ull_conn_rx+0x94>
	cu->status = rej_ext_ind->error_code;
   16a9c:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16aa0:	773b      	strb	r3, [r7, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16aa2:	2215      	movs	r2, #21
   16aa4:	713a      	strb	r2, [r7, #4]
	cu->interval = lll->interval;
   16aa6:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   16aa8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
   16aac:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   16aae:	8439      	strh	r1, [r7, #32]
		      lll->interval * 125U / 1000;
   16ab0:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   16ab2:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   16ab6:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   16aba:	83fa      	strh	r2, [r7, #30]
		      lll->interval * 125U / 1000;
   16abc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16ac0:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   16ac4:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   16ac6:	847b      	strh	r3, [r7, #34]	; 0x22
	if (err) {
   16ac8:	f7ff bb19 	b.w	160fe <ull_conn_rx+0x9a>
		if ((conn->llcp_ack != conn->llcp_req) &&
   16acc:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   16ad0:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   16ad4:	428b      	cmp	r3, r1
   16ad6:	f43f ab0f 	beq.w	160f8 <ull_conn_rx+0x94>
   16ada:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16ade:	2b03      	cmp	r3, #3
   16ae0:	f47f ab0a 	bne.w	160f8 <ull_conn_rx+0x94>
	conn->llcp_enc.pause_rx = 0U;
   16ae4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   16ae8:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   16aec:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   16aee:	f022 0203 	bic.w	r2, r2, #3
   16af2:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	conn->procedure_expire = 0U;
   16af6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   16afa:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16afe:	f887 2020 	strb.w	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16b02:	210d      	movs	r1, #13
   16b04:	77f9      	strb	r1, [r7, #31]
	int nack = 0;
   16b06:	4618      	mov	r0, r3
   16b08:	f7ff baf9 	b.w	160fe <ull_conn_rx+0x9a>
			tx->next = conn->tx_head;
   16b0c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16b0e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16b12:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   16b16:	2b00      	cmp	r3, #0
   16b18:	f47f aaee 	bne.w	160f8 <ull_conn_rx+0x94>
   16b1c:	f7ff bb4e 	b.w	161bc <ull_conn_rx+0x158>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16b20:	7f7b      	ldrb	r3, [r7, #29]
   16b22:	2b01      	cmp	r3, #1
   16b24:	f47f ab1d 	bne.w	16162 <ull_conn_rx+0xfe>
   16b28:	e747      	b.n	169ba <ull_conn_rx+0x956>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16b2a:	7f7b      	ldrb	r3, [r7, #29]
   16b2c:	2b01      	cmp	r3, #1
   16b2e:	f47f ab18 	bne.w	16162 <ull_conn_rx+0xfe>
   16b32:	e723      	b.n	1697c <ull_conn_rx+0x918>
   16b34:	7f7b      	ldrb	r3, [r7, #29]
   16b36:	2b01      	cmp	r3, #1
   16b38:	f47f ab13 	bne.w	16162 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   16b3c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   16b40:	f36f 1304 	bfc	r3, #4, #1
   16b44:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   16b48:	f7ff bad6 	b.w	160f8 <ull_conn_rx+0x94>
		if (!conn->lll.role) {
   16b4c:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
					conn->llcp_conn_param.ack) &&
   16b50:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
		if (!conn->lll.role) {
   16b54:	2900      	cmp	r1, #0
   16b56:	f2c0 809b 	blt.w	16c90 <ull_conn_rx+0xc2c>
			if ((conn->llcp_conn_param.req !=
   16b5a:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   16b5e:	4281      	cmp	r1, r0
   16b60:	d009      	beq.n	16b76 <ull_conn_rx+0xb12>
			    ((conn->llcp_conn_param.state ==
   16b62:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
					conn->llcp_conn_param.ack) &&
   16b66:	f011 0107 	ands.w	r1, r1, #7
   16b6a:	f000 82e1 	beq.w	17130 <ull_conn_rx+0x10cc>
			      LLCP_CPR_STATE_REQ) ||
   16b6e:	3904      	subs	r1, #4
   16b70:	2901      	cmp	r1, #1
   16b72:	f240 82dd 	bls.w	17130 <ull_conn_rx+0x10cc>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   16b76:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   16b7a:	f894 50e9 	ldrb.w	r5, [r4, #233]	; 0xe9
   16b7e:	1b49      	subs	r1, r1, r5
   16b80:	f001 0103 	and.w	r1, r1, #3
   16b84:	2902      	cmp	r1, #2
   16b86:	f000 83c4 	beq.w	17312 <ull_conn_rx+0x12ae>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   16b8a:	f894 51b4 	ldrb.w	r5, [r4, #436]	; 0x1b4
   16b8e:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
   16b92:	428d      	cmp	r5, r1
   16b94:	f000 83e6 	beq.w	17364 <ull_conn_rx+0x1300>
				nack = reject_ext_ind_send(conn, *rx,
   16b98:	232a      	movs	r3, #42	; 0x2a
   16b9a:	220f      	movs	r2, #15
   16b9c:	e41d      	b.n	163da <ull_conn_rx+0x376>
		if (!conn->tx_ctrl) {
   16b9e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   16ba2:	2a00      	cmp	r2, #0
   16ba4:	f47f adcb 	bne.w	1673e <ull_conn_rx+0x6da>
			tx->next = conn->tx_head;
   16ba8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16baa:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16bae:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   16bb2:	e5cb      	b.n	1674c <ull_conn_rx+0x6e8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16bb4:	48c1      	ldr	r0, [pc, #772]	; (16ebc <ull_conn_rx+0xe58>)
   16bb6:	f7f9 fcfd 	bl	105b4 <mem_acquire>
		if (!tx) {
   16bba:	4603      	mov	r3, r0
   16bbc:	2800      	cmp	r0, #0
   16bbe:	f000 8081 	beq.w	16cc4 <ull_conn_rx+0xc60>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16bc2:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   16bc6:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   16bca:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   16bce:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   16bd2:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   16bd6:	f8b4 a060 	ldrh.w	sl, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   16bda:	428a      	cmp	r2, r1
   16bdc:	f040 854f 	bne.w	1767e <ull_conn_rx+0x161a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   16be0:	8c39      	ldrh	r1, [r7, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16be2:	291a      	cmp	r1, #26
   16be4:	f240 82a8 	bls.w	17138 <ull_conn_rx+0x10d4>
			eff_tx_octets = MIN(max_rx_octets,
   16be8:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
   16bec:	4281      	cmp	r1, r0
   16bee:	bf28      	it	cs
   16bf0:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16bf2:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   16bf4:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   16bf8:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   16bfa:	8c78      	ldrh	r0, [r7, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   16bfc:	bf34      	ite	cc
   16bfe:	46e0      	movcc	r8, ip
   16c00:	f04f 081b 	movcs.w	r8, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   16c04:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   16c08:	bf34      	ite	cc
   16c0a:	4650      	movcc	r0, sl
   16c0c:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   16c10:	f5be 7fa4 	cmp.w	lr, #328	; 0x148
   16c14:	bf34      	ite	cc
   16c16:	46ce      	movcc	lr, r9
   16c18:	f44f 7ea4 	movcs.w	lr, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   16c1c:	45e0      	cmp	r8, ip
   16c1e:	f000 831b 	beq.w	17258 <ull_conn_rx+0x11f4>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   16c22:	3a01      	subs	r2, #1
   16c24:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
			conn->llcp_length.rx_octets = eff_rx_octets;
   16c28:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
			conn->llcp_length.tx_octets = eff_tx_octets;
   16c2c:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
			conn->llcp_length.rx_time = eff_rx_time;
   16c30:	f8a4 e1ac 	strh.w	lr, [r4, #428]	; 0x1ac
			conn->llcp_length.tx_time = eff_tx_time;
   16c34:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
			if (tx) {
   16c38:	2b00      	cmp	r3, #0
   16c3a:	f000 8370 	beq.w	1731e <ull_conn_rx+0x12ba>
				conn->llcp_length.state =
   16c3e:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
   16c42:	2705      	movs	r7, #5
   16c44:	f367 0202 	bfi	r2, r7, #0, #3
   16c48:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
			link->mem = conn->llcp_rx;
   16c4c:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16c50:	6072      	str	r2, [r6, #4]
			(*rx)->hdr.link = link;
   16c52:	682a      	ldr	r2, [r5, #0]
   16c54:	6016      	str	r6, [r2, #0]
			conn->llcp_rx = *rx;
   16c56:	682a      	ldr	r2, [r5, #0]
   16c58:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
			*rx = NULL;
   16c5c:	2200      	movs	r2, #0
   16c5e:	602a      	str	r2, [r5, #0]
	if (tx) {
   16c60:	2b00      	cmp	r3, #0
   16c62:	f43f aa4b 	beq.w	160fc <ull_conn_rx+0x98>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16c66:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16c68:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16c6a:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   16c6e:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16c70:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16c72:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16c74:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   16c76:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   16c78:	f8a3 8008 	strh.w	r8, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16c7c:	f8a3 e00a 	strh.w	lr, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   16c80:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16c82:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16c84:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16c86:	f7fe fb49 	bl	1531c <ctrl_tx_sec_enqueue>
	return 0;
   16c8a:	2000      	movs	r0, #0
}
   16c8c:	f7ff ba37 	b.w	160fe <ull_conn_rx+0x9a>
		} else if ((conn->llcp_conn_param.req ==
   16c90:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   16c94:	4282      	cmp	r2, r0
   16c96:	f000 811f 	beq.w	16ed8 <ull_conn_rx+0xe74>
			    conn->llcp_conn_param.ack) ||
   16c9a:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16c9e:	0792      	lsls	r2, r2, #30
   16ca0:	f000 811a 	beq.w	16ed8 <ull_conn_rx+0xe74>
			LL_ASSERT(0);
   16ca4:	4a86      	ldr	r2, [pc, #536]	; (16ec0 <ull_conn_rx+0xe5c>)
   16ca6:	4987      	ldr	r1, [pc, #540]	; (16ec4 <ull_conn_rx+0xe60>)
   16ca8:	4887      	ldr	r0, [pc, #540]	; (16ec8 <ull_conn_rx+0xe64>)
   16caa:	f241 73de 	movw	r3, #6110	; 0x17de
   16cae:	f00a fe87 	bl	219c0 <printk>
   16cb2:	4040      	eors	r0, r0
   16cb4:	f380 8811 	msr	BASEPRI, r0
   16cb8:	f04f 0003 	mov.w	r0, #3
   16cbc:	df02      	svc	2
	int nack = 0;
   16cbe:	2000      	movs	r0, #0
   16cc0:	f7ff ba1d 	b.w	160fe <ull_conn_rx+0x9a>
		return -ENOBUFS;
   16cc4:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16cc8:	f7ff ba19 	b.w	160fe <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16ccc:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   16cd0:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   16cd4:	429a      	cmp	r2, r3
   16cd6:	f43f ae77 	beq.w	169c8 <ull_conn_rx+0x964>
		rej_ext_ind->error_code = rej_ind->error_code;
   16cda:	f897 3020 	ldrb.w	r3, [r7, #32]
   16cde:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   16ce2:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16ce6:	2a00      	cmp	r2, #0
   16ce8:	f2c0 8329 	blt.w	1733e <ull_conn_rx+0x12da>
   16cec:	2b1a      	cmp	r3, #26
   16cee:	f000 8453 	beq.w	17598 <ull_conn_rx+0x1534>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16cf2:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16cf6:	f002 0307 	and.w	r3, r2, #7
   16cfa:	2b04      	cmp	r3, #4
   16cfc:	f47f aecb 	bne.w	16a96 <ull_conn_rx+0xa32>
		LL_ASSERT(conn_upd_curr == conn);
   16d00:	4e72      	ldr	r6, [pc, #456]	; (16ecc <ull_conn_rx+0xe68>)
   16d02:	6833      	ldr	r3, [r6, #0]
   16d04:	429c      	cmp	r4, r3
   16d06:	d00e      	beq.n	16d26 <ull_conn_rx+0xcc2>
   16d08:	4a6d      	ldr	r2, [pc, #436]	; (16ec0 <ull_conn_rx+0xe5c>)
   16d0a:	4971      	ldr	r1, [pc, #452]	; (16ed0 <ull_conn_rx+0xe6c>)
   16d0c:	486e      	ldr	r0, [pc, #440]	; (16ec8 <ull_conn_rx+0xe64>)
   16d0e:	f241 13ba 	movw	r3, #4538	; 0x11ba
   16d12:	f00a fe55 	bl	219c0 <printk>
   16d16:	4040      	eors	r0, r0
   16d18:	f380 8811 	msr	BASEPRI, r0
   16d1c:	f04f 0003 	mov.w	r0, #3
   16d20:	df02      	svc	2
   16d22:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16d26:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   16d2a:	f884 117d 	strb.w	r1, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   16d2e:	2300      	movs	r3, #0
   16d30:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   16d32:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   16d36:	e6ae      	b.n	16a96 <ull_conn_rx+0xa32>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16d38:	4860      	ldr	r0, [pc, #384]	; (16ebc <ull_conn_rx+0xe58>)
   16d3a:	f7f9 fc3b 	bl	105b4 <mem_acquire>
	if (!tx) {
   16d3e:	4602      	mov	r2, r0
   16d40:	2800      	cmp	r0, #0
   16d42:	d0bf      	beq.n	16cc4 <ull_conn_rx+0xc60>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16d44:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   16d48:	2102      	movs	r1, #2
   16d4a:	f361 0301 	bfi	r3, r1, #0, #2
   16d4e:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   16d52:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
   16d56:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   16d5a:	428b      	cmp	r3, r1
   16d5c:	d115      	bne.n	16d8a <ull_conn_rx+0xd26>
		conn->llcp_phy.ack--;
   16d5e:	3b01      	subs	r3, #1
   16d60:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
		conn->llcp_phy.tx =
   16d64:	f8b4 31b6 	ldrh.w	r3, [r4, #438]	; 0x1b6
			conn->phy_pref_rx;
   16d68:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
		conn->llcp_phy.tx =
   16d6c:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   16d70:	f240 43fc 	movw	r3, #1276	; 0x4fc
   16d74:	f021 0104 	bic.w	r1, r1, #4
   16d78:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   16d7c:	430b      	orrs	r3, r1
		conn->procedure_expire =
   16d7e:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
		conn->llcp_phy.tx =
   16d82:	f8a4 31b6 	strh.w	r3, [r4, #438]	; 0x1b6
		conn->procedure_expire =
   16d86:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
	conn->llcp_phy.rx &= p->tx_phys;
   16d8a:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
   16d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
   16d92:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   16d96:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16d9a:	f3c1 0582 	ubfx	r5, r1, #2, #3
   16d9e:	402b      	ands	r3, r5
   16da0:	009b      	lsls	r3, r3, #2
   16da2:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   16da6:	f001 0103 	and.w	r1, r1, #3
   16daa:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16dac:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   16dae:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16db2:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16db4:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16db8:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16dba:	4603      	mov	r3, r0
   16dbc:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16dc0:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   16dc2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16dc6:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16dca:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16dcc:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16dd0:	71d5      	strb	r5, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16dd2:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16dd4:	7111      	strb	r1, [r2, #4]
	if (
   16dd6:	2b00      	cmp	r3, #0
   16dd8:	f000 812b 	beq.w	17032 <ull_conn_rx+0xfce>
	    !conn->llcp_enc.pause_tx &&
   16ddc:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   16de0:	0788      	lsls	r0, r1, #30
   16de2:	f100 8126 	bmi.w	17032 <ull_conn_rx+0xfce>
	    !conn->llcp_phy.pause_tx &&
   16de6:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   16dea:	07c9      	lsls	r1, r1, #31
   16dec:	f100 8121 	bmi.w	17032 <ull_conn_rx+0xfce>
		if (conn->tx_head == conn->tx_data) {
   16df0:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   16df4:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   16df6:	bf04      	itt	eq
   16df8:	6819      	ldreq	r1, [r3, #0]
   16dfa:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   16dfe:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   16e02:	2900      	cmp	r1, #0
   16e04:	f000 8380 	beq.w	17508 <ull_conn_rx+0x14a4>
	tx->next = conn->tx_ctrl_last->next;
   16e08:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   16e0c:	6819      	ldr	r1, [r3, #0]
   16e0e:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   16e10:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   16e12:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
	if (!tx->next) {
   16e16:	6813      	ldr	r3, [r2, #0]
   16e18:	2b00      	cmp	r3, #0
   16e1a:	f47f a96d 	bne.w	160f8 <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   16e1e:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16e22:	f7ff b969 	b.w	160f8 <ull_conn_rx+0x94>
			conn->llcp_conn_param.disabled = 1U;
   16e26:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16e2a:	f042 0210 	orr.w	r2, r2, #16
   16e2e:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
			if (!conn->lll.role) {
   16e32:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16e36:	2a00      	cmp	r2, #0
   16e38:	f2c0 8234 	blt.w	172a4 <ull_conn_rx+0x1240>
				LL_ASSERT(conn->llcp_cu.req ==
   16e3c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   16e40:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   16e44:	429a      	cmp	r2, r3
   16e46:	d00e      	beq.n	16e66 <ull_conn_rx+0xe02>
   16e48:	4a1d      	ldr	r2, [pc, #116]	; (16ec0 <ull_conn_rx+0xe5c>)
   16e4a:	4922      	ldr	r1, [pc, #136]	; (16ed4 <ull_conn_rx+0xe70>)
   16e4c:	481e      	ldr	r0, [pc, #120]	; (16ec8 <ull_conn_rx+0xe64>)
   16e4e:	f641 0364 	movw	r3, #6244	; 0x1864
   16e52:	f00a fdb5 	bl	219c0 <printk>
   16e56:	4040      	eors	r0, r0
   16e58:	f380 8811 	msr	BASEPRI, r0
   16e5c:	f04f 0003 	mov.w	r0, #3
   16e60:	df02      	svc	2
   16e62:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
				conn->llcp_conn_param.state =
   16e66:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16e6a:	2105      	movs	r1, #5
   16e6c:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   16e70:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   16e72:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   16e74:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
				conn->llcp_cu.win_size = 1U;
   16e78:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16e7c:	682d      	ldr	r5, [r5, #0]
				conn->llcp_conn_param.state =
   16e7e:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16e82:	f002 0308 	and.w	r3, r2, #8
   16e86:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
   16e8a:	430b      	orrs	r3, r1
   16e8c:	f022 020f 	bic.w	r2, r2, #15
   16e90:	4313      	orrs	r3, r2
   16e92:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.latency =
   16e96:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
				conn->llcp_cu.interval =
   16e9a:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
				conn->llcp_cu.latency =
   16e9e:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
				conn->llcp_cu.win_offset_us = 0U;
   16ea2:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   16ea4:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
				conn->llcp_cu.interval =
   16ea8:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
				conn->llcp_cu.timeout =
   16eac:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
				conn->llcp_cu.win_offset_us = 0U;
   16eb0:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16eb4:	7129      	strb	r1, [r5, #4]
				break;
   16eb6:	f7ff b922 	b.w	160fe <ull_conn_rx+0x9a>
   16eba:	bf00      	nop
   16ebc:	2000e47c 	.word	0x2000e47c
   16ec0:	00028760 	.word	0x00028760
   16ec4:	0002833c 	.word	0x0002833c
   16ec8:	000282a4 	.word	0x000282a4
   16ecc:	2000e3f8 	.word	0x2000e3f8
   16ed0:	000288d4 	.word	0x000288d4
   16ed4:	000288ac 	.word	0x000288ac
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   16ed8:	f8b7 a020 	ldrh.w	sl, [r7, #32]
   16edc:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16ee0:	2a05      	cmp	r2, #5
   16ee2:	d97d      	bls.n	16fe0 <ull_conn_rx+0xf7c>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   16ee4:	f8b7 9022 	ldrh.w	r9, [r7, #34]	; 0x22
   16ee8:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   16eec:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   16ef0:	d876      	bhi.n	16fe0 <ull_conn_rx+0xf7c>
			    (interval_max > 3200) ||
   16ef2:	428a      	cmp	r2, r1
   16ef4:	d874      	bhi.n	16fe0 <ull_conn_rx+0xf7c>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   16ef6:	f8b7 8024 	ldrh.w	r8, [r7, #36]	; 0x24
   16efa:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   16efe:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   16f02:	d26d      	bcs.n	16fe0 <ull_conn_rx+0xf7c>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   16f04:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
   16f08:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   16f0c:	f1a2 050a 	sub.w	r5, r2, #10
   16f10:	f640 4b76 	movw	fp, #3190	; 0xc76
   16f14:	b2ad      	uxth	r5, r5
   16f16:	455d      	cmp	r5, fp
   16f18:	d862      	bhi.n	16fe0 <ull_conn_rx+0xf7c>
			     ((latency + 1) * interval_max)) ||
   16f1a:	f10c 0501 	add.w	r5, ip, #1
   16f1e:	b2ad      	uxth	r5, r5
   16f20:	fb01 f505 	mul.w	r5, r1, r5
			    (timeout < 10) || (timeout > 3200) ||
   16f24:	ebb5 0f82 	cmp.w	r5, r2, lsl #2
   16f28:	d25a      	bcs.n	16fe0 <ull_conn_rx+0xf7c>
			     ((latency + 1) * interval_max)) ||
   16f2a:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   16f2e:	4559      	cmp	r1, fp
   16f30:	d356      	bcc.n	16fe0 <ull_conn_rx+0xf7c>
			conn->llcp_conn_param.interval_min = interval_min;
   16f32:	f8a4 a180 	strh.w	sl, [r4, #384]	; 0x180
			conn->llcp_conn_param.interval_max = interval_max;
   16f36:	f8a4 9182 	strh.w	r9, [r4, #386]	; 0x182
			conn->llcp_conn_param.latency =	latency;
   16f3a:	f8a4 8184 	strh.w	r8, [r4, #388]	; 0x184
			conn->llcp_conn_param.timeout =	timeout;
   16f3e:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
			conn->llcp_conn_param.preferred_periodicity =
   16f42:	f884 b188 	strb.w	fp, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   16f46:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
   16f4a:	f897 5029 	ldrb.w	r5, [r7, #41]	; 0x29
   16f4e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   16f52:	f8a4 518a 	strh.w	r5, [r4, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset0);
   16f56:	f897 e02c 	ldrb.w	lr, [r7, #44]	; 0x2c
   16f5a:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
   16f5e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   16f62:	f8a4 518c 	strh.w	r5, [r4, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset1);
   16f66:	f897 e02e 	ldrb.w	lr, [r7, #46]	; 0x2e
   16f6a:	f897 502d 	ldrb.w	r5, [r7, #45]	; 0x2d
   16f6e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   16f72:	f8a4 518e 	strh.w	r5, [r4, #398]	; 0x18e
				sys_le16_to_cpu(cpr->offset2);
   16f76:	f897 e030 	ldrb.w	lr, [r7, #48]	; 0x30
   16f7a:	f897 502f 	ldrb.w	r5, [r7, #47]	; 0x2f
   16f7e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   16f82:	f8a4 5190 	strh.w	r5, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->offset3);
   16f86:	f897 e032 	ldrb.w	lr, [r7, #50]	; 0x32
   16f8a:	f897 5031 	ldrb.w	r5, [r7, #49]	; 0x31
   16f8e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   16f92:	f8a4 5192 	strh.w	r5, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset4);
   16f96:	f897 e034 	ldrb.w	lr, [r7, #52]	; 0x34
   16f9a:	f897 5033 	ldrb.w	r5, [r7, #51]	; 0x33
   16f9e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   16fa2:	f8a4 5194 	strh.w	r5, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset5);
   16fa6:	f897 5035 	ldrb.w	r5, [r7, #53]	; 0x35
   16faa:	f897 e036 	ldrb.w	lr, [r7, #54]	; 0x36
   16fae:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   16fb2:	f8a4 5196 	strh.w	r5, [r4, #406]	; 0x196
			     lll->interval) ||
   16fb6:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   16fb8:	42a9      	cmp	r1, r5
   16fba:	f000 834a 	beq.w	17652 <ull_conn_rx+0x15ee>
				conn->llcp_conn_param.state =
   16fbe:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16fc2:	2103      	movs	r1, #3
   16fc4:	f361 0202 	bfi	r2, r1, #0, #3
   16fc8:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
			conn->llcp_conn_param.ack--;
   16fcc:	3801      	subs	r0, #1
   16fce:	f884 017d 	strb.w	r0, [r4, #381]	; 0x17d
			if (!conn_upd_curr) {
   16fd2:	2b00      	cmp	r3, #0
   16fd4:	f47f a892 	bne.w	160fc <ull_conn_rx+0x98>
				conn_upd_curr = conn;
   16fd8:	6034      	str	r4, [r6, #0]
	int nack = 0;
   16fda:	4618      	mov	r0, r3
   16fdc:	f7ff b88f 	b.w	160fe <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   16fe0:	231e      	movs	r3, #30
   16fe2:	220f      	movs	r2, #15
   16fe4:	f7ff b9f9 	b.w	163da <ull_conn_rx+0x376>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16fe8:	48d9      	ldr	r0, [pc, #868]	; (17350 <ull_conn_rx+0x12ec>)
   16fea:	f7f9 fae3 	bl	105b4 <mem_acquire>
		if (!tx) {
   16fee:	4601      	mov	r1, r0
   16ff0:	2800      	cmp	r0, #0
   16ff2:	f43f ae67 	beq.w	16cc4 <ull_conn_rx+0xc60>
		conn->llcp_version.tx = 1U;
   16ff6:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   16ffa:	f043 0301 	orr.w	r3, r3, #1
   16ffe:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17002:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17004:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17006:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   17008:	220b      	movs	r2, #11
   1700a:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1700c:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17010:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17014:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17016:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   17018:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1701c:	2205      	movs	r2, #5
		v->sub_version_number =
   1701e:	72c3      	strb	r3, [r0, #11]
   17020:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   17022:	7145      	strb	r5, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17024:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   17026:	4620      	mov	r0, r4
   17028:	f7fe f978 	bl	1531c <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1702c:	2301      	movs	r3, #1
   1702e:	713b      	strb	r3, [r7, #4]
   17030:	e46f      	b.n	16912 <ull_conn_rx+0x8ae>
		if (!conn->tx_ctrl) {
   17032:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   17036:	2900      	cmp	r1, #0
   17038:	f47f aee6 	bne.w	16e08 <ull_conn_rx+0xda4>
			tx->next = conn->tx_head;
   1703c:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   1703e:	e9c4 226f 	strd	r2, r2, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17042:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
   17046:	e6e6      	b.n	16e16 <ull_conn_rx+0xdb2>
				      0x03) == 0x02) &&
   17048:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1704c:	2b03      	cmp	r3, #3
   1704e:	f47f a9c2 	bne.w	163d6 <ull_conn_rx+0x372>
   17052:	f7ff b9b9 	b.w	163c8 <ull_conn_rx+0x364>
	instant = sys_le16_to_cpu(ind->instant);
   17056:	8c78      	ldrh	r0, [r7, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   17058:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   1705a:	1a82      	subs	r2, r0, r2
   1705c:	0412      	lsls	r2, r2, #16
   1705e:	f100 80bd 	bmi.w	171dc <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17062:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   17066:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
   1706a:	eba2 020c 	sub.w	r2, r2, ip
   1706e:	f002 0203 	and.w	r2, r2, #3
   17072:	2a02      	cmp	r2, #2
   17074:	f000 80ec 	beq.w	17250 <ull_conn_rx+0x11ec>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17078:	f894 71b4 	ldrb.w	r7, [r4, #436]	; 0x1b4
   1707c:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   17080:	42ba      	cmp	r2, r7
   17082:	d018      	beq.n	170b6 <ull_conn_rx+0x1052>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   17084:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   17088:	f002 0203 	and.w	r2, r2, #3
   1708c:	2a02      	cmp	r2, #2
   1708e:	d112      	bne.n	170b6 <ull_conn_rx+0x1052>
		conn->llcp_phy.pause_tx = 0U;
   17090:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   17094:	f884 71b5 	strb.w	r7, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   17098:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1709c:	f894 70ec 	ldrb.w	r7, [r4, #236]	; 0xec
		conn->llcp_phy.pause_tx = 0U;
   170a0:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   170a4:	f3c2 0280 	ubfx	r2, r2, #2, #1
   170a8:	f362 0741 	bfi	r7, r2, #1, #1
		conn->procedure_expire = 0U;
   170ac:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   170ae:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
   170b2:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   170b6:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   170ba:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   170be:	009b      	lsls	r3, r3, #2
   170c0:	f003 031c 	and.w	r3, r3, #28
   170c4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   170c8:	f002 0202 	and.w	r2, r2, #2
   170cc:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   170ce:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
	conn->llcp.phy_upd_ind.initiate = 0U;
   170d2:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   170d6:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   170d8:	682a      	ldr	r2, [r5, #0]
   170da:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   170dc:	682a      	ldr	r2, [r5, #0]
   170de:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
	*rx = NULL;
   170e2:	2300      	movs	r3, #0
   170e4:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   170e6:	f7fd f89d 	bl	14224 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   170ea:	4605      	mov	r5, r0
   170ec:	2800      	cmp	r0, #0
   170ee:	f000 8211 	beq.w	17514 <ull_conn_rx+0x14b0>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   170f2:	682b      	ldr	r3, [r5, #0]
   170f4:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   170f8:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   170fa:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   170fe:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   17102:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
	conn->llcp_type = LLCP_PHY_UPD;
   17106:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   17108:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   1710a:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   1710e:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   17112:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   17116:	f43e aff1 	beq.w	160fc <ull_conn_rx+0x98>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1711a:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   1711e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   17122:	f363 1206 	bfi	r2, r3, #4, #3
   17126:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
   1712a:	2000      	movs	r0, #0
   1712c:	f7fe bfe7 	b.w	160fe <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   17130:	2323      	movs	r3, #35	; 0x23
   17132:	220f      	movs	r2, #15
   17134:	f7ff b951 	b.w	163da <ull_conn_rx+0x376>
   17138:	4659      	mov	r1, fp
   1713a:	e55a      	b.n	16bf2 <ull_conn_rx+0xb8e>
			conn->llcp_length.disabled = 1U;
   1713c:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   17140:	f884 31a5 	strb.w	r3, [r4, #421]	; 0x1a5
			conn->llcp_length.disabled = 1U;
   17144:	f042 0308 	orr.w	r3, r2, #8
   17148:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   1714c:	f7ff b87e 	b.w	1624c <ull_conn_rx+0x1e8>
				conn->llcp_phy.state =
   17150:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   17154:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   17156:	f043 0303 	orr.w	r3, r3, #3
   1715a:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   1715e:	d111      	bne.n	17184 <ull_conn_rx+0x1120>
					conn->llcp_phy.tx =
   17160:	f8b4 21b6 	ldrh.w	r2, [r4, #438]	; 0x1b6
						conn->phy_pref_rx;
   17164:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
					conn->llcp_phy.ack--;
   17168:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   1716a:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   1716e:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
					conn->llcp_phy.tx =
   17172:	f240 43fc 	movw	r3, #1276	; 0x4fc
   17176:	f022 0204 	bic.w	r2, r2, #4
   1717a:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   1717e:	4313      	orrs	r3, r2
   17180:	f8a4 31b6 	strh.w	r3, [r4, #438]	; 0x1b6
				conn->llcp_phy.rx &= p->tx_phys;
   17184:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   17188:	f897 1020 	ldrb.w	r1, [r7, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   1718c:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   17190:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   17194:	f003 0203 	and.w	r2, r3, #3
   17198:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   1719c:	4003      	ands	r3, r0
   1719e:	009b      	lsls	r3, r3, #2
   171a0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   171a4:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   171a6:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   171aa:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   171ae:	d002      	beq.n	171b6 <ull_conn_rx+0x1152>
   171b0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   171b4:	d105      	bne.n	171c2 <ull_conn_rx+0x115e>
					conn->llcp_phy.tx = 0;
   171b6:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   171ba:	f003 0303 	and.w	r3, r3, #3
   171be:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				conn->llcp_phy.pause_tx = 1U;
   171c2:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   171c6:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   171c8:	4313      	orrs	r3, r2
   171ca:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
	int nack = 0;
   171ce:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   171d0:	713a      	strb	r2, [r7, #4]
   171d2:	f7fe bf94 	b.w	160fe <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   171d6:	2323      	movs	r3, #35	; 0x23
   171d8:	f7ff b8fe 	b.w	163d8 <ull_conn_rx+0x374>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   171dc:	2301      	movs	r3, #1
   171de:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   171e0:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   171e2:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	int nack = 0;
   171e6:	2000      	movs	r0, #0
   171e8:	f7fe bf89 	b.w	160fe <ull_conn_rx+0x9a>
			lll->phy_tx_time = lll->phy_tx;
   171ec:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
   171f0:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
			conn->llcp_phy.ack = conn->llcp_phy.req;
   171f4:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
			conn->llcp_phy.pause_tx = 0U;
   171f8:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   171fc:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   171fe:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   17202:	f362 1106 	bfi	r1, r2, #4, #3
   17206:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
			if (conn->llcp_phy.cmd) {
   1720a:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   1720e:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   17212:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17216:	682b      	ldr	r3, [r5, #0]
			if (conn->llcp_phy.cmd) {
   17218:	f000 808d 	beq.w	17336 <ull_conn_rx+0x12d2>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1721c:	2119      	movs	r1, #25
   1721e:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   17220:	2300      	movs	r3, #0
   17222:	773b      	strb	r3, [r7, #28]
				p->tx = lll->phy_tx;
   17224:	777a      	strb	r2, [r7, #29]
				p->rx = lll->phy_rx;
   17226:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1722a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1722e:	77bb      	strb	r3, [r7, #30]
   17230:	f7ff b80c 	b.w	1624c <ull_conn_rx+0x1e8>
	conn->llcp_enc.pause_rx = 0U;
   17234:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   17238:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   1723c:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   1723e:	f021 0103 	bic.w	r1, r1, #3
   17242:	f884 115e 	strb.w	r1, [r4, #350]	; 0x15e
	conn->procedure_expire = 0U;
   17246:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   1724a:	4618      	mov	r0, r3
   1724c:	f7fe bf57 	b.w	160fe <ull_conn_rx+0x9a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17250:	2301      	movs	r3, #1
   17252:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   17254:	232a      	movs	r3, #42	; 0x2a
   17256:	e7c4      	b.n	171e2 <ull_conn_rx+0x117e>
			conn->procedure_expire = 0U;
   17258:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   1725a:	4559      	cmp	r1, fp
			conn->llcp_length.ack = conn->llcp_length.req;
   1725c:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
			conn->procedure_expire = 0U;
   17260:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17264:	f000 813e 	beq.w	174e4 <ull_conn_rx+0x1480>
			conn->lll.max_rx_time = eff_rx_time;
   17268:	f8a4 e062 	strh.w	lr, [r4, #98]	; 0x62
			if (tx) {
   1726c:	2b00      	cmp	r3, #0
   1726e:	f000 8134 	beq.w	174da <ull_conn_rx+0x1476>
					(conn->llcp_length.req - 1);
   17272:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   17274:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
				conn->llcp_length.state =
   17278:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.rx_octets = eff_rx_octets;
   1727c:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
				conn->llcp_length.state =
   17280:	2503      	movs	r5, #3
   17282:	f365 0202 	bfi	r2, r5, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   17286:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
				conn->llcp_length.rx_time = eff_rx_time;
   1728a:	f8a4 e1ac 	strh.w	lr, [r4, #428]	; 0x1ac
				conn->llcp_length.tx_time = eff_tx_time;
   1728e:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.state =
   17292:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   17296:	f8a7 8020 	strh.w	r8, [r7, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   1729a:	84b9      	strh	r1, [r7, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   1729c:	f8a7 e022 	strh.w	lr, [r7, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   172a0:	84f8      	strh	r0, [r7, #38]	; 0x26
   172a2:	e4dd      	b.n	16c60 <ull_conn_rx+0xbfc>
			LL_ASSERT(conn_upd_curr == conn);
   172a4:	4e2b      	ldr	r6, [pc, #172]	; (17354 <ull_conn_rx+0x12f0>)
   172a6:	6832      	ldr	r2, [r6, #0]
   172a8:	4294      	cmp	r4, r2
   172aa:	d00e      	beq.n	172ca <ull_conn_rx+0x1266>
   172ac:	4a2a      	ldr	r2, [pc, #168]	; (17358 <ull_conn_rx+0x12f4>)
   172ae:	492b      	ldr	r1, [pc, #172]	; (1735c <ull_conn_rx+0x12f8>)
   172b0:	482b      	ldr	r0, [pc, #172]	; (17360 <ull_conn_rx+0x12fc>)
   172b2:	f641 037c 	movw	r3, #6268	; 0x187c
   172b6:	f00a fb83 	bl	219c0 <printk>
   172ba:	4040      	eors	r0, r0
   172bc:	f380 8811 	msr	BASEPRI, r0
   172c0:	f04f 0003 	mov.w	r0, #3
   172c4:	df02      	svc	2
   172c6:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   172ca:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (!conn->llcp_conn_param.cmd) {
   172ce:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
	conn_upd_curr = NULL;
   172d2:	2200      	movs	r2, #0
			if (!conn->llcp_conn_param.cmd) {
   172d4:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   172d8:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   172da:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   172dc:	f040 80cf 	bne.w	1747e <ull_conn_rx+0x141a>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   172e0:	2101      	movs	r1, #1
   172e2:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   172e4:	4618      	mov	r0, r3
				break;
   172e6:	f7fe bf0a 	b.w	160fe <ull_conn_rx+0x9a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   172ea:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   172ee:	f36f 0101 	bfc	r1, #0, #2
				conn->llcp_ack -= 2U;
   172f2:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   172f4:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
				conn->llcp_type = LLCP_ENCRYPTION;
   172f8:	2103      	movs	r1, #3
   172fa:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   172fe:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   17302:	f7fe bf9b 	b.w	1623c <ull_conn_rx+0x1d8>
		conn_upd_curr = conn;
   17306:	601c      	str	r4, [r3, #0]
   17308:	f7ff b921 	b.w	1654e <ull_conn_rx+0x4ea>
	struct node_tx *tx = NULL;
   1730c:	2300      	movs	r3, #0
   1730e:	f7ff b828 	b.w	16362 <ull_conn_rx+0x2fe>
				      0x03) == 0x02) &&
   17312:	f894 10ea 	ldrb.w	r1, [r4, #234]	; 0xea
   17316:	2903      	cmp	r1, #3
   17318:	f47f ac3e 	bne.w	16b98 <ull_conn_rx+0xb34>
   1731c:	e435      	b.n	16b8a <ull_conn_rx+0xb26>
				conn->llcp_length.state =
   1731e:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
				conn->lll.max_tx_octets = eff_tx_octets;
   17322:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   17326:	2704      	movs	r7, #4
   17328:	f367 0202 	bfi	r2, r7, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   1732c:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
   17330:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
   17334:	e48a      	b.n	16c4c <ull_conn_rx+0xbe8>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17336:	2201      	movs	r2, #1
   17338:	711a      	strb	r2, [r3, #4]
   1733a:	f7fe bf87 	b.w	1624c <ull_conn_rx+0x1e8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1733e:	2b23      	cmp	r3, #35	; 0x23
   17340:	f43f acd7 	beq.w	16cf2 <ull_conn_rx+0xc8e>
			conn->slave.ticks_to_offset =
   17344:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   17348:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   1734c:	e4d1      	b.n	16cf2 <ull_conn_rx+0xc8e>
   1734e:	bf00      	nop
   17350:	2000e47c 	.word	0x2000e47c
   17354:	2000e3f8 	.word	0x2000e3f8
   17358:	00028760 	.word	0x00028760
   1735c:	000288d4 	.word	0x000288d4
   17360:	000282a4 	.word	0x000282a4
				uint16_t interval_min =
   17364:	f8b7 9020 	ldrh.w	r9, [r7, #32]
   17368:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1736c:	2905      	cmp	r1, #5
   1736e:	f67f ae37 	bls.w	16fe0 <ull_conn_rx+0xf7c>
				uint16_t interval_max =
   17372:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
   17376:	fa1f f588 	uxth.w	r5, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   1737a:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
   1737e:	f63f ae2f 	bhi.w	16fe0 <ull_conn_rx+0xf7c>
				    (interval_max > 3200) ||
   17382:	42a9      	cmp	r1, r5
   17384:	f63f ae2c 	bhi.w	16fe0 <ull_conn_rx+0xf7c>
				uint16_t latency =
   17388:	f8b7 e024 	ldrh.w	lr, [r7, #36]	; 0x24
   1738c:	fa1f fc8e 	uxth.w	ip, lr
				    (interval_min > interval_max) ||
   17390:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   17394:	f4bf ae24 	bcs.w	16fe0 <ull_conn_rx+0xf7c>
				uint16_t timeout =
   17398:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
   1739a:	f8ad 1006 	strh.w	r1, [sp, #6]
   1739e:	b289      	uxth	r1, r1
				    (latency > 499) ||
   173a0:	f1a1 0a0a 	sub.w	sl, r1, #10
   173a4:	f640 4b76 	movw	fp, #3190	; 0xc76
   173a8:	fa1f fa8a 	uxth.w	sl, sl
   173ac:	45da      	cmp	sl, fp
   173ae:	f63f ae17 	bhi.w	16fe0 <ull_conn_rx+0xf7c>
				     ((latency + 1) * interval_max)) ||
   173b2:	f10c 0a01 	add.w	sl, ip, #1
   173b6:	fa1f fa8a 	uxth.w	sl, sl
   173ba:	fb05 fa0a 	mul.w	sl, r5, sl
				    (timeout > 3200) ||
   173be:	ebba 0f81 	cmp.w	sl, r1, lsl #2
   173c2:	f4bf ae0d 	bcs.w	16fe0 <ull_conn_rx+0xf7c>
				     ((latency + 1) * interval_max)) ||
   173c6:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   173ca:	455d      	cmp	r5, fp
   173cc:	f4ff ae08 	bcc.w	16fe0 <ull_conn_rx+0xf7c>
				conn->llcp_conn_param.latency =	latency;
   173d0:	f8a4 e184 	strh.w	lr, [r4, #388]	; 0x184
				conn->llcp_conn_param.timeout =	timeout;
   173d4:	f8bd e006 	ldrh.w	lr, [sp, #6]
				conn->llcp_conn_param.interval_min =
   173d8:	f8a4 9180 	strh.w	r9, [r4, #384]	; 0x180
				conn->llcp_conn_param.interval_max =
   173dc:	f8a4 8182 	strh.w	r8, [r4, #386]	; 0x182
				conn->llcp_conn_param.timeout =	timeout;
   173e0:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
				conn->llcp_conn_param.preferred_periodicity =
   173e4:	f884 b188 	strb.w	fp, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   173e8:	f897 802a 	ldrb.w	r8, [r7, #42]	; 0x2a
   173ec:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
   173f0:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   173f4:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
					sys_le16_to_cpu(cpr->offset0);
   173f8:	f897 802c 	ldrb.w	r8, [r7, #44]	; 0x2c
   173fc:	f897 e02b 	ldrb.w	lr, [r7, #43]	; 0x2b
   17400:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   17404:	f8a4 e18c 	strh.w	lr, [r4, #396]	; 0x18c
					sys_le16_to_cpu(cpr->offset1);
   17408:	f897 802e 	ldrb.w	r8, [r7, #46]	; 0x2e
   1740c:	f897 e02d 	ldrb.w	lr, [r7, #45]	; 0x2d
   17410:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   17414:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
					sys_le16_to_cpu(cpr->offset2);
   17418:	f897 8030 	ldrb.w	r8, [r7, #48]	; 0x30
   1741c:	f897 e02f 	ldrb.w	lr, [r7, #47]	; 0x2f
   17420:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   17424:	f8a4 e190 	strh.w	lr, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->offset3);
   17428:	f897 8032 	ldrb.w	r8, [r7, #50]	; 0x32
   1742c:	f897 e031 	ldrb.w	lr, [r7, #49]	; 0x31
   17430:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   17434:	f8a4 e192 	strh.w	lr, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset4);
   17438:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
   1743c:	f897 e033 	ldrb.w	lr, [r7, #51]	; 0x33
   17440:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   17444:	f8a4 e194 	strh.w	lr, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset5);
   17448:	f897 e035 	ldrb.w	lr, [r7, #53]	; 0x35
   1744c:	f897 8036 	ldrb.w	r8, [r7, #54]	; 0x36
   17450:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   17454:	f8a4 e196 	strh.w	lr, [r4, #406]	; 0x196
				     lll->interval) ||
   17458:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   1745c:	4575      	cmp	r5, lr
   1745e:	f000 80d8 	beq.w	17612 <ull_conn_rx+0x15ae>
					if (conn->llcp_enc.pause_tx) {
   17462:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   17466:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
					if (conn->llcp_enc.pause_tx) {
   1746a:	f43f adaa 	beq.w	16fc2 <ull_conn_rx+0xf5e>
						conn->llcp_conn_param.state =
   1746e:	2102      	movs	r1, #2
   17470:	f361 0202 	bfi	r2, r1, #0, #3
   17474:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
						(*rx)->hdr.type =
   17478:	2201      	movs	r2, #1
   1747a:	713a      	strb	r2, [r7, #4]
   1747c:	e5a6      	b.n	16fcc <ull_conn_rx+0xf68>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1747e:	2115      	movs	r1, #21
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17480:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   17482:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   17484:	773b      	strb	r3, [r7, #28]
			cu->interval = lll->interval;
   17486:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   17488:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
   1748c:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   1748e:	83fa      	strh	r2, [r7, #30]
			cu->timeout = conn->supervision_reload *
   17490:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   17494:	227d      	movs	r2, #125	; 0x7d
   17496:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   1749a:	8439      	strh	r1, [r7, #32]
				      lll->interval * 125U / 1000;
   1749c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   174a0:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   174a4:	847b      	strh	r3, [r7, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   174a6:	f7fe bed1 	b.w	1624c <ull_conn_rx+0x1e8>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   174aa:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
			conn->llcp_ack += 2U;
   174ae:	3202      	adds	r2, #2
   174b0:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   174b4:	2b00      	cmp	r3, #0
   174b6:	d13b      	bne.n	17530 <ull_conn_rx+0x14cc>
			conn->slave.llcp_type = conn->llcp_type;
   174b8:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   174bc:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
   174c0:	f7fe beef 	b.w	162a2 <ull_conn_rx+0x23e>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   174c4:	2219      	movs	r2, #25
   174c6:	711a      	strb	r2, [r3, #4]
		p->status = 0U;
   174c8:	7738      	strb	r0, [r7, #28]
		p->tx = conn->lll.phy_tx;
   174ca:	7779      	strb	r1, [r7, #29]
		p->rx = conn->lll.phy_rx;
   174cc:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
   174d0:	f3c1 0302 	ubfx	r3, r1, #0, #3
   174d4:	77bb      	strb	r3, [r7, #30]
		if (err) {
   174d6:	f7fe be12 	b.w	160fe <ull_conn_rx+0x9a>
				conn->lll.max_tx_octets = eff_tx_octets;
   174da:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   174de:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
   174e2:	e6d8      	b.n	17296 <ull_conn_rx+0x1232>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   174e4:	4550      	cmp	r0, sl
   174e6:	f47f aebf 	bne.w	17268 <ull_conn_rx+0x1204>
			    eff_rx_time == conn->lll.max_rx_time &&
   174ea:	45ce      	cmp	lr, r9
   174ec:	f47f aebc 	bne.w	17268 <ull_conn_rx+0x1204>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   174f0:	682a      	ldr	r2, [r5, #0]
   174f2:	2501      	movs	r5, #1
   174f4:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   174f6:	f7ff bbb3 	b.w	16c60 <ull_conn_rx+0xbfc>
			tx->next = conn->tx_head->next;
   174fa:	681a      	ldr	r2, [r3, #0]
   174fc:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   174fe:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   17500:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   17504:	f7ff b922 	b.w	1674c <ull_conn_rx+0x6e8>
			tx->next = conn->tx_head->next;
   17508:	6819      	ldr	r1, [r3, #0]
   1750a:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   1750c:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   1750e:	e9c4 2270 	strd	r2, r2, [r4, #448]	; 0x1c0
   17512:	e480      	b.n	16e16 <ull_conn_rx+0xdb2>
	LL_ASSERT(rx_dle);
   17514:	4a5e      	ldr	r2, [pc, #376]	; (17690 <ull_conn_rx+0x162c>)
   17516:	495f      	ldr	r1, [pc, #380]	; (17694 <ull_conn_rx+0x1630>)
   17518:	485f      	ldr	r0, [pc, #380]	; (17698 <ull_conn_rx+0x1634>)
   1751a:	f241 4372 	movw	r3, #5234	; 0x1472
   1751e:	f00a fa4f 	bl	219c0 <printk>
   17522:	4040      	eors	r0, r0
   17524:	f380 8811 	msr	BASEPRI, r0
   17528:	f04f 0003 	mov.w	r0, #3
   1752c:	df02      	svc	2
   1752e:	e5e0      	b.n	170f2 <ull_conn_rx+0x108e>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   17530:	4a57      	ldr	r2, [pc, #348]	; (17690 <ull_conn_rx+0x162c>)
   17532:	495a      	ldr	r1, [pc, #360]	; (1769c <ull_conn_rx+0x1638>)
   17534:	4858      	ldr	r0, [pc, #352]	; (17698 <ull_conn_rx+0x1634>)
   17536:	f241 6309 	movw	r3, #5641	; 0x1609
   1753a:	f00a fa41 	bl	219c0 <printk>
   1753e:	4040      	eors	r0, r0
   17540:	f380 8811 	msr	BASEPRI, r0
   17544:	f04f 0003 	mov.w	r0, #3
   17548:	df02      	svc	2
   1754a:	e7b5      	b.n	174b8 <ull_conn_rx+0x1454>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   1754c:	2a23      	cmp	r2, #35	; 0x23
   1754e:	f43f aa9b 	beq.w	16a88 <ull_conn_rx+0xa24>
			conn->slave.ticks_to_offset =
   17552:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   17556:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   1755a:	f7ff ba95 	b.w	16a88 <ull_conn_rx+0xa24>
		LL_ASSERT(conn_upd_curr == conn);
   1755e:	4e50      	ldr	r6, [pc, #320]	; (176a0 <ull_conn_rx+0x163c>)
   17560:	6831      	ldr	r1, [r6, #0]
   17562:	428c      	cmp	r4, r1
   17564:	d010      	beq.n	17588 <ull_conn_rx+0x1524>
   17566:	4a4a      	ldr	r2, [pc, #296]	; (17690 <ull_conn_rx+0x162c>)
   17568:	494e      	ldr	r1, [pc, #312]	; (176a4 <ull_conn_rx+0x1640>)
   1756a:	484b      	ldr	r0, [pc, #300]	; (17698 <ull_conn_rx+0x1634>)
   1756c:	f241 13ba 	movw	r3, #4538	; 0x11ba
   17570:	f00a fa26 	bl	219c0 <printk>
   17574:	4040      	eors	r0, r0
   17576:	f380 8811 	msr	BASEPRI, r0
   1757a:	f04f 0003 	mov.w	r0, #3
   1757e:	df02      	svc	2
   17580:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   17584:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   17588:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   1758c:	2300      	movs	r3, #0
   1758e:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   17590:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   17594:	f7ff ba7f 	b.w	16a96 <ull_conn_rx+0xa32>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   17598:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   1759c:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   175a0:	429a      	cmp	r2, r3
   175a2:	d00e      	beq.n	175c2 <ull_conn_rx+0x155e>
   175a4:	4a3a      	ldr	r2, [pc, #232]	; (17690 <ull_conn_rx+0x162c>)
   175a6:	4940      	ldr	r1, [pc, #256]	; (176a8 <ull_conn_rx+0x1644>)
   175a8:	483b      	ldr	r0, [pc, #236]	; (17698 <ull_conn_rx+0x1634>)
   175aa:	f241 139f 	movw	r3, #4511	; 0x119f
   175ae:	f00a fa07 	bl	219c0 <printk>
   175b2:	4040      	eors	r0, r0
   175b4:	f380 8811 	msr	BASEPRI, r0
   175b8:	f04f 0003 	mov.w	r0, #3
   175bc:	df02      	svc	2
   175be:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   175c2:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   175c6:	2105      	movs	r1, #5
   175c8:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   175cc:	3b01      	subs	r3, #1
   175ce:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   175d2:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   175d6:	f002 0308 	and.w	r3, r2, #8
   175da:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.win_size = 1U;
   175de:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   175e0:	430b      	orrs	r3, r1
   175e2:	f022 020f 	bic.w	r2, r2, #15
   175e6:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   175e8:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   175ec:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   175f0:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   175f4:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   175f8:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   175fa:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   175fe:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17602:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17606:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1760a:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	if (err) {
   1760e:	f7fe bd73 	b.w	160f8 <ull_conn_rx+0x94>
				     lll->interval) ||
   17612:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   17614:	4565      	cmp	r5, ip
   17616:	f47f af24 	bne.w	17462 <ull_conn_rx+0x13fe>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1761a:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1761e:	fb05 f50e 	mul.w	r5, r5, lr
   17622:	f242 7c10 	movw	ip, #10000	; 0x2710
   17626:	fb0c 5101 	mla	r1, ip, r1, r5
   1762a:	3901      	subs	r1, #1
   1762c:	fbb1 f1f5 	udiv	r1, r1, r5
				     lll->latency) ||
   17630:	f8b4 50c6 	ldrh.w	r5, [r4, #198]	; 0xc6
   17634:	b289      	uxth	r1, r1
   17636:	428d      	cmp	r5, r1
   17638:	f47f af13 	bne.w	17462 <ull_conn_rx+0x13fe>
				conn->llcp_conn_param.state =
   1763c:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   17640:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   17644:	f042 0201 	orr.w	r2, r2, #1
   17648:	f8a4 217e 	strh.w	r2, [r4, #382]	; 0x17e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1764c:	2201      	movs	r2, #1
   1764e:	713a      	strb	r2, [r7, #4]
   17650:	e4bc      	b.n	16fcc <ull_conn_rx+0xf68>
			     lll->interval) ||
   17652:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   17654:	4565      	cmp	r5, ip
   17656:	f47f acb2 	bne.w	16fbe <ull_conn_rx+0xf5a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1765a:	f240 45e2 	movw	r5, #1250	; 0x4e2
   1765e:	fb05 f101 	mul.w	r1, r5, r1
   17662:	f242 7510 	movw	r5, #10000	; 0x2710
   17666:	fb05 1202 	mla	r2, r5, r2, r1
   1766a:	3a01      	subs	r2, #1
   1766c:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   17670:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   17674:	b292      	uxth	r2, r2
   17676:	4291      	cmp	r1, r2
   17678:	f47f aca1 	bne.w	16fbe <ull_conn_rx+0xf5a>
   1767c:	e7de      	b.n	1763c <ull_conn_rx+0x15d8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   1767e:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   17682:	f011 0f06 	tst.w	r1, #6
   17686:	f43f aaab 	beq.w	16be0 <ull_conn_rx+0xb7c>
   1768a:	f7fe be63 	b.w	16354 <ull_conn_rx+0x2f0>
   1768e:	bf00      	nop
   17690:	00028760 	.word	0x00028760
   17694:	000288ec 	.word	0x000288ec
   17698:	000282a4 	.word	0x000282a4
   1769c:	00028888 	.word	0x00028888
   176a0:	2000e3f8 	.word	0x2000e3f8
   176a4:	000288d4 	.word	0x000288d4
   176a8:	000288ac 	.word	0x000288ac

000176ac <ull_conn_llcp>:
{
   176ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   176b0:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   176b2:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   176b6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   176ba:	4298      	cmp	r0, r3
{
   176bc:	460d      	mov	r5, r1
   176be:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   176c0:	d076      	beq.n	177b0 <ull_conn_llcp+0x104>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   176c2:	1a1b      	subs	r3, r3, r0
   176c4:	f003 0303 	and.w	r3, r3, #3
   176c8:	2b02      	cmp	r3, #2
   176ca:	d049      	beq.n	17760 <ull_conn_llcp+0xb4>
   176cc:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   176d0:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   176d2:	f1bc 0f00 	cmp.w	ip, #0
   176d6:	f2c0 8094 	blt.w	17802 <ull_conn_llcp+0x156>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   176da:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   176de:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   176e2:	429a      	cmp	r2, r3
   176e4:	d039      	beq.n	1775a <ull_conn_llcp+0xae>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   176e6:	4887      	ldr	r0, [pc, #540]	; (17904 <ull_conn_llcp+0x258>)
   176e8:	f7f8 ff64 	bl	105b4 <mem_acquire>
		if (tx) {
   176ec:	b360      	cbz	r0, 17748 <ull_conn_llcp+0x9c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   176ee:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   176f2:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   176f6:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   176f8:	2202      	movs	r2, #2
   176fa:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   176fc:	f043 0303 	orr.w	r3, r3, #3
   17700:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   17702:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   17704:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_tx->llctrl.terminate_ind.error_code =
   17708:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   1770c:	7202      	strb	r2, [r0, #8]
	if (
   1770e:	2b00      	cmp	r3, #0
   17710:	d041      	beq.n	17796 <ull_conn_llcp+0xea>
	    !conn->llcp_enc.pause_tx &&
   17712:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17716:	0791      	lsls	r1, r2, #30
   17718:	d43d      	bmi.n	17796 <ull_conn_llcp+0xea>
	    !conn->llcp_phy.pause_tx &&
   1771a:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1771e:	07d2      	lsls	r2, r2, #31
   17720:	d439      	bmi.n	17796 <ull_conn_llcp+0xea>
		if (conn->tx_head == conn->tx_data) {
   17722:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17726:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17728:	bf04      	itt	eq
   1772a:	681a      	ldreq	r2, [r3, #0]
   1772c:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17730:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17734:	bb9a      	cbnz	r2, 1779e <ull_conn_llcp+0xf2>
			tx->next = conn->tx_head->next;
   17736:	681a      	ldr	r2, [r3, #0]
   17738:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1773a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1773c:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1773e:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   17742:	b90b      	cbnz	r3, 17748 <ull_conn_llcp+0x9c>
		conn->tx_data_last = tx;
   17744:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		if (!conn->procedure_expire) {
   17748:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
   1774c:	b928      	cbnz	r0, 1775a <ull_conn_llcp+0xae>
			conn->procedure_expire = conn->supervision_reload;
   1774e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
   17752:	2b01      	cmp	r3, #1
   17754:	d96f      	bls.n	17836 <ull_conn_llcp+0x18a>
			conn->procedure_expire = conn->supervision_reload;
   17756:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   1775a:	2000      	movs	r0, #0
}
   1775c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   17760:	f894 21a5 	ldrb.w	r2, [r4, #421]	; 0x1a5
   17764:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   17768:	429a      	cmp	r2, r3
   1776a:	d006      	beq.n	1777a <ull_conn_llcp+0xce>
			     LLCP_LENGTH_STATE_RESIZE) ||
   1776c:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
			if ((conn->llcp_length.state ==
   17770:	f003 0306 	and.w	r3, r3, #6
   17774:	2b04      	cmp	r3, #4
   17776:	f000 81c8 	beq.w	17b0a <ull_conn_llcp+0x45e>
		switch (conn->llcp_type) {
   1777a:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
   1777e:	1e7b      	subs	r3, r7, #1
   17780:	2b05      	cmp	r3, #5
   17782:	f200 81ac 	bhi.w	17ade <ull_conn_llcp+0x432>
   17786:	e8df f013 	tbh	[pc, r3, lsl #1]
   1778a:	0031      	.short	0x0031
   1778c:	00c50151 	.word	0x00c50151
   17790:	007e01aa 	.word	0x007e01aa
   17794:	0073      	.short	0x0073
		if (!conn->tx_ctrl) {
   17796:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1779a:	2a00      	cmp	r2, #0
   1779c:	d062      	beq.n	17864 <ull_conn_llcp+0x1b8>
	tx->next = conn->tx_ctrl_last->next;
   1779e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   177a2:	681a      	ldr	r2, [r3, #0]
   177a4:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   177a6:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   177a8:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   177aa:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
}
   177ae:	e7c8      	b.n	17742 <ull_conn_llcp+0x96>
   177b0:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
	if ((conn->llcp_ack == conn->llcp_req) &&
   177b4:	2a00      	cmp	r2, #0
   177b6:	4694      	mov	ip, r2
   177b8:	f2c0 81a1 	blt.w	17afe <ull_conn_llcp+0x452>
	    !conn->llcp_enc.pause_rx) {
   177bc:	f894 e15e 	ldrb.w	lr, [r4, #350]	; 0x15e
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   177c0:	f01e 0801 	ands.w	r8, lr, #1
   177c4:	d185      	bne.n	176d2 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   177c6:	f894 9111 	ldrb.w	r9, [r4, #273]	; 0x111
   177ca:	f894 7110 	ldrb.w	r7, [r4, #272]	; 0x110
   177ce:	454f      	cmp	r7, r9
   177d0:	f000 82a7 	beq.w	17d22 <ull_conn_llcp+0x676>
			conn->llcp_type = LLCP_CONN_UPD;
   177d4:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   177d6:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   177d8:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   177dc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   177e0:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   177e4:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
   177e8:	429a      	cmp	r2, r3
   177ea:	d1bf      	bne.n	1776c <ull_conn_llcp+0xc0>
			if (event_conn_upd_prep(conn, lazy,
   177ec:	462a      	mov	r2, r5
   177ee:	4631      	mov	r1, r6
   177f0:	4620      	mov	r0, r4
   177f2:	f7ea fb45 	bl	1e80 <event_conn_upd_prep>
   177f6:	2800      	cmp	r0, #0
   177f8:	f040 817e 	bne.w	17af8 <ull_conn_llcp+0x44c>
				return -ECANCELED;
   177fc:	f06f 0047 	mvn.w	r0, #71	; 0x47
   17800:	e7ac      	b.n	1775c <ull_conn_llcp+0xb0>
   17802:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17806:	2900      	cmp	r1, #0
   17808:	f43f af67 	beq.w	176da <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   1780c:	2902      	cmp	r1, #2
   1780e:	f000 813d 	beq.w	17a8c <ull_conn_llcp+0x3e0>
   17812:	2906      	cmp	r1, #6
   17814:	d01d      	beq.n	17852 <ull_conn_llcp+0x1a6>
   17816:	2901      	cmp	r1, #1
   17818:	d012      	beq.n	17840 <ull_conn_llcp+0x194>
			LL_ASSERT(0);
   1781a:	4a3b      	ldr	r2, [pc, #236]	; (17908 <ull_conn_llcp+0x25c>)
   1781c:	493b      	ldr	r1, [pc, #236]	; (1790c <ull_conn_llcp+0x260>)
   1781e:	483c      	ldr	r0, [pc, #240]	; (17910 <ull_conn_llcp+0x264>)
   17820:	f240 4316 	movw	r3, #1046	; 0x416
   17824:	f00a f8cc 	bl	219c0 <printk>
   17828:	4040      	eors	r0, r0
   1782a:	f380 8811 	msr	BASEPRI, r0
   1782e:	f04f 0003 	mov.w	r0, #3
   17832:	df02      	svc	2
			break;
   17834:	e751      	b.n	176da <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   17836:	3301      	adds	r3, #1
   17838:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   1783c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (event_conn_upd_prep(conn, lazy,
   17840:	462a      	mov	r2, r5
   17842:	4631      	mov	r1, r6
   17844:	4620      	mov	r0, r4
   17846:	f7ea fb1b 	bl	1e80 <event_conn_upd_prep>
   1784a:	2800      	cmp	r0, #0
   1784c:	f47f af45 	bne.w	176da <ull_conn_llcp+0x2e>
   17850:	e7d4      	b.n	177fc <ull_conn_llcp+0x150>
			event_counter = lll->event_counter +
   17852:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   17854:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17856:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   17858:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   1785a:	4620      	mov	r0, r4
   1785c:	b291      	uxth	r1, r2
   1785e:	f7fd fee3 	bl	15628 <event_phy_upd_ind_prep>
		break;
   17862:	e73a      	b.n	176da <ull_conn_llcp+0x2e>
			tx->next = conn->tx_head;
   17864:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17866:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1786a:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   1786e:	e768      	b.n	17742 <ull_conn_llcp+0x96>
			event_counter = lll->event_counter +
   17870:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   17872:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   17874:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   17876:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   17878:	b289      	uxth	r1, r1
   1787a:	4620      	mov	r0, r4
   1787c:	f7fd fed4 	bl	15628 <event_phy_upd_ind_prep>
		break;
   17880:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17884:	e725      	b.n	176d2 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17886:	481f      	ldr	r0, [pc, #124]	; (17904 <ull_conn_llcp+0x258>)
   17888:	f7f8 fe94 	bl	105b4 <mem_acquire>
	if (tx) {
   1788c:	2800      	cmp	r0, #0
   1788e:	f000 8133 	beq.w	17af8 <ull_conn_llcp+0x44c>
		conn->llcp_ack = conn->llcp_req;
   17892:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17896:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1789a:	7903      	ldrb	r3, [r0, #4]
   1789c:	f043 0303 	orr.w	r3, r3, #3
   178a0:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   178a2:	2301      	movs	r3, #1
   178a4:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   178a6:	2312      	movs	r3, #18
   178a8:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   178aa:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   178ae:	2b00      	cmp	r3, #0
   178b0:	f000 8275 	beq.w	17d9e <ull_conn_llcp+0x6f2>
	    !conn->llcp_enc.pause_tx &&
   178b4:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   178b8:	0791      	lsls	r1, r2, #30
   178ba:	f100 8270 	bmi.w	17d9e <ull_conn_llcp+0x6f2>
	    !conn->llcp_phy.pause_tx &&
   178be:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   178c2:	07d2      	lsls	r2, r2, #31
   178c4:	f100 826b 	bmi.w	17d9e <ull_conn_llcp+0x6f2>
		if (conn->tx_head == conn->tx_data) {
   178c8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   178cc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   178ce:	bf04      	itt	eq
   178d0:	681a      	ldreq	r2, [r3, #0]
   178d2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   178d6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   178da:	2a00      	cmp	r2, #0
   178dc:	f000 8687 	beq.w	185ee <ull_conn_llcp+0xf42>
	tx->next = conn->tx_ctrl_last->next;
   178e0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   178e4:	681a      	ldr	r2, [r3, #0]
   178e6:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   178e8:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   178ea:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   178ec:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   178f0:	2b00      	cmp	r3, #0
   178f2:	f000 8399 	beq.w	18028 <ull_conn_llcp+0x97c>
		conn->procedure_expire = conn->procedure_reload;
   178f6:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   178fa:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   178fe:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   17902:	e6e6      	b.n	176d2 <ull_conn_llcp+0x26>
   17904:	2000e47c 	.word	0x2000e47c
   17908:	00028760 	.word	0x00028760
   1790c:	0002833c 	.word	0x0002833c
   17910:	000282a4 	.word	0x000282a4
	if (conn->llcp.encryption.state) {
   17914:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   17918:	f013 0803 	ands.w	r8, r3, #3
   1791c:	f000 814a 	beq.w	17bb4 <ull_conn_llcp+0x508>
		if (lll->role &&
   17920:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17924:	2b00      	cmp	r3, #0
   17926:	f6bf aed8 	bge.w	176da <ull_conn_llcp+0x2e>
   1792a:	f1b8 0f01 	cmp.w	r8, #1
   1792e:	f47f af68 	bne.w	17802 <ull_conn_llcp+0x156>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17932:	48d1      	ldr	r0, [pc, #836]	; (17c78 <ull_conn_llcp+0x5cc>)
   17934:	f7f8 fe3e 	bl	105b4 <mem_acquire>
	if (!tx) {
   17938:	4680      	mov	r8, r0
   1793a:	2800      	cmp	r0, #0
   1793c:	f000 80dc 	beq.w	17af8 <ull_conn_llcp+0x44c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17940:	7903      	ldrb	r3, [r0, #4]
   17942:	f043 0303 	orr.w	r3, r3, #3
   17946:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   17948:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   1794c:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   1794e:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   17952:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   17954:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   17958:	210c      	movs	r1, #12
   1795a:	4638      	mov	r0, r7
   1795c:	f003 f9aa 	bl	1acb4 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   17960:	4639      	mov	r1, r7
   17962:	2208      	movs	r2, #8
   17964:	f504 7081 	add.w	r0, r4, #258	; 0x102
   17968:	f00c fccc 	bl	24304 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   1796c:	464a      	mov	r2, r9
   1796e:	f108 0110 	add.w	r1, r8, #16
   17972:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   17976:	f00c fcc5 	bl	24304 <memcpy>
	    conn->tx_head &&
   1797a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   1797e:	2b00      	cmp	r3, #0
   17980:	f000 8450 	beq.w	18224 <ull_conn_llcp+0xb78>
	    !conn->llcp_enc.pause_tx &&
   17984:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17988:	0791      	lsls	r1, r2, #30
   1798a:	f100 844b 	bmi.w	18224 <ull_conn_llcp+0xb78>
	    !conn->llcp_phy.pause_tx &&
   1798e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17992:	07d2      	lsls	r2, r2, #31
   17994:	f100 8446 	bmi.w	18224 <ull_conn_llcp+0xb78>
		if (conn->tx_head == conn->tx_data) {
   17998:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1799c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1799e:	bf04      	itt	eq
   179a0:	681a      	ldreq	r2, [r3, #0]
   179a2:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   179a6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   179aa:	2a00      	cmp	r2, #0
   179ac:	f000 8704 	beq.w	187b8 <ull_conn_llcp+0x110c>
	tx->next = conn->tx_ctrl_last->next;
   179b0:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   179b4:	681a      	ldr	r2, [r3, #0]
   179b6:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   179ba:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   179be:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   179c2:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   179c6:	2b00      	cmp	r3, #0
   179c8:	f000 85f3 	beq.w	185b2 <ull_conn_llcp+0xf06>
			rx = ll_pdu_rx_alloc();
   179cc:	f7fc fc2a 	bl	14224 <ll_pdu_rx_alloc>
			if (!rx) {
   179d0:	4607      	mov	r7, r0
   179d2:	2800      	cmp	r0, #0
   179d4:	f000 8090 	beq.w	17af8 <ull_conn_llcp+0x44c>
			rx->hdr.handle = conn->lll.handle;
   179d8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   179da:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   179dc:	2303      	movs	r3, #3
   179de:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   179e0:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   179e2:	7f3b      	ldrb	r3, [r7, #28]
   179e4:	f043 0303 	orr.w	r3, r3, #3
   179e8:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   179ea:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   179ec:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   179ee:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   179f0:	f204 1161 	addw	r1, r4, #353	; 0x161
   179f4:	f107 0020 	add.w	r0, r7, #32
   179f8:	f00c fc84 	bl	24304 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   179fc:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
   17a00:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   17a04:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
   17a08:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   17a0c:	6838      	ldr	r0, [r7, #0]
   17a0e:	4639      	mov	r1, r7
   17a10:	f7fc fbda 	bl	141c8 <ll_rx_put>
			ll_rx_sched();
   17a14:	f7fc fbe2 	bl	141dc <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   17a18:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   17a1c:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17a20:	2202      	movs	r2, #2
   17a22:	f362 0301 	bfi	r3, r2, #0, #2
   17a26:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   17a2a:	e652      	b.n	176d2 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17a2c:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   17a2e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   17a30:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   17a32:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
					lll->latency_prepare + lazy;
   17a36:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   17a38:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   17a3c:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   17a3e:	d168      	bne.n	17b12 <ull_conn_llcp+0x466>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17a40:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17a44:	1afb      	subs	r3, r7, r3
   17a46:	0418      	lsls	r0, r3, #16
   17a48:	d456      	bmi.n	17af8 <ull_conn_llcp+0x44c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17a4a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17a4e:	2b00      	cmp	r3, #0
   17a50:	f2c0 82e2 	blt.w	18018 <ull_conn_llcp+0x96c>
			conn->llcp_ack = conn->llcp_req;
   17a54:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17a58:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
   17a5c:	f104 0738 	add.w	r7, r4, #56	; 0x38
   17a60:	2205      	movs	r2, #5
   17a62:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17a66:	4638      	mov	r0, r7
   17a68:	f00c fc4c 	bl	24304 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17a6c:	2105      	movs	r1, #5
   17a6e:	4638      	mov	r0, r7
   17a70:	f7f8 ff70 	bl	10954 <util_ones_count_get>
		lll->data_chan_count =
   17a74:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17a78:	2301      	movs	r3, #1
		lll->data_chan_count =
   17a7a:	f360 0c05 	bfi	ip, r0, #0, #6
   17a7e:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17a82:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
   17a86:	fa4f fc8c 	sxtb.w	ip, ip
   17a8a:	e622      	b.n	176d2 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17a8c:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17a8e:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   17a90:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   17a94:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   17a96:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   17a98:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   17a9c:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   17a9e:	f040 80f3 	bne.w	17c88 <ull_conn_llcp+0x5dc>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17aa2:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   17aa6:	1ab6      	subs	r6, r6, r2
   17aa8:	0430      	lsls	r0, r6, #16
   17aaa:	f53f ae16 	bmi.w	176da <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   17aae:	f104 0538 	add.w	r5, r4, #56	; 0x38
   17ab2:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
   17ab4:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		memcpy(&lll->data_chan_map[0],
   17ab8:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17abc:	4628      	mov	r0, r5
   17abe:	f00c fc21 	bl	24304 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17ac2:	2105      	movs	r1, #5
   17ac4:	4628      	mov	r0, r5
   17ac6:	f7f8 ff45 	bl	10954 <util_ones_count_get>
		lll->data_chan_count =
   17aca:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17ace:	2201      	movs	r2, #1
		lll->data_chan_count =
   17ad0:	f360 0305 	bfi	r3, r0, #0, #6
   17ad4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17ad8:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
   17adc:	e5fd      	b.n	176da <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   17ade:	4a67      	ldr	r2, [pc, #412]	; (17c7c <ull_conn_llcp+0x5d0>)
   17ae0:	4967      	ldr	r1, [pc, #412]	; (17c80 <ull_conn_llcp+0x5d4>)
   17ae2:	4868      	ldr	r0, [pc, #416]	; (17c84 <ull_conn_llcp+0x5d8>)
   17ae4:	f240 33e5 	movw	r3, #997	; 0x3e5
   17ae8:	f009 ff6a 	bl	219c0 <printk>
   17aec:	4040      	eors	r0, r0
   17aee:	f380 8811 	msr	BASEPRI, r0
   17af2:	f04f 0003 	mov.w	r0, #3
   17af6:	df02      	svc	2
			break;
   17af8:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17afc:	e5e9      	b.n	176d2 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   17afe:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
   17b02:	2900      	cmp	r1, #0
   17b04:	f47f ae82 	bne.w	1780c <ull_conn_llcp+0x160>
   17b08:	e658      	b.n	177bc <ull_conn_llcp+0x110>
				event_len_prep(conn);
   17b0a:	4620      	mov	r0, r4
   17b0c:	f7fd fca4 	bl	15458 <event_len_prep>
   17b10:	e633      	b.n	1777a <ull_conn_llcp+0xce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17b12:	4859      	ldr	r0, [pc, #356]	; (17c78 <ull_conn_llcp+0x5cc>)
   17b14:	f7f8 fd4e 	bl	105b4 <mem_acquire>
		if (tx) {
   17b18:	4680      	mov	r8, r0
   17b1a:	2800      	cmp	r0, #0
   17b1c:	d0ec      	beq.n	17af8 <ull_conn_llcp+0x44c>
			conn->llcp.chan_map.instant = event_counter +
   17b1e:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   17b20:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   17b24:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   17b26:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   17b28:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17b2c:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   17b2e:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17b32:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   17b36:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17b3a:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17b3c:	2308      	movs	r3, #8
   17b3e:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17b40:	2301      	movs	r3, #1
   17b42:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17b44:	2205      	movs	r2, #5
   17b46:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17b4a:	3008      	adds	r0, #8
   17b4c:	f00c fbda 	bl	24304 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   17b50:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17b54:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   17b58:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17b5c:	2b00      	cmp	r3, #0
   17b5e:	f000 8266 	beq.w	1802e <ull_conn_llcp+0x982>
	    !conn->llcp_enc.pause_tx &&
   17b62:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17b66:	0792      	lsls	r2, r2, #30
   17b68:	f100 8261 	bmi.w	1802e <ull_conn_llcp+0x982>
	    !conn->llcp_phy.pause_tx &&
   17b6c:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17b70:	07d7      	lsls	r7, r2, #31
   17b72:	f100 825c 	bmi.w	1802e <ull_conn_llcp+0x982>
		if (conn->tx_head == conn->tx_data) {
   17b76:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17b7a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17b7c:	bf04      	itt	eq
   17b7e:	681a      	ldreq	r2, [r3, #0]
   17b80:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17b84:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17b88:	2a00      	cmp	r2, #0
   17b8a:	f000 8602 	beq.w	18792 <ull_conn_llcp+0x10e6>
	tx->next = conn->tx_ctrl_last->next;
   17b8e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17b92:	681a      	ldr	r2, [r3, #0]
   17b94:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   17b98:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   17b9c:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   17ba0:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17ba4:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17ba8:	2b00      	cmp	r3, #0
   17baa:	f47f ad92 	bne.w	176d2 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   17bae:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   17bb2:	e58e      	b.n	176d2 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17bb4:	4830      	ldr	r0, [pc, #192]	; (17c78 <ull_conn_llcp+0x5cc>)
   17bb6:	f7f8 fcfd 	bl	105b4 <mem_acquire>
	if (!tx) {
   17bba:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17bbe:	4681      	mov	r9, r0
   17bc0:	2800      	cmp	r0, #0
   17bc2:	f43f ad86 	beq.w	176d2 <ull_conn_llcp+0x26>
	if (!lll->role) {
   17bc6:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   17bca:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   17bce:	f280 82a5 	bge.w	1811c <ull_conn_llcp+0xa70>
	else if (!lll->enc_rx) {
   17bd2:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   17bd6:	0719      	lsls	r1, r3, #28
   17bd8:	f100 842b 	bmi.w	18432 <ull_conn_llcp+0xd86>
		if (conn->llcp.encryption.error_code) {
   17bdc:	f894 80f9 	ldrb.w	r8, [r4, #249]	; 0xf9
   17be0:	f1b8 0f00 	cmp.w	r8, #0
   17be4:	f000 83b5 	beq.w	18352 <ull_conn_llcp+0xca6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17be8:	7903      	ldrb	r3, [r0, #4]
   17bea:	f043 0303 	orr.w	r3, r3, #3
   17bee:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   17bf0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17bf4:	07da      	lsls	r2, r3, #31
   17bf6:	f140 84d4 	bpl.w	185a2 <ull_conn_llcp+0xef6>
	    (conn->llcp_feature.features_conn &
   17bfa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   17bfe:	075b      	lsls	r3, r3, #29
   17c00:	f140 84cf 	bpl.w	185a2 <ull_conn_llcp+0xef6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   17c04:	2311      	movs	r3, #17
   17c06:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17c08:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   17c0a:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17c0e:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   17c10:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
   17c14:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	conn->llcp.encryption.error_code = 0U;
   17c18:	2200      	movs	r2, #0
   17c1a:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
	if (
   17c1e:	2b00      	cmp	r3, #0
   17c20:	f000 8454 	beq.w	184cc <ull_conn_llcp+0xe20>
	    !conn->llcp_enc.pause_tx &&
   17c24:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17c28:	0790      	lsls	r0, r2, #30
   17c2a:	f100 844f 	bmi.w	184cc <ull_conn_llcp+0xe20>
	    !conn->llcp_phy.pause_tx &&
   17c2e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17c32:	07d1      	lsls	r1, r2, #31
   17c34:	f100 844a 	bmi.w	184cc <ull_conn_llcp+0xe20>
		if (conn->tx_head == conn->tx_data) {
   17c38:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17c3c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17c3e:	bf04      	itt	eq
   17c40:	681a      	ldreq	r2, [r3, #0]
   17c42:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17c46:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17c4a:	2a00      	cmp	r2, #0
   17c4c:	f000 85e6 	beq.w	1881c <ull_conn_llcp+0x1170>
	tx->next = conn->tx_ctrl_last->next;
   17c50:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17c54:	681a      	ldr	r2, [r3, #0]
   17c56:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   17c5a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   17c5e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17c62:	f8d9 3000 	ldr.w	r3, [r9]
   17c66:	2b00      	cmp	r3, #0
   17c68:	f000 82cf 	beq.w	1820a <ull_conn_llcp+0xb5e>
	conn->llcp_ack = conn->llcp_req;
   17c6c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17c70:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   17c74:	e52d      	b.n	176d2 <ull_conn_llcp+0x26>
   17c76:	bf00      	nop
   17c78:	2000e47c 	.word	0x2000e47c
   17c7c:	00028760 	.word	0x00028760
   17c80:	0002833c 	.word	0x0002833c
   17c84:	000282a4 	.word	0x000282a4
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17c88:	48ab      	ldr	r0, [pc, #684]	; (17f38 <ull_conn_llcp+0x88c>)
   17c8a:	f7f8 fc93 	bl	105b4 <mem_acquire>
		if (tx) {
   17c8e:	4605      	mov	r5, r0
   17c90:	2800      	cmp	r0, #0
   17c92:	f43f ad22 	beq.w	176da <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   17c96:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   17c98:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c9c:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   17c9e:	4433      	add	r3, r6
			conn->llcp.chan_map.initiate = 0U;
   17ca0:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   17ca4:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   17ca6:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   17caa:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17cae:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   17cb2:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17cb4:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17cb6:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17cb8:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17cba:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17cbc:	2205      	movs	r2, #5
   17cbe:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17cc2:	3008      	adds	r0, #8
   17cc4:	f00c fb1e 	bl	24304 <memcpy>
	    conn->tx_head &&
   17cc8:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   17ccc:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   17cd0:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   17cd4:	2b00      	cmp	r3, #0
   17cd6:	f000 81b6 	beq.w	18046 <ull_conn_llcp+0x99a>
	    !conn->llcp_enc.pause_tx &&
   17cda:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17cde:	0797      	lsls	r7, r2, #30
   17ce0:	f100 81b1 	bmi.w	18046 <ull_conn_llcp+0x99a>
	    !conn->llcp_phy.pause_tx &&
   17ce4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17ce8:	07d6      	lsls	r6, r2, #31
   17cea:	f100 81ac 	bmi.w	18046 <ull_conn_llcp+0x99a>
		if (conn->tx_head == conn->tx_data) {
   17cee:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17cf2:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17cf4:	bf04      	itt	eq
   17cf6:	681a      	ldreq	r2, [r3, #0]
   17cf8:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17cfc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17d00:	2a00      	cmp	r2, #0
   17d02:	f000 8551 	beq.w	187a8 <ull_conn_llcp+0x10fc>
	tx->next = conn->tx_ctrl_last->next;
   17d06:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17d0a:	681a      	ldr	r2, [r3, #0]
   17d0c:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   17d0e:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   17d10:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   17d12:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17d16:	2b00      	cmp	r3, #0
   17d18:	f47f acdf 	bne.w	176da <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   17d1c:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   17d20:	e4db      	b.n	176da <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   17d22:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
   17d26:	f894 7124 	ldrb.w	r7, [r4, #292]	; 0x124
   17d2a:	42b9      	cmp	r1, r7
   17d2c:	d042      	beq.n	17db4 <ull_conn_llcp+0x708>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   17d2e:	1bc9      	subs	r1, r1, r7
   17d30:	07c9      	lsls	r1, r1, #31
   17d32:	f57f acce 	bpl.w	176d2 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   17d36:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17d3a:	f013 0701 	ands.w	r7, r3, #1
   17d3e:	f000 818d 	beq.w	1805c <ull_conn_llcp+0x9b0>
		rx = ll_pdu_rx_alloc();
   17d42:	f7fc fa6f 	bl	14224 <ll_pdu_rx_alloc>
		if (!rx) {
   17d46:	4607      	mov	r7, r0
   17d48:	b320      	cbz	r0, 17d94 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   17d4a:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   17d4e:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17d52:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   17d54:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   17d56:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17d58:	f043 0303 	orr.w	r3, r3, #3
   17d5c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   17d5e:	2309      	movs	r3, #9
   17d60:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   17d62:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17d64:	2303      	movs	r3, #3
   17d66:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   17d68:	4641      	mov	r1, r8
   17d6a:	2208      	movs	r2, #8
   17d6c:	3020      	adds	r0, #32
   17d6e:	f00c faf4 	bl	2435a <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
   17d72:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	dst[0] = val;
   17d76:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
   17d7a:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   17d7e:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   17d80:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
   17d84:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
   17d88:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   17d8a:	6808      	ldr	r0, [r1, #0]
   17d8c:	f7fc fa1c 	bl	141c8 <ll_rx_put>
		ll_rx_sched();
   17d90:	f7fc fa24 	bl	141dc <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17d94:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17d98:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
}
   17d9c:	e491      	b.n	176c2 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   17d9e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17da2:	2a00      	cmp	r2, #0
   17da4:	f47f ad9c 	bne.w	178e0 <ull_conn_llcp+0x234>
			tx->next = conn->tx_head;
   17da8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17daa:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17dae:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   17db2:	e59d      	b.n	178f0 <ull_conn_llcp+0x244>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   17db4:	f894 1131 	ldrb.w	r1, [r4, #305]	; 0x131
   17db8:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
   17dbc:	42b9      	cmp	r1, r7
   17dbe:	d02d      	beq.n	17e1c <ull_conn_llcp+0x770>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   17dc0:	1bc9      	subs	r1, r1, r7
   17dc2:	07c8      	lsls	r0, r1, #31
   17dc4:	f57f ac85 	bpl.w	176d2 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   17dc8:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   17dcc:	07d9      	lsls	r1, r3, #31
   17dce:	f140 8398 	bpl.w	18502 <ull_conn_llcp+0xe56>
	} else if (conn->llcp_version.rx) {
   17dd2:	0799      	lsls	r1, r3, #30
   17dd4:	f140 8387 	bpl.w	184e6 <ull_conn_llcp+0xe3a>
		rx = ll_pdu_rx_alloc();
   17dd8:	f7fc fa24 	bl	14224 <ll_pdu_rx_alloc>
		if (!rx) {
   17ddc:	4601      	mov	r1, r0
   17dde:	2800      	cmp	r0, #0
   17de0:	d0d8      	beq.n	17d94 <ull_conn_llcp+0x6e8>
		conn->llcp_version.ack = conn->llcp_version.req;
   17de2:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   17de6:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		rx->hdr.handle = conn->lll.handle;
   17dea:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   17dec:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17dee:	2303      	movs	r3, #3
   17df0:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17df2:	7f03      	ldrb	r3, [r0, #28]
   17df4:	f043 0303 	orr.w	r3, r3, #3
   17df8:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   17dfa:	2306      	movs	r3, #6
   17dfc:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17dfe:	230c      	movs	r3, #12
   17e00:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   17e02:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
   17e06:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   17e0a:	f8b4 3134 	ldrh.w	r3, [r4, #308]	; 0x134
   17e0e:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   17e12:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   17e16:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
   17e1a:	e7b6      	b.n	17d8a <ull_conn_llcp+0x6de>
		} else if (conn->llcp_conn_param.ack !=
   17e1c:	f894 717d 	ldrb.w	r7, [r4, #381]	; 0x17d
   17e20:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   17e24:	428f      	cmp	r7, r1
   17e26:	f000 81f3 	beq.w	18210 <ull_conn_llcp+0xb64>
	conn_upd = conn_upd_curr;
   17e2a:	4f44      	ldr	r7, [pc, #272]	; (17f3c <ull_conn_llcp+0x890>)
   17e2c:	6839      	ldr	r1, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
   17e2e:	2900      	cmp	r1, #0
   17e30:	f000 83c3 	beq.w	185ba <ull_conn_llcp+0xf0e>
   17e34:	428c      	cmp	r4, r1
   17e36:	f47f ac4c 	bne.w	176d2 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   17e3a:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
   17e3e:	f001 0107 	and.w	r1, r1, #7
   17e42:	2905      	cmp	r1, #5
   17e44:	f200 8659 	bhi.w	18afa <ull_conn_llcp+0x144e>
   17e48:	f20f 0804 	addw	r8, pc, #4
   17e4c:	f858 f021 	ldr.w	pc, [r8, r1, lsl #2]
   17e50:	00017f41 	.word	0x00017f41
   17e54:	00017eb9 	.word	0x00017eb9
   17e58:	00017e69 	.word	0x00017e69
   17e5c:	000176c3 	.word	0x000176c3
   17e60:	000176c3 	.word	0x000176c3
   17e64:	000176c3 	.word	0x000176c3
	if (conn->llcp_enc.pause_tx) {
   17e68:	f01e 0f02 	tst.w	lr, #2
   17e6c:	f47f ac31 	bne.w	176d2 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   17e70:	f7fc f9d8 	bl	14224 <ll_pdu_rx_alloc>
	if (!rx) {
   17e74:	4601      	mov	r1, r0
   17e76:	2800      	cmp	r0, #0
   17e78:	d08c      	beq.n	17d94 <ull_conn_llcp+0x6e8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17e7a:	f894 017e 	ldrb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17e7e:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17e80:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17e82:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17e86:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   17e8a:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17e8c:	f884 017e 	strb.w	r0, [r4, #382]	; 0x17e
	rx->hdr.handle = conn->lll.handle;
   17e90:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17e92:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17e94:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   17e96:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   17e98:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   17e9c:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   17e9e:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   17ea2:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   17ea4:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
   17ea8:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   17eaa:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   17eae:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17eb0:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   17eb2:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17eb4:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
   17eb6:	e768      	b.n	17d8a <ull_conn_llcp+0x6de>
	if (conn->llcp_conn_param.status) {
   17eb8:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   17ebc:	2b00      	cmp	r3, #0
   17ebe:	f040 8515 	bne.w	188ec <ull_conn_llcp+0x1240>
	if (!conn->lll.role) {
   17ec2:	2a00      	cmp	r2, #0
   17ec4:	f2c0 8559 	blt.w	1897a <ull_conn_llcp+0x12ce>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17ec8:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_offset_us = 0U;
   17ecc:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17ed0:	2205      	movs	r2, #5
   17ed2:	f362 0102 	bfi	r1, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   17ed6:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17eda:	f884 117e 	strb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_size = 1U;
   17ede:	2001      	movs	r0, #1
   17ee0:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
		if (conn->llcp_conn_param.preferred_periodicity) {
   17ee4:	2a00      	cmp	r2, #0
   17ee6:	f000 85c0 	beq.w	18a6a <ull_conn_llcp+0x13be>
				((conn->llcp_conn_param.interval_min /
   17eea:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   17eee:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   17ef2:	4403      	add	r3, r0
			conn->llcp_cu.interval =
   17ef4:	fb13 f302 	smulbb	r3, r3, r2
   17ef8:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17efa:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   17efe:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17f02:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
   17f06:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   17f0a:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   17f0e:	00d2      	lsls	r2, r2, #3
   17f10:	f021 010f 	bic.w	r1, r1, #15
   17f14:	f042 0202 	orr.w	r2, r2, #2
   17f18:	430a      	orrs	r2, r1
		conn->llcp_cu.ack--;
   17f1a:	f109 39ff 	add.w	r9, r9, #4294967295
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   17f1e:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
   17f22:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
   17f26:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   17f2a:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.ack--;
   17f2e:	f884 9111 	strb.w	r9, [r4, #273]	; 0x111
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17f32:	f7ff bbd2 	b.w	176da <ull_conn_llcp+0x2e>
   17f36:	bf00      	nop
   17f38:	2000e47c 	.word	0x2000e47c
   17f3c:	2000e3f8 	.word	0x2000e3f8
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17f40:	48cd      	ldr	r0, [pc, #820]	; (18278 <ull_conn_llcp+0xbcc>)
			event_counter = lll->event_counter +
   17f42:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
   17f46:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17f4a:	f7f8 fb33 	bl	105b4 <mem_acquire>
	if (!tx) {
   17f4e:	2800      	cmp	r0, #0
   17f50:	f43f af20 	beq.w	17d94 <ull_conn_llcp+0x6e8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17f54:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   17f56:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17f58:	f043 0303 	orr.w	r3, r3, #3
   17f5c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   17f5e:	2318      	movs	r3, #24
   17f60:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   17f62:	f8b4 1180 	ldrh.w	r1, [r4, #384]	; 0x180
   17f66:	8101      	strh	r1, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   17f68:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
   17f6c:	8141      	strh	r1, [r0, #10]
	p->preferred_periodicity = 0U;
   17f6e:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   17f70:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   17f74:	8181      	strh	r1, [r0, #12]
			event_counter = lll->event_counter +
   17f76:	44c8      	add	r8, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   17f78:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
	p->preferred_periodicity = 0U;
   17f7c:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   17f7e:	74c3      	strb	r3, [r0, #19]
   17f80:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   17f82:	f04f 33ff 	mov.w	r3, #4294967295
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   17f86:	81c1      	strh	r1, [r0, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   17f88:	7543      	strb	r3, [r0, #21]
   17f8a:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   17f8c:	75c3      	strb	r3, [r0, #23]
   17f8e:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   17f90:	7643      	strb	r3, [r0, #25]
   17f92:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   17f94:	76c3      	strb	r3, [r0, #27]
   17f96:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   17f98:	7743      	strb	r3, [r0, #29]
   17f9a:	7783      	strb	r3, [r0, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17f9c:	210f      	movs	r1, #15
	conn->procedure_expire = conn->procedure_reload;
   17f9e:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   17fa2:	71c1      	strb	r1, [r0, #7]
					lll->latency_prepare + lazy;
   17fa4:	44b0      	add	r8, r6
	conn->procedure_expire = conn->procedure_reload;
   17fa6:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   17faa:	f8a0 8011 	strh.w	r8, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   17fae:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   17fb2:	2104      	movs	r1, #4
   17fb4:	f361 0302 	bfi	r3, r1, #0, #3
   17fb8:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
	    conn->tx_head &&
   17fbc:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17fc0:	2b00      	cmp	r3, #0
   17fc2:	f000 840c 	beq.w	187de <ull_conn_llcp+0x1132>
	    !conn->llcp_enc.pause_tx &&
   17fc6:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17fca:	078a      	lsls	r2, r1, #30
   17fcc:	f100 8407 	bmi.w	187de <ull_conn_llcp+0x1132>
	    !conn->llcp_phy.pause_tx &&
   17fd0:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   17fd4:	07cf      	lsls	r7, r1, #31
   17fd6:	f100 8402 	bmi.w	187de <ull_conn_llcp+0x1132>
		if (conn->tx_head == conn->tx_data) {
   17fda:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   17fde:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   17fe0:	bf04      	itt	eq
   17fe2:	6819      	ldreq	r1, [r3, #0]
   17fe4:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17fe8:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   17fec:	2900      	cmp	r1, #0
   17fee:	f000 8574 	beq.w	18ada <ull_conn_llcp+0x142e>
	tx->next = conn->tx_ctrl_last->next;
   17ff2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17ff6:	6819      	ldr	r1, [r3, #0]
   17ff8:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17ffa:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   17ffc:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18000:	6803      	ldr	r3, [r0, #0]
   18002:	2b00      	cmp	r3, #0
   18004:	f47f aec6 	bne.w	17d94 <ull_conn_llcp+0x6e8>
		conn->tx_data_last = tx;
   18008:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1800c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18010:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   18014:	f7ff bb55 	b.w	176c2 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   18018:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1801c:	2b00      	cmp	r3, #0
   1801e:	f43f ad19 	beq.w	17a54 <ull_conn_llcp+0x3a8>
			conn->slave.llcp_type = LLCP_NONE;
   18022:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
   18026:	e519      	b.n	17a5c <ull_conn_llcp+0x3b0>
		conn->tx_data_last = tx;
   18028:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1802c:	e463      	b.n	178f6 <ull_conn_llcp+0x24a>
		if (!conn->tx_ctrl) {
   1802e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18032:	2a00      	cmp	r2, #0
   18034:	f47f adab 	bne.w	17b8e <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head;
   18038:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   1803c:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18040:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   18044:	e5ae      	b.n	17ba4 <ull_conn_llcp+0x4f8>
		if (!conn->tx_ctrl) {
   18046:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1804a:	2a00      	cmp	r2, #0
   1804c:	f47f ae5b 	bne.w	17d06 <ull_conn_llcp+0x65a>
			tx->next = conn->tx_head;
   18050:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   18052:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18056:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   1805a:	e65c      	b.n	17d16 <ull_conn_llcp+0x66a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1805c:	4886      	ldr	r0, [pc, #536]	; (18278 <ull_conn_llcp+0xbcc>)
   1805e:	f7f8 faa9 	bl	105b4 <mem_acquire>
	if (tx) {
   18062:	4680      	mov	r8, r0
   18064:	2800      	cmp	r0, #0
   18066:	f43f ae95 	beq.w	17d94 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack--;
   1806a:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
   1806e:	3b01      	subs	r3, #1
   18070:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		conn->llcp_feature.features_conn = LL_FEAT;
   18074:	4b81      	ldr	r3, [pc, #516]	; (1827c <ull_conn_llcp+0xbd0>)
   18076:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   1807a:	2309      	movs	r3, #9
   1807c:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   1807e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   18082:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18084:	7903      	ldrb	r3, [r0, #4]
   18086:	f043 0303 	orr.w	r3, r3, #3
   1808a:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   1808c:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   18090:	bfac      	ite	ge
   18092:	2308      	movge	r3, #8
   18094:	230e      	movlt	r3, #14
   18096:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   18098:	4639      	mov	r1, r7
   1809a:	4410      	add	r0, r2
   1809c:	f00c f95d 	bl	2435a <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
   180a0:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   180a4:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
   180a8:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   180ac:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   180ae:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
   180b2:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
   180b6:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   180ba:	2b00      	cmp	r3, #0
   180bc:	f000 80cf 	beq.w	1825e <ull_conn_llcp+0xbb2>
	    !conn->llcp_enc.pause_tx &&
   180c0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   180c4:	0792      	lsls	r2, r2, #30
   180c6:	f100 80ca 	bmi.w	1825e <ull_conn_llcp+0xbb2>
	    !conn->llcp_phy.pause_tx &&
   180ca:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   180ce:	07d7      	lsls	r7, r2, #31
   180d0:	f100 80c5 	bmi.w	1825e <ull_conn_llcp+0xbb2>
		if (conn->tx_head == conn->tx_data) {
   180d4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   180d8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   180da:	bf04      	itt	eq
   180dc:	681a      	ldreq	r2, [r3, #0]
   180de:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   180e2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   180e6:	2a00      	cmp	r2, #0
   180e8:	f000 8384 	beq.w	187f4 <ull_conn_llcp+0x1148>
	tx->next = conn->tx_ctrl_last->next;
   180ec:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   180f0:	681a      	ldr	r2, [r3, #0]
   180f2:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   180f6:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   180fa:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   180fe:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18102:	2b00      	cmp	r3, #0
   18104:	f000 8270 	beq.w	185e8 <ull_conn_llcp+0xf3c>
		conn->procedure_expire = conn->procedure_reload;
   18108:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1810c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18110:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
		conn->procedure_expire = conn->procedure_reload;
   18114:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	break;
   18118:	f7ff bad3 	b.w	176c2 <ull_conn_llcp+0x16>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   1811c:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   18120:	463b      	mov	r3, r7
   18122:	4642      	mov	r2, r8
   18124:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   18128:	f204 1069 	addw	r0, r4, #361	; 0x169
   1812c:	f004 fab4 	bl	1c698 <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   18130:	4639      	mov	r1, r7
   18132:	2210      	movs	r2, #16
   18134:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   18138:	f00c f8e4 	bl	24304 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   1813c:	2208      	movs	r2, #8
   1813e:	f104 0198 	add.w	r1, r4, #152	; 0x98
   18142:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   18146:	f00c f8dd 	bl	24304 <memcpy>
		lll->ccm_rx.direction = 0;
   1814a:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
		lll->ccm_rx.counter = 0;
   1814e:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
		lll->ccm_rx.direction = 0;
   18152:	f368 0300 	bfi	r3, r8, #0, #1
   18156:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
   1815a:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
		lll->ccm_rx.counter = 0;
   1815e:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
		lll->ccm_tx.direction = 1;
   18162:	f043 0301 	orr.w	r3, r3, #1
   18166:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
   1816a:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
   1816e:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
		lll->enc_rx = 1;
   18172:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
   18176:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
		lll->ccm_rx.counter = 0;
   1817a:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   1817e:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   18182:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   18186:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   1818a:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
		lll->enc_rx = 1;
   1818e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	if (!pdu_ctrl_tx) {
   18192:	f1ba 0f00 	cmp.w	sl, #0
   18196:	f000 8242 	beq.w	1861e <ull_conn_llcp+0xf72>
	conn->lll.enc_tx = 1;
   1819a:	b2db      	uxtb	r3, r3
   1819c:	f043 0310 	orr.w	r3, r3, #16
   181a0:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   181a4:	f899 3004 	ldrb.w	r3, [r9, #4]
   181a8:	f043 0303 	orr.w	r3, r3, #3
   181ac:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   181b0:	2301      	movs	r3, #1
   181b2:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
   181b6:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   181ba:	2306      	movs	r3, #6
   181bc:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   181c0:	2800      	cmp	r0, #0
   181c2:	d03c      	beq.n	1823e <ull_conn_llcp+0xb92>
	    !conn->llcp_enc.pause_tx &&
   181c4:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   181c8:	079b      	lsls	r3, r3, #30
   181ca:	d438      	bmi.n	1823e <ull_conn_llcp+0xb92>
	    !conn->llcp_phy.pause_tx &&
   181cc:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   181d0:	07df      	lsls	r7, r3, #31
   181d2:	d434      	bmi.n	1823e <ull_conn_llcp+0xb92>
		if (conn->tx_head == conn->tx_data) {
   181d4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   181d8:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
   181da:	bf04      	itt	eq
   181dc:	6803      	ldreq	r3, [r0, #0]
   181de:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   181e2:	f1be 0f00 	cmp.w	lr, #0
   181e6:	f000 830f 	beq.w	18808 <ull_conn_llcp+0x115c>
	tx->next = conn->tx_ctrl_last->next;
   181ea:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   181ee:	681a      	ldr	r2, [r3, #0]
   181f0:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   181f4:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   181f8:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   181fc:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18200:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   18204:	2800      	cmp	r0, #0
   18206:	f47f ad31 	bne.w	17c6c <ull_conn_llcp+0x5c0>
		conn->tx_data_last = tx;
   1820a:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1820e:	e52d      	b.n	17c6c <ull_conn_llcp+0x5c0>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   18210:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
   18214:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   18218:	4299      	cmp	r1, r3
   1821a:	d031      	beq.n	18280 <ull_conn_llcp+0xbd4>
			event_len_prep(conn);
   1821c:	4620      	mov	r0, r4
   1821e:	f7fd f91b 	bl	15458 <event_len_prep>
   18222:	e5b7      	b.n	17d94 <ull_conn_llcp+0x6e8>
		if (!conn->tx_ctrl) {
   18224:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18228:	2a00      	cmp	r2, #0
   1822a:	f47f abc1 	bne.w	179b0 <ull_conn_llcp+0x304>
			tx->next = conn->tx_head;
   1822e:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   18232:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18236:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   1823a:	f7ff bbc4 	b.w	179c6 <ull_conn_llcp+0x31a>
		if (!conn->tx_ctrl) {
   1823e:	f1be 0f00 	cmp.w	lr, #0
   18242:	f000 81e5 	beq.w	18610 <ull_conn_llcp+0xf64>
   18246:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	tx->next = conn->tx_ctrl_last->next;
   1824a:	680b      	ldr	r3, [r1, #0]
   1824c:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
   18250:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
   18254:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   18258:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
}
   1825c:	e7d0      	b.n	18200 <ull_conn_llcp+0xb54>
		if (!conn->tx_ctrl) {
   1825e:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18262:	2a00      	cmp	r2, #0
   18264:	f47f af42 	bne.w	180ec <ull_conn_llcp+0xa40>
			tx->next = conn->tx_head;
   18268:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   1826c:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18270:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   18274:	e745      	b.n	18102 <ull_conn_llcp+0xa56>
   18276:	bf00      	nop
   18278:	2000e47c 	.word	0x2000e47c
   1827c:	0001417f 	.word	0x0001417f
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   18280:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   18284:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   18288:	428b      	cmp	r3, r1
   1828a:	f43f aa22 	beq.w	176d2 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   1828e:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   18292:	f003 0703 	and.w	r7, r3, #3
   18296:	2f03      	cmp	r7, #3
   18298:	f000 82d4 	beq.w	18844 <ull_conn_llcp+0x1198>
   1829c:	2f00      	cmp	r7, #0
   1829e:	f47f aa17 	bne.w	176d0 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   182a2:	48d7      	ldr	r0, [pc, #860]	; (18600 <ull_conn_llcp+0xf54>)
   182a4:	f7f8 f986 	bl	105b4 <mem_acquire>
		if (!tx) {
   182a8:	2800      	cmp	r0, #0
   182aa:	f43f ad73 	beq.w	17d94 <ull_conn_llcp+0x6e8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   182ae:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		conn->lll.phy_flags = conn->llcp_phy.flags;
   182b2:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   182b6:	2201      	movs	r2, #1
   182b8:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   182bc:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   182c0:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   182c4:	f3c3 0782 	ubfx	r7, r3, #2, #3
   182c8:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   182cc:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
   182d0:	f3c1 0140 	ubfx	r1, r1, #1, #1
   182d4:	f361 07c3 	bfi	r7, r1, #3, #1
		conn->phy_pref_rx = conn->llcp_phy.rx;
   182d8:	f3c3 1142 	ubfx	r1, r3, #5, #3
   182dc:	f361 02c5 	bfi	r2, r1, #3, #3
   182e0:	f884 21b8 	strb.w	r2, [r4, #440]	; 0x1b8
		conn->phy_pref_tx = conn->llcp_phy.tx;
   182e4:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   182e8:	2303      	movs	r3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   182ea:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
		pdu_ctrl_tx->len =
   182ee:	7143      	strb	r3, [r0, #5]
		pr->tx_phys = conn->llcp_phy.tx;
   182f0:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   182f2:	2316      	movs	r3, #22
		pr->rx_phys = conn->llcp_phy.rx;
   182f4:	7241      	strb	r1, [r0, #9]
	    conn->tx_head &&
   182f6:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   182fa:	71c3      	strb	r3, [r0, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   182fc:	7903      	ldrb	r3, [r0, #4]
   182fe:	f043 0303 	orr.w	r3, r3, #3
   18302:	7103      	strb	r3, [r0, #4]
	if (
   18304:	2a00      	cmp	r2, #0
   18306:	f000 8292 	beq.w	1882e <ull_conn_llcp+0x1182>
	    !conn->llcp_enc.pause_tx &&
   1830a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1830e:	0799      	lsls	r1, r3, #30
   18310:	f100 828d 	bmi.w	1882e <ull_conn_llcp+0x1182>
	    !conn->llcp_phy.pause_tx &&
   18314:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   18318:	07db      	lsls	r3, r3, #31
   1831a:	f100 8288 	bmi.w	1882e <ull_conn_llcp+0x1182>
		if (conn->tx_head == conn->tx_data) {
   1831e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   18322:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   18324:	bf04      	itt	eq
   18326:	6813      	ldreq	r3, [r2, #0]
   18328:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1832c:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   18330:	2b00      	cmp	r3, #0
   18332:	f000 83cc 	beq.w	18ace <ull_conn_llcp+0x1422>
	tx->next = conn->tx_ctrl_last->next;
   18336:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1833a:	681a      	ldr	r2, [r3, #0]
   1833c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1833e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18340:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18344:	6803      	ldr	r3, [r0, #0]
   18346:	2b00      	cmp	r3, #0
   18348:	f47f aede 	bne.w	18108 <ull_conn_llcp+0xa5c>
		conn->tx_data_last = tx;
   1834c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18350:	e6da      	b.n	18108 <ull_conn_llcp+0xa5c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   18352:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   18356:	463b      	mov	r3, r7
   18358:	4642      	mov	r2, r8
   1835a:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   1835e:	f204 1069 	addw	r0, r4, #361	; 0x169
   18362:	f004 f999 	bl	1c698 <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   18366:	4639      	mov	r1, r7
   18368:	2210      	movs	r2, #16
   1836a:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1836e:	f00b ffc9 	bl	24304 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   18372:	2208      	movs	r2, #8
   18374:	f104 0198 	add.w	r1, r4, #152	; 0x98
   18378:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   1837c:	f00b ffc2 	bl	24304 <memcpy>
			lll->ccm_rx.direction = 1U;
   18380:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
			lll->ccm_rx.counter = 0U;
   18384:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
   18388:	f043 0301 	orr.w	r3, r3, #1
   1838c:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
   18390:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
			lll->ccm_rx.counter = 0U;
   18394:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
			lll->ccm_tx.direction = 0U;
   18398:	f368 0300 	bfi	r3, r8, #0, #1
   1839c:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
   183a0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
   183a4:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
			lll->enc_rx = 1U;
   183a8:	f043 0308 	orr.w	r3, r3, #8
   183ac:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   183b0:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   183b4:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   183b8:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   183bc:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
			lll->ccm_rx.counter = 0U;
   183c0:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   183c4:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   183c8:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   183cc:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   183d0:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   183d4:	2301      	movs	r3, #1
   183d6:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   183da:	2305      	movs	r3, #5
   183dc:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   183e0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   183e4:	2b00      	cmp	r3, #0
   183e6:	d066      	beq.n	184b6 <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   183e8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   183ec:	0792      	lsls	r2, r2, #30
   183ee:	d462      	bmi.n	184b6 <ull_conn_llcp+0xe0a>
	    !conn->llcp_phy.pause_tx &&
   183f0:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   183f4:	07d7      	lsls	r7, r2, #31
   183f6:	d45e      	bmi.n	184b6 <ull_conn_llcp+0xe0a>
		if (conn->tx_head == conn->tx_data) {
   183f8:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   183fc:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   183fe:	bf04      	itt	eq
   18400:	681a      	ldreq	r2, [r3, #0]
   18402:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18406:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1840a:	2a00      	cmp	r2, #0
   1840c:	f000 825c 	beq.w	188c8 <ull_conn_llcp+0x121c>
	tx->next = conn->tx_ctrl_last->next;
   18410:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18414:	681a      	ldr	r2, [r3, #0]
   18416:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1841a:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   1841e:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18422:	f8d9 3000 	ldr.w	r3, [r9]
   18426:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   1842a:	2b00      	cmp	r3, #0
   1842c:	f47f ac1e 	bne.w	17c6c <ull_conn_llcp+0x5c0>
   18430:	e6eb      	b.n	1820a <ull_conn_llcp+0xb5e>
	if (!pdu_ctrl_tx) {
   18432:	f1ba 0f00 	cmp.w	sl, #0
   18436:	f000 8160 	beq.w	186fa <ull_conn_llcp+0x104e>
	conn->lll.enc_tx = 1;
   1843a:	f043 0310 	orr.w	r3, r3, #16
   1843e:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18442:	7903      	ldrb	r3, [r0, #4]
   18444:	f043 0303 	orr.w	r3, r3, #3
   18448:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1844a:	2301      	movs	r3, #1
   1844c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1844e:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   18452:	2306      	movs	r3, #6
   18454:	71c3      	strb	r3, [r0, #7]
	if (
   18456:	2a00      	cmp	r2, #0
   18458:	f000 8098 	beq.w	1858c <ull_conn_llcp+0xee0>
	    !conn->llcp_enc.pause_tx &&
   1845c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18460:	079f      	lsls	r7, r3, #30
   18462:	f100 8093 	bmi.w	1858c <ull_conn_llcp+0xee0>
	    !conn->llcp_phy.pause_tx &&
   18466:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1846a:	07d8      	lsls	r0, r3, #31
   1846c:	f100 808e 	bmi.w	1858c <ull_conn_llcp+0xee0>
		if (conn->tx_head == conn->tx_data) {
   18470:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   18474:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   18476:	bf04      	itt	eq
   18478:	6813      	ldreq	r3, [r2, #0]
   1847a:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1847e:	f1bc 0f00 	cmp.w	ip, #0
   18482:	f000 8229 	beq.w	188d8 <ull_conn_llcp+0x122c>
	tx->next = conn->tx_ctrl_last->next;
   18486:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1848a:	681a      	ldr	r2, [r3, #0]
   1848c:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   18490:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   18494:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18498:	f8d9 3000 	ldr.w	r3, [r9]
   1849c:	2b00      	cmp	r3, #0
   1849e:	f000 8121 	beq.w	186e4 <ull_conn_llcp+0x1038>
		conn->llcp_enc.pause_rx = 0U;
   184a2:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   184a6:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   184aa:	f023 0303 	bic.w	r3, r3, #3
   184ae:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
   184b2:	f7ff bbdb 	b.w	17c6c <ull_conn_llcp+0x5c0>
		if (!conn->tx_ctrl) {
   184b6:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   184ba:	2a00      	cmp	r2, #0
   184bc:	d1a8      	bne.n	18410 <ull_conn_llcp+0xd64>
			tx->next = conn->tx_head;
   184be:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   184c2:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   184c6:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   184ca:	e7aa      	b.n	18422 <ull_conn_llcp+0xd76>
		if (!conn->tx_ctrl) {
   184cc:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   184d0:	2a00      	cmp	r2, #0
   184d2:	f47f abbd 	bne.w	17c50 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head;
   184d6:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   184da:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   184de:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   184e2:	f7ff bbbe 	b.w	17c62 <ull_conn_llcp+0x5b6>
		LL_ASSERT(0);
   184e6:	4a47      	ldr	r2, [pc, #284]	; (18604 <ull_conn_llcp+0xf58>)
   184e8:	4947      	ldr	r1, [pc, #284]	; (18608 <ull_conn_llcp+0xf5c>)
   184ea:	f640 33f4 	movw	r3, #3060	; 0xbf4
		LL_ASSERT(0);
   184ee:	4847      	ldr	r0, [pc, #284]	; (1860c <ull_conn_llcp+0xf60>)
   184f0:	f009 fa66 	bl	219c0 <printk>
   184f4:	4040      	eors	r0, r0
   184f6:	f380 8811 	msr	BASEPRI, r0
   184fa:	f04f 0003 	mov.w	r0, #3
   184fe:	df02      	svc	2
		break;
   18500:	e448      	b.n	17d94 <ull_conn_llcp+0x6e8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18502:	483f      	ldr	r0, [pc, #252]	; (18600 <ull_conn_llcp+0xf54>)
   18504:	f7f8 f856 	bl	105b4 <mem_acquire>
		if (tx) {
   18508:	2800      	cmp	r0, #0
   1850a:	f43f ac43 	beq.w	17d94 <ull_conn_llcp+0x6e8>
			conn->llcp_version.ack--;
   1850e:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   18512:	3b01      	subs	r3, #1
   18514:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
			conn->llcp_version.tx = 1U;
   18518:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1851c:	f043 0301 	orr.w	r3, r3, #1
   18520:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   18524:	7903      	ldrb	r3, [r0, #4]
   18526:	f043 0303 	orr.w	r3, r3, #3
   1852a:	7103      	strb	r3, [r0, #4]
			pdu->len =
   1852c:	2306      	movs	r3, #6
   1852e:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   18530:	230c      	movs	r3, #12
   18532:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   18534:	230b      	movs	r3, #11
   18536:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   18538:	f06f 030e 	mvn.w	r3, #14
   1853c:	7243      	strb	r3, [r0, #9]
   1853e:	2305      	movs	r3, #5
   18540:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   18542:	f04f 33ff 	mov.w	r3, #4294967295
   18546:	72c3      	strb	r3, [r0, #11]
   18548:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   1854a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   1854e:	2b00      	cmp	r3, #0
   18550:	f000 80b8 	beq.w	186c4 <ull_conn_llcp+0x1018>
	    !conn->llcp_enc.pause_tx &&
   18554:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18558:	0792      	lsls	r2, r2, #30
   1855a:	f100 80b3 	bmi.w	186c4 <ull_conn_llcp+0x1018>
	    !conn->llcp_phy.pause_tx &&
   1855e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   18562:	07d7      	lsls	r7, r2, #31
   18564:	f100 80ae 	bmi.w	186c4 <ull_conn_llcp+0x1018>
		if (conn->tx_head == conn->tx_data) {
   18568:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1856c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1856e:	bf04      	itt	eq
   18570:	681a      	ldreq	r2, [r3, #0]
   18572:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18576:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1857a:	2a00      	cmp	r2, #0
   1857c:	f47f aedb 	bne.w	18336 <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head->next;
   18580:	681a      	ldr	r2, [r3, #0]
   18582:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   18584:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18586:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   1858a:	e6db      	b.n	18344 <ull_conn_llcp+0xc98>
		if (!conn->tx_ctrl) {
   1858c:	f1bc 0f00 	cmp.w	ip, #0
   18590:	f47f af79 	bne.w	18486 <ull_conn_llcp+0xdda>
			tx->next = conn->tx_head;
   18594:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
   18598:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1859c:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   185a0:	e77a      	b.n	18498 <ull_conn_llcp+0xdec>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   185a2:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   185a4:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   185a8:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   185ac:	2702      	movs	r7, #2
   185ae:	f7ff bb2f 	b.w	17c10 <ull_conn_llcp+0x564>
		conn->tx_data_last = tx;
   185b2:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   185b6:	f7ff ba09 	b.w	179cc <ull_conn_llcp+0x320>
	switch (conn->llcp_conn_param.state) {
   185ba:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   185be:	f003 0307 	and.w	r3, r3, #7
   185c2:	2b05      	cmp	r3, #5
   185c4:	f200 8299 	bhi.w	18afa <ull_conn_llcp+0x144e>
   185c8:	a101      	add	r1, pc, #4	; (adr r1, 185d0 <ull_conn_llcp+0xf24>)
   185ca:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   185ce:	bf00      	nop
   185d0:	00017f41 	.word	0x00017f41
   185d4:	00017eb9 	.word	0x00017eb9
   185d8:	00017e69 	.word	0x00017e69
   185dc:	000176d3 	.word	0x000176d3
   185e0:	000176d3 	.word	0x000176d3
   185e4:	000176d3 	.word	0x000176d3
		conn->tx_data_last = tx;
   185e8:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
		conn->procedure_expire = conn->procedure_reload;
   185ec:	e58c      	b.n	18108 <ull_conn_llcp+0xa5c>
			tx->next = conn->tx_head->next;
   185ee:	681a      	ldr	r2, [r3, #0]
   185f0:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   185f2:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   185f4:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   185f6:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   185fa:	f7ff b979 	b.w	178f0 <ull_conn_llcp+0x244>
   185fe:	bf00      	nop
   18600:	2000e47c 	.word	0x2000e47c
   18604:	00028760 	.word	0x00028760
   18608:	0002833c 	.word	0x0002833c
   1860c:	000282a4 	.word	0x000282a4
			tx->next = conn->tx_head;
   18610:	f8c9 0000 	str.w	r0, [r9]
				conn->tx_ctrl = tx;
   18614:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18618:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1861c:	e5f0      	b.n	18200 <ull_conn_llcp+0xb54>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1861e:	48b2      	ldr	r0, [pc, #712]	; (188e8 <ull_conn_llcp+0x123c>)
   18620:	f7f7 ffc8 	bl	105b4 <mem_acquire>
		if (!tx) {
   18624:	4603      	mov	r3, r0
   18626:	2800      	cmp	r0, #0
   18628:	f000 8241 	beq.w	18aae <ull_conn_llcp+0x1402>
	conn->lll.enc_tx = 1;
   1862c:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
   18630:	f042 0210 	orr.w	r2, r2, #16
   18634:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18638:	2201      	movs	r2, #1
   1863a:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1863c:	7902      	ldrb	r2, [r0, #4]
   1863e:	f042 0203 	orr.w	r2, r2, #3
   18642:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   18644:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   18648:	2106      	movs	r1, #6
   1864a:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
   1864c:	4610      	mov	r0, r2
	if (
   1864e:	b302      	cbz	r2, 18692 <ull_conn_llcp+0xfe6>
	    !conn->llcp_enc.pause_tx &&
   18650:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18654:	078f      	lsls	r7, r1, #30
   18656:	d41c      	bmi.n	18692 <ull_conn_llcp+0xfe6>
	    !conn->llcp_phy.pause_tx &&
   18658:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   1865c:	07c9      	lsls	r1, r1, #31
   1865e:	d418      	bmi.n	18692 <ull_conn_llcp+0xfe6>
		if (conn->tx_head == conn->tx_data) {
   18660:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18664:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   18668:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   1866a:	bf04      	itt	eq
   1866c:	6811      	ldreq	r1, [r2, #0]
   1866e:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18672:	f1bc 0f00 	cmp.w	ip, #0
   18676:	f000 8179 	beq.w	1896c <ull_conn_llcp+0x12c0>
	tx->next = conn->tx_ctrl_last->next;
   1867a:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   1867e:	6808      	ldr	r0, [r1, #0]
   18680:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   18682:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   18684:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18688:	6819      	ldr	r1, [r3, #0]
   1868a:	b331      	cbz	r1, 186da <ull_conn_llcp+0x102e>
	    conn->tx_head &&
   1868c:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   1868e:	46e6      	mov	lr, ip
   18690:	e598      	b.n	181c4 <ull_conn_llcp+0xb18>
		if (!conn->tx_ctrl) {
   18692:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   18696:	46e6      	mov	lr, ip
   18698:	f1bc 0f00 	cmp.w	ip, #0
   1869c:	d025      	beq.n	186ea <ull_conn_llcp+0x103e>
	tx->next = conn->tx_ctrl_last->next;
   1869e:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   186a2:	680f      	ldr	r7, [r1, #0]
   186a4:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   186a6:	600b      	str	r3, [r1, #0]
	if (!tx->next) {
   186a8:	681f      	ldr	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   186aa:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   186ae:	4619      	mov	r1, r3
	if (!tx->next) {
   186b0:	b19f      	cbz	r7, 186da <ull_conn_llcp+0x102e>
	if (
   186b2:	2a00      	cmp	r2, #0
   186b4:	f43f adc9 	beq.w	1824a <ull_conn_llcp+0xb9e>
	    !conn->llcp_enc.pause_tx &&
   186b8:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   186bc:	079b      	lsls	r3, r3, #30
   186be:	f57f ad85 	bpl.w	181cc <ull_conn_llcp+0xb20>
   186c2:	e5c2      	b.n	1824a <ull_conn_llcp+0xb9e>
		if (!conn->tx_ctrl) {
   186c4:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   186c8:	2a00      	cmp	r2, #0
   186ca:	f47f ae34 	bne.w	18336 <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   186ce:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   186d0:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   186d4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   186d8:	e634      	b.n	18344 <ull_conn_llcp+0xc98>
		conn->tx_data_last = tx;
   186da:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	    conn->tx_head &&
   186de:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   186e0:	46e6      	mov	lr, ip
   186e2:	e56d      	b.n	181c0 <ull_conn_llcp+0xb14>
		conn->tx_data_last = tx;
   186e4:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   186e8:	e6db      	b.n	184a2 <ull_conn_llcp+0xdf6>
			tx->next = conn->tx_head;
   186ea:	601a      	str	r2, [r3, #0]
			conn->tx_head = tx;
   186ec:	469c      	mov	ip, r3
				conn->tx_ctrl = tx;
   186ee:	e9c4 336f 	strd	r3, r3, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   186f2:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   186f6:	461a      	mov	r2, r3
   186f8:	e7c6      	b.n	18688 <ull_conn_llcp+0xfdc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   186fa:	487b      	ldr	r0, [pc, #492]	; (188e8 <ull_conn_llcp+0x123c>)
   186fc:	f7f7 ff5a 	bl	105b4 <mem_acquire>
		if (!tx) {
   18700:	4601      	mov	r1, r0
   18702:	2800      	cmp	r0, #0
   18704:	f000 81e0 	beq.w	18ac8 <ull_conn_llcp+0x141c>
	conn->lll.enc_tx = 1;
   18708:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   1870c:	f043 0310 	orr.w	r3, r3, #16
   18710:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18714:	2301      	movs	r3, #1
   18716:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18718:	7903      	ldrb	r3, [r0, #4]
	    conn->tx_head &&
   1871a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1871e:	f043 0303 	orr.w	r3, r3, #3
   18722:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   18724:	2306      	movs	r3, #6
   18726:	71c3      	strb	r3, [r0, #7]
	if (
   18728:	b312      	cbz	r2, 18770 <ull_conn_llcp+0x10c4>
	    !conn->llcp_enc.pause_tx &&
   1872a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1872e:	0798      	lsls	r0, r3, #30
   18730:	d41e      	bmi.n	18770 <ull_conn_llcp+0x10c4>
	    !conn->llcp_phy.pause_tx &&
   18732:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   18736:	07db      	lsls	r3, r3, #31
   18738:	d41a      	bmi.n	18770 <ull_conn_llcp+0x10c4>
		if (conn->tx_head == conn->tx_data) {
   1873a:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1873e:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   18742:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   18744:	bf04      	itt	eq
   18746:	681b      	ldreq	r3, [r3, #0]
   18748:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1874c:	f1bc 0f00 	cmp.w	ip, #0
   18750:	f000 8184 	beq.w	18a5c <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   18754:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   18758:	6803      	ldr	r3, [r0, #0]
   1875a:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   1875c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   1875e:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18762:	680b      	ldr	r3, [r1, #0]
   18764:	2b00      	cmp	r3, #0
   18766:	f47f ae79 	bne.w	1845c <ull_conn_llcp+0xdb0>
		conn->tx_data_last = tx;
   1876a:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   1876e:	e672      	b.n	18456 <ull_conn_llcp+0xdaa>
		if (!conn->tx_ctrl) {
   18770:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   18774:	f1bc 0f00 	cmp.w	ip, #0
   18778:	d029      	beq.n	187ce <ull_conn_llcp+0x1122>
	tx->next = conn->tx_ctrl_last->next;
   1877a:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   1877e:	6803      	ldr	r3, [r0, #0]
   18780:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   18782:	6001      	str	r1, [r0, #0]
	if (!tx->next) {
   18784:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   18786:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1878a:	2b00      	cmp	r3, #0
   1878c:	f47f ae63 	bne.w	18456 <ull_conn_llcp+0xdaa>
   18790:	e7eb      	b.n	1876a <ull_conn_llcp+0x10be>
			tx->next = conn->tx_head->next;
   18792:	681a      	ldr	r2, [r3, #0]
   18794:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   18798:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1879c:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   187a0:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   187a4:	f7ff b9fe 	b.w	17ba4 <ull_conn_llcp+0x4f8>
			tx->next = conn->tx_head->next;
   187a8:	681a      	ldr	r2, [r3, #0]
   187aa:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   187ac:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   187ae:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   187b0:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   187b4:	f7ff baaf 	b.w	17d16 <ull_conn_llcp+0x66a>
			tx->next = conn->tx_head->next;
   187b8:	681a      	ldr	r2, [r3, #0]
   187ba:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   187be:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   187c2:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   187c6:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   187ca:	f7ff b8fc 	b.w	179c6 <ull_conn_llcp+0x31a>
			tx->next = conn->tx_head;
   187ce:	600a      	str	r2, [r1, #0]
			conn->tx_head = tx;
   187d0:	468c      	mov	ip, r1
				conn->tx_ctrl = tx;
   187d2:	e9c4 116f 	strd	r1, r1, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   187d6:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
   187da:	460a      	mov	r2, r1
   187dc:	e7c1      	b.n	18762 <ull_conn_llcp+0x10b6>
		if (!conn->tx_ctrl) {
   187de:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   187e2:	2900      	cmp	r1, #0
   187e4:	f47f ac05 	bne.w	17ff2 <ull_conn_llcp+0x946>
			tx->next = conn->tx_head;
   187e8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   187ea:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   187ee:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   187f2:	e405      	b.n	18000 <ull_conn_llcp+0x954>
			tx->next = conn->tx_head->next;
   187f4:	681a      	ldr	r2, [r3, #0]
   187f6:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   187fa:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   187fe:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   18802:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   18806:	e47c      	b.n	18102 <ull_conn_llcp+0xa56>
			tx->next = conn->tx_head->next;
   18808:	6803      	ldr	r3, [r0, #0]
   1880a:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   1880e:	f8c0 9000 	str.w	r9, [r0]
	if (!tx->next) {
   18812:	f8d9 0000 	ldr.w	r0, [r9]
				conn->tx_ctrl_last = tx;
   18816:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   1881a:	e4f1      	b.n	18200 <ull_conn_llcp+0xb54>
			tx->next = conn->tx_head->next;
   1881c:	681a      	ldr	r2, [r3, #0]
   1881e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   18822:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   18826:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   1882a:	f7ff ba1a 	b.w	17c62 <ull_conn_llcp+0x5b6>
		if (!conn->tx_ctrl) {
   1882e:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   18832:	2b00      	cmp	r3, #0
   18834:	f47f ad7f 	bne.w	18336 <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   18838:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1883a:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1883e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18842:	e57f      	b.n	18344 <ull_conn_llcp+0xc98>
		if (conn->llcp_phy.tx & PHY_2M) {
   18844:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   18846:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
		if (conn->llcp_phy.tx & PHY_2M) {
   1884a:	f3c3 0282 	ubfx	r2, r3, #2, #3
   1884e:	f140 8118 	bpl.w	18a82 <ull_conn_llcp+0x13d6>
			conn->llcp_phy.tx = PHY_2M;
   18852:	2202      	movs	r2, #2
   18854:	f362 0384 	bfi	r3, r2, #2, #3
   18858:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.rx & PHY_2M) {
   1885c:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   18860:	065f      	lsls	r7, r3, #25
   18862:	ea4f 1253 	mov.w	r2, r3, lsr #5
   18866:	f140 8104 	bpl.w	18a72 <ull_conn_llcp+0x13c6>
			conn->llcp_phy.rx = PHY_2M;
   1886a:	2202      	movs	r2, #2
   1886c:	f362 1347 	bfi	r3, r2, #5, #3
   18870:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->llcp_ack -= 2U;
   18874:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   18876:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
   1887a:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   1887e:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp_ack -= 2U;
   18882:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   18886:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   1888a:	f3c2 0182 	ubfx	r1, r2, #2, #3
   1888e:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   18892:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   18896:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   1889a:	428f      	cmp	r7, r1
   1889c:	bf08      	it	eq
   1889e:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   188a0:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   188a2:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   188a6:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   188aa:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   188ae:	bf08      	it	eq
   188b0:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   188b2:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   188b6:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   188ba:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   188bc:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
   188c0:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   188c4:	f7fe bf59 	b.w	1777a <ull_conn_llcp+0xce>
			tx->next = conn->tx_head->next;
   188c8:	681a      	ldr	r2, [r3, #0]
   188ca:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   188ce:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   188d2:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   188d6:	e5a4      	b.n	18422 <ull_conn_llcp+0xd76>
			tx->next = conn->tx_head->next;
   188d8:	6813      	ldr	r3, [r2, #0]
   188da:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   188de:	f8c2 9000 	str.w	r9, [r2]
				conn->tx_ctrl_last = tx;
   188e2:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   188e6:	e5d7      	b.n	18498 <ull_conn_llcp+0xdec>
   188e8:	2000e47c 	.word	0x2000e47c
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   188ec:	4885      	ldr	r0, [pc, #532]	; (18b04 <ull_conn_llcp+0x1458>)
   188ee:	f7f7 fe61 	bl	105b4 <mem_acquire>
		if (!tx) {
   188f2:	2800      	cmp	r0, #0
   188f4:	f43f aa4e 	beq.w	17d94 <ull_conn_llcp+0x6e8>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   188f8:	7903      	ldrb	r3, [r0, #4]
   188fa:	f043 0303 	orr.w	r3, r3, #3
   188fe:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   18900:	2311      	movs	r3, #17
   18902:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   18904:	2303      	movs	r3, #3
   18906:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18908:	230f      	movs	r3, #15
   1890a:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   1890c:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   18910:	7243      	strb	r3, [r0, #9]
	    conn->tx_head &&
   18912:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   18916:	2b00      	cmp	r3, #0
   18918:	f000 8095 	beq.w	18a46 <ull_conn_llcp+0x139a>
	    !conn->llcp_enc.pause_tx &&
   1891c:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18920:	0789      	lsls	r1, r1, #30
   18922:	f100 8090 	bmi.w	18a46 <ull_conn_llcp+0x139a>
	    !conn->llcp_phy.pause_tx &&
   18926:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   1892a:	07ca      	lsls	r2, r1, #31
   1892c:	f100 808b 	bmi.w	18a46 <ull_conn_llcp+0x139a>
		if (conn->tx_head == conn->tx_data) {
   18930:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18934:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   18936:	bf04      	itt	eq
   18938:	6819      	ldreq	r1, [r3, #0]
   1893a:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1893e:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18942:	2900      	cmp	r1, #0
   18944:	f000 80a7 	beq.w	18a96 <ull_conn_llcp+0x13ea>
	tx->next = conn->tx_ctrl_last->next;
   18948:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1894c:	6819      	ldr	r1, [r3, #0]
   1894e:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18950:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18952:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18956:	6803      	ldr	r3, [r0, #0]
   18958:	2b00      	cmp	r3, #0
   1895a:	d067      	beq.n	18a2c <ull_conn_llcp+0x1380>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1895c:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   18960:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   18964:	2300      	movs	r3, #0
   18966:	603b      	str	r3, [r7, #0]
   18968:	f7ff ba14 	b.w	17d94 <ull_conn_llcp+0x6e8>
			tx->next = conn->tx_head->next;
   1896c:	6811      	ldr	r1, [r2, #0]
   1896e:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   18970:	469c      	mov	ip, r3
   18972:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   18974:	e9c4 3370 	strd	r3, r3, [r4, #448]	; 0x1c0
   18978:	e686      	b.n	18688 <ull_conn_llcp+0xfdc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1897a:	4862      	ldr	r0, [pc, #392]	; (18b04 <ull_conn_llcp+0x1458>)
   1897c:	f7f7 fe1a 	bl	105b4 <mem_acquire>
	if (!tx) {
   18980:	2800      	cmp	r0, #0
   18982:	f43f aa07 	beq.w	17d94 <ull_conn_llcp+0x6e8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18986:	7902      	ldrb	r2, [r0, #4]
   18988:	f042 0203 	orr.w	r2, r2, #3
   1898c:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   1898e:	2218      	movs	r2, #24
   18990:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   18992:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
   18996:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   18998:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   1899c:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   1899e:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
   189a2:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   189a4:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   189a8:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   189aa:	2210      	movs	r2, #16
   189ac:	71c2      	strb	r2, [r0, #7]
	rsp->preferred_periodicity =
   189ae:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
   189b2:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   189b4:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
	    conn->tx_head &&
   189b8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	rsp->reference_conn_event_count =
   189bc:	f8a0 1011 	strh.w	r1, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   189c0:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   189c4:	f8a0 1013 	strh.w	r1, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   189c8:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
   189cc:	f8a0 1015 	strh.w	r1, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   189d0:	f8b4 1190 	ldrh.w	r1, [r4, #400]	; 0x190
   189d4:	f8a0 1017 	strh.w	r1, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   189d8:	f8b4 1192 	ldrh.w	r1, [r4, #402]	; 0x192
   189dc:	f8a0 1019 	strh.w	r1, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   189e0:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
   189e4:	f8a0 101b 	strh.w	r1, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   189e8:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   189ec:	f8a0 101d 	strh.w	r1, [r0, #29]
	if (
   189f0:	b1fa      	cbz	r2, 18a32 <ull_conn_llcp+0x1386>
	    !conn->llcp_enc.pause_tx &&
   189f2:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   189f6:	0789      	lsls	r1, r1, #30
   189f8:	d41b      	bmi.n	18a32 <ull_conn_llcp+0x1386>
	    !conn->llcp_phy.pause_tx &&
   189fa:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   189fe:	07cb      	lsls	r3, r1, #31
   18a00:	d417      	bmi.n	18a32 <ull_conn_llcp+0x1386>
		if (conn->tx_head == conn->tx_data) {
   18a02:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18a06:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   18a08:	bf04      	itt	eq
   18a0a:	6811      	ldreq	r1, [r2, #0]
   18a0c:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18a10:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18a14:	2900      	cmp	r1, #0
   18a16:	d044      	beq.n	18aa2 <ull_conn_llcp+0x13f6>
	tx->next = conn->tx_ctrl_last->next;
   18a18:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   18a1c:	6811      	ldr	r1, [r2, #0]
   18a1e:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18a20:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   18a22:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18a26:	6802      	ldr	r2, [r0, #0]
   18a28:	2a00      	cmp	r2, #0
   18a2a:	d197      	bne.n	1895c <ull_conn_llcp+0x12b0>
		conn->tx_data_last = tx;
   18a2c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18a30:	e794      	b.n	1895c <ull_conn_llcp+0x12b0>
		if (!conn->tx_ctrl) {
   18a32:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18a36:	2900      	cmp	r1, #0
   18a38:	d1ee      	bne.n	18a18 <ull_conn_llcp+0x136c>
			tx->next = conn->tx_head;
   18a3a:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18a3c:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18a40:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18a44:	e7ef      	b.n	18a26 <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   18a46:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18a4a:	2900      	cmp	r1, #0
   18a4c:	f47f af7c 	bne.w	18948 <ull_conn_llcp+0x129c>
			tx->next = conn->tx_head;
   18a50:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18a52:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18a56:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18a5a:	e77c      	b.n	18956 <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18a5c:	6813      	ldr	r3, [r2, #0]
   18a5e:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
   18a60:	468c      	mov	ip, r1
   18a62:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl_last = tx;
   18a64:	e9c4 1170 	strd	r1, r1, [r4, #448]	; 0x1c0
   18a68:	e67b      	b.n	18762 <ull_conn_llcp+0x10b6>
				conn->llcp_conn_param.interval_max;
   18a6a:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   18a6e:	f7ff ba44 	b.w	17efa <ull_conn_llcp+0x84e>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   18a72:	07d1      	lsls	r1, r2, #31
   18a74:	d51f      	bpl.n	18ab6 <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   18a76:	2201      	movs	r2, #1
   18a78:	f362 1347 	bfi	r3, r2, #5, #3
   18a7c:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18a80:	e6f8      	b.n	18874 <ull_conn_llcp+0x11c8>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   18a82:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   18a84:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		} else if (conn->llcp_phy.tx & PHY_1M) {
   18a88:	d52e      	bpl.n	18ae8 <ull_conn_llcp+0x143c>
			conn->llcp_phy.tx = PHY_1M;
   18a8a:	2201      	movs	r2, #1
   18a8c:	f362 0384 	bfi	r3, r2, #2, #3
   18a90:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18a94:	e6e2      	b.n	1885c <ull_conn_llcp+0x11b0>
			tx->next = conn->tx_head->next;
   18a96:	6819      	ldr	r1, [r3, #0]
   18a98:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18a9a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18a9c:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18aa0:	e759      	b.n	18956 <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18aa2:	6811      	ldr	r1, [r2, #0]
   18aa4:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18aa6:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   18aa8:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18aac:	e7bb      	b.n	18a26 <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   18aae:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
   18ab2:	f7ff bb85 	b.w	181c0 <ull_conn_llcp+0xb14>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   18ab6:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   18aba:	bf18      	it	ne
   18abc:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   18abe:	f362 1347 	bfi	r3, r2, #5, #3
   18ac2:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18ac6:	e6d5      	b.n	18874 <ull_conn_llcp+0x11c8>
   18ac8:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   18acc:	e4c3      	b.n	18456 <ull_conn_llcp+0xdaa>
			tx->next = conn->tx_head->next;
   18ace:	6813      	ldr	r3, [r2, #0]
   18ad0:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   18ad2:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   18ad4:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18ad8:	e434      	b.n	18344 <ull_conn_llcp+0xc98>
			tx->next = conn->tx_head->next;
   18ada:	6819      	ldr	r1, [r3, #0]
   18adc:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18ade:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18ae0:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18ae4:	f7ff ba8c 	b.w	18000 <ull_conn_llcp+0x954>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   18ae8:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   18aec:	bf18      	it	ne
   18aee:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   18af0:	f362 0384 	bfi	r3, r2, #2, #3
   18af4:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18af8:	e6b0      	b.n	1885c <ull_conn_llcp+0x11b0>
		LL_ASSERT(0);
   18afa:	4a03      	ldr	r2, [pc, #12]	; (18b08 <ull_conn_llcp+0x145c>)
   18afc:	4903      	ldr	r1, [pc, #12]	; (18b0c <ull_conn_llcp+0x1460>)
   18afe:	f640 531f 	movw	r3, #3359	; 0xd1f
   18b02:	e4f4      	b.n	184ee <ull_conn_llcp+0xe42>
   18b04:	2000e47c 	.word	0x2000e47c
   18b08:	00028760 	.word	0x00028760
   18b0c:	0002833c 	.word	0x0002833c

00018b10 <ull_conn_tx_demux>:
{
   18b10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18b14:	4f24      	ldr	r7, [pc, #144]	; (18ba8 <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18b16:	4e25      	ldr	r6, [pc, #148]	; (18bac <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18b18:	78fa      	ldrb	r2, [r7, #3]
{
   18b1a:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   18b1c:	1d3d      	adds	r5, r7, #4
   18b1e:	e021      	b.n	18b64 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18b20:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   18b24:	4630      	mov	r0, r6
   18b26:	f7f7 fd77 	bl	10618 <mem_get>
	if (conn->lll.handle != handle) {
   18b2a:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   18b2c:	bb32      	cbnz	r2, 18b7c <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   18b2e:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   18b32:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
			tx->next = NULL;
   18b36:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   18b38:	b359      	cbz	r1, 18b92 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   18b3a:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
   18b3e:	b102      	cbz	r2, 18b42 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   18b40:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   18b42:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
		MFIFO_DEQUEUE(conn_tx);
   18b46:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   18b48:	78bb      	ldrb	r3, [r7, #2]
   18b4a:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   18b4c:	429a      	cmp	r2, r3
   18b4e:	d005      	beq.n	18b5c <ull_conn_tx_demux+0x4c>
	_first += 1U;
   18b50:	3301      	adds	r3, #1
   18b52:	b2db      	uxtb	r3, r3
		_first = 0U;
   18b54:	4299      	cmp	r1, r3
   18b56:	bf08      	it	eq
   18b58:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18b5a:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   18b5c:	3c01      	subs	r4, #1
   18b5e:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18b62:	d01f      	beq.n	18ba4 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18b64:	78bb      	ldrb	r3, [r7, #2]
   18b66:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   18b68:	4293      	cmp	r3, r2
   18b6a:	d01b      	beq.n	18ba4 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   18b6c:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   18b70:	eb15 0803 	adds.w	r8, r5, r3
   18b74:	d016      	beq.n	18ba4 <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   18b76:	5aea      	ldrh	r2, [r5, r3]
   18b78:	2a00      	cmp	r2, #0
   18b7a:	d0d1      	beq.n	18b20 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   18b7c:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   18b80:	790b      	ldrb	r3, [r1, #4]
   18b82:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   18b86:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   18b8a:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   18b8c:	f7fb fb60 	bl	14250 <ll_tx_ack_put>
   18b90:	e7d9      	b.n	18b46 <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   18b92:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
				conn->tx_data = tx;
   18b96:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
				if (!conn->tx_head) {
   18b9a:	2a00      	cmp	r2, #0
   18b9c:	d1cd      	bne.n	18b3a <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   18b9e:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
			if (conn->tx_data_last) {
   18ba2:	e7ce      	b.n	18b42 <ull_conn_tx_demux+0x32>
}
   18ba4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18ba8:	200005d0 	.word	0x200005d0
   18bac:	2000e224 	.word	0x2000e224

00018bb0 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   18bb0:	4b3b      	ldr	r3, [pc, #236]	; (18ca0 <conn_cleanup+0xf0>)
   18bb2:	681a      	ldr	r2, [r3, #0]
{
   18bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   18bb8:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   18bba:	bf04      	itt	eq
   18bbc:	2200      	moveq	r2, #0
   18bbe:	601a      	streq	r2, [r3, #0]
	rx = conn->llcp_rx;
   18bc0:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
	rx->hdr.handle = conn->lll.handle;
   18bc4:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18bc6:	f8a0 3142 	strh.w	r3, [r0, #322]	; 0x142
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18bca:	2314      	movs	r3, #20
{
   18bcc:	b083      	sub	sp, #12
   18bce:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   18bd0:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18bd4:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	*((uint8_t *)rx->pdu) = reason;
   18bd8:	f880 1158 	strb.w	r1, [r0, #344]	; 0x158
	while (rx) {
   18bdc:	b144      	cbz	r4, 18bf0 <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   18bde:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   18be0:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   18be2:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   18be4:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   18be6:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   18be8:	f7fb faee 	bl	141c8 <ll_rx_put>
	while (rx) {
   18bec:	2c00      	cmp	r4, #0
   18bee:	d1f7      	bne.n	18be0 <conn_cleanup+0x30>
	while (conn->tx_head) {
   18bf0:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18bf4:	b381      	cbz	r1, 18c58 <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   18bf6:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 18ca4 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   18bfa:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 18ca8 <conn_cleanup+0xf8>
   18bfe:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 18cac <conn_cleanup+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18c02:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   18c06:	e007      	b.n	18c18 <conn_cleanup+0x68>
   18c08:	4629      	mov	r1, r5
   18c0a:	463a      	mov	r2, r7
   18c0c:	4620      	mov	r0, r4
   18c0e:	f7f7 fd35 	bl	1067c <memq_enqueue>
	while (conn->tx_head) {
   18c12:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18c16:	b1f9      	cbz	r1, 18c58 <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   18c18:	4630      	mov	r0, r6
   18c1a:	f7fc f985 	bl	14f28 <tx_ull_dequeue>
   18c1e:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   18c20:	4640      	mov	r0, r8
   18c22:	f7f7 fcc7 	bl	105b4 <mem_acquire>
		LL_ASSERT(link);
   18c26:	4604      	mov	r4, r0
   18c28:	2800      	cmp	r0, #0
   18c2a:	d1ed      	bne.n	18c08 <conn_cleanup+0x58>
   18c2c:	4820      	ldr	r0, [pc, #128]	; (18cb0 <conn_cleanup+0x100>)
   18c2e:	f44f 63ed 	mov.w	r3, #1896	; 0x768
   18c32:	4652      	mov	r2, sl
   18c34:	4649      	mov	r1, r9
   18c36:	f008 fec3 	bl	219c0 <printk>
   18c3a:	4040      	eors	r0, r0
   18c3c:	f380 8811 	msr	BASEPRI, r0
   18c40:	f04f 0003 	mov.w	r0, #3
   18c44:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18c46:	4629      	mov	r1, r5
   18c48:	463a      	mov	r2, r7
   18c4a:	4620      	mov	r0, r4
   18c4c:	f7f7 fd16 	bl	1067c <memq_enqueue>
	while (conn->tx_head) {
   18c50:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18c54:	2900      	cmp	r1, #0
   18c56:	d1df      	bne.n	18c18 <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   18c58:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18c5a:	4b16      	ldr	r3, [pc, #88]	; (18cb4 <conn_cleanup+0x104>)
   18c5c:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   18c60:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18c62:	b2d2      	uxtb	r2, r2
   18c64:	2101      	movs	r1, #1
   18c66:	2000      	movs	r0, #0
   18c68:	f7f8 ff76 	bl	11b58 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18c6c:	f030 0302 	bics.w	r3, r0, #2
   18c70:	d00c      	beq.n	18c8c <conn_cleanup+0xdc>
   18c72:	4a0d      	ldr	r2, [pc, #52]	; (18ca8 <conn_cleanup+0xf8>)
   18c74:	4910      	ldr	r1, [pc, #64]	; (18cb8 <conn_cleanup+0x108>)
   18c76:	480e      	ldr	r0, [pc, #56]	; (18cb0 <conn_cleanup+0x100>)
   18c78:	f240 7327 	movw	r3, #1831	; 0x727
   18c7c:	f008 fea0 	bl	219c0 <printk>
   18c80:	4040      	eors	r0, r0
   18c82:	f380 8811 	msr	BASEPRI, r0
   18c86:	f04f 0003 	mov.w	r0, #3
   18c8a:	df02      	svc	2
	lll->handle = 0xFFFF;
   18c8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   18c90:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   18c92:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   18c94:	b003      	add	sp, #12
   18c96:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   18c9a:	f7ff bf39 	b.w	18b10 <ull_conn_tx_demux>
   18c9e:	bf00      	nop
   18ca0:	2000e3f8 	.word	0x2000e3f8
   18ca4:	2000e500 	.word	0x2000e500
   18ca8:	00028760 	.word	0x00028760
   18cac:	000287b0 	.word	0x000287b0
   18cb0:	000282a4 	.word	0x000282a4
   18cb4:	00015129 	.word	0x00015129
   18cb8:	00028840 	.word	0x00028840

00018cbc <ull_conn_done>:
{
   18cbc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   18cc0:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   18cc2:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   18cc4:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   18cc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18cca:	429a      	cmp	r2, r3
{
   18ccc:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   18cce:	d05e      	beq.n	18d8e <ull_conn_done+0xd2>
	switch (done->extra.mic_state) {
   18cd0:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   18cd4:	2b01      	cmp	r3, #1
   18cd6:	4606      	mov	r6, r0
   18cd8:	f000 80ea 	beq.w	18eb0 <ull_conn_done+0x1f4>
   18cdc:	2b02      	cmp	r3, #2
   18cde:	f000 80dd 	beq.w	18e9c <ull_conn_done+0x1e0>
   18ce2:	2b00      	cmp	r3, #0
   18ce4:	f000 80c0 	beq.w	18e68 <ull_conn_done+0x1ac>
	reason_peer = conn->llcp_terminate.reason_peer;
   18ce8:	f894 713b 	ldrb.w	r7, [r4, #315]	; 0x13b
	if (reason_peer && (
   18cec:	2f00      	cmp	r7, #0
   18cee:	f040 80d8 	bne.w	18ea2 <ull_conn_done+0x1e6>
	latency_event = lll->latency_event;
   18cf2:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   18cf6:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	elapsed_event = latency_event + 1;
   18cf8:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   18cfc:	e9cd 7708 	strd	r7, r7, [sp, #32]
	elapsed_event = latency_event + 1;
   18d00:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   18d04:	2b00      	cmp	r3, #0
   18d06:	d045      	beq.n	18d94 <ull_conn_done+0xd8>
		} else if (lll->role) {
   18d08:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   18d0c:	2b00      	cmp	r3, #0
   18d0e:	f2c0 8118 	blt.w	18f42 <ull_conn_done+0x286>
	if (done->extra.crc_valid) {
   18d12:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   18d16:	2200      	movs	r2, #0
   18d18:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   18d1c:	2b00      	cmp	r3, #0
   18d1e:	f000 80cd 	beq.w	18ebc <ull_conn_done+0x200>
		conn->supervision_expire = 0U;
   18d22:	2300      	movs	r3, #0
   18d24:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   18d28:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   18d2c:	b133      	cbz	r3, 18d3c <ull_conn_done+0x80>
		if (conn->procedure_expire > elapsed_event) {
   18d2e:	4543      	cmp	r3, r8
   18d30:	f240 8118 	bls.w	18f64 <ull_conn_done+0x2a8>
			conn->procedure_expire -= elapsed_event;
   18d34:	eba3 0308 	sub.w	r3, r3, r8
   18d38:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   18d3c:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   18d40:	b133      	cbz	r3, 18d50 <ull_conn_done+0x94>
		if (conn->apto_expire > elapsed_event) {
   18d42:	4543      	cmp	r3, r8
   18d44:	f240 80ea 	bls.w	18f1c <ull_conn_done+0x260>
			conn->apto_expire -= elapsed_event;
   18d48:	eba3 0308 	sub.w	r3, r3, r8
   18d4c:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   18d50:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   18d54:	2b00      	cmp	r3, #0
   18d56:	d046      	beq.n	18de6 <ull_conn_done+0x12a>
		if (conn->appto_expire > elapsed_event) {
   18d58:	4543      	cmp	r3, r8
   18d5a:	f200 80be 	bhi.w	18eda <ull_conn_done+0x21e>
			conn->appto_expire = 0U;
   18d5e:	2300      	movs	r3, #0
   18d60:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   18d64:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   18d68:	2b00      	cmp	r3, #0
   18d6a:	d13c      	bne.n	18de6 <ull_conn_done+0x12a>
			    (conn->llcp_req == conn->llcp_ack)) {
   18d6c:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18d70:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			if ((conn->procedure_expire == 0U) &&
   18d74:	4293      	cmp	r3, r2
   18d76:	d13a      	bne.n	18dee <ull_conn_done+0x132>
				conn->llcp_ack -= 2U;
   18d78:	3b02      	subs	r3, #2
   18d7a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   18d7e:	2305      	movs	r3, #5
   18d80:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18d84:	e038      	b.n	18df8 <ull_conn_done+0x13c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   18d86:	2108      	movs	r1, #8
   18d88:	4620      	mov	r0, r4
   18d8a:	f7ff ff11 	bl	18bb0 <conn_cleanup>
}
   18d8e:	b00b      	add	sp, #44	; 0x2c
   18d90:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   18d94:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   18d98:	2b00      	cmp	r3, #0
   18d9a:	d1c2      	bne.n	18d22 <ull_conn_done+0x66>
	else if (conn->connect_expire) {
   18d9c:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   18da0:	2b00      	cmp	r3, #0
   18da2:	f000 808b 	beq.w	18ebc <ull_conn_done+0x200>
		if (conn->connect_expire > elapsed_event) {
   18da6:	4543      	cmp	r3, r8
   18da8:	f240 80f3 	bls.w	18f92 <ull_conn_done+0x2d6>
			conn->connect_expire -= elapsed_event;
   18dac:	eba3 0308 	sub.w	r3, r3, r8
   18db0:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   18db4:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   18db8:	2b00      	cmp	r3, #0
   18dba:	d0b5      	beq.n	18d28 <ull_conn_done+0x6c>
		if (conn->supervision_expire > elapsed_event) {
   18dbc:	4598      	cmp	r8, r3
   18dbe:	d2e2      	bcs.n	18d86 <ull_conn_done+0xca>
			conn->supervision_expire -= elapsed_event;
   18dc0:	eba3 0308 	sub.w	r3, r3, r8
   18dc4:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   18dc6:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   18dc8:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   18dca:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   18dce:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   18dd0:	d907      	bls.n	18de2 <ull_conn_done+0x126>
			else if (lll->role) {
   18dd2:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   18dd6:	4293      	cmp	r3, r2
   18dd8:	daa6      	bge.n	18d28 <ull_conn_done+0x6c>
				if (latency_event) {
   18dda:	f1b9 0f00 	cmp.w	r9, #0
   18dde:	f000 80ca 	beq.w	18f76 <ull_conn_done+0x2ba>
				force = 1U;
   18de2:	2701      	movs	r7, #1
   18de4:	e7a0      	b.n	18d28 <ull_conn_done+0x6c>
			    (conn->llcp_req == conn->llcp_ack)) {
   18de6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18dea:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18dee:	1a9b      	subs	r3, r3, r2
   18df0:	f003 0303 	and.w	r3, r3, #3
   18df4:	2b02      	cmp	r3, #2
   18df6:	d07d      	beq.n	18ef4 <ull_conn_done+0x238>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   18df8:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   18dfc:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   18e00:	429a      	cmp	r2, r3
   18e02:	f000 809c 	beq.w	18f3e <ull_conn_done+0x282>
		lll->latency_event = 0U;
   18e06:	2200      	movs	r2, #0
   18e08:	84aa      	strh	r2, [r5, #36]	; 0x24
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18e0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   18e0c:	b90f      	cbnz	r7, 18e12 <ull_conn_done+0x156>
   18e0e:	4591      	cmp	r9, r2
   18e10:	d07d      	beq.n	18f0e <ull_conn_done+0x252>
		lazy = lll->latency_event + 1U;
   18e12:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18e14:	9c08      	ldr	r4, [sp, #32]
		lazy = lll->latency_event + 1U;
   18e16:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18e18:	b90b      	cbnz	r3, 18e1e <ull_conn_done+0x162>
   18e1a:	2c00      	cmp	r4, #0
   18e1c:	d058      	beq.n	18ed0 <ull_conn_done+0x214>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   18e1e:	8baa      	ldrh	r2, [r5, #28]
		struct ll_conn *conn = lll->hdr.parent;
   18e20:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18e22:	9400      	str	r4, [sp, #0]
   18e24:	2000      	movs	r0, #0
   18e26:	4c68      	ldr	r4, [pc, #416]	; (18fc8 <ull_conn_done+0x30c>)
   18e28:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   18e2a:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18e2c:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18e30:	9704      	str	r7, [sp, #16]
   18e32:	9506      	str	r5, [sp, #24]
   18e34:	b2d2      	uxtb	r2, r2
   18e36:	2101      	movs	r1, #1
   18e38:	9405      	str	r4, [sp, #20]
   18e3a:	f7f8 fe75 	bl	11b28 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18e3e:	f030 0302 	bics.w	r3, r0, #2
   18e42:	d0a4      	beq.n	18d8e <ull_conn_done+0xd2>
   18e44:	f7fb fa9c 	bl	14380 <ull_disable_mark_get>
   18e48:	4285      	cmp	r5, r0
   18e4a:	d0a0      	beq.n	18d8e <ull_conn_done+0xd2>
   18e4c:	4a5f      	ldr	r2, [pc, #380]	; (18fcc <ull_conn_done+0x310>)
   18e4e:	4960      	ldr	r1, [pc, #384]	; (18fd0 <ull_conn_done+0x314>)
   18e50:	4860      	ldr	r0, [pc, #384]	; (18fd4 <ull_conn_done+0x318>)
   18e52:	f240 5376 	movw	r3, #1398	; 0x576
   18e56:	f008 fdb3 	bl	219c0 <printk>
   18e5a:	4040      	eors	r0, r0
   18e5c:	f380 8811 	msr	BASEPRI, r0
   18e60:	f04f 0003 	mov.w	r0, #3
   18e64:	df02      	svc	2
   18e66:	e792      	b.n	18d8e <ull_conn_done+0xd2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   18e68:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   18e6c:	0719      	lsls	r1, r3, #28
   18e6e:	d548      	bpl.n	18f02 <ull_conn_done+0x246>
					    (lll->latency + 6)) ?
   18e70:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   18e72:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   18e76:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   18e78:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   18e7a:	bfc4      	itt	gt
   18e7c:	1ad3      	subgt	r3, r2, r3
   18e7e:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   18e80:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   18e84:	bfcc      	ite	gt
   18e86:	b29b      	uxthgt	r3, r3
   18e88:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   18e8a:	4299      	cmp	r1, r3
   18e8c:	d064      	beq.n	18f58 <ull_conn_done+0x29c>
				conn->appto_reload = appto_reload_new;
   18e8e:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   18e92:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   18e96:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   18e9a:	e725      	b.n	18ce8 <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_peer =
   18e9c:	273d      	movs	r7, #61	; 0x3d
   18e9e:	f884 713b 	strb.w	r7, [r4, #315]	; 0x13b
		conn_cleanup(conn, reason_peer);
   18ea2:	4639      	mov	r1, r7
   18ea4:	4620      	mov	r0, r4
}
   18ea6:	b00b      	add	sp, #44	; 0x2c
   18ea8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		conn_cleanup(conn, reason_peer);
   18eac:	f7ff be80 	b.w	18bb0 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   18eb0:	2300      	movs	r3, #0
   18eb2:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   18eb6:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   18eba:	e715      	b.n	18ce8 <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   18ebc:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   18ec0:	2b00      	cmp	r3, #0
   18ec2:	f47f af7b 	bne.w	18dbc <ull_conn_done+0x100>
			conn->supervision_expire = conn->supervision_reload;
   18ec6:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   18eca:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   18ece:	e773      	b.n	18db8 <ull_conn_done+0xfc>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18ed0:	2900      	cmp	r1, #0
   18ed2:	d1a4      	bne.n	18e1e <ull_conn_done+0x162>
   18ed4:	2f00      	cmp	r7, #0
   18ed6:	d1a2      	bne.n	18e1e <ull_conn_done+0x162>
   18ed8:	e759      	b.n	18d8e <ull_conn_done+0xd2>
			conn->appto_expire -= elapsed_event;
   18eda:	eba3 0308 	sub.w	r3, r3, r8
			    (conn->llcp_req == conn->llcp_ack)) {
   18ede:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->appto_expire -= elapsed_event;
   18ee2:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			    (conn->llcp_req == conn->llcp_ack)) {
   18ee6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18eea:	1a9b      	subs	r3, r3, r2
   18eec:	f003 0303 	and.w	r3, r3, #3
   18ef0:	2b02      	cmp	r3, #2
   18ef2:	d181      	bne.n	18df8 <ull_conn_done+0x13c>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   18ef4:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18ef8:	3b01      	subs	r3, #1
   18efa:	2b01      	cmp	r3, #1
   18efc:	f63f af7c 	bhi.w	18df8 <ull_conn_done+0x13c>
   18f00:	e781      	b.n	18e06 <ull_conn_done+0x14a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   18f02:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   18f06:	07da      	lsls	r2, r3, #31
   18f08:	f57f aeee 	bpl.w	18ce8 <ull_conn_done+0x2c>
   18f0c:	e7b0      	b.n	18e70 <ull_conn_done+0x1b4>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18f0e:	9c08      	ldr	r4, [sp, #32]
   18f10:	b913      	cbnz	r3, 18f18 <ull_conn_done+0x25c>
   18f12:	2c00      	cmp	r4, #0
   18f14:	f43f af3b 	beq.w	18d8e <ull_conn_done+0xd2>
	lazy = 0U;
   18f18:	4639      	mov	r1, r7
   18f1a:	e780      	b.n	18e1e <ull_conn_done+0x162>
			rx = ll_pdu_rx_alloc();
   18f1c:	f7fb f982 	bl	14224 <ll_pdu_rx_alloc>
			if (rx) {
   18f20:	4601      	mov	r1, r0
   18f22:	b320      	cbz	r0, 18f6e <ull_conn_done+0x2b2>
				rx->handle = lll->handle;
   18f24:	8bab      	ldrh	r3, [r5, #28]
				conn->apto_expire = 0U;
   18f26:	2200      	movs	r2, #0
   18f28:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
				rx->handle = lll->handle;
   18f2c:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   18f2e:	2317      	movs	r3, #23
   18f30:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   18f32:	6800      	ldr	r0, [r0, #0]
   18f34:	f7fb f948 	bl	141c8 <ll_rx_put>
				ll_rx_sched();
   18f38:	f7fb f950 	bl	141dc <ll_rx_sched>
   18f3c:	e708      	b.n	18d50 <ull_conn_done+0x94>
	if ((force) || (latency_event != lll->latency_event)) {
   18f3e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   18f40:	e763      	b.n	18e0a <ull_conn_done+0x14e>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   18f42:	aa08      	add	r2, sp, #32
   18f44:	a909      	add	r1, sp, #36	; 0x24
   18f46:	4630      	mov	r0, r6
   18f48:	f7e8 fd06 	bl	1958 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   18f4c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   18f50:	b323      	cbz	r3, 18f9c <ull_conn_done+0x2e0>
				lll->latency_event = 0;
   18f52:	2300      	movs	r3, #0
   18f54:	84ab      	strh	r3, [r5, #36]	; 0x24
   18f56:	e6dc      	b.n	18d12 <ull_conn_done+0x56>
			if (conn->apto_expire == 0U) {
   18f58:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   18f5c:	2900      	cmp	r1, #0
   18f5e:	f47f aec3 	bne.w	18ce8 <ull_conn_done+0x2c>
   18f62:	e796      	b.n	18e92 <ull_conn_done+0x1d6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   18f64:	2122      	movs	r1, #34	; 0x22
   18f66:	4620      	mov	r0, r4
   18f68:	f7ff fe22 	bl	18bb0 <conn_cleanup>
			return;
   18f6c:	e70f      	b.n	18d8e <ull_conn_done+0xd2>
				conn->apto_expire = 1U;
   18f6e:	2301      	movs	r3, #1
   18f70:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   18f74:	e6ec      	b.n	18d50 <ull_conn_done+0x94>
					force = conn->slave.force & 0x01;
   18f76:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   18f7a:	085a      	lsrs	r2, r3, #1
					if (force) {
   18f7c:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   18f80:	bf17      	itett	ne
   18f82:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   18f86:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   18f8a:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   18f8e:	461f      	movne	r7, r3
   18f90:	e6ca      	b.n	18d28 <ull_conn_done+0x6c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   18f92:	213e      	movs	r1, #62	; 0x3e
   18f94:	4620      	mov	r0, r4
   18f96:	f7ff fe0b 	bl	18bb0 <conn_cleanup>
			return;
   18f9a:	e6f8      	b.n	18d8e <ull_conn_done+0xd2>
				ull_conn_tx_demux(UINT8_MAX);
   18f9c:	20ff      	movs	r0, #255	; 0xff
   18f9e:	f7ff fdb7 	bl	18b10 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   18fa2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   18fa6:	2b00      	cmp	r3, #0
   18fa8:	d1d3      	bne.n	18f52 <ull_conn_done+0x296>
   18faa:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   18fae:	463a      	mov	r2, r7
   18fb0:	f7f7 fb6e 	bl	10690 <memq_peek>
   18fb4:	2800      	cmp	r0, #0
   18fb6:	d1cc      	bne.n	18f52 <ull_conn_done+0x296>
			} else if (lll->slave.latency_enabled) {
   18fb8:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   18fbc:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   18fbe:	bf44      	itt	mi
   18fc0:	8c2b      	ldrhmi	r3, [r5, #32]
   18fc2:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   18fc4:	e6a5      	b.n	18d12 <ull_conn_done+0x56>
   18fc6:	bf00      	nop
   18fc8:	0001523d 	.word	0x0001523d
   18fcc:	00028760 	.word	0x00028760
   18fd0:	000288f4 	.word	0x000288f4
   18fd4:	000282a4 	.word	0x000282a4

00018fd8 <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   18fd8:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   18fdc:	2b00      	cmp	r3, #0
   18fde:	f000 80be 	beq.w	1915e <ull_conn_tx_lll_enqueue+0x186>
   18fe2:	3901      	subs	r1, #1
{
   18fe4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   18fe8:	f8df 8174 	ldr.w	r8, [pc, #372]	; 19160 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   18fec:	f8df a174 	ldr.w	sl, [pc, #372]	; 19164 <ull_conn_tx_lll_enqueue+0x18c>
   18ff0:	f8df 9174 	ldr.w	r9, [pc, #372]	; 19168 <ull_conn_tx_lll_enqueue+0x190>
   18ff4:	4604      	mov	r4, r0
   18ff6:	b2cd      	uxtb	r5, r1
   18ff8:	e010      	b.n	1901c <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   18ffa:	4640      	mov	r0, r8
   18ffc:	f7f7 fada 	bl	105b4 <mem_acquire>
		LL_ASSERT(link);
   19000:	4607      	mov	r7, r0
   19002:	b3b0      	cbz	r0, 19072 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   19004:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   19008:	4631      	mov	r1, r6
   1900a:	4638      	mov	r0, r7
   1900c:	f7f7 fb36 	bl	1067c <memq_enqueue>
	while (conn->tx_head &&
   19010:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   19014:	3d01      	subs	r5, #1
   19016:	b2ed      	uxtb	r5, r5
   19018:	2b00      	cmp	r3, #0
   1901a:	d05c      	beq.n	190d6 <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   1901c:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
	while (conn->tx_head &&
   19020:	07d1      	lsls	r1, r2, #31
   19022:	d403      	bmi.n	1902c <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   19024:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		 !conn->llcp_phy.pause_tx &&
   19028:	0792      	lsls	r2, r2, #30
   1902a:	d53a      	bpl.n	190a2 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   1902c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   19030:	4293      	cmp	r3, r2
   19032:	d150      	bne.n	190d6 <ull_conn_tx_lll_enqueue+0xfe>
   19034:	2dff      	cmp	r5, #255	; 0xff
   19036:	d04e      	beq.n	190d6 <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   19038:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   1903c:	4620      	mov	r0, r4
   1903e:	f7fb ff73 	bl	14f28 <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19042:	7903      	ldrb	r3, [r0, #4]
   19044:	f003 0303 	and.w	r3, r3, #3
   19048:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1904a:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   1904c:	d1d5      	bne.n	18ffa <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   1904e:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   19050:	2b0b      	cmp	r3, #11
   19052:	d042      	beq.n	190da <ull_conn_tx_lll_enqueue+0x102>
   19054:	d81b      	bhi.n	1908e <ull_conn_tx_lll_enqueue+0xb6>
   19056:	2b04      	cmp	r3, #4
   19058:	d1cf      	bne.n	18ffa <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   1905a:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1905e:	f043 0302 	orr.w	r3, r3, #2
   19062:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		link = mem_acquire(&mem_link_tx.free);
   19066:	4640      	mov	r0, r8
   19068:	f7f7 faa4 	bl	105b4 <mem_acquire>
		LL_ASSERT(link);
   1906c:	4607      	mov	r7, r0
   1906e:	2800      	cmp	r0, #0
   19070:	d1c8      	bne.n	19004 <ull_conn_tx_lll_enqueue+0x2c>
   19072:	483e      	ldr	r0, [pc, #248]	; (1916c <ull_conn_tx_lll_enqueue+0x194>)
   19074:	f240 53ca 	movw	r3, #1482	; 0x5ca
   19078:	4652      	mov	r2, sl
   1907a:	4649      	mov	r1, r9
   1907c:	f008 fca0 	bl	219c0 <printk>
   19080:	4040      	eors	r0, r0
   19082:	f380 8811 	msr	BASEPRI, r0
   19086:	f04f 0003 	mov.w	r0, #3
   1908a:	df02      	svc	2
   1908c:	e7ba      	b.n	19004 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   1908e:	3b16      	subs	r3, #22
   19090:	2b01      	cmp	r3, #1
   19092:	d8b2      	bhi.n	18ffa <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   19094:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   19098:	f043 0301 	orr.w	r3, r3, #1
   1909c:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
		break;
   190a0:	e7ab      	b.n	18ffa <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   190a2:	791a      	ldrb	r2, [r3, #4]
   190a4:	f002 0203 	and.w	r2, r2, #3
   190a8:	2a03      	cmp	r2, #3
   190aa:	d1c3      	bne.n	19034 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   190ac:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   190ae:	2a03      	cmp	r2, #3
   190b0:	d001      	beq.n	190b6 <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   190b2:	2a0a      	cmp	r2, #10
   190b4:	d1be      	bne.n	19034 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   190b6:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   190ba:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   190be:	428a      	cmp	r2, r1
   190c0:	d010      	beq.n	190e4 <ull_conn_tx_lll_enqueue+0x10c>
   190c2:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   190c6:	2a03      	cmp	r2, #3
   190c8:	d0b4      	beq.n	19034 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   190ca:	681a      	ldr	r2, [r3, #0]
   190cc:	b11a      	cbz	r2, 190d6 <ull_conn_tx_lll_enqueue+0xfe>
   190ce:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   190d2:	428a      	cmp	r2, r1
   190d4:	d032      	beq.n	1913c <ull_conn_tx_lll_enqueue+0x164>
}
   190d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   190da:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   190de:	2b00      	cmp	r3, #0
   190e0:	da8b      	bge.n	18ffa <ull_conn_tx_lll_enqueue+0x22>
   190e2:	e7ba      	b.n	1905a <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   190e4:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   190e8:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   190ec:	4288      	cmp	r0, r1
   190ee:	d1ec      	bne.n	190ca <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   190f0:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   190f4:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   190f8:	4288      	cmp	r0, r1
   190fa:	d1e6      	bne.n	190ca <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   190fc:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
   19100:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   19104:	4288      	cmp	r0, r1
   19106:	d1e0      	bne.n	190ca <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   19108:	f894 01a5 	ldrb.w	r0, [r4, #421]	; 0x1a5
   1910c:	f894 11a4 	ldrb.w	r1, [r4, #420]	; 0x1a4
   19110:	4288      	cmp	r0, r1
   19112:	d1da      	bne.n	190ca <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   19114:	f894 01b5 	ldrb.w	r0, [r4, #437]	; 0x1b5
   19118:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   1911c:	4288      	cmp	r0, r1
   1911e:	d1d4      	bne.n	190ca <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   19120:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_ack -= 2U;
   19124:	3a02      	subs	r2, #2
   19126:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1912a:	2201      	movs	r2, #1
   1912c:	f362 0301 	bfi	r3, r2, #0, #2
   19130:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_type = LLCP_ENCRYPTION;
   19134:	2303      	movs	r3, #3
   19136:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   1913a:	e77b      	b.n	19034 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   1913c:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
				tx->next = conn->tx_ctrl_last->next;
   19140:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
				if (!conn->tx_data_last) {
   19144:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				tx->next = conn->tx_ctrl_last->next;
   19148:	6810      	ldr	r0, [r2, #0]
   1914a:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   1914c:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   1914e:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				if (!conn->tx_data_last) {
   19152:	2900      	cmp	r1, #0
   19154:	f47f af6e 	bne.w	19034 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   19158:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   1915c:	e76a      	b.n	19034 <ull_conn_tx_lll_enqueue+0x5c>
   1915e:	4770      	bx	lr
   19160:	2000e500 	.word	0x2000e500
   19164:	00028760 	.word	0x00028760
   19168:	000287b0 	.word	0x000287b0
   1916c:	000282a4 	.word	0x000282a4

00019170 <tx_demux>:
{
   19170:	b510      	push	{r4, lr}
   19172:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   19174:	2001      	movs	r0, #1
   19176:	f7ff fccb 	bl	18b10 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   1917a:	4620      	mov	r0, r4
   1917c:	2101      	movs	r1, #1
}
   1917e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   19182:	f7ff bf29 	b.w	18fd8 <ull_conn_tx_lll_enqueue>
   19186:	bf00      	nop

00019188 <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   19188:	4901      	ldr	r1, [pc, #4]	; (19190 <ull_conn_link_tx_release+0x8>)
   1918a:	f7f7 ba2d 	b.w	105e8 <mem_release>
   1918e:	bf00      	nop
   19190:	2000e500 	.word	0x2000e500

00019194 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   19194:	4b01      	ldr	r3, [pc, #4]	; (1919c <ull_conn_ack_last_idx_get+0x8>)
}
   19196:	78d8      	ldrb	r0, [r3, #3]
   19198:	4770      	bx	lr
   1919a:	bf00      	nop
   1919c:	2000058c 	.word	0x2000058c

000191a0 <ull_conn_ack_peek>:
{
   191a0:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   191a2:	4b0c      	ldr	r3, [pc, #48]	; (191d4 <ull_conn_ack_peek+0x34>)
   191a4:	f893 c002 	ldrb.w	ip, [r3, #2]
   191a8:	78dc      	ldrb	r4, [r3, #3]
   191aa:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   191ac:	45a4      	cmp	ip, r4
   191ae:	d00f      	beq.n	191d0 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   191b0:	fb1c fc05 	smulbb	ip, ip, r5
   191b4:	3304      	adds	r3, #4
	if (!lll_tx) {
   191b6:	4686      	mov	lr, r0
   191b8:	eb13 000c 	adds.w	r0, r3, ip
   191bc:	d007      	beq.n	191ce <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   191be:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   191c2:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   191c6:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   191c8:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   191ca:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   191cc:	6818      	ldr	r0, [r3, #0]
}
   191ce:	bd30      	pop	{r4, r5, pc}
		return NULL;
   191d0:	2000      	movs	r0, #0
}
   191d2:	bd30      	pop	{r4, r5, pc}
   191d4:	2000058c 	.word	0x2000058c

000191d8 <ull_conn_ack_by_last_peek>:
{
   191d8:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   191da:	4b0c      	ldr	r3, [pc, #48]	; (1920c <ull_conn_ack_by_last_peek+0x34>)
   191dc:	f893 c002 	ldrb.w	ip, [r3, #2]
   191e0:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   191e4:	4584      	cmp	ip, r0
   191e6:	d00e      	beq.n	19206 <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   191e8:	3304      	adds	r3, #4
   191ea:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   191ee:	eb13 000c 	adds.w	r0, r3, ip
   191f2:	d006      	beq.n	19202 <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   191f4:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   191f8:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   191fa:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   191fe:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   19200:	6818      	ldr	r0, [r3, #0]
}
   19202:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   19206:	2000      	movs	r0, #0
   19208:	e7fb      	b.n	19202 <ull_conn_ack_by_last_peek+0x2a>
   1920a:	bf00      	nop
   1920c:	2000058c 	.word	0x2000058c

00019210 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   19210:	4b09      	ldr	r3, [pc, #36]	; (19238 <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   19212:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   19214:	78da      	ldrb	r2, [r3, #3]
   19216:	7818      	ldrb	r0, [r3, #0]
   19218:	f893 c001 	ldrb.w	ip, [r3, #1]
   1921c:	428a      	cmp	r2, r1
   1921e:	d009      	beq.n	19234 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   19220:	1c4a      	adds	r2, r1, #1
   19222:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   19224:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   19228:	4594      	cmp	ip, r2
   1922a:	bf08      	it	eq
   1922c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1922e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   19230:	709a      	strb	r2, [r3, #2]
	return mem;
   19232:	4770      	bx	lr
		return NULL;
   19234:	2000      	movs	r0, #0
}
   19236:	4770      	bx	lr
   19238:	2000058c 	.word	0x2000058c

0001923c <ull_conn_lll_ack_enqueue>:
{
   1923c:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   1923e:	4a15      	ldr	r2, [pc, #84]	; (19294 <ull_conn_lll_ack_enqueue+0x58>)
   19240:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   19242:	f892 e001 	ldrb.w	lr, [r2, #1]
   19246:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   1924a:	1c63      	adds	r3, r4, #1
   1924c:	b2db      	uxtb	r3, r3
		last = 0U;
   1924e:	459e      	cmp	lr, r3
   19250:	bf08      	it	eq
   19252:	2300      	moveq	r3, #0
	if (last == first) {
   19254:	459c      	cmp	ip, r3
   19256:	d00c      	beq.n	19272 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   19258:	4696      	mov	lr, r2
   1925a:	f81e cb04 	ldrb.w	ip, [lr], #4
   1925e:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   19262:	eb1e 040c 	adds.w	r4, lr, ip
   19266:	d004      	beq.n	19272 <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   19268:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   1926c:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   1926e:	70d3      	strb	r3, [r2, #3]
}
   19270:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   19272:	4a09      	ldr	r2, [pc, #36]	; (19298 <ull_conn_lll_ack_enqueue+0x5c>)
   19274:	4909      	ldr	r1, [pc, #36]	; (1929c <ull_conn_lll_ack_enqueue+0x60>)
   19276:	480a      	ldr	r0, [pc, #40]	; (192a0 <ull_conn_lll_ack_enqueue+0x64>)
   19278:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   1927c:	f008 fba0 	bl	219c0 <printk>
   19280:	4040      	eors	r0, r0
   19282:	f380 8811 	msr	BASEPRI, r0
   19286:	f04f 0003 	mov.w	r0, #3
   1928a:	df02      	svc	2
	lll_tx->handle = handle;
   1928c:	2300      	movs	r3, #0
   1928e:	801b      	strh	r3, [r3, #0]
   19290:	deff      	udf	#255	; 0xff
   19292:	bf00      	nop
   19294:	2000058c 	.word	0x2000058c
   19298:	00028760 	.word	0x00028760
   1929c:	000287a0 	.word	0x000287a0
   192a0:	000282a4 	.word	0x000282a4

000192a4 <ull_conn_tx_ack>:
{
   192a4:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   192a6:	7953      	ldrb	r3, [r2, #5]
{
   192a8:	b082      	sub	sp, #8
   192aa:	4614      	mov	r4, r2
   192ac:	4605      	mov	r5, r0
   192ae:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   192b0:	b37b      	cbz	r3, 19312 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   192b2:	7923      	ldrb	r3, [r4, #4]
   192b4:	f003 0203 	and.w	r2, r3, #3
   192b8:	2a03      	cmp	r2, #3
   192ba:	d00d      	beq.n	192d8 <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   192bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   192c0:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   192c2:	bf04      	itt	eq
   192c4:	f36f 0301 	bfceq	r3, #0, #2
   192c8:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   192ca:	4621      	mov	r1, r4
   192cc:	4628      	mov	r0, r5
}
   192ce:	b002      	add	sp, #8
   192d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   192d4:	f7fa bfbc 	b.w	14250 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   192d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   192dc:	429d      	cmp	r5, r3
   192de:	d126      	bne.n	1932e <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   192e0:	6833      	ldr	r3, [r6, #0]
   192e2:	429c      	cmp	r4, r3
   192e4:	d03e      	beq.n	19364 <ull_conn_tx_ack+0xc0>
			LL_ASSERT(!link->next);
   192e6:	2b00      	cmp	r3, #0
   192e8:	d0ef      	beq.n	192ca <ull_conn_tx_ack+0x26>
   192ea:	4a64      	ldr	r2, [pc, #400]	; (1947c <ull_conn_tx_ack+0x1d8>)
   192ec:	4964      	ldr	r1, [pc, #400]	; (19480 <ull_conn_tx_ack+0x1dc>)
   192ee:	4865      	ldr	r0, [pc, #404]	; (19484 <ull_conn_tx_ack+0x1e0>)
   192f0:	f44f 63c5 	mov.w	r3, #1576	; 0x628
   192f4:	f008 fb64 	bl	219c0 <printk>
   192f8:	4040      	eors	r0, r0
   192fa:	f380 8811 	msr	BASEPRI, r0
   192fe:	f04f 0003 	mov.w	r0, #3
   19302:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   19304:	4621      	mov	r1, r4
   19306:	4628      	mov	r0, r5
}
   19308:	b002      	add	sp, #8
   1930a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   1930e:	f7fa bf9f 	b.w	14250 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   19312:	4a5a      	ldr	r2, [pc, #360]	; (1947c <ull_conn_tx_ack+0x1d8>)
   19314:	495c      	ldr	r1, [pc, #368]	; (19488 <ull_conn_tx_ack+0x1e4>)
   19316:	485b      	ldr	r0, [pc, #364]	; (19484 <ull_conn_tx_ack+0x1e0>)
   19318:	f240 6315 	movw	r3, #1557	; 0x615
   1931c:	f008 fb50 	bl	219c0 <printk>
   19320:	4040      	eors	r0, r0
   19322:	f380 8811 	msr	BASEPRI, r0
   19326:	f04f 0003 	mov.w	r0, #3
   1932a:	df02      	svc	2
   1932c:	e7c1      	b.n	192b2 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1932e:	462a      	mov	r2, r5
   19330:	4856      	ldr	r0, [pc, #344]	; (1948c <ull_conn_tx_ack+0x1e8>)
   19332:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   19336:	f7f7 f96f 	bl	10618 <mem_get>
   1933a:	79e2      	ldrb	r2, [r4, #7]
   1933c:	3a02      	subs	r2, #2
   1933e:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   19340:	2a15      	cmp	r2, #21
   19342:	d80c      	bhi.n	1935e <ull_conn_tx_ack+0xba>
   19344:	e8df f002 	tbb	[pc, r2]
   19348:	0b150b51 	.word	0x0b150b51
   1934c:	0b0b0b0b 	.word	0x0b0b0b0b
   19350:	470b150b 	.word	0x470b150b
   19354:	440b0b0b 	.word	0x440b0b0b
   19358:	587e0b0b 	.word	0x587e0b0b
   1935c:	231c      	.short	0x231c
		if (link->next == (void *)tx) {
   1935e:	6833      	ldr	r3, [r6, #0]
   19360:	42a3      	cmp	r3, r4
   19362:	d1c0      	bne.n	192e6 <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   19364:	494a      	ldr	r1, [pc, #296]	; (19490 <ull_conn_tx_ack+0x1ec>)
   19366:	4620      	mov	r0, r4
}
   19368:	b002      	add	sp, #8
   1936a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   1936e:	f7f7 b93b 	b.w	105e8 <mem_release>
			conn->llcp_enc.pause_tx = 1U;
   19372:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
   19376:	f042 0202 	orr.w	r2, r2, #2
   1937a:	f880 215e 	strb.w	r2, [r0, #350]	; 0x15e
		break;
   1937e:	e7af      	b.n	192e0 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   19380:	f890 21b6 	ldrb.w	r2, [r0, #438]	; 0x1b6
   19384:	2102      	movs	r1, #2
   19386:	f361 0201 	bfi	r2, r1, #0, #2
   1938a:	f880 21b6 	strb.w	r2, [r0, #438]	; 0x1b6
		if (conn->lll.role) {
   1938e:	f993 203d 	ldrsb.w	r2, [r3, #61]	; 0x3d
   19392:	2a00      	cmp	r2, #0
   19394:	da15      	bge.n	193c2 <ull_conn_tx_ack+0x11e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   19396:	4a3f      	ldr	r2, [pc, #252]	; (19494 <ull_conn_tx_ack+0x1f0>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   19398:	f893 c064 	ldrb.w	ip, [r3, #100]	; 0x64
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   1939c:	e892 0003 	ldmia.w	r2, {r0, r1}
   193a0:	aa02      	add	r2, sp, #8
   193a2:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   193a6:	f893 21b6 	ldrb.w	r2, [r3, #438]	; 0x1b6
   193aa:	ea4c 0292 	orr.w	r2, ip, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   193ae:	f002 0207 	and.w	r2, r2, #7
   193b2:	a902      	add	r1, sp, #8
   193b4:	440a      	add	r2, r1
   193b6:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   193ba:	f362 1c06 	bfi	ip, r2, #4, #3
   193be:	f883 c064 	strb.w	ip, [r3, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   193c2:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
   193c6:	f36f 0200 	bfc	r2, #0, #1
   193ca:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
		break;
   193ce:	e787      	b.n	192e0 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   193d0:	7a22      	ldrb	r2, [r4, #8]
   193d2:	2a03      	cmp	r2, #3
   193d4:	d184      	bne.n	192e0 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   193d6:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
   193da:	f022 0203 	bic.w	r2, r2, #3
   193de:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   193e2:	2200      	movs	r2, #0
   193e4:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		break;
   193e8:	e77a      	b.n	192e0 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   193ea:	7a21      	ldrb	r1, [r4, #8]
   193ec:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   193ee:	bf08      	it	eq
   193f0:	2116      	moveq	r1, #22
   193f2:	f7ff fbdd 	bl	18bb0 <conn_cleanup>
	break;
   193f6:	e773      	b.n	192e0 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   193f8:	f890 01a4 	ldrb.w	r0, [r0, #420]	; 0x1a4
   193fc:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
   19400:	4282      	cmp	r2, r0
   19402:	f43f af6d 	beq.w	192e0 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   19406:	f893 11a6 	ldrb.w	r1, [r3, #422]	; 0x1a6
   1940a:	f001 0207 	and.w	r2, r1, #7
   1940e:	2a03      	cmp	r2, #3
   19410:	d004      	beq.n	1941c <ull_conn_tx_ack+0x178>
   19412:	3203      	adds	r2, #3
   19414:	f002 0207 	and.w	r2, r2, #7
   19418:	2a01      	cmp	r2, #1
   1941a:	d8a0      	bhi.n	1935e <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   1941c:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
   19420:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				conn->lll.max_tx_time =
   19424:	f8b3 21ae 	ldrh.w	r2, [r3, #430]	; 0x1ae
   19428:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				if (conn->llcp_length.state ==
   1942c:	f001 0207 	and.w	r2, r1, #7
   19430:	2a05      	cmp	r2, #5
   19432:	d00f      	beq.n	19454 <ull_conn_tx_ack+0x1b0>
				if (!conn->llcp_length.cache.tx_octets) {
   19434:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
   19438:	b992      	cbnz	r2, 19460 <ull_conn_tx_ack+0x1bc>
					conn->llcp_length.ack =
   1943a:	f883 01a5 	strb.w	r0, [r3, #421]	; 0x1a5
					conn->procedure_expire = 0U;
   1943e:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					break;
   19442:	e74d      	b.n	192e0 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   19444:	f890 21a6 	ldrb.w	r2, [r0, #422]	; 0x1a6
   19448:	2102      	movs	r1, #2
   1944a:	f361 0202 	bfi	r2, r1, #0, #3
   1944e:	f880 21a6 	strb.w	r2, [r0, #422]	; 0x1a6
		break;
   19452:	e745      	b.n	192e0 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   19454:	2204      	movs	r2, #4
   19456:	f362 0102 	bfi	r1, r2, #0, #3
   1945a:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
					break;
   1945e:	e73f      	b.n	192e0 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   19460:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   19464:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   19466:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   1946a:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   1946e:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   19472:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   19476:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
				break;
   1947a:	e731      	b.n	192e0 <ull_conn_tx_ack+0x3c>
   1947c:	00028760 	.word	0x00028760
   19480:	0002895c 	.word	0x0002895c
   19484:	000282a4 	.word	0x000282a4
   19488:	00028950 	.word	0x00028950
   1948c:	2000e224 	.word	0x2000e224
   19490:	2000e47c 	.word	0x2000e47c
   19494:	00028968 	.word	0x00028968

00019498 <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   19498:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	if (lll->enc_tx) {
   1949c:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	switch (lll->phy_tx_time) {
   194a0:	f3c3 1302 	ubfx	r3, r3, #4, #3
   194a4:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   194a6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
	return max_tx_octets;
   194aa:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   194ae:	bf15      	itete	ne
   194b0:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   194b2:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   194b4:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   194b6:	3b0b      	subeq	r3, #11
   194b8:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   194ba:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   194bc:	bf44      	itt	mi
   194be:	3b04      	submi	r3, #4
   194c0:	b29b      	uxthmi	r3, r3
}
   194c2:	4298      	cmp	r0, r3
   194c4:	bf28      	it	cs
   194c6:	4618      	movcs	r0, r3
   194c8:	4770      	bx	lr
   194ca:	bf00      	nop

000194cc <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   194cc:	b510      	push	{r4, lr}
   194ce:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   194d0:	b930      	cbnz	r0, 194e0 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   194d2:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   194d6:	f36f 0341 	bfc	r3, #1, #1
   194da:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   194de:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   194e0:	4a09      	ldr	r2, [pc, #36]	; (19508 <ticker_update_latency_cancel_op_cb+0x3c>)
   194e2:	490a      	ldr	r1, [pc, #40]	; (1950c <ticker_update_latency_cancel_op_cb+0x40>)
   194e4:	480a      	ldr	r0, [pc, #40]	; (19510 <ticker_update_latency_cancel_op_cb+0x44>)
   194e6:	f240 230d 	movw	r3, #525	; 0x20d
   194ea:	f008 fa69 	bl	219c0 <printk>
   194ee:	4040      	eors	r0, r0
   194f0:	f380 8811 	msr	BASEPRI, r0
   194f4:	f04f 0003 	mov.w	r0, #3
   194f8:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   194fa:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   194fe:	f36f 0341 	bfc	r3, #1, #1
   19502:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   19506:	bd10      	pop	{r4, pc}
   19508:	00028988 	.word	0x00028988
   1950c:	000289cc 	.word	0x000289cc
   19510:	000282a4 	.word	0x000282a4

00019514 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19514:	b900      	cbnz	r0, 19518 <ticker_op_cb+0x4>
   19516:	4770      	bx	lr
{
   19518:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1951a:	4a07      	ldr	r2, [pc, #28]	; (19538 <ticker_op_cb+0x24>)
   1951c:	4907      	ldr	r1, [pc, #28]	; (1953c <ticker_op_cb+0x28>)
   1951e:	4808      	ldr	r0, [pc, #32]	; (19540 <ticker_op_cb+0x2c>)
   19520:	f240 2305 	movw	r3, #517	; 0x205
   19524:	f008 fa4c 	bl	219c0 <printk>
   19528:	4040      	eors	r0, r0
   1952a:	f380 8811 	msr	BASEPRI, r0
   1952e:	f04f 0003 	mov.w	r0, #3
   19532:	df02      	svc	2
}
   19534:	bd08      	pop	{r3, pc}
   19536:	bf00      	nop
   19538:	00028988 	.word	0x00028988
   1953c:	000287b8 	.word	0x000287b8
   19540:	000282a4 	.word	0x000282a4

00019544 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   19544:	2801      	cmp	r0, #1
   19546:	d000      	beq.n	1954a <ticker_op_stop_adv_cb+0x6>
   19548:	4770      	bx	lr
{
   1954a:	b510      	push	{r4, lr}
   1954c:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   1954e:	f7fa ff17 	bl	14380 <ull_disable_mark_get>
   19552:	4284      	cmp	r4, r0
   19554:	d00c      	beq.n	19570 <ticker_op_stop_adv_cb+0x2c>
   19556:	4a07      	ldr	r2, [pc, #28]	; (19574 <ticker_op_stop_adv_cb+0x30>)
   19558:	4907      	ldr	r1, [pc, #28]	; (19578 <ticker_op_stop_adv_cb+0x34>)
   1955a:	4808      	ldr	r0, [pc, #32]	; (1957c <ticker_op_stop_adv_cb+0x38>)
   1955c:	f240 13fd 	movw	r3, #509	; 0x1fd
   19560:	f008 fa2e 	bl	219c0 <printk>
   19564:	4040      	eors	r0, r0
   19566:	f380 8811 	msr	BASEPRI, r0
   1956a:	f04f 0003 	mov.w	r0, #3
   1956e:	df02      	svc	2
}
   19570:	bd10      	pop	{r4, pc}
   19572:	bf00      	nop
   19574:	00028988 	.word	0x00028988
   19578:	000289e0 	.word	0x000289e0
   1957c:	000282a4 	.word	0x000282a4

00019580 <ull_slave_ticker_cb>:
{
   19580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19582:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   19584:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   19586:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   19588:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1958c:	4299      	cmp	r1, r3
   1958e:	d023      	beq.n	195d8 <ull_slave_ticker_cb+0x58>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   19590:	4605      	mov	r5, r0
   19592:	4601      	mov	r1, r0
   19594:	4620      	mov	r0, r4
   19596:	4616      	mov	r6, r2
   19598:	f7fe f888 	bl	176ac <ull_conn_llcp>
		if (ret) {
   1959c:	b9e0      	cbnz	r0, 195d8 <ull_slave_ticker_cb+0x58>
	return ++hdr->ref;
   1959e:	7c23      	ldrb	r3, [r4, #16]
   195a0:	3301      	adds	r3, #1
   195a2:	b2db      	uxtb	r3, r3
   195a4:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   195a6:	b333      	cbz	r3, 195f6 <ull_slave_ticker_cb+0x76>
	p.ticks_at_expire = ticks_at_expire;
   195a8:	491a      	ldr	r1, [pc, #104]	; (19614 <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   195aa:	4b1b      	ldr	r3, [pc, #108]	; (19618 <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   195ac:	600d      	str	r5, [r1, #0]
	p.param = &conn->lll;
   195ae:	f104 021c 	add.w	r2, r4, #28
   195b2:	60ca      	str	r2, [r1, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   195b4:	2200      	movs	r2, #0
	p.remainder = remainder;
   195b6:	604f      	str	r7, [r1, #4]
	p.lazy = lazy;
   195b8:	810e      	strh	r6, [r1, #8]
	mfy.param = &p;
   195ba:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   195bc:	2001      	movs	r0, #1
   195be:	4611      	mov	r1, r2
   195c0:	f7f7 f8d0 	bl	10764 <mayfly_enqueue>
	LL_ASSERT(!err);
   195c4:	b948      	cbnz	r0, 195da <ull_slave_ticker_cb+0x5a>
	ull_conn_tx_demux(UINT8_MAX);
   195c6:	20ff      	movs	r0, #255	; 0xff
   195c8:	f7ff faa2 	bl	18b10 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   195cc:	4620      	mov	r0, r4
   195ce:	21ff      	movs	r1, #255	; 0xff
}
   195d0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   195d4:	f7ff bd00 	b.w	18fd8 <ull_conn_tx_lll_enqueue>
}
   195d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   195da:	4a10      	ldr	r2, [pc, #64]	; (1961c <ull_slave_ticker_cb+0x9c>)
   195dc:	4910      	ldr	r1, [pc, #64]	; (19620 <ull_slave_ticker_cb+0xa0>)
   195de:	4811      	ldr	r0, [pc, #68]	; (19624 <ull_slave_ticker_cb+0xa4>)
   195e0:	f240 13c1 	movw	r3, #449	; 0x1c1
   195e4:	f008 f9ec 	bl	219c0 <printk>
   195e8:	4040      	eors	r0, r0
   195ea:	f380 8811 	msr	BASEPRI, r0
   195ee:	f04f 0003 	mov.w	r0, #3
   195f2:	df02      	svc	2
   195f4:	e7e7      	b.n	195c6 <ull_slave_ticker_cb+0x46>
	LL_ASSERT(ref);
   195f6:	4a09      	ldr	r2, [pc, #36]	; (1961c <ull_slave_ticker_cb+0x9c>)
   195f8:	490b      	ldr	r1, [pc, #44]	; (19628 <ull_slave_ticker_cb+0xa8>)
   195fa:	480a      	ldr	r0, [pc, #40]	; (19624 <ull_slave_ticker_cb+0xa4>)
   195fc:	f240 13b5 	movw	r3, #437	; 0x1b5
   19600:	f008 f9de 	bl	219c0 <printk>
   19604:	4040      	eors	r0, r0
   19606:	f380 8811 	msr	BASEPRI, r0
   1960a:	f04f 0003 	mov.w	r0, #3
   1960e:	df02      	svc	2
   19610:	e7ca      	b.n	195a8 <ull_slave_ticker_cb+0x28>
   19612:	bf00      	nop
   19614:	2000e544 	.word	0x2000e544
   19618:	20000614 	.word	0x20000614
   1961c:	00028988 	.word	0x00028988
   19620:	00028524 	.word	0x00028524
   19624:	000282a4 	.word	0x000282a4
   19628:	000286e8 	.word	0x000286e8

0001962c <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   1962c:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   1962e:	b123      	cbz	r3, 1963a <ull_slave_latency_cancel+0xe>
   19630:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   19634:	f012 0302 	ands.w	r3, r2, #2
   19638:	d000      	beq.n	1963c <ull_slave_latency_cancel+0x10>
   1963a:	4770      	bx	lr
{
   1963c:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   1963e:	f042 0202 	orr.w	r2, r2, #2
{
   19642:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   19644:	4c11      	ldr	r4, [pc, #68]	; (1968c <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   19646:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
				      (TICKER_ID_CONN_BASE + handle),
   1964a:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   1964c:	2201      	movs	r2, #1
   1964e:	e9cd 3202 	strd	r3, r2, [sp, #8]
   19652:	e9cd 3404 	strd	r3, r4, [sp, #16]
   19656:	e9cd 3300 	strd	r3, r3, [sp]
   1965a:	9006      	str	r0, [sp, #24]
   1965c:	b2ca      	uxtb	r2, r1
   1965e:	4618      	mov	r0, r3
   19660:	2103      	movs	r1, #3
   19662:	f7f8 fa61 	bl	11b28 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   19666:	f030 0302 	bics.w	r3, r0, #2
   1966a:	d00c      	beq.n	19686 <ull_slave_latency_cancel+0x5a>
   1966c:	4a08      	ldr	r2, [pc, #32]	; (19690 <ull_slave_latency_cancel+0x64>)
   1966e:	4909      	ldr	r1, [pc, #36]	; (19694 <ull_slave_latency_cancel+0x68>)
   19670:	4809      	ldr	r0, [pc, #36]	; (19698 <ull_slave_latency_cancel+0x6c>)
   19672:	f240 1387 	movw	r3, #391	; 0x187
   19676:	f008 f9a3 	bl	219c0 <printk>
   1967a:	4040      	eors	r0, r0
   1967c:	f380 8811 	msr	BASEPRI, r0
   19680:	f04f 0003 	mov.w	r0, #3
   19684:	df02      	svc	2
}
   19686:	b008      	add	sp, #32
   19688:	bd10      	pop	{r4, pc}
   1968a:	bf00      	nop
   1968c:	000194cd 	.word	0x000194cd
   19690:	00028988 	.word	0x00028988
   19694:	00028840 	.word	0x00028840
   19698:	000282a4 	.word	0x000282a4

0001969c <ll_start_enc_req_send>:
{
   1969c:	b570      	push	{r4, r5, r6, lr}
   1969e:	460e      	mov	r6, r1
   196a0:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   196a2:	f7fc f989 	bl	159b8 <ll_connected_get>
	if (!conn) {
   196a6:	2800      	cmp	r0, #0
   196a8:	d040      	beq.n	1972c <ll_start_enc_req_send+0x90>
	if (error_code) {
   196aa:	4604      	mov	r4, r0
   196ac:	b95e      	cbnz	r6, 196c6 <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   196ae:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   196b2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   196b6:	429a      	cmp	r2, r3
   196b8:	d003      	beq.n	196c2 <ll_start_enc_req_send+0x26>
   196ba:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   196be:	2b03      	cmp	r3, #3
   196c0:	d026      	beq.n	19710 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   196c2:	200c      	movs	r0, #12
}
   196c4:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   196c6:	f890 015e 	ldrb.w	r0, [r0, #350]	; 0x15e
   196ca:	f010 0004 	ands.w	r0, r0, #4
   196ce:	d112      	bne.n	196f6 <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   196d0:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   196d4:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   196d8:	429a      	cmp	r2, r3
   196da:	d0f2      	beq.n	196c2 <ll_start_enc_req_send+0x26>
   196dc:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   196e0:	2b03      	cmp	r3, #3
   196e2:	d1ee      	bne.n	196c2 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   196e4:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp.encryption.error_code = error_code;
   196e8:	f884 60f9 	strb.w	r6, [r4, #249]	; 0xf9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   196ec:	f360 0301 	bfi	r3, r0, #0, #2
   196f0:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   196f4:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   196f6:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
			if (conn->llcp_terminate.ack !=
   196fa:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   196fe:	4293      	cmp	r3, r2
   19700:	d1df      	bne.n	196c2 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   19702:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   19704:	f884 613a 	strb.w	r6, [r4, #314]	; 0x13a
			conn->llcp_terminate.req++;
   19708:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
	return 0;
   1970c:	2000      	movs	r0, #0
}
   1970e:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   19710:	2210      	movs	r2, #16
   19712:	4629      	mov	r1, r5
   19714:	f200 1069 	addw	r0, r0, #361	; 0x169
   19718:	f00a fdf4 	bl	24304 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1971c:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   19720:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   19724:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
	return 0;
   19728:	4630      	mov	r0, r6
}
   1972a:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1972c:	2002      	movs	r0, #2
}
   1972e:	bd70      	pop	{r4, r5, r6, pc}

00019730 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   19730:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19732:	fb02 1c01 	mla	ip, r2, r1, r1
   19736:	7802      	ldrb	r2, [r0, #0]
   19738:	491c      	ldr	r1, [pc, #112]	; (197ac <lll_chan_sel_1+0x7c>)
{
   1973a:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   1973e:	4494      	add	ip, r2
   19740:	fb81 210c 	smull	r2, r1, r1, ip
   19744:	4461      	add	r1, ip
   19746:	1149      	asrs	r1, r1, #5
   19748:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   1974c:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   19750:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19752:	ebac 0101 	sub.w	r1, ip, r1
   19756:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   19758:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   1975a:	08c4      	lsrs	r4, r0, #3
   1975c:	f001 0107 	and.w	r1, r1, #7
   19760:	f813 c004 	ldrb.w	ip, [r3, r4]
   19764:	fa4c f101 	asr.w	r1, ip, r1
   19768:	f011 0101 	ands.w	r1, r1, #1
   1976c:	d11d      	bne.n	197aa <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   1976e:	fbb0 f2f5 	udiv	r2, r0, r5
   19772:	fb05 0212 	mls	r2, r5, r2, r0
   19776:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   19778:	f103 3eff 	add.w	lr, r3, #4294967295
   1977c:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   1977e:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   19780:	f100 0c08 	add.w	ip, r0, #8
   19784:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   19788:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   1978c:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   19790:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   19794:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   19798:	d002      	beq.n	197a0 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   1979a:	b132      	cbz	r2, 197aa <lll_chan_sel_1+0x7a>
				chan_index--;
   1979c:	3a01      	subs	r2, #1
   1979e:	b2d2      	uxtb	r2, r2
			chan_next++;
   197a0:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   197a2:	4584      	cmp	ip, r0
   197a4:	d1f2      	bne.n	1978c <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   197a6:	45a6      	cmp	lr, r4
   197a8:	d1ea      	bne.n	19780 <lll_chan_sel_1+0x50>
}
   197aa:	bd30      	pop	{r4, r5, pc}
   197ac:	dd67c8a7 	.word	0xdd67c8a7

000197b0 <lll_chan_sel_2>:
{
   197b0:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   197b2:	4d2f      	ldr	r5, [pc, #188]	; (19870 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   197b4:	4c2f      	ldr	r4, [pc, #188]	; (19874 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   197b6:	4048      	eors	r0, r1
   197b8:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   197bc:	0a07      	lsrs	r7, r0, #8
   197be:	b2c0      	uxtb	r0, r0
   197c0:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   197c4:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   197c8:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   197cc:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   197d0:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   197d4:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   197d8:	433e      	orrs	r6, r7
   197da:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   197de:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   197e2:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   197e6:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   197ea:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   197ee:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   197f0:	f3c0 4007 	ubfx	r0, r0, #16, #8
   197f4:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   197f8:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   197fc:	f10c 3cff 	add.w	ip, ip, #4294967295
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19800:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   19802:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19806:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   19808:	d1d8      	bne.n	197bc <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1980a:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   1980c:	481a      	ldr	r0, [pc, #104]	; (19878 <lll_chan_sel_2+0xc8>)
   1980e:	fba0 4001 	umull	r4, r0, r0, r1
   19812:	1a0c      	subs	r4, r1, r0
   19814:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   19818:	0940      	lsrs	r0, r0, #5
   1981a:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   1981e:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   19822:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19824:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   19828:	f000 0507 	and.w	r5, r0, #7
   1982c:	5d14      	ldrb	r4, [r2, r4]
   1982e:	412c      	asrs	r4, r5
   19830:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   19832:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19834:	d41a      	bmi.n	1986c <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   19836:	fb01 f303 	mul.w	r3, r1, r3
   1983a:	1e56      	subs	r6, r2, #1
   1983c:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   19840:	3204      	adds	r2, #4
	chan_next = 0U;
   19842:	4660      	mov	r0, ip
		bite = *chan_map;
   19844:	f100 0508 	add.w	r5, r0, #8
   19848:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   1984c:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   1984e:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   19852:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   19856:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   1985a:	d002      	beq.n	19862 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   1985c:	b133      	cbz	r3, 1986c <lll_chan_sel_2+0xbc>
				chan_index--;
   1985e:	3b01      	subs	r3, #1
   19860:	b2db      	uxtb	r3, r3
			chan_next++;
   19862:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   19864:	42a8      	cmp	r0, r5
   19866:	d1f2      	bne.n	1984e <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   19868:	42b2      	cmp	r2, r6
   1986a:	d1eb      	bne.n	19844 <lll_chan_sel_2+0x94>
}
   1986c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1986e:	bf00      	nop
   19870:	00022110 	.word	0x00022110
   19874:	00088440 	.word	0x00088440
   19878:	bacf914d 	.word	0xbacf914d

0001987c <rl_update>:
		}
	}
}

static void rl_update(void)
{
   1987c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   19880:	4d18      	ldr	r5, [pc, #96]	; (198e4 <rl_update+0x68>)
   19882:	4e19      	ldr	r6, [pc, #100]	; (198e8 <rl_update+0x6c>)
   19884:	2400      	movs	r4, #0
   19886:	f106 39ff 	add.w	r9, r6, #4294967295
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   1988a:	1eaf      	subs	r7, r5, #2
   1988c:	f04f 0801 	mov.w	r8, #1
   19890:	e006      	b.n	198a0 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19892:	3401      	adds	r4, #1
   19894:	2c08      	cmp	r4, #8
   19896:	f105 0506 	add.w	r5, r5, #6
   1989a:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1989e:	d01e      	beq.n	198de <rl_update+0x62>
		if (rl[i].taken) {
   198a0:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   198a4:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   198a8:	07da      	lsls	r2, r3, #31
   198aa:	d5f2      	bpl.n	19892 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   198ac:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   198ae:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   198b0:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   198b4:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   198b8:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   198ba:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   198be:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   198c0:	4631      	mov	r1, r6
   198c2:	4628      	mov	r0, r5
   198c4:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   198c6:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   198c8:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   198cc:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   198ce:	f00a fd19 	bl	24304 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   198d2:	2c08      	cmp	r4, #8
   198d4:	f105 0506 	add.w	r5, r5, #6
   198d8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   198dc:	d1e0      	bne.n	198a0 <rl_update+0x24>
}
   198de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   198e2:	bf00      	nop
   198e4:	2000e74e 	.word	0x2000e74e
   198e8:	2000e60d 	.word	0x2000e60d

000198ec <wl_update>:
{
   198ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   198f0:	4e20      	ldr	r6, [pc, #128]	; (19974 <wl_update+0x88>)
   198f2:	4d21      	ldr	r5, [pc, #132]	; (19978 <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   198f4:	f8df 8084 	ldr.w	r8, [pc, #132]	; 1997c <wl_update+0x90>
   198f8:	f8df 9084 	ldr.w	r9, [pc, #132]	; 19980 <wl_update+0x94>
{
   198fc:	2400      	movs	r4, #0
   198fe:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   19902:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   19904:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19908:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   1990c:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19910:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   19912:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19916:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   19918:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   1991c:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   19920:	d021      	beq.n	19966 <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19922:	f898 3000 	ldrb.w	r3, [r8]
   19926:	b163      	cbz	r3, 19942 <wl_update+0x56>
		j = wl[i].rl_idx;
   19928:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   1992c:	2b07      	cmp	r3, #7
   1992e:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   19932:	d806      	bhi.n	19942 <wl_update+0x56>
   19934:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   19938:	f013 0f04 	tst.w	r3, #4
   1993c:	d001      	beq.n	19942 <wl_update+0x56>
   1993e:	06db      	lsls	r3, r3, #27
   19940:	d511      	bpl.n	19966 <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19942:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19946:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1994a:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   1994e:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19952:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   19956:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   1995a:	40a3      	lsls	r3, r4
   1995c:	ea4e 0303 	orr.w	r3, lr, r3
   19960:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19962:	f00a fccf 	bl	24304 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   19966:	3401      	adds	r4, #1
   19968:	2c08      	cmp	r4, #8
   1996a:	f105 0508 	add.w	r5, r5, #8
   1996e:	d1c9      	bne.n	19904 <wl_update+0x18>
}
   19970:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19974:	2000e7c6 	.word	0x2000e7c6
   19978:	2000e786 	.word	0x2000e786
   1997c:	2000f311 	.word	0x2000f311
   19980:	2000e60c 	.word	0x2000e60c

00019984 <ll_wl_size_get>:
}
   19984:	2008      	movs	r0, #8
   19986:	4770      	bx	lr

00019988 <ll_wl_clear>:
{
   19988:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   1998a:	2000      	movs	r0, #0
   1998c:	f7fb fa58 	bl	14e40 <ull_adv_filter_pol_get>
   19990:	b9d8      	cbnz	r0, 199ca <ll_wl_clear+0x42>
   19992:	4a0f      	ldr	r2, [pc, #60]	; (199d0 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   19994:	4c0f      	ldr	r4, [pc, #60]	; (199d4 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   19996:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   1999a:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   1999c:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   1999e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   199a2:	d805      	bhi.n	199b0 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   199a4:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   199a8:	f36f 1345 	bfc	r3, #5, #1
   199ac:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   199b0:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   199b4:	f36f 0300 	bfc	r3, #0, #1
   199b8:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   199bc:	3001      	adds	r0, #1
   199be:	2808      	cmp	r0, #8
   199c0:	d1e9      	bne.n	19996 <ll_wl_clear+0xe>
	wl_anon = 0U;
   199c2:	4b05      	ldr	r3, [pc, #20]	; (199d8 <ll_wl_clear+0x50>)
   199c4:	2000      	movs	r0, #0
   199c6:	7018      	strb	r0, [r3, #0]
}
   199c8:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   199ca:	200c      	movs	r0, #12
}
   199cc:	bd10      	pop	{r4, pc}
   199ce:	bf00      	nop
   199d0:	2000e784 	.word	0x2000e784
   199d4:	2000e60c 	.word	0x2000e60c
   199d8:	2000f312 	.word	0x2000f312

000199dc <ll_wl_add>:
{
   199dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   199e0:	4681      	mov	r9, r0
   199e2:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   199e4:	2000      	movs	r0, #0
   199e6:	f7fb fa2b 	bl	14e40 <ull_adv_filter_pol_get>
   199ea:	2800      	cmp	r0, #0
   199ec:	d173      	bne.n	19ad6 <ll_wl_add+0xfa>
	if (addr->type == ADDR_TYPE_ANON) {
   199ee:	f899 a000 	ldrb.w	sl, [r9]
   199f2:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   199f6:	4605      	mov	r5, r0
   199f8:	d067      	beq.n	19aca <ll_wl_add+0xee>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   199fa:	4e45      	ldr	r6, [pc, #276]	; (19b10 <ll_wl_add+0x134>)
   199fc:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19a00:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   19a04:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19a08:	4604      	mov	r4, r0
   19a0a:	1eb7      	subs	r7, r6, #2
   19a0c:	e009      	b.n	19a22 <ll_wl_add+0x46>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19a0e:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   19a12:	d101      	bne.n	19a18 <ll_wl_add+0x3c>
			*free = i;
   19a14:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < WL_SIZE; i++) {
   19a18:	3401      	adds	r4, #1
   19a1a:	2c08      	cmp	r4, #8
   19a1c:	f106 0608 	add.w	r6, r6, #8
   19a20:	d017      	beq.n	19a52 <ll_wl_add+0x76>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19a22:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19a26:	07d8      	lsls	r0, r3, #31
   19a28:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19a2c:	d5ef      	bpl.n	19a0e <ll_wl_add+0x32>
   19a2e:	4552      	cmp	r2, sl
   19a30:	d1f2      	bne.n	19a18 <ll_wl_add+0x3c>
   19a32:	2206      	movs	r2, #6
   19a34:	4630      	mov	r0, r6
   19a36:	4659      	mov	r1, fp
   19a38:	f00a fc53 	bl	242e2 <memcmp>
   19a3c:	2800      	cmp	r0, #0
   19a3e:	d041      	beq.n	19ac4 <ll_wl_add+0xe8>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19a40:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19a44:	07d9      	lsls	r1, r3, #31
   19a46:	d5e2      	bpl.n	19a0e <ll_wl_add+0x32>
	for (i = 0; i < WL_SIZE; i++) {
   19a48:	3401      	adds	r4, #1
   19a4a:	2c08      	cmp	r4, #8
   19a4c:	f106 0608 	add.w	r6, r6, #8
   19a50:	d1e7      	bne.n	19a22 <ll_wl_add+0x46>
	} else if (j >= ARRAY_SIZE(wl)) {
   19a52:	f1b8 0f07 	cmp.w	r8, #7
   19a56:	d856      	bhi.n	19b06 <ll_wl_add+0x12a>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19a58:	f899 2000 	ldrb.w	r2, [r9]
   19a5c:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19a60:	4e2c      	ldr	r6, [pc, #176]	; (19b14 <ll_wl_add+0x138>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19a62:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   19a64:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19a68:	fb14 0008 	smlabb	r0, r4, r8, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   19a6c:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   19a70:	4438      	add	r0, r7
   19a72:	2206      	movs	r2, #6
   19a74:	4659      	mov	r1, fp
   19a76:	f00a fc45 	bl	24304 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19a7a:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19a7e:	f106 39ff 	add.w	r9, r6, #4294967295
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19a82:	f003 0301 	and.w	r3, r3, #1
   19a86:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   19a8a:	fa5f fa85 	uxtb.w	sl, r5
   19a8e:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   19a92:	f3c2 1180 	ubfx	r1, r2, #6, #1
   19a96:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19a98:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19a9c:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   19aa0:	d501      	bpl.n	19aa6 <ll_wl_add+0xca>
   19aa2:	4299      	cmp	r1, r3
   19aa4:	d01b      	beq.n	19ade <ll_wl_add+0x102>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19aa6:	2d08      	cmp	r5, #8
   19aa8:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19aac:	d1eb      	bne.n	19a86 <ll_wl_add+0xaa>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19aae:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19ab2:	22ff      	movs	r2, #255	; 0xff
   19ab4:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   19ab6:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19aba:	f043 0301 	orr.w	r3, r3, #1
   19abe:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   19ac2:	2000      	movs	r0, #0
}
   19ac4:	b003      	add	sp, #12
   19ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   19aca:	4b13      	ldr	r3, [pc, #76]	; (19b18 <ll_wl_add+0x13c>)
   19acc:	2201      	movs	r2, #1
   19ace:	701a      	strb	r2, [r3, #0]
}
   19ad0:	b003      	add	sp, #12
   19ad2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ad6:	200c      	movs	r0, #12
}
   19ad8:	b003      	add	sp, #12
   19ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19ade:	4630      	mov	r0, r6
   19ae0:	2206      	movs	r2, #6
   19ae2:	4659      	mov	r1, fp
   19ae4:	9301      	str	r3, [sp, #4]
   19ae6:	f00a fbfc 	bl	242e2 <memcmp>
   19aea:	9b01      	ldr	r3, [sp, #4]
   19aec:	2800      	cmp	r0, #0
   19aee:	d1da      	bne.n	19aa6 <ll_wl_add+0xca>
		rl[j].wl = 1U;
   19af0:	f819 3004 	ldrb.w	r3, [r9, r4]
   19af4:	f043 0320 	orr.w	r3, r3, #32
   19af8:	f809 3004 	strb.w	r3, [r9, r4]
		wl[i].rl_idx = j;
   19afc:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19b00:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   19b04:	e7d7      	b.n	19ab6 <ll_wl_add+0xda>
   19b06:	2007      	movs	r0, #7
}
   19b08:	b003      	add	sp, #12
   19b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19b0e:	bf00      	nop
   19b10:	2000e786 	.word	0x2000e786
   19b14:	2000e60d 	.word	0x2000e60d
   19b18:	2000f312 	.word	0x2000f312

00019b1c <ll_wl_remove>:
{
   19b1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19b20:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   19b22:	2000      	movs	r0, #0
   19b24:	f7fb f98c 	bl	14e40 <ull_adv_filter_pol_get>
   19b28:	2800      	cmp	r0, #0
   19b2a:	d13b      	bne.n	19ba4 <ll_wl_remove+0x88>
	if (addr->type == ADDR_TYPE_ANON) {
   19b2c:	783e      	ldrb	r6, [r7, #0]
   19b2e:	2eff      	cmp	r6, #255	; 0xff
   19b30:	4604      	mov	r4, r0
   19b32:	d033      	beq.n	19b9c <ll_wl_remove+0x80>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19b34:	4d1d      	ldr	r5, [pc, #116]	; (19bac <ll_wl_remove+0x90>)
   19b36:	3701      	adds	r7, #1
	for (i = 0; i < WL_SIZE; i++) {
   19b38:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19b3c:	f006 0601 	and.w	r6, r6, #1
   19b40:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19b44:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19b48:	07db      	lsls	r3, r3, #31
   19b4a:	d501      	bpl.n	19b50 <ll_wl_remove+0x34>
   19b4c:	42b2      	cmp	r2, r6
   19b4e:	d007      	beq.n	19b60 <ll_wl_remove+0x44>
	for (i = 0; i < WL_SIZE; i++) {
   19b50:	3401      	adds	r4, #1
   19b52:	2c08      	cmp	r4, #8
   19b54:	f105 0508 	add.w	r5, r5, #8
   19b58:	d1f2      	bne.n	19b40 <ll_wl_remove+0x24>
   19b5a:	2002      	movs	r0, #2
}
   19b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19b60:	2206      	movs	r2, #6
   19b62:	4628      	mov	r0, r5
   19b64:	4639      	mov	r1, r7
   19b66:	f00a fbbc 	bl	242e2 <memcmp>
   19b6a:	2800      	cmp	r0, #0
   19b6c:	d1f0      	bne.n	19b50 <ll_wl_remove+0x34>
		uint8_t j = wl[i].rl_idx;
   19b6e:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   19b72:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19b74:	2b07      	cmp	r3, #7
   19b76:	d808      	bhi.n	19b8a <ll_wl_remove+0x6e>
			rl[j].wl = 0U;
   19b78:	4a0d      	ldr	r2, [pc, #52]	; (19bb0 <ll_wl_remove+0x94>)
   19b7a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19b7e:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   19b82:	f360 1145 	bfi	r1, r0, #5, #1
   19b86:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   19b8a:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19b8e:	f36f 0300 	bfc	r3, #0, #1
   19b92:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   19b96:	2000      	movs	r0, #0
}
   19b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   19b9c:	4b05      	ldr	r3, [pc, #20]	; (19bb4 <ll_wl_remove+0x98>)
   19b9e:	7018      	strb	r0, [r3, #0]
}
   19ba0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ba4:	200c      	movs	r0, #12
}
   19ba6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19baa:	bf00      	nop
   19bac:	2000e786 	.word	0x2000e786
   19bb0:	2000e60c 	.word	0x2000e60c
   19bb4:	2000f312 	.word	0x2000f312

00019bb8 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19bb8:	2807      	cmp	r0, #7
{
   19bba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19bbe:	4604      	mov	r4, r0
   19bc0:	460e      	mov	r6, r1
   19bc2:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19bc4:	d817      	bhi.n	19bf6 <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   19bc6:	4d19      	ldr	r5, [pc, #100]	; (19c2c <ll_rl_id_addr_get+0x74>)
   19bc8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19bcc:	00a7      	lsls	r7, r4, #2
   19bce:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   19bd2:	07db      	lsls	r3, r3, #31
   19bd4:	d51c      	bpl.n	19c10 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   19bd6:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19bd8:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   19bda:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   19bde:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19be2:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   19be6:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19be8:	4640      	mov	r0, r8
   19bea:	2206      	movs	r2, #6
}
   19bec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19bf0:	3101      	adds	r1, #1
   19bf2:	f00a bb87 	b.w	24304 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19bf6:	4a0e      	ldr	r2, [pc, #56]	; (19c30 <ll_rl_id_addr_get+0x78>)
   19bf8:	490e      	ldr	r1, [pc, #56]	; (19c34 <ll_rl_id_addr_get+0x7c>)
   19bfa:	480f      	ldr	r0, [pc, #60]	; (19c38 <ll_rl_id_addr_get+0x80>)
   19bfc:	23e9      	movs	r3, #233	; 0xe9
   19bfe:	f007 fedf 	bl	219c0 <printk>
   19c02:	4040      	eors	r0, r0
   19c04:	f380 8811 	msr	BASEPRI, r0
   19c08:	f04f 0003 	mov.w	r0, #3
   19c0c:	df02      	svc	2
   19c0e:	e7da      	b.n	19bc6 <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   19c10:	4a07      	ldr	r2, [pc, #28]	; (19c30 <ll_rl_id_addr_get+0x78>)
   19c12:	490a      	ldr	r1, [pc, #40]	; (19c3c <ll_rl_id_addr_get+0x84>)
   19c14:	4808      	ldr	r0, [pc, #32]	; (19c38 <ll_rl_id_addr_get+0x80>)
   19c16:	23ea      	movs	r3, #234	; 0xea
   19c18:	f007 fed2 	bl	219c0 <printk>
   19c1c:	4040      	eors	r0, r0
   19c1e:	f380 8811 	msr	BASEPRI, r0
   19c22:	f04f 0003 	mov.w	r0, #3
   19c26:	df02      	svc	2
   19c28:	e7d5      	b.n	19bd6 <ll_rl_id_addr_get+0x1e>
   19c2a:	bf00      	nop
   19c2c:	2000e60c 	.word	0x2000e60c
   19c30:	00028a38 	.word	0x00028a38
   19c34:	00028a7c 	.word	0x00028a7c
   19c38:	000282a4 	.word	0x000282a4
   19c3c:	00028a88 	.word	0x00028a88

00019c40 <ll_rl_size_get>:
   19c40:	2008      	movs	r0, #8
   19c42:	4770      	bx	lr

00019c44 <ll_rl_clear>:
{
   19c44:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19c46:	2000      	movs	r0, #0
   19c48:	f7fb f8ee 	bl	14e28 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19c4c:	bb88      	cbnz	r0, 19cb2 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   19c4e:	4b1a      	ldr	r3, [pc, #104]	; (19cb8 <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   19c50:	4c1a      	ldr	r4, [pc, #104]	; (19cbc <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   19c52:	7819      	ldrb	r1, [r3, #0]
   19c54:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   19c58:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   19c5a:	f360 0100 	bfi	r1, r0, #0, #1
   19c5e:	f360 0200 	bfi	r2, r0, #0, #1
   19c62:	7019      	strb	r1, [r3, #0]
   19c64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   19c68:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   19c6c:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   19c70:	f360 0100 	bfi	r1, r0, #0, #1
   19c74:	f360 0200 	bfi	r2, r0, #0, #1
   19c78:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   19c7c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   19c80:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   19c84:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   19c88:	f360 0100 	bfi	r1, r0, #0, #1
   19c8c:	f360 0200 	bfi	r2, r0, #0, #1
   19c90:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   19c94:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   19c98:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   19c9c:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   19ca0:	f360 0100 	bfi	r1, r0, #0, #1
   19ca4:	f360 0200 	bfi	r2, r0, #0, #1
   19ca8:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   19cac:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   19cb0:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19cb2:	200c      	movs	r0, #12
}
   19cb4:	bd10      	pop	{r4, pc}
   19cb6:	bf00      	nop
   19cb8:	2000e60c 	.word	0x2000e60c
   19cbc:	2000f310 	.word	0x2000f310

00019cc0 <ll_rl_remove>:
{
   19cc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19cc4:	4681      	mov	r9, r0
   19cc6:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19cc8:	2000      	movs	r0, #0
   19cca:	f7fb f8ad 	bl	14e28 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19cce:	2800      	cmp	r0, #0
   19cd0:	d149      	bne.n	19d66 <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19cd2:	46ca      	mov	sl, r9
   19cd4:	4e4d      	ldr	r6, [pc, #308]	; (19e0c <ll_rl_remove+0x14c>)
   19cd6:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19cda:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19cdc:	f008 0801 	and.w	r8, r8, #1
   19ce0:	1e75      	subs	r5, r6, #1
   19ce2:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19ce6:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   19cea:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   19cee:	f3c2 1380 	ubfx	r3, r2, #6, #1
   19cf2:	07d2      	lsls	r2, r2, #31
   19cf4:	ea4f 0784 	mov.w	r7, r4, lsl #2
   19cf8:	d501      	bpl.n	19cfe <ll_rl_remove+0x3e>
   19cfa:	4543      	cmp	r3, r8
   19cfc:	d008      	beq.n	19d10 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19cfe:	3401      	adds	r4, #1
   19d00:	2c08      	cmp	r4, #8
   19d02:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19d06:	d1ec      	bne.n	19ce2 <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19d08:	2002      	movs	r0, #2
}
   19d0a:	b003      	add	sp, #12
   19d0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19d10:	4630      	mov	r0, r6
   19d12:	2206      	movs	r2, #6
   19d14:	4651      	mov	r1, sl
   19d16:	f00a fae4 	bl	242e2 <memcmp>
   19d1a:	4603      	mov	r3, r0
   19d1c:	2800      	cmp	r0, #0
   19d1e:	d1ee      	bne.n	19cfe <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   19d20:	f89b 2000 	ldrb.w	r2, [fp]
   19d24:	0752      	lsls	r2, r2, #29
   19d26:	d430      	bmi.n	19d8a <ll_rl_remove+0xca>
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19d28:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < WL_SIZE; i++) {
   19d2c:	4e38      	ldr	r6, [pc, #224]	; (19e10 <ll_rl_remove+0x150>)
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19d2e:	f009 0901 	and.w	r9, r9, #1
   19d32:	f1a6 0802 	sub.w	r8, r6, #2
   19d36:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   19d3a:	07d0      	lsls	r0, r2, #31
   19d3c:	f3c2 0140 	ubfx	r1, r2, #1, #1
   19d40:	d501      	bpl.n	19d46 <ll_rl_remove+0x86>
   19d42:	4549      	cmp	r1, r9
   19d44:	d013      	beq.n	19d6e <ll_rl_remove+0xae>
	for (i = 0; i < WL_SIZE; i++) {
   19d46:	3301      	adds	r3, #1
   19d48:	2b08      	cmp	r3, #8
   19d4a:	f106 0608 	add.w	r6, r6, #8
   19d4e:	d1f2      	bne.n	19d36 <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   19d50:	443c      	add	r4, r7
		return 0;
   19d52:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   19d54:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   19d58:	f36f 0300 	bfc	r3, #0, #1
   19d5c:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   19d60:	b003      	add	sp, #12
   19d62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19d66:	200c      	movs	r0, #12
}
   19d68:	b003      	add	sp, #12
   19d6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19d6e:	2206      	movs	r2, #6
   19d70:	4630      	mov	r0, r6
   19d72:	4651      	mov	r1, sl
   19d74:	9301      	str	r3, [sp, #4]
   19d76:	f00a fab4 	bl	242e2 <memcmp>
   19d7a:	9b01      	ldr	r3, [sp, #4]
   19d7c:	2800      	cmp	r0, #0
   19d7e:	d1e2      	bne.n	19d46 <ll_rl_remove+0x86>
			wl[j].rl_idx = FILTER_IDX_NONE;
   19d80:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   19d84:	22ff      	movs	r2, #255	; 0xff
   19d86:	705a      	strb	r2, [r3, #1]
   19d88:	e7e2      	b.n	19d50 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   19d8a:	4e22      	ldr	r6, [pc, #136]	; (19e14 <ll_rl_remove+0x154>)
   19d8c:	7832      	ldrb	r2, [r6, #0]
   19d8e:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   19d90:	f012 08ff 	ands.w	r8, r2, #255	; 0xff
   19d94:	d005      	beq.n	19da2 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   19d96:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   19d9a:	45c3      	cmp	fp, r8
   19d9c:	d104      	bne.n	19da8 <ll_rl_remove+0xe8>
			peer_irk_count--;
   19d9e:	7032      	strb	r2, [r6, #0]
   19da0:	e7c2      	b.n	19d28 <ll_rl_remove+0x68>
   19da2:	461a      	mov	r2, r3
   19da4:	7032      	strb	r2, [r6, #0]
   19da6:	e7bf      	b.n	19d28 <ll_rl_remove+0x68>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   19da8:	481b      	ldr	r0, [pc, #108]	; (19e18 <ll_rl_remove+0x158>)
   19daa:	9301      	str	r3, [sp, #4]
   19dac:	2210      	movs	r2, #16
   19dae:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   19db2:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   19db6:	f00a faa5 	bl	24304 <memcpy>
   19dba:	9b01      	ldr	r3, [sp, #4]
   19dbc:	f8df c05c 	ldr.w	ip, [pc, #92]	; 19e1c <ll_rl_remove+0x15c>
   19dc0:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   19dc2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   19dc6:	fa5f fe82 	uxtb.w	lr, r2
   19dca:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   19dce:	f010 0f01 	tst.w	r0, #1
   19dd2:	f102 0201 	add.w	r2, r2, #1
   19dd6:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   19dda:	d005      	beq.n	19de8 <ll_rl_remove+0x128>
   19ddc:	0740      	lsls	r0, r0, #29
   19dde:	d503      	bpl.n	19de8 <ll_rl_remove+0x128>
   19de0:	f89c 0017 	ldrb.w	r0, [ip, #23]
   19de4:	4540      	cmp	r0, r8
   19de6:	d007      	beq.n	19df8 <ll_rl_remove+0x138>
				for (k = 0U;
   19de8:	2a08      	cmp	r2, #8
   19dea:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   19dee:	d1e8      	bne.n	19dc2 <ll_rl_remove+0x102>
			peer_irk_count--;
   19df0:	7832      	ldrb	r2, [r6, #0]
   19df2:	3a01      	subs	r2, #1
   19df4:	7032      	strb	r2, [r6, #0]
   19df6:	e797      	b.n	19d28 <ll_rl_remove+0x68>
						peer_irk_rl_ids[pi] = k;
   19df8:	4a09      	ldr	r2, [pc, #36]	; (19e20 <ll_rl_remove+0x160>)
						rl[k].pirk_idx = pi;
   19dfa:	f881 b017 	strb.w	fp, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   19dfe:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   19e02:	7832      	ldrb	r2, [r6, #0]
   19e04:	3a01      	subs	r2, #1
   19e06:	7032      	strb	r2, [r6, #0]
   19e08:	e78e      	b.n	19d28 <ll_rl_remove+0x68>
   19e0a:	bf00      	nop
   19e0c:	2000e60d 	.word	0x2000e60d
   19e10:	2000e786 	.word	0x2000e786
   19e14:	2000f310 	.word	0x2000f310
   19e18:	2000e58c 	.word	0x2000e58c
   19e1c:	2000e60c 	.word	0x2000e60c
   19e20:	2000e584 	.word	0x2000e584

00019e24 <ll_rl_crpa_set>:
{
   19e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   19e28:	795c      	ldrb	r4, [r3, #5]
   19e2a:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   19e2e:	2c40      	cmp	r4, #64	; 0x40
   19e30:	d001      	beq.n	19e36 <ll_rl_crpa_set+0x12>
}
   19e32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   19e36:	461e      	mov	r6, r3
   19e38:	460f      	mov	r7, r1
   19e3a:	b301      	cbz	r1, 19e7e <ll_rl_crpa_set+0x5a>
   19e3c:	f8df 9068 	ldr.w	r9, [pc, #104]	; 19ea8 <ll_rl_crpa_set+0x84>
   19e40:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19e42:	f000 0a01 	and.w	sl, r0, #1
   19e46:	f109 38ff 	add.w	r8, r9, #4294967295
   19e4a:	e003      	b.n	19e54 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19e4c:	2c08      	cmp	r4, #8
   19e4e:	f109 0928 	add.w	r9, r9, #40	; 0x28
   19e52:	d0ee      	beq.n	19e32 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19e54:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19e58:	4625      	mov	r5, r4
   19e5a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   19e5e:	f3c2 1380 	ubfx	r3, r2, #6, #1
   19e62:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19e64:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19e68:	d5f0      	bpl.n	19e4c <ll_rl_crpa_set+0x28>
   19e6a:	4553      	cmp	r3, sl
   19e6c:	d1ee      	bne.n	19e4c <ll_rl_crpa_set+0x28>
   19e6e:	4648      	mov	r0, r9
   19e70:	2206      	movs	r2, #6
   19e72:	4639      	mov	r1, r7
   19e74:	f00a fa35 	bl	242e2 <memcmp>
   19e78:	2800      	cmp	r0, #0
   19e7a:	d1e7      	bne.n	19e4c <ll_rl_crpa_set+0x28>
   19e7c:	e004      	b.n	19e88 <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   19e7e:	2a07      	cmp	r2, #7
   19e80:	d8d7      	bhi.n	19e32 <ll_rl_crpa_set+0xe>
   19e82:	f8df 8028 	ldr.w	r8, [pc, #40]	; 19eac <ll_rl_crpa_set+0x88>
   19e86:	4615      	mov	r5, r2
   19e88:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19e8c:	00e8      	lsls	r0, r5, #3
   19e8e:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   19e92:	07db      	lsls	r3, r3, #31
   19e94:	d5cd      	bpl.n	19e32 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19e96:	3018      	adds	r0, #24
   19e98:	4631      	mov	r1, r6
   19e9a:	4440      	add	r0, r8
   19e9c:	2206      	movs	r2, #6
}
   19e9e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19ea2:	f00a ba2f 	b.w	24304 <memcpy>
   19ea6:	bf00      	nop
   19ea8:	2000e60d 	.word	0x2000e60d
   19eac:	2000e60c 	.word	0x2000e60c

00019eb0 <ll_rl_crpa_get>:
{
   19eb0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19eb4:	4682      	mov	sl, r0
   19eb6:	4e1a      	ldr	r6, [pc, #104]	; (19f20 <ll_rl_crpa_get+0x70>)
   19eb8:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   19ebc:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19ebe:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19ec0:	f008 0801 	and.w	r8, r8, #1
   19ec4:	1e77      	subs	r7, r6, #1
   19ec6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19eca:	00d5      	lsls	r5, r2, #3
   19ecc:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   19ed0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19ed4:	07db      	lsls	r3, r3, #31
   19ed6:	f104 0401 	add.w	r4, r4, #1
   19eda:	d501      	bpl.n	19ee0 <ll_rl_crpa_get+0x30>
   19edc:	4542      	cmp	r2, r8
   19ede:	d006      	beq.n	19eee <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19ee0:	2c08      	cmp	r4, #8
   19ee2:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19ee6:	d1ee      	bne.n	19ec6 <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19ee8:	2002      	movs	r0, #2
}
   19eea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19eee:	4630      	mov	r0, r6
   19ef0:	2206      	movs	r2, #6
   19ef2:	4651      	mov	r1, sl
   19ef4:	f00a f9f5 	bl	242e2 <memcmp>
   19ef8:	4683      	mov	fp, r0
   19efa:	2800      	cmp	r0, #0
   19efc:	d1f0      	bne.n	19ee0 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   19efe:	f105 0218 	add.w	r2, r5, #24
   19f02:	4417      	add	r7, r2
   19f04:	2106      	movs	r1, #6
   19f06:	4638      	mov	r0, r7
   19f08:	f7f6 fb9e 	bl	10648 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   19f0c:	2800      	cmp	r0, #0
   19f0e:	d0eb      	beq.n	19ee8 <ll_rl_crpa_get+0x38>
   19f10:	2206      	movs	r2, #6
   19f12:	4639      	mov	r1, r7
   19f14:	4648      	mov	r0, r9
   19f16:	f00a f9f5 	bl	24304 <memcpy>
		return 0;
   19f1a:	4658      	mov	r0, fp
}
   19f1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f20:	2000e60d 	.word	0x2000e60d

00019f24 <ll_rl_lrpa_get>:
{
   19f24:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19f28:	4681      	mov	r9, r0
   19f2a:	4e16      	ldr	r6, [pc, #88]	; (19f84 <ll_rl_lrpa_get+0x60>)
   19f2c:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   19f30:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19f32:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19f34:	f008 0801 	and.w	r8, r8, #1
   19f38:	1e77      	subs	r7, r6, #1
   19f3a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19f3e:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   19f42:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   19f46:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19f4a:	07db      	lsls	r3, r3, #31
   19f4c:	f104 0401 	add.w	r4, r4, #1
   19f50:	d501      	bpl.n	19f56 <ll_rl_lrpa_get+0x32>
   19f52:	4542      	cmp	r2, r8
   19f54:	d006      	beq.n	19f64 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19f56:	2c08      	cmp	r4, #8
   19f58:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19f5c:	d1ed      	bne.n	19f3a <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19f5e:	2002      	movs	r0, #2
}
   19f60:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19f64:	4630      	mov	r0, r6
   19f66:	2206      	movs	r2, #6
   19f68:	4649      	mov	r1, r9
   19f6a:	f00a f9ba 	bl	242e2 <memcmp>
   19f6e:	4683      	mov	fp, r0
   19f70:	2800      	cmp	r0, #0
   19f72:	d1f0      	bne.n	19f56 <ll_rl_lrpa_get+0x32>
   19f74:	6a69      	ldr	r1, [r5, #36]	; 0x24
   19f76:	2206      	movs	r2, #6
   19f78:	4650      	mov	r0, sl
   19f7a:	f00a f9c3 	bl	24304 <memcpy>
		return 0;
   19f7e:	4658      	mov	r0, fp
}
   19f80:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19f84:	2000e60d 	.word	0x2000e60d

00019f88 <ll_rl_enable>:
{
   19f88:	b510      	push	{r4, lr}
   19f8a:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19f8c:	2000      	movs	r0, #0
   19f8e:	f7fa ff4b 	bl	14e28 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19f92:	b958      	cbnz	r0, 19fac <ll_rl_enable+0x24>
	switch (enable) {
   19f94:	b134      	cbz	r4, 19fa4 <ll_rl_enable+0x1c>
   19f96:	2c01      	cmp	r4, #1
   19f98:	d001      	beq.n	19f9e <ll_rl_enable+0x16>
   19f9a:	2012      	movs	r0, #18
}
   19f9c:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   19f9e:	4b04      	ldr	r3, [pc, #16]	; (19fb0 <ll_rl_enable+0x28>)
   19fa0:	701c      	strb	r4, [r3, #0]
}
   19fa2:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   19fa4:	4b02      	ldr	r3, [pc, #8]	; (19fb0 <ll_rl_enable+0x28>)
   19fa6:	701c      	strb	r4, [r3, #0]
	return 0;
   19fa8:	4620      	mov	r0, r4
}
   19faa:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19fac:	200c      	movs	r0, #12
}
   19fae:	bd10      	pop	{r4, pc}
   19fb0:	2000f311 	.word	0x2000f311

00019fb4 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   19fb4:	4b03      	ldr	r3, [pc, #12]	; (19fc4 <ll_rl_timeout_set+0x10>)
   19fb6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   19fba:	fb02 f000 	mul.w	r0, r2, r0
   19fbe:	6018      	str	r0, [r3, #0]
}
   19fc0:	4770      	bx	lr
   19fc2:	bf00      	nop
   19fc4:	2000e780 	.word	0x2000e780

00019fc8 <ll_priv_mode_set>:
{
   19fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19fcc:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19fce:	2000      	movs	r0, #0
{
   19fd0:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19fd2:	f7fa ff29 	bl	14e28 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19fd6:	bb68      	cbnz	r0, 1a034 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19fd8:	4e1d      	ldr	r6, [pc, #116]	; (1a050 <ll_priv_mode_set+0x88>)
   19fda:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19fde:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19fe0:	f009 0901 	and.w	r9, r9, #1
   19fe4:	1e77      	subs	r7, r6, #1
   19fe6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19fea:	00d5      	lsls	r5, r2, #3
   19fec:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   19ff0:	f3c3 1280 	ubfx	r2, r3, #6, #1
   19ff4:	07db      	lsls	r3, r3, #31
   19ff6:	f104 0401 	add.w	r4, r4, #1
   19ffa:	d501      	bpl.n	1a000 <ll_priv_mode_set+0x38>
   19ffc:	454a      	cmp	r2, r9
   19ffe:	d006      	beq.n	1a00e <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a000:	2c08      	cmp	r4, #8
   1a002:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a006:	d1ee      	bne.n	19fe6 <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a008:	2002      	movs	r0, #2
}
   1a00a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a00e:	4630      	mov	r0, r6
   1a010:	2206      	movs	r2, #6
   1a012:	4651      	mov	r1, sl
   1a014:	f00a f965 	bl	242e2 <memcmp>
   1a018:	2800      	cmp	r0, #0
   1a01a:	d1f1      	bne.n	1a000 <ll_priv_mode_set+0x38>
		switch (mode) {
   1a01c:	f1b8 0f00 	cmp.w	r8, #0
   1a020:	d00e      	beq.n	1a040 <ll_priv_mode_set+0x78>
   1a022:	f1b8 0f01 	cmp.w	r8, #1
   1a026:	d108      	bne.n	1a03a <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   1a028:	5d7b      	ldrb	r3, [r7, r5]
   1a02a:	f043 0310 	orr.w	r3, r3, #16
   1a02e:	557b      	strb	r3, [r7, r5]
}
   1a030:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a034:	200c      	movs	r0, #12
}
   1a036:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1a03a:	2012      	movs	r0, #18
}
   1a03c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1a040:	5d7b      	ldrb	r3, [r7, r5]
   1a042:	f368 1304 	bfi	r3, r8, #4, #1
   1a046:	557b      	strb	r3, [r7, r5]
	return 0;
   1a048:	4640      	mov	r0, r8
}
   1a04a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a04e:	bf00      	nop
   1a050:	2000e60d 	.word	0x2000e60d

0001a054 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1a054:	b1b0      	cbz	r0, 1a084 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1a056:	4a0d      	ldr	r2, [pc, #52]	; (1a08c <ull_filter_adv_scan_state_cb+0x38>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1a058:	6812      	ldr	r2, [r2, #0]
{
   1a05a:	b510      	push	{r4, lr}
   1a05c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a060:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a064:	2100      	movs	r1, #0
   1a066:	fbe2 0103 	umlal	r0, r1, r2, r3
   1a06a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a06e:	2300      	movs	r3, #0
   1a070:	f7e6 ff0a 	bl	e88 <__aeabi_uldivmod>
}
   1a074:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a078:	4602      	mov	r2, r0
   1a07a:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a07c:	4804      	ldr	r0, [pc, #16]	; (1a090 <ull_filter_adv_scan_state_cb+0x3c>)
   1a07e:	4905      	ldr	r1, [pc, #20]	; (1a094 <ull_filter_adv_scan_state_cb+0x40>)
   1a080:	f006 ba98 	b.w	205b4 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   1a084:	4803      	ldr	r0, [pc, #12]	; (1a094 <ull_filter_adv_scan_state_cb+0x40>)
   1a086:	f00c bfec 	b.w	27062 <k_delayed_work_cancel>
   1a08a:	bf00      	nop
   1a08c:	2000e780 	.word	0x2000e780
   1a090:	2000aca0 	.word	0x2000aca0
   1a094:	2000ab60 	.word	0x2000ab60

0001a098 <ull_filter_adv_update>:
{
   1a098:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1a09a:	4b09      	ldr	r3, [pc, #36]	; (1a0c0 <ull_filter_adv_update+0x28>)
   1a09c:	2200      	movs	r2, #0
   1a09e:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   1a0a0:	b930      	cbnz	r0, 1a0b0 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   1a0a2:	4b08      	ldr	r3, [pc, #32]	; (1a0c4 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   1a0a4:	4a08      	ldr	r2, [pc, #32]	; (1a0c8 <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   1a0a6:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1a0a8:	2100      	movs	r1, #0
   1a0aa:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1a0ac:	b91b      	cbnz	r3, 1a0b6 <ull_filter_adv_update+0x1e>
}
   1a0ae:	bd08      	pop	{r3, pc}
		wl_update();
   1a0b0:	f7ff fc1c 	bl	198ec <wl_update>
   1a0b4:	e7f5      	b.n	1a0a2 <ull_filter_adv_update+0xa>
}
   1a0b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1a0ba:	f7ff bbdf 	b.w	1987c <rl_update>
   1a0be:	bf00      	nop
   1a0c0:	2000e7c4 	.word	0x2000e7c4
   1a0c4:	2000f311 	.word	0x2000f311
   1a0c8:	2000e74c 	.word	0x2000e74c

0001a0cc <ull_filter_rpa_update>:
{
   1a0cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a0d0:	4683      	mov	fp, r0
   1a0d2:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1a0d4:	f00d f81e 	bl	27114 <z_impl_k_uptime_ticks>
   1a0d8:	014b      	lsls	r3, r1, #5
   1a0da:	0142      	lsls	r2, r0, #5
   1a0dc:	1a12      	subs	r2, r2, r0
   1a0de:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1a0e2:	eb63 0301 	sbc.w	r3, r3, r1
   1a0e6:	009b      	lsls	r3, r3, #2
   1a0e8:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1a0ec:	eb19 0900 	adds.w	r9, r9, r0
   1a0f0:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1a0f4:	eb41 0103 	adc.w	r1, r1, r3
   1a0f8:	00cb      	lsls	r3, r1, #3
   1a0fa:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1a0fe:	0bd9      	lsrs	r1, r3, #15
   1a100:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1a104:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1a108:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1a10a:	f1bb 0f00 	cmp.w	fp, #0
   1a10e:	d117      	bne.n	1a140 <ull_filter_rpa_update+0x74>
   1a110:	4a5d      	ldr	r2, [pc, #372]	; (1a288 <ull_filter_rpa_update+0x1bc>)
   1a112:	e9d2 3200 	ldrd	r3, r2, [r2]
   1a116:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a11a:	bf08      	it	eq
   1a11c:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   1a120:	d00e      	beq.n	1a140 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1a122:	ebb9 0303 	subs.w	r3, r9, r3
   1a126:	eb61 0202 	sbc.w	r2, r1, r2
   1a12a:	4958      	ldr	r1, [pc, #352]	; (1a28c <ull_filter_rpa_update+0x1c0>)
   1a12c:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1a12e:	428b      	cmp	r3, r1
   1a130:	f172 0300 	sbcs.w	r3, r2, #0
   1a134:	bfac      	ite	ge
   1a136:	f04f 0a01 	movge.w	sl, #1
   1a13a:	f04f 0a00 	movlt.w	sl, #0
   1a13e:	e001      	b.n	1a144 <ull_filter_rpa_update+0x78>
   1a140:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a144:	4e52      	ldr	r6, [pc, #328]	; (1a290 <ull_filter_rpa_update+0x1c4>)
   1a146:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1a294 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   1a14a:	2400      	movs	r4, #0
   1a14c:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a150:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a154:	00a5      	lsls	r5, r4, #2
   1a156:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a15a:	07da      	lsls	r2, r3, #31
   1a15c:	d515      	bpl.n	1a18a <ull_filter_rpa_update+0xbe>
   1a15e:	f1ba 0f00 	cmp.w	sl, #0
   1a162:	d101      	bne.n	1a168 <ull_filter_rpa_update+0x9c>
   1a164:	0798      	lsls	r0, r3, #30
   1a166:	d410      	bmi.n	1a18a <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1a168:	192b      	adds	r3, r5, r4
   1a16a:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a16e:	0759      	lsls	r1, r3, #29
   1a170:	d432      	bmi.n	1a1d8 <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   1a172:	192b      	adds	r3, r5, r4
   1a174:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a178:	071a      	lsls	r2, r3, #28
   1a17a:	d41b      	bmi.n	1a1b4 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   1a17c:	4425      	add	r5, r4
   1a17e:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1a182:	f043 0302 	orr.w	r3, r3, #2
   1a186:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a18a:	3401      	adds	r4, #1
   1a18c:	2c08      	cmp	r4, #8
   1a18e:	f108 0806 	add.w	r8, r8, #6
   1a192:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a196:	d1db      	bne.n	1a150 <ull_filter_rpa_update+0x84>
	if (all) {
   1a198:	f1ba 0f00 	cmp.w	sl, #0
   1a19c:	d004      	beq.n	1a1a8 <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1a19e:	4b3a      	ldr	r3, [pc, #232]	; (1a288 <ull_filter_rpa_update+0x1bc>)
   1a1a0:	9a01      	ldr	r2, [sp, #4]
   1a1a2:	f8c3 9000 	str.w	r9, [r3]
   1a1a6:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1a1a8:	f1bb 0f00 	cmp.w	fp, #0
   1a1ac:	d138      	bne.n	1a220 <ull_filter_rpa_update+0x154>
}
   1a1ae:	b007      	add	sp, #28
   1a1b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a1b4:	a902      	add	r1, sp, #8
   1a1b6:	f1a6 0017 	sub.w	r0, r6, #23
   1a1ba:	f00a f953 	bl	24464 <bt_rpa_create>
				LL_ASSERT(!err);
   1a1be:	2800      	cmp	r0, #0
   1a1c0:	d154      	bne.n	1a26c <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   1a1c2:	ab02      	add	r3, sp, #8
   1a1c4:	f8c6 3006 	str.w	r3, [r6, #6]
   1a1c8:	4619      	mov	r1, r3
   1a1ca:	2206      	movs	r2, #6
   1a1cc:	4640      	mov	r0, r8
   1a1ce:	f00a f899 	bl	24304 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a1d2:	f8c6 8006 	str.w	r8, [r6, #6]
   1a1d6:	e7d1      	b.n	1a17c <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1a1d8:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1a1dc:	4a2e      	ldr	r2, [pc, #184]	; (1a298 <ull_filter_rpa_update+0x1cc>)
   1a1de:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1a1e2:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1a1e4:	f10d 0307 	add.w	r3, sp, #7
   1a1e8:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1a1ec:	f812 1901 	ldrb.w	r1, [r2], #-1
   1a1f0:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1a1f4:	4283      	cmp	r3, r0
   1a1f6:	d1f9      	bne.n	1a1ec <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a1f8:	4631      	mov	r1, r6
   1a1fa:	a802      	add	r0, sp, #8
   1a1fc:	f00a f932 	bl	24464 <bt_rpa_create>
				LL_ASSERT(!err);
   1a200:	2800      	cmp	r0, #0
   1a202:	d0b6      	beq.n	1a172 <ull_filter_rpa_update+0xa6>
   1a204:	4a25      	ldr	r2, [pc, #148]	; (1a29c <ull_filter_rpa_update+0x1d0>)
   1a206:	4926      	ldr	r1, [pc, #152]	; (1a2a0 <ull_filter_rpa_update+0x1d4>)
   1a208:	4826      	ldr	r0, [pc, #152]	; (1a2a4 <ull_filter_rpa_update+0x1d8>)
   1a20a:	f240 2316 	movw	r3, #534	; 0x216
   1a20e:	f007 fbd7 	bl	219c0 <printk>
   1a212:	4040      	eors	r0, r0
   1a214:	f380 8811 	msr	BASEPRI, r0
   1a218:	f04f 0003 	mov.w	r0, #3
   1a21c:	df02      	svc	2
   1a21e:	e7a8      	b.n	1a172 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   1a220:	2000      	movs	r0, #0
   1a222:	f7fa fdf3 	bl	14e0c <ull_adv_is_enabled_get>
		if (adv) {
   1a226:	4604      	mov	r4, r0
   1a228:	2800      	cmp	r0, #0
   1a22a:	d0c0      	beq.n	1a1ae <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1a22c:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a230:	075b      	lsls	r3, r3, #29
   1a232:	d5bc      	bpl.n	1a1ae <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1a234:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1a238:	2b07      	cmp	r3, #7
   1a23a:	d8b8      	bhi.n	1a1ae <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a23c:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1a240:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1a244:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a246:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1a248:	302c      	adds	r0, #44	; 0x2c
   1a24a:	f001 f8b7 	bl	1b3bc <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   1a24e:	7872      	ldrb	r2, [r6, #1]
   1a250:	4605      	mov	r5, r0
   1a252:	3202      	adds	r2, #2
   1a254:	4631      	mov	r1, r6
   1a256:	f00a f855 	bl	24304 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1a25a:	4629      	mov	r1, r5
   1a25c:	4620      	mov	r0, r4
   1a25e:	f7fa fe33 	bl	14ec8 <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1a262:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1a266:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   1a26a:	e7a0      	b.n	1a1ae <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   1a26c:	4a0b      	ldr	r2, [pc, #44]	; (1a29c <ull_filter_rpa_update+0x1d0>)
   1a26e:	490c      	ldr	r1, [pc, #48]	; (1a2a0 <ull_filter_rpa_update+0x1d4>)
   1a270:	480c      	ldr	r0, [pc, #48]	; (1a2a4 <ull_filter_rpa_update+0x1d8>)
   1a272:	f240 2323 	movw	r3, #547	; 0x223
   1a276:	f007 fba3 	bl	219c0 <printk>
   1a27a:	4040      	eors	r0, r0
   1a27c:	f380 8811 	msr	BASEPRI, r0
   1a280:	f04f 0003 	mov.w	r0, #3
   1a284:	df02      	svc	2
   1a286:	e79c      	b.n	1a1c2 <ull_filter_rpa_update+0xf6>
   1a288:	2000ab58 	.word	0x2000ab58
   1a28c:	2000e780 	.word	0x2000e780
   1a290:	2000e62a 	.word	0x2000e62a
   1a294:	2000e554 	.word	0x2000e554
   1a298:	2000e58c 	.word	0x2000e58c
   1a29c:	00028a38 	.word	0x00028a38
   1a2a0:	00028524 	.word	0x00028524
   1a2a4:	000282a4 	.word	0x000282a4

0001a2a8 <rpa_timeout>:
{
   1a2a8:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1a2aa:	2001      	movs	r0, #1
   1a2ac:	f7ff ff0e 	bl	1a0cc <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1a2b0:	4a0a      	ldr	r2, [pc, #40]	; (1a2dc <rpa_timeout+0x34>)
   1a2b2:	6812      	ldr	r2, [r2, #0]
   1a2b4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a2b8:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a2bc:	2100      	movs	r1, #0
   1a2be:	fbe2 0103 	umlal	r0, r1, r2, r3
   1a2c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a2c6:	2300      	movs	r3, #0
   1a2c8:	f7e6 fdde 	bl	e88 <__aeabi_uldivmod>
}
   1a2cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a2d0:	4602      	mov	r2, r0
   1a2d2:	460b      	mov	r3, r1
   1a2d4:	4802      	ldr	r0, [pc, #8]	; (1a2e0 <rpa_timeout+0x38>)
   1a2d6:	4903      	ldr	r1, [pc, #12]	; (1a2e4 <rpa_timeout+0x3c>)
   1a2d8:	f006 b96c 	b.w	205b4 <k_delayed_work_submit_to_queue>
   1a2dc:	2000e780 	.word	0x2000e780
   1a2e0:	2000aca0 	.word	0x2000aca0
   1a2e4:	2000ab60 	.word	0x2000ab60

0001a2e8 <ull_filter_adva_get>:
{
   1a2e8:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   1a2ea:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1a2ee:	2c07      	cmp	r4, #7
   1a2f0:	d810      	bhi.n	1a314 <ull_filter_adva_get+0x2c>
   1a2f2:	4d10      	ldr	r5, [pc, #64]	; (1a334 <ull_filter_adva_get+0x4c>)
   1a2f4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a2f8:	00a6      	lsls	r6, r4, #2
   1a2fa:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1a2fe:	071a      	lsls	r2, r3, #28
   1a300:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1a304:	d505      	bpl.n	1a312 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   1a306:	079b      	lsls	r3, r3, #30
   1a308:	d506      	bpl.n	1a318 <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   1a30a:	4434      	add	r4, r6
   1a30c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1a310:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1a312:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1a314:	2000      	movs	r0, #0
}
   1a316:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   1a318:	4a07      	ldr	r2, [pc, #28]	; (1a338 <ull_filter_adva_get+0x50>)
   1a31a:	4908      	ldr	r1, [pc, #32]	; (1a33c <ull_filter_adva_get+0x54>)
   1a31c:	4808      	ldr	r0, [pc, #32]	; (1a340 <ull_filter_adva_get+0x58>)
   1a31e:	f240 2349 	movw	r3, #585	; 0x249
   1a322:	f007 fb4d 	bl	219c0 <printk>
   1a326:	4040      	eors	r0, r0
   1a328:	f380 8811 	msr	BASEPRI, r0
   1a32c:	f04f 0003 	mov.w	r0, #3
   1a330:	df02      	svc	2
   1a332:	e7ea      	b.n	1a30a <ull_filter_adva_get+0x22>
   1a334:	2000e60c 	.word	0x2000e60c
   1a338:	00028a38 	.word	0x00028a38
   1a33c:	00028a9c 	.word	0x00028a9c
   1a340:	000282a4 	.word	0x000282a4

0001a344 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   1a344:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1a348:	2b07      	cmp	r3, #7
   1a34a:	d80d      	bhi.n	1a368 <ull_filter_tgta_get+0x24>
   1a34c:	4a07      	ldr	r2, [pc, #28]	; (1a36c <ull_filter_tgta_get+0x28>)
   1a34e:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a352:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   1a356:	f3c1 0080 	ubfx	r0, r1, #2, #1
   1a35a:	0749      	lsls	r1, r1, #29
   1a35c:	d505      	bpl.n	1a36a <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   1a35e:	2028      	movs	r0, #40	; 0x28
   1a360:	fb00 2003 	mla	r0, r0, r3, r2
   1a364:	301e      	adds	r0, #30
   1a366:	4770      	bx	lr
	return NULL;
   1a368:	2000      	movs	r0, #0
}
   1a36a:	4770      	bx	lr
   1a36c:	2000e60c 	.word	0x2000e60c

0001a370 <ull_filter_rl_find>:
{
   1a370:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a374:	468b      	mov	fp, r1
	if (free) {
   1a376:	4617      	mov	r7, r2
   1a378:	b10a      	cbz	r2, 1a37e <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1a37a:	23ff      	movs	r3, #255	; 0xff
   1a37c:	7013      	strb	r3, [r2, #0]
   1a37e:	4d1b      	ldr	r5, [pc, #108]	; (1a3ec <ull_filter_rl_find+0x7c>)
{
   1a380:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a382:	f000 0a01 	and.w	sl, r0, #1
   1a386:	f105 39ff 	add.w	r9, r5, #4294967295
   1a38a:	e006      	b.n	1a39a <ull_filter_rl_find+0x2a>
   1a38c:	4552      	cmp	r2, sl
   1a38e:	d01f      	beq.n	1a3d0 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a390:	3401      	adds	r4, #1
   1a392:	2c08      	cmp	r4, #8
   1a394:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1a398:	d015      	beq.n	1a3c6 <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a39a:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1a39e:	fa5f f884 	uxtb.w	r8, r4
   1a3a2:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1a3a6:	07d9      	lsls	r1, r3, #31
   1a3a8:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a3ac:	d4ee      	bmi.n	1a38c <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a3ae:	2f00      	cmp	r7, #0
   1a3b0:	d0ee      	beq.n	1a390 <ull_filter_rl_find+0x20>
   1a3b2:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a3b4:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a3b6:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1a3b8:	bf08      	it	eq
   1a3ba:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a3be:	2c08      	cmp	r4, #8
   1a3c0:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1a3c4:	d1e9      	bne.n	1a39a <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1a3c6:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1a3ca:	4640      	mov	r0, r8
   1a3cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a3d0:	4628      	mov	r0, r5
   1a3d2:	2206      	movs	r2, #6
   1a3d4:	4659      	mov	r1, fp
   1a3d6:	f009 ff84 	bl	242e2 <memcmp>
   1a3da:	2800      	cmp	r0, #0
   1a3dc:	d0f5      	beq.n	1a3ca <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a3de:	2f00      	cmp	r7, #0
   1a3e0:	d0d6      	beq.n	1a390 <ull_filter_rl_find+0x20>
   1a3e2:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1a3e6:	07db      	lsls	r3, r3, #31
   1a3e8:	d4d2      	bmi.n	1a390 <ull_filter_rl_find+0x20>
   1a3ea:	e7e2      	b.n	1a3b2 <ull_filter_rl_find+0x42>
   1a3ec:	2000e60d 	.word	0x2000e60d

0001a3f0 <ll_rl_add>:
{
   1a3f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a3f4:	4680      	mov	r8, r0
   1a3f6:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a3f8:	2000      	movs	r0, #0
{
   1a3fa:	460e      	mov	r6, r1
   1a3fc:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a3fe:	f7fa fd13 	bl	14e28 <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1a402:	2800      	cmp	r0, #0
   1a404:	d17d      	bne.n	1a502 <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1a406:	46c2      	mov	sl, r8
   1a408:	4604      	mov	r4, r0
   1a40a:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1a40e:	f10d 020f 	add.w	r2, sp, #15
   1a412:	4651      	mov	r1, sl
   1a414:	f7ff ffac 	bl	1a370 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a418:	2807      	cmp	r0, #7
   1a41a:	f240 80b5 	bls.w	1a588 <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a41e:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1a422:	2f07      	cmp	r7, #7
   1a424:	f200 8084 	bhi.w	1a530 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a428:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1a42c:	4d58      	ldr	r5, [pc, #352]	; (1a590 <ll_rl_add+0x1a0>)
   1a42e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1a432:	1c58      	adds	r0, r3, #1
   1a434:	2206      	movs	r2, #6
   1a436:	4651      	mov	r1, sl
   1a438:	4428      	add	r0, r5
   1a43a:	9300      	str	r3, [sp, #0]
   1a43c:	f009 ff62 	bl	24304 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a440:	f898 3000 	ldrb.w	r3, [r8]
   1a444:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1a448:	465a      	mov	r2, fp
   1a44a:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   1a44e:	f363 1186 	bfi	r1, r3, #6, #1
   1a452:	f805 100b 	strb.w	r1, [r5, fp]
   1a456:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a45a:	2110      	movs	r1, #16
   1a45c:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a45e:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a460:	f7f6 f8f2 	bl	10648 <mem_nz>
   1a464:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a468:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a46a:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a46e:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a470:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a474:	f7f6 f8e8 	bl	10648 <mem_nz>
   1a478:	f815 200b 	ldrb.w	r2, [r5, fp]
   1a47c:	f000 0001 	and.w	r0, r0, #1
   1a480:	f360 02c3 	bfi	r2, r0, #3, #1
   1a484:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   1a488:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a48a:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   1a48e:	d453      	bmi.n	1a538 <ll_rl_add+0x148>
	if (rl[i].lirk) {
   1a490:	2800      	cmp	r0, #0
   1a492:	d16b      	bne.n	1a56c <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a494:	9800      	ldr	r0, [sp, #0]
   1a496:	4e3f      	ldr	r6, [pc, #252]	; (1a594 <ll_rl_add+0x1a4>)
   1a498:	3018      	adds	r0, #24
   1a49a:	2206      	movs	r2, #6
   1a49c:	2100      	movs	r1, #0
   1a49e:	4428      	add	r0, r5
   1a4a0:	f009 ff5b 	bl	2435a <memset>
	rl[i].dev = 0U;
   1a4a4:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   1a4a8:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1a4ac:	f021 0112 	bic.w	r1, r1, #18
   1a4b0:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a4b4:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   1a4b8:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a4bc:	f009 0901 	and.w	r9, r9, #1
   1a4c0:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1a4c4:	07d3      	lsls	r3, r2, #31
   1a4c6:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a4ca:	d501      	bpl.n	1a4d0 <ll_rl_add+0xe0>
   1a4cc:	4549      	cmp	r1, r9
   1a4ce:	d01c      	beq.n	1a50a <ll_rl_add+0x11a>
	for (i = 0; i < WL_SIZE; i++) {
   1a4d0:	3401      	adds	r4, #1
   1a4d2:	2c08      	cmp	r4, #8
   1a4d4:	f106 0608 	add.w	r6, r6, #8
   1a4d8:	d1f2      	bne.n	1a4c0 <ll_rl_add+0xd0>
		rl[i].wl = 0U;
   1a4da:	eb0b 0207 	add.w	r2, fp, r7
   1a4de:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1a4e2:	f36f 1145 	bfc	r1, #5, #1
   1a4e6:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   1a4ea:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1a4ee:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1a4f0:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1a4f4:	f042 0201 	orr.w	r2, r2, #1
   1a4f8:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   1a4fc:	b005      	add	sp, #20
   1a4fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a502:	200c      	movs	r0, #12
}
   1a504:	b005      	add	sp, #20
   1a506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a50a:	2206      	movs	r2, #6
   1a50c:	4630      	mov	r0, r6
   1a50e:	4651      	mov	r1, sl
   1a510:	f009 fee7 	bl	242e2 <memcmp>
   1a514:	2800      	cmp	r0, #0
   1a516:	d1db      	bne.n	1a4d0 <ll_rl_add+0xe0>
		rl[i].wl = 1U;
   1a518:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   1a51c:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   1a520:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   1a524:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   1a526:	f041 0120 	orr.w	r1, r1, #32
   1a52a:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1a52e:	e7dc      	b.n	1a4ea <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a530:	2007      	movs	r0, #7
}
   1a532:	b005      	add	sp, #20
   1a534:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1a538:	4b17      	ldr	r3, [pc, #92]	; (1a598 <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1a53a:	4a18      	ldr	r2, [pc, #96]	; (1a59c <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   1a53c:	7819      	ldrb	r1, [r3, #0]
   1a53e:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a542:	5457      	strb	r7, [r2, r1]
   1a544:	4a16      	ldr	r2, [pc, #88]	; (1a5a0 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   1a546:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1a54a:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1a54e:	3101      	adds	r1, #1
	psrc += length - 1;
   1a550:	f106 020f 	add.w	r2, r6, #15
   1a554:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a556:	f10c 3cff 	add.w	ip, ip, #4294967295
   1a55a:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   1a55c:	f812 1901 	ldrb.w	r1, [r2], #-1
   1a560:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1a564:	42b2      	cmp	r2, r6
   1a566:	d1f9      	bne.n	1a55c <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   1a568:	2800      	cmp	r0, #0
   1a56a:	d093      	beq.n	1a494 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1a56c:	9b00      	ldr	r3, [sp, #0]
   1a56e:	1dd8      	adds	r0, r3, #7
   1a570:	4649      	mov	r1, r9
   1a572:	2210      	movs	r2, #16
   1a574:	4428      	add	r0, r5
   1a576:	f009 fec5 	bl	24304 <memcpy>
		rl[i].local_rpa = NULL;
   1a57a:	eb0b 0207 	add.w	r2, fp, r7
   1a57e:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1a582:	2100      	movs	r1, #0
   1a584:	6251      	str	r1, [r2, #36]	; 0x24
   1a586:	e785      	b.n	1a494 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   1a588:	2012      	movs	r0, #18
}
   1a58a:	b005      	add	sp, #20
   1a58c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a590:	2000e60c 	.word	0x2000e60c
   1a594:	2000e786 	.word	0x2000e786
   1a598:	2000f310 	.word	0x2000f310
   1a59c:	2000e584 	.word	0x2000e584
   1a5a0:	2000e58c 	.word	0x2000e58c

0001a5a4 <ull_filter_reset>:
	wl_anon = 0U;
   1a5a4:	4a33      	ldr	r2, [pc, #204]	; (1a674 <ull_filter_reset+0xd0>)
   1a5a6:	4934      	ldr	r1, [pc, #208]	; (1a678 <ull_filter_reset+0xd4>)
{
   1a5a8:	b538      	push	{r3, r4, r5, lr}
	wl_anon = 0U;
   1a5aa:	2300      	movs	r3, #0
   1a5ac:	4c33      	ldr	r4, [pc, #204]	; (1a67c <ull_filter_reset+0xd8>)
   1a5ae:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   1a5b0:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   1a5b4:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1a5b6:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1a5b8:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1a5bc:	d805      	bhi.n	1a5ca <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   1a5be:	f814 203c 	ldrb.w	r2, [r4, ip, lsl #3]
   1a5c2:	f36f 1245 	bfc	r2, #5, #1
   1a5c6:	f804 203c 	strb.w	r2, [r4, ip, lsl #3]
		wl[i].taken = 0U;
   1a5ca:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1a5ce:	f36f 0200 	bfc	r2, #0, #1
   1a5d2:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1a5d6:	3301      	adds	r3, #1
   1a5d8:	2b08      	cmp	r3, #8
   1a5da:	d1e9      	bne.n	1a5b0 <ull_filter_reset+0xc>
	rl_enable = 0U;
   1a5dc:	4b28      	ldr	r3, [pc, #160]	; (1a680 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a5de:	4a29      	ldr	r2, [pc, #164]	; (1a684 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   1a5e0:	2100      	movs	r1, #0
   1a5e2:	7019      	strb	r1, [r3, #0]
		rl[i].taken = 0U;
   1a5e4:	7823      	ldrb	r3, [r4, #0]
   1a5e6:	f361 0300 	bfi	r3, r1, #0, #1
   1a5ea:	7023      	strb	r3, [r4, #0]
   1a5ec:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1a5f0:	f361 0300 	bfi	r3, r1, #0, #1
   1a5f4:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   1a5f8:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1a5fc:	f361 0300 	bfi	r3, r1, #0, #1
   1a600:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   1a604:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1a608:	f361 0300 	bfi	r3, r1, #0, #1
   1a60c:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1a610:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   1a614:	f361 0300 	bfi	r3, r1, #0, #1
   1a618:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
   1a61c:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1a620:	f361 0300 	bfi	r3, r1, #0, #1
   1a624:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   1a628:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   1a62c:	f361 0300 	bfi	r3, r1, #0, #1
   1a630:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
   1a634:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1a638:	f361 0300 	bfi	r3, r1, #0, #1
   1a63c:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   1a640:	4b11      	ldr	r3, [pc, #68]	; (1a688 <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a642:	4c12      	ldr	r4, [pc, #72]	; (1a68c <ull_filter_reset+0xe8>)
	peer_irk_count = 0U;
   1a644:	7019      	strb	r1, [r3, #0]
	rpa_last_ms = -1;
   1a646:	4b12      	ldr	r3, [pc, #72]	; (1a690 <ull_filter_reset+0xec>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a648:	6014      	str	r4, [r2, #0]
	rpa_last_ms = -1;
   1a64a:	f04f 35ff 	mov.w	r5, #4294967295
   1a64e:	f04f 34ff 	mov.w	r4, #4294967295
   1a652:	e9c3 4500 	strd	r4, r5, [r3]
	if (init) {
   1a656:	b138      	cbz	r0, 1a668 <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1a658:	4b0e      	ldr	r3, [pc, #56]	; (1a694 <ull_filter_reset+0xf0>)
   1a65a:	2230      	movs	r2, #48	; 0x30
   1a65c:	4618      	mov	r0, r3
   1a65e:	f009 fe7c 	bl	2435a <memset>
   1a662:	4a0d      	ldr	r2, [pc, #52]	; (1a698 <ull_filter_reset+0xf4>)
   1a664:	6042      	str	r2, [r0, #4]
}
   1a666:	bd38      	pop	{r3, r4, r5, pc}
   1a668:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_cancel(&rpa_work);
   1a66c:	4809      	ldr	r0, [pc, #36]	; (1a694 <ull_filter_reset+0xf0>)
   1a66e:	f00c bcf8 	b.w	27062 <k_delayed_work_cancel>
   1a672:	bf00      	nop
   1a674:	2000f312 	.word	0x2000f312
   1a678:	2000e784 	.word	0x2000e784
   1a67c:	2000e60c 	.word	0x2000e60c
   1a680:	2000f311 	.word	0x2000f311
   1a684:	2000e780 	.word	0x2000e780
   1a688:	2000f310 	.word	0x2000f310
   1a68c:	000dbba0 	.word	0x000dbba0
   1a690:	2000ab58 	.word	0x2000ab58
   1a694:	2000ab60 	.word	0x2000ab60
   1a698:	0001a2a9 	.word	0x0001a2a9

0001a69c <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1a69c:	2807      	cmp	r0, #7
   1a69e:	d807      	bhi.n	1a6b0 <ull_filter_lll_lrpa_used+0x14>
   1a6a0:	4b04      	ldr	r3, [pc, #16]	; (1a6b4 <ull_filter_lll_lrpa_used+0x18>)
   1a6a2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a6a6:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1a6aa:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1a6ae:	4770      	bx	lr
   1a6b0:	2000      	movs	r0, #0
}
   1a6b2:	4770      	bx	lr
   1a6b4:	2000e60c 	.word	0x2000e60c

0001a6b8 <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1a6b8:	4b02      	ldr	r3, [pc, #8]	; (1a6c4 <ull_filter_lll_irks_get+0xc>)
   1a6ba:	781b      	ldrb	r3, [r3, #0]
   1a6bc:	7003      	strb	r3, [r0, #0]
}
   1a6be:	4802      	ldr	r0, [pc, #8]	; (1a6c8 <ull_filter_lll_irks_get+0x10>)
   1a6c0:	4770      	bx	lr
   1a6c2:	bf00      	nop
   1a6c4:	2000f310 	.word	0x2000f310
   1a6c8:	2000e58c 	.word	0x2000e58c

0001a6cc <ull_filter_lll_rl_irk_idx>:
{
   1a6cc:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a6ce:	4b20      	ldr	r3, [pc, #128]	; (1a750 <ull_filter_lll_rl_irk_idx+0x84>)
   1a6d0:	781b      	ldrb	r3, [r3, #0]
   1a6d2:	4283      	cmp	r3, r0
{
   1a6d4:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a6d6:	d90c      	bls.n	1a6f2 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1a6d8:	4b1e      	ldr	r3, [pc, #120]	; (1a754 <ull_filter_lll_rl_irk_idx+0x88>)
   1a6da:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a6dc:	2c07      	cmp	r4, #7
   1a6de:	d819      	bhi.n	1a714 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1a6e0:	4b1d      	ldr	r3, [pc, #116]	; (1a758 <ull_filter_lll_rl_irk_idx+0x8c>)
   1a6e2:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a6e6:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1a6ea:	07db      	lsls	r3, r3, #31
   1a6ec:	d520      	bpl.n	1a730 <ull_filter_lll_rl_irk_idx+0x64>
}
   1a6ee:	4620      	mov	r0, r4
   1a6f0:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a6f2:	4a1a      	ldr	r2, [pc, #104]	; (1a75c <ull_filter_lll_rl_irk_idx+0x90>)
   1a6f4:	491a      	ldr	r1, [pc, #104]	; (1a760 <ull_filter_lll_rl_irk_idx+0x94>)
   1a6f6:	481b      	ldr	r0, [pc, #108]	; (1a764 <ull_filter_lll_rl_irk_idx+0x98>)
   1a6f8:	f240 23b9 	movw	r3, #697	; 0x2b9
   1a6fc:	f007 f960 	bl	219c0 <printk>
   1a700:	4040      	eors	r0, r0
   1a702:	f380 8811 	msr	BASEPRI, r0
   1a706:	f04f 0003 	mov.w	r0, #3
   1a70a:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1a70c:	4b11      	ldr	r3, [pc, #68]	; (1a754 <ull_filter_lll_rl_irk_idx+0x88>)
   1a70e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a710:	2c07      	cmp	r4, #7
   1a712:	d9e5      	bls.n	1a6e0 <ull_filter_lll_rl_irk_idx+0x14>
   1a714:	4a11      	ldr	r2, [pc, #68]	; (1a75c <ull_filter_lll_rl_irk_idx+0x90>)
   1a716:	4914      	ldr	r1, [pc, #80]	; (1a768 <ull_filter_lll_rl_irk_idx+0x9c>)
   1a718:	4812      	ldr	r0, [pc, #72]	; (1a764 <ull_filter_lll_rl_irk_idx+0x98>)
   1a71a:	f240 23bb 	movw	r3, #699	; 0x2bb
   1a71e:	f007 f94f 	bl	219c0 <printk>
   1a722:	4040      	eors	r0, r0
   1a724:	f380 8811 	msr	BASEPRI, r0
   1a728:	f04f 0003 	mov.w	r0, #3
   1a72c:	df02      	svc	2
   1a72e:	e7d7      	b.n	1a6e0 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1a730:	4a0a      	ldr	r2, [pc, #40]	; (1a75c <ull_filter_lll_rl_irk_idx+0x90>)
   1a732:	490e      	ldr	r1, [pc, #56]	; (1a76c <ull_filter_lll_rl_irk_idx+0xa0>)
   1a734:	480b      	ldr	r0, [pc, #44]	; (1a764 <ull_filter_lll_rl_irk_idx+0x98>)
   1a736:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1a73a:	f007 f941 	bl	219c0 <printk>
   1a73e:	4040      	eors	r0, r0
   1a740:	f380 8811 	msr	BASEPRI, r0
   1a744:	f04f 0003 	mov.w	r0, #3
   1a748:	df02      	svc	2
}
   1a74a:	4620      	mov	r0, r4
   1a74c:	bd10      	pop	{r4, pc}
   1a74e:	bf00      	nop
   1a750:	2000f310 	.word	0x2000f310
   1a754:	2000e584 	.word	0x2000e584
   1a758:	2000e60c 	.word	0x2000e60c
   1a75c:	00028a38 	.word	0x00028a38
   1a760:	00028c1c 	.word	0x00028c1c
   1a764:	000282a4 	.word	0x000282a4
   1a768:	00028c3c 	.word	0x00028c3c
   1a76c:	00028c10 	.word	0x00028c10

0001a770 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1a770:	2807      	cmp	r0, #7
   1a772:	d823      	bhi.n	1a7bc <ull_filter_lll_irk_whitelisted+0x4c>
{
   1a774:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1a776:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a77a:	4e11      	ldr	r6, [pc, #68]	; (1a7c0 <ull_filter_lll_irk_whitelisted+0x50>)
   1a77c:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1a780:	07db      	lsls	r3, r3, #31
   1a782:	4604      	mov	r4, r0
   1a784:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1a788:	d505      	bpl.n	1a796 <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1a78a:	442c      	add	r4, r5
   1a78c:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a790:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a794:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1a796:	4a0b      	ldr	r2, [pc, #44]	; (1a7c4 <ull_filter_lll_irk_whitelisted+0x54>)
   1a798:	490b      	ldr	r1, [pc, #44]	; (1a7c8 <ull_filter_lll_irk_whitelisted+0x58>)
   1a79a:	480c      	ldr	r0, [pc, #48]	; (1a7cc <ull_filter_lll_irk_whitelisted+0x5c>)
   1a79c:	f240 23c7 	movw	r3, #711	; 0x2c7
   1a7a0:	f007 f90e 	bl	219c0 <printk>
   1a7a4:	4040      	eors	r0, r0
   1a7a6:	f380 8811 	msr	BASEPRI, r0
   1a7aa:	f04f 0003 	mov.w	r0, #3
   1a7ae:	df02      	svc	2
	return rl[rl_idx].wl;
   1a7b0:	442c      	add	r4, r5
   1a7b2:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a7b6:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a7ba:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1a7bc:	2000      	movs	r0, #0
}
   1a7be:	4770      	bx	lr
   1a7c0:	2000e60c 	.word	0x2000e60c
   1a7c4:	00028a38 	.word	0x00028a38
   1a7c8:	00028a88 	.word	0x00028a88
   1a7cc:	000282a4 	.word	0x000282a4

0001a7d0 <ull_filter_lll_get>:
		return &wl_filter;
   1a7d0:	4a03      	ldr	r2, [pc, #12]	; (1a7e0 <ull_filter_lll_get+0x10>)
   1a7d2:	4b04      	ldr	r3, [pc, #16]	; (1a7e4 <ull_filter_lll_get+0x14>)
}
   1a7d4:	2800      	cmp	r0, #0
   1a7d6:	bf0c      	ite	eq
   1a7d8:	4610      	moveq	r0, r2
   1a7da:	4618      	movne	r0, r3
   1a7dc:	4770      	bx	lr
   1a7de:	bf00      	nop
   1a7e0:	2000e74c 	.word	0x2000e74c
   1a7e4:	2000e7c4 	.word	0x2000e7c4

0001a7e8 <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1a7e8:	4b1c      	ldr	r3, [pc, #112]	; (1a85c <ull_filter_lll_rl_addr_allowed+0x74>)
   1a7ea:	781b      	ldrb	r3, [r3, #0]
   1a7ec:	b1f3      	cbz	r3, 1a82c <ull_filter_lll_rl_addr_allowed+0x44>
   1a7ee:	7813      	ldrb	r3, [r2, #0]
   1a7f0:	2bff      	cmp	r3, #255	; 0xff
   1a7f2:	d11b      	bne.n	1a82c <ull_filter_lll_rl_addr_allowed+0x44>
{
   1a7f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a7f8:	4d19      	ldr	r5, [pc, #100]	; (1a860 <ull_filter_lll_rl_addr_allowed+0x78>)
   1a7fa:	4604      	mov	r4, r0
   1a7fc:	46ae      	mov	lr, r5
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1a7fe:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a800:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1a804:	b2df      	uxtb	r7, r3
   1a806:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1a80a:	f01c 0001 	ands.w	r0, ip, #1
   1a80e:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1a812:	d003      	beq.n	1a81c <ull_filter_lll_rl_addr_allowed+0x34>
   1a814:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1a818:	45a4      	cmp	ip, r4
   1a81a:	d009      	beq.n	1a830 <ull_filter_lll_rl_addr_allowed+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a81c:	3301      	adds	r3, #1
   1a81e:	2b08      	cmp	r3, #8
   1a820:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1a824:	d1ec      	bne.n	1a800 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   1a826:	2001      	movs	r0, #1
}
   1a828:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1a82c:	2001      	movs	r0, #1
}
   1a82e:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a830:	f101 38ff 	add.w	r8, r1, #4294967295
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a834:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a836:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1a83a:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1a83e:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1a842:	45ca      	cmp	sl, r9
   1a844:	d1ea      	bne.n	1a81c <ull_filter_lll_rl_addr_allowed+0x34>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a846:	45dc      	cmp	ip, fp
   1a848:	d1f7      	bne.n	1a83a <ull_filter_lll_rl_addr_allowed+0x52>
				return !rl[i].pirk || rl[i].dev;
   1a84a:	4433      	add	r3, r6
				*rl_idx = i;
   1a84c:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1a84e:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1a852:	075a      	lsls	r2, r3, #29
   1a854:	d5e8      	bpl.n	1a828 <ull_filter_lll_rl_addr_allowed+0x40>
   1a856:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1a85a:	e7e5      	b.n	1a828 <ull_filter_lll_rl_addr_allowed+0x40>
   1a85c:	2000f311 	.word	0x2000f311
   1a860:	2000e60c 	.word	0x2000e60c

0001a864 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1a864:	4b02      	ldr	r3, [pc, #8]	; (1a870 <ull_filter_lll_rl_enabled+0xc>)
   1a866:	7818      	ldrb	r0, [r3, #0]
}
   1a868:	3800      	subs	r0, #0
   1a86a:	bf18      	it	ne
   1a86c:	2001      	movne	r0, #1
   1a86e:	4770      	bx	lr
   1a870:	2000f311 	.word	0x2000f311

0001a874 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a874:	4668      	mov	r0, sp
   1a876:	f020 0107 	bic.w	r1, r0, #7
   1a87a:	468d      	mov	sp, r1
   1a87c:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1a87e:	f001 ff2d 	bl	1c6dc <isr_radio>

	ISR_DIRECT_PM();
   1a882:	f7ec fefb 	bl	767c <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1a886:	f7ed fa2f 	bl	7ce8 <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a88a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a88e:	4685      	mov	sp, r0
   1a890:	4770      	bx	lr
   1a892:	bf00      	nop

0001a894 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1a894:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1a896:	4b09      	ldr	r3, [pc, #36]	; (1a8bc <rtc0_nrf5_isr+0x28>)
   1a898:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1a89c:	b93a      	cbnz	r2, 1a8ae <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1a89e:	2001      	movs	r0, #1
   1a8a0:	f7f5 ffb4 	bl	1080c <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1a8a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1a8a8:	2002      	movs	r0, #2
   1a8aa:	f7f5 bfaf 	b.w	1080c <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1a8ae:	2000      	movs	r0, #0
   1a8b0:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1a8b4:	f7f7 f858 	bl	11968 <ticker_trigger>
   1a8b8:	e7f1      	b.n	1a89e <rtc0_nrf5_isr+0xa>
   1a8ba:	bf00      	nop
   1a8bc:	4000b000 	.word	0x4000b000

0001a8c0 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1a8c0:	2000      	movs	r0, #0
   1a8c2:	f7f5 bfa3 	b.w	1080c <mayfly_run>
   1a8c6:	bf00      	nop

0001a8c8 <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1a8c8:	f002 b822 	b.w	1c910 <radio_status_reset>

0001a8cc <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a8cc:	2801      	cmp	r0, #1
   1a8ce:	d800      	bhi.n	1a8d2 <ticker_stop_op_cb+0x6>
   1a8d0:	4770      	bx	lr
{
   1a8d2:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a8d4:	4a06      	ldr	r2, [pc, #24]	; (1a8f0 <ticker_stop_op_cb+0x24>)
   1a8d6:	4907      	ldr	r1, [pc, #28]	; (1a8f4 <ticker_stop_op_cb+0x28>)
   1a8d8:	4807      	ldr	r0, [pc, #28]	; (1a8f8 <ticker_stop_op_cb+0x2c>)
   1a8da:	f240 23a3 	movw	r3, #675	; 0x2a3
   1a8de:	f007 f86f 	bl	219c0 <printk>
   1a8e2:	4040      	eors	r0, r0
   1a8e4:	f380 8811 	msr	BASEPRI, r0
   1a8e8:	f04f 0003 	mov.w	r0, #3
   1a8ec:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a8ee:	bd08      	pop	{r3, pc}
   1a8f0:	00028c58 	.word	0x00028c58
   1a8f4:	00028ca0 	.word	0x00028ca0
   1a8f8:	000282a4 	.word	0x000282a4

0001a8fc <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a8fc:	2801      	cmp	r0, #1
   1a8fe:	d800      	bhi.n	1a902 <ticker_start_op_cb+0x6>
   1a900:	4770      	bx	lr
{
   1a902:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1a904:	4a06      	ldr	r2, [pc, #24]	; (1a920 <ticker_start_op_cb+0x24>)
   1a906:	4907      	ldr	r1, [pc, #28]	; (1a924 <ticker_start_op_cb+0x28>)
   1a908:	4807      	ldr	r0, [pc, #28]	; (1a928 <ticker_start_op_cb+0x2c>)
   1a90a:	f240 23ae 	movw	r3, #686	; 0x2ae
   1a90e:	f007 f857 	bl	219c0 <printk>
   1a912:	4040      	eors	r0, r0
   1a914:	f380 8811 	msr	BASEPRI, r0
   1a918:	f04f 0003 	mov.w	r0, #3
   1a91c:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1a91e:	bd08      	pop	{r3, pc}
   1a920:	00028c58 	.word	0x00028c58
   1a924:	00028ca0 	.word	0x00028ca0
   1a928:	000282a4 	.word	0x000282a4

0001a92c <preempt_ticker_cb>:
{
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a92c:	2200      	movs	r2, #0
{
   1a92e:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1a930:	4611      	mov	r1, r2
   1a932:	4b0a      	ldr	r3, [pc, #40]	; (1a95c <preempt_ticker_cb+0x30>)
   1a934:	2001      	movs	r0, #1
   1a936:	f7f5 ff15 	bl	10764 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1a93a:	b900      	cbnz	r0, 1a93e <preempt_ticker_cb+0x12>
}
   1a93c:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1a93e:	4a08      	ldr	r2, [pc, #32]	; (1a960 <preempt_ticker_cb+0x34>)
   1a940:	4908      	ldr	r1, [pc, #32]	; (1a964 <preempt_ticker_cb+0x38>)
   1a942:	4809      	ldr	r0, [pc, #36]	; (1a968 <preempt_ticker_cb+0x3c>)
   1a944:	f240 23da 	movw	r3, #730	; 0x2da
   1a948:	f007 f83a 	bl	219c0 <printk>
   1a94c:	4040      	eors	r0, r0
   1a94e:	f380 8811 	msr	BASEPRI, r0
   1a952:	f04f 0003 	mov.w	r0, #3
   1a956:	df02      	svc	2
}
   1a958:	bd08      	pop	{r3, pc}
   1a95a:	bf00      	nop
   1a95c:	20000624 	.word	0x20000624
   1a960:	00028c58 	.word	0x00028c58
   1a964:	00028540 	.word	0x00028540
   1a968:	000282a4 	.word	0x000282a4

0001a96c <preempt_ticker_start.isra.0>:
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a96c:	b530      	push	{r4, r5, lr}
	evt = HDR_LLL2EVT(prepare_param->param);
   1a96e:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a970:	4c16      	ldr	r4, [pc, #88]	; (1a9cc <preempt_ticker_start.isra.0+0x60>)
   1a972:	4917      	ldr	r1, [pc, #92]	; (1a9d0 <preempt_ticker_start.isra.0+0x64>)
   1a974:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a976:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a978:	e9cd 4207 	strd	r4, r2, [sp, #28]
   1a97c:	e9cd 1205 	strd	r1, r2, [sp, #20]
   1a980:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1a984:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1a988:	e9d3 5400 	ldrd	r5, r4, [r3]
   1a98c:	6899      	ldr	r1, [r3, #8]
   1a98e:	42a5      	cmp	r5, r4
   1a990:	bf2c      	ite	cs
   1a992:	ebc1 0105 	rsbcs	r1, r1, r5
   1a996:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1a99a:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1a99c:	9100      	str	r1, [sp, #0]
   1a99e:	4610      	mov	r0, r2
   1a9a0:	4611      	mov	r1, r2
   1a9a2:	f7f7 f84f 	bl	11a44 <ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a9a6:	2802      	cmp	r0, #2
   1a9a8:	d801      	bhi.n	1a9ae <preempt_ticker_start.isra.0+0x42>
}
   1a9aa:	b00b      	add	sp, #44	; 0x2c
   1a9ac:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1a9ae:	4a09      	ldr	r2, [pc, #36]	; (1a9d4 <preempt_ticker_start.isra.0+0x68>)
   1a9b0:	4909      	ldr	r1, [pc, #36]	; (1a9d8 <preempt_ticker_start.isra.0+0x6c>)
   1a9b2:	480a      	ldr	r0, [pc, #40]	; (1a9dc <preempt_ticker_start.isra.0+0x70>)
   1a9b4:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1a9b8:	f007 f802 	bl	219c0 <printk>
   1a9bc:	4040      	eors	r0, r0
   1a9be:	f380 8811 	msr	BASEPRI, r0
   1a9c2:	f04f 0003 	mov.w	r0, #3
   1a9c6:	df02      	svc	2
}
   1a9c8:	b00b      	add	sp, #44	; 0x2c
   1a9ca:	bd30      	pop	{r4, r5, pc}
   1a9cc:	0001a8fd 	.word	0x0001a8fd
   1a9d0:	0001a92d 	.word	0x0001a92d
   1a9d4:	00028c58 	.word	0x00028c58
   1a9d8:	00028cc0 	.word	0x00028cc0
   1a9dc:	000282a4 	.word	0x000282a4

0001a9e0 <preempt>:

static void preempt(void *param)
{
   1a9e0:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1a9e2:	4e4b      	ldr	r6, [pc, #300]	; (1ab10 <preempt+0x130>)
   1a9e4:	68b3      	ldr	r3, [r6, #8]
{
   1a9e6:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1a9e8:	b1b3      	cbz	r3, 1aa18 <preempt+0x38>
   1a9ea:	6833      	ldr	r3, [r6, #0]
   1a9ec:	b1a3      	cbz	r3, 1aa18 <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   1a9ee:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   1a9f0:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   1a9f4:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   1a9f8:	f7f9 fdf2 	bl	145e0 <ull_prepare_dequeue_iter>
	if (!next) {
   1a9fc:	4604      	mov	r4, r0
   1a9fe:	b158      	cbz	r0, 1aa18 <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1aa00:	f894 3020 	ldrb.w	r3, [r4, #32]
   1aa04:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1aa08:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   1aa0c:	d006      	beq.n	1aa1c <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1aa0e:	f7f9 fde7 	bl	145e0 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1aa12:	4604      	mov	r4, r0
   1aa14:	2800      	cmp	r0, #0
   1aa16:	d1f3      	bne.n	1aa00 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   1aa18:	b00b      	add	sp, #44	; 0x2c
   1aa1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1aa1c:	ab05      	add	r3, sp, #20
   1aa1e:	e9d6 2700 	ldrd	r2, r7, [r6]
   1aa22:	69e1      	ldr	r1, [r4, #28]
   1aa24:	68e0      	ldr	r0, [r4, #12]
   1aa26:	9300      	str	r3, [sp, #0]
   1aa28:	ab04      	add	r3, sp, #16
   1aa2a:	47b8      	blx	r7
	if (!ret) {
   1aa2c:	4607      	mov	r7, r0
   1aa2e:	2800      	cmp	r0, #0
   1aa30:	d062      	beq.n	1aaf8 <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   1aa32:	68b3      	ldr	r3, [r6, #8]
   1aa34:	6831      	ldr	r1, [r6, #0]
   1aa36:	4628      	mov	r0, r5
   1aa38:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1aa3a:	f117 0f0b 	cmn.w	r7, #11
   1aa3e:	d01a      	beq.n	1aa76 <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   1aa40:	3748      	adds	r7, #72	; 0x48
   1aa42:	d011      	beq.n	1aa68 <preempt+0x88>
   1aa44:	4a33      	ldr	r2, [pc, #204]	; (1ab14 <preempt+0x134>)
   1aa46:	4934      	ldr	r1, [pc, #208]	; (1ab18 <preempt+0x138>)
   1aa48:	4834      	ldr	r0, [pc, #208]	; (1ab1c <preempt+0x13c>)
   1aa4a:	f44f 7346 	mov.w	r3, #792	; 0x318
   1aa4e:	f006 ffb7 	bl	219c0 <printk>
   1aa52:	4040      	eors	r0, r0
   1aa54:	f380 8811 	msr	BASEPRI, r0
   1aa58:	f04f 0003 	mov.w	r0, #3
   1aa5c:	df02      	svc	2
   1aa5e:	e003      	b.n	1aa68 <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   1aa60:	f890 3020 	ldrb.w	r3, [r0, #32]
   1aa64:	079b      	lsls	r3, r3, #30
   1aa66:	d041      	beq.n	1aaec <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   1aa68:	f10d 000e 	add.w	r0, sp, #14
   1aa6c:	f7f9 fdb8 	bl	145e0 <ull_prepare_dequeue_iter>
		if (!next) {
   1aa70:	2800      	cmp	r0, #0
   1aa72:	d1f5      	bne.n	1aa60 <preempt+0x80>
   1aa74:	e7d0      	b.n	1aa18 <preempt+0x38>
		iter_idx = UINT8_MAX;
   1aa76:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1aa78:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   1aa7c:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1aa80:	f7f9 fdae 	bl	145e0 <ull_prepare_dequeue_iter>
		while (iter) {
   1aa84:	bb48      	cbnz	r0, 1aada <preempt+0xfa>
	prepare_param.param = event.curr.param;
   1aa86:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   1aa88:	9905      	ldr	r1, [sp, #20]
	prepare_param.param = event.curr.param;
   1aa8a:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aa8c:	2301      	movs	r3, #1
	event.curr.param = NULL;
   1aa8e:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aa90:	9301      	str	r3, [sp, #4]
   1aa92:	9100      	str	r1, [sp, #0]
	event.curr.param = NULL;
   1aa94:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1aa96:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1aa9a:	9b04      	ldr	r3, [sp, #16]
   1aa9c:	aa06      	add	r2, sp, #24
   1aa9e:	f7f9 fd5b 	bl	14558 <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1aaa2:	2800      	cmp	r0, #0
   1aaa4:	d0e0      	beq.n	1aa68 <preempt+0x88>
   1aaa6:	4a1b      	ldr	r2, [pc, #108]	; (1ab14 <preempt+0x134>)
   1aaa8:	491d      	ldr	r1, [pc, #116]	; (1ab20 <preempt+0x140>)
   1aaaa:	481c      	ldr	r0, [pc, #112]	; (1ab1c <preempt+0x13c>)
   1aaac:	f240 3316 	movw	r3, #790	; 0x316
   1aab0:	f006 ff86 	bl	219c0 <printk>
   1aab4:	4040      	eors	r0, r0
   1aab6:	f380 8811 	msr	BASEPRI, r0
   1aaba:	f04f 0003 	mov.w	r0, #3
   1aabe:	df02      	svc	2
   1aac0:	e7d2      	b.n	1aa68 <preempt+0x88>
				iter->is_aborted = 1;
   1aac2:	f043 0302 	orr.w	r3, r3, #2
				iter->abort_cb(&iter->prepare_param,
   1aac6:	6982      	ldr	r2, [r0, #24]
				iter->is_aborted = 1;
   1aac8:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1aacc:	4790      	blx	r2
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1aace:	f10d 000f 	add.w	r0, sp, #15
   1aad2:	f7f9 fd85 	bl	145e0 <ull_prepare_dequeue_iter>
		while (iter) {
   1aad6:	2800      	cmp	r0, #0
   1aad8:	d0d5      	beq.n	1aa86 <preempt+0xa6>
			if (!iter->is_aborted &&
   1aada:	f890 3020 	ldrb.w	r3, [r0, #32]
   1aade:	079a      	lsls	r2, r3, #30
   1aae0:	d4f5      	bmi.n	1aace <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   1aae2:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1aae4:	6831      	ldr	r1, [r6, #0]
   1aae6:	4291      	cmp	r1, r2
   1aae8:	d1f1      	bne.n	1aace <preempt+0xee>
   1aaea:	e7ea      	b.n	1aac2 <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   1aaec:	68c1      	ldr	r1, [r0, #12]
   1aaee:	6800      	ldr	r0, [r0, #0]
   1aaf0:	f7ff ff3c 	bl	1a96c <preempt_ticker_start.isra.0>
}
   1aaf4:	b00b      	add	sp, #44	; 0x2c
   1aaf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1aaf8:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1aafc:	69a2      	ldr	r2, [r4, #24]
   1aafe:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1ab00:	f043 0302 	orr.w	r3, r3, #2
   1ab04:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1ab08:	4620      	mov	r0, r4
   1ab0a:	4790      	blx	r2
		goto preempt_next;
   1ab0c:	e7ac      	b.n	1aa68 <preempt+0x88>
   1ab0e:	bf00      	nop
   1ab10:	2000e7fc 	.word	0x2000e7fc
   1ab14:	00028c58 	.word	0x00028c58
   1ab18:	00028ce8 	.word	0x00028ce8
   1ab1c:	000282a4 	.word	0x000282a4
   1ab20:	00028540 	.word	0x00028540

0001ab24 <prepare>:
{
   1ab24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ab28:	b085      	sub	sp, #20
   1ab2a:	4604      	mov	r4, r0
   1ab2c:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1ab2e:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1ab32:	23ff      	movs	r3, #255	; 0xff
{
   1ab34:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1ab38:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1ab3c:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1ab40:	460d      	mov	r5, r1
   1ab42:	4616      	mov	r6, r2
	p = ull_prepare_dequeue_iter(&idx);
   1ab44:	f7f9 fd4c 	bl	145e0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ab48:	b918      	cbnz	r0, 1ab52 <prepare+0x2e>
   1ab4a:	e01e      	b.n	1ab8a <prepare+0x66>
		p = ull_prepare_dequeue_iter(&idx);
   1ab4c:	f7f9 fd48 	bl	145e0 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1ab50:	b1d8      	cbz	r0, 1ab8a <prepare+0x66>
   1ab52:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ab56:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1ab58:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1ab5c:	d1f6      	bne.n	1ab4c <prepare+0x28>
	if (event.curr.abort_cb || (p && is_resume)) {
   1ab5e:	4b2e      	ldr	r3, [pc, #184]	; (1ac18 <prepare+0xf4>)
   1ab60:	689a      	ldr	r2, [r3, #8]
   1ab62:	b9aa      	cbnz	r2, 1ab90 <prepare+0x6c>
   1ab64:	f1b9 0f00 	cmp.w	r9, #0
   1ab68:	d036      	beq.n	1abd8 <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1ab6a:	2201      	movs	r2, #1
   1ab6c:	9201      	str	r2, [sp, #4]
   1ab6e:	9700      	str	r7, [sp, #0]
   1ab70:	4633      	mov	r3, r6
   1ab72:	4629      	mov	r1, r5
   1ab74:	4620      	mov	r0, r4
   1ab76:	4642      	mov	r2, r8
   1ab78:	f7f9 fcee 	bl	14558 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1ab7c:	b9d8      	cbnz	r0, 1abb6 <prepare+0x92>
		return -EINPROGRESS;
   1ab7e:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1ab82:	4620      	mov	r0, r4
   1ab84:	b005      	add	sp, #20
   1ab86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1ab8a:	4b23      	ldr	r3, [pc, #140]	; (1ac18 <prepare+0xf4>)
   1ab8c:	689a      	ldr	r2, [r3, #8]
   1ab8e:	b31a      	cbz	r2, 1abd8 <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1ab90:	e9cd 7900 	strd	r7, r9, [sp]
   1ab94:	4633      	mov	r3, r6
   1ab96:	4629      	mov	r1, r5
   1ab98:	4620      	mov	r0, r4
   1ab9a:	4642      	mov	r2, r8
   1ab9c:	f7f9 fcdc 	bl	14558 <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1aba0:	b948      	cbnz	r0, 1abb6 <prepare+0x92>
		if (is_resume) {
   1aba2:	f1b9 0f00 	cmp.w	r9, #0
   1aba6:	d1ea      	bne.n	1ab7e <prepare+0x5a>
		preempt_ticker_start(prepare_param);
   1aba8:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1abac:	f8d8 0000 	ldr.w	r0, [r8]
   1abb0:	f7ff fedc 	bl	1a96c <preempt_ticker_start.isra.0>
   1abb4:	e7e3      	b.n	1ab7e <prepare+0x5a>
		LL_ASSERT(!err);
   1abb6:	4a19      	ldr	r2, [pc, #100]	; (1ac1c <prepare+0xf8>)
   1abb8:	4919      	ldr	r1, [pc, #100]	; (1ac20 <prepare+0xfc>)
   1abba:	481a      	ldr	r0, [pc, #104]	; (1ac24 <prepare+0x100>)
   1abbc:	f44f 7312 	mov.w	r3, #584	; 0x248
   1abc0:	f006 fefe 	bl	219c0 <printk>
   1abc4:	4040      	eors	r0, r0
   1abc6:	f380 8811 	msr	BASEPRI, r0
   1abca:	f04f 0003 	mov.w	r0, #3
   1abce:	df02      	svc	2
		if (is_resume) {
   1abd0:	f1b9 0f00 	cmp.w	r9, #0
   1abd4:	d1d3      	bne.n	1ab7e <prepare+0x5a>
   1abd6:	e7e7      	b.n	1aba8 <prepare+0x84>
	event.curr.param = prepare_param->param;
   1abd8:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1abdc:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1abde:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1abe2:	4640      	mov	r0, r8
   1abe4:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1abe6:	2200      	movs	r2, #0
   1abe8:	4b0f      	ldr	r3, [pc, #60]	; (1ac28 <prepare+0x104>)
   1abea:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1abec:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1abee:	4611      	mov	r1, r2
   1abf0:	4610      	mov	r0, r2
   1abf2:	f7f6 ffb1 	bl	11b58 <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1abf6:	2802      	cmp	r0, #2
   1abf8:	d9c3      	bls.n	1ab82 <prepare+0x5e>
   1abfa:	4a08      	ldr	r2, [pc, #32]	; (1ac1c <prepare+0xf8>)
   1abfc:	490b      	ldr	r1, [pc, #44]	; (1ac2c <prepare+0x108>)
   1abfe:	4809      	ldr	r0, [pc, #36]	; (1ac24 <prepare+0x100>)
   1ac00:	f240 2382 	movw	r3, #642	; 0x282
   1ac04:	f006 fedc 	bl	219c0 <printk>
   1ac08:	4040      	eors	r0, r0
   1ac0a:	f380 8811 	msr	BASEPRI, r0
   1ac0e:	f04f 0003 	mov.w	r0, #3
   1ac12:	df02      	svc	2
   1ac14:	e7b5      	b.n	1ab82 <prepare+0x5e>
   1ac16:	bf00      	nop
   1ac18:	2000e7fc 	.word	0x2000e7fc
   1ac1c:	00028c58 	.word	0x00028c58
   1ac20:	00028524 	.word	0x00028524
   1ac24:	000282a4 	.word	0x000282a4
   1ac28:	0001a8cd 	.word	0x0001a8cd
   1ac2c:	00028cc0 	.word	0x00028cc0

0001ac30 <lll_init>:
{
   1ac30:	b510      	push	{r4, lr}
   1ac32:	4816      	ldr	r0, [pc, #88]	; (1ac8c <lll_init+0x5c>)
   1ac34:	f004 fcce 	bl	1f5d4 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1ac38:	4b15      	ldr	r3, [pc, #84]	; (1ac90 <lll_init+0x60>)
   1ac3a:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1ac3c:	b310      	cbz	r0, 1ac84 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1ac3e:	4b15      	ldr	r3, [pc, #84]	; (1ac94 <lll_init+0x64>)
   1ac40:	2400      	movs	r4, #0
   1ac42:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1ac44:	f000 fa3c 	bl	1b0c0 <lll_clock_init>
	if (err < 0) {
   1ac48:	2800      	cmp	r0, #0
   1ac4a:	db1a      	blt.n	1ac82 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1ac4c:	4621      	mov	r1, r4
   1ac4e:	2001      	movs	r0, #1
   1ac50:	4622      	mov	r2, r4
   1ac52:	f7ec fcfb 	bl	764c <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1ac56:	4622      	mov	r2, r4
   1ac58:	200b      	movs	r0, #11
   1ac5a:	2101      	movs	r1, #1
   1ac5c:	f7ec fcf6 	bl	764c <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1ac60:	4622      	mov	r2, r4
   1ac62:	4621      	mov	r1, r4
   1ac64:	2018      	movs	r0, #24
   1ac66:	f7ec fcf1 	bl	764c <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1ac6a:	2001      	movs	r0, #1
   1ac6c:	f7ec fcbc 	bl	75e8 <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1ac70:	200b      	movs	r0, #11
   1ac72:	f7ec fcb9 	bl	75e8 <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1ac76:	2018      	movs	r0, #24
   1ac78:	f7ec fcb6 	bl	75e8 <arch_irq_enable>
	radio_setup();
   1ac7c:	f001 fd5e 	bl	1c73c <radio_setup>
	return 0;
   1ac80:	4620      	mov	r0, r4
}
   1ac82:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1ac84:	f06f 0012 	mvn.w	r0, #18
}
   1ac88:	bd10      	pop	{r4, pc}
   1ac8a:	bf00      	nop
   1ac8c:	00028cf4 	.word	0x00028cf4
   1ac90:	2000e7f8 	.word	0x2000e7f8
   1ac94:	2000e7fc 	.word	0x2000e7fc

0001ac98 <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1ac98:	4a05      	ldr	r2, [pc, #20]	; (1acb0 <lll_csrand_get+0x18>)
{
   1ac9a:	b410      	push	{r4}
   1ac9c:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1ac9e:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1aca0:	6884      	ldr	r4, [r0, #8]
   1aca2:	6824      	ldr	r4, [r4, #0]
   1aca4:	b28a      	uxth	r2, r1
   1aca6:	4619      	mov	r1, r3
   1aca8:	4623      	mov	r3, r4
}
   1acaa:	bc10      	pop	{r4}
   1acac:	4718      	bx	r3
   1acae:	bf00      	nop
   1acb0:	2000e7f8 	.word	0x2000e7f8

0001acb4 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1acb4:	4b08      	ldr	r3, [pc, #32]	; (1acd8 <lll_csrand_isr_get+0x24>)
{
   1acb6:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1acb8:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1acba:	68ab      	ldr	r3, [r5, #8]
   1acbc:	685c      	ldr	r4, [r3, #4]
   1acbe:	b13c      	cbz	r4, 1acd0 <lll_csrand_isr_get+0x1c>
   1acc0:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1acc2:	46a4      	mov	ip, r4
   1acc4:	4601      	mov	r1, r0
   1acc6:	b292      	uxth	r2, r2
   1acc8:	4628      	mov	r0, r5
   1acca:	2300      	movs	r3, #0
}
   1accc:	bc30      	pop	{r4, r5}
   1acce:	4760      	bx	ip
   1acd0:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1acd4:	bc30      	pop	{r4, r5}
   1acd6:	4770      	bx	lr
   1acd8:	2000e7f8 	.word	0x2000e7f8

0001acdc <lll_rand_isr_get>:
   1acdc:	4b08      	ldr	r3, [pc, #32]	; (1ad00 <lll_rand_isr_get+0x24>)
   1acde:	b430      	push	{r4, r5}
   1ace0:	681d      	ldr	r5, [r3, #0]
   1ace2:	68ab      	ldr	r3, [r5, #8]
   1ace4:	685c      	ldr	r4, [r3, #4]
   1ace6:	b13c      	cbz	r4, 1acf8 <lll_rand_isr_get+0x1c>
   1ace8:	460a      	mov	r2, r1
   1acea:	46a4      	mov	ip, r4
   1acec:	4601      	mov	r1, r0
   1acee:	b292      	uxth	r2, r2
   1acf0:	4628      	mov	r0, r5
   1acf2:	2300      	movs	r3, #0
   1acf4:	bc30      	pop	{r4, r5}
   1acf6:	4760      	bx	ip
   1acf8:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1acfc:	bc30      	pop	{r4, r5}
   1acfe:	4770      	bx	lr
   1ad00:	2000e7f8 	.word	0x2000e7f8

0001ad04 <lll_reset>:
}
   1ad04:	2000      	movs	r0, #0
   1ad06:	4770      	bx	lr

0001ad08 <lll_prepare>:
{
   1ad08:	b510      	push	{r4, lr}
   1ad0a:	b082      	sub	sp, #8
   1ad0c:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1ad0e:	9400      	str	r4, [sp, #0]
   1ad10:	2400      	movs	r4, #0
   1ad12:	9401      	str	r4, [sp, #4]
   1ad14:	f7ff ff06 	bl	1ab24 <prepare>
}
   1ad18:	b002      	add	sp, #8
   1ad1a:	bd10      	pop	{r4, pc}

0001ad1c <lll_resume>:
{
   1ad1c:	b510      	push	{r4, lr}
   1ad1e:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1ad20:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1ad22:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1ad26:	69c3      	ldr	r3, [r0, #28]
   1ad28:	6902      	ldr	r2, [r0, #16]
   1ad2a:	f004 0401 	and.w	r4, r4, #1
   1ad2e:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1ad32:	9401      	str	r4, [sp, #4]
   1ad34:	f7ff fef6 	bl	1ab24 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1ad38:	b108      	cbz	r0, 1ad3e <lll_resume+0x22>
   1ad3a:	3044      	adds	r0, #68	; 0x44
   1ad3c:	d101      	bne.n	1ad42 <lll_resume+0x26>
}
   1ad3e:	b002      	add	sp, #8
   1ad40:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1ad42:	4a07      	ldr	r2, [pc, #28]	; (1ad60 <lll_resume+0x44>)
   1ad44:	4907      	ldr	r1, [pc, #28]	; (1ad64 <lll_resume+0x48>)
   1ad46:	4808      	ldr	r0, [pc, #32]	; (1ad68 <lll_resume+0x4c>)
   1ad48:	23fe      	movs	r3, #254	; 0xfe
   1ad4a:	f006 fe39 	bl	219c0 <printk>
   1ad4e:	4040      	eors	r0, r0
   1ad50:	f380 8811 	msr	BASEPRI, r0
   1ad54:	f04f 0003 	mov.w	r0, #3
   1ad58:	df02      	svc	2
}
   1ad5a:	b002      	add	sp, #8
   1ad5c:	bd10      	pop	{r4, pc}
   1ad5e:	bf00      	nop
   1ad60:	00028c58 	.word	0x00028c58
   1ad64:	00028cf8 	.word	0x00028cf8
   1ad68:	000282a4 	.word	0x000282a4

0001ad6c <lll_disable>:
{
   1ad6c:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
   1ad6e:	4604      	mov	r4, r0
{
   1ad70:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
   1ad72:	2800      	cmp	r0, #0
   1ad74:	d033      	beq.n	1adde <lll_disable+0x72>
   1ad76:	4b26      	ldr	r3, [pc, #152]	; (1ae10 <lll_disable+0xa4>)
   1ad78:	681a      	ldr	r2, [r3, #0]
   1ad7a:	4282      	cmp	r2, r0
   1ad7c:	d029      	beq.n	1add2 <lll_disable+0x66>
		idx = UINT8_MAX;
   1ad7e:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1ad80:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1ad84:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1ad88:	f7f9 fc2a 	bl	145e0 <ull_prepare_dequeue_iter>
		while (next) {
   1ad8c:	b940      	cbnz	r0, 1ada0 <lll_disable+0x34>
   1ad8e:	e01c      	b.n	1adca <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   1ad90:	68c3      	ldr	r3, [r0, #12]
   1ad92:	42a3      	cmp	r3, r4
   1ad94:	d01b      	beq.n	1adce <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
   1ad96:	f10d 0007 	add.w	r0, sp, #7
   1ad9a:	f7f9 fc21 	bl	145e0 <ull_prepare_dequeue_iter>
		while (next) {
   1ad9e:	b1a0      	cbz	r0, 1adca <lll_disable+0x5e>
			if (!next->is_aborted &&
   1ada0:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ada4:	079b      	lsls	r3, r3, #30
   1ada6:	d4f6      	bmi.n	1ad96 <lll_disable+0x2a>
   1ada8:	2c00      	cmp	r4, #0
   1adaa:	d1f1      	bne.n	1ad90 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   1adac:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   1adae:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1adb2:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1adb4:	f043 0302 	orr.w	r3, r3, #2
   1adb8:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1adbc:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1adbe:	f10d 0007 	add.w	r0, sp, #7
   1adc2:	f7f9 fc0d 	bl	145e0 <ull_prepare_dequeue_iter>
		while (next) {
   1adc6:	2800      	cmp	r0, #0
   1adc8:	d1ea      	bne.n	1ada0 <lll_disable+0x34>
}
   1adca:	b002      	add	sp, #8
   1adcc:	bd10      	pop	{r4, pc}
   1adce:	4621      	mov	r1, r4
   1add0:	e7ed      	b.n	1adae <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
   1add2:	689b      	ldr	r3, [r3, #8]
   1add4:	b16b      	cbz	r3, 1adf2 <lll_disable+0x86>
   1add6:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1add8:	2000      	movs	r0, #0
   1adda:	4798      	blx	r3
   1addc:	e7cf      	b.n	1ad7e <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1adde:	4a0c      	ldr	r2, [pc, #48]	; (1ae10 <lll_disable+0xa4>)
   1ade0:	6893      	ldr	r3, [r2, #8]
   1ade2:	2b00      	cmp	r3, #0
   1ade4:	d0cb      	beq.n	1ad7e <lll_disable+0x12>
   1ade6:	6811      	ldr	r1, [r2, #0]
   1ade8:	2900      	cmp	r1, #0
   1adea:	d0c8      	beq.n	1ad7e <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1adec:	2000      	movs	r0, #0
   1adee:	4798      	blx	r3
   1adf0:	e7c5      	b.n	1ad7e <lll_disable+0x12>
			LL_ASSERT(!param);
   1adf2:	4a08      	ldr	r2, [pc, #32]	; (1ae14 <lll_disable+0xa8>)
   1adf4:	4908      	ldr	r1, [pc, #32]	; (1ae18 <lll_disable+0xac>)
   1adf6:	4809      	ldr	r0, [pc, #36]	; (1ae1c <lll_disable+0xb0>)
   1adf8:	f44f 7384 	mov.w	r3, #264	; 0x108
   1adfc:	f006 fde0 	bl	219c0 <printk>
   1ae00:	4040      	eors	r0, r0
   1ae02:	f380 8811 	msr	BASEPRI, r0
   1ae06:	f04f 0003 	mov.w	r0, #3
   1ae0a:	df02      	svc	2
   1ae0c:	e7b7      	b.n	1ad7e <lll_disable+0x12>
   1ae0e:	bf00      	nop
   1ae10:	2000e7fc 	.word	0x2000e7fc
   1ae14:	00028c58 	.word	0x00028c58
   1ae18:	00028d0c 	.word	0x00028d0c
   1ae1c:	000282a4 	.word	0x000282a4

0001ae20 <lll_prepare_done>:
}
   1ae20:	2000      	movs	r0, #0
   1ae22:	4770      	bx	lr

0001ae24 <lll_done>:
{
   1ae24:	b510      	push	{r4, lr}
   1ae26:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1ae28:	f7f9 fbcc 	bl	145c4 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1ae2c:	b13c      	cbz	r4, 1ae3e <lll_done+0x1a>
   1ae2e:	b320      	cbz	r0, 1ae7a <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1ae30:	6820      	ldr	r0, [r4, #0]
   1ae32:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1ae34:	f7f9 fc04 	bl	14640 <ull_event_done>
	LL_ASSERT(evdone);
   1ae38:	b180      	cbz	r0, 1ae5c <lll_done+0x38>
}
   1ae3a:	2000      	movs	r0, #0
   1ae3c:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1ae3e:	4c1d      	ldr	r4, [pc, #116]	; (1aeb4 <lll_done+0x90>)
   1ae40:	68a3      	ldr	r3, [r4, #8]
   1ae42:	b343      	cbz	r3, 1ae96 <lll_done+0x72>
		param = event.curr.param;
   1ae44:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1ae46:	2300      	movs	r3, #0
   1ae48:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1ae4a:	6023      	str	r3, [r4, #0]
		if (param) {
   1ae4c:	2800      	cmp	r0, #0
   1ae4e:	d0f1      	beq.n	1ae34 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1ae50:	6800      	ldr	r0, [r0, #0]
   1ae52:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1ae54:	f7f9 fbf4 	bl	14640 <ull_event_done>
	LL_ASSERT(evdone);
   1ae58:	2800      	cmp	r0, #0
   1ae5a:	d1ee      	bne.n	1ae3a <lll_done+0x16>
   1ae5c:	4a16      	ldr	r2, [pc, #88]	; (1aeb8 <lll_done+0x94>)
   1ae5e:	4917      	ldr	r1, [pc, #92]	; (1aebc <lll_done+0x98>)
   1ae60:	4817      	ldr	r0, [pc, #92]	; (1aec0 <lll_done+0x9c>)
   1ae62:	f240 1359 	movw	r3, #345	; 0x159
   1ae66:	f006 fdab 	bl	219c0 <printk>
   1ae6a:	4040      	eors	r0, r0
   1ae6c:	f380 8811 	msr	BASEPRI, r0
   1ae70:	f04f 0003 	mov.w	r0, #3
   1ae74:	df02      	svc	2
}
   1ae76:	2000      	movs	r0, #0
   1ae78:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1ae7a:	4a0f      	ldr	r2, [pc, #60]	; (1aeb8 <lll_done+0x94>)
   1ae7c:	4911      	ldr	r1, [pc, #68]	; (1aec4 <lll_done+0xa0>)
   1ae7e:	4810      	ldr	r0, [pc, #64]	; (1aec0 <lll_done+0x9c>)
   1ae80:	f240 133b 	movw	r3, #315	; 0x13b
   1ae84:	f006 fd9c 	bl	219c0 <printk>
   1ae88:	4040      	eors	r0, r0
   1ae8a:	f380 8811 	msr	BASEPRI, r0
   1ae8e:	f04f 0003 	mov.w	r0, #3
   1ae92:	df02      	svc	2
   1ae94:	e7cc      	b.n	1ae30 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1ae96:	4a08      	ldr	r2, [pc, #32]	; (1aeb8 <lll_done+0x94>)
   1ae98:	490b      	ldr	r1, [pc, #44]	; (1aec8 <lll_done+0xa4>)
   1ae9a:	4809      	ldr	r0, [pc, #36]	; (1aec0 <lll_done+0x9c>)
   1ae9c:	f240 1341 	movw	r3, #321	; 0x141
   1aea0:	f006 fd8e 	bl	219c0 <printk>
   1aea4:	4040      	eors	r0, r0
   1aea6:	f380 8811 	msr	BASEPRI, r0
   1aeaa:	f04f 0003 	mov.w	r0, #3
   1aeae:	df02      	svc	2
   1aeb0:	e7c8      	b.n	1ae44 <lll_done+0x20>
   1aeb2:	bf00      	nop
   1aeb4:	2000e7fc 	.word	0x2000e7fc
   1aeb8:	00028c58 	.word	0x00028c58
   1aebc:	00028d38 	.word	0x00028d38
   1aec0:	000282a4 	.word	0x000282a4
   1aec4:	00028d14 	.word	0x00028d14
   1aec8:	00028d24 	.word	0x00028d24

0001aecc <lll_is_abort_cb>:
}
   1aecc:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1aed0:	4770      	bx	lr
   1aed2:	bf00      	nop

0001aed4 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1aed4:	6803      	ldr	r3, [r0, #0]
   1aed6:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
   1aed8:	bfb4      	ite	lt
   1aeda:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
   1aede:	6840      	ldrge	r0, [r0, #4]
   1aee0:	4298      	cmp	r0, r3
   1aee2:	bf38      	it	cc
   1aee4:	4618      	movcc	r0, r3
}
   1aee6:	4770      	bx	lr

0001aee8 <lll_preempt_calc>:
{
   1aee8:	b510      	push	{r4, lr}
   1aeea:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1aeec:	f7f6 fe76 	bl	11bdc <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1aef0:	4621      	mov	r1, r4
   1aef2:	f7f6 fe75 	bl	11be0 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1aef6:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1aef8:	0203      	lsls	r3, r0, #8
   1aefa:	d404      	bmi.n	1af06 <lll_preempt_calc+0x1e>
   1aefc:	2809      	cmp	r0, #9
   1aefe:	bf94      	ite	ls
   1af00:	2000      	movls	r0, #0
   1af02:	2001      	movhi	r0, #1
}
   1af04:	bd10      	pop	{r4, pc}
	return 0;
   1af06:	2000      	movs	r0, #0
}
   1af08:	bd10      	pop	{r4, pc}
   1af0a:	bf00      	nop

0001af0c <lll_chan_set>:
	switch (chan) {
   1af0c:	2826      	cmp	r0, #38	; 0x26
{
   1af0e:	b510      	push	{r4, lr}
   1af10:	4604      	mov	r4, r0
	switch (chan) {
   1af12:	d01c      	beq.n	1af4e <lll_chan_set+0x42>
   1af14:	2827      	cmp	r0, #39	; 0x27
   1af16:	d012      	beq.n	1af3e <lll_chan_set+0x32>
   1af18:	2825      	cmp	r0, #37	; 0x25
   1af1a:	d008      	beq.n	1af2e <lll_chan_set+0x22>
		if (chan < 11) {
   1af1c:	280a      	cmp	r0, #10
   1af1e:	d91e      	bls.n	1af5e <lll_chan_set+0x52>
		} else if (chan < 40) {
   1af20:	2827      	cmp	r0, #39	; 0x27
   1af22:	d821      	bhi.n	1af68 <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1af24:	3003      	adds	r0, #3
   1af26:	0040      	lsls	r0, r0, #1
   1af28:	f001 fc64 	bl	1c7f4 <radio_freq_chan_set>
   1af2c:	e002      	b.n	1af34 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1af2e:	2002      	movs	r0, #2
   1af30:	f001 fc60 	bl	1c7f4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1af34:	4620      	mov	r0, r4
}
   1af36:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1af3a:	f001 bc61 	b.w	1c800 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1af3e:	2050      	movs	r0, #80	; 0x50
   1af40:	f001 fc58 	bl	1c7f4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1af44:	4620      	mov	r0, r4
}
   1af46:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1af4a:	f001 bc59 	b.w	1c800 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1af4e:	201a      	movs	r0, #26
   1af50:	f001 fc50 	bl	1c7f4 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1af54:	4620      	mov	r0, r4
}
   1af56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1af5a:	f001 bc51 	b.w	1c800 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1af5e:	3002      	adds	r0, #2
   1af60:	0040      	lsls	r0, r0, #1
   1af62:	f001 fc47 	bl	1c7f4 <radio_freq_chan_set>
   1af66:	e7e5      	b.n	1af34 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1af68:	4a06      	ldr	r2, [pc, #24]	; (1af84 <lll_chan_set+0x78>)
   1af6a:	4907      	ldr	r1, [pc, #28]	; (1af88 <lll_chan_set+0x7c>)
   1af6c:	4807      	ldr	r0, [pc, #28]	; (1af8c <lll_chan_set+0x80>)
   1af6e:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1af72:	f006 fd25 	bl	219c0 <printk>
   1af76:	4040      	eors	r0, r0
   1af78:	f380 8811 	msr	BASEPRI, r0
   1af7c:	f04f 0003 	mov.w	r0, #3
   1af80:	df02      	svc	2
   1af82:	e7d7      	b.n	1af34 <lll_chan_set+0x28>
   1af84:	00028c58 	.word	0x00028c58
   1af88:	0002833c 	.word	0x0002833c
   1af8c:	000282a4 	.word	0x000282a4

0001af90 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1af90:	f001 bc9c 	b.w	1c8cc <radio_rx_ready_delay_get>

0001af94 <lll_isr_tx_status_reset>:
{
   1af94:	b508      	push	{r3, lr}
	radio_status_reset();
   1af96:	f001 fcbb 	bl	1c910 <radio_status_reset>
}
   1af9a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1af9e:	f001 be09 	b.w	1cbb4 <radio_tmr_status_reset>
   1afa2:	bf00      	nop

0001afa4 <lll_isr_rx_status_reset>:
{
   1afa4:	b508      	push	{r3, lr}
	radio_status_reset();
   1afa6:	f001 fcb3 	bl	1c910 <radio_status_reset>
	radio_tmr_status_reset();
   1afaa:	f001 fe03 	bl	1cbb4 <radio_tmr_status_reset>
}
   1afae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1afb2:	f001 bdab 	b.w	1cb0c <radio_rssi_status_reset>
   1afb6:	bf00      	nop

0001afb8 <lll_isr_status_reset>:
{
   1afb8:	b508      	push	{r3, lr}
	radio_status_reset();
   1afba:	f001 fca9 	bl	1c910 <radio_status_reset>
	radio_tmr_status_reset();
   1afbe:	f001 fdf9 	bl	1cbb4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1afc2:	f001 fddf 	bl	1cb84 <radio_filter_status_reset>
	radio_ar_status_reset();
   1afc6:	f001 ffbf 	bl	1cf48 <radio_ar_status_reset>
}
   1afca:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1afce:	f001 bd9d 	b.w	1cb0c <radio_rssi_status_reset>
   1afd2:	bf00      	nop

0001afd4 <lll_isr_cleanup>:
{
   1afd4:	b508      	push	{r3, lr}
   1afd6:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1afd8:	4815      	ldr	r0, [pc, #84]	; (1b030 <lll_isr_cleanup+0x5c>)
   1afda:	f001 fb8f 	bl	1c6fc <radio_isr_set>
	if (!radio_is_idle()) {
   1afde:	f001 fcb7 	bl	1c950 <radio_is_idle>
   1afe2:	b150      	cbz	r0, 1affa <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1afe4:	f001 fe8a 	bl	1ccfc <radio_tmr_stop>
	err = lll_hfclock_off();
   1afe8:	f000 f8ae 	bl	1b148 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1afec:	2800      	cmp	r0, #0
   1afee:	db0c      	blt.n	1b00a <lll_isr_cleanup+0x36>
}
   1aff0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1aff4:	2000      	movs	r0, #0
   1aff6:	f7ff bf15 	b.w	1ae24 <lll_done>
		radio_disable();
   1affa:	f001 fc75 	bl	1c8e8 <radio_disable>
	radio_tmr_stop();
   1affe:	f001 fe7d 	bl	1ccfc <radio_tmr_stop>
	err = lll_hfclock_off();
   1b002:	f000 f8a1 	bl	1b148 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b006:	2800      	cmp	r0, #0
   1b008:	daf2      	bge.n	1aff0 <lll_isr_cleanup+0x1c>
   1b00a:	4a0a      	ldr	r2, [pc, #40]	; (1b034 <lll_isr_cleanup+0x60>)
   1b00c:	490a      	ldr	r1, [pc, #40]	; (1b038 <lll_isr_cleanup+0x64>)
   1b00e:	480b      	ldr	r0, [pc, #44]	; (1b03c <lll_isr_cleanup+0x68>)
   1b010:	f240 231f 	movw	r3, #543	; 0x21f
   1b014:	f006 fcd4 	bl	219c0 <printk>
   1b018:	4040      	eors	r0, r0
   1b01a:	f380 8811 	msr	BASEPRI, r0
   1b01e:	f04f 0003 	mov.w	r0, #3
   1b022:	df02      	svc	2
	lll_done(NULL);
   1b024:	2000      	movs	r0, #0
}
   1b026:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b02a:	f7ff befb 	b.w	1ae24 <lll_done>
   1b02e:	bf00      	nop
   1b030:	0001a8c9 	.word	0x0001a8c9
   1b034:	00028c58 	.word	0x00028c58
   1b038:	00028d40 	.word	0x00028d40
   1b03c:	000282a4 	.word	0x000282a4

0001b040 <lll_isr_abort>:
{
   1b040:	b510      	push	{r4, lr}
   1b042:	4604      	mov	r4, r0
	radio_status_reset();
   1b044:	f001 fc64 	bl	1c910 <radio_status_reset>
	radio_tmr_status_reset();
   1b048:	f001 fdb4 	bl	1cbb4 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1b04c:	f001 fd9a 	bl	1cb84 <radio_filter_status_reset>
	radio_ar_status_reset();
   1b050:	f001 ff7a 	bl	1cf48 <radio_ar_status_reset>
	radio_rssi_status_reset();
   1b054:	f001 fd5a 	bl	1cb0c <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1b058:	4620      	mov	r0, r4
}
   1b05a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b05e:	f7ff bfb9 	b.w	1afd4 <lll_isr_cleanup>
   1b062:	bf00      	nop

0001b064 <clock_ready>:
	z_impl_k_sem_give(sem);
   1b064:	f101 0010 	add.w	r0, r1, #16
   1b068:	f005 b94a 	b.w	20300 <z_impl_k_sem_give>

0001b06c <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1b06c:	b570      	push	{r4, r5, r6, lr}
   1b06e:	4605      	mov	r5, r0
   1b070:	b08a      	sub	sp, #40	; 0x28
   1b072:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b074:	2201      	movs	r2, #1
   1b076:	2100      	movs	r1, #0
   1b078:	a804      	add	r0, sp, #16
   1b07a:	f00b ff70 	bl	26f5e <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1b07e:	4b0f      	ldr	r3, [pc, #60]	; (1b0bc <blocking_on+0x50>)
   1b080:	9301      	str	r3, [sp, #4]
   1b082:	2600      	movs	r6, #0
   1b084:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1b086:	4669      	mov	r1, sp
   1b088:	4628      	mov	r0, r5
   1b08a:	9603      	str	r6, [sp, #12]
   1b08c:	9302      	str	r3, [sp, #8]
   1b08e:	f006 fd13 	bl	21ab8 <onoff_request>
	if (err < 0) {
   1b092:	2800      	cmp	r0, #0
   1b094:	db10      	blt.n	1b0b8 <blocking_on+0x4c>
   1b096:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1b09a:	4631      	mov	r1, r6
   1b09c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b0a0:	fbe4 0103 	umlal	r0, r1, r4, r3
   1b0a4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b0a8:	2300      	movs	r3, #0
   1b0aa:	f7e5 feed 	bl	e88 <__aeabi_uldivmod>
   1b0ae:	4602      	mov	r2, r0
   1b0b0:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b0b2:	a804      	add	r0, sp, #16
   1b0b4:	f005 f94a 	bl	2034c <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1b0b8:	b00a      	add	sp, #40	; 0x28
   1b0ba:	bd70      	pop	{r4, r5, r6, pc}
   1b0bc:	0001b065 	.word	0x0001b065

0001b0c0 <lll_clock_init>:

int lll_clock_init(void)
{
   1b0c0:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b0c2:	2001      	movs	r0, #1
   1b0c4:	f7eb fece 	bl	6e64 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1b0c8:	4904      	ldr	r1, [pc, #16]	; (1b0dc <lll_clock_init+0x1c>)
   1b0ca:	2300      	movs	r3, #0
   1b0cc:	2401      	movs	r4, #1
   1b0ce:	608c      	str	r4, [r1, #8]
   1b0d0:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1b0d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b0d6:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1b0d8:	f006 bcee 	b.w	21ab8 <onoff_request>
   1b0dc:	2000e814 	.word	0x2000e814

0001b0e0 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1b0e0:	4b0c      	ldr	r3, [pc, #48]	; (1b114 <lll_clock_wait+0x34>)
   1b0e2:	781a      	ldrb	r2, [r3, #0]
   1b0e4:	b10a      	cbz	r2, 1b0ea <lll_clock_wait+0xa>
		return 0;
   1b0e6:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1b0e8:	4770      	bx	lr
{
   1b0ea:	b510      	push	{r4, lr}
	done = true;
   1b0ec:	2001      	movs	r0, #1
   1b0ee:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b0f0:	f7eb feb8 	bl	6e64 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b0f4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b0f8:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b0fa:	f7ff ffb7 	bl	1b06c <blocking_on>
	if (err) {
   1b0fe:	b938      	cbnz	r0, 1b110 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1b100:	4620      	mov	r0, r4
   1b102:	f006 fd22 	bl	21b4a <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1b106:	2802      	cmp	r0, #2
		return 0;
   1b108:	bf0c      	ite	eq
   1b10a:	2000      	moveq	r0, #0
		return -EIO;
   1b10c:	f06f 0004 	mvnne.w	r0, #4
}
   1b110:	bd10      	pop	{r4, pc}
   1b112:	bf00      	nop
   1b114:	2000f313 	.word	0x2000f313

0001b118 <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1b118:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1b11a:	4b0a      	ldr	r3, [pc, #40]	; (1b144 <lll_hfclock_on+0x2c>)
   1b11c:	f3bf 8f5b 	dmb	ish
   1b120:	e853 2f00 	ldrex	r2, [r3]
   1b124:	1c51      	adds	r1, r2, #1
   1b126:	e843 1000 	strex	r0, r1, [r3]
   1b12a:	2800      	cmp	r0, #0
   1b12c:	d1f8      	bne.n	1b120 <lll_hfclock_on+0x8>
   1b12e:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1b132:	2a00      	cmp	r2, #0
   1b134:	dd01      	ble.n	1b13a <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1b136:	2000      	movs	r0, #0
   1b138:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1b13a:	f7eb fe9b 	bl	6e74 <z_nrf_clock_bt_ctlr_hf_request>
}
   1b13e:	2000      	movs	r0, #0
   1b140:	bd08      	pop	{r3, pc}
   1b142:	bf00      	nop
   1b144:	2000e810 	.word	0x2000e810

0001b148 <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1b148:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1b14a:	4b0d      	ldr	r3, [pc, #52]	; (1b180 <lll_hfclock_off+0x38>)
   1b14c:	681a      	ldr	r2, [r3, #0]
   1b14e:	2a00      	cmp	r2, #0
   1b150:	dd12      	ble.n	1b178 <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b152:	f3bf 8f5b 	dmb	ish
   1b156:	e853 2f00 	ldrex	r2, [r3]
   1b15a:	1e51      	subs	r1, r2, #1
   1b15c:	e843 1000 	strex	r0, r1, [r3]
   1b160:	2800      	cmp	r0, #0
   1b162:	d1f8      	bne.n	1b156 <lll_hfclock_off+0xe>
   1b164:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1b168:	2a01      	cmp	r2, #1
   1b16a:	dd01      	ble.n	1b170 <lll_hfclock_off+0x28>
		return 0;
   1b16c:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1b16e:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1b170:	f7eb fe96 	bl	6ea0 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1b174:	2000      	movs	r0, #0
}
   1b176:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1b178:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1b17c:	bd08      	pop	{r3, pc}
   1b17e:	bf00      	nop
   1b180:	2000e810 	.word	0x2000e810

0001b184 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1b184:	2014      	movs	r0, #20
   1b186:	4770      	bx	lr

0001b188 <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1b188:	4b01      	ldr	r3, [pc, #4]	; (1b190 <lll_clock_ppm_get+0x8>)
}
   1b18a:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1b18e:	4770      	bx	lr
   1b190:	00028d6c 	.word	0x00028d6c

0001b194 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1b194:	b510      	push	{r4, lr}
   1b196:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1b198:	f7ff ff0e 	bl	1afb8 <lll_isr_status_reset>

	radio_filter_disable();
   1b19c:	f001 fce8 	bl	1cb70 <radio_filter_disable>

	lll_isr_cleanup(param);
   1b1a0:	4620      	mov	r0, r4
}
   1b1a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b1a6:	f7ff bf15 	b.w	1afd4 <lll_isr_cleanup>
   1b1aa:	bf00      	nop

0001b1ac <isr_tx>:
{
   1b1ac:	b530      	push	{r4, r5, lr}
   1b1ae:	b083      	sub	sp, #12
   1b1b0:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b1b2:	f7ff feef 	bl	1af94 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b1b6:	2096      	movs	r0, #150	; 0x96
   1b1b8:	f001 fd0c 	bl	1cbd4 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1b1bc:	2300      	movs	r3, #0
   1b1be:	461a      	mov	r2, r3
   1b1c0:	4619      	mov	r1, r3
   1b1c2:	4618      	mov	r0, r3
   1b1c4:	f001 fc34 	bl	1ca30 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1b1c8:	f001 fbe6 	bl	1c998 <radio_pkt_scratch_get>
   1b1cc:	f001 fb70 	bl	1c8b0 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b1d0:	f001 fbaa 	bl	1c928 <radio_is_ready>
   1b1d4:	b9e0      	cbnz	r0, 1b210 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   1b1d6:	481e      	ldr	r0, [pc, #120]	; (1b250 <isr_tx+0xa4>)
   1b1d8:	4621      	mov	r1, r4
   1b1da:	f001 fa8f 	bl	1c6fc <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b1de:	f7ff fb41 	bl	1a864 <ull_filter_lll_rl_enabled>
   1b1e2:	bb50      	cbnz	r0, 1b23a <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b1e4:	f001 fdde 	bl	1cda4 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b1e8:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b1ea:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b1ec:	4608      	mov	r0, r1
   1b1ee:	f001 fb6f 	bl	1c8d0 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b1f2:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b1f4:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b1f6:	4608      	mov	r0, r1
   1b1f8:	f001 fb66 	bl	1c8c8 <radio_tx_chain_delay_get>
   1b1fc:	442c      	add	r4, r5
   1b1fe:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b200:	1a20      	subs	r0, r4, r0
   1b202:	f001 fd87 	bl	1cd14 <radio_tmr_hcto_configure>
}
   1b206:	b003      	add	sp, #12
   1b208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   1b20c:	f001 bdbc 	b.w	1cd88 <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   1b210:	4a10      	ldr	r2, [pc, #64]	; (1b254 <isr_tx+0xa8>)
   1b212:	4911      	ldr	r1, [pc, #68]	; (1b258 <isr_tx+0xac>)
   1b214:	4811      	ldr	r0, [pc, #68]	; (1b25c <isr_tx+0xb0>)
   1b216:	f240 238e 	movw	r3, #654	; 0x28e
   1b21a:	f006 fbd1 	bl	219c0 <printk>
   1b21e:	4040      	eors	r0, r0
   1b220:	f380 8811 	msr	BASEPRI, r0
   1b224:	f04f 0003 	mov.w	r0, #3
   1b228:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1b22a:	4809      	ldr	r0, [pc, #36]	; (1b250 <isr_tx+0xa4>)
   1b22c:	4621      	mov	r1, r4
   1b22e:	f001 fa65 	bl	1c6fc <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b232:	f7ff fb17 	bl	1a864 <ull_filter_lll_rl_enabled>
   1b236:	2800      	cmp	r0, #0
   1b238:	d0d4      	beq.n	1b1e4 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b23a:	f10d 0007 	add.w	r0, sp, #7
   1b23e:	f7ff fa3b 	bl	1a6b8 <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1b242:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b244:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1b246:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b24a:	f001 fe43 	bl	1ced4 <radio_ar_configure>
   1b24e:	e7c9      	b.n	1b1e4 <isr_tx+0x38>
   1b250:	0001b9b1 	.word	0x0001b9b1
   1b254:	00028d7c 	.word	0x00028d7c
   1b258:	00028dc8 	.word	0x00028dc8
   1b25c:	000282a4 	.word	0x000282a4

0001b260 <is_abort_cb>:
	if (next != curr) {
   1b260:	4282      	cmp	r2, r0
{
   1b262:	b508      	push	{r3, lr}
	if (next != curr) {
   1b264:	d011      	beq.n	1b28a <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1b266:	7b12      	ldrb	r2, [r2, #12]
   1b268:	07d2      	lsls	r2, r2, #31
   1b26a:	d402      	bmi.n	1b272 <is_abort_cb+0x12>
			return -ECANCELED;
   1b26c:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1b270:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1b272:	4914      	ldr	r1, [pc, #80]	; (1b2c4 <is_abort_cb+0x64>)
   1b274:	6019      	str	r1, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1b276:	9b02      	ldr	r3, [sp, #8]
   1b278:	2200      	movs	r2, #0
   1b27a:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1b27c:	f7ff ff4c 	bl	1b118 <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1b280:	2800      	cmp	r0, #0
   1b282:	db0f      	blt.n	1b2a4 <is_abort_cb+0x44>
   1b284:	f06f 000a 	mvn.w	r0, #10
}
   1b288:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b28a:	7c13      	ldrb	r3, [r2, #16]
   1b28c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b290:	6953      	ldr	r3, [r2, #20]
   1b292:	781b      	ldrb	r3, [r3, #0]
   1b294:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1b298:	2b01      	cmp	r3, #1
   1b29a:	bf14      	ite	ne
   1b29c:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1b2a0:	2000      	moveq	r0, #0
}
   1b2a2:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1b2a4:	4a08      	ldr	r2, [pc, #32]	; (1b2c8 <is_abort_cb+0x68>)
   1b2a6:	4909      	ldr	r1, [pc, #36]	; (1b2cc <is_abort_cb+0x6c>)
   1b2a8:	4809      	ldr	r0, [pc, #36]	; (1b2d0 <is_abort_cb+0x70>)
   1b2aa:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1b2ae:	f006 fb87 	bl	219c0 <printk>
   1b2b2:	4040      	eors	r0, r0
   1b2b4:	f380 8811 	msr	BASEPRI, r0
   1b2b8:	f04f 0003 	mov.w	r0, #3
   1b2bc:	df02      	svc	2
   1b2be:	f06f 000a 	mvn.w	r0, #10
}
   1b2c2:	bd08      	pop	{r3, pc}
   1b2c4:	0001b7cd 	.word	0x0001b7cd
   1b2c8:	00028d7c 	.word	0x00028d7c
   1b2cc:	00028d40 	.word	0x00028d40
   1b2d0:	000282a4 	.word	0x000282a4

0001b2d4 <abort_cb>:
{
   1b2d4:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b2d6:	b1d8      	cbz	r0, 1b310 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1b2d8:	460c      	mov	r4, r1
   1b2da:	f7ff ff35 	bl	1b148 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b2de:	2800      	cmp	r0, #0
   1b2e0:	db04      	blt.n	1b2ec <abort_cb+0x18>
	lll_done(param);
   1b2e2:	4620      	mov	r0, r4
}
   1b2e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b2e8:	f7ff bd9c 	b.w	1ae24 <lll_done>
	LL_ASSERT(err >= 0);
   1b2ec:	4a0c      	ldr	r2, [pc, #48]	; (1b320 <abort_cb+0x4c>)
   1b2ee:	490d      	ldr	r1, [pc, #52]	; (1b324 <abort_cb+0x50>)
   1b2f0:	480d      	ldr	r0, [pc, #52]	; (1b328 <abort_cb+0x54>)
   1b2f2:	f240 2372 	movw	r3, #626	; 0x272
   1b2f6:	f006 fb63 	bl	219c0 <printk>
   1b2fa:	4040      	eors	r0, r0
   1b2fc:	f380 8811 	msr	BASEPRI, r0
   1b300:	f04f 0003 	mov.w	r0, #3
   1b304:	df02      	svc	2
	lll_done(param);
   1b306:	4620      	mov	r0, r4
}
   1b308:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b30c:	f7ff bd8a 	b.w	1ae24 <lll_done>
		radio_isr_set(isr_abort, param);
   1b310:	4806      	ldr	r0, [pc, #24]	; (1b32c <abort_cb+0x58>)
   1b312:	f001 f9f3 	bl	1c6fc <radio_isr_set>
}
   1b316:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b31a:	f001 bae5 	b.w	1c8e8 <radio_disable>
   1b31e:	bf00      	nop
   1b320:	00028d7c 	.word	0x00028d7c
   1b324:	00028d40 	.word	0x00028d40
   1b328:	000282a4 	.word	0x000282a4
   1b32c:	0001b195 	.word	0x0001b195

0001b330 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b330:	4b08      	ldr	r3, [pc, #32]	; (1b354 <lll_adv_init+0x24>)
{
   1b332:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b334:	1d18      	adds	r0, r3, #4
   1b336:	2205      	movs	r2, #5
   1b338:	2128      	movs	r1, #40	; 0x28
   1b33a:	f7f5 f90b 	bl	10554 <mem_init>
	MFIFO_INIT(pdu_free);
   1b33e:	4b06      	ldr	r3, [pc, #24]	; (1b358 <lll_adv_init+0x28>)
   1b340:	2400      	movs	r4, #0
   1b342:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b344:	2203      	movs	r2, #3
   1b346:	4621      	mov	r1, r4
   1b348:	4804      	ldr	r0, [pc, #16]	; (1b35c <lll_adv_init+0x2c>)
   1b34a:	f00b fe08 	bl	26f5e <z_impl_k_sem_init>
}
   1b34e:	4620      	mov	r0, r4
   1b350:	bd10      	pop	{r4, pc}
   1b352:	bf00      	nop
   1b354:	2000e824 	.word	0x2000e824
   1b358:	20000634 	.word	0x20000634
   1b35c:	2000e8f0 	.word	0x2000e8f0

0001b360 <lll_adv_reset>:
   1b360:	4b08      	ldr	r3, [pc, #32]	; (1b384 <lll_adv_reset+0x24>)
   1b362:	b510      	push	{r4, lr}
   1b364:	1d18      	adds	r0, r3, #4
   1b366:	2205      	movs	r2, #5
   1b368:	2128      	movs	r1, #40	; 0x28
   1b36a:	f7f5 f8f3 	bl	10554 <mem_init>
   1b36e:	4b06      	ldr	r3, [pc, #24]	; (1b388 <lll_adv_reset+0x28>)
   1b370:	2400      	movs	r4, #0
   1b372:	805c      	strh	r4, [r3, #2]
   1b374:	2203      	movs	r2, #3
   1b376:	4621      	mov	r1, r4
   1b378:	4804      	ldr	r0, [pc, #16]	; (1b38c <lll_adv_reset+0x2c>)
   1b37a:	f00b fdf0 	bl	26f5e <z_impl_k_sem_init>
   1b37e:	4620      	mov	r0, r4
   1b380:	bd10      	pop	{r4, pc}
   1b382:	bf00      	nop
   1b384:	2000e824 	.word	0x2000e824
   1b388:	20000634 	.word	0x20000634
   1b38c:	2000e8f0 	.word	0x2000e8f0

0001b390 <lll_adv_data_init>:
{
   1b390:	b510      	push	{r4, lr}
   1b392:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1b394:	4805      	ldr	r0, [pc, #20]	; (1b3ac <lll_adv_data_init+0x1c>)
   1b396:	f7f5 f90d 	bl	105b4 <mem_acquire>
	if (!p) {
   1b39a:	b120      	cbz	r0, 1b3a6 <lll_adv_data_init+0x16>
   1b39c:	4603      	mov	r3, r0
	p->len = 0U;
   1b39e:	2000      	movs	r0, #0
   1b3a0:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1b3a2:	6063      	str	r3, [r4, #4]
}
   1b3a4:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1b3a6:	f06f 000b 	mvn.w	r0, #11
}
   1b3aa:	bd10      	pop	{r4, pc}
   1b3ac:	2000e824 	.word	0x2000e824

0001b3b0 <lll_adv_data_reset>:
{
   1b3b0:	4603      	mov	r3, r0
	pdu->first = 0U;
   1b3b2:	2000      	movs	r0, #0
   1b3b4:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1b3b6:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1b3b8:	6098      	str	r0, [r3, #8]
}
   1b3ba:	4770      	bx	lr

0001b3bc <lll_adv_pdu_alloc>:
{
   1b3bc:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1b3be:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1b3c0:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1b3c2:	429a      	cmp	r2, r3
   1b3c4:	d004      	beq.n	1b3d0 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   1b3c6:	b2d4      	uxtb	r4, r2
   1b3c8:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1b3ca:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1b3cc:	4294      	cmp	r4, r2
   1b3ce:	d003      	beq.n	1b3d8 <lll_adv_pdu_alloc+0x1c>
		last++;
   1b3d0:	3301      	adds	r3, #1
   1b3d2:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1b3d4:	2b02      	cmp	r3, #2
   1b3d6:	d007      	beq.n	1b3e8 <lll_adv_pdu_alloc+0x2c>
	p = (void *)pdu->pdu[last];
   1b3d8:	461c      	mov	r4, r3
   1b3da:	eb00 0484 	add.w	r4, r0, r4, lsl #2
	*idx = last;
   1b3de:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1b3e0:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1b3e2:	b14d      	cbz	r5, 1b3f8 <lll_adv_pdu_alloc+0x3c>
}
   1b3e4:	4628      	mov	r0, r5
   1b3e6:	bd70      	pop	{r4, r5, r6, pc}
{
   1b3e8:	2400      	movs	r4, #0
			last = 0U;
   1b3ea:	4623      	mov	r3, r4
	*idx = last;
   1b3ec:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1b3f0:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1b3f2:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1b3f4:	2d00      	cmp	r5, #0
   1b3f6:	d1f5      	bne.n	1b3e4 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1b3f8:	4e34      	ldr	r6, [pc, #208]	; (1b4cc <lll_adv_pdu_alloc+0x110>)
   1b3fa:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   1b3fc:	78f1      	ldrb	r1, [r6, #3]
   1b3fe:	7833      	ldrb	r3, [r6, #0]
   1b400:	4291      	cmp	r1, r2
   1b402:	d003      	beq.n	1b40c <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   1b404:	fb02 6303 	mla	r3, r2, r3, r6
   1b408:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1b40a:	b93d      	cbnz	r5, 1b41c <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   1b40c:	4830      	ldr	r0, [pc, #192]	; (1b4d0 <lll_adv_pdu_alloc+0x114>)
   1b40e:	f7f5 f8d1 	bl	105b4 <mem_acquire>
	if (p) {
   1b412:	4605      	mov	r5, r0
   1b414:	b1a8      	cbz	r0, 1b442 <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   1b416:	6065      	str	r5, [r4, #4]
}
   1b418:	4628      	mov	r0, r5
   1b41a:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1b41c:	482d      	ldr	r0, [pc, #180]	; (1b4d4 <lll_adv_pdu_alloc+0x118>)
   1b41e:	2200      	movs	r2, #0
   1b420:	2300      	movs	r3, #0
   1b422:	f004 ff93 	bl	2034c <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1b426:	2800      	cmp	r0, #0
   1b428:	d134      	bne.n	1b494 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   1b42a:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1b42c:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   1b42e:	7871      	ldrb	r1, [r6, #1]
   1b430:	429a      	cmp	r2, r3
   1b432:	d0f0      	beq.n	1b416 <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   1b434:	3301      	adds	r3, #1
   1b436:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b438:	4299      	cmp	r1, r3
   1b43a:	bf08      	it	eq
   1b43c:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b43e:	70b3      	strb	r3, [r6, #2]
	return mem;
   1b440:	e7e9      	b.n	1b416 <lll_adv_pdu_alloc+0x5a>
   1b442:	4824      	ldr	r0, [pc, #144]	; (1b4d4 <lll_adv_pdu_alloc+0x118>)
   1b444:	f04f 32ff 	mov.w	r2, #4294967295
   1b448:	f04f 33ff 	mov.w	r3, #4294967295
   1b44c:	f004 ff7e 	bl	2034c <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1b450:	2800      	cmp	r0, #0
   1b452:	d12c      	bne.n	1b4ae <lll_adv_pdu_alloc+0xf2>
	uint8_t _first = *first; /* Copy read-index */
   1b454:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1b456:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1b458:	7832      	ldrb	r2, [r6, #0]
   1b45a:	7870      	ldrb	r0, [r6, #1]
   1b45c:	4299      	cmp	r1, r3
   1b45e:	d00a      	beq.n	1b476 <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   1b460:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1b464:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1b466:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1b468:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b46a:	4298      	cmp	r0, r3
   1b46c:	bf08      	it	eq
   1b46e:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b470:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1b472:	2d00      	cmp	r5, #0
   1b474:	d1cf      	bne.n	1b416 <lll_adv_pdu_alloc+0x5a>
   1b476:	4a18      	ldr	r2, [pc, #96]	; (1b4d8 <lll_adv_pdu_alloc+0x11c>)
   1b478:	4918      	ldr	r1, [pc, #96]	; (1b4dc <lll_adv_pdu_alloc+0x120>)
   1b47a:	4819      	ldr	r0, [pc, #100]	; (1b4e0 <lll_adv_pdu_alloc+0x124>)
   1b47c:	f44f 7385 	mov.w	r3, #266	; 0x10a
   1b480:	f006 fa9e 	bl	219c0 <printk>
   1b484:	4040      	eors	r0, r0
   1b486:	f380 8811 	msr	BASEPRI, r0
   1b48a:	f04f 0003 	mov.w	r0, #3
   1b48e:	df02      	svc	2
   1b490:	2500      	movs	r5, #0
   1b492:	e7c0      	b.n	1b416 <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   1b494:	4a10      	ldr	r2, [pc, #64]	; (1b4d8 <lll_adv_pdu_alloc+0x11c>)
   1b496:	4913      	ldr	r1, [pc, #76]	; (1b4e4 <lll_adv_pdu_alloc+0x128>)
   1b498:	4811      	ldr	r0, [pc, #68]	; (1b4e0 <lll_adv_pdu_alloc+0x124>)
   1b49a:	23f7      	movs	r3, #247	; 0xf7
   1b49c:	f006 fa90 	bl	219c0 <printk>
   1b4a0:	4040      	eors	r0, r0
   1b4a2:	f380 8811 	msr	BASEPRI, r0
   1b4a6:	f04f 0003 	mov.w	r0, #3
   1b4aa:	df02      	svc	2
   1b4ac:	e7bd      	b.n	1b42a <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   1b4ae:	4a0a      	ldr	r2, [pc, #40]	; (1b4d8 <lll_adv_pdu_alloc+0x11c>)
   1b4b0:	490c      	ldr	r1, [pc, #48]	; (1b4e4 <lll_adv_pdu_alloc+0x128>)
   1b4b2:	480b      	ldr	r0, [pc, #44]	; (1b4e0 <lll_adv_pdu_alloc+0x124>)
   1b4b4:	f240 1307 	movw	r3, #263	; 0x107
   1b4b8:	f006 fa82 	bl	219c0 <printk>
   1b4bc:	4040      	eors	r0, r0
   1b4be:	f380 8811 	msr	BASEPRI, r0
   1b4c2:	f04f 0003 	mov.w	r0, #3
   1b4c6:	df02      	svc	2
   1b4c8:	e7c4      	b.n	1b454 <lll_adv_pdu_alloc+0x98>
   1b4ca:	bf00      	nop
   1b4cc:	20000634 	.word	0x20000634
   1b4d0:	2000e824 	.word	0x2000e824
   1b4d4:	2000e8f0 	.word	0x2000e8f0
   1b4d8:	00028d7c 	.word	0x00028d7c
   1b4dc:	00028ddc 	.word	0x00028ddc
   1b4e0:	000282a4 	.word	0x000282a4
   1b4e4:	00028524 	.word	0x00028524

0001b4e8 <lll_adv_pdu_latest_get>:
{
   1b4e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b4ea:	4604      	mov	r4, r0
	first = pdu->first;
   1b4ec:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1b4ee:	7840      	ldrb	r0, [r0, #1]
   1b4f0:	4298      	cmp	r0, r3
   1b4f2:	d028      	beq.n	1b546 <lll_adv_pdu_latest_get+0x5e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1b4f4:	4d1c      	ldr	r5, [pc, #112]	; (1b568 <lll_adv_pdu_latest_get+0x80>)
   1b4f6:	b2da      	uxtb	r2, r3
	last = last + 1;
   1b4f8:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1b4fa:	786e      	ldrb	r6, [r5, #1]
   1b4fc:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   1b4fe:	3301      	adds	r3, #1
   1b500:	b2db      	uxtb	r3, r3
		last = 0U;
   1b502:	429e      	cmp	r6, r3
   1b504:	bf08      	it	eq
   1b506:	2300      	moveq	r3, #0
	if (last == first) {
   1b508:	4298      	cmp	r0, r3
   1b50a:	d01e      	beq.n	1b54a <lll_adv_pdu_latest_get+0x62>
		first += 1U;
   1b50c:	1c50      	adds	r0, r2, #1
   1b50e:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   1b510:	2802      	cmp	r0, #2
   1b512:	bf04      	itt	eq
   1b514:	2600      	moveq	r6, #0
			first = 0U;
   1b516:	4630      	moveq	r0, r6
		pdu->first = first;
   1b518:	7020      	strb	r0, [r4, #0]
	return (void *)pdu->pdu[first];
   1b51a:	bf18      	it	ne
   1b51c:	4606      	movne	r6, r0
		*is_modified = 1U;
   1b51e:	2001      	movs	r0, #1
   1b520:	7008      	strb	r0, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b522:	78e8      	ldrb	r0, [r5, #3]
   1b524:	7829      	ldrb	r1, [r5, #0]
   1b526:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b52a:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   1b52e:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   1b530:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1b532:	6057      	str	r7, [r2, #4]
   1b534:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1b536:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1b538:	480c      	ldr	r0, [pc, #48]	; (1b56c <lll_adv_pdu_latest_get+0x84>)
   1b53a:	f004 fee1 	bl	20300 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   1b53e:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1b542:	6860      	ldr	r0, [r4, #4]
}
   1b544:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (void *)pdu->pdu[first];
   1b546:	4606      	mov	r6, r0
   1b548:	e7f9      	b.n	1b53e <lll_adv_pdu_latest_get+0x56>
			LL_ASSERT(false);
   1b54a:	4a09      	ldr	r2, [pc, #36]	; (1b570 <lll_adv_pdu_latest_get+0x88>)
   1b54c:	4909      	ldr	r1, [pc, #36]	; (1b574 <lll_adv_pdu_latest_get+0x8c>)
   1b54e:	480a      	ldr	r0, [pc, #40]	; (1b578 <lll_adv_pdu_latest_get+0x90>)
   1b550:	f240 131d 	movw	r3, #285	; 0x11d
   1b554:	f006 fa34 	bl	219c0 <printk>
   1b558:	4040      	eors	r0, r0
   1b55a:	f380 8811 	msr	BASEPRI, r0
   1b55e:	f04f 0003 	mov.w	r0, #3
   1b562:	df02      	svc	2
			return NULL;
   1b564:	2000      	movs	r0, #0
}
   1b566:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b568:	20000634 	.word	0x20000634
   1b56c:	2000e8f0 	.word	0x2000e8f0
   1b570:	00028d7c 	.word	0x00028d7c
   1b574:	0002833c 	.word	0x0002833c
   1b578:	000282a4 	.word	0x000282a4

0001b57c <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1b57c:	7b03      	ldrb	r3, [r0, #12]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b57e:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1b580:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1b584:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b586:	4604      	mov	r4, r0
   1b588:	fa93 f0a3 	rbit	r0, r3
   1b58c:	fab0 f080 	clz	r0, r0
   1b590:	bf08      	it	eq
   1b592:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1b596:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b598:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   1b59a:	d03d      	beq.n	1b618 <chan_prepare.isra.0+0x9c>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b59c:	7b22      	ldrb	r2, [r4, #12]
   1b59e:	1e59      	subs	r1, r3, #1
   1b5a0:	400b      	ands	r3, r1
   1b5a2:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1b5a6:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b5aa:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   1b5ac:	f7ff fcae 	bl	1af0c <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1b5b0:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1b5b2:	f10d 0107 	add.w	r1, sp, #7
   1b5b6:	f104 0010 	add.w	r0, r4, #16
   1b5ba:	f88d 3007 	strb.w	r3, [sp, #7]
   1b5be:	f7ff ff93 	bl	1b4e8 <lll_adv_pdu_latest_get>
   1b5c2:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1b5c4:	f001 f97a 	bl	1c8bc <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1b5c8:	782b      	ldrb	r3, [r5, #0]
   1b5ca:	f003 030f 	and.w	r3, r3, #15
   1b5ce:	2b02      	cmp	r3, #2
   1b5d0:	d01a      	beq.n	1b608 <chan_prepare.isra.0+0x8c>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1b5d2:	f10d 0107 	add.w	r1, sp, #7
   1b5d6:	f104 001c 	add.w	r0, r4, #28
   1b5da:	f7ff ff85 	bl	1b4e8 <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1b5de:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b5e2:	b95b      	cbnz	r3, 1b5fc <chan_prepare.isra.0+0x80>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1b5e4:	4621      	mov	r1, r4
   1b5e6:	4815      	ldr	r0, [pc, #84]	; (1b63c <chan_prepare.isra.0+0xc0>)
   1b5e8:	f001 f888 	bl	1c6fc <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b5ec:	2096      	movs	r0, #150	; 0x96
   1b5ee:	f001 faf1 	bl	1cbd4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b5f2:	2000      	movs	r0, #0
   1b5f4:	f001 f9d4 	bl	1c9a0 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1b5f8:	b003      	add	sp, #12
   1b5fa:	bd30      	pop	{r4, r5, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1b5fc:	2206      	movs	r2, #6
   1b5fe:	1ca9      	adds	r1, r5, #2
   1b600:	3002      	adds	r0, #2
   1b602:	f008 fe7f 	bl	24304 <memcpy>
   1b606:	e7ed      	b.n	1b5e4 <chan_prepare.isra.0+0x68>
		radio_isr_set(isr_done, lll);
   1b608:	480d      	ldr	r0, [pc, #52]	; (1b640 <chan_prepare.isra.0+0xc4>)
   1b60a:	4621      	mov	r1, r4
   1b60c:	f001 f876 	bl	1c6fc <radio_isr_set>
		radio_switch_complete_and_disable();
   1b610:	f001 fa6e 	bl	1caf0 <radio_switch_complete_and_disable>
}
   1b614:	b003      	add	sp, #12
   1b616:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   1b618:	4a0a      	ldr	r2, [pc, #40]	; (1b644 <chan_prepare.isra.0+0xc8>)
   1b61a:	490b      	ldr	r1, [pc, #44]	; (1b648 <chan_prepare.isra.0+0xcc>)
   1b61c:	480b      	ldr	r0, [pc, #44]	; (1b64c <chan_prepare.isra.0+0xd0>)
   1b61e:	f240 3387 	movw	r3, #903	; 0x387
   1b622:	f006 f9cd 	bl	219c0 <printk>
   1b626:	4040      	eors	r0, r0
   1b628:	f380 8811 	msr	BASEPRI, r0
   1b62c:	f04f 0003 	mov.w	r0, #3
   1b630:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b632:	7b23      	ldrb	r3, [r4, #12]
   1b634:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1b638:	e7b0      	b.n	1b59c <chan_prepare.isra.0+0x20>
   1b63a:	bf00      	nop
   1b63c:	0001b1ad 	.word	0x0001b1ad
   1b640:	0001b651 	.word	0x0001b651
   1b644:	00028d7c 	.word	0x00028d7c
   1b648:	00028a30 	.word	0x00028a30
   1b64c:	000282a4 	.word	0x000282a4

0001b650 <isr_done>:
{
   1b650:	b510      	push	{r4, lr}
   1b652:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1b654:	f7ff fcb0 	bl	1afb8 <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1b658:	7b23      	ldrb	r3, [r4, #12]
   1b65a:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1b65e:	2a01      	cmp	r2, #1
   1b660:	d105      	bne.n	1b66e <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1b662:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b666:	f362 1306 	bfi	r3, r2, #4, #3
   1b66a:	7323      	strb	r3, [r4, #12]
	if (lll->chan_map_curr) {
   1b66c:	b2db      	uxtb	r3, r3
   1b66e:	f013 0f70 	tst.w	r3, #112	; 0x70
   1b672:	d106      	bne.n	1b682 <isr_done+0x32>
	radio_filter_disable();
   1b674:	f001 fa7c 	bl	1cb70 <radio_filter_disable>
	lll_isr_cleanup(param);
   1b678:	4620      	mov	r0, r4
}
   1b67a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b67e:	f7ff bca9 	b.w	1afd4 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1b682:	4620      	mov	r0, r4
   1b684:	f7ff ff7a 	bl	1b57c <chan_prepare.isra.0>
		radio_tx_enable();
   1b688:	f001 f928 	bl	1c8dc <radio_tx_enable>
}
   1b68c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1b690:	f001 bb7a 	b.w	1cd88 <radio_tmr_end_capture>

0001b694 <prepare_cb>:
{
   1b694:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1b696:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1b698:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1b69a:	f015 0501 	ands.w	r5, r5, #1
{
   1b69e:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   1b6a0:	d16e      	bne.n	1b780 <prepare_cb+0xec>
	radio_reset();
   1b6a2:	4606      	mov	r6, r0
   1b6a4:	f001 f86c 	bl	1c780 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b6a8:	4628      	mov	r0, r5
   1b6aa:	f001 f89d 	bl	1c7e8 <radio_tx_power_set>
	radio_phy_set(0, 0);
   1b6ae:	4629      	mov	r1, r5
   1b6b0:	4628      	mov	r0, r5
   1b6b2:	f001 f889 	bl	1c7c8 <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1b6b6:	462a      	mov	r2, r5
   1b6b8:	2125      	movs	r1, #37	; 0x25
   1b6ba:	2008      	movs	r0, #8
   1b6bc:	f001 f8ca 	bl	1c854 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b6c0:	4b3b      	ldr	r3, [pc, #236]	; (1b7b0 <prepare_cb+0x11c>)
   1b6c2:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1b6c4:	a801      	add	r0, sp, #4
   1b6c6:	f001 f8ad 	bl	1c824 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b6ca:	493a      	ldr	r1, [pc, #232]	; (1b7b4 <prepare_cb+0x120>)
   1b6cc:	f240 605b 	movw	r0, #1627	; 0x65b
   1b6d0:	f001 f948 	bl	1c964 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1b6d4:	7b23      	ldrb	r3, [r4, #12]
   1b6d6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b6da:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   1b6de:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   1b6e0:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1b6e2:	f7ff ff4b 	bl	1b57c <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1b6e6:	f7ff f8bd 	bl	1a864 <ull_filter_lll_rl_enabled>
   1b6ea:	bb50      	cbnz	r0, 1b742 <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1b6ec:	7b63      	ldrb	r3, [r4, #13]
   1b6ee:	079b      	lsls	r3, r3, #30
   1b6f0:	d134      	bne.n	1b75c <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   1b6f2:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1b6f4:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1b6f6:	4638      	mov	r0, r7
   1b6f8:	f7ff fbec 	bl	1aed4 <lll_evt_offset_get>
   1b6fc:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1b6fe:	6872      	ldr	r2, [r6, #4]
   1b700:	f105 0109 	add.w	r1, r5, #9
   1b704:	2001      	movs	r0, #1
   1b706:	f001 fa71 	bl	1cbec <radio_tmr_start>
	radio_tmr_end_capture();
   1b70a:	f001 fb3d 	bl	1cd88 <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1b70e:	4620      	mov	r0, r4
   1b710:	f7f9 fb6e 	bl	14df0 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1b714:	1c81      	adds	r1, r0, #2
   1b716:	462a      	mov	r2, r5
   1b718:	b2c9      	uxtb	r1, r1
   1b71a:	4638      	mov	r0, r7
   1b71c:	f7ff fbe4 	bl	1aee8 <lll_preempt_calc>
   1b720:	b930      	cbnz	r0, 1b730 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   1b722:	4620      	mov	r0, r4
   1b724:	f7ff fb7c 	bl	1ae20 <lll_prepare_done>
		LL_ASSERT(!ret);
   1b728:	b9d0      	cbnz	r0, 1b760 <prepare_cb+0xcc>
}
   1b72a:	2000      	movs	r0, #0
   1b72c:	b003      	add	sp, #12
   1b72e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1b730:	4821      	ldr	r0, [pc, #132]	; (1b7b8 <prepare_cb+0x124>)
   1b732:	4621      	mov	r1, r4
   1b734:	f000 ffe2 	bl	1c6fc <radio_isr_set>
		radio_disable();
   1b738:	f001 f8d6 	bl	1c8e8 <radio_disable>
}
   1b73c:	2000      	movs	r0, #0
   1b73e:	b003      	add	sp, #12
   1b740:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1b742:	7b60      	ldrb	r0, [r4, #13]
   1b744:	f010 0003 	ands.w	r0, r0, #3
   1b748:	bf18      	it	ne
   1b74a:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b74c:	f7ff f840 	bl	1a7d0 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1b750:	7841      	ldrb	r1, [r0, #1]
   1b752:	1c82      	adds	r2, r0, #2
   1b754:	7800      	ldrb	r0, [r0, #0]
   1b756:	f001 f9eb 	bl	1cb30 <radio_filter_configure>
   1b75a:	e7ca      	b.n	1b6f2 <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b75c:	2001      	movs	r0, #1
   1b75e:	e7f5      	b.n	1b74c <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   1b760:	4a16      	ldr	r2, [pc, #88]	; (1b7bc <prepare_cb+0x128>)
   1b762:	4917      	ldr	r1, [pc, #92]	; (1b7c0 <prepare_cb+0x12c>)
   1b764:	4817      	ldr	r0, [pc, #92]	; (1b7c4 <prepare_cb+0x130>)
   1b766:	f240 2321 	movw	r3, #545	; 0x221
   1b76a:	f006 f929 	bl	219c0 <printk>
   1b76e:	4040      	eors	r0, r0
   1b770:	f380 8811 	msr	BASEPRI, r0
   1b774:	f04f 0003 	mov.w	r0, #3
   1b778:	df02      	svc	2
}
   1b77a:	2000      	movs	r0, #0
   1b77c:	b003      	add	sp, #12
   1b77e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   1b780:	f7ff fce2 	bl	1b148 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1b784:	2800      	cmp	r0, #0
   1b786:	db05      	blt.n	1b794 <prepare_cb+0x100>
		lll_done(NULL);
   1b788:	2000      	movs	r0, #0
   1b78a:	f7ff fb4b 	bl	1ae24 <lll_done>
}
   1b78e:	2000      	movs	r0, #0
   1b790:	b003      	add	sp, #12
   1b792:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1b794:	4a09      	ldr	r2, [pc, #36]	; (1b7bc <prepare_cb+0x128>)
   1b796:	490c      	ldr	r1, [pc, #48]	; (1b7c8 <prepare_cb+0x134>)
   1b798:	480a      	ldr	r0, [pc, #40]	; (1b7c4 <prepare_cb+0x130>)
   1b79a:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1b79e:	f006 f90f 	bl	219c0 <printk>
   1b7a2:	4040      	eors	r0, r0
   1b7a4:	f380 8811 	msr	BASEPRI, r0
   1b7a8:	f04f 0003 	mov.w	r0, #3
   1b7ac:	df02      	svc	2
   1b7ae:	e7eb      	b.n	1b788 <prepare_cb+0xf4>
   1b7b0:	8e89bed6 	.word	0x8e89bed6
   1b7b4:	00555555 	.word	0x00555555
   1b7b8:	0001b195 	.word	0x0001b195
   1b7bc:	00028d7c 	.word	0x00028d7c
   1b7c0:	00028540 	.word	0x00028540
   1b7c4:	000282a4 	.word	0x000282a4
   1b7c8:	00028d40 	.word	0x00028d40

0001b7cc <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1b7cc:	68c3      	ldr	r3, [r0, #12]
{
   1b7ce:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1b7d0:	681e      	ldr	r6, [r3, #0]
{
   1b7d2:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b7d4:	f7f6 fa02 	bl	11bdc <ticker_ticks_now_get>
   1b7d8:	4605      	mov	r5, r0
   1b7da:	4630      	mov	r0, r6
   1b7dc:	f7ff fb7a 	bl	1aed4 <lll_evt_offset_get>
	p->remainder = 0;
   1b7e0:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b7e2:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b7e4:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b7e8:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1b7ea:	4620      	mov	r0, r4
}
   1b7ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1b7f0:	f7ff bf50 	b.w	1b694 <prepare_cb>

0001b7f4 <lll_adv_prepare>:
{
   1b7f4:	b510      	push	{r4, lr}
   1b7f6:	b082      	sub	sp, #8
   1b7f8:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b7fa:	f7ff fc8d 	bl	1b118 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b7fe:	2800      	cmp	r0, #0
   1b800:	db1a      	blt.n	1b838 <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1b802:	4a14      	ldr	r2, [pc, #80]	; (1b854 <lll_adv_prepare+0x60>)
   1b804:	4914      	ldr	r1, [pc, #80]	; (1b858 <lll_adv_prepare+0x64>)
   1b806:	4815      	ldr	r0, [pc, #84]	; (1b85c <lll_adv_prepare+0x68>)
   1b808:	9400      	str	r4, [sp, #0]
   1b80a:	2300      	movs	r3, #0
   1b80c:	f7ff fa7c 	bl	1ad08 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b810:	b108      	cbz	r0, 1b816 <lll_adv_prepare+0x22>
   1b812:	3044      	adds	r0, #68	; 0x44
   1b814:	d101      	bne.n	1b81a <lll_adv_prepare+0x26>
}
   1b816:	b002      	add	sp, #8
   1b818:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b81a:	4a11      	ldr	r2, [pc, #68]	; (1b860 <lll_adv_prepare+0x6c>)
   1b81c:	4911      	ldr	r1, [pc, #68]	; (1b864 <lll_adv_prepare+0x70>)
   1b81e:	4812      	ldr	r0, [pc, #72]	; (1b868 <lll_adv_prepare+0x74>)
   1b820:	f240 133d 	movw	r3, #317	; 0x13d
   1b824:	f006 f8cc 	bl	219c0 <printk>
   1b828:	4040      	eors	r0, r0
   1b82a:	f380 8811 	msr	BASEPRI, r0
   1b82e:	f04f 0003 	mov.w	r0, #3
   1b832:	df02      	svc	2
}
   1b834:	b002      	add	sp, #8
   1b836:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1b838:	4a09      	ldr	r2, [pc, #36]	; (1b860 <lll_adv_prepare+0x6c>)
   1b83a:	490c      	ldr	r1, [pc, #48]	; (1b86c <lll_adv_prepare+0x78>)
   1b83c:	480a      	ldr	r0, [pc, #40]	; (1b868 <lll_adv_prepare+0x74>)
   1b83e:	f44f 739d 	mov.w	r3, #314	; 0x13a
   1b842:	f006 f8bd 	bl	219c0 <printk>
   1b846:	4040      	eors	r0, r0
   1b848:	f380 8811 	msr	BASEPRI, r0
   1b84c:	f04f 0003 	mov.w	r0, #3
   1b850:	df02      	svc	2
   1b852:	e7d6      	b.n	1b802 <lll_adv_prepare+0xe>
   1b854:	0001b695 	.word	0x0001b695
   1b858:	0001b2d5 	.word	0x0001b2d5
   1b85c:	0001b261 	.word	0x0001b261
   1b860:	00028d7c 	.word	0x00028d7c
   1b864:	00028de0 	.word	0x00028de0
   1b868:	000282a4 	.word	0x000282a4
   1b86c:	00028d40 	.word	0x00028d40

0001b870 <lll_adv_scan_req_check>:
{
   1b870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1b874:	f890 c00d 	ldrb.w	ip, [r0, #13]
{
   1b878:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b87c:	f01c 0f01 	tst.w	ip, #1
{
   1b880:	460f      	mov	r7, r1
   1b882:	4616      	mov	r6, r2
   1b884:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b886:	d009      	beq.n	1b89c <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   1b888:	f1b8 0f00 	cmp.w	r8, #0
   1b88c:	d016      	beq.n	1b8bc <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1b88e:	783b      	ldrb	r3, [r7, #0]
   1b890:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1b894:	d019      	beq.n	1b8ca <lll_adv_scan_req_check+0x5a>
{
   1b896:	2000      	movs	r0, #0
}
   1b898:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b89c:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1b89e:	f811 0b02 	ldrb.w	r0, [r1], #2
   1b8a2:	9a07      	ldr	r2, [sp, #28]
   1b8a4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b8a8:	f7fe ff9e 	bl	1a7e8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1b8ac:	2800      	cmp	r0, #0
   1b8ae:	d1ee      	bne.n	1b88e <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   1b8b0:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1b8b2:	07db      	lsls	r3, r3, #31
   1b8b4:	d5ef      	bpl.n	1b896 <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   1b8b6:	f1b8 0f00 	cmp.w	r8, #0
   1b8ba:	d1e8      	bne.n	1b88e <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b8bc:	9b07      	ldr	r3, [sp, #28]
   1b8be:	7818      	ldrb	r0, [r3, #0]
   1b8c0:	f7fe ff56 	bl	1a770 <ull_filter_lll_irk_whitelisted>
   1b8c4:	2800      	cmp	r0, #0
   1b8c6:	d1e2      	bne.n	1b88e <lll_adv_scan_req_check+0x1e>
   1b8c8:	e7e5      	b.n	1b896 <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1b8ca:	2206      	movs	r2, #6
   1b8cc:	f107 0108 	add.w	r1, r7, #8
   1b8d0:	4628      	mov	r0, r5
   1b8d2:	f008 fd06 	bl	242e2 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1b8d6:	fab0 f080 	clz	r0, r0
   1b8da:	0940      	lsrs	r0, r0, #5
}
   1b8dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001b8e0 <lll_adv_connect_ind_check>:
{
   1b8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b8e4:	461f      	mov	r7, r3
	if (tgt_addr) {
   1b8e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   1b8e8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1b8ec:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1b8f0:	4605      	mov	r5, r0
   1b8f2:	460c      	mov	r4, r1
   1b8f4:	4690      	mov	r8, r2
	if (tgt_addr) {
   1b8f6:	b9fb      	cbnz	r3, 1b938 <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1b8f8:	7b43      	ldrb	r3, [r0, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b8fa:	079a      	lsls	r2, r3, #30
   1b8fc:	d507      	bpl.n	1b90e <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   1b8fe:	b1a6      	cbz	r6, 1b92a <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1b900:	7823      	ldrb	r3, [r4, #0]
   1b902:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1b906:	d03a      	beq.n	1b97e <lll_adv_connect_ind_check+0x9e>
   1b908:	2000      	movs	r0, #0
}
   1b90a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1b90e:	f811 0b02 	ldrb.w	r0, [r1], #2
   1b912:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b914:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b918:	f7fe ff66 	bl	1a7e8 <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1b91c:	2800      	cmp	r0, #0
   1b91e:	d1ef      	bne.n	1b900 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   1b920:	7b6b      	ldrb	r3, [r5, #13]
						rl_idx)) ||
   1b922:	079b      	lsls	r3, r3, #30
   1b924:	d5f0      	bpl.n	1b908 <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   1b926:	2e00      	cmp	r6, #0
   1b928:	d1ea      	bne.n	1b900 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b92a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b92c:	7818      	ldrb	r0, [r3, #0]
   1b92e:	f7fe ff1f 	bl	1a770 <ull_filter_lll_irk_whitelisted>
   1b932:	2800      	cmp	r0, #0
   1b934:	d1e4      	bne.n	1b900 <lll_adv_connect_ind_check+0x20>
   1b936:	e7e7      	b.n	1b908 <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1b938:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1b93a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1b93c:	f81a 0b02 	ldrb.w	r0, [sl], #2
   1b940:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1b944:	4651      	mov	r1, sl
   1b946:	f7fe ff4f 	bl	1a7e8 <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1b94a:	2800      	cmp	r0, #0
   1b94c:	d0dc      	beq.n	1b908 <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1b94e:	7823      	ldrb	r3, [r4, #0]
   1b950:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1b954:	d1d8      	bne.n	1b908 <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1b956:	4638      	mov	r0, r7
   1b958:	2206      	movs	r2, #6
   1b95a:	f104 0108 	add.w	r1, r4, #8
   1b95e:	f008 fcc0 	bl	242e2 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1b962:	2800      	cmp	r0, #0
   1b964:	d1d0      	bne.n	1b908 <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1b966:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1b968:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1b96a:	28ff      	cmp	r0, #255	; 0xff
   1b96c:	d011      	beq.n	1b992 <lll_adv_connect_ind_check+0xb2>
   1b96e:	7bab      	ldrb	r3, [r5, #14]
   1b970:	2bff      	cmp	r3, #255	; 0xff
   1b972:	d00e      	beq.n	1b992 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1b974:	1ac0      	subs	r0, r0, r3
   1b976:	fab0 f080 	clz	r0, r0
   1b97a:	0940      	lsrs	r0, r0, #5
   1b97c:	e7c5      	b.n	1b90a <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1b97e:	2206      	movs	r2, #6
   1b980:	f104 0108 	add.w	r1, r4, #8
   1b984:	4638      	mov	r0, r7
   1b986:	f008 fcac 	bl	242e2 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1b98a:	fab0 f080 	clz	r0, r0
   1b98e:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b990:	e7bb      	b.n	1b90a <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1b992:	7823      	ldrb	r3, [r4, #0]
   1b994:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1b998:	454b      	cmp	r3, r9
   1b99a:	d1b5      	bne.n	1b908 <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1b99c:	9809      	ldr	r0, [sp, #36]	; 0x24
   1b99e:	2206      	movs	r2, #6
   1b9a0:	4651      	mov	r1, sl
   1b9a2:	f008 fc9e 	bl	242e2 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1b9a6:	fab0 f080 	clz	r0, r0
   1b9aa:	0940      	lsrs	r0, r0, #5
   1b9ac:	e7ad      	b.n	1b90a <lll_adv_connect_ind_check+0x2a>
   1b9ae:	bf00      	nop

0001b9b0 <isr_rx>:
{
   1b9b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1b9b4:	b089      	sub	sp, #36	; 0x24
   1b9b6:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1b9b8:	f000 ffc0 	bl	1c93c <radio_is_done>
	if (trx_done) {
   1b9bc:	b2c0      	uxtb	r0, r0
   1b9be:	b950      	cbnz	r0, 1b9d6 <isr_rx+0x26>
	lll_isr_status_reset();
   1b9c0:	f7ff fafa 	bl	1afb8 <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1b9c4:	4879      	ldr	r0, [pc, #484]	; (1bbac <isr_rx+0x1fc>)
   1b9c6:	4621      	mov	r1, r4
   1b9c8:	f000 fe98 	bl	1c6fc <radio_isr_set>
}
   1b9cc:	b009      	add	sp, #36	; 0x24
   1b9ce:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   1b9d2:	f000 bf89 	b.w	1c8e8 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1b9d6:	f000 ffd1 	bl	1c97c <radio_crc_is_valid>
   1b9da:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1b9dc:	f001 f8da 	bl	1cb94 <radio_filter_has_match>
   1b9e0:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   1b9e2:	f001 f8e1 	bl	1cba8 <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1b9e6:	f001 fac5 	bl	1cf74 <radio_ar_has_match>
   1b9ea:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1b9ec:	f001 faa6 	bl	1cf3c <radio_ar_match_get>
	if (crc_ok) {
   1b9f0:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1b9f2:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1b9f4:	f001 f892 	bl	1cb1c <radio_rssi_is_ready>
	lll_isr_status_reset();
   1b9f8:	f7ff fade 	bl	1afb8 <lll_isr_status_reset>
	if (crc_ok) {
   1b9fc:	2d00      	cmp	r5, #0
   1b9fe:	d0e1      	beq.n	1b9c4 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1ba00:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1ba04:	d175      	bne.n	1baf2 <isr_rx+0x142>
   1ba06:	20ff      	movs	r0, #255	; 0xff
   1ba08:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1ba0c:	f000 ffc4 	bl	1c998 <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1ba10:	7c23      	ldrb	r3, [r4, #16]
   1ba12:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1ba16:	4680      	mov	r8, r0
   1ba18:	6959      	ldr	r1, [r3, #20]
	addr = pdu_adv->adv_ind.addr;
   1ba1a:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1ba1c:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   1ba1e:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1ba22:	f005 000f 	and.w	r0, r5, #15
   1ba26:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1ba28:	bf08      	it	eq
   1ba2a:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ba2e:	f898 1000 	ldrb.w	r1, [r8]
   1ba32:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   1ba36:	bf18      	it	ne
   1ba38:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ba3c:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   1ba3e:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1ba42:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1ba46:	d05b      	beq.n	1bb00 <isr_rx+0x150>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1ba48:	2905      	cmp	r1, #5
   1ba4a:	d1bb      	bne.n	1b9c4 <isr_rx+0x14>
   1ba4c:	f898 1001 	ldrb.w	r1, [r8, #1]
   1ba50:	2922      	cmp	r1, #34	; 0x22
   1ba52:	d1b7      	bne.n	1b9c4 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1ba54:	f10d 011f 	add.w	r1, sp, #31
   1ba58:	9103      	str	r1, [sp, #12]
   1ba5a:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1ba5e:	9500      	str	r5, [sp, #0]
   1ba60:	4641      	mov	r1, r8
   1ba62:	4620      	mov	r0, r4
   1ba64:	f7ff ff3c 	bl	1b8e0 <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1ba68:	2800      	cmp	r0, #0
   1ba6a:	d0ab      	beq.n	1b9c4 <isr_rx+0x14>
					     devmatch_ok, &rl_idx) &&
   1ba6c:	68a3      	ldr	r3, [r4, #8]
   1ba6e:	2b00      	cmp	r3, #0
   1ba70:	d0a8      	beq.n	1b9c4 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1ba72:	2004      	movs	r0, #4
   1ba74:	f7f8 fd24 	bl	144c0 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1ba78:	2800      	cmp	r0, #0
   1ba7a:	d0a3      	beq.n	1b9c4 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1ba7c:	484c      	ldr	r0, [pc, #304]	; (1bbb0 <isr_rx+0x200>)
   1ba7e:	4621      	mov	r1, r4
   1ba80:	f000 fe3c 	bl	1c6fc <radio_isr_set>
		radio_disable();
   1ba84:	f000 ff30 	bl	1c8e8 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1ba88:	f000 ff4e 	bl	1c928 <radio_is_ready>
   1ba8c:	2800      	cmp	r0, #0
   1ba8e:	d160      	bne.n	1bb52 <isr_rx+0x1a2>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1ba90:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1ba92:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1ba96:	07db      	lsls	r3, r3, #31
   1ba98:	7122      	strb	r2, [r4, #4]
   1ba9a:	d44c      	bmi.n	1bb36 <isr_rx+0x186>
		rx = ull_pdu_rx_alloc();
   1ba9c:	f7f8 fd2e 	bl	144fc <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1baa0:	2313      	movs	r3, #19
		rx = ull_pdu_rx_alloc();
   1baa2:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1baa4:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1baa6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1baaa:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1baac:	4641      	mov	r1, r8
   1baae:	2224      	movs	r2, #36	; 0x24
   1bab0:	301c      	adds	r0, #28
   1bab2:	f008 fc27 	bl	24304 <memcpy>
		ftr->param = lll;
   1bab6:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1bab8:	f001 f91a 	bl	1ccf0 <radio_tmr_start_get>
   1babc:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1babe:	f001 f96b 	bl	1cd98 <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1bac2:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1bac4:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1bac6:	4608      	mov	r0, r1
   1bac8:	f000 fefe 	bl	1c8c8 <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1bacc:	1a24      	subs	r4, r4, r0
   1bace:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1bad0:	b1a6      	cbz	r6, 1bafc <isr_rx+0x14c>
   1bad2:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1bad6:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1bad8:	f7f8 fd10 	bl	144fc <ull_pdu_rx_alloc>
   1badc:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   1bade:	4629      	mov	r1, r5
   1bae0:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   1bae2:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1bae4:	f7f8 fd20 	bl	14528 <ull_rx_put>
		ull_rx_sched();
   1bae8:	f7f8 fd2e 	bl	14548 <ull_rx_sched>
}
   1baec:	b009      	add	sp, #36	; 0x24
   1baee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1baf2:	fa5f f088 	uxtb.w	r0, r8
   1baf6:	f7fe fde9 	bl	1a6cc <ull_filter_lll_rl_irk_idx>
   1bafa:	e785      	b.n	1ba08 <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1bafc:	23ff      	movs	r3, #255	; 0xff
   1bafe:	e7ea      	b.n	1bad6 <isr_rx+0x126>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bb00:	f898 1001 	ldrb.w	r1, [r8, #1]
   1bb04:	290c      	cmp	r1, #12
   1bb06:	f47f af5d 	bne.w	1b9c4 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1bb0a:	f1b9 0f00 	cmp.w	r9, #0
   1bb0e:	f47f af59 	bne.w	1b9c4 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1bb12:	f10d 011f 	add.w	r1, sp, #31
   1bb16:	9101      	str	r1, [sp, #4]
   1bb18:	9700      	str	r7, [sp, #0]
   1bb1a:	4641      	mov	r1, r8
   1bb1c:	4620      	mov	r0, r4
   1bb1e:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1bb22:	f7ff fea5 	bl	1b870 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1bb26:	bb10      	cbnz	r0, 1bb6e <isr_rx+0x1be>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1bb28:	f898 1000 	ldrb.w	r1, [r8]
   1bb2c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bb30:	f001 010f 	and.w	r1, r1, #15
   1bb34:	e788      	b.n	1ba48 <isr_rx+0x98>
		LL_ASSERT(!ret);
   1bb36:	4a1f      	ldr	r2, [pc, #124]	; (1bbb4 <isr_rx+0x204>)
   1bb38:	491f      	ldr	r1, [pc, #124]	; (1bbb8 <isr_rx+0x208>)
   1bb3a:	4820      	ldr	r0, [pc, #128]	; (1bbbc <isr_rx+0x20c>)
   1bb3c:	f240 4329 	movw	r3, #1065	; 0x429
   1bb40:	f005 ff3e 	bl	219c0 <printk>
   1bb44:	4040      	eors	r0, r0
   1bb46:	f380 8811 	msr	BASEPRI, r0
   1bb4a:	f04f 0003 	mov.w	r0, #3
   1bb4e:	df02      	svc	2
   1bb50:	e7a4      	b.n	1ba9c <isr_rx+0xec>
		LL_ASSERT(!radio_is_ready());
   1bb52:	4a18      	ldr	r2, [pc, #96]	; (1bbb4 <isr_rx+0x204>)
   1bb54:	491a      	ldr	r1, [pc, #104]	; (1bbc0 <isr_rx+0x210>)
   1bb56:	4819      	ldr	r0, [pc, #100]	; (1bbbc <isr_rx+0x20c>)
   1bb58:	f240 431b 	movw	r3, #1051	; 0x41b
   1bb5c:	f005 ff30 	bl	219c0 <printk>
   1bb60:	4040      	eors	r0, r0
   1bb62:	f380 8811 	msr	BASEPRI, r0
   1bb66:	f04f 0003 	mov.w	r0, #3
   1bb6a:	df02      	svc	2
   1bb6c:	e790      	b.n	1ba90 <isr_rx+0xe0>
		radio_isr_set(isr_done, lll);
   1bb6e:	4621      	mov	r1, r4
   1bb70:	480e      	ldr	r0, [pc, #56]	; (1bbac <isr_rx+0x1fc>)
   1bb72:	f000 fdc3 	bl	1c6fc <radio_isr_set>
		radio_switch_complete_and_disable();
   1bb76:	f000 ffbb 	bl	1caf0 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1bb7a:	7f23      	ldrb	r3, [r4, #28]
   1bb7c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1bb80:	6a20      	ldr	r0, [r4, #32]
   1bb82:	f000 fe9b 	bl	1c8bc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1bb86:	f000 fecf 	bl	1c928 <radio_is_ready>
   1bb8a:	2800      	cmp	r0, #0
   1bb8c:	d0ae      	beq.n	1baec <isr_rx+0x13c>
   1bb8e:	4a09      	ldr	r2, [pc, #36]	; (1bbb4 <isr_rx+0x204>)
   1bb90:	490b      	ldr	r1, [pc, #44]	; (1bbc0 <isr_rx+0x210>)
   1bb92:	480a      	ldr	r0, [pc, #40]	; (1bbbc <isr_rx+0x20c>)
   1bb94:	f240 33dd 	movw	r3, #989	; 0x3dd
   1bb98:	f005 ff12 	bl	219c0 <printk>
   1bb9c:	4040      	eors	r0, r0
   1bb9e:	f380 8811 	msr	BASEPRI, r0
   1bba2:	f04f 0003 	mov.w	r0, #3
   1bba6:	df02      	svc	2
		if (!err) {
   1bba8:	e7a0      	b.n	1baec <isr_rx+0x13c>
   1bbaa:	bf00      	nop
   1bbac:	0001b651 	.word	0x0001b651
   1bbb0:	0001b195 	.word	0x0001b195
   1bbb4:	00028d7c 	.word	0x00028d7c
   1bbb8:	00028540 	.word	0x00028540
   1bbbc:	000282a4 	.word	0x000282a4
   1bbc0:	00028dc8 	.word	0x00028dc8

0001bbc4 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1bbc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bbc6:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1bbc8:	f7ff f9f6 	bl	1afb8 <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1bbcc:	f7f8 fd28 	bl	14620 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1bbd0:	4604      	mov	r4, r0
   1bbd2:	2800      	cmp	r0, #0
   1bbd4:	d033      	beq.n	1bc3e <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1bbd6:	4b21      	ldr	r3, [pc, #132]	; (1bc5c <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1bbd8:	4921      	ldr	r1, [pc, #132]	; (1bc60 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1bbda:	4a22      	ldr	r2, [pc, #136]	; (1bc64 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1bbdc:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1bbde:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   1bbe0:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   1bbe2:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1bbe4:	2001      	movs	r0, #1
   1bbe6:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   1bbe8:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1bbea:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1bbec:	b11b      	cbz	r3, 1bbf6 <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1bbee:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1bbf2:	2b00      	cmp	r3, #0
   1bbf4:	db04      	blt.n	1bc00 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1bbf6:	4628      	mov	r0, r5
}
   1bbf8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bbfc:	f7ff b9ea 	b.w	1afd4 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1bc00:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1bc04:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1bc08:	2b02      	cmp	r3, #2
   1bc0a:	d016      	beq.n	1bc3a <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1bc0c:	2b04      	cmp	r3, #4
   1bc0e:	bf14      	ite	ne
   1bc10:	2728      	movne	r7, #40	; 0x28
   1bc12:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bc16:	f001 f8ab 	bl	1cd70 <radio_tmr_aa_restore>
   1bc1a:	4606      	mov	r6, r0
   1bc1c:	f001 f8ae 	bl	1cd7c <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1bc20:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1bc22:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bc24:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   1bc26:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1bc2a:	2300      	movs	r3, #0
   1bc2c:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1bc2e:	63eb      	str	r3, [r5, #60]	; 0x3c
	lll_isr_cleanup(param);
   1bc30:	4628      	mov	r0, r5
}
   1bc32:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bc36:	f7ff b9cd 	b.w	1afd4 <lll_isr_cleanup>
	switch (phy) {
   1bc3a:	2718      	movs	r7, #24
   1bc3c:	e7eb      	b.n	1bc16 <isr_done+0x52>
	LL_ASSERT(e);
   1bc3e:	4a0a      	ldr	r2, [pc, #40]	; (1bc68 <isr_done+0xa4>)
   1bc40:	490a      	ldr	r1, [pc, #40]	; (1bc6c <isr_done+0xa8>)
   1bc42:	480b      	ldr	r0, [pc, #44]	; (1bc70 <isr_done+0xac>)
   1bc44:	f240 236e 	movw	r3, #622	; 0x26e
   1bc48:	f005 feba 	bl	219c0 <printk>
   1bc4c:	4040      	eors	r0, r0
   1bc4e:	f380 8811 	msr	BASEPRI, r0
   1bc52:	f04f 0003 	mov.w	r0, #3
   1bc56:	df02      	svc	2
   1bc58:	e7bd      	b.n	1bbd6 <isr_done+0x12>
   1bc5a:	bf00      	nop
   1bc5c:	2000ed72 	.word	0x2000ed72
   1bc60:	2000f315 	.word	0x2000f315
   1bc64:	2000f316 	.word	0x2000f316
   1bc68:	00028e04 	.word	0x00028e04
   1bc6c:	000286cc 	.word	0x000286cc
   1bc70:	000282a4 	.word	0x000282a4

0001bc74 <lll_conn_init>:
{
   1bc74:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1bc76:	f000 fe8b 	bl	1c990 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bc7a:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1bc7c:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bc7e:	2101      	movs	r1, #1
   1bc80:	f361 0201 	bfi	r2, r1, #0, #2
}
   1bc84:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bc86:	701a      	strb	r2, [r3, #0]
}
   1bc88:	bd08      	pop	{r3, pc}
   1bc8a:	bf00      	nop

0001bc8c <lll_conn_reset>:
}
   1bc8c:	2000      	movs	r0, #0
   1bc8e:	4770      	bx	lr

0001bc90 <lll_conn_flush>:
}
   1bc90:	4770      	bx	lr
   1bc92:	bf00      	nop

0001bc94 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1bc94:	4805      	ldr	r0, [pc, #20]	; (1bcac <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1bc96:	4906      	ldr	r1, [pc, #24]	; (1bcb0 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1bc98:	4a06      	ldr	r2, [pc, #24]	; (1bcb4 <lll_conn_prepare_reset+0x20>)
{
   1bc9a:	b410      	push	{r4}
	trx_cnt = 0U;
   1bc9c:	2300      	movs	r3, #0
   1bc9e:	4c06      	ldr	r4, [pc, #24]	; (1bcb8 <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1bca0:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1bca2:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1bca4:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1bca6:	8023      	strh	r3, [r4, #0]
}
   1bca8:	bc10      	pop	{r4}
   1bcaa:	4770      	bx	lr
   1bcac:	2000f315 	.word	0x2000f315
   1bcb0:	2000f314 	.word	0x2000f314
   1bcb4:	2000f316 	.word	0x2000f316
   1bcb8:	2000ed72 	.word	0x2000ed72

0001bcbc <lll_conn_abort_cb>:
{
   1bcbc:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1bcbe:	b1d0      	cbz	r0, 1bcf6 <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1bcc0:	460c      	mov	r4, r1
   1bcc2:	f7ff fa41 	bl	1b148 <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1bcc6:	2800      	cmp	r0, #0
   1bcc8:	db04      	blt.n	1bcd4 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1bcca:	4620      	mov	r0, r4
}
   1bccc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1bcd0:	f7ff b8a8 	b.w	1ae24 <lll_done>
	LL_ASSERT(err >= 0);
   1bcd4:	4a0b      	ldr	r2, [pc, #44]	; (1bd04 <lll_conn_abort_cb+0x48>)
   1bcd6:	490c      	ldr	r1, [pc, #48]	; (1bd08 <lll_conn_abort_cb+0x4c>)
   1bcd8:	480c      	ldr	r0, [pc, #48]	; (1bd0c <lll_conn_abort_cb+0x50>)
   1bcda:	239c      	movs	r3, #156	; 0x9c
   1bcdc:	f005 fe70 	bl	219c0 <printk>
   1bce0:	4040      	eors	r0, r0
   1bce2:	f380 8811 	msr	BASEPRI, r0
   1bce6:	f04f 0003 	mov.w	r0, #3
   1bcea:	df02      	svc	2
	lll_done(param);
   1bcec:	4620      	mov	r0, r4
}
   1bcee:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1bcf2:	f7ff b897 	b.w	1ae24 <lll_done>
		radio_isr_set(isr_done, param);
   1bcf6:	4806      	ldr	r0, [pc, #24]	; (1bd10 <lll_conn_abort_cb+0x54>)
   1bcf8:	f000 fd00 	bl	1c6fc <radio_isr_set>
}
   1bcfc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1bd00:	f000 bdf2 	b.w	1c8e8 <radio_disable>
   1bd04:	00028e04 	.word	0x00028e04
   1bd08:	00028d40 	.word	0x00028d40
   1bd0c:	000282a4 	.word	0x000282a4
   1bd10:	0001bbc5 	.word	0x0001bbc5

0001bd14 <lll_conn_rx_pkt_set>:
{
   1bd14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd16:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bd18:	2001      	movs	r0, #1
   1bd1a:	f7f8 fbd1 	bl	144c0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bd1e:	4606      	mov	r6, r0
   1bd20:	b368      	cbz	r0, 1bd7e <lll_conn_rx_pkt_set+0x6a>
	phy = lll->phy_rx;
   1bd22:	f895 4049 	ldrb.w	r4, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   1bd26:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1bd2a:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1bd2e:	2100      	movs	r1, #0
   1bd30:	4620      	mov	r0, r4
   1bd32:	f000 fd49 	bl	1c7c8 <radio_phy_set>
	} else if (lll->enc_rx) {
   1bd36:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1bd3a:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1bd3c:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   1bd40:	d511      	bpl.n	1bd66 <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1bd42:	1d39      	adds	r1, r7, #4
   1bd44:	f042 0201 	orr.w	r2, r2, #1
   1bd48:	b2c9      	uxtb	r1, r1
   1bd4a:	2008      	movs	r0, #8
   1bd4c:	f000 fd82 	bl	1c854 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1bd50:	f106 021c 	add.w	r2, r6, #28
   1bd54:	4621      	mov	r1, r4
   1bd56:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1bd5a:	f001 f829 	bl	1cdb0 <radio_ccm_rx_pkt_set>
}
   1bd5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1bd62:	f000 bda5 	b.w	1c8b0 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1bd66:	2008      	movs	r0, #8
   1bd68:	b2f9      	uxtb	r1, r7
   1bd6a:	f042 0201 	orr.w	r2, r2, #1
   1bd6e:	f000 fd71 	bl	1c854 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1bd72:	f106 001c 	add.w	r0, r6, #28
}
   1bd76:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1bd7a:	f000 bd99 	b.w	1c8b0 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1bd7e:	4a07      	ldr	r2, [pc, #28]	; (1bd9c <lll_conn_rx_pkt_set+0x88>)
   1bd80:	4907      	ldr	r1, [pc, #28]	; (1bda0 <lll_conn_rx_pkt_set+0x8c>)
   1bd82:	4808      	ldr	r0, [pc, #32]	; (1bda4 <lll_conn_rx_pkt_set+0x90>)
   1bd84:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   1bd88:	f005 fe1a 	bl	219c0 <printk>
   1bd8c:	4040      	eors	r0, r0
   1bd8e:	f380 8811 	msr	BASEPRI, r0
   1bd92:	f04f 0003 	mov.w	r0, #3
   1bd96:	df02      	svc	2
   1bd98:	e7c3      	b.n	1bd22 <lll_conn_rx_pkt_set+0xe>
   1bd9a:	bf00      	nop
   1bd9c:	00028e04 	.word	0x00028e04
   1bda0:	00028e50 	.word	0x00028e50
   1bda4:	000282a4 	.word	0x000282a4

0001bda8 <lll_conn_isr_tx>:
{
   1bda8:	b538      	push	{r3, r4, r5, lr}
   1bdaa:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1bdac:	f7ff f8f2 	bl	1af94 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bdb0:	2096      	movs	r0, #150	; 0x96
   1bdb2:	f000 ff0f 	bl	1cbd4 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1bdb6:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1bdba:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bdbe:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1bdc2:	f000 0007 	and.w	r0, r0, #7
   1bdc6:	f002 0207 	and.w	r2, r2, #7
   1bdca:	2100      	movs	r1, #0
   1bdcc:	f000 fe30 	bl	1ca30 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1bdd0:	4620      	mov	r0, r4
   1bdd2:	f7ff ff9f 	bl	1bd14 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1bdd6:	f000 fda7 	bl	1c928 <radio_is_ready>
   1bdda:	bb58      	cbnz	r0, 1be34 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1bddc:	f000 ffe2 	bl	1cda4 <radio_tmr_tifs_base_get>
   1bde0:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bde2:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bde6:	2101      	movs	r1, #1
   1bde8:	f000 0007 	and.w	r0, r0, #7
   1bdec:	f000 fd70 	bl	1c8d0 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1bdf0:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bdf4:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bdf8:	4405      	add	r5, r0
   1bdfa:	2b02      	cmp	r3, #2
   1bdfc:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1be00:	d016      	beq.n	1be30 <lll_conn_isr_tx+0x88>
		return 376;
   1be02:	2b04      	cmp	r3, #4
   1be04:	bf14      	ite	ne
   1be06:	2328      	movne	r3, #40	; 0x28
   1be08:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1be0c:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1be10:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1be14:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1be18:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1be1a:	f000 fd55 	bl	1c8c8 <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1be1e:	1a28      	subs	r0, r5, r0
   1be20:	f000 ff78 	bl	1cd14 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1be24:	4621      	mov	r1, r4
   1be26:	480a      	ldr	r0, [pc, #40]	; (1be50 <lll_conn_isr_tx+0xa8>)
}
   1be28:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1be2c:	f000 bc66 	b.w	1c6fc <radio_isr_set>
	switch (phy) {
   1be30:	2318      	movs	r3, #24
   1be32:	e7eb      	b.n	1be0c <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1be34:	4a07      	ldr	r2, [pc, #28]	; (1be54 <lll_conn_isr_tx+0xac>)
   1be36:	4908      	ldr	r1, [pc, #32]	; (1be58 <lll_conn_isr_tx+0xb0>)
   1be38:	4808      	ldr	r0, [pc, #32]	; (1be5c <lll_conn_isr_tx+0xb4>)
   1be3a:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   1be3e:	f005 fdbf 	bl	219c0 <printk>
   1be42:	4040      	eors	r0, r0
   1be44:	f380 8811 	msr	BASEPRI, r0
   1be48:	f04f 0003 	mov.w	r0, #3
   1be4c:	df02      	svc	2
   1be4e:	e7c5      	b.n	1bddc <lll_conn_isr_tx+0x34>
   1be50:	0001bfa1 	.word	0x0001bfa1
   1be54:	00028e04 	.word	0x00028e04
   1be58:	00028dc8 	.word	0x00028dc8
   1be5c:	000282a4 	.word	0x000282a4

0001be60 <lll_conn_tx_pkt_set>:
{
   1be60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be62:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   1be64:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1be68:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1be6c:	f001 0507 	and.w	r5, r1, #7
{
   1be70:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   1be72:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1be76:	4628      	mov	r0, r5
   1be78:	f000 fca6 	bl	1c7c8 <radio_phy_set>
	} else if (lll->enc_tx) {
   1be7c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1be80:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   1be82:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   1be86:	d50f      	bpl.n	1bea8 <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1be88:	1d39      	adds	r1, r7, #4
   1be8a:	f042 0201 	orr.w	r2, r2, #1
   1be8e:	b2c9      	uxtb	r1, r1
   1be90:	2008      	movs	r0, #8
   1be92:	f000 fcdf 	bl	1c854 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1be96:	4631      	mov	r1, r6
   1be98:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1be9c:	f000 ffc6 	bl	1ce2c <radio_ccm_tx_pkt_set>
}
   1bea0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1bea4:	f000 bd0a 	b.w	1c8bc <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1bea8:	b2f9      	uxtb	r1, r7
   1beaa:	2008      	movs	r0, #8
   1beac:	f042 0201 	orr.w	r2, r2, #1
   1beb0:	f000 fcd0 	bl	1c854 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1beb4:	4630      	mov	r0, r6
}
   1beb6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1beba:	f000 bcff 	b.w	1c8bc <radio_pkt_tx_set>
   1bebe:	bf00      	nop

0001bec0 <lll_conn_pdu_tx_prep>:
{
   1bec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bec4:	4604      	mov	r4, r0
   1bec6:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1bec8:	aa01      	add	r2, sp, #4
   1beca:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   1becc:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1bece:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1bed0:	f7f4 fbde 	bl	10690 <memq_peek>
	if (lll->empty || !link) {
   1bed4:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1bed8:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1beda:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1bedc:	d432      	bmi.n	1bf44 <lll_conn_pdu_tx_prep+0x84>
   1bede:	2800      	cmp	r0, #0
   1bee0:	d04e      	beq.n	1bf80 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1bee2:	9b01      	ldr	r3, [sp, #4]
   1bee4:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
   1bee8:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1beec:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1bef0:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1bef4:	b913      	cbnz	r3, 1befc <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1bef6:	786b      	ldrb	r3, [r5, #1]
   1bef8:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1befc:	b137      	cbz	r7, 1bf0c <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1befe:	f818 2007 	ldrb.w	r2, [r8, r7]
   1bf02:	2101      	movs	r1, #1
   1bf04:	f361 0201 	bfi	r2, r1, #0, #2
   1bf08:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1bf0c:	1bdb      	subs	r3, r3, r7
   1bf0e:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1bf10:	4620      	mov	r0, r4
   1bf12:	f7fd fac1 	bl	19498 <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1bf16:	786b      	ldrb	r3, [r5, #1]
   1bf18:	4283      	cmp	r3, r0
   1bf1a:	d924      	bls.n	1bf66 <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1bf1c:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1bf1e:	f818 3007 	ldrb.w	r3, [r8, r7]
   1bf22:	f043 0310 	orr.w	r3, r3, #16
   1bf26:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1bf2a:	f818 3007 	ldrb.w	r3, [r8, r7]
   1bf2e:	f36f 1347 	bfc	r3, #5, #3
   1bf32:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1bf36:	2300      	movs	r3, #0
   1bf38:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1bf3a:	f8c9 5000 	str.w	r5, [r9]
}
   1bf3e:	b003      	add	sp, #12
   1bf40:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1bf44:	f043 0304 	orr.w	r3, r3, #4
   1bf48:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1bf4c:	f000 fd20 	bl	1c990 <radio_pkt_empty_get>
   1bf50:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1bf52:	b1e6      	cbz	r6, 1bf8e <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1bf54:	7803      	ldrb	r3, [r0, #0]
   1bf56:	f043 0310 	orr.w	r3, r3, #16
   1bf5a:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1bf5c:	f8c9 5000 	str.w	r5, [r9]
}
   1bf60:	b003      	add	sp, #12
   1bf62:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1bf66:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1bf68:	6832      	ldr	r2, [r6, #0]
   1bf6a:	429a      	cmp	r2, r3
			p->md = 1U;
   1bf6c:	f818 3007 	ldrb.w	r3, [r8, r7]
   1bf70:	bf14      	ite	ne
   1bf72:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1bf76:	f36f 1304 	bfceq	r3, #4, #1
   1bf7a:	f808 3007 	strb.w	r3, [r8, r7]
   1bf7e:	e7d4      	b.n	1bf2a <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1bf80:	f043 0304 	orr.w	r3, r3, #4
   1bf84:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1bf88:	f000 fd02 	bl	1c990 <radio_pkt_empty_get>
   1bf8c:	4605      	mov	r5, r0
			p->md = 0U;
   1bf8e:	782b      	ldrb	r3, [r5, #0]
   1bf90:	f36f 1304 	bfc	r3, #4, #1
   1bf94:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1bf96:	f8c9 5000 	str.w	r5, [r9]
}
   1bf9a:	b003      	add	sp, #12
   1bf9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001bfa0 <lll_conn_isr_rx>:
{
   1bfa0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1bfa2:	b083      	sub	sp, #12
   1bfa4:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1bfa6:	f000 fcc9 	bl	1c93c <radio_is_done>
	if (trx_done) {
   1bfaa:	b2c0      	uxtb	r0, r0
   1bfac:	b950      	cbnz	r0, 1bfc4 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1bfae:	f7fe fff9 	bl	1afa4 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1bfb2:	48b1      	ldr	r0, [pc, #708]	; (1c278 <lll_conn_isr_rx+0x2d8>)
   1bfb4:	4621      	mov	r1, r4
   1bfb6:	f000 fba1 	bl	1c6fc <radio_isr_set>
}
   1bfba:	b003      	add	sp, #12
   1bfbc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   1bfc0:	f000 bc92 	b.w	1c8e8 <radio_disable>
		crc_ok = radio_crc_is_valid();
   1bfc4:	f000 fcda 	bl	1c97c <radio_crc_is_valid>
   1bfc8:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1bfca:	f000 fda7 	bl	1cb1c <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1bfce:	f7fe ffe9 	bl	1afa4 <lll_isr_rx_status_reset>
	trx_cnt++;
   1bfd2:	4aaa      	ldr	r2, [pc, #680]	; (1c27c <lll_conn_isr_rx+0x2dc>)
   1bfd4:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bfd6:	2001      	movs	r0, #1
	trx_cnt++;
   1bfd8:	4403      	add	r3, r0
   1bfda:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1bfdc:	f7f8 fa70 	bl	144c0 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1bfe0:	4606      	mov	r6, r0
   1bfe2:	2800      	cmp	r0, #0
   1bfe4:	f000 80bd 	beq.w	1c162 <lll_conn_isr_rx+0x1c2>
	if (crc_ok) {
   1bfe8:	2d00      	cmp	r5, #0
   1bfea:	d155      	bne.n	1c098 <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1bfec:	4ba4      	ldr	r3, [pc, #656]	; (1c280 <lll_conn_isr_rx+0x2e0>)
   1bfee:	781f      	ldrb	r7, [r3, #0]
   1bff0:	2f00      	cmp	r7, #0
   1bff2:	f040 80a5 	bne.w	1c140 <lll_conn_isr_rx+0x1a0>
		crc_expire--;
   1bff6:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bff8:	a901      	add	r1, sp, #4
   1bffa:	4620      	mov	r0, r4
		crc_expire--;
   1bffc:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1bffe:	f7ff ff5f 	bl	1bec0 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c002:	2096      	movs	r0, #150	; 0x96
   1c004:	f000 fde6 	bl	1cbd4 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1c008:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c00c:	f000 0007 	and.w	r0, r0, #7
   1c010:	f000 fcc6 	bl	1c9a0 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1c014:	489b      	ldr	r0, [pc, #620]	; (1c284 <lll_conn_isr_rx+0x2e4>)
   1c016:	4621      	mov	r1, r4
   1c018:	f000 fb70 	bl	1c6fc <radio_isr_set>
		radio_tmr_end_capture();
   1c01c:	f000 feb4 	bl	1cd88 <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1c020:	9901      	ldr	r1, [sp, #4]
   1c022:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	pdu_data_tx->nesn = lll->nesn;
   1c026:	780b      	ldrb	r3, [r1, #0]
   1c028:	f023 000c 	bic.w	r0, r3, #12
   1c02c:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c030:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1c032:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1c036:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1c03a:	4303      	orrs	r3, r0
   1c03c:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c03e:	4620      	mov	r0, r4
   1c040:	f7ff ff0e 	bl	1be60 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c044:	f000 fc70 	bl	1c928 <radio_is_ready>
   1c048:	2800      	cmp	r0, #0
   1c04a:	f040 80b9 	bne.w	1c1c0 <lll_conn_isr_rx+0x220>
	if (!radio_tmr_aa_restore()) {
   1c04e:	f000 fe8f 	bl	1cd70 <radio_tmr_aa_restore>
   1c052:	b170      	cbz	r0, 1c072 <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   1c054:	b19d      	cbz	r5, 1c07e <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c056:	8a20      	ldrh	r0, [r4, #16]
   1c058:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c05c:	4298      	cmp	r0, r3
   1c05e:	f000 80bd 	beq.w	1c1dc <lll_conn_isr_rx+0x23c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c062:	4629      	mov	r1, r5
   1c064:	f7fd f8ea 	bl	1923c <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1c068:	b95f      	cbnz	r7, 1c082 <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   1c06a:	f7f8 fa6d 	bl	14548 <ull_rx_sched>
}
   1c06e:	b003      	add	sp, #12
   1c070:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1c072:	f000 fe71 	bl	1cd58 <radio_tmr_aa_get>
   1c076:	f000 fe75 	bl	1cd64 <radio_tmr_aa_save>
	if (tx_release) {
   1c07a:	2d00      	cmp	r5, #0
   1c07c:	d1eb      	bne.n	1c056 <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   1c07e:	2f00      	cmp	r7, #0
   1c080:	d0f5      	beq.n	1c06e <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   1c082:	f7f8 fa3b 	bl	144fc <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1c086:	2303      	movs	r3, #3
   1c088:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1c08a:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c08c:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1c08e:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c090:	4631      	mov	r1, r6
   1c092:	f7f8 fa49 	bl	14528 <ull_rx_put>
	if (is_ull_rx) {
   1c096:	e7e8      	b.n	1c06a <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   1c098:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c09c:	7f32      	ldrb	r2, [r6, #28]
   1c09e:	f003 0101 	and.w	r1, r3, #1
   1c0a2:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1c0a6:	4288      	cmp	r0, r1
   1c0a8:	d06b      	beq.n	1c182 <lll_conn_isr_rx+0x1e2>
		if (lll->role) {
   1c0aa:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   1c0ae:	f081 0101 	eor.w	r1, r1, #1
   1c0b2:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1c0b6:	2a00      	cmp	r2, #0
		lll->sn++;
   1c0b8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1c0bc:	da05      	bge.n	1c0ca <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   1c0be:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c0c2:	f043 0301 	orr.w	r3, r3, #1
   1c0c6:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   1c0ca:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c0ce:	075a      	lsls	r2, r3, #29
   1c0d0:	f100 8093 	bmi.w	1c1fa <lll_conn_isr_rx+0x25a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1c0d4:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1c0d8:	aa01      	add	r2, sp, #4
   1c0da:	f7f4 fad9 	bl	10690 <memq_peek>
		if (link) {
   1c0de:	4605      	mov	r5, r0
   1c0e0:	2800      	cmp	r0, #0
   1c0e2:	f000 8097 	beq.w	1c214 <lll_conn_isr_rx+0x274>
					       lll->packet_tx_head_offset);
   1c0e6:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   1c0ea:	9b01      	ldr	r3, [sp, #4]
   1c0ec:	4413      	add	r3, r2
   1c0ee:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1c0f0:	b171      	cbz	r1, 1c110 <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   1c0f2:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c0f6:	06df      	lsls	r7, r3, #27
   1c0f8:	d50a      	bpl.n	1c110 <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   1c0fa:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1c0fe:	3301      	adds	r3, #1
   1c100:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   1c104:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1c108:	f143 0300 	adc.w	r3, r3, #0
   1c10c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if (offset < lll->packet_tx_head_len) {
   1c110:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1c114:	440a      	add	r2, r1
   1c116:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1c118:	429a      	cmp	r2, r3
   1c11a:	d379      	bcc.n	1c210 <lll_conn_isr_rx+0x270>
			} else if (offset == lll->packet_tx_head_len) {
   1c11c:	d17a      	bne.n	1c214 <lll_conn_isr_rx+0x274>
				lll->packet_tx_head_len = 0;
   1c11e:	2200      	movs	r2, #0
   1c120:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1c124:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1c126:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1c12a:	f7f4 fab9 	bl	106a0 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1c12e:	9b01      	ldr	r3, [sp, #4]
   1c130:	681a      	ldr	r2, [r3, #0]
   1c132:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1c134:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1c136:	9d01      	ldr	r5, [sp, #4]
   1c138:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c13c:	7f32      	ldrb	r2, [r6, #28]
   1c13e:	e021      	b.n	1c184 <lll_conn_isr_rx+0x1e4>
		crc_expire--;
   1c140:	3f01      	subs	r7, #1
   1c142:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c144:	a901      	add	r1, sp, #4
   1c146:	4620      	mov	r0, r4
		crc_expire--;
   1c148:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c14a:	f7ff feb9 	bl	1bec0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c14e:	2f00      	cmp	r7, #0
   1c150:	f040 80dd 	bne.w	1c30e <lll_conn_isr_rx+0x36e>
		radio_isr_set(isr_done, param);
   1c154:	4848      	ldr	r0, [pc, #288]	; (1c278 <lll_conn_isr_rx+0x2d8>)
   1c156:	4621      	mov	r1, r4
   1c158:	f000 fad0 	bl	1c6fc <radio_isr_set>
			radio_switch_complete_and_disable();
   1c15c:	f000 fcc8 	bl	1caf0 <radio_switch_complete_and_disable>
   1c160:	e75e      	b.n	1c020 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   1c162:	4a49      	ldr	r2, [pc, #292]	; (1c288 <lll_conn_isr_rx+0x2e8>)
   1c164:	4949      	ldr	r1, [pc, #292]	; (1c28c <lll_conn_isr_rx+0x2ec>)
   1c166:	484a      	ldr	r0, [pc, #296]	; (1c290 <lll_conn_isr_rx+0x2f0>)
   1c168:	23d1      	movs	r3, #209	; 0xd1
   1c16a:	f005 fc29 	bl	219c0 <printk>
   1c16e:	4040      	eors	r0, r0
   1c170:	f380 8811 	msr	BASEPRI, r0
   1c174:	f04f 0003 	mov.w	r0, #3
   1c178:	df02      	svc	2
	if (crc_ok) {
   1c17a:	2d00      	cmp	r5, #0
   1c17c:	f43f af36 	beq.w	1bfec <lll_conn_isr_rx+0x4c>
   1c180:	e78a      	b.n	1c098 <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1c182:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c184:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c188:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1c18c:	429a      	cmp	r2, r3
   1c18e:	d046      	beq.n	1c21e <lll_conn_isr_rx+0x27e>
	is_rx_enqueue = 0U;
   1c190:	2700      	movs	r7, #0
		crc_expire = 0U;
   1c192:	4a3b      	ldr	r2, [pc, #236]	; (1c280 <lll_conn_isr_rx+0x2e0>)
		crc_valid = 1U;
   1c194:	4b3f      	ldr	r3, [pc, #252]	; (1c294 <lll_conn_isr_rx+0x2f4>)
		crc_expire = 0U;
   1c196:	2100      	movs	r1, #0
   1c198:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c19a:	4620      	mov	r0, r4
		crc_valid = 1U;
   1c19c:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c19e:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1c1a0:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c1a2:	f7ff fe8d 	bl	1bec0 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c1a6:	7f33      	ldrb	r3, [r6, #28]
   1c1a8:	06d9      	lsls	r1, r3, #27
   1c1aa:	f53f af2a 	bmi.w	1c002 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1c1ae:	9b01      	ldr	r3, [sp, #4]
   1c1b0:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c1b2:	06d2      	lsls	r2, r2, #27
   1c1b4:	f53f af25 	bmi.w	1c002 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1c1b8:	785b      	ldrb	r3, [r3, #1]
   1c1ba:	2b00      	cmp	r3, #0
   1c1bc:	d0ca      	beq.n	1c154 <lll_conn_isr_rx+0x1b4>
   1c1be:	e720      	b.n	1c002 <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   1c1c0:	4a31      	ldr	r2, [pc, #196]	; (1c288 <lll_conn_isr_rx+0x2e8>)
   1c1c2:	4935      	ldr	r1, [pc, #212]	; (1c298 <lll_conn_isr_rx+0x2f8>)
   1c1c4:	4832      	ldr	r0, [pc, #200]	; (1c290 <lll_conn_isr_rx+0x2f0>)
   1c1c6:	f240 133d 	movw	r3, #317	; 0x13d
   1c1ca:	f005 fbf9 	bl	219c0 <printk>
   1c1ce:	4040      	eors	r0, r0
   1c1d0:	f380 8811 	msr	BASEPRI, r0
   1c1d4:	f04f 0003 	mov.w	r0, #3
   1c1d8:	df02      	svc	2
   1c1da:	e738      	b.n	1c04e <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c1dc:	4a2a      	ldr	r2, [pc, #168]	; (1c288 <lll_conn_isr_rx+0x2e8>)
   1c1de:	492f      	ldr	r1, [pc, #188]	; (1c29c <lll_conn_isr_rx+0x2fc>)
   1c1e0:	482b      	ldr	r0, [pc, #172]	; (1c290 <lll_conn_isr_rx+0x2f0>)
   1c1e2:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   1c1e6:	f005 fbeb 	bl	219c0 <printk>
   1c1ea:	4040      	eors	r0, r0
   1c1ec:	f380 8811 	msr	BASEPRI, r0
   1c1f0:	f04f 0003 	mov.w	r0, #3
   1c1f4:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c1f6:	8a20      	ldrh	r0, [r4, #16]
   1c1f8:	e733      	b.n	1c062 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   1c1fa:	f36f 0382 	bfc	r3, #2, #1
   1c1fe:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1c202:	f000 fbc5 	bl	1c990 <radio_pkt_empty_get>
	tx_release = NULL;
   1c206:	2500      	movs	r5, #0
   1c208:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c20c:	7f32      	ldrb	r2, [r6, #28]
   1c20e:	e7b9      	b.n	1c184 <lll_conn_isr_rx+0x1e4>
				lll->packet_tx_head_offset = offset;
   1c210:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   1c214:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c218:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1c21a:	2500      	movs	r5, #0
   1c21c:	e7b2      	b.n	1c184 <lll_conn_isr_rx+0x1e4>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1c21e:	2003      	movs	r0, #3
   1c220:	f7f8 f94e 	bl	144c0 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c224:	2800      	cmp	r0, #0
   1c226:	d0b3      	beq.n	1c190 <lll_conn_isr_rx+0x1f0>
		lll->nesn++;
   1c228:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c22c:	f083 0302 	eor.w	r3, r3, #2
   1c230:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1c234:	7f73      	ldrb	r3, [r6, #29]
   1c236:	2b00      	cmp	r3, #0
   1c238:	d0aa      	beq.n	1c190 <lll_conn_isr_rx+0x1f0>
			if (lll->enc_rx) {
   1c23a:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c23e:	0718      	lsls	r0, r3, #28
   1c240:	d401      	bmi.n	1c246 <lll_conn_isr_rx+0x2a6>
			*is_rx_enqueue = 1U;
   1c242:	2701      	movs	r7, #1
   1c244:	e7a5      	b.n	1c192 <lll_conn_isr_rx+0x1f2>
				done = radio_ccm_is_done();
   1c246:	f000 fe19 	bl	1ce7c <radio_ccm_is_done>
				LL_ASSERT(done);
   1c24a:	2800      	cmp	r0, #0
   1c24c:	d051      	beq.n	1c2f2 <lll_conn_isr_rx+0x352>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1c24e:	f000 fe37 	bl	1cec0 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1c252:	2800      	cmp	r0, #0
   1c254:	d13d      	bne.n	1c2d2 <lll_conn_isr_rx+0x332>
				    lll->ccm_rx.counter == 0 &&
   1c256:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1c25a:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1c25e:	4313      	orrs	r3, r2
   1c260:	d104      	bne.n	1c26c <lll_conn_isr_rx+0x2cc>
				    (pdu_data_rx->ll_id ==
   1c262:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1c264:	f003 0303 	and.w	r3, r3, #3
   1c268:	2b03      	cmp	r3, #3
   1c26a:	d01b      	beq.n	1c2a4 <lll_conn_isr_rx+0x304>
					mic_state = LLL_CONN_MIC_FAIL;
   1c26c:	4b0c      	ldr	r3, [pc, #48]	; (1c2a0 <lll_conn_isr_rx+0x300>)
   1c26e:	2202      	movs	r2, #2
   1c270:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1c272:	2700      	movs	r7, #0
   1c274:	e6eb      	b.n	1c04e <lll_conn_isr_rx+0xae>
   1c276:	bf00      	nop
   1c278:	0001bbc5 	.word	0x0001bbc5
   1c27c:	2000ed72 	.word	0x2000ed72
   1c280:	2000f314 	.word	0x2000f314
   1c284:	0001bda9 	.word	0x0001bda9
   1c288:	00028e04 	.word	0x00028e04
   1c28c:	00028e50 	.word	0x00028e50
   1c290:	000282a4 	.word	0x000282a4
   1c294:	2000f315 	.word	0x2000f315
   1c298:	00028dc8 	.word	0x00028dc8
   1c29c:	00028e60 	.word	0x00028e60
   1c2a0:	2000f316 	.word	0x2000f316
						radio_pkt_scratch_get();
   1c2a4:	f000 fb78 	bl	1c998 <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1c2a8:	7843      	ldrb	r3, [r0, #1]
   1c2aa:	2b1b      	cmp	r3, #27
						radio_pkt_scratch_get();
   1c2ac:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1c2ae:	d8dd      	bhi.n	1c26c <lll_conn_isr_rx+0x2cc>
						memcpy(pdu_data_rx,
   1c2b0:	3303      	adds	r3, #3
   1c2b2:	b2da      	uxtb	r2, r3
   1c2b4:	f106 001c 	add.w	r0, r6, #28
   1c2b8:	f008 f824 	bl	24304 <memcpy>
						lll->ccm_rx.counter--;
   1c2bc:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1c2c0:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1c2c4:	3b01      	subs	r3, #1
   1c2c6:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1c2ca:	f142 33ff 	adc.w	r3, r2, #4294967295
   1c2ce:	f8c4 3077 	str.w	r3, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1c2d2:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1c2d6:	4a0f      	ldr	r2, [pc, #60]	; (1c314 <lll_conn_isr_rx+0x374>)
				lll->ccm_rx.counter++;
   1c2d8:	3301      	adds	r3, #1
   1c2da:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1c2de:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
						lll->ccm_rx.counter--;
   1c2e2:	f104 0173 	add.w	r1, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1c2e6:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   1c2ea:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1c2ec:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1c2ee:	7017      	strb	r7, [r2, #0]
		if (err) {
   1c2f0:	e74f      	b.n	1c192 <lll_conn_isr_rx+0x1f2>
				LL_ASSERT(done);
   1c2f2:	4a09      	ldr	r2, [pc, #36]	; (1c318 <lll_conn_isr_rx+0x378>)
   1c2f4:	4909      	ldr	r1, [pc, #36]	; (1c31c <lll_conn_isr_rx+0x37c>)
   1c2f6:	480a      	ldr	r0, [pc, #40]	; (1c320 <lll_conn_isr_rx+0x380>)
   1c2f8:	f44f 7344 	mov.w	r3, #784	; 0x310
   1c2fc:	f005 fb60 	bl	219c0 <printk>
   1c300:	4040      	eors	r0, r0
   1c302:	f380 8811 	msr	BASEPRI, r0
   1c306:	f04f 0003 	mov.w	r0, #3
   1c30a:	df02      	svc	2
   1c30c:	e79f      	b.n	1c24e <lll_conn_isr_rx+0x2ae>
	is_rx_enqueue = 0U;
   1c30e:	462f      	mov	r7, r5
   1c310:	e677      	b.n	1c002 <lll_conn_isr_rx+0x62>
   1c312:	bf00      	nop
   1c314:	2000f316 	.word	0x2000f316
   1c318:	00028e04 	.word	0x00028e04
   1c31c:	00028e58 	.word	0x00028e58
   1c320:	000282a4 	.word	0x000282a4

0001c324 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1c324:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1c328:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1c32a:	8a22      	ldrh	r2, [r4, #16]
   1c32c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c330:	429a      	cmp	r2, r3
{
   1c332:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1c334:	f000 80c3 	beq.w	1c4be <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1c338:	4605      	mov	r5, r0
   1c33a:	f7ff fcab 	bl	1bc94 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1c33e:	8ae3      	ldrh	r3, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1c340:	8b60      	ldrh	r0, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1c342:	1e5a      	subs	r2, r3, #1

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1c344:	4403      	add	r3, r0
   1c346:	8363      	strh	r3, [r4, #26]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;
   1c348:	2300      	movs	r3, #0
   1c34a:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   1c34c:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1c350:	b292      	uxth	r2, r2
	if (lll->data_chan_sel) {
   1c352:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1c354:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1c356:	f100 808f 	bmi.w	1c478 <prepare_cb+0x154>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1c35a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c35e:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1c362:	9300      	str	r3, [sp, #0]
   1c364:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1c368:	f104 031c 	add.w	r3, r4, #28
   1c36c:	f7fd f9e0 	bl	19730 <lll_chan_sel_1>
   1c370:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1c372:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1c376:	441a      	add	r2, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1c378:	e9d4 130e 	ldrd	r1, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1c37c:	2600      	movs	r6, #0
	lll->slave.window_size_event_us +=
   1c37e:	440b      	add	r3, r1
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1c380:	e9c4 630e 	strd	r6, r3, [r4, #56]	; 0x38
	    lll->slave.window_widening_max_us) {
   1c384:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	lll->slave.window_widening_prepare_us = 0;
   1c386:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_widening_event_us =
   1c388:	4293      	cmp	r3, r2
   1c38a:	bf28      	it	cs
   1c38c:	4613      	movcs	r3, r2
   1c38e:	6363      	str	r3, [r4, #52]	; 0x34

	/* Start setting up Radio h/w */
	radio_reset();
   1c390:	f000 f9f6 	bl	1c780 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c394:	4630      	mov	r0, r6
   1c396:	f000 fa27 	bl	1c7e8 <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1c39a:	4620      	mov	r0, r4
   1c39c:	f7ff fcba 	bl	1bd14 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1c3a0:	f104 0008 	add.w	r0, r4, #8
   1c3a4:	f000 fa3e 	bl	1c824 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c3a8:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c3aa:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c3ac:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c3ae:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1c3b2:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c3b4:	f240 605b 	movw	r0, #1627	; 0x65b
   1c3b8:	4319      	orrs	r1, r3
   1c3ba:	f000 fad3 	bl	1c964 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1c3be:	4638      	mov	r0, r7
   1c3c0:	f7fe fda4 	bl	1af0c <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1c3c4:	4621      	mov	r1, r4
   1c3c6:	484a      	ldr	r0, [pc, #296]	; (1c4f0 <prepare_cb+0x1cc>)
   1c3c8:	f000 f998 	bl	1c6fc <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1c3cc:	2096      	movs	r0, #150	; 0x96
   1c3ce:	f000 fc01 	bl	1cbd4 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1c3d2:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1c3d6:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c3da:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1c3de:	4631      	mov	r1, r6
   1c3e0:	f002 0207 	and.w	r2, r2, #7
   1c3e4:	f000 0007 	and.w	r0, r0, #7
   1c3e8:	f000 fb22 	bl	1ca30 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1c3ec:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1c3f0:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1c3f2:	4640      	mov	r0, r8
   1c3f4:	f7fe fd6e 	bl	1aed4 <lll_evt_offset_get>
   1c3f8:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1c3fa:	686a      	ldr	r2, [r5, #4]
   1c3fc:	f107 0109 	add.w	r1, r7, #9
   1c400:	4630      	mov	r0, r6
   1c402:	f000 fbf3 	bl	1cbec <radio_tmr_start>
   1c406:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1c408:	f000 fc92 	bl	1cd30 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1c40c:	4630      	mov	r0, r6
   1c40e:	f000 fca9 	bl	1cd64 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1c412:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c414:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   1c418:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c41a:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c41e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c422:	2101      	movs	r1, #1
   1c424:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   1c428:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c42a:	f000 fa4f 	bl	1c8cc <radio_rx_ready_delay_get>
   1c42e:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1c430:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c434:	f000 0007 	and.w	r0, r0, #7
   1c438:	2802      	cmp	r0, #2
   1c43a:	d03e      	beq.n	1c4ba <prepare_cb+0x196>
		return 40;
   1c43c:	2804      	cmp	r0, #4
   1c43e:	bf0c      	ite	eq
   1c440:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1c444:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c446:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1c448:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c44a:	f000 fa41 	bl	1c8d0 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1c44e:	4428      	add	r0, r5
   1c450:	f000 fc60 	bl	1cd14 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1c454:	8a21      	ldrh	r1, [r4, #16]
   1c456:	3103      	adds	r1, #3
   1c458:	463a      	mov	r2, r7
   1c45a:	b2c9      	uxtb	r1, r1
   1c45c:	4640      	mov	r0, r8
   1c45e:	f7fe fd43 	bl	1aee8 <lll_preempt_calc>
   1c462:	b1a0      	cbz	r0, 1c48e <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1c464:	4823      	ldr	r0, [pc, #140]	; (1c4f4 <prepare_cb+0x1d0>)
   1c466:	4621      	mov	r1, r4
   1c468:	f000 f948 	bl	1c6fc <radio_isr_set>
		radio_disable();
   1c46c:	f000 fa3c 	bl	1c8e8 <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1c470:	2000      	movs	r0, #0
   1c472:	b002      	add	sp, #8
   1c474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1c478:	4410      	add	r0, r2
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1c47a:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1c47c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c480:	f104 021c 	add.w	r2, r4, #28
   1c484:	b280      	uxth	r0, r0
   1c486:	f7fd f993 	bl	197b0 <lll_chan_sel_2>
   1c48a:	4607      	mov	r7, r0
   1c48c:	e771      	b.n	1c372 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   1c48e:	4620      	mov	r0, r4
   1c490:	f7fe fcc6 	bl	1ae20 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c494:	2800      	cmp	r0, #0
   1c496:	d0eb      	beq.n	1c470 <prepare_cb+0x14c>
   1c498:	4a17      	ldr	r2, [pc, #92]	; (1c4f8 <prepare_cb+0x1d4>)
   1c49a:	4918      	ldr	r1, [pc, #96]	; (1c4fc <prepare_cb+0x1d8>)
   1c49c:	4818      	ldr	r0, [pc, #96]	; (1c500 <prepare_cb+0x1dc>)
   1c49e:	f240 1313 	movw	r3, #275	; 0x113
   1c4a2:	f005 fa8d 	bl	219c0 <printk>
   1c4a6:	4040      	eors	r0, r0
   1c4a8:	f380 8811 	msr	BASEPRI, r0
   1c4ac:	f04f 0003 	mov.w	r0, #3
   1c4b0:	df02      	svc	2
}
   1c4b2:	2000      	movs	r0, #0
   1c4b4:	b002      	add	sp, #8
   1c4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1c4ba:	2318      	movs	r3, #24
   1c4bc:	e7c3      	b.n	1c446 <prepare_cb+0x122>
		err = lll_hfclock_off();
   1c4be:	f7fe fe43 	bl	1b148 <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1c4c2:	2800      	cmp	r0, #0
   1c4c4:	db06      	blt.n	1c4d4 <prepare_cb+0x1b0>
		lll_done(NULL);
   1c4c6:	2000      	movs	r0, #0
   1c4c8:	f7fe fcac 	bl	1ae24 <lll_done>
}
   1c4cc:	2000      	movs	r0, #0
   1c4ce:	b002      	add	sp, #8
   1c4d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1c4d4:	4a08      	ldr	r2, [pc, #32]	; (1c4f8 <prepare_cb+0x1d4>)
   1c4d6:	490b      	ldr	r1, [pc, #44]	; (1c504 <prepare_cb+0x1e0>)
   1c4d8:	4809      	ldr	r0, [pc, #36]	; (1c500 <prepare_cb+0x1dc>)
   1c4da:	237d      	movs	r3, #125	; 0x7d
   1c4dc:	f005 fa70 	bl	219c0 <printk>
   1c4e0:	4040      	eors	r0, r0
   1c4e2:	f380 8811 	msr	BASEPRI, r0
   1c4e6:	f04f 0003 	mov.w	r0, #3
   1c4ea:	df02      	svc	2
   1c4ec:	e7eb      	b.n	1c4c6 <prepare_cb+0x1a2>
   1c4ee:	bf00      	nop
   1c4f0:	0001bfa1 	.word	0x0001bfa1
   1c4f4:	0001b041 	.word	0x0001b041
   1c4f8:	00028e8c 	.word	0x00028e8c
   1c4fc:	00028540 	.word	0x00028540
   1c500:	000282a4 	.word	0x000282a4
   1c504:	00028d40 	.word	0x00028d40

0001c508 <lll_slave_prepare>:
{
   1c508:	b510      	push	{r4, lr}
   1c50a:	b082      	sub	sp, #8
   1c50c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c50e:	f7fe fe03 	bl	1b118 <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c512:	2800      	cmp	r0, #0
   1c514:	db2a      	blt.n	1c56c <lll_slave_prepare+0x64>
	lll = p->param;
   1c516:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1c518:	8923      	ldrh	r3, [r4, #8]
	lll->slave.window_widening_prepare_us +=
   1c51a:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1c51c:	f8b1 c016 	ldrh.w	ip, [r1, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1c520:	6a88      	ldr	r0, [r1, #40]	; 0x28
	elapsed = p->lazy + 1;
   1c522:	3301      	adds	r3, #1
   1c524:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1c526:	fb00 2003 	mla	r0, r0, r3, r2
	lll->latency_prepare += elapsed;
   1c52a:	4463      	add	r3, ip
   1c52c:	82cb      	strh	r3, [r1, #22]
	    lll->slave.window_widening_max_us) {
   1c52e:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c530:	4a15      	ldr	r2, [pc, #84]	; (1c588 <lll_slave_prepare+0x80>)
		lll->slave.window_widening_prepare_us =
   1c532:	4283      	cmp	r3, r0
   1c534:	bf28      	it	cs
   1c536:	4603      	movcs	r3, r0
   1c538:	630b      	str	r3, [r1, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c53a:	4814      	ldr	r0, [pc, #80]	; (1c58c <lll_slave_prepare+0x84>)
   1c53c:	4914      	ldr	r1, [pc, #80]	; (1c590 <lll_slave_prepare+0x88>)
   1c53e:	9400      	str	r4, [sp, #0]
   1c540:	2300      	movs	r3, #0
   1c542:	f7fe fbe1 	bl	1ad08 <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c546:	b108      	cbz	r0, 1c54c <lll_slave_prepare+0x44>
   1c548:	3044      	adds	r0, #68	; 0x44
   1c54a:	d101      	bne.n	1c550 <lll_slave_prepare+0x48>
}
   1c54c:	b002      	add	sp, #8
   1c54e:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c550:	4a10      	ldr	r2, [pc, #64]	; (1c594 <lll_slave_prepare+0x8c>)
   1c552:	4911      	ldr	r1, [pc, #68]	; (1c598 <lll_slave_prepare+0x90>)
   1c554:	4811      	ldr	r0, [pc, #68]	; (1c59c <lll_slave_prepare+0x94>)
   1c556:	235f      	movs	r3, #95	; 0x5f
   1c558:	f005 fa32 	bl	219c0 <printk>
   1c55c:	4040      	eors	r0, r0
   1c55e:	f380 8811 	msr	BASEPRI, r0
   1c562:	f04f 0003 	mov.w	r0, #3
   1c566:	df02      	svc	2
}
   1c568:	b002      	add	sp, #8
   1c56a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1c56c:	4a09      	ldr	r2, [pc, #36]	; (1c594 <lll_slave_prepare+0x8c>)
   1c56e:	490c      	ldr	r1, [pc, #48]	; (1c5a0 <lll_slave_prepare+0x98>)
   1c570:	480a      	ldr	r0, [pc, #40]	; (1c59c <lll_slave_prepare+0x94>)
   1c572:	2348      	movs	r3, #72	; 0x48
   1c574:	f005 fa24 	bl	219c0 <printk>
   1c578:	4040      	eors	r0, r0
   1c57a:	f380 8811 	msr	BASEPRI, r0
   1c57e:	f04f 0003 	mov.w	r0, #3
   1c582:	df02      	svc	2
   1c584:	e7c7      	b.n	1c516 <lll_slave_prepare+0xe>
   1c586:	bf00      	nop
   1c588:	0001c325 	.word	0x0001c325
   1c58c:	0001aecd 	.word	0x0001aecd
   1c590:	0001bcbd 	.word	0x0001bcbd
   1c594:	00028e8c 	.word	0x00028e8c
   1c598:	00028de0 	.word	0x00028de0
   1c59c:	000282a4 	.word	0x000282a4
   1c5a0:	00028d40 	.word	0x00028d40

0001c5a4 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1c5a4:	4b05      	ldr	r3, [pc, #20]	; (1c5bc <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1c5a6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c5aa:	2100      	movs	r1, #0
   1c5ac:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c5b0:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1c5b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1c5b8:	4770      	bx	lr
   1c5ba:	bf00      	nop
   1c5bc:	4000b000 	.word	0x4000b000

0001c5c0 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1c5c0:	4b05      	ldr	r3, [pc, #20]	; (1c5d8 <cntr_start+0x18>)
   1c5c2:	7818      	ldrb	r0, [r3, #0]
   1c5c4:	1c42      	adds	r2, r0, #1
   1c5c6:	701a      	strb	r2, [r3, #0]
   1c5c8:	b918      	cbnz	r0, 1c5d2 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c5ca:	4b04      	ldr	r3, [pc, #16]	; (1c5dc <cntr_start+0x1c>)
   1c5cc:	2201      	movs	r2, #1
   1c5ce:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1c5d0:	4770      	bx	lr
		return 1;
   1c5d2:	2001      	movs	r0, #1
}
   1c5d4:	4770      	bx	lr
   1c5d6:	bf00      	nop
   1c5d8:	2000f317 	.word	0x2000f317
   1c5dc:	4000b000 	.word	0x4000b000

0001c5e0 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1c5e0:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1c5e2:	4c0d      	ldr	r4, [pc, #52]	; (1c618 <cntr_stop+0x38>)
   1c5e4:	7820      	ldrb	r0, [r4, #0]
   1c5e6:	b148      	cbz	r0, 1c5fc <cntr_stop+0x1c>

	if (--_refcount) {
   1c5e8:	3801      	subs	r0, #1
   1c5ea:	b2c0      	uxtb	r0, r0
   1c5ec:	7020      	strb	r0, [r4, #0]
   1c5ee:	b918      	cbnz	r0, 1c5f8 <cntr_stop+0x18>
   1c5f0:	4b0a      	ldr	r3, [pc, #40]	; (1c61c <cntr_stop+0x3c>)
   1c5f2:	2201      	movs	r2, #1
   1c5f4:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1c5f6:	bd10      	pop	{r4, pc}
		return 1;
   1c5f8:	2001      	movs	r0, #1
}
   1c5fa:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1c5fc:	4a08      	ldr	r2, [pc, #32]	; (1c620 <cntr_stop+0x40>)
   1c5fe:	4909      	ldr	r1, [pc, #36]	; (1c624 <cntr_stop+0x44>)
   1c600:	4809      	ldr	r0, [pc, #36]	; (1c628 <cntr_stop+0x48>)
   1c602:	232d      	movs	r3, #45	; 0x2d
   1c604:	f005 f9dc 	bl	219c0 <printk>
   1c608:	4040      	eors	r0, r0
   1c60a:	f380 8811 	msr	BASEPRI, r0
   1c60e:	f04f 0003 	mov.w	r0, #3
   1c612:	df02      	svc	2
	if (--_refcount) {
   1c614:	7820      	ldrb	r0, [r4, #0]
   1c616:	e7e7      	b.n	1c5e8 <cntr_stop+0x8>
   1c618:	2000f317 	.word	0x2000f317
   1c61c:	4000b000 	.word	0x4000b000
   1c620:	00028eec 	.word	0x00028eec
   1c624:	00028f38 	.word	0x00028f38
   1c628:	000282a4 	.word	0x000282a4

0001c62c <cntr_cnt_get>:
     return p_reg->COUNTER;
   1c62c:	4b01      	ldr	r3, [pc, #4]	; (1c634 <cntr_cnt_get+0x8>)
   1c62e:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1c632:	4770      	bx	lr
   1c634:	4000b000 	.word	0x4000b000

0001c638 <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1c638:	4b02      	ldr	r3, [pc, #8]	; (1c644 <cntr_cmp_set+0xc>)
   1c63a:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c63e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1c642:	4770      	bx	lr
   1c644:	4000b000 	.word	0x4000b000

0001c648 <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c648:	4b12      	ldr	r3, [pc, #72]	; (1c694 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1c64a:	b430      	push	{r4, r5}
   1c64c:	2101      	movs	r1, #1
   1c64e:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1c650:	2000      	movs	r0, #0
   1c652:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c654:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1c658:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1c65c:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1c660:	6019      	str	r1, [r3, #0]
}
   1c662:	e005      	b.n	1c670 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c664:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c668:	b932      	cbnz	r2, 1c678 <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1c66a:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c66e:	b11a      	cbz	r2, 1c678 <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c670:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c674:	2a00      	cmp	r2, #0
   1c676:	d0f5      	beq.n	1c664 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c678:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1c67a:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c67e:	2a00      	cmp	r2, #0
   1c680:	d1e7      	bne.n	1c652 <do_ecb+0xa>
   1c682:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1c686:	2d00      	cmp	r5, #0
   1c688:	d0e3      	beq.n	1c652 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1c68a:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1c68c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c690:	4770      	bx	lr
   1c692:	bf00      	nop
   1c694:	4000e000 	.word	0x4000e000

0001c698 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1c698:	b570      	push	{r4, r5, r6, lr}
   1c69a:	b08c      	sub	sp, #48	; 0x30
   1c69c:	460e      	mov	r6, r1
   1c69e:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c6a0:	4601      	mov	r1, r0
   1c6a2:	2210      	movs	r2, #16
   1c6a4:	4668      	mov	r0, sp
{
   1c6a6:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c6a8:	f7f3 ffc0 	bl	1062c <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1c6ac:	2210      	movs	r2, #16
   1c6ae:	eb0d 0002 	add.w	r0, sp, r2
   1c6b2:	4631      	mov	r1, r6
   1c6b4:	f7f3 ffba 	bl	1062c <mem_rcopy>

	do_ecb(&ecb);
   1c6b8:	4668      	mov	r0, sp
   1c6ba:	f7ff ffc5 	bl	1c648 <do_ecb>

	if (cipher_text_le) {
   1c6be:	b125      	cbz	r5, 1c6ca <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1c6c0:	2210      	movs	r2, #16
   1c6c2:	a908      	add	r1, sp, #32
   1c6c4:	4628      	mov	r0, r5
   1c6c6:	f7f3 ffb1 	bl	1062c <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1c6ca:	b124      	cbz	r4, 1c6d6 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1c6cc:	2210      	movs	r2, #16
   1c6ce:	a908      	add	r1, sp, #32
   1c6d0:	4620      	mov	r0, r4
   1c6d2:	f007 fe17 	bl	24304 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1c6d6:	b00c      	add	sp, #48	; 0x30
   1c6d8:	bd70      	pop	{r4, r5, r6, pc}
   1c6da:	bf00      	nop

0001c6dc <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1c6dc:	4b04      	ldr	r3, [pc, #16]	; (1c6f0 <isr_radio+0x14>)
   1c6de:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1c6e2:	b123      	cbz	r3, 1c6ee <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1c6e4:	4a03      	ldr	r2, [pc, #12]	; (1c6f4 <isr_radio+0x18>)
   1c6e6:	4b04      	ldr	r3, [pc, #16]	; (1c6f8 <isr_radio+0x1c>)
   1c6e8:	6810      	ldr	r0, [r2, #0]
   1c6ea:	681b      	ldr	r3, [r3, #0]
   1c6ec:	4718      	bx	r3
}
   1c6ee:	4770      	bx	lr
   1c6f0:	40001000 	.word	0x40001000
   1c6f4:	2000eb24 	.word	0x2000eb24
   1c6f8:	2000eb20 	.word	0x2000eb20

0001c6fc <radio_isr_set>:
{
   1c6fc:	b538      	push	{r3, r4, r5, lr}
   1c6fe:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1c700:	2001      	movs	r0, #1
{
   1c702:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1c704:	f7ea ff80 	bl	7608 <arch_irq_disable>
	isr_cb = cb;
   1c708:	4b08      	ldr	r3, [pc, #32]	; (1c72c <radio_isr_set+0x30>)
	isr_cb_param = param;
   1c70a:	4a09      	ldr	r2, [pc, #36]	; (1c730 <radio_isr_set+0x34>)
	isr_cb = cb;
   1c70c:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c70e:	4909      	ldr	r1, [pc, #36]	; (1c734 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c710:	4b09      	ldr	r3, [pc, #36]	; (1c738 <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1c712:	6015      	str	r5, [r2, #0]
   1c714:	2010      	movs	r0, #16
   1c716:	2202      	movs	r2, #2
   1c718:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1c71c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1c720:	2001      	movs	r0, #1
}
   1c722:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1c726:	f7ea bf5f 	b.w	75e8 <arch_irq_enable>
   1c72a:	bf00      	nop
   1c72c:	2000eb20 	.word	0x2000eb20
   1c730:	2000eb24 	.word	0x2000eb24
   1c734:	40001000 	.word	0x40001000
   1c738:	e000e100 	.word	0xe000e100

0001c73c <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c73c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c740:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c744:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c746:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1c74a:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c74e:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1c752:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1c756:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1c75a:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1c75e:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1c762:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1c766:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1c76a:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1c76e:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1c772:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1c776:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1c77a:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1c77e:	4770      	bx	lr

0001c780 <radio_reset>:
{
   1c780:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1c782:	2001      	movs	r0, #1
   1c784:	f7ea ff40 	bl	7608 <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1c788:	4a0d      	ldr	r2, [pc, #52]	; (1c7c0 <radio_reset+0x40>)
   1c78a:	2100      	movs	r1, #0
   1c78c:	2301      	movs	r3, #1
   1c78e:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1c792:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c796:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c79a:	490a      	ldr	r1, [pc, #40]	; (1c7c4 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1c79c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c7a0:	f023 0301 	bic.w	r3, r3, #1
   1c7a4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c7a8:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c7ac:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c7b0:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c7b4:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c7b8:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1c7bc:	bd10      	pop	{r4, pc}
   1c7be:	bf00      	nop
   1c7c0:	40001000 	.word	0x40001000
   1c7c4:	4001f000 	.word	0x4001f000

0001c7c8 <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1c7c8:	4b06      	ldr	r3, [pc, #24]	; (1c7e4 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1c7ca:	2802      	cmp	r0, #2
   1c7cc:	bf14      	ite	ne
   1c7ce:	2203      	movne	r2, #3
   1c7d0:	2204      	moveq	r2, #4
   1c7d2:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1c7d6:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1c7da:	f042 0201 	orr.w	r2, r2, #1
   1c7de:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1c7e2:	4770      	bx	lr
   1c7e4:	40001000 	.word	0x40001000

0001c7e8 <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1c7e8:	4b01      	ldr	r3, [pc, #4]	; (1c7f0 <radio_tx_power_set+0x8>)
   1c7ea:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1c7ee:	4770      	bx	lr
   1c7f0:	40001000 	.word	0x40001000

0001c7f4 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1c7f4:	4b01      	ldr	r3, [pc, #4]	; (1c7fc <radio_freq_chan_set+0x8>)
   1c7f6:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1c7fa:	4770      	bx	lr
   1c7fc:	40001000 	.word	0x40001000

0001c800 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1c800:	4b07      	ldr	r3, [pc, #28]	; (1c820 <radio_whiten_iv_set+0x20>)
   1c802:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1c806:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c80a:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1c80e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1c812:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c816:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1c81a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1c81e:	4770      	bx	lr
   1c820:	40001000 	.word	0x40001000

0001c824 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1c824:	4a0a      	ldr	r2, [pc, #40]	; (1c850 <radio_aa_set+0x2c>)
   1c826:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1c828:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1c82a:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1c82e:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1c832:	78c3      	ldrb	r3, [r0, #3]
   1c834:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1c838:	7843      	ldrb	r3, [r0, #1]
   1c83a:	f890 c002 	ldrb.w	ip, [r0, #2]
   1c83e:	7801      	ldrb	r1, [r0, #0]
   1c840:	041b      	lsls	r3, r3, #16
   1c842:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1c846:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1c84a:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1c84e:	4770      	bx	lr
   1c850:	40001000 	.word	0x40001000

0001c854 <radio_pkt_configure>:
	switch (phy) {
   1c854:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1c858:	2b02      	cmp	r3, #2
   1c85a:	bf14      	ite	ne
   1c85c:	f04f 0c00 	movne.w	ip, #0
   1c860:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   1c864:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c866:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1c86a:	bf48      	it	mi
   1c86c:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c870:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1c872:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1c876:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c87a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c87e:	4a0a      	ldr	r2, [pc, #40]	; (1c8a8 <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1c880:	4303      	orrs	r3, r0
   1c882:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c886:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1c88a:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1c88e:	4b07      	ldr	r3, [pc, #28]	; (1c8ac <radio_pkt_configure+0x58>)
   1c890:	4003      	ands	r3, r0
   1c892:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1c896:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1c89a:	4319      	orrs	r1, r3
   1c89c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1c8a0:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1c8a4:	4770      	bx	lr
   1c8a6:	bf00      	nop
   1c8a8:	40001000 	.word	0x40001000
   1c8ac:	fef80000 	.word	0xfef80000

0001c8b0 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1c8b0:	4b01      	ldr	r3, [pc, #4]	; (1c8b8 <radio_pkt_rx_set+0x8>)
   1c8b2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1c8b6:	4770      	bx	lr
   1c8b8:	40001000 	.word	0x40001000

0001c8bc <radio_pkt_tx_set>:
   1c8bc:	4b01      	ldr	r3, [pc, #4]	; (1c8c4 <radio_pkt_tx_set+0x8>)
   1c8be:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1c8c2:	4770      	bx	lr
   1c8c4:	40001000 	.word	0x40001000

0001c8c8 <radio_tx_chain_delay_get>:
}
   1c8c8:	2001      	movs	r0, #1
   1c8ca:	4770      	bx	lr

0001c8cc <radio_rx_ready_delay_get>:
}
   1c8cc:	2029      	movs	r0, #41	; 0x29
   1c8ce:	4770      	bx	lr

0001c8d0 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1c8d0:	2802      	cmp	r0, #2
}
   1c8d2:	bf14      	ite	ne
   1c8d4:	200a      	movne	r0, #10
   1c8d6:	2005      	moveq	r0, #5
   1c8d8:	4770      	bx	lr
   1c8da:	bf00      	nop

0001c8dc <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c8dc:	4b01      	ldr	r3, [pc, #4]	; (1c8e4 <radio_tx_enable+0x8>)
   1c8de:	2201      	movs	r2, #1
   1c8e0:	601a      	str	r2, [r3, #0]
}
   1c8e2:	4770      	bx	lr
   1c8e4:	40001000 	.word	0x40001000

0001c8e8 <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1c8e8:	4a07      	ldr	r2, [pc, #28]	; (1c908 <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1c8ea:	4908      	ldr	r1, [pc, #32]	; (1c90c <radio_disable+0x24>)
{
   1c8ec:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c8ee:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1c8f0:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1c8f4:	2000      	movs	r0, #0
   1c8f6:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1c8fa:	6053      	str	r3, [r2, #4]
}
   1c8fc:	bc10      	pop	{r4}
   1c8fe:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1c900:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1c904:	610b      	str	r3, [r1, #16]
}
   1c906:	4770      	bx	lr
   1c908:	4001f000 	.word	0x4001f000
   1c90c:	40001000 	.word	0x40001000

0001c910 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1c910:	4b04      	ldr	r3, [pc, #16]	; (1c924 <radio_status_reset+0x14>)
   1c912:	2200      	movs	r2, #0
   1c914:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1c918:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1c91c:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1c920:	4770      	bx	lr
   1c922:	bf00      	nop
   1c924:	40001000 	.word	0x40001000

0001c928 <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1c928:	4b03      	ldr	r3, [pc, #12]	; (1c938 <radio_is_ready+0x10>)
   1c92a:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1c92e:	3800      	subs	r0, #0
   1c930:	bf18      	it	ne
   1c932:	2001      	movne	r0, #1
   1c934:	4770      	bx	lr
   1c936:	bf00      	nop
   1c938:	40001000 	.word	0x40001000

0001c93c <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1c93c:	4b03      	ldr	r3, [pc, #12]	; (1c94c <radio_is_done+0x10>)
   1c93e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1c942:	3800      	subs	r0, #0
   1c944:	bf18      	it	ne
   1c946:	2001      	movne	r0, #1
   1c948:	4770      	bx	lr
   1c94a:	bf00      	nop
   1c94c:	40001000 	.word	0x40001000

0001c950 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1c950:	4b03      	ldr	r3, [pc, #12]	; (1c960 <radio_is_idle+0x10>)
   1c952:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1c956:	fab0 f080 	clz	r0, r0
   1c95a:	0940      	lsrs	r0, r0, #5
   1c95c:	4770      	bx	lr
   1c95e:	bf00      	nop
   1c960:	40001000 	.word	0x40001000

0001c964 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1c964:	4b04      	ldr	r3, [pc, #16]	; (1c978 <radio_crc_configure+0x14>)
   1c966:	f240 1203 	movw	r2, #259	; 0x103
   1c96a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1c96e:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1c972:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1c976:	4770      	bx	lr
   1c978:	40001000 	.word	0x40001000

0001c97c <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1c97c:	4b03      	ldr	r3, [pc, #12]	; (1c98c <radio_crc_is_valid+0x10>)
   1c97e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1c982:	3800      	subs	r0, #0
   1c984:	bf18      	it	ne
   1c986:	2001      	movne	r0, #1
   1c988:	4770      	bx	lr
   1c98a:	bf00      	nop
   1c98c:	40001000 	.word	0x40001000

0001c990 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1c990:	4800      	ldr	r0, [pc, #0]	; (1c994 <radio_pkt_empty_get+0x4>)
   1c992:	4770      	bx	lr
   1c994:	2000ea18 	.word	0x2000ea18

0001c998 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1c998:	4800      	ldr	r0, [pc, #0]	; (1c99c <radio_pkt_scratch_get+0x4>)
   1c99a:	4770      	bx	lr
   1c99c:	2000ea1c 	.word	0x2000ea1c

0001c9a0 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c9a0:	4b1d      	ldr	r3, [pc, #116]	; (1ca18 <radio_switch_complete_and_rx+0x78>)
{
   1c9a2:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c9a4:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c9a6:	4d1d      	ldr	r5, [pc, #116]	; (1ca1c <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1c9a8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1c9ac:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c9ae:	4e1c      	ldr	r6, [pc, #112]	; (1ca20 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c9b0:	4c1c      	ldr	r4, [pc, #112]	; (1ca24 <radio_switch_complete_and_rx+0x84>)
   1c9b2:	4f1d      	ldr	r7, [pc, #116]	; (1ca28 <radio_switch_complete_and_rx+0x88>)
   1c9b4:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1c9b8:	f102 030c 	add.w	r3, r2, #12
   1c9bc:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c9be:	00d0      	lsls	r0, r2, #3
   1c9c0:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c9c2:	0091      	lsls	r1, r2, #2
   1c9c4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1c9c8:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1c9cc:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1c9d0:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c9d4:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1c9d8:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1c9dc:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1c9e0:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c9e4:	4811      	ldr	r0, [pc, #68]	; (1ca2c <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1c9e6:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1c9ea:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		SW_SWITCH_TIMER->CC[cc]) {
   1c9ee:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
	if (delay <
   1c9f2:	2b28      	cmp	r3, #40	; 0x28
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1c9f4:	bf8a      	itet	hi
   1c9f6:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1c9fa:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1c9fc:	3b28      	subhi	r3, #40	; 0x28
   1c9fe:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1ca02:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1ca04:	4b06      	ldr	r3, [pc, #24]	; (1ca20 <radio_switch_complete_and_rx+0x80>)
   1ca06:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1ca0a:	f002 0201 	and.w	r2, r2, #1
   1ca0e:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1ca12:	702a      	strb	r2, [r5, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ca14:	bcf0      	pop	{r4, r5, r6, r7}
   1ca16:	4770      	bx	lr
   1ca18:	40001000 	.word	0x40001000
   1ca1c:	2000f318 	.word	0x2000f318
   1ca20:	4001f000 	.word	0x4001f000
   1ca24:	40009140 	.word	0x40009140
   1ca28:	4000110c 	.word	0x4000110c
   1ca2c:	40001004 	.word	0x40001004

0001ca30 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx, uint8_t phy_tx,
				  uint8_t flags_tx)
{
   1ca30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ca34:	4e28      	ldr	r6, [pc, #160]	; (1cad8 <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ca36:	4c29      	ldr	r4, [pc, #164]	; (1cadc <radio_switch_complete_and_tx+0xac>)
   1ca38:	4f29      	ldr	r7, [pc, #164]	; (1cae0 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ca3a:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1cae4 <radio_switch_complete_and_tx+0xb4>
   1ca3e:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1cae8 <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1ca42:	2303      	movs	r3, #3
   1ca44:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1ca48:	7821      	ldrb	r1, [r4, #0]
   1ca4a:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1ca4e:	f101 030c 	add.w	r3, r1, #12
   1ca52:	b2db      	uxtb	r3, r3
   1ca54:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ca56:	00cd      	lsls	r5, r1, #3
   1ca58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1ca5c:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1ca60:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ca64:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1ca68:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ca6c:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1ca70:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ca74:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1ca78:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ca7c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1ca80:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1ca84:	2a02      	cmp	r2, #2
   1ca86:	bf18      	it	ne
   1ca88:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1ca8a:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1ca8e:	f241 3288 	movw	r2, #5000	; 0x1388
   1ca92:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1ca96:	2802      	cmp	r0, #2
   1ca98:	bf08      	it	eq
   1ca9a:	4613      	moveq	r3, r2
   1ca9c:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
		delay = HAL_RADIO_NS2US_ROUND(
   1caa0:	4a12      	ldr	r2, [pc, #72]	; (1caec <radio_switch_complete_and_tx+0xbc>)
   1caa2:	442b      	add	r3, r5
   1caa4:	fba2 2303 	umull	r2, r3, r2, r3
		SW_SWITCH_TIMER->CC[cc]) {
   1caa8:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
	if (delay <
   1caac:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1cab0:	bf85      	ittet	hi
   1cab2:	0998      	lsrhi	r0, r3, #6
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1cab4:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1cab8:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1caba:	1a1b      	subhi	r3, r3, r0
   1cabc:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1cac0:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1cac2:	4b08      	ldr	r3, [pc, #32]	; (1cae4 <radio_switch_complete_and_tx+0xb4>)
   1cac4:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1cac8:	f001 0101 	and.w	r1, r1, #1
   1cacc:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1cad0:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cad2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cad6:	bf00      	nop
   1cad8:	40001000 	.word	0x40001000
   1cadc:	2000f318 	.word	0x2000f318
   1cae0:	40009140 	.word	0x40009140
   1cae4:	4001f000 	.word	0x4001f000
   1cae8:	4000110c 	.word	0x4000110c
   1caec:	10624dd3 	.word	0x10624dd3

0001caf0 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1caf0:	4904      	ldr	r1, [pc, #16]	; (1cb04 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1caf2:	4b05      	ldr	r3, [pc, #20]	; (1cb08 <radio_switch_complete_and_disable+0x18>)
   1caf4:	2003      	movs	r0, #3
   1caf6:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1cafa:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1cafe:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cb02:	4770      	bx	lr
   1cb04:	40001000 	.word	0x40001000
   1cb08:	4001f000 	.word	0x4001f000

0001cb0c <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1cb0c:	4b02      	ldr	r3, [pc, #8]	; (1cb18 <radio_rssi_status_reset+0xc>)
   1cb0e:	2200      	movs	r2, #0
   1cb10:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1cb14:	4770      	bx	lr
   1cb16:	bf00      	nop
   1cb18:	40001000 	.word	0x40001000

0001cb1c <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1cb1c:	4b03      	ldr	r3, [pc, #12]	; (1cb2c <radio_rssi_is_ready+0x10>)
   1cb1e:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1cb22:	3800      	subs	r0, #0
   1cb24:	bf18      	it	ne
   1cb26:	2001      	movne	r0, #1
   1cb28:	4770      	bx	lr
   1cb2a:	bf00      	nop
   1cb2c:	40001000 	.word	0x40001000

0001cb30 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1cb30:	b410      	push	{r4}
   1cb32:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cb36:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1cb3a:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cb3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1cb42:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cb44:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1cb48:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1cb4c:	8894      	ldrh	r4, [r2, #4]
   1cb4e:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1cb52:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1cb56:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1cb5a:	d1ec      	bne.n	1cb36 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1cb5c:	4b03      	ldr	r3, [pc, #12]	; (1cb6c <radio_filter_configure+0x3c>)
}
   1cb5e:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1cb60:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1cb64:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1cb68:	4770      	bx	lr
   1cb6a:	bf00      	nop
   1cb6c:	40001000 	.word	0x40001000

0001cb70 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1cb70:	4a03      	ldr	r2, [pc, #12]	; (1cb80 <radio_filter_disable+0x10>)
   1cb72:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1cb76:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1cb7a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1cb7e:	4770      	bx	lr
   1cb80:	40001000 	.word	0x40001000

0001cb84 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1cb84:	4b02      	ldr	r3, [pc, #8]	; (1cb90 <radio_filter_status_reset+0xc>)
   1cb86:	2200      	movs	r2, #0
   1cb88:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1cb8c:	4770      	bx	lr
   1cb8e:	bf00      	nop
   1cb90:	40001000 	.word	0x40001000

0001cb94 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1cb94:	4b03      	ldr	r3, [pc, #12]	; (1cba4 <radio_filter_has_match+0x10>)
   1cb96:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1cb9a:	3800      	subs	r0, #0
   1cb9c:	bf18      	it	ne
   1cb9e:	2001      	movne	r0, #1
   1cba0:	4770      	bx	lr
   1cba2:	bf00      	nop
   1cba4:	40001000 	.word	0x40001000

0001cba8 <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1cba8:	4b01      	ldr	r3, [pc, #4]	; (1cbb0 <radio_filter_match_get+0x8>)
   1cbaa:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1cbae:	4770      	bx	lr
   1cbb0:	40001000 	.word	0x40001000

0001cbb4 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1cbb4:	4904      	ldr	r1, [pc, #16]	; (1cbc8 <radio_tmr_status_reset+0x14>)
   1cbb6:	4b05      	ldr	r3, [pc, #20]	; (1cbcc <radio_tmr_status_reset+0x18>)
   1cbb8:	4a05      	ldr	r2, [pc, #20]	; (1cbd0 <radio_tmr_status_reset+0x1c>)
   1cbba:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1cbbe:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1cbc2:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1cbc6:	4770      	bx	lr
   1cbc8:	4000b000 	.word	0x4000b000
   1cbcc:	4001f000 	.word	0x4001f000
   1cbd0:	0e7000c0 	.word	0x0e7000c0

0001cbd4 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1cbd4:	4b03      	ldr	r3, [pc, #12]	; (1cbe4 <radio_tmr_tifs_set+0x10>)
   1cbd6:	4a04      	ldr	r2, [pc, #16]	; (1cbe8 <radio_tmr_tifs_set+0x14>)
   1cbd8:	781b      	ldrb	r3, [r3, #0]
   1cbda:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1cbde:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cbe2:	4770      	bx	lr
   1cbe4:	2000f318 	.word	0x2000f318
   1cbe8:	40009000 	.word	0x40009000

0001cbec <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1cbec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1cbf0:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1cbf4:	4d31      	ldr	r5, [pc, #196]	; (1ccbc <radio_tmr_start+0xd0>)
   1cbf6:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1cbfa:	42ab      	cmp	r3, r5
{
   1cbfc:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1cbfe:	d906      	bls.n	1cc0e <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1cc00:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1cc04:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1cc08:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1cc0a:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc0e:	4b2c      	ldr	r3, [pc, #176]	; (1ccc0 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1cc10:	482c      	ldr	r0, [pc, #176]	; (1ccc4 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1cc12:	4d2d      	ldr	r5, [pc, #180]	; (1ccc8 <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cc14:	4e2d      	ldr	r6, [pc, #180]	; (1cccc <radio_tmr_start+0xe0>)
   1cc16:	2701      	movs	r7, #1
   1cc18:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1cc1a:	2700      	movs	r7, #0
   1cc1c:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1cc20:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1cc24:	2704      	movs	r7, #4
   1cc26:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1cc2a:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1cc2c:	2702      	movs	r7, #2
   1cc2e:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1cc32:	4a27      	ldr	r2, [pc, #156]	; (1ccd0 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1cc34:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1cc38:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1cc3c:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1cc40:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1cc44:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cc46:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cc4a:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1cc4e:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1cc52:	bb64      	cbnz	r4, 1ccae <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1cc54:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1cc58:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1cc5c:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1cc60:	4b1b      	ldr	r3, [pc, #108]	; (1ccd0 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cc62:	4a1c      	ldr	r2, [pc, #112]	; (1ccd4 <radio_tmr_start+0xe8>)
   1cc64:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1cc68:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1cc6a:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cc6c:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1ccd8 <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cc70:	f8df e068 	ldr.w	lr, [pc, #104]	; 1ccdc <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cc74:	f8df c068 	ldr.w	ip, [pc, #104]	; 1cce0 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cc78:	4f1a      	ldr	r7, [pc, #104]	; (1cce4 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cc7a:	4e1b      	ldr	r6, [pc, #108]	; (1cce8 <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cc7c:	4d1b      	ldr	r5, [pc, #108]	; (1ccec <radio_tmr_start+0x100>)
   1cc7e:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1cc80:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1cc84:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1cc88:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1cc8c:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1cc90:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cc92:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cc96:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cc9a:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cc9e:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cca2:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cca6:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1ccaa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1ccae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1ccb2:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1ccb6:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1ccba:	e7d1      	b.n	1cc60 <radio_tmr_start+0x74>
   1ccbc:	7ff0bdbf 	.word	0x7ff0bdbf
   1ccc0:	40008000 	.word	0x40008000
   1ccc4:	431bde83 	.word	0x431bde83
   1ccc8:	4000b000 	.word	0x4000b000
   1cccc:	4000b148 	.word	0x4000b148
   1ccd0:	4001f000 	.word	0x4001f000
   1ccd4:	40009000 	.word	0x40009000
   1ccd8:	4000110c 	.word	0x4000110c
   1ccdc:	4000900c 	.word	0x4000900c
   1cce0:	40009140 	.word	0x40009140
   1cce4:	4001f004 	.word	0x4001f004
   1cce8:	40009144 	.word	0x40009144
   1ccec:	4001f00c 	.word	0x4001f00c

0001ccf0 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1ccf0:	4b01      	ldr	r3, [pc, #4]	; (1ccf8 <radio_tmr_start_get+0x8>)
   1ccf2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1ccf6:	4770      	bx	lr
   1ccf8:	4000b000 	.word	0x4000b000

0001ccfc <radio_tmr_stop>:
   1ccfc:	4903      	ldr	r1, [pc, #12]	; (1cd0c <radio_tmr_stop+0x10>)
   1ccfe:	4a04      	ldr	r2, [pc, #16]	; (1cd10 <radio_tmr_stop+0x14>)
   1cd00:	2301      	movs	r3, #1
   1cd02:	604b      	str	r3, [r1, #4]
   1cd04:	610b      	str	r3, [r1, #16]
   1cd06:	6053      	str	r3, [r2, #4]
   1cd08:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cd0a:	4770      	bx	lr
   1cd0c:	40008000 	.word	0x40008000
   1cd10:	40009000 	.word	0x40009000

0001cd14 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1cd14:	4904      	ldr	r1, [pc, #16]	; (1cd28 <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1cd16:	4b05      	ldr	r3, [pc, #20]	; (1cd2c <radio_tmr_hcto_configure+0x18>)
   1cd18:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1cd1c:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1cd20:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1cd24:	4770      	bx	lr
   1cd26:	bf00      	nop
   1cd28:	40008000 	.word	0x40008000
   1cd2c:	4001f000 	.word	0x4001f000

0001cd30 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cd30:	4b05      	ldr	r3, [pc, #20]	; (1cd48 <radio_tmr_aa_capture+0x18>)
   1cd32:	4806      	ldr	r0, [pc, #24]	; (1cd4c <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cd34:	4906      	ldr	r1, [pc, #24]	; (1cd50 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1cd36:	4a07      	ldr	r2, [pc, #28]	; (1cd54 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cd38:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cd3c:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1cd40:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1cd44:	4770      	bx	lr
   1cd46:	bf00      	nop
   1cd48:	4001f000 	.word	0x4001f000
   1cd4c:	40001100 	.word	0x40001100
   1cd50:	40008040 	.word	0x40008040
   1cd54:	04000080 	.word	0x04000080

0001cd58 <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1cd58:	4b01      	ldr	r3, [pc, #4]	; (1cd60 <radio_tmr_aa_get+0x8>)
   1cd5a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1cd5e:	4770      	bx	lr
   1cd60:	40008000 	.word	0x40008000

0001cd64 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1cd64:	4b01      	ldr	r3, [pc, #4]	; (1cd6c <radio_tmr_aa_save+0x8>)
   1cd66:	6018      	str	r0, [r3, #0]
}
   1cd68:	4770      	bx	lr
   1cd6a:	bf00      	nop
   1cd6c:	2000eb28 	.word	0x2000eb28

0001cd70 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1cd70:	4b01      	ldr	r3, [pc, #4]	; (1cd78 <radio_tmr_aa_restore+0x8>)
}
   1cd72:	6818      	ldr	r0, [r3, #0]
   1cd74:	4770      	bx	lr
   1cd76:	bf00      	nop
   1cd78:	2000eb28 	.word	0x2000eb28

0001cd7c <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1cd7c:	4b01      	ldr	r3, [pc, #4]	; (1cd84 <radio_tmr_ready_get+0x8>)
   1cd7e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1cd82:	4770      	bx	lr
   1cd84:	40008000 	.word	0x40008000

0001cd88 <radio_tmr_end_capture>:
   1cd88:	4b02      	ldr	r3, [pc, #8]	; (1cd94 <radio_tmr_end_capture+0xc>)
   1cd8a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1cd8e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1cd92:	4770      	bx	lr
   1cd94:	4001f000 	.word	0x4001f000

0001cd98 <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1cd98:	4b01      	ldr	r3, [pc, #4]	; (1cda0 <radio_tmr_end_get+0x8>)
   1cd9a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1cd9e:	4770      	bx	lr
   1cda0:	40008000 	.word	0x40008000

0001cda4 <radio_tmr_tifs_base_get>:
   1cda4:	4b01      	ldr	r3, [pc, #4]	; (1cdac <radio_tmr_tifs_base_get+0x8>)
   1cda6:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1cdaa:	4770      	bx	lr
   1cdac:	40008000 	.word	0x40008000

0001cdb0 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cdb0:	4b17      	ldr	r3, [pc, #92]	; (1ce10 <radio_ccm_rx_pkt_set+0x60>)
{
   1cdb2:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cdb4:	2400      	movs	r4, #0
{
   1cdb6:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1cdb8:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1cdba:	4816      	ldr	r0, [pc, #88]	; (1ce14 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cdbc:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1cdc0:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1cdc4:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1cdc8:	4e13      	ldr	r6, [pc, #76]	; (1ce18 <radio_ccm_rx_pkt_set+0x68>)
   1cdca:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1cdcc:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1cdd0:	4812      	ldr	r0, [pc, #72]	; (1ce1c <radio_ccm_rx_pkt_set+0x6c>)
   1cdd2:	2902      	cmp	r1, #2
   1cdd4:	bf08      	it	eq
   1cdd6:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1cdd8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1cddc:	4810      	ldr	r0, [pc, #64]	; (1ce20 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1cdde:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1cde2:	4910      	ldr	r1, [pc, #64]	; (1ce24 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1cde4:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1cde8:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1cdec:	4a0e      	ldr	r2, [pc, #56]	; (1ce28 <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1cdee:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1cdf2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1cdf6:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1cdfa:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1cdfe:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1ce02:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ce06:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ce08:	bc70      	pop	{r4, r5, r6}
   1ce0a:	601a      	str	r2, [r3, #0]
   1ce0c:	4770      	bx	lr
   1ce0e:	bf00      	nop
   1ce10:	4000f000 	.word	0x4000f000
   1ce14:	40001000 	.word	0x40001000
   1ce18:	01010001 	.word	0x01010001
   1ce1c:	01000001 	.word	0x01000001
   1ce20:	2000ea1c 	.word	0x2000ea1c
   1ce24:	2000e90c 	.word	0x2000e90c
   1ce28:	4001f000 	.word	0x4001f000

0001ce2c <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ce2c:	4b0f      	ldr	r3, [pc, #60]	; (1ce6c <radio_ccm_tx_pkt_set+0x40>)
{
   1ce2e:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ce30:	2200      	movs	r2, #0
{
   1ce32:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ce34:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1ce36:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1ce3a:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1ce3e:	480c      	ldr	r0, [pc, #48]	; (1ce70 <radio_ccm_tx_pkt_set+0x44>)
   1ce40:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1ce44:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1ce48:	480a      	ldr	r0, [pc, #40]	; (1ce74 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1ce4a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ce4e:	4c0a      	ldr	r4, [pc, #40]	; (1ce78 <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1ce50:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ce54:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1ce56:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1ce5a:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1ce5e:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1ce60:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1ce64:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1ce68:	6019      	str	r1, [r3, #0]
}
   1ce6a:	4770      	bx	lr
   1ce6c:	4000f000 	.word	0x4000f000
   1ce70:	01010000 	.word	0x01010000
   1ce74:	2000ea1c 	.word	0x2000ea1c
   1ce78:	2000e90c 	.word	0x2000e90c

0001ce7c <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1ce7c:	4a0e      	ldr	r2, [pc, #56]	; (1ceb8 <radio_ccm_is_done+0x3c>)
   1ce7e:	2302      	movs	r3, #2
   1ce80:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1ce84:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1ce88:	b933      	cbnz	r3, 1ce98 <radio_ccm_is_done+0x1c>
		__WFE();
   1ce8a:	bf20      	wfe
		__SEV();
   1ce8c:	bf40      	sev
		__WFE();
   1ce8e:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1ce90:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1ce94:	2b00      	cmp	r3, #0
   1ce96:	d0f8      	beq.n	1ce8a <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1ce98:	4b07      	ldr	r3, [pc, #28]	; (1ceb8 <radio_ccm_is_done+0x3c>)
   1ce9a:	4a08      	ldr	r2, [pc, #32]	; (1cebc <radio_ccm_is_done+0x40>)
   1ce9c:	2002      	movs	r0, #2
   1ce9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1cea2:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1cea6:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1ceaa:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1ceae:	fab0 f080 	clz	r0, r0
   1ceb2:	0940      	lsrs	r0, r0, #5
   1ceb4:	4770      	bx	lr
   1ceb6:	bf00      	nop
   1ceb8:	4000f000 	.word	0x4000f000
   1cebc:	e000e100 	.word	0xe000e100

0001cec0 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1cec0:	4b03      	ldr	r3, [pc, #12]	; (1ced0 <radio_ccm_mic_is_valid+0x10>)
   1cec2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cec6:	3800      	subs	r0, #0
   1cec8:	bf18      	it	ne
   1ceca:	2001      	movne	r0, #1
   1cecc:	4770      	bx	lr
   1cece:	bf00      	nop
   1ced0:	4000f000 	.word	0x4000f000

0001ced4 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ced4:	4a15      	ldr	r2, [pc, #84]	; (1cf2c <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1ced6:	4b16      	ldr	r3, [pc, #88]	; (1cf30 <radio_ar_configure+0x5c>)
{
   1ced8:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ceda:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1cede:	4e15      	ldr	r6, [pc, #84]	; (1cf34 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1cee0:	2703      	movs	r7, #3
   1cee2:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1cee6:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1cee8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1ceec:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1ceee:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1cef2:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1cef4:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1cef8:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1cefc:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1cf00:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1cf04:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1cf08:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1cf0c:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1cf10:	4909      	ldr	r1, [pc, #36]	; (1cf38 <radio_ar_configure+0x64>)
   1cf12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1cf16:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1cf1a:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1cf1e:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1cf22:	bcf0      	pop	{r4, r5, r6, r7}
   1cf24:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1cf28:	4770      	bx	lr
   1cf2a:	bf00      	nop
   1cf2c:	40001000 	.word	0x40001000
   1cf30:	4000f000 	.word	0x4000f000
   1cf34:	2000e908 	.word	0x2000e908
   1cf38:	4001f000 	.word	0x4001f000

0001cf3c <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1cf3c:	4b01      	ldr	r3, [pc, #4]	; (1cf44 <radio_ar_match_get+0x8>)
   1cf3e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cf42:	4770      	bx	lr
   1cf44:	4000f000 	.word	0x4000f000

0001cf48 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1cf48:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1cf4a:	4807      	ldr	r0, [pc, #28]	; (1cf68 <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1cf4c:	4c07      	ldr	r4, [pc, #28]	; (1cf6c <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1cf4e:	4a08      	ldr	r2, [pc, #32]	; (1cf70 <radio_ar_status_reset+0x28>)
   1cf50:	2300      	movs	r3, #0
   1cf52:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1cf56:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1cf5a:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1cf5e:	bc10      	pop	{r4}
   1cf60:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1cf64:	4770      	bx	lr
   1cf66:	bf00      	nop
   1cf68:	4000f000 	.word	0x4000f000
   1cf6c:	40001000 	.word	0x40001000
   1cf70:	4001f000 	.word	0x4001f000

0001cf74 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1cf74:	4b08      	ldr	r3, [pc, #32]	; (1cf98 <radio_ar_has_match+0x24>)
   1cf76:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1cf7a:	b160      	cbz	r0, 1cf96 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1cf7c:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1cf80:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1cf84:	b138      	cbz	r0, 1cf96 <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1cf86:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1cf8a:	b120      	cbz	r0, 1cf96 <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1cf8c:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1cf90:	fab0 f080 	clz	r0, r0
   1cf94:	0940      	lsrs	r0, r0, #5
}
   1cf96:	4770      	bx	lr
   1cf98:	40001000 	.word	0x40001000

0001cf9c <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1cf9c:	2902      	cmp	r1, #2
{
   1cf9e:	b510      	push	{r4, lr}
   1cfa0:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1cfa2:	d00b      	beq.n	1cfbc <mayfly_enable_cb+0x20>
   1cfa4:	4a0a      	ldr	r2, [pc, #40]	; (1cfd0 <mayfly_enable_cb+0x34>)
   1cfa6:	490b      	ldr	r1, [pc, #44]	; (1cfd4 <mayfly_enable_cb+0x38>)
   1cfa8:	480b      	ldr	r0, [pc, #44]	; (1cfd8 <mayfly_enable_cb+0x3c>)
   1cfaa:	231e      	movs	r3, #30
   1cfac:	f004 fd08 	bl	219c0 <printk>
   1cfb0:	4040      	eors	r0, r0
   1cfb2:	f380 8811 	msr	BASEPRI, r0
   1cfb6:	f04f 0003 	mov.w	r0, #3
   1cfba:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1cfbc:	200b      	movs	r0, #11
	if (enable) {
   1cfbe:	b11c      	cbz	r4, 1cfc8 <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1cfc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1cfc4:	f7ea bb10 	b.w	75e8 <arch_irq_enable>
}
   1cfc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1cfcc:	f7ea bb1c 	b.w	7608 <arch_irq_disable>
   1cfd0:	00028f6c 	.word	0x00028f6c
   1cfd4:	00028fbc 	.word	0x00028fbc
   1cfd8:	000282a4 	.word	0x000282a4

0001cfdc <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1cfdc:	b129      	cbz	r1, 1cfea <mayfly_is_enabled+0xe>
   1cfde:	3901      	subs	r1, #1
   1cfe0:	2901      	cmp	r1, #1
   1cfe2:	d805      	bhi.n	1cff0 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1cfe4:	200b      	movs	r0, #11
   1cfe6:	f7ea bb23 	b.w	7630 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1cfea:	2018      	movs	r0, #24
   1cfec:	f7ea bb20 	b.w	7630 <arch_irq_is_enabled>
{
   1cff0:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1cff2:	4a07      	ldr	r2, [pc, #28]	; (1d010 <mayfly_is_enabled+0x34>)
   1cff4:	4907      	ldr	r1, [pc, #28]	; (1d014 <mayfly_is_enabled+0x38>)
   1cff6:	4808      	ldr	r0, [pc, #32]	; (1d018 <mayfly_is_enabled+0x3c>)
   1cff8:	2336      	movs	r3, #54	; 0x36
   1cffa:	f004 fce1 	bl	219c0 <printk>
   1cffe:	4040      	eors	r0, r0
   1d000:	f380 8811 	msr	BASEPRI, r0
   1d004:	f04f 0003 	mov.w	r0, #3
   1d008:	df02      	svc	2
		break;
	}

	return 0;
}
   1d00a:	2000      	movs	r0, #0
   1d00c:	bd08      	pop	{r3, pc}
   1d00e:	bf00      	nop
   1d010:	00028f6c 	.word	0x00028f6c
   1d014:	0002833c 	.word	0x0002833c
   1d018:	000282a4 	.word	0x000282a4

0001d01c <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d01c:	4288      	cmp	r0, r1
   1d01e:	d00b      	beq.n	1d038 <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1d020:	2801      	cmp	r0, #1
   1d022:	d003      	beq.n	1d02c <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d024:	2802      	cmp	r0, #2
   1d026:	d009      	beq.n	1d03c <mayfly_prio_is_equal+0x20>
   1d028:	2000      	movs	r0, #0
#endif
	       0;
}
   1d02a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1d02c:	f1a1 0002 	sub.w	r0, r1, #2
   1d030:	fab0 f080 	clz	r0, r0
   1d034:	0940      	lsrs	r0, r0, #5
   1d036:	4770      	bx	lr
   1d038:	2001      	movs	r0, #1
   1d03a:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d03c:	f1a1 0001 	sub.w	r0, r1, #1
   1d040:	fab0 f080 	clz	r0, r0
   1d044:	0940      	lsrs	r0, r0, #5
   1d046:	4770      	bx	lr

0001d048 <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1d048:	2901      	cmp	r1, #1
{
   1d04a:	b508      	push	{r3, lr}
	switch (callee_id) {
   1d04c:	d00f      	beq.n	1d06e <mayfly_pend+0x26>
   1d04e:	2902      	cmp	r1, #2
   1d050:	d00d      	beq.n	1d06e <mayfly_pend+0x26>
   1d052:	b191      	cbz	r1, 1d07a <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1d054:	4a0c      	ldr	r2, [pc, #48]	; (1d088 <mayfly_pend+0x40>)
   1d056:	490d      	ldr	r1, [pc, #52]	; (1d08c <mayfly_pend+0x44>)
   1d058:	480d      	ldr	r0, [pc, #52]	; (1d090 <mayfly_pend+0x48>)
   1d05a:	2367      	movs	r3, #103	; 0x67
   1d05c:	f004 fcb0 	bl	219c0 <printk>
   1d060:	4040      	eors	r0, r0
   1d062:	f380 8811 	msr	BASEPRI, r0
   1d066:	f04f 0003 	mov.w	r0, #3
   1d06a:	df02      	svc	2
		break;
	}
}
   1d06c:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d06e:	4b09      	ldr	r3, [pc, #36]	; (1d094 <mayfly_pend+0x4c>)
   1d070:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d074:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d078:	bd08      	pop	{r3, pc}
   1d07a:	4b06      	ldr	r3, [pc, #24]	; (1d094 <mayfly_pend+0x4c>)
   1d07c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1d080:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d084:	bd08      	pop	{r3, pc}
   1d086:	bf00      	nop
   1d088:	00028f6c 	.word	0x00028f6c
   1d08c:	0002833c 	.word	0x0002833c
   1d090:	000282a4 	.word	0x000282a4
   1d094:	e000e100 	.word	0xe000e100

0001d098 <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d098:	2803      	cmp	r0, #3
{
   1d09a:	b510      	push	{r4, lr}
   1d09c:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d09e:	d804      	bhi.n	1d0aa <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1d0a0:	4b11      	ldr	r3, [pc, #68]	; (1d0e8 <hal_ticker_instance0_caller_id_get+0x50>)
   1d0a2:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d0a4:	b18c      	cbz	r4, 1d0ca <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1d0a6:	4620      	mov	r0, r4
   1d0a8:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d0aa:	4a10      	ldr	r2, [pc, #64]	; (1d0ec <hal_ticker_instance0_caller_id_get+0x54>)
   1d0ac:	4910      	ldr	r1, [pc, #64]	; (1d0f0 <hal_ticker_instance0_caller_id_get+0x58>)
   1d0ae:	4811      	ldr	r0, [pc, #68]	; (1d0f4 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d0b0:	232b      	movs	r3, #43	; 0x2b
   1d0b2:	f004 fc85 	bl	219c0 <printk>
   1d0b6:	4040      	eors	r0, r0
   1d0b8:	f380 8811 	msr	BASEPRI, r0
   1d0bc:	f04f 0003 	mov.w	r0, #3
   1d0c0:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1d0c2:	4b09      	ldr	r3, [pc, #36]	; (1d0e8 <hal_ticker_instance0_caller_id_get+0x50>)
   1d0c4:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d0c6:	2c00      	cmp	r4, #0
   1d0c8:	d1ed      	bne.n	1d0a6 <hal_ticker_instance0_caller_id_get+0xe>
   1d0ca:	4a08      	ldr	r2, [pc, #32]	; (1d0ec <hal_ticker_instance0_caller_id_get+0x54>)
   1d0cc:	490a      	ldr	r1, [pc, #40]	; (1d0f8 <hal_ticker_instance0_caller_id_get+0x60>)
   1d0ce:	4809      	ldr	r0, [pc, #36]	; (1d0f4 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d0d0:	232e      	movs	r3, #46	; 0x2e
   1d0d2:	f004 fc75 	bl	219c0 <printk>
   1d0d6:	4040      	eors	r0, r0
   1d0d8:	f380 8811 	msr	BASEPRI, r0
   1d0dc:	f04f 0003 	mov.w	r0, #3
   1d0e0:	df02      	svc	2
}
   1d0e2:	4620      	mov	r0, r4
   1d0e4:	bd10      	pop	{r4, pc}
   1d0e6:	bf00      	nop
   1d0e8:	00029074 	.word	0x00029074
   1d0ec:	00028fe0 	.word	0x00028fe0
   1d0f0:	00029030 	.word	0x00029030
   1d0f4:	000282a4 	.word	0x000282a4
   1d0f8:	00029050 	.word	0x00029050

0001d0fc <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1d0fc:	3801      	subs	r0, #1
{
   1d0fe:	b510      	push	{r4, lr}
   1d100:	461c      	mov	r4, r3
   1d102:	2804      	cmp	r0, #4
   1d104:	f200 8082 	bhi.w	1d20c <hal_ticker_instance0_sched+0x110>
   1d108:	e8df f000 	tbb	[pc, r0]
   1d10c:	3f302112 	.word	0x3f302112
   1d110:	03          	.byte	0x03
   1d111:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1d112:	2904      	cmp	r1, #4
   1d114:	d04a      	beq.n	1d1ac <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1d116:	4a44      	ldr	r2, [pc, #272]	; (1d228 <hal_ticker_instance0_sched+0x12c>)
   1d118:	4944      	ldr	r1, [pc, #272]	; (1d22c <hal_ticker_instance0_sched+0x130>)
   1d11a:	4845      	ldr	r0, [pc, #276]	; (1d230 <hal_ticker_instance0_sched+0x134>)
   1d11c:	23ba      	movs	r3, #186	; 0xba
   1d11e:	f004 fc4f 	bl	219c0 <printk>
   1d122:	4040      	eors	r0, r0
   1d124:	f380 8811 	msr	BASEPRI, r0
   1d128:	f04f 0003 	mov.w	r0, #3
   1d12c:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1d12e:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d130:	2904      	cmp	r1, #4
   1d132:	d043      	beq.n	1d1bc <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1d134:	4a3c      	ldr	r2, [pc, #240]	; (1d228 <hal_ticker_instance0_sched+0x12c>)
   1d136:	493d      	ldr	r1, [pc, #244]	; (1d22c <hal_ticker_instance0_sched+0x130>)
   1d138:	483d      	ldr	r0, [pc, #244]	; (1d230 <hal_ticker_instance0_sched+0x134>)
   1d13a:	234e      	movs	r3, #78	; 0x4e
   1d13c:	f004 fc40 	bl	219c0 <printk>
   1d140:	4040      	eors	r0, r0
   1d142:	f380 8811 	msr	BASEPRI, r0
   1d146:	f04f 0003 	mov.w	r0, #3
   1d14a:	df02      	svc	2
}
   1d14c:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d14e:	2903      	cmp	r1, #3
   1d150:	d03c      	beq.n	1d1cc <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1d152:	4a35      	ldr	r2, [pc, #212]	; (1d228 <hal_ticker_instance0_sched+0x12c>)
   1d154:	4935      	ldr	r1, [pc, #212]	; (1d22c <hal_ticker_instance0_sched+0x130>)
   1d156:	4836      	ldr	r0, [pc, #216]	; (1d230 <hal_ticker_instance0_sched+0x134>)
   1d158:	2365      	movs	r3, #101	; 0x65
   1d15a:	f004 fc31 	bl	219c0 <printk>
   1d15e:	4040      	eors	r0, r0
   1d160:	f380 8811 	msr	BASEPRI, r0
   1d164:	f04f 0003 	mov.w	r0, #3
   1d168:	df02      	svc	2
}
   1d16a:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d16c:	2904      	cmp	r1, #4
   1d16e:	d035      	beq.n	1d1dc <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1d170:	4a2d      	ldr	r2, [pc, #180]	; (1d228 <hal_ticker_instance0_sched+0x12c>)
   1d172:	492e      	ldr	r1, [pc, #184]	; (1d22c <hal_ticker_instance0_sched+0x130>)
   1d174:	482e      	ldr	r0, [pc, #184]	; (1d230 <hal_ticker_instance0_sched+0x134>)
   1d176:	237c      	movs	r3, #124	; 0x7c
   1d178:	f004 fc22 	bl	219c0 <printk>
   1d17c:	4040      	eors	r0, r0
   1d17e:	f380 8811 	msr	BASEPRI, r0
   1d182:	f04f 0003 	mov.w	r0, #3
   1d186:	df02      	svc	2
}
   1d188:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d18a:	2903      	cmp	r1, #3
   1d18c:	d036      	beq.n	1d1fc <hal_ticker_instance0_sched+0x100>
   1d18e:	2904      	cmp	r1, #4
   1d190:	d02c      	beq.n	1d1ec <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1d192:	4a25      	ldr	r2, [pc, #148]	; (1d228 <hal_ticker_instance0_sched+0x12c>)
   1d194:	4925      	ldr	r1, [pc, #148]	; (1d22c <hal_ticker_instance0_sched+0x130>)
   1d196:	4826      	ldr	r0, [pc, #152]	; (1d230 <hal_ticker_instance0_sched+0x134>)
   1d198:	23a2      	movs	r3, #162	; 0xa2
   1d19a:	f004 fc11 	bl	219c0 <printk>
   1d19e:	4040      	eors	r0, r0
   1d1a0:	f380 8811 	msr	BASEPRI, r0
   1d1a4:	f04f 0003 	mov.w	r0, #3
   1d1a8:	df02      	svc	2
}
   1d1aa:	bd10      	pop	{r4, pc}
			m.param = instance;
   1d1ac:	4b21      	ldr	r3, [pc, #132]	; (1d234 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d1ae:	2102      	movs	r1, #2
			m.param = instance;
   1d1b0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d1b2:	2003      	movs	r0, #3
}
   1d1b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d1b8:	f7f3 bad4 	b.w	10764 <mayfly_enqueue>
			m.param = instance;
   1d1bc:	4b1e      	ldr	r3, [pc, #120]	; (1d238 <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d1be:	2102      	movs	r1, #2
			m.param = instance;
   1d1c0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d1c2:	2000      	movs	r0, #0
}
   1d1c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d1c8:	f7f3 bacc 	b.w	10764 <mayfly_enqueue>
			m.param = instance;
   1d1cc:	4b1b      	ldr	r3, [pc, #108]	; (1d23c <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d1ce:	2101      	movs	r1, #1
			m.param = instance;
   1d1d0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d1d2:	4608      	mov	r0, r1
}
   1d1d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d1d8:	f7f3 bac4 	b.w	10764 <mayfly_enqueue>
			m.param = instance;
   1d1dc:	4b18      	ldr	r3, [pc, #96]	; (1d240 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d1de:	2102      	movs	r1, #2
			m.param = instance;
   1d1e0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d1e2:	2001      	movs	r0, #1
}
   1d1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d1e8:	f7f3 babc 	b.w	10764 <mayfly_enqueue>
			m.param = instance;
   1d1ec:	4b15      	ldr	r3, [pc, #84]	; (1d244 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d1ee:	2102      	movs	r1, #2
			m.param = instance;
   1d1f0:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d1f2:	4608      	mov	r0, r1
}
   1d1f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d1f8:	f7f3 bab4 	b.w	10764 <mayfly_enqueue>
			m.param = instance;
   1d1fc:	4b12      	ldr	r3, [pc, #72]	; (1d248 <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d1fe:	2101      	movs	r1, #1
			m.param = instance;
   1d200:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d202:	2002      	movs	r0, #2
}
   1d204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d208:	f7f3 baac 	b.w	10764 <mayfly_enqueue>
		LL_ASSERT(0);
   1d20c:	4a06      	ldr	r2, [pc, #24]	; (1d228 <hal_ticker_instance0_sched+0x12c>)
   1d20e:	4907      	ldr	r1, [pc, #28]	; (1d22c <hal_ticker_instance0_sched+0x130>)
   1d210:	4807      	ldr	r0, [pc, #28]	; (1d230 <hal_ticker_instance0_sched+0x134>)
   1d212:	23c0      	movs	r3, #192	; 0xc0
   1d214:	f004 fbd4 	bl	219c0 <printk>
   1d218:	4040      	eors	r0, r0
   1d21a:	f380 8811 	msr	BASEPRI, r0
   1d21e:	f04f 0003 	mov.w	r0, #3
   1d222:	df02      	svc	2
}
   1d224:	bd10      	pop	{r4, pc}
   1d226:	bf00      	nop
   1d228:	00028fe0 	.word	0x00028fe0
   1d22c:	0002833c 	.word	0x0002833c
   1d230:	000282a4 	.word	0x000282a4
   1d234:	20000668 	.word	0x20000668
   1d238:	20000658 	.word	0x20000658
   1d23c:	20000648 	.word	0x20000648
   1d240:	20000698 	.word	0x20000698
   1d244:	20000678 	.word	0x20000678
   1d248:	20000688 	.word	0x20000688

0001d24c <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1d24c:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1d24e:	2000      	movs	r0, #0
   1d250:	f7ff b9f2 	b.w	1c638 <cntr_cmp_set>

0001d254 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1d254:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d256:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d25a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1d25e:	3201      	adds	r2, #1
   1d260:	d008      	beq.n	1d274 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1d262:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d266:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d26a:	f013 0301 	ands.w	r3, r3, #1
   1d26e:	d10a      	bne.n	1d286 <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1d270:	4618      	mov	r0, r3
}
   1d272:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d274:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1d278:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d27c:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d27e:	4293      	cmp	r3, r2
   1d280:	d1ef      	bne.n	1d262 <hci_vendor_read_static_addr+0xe>
	return 0;
   1d282:	2000      	movs	r0, #0
}
   1d284:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1d286:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1d28a:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d28c:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d28e:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d292:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d296:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1d298:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1d29a:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1d29e:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1d2a2:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1d2a4:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1d2a8:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d2ac:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d2ae:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1d2b2:	3301      	adds	r3, #1
   1d2b4:	d03b      	beq.n	1d32e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d2b6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d2ba:	3301      	adds	r3, #1
   1d2bc:	d037      	beq.n	1d32e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d2be:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d2c2:	3301      	adds	r3, #1
   1d2c4:	d033      	beq.n	1d32e <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1d2c6:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d2ca:	3301      	adds	r3, #1
   1d2cc:	d02f      	beq.n	1d32e <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1d2ce:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1d2d2:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1d2d4:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d2d6:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d2da:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d2de:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1d2e0:	f880 c009 	strb.w	ip, [r0, #9]
   1d2e4:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1d2e6:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1d2ea:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1d2ec:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d2ee:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d2f2:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d2f6:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1d2f8:	f880 c00d 	strb.w	ip, [r0, #13]
   1d2fc:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1d2fe:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1d302:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1d304:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d306:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d30a:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d30e:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1d310:	73c3      	strb	r3, [r0, #15]
   1d312:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1d316:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1d31a:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1d31c:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d31e:	0a11      	lsrs	r1, r2, #8
   1d320:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d324:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1d326:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1d328:	7541      	strb	r1, [r0, #21]
		return 1;
   1d32a:	2001      	movs	r0, #1
}
   1d32c:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1d32e:	2210      	movs	r2, #16
   1d330:	2100      	movs	r1, #0
   1d332:	3006      	adds	r0, #6
   1d334:	f007 f811 	bl	2435a <memset>
		return 1;
   1d338:	2001      	movs	r0, #1
}
   1d33a:	bd08      	pop	{r3, pc}

0001d33c <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1d33c:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1d33e:	2210      	movs	r2, #16
{
   1d340:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1d342:	2100      	movs	r1, #0
   1d344:	f007 f809 	bl	2435a <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d348:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d34c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1d350:	3201      	adds	r2, #1
   1d352:	d034      	beq.n	1d3be <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d354:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d358:	3201      	adds	r2, #1
   1d35a:	d030      	beq.n	1d3be <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d35c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d360:	3201      	adds	r2, #1
   1d362:	d02c      	beq.n	1d3be <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1d364:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d368:	3201      	adds	r2, #1
   1d36a:	d028      	beq.n	1d3be <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1d36c:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1d370:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d372:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d374:	0a08      	lsrs	r0, r1, #8
   1d376:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1d37a:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1d37c:	70e0      	strb	r0, [r4, #3]
   1d37e:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1d380:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1d384:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1d386:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d388:	0a08      	lsrs	r0, r1, #8
   1d38a:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1d38e:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1d390:	71e0      	strb	r0, [r4, #7]
   1d392:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1d394:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1d398:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1d39a:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d39c:	0a08      	lsrs	r0, r1, #8
   1d39e:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d3a2:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1d3a4:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1d3a6:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1d3a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1d3ac:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1d3ae:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d3b0:	0a11      	lsrs	r1, r2, #8
   1d3b2:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d3b6:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   1d3b8:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1d3ba:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1d3bc:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1d3be:	4620      	mov	r0, r4
   1d3c0:	2210      	movs	r2, #16
}
   1d3c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1d3c6:	2100      	movs	r1, #0
   1d3c8:	f006 bfc7 	b.w	2435a <memset>

0001d3cc <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d3cc:	4b02      	ldr	r3, [pc, #8]	; (1d3d8 <net_buf_pool_get+0xc>)
   1d3ce:	2228      	movs	r2, #40	; 0x28
   1d3d0:	fb02 3000 	mla	r0, r2, r0, r3
   1d3d4:	4770      	bx	lr
   1d3d6:	bf00      	nop
   1d3d8:	2000a050 	.word	0x2000a050

0001d3dc <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d3dc:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1d3de:	4b05      	ldr	r3, [pc, #20]	; (1d3f4 <net_buf_id+0x18>)
   1d3e0:	2128      	movs	r1, #40	; 0x28
   1d3e2:	fb01 3302 	mla	r3, r1, r2, r3
   1d3e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d3e8:	1ac0      	subs	r0, r0, r3
}
   1d3ea:	4b03      	ldr	r3, [pc, #12]	; (1d3f8 <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1d3ec:	10c0      	asrs	r0, r0, #3
}
   1d3ee:	4358      	muls	r0, r3
   1d3f0:	4770      	bx	lr
   1d3f2:	bf00      	nop
   1d3f4:	2000a050 	.word	0x2000a050
   1d3f8:	aaaaaaab 	.word	0xaaaaaaab

0001d3fc <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d3fc:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d3fe:	4b0a      	ldr	r3, [pc, #40]	; (1d428 <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d400:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d402:	2428      	movs	r4, #40	; 0x28
   1d404:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1d408:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d40a:	6a1b      	ldr	r3, [r3, #32]
   1d40c:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d40e:	6823      	ldr	r3, [r4, #0]
   1d410:	429a      	cmp	r2, r3
   1d412:	bf94      	ite	ls
   1d414:	600a      	strls	r2, [r1, #0]
   1d416:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d418:	f7ff ffe0 	bl	1d3dc <net_buf_id>
   1d41c:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d420:	fb02 3000 	mla	r0, r2, r0, r3
   1d424:	bd10      	pop	{r4, pc}
   1d426:	bf00      	nop
   1d428:	2000a050 	.word	0x2000a050

0001d42c <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d42c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d430:	4605      	mov	r5, r0
   1d432:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1d434:	4610      	mov	r0, r2
   1d436:	4619      	mov	r1, r3
{
   1d438:	4691      	mov	r9, r2
   1d43a:	4698      	mov	r8, r3
   1d43c:	4617      	mov	r7, r2
   1d43e:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1d440:	f009 fe6a 	bl	27118 <z_timeout_end_calc>
   1d444:	4682      	mov	sl, r0
   1d446:	468b      	mov	fp, r1
	__asm__ volatile(
   1d448:	f04f 0320 	mov.w	r3, #32
   1d44c:	f3ef 8111 	mrs	r1, BASEPRI
   1d450:	f383 8811 	msr	BASEPRI, r3
   1d454:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d458:	8b6b      	ldrh	r3, [r5, #26]
   1d45a:	2b00      	cmp	r3, #0
   1d45c:	d055      	beq.n	1d50a <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d45e:	8b2a      	ldrh	r2, [r5, #24]
   1d460:	429a      	cmp	r2, r3
   1d462:	d93e      	bls.n	1d4e2 <net_buf_alloc_len+0xb6>
   1d464:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1d466:	2200      	movs	r2, #0
   1d468:	2300      	movs	r3, #0
   1d46a:	4628      	mov	r0, r5
   1d46c:	f002 fb8c 	bl	1fb88 <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d470:	9900      	ldr	r1, [sp, #0]
   1d472:	4604      	mov	r4, r0
   1d474:	2800      	cmp	r0, #0
   1d476:	d034      	beq.n	1d4e2 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1d478:	f381 8811 	msr	BASEPRI, r1
   1d47c:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d480:	9b01      	ldr	r3, [sp, #4]
   1d482:	2b00      	cmp	r3, #0
   1d484:	d051      	beq.n	1d52a <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d486:	ea58 0309 	orrs.w	r3, r8, r9
   1d48a:	d00f      	beq.n	1d4ac <net_buf_alloc_len+0x80>
   1d48c:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d490:	bf08      	it	eq
   1d492:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1d496:	d009      	beq.n	1d4ac <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1d498:	f003 fa1a 	bl	208d0 <z_tick_get>
   1d49c:	ebba 0700 	subs.w	r7, sl, r0
   1d4a0:	eb6b 0601 	sbc.w	r6, fp, r1
   1d4a4:	2e00      	cmp	r6, #0
   1d4a6:	bfbc      	itt	lt
   1d4a8:	2700      	movlt	r7, #0
   1d4aa:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d4ac:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d4ae:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1d540 <net_buf_alloc_len+0x114>
   1d4b2:	2228      	movs	r2, #40	; 0x28
   1d4b4:	fb02 8303 	mla	r3, r2, r3, r8
   1d4b8:	a901      	add	r1, sp, #4
   1d4ba:	6a1b      	ldr	r3, [r3, #32]
   1d4bc:	681b      	ldr	r3, [r3, #0]
   1d4be:	463a      	mov	r2, r7
   1d4c0:	681d      	ldr	r5, [r3, #0]
   1d4c2:	4620      	mov	r0, r4
   1d4c4:	4633      	mov	r3, r6
   1d4c6:	47a8      	blx	r5
   1d4c8:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d4ca:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d4cc:	bb70      	cbnz	r0, 1d52c <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   1d4ce:	79a0      	ldrb	r0, [r4, #6]
   1d4d0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d4d4:	4621      	mov	r1, r4
   1d4d6:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1d4da:	f009 fc0d 	bl	26cf8 <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d4de:	462c      	mov	r4, r5
}
   1d4e0:	e01f      	b.n	1d522 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   1d4e2:	8b6b      	ldrh	r3, [r5, #26]
   1d4e4:	1e5a      	subs	r2, r3, #1
   1d4e6:	836a      	strh	r2, [r5, #26]
   1d4e8:	f381 8811 	msr	BASEPRI, r1
   1d4ec:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d4f0:	8b2c      	ldrh	r4, [r5, #24]
   1d4f2:	1ae3      	subs	r3, r4, r3
   1d4f4:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1d4f6:	2018      	movs	r0, #24
   1d4f8:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1d4fc:	4810      	ldr	r0, [pc, #64]	; (1d540 <net_buf_alloc_len+0x114>)
   1d4fe:	4b11      	ldr	r3, [pc, #68]	; (1d544 <net_buf_alloc_len+0x118>)
   1d500:	1a2d      	subs	r5, r5, r0
   1d502:	10ed      	asrs	r5, r5, #3
   1d504:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d506:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d508:	e7ba      	b.n	1d480 <net_buf_alloc_len+0x54>
   1d50a:	f381 8811 	msr	BASEPRI, r1
   1d50e:	f3bf 8f6f 	isb	sy
   1d512:	464a      	mov	r2, r9
   1d514:	4643      	mov	r3, r8
   1d516:	4628      	mov	r0, r5
   1d518:	f002 fb36 	bl	1fb88 <z_impl_k_queue_get>
	if (!buf) {
   1d51c:	4604      	mov	r4, r0
   1d51e:	2800      	cmp	r0, #0
   1d520:	d1ae      	bne.n	1d480 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d522:	4620      	mov	r0, r4
   1d524:	b003      	add	sp, #12
   1d526:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1d52a:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d52c:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1d52e:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d530:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d532:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1d534:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d536:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d538:	6923      	ldr	r3, [r4, #16]
   1d53a:	81e2      	strh	r2, [r4, #14]
   1d53c:	60a3      	str	r3, [r4, #8]
	return buf;
   1d53e:	e7f0      	b.n	1d522 <net_buf_alloc_len+0xf6>
   1d540:	2000a050 	.word	0x2000a050
   1d544:	cccccccd 	.word	0xcccccccd

0001d548 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d54c:	4d17      	ldr	r5, [pc, #92]	; (1d5ac <net_buf_unref+0x64>)
   1d54e:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d550:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d552:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1d554:	b90c      	cbnz	r4, 1d55a <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d556:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1d55a:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d55c:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d560:	3b01      	subs	r3, #1
   1d562:	b2db      	uxtb	r3, r3
   1d564:	7123      	strb	r3, [r4, #4]
   1d566:	2b00      	cmp	r3, #0
   1d568:	d1f5      	bne.n	1d556 <net_buf_unref+0xe>
		if (buf->__buf) {
   1d56a:	6921      	ldr	r1, [r4, #16]
   1d56c:	b159      	cbz	r1, 1d586 <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d56e:	7963      	ldrb	r3, [r4, #5]
   1d570:	079b      	lsls	r3, r3, #30
   1d572:	d407      	bmi.n	1d584 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d574:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1d576:	fb07 5303 	mla	r3, r7, r3, r5
   1d57a:	4620      	mov	r0, r4
   1d57c:	6a1b      	ldr	r3, [r3, #32]
   1d57e:	681b      	ldr	r3, [r3, #0]
   1d580:	689b      	ldr	r3, [r3, #8]
   1d582:	4798      	blx	r3
			buf->__buf = NULL;
   1d584:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d586:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d588:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d58a:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d58e:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d590:	69db      	ldr	r3, [r3, #28]
   1d592:	b11b      	cbz	r3, 1d59c <net_buf_unref+0x54>
			pool->destroy(buf);
   1d594:	4620      	mov	r0, r4
   1d596:	4798      	blx	r3
{
   1d598:	4644      	mov	r4, r8
   1d59a:	e7db      	b.n	1d554 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1d59c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d5a0:	4621      	mov	r1, r4
   1d5a2:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1d5a6:	f009 fba7 	bl	26cf8 <k_queue_prepend>
}
   1d5aa:	e7f5      	b.n	1d598 <net_buf_unref+0x50>
   1d5ac:	2000a050 	.word	0x2000a050

0001d5b0 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d5b0:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d5b2:	4b09      	ldr	r3, [pc, #36]	; (1d5d8 <gpio_nrfx_init+0x28>)
   1d5b4:	781a      	ldrb	r2, [r3, #0]
   1d5b6:	b96a      	cbnz	r2, 1d5d4 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1d5b8:	2101      	movs	r1, #1
   1d5ba:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d5bc:	2006      	movs	r0, #6
   1d5be:	2105      	movs	r1, #5
   1d5c0:	f7ea f844 	bl	764c <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d5c4:	2006      	movs	r0, #6
   1d5c6:	f7ea f80f 	bl	75e8 <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d5ca:	4b04      	ldr	r3, [pc, #16]	; (1d5dc <gpio_nrfx_init+0x2c>)
   1d5cc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d5d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d5d4:	2000      	movs	r0, #0
   1d5d6:	bd08      	pop	{r3, pc}
   1d5d8:	2000f319 	.word	0x2000f319
   1d5dc:	40006000 	.word	0x40006000

0001d5e0 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d5e0:	4b2b      	ldr	r3, [pc, #172]	; (1d690 <gpio_nrfx_config+0xb0>)
{
   1d5e2:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   1d5e4:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d5e6:	482b      	ldr	r0, [pc, #172]	; (1d694 <gpio_nrfx_config+0xb4>)
   1d5e8:	4013      	ands	r3, r2
   1d5ea:	4283      	cmp	r3, r0
   1d5ec:	d041      	beq.n	1d672 <gpio_nrfx_config+0x92>
   1d5ee:	d80d      	bhi.n	1d60c <gpio_nrfx_config+0x2c>
   1d5f0:	2b06      	cmp	r3, #6
   1d5f2:	d015      	beq.n	1d620 <gpio_nrfx_config+0x40>
   1d5f4:	d805      	bhi.n	1d602 <gpio_nrfx_config+0x22>
   1d5f6:	b19b      	cbz	r3, 1d620 <gpio_nrfx_config+0x40>
   1d5f8:	2b02      	cmp	r3, #2
   1d5fa:	d03c      	beq.n	1d676 <gpio_nrfx_config+0x96>
   1d5fc:	f06f 0015 	mvn.w	r0, #21
   1d600:	e036      	b.n	1d670 <gpio_nrfx_config+0x90>
   1d602:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d606:	d1f9      	bne.n	1d5fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1d608:	2301      	movs	r3, #1
   1d60a:	e009      	b.n	1d620 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d60c:	4822      	ldr	r0, [pc, #136]	; (1d698 <gpio_nrfx_config+0xb8>)
   1d60e:	4283      	cmp	r3, r0
   1d610:	d033      	beq.n	1d67a <gpio_nrfx_config+0x9a>
   1d612:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d616:	d032      	beq.n	1d67e <gpio_nrfx_config+0x9e>
   1d618:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d61c:	d1ee      	bne.n	1d5fc <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1d61e:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1d620:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1d622:	bf54      	ite	pl
   1d624:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1d628:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d62a:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1d62e:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1d630:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d634:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d638:	d507      	bpl.n	1d64a <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d63a:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d63e:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d640:	d01f      	beq.n	1d682 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1d642:	2201      	movs	r2, #1
   1d644:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1d646:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1d64a:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1d64c:	4c13      	ldr	r4, [pc, #76]	; (1d69c <gpio_nrfx_config+0xbc>)
   1d64e:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1d650:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d654:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1d658:	bf18      	it	ne
   1d65a:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d65e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d662:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d666:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d66a:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1d66e:	2000      	movs	r0, #0
}
   1d670:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1d672:	2307      	movs	r3, #7
   1d674:	e7d4      	b.n	1d620 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1d676:	2304      	movs	r3, #4
   1d678:	e7d2      	b.n	1d620 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1d67a:	2305      	movs	r3, #5
   1d67c:	e7d0      	b.n	1d620 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1d67e:	2303      	movs	r3, #3
   1d680:	e7ce      	b.n	1d620 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d682:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1d684:	bf42      	ittt	mi
   1d686:	2201      	movmi	r2, #1
   1d688:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1d68a:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1d68e:	e7dc      	b.n	1d64a <gpio_nrfx_config+0x6a>
   1d690:	00f00006 	.word	0x00f00006
   1d694:	00100006 	.word	0x00100006
   1d698:	00400002 	.word	0x00400002
   1d69c:	50000300 	.word	0x50000300

0001d6a0 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1d6a0:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1d6a4:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1d6a6:	4b08      	ldr	r3, [pc, #32]	; (1d6c8 <nrf_gpio_cfg_sense_set+0x28>)
   1d6a8:	2801      	cmp	r0, #1
   1d6aa:	bf18      	it	ne
   1d6ac:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d6b0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1d6b4:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1d6b8:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d6bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1d6c0:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1d6c4:	4770      	bx	lr
   1d6c6:	bf00      	nop
   1d6c8:	50000300 	.word	0x50000300

0001d6cc <gpiote_event_handler>:
{
   1d6cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1d6ce:	2600      	movs	r6, #0
   1d6d0:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d6d4:	4d28      	ldr	r5, [pc, #160]	; (1d778 <gpiote_event_handler+0xac>)
   1d6d6:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   1d6da:	b15c      	cbz	r4, 1d6f4 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1d6dc:	4827      	ldr	r0, [pc, #156]	; (1d77c <gpiote_event_handler+0xb0>)
   1d6de:	f008 ff30 	bl	26542 <check_level_trigger_pins>
		fired_triggers[0] =
   1d6e2:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1d6e4:	4826      	ldr	r0, [pc, #152]	; (1d780 <gpiote_event_handler+0xb4>)
   1d6e6:	f008 ff2c 	bl	26542 <check_level_trigger_pins>
		fired_triggers[1] =
   1d6ea:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d6ec:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   1d6f0:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   1d6f4:	4923      	ldr	r1, [pc, #140]	; (1d784 <gpiote_event_handler+0xb8>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d6f6:	4d20      	ldr	r5, [pc, #128]	; (1d778 <gpiote_event_handler+0xac>)
   1d6f8:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1d6fa:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d6fc:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1d6fe:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1d702:	fa06 f002 	lsl.w	r0, r6, r2
   1d706:	4218      	tst	r0, r3
   1d708:	d016      	beq.n	1d738 <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d70a:	680b      	ldr	r3, [r1, #0]
   1d70c:	b1a3      	cbz	r3, 1d738 <gpiote_event_handler+0x6c>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d70e:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1d712:	af02      	add	r7, sp, #8
   1d714:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d718:	f8c1 c000 	str.w	ip, [r1]
   1d71c:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1d720:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1d724:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1d728:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1d72c:	fa06 f303 	lsl.w	r3, r6, r3
   1d730:	433b      	orrs	r3, r7
   1d732:	f840 3c08 	str.w	r3, [r0, #-8]
   1d736:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d738:	3201      	adds	r2, #1
   1d73a:	2a08      	cmp	r2, #8
   1d73c:	f101 0104 	add.w	r1, r1, #4
   1d740:	d1dd      	bne.n	1d6fe <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   1d742:	9a00      	ldr	r2, [sp, #0]
   1d744:	b122      	cbz	r2, 1d750 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   1d746:	4b10      	ldr	r3, [pc, #64]	; (1d788 <gpiote_event_handler+0xbc>)
   1d748:	490c      	ldr	r1, [pc, #48]	; (1d77c <gpiote_event_handler+0xb0>)
   1d74a:	6858      	ldr	r0, [r3, #4]
   1d74c:	f008 fec2 	bl	264d4 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   1d750:	9a01      	ldr	r2, [sp, #4]
   1d752:	b122      	cbz	r2, 1d75e <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   1d754:	4b0d      	ldr	r3, [pc, #52]	; (1d78c <gpiote_event_handler+0xc0>)
   1d756:	490a      	ldr	r1, [pc, #40]	; (1d780 <gpiote_event_handler+0xb4>)
   1d758:	6858      	ldr	r0, [r3, #4]
   1d75a:	f008 febb 	bl	264d4 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   1d75e:	b144      	cbz	r4, 1d772 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1d760:	4806      	ldr	r0, [pc, #24]	; (1d77c <gpiote_event_handler+0xb0>)
   1d762:	f008 fec8 	bl	264f6 <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d766:	4806      	ldr	r0, [pc, #24]	; (1d780 <gpiote_event_handler+0xb4>)
}
   1d768:	b003      	add	sp, #12
   1d76a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d76e:	f008 bec2 	b.w	264f6 <cfg_level_pins>
}
   1d772:	b003      	add	sp, #12
   1d774:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d776:	bf00      	nop
   1d778:	40006000 	.word	0x40006000
   1d77c:	20009dd0 	.word	0x20009dd0
   1d780:	20009de0 	.word	0x20009de0
   1d784:	40006100 	.word	0x40006100
   1d788:	2000eb5c 	.word	0x2000eb5c
   1d78c:	2000eb78 	.word	0x2000eb78

0001d790 <gpio_nrfx_pin_interrupt_configure>:
{
   1d790:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d792:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d794:	6842      	ldr	r2, [r0, #4]
	return port->data;
   1d796:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d798:	7a12      	ldrb	r2, [r2, #8]
   1d79a:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d79e:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   1d7a2:	460e      	mov	r6, r1
   1d7a4:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d7a8:	d110      	bne.n	1d7cc <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   1d7aa:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   1d7ac:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   1d7ae:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   1d7b2:	4961      	ldr	r1, [pc, #388]	; (1d938 <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d7b4:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1d7b8:	bf18      	it	ne
   1d7ba:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d7be:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1d7c2:	07d0      	lsls	r0, r2, #31
   1d7c4:	d507      	bpl.n	1d7d6 <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   1d7c6:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d7ca:	e09a      	b.n	1d902 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d7cc:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   1d7d0:	68f9      	ldr	r1, [r7, #12]
   1d7d2:	f000 8098 	beq.w	1d906 <gpio_nrfx_pin_interrupt_configure+0x176>
   1d7d6:	68fa      	ldr	r2, [r7, #12]
   1d7d8:	2101      	movs	r1, #1
   1d7da:	40b1      	lsls	r1, r6
   1d7dc:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d7de:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d7e0:	60f9      	str	r1, [r7, #12]
   1d7e2:	2101      	movs	r1, #1
   1d7e4:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d7e6:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1d7ea:	bf0c      	ite	eq
   1d7ec:	430a      	orreq	r2, r1
   1d7ee:	438a      	bicne	r2, r1
   1d7f0:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d7f2:	69ba      	ldr	r2, [r7, #24]
   1d7f4:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1d7f8:	bf0c      	ite	eq
   1d7fa:	430a      	orreq	r2, r1
   1d7fc:	438a      	bicne	r2, r1
   1d7fe:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d800:	693a      	ldr	r2, [r7, #16]
   1d802:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1d806:	bf0c      	ite	eq
   1d808:	4311      	orreq	r1, r2
   1d80a:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
   1d80e:	4a4b      	ldr	r2, [pc, #300]	; (1d93c <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   1d810:	6139      	str	r1, [r7, #16]
   1d812:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d816:	2000      	movs	r0, #0
   1d818:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d81a:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1d81e:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1d822:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d826:	428d      	cmp	r5, r1
   1d828:	d172      	bne.n	1d910 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   1d82a:	fa23 f100 	lsr.w	r1, r3, r0
   1d82e:	07c9      	lsls	r1, r1, #31
   1d830:	d56e      	bpl.n	1d910 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d832:	0083      	lsls	r3, r0, #2
   1d834:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d838:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d83c:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d840:	f021 0101 	bic.w	r1, r1, #1
   1d844:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1d848:	2301      	movs	r3, #1
   1d84a:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1d84c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1d850:	b2c0      	uxtb	r0, r0
   1d852:	f001 fa39 	bl	1ecc8 <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d856:	4628      	mov	r0, r5
   1d858:	2100      	movs	r1, #0
   1d85a:	f7ff ff21 	bl	1d6a0 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1d85e:	68f8      	ldr	r0, [r7, #12]
   1d860:	40f0      	lsrs	r0, r6
   1d862:	f010 0001 	ands.w	r0, r0, #1
   1d866:	d04c      	beq.n	1d902 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
   1d868:	6978      	ldr	r0, [r7, #20]
   1d86a:	40f0      	lsrs	r0, r6
   1d86c:	f010 0401 	ands.w	r4, r0, #1
   1d870:	d055      	beq.n	1d91e <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   1d872:	69bb      	ldr	r3, [r7, #24]
   1d874:	40f3      	lsrs	r3, r6
   1d876:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d878:	bf5f      	itttt	pl
   1d87a:	6939      	ldrpl	r1, [r7, #16]
   1d87c:	fa21 f606 	lsrpl.w	r6, r1, r6
   1d880:	f006 0601 	andpl.w	r6, r6, #1
   1d884:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d888:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d88c:	bf54      	ite	pl
   1d88e:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1d890:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d892:	f001 fa39 	bl	1ed08 <nrfx_gpiote_channel_alloc>
   1d896:	4b2a      	ldr	r3, [pc, #168]	; (1d940 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1d898:	4298      	cmp	r0, r3
   1d89a:	d13d      	bne.n	1d918 <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1d89c:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d8a0:	0093      	lsls	r3, r2, #2
   1d8a2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d8a6:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d8aa:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1d8ac:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d8b0:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1d8b4:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1d8b8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1d8bc:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d8c0:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1d8c4:	430d      	orrs	r5, r1
   1d8c6:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1d8ca:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1d8ce:	0093      	lsls	r3, r2, #2
   1d8d0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d8d4:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d8d8:	2000      	movs	r0, #0
   1d8da:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1d8dc:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1d8e0:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1d8e2:	008b      	lsls	r3, r1, #2
   1d8e4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d8e8:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d8ec:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1d8f0:	f042 0201 	orr.w	r2, r2, #1
   1d8f4:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1d8f8:	4a10      	ldr	r2, [pc, #64]	; (1d93c <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1d8fa:	2301      	movs	r3, #1
   1d8fc:	408b      	lsls	r3, r1
   1d8fe:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1d902:	b003      	add	sp, #12
   1d904:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d906:	2201      	movs	r2, #1
   1d908:	40b2      	lsls	r2, r6
   1d90a:	ea21 0102 	bic.w	r1, r1, r2
   1d90e:	e766      	b.n	1d7de <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d910:	3001      	adds	r0, #1
   1d912:	2808      	cmp	r0, #8
   1d914:	d181      	bne.n	1d81a <gpio_nrfx_pin_interrupt_configure+0x8a>
   1d916:	e79e      	b.n	1d856 <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1d918:	f06f 0012 	mvn.w	r0, #18
   1d91c:	e7f1      	b.n	1d902 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1d91e:	6939      	ldr	r1, [r7, #16]
   1d920:	40f1      	lsrs	r1, r6
   1d922:	f001 0101 	and.w	r1, r1, #1
   1d926:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1d92a:	4628      	mov	r0, r5
   1d92c:	b2c9      	uxtb	r1, r1
   1d92e:	f7ff feb7 	bl	1d6a0 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1d932:	4620      	mov	r0, r4
   1d934:	e7e5      	b.n	1d902 <gpio_nrfx_pin_interrupt_configure+0x172>
   1d936:	bf00      	nop
   1d938:	50000300 	.word	0x50000300
   1d93c:	40006000 	.word	0x40006000
   1d940:	0bad0000 	.word	0x0bad0000

0001d944 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1d944:	b510      	push	{r4, lr}
   1d946:	4604      	mov	r4, r0
   1d948:	2200      	movs	r2, #0
   1d94a:	2101      	movs	r1, #1
   1d94c:	2003      	movs	r0, #3
   1d94e:	f7e9 fe7d 	bl	764c <z_arm_irq_priority_set>
	return dev->config;
   1d952:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1d954:	68e3      	ldr	r3, [r4, #12]
   1d956:	4a0c      	ldr	r2, [pc, #48]	; (1d988 <twi_0_init+0x44>)
   1d958:	f100 0108 	add.w	r1, r0, #8
   1d95c:	f001 fcae 	bl	1f2bc <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1d960:	4b0a      	ldr	r3, [pc, #40]	; (1d98c <twi_0_init+0x48>)
   1d962:	4298      	cmp	r0, r3
   1d964:	d00d      	beq.n	1d982 <twi_0_init+0x3e>
   1d966:	4b0a      	ldr	r3, [pc, #40]	; (1d990 <twi_0_init+0x4c>)
   1d968:	4a0a      	ldr	r2, [pc, #40]	; (1d994 <twi_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1d96a:	480b      	ldr	r0, [pc, #44]	; (1d998 <twi_0_init+0x54>)
   1d96c:	6821      	ldr	r1, [r4, #0]
   1d96e:	1ad2      	subs	r2, r2, r3
   1d970:	08d2      	lsrs	r2, r2, #3
   1d972:	0192      	lsls	r2, r2, #6
   1d974:	f042 0201 	orr.w	r2, r2, #1
   1d978:	f004 fcc5 	bl	22306 <log_1>
		return -EBUSY;
   1d97c:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1d980:	bd10      	pop	{r4, pc}
	return 0;
   1d982:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1d984:	e7fc      	b.n	1d980 <twi_0_init+0x3c>
   1d986:	bf00      	nop
   1d988:	0001d9f1 	.word	0x0001d9f1
   1d98c:	0bad0000 	.word	0x0bad0000
   1d990:	0002775c 	.word	0x0002775c
   1d994:	00027874 	.word	0x00027874
   1d998:	0002d5b1 	.word	0x0002d5b1

0001d99c <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1d99c:	07ca      	lsls	r2, r1, #31
{
   1d99e:	b508      	push	{r3, lr}
	return dev->config;
   1d9a0:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1d9a2:	d40f      	bmi.n	1d9c4 <i2c_nrfx_twi_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1d9a4:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1d9a8:	2a01      	cmp	r2, #1
   1d9aa:	d00e      	beq.n	1d9ca <i2c_nrfx_twi_configure+0x2e>
   1d9ac:	2a02      	cmp	r2, #2
   1d9ae:	d015      	beq.n	1d9dc <i2c_nrfx_twi_configure+0x40>
   1d9b0:	490c      	ldr	r1, [pc, #48]	; (1d9e4 <i2c_nrfx_twi_configure+0x48>)
   1d9b2:	4b0d      	ldr	r3, [pc, #52]	; (1d9e8 <i2c_nrfx_twi_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1d9b4:	480d      	ldr	r0, [pc, #52]	; (1d9ec <i2c_nrfx_twi_configure+0x50>)
   1d9b6:	1ac9      	subs	r1, r1, r3
   1d9b8:	08c9      	lsrs	r1, r1, #3
   1d9ba:	0189      	lsls	r1, r1, #6
   1d9bc:	f041 0101 	orr.w	r1, r1, #1
   1d9c0:	f004 fc94 	bl	222ec <log_0>
		return -EINVAL;
   1d9c4:	f06f 0015 	mvn.w	r0, #21
   1d9c8:	e007      	b.n	1d9da <i2c_nrfx_twi_configure+0x3e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1d9ca:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1d9cc:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1d9d0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1d9d4:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1d9d6:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1d9d8:	6359      	str	r1, [r3, #52]	; 0x34
}
   1d9da:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1d9dc:	681b      	ldr	r3, [r3, #0]
   1d9de:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1d9e2:	e7f5      	b.n	1d9d0 <i2c_nrfx_twi_configure+0x34>
   1d9e4:	00027874 	.word	0x00027874
   1d9e8:	0002775c 	.word	0x0002775c
   1d9ec:	0002d5d1 	.word	0x0002d5d1

0001d9f0 <event_handler>:
	switch (p_event->type) {
   1d9f0:	7803      	ldrb	r3, [r0, #0]
   1d9f2:	2b01      	cmp	r3, #1
   1d9f4:	d008      	beq.n	1da08 <event_handler+0x18>
   1d9f6:	2b02      	cmp	r3, #2
   1d9f8:	d008      	beq.n	1da0c <event_handler+0x1c>
   1d9fa:	b94b      	cbnz	r3, 1da10 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1d9fc:	4b05      	ldr	r3, [pc, #20]	; (1da14 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1d9fe:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1da00:	f101 0018 	add.w	r0, r1, #24
   1da04:	f002 bc7c 	b.w	20300 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1da08:	4b03      	ldr	r3, [pc, #12]	; (1da18 <event_handler+0x28>)
   1da0a:	e7f8      	b.n	1d9fe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1da0c:	4b03      	ldr	r3, [pc, #12]	; (1da1c <event_handler+0x2c>)
   1da0e:	e7f6      	b.n	1d9fe <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1da10:	4b03      	ldr	r3, [pc, #12]	; (1da20 <event_handler+0x30>)
   1da12:	e7f4      	b.n	1d9fe <event_handler+0xe>
   1da14:	0bad0000 	.word	0x0bad0000
   1da18:	0bae0001 	.word	0x0bae0001
   1da1c:	0bae0002 	.word	0x0bae0002
   1da20:	0bad0001 	.word	0x0bad0001

0001da24 <i2c_nrfx_twi_transfer>:
{
   1da24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1da28:	4604      	mov	r4, r0
   1da2a:	b087      	sub	sp, #28
   1da2c:	460d      	mov	r5, r1
   1da2e:	4690      	mov	r8, r2
   1da30:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1da32:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1da34:	f04f 32ff 	mov.w	r2, #4294967295
   1da38:	f04f 33ff 	mov.w	r3, #4294967295
   1da3c:	f002 fc86 	bl	2034c <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1da40:	68e0      	ldr	r0, [r4, #12]
   1da42:	3018      	adds	r0, #24
   1da44:	2200      	movs	r2, #0
   1da46:	2300      	movs	r3, #0
   1da48:	f002 fc80 	bl	2034c <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1da4c:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1da4e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1db34 <i2c_nrfx_twi_transfer+0x110>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1da52:	f001 fc8b 	bl	1f36c <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1da56:	2600      	movs	r6, #0
   1da58:	4546      	cmp	r6, r8
   1da5a:	d301      	bcc.n	1da60 <i2c_nrfx_twi_transfer+0x3c>
   1da5c:	2500      	movs	r5, #0
   1da5e:	e02d      	b.n	1dabc <i2c_nrfx_twi_transfer+0x98>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1da60:	f895 b008 	ldrb.w	fp, [r5, #8]
   1da64:	f01b 0708 	ands.w	r7, fp, #8
   1da68:	d160      	bne.n	1db2c <i2c_nrfx_twi_transfer+0x108>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1da6a:	2214      	movs	r2, #20
   1da6c:	4639      	mov	r1, r7
   1da6e:	a801      	add	r0, sp, #4
   1da70:	f006 fc73 	bl	2435a <memset>
   1da74:	686a      	ldr	r2, [r5, #4]
   1da76:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1da78:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1da7c:	682a      	ldr	r2, [r5, #0]
   1da7e:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1da82:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1da86:	f88d 9005 	strb.w	r9, [sp, #5]
   1da8a:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1da8c:	d120      	bne.n	1dad0 <i2c_nrfx_twi_transfer+0xac>
			if ((i < (num_msgs - 1)) &&
   1da8e:	f108 32ff 	add.w	r2, r8, #4294967295
   1da92:	42b2      	cmp	r2, r6
   1da94:	d902      	bls.n	1da9c <i2c_nrfx_twi_transfer+0x78>
   1da96:	7d2a      	ldrb	r2, [r5, #20]
   1da98:	0752      	lsls	r2, r2, #29
   1da9a:	d51b      	bpl.n	1dad4 <i2c_nrfx_twi_transfer+0xb0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1da9c:	2b00      	cmp	r3, #0
   1da9e:	d145      	bne.n	1db2c <i2c_nrfx_twi_transfer+0x108>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1daa0:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1daa2:	6860      	ldr	r0, [r4, #4]
   1daa4:	a901      	add	r1, sp, #4
   1daa6:	f001 fc8b 	bl	1f3c0 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1daaa:	4550      	cmp	r0, sl
   1daac:	d014      	beq.n	1dad8 <i2c_nrfx_twi_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
   1daae:	4b22      	ldr	r3, [pc, #136]	; (1db38 <i2c_nrfx_twi_transfer+0x114>)
				ret = -EIO;
   1dab0:	4298      	cmp	r0, r3
   1dab2:	bf0c      	ite	eq
   1dab4:	f06f 050f 	mvneq.w	r5, #15
   1dab8:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1dabc:	6860      	ldr	r0, [r4, #4]
   1dabe:	f001 fc65 	bl	1f38c <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1dac2:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1dac4:	f002 fc1c 	bl	20300 <z_impl_k_sem_give>
}
   1dac8:	4628      	mov	r0, r5
   1daca:	b007      	add	sp, #28
   1dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1dad0:	463a      	mov	r2, r7
   1dad2:	e7e6      	b.n	1daa2 <i2c_nrfx_twi_transfer+0x7e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1dad4:	2240      	movs	r2, #64	; 0x40
   1dad6:	e7e4      	b.n	1daa2 <i2c_nrfx_twi_transfer+0x7e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1dad8:	68e0      	ldr	r0, [r4, #12]
   1dada:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1dadc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1dae0:	2300      	movs	r3, #0
   1dae2:	f002 fc33 	bl	2034c <z_impl_k_sem_take>
		if (ret != 0) {
   1dae6:	b168      	cbz	r0, 1db04 <i2c_nrfx_twi_transfer+0xe0>
   1dae8:	4a14      	ldr	r2, [pc, #80]	; (1db3c <i2c_nrfx_twi_transfer+0x118>)
   1daea:	4b15      	ldr	r3, [pc, #84]	; (1db40 <i2c_nrfx_twi_transfer+0x11c>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1daec:	4815      	ldr	r0, [pc, #84]	; (1db44 <i2c_nrfx_twi_transfer+0x120>)
   1daee:	1ad2      	subs	r2, r2, r3
   1daf0:	08d2      	lsrs	r2, r2, #3
   1daf2:	0192      	lsls	r2, r2, #6
   1daf4:	f042 0201 	orr.w	r2, r2, #1
   1daf8:	4631      	mov	r1, r6
   1dafa:	f004 fc04 	bl	22306 <log_1>
			ret = -EIO;
   1dafe:	f06f 0504 	mvn.w	r5, #4
			break;
   1db02:	e7db      	b.n	1dabc <i2c_nrfx_twi_transfer+0x98>
	return dev->data;
   1db04:	68e3      	ldr	r3, [r4, #12]
		res = get_dev_data(dev)->res;
   1db06:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1db08:	4551      	cmp	r1, sl
   1db0a:	f105 050c 	add.w	r5, r5, #12
   1db0e:	d00b      	beq.n	1db28 <i2c_nrfx_twi_transfer+0x104>
   1db10:	4a0b      	ldr	r2, [pc, #44]	; (1db40 <i2c_nrfx_twi_transfer+0x11c>)
   1db12:	4b0a      	ldr	r3, [pc, #40]	; (1db3c <i2c_nrfx_twi_transfer+0x118>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   1db14:	480c      	ldr	r0, [pc, #48]	; (1db48 <i2c_nrfx_twi_transfer+0x124>)
   1db16:	1a9b      	subs	r3, r3, r2
   1db18:	08db      	lsrs	r3, r3, #3
   1db1a:	019b      	lsls	r3, r3, #6
   1db1c:	f043 0301 	orr.w	r3, r3, #1
   1db20:	4632      	mov	r2, r6
   1db22:	f004 fc04 	bl	2232e <log_2>
   1db26:	e7ea      	b.n	1dafe <i2c_nrfx_twi_transfer+0xda>
	for (size_t i = 0; i < num_msgs; i++) {
   1db28:	3601      	adds	r6, #1
   1db2a:	e795      	b.n	1da58 <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1db2c:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1db30:	e7c4      	b.n	1dabc <i2c_nrfx_twi_transfer+0x98>
   1db32:	bf00      	nop
   1db34:	0bad0000 	.word	0x0bad0000
   1db38:	0bad000b 	.word	0x0bad000b
   1db3c:	00027874 	.word	0x00027874
   1db40:	0002775c 	.word	0x0002775c
   1db44:	0002d5e3 	.word	0x0002d5e3
   1db48:	0002d60d 	.word	0x0002d60d

0001db4c <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
   1db4c:	b538      	push	{r3, r4, r5, lr}
   1db4e:	4604      	mov	r4, r0
   1db50:	2200      	movs	r2, #0
   1db52:	2101      	movs	r1, #1
   1db54:	2023      	movs	r0, #35	; 0x23
   1db56:	f7e9 fd79 	bl	764c <z_arm_irq_priority_set>
	return dev->data;
   1db5a:	68e3      	ldr	r3, [r4, #12]
	return dev->config;
   1db5c:	6860      	ldr	r0, [r4, #4]
	dev_data->dev = dev;
   1db5e:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1db60:	4a0d      	ldr	r2, [pc, #52]	; (1db98 <spi_2_init+0x4c>)
   1db62:	f100 0108 	add.w	r1, r0, #8
   1db66:	f001 f989 	bl	1ee7c <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1db6a:	4b0c      	ldr	r3, [pc, #48]	; (1db9c <spi_2_init+0x50>)
   1db6c:	4298      	cmp	r0, r3
   1db6e:	d011      	beq.n	1db94 <spi_2_init+0x48>
   1db70:	4b0b      	ldr	r3, [pc, #44]	; (1dba0 <spi_2_init+0x54>)
   1db72:	4a0c      	ldr	r2, [pc, #48]	; (1dba4 <spi_2_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1db74:	6821      	ldr	r1, [r4, #0]
   1db76:	480c      	ldr	r0, [pc, #48]	; (1dba8 <spi_2_init+0x5c>)
   1db78:	1ad2      	subs	r2, r2, r3
   1db7a:	08d2      	lsrs	r2, r2, #3
   1db7c:	0192      	lsls	r2, r2, #6
   1db7e:	f042 0201 	orr.w	r2, r2, #1
   1db82:	f004 fbc0 	bl	22306 <log_1>
		return -EBUSY;
   1db86:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(2);
   1db8a:	68e0      	ldr	r0, [r4, #12]
   1db8c:	f008 fd37 	bl	265fe <spi_context_unlock_unconditionally>
   1db90:	4628      	mov	r0, r5
   1db92:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1db94:	2500      	movs	r5, #0
   1db96:	e7f8      	b.n	1db8a <spi_2_init+0x3e>
   1db98:	0001dc29 	.word	0x0001dc29
   1db9c:	0bad0000 	.word	0x0bad0000
   1dba0:	0002775c 	.word	0x0002775c
   1dba4:	000278b4 	.word	0x000278b4
   1dba8:	0002d5b1 	.word	0x0002d5b1

0001dbac <transfer_next_chunk>:
{
   1dbac:	b530      	push	{r4, r5, lr}
	return dev->data;
   1dbae:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1dbb0:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		return ctx->rx_len;
   1dbb2:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1dbb4:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1dbb6:	b982      	cbnz	r2, 1dbda <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1dbb8:	bb73      	cbnz	r3, 1dc18 <transfer_next_chunk+0x6c>
	int error = 0;
   1dbba:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1dbbc:	2200      	movs	r2, #0
   1dbbe:	4611      	mov	r1, r2
   1dbc0:	4628      	mov	r0, r5
   1dbc2:	f008 fcf7 	bl	265b4 <_spi_context_cs_control>
	ctx->sync_status = status;
   1dbc6:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1dbc8:	f105 0020 	add.w	r0, r5, #32
   1dbcc:	f002 fb98 	bl	20300 <z_impl_k_sem_give>
	dev_data->busy = false;
   1dbd0:	2300      	movs	r3, #0
   1dbd2:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1dbd6:	b005      	add	sp, #20
   1dbd8:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1dbda:	4611      	mov	r1, r2
   1dbdc:	b113      	cbz	r3, 1dbe4 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1dbde:	429a      	cmp	r2, r3
   1dbe0:	bf28      	it	cs
   1dbe2:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1dbe4:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1dbe6:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1dbe8:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1dbea:	b1bc      	cbz	r4, 1dc1c <transfer_next_chunk+0x70>
   1dbec:	2a00      	cmp	r2, #0
   1dbee:	bf18      	it	ne
   1dbf0:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dbf2:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1dbf4:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1dbf6:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1dbf8:	b192      	cbz	r2, 1dc20 <transfer_next_chunk+0x74>
   1dbfa:	2b00      	cmp	r3, #0
   1dbfc:	bf18      	it	ne
   1dbfe:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1dc00:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dc02:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1dc04:	2200      	movs	r2, #0
   1dc06:	4669      	mov	r1, sp
   1dc08:	f001 f9da 	bl	1efc0 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1dc0c:	4b05      	ldr	r3, [pc, #20]	; (1dc24 <transfer_next_chunk+0x78>)
   1dc0e:	4298      	cmp	r0, r3
   1dc10:	d0e1      	beq.n	1dbd6 <transfer_next_chunk+0x2a>
		error = -EIO;
   1dc12:	f06f 0404 	mvn.w	r4, #4
   1dc16:	e7d1      	b.n	1dbbc <transfer_next_chunk+0x10>
   1dc18:	4619      	mov	r1, r3
   1dc1a:	e7e3      	b.n	1dbe4 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dc1c:	4622      	mov	r2, r4
   1dc1e:	e7e8      	b.n	1dbf2 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dc20:	4613      	mov	r3, r2
   1dc22:	e7ed      	b.n	1dc00 <transfer_next_chunk+0x54>
   1dc24:	0bad0000 	.word	0x0bad0000

0001dc28 <event_handler>:
{
   1dc28:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1dc2a:	7803      	ldrb	r3, [r0, #0]
{
   1dc2c:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1dc2e:	2b00      	cmp	r3, #0
   1dc30:	d14e      	bne.n	1dcd0 <event_handler+0xa8>
	if (!ctx->tx_len) {
   1dc32:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1dc34:	b163      	cbz	r3, 1dc50 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dc36:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1dc38:	429a      	cmp	r2, r3
   1dc3a:	d91d      	bls.n	1dc78 <event_handler+0x50>
   1dc3c:	4925      	ldr	r1, [pc, #148]	; (1dcd4 <event_handler+0xac>)
   1dc3e:	4b26      	ldr	r3, [pc, #152]	; (1dcd8 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1dc40:	4826      	ldr	r0, [pc, #152]	; (1dcdc <event_handler+0xb4>)
   1dc42:	1ac9      	subs	r1, r1, r3
   1dc44:	08c9      	lsrs	r1, r1, #3
   1dc46:	0189      	lsls	r1, r1, #6
   1dc48:	f041 0101 	orr.w	r1, r1, #1
   1dc4c:	f004 fb4e 	bl	222ec <log_0>
	if (!ctx->rx_len) {
   1dc50:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1dc52:	b163      	cbz	r3, 1dc6e <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dc54:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1dc56:	429a      	cmp	r2, r3
   1dc58:	d924      	bls.n	1dca4 <event_handler+0x7c>
   1dc5a:	491e      	ldr	r1, [pc, #120]	; (1dcd4 <event_handler+0xac>)
   1dc5c:	4b1e      	ldr	r3, [pc, #120]	; (1dcd8 <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1dc5e:	481f      	ldr	r0, [pc, #124]	; (1dcdc <event_handler+0xb4>)
   1dc60:	1ac9      	subs	r1, r1, r3
   1dc62:	08c9      	lsrs	r1, r1, #3
   1dc64:	0189      	lsls	r1, r1, #6
   1dc66:	f041 0101 	orr.w	r1, r1, #1
   1dc6a:	f004 fb3f 	bl	222ec <log_0>
		transfer_next_chunk(dev_data->dev);
   1dc6e:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1dc70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1dc74:	f7ff bf9a 	b.w	1dbac <transfer_next_chunk>
	ctx->tx_len -= len;
   1dc78:	1a9b      	subs	r3, r3, r2
   1dc7a:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1dc7c:	b963      	cbnz	r3, 1dc98 <event_handler+0x70>
		ctx->tx_count--;
   1dc7e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1dc80:	3b01      	subs	r3, #1
   1dc82:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1dc84:	b163      	cbz	r3, 1dca0 <event_handler+0x78>
			ctx->current_tx++;
   1dc86:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1dc88:	f103 0208 	add.w	r2, r3, #8
   1dc8c:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1dc8e:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1dc90:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1dc92:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1dc94:	650b      	str	r3, [r1, #80]	; 0x50
   1dc96:	e7db      	b.n	1dc50 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1dc98:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1dc9a:	2b00      	cmp	r3, #0
   1dc9c:	d0d8      	beq.n	1dc50 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1dc9e:	4413      	add	r3, r2
   1dca0:	64e3      	str	r3, [r4, #76]	; 0x4c
   1dca2:	e7d5      	b.n	1dc50 <event_handler+0x28>
	ctx->rx_len -= len;
   1dca4:	1a9b      	subs	r3, r3, r2
   1dca6:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1dca8:	b963      	cbnz	r3, 1dcc4 <event_handler+0x9c>
		ctx->rx_count--;
   1dcaa:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1dcac:	3b01      	subs	r3, #1
   1dcae:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1dcb0:	b163      	cbz	r3, 1dccc <event_handler+0xa4>
			ctx->current_rx++;
   1dcb2:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1dcb4:	f103 0208 	add.w	r2, r3, #8
   1dcb8:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1dcba:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1dcbc:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1dcbe:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1dcc0:	65a3      	str	r3, [r4, #88]	; 0x58
   1dcc2:	e7d4      	b.n	1dc6e <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1dcc4:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1dcc6:	2b00      	cmp	r3, #0
   1dcc8:	d0d1      	beq.n	1dc6e <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1dcca:	4413      	add	r3, r2
   1dccc:	6563      	str	r3, [r4, #84]	; 0x54
   1dcce:	e7ce      	b.n	1dc6e <event_handler+0x46>
}
   1dcd0:	bd10      	pop	{r4, pc}
   1dcd2:	bf00      	nop
   1dcd4:	000278b4 	.word	0x000278b4
   1dcd8:	0002775c 	.word	0x0002775c
   1dcdc:	0002d63b 	.word	0x0002d63b

0001dce0 <spi_nrfx_transceive>:
{
   1dce0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dce4:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dce6:	888b      	ldrh	r3, [r1, #4]
	return dev->data;
   1dce8:	68c4      	ldr	r4, [r0, #12]
   1dcea:	045b      	lsls	r3, r3, #17
{
   1dcec:	4680      	mov	r8, r0
   1dcee:	460d      	mov	r5, r1
   1dcf0:	4617      	mov	r7, r2
   1dcf2:	d42d      	bmi.n	1dd50 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   1dcf4:	f04f 32ff 	mov.w	r2, #4294967295
   1dcf8:	f04f 33ff 	mov.w	r3, #4294967295
   1dcfc:	f104 0008 	add.w	r0, r4, #8
   1dd00:	f002 fb24 	bl	2034c <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1dd04:	6065      	str	r5, [r4, #4]
	return dev->data;
   1dd06:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   1dd0a:	6813      	ldr	r3, [r2, #0]
   1dd0c:	429d      	cmp	r5, r3
   1dd0e:	f000 80b1 	beq.w	1de74 <spi_nrfx_transceive+0x194>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1dd12:	88ab      	ldrh	r3, [r5, #4]
   1dd14:	07d8      	lsls	r0, r3, #31
   1dd16:	d522      	bpl.n	1dd5e <spi_nrfx_transceive+0x7e>
   1dd18:	4a82      	ldr	r2, [pc, #520]	; (1df24 <spi_nrfx_transceive+0x244>)
   1dd1a:	4b83      	ldr	r3, [pc, #524]	; (1df28 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Slave mode is not supported on %s",
   1dd1c:	f8d8 1000 	ldr.w	r1, [r8]
   1dd20:	4882      	ldr	r0, [pc, #520]	; (1df2c <spi_nrfx_transceive+0x24c>)
   1dd22:	1ad2      	subs	r2, r2, r3
   1dd24:	08d2      	lsrs	r2, r2, #3
   1dd26:	0192      	lsls	r2, r2, #6
   1dd28:	f042 0201 	orr.w	r2, r2, #1
   1dd2c:	f004 faeb 	bl	22306 <log_1>
		return -EINVAL;
   1dd30:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1dd34:	6823      	ldr	r3, [r4, #0]
   1dd36:	889b      	ldrh	r3, [r3, #4]
   1dd38:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1dd3c:	d104      	bne.n	1dd48 <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   1dd3e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1dd40:	f104 0008 	add.w	r0, r4, #8
   1dd44:	f002 fadc 	bl	20300 <z_impl_k_sem_give>
}
   1dd48:	4628      	mov	r0, r5
   1dd4a:	b003      	add	sp, #12
   1dd4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1dd50:	6923      	ldr	r3, [r4, #16]
   1dd52:	2b00      	cmp	r3, #0
   1dd54:	d1ce      	bne.n	1dcf4 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1dd56:	6863      	ldr	r3, [r4, #4]
   1dd58:	4299      	cmp	r1, r3
   1dd5a:	d1cb      	bne.n	1dcf4 <spi_nrfx_transceive+0x14>
   1dd5c:	e7d3      	b.n	1dd06 <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1dd5e:	0719      	lsls	r1, r3, #28
   1dd60:	d50a      	bpl.n	1dd78 <spi_nrfx_transceive+0x98>
   1dd62:	4970      	ldr	r1, [pc, #448]	; (1df24 <spi_nrfx_transceive+0x244>)
   1dd64:	4b70      	ldr	r3, [pc, #448]	; (1df28 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Loopback mode is not supported");
   1dd66:	4872      	ldr	r0, [pc, #456]	; (1df30 <spi_nrfx_transceive+0x250>)
   1dd68:	1ac9      	subs	r1, r1, r3
   1dd6a:	08c9      	lsrs	r1, r1, #3
   1dd6c:	0189      	lsls	r1, r1, #6
   1dd6e:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1dd72:	f004 fabb 	bl	222ec <log_0>
   1dd76:	e7db      	b.n	1dd30 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1dd78:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1dd7c:	d008      	beq.n	1dd90 <spi_nrfx_transceive+0xb0>
   1dd7e:	4969      	ldr	r1, [pc, #420]	; (1df24 <spi_nrfx_transceive+0x244>)
   1dd80:	4b69      	ldr	r3, [pc, #420]	; (1df28 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Only single line mode is supported");
   1dd82:	486c      	ldr	r0, [pc, #432]	; (1df34 <spi_nrfx_transceive+0x254>)
   1dd84:	1ac9      	subs	r1, r1, r3
   1dd86:	08c9      	lsrs	r1, r1, #3
   1dd88:	0189      	lsls	r1, r1, #6
   1dd8a:	f041 0101 	orr.w	r1, r1, #1
   1dd8e:	e7f0      	b.n	1dd72 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1dd90:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1dd94:	2b08      	cmp	r3, #8
   1dd96:	d008      	beq.n	1ddaa <spi_nrfx_transceive+0xca>
   1dd98:	4962      	ldr	r1, [pc, #392]	; (1df24 <spi_nrfx_transceive+0x244>)
   1dd9a:	4b63      	ldr	r3, [pc, #396]	; (1df28 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Word sizes other than 8 bits"
   1dd9c:	4866      	ldr	r0, [pc, #408]	; (1df38 <spi_nrfx_transceive+0x258>)
   1dd9e:	1ac9      	subs	r1, r1, r3
   1dda0:	08c9      	lsrs	r1, r1, #3
   1dda2:	0189      	lsls	r1, r1, #6
   1dda4:	f041 0101 	orr.w	r1, r1, #1
   1dda8:	e7e3      	b.n	1dd72 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   1ddaa:	6829      	ldr	r1, [r5, #0]
   1ddac:	4b63      	ldr	r3, [pc, #396]	; (1df3c <spi_nrfx_transceive+0x25c>)
   1ddae:	4299      	cmp	r1, r3
   1ddb0:	d808      	bhi.n	1ddc4 <spi_nrfx_transceive+0xe4>
   1ddb2:	495c      	ldr	r1, [pc, #368]	; (1df24 <spi_nrfx_transceive+0x244>)
   1ddb4:	4b5c      	ldr	r3, [pc, #368]	; (1df28 <spi_nrfx_transceive+0x248>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1ddb6:	4862      	ldr	r0, [pc, #392]	; (1df40 <spi_nrfx_transceive+0x260>)
   1ddb8:	1ac9      	subs	r1, r1, r3
   1ddba:	08c9      	lsrs	r1, r1, #3
   1ddbc:	0189      	lsls	r1, r1, #6
   1ddbe:	f041 0101 	orr.w	r1, r1, #1
   1ddc2:	e7d6      	b.n	1dd72 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1ddc4:	68ab      	ldr	r3, [r5, #8]
	return dev->config;
   1ddc6:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1ddca:	6015      	str	r5, [r2, #0]
   1ddcc:	2b00      	cmp	r3, #0
   1ddce:	d07b      	beq.n	1dec8 <spi_nrfx_transceive+0x1e8>
   1ddd0:	6818      	ldr	r0, [r3, #0]
   1ddd2:	2800      	cmp	r0, #0
   1ddd4:	d078      	beq.n	1dec8 <spi_nrfx_transceive+0x1e8>
				   ctx->config->cs->gpio_dt_flags |
   1ddd6:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1ddda:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1dddc:	f8d0 b00c 	ldr.w	fp, [r0, #12]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1dde0:	f01a 0f01 	tst.w	sl, #1
   1dde4:	bf0c      	ite	eq
   1dde6:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   1ddea:	f48a 6a20 	eorne.w	sl, sl, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   1ddee:	6883      	ldr	r3, [r0, #8]
   1ddf0:	9101      	str	r1, [sp, #4]
   1ddf2:	681b      	ldr	r3, [r3, #0]
   1ddf4:	4652      	mov	r2, sl
   1ddf6:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1ddf8:	b960      	cbnz	r0, 1de14 <spi_nrfx_transceive+0x134>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1ddfa:	9901      	ldr	r1, [sp, #4]
   1ddfc:	f8db 3000 	ldr.w	r3, [fp]
   1de00:	2201      	movs	r2, #1
   1de02:	fa02 f101 	lsl.w	r1, r2, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1de06:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1de0a:	bf14      	ite	ne
   1de0c:	430b      	orrne	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1de0e:	438b      	biceq	r3, r1
   1de10:	f8cb 3000 	str.w	r3, [fp]
	nrf_spi_configure(spi->p_reg,
   1de14:	88a9      	ldrh	r1, [r5, #4]
   1de16:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1de1a:	0788      	lsls	r0, r1, #30
   1de1c:	f001 0304 	and.w	r3, r1, #4
   1de20:	d55d      	bpl.n	1dede <spi_nrfx_transceive+0x1fe>
			return NRF_SPI_MODE_2;
   1de22:	2b00      	cmp	r3, #0
   1de24:	bf14      	ite	ne
   1de26:	2303      	movne	r3, #3
   1de28:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1de2a:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1de2c:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1de30:	d059      	beq.n	1dee6 <spi_nrfx_transceive+0x206>
   1de32:	2b03      	cmp	r3, #3
   1de34:	d05a      	beq.n	1deec <spi_nrfx_transceive+0x20c>
   1de36:	2b01      	cmp	r3, #1
   1de38:	d101      	bne.n	1de3e <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1de3a:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1de3e:	4b41      	ldr	r3, [pc, #260]	; (1df44 <spi_nrfx_transceive+0x264>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1de40:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1de44:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1de46:	4299      	cmp	r1, r3
   1de48:	d953      	bls.n	1def2 <spi_nrfx_transceive+0x212>
	} else if (frequency < 500000) {
   1de4a:	4b3f      	ldr	r3, [pc, #252]	; (1df48 <spi_nrfx_transceive+0x268>)
   1de4c:	4299      	cmp	r1, r3
   1de4e:	d953      	bls.n	1def8 <spi_nrfx_transceive+0x218>
	} else if (frequency < 1000000) {
   1de50:	4b3e      	ldr	r3, [pc, #248]	; (1df4c <spi_nrfx_transceive+0x26c>)
   1de52:	4299      	cmp	r1, r3
   1de54:	d953      	bls.n	1defe <spi_nrfx_transceive+0x21e>
	} else if (frequency < 2000000) {
   1de56:	4b3e      	ldr	r3, [pc, #248]	; (1df50 <spi_nrfx_transceive+0x270>)
   1de58:	4299      	cmp	r1, r3
   1de5a:	d953      	bls.n	1df04 <spi_nrfx_transceive+0x224>
	} else if (frequency < 4000000) {
   1de5c:	4b3d      	ldr	r3, [pc, #244]	; (1df54 <spi_nrfx_transceive+0x274>)
   1de5e:	4299      	cmp	r1, r3
   1de60:	d953      	bls.n	1df0a <spi_nrfx_transceive+0x22a>
		return NRF_SPI_FREQ_8M;
   1de62:	4b3d      	ldr	r3, [pc, #244]	; (1df58 <spi_nrfx_transceive+0x278>)
   1de64:	4299      	cmp	r1, r3
   1de66:	bf34      	ite	cc
   1de68:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1de6c:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1de70:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1de74:	2301      	movs	r3, #1
   1de76:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1de7a:	2f00      	cmp	r7, #0
   1de7c:	d048      	beq.n	1df10 <spi_nrfx_transceive+0x230>
		ctx->current_tx = tx_bufs->buffers;
   1de7e:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1de80:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1de82:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1de84:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1de86:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1de88:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1de8a:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1de8c:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1de8e:	2e00      	cmp	r6, #0
   1de90:	d043      	beq.n	1df1a <spi_nrfx_transceive+0x23a>
		ctx->current_rx = rx_bufs->buffers;
   1de92:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1de94:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1de96:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1de98:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1de9a:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1de9c:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1de9e:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1dea0:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1dea2:	2200      	movs	r2, #0
   1dea4:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1dea6:	2101      	movs	r1, #1
   1dea8:	4620      	mov	r0, r4
   1deaa:	f008 fb83 	bl	265b4 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1deae:	4640      	mov	r0, r8
   1deb0:	f7ff fe7c 	bl	1dbac <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1deb4:	f04f 32ff 	mov.w	r2, #4294967295
   1deb8:	f04f 33ff 	mov.w	r3, #4294967295
   1debc:	f104 0020 	add.w	r0, r4, #32
   1dec0:	f002 fa44 	bl	2034c <z_impl_k_sem_take>
	status = ctx->sync_status;
   1dec4:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1dec6:	e735      	b.n	1dd34 <spi_nrfx_transceive+0x54>
   1dec8:	4b17      	ldr	r3, [pc, #92]	; (1df28 <spi_nrfx_transceive+0x248>)
   1deca:	4916      	ldr	r1, [pc, #88]	; (1df24 <spi_nrfx_transceive+0x244>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1decc:	4823      	ldr	r0, [pc, #140]	; (1df5c <spi_nrfx_transceive+0x27c>)
   1dece:	1ac9      	subs	r1, r1, r3
   1ded0:	08c9      	lsrs	r1, r1, #3
   1ded2:	0189      	lsls	r1, r1, #6
   1ded4:	f041 0103 	orr.w	r1, r1, #3
   1ded8:	f004 fa08 	bl	222ec <log_0>
   1dedc:	e79a      	b.n	1de14 <spi_nrfx_transceive+0x134>
			return NRF_SPI_MODE_0;
   1dede:	3b00      	subs	r3, #0
   1dee0:	bf18      	it	ne
   1dee2:	2301      	movne	r3, #1
   1dee4:	e7a1      	b.n	1de2a <spi_nrfx_transceive+0x14a>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1dee6:	f041 0104 	orr.w	r1, r1, #4
        break;
   1deea:	e7a8      	b.n	1de3e <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1deec:	f041 0106 	orr.w	r1, r1, #6
        break;
   1def0:	e7a5      	b.n	1de3e <spi_nrfx_transceive+0x15e>
		return NRF_SPI_FREQ_125K;
   1def2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1def6:	e7bb      	b.n	1de70 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_250K;
   1def8:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1defc:	e7b8      	b.n	1de70 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_500K;
   1defe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1df02:	e7b5      	b.n	1de70 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_1M;
   1df04:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1df08:	e7b2      	b.n	1de70 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_2M;
   1df0a:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1df0e:	e7af      	b.n	1de70 <spi_nrfx_transceive+0x190>
		ctx->tx_count = 0;
   1df10:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1df14:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1df18:	e7b9      	b.n	1de8e <spi_nrfx_transceive+0x1ae>
		ctx->rx_count = 0;
   1df1a:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1df1e:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1df22:	e7be      	b.n	1dea2 <spi_nrfx_transceive+0x1c2>
   1df24:	000278b4 	.word	0x000278b4
   1df28:	0002775c 	.word	0x0002775c
   1df2c:	0002d659 	.word	0x0002d659
   1df30:	0002d67b 	.word	0x0002d67b
   1df34:	0002d69a 	.word	0x0002d69a
   1df38:	0002d6bd 	.word	0x0002d6bd
   1df3c:	0001e847 	.word	0x0001e847
   1df40:	0002d6ec 	.word	0x0002d6ec
   1df44:	0003d08f 	.word	0x0003d08f
   1df48:	0007a11f 	.word	0x0007a11f
   1df4c:	000f423f 	.word	0x000f423f
   1df50:	001e847f 	.word	0x001e847f
   1df54:	003d08ff 	.word	0x003d08ff
   1df58:	007a1200 	.word	0x007a1200
   1df5c:	0002d71d 	.word	0x0002d71d

0001df60 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1df60:	4b02      	ldr	r3, [pc, #8]	; (1df6c <flash_nrf_pages_layout+0xc>)
   1df62:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1df64:	2301      	movs	r3, #1
   1df66:	6013      	str	r3, [r2, #0]
}
   1df68:	4770      	bx	lr
   1df6a:	bf00      	nop
   1df6c:	2000eb94 	.word	0x2000eb94

0001df70 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1df70:	4800      	ldr	r0, [pc, #0]	; (1df74 <flash_nrf_get_parameters+0x4>)
   1df72:	4770      	bx	lr
   1df74:	00029124 	.word	0x00029124

0001df78 <flash_nrf_read>:
{
   1df78:	b570      	push	{r4, r5, r6, lr}
   1df7a:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1df7c:	4628      	mov	r0, r5
   1df7e:	4619      	mov	r1, r3
{
   1df80:	4616      	mov	r6, r2
   1df82:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1df84:	f008 fb5f 	bl	26646 <is_regular_addr_valid>
   1df88:	b970      	cbnz	r0, 1dfa8 <flash_nrf_read+0x30>
   1df8a:	4a0c      	ldr	r2, [pc, #48]	; (1dfbc <flash_nrf_read+0x44>)
   1df8c:	4b0c      	ldr	r3, [pc, #48]	; (1dfc0 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1df8e:	480d      	ldr	r0, [pc, #52]	; (1dfc4 <flash_nrf_read+0x4c>)
   1df90:	1a9b      	subs	r3, r3, r2
   1df92:	08db      	lsrs	r3, r3, #3
   1df94:	019b      	lsls	r3, r3, #6
   1df96:	f043 0301 	orr.w	r3, r3, #1
   1df9a:	4622      	mov	r2, r4
   1df9c:	4629      	mov	r1, r5
   1df9e:	f004 f9c6 	bl	2232e <log_2>
		return -EINVAL;
   1dfa2:	f06f 0015 	mvn.w	r0, #21
}
   1dfa6:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1dfa8:	b134      	cbz	r4, 1dfb8 <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1dfaa:	4622      	mov	r2, r4
   1dfac:	4629      	mov	r1, r5
   1dfae:	4630      	mov	r0, r6
   1dfb0:	f006 f9a8 	bl	24304 <memcpy>
	return 0;
   1dfb4:	2000      	movs	r0, #0
   1dfb6:	e7f6      	b.n	1dfa6 <flash_nrf_read+0x2e>
		return 0;
   1dfb8:	4620      	mov	r0, r4
   1dfba:	e7f4      	b.n	1dfa6 <flash_nrf_read+0x2e>
   1dfbc:	0002775c 	.word	0x0002775c
   1dfc0:	00027854 	.word	0x00027854
   1dfc4:	0002d750 	.word	0x0002d750

0001dfc8 <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1dfc8:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1dfca:	2201      	movs	r2, #1
   1dfcc:	4611      	mov	r1, r2
   1dfce:	4807      	ldr	r0, [pc, #28]	; (1dfec <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1dfd0:	4c07      	ldr	r4, [pc, #28]	; (1dff0 <nrf_flash_init+0x28>)
   1dfd2:	f008 ffc4 	bl	26f5e <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1dfd6:	f000 f97d 	bl	1e2d4 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1dfda:	f008 fc72 	bl	268c2 <nrfx_nvmc_flash_page_count_get>
   1dfde:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1dfe0:	f008 fc6b 	bl	268ba <nrfx_nvmc_flash_page_size_get>
   1dfe4:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1dfe6:	2000      	movs	r0, #0
   1dfe8:	bd10      	pop	{r4, pc}
   1dfea:	bf00      	nop
   1dfec:	2000eb9c 	.word	0x2000eb9c
   1dff0:	2000eb94 	.word	0x2000eb94

0001dff4 <flash_nrf_erase>:
{
   1dff4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1dff6:	b087      	sub	sp, #28
   1dff8:	460e      	mov	r6, r1
   1dffa:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1dffc:	f008 fc5d 	bl	268ba <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e000:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e002:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e004:	4630      	mov	r0, r6
   1e006:	f008 fb1e 	bl	26646 <is_regular_addr_valid>
   1e00a:	b388      	cbz	r0, 1e070 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e00c:	fbb6 f3f7 	udiv	r3, r6, r7
   1e010:	fb07 6313 	mls	r3, r7, r3, r6
   1e014:	b923      	cbnz	r3, 1e020 <flash_nrf_erase+0x2c>
   1e016:	fbb5 f4f7 	udiv	r4, r5, r7
   1e01a:	fb07 5414 	mls	r4, r7, r4, r5
   1e01e:	b184      	cbz	r4, 1e042 <flash_nrf_erase+0x4e>
   1e020:	4a25      	ldr	r2, [pc, #148]	; (1e0b8 <flash_nrf_erase+0xc4>)
   1e022:	4b26      	ldr	r3, [pc, #152]	; (1e0bc <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e024:	4826      	ldr	r0, [pc, #152]	; (1e0c0 <flash_nrf_erase+0xcc>)
   1e026:	1a9b      	subs	r3, r3, r2
   1e028:	08db      	lsrs	r3, r3, #3
   1e02a:	019b      	lsls	r3, r3, #6
   1e02c:	f043 0301 	orr.w	r3, r3, #1
   1e030:	462a      	mov	r2, r5
   1e032:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e034:	f004 f97b 	bl	2232e <log_2>
		return -EINVAL;
   1e038:	f06f 0415 	mvn.w	r4, #21
}
   1e03c:	4620      	mov	r0, r4
   1e03e:	b007      	add	sp, #28
   1e040:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e042:	42bd      	cmp	r5, r7
   1e044:	d3fa      	bcc.n	1e03c <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1e046:	f04f 33ff 	mov.w	r3, #4294967295
   1e04a:	f04f 32ff 	mov.w	r2, #4294967295
   1e04e:	481d      	ldr	r0, [pc, #116]	; (1e0c4 <flash_nrf_erase+0xd0>)
   1e050:	f002 f97c 	bl	2034c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e054:	f008 fb2f 	bl	266b6 <nrf_flash_sync_is_required>
   1e058:	ab02      	add	r3, sp, #8
   1e05a:	4601      	mov	r1, r0
   1e05c:	b998      	cbnz	r0, 1e086 <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1e05e:	2210      	movs	r2, #16
   1e060:	4618      	mov	r0, r3
   1e062:	f006 f97a 	bl	2435a <memset>
   1e066:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1e06a:	f008 faff 	bl	2666c <erase_op>
   1e06e:	e01d      	b.n	1e0ac <flash_nrf_erase+0xb8>
   1e070:	4a11      	ldr	r2, [pc, #68]	; (1e0b8 <flash_nrf_erase+0xc4>)
   1e072:	4b12      	ldr	r3, [pc, #72]	; (1e0bc <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e074:	4814      	ldr	r0, [pc, #80]	; (1e0c8 <flash_nrf_erase+0xd4>)
   1e076:	1a9b      	subs	r3, r3, r2
   1e078:	08db      	lsrs	r3, r3, #3
   1e07a:	019b      	lsls	r3, r3, #6
   1e07c:	f043 0301 	orr.w	r3, r3, #1
   1e080:	462a      	mov	r2, r5
   1e082:	4631      	mov	r1, r6
   1e084:	e7d6      	b.n	1e034 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1e086:	2210      	movs	r2, #16
   1e088:	4621      	mov	r1, r4
   1e08a:	4618      	mov	r0, r3
   1e08c:	f006 f965 	bl	2435a <memset>
   1e090:	2201      	movs	r2, #1
   1e092:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e096:	4a0d      	ldr	r2, [pc, #52]	; (1e0cc <flash_nrf_erase+0xd8>)
   1e098:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e09c:	480c      	ldr	r0, [pc, #48]	; (1e0d0 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1e09e:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e0a2:	f000 f921 	bl	1e2e8 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e0a6:	4668      	mov	r0, sp
   1e0a8:	f7e4 fb86 	bl	27b8 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e0ac:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e0ae:	4805      	ldr	r0, [pc, #20]	; (1e0c4 <flash_nrf_erase+0xd0>)
   1e0b0:	f002 f926 	bl	20300 <z_impl_k_sem_give>
}
   1e0b4:	e7c2      	b.n	1e03c <flash_nrf_erase+0x48>
   1e0b6:	bf00      	nop
   1e0b8:	0002775c 	.word	0x0002775c
   1e0bc:	00027854 	.word	0x00027854
   1e0c0:	0002d76d 	.word	0x0002d76d
   1e0c4:	2000eb9c 	.word	0x2000eb9c
   1e0c8:	0002d750 	.word	0x0002d750
   1e0cc:	0002666d 	.word	0x0002666d
   1e0d0:	00015e64 	.word	0x00015e64

0001e0d4 <write_op>:
{
   1e0d4:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1e0d6:	7b03      	ldrb	r3, [r0, #12]
{
   1e0d8:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e0da:	b10b      	cbz	r3, 1e0e0 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e0dc:	f000 f90c 	bl	1e2f8 <nrf_flash_sync_get_timestamp_begin>
{
   1e0e0:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e0e2:	68a3      	ldr	r3, [r4, #8]
   1e0e4:	2b03      	cmp	r3, #3
   1e0e6:	d806      	bhi.n	1e0f6 <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e0e8:	4a12      	ldr	r2, [pc, #72]	; (1e134 <write_op+0x60>)
   1e0ea:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e0ee:	07db      	lsls	r3, r3, #31
   1e0f0:	d5fb      	bpl.n	1e0ea <write_op+0x16>
	return FLASH_OP_DONE;
   1e0f2:	2000      	movs	r0, #0
}
   1e0f4:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e0f6:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e0f8:	6860      	ldr	r0, [r4, #4]
   1e0fa:	6819      	ldr	r1, [r3, #0]
   1e0fc:	f000 fe68 	bl	1edd0 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1e100:	6863      	ldr	r3, [r4, #4]
   1e102:	3304      	adds	r3, #4
   1e104:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e106:	6823      	ldr	r3, [r4, #0]
   1e108:	3304      	adds	r3, #4
   1e10a:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e10c:	68a3      	ldr	r3, [r4, #8]
   1e10e:	3b04      	subs	r3, #4
   1e110:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e112:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e114:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e116:	2b00      	cmp	r3, #0
   1e118:	d0e3      	beq.n	1e0e2 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e11a:	4628      	mov	r0, r5
   1e11c:	f7e4 fbc8 	bl	28b0 <nrf_flash_sync_check_time_limit>
   1e120:	2800      	cmp	r0, #0
   1e122:	d0de      	beq.n	1e0e2 <write_op+0xe>
   1e124:	4a03      	ldr	r2, [pc, #12]	; (1e134 <write_op+0x60>)
   1e126:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e12a:	07d9      	lsls	r1, r3, #31
   1e12c:	d5fb      	bpl.n	1e126 <write_op+0x52>
				return FLASH_OP_ONGOING;
   1e12e:	f04f 30ff 	mov.w	r0, #4294967295
   1e132:	e7df      	b.n	1e0f4 <write_op+0x20>
   1e134:	4001e000 	.word	0x4001e000

0001e138 <flash_nrf_write>:
{
   1e138:	b570      	push	{r4, r5, r6, lr}
   1e13a:	460d      	mov	r5, r1
   1e13c:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1e13e:	4619      	mov	r1, r3
   1e140:	4628      	mov	r0, r5
{
   1e142:	4616      	mov	r6, r2
   1e144:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e146:	f008 fa7e 	bl	26646 <is_regular_addr_valid>
   1e14a:	b980      	cbnz	r0, 1e16e <flash_nrf_write+0x36>
   1e14c:	4a23      	ldr	r2, [pc, #140]	; (1e1dc <flash_nrf_write+0xa4>)
   1e14e:	4b24      	ldr	r3, [pc, #144]	; (1e1e0 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e150:	4824      	ldr	r0, [pc, #144]	; (1e1e4 <flash_nrf_write+0xac>)
   1e152:	1a9b      	subs	r3, r3, r2
   1e154:	08db      	lsrs	r3, r3, #3
   1e156:	019b      	lsls	r3, r3, #6
   1e158:	f043 0301 	orr.w	r3, r3, #1
   1e15c:	4622      	mov	r2, r4
   1e15e:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e160:	f004 f8e5 	bl	2232e <log_2>
		return -EINVAL;
   1e164:	f06f 0415 	mvn.w	r4, #21
}
   1e168:	4620      	mov	r0, r4
   1e16a:	b006      	add	sp, #24
   1e16c:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e16e:	ea44 0305 	orr.w	r3, r4, r5
   1e172:	079b      	lsls	r3, r3, #30
   1e174:	d00a      	beq.n	1e18c <flash_nrf_write+0x54>
   1e176:	4a19      	ldr	r2, [pc, #100]	; (1e1dc <flash_nrf_write+0xa4>)
   1e178:	4b19      	ldr	r3, [pc, #100]	; (1e1e0 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e17a:	481b      	ldr	r0, [pc, #108]	; (1e1e8 <flash_nrf_write+0xb0>)
   1e17c:	1a9b      	subs	r3, r3, r2
   1e17e:	08db      	lsrs	r3, r3, #3
   1e180:	019b      	lsls	r3, r3, #6
   1e182:	f043 0301 	orr.w	r3, r3, #1
   1e186:	4622      	mov	r2, r4
   1e188:	4629      	mov	r1, r5
   1e18a:	e7e9      	b.n	1e160 <flash_nrf_write+0x28>
	if (!len) {
   1e18c:	2c00      	cmp	r4, #0
   1e18e:	d0eb      	beq.n	1e168 <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1e190:	f04f 33ff 	mov.w	r3, #4294967295
   1e194:	f04f 32ff 	mov.w	r2, #4294967295
   1e198:	4814      	ldr	r0, [pc, #80]	; (1e1ec <flash_nrf_write+0xb4>)
   1e19a:	f002 f8d7 	bl	2034c <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e19e:	f008 fa8a 	bl	266b6 <nrf_flash_sync_is_required>
   1e1a2:	4603      	mov	r3, r0
	struct flash_context context = {
   1e1a4:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1e1a8:	a802      	add	r0, sp, #8
   1e1aa:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1e1ac:	b18b      	cbz	r3, 1e1d2 <flash_nrf_write+0x9a>
	struct flash_context context = {
   1e1ae:	2301      	movs	r3, #1
   1e1b0:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e1b4:	4b0e      	ldr	r3, [pc, #56]	; (1e1f0 <flash_nrf_write+0xb8>)
   1e1b6:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e1ba:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e1be:	f000 f893 	bl	1e2e8 <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e1c2:	4668      	mov	r0, sp
   1e1c4:	f7e4 faf8 	bl	27b8 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1e1c8:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e1ca:	4808      	ldr	r0, [pc, #32]	; (1e1ec <flash_nrf_write+0xb4>)
   1e1cc:	f002 f898 	bl	20300 <z_impl_k_sem_give>
}
   1e1d0:	e7ca      	b.n	1e168 <flash_nrf_write+0x30>
	struct flash_context context = {
   1e1d2:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1e1d6:	f7ff ff7d 	bl	1e0d4 <write_op>
   1e1da:	e7f5      	b.n	1e1c8 <flash_nrf_write+0x90>
   1e1dc:	0002775c 	.word	0x0002775c
   1e1e0:	00027854 	.word	0x00027854
   1e1e4:	0002d750 	.word	0x0002d750
   1e1e8:	0002d78c 	.word	0x0002d78c
   1e1ec:	2000eb9c 	.word	0x2000eb9c
   1e1f0:	0001e0d5 	.word	0x0001e0d5

0001e1f4 <time_slot_callback_work>:
{
   1e1f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1e1f6:	e9d3 2000 	ldrd	r2, r0, [r3]
   1e1fa:	4790      	blx	r2
   1e1fc:	4604      	mov	r4, r0
   1e1fe:	b998      	cbnz	r0, 1e228 <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e200:	f10d 010f 	add.w	r1, sp, #15
   1e204:	f10d 000e 	add.w	r0, sp, #14
   1e208:	f7f6 f856 	bl	142b8 <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e20c:	4623      	mov	r3, r4
   1e20e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1e212:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1e216:	9400      	str	r4, [sp, #0]
   1e218:	4621      	mov	r1, r4
   1e21a:	f7f3 fc9d 	bl	11b58 <ticker_stop>
		_ticker_sync_context.result = 0;
   1e21e:	4b03      	ldr	r3, [pc, #12]	; (1e22c <time_slot_callback_work+0x38>)
   1e220:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   1e222:	4803      	ldr	r0, [pc, #12]	; (1e230 <time_slot_callback_work+0x3c>)
   1e224:	f002 f86c 	bl	20300 <z_impl_k_sem_give>
}
   1e228:	b004      	add	sp, #16
   1e22a:	bd10      	pop	{r4, pc}
   1e22c:	2000ebb4 	.word	0x2000ebb4
   1e230:	2000ebc4 	.word	0x2000ebc4

0001e234 <time_slot_delay>:
{
   1e234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e238:	b08d      	sub	sp, #52	; 0x34
   1e23a:	4606      	mov	r6, r0
   1e23c:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e23e:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1e242:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1e246:	4690      	mov	r8, r2
   1e248:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e24a:	f7f6 f835 	bl	142b8 <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1e24e:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e252:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1e256:	9700      	str	r7, [sp, #0]
   1e258:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1e25a:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e25c:	4633      	mov	r3, r6
   1e25e:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1e262:	e9cd 8905 	strd	r8, r9, [sp, #20]
   1e266:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1e26a:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e26e:	b2ea      	uxtb	r2, r5
   1e270:	4621      	mov	r1, r4
   1e272:	f7f3 fbe7 	bl	11a44 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1e276:	f030 0302 	bics.w	r3, r0, #2
   1e27a:	d00d      	beq.n	1e298 <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   1e27c:	4b08      	ldr	r3, [pc, #32]	; (1e2a0 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e27e:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   1e282:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e284:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1e288:	9400      	str	r4, [sp, #0]
   1e28a:	4623      	mov	r3, r4
   1e28c:	4621      	mov	r1, r4
   1e28e:	f7f3 fc63 	bl	11b58 <ticker_stop>
   1e292:	4804      	ldr	r0, [pc, #16]	; (1e2a4 <time_slot_delay+0x70>)
   1e294:	f002 f834 	bl	20300 <z_impl_k_sem_give>
}
   1e298:	b00d      	add	sp, #52	; 0x34
   1e29a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e29e:	bf00      	nop
   1e2a0:	2000ebb4 	.word	0x2000ebb4
   1e2a4:	2000ebc4 	.word	0x2000ebc4

0001e2a8 <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1e2a8:	4a01      	ldr	r2, [pc, #4]	; (1e2b0 <time_slot_callback_prepare+0x8>)
   1e2aa:	2131      	movs	r1, #49	; 0x31
   1e2ac:	f7ff bfc2 	b.w	1e234 <time_slot_delay>
   1e2b0:	0001e2b5 	.word	0x0001e2b5

0001e2b4 <time_slot_callback_abort>:
{
   1e2b4:	b570      	push	{r4, r5, r6, lr}
   1e2b6:	4604      	mov	r4, r0
   1e2b8:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1e2ba:	f7f6 f803 	bl	142c4 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1e2be:	462b      	mov	r3, r5
   1e2c0:	4620      	mov	r0, r4
   1e2c2:	4a03      	ldr	r2, [pc, #12]	; (1e2d0 <time_slot_callback_abort+0x1c>)
}
   1e2c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1e2c8:	2106      	movs	r1, #6
   1e2ca:	f7ff bfb3 	b.w	1e234 <time_slot_delay>
   1e2ce:	bf00      	nop
   1e2d0:	0001e1f5 	.word	0x0001e1f5

0001e2d4 <nrf_flash_sync_init>:
{
   1e2d4:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e2d6:	2201      	movs	r2, #1
   1e2d8:	2100      	movs	r1, #0
   1e2da:	4802      	ldr	r0, [pc, #8]	; (1e2e4 <nrf_flash_sync_init+0x10>)
   1e2dc:	f008 fe3f 	bl	26f5e <z_impl_k_sem_init>
}
   1e2e0:	2000      	movs	r0, #0
   1e2e2:	bd08      	pop	{r3, pc}
   1e2e4:	2000ebc4 	.word	0x2000ebc4

0001e2e8 <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1e2e8:	4b02      	ldr	r3, [pc, #8]	; (1e2f4 <nrf_flash_sync_set_context+0xc>)
   1e2ea:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1e2ee:	e9c3 2000 	strd	r2, r0, [r3]
}
   1e2f2:	4770      	bx	lr
   1e2f4:	2000ebb4 	.word	0x2000ebb4

0001e2f8 <nrf_flash_sync_get_timestamp_begin>:
{
   1e2f8:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1e2fa:	f7f3 fc6f 	bl	11bdc <ticker_ticks_now_get>
   1e2fe:	4b01      	ldr	r3, [pc, #4]	; (1e304 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1e300:	6098      	str	r0, [r3, #8]
}
   1e302:	bd08      	pop	{r3, pc}
   1e304:	2000ebb4 	.word	0x2000ebb4

0001e308 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1e308:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1e30a:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e30e:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1e310:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1e312:	6002      	str	r2, [r0, #0]
}
   1e314:	4802      	ldr	r0, [pc, #8]	; (1e320 <nrf_gpio_pin_port_decode+0x18>)
   1e316:	bf18      	it	ne
   1e318:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1e31c:	4770      	bx	lr
   1e31e:	bf00      	nop
   1e320:	50000300 	.word	0x50000300

0001e324 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e324:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e326:	794b      	ldrb	r3, [r1, #5]
   1e328:	2b01      	cmp	r3, #1
   1e32a:	d029      	beq.n	1e380 <uarte_nrfx_configure+0x5c>
   1e32c:	2b03      	cmp	r3, #3
   1e32e:	d124      	bne.n	1e37a <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e330:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e332:	798b      	ldrb	r3, [r1, #6]
   1e334:	2b03      	cmp	r3, #3
   1e336:	d120      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e338:	79cc      	ldrb	r4, [r1, #7]
   1e33a:	b124      	cbz	r4, 1e346 <uarte_nrfx_configure+0x22>
   1e33c:	2c01      	cmp	r4, #1
   1e33e:	d11c      	bne.n	1e37a <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1e340:	6843      	ldr	r3, [r0, #4]
   1e342:	791b      	ldrb	r3, [r3, #4]
   1e344:	b1cb      	cbz	r3, 1e37a <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e346:	790a      	ldrb	r2, [r1, #4]
   1e348:	b112      	cbz	r2, 1e350 <uarte_nrfx_configure+0x2c>
   1e34a:	2a02      	cmp	r2, #2
   1e34c:	d115      	bne.n	1e37a <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e34e:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e350:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e352:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e354:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e358:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e35a:	d065      	beq.n	1e428 <uarte_nrfx_configure+0x104>
   1e35c:	d82d      	bhi.n	1e3ba <uarte_nrfx_configure+0x96>
   1e35e:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e362:	d064      	beq.n	1e42e <uarte_nrfx_configure+0x10a>
   1e364:	d816      	bhi.n	1e394 <uarte_nrfx_configure+0x70>
   1e366:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e36a:	d062      	beq.n	1e432 <uarte_nrfx_configure+0x10e>
   1e36c:	d80a      	bhi.n	1e384 <uarte_nrfx_configure+0x60>
   1e36e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e372:	d061      	beq.n	1e438 <uarte_nrfx_configure+0x114>
   1e374:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e378:	d061      	beq.n	1e43e <uarte_nrfx_configure+0x11a>
   1e37a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e37e:	e052      	b.n	1e426 <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1e380:	2600      	movs	r6, #0
   1e382:	e7d6      	b.n	1e332 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e384:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e388:	d05c      	beq.n	1e444 <uarte_nrfx_configure+0x120>
   1e38a:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e38e:	d1f4      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e390:	4b37      	ldr	r3, [pc, #220]	; (1e470 <uarte_nrfx_configure+0x14c>)
   1e392:	e03c      	b.n	1e40e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e394:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e398:	d057      	beq.n	1e44a <uarte_nrfx_configure+0x126>
   1e39a:	d807      	bhi.n	1e3ac <uarte_nrfx_configure+0x88>
   1e39c:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e3a0:	d055      	beq.n	1e44e <uarte_nrfx_configure+0x12a>
   1e3a2:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e3a6:	d1e8      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e3a8:	4b32      	ldr	r3, [pc, #200]	; (1e474 <uarte_nrfx_configure+0x150>)
   1e3aa:	e030      	b.n	1e40e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e3ac:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e3b0:	42bb      	cmp	r3, r7
   1e3b2:	d1e2      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e3b4:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e3b8:	e029      	b.n	1e40e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e3ba:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e3be:	d048      	beq.n	1e452 <uarte_nrfx_configure+0x12e>
   1e3c0:	d813      	bhi.n	1e3ea <uarte_nrfx_configure+0xc6>
   1e3c2:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e3c6:	d047      	beq.n	1e458 <uarte_nrfx_configure+0x134>
   1e3c8:	d809      	bhi.n	1e3de <uarte_nrfx_configure+0xba>
   1e3ca:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e3ce:	42bb      	cmp	r3, r7
   1e3d0:	d044      	beq.n	1e45c <uarte_nrfx_configure+0x138>
   1e3d2:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e3d6:	d1d0      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e3d8:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e3dc:	e017      	b.n	1e40e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e3de:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e3e2:	d1ca      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e3e4:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e3e8:	e011      	b.n	1e40e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e3ea:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e3ee:	d038      	beq.n	1e462 <uarte_nrfx_configure+0x13e>
   1e3f0:	d808      	bhi.n	1e404 <uarte_nrfx_configure+0xe0>
   1e3f2:	4f21      	ldr	r7, [pc, #132]	; (1e478 <uarte_nrfx_configure+0x154>)
   1e3f4:	42bb      	cmp	r3, r7
   1e3f6:	d037      	beq.n	1e468 <uarte_nrfx_configure+0x144>
   1e3f8:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e3fc:	d1bd      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e3fe:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e402:	e004      	b.n	1e40e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e404:	4f1d      	ldr	r7, [pc, #116]	; (1e47c <uarte_nrfx_configure+0x158>)
   1e406:	42bb      	cmp	r3, r7
   1e408:	d1b7      	bne.n	1e37a <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e40a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e40e:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e412:	68c3      	ldr	r3, [r0, #12]
   1e414:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e416:	4334      	orrs	r4, r6
   1e418:	4322      	orrs	r2, r4
   1e41a:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e41c:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e420:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e424:	2000      	movs	r0, #0
}
   1e426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e428:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e42c:	e7ef      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e42e:	4b14      	ldr	r3, [pc, #80]	; (1e480 <uarte_nrfx_configure+0x15c>)
   1e430:	e7ed      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e432:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e436:	e7ea      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1e438:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e43c:	e7e7      	b.n	1e40e <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e43e:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e442:	e7e4      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e444:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e448:	e7e1      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e44a:	4b0e      	ldr	r3, [pc, #56]	; (1e484 <uarte_nrfx_configure+0x160>)
   1e44c:	e7df      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e44e:	4b0e      	ldr	r3, [pc, #56]	; (1e488 <uarte_nrfx_configure+0x164>)
   1e450:	e7dd      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e452:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e456:	e7da      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e458:	4b0c      	ldr	r3, [pc, #48]	; (1e48c <uarte_nrfx_configure+0x168>)
   1e45a:	e7d8      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e45c:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e460:	e7d5      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e462:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e466:	e7d2      	b.n	1e40e <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e468:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e46c:	e7cf      	b.n	1e40e <uarte_nrfx_configure+0xea>
   1e46e:	bf00      	nop
   1e470:	0013b000 	.word	0x0013b000
   1e474:	004ea000 	.word	0x004ea000
   1e478:	0003d090 	.word	0x0003d090
   1e47c:	000f4240 	.word	0x000f4240
   1e480:	00275000 	.word	0x00275000
   1e484:	0075c000 	.word	0x0075c000
   1e488:	003af000 	.word	0x003af000
   1e48c:	013a9000 	.word	0x013a9000

0001e490 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e490:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return dev->data;
   1e494:	68c7      	ldr	r7, [r0, #12]
{
   1e496:	4606      	mov	r6, r0
   1e498:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e49a:	f008 fd70 	bl	26f7e <k_is_in_isr>
   1e49e:	b9b8      	cbnz	r0, 1e4d0 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1e4a0:	4b28      	ldr	r3, [pc, #160]	; (1e544 <uarte_nrfx_poll_out+0xb4>)
   1e4a2:	781b      	ldrb	r3, [r3, #0]
   1e4a4:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1e4a8:	6872      	ldr	r2, [r6, #4]
   1e4aa:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1e4ac:	b193      	cbz	r3, 1e4d4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1e4ae:	f04f 0320 	mov.w	r3, #32
   1e4b2:	f3ef 8411 	mrs	r4, BASEPRI
   1e4b6:	f383 8811 	msr	BASEPRI, r3
   1e4ba:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1e4be:	6870      	ldr	r0, [r6, #4]
   1e4c0:	f008 f98d 	bl	267de <is_tx_ready.isra.0>
   1e4c4:	bb38      	cbnz	r0, 1e516 <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1e4c6:	f384 8811 	msr	BASEPRI, r4
   1e4ca:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1e4ce:	e7ee      	b.n	1e4ae <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e4d0:	2301      	movs	r3, #1
   1e4d2:	e7e9      	b.n	1e4a8 <uarte_nrfx_poll_out+0x18>
   1e4d4:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e4d6:	6870      	ldr	r0, [r6, #4]
   1e4d8:	f008 f981 	bl	267de <is_tx_ready.isra.0>
   1e4dc:	b970      	cbnz	r0, 1e4fc <uarte_nrfx_poll_out+0x6c>
   1e4de:	2001      	movs	r0, #1
   1e4e0:	f008 f9ad 	bl	2683e <nrfx_busy_wait>
   1e4e4:	3c01      	subs	r4, #1
   1e4e6:	d1f6      	bne.n	1e4d6 <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1e4e8:	2100      	movs	r1, #0
   1e4ea:	2021      	movs	r0, #33	; 0x21
   1e4ec:	f001 fee8 	bl	202c0 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e4f0:	e7f0      	b.n	1e4d4 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1e4f2:	f384 8811 	msr	BASEPRI, r4
   1e4f6:	f3bf 8f6f 	isb	sy
}
   1e4fa:	e7f5      	b.n	1e4e8 <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1e4fc:	f04f 0320 	mov.w	r3, #32
   1e500:	f3ef 8411 	mrs	r4, BASEPRI
   1e504:	f383 8811 	msr	BASEPRI, r3
   1e508:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e50c:	6870      	ldr	r0, [r6, #4]
   1e50e:	f008 f966 	bl	267de <is_tx_ready.isra.0>
   1e512:	2800      	cmp	r0, #0
   1e514:	d0ed      	beq.n	1e4f2 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1e516:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1e51a:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e51c:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e51e:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e522:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e526:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1e52a:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1e52e:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1e532:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e536:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1e538:	f384 8811 	msr	BASEPRI, r4
   1e53c:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1e540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e544:	2000f31b 	.word	0x2000f31b

0001e548 <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1e548:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1e54c:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1e54e:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   1e550:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   1e552:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e554:	2100      	movs	r1, #0
   1e556:	682b      	ldr	r3, [r5, #0]
   1e558:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1e55c:	4606      	mov	r6, r0
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1e55e:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e560:	a801      	add	r0, sp, #4
   1e562:	9301      	str	r3, [sp, #4]
   1e564:	f7ff fed0 	bl	1e308 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e568:	9a01      	ldr	r2, [sp, #4]
   1e56a:	2301      	movs	r3, #1
   1e56c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e56e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e572:	682b      	ldr	r3, [r5, #0]
   1e574:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e576:	a801      	add	r0, sp, #4
   1e578:	f7ff fec6 	bl	1e308 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e57c:	9b01      	ldr	r3, [sp, #4]
   1e57e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e582:	2203      	movs	r2, #3
   1e584:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1e588:	686b      	ldr	r3, [r5, #4]
   1e58a:	1c58      	adds	r0, r3, #1
   1e58c:	d008      	beq.n	1e5a0 <uarte_instance_init.constprop.0+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e58e:	a801      	add	r0, sp, #4
   1e590:	9301      	str	r3, [sp, #4]
   1e592:	f7ff feb9 	bl	1e308 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e596:	9b01      	ldr	r3, [sp, #4]
   1e598:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e59c:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1e5a0:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1e5a4:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e5a8:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e5ac:	68ab      	ldr	r3, [r5, #8]
   1e5ae:	1c59      	adds	r1, r3, #1
   1e5b0:	d009      	beq.n	1e5c6 <uarte_instance_init.constprop.0+0x7e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e5b2:	a801      	add	r0, sp, #4
   1e5b4:	9301      	str	r3, [sp, #4]
   1e5b6:	f7ff fea7 	bl	1e308 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e5ba:	9b01      	ldr	r3, [sp, #4]
   1e5bc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e5c0:	2200      	movs	r2, #0
   1e5c2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e5c6:	68eb      	ldr	r3, [r5, #12]
   1e5c8:	1c5a      	adds	r2, r3, #1
   1e5ca:	d013      	beq.n	1e5f4 <uarte_instance_init.constprop.0+0xac>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e5cc:	a801      	add	r0, sp, #4
   1e5ce:	9301      	str	r3, [sp, #4]
   1e5d0:	f7ff fe9a 	bl	1e308 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e5d4:	9a01      	ldr	r2, [sp, #4]
   1e5d6:	2301      	movs	r3, #1
   1e5d8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e5da:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e5de:	68eb      	ldr	r3, [r5, #12]
   1e5e0:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e5e2:	a801      	add	r0, sp, #4
   1e5e4:	f7ff fe90 	bl	1e308 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e5e8:	9b01      	ldr	r3, [sp, #4]
   1e5ea:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e5ee:	2203      	movs	r2, #3
   1e5f0:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1e5f4:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e5f8:	68f1      	ldr	r1, [r6, #12]
    p_reg->PSEL.RTS = pselrts;
   1e5fa:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1e5fe:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1e600:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1e604:	4630      	mov	r0, r6
   1e606:	f7ff fe8d 	bl	1e324 <uarte_nrfx_configure>
	if (err) {
   1e60a:	4680      	mov	r8, r0
   1e60c:	b9a8      	cbnz	r0, 1e63a <uarte_instance_init.constprop.0+0xf2>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   1e60e:	6873      	ldr	r3, [r6, #4]
   1e610:	799b      	ldrb	r3, [r3, #6]
   1e612:	b34b      	cbz	r3, 1e668 <uarte_instance_init.constprop.0+0x120>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e614:	f107 0012 	add.w	r0, r7, #18
   1e618:	f000 fbe8 	bl	1edec <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e61c:	4b24      	ldr	r3, [pc, #144]	; (1e6b0 <uarte_instance_init.constprop.0+0x168>)
   1e61e:	4298      	cmp	r0, r3
   1e620:	d00f      	beq.n	1e642 <uarte_instance_init.constprop.0+0xfa>
   1e622:	4b24      	ldr	r3, [pc, #144]	; (1e6b4 <uarte_instance_init.constprop.0+0x16c>)
   1e624:	4924      	ldr	r1, [pc, #144]	; (1e6b8 <uarte_instance_init.constprop.0+0x170>)
		LOG_ERR("Failed to allocate PPI Channel");
   1e626:	4825      	ldr	r0, [pc, #148]	; (1e6bc <uarte_instance_init.constprop.0+0x174>)
   1e628:	1ac9      	subs	r1, r1, r3
   1e62a:	08c9      	lsrs	r1, r1, #3
   1e62c:	0189      	lsls	r1, r1, #6
   1e62e:	f041 0101 	orr.w	r1, r1, #1
   1e632:	f003 fe5b 	bl	222ec <log_0>
		return -EIO;
   1e636:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1e63a:	4640      	mov	r0, r8
   1e63c:	b002      	add	sp, #8
   1e63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e642:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e644:	00c3      	lsls	r3, r0, #3
   1e646:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e64a:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1e64e:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e652:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e656:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e65a:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1e65e:	4a18      	ldr	r2, [pc, #96]	; (1e6c0 <uarte_instance_init.constprop.0+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e660:	2301      	movs	r3, #1
   1e662:	4083      	lsls	r3, r0
   1e664:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e668:	2308      	movs	r3, #8
   1e66a:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1e66e:	686b      	ldr	r3, [r5, #4]
   1e670:	3301      	adds	r3, #1
   1e672:	d00c      	beq.n	1e68e <uarte_instance_init.constprop.0+0x146>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e674:	2300      	movs	r3, #0
   1e676:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e67a:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1e67e:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e682:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e686:	2301      	movs	r3, #1
   1e688:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e68c:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1e68e:	6873      	ldr	r3, [r6, #4]
   1e690:	799b      	ldrb	r3, [r3, #6]
   1e692:	b91b      	cbnz	r3, 1e69c <uarte_instance_init.constprop.0+0x154>
    p_reg->INTENSET = mask;
   1e694:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e698:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1e69c:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1e69e:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e6a0:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e6a4:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e6a8:	2301      	movs	r3, #1
   1e6aa:	60a3      	str	r3, [r4, #8]
   1e6ac:	60e3      	str	r3, [r4, #12]
	return 0;
   1e6ae:	e7c4      	b.n	1e63a <uarte_instance_init.constprop.0+0xf2>
   1e6b0:	0bad0000 	.word	0x0bad0000
   1e6b4:	0002775c 	.word	0x0002775c
   1e6b8:	000278bc 	.word	0x000278bc
   1e6bc:	0002d7b4 	.word	0x0002d7b4
   1e6c0:	4001f000 	.word	0x4001f000

0001e6c4 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1e6c4:	b530      	push	{r4, r5, lr}
   1e6c6:	4b0a      	ldr	r3, [pc, #40]	; (1e6f0 <uarte_1_init+0x2c>)
   1e6c8:	4605      	mov	r5, r0
   1e6ca:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e6cc:	b085      	sub	sp, #20
   1e6ce:	466c      	mov	r4, sp
   1e6d0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1e6d4:	2200      	movs	r2, #0
   1e6d6:	2101      	movs	r1, #1
   1e6d8:	2028      	movs	r0, #40	; 0x28
   1e6da:	f7e8 ffb7 	bl	764c <z_arm_irq_priority_set>
   1e6de:	2028      	movs	r0, #40	; 0x28
   1e6e0:	f7e8 ff82 	bl	75e8 <arch_irq_enable>
   1e6e4:	4621      	mov	r1, r4
   1e6e6:	4628      	mov	r0, r5
   1e6e8:	f7ff ff2e 	bl	1e548 <uarte_instance_init.constprop.0>
   1e6ec:	b005      	add	sp, #20
   1e6ee:	bd30      	pop	{r4, r5, pc}
   1e6f0:	00027970 	.word	0x00027970

0001e6f4 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1e6f4:	b530      	push	{r4, r5, lr}
   1e6f6:	4b0a      	ldr	r3, [pc, #40]	; (1e720 <uarte_0_init+0x2c>)
   1e6f8:	4605      	mov	r5, r0
   1e6fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e6fc:	b085      	sub	sp, #20
   1e6fe:	466c      	mov	r4, sp
   1e700:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1e704:	2200      	movs	r2, #0
   1e706:	2101      	movs	r1, #1
   1e708:	2002      	movs	r0, #2
   1e70a:	f7e8 ff9f 	bl	764c <z_arm_irq_priority_set>
   1e70e:	2002      	movs	r0, #2
   1e710:	f7e8 ff6a 	bl	75e8 <arch_irq_enable>
   1e714:	4621      	mov	r1, r4
   1e716:	4628      	mov	r0, r5
   1e718:	f7ff ff16 	bl	1e548 <uarte_instance_init.constprop.0>
   1e71c:	b005      	add	sp, #20
   1e71e:	bd30      	pop	{r4, r5, pc}
   1e720:	00027980 	.word	0x00027980

0001e724 <random_byte_get>:
	__asm__ volatile(
   1e724:	f04f 0320 	mov.w	r3, #32
   1e728:	f3ef 8211 	mrs	r2, BASEPRI
   1e72c:	f383 8811 	msr	BASEPRI, r3
   1e730:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e734:	4b09      	ldr	r3, [pc, #36]	; (1e75c <random_byte_get+0x38>)
   1e736:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e73a:	b161      	cbz	r1, 1e756 <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e73c:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e73e:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e742:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1e746:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e74a:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e74c:	f382 8811 	msr	BASEPRI, r2
   1e750:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e754:	4770      	bx	lr
	int retval = -EAGAIN;
   1e756:	f06f 000a 	mvn.w	r0, #10
   1e75a:	e7f7      	b.n	1e74c <random_byte_get+0x28>
   1e75c:	4000d000 	.word	0x4000d000

0001e760 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e760:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e762:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e764:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e766:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e768:	f04f 0020 	mov.w	r0, #32
   1e76c:	f3ef 8e11 	mrs	lr, BASEPRI
   1e770:	f380 8811 	msr	BASEPRI, r0
   1e774:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e778:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e77a:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1e77e:	1ba4      	subs	r4, r4, r6
   1e780:	403c      	ands	r4, r7
	if (available < len) {
   1e782:	42a2      	cmp	r2, r4
		len = available;
   1e784:	bf88      	it	hi
   1e786:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e788:	18b0      	adds	r0, r6, r2
   1e78a:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1e78c:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e78e:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1e790:	f38e 8811 	msr	BASEPRI, lr
   1e794:	f3bf 8f6f 	isb	sy
   1e798:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1e79a:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e79c:	4290      	cmp	r0, r2
   1e79e:	d119      	bne.n	1e7d4 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e7a0:	4566      	cmp	r6, ip
   1e7a2:	d10d      	bne.n	1e7c0 <rng_pool_get+0x60>
	__asm__ volatile(
   1e7a4:	f04f 0520 	mov.w	r5, #32
   1e7a8:	f3ef 8011 	mrs	r0, BASEPRI
   1e7ac:	f385 8811 	msr	BASEPRI, r5
   1e7b0:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e7b4:	781d      	ldrb	r5, [r3, #0]
   1e7b6:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e7b8:	f380 8811 	msr	BASEPRI, r0
   1e7bc:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e7c0:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e7c2:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e7c4:	b290      	uxth	r0, r2
	available = available - len;
   1e7c6:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1e7c8:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e7ca:	bf22      	ittt	cs
   1e7cc:	4b06      	ldrcs	r3, [pc, #24]	; (1e7e8 <rng_pool_get+0x88>)
   1e7ce:	2201      	movcs	r2, #1
   1e7d0:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e7d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e7d4:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1e7d8:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e7da:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e7de:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1e7e2:	403d      	ands	r5, r7
   1e7e4:	e7da      	b.n	1e79c <rng_pool_get+0x3c>
   1e7e6:	bf00      	nop
   1e7e8:	4000d000 	.word	0x4000d000

0001e7ec <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e7ec:	43db      	mvns	r3, r3
{
   1e7ee:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e7f2:	f013 0501 	ands.w	r5, r3, #1
{
   1e7f6:	460e      	mov	r6, r1
   1e7f8:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e7fa:	d004      	beq.n	1e806 <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e7fc:	4821      	ldr	r0, [pc, #132]	; (1e884 <entropy_nrf5_get_entropy_isr+0x98>)
   1e7fe:	f7ff ffaf 	bl	1e760 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e802:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e806:	b3a2      	cbz	r2, 1e872 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1e808:	f04f 0320 	mov.w	r3, #32
   1e80c:	f3ef 8811 	mrs	r8, BASEPRI
   1e810:	f383 8811 	msr	BASEPRI, r3
   1e814:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e818:	200d      	movs	r0, #13
   1e81a:	f7e8 ff09 	bl	7630 <arch_irq_is_enabled>
   1e81e:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e820:	200d      	movs	r0, #13
   1e822:	f7e8 fef1 	bl	7608 <arch_irq_disable>
	__asm__ volatile(
   1e826:	f388 8811 	msr	BASEPRI, r8
   1e82a:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e82e:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1e888 <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e832:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1e88c <entropy_nrf5_get_entropy_isr+0xa0>
   1e836:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1e83a:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1e83e:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e842:	2301      	movs	r3, #1
   1e844:	f8c8 3000 	str.w	r3, [r8]
   1e848:	4625      	mov	r5, r4
   1e84a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e84e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1e852:	b183      	cbz	r3, 1e876 <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1e854:	f7ff ff66 	bl	1e724 <random_byte_get>
			if (byte < 0) {
   1e858:	1e03      	subs	r3, r0, #0
   1e85a:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1e85e:	dbf6      	blt.n	1e84e <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1e860:	3d01      	subs	r5, #1
   1e862:	b2ad      	uxth	r5, r5
   1e864:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e866:	2d00      	cmp	r5, #0
   1e868:	d1f1      	bne.n	1e84e <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1e86a:	b117      	cbz	r7, 1e872 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1e86c:	200d      	movs	r0, #13
   1e86e:	f7e8 febb 	bl	75e8 <arch_irq_enable>
	return cnt;
   1e872:	4620      	mov	r0, r4
   1e874:	e7c5      	b.n	1e802 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1e876:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e87a:	bf20      	wfe
				__SEV();
   1e87c:	bf40      	sev
				__WFE();
   1e87e:	bf20      	wfe
   1e880:	e7e5      	b.n	1e84e <entropy_nrf5_get_entropy_isr+0x62>
   1e882:	bf00      	nop
   1e884:	2000ec0c 	.word	0x2000ec0c
   1e888:	4000d000 	.word	0x4000d000
   1e88c:	e000e100 	.word	0xe000e100

0001e890 <entropy_nrf5_get_entropy>:
{
   1e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1e894:	4f13      	ldr	r7, [pc, #76]	; (1e8e4 <entropy_nrf5_get_entropy+0x54>)
   1e896:	460d      	mov	r5, r1
   1e898:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e89a:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1e89e:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1e8a2:	b914      	cbnz	r4, 1e8aa <entropy_nrf5_get_entropy+0x1a>
}
   1e8a4:	4620      	mov	r0, r4
   1e8a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1e8aa:	f04f 33ff 	mov.w	r3, #4294967295
   1e8ae:	f04f 32ff 	mov.w	r2, #4294967295
   1e8b2:	4638      	mov	r0, r7
   1e8b4:	f001 fd4a 	bl	2034c <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e8b8:	4622      	mov	r2, r4
   1e8ba:	4629      	mov	r1, r5
   1e8bc:	4640      	mov	r0, r8
   1e8be:	f7ff ff4f 	bl	1e760 <rng_pool_get>
   1e8c2:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1e8c4:	4638      	mov	r0, r7
   1e8c6:	f001 fd1b 	bl	20300 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1e8ca:	b93e      	cbnz	r6, 1e8dc <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1e8cc:	f04f 32ff 	mov.w	r2, #4294967295
   1e8d0:	f04f 33ff 	mov.w	r3, #4294967295
   1e8d4:	4648      	mov	r0, r9
   1e8d6:	f001 fd39 	bl	2034c <z_impl_k_sem_take>
			continue;
   1e8da:	e7e2      	b.n	1e8a2 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1e8dc:	1ba4      	subs	r4, r4, r6
   1e8de:	b2a4      	uxth	r4, r4
		buf += bytes;
   1e8e0:	4435      	add	r5, r6
   1e8e2:	e7de      	b.n	1e8a2 <entropy_nrf5_get_entropy+0x12>
   1e8e4:	2000ebdc 	.word	0x2000ebdc

0001e8e8 <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1e8e8:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e8ea:	4c19      	ldr	r4, [pc, #100]	; (1e950 <entropy_nrf5_init+0x68>)
   1e8ec:	2201      	movs	r2, #1
   1e8ee:	4611      	mov	r1, r2
   1e8f0:	4620      	mov	r0, r4
   1e8f2:	f008 fb34 	bl	26f5e <z_impl_k_sem_init>
   1e8f6:	2201      	movs	r2, #1
   1e8f8:	2100      	movs	r1, #0
   1e8fa:	f104 0018 	add.w	r0, r4, #24
   1e8fe:	f008 fb2e 	bl	26f5e <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1e902:	f240 4307 	movw	r3, #1031	; 0x407
   1e906:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1e90a:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e90e:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1e910:	230c      	movs	r3, #12
   1e912:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1e916:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1e918:	4b0e      	ldr	r3, [pc, #56]	; (1e954 <entropy_nrf5_init+0x6c>)
   1e91a:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1e91e:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1e922:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1e926:	f042 0201 	orr.w	r2, r2, #1
   1e92a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1e92e:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e930:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1e934:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1e938:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1e93c:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e93e:	6019      	str	r1, [r3, #0]
   1e940:	200d      	movs	r0, #13
   1e942:	f7e8 fe83 	bl	764c <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1e946:	200d      	movs	r0, #13
   1e948:	f7e8 fe4e 	bl	75e8 <arch_irq_enable>

	return 0;
}
   1e94c:	4628      	mov	r0, r5
   1e94e:	bd38      	pop	{r3, r4, r5, pc}
   1e950:	2000ebdc 	.word	0x2000ebdc
   1e954:	4000d000 	.word	0x4000d000

0001e958 <isr>:
{
   1e958:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1e95a:	f7ff fee3 	bl	1e724 <random_byte_get>
	if (byte < 0) {
   1e95e:	2800      	cmp	r0, #0
   1e960:	db20      	blt.n	1e9a4 <isr+0x4c>
	uint8_t last  = rngp->last;
   1e962:	4b17      	ldr	r3, [pc, #92]	; (1e9c0 <isr+0x68>)
   1e964:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1e968:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1e96c:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1e970:	1a51      	subs	r1, r2, r1
   1e972:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1e976:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1e978:	d10d      	bne.n	1e996 <isr+0x3e>
	uint8_t last  = rngp->last;
   1e97a:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1e97e:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1e982:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1e986:	1a51      	subs	r1, r2, r1
   1e988:	ea34 0101 	bics.w	r1, r4, r1
   1e98c:	d10b      	bne.n	1e9a6 <isr+0x4e>
   1e98e:	4b0d      	ldr	r3, [pc, #52]	; (1e9c4 <isr+0x6c>)
   1e990:	2201      	movs	r2, #1
   1e992:	605a      	str	r2, [r3, #4]
}
   1e994:	e00e      	b.n	1e9b4 <isr+0x5c>
	rngp->buffer[last] = byte;
   1e996:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e998:	3201      	adds	r2, #1
   1e99a:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e99c:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1e9a0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1e9a4:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1e9a6:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1e9a8:	3201      	adds	r2, #1
   1e9aa:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1e9ac:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1e9b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1e9b4:	4804      	ldr	r0, [pc, #16]	; (1e9c8 <isr+0x70>)
}
   1e9b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1e9ba:	f001 bca1 	b.w	20300 <z_impl_k_sem_give>
   1e9be:	bf00      	nop
   1e9c0:	2000ebdc 	.word	0x2000ebdc
   1e9c4:	4000d000 	.word	0x4000d000
   1e9c8:	2000ebf4 	.word	0x2000ebf4

0001e9cc <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e9cc:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e9d0:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e9d4:	2a08      	cmp	r2, #8
   1e9d6:	d106      	bne.n	1e9e6 <nrf52_errata_136+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e9d8:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1e9dc:	2b05      	cmp	r3, #5
   1e9de:	d802      	bhi.n	1e9e6 <nrf52_errata_136+0x1a>
   1e9e0:	4a02      	ldr	r2, [pc, #8]	; (1e9ec <nrf52_errata_136+0x20>)
   1e9e2:	5cd0      	ldrb	r0, [r2, r3]
   1e9e4:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1e9e6:	2000      	movs	r0, #0
    #endif
}
   1e9e8:	4770      	bx	lr
   1e9ea:	bf00      	nop
   1e9ec:	0002d7ee 	.word	0x0002d7ee

0001e9f0 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1e9f0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1e9f4:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1e9f8:	2a08      	cmp	r2, #8
   1e9fa:	d106      	bne.n	1ea0a <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1e9fc:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1ea00:	2b05      	cmp	r3, #5
   1ea02:	d802      	bhi.n	1ea0a <nrf52_errata_103+0x1a>
   1ea04:	4a02      	ldr	r2, [pc, #8]	; (1ea10 <nrf52_errata_103+0x20>)
   1ea06:	5cd0      	ldrb	r0, [r2, r3]
   1ea08:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1ea0a:	2000      	movs	r0, #0
    #endif
}
   1ea0c:	4770      	bx	lr
   1ea0e:	bf00      	nop
   1ea10:	0002d7f4 	.word	0x0002d7f4

0001ea14 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1ea14:	4a02      	ldr	r2, [pc, #8]	; (1ea20 <nvmc_wait+0xc>)
   1ea16:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1ea1a:	2b00      	cmp	r3, #0
   1ea1c:	d0fb      	beq.n	1ea16 <nvmc_wait+0x2>
}
   1ea1e:	4770      	bx	lr
   1ea20:	4001e000 	.word	0x4001e000

0001ea24 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1ea24:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1ea26:	f7ff ffd1 	bl	1e9cc <nrf52_errata_136>
   1ea2a:	b140      	cbz	r0, 1ea3e <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1ea2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ea30:	2200      	movs	r2, #0
   1ea32:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1ea36:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1ea3a:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1ea3e:	f7ff ffc5 	bl	1e9cc <nrf52_errata_136>
   1ea42:	2800      	cmp	r0, #0
   1ea44:	d046      	beq.n	1ead4 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ea46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ea4a:	4b55      	ldr	r3, [pc, #340]	; (1eba0 <SystemInit+0x17c>)
   1ea4c:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1ea50:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ea54:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1ea58:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1ea5c:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1ea60:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1ea64:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1ea68:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1ea6c:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1ea70:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1ea74:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1ea78:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1ea7c:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1ea80:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1ea84:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1ea88:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1ea8c:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1ea90:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1ea94:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1ea98:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1ea9c:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1eaa0:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1eaa4:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1eaa8:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1eaac:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1eab0:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1eab4:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1eab8:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1eabc:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1eac0:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1eac4:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1eac8:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1eacc:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1ead0:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1ead4:	f7ff ff8c 	bl	1e9f0 <nrf52_errata_103>
   1ead8:	b118      	cbz	r0, 1eae2 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1eada:	4b32      	ldr	r3, [pc, #200]	; (1eba4 <SystemInit+0x180>)
   1eadc:	4a32      	ldr	r2, [pc, #200]	; (1eba8 <SystemInit+0x184>)
   1eade:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1eae2:	f7ff ff85 	bl	1e9f0 <nrf52_errata_103>
   1eae6:	b118      	cbz	r0, 1eaf0 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1eae8:	4b30      	ldr	r3, [pc, #192]	; (1ebac <SystemInit+0x188>)
   1eaea:	22fb      	movs	r2, #251	; 0xfb
   1eaec:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1eaf0:	f7ff ff7e 	bl	1e9f0 <nrf52_errata_103>
   1eaf4:	b170      	cbz	r0, 1eb14 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1eaf6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1eafa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eafe:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1eb02:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1eb06:	f022 020f 	bic.w	r2, r2, #15
   1eb0a:	f003 030f 	and.w	r3, r3, #15
   1eb0e:	4313      	orrs	r3, r2
   1eb10:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1eb14:	f7ff ff6c 	bl	1e9f0 <nrf52_errata_103>
   1eb18:	b120      	cbz	r0, 1eb24 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1eb1a:	4b25      	ldr	r3, [pc, #148]	; (1ebb0 <SystemInit+0x18c>)
   1eb1c:	f44f 7200 	mov.w	r2, #512	; 0x200
   1eb20:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1eb24:	f7ff ff52 	bl	1e9cc <nrf52_errata_136>
   1eb28:	b148      	cbz	r0, 1eb3e <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1eb2a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1eb2e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1eb32:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1eb34:	bf44      	itt	mi
   1eb36:	f06f 0201 	mvnmi.w	r2, #1
   1eb3a:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1eb3e:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1eb42:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1eb46:	2a00      	cmp	r2, #0
   1eb48:	db03      	blt.n	1eb52 <SystemInit+0x12e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1eb4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1eb4e:	2b00      	cmp	r3, #0
   1eb50:	da22      	bge.n	1eb98 <SystemInit+0x174>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1eb52:	4918      	ldr	r1, [pc, #96]	; (1ebb4 <SystemInit+0x190>)
   1eb54:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1eb56:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1eb5a:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1eb5e:	2412      	movs	r4, #18
    nvmc_wait();
   1eb60:	f7ff ff58 	bl	1ea14 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1eb64:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1eb68:	f7ff ff54 	bl	1ea14 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1eb6c:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1eb70:	f7ff ff50 	bl	1ea14 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1eb74:	2300      	movs	r3, #0
   1eb76:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1eb7a:	f7ff ff4b 	bl	1ea14 <nvmc_wait>
   1eb7e:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1eb82:	490d      	ldr	r1, [pc, #52]	; (1ebb8 <SystemInit+0x194>)
   1eb84:	4b0d      	ldr	r3, [pc, #52]	; (1ebbc <SystemInit+0x198>)
   1eb86:	68ca      	ldr	r2, [r1, #12]
   1eb88:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1eb8c:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1eb8e:	60cb      	str	r3, [r1, #12]
   1eb90:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1eb94:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1eb96:	e7fd      	b.n	1eb94 <SystemInit+0x170>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1eb98:	4b09      	ldr	r3, [pc, #36]	; (1ebc0 <SystemInit+0x19c>)
   1eb9a:	4a0a      	ldr	r2, [pc, #40]	; (1ebc4 <SystemInit+0x1a0>)
   1eb9c:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1eb9e:	bd10      	pop	{r4, pc}
   1eba0:	4000c000 	.word	0x4000c000
   1eba4:	40005000 	.word	0x40005000
   1eba8:	00038148 	.word	0x00038148
   1ebac:	4000f000 	.word	0x4000f000
   1ebb0:	40029000 	.word	0x40029000
   1ebb4:	4001e000 	.word	0x4001e000
   1ebb8:	e000ed00 	.word	0xe000ed00
   1ebbc:	05fa0004 	.word	0x05fa0004
   1ebc0:	20000770 	.word	0x20000770
   1ebc4:	03d09000 	.word	0x03d09000

0001ebc8 <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1ebc8:	4b04      	ldr	r3, [pc, #16]	; (1ebdc <nrfx_clock_init+0x14>)
   1ebca:	791a      	ldrb	r2, [r3, #4]
   1ebcc:	b922      	cbnz	r2, 1ebd8 <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1ebce:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1ebd0:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1ebd2:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ebd4:	4802      	ldr	r0, [pc, #8]	; (1ebe0 <nrfx_clock_init+0x18>)
   1ebd6:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1ebd8:	4802      	ldr	r0, [pc, #8]	; (1ebe4 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ebda:	4770      	bx	lr
   1ebdc:	2000ec30 	.word	0x2000ec30
   1ebe0:	0bad0000 	.word	0x0bad0000
   1ebe4:	0bad000c 	.word	0x0bad000c

0001ebe8 <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ebe8:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1ebea:	b110      	cbz	r0, 1ebf2 <nrfx_clock_stop+0xa>
   1ebec:	2801      	cmp	r0, #1
   1ebee:	d017      	beq.n	1ec20 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1ebf0:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1ebf2:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1ebf6:	2302      	movs	r3, #2
   1ebf8:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ebfc:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1ec00:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec04:	2301      	movs	r3, #1
   1ec06:	60e3      	str	r3, [r4, #12]
   1ec08:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ec0c:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1ec10:	03db      	lsls	r3, r3, #15
   1ec12:	d5ed      	bpl.n	1ebf0 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1ec14:	2001      	movs	r0, #1
   1ec16:	f007 fe12 	bl	2683e <nrfx_busy_wait>
   1ec1a:	3d01      	subs	r5, #1
   1ec1c:	d1f6      	bne.n	1ec0c <nrfx_clock_stop+0x24>
   1ec1e:	e7e7      	b.n	1ebf0 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1ec20:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec24:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1ec26:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec2a:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ec2e:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ec32:	6060      	str	r0, [r4, #4]
   1ec34:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ec38:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ec3c:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1ec40:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ec42:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1ec46:	d505      	bpl.n	1ec54 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1ec48:	b123      	cbz	r3, 1ec54 <nrfx_clock_stop+0x6c>
   1ec4a:	2001      	movs	r0, #1
   1ec4c:	f007 fdf7 	bl	2683e <nrfx_busy_wait>
   1ec50:	3d01      	subs	r5, #1
   1ec52:	d1f1      	bne.n	1ec38 <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1ec54:	4b01      	ldr	r3, [pc, #4]	; (1ec5c <nrfx_clock_stop+0x74>)
   1ec56:	2200      	movs	r2, #0
   1ec58:	715a      	strb	r2, [r3, #5]
   1ec5a:	e7c9      	b.n	1ebf0 <nrfx_clock_stop+0x8>
   1ec5c:	2000ec30 	.word	0x2000ec30

0001ec60 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ec60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1ec64:	b510      	push	{r4, lr}
   1ec66:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1ec6a:	b16a      	cbz	r2, 1ec88 <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec6c:	2200      	movs	r2, #0
   1ec6e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1ec72:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1ec76:	2201      	movs	r2, #1
   1ec78:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1ec7c:	4b11      	ldr	r3, [pc, #68]	; (1ecc4 <nrfx_power_clock_irq_handler+0x64>)
   1ec7e:	7958      	ldrb	r0, [r3, #5]
   1ec80:	b910      	cbnz	r0, 1ec88 <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1ec82:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ec84:	681b      	ldr	r3, [r3, #0]
   1ec86:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1ec88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec8c:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1ec90:	b172      	cbz	r2, 1ecb0 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ec92:	2200      	movs	r2, #0
   1ec94:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1ec98:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ec9c:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1eca0:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1eca4:	0792      	lsls	r2, r2, #30
   1eca6:	d104      	bne.n	1ecb2 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1eca8:	2201      	movs	r2, #1
   1ecaa:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ecae:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1ecb0:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1ecb2:	2202      	movs	r2, #2
   1ecb4:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ecb8:	4b02      	ldr	r3, [pc, #8]	; (1ecc4 <nrfx_power_clock_irq_handler+0x64>)
}
   1ecba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ecbe:	681b      	ldr	r3, [r3, #0]
   1ecc0:	2001      	movs	r0, #1
   1ecc2:	4718      	bx	r3
   1ecc4:	2000ec30 	.word	0x2000ec30

0001ecc8 <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1ecc8:	2301      	movs	r3, #1
   1ecca:	fa03 f000 	lsl.w	r0, r3, r0
   1ecce:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1ecd0:	b193      	cbz	r3, 1ecf8 <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1ecd2:	f04f 0320 	mov.w	r3, #32
   1ecd6:	f3ef 8111 	mrs	r1, BASEPRI
   1ecda:	f383 8811 	msr	BASEPRI, r3
   1ecde:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1ece2:	4a06      	ldr	r2, [pc, #24]	; (1ecfc <nrfx_gpiote_channel_free+0x34>)
   1ece4:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1ece6:	ea23 0000 	bic.w	r0, r3, r0
   1ecea:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1ecec:	f381 8811 	msr	BASEPRI, r1
   1ecf0:	f3bf 8f6f 	isb	sy
   1ecf4:	4802      	ldr	r0, [pc, #8]	; (1ed00 <nrfx_gpiote_channel_free+0x38>)
   1ecf6:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1ecf8:	4802      	ldr	r0, [pc, #8]	; (1ed04 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ecfa:	4770      	bx	lr
   1ecfc:	2000ec38 	.word	0x2000ec38
   1ed00:	0bad0000 	.word	0x0bad0000
   1ed04:	0bad0004 	.word	0x0bad0004

0001ed08 <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1ed08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ed0c:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1ed0e:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1ed6c <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1ed12:	4817      	ldr	r0, [pc, #92]	; (1ed70 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1ed14:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1ed74 <nrfx_gpiote_channel_alloc+0x6c>
{
   1ed18:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1ed1a:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1ed1c:	2601      	movs	r6, #1
   1ed1e:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1ed20:	f04f 0120 	mov.w	r1, #32
   1ed24:	f3ef 8c11 	mrs	ip, BASEPRI
   1ed28:	f381 8811 	msr	BASEPRI, r1
   1ed2c:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1ed30:	fa22 f103 	lsr.w	r1, r2, r3
   1ed34:	07c9      	lsls	r1, r1, #31
   1ed36:	d50a      	bpl.n	1ed4e <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1ed38:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1ed3c:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1ed40:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1ed42:	bf01      	itttt	eq
   1ed44:	4339      	orreq	r1, r7
   1ed46:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1ed4a:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1ed4c:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1ed4e:	f38c 8811 	msr	BASEPRI, ip
   1ed52:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1ed56:	4540      	cmp	r0, r8
   1ed58:	d005      	beq.n	1ed66 <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1ed5a:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1ed5e:	439a      	bics	r2, r3
   1ed60:	f104 0401 	add.w	r4, r4, #1
   1ed64:	d1db      	bne.n	1ed1e <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ed66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ed6a:	bf00      	nop
   1ed6c:	2000ec38 	.word	0x2000ec38
   1ed70:	0bad0002 	.word	0x0bad0002
   1ed74:	0bad0000 	.word	0x0bad0000

0001ed78 <nvmc_word_write>:
   1ed78:	4a04      	ldr	r2, [pc, #16]	; (1ed8c <nvmc_word_write+0x14>)
   1ed7a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1ed7e:	07db      	lsls	r3, r3, #31
   1ed80:	d5fb      	bpl.n	1ed7a <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1ed82:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1ed84:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1ed88:	4770      	bx	lr
   1ed8a:	bf00      	nop
   1ed8c:	4001e000 	.word	0x4001e000

0001ed90 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1ed90:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ed94:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1ed96:	fbb0 f3f2 	udiv	r3, r0, r2
   1ed9a:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1ed9e:	b973      	cbnz	r3, 1edbe <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1eda0:	4b08      	ldr	r3, [pc, #32]	; (1edc4 <nrfx_nvmc_page_erase+0x34>)
   1eda2:	2202      	movs	r2, #2
   1eda4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1eda8:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1edac:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1edb0:	07d2      	lsls	r2, r2, #31
   1edb2:	d5fb      	bpl.n	1edac <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1edb4:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1edb6:	4804      	ldr	r0, [pc, #16]	; (1edc8 <nrfx_nvmc_page_erase+0x38>)
   1edb8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1edbc:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1edbe:	4803      	ldr	r0, [pc, #12]	; (1edcc <nrfx_nvmc_page_erase+0x3c>)
}
   1edc0:	4770      	bx	lr
   1edc2:	bf00      	nop
   1edc4:	4001e000 	.word	0x4001e000
   1edc8:	0bad0000 	.word	0x0bad0000
   1edcc:	0bad000a 	.word	0x0bad000a

0001edd0 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1edd0:	b510      	push	{r4, lr}
   1edd2:	4c05      	ldr	r4, [pc, #20]	; (1ede8 <nrfx_nvmc_word_write+0x18>)
   1edd4:	2301      	movs	r3, #1
   1edd6:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1edda:	f7ff ffcd 	bl	1ed78 <nvmc_word_write>
   1edde:	2300      	movs	r3, #0
   1ede0:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1ede4:	bd10      	pop	{r4, pc}
   1ede6:	bf00      	nop
   1ede8:	4001e000 	.word	0x4001e000

0001edec <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1edec:	4b18      	ldr	r3, [pc, #96]	; (1ee50 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1edee:	f8df c064 	ldr.w	ip, [pc, #100]	; 1ee54 <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1edf2:	681b      	ldr	r3, [r3, #0]
{
   1edf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1edf8:	43db      	mvns	r3, r3
{
   1edfa:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1edfc:	4f16      	ldr	r7, [pc, #88]	; (1ee58 <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1edfe:	4817      	ldr	r0, [pc, #92]	; (1ee5c <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ee00:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1ee04:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1ee06:	f04f 0e01 	mov.w	lr, #1
   1ee0a:	b2e6      	uxtb	r6, r4
   1ee0c:	b90b      	cbnz	r3, 1ee12 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ee0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1ee12:	f04f 0220 	mov.w	r2, #32
   1ee16:	f3ef 8811 	mrs	r8, BASEPRI
   1ee1a:	f382 8811 	msr	BASEPRI, r2
   1ee1e:	f3bf 8f6f 	isb	sy
   1ee22:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1ee26:	4213      	tst	r3, r2
   1ee28:	d006      	beq.n	1ee38 <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1ee2a:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1ee2c:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1ee2e:	bf01      	itttt	eq
   1ee30:	4311      	orreq	r1, r2
   1ee32:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1ee34:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1ee36:	4660      	moveq	r0, ip
	__asm__ volatile(
   1ee38:	f388 8811 	msr	BASEPRI, r8
   1ee3c:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1ee40:	4560      	cmp	r0, ip
   1ee42:	f104 0401 	add.w	r4, r4, #1
   1ee46:	d0e2      	beq.n	1ee0e <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1ee48:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1ee4c:	e7dd      	b.n	1ee0a <nrfx_ppi_channel_alloc+0x1e>
   1ee4e:	bf00      	nop
   1ee50:	00028f68 	.word	0x00028f68
   1ee54:	0bad0000 	.word	0x0bad0000
   1ee58:	2000ec98 	.word	0x2000ec98
   1ee5c:	0bad0002 	.word	0x0bad0002

0001ee60 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1ee60:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1ee62:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1ee66:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1ee68:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1ee6a:	6002      	str	r2, [r0, #0]
}
   1ee6c:	4802      	ldr	r0, [pc, #8]	; (1ee78 <nrf_gpio_pin_port_decode+0x18>)
   1ee6e:	bf18      	it	ne
   1ee70:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1ee74:	4770      	bx	lr
   1ee76:	bf00      	nop
   1ee78:	50000300 	.word	0x50000300

0001ee7c <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1ee7c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1ee80:	7907      	ldrb	r7, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ee82:	4c4c      	ldr	r4, [pc, #304]	; (1efb4 <nrfx_spi_init+0x138>)
{
   1ee84:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1ee86:	2028      	movs	r0, #40	; 0x28
   1ee88:	4378      	muls	r0, r7
   1ee8a:	1825      	adds	r5, r4, r0
   1ee8c:	7f2e      	ldrb	r6, [r5, #28]
   1ee8e:	2e00      	cmp	r6, #0
   1ee90:	f040 808e 	bne.w	1efb0 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1ee94:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   1ee96:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   1ee98:	7b0b      	ldrb	r3, [r1, #12]
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1ee9a:	7808      	ldrb	r0, [r1, #0]
    if (p_config->mode <= NRF_SPI_MODE_1)
   1ee9c:	2b01      	cmp	r3, #1
   1ee9e:	d878      	bhi.n	1ef92 <nrfx_spi_init+0x116>
        nrf_gpio_pin_clear(p_config->sck_pin);
   1eea0:	f007 fd20 	bl	268e4 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   1eea4:	780b      	ldrb	r3, [r1, #0]
   1eea6:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eea8:	a801      	add	r0, sp, #4
   1eeaa:	f7ff ffd9 	bl	1ee60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eeae:	9b01      	ldr	r3, [sp, #4]
   1eeb0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1eeb4:	2201      	movs	r2, #1
   1eeb6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1eeba:	784d      	ldrb	r5, [r1, #1]
   1eebc:	2dff      	cmp	r5, #255	; 0xff
   1eebe:	d06b      	beq.n	1ef98 <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   1eec0:	4628      	mov	r0, r5
   1eec2:	f007 fd0f 	bl	268e4 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eec6:	a801      	add	r0, sp, #4
   1eec8:	9501      	str	r5, [sp, #4]
   1eeca:	f7ff ffc9 	bl	1ee60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eece:	9b01      	ldr	r3, [sp, #4]
   1eed0:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1eed4:	2203      	movs	r2, #3
   1eed6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1eeda:	788e      	ldrb	r6, [r1, #2]
   1eedc:	2eff      	cmp	r6, #255	; 0xff
   1eede:	d05e      	beq.n	1ef9e <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eee0:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   1eee2:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   1eee6:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1eee8:	f7ff ffba 	bl	1ee60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eeec:	9b01      	ldr	r3, [sp, #4]
   1eeee:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1eef2:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1eef6:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1eefa:	78c8      	ldrb	r0, [r1, #3]
   1eefc:	28ff      	cmp	r0, #255	; 0xff
   1eefe:	d00c      	beq.n	1ef1a <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   1ef00:	f007 fce3 	bl	268ca <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->ss_pin);
   1ef04:	78cb      	ldrb	r3, [r1, #3]
   1ef06:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1ef08:	a801      	add	r0, sp, #4
   1ef0a:	f7ff ffa9 	bl	1ee60 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1ef0e:	9b01      	ldr	r3, [sp, #4]
   1ef10:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1ef14:	2203      	movs	r2, #3
   1ef16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1ef1a:	f898 2004 	ldrb.w	r2, [r8, #4]
   1ef1e:	78c8      	ldrb	r0, [r1, #3]
   1ef20:	2328      	movs	r3, #40	; 0x28
   1ef22:	fb03 4302 	mla	r3, r3, r2, r4
   1ef26:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1ef28:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1ef2c:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   1ef2e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   1ef32:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   1ef34:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1ef38:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1ef3c:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1ef40:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1ef42:	7b0d      	ldrb	r5, [r1, #12]
   1ef44:	3b00      	subs	r3, #0
   1ef46:	bf18      	it	ne
   1ef48:	2301      	movne	r3, #1
    switch (spi_mode)
   1ef4a:	2d02      	cmp	r5, #2
   1ef4c:	d02a      	beq.n	1efa4 <nrfx_spi_init+0x128>
   1ef4e:	2d03      	cmp	r5, #3
   1ef50:	d02b      	beq.n	1efaa <nrfx_spi_init+0x12e>
   1ef52:	2d01      	cmp	r5, #1
   1ef54:	d101      	bne.n	1ef5a <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1ef56:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1ef5a:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1ef5e:	2328      	movs	r3, #40	; 0x28
   1ef60:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1ef64:	437b      	muls	r3, r7
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1ef66:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   1ef68:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1ef6a:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1ef6c:	2201      	movs	r2, #1
   1ef6e:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   1ef72:	b11b      	cbz	r3, 1ef7c <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1ef74:	f340 3007 	sbfx	r0, r0, #12, #8
   1ef78:	f7e8 fb36 	bl	75e8 <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1ef7c:	2328      	movs	r3, #40	; 0x28
   1ef7e:	fb03 4407 	mla	r4, r3, r7, r4
   1ef82:	2300      	movs	r3, #0
   1ef84:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1ef86:	480c      	ldr	r0, [pc, #48]	; (1efb8 <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1ef88:	2301      	movs	r3, #1
   1ef8a:	7723      	strb	r3, [r4, #28]
}
   1ef8c:	b003      	add	sp, #12
   1ef8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   1ef92:	f007 fc9a 	bl	268ca <nrf_gpio_pin_set>
   1ef96:	e785      	b.n	1eea4 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1ef98:	f04f 35ff 	mov.w	r5, #4294967295
   1ef9c:	e79d      	b.n	1eeda <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1ef9e:	f04f 36ff 	mov.w	r6, #4294967295
   1efa2:	e7aa      	b.n	1eefa <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1efa4:	f043 0304 	orr.w	r3, r3, #4
        break;
   1efa8:	e7d7      	b.n	1ef5a <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1efaa:	f043 0306 	orr.w	r3, r3, #6
        break;
   1efae:	e7d4      	b.n	1ef5a <nrfx_spi_init+0xde>
        return err_code;
   1efb0:	4802      	ldr	r0, [pc, #8]	; (1efbc <nrfx_spi_init+0x140>)
   1efb2:	e7eb      	b.n	1ef8c <nrfx_spi_init+0x110>
   1efb4:	2000ec9c 	.word	0x2000ec9c
   1efb8:	0bad0000 	.word	0x0bad0000
   1efbc:	0bad0005 	.word	0x0bad0005

0001efc0 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1efc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1efc4:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1efc6:	4c39      	ldr	r4, [pc, #228]	; (1f0ac <nrfx_spi_xfer+0xec>)
   1efc8:	2328      	movs	r3, #40	; 0x28
   1efca:	437b      	muls	r3, r7
{
   1efcc:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1efce:	18e2      	adds	r2, r4, r3
{
   1efd0:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   1efd2:	7f51      	ldrb	r1, [r2, #29]
{
   1efd4:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1efd6:	2900      	cmp	r1, #0
   1efd8:	d165      	bne.n	1f0a6 <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1efda:	58e3      	ldr	r3, [r4, r3]
   1efdc:	b10b      	cbz	r3, 1efe2 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1efde:	2301      	movs	r3, #1
   1efe0:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1efe2:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1efe6:	2528      	movs	r5, #40	; 0x28
   1efe8:	fb05 4507 	mla	r5, r5, r7, r4
   1efec:	f105 0c0c 	add.w	ip, r5, #12
   1eff0:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1eff4:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   1eff6:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1eff8:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1effa:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1effe:	d001      	beq.n	1f004 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   1f000:	f007 fc70 	bl	268e4 <nrf_gpio_pin_clear>
    }
    if (flags)
   1f004:	2328      	movs	r3, #40	; 0x28
   1f006:	f1b8 0f00 	cmp.w	r8, #0
   1f00a:	d006      	beq.n	1f01a <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1f00c:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1f010:	4827      	ldr	r0, [pc, #156]	; (1f0b0 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1f012:	2300      	movs	r3, #0
   1f014:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1f01a:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   1f01e:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   1f022:	2204      	movs	r2, #4
   1f024:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   1f028:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f02c:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   1f030:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1f034:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   1f036:	b192      	cbz	r2, 1f05e <nrfx_spi_xfer+0x9e>
   1f038:	6833      	ldr	r3, [r6, #0]
   1f03a:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1f03c:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1f040:	2a01      	cmp	r2, #1
   1f042:	d90e      	bls.n	1f062 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1f044:	6833      	ldr	r3, [r6, #0]
   1f046:	785b      	ldrb	r3, [r3, #1]
   1f048:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   1f04c:	2328      	movs	r3, #40	; 0x28
   1f04e:	437b      	muls	r3, r7
   1f050:	58e6      	ldr	r6, [r4, r3]
   1f052:	b176      	cbz	r6, 1f072 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   1f054:	2304      	movs	r3, #4
   1f056:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f05a:	4816      	ldr	r0, [pc, #88]	; (1f0b4 <nrfx_spi_xfer+0xf4>)
   1f05c:	e7db      	b.n	1f016 <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1f05e:	7fdb      	ldrb	r3, [r3, #31]
   1f060:	e7ec      	b.n	1f03c <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1f062:	68f3      	ldr	r3, [r6, #12]
   1f064:	2b01      	cmp	r3, #1
   1f066:	d9f1      	bls.n	1f04c <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1f068:	2328      	movs	r3, #40	; 0x28
   1f06a:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   1f06e:	7fdb      	ldrb	r3, [r3, #31]
   1f070:	e7ea      	b.n	1f048 <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f072:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   1f076:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f07a:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1f07e:	2b00      	cmp	r3, #0
   1f080:	d0fb      	beq.n	1f07a <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f082:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1f086:	4628      	mov	r0, r5
   1f088:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f08c:	f007 fc37 	bl	268fe <transfer_byte>
   1f090:	2800      	cmp	r0, #0
   1f092:	d1f2      	bne.n	1f07a <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f094:	2328      	movs	r3, #40	; 0x28
   1f096:	fb03 4407 	mla	r4, r3, r7, r4
   1f09a:	7fa0      	ldrb	r0, [r4, #30]
   1f09c:	28ff      	cmp	r0, #255	; 0xff
   1f09e:	d0dc      	beq.n	1f05a <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   1f0a0:	f007 fc13 	bl	268ca <nrf_gpio_pin_set>
   1f0a4:	e7d9      	b.n	1f05a <nrfx_spi_xfer+0x9a>
        return err_code;
   1f0a6:	4804      	ldr	r0, [pc, #16]	; (1f0b8 <nrfx_spi_xfer+0xf8>)
   1f0a8:	e7b5      	b.n	1f016 <nrfx_spi_xfer+0x56>
   1f0aa:	bf00      	nop
   1f0ac:	2000ec9c 	.word	0x2000ec9c
   1f0b0:	0bad0003 	.word	0x0bad0003
   1f0b4:	0bad0000 	.word	0x0bad0000
   1f0b8:	0bad000b 	.word	0x0bad000b

0001f0bc <nrfx_spi_2_irq_handler>:
   1f0bc:	480c      	ldr	r0, [pc, #48]	; (1f0f0 <nrfx_spi_2_irq_handler+0x34>)
    NRFX_ASSERT(p_cb->handler);

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
   1f0be:	490d      	ldr	r1, [pc, #52]	; (1f0f4 <nrfx_spi_2_irq_handler+0x38>)
   1f0c0:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
   1f0c2:	b510      	push	{r4, lr}
   1f0c4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1f0c8:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   1f0cc:	f007 fc17 	bl	268fe <transfer_byte>
   1f0d0:	b968      	cbnz	r0, 1f0ee <nrfx_spi_2_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f0d2:	7f88      	ldrb	r0, [r1, #30]
   1f0d4:	28ff      	cmp	r0, #255	; 0xff
   1f0d6:	d001      	beq.n	1f0dc <nrfx_spi_2_irq_handler+0x20>
        nrf_gpio_pin_set(p_cb->ss_pin);
   1f0d8:	f007 fbf7 	bl	268ca <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1f0dc:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1f0de:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1f0e0:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
}
   1f0e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f0e6:	e9d1 3100 	ldrd	r3, r1, [r1]
   1f0ea:	4803      	ldr	r0, [pc, #12]	; (1f0f8 <nrfx_spi_2_irq_handler+0x3c>)
   1f0ec:	4718      	bx	r3
}
   1f0ee:	bd10      	pop	{r4, pc}
   1f0f0:	40023000 	.word	0x40023000
   1f0f4:	2000ec9c 	.word	0x2000ec9c
   1f0f8:	2000eca4 	.word	0x2000eca4

0001f0fc <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1f0fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1f0fe:	4b30      	ldr	r3, [pc, #192]	; (1f1c0 <twi_tx_start_transfer+0xc4>)
   1f100:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f102:	2300      	movs	r3, #0
   1f104:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1f108:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1f10c:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1f110:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1f114:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1f118:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1f11c:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1f120:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1f124:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   1f128:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1f12a:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f12e:	2301      	movs	r3, #1
   1f130:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1f132:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   1f136:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1f138:	429a      	cmp	r2, r3
   1f13a:	bf18      	it	ne
   1f13c:	6083      	strne	r3, [r0, #8]
{
   1f13e:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   1f140:	f007 fc10 	bl	26964 <twi_send_byte>

    if (p_cb->handler)
   1f144:	682b      	ldr	r3, [r5, #0]
   1f146:	b183      	cbz	r3, 1f16a <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1f148:	f240 2386 	movw	r3, #646	; 0x286
   1f14c:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1f14e:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f150:	481c      	ldr	r0, [pc, #112]	; (1f1c4 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1f152:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   1f156:	b003      	add	sp, #12
   1f158:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1f15a:	4629      	mov	r1, r5
   1f15c:	4620      	mov	r0, r4
   1f15e:	f007 fc1e 	bl	2699e <twi_transfer>
        while ((hw_timeout > 0) &&
   1f162:	b128      	cbz	r0, 1f170 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1f164:	9b01      	ldr	r3, [sp, #4]
   1f166:	3b01      	subs	r3, #1
   1f168:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1f16a:	9b01      	ldr	r3, [sp, #4]
   1f16c:	2b00      	cmp	r3, #0
   1f16e:	dcf4      	bgt.n	1f15a <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1f170:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1f174:	b95b      	cbnz	r3, 1f18e <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f176:	4813      	ldr	r0, [pc, #76]	; (1f1c4 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1f178:	9b01      	ldr	r3, [sp, #4]
   1f17a:	2b00      	cmp	r3, #0
   1f17c:	dceb      	bgt.n	1f156 <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1f17e:	2300      	movs	r3, #0
   1f180:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1f184:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1f186:	4810      	ldr	r0, [pc, #64]	; (1f1c8 <twi_tx_start_transfer+0xcc>)
   1f188:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1f18c:	e7e3      	b.n	1f156 <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1f18e:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1f192:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1f196:	b18b      	cbz	r3, 1f1bc <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1f198:	4a0c      	ldr	r2, [pc, #48]	; (1f1cc <twi_tx_start_transfer+0xd0>)
   1f19a:	480b      	ldr	r0, [pc, #44]	; (1f1c8 <twi_tx_start_transfer+0xcc>)
   1f19c:	f013 0f01 	tst.w	r3, #1
   1f1a0:	bf18      	it	ne
   1f1a2:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1f1a4:	f013 0f02 	tst.w	r3, #2
   1f1a8:	f102 0201 	add.w	r2, r2, #1
   1f1ac:	bf18      	it	ne
   1f1ae:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1f1b0:	f013 0f04 	tst.w	r3, #4
   1f1b4:	4b06      	ldr	r3, [pc, #24]	; (1f1d0 <twi_tx_start_transfer+0xd4>)
   1f1b6:	bf18      	it	ne
   1f1b8:	4618      	movne	r0, r3
   1f1ba:	e7dd      	b.n	1f178 <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1f1bc:	4802      	ldr	r0, [pc, #8]	; (1f1c8 <twi_tx_start_transfer+0xcc>)
   1f1be:	e7db      	b.n	1f178 <twi_tx_start_transfer+0x7c>
   1f1c0:	000186a0 	.word	0x000186a0
   1f1c4:	0bad0000 	.word	0x0bad0000
   1f1c8:	0bad0001 	.word	0x0bad0001
   1f1cc:	0bae0000 	.word	0x0bae0000
   1f1d0:	0bae0002 	.word	0x0bae0002

0001f1d4 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1f1d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1f1d6:	4b34      	ldr	r3, [pc, #208]	; (1f2a8 <twi_rx_start_transfer+0xd4>)
   1f1d8:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1da:	2300      	movs	r3, #0
   1f1dc:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1f1e0:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1f1e4:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1f1e8:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1f1ec:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1f1f0:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1f1f4:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1f1f8:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1f1fc:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1f1fe:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1f202:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1f204:	2b01      	cmp	r3, #1
{
   1f206:	4604      	mov	r4, r0
   1f208:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1f20a:	d117      	bne.n	1f23c <twi_rx_start_transfer+0x68>
   1f20c:	6a0b      	ldr	r3, [r1, #32]
   1f20e:	065b      	lsls	r3, r3, #25
   1f210:	d414      	bmi.n	1f23c <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
   1f212:	2302      	movs	r3, #2
   1f214:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f218:	2301      	movs	r3, #1
   1f21a:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1f21c:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1f220:	2a02      	cmp	r2, #2
   1f222:	bf18      	it	ne
   1f224:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1f226:	682b      	ldr	r3, [r5, #0]
   1f228:	b193      	cbz	r3, 1f250 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1f22a:	f240 2386 	movw	r3, #646	; 0x286
   1f22e:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1f230:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f232:	481e      	ldr	r0, [pc, #120]	; (1f2ac <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1f234:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1f238:	b003      	add	sp, #12
   1f23a:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1f23c:	2301      	movs	r3, #1
   1f23e:	e7e9      	b.n	1f214 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1f240:	4629      	mov	r1, r5
   1f242:	4620      	mov	r0, r4
   1f244:	f007 fbab 	bl	2699e <twi_transfer>
        while ((hw_timeout > 0) &&
   1f248:	b128      	cbz	r0, 1f256 <twi_rx_start_transfer+0x82>
               hw_timeout--;
   1f24a:	9b01      	ldr	r3, [sp, #4]
   1f24c:	3b01      	subs	r3, #1
   1f24e:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1f250:	9b01      	ldr	r3, [sp, #4]
   1f252:	2b00      	cmp	r3, #0
   1f254:	dcf4      	bgt.n	1f240 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   1f256:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1f25a:	b95b      	cbnz	r3, 1f274 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f25c:	4813      	ldr	r0, [pc, #76]	; (1f2ac <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1f25e:	9b01      	ldr	r3, [sp, #4]
   1f260:	2b00      	cmp	r3, #0
   1f262:	dce9      	bgt.n	1f238 <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1f264:	2300      	movs	r3, #0
   1f266:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1f26a:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1f26c:	4810      	ldr	r0, [pc, #64]	; (1f2b0 <twi_rx_start_transfer+0xdc>)
   1f26e:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1f272:	e7e1      	b.n	1f238 <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1f274:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1f278:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1f27c:	b18b      	cbz	r3, 1f2a2 <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1f27e:	4a0d      	ldr	r2, [pc, #52]	; (1f2b4 <twi_rx_start_transfer+0xe0>)
   1f280:	480b      	ldr	r0, [pc, #44]	; (1f2b0 <twi_rx_start_transfer+0xdc>)
   1f282:	f013 0f01 	tst.w	r3, #1
   1f286:	bf18      	it	ne
   1f288:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1f28a:	f013 0f02 	tst.w	r3, #2
   1f28e:	f102 0201 	add.w	r2, r2, #1
   1f292:	bf18      	it	ne
   1f294:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1f296:	f013 0f04 	tst.w	r3, #4
   1f29a:	4b07      	ldr	r3, [pc, #28]	; (1f2b8 <twi_rx_start_transfer+0xe4>)
   1f29c:	bf18      	it	ne
   1f29e:	4618      	movne	r0, r3
   1f2a0:	e7dd      	b.n	1f25e <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   1f2a2:	4803      	ldr	r0, [pc, #12]	; (1f2b0 <twi_rx_start_transfer+0xdc>)
   1f2a4:	e7db      	b.n	1f25e <twi_rx_start_transfer+0x8a>
   1f2a6:	bf00      	nop
   1f2a8:	000186a0 	.word	0x000186a0
   1f2ac:	0bad0000 	.word	0x0bad0000
   1f2b0:	0bad0001 	.word	0x0bad0001
   1f2b4:	0bae0000 	.word	0x0bae0000
   1f2b8:	0bae0002 	.word	0x0bae0002

0001f2bc <nrfx_twi_init>:
{
   1f2bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f2c0:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1f2c4:	4d25      	ldr	r5, [pc, #148]	; (1f35c <nrfx_twi_init+0xa0>)
   1f2c6:	273c      	movs	r7, #60	; 0x3c
   1f2c8:	fb07 f708 	mul.w	r7, r7, r8
   1f2cc:	19ec      	adds	r4, r5, r7
   1f2ce:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1f2d2:	2e00      	cmp	r6, #0
   1f2d4:	d13f      	bne.n	1f356 <nrfx_twi_init+0x9a>
    p_cb->int_mask        = 0;
   1f2d6:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1f2d8:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   1f2dc:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   1f2e0:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
   1f2e4:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
   1f2e6:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1f2e8:	7b4b      	ldrb	r3, [r1, #13]
   1f2ea:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->handler         = event_handler;
   1f2ee:	51ea      	str	r2, [r5, r7]
        case 1: return NRF_P1;
   1f2f0:	4b1b      	ldr	r3, [pc, #108]	; (1f360 <nrfx_twi_init+0xa4>)
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1f2f2:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   1f2f4:	0977      	lsrs	r7, r6, #5
        case 1: return NRF_P1;
   1f2f6:	2f01      	cmp	r7, #1
    *p_pin = pin_number & 0x1F;
   1f2f8:	f006 041f 	and.w	r4, r6, #31
        case 1: return NRF_P1;
   1f2fc:	bf0c      	ite	eq
   1f2fe:	461f      	moveq	r7, r3
   1f300:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f304:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1f308:	f240 6c0c 	movw	ip, #1548	; 0x60c
   1f30c:	f847 c024 	str.w	ip, [r7, r4, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   1f310:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   1f312:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   1f316:	f004 071f 	and.w	r7, r4, #31
        case 1: return NRF_P1;
   1f31a:	f1be 0f01 	cmp.w	lr, #1
   1f31e:	bf18      	it	ne
   1f320:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f324:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1f328:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
   1f32c:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   1f32e:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1f332:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   1f336:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1f33a:	b11a      	cbz	r2, 1f344 <nrfx_twi_init+0x88>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1f33c:	f340 3007 	sbfx	r0, r0, #12, #8
   1f340:	f7e8 f952 	bl	75e8 <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f344:	233c      	movs	r3, #60	; 0x3c
   1f346:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
   1f34a:	4806      	ldr	r0, [pc, #24]	; (1f364 <nrfx_twi_init+0xa8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f34c:	2301      	movs	r3, #1
   1f34e:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1f352:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1f356:	4804      	ldr	r0, [pc, #16]	; (1f368 <nrfx_twi_init+0xac>)
   1f358:	e7fb      	b.n	1f352 <nrfx_twi_init+0x96>
   1f35a:	bf00      	nop
   1f35c:	2000ecc4 	.word	0x2000ecc4
   1f360:	50000300 	.word	0x50000300
   1f364:	0bad0000 	.word	0x0bad0000
   1f368:	0bad0005 	.word	0x0bad0005

0001f36c <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1f36c:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f36e:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1f370:	2105      	movs	r1, #5
   1f372:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1f376:	4b04      	ldr	r3, [pc, #16]	; (1f388 <nrfx_twi_enable+0x1c>)
   1f378:	213c      	movs	r1, #60	; 0x3c
   1f37a:	fb01 3302 	mla	r3, r1, r2, r3
   1f37e:	2202      	movs	r2, #2
   1f380:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1f384:	4770      	bx	lr
   1f386:	bf00      	nop
   1f388:	2000ecc4 	.word	0x2000ecc4

0001f38c <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1f38c:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   1f38e:	4a0a      	ldr	r2, [pc, #40]	; (1f3b8 <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f390:	7901      	ldrb	r1, [r0, #4]
   1f392:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1f396:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f39a:	f022 0203 	bic.w	r2, r2, #3
   1f39e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1f3a2:	2200      	movs	r2, #0
   1f3a4:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f3a8:	4b04      	ldr	r3, [pc, #16]	; (1f3bc <nrfx_twi_disable+0x30>)
   1f3aa:	223c      	movs	r2, #60	; 0x3c
   1f3ac:	fb02 3301 	mla	r3, r2, r1, r3
   1f3b0:	2201      	movs	r2, #1
   1f3b2:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1f3b6:	4770      	bx	lr
   1f3b8:	00044286 	.word	0x00044286
   1f3bc:	2000ecc4 	.word	0x2000ecc4

0001f3c0 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1f3c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f3c4:	4f31      	ldr	r7, [pc, #196]	; (1f48c <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f3c6:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1f3c8:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f3cc:	233c      	movs	r3, #60	; 0x3c
   1f3ce:	fb03 7304 	mla	r3, r3, r4, r7
{
   1f3d2:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f3d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1f3d8:	2b01      	cmp	r3, #1
{
   1f3da:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f3dc:	d104      	bne.n	1f3e8 <nrfx_twi_xfer+0x28>
   1f3de:	780b      	ldrb	r3, [r1, #0]
   1f3e0:	2b01      	cmp	r3, #1
   1f3e2:	d106      	bne.n	1f3f2 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   1f3e4:	482a      	ldr	r0, [pc, #168]	; (1f490 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1f3e6:	e011      	b.n	1f40c <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1f3e8:	2b02      	cmp	r3, #2
   1f3ea:	d102      	bne.n	1f3f2 <nrfx_twi_xfer+0x32>
   1f3ec:	780b      	ldrb	r3, [r1, #0]
   1f3ee:	2b01      	cmp	r3, #1
   1f3f0:	d1f8      	bne.n	1f3e4 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   1f3f2:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1f3f4:	4b27      	ldr	r3, [pc, #156]	; (1f494 <nrfx_twi_xfer+0xd4>)
   1f3f6:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1f3fa:	fb06 7604 	mla	r6, r6, r4, r7
   1f3fe:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1f402:	b12b      	cbz	r3, 1f410 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1f404:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1f406:	4824      	ldr	r0, [pc, #144]	; (1f498 <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   1f408:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1f40c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1f410:	f08c 0304 	eor.w	r3, ip, #4
   1f414:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1f418:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1f41c:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1f420:	46a8      	mov	r8, r5
   1f422:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   1f426:	f106 0e0c 	add.w	lr, r6, #12
   1f42a:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f42e:	f8d8 3000 	ldr.w	r3, [r8]
   1f432:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1f436:	686b      	ldr	r3, [r5, #4]
   1f438:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1f43a:	68eb      	ldr	r3, [r5, #12]
   1f43c:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   1f43e:	786b      	ldrb	r3, [r5, #1]
   1f440:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1f444:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f446:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1f44a:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f44c:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1f450:	d017      	beq.n	1f482 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1f452:	b99b      	cbnz	r3, 1f47c <nrfx_twi_xfer+0xbc>
   1f454:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1f458:	233c      	movs	r3, #60	; 0x3c
   1f45a:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1f45e:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1f460:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1f464:	4648      	mov	r0, r9
   1f466:	f7ff fe49 	bl	1f0fc <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1f46a:	233c      	movs	r3, #60	; 0x3c
   1f46c:	435c      	muls	r4, r3
   1f46e:	193a      	adds	r2, r7, r4
   1f470:	593b      	ldr	r3, [r7, r4]
   1f472:	2b00      	cmp	r3, #0
   1f474:	d1ca      	bne.n	1f40c <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   1f476:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1f47a:	e7c7      	b.n	1f40c <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1f47c:	f04f 0c01 	mov.w	ip, #1
   1f480:	e7ea      	b.n	1f458 <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1f482:	4651      	mov	r1, sl
   1f484:	4648      	mov	r0, r9
   1f486:	f7ff fea5 	bl	1f1d4 <twi_rx_start_transfer>
   1f48a:	e7ee      	b.n	1f46a <nrfx_twi_xfer+0xaa>
   1f48c:	2000ecc4 	.word	0x2000ecc4
   1f490:	0bad0005 	.word	0x0bad0005
   1f494:	00044286 	.word	0x00044286
   1f498:	0bad000b 	.word	0x0bad000b

0001f49c <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1f49c:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1f49e:	4c2b      	ldr	r4, [pc, #172]	; (1f54c <nrfx_twi_0_irq_handler+0xb0>)
   1f4a0:	482b      	ldr	r0, [pc, #172]	; (1f550 <nrfx_twi_0_irq_handler+0xb4>)
{
   1f4a2:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1f4a4:	4621      	mov	r1, r4
   1f4a6:	f007 fa7a 	bl	2699e <twi_transfer>
   1f4aa:	2800      	cmp	r0, #0
   1f4ac:	d140      	bne.n	1f530 <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
   1f4ae:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1f4b2:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
   1f4b6:	b9ff      	cbnz	r7, 1f4f8 <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1f4b8:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   1f4ba:	1e9a      	subs	r2, r3, #2
   1f4bc:	2a01      	cmp	r2, #1
   1f4be:	d81b      	bhi.n	1f4f8 <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1f4c0:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f4c2:	69a2      	ldr	r2, [r4, #24]
   1f4c4:	4291      	cmp	r1, r2
   1f4c6:	d117      	bne.n	1f4f8 <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1f4c8:	69e2      	ldr	r2, [r4, #28]
   1f4ca:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1f4cc:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1f4d0:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1f4d2:	481f      	ldr	r0, [pc, #124]	; (1f550 <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1f4d4:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1f4d6:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1f4d8:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1f4dc:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1f4e0:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1f4e2:	d104      	bne.n	1f4ee <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1f4e4:	b007      	add	sp, #28
   1f4e6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1f4ea:	f7ff be07 	b.w	1f0fc <twi_tx_start_transfer>
}
   1f4ee:	b007      	add	sp, #28
   1f4f0:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1f4f4:	f7ff be6e 	b.w	1f1d4 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   1f4f8:	4e16      	ldr	r6, [pc, #88]	; (1f554 <nrfx_twi_0_irq_handler+0xb8>)
   1f4fa:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f4fc:	ad01      	add	r5, sp, #4
   1f4fe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f500:	6833      	ldr	r3, [r6, #0]
   1f502:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   1f504:	b1ff      	cbz	r7, 1f546 <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   1f506:	4a12      	ldr	r2, [pc, #72]	; (1f550 <nrfx_twi_0_irq_handler+0xb4>)
   1f508:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1f50c:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1f510:	0799      	lsls	r1, r3, #30
   1f512:	d50f      	bpl.n	1f534 <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1f514:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1f516:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1f51a:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1f51c:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   1f520:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1f524:	d000      	beq.n	1f528 <nrfx_twi_0_irq_handler+0x8c>
   1f526:	b11f      	cbz	r7, 1f530 <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
   1f528:	e9d4 3100 	ldrd	r3, r1, [r4]
   1f52c:	4668      	mov	r0, sp
   1f52e:	4798      	blx	r3
}
   1f530:	b007      	add	sp, #28
   1f532:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1f534:	075a      	lsls	r2, r3, #29
   1f536:	d501      	bpl.n	1f53c <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1f538:	2302      	movs	r3, #2
   1f53a:	e7ec      	b.n	1f516 <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1f53c:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   1f53e:	bf4c      	ite	mi
   1f540:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1f542:	2304      	movpl	r3, #4
   1f544:	e7e7      	b.n	1f516 <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
   1f546:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   1f54a:	e7e6      	b.n	1f51a <nrfx_twi_0_irq_handler+0x7e>
   1f54c:	2000ecc4 	.word	0x2000ecc4
   1f550:	40003000 	.word	0x40003000
   1f554:	2000ecd0 	.word	0x2000ecd0

0001f558 <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1f558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f55a:	4b10      	ldr	r3, [pc, #64]	; (1f59c <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1f55c:	4f10      	ldr	r7, [pc, #64]	; (1f5a0 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f55e:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1f562:	3001      	adds	r0, #1
   1f564:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f568:	42ae      	cmp	r6, r5
   1f56a:	d800      	bhi.n	1f56e <z_sys_init_run_level+0x16>
		}
	}
}
   1f56c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1f56e:	e9d5 3400 	ldrd	r3, r4, [r5]
   1f572:	4620      	mov	r0, r4
   1f574:	4798      	blx	r3
   1f576:	b170      	cbz	r0, 1f596 <z_sys_init_run_level+0x3e>
   1f578:	b16c      	cbz	r4, 1f596 <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1f57a:	1be4      	subs	r4, r4, r7
   1f57c:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f57e:	0961      	lsrs	r1, r4, #5
   1f580:	4a08      	ldr	r2, [pc, #32]	; (1f5a4 <z_sys_init_run_level+0x4c>)
   1f582:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f586:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1f58a:	2301      	movs	r3, #1
   1f58c:	fa03 f404 	lsl.w	r4, r3, r4
   1f590:	4304      	orrs	r4, r0
   1f592:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f596:	3508      	adds	r5, #8
   1f598:	e7e6      	b.n	1f568 <z_sys_init_run_level+0x10>
   1f59a:	bf00      	nop
   1f59c:	00029158 	.word	0x00029158
   1f5a0:	20009d80 	.word	0x20009d80
   1f5a4:	20009e20 	.word	0x20009e20

0001f5a8 <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1f5a8:	4b08      	ldr	r3, [pc, #32]	; (1f5cc <z_device_ready+0x24>)
   1f5aa:	1ac0      	subs	r0, r0, r3
   1f5ac:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f5ae:	4b08      	ldr	r3, [pc, #32]	; (1f5d0 <z_device_ready+0x28>)
   1f5b0:	0942      	lsrs	r2, r0, #5
   1f5b2:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f5b6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1f5ba:	2301      	movs	r3, #1
   1f5bc:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1f5c0:	4210      	tst	r0, r2
}
   1f5c2:	bf0c      	ite	eq
   1f5c4:	4618      	moveq	r0, r3
   1f5c6:	2000      	movne	r0, #0
   1f5c8:	4770      	bx	lr
   1f5ca:	bf00      	nop
   1f5cc:	20009d80 	.word	0x20009d80
   1f5d0:	20009e20 	.word	0x20009e20

0001f5d4 <z_impl_device_get_binding>:
{
   1f5d4:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1f5d6:	4c10      	ldr	r4, [pc, #64]	; (1f618 <z_impl_device_get_binding+0x44>)
   1f5d8:	4e10      	ldr	r6, [pc, #64]	; (1f61c <z_impl_device_get_binding+0x48>)
{
   1f5da:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   1f5dc:	42b4      	cmp	r4, r6
   1f5de:	d104      	bne.n	1f5ea <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f5e0:	4c0d      	ldr	r4, [pc, #52]	; (1f618 <z_impl_device_get_binding+0x44>)
   1f5e2:	42b4      	cmp	r4, r6
   1f5e4:	d10a      	bne.n	1f5fc <z_impl_device_get_binding+0x28>
	return NULL;
   1f5e6:	2400      	movs	r4, #0
   1f5e8:	e014      	b.n	1f614 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1f5ea:	4620      	mov	r0, r4
   1f5ec:	f7ff ffdc 	bl	1f5a8 <z_device_ready>
   1f5f0:	b110      	cbz	r0, 1f5f8 <z_impl_device_get_binding+0x24>
   1f5f2:	6823      	ldr	r3, [r4, #0]
   1f5f4:	42ab      	cmp	r3, r5
   1f5f6:	d00d      	beq.n	1f614 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f5f8:	3410      	adds	r4, #16
   1f5fa:	e7ef      	b.n	1f5dc <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f5fc:	4620      	mov	r0, r4
   1f5fe:	f7ff ffd3 	bl	1f5a8 <z_device_ready>
   1f602:	b908      	cbnz	r0, 1f608 <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f604:	3410      	adds	r4, #16
   1f606:	e7ec      	b.n	1f5e2 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f608:	6821      	ldr	r1, [r4, #0]
   1f60a:	4628      	mov	r0, r5
   1f60c:	f004 fe4c 	bl	242a8 <strcmp>
   1f610:	2800      	cmp	r0, #0
   1f612:	d1f7      	bne.n	1f604 <z_impl_device_get_binding+0x30>
}
   1f614:	4620      	mov	r0, r4
   1f616:	bd70      	pop	{r4, r5, r6, pc}
   1f618:	20009d80 	.word	0x20009d80
   1f61c:	20009e20 	.word	0x20009e20

0001f620 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f620:	4b01      	ldr	r3, [pc, #4]	; (1f628 <z_impl_z_errno+0x8>)
   1f622:	6898      	ldr	r0, [r3, #8]
}
   1f624:	3068      	adds	r0, #104	; 0x68
   1f626:	4770      	bx	lr
   1f628:	2000ed00 	.word	0x2000ed00

0001f62c <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f62c:	b510      	push	{r4, lr}
   1f62e:	4604      	mov	r4, r0
	z_impl_log_panic();
   1f630:	f7e6 f8ea 	bl	5808 <z_impl_log_panic>
   1f634:	4b06      	ldr	r3, [pc, #24]	; (1f650 <k_sys_fatal_error_handler+0x24>)
   1f636:	4907      	ldr	r1, [pc, #28]	; (1f654 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1f638:	4807      	ldr	r0, [pc, #28]	; (1f658 <k_sys_fatal_error_handler+0x2c>)
   1f63a:	1ac9      	subs	r1, r1, r3
   1f63c:	08c9      	lsrs	r1, r1, #3
   1f63e:	0189      	lsls	r1, r1, #6
   1f640:	f041 0101 	orr.w	r1, r1, #1
   1f644:	f002 fe52 	bl	222ec <log_0>
	arch_system_halt(reason);
   1f648:	4620      	mov	r0, r4
   1f64a:	f007 fa34 	bl	26ab6 <arch_system_halt>
   1f64e:	bf00      	nop
   1f650:	0002775c 	.word	0x0002775c
   1f654:	00027894 	.word	0x00027894
   1f658:	0002d7fa 	.word	0x0002d7fa

0001f65c <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f65c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f660:	4606      	mov	r6, r0
   1f662:	460f      	mov	r7, r1
	__asm__ volatile(
   1f664:	f04f 0320 	mov.w	r3, #32
   1f668:	f3ef 8811 	mrs	r8, BASEPRI
   1f66c:	f383 8811 	msr	BASEPRI, r3
   1f670:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f674:	f000 fe3e 	bl	202f4 <z_impl_k_current_get>
   1f678:	4c1f      	ldr	r4, [pc, #124]	; (1f6f8 <z_fatal_error+0x9c>)
   1f67a:	4b20      	ldr	r3, [pc, #128]	; (1f6fc <z_fatal_error+0xa0>)
   1f67c:	1ae4      	subs	r4, r4, r3
   1f67e:	2e04      	cmp	r6, #4
   1f680:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f684:	bf96      	itet	ls
   1f686:	4a1e      	ldrls	r2, [pc, #120]	; (1f700 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f688:	4a1e      	ldrhi	r2, [pc, #120]	; (1f704 <z_fatal_error+0xa8>)
   1f68a:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1f68e:	01a4      	lsls	r4, r4, #6
   1f690:	f044 0301 	orr.w	r3, r4, #1
   1f694:	4605      	mov	r5, r0
   1f696:	f8ad 3000 	strh.w	r3, [sp]
   1f69a:	481b      	ldr	r0, [pc, #108]	; (1f708 <z_fatal_error+0xac>)
   1f69c:	2300      	movs	r3, #0
   1f69e:	4631      	mov	r1, r6
   1f6a0:	f002 fe5e 	bl	22360 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f6a4:	b147      	cbz	r7, 1f6b8 <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f6a6:	69fb      	ldr	r3, [r7, #28]
   1f6a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f6ac:	b123      	cbz	r3, 1f6b8 <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1f6ae:	4817      	ldr	r0, [pc, #92]	; (1f70c <z_fatal_error+0xb0>)
   1f6b0:	f044 0101 	orr.w	r1, r4, #1
   1f6b4:	f002 fe1a 	bl	222ec <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f6b8:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1f6bc:	b12d      	cbz	r5, 1f6ca <z_fatal_error+0x6e>
   1f6be:	4628      	mov	r0, r5
   1f6c0:	f007 fc6a 	bl	26f98 <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f6c4:	b108      	cbz	r0, 1f6ca <z_fatal_error+0x6e>
   1f6c6:	7803      	ldrb	r3, [r0, #0]
   1f6c8:	b903      	cbnz	r3, 1f6cc <z_fatal_error+0x70>
		thread_name = "unknown";
   1f6ca:	4811      	ldr	r0, [pc, #68]	; (1f710 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1f6cc:	f7e5 ff18 	bl	5500 <log_strdup>
   1f6d0:	4623      	mov	r3, r4
   1f6d2:	4602      	mov	r2, r0
   1f6d4:	4629      	mov	r1, r5
   1f6d6:	480f      	ldr	r0, [pc, #60]	; (1f714 <z_fatal_error+0xb8>)
   1f6d8:	f002 fe29 	bl	2232e <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1f6dc:	4639      	mov	r1, r7
   1f6de:	4630      	mov	r0, r6
   1f6e0:	f7ff ffa4 	bl	1f62c <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f6e4:	f388 8811 	msr	BASEPRI, r8
   1f6e8:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f6ec:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f6ee:	b002      	add	sp, #8
   1f6f0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f6f4:	f7e8 bb12 	b.w	7d1c <z_impl_k_thread_abort>
   1f6f8:	00027894 	.word	0x00027894
   1f6fc:	0002775c 	.word	0x0002775c
   1f700:	00029170 	.word	0x00029170
   1f704:	0002d809 	.word	0x0002d809
   1f708:	0002d817 	.word	0x0002d817
   1f70c:	0002d83f 	.word	0x0002d83f
   1f710:	0002bf04 	.word	0x0002bf04
   1f714:	0002d860 	.word	0x0002d860

0001f718 <z_pm_save_idle_exit>:
}
#endif /* !SMP_FALLBACK */


void z_pm_save_idle_exit(int32_t ticks)
{
   1f718:	b508      	push	{r3, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (pm_idle_exit_notify) {
   1f71a:	4b04      	ldr	r3, [pc, #16]	; (1f72c <z_pm_save_idle_exit+0x14>)
   1f71c:	781b      	ldrb	r3, [r3, #0]
   1f71e:	b10b      	cbz	r3, 1f724 <z_pm_save_idle_exit+0xc>
		pm_system_resume();
   1f720:	f7e7 fa6c 	bl	6bfc <pm_system_resume>
	}
#endif	/* CONFIG_PM */
	z_clock_idle_exit();
}
   1f724:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
   1f728:	f003 bbf5 	b.w	22f16 <z_clock_idle_exit>
   1f72c:	2000f31a 	.word	0x2000f31a

0001f730 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1f730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1f734:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1f7a4 <idle+0x74>
	pm_idle_exit_notify = 1U;
   1f738:	4e1b      	ldr	r6, [pc, #108]	; (1f7a8 <idle+0x78>)
{
   1f73a:	4605      	mov	r5, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f73c:	2701      	movs	r7, #1
	__asm__ volatile(
   1f73e:	f04f 0220 	mov.w	r2, #32
   1f742:	f3ef 8311 	mrs	r3, BASEPRI
   1f746:	f382 8811 	msr	BASEPRI, r2
   1f74a:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1f74e:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1f750:	b190      	cbz	r0, 1f778 <idle+0x48>
			cpu->pending_abort = NULL;
   1f752:	2200      	movs	r2, #0
   1f754:	612a      	str	r2, [r5, #16]
	__asm__ volatile(
   1f756:	f383 8811 	msr	BASEPRI, r3
   1f75a:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1f75e:	f000 fc05 	bl	1ff6c <z_thread_single_abort>
	__asm__ volatile(
   1f762:	f04f 0320 	mov.w	r3, #32
   1f766:	f3ef 8011 	mrs	r0, BASEPRI
   1f76a:	f383 8811 	msr	BASEPRI, r3
   1f76e:	f3bf 8f6f 	isb	sy
   1f772:	f007 fb20 	bl	26db6 <z_reschedule_irqlock>
			continue;
   1f776:	e7e2      	b.n	1f73e <idle+0xe>
		int32_t ticks = z_get_next_timeout_expiry();
   1f778:	f007 fc9e 	bl	270b8 <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f77c:	2101      	movs	r1, #1
   1f77e:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1f780:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f782:	bfd8      	it	le
   1f784:	4608      	movle	r0, r1
   1f786:	f007 fca7 	bl	270d8 <z_set_timeout_expiry>
	idle_state = pm_system_suspend(ticks);
   1f78a:	4620      	mov	r0, r4
		_kernel.idle = ticks;
   1f78c:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	pm_idle_exit_notify = 1U;
   1f790:	7037      	strb	r7, [r6, #0]
	idle_state = pm_system_suspend(ticks);
   1f792:	f7e7 f9f7 	bl	6b84 <pm_system_suspend>
	if (idle_state == PM_STATE_ACTIVE) {
   1f796:	2800      	cmp	r0, #0
   1f798:	d1d1      	bne.n	1f73e <idle+0xe>
		pm_idle_exit_notify = 0U;
   1f79a:	7030      	strb	r0, [r6, #0]
	arch_cpu_idle();
   1f79c:	f7e7 ffce 	bl	773c <arch_cpu_idle>
}
   1f7a0:	e7cd      	b.n	1f73e <idle+0xe>
   1f7a2:	bf00      	nop
   1f7a4:	2000ed00 	.word	0x2000ed00
   1f7a8:	2000f31a 	.word	0x2000f31a

0001f7ac <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f7ac:	4802      	ldr	r0, [pc, #8]	; (1f7b8 <z_bss_zero+0xc>)
   1f7ae:	4a03      	ldr	r2, [pc, #12]	; (1f7bc <z_bss_zero+0x10>)
   1f7b0:	2100      	movs	r1, #0
   1f7b2:	1a12      	subs	r2, r2, r0
   1f7b4:	f004 bdd1 	b.w	2435a <memset>
   1f7b8:	2000a168 	.word	0x2000a168
   1f7bc:	2000f31c 	.word	0x2000f31c

0001f7c0 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f7c0:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f7c2:	4b0a      	ldr	r3, [pc, #40]	; (1f7ec <bg_thread_main+0x2c>)
   1f7c4:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f7c6:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f7c8:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f7ca:	f7ff fec5 	bl	1f558 <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f7ce:	f000 ff31 	bl	20634 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f7d2:	2003      	movs	r0, #3
   1f7d4:	f7ff fec0 	bl	1f558 <z_sys_init_run_level>

	z_init_static_threads();
   1f7d8:	f000 fe56 	bl	20488 <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f7dc:	f7e1 fd1c 	bl	1218 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f7e0:	4a03      	ldr	r2, [pc, #12]	; (1f7f0 <bg_thread_main+0x30>)
   1f7e2:	7b13      	ldrb	r3, [r2, #12]
   1f7e4:	f023 0301 	bic.w	r3, r3, #1
   1f7e8:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f7ea:	bd08      	pop	{r3, pc}
   1f7ec:	2000f31b 	.word	0x2000f31b
   1f7f0:	2000ac18 	.word	0x2000ac18

0001f7f4 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f7f4:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f7f8:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f7fa:	f7e5 fdd9 	bl	53b0 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f7fe:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1f8d4 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f802:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f806:	4d34      	ldr	r5, [pc, #208]	; (1f8d8 <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1f808:	4e34      	ldr	r6, [pc, #208]	; (1f8dc <z_cstart+0xe8>)
   1f80a:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f80c:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1f8e0 <z_cstart+0xec>
	z_setup_new_thread(thread, stack,
   1f810:	4f34      	ldr	r7, [pc, #208]	; (1f8e4 <z_cstart+0xf0>)
   1f812:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f816:	2400      	movs	r4, #0
   1f818:	616b      	str	r3, [r5, #20]
   1f81a:	23e0      	movs	r3, #224	; 0xe0
   1f81c:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f820:	77ec      	strb	r4, [r5, #31]
   1f822:	762c      	strb	r4, [r5, #24]
   1f824:	766c      	strb	r4, [r5, #25]
   1f826:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f828:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f82a:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f82e:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f830:	f7e8 fa52 	bl	7cd8 <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f834:	f7e7 ff7c 	bl	7730 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f838:	f04f 33ff 	mov.w	r3, #4294967295
   1f83c:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f83e:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1f840:	4d29      	ldr	r5, [pc, #164]	; (1f8e8 <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f842:	f240 1301 	movw	r3, #257	; 0x101
   1f846:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f84a:	ab06      	add	r3, sp, #24
   1f84c:	60ab      	str	r3, [r5, #8]
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f84e:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1f850:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1f854:	f7ff fe80 	bl	1f558 <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f858:	2001      	movs	r0, #1
   1f85a:	f7ff fe7d 	bl	1f558 <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f85e:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1f862:	f000 fc99 	bl	20198 <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f866:	4b21      	ldr	r3, [pc, #132]	; (1f8ec <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f868:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f86a:	4921      	ldr	r1, [pc, #132]	; (1f8f0 <z_cstart+0xfc>)
   1f86c:	9305      	str	r3, [sp, #20]
   1f86e:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f872:	4653      	mov	r3, sl
   1f874:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1f878:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f87c:	9400      	str	r4, [sp, #0]
   1f87e:	4630      	mov	r0, r6
   1f880:	f000 fda4 	bl	203cc <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f884:	7b73      	ldrb	r3, [r6, #13]
   1f886:	4680      	mov	r8, r0
   1f888:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1f88c:	4630      	mov	r0, r6
   1f88e:	7373      	strb	r3, [r6, #13]
   1f890:	f007 facf 	bl	26e32 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1f894:	230f      	movs	r3, #15
   1f896:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1f89a:	4916      	ldr	r1, [pc, #88]	; (1f8f4 <z_cstart+0x100>)
   1f89c:	4b16      	ldr	r3, [pc, #88]	; (1f8f8 <z_cstart+0x104>)
   1f89e:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1f8a2:	e9cd b404 	strd	fp, r4, [sp, #16]
   1f8a6:	e9cd 5400 	strd	r5, r4, [sp]
   1f8aa:	4638      	mov	r0, r7
   1f8ac:	f000 fd8e 	bl	203cc <z_setup_new_thread>
   1f8b0:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1f8b2:	60ef      	str	r7, [r5, #12]
   1f8b4:	f023 0304 	bic.w	r3, r3, #4
   1f8b8:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1f8ba:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1f8be:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1f8c2:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1f8c4:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1f8c8:	4652      	mov	r2, sl
   1f8ca:	4641      	mov	r1, r8
   1f8cc:	4630      	mov	r0, r6
   1f8ce:	f7e7 ff15 	bl	76fc <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1f8d2:	bf00      	nop
   1f8d4:	20012260 	.word	0x20012260
   1f8d8:	e000ed00 	.word	0xe000ed00
   1f8dc:	2000ac18 	.word	0x2000ac18
   1f8e0:	0001f7c1 	.word	0x0001f7c1
   1f8e4:	2000ab90 	.word	0x2000ab90
   1f8e8:	2000ed00 	.word	0x2000ed00
   1f8ec:	0002d8c2 	.word	0x0002d8c2
   1f8f0:	200114c0 	.word	0x200114c0
   1f8f4:	200118e0 	.word	0x200118e0
   1f8f8:	0001f731 	.word	0x0001f731

0001f8fc <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1f8fc:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f8fe:	4c06      	ldr	r4, [pc, #24]	; (1f918 <statics_init+0x1c>)
   1f900:	4d06      	ldr	r5, [pc, #24]	; (1f91c <statics_init+0x20>)
   1f902:	42ac      	cmp	r4, r5
   1f904:	d301      	bcc.n	1f90a <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1f906:	2000      	movs	r0, #0
   1f908:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1f90a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1f90e:	4620      	mov	r0, r4
   1f910:	f007 f8da 	bl	26ac8 <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1f914:	3414      	adds	r4, #20
   1f916:	e7f4      	b.n	1f902 <statics_init+0x6>
   1f918:	20009f98 	.word	0x20009f98
   1f91c:	20009f98 	.word	0x20009f98

0001f920 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1f920:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f922:	4b0e      	ldr	r3, [pc, #56]	; (1f95c <init_mem_slab_module+0x3c>)
   1f924:	4c0e      	ldr	r4, [pc, #56]	; (1f960 <init_mem_slab_module+0x40>)
   1f926:	42a3      	cmp	r3, r4
   1f928:	d301      	bcc.n	1f92e <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1f92a:	2000      	movs	r0, #0
	return rc;
}
   1f92c:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1f92e:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1f932:	ea41 0200 	orr.w	r2, r1, r0
   1f936:	f012 0203 	ands.w	r2, r2, #3
   1f93a:	d10b      	bne.n	1f954 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1f93c:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1f93e:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f940:	42aa      	cmp	r2, r5
   1f942:	d101      	bne.n	1f948 <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1f944:	331c      	adds	r3, #28
   1f946:	e7ee      	b.n	1f926 <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1f948:	695e      	ldr	r6, [r3, #20]
   1f94a:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1f94c:	3201      	adds	r2, #1
		slab->free_list = p;
   1f94e:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1f950:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1f952:	e7f5      	b.n	1f940 <init_mem_slab_module+0x20>
	return rc;
   1f954:	f06f 0015 	mvn.w	r0, #21
   1f958:	e7e8      	b.n	1f92c <init_mem_slab_module+0xc>
   1f95a:	bf00      	nop
   1f95c:	20009f44 	.word	0x20009f44
   1f960:	20009f98 	.word	0x20009f98

0001f964 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1f964:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1f966:	460c      	mov	r4, r1
   1f968:	f04f 0520 	mov.w	r5, #32
   1f96c:	f3ef 8111 	mrs	r1, BASEPRI
   1f970:	f385 8811 	msr	BASEPRI, r5
   1f974:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1f978:	6945      	ldr	r5, [r0, #20]
   1f97a:	b15d      	cbz	r5, 1f994 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1f97c:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1f97e:	682b      	ldr	r3, [r5, #0]
   1f980:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1f982:	6983      	ldr	r3, [r0, #24]
   1f984:	3301      	adds	r3, #1
   1f986:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1f988:	2000      	movs	r0, #0
	__asm__ volatile(
   1f98a:	f381 8811 	msr	BASEPRI, r1
   1f98e:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1f992:	e011      	b.n	1f9b8 <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1f994:	ea52 0c03 	orrs.w	ip, r2, r3
   1f998:	d103      	bne.n	1f9a2 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1f99a:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1f99c:	f06f 000b 	mvn.w	r0, #11
   1f9a0:	e7f3      	b.n	1f98a <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1f9a2:	e9cd 2300 	strd	r2, r3, [sp]
   1f9a6:	4602      	mov	r2, r0
   1f9a8:	4804      	ldr	r0, [pc, #16]	; (1f9bc <k_mem_slab_alloc+0x58>)
   1f9aa:	f000 fba1 	bl	200f0 <z_pend_curr>
		if (result == 0) {
   1f9ae:	b918      	cbnz	r0, 1f9b8 <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1f9b0:	4b03      	ldr	r3, [pc, #12]	; (1f9c0 <k_mem_slab_alloc+0x5c>)
   1f9b2:	689b      	ldr	r3, [r3, #8]
   1f9b4:	695b      	ldr	r3, [r3, #20]
   1f9b6:	6023      	str	r3, [r4, #0]
}
   1f9b8:	b003      	add	sp, #12
   1f9ba:	bd30      	pop	{r4, r5, pc}
   1f9bc:	2000f31c 	.word	0x2000f31c
   1f9c0:	2000ed00 	.word	0x2000ed00

0001f9c4 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1f9c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f9c6:	4604      	mov	r4, r0
   1f9c8:	460d      	mov	r5, r1
	__asm__ volatile(
   1f9ca:	f04f 0320 	mov.w	r3, #32
   1f9ce:	f3ef 8611 	mrs	r6, BASEPRI
   1f9d2:	f383 8811 	msr	BASEPRI, r3
   1f9d6:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1f9da:	6947      	ldr	r7, [r0, #20]
   1f9dc:	b977      	cbnz	r7, 1f9fc <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1f9de:	f007 fa95 	bl	26f0c <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1f9e2:	b158      	cbz	r0, 1f9fc <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1f9e4:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1f9e6:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1f9e8:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1f9ec:	f007 fa21 	bl	26e32 <z_ready_thread>
			z_reschedule(&lock, key);
   1f9f0:	4631      	mov	r1, r6
   1f9f2:	4809      	ldr	r0, [pc, #36]	; (1fa18 <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1f9f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1f9f8:	f000 b93a 	b.w	1fc70 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1f9fc:	682b      	ldr	r3, [r5, #0]
   1f9fe:	6962      	ldr	r2, [r4, #20]
   1fa00:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1fa02:	682b      	ldr	r3, [r5, #0]
   1fa04:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1fa06:	69a3      	ldr	r3, [r4, #24]
   1fa08:	3b01      	subs	r3, #1
   1fa0a:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1fa0c:	f386 8811 	msr	BASEPRI, r6
   1fa10:	f3bf 8f6f 	isb	sy
}
   1fa14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fa16:	bf00      	nop
   1fa18:	2000f31c 	.word	0x2000f31c

0001fa1c <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1fa1c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fa20:	4604      	mov	r4, r0
   1fa22:	4617      	mov	r7, r2
   1fa24:	461e      	mov	r6, r3
	__asm__ volatile(
   1fa26:	f04f 0320 	mov.w	r3, #32
   1fa2a:	f3ef 8811 	mrs	r8, BASEPRI
   1fa2e:	f383 8811 	msr	BASEPRI, r3
   1fa32:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fa36:	68c3      	ldr	r3, [r0, #12]
   1fa38:	4a2f      	ldr	r2, [pc, #188]	; (1faf8 <z_impl_k_mutex_lock+0xdc>)
   1fa3a:	b16b      	cbz	r3, 1fa58 <z_impl_k_mutex_lock+0x3c>
   1fa3c:	6880      	ldr	r0, [r0, #8]
   1fa3e:	6891      	ldr	r1, [r2, #8]
   1fa40:	4288      	cmp	r0, r1
   1fa42:	d019      	beq.n	1fa78 <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1fa44:	ea57 0306 	orrs.w	r3, r7, r6
   1fa48:	d118      	bne.n	1fa7c <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1fa4a:	f388 8811 	msr	BASEPRI, r8
   1fa4e:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1fa52:	f06f 000f 	mvn.w	r0, #15
   1fa56:	e00c      	b.n	1fa72 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1fa58:	6891      	ldr	r1, [r2, #8]
   1fa5a:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fa5e:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1fa60:	3301      	adds	r3, #1
   1fa62:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1fa64:	6893      	ldr	r3, [r2, #8]
   1fa66:	60a3      	str	r3, [r4, #8]
   1fa68:	f388 8811 	msr	BASEPRI, r8
   1fa6c:	f3bf 8f6f 	isb	sy
		return 0;
   1fa70:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1fa72:	b002      	add	sp, #8
   1fa74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1fa78:	6921      	ldr	r1, [r4, #16]
   1fa7a:	e7f0      	b.n	1fa5e <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fa7c:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1fa80:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1fa84:	4299      	cmp	r1, r3
   1fa86:	bfa8      	it	ge
   1fa88:	4619      	movge	r1, r3
   1fa8a:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1fa8e:	428b      	cmp	r3, r1
   1fa90:	dd2b      	ble.n	1faea <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
   1fa92:	f007 f89a 	bl	26bca <adjust_owner_prio.isra.0>
   1fa96:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1fa98:	e9cd 7600 	strd	r7, r6, [sp]
   1fa9c:	4817      	ldr	r0, [pc, #92]	; (1fafc <z_impl_k_mutex_lock+0xe0>)
   1fa9e:	4622      	mov	r2, r4
   1faa0:	4641      	mov	r1, r8
   1faa2:	f000 fb25 	bl	200f0 <z_pend_curr>
	if (got_mutex == 0) {
   1faa6:	2800      	cmp	r0, #0
   1faa8:	d0e3      	beq.n	1fa72 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1faaa:	f04f 0320 	mov.w	r3, #32
   1faae:	f3ef 8611 	mrs	r6, BASEPRI
   1fab2:	f383 8811 	msr	BASEPRI, r3
   1fab6:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1faba:	6823      	ldr	r3, [r4, #0]
   1fabc:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fabe:	42a3      	cmp	r3, r4
   1fac0:	d007      	beq.n	1fad2 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fac2:	b133      	cbz	r3, 1fad2 <z_impl_k_mutex_lock+0xb6>
   1fac4:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1fac8:	4299      	cmp	r1, r3
   1faca:	bfa8      	it	ge
   1facc:	4619      	movge	r1, r3
   1face:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fad2:	68a0      	ldr	r0, [r4, #8]
   1fad4:	f007 f879 	bl	26bca <adjust_owner_prio.isra.0>
   1fad8:	b900      	cbnz	r0, 1fadc <z_impl_k_mutex_lock+0xc0>
	if (resched) {
   1fada:	b145      	cbz	r5, 1faee <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
   1fadc:	4807      	ldr	r0, [pc, #28]	; (1fafc <z_impl_k_mutex_lock+0xe0>)
   1fade:	4631      	mov	r1, r6
   1fae0:	f000 f8c6 	bl	1fc70 <z_reschedule>
	return -EAGAIN;
   1fae4:	f06f 000a 	mvn.w	r0, #10
   1fae8:	e7c3      	b.n	1fa72 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1faea:	2500      	movs	r5, #0
   1faec:	e7d4      	b.n	1fa98 <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
   1faee:	f386 8811 	msr	BASEPRI, r6
   1faf2:	f3bf 8f6f 	isb	sy
   1faf6:	e7f5      	b.n	1fae4 <z_impl_k_mutex_lock+0xc8>
   1faf8:	2000ed00 	.word	0x2000ed00
   1fafc:	2000f31c 	.word	0x2000f31c

0001fb00 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1fb00:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1fb02:	6883      	ldr	r3, [r0, #8]
{
   1fb04:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1fb06:	2b00      	cmp	r3, #0
   1fb08:	d033      	beq.n	1fb72 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1fb0a:	4a1d      	ldr	r2, [pc, #116]	; (1fb80 <z_impl_k_mutex_unlock+0x80>)
   1fb0c:	6892      	ldr	r2, [r2, #8]
   1fb0e:	4293      	cmp	r3, r2
   1fb10:	d132      	bne.n	1fb78 <z_impl_k_mutex_unlock+0x78>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1fb12:	7bda      	ldrb	r2, [r3, #15]
   1fb14:	3a01      	subs	r2, #1
   1fb16:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1fb18:	68c3      	ldr	r3, [r0, #12]
   1fb1a:	2b01      	cmp	r3, #1
   1fb1c:	d005      	beq.n	1fb2a <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1fb1e:	3b01      	subs	r3, #1
   1fb20:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1fb22:	f000 f909 	bl	1fd38 <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1fb26:	2000      	movs	r0, #0
}
   1fb28:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1fb2a:	f04f 0320 	mov.w	r3, #32
   1fb2e:	f3ef 8511 	mrs	r5, BASEPRI
   1fb32:	f383 8811 	msr	BASEPRI, r3
   1fb36:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1fb3a:	6901      	ldr	r1, [r0, #16]
   1fb3c:	6880      	ldr	r0, [r0, #8]
   1fb3e:	f007 f844 	bl	26bca <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1fb42:	4620      	mov	r0, r4
   1fb44:	f007 f9e2 	bl	26f0c <z_unpend_first_thread>
	mutex->owner = new_owner;
   1fb48:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fb4a:	b160      	cbz	r0, 1fb66 <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
   1fb4c:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1fb50:	6122      	str	r2, [r4, #16]
   1fb52:	2200      	movs	r2, #0
   1fb54:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1fb58:	f007 f96b 	bl	26e32 <z_ready_thread>
		z_reschedule(&lock, key);
   1fb5c:	4809      	ldr	r0, [pc, #36]	; (1fb84 <z_impl_k_mutex_unlock+0x84>)
   1fb5e:	4629      	mov	r1, r5
   1fb60:	f000 f886 	bl	1fc70 <z_reschedule>
   1fb64:	e7dd      	b.n	1fb22 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1fb66:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1fb68:	f385 8811 	msr	BASEPRI, r5
   1fb6c:	f3bf 8f6f 	isb	sy
   1fb70:	e7d7      	b.n	1fb22 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1fb72:	f06f 0015 	mvn.w	r0, #21
   1fb76:	e7d7      	b.n	1fb28 <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1fb78:	f04f 30ff 	mov.w	r0, #4294967295
   1fb7c:	e7d4      	b.n	1fb28 <z_impl_k_mutex_unlock+0x28>
   1fb7e:	bf00      	nop
   1fb80:	2000ed00 	.word	0x2000ed00
   1fb84:	2000f31c 	.word	0x2000f31c

0001fb88 <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fb88:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fb8a:	4611      	mov	r1, r2
	__asm__ volatile(
   1fb8c:	f04f 0220 	mov.w	r2, #32
   1fb90:	f3ef 8511 	mrs	r5, BASEPRI
   1fb94:	f382 8811 	msr	BASEPRI, r2
   1fb98:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1fb9c:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fb9e:	b19c      	cbz	r4, 1fbc8 <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fba0:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fba2:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fba4:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fba8:	4294      	cmp	r4, r2
	list->head = node;
   1fbaa:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1fbac:	bf08      	it	eq
   1fbae:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fbb0:	2101      	movs	r1, #1
   1fbb2:	4620      	mov	r0, r4
   1fbb4:	f007 f87d 	bl	26cb2 <z_queue_node_peek>
   1fbb8:	4604      	mov	r4, r0
	__asm__ volatile(
   1fbba:	f385 8811 	msr	BASEPRI, r5
   1fbbe:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1fbc2:	4620      	mov	r0, r4
   1fbc4:	b003      	add	sp, #12
   1fbc6:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fbc8:	ea51 0203 	orrs.w	r2, r1, r3
   1fbcc:	d0f5      	beq.n	1fbba <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fbce:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fbd2:	e9cd 1300 	strd	r1, r3, [sp]
   1fbd6:	4610      	mov	r0, r2
   1fbd8:	4629      	mov	r1, r5
   1fbda:	f000 fa89 	bl	200f0 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1fbde:	2800      	cmp	r0, #0
   1fbe0:	d1ef      	bne.n	1fbc2 <z_impl_k_queue_get+0x3a>
   1fbe2:	4b02      	ldr	r3, [pc, #8]	; (1fbec <z_impl_k_queue_get+0x64>)
   1fbe4:	689b      	ldr	r3, [r3, #8]
   1fbe6:	695c      	ldr	r4, [r3, #20]
   1fbe8:	e7eb      	b.n	1fbc2 <z_impl_k_queue_get+0x3a>
   1fbea:	bf00      	nop
   1fbec:	2000ed00 	.word	0x2000ed00

0001fbf0 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1fbf0:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1fbf2:	4c08      	ldr	r4, [pc, #32]	; (1fc14 <z_reset_time_slice+0x24>)
   1fbf4:	6823      	ldr	r3, [r4, #0]
   1fbf6:	b15b      	cbz	r3, 1fc10 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1fbf8:	f7e7 fabe 	bl	7178 <z_clock_elapsed>
   1fbfc:	4603      	mov	r3, r0
   1fbfe:	6820      	ldr	r0, [r4, #0]
   1fc00:	4a05      	ldr	r2, [pc, #20]	; (1fc18 <z_reset_time_slice+0x28>)
   1fc02:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1fc04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1fc08:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1fc0a:	2100      	movs	r1, #0
   1fc0c:	f007 ba64 	b.w	270d8 <z_set_timeout_expiry>
}
   1fc10:	bd10      	pop	{r4, pc}
   1fc12:	bf00      	nop
   1fc14:	2000ed3c 	.word	0x2000ed3c
   1fc18:	2000ed00 	.word	0x2000ed00

0001fc1c <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1fc1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fc1e:	4604      	mov	r4, r0
   1fc20:	460d      	mov	r5, r1
	__asm__ volatile(
   1fc22:	f04f 0320 	mov.w	r3, #32
   1fc26:	f3ef 8711 	mrs	r7, BASEPRI
   1fc2a:	f383 8811 	msr	BASEPRI, r3
   1fc2e:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1fc32:	4b0c      	ldr	r3, [pc, #48]	; (1fc64 <k_sched_time_slice_set+0x48>)
   1fc34:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1fc36:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1fc3a:	f240 30e7 	movw	r0, #999	; 0x3e7
   1fc3e:	6159      	str	r1, [r3, #20]
   1fc40:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fc44:	2300      	movs	r3, #0
   1fc46:	fbe4 0106 	umlal	r0, r1, r4, r6
   1fc4a:	f7e1 f91d 	bl	e88 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1fc4e:	4b06      	ldr	r3, [pc, #24]	; (1fc68 <k_sched_time_slice_set+0x4c>)
   1fc50:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1fc52:	4b06      	ldr	r3, [pc, #24]	; (1fc6c <k_sched_time_slice_set+0x50>)
   1fc54:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1fc56:	f7ff ffcb 	bl	1fbf0 <z_reset_time_slice>
	__asm__ volatile(
   1fc5a:	f387 8811 	msr	BASEPRI, r7
   1fc5e:	f3bf 8f6f 	isb	sy
	}
}
   1fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fc64:	2000ed00 	.word	0x2000ed00
   1fc68:	2000ed3c 	.word	0x2000ed3c
   1fc6c:	2000ed38 	.word	0x2000ed38

0001fc70 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fc70:	b949      	cbnz	r1, 1fc86 <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fc72:	f3ef 8005 	mrs	r0, IPSR
   1fc76:	b930      	cbnz	r0, 1fc86 <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1fc78:	4b05      	ldr	r3, [pc, #20]	; (1fc90 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1fc7a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1fc7c:	689b      	ldr	r3, [r3, #8]
   1fc7e:	429a      	cmp	r2, r3
   1fc80:	d001      	beq.n	1fc86 <z_reschedule+0x16>
	ret = arch_swap(key);
   1fc82:	f7e7 bc5b 	b.w	753c <arch_swap>
   1fc86:	f381 8811 	msr	BASEPRI, r1
   1fc8a:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1fc8e:	4770      	bx	lr
   1fc90:	2000ed00 	.word	0x2000ed00

0001fc94 <k_sched_lock>:
	__asm__ volatile(
   1fc94:	f04f 0320 	mov.w	r3, #32
   1fc98:	f3ef 8111 	mrs	r1, BASEPRI
   1fc9c:	f383 8811 	msr	BASEPRI, r3
   1fca0:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1fca4:	4b04      	ldr	r3, [pc, #16]	; (1fcb8 <k_sched_lock+0x24>)
   1fca6:	689a      	ldr	r2, [r3, #8]
   1fca8:	7bd3      	ldrb	r3, [r2, #15]
   1fcaa:	3b01      	subs	r3, #1
   1fcac:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1fcae:	f381 8811 	msr	BASEPRI, r1
   1fcb2:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1fcb6:	4770      	bx	lr
   1fcb8:	2000ed00 	.word	0x2000ed00

0001fcbc <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1fcbc:	4b09      	ldr	r3, [pc, #36]	; (1fce4 <z_priq_dumb_remove+0x28>)
   1fcbe:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1fcc2:	4282      	cmp	r2, r0
   1fcc4:	d105      	bne.n	1fcd2 <z_priq_dumb_remove+0x16>
   1fcc6:	689b      	ldr	r3, [r3, #8]
   1fcc8:	428b      	cmp	r3, r1
   1fcca:	d102      	bne.n	1fcd2 <z_priq_dumb_remove+0x16>
   1fccc:	7b4b      	ldrb	r3, [r1, #13]
   1fcce:	06db      	lsls	r3, r3, #27
   1fcd0:	d106      	bne.n	1fce0 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1fcd2:	e9d1 3200 	ldrd	r3, r2, [r1]
   1fcd6:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1fcd8:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fcda:	2300      	movs	r3, #0
	node->prev = NULL;
   1fcdc:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1fce0:	4770      	bx	lr
   1fce2:	bf00      	nop
   1fce4:	2000ed00 	.word	0x2000ed00

0001fce8 <update_cache>:
{
   1fce8:	b538      	push	{r3, r4, r5, lr}
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fcea:	4d12      	ldr	r5, [pc, #72]	; (1fd34 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1fcec:	692b      	ldr	r3, [r5, #16]
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fcee:	68aa      	ldr	r2, [r5, #8]
{
   1fcf0:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1fcf2:	b10b      	cbz	r3, 1fcf8 <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1fcf4:	68ec      	ldr	r4, [r5, #12]
   1fcf6:	e00c      	b.n	1fd12 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fcf8:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1fcfc:	f007 f893 	bl	26e26 <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fd00:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fd02:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fd04:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1fd06:	bf44      	itt	mi
   1fd08:	f043 0308 	orrmi.w	r3, r3, #8
   1fd0c:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1fd0e:	2c00      	cmp	r4, #0
   1fd10:	d0f0      	beq.n	1fcf4 <update_cache+0xc>
	if (preempt_ok != 0) {
   1fd12:	b949      	cbnz	r1, 1fd28 <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1fd14:	7b53      	ldrb	r3, [r2, #13]
   1fd16:	06db      	lsls	r3, r3, #27
   1fd18:	d106      	bne.n	1fd28 <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1fd1a:	69a3      	ldr	r3, [r4, #24]
   1fd1c:	b923      	cbnz	r3, 1fd28 <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fd1e:	89d3      	ldrh	r3, [r2, #14]
   1fd20:	2b7f      	cmp	r3, #127	; 0x7f
   1fd22:	d901      	bls.n	1fd28 <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1fd24:	62aa      	str	r2, [r5, #40]	; 0x28
}
   1fd26:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1fd28:	4294      	cmp	r4, r2
   1fd2a:	d001      	beq.n	1fd30 <update_cache+0x48>
			z_reset_time_slice();
   1fd2c:	f7ff ff60 	bl	1fbf0 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1fd30:	62ac      	str	r4, [r5, #40]	; 0x28
}
   1fd32:	e7f8      	b.n	1fd26 <update_cache+0x3e>
   1fd34:	2000ed00 	.word	0x2000ed00

0001fd38 <k_sched_unlock>:
{
   1fd38:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fd3a:	f04f 0320 	mov.w	r3, #32
   1fd3e:	f3ef 8411 	mrs	r4, BASEPRI
   1fd42:	f383 8811 	msr	BASEPRI, r3
   1fd46:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1fd4a:	4b08      	ldr	r3, [pc, #32]	; (1fd6c <k_sched_unlock+0x34>)
   1fd4c:	689a      	ldr	r2, [r3, #8]
   1fd4e:	7bd3      	ldrb	r3, [r2, #15]
   1fd50:	3301      	adds	r3, #1
   1fd52:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1fd54:	2000      	movs	r0, #0
   1fd56:	f7ff ffc7 	bl	1fce8 <update_cache>
	__asm__ volatile(
   1fd5a:	f384 8811 	msr	BASEPRI, r4
   1fd5e:	f3bf 8f6f 	isb	sy
}
   1fd62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1fd66:	f007 b832 	b.w	26dce <z_reschedule_unlocked>
   1fd6a:	bf00      	nop
   1fd6c:	2000ed00 	.word	0x2000ed00

0001fd70 <ready_thread>:
{
   1fd70:	b4f0      	push	{r4, r5, r6, r7}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1fd72:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1fd76:	7b41      	ldrb	r1, [r0, #13]
   1fd78:	2b00      	cmp	r3, #0
   1fd7a:	db28      	blt.n	1fdce <ready_thread+0x5e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fd7c:	06cb      	lsls	r3, r1, #27
   1fd7e:	d126      	bne.n	1fdce <ready_thread+0x5e>
   1fd80:	6983      	ldr	r3, [r0, #24]
   1fd82:	bb23      	cbnz	r3, 1fdce <ready_thread+0x5e>
	return list->head == list;
   1fd84:	4a13      	ldr	r2, [pc, #76]	; (1fdd4 <ready_thread+0x64>)
	return (node == list->tail) ? NULL : node->next;
   1fd86:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fd8a:	f102 052c 	add.w	r5, r2, #44	; 0x2c
   1fd8e:	42ab      	cmp	r3, r5
   1fd90:	d017      	beq.n	1fdc2 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fd92:	b1b3      	cbz	r3, 1fdc2 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fd94:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fd98:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1fd9c:	42b7      	cmp	r7, r6
   1fd9e:	dd0b      	ble.n	1fdb8 <ready_thread+0x48>
	node->prev = successor->prev;
   1fda0:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1fda2:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1fda6:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1fda8:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1fdaa:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1fdae:	7341      	strb	r1, [r0, #13]
}
   1fdb0:	bcf0      	pop	{r4, r5, r6, r7}
		update_cache(0);
   1fdb2:	2000      	movs	r0, #0
   1fdb4:	f7ff bf98 	b.w	1fce8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1fdb8:	42a3      	cmp	r3, r4
   1fdba:	d002      	beq.n	1fdc2 <ready_thread+0x52>
   1fdbc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fdbe:	2b00      	cmp	r3, #0
   1fdc0:	d1ea      	bne.n	1fd98 <ready_thread+0x28>
	node->prev = list->tail;
   1fdc2:	e9c0 5400 	strd	r5, r4, [r0]
	list->tail->next = node;
   1fdc6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fdc8:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1fdca:	6310      	str	r0, [r2, #48]	; 0x30
}
   1fdcc:	e7ed      	b.n	1fdaa <ready_thread+0x3a>
}
   1fdce:	bcf0      	pop	{r4, r5, r6, r7}
   1fdd0:	4770      	bx	lr
   1fdd2:	bf00      	nop
   1fdd4:	2000ed00 	.word	0x2000ed00

0001fdd8 <z_sched_start>:
{
   1fdd8:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fdda:	f04f 0220 	mov.w	r2, #32
   1fdde:	f3ef 8411 	mrs	r4, BASEPRI
   1fde2:	f382 8811 	msr	BASEPRI, r2
   1fde6:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1fdea:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1fdec:	0751      	lsls	r1, r2, #29
   1fdee:	d404      	bmi.n	1fdfa <z_sched_start+0x22>
	__asm__ volatile(
   1fdf0:	f384 8811 	msr	BASEPRI, r4
   1fdf4:	f3bf 8f6f 	isb	sy
}
   1fdf8:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1fdfa:	f022 0204 	bic.w	r2, r2, #4
   1fdfe:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1fe00:	f7ff ffb6 	bl	1fd70 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1fe04:	4621      	mov	r1, r4
   1fe06:	4802      	ldr	r0, [pc, #8]	; (1fe10 <z_sched_start+0x38>)
}
   1fe08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1fe0c:	f7ff bf30 	b.w	1fc70 <z_reschedule>
   1fe10:	2000f31c 	.word	0x2000f31c

0001fe14 <move_thread_to_end_of_prio_q>:
{
   1fe14:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1fe16:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1fe1a:	2b00      	cmp	r3, #0
{
   1fe1c:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1fe1e:	da02      	bge.n	1fe26 <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1fe20:	4816      	ldr	r0, [pc, #88]	; (1fe7c <move_thread_to_end_of_prio_q+0x68>)
   1fe22:	f7ff ff4b 	bl	1fcbc <z_priq_dumb_remove>
	return list->head == list;
   1fe26:	4a16      	ldr	r2, [pc, #88]	; (1fe80 <move_thread_to_end_of_prio_q+0x6c>)
	return (node == list->tail) ? NULL : node->next;
   1fe28:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fe2c:	f102 042c 	add.w	r4, r2, #44	; 0x2c
   1fe30:	42a3      	cmp	r3, r4
   1fe32:	d01c      	beq.n	1fe6e <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fe34:	b1db      	cbz	r3, 1fe6e <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fe36:	f991 500e 	ldrsb.w	r5, [r1, #14]
   1fe3a:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1fe3e:	42ae      	cmp	r6, r5
   1fe40:	dd10      	ble.n	1fe64 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   1fe42:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1fe44:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1fe48:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1fe4a:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1fe4c:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1fe4e:	6890      	ldr	r0, [r2, #8]
   1fe50:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1fe54:	734b      	strb	r3, [r1, #13]
   1fe56:	1a43      	subs	r3, r0, r1
   1fe58:	4258      	negs	r0, r3
}
   1fe5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1fe5e:	4158      	adcs	r0, r3
   1fe60:	f7ff bf42 	b.w	1fce8 <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1fe64:	4283      	cmp	r3, r0
   1fe66:	d002      	beq.n	1fe6e <move_thread_to_end_of_prio_q+0x5a>
   1fe68:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fe6a:	2b00      	cmp	r3, #0
   1fe6c:	d1e5      	bne.n	1fe3a <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   1fe6e:	e9c1 4000 	strd	r4, r0, [r1]
	list->tail->next = node;
   1fe72:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1fe74:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1fe76:	6311      	str	r1, [r2, #48]	; 0x30
}
   1fe78:	e7e8      	b.n	1fe4c <move_thread_to_end_of_prio_q+0x38>
   1fe7a:	bf00      	nop
   1fe7c:	2000ed2c 	.word	0x2000ed2c
   1fe80:	2000ed00 	.word	0x2000ed00

0001fe84 <z_time_slice>:
{
   1fe84:	b538      	push	{r3, r4, r5, lr}
   1fe86:	4601      	mov	r1, r0
	__asm__ volatile(
   1fe88:	f04f 0320 	mov.w	r3, #32
   1fe8c:	f3ef 8411 	mrs	r4, BASEPRI
   1fe90:	f383 8811 	msr	BASEPRI, r3
   1fe94:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1fe98:	4b15      	ldr	r3, [pc, #84]	; (1fef0 <z_time_slice+0x6c>)
   1fe9a:	4a16      	ldr	r2, [pc, #88]	; (1fef4 <z_time_slice+0x70>)
   1fe9c:	6898      	ldr	r0, [r3, #8]
   1fe9e:	6815      	ldr	r5, [r2, #0]
   1fea0:	42a8      	cmp	r0, r5
   1fea2:	d106      	bne.n	1feb2 <z_time_slice+0x2e>
			z_reset_time_slice();
   1fea4:	f7ff fea4 	bl	1fbf0 <z_reset_time_slice>
	__asm__ volatile(
   1fea8:	f384 8811 	msr	BASEPRI, r4
   1feac:	f3bf 8f6f 	isb	sy
}
   1feb0:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   1feb2:	2500      	movs	r5, #0
   1feb4:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   1feb6:	4a10      	ldr	r2, [pc, #64]	; (1fef8 <z_time_slice+0x74>)
   1feb8:	6812      	ldr	r2, [r2, #0]
   1feba:	b1ba      	cbz	r2, 1feec <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1febc:	89c2      	ldrh	r2, [r0, #14]
   1febe:	2a7f      	cmp	r2, #127	; 0x7f
   1fec0:	d814      	bhi.n	1feec <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   1fec2:	7b42      	ldrb	r2, [r0, #13]
   1fec4:	06d2      	lsls	r2, r2, #27
   1fec6:	d111      	bne.n	1feec <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   1fec8:	4a0c      	ldr	r2, [pc, #48]	; (1fefc <z_time_slice+0x78>)
   1feca:	f990 500e 	ldrsb.w	r5, [r0, #14]
   1fece:	6812      	ldr	r2, [r2, #0]
   1fed0:	4295      	cmp	r5, r2
   1fed2:	db0b      	blt.n	1feec <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   1fed4:	4a0a      	ldr	r2, [pc, #40]	; (1ff00 <z_time_slice+0x7c>)
   1fed6:	4290      	cmp	r0, r2
   1fed8:	d008      	beq.n	1feec <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   1feda:	695a      	ldr	r2, [r3, #20]
   1fedc:	428a      	cmp	r2, r1
   1fede:	dc02      	bgt.n	1fee6 <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   1fee0:	f7ff ff98 	bl	1fe14 <move_thread_to_end_of_prio_q>
   1fee4:	e7de      	b.n	1fea4 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   1fee6:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   1fee8:	615a      	str	r2, [r3, #20]
   1feea:	e7dd      	b.n	1fea8 <z_time_slice+0x24>
   1feec:	2200      	movs	r2, #0
   1feee:	e7fb      	b.n	1fee8 <z_time_slice+0x64>
   1fef0:	2000ed00 	.word	0x2000ed00
   1fef4:	2000ed34 	.word	0x2000ed34
   1fef8:	2000ed3c 	.word	0x2000ed3c
   1fefc:	2000ed38 	.word	0x2000ed38
   1ff00:	2000ab90 	.word	0x2000ab90

0001ff04 <z_impl_k_thread_suspend>:
{
   1ff04:	b570      	push	{r4, r5, r6, lr}
   1ff06:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   1ff08:	3018      	adds	r0, #24
   1ff0a:	f007 f8bf 	bl	2708c <z_abort_timeout>
	__asm__ volatile(
   1ff0e:	f04f 0320 	mov.w	r3, #32
   1ff12:	f3ef 8611 	mrs	r6, BASEPRI
   1ff16:	f383 8811 	msr	BASEPRI, r3
   1ff1a:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   1ff1e:	f994 300d 	ldrsb.w	r3, [r4, #13]
   1ff22:	2b00      	cmp	r3, #0
   1ff24:	da07      	bge.n	1ff36 <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ff26:	480f      	ldr	r0, [pc, #60]	; (1ff64 <z_impl_k_thread_suspend+0x60>)
   1ff28:	4621      	mov	r1, r4
   1ff2a:	f7ff fec7 	bl	1fcbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ff2e:	7b63      	ldrb	r3, [r4, #13]
   1ff30:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ff34:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   1ff36:	4d0c      	ldr	r5, [pc, #48]	; (1ff68 <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   1ff38:	7b63      	ldrb	r3, [r4, #13]
   1ff3a:	68a8      	ldr	r0, [r5, #8]
   1ff3c:	f043 0310 	orr.w	r3, r3, #16
   1ff40:	7363      	strb	r3, [r4, #13]
   1ff42:	1b03      	subs	r3, r0, r4
   1ff44:	4258      	negs	r0, r3
   1ff46:	4158      	adcs	r0, r3
   1ff48:	f7ff fece 	bl	1fce8 <update_cache>
	__asm__ volatile(
   1ff4c:	f386 8811 	msr	BASEPRI, r6
   1ff50:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   1ff54:	68ab      	ldr	r3, [r5, #8]
   1ff56:	42a3      	cmp	r3, r4
   1ff58:	d103      	bne.n	1ff62 <z_impl_k_thread_suspend+0x5e>
}
   1ff5a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   1ff5e:	f006 bf36 	b.w	26dce <z_reschedule_unlocked>
}
   1ff62:	bd70      	pop	{r4, r5, r6, pc}
   1ff64:	2000ed2c 	.word	0x2000ed2c
   1ff68:	2000ed00 	.word	0x2000ed00

0001ff6c <z_thread_single_abort>:
{
   1ff6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ff70:	4604      	mov	r4, r0
	__asm__ volatile(
   1ff72:	f04f 0320 	mov.w	r3, #32
   1ff76:	f3ef 8211 	mrs	r2, BASEPRI
   1ff7a:	f383 8811 	msr	BASEPRI, r3
   1ff7e:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   1ff82:	7b43      	ldrb	r3, [r0, #13]
   1ff84:	f013 0f28 	tst.w	r3, #40	; 0x28
   1ff88:	d005      	beq.n	1ff96 <z_thread_single_abort+0x2a>
	__asm__ volatile(
   1ff8a:	f382 8811 	msr	BASEPRI, r2
   1ff8e:	f3bf 8f6f 	isb	sy
}
   1ff92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   1ff96:	f043 0320 	orr.w	r3, r3, #32
   1ff9a:	7343      	strb	r3, [r0, #13]
   1ff9c:	f382 8811 	msr	BASEPRI, r2
   1ffa0:	f3bf 8f6f 	isb	sy
   1ffa4:	3018      	adds	r0, #24
   1ffa6:	f007 f871 	bl	2708c <z_abort_timeout>
	__asm__ volatile(
   1ffaa:	f04f 0320 	mov.w	r3, #32
   1ffae:	f3ef 8611 	mrs	r6, BASEPRI
   1ffb2:	f383 8811 	msr	BASEPRI, r3
   1ffb6:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   1ffba:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1ffbc:	06d8      	lsls	r0, r3, #27
   1ffbe:	d116      	bne.n	1ffee <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   1ffc0:	69a2      	ldr	r2, [r4, #24]
   1ffc2:	b9a2      	cbnz	r2, 1ffee <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   1ffc4:	0619      	lsls	r1, r3, #24
   1ffc6:	d507      	bpl.n	1ffd8 <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   1ffc8:	4826      	ldr	r0, [pc, #152]	; (20064 <z_thread_single_abort+0xf8>)
   1ffca:	4621      	mov	r1, r4
   1ffcc:	f7ff fe76 	bl	1fcbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   1ffd0:	7b63      	ldrb	r3, [r4, #13]
   1ffd2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ffd6:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   1ffd8:	4b23      	ldr	r3, [pc, #140]	; (20068 <z_thread_single_abort+0xfc>)
   1ffda:	6898      	ldr	r0, [r3, #8]
   1ffdc:	1b02      	subs	r2, r0, r4
   1ffde:	4250      	negs	r0, r2
   1ffe0:	4150      	adcs	r0, r2
   1ffe2:	f7ff fe81 	bl	1fce8 <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   1ffe6:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   1ffea:	2700      	movs	r7, #0
   1ffec:	e01e      	b.n	2002c <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   1ffee:	079b      	lsls	r3, r3, #30
   1fff0:	d5f9      	bpl.n	1ffe6 <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   1fff2:	68a0      	ldr	r0, [r4, #8]
   1fff4:	4621      	mov	r1, r4
   1fff6:	f7ff fe61 	bl	1fcbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   1fffa:	7b63      	ldrb	r3, [r4, #13]
   1fffc:	f023 0302 	bic.w	r3, r3, #2
   20000:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   20002:	2300      	movs	r3, #0
   20004:	60a3      	str	r3, [r4, #8]
   20006:	e7ee      	b.n	1ffe6 <z_thread_single_abort+0x7a>
   20008:	f105 0018 	add.w	r0, r5, #24
   2000c:	f007 f83e 	bl	2708c <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   20010:	68a8      	ldr	r0, [r5, #8]
   20012:	4629      	mov	r1, r5
   20014:	f7ff fe52 	bl	1fcbc <z_priq_dumb_remove>
   20018:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2001a:	60af      	str	r7, [r5, #8]
   2001c:	f023 0302 	bic.w	r3, r3, #2
   20020:	736b      	strb	r3, [r5, #13]
   20022:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   20026:	4628      	mov	r0, r5
   20028:	f7ff fea2 	bl	1fd70 <ready_thread>
	return list->head == list;
   2002c:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2002e:	4545      	cmp	r5, r8
   20030:	d001      	beq.n	20036 <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   20032:	2d00      	cmp	r5, #0
   20034:	d1e8      	bne.n	20008 <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   20036:	4b0c      	ldr	r3, [pc, #48]	; (20068 <z_thread_single_abort+0xfc>)
   20038:	689a      	ldr	r2, [r3, #8]
   2003a:	4b0c      	ldr	r3, [pc, #48]	; (2006c <z_thread_single_abort+0x100>)
   2003c:	429a      	cmp	r2, r3
   2003e:	d102      	bne.n	20046 <z_thread_single_abort+0xda>
			update_cache(1);
   20040:	2001      	movs	r0, #1
   20042:	f7ff fe51 	bl	1fce8 <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   20046:	7b63      	ldrb	r3, [r4, #13]
   20048:	f043 0308 	orr.w	r3, r3, #8
   2004c:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   2004e:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   20050:	f386 8811 	msr	BASEPRI, r6
   20054:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   20058:	2b00      	cmp	r3, #0
   2005a:	d09a      	beq.n	1ff92 <z_thread_single_abort+0x26>
		fn_abort(thread);
   2005c:	4620      	mov	r0, r4
}
   2005e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   20062:	4718      	bx	r3
   20064:	2000ed2c 	.word	0x2000ed2c
   20068:	2000ed00 	.word	0x2000ed00
   2006c:	2000ab90 	.word	0x2000ab90

00020070 <unready_thread>:
{
   20070:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   20072:	f990 300d 	ldrsb.w	r3, [r0, #13]
   20076:	2b00      	cmp	r3, #0
{
   20078:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   2007a:	da06      	bge.n	2008a <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   2007c:	4807      	ldr	r0, [pc, #28]	; (2009c <unready_thread+0x2c>)
   2007e:	f7ff fe1d 	bl	1fcbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20082:	7b4b      	ldrb	r3, [r1, #13]
   20084:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20088:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   2008a:	4b05      	ldr	r3, [pc, #20]	; (200a0 <unready_thread+0x30>)
   2008c:	6898      	ldr	r0, [r3, #8]
   2008e:	1a43      	subs	r3, r0, r1
   20090:	4258      	negs	r0, r3
   20092:	4158      	adcs	r0, r3
}
   20094:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   20098:	f7ff be26 	b.w	1fce8 <update_cache>
   2009c:	2000ed2c 	.word	0x2000ed2c
   200a0:	2000ed00 	.word	0x2000ed00

000200a4 <pend>:
{
   200a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200a8:	4606      	mov	r6, r0
   200aa:	4615      	mov	r5, r2
   200ac:	461c      	mov	r4, r3
	__asm__ volatile(
   200ae:	f04f 0320 	mov.w	r3, #32
   200b2:	f3ef 8711 	mrs	r7, BASEPRI
   200b6:	f383 8811 	msr	BASEPRI, r3
   200ba:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   200be:	f006 fee8 	bl	26e92 <add_to_waitq_locked>
	__asm__ volatile(
   200c2:	f387 8811 	msr	BASEPRI, r7
   200c6:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   200ca:	f1b4 3fff 	cmp.w	r4, #4294967295
   200ce:	bf08      	it	eq
   200d0:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   200d4:	d008      	beq.n	200e8 <pend+0x44>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   200d6:	462a      	mov	r2, r5
   200d8:	4623      	mov	r3, r4
   200da:	f106 0018 	add.w	r0, r6, #24
   200de:	4903      	ldr	r1, [pc, #12]	; (200ec <pend+0x48>)
}
   200e0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   200e4:	f000 bb18 	b.w	20718 <z_add_timeout>
   200e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   200ec:	00026e53 	.word	0x00026e53

000200f0 <z_pend_curr>:
{
   200f0:	b510      	push	{r4, lr}
	pending_current = _current;
   200f2:	4b07      	ldr	r3, [pc, #28]	; (20110 <z_pend_curr+0x20>)
   200f4:	6898      	ldr	r0, [r3, #8]
   200f6:	4b07      	ldr	r3, [pc, #28]	; (20114 <z_pend_curr+0x24>)
{
   200f8:	460c      	mov	r4, r1
	pending_current = _current;
   200fa:	6018      	str	r0, [r3, #0]
{
   200fc:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   200fe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20102:	f7ff ffcf 	bl	200a4 <pend>
   20106:	4620      	mov	r0, r4
}
   20108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2010c:	f7e7 ba16 	b.w	753c <arch_swap>
   20110:	2000ed00 	.word	0x2000ed00
   20114:	2000ed34 	.word	0x2000ed34

00020118 <z_set_prio>:
{
   20118:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2011a:	4604      	mov	r4, r0
	__asm__ volatile(
   2011c:	f04f 0320 	mov.w	r3, #32
   20120:	f3ef 8711 	mrs	r7, BASEPRI
   20124:	f383 8811 	msr	BASEPRI, r3
   20128:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   2012c:	7b43      	ldrb	r3, [r0, #13]
   2012e:	06db      	lsls	r3, r3, #27
				thread->base.prio = prio;
   20130:	b24d      	sxtb	r5, r1
   20132:	d12b      	bne.n	2018c <z_set_prio+0x74>
		if (need_sched) {
   20134:	6983      	ldr	r3, [r0, #24]
   20136:	bb4b      	cbnz	r3, 2018c <z_set_prio+0x74>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   20138:	4e16      	ldr	r6, [pc, #88]	; (20194 <z_set_prio+0x7c>)
   2013a:	4621      	mov	r1, r4
   2013c:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   20140:	f7ff fdbc 	bl	1fcbc <z_priq_dumb_remove>
	return list->head == list;
   20144:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				thread->base.prio = prio;
   20146:	73a5      	strb	r5, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20148:	4283      	cmp	r3, r0
   2014a:	d018      	beq.n	2017e <z_set_prio+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2014c:	b1bb      	cbz	r3, 2017e <z_set_prio+0x66>
	return (node == list->tail) ? NULL : node->next;
   2014e:	6b32      	ldr	r2, [r6, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   20150:	f993 100e 	ldrsb.w	r1, [r3, #14]
   20154:	42a9      	cmp	r1, r5
   20156:	dd0d      	ble.n	20174 <z_set_prio+0x5c>
	node->prev = successor->prev;
   20158:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   2015a:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   2015e:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   20160:	605c      	str	r4, [r3, #4]
			update_cache(1);
   20162:	2001      	movs	r0, #1
   20164:	f7ff fdc0 	bl	1fce8 <update_cache>
   20168:	2001      	movs	r0, #1
	__asm__ volatile(
   2016a:	f387 8811 	msr	BASEPRI, r7
   2016e:	f3bf 8f6f 	isb	sy
}
   20172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   20174:	4293      	cmp	r3, r2
   20176:	d002      	beq.n	2017e <z_set_prio+0x66>
   20178:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2017a:	2b00      	cmp	r3, #0
   2017c:	d1e8      	bne.n	20150 <z_set_prio+0x38>
	node->prev = list->tail;
   2017e:	6b33      	ldr	r3, [r6, #48]	; 0x30
   20180:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   20182:	6b33      	ldr	r3, [r6, #48]	; 0x30
	node->next = list;
   20184:	6020      	str	r0, [r4, #0]
	list->tail->next = node;
   20186:	601c      	str	r4, [r3, #0]
	list->tail = node;
   20188:	6334      	str	r4, [r6, #48]	; 0x30
}
   2018a:	e7ea      	b.n	20162 <z_set_prio+0x4a>
			thread->base.prio = prio;
   2018c:	73a5      	strb	r5, [r4, #14]
   2018e:	2000      	movs	r0, #0
   20190:	e7eb      	b.n	2016a <z_set_prio+0x52>
   20192:	bf00      	nop
   20194:	2000ed00 	.word	0x2000ed00

00020198 <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   20198:	4b04      	ldr	r3, [pc, #16]	; (201ac <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   2019a:	2100      	movs	r1, #0
   2019c:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   201a0:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   201a4:	4608      	mov	r0, r1
   201a6:	f7ff bd39 	b.w	1fc1c <k_sched_time_slice_set>
   201aa:	bf00      	nop
   201ac:	2000ed00 	.word	0x2000ed00

000201b0 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   201b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
   201b2:	4c23      	ldr	r4, [pc, #140]	; (20240 <z_impl_k_yield+0x90>)
   201b4:	4b23      	ldr	r3, [pc, #140]	; (20244 <z_impl_k_yield+0x94>)
   201b6:	68a2      	ldr	r2, [r4, #8]
   201b8:	429a      	cmp	r2, r3
   201ba:	d028      	beq.n	2020e <z_impl_k_yield+0x5e>
	__asm__ volatile(
   201bc:	f04f 0320 	mov.w	r3, #32
   201c0:	f3ef 8511 	mrs	r5, BASEPRI
   201c4:	f383 8811 	msr	BASEPRI, r3
   201c8:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   201cc:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   201d0:	68a1      	ldr	r1, [r4, #8]
   201d2:	f7ff fd73 	bl	1fcbc <z_priq_dumb_remove>
	return list->head == list;
   201d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   201d8:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   201da:	4282      	cmp	r2, r0
   201dc:	d028      	beq.n	20230 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   201de:	b33a      	cbz	r2, 20230 <z_impl_k_yield+0x80>
	return (node == list->tail) ? NULL : node->next;
   201e0:	6b21      	ldr	r1, [r4, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   201e2:	f993 600e 	ldrsb.w	r6, [r3, #14]
   201e6:	f992 700e 	ldrsb.w	r7, [r2, #14]
   201ea:	42b7      	cmp	r7, r6
   201ec:	dd1b      	ble.n	20226 <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   201ee:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   201f0:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   201f4:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   201f6:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   201f8:	7b5a      	ldrb	r2, [r3, #13]
   201fa:	f062 027f 	orn	r2, r2, #127	; 0x7f
   201fe:	735a      	strb	r2, [r3, #13]
			z_mark_thread_as_queued(_current);
			update_cache(1);
   20200:	2001      	movs	r0, #1
   20202:	f7ff fd71 	bl	1fce8 <update_cache>
	__asm__ volatile(
   20206:	f385 8811 	msr	BASEPRI, r5
   2020a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2020e:	f04f 0320 	mov.w	r3, #32
   20212:	f3ef 8011 	mrs	r0, BASEPRI
   20216:	f383 8811 	msr	BASEPRI, r3
   2021a:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   2021e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20222:	f7e7 b98b 	b.w	753c <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   20226:	428a      	cmp	r2, r1
   20228:	d002      	beq.n	20230 <z_impl_k_yield+0x80>
   2022a:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   2022c:	2a00      	cmp	r2, #0
   2022e:	d1da      	bne.n	201e6 <z_impl_k_yield+0x36>
	node->prev = list->tail;
   20230:	6b22      	ldr	r2, [r4, #48]	; 0x30
   20232:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   20234:	6b22      	ldr	r2, [r4, #48]	; 0x30
	node->next = list;
   20236:	6018      	str	r0, [r3, #0]
	list->tail->next = node;
   20238:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2023a:	6323      	str	r3, [r4, #48]	; 0x30
}
   2023c:	e7dc      	b.n	201f8 <z_impl_k_yield+0x48>
   2023e:	bf00      	nop
   20240:	2000ed00 	.word	0x2000ed00
   20244:	2000ab90 	.word	0x2000ab90

00020248 <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   20248:	ea50 0301 	orrs.w	r3, r0, r1
{
   2024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20250:	4605      	mov	r5, r0
   20252:	460e      	mov	r6, r1
	if (ticks == 0) {
   20254:	d104      	bne.n	20260 <z_tick_sleep+0x18>
	z_impl_k_yield();
   20256:	f7ff ffab 	bl	201b0 <z_impl_k_yield>
		k_yield();
		return 0;
   2025a:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   2025c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   20260:	f006 ff54 	bl	2710c <z_tick_get_32>
   20264:	4604      	mov	r4, r0
   20266:	f04f 0320 	mov.w	r3, #32
   2026a:	f3ef 8811 	mrs	r8, BASEPRI
   2026e:	f383 8811 	msr	BASEPRI, r3
   20272:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   20276:	4f0f      	ldr	r7, [pc, #60]	; (202b4 <z_tick_sleep+0x6c>)
   20278:	4b0f      	ldr	r3, [pc, #60]	; (202b8 <z_tick_sleep+0x70>)
   2027a:	68b8      	ldr	r0, [r7, #8]
   2027c:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   2027e:	f7ff fef7 	bl	20070 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   20282:	68b8      	ldr	r0, [r7, #8]
   20284:	490d      	ldr	r1, [pc, #52]	; (202bc <z_tick_sleep+0x74>)
   20286:	462a      	mov	r2, r5
   20288:	4633      	mov	r3, r6
   2028a:	3018      	adds	r0, #24
   2028c:	f000 fa44 	bl	20718 <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   20290:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   20292:	7b53      	ldrb	r3, [r2, #13]
   20294:	f043 0310 	orr.w	r3, r3, #16
   20298:	7353      	strb	r3, [r2, #13]
   2029a:	4640      	mov	r0, r8
   2029c:	f7e7 f94e 	bl	753c <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   202a0:	f006 ff34 	bl	2710c <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   202a4:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   202a6:	1a10      	subs	r0, r2, r0
   202a8:	eb63 0303 	sbc.w	r3, r3, r3
   202ac:	2b00      	cmp	r3, #0
   202ae:	bfb8      	it	lt
   202b0:	2000      	movlt	r0, #0
   202b2:	e7d3      	b.n	2025c <z_tick_sleep+0x14>
   202b4:	2000ed00 	.word	0x2000ed00
   202b8:	2000ed34 	.word	0x2000ed34
   202bc:	00026e53 	.word	0x00026e53

000202c0 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   202c0:	f1b1 3fff 	cmp.w	r1, #4294967295
   202c4:	bf08      	it	eq
   202c6:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   202ca:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   202cc:	d106      	bne.n	202dc <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   202ce:	4b08      	ldr	r3, [pc, #32]	; (202f0 <z_impl_k_sleep+0x30>)
   202d0:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   202d2:	f7ff fe17 	bl	1ff04 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   202d6:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   202da:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   202dc:	f7ff ffb4 	bl	20248 <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   202e0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   202e4:	fb80 0303 	smull	r0, r3, r0, r3
   202e8:	0bc0      	lsrs	r0, r0, #15
   202ea:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   202ee:	e7f4      	b.n	202da <z_impl_k_sleep+0x1a>
   202f0:	2000ed00 	.word	0x2000ed00

000202f4 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   202f4:	4b01      	ldr	r3, [pc, #4]	; (202fc <z_impl_k_current_get+0x8>)
   202f6:	6898      	ldr	r0, [r3, #8]
   202f8:	4770      	bx	lr
   202fa:	bf00      	nop
   202fc:	2000ed00 	.word	0x2000ed00

00020300 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20300:	b538      	push	{r3, r4, r5, lr}
   20302:	4604      	mov	r4, r0
   20304:	f04f 0320 	mov.w	r3, #32
   20308:	f3ef 8511 	mrs	r5, BASEPRI
   2030c:	f383 8811 	msr	BASEPRI, r3
   20310:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   20314:	f006 fdfa 	bl	26f0c <z_unpend_first_thread>

	if (thread != NULL) {
   20318:	b150      	cbz	r0, 20330 <z_impl_k_sem_give+0x30>
   2031a:	2200      	movs	r2, #0
   2031c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20320:	f006 fd87 	bl	26e32 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20324:	4629      	mov	r1, r5
   20326:	4808      	ldr	r0, [pc, #32]	; (20348 <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   20328:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   2032c:	f7ff bca0 	b.w	1fc70 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20330:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20334:	429a      	cmp	r2, r3
   20336:	bf18      	it	ne
   20338:	3301      	addne	r3, #1
   2033a:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   2033c:	2102      	movs	r1, #2
   2033e:	f104 0010 	add.w	r0, r4, #16
   20342:	f007 f87e 	bl	27442 <z_handle_obj_poll_events>
}
   20346:	e7ed      	b.n	20324 <z_impl_k_sem_give+0x24>
   20348:	2000f31c 	.word	0x2000f31c

0002034c <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   2034c:	b513      	push	{r0, r1, r4, lr}
   2034e:	f04f 0420 	mov.w	r4, #32
   20352:	f3ef 8111 	mrs	r1, BASEPRI
   20356:	f384 8811 	msr	BASEPRI, r4
   2035a:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   2035e:	6884      	ldr	r4, [r0, #8]
   20360:	b144      	cbz	r4, 20374 <z_impl_k_sem_take+0x28>
		sem->count--;
   20362:	3c01      	subs	r4, #1
   20364:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   20366:	f381 8811 	msr	BASEPRI, r1
   2036a:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   2036e:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   20370:	b002      	add	sp, #8
   20372:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20374:	ea52 0403 	orrs.w	r4, r2, r3
   20378:	d106      	bne.n	20388 <z_impl_k_sem_take+0x3c>
   2037a:	f381 8811 	msr	BASEPRI, r1
   2037e:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   20382:	f06f 000f 	mvn.w	r0, #15
   20386:	e7f3      	b.n	20370 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   20388:	e9cd 2300 	strd	r2, r3, [sp]
   2038c:	4602      	mov	r2, r0
   2038e:	4802      	ldr	r0, [pc, #8]	; (20398 <z_impl_k_sem_take+0x4c>)
   20390:	f7ff feae 	bl	200f0 <z_pend_curr>
	return ret;
   20394:	e7ec      	b.n	20370 <z_impl_k_sem_take+0x24>
   20396:	bf00      	nop
   20398:	2000f31c 	.word	0x2000f31c

0002039c <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   2039c:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   2039e:	4c08      	ldr	r4, [pc, #32]	; (203c0 <k_sys_work_q_init+0x24>)
   203a0:	4908      	ldr	r1, [pc, #32]	; (203c4 <k_sys_work_q_init+0x28>)
   203a2:	f04f 33ff 	mov.w	r3, #4294967295
   203a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   203aa:	4620      	mov	r0, r4
   203ac:	f000 f8dc 	bl	20568 <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   203b0:	4905      	ldr	r1, [pc, #20]	; (203c8 <k_sys_work_q_init+0x2c>)
   203b2:	f104 0018 	add.w	r0, r4, #24
   203b6:	f006 fdec 	bl	26f92 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   203ba:	2000      	movs	r0, #0
   203bc:	bd10      	pop	{r4, pc}
   203be:	bf00      	nop
   203c0:	2000aca0 	.word	0x2000aca0
   203c4:	20012260 	.word	0x20012260
   203c8:	0002d8ca 	.word	0x0002d8ca

000203cc <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   203cc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   203d0:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   203d4:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   203d8:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   203da:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   203dc:	2504      	movs	r5, #4
   203de:	7345      	strb	r5, [r0, #13]
{
   203e0:	460f      	mov	r7, r1

	thread_base->prio = priority;
   203e2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   203e4:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   203e6:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   203e8:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   203ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   203ec:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   203ee:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   203f2:	3720      	adds	r7, #32
	node->prev = NULL;
   203f4:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   203f8:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   203fc:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   203fe:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20402:	9202      	str	r2, [sp, #8]
   20404:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   20406:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   20408:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2040a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2040c:	9200      	str	r2, [sp, #0]
   2040e:	4642      	mov	r2, r8
{
   20410:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20412:	f7e7 f941 	bl	7698 <arch_new_thread>
	if (!_current) {
   20416:	4b05      	ldr	r3, [pc, #20]	; (2042c <z_setup_new_thread+0x60>)
   20418:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   2041a:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   2041e:	b103      	cbz	r3, 20422 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   20420:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   20422:	67a3      	str	r3, [r4, #120]	; 0x78
}
   20424:	4640      	mov	r0, r8
   20426:	b004      	add	sp, #16
   20428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2042c:	2000ed00 	.word	0x2000ed00

00020430 <z_impl_k_thread_create>:
{
   20430:	b5f0      	push	{r4, r5, r6, r7, lr}
   20432:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20434:	2700      	movs	r7, #0
   20436:	9705      	str	r7, [sp, #20]
   20438:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2043a:	9704      	str	r7, [sp, #16]
   2043c:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   2043e:	9703      	str	r7, [sp, #12]
   20440:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   20442:	9702      	str	r7, [sp, #8]
{
   20444:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20448:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   2044a:	9701      	str	r7, [sp, #4]
   2044c:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2044e:	9700      	str	r7, [sp, #0]
{
   20450:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20452:	f7ff ffbb 	bl	203cc <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   20456:	f1b5 3fff 	cmp.w	r5, #4294967295
   2045a:	bf08      	it	eq
   2045c:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   20460:	d005      	beq.n	2046e <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20462:	ea55 0306 	orrs.w	r3, r5, r6
   20466:	d105      	bne.n	20474 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   20468:	4620      	mov	r0, r4
   2046a:	f7ff fcb5 	bl	1fdd8 <z_sched_start>
}
   2046e:	4620      	mov	r0, r4
   20470:	b007      	add	sp, #28
   20472:	bdf0      	pop	{r4, r5, r6, r7, pc}
   20474:	4903      	ldr	r1, [pc, #12]	; (20484 <z_impl_k_thread_create+0x54>)
   20476:	4632      	mov	r2, r6
   20478:	462b      	mov	r3, r5
   2047a:	f104 0018 	add.w	r0, r4, #24
   2047e:	f000 f94b 	bl	20718 <z_add_timeout>
   20482:	e7f4      	b.n	2046e <z_impl_k_thread_create+0x3e>
   20484:	00026e53 	.word	0x00026e53

00020488 <z_init_static_threads>:
{
   20488:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2048c:	4c29      	ldr	r4, [pc, #164]	; (20534 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   2048e:	4d2a      	ldr	r5, [pc, #168]	; (20538 <z_init_static_threads+0xb0>)
{
   20490:	b087      	sub	sp, #28
   20492:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   20494:	42ae      	cmp	r6, r5
   20496:	f104 0430 	add.w	r4, r4, #48	; 0x30
   2049a:	d30f      	bcc.n	204bc <z_init_static_threads+0x34>
	k_sched_lock();
   2049c:	f7ff fbfa 	bl	1fc94 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   204a0:	4c24      	ldr	r4, [pc, #144]	; (20534 <z_init_static_threads+0xac>)
   204a2:	f8df 9098 	ldr.w	r9, [pc, #152]	; 2053c <z_init_static_threads+0xb4>
   204a6:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   204aa:	f240 37e7 	movw	r7, #999	; 0x3e7
   204ae:	42ac      	cmp	r4, r5
   204b0:	d320      	bcc.n	204f4 <z_init_static_threads+0x6c>
}
   204b2:	b007      	add	sp, #28
   204b4:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   204b8:	f7ff bc3e 	b.w	1fd38 <k_sched_unlock>
		z_setup_new_thread(
   204bc:	f854 3c04 	ldr.w	r3, [r4, #-4]
   204c0:	9305      	str	r3, [sp, #20]
   204c2:	f854 3c10 	ldr.w	r3, [r4, #-16]
   204c6:	9304      	str	r3, [sp, #16]
   204c8:	f854 3c14 	ldr.w	r3, [r4, #-20]
   204cc:	9303      	str	r3, [sp, #12]
   204ce:	f854 3c18 	ldr.w	r3, [r4, #-24]
   204d2:	9302      	str	r3, [sp, #8]
   204d4:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   204d8:	9301      	str	r3, [sp, #4]
   204da:	f854 3c20 	ldr.w	r3, [r4, #-32]
   204de:	9300      	str	r3, [sp, #0]
   204e0:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   204e4:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   204e8:	f7ff ff70 	bl	203cc <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   204ec:	f854 3c30 	ldr.w	r3, [r4, #-48]
   204f0:	65de      	str	r6, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
   204f2:	e7ce      	b.n	20492 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   204f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   204f6:	1c5a      	adds	r2, r3, #1
   204f8:	d00d      	beq.n	20516 <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   204fa:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   204fe:	2100      	movs	r1, #0
   20500:	4638      	mov	r0, r7
   20502:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20506:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2050a:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2050e:	d104      	bne.n	2051a <z_init_static_threads+0x92>
	z_sched_start(thread);
   20510:	4640      	mov	r0, r8
   20512:	f7ff fc61 	bl	1fdd8 <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   20516:	3430      	adds	r4, #48	; 0x30
   20518:	e7c9      	b.n	204ae <z_init_static_threads+0x26>
   2051a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   2051e:	2300      	movs	r3, #0
   20520:	f7e0 fcb2 	bl	e88 <__aeabi_uldivmod>
   20524:	4602      	mov	r2, r0
   20526:	460b      	mov	r3, r1
   20528:	f108 0018 	add.w	r0, r8, #24
   2052c:	4649      	mov	r1, r9
   2052e:	f000 f8f3 	bl	20718 <z_add_timeout>
   20532:	e7f0      	b.n	20516 <z_init_static_threads+0x8e>
   20534:	20009e24 	.word	0x20009e24
   20538:	20009f44 	.word	0x20009f44
   2053c:	00026e53 	.word	0x00026e53

00020540 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   20540:	b508      	push	{r3, lr}
	__asm__ volatile(
   20542:	f04f 0320 	mov.w	r3, #32
   20546:	f3ef 8411 	mrs	r4, BASEPRI
   2054a:	f383 8811 	msr	BASEPRI, r3
   2054e:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   20552:	4b04      	ldr	r3, [pc, #16]	; (20564 <z_self_abort+0x24>)
   20554:	6898      	ldr	r0, [r3, #8]
   20556:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   20558:	f7ff fcd4 	bl	1ff04 <z_impl_k_thread_suspend>
   2055c:	4620      	mov	r0, r4
   2055e:	f7e6 ffed 	bl	753c <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   20562:	bf00      	nop
   20564:	2000ed00 	.word	0x2000ed00

00020568 <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   20568:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2056c:	4604      	mov	r4, r0
   2056e:	b088      	sub	sp, #32
   20570:	460d      	mov	r5, r1
   20572:	4616      	mov	r6, r2
   20574:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   20576:	f006 fba8 	bl	26cca <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   2057a:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   2057e:	2200      	movs	r2, #0
   20580:	2300      	movs	r3, #0
   20582:	e9cd 2306 	strd	r2, r3, [sp, #24]
   20586:	e9cd 7203 	strd	r7, r2, [sp, #12]
   2058a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   2058e:	4b07      	ldr	r3, [pc, #28]	; (205ac <k_work_q_start+0x44>)
   20590:	9400      	str	r4, [sp, #0]
   20592:	4632      	mov	r2, r6
   20594:	4629      	mov	r1, r5
   20596:	4640      	mov	r0, r8
   20598:	f7ff ff4a 	bl	20430 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   2059c:	4904      	ldr	r1, [pc, #16]	; (205b0 <k_work_q_start+0x48>)
   2059e:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   205a0:	b008      	add	sp, #32
   205a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   205a6:	f006 bcf4 	b.w	26f92 <z_impl_k_thread_name_set>
   205aa:	bf00      	nop
   205ac:	00021ba9 	.word	0x00021ba9
   205b0:	0002d8d3 	.word	0x0002d8d3

000205b4 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   205b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   205b8:	4606      	mov	r6, r0
   205ba:	460d      	mov	r5, r1
   205bc:	4690      	mov	r8, r2
   205be:	461f      	mov	r7, r3
   205c0:	f04f 0320 	mov.w	r3, #32
   205c4:	f3ef 8911 	mrs	r9, BASEPRI
   205c8:	f383 8811 	msr	BASEPRI, r3
   205cc:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   205d0:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   205d2:	b17b      	cbz	r3, 205f4 <k_delayed_work_submit_to_queue+0x40>
   205d4:	4283      	cmp	r3, r0
   205d6:	d128      	bne.n	2062a <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   205d8:	4628      	mov	r0, r5
   205da:	f006 fcfc 	bl	26fd6 <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   205de:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   205e2:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   205e4:	d008      	beq.n	205f8 <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   205e6:	2800      	cmp	r0, #0
   205e8:	da07      	bge.n	205fa <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   205ea:	f389 8811 	msr	BASEPRI, r9
   205ee:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   205f2:	e00f      	b.n	20614 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   205f4:	2800      	cmp	r0, #0
   205f6:	d0ef      	beq.n	205d8 <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   205f8:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   205fa:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   205fe:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20600:	d10b      	bne.n	2061a <k_delayed_work_submit_to_queue+0x66>
   20602:	f389 8811 	msr	BASEPRI, r9
   20606:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   2060a:	4629      	mov	r1, r5
   2060c:	4630      	mov	r0, r6
   2060e:	f006 fcc5 	bl	26f9c <k_work_submit_to_queue>
		return 0;
   20612:	2400      	movs	r4, #0
}
   20614:	4620      	mov	r0, r4
   20616:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   2061a:	4905      	ldr	r1, [pc, #20]	; (20630 <k_delayed_work_submit_to_queue+0x7c>)
   2061c:	4642      	mov	r2, r8
   2061e:	463b      	mov	r3, r7
   20620:	f105 0010 	add.w	r0, r5, #16
   20624:	f000 f878 	bl	20718 <z_add_timeout>
   20628:	e7df      	b.n	205ea <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   2062a:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   2062e:	e7dc      	b.n	205ea <k_delayed_work_submit_to_queue+0x36>
   20630:	00026fcd 	.word	0x00026fcd

00020634 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   20634:	4a02      	ldr	r2, [pc, #8]	; (20640 <boot_banner+0xc>)
   20636:	4903      	ldr	r1, [pc, #12]	; (20644 <boot_banner+0x10>)
   20638:	4803      	ldr	r0, [pc, #12]	; (20648 <boot_banner+0x14>)
   2063a:	f001 b9c1 	b.w	219c0 <printk>
   2063e:	bf00      	nop
   20640:	00029344 	.word	0x00029344
   20644:	0002d8dd 	.word	0x0002d8dd
   20648:	0002d8f8 	.word	0x0002d8f8

0002064c <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   2064c:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   2064e:	4806      	ldr	r0, [pc, #24]	; (20668 <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   20650:	4a06      	ldr	r2, [pc, #24]	; (2066c <z_data_copy+0x20>)
   20652:	4907      	ldr	r1, [pc, #28]	; (20670 <z_data_copy+0x24>)
   20654:	1a12      	subs	r2, r2, r0
   20656:	f003 fe55 	bl	24304 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   2065a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   2065e:	4a05      	ldr	r2, [pc, #20]	; (20674 <z_data_copy+0x28>)
   20660:	4905      	ldr	r1, [pc, #20]	; (20678 <z_data_copy+0x2c>)
   20662:	4806      	ldr	r0, [pc, #24]	; (2067c <z_data_copy+0x30>)
   20664:	f003 be4e 	b.w	24304 <memcpy>
   20668:	20000000 	.word	0x20000000
   2066c:	2000a168 	.word	0x2000a168
   20670:	0002d920 	.word	0x0002d920
   20674:	00000000 	.word	0x00000000
   20678:	0002d920 	.word	0x0002d920
   2067c:	20000000 	.word	0x20000000

00020680 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   20680:	4b03      	ldr	r3, [pc, #12]	; (20690 <elapsed+0x10>)
   20682:	681b      	ldr	r3, [r3, #0]
   20684:	b90b      	cbnz	r3, 2068a <elapsed+0xa>
   20686:	f7e6 bd77 	b.w	7178 <z_clock_elapsed>
}
   2068a:	2000      	movs	r0, #0
   2068c:	4770      	bx	lr
   2068e:	bf00      	nop
   20690:	2000ed40 	.word	0x2000ed40

00020694 <next_timeout>:
	return list->head == list;
   20694:	4b11      	ldr	r3, [pc, #68]	; (206dc <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   20696:	b510      	push	{r4, lr}
   20698:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2069a:	429c      	cmp	r4, r3
   2069c:	bf08      	it	eq
   2069e:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   206a0:	f7ff ffee 	bl	20680 <elapsed>
   206a4:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   206a6:	b16c      	cbz	r4, 206c4 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   206a8:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   206ac:	1ac0      	subs	r0, r0, r3
   206ae:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   206b2:	2801      	cmp	r0, #1
   206b4:	f173 0200 	sbcs.w	r2, r3, #0
   206b8:	db0d      	blt.n	206d6 <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   206ba:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   206be:	f173 0300 	sbcs.w	r3, r3, #0
   206c2:	db01      	blt.n	206c8 <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   206c4:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   206c8:	4b05      	ldr	r3, [pc, #20]	; (206e0 <next_timeout+0x4c>)
   206ca:	695b      	ldr	r3, [r3, #20]
   206cc:	b113      	cbz	r3, 206d4 <next_timeout+0x40>
   206ce:	4298      	cmp	r0, r3
   206d0:	bfa8      	it	ge
   206d2:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   206d4:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   206d6:	2000      	movs	r0, #0
   206d8:	e7f6      	b.n	206c8 <next_timeout+0x34>
   206da:	bf00      	nop
   206dc:	20000774 	.word	0x20000774
   206e0:	2000ed00 	.word	0x2000ed00

000206e4 <remove_timeout>:
{
   206e4:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   206e6:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   206e8:	b168      	cbz	r0, 20706 <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   206ea:	4a0a      	ldr	r2, [pc, #40]	; (20714 <remove_timeout+0x30>)
   206ec:	6852      	ldr	r2, [r2, #4]
   206ee:	4290      	cmp	r0, r2
   206f0:	d009      	beq.n	20706 <remove_timeout+0x22>
	if (next(t) != NULL) {
   206f2:	b143      	cbz	r3, 20706 <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   206f4:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   206f8:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   206fc:	1912      	adds	r2, r2, r4
   206fe:	eb41 0105 	adc.w	r1, r1, r5
   20702:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   20706:	6842      	ldr	r2, [r0, #4]
   20708:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2070a:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   2070c:	2300      	movs	r3, #0
	node->prev = NULL;
   2070e:	e9c0 3300 	strd	r3, r3, [r0]
}
   20712:	bd30      	pop	{r4, r5, pc}
   20714:	20000774 	.word	0x20000774

00020718 <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20718:	f1b3 3fff 	cmp.w	r3, #4294967295
   2071c:	bf08      	it	eq
   2071e:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   20722:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20726:	4604      	mov	r4, r0
   20728:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2072a:	d064      	beq.n	207f6 <z_add_timeout+0xde>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   2072c:	1c55      	adds	r5, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   2072e:	f06f 0701 	mvn.w	r7, #1
	k_ticks_t ticks = timeout.ticks + 1;
   20732:	f143 0600 	adc.w	r6, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20736:	f04f 39ff 	mov.w	r9, #4294967295
   2073a:	1b7b      	subs	r3, r7, r5
   2073c:	eb69 0306 	sbc.w	r3, r9, r6
   20740:	2b00      	cmp	r3, #0
   20742:	db0d      	blt.n	20760 <z_add_timeout+0x48>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   20744:	f7ff ff9c 	bl	20680 <elapsed>
   20748:	4b30      	ldr	r3, [pc, #192]	; (2080c <z_add_timeout+0xf4>)
   2074a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2074e:	1abf      	subs	r7, r7, r2
   20750:	eb69 0303 	sbc.w	r3, r9, r3
   20754:	1b7d      	subs	r5, r7, r5
   20756:	eb63 0606 	sbc.w	r6, r3, r6
   2075a:	1a2d      	subs	r5, r5, r0
   2075c:	eb66 76e0 	sbc.w	r6, r6, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   20760:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   20764:	f04f 0320 	mov.w	r3, #32
   20768:	f3ef 8711 	mrs	r7, BASEPRI
   2076c:	f383 8811 	msr	BASEPRI, r3
   20770:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   20774:	f7ff ff84 	bl	20680 <elapsed>
	ticks = MAX(1, ticks);
   20778:	2d01      	cmp	r5, #1
	return list->head == list;
   2077a:	4a25      	ldr	r2, [pc, #148]	; (20810 <z_add_timeout+0xf8>)
   2077c:	f176 0300 	sbcs.w	r3, r6, #0
   20780:	bfb8      	it	lt
   20782:	2501      	movlt	r5, #1
   20784:	6813      	ldr	r3, [r2, #0]
   20786:	bfb8      	it	lt
   20788:	2600      	movlt	r6, #0
		to->dticks = ticks + elapsed();
   2078a:	182d      	adds	r5, r5, r0
   2078c:	eb46 76e0 	adc.w	r6, r6, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20790:	4293      	cmp	r3, r2
   20792:	e9c4 5604 	strd	r5, r6, [r4, #16]
   20796:	d002      	beq.n	2079e <z_add_timeout+0x86>
	return (node == list->tail) ? NULL : node->next;
   20798:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   2079c:	b933      	cbnz	r3, 207ac <z_add_timeout+0x94>
	node->prev = list->tail;
   2079e:	6853      	ldr	r3, [r2, #4]
   207a0:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   207a2:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   207a4:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
   207a6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   207a8:	6054      	str	r4, [r2, #4]
}
   207aa:	e011      	b.n	207d0 <z_add_timeout+0xb8>
			if (t->dticks > to->dticks) {
   207ac:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
   207b0:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   207b4:	4281      	cmp	r1, r0
   207b6:	eb75 0e06 	sbcs.w	lr, r5, r6
   207ba:	da1e      	bge.n	207fa <z_add_timeout+0xe2>
				t->dticks -= to->dticks;
   207bc:	1a41      	subs	r1, r0, r1
   207be:	eb66 0505 	sbc.w	r5, r6, r5
   207c2:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   207c6:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   207c8:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   207cc:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   207ce:	605c      	str	r4, [r3, #4]
	return list->head == list;
   207d0:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   207d2:	4293      	cmp	r3, r2
   207d4:	d00b      	beq.n	207ee <z_add_timeout+0xd6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   207d6:	429c      	cmp	r4, r3
   207d8:	d109      	bne.n	207ee <z_add_timeout+0xd6>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   207da:	f7ff ff5b 	bl	20694 <next_timeout>

			if (next_time == 0 ||
   207de:	b118      	cbz	r0, 207e8 <z_add_timeout+0xd0>
			    _current_cpu->slice_ticks != next_time) {
   207e0:	4b0c      	ldr	r3, [pc, #48]	; (20814 <z_add_timeout+0xfc>)
			if (next_time == 0 ||
   207e2:	695b      	ldr	r3, [r3, #20]
   207e4:	4283      	cmp	r3, r0
   207e6:	d002      	beq.n	207ee <z_add_timeout+0xd6>
				z_clock_set_timeout(next_time, false);
   207e8:	2100      	movs	r1, #0
   207ea:	f7e6 fc93 	bl	7114 <z_clock_set_timeout>
	__asm__ volatile(
   207ee:	f387 8811 	msr	BASEPRI, r7
   207f2:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   207f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   207fa:	1a09      	subs	r1, r1, r0
   207fc:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
   20800:	4563      	cmp	r3, ip
   20802:	e9c4 1504 	strd	r1, r5, [r4, #16]
   20806:	d0ca      	beq.n	2079e <z_add_timeout+0x86>
   20808:	681b      	ldr	r3, [r3, #0]
   2080a:	e7c7      	b.n	2079c <z_add_timeout+0x84>
   2080c:	2000ad40 	.word	0x2000ad40
   20810:	20000774 	.word	0x20000774
   20814:	2000ed00 	.word	0x2000ed00

00020818 <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   20818:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2081c:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   2081e:	f7ff fb31 	bl	1fe84 <z_time_slice>
	__asm__ volatile(
   20822:	f04f 0320 	mov.w	r3, #32
   20826:	f3ef 8411 	mrs	r4, BASEPRI
   2082a:	f383 8811 	msr	BASEPRI, r3
   2082e:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20832:	4e24      	ldr	r6, [pc, #144]	; (208c4 <z_clock_announce+0xac>)
	return list->head == list;
   20834:	f8df 8090 	ldr.w	r8, [pc, #144]	; 208c8 <z_clock_announce+0xb0>
   20838:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2083a:	4d24      	ldr	r5, [pc, #144]	; (208cc <z_clock_announce+0xb4>)
   2083c:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   20840:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20842:	4540      	cmp	r0, r8
		curr_tick += dt;
   20844:	e9d5 1e00 	ldrd	r1, lr, [r5]
   20848:	ea4f 77e2 	mov.w	r7, r2, asr #31
   2084c:	d00b      	beq.n	20866 <z_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   2084e:	b150      	cbz	r0, 20866 <z_clock_announce+0x4e>
   20850:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   20854:	429a      	cmp	r2, r3
   20856:	eb77 090c 	sbcs.w	r9, r7, ip
   2085a:	da16      	bge.n	2088a <z_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   2085c:	1a9b      	subs	r3, r3, r2
   2085e:	eb6c 0c07 	sbc.w	ip, ip, r7
   20862:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   20866:	1852      	adds	r2, r2, r1
   20868:	eb4e 0707 	adc.w	r7, lr, r7
   2086c:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   20870:	2500      	movs	r5, #0
   20872:	6035      	str	r5, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   20874:	f7ff ff0e 	bl	20694 <next_timeout>
   20878:	4629      	mov	r1, r5
   2087a:	f7e6 fc4b 	bl	7114 <z_clock_set_timeout>
	__asm__ volatile(
   2087e:	f384 8811 	msr	BASEPRI, r4
   20882:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   20886:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   2088a:	1859      	adds	r1, r3, r1
   2088c:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   20890:	1ad3      	subs	r3, r2, r3
   20892:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   20894:	2200      	movs	r2, #0
   20896:	2300      	movs	r3, #0
   20898:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   2089c:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   208a0:	f7ff ff20 	bl	206e4 <remove_timeout>
   208a4:	f384 8811 	msr	BASEPRI, r4
   208a8:	f3bf 8f6f 	isb	sy
		t->fn(t);
   208ac:	6883      	ldr	r3, [r0, #8]
   208ae:	4798      	blx	r3
	__asm__ volatile(
   208b0:	f04f 0320 	mov.w	r3, #32
   208b4:	f3ef 8411 	mrs	r4, BASEPRI
   208b8:	f383 8811 	msr	BASEPRI, r3
   208bc:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   208c0:	e7bc      	b.n	2083c <z_clock_announce+0x24>
   208c2:	bf00      	nop
   208c4:	2000ed40 	.word	0x2000ed40
   208c8:	20000774 	.word	0x20000774
   208cc:	2000ad40 	.word	0x2000ad40

000208d0 <z_tick_get>:

int64_t z_tick_get(void)
{
   208d0:	b510      	push	{r4, lr}
   208d2:	f04f 0320 	mov.w	r3, #32
   208d6:	f3ef 8411 	mrs	r4, BASEPRI
   208da:	f383 8811 	msr	BASEPRI, r3
   208de:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   208e2:	f7e6 fc49 	bl	7178 <z_clock_elapsed>
   208e6:	4a05      	ldr	r2, [pc, #20]	; (208fc <z_tick_get+0x2c>)
   208e8:	e9d2 3100 	ldrd	r3, r1, [r2]
   208ec:	18c0      	adds	r0, r0, r3
   208ee:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   208f2:	f384 8811 	msr	BASEPRI, r4
   208f6:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   208fa:	bd10      	pop	{r4, pc}
   208fc:	2000ad40 	.word	0x2000ad40

00020900 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20900:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20902:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   20906:	3301      	adds	r3, #1
   20908:	f142 0200 	adc.w	r2, r2, #0
   2090c:	2b02      	cmp	r3, #2
   2090e:	f172 0300 	sbcs.w	r3, r2, #0
{
   20912:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20914:	d304      	bcc.n	20920 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20916:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   2091a:	490c      	ldr	r1, [pc, #48]	; (2094c <z_timer_expiration_handler+0x4c>)
   2091c:	f7ff fefc 	bl	20718 <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20920:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20922:	3301      	adds	r3, #1
   20924:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20926:	6a23      	ldr	r3, [r4, #32]
   20928:	b10b      	cbz	r3, 2092e <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   2092a:	4620      	mov	r0, r4
   2092c:	4798      	blx	r3
	return list->head == list;
   2092e:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20932:	42a5      	cmp	r5, r4
   20934:	d009      	beq.n	2094a <z_timer_expiration_handler+0x4a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20936:	b145      	cbz	r5, 2094a <z_timer_expiration_handler+0x4a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   20938:	4628      	mov	r0, r5
   2093a:	f006 fa2c 	bl	26d96 <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   2093e:	4628      	mov	r0, r5
   20940:	f006 fa77 	bl	26e32 <z_ready_thread>
   20944:	2300      	movs	r3, #0
   20946:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   2094a:	bd38      	pop	{r3, r4, r5, pc}
   2094c:	00020901 	.word	0x00020901

00020950 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20950:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20954:	4611      	mov	r1, r2
   20956:	4605      	mov	r5, r0
   20958:	4618      	mov	r0, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2095a:	f1b0 3fff 	cmp.w	r0, #4294967295
   2095e:	bf08      	it	eq
   20960:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   20964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   20968:	4688      	mov	r8, r1
   2096a:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   2096c:	d036      	beq.n	209dc <z_impl_k_timer_start+0x8c>
   2096e:	4614      	mov	r4, r2
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   20970:	431a      	orrs	r2, r3
   20972:	461e      	mov	r6, r3
   20974:	d011      	beq.n	2099a <z_impl_k_timer_start+0x4a>
   20976:	f06f 0201 	mvn.w	r2, #1
   2097a:	1b12      	subs	r2, r2, r4
   2097c:	f04f 32ff 	mov.w	r2, #4294967295
   20980:	eb62 0203 	sbc.w	r2, r2, r3
   20984:	2a00      	cmp	r2, #0
   20986:	da08      	bge.n	2099a <z_impl_k_timer_start+0x4a>
		period.ticks = MAX(period.ticks - 1, 1);
   20988:	3c01      	subs	r4, #1
   2098a:	f163 0600 	sbc.w	r6, r3, #0
   2098e:	2c01      	cmp	r4, #1
   20990:	f176 0300 	sbcs.w	r3, r6, #0
   20994:	bfbc      	itt	lt
   20996:	2401      	movlt	r4, #1
   20998:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   2099a:	f06f 0301 	mvn.w	r3, #1
   2099e:	1a5b      	subs	r3, r3, r1
   209a0:	f04f 33ff 	mov.w	r3, #4294967295
   209a4:	eb63 0300 	sbc.w	r3, r3, r0
   209a8:	2b00      	cmp	r3, #0
   209aa:	da08      	bge.n	209be <z_impl_k_timer_start+0x6e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   209ac:	1e4a      	subs	r2, r1, #1
   209ae:	f160 0700 	sbc.w	r7, r0, #0
   209b2:	2f00      	cmp	r7, #0
   209b4:	4690      	mov	r8, r2
   209b6:	bfbc      	itt	lt
   209b8:	f04f 0800 	movlt.w	r8, #0
   209bc:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   209be:	4628      	mov	r0, r5
   209c0:	f006 fb64 	bl	2708c <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   209c4:	2300      	movs	r3, #0
   209c6:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   209c8:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   209cc:	4642      	mov	r2, r8
   209ce:	463b      	mov	r3, r7
   209d0:	4628      	mov	r0, r5
   209d2:	4903      	ldr	r1, [pc, #12]	; (209e0 <z_impl_k_timer_start+0x90>)
		     duration);
}
   209d4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   209d8:	f7ff be9e 	b.w	20718 <z_add_timeout>
}
   209dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   209e0:	00020901 	.word	0x00020901

000209e4 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   209e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   209e8:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   209ea:	4b29      	ldr	r3, [pc, #164]	; (20a90 <z_impl_k_poll+0xac>)
   209ec:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   209ee:	2301      	movs	r3, #1
   209f0:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	poller->mode = MODE_POLL;
   209f4:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   209f8:	ea52 0305 	orrs.w	r3, r2, r5
{
   209fc:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   209fe:	bf0c      	ite	eq
   20a00:	2301      	moveq	r3, #1
   20a02:	2300      	movne	r3, #0
   20a04:	f107 0264 	add.w	r2, r7, #100	; 0x64
{
   20a08:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   20a0a:	f006 fc7d 	bl	27308 <register_events>
   20a0e:	4681      	mov	r9, r0
	__asm__ volatile(
   20a10:	f04f 0320 	mov.w	r3, #32
   20a14:	f3ef 8a11 	mrs	sl, BASEPRI
   20a18:	f383 8811 	msr	BASEPRI, r3
   20a1c:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   20a20:	f897 4064 	ldrb.w	r4, [r7, #100]	; 0x64
   20a24:	b964      	cbnz	r4, 20a40 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   20a26:	4601      	mov	r1, r0
   20a28:	4652      	mov	r2, sl
   20a2a:	4640      	mov	r0, r8
   20a2c:	f006 fccd 	bl	273ca <clear_event_registrations>
	__asm__ volatile(
   20a30:	f38a 8811 	msr	BASEPRI, sl
   20a34:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   20a38:	4620      	mov	r0, r4
   20a3a:	b002      	add	sp, #8
   20a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20a40:	2300      	movs	r3, #0
   20a42:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20a46:	ea56 0305 	orrs.w	r3, r6, r5
   20a4a:	d106      	bne.n	20a5a <z_impl_k_poll+0x76>
   20a4c:	f38a 8811 	msr	BASEPRI, sl
   20a50:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20a54:	f06f 040a 	mvn.w	r4, #10
   20a58:	e7ee      	b.n	20a38 <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20a5a:	e9cd 6500 	strd	r6, r5, [sp]
   20a5e:	4a0d      	ldr	r2, [pc, #52]	; (20a94 <z_impl_k_poll+0xb0>)
   20a60:	480d      	ldr	r0, [pc, #52]	; (20a98 <z_impl_k_poll+0xb4>)
   20a62:	4651      	mov	r1, sl
   20a64:	f7ff fb44 	bl	200f0 <z_pend_curr>
   20a68:	4604      	mov	r4, r0
	__asm__ volatile(
   20a6a:	f04f 0320 	mov.w	r3, #32
   20a6e:	f3ef 8511 	mrs	r5, BASEPRI
   20a72:	f383 8811 	msr	BASEPRI, r3
   20a76:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   20a7a:	462a      	mov	r2, r5
   20a7c:	4649      	mov	r1, r9
   20a7e:	4640      	mov	r0, r8
   20a80:	f006 fca3 	bl	273ca <clear_event_registrations>
	__asm__ volatile(
   20a84:	f385 8811 	msr	BASEPRI, r5
   20a88:	f3bf 8f6f 	isb	sy
	return swap_rc;
   20a8c:	e7d4      	b.n	20a38 <z_impl_k_poll+0x54>
   20a8e:	bf00      	nop
   20a90:	2000ed00 	.word	0x2000ed00
   20a94:	2000077c 	.word	0x2000077c
   20a98:	2000f31c 	.word	0x2000f31c

00020a9c <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   20a9c:	b538      	push	{r3, r4, r5, lr}
   20a9e:	4603      	mov	r3, r0
	__asm__ volatile(
   20aa0:	f04f 0220 	mov.w	r2, #32
   20aa4:	f3ef 8511 	mrs	r5, BASEPRI
   20aa8:	f382 8811 	msr	BASEPRI, r2
   20aac:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   20ab0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   20ab2:	2101      	movs	r1, #1
   20ab4:	6081      	str	r1, [r0, #8]
	return list->head == list;
   20ab6:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   20ab8:	4283      	cmp	r3, r0
   20aba:	d106      	bne.n	20aca <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   20abc:	f385 8811 	msr	BASEPRI, r5
   20ac0:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   20ac4:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   20ac6:	4620      	mov	r0, r4
   20ac8:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   20aca:	e9d0 3200 	ldrd	r3, r2, [r0]
   20ace:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20ad0:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20ad2:	2300      	movs	r3, #0
	node->prev = NULL;
   20ad4:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20ad8:	f006 fb8a 	bl	271f0 <signal_poll_event>
	z_reschedule(&lock, key);
   20adc:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20ade:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   20ae0:	4801      	ldr	r0, [pc, #4]	; (20ae8 <z_impl_k_poll_signal_raise+0x4c>)
   20ae2:	f7ff f8c5 	bl	1fc70 <z_reschedule>
	return rc;
   20ae6:	e7ee      	b.n	20ac6 <z_impl_k_poll_signal_raise+0x2a>
   20ae8:	2000f31c 	.word	0x2000f31c

00020aec <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20aec:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20aee:	4606      	mov	r6, r0
   20af0:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   20af2:	f006 fa44 	bl	26f7e <k_is_in_isr>
   20af6:	b978      	cbnz	r0, 20b18 <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   20af8:	4b0b      	ldr	r3, [pc, #44]	; (20b28 <z_thread_aligned_alloc+0x3c>)
   20afa:	689b      	ldr	r3, [r3, #8]
   20afc:	6f9c      	ldr	r4, [r3, #120]	; 0x78
	}

	if (heap) {
   20afe:	b17c      	cbz	r4, 20b20 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20b00:	1d2a      	adds	r2, r5, #4
   20b02:	d209      	bcs.n	20b18 <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   20b04:	2000      	movs	r0, #0
   20b06:	2100      	movs	r1, #0
   20b08:	e9cd 0100 	strd	r0, r1, [sp]
   20b0c:	f046 0104 	orr.w	r1, r6, #4
   20b10:	4620      	mov	r0, r4
   20b12:	f005 ffe1 	bl	26ad8 <k_heap_aligned_alloc>
	if (mem == NULL) {
   20b16:	b908      	cbnz	r0, 20b1c <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   20b18:	2400      	movs	r4, #0
	}

	return ret;
   20b1a:	e001      	b.n	20b20 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   20b1c:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   20b1e:	1d04      	adds	r4, r0, #4
}
   20b20:	4620      	mov	r0, r4
   20b22:	b002      	add	sp, #8
   20b24:	bd70      	pop	{r4, r5, r6, pc}
   20b26:	bf00      	nop
   20b28:	2000ed00 	.word	0x2000ed00

00020b2c <write_without_rsp_vnd>:
{
   20b2c:	b510      	push	{r4, lr}
   20b2e:	4608      	mov	r0, r1
   20b30:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20b32:	f89d 200c 	ldrb.w	r2, [sp, #12]
	uint8_t *value = attr->user_data;
   20b36:	68c0      	ldr	r0, [r0, #12]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20b38:	0792      	lsls	r2, r2, #30
{
   20b3a:	461c      	mov	r4, r3
   20b3c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20b40:	d508      	bpl.n	20b54 <write_without_rsp_vnd+0x28>
	if (offset + len > sizeof(vnd_value)) {
   20b42:	191a      	adds	r2, r3, r4
   20b44:	2a06      	cmp	r2, #6
   20b46:	dc08      	bgt.n	20b5a <write_without_rsp_vnd+0x2e>
	memcpy(value + offset, buf, len);
   20b48:	4622      	mov	r2, r4
   20b4a:	4418      	add	r0, r3
   20b4c:	f003 fbda 	bl	24304 <memcpy>
}
   20b50:	4620      	mov	r0, r4
   20b52:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   20b54:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   20b58:	e7fa      	b.n	20b50 <write_without_rsp_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20b5a:	f06f 0406 	mvn.w	r4, #6
   20b5e:	e7f7      	b.n	20b50 <write_without_rsp_vnd+0x24>

00020b60 <write_signed>:
{
   20b60:	b538      	push	{r3, r4, r5, lr}
   20b62:	460c      	mov	r4, r1
   20b64:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   20b68:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   20b6a:	461c      	mov	r4, r3
   20b6c:	18c3      	adds	r3, r0, r3
   20b6e:	2b04      	cmp	r3, #4
{
   20b70:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   20b72:	dc05      	bgt.n	20b80 <write_signed+0x20>
	memcpy(value + offset, buf, len);
   20b74:	4622      	mov	r2, r4
   20b76:	4428      	add	r0, r5
   20b78:	f003 fbc4 	bl	24304 <memcpy>
}
   20b7c:	4620      	mov	r0, r4
   20b7e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20b80:	f06f 0406 	mvn.w	r4, #6
   20b84:	e7fa      	b.n	20b7c <write_signed+0x1c>

00020b86 <write_long_vnd>:
{
   20b86:	b538      	push	{r3, r4, r5, lr}
   20b88:	460d      	mov	r5, r1
   20b8a:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   20b8c:	f89d 2014 	ldrb.w	r2, [sp, #20]
   20b90:	07d2      	lsls	r2, r2, #31
{
   20b92:	461c      	mov	r4, r3
   20b94:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   20b98:	d409      	bmi.n	20bae <write_long_vnd+0x28>
	if (offset + len > sizeof(vnd_long_value)) {
   20b9a:	191a      	adds	r2, r3, r4
   20b9c:	2a4a      	cmp	r2, #74	; 0x4a
   20b9e:	dc08      	bgt.n	20bb2 <write_long_vnd+0x2c>
	memcpy(value + offset, buf, len);
   20ba0:	68e8      	ldr	r0, [r5, #12]
   20ba2:	4622      	mov	r2, r4
   20ba4:	4418      	add	r0, r3
   20ba6:	f003 fbad 	bl	24304 <memcpy>
}
   20baa:	4620      	mov	r0, r4
   20bac:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   20bae:	2400      	movs	r4, #0
   20bb0:	e7fb      	b.n	20baa <write_long_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20bb2:	f06f 0406 	mvn.w	r4, #6
   20bb6:	e7f8      	b.n	20baa <write_long_vnd+0x24>

00020bb8 <write_vnd>:
{
   20bb8:	b538      	push	{r3, r4, r5, lr}
   20bba:	460c      	mov	r4, r1
   20bbc:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   20bc0:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(vnd_value)) {
   20bc2:	461c      	mov	r4, r3
   20bc4:	18c3      	adds	r3, r0, r3
   20bc6:	2b06      	cmp	r3, #6
{
   20bc8:	4611      	mov	r1, r2
	if (offset + len > sizeof(vnd_value)) {
   20bca:	dc05      	bgt.n	20bd8 <write_vnd+0x20>
	memcpy(value + offset, buf, len);
   20bcc:	4622      	mov	r2, r4
   20bce:	4428      	add	r0, r5
   20bd0:	f003 fb98 	bl	24304 <memcpy>
}
   20bd4:	4620      	mov	r0, r4
   20bd6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20bd8:	f06f 0406 	mvn.w	r4, #6
   20bdc:	e7fa      	b.n	20bd4 <write_vnd+0x1c>

00020bde <read_signed>:
{
   20bde:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   20be0:	2404      	movs	r4, #4
   20be2:	9402      	str	r4, [sp, #8]
   20be4:	68cc      	ldr	r4, [r1, #12]
   20be6:	9401      	str	r4, [sp, #4]
   20be8:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   20bec:	9400      	str	r4, [sp, #0]
   20bee:	f004 fed7 	bl	259a0 <bt_gatt_attr_read>
}
   20bf2:	b004      	add	sp, #16
   20bf4:	bd10      	pop	{r4, pc}

00020bf6 <read_long_vnd>:
{
   20bf6:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   20bf8:	244a      	movs	r4, #74	; 0x4a
   20bfa:	9402      	str	r4, [sp, #8]
   20bfc:	68cc      	ldr	r4, [r1, #12]
   20bfe:	9401      	str	r4, [sp, #4]
   20c00:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   20c04:	9400      	str	r4, [sp, #0]
   20c06:	f004 fecb 	bl	259a0 <bt_gatt_attr_read>
}
   20c0a:	b004      	add	sp, #16
   20c0c:	bd10      	pop	{r4, pc}

00020c0e <read_vnd>:
{
   20c0e:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   20c12:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   20c16:	4605      	mov	r5, r0
				 strlen(value));
   20c18:	4640      	mov	r0, r8
{
   20c1a:	461f      	mov	r7, r3
   20c1c:	460c      	mov	r4, r1
   20c1e:	4616      	mov	r6, r2
				 strlen(value));
   20c20:	f003 fb32 	bl	24288 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   20c24:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   20c28:	9300      	str	r3, [sp, #0]
   20c2a:	b280      	uxth	r0, r0
   20c2c:	e9cd 8001 	strd	r8, r0, [sp, #4]
   20c30:	463b      	mov	r3, r7
   20c32:	4632      	mov	r2, r6
   20c34:	4621      	mov	r1, r4
   20c36:	4628      	mov	r0, r5
   20c38:	f004 feb2 	bl	259a0 <bt_gatt_attr_read>
}
   20c3c:	b004      	add	sp, #16
   20c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020c42 <k_msleep.isra.0>:
 * @param ms Number of milliseconds to sleep.
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
   20c42:	4601      	mov	r1, r0
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   20c44:	f240 30e7 	movw	r0, #999	; 0x3e7
   20c48:	b508      	push	{r3, lr}
   20c4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20c4e:	2300      	movs	r3, #0
   20c50:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   20c54:	1449      	asrs	r1, r1, #17
   20c56:	f7e0 f917 	bl	e88 <__aeabi_uldivmod>
{
	return k_sleep(Z_TIMEOUT_MS(ms));
}
   20c5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   20c5e:	f7ff bb2f 	b.w	202c0 <z_impl_k_sleep>

00020c62 <bma_delay_us>:
	z_impl_k_busy_wait(usec_to_wait);
   20c62:	f006 b992 	b.w	26f8a <z_impl_k_busy_wait>

00020c66 <null_pointer_check>:
 */
static int8_t null_pointer_check(const struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if ((dev == NULL) || (dev->bus_read == NULL) || (dev->bus_write == NULL) || (dev->intf_ptr == NULL))
   20c66:	b148      	cbz	r0, 20c7c <null_pointer_check+0x16>
   20c68:	6a03      	ldr	r3, [r0, #32]
   20c6a:	b13b      	cbz	r3, 20c7c <null_pointer_check+0x16>
   20c6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20c6e:	b12b      	cbz	r3, 20c7c <null_pointer_check+0x16>
   20c70:	6840      	ldr	r0, [r0, #4]
   20c72:	fab0 f080 	clz	r0, r0
   20c76:	0940      	lsrs	r0, r0, #5
   20c78:	4240      	negs	r0, r0
   20c7a:	4770      	bx	lr
    {
        rslt = BMA4_E_NULL_PTR;
   20c7c:	f04f 30ff 	mov.w	r0, #4294967295
    {
        rslt = BMA4_OK;
    }

    return rslt;
}
   20c80:	4770      	bx	lr

00020c82 <write_regs>:
{
   20c82:	b570      	push	{r4, r5, r6, lr}
   20c84:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   20c86:	4618      	mov	r0, r3
{
   20c88:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   20c8a:	f7ff ffec 	bl	20c66 <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   20c8e:	b9b8      	cbnz	r0, 20cc0 <write_regs+0x3e>
   20c90:	b1b1      	cbz	r1, 20cc0 <write_regs+0x3e>
        if (dev->intf == BMA4_SPI_INTF)
   20c92:	7a23      	ldrb	r3, [r4, #8]
   20c94:	b90b      	cbnz	r3, 20c9a <write_regs+0x18>
            addr = addr & BMA4_SPI_WR_MASK;
   20c96:	f005 057f 	and.w	r5, r5, #127	; 0x7f
        dev->intf_rslt = dev->bus_write(addr, data, len, dev->intf_ptr);
   20c9a:	4628      	mov	r0, r5
   20c9c:	6a66      	ldr	r6, [r4, #36]	; 0x24
   20c9e:	6863      	ldr	r3, [r4, #4]
   20ca0:	47b0      	blx	r6
   20ca2:	4605      	mov	r5, r0
   20ca4:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   20ca6:	b970      	cbnz	r0, 20cc6 <write_regs+0x44>
            if (dev->perf_mode_status == BMA4_ENABLE)
   20ca8:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
                dev->delay_us(2, dev->intf_ptr);
   20cac:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20cae:	6861      	ldr	r1, [r4, #4]
            if (dev->perf_mode_status == BMA4_ENABLE)
   20cb0:	2a01      	cmp	r2, #1
                dev->delay_us(2, dev->intf_ptr);
   20cb2:	bf0c      	ite	eq
   20cb4:	2002      	moveq	r0, #2
                dev->delay_us(450, dev->intf_ptr);
   20cb6:	f44f 70e1 	movne.w	r0, #450	; 0x1c2
   20cba:	4798      	blx	r3
}
   20cbc:	4628      	mov	r0, r5
   20cbe:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA4_E_NULL_PTR;
   20cc0:	f04f 35ff 	mov.w	r5, #4294967295
   20cc4:	e7fa      	b.n	20cbc <write_regs+0x3a>
            rslt = BMA4_E_COM_FAIL;
   20cc6:	f06f 0501 	mvn.w	r5, #1
   20cca:	e7f7      	b.n	20cbc <write_regs+0x3a>

00020ccc <read_regs>:
{
   20ccc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20cd0:	4683      	mov	fp, r0
   20cd2:	af00      	add	r7, sp, #0
    rslt = null_pointer_check(dev);
   20cd4:	4618      	mov	r0, r3
{
   20cd6:	4688      	mov	r8, r1
   20cd8:	4615      	mov	r5, r2
   20cda:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   20cdc:	f7ff ffc3 	bl	20c66 <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   20ce0:	bb40      	cbnz	r0, 20d34 <read_regs+0x68>
   20ce2:	b339      	cbz	r1, 20d34 <read_regs+0x68>
        uint32_t temp_len = len + dev->dummy_byte;
   20ce4:	7ae2      	ldrb	r2, [r4, #11]
   20ce6:	442a      	add	r2, r5
        uint8_t temp_buff[temp_len];
   20ce8:	1dd3      	adds	r3, r2, #7
   20cea:	f023 0307 	bic.w	r3, r3, #7
    {
   20cee:	46e9      	mov	r9, sp
        uint8_t temp_buff[temp_len];
   20cf0:	ebad 0d03 	sub.w	sp, sp, r3
        if (dev->intf == BMA4_SPI_INTF)
   20cf4:	7a23      	ldrb	r3, [r4, #8]
        uint8_t temp_buff[temp_len];
   20cf6:	46ea      	mov	sl, sp
        if (dev->intf == BMA4_SPI_INTF)
   20cf8:	b90b      	cbnz	r3, 20cfe <read_regs+0x32>
            addr = addr | BMA4_SPI_RD_MASK;
   20cfa:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
        dev->intf_rslt = dev->bus_read(addr, temp_buff, temp_len, dev->intf_ptr);
   20cfe:	6a26      	ldr	r6, [r4, #32]
   20d00:	6863      	ldr	r3, [r4, #4]
   20d02:	4651      	mov	r1, sl
   20d04:	4658      	mov	r0, fp
   20d06:	47b0      	blx	r6
   20d08:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   20d0a:	b188      	cbz	r0, 20d30 <read_regs+0x64>
            rslt = BMA4_E_COM_FAIL;
   20d0c:	f06f 0001 	mvn.w	r0, #1
   20d10:	46cd      	mov	sp, r9
}
   20d12:	46bd      	mov	sp, r7
   20d14:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                data[indx] = temp_buff[indx + dev->dummy_byte];
   20d18:	7ae1      	ldrb	r1, [r4, #11]
   20d1a:	eb0a 0602 	add.w	r6, sl, r2
   20d1e:	5c71      	ldrb	r1, [r6, r1]
   20d20:	f808 1002 	strb.w	r1, [r8, r2]
            for (indx = 0; indx < len; indx++)
   20d24:	b29a      	uxth	r2, r3
   20d26:	42aa      	cmp	r2, r5
   20d28:	f103 0301 	add.w	r3, r3, #1
   20d2c:	d3f4      	bcc.n	20d18 <read_regs+0x4c>
   20d2e:	e7ef      	b.n	20d10 <read_regs+0x44>
   20d30:	4603      	mov	r3, r0
   20d32:	e7f7      	b.n	20d24 <read_regs+0x58>
        rslt = BMA4_E_NULL_PTR;
   20d34:	f04f 30ff 	mov.w	r0, #4294967295
   20d38:	e7eb      	b.n	20d12 <read_regs+0x46>

00020d3a <increment_feature_config_addr>:
{
   20d3a:	b513      	push	{r0, r1, r4, lr}
    uint8_t asic_lsb = 0;
   20d3c:	2300      	movs	r3, #0
{
   20d3e:	4604      	mov	r4, r0
    uint8_t asic_lsb = 0;
   20d40:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_msb = 0;
   20d44:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20d48:	f7ff ff8d 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
   20d4c:	b948      	cbnz	r0, 20d62 <increment_feature_config_addr+0x28>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   20d4e:	4623      	mov	r3, r4
   20d50:	2201      	movs	r2, #1
   20d52:	f10d 0106 	add.w	r1, sp, #6
   20d56:	205b      	movs	r0, #91	; 0x5b
   20d58:	f7ff ffb8 	bl	20ccc <read_regs>
        if (rslt == BMA4_OK)
   20d5c:	b118      	cbz	r0, 20d66 <increment_feature_config_addr+0x2c>
            rslt = BMA4_E_COM_FAIL;
   20d5e:	f06f 0001 	mvn.w	r0, #1
}
   20d62:	b002      	add	sp, #8
   20d64:	bd10      	pop	{r4, pc}
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   20d66:	4623      	mov	r3, r4
   20d68:	2201      	movs	r2, #1
   20d6a:	f10d 0107 	add.w	r1, sp, #7
   20d6e:	205c      	movs	r0, #92	; 0x5c
   20d70:	f7ff ffac 	bl	20ccc <read_regs>
        if (rslt == BMA4_OK)
   20d74:	2800      	cmp	r0, #0
   20d76:	d1f2      	bne.n	20d5e <increment_feature_config_addr+0x24>
            asic_addr = (asic_msb << 4) | (asic_lsb & 0x0F);
   20d78:	f89d 2006 	ldrb.w	r2, [sp, #6]
   20d7c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20d80:	f002 020f 	and.w	r2, r2, #15
   20d84:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
            asic_addr = asic_addr + (dev->read_write_len / 2);
   20d88:	8aa3      	ldrh	r3, [r4, #20]
   20d8a:	eb02 0253 	add.w	r2, r2, r3, lsr #1
            asic_lsb = asic_addr & 0x0F;
   20d8e:	f002 030f 	and.w	r3, r2, #15
            asic_msb = (uint8_t)(asic_addr >> 4);
   20d92:	0912      	lsrs	r2, r2, #4
            asic_lsb = asic_addr & 0x0F;
   20d94:	f88d 3006 	strb.w	r3, [sp, #6]
            asic_msb = (uint8_t)(asic_addr >> 4);
   20d98:	f88d 2007 	strb.w	r2, [sp, #7]
            rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   20d9c:	4623      	mov	r3, r4
   20d9e:	2201      	movs	r2, #1
   20da0:	f10d 0106 	add.w	r1, sp, #6
   20da4:	205b      	movs	r0, #91	; 0x5b
   20da6:	f7ff ff6c 	bl	20c82 <write_regs>
            if (rslt == BMA4_OK)
   20daa:	2800      	cmp	r0, #0
   20dac:	d1d9      	bne.n	20d62 <increment_feature_config_addr+0x28>
                rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   20dae:	4623      	mov	r3, r4
   20db0:	2201      	movs	r2, #1
   20db2:	f10d 0107 	add.w	r1, sp, #7
   20db6:	205c      	movs	r0, #92	; 0x5c
   20db8:	f7ff ff63 	bl	20c82 <write_regs>
   20dbc:	e7d1      	b.n	20d62 <increment_feature_config_addr+0x28>

00020dbe <set_feature_config_start_addr>:
{
   20dbe:	b510      	push	{r4, lr}
   20dc0:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   20dc2:	f7ff ff50 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
   20dc6:	b980      	cbnz	r0, 20dea <set_feature_config_start_addr+0x2c>
        rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &dev->asic_data.asic_lsb, 1, dev);
   20dc8:	4623      	mov	r3, r4
   20dca:	2201      	movs	r2, #1
   20dcc:	f104 0117 	add.w	r1, r4, #23
   20dd0:	205b      	movs	r0, #91	; 0x5b
   20dd2:	f7ff ff56 	bl	20c82 <write_regs>
        if (rslt == BMA4_OK)
   20dd6:	b940      	cbnz	r0, 20dea <set_feature_config_start_addr+0x2c>
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   20dd8:	4623      	mov	r3, r4
   20dda:	f104 0118 	add.w	r1, r4, #24
   20dde:	2201      	movs	r2, #1
}
   20de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   20de4:	205c      	movs	r0, #92	; 0x5c
   20de6:	f7ff bf4c 	b.w	20c82 <write_regs>
}
   20dea:	bd10      	pop	{r4, pc}

00020dec <bma4_get_advance_power_save>:
{
   20dec:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   20dee:	2300      	movs	r3, #0
{
   20df0:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   20df2:	4608      	mov	r0, r1
    uint8_t data = 0;
   20df4:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20df8:	f7ff ff35 	bl	20c66 <null_pointer_check>
    if ((rslt == BMA4_OK) && (adv_pwr_save != NULL))
   20dfc:	b978      	cbnz	r0, 20e1e <bma4_get_advance_power_save+0x32>
   20dfe:	b174      	cbz	r4, 20e1e <bma4_get_advance_power_save+0x32>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   20e00:	460b      	mov	r3, r1
   20e02:	2201      	movs	r2, #1
   20e04:	f10d 0107 	add.w	r1, sp, #7
   20e08:	207c      	movs	r0, #124	; 0x7c
   20e0a:	f000 f80b 	bl	20e24 <bma4_read_regs>
        if (rslt == BMA4_OK)
   20e0e:	b920      	cbnz	r0, 20e1a <bma4_get_advance_power_save+0x2e>
            *adv_pwr_save = BMA4_GET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE);
   20e10:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20e14:	f003 0301 	and.w	r3, r3, #1
   20e18:	7023      	strb	r3, [r4, #0]
}
   20e1a:	b002      	add	sp, #8
   20e1c:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   20e1e:	f04f 30ff 	mov.w	r0, #4294967295
   20e22:	e7fa      	b.n	20e1a <bma4_get_advance_power_save+0x2e>

00020e24 <bma4_read_regs>:
{
   20e24:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20e28:	461d      	mov	r5, r3
   20e2a:	4607      	mov	r7, r0
    uint8_t adv_pwr_save = 0;
   20e2c:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   20e2e:	4628      	mov	r0, r5
    uint8_t adv_pwr_save = 0;
   20e30:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20e34:	f7ff ff17 	bl	20c66 <null_pointer_check>
{
   20e38:	460e      	mov	r6, r1
   20e3a:	4614      	mov	r4, r2
    if ((rslt == BMA4_OK) && (data != NULL))
   20e3c:	4680      	mov	r8, r0
   20e3e:	2800      	cmp	r0, #0
   20e40:	d172      	bne.n	20f28 <bma4_read_regs+0x104>
   20e42:	2900      	cmp	r1, #0
   20e44:	d070      	beq.n	20f28 <bma4_read_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   20e46:	2f5e      	cmp	r7, #94	; 0x5e
   20e48:	d168      	bne.n	20f1c <bma4_read_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20e4a:	4629      	mov	r1, r5
   20e4c:	f10d 0007 	add.w	r0, sp, #7
   20e50:	f7ff ffcc 	bl	20dec <bma4_get_advance_power_save>
            if (adv_pwr_save == BMA4_ENABLE)
   20e54:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20e58:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20e5a:	4607      	mov	r7, r0
            if (adv_pwr_save == BMA4_ENABLE)
   20e5c:	d109      	bne.n	20e72 <bma4_read_regs+0x4e>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20e5e:	4629      	mov	r1, r5
   20e60:	4640      	mov	r0, r8
   20e62:	f000 f867 	bl	20f34 <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   20e66:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20e68:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20e6a:	4607      	mov	r7, r0
                dev->delay_us(450, dev->intf_ptr);
   20e6c:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   20e70:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   20e72:	f014 0901 	ands.w	r9, r4, #1
   20e76:	d15a      	bne.n	20f2e <bma4_read_regs+0x10a>
   20e78:	7dab      	ldrb	r3, [r5, #22]
   20e7a:	42a3      	cmp	r3, r4
   20e7c:	d357      	bcc.n	20f2e <bma4_read_regs+0x10a>
   20e7e:	2f00      	cmp	r7, #0
   20e80:	d155      	bne.n	20f2e <bma4_read_regs+0x10a>
                if (dev->read_write_len < len)
   20e82:	8aaf      	ldrh	r7, [r5, #20]
   20e84:	42a7      	cmp	r7, r4
   20e86:	d242      	bcs.n	20f0e <bma4_read_regs+0xea>
                    loop_count = len / dev->read_write_len;
   20e88:	fbb4 faf7 	udiv	sl, r4, r7
                    rslt = set_feature_config_start_addr(dev);
   20e8c:	4628      	mov	r0, r5
   20e8e:	f7ff ff96 	bl	20dbe <set_feature_config_start_addr>
                    overflow = len % dev->read_write_len;
   20e92:	fb07 471a 	mls	r7, r7, sl, r4
                    index = 0;
   20e96:	46c8      	mov	r8, r9
                    rslt = set_feature_config_start_addr(dev);
   20e98:	4604      	mov	r4, r0
                    for (idx = 0; idx < loop_count; idx++)
   20e9a:	fa5f f389 	uxtb.w	r3, r9
   20e9e:	459a      	cmp	sl, r3
   20ea0:	d820      	bhi.n	20ee4 <bma4_read_regs+0xc0>
                    if ((overflow) && (rslt == BMA4_OK))
   20ea2:	b147      	cbz	r7, 20eb6 <bma4_read_regs+0x92>
   20ea4:	b9d4      	cbnz	r4, 20edc <bma4_read_regs+0xb8>
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   20ea6:	462b      	mov	r3, r5
   20ea8:	463a      	mov	r2, r7
   20eaa:	eb06 0108 	add.w	r1, r6, r8
   20eae:	205e      	movs	r0, #94	; 0x5e
   20eb0:	f7ff ff0c 	bl	20ccc <read_regs>
   20eb4:	4604      	mov	r4, r0
                    if (rslt == BMA4_OK)
   20eb6:	b98c      	cbnz	r4, 20edc <bma4_read_regs+0xb8>
                        rslt = set_feature_config_start_addr(dev);
   20eb8:	4628      	mov	r0, r5
   20eba:	f7ff ff80 	bl	20dbe <set_feature_config_start_addr>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   20ebe:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   20ec0:	b960      	cbnz	r0, 20edc <bma4_read_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   20ec2:	f89d 0007 	ldrb.w	r0, [sp, #7]
   20ec6:	2801      	cmp	r0, #1
   20ec8:	d108      	bne.n	20edc <bma4_read_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   20eca:	4629      	mov	r1, r5
   20ecc:	f000 f832 	bl	20f34 <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   20ed0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20ed2:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   20ed4:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   20ed6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   20eda:	4798      	blx	r3
}
   20edc:	4620      	mov	r0, r4
   20ede:	b002      	add	sp, #8
   20ee0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   20ee4:	8aaa      	ldrh	r2, [r5, #20]
   20ee6:	462b      	mov	r3, r5
   20ee8:	eb06 0108 	add.w	r1, r6, r8
   20eec:	205e      	movs	r0, #94	; 0x5e
   20eee:	f7ff feed 	bl	20ccc <read_regs>
                        if (rslt == BMA4_OK)
   20ef2:	4604      	mov	r4, r0
   20ef4:	b940      	cbnz	r0, 20f08 <bma4_read_regs+0xe4>
                            rslt = increment_feature_config_addr(dev);
   20ef6:	4628      	mov	r0, r5
   20ef8:	f7ff ff1f 	bl	20d3a <increment_feature_config_addr>
                            if (rslt == BMA4_OK)
   20efc:	4604      	mov	r4, r0
   20efe:	b918      	cbnz	r0, 20f08 <bma4_read_regs+0xe4>
                                index = index + dev->read_write_len;
   20f00:	8aab      	ldrh	r3, [r5, #20]
   20f02:	4498      	add	r8, r3
   20f04:	fa1f f888 	uxth.w	r8, r8
                    for (idx = 0; idx < loop_count; idx++)
   20f08:	f109 0901 	add.w	r9, r9, #1
   20f0c:	e7c5      	b.n	20e9a <bma4_read_regs+0x76>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   20f0e:	462b      	mov	r3, r5
   20f10:	4622      	mov	r2, r4
   20f12:	4631      	mov	r1, r6
   20f14:	205e      	movs	r0, #94	; 0x5e
   20f16:	f7ff fed9 	bl	20ccc <read_regs>
   20f1a:	e7d0      	b.n	20ebe <bma4_read_regs+0x9a>
            rslt = read_regs(addr, data, len, dev);
   20f1c:	462b      	mov	r3, r5
   20f1e:	4638      	mov	r0, r7
   20f20:	f7ff fed4 	bl	20ccc <read_regs>
   20f24:	4604      	mov	r4, r0
   20f26:	e7d9      	b.n	20edc <bma4_read_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   20f28:	f04f 34ff 	mov.w	r4, #4294967295
   20f2c:	e7d6      	b.n	20edc <bma4_read_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   20f2e:	f06f 0409 	mvn.w	r4, #9
   20f32:	e7d3      	b.n	20edc <bma4_read_regs+0xb8>

00020f34 <bma4_set_advance_power_save>:
{
   20f34:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   20f36:	2300      	movs	r3, #0
{
   20f38:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   20f3a:	4608      	mov	r0, r1
{
   20f3c:	460c      	mov	r4, r1
    uint8_t data = 0;
   20f3e:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20f42:	f7ff fe90 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
   20f46:	b9b8      	cbnz	r0, 20f78 <bma4_set_advance_power_save+0x44>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   20f48:	460b      	mov	r3, r1
   20f4a:	2201      	movs	r2, #1
   20f4c:	f10d 0107 	add.w	r1, sp, #7
   20f50:	207c      	movs	r0, #124	; 0x7c
   20f52:	f7ff ff67 	bl	20e24 <bma4_read_regs>
        if (rslt == BMA4_OK)
   20f56:	b978      	cbnz	r0, 20f78 <bma4_set_advance_power_save+0x44>
            data = BMA4_SET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE, adv_pwr_save);
   20f58:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20f5c:	f005 0001 	and.w	r0, r5, #1
   20f60:	f023 0301 	bic.w	r3, r3, #1
   20f64:	4318      	orrs	r0, r3
   20f66:	f88d 0007 	strb.w	r0, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   20f6a:	4623      	mov	r3, r4
   20f6c:	2201      	movs	r2, #1
   20f6e:	f10d 0107 	add.w	r1, sp, #7
   20f72:	207c      	movs	r0, #124	; 0x7c
   20f74:	f000 f802 	bl	20f7c <bma4_write_regs>
}
   20f78:	b003      	add	sp, #12
   20f7a:	bd30      	pop	{r4, r5, pc}

00020f7c <bma4_write_regs>:
{
   20f7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f80:	461d      	mov	r5, r3
   20f82:	4604      	mov	r4, r0
    uint8_t adv_pwr_save = 0;
   20f84:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   20f86:	4628      	mov	r0, r5
{
   20f88:	460f      	mov	r7, r1
   20f8a:	4616      	mov	r6, r2
    uint8_t adv_pwr_save = 0;
   20f8c:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20f90:	f7ff fe69 	bl	20c66 <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   20f94:	2800      	cmp	r0, #0
   20f96:	d173      	bne.n	21080 <bma4_write_regs+0x104>
   20f98:	2900      	cmp	r1, #0
   20f9a:	d071      	beq.n	21080 <bma4_write_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   20f9c:	2c5e      	cmp	r4, #94	; 0x5e
   20f9e:	d169      	bne.n	21074 <bma4_write_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20fa0:	4629      	mov	r1, r5
   20fa2:	f10d 0007 	add.w	r0, sp, #7
   20fa6:	f7ff ff21 	bl	20dec <bma4_get_advance_power_save>
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   20faa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20fae:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20fb0:	4604      	mov	r4, r0
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   20fb2:	d109      	bne.n	20fc8 <bma4_write_regs+0x4c>
   20fb4:	b940      	cbnz	r0, 20fc8 <bma4_write_regs+0x4c>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20fb6:	4629      	mov	r1, r5
   20fb8:	f7ff ffbc 	bl	20f34 <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   20fbc:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20fbe:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20fc0:	4604      	mov	r4, r0
                dev->delay_us(450, dev->intf_ptr);
   20fc2:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   20fc6:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   20fc8:	f016 0a01 	ands.w	sl, r6, #1
   20fcc:	d15b      	bne.n	21086 <bma4_write_regs+0x10a>
   20fce:	7dab      	ldrb	r3, [r5, #22]
   20fd0:	42b3      	cmp	r3, r6
   20fd2:	d358      	bcc.n	21086 <bma4_write_regs+0x10a>
   20fd4:	2c00      	cmp	r4, #0
   20fd6:	d156      	bne.n	21086 <bma4_write_regs+0x10a>
                if (dev->read_write_len < len)
   20fd8:	f8b5 b014 	ldrh.w	fp, [r5, #20]
   20fdc:	45b3      	cmp	fp, r6
   20fde:	d242      	bcs.n	21066 <bma4_write_regs+0xea>
                    rslt = set_feature_config_start_addr(dev);
   20fe0:	4628      	mov	r0, r5
   20fe2:	f7ff feec 	bl	20dbe <set_feature_config_start_addr>
                    if (rslt == BMA4_OK)
   20fe6:	4604      	mov	r4, r0
   20fe8:	bb20      	cbnz	r0, 21034 <bma4_write_regs+0xb8>
                    loop_count = len / dev->read_write_len;
   20fea:	fbb6 f8fb 	udiv	r8, r6, fp
                    index = 0;
   20fee:	46d1      	mov	r9, sl
                        for (i = 0; i < loop_count; i++)
   20ff0:	fa5f f38a 	uxtb.w	r3, sl
   20ff4:	4598      	cmp	r8, r3
   20ff6:	d821      	bhi.n	2103c <bma4_write_regs+0xc0>
                    overflow = len % dev->read_write_len;
   20ff8:	fb0b 6218 	mls	r2, fp, r8, r6
                        if ((overflow) && (rslt == BMA4_OK))
   20ffc:	b13a      	cbz	r2, 2100e <bma4_write_regs+0x92>
   20ffe:	b9cc      	cbnz	r4, 21034 <bma4_write_regs+0xb8>
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   21000:	462b      	mov	r3, r5
   21002:	eb07 0109 	add.w	r1, r7, r9
   21006:	205e      	movs	r0, #94	; 0x5e
   21008:	f7ff fe3b 	bl	20c82 <write_regs>
   2100c:	4604      	mov	r4, r0
                        if (rslt == BMA4_OK)
   2100e:	b98c      	cbnz	r4, 21034 <bma4_write_regs+0xb8>
                            rslt = set_feature_config_start_addr(dev);
   21010:	4628      	mov	r0, r5
   21012:	f7ff fed4 	bl	20dbe <set_feature_config_start_addr>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   21016:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   21018:	b960      	cbnz	r0, 21034 <bma4_write_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   2101a:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2101e:	2801      	cmp	r0, #1
   21020:	d108      	bne.n	21034 <bma4_write_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   21022:	4629      	mov	r1, r5
   21024:	f7ff ff86 	bl	20f34 <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   21028:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2102a:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   2102c:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   2102e:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   21032:	4798      	blx	r3
}
   21034:	4620      	mov	r0, r4
   21036:	b003      	add	sp, #12
   21038:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   2103c:	8aaa      	ldrh	r2, [r5, #20]
   2103e:	462b      	mov	r3, r5
   21040:	eb07 0109 	add.w	r1, r7, r9
   21044:	205e      	movs	r0, #94	; 0x5e
   21046:	f7ff fe1c 	bl	20c82 <write_regs>
                            if (rslt == BMA4_OK)
   2104a:	4604      	mov	r4, r0
   2104c:	b940      	cbnz	r0, 21060 <bma4_write_regs+0xe4>
                                rslt = increment_feature_config_addr(dev);
   2104e:	4628      	mov	r0, r5
   21050:	f7ff fe73 	bl	20d3a <increment_feature_config_addr>
                                if (rslt == BMA4_OK)
   21054:	4604      	mov	r4, r0
   21056:	b918      	cbnz	r0, 21060 <bma4_write_regs+0xe4>
                                    index = index + dev->read_write_len;
   21058:	8aab      	ldrh	r3, [r5, #20]
   2105a:	4499      	add	r9, r3
   2105c:	fa1f f989 	uxth.w	r9, r9
                        for (i = 0; i < loop_count; i++)
   21060:	f10a 0a01 	add.w	sl, sl, #1
   21064:	e7c4      	b.n	20ff0 <bma4_write_regs+0x74>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   21066:	462b      	mov	r3, r5
   21068:	4632      	mov	r2, r6
   2106a:	4639      	mov	r1, r7
   2106c:	205e      	movs	r0, #94	; 0x5e
   2106e:	f7ff fe08 	bl	20c82 <write_regs>
   21072:	e7d0      	b.n	21016 <bma4_write_regs+0x9a>
            rslt = write_regs(addr, data, len, dev);
   21074:	4620      	mov	r0, r4
   21076:	462b      	mov	r3, r5
   21078:	f7ff fe03 	bl	20c82 <write_regs>
   2107c:	4604      	mov	r4, r0
   2107e:	e7d9      	b.n	21034 <bma4_write_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   21080:	f04f 34ff 	mov.w	r4, #4294967295
   21084:	e7d6      	b.n	21034 <bma4_write_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   21086:	f06f 0409 	mvn.w	r4, #9
   2108a:	e7d3      	b.n	21034 <bma4_write_regs+0xb8>

0002108c <bma4_init>:
{
   2108c:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   2108e:	2300      	movs	r3, #0
{
   21090:	4604      	mov	r4, r0
    uint8_t data = 0;
   21092:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t dummy_read = 0;
   21096:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   2109a:	f7ff fde4 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
   2109e:	4602      	mov	r2, r0
   210a0:	b9b0      	cbnz	r0, 210d0 <bma4_init+0x44>
        if (dev->intf == BMA4_SPI_INTF)
   210a2:	7a23      	ldrb	r3, [r4, #8]
   210a4:	b9bb      	cbnz	r3, 210d6 <bma4_init+0x4a>
            dev->dummy_byte = 1;
   210a6:	2201      	movs	r2, #1
   210a8:	72e2      	strb	r2, [r4, #11]
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &dummy_read, 1, dev);
   210aa:	4623      	mov	r3, r4
   210ac:	f10d 0107 	add.w	r1, sp, #7
   210b0:	f7ff feb8 	bl	20e24 <bma4_read_regs>
        if (rslt == BMA4_OK)
   210b4:	4602      	mov	r2, r0
   210b6:	b958      	cbnz	r0, 210d0 <bma4_init+0x44>
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &data, 1, dev);
   210b8:	2201      	movs	r2, #1
   210ba:	4623      	mov	r3, r4
   210bc:	f10d 0106 	add.w	r1, sp, #6
   210c0:	2000      	movs	r0, #0
   210c2:	f7ff feaf 	bl	20e24 <bma4_read_regs>
            if (rslt == BMA4_OK)
   210c6:	4602      	mov	r2, r0
   210c8:	b910      	cbnz	r0, 210d0 <bma4_init+0x44>
                dev->chip_id = data;
   210ca:	f89d 3006 	ldrb.w	r3, [sp, #6]
   210ce:	7023      	strb	r3, [r4, #0]
}
   210d0:	4610      	mov	r0, r2
   210d2:	b002      	add	sp, #8
   210d4:	bd10      	pop	{r4, pc}
            dev->dummy_byte = 0;
   210d6:	72e0      	strb	r0, [r4, #11]
        if (rslt == BMA4_OK)
   210d8:	e7ee      	b.n	210b8 <bma4_init+0x2c>

000210da <bma4_set_accel_enable>:
{
   210da:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   210dc:	2300      	movs	r3, #0
{
   210de:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   210e0:	4608      	mov	r0, r1
{
   210e2:	460d      	mov	r5, r1
    uint8_t data = 0;
   210e4:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   210e8:	f7ff fdbd 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
   210ec:	b9c0      	cbnz	r0, 21120 <bma4_set_accel_enable+0x46>
        rslt = bma4_read_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   210ee:	460b      	mov	r3, r1
   210f0:	2201      	movs	r2, #1
   210f2:	f10d 0107 	add.w	r1, sp, #7
   210f6:	207d      	movs	r0, #125	; 0x7d
   210f8:	f7ff fe94 	bl	20e24 <bma4_read_regs>
        if (rslt == BMA4_OK)
   210fc:	b980      	cbnz	r0, 21120 <bma4_set_accel_enable+0x46>
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   210fe:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21102:	00a4      	lsls	r4, r4, #2
   21104:	f022 0204 	bic.w	r2, r2, #4
   21108:	f004 0404 	and.w	r4, r4, #4
   2110c:	4314      	orrs	r4, r2
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   2110e:	462b      	mov	r3, r5
   21110:	2201      	movs	r2, #1
   21112:	f10d 0107 	add.w	r1, sp, #7
   21116:	207d      	movs	r0, #125	; 0x7d
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   21118:	f88d 4007 	strb.w	r4, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   2111c:	f7ff ff2e 	bl	20f7c <bma4_write_regs>
}
   21120:	b003      	add	sp, #12
   21122:	bd30      	pop	{r4, r5, pc}

00021124 <bma4_set_command_register>:
{
   21124:	b507      	push	{r0, r1, r2, lr}
   21126:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
   2112a:	4608      	mov	r0, r1
   2112c:	f7ff fd9b 	bl	20c66 <null_pointer_check>
    if (rslt == BMA4_OK)
   21130:	b930      	cbnz	r0, 21140 <bma4_set_command_register+0x1c>
        rslt = bma4_write_regs(BMA4_CMD_ADDR, &command_reg, 1, dev);
   21132:	460b      	mov	r3, r1
   21134:	2201      	movs	r2, #1
   21136:	f10d 0107 	add.w	r1, sp, #7
   2113a:	207e      	movs	r0, #126	; 0x7e
   2113c:	f7ff ff1e 	bl	20f7c <bma4_write_regs>
}
   21140:	b003      	add	sp, #12
   21142:	f85d fb04 	ldr.w	pc, [sp], #4

00021146 <bma456_init>:
{
   21146:	b510      	push	{r4, lr}
   21148:	4604      	mov	r4, r0
    rslt = bma4_init(dev);
   2114a:	f7ff ff9f 	bl	2108c <bma4_init>
    if (rslt == BMA4_OK)
   2114e:	b968      	cbnz	r0, 2116c <bma456_init+0x26>
        if (dev->chip_id == BMA456_CHIP_ID)
   21150:	7823      	ldrb	r3, [r4, #0]
   21152:	2b16      	cmp	r3, #22
            dev->feature_len = BMA456_FEATURE_SIZE;
   21154:	bf01      	itttt	eq
   21156:	2346      	moveq	r3, #70	; 0x46
   21158:	75a3      	strbeq	r3, [r4, #22]
            dev->resolution = 16;
   2115a:	f44f 7304 	moveq.w	r3, #528	; 0x210
   2115e:	81a3      	strheq	r3, [r4, #12]
            dev->config_size = sizeof(bma456_config_file);
   21160:	bf06      	itte	eq
   21162:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
   21166:	85a3      	strheq	r3, [r4, #44]	; 0x2c
            rslt = BMA4_E_INVALID_SENSOR;
   21168:	f06f 0003 	mvnne.w	r0, #3
}
   2116c:	bd10      	pop	{r4, pc}

0002116e <bma456_map_interrupt>:
/*!
 * @brief This API sets/un-sets the user provided interrupt to either interrupt
 * pin1 or pin2 in the sensor.
 */
int8_t bma456_map_interrupt(uint8_t int_line, uint16_t int_map, uint8_t enable, struct bma4_dev *dev)
{
   2116e:	b430      	push	{r4, r5}
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
   21170:	b13b      	cbz	r3, 21182 <bma456_map_interrupt+0x14>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   21172:	781c      	ldrb	r4, [r3, #0]
   21174:	2c16      	cmp	r4, #22
   21176:	d108      	bne.n	2118a <bma456_map_interrupt+0x1c>
        {
            if (int_line <= 1)
   21178:	2801      	cmp	r0, #1
   2117a:	d809      	bhi.n	21190 <bma456_map_interrupt+0x22>
    {
        rslt = BMA4_E_NULL_PTR;
    }

    return rslt;
}
   2117c:	bc30      	pop	{r4, r5}
                rslt = bma4_map_interrupt(int_line, int_map, enable, dev);
   2117e:	f7e2 b821 	b.w	31c4 <bma4_map_interrupt>
        rslt = BMA4_E_NULL_PTR;
   21182:	f04f 30ff 	mov.w	r0, #4294967295
}
   21186:	bc30      	pop	{r4, r5}
   21188:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
   2118a:	f06f 0003 	mvn.w	r0, #3
   2118e:	e7fa      	b.n	21186 <bma456_map_interrupt+0x18>
                rslt = BMA4_E_INT_LINE_INVALID;
   21190:	f06f 0008 	mvn.w	r0, #8
   21194:	e7f7      	b.n	21186 <bma456_map_interrupt+0x18>

00021196 <bma456_feature_enable>:

/*!
 * @brief This API enables/disables the features of the sensor.
 */
int8_t bma456_feature_enable(uint8_t feature, uint8_t enable, struct bma4_dev *dev)
{
   21196:	b570      	push	{r4, r5, r6, lr}
   21198:	b092      	sub	sp, #72	; 0x48
   2119a:	4615      	mov	r5, r2
   2119c:	4604      	mov	r4, r0
   2119e:	460e      	mov	r6, r1
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   211a0:	2242      	movs	r2, #66	; 0x42
   211a2:	2100      	movs	r1, #0
   211a4:	a801      	add	r0, sp, #4
   211a6:	9100      	str	r1, [sp, #0]
   211a8:	f003 f8d7 	bl	2435a <memset>
    int8_t rslt = BMA4_OK;
    uint8_t len = BMA456_FEATURE_SIZE;

    if (dev != NULL)
   211ac:	2d00      	cmp	r5, #0
   211ae:	d063      	beq.n	21278 <bma456_feature_enable+0xe2>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   211b0:	782b      	ldrb	r3, [r5, #0]
   211b2:	2b16      	cmp	r3, #22
   211b4:	d163      	bne.n	2127e <bma456_feature_enable+0xe8>
        {
            /* Read feature configuration data */
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   211b6:	462b      	mov	r3, r5
   211b8:	2246      	movs	r2, #70	; 0x46
   211ba:	4669      	mov	r1, sp
   211bc:	205e      	movs	r0, #94	; 0x5e
   211be:	f7ff fe31 	bl	20e24 <bma4_read_regs>
            if (rslt == BMA4_OK)
   211c2:	bba0      	cbnz	r0, 2122e <bma456_feature_enable+0x98>
            {
                if (enable == TRUE)
   211c4:	2e01      	cmp	r6, #1
   211c6:	f004 0301 	and.w	r3, r4, #1
   211ca:	f004 0002 	and.w	r0, r4, #2
   211ce:	f004 0104 	and.w	r1, r4, #4
   211d2:	f004 0208 	and.w	r2, r4, #8
   211d6:	f004 0410 	and.w	r4, r4, #16
   211da:	d12a      	bne.n	21232 <bma456_feature_enable+0x9c>
    int8_t rslt = BMA4_OK;

    if ((dev != NULL) && (feature_config != NULL))
    {
        /* Enable step counter */
        if ((feature & BMA456_STEP_CNTR) > 0)
   211dc:	b12b      	cbz	r3, 211ea <bma456_feature_enable+0x54>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_CNTR_EN_MSK;
   211de:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   211e2:	f043 0310 	orr.w	r3, r3, #16
   211e6:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable step activity */
        if ((feature & BMA456_STEP_ACT) > 0)
   211ea:	b128      	cbz	r0, 211f8 <bma456_feature_enable+0x62>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_ACT_EN_MSK;
   211ec:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   211f0:	f043 0320 	orr.w	r3, r3, #32
   211f4:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable wrist wear wakeup */
        if ((feature & BMA456_WRIST_WEAR) > 0)
   211f8:	b129      	cbz	r1, 21206 <bma456_feature_enable+0x70>
        {
            index = BMA456_WRIST_WEAR_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_WRIST_WEAR_EN_MSK;
   211fa:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   211fe:	f043 0301 	orr.w	r3, r3, #1
   21202:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        }

        /* Enable single - tap */
        if ((feature & BMA456_SINGLE_TAP) > 0)
   21206:	b12a      	cbz	r2, 21214 <bma456_feature_enable+0x7e>
        {
            index = BMA456_SINGLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_SINGLE_TAP_EN_MSK;
   21208:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   2120c:	f043 0301 	orr.w	r3, r3, #1
   21210:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        }

        /* Enable  double- tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   21214:	b12c      	cbz	r4, 21222 <bma456_feature_enable+0x8c>
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_DOUBLE_TAP_EN_MSK;
   21216:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   2121a:	f043 0301 	orr.w	r3, r3, #1

        /* Disable double-tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   2121e:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        }

        /* Write the configured settings in the sensor */
        rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   21222:	462b      	mov	r3, r5
   21224:	2246      	movs	r2, #70	; 0x46
   21226:	4669      	mov	r1, sp
   21228:	205e      	movs	r0, #94	; 0x5e
   2122a:	f7ff fea7 	bl	20f7c <bma4_write_regs>
}
   2122e:	b012      	add	sp, #72	; 0x48
   21230:	bd70      	pop	{r4, r5, r6, pc}
        if ((feature & BMA456_STEP_CNTR) > 0)
   21232:	b12b      	cbz	r3, 21240 <bma456_feature_enable+0xaa>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_CNTR_EN_MSK);
   21234:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21238:	f023 0310 	bic.w	r3, r3, #16
   2123c:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_STEP_ACT) > 0)
   21240:	b128      	cbz	r0, 2124e <bma456_feature_enable+0xb8>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_ACT_EN_MSK);
   21242:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21246:	f023 0320 	bic.w	r3, r3, #32
   2124a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_WRIST_WEAR) > 0)
   2124e:	b129      	cbz	r1, 2125c <bma456_feature_enable+0xc6>
            feature_config[index] = feature_config[index] & (~BMA456_WRIST_WEAR_EN_MSK);
   21250:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   21254:	f023 0301 	bic.w	r3, r3, #1
   21258:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        if ((feature & BMA456_SINGLE_TAP) > 0)
   2125c:	b12a      	cbz	r2, 2126a <bma456_feature_enable+0xd4>
            feature_config[index] = feature_config[index] & (~BMA456_SINGLE_TAP_EN_MSK);
   2125e:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   21262:	f023 0301 	bic.w	r3, r3, #1
   21266:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   2126a:	2c00      	cmp	r4, #0
   2126c:	d0d9      	beq.n	21222 <bma456_feature_enable+0x8c>
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   2126e:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   21272:	f023 0301 	bic.w	r3, r3, #1
   21276:	e7d2      	b.n	2121e <bma456_feature_enable+0x88>
        rslt = BMA4_E_NULL_PTR;
   21278:	f04f 30ff 	mov.w	r0, #4294967295
   2127c:	e7d7      	b.n	2122e <bma456_feature_enable+0x98>
            rslt = BMA4_E_INVALID_SENSOR;
   2127e:	f06f 0003 	mvn.w	r0, #3
   21282:	e7d4      	b.n	2122e <bma456_feature_enable+0x98>

00021284 <bma456_step_counter_set_watermark>:
{
   21284:	b530      	push	{r4, r5, lr}
   21286:	b093      	sub	sp, #76	; 0x4c
   21288:	460c      	mov	r4, r1
   2128a:	4605      	mov	r5, r0
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   2128c:	2100      	movs	r1, #0
   2128e:	2242      	movs	r2, #66	; 0x42
   21290:	a801      	add	r0, sp, #4
   21292:	9100      	str	r1, [sp, #0]
   21294:	f003 f861 	bl	2435a <memset>
    if (dev != NULL)
   21298:	b30c      	cbz	r4, 212de <bma456_step_counter_set_watermark+0x5a>
        if (dev->chip_id == BMA456_CHIP_ID)
   2129a:	7823      	ldrb	r3, [r4, #0]
   2129c:	2b16      	cmp	r3, #22
   2129e:	d121      	bne.n	212e4 <bma456_step_counter_set_watermark+0x60>
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   212a0:	4623      	mov	r3, r4
   212a2:	2246      	movs	r2, #70	; 0x46
   212a4:	4669      	mov	r1, sp
   212a6:	205e      	movs	r0, #94	; 0x5e
   212a8:	f7ff fdbc 	bl	20e24 <bma4_read_regs>
            if (rslt == BMA4_OK)
   212ac:	b9a8      	cbnz	r0, 212da <bma456_step_counter_set_watermark+0x56>
                data = BMA4_SET_BITS_POS_0(data, BMA456_STEP_CNTR_WM, step_counter_wm);
   212ae:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
   212b2:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   212b6:	f022 0203 	bic.w	r2, r2, #3
   212ba:	f3c5 0509 	ubfx	r5, r5, #0, #10
   212be:	432a      	orrs	r2, r5
   212c0:	b212      	sxth	r2, r2
                feature_config[index] = BMA4_GET_LSB(data);
   212c2:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                feature_config[index + 1] = BMA4_GET_MSB(data);
   212c6:	f3c2 2207 	ubfx	r2, r2, #8, #8
   212ca:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   212ce:	4623      	mov	r3, r4
   212d0:	2246      	movs	r2, #70	; 0x46
   212d2:	4669      	mov	r1, sp
   212d4:	205e      	movs	r0, #94	; 0x5e
   212d6:	f7ff fe51 	bl	20f7c <bma4_write_regs>
}
   212da:	b013      	add	sp, #76	; 0x4c
   212dc:	bd30      	pop	{r4, r5, pc}
        rslt = BMA4_E_NULL_PTR;
   212de:	f04f 30ff 	mov.w	r0, #4294967295
   212e2:	e7fa      	b.n	212da <bma456_step_counter_set_watermark+0x56>
            rslt = BMA4_E_INVALID_SENSOR;
   212e4:	f06f 0003 	mvn.w	r0, #3
   212e8:	e7f7      	b.n	212da <bma456_step_counter_set_watermark+0x56>

000212ea <bma456_step_counter_output>:
{
   212ea:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[BMA456_STEP_CNTR_DATA_SIZE] = { 0 };
   212ec:	2300      	movs	r3, #0
   212ee:	9301      	str	r3, [sp, #4]
{
   212f0:	4604      	mov	r4, r0
    if ((dev != NULL) && (step_count != NULL))
   212f2:	460b      	mov	r3, r1
   212f4:	b171      	cbz	r1, 21314 <bma456_step_counter_output+0x2a>
   212f6:	b168      	cbz	r0, 21314 <bma456_step_counter_output+0x2a>
        if (dev->chip_id == BMA456_CHIP_ID)
   212f8:	780a      	ldrb	r2, [r1, #0]
   212fa:	2a16      	cmp	r2, #22
   212fc:	d10d      	bne.n	2131a <bma456_step_counter_output+0x30>
            rslt = bma4_read_regs(BMA4_STEP_CNT_OUT_0_ADDR, data, BMA456_STEP_CNTR_DATA_SIZE, dev);
   212fe:	2204      	movs	r2, #4
   21300:	eb0d 0102 	add.w	r1, sp, r2
   21304:	201e      	movs	r0, #30
   21306:	f7ff fd8d 	bl	20e24 <bma4_read_regs>
            if (rslt == BMA4_OK)
   2130a:	b908      	cbnz	r0, 21310 <bma456_step_counter_output+0x26>
                *step_count = step_count_0 | step_count_1 | step_count_2 | step_count_3;
   2130c:	9b01      	ldr	r3, [sp, #4]
   2130e:	6023      	str	r3, [r4, #0]
}
   21310:	b002      	add	sp, #8
   21312:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   21314:	f04f 30ff 	mov.w	r0, #4294967295
   21318:	e7fa      	b.n	21310 <bma456_step_counter_output+0x26>
            rslt = BMA4_E_INVALID_SENSOR;
   2131a:	f06f 0003 	mvn.w	r0, #3
   2131e:	e7f7      	b.n	21310 <bma456_step_counter_output+0x26>

00021320 <set_max30102_for_reading_data>:
{
   21320:	b510      	push	{r4, lr}
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   21322:	2140      	movs	r1, #64	; 0x40
   21324:	2002      	movs	r0, #2
   21326:	f7e1 ffb5 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   2132a:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   2132c:	4604      	mov	r4, r0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   2132e:	2003      	movs	r0, #3
   21330:	f7e1 ffb0 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21334:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   21336:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21338:	2004      	movs	r0, #4
   2133a:	f7e1 ffab 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   2133e:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21340:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   21342:	2100      	movs	r1, #0
   21344:	2005      	movs	r0, #5
   21346:	f7e1 ffa5 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   2134a:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   2134c:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   2134e:	2100      	movs	r1, #0
   21350:	2006      	movs	r0, #6
   21352:	f7e1 ff9f 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   21356:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   21358:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   2135a:	210f      	movs	r1, #15
   2135c:	2008      	movs	r0, #8
   2135e:	f7e1 ff99 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   21362:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   21364:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   21366:	2103      	movs	r1, #3
   21368:	2009      	movs	r0, #9
   2136a:	f7e1 ff93 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   2136e:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   21370:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   21372:	2127      	movs	r1, #39	; 0x27
   21374:	200a      	movs	r0, #10
   21376:	f7e1 ff8d 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   2137a:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   2137c:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   2137e:	2124      	movs	r1, #36	; 0x24
   21380:	200c      	movs	r0, #12
   21382:	f7e1 ff87 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   21386:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   21388:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   2138a:	2124      	movs	r1, #36	; 0x24
   2138c:	200d      	movs	r0, #13
   2138e:	f7e1 ff81 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   21392:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   21394:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   21396:	217f      	movs	r1, #127	; 0x7f
   21398:	2010      	movs	r0, #16
   2139a:	f7e1 ff7b 	bl	3294 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   2139e:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   213a0:	4320      	orrs	r0, r4
}
   213a2:	b280      	uxth	r0, r0
   213a4:	bd10      	pop	{r4, pc}

000213a6 <gpio_pin_configure>:
{
   213a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_driver_data *data =
   213a8:	68c5      	ldr	r5, [r0, #12]
{
   213aa:	460f      	mov	r7, r1
   213ac:	4616      	mov	r6, r2
	return api->pin_configure(port, pin, flags);
   213ae:	6883      	ldr	r3, [r0, #8]
   213b0:	681b      	ldr	r3, [r3, #0]
   213b2:	4798      	blx	r3
	if (ret != 0) {
   213b4:	b948      	cbnz	r0, 213ca <gpio_pin_configure+0x24>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   213b6:	682c      	ldr	r4, [r5, #0]
   213b8:	2301      	movs	r3, #1
   213ba:	fa03 f107 	lsl.w	r1, r3, r7
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   213be:	07f3      	lsls	r3, r6, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   213c0:	bf4c      	ite	mi
   213c2:	4321      	orrmi	r1, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   213c4:	ea24 0101 	bicpl.w	r1, r4, r1
   213c8:	6029      	str	r1, [r5, #0]
}
   213ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000213cc <match_led_to_button>:

    return led;
}

bool match_led_to_button(struct device *button, struct device *led)
{
   213cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
   213ce:	68c5      	ldr	r5, [r0, #12]
   213d0:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
   213d2:	6883      	ldr	r3, [r0, #8]
   213d4:	a901      	add	r1, sp, #4
   213d6:	685b      	ldr	r3, [r3, #4]
   213d8:	4798      	blx	r3
	if (ret == 0) {
   213da:	b920      	cbnz	r0, 213e6 <match_led_to_button+0x1a>
		*value ^= data->invert;
   213dc:	6828      	ldr	r0, [r5, #0]
   213de:	9b01      	ldr	r3, [sp, #4]
   213e0:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   213e2:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   213e6:	68e3      	ldr	r3, [r4, #12]
   213e8:	681b      	ldr	r3, [r3, #0]
    bool val;
    val = gpio_pin_get(button, SW0_GPIO_PIN);
   213ea:	1e05      	subs	r5, r0, #0
   213ec:	bf18      	it	ne
   213ee:	2501      	movne	r5, #1
   213f0:	055b      	lsls	r3, r3, #21
   213f2:	d509      	bpl.n	21408 <match_led_to_button+0x3c>
	if (value != 0)	{
   213f4:	b150      	cbz	r0, 2140c <match_led_to_button+0x40>
	return api->port_set_bits_raw(port, pins);
   213f6:	68a3      	ldr	r3, [r4, #8]
   213f8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   213fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
   213fe:	4620      	mov	r0, r4
   21400:	4798      	blx	r3
    gpio_pin_set(led, LED0_GPIO_PIN, !val);
    return val;
}
   21402:	4628      	mov	r0, r5
   21404:	b003      	add	sp, #12
   21406:	bd30      	pop	{r4, r5, pc}
	if (value != 0)	{
   21408:	2800      	cmp	r0, #0
   2140a:	d0f4      	beq.n	213f6 <match_led_to_button+0x2a>
	return api->port_clear_bits_raw(port, pins);
   2140c:	68a3      	ldr	r3, [r4, #8]
   2140e:	691b      	ldr	r3, [r3, #16]
   21410:	e7f3      	b.n	213fa <match_led_to_button+0x2e>

00021412 <z_impl_i2c_transfer>:
{
   21412:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   21414:	6884      	ldr	r4, [r0, #8]
   21416:	6864      	ldr	r4, [r4, #4]
   21418:	46a4      	mov	ip, r4
}
   2141a:	bc10      	pop	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   2141c:	4760      	bx	ip

0002141e <max30208_read_fifo>:
{
   2141e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    *data = 0;
   21420:	2300      	movs	r3, #0
   21422:	6003      	str	r3, [r0, #0]
{
   21424:	4605      	mov	r5, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   21426:	21c1      	movs	r1, #193	; 0xc1
   21428:	2014      	movs	r0, #20
   2142a:	f7e2 f97d 	bl	3728 <max30208_i2c_write.constprop.0>
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   2142e:	f10d 0107 	add.w	r1, sp, #7
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   21432:	4604      	mov	r4, r0
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   21434:	2008      	movs	r0, #8
   21436:	f7e2 f993 	bl	3760 <max30208_i2c_read.constprop.0>
   2143a:	f10d 0107 	add.w	r1, sp, #7
   2143e:	2008      	movs	r0, #8
            temp_dat[i] = temp;
   21440:	f89d 7007 	ldrb.w	r7, [sp, #7]
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   21444:	f7e2 f98c 	bl	3760 <max30208_i2c_read.constprop.0>
            temp_dat[i] = temp;
   21448:	f89d 6007 	ldrb.w	r6, [sp, #7]
        sum = sum + (temp_dat[0] << 8) + temp_dat[1];
   2144c:	eb06 2607 	add.w	r6, r6, r7, lsl #8
    *data = sum / samples;
   21450:	602e      	str	r6, [r5, #0]
    max30208_i2c_read(MAX30208_FIFO_R_POINTER, &temp, 1);
   21452:	f10d 0107 	add.w	r1, sp, #7
   21456:	2005      	movs	r0, #5
   21458:	f7e2 f982 	bl	3760 <max30208_i2c_read.constprop.0>
}
   2145c:	4620      	mov	r0, r4
    *data = (temp_dat[0] << 8) + temp_dat[1];
   2145e:	602e      	str	r6, [r5, #0]
}
   21460:	b003      	add	sp, #12
   21462:	bdf0      	pop	{r4, r5, r6, r7, pc}

00021464 <mpu6050_read_Acc>:

u16_t mpu6050_read_Acc(uint16_t *value)
{
   21464:	4601      	mov	r1, r0
    return mpu6050_i2c_read(0x3B, value, 2);
   21466:	203b      	movs	r0, #59	; 0x3b
   21468:	f7e2 b9b4 	b.w	37d4 <mpu6050_i2c_read.constprop.0>

0002146c <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   2146c:	4684      	mov	ip, r0
    int32_t i = 1, n_width;
    *pn_npks = 0;
   2146e:	2000      	movs	r0, #0
{
   21470:	b5f0      	push	{r4, r5, r6, r7, lr}
    *pn_npks = 0;
   21472:	6008      	str	r0, [r1, #0]
    int32_t i = 1, n_width;
   21474:	2501      	movs	r5, #1

    while (i < n_size - 1)
   21476:	f103 3eff 	add.w	lr, r3, #4294967295
   2147a:	45ae      	cmp	lr, r5
   2147c:	dc00      	bgt.n	21480 <maxim_peaks_above_min_height+0x14>
                i += n_width;
        }
        else
            i++;
    }
}
   2147e:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i - 1])
   21480:	9c05      	ldr	r4, [sp, #20]
   21482:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
   21486:	42a0      	cmp	r0, r4
   21488:	ea4f 0685 	mov.w	r6, r5, lsl #2
   2148c:	f105 0401 	add.w	r4, r5, #1
   21490:	dd18      	ble.n	214c4 <maxim_peaks_above_min_height+0x58>
   21492:	4416      	add	r6, r2
   21494:	f856 6c04 	ldr.w	r6, [r6, #-4]
   21498:	42b0      	cmp	r0, r6
   2149a:	dd13      	ble.n	214c4 <maxim_peaks_above_min_height+0x58>
   2149c:	4626      	mov	r6, r4
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
   2149e:	429e      	cmp	r6, r3
   214a0:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   214a4:	4634      	mov	r4, r6
   214a6:	da03      	bge.n	214b0 <maxim_peaks_above_min_height+0x44>
   214a8:	42b8      	cmp	r0, r7
   214aa:	f106 0601 	add.w	r6, r6, #1
   214ae:	d0f6      	beq.n	2149e <maxim_peaks_above_min_height+0x32>
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15)
   214b0:	42b8      	cmp	r0, r7
   214b2:	dd07      	ble.n	214c4 <maxim_peaks_above_min_height+0x58>
   214b4:	6808      	ldr	r0, [r1, #0]
   214b6:	280e      	cmp	r0, #14
                pn_locs[(*pn_npks)++] = i;
   214b8:	bfdf      	itttt	le
   214ba:	1c46      	addle	r6, r0, #1
   214bc:	600e      	strle	r6, [r1, #0]
   214be:	f84c 5020 	strle.w	r5, [ip, r0, lsl #2]
                i += n_width + 1;
   214c2:	3401      	addle	r4, #1
{
   214c4:	4625      	mov	r5, r4
   214c6:	e7d8      	b.n	2147a <maxim_peaks_above_min_height+0xe>

000214c8 <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   214c8:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   214ca:	2301      	movs	r3, #1
   214cc:	4604      	mov	r4, r0
   214ce:	428b      	cmp	r3, r1
   214d0:	db00      	blt.n	214d4 <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
            pn_x[j] = pn_x[j - 1];
        pn_x[j] = n_temp;
    }
}
   214d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
   214d4:	f854 6f04 	ldr.w	r6, [r4, #4]!
   214d8:	461a      	mov	r2, r3
   214da:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   214dc:	f855 7c04 	ldr.w	r7, [r5, #-4]
   214e0:	42b7      	cmp	r7, r6
   214e2:	dd03      	ble.n	214ec <maxim_sort_ascend+0x24>
   214e4:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j - 1];
   214e6:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   214ea:	d1f7      	bne.n	214dc <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
   214ec:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++)
   214f0:	3301      	adds	r3, #1
   214f2:	e7ec      	b.n	214ce <maxim_sort_ascend+0x6>

000214f4 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
   214f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   214f8:	2301      	movs	r3, #1
   214fa:	460d      	mov	r5, r1
   214fc:	4293      	cmp	r3, r2
   214fe:	db01      	blt.n	21504 <maxim_sort_indices_descend+0x10>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
            pn_indx[j] = pn_indx[j - 1];
        pn_indx[j] = n_temp;
    }
}
   21500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
   21504:	f855 6f04 	ldr.w	r6, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   21508:	461c      	mov	r4, r3
   2150a:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   2150e:	46ac      	mov	ip, r5
   21510:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   21514:	f8d9 e000 	ldr.w	lr, [r9]
   21518:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
   2151c:	45c6      	cmp	lr, r8
   2151e:	dd03      	ble.n	21528 <maxim_sort_indices_descend+0x34>
   21520:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j - 1];
   21522:	f84c 7904 	str.w	r7, [ip], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   21526:	d1f3      	bne.n	21510 <maxim_sort_indices_descend+0x1c>
        pn_indx[j] = n_temp;
   21528:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++)
   2152c:	3301      	adds	r3, #1
   2152e:	e7e5      	b.n	214fc <maxim_sort_indices_descend+0x8>

00021530 <maxim_remove_close_peaks>:
{
   21530:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21532:	4604      	mov	r4, r0
   21534:	461e      	mov	r6, r3
   21536:	4610      	mov	r0, r2
   21538:	460d      	mov	r5, r1
    maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
   2153a:	680a      	ldr	r2, [r1, #0]
   2153c:	4621      	mov	r1, r4
   2153e:	f7ff ffd9 	bl	214f4 <maxim_sort_indices_descend>
    for (i = -1; i < *pn_npks; i++)
   21542:	f04f 32ff 	mov.w	r2, #4294967295
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   21546:	f1c6 0e00 	rsb	lr, r6, #0
    for (i = -1; i < *pn_npks; i++)
   2154a:	6829      	ldr	r1, [r5, #0]
   2154c:	4291      	cmp	r1, r2
   2154e:	dc04      	bgt.n	2155a <maxim_remove_close_peaks+0x2a>
    maxim_sort_ascend(pn_locs, *pn_npks);
   21550:	4620      	mov	r0, r4
}
   21552:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    maxim_sort_ascend(pn_locs, *pn_npks);
   21556:	f7ff bfb7 	b.w	214c8 <maxim_sort_ascend>
        *pn_npks = i + 1;
   2155a:	1c57      	adds	r7, r2, #1
   2155c:	4638      	mov	r0, r7
   2155e:	602f      	str	r7, [r5, #0]
        for (j = i + 1; j < n_old_npks; j++)
   21560:	4281      	cmp	r1, r0
   21562:	d101      	bne.n	21568 <maxim_remove_close_peaks+0x38>
   21564:	463a      	mov	r2, r7
   21566:	e7f0      	b.n	2154a <maxim_remove_close_peaks+0x1a>
            n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
   21568:	f1b2 3fff 	cmp.w	r2, #4294967295
   2156c:	bf18      	it	ne
   2156e:	f854 c022 	ldrne.w	ip, [r4, r2, lsl #2]
   21572:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   21576:	bf08      	it	eq
   21578:	4694      	moveq	ip, r2
   2157a:	eba3 030c 	sub.w	r3, r3, ip
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   2157e:	42b3      	cmp	r3, r6
   21580:	dc01      	bgt.n	21586 <maxim_remove_close_peaks+0x56>
   21582:	459e      	cmp	lr, r3
   21584:	dd08      	ble.n	21598 <maxim_remove_close_peaks+0x68>
                pn_locs[(*pn_npks)++] = pn_locs[j];
   21586:	f8d5 c000 	ldr.w	ip, [r5]
   2158a:	f10c 0301 	add.w	r3, ip, #1
   2158e:	602b      	str	r3, [r5, #0]
   21590:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   21594:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        for (j = i + 1; j < n_old_npks; j++)
   21598:	3001      	adds	r0, #1
   2159a:	e7e1      	b.n	21560 <maxim_remove_close_peaks+0x30>

0002159c <maxim_find_peaks>:
{
   2159c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   2159e:	9e06      	ldr	r6, [sp, #24]
   215a0:	9600      	str	r6, [sp, #0]
{
   215a2:	4605      	mov	r5, r0
   215a4:	460c      	mov	r4, r1
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   215a6:	f7ff ff61 	bl	2146c <maxim_peaks_above_min_height>
    maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
   215aa:	9b07      	ldr	r3, [sp, #28]
   215ac:	4628      	mov	r0, r5
   215ae:	f7ff ffbf 	bl	21530 <maxim_remove_close_peaks>
    *pn_npks = min(*pn_npks, n_max_num);
   215b2:	6822      	ldr	r2, [r4, #0]
   215b4:	9b08      	ldr	r3, [sp, #32]
   215b6:	429a      	cmp	r2, r3
   215b8:	bfd4      	ite	le
   215ba:	6022      	strle	r2, [r4, #0]
   215bc:	6023      	strgt	r3, [r4, #0]
}
   215be:	b002      	add	sp, #8
   215c0:	bd70      	pop	{r4, r5, r6, pc}

000215c2 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   215c2:	2301      	movs	r3, #1
   215c4:	fa03 f101 	lsl.w	r1, r3, r1
   215c8:	68c3      	ldr	r3, [r0, #12]
   215ca:	681b      	ldr	r3, [r3, #0]
   215cc:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   215ce:	bf18      	it	ne
   215d0:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   215d4:	b112      	cbz	r2, 215dc <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   215d6:	6883      	ldr	r3, [r0, #8]
   215d8:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   215da:	4718      	bx	r3
   215dc:	6883      	ldr	r3, [r0, #8]
   215de:	691b      	ldr	r3, [r3, #16]
   215e0:	e7fb      	b.n	215da <gpio_pin_set+0x18>

000215e2 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   215e2:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   215e4:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   215e6:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   215e8:	6883      	ldr	r3, [r0, #8]
   215ea:	f44f 7200 	mov.w	r2, #512	; 0x200
   215ee:	681b      	ldr	r3, [r3, #0]
   215f0:	4798      	blx	r3
	if (ret != 0) {
   215f2:	b930      	cbnz	r0, 21602 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   215f4:	2301      	movs	r3, #1
   215f6:	fa03 f104 	lsl.w	r1, r3, r4
   215fa:	682b      	ldr	r3, [r5, #0]
   215fc:	ea23 0301 	bic.w	r3, r3, r1
   21600:	602b      	str	r3, [r5, #0]
}
   21602:	bd38      	pop	{r3, r4, r5, pc}

00021604 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   21604:	4601      	mov	r1, r0
   21606:	f240 30e7 	movw	r0, #999	; 0x3e7
   2160a:	b508      	push	{r3, lr}
   2160c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21610:	2300      	movs	r3, #0
   21612:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   21616:	1449      	asrs	r1, r1, #17
   21618:	f7df fc36 	bl	e88 <__aeabi_uldivmod>
}
   2161c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   21620:	f7fe be4e 	b.w	202c0 <z_impl_k_sleep>

00021624 <SetBrightness>:
{
   21624:	b510      	push	{r4, lr}
   21626:	4604      	mov	r4, r0
	WriteComm(0x51);
   21628:	2051      	movs	r0, #81	; 0x51
   2162a:	f7e2 fbef 	bl	3e0c <WriteComm>
	WriteData(value);
   2162e:	b2e0      	uxtb	r0, r4
}
   21630:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	WriteData(value);
   21634:	f7e2 bc22 	b.w	3e7c <WriteData>

00021638 <BlockWrite>:
{
   21638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2163a:	4607      	mov	r7, r0
	WriteComm(0x2A);
   2163c:	202a      	movs	r0, #42	; 0x2a
{
   2163e:	460e      	mov	r6, r1
   21640:	4615      	mov	r5, r2
   21642:	461c      	mov	r4, r3
	WriteComm(0x2A);
   21644:	f7e2 fbe2 	bl	3e0c <WriteComm>
	WriteData(Xstart >> 8);
   21648:	f3c7 2007 	ubfx	r0, r7, #8, #8
   2164c:	f7e2 fc16 	bl	3e7c <WriteData>
	WriteData(Xstart);
   21650:	b2f8      	uxtb	r0, r7
   21652:	f7e2 fc13 	bl	3e7c <WriteData>
	WriteData(Xend >> 8);
   21656:	f3c6 2007 	ubfx	r0, r6, #8, #8
   2165a:	f7e2 fc0f 	bl	3e7c <WriteData>
	WriteData(Xend);
   2165e:	b2f0      	uxtb	r0, r6
   21660:	f7e2 fc0c 	bl	3e7c <WriteData>
	WriteComm(0x2B);
   21664:	202b      	movs	r0, #43	; 0x2b
   21666:	f7e2 fbd1 	bl	3e0c <WriteComm>
	WriteData(Ystart >> 8);
   2166a:	f3c5 2007 	ubfx	r0, r5, #8, #8
   2166e:	f7e2 fc05 	bl	3e7c <WriteData>
	WriteData(Ystart);
   21672:	b2e8      	uxtb	r0, r5
   21674:	f7e2 fc02 	bl	3e7c <WriteData>
	WriteData(Yend >> 8);
   21678:	f3c4 2007 	ubfx	r0, r4, #8, #8
   2167c:	f7e2 fbfe 	bl	3e7c <WriteData>
	WriteData(Yend);
   21680:	b2e0      	uxtb	r0, r4
   21682:	f7e2 fbfb 	bl	3e7c <WriteData>
}
   21686:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	WriteComm(0x2c);
   2168a:	202c      	movs	r0, #44	; 0x2c
   2168c:	f7e2 bbbe 	b.w	3e0c <WriteComm>

00021690 <resetDisplay>:
	WriteComm(0x01);
   21690:	2001      	movs	r0, #1
   21692:	f7e2 bbbb 	b.w	3e0c <WriteComm>

00021696 <setDisplay>:
{
   21696:	b508      	push	{r3, lr}
	WriteComm(0xFE);
   21698:	20fe      	movs	r0, #254	; 0xfe
   2169a:	f7e2 fbb7 	bl	3e0c <WriteComm>
	WriteData(0x01);
   2169e:	2001      	movs	r0, #1
   216a0:	f7e2 fbec 	bl	3e7c <WriteData>
	WriteComm(0x04);
   216a4:	2004      	movs	r0, #4
   216a6:	f7e2 fbb1 	bl	3e0c <WriteComm>
	WriteData(0xA0);
   216aa:	20a0      	movs	r0, #160	; 0xa0
   216ac:	f7e2 fbe6 	bl	3e7c <WriteData>
	WriteComm(0x70);
   216b0:	2070      	movs	r0, #112	; 0x70
   216b2:	f7e2 fbab 	bl	3e0c <WriteComm>
	WriteData(0x55);
   216b6:	2055      	movs	r0, #85	; 0x55
   216b8:	f7e2 fbe0 	bl	3e7c <WriteData>
	WriteComm(0xFE);
   216bc:	20fe      	movs	r0, #254	; 0xfe
   216be:	f7e2 fba5 	bl	3e0c <WriteComm>
	WriteData(0x0A);
   216c2:	200a      	movs	r0, #10
   216c4:	f7e2 fbda 	bl	3e7c <WriteData>
	WriteComm(0x29);
   216c8:	2029      	movs	r0, #41	; 0x29
   216ca:	f7e2 fb9f 	bl	3e0c <WriteComm>
	WriteData(0x10);
   216ce:	2010      	movs	r0, #16
   216d0:	f7e2 fbd4 	bl	3e7c <WriteData>
	WriteComm(0xFE);
   216d4:	20fe      	movs	r0, #254	; 0xfe
   216d6:	f7e2 fb99 	bl	3e0c <WriteComm>
	WriteData(0x05);
   216da:	2005      	movs	r0, #5
   216dc:	f7e2 fbce 	bl	3e7c <WriteData>
	WriteComm(0x05);
   216e0:	2005      	movs	r0, #5
   216e2:	f7e2 fb93 	bl	3e0c <WriteComm>
	WriteData(0x00);
   216e6:	2000      	movs	r0, #0
   216e8:	f7e2 fbc8 	bl	3e7c <WriteData>
	WriteComm(0xFE);
   216ec:	20fe      	movs	r0, #254	; 0xfe
   216ee:	f7e2 fb8d 	bl	3e0c <WriteComm>
	WriteData(0x00);
   216f2:	2000      	movs	r0, #0
   216f4:	f7e2 fbc2 	bl	3e7c <WriteData>
	WriteComm(0x51);
   216f8:	2051      	movs	r0, #81	; 0x51
   216fa:	f7e2 fb87 	bl	3e0c <WriteComm>
	WriteData(0xaf);
   216fe:	20af      	movs	r0, #175	; 0xaf
   21700:	f7e2 fbbc 	bl	3e7c <WriteData>
	WriteComm(0x53);
   21704:	2053      	movs	r0, #83	; 0x53
   21706:	f7e2 fb81 	bl	3e0c <WriteComm>
	WriteData(0x10);
   2170a:	2010      	movs	r0, #16
   2170c:	f7e2 fbb6 	bl	3e7c <WriteData>
	WriteComm(0x53);
   21710:	2053      	movs	r0, #83	; 0x53
   21712:	f7e2 fb7b 	bl	3e0c <WriteComm>
	WriteData(0x20);
   21716:	2020      	movs	r0, #32
   21718:	f7e2 fbb0 	bl	3e7c <WriteData>
	WriteComm(0x35);
   2171c:	2035      	movs	r0, #53	; 0x35
   2171e:	f7e2 fb75 	bl	3e0c <WriteComm>
	WriteData(0x00);
   21722:	2000      	movs	r0, #0
   21724:	f7e2 fbaa 	bl	3e7c <WriteData>
	WriteComm(0x3A);
   21728:	203a      	movs	r0, #58	; 0x3a
   2172a:	f7e2 fb6f 	bl	3e0c <WriteComm>
	WriteData(0x55); //RGB565
   2172e:	2055      	movs	r0, #85	; 0x55
   21730:	f7e2 fba4 	bl	3e7c <WriteData>
	WriteComm(0x2A);
   21734:	202a      	movs	r0, #42	; 0x2a
   21736:	f7e2 fb69 	bl	3e0c <WriteComm>
	WriteData(0x00);
   2173a:	2000      	movs	r0, #0
   2173c:	f7e2 fb9e 	bl	3e7c <WriteData>
	WriteData(0x10);
   21740:	2010      	movs	r0, #16
   21742:	f7e2 fb9b 	bl	3e7c <WriteData>
	WriteData(0x01);
   21746:	2001      	movs	r0, #1
   21748:	f7e2 fb98 	bl	3e7c <WriteData>
	WriteData(0x7F);
   2174c:	207f      	movs	r0, #127	; 0x7f
   2174e:	f7e2 fb95 	bl	3e7c <WriteData>
	WriteComm(0x2B);
   21752:	202b      	movs	r0, #43	; 0x2b
   21754:	f7e2 fb5a 	bl	3e0c <WriteComm>
	WriteData(0x00);
   21758:	2000      	movs	r0, #0
   2175a:	f7e2 fb8f 	bl	3e7c <WriteData>
	WriteData(0x00);
   2175e:	2000      	movs	r0, #0
   21760:	f7e2 fb8c 	bl	3e7c <WriteData>
	WriteData(0x01);
   21764:	2001      	movs	r0, #1
   21766:	f7e2 fb89 	bl	3e7c <WriteData>
	WriteData(0xBF);
   2176a:	20bf      	movs	r0, #191	; 0xbf
   2176c:	f7e2 fb86 	bl	3e7c <WriteData>
	WriteComm(0x11);
   21770:	2011      	movs	r0, #17
   21772:	f7e2 fb4b 	bl	3e0c <WriteComm>
	k_msleep(480);
   21776:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   2177a:	f7ff ff43 	bl	21604 <k_msleep.isra.0>
	WriteComm(0x29);
   2177e:	2029      	movs	r0, #41	; 0x29
   21780:	f7e2 fb44 	bl	3e0c <WriteComm>
}
   21784:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_msleep(80);
   21788:	2050      	movs	r0, #80	; 0x50
   2178a:	f7ff bf3b 	b.w	21604 <k_msleep.isra.0>

0002178e <ToOrd>:

//ascii 32~90(!~Z), (32~47)�ո�~/,(48~57)0~9,(58~64):~@,(65~126)A~~
//ord 0~95, (48~57)0~9,(65~126)A~z,(33~47)!~/,(58~64):~@
unsigned char ToOrd(unsigned char ch)
{
	if (ch < 32) {
   2178e:	281f      	cmp	r0, #31
{
   21790:	4603      	mov	r3, r0
	if (ch < 32) {
   21792:	d916      	bls.n	217c2 <ToOrd+0x34>
		ch = 95;
	} else if ((ch >= 32) && (ch <= 47)) //(32~47)�ո�~/
   21794:	f1a0 0220 	sub.w	r2, r0, #32
   21798:	2a0f      	cmp	r2, #15
   2179a:	d802      	bhi.n	217a2 <ToOrd+0x14>
	{
		ch = (ch - 32) + 10 + 62;
   2179c:	3328      	adds	r3, #40	; 0x28
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
	{
		ch = ch - 48;
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
	{
		ch = (ch - 58) + 10 + 62 + 16;
   2179e:	b2d8      	uxtb	r0, r3
   217a0:	4770      	bx	lr
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
   217a2:	3830      	subs	r0, #48	; 0x30
   217a4:	b2c0      	uxtb	r0, r0
   217a6:	2809      	cmp	r0, #9
   217a8:	d90c      	bls.n	217c4 <ToOrd+0x36>
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
   217aa:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
   217ae:	2a06      	cmp	r2, #6
   217b0:	d801      	bhi.n	217b6 <ToOrd+0x28>
		ch = (ch - 58) + 10 + 62 + 16;
   217b2:	331e      	adds	r3, #30
   217b4:	e7f3      	b.n	2179e <ToOrd+0x10>
	} else if ((ch >= 65) && (ch <= 126)) //(65~126)A~~
   217b6:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   217ba:	2a3d      	cmp	r2, #61	; 0x3d
   217bc:	d801      	bhi.n	217c2 <ToOrd+0x34>
	{
		ch = (ch - 65) + 10;
   217be:	3b37      	subs	r3, #55	; 0x37
   217c0:	e7ed      	b.n	2179e <ToOrd+0x10>
		ch = 95;
   217c2:	205f      	movs	r0, #95	; 0x5f
	} else if (ch > 126) {
		ch = 95;
	}
	return ch;
}
   217c4:	4770      	bx	lr

000217c6 <DispStr>:
{
   217c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   217ca:	f8dd 8020 	ldr.w	r8, [sp, #32]
   217ce:	460d      	mov	r5, r1
   217d0:	4614      	mov	r4, r2
   217d2:	461f      	mov	r7, r3
   217d4:	1e46      	subs	r6, r0, #1
	while (!(*str == '\0')) {
   217d6:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   217da:	b94a      	cbnz	r2, 217f0 <DispStr+0x2a>
	BlockWrite(0, COL - 1, 0, ROW - 1);
   217dc:	f240 13bf 	movw	r3, #447	; 0x1bf
   217e0:	f240 116f 	movw	r1, #367	; 0x16f
   217e4:	4610      	mov	r0, r2
}
   217e6:	b002      	add	sp, #8
   217e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	BlockWrite(0, COL - 1, 0, ROW - 1);
   217ec:	f7ff bf24 	b.w	21638 <BlockWrite>
		DispOneChar(ToOrd(*str++), Xstart, Ystart, TextColor,
   217f0:	4610      	mov	r0, r2
   217f2:	f7ff ffcc 	bl	2178e <ToOrd>
   217f6:	4629      	mov	r1, r5
   217f8:	4622      	mov	r2, r4
   217fa:	f8cd 8000 	str.w	r8, [sp]
   217fe:	463b      	mov	r3, r7
   21800:	f7e2 fcc0 	bl	4184 <DispOneChar>
		if (Xstart > ((COL - 1) - FONT_W)) {
   21804:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
			Ystart = Ystart + FONT_H;
   21808:	bf26      	itte	cs
   2180a:	3415      	addcs	r4, #21
			Xstart = 0;
   2180c:	2500      	movcs	r5, #0
			Xstart = Xstart + FONT_W;
   2180e:	3510      	addcc	r5, #16
			Ystart = 0;
   21810:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
   21814:	bf88      	it	hi
   21816:	2400      	movhi	r4, #0
   21818:	e7dd      	b.n	217d6 <DispStr+0x10>

0002181a <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   2181a:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   2181c:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   2181e:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   21820:	6883      	ldr	r3, [r0, #8]
   21822:	f240 2201 	movw	r2, #513	; 0x201
   21826:	681b      	ldr	r3, [r3, #0]
   21828:	4798      	blx	r3
	if (ret != 0) {
   2182a:	b928      	cbnz	r0, 21838 <gpio_pin_configure.constprop.0+0x1e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2182c:	2301      	movs	r3, #1
   2182e:	fa03 f104 	lsl.w	r1, r3, r4
   21832:	682b      	ldr	r3, [r5, #0]
   21834:	430b      	orrs	r3, r1
   21836:	602b      	str	r3, [r5, #0]
}
   21838:	bd38      	pop	{r3, r4, r5, pc}

0002183a <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2183a:	2301      	movs	r3, #1
   2183c:	fa03 f101 	lsl.w	r1, r3, r1
   21840:	68c3      	ldr	r3, [r0, #12]
   21842:	681b      	ldr	r3, [r3, #0]
   21844:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   21846:	bf18      	it	ne
   21848:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2184c:	b112      	cbz	r2, 21854 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   2184e:	6883      	ldr	r3, [r0, #8]
   21850:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   21852:	4718      	bx	r3
   21854:	6883      	ldr	r3, [r0, #8]
   21856:	691b      	ldr	r3, [r3, #16]
   21858:	e7fb      	b.n	21852 <gpio_pin_set.isra.0+0x18>

0002185a <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   2185a:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   2185c:	2364      	movs	r3, #100	; 0x64
{
   2185e:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   21860:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   21862:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   21864:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   21868:	b111      	cbz	r1, 21870 <u8_to_dec+0x16>
   2186a:	3d01      	subs	r5, #1
   2186c:	d101      	bne.n	21872 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   2186e:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   21870:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   21872:	429a      	cmp	r2, r3
		digit = value / divisor;
   21874:	fbb2 f7f3 	udiv	r7, r2, r3
   21878:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   2187a:	d202      	bcs.n	21882 <u8_to_dec+0x28>
   2187c:	2b01      	cmp	r3, #1
   2187e:	d000      	beq.n	21882 <u8_to_dec+0x28>
   21880:	b130      	cbz	r0, 21890 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   21882:	3630      	adds	r6, #48	; 0x30
			buflen--;
   21884:	3901      	subs	r1, #1
			num_digits++;
   21886:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   21888:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   2188c:	b2c9      	uxtb	r1, r1
			num_digits++;
   2188e:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   21890:	fb03 2217 	mls	r2, r3, r7, r2
   21894:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   21896:	fbb3 f3fc 	udiv	r3, r3, ip
   2189a:	e7e5      	b.n	21868 <u8_to_dec+0xe>

0002189c <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   2189c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   218a0:	b2db      	uxtb	r3, r3
   218a2:	2b09      	cmp	r3, #9
   218a4:	d802      	bhi.n	218ac <char2hex+0x10>
		*x = c - '0';
   218a6:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   218a8:	2000      	movs	r0, #0
   218aa:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   218ac:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   218b0:	2b05      	cmp	r3, #5
   218b2:	d802      	bhi.n	218ba <char2hex+0x1e>
		*x = c - 'a' + 10;
   218b4:	3857      	subs	r0, #87	; 0x57
   218b6:	7008      	strb	r0, [r1, #0]
   218b8:	e7f6      	b.n	218a8 <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   218ba:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   218be:	2b05      	cmp	r3, #5
   218c0:	d801      	bhi.n	218c6 <char2hex+0x2a>
		*x = c - 'A' + 10;
   218c2:	3837      	subs	r0, #55	; 0x37
   218c4:	e7f7      	b.n	218b6 <char2hex+0x1a>
		return -EINVAL;
   218c6:	f06f 0015 	mvn.w	r0, #21
}
   218ca:	4770      	bx	lr

000218cc <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   218cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   218ce:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   218d0:	f001 0001 	and.w	r0, r1, #1
   218d4:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   218d8:	429d      	cmp	r5, r3
   218da:	ea4f 0651 	mov.w	r6, r1, lsr #1
   218de:	d903      	bls.n	218e8 <hex2bin+0x1c>
		return 0;
   218e0:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   218e2:	4628      	mov	r0, r5
   218e4:	b003      	add	sp, #12
   218e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   218e8:	b158      	cbz	r0, 21902 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   218ea:	7820      	ldrb	r0, [r4, #0]
   218ec:	f10d 0107 	add.w	r1, sp, #7
   218f0:	f7ff ffd4 	bl	2189c <char2hex>
   218f4:	2800      	cmp	r0, #0
   218f6:	dbf3      	blt.n	218e0 <hex2bin+0x14>
		buf[0] = dec;
   218f8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   218fc:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   21900:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   21902:	3401      	adds	r4, #1
   21904:	4416      	add	r6, r2
   21906:	42b2      	cmp	r2, r6
   21908:	d0eb      	beq.n	218e2 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   2190a:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   2190e:	f10d 0107 	add.w	r1, sp, #7
   21912:	f7ff ffc3 	bl	2189c <char2hex>
   21916:	2800      	cmp	r0, #0
   21918:	dbe2      	blt.n	218e0 <hex2bin+0x14>
		buf[i] = dec << 4;
   2191a:	f89d 3007 	ldrb.w	r3, [sp, #7]
   2191e:	011b      	lsls	r3, r3, #4
   21920:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   21922:	f814 0b02 	ldrb.w	r0, [r4], #2
   21926:	f7ff ffb9 	bl	2189c <char2hex>
   2192a:	2800      	cmp	r0, #0
   2192c:	dbd8      	blt.n	218e0 <hex2bin+0x14>
		buf[i] += dec;
   2192e:	7813      	ldrb	r3, [r2, #0]
   21930:	f89d 1007 	ldrb.w	r1, [sp, #7]
   21934:	440b      	add	r3, r1
   21936:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   2193a:	e7e4      	b.n	21906 <hex2bin+0x3a>

0002193c <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   2193c:	4603      	mov	r3, r0
   2193e:	b140      	cbz	r0, 21952 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21940:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21942:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21946:	2a02      	cmp	r2, #2
   21948:	d006      	beq.n	21958 <sys_notify_validate+0x1c>
   2194a:	2a03      	cmp	r2, #3
   2194c:	d004      	beq.n	21958 <sys_notify_validate+0x1c>
   2194e:	2a01      	cmp	r2, #1
   21950:	d005      	beq.n	2195e <sys_notify_validate+0x22>
		return -EINVAL;
   21952:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   21956:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21958:	681a      	ldr	r2, [r3, #0]
   2195a:	2a00      	cmp	r2, #0
   2195c:	d0f9      	beq.n	21952 <sys_notify_validate+0x16>
		notify->result = 0;
   2195e:	2000      	movs	r0, #0
   21960:	6098      	str	r0, [r3, #8]
   21962:	4770      	bx	lr

00021964 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21964:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21966:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   2196a:	2a02      	cmp	r2, #2
{
   2196c:	b510      	push	{r4, lr}
   2196e:	4603      	mov	r3, r0
	notify->result = res;
   21970:	6081      	str	r1, [r0, #8]
	switch (method) {
   21972:	d00a      	beq.n	2198a <sys_notify_finalize+0x26>
   21974:	2a03      	cmp	r2, #3
   21976:	d10b      	bne.n	21990 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   21978:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   2197a:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   2197c:	2200      	movs	r2, #0
   2197e:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   21980:	b108      	cbz	r0, 21986 <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   21982:	f7ff f88b 	bl	20a9c <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21986:	4620      	mov	r0, r4
   21988:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   2198a:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   2198c:	2400      	movs	r4, #0
		break;
   2198e:	e7f5      	b.n	2197c <sys_notify_finalize+0x18>
	switch (method) {
   21990:	2400      	movs	r4, #0
   21992:	4620      	mov	r0, r4
   21994:	e7f2      	b.n	2197c <sys_notify_finalize+0x18>

00021996 <arch_printk_char_out>:
}
   21996:	2000      	movs	r0, #0
   21998:	4770      	bx	lr

0002199a <str_out>:
{
   2199a:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   2199c:	688a      	ldr	r2, [r1, #8]
   2199e:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   219a0:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   219a2:	b114      	cbz	r4, 219aa <str_out+0x10>
   219a4:	684b      	ldr	r3, [r1, #4]
   219a6:	4293      	cmp	r3, r2
   219a8:	dc01      	bgt.n	219ae <str_out+0x14>
		ctx->count++;
   219aa:	608d      	str	r5, [r1, #8]
}
   219ac:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   219ae:	3b01      	subs	r3, #1
   219b0:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   219b2:	bf08      	it	eq
   219b4:	2200      	moveq	r2, #0
   219b6:	608d      	str	r5, [r1, #8]
   219b8:	bf0c      	ite	eq
   219ba:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   219bc:	54a0      	strbne	r0, [r4, r2]
   219be:	e7f5      	b.n	219ac <str_out+0x12>

000219c0 <printk>:
{
   219c0:	b40f      	push	{r0, r1, r2, r3}
   219c2:	b507      	push	{r0, r1, r2, lr}
   219c4:	a904      	add	r1, sp, #16
   219c6:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   219ca:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   219cc:	f7e2 fd36 	bl	443c <vprintk>
}
   219d0:	b003      	add	sp, #12
   219d2:	f85d eb04 	ldr.w	lr, [sp], #4
   219d6:	b004      	add	sp, #16
   219d8:	4770      	bx	lr

000219da <snprintk>:
{
   219da:	b40c      	push	{r2, r3}
   219dc:	b507      	push	{r0, r1, r2, lr}
   219de:	ab04      	add	r3, sp, #16
   219e0:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   219e4:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   219e6:	f7e2 fd37 	bl	4458 <vsnprintk>
}
   219ea:	b003      	add	sp, #12
   219ec:	f85d eb04 	ldr.w	lr, [sp], #4
   219f0:	b002      	add	sp, #8
   219f2:	4770      	bx	lr

000219f4 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   219f4:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   219f6:	f013 0307 	ands.w	r3, r3, #7
   219fa:	d105      	bne.n	21a08 <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   219fc:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   219fe:	2b00      	cmp	r3, #0
   21a00:	bf0c      	ite	eq
   21a02:	2000      	moveq	r0, #0
   21a04:	2003      	movne	r0, #3
   21a06:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21a08:	2b02      	cmp	r3, #2
   21a0a:	d105      	bne.n	21a18 <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   21a0c:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   21a0e:	2b00      	cmp	r3, #0
   21a10:	bf14      	ite	ne
   21a12:	2000      	movne	r0, #0
   21a14:	2004      	moveq	r0, #4
   21a16:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   21a18:	2b01      	cmp	r3, #1
   21a1a:	d105      	bne.n	21a28 <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   21a1c:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   21a1e:	2b00      	cmp	r3, #0
   21a20:	bf0c      	ite	eq
   21a22:	2000      	moveq	r0, #0
   21a24:	2005      	movne	r0, #5
   21a26:	4770      	bx	lr
	int evt = EVT_NOP;
   21a28:	2000      	movs	r0, #0
}
   21a2a:	4770      	bx	lr

00021a2c <notify_one>:
{
   21a2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21a30:	460d      	mov	r5, r1
   21a32:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21a34:	4619      	mov	r1, r3
   21a36:	1d28      	adds	r0, r5, #4
{
   21a38:	4690      	mov	r8, r2
   21a3a:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21a3c:	f7ff ff92 	bl	21964 <sys_notify_finalize>
	if (cb) {
   21a40:	4604      	mov	r4, r0
   21a42:	b138      	cbz	r0, 21a54 <notify_one+0x28>
		cb(mgr, cli, state, res);
   21a44:	4633      	mov	r3, r6
   21a46:	4642      	mov	r2, r8
   21a48:	4629      	mov	r1, r5
   21a4a:	4638      	mov	r0, r7
   21a4c:	46a4      	mov	ip, r4
}
   21a4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   21a52:	4760      	bx	ip
}
   21a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021a58 <transition_complete>:
{
   21a58:	b410      	push	{r4}
	__asm__ volatile(
   21a5a:	f04f 0420 	mov.w	r4, #32
   21a5e:	f3ef 8211 	mrs	r2, BASEPRI
   21a62:	f384 8811 	msr	BASEPRI, r4
   21a66:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21a6a:	6141      	str	r1, [r0, #20]
}
   21a6c:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   21a6e:	2101      	movs	r1, #1
   21a70:	f7e2 bd06 	b.w	4480 <process_event>

00021a74 <validate_args>:
{
   21a74:	b510      	push	{r4, lr}
   21a76:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21a78:	b140      	cbz	r0, 21a8c <validate_args+0x18>
   21a7a:	b139      	cbz	r1, 21a8c <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   21a7c:	1d08      	adds	r0, r1, #4
   21a7e:	f7ff ff5d 	bl	2193c <sys_notify_validate>
	if ((rv == 0)
   21a82:	b928      	cbnz	r0, 21a90 <validate_args+0x1c>
	    && ((cli->notify.flags
   21a84:	68a3      	ldr	r3, [r4, #8]
   21a86:	f033 0303 	bics.w	r3, r3, #3
   21a8a:	d001      	beq.n	21a90 <validate_args+0x1c>
		rv = -EINVAL;
   21a8c:	f06f 0015 	mvn.w	r0, #21
}
   21a90:	bd10      	pop	{r4, pc}

00021a92 <onoff_manager_init>:
{
   21a92:	b538      	push	{r3, r4, r5, lr}
   21a94:	460c      	mov	r4, r1
	if ((mgr == NULL)
   21a96:	4605      	mov	r5, r0
   21a98:	b158      	cbz	r0, 21ab2 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21a9a:	b151      	cbz	r1, 21ab2 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21a9c:	680b      	ldr	r3, [r1, #0]
   21a9e:	b143      	cbz	r3, 21ab2 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   21aa0:	684b      	ldr	r3, [r1, #4]
   21aa2:	b133      	cbz	r3, 21ab2 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21aa4:	221c      	movs	r2, #28
   21aa6:	2100      	movs	r1, #0
   21aa8:	f002 fc57 	bl	2435a <memset>
   21aac:	612c      	str	r4, [r5, #16]
	return 0;
   21aae:	2000      	movs	r0, #0
}
   21ab0:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   21ab2:	f06f 0015 	mvn.w	r0, #21
   21ab6:	e7fb      	b.n	21ab0 <onoff_manager_init+0x1e>

00021ab8 <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21ab8:	b570      	push	{r4, r5, r6, lr}
   21aba:	4604      	mov	r4, r0
   21abc:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21abe:	f7ff ffd9 	bl	21a74 <validate_args>

	if (rv < 0) {
   21ac2:	1e05      	subs	r5, r0, #0
   21ac4:	db31      	blt.n	21b2a <onoff_request+0x72>
   21ac6:	f04f 0320 	mov.w	r3, #32
   21aca:	f3ef 8111 	mrs	r1, BASEPRI
   21ace:	f383 8811 	msr	BASEPRI, r3
   21ad2:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21ad6:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21ad8:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21ada:	f64f 75ff 	movw	r5, #65535	; 0xffff
   21ade:	42ab      	cmp	r3, r5
   21ae0:	f000 0207 	and.w	r2, r0, #7
   21ae4:	d02e      	beq.n	21b44 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21ae6:	2a02      	cmp	r2, #2
   21ae8:	d10e      	bne.n	21b08 <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   21aea:	3301      	adds	r3, #1
   21aec:	8363      	strh	r3, [r4, #26]
	rv = state;
   21aee:	4615      	mov	r5, r2
		notify = true;
   21af0:	2301      	movs	r3, #1
	__asm__ volatile(
   21af2:	f381 8811 	msr	BASEPRI, r1
   21af6:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21afa:	b1b3      	cbz	r3, 21b2a <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   21afc:	2300      	movs	r3, #0
   21afe:	4631      	mov	r1, r6
   21b00:	4620      	mov	r0, r4
   21b02:	f7ff ff93 	bl	21a2c <notify_one>
   21b06:	e010      	b.n	21b2a <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   21b08:	0783      	lsls	r3, r0, #30
   21b0a:	d001      	beq.n	21b10 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   21b0c:	2a06      	cmp	r2, #6
   21b0e:	d10e      	bne.n	21b2e <onoff_request+0x76>
	parent->next = child;
   21b10:	2300      	movs	r3, #0
   21b12:	6033      	str	r3, [r6, #0]
	return list->tail;
   21b14:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   21b16:	b993      	cbnz	r3, 21b3e <onoff_request+0x86>
	list->head = node;
   21b18:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   21b1c:	4615      	mov	r5, r2
   21b1e:	b962      	cbnz	r2, 21b3a <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   21b20:	460a      	mov	r2, r1
   21b22:	4620      	mov	r0, r4
   21b24:	2102      	movs	r1, #2
   21b26:	f7e2 fcab 	bl	4480 <process_event>
		}
	}

	return rv;
}
   21b2a:	4628      	mov	r0, r5
   21b2c:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   21b2e:	2a05      	cmp	r2, #5
   21b30:	bf0c      	ite	eq
   21b32:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   21b36:	f06f 0504 	mvnne.w	r5, #4
   21b3a:	2300      	movs	r3, #0
   21b3c:	e7d9      	b.n	21af2 <onoff_request+0x3a>
	parent->next = child;
   21b3e:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21b40:	6066      	str	r6, [r4, #4]
}
   21b42:	e7eb      	b.n	21b1c <onoff_request+0x64>
		rv = -EAGAIN;
   21b44:	f06f 050a 	mvn.w	r5, #10
   21b48:	e7f7      	b.n	21b3a <onoff_request+0x82>

00021b4a <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   21b4a:	b510      	push	{r4, lr}
	__asm__ volatile(
   21b4c:	f04f 0320 	mov.w	r3, #32
   21b50:	f3ef 8211 	mrs	r2, BASEPRI
   21b54:	f383 8811 	msr	BASEPRI, r3
   21b58:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21b5c:	8b04      	ldrh	r4, [r0, #24]
   21b5e:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   21b62:	2c02      	cmp	r4, #2
   21b64:	d00a      	beq.n	21b7c <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   21b66:	2c01      	cmp	r4, #1
   21b68:	bf0c      	ite	eq
   21b6a:	f06f 0004 	mvneq.w	r0, #4
   21b6e:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	__asm__ volatile(
   21b72:	f382 8811 	msr	BASEPRI, r2
   21b76:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   21b7a:	e008      	b.n	21b8e <onoff_release+0x44>
	mgr->refs -= 1U;
   21b7c:	8b43      	ldrh	r3, [r0, #26]
   21b7e:	3b01      	subs	r3, #1
   21b80:	b29b      	uxth	r3, r3
   21b82:	8343      	strh	r3, [r0, #26]
	if (stop) {
   21b84:	b923      	cbnz	r3, 21b90 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   21b86:	4621      	mov	r1, r4
   21b88:	f7e2 fc7a 	bl	4480 <process_event>
	int rv = state;
   21b8c:	4620      	mov	r0, r4
}
   21b8e:	bd10      	pop	{r4, pc}
	int rv = state;
   21b90:	4620      	mov	r0, r4
   21b92:	e7ee      	b.n	21b72 <onoff_release+0x28>

00021b94 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21b94:	4604      	mov	r4, r0
   21b96:	b508      	push	{r3, lr}
   21b98:	4608      	mov	r0, r1
   21b9a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   21b9c:	461a      	mov	r2, r3
   21b9e:	47a0      	blx	r4
	return z_impl_k_current_get();
   21ba0:	f7fe fba8 	bl	202f4 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   21ba4:	f7e6 f8ba 	bl	7d1c <z_impl_k_thread_abort>

00021ba8 <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   21ba8:	b510      	push	{r4, lr}
   21baa:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   21bac:	f04f 33ff 	mov.w	r3, #4294967295
   21bb0:	f04f 32ff 	mov.w	r2, #4294967295
   21bb4:	4620      	mov	r0, r4
   21bb6:	f7fd ffe7 	bl	1fb88 <z_impl_k_queue_get>
   21bba:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   21bbc:	2800      	cmp	r0, #0
   21bbe:	d0f5      	beq.n	21bac <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21bc0:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   21bc2:	6842      	ldr	r2, [r0, #4]
   21bc4:	f3bf 8f5b 	dmb	ish
   21bc8:	e853 1f00 	ldrex	r1, [r3]
   21bcc:	f021 0c01 	bic.w	ip, r1, #1
   21bd0:	e843 ce00 	strex	lr, ip, [r3]
   21bd4:	f1be 0f00 	cmp.w	lr, #0
   21bd8:	d1f6      	bne.n	21bc8 <z_work_q_main+0x20>
   21bda:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   21bde:	07cb      	lsls	r3, r1, #31
   21be0:	d500      	bpl.n	21be4 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   21be2:	4790      	blx	r2
	z_impl_k_yield();
   21be4:	f7fe fae4 	bl	201b0 <z_impl_k_yield>
   21be8:	e7e0      	b.n	21bac <z_work_q_main+0x4>

00021bea <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   21bea:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   21bec:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21bf0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   21bf4:	bf2c      	ite	cs
   21bf6:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   21bfa:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   21bfe:	4770      	bx	lr

00021c00 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   21c00:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   21c04:	6880      	ldr	r0, [r0, #8]
   21c06:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   21c0a:	bf2c      	ite	cs
   21c0c:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   21c10:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   21c14:	4770      	bx	lr

00021c16 <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   21c16:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21c18:	2201      	movs	r2, #1
   21c1a:	f7ff ffe6 	bl	21bea <chunk_field>
}
   21c1e:	40d0      	lsrs	r0, r2
   21c20:	bd08      	pop	{r3, pc}

00021c22 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   21c22:	6883      	ldr	r3, [r0, #8]
   21c24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   21c28:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21c2c:	d308      	bcc.n	21c40 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21c2e:	684b      	ldr	r3, [r1, #4]
		if (used) {
   21c30:	b11a      	cbz	r2, 21c3a <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21c32:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21c36:	604b      	str	r3, [r1, #4]
   21c38:	4770      	bx	lr
   21c3a:	f023 0301 	bic.w	r3, r3, #1
   21c3e:	e7fa      	b.n	21c36 <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21c40:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   21c42:	b11a      	cbz	r2, 21c4c <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21c44:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21c48:	804b      	strh	r3, [r1, #2]
		}
	}
}
   21c4a:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21c4c:	f023 0301 	bic.w	r3, r3, #1
   21c50:	e7fa      	b.n	21c48 <set_chunk_used+0x26>

00021c52 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21c52:	0053      	lsls	r3, r2, #1
   21c54:	2201      	movs	r2, #1
   21c56:	f7ff bfd3 	b.w	21c00 <chunk_set>

00021c5a <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   21c5a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   21c5e:	bf2c      	ite	cs
   21c60:	2008      	movcs	r0, #8
   21c62:	2004      	movcc	r0, #4
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   21c64:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21c66:	3008      	adds	r0, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   21c68:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   21c6c:	fab0 f080 	clz	r0, r0
}
   21c70:	f1c0 001f 	rsb	r0, r0, #31
   21c74:	4770      	bx	lr

00021c76 <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   21c76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21c7a:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   21c7c:	2203      	movs	r2, #3
   21c7e:	460e      	mov	r6, r1
   21c80:	4604      	mov	r4, r0
   21c82:	f7ff ffb2 	bl	21bea <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   21c86:	4286      	cmp	r6, r0
   21c88:	4605      	mov	r5, r0
   21c8a:	f107 0804 	add.w	r8, r7, #4
   21c8e:	d10b      	bne.n	21ca8 <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   21c90:	2301      	movs	r3, #1
   21c92:	fa03 f707 	lsl.w	r7, r3, r7
   21c96:	68e3      	ldr	r3, [r4, #12]
   21c98:	ea23 0307 	bic.w	r3, r3, r7
   21c9c:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   21c9e:	2300      	movs	r3, #0
   21ca0:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   21ca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   21ca8:	4631      	mov	r1, r6
   21caa:	2202      	movs	r2, #2
   21cac:	4620      	mov	r0, r4
   21cae:	f7ff ff9c 	bl	21bea <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   21cb2:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   21cb4:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   21cb6:	4601      	mov	r1, r0
		b->next = second;
   21cb8:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   21cbc:	4620      	mov	r0, r4
   21cbe:	2203      	movs	r2, #3
   21cc0:	f7ff ff9e 	bl	21c00 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21cc4:	4633      	mov	r3, r6
   21cc6:	4629      	mov	r1, r5
   21cc8:	4620      	mov	r0, r4
   21cca:	2202      	movs	r2, #2
}
   21ccc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21cd0:	f7ff bf96 	b.w	21c00 <chunk_set>

00021cd4 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   21cd4:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->len);
   21cd6:	6886      	ldr	r6, [r0, #8]
   21cd8:	460d      	mov	r5, r1
   21cda:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   21cdc:	f7ff ff9b 	bl	21c16 <chunk_size>
   21ce0:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21ce4:	4601      	mov	r1, r0
   21ce6:	d301      	bcc.n	21cec <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   21ce8:	2801      	cmp	r0, #1
   21cea:	d009      	beq.n	21d00 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21cec:	4630      	mov	r0, r6
   21cee:	f7ff ffb4 	bl	21c5a <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   21cf2:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   21cf4:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   21cf6:	4620      	mov	r0, r4
	}
}
   21cf8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   21cfc:	f7ff bfbb 	b.w	21c76 <free_list_remove_bidx>
}
   21d00:	bd70      	pop	{r4, r5, r6, pc}

00021d02 <alloc_chunk>:
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
	int bi = bucket_idx(h, sz);
   21d02:	6883      	ldr	r3, [r0, #8]
{
   21d04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21d08:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   21d0a:	4618      	mov	r0, r3
{
   21d0c:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   21d0e:	f7ff ffa4 	bl	21c5a <bucket_idx.isra.0>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   21d12:	4619      	mov	r1, r3
	int bi = bucket_idx(h, sz);
   21d14:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   21d16:	4618      	mov	r0, r3
   21d18:	f7ff ff9f 	bl	21c5a <bucket_idx.isra.0>
   21d1c:	42a8      	cmp	r0, r5
   21d1e:	da03      	bge.n	21d28 <alloc_chunk+0x26>
		return 0;
   21d20:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   21d22:	4630      	mov	r0, r6
   21d24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   21d28:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   21d2c:	f8da 9010 	ldr.w	r9, [sl, #16]
   21d30:	f1b9 0f00 	cmp.w	r9, #0
   21d34:	d019      	beq.n	21d6a <alloc_chunk+0x68>
   21d36:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   21d38:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   21d3c:	4620      	mov	r0, r4
   21d3e:	4631      	mov	r1, r6
   21d40:	f7ff ff69 	bl	21c16 <chunk_size>
   21d44:	4540      	cmp	r0, r8
   21d46:	d305      	bcc.n	21d54 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   21d48:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   21d4a:	4631      	mov	r1, r6
   21d4c:	4620      	mov	r0, r4
   21d4e:	f7ff ff92 	bl	21c76 <free_list_remove_bidx>
		return c;
   21d52:	e7e6      	b.n	21d22 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   21d54:	2203      	movs	r2, #3
   21d56:	4631      	mov	r1, r6
   21d58:	4620      	mov	r0, r4
   21d5a:	f7ff ff46 	bl	21bea <chunk_field>
		} while (--i && b->next != first);
   21d5e:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   21d60:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   21d64:	d001      	beq.n	21d6a <alloc_chunk+0x68>
   21d66:	4581      	cmp	r9, r0
   21d68:	d1e6      	bne.n	21d38 <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   21d6a:	68e3      	ldr	r3, [r4, #12]
   21d6c:	3501      	adds	r5, #1
   21d6e:	f04f 32ff 	mov.w	r2, #4294967295
   21d72:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   21d74:	401a      	ands	r2, r3
   21d76:	d0d3      	beq.n	21d20 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   21d78:	fa92 f2a2 	rbit	r2, r2
   21d7c:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21d80:	1d13      	adds	r3, r2, #4
   21d82:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   21d86:	e7e0      	b.n	21d4a <alloc_chunk+0x48>

00021d88 <split_chunks>:
{
   21d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21d8c:	4614      	mov	r4, r2
   21d8e:	4605      	mov	r5, r0
   21d90:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   21d92:	f7ff ff40 	bl	21c16 <chunk_size>
	size_t lsz = rc - lc;
   21d96:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   21d9a:	1b37      	subs	r7, r6, r4
   21d9c:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   21d9e:	4642      	mov	r2, r8
   21da0:	4631      	mov	r1, r6
   21da2:	4628      	mov	r0, r5
   21da4:	f7ff ff55 	bl	21c52 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   21da8:	463a      	mov	r2, r7
   21daa:	4621      	mov	r1, r4
   21dac:	4628      	mov	r0, r5
   21dae:	f7ff ff50 	bl	21c52 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21db2:	4643      	mov	r3, r8
   21db4:	2200      	movs	r2, #0
   21db6:	4621      	mov	r1, r4
   21db8:	4628      	mov	r0, r5
   21dba:	f7ff ff21 	bl	21c00 <chunk_set>
	return c + chunk_size(h, c);
   21dbe:	4621      	mov	r1, r4
   21dc0:	4628      	mov	r0, r5
   21dc2:	f7ff ff28 	bl	21c16 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21dc6:	463b      	mov	r3, r7
   21dc8:	1821      	adds	r1, r4, r0
   21dca:	2200      	movs	r2, #0
   21dcc:	4628      	mov	r0, r5
}
   21dce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21dd2:	f7ff bf15 	b.w	21c00 <chunk_set>

00021dd6 <merge_chunks>:
{
   21dd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dda:	4616      	mov	r6, r2
   21ddc:	4604      	mov	r4, r0
   21dde:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21de0:	f7ff ff19 	bl	21c16 <chunk_size>
   21de4:	4631      	mov	r1, r6
   21de6:	4605      	mov	r5, r0
   21de8:	4620      	mov	r0, r4
   21dea:	f7ff ff14 	bl	21c16 <chunk_size>
   21dee:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   21df0:	462a      	mov	r2, r5
   21df2:	4639      	mov	r1, r7
   21df4:	4620      	mov	r0, r4
   21df6:	f7ff ff2c 	bl	21c52 <set_chunk_size>
	return c + chunk_size(h, c);
   21dfa:	4631      	mov	r1, r6
   21dfc:	4620      	mov	r0, r4
   21dfe:	f7ff ff0a 	bl	21c16 <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21e02:	462b      	mov	r3, r5
   21e04:	1831      	adds	r1, r6, r0
   21e06:	2200      	movs	r2, #0
   21e08:	4620      	mov	r0, r4
}
   21e0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21e0e:	f7ff bef7 	b.w	21c00 <chunk_set>

00021e12 <free_list_add>:
{
   21e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->len);
   21e16:	6886      	ldr	r6, [r0, #8]
   21e18:	460d      	mov	r5, r1
   21e1a:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   21e1c:	f7ff fefb 	bl	21c16 <chunk_size>
   21e20:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21e24:	4601      	mov	r1, r0
   21e26:	d301      	bcc.n	21e2c <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   21e28:	2801      	cmp	r0, #1
   21e2a:	d033      	beq.n	21e94 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21e2c:	4630      	mov	r0, r6
   21e2e:	f7ff ff14 	bl	21c5a <bucket_idx.isra.0>
	if (b->next == 0U) {
   21e32:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   21e36:	6916      	ldr	r6, [r2, #16]
   21e38:	b99e      	cbnz	r6, 21e62 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   21e3a:	2301      	movs	r3, #1
   21e3c:	fa03 f000 	lsl.w	r0, r3, r0
   21e40:	68e3      	ldr	r3, [r4, #12]
   21e42:	4303      	orrs	r3, r0
   21e44:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   21e46:	4629      	mov	r1, r5
		b->next = c;
   21e48:	6115      	str	r5, [r2, #16]
   21e4a:	462b      	mov	r3, r5
   21e4c:	2202      	movs	r2, #2
   21e4e:	4620      	mov	r0, r4
   21e50:	f7ff fed6 	bl	21c00 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   21e54:	2203      	movs	r2, #3
   21e56:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   21e58:	4620      	mov	r0, r4
}
   21e5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21e5e:	f7ff becf 	b.w	21c00 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   21e62:	2202      	movs	r2, #2
   21e64:	4631      	mov	r1, r6
   21e66:	4620      	mov	r0, r4
   21e68:	f7ff febf 	bl	21bea <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   21e6c:	4629      	mov	r1, r5
   21e6e:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   21e70:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   21e72:	4620      	mov	r0, r4
   21e74:	f7ff fec4 	bl	21c00 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   21e78:	2203      	movs	r2, #3
   21e7a:	4633      	mov	r3, r6
   21e7c:	4629      	mov	r1, r5
   21e7e:	4620      	mov	r0, r4
   21e80:	f7ff febe 	bl	21c00 <chunk_set>
   21e84:	4639      	mov	r1, r7
   21e86:	462b      	mov	r3, r5
   21e88:	4620      	mov	r0, r4
   21e8a:	f7ff feb9 	bl	21c00 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21e8e:	2202      	movs	r2, #2
   21e90:	4631      	mov	r1, r6
   21e92:	e7e1      	b.n	21e58 <free_list_add+0x46>
   21e94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021e98 <free_chunk>:
{
   21e98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21e9a:	460c      	mov	r4, r1
   21e9c:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   21e9e:	f7ff feba 	bl	21c16 <chunk_size>
   21ea2:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21ea4:	2201      	movs	r2, #1
   21ea6:	4631      	mov	r1, r6
   21ea8:	4628      	mov	r0, r5
   21eaa:	f7ff fe9e 	bl	21bea <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   21eae:	07c3      	lsls	r3, r0, #31
   21eb0:	d40c      	bmi.n	21ecc <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   21eb2:	4631      	mov	r1, r6
   21eb4:	4628      	mov	r0, r5
   21eb6:	f7ff ff0d 	bl	21cd4 <free_list_remove>
	return c + chunk_size(h, c);
   21eba:	4621      	mov	r1, r4
   21ebc:	4628      	mov	r0, r5
   21ebe:	f7ff feaa 	bl	21c16 <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   21ec2:	4621      	mov	r1, r4
   21ec4:	1822      	adds	r2, r4, r0
   21ec6:	4628      	mov	r0, r5
   21ec8:	f7ff ff85 	bl	21dd6 <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   21ecc:	2200      	movs	r2, #0
   21ece:	4621      	mov	r1, r4
   21ed0:	4628      	mov	r0, r5
   21ed2:	f7ff fe8a 	bl	21bea <chunk_field>
   21ed6:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   21ed8:	2201      	movs	r2, #1
   21eda:	4639      	mov	r1, r7
   21edc:	4628      	mov	r0, r5
   21ede:	f7ff fe84 	bl	21bea <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   21ee2:	ea10 0602 	ands.w	r6, r0, r2
   21ee6:	d113      	bne.n	21f10 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   21ee8:	4639      	mov	r1, r7
   21eea:	4628      	mov	r0, r5
   21eec:	f7ff fef2 	bl	21cd4 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   21ef0:	4621      	mov	r1, r4
   21ef2:	4632      	mov	r2, r6
   21ef4:	4628      	mov	r0, r5
   21ef6:	f7ff fe78 	bl	21bea <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   21efa:	4622      	mov	r2, r4
   21efc:	1a21      	subs	r1, r4, r0
   21efe:	4628      	mov	r0, r5
   21f00:	f7ff ff69 	bl	21dd6 <merge_chunks>
   21f04:	4621      	mov	r1, r4
   21f06:	4632      	mov	r2, r6
   21f08:	4628      	mov	r0, r5
   21f0a:	f7ff fe6e 	bl	21bea <chunk_field>
   21f0e:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   21f10:	4621      	mov	r1, r4
   21f12:	4628      	mov	r0, r5
}
   21f14:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   21f18:	f7ff bf7b 	b.w	21e12 <free_list_add>

00021f1c <sys_heap_free>:
{
   21f1c:	b510      	push	{r4, lr}
	if (mem == NULL) {
   21f1e:	b191      	cbz	r1, 21f46 <sys_heap_free+0x2a>
   21f20:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   21f22:	6883      	ldr	r3, [r0, #8]
   21f24:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21f28:	bf2c      	ite	cs
   21f2a:	2408      	movcs	r4, #8
   21f2c:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   21f2e:	1b0c      	subs	r4, r1, r4
   21f30:	1a24      	subs	r4, r4, r0
   21f32:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   21f34:	4621      	mov	r1, r4
   21f36:	2200      	movs	r2, #0
   21f38:	f7ff fe73 	bl	21c22 <set_chunk_used>
	free_chunk(h, c);
   21f3c:	4621      	mov	r1, r4
}
   21f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   21f42:	f7ff bfa9 	b.w	21e98 <free_chunk>
}
   21f46:	bd10      	pop	{r4, pc}

00021f48 <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   21f48:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   21f4a:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   21f4c:	b909      	cbnz	r1, 21f52 <sys_heap_alloc+0xa>
		return NULL;
   21f4e:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   21f50:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   21f52:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   21f54:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   21f58:	d9f9      	bls.n	21f4e <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   21f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21f5e:	bf2c      	ite	cs
   21f60:	2208      	movcs	r2, #8
   21f62:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21f64:	1dcc      	adds	r4, r1, #7
   21f66:	4414      	add	r4, r2
   21f68:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   21f6a:	4621      	mov	r1, r4
   21f6c:	4630      	mov	r0, r6
   21f6e:	f7ff fec8 	bl	21d02 <alloc_chunk>
	if (c == 0U) {
   21f72:	4605      	mov	r5, r0
   21f74:	2800      	cmp	r0, #0
   21f76:	d0ea      	beq.n	21f4e <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   21f78:	4601      	mov	r1, r0
   21f7a:	4630      	mov	r0, r6
   21f7c:	f7ff fe4b 	bl	21c16 <chunk_size>
   21f80:	42a0      	cmp	r0, r4
   21f82:	d909      	bls.n	21f98 <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   21f84:	442c      	add	r4, r5
   21f86:	4629      	mov	r1, r5
   21f88:	4630      	mov	r0, r6
   21f8a:	4622      	mov	r2, r4
   21f8c:	f7ff fefc 	bl	21d88 <split_chunks>
		free_list_add(h, c + chunk_sz);
   21f90:	4621      	mov	r1, r4
   21f92:	4630      	mov	r0, r6
   21f94:	f7ff ff3d 	bl	21e12 <free_list_add>
	set_chunk_used(h, c, true);
   21f98:	4629      	mov	r1, r5
   21f9a:	4630      	mov	r0, r6
   21f9c:	2201      	movs	r2, #1
   21f9e:	f7ff fe40 	bl	21c22 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   21fa2:	68b3      	ldr	r3, [r6, #8]
   21fa4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   21fa8:	bf2c      	ite	cs
   21faa:	2308      	movcs	r3, #8
   21fac:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   21fae:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   21fb2:	4428      	add	r0, r5
	return chunk_mem(h, c);
   21fb4:	e7cc      	b.n	21f50 <sys_heap_alloc+0x8>

00021fb6 <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   21fb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   21fba:	6806      	ldr	r6, [r0, #0]
{
   21fbc:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
   21fbe:	424a      	negs	r2, r1
   21fc0:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
   21fc4:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->len);
   21fc8:	68b5      	ldr	r5, [r6, #8]
{
   21fca:	460b      	mov	r3, r1
	if (align != rewind) {
   21fcc:	d00f      	beq.n	21fee <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   21fce:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21fd2:	bf34      	ite	cc
   21fd4:	2104      	movcc	r1, #4
   21fd6:	2108      	movcs	r1, #8
   21fd8:	42b9      	cmp	r1, r7
   21fda:	460a      	mov	r2, r1
   21fdc:	46b9      	mov	r9, r7
   21fde:	bf28      	it	cs
   21fe0:	463a      	movcs	r2, r7
		align -= rewind;
   21fe2:	1bdf      	subs	r7, r3, r7
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   21fe4:	b994      	cbnz	r4, 2200c <sys_heap_aligned_alloc+0x56>
		return NULL;
   21fe6:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   21fe8:	4628      	mov	r0, r5
   21fea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   21fee:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   21ff2:	bf34      	ite	cc
   21ff4:	2204      	movcc	r2, #4
   21ff6:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   21ff8:	4291      	cmp	r1, r2
   21ffa:	d804      	bhi.n	22006 <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   21ffc:	4621      	mov	r1, r4
}
   21ffe:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   22002:	f7ff bfa1 	b.w	21f48 <sys_heap_alloc>
		rewind = 0;
   22006:	f04f 0900 	mov.w	r9, #0
   2200a:	e7eb      	b.n	21fe4 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   2200c:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   22010:	d9e9      	bls.n	21fe6 <sys_heap_aligned_alloc+0x30>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   22012:	1de1      	adds	r1, r4, #7
   22014:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   22018:	4439      	add	r1, r7
   2201a:	bf2c      	ite	cs
   2201c:	2308      	movcs	r3, #8
   2201e:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22020:	1a89      	subs	r1, r1, r2
   22022:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   22024:	08c9      	lsrs	r1, r1, #3
   22026:	4630      	mov	r0, r6
   22028:	f7ff fe6b 	bl	21d02 <alloc_chunk>
	if (c0 == 0) {
   2202c:	4680      	mov	r8, r0
   2202e:	2800      	cmp	r0, #0
   22030:	d0d9      	beq.n	21fe6 <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   22032:	68b3      	ldr	r3, [r6, #8]
   22034:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   22038:	bf2c      	ite	cs
   2203a:	2308      	movcs	r3, #8
   2203c:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
   2203e:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   22042:	441d      	add	r5, r3
   22044:	1e7a      	subs	r2, r7, #1
   22046:	4435      	add	r5, r6
   22048:	427f      	negs	r7, r7
   2204a:	4415      	add	r5, r2
   2204c:	403d      	ands	r5, r7
   2204e:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   22052:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22054:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   22056:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22058:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   2205a:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   2205e:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   22060:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22064:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   22068:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   2206c:	d208      	bcs.n	22080 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   2206e:	4601      	mov	r1, r0
   22070:	463a      	mov	r2, r7
   22072:	4630      	mov	r0, r6
   22074:	f7ff fe88 	bl	21d88 <split_chunks>
		free_list_add(h, c0);
   22078:	4641      	mov	r1, r8
   2207a:	4630      	mov	r0, r6
   2207c:	f7ff fec9 	bl	21e12 <free_list_add>
	return c + chunk_size(h, c);
   22080:	4639      	mov	r1, r7
   22082:	4630      	mov	r0, r6
   22084:	f7ff fdc7 	bl	21c16 <chunk_size>
   22088:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   2208a:	4284      	cmp	r4, r0
   2208c:	d208      	bcs.n	220a0 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   2208e:	4639      	mov	r1, r7
   22090:	4630      	mov	r0, r6
   22092:	4622      	mov	r2, r4
   22094:	f7ff fe78 	bl	21d88 <split_chunks>
		free_list_add(h, c_end);
   22098:	4621      	mov	r1, r4
   2209a:	4630      	mov	r0, r6
   2209c:	f7ff feb9 	bl	21e12 <free_list_add>
	set_chunk_used(h, c, true);
   220a0:	2201      	movs	r2, #1
   220a2:	4639      	mov	r1, r7
   220a4:	4630      	mov	r0, r6
   220a6:	f7ff fdbc 	bl	21c22 <set_chunk_used>
	return mem;
   220aa:	e79d      	b.n	21fe8 <sys_heap_aligned_alloc+0x32>

000220ac <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   220ac:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   220b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   220b2:	bf2c      	ite	cs
   220b4:	2408      	movcs	r4, #8
   220b6:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   220b8:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   220ba:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   220bc:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   220be:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   220c2:	f024 0407 	bic.w	r4, r4, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   220c6:	2200      	movs	r2, #0
   220c8:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   220ca:	1ba4      	subs	r4, r4, r6
	heap->heap = h;
   220cc:	6006      	str	r6, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   220ce:	08e4      	lsrs	r4, r4, #3
	h->chunk0_hdr_area = 0;
   220d0:	e9c6 2300 	strd	r2, r3, [r6]
	h->len = buf_sz;
	h->avail_buckets = 0;
   220d4:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   220d6:	4621      	mov	r1, r4
	h->len = buf_sz;
   220d8:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   220da:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   220dc:	4620      	mov	r0, r4
   220de:	f7ff fdbc 	bl	21c5a <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   220e2:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   220e4:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   220e6:	1c41      	adds	r1, r0, #1
   220e8:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   220ea:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   220ee:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   220f0:	428b      	cmp	r3, r1
   220f2:	db28      	blt.n	22146 <sys_heap_init+0x9a>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   220f4:	462a      	mov	r2, r5
   220f6:	4630      	mov	r0, r6
   220f8:	2100      	movs	r1, #0
   220fa:	f7ff fdaa 	bl	21c52 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   220fe:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   22100:	4630      	mov	r0, r6
   22102:	2201      	movs	r2, #1
   22104:	2100      	movs	r1, #0
   22106:	f7ff fd8c 	bl	21c22 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   2210a:	463a      	mov	r2, r7
   2210c:	4629      	mov	r1, r5
   2210e:	f7ff fda0 	bl	21c52 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   22112:	462b      	mov	r3, r5
   22114:	2200      	movs	r2, #0
   22116:	4629      	mov	r1, r5
   22118:	4630      	mov	r0, r6
   2211a:	f7ff fd71 	bl	21c00 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   2211e:	4621      	mov	r1, r4
   22120:	4630      	mov	r0, r6
   22122:	f7ff fd96 	bl	21c52 <set_chunk_size>
   22126:	463b      	mov	r3, r7
   22128:	4621      	mov	r1, r4
   2212a:	4630      	mov	r0, r6
   2212c:	2200      	movs	r2, #0
   2212e:	f7ff fd67 	bl	21c00 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   22132:	4621      	mov	r1, r4
   22134:	4630      	mov	r0, r6
   22136:	2201      	movs	r2, #1
   22138:	f7ff fd73 	bl	21c22 <set_chunk_used>

	free_list_add(h, chunk0_size);
   2213c:	4629      	mov	r1, r5
}
   2213e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   22142:	f7ff be66 	b.w	21e12 <free_list_add>
		h->buckets[i].next = 0;
   22146:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   2214a:	3301      	adds	r3, #1
   2214c:	e7d0      	b.n	220f0 <sys_heap_init+0x44>

0002214e <_ldiv5>:
	uint32_t v_lo = *v;
   2214e:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   22152:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   22154:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   22158:	fba2 2403 	umull	r2, r4, r2, r3
   2215c:	18d5      	adds	r5, r2, r3
   2215e:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   22162:	fba1 1303 	umull	r1, r3, r1, r3
   22166:	1852      	adds	r2, r2, r1
   22168:	eb44 0403 	adc.w	r4, r4, r3
   2216c:	1952      	adds	r2, r2, r5
   2216e:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   22172:	1889      	adds	r1, r1, r2
   22174:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   22178:	e9c0 1300 	strd	r1, r3, [r0]
}
   2217c:	bd30      	pop	{r4, r5, pc}

0002217e <_get_digit>:
	if (*digit_count > 0) {
   2217e:	680a      	ldr	r2, [r1, #0]
   22180:	2a00      	cmp	r2, #0
{
   22182:	b510      	push	{r4, lr}
   22184:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   22186:	dd0f      	ble.n	221a8 <_get_digit+0x2a>
		--*digit_count;
   22188:	3a01      	subs	r2, #1
   2218a:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   2218c:	681a      	ldr	r2, [r3, #0]
   2218e:	6844      	ldr	r4, [r0, #4]
   22190:	200a      	movs	r0, #10
   22192:	fba2 1200 	umull	r1, r2, r2, r0
   22196:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   2219a:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   2219c:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   221a0:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   221a4:	3030      	adds	r0, #48	; 0x30
}
   221a6:	bd10      	pop	{r4, pc}
		rval = '0';
   221a8:	2030      	movs	r0, #48	; 0x30
   221aa:	e7fc      	b.n	221a6 <_get_digit+0x28>

000221ac <encode_uint>:
{
   221ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   221b0:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   221b2:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   221b4:	2b6f      	cmp	r3, #111	; 0x6f
{
   221b6:	4680      	mov	r8, r0
   221b8:	460f      	mov	r7, r1
   221ba:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   221bc:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   221c0:	d029      	beq.n	22216 <encode_uint+0x6a>
   221c2:	d824      	bhi.n	2220e <encode_uint+0x62>
		return 16;
   221c4:	2b58      	cmp	r3, #88	; 0x58
   221c6:	bf14      	ite	ne
   221c8:	260a      	movne	r6, #10
   221ca:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   221cc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   221d0:	4632      	mov	r2, r6
   221d2:	2300      	movs	r3, #0
   221d4:	4640      	mov	r0, r8
   221d6:	4639      	mov	r1, r7
   221d8:	f7de fe56 	bl	e88 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   221dc:	2a09      	cmp	r2, #9
   221de:	b2d4      	uxtb	r4, r2
   221e0:	d81e      	bhi.n	22220 <encode_uint+0x74>
   221e2:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   221e4:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   221e6:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   221e8:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   221ec:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   221f0:	d301      	bcc.n	221f6 <encode_uint+0x4a>
   221f2:	45d1      	cmp	r9, sl
   221f4:	d811      	bhi.n	2221a <encode_uint+0x6e>
	if (conv->flag_hash) {
   221f6:	782b      	ldrb	r3, [r5, #0]
   221f8:	069b      	lsls	r3, r3, #26
   221fa:	d505      	bpl.n	22208 <encode_uint+0x5c>
		if (radix == 8) {
   221fc:	2e08      	cmp	r6, #8
   221fe:	d115      	bne.n	2222c <encode_uint+0x80>
			conv->altform_0 = true;
   22200:	78ab      	ldrb	r3, [r5, #2]
   22202:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   22206:	70ab      	strb	r3, [r5, #2]
}
   22208:	4648      	mov	r0, r9
   2220a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   2220e:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   22212:	2b70      	cmp	r3, #112	; 0x70
   22214:	e7d7      	b.n	221c6 <encode_uint+0x1a>
	switch (specifier) {
   22216:	2608      	movs	r6, #8
   22218:	e7d8      	b.n	221cc <encode_uint+0x20>
		value /= radix;
   2221a:	4680      	mov	r8, r0
   2221c:	460f      	mov	r7, r1
   2221e:	e7d7      	b.n	221d0 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22220:	f1bb 0f19 	cmp.w	fp, #25
   22224:	bf94      	ite	ls
   22226:	3437      	addls	r4, #55	; 0x37
   22228:	3457      	addhi	r4, #87	; 0x57
   2222a:	e7db      	b.n	221e4 <encode_uint+0x38>
		} else if (radix == 16) {
   2222c:	2e10      	cmp	r6, #16
   2222e:	d1eb      	bne.n	22208 <encode_uint+0x5c>
			conv->altform_0c = true;
   22230:	78ab      	ldrb	r3, [r5, #2]
   22232:	f043 0310 	orr.w	r3, r3, #16
   22236:	e7e6      	b.n	22206 <encode_uint+0x5a>

00022238 <outs>:
{
   22238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2223c:	4607      	mov	r7, r0
   2223e:	4688      	mov	r8, r1
   22240:	4615      	mov	r5, r2
   22242:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   22244:	4614      	mov	r4, r2
   22246:	42b4      	cmp	r4, r6
   22248:	eba4 0005 	sub.w	r0, r4, r5
   2224c:	d302      	bcc.n	22254 <outs+0x1c>
   2224e:	b93e      	cbnz	r6, 22260 <outs+0x28>
   22250:	7823      	ldrb	r3, [r4, #0]
   22252:	b12b      	cbz	r3, 22260 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   22254:	f814 0b01 	ldrb.w	r0, [r4], #1
   22258:	4641      	mov	r1, r8
   2225a:	47b8      	blx	r7
		if (rc < 0) {
   2225c:	2800      	cmp	r0, #0
   2225e:	daf2      	bge.n	22246 <outs+0xe>
}
   22260:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022264 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED_ZEPHYR_INT_TYPES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   22264:	4770      	bx	lr

00022266 <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   22266:	2300      	movs	r3, #0
	list->head = NULL;
   22268:	e9c0 3300 	strd	r3, r3, [r0]
}
   2226c:	4770      	bx	lr

0002226e <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   2226e:	6803      	ldr	r3, [r0, #0]
   22270:	b923      	cbnz	r3, 2227c <log_list_add_tail+0xe>
		list->head = msg;
   22272:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   22274:	2300      	movs	r3, #0
	list->tail = msg;
   22276:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   22278:	600b      	str	r3, [r1, #0]
}
   2227a:	4770      	bx	lr
		list->tail->next = msg;
   2227c:	6843      	ldr	r3, [r0, #4]
   2227e:	6019      	str	r1, [r3, #0]
   22280:	e7f8      	b.n	22274 <log_list_add_tail+0x6>

00022282 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   22282:	6800      	ldr	r0, [r0, #0]
   22284:	4770      	bx	lr

00022286 <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   22286:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   22288:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   2228a:	b108      	cbz	r0, 22290 <log_list_head_get+0xa>
		list->head = list->head->next;
   2228c:	6802      	ldr	r2, [r0, #0]
   2228e:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   22290:	4770      	bx	lr

00022292 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   22292:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   22294:	f7e3 fb18 	bl	58c8 <log_msg_chunk_alloc>

	if (msg != NULL) {
   22298:	b118      	cbz	r0, 222a2 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   2229a:	2301      	movs	r3, #1
   2229c:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   2229e:	2300      	movs	r3, #0
   222a0:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   222a2:	bd08      	pop	{r3, pc}

000222a4 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   222a4:	f7e4 bf82 	b.w	71ac <z_timer_cycle_get_32>

000222a8 <dummy_timestamp>:
   222a8:	2000      	movs	r0, #0
   222aa:	4770      	bx	lr

000222ac <z_log_get_s_mask>:
{
   222ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   222ae:	4605      	mov	r5, r0
	uint32_t mask = 0;
   222b0:	2000      	movs	r0, #0
	uint32_t arg = 0;
   222b2:	4603      	mov	r3, r0
	bool arm = false;
   222b4:	4602      	mov	r2, r0
				mask |= BIT(arg);
   222b6:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   222b8:	f815 4b01 	ldrb.w	r4, [r5], #1
   222bc:	b10c      	cbz	r4, 222c2 <z_log_get_s_mask+0x16>
   222be:	428b      	cmp	r3, r1
   222c0:	d300      	bcc.n	222c4 <z_log_get_s_mask+0x18>
}
   222c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   222c4:	2c25      	cmp	r4, #37	; 0x25
   222c6:	d102      	bne.n	222ce <z_log_get_s_mask+0x22>
			arm = !arm;
   222c8:	f082 0201 	eor.w	r2, r2, #1
   222cc:	e7f4      	b.n	222b8 <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   222ce:	2a00      	cmp	r2, #0
   222d0:	d0f2      	beq.n	222b8 <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   222d2:	f044 0620 	orr.w	r6, r4, #32
   222d6:	3e61      	subs	r6, #97	; 0x61
   222d8:	2e19      	cmp	r6, #25
   222da:	d8ed      	bhi.n	222b8 <z_log_get_s_mask+0xc>
			if (curr == 's') {
   222dc:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   222de:	bf04      	itt	eq
   222e0:	fa07 f203 	lsleq.w	r2, r7, r3
   222e4:	4310      	orreq	r0, r2
			arg++;
   222e6:	3301      	adds	r3, #1
			arm = false;
   222e8:	2200      	movs	r2, #0
   222ea:	e7e5      	b.n	222b8 <z_log_get_s_mask+0xc>

000222ec <log_0>:
{
   222ec:	b538      	push	{r3, r4, r5, lr}
   222ee:	4605      	mov	r5, r0
   222f0:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   222f2:	f7ff ffce 	bl	22292 <z_log_msg_std_alloc>

	if (msg != NULL) {
   222f6:	b128      	cbz	r0, 22304 <log_0+0x18>
		msg->str = str;
   222f8:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   222fa:	4621      	mov	r1, r4
}
   222fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   22300:	f7e3 ba20 	b.w	5744 <msg_finalize>
}
   22304:	bd38      	pop	{r3, r4, r5, pc}

00022306 <log_1>:
{
   22306:	b570      	push	{r4, r5, r6, lr}
   22308:	4606      	mov	r6, r0
   2230a:	460d      	mov	r5, r1
   2230c:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2230e:	f7ff ffc0 	bl	22292 <z_log_msg_std_alloc>

	if (msg != NULL) {
   22312:	b158      	cbz	r0, 2232c <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   22314:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   22316:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   22318:	2101      	movs	r1, #1
   2231a:	f361 1207 	bfi	r2, r1, #4, #4
   2231e:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   22320:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   22322:	4621      	mov	r1, r4
}
   22324:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   22328:	f7e3 ba0c 	b.w	5744 <msg_finalize>
}
   2232c:	bd70      	pop	{r4, r5, r6, pc}

0002232e <log_2>:
{
   2232e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22332:	4680      	mov	r8, r0
   22334:	460f      	mov	r7, r1
   22336:	4616      	mov	r6, r2
   22338:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2233a:	f7ff ffaa 	bl	22292 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2233e:	b168      	cbz	r0, 2235c <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   22340:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   22342:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   22346:	2202      	movs	r2, #2
   22348:	f362 1307 	bfi	r3, r2, #4, #4
   2234c:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   2234e:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   22352:	4629      	mov	r1, r5
}
   22354:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   22358:	f7e3 b9f4 	b.w	5744 <msg_finalize>
}
   2235c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022360 <log_3>:
{
   22360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22364:	4680      	mov	r8, r0
   22366:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   2236a:	460f      	mov	r7, r1
   2236c:	4616      	mov	r6, r2
   2236e:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   22370:	f7ff ff8f 	bl	22292 <z_log_msg_std_alloc>

	if (msg != NULL) {
   22374:	b170      	cbz	r0, 22394 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   22376:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   22378:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   2237c:	2203      	movs	r2, #3
   2237e:	f362 1307 	bfi	r3, r2, #4, #4
   22382:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   22384:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   22388:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   2238a:	4649      	mov	r1, r9
}
   2238c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   22390:	f7e3 b9d8 	b.w	5744 <msg_finalize>
}
   22394:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00022398 <log_n>:
{
   22398:	b510      	push	{r4, lr}
   2239a:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   2239c:	f000 f8a1 	bl	224e2 <log_msg_create_n>
		if (msg == NULL) {
   223a0:	b120      	cbz	r0, 223ac <log_n+0x14>
		msg_finalize(msg, src_level);
   223a2:	4621      	mov	r1, r4
}
   223a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   223a8:	f7e3 b9cc 	b.w	5744 <msg_finalize>
}
   223ac:	bd10      	pop	{r4, pc}

000223ae <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   223ae:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   223b2:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   223b4:	8903      	ldrh	r3, [r0, #8]
{
   223b6:	f89d 7020 	ldrb.w	r7, [sp, #32]
   223ba:	460e      	mov	r6, r1
   223bc:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   223be:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   223c2:	42a2      	cmp	r2, r4
   223c4:	d803      	bhi.n	223ce <log_msg_hexdump_data_op+0x20>
		*length = 0;
   223c6:	2300      	movs	r3, #0
   223c8:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   223ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   223ce:	680b      	ldr	r3, [r1, #0]
   223d0:	4423      	add	r3, r4
   223d2:	4293      	cmp	r3, r2
		*length = available_len - offset;
   223d4:	bf84      	itt	hi
   223d6:	1b13      	subhi	r3, r2, r4
   223d8:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   223da:	2a0c      	cmp	r2, #12
	req_len = *length;
   223dc:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   223e0:	d92a      	bls.n	22438 <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   223e2:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   223e4:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   223e8:	d82d      	bhi.n	22446 <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   223ea:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   223ec:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   223ee:	454a      	cmp	r2, r9
   223f0:	bf28      	it	cs
   223f2:	464a      	movcs	r2, r9
   223f4:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   223f6:	4420      	add	r0, r4
		if (put_op) {
   223f8:	b317      	cbz	r7, 22440 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   223fa:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   223fc:	f001 ff82 	bl	24304 <memcpy>
		req_len -= cpy_len;
   22400:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   22404:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   22406:	f1b9 0f00 	cmp.w	r9, #0
   2240a:	d0de      	beq.n	223ca <log_msg_hexdump_data_op+0x1c>
   2240c:	f1b8 0f00 	cmp.w	r8, #0
   22410:	d0db      	beq.n	223ca <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   22412:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   22416:	454d      	cmp	r5, r9
   22418:	bf28      	it	cs
   2241a:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   2241c:	1d20      	adds	r0, r4, #4
   2241e:	4440      	add	r0, r8
   22420:	462a      	mov	r2, r5
		if (put_op) {
   22422:	b1bf      	cbz	r7, 22454 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   22424:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   22426:	f001 ff6d 	bl	24304 <memcpy>
		req_len -= cpy_len;
   2242a:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   2242e:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   22432:	442e      	add	r6, r5
		offset = 0;
   22434:	2400      	movs	r4, #0
   22436:	e7e6      	b.n	22406 <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   22438:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   2243a:	f04f 0800 	mov.w	r8, #0
   2243e:	e7d6      	b.n	223ee <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   22440:	4601      	mov	r1, r0
   22442:	4630      	mov	r0, r6
   22444:	e7da      	b.n	223fc <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   22446:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   22448:	2c1b      	cmp	r4, #27
   2244a:	d9dc      	bls.n	22406 <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   2244c:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   22450:	3c1c      	subs	r4, #28
   22452:	e7f9      	b.n	22448 <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   22454:	4601      	mov	r1, r0
   22456:	4630      	mov	r0, r6
   22458:	e7e5      	b.n	22426 <log_msg_hexdump_data_op+0x78>

0002245a <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   2245a:	3004      	adds	r0, #4
   2245c:	f3bf 8f5b 	dmb	ish
   22460:	e850 3f00 	ldrex	r3, [r0]
   22464:	3301      	adds	r3, #1
   22466:	e840 3200 	strex	r2, r3, [r0]
   2246a:	2a00      	cmp	r2, #0
   2246c:	d1f8      	bne.n	22460 <log_msg_get+0x6>
   2246e:	f3bf 8f5b 	dmb	ish
}
   22472:	4770      	bx	lr

00022474 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   22474:	7a40      	ldrb	r0, [r0, #9]
}
   22476:	0900      	lsrs	r0, r0, #4
   22478:	4770      	bx	lr

0002247a <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   2247a:	7a43      	ldrb	r3, [r0, #9]
   2247c:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   22480:	ea4f 1213 	mov.w	r2, r3, lsr #4
   22484:	d216      	bcs.n	224b4 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   22486:	2a03      	cmp	r2, #3
   22488:	d803      	bhi.n	22492 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   2248a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2248e:	6940      	ldr	r0, [r0, #20]
   22490:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   22492:	2901      	cmp	r1, #1
   22494:	d803      	bhi.n	2249e <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   22496:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   2249a:	6980      	ldr	r0, [r0, #24]
   2249c:	4770      	bx	lr
	cont = msg->payload.ext.next;
   2249e:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   224a0:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   224a2:	2906      	cmp	r1, #6
   224a4:	d803      	bhi.n	224ae <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   224a6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   224aa:	6848      	ldr	r0, [r1, #4]
   224ac:	4770      	bx	lr
		cont = cont->next;
   224ae:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   224b0:	3907      	subs	r1, #7
		cont = cont->next;
   224b2:	e7f6      	b.n	224a2 <log_msg_arg_get+0x28>
		return 0;
   224b4:	2000      	movs	r0, #0
}
   224b6:	4770      	bx	lr

000224b8 <log_msg_put>:
{
   224b8:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   224ba:	1d02      	adds	r2, r0, #4
   224bc:	f3bf 8f5b 	dmb	ish
   224c0:	e852 1f00 	ldrex	r1, [r2]
   224c4:	3901      	subs	r1, #1
   224c6:	e842 1c00 	strex	ip, r1, [r2]
   224ca:	f1bc 0f00 	cmp.w	ip, #0
   224ce:	d1f7      	bne.n	224c0 <log_msg_put+0x8>
   224d0:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   224d4:	685b      	ldr	r3, [r3, #4]
   224d6:	b90b      	cbnz	r3, 224dc <log_msg_put+0x24>
		msg_free(msg);
   224d8:	f7e3 ba0a 	b.w	58f0 <msg_free>
}
   224dc:	4770      	bx	lr

000224de <log_msg_str_get>:
}
   224de:	6900      	ldr	r0, [r0, #16]
   224e0:	4770      	bx	lr

000224e2 <log_msg_create_n>:
{
   224e2:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   224e6:	4680      	mov	r8, r0
   224e8:	460f      	mov	r7, r1
   224ea:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   224ec:	f7e3 f9ec 	bl	58c8 <log_msg_chunk_alloc>
	if (msg != NULL) {
   224f0:	4604      	mov	r4, r0
   224f2:	b358      	cbz	r0, 2254c <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   224f4:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   224f6:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   224fa:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   224fc:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   224fe:	f8a0 a008 	strh.w	sl, [r0, #8]
   22502:	d90c      	bls.n	2251e <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   22504:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   22506:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   2250a:	f043 0302 	orr.w	r3, r3, #2
   2250e:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   22510:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   22514:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   22518:	f1b9 0f00 	cmp.w	r9, #0
   2251c:	dc0e      	bgt.n	2253c <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   2251e:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   22520:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   22524:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   22528:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   2252a:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2252c:	d819      	bhi.n	22562 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   2252e:	00aa      	lsls	r2, r5, #2
   22530:	4639      	mov	r1, r7
   22532:	f104 0014 	add.w	r0, r4, #20
   22536:	f001 fee5 	bl	24304 <memcpy>
	while (nargs != 0U) {
   2253a:	e007      	b.n	2254c <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   2253c:	f7e3 f9c4 	bl	58c8 <log_msg_chunk_alloc>
		if (cont == NULL) {
   22540:	4606      	mov	r6, r0
   22542:	b930      	cbnz	r0, 22552 <log_msg_create_n+0x70>
			msg_free(msg);
   22544:	4620      	mov	r0, r4
   22546:	f7e3 f9d3 	bl	58f0 <msg_free>
			return NULL;
   2254a:	4634      	mov	r4, r6
}
   2254c:	4620      	mov	r0, r4
   2254e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   22552:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   22556:	f1a9 0907 	sub.w	r9, r9, #7
   2255a:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   2255e:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   22560:	e7da      	b.n	22518 <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   22562:	4639      	mov	r1, r7
   22564:	2208      	movs	r2, #8
   22566:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   2256a:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   2256e:	f001 fec9 	bl	24304 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   22572:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   22574:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   22576:	2d07      	cmp	r5, #7
   22578:	462e      	mov	r6, r5
   2257a:	bf28      	it	cs
   2257c:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   2257e:	ea4f 0986 	mov.w	r9, r6, lsl #2
   22582:	4639      	mov	r1, r7
   22584:	f108 0004 	add.w	r0, r8, #4
   22588:	464a      	mov	r2, r9
   2258a:	f001 febb 	bl	24304 <memcpy>
	while (nargs != 0U) {
   2258e:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   22590:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   22594:	444f      	add	r7, r9
	while (nargs != 0U) {
   22596:	d1ee      	bne.n	22576 <log_msg_create_n+0x94>
   22598:	e7d8      	b.n	2254c <log_msg_create_n+0x6a>

0002259a <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   2259a:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   2259c:	2400      	movs	r4, #0
   2259e:	9400      	str	r4, [sp, #0]
   225a0:	f7ff ff05 	bl	223ae <log_msg_hexdump_data_op>
}
   225a4:	b002      	add	sp, #8
   225a6:	bd10      	pop	{r4, pc}

000225a8 <buffer_write>:
{
   225a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225aa:	4606      	mov	r6, r0
   225ac:	460d      	mov	r5, r1
   225ae:	4614      	mov	r4, r2
   225b0:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   225b2:	4621      	mov	r1, r4
   225b4:	4628      	mov	r0, r5
   225b6:	463a      	mov	r2, r7
   225b8:	47b0      	blx	r6
	} while (len != 0);
   225ba:	1a24      	subs	r4, r4, r0
		buf += processed;
   225bc:	4405      	add	r5, r0
	} while (len != 0);
   225be:	d1f8      	bne.n	225b2 <buffer_write+0xa>
}
   225c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000225c2 <std_print>:
{
   225c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   225c6:	b08e      	sub	sp, #56	; 0x38
   225c8:	af0e      	add	r7, sp, #56	; 0x38
   225ca:	4680      	mov	r8, r0
   225cc:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   225ce:	f7ff ff86 	bl	224de <log_msg_str_get>
   225d2:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   225d4:	4640      	mov	r0, r8
   225d6:	f7ff ff4d 	bl	22474 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   225da:	0083      	lsls	r3, r0, #2
   225dc:	3307      	adds	r3, #7
   225de:	f023 0307 	bic.w	r3, r3, #7
   225e2:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   225e6:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   225e8:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   225ea:	f04f 0900 	mov.w	r9, #0
   225ee:	45d1      	cmp	r9, sl
   225f0:	d116      	bne.n	22620 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   225f2:	4640      	mov	r0, r8
   225f4:	f7ff ff3e 	bl	22474 <log_msg_nargs_get>
   225f8:	280f      	cmp	r0, #15
   225fa:	d81e      	bhi.n	2263a <std_print+0x78>
   225fc:	e8df f010 	tbh	[pc, r0, lsl #1]
   22600:	00200019 	.word	0x00200019
   22604:	002d0026 	.word	0x002d0026
   22608:	00410036 	.word	0x00410036
   2260c:	005d004e 	.word	0x005d004e
   22610:	0081006e 	.word	0x0081006e
   22614:	00ad0096 	.word	0x00ad0096
   22618:	00e100c6 	.word	0x00e100c6
   2261c:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   22620:	4649      	mov	r1, r9
   22622:	4640      	mov	r0, r8
   22624:	f7ff ff29 	bl	2247a <log_msg_arg_get>
   22628:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   2262c:	f109 0901 	add.w	r9, r9, #1
   22630:	e7dd      	b.n	225ee <std_print+0x2c>
		print_formatted(log_output, str);
   22632:	4631      	mov	r1, r6
   22634:	4628      	mov	r0, r5
   22636:	f7e3 f999 	bl	596c <print_formatted>
}
   2263a:	46bd      	mov	sp, r7
   2263c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   22640:	6822      	ldr	r2, [r4, #0]
   22642:	4631      	mov	r1, r6
   22644:	4628      	mov	r0, r5
   22646:	f7e3 f991 	bl	596c <print_formatted>
		break;
   2264a:	e7f6      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   2264c:	e9d4 2300 	ldrd	r2, r3, [r4]
   22650:	4631      	mov	r1, r6
   22652:	4628      	mov	r0, r5
   22654:	f7e3 f98a 	bl	596c <print_formatted>
		break;
   22658:	e7ef      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   2265a:	68a3      	ldr	r3, [r4, #8]
   2265c:	9300      	str	r3, [sp, #0]
   2265e:	e9d4 2300 	ldrd	r2, r3, [r4]
   22662:	4631      	mov	r1, r6
   22664:	4628      	mov	r0, r5
   22666:	f7e3 f981 	bl	596c <print_formatted>
		break;
   2266a:	e7e6      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2266c:	68e3      	ldr	r3, [r4, #12]
   2266e:	9301      	str	r3, [sp, #4]
   22670:	68a3      	ldr	r3, [r4, #8]
   22672:	9300      	str	r3, [sp, #0]
   22674:	e9d4 2300 	ldrd	r2, r3, [r4]
   22678:	4631      	mov	r1, r6
   2267a:	4628      	mov	r0, r5
   2267c:	f7e3 f976 	bl	596c <print_formatted>
		break;
   22680:	e7db      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22682:	6923      	ldr	r3, [r4, #16]
   22684:	9302      	str	r3, [sp, #8]
   22686:	68e3      	ldr	r3, [r4, #12]
   22688:	9301      	str	r3, [sp, #4]
   2268a:	68a3      	ldr	r3, [r4, #8]
   2268c:	9300      	str	r3, [sp, #0]
   2268e:	e9d4 2300 	ldrd	r2, r3, [r4]
   22692:	4631      	mov	r1, r6
   22694:	4628      	mov	r0, r5
   22696:	f7e3 f969 	bl	596c <print_formatted>
		break;
   2269a:	e7ce      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2269c:	6963      	ldr	r3, [r4, #20]
   2269e:	9303      	str	r3, [sp, #12]
   226a0:	6923      	ldr	r3, [r4, #16]
   226a2:	9302      	str	r3, [sp, #8]
   226a4:	68e3      	ldr	r3, [r4, #12]
   226a6:	9301      	str	r3, [sp, #4]
   226a8:	68a3      	ldr	r3, [r4, #8]
   226aa:	9300      	str	r3, [sp, #0]
   226ac:	e9d4 2300 	ldrd	r2, r3, [r4]
   226b0:	4631      	mov	r1, r6
   226b2:	4628      	mov	r0, r5
   226b4:	f7e3 f95a 	bl	596c <print_formatted>
		break;
   226b8:	e7bf      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   226ba:	69a3      	ldr	r3, [r4, #24]
   226bc:	9304      	str	r3, [sp, #16]
   226be:	6963      	ldr	r3, [r4, #20]
   226c0:	9303      	str	r3, [sp, #12]
   226c2:	6923      	ldr	r3, [r4, #16]
   226c4:	9302      	str	r3, [sp, #8]
   226c6:	68e3      	ldr	r3, [r4, #12]
   226c8:	9301      	str	r3, [sp, #4]
   226ca:	68a3      	ldr	r3, [r4, #8]
   226cc:	9300      	str	r3, [sp, #0]
   226ce:	e9d4 2300 	ldrd	r2, r3, [r4]
   226d2:	4631      	mov	r1, r6
   226d4:	4628      	mov	r0, r5
   226d6:	f7e3 f949 	bl	596c <print_formatted>
		break;
   226da:	e7ae      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   226dc:	69e3      	ldr	r3, [r4, #28]
   226de:	9305      	str	r3, [sp, #20]
   226e0:	69a3      	ldr	r3, [r4, #24]
   226e2:	9304      	str	r3, [sp, #16]
   226e4:	6963      	ldr	r3, [r4, #20]
   226e6:	9303      	str	r3, [sp, #12]
   226e8:	6923      	ldr	r3, [r4, #16]
   226ea:	9302      	str	r3, [sp, #8]
   226ec:	68e3      	ldr	r3, [r4, #12]
   226ee:	9301      	str	r3, [sp, #4]
   226f0:	68a3      	ldr	r3, [r4, #8]
   226f2:	9300      	str	r3, [sp, #0]
   226f4:	e9d4 2300 	ldrd	r2, r3, [r4]
   226f8:	4631      	mov	r1, r6
   226fa:	4628      	mov	r0, r5
   226fc:	f7e3 f936 	bl	596c <print_formatted>
		break;
   22700:	e79b      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22702:	6a23      	ldr	r3, [r4, #32]
   22704:	9306      	str	r3, [sp, #24]
   22706:	69e3      	ldr	r3, [r4, #28]
   22708:	9305      	str	r3, [sp, #20]
   2270a:	69a3      	ldr	r3, [r4, #24]
   2270c:	9304      	str	r3, [sp, #16]
   2270e:	6963      	ldr	r3, [r4, #20]
   22710:	9303      	str	r3, [sp, #12]
   22712:	6923      	ldr	r3, [r4, #16]
   22714:	9302      	str	r3, [sp, #8]
   22716:	68e3      	ldr	r3, [r4, #12]
   22718:	9301      	str	r3, [sp, #4]
   2271a:	68a3      	ldr	r3, [r4, #8]
   2271c:	9300      	str	r3, [sp, #0]
   2271e:	e9d4 2300 	ldrd	r2, r3, [r4]
   22722:	4631      	mov	r1, r6
   22724:	4628      	mov	r0, r5
   22726:	f7e3 f921 	bl	596c <print_formatted>
		break;
   2272a:	e786      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2272c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2272e:	9307      	str	r3, [sp, #28]
   22730:	6a23      	ldr	r3, [r4, #32]
   22732:	9306      	str	r3, [sp, #24]
   22734:	69e3      	ldr	r3, [r4, #28]
   22736:	9305      	str	r3, [sp, #20]
   22738:	69a3      	ldr	r3, [r4, #24]
   2273a:	9304      	str	r3, [sp, #16]
   2273c:	6963      	ldr	r3, [r4, #20]
   2273e:	9303      	str	r3, [sp, #12]
   22740:	6923      	ldr	r3, [r4, #16]
   22742:	9302      	str	r3, [sp, #8]
   22744:	68e3      	ldr	r3, [r4, #12]
   22746:	9301      	str	r3, [sp, #4]
   22748:	68a3      	ldr	r3, [r4, #8]
   2274a:	9300      	str	r3, [sp, #0]
   2274c:	e9d4 2300 	ldrd	r2, r3, [r4]
   22750:	4631      	mov	r1, r6
   22752:	4628      	mov	r0, r5
   22754:	f7e3 f90a 	bl	596c <print_formatted>
		break;
   22758:	e76f      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2275a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2275c:	9308      	str	r3, [sp, #32]
   2275e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22760:	9307      	str	r3, [sp, #28]
   22762:	6a23      	ldr	r3, [r4, #32]
   22764:	9306      	str	r3, [sp, #24]
   22766:	69e3      	ldr	r3, [r4, #28]
   22768:	9305      	str	r3, [sp, #20]
   2276a:	69a3      	ldr	r3, [r4, #24]
   2276c:	9304      	str	r3, [sp, #16]
   2276e:	6963      	ldr	r3, [r4, #20]
   22770:	9303      	str	r3, [sp, #12]
   22772:	6923      	ldr	r3, [r4, #16]
   22774:	9302      	str	r3, [sp, #8]
   22776:	68e3      	ldr	r3, [r4, #12]
   22778:	9301      	str	r3, [sp, #4]
   2277a:	68a3      	ldr	r3, [r4, #8]
   2277c:	9300      	str	r3, [sp, #0]
   2277e:	e9d4 2300 	ldrd	r2, r3, [r4]
   22782:	4631      	mov	r1, r6
   22784:	4628      	mov	r0, r5
   22786:	f7e3 f8f1 	bl	596c <print_formatted>
		break;
   2278a:	e756      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2278c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2278e:	9309      	str	r3, [sp, #36]	; 0x24
   22790:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22792:	9308      	str	r3, [sp, #32]
   22794:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22796:	9307      	str	r3, [sp, #28]
   22798:	6a23      	ldr	r3, [r4, #32]
   2279a:	9306      	str	r3, [sp, #24]
   2279c:	69e3      	ldr	r3, [r4, #28]
   2279e:	9305      	str	r3, [sp, #20]
   227a0:	69a3      	ldr	r3, [r4, #24]
   227a2:	9304      	str	r3, [sp, #16]
   227a4:	6963      	ldr	r3, [r4, #20]
   227a6:	9303      	str	r3, [sp, #12]
   227a8:	6923      	ldr	r3, [r4, #16]
   227aa:	9302      	str	r3, [sp, #8]
   227ac:	68e3      	ldr	r3, [r4, #12]
   227ae:	9301      	str	r3, [sp, #4]
   227b0:	68a3      	ldr	r3, [r4, #8]
   227b2:	9300      	str	r3, [sp, #0]
   227b4:	e9d4 2300 	ldrd	r2, r3, [r4]
   227b8:	4631      	mov	r1, r6
   227ba:	4628      	mov	r0, r5
   227bc:	f7e3 f8d6 	bl	596c <print_formatted>
		break;
   227c0:	e73b      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   227c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   227c4:	930a      	str	r3, [sp, #40]	; 0x28
   227c6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   227c8:	9309      	str	r3, [sp, #36]	; 0x24
   227ca:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   227cc:	9308      	str	r3, [sp, #32]
   227ce:	6a63      	ldr	r3, [r4, #36]	; 0x24
   227d0:	9307      	str	r3, [sp, #28]
   227d2:	6a23      	ldr	r3, [r4, #32]
   227d4:	9306      	str	r3, [sp, #24]
   227d6:	69e3      	ldr	r3, [r4, #28]
   227d8:	9305      	str	r3, [sp, #20]
   227da:	69a3      	ldr	r3, [r4, #24]
   227dc:	9304      	str	r3, [sp, #16]
   227de:	6963      	ldr	r3, [r4, #20]
   227e0:	9303      	str	r3, [sp, #12]
   227e2:	6923      	ldr	r3, [r4, #16]
   227e4:	9302      	str	r3, [sp, #8]
   227e6:	68e3      	ldr	r3, [r4, #12]
   227e8:	9301      	str	r3, [sp, #4]
   227ea:	68a3      	ldr	r3, [r4, #8]
   227ec:	9300      	str	r3, [sp, #0]
   227ee:	e9d4 2300 	ldrd	r2, r3, [r4]
   227f2:	4631      	mov	r1, r6
   227f4:	4628      	mov	r0, r5
   227f6:	f7e3 f8b9 	bl	596c <print_formatted>
		break;
   227fa:	e71e      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   227fc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   227fe:	930b      	str	r3, [sp, #44]	; 0x2c
   22800:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22802:	930a      	str	r3, [sp, #40]	; 0x28
   22804:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22806:	9309      	str	r3, [sp, #36]	; 0x24
   22808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2280a:	9308      	str	r3, [sp, #32]
   2280c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2280e:	9307      	str	r3, [sp, #28]
   22810:	6a23      	ldr	r3, [r4, #32]
   22812:	9306      	str	r3, [sp, #24]
   22814:	69e3      	ldr	r3, [r4, #28]
   22816:	9305      	str	r3, [sp, #20]
   22818:	69a3      	ldr	r3, [r4, #24]
   2281a:	9304      	str	r3, [sp, #16]
   2281c:	6963      	ldr	r3, [r4, #20]
   2281e:	9303      	str	r3, [sp, #12]
   22820:	6923      	ldr	r3, [r4, #16]
   22822:	9302      	str	r3, [sp, #8]
   22824:	68e3      	ldr	r3, [r4, #12]
   22826:	9301      	str	r3, [sp, #4]
   22828:	68a3      	ldr	r3, [r4, #8]
   2282a:	9300      	str	r3, [sp, #0]
   2282c:	e9d4 2300 	ldrd	r2, r3, [r4]
   22830:	4631      	mov	r1, r6
   22832:	4628      	mov	r0, r5
   22834:	f7e3 f89a 	bl	596c <print_formatted>
		break;
   22838:	e6ff      	b.n	2263a <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2283a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   2283c:	930c      	str	r3, [sp, #48]	; 0x30
   2283e:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22840:	930b      	str	r3, [sp, #44]	; 0x2c
   22842:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22844:	930a      	str	r3, [sp, #40]	; 0x28
   22846:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22848:	9309      	str	r3, [sp, #36]	; 0x24
   2284a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2284c:	9308      	str	r3, [sp, #32]
   2284e:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22850:	9307      	str	r3, [sp, #28]
   22852:	6a23      	ldr	r3, [r4, #32]
   22854:	9306      	str	r3, [sp, #24]
   22856:	69e3      	ldr	r3, [r4, #28]
   22858:	9305      	str	r3, [sp, #20]
   2285a:	69a3      	ldr	r3, [r4, #24]
   2285c:	9304      	str	r3, [sp, #16]
   2285e:	6963      	ldr	r3, [r4, #20]
   22860:	9303      	str	r3, [sp, #12]
   22862:	6923      	ldr	r3, [r4, #16]
   22864:	9302      	str	r3, [sp, #8]
   22866:	68e3      	ldr	r3, [r4, #12]
   22868:	9301      	str	r3, [sp, #4]
   2286a:	68a3      	ldr	r3, [r4, #8]
   2286c:	9300      	str	r3, [sp, #0]
   2286e:	e9d4 2300 	ldrd	r2, r3, [r4]
   22872:	4631      	mov	r1, r6
   22874:	4628      	mov	r0, r5
   22876:	f7e3 f879 	bl	596c <print_formatted>
}
   2287a:	e6de      	b.n	2263a <std_print+0x78>

0002287c <log_output_flush>:
		     log_output->control_block->offset,
   2287c:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   2287e:	6881      	ldr	r1, [r0, #8]
{
   22880:	b510      	push	{r4, lr}
   22882:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   22884:	e9d2 2300 	ldrd	r2, r3, [r2]
   22888:	6800      	ldr	r0, [r0, #0]
   2288a:	f7ff fe8d 	bl	225a8 <buffer_write>
	log_output->control_block->offset = 0;
   2288e:	6863      	ldr	r3, [r4, #4]
   22890:	2200      	movs	r2, #0
   22892:	601a      	str	r2, [r3, #0]
}
   22894:	bd10      	pop	{r4, pc}

00022896 <out_func>:
{
   22896:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   22898:	684b      	ldr	r3, [r1, #4]
   2289a:	681a      	ldr	r2, [r3, #0]
   2289c:	68cb      	ldr	r3, [r1, #12]
   2289e:	429a      	cmp	r2, r3
{
   228a0:	4605      	mov	r5, r0
   228a2:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   228a4:	d102      	bne.n	228ac <out_func+0x16>
		log_output_flush(out_ctx);
   228a6:	4608      	mov	r0, r1
   228a8:	f7ff ffe8 	bl	2287c <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   228ac:	6863      	ldr	r3, [r4, #4]
   228ae:	f3bf 8f5b 	dmb	ish
   228b2:	e853 2f00 	ldrex	r2, [r3]
   228b6:	1c51      	adds	r1, r2, #1
   228b8:	e843 1000 	strex	r0, r1, [r3]
   228bc:	2800      	cmp	r0, #0
   228be:	d1f8      	bne.n	228b2 <out_func+0x1c>
   228c0:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   228c4:	68a3      	ldr	r3, [r4, #8]
   228c6:	549d      	strb	r5, [r3, r2]
}
   228c8:	2000      	movs	r0, #0
   228ca:	bd38      	pop	{r3, r4, r5, pc}

000228cc <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   228cc:	6883      	ldr	r3, [r0, #8]
   228ce:	68db      	ldr	r3, [r3, #12]
   228d0:	4718      	bx	r3

000228d2 <nvs_flash_rd>:
{
   228d2:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   228d4:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   228d6:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   228d8:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   228da:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   228dc:	fa16 f181 	uxtah	r1, r6, r1
   228e0:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   228e4:	6884      	ldr	r4, [r0, #8]
   228e6:	6824      	ldr	r4, [r4, #0]
   228e8:	46a4      	mov	ip, r4
}
   228ea:	bc70      	pop	{r4, r5, r6}
   228ec:	4760      	bx	ip

000228ee <nvs_flash_block_cmp>:
{
   228ee:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   228f2:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   228f4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   228f6:	681d      	ldr	r5, [r3, #0]
   228f8:	426d      	negs	r5, r5
{
   228fa:	b089      	sub	sp, #36	; 0x24
   228fc:	4681      	mov	r9, r0
   228fe:	460e      	mov	r6, r1
   22900:	4617      	mov	r7, r2
	block_size =
   22902:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   22906:	b91c      	cbnz	r4, 22910 <nvs_flash_block_cmp+0x22>
	return 0;
   22908:	4620      	mov	r0, r4
}
   2290a:	b009      	add	sp, #36	; 0x24
   2290c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   22910:	42ac      	cmp	r4, r5
   22912:	46a0      	mov	r8, r4
   22914:	bf28      	it	cs
   22916:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   22918:	4643      	mov	r3, r8
   2291a:	466a      	mov	r2, sp
   2291c:	4631      	mov	r1, r6
   2291e:	4648      	mov	r0, r9
   22920:	f7ff ffd7 	bl	228d2 <nvs_flash_rd>
		if (rc) {
   22924:	2800      	cmp	r0, #0
   22926:	d1f0      	bne.n	2290a <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   22928:	4642      	mov	r2, r8
   2292a:	4669      	mov	r1, sp
   2292c:	4638      	mov	r0, r7
   2292e:	f001 fcd8 	bl	242e2 <memcmp>
		if (rc) {
   22932:	b920      	cbnz	r0, 2293e <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   22934:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   22938:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   2293a:	4447      	add	r7, r8
   2293c:	e7e3      	b.n	22906 <nvs_flash_block_cmp+0x18>
			return 1;
   2293e:	2001      	movs	r0, #1
   22940:	e7e3      	b.n	2290a <nvs_flash_block_cmp+0x1c>

00022942 <nvs_flash_cmp_const>:
{
   22942:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22946:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22948:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   2294a:	681d      	ldr	r5, [r3, #0]
   2294c:	426d      	negs	r5, r5
{
   2294e:	b088      	sub	sp, #32
	block_size =
   22950:	f005 0520 	and.w	r5, r5, #32
{
   22954:	4607      	mov	r7, r0
   22956:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   22958:	4668      	mov	r0, sp
{
   2295a:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   2295c:	462a      	mov	r2, r5
   2295e:	f001 fcfc 	bl	2435a <memset>
	while (len) {
   22962:	b91c      	cbnz	r4, 2296c <nvs_flash_cmp_const+0x2a>
	return 0;
   22964:	4620      	mov	r0, r4
}
   22966:	b008      	add	sp, #32
   22968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   2296c:	42ac      	cmp	r4, r5
   2296e:	46a0      	mov	r8, r4
   22970:	bf28      	it	cs
   22972:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   22974:	4643      	mov	r3, r8
   22976:	466a      	mov	r2, sp
   22978:	4631      	mov	r1, r6
   2297a:	4638      	mov	r0, r7
   2297c:	f7ff ffb7 	bl	228ee <nvs_flash_block_cmp>
		if (rc) {
   22980:	2800      	cmp	r0, #0
   22982:	d1f0      	bne.n	22966 <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   22984:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   22988:	4446      	add	r6, r8
   2298a:	e7ea      	b.n	22962 <nvs_flash_cmp_const+0x20>

0002298c <nvs_flash_erase_sector>:
{
   2298c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   22990:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   22992:	8983      	ldrh	r3, [r0, #12]
   22994:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   22996:	0c0e      	lsrs	r6, r1, #16
   22998:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2299a:	4631      	mov	r1, r6
{
   2299c:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   2299e:	f7ff ffd0 	bl	22942 <nvs_flash_cmp_const>
	if (rc <= 0) {
   229a2:	1e04      	subs	r4, r0, #0
   229a4:	dd16      	ble.n	229d4 <nvs_flash_erase_sector+0x48>
	rc = flash_write_protection_set(fs->flash_device, false);
   229a6:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   229a8:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   229aa:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   229ae:	2100      	movs	r1, #0
   229b0:	f7ff ff8c 	bl	228cc <flash_write_protection_set>
	if (rc) {
   229b4:	4604      	mov	r4, r0
   229b6:	b968      	cbnz	r0, 229d4 <nvs_flash_erase_sector+0x48>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   229b8:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   229ba:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   229bc:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   229be:	0c31      	lsrs	r1, r6, #16
   229c0:	689b      	ldr	r3, [r3, #8]
   229c2:	fb08 7101 	mla	r1, r8, r1, r7
   229c6:	4798      	blx	r3
	if (rc) {
   229c8:	4604      	mov	r4, r0
   229ca:	b918      	cbnz	r0, 229d4 <nvs_flash_erase_sector+0x48>
	(void) flash_write_protection_set(fs->flash_device, true);
   229cc:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   229ce:	2101      	movs	r1, #1
   229d0:	f7ff ff7c 	bl	228cc <flash_write_protection_set>
}
   229d4:	4620      	mov	r0, r4
   229d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000229da <nvs_ate_crc8_check>:
{
   229da:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   229dc:	4601      	mov	r1, r0
{
   229de:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   229e0:	2207      	movs	r2, #7
   229e2:	20ff      	movs	r0, #255	; 0xff
   229e4:	f7e1 fd04 	bl	43f0 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   229e8:	79e3      	ldrb	r3, [r4, #7]
}
   229ea:	1a18      	subs	r0, r3, r0
   229ec:	bf18      	it	ne
   229ee:	2001      	movne	r0, #1
   229f0:	bd10      	pop	{r4, pc}

000229f2 <nvs_ate_crc8_update>:
{
   229f2:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   229f4:	4601      	mov	r1, r0
{
   229f6:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   229f8:	2207      	movs	r2, #7
   229fa:	20ff      	movs	r0, #255	; 0xff
   229fc:	f7e1 fcf8 	bl	43f0 <crc8_ccitt>
	entry->crc8 = crc8;
   22a00:	71e0      	strb	r0, [r4, #7]
}
   22a02:	bd10      	pop	{r4, pc}

00022a04 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   22a04:	680b      	ldr	r3, [r1, #0]
   22a06:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   22a0a:	0c1a      	lsrs	r2, r3, #16
   22a0c:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   22a10:	bf08      	it	eq
   22a12:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   22a16:	600b      	str	r3, [r1, #0]
}
   22a18:	4770      	bx	lr

00022a1a <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   22a1a:	7803      	ldrb	r3, [r0, #0]
   22a1c:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22a1e:	bf81      	itttt	hi
   22a20:	f101 31ff 	addhi.w	r1, r1, #4294967295
   22a24:	18c9      	addhi	r1, r1, r3
   22a26:	425b      	neghi	r3, r3
   22a28:	4019      	andhi	r1, r3
}
   22a2a:	4608      	mov	r0, r1
   22a2c:	4770      	bx	lr

00022a2e <nvs_prev_ate>:
{
   22a2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22a30:	4604      	mov	r4, r0
   22a32:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   22a34:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   22a36:	2108      	movs	r1, #8
   22a38:	f7ff ffef 	bl	22a1a <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   22a3c:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   22a3e:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   22a40:	2308      	movs	r3, #8
   22a42:	4620      	mov	r0, r4
   22a44:	f7ff ff45 	bl	228d2 <nvs_flash_rd>
	if (rc) {
   22a48:	2800      	cmp	r0, #0
   22a4a:	d13e      	bne.n	22aca <nvs_prev_ate+0x9c>
	*addr += ate_size;
   22a4c:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   22a4e:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   22a50:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   22a52:	b299      	uxth	r1, r3
   22a54:	1b92      	subs	r2, r2, r6
   22a56:	4291      	cmp	r1, r2
	*addr += ate_size;
   22a58:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   22a5a:	d136      	bne.n	22aca <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   22a5c:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   22a5e:	bf03      	ittte	eq
   22a60:	89e1      	ldrheq	r1, [r4, #14]
   22a62:	f101 31ff 	addeq.w	r1, r1, #4294967295
   22a66:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   22a6a:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   22a6e:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   22a70:	2308      	movs	r3, #8
   22a72:	466a      	mov	r2, sp
   22a74:	4620      	mov	r0, r4
   22a76:	f7ff ff2c 	bl	228d2 <nvs_flash_rd>
	if (rc) {
   22a7a:	bb30      	cbnz	r0, 22aca <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   22a7c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22a7e:	466a      	mov	r2, sp
   22a80:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   22a82:	4603      	mov	r3, r0
		if (data8[i] != value) {
   22a84:	f812 7b01 	ldrb.w	r7, [r2], #1
   22a88:	42b9      	cmp	r1, r7
   22a8a:	d115      	bne.n	22ab8 <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   22a8c:	3301      	adds	r3, #1
   22a8e:	2b08      	cmp	r3, #8
   22a90:	d1f8      	bne.n	22a84 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   22a92:	6863      	ldr	r3, [r4, #4]
   22a94:	e00e      	b.n	22ab4 <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   22a96:	89a3      	ldrh	r3, [r4, #12]
   22a98:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   22a9c:	1b9b      	subs	r3, r3, r6
   22a9e:	429a      	cmp	r2, r3
   22aa0:	d20f      	bcs.n	22ac2 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   22aa2:	fbb2 f3f6 	udiv	r3, r2, r6
   22aa6:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   22aaa:	b956      	cbnz	r6, 22ac2 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   22aac:	682b      	ldr	r3, [r5, #0]
   22aae:	0c1b      	lsrs	r3, r3, #16
   22ab0:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   22ab2:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   22ab4:	602b      	str	r3, [r5, #0]
		return 0;
   22ab6:	e008      	b.n	22aca <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   22ab8:	4668      	mov	r0, sp
   22aba:	f7ff ff8e 	bl	229da <nvs_ate_crc8_check>
   22abe:	2800      	cmp	r0, #0
   22ac0:	d0e9      	beq.n	22a96 <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   22ac2:	4629      	mov	r1, r5
   22ac4:	4620      	mov	r0, r4
   22ac6:	f7e3 fa4d 	bl	5f64 <nvs_recover_last_ate>
}
   22aca:	b003      	add	sp, #12
   22acc:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022ace <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22ace:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   22ad2:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22ad6:	f8b0 900c 	ldrh.w	r9, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22ada:	b088      	sub	sp, #32
   22adc:	4605      	mov	r5, r0
   22ade:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, false);
   22ae0:	6a80      	ldr	r0, [r0, #40]	; 0x28
   22ae2:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22ae4:	4690      	mov	r8, r2
   22ae6:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   22ae8:	f7ff fef0 	bl	228cc <flash_write_protection_set>
	if (rc) {
   22aec:	2800      	cmp	r0, #0
   22aee:	d134      	bne.n	22b5a <nvs_flash_al_wrt.part.0+0x8c>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   22af0:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22af2:	681b      	ldr	r3, [r3, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22af4:	0c27      	lsrs	r7, r4, #16
	offset += addr & ADDR_OFFS_MASK;
   22af6:	fa1a f484 	uxtah	r4, sl, r4
   22afa:	fb09 4707 	mla	r7, r9, r7, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   22afe:	f1c3 0900 	rsb	r9, r3, #0
	if (blen > 0) {
   22b02:	ea19 0906 	ands.w	r9, r9, r6
   22b06:	d00c      	beq.n	22b22 <nvs_flash_al_wrt.part.0+0x54>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   22b08:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   22b0a:	6883      	ldr	r3, [r0, #8]
   22b0c:	4642      	mov	r2, r8
   22b0e:	685c      	ldr	r4, [r3, #4]
   22b10:	4639      	mov	r1, r7
   22b12:	464b      	mov	r3, r9
   22b14:	47a0      	blx	r4
		if (rc) {
   22b16:	4604      	mov	r4, r0
   22b18:	b9d0      	cbnz	r0, 22b50 <nvs_flash_al_wrt.part.0+0x82>
		len -= blen;
   22b1a:	eba6 0609 	sub.w	r6, r6, r9
		offset += blen;
   22b1e:	444f      	add	r7, r9
		data8 += blen;
   22b20:	44c8      	add	r8, r9
	if (len) {
   22b22:	b1ee      	cbz	r6, 22b60 <nvs_flash_al_wrt.part.0+0x92>
		memcpy(buf, data8, len);
   22b24:	4632      	mov	r2, r6
   22b26:	4641      	mov	r1, r8
   22b28:	4668      	mov	r0, sp
   22b2a:	f001 fbeb 	bl	24304 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   22b2e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22b30:	681a      	ldr	r2, [r3, #0]
   22b32:	7919      	ldrb	r1, [r3, #4]
   22b34:	1b92      	subs	r2, r2, r6
   22b36:	eb0d 0006 	add.w	r0, sp, r6
   22b3a:	f001 fc0e 	bl	2435a <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   22b3e:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   22b42:	681b      	ldr	r3, [r3, #0]
   22b44:	6882      	ldr	r2, [r0, #8]
   22b46:	4639      	mov	r1, r7
   22b48:	6854      	ldr	r4, [r2, #4]
   22b4a:	466a      	mov	r2, sp
   22b4c:	47a0      	blx	r4
   22b4e:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   22b50:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   22b52:	2101      	movs	r1, #1
   22b54:	f7ff feba 	bl	228cc <flash_write_protection_set>
	return rc;
   22b58:	4620      	mov	r0, r4
}
   22b5a:	b008      	add	sp, #32
   22b5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   22b60:	4634      	mov	r4, r6
   22b62:	e7f5      	b.n	22b50 <nvs_flash_al_wrt.part.0+0x82>

00022b64 <nvs_flash_data_wrt>:
{
   22b64:	b538      	push	{r3, r4, r5, lr}
   22b66:	4604      	mov	r4, r0
	if (!len) {
   22b68:	4615      	mov	r5, r2
   22b6a:	b12a      	cbz	r2, 22b78 <nvs_flash_data_wrt+0x14>
   22b6c:	4613      	mov	r3, r2
   22b6e:	460a      	mov	r2, r1
   22b70:	6881      	ldr	r1, [r0, #8]
   22b72:	f7ff ffac 	bl	22ace <nvs_flash_al_wrt.part.0>
   22b76:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   22b78:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22b7a:	4629      	mov	r1, r5
   22b7c:	f7ff ff4d 	bl	22a1a <nvs_al_size.isra.0>
   22b80:	68a3      	ldr	r3, [r4, #8]
   22b82:	4403      	add	r3, r0
   22b84:	60a3      	str	r3, [r4, #8]
}
   22b86:	4610      	mov	r0, r2
   22b88:	bd38      	pop	{r3, r4, r5, pc}

00022b8a <nvs_flash_ate_wrt>:
{
   22b8a:	b510      	push	{r4, lr}
   22b8c:	460a      	mov	r2, r1
	if (!len) {
   22b8e:	2308      	movs	r3, #8
   22b90:	6841      	ldr	r1, [r0, #4]
{
   22b92:	4604      	mov	r4, r0
   22b94:	f7ff ff9b 	bl	22ace <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   22b98:	2108      	movs	r1, #8
   22b9a:	4602      	mov	r2, r0
   22b9c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22b9e:	f7ff ff3c 	bl	22a1a <nvs_al_size.isra.0>
   22ba2:	6863      	ldr	r3, [r4, #4]
   22ba4:	1a1b      	subs	r3, r3, r0
   22ba6:	6063      	str	r3, [r4, #4]
}
   22ba8:	4610      	mov	r0, r2
   22baa:	bd10      	pop	{r4, pc}

00022bac <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   22bac:	2300      	movs	r3, #0
   22bae:	461a      	mov	r2, r3
   22bb0:	f7e3 bc1c 	b.w	63ec <nvs_write>

00022bb4 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   22bb4:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   22bb6:	2400      	movs	r4, #0
   22bb8:	9400      	str	r4, [sp, #0]
   22bba:	f7e3 fceb 	bl	6594 <nvs_read_hist>
	return rc;
}
   22bbe:	b002      	add	sp, #8
   22bc0:	bd10      	pop	{r4, pc}

00022bc2 <device_get_binding>:
   22bc2:	f7fc bd07 	b.w	1f5d4 <z_impl_device_get_binding>

00022bc6 <get_sectors_cb>:
{
   22bc6:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   22bc8:	6802      	ldr	r2, [r0, #0]
   22bca:	684c      	ldr	r4, [r1, #4]
   22bcc:	42a2      	cmp	r2, r4
   22bce:	d316      	bcc.n	22bfe <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   22bd0:	688b      	ldr	r3, [r1, #8]
   22bd2:	4423      	add	r3, r4
   22bd4:	429a      	cmp	r2, r3
   22bd6:	d206      	bcs.n	22be6 <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   22bd8:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   22bdc:	42ab      	cmp	r3, r5
   22bde:	d304      	bcc.n	22bea <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   22be0:	f06f 030b 	mvn.w	r3, #11
   22be4:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   22be6:	2000      	movs	r0, #0
   22be8:	e00a      	b.n	22c00 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   22bea:	68cd      	ldr	r5, [r1, #12]
   22bec:	1b12      	subs	r2, r2, r4
   22bee:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   22bf2:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   22bf6:	6842      	ldr	r2, [r0, #4]
   22bf8:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   22bfa:	3301      	adds	r3, #1
   22bfc:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   22bfe:	2001      	movs	r0, #1
}
   22c00:	bd70      	pop	{r4, r5, r6, pc}

00022c02 <settings_load>:
	return settings_load_subtree(NULL);
   22c02:	2000      	movs	r0, #0
   22c04:	f7e3 bdba 	b.w	677c <settings_load_subtree>

00022c08 <settings_delete>:
	return settings_save_one(name, NULL, 0);
   22c08:	2200      	movs	r2, #0
   22c0a:	4611      	mov	r1, r2
   22c0c:	f7e3 bd7c 	b.w	6708 <settings_save_one>

00022c10 <settings_name_steq>:
{
   22c10:	4603      	mov	r3, r0
   22c12:	b530      	push	{r4, r5, lr}
   22c14:	4608      	mov	r0, r1
	if (next) {
   22c16:	b10a      	cbz	r2, 22c1c <settings_name_steq+0xc>
		*next = NULL;
   22c18:	2100      	movs	r1, #0
   22c1a:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   22c1c:	b163      	cbz	r3, 22c38 <settings_name_steq+0x28>
   22c1e:	b190      	cbz	r0, 22c46 <settings_name_steq+0x36>
   22c20:	1e41      	subs	r1, r0, #1
   22c22:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   22c24:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   22c28:	4604      	mov	r4, r0
   22c2a:	f810 3b01 	ldrb.w	r3, [r0], #1
   22c2e:	b15d      	cbz	r5, 22c48 <settings_name_steq+0x38>
   22c30:	429d      	cmp	r5, r3
   22c32:	d101      	bne.n	22c38 <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   22c34:	2d3d      	cmp	r5, #61	; 0x3d
   22c36:	d1f5      	bne.n	22c24 <settings_name_steq+0x14>
	return 0;
   22c38:	2000      	movs	r0, #0
   22c3a:	e004      	b.n	22c46 <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   22c3c:	2b3d      	cmp	r3, #61	; 0x3d
   22c3e:	d008      	beq.n	22c52 <settings_name_steq+0x42>
   22c40:	fab3 f083 	clz	r0, r3
   22c44:	0940      	lsrs	r0, r0, #5
}
   22c46:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   22c48:	2b2f      	cmp	r3, #47	; 0x2f
   22c4a:	d1f7      	bne.n	22c3c <settings_name_steq+0x2c>
		if (next) {
   22c4c:	b10a      	cbz	r2, 22c52 <settings_name_steq+0x42>
			*next = name + 1;
   22c4e:	3401      	adds	r4, #1
   22c50:	6014      	str	r4, [r2, #0]
		return 1;
   22c52:	2001      	movs	r0, #1
   22c54:	e7f7      	b.n	22c46 <settings_name_steq+0x36>

00022c56 <settings_name_next>:
{
   22c56:	b530      	push	{r4, r5, lr}
   22c58:	4603      	mov	r3, r0
	if (next) {
   22c5a:	b109      	cbz	r1, 22c60 <settings_name_next+0xa>
		*next = NULL;
   22c5c:	2200      	movs	r2, #0
   22c5e:	600a      	str	r2, [r1, #0]
	if (!name) {
   22c60:	b16b      	cbz	r3, 22c7e <settings_name_next+0x28>
   22c62:	461a      	mov	r2, r3
   22c64:	4614      	mov	r4, r2
   22c66:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   22c68:	f812 5b01 	ldrb.w	r5, [r2], #1
   22c6c:	b135      	cbz	r5, 22c7c <settings_name_next+0x26>
   22c6e:	2d3d      	cmp	r5, #61	; 0x3d
   22c70:	d004      	beq.n	22c7c <settings_name_next+0x26>
   22c72:	2d2f      	cmp	r5, #47	; 0x2f
   22c74:	d1f6      	bne.n	22c64 <settings_name_next+0xe>
		if (next) {
   22c76:	b109      	cbz	r1, 22c7c <settings_name_next+0x26>
			*next = name + 1;
   22c78:	3401      	adds	r4, #1
   22c7a:	600c      	str	r4, [r1, #0]
}
   22c7c:	bd30      	pop	{r4, r5, pc}
		return 0;
   22c7e:	4618      	mov	r0, r3
   22c80:	e7fc      	b.n	22c7c <settings_name_next+0x26>

00022c82 <settings_nvs_read_fn>:
{
   22c82:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   22c84:	4613      	mov	r3, r2
{
   22c86:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   22c88:	460a      	mov	r2, r1
   22c8a:	8881      	ldrh	r1, [r0, #4]
   22c8c:	6800      	ldr	r0, [r0, #0]
   22c8e:	f7ff ff91 	bl	22bb4 <nvs_read>
}
   22c92:	42a0      	cmp	r0, r4
   22c94:	bfa8      	it	ge
   22c96:	4620      	movge	r0, r4
   22c98:	bd10      	pop	{r4, pc}

00022c9a <settings_nvs_save>:
{
   22c9a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22c9e:	b097      	sub	sp, #92	; 0x5c
   22ca0:	4604      	mov	r4, r0
   22ca2:	9201      	str	r2, [sp, #4]
   22ca4:	469b      	mov	fp, r3
	if (!name) {
   22ca6:	4689      	mov	r9, r1
   22ca8:	2900      	cmp	r1, #0
   22caa:	d069      	beq.n	22d80 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   22cac:	b1da      	cbz	r2, 22ce6 <settings_nvs_save+0x4c>
   22cae:	fabb f78b 	clz	r7, fp
   22cb2:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   22cb4:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   22cb6:	3501      	adds	r5, #1
   22cb8:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   22cba:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   22cbc:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   22cc0:	1e6e      	subs	r6, r5, #1
   22cc2:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   22cc4:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   22cc8:	d02e      	beq.n	22d28 <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   22cca:	234a      	movs	r3, #74	; 0x4a
   22ccc:	aa03      	add	r2, sp, #12
   22cce:	4631      	mov	r1, r6
   22cd0:	4650      	mov	r0, sl
   22cd2:	f7ff ff6f 	bl	22bb4 <nvs_read>
		if (rc < 0) {
   22cd6:	2800      	cmp	r0, #0
   22cd8:	da07      	bge.n	22cea <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   22cda:	f110 0f02 	cmn.w	r0, #2
   22cde:	bf08      	it	eq
   22ce0:	46b0      	moveq	r8, r6
   22ce2:	4635      	mov	r5, r6
   22ce4:	e7ec      	b.n	22cc0 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   22ce6:	2701      	movs	r7, #1
   22ce8:	e7e4      	b.n	22cb4 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   22cea:	ab16      	add	r3, sp, #88	; 0x58
   22cec:	4418      	add	r0, r3
   22cee:	2300      	movs	r3, #0
   22cf0:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   22cf4:	a903      	add	r1, sp, #12
   22cf6:	4648      	mov	r0, r9
   22cf8:	f001 fad6 	bl	242a8 <strcmp>
   22cfc:	2800      	cmp	r0, #0
   22cfe:	d1f0      	bne.n	22ce2 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   22d00:	2f00      	cmp	r7, #0
   22d02:	d03b      	beq.n	22d7c <settings_nvs_save+0xe2>
   22d04:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   22d06:	42b3      	cmp	r3, r6
   22d08:	d142      	bne.n	22d90 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   22d0a:	4622      	mov	r2, r4
   22d0c:	1e73      	subs	r3, r6, #1
   22d0e:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   22d12:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22d16:	2302      	movs	r3, #2
   22d18:	4650      	mov	r0, sl
   22d1a:	f7e3 fb67 	bl	63ec <nvs_write>
			if (rc < 0) {
   22d1e:	2800      	cmp	r0, #0
   22d20:	da36      	bge.n	22d90 <settings_nvs_save+0xf6>
}
   22d22:	b017      	add	sp, #92	; 0x5c
   22d24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   22d28:	bb6f      	cbnz	r7, 22d86 <settings_nvs_save+0xec>
	write_name = true;
   22d2a:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   22d2c:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   22d30:	d02b      	beq.n	22d8a <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   22d32:	f104 0508 	add.w	r5, r4, #8
   22d36:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   22d3a:	9a01      	ldr	r2, [sp, #4]
   22d3c:	465b      	mov	r3, fp
   22d3e:	b289      	uxth	r1, r1
   22d40:	4628      	mov	r0, r5
   22d42:	f7e3 fb53 	bl	63ec <nvs_write>
	if (rc < 0) {
   22d46:	2800      	cmp	r0, #0
   22d48:	dbeb      	blt.n	22d22 <settings_nvs_save+0x88>
	if (write_name) {
   22d4a:	b157      	cbz	r7, 22d62 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   22d4c:	4648      	mov	r0, r9
   22d4e:	f001 fa9b 	bl	24288 <strlen>
   22d52:	464a      	mov	r2, r9
   22d54:	4603      	mov	r3, r0
   22d56:	4641      	mov	r1, r8
   22d58:	4628      	mov	r0, r5
   22d5a:	f7e3 fb47 	bl	63ec <nvs_write>
		if (rc < 0) {
   22d5e:	2800      	cmp	r0, #0
   22d60:	dbdf      	blt.n	22d22 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   22d62:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   22d64:	4543      	cmp	r3, r8
   22d66:	d220      	bcs.n	22daa <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   22d68:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   22d6a:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   22d6c:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   22d70:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22d74:	4628      	mov	r0, r5
   22d76:	f7e3 fb39 	bl	63ec <nvs_write>
   22d7a:	e016      	b.n	22daa <settings_nvs_save+0x110>
   22d7c:	46b0      	mov	r8, r6
   22d7e:	e7d5      	b.n	22d2c <settings_nvs_save+0x92>
		return -EINVAL;
   22d80:	f06f 0015 	mvn.w	r0, #21
   22d84:	e7cd      	b.n	22d22 <settings_nvs_save+0x88>
		return 0;
   22d86:	2000      	movs	r0, #0
   22d88:	e7cb      	b.n	22d22 <settings_nvs_save+0x88>
		return -ENOMEM;
   22d8a:	f06f 000b 	mvn.w	r0, #11
   22d8e:	e7c8      	b.n	22d22 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   22d90:	4631      	mov	r1, r6
   22d92:	4650      	mov	r0, sl
   22d94:	f7ff ff0a 	bl	22bac <nvs_delete>
			if (rc >= 0) {
   22d98:	2800      	cmp	r0, #0
   22d9a:	dbc2      	blt.n	22d22 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   22d9c:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   22da0:	313f      	adds	r1, #63	; 0x3f
   22da2:	b289      	uxth	r1, r1
   22da4:	4650      	mov	r0, sl
   22da6:	f7ff ff01 	bl	22bac <nvs_delete>
	if (rc < 0) {
   22daa:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   22dae:	e7b8      	b.n	22d22 <settings_nvs_save+0x88>

00022db0 <settings_nvs_backend_init>:
{
   22db0:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   22db2:	f100 0608 	add.w	r6, r0, #8
   22db6:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   22db8:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   22dba:	4630      	mov	r0, r6
   22dbc:	f7e3 f9aa 	bl	6114 <nvs_init>
	if (rc) {
   22dc0:	4605      	mov	r5, r0
   22dc2:	b970      	cbnz	r0, 22de2 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   22dc4:	2302      	movs	r3, #2
   22dc6:	f10d 0206 	add.w	r2, sp, #6
   22dca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22dce:	4630      	mov	r0, r6
   22dd0:	f7ff fef0 	bl	22bb4 <nvs_read>
	if (rc < 0) {
   22dd4:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   22dd6:	bfac      	ite	ge
   22dd8:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   22ddc:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   22de0:	8723      	strh	r3, [r4, #56]	; 0x38
}
   22de2:	4628      	mov	r0, r5
   22de4:	b002      	add	sp, #8
   22de6:	bd70      	pop	{r4, r5, r6, pc}

00022de8 <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   22de8:	2200      	movs	r2, #0
   22dea:	8002      	strh	r2, [r0, #0]
   22dec:	6042      	str	r2, [r0, #4]
}
   22dee:	4770      	bx	lr

00022df0 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22df0:	68c3      	ldr	r3, [r0, #12]
   22df2:	b2c9      	uxtb	r1, r1
   22df4:	220c      	movs	r2, #12
   22df6:	fb01 3302 	mla	r3, r1, r2, r3
   22dfa:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   22dfc:	f000 0007 	and.w	r0, r0, #7
   22e00:	4770      	bx	lr

00022e02 <set_on_state>:
	__asm__ volatile(
   22e02:	f04f 0320 	mov.w	r3, #32
   22e06:	f3ef 8211 	mrs	r2, BASEPRI
   22e0a:	f383 8811 	msr	BASEPRI, r3
   22e0e:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22e12:	6803      	ldr	r3, [r0, #0]
   22e14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22e18:	f043 0302 	orr.w	r3, r3, #2
   22e1c:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22e1e:	f382 8811 	msr	BASEPRI, r2
   22e22:	f3bf 8f6f 	isb	sy
}
   22e26:	4770      	bx	lr

00022e28 <stop>:
{
   22e28:	4603      	mov	r3, r0
   22e2a:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   22e2c:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
   22e2e:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22e30:	f04f 0420 	mov.w	r4, #32
   22e34:	f3ef 8611 	mrs	r6, BASEPRI
   22e38:	f384 8811 	msr	BASEPRI, r4
   22e3c:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22e40:	250c      	movs	r5, #12
   22e42:	fb05 0401 	mla	r4, r5, r1, r0
   22e46:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   22e48:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   22e4c:	d001      	beq.n	22e52 <stop+0x2a>
   22e4e:	42a2      	cmp	r2, r4
   22e50:	d111      	bne.n	22e76 <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   22e52:	fb05 0001 	mla	r0, r5, r1, r0
   22e56:	2201      	movs	r2, #1
   22e58:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   22e5a:	2000      	movs	r0, #0
	__asm__ volatile(
   22e5c:	f386 8811 	msr	BASEPRI, r6
   22e60:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   22e64:	b930      	cbnz	r0, 22e74 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   22e66:	685b      	ldr	r3, [r3, #4]
   22e68:	220c      	movs	r2, #12
   22e6a:	fb02 3101 	mla	r1, r2, r1, r3
   22e6e:	684b      	ldr	r3, [r1, #4]
   22e70:	4798      	blx	r3
	return 0;
   22e72:	2000      	movs	r0, #0
}
   22e74:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   22e76:	f04f 30ff 	mov.w	r0, #4294967295
   22e7a:	e7ef      	b.n	22e5c <stop+0x34>

00022e7c <api_stop>:
	return stop(dev, subsys, CTX_API);
   22e7c:	2280      	movs	r2, #128	; 0x80
   22e7e:	f7ff bfd3 	b.w	22e28 <stop>

00022e82 <async_start>:
{
   22e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22e84:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   22e86:	68c4      	ldr	r4, [r0, #12]
{
   22e88:	4605      	mov	r5, r0
   22e8a:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22e8c:	f04f 0020 	mov.w	r0, #32
   22e90:	f3ef 8c11 	mrs	ip, BASEPRI
   22e94:	f380 8811 	msr	BASEPRI, r0
   22e98:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22e9c:	260c      	movs	r6, #12
   22e9e:	fb06 4601 	mla	r6, r6, r1, r4
   22ea2:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   22ea4:	f000 0e07 	and.w	lr, r0, #7
   22ea8:	f1be 0f01 	cmp.w	lr, #1
   22eac:	d110      	bne.n	22ed0 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   22eae:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   22eb0:	2600      	movs	r6, #0
	__asm__ volatile(
   22eb2:	f38c 8811 	msr	BASEPRI, ip
   22eb6:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   22eba:	b93e      	cbnz	r6, 22ecc <async_start+0x4a>
	subdata->cb = cb;
   22ebc:	200c      	movs	r0, #12
   22ebe:	4341      	muls	r1, r0
   22ec0:	440c      	add	r4, r1
	subdata->user_data = user_data;
   22ec2:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   22ec6:	686b      	ldr	r3, [r5, #4]
   22ec8:	585b      	ldr	r3, [r3, r1]
   22eca:	4798      	blx	r3
}
   22ecc:	4630      	mov	r0, r6
   22ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   22ed0:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   22ed4:	4287      	cmp	r7, r0
   22ed6:	bf14      	ite	ne
   22ed8:	f04f 36ff 	movne.w	r6, #4294967295
   22edc:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   22ee0:	e7e7      	b.n	22eb2 <async_start+0x30>

00022ee2 <api_start>:
{
   22ee2:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   22ee4:	2480      	movs	r4, #128	; 0x80
   22ee6:	9400      	str	r4, [sp, #0]
   22ee8:	f7ff ffcb 	bl	22e82 <async_start>
}
   22eec:	b002      	add	sp, #8
   22eee:	bd10      	pop	{r4, pc}

00022ef0 <onoff_started_callback>:
	return &data->mgr[type];
   22ef0:	68c0      	ldr	r0, [r0, #12]
{
   22ef2:	b410      	push	{r4}
	return &data->mgr[type];
   22ef4:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   22ef6:	241c      	movs	r4, #28
   22ef8:	fb03 0004 	mla	r0, r3, r4, r0
   22efc:	2100      	movs	r1, #0
}
   22efe:	bc10      	pop	{r4}
	notify(mgr, 0);
   22f00:	4710      	bx	r2

00022f02 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   22f02:	2000      	movs	r0, #0
   22f04:	f003 bca7 	b.w	26856 <nrfx_clock_start>

00022f08 <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   22f08:	2000      	movs	r0, #0
   22f0a:	f7fb be6d 	b.w	1ebe8 <nrfx_clock_stop>

00022f0e <blocking_start_callback>:
{
   22f0e:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   22f10:	f7fd b9f6 	b.w	20300 <z_impl_k_sem_give>

00022f14 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   22f14:	4770      	bx	lr

00022f16 <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   22f16:	4770      	bx	lr

00022f18 <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   22f18:	f7e4 b962 	b.w	71e0 <_DoInit>

00022f1c <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   22f1c:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   22f1e:	f7ff fffb 	bl	22f18 <SEGGER_RTT_Init>

	return 0;
}
   22f22:	2000      	movs	r0, #0
   22f24:	bd08      	pop	{r3, pc}

00022f26 <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   22f26:	b538      	push	{r3, r4, r5, lr}
   22f28:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   22f2a:	42ab      	cmp	r3, r5
{
   22f2c:	4611      	mov	r1, r2
   22f2e:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   22f30:	d804      	bhi.n	22f3c <_copy+0x16>
		(void)memcpy(to, from, from_len);
   22f32:	461a      	mov	r2, r3
   22f34:	f001 f9e6 	bl	24304 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   22f38:	4620      	mov	r0, r4
   22f3a:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   22f3c:	2400      	movs	r4, #0
   22f3e:	e7fb      	b.n	22f38 <_copy+0x12>

00022f40 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   22f40:	f001 ba0b 	b.w	2435a <memset>

00022f44 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   22f44:	09c3      	lsrs	r3, r0, #7
   22f46:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   22f4a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   22f4e:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   22f52:	b2c0      	uxtb	r0, r0
   22f54:	4770      	bx	lr

00022f56 <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   22f56:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22f5a:	4606      	mov	r6, r0
   22f5c:	b0a9      	sub	sp, #164	; 0xa4
   22f5e:	4688      	mov	r8, r1
   22f60:	4614      	mov	r4, r2
   22f62:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   22f64:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   22f68:	f7e4 f9c0 	bl	72ec <uECC_get_rng>
		if (!rng_function ||
   22f6c:	4603      	mov	r3, r0
   22f6e:	2800      	cmp	r0, #0
   22f70:	d03e      	beq.n	22ff0 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   22f72:	2140      	movs	r1, #64	; 0x40
   22f74:	a808      	add	r0, sp, #32
   22f76:	4798      	blx	r3
		if (!rng_function ||
   22f78:	b3d0      	cbz	r0, 22ff0 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   22f7a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   22f7e:	f112 031f 	adds.w	r3, r2, #31
   22f82:	bf48      	it	mi
   22f84:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   22f88:	466d      	mov	r5, sp
   22f8a:	464a      	mov	r2, r9
   22f8c:	a908      	add	r1, sp, #32
   22f8e:	4628      	mov	r0, r5
   22f90:	f343 1347 	sbfx	r3, r3, #5, #8
   22f94:	f000 f9fa 	bl	2338c <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   22f98:	4622      	mov	r2, r4
   22f9a:	4629      	mov	r1, r5
   22f9c:	a818      	add	r0, sp, #96	; 0x60
   22f9e:	f000 fe0f 	bl	23bc0 <EccPoint_compute_public_key>
   22fa2:	b318      	cbz	r0, 22fec <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   22fa4:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   22fa8:	1dd9      	adds	r1, r3, #7
   22faa:	bf48      	it	mi
   22fac:	f103 010e 	addmi.w	r1, r3, #14
   22fb0:	462a      	mov	r2, r5
   22fb2:	4640      	mov	r0, r8
   22fb4:	10c9      	asrs	r1, r1, #3
   22fb6:	f000 fe2b 	bl	23c10 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   22fba:	f994 1001 	ldrsb.w	r1, [r4, #1]
   22fbe:	aa18      	add	r2, sp, #96	; 0x60
   22fc0:	4630      	mov	r0, r6
   22fc2:	f000 fe25 	bl	23c10 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   22fc6:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   22fca:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   22fce:	ab18      	add	r3, sp, #96	; 0x60
   22fd0:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   22fd4:	1870      	adds	r0, r6, r1
   22fd6:	f000 fe1b 	bl	23c10 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   22fda:	2220      	movs	r2, #32
   22fdc:	2100      	movs	r1, #0
   22fde:	4628      	mov	r0, r5
   22fe0:	f001 f9bb 	bl	2435a <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   22fe4:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   22fe6:	b029      	add	sp, #164	; 0xa4
   22fe8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   22fec:	3f01      	subs	r7, #1
   22fee:	d1bb      	bne.n	22f68 <uECC_make_key+0x12>
        		return 0;
   22ff0:	2000      	movs	r0, #0
   22ff2:	e7f8      	b.n	22fe6 <uECC_make_key+0x90>

00022ff4 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   22ff4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   22ff8:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   22ffa:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   22ffe:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   23002:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   23006:	b0a4      	sub	sp, #144	; 0x90
   23008:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2300a:	1dda      	adds	r2, r3, #7
   2300c:	bf48      	it	mi
   2300e:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   23012:	ad04      	add	r5, sp, #16
{
   23014:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   23016:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   23018:	4628      	mov	r0, r5
   2301a:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   2301c:	9502      	str	r5, [sp, #8]
   2301e:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   23020:	f000 fe0a 	bl	23c38 <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   23024:	463a      	mov	r2, r7
   23026:	4649      	mov	r1, r9
   23028:	a814      	add	r0, sp, #80	; 0x50
   2302a:	f000 fe05 	bl	23c38 <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   2302e:	ab14      	add	r3, sp, #80	; 0x50
   23030:	eb09 0107 	add.w	r1, r9, r7
   23034:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   23038:	463a      	mov	r2, r7
   2303a:	f000 fdfd 	bl	23c38 <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   2303e:	4623      	mov	r3, r4
   23040:	4632      	mov	r2, r6
   23042:	4629      	mov	r1, r5
   23044:	4628      	mov	r0, r5
   23046:	f000 fd8f 	bl	23b68 <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   2304a:	fab0 f380 	clz	r3, r0
   2304e:	9401      	str	r4, [sp, #4]
   23050:	aa24      	add	r2, sp, #144	; 0x90
   23052:	095b      	lsrs	r3, r3, #5
   23054:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   23058:	8863      	ldrh	r3, [r4, #2]
   2305a:	3301      	adds	r3, #1
   2305c:	b21b      	sxth	r3, r3
   2305e:	9300      	str	r3, [sp, #0]
   23060:	f851 2c88 	ldr.w	r2, [r1, #-136]
   23064:	a914      	add	r1, sp, #80	; 0x50
   23066:	2300      	movs	r3, #0
   23068:	4608      	mov	r0, r1
   2306a:	f000 fcb0 	bl	239ce <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   2306e:	aa14      	add	r2, sp, #80	; 0x50
   23070:	4639      	mov	r1, r7
   23072:	4640      	mov	r0, r8
   23074:	f000 fdcc 	bl	23c10 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   23078:	4621      	mov	r1, r4
   2307a:	a814      	add	r0, sp, #80	; 0x50
   2307c:	f000 fc1c 	bl	238b8 <EccPoint_isZero>
   23080:	af02      	add	r7, sp, #8
   23082:	4604      	mov	r4, r0
   23084:	2208      	movs	r2, #8
   23086:	2100      	movs	r1, #0
   23088:	4638      	mov	r0, r7
   2308a:	f001 f966 	bl	2435a <memset>
   2308e:	2220      	movs	r2, #32
   23090:	2100      	movs	r1, #0
   23092:	4630      	mov	r0, r6
   23094:	f001 f961 	bl	2435a <memset>
   23098:	2220      	movs	r2, #32
   2309a:	2100      	movs	r1, #0
   2309c:	4628      	mov	r0, r5
   2309e:	f001 f95c 	bl	2435a <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   230a2:	fab4 f084 	clz	r0, r4
   230a6:	0940      	lsrs	r0, r0, #5
   230a8:	b024      	add	sp, #144	; 0x90
   230aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000230ae <uECC_vli_add>:
{
   230ae:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   230b0:	2400      	movs	r4, #0
{
   230b2:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   230b4:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   230b6:	b265      	sxtb	r5, r4
   230b8:	42ab      	cmp	r3, r5
   230ba:	dc00      	bgt.n	230be <uECC_vli_add+0x10>
}
   230bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   230be:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   230c2:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   230c6:	443d      	add	r5, r7
   230c8:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   230ca:	42af      	cmp	r7, r5
   230cc:	f000 0001 	and.w	r0, r0, #1
   230d0:	bf18      	it	ne
   230d2:	2000      	movne	r0, #0
		result[i] = sum;
   230d4:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   230d8:	bf88      	it	hi
   230da:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   230de:	3401      	adds	r4, #1
   230e0:	e7e9      	b.n	230b6 <uECC_vli_add+0x8>

000230e2 <uECC_vli_rshift1>:
	vli += num_words;
   230e2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   230e6:	2300      	movs	r3, #0
	while (vli-- > end) {
   230e8:	4288      	cmp	r0, r1
   230ea:	d300      	bcc.n	230ee <uECC_vli_rshift1+0xc>
}
   230ec:	4770      	bx	lr
		uECC_word_t temp = *vli;
   230ee:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   230f2:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   230f6:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   230f8:	07d3      	lsls	r3, r2, #31
   230fa:	e7f5      	b.n	230e8 <uECC_vli_rshift1+0x6>

000230fc <vli_modInv_update>:
	if (!EVEN(uv)) {
   230fc:	6803      	ldr	r3, [r0, #0]
{
   230fe:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   23100:	f013 0601 	ands.w	r6, r3, #1
{
   23104:	4605      	mov	r5, r0
   23106:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   23108:	d005      	beq.n	23116 <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2310a:	4613      	mov	r3, r2
   2310c:	460a      	mov	r2, r1
   2310e:	4601      	mov	r1, r0
   23110:	f7ff ffcd 	bl	230ae <uECC_vli_add>
   23114:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   23116:	4621      	mov	r1, r4
   23118:	4628      	mov	r0, r5
   2311a:	f7ff ffe2 	bl	230e2 <uECC_vli_rshift1>
	if (carry) {
   2311e:	b146      	cbz	r6, 23132 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   23120:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   23124:	3a01      	subs	r2, #1
   23126:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2312a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   2312e:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   23132:	bd70      	pop	{r4, r5, r6, pc}

00023134 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   23134:	f04f 0c00 	mov.w	ip, #0
{
   23138:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   2313c:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   2313e:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   23140:	fa4f f98c 	sxtb.w	r9, ip
   23144:	454b      	cmp	r3, r9
   23146:	dc16      	bgt.n	23176 <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23148:	f04f 36ff 	mov.w	r6, #4294967295
   2314c:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   23150:	9600      	str	r6, [sp, #0]
   23152:	f04f 0800 	mov.w	r8, #0
   23156:	9f00      	ldr	r7, [sp, #0]
   23158:	fa53 fe88 	uxtab	lr, r3, r8
   2315c:	fa4f fe8e 	sxtb.w	lr, lr
   23160:	45be      	cmp	lr, r7
   23162:	fa5f f688 	uxtb.w	r6, r8
   23166:	db26      	blt.n	231b6 <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   23168:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   2316c:	f840 4c04 	str.w	r4, [r0, #-4]
}
   23170:	b003      	add	sp, #12
   23172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   23176:	f04f 0e00 	mov.w	lr, #0
   2317a:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   2317e:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   23180:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23184:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23188:	fba6 6707 	umull	r6, r7, r6, r7
   2318c:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   2318e:	f10e 0e01 	add.w	lr, lr, #1
   23192:	417d      	adcs	r5, r7
   23194:	fa4f f68e 	sxtb.w	r6, lr
   23198:	f04f 0b00 	mov.w	fp, #0
   2319c:	bf28      	it	cs
   2319e:	f04f 0b01 	movcs.w	fp, #1
   231a2:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   231a4:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   231a6:	ddeb      	ble.n	23180 <uECC_vli_mult+0x4c>
		result[k] = r0;
   231a8:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   231ac:	462c      	mov	r4, r5
   231ae:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   231b2:	4645      	mov	r5, r8
   231b4:	e7c4      	b.n	23140 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   231b6:	3601      	adds	r6, #1
   231b8:	fa4f fc86 	sxtb.w	ip, r6
   231bc:	ebae 0a0c 	sub.w	sl, lr, ip
   231c0:	46a9      	mov	r9, r5
   231c2:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   231c6:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   231ca:	2500      	movs	r5, #0
   231cc:	459c      	cmp	ip, r3
   231ce:	db05      	blt.n	231dc <uECC_vli_mult+0xa8>
		result[k] = r0;
   231d0:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   231d4:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   231d8:	464c      	mov	r4, r9
   231da:	e7bc      	b.n	23156 <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   231dc:	f856 bb04 	ldr.w	fp, [r6], #4
   231e0:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   231e4:	fbab 7b07 	umull	r7, fp, fp, r7
   231e8:	f8cd b004 	str.w	fp, [sp, #4]
   231ec:	193c      	adds	r4, r7, r4
   231ee:	9f01      	ldr	r7, [sp, #4]
   231f0:	eb57 0909 	adcs.w	r9, r7, r9
   231f4:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   231f8:	f10c 0c01 	add.w	ip, ip, #1
   231fc:	bf28      	it	cs
   231fe:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   23202:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23204:	fa4f fc8c 	sxtb.w	ip, ip
   23208:	e7e0      	b.n	231cc <uECC_vli_mult+0x98>

0002320a <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2320a:	2300      	movs	r3, #0
{
   2320c:	b510      	push	{r4, lr}
		 vli[i] = 0;
   2320e:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   23210:	b25a      	sxtb	r2, r3
   23212:	4291      	cmp	r1, r2
   23214:	dc00      	bgt.n	23218 <uECC_vli_clear+0xe>
}
   23216:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   23218:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2321c:	3301      	adds	r3, #1
   2321e:	e7f7      	b.n	23210 <uECC_vli_clear+0x6>

00023220 <uECC_vli_isZero>:
{
   23220:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23222:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   23224:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   23226:	b25c      	sxtb	r4, r3
   23228:	42a1      	cmp	r1, r4
   2322a:	dc03      	bgt.n	23234 <uECC_vli_isZero+0x14>
}
   2322c:	fab2 f082 	clz	r0, r2
   23230:	0940      	lsrs	r0, r0, #5
   23232:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   23234:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   23238:	3301      	adds	r3, #1
   2323a:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   2323c:	e7f3      	b.n	23226 <uECC_vli_isZero+0x6>

0002323e <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   2323e:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23240:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23242:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   23246:	f001 011f 	and.w	r1, r1, #31
   2324a:	fa03 f101 	lsl.w	r1, r3, r1
}
   2324e:	4008      	ands	r0, r1
   23250:	4770      	bx	lr

00023252 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23252:	3901      	subs	r1, #1
   23254:	b24b      	sxtb	r3, r1
{
   23256:	4602      	mov	r2, r0
   23258:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   2325c:	2b00      	cmp	r3, #0
   2325e:	da03      	bge.n	23268 <uECC_vli_numBits+0x16>
	return (i + 1);
   23260:	3301      	adds	r3, #1
   23262:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   23264:	b938      	cbnz	r0, 23276 <uECC_vli_numBits+0x24>
   23266:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   23268:	f851 0904 	ldr.w	r0, [r1], #-4
   2326c:	2800      	cmp	r0, #0
   2326e:	d1f7      	bne.n	23260 <uECC_vli_numBits+0xe>
   23270:	3b01      	subs	r3, #1
   23272:	b25b      	sxtb	r3, r3
   23274:	e7f2      	b.n	2325c <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   23276:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   2327a:	3b01      	subs	r3, #1
   2327c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   23280:	2300      	movs	r3, #0
   23282:	b922      	cbnz	r2, 2328e <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   23284:	3801      	subs	r0, #1
   23286:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   2328a:	b200      	sxth	r0, r0
}
   2328c:	4770      	bx	lr
		digit >>= 1;
   2328e:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   23290:	3301      	adds	r3, #1
   23292:	e7f6      	b.n	23282 <uECC_vli_numBits+0x30>

00023294 <uECC_vli_set>:
{
   23294:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23296:	2300      	movs	r3, #0
   23298:	b25c      	sxtb	r4, r3
   2329a:	42a2      	cmp	r2, r4
   2329c:	dc00      	bgt.n	232a0 <uECC_vli_set+0xc>
}
   2329e:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   232a0:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   232a4:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   232a8:	3301      	adds	r3, #1
   232aa:	e7f5      	b.n	23298 <uECC_vli_set+0x4>

000232ac <uECC_vli_cmp_unsafe>:
{
   232ac:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   232ae:	3a01      	subs	r2, #1
   232b0:	b253      	sxtb	r3, r2
   232b2:	009a      	lsls	r2, r3, #2
   232b4:	2b00      	cmp	r3, #0
   232b6:	da01      	bge.n	232bc <uECC_vli_cmp_unsafe+0x10>
	return 0;
   232b8:	2000      	movs	r0, #0
}
   232ba:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   232bc:	5885      	ldr	r5, [r0, r2]
   232be:	588c      	ldr	r4, [r1, r2]
   232c0:	42a5      	cmp	r5, r4
   232c2:	d805      	bhi.n	232d0 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   232c4:	f1a2 0204 	sub.w	r2, r2, #4
   232c8:	d304      	bcc.n	232d4 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   232ca:	3b01      	subs	r3, #1
   232cc:	b25b      	sxtb	r3, r3
   232ce:	e7f1      	b.n	232b4 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   232d0:	2001      	movs	r0, #1
   232d2:	e7f2      	b.n	232ba <uECC_vli_cmp_unsafe+0xe>
			return -1;
   232d4:	f04f 30ff 	mov.w	r0, #4294967295
   232d8:	e7ef      	b.n	232ba <uECC_vli_cmp_unsafe+0xe>

000232da <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   232da:	3a01      	subs	r2, #1
   232dc:	b253      	sxtb	r3, r2
{
   232de:	b570      	push	{r4, r5, r6, lr}
   232e0:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   232e2:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   232e4:	2b00      	cmp	r3, #0
   232e6:	da03      	bge.n	232f0 <uECC_vli_equal+0x16>
}
   232e8:	1e20      	subs	r0, r4, #0
   232ea:	bf18      	it	ne
   232ec:	2001      	movne	r0, #1
   232ee:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   232f0:	5885      	ldr	r5, [r0, r2]
   232f2:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   232f4:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   232f6:	4075      	eors	r5, r6
   232f8:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   232fa:	b25b      	sxtb	r3, r3
   232fc:	3a04      	subs	r2, #4
   232fe:	e7f1      	b.n	232e4 <uECC_vli_equal+0xa>

00023300 <uECC_vli_sub>:
{
   23300:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   23302:	2400      	movs	r4, #0
{
   23304:	4606      	mov	r6, r0
   23306:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   23308:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2330a:	b265      	sxtb	r5, r4
   2330c:	4565      	cmp	r5, ip
   2330e:	db00      	blt.n	23312 <uECC_vli_sub+0x12>
}
   23310:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   23312:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23316:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   2331a:	1a3d      	subs	r5, r7, r0
   2331c:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   2331e:	42af      	cmp	r7, r5
   23320:	f000 0001 	and.w	r0, r0, #1
   23324:	bf18      	it	ne
   23326:	2000      	movne	r0, #0
		result[i] = diff;
   23328:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2332c:	bf38      	it	cc
   2332e:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   23332:	3401      	adds	r4, #1
   23334:	e7e9      	b.n	2330a <uECC_vli_sub+0xa>

00023336 <uECC_vli_modAdd>:
{
   23336:	b570      	push	{r4, r5, r6, lr}
   23338:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2333c:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   2333e:	4633      	mov	r3, r6
{
   23340:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   23342:	f7ff feb4 	bl	230ae <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   23346:	b930      	cbnz	r0, 23356 <uECC_vli_modAdd+0x20>
   23348:	4632      	mov	r2, r6
   2334a:	4621      	mov	r1, r4
   2334c:	4628      	mov	r0, r5
   2334e:	f7ff ffad 	bl	232ac <uECC_vli_cmp_unsafe>
   23352:	2801      	cmp	r0, #1
   23354:	d007      	beq.n	23366 <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   23356:	4633      	mov	r3, r6
   23358:	462a      	mov	r2, r5
   2335a:	4621      	mov	r1, r4
   2335c:	4620      	mov	r0, r4
}
   2335e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   23362:	f7ff bfcd 	b.w	23300 <uECC_vli_sub>
}
   23366:	bd70      	pop	{r4, r5, r6, pc}

00023368 <uECC_vli_modSub>:
{
   23368:	b570      	push	{r4, r5, r6, lr}
   2336a:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   2336e:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23370:	4633      	mov	r3, r6
{
   23372:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   23374:	f7ff ffc4 	bl	23300 <uECC_vli_sub>
	if (l_borrow) {
   23378:	b138      	cbz	r0, 2338a <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   2337a:	4633      	mov	r3, r6
   2337c:	462a      	mov	r2, r5
   2337e:	4621      	mov	r1, r4
   23380:	4620      	mov	r0, r4
}
   23382:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   23386:	f7ff be92 	b.w	230ae <uECC_vli_add>
}
   2338a:	bd70      	pop	{r4, r5, r6, pc}

0002338c <uECC_vli_mmod>:
{
   2338c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23390:	b0a5      	sub	sp, #148	; 0x94
   23392:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   23394:	ab14      	add	r3, sp, #80	; 0x50
   23396:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   2339a:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   2339c:	4629      	mov	r1, r5
   2339e:	4610      	mov	r0, r2
{
   233a0:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   233a2:	f7ff ff56 	bl	23252 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   233a6:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   233aa:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   233ac:	2c00      	cmp	r4, #0
   233ae:	4621      	mov	r1, r4
   233b0:	bfb8      	it	lt
   233b2:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   233b6:	4263      	negs	r3, r4
   233b8:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   233bc:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   233c0:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   233c4:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   233c6:	bf58      	it	pl
   233c8:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   233ca:	f7ff ff1e 	bl	2320a <uECC_vli_clear>
	if (bit_shift > 0) {
   233ce:	2e00      	cmp	r6, #0
   233d0:	b208      	sxth	r0, r1
   233d2:	dd2b      	ble.n	2342c <uECC_vli_mmod+0xa0>
   233d4:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   233d6:	2200      	movs	r2, #0
   233d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   233dc:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   233e0:	4613      	mov	r3, r2
   233e2:	429d      	cmp	r5, r3
   233e4:	d817      	bhi.n	23416 <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   233e6:	006b      	lsls	r3, r5, #1
   233e8:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   233ea:	ab04      	add	r3, sp, #16
   233ec:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   233f0:	1e6f      	subs	r7, r5, #1
   233f2:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   233f4:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   233f6:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   233fa:	2c00      	cmp	r4, #0
   233fc:	da54      	bge.n	234a8 <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   233fe:	ab24      	add	r3, sp, #144	; 0x90
   23400:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   23404:	462a      	mov	r2, r5
   23406:	f856 1c88 	ldr.w	r1, [r6, #-136]
   2340a:	4640      	mov	r0, r8
   2340c:	f7ff ff42 	bl	23294 <uECC_vli_set>
}
   23410:	b025      	add	sp, #148	; 0x94
   23412:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   23416:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   2341a:	fa0c f106 	lsl.w	r1, ip, r6
   2341e:	430a      	orrs	r2, r1
   23420:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23424:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23426:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2342a:	e7da      	b.n	233e2 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   2342c:	ab04      	add	r3, sp, #16
   2342e:	462a      	mov	r2, r5
   23430:	4639      	mov	r1, r7
   23432:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   23436:	f7ff ff2d 	bl	23294 <uECC_vli_set>
   2343a:	e7d4      	b.n	233e6 <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2343c:	fa0f fe82 	sxth.w	lr, r2
   23440:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   23444:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   23448:	ab24      	add	r3, sp, #144	; 0x90
   2344a:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   2344e:	3001      	adds	r0, #1
   23450:	f852 3c80 	ldr.w	r3, [r2, #-128]
   23454:	440b      	add	r3, r1
   23456:	ebbb 0303 	subs.w	r3, fp, r3
   2345a:	bf34      	ite	cc
   2345c:	2201      	movcc	r2, #1
   2345e:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   23460:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   23462:	bf18      	it	ne
   23464:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   23466:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   2346a:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   2346e:	9b01      	ldr	r3, [sp, #4]
   23470:	b242      	sxtb	r2, r0
   23472:	429a      	cmp	r2, r3
   23474:	dbe2      	blt.n	2343c <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   23476:	1a73      	subs	r3, r6, r1
   23478:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   2347a:	4629      	mov	r1, r5
   2347c:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   2347e:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   23480:	f7ff fe2f 	bl	230e2 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23484:	ab24      	add	r3, sp, #144	; 0x90
   23486:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2348a:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2348c:	f853 2c80 	ldr.w	r2, [r3, #-128]
   23490:	f857 3c80 	ldr.w	r3, [r7, #-128]
   23494:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   23498:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2349c:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   2349e:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   234a0:	f7ff fe1f 	bl	230e2 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   234a4:	b224      	sxth	r4, r4
   234a6:	e7a8      	b.n	233fa <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   234a8:	ab24      	add	r3, sp, #144	; 0x90
   234aa:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   234ac:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   234b0:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   234b2:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   234b6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   234ba:	e7d8      	b.n	2346e <uECC_vli_mmod+0xe2>

000234bc <uECC_vli_modMult_fast>:
{
   234bc:	b530      	push	{r4, r5, lr}
   234be:	461c      	mov	r4, r3
   234c0:	b091      	sub	sp, #68	; 0x44
   234c2:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   234c4:	f993 3000 	ldrsb.w	r3, [r3]
   234c8:	4668      	mov	r0, sp
   234ca:	f7ff fe33 	bl	23134 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   234ce:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   234d2:	4669      	mov	r1, sp
   234d4:	4628      	mov	r0, r5
   234d6:	4798      	blx	r3
}
   234d8:	b011      	add	sp, #68	; 0x44
   234da:	bd30      	pop	{r4, r5, pc}

000234dc <uECC_vli_modSquare_fast>:
{
   234dc:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   234de:	460a      	mov	r2, r1
   234e0:	f7ff bfec 	b.w	234bc <uECC_vli_modMult_fast>

000234e4 <double_jacobian_default>:
{
   234e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   234e8:	f993 6000 	ldrsb.w	r6, [r3]
{
   234ec:	b092      	sub	sp, #72	; 0x48
   234ee:	4604      	mov	r4, r0
   234f0:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   234f2:	4610      	mov	r0, r2
   234f4:	4631      	mov	r1, r6
{
   234f6:	4615      	mov	r5, r2
   234f8:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   234fa:	f7ff fe91 	bl	23220 <uECC_vli_isZero>
   234fe:	2800      	cmp	r0, #0
   23500:	f040 8091 	bne.w	23626 <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   23504:	463a      	mov	r2, r7
   23506:	4649      	mov	r1, r9
   23508:	a802      	add	r0, sp, #8
   2350a:	f7ff ffe7 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   2350e:	463b      	mov	r3, r7
   23510:	aa02      	add	r2, sp, #8
   23512:	4621      	mov	r1, r4
   23514:	a80a      	add	r0, sp, #40	; 0x28
   23516:	f7ff ffd1 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2351a:	a902      	add	r1, sp, #8
   2351c:	4608      	mov	r0, r1
   2351e:	463a      	mov	r2, r7
   23520:	f7ff ffdc 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   23524:	463b      	mov	r3, r7
   23526:	462a      	mov	r2, r5
   23528:	4649      	mov	r1, r9
   2352a:	4648      	mov	r0, r9
   2352c:	f7ff ffc6 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23530:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   23534:	463a      	mov	r2, r7
   23536:	4629      	mov	r1, r5
   23538:	4628      	mov	r0, r5
   2353a:	f7ff ffcf 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   2353e:	4643      	mov	r3, r8
   23540:	462a      	mov	r2, r5
   23542:	4621      	mov	r1, r4
   23544:	4620      	mov	r0, r4
   23546:	9600      	str	r6, [sp, #0]
   23548:	f7ff fef5 	bl	23336 <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   2354c:	4643      	mov	r3, r8
   2354e:	462a      	mov	r2, r5
   23550:	4629      	mov	r1, r5
   23552:	4628      	mov	r0, r5
   23554:	9600      	str	r6, [sp, #0]
   23556:	f7ff feee 	bl	23336 <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   2355a:	4643      	mov	r3, r8
   2355c:	462a      	mov	r2, r5
   2355e:	4621      	mov	r1, r4
   23560:	4628      	mov	r0, r5
   23562:	9600      	str	r6, [sp, #0]
   23564:	f7ff ff00 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   23568:	463b      	mov	r3, r7
   2356a:	462a      	mov	r2, r5
   2356c:	4621      	mov	r1, r4
   2356e:	4620      	mov	r0, r4
   23570:	f7ff ffa4 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   23574:	4643      	mov	r3, r8
   23576:	4622      	mov	r2, r4
   23578:	4621      	mov	r1, r4
   2357a:	4628      	mov	r0, r5
   2357c:	9600      	str	r6, [sp, #0]
   2357e:	f7ff feda 	bl	23336 <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   23582:	4643      	mov	r3, r8
   23584:	9600      	str	r6, [sp, #0]
   23586:	462a      	mov	r2, r5
   23588:	4621      	mov	r1, r4
   2358a:	4620      	mov	r0, r4
   2358c:	f7ff fed3 	bl	23336 <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23590:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   23592:	07db      	lsls	r3, r3, #31
   23594:	d54a      	bpl.n	2362c <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23596:	4633      	mov	r3, r6
   23598:	4642      	mov	r2, r8
   2359a:	4621      	mov	r1, r4
   2359c:	4620      	mov	r0, r4
   2359e:	f7ff fd86 	bl	230ae <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   235a2:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   235a4:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   235a6:	4620      	mov	r0, r4
   235a8:	f7ff fd9b 	bl	230e2 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   235ac:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   235b0:	3b01      	subs	r3, #1
   235b2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   235b6:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   235ba:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   235be:	463a      	mov	r2, r7
   235c0:	4621      	mov	r1, r4
   235c2:	4628      	mov	r0, r5
   235c4:	f7ff ff8a 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   235c8:	4643      	mov	r3, r8
   235ca:	aa0a      	add	r2, sp, #40	; 0x28
   235cc:	4629      	mov	r1, r5
   235ce:	4628      	mov	r0, r5
   235d0:	9600      	str	r6, [sp, #0]
   235d2:	f7ff fec9 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   235d6:	4643      	mov	r3, r8
   235d8:	aa0a      	add	r2, sp, #40	; 0x28
   235da:	4629      	mov	r1, r5
   235dc:	4628      	mov	r0, r5
   235de:	9600      	str	r6, [sp, #0]
   235e0:	f7ff fec2 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   235e4:	a90a      	add	r1, sp, #40	; 0x28
   235e6:	4608      	mov	r0, r1
   235e8:	4643      	mov	r3, r8
   235ea:	462a      	mov	r2, r5
   235ec:	9600      	str	r6, [sp, #0]
   235ee:	f7ff febb 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   235f2:	463b      	mov	r3, r7
   235f4:	aa0a      	add	r2, sp, #40	; 0x28
   235f6:	4621      	mov	r1, r4
   235f8:	4620      	mov	r0, r4
   235fa:	f7ff ff5f 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   235fe:	aa02      	add	r2, sp, #8
   23600:	4643      	mov	r3, r8
   23602:	4610      	mov	r0, r2
   23604:	4621      	mov	r1, r4
   23606:	9600      	str	r6, [sp, #0]
   23608:	f7ff feae 	bl	23368 <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   2360c:	4632      	mov	r2, r6
   2360e:	4629      	mov	r1, r5
   23610:	4620      	mov	r0, r4
   23612:	f7ff fe3f 	bl	23294 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   23616:	4649      	mov	r1, r9
   23618:	4628      	mov	r0, r5
   2361a:	f7ff fe3b 	bl	23294 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   2361e:	a902      	add	r1, sp, #8
   23620:	4648      	mov	r0, r9
   23622:	f7ff fe37 	bl	23294 <uECC_vli_set>
}
   23626:	b012      	add	sp, #72	; 0x48
   23628:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   2362c:	4631      	mov	r1, r6
   2362e:	4620      	mov	r0, r4
   23630:	f7ff fd57 	bl	230e2 <uECC_vli_rshift1>
   23634:	e7c3      	b.n	235be <double_jacobian_default+0xda>

00023636 <x_side_default>:
{
   23636:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2363a:	4615      	mov	r5, r2
   2363c:	b08a      	sub	sp, #40	; 0x28
   2363e:	4604      	mov	r4, r0
   23640:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23642:	221c      	movs	r2, #28
   23644:	2100      	movs	r1, #0
   23646:	a803      	add	r0, sp, #12
   23648:	f000 fe87 	bl	2435a <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   2364c:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   2364e:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   23652:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   23654:	462a      	mov	r2, r5
   23656:	4631      	mov	r1, r6
   23658:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   2365a:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   2365c:	f7ff ff3e 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   23660:	463b      	mov	r3, r7
   23662:	aa02      	add	r2, sp, #8
   23664:	4621      	mov	r1, r4
   23666:	4620      	mov	r0, r4
   23668:	f8cd 8000 	str.w	r8, [sp]
   2366c:	f7ff fe7c 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   23670:	462b      	mov	r3, r5
   23672:	4632      	mov	r2, r6
   23674:	4621      	mov	r1, r4
   23676:	4620      	mov	r0, r4
   23678:	f7ff ff20 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   2367c:	f8cd 8000 	str.w	r8, [sp]
   23680:	463b      	mov	r3, r7
   23682:	f105 0284 	add.w	r2, r5, #132	; 0x84
   23686:	4621      	mov	r1, r4
   23688:	4620      	mov	r0, r4
   2368a:	f7ff fe54 	bl	23336 <uECC_vli_modAdd>
}
   2368e:	b00a      	add	sp, #40	; 0x28
   23690:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00023694 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   23694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23698:	b09a      	sub	sp, #104	; 0x68
   2369a:	4616      	mov	r6, r2
   2369c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   236a0:	4644      	mov	r4, r8
{
   236a2:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   236a4:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   236a8:	9500      	str	r5, [sp, #0]
{
   236aa:	4607      	mov	r7, r0
   236ac:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   236ae:	4623      	mov	r3, r4
   236b0:	4602      	mov	r2, r0
   236b2:	4631      	mov	r1, r6
   236b4:	a802      	add	r0, sp, #8
   236b6:	f7ff fe57 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   236ba:	a902      	add	r1, sp, #8
   236bc:	4642      	mov	r2, r8
   236be:	4608      	mov	r0, r1
   236c0:	f7ff ff0c 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   236c4:	4643      	mov	r3, r8
   236c6:	aa02      	add	r2, sp, #8
   236c8:	4639      	mov	r1, r7
   236ca:	4638      	mov	r0, r7
   236cc:	f7ff fef6 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   236d0:	4643      	mov	r3, r8
   236d2:	aa02      	add	r2, sp, #8
   236d4:	4631      	mov	r1, r6
   236d6:	4630      	mov	r0, r6
   236d8:	f7ff fef0 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   236dc:	4623      	mov	r3, r4
   236de:	4652      	mov	r2, sl
   236e0:	4649      	mov	r1, r9
   236e2:	a802      	add	r0, sp, #8
   236e4:	9500      	str	r5, [sp, #0]
   236e6:	f7ff fe26 	bl	23336 <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   236ea:	4623      	mov	r3, r4
   236ec:	4652      	mov	r2, sl
   236ee:	4649      	mov	r1, r9
   236f0:	4648      	mov	r0, r9
   236f2:	9500      	str	r5, [sp, #0]
   236f4:	f7ff fe38 	bl	23368 <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   236f8:	4623      	mov	r3, r4
   236fa:	463a      	mov	r2, r7
   236fc:	4631      	mov	r1, r6
   236fe:	a80a      	add	r0, sp, #40	; 0x28
   23700:	9500      	str	r5, [sp, #0]
   23702:	f7ff fe31 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   23706:	4643      	mov	r3, r8
   23708:	aa0a      	add	r2, sp, #40	; 0x28
   2370a:	4651      	mov	r1, sl
   2370c:	4650      	mov	r0, sl
   2370e:	f7ff fed5 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   23712:	4623      	mov	r3, r4
   23714:	4632      	mov	r2, r6
   23716:	4639      	mov	r1, r7
   23718:	a80a      	add	r0, sp, #40	; 0x28
   2371a:	9500      	str	r5, [sp, #0]
   2371c:	f7ff fe0b 	bl	23336 <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   23720:	4642      	mov	r2, r8
   23722:	4649      	mov	r1, r9
   23724:	4630      	mov	r0, r6
   23726:	f7ff fed9 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2372a:	4623      	mov	r3, r4
   2372c:	aa0a      	add	r2, sp, #40	; 0x28
   2372e:	4631      	mov	r1, r6
   23730:	4630      	mov	r0, r6
   23732:	9500      	str	r5, [sp, #0]
   23734:	f7ff fe18 	bl	23368 <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   23738:	4623      	mov	r3, r4
   2373a:	4632      	mov	r2, r6
   2373c:	4639      	mov	r1, r7
   2373e:	a812      	add	r0, sp, #72	; 0x48
   23740:	9500      	str	r5, [sp, #0]
   23742:	f7ff fe11 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   23746:	4643      	mov	r3, r8
   23748:	aa12      	add	r2, sp, #72	; 0x48
   2374a:	4649      	mov	r1, r9
   2374c:	4648      	mov	r0, r9
   2374e:	f7ff feb5 	bl	234bc <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   23752:	4623      	mov	r3, r4
   23754:	4652      	mov	r2, sl
   23756:	4649      	mov	r1, r9
   23758:	4648      	mov	r0, r9
   2375a:	9500      	str	r5, [sp, #0]
   2375c:	f7ff fe04 	bl	23368 <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   23760:	4642      	mov	r2, r8
   23762:	a902      	add	r1, sp, #8
   23764:	a812      	add	r0, sp, #72	; 0x48
   23766:	f7ff feb9 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   2376a:	a912      	add	r1, sp, #72	; 0x48
   2376c:	4623      	mov	r3, r4
   2376e:	aa0a      	add	r2, sp, #40	; 0x28
   23770:	4608      	mov	r0, r1
   23772:	9500      	str	r5, [sp, #0]
   23774:	f7ff fdf8 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   23778:	4623      	mov	r3, r4
   2377a:	463a      	mov	r2, r7
   2377c:	a912      	add	r1, sp, #72	; 0x48
   2377e:	a80a      	add	r0, sp, #40	; 0x28
   23780:	9500      	str	r5, [sp, #0]
   23782:	f7ff fdf1 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   23786:	a90a      	add	r1, sp, #40	; 0x28
   23788:	4643      	mov	r3, r8
   2378a:	aa02      	add	r2, sp, #8
   2378c:	4608      	mov	r0, r1
   2378e:	f7ff fe95 	bl	234bc <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   23792:	4623      	mov	r3, r4
   23794:	4652      	mov	r2, sl
   23796:	a90a      	add	r1, sp, #40	; 0x28
   23798:	4650      	mov	r0, sl
   2379a:	9500      	str	r5, [sp, #0]
   2379c:	f7ff fde4 	bl	23368 <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   237a0:	462a      	mov	r2, r5
   237a2:	a912      	add	r1, sp, #72	; 0x48
   237a4:	4638      	mov	r0, r7
   237a6:	f7ff fd75 	bl	23294 <uECC_vli_set>
}
   237aa:	b01a      	add	sp, #104	; 0x68
   237ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000237b0 <uECC_vli_modInv>:
{
   237b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   237b2:	460f      	mov	r7, r1
   237b4:	b0a1      	sub	sp, #132	; 0x84
   237b6:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   237b8:	4619      	mov	r1, r3
   237ba:	4638      	mov	r0, r7
{
   237bc:	4615      	mov	r5, r2
   237be:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   237c0:	f7ff fd2e 	bl	23220 <uECC_vli_isZero>
   237c4:	b128      	cbz	r0, 237d2 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   237c6:	4630      	mov	r0, r6
}
   237c8:	b021      	add	sp, #132	; 0x84
   237ca:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   237ce:	f7ff bd1c 	b.w	2320a <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   237d2:	4622      	mov	r2, r4
   237d4:	4639      	mov	r1, r7
   237d6:	4668      	mov	r0, sp
   237d8:	f7ff fd5c 	bl	23294 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   237dc:	4629      	mov	r1, r5
   237de:	a808      	add	r0, sp, #32
   237e0:	f7ff fd58 	bl	23294 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   237e4:	a810      	add	r0, sp, #64	; 0x40
   237e6:	4621      	mov	r1, r4
   237e8:	f7ff fd0f 	bl	2320a <uECC_vli_clear>
	u[0] = 1;
   237ec:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   237ee:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   237f0:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   237f2:	f7ff fd0a 	bl	2320a <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   237f6:	4622      	mov	r2, r4
   237f8:	a908      	add	r1, sp, #32
   237fa:	4668      	mov	r0, sp
   237fc:	f7ff fd56 	bl	232ac <uECC_vli_cmp_unsafe>
   23800:	b930      	cbnz	r0, 23810 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   23802:	4622      	mov	r2, r4
   23804:	a910      	add	r1, sp, #64	; 0x40
   23806:	4630      	mov	r0, r6
   23808:	f7ff fd44 	bl	23294 <uECC_vli_set>
}
   2380c:	b021      	add	sp, #132	; 0x84
   2380e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   23810:	9b00      	ldr	r3, [sp, #0]
   23812:	07da      	lsls	r2, r3, #31
   23814:	d409      	bmi.n	2382a <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   23816:	4621      	mov	r1, r4
   23818:	4668      	mov	r0, sp
   2381a:	f7ff fc62 	bl	230e2 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   2381e:	4622      	mov	r2, r4
   23820:	4629      	mov	r1, r5
   23822:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   23824:	f7ff fc6a 	bl	230fc <vli_modInv_update>
   23828:	e7e5      	b.n	237f6 <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   2382a:	9b08      	ldr	r3, [sp, #32]
   2382c:	07db      	lsls	r3, r3, #31
   2382e:	d407      	bmi.n	23840 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   23830:	4621      	mov	r1, r4
   23832:	a808      	add	r0, sp, #32
   23834:	f7ff fc55 	bl	230e2 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   23838:	4622      	mov	r2, r4
   2383a:	4629      	mov	r1, r5
   2383c:	a818      	add	r0, sp, #96	; 0x60
   2383e:	e7f1      	b.n	23824 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   23840:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   23842:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   23844:	dd1c      	ble.n	23880 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   23846:	aa08      	add	r2, sp, #32
   23848:	4669      	mov	r1, sp
   2384a:	4668      	mov	r0, sp
   2384c:	f7ff fd58 	bl	23300 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   23850:	4621      	mov	r1, r4
   23852:	4668      	mov	r0, sp
   23854:	f7ff fc45 	bl	230e2 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   23858:	4622      	mov	r2, r4
   2385a:	a918      	add	r1, sp, #96	; 0x60
   2385c:	a810      	add	r0, sp, #64	; 0x40
   2385e:	f7ff fd25 	bl	232ac <uECC_vli_cmp_unsafe>
   23862:	2800      	cmp	r0, #0
   23864:	da05      	bge.n	23872 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   23866:	a910      	add	r1, sp, #64	; 0x40
   23868:	4623      	mov	r3, r4
   2386a:	462a      	mov	r2, r5
   2386c:	4608      	mov	r0, r1
   2386e:	f7ff fc1e 	bl	230ae <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   23872:	a910      	add	r1, sp, #64	; 0x40
   23874:	4623      	mov	r3, r4
   23876:	aa18      	add	r2, sp, #96	; 0x60
   23878:	4608      	mov	r0, r1
   2387a:	f7ff fd41 	bl	23300 <uECC_vli_sub>
   2387e:	e7ce      	b.n	2381e <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   23880:	466a      	mov	r2, sp
   23882:	a808      	add	r0, sp, #32
   23884:	f7ff fd3c 	bl	23300 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   23888:	4621      	mov	r1, r4
   2388a:	a808      	add	r0, sp, #32
   2388c:	f7ff fc29 	bl	230e2 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   23890:	4622      	mov	r2, r4
   23892:	a910      	add	r1, sp, #64	; 0x40
   23894:	a818      	add	r0, sp, #96	; 0x60
   23896:	f7ff fd09 	bl	232ac <uECC_vli_cmp_unsafe>
   2389a:	2800      	cmp	r0, #0
   2389c:	da05      	bge.n	238aa <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   2389e:	a918      	add	r1, sp, #96	; 0x60
   238a0:	4623      	mov	r3, r4
   238a2:	462a      	mov	r2, r5
   238a4:	4608      	mov	r0, r1
   238a6:	f7ff fc02 	bl	230ae <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   238aa:	a918      	add	r1, sp, #96	; 0x60
   238ac:	4623      	mov	r3, r4
   238ae:	aa10      	add	r2, sp, #64	; 0x40
   238b0:	4608      	mov	r0, r1
   238b2:	f7ff fd25 	bl	23300 <uECC_vli_sub>
   238b6:	e7bf      	b.n	23838 <uECC_vli_modInv+0x88>

000238b8 <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   238b8:	7809      	ldrb	r1, [r1, #0]
   238ba:	0049      	lsls	r1, r1, #1
   238bc:	b249      	sxtb	r1, r1
   238be:	f7ff bcaf 	b.w	23220 <uECC_vli_isZero>

000238c2 <apply_z>:
{
   238c2:	b5f0      	push	{r4, r5, r6, r7, lr}
   238c4:	4615      	mov	r5, r2
   238c6:	b089      	sub	sp, #36	; 0x24
   238c8:	461c      	mov	r4, r3
   238ca:	4607      	mov	r7, r0
   238cc:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   238ce:	461a      	mov	r2, r3
   238d0:	4629      	mov	r1, r5
   238d2:	4668      	mov	r0, sp
   238d4:	f7ff fe02 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   238d8:	4623      	mov	r3, r4
   238da:	466a      	mov	r2, sp
   238dc:	4639      	mov	r1, r7
   238de:	4638      	mov	r0, r7
   238e0:	f7ff fdec 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   238e4:	4623      	mov	r3, r4
   238e6:	462a      	mov	r2, r5
   238e8:	4669      	mov	r1, sp
   238ea:	4668      	mov	r0, sp
   238ec:	f7ff fde6 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   238f0:	4623      	mov	r3, r4
   238f2:	466a      	mov	r2, sp
   238f4:	4631      	mov	r1, r6
   238f6:	4630      	mov	r0, r6
   238f8:	f7ff fde0 	bl	234bc <uECC_vli_modMult_fast>
}
   238fc:	b009      	add	sp, #36	; 0x24
   238fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023900 <XYcZ_add>:
{
   23900:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23904:	b08a      	sub	sp, #40	; 0x28
   23906:	4614      	mov	r4, r2
   23908:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   2390c:	4655      	mov	r5, sl
{
   2390e:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   23910:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23914:	9600      	str	r6, [sp, #0]
{
   23916:	4680      	mov	r8, r0
   23918:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2391a:	462b      	mov	r3, r5
   2391c:	4602      	mov	r2, r0
   2391e:	4621      	mov	r1, r4
   23920:	a802      	add	r0, sp, #8
   23922:	f7ff fd21 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   23926:	a902      	add	r1, sp, #8
   23928:	4652      	mov	r2, sl
   2392a:	4608      	mov	r0, r1
   2392c:	f7ff fdd6 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23930:	4653      	mov	r3, sl
   23932:	aa02      	add	r2, sp, #8
   23934:	4641      	mov	r1, r8
   23936:	4640      	mov	r0, r8
   23938:	f7ff fdc0 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   2393c:	4653      	mov	r3, sl
   2393e:	aa02      	add	r2, sp, #8
   23940:	4621      	mov	r1, r4
   23942:	4620      	mov	r0, r4
   23944:	f7ff fdba 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   23948:	462b      	mov	r3, r5
   2394a:	464a      	mov	r2, r9
   2394c:	4639      	mov	r1, r7
   2394e:	4638      	mov	r0, r7
   23950:	9600      	str	r6, [sp, #0]
   23952:	f7ff fd09 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   23956:	4652      	mov	r2, sl
   23958:	4639      	mov	r1, r7
   2395a:	a802      	add	r0, sp, #8
   2395c:	f7ff fdbe 	bl	234dc <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   23960:	a902      	add	r1, sp, #8
   23962:	462b      	mov	r3, r5
   23964:	4642      	mov	r2, r8
   23966:	4608      	mov	r0, r1
   23968:	9600      	str	r6, [sp, #0]
   2396a:	f7ff fcfd 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   2396e:	a902      	add	r1, sp, #8
   23970:	462b      	mov	r3, r5
   23972:	4622      	mov	r2, r4
   23974:	4608      	mov	r0, r1
   23976:	9600      	str	r6, [sp, #0]
   23978:	f7ff fcf6 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   2397c:	462b      	mov	r3, r5
   2397e:	4642      	mov	r2, r8
   23980:	4621      	mov	r1, r4
   23982:	4620      	mov	r0, r4
   23984:	9600      	str	r6, [sp, #0]
   23986:	f7ff fcef 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   2398a:	4653      	mov	r3, sl
   2398c:	4622      	mov	r2, r4
   2398e:	4649      	mov	r1, r9
   23990:	4648      	mov	r0, r9
   23992:	f7ff fd93 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   23996:	462b      	mov	r3, r5
   23998:	aa02      	add	r2, sp, #8
   2399a:	4641      	mov	r1, r8
   2399c:	4620      	mov	r0, r4
   2399e:	9600      	str	r6, [sp, #0]
   239a0:	f7ff fce2 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   239a4:	4653      	mov	r3, sl
   239a6:	4622      	mov	r2, r4
   239a8:	4639      	mov	r1, r7
   239aa:	4638      	mov	r0, r7
   239ac:	f7ff fd86 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   239b0:	462b      	mov	r3, r5
   239b2:	464a      	mov	r2, r9
   239b4:	4639      	mov	r1, r7
   239b6:	4638      	mov	r0, r7
   239b8:	9600      	str	r6, [sp, #0]
   239ba:	f7ff fcd5 	bl	23368 <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   239be:	4632      	mov	r2, r6
   239c0:	a902      	add	r1, sp, #8
   239c2:	4620      	mov	r0, r4
   239c4:	f7ff fc66 	bl	23294 <uECC_vli_set>
}
   239c8:	b00a      	add	sp, #40	; 0x28
   239ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000239ce <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   239ce:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   239d2:	b0b1      	sub	sp, #196	; 0xc4
   239d4:	e9cd 0103 	strd	r0, r1, [sp, #12]
   239d8:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   239da:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   239de:	a818      	add	r0, sp, #96	; 0x60
{
   239e0:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   239e2:	463a      	mov	r2, r7
{
   239e4:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   239e6:	f7ff fc55 	bl	23294 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   239ea:	00bb      	lsls	r3, r7, #2
   239ec:	9305      	str	r3, [sp, #20]
   239ee:	9b04      	ldr	r3, [sp, #16]
   239f0:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   239f4:	4619      	mov	r1, r3
   239f6:	a828      	add	r0, sp, #160	; 0xa0
   239f8:	9302      	str	r3, [sp, #8]
   239fa:	f7ff fc4b 	bl	23294 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   239fe:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   23a02:	2d00      	cmp	r5, #0
   23a04:	f000 8086 	beq.w	23b14 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   23a08:	4632      	mov	r2, r6
   23a0a:	4629      	mov	r1, r5
   23a0c:	a808      	add	r0, sp, #32
   23a0e:	f7ff fc41 	bl	23294 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   23a12:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   23a16:	4632      	mov	r2, r6
   23a18:	a918      	add	r1, sp, #96	; 0x60
   23a1a:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   23a1c:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   23a20:	f7ff fc38 	bl	23294 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   23a24:	a928      	add	r1, sp, #160	; 0xa0
   23a26:	4648      	mov	r0, r9
   23a28:	f7ff fc34 	bl	23294 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   23a2c:	4623      	mov	r3, r4
   23a2e:	aa08      	add	r2, sp, #32
   23a30:	a818      	add	r0, sp, #96	; 0x60
   23a32:	f7ff ff46 	bl	238c2 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   23a36:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   23a3a:	4623      	mov	r3, r4
   23a3c:	aa08      	add	r2, sp, #32
   23a3e:	a928      	add	r1, sp, #160	; 0xa0
   23a40:	a818      	add	r0, sp, #96	; 0x60
   23a42:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   23a44:	4623      	mov	r3, r4
   23a46:	aa08      	add	r2, sp, #32
   23a48:	4649      	mov	r1, r9
   23a4a:	4640      	mov	r0, r8
   23a4c:	f7ff ff39 	bl	238c2 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   23a50:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   23a54:	3d02      	subs	r5, #2
   23a56:	b22d      	sxth	r5, r5
   23a58:	2d00      	cmp	r5, #0
   23a5a:	dc62      	bgt.n	23b22 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23a5c:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23a60:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23a62:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23a66:	ab10      	add	r3, sp, #64	; 0x40
   23a68:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   23a6c:	43ed      	mvns	r5, r5
   23a6e:	ab20      	add	r3, sp, #128	; 0x80
   23a70:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   23a74:	f005 0501 	and.w	r5, r5, #1
   23a78:	ab10      	add	r3, sp, #64	; 0x40
   23a7a:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   23a7e:	ab20      	add	r3, sp, #128	; 0x80
   23a80:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   23a84:	462b      	mov	r3, r5
   23a86:	464a      	mov	r2, r9
   23a88:	4631      	mov	r1, r6
   23a8a:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23a8c:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23a90:	f7ff fe00 	bl	23694 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23a94:	4653      	mov	r3, sl
   23a96:	aa10      	add	r2, sp, #64	; 0x40
   23a98:	a918      	add	r1, sp, #96	; 0x60
   23a9a:	a808      	add	r0, sp, #32
   23a9c:	9700      	str	r7, [sp, #0]
   23a9e:	f7ff fc63 	bl	23368 <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   23aa2:	a908      	add	r1, sp, #32
   23aa4:	4623      	mov	r3, r4
   23aa6:	4632      	mov	r2, r6
   23aa8:	4608      	mov	r0, r1
   23aaa:	f7ff fd07 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   23aae:	a908      	add	r1, sp, #32
   23ab0:	9a04      	ldr	r2, [sp, #16]
   23ab2:	4623      	mov	r3, r4
   23ab4:	4608      	mov	r0, r1
   23ab6:	f7ff fd01 	bl	234bc <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   23aba:	a908      	add	r1, sp, #32
   23abc:	463b      	mov	r3, r7
   23abe:	4652      	mov	r2, sl
   23ac0:	4608      	mov	r0, r1
   23ac2:	f7ff fe75 	bl	237b0 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   23ac6:	a908      	add	r1, sp, #32
   23ac8:	9a02      	ldr	r2, [sp, #8]
   23aca:	4623      	mov	r3, r4
   23acc:	4608      	mov	r0, r1
   23ace:	f7ff fcf5 	bl	234bc <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   23ad2:	a908      	add	r1, sp, #32
   23ad4:	4623      	mov	r3, r4
   23ad6:	4642      	mov	r2, r8
   23ad8:	4608      	mov	r0, r1
   23ada:	f7ff fcef 	bl	234bc <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23ade:	4633      	mov	r3, r6
   23ae0:	4642      	mov	r2, r8
   23ae2:	4629      	mov	r1, r5
   23ae4:	4648      	mov	r0, r9
   23ae6:	9400      	str	r4, [sp, #0]
   23ae8:	f7ff ff0a 	bl	23900 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   23aec:	4623      	mov	r3, r4
   23aee:	aa08      	add	r2, sp, #32
   23af0:	a920      	add	r1, sp, #128	; 0x80
   23af2:	a810      	add	r0, sp, #64	; 0x40
   23af4:	f7ff fee5 	bl	238c2 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   23af8:	9803      	ldr	r0, [sp, #12]
   23afa:	463a      	mov	r2, r7
   23afc:	a910      	add	r1, sp, #64	; 0x40
   23afe:	f7ff fbc9 	bl	23294 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   23b02:	9803      	ldr	r0, [sp, #12]
   23b04:	9b05      	ldr	r3, [sp, #20]
   23b06:	a920      	add	r1, sp, #128	; 0x80
   23b08:	4418      	add	r0, r3
   23b0a:	f7ff fbc3 	bl	23294 <uECC_vli_set>
}
   23b0e:	b031      	add	sp, #196	; 0xc4
   23b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   23b14:	4631      	mov	r1, r6
   23b16:	a808      	add	r0, sp, #32
   23b18:	f7ff fb77 	bl	2320a <uECC_vli_clear>
		z[0] = 1;
   23b1c:	2301      	movs	r3, #1
   23b1e:	9308      	str	r3, [sp, #32]
   23b20:	e777      	b.n	23a12 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   23b22:	4629      	mov	r1, r5
   23b24:	4650      	mov	r0, sl
   23b26:	f7ff fb8a 	bl	2323e <uECC_vli_testBit>
   23b2a:	fab0 f680 	clz	r6, r0
   23b2e:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23b30:	f1c6 0101 	rsb	r1, r6, #1
   23b34:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   23b38:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   23b3c:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   23b40:	4633      	mov	r3, r6
   23b42:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   23b46:	465a      	mov	r2, fp
   23b48:	9400      	str	r4, [sp, #0]
   23b4a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   23b4e:	f7ff fda1 	bl	23694 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23b52:	9907      	ldr	r1, [sp, #28]
   23b54:	9806      	ldr	r0, [sp, #24]
   23b56:	9400      	str	r4, [sp, #0]
   23b58:	460b      	mov	r3, r1
   23b5a:	4602      	mov	r2, r0
   23b5c:	4631      	mov	r1, r6
   23b5e:	4658      	mov	r0, fp
   23b60:	f7ff fece 	bl	23900 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   23b64:	3d01      	subs	r5, #1
   23b66:	e776      	b.n	23a56 <EccPoint_mult+0x88>

00023b68 <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   23b68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23b6c:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   23b70:	f119 081f 	adds.w	r8, r9, #31
{
   23b74:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23b76:	bf48      	it	mi
   23b78:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   23b7c:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23b7e:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23b82:	3524      	adds	r5, #36	; 0x24
   23b84:	4601      	mov	r1, r0
{
   23b86:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23b88:	4643      	mov	r3, r8
   23b8a:	462a      	mov	r2, r5
   23b8c:	4630      	mov	r0, r6
   23b8e:	f7ff fa8e 	bl	230ae <uECC_vli_add>
   23b92:	4604      	mov	r4, r0
   23b94:	b990      	cbnz	r0, 23bbc <regularize_k+0x54>
   23b96:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   23b9a:	da06      	bge.n	23baa <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   23b9c:	4649      	mov	r1, r9
   23b9e:	4630      	mov	r0, r6
   23ba0:	f7ff fb4d 	bl	2323e <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   23ba4:	1e04      	subs	r4, r0, #0
   23ba6:	bf18      	it	ne
   23ba8:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   23baa:	4643      	mov	r3, r8
   23bac:	462a      	mov	r2, r5
   23bae:	4631      	mov	r1, r6
   23bb0:	4638      	mov	r0, r7
   23bb2:	f7ff fa7c 	bl	230ae <uECC_vli_add>

	return carry;
}
   23bb6:	4620      	mov	r0, r4
   23bb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23bbc:	2401      	movs	r4, #1
   23bbe:	e7f4      	b.n	23baa <regularize_k+0x42>

00023bc0 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   23bc0:	b530      	push	{r4, r5, lr}
   23bc2:	4614      	mov	r4, r2
   23bc4:	b095      	sub	sp, #84	; 0x54
   23bc6:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23bc8:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23bca:	4623      	mov	r3, r4
{
   23bcc:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23bce:	a904      	add	r1, sp, #16
   23bd0:	9102      	str	r1, [sp, #8]
   23bd2:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23bd4:	f7ff ffc8 	bl	23b68 <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   23bd8:	fab0 f380 	clz	r3, r0
   23bdc:	095b      	lsrs	r3, r3, #5
   23bde:	aa14      	add	r2, sp, #80	; 0x50
   23be0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   23be4:	8863      	ldrh	r3, [r4, #2]
   23be6:	9401      	str	r4, [sp, #4]
   23be8:	3301      	adds	r3, #1
   23bea:	b21b      	sxth	r3, r3
   23bec:	9300      	str	r3, [sp, #0]
   23bee:	f852 2c48 	ldr.w	r2, [r2, #-72]
   23bf2:	2300      	movs	r3, #0
   23bf4:	f104 0144 	add.w	r1, r4, #68	; 0x44
   23bf8:	4628      	mov	r0, r5
   23bfa:	f7ff fee8 	bl	239ce <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   23bfe:	4621      	mov	r1, r4
   23c00:	4628      	mov	r0, r5
   23c02:	f7ff fe59 	bl	238b8 <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   23c06:	fab0 f080 	clz	r0, r0
   23c0a:	0940      	lsrs	r0, r0, #5
   23c0c:	b015      	add	sp, #84	; 0x54
   23c0e:	bd30      	pop	{r4, r5, pc}

00023c10 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   23c10:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   23c12:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   23c14:	1e4f      	subs	r7, r1, #1
   23c16:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   23c18:	428c      	cmp	r4, r1
   23c1a:	f105 0501 	add.w	r5, r5, #1
   23c1e:	db00      	blt.n	23c22 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   23c20:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23c22:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   23c24:	f023 0603 	bic.w	r6, r3, #3
   23c28:	f003 0303 	and.w	r3, r3, #3
   23c2c:	5996      	ldr	r6, [r2, r6]
   23c2e:	00db      	lsls	r3, r3, #3
   23c30:	fa26 f303 	lsr.w	r3, r6, r3
   23c34:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   23c36:	e7ee      	b.n	23c16 <uECC_vli_nativeToBytes+0x6>

00023c38 <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   23c38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23c3a:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   23c3c:	1cd1      	adds	r1, r2, #3
   23c3e:	bf48      	it	mi
   23c40:	1d91      	addmi	r1, r2, #6
   23c42:	f341 0187 	sbfx	r1, r1, #2, #8
{
   23c46:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   23c48:	f7ff fadf 	bl	2320a <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   23c4c:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   23c4e:	1e67      	subs	r7, r4, #1
   23c50:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   23c52:	42a2      	cmp	r2, r4
   23c54:	f105 0501 	add.w	r5, r5, #1
   23c58:	db00      	blt.n	23c5c <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   23c5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23c5c:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   23c5e:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   23c62:	5cb2      	ldrb	r2, [r6, r2]
   23c64:	f003 0303 	and.w	r3, r3, #3
   23c68:	00db      	lsls	r3, r3, #3
   23c6a:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   23c6e:	5842      	ldr	r2, [r0, r1]
   23c70:	431a      	orrs	r2, r3
   23c72:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   23c74:	e7ec      	b.n	23c50 <uECC_vli_bytesToNative+0x18>

00023c76 <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   23c76:	b5f0      	push	{r4, r5, r6, r7, lr}
   23c78:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23c7a:	f991 6000 	ldrsb.w	r6, [r1]
{
   23c7e:	4605      	mov	r5, r0
   23c80:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   23c82:	f7ff fe19 	bl	238b8 <EccPoint_isZero>
   23c86:	bb28      	cbnz	r0, 23cd4 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23c88:	1d27      	adds	r7, r4, #4
   23c8a:	4632      	mov	r2, r6
   23c8c:	4629      	mov	r1, r5
   23c8e:	4638      	mov	r0, r7
   23c90:	f7ff fb0c 	bl	232ac <uECC_vli_cmp_unsafe>
   23c94:	2801      	cmp	r0, #1
   23c96:	d120      	bne.n	23cda <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   23c98:	4632      	mov	r2, r6
   23c9a:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   23c9e:	4638      	mov	r0, r7
   23ca0:	f7ff fb04 	bl	232ac <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23ca4:	2801      	cmp	r0, #1
   23ca6:	d118      	bne.n	23cda <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   23ca8:	4622      	mov	r2, r4
   23caa:	4668      	mov	r0, sp
   23cac:	f7ff fc16 	bl	234dc <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   23cb0:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   23cb4:	4622      	mov	r2, r4
   23cb6:	4629      	mov	r1, r5
   23cb8:	a808      	add	r0, sp, #32
   23cba:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   23cbc:	4632      	mov	r2, r6
   23cbe:	a908      	add	r1, sp, #32
   23cc0:	4668      	mov	r0, sp
   23cc2:	f7ff fb0a 	bl	232da <uECC_vli_equal>
		return -3;
   23cc6:	2800      	cmp	r0, #0
   23cc8:	bf0c      	ite	eq
   23cca:	2000      	moveq	r0, #0
   23ccc:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   23cd0:	b011      	add	sp, #68	; 0x44
   23cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   23cd4:	f04f 30ff 	mov.w	r0, #4294967295
   23cd8:	e7fa      	b.n	23cd0 <uECC_valid_point+0x5a>
		return -2;
   23cda:	f06f 0001 	mvn.w	r0, #1
   23cde:	e7f7      	b.n	23cd0 <uECC_valid_point+0x5a>

00023ce0 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   23ce0:	b570      	push	{r4, r5, r6, lr}
   23ce2:	460c      	mov	r4, r1
   23ce4:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   23ce6:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23ce8:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   23cec:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23cee:	4601      	mov	r1, r0
   23cf0:	4668      	mov	r0, sp
   23cf2:	f7ff ffa1 	bl	23c38 <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   23cf6:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   23cfa:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   23cfe:	18a9      	adds	r1, r5, r2
   23d00:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   23d04:	f7ff ff98 	bl	23c38 <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   23d08:	2210      	movs	r2, #16
   23d0a:	4631      	mov	r1, r6
   23d0c:	4668      	mov	r0, sp
   23d0e:	f7ff facd 	bl	232ac <uECC_vli_cmp_unsafe>
   23d12:	b128      	cbz	r0, 23d20 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   23d14:	4621      	mov	r1, r4
   23d16:	4668      	mov	r0, sp
   23d18:	f7ff ffad 	bl	23c76 <uECC_valid_point>
}
   23d1c:	b010      	add	sp, #64	; 0x40
   23d1e:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   23d20:	f06f 0003 	mvn.w	r0, #3
   23d24:	e7fa      	b.n	23d1c <uECC_valid_public_key+0x3c>

00023d26 <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   23d26:	78cb      	ldrb	r3, [r1, #3]
   23d28:	7802      	ldrb	r2, [r0, #0]
   23d2a:	4053      	eors	r3, r2
   23d2c:	7003      	strb	r3, [r0, #0]
   23d2e:	884b      	ldrh	r3, [r1, #2]
   23d30:	7842      	ldrb	r2, [r0, #1]
   23d32:	4053      	eors	r3, r2
   23d34:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   23d36:	680a      	ldr	r2, [r1, #0]
   23d38:	7883      	ldrb	r3, [r0, #2]
   23d3a:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23d3e:	7083      	strb	r3, [r0, #2]
   23d40:	680a      	ldr	r2, [r1, #0]
   23d42:	78c3      	ldrb	r3, [r0, #3]
   23d44:	4053      	eors	r3, r2
   23d46:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   23d48:	79cb      	ldrb	r3, [r1, #7]
   23d4a:	7902      	ldrb	r2, [r0, #4]
   23d4c:	4053      	eors	r3, r2
   23d4e:	7103      	strb	r3, [r0, #4]
   23d50:	88cb      	ldrh	r3, [r1, #6]
   23d52:	7942      	ldrb	r2, [r0, #5]
   23d54:	4053      	eors	r3, r2
   23d56:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   23d58:	684a      	ldr	r2, [r1, #4]
   23d5a:	7983      	ldrb	r3, [r0, #6]
   23d5c:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23d60:	7183      	strb	r3, [r0, #6]
   23d62:	684a      	ldr	r2, [r1, #4]
   23d64:	79c3      	ldrb	r3, [r0, #7]
   23d66:	4053      	eors	r3, r2
   23d68:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   23d6a:	7acb      	ldrb	r3, [r1, #11]
   23d6c:	7a02      	ldrb	r2, [r0, #8]
   23d6e:	4053      	eors	r3, r2
   23d70:	7203      	strb	r3, [r0, #8]
   23d72:	7a42      	ldrb	r2, [r0, #9]
   23d74:	894b      	ldrh	r3, [r1, #10]
   23d76:	4053      	eors	r3, r2
   23d78:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   23d7a:	688a      	ldr	r2, [r1, #8]
   23d7c:	7a83      	ldrb	r3, [r0, #10]
   23d7e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23d82:	7283      	strb	r3, [r0, #10]
   23d84:	688a      	ldr	r2, [r1, #8]
   23d86:	7ac3      	ldrb	r3, [r0, #11]
   23d88:	4053      	eors	r3, r2
   23d8a:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   23d8c:	7bcb      	ldrb	r3, [r1, #15]
   23d8e:	7b02      	ldrb	r2, [r0, #12]
   23d90:	4053      	eors	r3, r2
   23d92:	7303      	strb	r3, [r0, #12]
   23d94:	89cb      	ldrh	r3, [r1, #14]
   23d96:	7b42      	ldrb	r2, [r0, #13]
   23d98:	4053      	eors	r3, r2
   23d9a:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   23d9c:	68ca      	ldr	r2, [r1, #12]
   23d9e:	7b83      	ldrb	r3, [r0, #14]
   23da0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23da4:	7383      	strb	r3, [r0, #14]
   23da6:	68ca      	ldr	r2, [r1, #12]
   23da8:	7bc3      	ldrb	r3, [r0, #15]
   23daa:	4053      	eors	r3, r2
   23dac:	73c3      	strb	r3, [r0, #15]
}
   23dae:	4770      	bx	lr

00023db0 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   23db0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23db2:	7802      	ldrb	r2, [r0, #0]
   23db4:	f88d 2000 	strb.w	r2, [sp]
   23db8:	7942      	ldrb	r2, [r0, #5]
   23dba:	f88d 2001 	strb.w	r2, [sp, #1]
   23dbe:	7a82      	ldrb	r2, [r0, #10]
   23dc0:	f88d 2002 	strb.w	r2, [sp, #2]
   23dc4:	7bc2      	ldrb	r2, [r0, #15]
   23dc6:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   23dca:	7902      	ldrb	r2, [r0, #4]
   23dcc:	f88d 2004 	strb.w	r2, [sp, #4]
   23dd0:	7a42      	ldrb	r2, [r0, #9]
   23dd2:	f88d 2005 	strb.w	r2, [sp, #5]
   23dd6:	7b82      	ldrb	r2, [r0, #14]
   23dd8:	f88d 2006 	strb.w	r2, [sp, #6]
   23ddc:	78c2      	ldrb	r2, [r0, #3]
   23dde:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23de2:	7a02      	ldrb	r2, [r0, #8]
   23de4:	f88d 2008 	strb.w	r2, [sp, #8]
   23de8:	7b42      	ldrb	r2, [r0, #13]
   23dea:	f88d 2009 	strb.w	r2, [sp, #9]
   23dee:	7882      	ldrb	r2, [r0, #2]
   23df0:	f88d 200a 	strb.w	r2, [sp, #10]
   23df4:	79c2      	ldrb	r2, [r0, #7]
   23df6:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   23dfa:	7b02      	ldrb	r2, [r0, #12]
   23dfc:	f88d 200c 	strb.w	r2, [sp, #12]
   23e00:	7842      	ldrb	r2, [r0, #1]
   23e02:	7ac3      	ldrb	r3, [r0, #11]
   23e04:	f88d 200d 	strb.w	r2, [sp, #13]
   23e08:	7982      	ldrb	r2, [r0, #6]
   23e0a:	f88d 200e 	strb.w	r2, [sp, #14]
   23e0e:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23e12:	2310      	movs	r3, #16
   23e14:	466a      	mov	r2, sp
   23e16:	4619      	mov	r1, r3
   23e18:	f7ff f885 	bl	22f26 <_copy>
}
   23e1c:	b005      	add	sp, #20
   23e1e:	f85d fb04 	ldr.w	pc, [sp], #4

00023e22 <mult_row_column>:
{
   23e22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23e24:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23e26:	7808      	ldrb	r0, [r1, #0]
{
   23e28:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23e2a:	f7ff f88b 	bl	22f44 <_double_byte>
   23e2e:	4605      	mov	r5, r0
   23e30:	7860      	ldrb	r0, [r4, #1]
   23e32:	f7ff f887 	bl	22f44 <_double_byte>
   23e36:	78a2      	ldrb	r2, [r4, #2]
   23e38:	7863      	ldrb	r3, [r4, #1]
   23e3a:	4053      	eors	r3, r2
   23e3c:	78e2      	ldrb	r2, [r4, #3]
   23e3e:	4053      	eors	r3, r2
   23e40:	405d      	eors	r5, r3
   23e42:	4045      	eors	r5, r0
   23e44:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   23e46:	7860      	ldrb	r0, [r4, #1]
   23e48:	7827      	ldrb	r7, [r4, #0]
   23e4a:	f7ff f87b 	bl	22f44 <_double_byte>
   23e4e:	4605      	mov	r5, r0
   23e50:	78a0      	ldrb	r0, [r4, #2]
   23e52:	f7ff f877 	bl	22f44 <_double_byte>
   23e56:	78a3      	ldrb	r3, [r4, #2]
   23e58:	405f      	eors	r7, r3
   23e5a:	78e3      	ldrb	r3, [r4, #3]
   23e5c:	405f      	eors	r7, r3
   23e5e:	407d      	eors	r5, r7
   23e60:	4045      	eors	r5, r0
   23e62:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   23e64:	78a0      	ldrb	r0, [r4, #2]
   23e66:	7865      	ldrb	r5, [r4, #1]
   23e68:	7827      	ldrb	r7, [r4, #0]
   23e6a:	f7ff f86b 	bl	22f44 <_double_byte>
   23e6e:	406f      	eors	r7, r5
   23e70:	4605      	mov	r5, r0
   23e72:	78e0      	ldrb	r0, [r4, #3]
   23e74:	f7ff f866 	bl	22f44 <_double_byte>
   23e78:	78e3      	ldrb	r3, [r4, #3]
   23e7a:	405f      	eors	r7, r3
   23e7c:	407d      	eors	r5, r7
   23e7e:	4045      	eors	r5, r0
   23e80:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   23e82:	7820      	ldrb	r0, [r4, #0]
   23e84:	f7ff f85e 	bl	22f44 <_double_byte>
   23e88:	7863      	ldrb	r3, [r4, #1]
   23e8a:	7825      	ldrb	r5, [r4, #0]
   23e8c:	405d      	eors	r5, r3
   23e8e:	78a3      	ldrb	r3, [r4, #2]
   23e90:	405d      	eors	r5, r3
   23e92:	4045      	eors	r5, r0
   23e94:	78e0      	ldrb	r0, [r4, #3]
   23e96:	f7ff f855 	bl	22f44 <_double_byte>
   23e9a:	b2ed      	uxtb	r5, r5
   23e9c:	4045      	eors	r5, r0
   23e9e:	70f5      	strb	r5, [r6, #3]
}
   23ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00023ea2 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   23ea2:	b570      	push	{r4, r5, r6, lr}
   23ea4:	4614      	mov	r4, r2
   23ea6:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   23ea8:	4605      	mov	r5, r0
   23eaa:	2800      	cmp	r0, #0
   23eac:	d049      	beq.n	23f42 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   23eae:	2900      	cmp	r1, #0
   23eb0:	d049      	beq.n	23f46 <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   23eb2:	2a00      	cmp	r2, #0
   23eb4:	d049      	beq.n	23f4a <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   23eb6:	2310      	movs	r3, #16
   23eb8:	460a      	mov	r2, r1
   23eba:	4668      	mov	r0, sp
   23ebc:	4619      	mov	r1, r3
   23ebe:	f7ff f832 	bl	22f26 <_copy>
	add_round_key(state, s->words);
   23ec2:	4621      	mov	r1, r4
   23ec4:	4668      	mov	r0, sp
   23ec6:	f7ff ff2e 	bl	23d26 <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   23eca:	3410      	adds	r4, #16
   23ecc:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   23ed0:	4668      	mov	r0, sp
   23ed2:	f7e3 fad5 	bl	7480 <sub_bytes>
		shift_rows(state);
   23ed6:	4668      	mov	r0, sp
   23ed8:	f7ff ff6a 	bl	23db0 <shift_rows>
	mult_row_column(t, s);
   23edc:	4669      	mov	r1, sp
   23ede:	a804      	add	r0, sp, #16
   23ee0:	f7ff ff9f 	bl	23e22 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   23ee4:	a901      	add	r1, sp, #4
   23ee6:	a805      	add	r0, sp, #20
   23ee8:	f7ff ff9b 	bl	23e22 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   23eec:	a902      	add	r1, sp, #8
   23eee:	a806      	add	r0, sp, #24
   23ef0:	f7ff ff97 	bl	23e22 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   23ef4:	a903      	add	r1, sp, #12
   23ef6:	a807      	add	r0, sp, #28
   23ef8:	f7ff ff93 	bl	23e22 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23efc:	2310      	movs	r3, #16
   23efe:	4619      	mov	r1, r3
   23f00:	eb0d 0203 	add.w	r2, sp, r3
   23f04:	4668      	mov	r0, sp
   23f06:	f7ff f80e 	bl	22f26 <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   23f0a:	4621      	mov	r1, r4
   23f0c:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   23f0e:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   23f10:	f7ff ff09 	bl	23d26 <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   23f14:	42a6      	cmp	r6, r4
   23f16:	d1db      	bne.n	23ed0 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   23f18:	f7e3 fab2 	bl	7480 <sub_bytes>
	shift_rows(state);
   23f1c:	4668      	mov	r0, sp
   23f1e:	f7ff ff47 	bl	23db0 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   23f22:	4631      	mov	r1, r6
   23f24:	4668      	mov	r0, sp
   23f26:	f7ff fefe 	bl	23d26 <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   23f2a:	2310      	movs	r3, #16
   23f2c:	4619      	mov	r1, r3
   23f2e:	466a      	mov	r2, sp
   23f30:	4628      	mov	r0, r5
   23f32:	f7fe fff8 	bl	22f26 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   23f36:	4668      	mov	r0, sp
   23f38:	2210      	movs	r2, #16
   23f3a:	2100      	movs	r1, #0
   23f3c:	f7ff f800 	bl	22f40 <_set>

	return TC_CRYPTO_SUCCESS;
   23f40:	2001      	movs	r0, #1
}
   23f42:	b008      	add	sp, #32
   23f44:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   23f46:	4608      	mov	r0, r1
   23f48:	e7fb      	b.n	23f42 <tc_aes_encrypt+0xa0>
   23f4a:	4610      	mov	r0, r2
   23f4c:	e7f9      	b.n	23f42 <tc_aes_encrypt+0xa0>

00023f4e <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   23f4e:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23f50:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   23f52:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   23f54:	f912 3b10 	ldrsb.w	r3, [r2], #16
   23f58:	2b00      	cmp	r3, #0
   23f5a:	bfb4      	ite	lt
   23f5c:	2387      	movlt	r3, #135	; 0x87
   23f5e:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   23f60:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   23f64:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   23f68:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   23f6a:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   23f6e:	d002      	beq.n	23f76 <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   23f70:	7813      	ldrb	r3, [r2, #0]
   23f72:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   23f74:	e7f4      	b.n	23f60 <gf_double+0x12>
	}
}
   23f76:	bd10      	pop	{r4, pc}

00023f78 <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   23f78:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   23f7a:	b120      	cbz	r0, 23f86 <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   23f7c:	2258      	movs	r2, #88	; 0x58
   23f7e:	2100      	movs	r1, #0
   23f80:	f7fe ffde 	bl	22f40 <_set>
   23f84:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23f86:	bd08      	pop	{r3, pc}

00023f88 <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   23f88:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   23f8a:	4604      	mov	r4, r0
   23f8c:	b188      	cbz	r0, 23fb2 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23f8e:	2210      	movs	r2, #16
   23f90:	2100      	movs	r1, #0
   23f92:	f7fe ffd5 	bl	22f40 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   23f96:	2210      	movs	r2, #16
   23f98:	f104 0030 	add.w	r0, r4, #48	; 0x30
   23f9c:	2100      	movs	r1, #0
   23f9e:	f7fe ffcf 	bl	22f40 <_set>
	s->leftover_offset = 0;
   23fa2:	2300      	movs	r3, #0
   23fa4:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   23fa6:	2200      	movs	r2, #0
   23fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   23fac:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   23fb0:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   23fb2:	bd10      	pop	{r4, pc}

00023fb4 <tc_cmac_setup>:
{
   23fb4:	b570      	push	{r4, r5, r6, lr}
   23fb6:	460d      	mov	r5, r1
   23fb8:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   23fba:	4604      	mov	r4, r0
   23fbc:	b310      	cbz	r0, 24004 <tc_cmac_setup+0x50>
   23fbe:	b311      	cbz	r1, 24006 <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   23fc0:	2258      	movs	r2, #88	; 0x58
   23fc2:	2100      	movs	r1, #0
   23fc4:	f7fe ffbc 	bl	22f40 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   23fc8:	4629      	mov	r1, r5
	s->sched = sched;
   23fca:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   23fcc:	4630      	mov	r0, r6
   23fce:	f7e3 fa63 	bl	7498 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   23fd2:	2210      	movs	r2, #16
   23fd4:	2100      	movs	r1, #0
   23fd6:	4620      	mov	r0, r4
   23fd8:	f7fe ffb2 	bl	22f40 <_set>
	gf_double (s->K1, s->iv);
   23fdc:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   23fe0:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23fe2:	4621      	mov	r1, r4
   23fe4:	4620      	mov	r0, r4
   23fe6:	f7ff ff5c 	bl	23ea2 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   23fea:	4621      	mov	r1, r4
   23fec:	4628      	mov	r0, r5
   23fee:	f7ff ffae 	bl	23f4e <gf_double>
	gf_double (s->K2, s->K1);
   23ff2:	4629      	mov	r1, r5
   23ff4:	f104 0020 	add.w	r0, r4, #32
   23ff8:	f7ff ffa9 	bl	23f4e <gf_double>
	tc_cmac_init(s);
   23ffc:	4620      	mov	r0, r4
   23ffe:	f7ff ffc3 	bl	23f88 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24002:	2001      	movs	r0, #1
}
   24004:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   24006:	4608      	mov	r0, r1
   24008:	e7fc      	b.n	24004 <tc_cmac_setup+0x50>

0002400a <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2400a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2400e:	460d      	mov	r5, r1
   24010:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24012:	4604      	mov	r4, r0
   24014:	2800      	cmp	r0, #0
   24016:	d061      	beq.n	240dc <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   24018:	b912      	cbnz	r2, 24020 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2401a:	2001      	movs	r0, #1
}
   2401c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   24020:	2900      	cmp	r1, #0
   24022:	d05b      	beq.n	240dc <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   24024:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   24028:	ea53 0102 	orrs.w	r1, r3, r2
   2402c:	d056      	beq.n	240dc <tc_cmac_update+0xd2>
	s->countdown--;
   2402e:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   24030:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24034:	f142 32ff 	adc.w	r2, r2, #4294967295
   24038:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   2403c:	f1b8 0f00 	cmp.w	r8, #0
   24040:	d02a      	beq.n	24098 <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   24042:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24046:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   2404a:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   2404c:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   2404e:	d208      	bcs.n	24062 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   24050:	462a      	mov	r2, r5
   24052:	4633      	mov	r3, r6
   24054:	4631      	mov	r1, r6
   24056:	f7fe ff66 	bl	22f26 <_copy>
			s->leftover_offset += data_length;
   2405a:	6c62      	ldr	r2, [r4, #68]	; 0x44
   2405c:	4432      	add	r2, r6
   2405e:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   24060:	e7db      	b.n	2401a <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   24062:	463b      	mov	r3, r7
   24064:	462a      	mov	r2, r5
   24066:	4639      	mov	r1, r7
   24068:	f7fe ff5d 	bl	22f26 <_copy>
		data_length -= remaining_space;
   2406c:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   2406e:	2300      	movs	r3, #0
   24070:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   24072:	4446      	add	r6, r8
		data += remaining_space;
   24074:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24076:	1e63      	subs	r3, r4, #1
   24078:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   2407c:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24080:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24084:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   24086:	ea82 0200 	eor.w	r2, r2, r0
   2408a:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2408c:	d1f6      	bne.n	2407c <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   2408e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24090:	4621      	mov	r1, r4
   24092:	4620      	mov	r0, r4
   24094:	f7ff ff05 	bl	23ea2 <tc_aes_encrypt>
   24098:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   2409c:	2e10      	cmp	r6, #16
   2409e:	d80a      	bhi.n	240b6 <tc_cmac_update+0xac>
	if (data_length > 0) {
   240a0:	2e00      	cmp	r6, #0
   240a2:	d0ba      	beq.n	2401a <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   240a4:	4633      	mov	r3, r6
   240a6:	462a      	mov	r2, r5
   240a8:	4631      	mov	r1, r6
   240aa:	f104 0030 	add.w	r0, r4, #48	; 0x30
   240ae:	f7fe ff3a 	bl	22f26 <_copy>
		s->leftover_offset = data_length;
   240b2:	6466      	str	r6, [r4, #68]	; 0x44
   240b4:	e7b1      	b.n	2401a <tc_cmac_update+0x10>
   240b6:	1e63      	subs	r3, r4, #1
   240b8:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   240ba:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   240be:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   240c2:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   240c4:	ea82 0200 	eor.w	r2, r2, r0
   240c8:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   240ca:	d1f6      	bne.n	240ba <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   240cc:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   240ce:	4621      	mov	r1, r4
   240d0:	4620      	mov	r0, r4
   240d2:	f7ff fee6 	bl	23ea2 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   240d6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   240d8:	3e10      	subs	r6, #16
   240da:	e7df      	b.n	2409c <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   240dc:	2000      	movs	r0, #0
   240de:	e79d      	b.n	2401c <tc_cmac_update+0x12>

000240e0 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   240e0:	b570      	push	{r4, r5, r6, lr}
   240e2:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   240e4:	4605      	mov	r5, r0
   240e6:	b1e8      	cbz	r0, 24124 <tc_cmac_final+0x44>
   240e8:	b369      	cbz	r1, 24146 <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   240ea:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   240ec:	2a10      	cmp	r2, #16
   240ee:	d11a      	bne.n	24126 <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   240f0:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   240f2:	1e63      	subs	r3, r4, #1
   240f4:	3901      	subs	r1, #1
   240f6:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   240fa:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   240fe:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24102:	4072      	eors	r2, r6
   24104:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24108:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2410a:	ea82 0206 	eor.w	r2, r2, r6
   2410e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24110:	d1f3      	bne.n	240fa <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24112:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24114:	4621      	mov	r1, r4
   24116:	4628      	mov	r0, r5
   24118:	f7ff fec3 	bl	23ea2 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   2411c:	4620      	mov	r0, r4
   2411e:	f7ff ff2b 	bl	23f78 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24122:	2001      	movs	r0, #1
}
   24124:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   24126:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2412a:	2100      	movs	r1, #0
   2412c:	f1c2 0210 	rsb	r2, r2, #16
   24130:	4420      	add	r0, r4
   24132:	f7fe ff05 	bl	22f40 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   24136:	6c63      	ldr	r3, [r4, #68]	; 0x44
   24138:	4423      	add	r3, r4
   2413a:	2280      	movs	r2, #128	; 0x80
   2413c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   24140:	f104 0120 	add.w	r1, r4, #32
   24144:	e7d5      	b.n	240f2 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   24146:	4608      	mov	r0, r1
   24148:	e7ec      	b.n	24124 <tc_cmac_final+0x44>

0002414a <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   2414a:	2100      	movs	r1, #0
   2414c:	2001      	movs	r0, #1
   2414e:	f7e3 bb0d 	b.w	776c <z_arm_fatal_error>

00024152 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   24152:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   24154:	6800      	ldr	r0, [r0, #0]
   24156:	f7e3 bb09 	b.w	776c <z_arm_fatal_error>

0002415a <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   2415a:	b508      	push	{r3, lr}
	handler();
   2415c:	f7e3 fb3e 	bl	77dc <z_SysNmiOnReset>
	z_arm_int_exit();
}
   24160:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   24164:	f7e3 bdc0 	b.w	7ce8 <z_arm_exc_exit>

00024168 <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   24168:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2416c:	4684      	mov	ip, r0
   2416e:	4688      	mov	r8, r1
	register const char *s = nptr;
   24170:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   24172:	4621      	mov	r1, r4
   24174:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   24178:	2b20      	cmp	r3, #32
   2417a:	d0fa      	beq.n	24172 <strtol+0xa>
   2417c:	f1a3 0009 	sub.w	r0, r3, #9
   24180:	2804      	cmp	r0, #4
   24182:	d9f6      	bls.n	24172 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   24184:	2b2d      	cmp	r3, #45	; 0x2d
   24186:	d12d      	bne.n	241e4 <strtol+0x7c>
		neg = 1;
		c = *s++;
   24188:	784b      	ldrb	r3, [r1, #1]
   2418a:	1c8c      	adds	r4, r1, #2
		neg = 1;
   2418c:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   2418e:	2a00      	cmp	r2, #0
   24190:	d05a      	beq.n	24248 <strtol+0xe0>
   24192:	2a10      	cmp	r2, #16
   24194:	d109      	bne.n	241aa <strtol+0x42>
   24196:	2b30      	cmp	r3, #48	; 0x30
   24198:	d107      	bne.n	241aa <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   2419a:	7823      	ldrb	r3, [r4, #0]
   2419c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   241a0:	2b58      	cmp	r3, #88	; 0x58
   241a2:	d14c      	bne.n	2423e <strtol+0xd6>
		c = s[1];
   241a4:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   241a6:	2210      	movs	r2, #16
		s += 2;
   241a8:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   241aa:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   241ae:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   241b0:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   241b2:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   241b6:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   241b8:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   241bc:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   241c0:	2d09      	cmp	r5, #9
   241c2:	d815      	bhi.n	241f0 <strtol+0x88>
			c -= '0';
   241c4:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   241c6:	429a      	cmp	r2, r3
   241c8:	dd22      	ble.n	24210 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   241ca:	1c75      	adds	r5, r6, #1
   241cc:	d007      	beq.n	241de <strtol+0x76>
   241ce:	4570      	cmp	r0, lr
   241d0:	d81b      	bhi.n	2420a <strtol+0xa2>
   241d2:	d101      	bne.n	241d8 <strtol+0x70>
   241d4:	454b      	cmp	r3, r9
   241d6:	dc18      	bgt.n	2420a <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   241d8:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   241dc:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   241de:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   241e2:	e7eb      	b.n	241bc <strtol+0x54>
	} else if (c == '+') {
   241e4:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   241e6:	bf04      	itt	eq
   241e8:	784b      	ldrbeq	r3, [r1, #1]
   241ea:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   241ec:	2100      	movs	r1, #0
   241ee:	e7ce      	b.n	2418e <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   241f0:	f043 0520 	orr.w	r5, r3, #32
   241f4:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   241f6:	2d19      	cmp	r5, #25
   241f8:	d80a      	bhi.n	24210 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   241fa:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   241fe:	2d1a      	cmp	r5, #26
   24200:	bf34      	ite	cc
   24202:	2537      	movcc	r5, #55	; 0x37
   24204:	2557      	movcs	r5, #87	; 0x57
   24206:	1b5b      	subs	r3, r3, r5
   24208:	e7dd      	b.n	241c6 <strtol+0x5e>
			any = -1;
   2420a:	f04f 36ff 	mov.w	r6, #4294967295
   2420e:	e7e6      	b.n	241de <strtol+0x76>
		}
	}

	if (any < 0) {
   24210:	1c73      	adds	r3, r6, #1
   24212:	d109      	bne.n	24228 <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24214:	f7fb fa04 	bl	1f620 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   24218:	2326      	movs	r3, #38	; 0x26
   2421a:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   2421c:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   2421e:	f1b8 0f00 	cmp.w	r8, #0
   24222:	d107      	bne.n	24234 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   24224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   24228:	b101      	cbz	r1, 2422c <strtol+0xc4>
		acc = -acc;
   2422a:	4240      	negs	r0, r0
	if (endptr != NULL) {
   2422c:	f1b8 0f00 	cmp.w	r8, #0
   24230:	d0f8      	beq.n	24224 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   24232:	b10e      	cbz	r6, 24238 <strtol+0xd0>
   24234:	f104 3cff 	add.w	ip, r4, #4294967295
   24238:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   2423c:	e7f2      	b.n	24224 <strtol+0xbc>
	if (base == 0) {
   2423e:	2330      	movs	r3, #48	; 0x30
   24240:	2a00      	cmp	r2, #0
   24242:	d1b2      	bne.n	241aa <strtol+0x42>
		base = c == '0' ? 8 : 10;
   24244:	2208      	movs	r2, #8
   24246:	e7b0      	b.n	241aa <strtol+0x42>
	if ((base == 0 || base == 16) &&
   24248:	2b30      	cmp	r3, #48	; 0x30
   2424a:	d0a6      	beq.n	2419a <strtol+0x32>
		base = c == '0' ? 8 : 10;
   2424c:	220a      	movs	r2, #10
   2424e:	e7ac      	b.n	241aa <strtol+0x42>

00024250 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   24250:	3901      	subs	r1, #1
   24252:	4603      	mov	r3, r0
   24254:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24258:	b90a      	cbnz	r2, 2425e <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   2425a:	701a      	strb	r2, [r3, #0]

	return dest;
}
   2425c:	4770      	bx	lr
		*d = *s;
   2425e:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   24262:	e7f7      	b.n	24254 <strcpy+0x4>

00024264 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   24264:	b570      	push	{r4, r5, r6, lr}
   24266:	4605      	mov	r5, r0
   24268:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   2426a:	b142      	cbz	r2, 2427e <strncpy+0x1a>
   2426c:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   24270:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   24272:	b92c      	cbnz	r4, 24280 <strncpy+0x1c>
   24274:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   24276:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   2427a:	429a      	cmp	r2, r3
   2427c:	d1fb      	bne.n	24276 <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   2427e:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   24280:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   24284:	4632      	mov	r2, r6
   24286:	e7ef      	b.n	24268 <strncpy+0x4>

00024288 <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   24288:	4603      	mov	r3, r0
	size_t n = 0;
   2428a:	2000      	movs	r0, #0

	while (*s != '\0') {
   2428c:	5c1a      	ldrb	r2, [r3, r0]
   2428e:	b902      	cbnz	r2, 24292 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   24290:	4770      	bx	lr
		n++;
   24292:	3001      	adds	r0, #1
   24294:	e7fa      	b.n	2428c <strlen+0x4>

00024296 <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   24296:	4603      	mov	r3, r0
	size_t n = 0;
   24298:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   2429a:	5c1a      	ldrb	r2, [r3, r0]
   2429c:	b10a      	cbz	r2, 242a2 <strnlen+0xc>
   2429e:	4288      	cmp	r0, r1
   242a0:	d100      	bne.n	242a4 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   242a2:	4770      	bx	lr
		n++;
   242a4:	3001      	adds	r0, #1
   242a6:	e7f8      	b.n	2429a <strnlen+0x4>

000242a8 <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   242a8:	1e43      	subs	r3, r0, #1
   242aa:	3901      	subs	r1, #1
   242ac:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   242b0:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   242b4:	4282      	cmp	r2, r0
   242b6:	d101      	bne.n	242bc <strcmp+0x14>
   242b8:	2a00      	cmp	r2, #0
   242ba:	d1f7      	bne.n	242ac <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   242bc:	1a10      	subs	r0, r2, r0
   242be:	4770      	bx	lr

000242c0 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   242c0:	b510      	push	{r4, lr}
   242c2:	3901      	subs	r1, #1
   242c4:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   242c6:	4282      	cmp	r2, r0
   242c8:	d009      	beq.n	242de <strncmp+0x1e>
   242ca:	7803      	ldrb	r3, [r0, #0]
   242cc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   242d0:	42a3      	cmp	r3, r4
   242d2:	d100      	bne.n	242d6 <strncmp+0x16>
   242d4:	b90b      	cbnz	r3, 242da <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   242d6:	1b18      	subs	r0, r3, r4
   242d8:	e002      	b.n	242e0 <strncmp+0x20>
		s1++;
   242da:	3001      	adds	r0, #1
		n--;
   242dc:	e7f3      	b.n	242c6 <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   242de:	2000      	movs	r0, #0
}
   242e0:	bd10      	pop	{r4, pc}

000242e2 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   242e2:	b510      	push	{r4, lr}
   242e4:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   242e6:	b15a      	cbz	r2, 24300 <memcmp+0x1e>
   242e8:	3901      	subs	r1, #1
   242ea:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   242ec:	f813 0b01 	ldrb.w	r0, [r3], #1
   242f0:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   242f4:	42a3      	cmp	r3, r4
   242f6:	d001      	beq.n	242fc <memcmp+0x1a>
   242f8:	4290      	cmp	r0, r2
   242fa:	d0f7      	beq.n	242ec <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   242fc:	1a80      	subs	r0, r0, r2
}
   242fe:	bd10      	pop	{r4, pc}
		return 0;
   24300:	4610      	mov	r0, r2
   24302:	e7fc      	b.n	242fe <memcmp+0x1c>

00024304 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   24304:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   24306:	ea81 0400 	eor.w	r4, r1, r0
   2430a:	07a5      	lsls	r5, r4, #30
   2430c:	4603      	mov	r3, r0
   2430e:	d00b      	beq.n	24328 <memcpy+0x24>
   24310:	3b01      	subs	r3, #1
   24312:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   24314:	4291      	cmp	r1, r2
   24316:	d11b      	bne.n	24350 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   24318:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   2431a:	2a00      	cmp	r2, #0
   2431c:	d0fc      	beq.n	24318 <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   2431e:	f811 4b01 	ldrb.w	r4, [r1], #1
   24322:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   24326:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   24328:	079c      	lsls	r4, r3, #30
   2432a:	d1f6      	bne.n	2431a <memcpy+0x16>
   2432c:	f022 0403 	bic.w	r4, r2, #3
   24330:	1f1d      	subs	r5, r3, #4
   24332:	0896      	lsrs	r6, r2, #2
   24334:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   24336:	42b9      	cmp	r1, r7
   24338:	d105      	bne.n	24346 <memcpy+0x42>
   2433a:	f06f 0503 	mvn.w	r5, #3
   2433e:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
   24342:	4423      	add	r3, r4
   24344:	e7e4      	b.n	24310 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   24346:	f851 cb04 	ldr.w	ip, [r1], #4
   2434a:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   2434e:	e7f2      	b.n	24336 <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   24350:	f811 4b01 	ldrb.w	r4, [r1], #1
   24354:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   24358:	e7dc      	b.n	24314 <memcpy+0x10>

0002435a <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   2435a:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   2435c:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   2435e:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   24360:	07a3      	lsls	r3, r4, #30
   24362:	d111      	bne.n	24388 <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   24364:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   24368:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   2436c:	f022 0303 	bic.w	r3, r2, #3
   24370:	0896      	lsrs	r6, r2, #2
   24372:	4423      	add	r3, r4
   24374:	429c      	cmp	r4, r3
   24376:	d10d      	bne.n	24394 <memset+0x3a>
   24378:	f06f 0403 	mvn.w	r4, #3
   2437c:	fb04 2206 	mla	r2, r4, r6, r2
   24380:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   24382:	4293      	cmp	r3, r2
   24384:	d109      	bne.n	2439a <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   24386:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   24388:	2a00      	cmp	r2, #0
   2438a:	d0fc      	beq.n	24386 <memset+0x2c>
		*(d_byte++) = c_byte;
   2438c:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   24390:	3a01      	subs	r2, #1
   24392:	e7e5      	b.n	24360 <memset+0x6>
		*(d_word++) = c_word;
   24394:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   24398:	e7ec      	b.n	24374 <memset+0x1a>
		*(d_byte++) = c_byte;
   2439a:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   2439e:	e7f0      	b.n	24382 <memset+0x28>

000243a0 <_stdout_hook_default>:
}
   243a0:	f04f 30ff 	mov.w	r0, #4294967295
   243a4:	4770      	bx	lr

000243a6 <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   243a6:	f7e3 bdc5 	b.w	7f34 <z_impl_zephyr_fputc>

000243aa <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   243aa:	684b      	ldr	r3, [r1, #4]
   243ac:	2b01      	cmp	r3, #1
   243ae:	dd07      	ble.n	243c0 <sprintf_out+0x16>
		*(p->ptr) = c;
   243b0:	680b      	ldr	r3, [r1, #0]
   243b2:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   243b4:	680b      	ldr	r3, [r1, #0]
   243b6:	3301      	adds	r3, #1
   243b8:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   243ba:	684b      	ldr	r3, [r1, #4]
   243bc:	3b01      	subs	r3, #1
   243be:	604b      	str	r3, [r1, #4]
}
   243c0:	2000      	movs	r0, #0
   243c2:	4770      	bx	lr

000243c4 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   243c4:	f7fa bb2e 	b.w	1ea24 <SystemInit>

000243c8 <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   243c8:	b082      	sub	sp, #8
   243ca:	ab02      	add	r3, sp, #8
   243cc:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   243d0:	f89d 3000 	ldrb.w	r3, [sp]
   243d4:	2b06      	cmp	r3, #6
   243d6:	d108      	bne.n	243ea <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   243d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   243dc:	2201      	movs	r2, #1
   243de:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   243e2:	f3bf 8f4f 	dsb	sy
        __WFE();
   243e6:	bf20      	wfe
    while (true)
   243e8:	e7fd      	b.n	243e6 <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   243ea:	b002      	add	sp, #8
   243ec:	4770      	bx	lr

000243ee <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   243ee:	b082      	sub	sp, #8
   243f0:	ab02      	add	r3, sp, #8
   243f2:	e903 0003 	stmdb	r3, {r0, r1}
   243f6:	2300      	movs	r3, #0
   243f8:	f383 8811 	msr	BASEPRI, r3
   243fc:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24400:	b002      	add	sp, #8
   24402:	4770      	bx	lr

00024404 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24404:	b530      	push	{r4, r5, lr}
   24406:	b085      	sub	sp, #20
   24408:	4604      	mov	r4, r0
   2440a:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   2440c:	4668      	mov	r0, sp
   2440e:	2203      	movs	r2, #3
   24410:	f7ff ff78 	bl	24304 <memcpy>
	(void)memset(res + 3, 0, 13);
   24414:	220d      	movs	r2, #13
   24416:	2100      	movs	r1, #0
   24418:	f10d 0003 	add.w	r0, sp, #3
   2441c:	f7ff ff9d 	bl	2435a <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24420:	4620      	mov	r0, r4
   24422:	466a      	mov	r2, sp
   24424:	4669      	mov	r1, sp
   24426:	f7ee ffc5 	bl	133b4 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2442a:	4604      	mov	r4, r0
   2442c:	b920      	cbnz	r0, 24438 <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   2442e:	2203      	movs	r2, #3
   24430:	4669      	mov	r1, sp
   24432:	4628      	mov	r0, r5
   24434:	f7ff ff66 	bl	24304 <memcpy>

	return 0;
}
   24438:	4620      	mov	r0, r4
   2443a:	b005      	add	sp, #20
   2443c:	bd30      	pop	{r4, r5, pc}

0002443e <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   2443e:	b513      	push	{r0, r1, r4, lr}
   24440:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   24442:	aa01      	add	r2, sp, #4
   24444:	3103      	adds	r1, #3
   24446:	f7ff ffdd 	bl	24404 <ah>
	if (err) {
   2444a:	b948      	cbnz	r0, 24460 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   2444c:	2203      	movs	r2, #3
   2444e:	a901      	add	r1, sp, #4
   24450:	4620      	mov	r0, r4
   24452:	f7ff ff46 	bl	242e2 <memcmp>
   24456:	fab0 f080 	clz	r0, r0
   2445a:	0940      	lsrs	r0, r0, #5
}
   2445c:	b002      	add	sp, #8
   2445e:	bd10      	pop	{r4, pc}
		return false;
   24460:	2000      	movs	r0, #0
   24462:	e7fb      	b.n	2445c <bt_rpa_irk_matches+0x1e>

00024464 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   24464:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   24466:	1cce      	adds	r6, r1, #3
{
   24468:	4605      	mov	r5, r0
   2446a:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   2446c:	4630      	mov	r0, r6
   2446e:	2103      	movs	r1, #3
   24470:	f7ee ff9e 	bl	133b0 <bt_rand>
	if (err) {
   24474:	b960      	cbnz	r0, 24490 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   24476:	7963      	ldrb	r3, [r4, #5]
   24478:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   2447c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   24480:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   24482:	4622      	mov	r2, r4
   24484:	4631      	mov	r1, r6
   24486:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   24488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   2448c:	f7ff bfba 	b.w	24404 <ah>
}
   24490:	bd70      	pop	{r4, r5, r6, pc}

00024492 <send_cmd_status>:
{
   24492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24496:	f04f 32ff 	mov.w	r2, #4294967295
{
   2449a:	4606      	mov	r6, r0
   2449c:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   2449e:	f04f 33ff 	mov.w	r3, #4294967295
   244a2:	2100      	movs	r1, #0
   244a4:	200f      	movs	r0, #15
   244a6:	f7e4 f981 	bl	87ac <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   244aa:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   244ac:	f100 0808 	add.w	r8, r0, #8
   244b0:	4604      	mov	r4, r0
   244b2:	7507      	strb	r7, [r0, #20]
   244b4:	2102      	movs	r1, #2
   244b6:	4640      	mov	r0, r8
   244b8:	f001 ff78 	bl	263ac <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   244bc:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   244be:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   244c0:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   244c2:	7041      	strb	r1, [r0, #1]
   244c4:	4640      	mov	r0, r8
   244c6:	f001 ff71 	bl	263ac <net_buf_simple_add>
	evt->ncmd = 1U;
   244ca:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   244cc:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   244ce:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   244d0:	4620      	mov	r0, r4
}
   244d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   244d6:	f7e5 bf45 	b.w	a364 <bt_recv_prio>

000244da <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   244da:	f101 0320 	add.w	r3, r1, #32
   244de:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   244e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   244e4:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   244e8:	428b      	cmp	r3, r1
   244ea:	d1f9      	bne.n	244e0 <sys_memcpy_swap.constprop.0+0x6>
}
   244ec:	4770      	bx	lr

000244ee <default_CSPRNG>:
{
   244ee:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   244f0:	f7ee ff5e 	bl	133b0 <bt_rand>
}
   244f4:	fab0 f080 	clz	r0, r0
   244f8:	0940      	lsrs	r0, r0, #5
   244fa:	bd08      	pop	{r3, pc}

000244fc <bt_settings_decode_key>:
{
   244fc:	b570      	push	{r4, r5, r6, lr}
   244fe:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24500:	2100      	movs	r1, #0
{
   24502:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   24504:	f7fe fba7 	bl	22c56 <settings_name_next>
   24508:	280d      	cmp	r0, #13
   2450a:	d118      	bne.n	2453e <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   2450c:	7b23      	ldrb	r3, [r4, #12]
   2450e:	2b30      	cmp	r3, #48	; 0x30
   24510:	d111      	bne.n	24536 <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   24512:	2300      	movs	r3, #0
   24514:	702b      	strb	r3, [r5, #0]
   24516:	f104 060c 	add.w	r6, r4, #12
   2451a:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2451c:	462a      	mov	r2, r5
   2451e:	4620      	mov	r0, r4
   24520:	2301      	movs	r3, #1
   24522:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   24524:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24526:	f7fd f9d1 	bl	218cc <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2452a:	42b4      	cmp	r4, r6
   2452c:	f105 35ff 	add.w	r5, r5, #4294967295
   24530:	d1f4      	bne.n	2451c <bt_settings_decode_key+0x20>
	return 0;
   24532:	2000      	movs	r0, #0
}
   24534:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   24536:	2b31      	cmp	r3, #49	; 0x31
   24538:	d101      	bne.n	2453e <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2453a:	2301      	movs	r3, #1
   2453c:	e7ea      	b.n	24514 <bt_settings_decode_key+0x18>
		return -EINVAL;
   2453e:	f06f 0015 	mvn.w	r0, #21
   24542:	e7f7      	b.n	24534 <bt_settings_decode_key+0x38>

00024544 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   24544:	b510      	push	{r4, lr}
   24546:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   24548:	7801      	ldrb	r1, [r0, #0]
   2454a:	7822      	ldrb	r2, [r4, #0]
   2454c:	428a      	cmp	r2, r1
{
   2454e:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   24550:	d00f      	beq.n	24572 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   24552:	4669      	mov	r1, sp
   24554:	f7e4 f8be 	bl	86d4 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   24558:	a905      	add	r1, sp, #20
   2455a:	4620      	mov	r0, r4
   2455c:	f7e4 f8ba 	bl	86d4 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   24560:	2210      	movs	r2, #16
   24562:	f10d 0115 	add.w	r1, sp, #21
   24566:	f10d 0001 	add.w	r0, sp, #1
   2456a:	f7ff feba 	bl	242e2 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   2456e:	b00a      	add	sp, #40	; 0x28
   24570:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   24572:	2a01      	cmp	r2, #1
   24574:	d006      	beq.n	24584 <bt_uuid_cmp+0x40>
   24576:	2a02      	cmp	r2, #2
   24578:	d007      	beq.n	2458a <bt_uuid_cmp+0x46>
   2457a:	b972      	cbnz	r2, 2459a <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   2457c:	8840      	ldrh	r0, [r0, #2]
   2457e:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   24580:	1ac0      	subs	r0, r0, r3
   24582:	e7f4      	b.n	2456e <bt_uuid_cmp+0x2a>
   24584:	6840      	ldr	r0, [r0, #4]
   24586:	6863      	ldr	r3, [r4, #4]
   24588:	e7fa      	b.n	24580 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   2458a:	2210      	movs	r2, #16
   2458c:	1c61      	adds	r1, r4, #1
   2458e:	3001      	adds	r0, #1
}
   24590:	b00a      	add	sp, #40	; 0x28
   24592:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   24596:	f7ff bea4 	b.w	242e2 <memcmp>
	switch (u1->type) {
   2459a:	f06f 0015 	mvn.w	r0, #21
   2459e:	e7e6      	b.n	2456e <bt_uuid_cmp+0x2a>

000245a0 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   245a0:	2a04      	cmp	r2, #4
{
   245a2:	b510      	push	{r4, lr}
	switch (data_len) {
   245a4:	d00a      	beq.n	245bc <bt_uuid_create+0x1c>
   245a6:	2a10      	cmp	r2, #16
   245a8:	d00d      	beq.n	245c6 <bt_uuid_create+0x26>
   245aa:	2a02      	cmp	r2, #2
   245ac:	f04f 0300 	mov.w	r3, #0
   245b0:	d10f      	bne.n	245d2 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   245b2:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   245b4:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   245b6:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   245b8:	2001      	movs	r0, #1
}
   245ba:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   245bc:	2301      	movs	r3, #1
   245be:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   245c0:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   245c2:	6042      	str	r2, [r0, #4]
		break;
   245c4:	e7f8      	b.n	245b8 <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   245c6:	2302      	movs	r3, #2
   245c8:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   245cc:	f7ff fe9a 	bl	24304 <memcpy>
		break;
   245d0:	e7f2      	b.n	245b8 <bt_uuid_create+0x18>
	switch (data_len) {
   245d2:	4618      	mov	r0, r3
   245d4:	e7f1      	b.n	245ba <bt_uuid_create+0x1a>

000245d6 <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   245d6:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   245d8:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   245da:	2106      	movs	r1, #6
{
   245dc:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   245de:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   245e2:	f7ee fee5 	bl	133b0 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   245e6:	b918      	cbnz	r0, 245f0 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   245e8:	79a3      	ldrb	r3, [r4, #6]
   245ea:	f063 033f 	orn	r3, r3, #63	; 0x3f
   245ee:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   245f0:	bd10      	pop	{r4, pc}

000245f2 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   245f2:	280f      	cmp	r0, #15
   245f4:	d806      	bhi.n	24604 <bt_hci_evt_get_flags+0x12>
   245f6:	280d      	cmp	r0, #13
   245f8:	d80b      	bhi.n	24612 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   245fa:	2805      	cmp	r0, #5
   245fc:	bf14      	ite	ne
   245fe:	2002      	movne	r0, #2
   24600:	2003      	moveq	r0, #3
   24602:	4770      	bx	lr
	switch (evt) {
   24604:	2813      	cmp	r0, #19
   24606:	d004      	beq.n	24612 <bt_hci_evt_get_flags+0x20>
   24608:	281a      	cmp	r0, #26
   2460a:	bf14      	ite	ne
   2460c:	2002      	movne	r0, #2
   2460e:	2001      	moveq	r0, #1
   24610:	4770      	bx	lr
   24612:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   24614:	4770      	bx	lr

00024616 <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   24616:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2461a:	b193      	cbz	r3, 24642 <update_sec_level+0x2c>
   2461c:	7b5a      	ldrb	r2, [r3, #13]
   2461e:	07d1      	lsls	r1, r2, #31
   24620:	d50f      	bpl.n	24642 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   24622:	06d2      	lsls	r2, r2, #27
   24624:	d50b      	bpl.n	2463e <update_sec_level+0x28>
   24626:	7b1b      	ldrb	r3, [r3, #12]
   24628:	2b10      	cmp	r3, #16
   2462a:	d108      	bne.n	2463e <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   2462c:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   2462e:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   24630:	7a82      	ldrb	r2, [r0, #10]
   24632:	7a40      	ldrb	r0, [r0, #9]
}
   24634:	4282      	cmp	r2, r0
   24636:	bf8c      	ite	hi
   24638:	2000      	movhi	r0, #0
   2463a:	2001      	movls	r0, #1
   2463c:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   2463e:	2303      	movs	r3, #3
   24640:	e7f5      	b.n	2462e <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   24642:	2302      	movs	r3, #2
   24644:	e7f3      	b.n	2462e <update_sec_level+0x18>

00024646 <get_adv_channel_map>:
{
   24646:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   24648:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   2464c:	bf0c      	ite	eq
   2464e:	2007      	moveq	r0, #7
   24650:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   24652:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   24654:	bf48      	it	mi
   24656:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   2465a:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   2465c:	bf48      	it	mi
   2465e:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   24662:	4770      	bx	lr

00024664 <atomic_and>:
{
   24664:	4603      	mov	r3, r0
}
   24666:	f3bf 8f5b 	dmb	ish
   2466a:	e853 0f00 	ldrex	r0, [r3]
   2466e:	ea00 0201 	and.w	r2, r0, r1
   24672:	e843 2c00 	strex	ip, r2, [r3]
   24676:	f1bc 0f00 	cmp.w	ip, #0
   2467a:	d1f6      	bne.n	2466a <atomic_and+0x6>
   2467c:	f3bf 8f5b 	dmb	ish
   24680:	4770      	bx	lr

00024682 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24682:	f3bf 8f5b 	dmb	ish
   24686:	6800      	ldr	r0, [r0, #0]
   24688:	f3bf 8f5b 	dmb	ish
}
   2468c:	4770      	bx	lr

0002468e <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   2468e:	2207      	movs	r2, #7
   24690:	f7ff be27 	b.w	242e2 <memcmp>

00024694 <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   24694:	2206      	movs	r2, #6
   24696:	f7ff be35 	b.w	24304 <memcpy>

0002469a <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   2469a:	2207      	movs	r2, #7
   2469c:	f7ff be32 	b.w	24304 <memcpy>

000246a0 <atomic_or>:
{
   246a0:	4603      	mov	r3, r0
}
   246a2:	f3bf 8f5b 	dmb	ish
   246a6:	e853 0f00 	ldrex	r0, [r3]
   246aa:	ea40 0201 	orr.w	r2, r0, r1
   246ae:	e843 2c00 	strex	ip, r2, [r3]
   246b2:	f1bc 0f00 	cmp.w	ip, #0
   246b6:	d1f6      	bne.n	246a6 <atomic_or+0x6>
   246b8:	f3bf 8f5b 	dmb	ish
   246bc:	4770      	bx	lr

000246be <atomic_test_and_set_bit>:
{
   246be:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   246c0:	2301      	movs	r3, #1
   246c2:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   246c6:	f7ff ffeb 	bl	246a0 <atomic_or>
	return (old & mask) != 0;
   246ca:	4201      	tst	r1, r0
}
   246cc:	bf14      	ite	ne
   246ce:	2001      	movne	r0, #1
   246d0:	2000      	moveq	r0, #0
   246d2:	bd08      	pop	{r3, pc}

000246d4 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   246d4:	460b      	mov	r3, r1
   246d6:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   246d8:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   246da:	f001 041f 	and.w	r4, r1, #31
   246de:	2101      	movs	r1, #1
   246e0:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   246e2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   246e6:	b112      	cbz	r2, 246ee <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   246e8:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   246ea:	f7ff bfd9 	b.w	246a0 <atomic_or>
}
   246ee:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   246f0:	43c9      	mvns	r1, r1
   246f2:	f7ff bfb7 	b.w	24664 <atomic_and>

000246f6 <unpair_remote>:
{
   246f6:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   246f8:	4601      	mov	r1, r0
   246fa:	7818      	ldrb	r0, [r3, #0]
   246fc:	f7e4 b960 	b.w	89c0 <unpair>

00024700 <sys_put_le64>:
	dst[1] = val >> 8;
   24700:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24704:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   24706:	0e00      	lsrs	r0, r0, #24
   24708:	7053      	strb	r3, [r2, #1]
   2470a:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   2470c:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   2470e:	f3c1 2007 	ubfx	r0, r1, #8, #8
   24712:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   24714:	7093      	strb	r3, [r2, #2]
   24716:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   24718:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2471a:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   2471c:	71d1      	strb	r1, [r2, #7]
}
   2471e:	4770      	bx	lr

00024720 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   24720:	f100 0210 	add.w	r2, r0, #16
{
   24724:	b508      	push	{r3, lr}
   24726:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   24728:	4610      	mov	r0, r2
   2472a:	f7ff ffaa 	bl	24682 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2472e:	0640      	lsls	r0, r0, #25
   24730:	d50a      	bpl.n	24748 <adv_id_check_connectable_func+0x28>
   24732:	4610      	mov	r0, r2
   24734:	f7ff ffa5 	bl	24682 <atomic_get>
   24738:	05c2      	lsls	r2, r0, #23
   2473a:	d505      	bpl.n	24748 <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   2473c:	781a      	ldrb	r2, [r3, #0]
   2473e:	780b      	ldrb	r3, [r1, #0]
   24740:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   24742:	bf1c      	itt	ne
   24744:	2301      	movne	r3, #1
   24746:	704b      	strbne	r3, [r1, #1]
}
   24748:	bd08      	pop	{r3, pc}

0002474a <adv_rpa_invalidate>:
{
   2474a:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   2474c:	f100 0310 	add.w	r3, r0, #16
   24750:	4618      	mov	r0, r3
   24752:	f7ff ff96 	bl	24682 <atomic_get>
   24756:	0682      	lsls	r2, r0, #26
   24758:	d406      	bmi.n	24768 <adv_rpa_invalidate+0x1e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2475a:	4618      	mov	r0, r3
   2475c:	f06f 0110 	mvn.w	r1, #16
}
   24760:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   24764:	f7ff bf7e 	b.w	24664 <atomic_and>
   24768:	bd08      	pop	{r3, pc}

0002476a <adv_is_private_enabled>:
{
   2476a:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   2476c:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   24770:	4618      	mov	r0, r3
   24772:	f7ff ff86 	bl	24682 <atomic_get>
   24776:	0642      	lsls	r2, r0, #25
   24778:	d506      	bpl.n	24788 <adv_is_private_enabled+0x1e>
   2477a:	4618      	mov	r0, r3
   2477c:	f7ff ff81 	bl	24682 <atomic_get>
   24780:	0503      	lsls	r3, r0, #20
		*adv_enabled = true;
   24782:	bf5c      	itt	pl
   24784:	2301      	movpl	r3, #1
   24786:	700b      	strbpl	r3, [r1, #0]
}
   24788:	bd08      	pop	{r3, pc}

0002478a <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   2478a:	f100 0310 	add.w	r3, r0, #16
{
   2478e:	b510      	push	{r4, lr}
   24790:	4604      	mov	r4, r0
   24792:	4618      	mov	r0, r3
   24794:	f7ff ff75 	bl	24682 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   24798:	0642      	lsls	r2, r0, #25
   2479a:	d50a      	bpl.n	247b2 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2479c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   247a0:	4618      	mov	r0, r3
   247a2:	f7ff ff7d 	bl	246a0 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   247a6:	4620      	mov	r0, r4
   247a8:	2100      	movs	r1, #0
}
   247aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   247ae:	f7e4 bff1 	b.w	9794 <set_le_adv_enable_legacy>
}
   247b2:	bd10      	pop	{r4, pc}

000247b4 <adv_unpause_enabled>:
{
   247b4:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   247b6:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   247ba:	4604      	mov	r4, r0
   247bc:	3010      	adds	r0, #16
   247be:	f7ff ff51 	bl	24664 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   247c2:	0483      	lsls	r3, r0, #18
   247c4:	d505      	bpl.n	247d2 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   247c6:	4620      	mov	r0, r4
   247c8:	2101      	movs	r1, #1
}
   247ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   247ce:	f7e4 bfe1 	b.w	9794 <set_le_adv_enable_legacy>
}
   247d2:	bd10      	pop	{r4, pc}

000247d4 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   247d4:	7a03      	ldrb	r3, [r0, #8]
   247d6:	075b      	lsls	r3, r3, #29
{
   247d8:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   247da:	d505      	bpl.n	247e8 <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   247dc:	4601      	mov	r1, r0
   247de:	322a      	adds	r2, #42	; 0x2a
   247e0:	f811 0b01 	ldrb.w	r0, [r1], #1
   247e4:	f7e5 b892 	b.w	990c <hci_id_add>
}
   247e8:	4770      	bx	lr

000247ea <addr_res_enable>:
{
   247ea:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   247ec:	2101      	movs	r1, #1
{
   247ee:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   247f0:	f242 002d 	movw	r0, #8237	; 0x202d
   247f4:	f7e4 fd30 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
   247f8:	4604      	mov	r4, r0
   247fa:	b158      	cbz	r0, 24814 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   247fc:	4629      	mov	r1, r5
   247fe:	3008      	adds	r0, #8
   24800:	f001 fde3 	bl	263ca <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24804:	4621      	mov	r1, r4
   24806:	2200      	movs	r2, #0
}
   24808:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   2480c:	f242 002d 	movw	r0, #8237	; 0x202d
   24810:	f7e4 be82 	b.w	9518 <bt_hci_cmd_send_sync>
}
   24814:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24818:	bd38      	pop	{r3, r4, r5, pc}

0002481a <bt_lookup_id_addr>:
{
   2481a:	b510      	push	{r4, lr}
   2481c:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   2481e:	f7eb fd23 	bl	10268 <bt_keys_find_irk>
		if (keys) {
   24822:	b100      	cbz	r0, 24826 <bt_lookup_id_addr+0xc>
			return &keys->addr;
   24824:	1c44      	adds	r4, r0, #1
}
   24826:	4620      	mov	r0, r4
   24828:	bd10      	pop	{r4, pc}

0002482a <bt_hci_disconnect>:
{
   2482a:	b570      	push	{r4, r5, r6, lr}
   2482c:	4606      	mov	r6, r0
   2482e:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24830:	f240 4006 	movw	r0, #1030	; 0x406
   24834:	2103      	movs	r1, #3
   24836:	f7e4 fd0f 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
   2483a:	4604      	mov	r4, r0
   2483c:	b168      	cbz	r0, 2485a <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   2483e:	2103      	movs	r1, #3
   24840:	3008      	adds	r0, #8
   24842:	f001 fdb3 	bl	263ac <net_buf_simple_add>
	disconn->reason = reason;
   24846:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   24848:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   2484a:	4621      	mov	r1, r4
   2484c:	2200      	movs	r2, #0
}
   2484e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   24852:	f240 4006 	movw	r0, #1030	; 0x406
   24856:	f7e4 be5f 	b.w	9518 <bt_hci_cmd_send_sync>
}
   2485a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2485e:	bd70      	pop	{r4, r5, r6, pc}

00024860 <bt_le_set_data_len>:
{
   24860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24862:	4607      	mov	r7, r0
   24864:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   24866:	f242 0022 	movw	r0, #8226	; 0x2022
   2486a:	2106      	movs	r1, #6
{
   2486c:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   2486e:	f7e4 fcf3 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
   24872:	4604      	mov	r4, r0
   24874:	b170      	cbz	r0, 24894 <bt_le_set_data_len+0x34>
   24876:	2106      	movs	r1, #6
   24878:	3008      	adds	r0, #8
   2487a:	f001 fd97 	bl	263ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   2487e:	883b      	ldrh	r3, [r7, #0]
   24880:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   24882:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   24884:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24886:	4621      	mov	r1, r4
   24888:	f242 0022 	movw	r0, #8226	; 0x2022
}
   2488c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   24890:	f7e4 bd1c 	b.w	92cc <bt_hci_cmd_send>
}
   24894:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24898:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002489a <bt_le_set_phy>:
{
   2489a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2489e:	4680      	mov	r8, r0
   248a0:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   248a2:	f242 0032 	movw	r0, #8242	; 0x2032
   248a6:	2107      	movs	r1, #7
{
   248a8:	f89d 9020 	ldrb.w	r9, [sp, #32]
   248ac:	4616      	mov	r6, r2
   248ae:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   248b0:	f7e4 fcd2 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
   248b4:	4604      	mov	r4, r0
   248b6:	b190      	cbz	r0, 248de <bt_le_set_phy+0x44>
   248b8:	2107      	movs	r1, #7
   248ba:	3008      	adds	r0, #8
   248bc:	f001 fd76 	bl	263ac <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   248c0:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   248c4:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   248c6:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   248c8:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   248ca:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   248cc:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   248d0:	4621      	mov	r1, r4
   248d2:	f242 0032 	movw	r0, #8242	; 0x2032
}
   248d6:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   248da:	f7e4 bcf7 	b.w	92cc <bt_hci_cmd_send>
}
   248de:	f06f 0036 	mvn.w	r0, #54	; 0x36
   248e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000248e6 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   248e6:	8803      	ldrh	r3, [r0, #0]
   248e8:	8842      	ldrh	r2, [r0, #2]
   248ea:	4293      	cmp	r3, r2
{
   248ec:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   248ee:	d819      	bhi.n	24924 <bt_le_conn_params_valid+0x3e>
   248f0:	2b05      	cmp	r3, #5
   248f2:	d917      	bls.n	24924 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   248f4:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   248f8:	d814      	bhi.n	24924 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   248fa:	8883      	ldrh	r3, [r0, #4]
   248fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24900:	d210      	bcs.n	24924 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24902:	88c0      	ldrh	r0, [r0, #6]
   24904:	f1a0 010a 	sub.w	r1, r0, #10
   24908:	b289      	uxth	r1, r1
   2490a:	f640 4476 	movw	r4, #3190	; 0xc76
   2490e:	42a1      	cmp	r1, r4
   24910:	d808      	bhi.n	24924 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24912:	3301      	adds	r3, #1
   24914:	b29b      	uxth	r3, r3
   24916:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   24918:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   2491c:	bf34      	ite	cc
   2491e:	2001      	movcc	r0, #1
   24920:	2000      	movcs	r0, #0
}
   24922:	bd10      	pop	{r4, pc}
		return false;
   24924:	2000      	movs	r0, #0
   24926:	e7fc      	b.n	24922 <bt_le_conn_params_valid+0x3c>

00024928 <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   24928:	7a03      	ldrb	r3, [r0, #8]
   2492a:	07d9      	lsls	r1, r3, #31
   2492c:	d504      	bpl.n	24938 <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   2492e:	f023 0301 	bic.w	r3, r3, #1
   24932:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   24934:	f7e5 bab2 	b.w	9e9c <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   24938:	0799      	lsls	r1, r3, #30
   2493a:	d504      	bpl.n	24946 <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   2493c:	f023 0302 	bic.w	r3, r3, #2
   24940:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   24942:	f7e5 bb7d 	b.w	a040 <bt_id_del>
}
   24946:	4770      	bx	lr

00024948 <bt_send>:
		return bt_hci_ecc_send(buf);
   24948:	f7e3 bc8c 	b.w	8264 <bt_hci_ecc_send>

0002494c <bt_addr_le_is_bonded>:
{
   2494c:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   2494e:	f7eb fcc3 	bl	102d8 <bt_keys_find_addr>
		return keys && keys->keys;
   24952:	b118      	cbz	r0, 2495c <bt_addr_le_is_bonded+0x10>
   24954:	89c0      	ldrh	r0, [r0, #14]
   24956:	3800      	subs	r0, #0
   24958:	bf18      	it	ne
   2495a:	2001      	movne	r0, #1
}
   2495c:	bd08      	pop	{r3, pc}

0002495e <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   2495e:	6880      	ldr	r0, [r0, #8]
   24960:	f7e6 b980 	b.w	ac64 <enh_conn_complete>

00024964 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   24964:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24966:	f04f 32ff 	mov.w	r2, #4294967295
{
   2496a:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   2496c:	f04f 33ff 	mov.w	r3, #4294967295
   24970:	2100      	movs	r1, #0
{
   24972:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24974:	f7e3 ff1a 	bl	87ac <bt_buf_get_evt>
   24978:	2102      	movs	r1, #2
   2497a:	4604      	mov	r4, r0
   2497c:	3008      	adds	r0, #8
   2497e:	f001 fd15 	bl	263ac <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   24982:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   24984:	7045      	strb	r5, [r0, #1]

	return buf;
}
   24986:	4620      	mov	r0, r4
   24988:	bd70      	pop	{r4, r5, r6, pc}

0002498a <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2498a:	3103      	adds	r1, #3
{
   2498c:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   2498e:	b2c9      	uxtb	r1, r1
{
   24990:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24992:	200e      	movs	r0, #14
   24994:	f7ff ffe6 	bl	24964 <bt_hci_evt_create>
   24998:	2103      	movs	r1, #3
   2499a:	4604      	mov	r4, r0
   2499c:	3008      	adds	r0, #8
   2499e:	f001 fd05 	bl	263ac <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   249a2:	2301      	movs	r3, #1
   249a4:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   249a6:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   249aa:	4620      	mov	r0, r4
   249ac:	bd38      	pop	{r3, r4, r5, pc}

000249ae <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   249ae:	b570      	push	{r4, r5, r6, lr}
   249b0:	4605      	mov	r5, r0
   249b2:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   249b4:	200f      	movs	r0, #15
   249b6:	2104      	movs	r1, #4
   249b8:	f7ff ffd4 	bl	24964 <bt_hci_evt_create>
   249bc:	2104      	movs	r1, #4
   249be:	4604      	mov	r4, r0
   249c0:	3008      	adds	r0, #8
   249c2:	f001 fcf3 	bl	263ac <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   249c6:	2201      	movs	r2, #1
	cs->status = status;
   249c8:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   249ca:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   249cc:	8045      	strh	r5, [r0, #2]

	return buf;
}
   249ce:	4620      	mov	r0, r4
   249d0:	bd70      	pop	{r4, r5, r6, pc}

000249d2 <atomic_and>:
{
   249d2:	4603      	mov	r3, r0
}
   249d4:	f3bf 8f5b 	dmb	ish
   249d8:	e853 0f00 	ldrex	r0, [r3]
   249dc:	ea00 0201 	and.w	r2, r0, r1
   249e0:	e843 2c00 	strex	ip, r2, [r3]
   249e4:	f1bc 0f00 	cmp.w	ip, #0
   249e8:	d1f6      	bne.n	249d8 <atomic_and+0x6>
   249ea:	f3bf 8f5b 	dmb	ish
   249ee:	4770      	bx	lr

000249f0 <tx_notify>:
{
   249f0:	b570      	push	{r4, r5, r6, lr}
   249f2:	4604      	mov	r4, r0
	__asm__ volatile(
   249f4:	f04f 0220 	mov.w	r2, #32
   249f8:	f3ef 8311 	mrs	r3, BASEPRI
   249fc:	f382 8811 	msr	BASEPRI, r2
   24a00:	f3bf 8f6f 	isb	sy
	return list->head;
   24a04:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   24a06:	b920      	cbnz	r0, 24a12 <tx_notify+0x22>
	__asm__ volatile(
   24a08:	f383 8811 	msr	BASEPRI, r3
   24a0c:	f3bf 8f6f 	isb	sy
}
   24a10:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24a12:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   24a14:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24a16:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24a18:	4288      	cmp	r0, r1
	list->tail = node;
   24a1a:	bf08      	it	eq
   24a1c:	6262      	streq	r2, [r4, #36]	; 0x24
   24a1e:	f383 8811 	msr	BASEPRI, r3
   24a22:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   24a26:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   24a2a:	f7e6 faf5 	bl	b018 <tx_free>
		cb(conn, user_data);
   24a2e:	4631      	mov	r1, r6
   24a30:	4620      	mov	r0, r4
   24a32:	47a8      	blx	r5
	while (1) {
   24a34:	e7de      	b.n	249f4 <tx_notify+0x4>

00024a36 <tx_complete_work>:
	tx_notify(conn);
   24a36:	3828      	subs	r0, #40	; 0x28
   24a38:	f7ff bfda 	b.w	249f0 <tx_notify>

00024a3c <bt_conn_new>:
{
   24a3c:	b538      	push	{r3, r4, r5, lr}
   24a3e:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   24a40:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24a42:	2501      	movs	r5, #1
   24a44:	428b      	cmp	r3, r1
   24a46:	d102      	bne.n	24a4e <bt_conn_new+0x12>
		return NULL;
   24a48:	2400      	movs	r4, #0
}
   24a4a:	4620      	mov	r0, r4
   24a4c:	bd38      	pop	{r3, r4, r5, pc}
   24a4e:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   24a52:	f3bf 8f5b 	dmb	ish
   24a56:	e852 0f00 	ldrex	r0, [r2]
   24a5a:	2800      	cmp	r0, #0
   24a5c:	d104      	bne.n	24a68 <bt_conn_new+0x2c>
   24a5e:	e842 5c00 	strex	ip, r5, [r2]
   24a62:	f1bc 0f00 	cmp.w	ip, #0
   24a66:	d1f6      	bne.n	24a56 <bt_conn_new+0x1a>
   24a68:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   24a6c:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24a70:	d002      	beq.n	24a78 <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   24a72:	3301      	adds	r3, #1
   24a74:	4604      	mov	r4, r0
   24a76:	e7e5      	b.n	24a44 <bt_conn_new+0x8>
	if (!conn) {
   24a78:	2c00      	cmp	r4, #0
   24a7a:	d0e6      	beq.n	24a4a <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   24a7c:	22b8      	movs	r2, #184	; 0xb8
   24a7e:	2100      	movs	r1, #0
   24a80:	4620      	mov	r0, r4
   24a82:	f7ff fc6a 	bl	2435a <memset>
	return conn;
   24a86:	e7e0      	b.n	24a4a <bt_conn_new+0xe>

00024a88 <bt_conn_set_security>:
{
   24a88:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   24a8a:	7b43      	ldrb	r3, [r0, #13]
   24a8c:	2b07      	cmp	r3, #7
{
   24a8e:	4604      	mov	r4, r0
   24a90:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   24a92:	d124      	bne.n	24ade <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   24a94:	7a43      	ldrb	r3, [r0, #9]
   24a96:	428b      	cmp	r3, r1
   24a98:	d224      	bcs.n	24ae4 <bt_conn_set_security+0x5c>
   24a9a:	7a83      	ldrb	r3, [r0, #10]
   24a9c:	428b      	cmp	r3, r1
   24a9e:	d221      	bcs.n	24ae4 <bt_conn_set_security+0x5c>
	if (val) {
   24aa0:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   24aa2:	f100 0004 	add.w	r0, r0, #4
   24aa6:	d515      	bpl.n	24ad4 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24aa8:	f3bf 8f5b 	dmb	ish
   24aac:	e850 3f00 	ldrex	r3, [r0]
   24ab0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   24ab4:	e840 3200 	strex	r2, r3, [r0]
   24ab8:	2a00      	cmp	r2, #0
   24aba:	d1f7      	bne.n	24aac <bt_conn_set_security+0x24>
   24abc:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   24ac0:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   24ac4:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   24ac6:	4620      	mov	r0, r4
   24ac8:	f7ea fd98 	bl	f5fc <bt_smp_start_security>
	if (err) {
   24acc:	b108      	cbz	r0, 24ad2 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   24ace:	7a63      	ldrb	r3, [r4, #9]
   24ad0:	72a3      	strb	r3, [r4, #10]
}
   24ad2:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24ad4:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   24ad8:	f7ff ff7b 	bl	249d2 <atomic_and>
   24adc:	e7f0      	b.n	24ac0 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   24ade:	f06f 0038 	mvn.w	r0, #56	; 0x38
   24ae2:	e7f6      	b.n	24ad2 <bt_conn_set_security+0x4a>
		return 0;
   24ae4:	2000      	movs	r0, #0
   24ae6:	e7f4      	b.n	24ad2 <bt_conn_set_security+0x4a>

00024ae8 <bt_conn_get_security>:
}
   24ae8:	7a40      	ldrb	r0, [r0, #9]
   24aea:	4770      	bx	lr

00024aec <bt_conn_reset_rx_state>:
{
   24aec:	b510      	push	{r4, lr}
   24aee:	4604      	mov	r4, r0
	if (!conn->rx) {
   24af0:	6900      	ldr	r0, [r0, #16]
   24af2:	b118      	cbz	r0, 24afc <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24af4:	f7f8 fd28 	bl	1d548 <net_buf_unref>
	conn->rx = NULL;
   24af8:	2300      	movs	r3, #0
   24afa:	6123      	str	r3, [r4, #16]
}
   24afc:	bd10      	pop	{r4, pc}

00024afe <bt_conn_is_peer_addr_le>:
{
   24afe:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24b00:	7a03      	ldrb	r3, [r0, #8]
   24b02:	428b      	cmp	r3, r1
{
   24b04:	4604      	mov	r4, r0
   24b06:	4615      	mov	r5, r2
	if (id != conn->id) {
   24b08:	d115      	bne.n	24b36 <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24b0a:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24b0e:	2207      	movs	r2, #7
   24b10:	4628      	mov	r0, r5
   24b12:	f7ff fbe6 	bl	242e2 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   24b16:	b180      	cbz	r0, 24b3a <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   24b18:	78e3      	ldrb	r3, [r4, #3]
   24b1a:	2207      	movs	r2, #7
   24b1c:	b943      	cbnz	r3, 24b30 <bt_conn_is_peer_addr_le+0x32>
   24b1e:	f104 0196 	add.w	r1, r4, #150	; 0x96
   24b22:	4628      	mov	r0, r5
   24b24:	f7ff fbdd 	bl	242e2 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   24b28:	fab0 f080 	clz	r0, r0
   24b2c:	0940      	lsrs	r0, r0, #5
}
   24b2e:	bd38      	pop	{r3, r4, r5, pc}
   24b30:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   24b34:	e7f5      	b.n	24b22 <bt_conn_is_peer_addr_le+0x24>
		return false;
   24b36:	2000      	movs	r0, #0
   24b38:	e7f9      	b.n	24b2e <bt_conn_is_peer_addr_le+0x30>
		return true;
   24b3a:	2001      	movs	r0, #1
   24b3c:	e7f7      	b.n	24b2e <bt_conn_is_peer_addr_le+0x30>

00024b3e <bt_conn_ref>:
{
   24b3e:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   24b40:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24b44:	f3bf 8f5b 	dmb	ish
   24b48:	6813      	ldr	r3, [r2, #0]
   24b4a:	f3bf 8f5b 	dmb	ish
		if (!old) {
   24b4e:	b17b      	cbz	r3, 24b70 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24b50:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   24b54:	1c59      	adds	r1, r3, #1
   24b56:	e852 4f00 	ldrex	r4, [r2]
   24b5a:	429c      	cmp	r4, r3
   24b5c:	d104      	bne.n	24b68 <bt_conn_ref+0x2a>
   24b5e:	e842 1c00 	strex	ip, r1, [r2]
   24b62:	f1bc 0f00 	cmp.w	ip, #0
   24b66:	d1f6      	bne.n	24b56 <bt_conn_ref+0x18>
   24b68:	f3bf 8f5b 	dmb	ish
   24b6c:	d1ea      	bne.n	24b44 <bt_conn_ref+0x6>
}
   24b6e:	bd10      	pop	{r4, pc}
			return NULL;
   24b70:	4618      	mov	r0, r3
   24b72:	e7fc      	b.n	24b6e <bt_conn_ref+0x30>

00024b74 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   24b74:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24b78:	f3bf 8f5b 	dmb	ish
   24b7c:	e853 2f00 	ldrex	r2, [r3]
   24b80:	3a01      	subs	r2, #1
   24b82:	e843 2100 	strex	r1, r2, [r3]
   24b86:	2900      	cmp	r1, #0
   24b88:	d1f8      	bne.n	24b7c <bt_conn_unref+0x8>
   24b8a:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24b8e:	f3bf 8f5b 	dmb	ish
   24b92:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24b96:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24b9a:	b90b      	cbnz	r3, 24ba0 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   24b9c:	f7e6 b81c 	b.w	abd8 <bt_le_adv_resume>
}
   24ba0:	4770      	bx	lr

00024ba2 <conn_lookup_handle>:
{
   24ba2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24ba6:	4607      	mov	r7, r0
   24ba8:	460e      	mov	r6, r1
   24baa:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24bac:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24bae:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   24bb2:	42b4      	cmp	r4, r6
   24bb4:	d103      	bne.n	24bbe <conn_lookup_handle+0x1c>
	return NULL;
   24bb6:	2300      	movs	r3, #0
}
   24bb8:	4618      	mov	r0, r3
   24bba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24bbe:	fb09 7004 	mla	r0, r9, r4, r7
   24bc2:	f7ff ffbc 	bl	24b3e <bt_conn_ref>
   24bc6:	4603      	mov	r3, r0
		if (!conn) {
   24bc8:	b158      	cbz	r0, 24be2 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24bca:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24bcc:	2d01      	cmp	r5, #1
   24bce:	d002      	beq.n	24bd6 <conn_lookup_handle+0x34>
   24bd0:	3d07      	subs	r5, #7
   24bd2:	2d01      	cmp	r5, #1
   24bd4:	d803      	bhi.n	24bde <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24bd6:	881a      	ldrh	r2, [r3, #0]
   24bd8:	4542      	cmp	r2, r8
   24bda:	d0ed      	beq.n	24bb8 <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24bdc:	4618      	mov	r0, r3
   24bde:	f7ff ffc9 	bl	24b74 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24be2:	3401      	adds	r4, #1
   24be4:	e7e5      	b.n	24bb2 <conn_lookup_handle+0x10>

00024be6 <bt_conn_get_dst>:
}
   24be6:	3088      	adds	r0, #136	; 0x88
   24be8:	4770      	bx	lr

00024bea <bt_conn_disconnect>:
{
   24bea:	b538      	push	{r3, r4, r5, lr}
   24bec:	7b43      	ldrb	r3, [r0, #13]
   24bee:	3b02      	subs	r3, #2
   24bf0:	4605      	mov	r5, r0
   24bf2:	2b06      	cmp	r3, #6
   24bf4:	d805      	bhi.n	24c02 <bt_conn_disconnect+0x18>
   24bf6:	e8df f003 	tbb	[pc, r3]
   24bfa:	0408      	.short	0x0408
   24bfc:	0e0c0404 	.word	0x0e0c0404
   24c00:	0c          	.byte	0x0c
   24c01:	00          	.byte	0x00
	switch (conn->state) {
   24c02:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   24c06:	4620      	mov	r0, r4
   24c08:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   24c0a:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   24c0c:	2100      	movs	r1, #0
   24c0e:	f7e6 fcd7 	bl	b5c0 <bt_conn_set_state>
		return 0;
   24c12:	2400      	movs	r4, #0
   24c14:	e7f7      	b.n	24c06 <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   24c16:	8800      	ldrh	r0, [r0, #0]
   24c18:	f7ff fe07 	bl	2482a <bt_hci_disconnect>
	if (err) {
   24c1c:	4604      	mov	r4, r0
   24c1e:	2800      	cmp	r0, #0
   24c20:	d1f1      	bne.n	24c06 <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   24c22:	2108      	movs	r1, #8
   24c24:	4628      	mov	r0, r5
   24c26:	f7e6 fccb 	bl	b5c0 <bt_conn_set_state>
	return 0;
   24c2a:	e7ec      	b.n	24c06 <bt_conn_disconnect+0x1c>

00024c2c <bt_conn_le_conn_update>:
{
   24c2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24c2e:	4607      	mov	r7, r0
   24c30:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   24c32:	f242 0013 	movw	r0, #8211	; 0x2013
   24c36:	210e      	movs	r1, #14
   24c38:	f7e4 fb0e 	bl	9258 <bt_hci_cmd_create>
	if (!buf) {
   24c3c:	4606      	mov	r6, r0
   24c3e:	b1d0      	cbz	r0, 24c76 <bt_conn_le_conn_update+0x4a>
   24c40:	210e      	movs	r1, #14
   24c42:	3008      	adds	r0, #8
   24c44:	f001 fbb2 	bl	263ac <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   24c48:	220e      	movs	r2, #14
   24c4a:	4604      	mov	r4, r0
   24c4c:	2100      	movs	r1, #0
   24c4e:	f7ff fb84 	bl	2435a <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24c52:	883b      	ldrh	r3, [r7, #0]
   24c54:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24c56:	882b      	ldrh	r3, [r5, #0]
   24c58:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24c5a:	886b      	ldrh	r3, [r5, #2]
   24c5c:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24c5e:	88ab      	ldrh	r3, [r5, #4]
   24c60:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24c62:	88eb      	ldrh	r3, [r5, #6]
   24c64:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24c66:	4631      	mov	r1, r6
   24c68:	2200      	movs	r2, #0
}
   24c6a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24c6e:	f242 0013 	movw	r0, #8211	; 0x2013
   24c72:	f7e4 bc51 	b.w	9518 <bt_hci_cmd_send_sync>
}
   24c76:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24c7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024c7c <l2cap_connected>:
}
   24c7c:	4770      	bx	lr

00024c7e <l2cap_disconnected>:
   24c7e:	4770      	bx	lr

00024c80 <bt_l2cap_chan_remove>:
	return list->head;
   24c80:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24c82:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24c84:	b17b      	cbz	r3, 24ca6 <bt_l2cap_chan_remove+0x26>
   24c86:	3b08      	subs	r3, #8
   24c88:	2200      	movs	r2, #0
   24c8a:	b163      	cbz	r3, 24ca6 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   24c8c:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   24c8e:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   24c92:	d10e      	bne.n	24cb2 <bt_l2cap_chan_remove+0x32>
	return node->next;
   24c94:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   24c96:	6d05      	ldr	r5, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   24c98:	b932      	cbnz	r2, 24ca8 <bt_l2cap_chan_remove+0x28>
   24c9a:	42ac      	cmp	r4, r5
	list->head = node;
   24c9c:	64c1      	str	r1, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   24c9e:	d100      	bne.n	24ca2 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   24ca0:	6501      	str	r1, [r0, #80]	; 0x50
	parent->next = child;
   24ca2:	2200      	movs	r2, #0
   24ca4:	609a      	str	r2, [r3, #8]
}
   24ca6:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   24ca8:	42ac      	cmp	r4, r5
	parent->next = child;
   24caa:	6011      	str	r1, [r2, #0]
	list->tail = node;
   24cac:	bf08      	it	eq
   24cae:	6502      	streq	r2, [r0, #80]	; 0x50
}
   24cb0:	e7f7      	b.n	24ca2 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24cb2:	2c00      	cmp	r4, #0
   24cb4:	d0f7      	beq.n	24ca6 <bt_l2cap_chan_remove+0x26>
	return node->next;
   24cb6:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24cb8:	2b00      	cmp	r3, #0
   24cba:	d0f4      	beq.n	24ca6 <bt_l2cap_chan_remove+0x26>
   24cbc:	3b08      	subs	r3, #8
   24cbe:	4622      	mov	r2, r4
   24cc0:	e7e3      	b.n	24c8a <bt_l2cap_chan_remove+0xa>

00024cc2 <bt_l2cap_chan_del>:
{
   24cc2:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   24cc4:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   24cc8:	4604      	mov	r4, r0
	if (!chan->conn) {
   24cca:	b123      	cbz	r3, 24cd6 <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24ccc:	686b      	ldr	r3, [r5, #4]
   24cce:	b103      	cbz	r3, 24cd2 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24cd0:	4798      	blx	r3
	chan->conn = NULL;
   24cd2:	2300      	movs	r3, #0
   24cd4:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   24cd6:	68e3      	ldr	r3, [r4, #12]
   24cd8:	b10b      	cbz	r3, 24cde <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24cda:	4620      	mov	r0, r4
   24cdc:	4798      	blx	r3
	if (ops->released) {
   24cde:	69eb      	ldr	r3, [r5, #28]
   24ce0:	b11b      	cbz	r3, 24cea <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24ce2:	4620      	mov	r0, r4
}
   24ce4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   24ce8:	4718      	bx	r3
}
   24cea:	bd70      	pop	{r4, r5, r6, pc}

00024cec <bt_l2cap_disconnected>:
	return list->head;
   24cec:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24cee:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24cf0:	b18b      	cbz	r3, 24d16 <bt_l2cap_disconnected+0x2a>
   24cf2:	f1b3 0008 	subs.w	r0, r3, #8
   24cf6:	d00e      	beq.n	24d16 <bt_l2cap_disconnected+0x2a>
	return node->next;
   24cf8:	681c      	ldr	r4, [r3, #0]
   24cfa:	b104      	cbz	r4, 24cfe <bt_l2cap_disconnected+0x12>
   24cfc:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   24cfe:	f7ff ffe0 	bl	24cc2 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24d02:	b144      	cbz	r4, 24d16 <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d04:	f114 0308 	adds.w	r3, r4, #8
   24d08:	d002      	beq.n	24d10 <bt_l2cap_disconnected+0x24>
	return node->next;
   24d0a:	68a3      	ldr	r3, [r4, #8]
   24d0c:	b103      	cbz	r3, 24d10 <bt_l2cap_disconnected+0x24>
   24d0e:	3b08      	subs	r3, #8
{
   24d10:	4620      	mov	r0, r4
   24d12:	461c      	mov	r4, r3
   24d14:	e7f3      	b.n	24cfe <bt_l2cap_disconnected+0x12>
}
   24d16:	bd10      	pop	{r4, pc}

00024d18 <bt_l2cap_security_changed>:
{
   24d18:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   24d1a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   24d1c:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24d1e:	b1a3      	cbz	r3, 24d4a <bt_l2cap_security_changed+0x32>
   24d20:	f1b3 0008 	subs.w	r0, r3, #8
   24d24:	d011      	beq.n	24d4a <bt_l2cap_security_changed+0x32>
	return node->next;
   24d26:	681c      	ldr	r4, [r3, #0]
   24d28:	b104      	cbz	r4, 24d2c <bt_l2cap_security_changed+0x14>
   24d2a:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   24d2c:	6843      	ldr	r3, [r0, #4]
   24d2e:	689b      	ldr	r3, [r3, #8]
   24d30:	b10b      	cbz	r3, 24d36 <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   24d32:	4629      	mov	r1, r5
   24d34:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24d36:	b144      	cbz	r4, 24d4a <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d38:	f114 0308 	adds.w	r3, r4, #8
   24d3c:	d002      	beq.n	24d44 <bt_l2cap_security_changed+0x2c>
	return node->next;
   24d3e:	68a3      	ldr	r3, [r4, #8]
   24d40:	b103      	cbz	r3, 24d44 <bt_l2cap_security_changed+0x2c>
   24d42:	3b08      	subs	r3, #8
{
   24d44:	4620      	mov	r0, r4
   24d46:	461c      	mov	r4, r3
   24d48:	e7f0      	b.n	24d2c <bt_l2cap_security_changed+0x14>
}
   24d4a:	bd38      	pop	{r3, r4, r5, pc}

00024d4c <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   24d4c:	3104      	adds	r1, #4
   24d4e:	f7e6 be0f 	b.w	b970 <bt_conn_create_pdu_timeout>

00024d52 <bt_l2cap_send_cb>:
{
   24d52:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24d56:	4614      	mov	r4, r2
   24d58:	4605      	mov	r5, r0
   24d5a:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   24d5c:	f102 0008 	add.w	r0, r2, #8
   24d60:	2104      	movs	r1, #4
   24d62:	461e      	mov	r6, r3
   24d64:	f8dd 8018 	ldr.w	r8, [sp, #24]
   24d68:	f001 fb37 	bl	263da <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24d6c:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   24d6e:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24d70:	3a04      	subs	r2, #4
   24d72:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24d74:	4643      	mov	r3, r8
   24d76:	4632      	mov	r2, r6
   24d78:	4621      	mov	r1, r4
   24d7a:	4628      	mov	r0, r5
}
   24d7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24d80:	f7e6 bb46 	b.w	b410 <bt_conn_send_cb>

00024d84 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   24d84:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24d86:	b160      	cbz	r0, 24da2 <bt_l2cap_le_lookup_tx_cid+0x1e>
   24d88:	3808      	subs	r0, #8
   24d8a:	b900      	cbnz	r0, 24d8e <bt_l2cap_le_lookup_tx_cid+0xa>
   24d8c:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   24d8e:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   24d92:	428b      	cmp	r3, r1
   24d94:	d005      	beq.n	24da2 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24d96:	f110 0308 	adds.w	r3, r0, #8
   24d9a:	d001      	beq.n	24da0 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   24d9c:	6880      	ldr	r0, [r0, #8]
   24d9e:	e7f2      	b.n	24d86 <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   24da0:	4618      	mov	r0, r3
}
   24da2:	4770      	bx	lr

00024da4 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   24da4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24da6:	b160      	cbz	r0, 24dc2 <bt_l2cap_le_lookup_rx_cid+0x1e>
   24da8:	3808      	subs	r0, #8
   24daa:	b900      	cbnz	r0, 24dae <bt_l2cap_le_lookup_rx_cid+0xa>
   24dac:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24dae:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   24db2:	428b      	cmp	r3, r1
   24db4:	d005      	beq.n	24dc2 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24db6:	f110 0308 	adds.w	r3, r0, #8
   24dba:	d001      	beq.n	24dc0 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   24dbc:	6880      	ldr	r0, [r0, #8]
   24dbe:	e7f2      	b.n	24da6 <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   24dc0:	4618      	mov	r0, r3
}
   24dc2:	4770      	bx	lr

00024dc4 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   24dc4:	4770      	bx	lr

00024dc6 <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   24dc6:	4603      	mov	r3, r0
	return list->head;
   24dc8:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24dca:	b128      	cbz	r0, 24dd8 <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24dcc:	6859      	ldr	r1, [r3, #4]
	return node->next;
   24dce:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24dd0:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24dd2:	4288      	cmp	r0, r1
	list->tail = node;
   24dd4:	bf08      	it	eq
   24dd6:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24dd8:	4770      	bx	lr

00024dda <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24dda:	4603      	mov	r3, r0
	size_t bytes = 0;
   24ddc:	2000      	movs	r0, #0

	while (buf) {
   24dde:	b903      	cbnz	r3, 24de2 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24de0:	4770      	bx	lr
		bytes += buf->len;
   24de2:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24de4:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24de6:	4410      	add	r0, r2
		buf = buf->frags;
   24de8:	e7f9      	b.n	24dde <net_buf_frags_len+0x4>

00024dea <att_sent>:
	if (chan->ops->sent) {
   24dea:	684b      	ldr	r3, [r1, #4]
   24dec:	695b      	ldr	r3, [r3, #20]
{
   24dee:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   24df0:	b103      	cbz	r3, 24df4 <att_sent+0xa>
		chan->ops->sent(chan);
   24df2:	4718      	bx	r3
}
   24df4:	4770      	bx	lr

00024df6 <attr_read_type_cb>:
{
   24df6:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24df8:	68d4      	ldr	r4, [r2, #12]
   24dfa:	7823      	ldrb	r3, [r4, #0]
   24dfc:	3102      	adds	r1, #2
   24dfe:	b913      	cbnz	r3, 24e06 <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   24e00:	7021      	strb	r1, [r4, #0]
	return true;
   24e02:	2001      	movs	r0, #1
   24e04:	e006      	b.n	24e14 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24e06:	428b      	cmp	r3, r1
   24e08:	d0fb      	beq.n	24e02 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24e0a:	8983      	ldrh	r3, [r0, #12]
   24e0c:	3b02      	subs	r3, #2
   24e0e:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   24e10:	2000      	movs	r0, #0
   24e12:	6110      	str	r0, [r2, #16]
}
   24e14:	bd10      	pop	{r4, pc}

00024e16 <att_op_get_type>:
	switch (op) {
   24e16:	281e      	cmp	r0, #30
   24e18:	d816      	bhi.n	24e48 <att_op_get_type+0x32>
   24e1a:	b308      	cbz	r0, 24e60 <att_op_get_type+0x4a>
   24e1c:	1e43      	subs	r3, r0, #1
   24e1e:	2b1d      	cmp	r3, #29
   24e20:	d81e      	bhi.n	24e60 <att_op_get_type+0x4a>
   24e22:	e8df f003 	tbb	[pc, r3]
   24e26:	2317      	.short	0x2317
   24e28:	23172317 	.word	0x23172317
   24e2c:	23172317 	.word	0x23172317
   24e30:	23172317 	.word	0x23172317
   24e34:	23172317 	.word	0x23172317
   24e38:	231d1d17 	.word	0x231d1d17
   24e3c:	1d172317 	.word	0x1d172317
   24e40:	0f1b1d19 	.word	0x0f1b1d19
   24e44:	2004      	movs	r0, #4
   24e46:	4770      	bx	lr
   24e48:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   24e4c:	2b52      	cmp	r3, #82	; 0x52
   24e4e:	d107      	bne.n	24e60 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   24e50:	2000      	movs	r0, #0
}
   24e52:	4770      	bx	lr
		return ATT_RESPONSE;
   24e54:	2002      	movs	r0, #2
   24e56:	4770      	bx	lr
		return ATT_NOTIFICATION;
   24e58:	2003      	movs	r0, #3
   24e5a:	4770      	bx	lr
		return ATT_INDICATION;
   24e5c:	2005      	movs	r0, #5
   24e5e:	4770      	bx	lr
		return ATT_COMMAND;
   24e60:	f010 0f40 	tst.w	r0, #64	; 0x40
   24e64:	bf0c      	ite	eq
   24e66:	2006      	moveq	r0, #6
   24e68:	2000      	movne	r0, #0
   24e6a:	4770      	bx	lr
		return ATT_REQUEST;
   24e6c:	2001      	movs	r0, #1
   24e6e:	4770      	bx	lr

00024e70 <bt_gatt_foreach_attr>:
{
   24e70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24e72:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24e76:	2300      	movs	r3, #0
   24e78:	9300      	str	r3, [sp, #0]
   24e7a:	461a      	mov	r2, r3
   24e7c:	f7e8 fe82 	bl	db84 <bt_gatt_foreach_attr_type>
}
   24e80:	b005      	add	sp, #20
   24e82:	f85d fb04 	ldr.w	pc, [sp], #4

00024e86 <find_info_cb>:
{
   24e86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   24e88:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   24e8a:	6817      	ldr	r7, [r2, #0]
{
   24e8c:	4605      	mov	r5, r0
   24e8e:	460e      	mov	r6, r1
   24e90:	4614      	mov	r4, r2
	if (!data->rsp) {
   24e92:	b963      	cbnz	r3, 24eae <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   24e94:	6850      	ldr	r0, [r2, #4]
   24e96:	2101      	movs	r1, #1
   24e98:	3008      	adds	r0, #8
   24e9a:	f001 fa87 	bl	263ac <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24e9e:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   24ea0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   24ea2:	781b      	ldrb	r3, [r3, #0]
   24ea4:	2b00      	cmp	r3, #0
   24ea6:	bf0c      	ite	eq
   24ea8:	2301      	moveq	r3, #1
   24eaa:	2302      	movne	r3, #2
   24eac:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   24eae:	68a3      	ldr	r3, [r4, #8]
   24eb0:	781b      	ldrb	r3, [r3, #0]
   24eb2:	2b01      	cmp	r3, #1
   24eb4:	d003      	beq.n	24ebe <find_info_cb+0x38>
   24eb6:	2b02      	cmp	r3, #2
   24eb8:	d019      	beq.n	24eee <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   24eba:	2000      	movs	r0, #0
   24ebc:	e016      	b.n	24eec <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   24ebe:	682b      	ldr	r3, [r5, #0]
   24ec0:	781b      	ldrb	r3, [r3, #0]
   24ec2:	2b00      	cmp	r3, #0
   24ec4:	d1f9      	bne.n	24eba <find_info_cb+0x34>
   24ec6:	6860      	ldr	r0, [r4, #4]
   24ec8:	2104      	movs	r1, #4
   24eca:	3008      	adds	r0, #8
   24ecc:	f001 fa6e 	bl	263ac <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24ed0:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   24ed2:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   24ed4:	885b      	ldrh	r3, [r3, #2]
   24ed6:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   24ed8:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   24eda:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   24edc:	899b      	ldrh	r3, [r3, #12]
   24ede:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   24ee2:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24ee4:	2804      	cmp	r0, #4
   24ee6:	bf94      	ite	ls
   24ee8:	2000      	movls	r0, #0
   24eea:	2001      	movhi	r0, #1
}
   24eec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   24eee:	682b      	ldr	r3, [r5, #0]
   24ef0:	781b      	ldrb	r3, [r3, #0]
   24ef2:	2b02      	cmp	r3, #2
   24ef4:	d1e1      	bne.n	24eba <find_info_cb+0x34>
   24ef6:	6860      	ldr	r0, [r4, #4]
   24ef8:	2112      	movs	r1, #18
   24efa:	3008      	adds	r0, #8
   24efc:	f001 fa56 	bl	263ac <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24f00:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   24f02:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24f04:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   24f06:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   24f0a:	3101      	adds	r1, #1
   24f0c:	f7ff f9fa 	bl	24304 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   24f10:	6863      	ldr	r3, [r4, #4]
   24f12:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   24f16:	899b      	ldrh	r3, [r3, #12]
   24f18:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   24f1a:	2812      	cmp	r0, #18
   24f1c:	e7e3      	b.n	24ee6 <find_info_cb+0x60>

00024f1e <attr_read_group_cb>:
	if (!data->rsp->len) {
   24f1e:	68d0      	ldr	r0, [r2, #12]
   24f20:	7803      	ldrb	r3, [r0, #0]
   24f22:	3104      	adds	r1, #4
   24f24:	b913      	cbnz	r3, 24f2c <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   24f26:	7001      	strb	r1, [r0, #0]
	return true;
   24f28:	2001      	movs	r0, #1
}
   24f2a:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   24f2c:	428b      	cmp	r3, r1
   24f2e:	d0fb      	beq.n	24f28 <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   24f30:	6891      	ldr	r1, [r2, #8]
   24f32:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   24f34:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   24f36:	3b04      	subs	r3, #4
   24f38:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   24f3a:	6110      	str	r0, [r2, #16]
		return false;
   24f3c:	4770      	bx	lr

00024f3e <write_cb>:
{
   24f3e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   24f40:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   24f42:	4601      	mov	r1, r0
{
   24f44:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   24f46:	222a      	movs	r2, #42	; 0x2a
   24f48:	6820      	ldr	r0, [r4, #0]
   24f4a:	f000 fdb7 	bl	25abc <bt_gatt_check_perm>
   24f4e:	4605      	mov	r5, r0
   24f50:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   24f52:	bb00      	cbnz	r0, 24f96 <write_cb+0x58>
	if (!data->req) {
   24f54:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   24f56:	68b7      	ldr	r7, [r6, #8]
   24f58:	68e2      	ldr	r2, [r4, #12]
   24f5a:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   24f5c:	2b00      	cmp	r3, #0
   24f5e:	bf14      	ite	ne
   24f60:	2300      	movne	r3, #0
   24f62:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   24f64:	9301      	str	r3, [sp, #4]
   24f66:	8a63      	ldrh	r3, [r4, #18]
   24f68:	9300      	str	r3, [sp, #0]
   24f6a:	4631      	mov	r1, r6
   24f6c:	8a23      	ldrh	r3, [r4, #16]
   24f6e:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   24f70:	1e03      	subs	r3, r0, #0
   24f72:	db05      	blt.n	24f80 <write_cb+0x42>
   24f74:	8a22      	ldrh	r2, [r4, #16]
   24f76:	4293      	cmp	r3, r2
   24f78:	d10b      	bne.n	24f92 <write_cb+0x54>
	data->err = 0U;
   24f7a:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   24f7c:	2501      	movs	r5, #1
   24f7e:	e005      	b.n	24f8c <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   24f80:	f113 0fff 	cmn.w	r3, #255	; 0xff
   24f84:	d305      	bcc.n	24f92 <write_cb+0x54>
		return -err;
   24f86:	425b      	negs	r3, r3
   24f88:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   24f8a:	7523      	strb	r3, [r4, #20]
}
   24f8c:	4628      	mov	r0, r5
   24f8e:	b003      	add	sp, #12
   24f90:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   24f92:	230e      	movs	r3, #14
   24f94:	e7f9      	b.n	24f8a <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   24f96:	2500      	movs	r5, #0
   24f98:	e7f8      	b.n	24f8c <write_cb+0x4e>

00024f9a <chan_req_send>:
{
   24f9a:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24f9c:	688e      	ldr	r6, [r1, #8]
{
   24f9e:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24fa0:	4630      	mov	r0, r6
   24fa2:	f7ff ff1a 	bl	24dda <net_buf_frags_len>
   24fa6:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   24faa:	4283      	cmp	r3, r0
{
   24fac:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   24fae:	d30a      	bcc.n	24fc6 <chan_req_send+0x2c>
	req->buf = NULL;
   24fb0:	2200      	movs	r2, #0
	chan->req = req;
   24fb2:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	err = chan_send(chan, buf, NULL);
   24fb6:	4628      	mov	r0, r5
	req->buf = NULL;
   24fb8:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   24fba:	4631      	mov	r1, r6
   24fbc:	f7e7 f8a2 	bl	c104 <chan_send>
	if (err) {
   24fc0:	b100      	cbz	r0, 24fc4 <chan_req_send+0x2a>
		req->buf = buf;
   24fc2:	60a6      	str	r6, [r4, #8]
}
   24fc4:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   24fc6:	f06f 0023 	mvn.w	r0, #35	; 0x23
   24fca:	e7fb      	b.n	24fc4 <chan_req_send+0x2a>

00024fcc <process_queue>:
{
   24fcc:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   24fce:	2200      	movs	r2, #0
{
   24fd0:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   24fd2:	2300      	movs	r3, #0
   24fd4:	4608      	mov	r0, r1
{
   24fd6:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   24fd8:	f001 f997 	bl	2630a <net_buf_get>
	if (buf) {
   24fdc:	4605      	mov	r5, r0
   24fde:	b160      	cbz	r0, 24ffa <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   24fe0:	4601      	mov	r1, r0
   24fe2:	2200      	movs	r2, #0
   24fe4:	4620      	mov	r0, r4
   24fe6:	f7e7 f88d 	bl	c104 <chan_send>
		if (err) {
   24fea:	4604      	mov	r4, r0
   24fec:	b118      	cbz	r0, 24ff6 <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   24fee:	4629      	mov	r1, r5
   24ff0:	4630      	mov	r0, r6
   24ff2:	f001 fe81 	bl	26cf8 <k_queue_prepend>
}
   24ff6:	4620      	mov	r0, r4
   24ff8:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   24ffa:	f06f 0401 	mvn.w	r4, #1
   24ffe:	e7fa      	b.n	24ff6 <process_queue+0x2a>

00025000 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25000:	b510      	push	{r4, lr}
	return list->head;
   25002:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25004:	2200      	movs	r2, #0
   25006:	b153      	cbz	r3, 2501e <sys_slist_find_and_remove.isra.0+0x1e>
   25008:	428b      	cmp	r3, r1
   2500a:	d10e      	bne.n	2502a <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   2500c:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   2500e:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   25010:	b932      	cbnz	r2, 25020 <sys_slist_find_and_remove.isra.0+0x20>
   25012:	42a1      	cmp	r1, r4
	list->head = node;
   25014:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   25016:	d100      	bne.n	2501a <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   25018:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2501a:	2300      	movs	r3, #0
   2501c:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2501e:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   25020:	42a1      	cmp	r1, r4
	parent->next = child;
   25022:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25024:	bf08      	it	eq
   25026:	6042      	streq	r2, [r0, #4]
}
   25028:	e7f7      	b.n	2501a <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2502a:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2502c:	681b      	ldr	r3, [r3, #0]
   2502e:	e7ea      	b.n	25006 <sys_slist_find_and_remove.isra.0+0x6>

00025030 <att_chan_read>:
{
   25030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25034:	4680      	mov	r8, r0
   25036:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   25038:	4610      	mov	r0, r2
{
   2503a:	4699      	mov	r9, r3
   2503c:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2503e:	f7ff fecc 	bl	24dda <net_buf_frags_len>
   25042:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   25046:	4283      	cmp	r3, r0
{
   25048:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2504a:	d97a      	bls.n	25142 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   2504c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   25050:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   25052:	4630      	mov	r0, r6
   25054:	f001 f988 	bl	26368 <net_buf_frag_last>
	size_t len, total = 0;
   25058:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   2505c:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   2505e:	4630      	mov	r0, r6
   25060:	f7ff febb 	bl	24dda <net_buf_frags_len>
   25064:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   25068:	f105 0708 	add.w	r7, r5, #8
   2506c:	1a24      	subs	r4, r4, r0
   2506e:	4638      	mov	r0, r7
   25070:	f001 f9d7 	bl	26422 <net_buf_simple_tailroom>
   25074:	4284      	cmp	r4, r0
   25076:	d211      	bcs.n	2509c <att_chan_read+0x6c>
   25078:	4630      	mov	r0, r6
   2507a:	f7ff feae 	bl	24dda <net_buf_frags_len>
   2507e:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   25082:	1a24      	subs	r4, r4, r0
		if (!len) {
   25084:	bb34      	cbnz	r4, 250d4 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   25086:	79b0      	ldrb	r0, [r6, #6]
   25088:	f7f8 f9a0 	bl	1d3cc <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   2508c:	2200      	movs	r2, #0
   2508e:	2300      	movs	r3, #0
   25090:	f001 f936 	bl	26300 <net_buf_alloc_fixed>
			if (!frag) {
   25094:	4605      	mov	r5, r0
   25096:	b930      	cbnz	r0, 250a6 <att_chan_read+0x76>
	return total;
   25098:	4657      	mov	r7, sl
   2509a:	e02c      	b.n	250f6 <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   2509c:	4638      	mov	r0, r7
   2509e:	f001 f9c0 	bl	26422 <net_buf_simple_tailroom>
   250a2:	4604      	mov	r4, r0
   250a4:	e7ee      	b.n	25084 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   250a6:	4601      	mov	r1, r0
   250a8:	4630      	mov	r0, r6
   250aa:	f001 f96e 	bl	2638a <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   250ae:	4630      	mov	r0, r6
   250b0:	f7ff fe93 	bl	24dda <net_buf_frags_len>
   250b4:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   250b8:	f105 0708 	add.w	r7, r5, #8
   250bc:	1a24      	subs	r4, r4, r0
   250be:	4638      	mov	r0, r7
   250c0:	f001 f9af 	bl	26422 <net_buf_simple_tailroom>
   250c4:	4284      	cmp	r4, r0
   250c6:	d21a      	bcs.n	250fe <att_chan_read+0xce>
   250c8:	4630      	mov	r0, r6
   250ca:	f7ff fe86 	bl	24dda <net_buf_frags_len>
   250ce:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   250d2:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   250d4:	68a9      	ldr	r1, [r5, #8]
   250d6:	89aa      	ldrh	r2, [r5, #12]
   250d8:	f8db 7004 	ldr.w	r7, [fp, #4]
   250dc:	9803      	ldr	r0, [sp, #12]
   250de:	f8cd 9000 	str.w	r9, [sp]
   250e2:	440a      	add	r2, r1
   250e4:	b2a3      	uxth	r3, r4
   250e6:	4659      	mov	r1, fp
   250e8:	47b8      	blx	r7
		if (read < 0) {
   250ea:	1e07      	subs	r7, r0, #0
   250ec:	da0c      	bge.n	25108 <att_chan_read+0xd8>
				return total;
   250ee:	f1ba 0f00 	cmp.w	sl, #0
   250f2:	bf18      	it	ne
   250f4:	4657      	movne	r7, sl
}
   250f6:	4638      	mov	r0, r7
   250f8:	b005      	add	sp, #20
   250fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   250fe:	4638      	mov	r0, r7
   25100:	f001 f98f 	bl	26422 <net_buf_simple_tailroom>
   25104:	4604      	mov	r4, r0
   25106:	e7e5      	b.n	250d4 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   25108:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2510a:	b993      	cbnz	r3, 25132 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   2510c:	4639      	mov	r1, r7
   2510e:	f105 0008 	add.w	r0, r5, #8
   25112:	f001 f94b 	bl	263ac <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25116:	4630      	mov	r0, r6
   25118:	f7ff fe5f 	bl	24dda <net_buf_frags_len>
   2511c:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   25120:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25122:	4283      	cmp	r3, r0
		total += read;
   25124:	44ba      	add	sl, r7
		offset += read;
   25126:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2512a:	d9b5      	bls.n	25098 <att_chan_read+0x68>
   2512c:	42a7      	cmp	r7, r4
   2512e:	d096      	beq.n	2505e <att_chan_read+0x2e>
   25130:	e7b2      	b.n	25098 <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25132:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25134:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   25136:	4639      	mov	r1, r7
   25138:	4628      	mov	r0, r5
   2513a:	4798      	blx	r3
   2513c:	2800      	cmp	r0, #0
   2513e:	d1e5      	bne.n	2510c <att_chan_read+0xdc>
   25140:	e7aa      	b.n	25098 <att_chan_read+0x68>
		return 0;
   25142:	2700      	movs	r7, #0
   25144:	e7d7      	b.n	250f6 <att_chan_read+0xc6>

00025146 <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25146:	30c0      	adds	r0, #192	; 0xc0
   25148:	f3bf 8f5b 	dmb	ish
   2514c:	e850 3f00 	ldrex	r3, [r0]
   25150:	f023 0302 	bic.w	r3, r3, #2
   25154:	e840 3200 	strex	r2, r3, [r0]
   25158:	2a00      	cmp	r2, #0
   2515a:	d1f7      	bne.n	2514c <chan_cfm_sent+0x6>
   2515c:	f3bf 8f5b 	dmb	ish
}
   25160:	4770      	bx	lr

00025162 <chan_rsp_sent>:
   25162:	30c0      	adds	r0, #192	; 0xc0
   25164:	f3bf 8f5b 	dmb	ish
   25168:	e850 3f00 	ldrex	r3, [r0]
   2516c:	f023 0301 	bic.w	r3, r3, #1
   25170:	e840 3200 	strex	r2, r3, [r0]
   25174:	2a00      	cmp	r2, #0
   25176:	d1f7      	bne.n	25168 <chan_rsp_sent+0x6>
   25178:	f3bf 8f5b 	dmb	ish
}
   2517c:	4770      	bx	lr

0002517e <read_cb>:
{
   2517e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   25182:	f8d2 8000 	ldr.w	r8, [r2]
{
   25186:	4606      	mov	r6, r0
	data->err = 0x00;
   25188:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   2518a:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   2518e:	7317      	strb	r7, [r2, #12]
{
   25190:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   25192:	4631      	mov	r1, r6
   25194:	2215      	movs	r2, #21
   25196:	f000 fc91 	bl	25abc <bt_gatt_check_perm>
   2519a:	4604      	mov	r4, r0
   2519c:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   2519e:	b9a0      	cbnz	r0, 251ca <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   251a0:	e9cd 0000 	strd	r0, r0, [sp]
   251a4:	88ab      	ldrh	r3, [r5, #4]
   251a6:	68aa      	ldr	r2, [r5, #8]
   251a8:	4631      	mov	r1, r6
   251aa:	4640      	mov	r0, r8
   251ac:	f7ff ff40 	bl	25030 <att_chan_read>
	if (ret < 0) {
   251b0:	1e03      	subs	r3, r0, #0
   251b2:	da0c      	bge.n	251ce <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   251b4:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   251b8:	bf26      	itte	cs
   251ba:	425b      	negcs	r3, r3
   251bc:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   251be:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   251c0:	732b      	strb	r3, [r5, #12]
}
   251c2:	4620      	mov	r0, r4
   251c4:	b002      	add	sp, #8
   251c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   251ca:	463c      	mov	r4, r7
   251cc:	e7f9      	b.n	251c2 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   251ce:	2401      	movs	r4, #1
   251d0:	e7f7      	b.n	251c2 <read_cb+0x44>

000251d2 <bt_att_sent>:
{
   251d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   251d4:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
	struct bt_att *att = chan->att;
   251d8:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   251dc:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   251de:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   251e2:	b10b      	cbz	r3, 251e8 <bt_att_sent+0x16>
		chan->sent(chan);
   251e4:	4638      	mov	r0, r7
   251e6:	4798      	blx	r3
   251e8:	f3bf 8f5b 	dmb	ish
   251ec:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
   251f0:	e853 2f00 	ldrex	r2, [r3]
   251f4:	f022 0210 	bic.w	r2, r2, #16
   251f8:	e843 2100 	strex	r1, r2, [r3]
   251fc:	2900      	cmp	r1, #0
   251fe:	d1f7      	bne.n	251f0 <bt_att_sent+0x1e>
   25200:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25204:	b30c      	cbz	r4, 2524a <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   25206:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2520a:	b98b      	cbnz	r3, 25230 <bt_att_sent+0x5e>
   2520c:	6863      	ldr	r3, [r4, #4]
   2520e:	b17b      	cbz	r3, 25230 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25210:	1d20      	adds	r0, r4, #4
   25212:	f7ff fdd8 	bl	24dc6 <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   25216:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25218:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2521a:	4638      	mov	r0, r7
   2521c:	f7ff febd 	bl	24f9a <chan_req_send>
   25220:	2800      	cmp	r0, #0
   25222:	da12      	bge.n	2524a <bt_att_sent+0x78>
	parent->next = child;
   25224:	6863      	ldr	r3, [r4, #4]
   25226:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   25228:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2522a:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   2522c:	b903      	cbnz	r3, 25230 <bt_att_sent+0x5e>
	list->tail = node;
   2522e:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   25230:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   25234:	4638      	mov	r0, r7
   25236:	f7ff fec9 	bl	24fcc <process_queue>
	if (!err) {
   2523a:	b130      	cbz	r0, 2524a <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   2523c:	f104 010c 	add.w	r1, r4, #12
   25240:	4638      	mov	r0, r7
}
   25242:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   25246:	f7ff bec1 	b.w	24fcc <process_queue>
}
   2524a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002524c <bt_att_status>:
{
   2524c:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2524e:	f3bf 8f5b 	dmb	ish
   25252:	680b      	ldr	r3, [r1, #0]
   25254:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   25258:	07db      	lsls	r3, r3, #31
{
   2525a:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   2525c:	d519      	bpl.n	25292 <bt_att_status+0x46>
	if (!chan->att) {
   2525e:	f850 0c08 	ldr.w	r0, [r0, #-8]
   25262:	b1b0      	cbz	r0, 25292 <bt_att_status+0x46>
	if (chan->req) {
   25264:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   25268:	b99b      	cbnz	r3, 25292 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   2526a:	3004      	adds	r0, #4
   2526c:	f7ff fdab 	bl	24dc6 <sys_slist_get>
	if (!node) {
   25270:	4604      	mov	r4, r0
   25272:	b170      	cbz	r0, 25292 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   25274:	4601      	mov	r1, r0
   25276:	f1a5 0008 	sub.w	r0, r5, #8
   2527a:	f7ff fe8e 	bl	24f9a <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2527e:	2800      	cmp	r0, #0
   25280:	da07      	bge.n	25292 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   25282:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   25286:	685a      	ldr	r2, [r3, #4]
   25288:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   2528a:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   2528c:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2528e:	b902      	cbnz	r2, 25292 <bt_att_status+0x46>
	list->tail = node;
   25290:	609c      	str	r4, [r3, #8]
}
   25292:	bd38      	pop	{r3, r4, r5, pc}

00025294 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25294:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25298:	4688      	mov	r8, r1
   2529a:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   2529c:	2101      	movs	r1, #1
   2529e:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   252a0:	4605      	mov	r5, r0
   252a2:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   252a4:	f7e7 f932 	bl	c50c <bt_att_chan_create_pdu>
	if (!buf) {
   252a8:	4604      	mov	r4, r0
   252aa:	b170      	cbz	r0, 252ca <send_err_rsp.part.0+0x36>
   252ac:	2104      	movs	r1, #4
   252ae:	3008      	adds	r0, #8
   252b0:	f001 f87c 	bl	263ac <net_buf_simple_add>
	rsp->request = req;
   252b4:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   252b8:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   252ba:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   252be:	4621      	mov	r1, r4
   252c0:	4628      	mov	r0, r5
}
   252c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   252c6:	f7e6 bf8b 	b.w	c1e0 <bt_att_chan_send_rsp.constprop.0>
}
   252ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000252ce <att_write_cmd>:
{
   252ce:	b530      	push	{r4, r5, lr}
   252d0:	460c      	mov	r4, r1
   252d2:	b085      	sub	sp, #20
   252d4:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   252d6:	f101 0008 	add.w	r0, r1, #8
   252da:	f001 f896 	bl	2640a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   252de:	89a2      	ldrh	r2, [r4, #12]
   252e0:	9202      	str	r2, [sp, #8]
   252e2:	68a2      	ldr	r2, [r4, #8]
   252e4:	9201      	str	r2, [sp, #4]
   252e6:	2200      	movs	r2, #0
   252e8:	4603      	mov	r3, r0
   252ea:	9200      	str	r2, [sp, #0]
   252ec:	4611      	mov	r1, r2
   252ee:	4628      	mov	r0, r5
   252f0:	f7e7 fa00 	bl	c6f4 <att_write_rsp>
}
   252f4:	b005      	add	sp, #20
   252f6:	bd30      	pop	{r4, r5, pc}

000252f8 <att_write_req>:
{
   252f8:	b530      	push	{r4, r5, lr}
   252fa:	460c      	mov	r4, r1
   252fc:	b085      	sub	sp, #20
   252fe:	4605      	mov	r5, r0
   25300:	f101 0008 	add.w	r0, r1, #8
   25304:	f001 f881 	bl	2640a <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   25308:	89a2      	ldrh	r2, [r4, #12]
   2530a:	9202      	str	r2, [sp, #8]
   2530c:	68a2      	ldr	r2, [r4, #8]
   2530e:	9201      	str	r2, [sp, #4]
   25310:	2200      	movs	r2, #0
   25312:	4603      	mov	r3, r0
   25314:	9200      	str	r2, [sp, #0]
   25316:	2112      	movs	r1, #18
   25318:	2213      	movs	r2, #19
   2531a:	4628      	mov	r0, r5
   2531c:	f7e7 f9ea 	bl	c6f4 <att_write_rsp>
}
   25320:	b005      	add	sp, #20
   25322:	bd30      	pop	{r4, r5, pc}

00025324 <att_exec_write_req>:
{
   25324:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   25328:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   2532a:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   2532c:	f893 8000 	ldrb.w	r8, [r3]
{
   25330:	4606      	mov	r6, r0
	uint8_t err = 0U;
   25332:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   25334:	6830      	ldr	r0, [r6, #0]
   25336:	2200      	movs	r2, #0
   25338:	2300      	movs	r3, #0
   2533a:	3024      	adds	r0, #36	; 0x24
   2533c:	f000 ffe5 	bl	2630a <net_buf_get>
   25340:	4605      	mov	r5, r0
   25342:	b970      	cbnz	r0, 25362 <att_exec_write_req+0x3e>
	if (err) {
   25344:	bb4c      	cbnz	r4, 2539a <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   25346:	2119      	movs	r1, #25
   25348:	4622      	mov	r2, r4
   2534a:	4638      	mov	r0, r7
   2534c:	f7e7 fa74 	bl	c838 <bt_att_create_pdu>
	if (!buf) {
   25350:	4601      	mov	r1, r0
   25352:	b320      	cbz	r0, 2539e <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25354:	4630      	mov	r0, r6
   25356:	f7e6 ff43 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
}
   2535a:	4620      	mov	r0, r4
   2535c:	b004      	add	sp, #16
   2535e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   25362:	b9b4      	cbnz	r4, 25392 <att_exec_write_req+0x6e>
   25364:	f1b8 0f01 	cmp.w	r8, #1
   25368:	d113      	bne.n	25392 <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   2536a:	89aa      	ldrh	r2, [r5, #12]
   2536c:	8aab      	ldrh	r3, [r5, #20]
   2536e:	9202      	str	r2, [sp, #8]
   25370:	68aa      	ldr	r2, [r5, #8]
   25372:	9201      	str	r2, [sp, #4]
   25374:	8aea      	ldrh	r2, [r5, #22]
   25376:	9200      	str	r2, [sp, #0]
   25378:	2118      	movs	r1, #24
   2537a:	4622      	mov	r2, r4
   2537c:	4630      	mov	r0, r6
   2537e:	f7e7 f9b9 	bl	c6f4 <att_write_rsp>
			if (err) {
   25382:	4604      	mov	r4, r0
   25384:	b128      	cbz	r0, 25392 <att_exec_write_req+0x6e>
	if (!req) {
   25386:	4603      	mov	r3, r0
   25388:	8aaa      	ldrh	r2, [r5, #20]
   2538a:	2118      	movs	r1, #24
   2538c:	4630      	mov	r0, r6
   2538e:	f7ff ff81 	bl	25294 <send_err_rsp.part.0>
		net_buf_unref(buf);
   25392:	4628      	mov	r0, r5
   25394:	f7f8 f8d8 	bl	1d548 <net_buf_unref>
   25398:	e7cc      	b.n	25334 <att_exec_write_req+0x10>
		return 0;
   2539a:	4604      	mov	r4, r0
   2539c:	e7dd      	b.n	2535a <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   2539e:	240e      	movs	r4, #14
   253a0:	e7db      	b.n	2535a <att_exec_write_req+0x36>

000253a2 <att_read_blob_req>:
{
   253a2:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   253a4:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   253a6:	8813      	ldrh	r3, [r2, #0]
   253a8:	8852      	ldrh	r2, [r2, #2]
   253aa:	9200      	str	r2, [sp, #0]
   253ac:	210c      	movs	r1, #12
   253ae:	220d      	movs	r2, #13
   253b0:	f7e7 fbac 	bl	cb0c <att_read_rsp>
}
   253b4:	b003      	add	sp, #12
   253b6:	f85d fb04 	ldr.w	pc, [sp], #4

000253ba <att_read_req>:
{
   253ba:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   253bc:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   253be:	2200      	movs	r2, #0
   253c0:	881b      	ldrh	r3, [r3, #0]
   253c2:	9200      	str	r2, [sp, #0]
   253c4:	210a      	movs	r1, #10
   253c6:	220b      	movs	r2, #11
   253c8:	f7e7 fba0 	bl	cb0c <att_read_rsp>
}
   253cc:	b003      	add	sp, #12
   253ce:	f85d fb04 	ldr.w	pc, [sp], #4

000253d2 <att_mtu_req>:
{
   253d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   253d4:	6803      	ldr	r3, [r0, #0]
{
   253d6:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   253d8:	6818      	ldr	r0, [r3, #0]
   253da:	f3bf 8f5b 	dmb	ish
   253de:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   253e2:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   253e6:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   253ea:	071b      	lsls	r3, r3, #28
   253ec:	d41d      	bmi.n	2542a <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   253ee:	688b      	ldr	r3, [r1, #8]
   253f0:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   253f2:	2e16      	cmp	r6, #22
   253f4:	d91b      	bls.n	2542e <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   253f6:	2202      	movs	r2, #2
   253f8:	2103      	movs	r1, #3
   253fa:	f7e7 fa1d 	bl	c838 <bt_att_create_pdu>
	if (!pdu) {
   253fe:	4607      	mov	r7, r0
   25400:	b1b8      	cbz	r0, 25432 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   25402:	2102      	movs	r1, #2
   25404:	3008      	adds	r0, #8
   25406:	f000 ffd1 	bl	263ac <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2540a:	2341      	movs	r3, #65	; 0x41
   2540c:	7003      	strb	r3, [r0, #0]
   2540e:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   25410:	4639      	mov	r1, r7
   25412:	4628      	mov	r0, r5
   25414:	f7e6 fee4 	bl	c1e0 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   25418:	2e41      	cmp	r6, #65	; 0x41
   2541a:	bf28      	it	cs
   2541c:	2641      	movcs	r6, #65	; 0x41
   2541e:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25422:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   25426:	4620      	mov	r0, r4
}
   25428:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2542a:	2006      	movs	r0, #6
   2542c:	e7fc      	b.n	25428 <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   2542e:	2004      	movs	r0, #4
   25430:	e7fa      	b.n	25428 <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   25432:	200e      	movs	r0, #14
   25434:	e7f8      	b.n	25428 <att_mtu_req+0x56>

00025436 <bt_att_init>:
	bt_gatt_init();
   25436:	f7e8 bb13 	b.w	da60 <bt_gatt_init>

0002543a <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2543a:	898a      	ldrh	r2, [r1, #12]
   2543c:	6889      	ldr	r1, [r1, #8]
   2543e:	2300      	movs	r3, #0
   25440:	f7e7 bcd6 	b.w	cdf0 <att_handle_rsp>

00025444 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   25444:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   25448:	b570      	push	{r4, r5, r6, lr}
   2544a:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   2544c:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   25450:	2b00      	cmp	r3, #0
   25452:	d037      	beq.n	254c4 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   25454:	b171      	cbz	r1, 25474 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   25456:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   2545a:	2b00      	cmp	r3, #0
   2545c:	d032      	beq.n	254c4 <bt_att_encrypt_change+0x80>
   2545e:	7c1b      	ldrb	r3, [r3, #16]
   25460:	07da      	lsls	r2, r3, #31
   25462:	d52f      	bpl.n	254c4 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   25464:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   25466:	2200      	movs	r2, #0
   25468:	4630      	mov	r0, r6
   2546a:	4611      	mov	r1, r2
}
   2546c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   25470:	f7e7 bcbe 	b.w	cdf0 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   25474:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   25476:	4628      	mov	r0, r5
   25478:	f7e8 fef4 	bl	e264 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   2547c:	7a6b      	ldrb	r3, [r5, #9]
   2547e:	2b01      	cmp	r3, #1
   25480:	d020      	beq.n	254c4 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   25482:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
   25486:	b1ec      	cbz	r4, 254c4 <bt_att_encrypt_change+0x80>
   25488:	7c23      	ldrb	r3, [r4, #16]
   2548a:	07db      	lsls	r3, r3, #31
   2548c:	d51a      	bpl.n	254c4 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   2548e:	68e3      	ldr	r3, [r4, #12]
   25490:	2b00      	cmp	r3, #0
   25492:	d0e7      	beq.n	25464 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   25494:	6962      	ldr	r2, [r4, #20]
   25496:	7c61      	ldrb	r1, [r4, #17]
   25498:	4630      	mov	r0, r6
   2549a:	f7e7 f837 	bl	c50c <bt_att_chan_create_pdu>
	if (!buf) {
   2549e:	4605      	mov	r5, r0
   254a0:	b140      	cbz	r0, 254b4 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   254a2:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   254a6:	68e3      	ldr	r3, [r4, #12]
   254a8:	4798      	blx	r3
   254aa:	4602      	mov	r2, r0
   254ac:	b120      	cbz	r0, 254b8 <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   254ae:	4628      	mov	r0, r5
   254b0:	f7f8 f84a 	bl	1d548 <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   254b4:	230e      	movs	r3, #14
   254b6:	e7d6      	b.n	25466 <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   254b8:	4629      	mov	r1, r5
   254ba:	4630      	mov	r0, r6
   254bc:	f7e6 fe22 	bl	c104 <chan_send>
   254c0:	2800      	cmp	r0, #0
   254c2:	d1f4      	bne.n	254ae <bt_att_encrypt_change+0x6a>
}
   254c4:	bd70      	pop	{r4, r5, r6, pc}

000254c6 <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   254c6:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   254ca:	4605      	mov	r5, r0
   254cc:	460e      	mov	r6, r1
   254ce:	4614      	mov	r4, r2
   254d0:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   254d2:	f7e6 fd0b 	bl	beec <att_get>
	if (!att) {
   254d6:	4607      	mov	r7, r0
   254d8:	b938      	cbnz	r0, 254ea <bt_att_send+0x24>
		net_buf_unref(buf);
   254da:	4630      	mov	r0, r6
   254dc:	f7f8 f834 	bl	1d548 <net_buf_unref>
		return -ENOTCONN;
   254e0:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   254e4:	b002      	add	sp, #8
   254e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   254ea:	b144      	cbz	r4, 254fe <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   254ec:	f8cd 8000 	str.w	r8, [sp]
   254f0:	4623      	mov	r3, r4
   254f2:	4632      	mov	r2, r6
   254f4:	2104      	movs	r1, #4
   254f6:	4628      	mov	r0, r5
   254f8:	f7ff fc2b 	bl	24d52 <bt_l2cap_send_cb>
   254fc:	e7f2      	b.n	254e4 <bt_att_send+0x1e>
	return list->head;
   254fe:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25500:	b184      	cbz	r4, 25524 <bt_att_send+0x5e>
   25502:	f5b4 758a 	subs.w	r5, r4, #276	; 0x114
   25506:	d00f      	beq.n	25528 <bt_att_send+0x62>
	return node->next;
   25508:	6824      	ldr	r4, [r4, #0]
   2550a:	b10c      	cbz	r4, 25510 <bt_att_send+0x4a>
   2550c:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
   25510:	2000      	movs	r0, #0
   25512:	b95d      	cbnz	r5, 2552c <bt_att_send+0x66>
	if (ret < 0) {
   25514:	b188      	cbz	r0, 2553a <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   25516:	f107 000c 	add.w	r0, r7, #12
   2551a:	4631      	mov	r1, r6
   2551c:	f000 ff13 	bl	26346 <net_buf_put>
	return 0;
   25520:	4628      	mov	r0, r5
   25522:	e7df      	b.n	254e4 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25524:	4625      	mov	r5, r4
   25526:	e7f3      	b.n	25510 <bt_att_send+0x4a>
   25528:	462c      	mov	r4, r5
   2552a:	e7f1      	b.n	25510 <bt_att_send+0x4a>
	return chan_send(chan, buf, cb);
   2552c:	2200      	movs	r2, #0
   2552e:	4631      	mov	r1, r6
   25530:	4628      	mov	r0, r5
   25532:	f7e6 fde7 	bl	c104 <chan_send>
		if (ret >= 0) {
   25536:	2800      	cmp	r0, #0
   25538:	db01      	blt.n	2553e <bt_att_send+0x78>
	return 0;
   2553a:	2000      	movs	r0, #0
   2553c:	e7d2      	b.n	254e4 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2553e:	b154      	cbz	r4, 25556 <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   25540:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   25544:	d004      	beq.n	25550 <bt_att_send+0x8a>
	return node->next;
   25546:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   2554a:	b10b      	cbz	r3, 25550 <bt_att_send+0x8a>
   2554c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   25550:	4625      	mov	r5, r4
   25552:	461c      	mov	r4, r3
   25554:	e7dd      	b.n	25512 <bt_att_send+0x4c>
   25556:	4623      	mov	r3, r4
   25558:	e7fa      	b.n	25550 <bt_att_send+0x8a>

0002555a <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   2555a:	b570      	push	{r4, r5, r6, lr}
   2555c:	460e      	mov	r6, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   2555e:	f7e6 fcc5 	bl	beec <att_get>
	if (!att) {
   25562:	4605      	mov	r5, r0
   25564:	b340      	cbz	r0, 255b8 <bt_att_req_send+0x5e>
	return list->head;
   25566:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return -ENOTCONN;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25568:	b153      	cbz	r3, 25580 <bt_att_req_send+0x26>
   2556a:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
   2556e:	d007      	beq.n	25580 <bt_att_req_send+0x26>
	return node->next;
   25570:	681c      	ldr	r4, [r3, #0]
   25572:	b10c      	cbz	r4, 25578 <bt_att_req_send+0x1e>
   25574:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		/* If there is nothing pending use the channel */
		if (!chan->req) {
   25578:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   2557c:	b143      	cbz	r3, 25590 <bt_att_req_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2557e:	b96c      	cbnz	r4, 2559c <bt_att_req_send+0x42>
	return list->tail;
   25580:	68ab      	ldr	r3, [r5, #8]
	parent->next = child;
   25582:	2000      	movs	r0, #0
   25584:	6030      	str	r0, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   25586:	b9a3      	cbnz	r3, 255b2 <bt_att_req_send+0x58>
	list->head = node;
   25588:	e9c5 6601 	strd	r6, r6, [r5, #4]
	/* Queue the request to be send later */
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
   2558c:	4618      	mov	r0, r3
}
   2558e:	e004      	b.n	2559a <bt_att_req_send+0x40>
	return chan_req_send(chan, req);
   25590:	4631      	mov	r1, r6
   25592:	f7ff fd02 	bl	24f9a <chan_req_send>
			if (ret >= 0) {
   25596:	2800      	cmp	r0, #0
   25598:	dbf1      	blt.n	2557e <bt_att_req_send+0x24>
}
   2559a:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   2559c:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   255a0:	d004      	beq.n	255ac <bt_att_req_send+0x52>
	return node->next;
   255a2:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   255a6:	b10b      	cbz	r3, 255ac <bt_att_req_send+0x52>
   255a8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
{
   255ac:	4620      	mov	r0, r4
   255ae:	461c      	mov	r4, r3
   255b0:	e7e2      	b.n	25578 <bt_att_req_send+0x1e>
	parent->next = child;
   255b2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   255b4:	60ae      	str	r6, [r5, #8]
}
   255b6:	e7f0      	b.n	2559a <bt_att_req_send+0x40>
		return -ENOTCONN;
   255b8:	f06f 0038 	mvn.w	r0, #56	; 0x38
   255bc:	e7ed      	b.n	2559a <bt_att_req_send+0x40>

000255be <gatt_ccc_changed>:
{
   255be:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   255c0:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   255c2:	895a      	ldrh	r2, [r3, #10]
   255c4:	428a      	cmp	r2, r1
   255c6:	d003      	beq.n	255d0 <gatt_ccc_changed+0x12>
		ccc->value = value;
   255c8:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   255ca:	68db      	ldr	r3, [r3, #12]
   255cc:	b103      	cbz	r3, 255d0 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   255ce:	4718      	bx	r3
}
   255d0:	4770      	bx	lr

000255d2 <gatt_indicate_rsp>:
{
   255d2:	b510      	push	{r4, lr}
   255d4:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   255d6:	68a3      	ldr	r3, [r4, #8]
{
   255d8:	460a      	mov	r2, r1
	if (params->func) {
   255da:	b10b      	cbz	r3, 255e0 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   255dc:	4621      	mov	r1, r4
   255de:	4798      	blx	r3
	params->_ref--;
   255e0:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   255e2:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   255e4:	3b01      	subs	r3, #1
   255e6:	b2db      	uxtb	r3, r3
   255e8:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   255ea:	b122      	cbz	r2, 255f6 <gatt_indicate_rsp+0x24>
   255ec:	b91b      	cbnz	r3, 255f6 <gatt_indicate_rsp+0x24>
		params->destroy(params);
   255ee:	4620      	mov	r0, r4
}
   255f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   255f4:	4710      	bx	r2
}
   255f6:	bd10      	pop	{r4, pc}

000255f8 <match_uuid>:
	data->attr = attr;
   255f8:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   255fa:	8091      	strh	r1, [r2, #4]
}
   255fc:	2000      	movs	r0, #0
   255fe:	4770      	bx	lr

00025600 <ccc_set_cb>:
}
   25600:	2000      	movs	r0, #0
   25602:	4770      	bx	lr

00025604 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25604:	2207      	movs	r2, #7
   25606:	f7fe be7d 	b.w	24304 <memcpy>

0002560a <clear_ccc_cfg>:
{
   2560a:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   2560c:	2500      	movs	r5, #0
{
   2560e:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25610:	4669      	mov	r1, sp
   25612:	3001      	adds	r0, #1
   25614:	9500      	str	r5, [sp, #0]
   25616:	f8cd 5003 	str.w	r5, [sp, #3]
   2561a:	f7ff fff3 	bl	25604 <bt_addr_le_copy>
	cfg->id = 0U;
   2561e:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   25620:	8125      	strh	r5, [r4, #8]
}
   25622:	b003      	add	sp, #12
   25624:	bd30      	pop	{r4, r5, pc}

00025626 <write_name>:
{
   25626:	b570      	push	{r4, r5, r6, lr}
   25628:	b092      	sub	sp, #72	; 0x48
   2562a:	4615      	mov	r5, r2
   2562c:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25630:	2100      	movs	r1, #0
   25632:	223d      	movs	r2, #61	; 0x3d
   25634:	a802      	add	r0, sp, #8
{
   25636:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25638:	9101      	str	r1, [sp, #4]
   2563a:	f7fe fe8e 	bl	2435a <memset>
	if (offset) {
   2563e:	b966      	cbnz	r6, 2565a <write_name+0x34>
	if (len >= sizeof(value)) {
   25640:	2c40      	cmp	r4, #64	; 0x40
   25642:	d80d      	bhi.n	25660 <write_name+0x3a>
	memcpy(value, buf, len);
   25644:	4622      	mov	r2, r4
   25646:	4629      	mov	r1, r5
   25648:	a801      	add	r0, sp, #4
   2564a:	f7fe fe5b 	bl	24304 <memcpy>
	bt_set_name(value);
   2564e:	a801      	add	r0, sp, #4
   25650:	f7e4 ffac 	bl	a5ac <bt_set_name>
	return len;
   25654:	4620      	mov	r0, r4
}
   25656:	b012      	add	sp, #72	; 0x48
   25658:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2565a:	f06f 0006 	mvn.w	r0, #6
   2565e:	e7fa      	b.n	25656 <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   25660:	f06f 000c 	mvn.w	r0, #12
   25664:	e7f7      	b.n	25656 <write_name+0x30>

00025666 <gen_hash_m>:
{
   25666:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25668:	6807      	ldr	r7, [r0, #0]
   2566a:	783d      	ldrb	r5, [r7, #0]
{
   2566c:	b089      	sub	sp, #36	; 0x24
   2566e:	4606      	mov	r6, r0
   25670:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   25672:	b10d      	cbz	r5, 25678 <gen_hash_m+0x12>
	switch (u16->val) {
   25674:	2501      	movs	r5, #1
   25676:	e014      	b.n	256a2 <gen_hash_m+0x3c>
   25678:	887b      	ldrh	r3, [r7, #2]
   2567a:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   2567e:	d004      	beq.n	2568a <gen_hash_m+0x24>
   25680:	d812      	bhi.n	256a8 <gen_hash_m+0x42>
   25682:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   25686:	2b03      	cmp	r3, #3
   25688:	d8f4      	bhi.n	25674 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   2568a:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2568e:	2202      	movs	r2, #2
   25690:	f10d 010e 	add.w	r1, sp, #14
   25694:	4620      	mov	r0, r4
   25696:	f7fe fcb8 	bl	2400a <tc_cmac_update>
   2569a:	b9e0      	cbnz	r0, 256d6 <gen_hash_m+0x70>
			state->err = -EINVAL;
   2569c:	f06f 0315 	mvn.w	r3, #21
   256a0:	65a3      	str	r3, [r4, #88]	; 0x58
}
   256a2:	4628      	mov	r0, r5
   256a4:	b009      	add	sp, #36	; 0x24
   256a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   256a8:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   256ac:	33ff      	adds	r3, #255	; 0xff
   256ae:	b29b      	uxth	r3, r3
   256b0:	2b04      	cmp	r3, #4
   256b2:	d8df      	bhi.n	25674 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   256b4:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   256b8:	2202      	movs	r2, #2
   256ba:	f10d 010e 	add.w	r1, sp, #14
   256be:	4620      	mov	r0, r4
   256c0:	f7fe fca3 	bl	2400a <tc_cmac_update>
   256c4:	2800      	cmp	r0, #0
   256c6:	d0e9      	beq.n	2569c <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   256c8:	887b      	ldrh	r3, [r7, #2]
   256ca:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   256ce:	2202      	movs	r2, #2
   256d0:	f10d 010e 	add.w	r1, sp, #14
   256d4:	e017      	b.n	25706 <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   256d6:	887b      	ldrh	r3, [r7, #2]
   256d8:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   256dc:	2202      	movs	r2, #2
   256de:	f10d 010e 	add.w	r1, sp, #14
   256e2:	4620      	mov	r0, r4
   256e4:	f7fe fc91 	bl	2400a <tc_cmac_update>
   256e8:	2800      	cmp	r0, #0
   256ea:	d0d7      	beq.n	2569c <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   256ec:	2000      	movs	r0, #0
   256ee:	2310      	movs	r3, #16
   256f0:	eb0d 0203 	add.w	r2, sp, r3
   256f4:	6877      	ldr	r7, [r6, #4]
   256f6:	9000      	str	r0, [sp, #0]
   256f8:	4631      	mov	r1, r6
   256fa:	47b8      	blx	r7
		if (len < 0) {
   256fc:	1e02      	subs	r2, r0, #0
   256fe:	da01      	bge.n	25704 <gen_hash_m+0x9e>
			state->err = len;
   25700:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25702:	e7ce      	b.n	256a2 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   25704:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25706:	4620      	mov	r0, r4
   25708:	f7fe fc7f 	bl	2400a <tc_cmac_update>
   2570c:	2800      	cmp	r0, #0
   2570e:	d1b1      	bne.n	25674 <gen_hash_m+0xe>
   25710:	e7c4      	b.n	2569c <gen_hash_m+0x36>

00025712 <atomic_or>:
{
   25712:	4603      	mov	r3, r0
}
   25714:	f3bf 8f5b 	dmb	ish
   25718:	e853 0f00 	ldrex	r0, [r3]
   2571c:	ea40 0201 	orr.w	r2, r0, r1
   25720:	e843 2c00 	strex	ip, r2, [r3]
   25724:	f1bc 0f00 	cmp.w	ip, #0
   25728:	d1f6      	bne.n	25718 <atomic_or+0x6>
   2572a:	f3bf 8f5b 	dmb	ish
   2572e:	4770      	bx	lr

00025730 <clear_cf_cfg>:
{
   25730:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25732:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25734:	2500      	movs	r5, #0
   25736:	4669      	mov	r1, sp
   25738:	3001      	adds	r0, #1
   2573a:	9500      	str	r5, [sp, #0]
   2573c:	f8cd 5003 	str.w	r5, [sp, #3]
   25740:	f7ff ff60 	bl	25604 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   25744:	f104 0008 	add.w	r0, r4, #8
   25748:	2201      	movs	r2, #1
   2574a:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   2574c:	340c      	adds	r4, #12
   2574e:	f7fe fe04 	bl	2435a <memset>
   25752:	f3bf 8f5b 	dmb	ish
   25756:	e854 3f00 	ldrex	r3, [r4]
   2575a:	e844 5200 	strex	r2, r5, [r4]
   2575e:	2a00      	cmp	r2, #0
   25760:	d1f9      	bne.n	25756 <clear_cf_cfg+0x26>
   25762:	f3bf 8f5b 	dmb	ish
}
   25766:	b003      	add	sp, #12
   25768:	bd30      	pop	{r4, r5, pc}

0002576a <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2576a:	f3bf 8f5b 	dmb	ish
   2576e:	e850 3f00 	ldrex	r3, [r0]
   25772:	400b      	ands	r3, r1
   25774:	e840 3200 	strex	r2, r3, [r0]
   25778:	2a00      	cmp	r2, #0
   2577a:	d1f8      	bne.n	2576e <atomic_and.isra.0+0x4>
   2577c:	f3bf 8f5b 	dmb	ish
}
   25780:	4770      	bx	lr

00025782 <read_ppcp>:
{
   25782:	b513      	push	{r0, r1, r4, lr}
   25784:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   25786:	2218      	movs	r2, #24
{
   25788:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   2578c:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   25790:	2228      	movs	r2, #40	; 0x28
   25792:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   25796:	2200      	movs	r2, #0
   25798:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   2579c:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   2579e:	f04f 022a 	mov.w	r2, #42	; 0x2a
   257a2:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   257a6:	d80b      	bhi.n	257c0 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   257a8:	f1c1 0408 	rsb	r4, r1, #8
   257ac:	429c      	cmp	r4, r3
   257ae:	bfa8      	it	ge
   257b0:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   257b2:	4622      	mov	r2, r4
   257b4:	4469      	add	r1, sp
   257b6:	f7fe fda5 	bl	24304 <memcpy>
}
   257ba:	4620      	mov	r0, r4
   257bc:	b002      	add	sp, #8
   257be:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   257c0:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   257c4:	e7f9      	b.n	257ba <read_ppcp+0x38>

000257c6 <read_appearance>:
{
   257c6:	b513      	push	{r0, r1, r4, lr}
   257c8:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   257cc:	4610      	mov	r0, r2
	if (offset > value_len) {
   257ce:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   257d0:	f240 3241 	movw	r2, #833	; 0x341
   257d4:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   257d8:	d80d      	bhi.n	257f6 <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   257da:	f1c1 0402 	rsb	r4, r1, #2
   257de:	429c      	cmp	r4, r3
   257e0:	bfa8      	it	ge
   257e2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   257e4:	f10d 0306 	add.w	r3, sp, #6
   257e8:	4622      	mov	r2, r4
   257ea:	4419      	add	r1, r3
   257ec:	f7fe fd8a 	bl	24304 <memcpy>
}
   257f0:	4620      	mov	r0, r4
   257f2:	b002      	add	sp, #8
   257f4:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   257f6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   257fa:	e7f9      	b.n	257f0 <read_appearance+0x2a>

000257fc <read_name>:
{
   257fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25800:	4698      	mov	r8, r3
   25802:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   25806:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   25808:	f7e4 ff22 	bl	a650 <bt_get_name>
   2580c:	4607      	mov	r7, r0
				 strlen(name));
   2580e:	f7fe fd3b 	bl	24288 <strlen>
	if (offset > value_len) {
   25812:	b283      	uxth	r3, r0
   25814:	42b3      	cmp	r3, r6
   25816:	d30c      	bcc.n	25832 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   25818:	1b9c      	subs	r4, r3, r6
   2581a:	4544      	cmp	r4, r8
   2581c:	bfa8      	it	ge
   2581e:	4644      	movge	r4, r8
   25820:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25822:	4622      	mov	r2, r4
   25824:	19b9      	adds	r1, r7, r6
   25826:	4628      	mov	r0, r5
   25828:	f7fe fd6c 	bl	24304 <memcpy>
}
   2582c:	4620      	mov	r0, r4
   2582e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25832:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   25836:	e7f9      	b.n	2582c <read_name+0x30>

00025838 <cf_read>:
{
   25838:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2583a:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   2583c:	2300      	movs	r3, #0
{
   2583e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   25842:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25846:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   25848:	f7e7 fbfe 	bl	d048 <find_cf_cfg>
	if (cfg) {
   2584c:	b128      	cbz	r0, 2585a <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   2584e:	f100 0108 	add.w	r1, r0, #8
   25852:	2201      	movs	r2, #1
   25854:	a801      	add	r0, sp, #4
   25856:	f7fe fd55 	bl	24304 <memcpy>
	if (offset > value_len) {
   2585a:	2e01      	cmp	r6, #1
   2585c:	d80d      	bhi.n	2587a <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   2585e:	f1c6 0401 	rsb	r4, r6, #1
   25862:	42bc      	cmp	r4, r7
   25864:	bfa8      	it	ge
   25866:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25868:	ab01      	add	r3, sp, #4
   2586a:	4622      	mov	r2, r4
   2586c:	1999      	adds	r1, r3, r6
   2586e:	4628      	mov	r0, r5
   25870:	f7fe fd48 	bl	24304 <memcpy>
}
   25874:	4620      	mov	r0, r4
   25876:	b003      	add	sp, #12
   25878:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2587a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   2587e:	e7f9      	b.n	25874 <cf_read+0x3c>

00025880 <bt_gatt_attr_read_service>:
{
   25880:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   25882:	68c9      	ldr	r1, [r1, #12]
{
   25884:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   25888:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   2588a:	780b      	ldrb	r3, [r1, #0]
{
   2588c:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   2588e:	b993      	cbnz	r3, 258b6 <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   25890:	884b      	ldrh	r3, [r1, #2]
   25892:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   25896:	2d02      	cmp	r5, #2
   25898:	d819      	bhi.n	258ce <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   2589a:	f1c5 0202 	rsb	r2, r5, #2
   2589e:	4294      	cmp	r4, r2
   258a0:	bfa8      	it	ge
   258a2:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   258a4:	f10d 0306 	add.w	r3, sp, #6
   258a8:	4622      	mov	r2, r4
   258aa:	1959      	adds	r1, r3, r5
   258ac:	f7fe fd2a 	bl	24304 <memcpy>
}
   258b0:	4620      	mov	r0, r4
   258b2:	b003      	add	sp, #12
   258b4:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   258b6:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   258b8:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   258bc:	d807      	bhi.n	258ce <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   258be:	f1c5 0210 	rsb	r2, r5, #16
   258c2:	4294      	cmp	r4, r2
   258c4:	bfa8      	it	ge
   258c6:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   258c8:	4622      	mov	r2, r4
   258ca:	4429      	add	r1, r5
   258cc:	e7ee      	b.n	258ac <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   258ce:	f06f 0406 	mvn.w	r4, #6
   258d2:	e7ed      	b.n	258b0 <bt_gatt_attr_read_service+0x30>

000258d4 <ccc_find_cfg>:
{
   258d4:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   258d6:	7803      	ldrb	r3, [r0, #0]
   258d8:	4293      	cmp	r3, r2
{
   258da:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   258dc:	d001      	beq.n	258e2 <ccc_find_cfg+0xe>
	return NULL;
   258de:	2000      	movs	r0, #0
}
   258e0:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   258e2:	2207      	movs	r2, #7
   258e4:	3001      	adds	r0, #1
   258e6:	f7fe fcfc 	bl	242e2 <memcmp>
		if (id == ccc->cfg[i].id &&
   258ea:	2800      	cmp	r0, #0
   258ec:	d1f7      	bne.n	258de <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   258ee:	4620      	mov	r0, r4
   258f0:	e7f6      	b.n	258e0 <ccc_find_cfg+0xc>

000258f2 <find_ccc_cfg>:
{
   258f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
   258f4:	460c      	mov	r4, r1
						    &cfg->peer)) {
   258f6:	1c4d      	adds	r5, r1, #1
		if (conn) {
   258f8:	b148      	cbz	r0, 2590e <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   258fa:	7809      	ldrb	r1, [r1, #0]
   258fc:	462a      	mov	r2, r5
   258fe:	f7ff f8fe 	bl	24afe <bt_conn_is_peer_addr_le>
	return NULL;
   25902:	2800      	cmp	r0, #0
   25904:	bf08      	it	eq
   25906:	2400      	moveq	r4, #0
}
   25908:	4620      	mov	r0, r4
   2590a:	b003      	add	sp, #12
   2590c:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   2590e:	9000      	str	r0, [sp, #0]
   25910:	2207      	movs	r2, #7
   25912:	f8cd 0003 	str.w	r0, [sp, #3]
   25916:	4669      	mov	r1, sp
   25918:	4628      	mov	r0, r5
   2591a:	f7fe fce2 	bl	242e2 <memcmp>
	return NULL;
   2591e:	2800      	cmp	r0, #0
   25920:	bf18      	it	ne
   25922:	2400      	movne	r4, #0
   25924:	e7f0      	b.n	25908 <find_ccc_cfg+0x16>

00025926 <bt_gatt_attr_read_ccc>:
{
   25926:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   25928:	68c9      	ldr	r1, [r1, #12]
{
   2592a:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   2592e:	4615      	mov	r5, r2
   25930:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   25932:	f7ff ffde 	bl	258f2 <find_ccc_cfg>
	if (cfg) {
   25936:	b100      	cbz	r0, 2593a <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   25938:	8900      	ldrh	r0, [r0, #8]
   2593a:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   2593e:	2e02      	cmp	r6, #2
   25940:	d80e      	bhi.n	25960 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   25942:	f1c6 0402 	rsb	r4, r6, #2
   25946:	42bc      	cmp	r4, r7
   25948:	bfa8      	it	ge
   2594a:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   2594c:	f10d 0306 	add.w	r3, sp, #6
   25950:	4622      	mov	r2, r4
   25952:	1999      	adds	r1, r3, r6
   25954:	4628      	mov	r0, r5
   25956:	f7fe fcd5 	bl	24304 <memcpy>
}
   2595a:	4620      	mov	r0, r4
   2595c:	b003      	add	sp, #12
   2595e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25960:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25964:	e7f9      	b.n	2595a <bt_gatt_attr_read_ccc+0x34>

00025966 <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25966:	2a02      	cmp	r2, #2
{
   25968:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   2596a:	d108      	bne.n	2597e <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   2596c:	2300      	movs	r3, #0
   2596e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25972:	461a      	mov	r2, r3
   25974:	7a00      	ldrb	r0, [r0, #8]
   25976:	f7e7 fe47 	bl	d608 <sc_save>
}
   2597a:	2002      	movs	r0, #2
   2597c:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   2597e:	f7e7 ff31 	bl	d7e4 <sc_clear>
   25982:	e7fa      	b.n	2597a <sc_ccc_cfg_write+0x14>

00025984 <sc_restore_rsp>:
{
   25984:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   25986:	f7e7 fb5f 	bl	d048 <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   2598a:	b140      	cbz	r0, 2599e <sc_restore_rsp+0x1a>
   2598c:	7a03      	ldrb	r3, [r0, #8]
   2598e:	07db      	lsls	r3, r3, #31
   25990:	d505      	bpl.n	2599e <sc_restore_rsp+0x1a>
}
   25992:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25996:	2101      	movs	r1, #1
   25998:	300c      	adds	r0, #12
   2599a:	f7ff beba 	b.w	25712 <atomic_or>
   2599e:	bd08      	pop	{r3, pc}

000259a0 <bt_gatt_attr_read>:
{
   259a0:	b538      	push	{r3, r4, r5, lr}
   259a2:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   259a6:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   259aa:	42a9      	cmp	r1, r5
{
   259ac:	4610      	mov	r0, r2
	if (offset > value_len) {
   259ae:	d80b      	bhi.n	259c8 <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   259b0:	1a6d      	subs	r5, r5, r1
   259b2:	429d      	cmp	r5, r3
   259b4:	bfa8      	it	ge
   259b6:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   259b8:	9b05      	ldr	r3, [sp, #20]
   259ba:	b2ad      	uxth	r5, r5
   259bc:	462a      	mov	r2, r5
   259be:	4419      	add	r1, r3
   259c0:	f7fe fca0 	bl	24304 <memcpy>
}
   259c4:	4628      	mov	r0, r5
   259c6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   259c8:	f06f 0506 	mvn.w	r5, #6
   259cc:	e7fa      	b.n	259c4 <bt_gatt_attr_read+0x24>

000259ce <bt_gatt_attr_value_handle>:
{
   259ce:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   259d0:	4604      	mov	r4, r0
   259d2:	b910      	cbnz	r0, 259da <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   259d4:	2000      	movs	r0, #0
}
   259d6:	b002      	add	sp, #8
   259d8:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   259da:	2300      	movs	r3, #0
   259dc:	f88d 3004 	strb.w	r3, [sp, #4]
   259e0:	6800      	ldr	r0, [r0, #0]
   259e2:	f642 0303 	movw	r3, #10243	; 0x2803
   259e6:	a901      	add	r1, sp, #4
   259e8:	f8ad 3006 	strh.w	r3, [sp, #6]
   259ec:	f7fe fdaa 	bl	24544 <bt_uuid_cmp>
   259f0:	2800      	cmp	r0, #0
   259f2:	d1ef      	bne.n	259d4 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   259f4:	68e3      	ldr	r3, [r4, #12]
   259f6:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   259f8:	2800      	cmp	r0, #0
   259fa:	d1ec      	bne.n	259d6 <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   259fc:	4620      	mov	r0, r4
   259fe:	f7e8 f891 	bl	db24 <bt_gatt_attr_get_handle>
   25a02:	3001      	adds	r0, #1
   25a04:	b280      	uxth	r0, r0
	return handle;
   25a06:	e7e6      	b.n	259d6 <bt_gatt_attr_value_handle+0x8>

00025a08 <bt_gatt_attr_read_chrc>:
{
   25a08:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25a0a:	68cf      	ldr	r7, [r1, #12]
{
   25a0c:	b087      	sub	sp, #28
   25a0e:	4608      	mov	r0, r1
   25a10:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   25a12:	79bb      	ldrb	r3, [r7, #6]
   25a14:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25a18:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   25a1c:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25a1e:	f7ff ffd6 	bl	259ce <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25a22:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25a24:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25a28:	780b      	ldrb	r3, [r1, #0]
   25a2a:	b99b      	cbnz	r3, 25a54 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25a2c:	884b      	ldrh	r3, [r1, #2]
   25a2e:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   25a32:	2105      	movs	r1, #5
	if (offset > value_len) {
   25a34:	42b1      	cmp	r1, r6
   25a36:	d315      	bcc.n	25a64 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   25a38:	1b89      	subs	r1, r1, r6
   25a3a:	42a1      	cmp	r1, r4
   25a3c:	bfa8      	it	ge
   25a3e:	4621      	movge	r1, r4
   25a40:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   25a42:	ab01      	add	r3, sp, #4
   25a44:	4622      	mov	r2, r4
   25a46:	1999      	adds	r1, r3, r6
   25a48:	4628      	mov	r0, r5
   25a4a:	f7fe fc5b 	bl	24304 <memcpy>
}
   25a4e:	4620      	mov	r0, r4
   25a50:	b007      	add	sp, #28
   25a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25a54:	3101      	adds	r1, #1
   25a56:	2210      	movs	r2, #16
   25a58:	f10d 0007 	add.w	r0, sp, #7
   25a5c:	f7fe fc52 	bl	24304 <memcpy>
		value_len += 16U;
   25a60:	2113      	movs	r1, #19
   25a62:	e7e7      	b.n	25a34 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25a64:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25a68:	e7f1      	b.n	25a4e <bt_gatt_attr_read_chrc+0x46>

00025a6a <bt_gatt_foreach_attr>:
{
   25a6a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25a6c:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25a70:	2300      	movs	r3, #0
   25a72:	9300      	str	r3, [sp, #0]
   25a74:	461a      	mov	r2, r3
   25a76:	f7e8 f885 	bl	db84 <bt_gatt_foreach_attr_type>
}
   25a7a:	b005      	add	sp, #20
   25a7c:	f85d fb04 	ldr.w	pc, [sp], #4

00025a80 <db_hash_process>:
	db_hash_gen(true);
   25a80:	2001      	movs	r0, #1
   25a82:	f7e8 b8d9 	b.w	dc38 <db_hash_gen>

00025a86 <bt_gatt_attr_read_cep>:
{
   25a86:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25a88:	4610      	mov	r0, r2
   25a8a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   25a8e:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   25a90:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   25a92:	8812      	ldrh	r2, [r2, #0]
   25a94:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25a98:	d80d      	bhi.n	25ab6 <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   25a9a:	f1c5 0402 	rsb	r4, r5, #2
   25a9e:	429c      	cmp	r4, r3
   25aa0:	bfa8      	it	ge
   25aa2:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25aa4:	f10d 0306 	add.w	r3, sp, #6
   25aa8:	4622      	mov	r2, r4
   25aaa:	1959      	adds	r1, r3, r5
   25aac:	f7fe fc2a 	bl	24304 <memcpy>
}
   25ab0:	4620      	mov	r0, r4
   25ab2:	b003      	add	sp, #12
   25ab4:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25ab6:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   25aba:	e7f9      	b.n	25ab0 <bt_gatt_attr_read_cep+0x2a>

00025abc <bt_gatt_check_perm>:
{
   25abc:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   25abe:	07d4      	lsls	r4, r2, #31
{
   25ac0:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25ac2:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25ac4:	d504      	bpl.n	25ad0 <bt_gatt_check_perm+0x14>
   25ac6:	f010 0f15 	tst.w	r0, #21
   25aca:	d01e      	beq.n	25b0a <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25acc:	684b      	ldr	r3, [r1, #4]
   25ace:	b1e3      	cbz	r3, 25b0a <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25ad0:	0793      	lsls	r3, r2, #30
   25ad2:	d504      	bpl.n	25ade <bt_gatt_check_perm+0x22>
   25ad4:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   25ad8:	d019      	beq.n	25b0e <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25ada:	688b      	ldr	r3, [r1, #8]
   25adc:	b1bb      	cbz	r3, 25b0e <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   25ade:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25ae2:	f014 0f30 	tst.w	r4, #48	; 0x30
   25ae6:	d103      	bne.n	25af0 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   25ae8:	f014 000c 	ands.w	r0, r4, #12
   25aec:	d107      	bne.n	25afe <bt_gatt_check_perm+0x42>
}
   25aee:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25af0:	4628      	mov	r0, r5
   25af2:	f7fe fff9 	bl	24ae8 <bt_conn_get_security>
   25af6:	2802      	cmp	r0, #2
   25af8:	d8f6      	bhi.n	25ae8 <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   25afa:	2005      	movs	r0, #5
   25afc:	e7f7      	b.n	25aee <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   25afe:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   25b00:	2b00      	cmp	r3, #0
   25b02:	bf14      	ite	ne
   25b04:	2000      	movne	r0, #0
   25b06:	200f      	moveq	r0, #15
   25b08:	e7f1      	b.n	25aee <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25b0a:	2002      	movs	r0, #2
   25b0c:	e7ef      	b.n	25aee <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25b0e:	2003      	movs	r0, #3
   25b10:	e7ed      	b.n	25aee <bt_gatt_check_perm+0x32>

00025b12 <bt_gatt_change_aware>:
{
   25b12:	b510      	push	{r4, lr}
   25b14:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   25b16:	f7e7 fa97 	bl	d048 <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25b1a:	4603      	mov	r3, r0
   25b1c:	b910      	cbnz	r0, 25b24 <bt_gatt_change_aware+0x12>
		return true;
   25b1e:	2401      	movs	r4, #1
}
   25b20:	4620      	mov	r0, r4
   25b22:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25b24:	7a02      	ldrb	r2, [r0, #8]
   25b26:	07d1      	lsls	r1, r2, #31
   25b28:	d5f9      	bpl.n	25b1e <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25b2a:	f3bf 8f5b 	dmb	ish
   25b2e:	68da      	ldr	r2, [r3, #12]
   25b30:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25b34:	07d2      	lsls	r2, r2, #31
   25b36:	f100 000c 	add.w	r0, r0, #12
   25b3a:	d4f0      	bmi.n	25b1e <bt_gatt_change_aware+0xc>
	if (!req) {
   25b3c:	2c00      	cmp	r4, #0
   25b3e:	d0ef      	beq.n	25b20 <bt_gatt_change_aware+0xe>
   25b40:	f3bf 8f5b 	dmb	ish
   25b44:	68db      	ldr	r3, [r3, #12]
   25b46:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25b4a:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   25b4e:	079b      	lsls	r3, r3, #30
   25b50:	d507      	bpl.n	25b62 <bt_gatt_change_aware+0x50>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25b52:	f06f 0102 	mvn.w	r1, #2
   25b56:	f7ff fe08 	bl	2576a <atomic_and.isra.0>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25b5a:	2101      	movs	r1, #1
   25b5c:	f7ff fdd9 	bl	25712 <atomic_or>
}
   25b60:	e7de      	b.n	25b20 <bt_gatt_change_aware+0xe>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25b62:	2102      	movs	r1, #2
   25b64:	e7fa      	b.n	25b5c <bt_gatt_change_aware+0x4a>

00025b66 <sys_memcpy_swap>:
	psrc += length - 1;
   25b66:	1e53      	subs	r3, r2, #1
   25b68:	4419      	add	r1, r3
	for (; length > 0; length--) {
   25b6a:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   25b6c:	f811 3901 	ldrb.w	r3, [r1], #-1
   25b70:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   25b74:	4290      	cmp	r0, r2
   25b76:	d1f9      	bne.n	25b6c <sys_memcpy_swap+0x6>
}
   25b78:	4770      	bx	lr

00025b7a <sys_mem_swap>:
{
   25b7a:	b510      	push	{r4, lr}
   25b7c:	1843      	adds	r3, r0, r1
   25b7e:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   25b82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   25b86:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   25b88:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   25b8c:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   25b8e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   25b90:	d1f7      	bne.n	25b82 <sys_mem_swap+0x8>
	}
}
   25b92:	bd10      	pop	{r4, pc}

00025b94 <smp_pairing_rsp>:
}
   25b94:	2007      	movs	r0, #7
   25b96:	4770      	bx	lr

00025b98 <bt_smp_aes_cmac>:
{
   25b98:	b570      	push	{r4, r5, r6, lr}
   25b9a:	b0c2      	sub	sp, #264	; 0x108
   25b9c:	460d      	mov	r5, r1
   25b9e:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25ba0:	4601      	mov	r1, r0
   25ba2:	aa16      	add	r2, sp, #88	; 0x58
   25ba4:	4668      	mov	r0, sp
{
   25ba6:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25ba8:	f7fe fa04 	bl	23fb4 <tc_cmac_setup>
   25bac:	b150      	cbz	r0, 25bc4 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   25bae:	4632      	mov	r2, r6
   25bb0:	4629      	mov	r1, r5
   25bb2:	4668      	mov	r0, sp
   25bb4:	f7fe fa29 	bl	2400a <tc_cmac_update>
   25bb8:	b120      	cbz	r0, 25bc4 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   25bba:	4669      	mov	r1, sp
   25bbc:	4620      	mov	r0, r4
   25bbe:	f7fe fa8f 	bl	240e0 <tc_cmac_final>
   25bc2:	b918      	cbnz	r0, 25bcc <bt_smp_aes_cmac+0x34>
		return -EIO;
   25bc4:	f06f 0004 	mvn.w	r0, #4
}
   25bc8:	b042      	add	sp, #264	; 0x108
   25bca:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   25bcc:	2000      	movs	r0, #0
   25bce:	e7fb      	b.n	25bc8 <bt_smp_aes_cmac+0x30>

00025bd0 <smp_f4>:
{
   25bd0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25bd2:	b097      	sub	sp, #92	; 0x5c
   25bd4:	4614      	mov	r4, r2
   25bd6:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   25bd8:	2220      	movs	r2, #32
   25bda:	4601      	mov	r1, r0
   25bdc:	a805      	add	r0, sp, #20
{
   25bde:	461d      	mov	r5, r3
   25be0:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   25be2:	f7ff ffc0 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   25be6:	2220      	movs	r2, #32
   25be8:	4631      	mov	r1, r6
   25bea:	a80d      	add	r0, sp, #52	; 0x34
   25bec:	f7ff ffbb 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   25bf0:	4621      	mov	r1, r4
   25bf2:	2210      	movs	r2, #16
   25bf4:	a801      	add	r0, sp, #4
	m[64] = z;
   25bf6:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   25bfa:	f7ff ffb4 	bl	25b66 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   25bfe:	463b      	mov	r3, r7
   25c00:	2241      	movs	r2, #65	; 0x41
   25c02:	a905      	add	r1, sp, #20
   25c04:	a801      	add	r0, sp, #4
   25c06:	f7ff ffc7 	bl	25b98 <bt_smp_aes_cmac>
	if (err) {
   25c0a:	4604      	mov	r4, r0
   25c0c:	b918      	cbnz	r0, 25c16 <smp_f4+0x46>
	sys_mem_swap(res, 16);
   25c0e:	2110      	movs	r1, #16
   25c10:	4638      	mov	r0, r7
   25c12:	f7ff ffb2 	bl	25b7a <sys_mem_swap>
}
   25c16:	4620      	mov	r0, r4
   25c18:	b017      	add	sp, #92	; 0x5c
   25c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025c1c <smp_f6>:
{
   25c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
   25c1e:	b097      	sub	sp, #92	; 0x5c
   25c20:	4605      	mov	r5, r0
   25c22:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   25c24:	a805      	add	r0, sp, #20
   25c26:	2210      	movs	r2, #16
{
   25c28:	461c      	mov	r4, r3
   25c2a:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   25c2c:	f7ff ff9b 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   25c30:	2210      	movs	r2, #16
   25c32:	4631      	mov	r1, r6
   25c34:	a809      	add	r0, sp, #36	; 0x24
   25c36:	f7ff ff96 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   25c3a:	4621      	mov	r1, r4
   25c3c:	2210      	movs	r2, #16
   25c3e:	a80d      	add	r0, sp, #52	; 0x34
   25c40:	f7ff ff91 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   25c44:	991c      	ldr	r1, [sp, #112]	; 0x70
   25c46:	2203      	movs	r2, #3
   25c48:	a811      	add	r0, sp, #68	; 0x44
   25c4a:	f7ff ff8c 	bl	25b66 <sys_memcpy_swap>
	m[51] = a1->type;
   25c4e:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   25c50:	f814 3b01 	ldrb.w	r3, [r4], #1
   25c54:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   25c58:	4621      	mov	r1, r4
   25c5a:	2206      	movs	r2, #6
   25c5c:	a812      	add	r0, sp, #72	; 0x48
   25c5e:	f7fe fb51 	bl	24304 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   25c62:	4621      	mov	r1, r4
   25c64:	2206      	movs	r2, #6
   25c66:	a812      	add	r0, sp, #72	; 0x48
   25c68:	f7ff ff7d 	bl	25b66 <sys_memcpy_swap>
	m[58] = a2->type;
   25c6c:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   25c6e:	f814 3b01 	ldrb.w	r3, [r4], #1
   25c72:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   25c76:	4621      	mov	r1, r4
   25c78:	2206      	movs	r2, #6
   25c7a:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   25c7e:	f7fe fb41 	bl	24304 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   25c82:	4621      	mov	r1, r4
   25c84:	2206      	movs	r2, #6
   25c86:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   25c8a:	f7ff ff6c 	bl	25b66 <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   25c8e:	2210      	movs	r2, #16
   25c90:	4629      	mov	r1, r5
   25c92:	a801      	add	r0, sp, #4
   25c94:	f7ff ff67 	bl	25b66 <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   25c98:	463b      	mov	r3, r7
   25c9a:	2241      	movs	r2, #65	; 0x41
   25c9c:	a905      	add	r1, sp, #20
   25c9e:	a801      	add	r0, sp, #4
   25ca0:	f7ff ff7a 	bl	25b98 <bt_smp_aes_cmac>
	if (err) {
   25ca4:	4604      	mov	r4, r0
   25ca6:	b918      	cbnz	r0, 25cb0 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   25ca8:	2110      	movs	r1, #16
   25caa:	4638      	mov	r0, r7
   25cac:	f7ff ff65 	bl	25b7a <sys_mem_swap>
}
   25cb0:	4620      	mov	r0, r4
   25cb2:	b017      	add	sp, #92	; 0x5c
   25cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025cb6 <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25cb6:	2301      	movs	r3, #1
   25cb8:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25cba:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25cbc:	f3bf 8f5b 	dmb	ish
   25cc0:	e850 2f00 	ldrex	r2, [r0]
   25cc4:	401a      	ands	r2, r3
   25cc6:	e840 2100 	strex	r1, r2, [r0]
   25cca:	2900      	cmp	r1, #0
   25ccc:	d1f8      	bne.n	25cc0 <atomic_clear_bit+0xa>
   25cce:	f3bf 8f5b 	dmb	ish
}
   25cd2:	4770      	bx	lr

00025cd4 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25cd4:	2301      	movs	r3, #1
   25cd6:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25cd8:	f3bf 8f5b 	dmb	ish
   25cdc:	e850 2f00 	ldrex	r2, [r0]
   25ce0:	431a      	orrs	r2, r3
   25ce2:	e840 2100 	strex	r1, r2, [r0]
   25ce6:	2900      	cmp	r1, #0
   25ce8:	d1f8      	bne.n	25cdc <atomic_set_bit+0x8>
   25cea:	f3bf 8f5b 	dmb	ish
}
   25cee:	4770      	bx	lr

00025cf0 <smp_keypress_notif>:
{
   25cf0:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   25cf2:	210e      	movs	r1, #14
   25cf4:	30b8      	adds	r0, #184	; 0xb8
   25cf6:	f7ff ffed 	bl	25cd4 <atomic_set_bit>
}
   25cfa:	2000      	movs	r0, #0
   25cfc:	bd08      	pop	{r3, pc}

00025cfe <smp_security_request>:
   25cfe:	2007      	movs	r0, #7
   25d00:	4770      	bx	lr

00025d02 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25d02:	f3bf 8f5b 	dmb	ish
   25d06:	6800      	ldr	r0, [r0, #0]
   25d08:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25d0c:	4108      	asrs	r0, r1
}
   25d0e:	f000 0001 	and.w	r0, r0, #1
   25d12:	4770      	bx	lr

00025d14 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   25d14:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   25d16:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   25d1a:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   25d1c:	4628      	mov	r0, r5
   25d1e:	2104      	movs	r1, #4
   25d20:	f7ff ffef 	bl	25d02 <atomic_test_bit>
   25d24:	b168      	cbz	r0, 25d42 <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   25d26:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   25d28:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   25d2a:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   25d2c:	4608      	mov	r0, r1
   25d2e:	f7ff f80d 	bl	24d4c <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   25d32:	4604      	mov	r4, r0
   25d34:	b940      	cbnz	r0, 25d48 <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   25d36:	2104      	movs	r1, #4
   25d38:	4628      	mov	r0, r5
   25d3a:	f7ff ffcb 	bl	25cd4 <atomic_set_bit>
}
   25d3e:	4620      	mov	r0, r4
   25d40:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   25d42:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25d46:	e7ef      	b.n	25d28 <smp_create_pdu.constprop.0+0x14>
   25d48:	2101      	movs	r1, #1
   25d4a:	3008      	adds	r0, #8
   25d4c:	f000 fb2e 	bl	263ac <net_buf_simple_add>
	hdr->code = op;
   25d50:	7006      	strb	r6, [r0, #0]
	return buf;
   25d52:	e7f4      	b.n	25d3e <smp_create_pdu.constprop.0+0x2a>

00025d54 <send_pairing_rsp>:
{
   25d54:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   25d56:	2102      	movs	r1, #2
{
   25d58:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   25d5a:	f7ff ffdb 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   25d5e:	4604      	mov	r4, r0
   25d60:	b178      	cbz	r0, 25d82 <send_pairing_rsp+0x2e>
   25d62:	2106      	movs	r1, #6
   25d64:	3008      	adds	r0, #8
   25d66:	f000 fb21 	bl	263ac <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   25d6a:	2206      	movs	r2, #6
   25d6c:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   25d70:	f7fe fac8 	bl	24304 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   25d74:	4628      	mov	r0, r5
   25d76:	2200      	movs	r2, #0
   25d78:	4621      	mov	r1, r4
   25d7a:	f7e8 fc83 	bl	e684 <smp_send.constprop.0>
	return 0;
   25d7e:	2000      	movs	r0, #0
}
   25d80:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   25d82:	2008      	movs	r0, #8
   25d84:	e7fc      	b.n	25d80 <send_pairing_rsp+0x2c>

00025d86 <smp_send_pairing_random>:
{
   25d86:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   25d88:	2104      	movs	r1, #4
{
   25d8a:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   25d8c:	f7ff ffc2 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   25d90:	4604      	mov	r4, r0
   25d92:	b178      	cbz	r0, 25db4 <smp_send_pairing_random+0x2e>
   25d94:	2110      	movs	r1, #16
   25d96:	3008      	adds	r0, #8
   25d98:	f000 fb08 	bl	263ac <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   25d9c:	2210      	movs	r2, #16
   25d9e:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   25da2:	f7fe faaf 	bl	24304 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   25da6:	4628      	mov	r0, r5
   25da8:	2200      	movs	r2, #0
   25daa:	4621      	mov	r1, r4
   25dac:	f7e8 fc6a 	bl	e684 <smp_send.constprop.0>
	return 0;
   25db0:	2000      	movs	r0, #0
}
   25db2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   25db4:	2008      	movs	r0, #8
   25db6:	e7fc      	b.n	25db2 <smp_send_pairing_random+0x2c>

00025db8 <smp_dhkey_check>:
{
   25db8:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   25dba:	6803      	ldr	r3, [r0, #0]
   25dbc:	78db      	ldrb	r3, [r3, #3]
   25dbe:	2b01      	cmp	r3, #1
{
   25dc0:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   25dc2:	d115      	bne.n	25df0 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   25dc4:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   25dc6:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   25dca:	2110      	movs	r1, #16
   25dcc:	4628      	mov	r0, r5
   25dce:	f7ff ff72 	bl	25cb6 <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   25dd2:	4631      	mov	r1, r6
   25dd4:	2210      	movs	r2, #16
   25dd6:	f204 106f 	addw	r0, r4, #367	; 0x16f
   25dda:	f7fe fa93 	bl	24304 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   25dde:	2107      	movs	r1, #7
   25de0:	4628      	mov	r0, r5
   25de2:	f7ff ff8e 	bl	25d02 <atomic_test_bit>
   25de6:	b128      	cbz	r0, 25df4 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   25de8:	2109      	movs	r1, #9
   25dea:	4628      	mov	r0, r5
   25dec:	f7ff ff72 	bl	25cd4 <atomic_set_bit>
}
   25df0:	2000      	movs	r0, #0
   25df2:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   25df4:	210a      	movs	r1, #10
   25df6:	4628      	mov	r0, r5
   25df8:	f7ff ff83 	bl	25d02 <atomic_test_bit>
   25dfc:	2800      	cmp	r0, #0
   25dfe:	d1f3      	bne.n	25de8 <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   25e00:	4620      	mov	r0, r4
}
   25e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   25e06:	f7e8 bf11 	b.w	ec2c <compute_and_check_and_send_slave_dhcheck>

00025e0a <atomic_test_and_clear_bit>:
{
   25e0a:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   25e0c:	2301      	movs	r3, #1
   25e0e:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25e12:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25e14:	f3bf 8f5b 	dmb	ish
   25e18:	e850 3f00 	ldrex	r3, [r0]
   25e1c:	ea03 0c02 	and.w	ip, r3, r2
   25e20:	e840 ce00 	strex	lr, ip, [r0]
   25e24:	f1be 0f00 	cmp.w	lr, #0
   25e28:	d1f6      	bne.n	25e18 <atomic_test_and_clear_bit+0xe>
   25e2a:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   25e2e:	420b      	tst	r3, r1
}
   25e30:	bf14      	ite	ne
   25e32:	2001      	movne	r0, #1
   25e34:	2000      	moveq	r0, #0
   25e36:	f85d fb04 	ldr.w	pc, [sp], #4

00025e3a <smp_reset>:
{
   25e3a:	b510      	push	{r4, lr}
   25e3c:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   25e3e:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   25e42:	f001 f90e 	bl	27062 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   25e46:	2300      	movs	r3, #0
   25e48:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   25e4c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25e50:	f3bf 8f5b 	dmb	ish
   25e54:	e850 2f00 	ldrex	r2, [r0]
   25e58:	e840 3100 	strex	r1, r3, [r0]
   25e5c:	2900      	cmp	r1, #0
   25e5e:	d1f9      	bne.n	25e54 <smp_reset+0x1a>
   25e60:	f3bf 8f5b 	dmb	ish
   25e64:	f3bf 8f5b 	dmb	ish
   25e68:	34bc      	adds	r4, #188	; 0xbc
   25e6a:	e854 2f00 	ldrex	r2, [r4]
   25e6e:	e844 3100 	strex	r1, r3, [r4]
   25e72:	2900      	cmp	r1, #0
   25e74:	d1f9      	bne.n	25e6a <smp_reset+0x30>
   25e76:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   25e7a:	2101      	movs	r1, #1
}
   25e7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   25e80:	f7ff bf28 	b.w	25cd4 <atomic_set_bit>

00025e84 <smp_c1>:
{
   25e84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25e88:	b089      	sub	sp, #36	; 0x24
   25e8a:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   25e8e:	4699      	mov	r9, r3
	p1[0] = ia->type;
   25e90:	783b      	ldrb	r3, [r7, #0]
{
   25e92:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   25e94:	f88d 3000 	strb.w	r3, [sp]
{
   25e98:	460c      	mov	r4, r1
	p1[1] = ra->type;
   25e9a:	f898 3000 	ldrb.w	r3, [r8]
   25e9e:	f88d 3001 	strb.w	r3, [sp, #1]
{
   25ea2:	4611      	mov	r1, r2
   25ea4:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   25ea6:	2207      	movs	r2, #7
   25ea8:	f10d 0002 	add.w	r0, sp, #2
   25eac:	f7fe fa2a 	bl	24304 <memcpy>
	memcpy(p1 + 9, pres, 7);
   25eb0:	2207      	movs	r2, #7
   25eb2:	4649      	mov	r1, r9
   25eb4:	f10d 0009 	add.w	r0, sp, #9
   25eb8:	f7fe fa24 	bl	24304 <memcpy>
	while (len--) {
   25ebc:	f104 0010 	add.w	r0, r4, #16
   25ec0:	4629      	mov	r1, r5
   25ec2:	466a      	mov	r2, sp
   25ec4:	42a0      	cmp	r0, r4
   25ec6:	d127      	bne.n	25f18 <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   25ec8:	462a      	mov	r2, r5
   25eca:	4629      	mov	r1, r5
   25ecc:	4630      	mov	r0, r6
   25ece:	f7ed fa71 	bl	133b4 <bt_encrypt_le>
	if (err) {
   25ed2:	4604      	mov	r4, r0
   25ed4:	b9e0      	cbnz	r0, 25f10 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   25ed6:	2206      	movs	r2, #6
   25ed8:	f108 0101 	add.w	r1, r8, #1
   25edc:	a804      	add	r0, sp, #16
   25ede:	f7fe fa11 	bl	24304 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   25ee2:	2206      	movs	r2, #6
   25ee4:	1c79      	adds	r1, r7, #1
   25ee6:	f10d 0016 	add.w	r0, sp, #22
   25eea:	f7fe fa0b 	bl	24304 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   25eee:	2204      	movs	r2, #4
   25ef0:	4621      	mov	r1, r4
   25ef2:	a807      	add	r0, sp, #28
   25ef4:	f7fe fa31 	bl	2435a <memset>
	while (len--) {
   25ef8:	f105 0010 	add.w	r0, r5, #16
   25efc:	462a      	mov	r2, r5
   25efe:	ab04      	add	r3, sp, #16
   25f00:	4282      	cmp	r2, r0
   25f02:	d112      	bne.n	25f2a <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   25f04:	462a      	mov	r2, r5
   25f06:	4629      	mov	r1, r5
   25f08:	4630      	mov	r0, r6
   25f0a:	f7ed fa53 	bl	133b4 <bt_encrypt_le>
   25f0e:	4604      	mov	r4, r0
}
   25f10:	4620      	mov	r0, r4
   25f12:	b009      	add	sp, #36	; 0x24
   25f14:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   25f18:	f814 3b01 	ldrb.w	r3, [r4], #1
   25f1c:	f812 cb01 	ldrb.w	ip, [r2], #1
   25f20:	ea83 030c 	eor.w	r3, r3, ip
   25f24:	f801 3b01 	strb.w	r3, [r1], #1
   25f28:	e7cc      	b.n	25ec4 <smp_c1+0x40>
   25f2a:	f812 1b01 	ldrb.w	r1, [r2], #1
   25f2e:	f813 4b01 	ldrb.w	r4, [r3], #1
   25f32:	4061      	eors	r1, r4
   25f34:	f802 1c01 	strb.w	r1, [r2, #-1]
   25f38:	e7e2      	b.n	25f00 <smp_c1+0x7c>

00025f3a <legacy_pairing_confirm>:
{
   25f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   25f3c:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   25f40:	b085      	sub	sp, #20
   25f42:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   25f44:	210a      	movs	r1, #10
   25f46:	4638      	mov	r0, r7
   25f48:	f7ff fedb 	bl	25d02 <atomic_test_bit>
   25f4c:	bb90      	cbnz	r0, 25fb4 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   25f4e:	2104      	movs	r1, #4
   25f50:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   25f54:	f7ff febe 	bl	25cd4 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   25f58:	2103      	movs	r1, #3
   25f5a:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   25f5c:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   25f5e:	f7ff fed9 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!buf) {
   25f62:	4606      	mov	r6, r0
   25f64:	b1c0      	cbz	r0, 25f98 <legacy_pairing_confirm+0x5e>
   25f66:	2110      	movs	r1, #16
   25f68:	3008      	adds	r0, #8
   25f6a:	f000 fa1f 	bl	263ac <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   25f6e:	f104 0396 	add.w	r3, r4, #150	; 0x96
   25f72:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   25f74:	9002      	str	r0, [sp, #8]
   25f76:	9301      	str	r3, [sp, #4]
   25f78:	9400      	str	r4, [sp, #0]
   25f7a:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   25f7e:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   25f82:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   25f86:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   25f8a:	f7ff ff7b 	bl	25e84 <smp_c1>
   25f8e:	4604      	mov	r4, r0
   25f90:	b120      	cbz	r0, 25f9c <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   25f92:	4630      	mov	r0, r6
   25f94:	f7f7 fad8 	bl	1d548 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   25f98:	2008      	movs	r0, #8
   25f9a:	e009      	b.n	25fb0 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   25f9c:	4602      	mov	r2, r0
   25f9e:	4631      	mov	r1, r6
   25fa0:	4628      	mov	r0, r5
   25fa2:	f7e8 fb6f 	bl	e684 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   25fa6:	4621      	mov	r1, r4
   25fa8:	4638      	mov	r0, r7
   25faa:	f7ff fe84 	bl	25cb6 <atomic_clear_bit>
	return 0;
   25fae:	2000      	movs	r0, #0
}
   25fb0:	b005      	add	sp, #20
   25fb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   25fb4:	2100      	movs	r1, #0
   25fb6:	4638      	mov	r0, r7
   25fb8:	f7ff fe8c 	bl	25cd4 <atomic_set_bit>
   25fbc:	e7f7      	b.n	25fae <legacy_pairing_confirm+0x74>

00025fbe <bt_smp_request_ltk>:
{
   25fbe:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   25fc2:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   25fc6:	e9cd 2300 	strd	r2, r3, [sp]
   25fca:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   25fcc:	f7e8 fb02 	bl	e5d4 <smp_chan_get>
	if (!smp) {
   25fd0:	4605      	mov	r5, r0
   25fd2:	2800      	cmp	r0, #0
   25fd4:	f000 8093 	beq.w	260fe <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   25fd8:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   25fdc:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (ediv == 0U && rand == 0U &&
   25fe0:	f1b9 0f00 	cmp.w	r9, #0
   25fe4:	d12c      	bne.n	26040 <bt_smp_request_ltk+0x82>
   25fe6:	e9dd 2300 	ldrd	r2, r3, [sp]
   25fea:	4313      	orrs	r3, r2
   25fec:	d128      	bne.n	26040 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   25fee:	2103      	movs	r1, #3
   25ff0:	4638      	mov	r0, r7
   25ff2:	f7ff fe86 	bl	25d02 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   25ff6:	b318      	cbz	r0, 26040 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   25ff8:	2101      	movs	r1, #1
   25ffa:	4638      	mov	r0, r7
   25ffc:	f7ff fe81 	bl	25d02 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26000:	4606      	mov	r6, r0
   26002:	b1e8      	cbz	r0, 26040 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   26004:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   26008:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   2600c:	429c      	cmp	r4, r3
   2600e:	bf28      	it	cs
   26010:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   26012:	4622      	mov	r2, r4
   26014:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   26018:	4640      	mov	r0, r8
   2601a:	f7fe f973 	bl	24304 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   2601e:	2c0f      	cmp	r4, #15
   26020:	d806      	bhi.n	26030 <bt_smp_request_ltk+0x72>
			(void)memset(ltk + enc_size, 0,
   26022:	f1c4 0210 	rsb	r2, r4, #16
   26026:	4649      	mov	r1, r9
   26028:	eb08 0004 	add.w	r0, r8, r4
   2602c:	f7fe f995 	bl	2435a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26030:	2101      	movs	r1, #1
   26032:	4638      	mov	r0, r7
   26034:	f7ff fe4e 	bl	25cd4 <atomic_set_bit>
}
   26038:	4630      	mov	r0, r6
   2603a:	b003      	add	sp, #12
   2603c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   26040:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   26044:	b983      	cbnz	r3, 26068 <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   26046:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   2604a:	7a21      	ldrb	r1, [r4, #8]
   2604c:	4632      	mov	r2, r6
   2604e:	2020      	movs	r0, #32
   26050:	f7ea f8f4 	bl	1023c <bt_keys_find>
   26054:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   26058:	b930      	cbnz	r0, 26068 <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   2605a:	7a21      	ldrb	r1, [r4, #8]
   2605c:	4632      	mov	r2, r6
   2605e:	2001      	movs	r0, #1
   26060:	f7ea f8ec 	bl	1023c <bt_keys_find>
   26064:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   26068:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2606c:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   26070:	b9ee      	cbnz	r6, 260ae <bt_smp_request_ltk+0xf0>
   26072:	e9dd 2300 	ldrd	r2, r3, [sp]
   26076:	4313      	orrs	r3, r2
   26078:	d119      	bne.n	260ae <bt_smp_request_ltk+0xf0>
   2607a:	b388      	cbz	r0, 260e0 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   2607c:	89c3      	ldrh	r3, [r0, #14]
   2607e:	069a      	lsls	r2, r3, #26
   26080:	d516      	bpl.n	260b0 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   26082:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   26084:	f100 011a 	add.w	r1, r0, #26
   26088:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2608a:	4640      	mov	r0, r8
   2608c:	f7fe f93a 	bl	24304 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26090:	2c0f      	cmp	r4, #15
   26092:	d806      	bhi.n	260a2 <bt_smp_request_ltk+0xe4>
			(void)memset(ltk + enc_size, 0,
   26094:	f1c4 0210 	rsb	r2, r4, #16
   26098:	4631      	mov	r1, r6
   2609a:	eb08 0004 	add.w	r0, r8, r4
   2609e:	f7fe f95c 	bl	2435a <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   260a2:	2101      	movs	r1, #1
   260a4:	4638      	mov	r0, r7
   260a6:	f7ff fe15 	bl	25cd4 <atomic_set_bit>
		return true;
   260aa:	2601      	movs	r6, #1
   260ac:	e7c4      	b.n	26038 <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   260ae:	b1b8      	cbz	r0, 260e0 <bt_smp_request_ltk+0x122>
   260b0:	89c3      	ldrh	r3, [r0, #14]
   260b2:	07db      	lsls	r3, r3, #31
   260b4:	d514      	bpl.n	260e0 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   260b6:	2208      	movs	r2, #8
   260b8:	4669      	mov	r1, sp
   260ba:	3068      	adds	r0, #104	; 0x68
   260bc:	f7fe f911 	bl	242e2 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   260c0:	b970      	cbnz	r0, 260e0 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   260c2:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   260c6:	2202      	movs	r2, #2
   260c8:	a90a      	add	r1, sp, #40	; 0x28
   260ca:	3070      	adds	r0, #112	; 0x70
   260cc:	f7fe f909 	bl	242e2 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   260d0:	4606      	mov	r6, r0
   260d2:	b928      	cbnz	r0, 260e0 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   260d4:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   260d8:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   260da:	3172      	adds	r1, #114	; 0x72
   260dc:	4622      	mov	r2, r4
   260de:	e7d4      	b.n	2608a <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   260e0:	210f      	movs	r1, #15
   260e2:	4638      	mov	r0, r7
   260e4:	f7ff fe0d 	bl	25d02 <atomic_test_bit>
   260e8:	b120      	cbz	r0, 260f4 <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   260ea:	2202      	movs	r2, #2
   260ec:	2106      	movs	r1, #6
   260ee:	4620      	mov	r0, r4
   260f0:	f7e5 f8ba 	bl	b268 <bt_conn_security_changed>
	smp_reset(smp);
   260f4:	4628      	mov	r0, r5
   260f6:	f7ff fea0 	bl	25e3a <smp_reset>
	return false;
   260fa:	2600      	movs	r6, #0
   260fc:	e79c      	b.n	26038 <bt_smp_request_ltk+0x7a>
		return false;
   260fe:	4606      	mov	r6, r0
   26100:	e79a      	b.n	26038 <bt_smp_request_ltk+0x7a>

00026102 <bt_smp_irk_get>:
{
   26102:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   26104:	2500      	movs	r5, #0
{
   26106:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   26108:	2210      	movs	r2, #16
   2610a:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   2610c:	e9cd 5500 	strd	r5, r5, [sp]
   26110:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   26114:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   26116:	f7fe f8e4 	bl	242e2 <memcmp>
   2611a:	b180      	cbz	r0, 2613e <bt_smp_irk_get+0x3c>
	dst[0] = val;
   2611c:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   2611e:	220c      	movs	r2, #12
   26120:	4629      	mov	r1, r5
   26122:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   26124:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   26126:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   26128:	70e5      	strb	r5, [r4, #3]
   2612a:	1d20      	adds	r0, r4, #4
   2612c:	f7fe f915 	bl	2435a <memset>
	err = bt_encrypt_le(key, res, res);
   26130:	4622      	mov	r2, r4
   26132:	4621      	mov	r1, r4
   26134:	4630      	mov	r0, r6
   26136:	f7ed f93d 	bl	133b4 <bt_encrypt_le>
}
   2613a:	b004      	add	sp, #16
   2613c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   2613e:	f06f 0015 	mvn.w	r0, #21
   26142:	e7fa      	b.n	2613a <bt_smp_irk_get+0x38>

00026144 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26144:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
{
   26148:	b573      	push	{r0, r1, r4, r5, r6, lr}
   2614a:	4605      	mov	r5, r0
   2614c:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   2614e:	4618      	mov	r0, r3
   26150:	2103      	movs	r1, #3
   26152:	f7ff fdd6 	bl	25d02 <atomic_test_bit>
   26156:	b1c8      	cbz	r0, 2618c <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   26158:	4621      	mov	r1, r4
   2615a:	4628      	mov	r0, r5
   2615c:	f7e9 fb0a 	bl	f774 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   26160:	2105      	movs	r1, #5
   26162:	4628      	mov	r0, r5
   26164:	f7ff fdd6 	bl	25d14 <smp_create_pdu.constprop.0>
	if (!buf) {
   26168:	4606      	mov	r6, r0
   2616a:	b1e0      	cbz	r0, 261a6 <smp_error+0x62>
   2616c:	2101      	movs	r1, #1
   2616e:	3008      	adds	r0, #8
   26170:	f000 f91c 	bl	263ac <net_buf_simple_add>
	rsp->reason = reason;
   26174:	7004      	strb	r4, [r0, #0]
   26176:	2400      	movs	r4, #0
   26178:	6828      	ldr	r0, [r5, #0]
   2617a:	9400      	str	r4, [sp, #0]
   2617c:	4623      	mov	r3, r4
   2617e:	4632      	mov	r2, r6
   26180:	2106      	movs	r1, #6
   26182:	f7fe fde6 	bl	24d52 <bt_l2cap_send_cb>
	return 0;
   26186:	4620      	mov	r0, r4
}
   26188:	b002      	add	sp, #8
   2618a:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2618c:	2101      	movs	r1, #1
   2618e:	4618      	mov	r0, r3
   26190:	f7ff fdb7 	bl	25d02 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26194:	2800      	cmp	r0, #0
   26196:	d1df      	bne.n	26158 <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26198:	210f      	movs	r1, #15
   2619a:	4618      	mov	r0, r3
   2619c:	f7ff fdb1 	bl	25d02 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   261a0:	2800      	cmp	r0, #0
   261a2:	d1d9      	bne.n	26158 <smp_error+0x14>
   261a4:	e7dc      	b.n	26160 <smp_error+0x1c>
		return -ENOBUFS;
   261a6:	f06f 0036 	mvn.w	r0, #54	; 0x36
   261aa:	e7ed      	b.n	26188 <smp_error+0x44>

000261ac <bt_smp_dhkey_ready>:
{
   261ac:	b570      	push	{r4, r5, r6, lr}
   261ae:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   261b0:	2008      	movs	r0, #8
   261b2:	f7e8 fac3 	bl	e73c <smp_find>
	if (smp) {
   261b6:	4604      	mov	r4, r0
   261b8:	b1c0      	cbz	r0, 261ec <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   261ba:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   261be:	2108      	movs	r1, #8
   261c0:	4628      	mov	r0, r5
   261c2:	f7ff fd78 	bl	25cb6 <atomic_clear_bit>
	if (!dhkey) {
   261c6:	b38e      	cbz	r6, 2622c <bt_smp_dhkey_ready+0x80>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   261c8:	2107      	movs	r1, #7
   261ca:	f7ff fd74 	bl	25cb6 <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   261ce:	4631      	mov	r1, r6
   261d0:	2220      	movs	r2, #32
   261d2:	f204 104f 	addw	r0, r4, #335	; 0x14f
   261d6:	f7fe f895 	bl	24304 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   261da:	210a      	movs	r1, #10
   261dc:	4628      	mov	r0, r5
   261de:	f7ff fd90 	bl	25d02 <atomic_test_bit>
   261e2:	b168      	cbz	r0, 26200 <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   261e4:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   261e6:	4628      	mov	r0, r5
   261e8:	f7ff fd74 	bl	25cd4 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   261ec:	2007      	movs	r0, #7
   261ee:	f7e8 faa5 	bl	e73c <smp_find>
		if (smp) {
   261f2:	4604      	mov	r4, r0
   261f4:	b118      	cbz	r0, 261fe <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   261f6:	f7e8 fa7b 	bl	e6f0 <smp_dhkey_generate>
			if (err) {
   261fa:	4601      	mov	r1, r0
   261fc:	b990      	cbnz	r0, 26224 <bt_smp_dhkey_ready+0x78>
}
   261fe:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26200:	2110      	movs	r1, #16
   26202:	4628      	mov	r0, r5
   26204:	f7ff fd7d 	bl	25d02 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26208:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2620a:	2800      	cmp	r0, #0
   2620c:	d1eb      	bne.n	261e6 <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   2620e:	4628      	mov	r0, r5
   26210:	f7ff fd77 	bl	25d02 <atomic_test_bit>
   26214:	2800      	cmp	r0, #0
   26216:	d0e9      	beq.n	261ec <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   26218:	4620      	mov	r0, r4
   2621a:	f7e8 fd07 	bl	ec2c <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   2621e:	4601      	mov	r1, r0
   26220:	2800      	cmp	r0, #0
   26222:	d0e3      	beq.n	261ec <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   26224:	4620      	mov	r0, r4
   26226:	f7ff ff8d 	bl	26144 <smp_error>
   2622a:	e7df      	b.n	261ec <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   2622c:	210b      	movs	r1, #11
   2622e:	e7f9      	b.n	26224 <bt_smp_dhkey_ready+0x78>

00026230 <smp_check_complete>:
{
   26230:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   26232:	7883      	ldrb	r3, [r0, #2]
   26234:	2b01      	cmp	r3, #1
{
   26236:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   26238:	d10f      	bne.n	2625a <smp_check_complete+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2623a:	2106      	movs	r1, #6
   2623c:	f7fe fda2 	bl	24d84 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   26240:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   26244:	ea22 0104 	bic.w	r1, r2, r4
   26248:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   2624c:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   26250:	b919      	cbnz	r1, 2625a <smp_check_complete+0x2a>
}
   26252:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   26256:	f7e9 ba8d 	b.w	f774 <smp_pairing_complete>
}
   2625a:	bd10      	pop	{r4, pc}

0002625c <smp_sign_info_sent>:
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
   2625c:	2104      	movs	r1, #4
   2625e:	f7ff bfe7 	b.w	26230 <smp_check_complete>

00026262 <smp_id_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   26262:	2102      	movs	r1, #2
   26264:	f7ff bfe4 	b.w	26230 <smp_check_complete>

00026268 <smp_ident_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   26268:	2101      	movs	r1, #1
   2626a:	f7ff bfe1 	b.w	26230 <smp_check_complete>

0002626e <bt_smp_disconnected>:
{
   2626e:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   26270:	6803      	ldr	r3, [r0, #0]
{
   26272:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   26274:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	struct bt_keys *keys = chan->conn->le.keys;
   26278:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   2627c:	f000 fef1 	bl	27062 <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26280:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   26284:	2103      	movs	r1, #3
   26286:	4618      	mov	r0, r3
   26288:	f7ff fd3b 	bl	25d02 <atomic_test_bit>
   2628c:	b1a0      	cbz	r0, 262b8 <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   2628e:	2108      	movs	r1, #8
   26290:	4620      	mov	r0, r4
   26292:	f7e9 fa6f 	bl	f774 <smp_pairing_complete>
	if (keys) {
   26296:	b13d      	cbz	r5, 262a8 <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   26298:	89eb      	ldrh	r3, [r5, #14]
   2629a:	b113      	cbz	r3, 262a2 <bt_smp_disconnected+0x34>
   2629c:	7b6b      	ldrb	r3, [r5, #13]
   2629e:	079b      	lsls	r3, r3, #30
   262a0:	d502      	bpl.n	262a8 <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   262a2:	4628      	mov	r0, r5
   262a4:	f7ea f828 	bl	102f8 <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   262a8:	4620      	mov	r0, r4
   262aa:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   262ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   262b2:	2100      	movs	r1, #0
   262b4:	f7fe b851 	b.w	2435a <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   262b8:	2101      	movs	r1, #1
   262ba:	4618      	mov	r0, r3
   262bc:	f7ff fd21 	bl	25d02 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   262c0:	2800      	cmp	r0, #0
   262c2:	d1e4      	bne.n	2628e <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   262c4:	210f      	movs	r1, #15
   262c6:	4618      	mov	r0, r3
   262c8:	f7ff fd1b 	bl	25d02 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   262cc:	2800      	cmp	r0, #0
   262ce:	d1de      	bne.n	2628e <bt_smp_disconnected+0x20>
   262d0:	e7e1      	b.n	26296 <bt_smp_disconnected+0x28>

000262d2 <id_add>:
	bt_id_add(keys);
   262d2:	f7e3 bde3 	b.w	9e9c <bt_id_add>

000262d6 <bt_keys_get_type>:
{
   262d6:	b570      	push	{r4, r5, r6, lr}
   262d8:	4604      	mov	r4, r0
   262da:	460d      	mov	r5, r1
   262dc:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   262de:	f7e9 ffad 	bl	1023c <bt_keys_find>
	if (keys) {
   262e2:	b938      	cbnz	r0, 262f4 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   262e4:	4631      	mov	r1, r6
   262e6:	4628      	mov	r0, r5
   262e8:	f7e9 ff32 	bl	10150 <bt_keys_get_addr>
	if (!keys) {
   262ec:	b110      	cbz	r0, 262f4 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   262ee:	89c3      	ldrh	r3, [r0, #14]
   262f0:	431c      	orrs	r4, r3
   262f2:	81c4      	strh	r4, [r0, #14]
}
   262f4:	bd70      	pop	{r4, r5, r6, pc}

000262f6 <bt_keys_add_type>:
	keys->keys |= type;
   262f6:	89c3      	ldrh	r3, [r0, #14]
   262f8:	4319      	orrs	r1, r3
   262fa:	81c1      	strh	r1, [r0, #14]
}
   262fc:	4770      	bx	lr

000262fe <fixed_data_unref>:
}
   262fe:	4770      	bx	lr

00026300 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26300:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   26302:	6849      	ldr	r1, [r1, #4]
   26304:	6809      	ldr	r1, [r1, #0]
   26306:	f7f7 b891 	b.w	1d42c <net_buf_alloc_len>

0002630a <net_buf_get>:
{
   2630a:	b570      	push	{r4, r5, r6, lr}
   2630c:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   2630e:	f7f9 fc3b 	bl	1fb88 <z_impl_k_queue_get>
	if (!buf) {
   26312:	4605      	mov	r5, r0
   26314:	b128      	cbz	r0, 26322 <net_buf_get+0x18>
   26316:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   26318:	7963      	ldrb	r3, [r4, #5]
   2631a:	f013 0301 	ands.w	r3, r3, #1
   2631e:	d102      	bne.n	26326 <net_buf_get+0x1c>
	frag->frags = NULL;
   26320:	6023      	str	r3, [r4, #0]
}
   26322:	4628      	mov	r0, r5
   26324:	bd70      	pop	{r4, r5, r6, pc}
   26326:	2300      	movs	r3, #0
   26328:	2200      	movs	r2, #0
   2632a:	4630      	mov	r0, r6
   2632c:	f7f9 fc2c 	bl	1fb88 <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   26330:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   26332:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   26334:	f023 0301 	bic.w	r3, r3, #1
   26338:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2633a:	4604      	mov	r4, r0
   2633c:	e7ec      	b.n	26318 <net_buf_get+0xe>

0002633e <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   2633e:	6883      	ldr	r3, [r0, #8]
   26340:	440b      	add	r3, r1
   26342:	6003      	str	r3, [r0, #0]
}
   26344:	4770      	bx	lr

00026346 <net_buf_put>:
{
   26346:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   26348:	460a      	mov	r2, r1
   2634a:	6814      	ldr	r4, [r2, #0]
   2634c:	b914      	cbnz	r4, 26354 <net_buf_put+0xe>
}
   2634e:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   26350:	f000 bcdc 	b.w	26d0c <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   26354:	7953      	ldrb	r3, [r2, #5]
   26356:	f043 0301 	orr.w	r3, r3, #1
   2635a:	7153      	strb	r3, [r2, #5]
   2635c:	4622      	mov	r2, r4
   2635e:	e7f4      	b.n	2634a <net_buf_put+0x4>

00026360 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   26360:	7902      	ldrb	r2, [r0, #4]
   26362:	3201      	adds	r2, #1
   26364:	7102      	strb	r2, [r0, #4]
	return buf;
}
   26366:	4770      	bx	lr

00026368 <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   26368:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   2636a:	4618      	mov	r0, r3
   2636c:	681b      	ldr	r3, [r3, #0]
   2636e:	2b00      	cmp	r3, #0
   26370:	d1fb      	bne.n	2636a <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   26372:	4770      	bx	lr

00026374 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   26374:	6802      	ldr	r2, [r0, #0]
{
   26376:	b510      	push	{r4, lr}
	if (parent->frags) {
   26378:	b12a      	cbz	r2, 26386 <net_buf_frag_insert+0x12>
   2637a:	460b      	mov	r3, r1
	while (buf->frags) {
   2637c:	461c      	mov	r4, r3
   2637e:	681b      	ldr	r3, [r3, #0]
   26380:	2b00      	cmp	r3, #0
   26382:	d1fb      	bne.n	2637c <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   26384:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   26386:	6001      	str	r1, [r0, #0]
}
   26388:	bd10      	pop	{r4, pc}

0002638a <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   2638a:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   2638c:	4604      	mov	r4, r0
   2638e:	b920      	cbnz	r0, 2639a <net_buf_frag_add+0x10>
	buf->ref++;
   26390:	790b      	ldrb	r3, [r1, #4]
   26392:	3301      	adds	r3, #1
   26394:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   26396:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   26398:	bd10      	pop	{r4, pc}
   2639a:	4603      	mov	r3, r0
	while (buf->frags) {
   2639c:	4618      	mov	r0, r3
   2639e:	681b      	ldr	r3, [r3, #0]
   263a0:	2b00      	cmp	r3, #0
   263a2:	d1fb      	bne.n	2639c <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   263a4:	f7ff ffe6 	bl	26374 <net_buf_frag_insert>
   263a8:	4620      	mov	r0, r4
   263aa:	e7f5      	b.n	26398 <net_buf_frag_add+0xe>

000263ac <net_buf_simple_add>:
	return buf->data + buf->len;
   263ac:	8883      	ldrh	r3, [r0, #4]
   263ae:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   263b0:	4419      	add	r1, r3
   263b2:	8081      	strh	r1, [r0, #4]
	return tail;
}
   263b4:	18d0      	adds	r0, r2, r3
   263b6:	4770      	bx	lr

000263b8 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   263b8:	b430      	push	{r4, r5}
   263ba:	8884      	ldrh	r4, [r0, #4]
   263bc:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   263be:	18a3      	adds	r3, r4, r2
   263c0:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   263c2:	1928      	adds	r0, r5, r4
}
   263c4:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   263c6:	f7fd bf9d 	b.w	24304 <memcpy>

000263ca <net_buf_simple_add_u8>:
   263ca:	8883      	ldrh	r3, [r0, #4]
   263cc:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   263ce:	b510      	push	{r4, lr}
	buf->len += len;
   263d0:	1c5c      	adds	r4, r3, #1
   263d2:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   263d4:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   263d6:	18d0      	adds	r0, r2, r3
   263d8:	bd10      	pop	{r4, pc}

000263da <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   263da:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   263dc:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   263de:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   263e0:	1a40      	subs	r0, r0, r1
	buf->len += len;
   263e2:	4411      	add	r1, r2
	buf->data -= len;
   263e4:	6018      	str	r0, [r3, #0]
	buf->len += len;
   263e6:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   263e8:	4770      	bx	lr

000263ea <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   263ea:	8882      	ldrh	r2, [r0, #4]
   263ec:	1a52      	subs	r2, r2, r1
{
   263ee:	4603      	mov	r3, r0
	buf->len -= len;
   263f0:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   263f2:	6800      	ldr	r0, [r0, #0]
   263f4:	4408      	add	r0, r1
   263f6:	6018      	str	r0, [r3, #0]
}
   263f8:	4770      	bx	lr

000263fa <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   263fa:	4603      	mov	r3, r0
	void *data = buf->data;
   263fc:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   263fe:	889a      	ldrh	r2, [r3, #4]
   26400:	1a52      	subs	r2, r2, r1
	buf->data += len;
   26402:	4401      	add	r1, r0
	buf->len -= len;
   26404:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   26406:	6019      	str	r1, [r3, #0]

	return data;
}
   26408:	4770      	bx	lr

0002640a <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2640a:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   2640c:	6803      	ldr	r3, [r0, #0]
   2640e:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26410:	2102      	movs	r1, #2
   26412:	f7ff ffea 	bl	263ea <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   26416:	4620      	mov	r0, r4
   26418:	bd10      	pop	{r4, pc}

0002641a <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2641a:	6802      	ldr	r2, [r0, #0]
   2641c:	6880      	ldr	r0, [r0, #8]
}
   2641e:	1a10      	subs	r0, r2, r0
   26420:	4770      	bx	lr

00026422 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26422:	8883      	ldrh	r3, [r0, #4]
   26424:	88c2      	ldrh	r2, [r0, #6]
   26426:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   26428:	6803      	ldr	r3, [r0, #0]
   2642a:	6880      	ldr	r0, [r0, #8]
   2642c:	1a18      	subs	r0, r3, r0
}
   2642e:	1a10      	subs	r0, r2, r0
   26430:	4770      	bx	lr

00026432 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26432:	6843      	ldr	r3, [r0, #4]
   26434:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   26436:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2643a:	600b      	str	r3, [r1, #0]
}
   2643c:	2000      	movs	r0, #0
   2643e:	4770      	bx	lr

00026440 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26440:	6843      	ldr	r3, [r0, #4]
   26442:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   26444:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   26448:	4042      	eors	r2, r0
   2644a:	400a      	ands	r2, r1
   2644c:	4042      	eors	r2, r0
    p_reg->OUT = value;
   2644e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   26452:	2000      	movs	r0, #0
   26454:	4770      	bx	lr

00026456 <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26456:	6843      	ldr	r3, [r0, #4]
   26458:	685b      	ldr	r3, [r3, #4]
}
   2645a:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   2645c:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   26460:	4770      	bx	lr

00026462 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26462:	6843      	ldr	r3, [r0, #4]
   26464:	685b      	ldr	r3, [r3, #4]
}
   26466:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   26468:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   2646c:	4770      	bx	lr

0002646e <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   2646e:	6843      	ldr	r3, [r0, #4]
   26470:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   26472:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   26476:	404b      	eors	r3, r1
    p_reg->OUT = value;
   26478:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   2647c:	2000      	movs	r0, #0
   2647e:	4770      	bx	lr

00026480 <gpio_nrfx_manage_callback>:
	return port->data;
   26480:	68c3      	ldr	r3, [r0, #12]
	return list->head;
   26482:	6858      	ldr	r0, [r3, #4]
{
   26484:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   26486:	b158      	cbz	r0, 264a0 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   26488:	2400      	movs	r4, #0
   2648a:	4281      	cmp	r1, r0
   2648c:	d112      	bne.n	264b4 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   2648e:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   26490:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   26492:	b954      	cbnz	r4, 264aa <gpio_nrfx_manage_callback+0x2a>
   26494:	428d      	cmp	r5, r1
	list->head = node;
   26496:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   26498:	d100      	bne.n	2649c <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   2649a:	6098      	str	r0, [r3, #8]
	parent->next = child;
   2649c:	2000      	movs	r0, #0
   2649e:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   264a0:	b96a      	cbnz	r2, 264be <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   264a2:	2000      	movs	r0, #0
}
   264a4:	bd30      	pop	{r4, r5, pc}
   264a6:	4628      	mov	r0, r5
   264a8:	e7ef      	b.n	2648a <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   264aa:	428d      	cmp	r5, r1
	parent->next = child;
   264ac:	6020      	str	r0, [r4, #0]
	list->tail = node;
   264ae:	bf08      	it	eq
   264b0:	609c      	streq	r4, [r3, #8]
}
   264b2:	e7f3      	b.n	2649c <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   264b4:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   264b6:	4604      	mov	r4, r0
   264b8:	2d00      	cmp	r5, #0
   264ba:	d1f4      	bne.n	264a6 <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   264bc:	b13a      	cbz	r2, 264ce <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   264be:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   264c0:	685a      	ldr	r2, [r3, #4]
   264c2:	600a      	str	r2, [r1, #0]
	list->head = node;
   264c4:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   264c6:	2800      	cmp	r0, #0
   264c8:	d1eb      	bne.n	264a2 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   264ca:	6099      	str	r1, [r3, #8]
}
   264cc:	e7ea      	b.n	264a4 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   264ce:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   264d2:	e7e7      	b.n	264a4 <gpio_nrfx_manage_callback+0x24>

000264d4 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   264d4:	b570      	push	{r4, r5, r6, lr}
   264d6:	460e      	mov	r6, r1
   264d8:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   264da:	4601      	mov	r1, r0
   264dc:	b150      	cbz	r0, 264f4 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   264de:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   264e0:	688a      	ldr	r2, [r1, #8]
   264e2:	402a      	ands	r2, r5
   264e4:	d002      	beq.n	264ec <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   264e6:	684b      	ldr	r3, [r1, #4]
   264e8:	4630      	mov	r0, r6
   264ea:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   264ec:	b114      	cbz	r4, 264f4 <gpio_fire_callbacks.isra.0+0x20>
   264ee:	4621      	mov	r1, r4
   264f0:	6824      	ldr	r4, [r4, #0]
   264f2:	e7f5      	b.n	264e0 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   264f4:	bd70      	pop	{r4, r5, r6, pc}

000264f6 <cfg_level_pins>:
{
   264f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   264fa:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   264fc:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   26500:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   26502:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   26506:	4313      	orrs	r3, r2
   26508:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   2650c:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2650e:	2500      	movs	r5, #0
	while (level_pins) {
   26510:	b90c      	cbnz	r4, 26516 <cfg_level_pins+0x20>
}
   26512:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   26516:	4226      	tst	r6, r4
   26518:	d010      	beq.n	2653c <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2651a:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2651c:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   26520:	40e9      	lsrs	r1, r5
   26522:	f001 0101 	and.w	r1, r1, #1
   26526:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2652a:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   2652e:	b2c9      	uxtb	r1, r1
   26530:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   26534:	f7f7 f8b4 	bl	1d6a0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   26538:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2653c:	3501      	adds	r5, #1
		bit <<= 1;
   2653e:	0076      	lsls	r6, r6, #1
   26540:	e7e6      	b.n	26510 <cfg_level_pins+0x1a>

00026542 <check_level_trigger_pins>:
	return port->data;
   26542:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   26544:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   26548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   2654c:	68dc      	ldr	r4, [r3, #12]
	return port->config;
   2654e:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   26552:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   26554:	430a      	orrs	r2, r1
   26556:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   2655a:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   2655e:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   26562:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   26564:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   26568:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   2656a:	2700      	movs	r7, #0
	while (level_pins) {
   2656c:	b914      	cbnz	r4, 26574 <check_level_trigger_pins+0x32>
}
   2656e:	4628      	mov	r0, r5
   26570:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   26574:	4234      	tst	r4, r6
   26576:	d00a      	beq.n	2658e <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   26578:	f898 0008 	ldrb.w	r0, [r8, #8]
   2657c:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   26580:	2100      	movs	r1, #0
   26582:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   26586:	f7f7 f88b 	bl	1d6a0 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2658a:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   2658e:	3701      	adds	r7, #1
		bit <<= 1;
   26590:	0076      	lsls	r6, r6, #1
   26592:	e7eb      	b.n	2656c <check_level_trigger_pins+0x2a>

00026594 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   26594:	2301      	movs	r3, #1
   26596:	fa03 f101 	lsl.w	r1, r3, r1
   2659a:	68c3      	ldr	r3, [r0, #12]
   2659c:	681b      	ldr	r3, [r3, #0]
   2659e:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   265a0:	bf18      	it	ne
   265a2:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   265a6:	b112      	cbz	r2, 265ae <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   265a8:	6883      	ldr	r3, [r0, #8]
   265aa:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   265ac:	4718      	bx	r3
   265ae:	6883      	ldr	r3, [r0, #8]
   265b0:	691b      	ldr	r3, [r3, #16]
   265b2:	e7fb      	b.n	265ac <gpio_pin_set.isra.0+0x18>

000265b4 <_spi_context_cs_control>:
{
   265b4:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   265b6:	6805      	ldr	r5, [r0, #0]
{
   265b8:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   265ba:	b1fd      	cbz	r5, 265fc <_spi_context_cs_control+0x48>
   265bc:	68ab      	ldr	r3, [r5, #8]
   265be:	b1eb      	cbz	r3, 265fc <_spi_context_cs_control+0x48>
   265c0:	6818      	ldr	r0, [r3, #0]
   265c2:	b1d8      	cbz	r0, 265fc <_spi_context_cs_control+0x48>
		if (on) {
   265c4:	b151      	cbz	r1, 265dc <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   265c6:	7a19      	ldrb	r1, [r3, #8]
   265c8:	2201      	movs	r2, #1
   265ca:	f7ff ffe3 	bl	26594 <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   265ce:	6823      	ldr	r3, [r4, #0]
   265d0:	689b      	ldr	r3, [r3, #8]
   265d2:	6858      	ldr	r0, [r3, #4]
}
   265d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   265d8:	f000 bcd7 	b.w	26f8a <z_impl_k_busy_wait>
			if (!force_off &&
   265dc:	b912      	cbnz	r2, 265e4 <_spi_context_cs_control+0x30>
   265de:	88aa      	ldrh	r2, [r5, #4]
   265e0:	0492      	lsls	r2, r2, #18
   265e2:	d40b      	bmi.n	265fc <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
   265e4:	6858      	ldr	r0, [r3, #4]
   265e6:	f000 fcd0 	bl	26f8a <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   265ea:	6823      	ldr	r3, [r4, #0]
   265ec:	689b      	ldr	r3, [r3, #8]
   265ee:	2200      	movs	r2, #0
   265f0:	7a19      	ldrb	r1, [r3, #8]
   265f2:	6818      	ldr	r0, [r3, #0]
}
   265f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   265f8:	f7ff bfcc 	b.w	26594 <gpio_pin_set.isra.0>
}
   265fc:	bd38      	pop	{r3, r4, r5, pc}

000265fe <spi_context_unlock_unconditionally>:
{
   265fe:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   26600:	2201      	movs	r2, #1
   26602:	2100      	movs	r1, #0
{
   26604:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   26606:	f7ff ffd5 	bl	265b4 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2660a:	6923      	ldr	r3, [r4, #16]
   2660c:	b933      	cbnz	r3, 2661c <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   2660e:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   26610:	f104 0008 	add.w	r0, r4, #8
}
   26614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   26618:	f7f9 be72 	b.w	20300 <z_impl_k_sem_give>
   2661c:	bd10      	pop	{r4, pc}

0002661e <spi_nrfx_release>:
	return dev->data;
   2661e:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26620:	6803      	ldr	r3, [r0, #0]
   26622:	428b      	cmp	r3, r1
{
   26624:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26626:	d106      	bne.n	26636 <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   26628:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   2662c:	b934      	cbnz	r4, 2663c <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   2662e:	f7ff ffe6 	bl	265fe <spi_context_unlock_unconditionally>
	return 0;
   26632:	4620      	mov	r0, r4
}
   26634:	bd10      	pop	{r4, pc}
		return -EINVAL;
   26636:	f06f 0015 	mvn.w	r0, #21
   2663a:	e7fb      	b.n	26634 <spi_nrfx_release+0x16>
		return -EBUSY;
   2663c:	f06f 000f 	mvn.w	r0, #15
   26640:	e7f8      	b.n	26634 <spi_nrfx_release+0x16>

00026642 <flash_nrf_write_protection>:
}
   26642:	2000      	movs	r0, #0
   26644:	4770      	bx	lr

00026646 <is_regular_addr_valid>:
{
   26646:	b538      	push	{r3, r4, r5, lr}
   26648:	4604      	mov	r4, r0
   2664a:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   2664c:	f000 f92f 	bl	268ae <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   26650:	4284      	cmp	r4, r0
   26652:	d209      	bcs.n	26668 <is_regular_addr_valid+0x22>
   26654:	2c00      	cmp	r4, #0
   26656:	db07      	blt.n	26668 <is_regular_addr_valid+0x22>
	    addr < 0 ||
   26658:	42a8      	cmp	r0, r5
   2665a:	d305      	bcc.n	26668 <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   2665c:	442c      	add	r4, r5
	    len > flash_size ||
   2665e:	4284      	cmp	r4, r0
   26660:	bf8c      	ite	hi
   26662:	2000      	movhi	r0, #0
   26664:	2001      	movls	r0, #1
}
   26666:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   26668:	2000      	movs	r0, #0
   2666a:	e7fc      	b.n	26666 <is_regular_addr_valid+0x20>

0002666c <erase_op>:
{
   2666c:	b570      	push	{r4, r5, r6, lr}
   2666e:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   26670:	f000 f923 	bl	268ba <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   26674:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   26676:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   26678:	b10b      	cbz	r3, 2667e <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   2667a:	f7f7 fe3d 	bl	1e2f8 <nrf_flash_sync_get_timestamp_begin>
{
   2667e:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   26680:	6860      	ldr	r0, [r4, #4]
   26682:	f7f8 fb85 	bl	1ed90 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   26686:	68a3      	ldr	r3, [r4, #8]
   26688:	1b5b      	subs	r3, r3, r5
   2668a:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   2668c:	6863      	ldr	r3, [r4, #4]
   2668e:	442b      	add	r3, r5
   26690:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   26692:	7b23      	ldrb	r3, [r4, #12]
		i++;
   26694:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   26696:	b943      	cbnz	r3, 266aa <erase_op+0x3e>
	} while (e_ctx->len > 0);
   26698:	68a3      	ldr	r3, [r4, #8]
   2669a:	2b00      	cmp	r3, #0
   2669c:	d1f0      	bne.n	26680 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   2669e:	68a0      	ldr	r0, [r4, #8]
   266a0:	3800      	subs	r0, #0
   266a2:	bf18      	it	ne
   266a4:	2001      	movne	r0, #1
}
   266a6:	4240      	negs	r0, r0
   266a8:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   266aa:	4630      	mov	r0, r6
   266ac:	f7dc f900 	bl	28b0 <nrf_flash_sync_check_time_limit>
   266b0:	2800      	cmp	r0, #0
   266b2:	d0f1      	beq.n	26698 <erase_op+0x2c>
   266b4:	e7f3      	b.n	2669e <erase_op+0x32>

000266b6 <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   266b6:	2000      	movs	r0, #0
   266b8:	f7eb b94a 	b.w	11950 <ticker_is_initialized>

000266bc <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   266bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   266c0:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   266c2:	6883      	ldr	r3, [r0, #8]
{
   266c4:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   266c6:	695b      	ldr	r3, [r3, #20]
   266c8:	4669      	mov	r1, sp
{
   266ca:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   266cc:	aa01      	add	r2, sp, #4
   266ce:	4798      	blx	r3

	while (layout_size--) {
   266d0:	e9dd 1000 	ldrd	r1, r0, [sp]
   266d4:	2300      	movs	r3, #0
   266d6:	3801      	subs	r0, #1
	off_t end = 0;
   266d8:	461d      	mov	r5, r3
	off_t group_offs = 0;
   266da:	469e      	mov	lr, r3
	size_t page_count = 0;
   266dc:	469c      	mov	ip, r3
	while (layout_size--) {
   266de:	1c42      	adds	r2, r0, #1
   266e0:	d102      	bne.n	266e8 <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   266e2:	f06f 0015 	mvn.w	r0, #21
   266e6:	e019      	b.n	2671c <flash_get_page_info+0x60>
			end += layout->pages_count * layout->pages_size;
   266e8:	680a      	ldr	r2, [r1, #0]
		if (use_addr) {
   266ea:	b1d7      	cbz	r7, 26722 <flash_get_page_info+0x66>
			end += layout->pages_count * layout->pages_size;
   266ec:	f8d1 8004 	ldr.w	r8, [r1, #4]
   266f0:	fb08 5502 	mla	r5, r8, r2, r5
		if (offs < end) {
   266f4:	42a5      	cmp	r5, r4
   266f6:	f100 30ff 	add.w	r0, r0, #4294967295
   266fa:	dd17      	ble.n	2672c <flash_get_page_info+0x70>
   266fc:	b103      	cbz	r3, 26700 <flash_get_page_info+0x44>
   266fe:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   26700:	9b00      	ldr	r3, [sp, #0]
   26702:	685b      	ldr	r3, [r3, #4]
   26704:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   26706:	b177      	cbz	r7, 26726 <flash_get_page_info+0x6a>
				num_in_group = (offs - group_offs) /
   26708:	eba4 040e 	sub.w	r4, r4, lr
   2670c:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   26710:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   26714:	4464      	add	r4, ip
			info->start_offset = group_offs +
   26716:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   26718:	60b4      	str	r4, [r6, #8]
			return 0;
   2671a:	2000      	movs	r0, #0
}
   2671c:	b002      	add	sp, #8
   2671e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   26722:	4415      	add	r5, r2
   26724:	e7e6      	b.n	266f4 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   26726:	eba4 040c 	sub.w	r4, r4, ip
   2672a:	e7f1      	b.n	26710 <flash_get_page_info+0x54>
		group_offs += layout->pages_count * layout->pages_size;
   2672c:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   2672e:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   26730:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   26734:	3108      	adds	r1, #8
   26736:	2301      	movs	r3, #1
   26738:	e7d1      	b.n	266de <flash_get_page_info+0x22>

0002673a <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2673a:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   2673c:	2201      	movs	r2, #1
   2673e:	f7ff bfbd 	b.w	266bc <flash_get_page_info>

00026742 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   26742:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   26746:	6883      	ldr	r3, [r0, #8]
{
   26748:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   2674a:	695b      	ldr	r3, [r3, #20]
{
   2674c:	4688      	mov	r8, r1
   2674e:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   26750:	a901      	add	r1, sp, #4
   26752:	aa02      	add	r2, sp, #8
   26754:	4798      	blx	r3
	off_t off = 0;
   26756:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   26758:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   2675a:	4625      	mov	r5, r4
   2675c:	9b02      	ldr	r3, [sp, #8]
   2675e:	42ab      	cmp	r3, r5
   26760:	d802      	bhi.n	26768 <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   26762:	b006      	add	sp, #24
   26764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   26768:	9f01      	ldr	r7, [sp, #4]
   2676a:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   2676e:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   26770:	687b      	ldr	r3, [r7, #4]
   26772:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   26774:	683a      	ldr	r2, [r7, #0]
   26776:	42b2      	cmp	r2, r6
   26778:	eb0a 0306 	add.w	r3, sl, r6
   2677c:	d802      	bhi.n	26784 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   2677e:	3501      	adds	r5, #1
   26780:	469a      	mov	sl, r3
   26782:	e7eb      	b.n	2675c <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   26784:	4649      	mov	r1, r9
   26786:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   26788:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   2678a:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   2678c:	47c0      	blx	r8
   2678e:	2800      	cmp	r0, #0
   26790:	d0e7      	beq.n	26762 <flash_page_foreach+0x20>
			off += page_info.size;
   26792:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   26794:	3601      	adds	r6, #1
			off += page_info.size;
   26796:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   26798:	e7ec      	b.n	26774 <flash_page_foreach+0x32>

0002679a <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   2679a:	68c2      	ldr	r2, [r0, #12]
{
   2679c:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   2679e:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   267a2:	e883 0003 	stmia.w	r3, {r0, r1}
}
   267a6:	2000      	movs	r0, #0
   267a8:	4770      	bx	lr

000267aa <uarte_nrfx_err_check>:
	return config->uarte_regs;
   267aa:	6843      	ldr	r3, [r0, #4]
   267ac:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   267ae:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   267b2:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   267b6:	4770      	bx	lr

000267b8 <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   267b8:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   267ba:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   267bc:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   267be:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   267c2:	b148      	cbz	r0, 267d8 <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   267c4:	7c52      	ldrb	r2, [r2, #17]
   267c6:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   267c8:	2000      	movs	r0, #0
   267ca:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   267ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   267d2:	2201      	movs	r2, #1
   267d4:	601a      	str	r2, [r3, #0]
	return 0;
   267d6:	4770      	bx	lr
		return -1;
   267d8:	f04f 30ff 	mov.w	r0, #4294967295
}
   267dc:	4770      	bx	lr

000267de <is_tx_ready.isra.0>:
	return config->uarte_regs;
   267de:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   267e0:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   267e2:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   267e6:	b938      	cbnz	r0, 267f8 <is_tx_ready.isra.0+0x1a>
   267e8:	799b      	ldrb	r3, [r3, #6]
   267ea:	b933      	cbnz	r3, 267fa <is_tx_ready.isra.0+0x1c>
   267ec:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   267f0:	3800      	subs	r0, #0
   267f2:	bf18      	it	ne
   267f4:	2001      	movne	r0, #1
   267f6:	4770      	bx	lr
   267f8:	2001      	movs	r0, #1
}
   267fa:	4770      	bx	lr

000267fc <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   267fc:	6843      	ldr	r3, [r0, #4]
   267fe:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   26800:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   26804:	05d2      	lsls	r2, r2, #23
   26806:	d518      	bpl.n	2683a <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26808:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   2680c:	b1aa      	cbz	r2, 2683a <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   2680e:	f04f 0120 	mov.w	r1, #32
   26812:	f3ef 8211 	mrs	r2, BASEPRI
   26816:	f381 8811 	msr	BASEPRI, r1
   2681a:	f3bf 8f6f 	isb	sy
   2681e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26822:	b131      	cbz	r1, 26832 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26824:	2100      	movs	r1, #0
   26826:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2682a:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2682e:	2101      	movs	r1, #1
   26830:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   26832:	f382 8811 	msr	BASEPRI, r2
   26836:	f3bf 8f6f 	isb	sy
}
   2683a:	4770      	bx	lr

0002683c <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   2683c:	4700      	bx	r0

0002683e <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   2683e:	f000 bba4 	b.w	26f8a <z_impl_k_busy_wait>

00026842 <nrfx_clock_enable>:
{
   26842:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   26844:	2000      	movs	r0, #0
   26846:	f7e0 fef3 	bl	7630 <arch_irq_is_enabled>
   2684a:	b918      	cbnz	r0, 26854 <nrfx_clock_enable+0x12>
}
   2684c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   26850:	f7e0 beca 	b.w	75e8 <arch_irq_enable>
   26854:	bd08      	pop	{r3, pc}

00026856 <nrfx_clock_start>:
    switch (domain)
   26856:	b110      	cbz	r0, 2685e <nrfx_clock_start+0x8>
   26858:	2801      	cmp	r0, #1
   2685a:	d01d      	beq.n	26898 <nrfx_clock_start+0x42>
   2685c:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   2685e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26862:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   26866:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   2686a:	03c9      	lsls	r1, r1, #15
   2686c:	d512      	bpl.n	26894 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   2686e:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   26872:	2a01      	cmp	r2, #1
   26874:	d10e      	bne.n	26894 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   26876:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2687a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2687e:	2200      	movs	r2, #0
   26880:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   26884:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   26888:	2202      	movs	r2, #2
   2688a:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   2688e:	2201      	movs	r2, #1
   26890:	609a      	str	r2, [r3, #8]
}
   26892:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   26894:	2200      	movs	r2, #0
   26896:	e7ee      	b.n	26876 <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26898:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   2689c:	2200      	movs	r2, #0
   2689e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   268a2:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   268a6:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   268aa:	6018      	str	r0, [r3, #0]
}
   268ac:	4770      	bx	lr

000268ae <nrfx_nvmc_flash_size_get>:
   268ae:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   268b2:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   268b4:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   268b6:	4350      	muls	r0, r2
   268b8:	4770      	bx	lr

000268ba <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   268ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   268be:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   268c0:	4770      	bx	lr

000268c2 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   268c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   268c6:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   268c8:	4770      	bx	lr

000268ca <nrf_gpio_pin_set>:
{
   268ca:	b507      	push	{r0, r1, r2, lr}
   268cc:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   268ce:	a801      	add	r0, sp, #4
   268d0:	f7f8 fac6 	bl	1ee60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   268d4:	9a01      	ldr	r2, [sp, #4]
   268d6:	2301      	movs	r3, #1
   268d8:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   268da:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   268de:	b003      	add	sp, #12
   268e0:	f85d fb04 	ldr.w	pc, [sp], #4

000268e4 <nrf_gpio_pin_clear>:
{
   268e4:	b507      	push	{r0, r1, r2, lr}
   268e6:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   268e8:	a801      	add	r0, sp, #4
   268ea:	f7f8 fab9 	bl	1ee60 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   268ee:	9a01      	ldr	r2, [sp, #4]
   268f0:	2301      	movs	r3, #1
   268f2:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   268f4:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   268f8:	b003      	add	sp, #12
   268fa:	f85d fb04 	ldr.w	pc, [sp], #4

000268fe <transfer_byte>:
{
   268fe:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   26900:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   26904:	698a      	ldr	r2, [r1, #24]
   26906:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   26908:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   2690c:	6a0b      	ldr	r3, [r1, #32]
   2690e:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   26910:	bf3e      	ittt	cc
   26912:	694a      	ldrcc	r2, [r1, #20]
   26914:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   26918:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   2691a:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   2691c:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   26920:	1c53      	adds	r3, r2, #1
   26922:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   26924:	3202      	adds	r2, #2
    if (p_cb->abort)
   26926:	b13c      	cbz	r4, 26938 <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   26928:	690c      	ldr	r4, [r1, #16]
   2692a:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2692c:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   2692e:	bf38      	it	cc
   26930:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   26932:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   26934:	bf88      	it	hi
   26936:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   26938:	690d      	ldr	r5, [r1, #16]
   2693a:	4295      	cmp	r5, r2
   2693c:	d905      	bls.n	2694a <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   2693e:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   26940:	5c9b      	ldrb	r3, [r3, r2]
   26942:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   26946:	2001      	movs	r0, #1
   26948:	e00a      	b.n	26960 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   2694a:	698c      	ldr	r4, [r1, #24]
   2694c:	4294      	cmp	r4, r2
   2694e:	d901      	bls.n	26954 <transfer_byte+0x56>
   26950:	7fcb      	ldrb	r3, [r1, #31]
   26952:	e7f6      	b.n	26942 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   26954:	42ab      	cmp	r3, r5
   26956:	d3f6      	bcc.n	26946 <transfer_byte+0x48>
   26958:	42a3      	cmp	r3, r4
   2695a:	bf2c      	ite	cs
   2695c:	2000      	movcs	r0, #0
   2695e:	2001      	movcc	r0, #1
}
   26960:	b003      	add	sp, #12
   26962:	bd30      	pop	{r4, r5, pc}

00026964 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26964:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   26966:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26968:	6b48      	ldr	r0, [r1, #52]	; 0x34
   2696a:	4298      	cmp	r0, r3
{
   2696c:	b510      	push	{r4, lr}
   2696e:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26972:	d205      	bcs.n	26980 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   26974:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   26976:	5c09      	ldrb	r1, [r1, r0]
   26978:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   2697c:	4618      	mov	r0, r3
}
   2697e:	e004      	b.n	2698a <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   26980:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   26984:	b110      	cbz	r0, 2698c <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26986:	61d3      	str	r3, [r2, #28]
            return false;
   26988:	2000      	movs	r0, #0
}
   2698a:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   2698c:	6a0c      	ldr	r4, [r1, #32]
   2698e:	0664      	lsls	r4, r4, #25
   26990:	d503      	bpl.n	2699a <twi_send_byte+0x36>
   26992:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   26994:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   26998:	e7f7      	b.n	2698a <twi_send_byte+0x26>
   2699a:	6153      	str	r3, [r2, #20]
   2699c:	e7ee      	b.n	2697c <twi_send_byte+0x18>

0002699e <twi_transfer>:
{
   2699e:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   269a0:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   269a4:	4604      	mov	r4, r0
   269a6:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   269a8:	b12e      	cbz	r6, 269b6 <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   269aa:	2300      	movs	r3, #0
   269ac:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   269b0:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   269b4:	2601      	movs	r6, #1
    if (p_cb->error)
   269b6:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   269ba:	b320      	cbz	r0, 26a06 <twi_transfer+0x68>
   269bc:	2300      	movs	r3, #0
   269be:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   269c2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   269c6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   269ca:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   269ce:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   269d2:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   269d6:	2e00      	cmp	r6, #0
   269d8:	d068      	beq.n	26aac <twi_transfer+0x10e>
        if (!p_cb->error)
   269da:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   269de:	2300      	movs	r3, #0
   269e0:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   269e4:	bb88      	cbnz	r0, 26a4a <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   269e6:	6aab      	ldr	r3, [r5, #40]	; 0x28
   269e8:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   269ea:	429a      	cmp	r2, r3
        return false;
   269ec:	bf1c      	itt	ne
   269ee:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   269f0:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   269f2:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   269f6:	bf1c      	itt	ne
   269f8:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   269fc:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   26a00:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   26a04:	e022      	b.n	26a4c <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26a06:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   26a0a:	b142      	cbz	r2, 26a1e <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a0c:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   26a10:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a14:	2301      	movs	r3, #1
   26a16:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   26a18:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   26a1c:	e7db      	b.n	269d6 <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26a1e:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   26a22:	b1a3      	cbz	r3, 26a4e <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a24:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   26a28:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   26a2c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26a2e:	3301      	adds	r3, #1
   26a30:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26a32:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   26a36:	b113      	cbz	r3, 26a3e <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a38:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   26a3c:	e7e8      	b.n	26a10 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   26a3e:	4629      	mov	r1, r5
   26a40:	4620      	mov	r0, r4
   26a42:	f7ff ff8f 	bl	26964 <twi_send_byte>
   26a46:	2800      	cmp	r0, #0
   26a48:	d1c5      	bne.n	269d6 <twi_transfer+0x38>
                    return false;
   26a4a:	2000      	movs	r0, #0
}
   26a4c:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26a4e:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   26a52:	2a00      	cmp	r2, #0
   26a54:	d0bf      	beq.n	269d6 <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a56:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   26a5a:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26a5e:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   26a62:	b112      	cbz	r2, 26a6a <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26a64:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   26a68:	e7d2      	b.n	26a10 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26a6a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26a6c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   26a6e:	4293      	cmp	r3, r2
   26a70:	d2b1      	bcs.n	269d6 <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   26a72:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   26a74:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   26a78:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   26a7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26a7c:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   26a7e:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26a80:	1e51      	subs	r1, r2, #1
   26a82:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   26a84:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26a86:	d108      	bne.n	26a9a <twi_transfer+0xfc>
   26a88:	6a29      	ldr	r1, [r5, #32]
   26a8a:	0649      	lsls	r1, r1, #25
   26a8c:	d410      	bmi.n	26ab0 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   26a8e:	2302      	movs	r3, #2
   26a90:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a94:	2301      	movs	r3, #1
   26a96:	6223      	str	r3, [r4, #32]
   26a98:	e79d      	b.n	269d6 <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26a9a:	4293      	cmp	r3, r2
   26a9c:	d1fa      	bne.n	26a94 <twi_transfer+0xf6>
   26a9e:	6a2b      	ldr	r3, [r5, #32]
   26aa0:	065b      	lsls	r3, r3, #25
   26aa2:	d598      	bpl.n	269d6 <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   26aa4:	2302      	movs	r3, #2
   26aa6:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   26aaa:	e7cf      	b.n	26a4c <twi_transfer+0xae>
    return true;
   26aac:	2001      	movs	r0, #1
   26aae:	e7cd      	b.n	26a4c <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26ab0:	4293      	cmp	r3, r2
   26ab2:	d1ef      	bne.n	26a94 <twi_transfer+0xf6>
   26ab4:	e7f6      	b.n	26aa4 <twi_transfer+0x106>

00026ab6 <arch_system_halt>:
	__asm__ volatile(
   26ab6:	f04f 0220 	mov.w	r2, #32
   26aba:	f3ef 8311 	mrs	r3, BASEPRI
   26abe:	f382 8811 	msr	BASEPRI, r2
   26ac2:	f3bf 8f6f 	isb	sy
	for (;;) {
   26ac6:	e7fe      	b.n	26ac6 <arch_system_halt+0x10>

00026ac8 <k_heap_init>:
{
   26ac8:	b410      	push	{r4}
   26aca:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26ace:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26ad2:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   26ad4:	f7fb baea 	b.w	220ac <sys_heap_init>

00026ad8 <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   26ad8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26adc:	b085      	sub	sp, #20
   26ade:	4606      	mov	r6, r0
   26ae0:	4688      	mov	r8, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   26ae2:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   26ae6:	4691      	mov	r9, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   26ae8:	f000 fb16 	bl	27118 <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   26aec:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   26af0:	4605      	mov	r5, r0
   26af2:	460f      	mov	r7, r1
   26af4:	f04f 0320 	mov.w	r3, #32
   26af8:	f3ef 8411 	mrs	r4, BASEPRI
   26afc:	f383 8811 	msr	BASEPRI, r3
   26b00:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   26b04:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   26b08:	464a      	mov	r2, r9
   26b0a:	4641      	mov	r1, r8
   26b0c:	4630      	mov	r0, r6
   26b0e:	f7fb fa52 	bl	21fb6 <sys_heap_aligned_alloc>
   26b12:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   26b14:	f7f9 fedc 	bl	208d0 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   26b18:	9b03      	ldr	r3, [sp, #12]
   26b1a:	b13b      	cbz	r3, 26b2c <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   26b1c:	f384 8811 	msr	BASEPRI, r4
   26b20:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   26b24:	4618      	mov	r0, r3
   26b26:	b005      	add	sp, #20
   26b28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   26b2c:	1a28      	subs	r0, r5, r0
   26b2e:	eb67 0101 	sbc.w	r1, r7, r1
   26b32:	2801      	cmp	r0, #1
   26b34:	f171 0200 	sbcs.w	r2, r1, #0
   26b38:	dbf0      	blt.n	26b1c <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   26b3a:	e9cd 0100 	strd	r0, r1, [sp]
   26b3e:	465a      	mov	r2, fp
   26b40:	4621      	mov	r1, r4
   26b42:	4650      	mov	r0, sl
   26b44:	f7f9 fad4 	bl	200f0 <z_pend_curr>
	__asm__ volatile(
   26b48:	f04f 0320 	mov.w	r3, #32
   26b4c:	f3ef 8411 	mrs	r4, BASEPRI
   26b50:	f383 8811 	msr	BASEPRI, r3
   26b54:	f3bf 8f6f 	isb	sy
   26b58:	e7d6      	b.n	26b08 <k_heap_aligned_alloc+0x30>

00026b5a <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   26b5a:	b538      	push	{r3, r4, r5, lr}
   26b5c:	4604      	mov	r4, r0
   26b5e:	f04f 0320 	mov.w	r3, #32
   26b62:	f3ef 8511 	mrs	r5, BASEPRI
   26b66:	f383 8811 	msr	BASEPRI, r3
   26b6a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   26b6e:	f7fb f9d5 	bl	21f1c <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   26b72:	f104 000c 	add.w	r0, r4, #12
   26b76:	f000 f9e2 	bl	26f3e <z_unpend_all>
   26b7a:	b130      	cbz	r0, 26b8a <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   26b7c:	4629      	mov	r1, r5
   26b7e:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   26b82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   26b86:	f7f9 b873 	b.w	1fc70 <z_reschedule>
	__asm__ volatile(
   26b8a:	f385 8811 	msr	BASEPRI, r5
   26b8e:	f3bf 8f6f 	isb	sy
}
   26b92:	bd38      	pop	{r3, r4, r5, pc}

00026b94 <k_mem_slab_init>:
{
   26b94:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   26b96:	2400      	movs	r4, #0
   26b98:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26b9a:	ea41 0402 	orr.w	r4, r1, r2
   26b9e:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   26ba2:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   26ba6:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26ba8:	d10c      	bne.n	26bc4 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   26baa:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26bac:	42a3      	cmp	r3, r4
   26bae:	d103      	bne.n	26bb8 <k_mem_slab_init+0x24>
   26bb0:	e9c0 0000 	strd	r0, r0, [r0]
}
   26bb4:	2000      	movs	r0, #0
}
   26bb6:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   26bb8:	6945      	ldr	r5, [r0, #20]
   26bba:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   26bbc:	3401      	adds	r4, #1
		slab->free_list = p;
   26bbe:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   26bc0:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   26bc2:	e7f3      	b.n	26bac <k_mem_slab_init+0x18>
		return -EINVAL;
   26bc4:	f06f 0015 	mvn.w	r0, #21
	return rc;
   26bc8:	e7f5      	b.n	26bb6 <k_mem_slab_init+0x22>

00026bca <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26bca:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26bce:	428b      	cmp	r3, r1
   26bd0:	d001      	beq.n	26bd6 <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   26bd2:	f7f9 baa1 	b.w	20118 <z_set_prio>
}
   26bd6:	2000      	movs	r0, #0
   26bd8:	4770      	bx	lr

00026bda <z_impl_k_mutex_init>:
{
   26bda:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26bdc:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26bde:	e9c3 0002 	strd	r0, r0, [r3, #8]
   26be2:	e9c3 3300 	strd	r3, r3, [r3]
}
   26be6:	4770      	bx	lr

00026be8 <queue_insert>:
{
   26be8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26bec:	4699      	mov	r9, r3
   26bee:	4604      	mov	r4, r0
   26bf0:	f89d 3020 	ldrb.w	r3, [sp, #32]
   26bf4:	460d      	mov	r5, r1
   26bf6:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26bf8:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26bfc:	f04f 0220 	mov.w	r2, #32
   26c00:	f3ef 8711 	mrs	r7, BASEPRI
   26c04:	f382 8811 	msr	BASEPRI, r2
   26c08:	f3bf 8f6f 	isb	sy
	if (is_append) {
   26c0c:	b103      	cbz	r3, 26c10 <queue_insert+0x28>
	return list->tail;
   26c0e:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26c10:	4630      	mov	r0, r6
   26c12:	f000 f97b 	bl	26f0c <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   26c16:	b160      	cbz	r0, 26c32 <queue_insert+0x4a>
   26c18:	2400      	movs	r4, #0
   26c1a:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   26c1e:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   26c22:	f000 f906 	bl	26e32 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   26c26:	4630      	mov	r0, r6
   26c28:	4639      	mov	r1, r7
   26c2a:	f7f9 f821 	bl	1fc70 <z_reschedule>
	return 0;
   26c2e:	2000      	movs	r0, #0
   26c30:	e00c      	b.n	26c4c <queue_insert+0x64>
	if (alloc) {
   26c32:	f1b9 0f00 	cmp.w	r9, #0
   26c36:	d01b      	beq.n	26c70 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   26c38:	2108      	movs	r1, #8
   26c3a:	f7f9 ff57 	bl	20aec <z_thread_aligned_alloc>
		if (anode == NULL) {
   26c3e:	b938      	cbnz	r0, 26c50 <queue_insert+0x68>
	__asm__ volatile(
   26c40:	f387 8811 	msr	BASEPRI, r7
   26c44:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   26c48:	f06f 000b 	mvn.w	r0, #11
}
   26c4c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   26c50:	2301      	movs	r3, #1
		anode->data = data;
   26c52:	f8c0 8004 	str.w	r8, [r0, #4]
   26c56:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26c58:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26c5a:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   26c5e:	b95d      	cbnz	r5, 26c78 <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26c60:	6823      	ldr	r3, [r4, #0]
   26c62:	4313      	orrs	r3, r2
   26c64:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26c66:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   26c68:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26c6a:	b973      	cbnz	r3, 26c8a <queue_insert+0xa2>
	list->tail = node;
   26c6c:	6060      	str	r0, [r4, #4]
}
   26c6e:	e00c      	b.n	26c8a <queue_insert+0xa2>
	node->next_and_flags = flags;
   26c70:	f8c8 9000 	str.w	r9, [r8]
}
   26c74:	4640      	mov	r0, r8
   26c76:	e7ef      	b.n	26c58 <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26c78:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   26c7a:	f033 0303 	bics.w	r3, r3, #3
   26c7e:	d110      	bne.n	26ca2 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26c80:	6002      	str	r2, [r0, #0]
	return list->tail;
   26c82:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   26c84:	b93a      	cbnz	r2, 26c96 <queue_insert+0xae>
	list->head = node;
   26c86:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   26c8a:	2104      	movs	r1, #4
   26c8c:	f104 0010 	add.w	r0, r4, #16
   26c90:	f000 fbd7 	bl	27442 <z_handle_obj_poll_events>
   26c94:	e7c7      	b.n	26c26 <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26c96:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26c98:	f003 0303 	and.w	r3, r3, #3
   26c9c:	4303      	orrs	r3, r0
   26c9e:	6013      	str	r3, [r2, #0]
   26ca0:	e7e4      	b.n	26c6c <queue_insert+0x84>
   26ca2:	4313      	orrs	r3, r2
   26ca4:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26ca6:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26ca8:	f003 0303 	and.w	r3, r3, #3
   26cac:	4303      	orrs	r3, r0
   26cae:	602b      	str	r3, [r5, #0]
}
   26cb0:	e7eb      	b.n	26c8a <queue_insert+0xa2>

00026cb2 <z_queue_node_peek>:
{
   26cb2:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26cb4:	4604      	mov	r4, r0
   26cb6:	b130      	cbz	r0, 26cc6 <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26cb8:	6802      	ldr	r2, [r0, #0]
   26cba:	0793      	lsls	r3, r2, #30
   26cbc:	d003      	beq.n	26cc6 <z_queue_node_peek+0x14>
		ret = anode->data;
   26cbe:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26cc0:	b109      	cbz	r1, 26cc6 <z_queue_node_peek+0x14>
			k_free(anode);
   26cc2:	f000 fbcc 	bl	2745e <k_free>
}
   26cc6:	4620      	mov	r0, r4
   26cc8:	bd10      	pop	{r4, pc}

00026cca <z_impl_k_queue_init>:
	list->head = NULL;
   26cca:	2300      	movs	r3, #0
	list->tail = NULL;
   26ccc:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   26cd0:	f100 0308 	add.w	r3, r0, #8
   26cd4:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   26cd8:	f100 0310 	add.w	r3, r0, #16
   26cdc:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   26ce0:	4770      	bx	lr

00026ce2 <k_queue_append>:
{
   26ce2:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   26ce4:	2301      	movs	r3, #1
   26ce6:	9300      	str	r3, [sp, #0]
   26ce8:	2300      	movs	r3, #0
{
   26cea:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26cec:	4619      	mov	r1, r3
   26cee:	f7ff ff7b 	bl	26be8 <queue_insert>
}
   26cf2:	b003      	add	sp, #12
   26cf4:	f85d fb04 	ldr.w	pc, [sp], #4

00026cf8 <k_queue_prepend>:
{
   26cf8:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26cfa:	2300      	movs	r3, #0
{
   26cfc:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26cfe:	9300      	str	r3, [sp, #0]
   26d00:	4619      	mov	r1, r3
   26d02:	f7ff ff71 	bl	26be8 <queue_insert>
}
   26d06:	b003      	add	sp, #12
   26d08:	f85d fb04 	ldr.w	pc, [sp], #4

00026d0c <k_queue_append_list>:
{
   26d0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26d10:	4605      	mov	r5, r0
   26d12:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   26d14:	460c      	mov	r4, r1
   26d16:	b391      	cbz	r1, 26d7e <k_queue_append_list+0x72>
   26d18:	b38a      	cbz	r2, 26d7e <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26d1a:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   26d1e:	f04f 0320 	mov.w	r3, #32
   26d22:	f3ef 8811 	mrs	r8, BASEPRI
   26d26:	f383 8811 	msr	BASEPRI, r3
   26d2a:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   26d2e:	4638      	mov	r0, r7
   26d30:	f000 f8ec 	bl	26f0c <z_unpend_first_thread>
   26d34:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   26d38:	b920      	cbnz	r0, 26d44 <k_queue_append_list+0x38>
	return list->tail;
   26d3a:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   26d3c:	b9ca      	cbnz	r2, 26d72 <k_queue_append_list+0x66>
	list->head = node;
   26d3e:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26d40:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   26d42:	e00a      	b.n	26d5a <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   26d44:	6144      	str	r4, [r0, #20]
   26d46:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   26d4a:	f000 f872 	bl	26e32 <z_ready_thread>
		head = *(void **)head;
   26d4e:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   26d50:	4638      	mov	r0, r7
   26d52:	f000 f8db 	bl	26f0c <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   26d56:	2c00      	cmp	r4, #0
   26d58:	d1ee      	bne.n	26d38 <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   26d5a:	2104      	movs	r1, #4
   26d5c:	f105 0010 	add.w	r0, r5, #16
   26d60:	f000 fb6f 	bl	27442 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   26d64:	4638      	mov	r0, r7
   26d66:	4641      	mov	r1, r8
   26d68:	f7f8 ff82 	bl	1fc70 <z_reschedule>
	return 0;
   26d6c:	2000      	movs	r0, #0
}
   26d6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26d72:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26d74:	f003 0303 	and.w	r3, r3, #3
   26d78:	431c      	orrs	r4, r3
   26d7a:	6014      	str	r4, [r2, #0]
}
   26d7c:	e7e0      	b.n	26d40 <k_queue_append_list+0x34>
		return -EINVAL;
   26d7e:	f06f 0015 	mvn.w	r0, #21
   26d82:	e7f4      	b.n	26d6e <k_queue_append_list+0x62>

00026d84 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   26d84:	f990 000e 	ldrsb.w	r0, [r0, #14]
   26d88:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   26d8c:	4298      	cmp	r0, r3
   26d8e:	bfac      	ite	ge
   26d90:	2000      	movge	r0, #0
   26d92:	2001      	movlt	r0, #1
   26d94:	4770      	bx	lr

00026d96 <z_unpend_thread_no_timeout>:
{
   26d96:	b510      	push	{r4, lr}
   26d98:	f04f 0320 	mov.w	r3, #32
   26d9c:	f3ef 8411 	mrs	r4, BASEPRI
   26da0:	f383 8811 	msr	BASEPRI, r3
   26da4:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26da8:	f000 f81b 	bl	26de2 <unpend_thread_no_timeout>
	__asm__ volatile(
   26dac:	f384 8811 	msr	BASEPRI, r4
   26db0:	f3bf 8f6f 	isb	sy
}
   26db4:	bd10      	pop	{r4, pc}

00026db6 <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26db6:	4603      	mov	r3, r0
   26db8:	b920      	cbnz	r0, 26dc4 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26dba:	f3ef 8205 	mrs	r2, IPSR
   26dbe:	b90a      	cbnz	r2, 26dc4 <z_reschedule_irqlock+0xe>
   26dc0:	f7e0 bbbc 	b.w	753c <arch_swap>
   26dc4:	f383 8811 	msr	BASEPRI, r3
   26dc8:	f3bf 8f6f 	isb	sy
}
   26dcc:	4770      	bx	lr

00026dce <z_reschedule_unlocked>:
	__asm__ volatile(
   26dce:	f04f 0320 	mov.w	r3, #32
   26dd2:	f3ef 8011 	mrs	r0, BASEPRI
   26dd6:	f383 8811 	msr	BASEPRI, r3
   26dda:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26dde:	f7ff bfea 	b.w	26db6 <z_reschedule_irqlock>

00026de2 <unpend_thread_no_timeout>:
{
   26de2:	4601      	mov	r1, r0
   26de4:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   26de6:	6880      	ldr	r0, [r0, #8]
   26de8:	f7f8 ff68 	bl	1fcbc <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26dec:	7b4b      	ldrb	r3, [r1, #13]
   26dee:	f023 0302 	bic.w	r3, r3, #2
   26df2:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   26df4:	2300      	movs	r3, #0
   26df6:	608b      	str	r3, [r1, #8]
}
   26df8:	bd08      	pop	{r3, pc}

00026dfa <z_unpend_thread>:
{
   26dfa:	b538      	push	{r3, r4, r5, lr}
   26dfc:	4604      	mov	r4, r0
   26dfe:	f04f 0320 	mov.w	r3, #32
   26e02:	f3ef 8511 	mrs	r5, BASEPRI
   26e06:	f383 8811 	msr	BASEPRI, r3
   26e0a:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26e0e:	f7ff ffe8 	bl	26de2 <unpend_thread_no_timeout>
	__asm__ volatile(
   26e12:	f385 8811 	msr	BASEPRI, r5
   26e16:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   26e1a:	f104 0018 	add.w	r0, r4, #24
}
   26e1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26e22:	f000 b933 	b.w	2708c <z_abort_timeout>

00026e26 <z_priq_dumb_best>:
{
   26e26:	4603      	mov	r3, r0
	return list->head == list;
   26e28:	6800      	ldr	r0, [r0, #0]
}
   26e2a:	4283      	cmp	r3, r0
   26e2c:	bf08      	it	eq
   26e2e:	2000      	moveq	r0, #0
   26e30:	4770      	bx	lr

00026e32 <z_ready_thread>:
{
   26e32:	b510      	push	{r4, lr}
	__asm__ volatile(
   26e34:	f04f 0320 	mov.w	r3, #32
   26e38:	f3ef 8411 	mrs	r4, BASEPRI
   26e3c:	f383 8811 	msr	BASEPRI, r3
   26e40:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   26e44:	f7f8 ff94 	bl	1fd70 <ready_thread>
	__asm__ volatile(
   26e48:	f384 8811 	msr	BASEPRI, r4
   26e4c:	f3bf 8f6f 	isb	sy
}
   26e50:	bd10      	pop	{r4, pc}

00026e52 <z_thread_timeout>:
{
   26e52:	b570      	push	{r4, r5, r6, lr}
   26e54:	4604      	mov	r4, r0
	__asm__ volatile(
   26e56:	f04f 0320 	mov.w	r3, #32
   26e5a:	f3ef 8611 	mrs	r6, BASEPRI
   26e5e:	f383 8811 	msr	BASEPRI, r3
   26e62:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   26e66:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   26e6a:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   26e6e:	b113      	cbz	r3, 26e76 <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   26e70:	4628      	mov	r0, r5
   26e72:	f7ff ffb6 	bl	26de2 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26e76:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26e7a:	f023 0314 	bic.w	r3, r3, #20
   26e7e:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   26e82:	4628      	mov	r0, r5
   26e84:	f7f8 ff74 	bl	1fd70 <ready_thread>
	__asm__ volatile(
   26e88:	f386 8811 	msr	BASEPRI, r6
   26e8c:	f3bf 8f6f 	isb	sy
}
   26e90:	bd70      	pop	{r4, r5, r6, pc}

00026e92 <add_to_waitq_locked>:
{
   26e92:	b538      	push	{r3, r4, r5, lr}
   26e94:	4604      	mov	r4, r0
   26e96:	460d      	mov	r5, r1
	unready_thread(thread);
   26e98:	f7f9 f8ea 	bl	20070 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   26e9c:	7b63      	ldrb	r3, [r4, #13]
   26e9e:	f043 0302 	orr.w	r3, r3, #2
   26ea2:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   26ea4:	b17d      	cbz	r5, 26ec6 <add_to_waitq_locked+0x34>
   26ea6:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   26ea8:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26eaa:	429d      	cmp	r5, r3
   26eac:	d012      	beq.n	26ed4 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26eae:	b18b      	cbz	r3, 26ed4 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   26eb0:	f994 200e 	ldrsb.w	r2, [r4, #14]
   26eb4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   26eb8:	4291      	cmp	r1, r2
   26eba:	dd05      	ble.n	26ec8 <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   26ebc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   26ebe:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   26ec2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   26ec4:	605c      	str	r4, [r3, #4]
}
   26ec6:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   26ec8:	6869      	ldr	r1, [r5, #4]
   26eca:	428b      	cmp	r3, r1
   26ecc:	d002      	beq.n	26ed4 <add_to_waitq_locked+0x42>
   26ece:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   26ed0:	2b00      	cmp	r3, #0
   26ed2:	d1ef      	bne.n	26eb4 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   26ed4:	686b      	ldr	r3, [r5, #4]
   26ed6:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   26ed8:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   26eda:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   26edc:	601c      	str	r4, [r3, #0]
	list->tail = node;
   26ede:	606c      	str	r4, [r5, #4]
}
   26ee0:	e7f1      	b.n	26ec6 <add_to_waitq_locked+0x34>

00026ee2 <z_unpend1_no_timeout>:
{
   26ee2:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26ee4:	f04f 0320 	mov.w	r3, #32
   26ee8:	f3ef 8511 	mrs	r5, BASEPRI
   26eec:	f383 8811 	msr	BASEPRI, r3
   26ef0:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   26ef4:	f7ff ff97 	bl	26e26 <z_priq_dumb_best>
		if (thread != NULL) {
   26ef8:	4604      	mov	r4, r0
   26efa:	b108      	cbz	r0, 26f00 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   26efc:	f7ff ff71 	bl	26de2 <unpend_thread_no_timeout>
	__asm__ volatile(
   26f00:	f385 8811 	msr	BASEPRI, r5
   26f04:	f3bf 8f6f 	isb	sy
}
   26f08:	4620      	mov	r0, r4
   26f0a:	bd38      	pop	{r3, r4, r5, pc}

00026f0c <z_unpend_first_thread>:
{
   26f0c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   26f0e:	f04f 0320 	mov.w	r3, #32
   26f12:	f3ef 8511 	mrs	r5, BASEPRI
   26f16:	f383 8811 	msr	BASEPRI, r3
   26f1a:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   26f1e:	f7ff ff82 	bl	26e26 <z_priq_dumb_best>
		if (thread != NULL) {
   26f22:	4604      	mov	r4, r0
   26f24:	b128      	cbz	r0, 26f32 <z_unpend_first_thread+0x26>
			unpend_thread_no_timeout(thread);
   26f26:	f7ff ff5c 	bl	26de2 <unpend_thread_no_timeout>
   26f2a:	f104 0018 	add.w	r0, r4, #24
   26f2e:	f000 f8ad 	bl	2708c <z_abort_timeout>
	__asm__ volatile(
   26f32:	f385 8811 	msr	BASEPRI, r5
   26f36:	f3bf 8f6f 	isb	sy
}
   26f3a:	4620      	mov	r0, r4
   26f3c:	bd38      	pop	{r3, r4, r5, pc}

00026f3e <z_unpend_all>:
{
   26f3e:	b538      	push	{r3, r4, r5, lr}
   26f40:	4605      	mov	r5, r0
	int need_sched = 0;
   26f42:	2000      	movs	r0, #0
	return list->head == list;
   26f44:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   26f46:	42a5      	cmp	r5, r4
   26f48:	d000      	beq.n	26f4c <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   26f4a:	b904      	cbnz	r4, 26f4e <z_unpend_all+0x10>
}
   26f4c:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   26f4e:	4620      	mov	r0, r4
   26f50:	f7ff ff53 	bl	26dfa <z_unpend_thread>
		z_ready_thread(thread);
   26f54:	4620      	mov	r0, r4
   26f56:	f7ff ff6c 	bl	26e32 <z_ready_thread>
		need_sched = 1;
   26f5a:	2001      	movs	r0, #1
   26f5c:	e7f2      	b.n	26f44 <z_unpend_all+0x6>

00026f5e <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   26f5e:	b15a      	cbz	r2, 26f78 <z_impl_k_sem_init+0x1a>
   26f60:	428a      	cmp	r2, r1
   26f62:	d309      	bcc.n	26f78 <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   26f64:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   26f68:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   26f6c:	e9c0 0000 	strd	r0, r0, [r0]
   26f70:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   26f74:	2000      	movs	r0, #0
   26f76:	4770      	bx	lr
		return -EINVAL;
   26f78:	f06f 0015 	mvn.w	r0, #21
}
   26f7c:	4770      	bx	lr

00026f7e <k_is_in_isr>:
   26f7e:	f3ef 8005 	mrs	r0, IPSR
}
   26f82:	3800      	subs	r0, #0
   26f84:	bf18      	it	ne
   26f86:	2001      	movne	r0, #1
   26f88:	4770      	bx	lr

00026f8a <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   26f8a:	b108      	cbz	r0, 26f90 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   26f8c:	f7e1 b820 	b.w	7fd0 <arch_busy_wait>
}
   26f90:	4770      	bx	lr

00026f92 <z_impl_k_thread_name_set>:
}
   26f92:	f06f 0046 	mvn.w	r0, #70	; 0x46
   26f96:	4770      	bx	lr

00026f98 <k_thread_name_get>:
}
   26f98:	2000      	movs	r0, #0
   26f9a:	4770      	bx	lr

00026f9c <k_work_submit_to_queue>:
{
   26f9c:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   26f9e:	f101 0308 	add.w	r3, r1, #8
   26fa2:	f3bf 8f5b 	dmb	ish
   26fa6:	e853 2f00 	ldrex	r2, [r3]
   26faa:	f042 0c01 	orr.w	ip, r2, #1
   26fae:	e843 ce00 	strex	lr, ip, [r3]
   26fb2:	f1be 0f00 	cmp.w	lr, #0
   26fb6:	d1f6      	bne.n	26fa6 <k_work_submit_to_queue+0xa>
   26fb8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   26fbc:	07d3      	lsls	r3, r2, #31
   26fbe:	d403      	bmi.n	26fc8 <k_work_submit_to_queue+0x2c>
}
   26fc0:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   26fc4:	f7ff be8d 	b.w	26ce2 <k_queue_append>
}
   26fc8:	f85d fb04 	ldr.w	pc, [sp], #4

00026fcc <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   26fcc:	f1a0 0110 	sub.w	r1, r0, #16
   26fd0:	6980      	ldr	r0, [r0, #24]
   26fd2:	f7ff bfe3 	b.w	26f9c <k_work_submit_to_queue>

00026fd6 <work_cancel>:
{
   26fd6:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   26fd8:	f3bf 8f5b 	dmb	ish
   26fdc:	6883      	ldr	r3, [r0, #8]
   26fde:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   26fe2:	07db      	lsls	r3, r3, #31
{
   26fe4:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   26fe6:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   26fea:	d532      	bpl.n	27052 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   26fec:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   26fee:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   26ff0:	2100      	movs	r1, #0
   26ff2:	b913      	cbnz	r3, 26ffa <work_cancel+0x24>
			return -EINVAL;
   26ff4:	f06f 0015 	mvn.w	r0, #21
}
   26ff8:	bd70      	pop	{r4, r5, r6, pc}
   26ffa:	429c      	cmp	r4, r3
   26ffc:	d124      	bne.n	27048 <work_cancel+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26ffe:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   27000:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27002:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   27006:	b9b1      	cbnz	r1, 27036 <work_cancel+0x60>
   27008:	42b4      	cmp	r4, r6
	list->head = node;
   2700a:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   2700c:	d100      	bne.n	27010 <work_cancel+0x3a>
	list->tail = node;
   2700e:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27010:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27012:	f003 0303 	and.w	r3, r3, #3
   27016:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   27018:	2000      	movs	r0, #0
   2701a:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2701c:	f3bf 8f5b 	dmb	ish
   27020:	e855 3f00 	ldrex	r3, [r5]
   27024:	f023 0301 	bic.w	r3, r3, #1
   27028:	e845 3200 	strex	r2, r3, [r5]
   2702c:	2a00      	cmp	r2, #0
   2702e:	d1f7      	bne.n	27020 <work_cancel+0x4a>
   27030:	f3bf 8f5b 	dmb	ish
   27034:	e7e0      	b.n	26ff8 <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27036:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27038:	f003 0303 	and.w	r3, r3, #3
   2703c:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   2703e:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   27040:	600b      	str	r3, [r1, #0]
	list->tail = node;
   27042:	bf08      	it	eq
   27044:	6051      	streq	r1, [r2, #4]
}
   27046:	e7e3      	b.n	27010 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27048:	6818      	ldr	r0, [r3, #0]
   2704a:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   2704c:	f020 0303 	bic.w	r3, r0, #3
   27050:	e7cf      	b.n	26ff2 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   27052:	3010      	adds	r0, #16
   27054:	f000 f81a 	bl	2708c <z_abort_timeout>
		if (err) {
   27058:	2800      	cmp	r0, #0
   2705a:	d0dd      	beq.n	27018 <work_cancel+0x42>
			return -EALREADY;
   2705c:	f06f 0044 	mvn.w	r0, #68	; 0x44
   27060:	e7ca      	b.n	26ff8 <work_cancel+0x22>

00027062 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   27062:	b510      	push	{r4, lr}
	__asm__ volatile(
   27064:	f04f 0220 	mov.w	r2, #32
   27068:	f3ef 8411 	mrs	r4, BASEPRI
   2706c:	f382 8811 	msr	BASEPRI, r2
   27070:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   27074:	6a83      	ldr	r3, [r0, #40]	; 0x28
   27076:	b133      	cbz	r3, 27086 <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   27078:	f7ff ffad 	bl	26fd6 <work_cancel>
	__asm__ volatile(
   2707c:	f384 8811 	msr	BASEPRI, r4
   27080:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   27084:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27086:	f06f 0015 	mvn.w	r0, #21
   2708a:	e7f7      	b.n	2707c <k_delayed_work_cancel+0x1a>

0002708c <z_abort_timeout>:
{
   2708c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2708e:	f04f 0220 	mov.w	r2, #32
   27092:	f3ef 8411 	mrs	r4, BASEPRI
   27096:	f382 8811 	msr	BASEPRI, r2
   2709a:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   2709e:	6803      	ldr	r3, [r0, #0]
   270a0:	b13b      	cbz	r3, 270b2 <z_abort_timeout+0x26>
			remove_timeout(to);
   270a2:	f7f9 fb1f 	bl	206e4 <remove_timeout>
			ret = 0;
   270a6:	2000      	movs	r0, #0
	__asm__ volatile(
   270a8:	f384 8811 	msr	BASEPRI, r4
   270ac:	f3bf 8f6f 	isb	sy
}
   270b0:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   270b2:	f06f 0015 	mvn.w	r0, #21
   270b6:	e7f7      	b.n	270a8 <z_abort_timeout+0x1c>

000270b8 <z_get_next_timeout_expiry>:
{
   270b8:	b510      	push	{r4, lr}
	__asm__ volatile(
   270ba:	f04f 0320 	mov.w	r3, #32
   270be:	f3ef 8411 	mrs	r4, BASEPRI
   270c2:	f383 8811 	msr	BASEPRI, r3
   270c6:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   270ca:	f7f9 fae3 	bl	20694 <next_timeout>
	__asm__ volatile(
   270ce:	f384 8811 	msr	BASEPRI, r4
   270d2:	f3bf 8f6f 	isb	sy
}
   270d6:	bd10      	pop	{r4, pc}

000270d8 <z_set_timeout_expiry>:
{
   270d8:	b570      	push	{r4, r5, r6, lr}
   270da:	4604      	mov	r4, r0
   270dc:	460d      	mov	r5, r1
	__asm__ volatile(
   270de:	f04f 0320 	mov.w	r3, #32
   270e2:	f3ef 8611 	mrs	r6, BASEPRI
   270e6:	f383 8811 	msr	BASEPRI, r3
   270ea:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   270ee:	f7f9 fad1 	bl	20694 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   270f2:	2801      	cmp	r0, #1
   270f4:	dd05      	ble.n	27102 <z_set_timeout_expiry+0x2a>
   270f6:	42a0      	cmp	r0, r4
   270f8:	db03      	blt.n	27102 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   270fa:	4629      	mov	r1, r5
   270fc:	4620      	mov	r0, r4
   270fe:	f7e0 f809 	bl	7114 <z_clock_set_timeout>
	__asm__ volatile(
   27102:	f386 8811 	msr	BASEPRI, r6
   27106:	f3bf 8f6f 	isb	sy
}
   2710a:	bd70      	pop	{r4, r5, r6, pc}

0002710c <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   2710c:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   2710e:	f7f9 fbdf 	bl	208d0 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27112:	bd08      	pop	{r3, pc}

00027114 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   27114:	f7f9 bbdc 	b.w	208d0 <z_tick_get>

00027118 <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27118:	f1b1 3fff 	cmp.w	r1, #4294967295
   2711c:	bf08      	it	eq
   2711e:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   27122:	b538      	push	{r3, r4, r5, lr}
   27124:	4605      	mov	r5, r0
   27126:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   27128:	d01d      	beq.n	27166 <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2712a:	ea51 0300 	orrs.w	r3, r1, r0
   2712e:	d103      	bne.n	27138 <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   27130:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   27134:	f7f9 bbcc 	b.w	208d0 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   27138:	f06f 0301 	mvn.w	r3, #1
   2713c:	1a18      	subs	r0, r3, r0
   2713e:	f04f 33ff 	mov.w	r3, #4294967295
   27142:	eb63 0101 	sbc.w	r1, r3, r1
   27146:	2900      	cmp	r1, #0
   27148:	da0c      	bge.n	27164 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   2714a:	f7f9 fbc1 	bl	208d0 <z_tick_get>
   2714e:	2d01      	cmp	r5, #1
   27150:	4622      	mov	r2, r4
   27152:	f174 0400 	sbcs.w	r4, r4, #0
   27156:	462b      	mov	r3, r5
   27158:	bfbc      	itt	lt
   2715a:	2301      	movlt	r3, #1
   2715c:	2200      	movlt	r2, #0
   2715e:	1818      	adds	r0, r3, r0
   27160:	eb41 0102 	adc.w	r1, r1, r2
}
   27164:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   27166:	f04f 30ff 	mov.w	r0, #4294967295
   2716a:	4601      	mov	r1, r0
   2716c:	e7fa      	b.n	27164 <z_timeout_end_calc+0x4c>

0002716e <k_timer_init>:
	timer->status = 0U;
   2716e:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   27170:	e9c0 1208 	strd	r1, r2, [r0, #32]
   27174:	f100 0218 	add.w	r2, r0, #24
   27178:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   2717c:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   27180:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   27182:	6343      	str	r3, [r0, #52]	; 0x34
}
   27184:	4770      	bx	lr

00027186 <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   27186:	b510      	push	{r4, lr}
   27188:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   2718a:	f7ff ff7f 	bl	2708c <z_abort_timeout>

	if (inactive) {
   2718e:	b9b0      	cbnz	r0, 271be <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   27190:	6a63      	ldr	r3, [r4, #36]	; 0x24
   27192:	b10b      	cbz	r3, 27198 <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   27194:	4620      	mov	r0, r4
   27196:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   27198:	f104 0018 	add.w	r0, r4, #24
   2719c:	f7ff fea1 	bl	26ee2 <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   271a0:	b168      	cbz	r0, 271be <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   271a2:	f7ff fe46 	bl	26e32 <z_ready_thread>
	__asm__ volatile(
   271a6:	f04f 0320 	mov.w	r3, #32
   271aa:	f3ef 8011 	mrs	r0, BASEPRI
   271ae:	f383 8811 	msr	BASEPRI, r3
   271b2:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   271b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   271ba:	f7ff bdfc 	b.w	26db6 <z_reschedule_irqlock>
   271be:	bd10      	pop	{r4, pc}

000271c0 <k_work_submit_to_queue>:
{
   271c0:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   271c2:	f101 0308 	add.w	r3, r1, #8
   271c6:	f3bf 8f5b 	dmb	ish
   271ca:	e853 2f00 	ldrex	r2, [r3]
   271ce:	f042 0c01 	orr.w	ip, r2, #1
   271d2:	e843 ce00 	strex	lr, ip, [r3]
   271d6:	f1be 0f00 	cmp.w	lr, #0
   271da:	d1f6      	bne.n	271ca <k_work_submit_to_queue+0xa>
   271dc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   271e0:	07d3      	lsls	r3, r2, #31
   271e2:	d403      	bmi.n	271ec <k_work_submit_to_queue+0x2c>
}
   271e4:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   271e8:	f7ff bd7b 	b.w	26ce2 <k_queue_append>
}
   271ec:	f85d fb04 	ldr.w	pc, [sp], #4

000271f0 <signal_poll_event>:
{
   271f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   271f4:	6884      	ldr	r4, [r0, #8]
{
   271f6:	4605      	mov	r5, r0
   271f8:	460e      	mov	r6, r1
	if (poller) {
   271fa:	b144      	cbz	r4, 2720e <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   271fc:	7863      	ldrb	r3, [r4, #1]
   271fe:	2b01      	cmp	r3, #1
   27200:	d136      	bne.n	27270 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   27202:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   27206:	f013 0302 	ands.w	r3, r3, #2
   2720a:	d10a      	bne.n	27222 <signal_poll_event+0x32>
		poller->is_polling = false;
   2720c:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   2720e:	68eb      	ldr	r3, [r5, #12]
   27210:	f3c3 3104 	ubfx	r1, r3, #12, #5
   27214:	430e      	orrs	r6, r1
	event->poller = NULL;
   27216:	2000      	movs	r0, #0
	event->state |= state;
   27218:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   2721c:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   2721e:	60eb      	str	r3, [r5, #12]
	return retcode;
   27220:	e00b      	b.n	2723a <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   27222:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   27226:	f1b3 3fff 	cmp.w	r3, #4294967295
   2722a:	bf08      	it	eq
   2722c:	f112 0f02 	cmneq.w	r2, #2
   27230:	d105      	bne.n	2723e <signal_poll_event+0x4e>
		poller->is_polling = false;
   27232:	2300      	movs	r3, #0
   27234:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   27236:	f06f 000a 	mvn.w	r0, #10
}
   2723a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2723e:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   27242:	4640      	mov	r0, r8
   27244:	f7ff fdd9 	bl	26dfa <z_unpend_thread>
	arch_thread_return_value_set(thread,
   27248:	2e08      	cmp	r6, #8
   2724a:	bf0c      	ite	eq
   2724c:	f06f 0303 	mvneq.w	r3, #3
   27250:	2300      	movne	r3, #0
   27252:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   27254:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   27258:	06db      	lsls	r3, r3, #27
   2725a:	d102      	bne.n	27262 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   2725c:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   27260:	b10f      	cbz	r7, 27266 <signal_poll_event+0x76>
		poller->is_polling = false;
   27262:	2300      	movs	r3, #0
   27264:	e7d2      	b.n	2720c <signal_poll_event+0x1c>
	z_ready_thread(thread);
   27266:	4640      	mov	r0, r8
   27268:	f7ff fde3 	bl	26e32 <z_ready_thread>
		poller->is_polling = false;
   2726c:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   2726e:	e7ce      	b.n	2720e <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   27270:	2b02      	cmp	r3, #2
   27272:	d1f6      	bne.n	27262 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   27274:	7823      	ldrb	r3, [r4, #0]
   27276:	2b00      	cmp	r3, #0
   27278:	d0c9      	beq.n	2720e <signal_poll_event+0x1e>
   2727a:	f854 7c04 	ldr.w	r7, [r4, #-4]
   2727e:	2f00      	cmp	r7, #0
   27280:	d0f4      	beq.n	2726c <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   27282:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   27286:	f1a4 0910 	sub.w	r9, r4, #16
   2728a:	f104 0010 	add.w	r0, r4, #16
   2728e:	f7ff fefd 	bl	2708c <z_abort_timeout>
		twork->poll_result = 0;
   27292:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   27296:	4649      	mov	r1, r9
   27298:	4638      	mov	r0, r7
   2729a:	f7ff ff91 	bl	271c0 <k_work_submit_to_queue>
		poller->is_polling = false;
   2729e:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   272a2:	e7b4      	b.n	2720e <signal_poll_event+0x1e>

000272a4 <add_event>:
{
   272a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   272a6:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   272a8:	e9d0 2300 	ldrd	r2, r3, [r0]
   272ac:	4290      	cmp	r0, r2
   272ae:	4604      	mov	r4, r0
   272b0:	460d      	mov	r5, r1
   272b2:	d106      	bne.n	272c2 <add_event+0x1e>
	node->prev = list->tail;
   272b4:	6863      	ldr	r3, [r4, #4]
   272b6:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   272b8:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   272ba:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   272bc:	601d      	str	r5, [r3, #0]
	list->tail = node;
   272be:	6065      	str	r5, [r4, #4]
}
   272c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   272c2:	2b00      	cmp	r3, #0
   272c4:	d0f6      	beq.n	272b4 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   272c6:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   272c8:	b100      	cbz	r0, 272cc <add_event+0x28>
   272ca:	3864      	subs	r0, #100	; 0x64
   272cc:	b107      	cbz	r7, 272d0 <add_event+0x2c>
   272ce:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   272d0:	4639      	mov	r1, r7
   272d2:	f7ff fd57 	bl	26d84 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   272d6:	2800      	cmp	r0, #0
   272d8:	d1ec      	bne.n	272b4 <add_event+0x10>
	return list->head == list;
   272da:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   272dc:	42b4      	cmp	r4, r6
   272de:	d0e9      	beq.n	272b4 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   272e0:	2e00      	cmp	r6, #0
   272e2:	d0e7      	beq.n	272b4 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   272e4:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   272e6:	b101      	cbz	r1, 272ea <add_event+0x46>
   272e8:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   272ea:	4638      	mov	r0, r7
   272ec:	f7ff fd4a 	bl	26d84 <z_is_t1_higher_prio_than_t2>
   272f0:	b128      	cbz	r0, 272fe <add_event+0x5a>
	node->prev = successor->prev;
   272f2:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   272f4:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   272f8:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   272fa:	6075      	str	r5, [r6, #4]
			return;
   272fc:	e7e0      	b.n	272c0 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   272fe:	6863      	ldr	r3, [r4, #4]
   27300:	429e      	cmp	r6, r3
   27302:	d0d7      	beq.n	272b4 <add_event+0x10>
   27304:	6836      	ldr	r6, [r6, #0]
   27306:	e7eb      	b.n	272e0 <add_event+0x3c>

00027308 <register_events>:
{
   27308:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   2730c:	f04f 0a00 	mov.w	sl, #0
{
   27310:	460e      	mov	r6, r1
   27312:	4614      	mov	r4, r2
   27314:	461f      	mov	r7, r3
   27316:	4683      	mov	fp, r0
	int events_registered = 0;
   27318:	4655      	mov	r5, sl
	event->poller = NULL;
   2731a:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   2731c:	45b2      	cmp	sl, r6
   2731e:	db02      	blt.n	27326 <register_events+0x1e>
}
   27320:	4628      	mov	r0, r5
   27322:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27326:	f04f 0320 	mov.w	r3, #32
   2732a:	f3ef 8911 	mrs	r9, BASEPRI
   2732e:	f383 8811 	msr	BASEPRI, r3
   27332:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   27336:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2733a:	f002 020f 	and.w	r2, r2, #15
   2733e:	2a02      	cmp	r2, #2
   27340:	d006      	beq.n	27350 <register_events+0x48>
   27342:	2a04      	cmp	r2, #4
   27344:	d008      	beq.n	27358 <register_events+0x50>
   27346:	2a01      	cmp	r2, #1
   27348:	d120      	bne.n	2738c <register_events+0x84>
		if (event->signal->signaled != 0U) {
   2734a:	f8db 3010 	ldr.w	r3, [fp, #16]
   2734e:	e001      	b.n	27354 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   27350:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   27354:	689b      	ldr	r3, [r3, #8]
   27356:	e002      	b.n	2735e <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   27358:	f8db 3010 	ldr.w	r3, [fp, #16]
   2735c:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   2735e:	b1ab      	cbz	r3, 2738c <register_events+0x84>
	event->state |= state;
   27360:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   27364:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   27368:	f3c3 3104 	ubfx	r1, r3, #12, #5
   2736c:	430a      	orrs	r2, r1
   2736e:	f362 3310 	bfi	r3, r2, #12, #5
   27372:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   27376:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   2737a:	f389 8811 	msr	BASEPRI, r9
   2737e:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   27382:	f10a 0a01 	add.w	sl, sl, #1
   27386:	f10b 0b14 	add.w	fp, fp, #20
   2738a:	e7c7      	b.n	2731c <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   2738c:	2f00      	cmp	r7, #0
   2738e:	d1f4      	bne.n	2737a <register_events+0x72>
   27390:	7823      	ldrb	r3, [r4, #0]
   27392:	2b00      	cmp	r3, #0
   27394:	d0f1      	beq.n	2737a <register_events+0x72>
	switch (event->type) {
   27396:	f89b 300d 	ldrb.w	r3, [fp, #13]
   2739a:	f003 030f 	and.w	r3, r3, #15
   2739e:	2b02      	cmp	r3, #2
   273a0:	d008      	beq.n	273b4 <register_events+0xac>
   273a2:	2b04      	cmp	r3, #4
   273a4:	d006      	beq.n	273b4 <register_events+0xac>
   273a6:	2b01      	cmp	r3, #1
   273a8:	d10b      	bne.n	273c2 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   273aa:	f8db 0010 	ldr.w	r0, [fp, #16]
   273ae:	4622      	mov	r2, r4
   273b0:	4659      	mov	r1, fp
   273b2:	e004      	b.n	273be <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   273b4:	f8db 0010 	ldr.w	r0, [fp, #16]
   273b8:	4622      	mov	r2, r4
   273ba:	4659      	mov	r1, fp
   273bc:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   273be:	f7ff ff71 	bl	272a4 <add_event>
	event->poller = poller;
   273c2:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   273c6:	3501      	adds	r5, #1
   273c8:	e7d7      	b.n	2737a <register_events+0x72>

000273ca <clear_event_registrations>:
	while (num_events--) {
   273ca:	2314      	movs	r3, #20
{
   273cc:	b570      	push	{r4, r5, r6, lr}
   273ce:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   273d2:	2400      	movs	r4, #0
	while (num_events--) {
   273d4:	b901      	cbnz	r1, 273d8 <clear_event_registrations+0xe>
}
   273d6:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   273d8:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   273dc:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   273e0:	f003 030f 	and.w	r3, r3, #15
   273e4:	2b02      	cmp	r3, #2
   273e6:	f1a0 0614 	sub.w	r6, r0, #20
   273ea:	d80a      	bhi.n	27402 <clear_event_registrations+0x38>
   273ec:	b15b      	cbz	r3, 27406 <clear_event_registrations+0x3c>
	return node->next != NULL;
   273ee:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   273f2:	b143      	cbz	r3, 27406 <clear_event_registrations+0x3c>
	node->prev->next = node->next;
   273f4:	f850 5c10 	ldr.w	r5, [r0, #-16]
   273f8:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   273fa:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   273fc:	e940 4405 	strd	r4, r4, [r0, #-20]
}
   27400:	e001      	b.n	27406 <clear_event_registrations+0x3c>
	switch (event->type) {
   27402:	2b04      	cmp	r3, #4
   27404:	d0f3      	beq.n	273ee <clear_event_registrations+0x24>
   27406:	f382 8811 	msr	BASEPRI, r2
   2740a:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   2740e:	f04f 0320 	mov.w	r3, #32
   27412:	f3ef 8211 	mrs	r2, BASEPRI
   27416:	f383 8811 	msr	BASEPRI, r3
   2741a:	f3bf 8f6f 	isb	sy
   2741e:	3901      	subs	r1, #1
   27420:	4630      	mov	r0, r6
   27422:	e7d7      	b.n	273d4 <clear_event_registrations+0xa>

00027424 <k_poll_event_init>:
{
   27424:	b510      	push	{r4, lr}
	event->type = type;
   27426:	0452      	lsls	r2, r2, #17
   27428:	0209      	lsls	r1, r1, #8
   2742a:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   2742e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   27432:	430a      	orrs	r2, r1
   27434:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   27436:	2400      	movs	r4, #0
	event->type = type;
   27438:	430a      	orrs	r2, r1
	event->obj = obj;
   2743a:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   2743e:	6084      	str	r4, [r0, #8]
}
   27440:	bd10      	pop	{r4, pc}

00027442 <z_handle_obj_poll_events>:
{
   27442:	4603      	mov	r3, r0
	return list->head == list;
   27444:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   27446:	4283      	cmp	r3, r0
   27448:	d008      	beq.n	2745c <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   2744a:	e9d0 3200 	ldrd	r3, r2, [r0]
   2744e:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   27450:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   27452:	2300      	movs	r3, #0
	node->prev = NULL;
   27454:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   27458:	f7ff beca 	b.w	271f0 <signal_poll_event>
}
   2745c:	4770      	bx	lr

0002745e <k_free>:
	if (ptr != NULL) {
   2745e:	b120      	cbz	r0, 2746a <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   27460:	1f01      	subs	r1, r0, #4
   27462:	f850 0c04 	ldr.w	r0, [r0, #-4]
   27466:	f7ff bb78 	b.w	26b5a <k_heap_free>
}
   2746a:	4770      	bx	lr

0002746c <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   2746c:	4770      	bx	lr
