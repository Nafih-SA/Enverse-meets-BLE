
zephyr.elf:     file format elf32-littlearm


Disassembly of section rom_start:

00000000 <_vector_table>:
			msg->flags & I2C_MSG_READ ? 'R' : 'W', msg->len);
		if (!(msg->flags & I2C_MSG_READ)) {
			LOG_HEXDUMP_DBG(msg->buf, msg->len, "contents:");
		}
	}
}
   0:	e0 18 01 20 cd 79 00 00 bf 42 02 00 fd 79 00 00     ... .y...B...y..
  10:	fd 79 00 00 fd 79 00 00 fd 79 00 00 00 00 00 00     .y...y...y......
	...
  2c:	2d 77 00 00 fd 79 00 00 00 00 00 00 d9 76 00 00     -w...y.......v..
  3c:	79 30 02 00                                         y0..

00000040 <_irq_vector_table>:
  40:	8d 79 00 00 d9 a9 01 00 8d 79 00 00 8d 79 00 00     .y.......y...y..
  50:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  60:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  70:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  80:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  90:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  a0:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  b0:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  c0:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  d0:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  e0:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..
  f0:	8d 79 00 00 8d 79 00 00 8d 79 00 00 8d 79 00 00     .y...y...y...y..

Disassembly of section text:

00000100 <__aeabi_drsub>:
     100:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     104:	e002      	b.n	10c <__adddf3>
     106:	bf00      	nop

00000108 <__aeabi_dsub>:
     108:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0000010c <__adddf3>:
     10c:	b530      	push	{r4, r5, lr}
     10e:	ea4f 0441 	mov.w	r4, r1, lsl #1
     112:	ea4f 0543 	mov.w	r5, r3, lsl #1
     116:	ea94 0f05 	teq	r4, r5
     11a:	bf08      	it	eq
     11c:	ea90 0f02 	teqeq	r0, r2
     120:	bf1f      	itttt	ne
     122:	ea54 0c00 	orrsne.w	ip, r4, r0
     126:	ea55 0c02 	orrsne.w	ip, r5, r2
     12a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     12e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     132:	f000 80e2 	beq.w	2fa <CONFIG_BT_HCI_TX_STACK_SIZE+0x7a>
     136:	ea4f 5454 	mov.w	r4, r4, lsr #21
     13a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     13e:	bfb8      	it	lt
     140:	426d      	neglt	r5, r5
     142:	dd0c      	ble.n	15e <CONFIG_IDLE_STACK_SIZE+0x1e>
     144:	442c      	add	r4, r5
     146:	ea80 0202 	eor.w	r2, r0, r2
     14a:	ea81 0303 	eor.w	r3, r1, r3
     14e:	ea82 0000 	eor.w	r0, r2, r0
     152:	ea83 0101 	eor.w	r1, r3, r1
     156:	ea80 0202 	eor.w	r2, r0, r2
     15a:	ea81 0303 	eor.w	r3, r1, r3
     15e:	2d36      	cmp	r5, #54	; 0x36
     160:	bf88      	it	hi
     162:	bd30      	pophi	{r4, r5, pc}
     164:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     168:	ea4f 3101 	mov.w	r1, r1, lsl #12
     16c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     170:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     174:	d002      	beq.n	17c <CONFIG_IDLE_STACK_SIZE+0x3c>
     176:	4240      	negs	r0, r0
     178:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     17c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     180:	ea4f 3303 	mov.w	r3, r3, lsl #12
     184:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     188:	d002      	beq.n	190 <CONFIG_IDLE_STACK_SIZE+0x50>
     18a:	4252      	negs	r2, r2
     18c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     190:	ea94 0f05 	teq	r4, r5
     194:	f000 80a7 	beq.w	2e6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x66>
     198:	f1a4 0401 	sub.w	r4, r4, #1
     19c:	f1d5 0e20 	rsbs	lr, r5, #32
     1a0:	db0d      	blt.n	1be <CONFIG_IDLE_STACK_SIZE+0x7e>
     1a2:	fa02 fc0e 	lsl.w	ip, r2, lr
     1a6:	fa22 f205 	lsr.w	r2, r2, r5
     1aa:	1880      	adds	r0, r0, r2
     1ac:	f141 0100 	adc.w	r1, r1, #0
     1b0:	fa03 f20e 	lsl.w	r2, r3, lr
     1b4:	1880      	adds	r0, r0, r2
     1b6:	fa43 f305 	asr.w	r3, r3, r5
     1ba:	4159      	adcs	r1, r3
     1bc:	e00e      	b.n	1dc <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x1c>
     1be:	f1a5 0520 	sub.w	r5, r5, #32
     1c2:	f10e 0e20 	add.w	lr, lr, #32
     1c6:	2a01      	cmp	r2, #1
     1c8:	fa03 fc0e 	lsl.w	ip, r3, lr
     1cc:	bf28      	it	cs
     1ce:	f04c 0c02 	orrcs.w	ip, ip, #2
     1d2:	fa43 f305 	asr.w	r3, r3, r5
     1d6:	18c0      	adds	r0, r0, r3
     1d8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     1dc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     1e0:	d507      	bpl.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     1e2:	f04f 0e00 	mov.w	lr, #0
     1e6:	f1dc 0c00 	rsbs	ip, ip, #0
     1ea:	eb7e 0000 	sbcs.w	r0, lr, r0
     1ee:	eb6e 0101 	sbc.w	r1, lr, r1
     1f2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     1f6:	d31b      	bcc.n	230 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x70>
     1f8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     1fc:	d30c      	bcc.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     1fe:	0849      	lsrs	r1, r1, #1
     200:	ea5f 0030 	movs.w	r0, r0, rrx
     204:	ea4f 0c3c 	mov.w	ip, ip, rrx
     208:	f104 0401 	add.w	r4, r4, #1
     20c:	ea4f 5244 	mov.w	r2, r4, lsl #21
     210:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     214:	f080 809a 	bcs.w	34c <CONFIG_BT_DEVICE_APPEARANCE+0xb>
     218:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     21c:	bf08      	it	eq
     21e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     222:	f150 0000 	adcs.w	r0, r0, #0
     226:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     22a:	ea41 0105 	orr.w	r1, r1, r5
     22e:	bd30      	pop	{r4, r5, pc}
     230:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     234:	4140      	adcs	r0, r0
     236:	eb41 0101 	adc.w	r1, r1, r1
     23a:	3c01      	subs	r4, #1
     23c:	bf28      	it	cs
     23e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
     242:	d2e9      	bcs.n	218 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x58>
     244:	f091 0f00 	teq	r1, #0
     248:	bf04      	itt	eq
     24a:	4601      	moveq	r1, r0
     24c:	2000      	moveq	r0, #0
     24e:	fab1 f381 	clz	r3, r1
     252:	bf08      	it	eq
     254:	3320      	addeq	r3, #32
     256:	f1a3 030b 	sub.w	r3, r3, #11
     25a:	f1b3 0220 	subs.w	r2, r3, #32
     25e:	da0c      	bge.n	27a <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xba>
     260:	320c      	adds	r2, #12
     262:	dd08      	ble.n	276 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0xb6>
     264:	f102 0c14 	add.w	ip, r2, #20
     268:	f1c2 020c 	rsb	r2, r2, #12
     26c:	fa01 f00c 	lsl.w	r0, r1, ip
     270:	fa21 f102 	lsr.w	r1, r1, r2
     274:	e00c      	b.n	290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     276:	f102 0214 	add.w	r2, r2, #20
     27a:	bfd8      	it	le
     27c:	f1c2 0c20 	rsble	ip, r2, #32
     280:	fa01 f102 	lsl.w	r1, r1, r2
     284:	fa20 fc0c 	lsr.w	ip, r0, ip
     288:	bfdc      	itt	le
     28a:	ea41 010c 	orrle.w	r1, r1, ip
     28e:	4090      	lslle	r0, r2
     290:	1ae4      	subs	r4, r4, r3
     292:	bfa2      	ittt	ge
     294:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     298:	4329      	orrge	r1, r5
     29a:	bd30      	popge	{r4, r5, pc}
     29c:	ea6f 0404 	mvn.w	r4, r4
     2a0:	3c1f      	subs	r4, #31
     2a2:	da1c      	bge.n	2de <CONFIG_BT_HCI_TX_STACK_SIZE+0x5e>
     2a4:	340c      	adds	r4, #12
     2a6:	dc0e      	bgt.n	2c6 <CONFIG_BT_HCI_TX_STACK_SIZE+0x46>
     2a8:	f104 0414 	add.w	r4, r4, #20
     2ac:	f1c4 0220 	rsb	r2, r4, #32
     2b0:	fa20 f004 	lsr.w	r0, r0, r4
     2b4:	fa01 f302 	lsl.w	r3, r1, r2
     2b8:	ea40 0003 	orr.w	r0, r0, r3
     2bc:	fa21 f304 	lsr.w	r3, r1, r4
     2c0:	ea45 0103 	orr.w	r1, r5, r3
     2c4:	bd30      	pop	{r4, r5, pc}
     2c6:	f1c4 040c 	rsb	r4, r4, #12
     2ca:	f1c4 0220 	rsb	r2, r4, #32
     2ce:	fa20 f002 	lsr.w	r0, r0, r2
     2d2:	fa01 f304 	lsl.w	r3, r1, r4
     2d6:	ea40 0003 	orr.w	r0, r0, r3
     2da:	4629      	mov	r1, r5
     2dc:	bd30      	pop	{r4, r5, pc}
     2de:	fa21 f004 	lsr.w	r0, r1, r4
     2e2:	4629      	mov	r1, r5
     2e4:	bd30      	pop	{r4, r5, pc}
     2e6:	f094 0f00 	teq	r4, #0
     2ea:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     2ee:	bf06      	itte	eq
     2f0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     2f4:	3401      	addeq	r4, #1
     2f6:	3d01      	subne	r5, #1
     2f8:	e74e      	b.n	198 <CONFIG_IDLE_STACK_SIZE+0x58>
     2fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     2fe:	bf18      	it	ne
     300:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     304:	d029      	beq.n	35a <CONFIG_BT_DEVICE_APPEARANCE+0x19>
     306:	ea94 0f05 	teq	r4, r5
     30a:	bf08      	it	eq
     30c:	ea90 0f02 	teqeq	r0, r2
     310:	d005      	beq.n	31e <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x1e>
     312:	ea54 0c00 	orrs.w	ip, r4, r0
     316:	bf04      	itt	eq
     318:	4619      	moveq	r1, r3
     31a:	4610      	moveq	r0, r2
     31c:	bd30      	pop	{r4, r5, pc}
     31e:	ea91 0f03 	teq	r1, r3
     322:	bf1e      	ittt	ne
     324:	2100      	movne	r1, #0
     326:	2000      	movne	r0, #0
     328:	bd30      	popne	{r4, r5, pc}
     32a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     32e:	d105      	bne.n	33c <CONFIG_LOG_PROCESS_THREAD_STACK_SIZE+0x3c>
     330:	0040      	lsls	r0, r0, #1
     332:	4149      	adcs	r1, r1
     334:	bf28      	it	cs
     336:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     33a:	bd30      	pop	{r4, r5, pc}
     33c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     340:	bf3c      	itt	cc
     342:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     346:	bd30      	popcc	{r4, r5, pc}
     348:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     34c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     350:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     354:	f04f 0000 	mov.w	r0, #0
     358:	bd30      	pop	{r4, r5, pc}
     35a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     35e:	bf1a      	itte	ne
     360:	4619      	movne	r1, r3
     362:	4610      	movne	r0, r2
     364:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     368:	bf1c      	itt	ne
     36a:	460b      	movne	r3, r1
     36c:	4602      	movne	r2, r0
     36e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     372:	bf06      	itte	eq
     374:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     378:	ea91 0f03 	teqeq	r1, r3
     37c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     380:	bd30      	pop	{r4, r5, pc}
     382:	bf00      	nop

00000384 <__aeabi_ui2d>:
     384:	f090 0f00 	teq	r0, #0
     388:	bf04      	itt	eq
     38a:	2100      	moveq	r1, #0
     38c:	4770      	bxeq	lr
     38e:	b530      	push	{r4, r5, lr}
     390:	f44f 6480 	mov.w	r4, #1024	; 0x400
     394:	f104 0432 	add.w	r4, r4, #50	; 0x32
     398:	f04f 0500 	mov.w	r5, #0
     39c:	f04f 0100 	mov.w	r1, #0
     3a0:	e750      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3a2:	bf00      	nop

000003a4 <__aeabi_i2d>:
     3a4:	f090 0f00 	teq	r0, #0
     3a8:	bf04      	itt	eq
     3aa:	2100      	moveq	r1, #0
     3ac:	4770      	bxeq	lr
     3ae:	b530      	push	{r4, r5, lr}
     3b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
     3b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
     3b8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     3bc:	bf48      	it	mi
     3be:	4240      	negmi	r0, r0
     3c0:	f04f 0100 	mov.w	r1, #0
     3c4:	e73e      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     3c6:	bf00      	nop

000003c8 <__aeabi_f2d>:
     3c8:	0042      	lsls	r2, r0, #1
     3ca:	ea4f 01e2 	mov.w	r1, r2, asr #3
     3ce:	ea4f 0131 	mov.w	r1, r1, rrx
     3d2:	ea4f 7002 	mov.w	r0, r2, lsl #28
     3d6:	bf1f      	itttt	ne
     3d8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     3dc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     3e0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     3e4:	4770      	bxne	lr
     3e6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
     3ea:	bf08      	it	eq
     3ec:	4770      	bxeq	lr
     3ee:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
     3f2:	bf04      	itt	eq
     3f4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
     3f8:	4770      	bxeq	lr
     3fa:	b530      	push	{r4, r5, lr}
     3fc:	f44f 7460 	mov.w	r4, #896	; 0x380
     400:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     404:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     408:	e71c      	b.n	244 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x84>
     40a:	bf00      	nop

0000040c <__aeabi_ul2d>:
     40c:	ea50 0201 	orrs.w	r2, r0, r1
     410:	bf08      	it	eq
     412:	4770      	bxeq	lr
     414:	b530      	push	{r4, r5, lr}
     416:	f04f 0500 	mov.w	r5, #0
     41a:	e00a      	b.n	432 <__aeabi_l2d+0x16>

0000041c <__aeabi_l2d>:
     41c:	ea50 0201 	orrs.w	r2, r0, r1
     420:	bf08      	it	eq
     422:	4770      	bxeq	lr
     424:	b530      	push	{r4, r5, lr}
     426:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     42a:	d502      	bpl.n	432 <__aeabi_l2d+0x16>
     42c:	4240      	negs	r0, r0
     42e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     432:	f44f 6480 	mov.w	r4, #1024	; 0x400
     436:	f104 0432 	add.w	r4, r4, #50	; 0x32
     43a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     43e:	f43f aed8 	beq.w	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     442:	f04f 0203 	mov.w	r2, #3
     446:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     44a:	bf18      	it	ne
     44c:	3203      	addne	r2, #3
     44e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     452:	bf18      	it	ne
     454:	3203      	addne	r2, #3
     456:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     45a:	f1c2 0320 	rsb	r3, r2, #32
     45e:	fa00 fc03 	lsl.w	ip, r0, r3
     462:	fa20 f002 	lsr.w	r0, r0, r2
     466:	fa01 fe03 	lsl.w	lr, r1, r3
     46a:	ea40 000e 	orr.w	r0, r0, lr
     46e:	fa21 f102 	lsr.w	r1, r1, r2
     472:	4414      	add	r4, r2
     474:	e6bd      	b.n	1f2 <CONFIG_BT_CTLR_RX_PRIO_STACK_SIZE+0x32>
     476:	bf00      	nop

00000478 <__aeabi_dmul>:
     478:	b570      	push	{r4, r5, r6, lr}
     47a:	f04f 0cff 	mov.w	ip, #255	; 0xff
     47e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     482:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     486:	bf1d      	ittte	ne
     488:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     48c:	ea94 0f0c 	teqne	r4, ip
     490:	ea95 0f0c 	teqne	r5, ip
     494:	f000 f8de 	bleq	654 <CONFIG_BT_COMPANY_ID+0x63>
     498:	442c      	add	r4, r5
     49a:	ea81 0603 	eor.w	r6, r1, r3
     49e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     4a2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     4a6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     4aa:	bf18      	it	ne
     4ac:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     4b0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     4b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     4b8:	d038      	beq.n	52c <__aeabi_dmul+0xb4>
     4ba:	fba0 ce02 	umull	ip, lr, r0, r2
     4be:	f04f 0500 	mov.w	r5, #0
     4c2:	fbe1 e502 	umlal	lr, r5, r1, r2
     4c6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     4ca:	fbe0 e503 	umlal	lr, r5, r0, r3
     4ce:	f04f 0600 	mov.w	r6, #0
     4d2:	fbe1 5603 	umlal	r5, r6, r1, r3
     4d6:	f09c 0f00 	teq	ip, #0
     4da:	bf18      	it	ne
     4dc:	f04e 0e01 	orrne.w	lr, lr, #1
     4e0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     4e4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     4e8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     4ec:	d204      	bcs.n	4f8 <__aeabi_dmul+0x80>
     4ee:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     4f2:	416d      	adcs	r5, r5
     4f4:	eb46 0606 	adc.w	r6, r6, r6
     4f8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     4fc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
     500:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     504:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     508:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     50c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     510:	bf88      	it	hi
     512:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     516:	d81e      	bhi.n	556 <__aeabi_dmul+0xde>
     518:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     51c:	bf08      	it	eq
     51e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
     522:	f150 0000 	adcs.w	r0, r0, #0
     526:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     52a:	bd70      	pop	{r4, r5, r6, pc}
     52c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     530:	ea46 0101 	orr.w	r1, r6, r1
     534:	ea40 0002 	orr.w	r0, r0, r2
     538:	ea81 0103 	eor.w	r1, r1, r3
     53c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
     540:	bfc2      	ittt	gt
     542:	ebd4 050c 	rsbsgt	r5, r4, ip
     546:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     54a:	bd70      	popgt	{r4, r5, r6, pc}
     54c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     550:	f04f 0e00 	mov.w	lr, #0
     554:	3c01      	subs	r4, #1
     556:	f300 80ab 	bgt.w	6b0 <CONFIG_BT_COMPANY_ID+0xbf>
     55a:	f114 0f36 	cmn.w	r4, #54	; 0x36
     55e:	bfde      	ittt	le
     560:	2000      	movle	r0, #0
     562:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     566:	bd70      	pople	{r4, r5, r6, pc}
     568:	f1c4 0400 	rsb	r4, r4, #0
     56c:	3c20      	subs	r4, #32
     56e:	da35      	bge.n	5dc <CONFIG_BT_CTLR_XTAL_THRESHOLD>
     570:	340c      	adds	r4, #12
     572:	dc1b      	bgt.n	5ac <__aeabi_dmul+0x134>
     574:	f104 0414 	add.w	r4, r4, #20
     578:	f1c4 0520 	rsb	r5, r4, #32
     57c:	fa00 f305 	lsl.w	r3, r0, r5
     580:	fa20 f004 	lsr.w	r0, r0, r4
     584:	fa01 f205 	lsl.w	r2, r1, r5
     588:	ea40 0002 	orr.w	r0, r0, r2
     58c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     590:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     594:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     598:	fa21 f604 	lsr.w	r6, r1, r4
     59c:	eb42 0106 	adc.w	r1, r2, r6
     5a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5a4:	bf08      	it	eq
     5a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5aa:	bd70      	pop	{r4, r5, r6, pc}
     5ac:	f1c4 040c 	rsb	r4, r4, #12
     5b0:	f1c4 0520 	rsb	r5, r4, #32
     5b4:	fa00 f304 	lsl.w	r3, r0, r4
     5b8:	fa20 f005 	lsr.w	r0, r0, r5
     5bc:	fa01 f204 	lsl.w	r2, r1, r4
     5c0:	ea40 0002 	orr.w	r0, r0, r2
     5c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5c8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     5cc:	f141 0100 	adc.w	r1, r1, #0
     5d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     5d4:	bf08      	it	eq
     5d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     5da:	bd70      	pop	{r4, r5, r6, pc}
     5dc:	f1c4 0520 	rsb	r5, r4, #32
     5e0:	fa00 f205 	lsl.w	r2, r0, r5
     5e4:	ea4e 0e02 	orr.w	lr, lr, r2
     5e8:	fa20 f304 	lsr.w	r3, r0, r4
     5ec:	fa01 f205 	lsl.w	r2, r1, r5
     5f0:	ea43 0302 	orr.w	r3, r3, r2
     5f4:	fa21 f004 	lsr.w	r0, r1, r4
     5f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     5fc:	fa21 f204 	lsr.w	r2, r1, r4
     600:	ea20 0002 	bic.w	r0, r0, r2
     604:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     60c:	bf08      	it	eq
     60e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     612:	bd70      	pop	{r4, r5, r6, pc}
     614:	f094 0f00 	teq	r4, #0
     618:	d10f      	bne.n	63a <CONFIG_BT_COMPANY_ID+0x49>
     61a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     61e:	0040      	lsls	r0, r0, #1
     620:	eb41 0101 	adc.w	r1, r1, r1
     624:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     628:	bf08      	it	eq
     62a:	3c01      	subeq	r4, #1
     62c:	d0f7      	beq.n	61e <CONFIG_BT_COMPANY_ID+0x2d>
     62e:	ea41 0106 	orr.w	r1, r1, r6
     632:	f095 0f00 	teq	r5, #0
     636:	bf18      	it	ne
     638:	4770      	bxne	lr
     63a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     63e:	0052      	lsls	r2, r2, #1
     640:	eb43 0303 	adc.w	r3, r3, r3
     644:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     648:	bf08      	it	eq
     64a:	3d01      	subeq	r5, #1
     64c:	d0f7      	beq.n	63e <CONFIG_BT_COMPANY_ID+0x4d>
     64e:	ea43 0306 	orr.w	r3, r3, r6
     652:	4770      	bx	lr
     654:	ea94 0f0c 	teq	r4, ip
     658:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     65c:	bf18      	it	ne
     65e:	ea95 0f0c 	teqne	r5, ip
     662:	d00c      	beq.n	67e <CONFIG_BT_COMPANY_ID+0x8d>
     664:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     668:	bf18      	it	ne
     66a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     66e:	d1d1      	bne.n	614 <CONFIG_BT_COMPANY_ID+0x23>
     670:	ea81 0103 	eor.w	r1, r1, r3
     674:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     678:	f04f 0000 	mov.w	r0, #0
     67c:	bd70      	pop	{r4, r5, r6, pc}
     67e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     682:	bf06      	itte	eq
     684:	4610      	moveq	r0, r2
     686:	4619      	moveq	r1, r3
     688:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     68c:	d019      	beq.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     68e:	ea94 0f0c 	teq	r4, ip
     692:	d102      	bne.n	69a <CONFIG_BT_COMPANY_ID+0xa9>
     694:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     698:	d113      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     69a:	ea95 0f0c 	teq	r5, ip
     69e:	d105      	bne.n	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     6a0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     6a4:	bf1c      	itt	ne
     6a6:	4610      	movne	r0, r2
     6a8:	4619      	movne	r1, r3
     6aa:	d10a      	bne.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     6ac:	ea81 0103 	eor.w	r1, r1, r3
     6b0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     6b4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     6bc:	f04f 0000 	mov.w	r0, #0
     6c0:	bd70      	pop	{r4, r5, r6, pc}
     6c2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     6c6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     6ca:	bd70      	pop	{r4, r5, r6, pc}

000006cc <__aeabi_ddiv>:
     6cc:	b570      	push	{r4, r5, r6, lr}
     6ce:	f04f 0cff 	mov.w	ip, #255	; 0xff
     6d2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     6d6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     6da:	bf1d      	ittte	ne
     6dc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     6e0:	ea94 0f0c 	teqne	r4, ip
     6e4:	ea95 0f0c 	teqne	r5, ip
     6e8:	f000 f8a7 	bleq	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     6ec:	eba4 0405 	sub.w	r4, r4, r5
     6f0:	ea81 0e03 	eor.w	lr, r1, r3
     6f4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     6f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
     6fc:	f000 8088 	beq.w	810 <CONFIG_ISR_STACK_SIZE+0x10>
     700:	ea4f 3303 	mov.w	r3, r3, lsl #12
     704:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
     708:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     70c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
     710:	ea4f 2202 	mov.w	r2, r2, lsl #8
     714:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
     718:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     71c:	ea4f 2600 	mov.w	r6, r0, lsl #8
     720:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     724:	429d      	cmp	r5, r3
     726:	bf08      	it	eq
     728:	4296      	cmpeq	r6, r2
     72a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     72e:	f504 7440 	add.w	r4, r4, #768	; 0x300
     732:	d202      	bcs.n	73a <__aeabi_ddiv+0x6e>
     734:	085b      	lsrs	r3, r3, #1
     736:	ea4f 0232 	mov.w	r2, r2, rrx
     73a:	1ab6      	subs	r6, r6, r2
     73c:	eb65 0503 	sbc.w	r5, r5, r3
     740:	085b      	lsrs	r3, r3, #1
     742:	ea4f 0232 	mov.w	r2, r2, rrx
     746:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     74a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     74e:	ebb6 0e02 	subs.w	lr, r6, r2
     752:	eb75 0e03 	sbcs.w	lr, r5, r3
     756:	bf22      	ittt	cs
     758:	1ab6      	subcs	r6, r6, r2
     75a:	4675      	movcs	r5, lr
     75c:	ea40 000c 	orrcs.w	r0, r0, ip
     760:	085b      	lsrs	r3, r3, #1
     762:	ea4f 0232 	mov.w	r2, r2, rrx
     766:	ebb6 0e02 	subs.w	lr, r6, r2
     76a:	eb75 0e03 	sbcs.w	lr, r5, r3
     76e:	bf22      	ittt	cs
     770:	1ab6      	subcs	r6, r6, r2
     772:	4675      	movcs	r5, lr
     774:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     778:	085b      	lsrs	r3, r3, #1
     77a:	ea4f 0232 	mov.w	r2, r2, rrx
     77e:	ebb6 0e02 	subs.w	lr, r6, r2
     782:	eb75 0e03 	sbcs.w	lr, r5, r3
     786:	bf22      	ittt	cs
     788:	1ab6      	subcs	r6, r6, r2
     78a:	4675      	movcs	r5, lr
     78c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     790:	085b      	lsrs	r3, r3, #1
     792:	ea4f 0232 	mov.w	r2, r2, rrx
     796:	ebb6 0e02 	subs.w	lr, r6, r2
     79a:	eb75 0e03 	sbcs.w	lr, r5, r3
     79e:	bf22      	ittt	cs
     7a0:	1ab6      	subcs	r6, r6, r2
     7a2:	4675      	movcs	r5, lr
     7a4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     7a8:	ea55 0e06 	orrs.w	lr, r5, r6
     7ac:	d018      	beq.n	7e0 <__aeabi_ddiv+0x114>
     7ae:	ea4f 1505 	mov.w	r5, r5, lsl #4
     7b2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     7b6:	ea4f 1606 	mov.w	r6, r6, lsl #4
     7ba:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     7be:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     7c2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     7c6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     7ca:	d1c0      	bne.n	74e <__aeabi_ddiv+0x82>
     7cc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7d0:	d10b      	bne.n	7ea <__aeabi_ddiv+0x11e>
     7d2:	ea41 0100 	orr.w	r1, r1, r0
     7d6:	f04f 0000 	mov.w	r0, #0
     7da:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     7de:	e7b6      	b.n	74e <__aeabi_ddiv+0x82>
     7e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     7e4:	bf04      	itt	eq
     7e6:	4301      	orreq	r1, r0
     7e8:	2000      	moveq	r0, #0
     7ea:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     7ee:	bf88      	it	hi
     7f0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     7f4:	f63f aeaf 	bhi.w	556 <__aeabi_dmul+0xde>
     7f8:	ebb5 0c03 	subs.w	ip, r5, r3
     7fc:	bf04      	itt	eq
     7fe:	ebb6 0c02 	subseq.w	ip, r6, r2
     802:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     806:	f150 0000 	adcs.w	r0, r0, #0
     80a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     80e:	bd70      	pop	{r4, r5, r6, pc}
     810:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     814:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     818:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     81c:	bfc2      	ittt	gt
     81e:	ebd4 050c 	rsbsgt	r5, r4, ip
     822:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     826:	bd70      	popgt	{r4, r5, r6, pc}
     828:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     82c:	f04f 0e00 	mov.w	lr, #0
     830:	3c01      	subs	r4, #1
     832:	e690      	b.n	556 <__aeabi_dmul+0xde>
     834:	ea45 0e06 	orr.w	lr, r5, r6
     838:	e68d      	b.n	556 <__aeabi_dmul+0xde>
     83a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     83e:	ea94 0f0c 	teq	r4, ip
     842:	bf08      	it	eq
     844:	ea95 0f0c 	teqeq	r5, ip
     848:	f43f af3b 	beq.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     84c:	ea94 0f0c 	teq	r4, ip
     850:	d10a      	bne.n	868 <CONFIG_ISR_STACK_SIZE+0x68>
     852:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     856:	f47f af34 	bne.w	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     85a:	ea95 0f0c 	teq	r5, ip
     85e:	f47f af25 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     862:	4610      	mov	r0, r2
     864:	4619      	mov	r1, r3
     866:	e72c      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     868:	ea95 0f0c 	teq	r5, ip
     86c:	d106      	bne.n	87c <CONFIG_ISR_STACK_SIZE+0x7c>
     86e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     872:	f43f aefd 	beq.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     876:	4610      	mov	r0, r2
     878:	4619      	mov	r1, r3
     87a:	e722      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>
     87c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     880:	bf18      	it	ne
     882:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     886:	f47f aec5 	bne.w	614 <CONFIG_BT_COMPANY_ID+0x23>
     88a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     88e:	f47f af0d 	bne.w	6ac <CONFIG_BT_COMPANY_ID+0xbb>
     892:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     896:	f47f aeeb 	bne.w	670 <CONFIG_BT_COMPANY_ID+0x7f>
     89a:	e712      	b.n	6c2 <CONFIG_BT_COMPANY_ID+0xd1>

0000089c <__gedf2>:
     89c:	f04f 3cff 	mov.w	ip, #4294967295
     8a0:	e006      	b.n	8b0 <__cmpdf2+0x4>
     8a2:	bf00      	nop

000008a4 <__ledf2>:
     8a4:	f04f 0c01 	mov.w	ip, #1
     8a8:	e002      	b.n	8b0 <__cmpdf2+0x4>
     8aa:	bf00      	nop

000008ac <__cmpdf2>:
     8ac:	f04f 0c01 	mov.w	ip, #1
     8b0:	f84d cd04 	str.w	ip, [sp, #-4]!
     8b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     8b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     8bc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     8c0:	bf18      	it	ne
     8c2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     8c6:	d01b      	beq.n	900 <__cmpdf2+0x54>
     8c8:	b001      	add	sp, #4
     8ca:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     8ce:	bf0c      	ite	eq
     8d0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     8d4:	ea91 0f03 	teqne	r1, r3
     8d8:	bf02      	ittt	eq
     8da:	ea90 0f02 	teqeq	r0, r2
     8de:	2000      	moveq	r0, #0
     8e0:	4770      	bxeq	lr
     8e2:	f110 0f00 	cmn.w	r0, #0
     8e6:	ea91 0f03 	teq	r1, r3
     8ea:	bf58      	it	pl
     8ec:	4299      	cmppl	r1, r3
     8ee:	bf08      	it	eq
     8f0:	4290      	cmpeq	r0, r2
     8f2:	bf2c      	ite	cs
     8f4:	17d8      	asrcs	r0, r3, #31
     8f6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     8fa:	f040 0001 	orr.w	r0, r0, #1
     8fe:	4770      	bx	lr
     900:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     908:	d102      	bne.n	910 <__cmpdf2+0x64>
     90a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     90e:	d107      	bne.n	920 <__cmpdf2+0x74>
     910:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     914:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     918:	d1d6      	bne.n	8c8 <__cmpdf2+0x1c>
     91a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     91e:	d0d3      	beq.n	8c8 <__cmpdf2+0x1c>
     920:	f85d 0b04 	ldr.w	r0, [sp], #4
     924:	4770      	bx	lr
     926:	bf00      	nop

00000928 <__aeabi_cdrcmple>:
     928:	4684      	mov	ip, r0
     92a:	4610      	mov	r0, r2
     92c:	4662      	mov	r2, ip
     92e:	468c      	mov	ip, r1
     930:	4619      	mov	r1, r3
     932:	4663      	mov	r3, ip
     934:	e000      	b.n	938 <__aeabi_cdcmpeq>
     936:	bf00      	nop

00000938 <__aeabi_cdcmpeq>:
     938:	b501      	push	{r0, lr}
     93a:	f7ff ffb7 	bl	8ac <__cmpdf2>
     93e:	2800      	cmp	r0, #0
     940:	bf48      	it	mi
     942:	f110 0f00 	cmnmi.w	r0, #0
     946:	bd01      	pop	{r0, pc}

00000948 <__aeabi_dcmpeq>:
     948:	f84d ed08 	str.w	lr, [sp, #-8]!
     94c:	f7ff fff4 	bl	938 <__aeabi_cdcmpeq>
     950:	bf0c      	ite	eq
     952:	2001      	moveq	r0, #1
     954:	2000      	movne	r0, #0
     956:	f85d fb08 	ldr.w	pc, [sp], #8
     95a:	bf00      	nop

0000095c <__aeabi_dcmplt>:
     95c:	f84d ed08 	str.w	lr, [sp, #-8]!
     960:	f7ff ffea 	bl	938 <__aeabi_cdcmpeq>
     964:	bf34      	ite	cc
     966:	2001      	movcc	r0, #1
     968:	2000      	movcs	r0, #0
     96a:	f85d fb08 	ldr.w	pc, [sp], #8
     96e:	bf00      	nop

00000970 <__aeabi_dcmple>:
     970:	f84d ed08 	str.w	lr, [sp, #-8]!
     974:	f7ff ffe0 	bl	938 <__aeabi_cdcmpeq>
     978:	bf94      	ite	ls
     97a:	2001      	movls	r0, #1
     97c:	2000      	movhi	r0, #0
     97e:	f85d fb08 	ldr.w	pc, [sp], #8
     982:	bf00      	nop

00000984 <__aeabi_dcmpge>:
     984:	f84d ed08 	str.w	lr, [sp, #-8]!
     988:	f7ff ffce 	bl	928 <__aeabi_cdrcmple>
     98c:	bf94      	ite	ls
     98e:	2001      	movls	r0, #1
     990:	2000      	movhi	r0, #0
     992:	f85d fb08 	ldr.w	pc, [sp], #8
     996:	bf00      	nop

00000998 <__aeabi_dcmpgt>:
     998:	f84d ed08 	str.w	lr, [sp, #-8]!
     99c:	f7ff ffc4 	bl	928 <__aeabi_cdrcmple>
     9a0:	bf34      	ite	cc
     9a2:	2001      	movcc	r0, #1
     9a4:	2000      	movcs	r0, #0
     9a6:	f85d fb08 	ldr.w	pc, [sp], #8
     9aa:	bf00      	nop

000009ac <__aeabi_d2iz>:
     9ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
     9b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     9b4:	d215      	bcs.n	9e2 <__aeabi_d2iz+0x36>
     9b6:	d511      	bpl.n	9dc <__aeabi_d2iz+0x30>
     9b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     9bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     9c0:	d912      	bls.n	9e8 <__aeabi_d2iz+0x3c>
     9c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     9c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     9ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     9ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     9d2:	fa23 f002 	lsr.w	r0, r3, r2
     9d6:	bf18      	it	ne
     9d8:	4240      	negne	r0, r0
     9da:	4770      	bx	lr
     9dc:	f04f 0000 	mov.w	r0, #0
     9e0:	4770      	bx	lr
     9e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     9e6:	d105      	bne.n	9f4 <__aeabi_d2iz+0x48>
     9e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
     9ec:	bf08      	it	eq
     9ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
     9f2:	4770      	bx	lr
     9f4:	f04f 0000 	mov.w	r0, #0
     9f8:	4770      	bx	lr
     9fa:	bf00      	nop

000009fc <__aeabi_d2uiz>:
     9fc:	004a      	lsls	r2, r1, #1
     9fe:	d211      	bcs.n	a24 <__aeabi_d2uiz+0x28>
     a00:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
     a04:	d211      	bcs.n	a2a <__aeabi_d2uiz+0x2e>
     a06:	d50d      	bpl.n	a24 <__aeabi_d2uiz+0x28>
     a08:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
     a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
     a10:	d40e      	bmi.n	a30 <__aeabi_d2uiz+0x34>
     a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     a16:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
     a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
     a1e:	fa23 f002 	lsr.w	r0, r3, r2
     a22:	4770      	bx	lr
     a24:	f04f 0000 	mov.w	r0, #0
     a28:	4770      	bx	lr
     a2a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
     a2e:	d102      	bne.n	a36 <__aeabi_d2uiz+0x3a>
     a30:	f04f 30ff 	mov.w	r0, #4294967295
     a34:	4770      	bx	lr
     a36:	f04f 0000 	mov.w	r0, #0
     a3a:	4770      	bx	lr

00000a3c <__aeabi_d2f>:
     a3c:	ea4f 0241 	mov.w	r2, r1, lsl #1
     a40:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
     a44:	bf24      	itt	cs
     a46:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
     a4a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
     a4e:	d90d      	bls.n	a6c <__aeabi_d2f+0x30>
     a50:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     a54:	ea4f 02c0 	mov.w	r2, r0, lsl #3
     a58:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
     a5c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
     a60:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
     a64:	bf08      	it	eq
     a66:	f020 0001 	biceq.w	r0, r0, #1
     a6a:	4770      	bx	lr
     a6c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
     a70:	d121      	bne.n	ab6 <__aeabi_d2f+0x7a>
     a72:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
     a76:	bfbc      	itt	lt
     a78:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
     a7c:	4770      	bxlt	lr
     a7e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     a82:	ea4f 5252 	mov.w	r2, r2, lsr #21
     a86:	f1c2 0218 	rsb	r2, r2, #24
     a8a:	f1c2 0c20 	rsb	ip, r2, #32
     a8e:	fa10 f30c 	lsls.w	r3, r0, ip
     a92:	fa20 f002 	lsr.w	r0, r0, r2
     a96:	bf18      	it	ne
     a98:	f040 0001 	orrne.w	r0, r0, #1
     a9c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
     aa0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
     aa4:	fa03 fc0c 	lsl.w	ip, r3, ip
     aa8:	ea40 000c 	orr.w	r0, r0, ip
     aac:	fa23 f302 	lsr.w	r3, r3, r2
     ab0:	ea4f 0343 	mov.w	r3, r3, lsl #1
     ab4:	e7cc      	b.n	a50 <__aeabi_d2f+0x14>
     ab6:	ea7f 5362 	mvns.w	r3, r2, asr #21
     aba:	d107      	bne.n	acc <__aeabi_d2f+0x90>
     abc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
     ac0:	bf1e      	ittt	ne
     ac2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
     ac6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
     aca:	4770      	bxne	lr
     acc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
     ad0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     ad4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     ad8:	4770      	bx	lr
     ada:	bf00      	nop

00000adc <__aeabi_frsub>:
     adc:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
     ae0:	e002      	b.n	ae8 <__addsf3>
     ae2:	bf00      	nop

00000ae4 <__aeabi_fsub>:
     ae4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

00000ae8 <__addsf3>:
     ae8:	0042      	lsls	r2, r0, #1
     aea:	bf1f      	itttt	ne
     aec:	ea5f 0341 	movsne.w	r3, r1, lsl #1
     af0:	ea92 0f03 	teqne	r2, r3
     af4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
     af8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     afc:	d06a      	beq.n	bd4 <__addsf3+0xec>
     afe:	ea4f 6212 	mov.w	r2, r2, lsr #24
     b02:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
     b06:	bfc1      	itttt	gt
     b08:	18d2      	addgt	r2, r2, r3
     b0a:	4041      	eorgt	r1, r0
     b0c:	4048      	eorgt	r0, r1
     b0e:	4041      	eorgt	r1, r0
     b10:	bfb8      	it	lt
     b12:	425b      	neglt	r3, r3
     b14:	2b19      	cmp	r3, #25
     b16:	bf88      	it	hi
     b18:	4770      	bxhi	lr
     b1a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
     b1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     b22:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
     b26:	bf18      	it	ne
     b28:	4240      	negne	r0, r0
     b2a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     b2e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
     b32:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
     b36:	bf18      	it	ne
     b38:	4249      	negne	r1, r1
     b3a:	ea92 0f03 	teq	r2, r3
     b3e:	d03f      	beq.n	bc0 <__addsf3+0xd8>
     b40:	f1a2 0201 	sub.w	r2, r2, #1
     b44:	fa41 fc03 	asr.w	ip, r1, r3
     b48:	eb10 000c 	adds.w	r0, r0, ip
     b4c:	f1c3 0320 	rsb	r3, r3, #32
     b50:	fa01 f103 	lsl.w	r1, r1, r3
     b54:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     b58:	d502      	bpl.n	b60 <__addsf3+0x78>
     b5a:	4249      	negs	r1, r1
     b5c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
     b60:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
     b64:	d313      	bcc.n	b8e <__addsf3+0xa6>
     b66:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
     b6a:	d306      	bcc.n	b7a <__addsf3+0x92>
     b6c:	0840      	lsrs	r0, r0, #1
     b6e:	ea4f 0131 	mov.w	r1, r1, rrx
     b72:	f102 0201 	add.w	r2, r2, #1
     b76:	2afe      	cmp	r2, #254	; 0xfe
     b78:	d251      	bcs.n	c1e <__addsf3+0x136>
     b7a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
     b7e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     b82:	bf08      	it	eq
     b84:	f020 0001 	biceq.w	r0, r0, #1
     b88:	ea40 0003 	orr.w	r0, r0, r3
     b8c:	4770      	bx	lr
     b8e:	0049      	lsls	r1, r1, #1
     b90:	eb40 0000 	adc.w	r0, r0, r0
     b94:	3a01      	subs	r2, #1
     b96:	bf28      	it	cs
     b98:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
     b9c:	d2ed      	bcs.n	b7a <__addsf3+0x92>
     b9e:	fab0 fc80 	clz	ip, r0
     ba2:	f1ac 0c08 	sub.w	ip, ip, #8
     ba6:	ebb2 020c 	subs.w	r2, r2, ip
     baa:	fa00 f00c 	lsl.w	r0, r0, ip
     bae:	bfaa      	itet	ge
     bb0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
     bb4:	4252      	neglt	r2, r2
     bb6:	4318      	orrge	r0, r3
     bb8:	bfbc      	itt	lt
     bba:	40d0      	lsrlt	r0, r2
     bbc:	4318      	orrlt	r0, r3
     bbe:	4770      	bx	lr
     bc0:	f092 0f00 	teq	r2, #0
     bc4:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
     bc8:	bf06      	itte	eq
     bca:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
     bce:	3201      	addeq	r2, #1
     bd0:	3b01      	subne	r3, #1
     bd2:	e7b5      	b.n	b40 <__addsf3+0x58>
     bd4:	ea4f 0341 	mov.w	r3, r1, lsl #1
     bd8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
     bdc:	bf18      	it	ne
     bde:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
     be2:	d021      	beq.n	c28 <__addsf3+0x140>
     be4:	ea92 0f03 	teq	r2, r3
     be8:	d004      	beq.n	bf4 <__addsf3+0x10c>
     bea:	f092 0f00 	teq	r2, #0
     bee:	bf08      	it	eq
     bf0:	4608      	moveq	r0, r1
     bf2:	4770      	bx	lr
     bf4:	ea90 0f01 	teq	r0, r1
     bf8:	bf1c      	itt	ne
     bfa:	2000      	movne	r0, #0
     bfc:	4770      	bxne	lr
     bfe:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
     c02:	d104      	bne.n	c0e <__addsf3+0x126>
     c04:	0040      	lsls	r0, r0, #1
     c06:	bf28      	it	cs
     c08:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
     c0c:	4770      	bx	lr
     c0e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
     c12:	bf3c      	itt	cc
     c14:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
     c18:	4770      	bxcc	lr
     c1a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
     c1e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
     c22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     c26:	4770      	bx	lr
     c28:	ea7f 6222 	mvns.w	r2, r2, asr #24
     c2c:	bf16      	itet	ne
     c2e:	4608      	movne	r0, r1
     c30:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
     c34:	4601      	movne	r1, r0
     c36:	0242      	lsls	r2, r0, #9
     c38:	bf06      	itte	eq
     c3a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
     c3e:	ea90 0f01 	teqeq	r0, r1
     c42:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
     c46:	4770      	bx	lr

00000c48 <__aeabi_ui2f>:
     c48:	f04f 0300 	mov.w	r3, #0
     c4c:	e004      	b.n	c58 <__aeabi_i2f+0x8>
     c4e:	bf00      	nop

00000c50 <__aeabi_i2f>:
     c50:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
     c54:	bf48      	it	mi
     c56:	4240      	negmi	r0, r0
     c58:	ea5f 0c00 	movs.w	ip, r0
     c5c:	bf08      	it	eq
     c5e:	4770      	bxeq	lr
     c60:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
     c64:	4601      	mov	r1, r0
     c66:	f04f 0000 	mov.w	r0, #0
     c6a:	e01c      	b.n	ca6 <__aeabi_l2f+0x2a>

00000c6c <__aeabi_ul2f>:
     c6c:	ea50 0201 	orrs.w	r2, r0, r1
     c70:	bf08      	it	eq
     c72:	4770      	bxeq	lr
     c74:	f04f 0300 	mov.w	r3, #0
     c78:	e00a      	b.n	c90 <__aeabi_l2f+0x14>
     c7a:	bf00      	nop

00000c7c <__aeabi_l2f>:
     c7c:	ea50 0201 	orrs.w	r2, r0, r1
     c80:	bf08      	it	eq
     c82:	4770      	bxeq	lr
     c84:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
     c88:	d502      	bpl.n	c90 <__aeabi_l2f+0x14>
     c8a:	4240      	negs	r0, r0
     c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     c90:	ea5f 0c01 	movs.w	ip, r1
     c94:	bf02      	ittt	eq
     c96:	4684      	moveq	ip, r0
     c98:	4601      	moveq	r1, r0
     c9a:	2000      	moveq	r0, #0
     c9c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
     ca0:	bf08      	it	eq
     ca2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
     ca6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
     caa:	fabc f28c 	clz	r2, ip
     cae:	3a08      	subs	r2, #8
     cb0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
     cb4:	db10      	blt.n	cd8 <__aeabi_l2f+0x5c>
     cb6:	fa01 fc02 	lsl.w	ip, r1, r2
     cba:	4463      	add	r3, ip
     cbc:	fa00 fc02 	lsl.w	ip, r0, r2
     cc0:	f1c2 0220 	rsb	r2, r2, #32
     cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     cc8:	fa20 f202 	lsr.w	r2, r0, r2
     ccc:	eb43 0002 	adc.w	r0, r3, r2
     cd0:	bf08      	it	eq
     cd2:	f020 0001 	biceq.w	r0, r0, #1
     cd6:	4770      	bx	lr
     cd8:	f102 0220 	add.w	r2, r2, #32
     cdc:	fa01 fc02 	lsl.w	ip, r1, r2
     ce0:	f1c2 0220 	rsb	r2, r2, #32
     ce4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
     ce8:	fa21 f202 	lsr.w	r2, r1, r2
     cec:	eb43 0002 	adc.w	r0, r3, r2
     cf0:	bf08      	it	eq
     cf2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     cf6:	4770      	bx	lr

00000cf8 <__aeabi_fmul>:
     cf8:	f04f 0cff 	mov.w	ip, #255	; 0xff
     cfc:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     d00:	bf1e      	ittt	ne
     d02:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     d06:	ea92 0f0c 	teqne	r2, ip
     d0a:	ea93 0f0c 	teqne	r3, ip
     d0e:	d06f      	beq.n	df0 <__aeabi_fmul+0xf8>
     d10:	441a      	add	r2, r3
     d12:	ea80 0c01 	eor.w	ip, r0, r1
     d16:	0240      	lsls	r0, r0, #9
     d18:	bf18      	it	ne
     d1a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
     d1e:	d01e      	beq.n	d5e <__aeabi_fmul+0x66>
     d20:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
     d24:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
     d28:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
     d2c:	fba0 3101 	umull	r3, r1, r0, r1
     d30:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     d34:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
     d38:	bf3e      	ittt	cc
     d3a:	0049      	lslcc	r1, r1, #1
     d3c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
     d40:	005b      	lslcc	r3, r3, #1
     d42:	ea40 0001 	orr.w	r0, r0, r1
     d46:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
     d4a:	2afd      	cmp	r2, #253	; 0xfd
     d4c:	d81d      	bhi.n	d8a <__aeabi_fmul+0x92>
     d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
     d52:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     d56:	bf08      	it	eq
     d58:	f020 0001 	biceq.w	r0, r0, #1
     d5c:	4770      	bx	lr
     d5e:	f090 0f00 	teq	r0, #0
     d62:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     d66:	bf08      	it	eq
     d68:	0249      	lsleq	r1, r1, #9
     d6a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     d6e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
     d72:	3a7f      	subs	r2, #127	; 0x7f
     d74:	bfc2      	ittt	gt
     d76:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     d7a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     d7e:	4770      	bxgt	lr
     d80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     d84:	f04f 0300 	mov.w	r3, #0
     d88:	3a01      	subs	r2, #1
     d8a:	dc5d      	bgt.n	e48 <__aeabi_fmul+0x150>
     d8c:	f112 0f19 	cmn.w	r2, #25
     d90:	bfdc      	itt	le
     d92:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
     d96:	4770      	bxle	lr
     d98:	f1c2 0200 	rsb	r2, r2, #0
     d9c:	0041      	lsls	r1, r0, #1
     d9e:	fa21 f102 	lsr.w	r1, r1, r2
     da2:	f1c2 0220 	rsb	r2, r2, #32
     da6:	fa00 fc02 	lsl.w	ip, r0, r2
     daa:	ea5f 0031 	movs.w	r0, r1, rrx
     dae:	f140 0000 	adc.w	r0, r0, #0
     db2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
     db6:	bf08      	it	eq
     db8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
     dbc:	4770      	bx	lr
     dbe:	f092 0f00 	teq	r2, #0
     dc2:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     dc6:	bf02      	ittt	eq
     dc8:	0040      	lsleq	r0, r0, #1
     dca:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     dce:	3a01      	subeq	r2, #1
     dd0:	d0f9      	beq.n	dc6 <__aeabi_fmul+0xce>
     dd2:	ea40 000c 	orr.w	r0, r0, ip
     dd6:	f093 0f00 	teq	r3, #0
     dda:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     dde:	bf02      	ittt	eq
     de0:	0049      	lsleq	r1, r1, #1
     de2:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     de6:	3b01      	subeq	r3, #1
     de8:	d0f9      	beq.n	dde <__aeabi_fmul+0xe6>
     dea:	ea41 010c 	orr.w	r1, r1, ip
     dee:	e78f      	b.n	d10 <__aeabi_fmul+0x18>
     df0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     df4:	ea92 0f0c 	teq	r2, ip
     df8:	bf18      	it	ne
     dfa:	ea93 0f0c 	teqne	r3, ip
     dfe:	d00a      	beq.n	e16 <__aeabi_fmul+0x11e>
     e00:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     e04:	bf18      	it	ne
     e06:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     e0a:	d1d8      	bne.n	dbe <__aeabi_fmul+0xc6>
     e0c:	ea80 0001 	eor.w	r0, r0, r1
     e10:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e14:	4770      	bx	lr
     e16:	f090 0f00 	teq	r0, #0
     e1a:	bf17      	itett	ne
     e1c:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
     e20:	4608      	moveq	r0, r1
     e22:	f091 0f00 	teqne	r1, #0
     e26:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
     e2a:	d014      	beq.n	e56 <__aeabi_fmul+0x15e>
     e2c:	ea92 0f0c 	teq	r2, ip
     e30:	d101      	bne.n	e36 <__aeabi_fmul+0x13e>
     e32:	0242      	lsls	r2, r0, #9
     e34:	d10f      	bne.n	e56 <__aeabi_fmul+0x15e>
     e36:	ea93 0f0c 	teq	r3, ip
     e3a:	d103      	bne.n	e44 <__aeabi_fmul+0x14c>
     e3c:	024b      	lsls	r3, r1, #9
     e3e:	bf18      	it	ne
     e40:	4608      	movne	r0, r1
     e42:	d108      	bne.n	e56 <__aeabi_fmul+0x15e>
     e44:	ea80 0001 	eor.w	r0, r0, r1
     e48:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
     e4c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e50:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     e54:	4770      	bx	lr
     e56:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
     e5a:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
     e5e:	4770      	bx	lr

00000e60 <__aeabi_fdiv>:
     e60:	f04f 0cff 	mov.w	ip, #255	; 0xff
     e64:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
     e68:	bf1e      	ittt	ne
     e6a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
     e6e:	ea92 0f0c 	teqne	r2, ip
     e72:	ea93 0f0c 	teqne	r3, ip
     e76:	d069      	beq.n	f4c <__aeabi_fdiv+0xec>
     e78:	eba2 0203 	sub.w	r2, r2, r3
     e7c:	ea80 0c01 	eor.w	ip, r0, r1
     e80:	0249      	lsls	r1, r1, #9
     e82:	ea4f 2040 	mov.w	r0, r0, lsl #9
     e86:	d037      	beq.n	ef8 <__aeabi_fdiv+0x98>
     e88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
     e8c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
     e90:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
     e94:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
     e98:	428b      	cmp	r3, r1
     e9a:	bf38      	it	cc
     e9c:	005b      	lslcc	r3, r3, #1
     e9e:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
     ea2:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
     ea6:	428b      	cmp	r3, r1
     ea8:	bf24      	itt	cs
     eaa:	1a5b      	subcs	r3, r3, r1
     eac:	ea40 000c 	orrcs.w	r0, r0, ip
     eb0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
     eb4:	bf24      	itt	cs
     eb6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
     eba:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     ebe:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
     ec2:	bf24      	itt	cs
     ec4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
     ec8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     ecc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
     ed0:	bf24      	itt	cs
     ed2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
     ed6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     eda:	011b      	lsls	r3, r3, #4
     edc:	bf18      	it	ne
     ede:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
     ee2:	d1e0      	bne.n	ea6 <__aeabi_fdiv+0x46>
     ee4:	2afd      	cmp	r2, #253	; 0xfd
     ee6:	f63f af50 	bhi.w	d8a <__aeabi_fmul+0x92>
     eea:	428b      	cmp	r3, r1
     eec:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
     ef0:	bf08      	it	eq
     ef2:	f020 0001 	biceq.w	r0, r0, #1
     ef6:	4770      	bx	lr
     ef8:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
     efc:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
     f00:	327f      	adds	r2, #127	; 0x7f
     f02:	bfc2      	ittt	gt
     f04:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
     f08:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
     f0c:	4770      	bxgt	lr
     f0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
     f12:	f04f 0300 	mov.w	r3, #0
     f16:	3a01      	subs	r2, #1
     f18:	e737      	b.n	d8a <__aeabi_fmul+0x92>
     f1a:	f092 0f00 	teq	r2, #0
     f1e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
     f22:	bf02      	ittt	eq
     f24:	0040      	lsleq	r0, r0, #1
     f26:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
     f2a:	3a01      	subeq	r2, #1
     f2c:	d0f9      	beq.n	f22 <__aeabi_fdiv+0xc2>
     f2e:	ea40 000c 	orr.w	r0, r0, ip
     f32:	f093 0f00 	teq	r3, #0
     f36:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
     f3a:	bf02      	ittt	eq
     f3c:	0049      	lsleq	r1, r1, #1
     f3e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
     f42:	3b01      	subeq	r3, #1
     f44:	d0f9      	beq.n	f3a <__aeabi_fdiv+0xda>
     f46:	ea41 010c 	orr.w	r1, r1, ip
     f4a:	e795      	b.n	e78 <__aeabi_fdiv+0x18>
     f4c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
     f50:	ea92 0f0c 	teq	r2, ip
     f54:	d108      	bne.n	f68 <__aeabi_fdiv+0x108>
     f56:	0242      	lsls	r2, r0, #9
     f58:	f47f af7d 	bne.w	e56 <__aeabi_fmul+0x15e>
     f5c:	ea93 0f0c 	teq	r3, ip
     f60:	f47f af70 	bne.w	e44 <__aeabi_fmul+0x14c>
     f64:	4608      	mov	r0, r1
     f66:	e776      	b.n	e56 <__aeabi_fmul+0x15e>
     f68:	ea93 0f0c 	teq	r3, ip
     f6c:	d104      	bne.n	f78 <__aeabi_fdiv+0x118>
     f6e:	024b      	lsls	r3, r1, #9
     f70:	f43f af4c 	beq.w	e0c <__aeabi_fmul+0x114>
     f74:	4608      	mov	r0, r1
     f76:	e76e      	b.n	e56 <__aeabi_fmul+0x15e>
     f78:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
     f7c:	bf18      	it	ne
     f7e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
     f82:	d1ca      	bne.n	f1a <__aeabi_fdiv+0xba>
     f84:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
     f88:	f47f af5c 	bne.w	e44 <__aeabi_fmul+0x14c>
     f8c:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
     f90:	f47f af3c 	bne.w	e0c <__aeabi_fmul+0x114>
     f94:	e75f      	b.n	e56 <__aeabi_fmul+0x15e>
     f96:	bf00      	nop

00000f98 <__aeabi_uldivmod>:
     f98:	b953      	cbnz	r3, fb0 <__aeabi_uldivmod+0x18>
     f9a:	b94a      	cbnz	r2, fb0 <__aeabi_uldivmod+0x18>
     f9c:	2900      	cmp	r1, #0
     f9e:	bf08      	it	eq
     fa0:	2800      	cmpeq	r0, #0
     fa2:	bf1c      	itt	ne
     fa4:	f04f 31ff 	movne.w	r1, #4294967295
     fa8:	f04f 30ff 	movne.w	r0, #4294967295
     fac:	f000 b974 	b.w	1298 <__aeabi_idiv0>
     fb0:	f1ad 0c08 	sub.w	ip, sp, #8
     fb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     fb8:	f000 f806 	bl	fc8 <__udivmoddi4>
     fbc:	f8dd e004 	ldr.w	lr, [sp, #4]
     fc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     fc4:	b004      	add	sp, #16
     fc6:	4770      	bx	lr

00000fc8 <__udivmoddi4>:
     fc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     fcc:	9e08      	ldr	r6, [sp, #32]
     fce:	460d      	mov	r5, r1
     fd0:	4604      	mov	r4, r0
     fd2:	4688      	mov	r8, r1
     fd4:	2b00      	cmp	r3, #0
     fd6:	d14d      	bne.n	1074 <__udivmoddi4+0xac>
     fd8:	428a      	cmp	r2, r1
     fda:	4694      	mov	ip, r2
     fdc:	d968      	bls.n	10b0 <__udivmoddi4+0xe8>
     fde:	fab2 f282 	clz	r2, r2
     fe2:	b152      	cbz	r2, ffa <__udivmoddi4+0x32>
     fe4:	fa01 f302 	lsl.w	r3, r1, r2
     fe8:	f1c2 0120 	rsb	r1, r2, #32
     fec:	fa20 f101 	lsr.w	r1, r0, r1
     ff0:	fa0c fc02 	lsl.w	ip, ip, r2
     ff4:	ea41 0803 	orr.w	r8, r1, r3
     ff8:	4094      	lsls	r4, r2
     ffa:	ea4f 451c 	mov.w	r5, ip, lsr #16
     ffe:	0c21      	lsrs	r1, r4, #16
    1000:	fbb8 fef5 	udiv	lr, r8, r5
    1004:	fa1f f78c 	uxth.w	r7, ip
    1008:	fb05 831e 	mls	r3, r5, lr, r8
    100c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
    1010:	fb0e f107 	mul.w	r1, lr, r7
    1014:	4299      	cmp	r1, r3
    1016:	d90b      	bls.n	1030 <__udivmoddi4+0x68>
    1018:	eb1c 0303 	adds.w	r3, ip, r3
    101c:	f10e 30ff 	add.w	r0, lr, #4294967295
    1020:	f080 811e 	bcs.w	1260 <__udivmoddi4+0x298>
    1024:	4299      	cmp	r1, r3
    1026:	f240 811b 	bls.w	1260 <__udivmoddi4+0x298>
    102a:	f1ae 0e02 	sub.w	lr, lr, #2
    102e:	4463      	add	r3, ip
    1030:	1a5b      	subs	r3, r3, r1
    1032:	b2a4      	uxth	r4, r4
    1034:	fbb3 f0f5 	udiv	r0, r3, r5
    1038:	fb05 3310 	mls	r3, r5, r0, r3
    103c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    1040:	fb00 f707 	mul.w	r7, r0, r7
    1044:	42a7      	cmp	r7, r4
    1046:	d90a      	bls.n	105e <__udivmoddi4+0x96>
    1048:	eb1c 0404 	adds.w	r4, ip, r4
    104c:	f100 33ff 	add.w	r3, r0, #4294967295
    1050:	f080 8108 	bcs.w	1264 <__udivmoddi4+0x29c>
    1054:	42a7      	cmp	r7, r4
    1056:	f240 8105 	bls.w	1264 <__udivmoddi4+0x29c>
    105a:	4464      	add	r4, ip
    105c:	3802      	subs	r0, #2
    105e:	1be4      	subs	r4, r4, r7
    1060:	ea40 400e 	orr.w	r0, r0, lr, lsl #16
    1064:	2100      	movs	r1, #0
    1066:	b11e      	cbz	r6, 1070 <__udivmoddi4+0xa8>
    1068:	40d4      	lsrs	r4, r2
    106a:	2300      	movs	r3, #0
    106c:	e9c6 4300 	strd	r4, r3, [r6]
    1070:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1074:	428b      	cmp	r3, r1
    1076:	d908      	bls.n	108a <__udivmoddi4+0xc2>
    1078:	2e00      	cmp	r6, #0
    107a:	f000 80ee 	beq.w	125a <__udivmoddi4+0x292>
    107e:	2100      	movs	r1, #0
    1080:	e9c6 0500 	strd	r0, r5, [r6]
    1084:	4608      	mov	r0, r1
    1086:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    108a:	fab3 f183 	clz	r1, r3
    108e:	2900      	cmp	r1, #0
    1090:	d14a      	bne.n	1128 <__udivmoddi4+0x160>
    1092:	42ab      	cmp	r3, r5
    1094:	d302      	bcc.n	109c <__udivmoddi4+0xd4>
    1096:	4282      	cmp	r2, r0
    1098:	f200 80f9 	bhi.w	128e <__udivmoddi4+0x2c6>
    109c:	1a84      	subs	r4, r0, r2
    109e:	eb65 0303 	sbc.w	r3, r5, r3
    10a2:	2001      	movs	r0, #1
    10a4:	4698      	mov	r8, r3
    10a6:	2e00      	cmp	r6, #0
    10a8:	d0e2      	beq.n	1070 <__udivmoddi4+0xa8>
    10aa:	e9c6 4800 	strd	r4, r8, [r6]
    10ae:	e7df      	b.n	1070 <__udivmoddi4+0xa8>
    10b0:	b902      	cbnz	r2, 10b4 <__udivmoddi4+0xec>
    10b2:	deff      	udf	#255	; 0xff
    10b4:	fab2 f282 	clz	r2, r2
    10b8:	2a00      	cmp	r2, #0
    10ba:	f040 8091 	bne.w	11e0 <__udivmoddi4+0x218>
    10be:	eba1 050c 	sub.w	r5, r1, ip
    10c2:	ea4f 471c 	mov.w	r7, ip, lsr #16
    10c6:	fa1f fe8c 	uxth.w	lr, ip
    10ca:	2101      	movs	r1, #1
    10cc:	fbb5 f3f7 	udiv	r3, r5, r7
    10d0:	fb07 5013 	mls	r0, r7, r3, r5
    10d4:	0c25      	lsrs	r5, r4, #16
    10d6:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
    10da:	fb0e f003 	mul.w	r0, lr, r3
    10de:	42a8      	cmp	r0, r5
    10e0:	d908      	bls.n	10f4 <__udivmoddi4+0x12c>
    10e2:	eb1c 0505 	adds.w	r5, ip, r5
    10e6:	f103 38ff 	add.w	r8, r3, #4294967295
    10ea:	d202      	bcs.n	10f2 <__udivmoddi4+0x12a>
    10ec:	42a8      	cmp	r0, r5
    10ee:	f200 80cb 	bhi.w	1288 <__udivmoddi4+0x2c0>
    10f2:	4643      	mov	r3, r8
    10f4:	1a2d      	subs	r5, r5, r0
    10f6:	b2a4      	uxth	r4, r4
    10f8:	fbb5 f0f7 	udiv	r0, r5, r7
    10fc:	fb07 5510 	mls	r5, r7, r0, r5
    1100:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    1104:	fb0e fe00 	mul.w	lr, lr, r0
    1108:	45a6      	cmp	lr, r4
    110a:	d908      	bls.n	111e <__udivmoddi4+0x156>
    110c:	eb1c 0404 	adds.w	r4, ip, r4
    1110:	f100 35ff 	add.w	r5, r0, #4294967295
    1114:	d202      	bcs.n	111c <__udivmoddi4+0x154>
    1116:	45a6      	cmp	lr, r4
    1118:	f200 80bb 	bhi.w	1292 <__udivmoddi4+0x2ca>
    111c:	4628      	mov	r0, r5
    111e:	eba4 040e 	sub.w	r4, r4, lr
    1122:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
    1126:	e79e      	b.n	1066 <__udivmoddi4+0x9e>
    1128:	f1c1 0720 	rsb	r7, r1, #32
    112c:	408b      	lsls	r3, r1
    112e:	fa22 fc07 	lsr.w	ip, r2, r7
    1132:	ea4c 0c03 	orr.w	ip, ip, r3
    1136:	fa20 f407 	lsr.w	r4, r0, r7
    113a:	fa05 f301 	lsl.w	r3, r5, r1
    113e:	431c      	orrs	r4, r3
    1140:	40fd      	lsrs	r5, r7
    1142:	ea4f 491c 	mov.w	r9, ip, lsr #16
    1146:	fa00 f301 	lsl.w	r3, r0, r1
    114a:	fbb5 f8f9 	udiv	r8, r5, r9
    114e:	0c20      	lsrs	r0, r4, #16
    1150:	fa1f fe8c 	uxth.w	lr, ip
    1154:	fb09 5518 	mls	r5, r9, r8, r5
    1158:	ea40 4505 	orr.w	r5, r0, r5, lsl #16
    115c:	fb08 f00e 	mul.w	r0, r8, lr
    1160:	42a8      	cmp	r0, r5
    1162:	fa02 f201 	lsl.w	r2, r2, r1
    1166:	d90b      	bls.n	1180 <__udivmoddi4+0x1b8>
    1168:	eb1c 0505 	adds.w	r5, ip, r5
    116c:	f108 3aff 	add.w	sl, r8, #4294967295
    1170:	f080 8088 	bcs.w	1284 <__udivmoddi4+0x2bc>
    1174:	42a8      	cmp	r0, r5
    1176:	f240 8085 	bls.w	1284 <__udivmoddi4+0x2bc>
    117a:	f1a8 0802 	sub.w	r8, r8, #2
    117e:	4465      	add	r5, ip
    1180:	1a2d      	subs	r5, r5, r0
    1182:	b2a4      	uxth	r4, r4
    1184:	fbb5 f0f9 	udiv	r0, r5, r9
    1188:	fb09 5510 	mls	r5, r9, r0, r5
    118c:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1190:	fb00 fe0e 	mul.w	lr, r0, lr
    1194:	45ae      	cmp	lr, r5
    1196:	d908      	bls.n	11aa <__udivmoddi4+0x1e2>
    1198:	eb1c 0505 	adds.w	r5, ip, r5
    119c:	f100 34ff 	add.w	r4, r0, #4294967295
    11a0:	d26c      	bcs.n	127c <__udivmoddi4+0x2b4>
    11a2:	45ae      	cmp	lr, r5
    11a4:	d96a      	bls.n	127c <__udivmoddi4+0x2b4>
    11a6:	3802      	subs	r0, #2
    11a8:	4465      	add	r5, ip
    11aa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11ae:	fba0 9402 	umull	r9, r4, r0, r2
    11b2:	eba5 050e 	sub.w	r5, r5, lr
    11b6:	42a5      	cmp	r5, r4
    11b8:	46c8      	mov	r8, r9
    11ba:	46a6      	mov	lr, r4
    11bc:	d356      	bcc.n	126c <__udivmoddi4+0x2a4>
    11be:	d053      	beq.n	1268 <__udivmoddi4+0x2a0>
    11c0:	b15e      	cbz	r6, 11da <__udivmoddi4+0x212>
    11c2:	ebb3 0208 	subs.w	r2, r3, r8
    11c6:	eb65 050e 	sbc.w	r5, r5, lr
    11ca:	fa05 f707 	lsl.w	r7, r5, r7
    11ce:	fa22 f301 	lsr.w	r3, r2, r1
    11d2:	40cd      	lsrs	r5, r1
    11d4:	431f      	orrs	r7, r3
    11d6:	e9c6 7500 	strd	r7, r5, [r6]
    11da:	2100      	movs	r1, #0
    11dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    11e0:	f1c2 0320 	rsb	r3, r2, #32
    11e4:	fa20 f103 	lsr.w	r1, r0, r3
    11e8:	fa0c fc02 	lsl.w	ip, ip, r2
    11ec:	fa25 f303 	lsr.w	r3, r5, r3
    11f0:	4095      	lsls	r5, r2
    11f2:	430d      	orrs	r5, r1
    11f4:	ea4f 471c 	mov.w	r7, ip, lsr #16
    11f8:	fa1f fe8c 	uxth.w	lr, ip
    11fc:	fbb3 f1f7 	udiv	r1, r3, r7
    1200:	fb07 3011 	mls	r0, r7, r1, r3
    1204:	0c2b      	lsrs	r3, r5, #16
    1206:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
    120a:	fb01 f00e 	mul.w	r0, r1, lr
    120e:	4298      	cmp	r0, r3
    1210:	fa04 f402 	lsl.w	r4, r4, r2
    1214:	d908      	bls.n	1228 <__udivmoddi4+0x260>
    1216:	eb1c 0303 	adds.w	r3, ip, r3
    121a:	f101 38ff 	add.w	r8, r1, #4294967295
    121e:	d22f      	bcs.n	1280 <__udivmoddi4+0x2b8>
    1220:	4298      	cmp	r0, r3
    1222:	d92d      	bls.n	1280 <__udivmoddi4+0x2b8>
    1224:	3902      	subs	r1, #2
    1226:	4463      	add	r3, ip
    1228:	1a1b      	subs	r3, r3, r0
    122a:	b2ad      	uxth	r5, r5
    122c:	fbb3 f0f7 	udiv	r0, r3, r7
    1230:	fb07 3310 	mls	r3, r7, r0, r3
    1234:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1238:	fb00 f30e 	mul.w	r3, r0, lr
    123c:	42ab      	cmp	r3, r5
    123e:	d908      	bls.n	1252 <__udivmoddi4+0x28a>
    1240:	eb1c 0505 	adds.w	r5, ip, r5
    1244:	f100 38ff 	add.w	r8, r0, #4294967295
    1248:	d216      	bcs.n	1278 <__udivmoddi4+0x2b0>
    124a:	42ab      	cmp	r3, r5
    124c:	d914      	bls.n	1278 <__udivmoddi4+0x2b0>
    124e:	3802      	subs	r0, #2
    1250:	4465      	add	r5, ip
    1252:	1aed      	subs	r5, r5, r3
    1254:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1258:	e738      	b.n	10cc <__udivmoddi4+0x104>
    125a:	4631      	mov	r1, r6
    125c:	4630      	mov	r0, r6
    125e:	e707      	b.n	1070 <__udivmoddi4+0xa8>
    1260:	4686      	mov	lr, r0
    1262:	e6e5      	b.n	1030 <__udivmoddi4+0x68>
    1264:	4618      	mov	r0, r3
    1266:	e6fa      	b.n	105e <__udivmoddi4+0x96>
    1268:	454b      	cmp	r3, r9
    126a:	d2a9      	bcs.n	11c0 <__udivmoddi4+0x1f8>
    126c:	ebb9 0802 	subs.w	r8, r9, r2
    1270:	eb64 0e0c 	sbc.w	lr, r4, ip
    1274:	3801      	subs	r0, #1
    1276:	e7a3      	b.n	11c0 <__udivmoddi4+0x1f8>
    1278:	4640      	mov	r0, r8
    127a:	e7ea      	b.n	1252 <__udivmoddi4+0x28a>
    127c:	4620      	mov	r0, r4
    127e:	e794      	b.n	11aa <__udivmoddi4+0x1e2>
    1280:	4641      	mov	r1, r8
    1282:	e7d1      	b.n	1228 <__udivmoddi4+0x260>
    1284:	46d0      	mov	r8, sl
    1286:	e77b      	b.n	1180 <__udivmoddi4+0x1b8>
    1288:	3b02      	subs	r3, #2
    128a:	4465      	add	r5, ip
    128c:	e732      	b.n	10f4 <__udivmoddi4+0x12c>
    128e:	4608      	mov	r0, r1
    1290:	e709      	b.n	10a6 <__udivmoddi4+0xde>
    1292:	4464      	add	r4, ip
    1294:	3802      	subs	r0, #2
    1296:	e742      	b.n	111e <__udivmoddi4+0x156>

00001298 <__aeabi_idiv0>:
    1298:	4770      	bx	lr
    129a:	bf00      	nop
    129c:	0000      	movs	r0, r0
	...

000012a0 <brightness_task>:
		k_msleep(500);
	}
}

void brightness_task()
{
    12a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    12a4:	b094      	sub	sp, #80	; 0x50
    12a6:	466d      	mov	r5, sp
	float light_data[LIGHT_BUFFER_COUNT];
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    12a8:	2400      	movs	r4, #0
		light_data[i] = AnalogRead(4);
    12aa:	2004      	movs	r0, #4
    12ac:	f000 f85c 	bl	1368 <AnalogRead>
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    12b0:	3401      	adds	r4, #1
    12b2:	2c14      	cmp	r4, #20
		light_data[i] = AnalogRead(4);
    12b4:	f845 0b04 	str.w	r0, [r5], #4
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    12b8:	d1f7      	bne.n	12aa <brightness_task+0xa>
		}
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
		float light_value = sum / LIGHT_BUFFER_COUNT;
		//printf("light =%f\n",light_value);
		brightness_value = 75.55 * light_value;
    12ba:	a717      	add	r7, pc, #92	; (adr r7, 1318 <brightness_task+0x78>)
    12bc:	e9d7 6700 	ldrd	r6, r7, [r7]
		float light_value = sum / LIGHT_BUFFER_COUNT;
    12c0:	f8df 905c 	ldr.w	r9, [pc, #92]	; 1320 <brightness_task+0x80>
		float sum = 0;
    12c4:	f04f 0a00 	mov.w	sl, #0
	for (int i = 0; i < LIGHT_BUFFER_COUNT; i++)
    12c8:	46e8      	mov	r8, sp
    12ca:	2513      	movs	r5, #19
		float sum = 0;
    12cc:	4654      	mov	r4, sl
			light_data[i] = light_data[i + 1];
    12ce:	f8d8 1004 	ldr.w	r1, [r8, #4]
    12d2:	f848 1b04 	str.w	r1, [r8], #4
			sum = sum + light_data[i];
    12d6:	4620      	mov	r0, r4
    12d8:	f7ff fc06 	bl	ae8 <__addsf3>
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    12dc:	3d01      	subs	r5, #1
			sum = sum + light_data[i];
    12de:	4604      	mov	r4, r0
		for (int i = 0; i < LIGHT_BUFFER_COUNT - 1; i++)
    12e0:	d1f5      	bne.n	12ce <brightness_task+0x2e>
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    12e2:	2004      	movs	r0, #4
    12e4:	f000 f840 	bl	1368 <AnalogRead>
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    12e8:	4621      	mov	r1, r4
		light_data[LIGHT_BUFFER_COUNT - 1] = AnalogRead(4);
    12ea:	9013      	str	r0, [sp, #76]	; 0x4c
		sum = sum + light_data[LIGHT_BUFFER_COUNT - 1];
    12ec:	f7ff fbfc 	bl	ae8 <__addsf3>
		float light_value = sum / LIGHT_BUFFER_COUNT;
    12f0:	4649      	mov	r1, r9
    12f2:	f7ff fdb5 	bl	e60 <__aeabi_fdiv>
		brightness_value = 75.55 * light_value;
    12f6:	f7ff f867 	bl	3c8 <__aeabi_f2d>
    12fa:	4632      	mov	r2, r6
    12fc:	463b      	mov	r3, r7
    12fe:	f7ff f8bb 	bl	478 <__aeabi_dmul>
    1302:	f7ff fb53 	bl	9ac <__aeabi_d2iz>
    1306:	4b07      	ldr	r3, [pc, #28]	; (1324 <brightness_task+0x84>)
    1308:	6018      	str	r0, [r3, #0]
		k_msleep(1000);
    130a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    130e:	f01f fd4a 	bl	20da6 <k_msleep.isra.0>
		hrs_notify();
    1312:	f001 fbc7 	bl	2aa4 <hrs_notify>
	{
    1316:	e7d7      	b.n	12c8 <brightness_task+0x28>
    1318:	33333333 	.word	0x33333333
    131c:	4052e333 	.word	0x4052e333
    1320:	41a00000 	.word	0x41a00000
    1324:	20000228 	.word	0x20000228

00001328 <max30208_read_temp>:
        // printk("READING FROM MAX30208 FIFO : FAILED\n");
    return rslt;
}

u16_t max30208_read_temp(float *value)
{
    1328:	b537      	push	{r0, r1, r2, r4, r5, lr}
    132a:	4605      	mov	r5, r0
    int temp;
    u16_t rslt = 0x00;
    rslt |= max30208_read_fifo(&temp);
    132c:	a801      	add	r0, sp, #4
    132e:	f020 f928 	bl	21582 <max30208_read_fifo>
    if (temp & 0x8000)
    1332:	9b01      	ldr	r3, [sp, #4]
    1334:	041a      	lsls	r2, r3, #16
    {
        temp = ~(temp - 1);
    1336:	bf44      	itt	mi
    1338:	425b      	negmi	r3, r3
    133a:	9301      	strmi	r3, [sp, #4]
    rslt |= max30208_read_fifo(&temp);
    133c:	4604      	mov	r4, r0
    }
    *value = (float)temp * 0.005;
    133e:	9801      	ldr	r0, [sp, #4]
    1340:	f7ff fc86 	bl	c50 <__aeabi_i2f>
    1344:	f7ff f840 	bl	3c8 <__aeabi_f2d>
    1348:	a305      	add	r3, pc, #20	; (adr r3, 1360 <max30208_read_temp+0x38>)
    134a:	e9d3 2300 	ldrd	r2, r3, [r3]
    134e:	f7ff f893 	bl	478 <__aeabi_dmul>
    1352:	f7ff fb73 	bl	a3c <__aeabi_d2f>
    1356:	6028      	str	r0, [r5, #0]
    return rslt;
}
    1358:	4620      	mov	r0, r4
    135a:	b003      	add	sp, #12
    135c:	bd30      	pop	{r4, r5, pc}
    135e:	bf00      	nop
    1360:	47ae147b 	.word	0x47ae147b
    1364:	3f747ae1 	.word	0x3f747ae1

00001368 <AnalogRead>:

// ------------------------------------------------
// high level read adc channel and convert to float voltage
// ------------------------------------------------
float AnalogRead(int channel)
{
    1368:	b5f0      	push	{r4, r5, r6, r7, lr}
		.channels    = BIT(channel),		// bit mask of channels to read
    136a:	2301      	movs	r3, #1
{
    136c:	b087      	sub	sp, #28
		.channels    = BIT(channel),		// bit mask of channels to read
    136e:	4083      	lsls	r3, r0
	const struct adc_sequence sequence = {
    1370:	9302      	str	r3, [sp, #8]
    1372:	230c      	movs	r3, #12
    1374:	2600      	movs	r6, #0
    1376:	9304      	str	r3, [sp, #16]
    1378:	4f27      	ldr	r7, [pc, #156]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    137a:	9601      	str	r6, [sp, #4]
    137c:	230a      	movs	r3, #10
{
    137e:	4605      	mov	r5, r0
	const struct adc_sequence sequence = {
    1380:	f8ad 3014 	strh.w	r3, [sp, #20]
    1384:	9703      	str	r7, [sp, #12]
    1386:	f88d 6016 	strb.w	r6, [sp, #22]
	struct device *adc_dev = getAdcDevice();
    138a:	f002 fbc9 	bl	3b20 <getAdcDevice>
	if(_LastChannel != channel)
    138e:	4b23      	ldr	r3, [pc, #140]	; (141c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x94>)
    1390:	781a      	ldrb	r2, [r3, #0]
    1392:	4295      	cmp	r5, r2
	struct device *adc_dev = getAdcDevice();
    1394:	4604      	mov	r4, r0
	if(_LastChannel != channel)
    1396:	d00c      	beq.n	13b2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x2a>
		_IsInitialized = false;
    1398:	4a21      	ldr	r2, [pc, #132]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
		_LastChannel = channel;
    139a:	701d      	strb	r5, [r3, #0]
		_IsInitialized = false;
    139c:	7016      	strb	r6, [r2, #0]
	if ( adc_dev != NULL && !_IsInitialized)
    139e:	b970      	cbnz	r0, 13be <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x36>
{
    13a0:	2400      	movs	r4, #0
	memset(m_sample_buffer, 0, sizeof(m_sample_buffer));
    13a2:	481d      	ldr	r0, [pc, #116]	; (1418 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x90>)
    13a4:	220c      	movs	r2, #12
    13a6:	2100      	movs	r1, #0
    13a8:	f023 f889 	bl	244be <memset>
	if (adc_dev)
    13ac:	b9b4      	cbnz	r4, 13dc <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x54>

	s16_t sv = readOneChannel(channel);
	if(sv == -1)
	{
		return sv;
    13ae:	481d      	ldr	r0, [pc, #116]	; (1424 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x9c>)
    13b0:	e02c      	b.n	140c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x84>
	if ( adc_dev != NULL && !_IsInitialized)
    13b2:	2800      	cmp	r0, #0
    13b4:	d0f4      	beq.n	13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>
    13b6:	4b1a      	ldr	r3, [pc, #104]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    13b8:	781b      	ldrb	r3, [r3, #0]
    13ba:	2b00      	cmp	r3, #0
    13bc:	d1f1      	bne.n	13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
		m_1st_channel_cfg.channel_id = channel;
    13be:	491a      	ldr	r1, [pc, #104]	; (1428 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa0>)
    13c0:	790b      	ldrb	r3, [r1, #4]
    13c2:	f365 0304 	bfi	r3, r5, #0, #5
    13c6:	710b      	strb	r3, [r1, #4]
					   const struct adc_channel_cfg *channel_cfg)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->channel_setup(dev, channel_cfg);
    13c8:	68a3      	ldr	r3, [r4, #8]
    13ca:	4620      	mov	r0, r4
    13cc:	681b      	ldr	r3, [r3, #0]
    13ce:	4798      	blx	r3
		if(ret != 0)
    13d0:	2800      	cmp	r0, #0
    13d2:	d1e5      	bne.n	13a0 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x18>
			_IsInitialized = true;	// we don't have any other analog users
    13d4:	4b12      	ldr	r3, [pc, #72]	; (1420 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x98>)
    13d6:	2201      	movs	r2, #1
    13d8:	701a      	strb	r2, [r3, #0]
    13da:	e7e2      	b.n	13a2 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x1a>
				  const struct adc_sequence *sequence)
{
	const struct adc_driver_api *api =
				(const struct adc_driver_api *)dev->api;

	return api->read(dev, sequence);
    13dc:	68a3      	ldr	r3, [r4, #8]
    13de:	a901      	add	r1, sp, #4
    13e0:	685b      	ldr	r3, [r3, #4]
    13e2:	4620      	mov	r0, r4
    13e4:	4798      	blx	r3
		if(ret == 0)
    13e6:	2800      	cmp	r0, #0
    13e8:	d1e1      	bne.n	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
			sample_value = m_sample_buffer[0];
    13ea:	f9b7 0000 	ldrsh.w	r0, [r7]
	if(sv == -1)
    13ee:	1c43      	adds	r3, r0, #1
    13f0:	d0dd      	beq.n	13ae <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x26>
			multip = 16384;
			break;
	}
	
	// the 3.6 relates to the voltage divider being used in my circuit
	float fout = (sv * 3.6 / multip);
    13f2:	f7fe ffd7 	bl	3a4 <__aeabi_i2d>
    13f6:	a306      	add	r3, pc, #24	; (adr r3, 1410 <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0x88>)
    13f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    13fc:	f7ff f83c 	bl	478 <__aeabi_dmul>
    1400:	4b0a      	ldr	r3, [pc, #40]	; (142c <CONFIG_BT_CONN_PARAM_UPDATE_TIMEOUT+0xa4>)
    1402:	2200      	movs	r2, #0
    1404:	f7ff f838 	bl	478 <__aeabi_dmul>
    1408:	f7ff fb18 	bl	a3c <__aeabi_d2f>
	return fout;
    140c:	b007      	add	sp, #28
    140e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    1410:	cccccccd 	.word	0xcccccccd
    1414:	400ccccc 	.word	0x400ccccc
    1418:	2000ed4e 	.word	0x2000ed4e
    141c:	200008f3 	.word	0x200008f3
    1420:	2000ed81 	.word	0x2000ed81
    1424:	bf800000 	.word	0xbf800000
    1428:	200007ae 	.word	0x200007ae
    142c:	3f500000 	.word	0x3f500000

00001430 <hts_indicate>:
	printk("temp device is %p, name is %s\n", temp_dev,
	       temp_dev->name);
}

void hts_indicate(void)
{
    1430:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Temperature measurements simulation */
	struct sensor_value temp_value;

	if (simulate_htm) {
    1432:	4b3d      	ldr	r3, [pc, #244]	; (1528 <hts_indicate+0xf8>)
    1434:	781b      	ldrb	r3, [r3, #0]
    1436:	2b00      	cmp	r3, #0
    1438:	d03f      	beq.n	14ba <hts_indicate+0x8a>
		static double temperature = 20U;
		uint32_t mantissa;
		uint8_t exponent;
		int r;

		if (indicating) {
    143a:	4d3c      	ldr	r5, [pc, #240]	; (152c <hts_indicate+0xfc>)
    143c:	782b      	ldrb	r3, [r5, #0]
    143e:	2b00      	cmp	r3, #0
    1440:	d13b      	bne.n	14ba <hts_indicate+0x8a>
			return;
		}

		if (!temp_dev) {
    1442:	4e3b      	ldr	r6, [pc, #236]	; (1530 <hts_indicate+0x100>)
    1444:	4c3b      	ldr	r4, [pc, #236]	; (1534 <hts_indicate+0x104>)
    1446:	6830      	ldr	r0, [r6, #0]
    1448:	2800      	cmp	r0, #0
    144a:	d13d      	bne.n	14c8 <hts_indicate+0x98>
			temperature++;
    144c:	4b3a      	ldr	r3, [pc, #232]	; (1538 <hts_indicate+0x108>)
    144e:	2200      	movs	r2, #0
    1450:	e9d4 0100 	ldrd	r0, r1, [r4]
    1454:	f7fe fe5a 	bl	10c <__adddf3>
			if (temperature == 30U) {
    1458:	4b38      	ldr	r3, [pc, #224]	; (153c <hts_indicate+0x10c>)
    145a:	2200      	movs	r2, #0
			temperature++;
    145c:	4606      	mov	r6, r0
    145e:	460f      	mov	r7, r1
			if (temperature == 30U) {
    1460:	f7ff fa72 	bl	948 <__aeabi_dcmpeq>
    1464:	bb58      	cbnz	r0, 14be <hts_indicate+0x8e>
			temperature++;
    1466:	e9c4 6700 	strd	r6, r7, [r4]
		}

		temperature = sensor_value_to_double(&temp_value);

gatt_indicate:
		printf("temperature is %g C\n", temperature);
    146a:	e9d4 2300 	ldrd	r2, r3, [r4]
    146e:	4834      	ldr	r0, [pc, #208]	; (1540 <hts_indicate+0x110>)
    1470:	f006 fe36 	bl	80e0 <printf>

		mantissa = (uint32_t)(temperature * 100);
    1474:	4b33      	ldr	r3, [pc, #204]	; (1544 <hts_indicate+0x114>)
    1476:	2200      	movs	r2, #0
    1478:	e9d4 0100 	ldrd	r0, r1, [r4]
    147c:	f7fe fffc 	bl	478 <__aeabi_dmul>
    1480:	f7ff fabc 	bl	9fc <__aeabi_d2uiz>
		exponent = (uint8_t)-2;

		htm[0] = 0; /* temperature in celcius */
    1484:	4a30      	ldr	r2, [pc, #192]	; (1548 <hts_indicate+0x118>)
		mantissa = (uint32_t)(temperature * 100);
    1486:	4603      	mov	r3, r0
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(uint16_t val, uint8_t dst[2])
{
	dst[0] = val;
	dst[1] = val >> 8;
    1488:	f3c3 2107 	ubfx	r1, r3, #8, #8
	dst[0] = val;
    148c:	7053      	strb	r3, [r2, #1]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le24(uint32_t val, uint8_t dst[3])
{
	sys_put_le16(val, dst);
	dst[2] = val >> 16;
    148e:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
    1490:	7091      	strb	r1, [r2, #2]
	dst[2] = val >> 16;
    1492:	70d3      	strb	r3, [r2, #3]
		sys_put_le24(mantissa, (uint8_t *)&htm[1]);
		htm[4] = exponent;

		ind_params.attr = &hts_svc.attrs[2];
    1494:	492d      	ldr	r1, [pc, #180]	; (154c <hts_indicate+0x11c>)
		htm[4] = exponent;
    1496:	23fe      	movs	r3, #254	; 0xfe
    1498:	7113      	strb	r3, [r2, #4]
		ind_params.attr = &hts_svc.attrs[2];
    149a:	4b2d      	ldr	r3, [pc, #180]	; (1550 <hts_indicate+0x120>)
    149c:	604b      	str	r3, [r1, #4]
		ind_params.func = indicate_cb;
    149e:	4b2d      	ldr	r3, [pc, #180]	; (1554 <hts_indicate+0x124>)
    14a0:	608b      	str	r3, [r1, #8]
		ind_params.destroy = indicate_destroy;
    14a2:	4b2d      	ldr	r3, [pc, #180]	; (1558 <hts_indicate+0x128>)
		htm[0] = 0; /* temperature in celcius */
    14a4:	2000      	movs	r0, #0
		ind_params.data = &htm;
    14a6:	e9c1 3203 	strd	r3, r2, [r1, #12]
		htm[0] = 0; /* temperature in celcius */
    14aa:	7010      	strb	r0, [r2, #0]
		ind_params.len = sizeof(htm);
    14ac:	2305      	movs	r3, #5
    14ae:	828b      	strh	r3, [r1, #20]

		if (bt_gatt_indicate(NULL, &ind_params) == 0) {
    14b0:	f00c fe10 	bl	e0d4 <bt_gatt_indicate>
    14b4:	b908      	cbnz	r0, 14ba <hts_indicate+0x8a>
			indicating = 1U;
    14b6:	2301      	movs	r3, #1
    14b8:	702b      	strb	r3, [r5, #0]
		}
	}
}
    14ba:	b003      	add	sp, #12
    14bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
				temperature = 20U;
    14be:	4b27      	ldr	r3, [pc, #156]	; (155c <hts_indicate+0x12c>)
    14c0:	2200      	movs	r2, #0
    14c2:	e9c4 2300 	strd	r2, r3, [r4]
    14c6:	e7d0      	b.n	146a <hts_indicate+0x3a>
static inline int z_impl_sensor_sample_fetch(const struct device *dev)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->sample_fetch(dev, SENSOR_CHAN_ALL);
    14c8:	6883      	ldr	r3, [r0, #8]
    14ca:	2138      	movs	r1, #56	; 0x38
    14cc:	68db      	ldr	r3, [r3, #12]
    14ce:	4798      	blx	r3
		if (r) {
    14d0:	4601      	mov	r1, r0
    14d2:	b110      	cbz	r0, 14da <hts_indicate+0xaa>
			printk("sensor_sample_fetch failed return: %d\n", r);
    14d4:	4822      	ldr	r0, [pc, #136]	; (1560 <hts_indicate+0x130>)
    14d6:	f020 fb25 	bl	21b24 <printk>
		r = sensor_channel_get(temp_dev, SENSOR_CHAN_DIE_TEMP,
    14da:	6830      	ldr	r0, [r6, #0]
					    struct sensor_value *val)
{
	const struct sensor_driver_api *api =
		(const struct sensor_driver_api *)dev->api;

	return api->channel_get(dev, chan, val);
    14dc:	6883      	ldr	r3, [r0, #8]
    14de:	210c      	movs	r1, #12
    14e0:	691b      	ldr	r3, [r3, #16]
    14e2:	466a      	mov	r2, sp
    14e4:	4798      	blx	r3
		if (r) {
    14e6:	4601      	mov	r1, r0
    14e8:	b110      	cbz	r0, 14f0 <hts_indicate+0xc0>
			printk("sensor_channel_get failed return: %d\n", r);
    14ea:	481e      	ldr	r0, [pc, #120]	; (1564 <hts_indicate+0x134>)
    14ec:	f020 fb1a 	bl	21b24 <printk>
 * @param val A pointer to a sensor_value struct.
 * @return The converted value.
 */
static inline double sensor_value_to_double(struct sensor_value *val)
{
	return (double)val->val1 + (double)val->val2 / 1000000;
    14f0:	9801      	ldr	r0, [sp, #4]
    14f2:	f7fe ff57 	bl	3a4 <__aeabi_i2d>
    14f6:	a30a      	add	r3, pc, #40	; (adr r3, 1520 <hts_indicate+0xf0>)
    14f8:	e9d3 2300 	ldrd	r2, r3, [r3]
    14fc:	f7ff f8e6 	bl	6cc <__aeabi_ddiv>
    1500:	4606      	mov	r6, r0
    1502:	9800      	ldr	r0, [sp, #0]
    1504:	460f      	mov	r7, r1
    1506:	f7fe ff4d 	bl	3a4 <__aeabi_i2d>
    150a:	4602      	mov	r2, r0
    150c:	460b      	mov	r3, r1
    150e:	4630      	mov	r0, r6
    1510:	4639      	mov	r1, r7
    1512:	f7fe fdfb 	bl	10c <__adddf3>
		temperature = sensor_value_to_double(&temp_value);
    1516:	e9c4 0100 	strd	r0, r1, [r4]
    151a:	e7a6      	b.n	146a <hts_indicate+0x3a>
    151c:	f3af 8000 	nop.w
    1520:	00000000 	.word	0x00000000
    1524:	412e8480 	.word	0x412e8480
    1528:	2000ed88 	.word	0x2000ed88
    152c:	2000ed87 	.word	0x2000ed87
    1530:	2000d500 	.word	0x2000d500
    1534:	20000000 	.word	0x20000000
    1538:	3ff00000 	.word	0x3ff00000
    153c:	403e0000 	.word	0x403e0000
    1540:	0002b511 	.word	0x0002b511
    1544:	40590000 	.word	0x40590000
    1548:	2000ed82 	.word	0x2000ed82
    154c:	2000d4e8 	.word	0x2000d4e8
    1550:	00027c98 	.word	0x00027c98
    1554:	00004501 	.word	0x00004501
    1558:	000044e9 	.word	0x000044e9
    155c:	40340000 	.word	0x40340000
    1560:	0002b4c4 	.word	0x0002b4c4
    1564:	0002b4eb 	.word	0x0002b4eb

00001568 <bt_init>:

	bt_dev_show_info();
}

static int bt_init(void)
{
    1568:	b570      	push	{r4, r5, r6, lr}
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    156a:	4d44      	ldr	r5, [pc, #272]	; (167c <bt_init+0x114>)
    156c:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    1570:	6899      	ldr	r1, [r3, #8]
    1572:	f011 0101 	ands.w	r1, r1, #1
{
    1576:	b088      	sub	sp, #32
	if (!(bt_dev.drv->quirks & BT_QUIRK_NO_RESET)) {
    1578:	d11f      	bne.n	15ba <bt_init+0x52>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    157a:	aa03      	add	r2, sp, #12
    157c:	f640 4003 	movw	r0, #3075	; 0xc03
    1580:	f008 f87c 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    1584:	4604      	mov	r4, r0
    1586:	2800      	cmp	r0, #0
    1588:	d174      	bne.n	1674 <bt_init+0x10c>
	uint8_t status = buf->data[0];
    158a:	9b03      	ldr	r3, [sp, #12]
    158c:	689b      	ldr	r3, [r3, #8]
	if (status) {
    158e:	781b      	ldrb	r3, [r3, #0]
    1590:	b983      	cbnz	r3, 15b4 <bt_init+0x4c>
	flags = (atomic_get(bt_dev.flags) & BT_DEV_PERSISTENT_FLAGS);
    1592:	f105 0394 	add.w	r3, r5, #148	; 0x94
    1596:	4618      	mov	r0, r3
    1598:	f023 f925 	bl	247e6 <atomic_get>
{
	/* This builtin, as described by Intel, is not a traditional
	 * test-and-set operation, but rather an atomic exchange operation. It
	 * writes value into *ptr, and returns the previous contents of *ptr.
	 */
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    159c:	f3bf 8f5b 	dmb	ish
    15a0:	f000 0005 	and.w	r0, r0, #5
    15a4:	e853 2f00 	ldrex	r2, [r3]
    15a8:	e843 0100 	strex	r1, r0, [r3]
    15ac:	2900      	cmp	r1, #0
    15ae:	d1f9      	bne.n	15a4 <bt_init+0x3c>
    15b0:	f3bf 8f5b 	dmb	ish
		net_buf_unref(rsp);
    15b4:	9803      	ldr	r0, [sp, #12]
    15b6:	f01c f879 	bl	1d6ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    15ba:	aa03      	add	r2, sp, #12
    15bc:	2100      	movs	r1, #0
    15be:	f241 0003 	movw	r0, #4099	; 0x1003
    15c2:	f008 f85b 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    15c6:	4604      	mov	r4, r0
    15c8:	2800      	cmp	r0, #0
    15ca:	d153      	bne.n	1674 <bt_init+0x10c>
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    15cc:	9b03      	ldr	r3, [sp, #12]
    15ce:	482c      	ldr	r0, [pc, #176]	; (1680 <bt_init+0x118>)
    15d0:	6899      	ldr	r1, [r3, #8]
    15d2:	2208      	movs	r2, #8
    15d4:	3101      	adds	r1, #1
    15d6:	f022 ff47 	bl	24468 <memcpy>
	net_buf_unref(rsp);
    15da:	9803      	ldr	r0, [sp, #12]
    15dc:	f01c f866 	bl	1d6ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    15e0:	4621      	mov	r1, r4
    15e2:	aa03      	add	r2, sp, #12
    15e4:	f241 0001 	movw	r0, #4097	; 0x1001
    15e8:	f008 f848 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    15ec:	4604      	mov	r4, r0
    15ee:	2800      	cmp	r0, #0
    15f0:	d140      	bne.n	1674 <bt_init+0x10c>
	read_local_ver_complete(rsp);
    15f2:	9803      	ldr	r0, [sp, #12]
    15f4:	6883      	ldr	r3, [r0, #8]
	bt_dev.hci_version = rp->hci_version;
    15f6:	785a      	ldrb	r2, [r3, #1]
    15f8:	f885 2034 	strb.w	r2, [r5, #52]	; 0x34
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    15fc:	78d9      	ldrb	r1, [r3, #3]
    15fe:	789a      	ldrb	r2, [r3, #2]
    1600:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1604:	86ea      	strh	r2, [r5, #54]	; 0x36
	bt_dev.lmp_version = rp->lmp_version;
    1606:	791a      	ldrb	r2, [r3, #4]
    1608:	f885 2035 	strb.w	r2, [r5, #53]	; 0x35
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    160c:	7a19      	ldrb	r1, [r3, #8]
    160e:	79da      	ldrb	r2, [r3, #7]
    1610:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    1614:	872a      	strh	r2, [r5, #56]	; 0x38
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    1616:	795a      	ldrb	r2, [r3, #5]
    1618:	799b      	ldrb	r3, [r3, #6]
    161a:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    161e:	876b      	strh	r3, [r5, #58]	; 0x3a
	net_buf_unref(rsp);
    1620:	f01c f844 	bl	1d6ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    1624:	4621      	mov	r1, r4
    1626:	aa03      	add	r2, sp, #12
    1628:	f241 0002 	movw	r0, #4098	; 0x1002
    162c:	f008 f826 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    1630:	4604      	mov	r4, r0
    1632:	b9f8      	cbnz	r0, 1674 <bt_init+0x10c>
	memcpy(bt_dev.supported_commands, rp->commands,
    1634:	9b03      	ldr	r3, [sp, #12]
    1636:	4813      	ldr	r0, [pc, #76]	; (1684 <bt_init+0x11c>)
    1638:	6899      	ldr	r1, [r3, #8]
    163a:	2240      	movs	r2, #64	; 0x40
    163c:	3101      	adds	r1, #1
    163e:	f022 ff13 	bl	24468 <memcpy>
		bt_dev.supported_commands[34] |= 0x04;
    1642:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    1646:	9803      	ldr	r0, [sp, #12]
		bt_dev.supported_commands[34] |= 0x04;
    1648:	f043 0306 	orr.w	r3, r3, #6
    164c:	f885 3066 	strb.w	r3, [r5, #102]	; 0x66
	net_buf_unref(rsp);
    1650:	f01c f82c 	bl	1d6ac <net_buf_unref>
	if (!BT_FEAT_LE(bt_dev.features)) {
    1654:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    1658:	065a      	lsls	r2, r3, #25
    165a:	d41b      	bmi.n	1694 <bt_init+0x12c>
 * @return Source ID.
 */
static inline uint32_t log_const_source_id(
				const struct log_source_const_data *data)
{
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    165c:	4b0a      	ldr	r3, [pc, #40]	; (1688 <bt_init+0x120>)
    165e:	490b      	ldr	r1, [pc, #44]	; (168c <bt_init+0x124>)
		BT_ERR("Non-LE capable controller detected!");
    1660:	480b      	ldr	r0, [pc, #44]	; (1690 <bt_init+0x128>)
    1662:	1ac9      	subs	r1, r1, r3
    1664:	08c9      	lsrs	r1, r1, #3
    1666:	0189      	lsls	r1, r1, #6
    1668:	f041 0101 	orr.w	r1, r1, #1
    166c:	f020 fef0 	bl	22450 <log_0>
		return -ENODEV;
    1670:	f06f 0412 	mvn.w	r4, #18
		atomic_set_bit(bt_dev.flags, BT_DEV_PRESET_ID);
	}

	bt_finalize_init();
	return 0;
}
    1674:	4620      	mov	r0, r4
    1676:	b008      	add	sp, #32
    1678:	bd70      	pop	{r4, r5, r6, pc}
    167a:	bf00      	nop
    167c:	20000008 	.word	0x20000008
    1680:	20000044 	.word	0x20000044
    1684:	2000004c 	.word	0x2000004c
    1688:	000278c0 	.word	0x000278c0
    168c:	00027978 	.word	0x00027978
    1690:	0002c672 	.word	0x0002c672
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    1694:	4621      	mov	r1, r4
    1696:	aa03      	add	r2, sp, #12
    1698:	f242 0003 	movw	r0, #8195	; 0x2003
    169c:	f007 ffee 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    16a0:	4604      	mov	r4, r0
    16a2:	2800      	cmp	r0, #0
    16a4:	d1e6      	bne.n	1674 <bt_init+0x10c>
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    16a6:	9b03      	ldr	r3, [sp, #12]
    16a8:	48b5      	ldr	r0, [pc, #724]	; (1980 <bt_init+0x418>)
    16aa:	6899      	ldr	r1, [r3, #8]
    16ac:	2208      	movs	r2, #8
    16ae:	3101      	adds	r1, #1
    16b0:	f022 feda 	bl	24468 <memcpy>
	net_buf_unref(rsp);
    16b4:	9803      	ldr	r0, [sp, #12]
    16b6:	f01b fff9 	bl	1d6ac <net_buf_unref>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    16ba:	4621      	mov	r1, r4
    16bc:	aa03      	add	r2, sp, #12
    16be:	f242 0002 	movw	r0, #8194	; 0x2002
    16c2:	f007 ffdb 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    16c6:	4604      	mov	r4, r0
    16c8:	2800      	cmp	r0, #0
    16ca:	d1d3      	bne.n	1674 <bt_init+0x10c>
		le_read_buffer_size_complete(rsp);
    16cc:	9b03      	ldr	r3, [sp, #12]
    16ce:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->le_max_len);
    16d0:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    16d4:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
    16d8:	b291      	uxth	r1, r2
	if (!bt_dev.le.acl_mtu) {
    16da:	b121      	cbz	r1, 16e6 <bt_init+0x17e>
	k_sem_init(&bt_dev.le.acl_pkts, rp->le_max_num, rp->le_max_num);
    16dc:	78da      	ldrb	r2, [r3, #3]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, *(uintptr_t *)&initial_count, *(uintptr_t *)&limit, K_SYSCALL_K_SEM_INIT);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_init(sem, initial_count, limit);
    16de:	48a9      	ldr	r0, [pc, #676]	; (1984 <bt_init+0x41c>)
    16e0:	4611      	mov	r1, r2
    16e2:	f025 fcee 	bl	270c2 <z_impl_k_sem_init>
		net_buf_unref(rsp);
    16e6:	9803      	ldr	r0, [sp, #12]
    16e8:	f01b ffe0 	bl	1d6ac <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    16ec:	f895 6040 	ldrb.w	r6, [r5, #64]	; 0x40
    16f0:	f016 0620 	ands.w	r6, r6, #32
    16f4:	f000 811e 	beq.w	1934 <bt_init+0x3cc>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    16f8:	f895 3060 	ldrb.w	r3, [r5, #96]	; 0x60
    16fc:	071b      	lsls	r3, r3, #28
    16fe:	d512      	bpl.n	1726 <bt_init+0x1be>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    1700:	aa03      	add	r2, sp, #12
    1702:	2100      	movs	r1, #0
    1704:	f242 001c 	movw	r0, #8220	; 0x201c
    1708:	f007 ffb8 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    170c:	4604      	mov	r4, r0
    170e:	2800      	cmp	r0, #0
    1710:	d1b0      	bne.n	1674 <bt_init+0x10c>
		le_read_supp_states_complete(rsp);
    1712:	9803      	ldr	r0, [sp, #12]
 *
 *  @return 64-bit integer in host endianness.
 */
static inline uint64_t sys_get_le64(const uint8_t src[8])
{
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    1714:	6883      	ldr	r3, [r0, #8]
    1716:	f8d3 2001 	ldr.w	r2, [r3, #1]
    171a:	f8d3 3005 	ldr.w	r3, [r3, #5]
	bt_dev.le.states = sys_get_le64(rp->le_states);
    171e:	e9c5 2328 	strd	r2, r3, [r5, #160]	; 0xa0
		net_buf_unref(rsp);
    1722:	f01b ffc3 	bl	1d6ac <net_buf_unref>
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    1726:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    172a:	069e      	lsls	r6, r3, #26
    172c:	d524      	bpl.n	1778 <bt_init+0x210>
		err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    172e:	a902      	add	r1, sp, #8
    1730:	f10d 0006 	add.w	r0, sp, #6
    1734:	f008 f972 	bl	9a1c <hci_le_read_max_data_len>
		if (err) {
    1738:	4604      	mov	r4, r0
    173a:	2800      	cmp	r0, #0
    173c:	d19a      	bne.n	1674 <bt_init+0x10c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    173e:	2104      	movs	r1, #4
    1740:	f242 0024 	movw	r0, #8228	; 0x2024
    1744:	f007 fe3a 	bl	93bc <bt_hci_cmd_create>
		if (!buf) {
    1748:	4606      	mov	r6, r0
    174a:	2800      	cmp	r0, #0
    174c:	f000 80f9 	beq.w	1942 <bt_init+0x3da>
 *
 * @return The original tail of the buffer.
 */
static inline void *net_buf_add(struct net_buf *buf, size_t len)
{
	return net_buf_simple_add(&buf->b, len);
    1750:	2104      	movs	r1, #4
    1752:	3008      	adds	r0, #8
    1754:	f024 fedc 	bl	26510 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    1758:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    175c:	8003      	strh	r3, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    175e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    1762:	8043      	strh	r3, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    1764:	4622      	mov	r2, r4
    1766:	4631      	mov	r1, r6
    1768:	f242 0024 	movw	r0, #8228	; 0x2024
    176c:	f007 ff86 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    1770:	4604      	mov	r4, r0
    1772:	2800      	cmp	r0, #0
    1774:	f47f af7e 	bne.w	1674 <bt_init+0x10c>
	if (BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    1778:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    177c:	065c      	lsls	r4, r3, #25
    177e:	d52c      	bpl.n	17da <bt_init+0x272>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RPA_TIMEOUT,
    1780:	2102      	movs	r1, #2
    1782:	f242 002e 	movw	r0, #8238	; 0x202e
    1786:	f007 fe19 	bl	93bc <bt_hci_cmd_create>
		if (!buf) {
    178a:	4604      	mov	r4, r0
    178c:	2800      	cmp	r0, #0
    178e:	f000 80d8 	beq.w	1942 <bt_init+0x3da>
    1792:	2102      	movs	r1, #2
    1794:	3008      	adds	r0, #8
    1796:	f024 febb 	bl	26510 <net_buf_simple_add>
		cp->rpa_timeout = sys_cpu_to_le16(CONFIG_BT_RPA_TIMEOUT);
    179a:	f06f 037b 	mvn.w	r3, #123	; 0x7b
    179e:	7003      	strb	r3, [r0, #0]
    17a0:	2303      	movs	r3, #3
    17a2:	7043      	strb	r3, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RPA_TIMEOUT, buf,
    17a4:	4621      	mov	r1, r4
    17a6:	2200      	movs	r2, #0
    17a8:	f242 002e 	movw	r0, #8238	; 0x202e
    17ac:	f007 ff66 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    17b0:	4604      	mov	r4, r0
    17b2:	2800      	cmp	r0, #0
    17b4:	f47f af5e 	bne.w	1674 <bt_init+0x10c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_RL_SIZE, NULL,
    17b8:	4601      	mov	r1, r0
    17ba:	aa03      	add	r2, sp, #12
    17bc:	f242 002a 	movw	r0, #8234	; 0x202a
    17c0:	f007 ff5c 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    17c4:	4604      	mov	r4, r0
    17c6:	2800      	cmp	r0, #0
    17c8:	f47f af54 	bne.w	1674 <bt_init+0x10c>
		le_read_resolving_list_size_complete(rsp);
    17cc:	9803      	ldr	r0, [sp, #12]
	bt_dev.le.rl_size = rp->rl_size;
    17ce:	6883      	ldr	r3, [r0, #8]
    17d0:	785b      	ldrb	r3, [r3, #1]
    17d2:	f885 30e0 	strb.w	r3, [r5, #224]	; 0xe0
		net_buf_unref(rsp);
    17d6:	f01b ff69 	bl	1d6ac <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    17da:	2108      	movs	r1, #8
    17dc:	f242 0001 	movw	r0, #8193	; 0x2001
    17e0:	f007 fdec 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    17e4:	4604      	mov	r4, r0
    17e6:	2800      	cmp	r0, #0
    17e8:	f000 80ab 	beq.w	1942 <bt_init+0x3da>
    17ec:	2108      	movs	r1, #8
    17ee:	4408      	add	r0, r1
    17f0:	f024 fe8e 	bl	26510 <net_buf_simple_add>
		     BT_FEAT_LE_PRIVACY(bt_dev.le.features)) ||
    17f4:	f895 1098 	ldrb.w	r1, [r5, #152]	; 0x98
			mask |= BT_EVT_MASK_LE_CONN_COMPLETE;
    17f8:	f011 0f40 	tst.w	r1, #64	; 0x40
    17fc:	4602      	mov	r2, r0
    17fe:	f240 2302 	movw	r3, #514	; 0x202
    1802:	bf08      	it	eq
    1804:	2303      	moveq	r3, #3
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    1806:	0788      	lsls	r0, r1, #30
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    1808:	bf4c      	ite	mi
    180a:	f043 002c 	orrmi.w	r0, r3, #44	; 0x2c
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    180e:	f043 000c 	orrpl.w	r0, r3, #12
		if (IS_ENABLED(CONFIG_BT_DATA_LEN_UPDATE) &&
    1812:	068b      	lsls	r3, r1, #26
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    1814:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    1818:	bf48      	it	mi
    181a:	f040 0040 	orrmi.w	r0, r0, #64	; 0x40
		if (IS_ENABLED(CONFIG_BT_PHY_UPDATE) &&
    181e:	f013 0f09 	tst.w	r3, #9
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1822:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    1826:	bf18      	it	ne
    1828:	f440 6000 	orrne.w	r0, r0, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    182c:	f003 0306 	and.w	r3, r3, #6
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    1830:	07ce      	lsls	r6, r1, #31
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    1832:	bf48      	it	mi
    1834:	f040 0010 	orrmi.w	r0, r0, #16
	if (IS_ENABLED(CONFIG_BT_ECC) &&
    1838:	2b06      	cmp	r3, #6
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    183a:	bf08      	it	eq
    183c:	f440 70c0 	orreq.w	r0, r0, #384	; 0x180
	sys_put_le64(mask, cp_mask->events);
    1840:	2100      	movs	r1, #0
    1842:	f023 f80f 	bl	24864 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    1846:	4621      	mov	r1, r4
    1848:	2200      	movs	r2, #0
    184a:	f242 0001 	movw	r0, #8193	; 0x2001
    184e:	f007 ff15 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    1852:	4604      	mov	r4, r0
    1854:	2800      	cmp	r0, #0
    1856:	f47f af0d 	bne.w	1674 <bt_init+0x10c>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    185a:	f895 3040 	ldrb.w	r3, [r5, #64]	; 0x40
    185e:	0698      	lsls	r0, r3, #26
    1860:	d41e      	bmi.n	18a0 <bt_init+0x338>
	if (bt_dev.le.acl_mtu) {
    1862:	f8b5 10c4 	ldrh.w	r1, [r5, #196]	; 0xc4
    1866:	b9d9      	cbnz	r1, 18a0 <bt_init+0x338>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    1868:	aa03      	add	r2, sp, #12
    186a:	f241 0005 	movw	r0, #4101	; 0x1005
    186e:	f007 ff05 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    1872:	4604      	mov	r4, r0
    1874:	2800      	cmp	r0, #0
    1876:	f47f aefd 	bne.w	1674 <bt_init+0x10c>
	if (bt_dev.le.acl_mtu) {
    187a:	f8b5 30c4 	ldrh.w	r3, [r5, #196]	; 0xc4
    187e:	b963      	cbnz	r3, 189a <bt_init+0x332>
    1880:	9b03      	ldr	r3, [sp, #12]
    1882:	689b      	ldr	r3, [r3, #8]
	bt_dev.le.acl_mtu = sys_le16_to_cpu(rp->acl_max_len);
    1884:	785a      	ldrb	r2, [r3, #1]
    1886:	7899      	ldrb	r1, [r3, #2]
    1888:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    188c:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
	k_sem_init(&bt_dev.le.acl_pkts, pkts, pkts);
    1890:	889a      	ldrh	r2, [r3, #4]
    1892:	483c      	ldr	r0, [pc, #240]	; (1984 <bt_init+0x41c>)
    1894:	4611      	mov	r1, r2
    1896:	f025 fc14 	bl	270c2 <z_impl_k_sem_init>
	net_buf_unref(rsp);
    189a:	9803      	ldr	r0, [sp, #12]
    189c:	f01b ff06 	bl	1d6ac <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    18a0:	2108      	movs	r1, #8
    18a2:	f640 4001 	movw	r0, #3073	; 0xc01
    18a6:	f007 fd89 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    18aa:	4604      	mov	r4, r0
    18ac:	2800      	cmp	r0, #0
    18ae:	d048      	beq.n	1942 <bt_init+0x3da>
    18b0:	2108      	movs	r1, #8
    18b2:	4408      	add	r0, r1
    18b4:	f024 fe2c 	bl	26510 <net_buf_simple_add>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    18b8:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    18bc:	07d9      	lsls	r1, r3, #31
    18be:	4602      	mov	r2, r0
    18c0:	d554      	bpl.n	196c <bt_init+0x404>
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    18c2:	a12d      	add	r1, pc, #180	; (adr r1, 1978 <bt_init+0x410>)
    18c4:	e9d1 0100 	ldrd	r0, r1, [r1]
	sys_put_le64(mask, ev->events);
    18c8:	f022 ffcc 	bl	24864 <sys_put_le64>
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    18cc:	4621      	mov	r1, r4
    18ce:	2200      	movs	r2, #0
    18d0:	f640 4001 	movw	r0, #3073	; 0xc01
    18d4:	f007 fed2 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    18d8:	4604      	mov	r4, r0
    18da:	2800      	cmp	r0, #0
    18dc:	f47f aeca 	bne.w	1674 <bt_init+0x10c>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    18e0:	4601      	mov	r1, r0
    18e2:	aa02      	add	r2, sp, #8
    18e4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    18e8:	f007 fec8 	bl	967c <bt_hci_cmd_send_sync>
    18ec:	4e26      	ldr	r6, [pc, #152]	; (1988 <bt_init+0x420>)
    18ee:	4b27      	ldr	r3, [pc, #156]	; (198c <bt_init+0x424>)
    18f0:	1af6      	subs	r6, r6, r3
    18f2:	08f6      	lsrs	r6, r6, #3
    18f4:	01b6      	lsls	r6, r6, #6
	if (err) {
    18f6:	2800      	cmp	r0, #0
    18f8:	d054      	beq.n	19a4 <bt_init+0x43c>
		BT_WARN("Vendor HCI extensions not available");
    18fa:	4825      	ldr	r0, [pc, #148]	; (1990 <bt_init+0x428>)
    18fc:	f046 0102 	orr.w	r1, r6, #2
			BT_WARN("Failed to read supported vendor features");
    1900:	f020 fda6 	bl	22450 <log_0>
		err = bt_conn_init();
    1904:	f00a f9ce 	bl	bca4 <bt_conn_init>
		if (err) {
    1908:	4604      	mov	r4, r0
    190a:	2800      	cmp	r0, #0
    190c:	f47f aeb2 	bne.w	1674 <bt_init+0x10c>
 * @return N/A
 */
static inline void k_delayed_work_init(struct k_delayed_work *work,
				       k_work_handler_t handler)
{
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    1910:	4601      	mov	r1, r0
    1912:	2230      	movs	r2, #48	; 0x30
    1914:	481f      	ldr	r0, [pc, #124]	; (1994 <bt_init+0x42c>)
    1916:	f022 fdd2 	bl	244be <memset>
    191a:	4b1f      	ldr	r3, [pc, #124]	; (1998 <bt_init+0x430>)
    191c:	f8c5 3134 	str.w	r3, [r5, #308]	; 0x134
		if (!bt_dev.id_count) {
    1920:	79eb      	ldrb	r3, [r5, #7]
    1922:	2b00      	cmp	r3, #0
    1924:	f040 80ab 	bne.w	1a7e <bt_init+0x516>
			BT_INFO("No ID address. App must call settings_load()");
    1928:	481c      	ldr	r0, [pc, #112]	; (199c <bt_init+0x434>)
    192a:	f046 0103 	orr.w	r1, r6, #3
    192e:	f020 fd8f 	bl	22450 <log_0>
			return 0;
    1932:	e69f      	b.n	1674 <bt_init+0x10c>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    1934:	2102      	movs	r1, #2
    1936:	f640 406d 	movw	r0, #3181	; 0xc6d
    193a:	f007 fd3f 	bl	93bc <bt_hci_cmd_create>
		if (!buf) {
    193e:	4604      	mov	r4, r0
    1940:	b910      	cbnz	r0, 1948 <bt_init+0x3e0>
		return -ENOBUFS;
    1942:	f06f 0436 	mvn.w	r4, #54	; 0x36
    1946:	e695      	b.n	1674 <bt_init+0x10c>
    1948:	2102      	movs	r1, #2
    194a:	3008      	adds	r0, #8
    194c:	f024 fde0 	bl	26510 <net_buf_simple_add>
		cp_le->le = 0x01;
    1950:	2301      	movs	r3, #1
    1952:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    1954:	7046      	strb	r6, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    1956:	4621      	mov	r1, r4
    1958:	4632      	mov	r2, r6
    195a:	f640 406d 	movw	r0, #3181	; 0xc6d
    195e:	f007 fe8d 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    1962:	4604      	mov	r4, r0
    1964:	2800      	cmp	r0, #0
    1966:	f43f aec7 	beq.w	16f8 <bt_init+0x190>
    196a:	e683      	b.n	1674 <bt_init+0x10c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    196c:	480c      	ldr	r0, [pc, #48]	; (19a0 <bt_init+0x438>)
    196e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
    1972:	e7a9      	b.n	18c8 <bt_init+0x360>
    1974:	f3af 8000 	nop.w
    1978:	02008890 	.word	0x02008890
    197c:	20008000 	.word	0x20008000
    1980:	200000a0 	.word	0x200000a0
    1984:	200000d0 	.word	0x200000d0
    1988:	00027978 	.word	0x00027978
    198c:	000278c0 	.word	0x000278c0
    1990:	0002c696 	.word	0x0002c696
    1994:	20000138 	.word	0x20000138
    1998:	000099d1 	.word	0x000099d1
    199c:	0002c76a 	.word	0x0002c76a
    19a0:	02008810 	.word	0x02008810
	rp.info = (void *)rsp->data;
    19a4:	9b02      	ldr	r3, [sp, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    19a6:	4839      	ldr	r0, [pc, #228]	; (1a8c <bt_init+0x524>)
	rp.info = (void *)rsp->data;
    19a8:	689c      	ldr	r4, [r3, #8]
	BT_INFO("HW Platform: %s (0x%04x)",
    19aa:	f8b4 2001 	ldrh.w	r2, [r4, #1]
	if (platform < ARRAY_SIZE(plat_str)) {
    19ae:	2a03      	cmp	r2, #3
		return plat_str[platform];
    19b0:	bf96      	itet	ls
    19b2:	4937      	ldrls	r1, [pc, #220]	; (1a90 <bt_init+0x528>)
	return "unknown";
    19b4:	4937      	ldrhi	r1, [pc, #220]	; (1a94 <bt_init+0x52c>)
		return plat_str[platform];
    19b6:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Platform: %s (0x%04x)",
    19ba:	f046 0303 	orr.w	r3, r6, #3
    19be:	f020 fd68 	bl	22492 <log_2>
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    19c2:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	BT_INFO("HW Variant: %s (0x%04x)",
    19c6:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    19ca:	2902      	cmp	r1, #2
	BT_INFO("HW Variant: %s (0x%04x)",
    19cc:	f046 0303 	orr.w	r3, r6, #3
	if (platform != BT_HCI_VS_HW_PLAT_NORDIC) {
    19d0:	d12e      	bne.n	1a30 <bt_init+0x4c8>
	if (variant < ARRAY_SIZE(nordic_str)) {
    19d2:	2a03      	cmp	r2, #3
    19d4:	d82c      	bhi.n	1a30 <bt_init+0x4c8>
		return nordic_str[variant];
    19d6:	4930      	ldr	r1, [pc, #192]	; (1a98 <bt_init+0x530>)
    19d8:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
	BT_INFO("HW Variant: %s (0x%04x)",
    19dc:	482f      	ldr	r0, [pc, #188]	; (1a9c <bt_init+0x534>)
    19de:	f020 fd58 	bl	22492 <log_2>
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    19e2:	7962      	ldrb	r2, [r4, #5]
    19e4:	482e      	ldr	r0, [pc, #184]	; (1aa0 <bt_init+0x538>)
	if (variant < ARRAY_SIZE(var_str)) {
    19e6:	2a03      	cmp	r2, #3
		return var_str[variant];
    19e8:	bf96      	itet	ls
    19ea:	492e      	ldrls	r1, [pc, #184]	; (1aa4 <bt_init+0x53c>)
	return "unknown";
    19ec:	4929      	ldrhi	r1, [pc, #164]	; (1a94 <bt_init+0x52c>)
		return var_str[variant];
    19ee:	f851 1022 	ldrls.w	r1, [r1, r2, lsl #2]
	BT_INFO("Firmware: %s (0x%02x) Version %u.%u Build %u",
    19f2:	e9cd 1203 	strd	r1, r2, [sp, #12]
    19f6:	79a2      	ldrb	r2, [r4, #6]
    19f8:	9205      	str	r2, [sp, #20]
    19fa:	f8b4 2007 	ldrh.w	r2, [r4, #7]
    19fe:	9206      	str	r2, [sp, #24]
    1a00:	f8d4 2009 	ldr.w	r2, [r4, #9]
    1a04:	9207      	str	r2, [sp, #28]
    1a06:	f046 0303 	orr.w	r3, r6, #3
    1a0a:	2205      	movs	r2, #5
    1a0c:	a903      	add	r1, sp, #12
    1a0e:	f020 fd75 	bl	224fc <log_n>
	net_buf_unref(rsp);
    1a12:	9802      	ldr	r0, [sp, #8]
    1a14:	f01b fe4a 	bl	1d6ac <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    1a18:	aa02      	add	r2, sp, #8
    1a1a:	2100      	movs	r1, #0
    1a1c:	f64f 4002 	movw	r0, #64514	; 0xfc02
    1a20:	f007 fe2c 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    1a24:	4604      	mov	r4, r0
    1a26:	b128      	cbz	r0, 1a34 <bt_init+0x4cc>
		BT_WARN("Failed to read supported vendor commands");
    1a28:	481f      	ldr	r0, [pc, #124]	; (1aa8 <bt_init+0x540>)
    1a2a:	f046 0102 	orr.w	r1, r6, #2
    1a2e:	e767      	b.n	1900 <bt_init+0x398>
		return "unknown";
    1a30:	4918      	ldr	r1, [pc, #96]	; (1a94 <bt_init+0x52c>)
    1a32:	e7d3      	b.n	19dc <bt_init+0x474>
	rp.cmds = (void *)rsp->data;
    1a34:	9b02      	ldr	r3, [sp, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    1a36:	481d      	ldr	r0, [pc, #116]	; (1aac <bt_init+0x544>)
    1a38:	6899      	ldr	r1, [r3, #8]
    1a3a:	2202      	movs	r2, #2
    1a3c:	3101      	adds	r1, #1
    1a3e:	f022 fd13 	bl	24468 <memcpy>
	net_buf_unref(rsp);
    1a42:	9802      	ldr	r0, [sp, #8]
    1a44:	f01b fe32 	bl	1d6ac <net_buf_unref>
	if (BT_VS_CMD_SUP_FEAT(bt_dev.vs_commands)) {
    1a48:	f895 3085 	ldrb.w	r3, [r5, #133]	; 0x85
    1a4c:	075b      	lsls	r3, r3, #29
    1a4e:	f57f af59 	bpl.w	1904 <bt_init+0x39c>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    1a52:	aa02      	add	r2, sp, #8
    1a54:	4621      	mov	r1, r4
    1a56:	f64f 4003 	movw	r0, #64515	; 0xfc03
    1a5a:	f007 fe0f 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    1a5e:	b118      	cbz	r0, 1a68 <bt_init+0x500>
			BT_WARN("Failed to read supported vendor features");
    1a60:	4813      	ldr	r0, [pc, #76]	; (1ab0 <bt_init+0x548>)
    1a62:	f046 0102 	orr.w	r1, r6, #2
    1a66:	e74b      	b.n	1900 <bt_init+0x398>
		rp.feat = (void *)rsp->data;
    1a68:	9b02      	ldr	r3, [sp, #8]
		memcpy(bt_dev.vs_features, rp.feat->features,
    1a6a:	4812      	ldr	r0, [pc, #72]	; (1ab4 <bt_init+0x54c>)
    1a6c:	6899      	ldr	r1, [r3, #8]
    1a6e:	2201      	movs	r2, #1
    1a70:	4411      	add	r1, r2
    1a72:	f022 fcf9 	bl	24468 <memcpy>
		net_buf_unref(rsp);
    1a76:	9802      	ldr	r0, [sp, #8]
    1a78:	f01b fe18 	bl	1d6ac <net_buf_unref>
    1a7c:	e742      	b.n	1904 <bt_init+0x39c>
 */
static inline void atomic_set_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);

	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    1a7e:	2104      	movs	r1, #4
    1a80:	480d      	ldr	r0, [pc, #52]	; (1ab8 <bt_init+0x550>)
    1a82:	f022 febf 	bl	24804 <atomic_or>
	bt_finalize_init();
    1a86:	f008 fd51 	bl	a52c <bt_finalize_init>
	return 0;
    1a8a:	e5f3      	b.n	1674 <bt_init+0x10c>
    1a8c:	0002c6ba 	.word	0x0002c6ba
    1a90:	000280c0 	.word	0x000280c0
    1a94:	0002c064 	.word	0x0002c064
    1a98:	00028080 	.word	0x00028080
    1a9c:	0002c6d3 	.word	0x0002c6d3
    1aa0:	0002c6eb 	.word	0x0002c6eb
    1aa4:	000280f8 	.word	0x000280f8
    1aa8:	0002c718 	.word	0x0002c718
    1aac:	2000008d 	.word	0x2000008d
    1ab0:	0002c741 	.word	0x0002c741
    1ab4:	2000008c 	.word	0x2000008c
    1ab8:	2000009c 	.word	0x2000009c
    1abc:	00000000 	.word	0x00000000

00001ac0 <ull_drift_ticks_get>:
 * @param ticks_drift_minus[out] Negative part of drift uncertainty window
 */
void ull_drift_ticks_get(struct node_rx_event_done *done,
			 uint32_t *ticks_drift_plus,
			 uint32_t *ticks_drift_minus)
{
    1ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	start_to_address_actual_us =
		done->extra.drift.start_to_address_actual_us;
	window_widening_event_us =
		done->extra.drift.window_widening_event_us;
	preamble_to_addr_us =
    1ac4:	e9d0 350b 	ldrd	r3, r5, [r0, #44]	; 0x2c
	start_to_address_actual_us =
    1ac8:	6a86      	ldr	r6, [r0, #40]	; 0x28
		done->extra.drift.preamble_to_addr_us;

	start_to_address_expected_us = EVENT_JITTER_US +
				       EVENT_TICKER_RES_MARGIN_US +
				       window_widening_event_us +
    1aca:	195c      	adds	r4, r3, r5
	start_to_address_expected_us = EVENT_JITTER_US +
    1acc:	3430      	adds	r4, #48	; 0x30
				       preamble_to_addr_us;

	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1ace:	42a6      	cmp	r6, r4
{
    1ad0:	4688      	mov	r8, r1
    1ad2:	4617      	mov	r7, r2
	if (start_to_address_actual_us <= start_to_address_expected_us) {
    1ad4:	d818      	bhi.n	1b08 <ull_drift_ticks_get+0x48>
		*ticks_drift_plus =
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1ad6:	4d1c      	ldr	r5, [pc, #112]	; (1b48 <ull_drift_ticks_get+0x88>)
    1ad8:	fba3 0105 	umull	r0, r1, r3, r5
    1adc:	a318      	add	r3, pc, #96	; (adr r3, 1b40 <ull_drift_ticks_get+0x80>)
    1ade:	e9d3 2300 	ldrd	r2, r3, [r3]
    1ae2:	f7ff fa59 	bl	f98 <__aeabi_uldivmod>
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1ae6:	1ba4      	subs	r4, r4, r6
			HAL_TICKER_US_TO_TICKS(window_widening_event_us);
    1ae8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1aec:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS((start_to_address_expected_us -
    1af0:	a313      	add	r3, pc, #76	; (adr r3, 1b40 <ull_drift_ticks_get+0x80>)
    1af2:	e9d3 2300 	ldrd	r2, r3, [r3]
    1af6:	fba4 0105 	umull	r0, r1, r4, r5
    1afa:	f7ff fa4d 	bl	f98 <__aeabi_uldivmod>
    1afe:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1b02:	6038      	str	r0, [r7, #0]
		*ticks_drift_minus =
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
					       EVENT_TICKER_RES_MARGIN_US +
					       preamble_to_addr_us);
	}
}
    1b04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1b08:	4c0f      	ldr	r4, [pc, #60]	; (1b48 <ull_drift_ticks_get+0x88>)
    1b0a:	a30d      	add	r3, pc, #52	; (adr r3, 1b40 <ull_drift_ticks_get+0x80>)
    1b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b10:	fba6 0104 	umull	r0, r1, r6, r4
    1b14:	f7ff fa40 	bl	f98 <__aeabi_uldivmod>
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1b18:	f105 0130 	add.w	r1, r5, #48	; 0x30
			HAL_TICKER_US_TO_TICKS(start_to_address_actual_us);
    1b1c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_plus =
    1b20:	f8c8 0000 	str.w	r0, [r8]
			HAL_TICKER_US_TO_TICKS(EVENT_JITTER_US +
    1b24:	a306      	add	r3, pc, #24	; (adr r3, 1b40 <ull_drift_ticks_get+0x80>)
    1b26:	e9d3 2300 	ldrd	r2, r3, [r3]
    1b2a:	fba1 0104 	umull	r0, r1, r1, r4
    1b2e:	f7ff fa33 	bl	f98 <__aeabi_uldivmod>
    1b32:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		*ticks_drift_minus =
    1b36:	6038      	str	r0, [r7, #0]
}
    1b38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1b3c:	f3af 8000 	nop.w
    1b40:	1afd498d 	.word	0x1afd498d
    1b44:	00000007 	.word	0x00000007
    1b48:	3b9aca00 	.word	0x3b9aca00
    1b4c:	00000000 	.word	0x00000000

00001b50 <ll_adv_enable>:
	uint8_t aux_is_started = 0U;
	uint32_t ticks_anchor;
#endif /* !CONFIG_BT_HCI_MESH_EXT */
#else /* !CONFIG_BT_CTLR_ADV_EXT || !CONFIG_BT_HCI_MESH_EXT */
uint8_t ll_adv_enable(uint8_t enable)
{
    1b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1b54:	b08f      	sub	sp, #60	; 0x3c
	struct pdu_adv *pdu_adv;
	struct ll_adv_set *adv;
	struct lll_adv *lll;
	uint32_t ret;

	if (!enable) {
    1b56:	2800      	cmp	r0, #0
    1b58:	f000 814b 	beq.w	1df2 <ll_adv_enable+0x2a2>
static inline struct ll_adv_set *is_disabled_get(uint8_t handle)
{
	struct ll_adv_set *adv;

	adv = ull_adv_set_get(handle);
	if (!adv || adv->is_enabled) {
    1b5c:	4caa      	ldr	r4, [pc, #680]	; (1e08 <ll_adv_enable+0x2b8>)
    1b5e:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
    1b62:	f016 0601 	ands.w	r6, r6, #1
    1b66:	d136      	bne.n	1bd6 <ll_adv_enable+0x86>
	lll_adv_pdu_enqueue(&lll->adv_data, idx);
}

static inline struct pdu_adv *lll_adv_data_peek(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1b68:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
	lll_adv_pdu_enqueue(&lll->scan_rsp, idx);
}

static inline struct pdu_adv *lll_adv_scan_rsp_peek(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1b6c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
	ull_filter_adv_update(lll->filter_policy);
    1b70:	f894 0029 	ldrb.w	r0, [r4, #41]	; 0x29
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1b74:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1b78:	eb04 0383 	add.w	r3, r4, r3, lsl #2
	lll->rl_idx = FILTER_IDX_NONE;
    1b7c:	21ff      	movs	r1, #255	; 0xff
	ull_filter_adv_update(lll->filter_policy);
    1b7e:	f000 0003 	and.w	r0, r0, #3
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
    1b82:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
    1b86:	f8d3 903c 	ldr.w	r9, [r3, #60]	; 0x3c
	lll->rl_idx = FILTER_IDX_NONE;
    1b8a:	f884 102a 	strb.w	r1, [r4, #42]	; 0x2a
	ull_filter_adv_update(lll->filter_policy);
    1b8e:	f018 fb35 	bl	1a1fc <ull_filter_adv_update>
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
    1b92:	f894 004e 	ldrb.w	r0, [r4, #78]	; 0x4e
    1b96:	0747      	lsls	r7, r0, #29
    1b98:	f100 8117 	bmi.w	1dca <ll_adv_enable+0x27a>
	if (pdu_adv_to_update) {
    1b9c:	f1b8 0f00 	cmp.w	r8, #0
    1ba0:	d011      	beq.n	1bc6 <ll_adv_enable+0x76>
		adv_addr = ull_adv_pdu_update_addrs(adv, pdu_adv_to_update);
    1ba2:	4899      	ldr	r0, [pc, #612]	; (1e08 <ll_adv_enable+0x2b8>)
    1ba4:	4641      	mov	r1, r8
    1ba6:	f013 fa41 	bl	1502c <ull_adv_pdu_update_addrs>
		if (pdu_adv_to_update->tx_addr &&
    1baa:	f898 3000 	ldrb.w	r3, [r8]
    1bae:	065d      	lsls	r5, r3, #25
    1bb0:	d505      	bpl.n	1bbe <ll_adv_enable+0x6e>
		    !mem_nz((void *)adv_addr, BDADDR_SIZE)) {
    1bb2:	2106      	movs	r1, #6
    1bb4:	f00e fdfa 	bl	107ac <mem_nz>
		if (pdu_adv_to_update->tx_addr &&
    1bb8:	2800      	cmp	r0, #0
    1bba:	f000 81df 	beq.w	1f7c <ll_adv_enable+0x42c>
			ull_adv_pdu_update_addrs(adv, pdu_scan);
    1bbe:	4892      	ldr	r0, [pc, #584]	; (1e08 <ll_adv_enable+0x2b8>)
    1bc0:	4649      	mov	r1, r9
    1bc2:	f013 fa33 	bl	1502c <ull_adv_pdu_update_addrs>
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
    1bc6:	f898 3000 	ldrb.w	r3, [r8]
    1bca:	f013 0f0e 	tst.w	r3, #14
    1bce:	f040 80d3 	bne.w	1d78 <ll_adv_enable+0x228>
		if (lll->conn) {
    1bd2:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1bd4:	b123      	cbz	r3, 1be0 <ll_adv_enable+0x90>
	return BT_HCI_ERR_CMD_DISALLOWED;
    1bd6:	260c      	movs	r6, #12
}
    1bd8:	4630      	mov	r0, r6
    1bda:	b00f      	add	sp, #60	; 0x3c
    1bdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		link = ll_rx_link_alloc();
    1be0:	f012 fb8c 	bl	142fc <ll_rx_link_alloc>
		if (!link) {
    1be4:	4682      	mov	sl, r0
    1be6:	2800      	cmp	r0, #0
    1be8:	f000 81d7 	beq.w	1f9a <ll_adv_enable+0x44a>
		node_rx = ll_rx_alloc();
    1bec:	f012 fb92 	bl	14314 <ll_rx_alloc>
		if (!node_rx) {
    1bf0:	4683      	mov	fp, r0
    1bf2:	2800      	cmp	r0, #0
    1bf4:	f000 81d6 	beq.w	1fa4 <ll_adv_enable+0x454>
		conn = ll_conn_acquire();
    1bf8:	f013 ff74 	bl	15ae4 <ll_conn_acquire>
		if (!conn) {
    1bfc:	4605      	mov	r5, r0
    1bfe:	2800      	cmp	r0, #0
    1c00:	f000 81cd 	beq.w	1f9e <ll_adv_enable+0x44e>
		if (!conn_lll->link_tx_free) {
    1c04:	6f80      	ldr	r0, [r0, #120]	; 0x78
		conn_lll->handle = 0xFFFF;
    1c06:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1c0a:	85ab      	strh	r3, [r5, #44]	; 0x2c
		conn_lll = &conn->lll;
    1c0c:	f105 031c 	add.w	r3, r5, #28
		if (!conn_lll->link_tx_free) {
    1c10:	2800      	cmp	r0, #0
    1c12:	f000 81be 	beq.w	1f92 <ll_adv_enable+0x442>
		memq_init(conn_lll->link_tx_free, &conn_lll->memq_tx.head,
    1c16:	f105 026c 	add.w	r2, r5, #108	; 0x6c
    1c1a:	f105 0168 	add.w	r1, r5, #104	; 0x68
    1c1e:	930b      	str	r3, [sp, #44]	; 0x2c
    1c20:	f00e fdd0 	bl	107c4 <memq_init>
			conn_lll->phy_tx = PHY_1M;
    1c24:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
		conn_lll->slave.latency_enabled = 0;
    1c28:	f895 1040 	ldrb.w	r1, [r5, #64]	; 0x40
		conn->llcp_terminate.node_rx.hdr.link = link;
    1c2c:	f8c5 a13c 	str.w	sl, [r5, #316]	; 0x13c
			conn_lll->phy_tx = PHY_1M;
    1c30:	f422 62ef 	bic.w	r2, r2, #1912	; 0x778
    1c34:	f022 0207 	bic.w	r2, r2, #7
    1c38:	f442 7288 	orr.w	r2, r2, #272	; 0x110
    1c3c:	f042 0201 	orr.w	r2, r2, #1
    1c40:	f8a5 2064 	strh.w	r2, [r5, #100]	; 0x64
		conn_lll->data_chan_sel = 0;
    1c44:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
    1c48:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    1c4c:	f062 027f 	orn	r2, r2, #127	; 0x7f
    1c50:	f885 203d 	strb.w	r2, [r5, #61]	; 0x3d
		conn->llcp_version.tx = conn->llcp_version.rx = 0;
    1c54:	f895 2132 	ldrb.w	r2, [r5, #306]	; 0x132
    1c58:	f022 0203 	bic.w	r2, r2, #3
    1c5c:	f885 2132 	strb.w	r2, [r5, #306]	; 0x132
		conn_lll->sn = 0;
    1c60:	f895 207e 	ldrb.w	r2, [r5, #126]	; 0x7e
    1c64:	f022 021f 	bic.w	r2, r2, #31
    1c68:	f885 207e 	strb.w	r2, [r5, #126]	; 0x7e
		conn_lll->max_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
    1c6c:	4a67      	ldr	r2, [pc, #412]	; (1e0c <ll_adv_enable+0x2bc>)
    1c6e:	662a      	str	r2, [r5, #96]	; 0x60
		conn->llcp_feature.features_conn = LL_FEAT;
    1c70:	4a67      	ldr	r2, [pc, #412]	; (1e10 <ll_adv_enable+0x2c0>)
    1c72:	f8c5 2128 	str.w	r2, [r5, #296]	; 0x128
		conn_lll->data_chan_use = 0;
    1c76:	2700      	movs	r7, #0
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1c78:	f04f 121b 	mov.w	r2, #1769499	; 0x1b001b
		conn_lll->slave.latency_enabled = 0;
    1c7c:	f367 0100 	bfi	r1, r7, #0, #1
		conn_lll->max_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
    1c80:	65ea      	str	r2, [r5, #92]	; 0x5c
		conn->connect_expire = 6;
    1c82:	2206      	movs	r2, #6
		conn_lll->slave.latency_enabled = 0;
    1c84:	f885 1040 	strb.w	r1, [r5, #64]	; 0x40
		conn_lll->slave.window_widening_event_us = 0;
    1c88:	e9c5 7713 	strd	r7, r7, [r5, #76]	; 0x4c
		conn_lll->data_chan_use = 0;
    1c8c:	f885 703f 	strb.w	r7, [r5, #63]	; 0x3f
		conn_lll->latency_prepare = 0;
    1c90:	866f      	strh	r7, [r5, #50]	; 0x32
		conn_lll->latency_event = 0;
    1c92:	636f      	str	r7, [r5, #52]	; 0x34
		conn_lll->slave.window_size_prepare_us = 0;
    1c94:	656f      	str	r7, [r5, #84]	; 0x54
		conn->supervision_expire = 0;
    1c96:	f8a5 70c8 	strh.w	r7, [r5, #200]	; 0xc8
		conn->procedure_expire = 0;
    1c9a:	f8a5 70cc 	strh.w	r7, [r5, #204]	; 0xcc
		conn->llcp_rx = NULL;
    1c9e:	f8c5 710c 	str.w	r7, [r5, #268]	; 0x10c
		conn->llcp_cu.req = conn->llcp_cu.ack = 0;
    1ca2:	f8a5 7110 	strh.w	r7, [r5, #272]	; 0x110
		conn->llcp_feature.req = conn->llcp_feature.ack = 0;
    1ca6:	f8a5 7124 	strh.w	r7, [r5, #292]	; 0x124
		conn->llcp_feature.features_peer = 0;
    1caa:	f8c5 712c 	str.w	r7, [r5, #300]	; 0x12c
		conn->llcp_version.req = conn->llcp_version.ack = 0;
    1cae:	f8a5 7130 	strh.w	r7, [r5, #304]	; 0x130
		conn->llcp_terminate.reason_peer = 0;
    1cb2:	f885 713b 	strb.w	r7, [r5, #315]	; 0x13b
		conn_lll->link_tx_free = NULL;
    1cb6:	67af      	str	r7, [r5, #120]	; 0x78
		conn_lll->packet_tx_head_len = 0;
    1cb8:	f8a5 707c 	strh.w	r7, [r5, #124]	; 0x7c
		conn->llcp_enc.req = conn->llcp_enc.ack = 0U;
    1cbc:	f8a5 715c 	strh.w	r7, [r5, #348]	; 0x15c
		conn->connect_expire = 6;
    1cc0:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1cc4:	f895 215e 	ldrb.w	r2, [r5, #350]	; 0x15e
		conn->llcp_conn_param.req = 0;
    1cc8:	f8a5 717c 	strh.w	r7, [r5, #380]	; 0x17c
		conn->llcp_enc.pause_tx = conn->llcp_enc.pause_rx = 0U;
    1ccc:	f022 0207 	bic.w	r2, r2, #7
    1cd0:	f885 215e 	strb.w	r2, [r5, #350]	; 0x15e
		conn->common.fex_valid = 0;
    1cd4:	f8b5 20dc 	ldrh.w	r2, [r5, #220]	; 0xdc
		conn->slave.ticks_to_offset = 0;
    1cd8:	f8c5 70e4 	str.w	r7, [r5, #228]	; 0xe4
		conn->common.fex_valid = 0;
    1cdc:	f002 02fc 	and.w	r2, r2, #252	; 0xfc
    1ce0:	f8a5 20dc 	strh.w	r2, [r5, #220]	; 0xdc
		conn->llcp_conn_param.disabled = 0;
    1ce4:	f895 217e 	ldrb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1ce8:	f8a5 70e8 	strh.w	r7, [r5, #232]	; 0xe8
		conn->llcp_conn_param.disabled = 0;
    1cec:	f367 1204 	bfi	r2, r7, #4, #1
    1cf0:	f885 217e 	strb.w	r2, [r5, #382]	; 0x17e
		conn->llcp_length.disabled = 0U;
    1cf4:	f895 21a6 	ldrb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_req = conn->llcp_ack = conn->llcp_type = 0;
    1cf8:	f885 70ea 	strb.w	r7, [r5, #234]	; 0xea
		conn->llcp_length.disabled = 0U;
    1cfc:	f367 02c3 	bfi	r2, r7, #3, #1
    1d00:	f885 21a6 	strb.w	r2, [r5, #422]	; 0x1a6
		conn->llcp_length.req = conn->llcp_length.ack = 0U;
    1d04:	f8a5 71a4 	strh.w	r7, [r5, #420]	; 0x1a4
		conn->llcp_length.cache.tx_octets = 0U;
    1d08:	f8a5 71b0 	strh.w	r7, [r5, #432]	; 0x1b0
		conn->default_tx_octets = ull_conn_default_tx_octets_get();
    1d0c:	f014 fa24 	bl	16158 <ull_conn_default_tx_octets_get>
    1d10:	f8a5 00d6 	strh.w	r0, [r5, #214]	; 0xd6
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1d14:	f014 fa26 	bl	16164 <ull_conn_default_tx_time_get>
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1d18:	f8d5 11b4 	ldr.w	r1, [r5, #436]	; 0x1b4
    1d1c:	4a3d      	ldr	r2, [pc, #244]	; (1e14 <ll_adv_enable+0x2c4>)
		conn->default_tx_time = ull_conn_default_tx_time_get();
    1d1e:	f8a5 00d8 	strh.w	r0, [r5, #216]	; 0xd8
		conn->llcp_phy.req = conn->llcp_phy.ack = 0;
    1d22:	400a      	ands	r2, r1
    1d24:	f8c5 21b4 	str.w	r2, [r5, #436]	; 0x1b4
		conn->phy_pref_tx = ull_conn_default_phy_tx_get();
    1d28:	f014 fa22 	bl	16170 <ull_conn_default_phy_tx_get>
    1d2c:	f895 21b8 	ldrb.w	r2, [r5, #440]	; 0x1b8
    1d30:	f360 0202 	bfi	r2, r0, #0, #3
    1d34:	f885 21b8 	strb.w	r2, [r5, #440]	; 0x1b8
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1d38:	f014 fa20 	bl	1617c <ull_conn_default_phy_rx_get>
		lll->conn = conn_lll;
    1d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    1d3e:	6263      	str	r3, [r4, #36]	; 0x24
		adv->node_rx_cc_free = node_rx;
    1d40:	e9c4 ab11 	strd	sl, fp, [r4, #68]	; 0x44
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1d44:	f895 31b8 	ldrb.w	r3, [r5, #440]	; 0x1b8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1d48:	f8c5 71bc 	str.w	r7, [r5, #444]	; 0x1bc
		conn->phy_pref_rx = ull_conn_default_phy_rx_get();
    1d4c:	f360 03c5 	bfi	r3, r0, #3, #3
    1d50:	f885 31b8 	strb.w	r3, [r5, #440]	; 0x1b8
static inline void lll_hdr_init(void *lll, void *parent)
{
	struct lll_hdr *hdr = lll;

	hdr->parent = parent;
	hdr->is_stop = 0U;
    1d54:	f895 3020 	ldrb.w	r3, [r5, #32]
	hdr->parent = parent;
    1d58:	61ed      	str	r5, [r5, #28]
	hdr->is_stop = 0U;
    1d5a:	f367 0300 	bfi	r3, r7, #0, #1
		conn->tx_data = conn->tx_data_last = 0;
    1d5e:	e9c5 7772 	strd	r7, r7, [r5, #456]	; 0x1c8
		conn->tx_head = conn->tx_ctrl = conn->tx_ctrl_last =
    1d62:	e9c5 7770 	strd	r7, r7, [r5, #448]	; 0x1c0
	return hdr->ref--;
}

static inline void ull_hdr_init(struct ull_hdr *hdr)
{
	hdr->disabled_cb = hdr->disabled_param = NULL;
    1d66:	e9c5 7705 	strd	r7, r7, [r5, #20]
    1d6a:	f885 3020 	strb.w	r3, [r5, #32]
		err = lll_clock_wait();
    1d6e:	f019 fa69 	bl	1b244 <lll_clock_wait>
		if (err) {
    1d72:	2800      	cmp	r0, #0
    1d74:	f040 8104 	bne.w	1f80 <ll_adv_enable+0x430>
	uint8_t ch_map = lll->chan_map;
    1d78:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1d7c:	2101      	movs	r1, #1
	uint8_t ch_map = lll->chan_map;
    1d7e:	f3c3 0342 	ubfx	r3, r3, #1, #3
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1d82:	f10d 0033 	add.w	r0, sp, #51	; 0x33
	uint8_t ch_map = lll->chan_map;
    1d86:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
	const uint8_t adv_chn_cnt = util_ones_count_get(&ch_map, sizeof(ch_map));
    1d8a:	f00e fe95 	bl	10ab8 <util_ones_count_get>
	if (adv_chn_cnt == 0) {
    1d8e:	2800      	cmp	r0, #0
    1d90:	f000 8099 	beq.w	1ec6 <ll_adv_enable+0x376>
		if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
    1d94:	f898 2000 	ldrb.w	r2, [r8]
    1d98:	f002 020f 	and.w	r2, r2, #15
    1d9c:	2a02      	cmp	r2, #2
    1d9e:	d03b      	beq.n	1e18 <ll_adv_enable+0x2c8>
			if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
    1da0:	2a01      	cmp	r2, #1
    1da2:	f000 80f1 	beq.w	1f88 <ll_adv_enable+0x438>
					BYTES2US((PDU_OVERHEAD_SIZE(PHY_1M) +
    1da6:	f899 3001 	ldrb.w	r3, [r9, #1]
    1daa:	3310      	adds	r3, #16
		const uint16_t scan_rsp_us =
    1dac:	00db      	lsls	r3, r3, #3
			} else if (pdu_adv->type == PDU_ADV_TYPE_ADV_IND) {
    1dae:	2a00      	cmp	r2, #0
    1db0:	f000 80d9 	beq.w	1f66 <ll_adv_enable+0x416>
			} else if (pdu_adv->type == PDU_ADV_TYPE_SCAN_IND) {
    1db4:	2a06      	cmp	r2, #6
    1db6:	f000 80fa 	beq.w	1fae <ll_adv_enable+0x45e>
    1dba:	f44f 73da 	mov.w	r3, #436	; 0x1b4
    1dbe:	f44f 711b 	mov.w	r1, #620	; 0x26c
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1dc2:	3801      	subs	r0, #1
			slot_us += (BYTES2US(adv_size, phy) + EVENT_IFS_MAX_US
    1dc4:	fb03 1100 	mla	r1, r3, r0, r1
    1dc8:	e032      	b.n	1e30 <ll_adv_enable+0x2e0>
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1dca:	f3c0 00c0 	ubfx	r0, r0, #3, #1
    1dce:	4632      	mov	r2, r6
    1dd0:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    1dd4:	f018 fb7e 	bl	1a4d4 <ull_filter_rl_find>
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1dd8:	28ff      	cmp	r0, #255	; 0xff
		lll->rl_idx = ull_filter_rl_find(adv->id_addr_type,
    1dda:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
		if (lll->rl_idx != FILTER_IDX_NONE) {
    1dde:	f43f aedd 	beq.w	1b9c <ll_adv_enable+0x4c>
			ull_filter_rpa_update(false);
    1de2:	4630      	mov	r0, r6
    1de4:	f018 fa24 	bl	1a230 <ull_filter_rpa_update>
	if (pdu_adv_to_update) {
    1de8:	f1b8 0f00 	cmp.w	r8, #0
    1dec:	f47f aed9 	bne.w	1ba2 <ll_adv_enable+0x52>
    1df0:	e6e9      	b.n	1bc6 <ll_adv_enable+0x76>
	if (!adv || !adv->is_enabled) {
    1df2:	4b05      	ldr	r3, [pc, #20]	; (1e08 <ll_adv_enable+0x2b8>)
    1df4:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
    1df8:	07db      	lsls	r3, r3, #31
    1dfa:	f57f aeec 	bpl.w	1bd6 <ll_adv_enable+0x86>
}
    1dfe:	b00f      	add	sp, #60	; 0x3c
    1e00:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e04:	f012 bede 	b.w	14bc4 <disable.part.0>
    1e08:	2000e1b4 	.word	0x2000e1b4
    1e0c:	01480148 	.word	0x01480148
    1e10:	0001417f 	.word	0x0001417f
    1e14:	f6ff0000 	.word	0xf6ff0000
			adv_size += pdu_adv->len;
    1e18:	f898 3001 	ldrb.w	r3, [r8, #1]
    1e1c:	3310      	adds	r3, #16
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1e1e:	00db      	lsls	r3, r3, #3
    1e20:	fb00 f303 	mul.w	r3, r0, r3
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1e24:	1e41      	subs	r1, r0, #1
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1e26:	f503 73aa 	add.w	r3, r3, #340	; 0x154
				   rxtx_turn_us * (adv_chn_cnt - 1);
    1e2a:	2064      	movs	r0, #100	; 0x64
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1e2c:	fb00 3101 	mla	r1, r0, r1, r3
    1e30:	f894 3020 	ldrb.w	r3, [r4, #32]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1e34:	4866      	ldr	r0, [pc, #408]	; (1fd0 <ll_adv_enable+0x480>)
	hdr->parent = parent;
    1e36:	61e4      	str	r4, [r4, #28]
    1e38:	2500      	movs	r5, #0
	hdr->is_stop = 0U;
    1e3a:	f365 0300 	bfi	r3, r5, #0, #1
    1e3e:	f884 3020 	strb.w	r3, [r4, #32]
	adv->evt.ticks_xtal_to_start =
    1e42:	2331      	movs	r3, #49	; 0x31
    1e44:	6023      	str	r3, [r4, #0]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1e46:	fba1 0100 	umull	r0, r1, r1, r0
    1e4a:	a35f      	add	r3, pc, #380	; (adr r3, 1fc8 <ll_adv_enable+0x478>)
    1e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
    1e50:	e9c4 5505 	strd	r5, r5, [r4, #20]
	adv->evt.ticks_preempt_to_start =
    1e54:	e9c4 5501 	strd	r5, r5, [r4, #4]
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1e58:	f7ff f89e 	bl	f98 <__aeabi_uldivmod>
	uint16_t interval = adv->interval;
    1e5c:	f8b4 704c 	ldrh.w	r7, [r4, #76]	; 0x4c
	adv->evt.ticks_slot = HAL_TICKER_US_TO_TICKS(slot_us);
    1e60:	60e0      	str	r0, [r4, #12]
	ticks_anchor = ticker_ticks_now_get();
    1e62:	f00f ff6d 	bl	11d40 <ticker_ticks_now_get>
    1e66:	4681      	mov	r9, r0
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1e68:	b947      	cbnz	r7, 1e7c <ll_adv_enable+0x32c>
    1e6a:	f898 5000 	ldrb.w	r5, [r8]
    1e6e:	f005 050f 	and.w	r5, r5, #15
    1e72:	f1a5 0501 	sub.w	r5, r5, #1
    1e76:	fab5 f585 	clz	r5, r5
    1e7a:	096d      	lsrs	r5, r5, #5
    1e7c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    1e80:	f365 0000 	bfi	r0, r5, #0, #1
	if (lll->is_hdcd) {
    1e84:	f010 0501 	ands.w	r5, r0, #1
	lll->is_hdcd = !interval && (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND);
    1e88:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	if (lll->is_hdcd) {
    1e8c:	d022      	beq.n	1ed4 <ll_adv_enable+0x384>
				   (adv->evt.ticks_slot + ticks_slot_overhead),
    1e8e:	68e3      	ldr	r3, [r4, #12]
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e90:	4a50      	ldr	r2, [pc, #320]	; (1fd4 <ll_adv_enable+0x484>)
    1e92:	f8df 8144 	ldr.w	r8, [pc, #324]	; 1fd8 <ll_adv_enable+0x488>
    1e96:	9304      	str	r3, [sp, #16]
    1e98:	2000      	movs	r0, #0
		ret_cb = TICKER_STATUS_BUSY;
    1e9a:	2502      	movs	r5, #2
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1e9c:	af0d      	add	r7, sp, #52	; 0x34
    1e9e:	9301      	str	r3, [sp, #4]
    1ea0:	9205      	str	r2, [sp, #20]
    1ea2:	2103      	movs	r1, #3
    1ea4:	e9cd 0002 	strd	r0, r0, [sp, #8]
    1ea8:	9406      	str	r4, [sp, #24]
    1eaa:	464b      	mov	r3, r9
    1eac:	9000      	str	r0, [sp, #0]
    1eae:	9708      	str	r7, [sp, #32]
    1eb0:	f8cd 801c 	str.w	r8, [sp, #28]
    1eb4:	462a      	mov	r2, r5
		ret_cb = TICKER_STATUS_BUSY;
    1eb6:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1eb8:	f00f fe76 	bl	11ba8 <ticker_start>
		ret = ull_ticker_status_take(ret, &ret_cb);
    1ebc:	4639      	mov	r1, r7
    1ebe:	f012 fad3 	bl	14468 <ull_ticker_status_take>
		if (ret != TICKER_STATUS_SUCCESS) {
    1ec2:	2800      	cmp	r0, #0
    1ec4:	d03b      	beq.n	1f3e <ll_adv_enable+0x3ee>
	if (adv->lll.conn) {
    1ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
    1ec8:	2b00      	cmp	r3, #0
    1eca:	f43f ae84 	beq.w	1bd6 <ll_adv_enable+0x86>
		conn_release(adv);
    1ece:	f012 fe37 	bl	14b40 <conn_release.constprop.0>
    1ed2:	e680      	b.n	1bd6 <ll_adv_enable+0x86>
		const uint32_t ticks_slot = adv->evt.ticks_slot +
    1ed4:	68e3      	ldr	r3, [r4, #12]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1ed6:	4a41      	ldr	r2, [pc, #260]	; (1fdc <ll_adv_enable+0x48c>)
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1ed8:	4841      	ldr	r0, [pc, #260]	; (1fe0 <ll_adv_enable+0x490>)
		ret = ticker_start_ext(
    1eda:	9304      	str	r3, [sp, #16]
			ULL_ADV_RANDOM_DELAY + ticks_slot;
    1edc:	f203 1347 	addw	r3, r3, #327	; 0x147
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1ee0:	fba7 0100 	umull	r0, r1, r7, r0
		ret = ticker_start_ext(
    1ee4:	9406      	str	r4, [sp, #24]
    1ee6:	9502      	str	r5, [sp, #8]
		ll_adv_ticker_ext[handle].ticks_slot_window =
    1ee8:	6013      	str	r3, [r2, #0]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1eea:	2391      	movs	r3, #145	; 0x91
    1eec:	fb03 1107 	mla	r1, r3, r7, r1
		ret = ticker_start_ext(
    1ef0:	4b39      	ldr	r3, [pc, #228]	; (1fd8 <ll_adv_enable+0x488>)
    1ef2:	9307      	str	r3, [sp, #28]
    1ef4:	4b37      	ldr	r3, [pc, #220]	; (1fd4 <ll_adv_enable+0x484>)
    1ef6:	9305      	str	r3, [sp, #20]
    1ef8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    1efc:	9209      	str	r2, [sp, #36]	; 0x24
		ret_cb = TICKER_STATUS_BUSY;
    1efe:	f04f 0802 	mov.w	r8, #2
		ret = ticker_start_ext(
    1f02:	9303      	str	r3, [sp, #12]
    1f04:	af0d      	add	r7, sp, #52	; 0x34
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1f06:	a330      	add	r3, pc, #192	; (adr r3, 1fc8 <ll_adv_enable+0x478>)
    1f08:	e9d3 2300 	ldrd	r2, r3, [r3]
		ret_cb = TICKER_STATUS_BUSY;
    1f0c:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
		ret = ticker_start_ext(
    1f10:	9708      	str	r7, [sp, #32]
				   HAL_TICKER_US_TO_TICKS((uint64_t)interval *
    1f12:	f7ff f841 	bl	f98 <__aeabi_uldivmod>
		ret = ticker_start_ext(
    1f16:	464b      	mov	r3, r9
    1f18:	e9cd 5000 	strd	r5, r0, [sp]
    1f1c:	4642      	mov	r2, r8
    1f1e:	4628      	mov	r0, r5
    1f20:	2103      	movs	r1, #3
    1f22:	f00f fdeb 	bl	11afc <ticker_start_ext>
	ret = ull_ticker_status_take(ret, &ret_cb);
    1f26:	4639      	mov	r1, r7
    1f28:	f012 fa9e 	bl	14468 <ull_ticker_status_take>
	if (ret != TICKER_STATUS_SUCCESS) {
    1f2c:	2800      	cmp	r0, #0
    1f2e:	d1ca      	bne.n	1ec6 <ll_adv_enable+0x376>
	adv->is_enabled = 1;
    1f30:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
    1f34:	f043 0301 	orr.w	r3, r3, #1
    1f38:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
	return 0;
    1f3c:	e64c      	b.n	1bd8 <ll_adv_enable+0x88>
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f3e:	4a29      	ldr	r2, [pc, #164]	; (1fe4 <ll_adv_enable+0x494>)
    1f40:	9205      	str	r2, [sp, #20]
    1f42:	f24a 32d8 	movw	r2, #41944	; 0xa3d8
    1f46:	9200      	str	r2, [sp, #0]
    1f48:	e9cd 0003 	strd	r0, r0, [sp, #12]
    1f4c:	e9cd 0001 	strd	r0, r0, [sp, #4]
    1f50:	f8cd 801c 	str.w	r8, [sp, #28]
    1f54:	9708      	str	r7, [sp, #32]
    1f56:	9406      	str	r4, [sp, #24]
    1f58:	464b      	mov	r3, r9
    1f5a:	2201      	movs	r2, #1
    1f5c:	2103      	movs	r1, #3
		ret_cb = TICKER_STATUS_BUSY;
    1f5e:	950d      	str	r5, [sp, #52]	; 0x34
		ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
    1f60:	f00f fe22 	bl	11ba8 <ticker_start>
    1f64:	e7df      	b.n	1f26 <ll_adv_enable+0x3d6>
				adv_size += pdu_adv->len;
    1f66:	f898 1001 	ldrb.w	r1, [r8, #1]
    1f6a:	3110      	adds	r1, #16
				slot_us += MAX(scan_req_us + EVENT_IFS_MAX_US +
    1f6c:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1f70:	00ca      	lsls	r2, r1, #3
    1f72:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1f76:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1f7a:	e722      	b.n	1dc2 <ll_adv_enable+0x272>
			return BT_HCI_ERR_INVALID_PARAM;
    1f7c:	2612      	movs	r6, #18
    1f7e:	e62b      	b.n	1bd8 <ll_adv_enable+0x88>
			conn_release(adv);
    1f80:	f012 fdde 	bl	14b40 <conn_release.constprop.0>
			return BT_HCI_ERR_HW_FAILURE;
    1f84:	2603      	movs	r6, #3
    1f86:	e627      	b.n	1bd8 <ll_adv_enable+0x88>
    1f88:	f44f 73f2 	mov.w	r3, #484	; 0x1e4
    1f8c:	f44f 717f 	mov.w	r1, #1020	; 0x3fc
    1f90:	e717      	b.n	1dc2 <ll_adv_enable+0x272>
			conn_lll->link_tx_free = &conn_lll->link_tx;
    1f92:	f105 0070 	add.w	r0, r5, #112	; 0x70
    1f96:	67a8      	str	r0, [r5, #120]	; 0x78
    1f98:	e63d      	b.n	1c16 <ll_adv_enable+0xc6>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1f9a:	2607      	movs	r6, #7
    1f9c:	e61c      	b.n	1bd8 <ll_adv_enable+0x88>
			ll_rx_release(node_rx);
    1f9e:	4658      	mov	r0, fp
    1fa0:	f012 f9be 	bl	14320 <ll_rx_release>
			ll_rx_link_release(link);
    1fa4:	4650      	mov	r0, sl
    1fa6:	f012 f9af 	bl	14308 <ll_rx_link_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
    1faa:	2607      	movs	r6, #7
    1fac:	e614      	b.n	1bd8 <ll_adv_enable+0x88>
				adv_size += pdu_adv->len;
    1fae:	f898 2001 	ldrb.w	r2, [r8, #1]
    1fb2:	3210      	adds	r2, #16
				slot_us += scan_req_us + EVENT_IFS_MAX_US +
    1fb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
			slot_us += BYTES2US(adv_size, phy) * adv_chn_cnt +
    1fb8:	00d2      	lsls	r2, r2, #3
    1fba:	f503 714d 	add.w	r1, r3, #820	; 0x334
				  + rx_to_us + rxtx_turn_us) * (adv_chn_cnt-1)
    1fbe:	f502 739a 	add.w	r3, r2, #308	; 0x134
    1fc2:	e6fe      	b.n	1dc2 <ll_adv_enable+0x272>
    1fc4:	f3af 8000 	nop.w
    1fc8:	1afd498d 	.word	0x1afd498d
    1fcc:	00000007 	.word	0x00000007
    1fd0:	3b9aca00 	.word	0x3b9aca00
    1fd4:	00014921 	.word	0x00014921
    1fd8:	000135b9 	.word	0x000135b9
    1fdc:	2000e20c 	.word	0x2000e20c
    1fe0:	84e72a00 	.word	0x84e72a00
    1fe4:	00014805 	.word	0x00014805

00001fe8 <event_conn_upd_prep>:
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
}

static inline int event_conn_upd_prep(struct ll_conn *conn, uint16_t lazy,
				      uint32_t ticks_at_expire)
{
    1fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_conn *lll = &conn->lll;
	struct ll_conn *conn_upd;
	uint16_t instant_latency;
	uint16_t event_counter;

	conn_upd = conn_upd_curr;
    1fec:	4dc2      	ldr	r5, [pc, #776]	; (22f8 <event_conn_upd_prep+0x310>)

	/* set mutex */
	if (!conn_upd) {
    1fee:	682b      	ldr	r3, [r5, #0]
{
    1ff0:	b08b      	sub	sp, #44	; 0x2c
    1ff2:	4604      	mov	r4, r0
    1ff4:	460f      	mov	r7, r1
    1ff6:	4690      	mov	r8, r2
	if (!conn_upd) {
    1ff8:	2b00      	cmp	r3, #0
    1ffa:	f000 8216 	beq.w	242a <event_conn_upd_prep+0x442>
		conn_upd_curr = conn;
	}

	/* Calculate current event counter */
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    1ffe:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    2000:	8ee6      	ldrh	r6, [r4, #54]	; 0x36
    2002:	441e      	add	r6, r3

	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
			  0xffff;
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    2004:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    2008:	443e      	add	r6, r7
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    200a:	f013 0307 	ands.w	r3, r3, #7
	event_counter = lll->event_counter + lll->latency_prepare + lazy;
    200e:	b2b6      	uxth	r6, r6
	if (conn->llcp_cu.state != LLCP_CUI_STATE_INPROG) {
    2010:	f040 818e 	bne.w	2330 <event_conn_upd_prep+0x348>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
    2014:	f8b4 90ec 	ldrh.w	r9, [r4, #236]	; 0xec
    2018:	eba6 0209 	sub.w	r2, r6, r9
    201c:	fa1f fb82 	uxth.w	fp, r2
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
			sys_cpu_to_le16(conn->llcp.conn_upd.instant);
		/* enqueue control PDU */
		ctrl_tx_enqueue(conn, tx);
#endif /* !CONFIG_BT_CTLR_SCHED_ADVANCED */
	} else if (instant_latency <= 0x7FFF) {
    2020:	0412      	lsls	r2, r2, #16
    2022:	f100 81eb 	bmi.w	23fc <event_conn_upd_prep+0x414>
		uint32_t ticker_status;
		uint32_t periodic_us;
		uint16_t latency;

#if defined(CONFIG_BT_PERIPHERAL) && defined(CONFIG_BT_CTLR_LE_ENC)
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    2026:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
    202a:	2a00      	cmp	r2, #0
    202c:	f2c0 812b 	blt.w	2286 <event_conn_upd_prep+0x29e>
			conn->slave.llcp_type = LLCP_NONE;
		} else
#endif /* CONFIG_BT_PERIPHERAL && CONFIG_BT_CTLR_LE_ENC */
		{
			/* procedure request acked */
			conn->llcp_ack = conn->llcp_req;
    2030:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
    2034:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9

		/* procedure request acked */
		conn->llcp_cu.ack = conn->llcp_cu.req;

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2038:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
    203c:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
		conn->llcp_cu.ack = conn->llcp_cu.req;
    2040:	f894 1110 	ldrb.w	r1, [r4, #272]	; 0x110
    2044:	f884 1111 	strb.w	r1, [r4, #273]	; 0x111
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2048:	4293      	cmp	r3, r2
    204a:	d006      	beq.n	205a <event_conn_upd_prep+0x72>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
    204c:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
    2050:	f003 0307 	and.w	r3, r3, #7
    2054:	2b05      	cmp	r3, #5
    2056:	f000 823e 	beq.w	24d6 <event_conn_upd_prep+0x4ee>
			conn->procedure_expire = 0U;
		}
#endif /* CONFIG_BT_CTLR_CONN_PARAM_REQ */

		/* reset mutex */
		if (conn_upd_curr == conn) {
    205a:	682b      	ldr	r3, [r5, #0]
    205c:	42a3      	cmp	r3, r4
	conn_upd_curr = NULL;
    205e:	bf04      	itt	eq
    2060:	2300      	moveq	r3, #0
    2062:	602b      	streq	r3, [r5, #0]
		}

		lll = &conn->lll;

		/* Acquire Rx node */
		rx = conn->llcp_rx;
    2064:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
    2068:	2d00      	cmp	r5, #0
    206a:	f000 8130 	beq.w	22ce <event_conn_upd_prep+0x2e6>
    206e:	6828      	ldr	r0, [r5, #0]
    2070:	2800      	cmp	r0, #0
    2072:	f000 812c 	beq.w	22ce <event_conn_upd_prep+0x2e6>
		conn->llcp_rx = rx->hdr.link->mem;

		/* Prepare the rx packet structure */
		if ((conn->llcp_cu.interval != lll->interval) ||
    2076:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
    2078:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
		conn->llcp_rx = rx->hdr.link->mem;
    207c:	6841      	ldr	r1, [r0, #4]
    207e:	f8c4 110c 	str.w	r1, [r4, #268]	; 0x10c
		if ((conn->llcp_cu.interval != lll->interval) ||
    2082:	4293      	cmp	r3, r2
		    (conn->llcp_cu.latency != lll->latency) ||
    2084:	f8b4 2116 	ldrh.w	r2, [r4, #278]	; 0x116
		if ((conn->llcp_cu.interval != lll->interval) ||
    2088:	f000 8105 	beq.w	2296 <event_conn_upd_prep+0x2ae>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    208c:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
				       lll->interval * CONN_INT_UNIT_US) !=
		     conn->supervision_reload)) {
			struct node_rx_cu *cu;

			rx->hdr.handle = lll->handle;
    2090:	f8b4 c02c 	ldrh.w	ip, [r4, #44]	; 0x2c
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;

			/* prepare connection update complete structure */
			cu = (void *)rx->pdu;
			cu->status = 0x00;
			cu->interval = conn->llcp_cu.interval;
    2094:	83eb      	strh	r3, [r5, #30]
			rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
    2096:	2315      	movs	r3, #21
    2098:	712b      	strb	r3, [r5, #4]
			cu->status = 0x00;
    209a:	2300      	movs	r3, #0
			rx->hdr.handle = lll->handle;
    209c:	f8a5 c006 	strh.w	ip, [r5, #6]
			cu->latency = conn->llcp_cu.latency;
    20a0:	842a      	strh	r2, [r5, #32]
			cu->timeout = conn->llcp_cu.timeout;
    20a2:	8469      	strh	r1, [r5, #34]	; 0x22
			cu->status = 0x00;
    20a4:	772b      	strb	r3, [r5, #28]
			/* Mark for buffer for release */
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
		}

		/* enqueue rx node towards Thread */
		ll_rx_put(rx->hdr.link, rx);
    20a6:	4629      	mov	r1, r5
    20a8:	f012 f940 	bl	1432c <ll_rx_put>
		ll_rx_sched();
    20ac:	f012 f948 	bl	14340 <ll_rx_sched>

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED)
		/* restore to normal prepare */
		if (conn->evt.ticks_xtal_to_start & XON_BITMASK) {
    20b0:	6823      	ldr	r3, [r4, #0]
    20b2:	2b00      	cmp	r3, #0
    20b4:	da0a      	bge.n	20cc <event_conn_upd_prep+0xe4>
			uint32_t ticks_prepare_to_start =
    20b6:	e9d4 2101 	ldrd	r2, r1, [r4, #4]
				MAX(conn->evt.ticks_active_to_start,
				    conn->evt.ticks_preempt_to_start);

			conn->evt.ticks_xtal_to_start &= ~XON_BITMASK;
    20ba:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
    20be:	4291      	cmp	r1, r2
    20c0:	bf2c      	ite	cs
    20c2:	4488      	addcs	r8, r1
    20c4:	4490      	addcc	r8, r2
    20c6:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->evt.ticks_xtal_to_start -
    20c8:	eba8 0803 	sub.w	r8, r8, r3
					    ticks_prepare_to_start);
		}
#endif /* CONFIG_BT_CTLR_XTAL_ADVANCED */

		/* compensate for instant_latency due to laziness */
		conn_interval_old = instant_latency * lll->interval;
    20cc:	8de0      	ldrh	r0, [r4, #46]	; 0x2e
		latency = conn_interval_old / conn->llcp_cu.interval;
    20ce:	f8b4 5114 	ldrh.w	r5, [r4, #276]	; 0x114
		conn_interval_old = instant_latency * lll->interval;
    20d2:	fb10 f00b 	smulbb	r0, r0, fp
    20d6:	b280      	uxth	r0, r0
		latency = conn_interval_old / conn->llcp_cu.interval;
    20d8:	fbb0 f1f5 	udiv	r1, r0, r5
		conn_interval_new = latency * conn->llcp_cu.interval;
    20dc:	fb15 f301 	smulbb	r3, r5, r1
    20e0:	b29b      	uxth	r3, r3
		if (conn_interval_new > conn_interval_old) {
    20e2:	4298      	cmp	r0, r3
		latency = conn_interval_old / conn->llcp_cu.interval;
    20e4:	fa1f fa81 	uxth.w	sl, r1
		if (conn_interval_new > conn_interval_old) {
    20e8:	f080 818d 	bcs.w	2406 <event_conn_upd_prep+0x41e>
			ticks_at_expire += HAL_TICKER_US_TO_TICKS(
    20ec:	1a1b      	subs	r3, r3, r0
    20ee:	4983      	ldr	r1, [pc, #524]	; (22fc <event_conn_upd_prep+0x314>)
    20f0:	f240 40e2 	movw	r0, #1250	; 0x4e2
    20f4:	fb03 f000 	mul.w	r0, r3, r0
    20f8:	fba0 0101 	umull	r0, r1, r0, r1
    20fc:	a37c      	add	r3, pc, #496	; (adr r3, 22f0 <event_conn_upd_prep+0x308>)
    20fe:	e9d3 2300 	ldrd	r2, r3, [r3]
    2102:	f7fe ff49 	bl	f98 <__aeabi_uldivmod>
    2106:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    210a:	4480      	add	r8, r0
		} else {
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
				(conn_interval_old - conn_interval_new) *
				CONN_INT_UNIT_US);
		}
		lll->latency_prepare += lazy;
    210c:	8e61      	ldrh	r1, [r4, #50]	; 0x32
			CONN_INT_UNIT_US;
		periodic_us = conn_interval_us;

		if (0) {
#if defined(CONFIG_BT_PERIPHERAL)
		} else if (lll->role) {
    210e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
		lll->latency_prepare -= (instant_latency - latency);
    2112:	eba9 0906 	sub.w	r9, r9, r6
    2116:	44d1      	add	r9, sl
		lll->latency_prepare += lazy;
    2118:	440f      	add	r7, r1
		lll->latency_prepare -= (instant_latency - latency);
    211a:	444f      	add	r7, r9
    211c:	8667      	strh	r7, [r4, #50]	; 0x32
		} else if (lll->role) {
    211e:	2b00      	cmp	r3, #0
		conn_interval_us = conn->llcp_cu.interval *
    2120:	f240 47e2 	movw	r7, #1250	; 0x4e2
    2124:	fb07 f605 	mul.w	r6, r7, r5
		} else if (lll->role) {
    2128:	f2c0 8181 	blt.w	242e <event_conn_upd_prep+0x446>
			 */
			ticks_win_offset += 1U;
#endif /* CONFIG_BT_CENTRAL */

		} else {
			LL_ASSERT(0);
    212c:	4a74      	ldr	r2, [pc, #464]	; (2300 <event_conn_upd_prep+0x318>)
    212e:	4975      	ldr	r1, [pc, #468]	; (2304 <event_conn_upd_prep+0x31c>)
    2130:	4875      	ldr	r0, [pc, #468]	; (2308 <event_conn_upd_prep+0x320>)
    2132:	f640 13f6 	movw	r3, #2550	; 0x9f6
    2136:	f01f fcf5 	bl	21b24 <printk>
    213a:	4040      	eors	r0, r0
    213c:	f380 8811 	msr	BASEPRI, r0
    2140:	f04f 0003 	mov.w	r0, #3
    2144:	df02      	svc	2
		uint32_t ticks_win_offset = 0;
    2146:	2700      	movs	r7, #0
		periodic_us = conn_interval_us;
    2148:	46b3      	mov	fp, r6

		conn->supervision_reload =
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
					  conn_interval_us);
		conn->procedure_reload =
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    214a:	4a70      	ldr	r2, [pc, #448]	; (230c <event_conn_upd_prep+0x324>)
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    214c:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118

#if defined(CONFIG_BT_CTLR_LE_PING)
		/* APTO in no. of connection events */
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2150:	486f      	ldr	r0, [pc, #444]	; (2310 <event_conn_upd_prep+0x328>)
		lll->latency = conn->llcp_cu.latency;
    2152:	f8b4 1116 	ldrh.w	r1, [r4, #278]	; 0x116
    2156:	8621      	strh	r1, [r4, #48]	; 0x30
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2158:	4432      	add	r2, r6
    215a:	fbb2 f2f6 	udiv	r2, r2, r6
    215e:	f8a4 20ca 	strh.w	r2, [r4, #202]	; 0xca
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2162:	f242 7210 	movw	r2, #10000	; 0x2710
    2166:	fb02 6303 	mla	r3, r2, r3, r6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    216a:	4430      	add	r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    216c:	3b01      	subs	r3, #1
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    216e:	fbb0 f0f6 	udiv	r0, r0, r6
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2172:	fbb3 f6f6 	udiv	r6, r3, r6
		lll->interval = conn->llcp_cu.interval;
    2176:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    217a:	85e3      	strh	r3, [r4, #46]	; 0x2e
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    217c:	b283      	uxth	r3, r0
						      conn_interval_us);
		/* Dispatch LE Ping PDU 6 connection events (that peer would
		 * listen to) before 30s timeout
		 * TODO: "peer listens to" is greater than 30s due to latency
		 */
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    217e:	1d88      	adds	r0, r1, #6
    2180:	4283      	cmp	r3, r0
			RADIO_CONN_EVENTS((conn->llcp_cu.timeout * 10U * 1000U),
    2182:	f8a4 60c6 	strh.w	r6, [r4, #198]	; 0xc6
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2186:	f8a4 30d2 	strh.w	r3, [r4, #210]	; 0xd2
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    218a:	dd02      	ble.n	2192 <event_conn_upd_prep+0x1aa>
				     (conn->apto_reload - (lll->latency + 6)) :
    218c:	1a5b      	subs	r3, r3, r1
    218e:	3b06      	subs	r3, #6
		conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2190:	b29b      	uxth	r3, r3
    2192:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				     conn->apto_reload;
#endif /* CONFIG_BT_CTLR_LE_PING */

		if (conn->llcp_cu.cmd) {
    2196:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
    219a:	071b      	lsls	r3, r3, #28
			conn->supervision_expire = 0U;
    219c:	bf44      	itt	mi
    219e:	2300      	movmi	r3, #0
    21a0:	f8a4 30c8 	strhmi.w	r3, [r4, #200]	; 0xc8
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* disable ticker job, in order to chain stop and start
		 * to avoid RTC being stopped if no tickers active.
		 */
		uint32_t mayfly_was_enabled =
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    21a4:	2102      	movs	r1, #2
    21a6:	2001      	movs	r0, #1
    21a8:	f01a ffca 	bl	1d140 <mayfly_is_enabled>
					  TICKER_USER_ID_ULL_LOW);
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    21ac:	2200      	movs	r2, #0
    21ae:	2102      	movs	r1, #2
			mayfly_is_enabled(TICKER_USER_ID_ULL_HIGH,
    21b0:	4681      	mov	r9, r0
		mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW,
    21b2:	2001      	movs	r0, #1
    21b4:	f00e fb56 	bl	10864 <mayfly_enable>
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
    21b8:	4956      	ldr	r1, [pc, #344]	; (2314 <event_conn_upd_prep+0x32c>)
    21ba:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
    21be:	4620      	mov	r0, r4
    21c0:	f00e fae0 	bl	10784 <mem_index_get>
			      0);
#endif

		/* start slave/master with new timings */
		ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    21c4:	f100 0a03 	add.w	sl, r0, #3
    21c8:	fa5f fa8a 	uxtb.w	sl, sl
		ticker_status =	ticker_stop(TICKER_INSTANCE_ID_CTLR,
    21cc:	4b52      	ldr	r3, [pc, #328]	; (2318 <event_conn_upd_prep+0x330>)
    21ce:	9400      	str	r4, [sp, #0]
    21d0:	4652      	mov	r2, sl
    21d2:	2101      	movs	r1, #1
    21d4:	2000      	movs	r0, #0
    21d6:	f00f fd71 	bl	11cbc <ticker_stop>
					    TICKER_USER_ID_ULL_HIGH,
					    ticker_id_conn,
					    ticker_stop_conn_op_cb,
					    (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    21da:	f030 0302 	bics.w	r3, r0, #2
    21de:	d00c      	beq.n	21fa <event_conn_upd_prep+0x212>
    21e0:	4a47      	ldr	r2, [pc, #284]	; (2300 <event_conn_upd_prep+0x318>)
    21e2:	494e      	ldr	r1, [pc, #312]	; (231c <event_conn_upd_prep+0x334>)
    21e4:	4848      	ldr	r0, [pc, #288]	; (2308 <event_conn_upd_prep+0x320>)
    21e6:	f640 2325 	movw	r3, #2597	; 0xa25
    21ea:	f01f fc9b 	bl	21b24 <printk>
    21ee:	4040      	eors	r0, r0
    21f0:	f380 8811 	msr	BASEPRI, r0
    21f4:	f04f 0003 	mov.w	r0, #3
    21f8:	df02      	svc	2
		ticker_status =
			ticker_start(TICKER_INSTANCE_ID_CTLR,
				     TICKER_USER_ID_ULL_HIGH,
				     ticker_id_conn,
				     ticks_at_expire, ticks_win_offset,
				     HAL_TICKER_US_TO_TICKS(periodic_us),
    21fa:	4e40      	ldr	r6, [pc, #256]	; (22fc <event_conn_upd_prep+0x314>)
    21fc:	fbab 6b06 	umull	r6, fp, fp, r6
    2200:	a33b      	add	r3, pc, #236	; (adr r3, 22f0 <event_conn_upd_prep+0x308>)
    2202:	e9d3 2300 	ldrd	r2, r3, [r3]
    2206:	4630      	mov	r0, r6
    2208:	4659      	mov	r1, fp
    220a:	f7fe fec5 	bl	f98 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    220e:	9408      	str	r4, [sp, #32]
				     HAL_TICKER_REMAINDER(periodic_us),
    2210:	f020 457f 	bic.w	r5, r0, #4278190080	; 0xff000000
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2214:	9406      	str	r4, [sp, #24]
				     HAL_TICKER_REMAINDER(periodic_us),
    2216:	4842      	ldr	r0, [pc, #264]	; (2320 <event_conn_upd_prep+0x338>)
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2218:	68e3      	ldr	r3, [r4, #12]
    221a:	9304      	str	r3, [sp, #16]
				     HAL_TICKER_REMAINDER(periodic_us),
    221c:	fba5 0100 	umull	r0, r1, r5, r0
    2220:	2307      	movs	r3, #7
    2222:	fb03 1105 	mla	r1, r3, r5, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2226:	4b3f      	ldr	r3, [pc, #252]	; (2324 <event_conn_upd_prep+0x33c>)
    2228:	9307      	str	r3, [sp, #28]
    222a:	4b3f      	ldr	r3, [pc, #252]	; (2328 <event_conn_upd_prep+0x340>)
    222c:	9305      	str	r3, [sp, #20]
				     HAL_TICKER_REMAINDER(periodic_us),
    222e:	1a30      	subs	r0, r6, r0
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2230:	f64f 73fe 	movw	r3, #65534	; 0xfffe
				     HAL_TICKER_REMAINDER(periodic_us),
    2234:	eb6b 0101 	sbc.w	r1, fp, r1
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2238:	9303      	str	r3, [sp, #12]
				     HAL_TICKER_REMAINDER(periodic_us),
    223a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    223e:	2300      	movs	r3, #0
    2240:	f7fe feaa 	bl	f98 <__aeabi_uldivmod>
			ticker_start(TICKER_INSTANCE_ID_CTLR,
    2244:	4643      	mov	r3, r8
    2246:	e9cd 5001 	strd	r5, r0, [sp, #4]
    224a:	9700      	str	r7, [sp, #0]
    224c:	4652      	mov	r2, sl
    224e:	2101      	movs	r1, #1
    2250:	2000      	movs	r0, #0
    2252:	f00f fca9 	bl	11ba8 <ticker_start>
#else
				     ull_master_ticker_cb,
#endif
				     conn, ticker_start_conn_op_cb,
				     (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2256:	f030 0302 	bics.w	r3, r0, #2
    225a:	d00c      	beq.n	2276 <event_conn_upd_prep+0x28e>
    225c:	4a28      	ldr	r2, [pc, #160]	; (2300 <event_conn_upd_prep+0x318>)
    225e:	492f      	ldr	r1, [pc, #188]	; (231c <event_conn_upd_prep+0x334>)
    2260:	4829      	ldr	r0, [pc, #164]	; (2308 <event_conn_upd_prep+0x320>)
    2262:	f640 233f 	movw	r3, #2623	; 0xa3f
    2266:	f01f fc5d 	bl	21b24 <printk>
    226a:	4040      	eors	r0, r0
    226c:	f380 8811 	msr	BASEPRI, r0
    2270:	f04f 0003 	mov.w	r0, #3
    2274:	df02      	svc	2
			  (ticker_status == TICKER_STATUS_BUSY));

#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
		/* enable ticker job, if disabled in this function */
		if (mayfly_was_enabled) {
    2276:	f1b9 0f00 	cmp.w	r9, #0
    227a:	f040 8123 	bne.w	24c4 <event_conn_upd_prep+0x4dc>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
				      TICKER_USER_ID_ULL_LOW, 1);
		}
#endif

		return 0;
    227e:	4648      	mov	r0, r9
	}

	return -EINPROGRESS;
}
    2280:	b00b      	add	sp, #44	; 0x2c
    2282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
    2286:	f894 20dd 	ldrb.w	r2, [r4, #221]	; 0xdd
    228a:	2a00      	cmp	r2, #0
    228c:	f43f aed0 	beq.w	2030 <event_conn_upd_prep+0x48>
			conn->slave.llcp_type = LLCP_NONE;
    2290:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
    2294:	e6d0      	b.n	2038 <event_conn_upd_prep+0x50>
		if ((conn->llcp_cu.interval != lll->interval) ||
    2296:	8e21      	ldrh	r1, [r4, #48]	; 0x30
    2298:	4291      	cmp	r1, r2
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    229a:	f8b4 1118 	ldrh.w	r1, [r4, #280]	; 0x118
		if ((conn->llcp_cu.interval != lll->interval) ||
    229e:	f47f aef7 	bne.w	2090 <event_conn_upd_prep+0xa8>
		    (RADIO_CONN_EVENTS(conn->llcp_cu.timeout * 10000U,
    22a2:	f240 4ce2 	movw	ip, #1250	; 0x4e2
    22a6:	fb0c fe03 	mul.w	lr, ip, r3
    22aa:	f242 7c10 	movw	ip, #10000	; 0x2710
    22ae:	fb0c ec01 	mla	ip, ip, r1, lr
    22b2:	f10c 3cff 	add.w	ip, ip, #4294967295
    22b6:	fbbc fcfe 	udiv	ip, ip, lr
		    (conn->llcp_cu.latency != lll->latency) ||
    22ba:	f8b4 e0c6 	ldrh.w	lr, [r4, #198]	; 0xc6
    22be:	fa1f fc8c 	uxth.w	ip, ip
    22c2:	45e6      	cmp	lr, ip
    22c4:	f47f aee4 	bne.w	2090 <event_conn_upd_prep+0xa8>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
    22c8:	2301      	movs	r3, #1
    22ca:	712b      	strb	r3, [r5, #4]
    22cc:	e6eb      	b.n	20a6 <event_conn_upd_prep+0xbe>
		LL_ASSERT(rx && rx->hdr.link);
    22ce:	4a0c      	ldr	r2, [pc, #48]	; (2300 <event_conn_upd_prep+0x318>)
    22d0:	4916      	ldr	r1, [pc, #88]	; (232c <event_conn_upd_prep+0x344>)
    22d2:	480d      	ldr	r0, [pc, #52]	; (2308 <event_conn_upd_prep+0x320>)
    22d4:	f640 137a 	movw	r3, #2426	; 0x97a
    22d8:	f01f fc24 	bl	21b24 <printk>
    22dc:	4040      	eors	r0, r0
    22de:	f380 8811 	msr	BASEPRI, r0
    22e2:	f04f 0003 	mov.w	r0, #3
    22e6:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
    22e8:	6828      	ldr	r0, [r5, #0]
    22ea:	e6c4      	b.n	2076 <event_conn_upd_prep+0x8e>
    22ec:	f3af 8000 	nop.w
    22f0:	1afd498d 	.word	0x1afd498d
    22f4:	00000007 	.word	0x00000007
    22f8:	2000e400 	.word	0x2000e400
    22fc:	3b9aca00 	.word	0x3b9aca00
    2300:	000288c0 	.word	0x000288c0
    2304:	0002849c 	.word	0x0002849c
    2308:	00028404 	.word	0x00028404
    230c:	026259ff 	.word	0x026259ff
    2310:	01c9c37f 	.word	0x01c9c37f
    2314:	2000e22c 	.word	0x2000e22c
    2318:	00015349 	.word	0x00015349
    231c:	000289a0 	.word	0x000289a0
    2320:	1afd498d 	.word	0x1afd498d
    2324:	000152f1 	.word	0x000152f1
    2328:	000196e5 	.word	0x000196e5
    232c:	0002898c 	.word	0x0002898c
		rx = ll_pdu_rx_alloc_peek(1);
    2330:	2001      	movs	r0, #1
    2332:	f012 f80b 	bl	1434c <ll_pdu_rx_alloc_peek>
		if (!rx) {
    2336:	4607      	mov	r7, r0
    2338:	2800      	cmp	r0, #0
    233a:	f000 80de 	beq.w	24fa <event_conn_upd_prep+0x512>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
    233e:	4876      	ldr	r0, [pc, #472]	; (2518 <event_conn_upd_prep+0x530>)
    2340:	f00e f9ea 	bl	10718 <mem_acquire>
		if (!tx) {
    2344:	4605      	mov	r5, r0
    2346:	2800      	cmp	r0, #0
    2348:	f000 80d7 	beq.w	24fa <event_conn_upd_prep+0x512>
		(void)ll_pdu_rx_alloc();
    234c:	f012 f81c 	bl	14388 <ll_pdu_rx_alloc>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2350:	792b      	ldrb	r3, [r5, #4]
		rx->hdr.link->mem = conn->llcp_rx;
    2352:	683a      	ldr	r2, [r7, #0]
    2354:	f8d4 110c 	ldr.w	r1, [r4, #268]	; 0x10c
    2358:	6051      	str	r1, [r2, #4]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    235a:	f043 0303 	orr.w	r3, r3, #3
		conn->llcp_rx = rx;
    235e:	f8c4 710c 	str.w	r7, [r4, #268]	; 0x10c
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    2362:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
    2364:	712b      	strb	r3, [r5, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_update_ind) +
    2366:	230c      	movs	r3, #12
    2368:	716b      	strb	r3, [r5, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_UPDATE_IND;
    236a:	71e9      	strb	r1, [r5, #7]
	pdu_ctrl_tx->llctrl.conn_update_ind.win_size = conn->llcp_cu.win_size;
    236c:	f894 3120 	ldrb.w	r3, [r4, #288]	; 0x120
    2370:	722b      	strb	r3, [r5, #8]
		conn->llcp.conn_upd.instant = event_counter +
    2372:	8e23      	ldrh	r3, [r4, #48]	; 0x30
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2374:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
		conn->llcp.conn_upd.instant = event_counter +
    2378:	441e      	add	r6, r3
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    237a:	4b68      	ldr	r3, [pc, #416]	; (251c <event_conn_upd_prep+0x534>)
    237c:	fba3 3202 	umull	r3, r2, r3, r2
	pdu_ctrl_tx->llctrl.conn_update_ind.interval =
    2380:	f8b4 3114 	ldrh.w	r3, [r4, #276]	; 0x114
    2384:	f8a5 300b 	strh.w	r3, [r5, #11]
		sys_cpu_to_le16(conn->llcp_cu.win_offset_us /
    2388:	0a92      	lsrs	r2, r2, #10
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    238a:	f8b4 3116 	ldrh.w	r3, [r4, #278]	; 0x116
	pdu_ctrl_tx->llctrl.conn_update_ind.win_offset =
    238e:	f8a5 2009 	strh.w	r2, [r5, #9]
	pdu_ctrl_tx->llctrl.conn_update_ind.latency =
    2392:	f8a5 300d 	strh.w	r3, [r5, #13]
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    2396:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
	pdu_ctrl_tx->llctrl.conn_update_ind.timeout =
    239a:	f8b4 3118 	ldrh.w	r3, [r4, #280]	; 0x118
    239e:	f8a5 300f 	strh.w	r3, [r5, #15]
					      conn->lll.latency + 6;
    23a2:	3606      	adds	r6, #6
	    conn->tx_head &&
    23a4:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
					      conn->lll.latency + 6;
    23a8:	b2b6      	uxth	r6, r6
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    23aa:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp.conn_upd.instant = event_counter +
    23ae:	f8a4 60ec 	strh.w	r6, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
    23b2:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		pdu_ctrl_tx->llctrl.conn_update_ind.instant =
    23b6:	f8a5 6011 	strh.w	r6, [r5, #17]
	if (
    23ba:	2b00      	cmp	r3, #0
    23bc:	f000 8091 	beq.w	24e2 <event_conn_upd_prep+0x4fa>
	    !conn->llcp_enc.pause_tx &&
    23c0:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
    23c4:	0790      	lsls	r0, r2, #30
    23c6:	f100 808c 	bmi.w	24e2 <event_conn_upd_prep+0x4fa>
	    !conn->llcp_phy.pause_tx &&
    23ca:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
    23ce:	07d1      	lsls	r1, r2, #31
    23d0:	f100 8087 	bmi.w	24e2 <event_conn_upd_prep+0x4fa>
		if (conn->tx_head == conn->tx_data) {
    23d4:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
    23d8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
    23da:	bf04      	itt	eq
    23dc:	681a      	ldreq	r2, [r3, #0]
    23de:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
    23e2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    23e6:	2a00      	cmp	r2, #0
    23e8:	d17e      	bne.n	24e8 <event_conn_upd_prep+0x500>
			tx->next = conn->tx_head->next;
    23ea:	681a      	ldr	r2, [r3, #0]
    23ec:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
    23ee:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    23f0:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
    23f2:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
	if (!tx->next) {
    23f6:	b90b      	cbnz	r3, 23fc <event_conn_upd_prep+0x414>
		conn->tx_data_last = tx;
    23f8:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
	return -EINPROGRESS;
    23fc:	f06f 0043 	mvn.w	r0, #67	; 0x43
}
    2400:	b00b      	add	sp, #44	; 0x2c
    2402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2406:	fb05 0111 	mls	r1, r5, r1, r0
    240a:	f240 43e2 	movw	r3, #1250	; 0x4e2
    240e:	4844      	ldr	r0, [pc, #272]	; (2520 <event_conn_upd_prep+0x538>)
    2410:	b289      	uxth	r1, r1
    2412:	fb03 f101 	mul.w	r1, r3, r1
    2416:	fba1 0100 	umull	r0, r1, r1, r0
    241a:	a33d      	add	r3, pc, #244	; (adr r3, 2510 <event_conn_upd_prep+0x528>)
    241c:	e9d3 2300 	ldrd	r2, r3, [r3]
    2420:	f7fe fdba 	bl	f98 <__aeabi_uldivmod>
    2424:	eba8 0800 	sub.w	r8, r8, r0
    2428:	e670      	b.n	210c <event_conn_upd_prep+0x124>
		conn_upd_curr = conn;
    242a:	6028      	str	r0, [r5, #0]
    242c:	e5e7      	b.n	1ffe <event_conn_upd_prep+0x16>
				lll->slave.window_widening_periodic_us *
    242e:	6c62      	ldr	r2, [r4, #68]	; 0x44
			lll->slave.window_widening_prepare_us -=
    2430:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    2432:	fb02 331b 	mls	r3, r2, fp, r3
    2436:	64e3      	str	r3, [r4, #76]	; 0x4c
				(((lll_clock_ppm_local_get() +
    2438:	f018 ff56 	bl	1b2e8 <lll_clock_ppm_local_get>
    243c:	4605      	mov	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    243e:	f894 00dc 	ldrb.w	r0, [r4, #220]	; 0xdc
    2442:	f3c0 0082 	ubfx	r0, r0, #2, #3
    2446:	f018 ff51 	bl	1b2ec <lll_clock_ppm_get>
				(((lll_clock_ppm_local_get() +
    244a:	4405      	add	r5, r0
				   lll_clock_ppm_get(conn->slave.sca)) *
    244c:	fb06 f505 	mul.w	r5, r6, r5
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2450:	4b34      	ldr	r3, [pc, #208]	; (2524 <event_conn_upd_prep+0x53c>)
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2452:	f894 2120 	ldrb.w	r2, [r4, #288]	; 0x120
				  conn_interval_us) + (1000000 - 1)) / 1000000U;
    2456:	f505 2574 	add.w	r5, r5, #999424	; 0xf4000
    245a:	f205 253f 	addw	r5, r5, #575	; 0x23f
    245e:	fba3 3505 	umull	r3, r5, r3, r5
    2462:	0cad      	lsrs	r5, r5, #18
				conn->llcp_cu.win_size * CONN_INT_UNIT_US;
    2464:	fb07 f202 	mul.w	r2, r7, r2
			lll->slave.window_widening_prepare_us +=
    2468:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
			lll->slave.window_size_prepare_us =
    246a:	6562      	str	r2, [r4, #84]	; 0x54
				lll->slave.window_widening_periodic_us *
    246c:	fb05 f00a 	mul.w	r0, r5, sl
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2470:	0872      	lsrs	r2, r6, #1
			lll->slave.window_widening_prepare_us +=
    2472:	4403      	add	r3, r0
				(conn_interval_us >> 1) - EVENT_IFS_US;
    2474:	3a96      	subs	r2, #150	; 0x96
			lll->slave.window_widening_prepare_us +=
    2476:	4293      	cmp	r3, r2
    2478:	bf28      	it	cs
    247a:	4613      	movcs	r3, r2
			lll->slave.window_widening_periodic_us =
    247c:	6465      	str	r5, [r4, #68]	; 0x44
			periodic_us -= lll->slave.window_widening_periodic_us;
    247e:	eba6 0b05 	sub.w	fp, r6, r5
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    2482:	4d27      	ldr	r5, [pc, #156]	; (2520 <event_conn_upd_prep+0x538>)
			lll->slave.window_widening_prepare_us +=
    2484:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
			conn->slave.ticks_to_offset = 0U;
    2488:	2300      	movs	r3, #0
    248a:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    248e:	fba0 0105 	umull	r0, r1, r0, r5
    2492:	a31f      	add	r3, pc, #124	; (adr r3, 2510 <event_conn_upd_prep+0x528>)
    2494:	e9d3 2300 	ldrd	r2, r3, [r3]
    2498:	f7fe fd7e 	bl	f98 <__aeabi_uldivmod>
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    249c:	491f      	ldr	r1, [pc, #124]	; (251c <event_conn_upd_prep+0x534>)
			ticks_at_expire -= HAL_TICKER_US_TO_TICKS(
    249e:	eba8 0800 	sub.w	r8, r8, r0
			ticks_win_offset = HAL_TICKER_US_TO_TICKS(
    24a2:	f8d4 011c 	ldr.w	r0, [r4, #284]	; 0x11c
    24a6:	fba1 3000 	umull	r3, r0, r1, r0
    24aa:	0a80      	lsrs	r0, r0, #10
    24ac:	fb07 f000 	mul.w	r0, r7, r0
    24b0:	a317      	add	r3, pc, #92	; (adr r3, 2510 <event_conn_upd_prep+0x528>)
    24b2:	e9d3 2300 	ldrd	r2, r3, [r3]
    24b6:	fba0 0105 	umull	r0, r1, r0, r5
    24ba:	f7fe fd6d 	bl	f98 <__aeabi_uldivmod>
    24be:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
			periodic_us -= lll->slave.window_widening_periodic_us;
    24c2:	e642      	b.n	214a <event_conn_upd_prep+0x162>
			mayfly_enable(TICKER_USER_ID_ULL_HIGH,
    24c4:	2201      	movs	r2, #1
    24c6:	4610      	mov	r0, r2
    24c8:	2102      	movs	r1, #2
    24ca:	f00e f9cb 	bl	10864 <mayfly_enable>
		return 0;
    24ce:	2000      	movs	r0, #0
}
    24d0:	b00b      	add	sp, #44	; 0x2c
    24d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			conn->procedure_expire = 0U;
    24d6:	2300      	movs	r3, #0
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
    24d8:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
			conn->procedure_expire = 0U;
    24dc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
    24e0:	e5bb      	b.n	205a <event_conn_upd_prep+0x72>
		if (!conn->tx_ctrl) {
    24e2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
    24e6:	b16a      	cbz	r2, 2504 <event_conn_upd_prep+0x51c>
	tx->next = conn->tx_ctrl_last->next;
    24e8:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
    24ec:	681a      	ldr	r2, [r3, #0]
    24ee:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
    24f0:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
    24f2:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
    24f4:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
    24f8:	e77d      	b.n	23f6 <event_conn_upd_prep+0x40e>
			return -ENOBUFS;
    24fa:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    24fe:	b00b      	add	sp, #44	; 0x2c
    2500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			tx->next = conn->tx_head;
    2504:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
    2506:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
    250a:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    250e:	e772      	b.n	23f6 <event_conn_upd_prep+0x40e>
    2510:	1afd498d 	.word	0x1afd498d
    2514:	00000007 	.word	0x00000007
    2518:	2000e484 	.word	0x2000e484
    251c:	d1b71759 	.word	0xd1b71759
    2520:	3b9aca00 	.word	0x3b9aca00
    2524:	431bde83 	.word	0x431bde83

00002528 <ull_slave_setup>:
static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params);

void ull_slave_setup(memq_link_t *link, struct node_rx_hdr *rx,
		     struct node_rx_ftr *ftr, struct lll_conn *lll)
{
    2528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    252c:	b093      	sub	sp, #76	; 0x4c
    252e:	4692      	mov	sl, r2
    2530:	900a      	str	r0, [sp, #40]	; 0x28
	uint16_t win_delay_us;
	uint16_t timeout;
	uint16_t interval;
	uint8_t chan_sel;

	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    2532:	6812      	ldr	r2, [r2, #0]
	conn = lll->hdr.parent;
    2534:	4618      	mov	r0, r3
{
    2536:	461d      	mov	r5, r3
    2538:	460c      	mov	r4, r1
	adv = ((struct lll_adv *)ftr->param)->hdr.parent;
    253a:	6817      	ldr	r7, [r2, #0]
	conn = lll->hdr.parent;
    253c:	f850 8b0c 	ldr.w	r8, [r0], #12

	/* Populate the slave context */
	pdu_adv = (void *)((struct node_rx_pdu *)rx)->pdu;
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2540:	2203      	movs	r2, #3
    2542:	312e      	adds	r1, #46	; 0x2e
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2544:	f105 0908 	add.w	r9, r5, #8
	memcpy(&lll->crc_init[0], &pdu_adv->connect_ind.crc_init[0], 3);
    2548:	f021 ff8e 	bl	24468 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    254c:	f105 061c 	add.w	r6, r5, #28
	memcpy(&lll->access_addr[0], &pdu_adv->connect_ind.access_addr[0], 4);
    2550:	2204      	movs	r2, #4
    2552:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    2556:	4648      	mov	r0, r9
    2558:	f021 ff86 	bl	24468 <memcpy>
	memcpy(&lll->data_chan_map[0], &pdu_adv->connect_ind.chan_map[0],
    255c:	2205      	movs	r2, #5
    255e:	f104 013a 	add.w	r1, r4, #58	; 0x3a
    2562:	4630      	mov	r0, r6
    2564:	f021 ff80 	bl	24468 <memcpy>
	       sizeof(lll->data_chan_map));
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    2568:	4630      	mov	r0, r6
    256a:	2105      	movs	r1, #5
    256c:	f00e faa4 	bl	10ab8 <util_ones_count_get>
    2570:	f895 2021 	ldrb.w	r2, [r5, #33]	; 0x21
    2574:	f000 003f 	and.w	r0, r0, #63	; 0x3f
    2578:	f360 0205 	bfi	r2, r0, #0, #6
			       sizeof(lll->data_chan_map));
	if (lll->data_chan_count < 2) {
    257c:	2801      	cmp	r0, #1
	lll->data_chan_count = util_ones_count_get(&lll->data_chan_map[0],
    257e:	f885 2021 	strb.w	r2, [r5, #33]	; 0x21
	if (lll->data_chan_count < 2) {
    2582:	d90a      	bls.n	259a <ull_slave_setup+0x72>
		return;
	}
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2584:	f894 103f 	ldrb.w	r1, [r4, #63]	; 0x3f
    2588:	f001 021f 	and.w	r2, r1, #31
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    258c:	3a05      	subs	r2, #5
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    258e:	f3c1 0004 	ubfx	r0, r1, #0, #5
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2592:	2a0b      	cmp	r2, #11
	lll->data_chan_hop = pdu_adv->connect_ind.hop;
    2594:	f885 0022 	strb.w	r0, [r5, #34]	; 0x22
	if ((lll->data_chan_hop < 5) || (lll->data_chan_hop > 16)) {
    2598:	d902      	bls.n	25a0 <ull_slave_setup+0x78>
	/* enable ticker job, irrespective of disabled in this function so
	 * first connection event can be scheduled as soon as possible.
	 */
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
#endif
}
    259a:	b013      	add	sp, #76	; 0x4c
    259c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	((struct lll_adv *)ftr->param)->conn = NULL;
    25a0:	f8da 2000 	ldr.w	r2, [sl]
    25a4:	2000      	movs	r0, #0
    25a6:	6090      	str	r0, [r2, #8]
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    25a8:	8ea6      	ldrh	r6, [r4, #52]	; 0x34
	lll->interval = interval;
    25aa:	826e      	strh	r6, [r5, #18]
	lll->latency = sys_le16_to_cpu(pdu_adv->connect_ind.latency);
    25ac:	f894 2036 	ldrb.w	r2, [r4, #54]	; 0x36
    25b0:	f894 0037 	ldrb.w	r0, [r4, #55]	; 0x37
    25b4:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    25b8:	82aa      	strh	r2, [r5, #20]
	conn->slave.sca = pdu_adv->connect_ind.sca;
    25ba:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	win_offset = sys_le16_to_cpu(pdu_adv->connect_ind.win_offset);
    25be:	8e63      	ldrh	r3, [r4, #50]	; 0x32
    25c0:	930c      	str	r3, [sp, #48]	; 0x30
	conn->slave.sca = pdu_adv->connect_ind.sca;
    25c2:	0949      	lsrs	r1, r1, #5
    25c4:	f361 0284 	bfi	r2, r1, #2, #3
    25c8:	f888 20dc 	strb.w	r2, [r8, #220]	; 0xdc
		(((lll_clock_ppm_local_get() +
    25cc:	f018 fe8c 	bl	1b2e8 <lll_clock_ppm_local_get>
    25d0:	900b      	str	r0, [sp, #44]	; 0x2c
		   lll_clock_ppm_get(conn->slave.sca)) *
    25d2:	f898 00dc 	ldrb.w	r0, [r8, #220]	; 0xdc
    25d6:	f3c0 0082 	ubfx	r0, r0, #2, #3
    25da:	f018 fe87 	bl	1b2ec <lll_clock_ppm_get>
		(((lll_clock_ppm_local_get() +
    25de:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    25e0:	4ac3      	ldr	r2, [pc, #780]	; (28f0 <ull_slave_setup+0x3c8>)
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    25e2:	49c4      	ldr	r1, [pc, #784]	; (28f4 <ull_slave_setup+0x3cc>)
	conn_interval_us = interval * CONN_INT_UNIT_US;
    25e4:	f240 4be2 	movw	fp, #1250	; 0x4e2
	interval = sys_le16_to_cpu(pdu_adv->connect_ind.interval);
    25e8:	b2b6      	uxth	r6, r6
	conn_interval_us = interval * CONN_INT_UNIT_US;
    25ea:	fb0b f606 	mul.w	r6, fp, r6
		(((lll_clock_ppm_local_get() +
    25ee:	4418      	add	r0, r3
		   lll_clock_ppm_get(conn->slave.sca)) *
    25f0:	fb06 f000 	mul.w	r0, r6, r0
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    25f4:	f500 2074 	add.w	r0, r0, #999424	; 0xf4000
    25f8:	f200 203f 	addw	r0, r0, #575	; 0x23f
    25fc:	fba2 3000 	umull	r3, r0, r2, r0
	lll->slave.window_size_event_us = pdu_adv->connect_ind.win_size *
    2600:	f894 2031 	ldrb.w	r2, [r4, #49]	; 0x31
    2604:	fb0b f202 	mul.w	r2, fp, r2
    2608:	63ea      	str	r2, [r5, #60]	; 0x3c
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    260a:	0872      	lsrs	r2, r6, #1
		  conn_interval_us) + (1000000 - 1)) / 1000000U;
    260c:	0c80      	lsrs	r0, r0, #18
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    260e:	3a96      	subs	r2, #150	; 0x96
	lll->slave.window_widening_periodic_us =
    2610:	62a8      	str	r0, [r5, #40]	; 0x28
	lll->slave.window_widening_max_us = (conn_interval_us >> 1) -
    2612:	62ea      	str	r2, [r5, #44]	; 0x2c
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    2614:	8f23      	ldrh	r3, [r4, #56]	; 0x38
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2616:	8aa8      	ldrh	r0, [r5, #20]
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2618:	4ab7      	ldr	r2, [pc, #732]	; (28f8 <ull_slave_setup+0x3d0>)
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    261a:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    261e:	f242 7c10 	movw	ip, #10000	; 0x2710
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
    2622:	4431      	add	r1, r6
    2624:	fbb1 f1f6 	udiv	r1, r1, r6
    2628:	f8a8 10ca 	strh.w	r1, [r8, #202]	; 0xca
	timeout = sys_le16_to_cpu(pdu_adv->connect_ind.timeout);
    262c:	b299      	uxth	r1, r3
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    262e:	fb0c 6101 	mla	r1, ip, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2632:	4432      	add	r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2634:	3901      	subs	r1, #1
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2636:	f100 0c06 	add.w	ip, r0, #6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    263a:	fbb1 f1f6 	udiv	r1, r1, r6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    263e:	fbb2 f2f6 	udiv	r2, r2, r6
		RADIO_CONN_EVENTS((timeout * 10U * 1000U), conn_interval_us);
    2642:	f8a8 10c6 	strh.w	r1, [r8, #198]	; 0xc6
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    2646:	b291      	uxth	r1, r2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2648:	4561      	cmp	r1, ip
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
    264a:	f8a8 10d2 	strh.w	r1, [r8, #210]	; 0xd2
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    264e:	dd02      	ble.n	2656 <ull_slave_setup+0x12e>
			     (conn->apto_reload - (lll->latency + 6)) :
    2650:	1a09      	subs	r1, r1, r0
    2652:	3906      	subs	r1, #6
	conn->appto_reload = (conn->apto_reload > (lll->latency + 6)) ?
    2654:	b289      	uxth	r1, r1
    2656:	f8a8 10ce 	strh.w	r1, [r8, #206]	; 0xce
	memcpy((void *)&conn->slave.force, &lll->access_addr[0],
    265a:	2204      	movs	r2, #4
    265c:	4649      	mov	r1, r9
    265e:	f108 00e0 	add.w	r0, r8, #224	; 0xe0
    2662:	f021 ff01 	bl	24468 <memcpy>
	peer_addr_type = pdu_adv->tx_addr;
    2666:	7f22      	ldrb	r2, [r4, #28]
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2668:	f104 091e 	add.w	r9, r4, #30
	peer_addr_type = pdu_adv->tx_addr;
    266c:	f3c2 1380 	ubfx	r3, r2, #6, #1
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2670:	4649      	mov	r1, r9
    2672:	2206      	movs	r2, #6
    2674:	a810      	add	r0, sp, #64	; 0x40
	peer_addr_type = pdu_adv->tx_addr;
    2676:	930f      	str	r3, [sp, #60]	; 0x3c
	memcpy(peer_addr, pdu_adv->connect_ind.init_addr, BDADDR_SIZE);
    2678:	f021 fef6 	bl	24468 <memcpy>
		chan_sel = pdu_adv->chan_sel;
    267c:	7f22      	ldrb	r2, [r4, #28]
	cc->status = 0U;
    267e:	f44f 7180 	mov.w	r1, #256	; 0x100
    2682:	83a1      	strh	r1, [r4, #28]
		chan_sel = pdu_adv->chan_sel;
    2684:	f3c2 1340 	ubfx	r3, r2, #5, #1
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2688:	f897 002a 	ldrb.w	r0, [r7, #42]	; 0x2a
	uint8_t rl_idx = ftr->rl_idx;
    268c:	f89a b012 	ldrb.w	fp, [sl, #18]
		chan_sel = pdu_adv->chan_sel;
    2690:	930e      	str	r3, [sp, #56]	; 0x38
    2692:	930b      	str	r3, [sp, #44]	; 0x2c
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    2694:	f018 f8b4 	bl	1a800 <ull_filter_lll_lrpa_used>
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2698:	2206      	movs	r2, #6
	if (ull_filter_lll_lrpa_used(adv->lll.rl_idx)) {
    269a:	4601      	mov	r1, r0
    269c:	2800      	cmp	r0, #0
    269e:	f040 80ea 	bne.w	2876 <ull_slave_setup+0x34e>
		memset(&cc->local_rpa[0], 0x0, BDADDR_SIZE);
    26a2:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    26a6:	f021 ff0a 	bl	244be <memset>
	if (rl_idx != FILTER_IDX_NONE) {
    26aa:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    26ae:	f000 80ec 	beq.w	288a <ull_slave_setup+0x362>
		ll_rl_id_addr_get(rl_idx, &cc->peer_addr_type,
    26b2:	4649      	mov	r1, r9
    26b4:	4658      	mov	r0, fp
    26b6:	f104 021f 	add.w	r2, r4, #31
    26ba:	f017 fb2f 	bl	19d1c <ll_rl_id_addr_get>
		cc->peer_addr_type += 2;
    26be:	7fa2      	ldrb	r2, [r4, #30]
    26c0:	3202      	adds	r2, #2
    26c2:	77a2      	strb	r2, [r4, #30]
		memcpy(&cc->peer_rpa[0], &peer_addr[0], BDADDR_SIZE);
    26c4:	a910      	add	r1, sp, #64	; 0x40
    26c6:	2206      	movs	r2, #6
    26c8:	f104 0025 	add.w	r0, r4, #37	; 0x25
    26cc:	f021 fecc 	bl	24468 <memcpy>
	cc->sca = conn->slave.sca;
    26d0:	f898 20dc 	ldrb.w	r2, [r8, #220]	; 0xdc
	cc->interval = lll->interval;
    26d4:	8a69      	ldrh	r1, [r5, #18]
	cc->timeout = timeout;
    26d6:	f8bd 3036 	ldrh.w	r3, [sp, #54]	; 0x36
	cc->interval = lll->interval;
    26da:	8661      	strh	r1, [r4, #50]	; 0x32
	cc->sca = conn->slave.sca;
    26dc:	f3c2 0282 	ubfx	r2, r2, #2, #3
	cc->latency = lll->latency;
    26e0:	8aa9      	ldrh	r1, [r5, #20]
    26e2:	86a1      	strh	r1, [r4, #52]	; 0x34
	cc->timeout = timeout;
    26e4:	86e3      	strh	r3, [r4, #54]	; 0x36
	cc->sca = conn->slave.sca;
    26e6:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	lll->handle = ll_conn_handle_get(conn);
    26ea:	4640      	mov	r0, r8
    26ec:	f013 fa06 	bl	15afc <ll_conn_handle_get>
		ll_rx_put(link, rx);
    26f0:	4621      	mov	r1, r4
	lll->handle = ll_conn_handle_get(conn);
    26f2:	8228      	strh	r0, [r5, #16]
	rx->handle = lll->handle;
    26f4:	80e0      	strh	r0, [r4, #6]
		rx_csa = (void *)ftr->extra;
    26f6:	f8da 4004 	ldr.w	r4, [sl, #4]
		ll_rx_put(link, rx);
    26fa:	980a      	ldr	r0, [sp, #40]	; 0x28
    26fc:	f011 fe16 	bl	1432c <ll_rx_put>
		rx->handle = lll->handle;
    2700:	8a2b      	ldrh	r3, [r5, #16]
    2702:	80e3      	strh	r3, [r4, #6]
		rx->type = NODE_RX_TYPE_CHAN_SEL_ALGO;
    2704:	2318      	movs	r3, #24
    2706:	7123      	strb	r3, [r4, #4]
		if (chan_sel) {
    2708:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
		link = rx->link;
    270a:	6820      	ldr	r0, [r4, #0]
		if (chan_sel) {
    270c:	2b00      	cmp	r3, #0
    270e:	f000 80cc 	beq.w	28aa <ull_slave_setup+0x382>
			lll->data_chan_sel = 1;
    2712:	f895 3021 	ldrb.w	r3, [r5, #33]	; 0x21
    2716:	892a      	ldrh	r2, [r5, #8]
    2718:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    271c:	f885 3021 	strb.w	r3, [r5, #33]	; 0x21
    2720:	896b      	ldrh	r3, [r5, #10]
			lll->data_chan_id = aa_ms ^ aa_ls;
    2722:	4053      	eors	r3, r2
    2724:	846b      	strh	r3, [r5, #34]	; 0x22
			cs->csa = 0x01;
    2726:	2301      	movs	r3, #1
    2728:	7723      	strb	r3, [r4, #28]
	ll_rx_put(link, rx);
    272a:	4621      	mov	r1, r4
    272c:	f011 fdfe 	bl	1432c <ll_rx_put>
	ll_rx_sched();
    2730:	f011 fe06 	bl	14340 <ll_rx_sched>
	ready_delay_us = lll_radio_rx_ready_delay_get(lll->phy_rx, 1);
    2734:	f895 0049 	ldrb.w	r0, [r5, #73]	; 0x49
    2738:	2101      	movs	r1, #1
    273a:	f000 0007 	and.w	r0, r0, #7
    273e:	f018 fcd9 	bl	1b0f4 <lll_radio_rx_ready_delay_get>
    2742:	4683      	mov	fp, r0
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2744:	486d      	ldr	r0, [pc, #436]	; (28fc <ull_slave_setup+0x3d4>)
	conn->evt.ticks_active_to_start = 0U;
    2746:	f04f 0900 	mov.w	r9, #0
	conn->evt.ticks_xtal_to_start =
    274a:	2331      	movs	r3, #49	; 0x31
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    274c:	f20b 4152 	addw	r1, fp, #1106	; 0x452
	conn->evt.ticks_xtal_to_start =
    2750:	f8c8 3000 	str.w	r3, [r8]
	conn->evt.ticks_preempt_to_start =
    2754:	e9c8 9901 	strd	r9, r9, [r8, #4]
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2758:	a363      	add	r3, pc, #396	; (adr r3, 28e8 <ull_slave_setup+0x3c0>)
    275a:	e9d3 2300 	ldrd	r2, r3, [r3]
    275e:	fba1 0100 	umull	r0, r1, r1, r0
    2762:	f7fe fc19 	bl	f98 <__aeabi_uldivmod>
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    2766:	6aab      	ldr	r3, [r5, #40]	; 0x28
	conn_offset_us = ftr->radio_end_us;
    2768:	f8da 400c 	ldr.w	r4, [sl, #12]
	conn_interval_us -= lll->slave.window_widening_periodic_us;
    276c:	1af6      	subs	r6, r6, r3
	conn_offset_us += win_offset * CONN_INT_UNIT_US;
    276e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2770:	f240 41e2 	movw	r1, #1250	; 0x4e2
    2774:	fb01 4403 	mla	r4, r1, r3, r4
		HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US +
    2778:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	conn_offset_us -= EVENT_JITTER_US;
    277c:	f204 3486 	addw	r4, r4, #902	; 0x386
	conn_offset_us -= ready_delay_us;
    2780:	eba4 030b 	sub.w	r3, r4, fp
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2784:	464a      	mov	r2, r9
    2786:	2102      	movs	r1, #2
	conn->evt.ticks_slot =
    2788:	f8c8 000c 	str.w	r0, [r8, #12]
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    278c:	2001      	movs	r0, #1
	conn_offset_us -= ready_delay_us;
    278e:	930a      	str	r3, [sp, #40]	; 0x28
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 0);
    2790:	f00e f868 	bl	10864 <mayfly_enable>
	ticker_id_adv = TICKER_ID_ADV_BASE + ull_adv_handle_get(adv);
    2794:	4638      	mov	r0, r7
    2796:	f012 fbd1 	bl	14f3c <ull_adv_handle_get>
    279a:	1c82      	adds	r2, r0, #2
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
    279c:	4b58      	ldr	r3, [pc, #352]	; (2900 <ull_slave_setup+0x3d8>)
    279e:	9700      	str	r7, [sp, #0]
    27a0:	b2d2      	uxtb	r2, r2
    27a2:	4648      	mov	r0, r9
    27a4:	2101      	movs	r1, #1
    27a6:	f00f fa89 	bl	11cbc <ticker_stop>
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void ticker_op_stop_adv_cb(uint32_t status, void *param)
{
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    27aa:	2801      	cmp	r0, #1
    27ac:	f000 8089 	beq.w	28c2 <ull_slave_setup+0x39a>
	if (adv->lll.is_hdcd) {
    27b0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
    27b4:	07db      	lsls	r3, r3, #31
    27b6:	d47c      	bmi.n	28b2 <ull_slave_setup+0x38a>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    27b8:	4640      	mov	r0, r8
    27ba:	f013 f99f 	bl	15afc <ll_conn_handle_get>
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    27be:	f8df 913c 	ldr.w	r9, [pc, #316]	; 28fc <ull_slave_setup+0x3d4>
    27c2:	fba6 4609 	umull	r4, r6, r6, r9
    27c6:	a348      	add	r3, pc, #288	; (adr r3, 28e8 <ull_slave_setup+0x3c0>)
    27c8:	e9d3 2300 	ldrd	r2, r3, [r3]
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    27cc:	4605      	mov	r5, r0
				     HAL_TICKER_US_TO_TICKS(conn_interval_us),
    27ce:	4631      	mov	r1, r6
    27d0:	4620      	mov	r0, r4
    27d2:	f7fe fbe1 	bl	f98 <__aeabi_uldivmod>
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    27d6:	f8da 3008 	ldr.w	r3, [sl, #8]
    27da:	f8cd 8018 	str.w	r8, [sp, #24]
    27de:	f1a3 0a31 	sub.w	sl, r3, #49	; 0x31
    27e2:	4b48      	ldr	r3, [pc, #288]	; (2904 <ull_slave_setup+0x3dc>)
    27e4:	9307      	str	r3, [sp, #28]
    27e6:	4b48      	ldr	r3, [pc, #288]	; (2908 <ull_slave_setup+0x3e0>)
    27e8:	9305      	str	r3, [sp, #20]
    27ea:	f44f 73b6 	mov.w	r3, #364	; 0x16c
    27ee:	9308      	str	r3, [sp, #32]
    27f0:	f8d8 300c 	ldr.w	r3, [r8, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    27f4:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
    27f8:	4844      	ldr	r0, [pc, #272]	; (290c <ull_slave_setup+0x3e4>)
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    27fa:	f04f 0b00 	mov.w	fp, #0
    27fe:	e9cd b303 	strd	fp, r3, [sp, #12]
				     HAL_TICKER_REMAINDER(conn_interval_us),
    2802:	fba7 0100 	umull	r0, r1, r7, r0
    2806:	2307      	movs	r3, #7
    2808:	1a20      	subs	r0, r4, r0
    280a:	fb03 1107 	mla	r1, r3, r7, r1
    280e:	eb66 0101 	sbc.w	r1, r6, r1
    2812:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    2816:	2300      	movs	r3, #0
    2818:	f7fe fbbe 	bl	f98 <__aeabi_uldivmod>
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    281c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    281e:	e9cd 7001 	strd	r7, r0, [sp, #4]
				     HAL_TICKER_US_TO_TICKS(conn_offset_us),
    2822:	fba3 0109 	umull	r0, r1, r3, r9
    2826:	a330      	add	r3, pc, #192	; (adr r3, 28e8 <ull_slave_setup+0x3c0>)
    2828:	e9d3 2300 	ldrd	r2, r3, [r3]
    282c:	f7fe fbb4 	bl	f98 <__aeabi_uldivmod>
	ticker_id_conn = TICKER_ID_CONN_BASE + ll_conn_handle_get(conn);
    2830:	3503      	adds	r5, #3
	ticker_status = ticker_start(TICKER_INSTANCE_ID_CTLR,
    2832:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2836:	b2ed      	uxtb	r5, r5
    2838:	9000      	str	r0, [sp, #0]
    283a:	4653      	mov	r3, sl
    283c:	462a      	mov	r2, r5
    283e:	2101      	movs	r1, #1
    2840:	4658      	mov	r0, fp
    2842:	f00f f9b1 	bl	11ba8 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    2846:	f030 0302 	bics.w	r3, r0, #2
    284a:	d00c      	beq.n	2866 <ull_slave_setup+0x33e>
    284c:	4a30      	ldr	r2, [pc, #192]	; (2910 <ull_slave_setup+0x3e8>)
    284e:	4931      	ldr	r1, [pc, #196]	; (2914 <ull_slave_setup+0x3ec>)
    2850:	4831      	ldr	r0, [pc, #196]	; (2918 <ull_slave_setup+0x3f0>)
    2852:	f240 136d 	movw	r3, #365	; 0x16d
    2856:	f01f f965 	bl	21b24 <printk>
    285a:	4040      	eors	r0, r0
    285c:	f380 8811 	msr	BASEPRI, r0
    2860:	f04f 0003 	mov.w	r0, #3
    2864:	df02      	svc	2
	mayfly_enable(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_ULL_LOW, 1);
    2866:	2201      	movs	r2, #1
    2868:	2102      	movs	r1, #2
    286a:	4610      	mov	r0, r2
    286c:	f00d fffa 	bl	10864 <mayfly_enable>
}
    2870:	b013      	add	sp, #76	; 0x4c
    2872:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		memcpy(&cc->local_rpa[0], &pdu_adv->connect_ind.adv_addr[0],
    2876:	f104 0124 	add.w	r1, r4, #36	; 0x24
    287a:	f104 002b 	add.w	r0, r4, #43	; 0x2b
    287e:	f021 fdf3 	bl	24468 <memcpy>
	if (rl_idx != FILTER_IDX_NONE) {
    2882:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
    2886:	f47f af14 	bne.w	26b2 <ull_slave_setup+0x18a>
		memset(&cc->peer_rpa[0], 0x0, BDADDR_SIZE);
    288a:	2206      	movs	r2, #6
    288c:	2100      	movs	r1, #0
    288e:	f104 0025 	add.w	r0, r4, #37	; 0x25
    2892:	f021 fe14 	bl	244be <memset>
		cc->peer_addr_type = peer_addr_type;
    2896:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
    289a:	77a3      	strb	r3, [r4, #30]
		memcpy(cc->peer_addr, peer_addr, BDADDR_SIZE);
    289c:	a910      	add	r1, sp, #64	; 0x40
    289e:	2206      	movs	r2, #6
    28a0:	f104 001f 	add.w	r0, r4, #31
    28a4:	f021 fde0 	bl	24468 <memcpy>
    28a8:	e712      	b.n	26d0 <ull_slave_setup+0x1a8>
			cs->csa = 0x00;
    28aa:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    28ae:	7723      	strb	r3, [r4, #28]
    28b0:	e73b      	b.n	272a <ull_slave_setup+0x202>
		ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
    28b2:	2300      	movs	r3, #0
    28b4:	2201      	movs	r2, #1
    28b6:	9300      	str	r3, [sp, #0]
    28b8:	4618      	mov	r0, r3
    28ba:	4611      	mov	r1, r2
    28bc:	f00f f9fe 	bl	11cbc <ticker_stop>
    28c0:	e77a      	b.n	27b8 <ull_slave_setup+0x290>
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
    28c2:	f011 fe0f 	bl	144e4 <ull_disable_mark_get>
    28c6:	4287      	cmp	r7, r0
    28c8:	f43f af72 	beq.w	27b0 <ull_slave_setup+0x288>
    28cc:	4a10      	ldr	r2, [pc, #64]	; (2910 <ull_slave_setup+0x3e8>)
    28ce:	4913      	ldr	r1, [pc, #76]	; (291c <ull_slave_setup+0x3f4>)
    28d0:	4811      	ldr	r0, [pc, #68]	; (2918 <ull_slave_setup+0x3f0>)
    28d2:	f240 13fd 	movw	r3, #509	; 0x1fd
    28d6:	f01f f925 	bl	21b24 <printk>
    28da:	4040      	eors	r0, r0
    28dc:	f380 8811 	msr	BASEPRI, r0
    28e0:	f04f 0003 	mov.w	r0, #3
    28e4:	df02      	svc	2
		  param == ull_disable_mark_get());
}
    28e6:	e763      	b.n	27b0 <ull_slave_setup+0x288>
    28e8:	1afd498d 	.word	0x1afd498d
    28ec:	00000007 	.word	0x00000007
    28f0:	431bde83 	.word	0x431bde83
    28f4:	026259ff 	.word	0x026259ff
    28f8:	01c9c37f 	.word	0x01c9c37f
    28fc:	3b9aca00 	.word	0x3b9aca00
    2900:	000196a9 	.word	0x000196a9
    2904:	00019679 	.word	0x00019679
    2908:	000196e5 	.word	0x000196e5
    290c:	1afd498d 	.word	0x1afd498d
    2910:	00028ae8 	.word	0x00028ae8
    2914:	000289a0 	.word	0x000289a0
    2918:	00028404 	.word	0x00028404
    291c:	00028b40 	.word	0x00028b40

00002920 <nrf_flash_sync_exe>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
	_ticker_sync_context.slot = duration;
}

int nrf_flash_sync_exe(struct flash_op_desc *op_desc)
{
    2920:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2924:	b08f      	sub	sp, #60	; 0x3c
			      /* (MAYFLY_CALL_ID_PROGRAM) */
			   ticker_id, /* flash ticker id */
			   ticker_ticks_now_get(), /* current tick */
			   0, /* first int. immediately */
			   /* period */
			   HAL_TICKER_US_TO_TICKS(
    2926:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 2a00 <nrf_flash_sync_exe+0xe0>
{
    292a:	900a      	str	r0, [sp, #40]	; 0x28
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
    292c:	f10d 0137 	add.w	r1, sp, #55	; 0x37
    2930:	f10d 0036 	add.w	r0, sp, #54	; 0x36
    2934:	f011 fd72 	bl	1441c <ll_timeslice_ticker_id_get>
			   HAL_TICKER_US_TO_TICKS(
    2938:	4f32      	ldr	r7, [pc, #200]	; (2a04 <nrf_flash_sync_exe+0xe4>)
	err = ticker_start(instance_index,
    293a:	f89d a036 	ldrb.w	sl, [sp, #54]	; 0x36
    293e:	f89d b037 	ldrb.w	fp, [sp, #55]	; 0x37
    2942:	f00f f9fd 	bl	11d40 <ticker_ticks_now_get>
			   HAL_TICKER_US_TO_TICKS(
    2946:	f8d8 4000 	ldr.w	r4, [r8]
    294a:	fba4 5407 	umull	r5, r4, r4, r7
    294e:	a32a      	add	r3, pc, #168	; (adr r3, 29f8 <nrf_flash_sync_exe+0xd8>)
    2950:	e9d3 2300 	ldrd	r2, r3, [r3]
	err = ticker_start(instance_index,
    2954:	4681      	mov	r9, r0
			   HAL_TICKER_US_TO_TICKS(
    2956:	4621      	mov	r1, r4
    2958:	4628      	mov	r0, r5
    295a:	f7fe fb1d 	bl	f98 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    295e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
			   HAL_TICKER_US_TO_TICKS(
    2960:	900b      	str	r0, [sp, #44]	; 0x2c
				_ticker_sync_context.interval),
			   /* period remainder */
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
			   0, /* lazy, voluntary skips */
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    2962:	f8d8 0004 	ldr.w	r0, [r8, #4]
	err = ticker_start(instance_index,
    2966:	9306      	str	r3, [sp, #24]
    2968:	4b27      	ldr	r3, [pc, #156]	; (2a08 <nrf_flash_sync_exe+0xe8>)
    296a:	9305      	str	r3, [sp, #20]
    296c:	2600      	movs	r6, #0
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    296e:	a322      	add	r3, pc, #136	; (adr r3, 29f8 <nrf_flash_sync_exe+0xd8>)
    2970:	e9d3 2300 	ldrd	r2, r3, [r3]
    2974:	fba0 0107 	umull	r0, r1, r0, r7
	err = ticker_start(instance_index,
    2978:	e9cd 6607 	strd	r6, r6, [sp, #28]
			   HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot),
    297c:	f7fe fb0c 	bl	f98 <__aeabi_uldivmod>
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    2980:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	err = ticker_start(instance_index,
    2982:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2986:	e9cd 6003 	strd	r6, r0, [sp, #12]
			   HAL_TICKER_REMAINDER(_ticker_sync_context.interval),
    298a:	4820      	ldr	r0, [pc, #128]	; (2a0c <nrf_flash_sync_exe+0xec>)
    298c:	f023 477f 	bic.w	r7, r3, #4278190080	; 0xff000000
    2990:	fba7 0100 	umull	r0, r1, r7, r0
    2994:	2307      	movs	r3, #7
    2996:	1a28      	subs	r0, r5, r0
    2998:	fb03 1107 	mla	r1, r3, r7, r1
    299c:	eb64 0101 	sbc.w	r1, r4, r1
    29a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
    29a4:	2300      	movs	r3, #0
    29a6:	f7fe faf7 	bl	f98 <__aeabi_uldivmod>
	err = ticker_start(instance_index,
    29aa:	9600      	str	r6, [sp, #0]
    29ac:	e9cd 7001 	strd	r7, r0, [sp, #4]
    29b0:	464b      	mov	r3, r9
    29b2:	465a      	mov	r2, fp
    29b4:	2103      	movs	r1, #3
    29b6:	4650      	mov	r0, sl
    29b8:	f00f f8f6 	bl	11ba8 <ticker_start>
			   time_slot_callback_prepare,
			   op_desc,
			   NULL, /* no op callback */
			   NULL);

	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
    29bc:	f030 0402 	bics.w	r4, r0, #2
    29c0:	d116      	bne.n	29f0 <nrf_flash_sync_exe+0xd0>
		parm0.val = timeout;
		return (int) arch_syscall_invoke3(*(uintptr_t *)&sem, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_SEM_TAKE);
	}
#endif
	compiler_barrier();
	return z_impl_k_sem_take(sem, timeout);
    29c2:	4a13      	ldr	r2, [pc, #76]	; (2a10 <nrf_flash_sync_exe+0xf0>)
    29c4:	4813      	ldr	r0, [pc, #76]	; (2a14 <nrf_flash_sync_exe+0xf4>)
    29c6:	2300      	movs	r3, #0
    29c8:	f01d fd72 	bl	204b0 <z_impl_k_sem_take>
		result = -ECANCELED;
	} else if (k_sem_take(&sem_sync, K_MSEC(FLASH_TIMEOUT_MS)) != 0) {
    29cc:	b168      	cbz	r0, 29ea <nrf_flash_sync_exe+0xca>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
    29ce:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
    29d2:	f89d 0036 	ldrb.w	r0, [sp, #54]	; 0x36
    29d6:	9400      	str	r4, [sp, #0]
    29d8:	4623      	mov	r3, r4
    29da:	2103      	movs	r1, #3
    29dc:	f00f f96e 	bl	11cbc <ticker_stop>
		/* Stop any scheduled jobs */
		_ticker_stop(instance_index, 3, ticker_id);

		/* wait for operation's complete overrun*/
		result = -ETIMEDOUT;
    29e0:	f06f 003b 	mvn.w	r0, #59	; 0x3b
	} else {
		result = _ticker_sync_context.result;
	}

	return result;
}
    29e4:	b00f      	add	sp, #60	; 0x3c
    29e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		result = _ticker_sync_context.result;
    29ea:	f8d8 000c 	ldr.w	r0, [r8, #12]
    29ee:	e7f9      	b.n	29e4 <nrf_flash_sync_exe+0xc4>
		result = -ECANCELED;
    29f0:	f06f 0047 	mvn.w	r0, #71	; 0x47
	return result;
    29f4:	e7f6      	b.n	29e4 <nrf_flash_sync_exe+0xc4>
    29f6:	bf00      	nop
    29f8:	1afd498d 	.word	0x1afd498d
    29fc:	00000007 	.word	0x00000007
    2a00:	2000ebbc 	.word	0x2000ebbc
    2a04:	3b9aca00 	.word	0x3b9aca00
    2a08:	0001e40d 	.word	0x0001e40d
    2a0c:	1afd498d 	.word	0x1afd498d
    2a10:	000b7b44 	.word	0x000b7b44
    2a14:	2000ebcc 	.word	0x2000ebcc

00002a18 <nrf_flash_sync_check_time_limit>:
{
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
}

bool nrf_flash_sync_check_time_limit(uint32_t iteration)
{
    2a18:	b538      	push	{r3, r4, r5, lr}
	uint32_t ticks_diff;

	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2a1a:	4d0f      	ldr	r5, [pc, #60]	; (2a58 <nrf_flash_sync_check_time_limit+0x40>)
{
    2a1c:	4604      	mov	r4, r0
	ticks_diff = ticker_ticks_diff_get(ticker_ticks_now_get(),
    2a1e:	f00f f98f 	bl	11d40 <ticker_ticks_now_get>
    2a22:	68a9      	ldr	r1, [r5, #8]
    2a24:	f00f f98e 	bl	11d44 <ticker_ticks_diff_get>
					   _ticker_sync_context.ticks_begin);
	if (ticks_diff + ticks_diff/iteration >
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2a28:	6869      	ldr	r1, [r5, #4]
	if (ticks_diff + ticks_diff/iteration >
    2a2a:	fbb0 f4f4 	udiv	r4, r0, r4
    2a2e:	4404      	add	r4, r0
	    HAL_TICKER_US_TO_TICKS(_ticker_sync_context.slot)) {
    2a30:	480a      	ldr	r0, [pc, #40]	; (2a5c <nrf_flash_sync_check_time_limit+0x44>)
    2a32:	a307      	add	r3, pc, #28	; (adr r3, 2a50 <nrf_flash_sync_check_time_limit+0x38>)
    2a34:	e9d3 2300 	ldrd	r2, r3, [r3]
    2a38:	fba1 0100 	umull	r0, r1, r1, r0
    2a3c:	f7fe faac 	bl	f98 <__aeabi_uldivmod>
    2a40:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		return true;
	}

	return false;
}
    2a44:	4284      	cmp	r4, r0
    2a46:	bf94      	ite	ls
    2a48:	2000      	movls	r0, #0
    2a4a:	2001      	movhi	r0, #1
    2a4c:	bd38      	pop	{r3, r4, r5, pc}
    2a4e:	bf00      	nop
    2a50:	1afd498d 	.word	0x1afd498d
    2a54:	00000007 	.word	0x00000007
    2a58:	2000ebbc 	.word	0x2000ebbc
    2a5c:	3b9aca00 	.word	0x3b9aca00

00002a60 <vnd_ccc_cfg_changed>:
	printk("CSTM notifications %s", notif_enabled ? "enabled" : "disabled");
    2a60:	4a04      	ldr	r2, [pc, #16]	; (2a74 <vnd_ccc_cfg_changed+0x14>)
    2a62:	4b05      	ldr	r3, [pc, #20]	; (2a78 <vnd_ccc_cfg_changed+0x18>)
    2a64:	4805      	ldr	r0, [pc, #20]	; (2a7c <vnd_ccc_cfg_changed+0x1c>)
    2a66:	2901      	cmp	r1, #1
    2a68:	bf0c      	ite	eq
    2a6a:	4611      	moveq	r1, r2
    2a6c:	4619      	movne	r1, r3
    2a6e:	f01f b859 	b.w	21b24 <printk>
    2a72:	bf00      	nop
    2a74:	00029322 	.word	0x00029322
    2a78:	0002932a 	.word	0x0002932a
    2a7c:	00029333 	.word	0x00029333

00002a80 <disconnected>:
	printk("Disconnected (reason 0x%02x)\n", reason);
    2a80:	4801      	ldr	r0, [pc, #4]	; (2a88 <disconnected+0x8>)
    2a82:	f01f b84f 	b.w	21b24 <printk>
    2a86:	bf00      	nop
    2a88:	00029349 	.word	0x00029349

00002a8c <connected>:
	if (err) {
    2a8c:	b111      	cbz	r1, 2a94 <connected+0x8>
		printk("Connection failed (err 0x%02x)\n", err);
    2a8e:	4803      	ldr	r0, [pc, #12]	; (2a9c <connected+0x10>)
    2a90:	f01f b848 	b.w	21b24 <printk>
		printk("Connected\n");
    2a94:	4802      	ldr	r0, [pc, #8]	; (2aa0 <connected+0x14>)
    2a96:	f01f b845 	b.w	21b24 <printk>
    2a9a:	bf00      	nop
    2a9c:	00029367 	.word	0x00029367
    2aa0:	00029387 	.word	0x00029387

00002aa4 <hrs_notify>:
	if (heart_rate > 200U) {
    2aa4:	4b04      	ldr	r3, [pc, #16]	; (2ab8 <hrs_notify+0x14>)
    2aa6:	681a      	ldr	r2, [r3, #0]
    2aa8:	2ac8      	cmp	r2, #200	; 0xc8
		heart_rate = 0U;
    2aaa:	bf84      	itt	hi
    2aac:	2200      	movhi	r2, #0
    2aae:	601a      	strhi	r2, [r3, #0]
	bt_hrs_notify(heart_rate);
    2ab0:	8818      	ldrh	r0, [r3, #0]
    2ab2:	f003 bae9 	b.w	6088 <bt_hrs_notify>
    2ab6:	bf00      	nop
    2ab8:	2000ad58 	.word	0x2000ad58

00002abc <bt_addr_le_to_str.constprop.0.isra.0>:
 *  @param len Length of data to be copied to user string buffer. Refer to
 *  BT_ADDR_LE_STR_LEN about recommended value.
 *
 *  @return Number of successfully formatted bytes from binary address.
 */
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2abc:	b570      	push	{r4, r5, r6, lr}
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    2abe:	7803      	ldrb	r3, [r0, #0]
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
    2ac0:	b08a      	sub	sp, #40	; 0x28
    2ac2:	4604      	mov	r4, r0
    2ac4:	460e      	mov	r6, r1
    2ac6:	ad07      	add	r5, sp, #28
    2ac8:	2b03      	cmp	r3, #3
    2aca:	d820      	bhi.n	2b0e <bt_addr_le_to_str.constprop.0.isra.0+0x52>
    2acc:	e8df f003 	tbb	[pc, r3]
    2ad0:	1d1b1902 	.word	0x1d1b1902
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    2ad4:	4911      	ldr	r1, [pc, #68]	; (2b1c <bt_addr_le_to_str.constprop.0.isra.0+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    2ad6:	4628      	mov	r0, r5
    2ad8:	f021 fc6c 	bl	243b4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    2adc:	7863      	ldrb	r3, [r4, #1]
    2ade:	9304      	str	r3, [sp, #16]
    2ae0:	78a3      	ldrb	r3, [r4, #2]
    2ae2:	9303      	str	r3, [sp, #12]
    2ae4:	78e3      	ldrb	r3, [r4, #3]
    2ae6:	9302      	str	r3, [sp, #8]
    2ae8:	7923      	ldrb	r3, [r4, #4]
    2aea:	9301      	str	r3, [sp, #4]
    2aec:	7963      	ldrb	r3, [r4, #5]
    2aee:	9300      	str	r3, [sp, #0]
    2af0:	4a0b      	ldr	r2, [pc, #44]	; (2b20 <bt_addr_le_to_str.constprop.0.isra.0+0x64>)
    2af2:	79a3      	ldrb	r3, [r4, #6]
    2af4:	9505      	str	r5, [sp, #20]
    2af6:	211e      	movs	r1, #30
    2af8:	4630      	mov	r0, r6
    2afa:	f01f f820 	bl	21b3e <snprintk>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
}
    2afe:	b00a      	add	sp, #40	; 0x28
    2b00:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    2b02:	4908      	ldr	r1, [pc, #32]	; (2b24 <bt_addr_le_to_str.constprop.0.isra.0+0x68>)
    2b04:	e7e7      	b.n	2ad6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "public-id");
    2b06:	4908      	ldr	r1, [pc, #32]	; (2b28 <bt_addr_le_to_str.constprop.0.isra.0+0x6c>)
    2b08:	e7e5      	b.n	2ad6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		strcpy(type, "random-id");
    2b0a:	4908      	ldr	r1, [pc, #32]	; (2b2c <bt_addr_le_to_str.constprop.0.isra.0+0x70>)
    2b0c:	e7e3      	b.n	2ad6 <bt_addr_le_to_str.constprop.0.isra.0+0x1a>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    2b0e:	4a08      	ldr	r2, [pc, #32]	; (2b30 <bt_addr_le_to_str.constprop.0.isra.0+0x74>)
    2b10:	210a      	movs	r1, #10
    2b12:	4628      	mov	r0, r5
    2b14:	f01f f813 	bl	21b3e <snprintk>
		break;
    2b18:	e7e0      	b.n	2adc <bt_addr_le_to_str.constprop.0.isra.0+0x20>
    2b1a:	bf00      	nop
    2b1c:	00029392 	.word	0x00029392
    2b20:	000293b4 	.word	0x000293b4
    2b24:	00029399 	.word	0x00029399
    2b28:	000293a0 	.word	0x000293a0
    2b2c:	000293aa 	.word	0x000293aa
    2b30:	0002d435 	.word	0x0002d435

00002b34 <auth_cancel>:
{
    2b34:	b500      	push	{lr}
    2b36:	b089      	sub	sp, #36	; 0x24
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    2b38:	f022 f907 	bl	24d4a <bt_conn_get_dst>
    2b3c:	4669      	mov	r1, sp
    2b3e:	f7ff ffbd 	bl	2abc <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Pairing cancelled: %s\n", addr);
    2b42:	4803      	ldr	r0, [pc, #12]	; (2b50 <auth_cancel+0x1c>)
    2b44:	4669      	mov	r1, sp
    2b46:	f01e ffed 	bl	21b24 <printk>
}
    2b4a:	b009      	add	sp, #36	; 0x24
    2b4c:	f85d fb04 	ldr.w	pc, [sp], #4
    2b50:	000293d7 	.word	0x000293d7

00002b54 <auth_passkey_display>:
{
    2b54:	b510      	push	{r4, lr}
    2b56:	b088      	sub	sp, #32
    2b58:	460c      	mov	r4, r1
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));
    2b5a:	f022 f8f6 	bl	24d4a <bt_conn_get_dst>
    2b5e:	4669      	mov	r1, sp
    2b60:	f7ff ffac 	bl	2abc <bt_addr_le_to_str.constprop.0.isra.0>
	printk("Passkey for %s: %06u\n", addr, passkey);
    2b64:	4803      	ldr	r0, [pc, #12]	; (2b74 <auth_passkey_display+0x20>)
    2b66:	4622      	mov	r2, r4
    2b68:	4669      	mov	r1, sp
    2b6a:	f01e ffdb 	bl	21b24 <printk>
}
    2b6e:	b008      	add	sp, #32
    2b70:	bd10      	pop	{r4, pc}
    2b72:	bf00      	nop
    2b74:	000293ee 	.word	0x000293ee

00002b78 <buzzer_task>:
{
    2b78:	b508      	push	{r3, lr}
		if (latch_status == false)
    2b7a:	4c05      	ldr	r4, [pc, #20]	; (2b90 <buzzer_task+0x18>)
    2b7c:	7823      	ldrb	r3, [r4, #0]
    2b7e:	b913      	cbnz	r3, 2b86 <buzzer_task+0xe>
			toggle_buzzer(1);
    2b80:	2001      	movs	r0, #1
    2b82:	f001 fc79 	bl	4478 <toggle_buzzer>
		k_msleep(500);
    2b86:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2b8a:	f01e f90c 	bl	20da6 <k_msleep.isra.0>
		if (latch_status == false)
    2b8e:	e7f5      	b.n	2b7c <buzzer_task+0x4>
    2b90:	2000086b 	.word	0x2000086b

00002b94 <vibration_task>:
{
    2b94:	b508      	push	{r3, lr}
		if (latch_status == false)
    2b96:	4c06      	ldr	r4, [pc, #24]	; (2bb0 <vibration_task+0x1c>)
    2b98:	7823      	ldrb	r3, [r4, #0]
    2b9a:	b93b      	cbnz	r3, 2bac <vibration_task+0x18>
			toggle_motor(1); //1
    2b9c:	2001      	movs	r0, #1
			toggle_motor(0); //0
    2b9e:	f001 fc85 	bl	44ac <toggle_motor>
		k_msleep(500);
    2ba2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2ba6:	f01e f8fe 	bl	20da6 <k_msleep.isra.0>
		if (latch_status == false)
    2baa:	e7f5      	b.n	2b98 <vibration_task+0x4>
			toggle_motor(0); //0
    2bac:	2000      	movs	r0, #0
    2bae:	e7f6      	b.n	2b9e <vibration_task+0xa>
    2bb0:	2000086b 	.word	0x2000086b

00002bb4 <latch_sensor_task>:
{
    2bb4:	b508      	push	{r3, lr}
	init_latch();
    2bb6:	f000 fe5b 	bl	3870 <init_latch>
	init_output();
    2bba:	f001 fc21 	bl	4400 <init_output>
		latch_status = detect_latch();
    2bbe:	4c04      	ldr	r4, [pc, #16]	; (2bd0 <latch_sensor_task+0x1c>)
    2bc0:	f000 febe 	bl	3940 <detect_latch>
    2bc4:	7020      	strb	r0, [r4, #0]
		k_msleep(500);
    2bc6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    2bca:	f01e f8ec 	bl	20da6 <k_msleep.isra.0>
	while (1)
    2bce:	e7f7      	b.n	2bc0 <latch_sensor_task+0xc>
    2bd0:	2000086b 	.word	0x2000086b

00002bd4 <sensors_read_task>:
{
    2bd4:	b508      	push	{r3, lr}
	initialize_bma();
    2bd6:	f000 fa5d 	bl	3094 <initialize_bma>
	stepCounterEnable();
    2bda:	f000 fab7 	bl	314c <stepCounterEnable>
	init_max30102();
    2bde:	f000 fcc1 	bl	3564 <init_max30102>
	set_max30102_for_reading_data();
    2be2:	f01e fc4f 	bl	21484 <set_max30102_for_reading_data>
	first_data_read();
    2be6:	f000 fd43 	bl	3670 <first_data_read>
	init_max30208();
    2bea:	f000 ff29 	bl	3a40 <init_max30208>
	configure_max30208();
    2bee:	f000 ff45 	bl	3a7c <configure_max30208>
	configure_mpu6050();
    2bf2:	f000 ff79 	bl	3ae8 <configure_mpu6050>
	display_mode = DISPLAY_MODE_TIME;
    2bf6:	4b11      	ldr	r3, [pc, #68]	; (2c3c <sensors_read_task+0x68>)
		switch (sensor_mode)
    2bf8:	4e11      	ldr	r6, [pc, #68]	; (2c40 <sensors_read_task+0x6c>)
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2bfa:	4d12      	ldr	r5, [pc, #72]	; (2c44 <sensors_read_task+0x70>)
    2bfc:	4c12      	ldr	r4, [pc, #72]	; (2c48 <sensors_read_task+0x74>)
	display_mode = DISPLAY_MODE_TIME;
    2bfe:	2201      	movs	r2, #1
    2c00:	601a      	str	r2, [r3, #0]
		switch (sensor_mode)
    2c02:	6833      	ldr	r3, [r6, #0]
    2c04:	b1ab      	cbz	r3, 2c32 <sensors_read_task+0x5e>
    2c06:	2b01      	cmp	r3, #1
    2c08:	d1fc      	bne.n	2c04 <sensors_read_task+0x30>
			read_heart_rate_spio2(&heart_rate, &sp02, &valid_hr, &valid_sp02);
    2c0a:	4910      	ldr	r1, [pc, #64]	; (2c4c <sensors_read_task+0x78>)
    2c0c:	4810      	ldr	r0, [pc, #64]	; (2c50 <sensors_read_task+0x7c>)
    2c0e:	4622      	mov	r2, r4
    2c10:	462b      	mov	r3, r5
    2c12:	f000 fd8d 	bl	3730 <read_heart_rate_spio2>
			max30208_read_temp(&temp_data);
    2c16:	480f      	ldr	r0, [pc, #60]	; (2c54 <sensors_read_task+0x80>)
    2c18:	f7fe fb86 	bl	1328 <max30208_read_temp>
			steps = getStepCounterOutput();
    2c1c:	f000 fb20 	bl	3260 <getStepCounterOutput>
    2c20:	4b0d      	ldr	r3, [pc, #52]	; (2c58 <sensors_read_task+0x84>)
    2c22:	6018      	str	r0, [r3, #0]
			mpu6050_read_Acc(&mpu_data);
    2c24:	480d      	ldr	r0, [pc, #52]	; (2c5c <sensors_read_task+0x88>)
    2c26:	f01e fccf 	bl	215c8 <mpu6050_read_Acc>
			hrs_notify();
    2c2a:	f7ff ff3b 	bl	2aa4 <hrs_notify>
			k_msleep(10);
    2c2e:	200a      	movs	r0, #10
    2c30:	e001      	b.n	2c36 <sensors_read_task+0x62>
			k_msleep(500);
    2c32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
			k_msleep(10);
    2c36:	f01e f8b6 	bl	20da6 <k_msleep.isra.0>
			break;
    2c3a:	e7e2      	b.n	2c02 <sensors_read_task+0x2e>
    2c3c:	2000ad54 	.word	0x2000ad54
    2c40:	2000ad60 	.word	0x2000ad60
    2c44:	2000ed7d 	.word	0x2000ed7d
    2c48:	2000ed7c 	.word	0x2000ed7c
    2c4c:	2000ad68 	.word	0x2000ad68
    2c50:	2000ad58 	.word	0x2000ad58
    2c54:	2000ad70 	.word	0x2000ad70
    2c58:	2000ad6c 	.word	0x2000ad6c
    2c5c:	2000ed4c 	.word	0x2000ed4c

00002c60 <main>:
{
    2c60:	b570      	push	{r4, r5, r6, lr}
	err = bt_enable(NULL);
    2c62:	2000      	movs	r0, #0
{
    2c64:	b088      	sub	sp, #32
	err = bt_enable(NULL);
    2c66:	f007 fcd9 	bl	a61c <bt_enable>
	if (err) {
    2c6a:	4606      	mov	r6, r0
    2c6c:	b130      	cbz	r0, 2c7c <main+0x1c>
		printk("Bluetooth init failed (err %d)\n", err);
    2c6e:	4601      	mov	r1, r0
    2c70:	4821      	ldr	r0, [pc, #132]	; (2cf8 <main+0x98>)
}
    2c72:	b008      	add	sp, #32
    2c74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		printk("Bluetooth init failed (err %d)\n", err);
    2c78:	f01e bf54 	b.w	21b24 <printk>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2c7c:	4d1f      	ldr	r5, [pc, #124]	; (2cfc <main+0x9c>)
	printk("Bluetooth initialized\n");
    2c7e:	4820      	ldr	r0, [pc, #128]	; (2d00 <main+0xa0>)
    2c80:	f01e ff50 	bl	21b24 <printk>
	hts_init();		// Health Thermometer Initialize
    2c84:	f001 fc4a 	bl	451c <hts_init>
		settings_load();
    2c88:	f020 f86d 	bl	22d66 <settings_load>
	err = bt_le_adv_start(BT_LE_ADV_CONN_NAME, ad, ARRAY_SIZE(ad), NULL, 0);
    2c8c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    2c8e:	ac03      	add	r4, sp, #12
    2c90:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2c92:	682b      	ldr	r3, [r5, #0]
    2c94:	6023      	str	r3, [r4, #0]
    2c96:	491b      	ldr	r1, [pc, #108]	; (2d04 <main+0xa4>)
    2c98:	9600      	str	r6, [sp, #0]
    2c9a:	4633      	mov	r3, r6
    2c9c:	2204      	movs	r2, #4
    2c9e:	a803      	add	r0, sp, #12
    2ca0:	f008 f83e 	bl	ad20 <bt_le_adv_start>
	if (err) {
    2ca4:	4601      	mov	r1, r0
    2ca6:	b1f0      	cbz	r0, 2ce6 <main+0x86>
		printk("Advertising failed to start (err %d)\n", err);
    2ca8:	4817      	ldr	r0, [pc, #92]	; (2d08 <main+0xa8>)
    2caa:	f01e ff3b 	bl	21b24 <printk>
	bt_conn_cb_register(&conn_callbacks);
    2cae:	4817      	ldr	r0, [pc, #92]	; (2d0c <main+0xac>)
	while (display_mode == DISPLAY_MODE_BOOTING)
    2cb0:	4c17      	ldr	r4, [pc, #92]	; (2d10 <main+0xb0>)
	bt_conn_cb_register(&conn_callbacks);
    2cb2:	f008 fbaf 	bl	b414 <bt_conn_cb_register>
	bt_conn_auth_cb_register(&auth_cb_display);
    2cb6:	4817      	ldr	r0, [pc, #92]	; (2d14 <main+0xb4>)
    2cb8:	f008 ffcc 	bl	bc54 <bt_conn_auth_cb_register>
	printk("\n\n Booting Enverse Smart Watch \n\n");
    2cbc:	4816      	ldr	r0, [pc, #88]	; (2d18 <main+0xb8>)
    2cbe:	f01e ff31 	bl	21b24 <printk>
	while (display_mode == DISPLAY_MODE_BOOTING)
    2cc2:	6823      	ldr	r3, [r4, #0]
    2cc4:	b19b      	cbz	r3, 2cee <main+0x8e>
		sensor_mode = SENSOR_MODE_READ_ALL;
    2cc6:	4d15      	ldr	r5, [pc, #84]	; (2d1c <main+0xbc>)
    2cc8:	2601      	movs	r6, #1
		k_msleep(5000);
    2cca:	f241 3088 	movw	r0, #5000	; 0x1388
    2cce:	f01e f86a 	bl	20da6 <k_msleep.isra.0>
		display_mode = DISPLAY_MODE_VALUES;
    2cd2:	2304      	movs	r3, #4
		k_msleep(10000);
    2cd4:	f242 7010 	movw	r0, #10000	; 0x2710
		display_mode = DISPLAY_MODE_VALUES;
    2cd8:	6023      	str	r3, [r4, #0]
		sensor_mode = SENSOR_MODE_READ_ALL;
    2cda:	602e      	str	r6, [r5, #0]
		k_msleep(10000);
    2cdc:	f01e f863 	bl	20da6 <k_msleep.isra.0>
		hts_indicate();
    2ce0:	f7fe fba6 	bl	1430 <hts_indicate>
	while (1)
    2ce4:	e7f1      	b.n	2cca <main+0x6a>
	printk("Advertising successfully started\n");
    2ce6:	480e      	ldr	r0, [pc, #56]	; (2d20 <main+0xc0>)
    2ce8:	f01e ff1c 	bl	21b24 <printk>
    2cec:	e7df      	b.n	2cae <main+0x4e>
		k_msleep(1000);
    2cee:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    2cf2:	f01e f858 	bl	20da6 <k_msleep.isra.0>
    2cf6:	e7e4      	b.n	2cc2 <main+0x62>
    2cf8:	00029404 	.word	0x00029404
    2cfc:	00027a50 	.word	0x00027a50
    2d00:	00029424 	.word	0x00029424
    2d04:	00027b48 	.word	0x00027b48
    2d08:	0002943b 	.word	0x0002943b
    2d0c:	2000022c 	.word	0x2000022c
    2d10:	2000ad54 	.word	0x2000ad54
    2d14:	20000200 	.word	0x20000200
    2d18:	00029483 	.word	0x00029483
    2d1c:	2000ad60 	.word	0x2000ad60
    2d20:	00029461 	.word	0x00029461

00002d24 <refresh_display>:
{
    2d24:	b508      	push	{r3, lr}
	resetDisplay();
    2d26:	f01e fd65 	bl	217f4 <resetDisplay>
	k_msleep(1);
    2d2a:	2001      	movs	r0, #1
    2d2c:	f01e f83b 	bl	20da6 <k_msleep.isra.0>
	LCD_Init();
    2d30:	f001 face 	bl	42d0 <LCD_Init>
	SetBrightness(current_brightness);
    2d34:	4b02      	ldr	r3, [pc, #8]	; (2d40 <refresh_display+0x1c>)
    2d36:	6818      	ldr	r0, [r3, #0]
}
    2d38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	SetBrightness(current_brightness);
    2d3c:	f01e bd24 	b.w	21788 <SetBrightness>
    2d40:	20000248 	.word	0x20000248

00002d44 <display_task>:
{
    2d44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2d48:	b088      	sub	sp, #32
	LCD_Init();
    2d4a:	f001 fac1 	bl	42d0 <LCD_Init>
	SetBrightness(255);
    2d4e:	20ff      	movs	r0, #255	; 0xff
    2d50:	f01e fd1a 	bl	21788 <SetBrightness>
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2d54:	4e8e      	ldr	r6, [pc, #568]	; (2f90 <display_task+0x24c>)
		if (current_brightness < brightness_value)
    2d56:	4d8f      	ldr	r5, [pc, #572]	; (2f94 <display_task+0x250>)
		if (brightness_value > MAXIMUM_BRIGHTNESS)
    2d58:	6833      	ldr	r3, [r6, #0]
    2d5a:	2bff      	cmp	r3, #255	; 0xff
    2d5c:	dd31      	ble.n	2dc2 <display_task+0x7e>
			brightness_value = MAXIMUM_BRIGHTNESS;
    2d5e:	23ff      	movs	r3, #255	; 0xff
			brightness_value = MINIMUM_BRIGHTNESS;
    2d60:	6033      	str	r3, [r6, #0]
		if (current_brightness < brightness_value)
    2d62:	682b      	ldr	r3, [r5, #0]
    2d64:	6832      	ldr	r2, [r6, #0]
    2d66:	4293      	cmp	r3, r2
    2d68:	da2f      	bge.n	2dca <display_task+0x86>
			current_brightness += brightness_step;
    2d6a:	4a8b      	ldr	r2, [pc, #556]	; (2f98 <display_task+0x254>)
    2d6c:	6812      	ldr	r2, [r2, #0]
    2d6e:	4413      	add	r3, r2
			current_brightness -= brightness_step;
    2d70:	602b      	str	r3, [r5, #0]
		if (current_brightness > MAXIMUM_BRIGHTNESS)
    2d72:	682b      	ldr	r3, [r5, #0]
    2d74:	2bff      	cmp	r3, #255	; 0xff
    2d76:	dd2d      	ble.n	2dd4 <display_task+0x90>
			current_brightness = MAXIMUM_BRIGHTNESS;
    2d78:	23ff      	movs	r3, #255	; 0xff
			current_brightness = MINIMUM_BRIGHTNESS;
    2d7a:	602b      	str	r3, [r5, #0]
		SetBrightness(current_brightness);
    2d7c:	6828      	ldr	r0, [r5, #0]
    2d7e:	f01e fd03 	bl	21788 <SetBrightness>
		switch (display_mode)
    2d82:	4b86      	ldr	r3, [pc, #536]	; (2f9c <display_task+0x258>)
    2d84:	681c      	ldr	r4, [r3, #0]
    2d86:	2c01      	cmp	r4, #1
    2d88:	d028      	beq.n	2ddc <display_task+0x98>
    2d8a:	2c04      	cmp	r4, #4
    2d8c:	d040      	beq.n	2e10 <display_task+0xcc>
    2d8e:	2c00      	cmp	r4, #0
    2d90:	d1e2      	bne.n	2d58 <display_task+0x14>
			DispLogo(logo_colour[i]);
    2d92:	4f83      	ldr	r7, [pc, #524]	; (2fa0 <display_task+0x25c>)
			DispStr("BOOTING", 150, 150, WHITE, BLACK);
    2d94:	4883      	ldr	r0, [pc, #524]	; (2fa4 <display_task+0x260>)
    2d96:	9400      	str	r4, [sp, #0]
    2d98:	2296      	movs	r2, #150	; 0x96
    2d9a:	4611      	mov	r1, r2
    2d9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2da0:	f01e fdc3 	bl	2192a <DispStr>
			DispLogo(logo_colour[i]);
    2da4:	683a      	ldr	r2, [r7, #0]
    2da6:	4b80      	ldr	r3, [pc, #512]	; (2fa8 <display_task+0x264>)
    2da8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    2dac:	f001 f9b4 	bl	4118 <DispLogo>
			if (i >= (sizeof(logo_colour) / sizeof(int)))
    2db0:	683b      	ldr	r3, [r7, #0]
    2db2:	2b03      	cmp	r3, #3
				i++;
    2db4:	bf98      	it	ls
    2db6:	1c5c      	addls	r4, r3, #1
			current_state_display = DISPLAY_MODE_BOOTING;
    2db8:	4b7c      	ldr	r3, [pc, #496]	; (2fac <display_task+0x268>)
    2dba:	603c      	str	r4, [r7, #0]
    2dbc:	2200      	movs	r2, #0
    2dbe:	601a      	str	r2, [r3, #0]
			break;
    2dc0:	e7ca      	b.n	2d58 <display_task+0x14>
		if (brightness_value < MINIMUM_BRIGHTNESS)
    2dc2:	2b31      	cmp	r3, #49	; 0x31
    2dc4:	dccd      	bgt.n	2d62 <display_task+0x1e>
			brightness_value = MINIMUM_BRIGHTNESS;
    2dc6:	2332      	movs	r3, #50	; 0x32
    2dc8:	e7ca      	b.n	2d60 <display_task+0x1c>
		else if (current_brightness > brightness_value)
    2dca:	ddd2      	ble.n	2d72 <display_task+0x2e>
			current_brightness -= brightness_step;
    2dcc:	4a72      	ldr	r2, [pc, #456]	; (2f98 <display_task+0x254>)
    2dce:	6812      	ldr	r2, [r2, #0]
    2dd0:	1a9b      	subs	r3, r3, r2
    2dd2:	e7cd      	b.n	2d70 <display_task+0x2c>
		if (current_brightness < MINIMUM_BRIGHTNESS)
    2dd4:	2b31      	cmp	r3, #49	; 0x31
    2dd6:	dcd1      	bgt.n	2d7c <display_task+0x38>
			current_brightness = MINIMUM_BRIGHTNESS;
    2dd8:	2332      	movs	r3, #50	; 0x32
    2dda:	e7ce      	b.n	2d7a <display_task+0x36>
			if (current_state_display != DISPLAY_MODE_TIME)
    2ddc:	4c73      	ldr	r4, [pc, #460]	; (2fac <display_task+0x268>)
    2dde:	6823      	ldr	r3, [r4, #0]
    2de0:	2b01      	cmp	r3, #1
    2de2:	d001      	beq.n	2de8 <display_task+0xa4>
				refresh_display();
    2de4:	f7ff ff9e 	bl	2d24 <refresh_display>
			DispStr("10 : 10", 150, 150, WHITE, BLACK);
    2de8:	2296      	movs	r2, #150	; 0x96
    2dea:	2700      	movs	r7, #0
    2dec:	4611      	mov	r1, r2
    2dee:	4870      	ldr	r0, [pc, #448]	; (2fb0 <display_task+0x26c>)
    2df0:	9700      	str	r7, [sp, #0]
    2df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2df6:	f01e fd98 	bl	2192a <DispStr>
			DispStr("11/11  Wed", 130, 200, WHITE, BLACK);
    2dfa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2dfe:	486d      	ldr	r0, [pc, #436]	; (2fb4 <display_task+0x270>)
    2e00:	9700      	str	r7, [sp, #0]
    2e02:	22c8      	movs	r2, #200	; 0xc8
    2e04:	2182      	movs	r1, #130	; 0x82
    2e06:	f01e fd90 	bl	2192a <DispStr>
			current_state_display = DISPLAY_MODE_TIME;
    2e0a:	2301      	movs	r3, #1
    2e0c:	6023      	str	r3, [r4, #0]
			break;
    2e0e:	e7a3      	b.n	2d58 <display_task+0x14>
			if (current_state_display != DISPLAY_MODE_VALUES)
    2e10:	f8df 8198 	ldr.w	r8, [pc, #408]	; 2fac <display_task+0x268>
    2e14:	f8d8 3000 	ldr.w	r3, [r8]
    2e18:	2b04      	cmp	r3, #4
    2e1a:	d04d      	beq.n	2eb8 <display_task+0x174>
				refresh_display();
    2e1c:	f7ff ff82 	bl	2d24 <refresh_display>
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2e20:	2432      	movs	r4, #50	; 0x32
    2e22:	2364      	movs	r3, #100	; 0x64
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2e24:	2700      	movs	r7, #0
				DispIcon(steps_logo, BLUE, 100, 100, 50, 50);
    2e26:	461a      	mov	r2, r3
    2e28:	4863      	ldr	r0, [pc, #396]	; (2fb8 <display_task+0x274>)
    2e2a:	211f      	movs	r1, #31
    2e2c:	e9cd 4400 	strd	r4, r4, [sp]
    2e30:	f001 f9dc 	bl	41ec <DispIcon>
				DispStr("Steps", 90, 160, WHITE, BLACK);
    2e34:	4861      	ldr	r0, [pc, #388]	; (2fbc <display_task+0x278>)
    2e36:	9700      	str	r7, [sp, #0]
    2e38:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e3c:	22a0      	movs	r2, #160	; 0xa0
    2e3e:	215a      	movs	r1, #90	; 0x5a
    2e40:	f01e fd73 	bl	2192a <DispStr>
				DispIcon(heart_logo, RED, 260, 100, 50, 50);
    2e44:	485e      	ldr	r0, [pc, #376]	; (2fc0 <display_task+0x27c>)
    2e46:	2364      	movs	r3, #100	; 0x64
    2e48:	f44f 7282 	mov.w	r2, #260	; 0x104
    2e4c:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2e50:	e9cd 4400 	strd	r4, r4, [sp]
    2e54:	f001 f9ca 	bl	41ec <DispIcon>
				DispStr("H R", 264, 160, WHITE, BLACK);
    2e58:	485a      	ldr	r0, [pc, #360]	; (2fc4 <display_task+0x280>)
    2e5a:	9700      	str	r7, [sp, #0]
    2e5c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e60:	22a0      	movs	r2, #160	; 0xa0
    2e62:	f44f 7184 	mov.w	r1, #264	; 0x108
    2e66:	f01e fd60 	bl	2192a <DispStr>
				DispIcon(temperature_logo, GREEN, 100, 280, 50, 50);
    2e6a:	4857      	ldr	r0, [pc, #348]	; (2fc8 <display_task+0x284>)
    2e6c:	f44f 738c 	mov.w	r3, #280	; 0x118
    2e70:	2264      	movs	r2, #100	; 0x64
    2e72:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
    2e76:	e9cd 4400 	strd	r4, r4, [sp]
    2e7a:	f001 f9b7 	bl	41ec <DispIcon>
				DispStr("Temp", 94, 340, WHITE, BLACK);
    2e7e:	4853      	ldr	r0, [pc, #332]	; (2fcc <display_task+0x288>)
    2e80:	9700      	str	r7, [sp, #0]
    2e82:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2e86:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2e8a:	215e      	movs	r1, #94	; 0x5e
    2e8c:	f01e fd4d 	bl	2192a <DispStr>
				DispIcon(spio2_logo, RED, 260, 280, 50, 50);
    2e90:	484f      	ldr	r0, [pc, #316]	; (2fd0 <display_task+0x28c>)
    2e92:	f44f 738c 	mov.w	r3, #280	; 0x118
    2e96:	f44f 7282 	mov.w	r2, #260	; 0x104
    2e9a:	f44f 4178 	mov.w	r1, #63488	; 0xf800
    2e9e:	e9cd 4400 	strd	r4, r4, [sp]
    2ea2:	f001 f9a3 	bl	41ec <DispIcon>
				DispStr("Spo2", 250, 340, WHITE, BLACK);
    2ea6:	484b      	ldr	r0, [pc, #300]	; (2fd4 <display_task+0x290>)
    2ea8:	9700      	str	r7, [sp, #0]
    2eaa:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2eae:	f44f 72aa 	mov.w	r2, #340	; 0x154
    2eb2:	21fa      	movs	r1, #250	; 0xfa
    2eb4:	f01e fd39 	bl	2192a <DispStr>
			sprintf(step_count, "%d", steps);
    2eb8:	4b47      	ldr	r3, [pc, #284]	; (2fd8 <display_task+0x294>)
    2eba:	4948      	ldr	r1, [pc, #288]	; (2fdc <display_task+0x298>)
    2ebc:	681a      	ldr	r2, [r3, #0]
    2ebe:	a802      	add	r0, sp, #8
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2ec0:	2400      	movs	r4, #0
			sprintf(step_count, "%d", steps);
    2ec2:	f005 f8f5 	bl	80b0 <sprintf>
			DispStr(step_count, 120, 190, WHITE, BLACK); //update step count
    2ec6:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2eca:	9400      	str	r4, [sp, #0]
    2ecc:	22be      	movs	r2, #190	; 0xbe
    2ece:	2178      	movs	r1, #120	; 0x78
    2ed0:	a802      	add	r0, sp, #8
    2ed2:	f01e fd2a 	bl	2192a <DispStr>
			if (valid_hr)
    2ed6:	4b42      	ldr	r3, [pc, #264]	; (2fe0 <display_task+0x29c>)
    2ed8:	781b      	ldrb	r3, [r3, #0]
    2eda:	b173      	cbz	r3, 2efa <display_task+0x1b6>
				sprintf(hr, "%d  ", heart_rate);
    2edc:	4b41      	ldr	r3, [pc, #260]	; (2fe4 <display_task+0x2a0>)
    2ede:	4942      	ldr	r1, [pc, #264]	; (2fe8 <display_task+0x2a4>)
    2ee0:	681a      	ldr	r2, [r3, #0]
    2ee2:	a806      	add	r0, sp, #24
    2ee4:	f005 f8e4 	bl	80b0 <sprintf>
				DispStr(hr, 270, 190, WHITE, BLACK); //update hr
    2ee8:	9400      	str	r4, [sp, #0]
    2eea:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2eee:	22be      	movs	r2, #190	; 0xbe
    2ef0:	f44f 7187 	mov.w	r1, #270	; 0x10e
    2ef4:	a806      	add	r0, sp, #24
    2ef6:	f01e fd18 	bl	2192a <DispStr>
			sprintf(temperature_value, "%.2f", temp_data);
    2efa:	4b3c      	ldr	r3, [pc, #240]	; (2fec <display_task+0x2a8>)
    2efc:	6818      	ldr	r0, [r3, #0]
    2efe:	f7fd fa63 	bl	3c8 <__aeabi_f2d>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2f02:	2400      	movs	r4, #0
			sprintf(temperature_value, "%.2f", temp_data);
    2f04:	4602      	mov	r2, r0
    2f06:	460b      	mov	r3, r1
    2f08:	a804      	add	r0, sp, #16
    2f0a:	4939      	ldr	r1, [pc, #228]	; (2ff0 <display_task+0x2ac>)
    2f0c:	f005 f8d0 	bl	80b0 <sprintf>
			DispStr(t, 90, 370, WHITE, BLACK); //update temperature
    2f10:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f14:	4837      	ldr	r0, [pc, #220]	; (2ff4 <display_task+0x2b0>)
    2f16:	9400      	str	r4, [sp, #0]
    2f18:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2f1c:	215a      	movs	r1, #90	; 0x5a
    2f1e:	f01e fd04 	bl	2192a <DispStr>
			if (valid_sp02)
    2f22:	4b35      	ldr	r3, [pc, #212]	; (2ff8 <display_task+0x2b4>)
    2f24:	781b      	ldrb	r3, [r3, #0]
    2f26:	b17b      	cbz	r3, 2f48 <display_task+0x204>
				sprintf(sp, "%d", sp02);
    2f28:	4b34      	ldr	r3, [pc, #208]	; (2ffc <display_task+0x2b8>)
    2f2a:	492c      	ldr	r1, [pc, #176]	; (2fdc <display_task+0x298>)
    2f2c:	681a      	ldr	r2, [r3, #0]
    2f2e:	a806      	add	r0, sp, #24
    2f30:	f005 f8be 	bl	80b0 <sprintf>
				DispStr(sp, 260, 370, WHITE, BLACK); //update spo2
    2f34:	9400      	str	r4, [sp, #0]
    2f36:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f3a:	f44f 72b9 	mov.w	r2, #370	; 0x172
    2f3e:	f44f 7182 	mov.w	r1, #260	; 0x104
    2f42:	a806      	add	r0, sp, #24
    2f44:	f01e fcf1 	bl	2192a <DispStr>
			if(!latch_status)
    2f48:	4b2d      	ldr	r3, [pc, #180]	; (3000 <display_task+0x2bc>)
    2f4a:	781b      	ldrb	r3, [r3, #0]
    2f4c:	b9eb      	cbnz	r3, 2f8a <display_task+0x246>
				DispStr("Detached !", 128, 30, RED, BLACK);
    2f4e:	9300      	str	r3, [sp, #0]
    2f50:	f44f 4378 	mov.w	r3, #63488	; 0xf800
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2f54:	482b      	ldr	r0, [pc, #172]	; (3004 <display_task+0x2c0>)
    2f56:	221e      	movs	r2, #30
    2f58:	2180      	movs	r1, #128	; 0x80
    2f5a:	f01e fce6 	bl	2192a <DispStr>
			current_state_display = DISPLAY_MODE_VALUES;
    2f5e:	2304      	movs	r3, #4
    2f60:	f8c8 3000 	str.w	r3, [r8]
			mpu_data = mpu_data-213;
    2f64:	4b28      	ldr	r3, [pc, #160]	; (3008 <display_task+0x2c4>)
			sprintf(Accx, "%d", mpu_data);
    2f66:	491d      	ldr	r1, [pc, #116]	; (2fdc <display_task+0x298>)
			mpu_data = mpu_data-213;
    2f68:	881a      	ldrh	r2, [r3, #0]
    2f6a:	3ad5      	subs	r2, #213	; 0xd5
    2f6c:	b292      	uxth	r2, r2
			sprintf(Accx, "%d", mpu_data);
    2f6e:	a806      	add	r0, sp, #24
			mpu_data = mpu_data-213;
    2f70:	801a      	strh	r2, [r3, #0]
			sprintf(Accx, "%d", mpu_data);
    2f72:	f005 f89d 	bl	80b0 <sprintf>
			DispStr(Accx, 190, 240, WHITE, BLACK); //update acceleration
    2f76:	2300      	movs	r3, #0
    2f78:	9300      	str	r3, [sp, #0]
    2f7a:	22f0      	movs	r2, #240	; 0xf0
    2f7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    2f80:	21be      	movs	r1, #190	; 0xbe
    2f82:	a806      	add	r0, sp, #24
    2f84:	f01e fcd1 	bl	2192a <DispStr>
			break;
    2f88:	e6e6      	b.n	2d58 <display_task+0x14>
				DispStr("Detached !", 128, 30, BLACK, BLACK);
    2f8a:	2300      	movs	r3, #0
    2f8c:	9300      	str	r3, [sp, #0]
    2f8e:	e7e1      	b.n	2f54 <display_task+0x210>
    2f90:	20000228 	.word	0x20000228
    2f94:	20000248 	.word	0x20000248
    2f98:	20000224 	.word	0x20000224
    2f9c:	2000ad54 	.word	0x2000ad54
    2fa0:	2000ad5c 	.word	0x2000ad5c
    2fa4:	000294a5 	.word	0x000294a5
    2fa8:	2000024c 	.word	0x2000024c
    2fac:	2000ad50 	.word	0x2000ad50
    2fb0:	000294ad 	.word	0x000294ad
    2fb4:	000294b5 	.word	0x000294b5
    2fb8:	200089fc 	.word	0x200089fc
    2fbc:	000294c0 	.word	0x000294c0
    2fc0:	200018b4 	.word	0x200018b4
    2fc4:	000294c6 	.word	0x000294c6
    2fc8:	200093c0 	.word	0x200093c0
    2fcc:	000294ca 	.word	0x000294ca
    2fd0:	20008038 	.word	0x20008038
    2fd4:	000294cf 	.word	0x000294cf
    2fd8:	2000ad6c 	.word	0x2000ad6c
    2fdc:	0002c0fd 	.word	0x0002c0fd
    2fe0:	2000ed7c 	.word	0x2000ed7c
    2fe4:	2000ad58 	.word	0x2000ad58
    2fe8:	000294d4 	.word	0x000294d4
    2fec:	2000ad70 	.word	0x2000ad70
    2ff0:	000294d9 	.word	0x000294d9
    2ff4:	000294de 	.word	0x000294de
    2ff8:	2000ed7d 	.word	0x2000ed7d
    2ffc:	2000ad68 	.word	0x2000ad68
    3000:	2000086b 	.word	0x2000086b
    3004:	000294e3 	.word	0x000294e3
    3008:	2000ed4c 	.word	0x2000ed4c

0000300c <bma_i2c_read>:
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
}

/* BMA i2c read function */
static uint16_t bma_i2c_read(u8_t reg, u8_t *data, u16_t len, void *intf_ptr)
{
    300c:	b570      	push	{r4, r5, r6, lr}
    300e:	4606      	mov	r6, r0
    3010:	b088      	sub	sp, #32
    3012:	460d      	mov	r5, r1
    3014:	4614      	mov	r4, r2
	if (z_syscall_trap()) {
		return (const struct device *) arch_syscall_invoke1(*(uintptr_t *)&name, K_SYSCALL_DEVICE_GET_BINDING);
	}
#endif
	compiler_barrier();
	return z_impl_device_get_binding(name);
    3016:	480d      	ldr	r0, [pc, #52]	; (304c <bma_i2c_read+0x40>)
    3018:	f01c fb8e 	bl	1f738 <z_impl_device_get_binding>
				 const void *write_buf, size_t num_write,
				 void *read_buf, size_t num_read)
{
	struct i2c_msg msg[2];

	msg[0].buf = (uint8_t *)write_buf;
    301c:	f10d 0207 	add.w	r2, sp, #7
    3020:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    3022:	2201      	movs	r2, #1
    3024:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    3026:	2200      	movs	r2, #0
    3028:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)read_buf;
	msg[1].len = num_read;
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    302c:	2207      	movs	r2, #7
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    302e:	e9cd 5405 	strd	r5, r4, [sp, #20]
    3032:	f88d 6007 	strb.w	r6, [sp, #7]
    3036:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    303a:	6883      	ldr	r3, [r0, #8]
    303c:	2202      	movs	r2, #2
    303e:	685c      	ldr	r4, [r3, #4]
    3040:	a902      	add	r1, sp, #8
    3042:	2319      	movs	r3, #25
    3044:	47a0      	blx	r4
}
    3046:	b2c0      	uxtb	r0, r0
    3048:	b008      	add	sp, #32
    304a:	bd70      	pop	{r4, r5, r6, pc}
    304c:	0002958f 	.word	0x0002958f

00003050 <bma_i2c_write>:
{
    3050:	b570      	push	{r4, r5, r6, lr}
    3052:	4606      	mov	r6, r0
    3054:	b088      	sub	sp, #32
    3056:	460d      	mov	r5, r1
    3058:	4614      	mov	r4, r2
    305a:	480d      	ldr	r0, [pc, #52]	; (3090 <bma_i2c_write+0x40>)
    305c:	f01c fb6c 	bl	1f738 <z_impl_device_get_binding>
				  const uint8_t *buf,
				  uint32_t num_bytes)
{
	struct i2c_msg msg[2];

	msg[0].buf = &start_addr;
    3060:	f10d 0207 	add.w	r2, sp, #7
    3064:	9202      	str	r2, [sp, #8]
	msg[0].len = 1U;
    3066:	2201      	movs	r2, #1
    3068:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    306a:	2200      	movs	r2, #0
    306c:	f88d 2010 	strb.w	r2, [sp, #16]

	msg[1].buf = (uint8_t *)buf;
	msg[1].len = num_bytes;
	msg[1].flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3070:	2202      	movs	r2, #2
    return write_bytes(i2c_dev, reg, data, len, BMA4_I2C_ADDR_SECONDARY);
    3072:	e9cd 5405 	strd	r5, r4, [sp, #20]
    3076:	f88d 6007 	strb.w	r6, [sp, #7]
    307a:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    307e:	6883      	ldr	r3, [r0, #8]
    3080:	a902      	add	r1, sp, #8
    3082:	685c      	ldr	r4, [r3, #4]
    3084:	2319      	movs	r3, #25
    3086:	47a0      	blx	r4
}
    3088:	b2c0      	uxtb	r0, r0
    308a:	b008      	add	sp, #32
    308c:	bd70      	pop	{r4, r5, r6, pc}
    308e:	bf00      	nop
    3090:	0002958f 	.word	0x0002958f

00003094 <initialize_bma>:
    k_busy_wait(ms);
}

/*Initialise BMA sensor */
void initialize_bma()
{
    3094:	b530      	push	{r4, r5, lr}
    3096:	b08d      	sub	sp, #52	; 0x34
    3098:	4821      	ldr	r0, [pc, #132]	; (3120 <initialize_bma+0x8c>)
    309a:	f01c fb4d 	bl	1f738 <z_impl_device_get_binding>
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    if (!i2c_dev)
    309e:	b928      	cbnz	r0, 30ac <initialize_bma+0x18>
    {
        printk("I2C: Device driver not found.\n");
    30a0:	4820      	ldr	r0, [pc, #128]	; (3124 <initialize_bma+0x90>)
    if (rslt == BMA4_OK)
        printk("Writing config file : OK\n");
    else
        printk("Writing config file : FAILED!!!\n");
    bma456_device_global = bma456_device;
}
    30a2:	b00d      	add	sp, #52	; 0x34
    30a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
        printk("I2C: Device driver not found.\n");
    30a8:	f01e bd3c 	b.w	21b24 <printk>
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    30ac:	4b1e      	ldr	r3, [pc, #120]	; (3128 <initialize_bma+0x94>)
    bma456_device.intf_ptr = &dev_addr;
    30ae:	9301      	str	r3, [sp, #4]
    dev_addr = BMA4_I2C_ADDR_SECONDARY;
    30b0:	2219      	movs	r2, #25
    30b2:	701a      	strb	r2, [r3, #0]
    bma456_device.bus_read = bma_i2c_read;
    30b4:	4a1d      	ldr	r2, [pc, #116]	; (312c <initialize_bma+0x98>)
    30b6:	9208      	str	r2, [sp, #32]
    bma456_device.bus_write = bma_i2c_write;
    30b8:	4a1d      	ldr	r2, [pc, #116]	; (3130 <initialize_bma+0x9c>)
    30ba:	9209      	str	r2, [sp, #36]	; 0x24
    bma456_device.delay_us = bma_delay_us;
    30bc:	4a1d      	ldr	r2, [pc, #116]	; (3134 <initialize_bma+0xa0>)
    30be:	920a      	str	r2, [sp, #40]	; 0x28
    bma456_device.read_write_len = 8;
    30c0:	2208      	movs	r2, #8
    30c2:	f8ad 2014 	strh.w	r2, [sp, #20]
    bma456_device.resolution = 12;
    30c6:	220c      	movs	r2, #12
    30c8:	f88d 200c 	strb.w	r2, [sp, #12]
    rslt |= bma456_init(&bma456_device);
    30cc:	4668      	mov	r0, sp
    bma456_device.feature_len = BMA456_FEATURE_SIZE;
    30ce:	2246      	movs	r2, #70	; 0x46
    30d0:	f88d 2016 	strb.w	r2, [sp, #22]
    rslt |= bma456_init(&bma456_device);
    30d4:	f01e f8e9 	bl	212aa <bma456_init>
    if (rslt == BMA4_OK)
    30d8:	b9f0      	cbnz	r0, 3118 <initialize_bma+0x84>
        printk("Communication with BMA : OK\n");
    30da:	4817      	ldr	r0, [pc, #92]	; (3138 <initialize_bma+0xa4>)
        printk("Communication with BMA : FAILED!!! \n");
    30dc:	f01e fd22 	bl	21b24 <printk>
    bma4_set_command_register(0xB6, &bma456_device);
    30e0:	4669      	mov	r1, sp
    30e2:	20b6      	movs	r0, #182	; 0xb6
    30e4:	f01e f8d0 	bl	21288 <bma4_set_command_register>
	return z_impl_k_sleep(timeout);
    30e8:	f44f 70a4 	mov.w	r0, #328	; 0x148
    30ec:	2100      	movs	r1, #0
    30ee:	f01d f999 	bl	20424 <z_impl_k_sleep>
    rslt |= bma456_write_config_file(&bma456_device);
    30f2:	4668      	mov	r0, sp
    30f4:	f000 f9c4 	bl	3480 <bma456_write_config_file>
    if (rslt == BMA4_OK)
    30f8:	b980      	cbnz	r0, 311c <initialize_bma+0x88>
        printk("Writing config file : OK\n");
    30fa:	4810      	ldr	r0, [pc, #64]	; (313c <initialize_bma+0xa8>)
    bma456_device_global = bma456_device;
    30fc:	4d10      	ldr	r5, [pc, #64]	; (3140 <initialize_bma+0xac>)
    30fe:	466c      	mov	r4, sp
        printk("Writing config file : FAILED!!!\n");
    3100:	f01e fd10 	bl	21b24 <printk>
    bma456_device_global = bma456_device;
    3104:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    3106:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    3108:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    310a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    310c:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
    3110:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
    3114:	b00d      	add	sp, #52	; 0x34
    3116:	bd30      	pop	{r4, r5, pc}
        printk("Communication with BMA : FAILED!!! \n");
    3118:	480a      	ldr	r0, [pc, #40]	; (3144 <initialize_bma+0xb0>)
    311a:	e7df      	b.n	30dc <initialize_bma+0x48>
        printk("Writing config file : FAILED!!!\n");
    311c:	480a      	ldr	r0, [pc, #40]	; (3148 <initialize_bma+0xb4>)
    311e:	e7ed      	b.n	30fc <initialize_bma+0x68>
    3120:	0002958f 	.word	0x0002958f
    3124:	00029595 	.word	0x00029595
    3128:	2000ed7e 	.word	0x2000ed7e
    312c:	0000300d 	.word	0x0000300d
    3130:	00003051 	.word	0x00003051
    3134:	00020dc7 	.word	0x00020dc7
    3138:	000295b4 	.word	0x000295b4
    313c:	000295f6 	.word	0x000295f6
    3140:	2000ad74 	.word	0x2000ad74
    3144:	000295d1 	.word	0x000295d1
    3148:	00029610 	.word	0x00029610

0000314c <stepCounterEnable>:
    bma456_device_global = bma456_device;
    return data;
}

u16_t stepCounterEnable()
{
    314c:	b570      	push	{r4, r5, r6, lr}
    struct bma4_accel sens_data;
    struct bma4_dev bma456_device = bma456_device_global;
    314e:	4d37      	ldr	r5, [pc, #220]	; (322c <stepCounterEnable+0xe0>)
    3150:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    3152:	b08c      	sub	sp, #48	; 0x30
    struct bma4_dev bma456_device = bma456_device_global;
    3154:	466c      	mov	r4, sp
    3156:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3158:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    315a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    315c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3160:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    // /* Soft-reset */
    rslt |= bma4_set_command_register(0xB6, &bma456_device);
    3164:	4669      	mov	r1, sp
    3166:	20b6      	movs	r0, #182	; 0xb6
    3168:	f01e f88e 	bl	21288 <bma4_set_command_register>
    if (rslt == BMA4_OK)
    316c:	4604      	mov	r4, r0
    316e:	b990      	cbnz	r0, 3196 <stepCounterEnable+0x4a>
        printk("Soft reset before enabling step counter : OK\n");
    3170:	482f      	ldr	r0, [pc, #188]	; (3230 <stepCounterEnable+0xe4>)
    else
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    3172:	f01e fcd7 	bl	21b24 <printk>
    3176:	2100      	movs	r1, #0
    3178:	f640 40cd 	movw	r0, #3277	; 0xccd
    317c:	f01d f952 	bl	20424 <z_impl_k_sleep>
    k_msleep(100);

    /* Initialize BMA456 */
    rslt |= bma456_init(&bma456_device);
    3180:	4668      	mov	r0, sp
    3182:	f01e f892 	bl	212aa <bma456_init>
    3186:	4304      	orrs	r4, r0
    3188:	b260      	sxtb	r0, r4
    318a:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    318c:	b12c      	cbz	r4, 319a <stepCounterEnable+0x4e>
    {
        printk("Testing communication with BMA : FAILED!!!\n");
    318e:	4829      	ldr	r0, [pc, #164]	; (3234 <stepCounterEnable+0xe8>)
    //     return rslt;
    // }
    // else
    //     printk("Setting watermark : OK\n");
    bma456_device_global = bma456_device;
    printk("Step counter init : OK\n");
    3190:	f01e fcc8 	bl	21b24 <printk>
    return rslt;
    3194:	e015      	b.n	31c2 <stepCounterEnable+0x76>
        printk("Soft reset before enabling step counter : FAILED!!!\n");
    3196:	4828      	ldr	r0, [pc, #160]	; (3238 <stepCounterEnable+0xec>)
    3198:	e7eb      	b.n	3172 <stepCounterEnable+0x26>
        printk("Testing communication with BMA : OK\n");
    319a:	4828      	ldr	r0, [pc, #160]	; (323c <stepCounterEnable+0xf0>)
    319c:	f01e fcc2 	bl	21b24 <printk>
    rslt = bma4_set_accel_enable(0x01, &bma456_device);
    31a0:	4669      	mov	r1, sp
    31a2:	2001      	movs	r0, #1
    31a4:	f01e f84b 	bl	2123e <bma4_set_accel_enable>
    31a8:	b284      	uxth	r4, r0
    if (rslt == BMA4_OK)
    31aa:	b96c      	cbnz	r4, 31c8 <stepCounterEnable+0x7c>
        printk("Enabling accelerometer : OK\n");
    31ac:	4824      	ldr	r0, [pc, #144]	; (3240 <stepCounterEnable+0xf4>)
    31ae:	f01e fcb9 	bl	21b24 <printk>
    rslt = bma456_write_config_file(&bma456_device);
    31b2:	4668      	mov	r0, sp
    31b4:	f000 f964 	bl	3480 <bma456_write_config_file>
    31b8:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    31ba:	b13c      	cbz	r4, 31cc <stepCounterEnable+0x80>
        printf("Load configuration fail\r\n");
    31bc:	4821      	ldr	r0, [pc, #132]	; (3244 <stepCounterEnable+0xf8>)
        printf("Step counter not enabled\r\n");
    31be:	f004 ff8f 	bl	80e0 <printf>
}
    31c2:	4620      	mov	r0, r4
    31c4:	b00c      	add	sp, #48	; 0x30
    31c6:	bd70      	pop	{r4, r5, r6, pc}
        printk("Enabling accelerometer : FAILED!!!\n");
    31c8:	481f      	ldr	r0, [pc, #124]	; (3248 <stepCounterEnable+0xfc>)
    31ca:	e7e1      	b.n	3190 <stepCounterEnable+0x44>
        printf("Load configuration successful\r\n");
    31cc:	481f      	ldr	r0, [pc, #124]	; (324c <stepCounterEnable+0x100>)
    31ce:	f004 ff87 	bl	80e0 <printf>
    rslt = bma456_feature_enable(BMA456_STEP_CNTR, 1, &bma456_device);
    31d2:	2101      	movs	r1, #1
    31d4:	466a      	mov	r2, sp
    31d6:	4608      	mov	r0, r1
    31d8:	f01e f88f 	bl	212fa <bma456_feature_enable>
    31dc:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    31de:	b10c      	cbz	r4, 31e4 <stepCounterEnable+0x98>
        printf("Step counter not enabled\r\n");
    31e0:	481b      	ldr	r0, [pc, #108]	; (3250 <stepCounterEnable+0x104>)
    31e2:	e7ec      	b.n	31be <stepCounterEnable+0x72>
        printf("Step counter enabled\r\n");
    31e4:	481b      	ldr	r0, [pc, #108]	; (3254 <stepCounterEnable+0x108>)
    31e6:	f004 ff7b 	bl	80e0 <printf>
    rslt = bma456_map_interrupt(BMA4_INTR1_MAP, BMA456_STEP_CNTR_INT, 1, &bma456_device);
    31ea:	4620      	mov	r0, r4
    31ec:	466b      	mov	r3, sp
    31ee:	2201      	movs	r2, #1
    31f0:	2102      	movs	r1, #2
    31f2:	f01e f86e 	bl	212d2 <bma456_map_interrupt>
    31f6:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    31f8:	b124      	cbz	r4, 3204 <stepCounterEnable+0xb8>
        printf("Error code: %d\n", rslt);
    31fa:	4621      	mov	r1, r4
    31fc:	4816      	ldr	r0, [pc, #88]	; (3258 <stepCounterEnable+0x10c>)
    31fe:	f004 ff6f 	bl	80e0 <printf>
        return rslt;
    3202:	e7de      	b.n	31c2 <stepCounterEnable+0x76>
    rslt = bma456_step_counter_set_watermark(1, &bma456_device);
    3204:	4669      	mov	r1, sp
    3206:	2001      	movs	r0, #1
    3208:	f01e f8ee 	bl	213e8 <bma456_step_counter_set_watermark>
    320c:	b284      	uxth	r4, r0
    if (rslt != BMA4_OK)
    320e:	2c00      	cmp	r4, #0
    3210:	d1f3      	bne.n	31fa <stepCounterEnable+0xae>
    bma456_device_global = bma456_device;
    3212:	466d      	mov	r5, sp
    3214:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    3216:	4e05      	ldr	r6, [pc, #20]	; (322c <stepCounterEnable+0xe0>)
    3218:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    321a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    321c:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    321e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3222:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
    printk("Step counter init : OK\n");
    3226:	480d      	ldr	r0, [pc, #52]	; (325c <stepCounterEnable+0x110>)
    3228:	e7b2      	b.n	3190 <stepCounterEnable+0x44>
    322a:	bf00      	nop
    322c:	2000ad74 	.word	0x2000ad74
    3230:	00029631 	.word	0x00029631
    3234:	00029694 	.word	0x00029694
    3238:	0002965f 	.word	0x0002965f
    323c:	000296c0 	.word	0x000296c0
    3240:	000296e5 	.word	0x000296e5
    3244:	00029726 	.word	0x00029726
    3248:	00029702 	.word	0x00029702
    324c:	00029740 	.word	0x00029740
    3250:	00029760 	.word	0x00029760
    3254:	0002977b 	.word	0x0002977b
    3258:	00029792 	.word	0x00029792
    325c:	000297a2 	.word	0x000297a2

00003260 <getStepCounterOutput>:

u32_t getStepCounterOutput()
{
    3260:	b530      	push	{r4, r5, lr}
    struct bma4_dev bma456_device = bma456_device_global;
    3262:	4d0c      	ldr	r5, [pc, #48]	; (3294 <getStepCounterOutput+0x34>)
    3264:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    3266:	b08f      	sub	sp, #60	; 0x3c
    struct bma4_dev bma456_device = bma456_device_global;
    3268:	ac02      	add	r4, sp, #8
    326a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    326c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    326e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    3270:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    3274:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    uint16_t rslt = 0;
    uint32_t step_out = 0;
    3278:	2300      	movs	r3, #0
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    327a:	a902      	add	r1, sp, #8
    327c:	a801      	add	r0, sp, #4
    uint32_t step_out = 0;
    327e:	9301      	str	r3, [sp, #4]
    rslt = bma456_step_counter_output(&step_out, &bma456_device);
    3280:	f01e f8e5 	bl	2144e <bma456_step_counter_output>
    if (rslt == BMA4_OK)
    3284:	b110      	cbz	r0, 328c <getStepCounterOutput+0x2c>
    {
        //printk("\nSteps counter output is %u\r\n", step_out);
    }
    else
    {
        printk("Reading step count : FAILED\n");
    3286:	4804      	ldr	r0, [pc, #16]	; (3298 <getStepCounterOutput+0x38>)
    3288:	f01e fc4c 	bl	21b24 <printk>
    }
    return step_out;
    328c:	9801      	ldr	r0, [sp, #4]
    328e:	b00f      	add	sp, #60	; 0x3c
    3290:	bd30      	pop	{r4, r5, pc}
    3292:	bf00      	nop
    3294:	2000ad74 	.word	0x2000ad74
    3298:	000297ba 	.word	0x000297ba

0000329c <bma4_write_config_file>:

/*!
 *  @brief This API is used to write the binary configuration in the sensor
 */
int8_t bma4_write_config_file(struct bma4_dev *dev)
{
    329c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    329e:	4605      	mov	r5, r0
    uint8_t config_load = 0;
    uint16_t index = 0;
    uint8_t config_stream_status = 0;

    /* Disable advanced power save */
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    32a0:	4629      	mov	r1, r5
    uint8_t config_load = 0;
    32a2:	2000      	movs	r0, #0
    32a4:	f88d 0004 	strb.w	r0, [sp, #4]
    uint8_t config_stream_status = 0;
    32a8:	f88d 0005 	strb.w	r0, [sp, #5]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    32ac:	f01d fef4 	bl	21098 <bma4_set_advance_power_save>

    /* Wait for sensor time synchronization. Refer the data-sheet for
     * more information
     */
    dev->delay_us(450, dev->intf_ptr);
    32b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    32b2:	6869      	ldr	r1, [r5, #4]
    rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
    32b4:	4604      	mov	r4, r0
    dev->delay_us(450, dev->intf_ptr);
    32b6:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
    32ba:	4798      	blx	r3
    if (rslt == BMA4_OK)
    32bc:	b94c      	cbnz	r4, 32d2 <bma4_write_config_file+0x36>
    {
        /* Disable config loading*/
        rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    32be:	462b      	mov	r3, r5
    32c0:	2201      	movs	r2, #1
    32c2:	a901      	add	r1, sp, #4
    32c4:	2059      	movs	r0, #89	; 0x59
    32c6:	f01d ff0b 	bl	210e0 <bma4_write_regs>

        if (rslt == BMA4_OK)
    32ca:	4604      	mov	r4, r0
    32cc:	2800      	cmp	r0, #0
    32ce:	f000 8087 	beq.w	33e0 <bma4_write_config_file+0x144>
            }
        }
    }

    return rslt;
}
    32d2:	4620      	mov	r0, r4
    32d4:	b003      	add	sp, #12
    32d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 *  @note index value should be even number.
 */
static int8_t stream_transfer_write(const uint8_t *stream_data, uint16_t index, struct bma4_dev *dev)
{
    int8_t rslt;
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    32d8:	0973      	lsrs	r3, r6, #5
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    32da:	692f      	ldr	r7, [r5, #16]
    uint8_t asic_msb = (uint8_t)((index / 2) >> 4);
    32dc:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_lsb = ((index / 2) & 0x0F);

    /* Check the dev structure as NULL */
    rslt = null_pointer_check(dev);
    32e0:	4628      	mov	r0, r5
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    32e2:	f3c6 0343 	ubfx	r3, r6, #1, #4
                rslt = stream_transfer_write((dev->config_file_ptr + index), index, dev);
    32e6:	4437      	add	r7, r6
    uint8_t asic_lsb = ((index / 2) & 0x0F);
    32e8:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
    32ec:	f01d fd6d 	bl	20dca <null_pointer_check>

    if ((rslt == BMA4_OK) && (stream_data != NULL))
    32f0:	2800      	cmp	r0, #0
    32f2:	d172      	bne.n	33da <bma4_write_config_file+0x13e>
    32f4:	2f00      	cmp	r7, #0
    32f6:	d070      	beq.n	33da <bma4_write_config_file+0x13e>
    {
        rslt = bma4_write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    32f8:	462b      	mov	r3, r5
    32fa:	2201      	movs	r2, #1
    32fc:	f10d 0107 	add.w	r1, sp, #7
    3300:	205b      	movs	r0, #91	; 0x5b
    3302:	f01d feed 	bl	210e0 <bma4_write_regs>
        if (rslt == BMA4_OK)
    3306:	4604      	mov	r4, r0
    3308:	b978      	cbnz	r0, 332a <bma4_write_config_file+0x8e>
        {
            rslt = bma4_write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    330a:	462b      	mov	r3, r5
    330c:	2201      	movs	r2, #1
    330e:	f10d 0106 	add.w	r1, sp, #6
    3312:	205c      	movs	r0, #92	; 0x5c
    3314:	f01d fee4 	bl	210e0 <bma4_write_regs>
            if (rslt == BMA4_OK)
    3318:	4604      	mov	r4, r0
    331a:	b930      	cbnz	r0, 332a <bma4_write_config_file+0x8e>
            {
                rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, (uint8_t *)stream_data, dev->read_write_len, dev);
    331c:	8aaa      	ldrh	r2, [r5, #20]
    331e:	462b      	mov	r3, r5
    3320:	4639      	mov	r1, r7
    3322:	205e      	movs	r0, #94	; 0x5e
    3324:	f01d fd5f 	bl	20de6 <write_regs>
    3328:	4604      	mov	r4, r0
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    332a:	8aab      	ldrh	r3, [r5, #20]
    332c:	441e      	add	r6, r3
    332e:	b2b6      	uxth	r6, r6
    3330:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
    3332:	42b3      	cmp	r3, r6
    3334:	d8d0      	bhi.n	32d8 <bma4_write_config_file+0x3c>
            if (rslt == BMA4_OK)
    3336:	2c00      	cmp	r4, #0
    3338:	d1cb      	bne.n	32d2 <bma4_write_config_file+0x36>
                config_load = 0x01;
    333a:	2601      	movs	r6, #1
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    333c:	462b      	mov	r3, r5
    333e:	4632      	mov	r2, r6
    3340:	a901      	add	r1, sp, #4
    3342:	2059      	movs	r0, #89	; 0x59
                config_load = 0x01;
    3344:	f88d 6004 	strb.w	r6, [sp, #4]
                rslt = bma4_write_regs(BMA4_INIT_CTRL_ADDR, &config_load, 1, dev);
    3348:	f01d feca 	bl	210e0 <bma4_write_regs>
                if (rslt == BMA4_OK)
    334c:	4604      	mov	r4, r0
    334e:	2800      	cmp	r0, #0
    3350:	d1bf      	bne.n	32d2 <bma4_write_config_file+0x36>
                    dev->delay_us(BMA4_MS_TO_US(150), dev->intf_ptr);
    3352:	6aab      	ldr	r3, [r5, #40]	; 0x28
    3354:	6869      	ldr	r1, [r5, #4]
    3356:	4825      	ldr	r0, [pc, #148]	; (33ec <bma4_write_config_file+0x150>)
    3358:	4798      	blx	r3
                    rslt = bma4_read_regs(BMA4_INTERNAL_STAT, &config_stream_status, 1, dev);
    335a:	4632      	mov	r2, r6
    335c:	462b      	mov	r3, r5
    335e:	f10d 0105 	add.w	r1, sp, #5
    3362:	202a      	movs	r0, #42	; 0x2a
    3364:	f01d fe10 	bl	20f88 <bma4_read_regs>
                    config_stream_status = config_stream_status & BMA4_CONFIG_STREAM_MESSAGE_MSK;
    3368:	f89d 6005 	ldrb.w	r6, [sp, #5]
    336c:	f006 060f 	and.w	r6, r6, #15
    3370:	f88d 6005 	strb.w	r6, [sp, #5]
                    if (rslt == BMA4_OK)
    3374:	4604      	mov	r4, r0
    3376:	2800      	cmp	r0, #0
    3378:	d1ab      	bne.n	32d2 <bma4_write_config_file+0x36>
                        if (config_stream_status != BMA4_ASIC_INITIALIZED)
    337a:	2e01      	cmp	r6, #1
    337c:	d132      	bne.n	33e4 <bma4_write_config_file+0x148>
                            rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
    337e:	4629      	mov	r1, r5
    3380:	4630      	mov	r0, r6
    3382:	f01d fe89 	bl	21098 <bma4_set_advance_power_save>
                            if (rslt == BMA4_OK)
    3386:	4604      	mov	r4, r0
    3388:	2800      	cmp	r0, #0
    338a:	d1a2      	bne.n	32d2 <bma4_write_config_file+0x36>
    uint8_t asic_lsb = 0;
    338c:	f88d 0006 	strb.w	r0, [sp, #6]
    uint8_t asic_msb = 0;
    3390:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
    3394:	4628      	mov	r0, r5
    3396:	f01d fd18 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
    339a:	4604      	mov	r4, r0
    339c:	2800      	cmp	r0, #0
    339e:	d198      	bne.n	32d2 <bma4_write_config_file+0x36>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
    33a0:	462b      	mov	r3, r5
    33a2:	4632      	mov	r2, r6
    33a4:	f10d 0106 	add.w	r1, sp, #6
    33a8:	205b      	movs	r0, #91	; 0x5b
    33aa:	f01d fd41 	bl	20e30 <read_regs>
        if (rslt == BMA4_OK)
    33ae:	4604      	mov	r4, r0
    33b0:	2800      	cmp	r0, #0
    33b2:	d18e      	bne.n	32d2 <bma4_write_config_file+0x36>
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
    33b4:	462b      	mov	r3, r5
    33b6:	4632      	mov	r2, r6
    33b8:	f10d 0107 	add.w	r1, sp, #7
    33bc:	205c      	movs	r0, #92	; 0x5c
    33be:	f01d fd37 	bl	20e30 <read_regs>
        if (rslt == BMA4_OK)
    33c2:	4604      	mov	r4, r0
    33c4:	2800      	cmp	r0, #0
    33c6:	d184      	bne.n	32d2 <bma4_write_config_file+0x36>
            dev->asic_data.asic_lsb = asic_lsb & 0x0F;
    33c8:	f89d 3006 	ldrb.w	r3, [sp, #6]
    33cc:	f003 030f 	and.w	r3, r3, #15
    33d0:	75eb      	strb	r3, [r5, #23]
            dev->asic_data.asic_msb = asic_msb;
    33d2:	f89d 3007 	ldrb.w	r3, [sp, #7]
    33d6:	762b      	strb	r3, [r5, #24]
    return rslt;
    33d8:	e77b      	b.n	32d2 <bma4_write_config_file+0x36>
            }
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    33da:	f04f 34ff 	mov.w	r4, #4294967295
    33de:	e7a4      	b.n	332a <bma4_write_config_file+0x8e>
            for (index = 0; index < dev->config_size; index += dev->read_write_len)
    33e0:	4606      	mov	r6, r0
    33e2:	e7a5      	b.n	3330 <bma4_write_config_file+0x94>
                            rslt = BMA4_E_CONFIG_STREAM_ERROR;
    33e4:	f06f 0404 	mvn.w	r4, #4
    33e8:	e773      	b.n	32d2 <bma4_write_config_file+0x36>
    33ea:	bf00      	nop
    33ec:	000249f0 	.word	0x000249f0

000033f0 <bma4_map_interrupt>:
{
    33f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    33f2:	461c      	mov	r4, r3
    uint8_t data[3] = { 0, 0, 0 };
    33f4:	4b21      	ldr	r3, [pc, #132]	; (347c <bma4_map_interrupt+0x8c>)
{
    33f6:	4616      	mov	r6, r2
    uint8_t data[3] = { 0, 0, 0 };
    33f8:	f8b3 2003 	ldrh.w	r2, [r3, #3]
    33fc:	795b      	ldrb	r3, [r3, #5]
    33fe:	f88d 3006 	strb.w	r3, [sp, #6]
{
    3402:	4607      	mov	r7, r0
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    3404:	f245 7356 	movw	r3, #22358	; 0x5756
    rslt = null_pointer_check(dev);
    3408:	4620      	mov	r0, r4
{
    340a:	460d      	mov	r5, r1
    uint8_t data[3] = { 0, 0, 0 };
    340c:	f8ad 2004 	strh.w	r2, [sp, #4]
    uint8_t index[2] = { BMA4_INT_MAP_1_ADDR, BMA4_INT_MAP_2_ADDR };
    3410:	f8ad 3000 	strh.w	r3, [sp]
    rslt = null_pointer_check(dev);
    3414:	f01d fcd9 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
    3418:	bb70      	cbnz	r0, 3478 <bma4_map_interrupt+0x88>
        rslt = bma4_read_regs(BMA4_INT_MAP_1_ADDR, data, 3, dev);
    341a:	4623      	mov	r3, r4
    341c:	2203      	movs	r2, #3
    341e:	a901      	add	r1, sp, #4
    3420:	2056      	movs	r0, #86	; 0x56
    3422:	f01d fdb1 	bl	20f88 <bma4_read_regs>
        if (rslt == BMA4_OK)
    3426:	bb38      	cbnz	r0, 3478 <bma4_map_interrupt+0x88>
            if (enable == TRUE)
    3428:	ab02      	add	r3, sp, #8
    342a:	2e01      	cmp	r6, #1
    342c:	eb03 0607 	add.w	r6, r3, r7
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    3430:	ea4f 2215 	mov.w	r2, r5, lsr #8
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    3434:	bf17      	itett	ne
    3436:	f816 1c04 	ldrbne.w	r1, [r6, #-4]
                data[int_line] = (uint8_t)(int_map & (0x00FF));
    343a:	f806 5c04 	strbeq.w	r5, [r6, #-4]
                data[int_line] &= (~(uint8_t)(int_map & (0x00FF)));
    343e:	ea21 0505 	bicne.w	r5, r1, r5
    3442:	f806 5c04 	strbne.w	r5, [r6, #-4]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    3446:	bf16      	itet	ne
    3448:	f89d 3006 	ldrbne.w	r3, [sp, #6]
                data[2] = (uint8_t)((int_map & (0xFF00)) >> 8);
    344c:	f88d 2006 	strbeq.w	r2, [sp, #6]
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    3450:	4393      	bicne	r3, r2
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    3452:	a901      	add	r1, sp, #4
                data[2] &= (~(uint8_t)((int_map & (0xFF00)) >> 8));
    3454:	bf18      	it	ne
    3456:	f88d 3006 	strbne.w	r3, [sp, #6]
            rslt = bma4_write_regs(index[int_line], &data[int_line], 1, dev);
    345a:	f816 0c08 	ldrb.w	r0, [r6, #-8]
    345e:	4623      	mov	r3, r4
    3460:	2201      	movs	r2, #1
    3462:	4439      	add	r1, r7
    3464:	f01d fe3c 	bl	210e0 <bma4_write_regs>
            if (rslt == BMA4_OK)
    3468:	b930      	cbnz	r0, 3478 <bma4_map_interrupt+0x88>
                rslt = bma4_write_regs(BMA4_INT_MAP_DATA_ADDR, &data[2], 1, dev);
    346a:	4623      	mov	r3, r4
    346c:	2201      	movs	r2, #1
    346e:	f10d 0106 	add.w	r1, sp, #6
    3472:	2058      	movs	r0, #88	; 0x58
    3474:	f01d fe34 	bl	210e0 <bma4_write_regs>
}
    3478:	b003      	add	sp, #12
    347a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    347c:	00027af8 	.word	0x00027af8

00003480 <bma456_write_config_file>:
 */
int8_t bma456_write_config_file(struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
    3480:	b190      	cbz	r0, 34a8 <bma456_write_config_file+0x28>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
    3482:	7803      	ldrb	r3, [r0, #0]
    3484:	2b16      	cmp	r3, #22
    3486:	d112      	bne.n	34ae <bma456_write_config_file+0x2e>
        {
            /* Configuration stream read/write length boundary
             * check
             */
            if ((dev->read_write_len >= BMA456_RD_WR_MIN_LEN) && (dev->read_write_len <= BMA456_RD_WR_MAX_LEN))
    3488:	8a83      	ldrh	r3, [r0, #20]
    348a:	1e9a      	subs	r2, r3, #2
    348c:	b292      	uxth	r2, r2
    348e:	f241 71fe 	movw	r1, #6142	; 0x17fe
    3492:	428a      	cmp	r2, r1
    3494:	d80e      	bhi.n	34b4 <bma456_write_config_file+0x34>
            {
                /* Even or odd check */
                if ((dev->read_write_len % 2) != 0)
    3496:	07da      	lsls	r2, r3, #31
                {
                    dev->read_write_len = dev->read_write_len - 1;
    3498:	bf44      	itt	mi
    349a:	f103 33ff 	addmi.w	r3, r3, #4294967295
    349e:	8283      	strhmi	r3, [r0, #20]
                }

                /* Assign stream data */
                dev->config_file_ptr = bma456_config_file;
    34a0:	4b06      	ldr	r3, [pc, #24]	; (34bc <bma456_write_config_file+0x3c>)
    34a2:	6103      	str	r3, [r0, #16]
                rslt = bma4_write_config_file(dev);
    34a4:	f7ff befa 	b.w	329c <bma4_write_config_file>
            rslt = BMA4_E_INVALID_SENSOR;
        }
    }
    else
    {
        rslt = BMA4_E_NULL_PTR;
    34a8:	f04f 30ff 	mov.w	r0, #4294967295
    34ac:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
    34ae:	f06f 0003 	mvn.w	r0, #3
    34b2:	4770      	bx	lr
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
    34b4:	f06f 0009 	mvn.w	r0, #9
    }

    return rslt;
}
    34b8:	4770      	bx	lr
    34ba:	bf00      	nop
    34bc:	000297d7 	.word	0x000297d7

000034c0 <max30102_i2c_write.constprop.0>:
#endif
    return ret;
}

/* MAX30102 i2c write function */
static uint16_t max30102_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    34c0:	b530      	push	{r4, r5, lr}
    34c2:	4605      	mov	r5, r0
    34c4:	b085      	sub	sp, #20
    34c6:	460c      	mov	r4, r1
    34c8:	480a      	ldr	r0, [pc, #40]	; (34f4 <max30102_i2c_write.constprop.0+0x34>)
    34ca:	f01c f935 	bl	1f738 <z_impl_device_get_binding>
	msg.len = num_bytes;
    34ce:	2202      	movs	r2, #2
 */
static inline int i2c_reg_write_byte(const struct device *dev,
				     uint16_t dev_addr,
				     uint8_t reg_addr, uint8_t value)
{
	uint8_t tx_buf[2] = {reg_addr, value};
    34d0:	f88d 5000 	strb.w	r5, [sp]
    buffer[1] = data;
    34d4:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    34d8:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    34dc:	9202      	str	r2, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    34de:	f88d 200c 	strb.w	r2, [sp, #12]
	return api->transfer(dev, msgs, num_msgs, addr);
    34e2:	6883      	ldr	r3, [r0, #8]
    34e4:	2201      	movs	r2, #1
    34e6:	685c      	ldr	r4, [r3, #4]
    34e8:	a901      	add	r1, sp, #4
    34ea:	2357      	movs	r3, #87	; 0x57
    34ec:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return write_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    34ee:	b2c0      	uxtb	r0, r0
    34f0:	b005      	add	sp, #20
    34f2:	bd30      	pop	{r4, r5, pc}
    34f4:	0002958f 	.word	0x0002958f

000034f8 <max30102_i2c_read.constprop.0>:

/* MAX30102 i2c read function */
static uint16_t max30102_i2c_read(u8_t reg, u8_t *data, u16_t len)
    34f8:	b530      	push	{r4, r5, lr}
    34fa:	4605      	mov	r5, r0
    34fc:	b089      	sub	sp, #36	; 0x24
    34fe:	460c      	mov	r4, r1
    3500:	480d      	ldr	r0, [pc, #52]	; (3538 <max30102_i2c_read.constprop.0+0x40>)
    3502:	f01c f919 	bl	1f738 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    3506:	f10d 0207 	add.w	r2, sp, #7
    350a:	9202      	str	r2, [sp, #8]
	msg[0].len = num_write;
    350c:	2201      	movs	r2, #1
	msg[1].len = num_read;
    350e:	e9cd 4205 	strd	r4, r2, [sp, #20]
	msg[0].len = num_write;
    3512:	9203      	str	r2, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    3514:	2100      	movs	r1, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3516:	2207      	movs	r2, #7
    3518:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    351c:	f88d 1010 	strb.w	r1, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3520:	f88d 201c 	strb.w	r2, [sp, #28]
	return api->transfer(dev, msgs, num_msgs, addr);
    3524:	6883      	ldr	r3, [r0, #8]
    3526:	2202      	movs	r2, #2
    3528:	685c      	ldr	r4, [r3, #4]
    352a:	a902      	add	r1, sp, #8
    352c:	2357      	movs	r3, #87	; 0x57
    352e:	47a0      	blx	r4
{
    struct device *i2c_dev;
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}
    3530:	b2c0      	uxtb	r0, r0
    3532:	b009      	add	sp, #36	; 0x24
    3534:	bd30      	pop	{r4, r5, pc}
    3536:	bf00      	nop
    3538:	0002958f 	.word	0x0002958f

0000353c <max30102_reset>:
    i2c_dev = device_get_binding(I2C_DEV);
    return read_bytes_fifo(i2c_dev, reg, data, len, MAX30102_ADDRESS);
}

bool max30102_reset()
{
    353c:	b508      	push	{r3, lr}
    u16_t rslt = MAX3_OK;
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x40, 1);
    353e:	2140      	movs	r1, #64	; 0x40
    3540:	2009      	movs	r0, #9
    3542:	f7ff ffbd 	bl	34c0 <max30102_i2c_write.constprop.0>
    if (rslt == MAX3_OK)
    3546:	b920      	cbnz	r0, 3552 <max30102_reset+0x16>
    {
        printk("RESET MAX30102 : OK \n ");
    3548:	4804      	ldr	r0, [pc, #16]	; (355c <max30102_reset+0x20>)
    354a:	f01e faeb 	bl	21b24 <printk>
        return true;
    354e:	2001      	movs	r0, #1
    else
    {
        printk("RESET MAX30102 : FAILED !!!\n ");
        return false;
    }
}
    3550:	bd08      	pop	{r3, pc}
        printk("RESET MAX30102 : FAILED !!!\n ");
    3552:	4803      	ldr	r0, [pc, #12]	; (3560 <max30102_reset+0x24>)
    3554:	f01e fae6 	bl	21b24 <printk>
        return false;
    3558:	2000      	movs	r0, #0
    355a:	e7f9      	b.n	3550 <max30102_reset+0x14>
    355c:	0002afd7 	.word	0x0002afd7
    3560:	0002afee 	.word	0x0002afee

00003564 <init_max30102>:

u16_t init_max30102()
{
    3564:	b513      	push	{r0, r1, r4, lr}
    max30102_reset();
    3566:	f7ff ffe9 	bl	353c <max30102_reset>
    356a:	2100      	movs	r1, #0
    356c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
    3570:	f01c ff58 	bl	20424 <z_impl_k_sleep>
    k_msleep(1000);
    u8_t dummyData;
    max30102_i2c_read(0x00, &dummyData, 1);
    3574:	f10d 0106 	add.w	r1, sp, #6
    3578:	2000      	movs	r0, #0
    357a:	f7ff ffbd 	bl	34f8 <max30102_i2c_read.constprop.0>
    u8_t chipId;
    u16_t rslt = 0x00;
    rslt = max30102_i2c_read(MAX30102_PART_ID, &chipId, 1);
    357e:	f10d 0107 	add.w	r1, sp, #7
    3582:	20ff      	movs	r0, #255	; 0xff
    3584:	f7ff ffb8 	bl	34f8 <max30102_i2c_read.constprop.0>
    if (rslt == MAX3_OK)
    3588:	4604      	mov	r4, r0
    358a:	b950      	cbnz	r0, 35a2 <init_max30102+0x3e>
    {
        if (chipId == I_AM_MAX30102)
    358c:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3590:	2b15      	cmp	r3, #21
        {
            printk("Communication with MAX30102 : OK\n");
    3592:	bf0c      	ite	eq
    3594:	4804      	ldreq	r0, [pc, #16]	; (35a8 <init_max30102+0x44>)
        }
        else
        {
            printk("Communication with MAX30102 : FAILED!!!\n");
    3596:	4805      	ldrne	r0, [pc, #20]	; (35ac <init_max30102+0x48>)
        }
    }
    else
    {
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    3598:	f01e fac4 	bl	21b24 <printk>
    }
    return rslt;
}
    359c:	4620      	mov	r0, r4
    359e:	b002      	add	sp, #8
    35a0:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30102 : FAILED!!!\n I2C error\n");
    35a2:	4803      	ldr	r0, [pc, #12]	; (35b0 <init_max30102+0x4c>)
    35a4:	e7f8      	b.n	3598 <init_max30102+0x34>
    35a6:	bf00      	nop
    35a8:	0002b00c 	.word	0x0002b00c
    35ac:	0002b02e 	.word	0x0002b02e
    35b0:	0002b057 	.word	0x0002b057

000035b4 <max30102_read_fifo>:
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
    return (rslt);
}

u16_t max30102_read_fifo(uint32_t *pun_red_led, uint32_t *pun_ir_led)
{
    35b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    35b8:	b090      	sub	sp, #64	; 0x40
    u16_t rslt = MAX3_OK;
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    35ba:	2218      	movs	r2, #24
{
    35bc:	4606      	mov	r6, r0
    35be:	460d      	mov	r5, r1
    u32_t temp_dat[6] = {0, 0, 0, 0, 0, 0};
    35c0:	a804      	add	r0, sp, #16
    35c2:	2100      	movs	r1, #0
    35c4:	f020 ff7b 	bl	244be <memset>
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    35c8:	4b27      	ldr	r3, [pc, #156]	; (3668 <max30102_read_fifo+0xb4>)
    *pun_ir_led = 0;
    35ca:	2400      	movs	r4, #0
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    35cc:	6818      	ldr	r0, [r3, #0]
    35ce:	9002      	str	r0, [sp, #8]
    35d0:	889b      	ldrh	r3, [r3, #4]
    *pun_ir_led = 0;
    35d2:	602c      	str	r4, [r5, #0]
    *pun_red_led = 0;
    u8_t temp1;
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    35d4:	f10d 0106 	add.w	r1, sp, #6
    *pun_red_led = 0;
    35d8:	6034      	str	r4, [r6, #0]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    35da:	2004      	movs	r0, #4
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    35dc:	f8ad 300c 	strh.w	r3, [sp, #12]
    max30102_i2c_read(MAX30102_FIFO_W_POINTER, &temp1, 1);
    35e0:	f7ff ff8a 	bl	34f8 <max30102_i2c_read.constprop.0>
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    35e4:	f10d 0106 	add.w	r1, sp, #6
    35e8:	2006      	movs	r0, #6
    u8_t temp_dat1[6] = {0, 0, 0, 0, 0, 0};
    35ea:	af02      	add	r7, sp, #8
    max30102_i2c_read(MAX30102_FIFO_R_POINTER, &temp1, 1);
    35ec:	f7ff ff84 	bl	34f8 <max30102_i2c_read.constprop.0>
    35f0:	481e      	ldr	r0, [pc, #120]	; (366c <max30102_read_fifo+0xb8>)
    35f2:	f01c f8a1 	bl	1f738 <z_impl_device_get_binding>
static inline int i2c_burst_read(const struct device *dev,
    35f6:	2207      	movs	r2, #7
	msg[0].buf = (uint8_t *)write_buf;
    35f8:	eb0d 0102 	add.w	r1, sp, r2
    35fc:	910a      	str	r1, [sp, #40]	; 0x28
	msg[0].len = num_write;
    35fe:	2101      	movs	r1, #1
    3600:	910b      	str	r1, [sp, #44]	; 0x2c
	msg[1].len = num_read;
    3602:	2106      	movs	r1, #6
    3604:	f88d 2007 	strb.w	r2, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3608:	f88d 4030 	strb.w	r4, [sp, #48]	; 0x30
	msg[1].buf = (uint8_t *)read_buf;
    360c:	970d      	str	r7, [sp, #52]	; 0x34
	msg[1].len = num_read;
    360e:	910e      	str	r1, [sp, #56]	; 0x38
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3610:	f88d 203c 	strb.w	r2, [sp, #60]	; 0x3c
	return api->transfer(dev, msgs, num_msgs, addr);
    3614:	6883      	ldr	r3, [r0, #8]
    3616:	2202      	movs	r2, #2
    3618:	f8d3 8004 	ldr.w	r8, [r3, #4]
    361c:	a90a      	add	r1, sp, #40	; 0x28
    361e:	2357      	movs	r3, #87	; 0x57
    3620:	47c0      	blx	r8
    max30102_i2c_read_fifo(MAX30102_FIFO_DATA_REG, temp_dat1, 6);
    for (int i = 0; i < 6; i++)
    3622:	ab04      	add	r3, sp, #16
    3624:	3401      	adds	r4, #1
        temp_dat[i] = temp_dat1[i];
    3626:	f817 2b01 	ldrb.w	r2, [r7], #1
    362a:	f843 2b04 	str.w	r2, [r3], #4
    for (int i = 0; i < 6; i++)
    362e:	2c06      	cmp	r4, #6
    3630:	d1f8      	bne.n	3624 <max30102_read_fifo+0x70>
    *pun_ir_led = (temp_dat[0] << 16) + (temp_dat[1] << 8) + temp_dat[2];
    3632:	9b05      	ldr	r3, [sp, #20]
    3634:	9a04      	ldr	r2, [sp, #16]
    3636:	021b      	lsls	r3, r3, #8
    3638:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    363c:	9a06      	ldr	r2, [sp, #24]
    363e:	4413      	add	r3, r2
    3640:	602b      	str	r3, [r5, #0]
    *pun_red_led = (temp_dat[3] << 16) + (temp_dat[4] << 8) + temp_dat[5];
    3642:	9b08      	ldr	r3, [sp, #32]
    3644:	9a07      	ldr	r2, [sp, #28]
    3646:	021b      	lsls	r3, r3, #8
    3648:	eb03 4302 	add.w	r3, r3, r2, lsl #16
    364c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    364e:	4413      	add	r3, r2
    *pun_red_led &= 0x03FFFF; //Mask MSB [23:18]
    3650:	f3c3 0311 	ubfx	r3, r3, #0, #18
    3654:	6033      	str	r3, [r6, #0]
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    3656:	682b      	ldr	r3, [r5, #0]
    return rslt;
}
    3658:	2000      	movs	r0, #0
    *pun_ir_led &= 0x03FFFF;  //Mask MSB [23:18]
    365a:	f3c3 0311 	ubfx	r3, r3, #0, #18
    365e:	602b      	str	r3, [r5, #0]
}
    3660:	b010      	add	sp, #64	; 0x40
    3662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3666:	bf00      	nop
    3668:	00027afe 	.word	0x00027afe
    366c:	0002958f 	.word	0x0002958f

00003670 <first_data_read>:
int8_t ch_hr_valid;                   //indicator to show if the heart rate calculation is valid

uint32_t un_min, un_max, un_prev_data;

void first_data_read()
{
    3670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    un_min = 0x3FFFF;
    3674:	4f23      	ldr	r7, [pc, #140]	; (3704 <first_data_read+0x94>)
    3676:	4b24      	ldr	r3, [pc, #144]	; (3708 <first_data_read+0x98>)
    un_max = 0;
    3678:	f8df b090 	ldr.w	fp, [pc, #144]	; 370c <first_data_read+0x9c>
    n_ir_buffer_length = BUFFER_SIZE; //*
    367c:	f8df 8090 	ldr.w	r8, [pc, #144]	; 3710 <first_data_read+0xa0>
    3680:	4d24      	ldr	r5, [pc, #144]	; (3714 <first_data_read+0xa4>)
    un_min = 0x3FFFF;
    3682:	603b      	str	r3, [r7, #0]
    un_max = 0;
    3684:	2400      	movs	r4, #0
    n_ir_buffer_length = BUFFER_SIZE; //*
    3686:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    368a:	4e23      	ldr	r6, [pc, #140]	; (3718 <first_data_read+0xa8>)
    un_max = 0;
    368c:	f8cb 4000 	str.w	r4, [fp]
{
    3690:	b087      	sub	sp, #28
    n_ir_buffer_length = BUFFER_SIZE; //*
    3692:	f8c8 3000 	str.w	r3, [r8]
    int i = 0;
    for (i = 0; i < n_ir_buffer_length; i++)
    3696:	46a9      	mov	r9, r5
    {
        u8_t data = 0;
    3698:	46a2      	mov	sl, r4
    for (i = 0; i < n_ir_buffer_length; i++)
    369a:	f8d8 1000 	ldr.w	r1, [r8]
    369e:	42a1      	cmp	r1, r4
    36a0:	dc11      	bgt.n	36c6 <first_data_read+0x56>
        // printf("red=");
        // printf("%d", aun_red_buffer[i]);
        // printf(",ir=");
        // printf("%d\n\r", aun_ir_buffer[i]);
    }
    un_prev_data = aun_red_buffer[i];
    36a2:	4b1e      	ldr	r3, [pc, #120]	; (371c <first_data_read+0xac>)
    36a4:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
    36a8:	601a      	str	r2, [r3, #0]
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    36aa:	4b1d      	ldr	r3, [pc, #116]	; (3720 <first_data_read+0xb0>)
    36ac:	9302      	str	r3, [sp, #8]
    36ae:	4b1d      	ldr	r3, [pc, #116]	; (3724 <first_data_read+0xb4>)
    36b0:	9301      	str	r3, [sp, #4]
    36b2:	4b1d      	ldr	r3, [pc, #116]	; (3728 <first_data_read+0xb8>)
    36b4:	9300      	str	r3, [sp, #0]
    36b6:	4a17      	ldr	r2, [pc, #92]	; (3714 <first_data_read+0xa4>)
    36b8:	4b1c      	ldr	r3, [pc, #112]	; (372c <first_data_read+0xbc>)
    36ba:	4817      	ldr	r0, [pc, #92]	; (3718 <first_data_read+0xa8>)
    36bc:	f000 fa36 	bl	3b2c <maxim_heart_rate_and_oxygen_saturation>
}
    36c0:	b007      	add	sp, #28
    36c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        u8_t data = 0;
    36c6:	f88d a017 	strb.w	sl, [sp, #23]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    36ca:	f10d 0117 	add.w	r1, sp, #23
    36ce:	2000      	movs	r0, #0
    36d0:	f7ff ff12 	bl	34f8 <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    36d4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    36d8:	2b40      	cmp	r3, #64	; 0x40
    36da:	d1f6      	bne.n	36ca <first_data_read+0x5a>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i)); //read from MAX30102 FIFO
    36dc:	4631      	mov	r1, r6
    36de:	4628      	mov	r0, r5
    36e0:	f7ff ff68 	bl	35b4 <max30102_read_fifo>
        if (un_min > aun_red_buffer[i])
    36e4:	f855 3b04 	ldr.w	r3, [r5], #4
    36e8:	683a      	ldr	r2, [r7, #0]
    36ea:	4293      	cmp	r3, r2
        if (un_max < aun_red_buffer[i])
    36ec:	f8db 2000 	ldr.w	r2, [fp]
            un_min = aun_red_buffer[i]; //update signal min
    36f0:	bf38      	it	cc
    36f2:	603b      	strcc	r3, [r7, #0]
        if (un_max < aun_red_buffer[i])
    36f4:	4293      	cmp	r3, r2
            un_max = aun_red_buffer[i]; //update signal max
    36f6:	bf88      	it	hi
    36f8:	f8cb 3000 	strhi.w	r3, [fp]
    for (i = 0; i < n_ir_buffer_length; i++)
    36fc:	3401      	adds	r4, #1
    36fe:	3604      	adds	r6, #4
    3700:	e7cb      	b.n	369a <first_data_read+0x2a>
    3702:	bf00      	nop
    3704:	2000bd54 	.word	0x2000bd54
    3708:	0003ffff 	.word	0x0003ffff
    370c:	2000bd50 	.word	0x2000bd50
    3710:	2000bd48 	.word	0x2000bd48
    3714:	2000b574 	.word	0x2000b574
    3718:	2000ada4 	.word	0x2000ada4
    371c:	2000bd58 	.word	0x2000bd58
    3720:	2000ed7f 	.word	0x2000ed7f
    3724:	2000bd44 	.word	0x2000bd44
    3728:	2000ed80 	.word	0x2000ed80
    372c:	2000bd4c 	.word	0x2000bd4c

00003730 <read_heart_rate_spio2>:

void read_heart_rate_spio2(int *rate, int *spo2, bool *valid_hr, bool *valid_spo2)
{
    3730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    int i = 0;
    un_min = 0x3FFFF;
    3734:	4d3f      	ldr	r5, [pc, #252]	; (3834 <read_heart_rate_spio2+0x104>)
    3736:	f8df 9100 	ldr.w	r9, [pc, #256]	; 3838 <read_heart_rate_spio2+0x108>
    373a:	f8df c100 	ldr.w	ip, [pc, #256]	; 383c <read_heart_rate_spio2+0x10c>
{
    373e:	b089      	sub	sp, #36	; 0x24
    3740:	460e      	mov	r6, r1
    un_max = 0;
    3742:	493f      	ldr	r1, [pc, #252]	; (3840 <read_heart_rate_spio2+0x110>)
{
    3744:	e9cd 2304 	strd	r2, r3, [sp, #16]
    un_max = 0;
    3748:	2300      	movs	r3, #0
    un_min = 0x3FFFF;
    374a:	4a3e      	ldr	r2, [pc, #248]	; (3844 <read_heart_rate_spio2+0x114>)
    374c:	602a      	str	r2, [r5, #0]
{
    374e:	4607      	mov	r7, r0
    un_max = 0;
    3750:	600b      	str	r3, [r1, #0]
    3752:	46ce      	mov	lr, r9
    3754:	f44f 74f5 	mov.w	r4, #490	; 0x1ea
    3758:	4618      	mov	r0, r3
    375a:	469a      	mov	sl, r3

    //dumping the first 100 sets of samples in the memory and shift the last 400 sets of samples to the top
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    {
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    375c:	f8dc 1028 	ldr.w	r1, [ip, #40]	; 0x28
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    3760:	f8de 8028 	ldr.w	r8, [lr, #40]	; 0x28
        aun_red_buffer[i - DUMP_SAMPLES] = aun_red_buffer[i];
    3764:	f84c 1b04 	str.w	r1, [ip], #4

        //update the signal min and max
        if (un_min > aun_red_buffer[i])
    3768:	4291      	cmp	r1, r2
    376a:	bf3c      	itt	cc
    376c:	460a      	movcc	r2, r1
    376e:	f04f 0a01 	movcc.w	sl, #1
            un_min = aun_red_buffer[i];
        if (un_max < aun_red_buffer[i])
    3772:	4281      	cmp	r1, r0
    3774:	bf84      	itt	hi
    3776:	4608      	movhi	r0, r1
    3778:	2301      	movhi	r3, #1
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    377a:	3c01      	subs	r4, #1
        aun_ir_buffer[i - DUMP_SAMPLES] = aun_ir_buffer[i];
    377c:	f84e 8b04 	str.w	r8, [lr], #4
    for (i = DUMP_SAMPLES; i < BUFFER_SIZE; i++)
    3780:	d1ec      	bne.n	375c <read_heart_rate_spio2+0x2c>
    3782:	f1ba 0f00 	cmp.w	sl, #0
    3786:	d000      	beq.n	378a <read_heart_rate_spio2+0x5a>
    3788:	602a      	str	r2, [r5, #0]
    378a:	b10b      	cbz	r3, 3790 <read_heart_rate_spio2+0x60>
    378c:	4b2c      	ldr	r3, [pc, #176]	; (3840 <read_heart_rate_spio2+0x110>)
    378e:	6018      	str	r0, [r3, #0]
    3790:	f8df 80b4 	ldr.w	r8, [pc, #180]	; 3848 <read_heart_rate_spio2+0x118>
    }

    //take 100 sets of samples before calculating the heart rate.
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    {
        un_prev_data = aun_red_buffer[i - 1];
    3794:	f8df a0b4 	ldr.w	sl, [pc, #180]	; 384c <read_heart_rate_spio2+0x11c>
        // printf("%d", aun_ir_buffer[i]);
        // printf(", HR=%d, ", n_heart_rate);
        // printf("HRvalid=%d, ", ch_hr_valid);
        // printf("SpO2=%d, ", n_sp02);
        // printf("SPO2Valid=%d\n\r", ch_spo2_valid);
        *rate = n_heart_rate;
    3798:	4d2d      	ldr	r5, [pc, #180]	; (3850 <read_heart_rate_spio2+0x120>)
    379a:	f44f 64f5 	mov.w	r4, #1960	; 0x7a8
        u8_t data = 0;
    379e:	f04f 0b00 	mov.w	fp, #0
        un_prev_data = aun_red_buffer[i - 1];
    37a2:	f858 3b04 	ldr.w	r3, [r8], #4
    37a6:	f8ca 3000 	str.w	r3, [sl]
        u8_t data = 0;
    37aa:	f88d b01f 	strb.w	fp, [sp, #31]
            max30102_i2c_read(MAX30102_INT1_STATUS, &data, 1);
    37ae:	f10d 011f 	add.w	r1, sp, #31
    37b2:	2000      	movs	r0, #0
    37b4:	f7ff fea0 	bl	34f8 <max30102_i2c_read.constprop.0>
        while (data != 0x40)
    37b8:	f89d 301f 	ldrb.w	r3, [sp, #31]
    37bc:	2b40      	cmp	r3, #64	; 0x40
    37be:	d1f6      	bne.n	37ae <read_heart_rate_spio2+0x7e>
        max30102_i2c_read(MAX30102_FIFO_W_POINTER, &data, 1);
    37c0:	f10d 011f 	add.w	r1, sp, #31
    37c4:	2004      	movs	r0, #4
    37c6:	f7ff fe97 	bl	34f8 <max30102_i2c_read.constprop.0>
        max30102_i2c_read(MAX30102_FIFO_R_POINTER, &data, 1);
    37ca:	f10d 011f 	add.w	r1, sp, #31
    37ce:	2006      	movs	r0, #6
    37d0:	f7ff fe92 	bl	34f8 <max30102_i2c_read.constprop.0>
        max30102_read_fifo((aun_red_buffer + i), (aun_ir_buffer + i));
    37d4:	eb09 0104 	add.w	r1, r9, r4
    37d8:	4640      	mov	r0, r8
    37da:	f7ff feeb 	bl	35b4 <max30102_read_fifo>
        *rate = n_heart_rate;
    37de:	682b      	ldr	r3, [r5, #0]
    37e0:	603b      	str	r3, [r7, #0]
        *spo2 = n_sp02;
    37e2:	4b1c      	ldr	r3, [pc, #112]	; (3854 <read_heart_rate_spio2+0x124>)
        if (ch_hr_valid == 1)
    37e4:	491c      	ldr	r1, [pc, #112]	; (3858 <read_heart_rate_spio2+0x128>)
        *spo2 = n_sp02;
    37e6:	681a      	ldr	r2, [r3, #0]
    37e8:	6032      	str	r2, [r6, #0]
        if (ch_hr_valid == 1)
    37ea:	f991 2000 	ldrsb.w	r2, [r1]
    37ee:	1e50      	subs	r0, r2, #1
    37f0:	4242      	negs	r2, r0
    37f2:	4142      	adcs	r2, r0
    37f4:	9804      	ldr	r0, [sp, #16]
    37f6:	7002      	strb	r2, [r0, #0]
            *valid_hr = true;
        else
            *valid_hr = false;
        if (ch_spo2_valid == 1)
    37f8:	4818      	ldr	r0, [pc, #96]	; (385c <read_heart_rate_spio2+0x12c>)
    37fa:	f990 2000 	ldrsb.w	r2, [r0]
    37fe:	f102 3cff 	add.w	ip, r2, #4294967295
    3802:	f1dc 0200 	rsbs	r2, ip, #0
    3806:	eb42 020c 	adc.w	r2, r2, ip
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    380a:	3404      	adds	r4, #4
        if (ch_spo2_valid == 1)
    380c:	f8dd c014 	ldr.w	ip, [sp, #20]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    3810:	f5b4 6ffa 	cmp.w	r4, #2000	; 0x7d0
        if (ch_spo2_valid == 1)
    3814:	f88c 2000 	strb.w	r2, [ip]
    for (i = (BUFFER_SIZE - DUMP_SAMPLES); i < BUFFER_SIZE; i++)
    3818:	d1c3      	bne.n	37a2 <read_heart_rate_spio2+0x72>
            *valid_spo2 = true;
        else
            *valid_spo2 = false;
    }
    maxim_heart_rate_and_oxygen_saturation(aun_ir_buffer, n_ir_buffer_length, aun_red_buffer, &n_sp02, &ch_spo2_valid, &n_heart_rate, &ch_hr_valid);
    381a:	e9cd 5101 	strd	r5, r1, [sp, #4]
    381e:	4910      	ldr	r1, [pc, #64]	; (3860 <read_heart_rate_spio2+0x130>)
    3820:	9000      	str	r0, [sp, #0]
    3822:	4a06      	ldr	r2, [pc, #24]	; (383c <read_heart_rate_spio2+0x10c>)
    3824:	6809      	ldr	r1, [r1, #0]
    3826:	4804      	ldr	r0, [pc, #16]	; (3838 <read_heart_rate_spio2+0x108>)
    3828:	f000 f980 	bl	3b2c <maxim_heart_rate_and_oxygen_saturation>
    382c:	b009      	add	sp, #36	; 0x24
    382e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3832:	bf00      	nop
    3834:	2000bd54 	.word	0x2000bd54
    3838:	2000ada4 	.word	0x2000ada4
    383c:	2000b574 	.word	0x2000b574
    3840:	2000bd50 	.word	0x2000bd50
    3844:	0003ffff 	.word	0x0003ffff
    3848:	2000bd18 	.word	0x2000bd18
    384c:	2000bd58 	.word	0x2000bd58
    3850:	2000bd44 	.word	0x2000bd44
    3854:	2000bd4c 	.word	0x2000bd4c
    3858:	2000ed7f 	.word	0x2000ed7f
    385c:	2000ed80 	.word	0x2000ed80
    3860:	2000bd48 	.word	0x2000bd48

00003864 <button_pressed>:
static struct gpio_callback button_cb_data;

void button_pressed(struct device *dev, struct gpio_callback *cb,
                    u32_t pins)
{
    printk("Device Detached\n");
    3864:	4801      	ldr	r0, [pc, #4]	; (386c <button_pressed+0x8>)
    3866:	f01e b95d 	b.w	21b24 <printk>
    386a:	bf00      	nop
    386c:	0002b08b 	.word	0x0002b08b

00003870 <init_latch>:

struct device *globalButton;
struct device *globalLed;

void init_latch()
{
    3870:	b570      	push	{r4, r5, r6, lr}
    3872:	4828      	ldr	r0, [pc, #160]	; (3914 <init_latch+0xa4>)
    3874:	f01b ff60 	bl	1f738 <z_impl_device_get_binding>
    struct device *button;
    struct device *led;
    int ret;

    button = device_get_binding(SW0_GPIO_LABEL);
    if (button == NULL)
    3878:	4604      	mov	r4, r0
    387a:	b928      	cbnz	r0, 3888 <init_latch+0x18>

    led = initialize_led();
    globalButton=button;
    globalLed=led;

}
    387c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error: didn't find %s device\n", SW0_GPIO_LABEL);
    3880:	4924      	ldr	r1, [pc, #144]	; (3914 <init_latch+0xa4>)
    3882:	4825      	ldr	r0, [pc, #148]	; (3918 <init_latch+0xa8>)
    3884:	f01e b94e 	b.w	21b24 <printk>
    ret = gpio_pin_configure(button, SW0_GPIO_PIN, SW0_GPIO_FLAGS);
    3888:	2107      	movs	r1, #7
    388a:	f240 1211 	movw	r2, #273	; 0x111
    388e:	f01d fe3c 	bl	2150a <gpio_pin_configure>
    if (ret != 0)
    3892:	4601      	mov	r1, r0
    3894:	b130      	cbz	r0, 38a4 <init_latch+0x34>
        printk("Error %d: failed to configure %s pin %d\n",
    3896:	4a1f      	ldr	r2, [pc, #124]	; (3914 <init_latch+0xa4>)
    3898:	4820      	ldr	r0, [pc, #128]	; (391c <init_latch+0xac>)
    389a:	2307      	movs	r3, #7
}
    389c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    38a0:	f01e b940 	b.w	21b24 <printk>
	}

	trig = (enum gpio_int_trig)(flags & (GPIO_INT_LOW_0 | GPIO_INT_HIGH_1));
	mode = (enum gpio_int_mode)(flags & (GPIO_INT_EDGE | GPIO_INT_DISABLE | GPIO_INT_ENABLE));

	return api->pin_interrupt_configure(port, pin, mode, trig);
    38a4:	68a3      	ldr	r3, [r4, #8]
    38a6:	2107      	movs	r1, #7
    38a8:	699d      	ldr	r5, [r3, #24]
    38aa:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
    38ae:	f44f 2380 	mov.w	r3, #262144	; 0x40000
    38b2:	4620      	mov	r0, r4
    38b4:	47a8      	blx	r5
    if (ret != 0)
    38b6:	4601      	mov	r1, r0
    38b8:	b118      	cbz	r0, 38c2 <init_latch+0x52>
        printk("Error %d: failed to configure interrupt on %s pin %d\n",
    38ba:	4a16      	ldr	r2, [pc, #88]	; (3914 <init_latch+0xa4>)
    38bc:	4818      	ldr	r0, [pc, #96]	; (3920 <init_latch+0xb0>)
    38be:	2307      	movs	r3, #7
    38c0:	e7ec      	b.n	389c <init_latch+0x2c>
				      gpio_port_pins_t pin_mask)
{
	__ASSERT(callback, "Callback pointer should not be NULL");
	__ASSERT(handler, "Callback handler pointer should not be NULL");

	callback->handler = handler;
    38c2:	4918      	ldr	r1, [pc, #96]	; (3924 <init_latch+0xb4>)
    38c4:	4b18      	ldr	r3, [pc, #96]	; (3928 <init_latch+0xb8>)
    38c6:	604b      	str	r3, [r1, #4]
	callback->pin_mask = pin_mask;
    38c8:	2380      	movs	r3, #128	; 0x80
    38ca:	608b      	str	r3, [r1, #8]
				    struct gpio_callback *callback)
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;

	if (api->manage_callback == NULL) {
    38cc:	68a3      	ldr	r3, [r4, #8]
    38ce:	69db      	ldr	r3, [r3, #28]
    38d0:	b113      	cbz	r3, 38d8 <init_latch+0x68>
		return -ENOTSUP;
	}

	return api->manage_callback(port, callback, true);
    38d2:	2201      	movs	r2, #1
    38d4:	4620      	mov	r0, r4
    38d6:	4798      	blx	r3
    38d8:	4814      	ldr	r0, [pc, #80]	; (392c <init_latch+0xbc>)
    38da:	f01b ff2d 	bl	1f738 <z_impl_device_get_binding>
{
    struct device *led;
    int ret;

    led = device_get_binding(LED0_GPIO_LABEL);
    if (led == NULL)
    38de:	4605      	mov	r5, r0
    38e0:	b940      	cbnz	r0, 38f4 <init_latch+0x84>
    {
        printk("Didn't find LED device %s\n", LED0_GPIO_LABEL);
    38e2:	4912      	ldr	r1, [pc, #72]	; (392c <init_latch+0xbc>)
    38e4:	4812      	ldr	r0, [pc, #72]	; (3930 <init_latch+0xc0>)
    38e6:	f01e f91d 	bl	21b24 <printk>
    globalButton=button;
    38ea:	4b12      	ldr	r3, [pc, #72]	; (3934 <init_latch+0xc4>)
    38ec:	601c      	str	r4, [r3, #0]
    globalLed=led;
    38ee:	4b12      	ldr	r3, [pc, #72]	; (3938 <init_latch+0xc8>)
    38f0:	601d      	str	r5, [r3, #0]
}
    38f2:	bd70      	pop	{r4, r5, r6, pc}
        return NULL;
    }

    ret = gpio_pin_configure(led, LED0_GPIO_PIN, LED0_GPIO_FLAGS);
    38f4:	210a      	movs	r1, #10
    38f6:	f44f 7200 	mov.w	r2, #512	; 0x200
    38fa:	f01d fe06 	bl	2150a <gpio_pin_configure>
    if (ret != 0)
    38fe:	4601      	mov	r1, r0
    3900:	2800      	cmp	r0, #0
    3902:	d0f2      	beq.n	38ea <init_latch+0x7a>
    {
        printk("Error %d: failed to configure LED device %s pin %d\n",
    3904:	4a09      	ldr	r2, [pc, #36]	; (392c <init_latch+0xbc>)
    3906:	480d      	ldr	r0, [pc, #52]	; (393c <init_latch+0xcc>)
    3908:	230a      	movs	r3, #10
    390a:	f01e f90b 	bl	21b24 <printk>
               ret, LED0_GPIO_LABEL, LED0_GPIO_PIN);
        return NULL;
    390e:	2500      	movs	r5, #0
    3910:	e7eb      	b.n	38ea <init_latch+0x7a>
    3912:	bf00      	nop
    3914:	0002b09c 	.word	0x0002b09c
    3918:	0002b0a3 	.word	0x0002b0a3
    391c:	0002b0c1 	.word	0x0002b0c1
    3920:	0002b0ea 	.word	0x0002b0ea
    3924:	2000bd5c 	.word	0x2000bd5c
    3928:	00003865 	.word	0x00003865
    392c:	0002b120 	.word	0x0002b120
    3930:	0002b127 	.word	0x0002b127
    3934:	2000bd68 	.word	0x2000bd68
    3938:	2000bd6c 	.word	0x2000bd6c
    393c:	0002b142 	.word	0x0002b142

00003940 <detect_latch>:
    return match_led_to_button(globalButton,globalLed);
    3940:	4b02      	ldr	r3, [pc, #8]	; (394c <detect_latch+0xc>)
    3942:	6819      	ldr	r1, [r3, #0]
    3944:	4b02      	ldr	r3, [pc, #8]	; (3950 <detect_latch+0x10>)
    3946:	6818      	ldr	r0, [r3, #0]
    3948:	f01d bdf2 	b.w	21530 <match_led_to_button>
    394c:	2000bd6c 	.word	0x2000bd6c
    3950:	2000bd68 	.word	0x2000bd68

00003954 <max30208_i2c_write.constprop.0>:
static uint16_t max30208_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    3954:	b530      	push	{r4, r5, lr}
    3956:	4605      	mov	r5, r0
    3958:	b085      	sub	sp, #20
    395a:	460c      	mov	r4, r1
    395c:	480a      	ldr	r0, [pc, #40]	; (3988 <max30208_i2c_write.constprop.0+0x34>)
    395e:	f01b feeb 	bl	1f738 <z_impl_device_get_binding>
	msg.len = num_bytes;
    3962:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    3964:	f88d 5000 	strb.w	r5, [sp]
    ret = i2c_reg_write_byte(i2c_dev, slaveAddr, addr, data);
    3968:	f88d 4001 	strb.w	r4, [sp, #1]
	msg.buf = (uint8_t *)buf;
    396c:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    3970:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    3972:	f88d 300c 	strb.w	r3, [sp, #12]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke4(*(uintptr_t *)&dev, *(uintptr_t *)&msgs, *(uintptr_t *)&num_msgs, *(uintptr_t *)&addr, K_SYSCALL_I2C_TRANSFER);
	}
#endif
	compiler_barrier();
	return z_impl_i2c_transfer(dev, msgs, num_msgs, addr);
    3976:	2350      	movs	r3, #80	; 0x50
    3978:	2201      	movs	r2, #1
    397a:	a901      	add	r1, sp, #4
    397c:	f01d fdfb 	bl	21576 <z_impl_i2c_transfer>
}
    3980:	b2c0      	uxtb	r0, r0
    3982:	b005      	add	sp, #20
    3984:	bd30      	pop	{r4, r5, pc}
    3986:	bf00      	nop
    3988:	0002958f 	.word	0x0002958f

0000398c <max30208_i2c_read.constprop.0>:
static uint16_t max30208_i2c_read(u8_t reg, u8_t *data, u16_t len)
    398c:	b530      	push	{r4, r5, lr}
    398e:	4605      	mov	r5, r0
    3990:	b089      	sub	sp, #36	; 0x24
    3992:	460c      	mov	r4, r1
    3994:	480c      	ldr	r0, [pc, #48]	; (39c8 <max30208_i2c_read.constprop.0+0x3c>)
    3996:	f01b fecf 	bl	1f738 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    399a:	f10d 0307 	add.w	r3, sp, #7
    399e:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    39a0:	2301      	movs	r3, #1
	msg[1].len = num_read;
    39a2:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    39a6:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    39a8:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    39aa:	2307      	movs	r3, #7
    39ac:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    39b0:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    39b4:	f88d 301c 	strb.w	r3, [sp, #28]
    39b8:	2350      	movs	r3, #80	; 0x50
    39ba:	2202      	movs	r2, #2
    39bc:	a902      	add	r1, sp, #8
    39be:	f01d fdda 	bl	21576 <z_impl_i2c_transfer>
}
    39c2:	b2c0      	uxtb	r0, r0
    39c4:	b009      	add	sp, #36	; 0x24
    39c6:	bd30      	pop	{r4, r5, pc}
    39c8:	0002958f 	.word	0x0002958f

000039cc <mpu6050_i2c_write.constprop.0.isra.0>:



/* MPU6050 i2c write function */
static uint16_t mpu6050_i2c_write(uint8_t reg, uint8_t *data, uint16_t len)
    39cc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    39ce:	4604      	mov	r4, r0
    39d0:	480a      	ldr	r0, [pc, #40]	; (39fc <mpu6050_i2c_write.constprop.0.isra.0+0x30>)
    39d2:	f01b feb1 	bl	1f738 <z_impl_device_get_binding>
	uint8_t tx_buf[2] = {reg_addr, value};
    39d6:	2300      	movs	r3, #0
    39d8:	f88d 3001 	strb.w	r3, [sp, #1]
	msg.len = num_bytes;
    39dc:	2302      	movs	r3, #2
	uint8_t tx_buf[2] = {reg_addr, value};
    39de:	f88d 4000 	strb.w	r4, [sp]
	msg.buf = (uint8_t *)buf;
    39e2:	f8cd d004 	str.w	sp, [sp, #4]
	msg.len = num_bytes;
    39e6:	9302      	str	r3, [sp, #8]
	msg.flags = I2C_MSG_WRITE | I2C_MSG_STOP;
    39e8:	f88d 300c 	strb.w	r3, [sp, #12]
    39ec:	2368      	movs	r3, #104	; 0x68
    39ee:	2201      	movs	r2, #1
    39f0:	a901      	add	r1, sp, #4
    39f2:	f01d fdc0 	bl	21576 <z_impl_i2c_transfer>
	} else {
		printk("Wrote 0xAE to address 0x00.\n");
	}
    #endif
    return ret;
}
    39f6:	b004      	add	sp, #16
    39f8:	bd10      	pop	{r4, pc}
    39fa:	bf00      	nop
    39fc:	0002958f 	.word	0x0002958f

00003a00 <mpu6050_i2c_read.constprop.0>:

/* MPU6050 i2c read function */
static uint16_t mpu6050_i2c_read(u8_t reg, u8_t *data, u16_t len)
    3a00:	b530      	push	{r4, r5, lr}
    3a02:	4605      	mov	r5, r0
    3a04:	b089      	sub	sp, #36	; 0x24
    3a06:	460c      	mov	r4, r1
    3a08:	480c      	ldr	r0, [pc, #48]	; (3a3c <mpu6050_i2c_read.constprop.0+0x3c>)
    3a0a:	f01b fe95 	bl	1f738 <z_impl_device_get_binding>
	msg[0].buf = (uint8_t *)write_buf;
    3a0e:	f10d 0307 	add.w	r3, sp, #7
    3a12:	9302      	str	r3, [sp, #8]
	msg[0].len = num_write;
    3a14:	2301      	movs	r3, #1
	msg[1].len = num_read;
    3a16:	e9cd 4305 	strd	r4, r3, [sp, #20]
	msg[0].len = num_write;
    3a1a:	9303      	str	r3, [sp, #12]
	msg[0].flags = I2C_MSG_WRITE;
    3a1c:	2200      	movs	r2, #0
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3a1e:	2307      	movs	r3, #7
    3a20:	f88d 5007 	strb.w	r5, [sp, #7]
	msg[0].flags = I2C_MSG_WRITE;
    3a24:	f88d 2010 	strb.w	r2, [sp, #16]
	msg[1].flags = I2C_MSG_RESTART | I2C_MSG_READ | I2C_MSG_STOP;
    3a28:	f88d 301c 	strb.w	r3, [sp, #28]
    3a2c:	2368      	movs	r3, #104	; 0x68
    3a2e:	2202      	movs	r2, #2
    3a30:	a902      	add	r1, sp, #8
    3a32:	f01d fda0 	bl	21576 <z_impl_i2c_transfer>
	} else {
		printk("Read 0x%X from address %X.\n", *data, reg);
	}
    #endif
    return ret;
}
    3a36:	b2c0      	uxtb	r0, r0
    3a38:	b009      	add	sp, #36	; 0x24
    3a3a:	bd30      	pop	{r4, r5, pc}
    3a3c:	0002958f 	.word	0x0002958f

00003a40 <init_max30208>:
{
    3a40:	b513      	push	{r0, r1, r4, lr}
    rslt = max30208_i2c_read(MAX30208_PART_ID, &chipId, 1);
    3a42:	20ff      	movs	r0, #255	; 0xff
    3a44:	f10d 0107 	add.w	r1, sp, #7
    3a48:	f7ff ffa0 	bl	398c <max30208_i2c_read.constprop.0>
    if (rslt == MAX_OK)
    3a4c:	4604      	mov	r4, r0
    3a4e:	b950      	cbnz	r0, 3a66 <init_max30208+0x26>
        if (chipId == I_AM_MAX30208)
    3a50:	f89d 3007 	ldrb.w	r3, [sp, #7]
    3a54:	2b30      	cmp	r3, #48	; 0x30
            printk("Communication with MAX30208 : OK\n");
    3a56:	bf0c      	ite	eq
    3a58:	4805      	ldreq	r0, [pc, #20]	; (3a70 <init_max30208+0x30>)
            printk("Communication with MAX30208 : FAILED!!!\n");
    3a5a:	4806      	ldrne	r0, [pc, #24]	; (3a74 <init_max30208+0x34>)
    3a5c:	f01e f862 	bl	21b24 <printk>
}
    3a60:	4620      	mov	r0, r4
    3a62:	b002      	add	sp, #8
    3a64:	bd10      	pop	{r4, pc}
        printk("Communication with MAX30208 : FAILED!!!\n I2C error %d\n", rslt);
    3a66:	4601      	mov	r1, r0
    3a68:	4803      	ldr	r0, [pc, #12]	; (3a78 <init_max30208+0x38>)
    3a6a:	f01e f85b 	bl	21b24 <printk>
    3a6e:	e7f7      	b.n	3a60 <init_max30208+0x20>
    3a70:	0002b176 	.word	0x0002b176
    3a74:	0002b198 	.word	0x0002b198
    3a78:	0002b1c1 	.word	0x0002b1c1

00003a7c <configure_max30208>:
{
    3a7c:	b510      	push	{r4, lr}
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    3a7e:	2100      	movs	r1, #0
    3a80:	2001      	movs	r0, #1
    3a82:	f7ff ff67 	bl	3954 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3a86:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_INT_ENABLE, 0x00, 1);
    3a88:	4604      	mov	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3a8a:	2004      	movs	r0, #4
    3a8c:	f7ff ff62 	bl	3954 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3a90:	2100      	movs	r1, #0
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3a92:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3a94:	2005      	movs	r0, #5
    3a96:	f7ff ff5d 	bl	3954 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_W_POINTER, 0x00, 1);
    3a9a:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3a9c:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3a9e:	2100      	movs	r1, #0
    3aa0:	2006      	movs	r0, #6
    3aa2:	f7ff ff57 	bl	3954 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_R_POINTER, 0x00, 1);
    3aa6:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3aa8:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    3aaa:	210f      	movs	r1, #15
    3aac:	2009      	movs	r0, #9
    3aae:	f7ff ff51 	bl	3954 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_OVR_COUNTER, 0x00, 1);
    3ab2:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    3ab4:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    3ab6:	211a      	movs	r1, #26
    3ab8:	200a      	movs	r0, #10
    3aba:	f7ff ff4b 	bl	3954 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_1, 0x0F, 1);
    3abe:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    3ac0:	4304      	orrs	r4, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    3ac2:	21c1      	movs	r1, #193	; 0xc1
    3ac4:	2014      	movs	r0, #20
    3ac6:	f7ff ff45 	bl	3954 <max30208_i2c_write.constprop.0>
    rslt |= max30208_i2c_write(MAX30208_FIFO_CONFIG_2, 0x1A, 1);
    3aca:	b2a4      	uxth	r4, r4
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
    3acc:	4304      	orrs	r4, r0
    3ace:	b2a4      	uxth	r4, r4
    if (rslt == MAX_OK)
    3ad0:	b924      	cbnz	r4, 3adc <configure_max30208+0x60>
        printk("CONFIGURING MAX30208 : OK\n");
    3ad2:	4803      	ldr	r0, [pc, #12]	; (3ae0 <configure_max30208+0x64>)
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    3ad4:	f01e f826 	bl	21b24 <printk>
}
    3ad8:	4620      	mov	r0, r4
    3ada:	bd10      	pop	{r4, pc}
        printk("CONFIGURING MAX30208 : FAILED!!!\n");
    3adc:	4801      	ldr	r0, [pc, #4]	; (3ae4 <configure_max30208+0x68>)
    3ade:	e7f9      	b.n	3ad4 <configure_max30208+0x58>
    3ae0:	0002b1f8 	.word	0x0002b1f8
    3ae4:	0002b213 	.word	0x0002b213

00003ae8 <configure_mpu6050>:

/*** Config MPU6050 ***/
void configure_mpu6050()
{
    3ae8:	b507      	push	{r0, r1, r2, lr}
    int rslt;
	mpu6050_i2c_write(0x6B, 0x00, 1);	//Setting power
    3aea:	206b      	movs	r0, #107	; 0x6b
    3aec:	f7ff ff6e 	bl	39cc <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x1B, 0x00, 1);	//Setting Gyro
    3af0:	201b      	movs	r0, #27
    3af2:	f7ff ff6b 	bl	39cc <mpu6050_i2c_write.constprop.0.isra.0>
	mpu6050_i2c_write(0x38, 0x00, 1);	//Setting Accl
    3af6:	2038      	movs	r0, #56	; 0x38
    3af8:	f7ff ff68 	bl	39cc <mpu6050_i2c_write.constprop.0.isra.0>
    
    mpu6050_i2c_read(0x75, &rslt, 1);   //Reading Who_AM_I register of MPU6050 
    3afc:	a901      	add	r1, sp, #4
    3afe:	2075      	movs	r0, #117	; 0x75
    3b00:	f7ff ff7e 	bl	3a00 <mpu6050_i2c_read.constprop.0>
    if(rslt == 0x68)
    3b04:	9b01      	ldr	r3, [sp, #4]
    3b06:	2b68      	cmp	r3, #104	; 0x68
        printk("CONFIGURING MPU6050 : OK\n");
    3b08:	bf0c      	ite	eq
    3b0a:	4803      	ldreq	r0, [pc, #12]	; (3b18 <configure_mpu6050+0x30>)
    else
      printk("CONFIGURING MPU6050 : FAILED !!!\n");  
    3b0c:	4803      	ldrne	r0, [pc, #12]	; (3b1c <configure_mpu6050+0x34>)
    3b0e:	f01e f809 	bl	21b24 <printk>
}
    3b12:	b003      	add	sp, #12
    3b14:	f85d fb04 	ldr.w	pc, [sp], #4
    3b18:	0002b235 	.word	0x0002b235
    3b1c:	0002b24f 	.word	0x0002b24f

00003b20 <getAdcDevice>:
    3b20:	4801      	ldr	r0, [pc, #4]	; (3b28 <getAdcDevice+0x8>)
    3b22:	f01b be09 	b.w	1f738 <z_impl_device_get_binding>
    3b26:	bf00      	nop
    3b28:	0002b271 	.word	0x0002b271

00003b2c <maxim_heart_rate_and_oxygen_saturation>:
* \param[out]    *pn_heart_rate          - Calculated heart rate value
* \param[out]    *pch_hr_valid           - 1 if the calculated heart rate value is valid
*
* \retval       None
*/
{
    3b2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b30:	b0bd      	sub	sp, #244	; 0xf4
    3b32:	4690      	mov	r8, r2
    int32_t n_y_dc_max_idx, n_x_dc_max_idx;
    int32_t an_ratio[5], n_ratio_average;
    int32_t n_nume, n_denom;
    // remove DC of ir signal
    un_ir_mean = 0;
    for (k = 0; k < n_ir_buffer_length; k++)
    3b34:	2200      	movs	r2, #0
{
    3b36:	9305      	str	r3, [sp, #20]
    3b38:	4606      	mov	r6, r0
    3b3a:	460d      	mov	r5, r1
    un_ir_mean = 0;
    3b3c:	4613      	mov	r3, r2
    for (k = 0; k < n_ir_buffer_length; k++)
    3b3e:	42aa      	cmp	r2, r5
    3b40:	db45      	blt.n	3bce <maxim_heart_rate_and_oxygen_saturation+0xa2>
        un_ir_mean += pun_ir_buffer[k];
    un_ir_mean = un_ir_mean / n_ir_buffer_length;
    3b42:	fbb3 f3f5 	udiv	r3, r3, r5
    for (k = 0; k < n_ir_buffer_length; k++)
    3b46:	4c9b      	ldr	r4, [pc, #620]	; (3db4 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    3b48:	2200      	movs	r2, #0
    3b4a:	4620      	mov	r0, r4
    3b4c:	42aa      	cmp	r2, r5
    3b4e:	db43      	blt.n	3bd8 <maxim_heart_rate_and_oxygen_saturation+0xac>
    3b50:	4a98      	ldr	r2, [pc, #608]	; (3db4 <maxim_heart_rate_and_oxygen_saturation+0x288>)
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;

    // 4 pt Moving Average
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3b52:	2100      	movs	r1, #0
    {
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    3b54:	6817      	ldr	r7, [r2, #0]
    3b56:	f852 3f04 	ldr.w	r3, [r2, #4]!
    3b5a:	6850      	ldr	r0, [r2, #4]
    3b5c:	4403      	add	r3, r0
    3b5e:	6890      	ldr	r0, [r2, #8]
    3b60:	443b      	add	r3, r7
        an_x[k] = n_denom / (int32_t)4;
    3b62:	181b      	adds	r3, r3, r0
    3b64:	bf48      	it	mi
    3b66:	3303      	addmi	r3, #3
        n_denom = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]);
    3b68:	3101      	adds	r1, #1
        an_x[k] = n_denom / (int32_t)4;
    3b6a:	109b      	asrs	r3, r3, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3b6c:	f5b1 7ff8 	cmp.w	r1, #496	; 0x1f0
        an_x[k] = n_denom / (int32_t)4;
    3b70:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3b74:	d1ee      	bne.n	3b54 <maxim_heart_rate_and_oxygen_saturation+0x28>
    3b76:	4890      	ldr	r0, [pc, #576]	; (3db8 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    3b78:	4f8e      	ldr	r7, [pc, #568]	; (3db4 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    3b7a:	4684      	mov	ip, r0
    }

    // get difference of smoothed IR signal

    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3b7c:	2200      	movs	r2, #0
    3b7e:	f240 1eef 	movw	lr, #495	; 0x1ef
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    3b82:	463b      	mov	r3, r7
    3b84:	6879      	ldr	r1, [r7, #4]
    3b86:	681b      	ldr	r3, [r3, #0]
    3b88:	3201      	adds	r2, #1
    3b8a:	1acb      	subs	r3, r1, r3
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3b8c:	4572      	cmp	r2, lr
        an_dx[k] = (an_x[k + 1] - an_x[k]);
    3b8e:	f84c 3b04 	str.w	r3, [ip], #4
    3b92:	f107 0704 	add.w	r7, r7, #4
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 1; k++)
    3b96:	d1f4      	bne.n	3b82 <maxim_heart_rate_and_oxygen_saturation+0x56>
    3b98:	4a87      	ldr	r2, [pc, #540]	; (3db8 <maxim_heart_rate_and_oxygen_saturation+0x28c>)

    // 2-pt Moving Average to an_dx
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3b9a:	2100      	movs	r1, #0
    {
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    3b9c:	6813      	ldr	r3, [r2, #0]
    3b9e:	f852 7f04 	ldr.w	r7, [r2, #4]!
    3ba2:	443b      	add	r3, r7
    3ba4:	3101      	adds	r1, #1
    3ba6:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    3baa:	105b      	asrs	r3, r3, #1
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3bac:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
        an_dx[k] = (an_dx[k] + an_dx[k + 1]) / 2;
    3bb0:	f842 3c04 	str.w	r3, [r2, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3bb4:	d1f2      	bne.n	3b9c <maxim_heart_rate_and_oxygen_saturation+0x70>
    3bb6:	4f80      	ldr	r7, [pc, #512]	; (3db8 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    }

    // hamming window
    // flip wave form so that we can detect valley with peak detector
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3bb8:	2100      	movs	r1, #0
    3bba:	1d4b      	adds	r3, r1, #5
    3bbc:	f8df e1fc 	ldr.w	lr, [pc, #508]	; 3dbc <maxim_heart_rate_and_oxygen_saturation+0x290>
    3bc0:	428b      	cmp	r3, r1
    3bc2:	bfb4      	ite	lt
    3bc4:	2301      	movlt	r3, #1
    3bc6:	2306      	movge	r3, #6
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE - 2; k++)
    3bc8:	46bc      	mov	ip, r7
    {
        s = 0;
    3bca:	2200      	movs	r2, #0
    3bcc:	e012      	b.n	3bf4 <maxim_heart_rate_and_oxygen_saturation+0xc8>
        un_ir_mean += pun_ir_buffer[k];
    3bce:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    for (k = 0; k < n_ir_buffer_length; k++)
    3bd2:	3201      	adds	r2, #1
        un_ir_mean += pun_ir_buffer[k];
    3bd4:	440b      	add	r3, r1
    for (k = 0; k < n_ir_buffer_length; k++)
    3bd6:	e7b2      	b.n	3b3e <maxim_heart_rate_and_oxygen_saturation+0x12>
        an_x[k] = pun_ir_buffer[k] - un_ir_mean;
    3bd8:	f856 1022 	ldr.w	r1, [r6, r2, lsl #2]
    3bdc:	1ac9      	subs	r1, r1, r3
    3bde:	f840 1b04 	str.w	r1, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    3be2:	3201      	adds	r2, #1
    3be4:	e7b2      	b.n	3b4c <maxim_heart_rate_and_oxygen_saturation+0x20>
        for (k = i; k < i + HAMMING_SIZE; k++)
        {
            s -= an_dx[k] * auw_hamm[k - i];
    3be6:	f85c ab04 	ldr.w	sl, [ip], #4
    3bea:	46d1      	mov	r9, sl
    3bec:	f83e ab02 	ldrh.w	sl, [lr], #2
    3bf0:	fb09 221a 	mls	r2, r9, sl, r2
        for (k = i; k < i + HAMMING_SIZE; k++)
    3bf4:	3b01      	subs	r3, #1
    3bf6:	d1f6      	bne.n	3be6 <maxim_heart_rate_and_oxygen_saturation+0xba>
        }
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    3bf8:	f240 4c7a 	movw	ip, #1146	; 0x47a
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3bfc:	3101      	adds	r1, #1
        an_dx[i] = s / (int32_t)1146; // divide by sum of auw_hamm
    3bfe:	fb92 f2fc 	sdiv	r2, r2, ip
    3c02:	f847 2b04 	str.w	r2, [r7], #4
    for (i = 0; i < BUFFER_SIZE - HAMMING_SIZE - MA4_SIZE - 2; i++)
    3c06:	f240 12e9 	movw	r2, #489	; 0x1e9
    3c0a:	4291      	cmp	r1, r2
    3c0c:	d1d5      	bne.n	3bba <maxim_heart_rate_and_oxygen_saturation+0x8e>
    }

    n_th1 = 0; // threshold calculation
    3c0e:	461a      	mov	r2, r3
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3c10:	f240 17ef 	movw	r7, #495	; 0x1ef
    {
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3c14:	f850 1b04 	ldr.w	r1, [r0], #4
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3c18:	3301      	adds	r3, #1
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3c1a:	2900      	cmp	r1, #0
    3c1c:	bfb8      	it	lt
    3c1e:	4249      	neglt	r1, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3c20:	42bb      	cmp	r3, r7
        n_th1 += ((an_dx[k] > 0) ? an_dx[k] : ((int32_t)0 - an_dx[k]));
    3c22:	440a      	add	r2, r1
    for (k = 0; k < BUFFER_SIZE - HAMMING_SIZE; k++)
    3c24:	d1f6      	bne.n	3c14 <maxim_heart_rate_and_oxygen_saturation+0xe8>
    }
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    // peak location is acutally index for sharpest location of raw signal since we flipped the signal
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    3c26:	2108      	movs	r1, #8
    3c28:	2005      	movs	r0, #5
    n_th1 = n_th1 / (BUFFER_SIZE - HAMMING_SIZE);
    3c2a:	fb92 f2f3 	sdiv	r2, r2, r3
    maxim_find_peaks(an_dx_peak_locs, &n_npks, an_dx, BUFFER_SIZE - HAMMING_SIZE, n_th1, 8, 5); //peak_height, peak_distance, max_num_peaks
    3c2e:	e9cd 1001 	strd	r1, r0, [sp, #4]
    3c32:	9200      	str	r2, [sp, #0]
    3c34:	a909      	add	r1, sp, #36	; 0x24
    3c36:	4a60      	ldr	r2, [pc, #384]	; (3db8 <maxim_heart_rate_and_oxygen_saturation+0x28c>)
    3c38:	a82d      	add	r0, sp, #180	; 0xb4
    3c3a:	f01d fd61 	bl	21700 <maxim_find_peaks>

    n_peak_interval_sum = 0;
    if (n_npks >= 2)
    3c3e:	9f09      	ldr	r7, [sp, #36]	; 0x24
    3c40:	2f01      	cmp	r7, #1
    3c42:	f04f 0300 	mov.w	r3, #0
    3c46:	dd38      	ble.n	3cba <maxim_heart_rate_and_oxygen_saturation+0x18e>
    3c48:	aa2d      	add	r2, sp, #180	; 0xb4
    {
        for (k = 1; k < n_npks; k++)
    3c4a:	2001      	movs	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3c4c:	4611      	mov	r1, r2
    3c4e:	f8d2 c004 	ldr.w	ip, [r2, #4]
    3c52:	6809      	ldr	r1, [r1, #0]
        for (k = 1; k < n_npks; k++)
    3c54:	3001      	adds	r0, #1
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3c56:	ebac 0101 	sub.w	r1, ip, r1
        for (k = 1; k < n_npks; k++)
    3c5a:	4287      	cmp	r7, r0
            n_peak_interval_sum += (an_dx_peak_locs[k] - an_dx_peak_locs[k - 1]);
    3c5c:	f102 0204 	add.w	r2, r2, #4
    3c60:	440b      	add	r3, r1
        for (k = 1; k < n_npks; k++)
    3c62:	d1f3      	bne.n	3c4c <maxim_heart_rate_and_oxygen_saturation+0x120>
        n_peak_interval_sum = n_peak_interval_sum / (n_npks - 1);
    3c64:	1e7a      	subs	r2, r7, #1
    3c66:	fb93 f3f2 	sdiv	r3, r3, r2
        *pn_heart_rate = (int32_t)(6000 / n_peak_interval_sum); // beats per minutes
    3c6a:	f241 7270 	movw	r2, #6000	; 0x1770
    3c6e:	fb92 f3f3 	sdiv	r3, r2, r3
    3c72:	9a47      	ldr	r2, [sp, #284]	; 0x11c
    3c74:	6013      	str	r3, [r2, #0]
        *pch_hr_valid = 1;
    3c76:	2301      	movs	r3, #1
    3c78:	9a48      	ldr	r2, [sp, #288]	; 0x120
    3c7a:	f10d 0c3c 	add.w	ip, sp, #60	; 0x3c
    3c7e:	7013      	strb	r3, [r2, #0]
    3c80:	a82d      	add	r0, sp, #180	; 0xb4
        for (k = 1; k < n_npks; k++)
    3c82:	4661      	mov	r1, ip
    3c84:	2300      	movs	r3, #0
    {
        *pn_heart_rate = -999;
        *pch_hr_valid = 0;
    }

    for (k = 0; k < n_npks; k++)
    3c86:	429f      	cmp	r7, r3
    3c88:	dc1b      	bgt.n	3cc2 <maxim_heart_rate_and_oxygen_saturation+0x196>
    3c8a:	4b4d      	ldr	r3, [pc, #308]	; (3dc0 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    3c8c:	4949      	ldr	r1, [pc, #292]	; (3db4 <maxim_heart_rate_and_oxygen_saturation+0x288>)
    3c8e:	4618      	mov	r0, r3
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;

    // raw value : RED(=y) and IR(=X)
    // we need to assess DC and AC value of ir and red PPG.
    for (k = 0; k < n_ir_buffer_length; k++)
    3c90:	2200      	movs	r2, #0
    3c92:	468e      	mov	lr, r1
    3c94:	42aa      	cmp	r2, r5
    3c96:	db1b      	blt.n	3cd0 <maxim_heart_rate_and_oxygen_saturation+0x1a4>
        an_x[k] = pun_ir_buffer[k];
        an_y[k] = pun_red_buffer[k];
    }

    // find precise min near an_ir_valley_locs
    n_exact_ir_valley_locs_count = 0;
    3c98:	2000      	movs	r0, #0
    for (k = 0; k < n_npks; k++)
    3c9a:	4605      	mov	r5, r0
                    if (un_only_once > 0)
                    {
                        un_only_once = 0;
                    }
                    n_c_min = an_x[i];
                    an_exact_ir_valley_locs[k] = i;
    3c9c:	f10d 0a78 	add.w	sl, sp, #120	; 0x78
    for (k = 0; k < n_npks; k++)
    3ca0:	42af      	cmp	r7, r5
    3ca2:	dc1f      	bgt.n	3ce4 <maxim_heart_rate_and_oxygen_saturation+0x1b8>
                }
            if (un_only_once == 0)
                n_exact_ir_valley_locs_count++;
        }
    }
    if (n_exact_ir_valley_locs_count < 2)
    3ca4:	2801      	cmp	r0, #1
    3ca6:	dc3f      	bgt.n	3d28 <maxim_heart_rate_and_oxygen_saturation+0x1fc>
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
    3ca8:	9a05      	ldr	r2, [sp, #20]
    3caa:	4b46      	ldr	r3, [pc, #280]	; (3dc4 <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3cac:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 0;
    3cae:	2300      	movs	r3, #0

    if (n_ratio_average > 2 && n_ratio_average < 184)
    {
        n_spo2_calc = uch_spo2_table[n_ratio_average];
        *pn_spo2 = n_spo2_calc;
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3cb0:	9a46      	ldr	r2, [sp, #280]	; 0x118
    3cb2:	7013      	strb	r3, [r2, #0]
    else
    {
        *pn_spo2 = -999; // do not use SPO2 since signal ratio is out of range
        *pch_spo2_valid = 0;
    }
}
    3cb4:	b03d      	add	sp, #244	; 0xf4
    3cb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        *pn_heart_rate = -999;
    3cba:	9947      	ldr	r1, [sp, #284]	; 0x11c
    3cbc:	4a41      	ldr	r2, [pc, #260]	; (3dc4 <maxim_heart_rate_and_oxygen_saturation+0x298>)
    3cbe:	600a      	str	r2, [r1, #0]
        *pch_hr_valid = 0;
    3cc0:	e7da      	b.n	3c78 <maxim_heart_rate_and_oxygen_saturation+0x14c>
        an_ir_valley_locs[k] = an_dx_peak_locs[k] + HAMMING_SIZE / 2;
    3cc2:	f850 2b04 	ldr.w	r2, [r0], #4
    3cc6:	3202      	adds	r2, #2
    3cc8:	f841 2b04 	str.w	r2, [r1], #4
    for (k = 0; k < n_npks; k++)
    3ccc:	3301      	adds	r3, #1
    3cce:	e7da      	b.n	3c86 <maxim_heart_rate_and_oxygen_saturation+0x15a>
        an_x[k] = pun_ir_buffer[k];
    3cd0:	f856 9022 	ldr.w	r9, [r6, r2, lsl #2]
    3cd4:	f841 9b04 	str.w	r9, [r1], #4
        an_y[k] = pun_red_buffer[k];
    3cd8:	f858 9022 	ldr.w	r9, [r8, r2, lsl #2]
    3cdc:	f840 9b04 	str.w	r9, [r0], #4
    for (k = 0; k < n_ir_buffer_length; k++)
    3ce0:	3201      	adds	r2, #1
    3ce2:	e7d7      	b.n	3c94 <maxim_heart_rate_and_oxygen_saturation+0x168>
        m = an_ir_valley_locs[k];
    3ce4:	f85c 6b04 	ldr.w	r6, [ip], #4
        if (m + 5 < BUFFER_SIZE - HAMMING_SIZE && m - 5 > 0)
    3ce8:	1d71      	adds	r1, r6, #5
    3cea:	f5b1 7ff7 	cmp.w	r1, #494	; 0x1ee
    3cee:	dc0f      	bgt.n	3d10 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3cf0:	1f72      	subs	r2, r6, #5
    3cf2:	2a00      	cmp	r2, #0
    3cf4:	dd0c      	ble.n	3d10 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
    3cf6:	3e06      	subs	r6, #6
    3cf8:	4291      	cmp	r1, r2
    3cfa:	bfb4      	ite	lt
    3cfc:	2101      	movlt	r1, #1
    3cfe:	210b      	movge	r1, #11
    3d00:	4431      	add	r1, r6
        n_c_min = 16777216; //2^24;
    3d02:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
        un_only_once = 1;
    3d06:	2601      	movs	r6, #1
            for (i = m - 5; i < m + 5; i++)
    3d08:	428a      	cmp	r2, r1
    3d0a:	d103      	bne.n	3d14 <maxim_heart_rate_and_oxygen_saturation+0x1e8>
            if (un_only_once == 0)
    3d0c:	b906      	cbnz	r6, 3d10 <maxim_heart_rate_and_oxygen_saturation+0x1e4>
                n_exact_ir_valley_locs_count++;
    3d0e:	3001      	adds	r0, #1
    for (k = 0; k < n_npks; k++)
    3d10:	3501      	adds	r5, #1
    3d12:	e7c5      	b.n	3ca0 <maxim_heart_rate_and_oxygen_saturation+0x174>
                if (an_x[i] < n_c_min)
    3d14:	f85e 9022 	ldr.w	r9, [lr, r2, lsl #2]
    3d18:	45c1      	cmp	r9, r8
                    an_exact_ir_valley_locs[k] = i;
    3d1a:	bfbe      	ittt	lt
    3d1c:	f84a 2025 	strlt.w	r2, [sl, r5, lsl #2]
    3d20:	46c8      	movlt	r8, r9
    3d22:	2600      	movlt	r6, #0
            for (i = m - 5; i < m + 5; i++)
    3d24:	3201      	adds	r2, #1
    3d26:	e7ef      	b.n	3d08 <maxim_heart_rate_and_oxygen_saturation+0x1dc>
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3d28:	2500      	movs	r5, #0
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3d2a:	6821      	ldr	r1, [r4, #0]
    3d2c:	f854 2f04 	ldr.w	r2, [r4, #4]!
    3d30:	6866      	ldr	r6, [r4, #4]
    3d32:	4432      	add	r2, r6
    3d34:	4411      	add	r1, r2
    3d36:	68a2      	ldr	r2, [r4, #8]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3d38:	681e      	ldr	r6, [r3, #0]
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3d3a:	188a      	adds	r2, r1, r2
    3d3c:	bf48      	it	mi
    3d3e:	3203      	addmi	r2, #3
    3d40:	1092      	asrs	r2, r2, #2
    3d42:	f844 2c04 	str.w	r2, [r4, #-4]
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3d46:	f853 2f04 	ldr.w	r2, [r3, #4]!
    3d4a:	6859      	ldr	r1, [r3, #4]
    3d4c:	440a      	add	r2, r1
    3d4e:	6899      	ldr	r1, [r3, #8]
    3d50:	4432      	add	r2, r6
    3d52:	1852      	adds	r2, r2, r1
    3d54:	bf48      	it	mi
    3d56:	3203      	addmi	r2, #3
        an_x[k] = (an_x[k] + an_x[k + 1] + an_x[k + 2] + an_x[k + 3]) / (int32_t)4;
    3d58:	3501      	adds	r5, #1
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3d5a:	1092      	asrs	r2, r2, #2
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3d5c:	f5b5 7ff8 	cmp.w	r5, #496	; 0x1f0
        an_y[k] = (an_y[k] + an_y[k + 1] + an_y[k + 2] + an_y[k + 3]) / (int32_t)4;
    3d60:	f843 2c04 	str.w	r2, [r3, #-4]
    for (k = 0; k < BUFFER_SIZE - MA4_SIZE; k++)
    3d64:	d1e1      	bne.n	3d2a <maxim_heart_rate_and_oxygen_saturation+0x1fe>
        an_ratio[k] = 0;
    3d66:	2300      	movs	r3, #0
    3d68:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
    3d6c:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
    3d70:	ac1e      	add	r4, sp, #120	; 0x78
    3d72:	930e      	str	r3, [sp, #56]	; 0x38
    3d74:	4622      	mov	r2, r4
        if (an_exact_ir_valley_locs[k] > BUFFER_SIZE)
    3d76:	f852 1b04 	ldr.w	r1, [r2], #4
    3d7a:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    3d7e:	dc93      	bgt.n	3ca8 <maxim_heart_rate_and_oxygen_saturation+0x17c>
    for (k = 0; k < n_exact_ir_valley_locs_count; k++)
    3d80:	3301      	adds	r3, #1
    3d82:	4298      	cmp	r0, r3
    3d84:	d1f7      	bne.n	3d76 <maxim_heart_rate_and_oxygen_saturation+0x24a>
    n_i_ratio_count = 0;
    3d86:	2100      	movs	r1, #0
    3d88:	4d0a      	ldr	r5, [pc, #40]	; (3db4 <maxim_heart_rate_and_oxygen_saturation+0x288>)
                if (an_y[i] > n_y_dc_max)
    3d8a:	4e0d      	ldr	r6, [pc, #52]	; (3dc0 <maxim_heart_rate_and_oxygen_saturation+0x294>)
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3d8c:	468e      	mov	lr, r1
    3d8e:	f100 3aff 	add.w	sl, r0, #4294967295
        if (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k] > 10)
    3d92:	f8d4 c004 	ldr.w	ip, [r4, #4]
    3d96:	f854 2b04 	ldr.w	r2, [r4], #4
    3d9a:	ebac 0802 	sub.w	r8, ip, r2
    3d9e:	f1b8 0f0a 	cmp.w	r8, #10
    3da2:	f10e 0e01 	add.w	lr, lr, #1
    3da6:	dd56      	ble.n	3e56 <maxim_heart_rate_and_oxygen_saturation+0x32a>
        n_x_dc_max = -16777216;
    3da8:	f04f 477f 	mov.w	r7, #4278190080	; 0xff000000
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3dac:	4613      	mov	r3, r2
        n_y_dc_max = -16777216;
    3dae:	46b9      	mov	r9, r7
    3db0:	e018      	b.n	3de4 <maxim_heart_rate_and_oxygen_saturation+0x2b8>
    3db2:	bf00      	nop
    3db4:	2000c530 	.word	0x2000c530
    3db8:	2000bd70 	.word	0x2000bd70
    3dbc:	000292e4 	.word	0x000292e4
    3dc0:	2000cd00 	.word	0x2000cd00
    3dc4:	fffffc19 	.word	0xfffffc19
                if (an_x[i] > n_x_dc_max)
    3dc8:	f855 0023 	ldr.w	r0, [r5, r3, lsl #2]
    3dcc:	42b8      	cmp	r0, r7
    3dce:	bfc8      	it	gt
    3dd0:	4607      	movgt	r7, r0
                if (an_y[i] > n_y_dc_max)
    3dd2:	f856 0023 	ldr.w	r0, [r6, r3, lsl #2]
                if (an_x[i] > n_x_dc_max)
    3dd6:	bfc8      	it	gt
    3dd8:	9307      	strgt	r3, [sp, #28]
                if (an_y[i] > n_y_dc_max)
    3dda:	4548      	cmp	r0, r9
    3ddc:	bfc4      	itt	gt
    3dde:	469b      	movgt	fp, r3
    3de0:	4681      	movgt	r9, r0
            for (i = an_exact_ir_valley_locs[k]; i < an_exact_ir_valley_locs[k + 1]; i++)
    3de2:	3301      	adds	r3, #1
    3de4:	459c      	cmp	ip, r3
    3de6:	dcef      	bgt.n	3dc8 <maxim_heart_rate_and_oxygen_saturation+0x29c>
            n_x_ac = (an_x[an_exact_ir_valley_locs[k + 1]] - an_x[an_exact_ir_valley_locs[k]]) * (n_x_dc_max_idx - an_exact_ir_valley_locs[k]); // ir
    3de8:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
    3dec:	f855 002c 	ldr.w	r0, [r5, ip, lsl #2]
    3df0:	1ac0      	subs	r0, r0, r3
    3df2:	9b07      	ldr	r3, [sp, #28]
    3df4:	1a9b      	subs	r3, r3, r2
    3df6:	4358      	muls	r0, r3
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3df8:	fb90 f3f8 	sdiv	r3, r0, r8
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3dfc:	f855 0022 	ldr.w	r0, [r5, r2, lsl #2]
            n_x_ac = an_x[an_exact_ir_valley_locs[k]] + n_x_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3e00:	9306      	str	r3, [sp, #24]
            n_x_ac = an_x[n_y_dc_max_idx] - n_x_ac; // subracting linear DC compoenents from raw
    3e02:	f855 302b 	ldr.w	r3, [r5, fp, lsl #2]
    3e06:	1a1b      	subs	r3, r3, r0
    3e08:	9806      	ldr	r0, [sp, #24]
    3e0a:	1a1b      	subs	r3, r3, r0
            n_denom = (n_x_ac * n_y_dc_max) >> 7;
    3e0c:	fb09 f303 	mul.w	r3, r9, r3
    3e10:	ea4f 19e3 	mov.w	r9, r3, asr #7
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3e14:	f1b9 0f00 	cmp.w	r9, #0
    3e18:	dd1d      	ble.n	3e56 <maxim_heart_rate_and_oxygen_saturation+0x32a>
    3e1a:	2904      	cmp	r1, #4
    3e1c:	dc1b      	bgt.n	3e56 <maxim_heart_rate_and_oxygen_saturation+0x32a>
            n_y_ac = (an_y[an_exact_ir_valley_locs[k + 1]] - an_y[an_exact_ir_valley_locs[k]]) * (n_y_dc_max_idx - an_exact_ir_valley_locs[k]); //red
    3e1e:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
    3e22:	f856 302c 	ldr.w	r3, [r6, ip, lsl #2]
    3e26:	ebab 0202 	sub.w	r2, fp, r2
    3e2a:	1a1b      	subs	r3, r3, r0
    3e2c:	435a      	muls	r2, r3
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3e2e:	f856 302b 	ldr.w	r3, [r6, fp, lsl #2]
            n_y_ac = an_y[an_exact_ir_valley_locs[k]] + n_y_ac / (an_exact_ir_valley_locs[k + 1] - an_exact_ir_valley_locs[k]);
    3e32:	fb92 f8f8 	sdiv	r8, r2, r8
            n_y_ac = an_y[n_y_dc_max_idx] - n_y_ac;                                                                                             // subracting linear DC compoenents from raw
    3e36:	1a1b      	subs	r3, r3, r0
    3e38:	eba3 0308 	sub.w	r3, r3, r8
            n_nume = (n_y_ac * n_x_dc_max) >> 7;    //prepare X100 to preserve floating value
    3e3c:	435f      	muls	r7, r3
            if (n_denom > 0 && n_i_ratio_count < 5 && n_nume != 0)
    3e3e:	11ff      	asrs	r7, r7, #7
    3e40:	d009      	beq.n	3e56 <maxim_heart_rate_and_oxygen_saturation+0x32a>
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3e42:	ab3c      	add	r3, sp, #240	; 0xf0
    3e44:	eb03 0c81 	add.w	ip, r3, r1, lsl #2
    3e48:	2364      	movs	r3, #100	; 0x64
    3e4a:	435f      	muls	r7, r3
                n_i_ratio_count++;
    3e4c:	3101      	adds	r1, #1
                an_ratio[n_i_ratio_count] = (n_nume * 100) / n_denom; //formular is ( n_y_ac *n_x_dc_max) / ( n_x_ac *n_y_dc_max) ;
    3e4e:	fb97 f7f9 	sdiv	r7, r7, r9
    3e52:	f84c 7cc8 	str.w	r7, [ip, #-200]
    for (k = 0; k < n_exact_ir_valley_locs_count - 1; k++)
    3e56:	45d6      	cmp	lr, sl
    3e58:	db9b      	blt.n	3d92 <maxim_heart_rate_and_oxygen_saturation+0x266>
    maxim_sort_ascend(an_ratio, n_i_ratio_count);
    3e5a:	a80a      	add	r0, sp, #40	; 0x28
    3e5c:	f01d fbe6 	bl	2162c <maxim_sort_ascend>
    n_middle_idx = n_i_ratio_count / 2;
    3e60:	104a      	asrs	r2, r1, #1
    if (n_middle_idx > 1)
    3e62:	2903      	cmp	r1, #3
    3e64:	ea4f 0382 	mov.w	r3, r2, lsl #2
    3e68:	dd14      	ble.n	3e94 <maxim_heart_rate_and_oxygen_saturation+0x368>
        n_ratio_average = (an_ratio[n_middle_idx - 1] + an_ratio[n_middle_idx]) / 2; // use median
    3e6a:	a93c      	add	r1, sp, #240	; 0xf0
    3e6c:	eb01 0182 	add.w	r1, r1, r2, lsl #2
    3e70:	f851 3ccc 	ldr.w	r3, [r1, #-204]
    3e74:	f851 2cc8 	ldr.w	r2, [r1, #-200]
    3e78:	4413      	add	r3, r2
    3e7a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    3e7e:	105b      	asrs	r3, r3, #1
    if (n_ratio_average > 2 && n_ratio_average < 184)
    3e80:	1eda      	subs	r2, r3, #3
    3e82:	2ab4      	cmp	r2, #180	; 0xb4
    3e84:	f63f af10 	bhi.w	3ca8 <maxim_heart_rate_and_oxygen_saturation+0x17c>
        n_spo2_calc = uch_spo2_table[n_ratio_average];
    3e88:	4a05      	ldr	r2, [pc, #20]	; (3ea0 <maxim_heart_rate_and_oxygen_saturation+0x374>)
    3e8a:	5cd3      	ldrb	r3, [r2, r3]
    3e8c:	9a05      	ldr	r2, [sp, #20]
    3e8e:	6013      	str	r3, [r2, #0]
        *pch_spo2_valid = 1; //  float_SPO2 =  -45.060*n_ratio_average* n_ratio_average/10000 + 30.354 *n_ratio_average/100 + 94.845 ;  // for comparison with table
    3e90:	2301      	movs	r3, #1
    3e92:	e70d      	b.n	3cb0 <maxim_heart_rate_and_oxygen_saturation+0x184>
        n_ratio_average = an_ratio[n_middle_idx];
    3e94:	aa3c      	add	r2, sp, #240	; 0xf0
    3e96:	4413      	add	r3, r2
    3e98:	f853 3cc8 	ldr.w	r3, [r3, #-200]
    3e9c:	e7f0      	b.n	3e80 <maxim_heart_rate_and_oxygen_saturation+0x354>
    3e9e:	bf00      	nop
    3ea0:	0002b277 	.word	0x0002b277

00003ea4 <init_lcd_output>:
const int spi_freq = 8000000;

static uint8_t data[MAX_USER_DATA_LENGTH];

s16_t init_lcd_output()
{
    3ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3ea8:	4828      	ldr	r0, [pc, #160]	; (3f4c <init_lcd_output+0xa8>)
    3eaa:	f01b fc45 	bl	1f738 <z_impl_device_get_binding>
    struct device *cs;
    int ret;
    cs = device_get_binding(CS_GPIO_LABEL);
    if (cs == NULL)
    3eae:	4605      	mov	r5, r0
    3eb0:	b938      	cbnz	r0, 3ec2 <init_lcd_output+0x1e>
    {
        printk("Didn't find device %s\n", CS_GPIO_LABEL);
    3eb2:	4827      	ldr	r0, [pc, #156]	; (3f50 <init_lcd_output+0xac>)
    3eb4:	4925      	ldr	r1, [pc, #148]	; (3f4c <init_lcd_output+0xa8>)
    3eb6:	f01d fe35 	bl	21b24 <printk>
        return -1;
    3eba:	f04f 30ff 	mov.w	r0, #4294967295
    globalLcdRst = lcdRst;
    globalVciEn = vciEn;
    globalDcx = dcx;

    return 0;
}
    3ebe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = gpio_pin_configure(cs, CS_GPIO_PIN, CS_GPIO_FLAGS);
    3ec2:	210c      	movs	r1, #12
    3ec4:	f01d fc3f 	bl	21746 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3ec8:	4604      	mov	r4, r0
    3eca:	b138      	cbz	r0, 3edc <init_lcd_output+0x38>
        printk("Error %d: failed to configure device %s pin %d\n",
    3ecc:	230c      	movs	r3, #12
        printk("Error %d: failed to configure device %s pin %d\n",
    3ece:	4821      	ldr	r0, [pc, #132]	; (3f54 <init_lcd_output+0xb0>)
    3ed0:	4a1e      	ldr	r2, [pc, #120]	; (3f4c <init_lcd_output+0xa8>)
    3ed2:	4621      	mov	r1, r4
    3ed4:	f01d fe26 	bl	21b24 <printk>
        return ret;
    3ed8:	b220      	sxth	r0, r4
    3eda:	e7f0      	b.n	3ebe <init_lcd_output+0x1a>
    3edc:	481b      	ldr	r0, [pc, #108]	; (3f4c <init_lcd_output+0xa8>)
    3ede:	f01b fc2b 	bl	1f738 <z_impl_device_get_binding>
    if (lcdRst == NULL)
    3ee2:	4606      	mov	r6, r0
    3ee4:	2800      	cmp	r0, #0
    3ee6:	d0e4      	beq.n	3eb2 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, LCD_RST_GPIO_PIN, LCD_RST_GPIO_FLAGS);
    3ee8:	210a      	movs	r1, #10
    3eea:	f01d fc2c 	bl	21746 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3eee:	4604      	mov	r4, r0
    3ef0:	b108      	cbz	r0, 3ef6 <init_lcd_output+0x52>
        printk("Error %d: failed to configure device %s pin %d\n",
    3ef2:	230a      	movs	r3, #10
    3ef4:	e7eb      	b.n	3ece <init_lcd_output+0x2a>
    3ef6:	4815      	ldr	r0, [pc, #84]	; (3f4c <init_lcd_output+0xa8>)
    3ef8:	f01b fc1e 	bl	1f738 <z_impl_device_get_binding>
    if (vciEn == NULL)
    3efc:	4680      	mov	r8, r0
    3efe:	2800      	cmp	r0, #0
    3f00:	d0d7      	beq.n	3eb2 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, VCI_EN_GPIO_PIN, VCI_EN_GPIO_FLAGS);
    3f02:	2106      	movs	r1, #6
    3f04:	4630      	mov	r0, r6
    3f06:	f01d fc1e 	bl	21746 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3f0a:	4604      	mov	r4, r0
    3f0c:	b108      	cbz	r0, 3f12 <init_lcd_output+0x6e>
        printk("Error %d: failed to configure device %s pin %d\n",
    3f0e:	2306      	movs	r3, #6
    3f10:	e7dd      	b.n	3ece <init_lcd_output+0x2a>
    3f12:	480e      	ldr	r0, [pc, #56]	; (3f4c <init_lcd_output+0xa8>)
    3f14:	f01b fc10 	bl	1f738 <z_impl_device_get_binding>
    if (dcx == NULL)
    3f18:	4607      	mov	r7, r0
    3f1a:	2800      	cmp	r0, #0
    3f1c:	d0c9      	beq.n	3eb2 <init_lcd_output+0xe>
    ret = gpio_pin_configure(lcdRst, DCX_GPIO_PIN, DCX_GPIO_FLAGS);
    3f1e:	2105      	movs	r1, #5
    3f20:	4630      	mov	r0, r6
    3f22:	f01d fc10 	bl	21746 <gpio_pin_configure.constprop.0>
    if (ret != 0)
    3f26:	4604      	mov	r4, r0
    3f28:	b108      	cbz	r0, 3f2e <init_lcd_output+0x8a>
        printk("Error %d: failed to configure device %s pin %d\n",
    3f2a:	2305      	movs	r3, #5
    3f2c:	e7cf      	b.n	3ece <init_lcd_output+0x2a>
    printk("INITIALISING OUTPUTS : OK\n");
    3f2e:	480a      	ldr	r0, [pc, #40]	; (3f58 <init_lcd_output+0xb4>)
    3f30:	f01d fdf8 	bl	21b24 <printk>
    globalcs = cs;
    3f34:	4b09      	ldr	r3, [pc, #36]	; (3f5c <init_lcd_output+0xb8>)
    3f36:	601d      	str	r5, [r3, #0]
    globalLcdRst = lcdRst;
    3f38:	4b09      	ldr	r3, [pc, #36]	; (3f60 <init_lcd_output+0xbc>)
    3f3a:	601e      	str	r6, [r3, #0]
    globalVciEn = vciEn;
    3f3c:	4b09      	ldr	r3, [pc, #36]	; (3f64 <init_lcd_output+0xc0>)
    3f3e:	f8c3 8000 	str.w	r8, [r3]
    globalDcx = dcx;
    3f42:	4b09      	ldr	r3, [pc, #36]	; (3f68 <init_lcd_output+0xc4>)
    return 0;
    3f44:	4620      	mov	r0, r4
    globalDcx = dcx;
    3f46:	601f      	str	r7, [r3, #0]
    return 0;
    3f48:	e7b9      	b.n	3ebe <init_lcd_output+0x1a>
    3f4a:	bf00      	nop
    3f4c:	0002b09c 	.word	0x0002b09c
    3f50:	0002b32f 	.word	0x0002b32f
    3f54:	0002b346 	.word	0x0002b346
    3f58:	0002b376 	.word	0x0002b376
    3f5c:	2000d4dc 	.word	0x2000d4dc
    3f60:	2000d4d4 	.word	0x2000d4d4
    3f64:	2000d4d8 	.word	0x2000d4d8
    3f68:	2000d4d0 	.word	0x2000d4d0

00003f6c <setOutputcs>:

bool setOutputcs(bool val)
{
    3f6c:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3f6e:	4b06      	ldr	r3, [pc, #24]	; (3f88 <setOutputcs+0x1c>)
{
    3f70:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalcs, CS_GPIO_PIN, val);
    3f72:	210c      	movs	r1, #12
    3f74:	6818      	ldr	r0, [r3, #0]
    3f76:	f01d fbd6 	bl	21726 <gpio_pin_set>
    if (err != 0)
    3f7a:	b118      	cbz	r0, 3f84 <setOutputcs+0x18>
    {
        printk("Error in gpio cs");
    3f7c:	4803      	ldr	r0, [pc, #12]	; (3f8c <setOutputcs+0x20>)
    3f7e:	f01d fdd1 	bl	21b24 <printk>
        return 1;
    3f82:	2001      	movs	r0, #1
    }
    return 0;
}
    3f84:	bd08      	pop	{r3, pc}
    3f86:	bf00      	nop
    3f88:	2000d4dc 	.word	0x2000d4dc
    3f8c:	0002b391 	.word	0x0002b391

00003f90 <setOutputLcdRst>:

bool setOutputLcdRst(bool val)
{
    3f90:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3f92:	4b06      	ldr	r3, [pc, #24]	; (3fac <setOutputLcdRst+0x1c>)
{
    3f94:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalLcdRst, LCD_RST_GPIO_PIN, val);
    3f96:	210a      	movs	r1, #10
    3f98:	6818      	ldr	r0, [r3, #0]
    3f9a:	f01d fbc4 	bl	21726 <gpio_pin_set>
    if (err != 0)
    3f9e:	b118      	cbz	r0, 3fa8 <setOutputLcdRst+0x18>
    {
        printk("Error in gpio reset");
    3fa0:	4803      	ldr	r0, [pc, #12]	; (3fb0 <setOutputLcdRst+0x20>)
    3fa2:	f01d fdbf 	bl	21b24 <printk>
        return 1;
    3fa6:	2001      	movs	r0, #1
    }
    return 0;
}
    3fa8:	bd08      	pop	{r3, pc}
    3faa:	bf00      	nop
    3fac:	2000d4d4 	.word	0x2000d4d4
    3fb0:	0002b3a2 	.word	0x0002b3a2

00003fb4 <setOutputVciEn>:

bool setOutputVciEn(bool val)
{
    3fb4:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3fb6:	4b06      	ldr	r3, [pc, #24]	; (3fd0 <setOutputVciEn+0x1c>)
{
    3fb8:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalVciEn, VCI_EN_GPIO_PIN, val);
    3fba:	2106      	movs	r1, #6
    3fbc:	6818      	ldr	r0, [r3, #0]
    3fbe:	f01d fbb2 	bl	21726 <gpio_pin_set>
    if (err != 0)
    3fc2:	b118      	cbz	r0, 3fcc <setOutputVciEn+0x18>
    {
        printk("Error in gpio vcien");
    3fc4:	4803      	ldr	r0, [pc, #12]	; (3fd4 <setOutputVciEn+0x20>)
    3fc6:	f01d fdad 	bl	21b24 <printk>
        return 1;
    3fca:	2001      	movs	r0, #1
    }
    return 0;
}
    3fcc:	bd08      	pop	{r3, pc}
    3fce:	bf00      	nop
    3fd0:	2000d4d8 	.word	0x2000d4d8
    3fd4:	0002b3b6 	.word	0x0002b3b6

00003fd8 <setOutputDcx>:

bool setOutputDcx(bool val)
{
    3fd8:	b508      	push	{r3, lr}
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3fda:	4b06      	ldr	r3, [pc, #24]	; (3ff4 <setOutputDcx+0x1c>)
{
    3fdc:	4602      	mov	r2, r0
    int err = gpio_pin_set(globalDcx, DCX_GPIO_PIN, val);
    3fde:	2105      	movs	r1, #5
    3fe0:	6818      	ldr	r0, [r3, #0]
    3fe2:	f01d fba0 	bl	21726 <gpio_pin_set>
    if (err != 0)
    3fe6:	b118      	cbz	r0, 3ff0 <setOutputDcx+0x18>
    {
        printk("Error in gpio dcx");
    3fe8:	4803      	ldr	r0, [pc, #12]	; (3ff8 <setOutputDcx+0x20>)
    3fea:	f01d fd9b 	bl	21b24 <printk>
        return 1;
    3fee:	2001      	movs	r0, #1
    }
    return 0;
}
    3ff0:	bd08      	pop	{r3, pc}
    3ff2:	bf00      	nop
    3ff4:	2000d4d0 	.word	0x2000d4d0
    3ff8:	0002b3ca 	.word	0x0002b3ca

00003ffc <write_bytes>:
    return spi_write(spi, spi_cfg, &tx);
}

int write_bytes(const struct device *spi, struct spi_config *spi_cfg,
                       uint16_t addr, uint8_t *data, uint32_t num_bytes)
{
    3ffc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
    struct spi_buf bufs[] =
    3ffe:	9300      	str	r3, [sp, #0]
    4000:	9b06      	ldr	r3, [sp, #24]
    4002:	9301      	str	r3, [sp, #4]
    struct spi_buf_set tx =
    4004:	2301      	movs	r3, #1
    4006:	f8cd d008 	str.w	sp, [sp, #8]
    400a:	9303      	str	r3, [sp, #12]
					const struct spi_buf_set *rx_bufs)
{
	const struct spi_driver_api *api =
		(const struct spi_driver_api *)dev->api;

	return api->transceive(dev, config, tx_bufs, rx_bufs);
    400c:	6883      	ldr	r3, [r0, #8]
    400e:	aa02      	add	r2, sp, #8
    4010:	681c      	ldr	r4, [r3, #0]
    4012:	2300      	movs	r3, #0
    4014:	47a0      	blx	r4
    int err;
    err = spi_acess(spi, spi_cfg, 0, addr, data, num_bytes);
    if (err)
    4016:	b120      	cbz	r0, 4022 <write_bytes+0x26>
    {
        printk("Error during SPI write\n");
    4018:	4803      	ldr	r0, [pc, #12]	; (4028 <write_bytes+0x2c>)
    401a:	f01d fd83 	bl	21b24 <printk>
        return -EIO;
    401e:	f06f 0004 	mvn.w	r0, #4
    }
    return 0;
}
    4022:	b004      	add	sp, #16
    4024:	bd10      	pop	{r4, pc}
    4026:	bf00      	nop
    4028:	0002b3dc 	.word	0x0002b3dc

0000402c <device_get_binding.constprop.0>:
    402c:	4801      	ldr	r0, [pc, #4]	; (4034 <device_get_binding.constprop.0+0x8>)
    402e:	f01b bb83 	b.w	1f738 <z_impl_device_get_binding>
    4032:	bf00      	nop
    4034:	0002b3f4 	.word	0x0002b3f4

00004038 <WriteComm>:
	0, 0, 0, 0
};
extern const int spi_freq;

void WriteComm(uint8_t data)
{
    4038:	b570      	push	{r4, r5, r6, lr}
    403a:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    403c:	2400      	movs	r4, #0
    403e:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    4042:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    4046:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    4048:	f7ff fff0 	bl	402c <device_get_binding.constprop.0>
	if (!spi) {
    404c:	4605      	mov	r5, r0
    404e:	b920      	cbnz	r0, 405a <WriteComm+0x22>
		printk("Could not find SPI driver\n");
    4050:	4812      	ldr	r0, [pc, #72]	; (409c <WriteComm+0x64>)
    4052:	f01d fd67 	bl	21b24 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    4056:	b008      	add	sp, #32
    4058:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    405a:	f44f 7380 	mov.w	r3, #256	; 0x100
    405e:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    4062:	4b0f      	ldr	r3, [pc, #60]	; (40a0 <WriteComm+0x68>)
	setOutputcs(0);
    4064:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    4066:	681b      	ldr	r3, [r3, #0]
    4068:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    406a:	2601      	movs	r6, #1
	setOutputcs(0);
    406c:	f7ff ff7e 	bl	3f6c <setOutputcs>
	setOutputDcx(0);
    4070:	4620      	mov	r0, r4
    4072:	f7ff ffb1 	bl	3fd8 <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4076:	a905      	add	r1, sp, #20
    4078:	9600      	str	r6, [sp, #0]
    407a:	f10d 030f 	add.w	r3, sp, #15
    407e:	4622      	mov	r2, r4
    4080:	4628      	mov	r0, r5
    4082:	f7ff ffbb 	bl	3ffc <write_bytes>
	if (err) {
    4086:	4601      	mov	r1, r0
    4088:	b118      	cbz	r0, 4092 <WriteComm+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    408a:	4806      	ldr	r0, [pc, #24]	; (40a4 <WriteComm+0x6c>)
    408c:	f01d fd4a 	bl	21b24 <printk>
		return;
    4090:	e7e1      	b.n	4056 <WriteComm+0x1e>
	setOutputcs(1);
    4092:	4630      	mov	r0, r6
    4094:	f7ff ff6a 	bl	3f6c <setOutputcs>
    4098:	e7dd      	b.n	4056 <WriteComm+0x1e>
    409a:	bf00      	nop
    409c:	0002b3fa 	.word	0x0002b3fa
    40a0:	00027c6c 	.word	0x00027c6c
    40a4:	0002b415 	.word	0x0002b415

000040a8 <WriteData>:

void WriteData(uint8_t data)
{
    40a8:	b570      	push	{r4, r5, r6, lr}
    40aa:	b088      	sub	sp, #32
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    40ac:	2400      	movs	r4, #0
    40ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
{
    40b2:	f88d 000f 	strb.w	r0, [sp, #15]
	struct spi_config spi_cfg = { 0 };
    40b6:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    40b8:	f7ff ffb8 	bl	402c <device_get_binding.constprop.0>
	if (!spi) {
    40bc:	4605      	mov	r5, r0
    40be:	b920      	cbnz	r0, 40ca <WriteData+0x22>
		printk("Could not find SPI driver\n");
    40c0:	4812      	ldr	r0, [pc, #72]	; (410c <WriteData+0x64>)
    40c2:	f01d fd2f 	bl	21b24 <printk>
	if (err) {
		printk("Error writing to FRAM! errro code (%d)\n", err);
		return;
	}
	setOutputcs(1);
}
    40c6:	b008      	add	sp, #32
    40c8:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    40ca:	f44f 7380 	mov.w	r3, #256	; 0x100
    40ce:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    40d2:	4b0f      	ldr	r3, [pc, #60]	; (4110 <WriteData+0x68>)
	setOutputcs(0);
    40d4:	4620      	mov	r0, r4
	spi_cfg.frequency = spi_freq;
    40d6:	681b      	ldr	r3, [r3, #0]
    40d8:	9305      	str	r3, [sp, #20]
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    40da:	2601      	movs	r6, #1
	setOutputcs(0);
    40dc:	f7ff ff46 	bl	3f6c <setOutputcs>
	setOutputDcx(1);
    40e0:	2001      	movs	r0, #1
    40e2:	f7ff ff79 	bl	3fd8 <setOutputDcx>
	err = write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    40e6:	a905      	add	r1, sp, #20
    40e8:	9600      	str	r6, [sp, #0]
    40ea:	f10d 030f 	add.w	r3, sp, #15
    40ee:	4622      	mov	r2, r4
    40f0:	4628      	mov	r0, r5
    40f2:	f7ff ff83 	bl	3ffc <write_bytes>
	if (err) {
    40f6:	4601      	mov	r1, r0
    40f8:	b118      	cbz	r0, 4102 <WriteData+0x5a>
		printk("Error writing to FRAM! errro code (%d)\n", err);
    40fa:	4806      	ldr	r0, [pc, #24]	; (4114 <WriteData+0x6c>)
    40fc:	f01d fd12 	bl	21b24 <printk>
		return;
    4100:	e7e1      	b.n	40c6 <WriteData+0x1e>
	setOutputcs(1);
    4102:	4630      	mov	r0, r6
    4104:	f7ff ff32 	bl	3f6c <setOutputcs>
    4108:	e7dd      	b.n	40c6 <WriteData+0x1e>
    410a:	bf00      	nop
    410c:	0002b3fa 	.word	0x0002b3fa
    4110:	00027c6c 	.word	0x00027c6c
    4114:	0002b415 	.word	0x0002b415

00004118 <DispLogo>:
	}
	setOutputcs(1);
}

void DispLogo(unsigned int color)
{
    4118:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    411c:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    411e:	2500      	movs	r5, #0
    4120:	e9cd 5507 	strd	r5, r5, [sp, #28]
{
    4124:	9003      	str	r0, [sp, #12]
	struct spi_config spi_cfg = { 0 };
    4126:	9509      	str	r5, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    4128:	f7ff ff80 	bl	402c <device_get_binding.constprop.0>
	if (!spi) {
    412c:	4606      	mov	r6, r0
    412e:	b928      	cbnz	r0, 413c <DispLogo+0x24>
		printk("Could not find SPI driver\n");
    4130:	482b      	ldr	r0, [pc, #172]	; (41e0 <DispLogo+0xc8>)
    4132:	f01d fcf7 	bl	21b24 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    4136:	b00b      	add	sp, #44	; 0x2c
    4138:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    413c:	f44f 7380 	mov.w	r3, #256	; 0x100
    4140:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    4144:	4b27      	ldr	r3, [pc, #156]	; (41e4 <DispLogo+0xcc>)
			if (logo[j][i]) {
    4146:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 41e8 <DispLogo+0xd0>
	spi_cfg.frequency = spi_freq;
    414a:	681b      	ldr	r3, [r3, #0]
    414c:	9307      	str	r3, [sp, #28]
	BlockWrite(xoffset, xoffset + logowidth - 1, yoffset,
    414e:	22c8      	movs	r2, #200	; 0xc8
    4150:	f240 1317 	movw	r3, #279	; 0x117
    4154:	f240 115d 	movw	r1, #349	; 0x15d
    4158:	2032      	movs	r0, #50	; 0x32
    415a:	f01d fb1f 	bl	2179c <BlockWrite>
	setOutputcs(0);
    415e:	4628      	mov	r0, r5
    4160:	f7ff ff04 	bl	3f6c <setOutputcs>
	setOutputDcx(1);
    4164:	2001      	movs	r0, #1
    4166:	f7ff ff37 	bl	3fd8 <setOutputDcx>
			if (logo[j][i]) {
    416a:	f04f 0a50 	mov.w	sl, #80	; 0x50
		for (j = 0; j < logowidth; j++) {
    416e:	2700      	movs	r7, #0
			if (logo[j][i]) {
    4170:	eb05 0809 	add.w	r8, r5, r9
    4174:	fb0a f307 	mul.w	r3, sl, r7
    4178:	f818 4003 	ldrb.w	r4, [r8, r3]
    417c:	b1ec      	cbz	r4, 41ba <DispLogo+0xa2>
				data = color >> 8;
    417e:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4180:	2401      	movs	r4, #1
				data = color >> 8;
    4182:	0a1b      	lsrs	r3, r3, #8
    4184:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4188:	2200      	movs	r2, #0
    418a:	ab06      	add	r3, sp, #24
    418c:	9400      	str	r4, [sp, #0]
    418e:	a907      	add	r1, sp, #28
    4190:	4630      	mov	r0, r6
    4192:	f7ff ff33 	bl	3ffc <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    4196:	9400      	str	r4, [sp, #0]
    4198:	ab03      	add	r3, sp, #12
    419a:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    419c:	a907      	add	r1, sp, #28
    419e:	4630      	mov	r0, r6
		for (j = 0; j < logowidth; j++) {
    41a0:	3701      	adds	r7, #1
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    41a2:	f7ff ff2b 	bl	3ffc <write_bytes>
		for (j = 0; j < logowidth; j++) {
    41a6:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
    41aa:	d1e3      	bne.n	4174 <DispLogo+0x5c>
	for (i = 0; i < logoheight; i++) {
    41ac:	3501      	adds	r5, #1
    41ae:	2d50      	cmp	r5, #80	; 0x50
    41b0:	d1dd      	bne.n	416e <DispLogo+0x56>
	setOutputcs(1);
    41b2:	2001      	movs	r0, #1
    41b4:	f7ff feda 	bl	3f6c <setOutputcs>
    41b8:	e7bd      	b.n	4136 <DispLogo+0x1e>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    41ba:	f04f 0b01 	mov.w	fp, #1
    41be:	f10d 0317 	add.w	r3, sp, #23
    41c2:	4622      	mov	r2, r4
    41c4:	f8cd b000 	str.w	fp, [sp]
    41c8:	a907      	add	r1, sp, #28
    41ca:	4630      	mov	r0, r6
				unsigned int bg_clr = BLACK;
    41cc:	9406      	str	r4, [sp, #24]
				data = bg_clr >> 8;
    41ce:	f88d 4017 	strb.w	r4, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    41d2:	f7ff ff13 	bl	3ffc <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    41d6:	f8cd b000 	str.w	fp, [sp]
    41da:	ab06      	add	r3, sp, #24
    41dc:	4622      	mov	r2, r4
    41de:	e7dd      	b.n	419c <DispLogo+0x84>
    41e0:	0002b3fa 	.word	0x0002b3fa
    41e4:	00027c6c 	.word	0x00027c6c
    41e8:	20002278 	.word	0x20002278

000041ec <DispIcon>:

void DispIcon(bool pic[50][50], unsigned int color, int xstart, int ystart,
	      int height, int width)
{
    41ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41f0:	b08b      	sub	sp, #44	; 0x2c
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    41f2:	2400      	movs	r4, #0
    41f4:	e9cd 4407 	strd	r4, r4, [sp, #28]
{
    41f8:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
    41fc:	9103      	str	r1, [sp, #12]
    41fe:	4607      	mov	r7, r0
    4200:	4616      	mov	r6, r2
    4202:	4699      	mov	r9, r3
	struct spi_config spi_cfg = { 0 };
    4204:	9409      	str	r4, [sp, #36]	; 0x24
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    4206:	f7ff ff11 	bl	402c <device_get_binding.constprop.0>
	if (!spi) {
    420a:	4605      	mov	r5, r0
    420c:	b928      	cbnz	r0, 421a <DispIcon+0x2e>
		printk("Could not find SPI driver\n");
    420e:	482e      	ldr	r0, [pc, #184]	; (42c8 <DispIcon+0xdc>)
    4210:	f01d fc88 	bl	21b24 <printk>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
			}
		}
	}
	setOutputcs(1);
}
    4214:	b00b      	add	sp, #44	; 0x2c
    4216:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	spi_cfg.operation = 256;
    421a:	f44f 7380 	mov.w	r3, #256	; 0x100
    421e:	f8ad 3020 	strh.w	r3, [sp, #32]
	spi_cfg.frequency = spi_freq;
    4222:	4b2a      	ldr	r3, [pc, #168]	; (42cc <DispIcon+0xe0>)
    4224:	681b      	ldr	r3, [r3, #0]
    4226:	9307      	str	r3, [sp, #28]
	BlockWrite(xstart, xstart + width - 1, ystart, ystart + height - 1);
    4228:	9b14      	ldr	r3, [sp, #80]	; 0x50
    422a:	f108 31ff 	add.w	r1, r8, #4294967295
    422e:	3b01      	subs	r3, #1
    4230:	444b      	add	r3, r9
    4232:	464a      	mov	r2, r9
    4234:	4431      	add	r1, r6
    4236:	4630      	mov	r0, r6
    4238:	f01d fab0 	bl	2179c <BlockWrite>
	setOutputcs(0);
    423c:	4620      	mov	r0, r4
    423e:	f7ff fe95 	bl	3f6c <setOutputcs>
	setOutputDcx(1);
    4242:	2001      	movs	r0, #1
    4244:	f7ff fec8 	bl	3fd8 <setOutputDcx>
			if (pic[j][i]) {
    4248:	f04f 0a32 	mov.w	sl, #50	; 0x32
	for (i = 0; i < height; i++) {
    424c:	9b14      	ldr	r3, [sp, #80]	; 0x50
    424e:	42a3      	cmp	r3, r4
    4250:	d836      	bhi.n	42c0 <DispIcon+0xd4>
	setOutputcs(1);
    4252:	2001      	movs	r0, #1
    4254:	f7ff fe8a 	bl	3f6c <setOutputcs>
    4258:	e7dc      	b.n	4214 <DispIcon+0x28>
			if (pic[j][i]) {
    425a:	fb0a f306 	mul.w	r3, sl, r6
    425e:	f81b 2003 	ldrb.w	r2, [fp, r3]
    4262:	b1d2      	cbz	r2, 429a <DispIcon+0xae>
				data = color >> 8;
    4264:	9b03      	ldr	r3, [sp, #12]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4266:	f04f 0901 	mov.w	r9, #1
				data = color >> 8;
    426a:	0a1b      	lsrs	r3, r3, #8
    426c:	f88d 3018 	strb.w	r3, [sp, #24]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4270:	2200      	movs	r2, #0
    4272:	ab06      	add	r3, sp, #24
    4274:	f8cd 9000 	str.w	r9, [sp]
    4278:	a907      	add	r1, sp, #28
    427a:	4628      	mov	r0, r5
    427c:	f7ff febe 	bl	3ffc <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    4280:	f8cd 9000 	str.w	r9, [sp]
    4284:	ab03      	add	r3, sp, #12
    4286:	2200      	movs	r2, #0
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    4288:	a907      	add	r1, sp, #28
    428a:	4628      	mov	r0, r5
    428c:	f7ff feb6 	bl	3ffc <write_bytes>
		for (j = 0; j < width; j++) {
    4290:	3601      	adds	r6, #1
    4292:	45b0      	cmp	r8, r6
    4294:	d8e1      	bhi.n	425a <DispIcon+0x6e>
	for (i = 0; i < height; i++) {
    4296:	3401      	adds	r4, #1
    4298:	e7d8      	b.n	424c <DispIcon+0x60>
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    429a:	f04f 0901 	mov.w	r9, #1
    429e:	f10d 0317 	add.w	r3, sp, #23
    42a2:	f8cd 9000 	str.w	r9, [sp]
    42a6:	a907      	add	r1, sp, #28
    42a8:	4628      	mov	r0, r5
				unsigned int bg_clr = BLACK;
    42aa:	9206      	str	r2, [sp, #24]
				data = bg_clr >> 8;
    42ac:	f88d 2017 	strb.w	r2, [sp, #23]
				write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    42b0:	9202      	str	r2, [sp, #8]
    42b2:	f7ff fea3 	bl	3ffc <write_bytes>
				write_bytes(spi, &spi_cfg, 0x00, &bg_clr, 1);
    42b6:	9a02      	ldr	r2, [sp, #8]
    42b8:	f8cd 9000 	str.w	r9, [sp]
    42bc:	ab06      	add	r3, sp, #24
    42be:	e7e3      	b.n	4288 <DispIcon+0x9c>
		for (j = 0; j < width; j++) {
    42c0:	2600      	movs	r6, #0
			if (pic[j][i]) {
    42c2:	eb07 0b04 	add.w	fp, r7, r4
    42c6:	e7e4      	b.n	4292 <DispIcon+0xa6>
    42c8:	0002b3fa 	.word	0x0002b3fa
    42cc:	00027c6c 	.word	0x00027c6c

000042d0 <LCD_Init>:
void resetDisplay()
{
	WriteComm(0x01);
}
void LCD_Init(void)
{
    42d0:	b508      	push	{r3, lr}
	init_lcd_output();
    42d2:	f7ff fde7 	bl	3ea4 <init_lcd_output>
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
	int err;
	k_msleep(1);
    42d6:	2001      	movs	r0, #1
    42d8:	f01d fa46 	bl	21768 <k_msleep.isra.0>
	printk("Initialising DISPLAY  : ");
    42dc:	4815      	ldr	r0, [pc, #84]	; (4334 <LCD_Init+0x64>)
    42de:	f01d fc21 	bl	21b24 <printk>
	setOutputVciEn(1);
    42e2:	2001      	movs	r0, #1
    42e4:	f7ff fe66 	bl	3fb4 <setOutputVciEn>
	k_msleep(100);
    42e8:	2064      	movs	r0, #100	; 0x64
    42ea:	f01d fa3d 	bl	21768 <k_msleep.isra.0>
	setOutputcs(1);
    42ee:	2001      	movs	r0, #1
    42f0:	f7ff fe3c 	bl	3f6c <setOutputcs>
	setOutputLcdRst(1);
    42f4:	2001      	movs	r0, #1
    42f6:	f7ff fe4b 	bl	3f90 <setOutputLcdRst>
	k_msleep(80);
    42fa:	2050      	movs	r0, #80	; 0x50
    42fc:	f01d fa34 	bl	21768 <k_msleep.isra.0>
	setOutputLcdRst(0);
    4300:	2000      	movs	r0, #0
    4302:	f7ff fe45 	bl	3f90 <setOutputLcdRst>
	k_msleep(80);
    4306:	2050      	movs	r0, #80	; 0x50
    4308:	f01d fa2e 	bl	21768 <k_msleep.isra.0>
	setOutputLcdRst(1);
    430c:	2001      	movs	r0, #1
    430e:	f7ff fe3f 	bl	3f90 <setOutputLcdRst>
	k_msleep(480);
    4312:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
    4316:	f01d fa27 	bl	21768 <k_msleep.isra.0>
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    431a:	f7ff fe87 	bl	402c <device_get_binding.constprop.0>
	if (!spi) {
    431e:	b920      	cbnz	r0, 432a <LCD_Init+0x5a>
		printk("Could not find SPI driver\n");
    4320:	4805      	ldr	r0, [pc, #20]	; (4338 <LCD_Init+0x68>)
	//spi_cfg.operation = SPI_WORD_SET(8);
	spi_cfg.operation = 256;
	spi_cfg.frequency = spi_freq;
	setDisplay();
	printk("OK\n");
}
    4322:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("OK\n");
    4326:	f01d bbfd 	b.w	21b24 <printk>
	setDisplay();
    432a:	f01d fa66 	bl	217fa <setDisplay>
	printk("OK\n");
    432e:	4803      	ldr	r0, [pc, #12]	; (433c <LCD_Init+0x6c>)
    4330:	e7f7      	b.n	4322 <LCD_Init+0x52>
    4332:	bf00      	nop
    4334:	0002b43d 	.word	0x0002b43d
    4338:	0002b3fa 	.word	0x0002b3fa
    433c:	0002b24b 	.word	0x0002b24b

00004340 <WriteOneDot>:
		}
	}
}

void WriteOneDot(unsigned int color)
{
    4340:	b570      	push	{r4, r5, r6, lr}
    4342:	b088      	sub	sp, #32
	setOutputcs(0);
	setOutputDcx(1);
	const struct device *spi;
	struct spi_config spi_cfg = { 0 };
    4344:	2400      	movs	r4, #0
{
    4346:	9003      	str	r0, [sp, #12]
	setOutputcs(0);
    4348:	2000      	movs	r0, #0
    434a:	f7ff fe0f 	bl	3f6c <setOutputcs>
	setOutputDcx(1);
    434e:	2001      	movs	r0, #1
    4350:	f7ff fe42 	bl	3fd8 <setOutputDcx>
	struct spi_config spi_cfg = { 0 };
    4354:	e9cd 4405 	strd	r4, r4, [sp, #20]
    4358:	9407      	str	r4, [sp, #28]
	spi = device_get_binding(DT_LABEL(DT_ALIAS(spi_2)));
    435a:	f7ff fe67 	bl	402c <device_get_binding.constprop.0>
	if (!spi) {
    435e:	4605      	mov	r5, r0
    4360:	b920      	cbnz	r0, 436c <WriteOneDot+0x2c>
		printk("Could not find SPI driver\n");
    4362:	4811      	ldr	r0, [pc, #68]	; (43a8 <WriteOneDot+0x68>)
    4364:	f01d fbde 	bl	21b24 <printk>
	u8_t data;
	data = color >> 8;
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
	setOutputcs(1);
}
    4368:	b008      	add	sp, #32
    436a:	bd70      	pop	{r4, r5, r6, pc}
	spi_cfg.operation = 256;
    436c:	f44f 7380 	mov.w	r3, #256	; 0x100
    4370:	f8ad 3018 	strh.w	r3, [sp, #24]
	spi_cfg.frequency = spi_freq;
    4374:	4b0d      	ldr	r3, [pc, #52]	; (43ac <WriteOneDot+0x6c>)
    4376:	681b      	ldr	r3, [r3, #0]
    4378:	9305      	str	r3, [sp, #20]
	data = color >> 8;
    437a:	9b03      	ldr	r3, [sp, #12]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    437c:	2601      	movs	r6, #1
	data = color >> 8;
    437e:	0a1b      	lsrs	r3, r3, #8
    4380:	f88d 3013 	strb.w	r3, [sp, #19]
	write_bytes(spi, &spi_cfg, 0x00, &data, 1);
    4384:	4622      	mov	r2, r4
    4386:	f10d 0313 	add.w	r3, sp, #19
    438a:	a905      	add	r1, sp, #20
    438c:	9600      	str	r6, [sp, #0]
    438e:	f7ff fe35 	bl	3ffc <write_bytes>
	write_bytes(spi, &spi_cfg, 0x00, &color, 1);
    4392:	9600      	str	r6, [sp, #0]
    4394:	ab03      	add	r3, sp, #12
    4396:	4622      	mov	r2, r4
    4398:	a905      	add	r1, sp, #20
    439a:	4628      	mov	r0, r5
    439c:	f7ff fe2e 	bl	3ffc <write_bytes>
	setOutputcs(1);
    43a0:	4630      	mov	r0, r6
    43a2:	f7ff fde3 	bl	3f6c <setOutputcs>
    43a6:	e7df      	b.n	4368 <WriteOneDot+0x28>
    43a8:	0002b3fa 	.word	0x0002b3fa
    43ac:	00027c6c 	.word	0x00027c6c

000043b0 <DispOneChar>:
{
    43b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    43b4:	4604      	mov	r4, r0
    43b6:	461e      	mov	r6, r3
    43b8:	4608      	mov	r0, r1
	BlockWrite(Xstart, Xstart + (FONT_W - 1), Ystart,
    43ba:	f102 0314 	add.w	r3, r2, #20
    43be:	310f      	adds	r1, #15
    43c0:	f01d f9ec 	bl	2179c <BlockWrite>
	if (index > 95) //95:ASCII CHAR NUM
    43c4:	4620      	mov	r0, r4
    43c6:	2c5f      	cmp	r4, #95	; 0x5f
	p = p + index;
    43c8:	4c0c      	ldr	r4, [pc, #48]	; (43fc <DispOneChar+0x4c>)
    43ca:	f04f 032a 	mov.w	r3, #42	; 0x2a
    43ce:	bf28      	it	cs
    43d0:	205f      	movcs	r0, #95	; 0x5f
    43d2:	fb03 4400 	mla	r4, r3, r0, r4
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    43d6:	18e7      	adds	r7, r4, r3
		dat = *p++;
    43d8:	f814 8b01 	ldrb.w	r8, [r4], #1
    43dc:	2500      	movs	r5, #0
			if ((dat << j) & 0x80) {
    43de:	fa08 f305 	lsl.w	r3, r8, r5
    43e2:	061b      	lsls	r3, r3, #24
				WriteOneDot(BackColor);
    43e4:	bf54      	ite	pl
    43e6:	9806      	ldrpl	r0, [sp, #24]
				WriteOneDot(TextColor);
    43e8:	4630      	movmi	r0, r6
		for (j = 0; j < 8; j++) {
    43ea:	3501      	adds	r5, #1
				WriteOneDot(BackColor);
    43ec:	f7ff ffa8 	bl	4340 <WriteOneDot>
		for (j = 0; j < 8; j++) {
    43f0:	2d08      	cmp	r5, #8
    43f2:	d1f4      	bne.n	43de <DispOneChar+0x2e>
	for (i = 0; i < (FONT_W / 8 * FONT_H); i++) {
    43f4:	42a7      	cmp	r7, r4
    43f6:	d1ef      	bne.n	43d8 <DispOneChar+0x28>
}
    43f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    43fc:	200008f4 	.word	0x200008f4

00004400 <init_output>:

struct device *globalBuzzer;
struct device *globalMotor;

s16_t init_output()
{
    4400:	b570      	push	{r4, r5, r6, lr}
    4402:	4817      	ldr	r0, [pc, #92]	; (4460 <init_output+0x60>)
    4404:	f01b f998 	bl	1f738 <z_impl_device_get_binding>
    struct device *buzzer;
    int ret;
    buzzer = device_get_binding(BUZZER_GPIO_LABEL);
    if (buzzer == NULL)
    4408:	4606      	mov	r6, r0
    440a:	b930      	cbnz	r0, 441a <init_output+0x1a>
    {
        printk("Didn't find device %s\n", BUZZER_GPIO_LABEL);
    440c:	4815      	ldr	r0, [pc, #84]	; (4464 <init_output+0x64>)
    440e:	4914      	ldr	r1, [pc, #80]	; (4460 <init_output+0x60>)
    4410:	f01d fb88 	bl	21b24 <printk>
        return -1;
    4414:	f04f 30ff 	mov.w	r0, #4294967295
    }
    printk("INITIALISING OUTPUTS : OK\n");
    globalBuzzer = buzzer;
    globalMotor = motor;
    return 0;
}
    4418:	bd70      	pop	{r4, r5, r6, pc}
    ret = gpio_pin_configure(buzzer, BUZZER_GPIO_PIN, BUZZER_GPIO_FLAGS);
    441a:	2104      	movs	r1, #4
    441c:	f01d faaf 	bl	2197e <gpio_pin_configure.constprop.0>
    if (ret != 0)
    4420:	4604      	mov	r4, r0
    4422:	b138      	cbz	r0, 4434 <init_output+0x34>
        printk("Error %d: failed to configure device %s pin %d\n",
    4424:	2304      	movs	r3, #4
        printk("Error %d: failed to configure device %s pin %d\n",
    4426:	4810      	ldr	r0, [pc, #64]	; (4468 <init_output+0x68>)
    4428:	4a0d      	ldr	r2, [pc, #52]	; (4460 <init_output+0x60>)
    442a:	4621      	mov	r1, r4
    442c:	f01d fb7a 	bl	21b24 <printk>
        return ret;
    4430:	b220      	sxth	r0, r4
    4432:	e7f1      	b.n	4418 <init_output+0x18>
    4434:	480a      	ldr	r0, [pc, #40]	; (4460 <init_output+0x60>)
    4436:	f01b f97f 	bl	1f738 <z_impl_device_get_binding>
    if (motor == NULL)
    443a:	4605      	mov	r5, r0
    443c:	2800      	cmp	r0, #0
    443e:	d0e5      	beq.n	440c <init_output+0xc>
    ret = gpio_pin_configure(motor, MOTOR_GPIO_PIN, MOTOR_GPIO_FLAGS);
    4440:	2103      	movs	r1, #3
    4442:	f01d fa9c 	bl	2197e <gpio_pin_configure.constprop.0>
    if (ret != 0)
    4446:	4604      	mov	r4, r0
    4448:	b108      	cbz	r0, 444e <init_output+0x4e>
        printk("Error %d: failed to configure device %s pin %d\n",
    444a:	2303      	movs	r3, #3
    444c:	e7eb      	b.n	4426 <init_output+0x26>
    printk("INITIALISING OUTPUTS : OK\n");
    444e:	4807      	ldr	r0, [pc, #28]	; (446c <init_output+0x6c>)
    4450:	f01d fb68 	bl	21b24 <printk>
    globalBuzzer = buzzer;
    4454:	4b06      	ldr	r3, [pc, #24]	; (4470 <init_output+0x70>)
    4456:	601e      	str	r6, [r3, #0]
    globalMotor = motor;
    4458:	4b06      	ldr	r3, [pc, #24]	; (4474 <init_output+0x74>)
    return 0;
    445a:	4620      	mov	r0, r4
    globalMotor = motor;
    445c:	601d      	str	r5, [r3, #0]
    return 0;
    445e:	e7db      	b.n	4418 <init_output+0x18>
    4460:	0002b120 	.word	0x0002b120
    4464:	0002b32f 	.word	0x0002b32f
    4468:	0002b346 	.word	0x0002b346
    446c:	0002b376 	.word	0x0002b376
    4470:	2000d4e0 	.word	0x2000d4e0
    4474:	2000d4e4 	.word	0x2000d4e4

00004478 <toggle_buzzer>:

bool toggle_buzzer(bool val)
{
    4478:	b538      	push	{r3, r4, r5, lr}
    if (val = 1)
    {
        for (int i = 0; i < 1000; i++)
        {
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    447a:	4d0b      	ldr	r5, [pc, #44]	; (44a8 <toggle_buzzer+0x30>)
{
    447c:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    4480:	6828      	ldr	r0, [r5, #0]
    4482:	2201      	movs	r2, #1
    4484:	2104      	movs	r1, #4
    4486:	f01d fa8a 	bl	2199e <gpio_pin_set.isra.0>
	z_impl_k_busy_wait(usec_to_wait);
    448a:	20fa      	movs	r0, #250	; 0xfa
    448c:	f022 fe2f 	bl	270ee <z_impl_k_busy_wait>
            k_busy_wait(250);
            gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 0);
    4490:	6828      	ldr	r0, [r5, #0]
    4492:	2200      	movs	r2, #0
    4494:	2104      	movs	r1, #4
    4496:	f01d fa82 	bl	2199e <gpio_pin_set.isra.0>
    449a:	20fa      	movs	r0, #250	; 0xfa
    449c:	f022 fe27 	bl	270ee <z_impl_k_busy_wait>
        for (int i = 0; i < 1000; i++)
    44a0:	3c01      	subs	r4, #1
    44a2:	d1ed      	bne.n	4480 <toggle_buzzer+0x8>
        }
    }
    else
        gpio_pin_set(globalBuzzer, BUZZER_GPIO_PIN, 1);
    return val;
}
    44a4:	2001      	movs	r0, #1
    44a6:	bd38      	pop	{r3, r4, r5, pc}
    44a8:	2000d4e0 	.word	0x2000d4e0

000044ac <toggle_motor>:
bool toggle_motor(bool val)
{
    44ac:	b510      	push	{r4, lr}
    if (val)
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    44ae:	4c09      	ldr	r4, [pc, #36]	; (44d4 <toggle_motor+0x28>)
{
    44b0:	4603      	mov	r3, r0
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    44b2:	2201      	movs	r2, #1
    44b4:	6820      	ldr	r0, [r4, #0]
    44b6:	2103      	movs	r1, #3
    if (val)
    44b8:	b14b      	cbz	r3, 44ce <toggle_motor+0x22>
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    44ba:	f01d fa70 	bl	2199e <gpio_pin_set.isra.0>
	return z_impl_k_sleep(timeout);
    44be:	2100      	movs	r1, #0
    44c0:	f44f 5000 	mov.w	r0, #8192	; 0x2000
    44c4:	f01b ffae 	bl	20424 <z_impl_k_sleep>
        k_msleep(250);
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 0);
    44c8:	6820      	ldr	r0, [r4, #0]
    44ca:	2200      	movs	r2, #0
    44cc:	2103      	movs	r1, #3
    }
    else
    {
        gpio_pin_set(globalMotor, MOTOR_GPIO_PIN, 1);
    44ce:	f01d fa66 	bl	2199e <gpio_pin_set.isra.0>
    }
    44d2:	bd10      	pop	{r4, pc}
    44d4:	2000d4e4 	.word	0x2000d4e4

000044d8 <htmc_ccc_cfg_changed>:
	simulate_htm = (value == BT_GATT_CCC_INDICATE) ? 1 : 0;
    44d8:	1e8b      	subs	r3, r1, #2
    44da:	4259      	negs	r1, r3
    44dc:	4159      	adcs	r1, r3
    44de:	4b01      	ldr	r3, [pc, #4]	; (44e4 <htmc_ccc_cfg_changed+0xc>)
    44e0:	7019      	strb	r1, [r3, #0]
}
    44e2:	4770      	bx	lr
    44e4:	2000ed88 	.word	0x2000ed88

000044e8 <indicate_destroy>:
{
    44e8:	b508      	push	{r3, lr}
	printk("Indication complete\n");
    44ea:	4803      	ldr	r0, [pc, #12]	; (44f8 <indicate_destroy+0x10>)
    44ec:	f01d fb1a 	bl	21b24 <printk>
	indicating = 0U;
    44f0:	4b02      	ldr	r3, [pc, #8]	; (44fc <indicate_destroy+0x14>)
    44f2:	2200      	movs	r2, #0
    44f4:	701a      	strb	r2, [r3, #0]
}
    44f6:	bd08      	pop	{r3, pc}
    44f8:	0002b456 	.word	0x0002b456
    44fc:	2000ed87 	.word	0x2000ed87

00004500 <indicate_cb>:
	printk("Indication %s\n", err != 0U ? "fail" : "success");
    4500:	4903      	ldr	r1, [pc, #12]	; (4510 <indicate_cb+0x10>)
    4502:	4b04      	ldr	r3, [pc, #16]	; (4514 <indicate_cb+0x14>)
    4504:	4804      	ldr	r0, [pc, #16]	; (4518 <indicate_cb+0x18>)
    4506:	2a00      	cmp	r2, #0
    4508:	bf08      	it	eq
    450a:	4619      	moveq	r1, r3
    450c:	f01d bb0a 	b.w	21b24 <printk>
    4510:	0002b46b 	.word	0x0002b46b
    4514:	0002b470 	.word	0x0002b470
    4518:	0002b478 	.word	0x0002b478

0000451c <hts_init>:
{
    451c:	b508      	push	{r3, lr}
    451e:	4809      	ldr	r0, [pc, #36]	; (4544 <hts_init+0x28>)
    4520:	f01b f90a 	bl	1f738 <z_impl_device_get_binding>
	temp_dev = device_get_binding("TEMP_0");
    4524:	4b08      	ldr	r3, [pc, #32]	; (4548 <hts_init+0x2c>)
    4526:	4601      	mov	r1, r0
    4528:	6018      	str	r0, [r3, #0]
	if (!temp_dev) {
    452a:	b920      	cbnz	r0, 4536 <hts_init+0x1a>
}
    452c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		printk("error: no temp device\n");
    4530:	4806      	ldr	r0, [pc, #24]	; (454c <hts_init+0x30>)
    4532:	f01d baf7 	b.w	21b24 <printk>
	printk("temp device is %p, name is %s\n", temp_dev,
    4536:	6802      	ldr	r2, [r0, #0]
    4538:	4805      	ldr	r0, [pc, #20]	; (4550 <hts_init+0x34>)
}
    453a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	printk("temp device is %p, name is %s\n", temp_dev,
    453e:	f01d baf1 	b.w	21b24 <printk>
    4542:	bf00      	nop
    4544:	0002b487 	.word	0x0002b487
    4548:	2000d500 	.word	0x2000d500
    454c:	0002b48e 	.word	0x0002b48e
    4550:	0002b4a5 	.word	0x0002b4a5

00004554 <crc8_ccitt>:
	0x00, 0x07, 0x0e, 0x09, 0x1c, 0x1b, 0x12, 0x15,
	0x38, 0x3f, 0x36, 0x31, 0x24, 0x23, 0x2a, 0x2d
};

uint8_t crc8_ccitt(uint8_t val, const void *buf, size_t cnt)
{
    4554:	b530      	push	{r4, r5, lr}
	size_t i;
	const uint8_t *p = buf;

	for (i = 0; i < cnt; i++) {
		val ^= p[i];
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    4556:	4c0a      	ldr	r4, [pc, #40]	; (4580 <crc8_ccitt+0x2c>)
    4558:	440a      	add	r2, r1
	for (i = 0; i < cnt; i++) {
    455a:	4291      	cmp	r1, r2
    455c:	d100      	bne.n	4560 <crc8_ccitt+0xc>
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
	}
	return val;
}
    455e:	bd30      	pop	{r4, r5, pc}
		val ^= p[i];
    4560:	f811 3b01 	ldrb.w	r3, [r1], #1
    4564:	4058      	eors	r0, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    4566:	0903      	lsrs	r3, r0, #4
    4568:	5ce3      	ldrb	r3, [r4, r3]
    456a:	ea83 1300 	eor.w	r3, r3, r0, lsl #4
    456e:	b2dd      	uxtb	r5, r3
		val = (val << 4) ^ crc8_ccitt_small_table[val >> 4];
    4570:	f3c3 1303 	ubfx	r3, r3, #4, #4
    4574:	5ce0      	ldrb	r0, [r4, r3]
    4576:	ea80 1005 	eor.w	r0, r0, r5, lsl #4
    457a:	b2c0      	uxtb	r0, r0
	for (i = 0; i < cnt; i++) {
    457c:	e7ed      	b.n	455a <crc8_ccitt+0x6>
    457e:	bf00      	nop
    4580:	0002b526 	.word	0x0002b526

00004584 <char_out>:

static int char_out(int c, void *ctx_p)
{
	struct out_context *ctx = ctx_p;

	ctx->count++;
    4584:	680b      	ldr	r3, [r1, #0]
    4586:	3301      	adds	r3, #1
    4588:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    458a:	4b01      	ldr	r3, [pc, #4]	; (4590 <char_out+0xc>)
    458c:	681b      	ldr	r3, [r3, #0]
    458e:	4718      	bx	r3
    4590:	2000027c 	.word	0x2000027c

00004594 <__printk_hook_install>:
	_char_out = fn;
    4594:	4b01      	ldr	r3, [pc, #4]	; (459c <__printk_hook_install+0x8>)
    4596:	6018      	str	r0, [r3, #0]
}
    4598:	4770      	bx	lr
    459a:	bf00      	nop
    459c:	2000027c 	.word	0x2000027c

000045a0 <vprintk>:
#endif
	}
}
#else
void vprintk(const char *fmt, va_list ap)
{
    45a0:	b507      	push	{r0, r1, r2, lr}
    45a2:	460b      	mov	r3, r1
	struct out_context ctx = { 0 };
    45a4:	2100      	movs	r1, #0
{
    45a6:	4602      	mov	r2, r0
	struct out_context ctx = { 0 };
    45a8:	9101      	str	r1, [sp, #4]
#ifdef CONFIG_PRINTK_SYNC
	k_spinlock_key_t key = k_spin_lock(&lock);
#endif

	cbvprintf(char_out, &ctx, fmt, ap);
    45aa:	4803      	ldr	r0, [pc, #12]	; (45b8 <vprintk+0x18>)
    45ac:	a901      	add	r1, sp, #4
    45ae:	f000 f8f9 	bl	47a4 <cbvprintf>

#ifdef CONFIG_PRINTK_SYNC
	k_spin_unlock(&lock, key);
#endif
}
    45b2:	b003      	add	sp, #12
    45b4:	f85d fb04 	ldr.w	pc, [sp], #4
    45b8:	00004585 	.word	0x00004585

000045bc <vsnprintk>:

	return ret;
}

int vsnprintk(char *str, size_t size, const char *fmt, va_list ap)
{
    45bc:	b530      	push	{r4, r5, lr}
    45be:	b085      	sub	sp, #20
	struct str_context ctx = { str, size, 0 };
    45c0:	e9cd 0101 	strd	r0, r1, [sp, #4]
{
    45c4:	4604      	mov	r4, r0
	struct str_context ctx = { str, size, 0 };
    45c6:	2500      	movs	r5, #0

	cbvprintf(str_out, &ctx, fmt, ap);
    45c8:	a901      	add	r1, sp, #4
    45ca:	4805      	ldr	r0, [pc, #20]	; (45e0 <vsnprintk+0x24>)
	struct str_context ctx = { str, size, 0 };
    45cc:	9503      	str	r5, [sp, #12]
	cbvprintf(str_out, &ctx, fmt, ap);
    45ce:	f000 f8e9 	bl	47a4 <cbvprintf>

	if (ctx.count < ctx.max) {
    45d2:	e9dd 3002 	ldrd	r3, r0, [sp, #8]
    45d6:	4298      	cmp	r0, r3
		str[ctx.count] = '\0';
    45d8:	bfb8      	it	lt
    45da:	5425      	strblt	r5, [r4, r0]
	}

	return ctx.count;
}
    45dc:	b005      	add	sp, #20
    45de:	bd30      	pop	{r4, r5, pc}
    45e0:	00021aff 	.word	0x00021aff

000045e4 <process_event>:
 * regions.
 */
static void process_event(struct onoff_manager *mgr,
			  int evt,
			  k_spinlock_key_t key)
{
    45e4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	sys_slist_t clients;
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    45e8:	f8b0 9018 	ldrh.w	r9, [r0, #24]
	__ASSERT_NO_MSG(evt != EVT_NOP);

	/* If this is a nested call record the event for processing in
	 * the top invocation.
	 */
	if (processing) {
    45ec:	f019 0808 	ands.w	r8, r9, #8
{
    45f0:	4604      	mov	r4, r0
    45f2:	4693      	mov	fp, r2
	if (processing) {
    45f4:	d00d      	beq.n	4612 <process_event+0x2e>
		if (evt == EVT_COMPLETE) {
    45f6:	2901      	cmp	r1, #1
			mgr->flags |= ONOFF_FLAG_COMPLETE;
    45f8:	bf0c      	ite	eq
    45fa:	f049 0910 	orreq.w	r9, r9, #16
		} else {
			__ASSERT_NO_MSG(evt == EVT_RECHECK);

			mgr->flags |= ONOFF_FLAG_RECHECK;
    45fe:	f049 0920 	orrne.w	r9, r9, #32
    4602:	f8a0 9018 	strh.w	r9, [r0, #24]
	__asm__ volatile(
		"cpsie i;"
		"isb"
		: : : "memory");
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile(
    4606:	f38b 8811 	msr	BASEPRI, fp
    460a:	f3bf 8f6f 	isb	sy
		state = mgr->flags & ONOFF_STATE_MASK;
	} while (evt != EVT_NOP);

out:
	k_spin_unlock(&mgr->lock, key);
}
    460e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    4612:	f009 0907 	and.w	r9, r9, #7
		if (evt == EVT_RECHECK) {
    4616:	2902      	cmp	r1, #2
    4618:	d107      	bne.n	462a <process_event+0x46>
			evt = process_recheck(mgr);
    461a:	4620      	mov	r0, r4
    461c:	f01d fa9c 	bl	21b58 <process_recheck>
		if (evt == EVT_NOP) {
    4620:	2800      	cmp	r0, #0
    4622:	d0f0      	beq.n	4606 <process_event+0x22>
		if (evt == EVT_COMPLETE) {
    4624:	2801      	cmp	r0, #1
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4626:	8b23      	ldrh	r3, [r4, #24]
		if (evt == EVT_COMPLETE) {
    4628:	d14e      	bne.n	46c8 <process_event+0xe4>
			res = mgr->last_res;
    462a:	6967      	ldr	r7, [r4, #20]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    462c:	8b21      	ldrh	r1, [r4, #24]
	if (res < 0) {
    462e:	2f00      	cmp	r7, #0
    4630:	da15      	bge.n	465e <process_event+0x7a>
		*clients = mgr->clients;
    4632:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4634:	f021 0107 	bic.w	r1, r1, #7
 * @param list A pointer on the list to initialize
 */
static inline void sys_slist_init(sys_slist_t *list)
{
	list->head = NULL;
	list->tail = NULL;
    4638:	e9c4 8800 	strd	r8, r8, [r4]
    463c:	f041 0101 	orr.w	r1, r1, #1
	mgr->flags = (state & ONOFF_STATE_MASK)
    4640:	8321      	strh	r1, [r4, #24]
		onoff_transition_fn transit = NULL;
    4642:	2600      	movs	r6, #0
		bool do_monitors = (state != (mgr->flags & ONOFF_STATE_MASK))
    4644:	8b21      	ldrh	r1, [r4, #24]
    4646:	f001 0a07 	and.w	sl, r1, #7
				   && !sys_slist_is_empty(&mgr->monitors);
    464a:	45ca      	cmp	sl, r9
    464c:	d002      	beq.n	4654 <process_event+0x70>
		if (do_monitors
    464e:	68a3      	ldr	r3, [r4, #8]
    4650:	2b00      	cmp	r3, #0
    4652:	d15a      	bne.n	470a <process_event+0x126>
		    || !sys_slist_is_empty(&clients)
    4654:	b90d      	cbnz	r5, 465a <process_event+0x76>
		    || (transit != NULL)) {
    4656:	2e00      	cmp	r6, #0
    4658:	d071      	beq.n	473e <process_event+0x15a>
    465a:	2300      	movs	r3, #0
    465c:	e056      	b.n	470c <process_event+0x128>
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
    465e:	f001 0307 	and.w	r3, r1, #7
		   || (state == ONOFF_STATE_RESETTING)) {
    4662:	1f5a      	subs	r2, r3, #5
	} else if ((state == ONOFF_STATE_TO_ON)
    4664:	2a01      	cmp	r2, #1
    4666:	d81e      	bhi.n	46a6 <process_event+0xc2>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4668:	f021 0107 	bic.w	r1, r1, #7
		if (state == ONOFF_STATE_TO_ON) {
    466c:	2b06      	cmp	r3, #6
		*clients = mgr->clients;
    466e:	6825      	ldr	r5, [r4, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    4670:	b289      	uxth	r1, r1
    4672:	e9c4 8800 	strd	r8, r8, [r4]
		if (state == ONOFF_STATE_TO_ON) {
    4676:	d10a      	bne.n	468e <process_event+0xaa>
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4678:	b13d      	cbz	r5, 468a <process_event+0xa6>
    467a:	8b63      	ldrh	r3, [r4, #26]
    467c:	462a      	mov	r2, r5

#define SYS_SLIST_STATIC_INIT(ptr_to_list) {NULL, NULL}

static inline sys_snode_t *z_snode_next_peek(sys_snode_t *node)
{
	return node->next;
    467e:	6812      	ldr	r2, [r2, #0]
				mgr->refs += 1U;
    4680:	3301      	adds	r3, #1
    4682:	b29b      	uxth	r3, r3
			SYS_SLIST_FOR_EACH_CONTAINER(clients, cp, node) {
    4684:	2a00      	cmp	r2, #0
    4686:	d1fa      	bne.n	467e <process_event+0x9a>
    4688:	8363      	strh	r3, [r4, #26]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    468a:	f041 0102 	orr.w	r1, r1, #2
	mgr->flags = (state & ONOFF_STATE_MASK)
    468e:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    4690:	4620      	mov	r0, r4
    4692:	f01d fa61 	bl	21b58 <process_recheck>
    4696:	4606      	mov	r6, r0
    4698:	2800      	cmp	r0, #0
    469a:	d0d3      	beq.n	4644 <process_event+0x60>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    469c:	8b23      	ldrh	r3, [r4, #24]
    469e:	f043 0320 	orr.w	r3, r3, #32
    46a2:	8323      	strh	r3, [r4, #24]
    46a4:	e7cd      	b.n	4642 <process_event+0x5e>
	} else if (state == ONOFF_STATE_TO_OFF) {
    46a6:	2b04      	cmp	r3, #4
    46a8:	d10c      	bne.n	46c4 <process_event+0xe0>
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46aa:	f021 0107 	bic.w	r1, r1, #7
    46ae:	b289      	uxth	r1, r1
	mgr->flags = (state & ONOFF_STATE_MASK)
    46b0:	8321      	strh	r1, [r4, #24]
		if (process_recheck(mgr) != EVT_NOP) {
    46b2:	4620      	mov	r0, r4
    46b4:	f01d fa50 	bl	21b58 <process_recheck>
    46b8:	4605      	mov	r5, r0
    46ba:	2800      	cmp	r0, #0
    46bc:	d0c1      	beq.n	4642 <process_event+0x5e>
			mgr->flags |= ONOFF_FLAG_RECHECK;
    46be:	f041 0120 	orr.w	r1, r1, #32
    46c2:	8321      	strh	r1, [r4, #24]
    46c4:	2500      	movs	r5, #0
    46c6:	e7bc      	b.n	4642 <process_event+0x5e>
		} else if (evt == EVT_START) {
    46c8:	2803      	cmp	r0, #3
    46ca:	d109      	bne.n	46e0 <process_event+0xfc>
			transit = mgr->transitions->start;
    46cc:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46ce:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->start;
    46d2:	6816      	ldr	r6, [r2, #0]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46d4:	f043 0306 	orr.w	r3, r3, #6
	mgr->flags = (state & ONOFF_STATE_MASK)
    46d8:	8323      	strh	r3, [r4, #24]
}
    46da:	2500      	movs	r5, #0
		res = 0;
    46dc:	462f      	mov	r7, r5
    46de:	e7b1      	b.n	4644 <process_event+0x60>
		} else if (evt == EVT_STOP) {
    46e0:	2804      	cmp	r0, #4
    46e2:	d106      	bne.n	46f2 <process_event+0x10e>
			transit = mgr->transitions->stop;
    46e4:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46e6:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->stop;
    46ea:	6856      	ldr	r6, [r2, #4]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46ec:	f043 0304 	orr.w	r3, r3, #4
    46f0:	e7f2      	b.n	46d8 <process_event+0xf4>
		} else if (evt == EVT_RESET) {
    46f2:	2805      	cmp	r0, #5
    46f4:	d106      	bne.n	4704 <process_event+0x120>
			transit = mgr->transitions->reset;
    46f6:	6922      	ldr	r2, [r4, #16]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46f8:	f023 0307 	bic.w	r3, r3, #7
			transit = mgr->transitions->reset;
    46fc:	6896      	ldr	r6, [r2, #8]
		     | (mgr->flags & ~ONOFF_STATE_MASK);
    46fe:	f043 0305 	orr.w	r3, r3, #5
    4702:	e7e9      	b.n	46d8 <process_event+0xf4>
    4704:	2500      	movs	r5, #0
		onoff_transition_fn transit = NULL;
    4706:	462e      	mov	r6, r5
    4708:	e7e8      	b.n	46dc <process_event+0xf8>
				   && !sys_slist_is_empty(&mgr->monitors);
    470a:	2301      	movs	r3, #1
			uint32_t flags = mgr->flags | ONOFF_FLAG_PROCESSING;
    470c:	f041 0108 	orr.w	r1, r1, #8
			mgr->flags = flags;
    4710:	8321      	strh	r1, [r4, #24]
    4712:	f38b 8811 	msr	BASEPRI, fp
    4716:	f3bf 8f6f 	isb	sy
			if (do_monitors) {
    471a:	b9fb      	cbnz	r3, 475c <process_event+0x178>
	while (!sys_slist_is_empty(list)) {
    471c:	bb85      	cbnz	r5, 4780 <process_event+0x19c>
			if (transit != NULL) {
    471e:	b116      	cbz	r6, 4726 <process_event+0x142>
				transit(mgr, transition_complete);
    4720:	491f      	ldr	r1, [pc, #124]	; (47a0 <process_event+0x1bc>)
    4722:	4620      	mov	r0, r4
    4724:	47b0      	blx	r6
	__asm__ volatile(
    4726:	f04f 0320 	mov.w	r3, #32
    472a:	f3ef 8b11 	mrs	fp, BASEPRI
    472e:	f383 8811 	msr	BASEPRI, r3
    4732:	f3bf 8f6f 	isb	sy
			mgr->flags &= ~ONOFF_FLAG_PROCESSING;
    4736:	8b23      	ldrh	r3, [r4, #24]
    4738:	f023 0308 	bic.w	r3, r3, #8
    473c:	8323      	strh	r3, [r4, #24]
		if ((mgr->flags & ONOFF_FLAG_COMPLETE) != 0) {
    473e:	8b23      	ldrh	r3, [r4, #24]
    4740:	06da      	lsls	r2, r3, #27
    4742:	d525      	bpl.n	4790 <process_event+0x1ac>
			mgr->flags &= ~ONOFF_FLAG_COMPLETE;
    4744:	f023 0310 	bic.w	r3, r3, #16
    4748:	8323      	strh	r3, [r4, #24]
			evt = EVT_COMPLETE;
    474a:	2101      	movs	r1, #1
		state = mgr->flags & ONOFF_STATE_MASK;
    474c:	f8b4 9018 	ldrh.w	r9, [r4, #24]
    4750:	f009 0907 	and.w	r9, r9, #7
	} while (evt != EVT_NOP);
    4754:	2900      	cmp	r1, #0
    4756:	f47f af5e 	bne.w	4616 <process_event+0x32>
out:
    475a:	e754      	b.n	4606 <process_event+0x22>
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_head(sys_slist_t *list)
{
	return list->head;
    475c:	68a1      	ldr	r1, [r4, #8]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    475e:	2900      	cmp	r1, #0
    4760:	d0dc      	beq.n	471c <process_event+0x138>
	return node->next;
    4762:	f8d1 9000 	ldr.w	r9, [r1]
		mon->callback(mgr, mon, state, res);
    4766:	f8d1 b004 	ldr.w	fp, [r1, #4]
    476a:	463b      	mov	r3, r7
    476c:	4652      	mov	r2, sl
    476e:	4620      	mov	r0, r4
    4770:	47d8      	blx	fp
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(mlist, mon, tmp, node) {
    4772:	f1b9 0f00 	cmp.w	r9, #0
    4776:	d0d1      	beq.n	471c <process_event+0x138>
    4778:	4649      	mov	r1, r9
    477a:	f8d9 9000 	ldr.w	r9, [r9]
    477e:	e7f2      	b.n	4766 <process_event+0x182>
    4780:	4629      	mov	r1, r5
		notify_one(mgr, cli, state, res);
    4782:	463b      	mov	r3, r7
    4784:	4652      	mov	r2, sl
    4786:	4620      	mov	r0, r4
    4788:	682d      	ldr	r5, [r5, #0]
    478a:	f01d fa01 	bl	21b90 <notify_one>
    478e:	e7c5      	b.n	471c <process_event+0x138>
		} else if ((mgr->flags & ONOFF_FLAG_RECHECK) != 0) {
    4790:	f013 0120 	ands.w	r1, r3, #32
			mgr->flags &= ~ONOFF_FLAG_RECHECK;
    4794:	bf1e      	ittt	ne
    4796:	f023 0320 	bicne.w	r3, r3, #32
    479a:	8323      	strhne	r3, [r4, #24]
			evt = EVT_RECHECK;
    479c:	2102      	movne	r1, #2
    479e:	e7d5      	b.n	474c <process_event+0x168>
    47a0:	00021bbd 	.word	0x00021bbd

000047a4 <cbvprintf>:

	return (int)count;
}

int cbvprintf(cbprintf_cb out, void *ctx, const char *fp, va_list ap)
{
    47a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    47a8:	4681      	mov	r9, r0
    47aa:	b09b      	sub	sp, #108	; 0x6c
    47ac:	468a      	mov	sl, r1
    47ae:	4615      	mov	r5, r2
    47b0:	461c      	mov	r4, r3
	char buf[CONVERTED_BUFLEN];
	size_t count = 0;
    47b2:	2600      	movs	r6, #0
		return rc; \
	} \
	count += rc; \
} while (false)

	while (*fp != 0) {
    47b4:	7828      	ldrb	r0, [r5, #0]
    47b6:	b910      	cbnz	r0, 47be <cbvprintf+0x1a>
			OUTC(' ');
			--width;
		}
	}

	return count;
    47b8:	4630      	mov	r0, r6
    47ba:	f000 bdee 	b.w	539a <cbvprintf+0xbf6>
			OUTC(*fp++);
    47be:	1c6b      	adds	r3, r5, #1
		if (*fp != '%') {
    47c0:	2825      	cmp	r0, #37	; 0x25
			OUTC(*fp++);
    47c2:	9302      	str	r3, [sp, #8]
		if (*fp != '%') {
    47c4:	d006      	beq.n	47d4 <cbvprintf+0x30>
			OUTC(*fp++);
    47c6:	4651      	mov	r1, sl
			OUTC('%');
    47c8:	47c8      	blx	r9
    47ca:	2800      	cmp	r0, #0
    47cc:	f2c0 85e5 	blt.w	539a <cbvprintf+0xbf6>
    47d0:	3601      	adds	r6, #1
		if (bps == NULL) {
    47d2:	e24c      	b.n	4c6e <cbvprintf+0x4ca>
		} state = {
    47d4:	2218      	movs	r2, #24
    47d6:	2100      	movs	r1, #0
    47d8:	a80c      	add	r0, sp, #48	; 0x30
    47da:	f01f fe70 	bl	244be <memset>
	if (*sp == '%') {
    47de:	786b      	ldrb	r3, [r5, #1]
    47e0:	2b25      	cmp	r3, #37	; 0x25
    47e2:	d07c      	beq.n	48de <cbvprintf+0x13a>
    47e4:	2200      	movs	r2, #0
    47e6:	1c68      	adds	r0, r5, #1
    47e8:	4696      	mov	lr, r2
    47ea:	4690      	mov	r8, r2
    47ec:	4694      	mov	ip, r2
    47ee:	4617      	mov	r7, r2
    47f0:	4601      	mov	r1, r0
		switch (*sp) {
    47f2:	f810 3b01 	ldrb.w	r3, [r0], #1
    47f6:	2b2b      	cmp	r3, #43	; 0x2b
    47f8:	f000 80a0 	beq.w	493c <cbvprintf+0x198>
    47fc:	f200 8097 	bhi.w	492e <cbvprintf+0x18a>
    4800:	2b20      	cmp	r3, #32
    4802:	f000 809e 	beq.w	4942 <cbvprintf+0x19e>
    4806:	2b23      	cmp	r3, #35	; 0x23
    4808:	f000 809e 	beq.w	4948 <cbvprintf+0x1a4>
    480c:	b12f      	cbz	r7, 481a <cbvprintf+0x76>
    480e:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4812:	f040 0004 	orr.w	r0, r0, #4
    4816:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    481a:	f1bc 0f00 	cmp.w	ip, #0
    481e:	d005      	beq.n	482c <cbvprintf+0x88>
    4820:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4824:	f040 0008 	orr.w	r0, r0, #8
    4828:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    482c:	f1b8 0f00 	cmp.w	r8, #0
    4830:	d005      	beq.n	483e <cbvprintf+0x9a>
    4832:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4836:	f040 0010 	orr.w	r0, r0, #16
    483a:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    483e:	f1be 0f00 	cmp.w	lr, #0
    4842:	d005      	beq.n	4850 <cbvprintf+0xac>
    4844:	f89d 0038 	ldrb.w	r0, [sp, #56]	; 0x38
    4848:	f040 0020 	orr.w	r0, r0, #32
    484c:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
    4850:	b12a      	cbz	r2, 485e <cbvprintf+0xba>
    4852:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4856:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    485a:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (conv->flag_zero && conv->flag_dash) {
    485e:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4862:	f002 0044 	and.w	r0, r2, #68	; 0x44
    4866:	2844      	cmp	r0, #68	; 0x44
    4868:	d103      	bne.n	4872 <cbvprintf+0xce>
		conv->flag_zero = false;
    486a:	f36f 1286 	bfc	r2, #6, #1
    486e:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	conv->width_present = true;
    4872:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    4876:	2b2a      	cmp	r3, #42	; 0x2a
	conv->width_present = true;
    4878:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    487c:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	if (*sp == '*') {
    4880:	d17e      	bne.n	4980 <cbvprintf+0x1dc>
		conv->width_star = true;
    4882:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4886:	f042 0201 	orr.w	r2, r2, #1
			++sp;
    488a:	1c4b      	adds	r3, r1, #1
		conv->width_star = true;
    488c:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	conv->prec_present = (*sp == '.');
    4890:	781a      	ldrb	r2, [r3, #0]
    4892:	2a2e      	cmp	r2, #46	; 0x2e
    4894:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4898:	bf0c      	ite	eq
    489a:	2101      	moveq	r1, #1
    489c:	2100      	movne	r1, #0
    489e:	f361 0241 	bfi	r2, r1, #1, #1
    48a2:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
	if (!conv->prec_present) {
    48a6:	d177      	bne.n	4998 <cbvprintf+0x1f4>
	if (*sp == '*') {
    48a8:	785a      	ldrb	r2, [r3, #1]
    48aa:	2a2a      	cmp	r2, #42	; 0x2a
    48ac:	d06d      	beq.n	498a <cbvprintf+0x1e6>
	++sp;
    48ae:	3301      	adds	r3, #1
	size_t val = 0;
    48b0:	2100      	movs	r1, #0
		val = 10U * val + *sp++ - '0';
    48b2:	f04f 0c0a 	mov.w	ip, #10
			(((unsigned)c) <= (unsigned)'~'));
}

static inline int isdigit(int a)
{
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    48b6:	4618      	mov	r0, r3
    48b8:	f810 2b01 	ldrb.w	r2, [r0], #1
    48bc:	f1a2 0730 	sub.w	r7, r2, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    48c0:	2f09      	cmp	r7, #9
    48c2:	f240 80ab 	bls.w	4a1c <cbvprintf+0x278>
	conv->unsupported |= ((conv->prec_value < 0)
    48c6:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
	conv->prec_value = prec;
    48ca:	9110      	str	r1, [sp, #64]	; 0x40
	conv->unsupported |= ((conv->prec_value < 0)
    48cc:	f3c2 0040 	ubfx	r0, r2, #1, #1
    48d0:	ea40 71d1 	orr.w	r1, r0, r1, lsr #31
    48d4:	f361 0241 	bfi	r2, r1, #1, #1
    48d8:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    48dc:	e05c      	b.n	4998 <cbvprintf+0x1f4>
		conv->specifier = *sp++;
    48de:	1caa      	adds	r2, r5, #2
    48e0:	9202      	str	r2, [sp, #8]
    48e2:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
		if (conv->width_star) {
    48e6:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    48ea:	07df      	lsls	r7, r3, #31
    48ec:	f140 8173 	bpl.w	4bd6 <cbvprintf+0x432>
			width = va_arg(ap, int);
    48f0:	f854 bb04 	ldr.w	fp, [r4], #4
			if (width < 0) {
    48f4:	f1bb 0f00 	cmp.w	fp, #0
    48f8:	da07      	bge.n	490a <cbvprintf+0x166>
				conv->flag_dash = true;
    48fa:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    48fe:	f042 0204 	orr.w	r2, r2, #4
    4902:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
				width = -width;
    4906:	f1cb 0b00 	rsb	fp, fp, #0
		if (conv->prec_star) {
    490a:	0758      	lsls	r0, r3, #29
    490c:	f140 816c 	bpl.w	4be8 <cbvprintf+0x444>
			int arg = va_arg(ap, int);
    4910:	f854 8b04 	ldr.w	r8, [r4], #4
			if (arg < 0) {
    4914:	f1b8 0f00 	cmp.w	r8, #0
    4918:	f280 816b 	bge.w	4bf2 <cbvprintf+0x44e>
				conv->prec_present = false;
    491c:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4920:	f36f 0341 	bfc	r3, #1, #1
    4924:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		int precision = -1;
    4928:	f04f 38ff 	mov.w	r8, #4294967295
    492c:	e161      	b.n	4bf2 <cbvprintf+0x44e>
		switch (*sp) {
    492e:	2b2d      	cmp	r3, #45	; 0x2d
    4930:	d00d      	beq.n	494e <cbvprintf+0x1aa>
    4932:	2b30      	cmp	r3, #48	; 0x30
    4934:	f47f af6a 	bne.w	480c <cbvprintf+0x68>
			conv->flag_zero = true;
    4938:	2201      	movs	r2, #1
	} while (loop);
    493a:	e759      	b.n	47f0 <cbvprintf+0x4c>
			conv->flag_plus = true;
    493c:	f04f 0c01 	mov.w	ip, #1
    4940:	e756      	b.n	47f0 <cbvprintf+0x4c>
			conv->flag_space = true;
    4942:	f04f 0801 	mov.w	r8, #1
    4946:	e753      	b.n	47f0 <cbvprintf+0x4c>
			conv->flag_hash = true;
    4948:	f04f 0e01 	mov.w	lr, #1
    494c:	e750      	b.n	47f0 <cbvprintf+0x4c>
		switch (*sp) {
    494e:	2701      	movs	r7, #1
    4950:	e74e      	b.n	47f0 <cbvprintf+0x4c>
		val = 10U * val + *sp++ - '0';
    4952:	fb0c 7202 	mla	r2, ip, r2, r7
    4956:	3a30      	subs	r2, #48	; 0x30
    4958:	4603      	mov	r3, r0
    495a:	4618      	mov	r0, r3
    495c:	f810 7b01 	ldrb.w	r7, [r0], #1
    4960:	f1a7 0e30 	sub.w	lr, r7, #48	; 0x30
	while (isdigit((int)(unsigned char)*sp)) {
    4964:	f1be 0f09 	cmp.w	lr, #9
    4968:	d9f3      	bls.n	4952 <cbvprintf+0x1ae>
	if (sp != wp) {
    496a:	4299      	cmp	r1, r3
    496c:	d090      	beq.n	4890 <cbvprintf+0xec>
		conv->unsupported |= ((conv->width_value < 0)
    496e:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		conv->width_value = width;
    4972:	920f      	str	r2, [sp, #60]	; 0x3c
				      || (width != (size_t)conv->width_value));
    4974:	0fd2      	lsrs	r2, r2, #31
		conv->unsupported |= ((conv->width_value < 0)
    4976:	f362 0141 	bfi	r1, r2, #1, #1
    497a:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
    497e:	e787      	b.n	4890 <cbvprintf+0xec>
    4980:	460b      	mov	r3, r1
	size_t val = 0;
    4982:	2200      	movs	r2, #0
		val = 10U * val + *sp++ - '0';
    4984:	f04f 0c0a 	mov.w	ip, #10
    4988:	e7e7      	b.n	495a <cbvprintf+0x1b6>
		conv->prec_star = true;
    498a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    498e:	f042 0204 	orr.w	r2, r2, #4
    4992:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
		return ++sp;
    4996:	3302      	adds	r3, #2
	switch (*sp) {
    4998:	4619      	mov	r1, r3
    499a:	f811 2b01 	ldrb.w	r2, [r1], #1
    499e:	2a6c      	cmp	r2, #108	; 0x6c
    49a0:	d05c      	beq.n	4a5c <cbvprintf+0x2b8>
    49a2:	d840      	bhi.n	4a26 <cbvprintf+0x282>
    49a4:	2a68      	cmp	r2, #104	; 0x68
    49a6:	d046      	beq.n	4a36 <cbvprintf+0x292>
    49a8:	2a6a      	cmp	r2, #106	; 0x6a
    49aa:	d061      	beq.n	4a70 <cbvprintf+0x2cc>
    49ac:	2a4c      	cmp	r2, #76	; 0x4c
    49ae:	d067      	beq.n	4a80 <cbvprintf+0x2dc>
    49b0:	4619      	mov	r1, r3
	conv->specifier = *sp++;
    49b2:	460b      	mov	r3, r1
    49b4:	f813 2b01 	ldrb.w	r2, [r3], #1
    49b8:	9302      	str	r3, [sp, #8]
	switch (conv->specifier) {
    49ba:	2a78      	cmp	r2, #120	; 0x78
	conv->specifier = *sp++;
    49bc:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
	switch (conv->specifier) {
    49c0:	f200 80df 	bhi.w	4b82 <cbvprintf+0x3de>
    49c4:	2a57      	cmp	r2, #87	; 0x57
    49c6:	d868      	bhi.n	4a9a <cbvprintf+0x2f6>
    49c8:	2a41      	cmp	r2, #65	; 0x41
    49ca:	d004      	beq.n	49d6 <cbvprintf+0x232>
    49cc:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    49d0:	2b02      	cmp	r3, #2
    49d2:	f200 80d6 	bhi.w	4b82 <cbvprintf+0x3de>
		conv->specifier_cat = SPECIFIER_FP;
    49d6:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    49da:	f002 02df 	and.w	r2, r2, #223	; 0xdf
		conv->specifier_cat = SPECIFIER_FP;
    49de:	2104      	movs	r1, #4
			|| (conv->specifier == 'A');
    49e0:	f1a2 0841 	sub.w	r8, r2, #65	; 0x41
		conv->specifier_cat = SPECIFIER_FP;
    49e4:	f361 0302 	bfi	r3, r1, #0, #3
			|| (conv->specifier == 'A');
    49e8:	f1d8 0200 	rsbs	r2, r8, #0
		conv->specifier_a = (conv->specifier == 'a')
    49ec:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
		conv->specifier_cat = SPECIFIER_FP;
    49f0:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
			|| (conv->specifier == 'A');
    49f4:	eb42 0208 	adc.w	r2, r2, r8
		conv->specifier_a = (conv->specifier == 'a')
    49f8:	f362 11c7 	bfi	r1, r2, #7, #1
		if (conv->specifier_a
    49fc:	060a      	lsls	r2, r1, #24
		conv->specifier_a = (conv->specifier == 'a')
    49fe:	f88d 1039 	strb.w	r1, [sp, #57]	; 0x39
		if (conv->specifier_a
    4a02:	b2cb      	uxtb	r3, r1
    4a04:	f100 80e5 	bmi.w	4bd2 <cbvprintf+0x42e>
		if (conv->length_mod == LENGTH_L) {
    4a08:	f003 0278 	and.w	r2, r3, #120	; 0x78
    4a0c:	2a18      	cmp	r2, #24
    4a0e:	f040 80b5 	bne.w	4b7c <cbvprintf+0x3d8>
			conv->length_mod = LENGTH_NONE;
    4a12:	f36f 03c6 	bfc	r3, #3, #4
    4a16:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
    4a1a:	e09c      	b.n	4b56 <cbvprintf+0x3b2>
		val = 10U * val + *sp++ - '0';
    4a1c:	fb0c 2101 	mla	r1, ip, r1, r2
    4a20:	3930      	subs	r1, #48	; 0x30
    4a22:	4603      	mov	r3, r0
    4a24:	e747      	b.n	48b6 <cbvprintf+0x112>
	switch (*sp) {
    4a26:	2a74      	cmp	r2, #116	; 0x74
    4a28:	d026      	beq.n	4a78 <cbvprintf+0x2d4>
    4a2a:	2a7a      	cmp	r2, #122	; 0x7a
    4a2c:	d1c0      	bne.n	49b0 <cbvprintf+0x20c>
		conv->length_mod = LENGTH_Z;
    4a2e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4a32:	2206      	movs	r2, #6
    4a34:	e00d      	b.n	4a52 <cbvprintf+0x2ae>
		if (*++sp == 'h') {
    4a36:	785a      	ldrb	r2, [r3, #1]
    4a38:	2a68      	cmp	r2, #104	; 0x68
    4a3a:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4a3e:	d106      	bne.n	4a4e <cbvprintf+0x2aa>
			conv->length_mod = LENGTH_HH;
    4a40:	2101      	movs	r1, #1
			conv->length_mod = LENGTH_LL;
    4a42:	f361 02c6 	bfi	r2, r1, #3, #4
    4a46:	f88d 2039 	strb.w	r2, [sp, #57]	; 0x39
			++sp;
    4a4a:	1c99      	adds	r1, r3, #2
    4a4c:	e7b1      	b.n	49b2 <cbvprintf+0x20e>
			conv->length_mod = LENGTH_H;
    4a4e:	4613      	mov	r3, r2
    4a50:	2202      	movs	r2, #2
		conv->length_mod = LENGTH_T;
    4a52:	f362 03c6 	bfi	r3, r2, #3, #4
    4a56:	f88d 3039 	strb.w	r3, [sp, #57]	; 0x39
		break;
    4a5a:	e7aa      	b.n	49b2 <cbvprintf+0x20e>
		if (*++sp == 'l') {
    4a5c:	785a      	ldrb	r2, [r3, #1]
    4a5e:	2a6c      	cmp	r2, #108	; 0x6c
    4a60:	f89d 2039 	ldrb.w	r2, [sp, #57]	; 0x39
    4a64:	d101      	bne.n	4a6a <cbvprintf+0x2c6>
			conv->length_mod = LENGTH_LL;
    4a66:	2104      	movs	r1, #4
    4a68:	e7eb      	b.n	4a42 <cbvprintf+0x29e>
			conv->length_mod = LENGTH_L;
    4a6a:	4613      	mov	r3, r2
    4a6c:	2203      	movs	r2, #3
    4a6e:	e7f0      	b.n	4a52 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_J;
    4a70:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4a74:	2205      	movs	r2, #5
    4a76:	e7ec      	b.n	4a52 <cbvprintf+0x2ae>
		conv->length_mod = LENGTH_T;
    4a78:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4a7c:	2207      	movs	r2, #7
    4a7e:	e7e8      	b.n	4a52 <cbvprintf+0x2ae>
		conv->unsupported = true;
    4a80:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    4a84:	f423 43f0 	bic.w	r3, r3, #30720	; 0x7800
    4a88:	f023 0302 	bic.w	r3, r3, #2
    4a8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
    4a90:	f043 0302 	orr.w	r3, r3, #2
    4a94:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
		break;
    4a98:	e78b      	b.n	49b2 <cbvprintf+0x20e>
    4a9a:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    4a9e:	2b20      	cmp	r3, #32
    4aa0:	d86f      	bhi.n	4b82 <cbvprintf+0x3de>
    4aa2:	a101      	add	r1, pc, #4	; (adr r1, 4aa8 <cbvprintf+0x304>)
    4aa4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
    4aa8:	00004b5b 	.word	0x00004b5b
    4aac:	00004b83 	.word	0x00004b83
    4ab0:	00004b83 	.word	0x00004b83
    4ab4:	00004b83 	.word	0x00004b83
    4ab8:	00004b83 	.word	0x00004b83
    4abc:	00004b83 	.word	0x00004b83
    4ac0:	00004b83 	.word	0x00004b83
    4ac4:	00004b83 	.word	0x00004b83
    4ac8:	00004b83 	.word	0x00004b83
    4acc:	000049d7 	.word	0x000049d7
    4ad0:	00004b83 	.word	0x00004b83
    4ad4:	00004b5b 	.word	0x00004b5b
    4ad8:	00004b2d 	.word	0x00004b2d
    4adc:	000049d7 	.word	0x000049d7
    4ae0:	000049d7 	.word	0x000049d7
    4ae4:	000049d7 	.word	0x000049d7
    4ae8:	00004b83 	.word	0x00004b83
    4aec:	00004b2d 	.word	0x00004b2d
    4af0:	00004b83 	.word	0x00004b83
    4af4:	00004b83 	.word	0x00004b83
    4af8:	00004b83 	.word	0x00004b83
    4afc:	00004b83 	.word	0x00004b83
    4b00:	00004b91 	.word	0x00004b91
    4b04:	00004b5b 	.word	0x00004b5b
    4b08:	00004bb5 	.word	0x00004bb5
    4b0c:	00004b83 	.word	0x00004b83
    4b10:	00004b83 	.word	0x00004b83
    4b14:	00004bb5 	.word	0x00004bb5
    4b18:	00004b83 	.word	0x00004b83
    4b1c:	00004b5b 	.word	0x00004b5b
    4b20:	00004b83 	.word	0x00004b83
    4b24:	00004b83 	.word	0x00004b83
    4b28:	00004b5b 	.word	0x00004b5b
		conv->specifier_cat = SPECIFIER_SINT;
    4b2c:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4b30:	2101      	movs	r1, #1
		conv->specifier_cat = SPECIFIER_UINT;
    4b32:	f361 0302 	bfi	r3, r1, #0, #3
    4b36:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    4b3a:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4b3e:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4b42:	2b40      	cmp	r3, #64	; 0x40
			conv->invalid = true;
    4b44:	bf02      	ittt	eq
    4b46:	f89d 1038 	ldrbeq.w	r1, [sp, #56]	; 0x38
    4b4a:	f041 0101 	orreq.w	r1, r1, #1
    4b4e:	f88d 1038 	strbeq.w	r1, [sp, #56]	; 0x38
		if (conv->specifier == 'c') {
    4b52:	2a63      	cmp	r2, #99	; 0x63
    4b54:	d005      	beq.n	4b62 <cbvprintf+0x3be>
	bool unsupported = false;
    4b56:	2300      	movs	r3, #0
    4b58:	e006      	b.n	4b68 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_UINT;
    4b5a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4b5e:	2102      	movs	r1, #2
    4b60:	e7e7      	b.n	4b32 <cbvprintf+0x38e>
			unsupported = (conv->length_mod != LENGTH_NONE);
    4b62:	3b00      	subs	r3, #0
    4b64:	bf18      	it	ne
    4b66:	2301      	movne	r3, #1
	conv->unsupported |= unsupported;
    4b68:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
    4b6c:	f3c2 0140 	ubfx	r1, r2, #1, #1
    4b70:	430b      	orrs	r3, r1
    4b72:	f363 0241 	bfi	r2, r3, #1, #1
    4b76:	f88d 2038 	strb.w	r2, [sp, #56]	; 0x38
	return sp;
    4b7a:	e6b4      	b.n	48e6 <cbvprintf+0x142>
		} else if ((conv->length_mod != LENGTH_NONE)
    4b7c:	f013 0f38 	tst.w	r3, #56	; 0x38
    4b80:	d0e9      	beq.n	4b56 <cbvprintf+0x3b2>
			conv->invalid = true;
    4b82:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4b86:	f043 0301 	orr.w	r3, r3, #1
    4b8a:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
    4b8e:	e7e2      	b.n	4b56 <cbvprintf+0x3b2>
		conv->specifier_cat = SPECIFIER_PTR;
    4b90:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4b94:	2203      	movs	r2, #3
    4b96:	f362 0302 	bfi	r3, r2, #0, #3
    4b9a:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod == LENGTH_UPPER_L) {
    4b9e:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4ba2:	f003 0378 	and.w	r3, r3, #120	; 0x78
    4ba6:	f1a3 0c40 	sub.w	ip, r3, #64	; 0x40
    4baa:	f1dc 0300 	rsbs	r3, ip, #0
    4bae:	eb43 030c 	adc.w	r3, r3, ip
    4bb2:	e7d9      	b.n	4b68 <cbvprintf+0x3c4>
		conv->specifier_cat = SPECIFIER_PTR;
    4bb4:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4bb8:	2203      	movs	r2, #3
    4bba:	f362 0302 	bfi	r3, r2, #0, #3
    4bbe:	f88d 303a 	strb.w	r3, [sp, #58]	; 0x3a
		if (conv->length_mod != LENGTH_NONE) {
    4bc2:	f89d 3039 	ldrb.w	r3, [sp, #57]	; 0x39
    4bc6:	f013 0f78 	tst.w	r3, #120	; 0x78
    4bca:	bf14      	ite	ne
    4bcc:	2301      	movne	r3, #1
    4bce:	2300      	moveq	r3, #0
    4bd0:	e7ca      	b.n	4b68 <cbvprintf+0x3c4>
			unsupported = true;
    4bd2:	2301      	movs	r3, #1
    4bd4:	e7c8      	b.n	4b68 <cbvprintf+0x3c4>
		} else if (conv->width_present) {
    4bd6:	f99d 2038 	ldrsb.w	r2, [sp, #56]	; 0x38
    4bda:	2a00      	cmp	r2, #0
			width = conv->width_value;
    4bdc:	bfb4      	ite	lt
    4bde:	f8dd b03c 	ldrlt.w	fp, [sp, #60]	; 0x3c
		int width = -1;
    4be2:	f04f 3bff 	movge.w	fp, #4294967295
    4be6:	e690      	b.n	490a <cbvprintf+0x166>
		} else if (conv->prec_present) {
    4be8:	0799      	lsls	r1, r3, #30
    4bea:	f57f ae9d 	bpl.w	4928 <cbvprintf+0x184>
			precision = conv->prec_value;
    4bee:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
		conv->pad0_value = 0;
    4bf2:	f89d 1039 	ldrb.w	r1, [sp, #57]	; 0x39
    4bf6:	2300      	movs	r3, #0
		conv->pad0_pre_exp = 0;
    4bf8:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
		    && (conv->specifier_cat == SPECIFIER_FP)
    4bfc:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT)
    4c00:	f003 0207 	and.w	r2, r3, #7
    4c04:	2a04      	cmp	r2, #4
    4c06:	d109      	bne.n	4c1c <cbvprintf+0x478>
		    && !conv->prec_present) {
    4c08:	078a      	lsls	r2, r1, #30
    4c0a:	d407      	bmi.n	4c1c <cbvprintf+0x478>
			if (conv->specifier_a) {
    4c0c:	f99d 2039 	ldrsb.w	r2, [sp, #57]	; 0x39
				precision = 6;
    4c10:	2a00      	cmp	r2, #0
    4c12:	bfb4      	ite	lt
    4c14:	f04f 080d 	movlt.w	r8, #13
    4c18:	f04f 0806 	movge.w	r8, #6
		enum specifier_cat_enum specifier_cat
    4c1c:	f003 0307 	and.w	r3, r3, #7
		if (specifier_cat == SPECIFIER_SINT) {
    4c20:	2b01      	cmp	r3, #1
			= (enum length_mod_enum)conv->length_mod;
    4c22:	f3c1 01c3 	ubfx	r1, r1, #3, #4
		if (specifier_cat == SPECIFIER_SINT) {
    4c26:	d137      	bne.n	4c98 <cbvprintf+0x4f4>
			switch (length_mod) {
    4c28:	1ecb      	subs	r3, r1, #3
    4c2a:	2b04      	cmp	r3, #4
    4c2c:	d821      	bhi.n	4c72 <cbvprintf+0x4ce>
    4c2e:	e8df f003 	tbb	[pc, r3]
    4c32:	0903      	.short	0x0903
    4c34:	2009      	.short	0x2009
    4c36:	20          	.byte	0x20
    4c37:	00          	.byte	0x00
					value->sint = va_arg(ap, long);
    4c38:	f854 3b04 	ldr.w	r3, [r4], #4
				value->sint = (short)value->sint;
    4c3c:	17da      	asrs	r2, r3, #31
    4c3e:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
    4c42:	e006      	b.n	4c52 <cbvprintf+0x4ae>
					(sint_value_type)va_arg(ap, intmax_t);
    4c44:	3407      	adds	r4, #7
    4c46:	f024 0407 	bic.w	r4, r4, #7
				value->sint =
    4c4a:	e8f4 2302 	ldrd	r2, r3, [r4], #8
    4c4e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
		if (conv->invalid || conv->unsupported) {
    4c52:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    4c56:	07bb      	lsls	r3, r7, #30
    4c58:	d056      	beq.n	4d08 <cbvprintf+0x564>
			OUTS(sp, fp);
    4c5a:	9b02      	ldr	r3, [sp, #8]
    4c5c:	462a      	mov	r2, r5
    4c5e:	4651      	mov	r1, sl
    4c60:	4648      	mov	r0, r9
    4c62:	f01d fb9b 	bl	2239c <outs>
    4c66:	2800      	cmp	r0, #0
    4c68:	f2c0 8397 	blt.w	539a <cbvprintf+0xbf6>
    4c6c:	4406      	add	r6, r0
			while (pad_len-- > 0) {
    4c6e:	9d02      	ldr	r5, [sp, #8]
    4c70:	e5a0      	b.n	47b4 <cbvprintf+0x10>
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4c72:	f854 3b04 	ldr.w	r3, [r4], #4
			if (length_mod == LENGTH_HH) {
    4c76:	2901      	cmp	r1, #1
					(sint_value_type)va_arg(ap, ptrdiff_t);
    4c78:	ea4f 72e3 	mov.w	r2, r3, asr #31
    4c7c:	e9cd 320c 	strd	r3, r2, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4c80:	d105      	bne.n	4c8e <cbvprintf+0x4ea>
				value->uint = (unsigned char)value->uint;
    4c82:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
				value->uint = (unsigned short)value->uint;
    4c86:	930c      	str	r3, [sp, #48]	; 0x30
    4c88:	2300      	movs	r3, #0
    4c8a:	930d      	str	r3, [sp, #52]	; 0x34
    4c8c:	e7e1      	b.n	4c52 <cbvprintf+0x4ae>
			} else if (length_mod == LENGTH_H) {
    4c8e:	2902      	cmp	r1, #2
    4c90:	d1df      	bne.n	4c52 <cbvprintf+0x4ae>
				value->sint = (short)value->sint;
    4c92:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	; 0x30
    4c96:	e7d1      	b.n	4c3c <cbvprintf+0x498>
		} else if (specifier_cat == SPECIFIER_UINT) {
    4c98:	2b02      	cmp	r3, #2
    4c9a:	d123      	bne.n	4ce4 <cbvprintf+0x540>
			switch (length_mod) {
    4c9c:	1ecb      	subs	r3, r1, #3
    4c9e:	2b04      	cmp	r3, #4
    4ca0:	d813      	bhi.n	4cca <cbvprintf+0x526>
    4ca2:	e8df f003 	tbb	[pc, r3]
    4ca6:	0a03      	.short	0x0a03
    4ca8:	120a      	.short	0x120a
    4caa:	12          	.byte	0x12
    4cab:	00          	.byte	0x00
					value->uint = (wchar_t)va_arg(ap,
    4cac:	6822      	ldr	r2, [r4, #0]
    4cae:	920c      	str	r2, [sp, #48]	; 0x30
    4cb0:	2300      	movs	r3, #0
				value->sint = va_arg(ap, int);
    4cb2:	1d20      	adds	r0, r4, #4
					value->uint = (wchar_t)va_arg(ap,
    4cb4:	930d      	str	r3, [sp, #52]	; 0x34
					(uint_value_type)va_arg(ap, size_t);
    4cb6:	4604      	mov	r4, r0
    4cb8:	e7cb      	b.n	4c52 <cbvprintf+0x4ae>
					(uint_value_type)va_arg(ap,
    4cba:	1de0      	adds	r0, r4, #7
    4cbc:	f020 0007 	bic.w	r0, r0, #7
				value->uint =
    4cc0:	e8f0 2302 	ldrd	r2, r3, [r0], #8
    4cc4:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				break;
    4cc8:	e7f5      	b.n	4cb6 <cbvprintf+0x512>
					(uint_value_type)va_arg(ap, size_t);
    4cca:	f854 3b04 	ldr.w	r3, [r4], #4
    4cce:	930c      	str	r3, [sp, #48]	; 0x30
			if (length_mod == LENGTH_HH) {
    4cd0:	2901      	cmp	r1, #1
					(uint_value_type)va_arg(ap, size_t);
    4cd2:	f04f 0300 	mov.w	r3, #0
    4cd6:	930d      	str	r3, [sp, #52]	; 0x34
			if (length_mod == LENGTH_HH) {
    4cd8:	d0d3      	beq.n	4c82 <cbvprintf+0x4de>
			} else if (length_mod == LENGTH_H) {
    4cda:	2902      	cmp	r1, #2
    4cdc:	d1b9      	bne.n	4c52 <cbvprintf+0x4ae>
				value->uint = (unsigned short)value->uint;
    4cde:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    4ce2:	e7d0      	b.n	4c86 <cbvprintf+0x4e2>
		} else if (specifier_cat == SPECIFIER_FP) {
    4ce4:	2b04      	cmp	r3, #4
    4ce6:	d109      	bne.n	4cfc <cbvprintf+0x558>
					(sint_value_type)va_arg(ap, long long);
    4ce8:	1de3      	adds	r3, r4, #7
    4cea:	f023 0307 	bic.w	r3, r3, #7
    4cee:	f103 0408 	add.w	r4, r3, #8
				value->ldbl = va_arg(ap, long double);
    4cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
    4cf6:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
    4cfa:	e7aa      	b.n	4c52 <cbvprintf+0x4ae>
		} else if (specifier_cat == SPECIFIER_PTR) {
    4cfc:	2b03      	cmp	r3, #3
			value->ptr = va_arg(ap, void *);
    4cfe:	bf04      	itt	eq
    4d00:	f854 3b04 	ldreq.w	r3, [r4], #4
    4d04:	930c      	streq	r3, [sp, #48]	; 0x30
    4d06:	e7a4      	b.n	4c52 <cbvprintf+0x4ae>
		switch (conv->specifier) {
    4d08:	f89d 203b 	ldrb.w	r2, [sp, #59]	; 0x3b
    4d0c:	2a78      	cmp	r2, #120	; 0x78
    4d0e:	d8ae      	bhi.n	4c6e <cbvprintf+0x4ca>
    4d10:	2a57      	cmp	r2, #87	; 0x57
    4d12:	f200 808c 	bhi.w	4e2e <cbvprintf+0x68a>
    4d16:	2a25      	cmp	r2, #37	; 0x25
    4d18:	f000 80d4 	beq.w	4ec4 <cbvprintf+0x720>
    4d1c:	2a24      	cmp	r2, #36	; 0x24
    4d1e:	d9a6      	bls.n	4c6e <cbvprintf+0x4ca>
    4d20:	2a41      	cmp	r2, #65	; 0x41
    4d22:	d003      	beq.n	4d2c <cbvprintf+0x588>
    4d24:	f1a2 0345 	sub.w	r3, r2, #69	; 0x45
    4d28:	2b02      	cmp	r3, #2
    4d2a:	d8a0      	bhi.n	4c6e <cbvprintf+0x4ca>
	} u = {
    4d2c:	e9dd 130c 	ldrd	r1, r3, [sp, #48]	; 0x30
	if ((u.u64 & SIGN_MASK) != 0U) {
    4d30:	2b00      	cmp	r3, #0
    4d32:	f2c0 81be 	blt.w	50b2 <cbvprintf+0x90e>
	} else if (conv->flag_plus) {
    4d36:	0738      	lsls	r0, r7, #28
    4d38:	f100 81bd 	bmi.w	50b6 <cbvprintf+0x912>
		*sign = ' ';
    4d3c:	f017 0710 	ands.w	r7, r7, #16
    4d40:	bf18      	it	ne
    4d42:	2720      	movne	r7, #32
	int exp = (u.u64 >> FRACTION_BITS) & BIT_MASK(EXPONENT_BITS);
    4d44:	f3c3 550a 	ubfx	r5, r3, #20, #11
	uint64_t fract = u.u64 & BIT64_MASK(FRACTION_BITS);
    4d48:	f3c3 0313 	ubfx	r3, r3, #0, #20
    4d4c:	e9cd 1308 	strd	r1, r3, [sp, #32]
	bool is_subnormal = (exp == 0) && (fract != 0);
    4d50:	2d00      	cmp	r5, #0
    4d52:	f040 81b2 	bne.w	50ba <cbvprintf+0x916>
    4d56:	ea51 0003 	orrs.w	r0, r1, r3
    4d5a:	bf14      	ite	ne
    4d5c:	2001      	movne	r0, #1
    4d5e:	2000      	moveq	r0, #0
	fract <<= EXPONENT_BITS;
    4d60:	02db      	lsls	r3, r3, #11
    4d62:	ea43 5351 	orr.w	r3, r3, r1, lsr #21
    4d66:	02c9      	lsls	r1, r1, #11
		c = 'f';
    4d68:	2a46      	cmp	r2, #70	; 0x46
	if ((exp | fract) != 0) {
    4d6a:	ea45 0e01 	orr.w	lr, r5, r1
    4d6e:	ea43 7ce5 	orr.w	ip, r3, r5, asr #31
		c = 'f';
    4d72:	bf08      	it	eq
    4d74:	2266      	moveq	r2, #102	; 0x66
	if ((exp | fract) != 0) {
    4d76:	ea5e 0c0c 	orrs.w	ip, lr, ip
	fract &= ~SIGN_MASK;
    4d7a:	e9cd 1308 	strd	r1, r3, [sp, #32]
	if ((exp | fract) != 0) {
    4d7e:	f000 8206 	beq.w	518e <cbvprintf+0x9ea>
		if (is_subnormal) {
    4d82:	2800      	cmp	r0, #0
    4d84:	f040 81ce 	bne.w	5124 <cbvprintf+0x980>
		fract |= BIT_63;
    4d88:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
    4d8c:	f04f 0c00 	mov.w	ip, #0
    4d90:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
		exp -= (1023 - 1);	/* +1 since .1 vs 1. */
    4d94:	f2a5 35fe 	subw	r5, r5, #1022	; 0x3fe
		fract |= BIT_63;
    4d98:	9109      	str	r1, [sp, #36]	; 0x24
    4d9a:	4663      	mov	r3, ip
		fract *= 5U;
    4d9c:	f04f 0e05 	mov.w	lr, #5
	while (exp < -2) {
    4da0:	f115 0f02 	cmn.w	r5, #2
    4da4:	f2c0 81c5 	blt.w	5132 <cbvprintf+0x98e>
    4da8:	f1bc 0f00 	cmp.w	ip, #0
    4dac:	d001      	beq.n	4db2 <cbvprintf+0x60e>
    4dae:	e9cd 0108 	strd	r0, r1, [sp, #32]
	while (exp > 0) {
    4db2:	2d00      	cmp	r5, #0
		fract += 2;
    4db4:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
	while (exp > 0) {
    4db8:	f300 81d0 	bgt.w	515c <cbvprintf+0x9b8>
	fract >>= (4 - exp);
    4dbc:	9809      	ldr	r0, [sp, #36]	; 0x24
    4dbe:	9908      	ldr	r1, [sp, #32]
    4dc0:	f1c5 0c04 	rsb	ip, r5, #4
    4dc4:	351c      	adds	r5, #28
    4dc6:	fa00 f505 	lsl.w	r5, r0, r5
    4dca:	f1ac 0e20 	sub.w	lr, ip, #32
    4dce:	fa21 f10c 	lsr.w	r1, r1, ip
    4dd2:	fa20 fe0e 	lsr.w	lr, r0, lr
    4dd6:	4329      	orrs	r1, r5
    4dd8:	ea41 010e 	orr.w	r1, r1, lr
    4ddc:	fa20 f00c 	lsr.w	r0, r0, ip
    4de0:	e9cd 1008 	strd	r1, r0, [sp, #32]
	if ((c == 'g') || (c == 'G')) {
    4de4:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    4de8:	2947      	cmp	r1, #71	; 0x47
    4dea:	f040 81d7 	bne.w	519c <cbvprintf+0x9f8>
		if (decexp < (-4 + 1) || decexp > precision) {
    4dee:	1cdd      	adds	r5, r3, #3
    4df0:	db02      	blt.n	4df8 <cbvprintf+0x654>
    4df2:	4598      	cmp	r8, r3
    4df4:	f280 81ce 	bge.w	5194 <cbvprintf+0x9f0>
			c += 'e' - 'g';  /* e or E */
    4df8:	3a02      	subs	r2, #2
			if (precision > 0) {
    4dfa:	f1b8 0f00 	cmp.w	r8, #0
			c += 'e' - 'g';  /* e or E */
    4dfe:	b2d2      	uxtb	r2, r2
			if (precision > 0) {
    4e00:	dd01      	ble.n	4e06 <cbvprintf+0x662>
				precision--;
    4e02:	f108 38ff 	add.w	r8, r8, #4294967295
		if (!conv->flag_hash && (precision > 0)) {
    4e06:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    4e0a:	0688      	lsls	r0, r1, #26
    4e0c:	f100 81c6 	bmi.w	519c <cbvprintf+0x9f8>
    4e10:	f1b8 0f00 	cmp.w	r8, #0
    4e14:	bfd4      	ite	le
    4e16:	2100      	movle	r1, #0
    4e18:	2101      	movgt	r1, #1
	if (c == 'f') {
    4e1a:	2a66      	cmp	r2, #102	; 0x66
	bool prune_zero = false;
    4e1c:	9103      	str	r1, [sp, #12]
	if (c == 'f') {
    4e1e:	f040 81bf 	bne.w	51a0 <cbvprintf+0x9fc>
		if (decimals < 0) {
    4e22:	eb18 0503 	adds.w	r5, r8, r3
    4e26:	f140 81bd 	bpl.w	51a4 <cbvprintf+0xa00>
			decimals = 0;
    4e2a:	2500      	movs	r5, #0
    4e2c:	e1bd      	b.n	51aa <cbvprintf+0xa06>
    4e2e:	f1a2 0358 	sub.w	r3, r2, #88	; 0x58
    4e32:	2b20      	cmp	r3, #32
    4e34:	f63f af1b 	bhi.w	4c6e <cbvprintf+0x4ca>
    4e38:	a001      	add	r0, pc, #4	; (adr r0, 4e40 <cbvprintf+0x69c>)
    4e3a:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
    4e3e:	bf00      	nop
    4e40:	00005055 	.word	0x00005055
    4e44:	00004c6f 	.word	0x00004c6f
    4e48:	00004c6f 	.word	0x00004c6f
    4e4c:	00004c6f 	.word	0x00004c6f
    4e50:	00004c6f 	.word	0x00004c6f
    4e54:	00004c6f 	.word	0x00004c6f
    4e58:	00004c6f 	.word	0x00004c6f
    4e5c:	00004c6f 	.word	0x00004c6f
    4e60:	00004c6f 	.word	0x00004c6f
    4e64:	00004d2d 	.word	0x00004d2d
    4e68:	00004c6f 	.word	0x00004c6f
    4e6c:	00004ef1 	.word	0x00004ef1
    4e70:	00004ff5 	.word	0x00004ff5
    4e74:	00004d2d 	.word	0x00004d2d
    4e78:	00004d2d 	.word	0x00004d2d
    4e7c:	00004d2d 	.word	0x00004d2d
    4e80:	00004c6f 	.word	0x00004c6f
    4e84:	00004ff5 	.word	0x00004ff5
    4e88:	00004c6f 	.word	0x00004c6f
    4e8c:	00004c6f 	.word	0x00004c6f
    4e90:	00004c6f 	.word	0x00004c6f
    4e94:	00004c6f 	.word	0x00004c6f
    4e98:	0000508b 	.word	0x0000508b
    4e9c:	00005055 	.word	0x00005055
    4ea0:	00005059 	.word	0x00005059
    4ea4:	00004c6f 	.word	0x00004c6f
    4ea8:	00004c6f 	.word	0x00004c6f
    4eac:	00004ecb 	.word	0x00004ecb
    4eb0:	00004c6f 	.word	0x00004c6f
    4eb4:	00005055 	.word	0x00005055
    4eb8:	00004c6f 	.word	0x00004c6f
    4ebc:	00004c6f 	.word	0x00004c6f
    4ec0:	00005055 	.word	0x00005055
			OUTC('%');
    4ec4:	4651      	mov	r1, sl
    4ec6:	4610      	mov	r0, r2
    4ec8:	e47e      	b.n	47c8 <cbvprintf+0x24>
			if (precision >= 0) {
    4eca:	f1b8 0f00 	cmp.w	r8, #0
			bps = (const char *)value->ptr;
    4ece:	9a0c      	ldr	r2, [sp, #48]	; 0x30
			if (precision >= 0) {
    4ed0:	db09      	blt.n	4ee6 <cbvprintf+0x742>
				len = strnlen(bps, precision);
    4ed2:	4641      	mov	r1, r8
    4ed4:	4610      	mov	r0, r2
    4ed6:	9203      	str	r2, [sp, #12]
    4ed8:	f01f fa8f 	bl	243fa <strnlen>
				len = strlen(bps);
    4edc:	9a03      	ldr	r2, [sp, #12]
		char sign = 0;
    4ede:	2700      	movs	r7, #0
			bpe = bps + len;
    4ee0:	1815      	adds	r5, r2, r0
		if (bps == NULL) {
    4ee2:	b962      	cbnz	r2, 4efe <cbvprintf+0x75a>
    4ee4:	e6c3      	b.n	4c6e <cbvprintf+0x4ca>
				len = strlen(bps);
    4ee6:	4610      	mov	r0, r2
    4ee8:	9203      	str	r2, [sp, #12]
    4eea:	f01f fa7f 	bl	243ec <strlen>
    4eee:	e7f5      	b.n	4edc <cbvprintf+0x738>
			buf[0] = CHAR_IS_SIGNED ? value->sint : value->uint;
    4ef0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    4ef2:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
		char sign = 0;
    4ef6:	2700      	movs	r7, #0
			bpe = buf + 1;
    4ef8:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
				bps = encode_float(value->dbl, conv, precision,
    4efc:	aa13      	add	r2, sp, #76	; 0x4c
		size_t nj_len = (bpe - bps);
    4efe:	1aab      	subs	r3, r5, r2
		if (sign != 0) {
    4f00:	b107      	cbz	r7, 4f04 <cbvprintf+0x760>
			nj_len += 1U;
    4f02:	3301      	adds	r3, #1
		if (conv->altform_0c) {
    4f04:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
    4f08:	06c1      	lsls	r1, r0, #27
    4f0a:	f140 823a 	bpl.w	5382 <cbvprintf+0xbde>
			nj_len += 2U;
    4f0e:	3302      	adds	r3, #2
		nj_len += conv->pad0_value;
    4f10:	990f      	ldr	r1, [sp, #60]	; 0x3c
		if (conv->pad_fp) {
    4f12:	0640      	lsls	r0, r0, #25
		nj_len += conv->pad0_value;
    4f14:	440b      	add	r3, r1
			nj_len += conv->pad0_pre_exp;
    4f16:	bf44      	itt	mi
    4f18:	9910      	ldrmi	r1, [sp, #64]	; 0x40
    4f1a:	185b      	addmi	r3, r3, r1
		if (width > 0) {
    4f1c:	f1bb 0f00 	cmp.w	fp, #0
    4f20:	dd23      	ble.n	4f6a <cbvprintf+0x7c6>
			width -= (int)nj_len;
    4f22:	ebab 0b03 	sub.w	fp, fp, r3
			if (!conv->flag_dash) {
    4f26:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    4f2a:	0759      	lsls	r1, r3, #29
    4f2c:	f3c3 0880 	ubfx	r8, r3, #2, #1
    4f30:	d41b      	bmi.n	4f6a <cbvprintf+0x7c6>
				if (conv->flag_zero) {
    4f32:	0658      	lsls	r0, r3, #25
    4f34:	f140 8234 	bpl.w	53a0 <cbvprintf+0xbfc>
					if (sign != 0) {
    4f38:	2f00      	cmp	r7, #0
    4f3a:	f000 8234 	beq.w	53a6 <cbvprintf+0xc02>
						OUTC(sign);
    4f3e:	4651      	mov	r1, sl
    4f40:	4638      	mov	r0, r7
    4f42:	9203      	str	r2, [sp, #12]
    4f44:	47c8      	blx	r9
    4f46:	2800      	cmp	r0, #0
    4f48:	f2c0 8227 	blt.w	539a <cbvprintf+0xbf6>
    4f4c:	9a03      	ldr	r2, [sp, #12]
						sign = 0;
    4f4e:	4647      	mov	r7, r8
						OUTC(sign);
    4f50:	3601      	adds	r6, #1
					pad = '0';
    4f52:	f04f 0830 	mov.w	r8, #48	; 0x30
    4f56:	445e      	add	r6, fp
    4f58:	465b      	mov	r3, fp
				while (width-- > 0) {
    4f5a:	2b00      	cmp	r3, #0
    4f5c:	eba6 000b 	sub.w	r0, r6, fp
    4f60:	f10b 3bff 	add.w	fp, fp, #4294967295
    4f64:	f300 8211 	bgt.w	538a <cbvprintf+0xbe6>
    4f68:	4606      	mov	r6, r0
		if (sign != 0) {
    4f6a:	b147      	cbz	r7, 4f7e <cbvprintf+0x7da>
			OUTC(sign);
    4f6c:	4651      	mov	r1, sl
    4f6e:	4638      	mov	r0, r7
    4f70:	9203      	str	r2, [sp, #12]
    4f72:	47c8      	blx	r9
    4f74:	2800      	cmp	r0, #0
    4f76:	f2c0 8210 	blt.w	539a <cbvprintf+0xbf6>
    4f7a:	9a03      	ldr	r2, [sp, #12]
    4f7c:	3601      	adds	r6, #1
		if (IS_ENABLED(CONFIG_CBPRINTF_FP_SUPPORT) && conv->pad_fp) {
    4f7e:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    4f82:	0659      	lsls	r1, r3, #25
    4f84:	f140 8265 	bpl.w	5452 <cbvprintf+0xcae>
			if (conv->specifier_a) {
    4f88:	f99d 3039 	ldrsb.w	r3, [sp, #57]	; 0x39
    4f8c:	2b00      	cmp	r3, #0
    4f8e:	eba6 0302 	sub.w	r3, r6, r2
    4f92:	9303      	str	r3, [sp, #12]
    4f94:	f2c0 820a 	blt.w	53ac <cbvprintf+0xc08>
    4f98:	4617      	mov	r7, r2
				while (isdigit((int)*cp)) {
    4f9a:	7838      	ldrb	r0, [r7, #0]
    4f9c:	9b03      	ldr	r3, [sp, #12]
    4f9e:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    4fa2:	2a09      	cmp	r2, #9
    4fa4:	46b8      	mov	r8, r7
    4fa6:	eb03 0607 	add.w	r6, r3, r7
    4faa:	f107 0701 	add.w	r7, r7, #1
    4fae:	f240 8229 	bls.w	5404 <cbvprintf+0xc60>
				if (!conv->pad_postdp) {
    4fb2:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
				pad_len = conv->pad0_value;
    4fb6:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
				if (!conv->pad_postdp) {
    4fb8:	0693      	lsls	r3, r2, #26
    4fba:	d408      	bmi.n	4fce <cbvprintf+0x82a>
    4fbc:	443e      	add	r6, r7
					while (pad_len-- > 0) {
    4fbe:	2f00      	cmp	r7, #0
    4fc0:	eba6 0307 	sub.w	r3, r6, r7
    4fc4:	f107 37ff 	add.w	r7, r7, #4294967295
    4fc8:	f300 8222 	bgt.w	5410 <cbvprintf+0xc6c>
    4fcc:	461e      	mov	r6, r3
				if (*cp == '.') {
    4fce:	f898 0000 	ldrb.w	r0, [r8]
    4fd2:	282e      	cmp	r0, #46	; 0x2e
    4fd4:	d10b      	bne.n	4fee <cbvprintf+0x84a>
					OUTC(*cp++);
    4fd6:	4651      	mov	r1, sl
    4fd8:	47c8      	blx	r9
						OUTC('0');
    4fda:	2800      	cmp	r0, #0
    4fdc:	f2c0 81dd 	blt.w	539a <cbvprintf+0xbf6>
					while (pad_len-- > 0) {
    4fe0:	2f00      	cmp	r7, #0
						OUTC('0');
    4fe2:	f106 0601 	add.w	r6, r6, #1
					while (pad_len-- > 0) {
    4fe6:	f300 821a 	bgt.w	541e <cbvprintf+0xc7a>
					OUTC(*cp++);
    4fea:	f108 0801 	add.w	r8, r8, #1
    4fee:	eba6 0608 	sub.w	r6, r6, r8
    4ff2:	e21d      	b.n	5430 <cbvprintf+0xc8c>
			if (conv->flag_plus) {
    4ff4:	073d      	lsls	r5, r7, #28
    4ff6:	d42b      	bmi.n	5050 <cbvprintf+0x8ac>
				sign = ' ';
    4ff8:	f017 0710 	ands.w	r7, r7, #16
    4ffc:	bf18      	it	ne
    4ffe:	2720      	movne	r7, #32
			sint = value->sint;
    5000:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
			if (sint < 0) {
    5004:	2b00      	cmp	r3, #0
    5006:	da05      	bge.n	5014 <cbvprintf+0x870>
				value->uint = (uint_value_type)-sint;
    5008:	4252      	negs	r2, r2
    500a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
    500e:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
				sign = '-';
    5012:	272d      	movs	r7, #45	; 0x2d
			bps = encode_uint(value->uint, conv, buf, bpe);
    5014:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    5018:	9300      	str	r3, [sp, #0]
    501a:	aa0e      	add	r2, sp, #56	; 0x38
    501c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
    5020:	ab13      	add	r3, sp, #76	; 0x4c
    5022:	f01d f975 	bl	22310 <encode_uint>
    5026:	4602      	mov	r2, r0
			if (precision >= 0) {
    5028:	f1b8 0f00 	cmp.w	r8, #0
    502c:	f10d 0565 	add.w	r5, sp, #101	; 0x65
    5030:	f6ff af57 	blt.w	4ee2 <cbvprintf+0x73e>
				conv->flag_zero = false;
    5034:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
				size_t len = bpe - bps;
    5038:	1aab      	subs	r3, r5, r2
				conv->flag_zero = false;
    503a:	f36f 1186 	bfc	r1, #6, #1
				if (len < (size_t)precision) {
    503e:	4598      	cmp	r8, r3
				conv->flag_zero = false;
    5040:	f88d 1038 	strb.w	r1, [sp, #56]	; 0x38
				if (len < (size_t)precision) {
    5044:	f67f af4d 	bls.w	4ee2 <cbvprintf+0x73e>
					conv->pad0_value = precision - (int)len;
    5048:	eba8 0303 	sub.w	r3, r8, r3
    504c:	930f      	str	r3, [sp, #60]	; 0x3c
    504e:	e748      	b.n	4ee2 <cbvprintf+0x73e>
				sign = '+';
    5050:	272b      	movs	r7, #43	; 0x2b
    5052:	e7d5      	b.n	5000 <cbvprintf+0x85c>
		switch (conv->specifier) {
    5054:	2700      	movs	r7, #0
    5056:	e7dd      	b.n	5014 <cbvprintf+0x870>
			if (value->ptr != NULL) {
    5058:	980c      	ldr	r0, [sp, #48]	; 0x30
    505a:	2800      	cmp	r0, #0
    505c:	f000 818d 	beq.w	537a <cbvprintf+0xbd6>
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5060:	f10d 0365 	add.w	r3, sp, #101	; 0x65
    5064:	9300      	str	r3, [sp, #0]
    5066:	aa0e      	add	r2, sp, #56	; 0x38
    5068:	ab13      	add	r3, sp, #76	; 0x4c
    506a:	2100      	movs	r1, #0
    506c:	f01d f950 	bl	22310 <encode_uint>
				conv->altform_0c = true;
    5070:	f8bd 303a 	ldrh.w	r3, [sp, #58]	; 0x3a
    5074:	f003 03ef 	and.w	r3, r3, #239	; 0xef
    5078:	f443 43f0 	orr.w	r3, r3, #30720	; 0x7800
    507c:	f043 0310 	orr.w	r3, r3, #16
				bps = encode_uint((uintptr_t)value->ptr, conv,
    5080:	4602      	mov	r2, r0
				conv->altform_0c = true;
    5082:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
		char sign = 0;
    5086:	2700      	movs	r7, #0
				goto prec_int_pad0;
    5088:	e7ce      	b.n	5028 <cbvprintf+0x884>
				store_count(conv, value->ptr, count);
    508a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
	switch ((enum length_mod_enum)conv->length_mod) {
    508c:	2907      	cmp	r1, #7
    508e:	f63f adee 	bhi.w	4c6e <cbvprintf+0x4ca>
    5092:	e8df f001 	tbb	[pc, r1]
    5096:	040c      	.short	0x040c
    5098:	08080c06 	.word	0x08080c06
    509c:	0c0c      	.short	0x0c0c
		*(signed char *)dp = (signed char)count;
    509e:	701e      	strb	r6, [r3, #0]
		break;
    50a0:	e5e5      	b.n	4c6e <cbvprintf+0x4ca>
		*(short *)dp = (short)count;
    50a2:	801e      	strh	r6, [r3, #0]
		break;
    50a4:	e5e3      	b.n	4c6e <cbvprintf+0x4ca>
		*(intmax_t *)dp = (intmax_t)count;
    50a6:	17f2      	asrs	r2, r6, #31
    50a8:	e9c3 6200 	strd	r6, r2, [r3]
		break;
    50ac:	e5df      	b.n	4c6e <cbvprintf+0x4ca>
		*(ptrdiff_t *)dp = (ptrdiff_t)count;
    50ae:	601e      	str	r6, [r3, #0]
		break;
    50b0:	e5dd      	b.n	4c6e <cbvprintf+0x4ca>
		*sign = '-';
    50b2:	272d      	movs	r7, #45	; 0x2d
    50b4:	e646      	b.n	4d44 <cbvprintf+0x5a0>
		*sign = '+';
    50b6:	272b      	movs	r7, #43	; 0x2b
    50b8:	e644      	b.n	4d44 <cbvprintf+0x5a0>
	if (exp == BIT_MASK(EXPONENT_BITS)) {
    50ba:	f240 70ff 	movw	r0, #2047	; 0x7ff
    50be:	4285      	cmp	r5, r0
    50c0:	d12d      	bne.n	511e <cbvprintf+0x97a>
		if (fract == 0) {
    50c2:	430b      	orrs	r3, r1
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
    50c4:	f1a2 0241 	sub.w	r2, r2, #65	; 0x41
    50c8:	d11b      	bne.n	5102 <cbvprintf+0x95e>
			if (isupper((int)c)) {
    50ca:	2a19      	cmp	r2, #25
    50cc:	d811      	bhi.n	50f2 <cbvprintf+0x94e>
				*buf++ = 'I';
    50ce:	2349      	movs	r3, #73	; 0x49
    50d0:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'N';
    50d4:	234e      	movs	r3, #78	; 0x4e
    50d6:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'F';
    50da:	2346      	movs	r3, #70	; 0x46
				*buf++ = 'n';
    50dc:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
		conv->flag_zero = false;
    50e0:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    50e4:	f36f 1386 	bfc	r3, #6, #1
    50e8:	f88d 3038 	strb.w	r3, [sp, #56]	; 0x38
		*bpe = buf;
    50ec:	f10d 054f 	add.w	r5, sp, #79	; 0x4f
		return bps;
    50f0:	e704      	b.n	4efc <cbvprintf+0x758>
				*buf++ = 'i';
    50f2:	2369      	movs	r3, #105	; 0x69
    50f4:	f88d 304c 	strb.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    50f8:	236e      	movs	r3, #110	; 0x6e
    50fa:	f88d 304d 	strb.w	r3, [sp, #77]	; 0x4d
				*buf++ = 'f';
    50fe:	2366      	movs	r3, #102	; 0x66
    5100:	e7ec      	b.n	50dc <cbvprintf+0x938>
			if (isupper((int)c)) {
    5102:	2a19      	cmp	r2, #25
				*buf++ = 'N';
    5104:	bf99      	ittee	ls
    5106:	234e      	movls	r3, #78	; 0x4e
				*buf++ = 'A';
    5108:	2241      	movls	r2, #65	; 0x41
				*buf++ = 'n';
    510a:	236e      	movhi	r3, #110	; 0x6e
				*buf++ = 'a';
    510c:	2261      	movhi	r2, #97	; 0x61
				*buf++ = 'N';
    510e:	bf94      	ite	ls
    5110:	f88d 304c 	strbls.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'n';
    5114:	f88d 304c 	strbhi.w	r3, [sp, #76]	; 0x4c
				*buf++ = 'a';
    5118:	f88d 204d 	strb.w	r2, [sp, #77]	; 0x4d
    511c:	e7de      	b.n	50dc <cbvprintf+0x938>
	bool is_subnormal = (exp == 0) && (fract != 0);
    511e:	2000      	movs	r0, #0
    5120:	e61e      	b.n	4d60 <cbvprintf+0x5bc>
				exp--;
    5122:	3d01      	subs	r5, #1
			while (((fract <<= 1) & BIT_63) == 0) {
    5124:	1849      	adds	r1, r1, r1
    5126:	415b      	adcs	r3, r3
    5128:	2b00      	cmp	r3, #0
    512a:	dafa      	bge.n	5122 <cbvprintf+0x97e>
    512c:	e9cd 1308 	strd	r1, r3, [sp, #32]
    5130:	e62a      	b.n	4d88 <cbvprintf+0x5e4>
			fract >>= 1;
    5132:	0840      	lsrs	r0, r0, #1
    5134:	ea40 70c1 	orr.w	r0, r0, r1, lsl #31
    5138:	0849      	lsrs	r1, r1, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    513a:	f1b1 3f33 	cmp.w	r1, #858993459	; 0x33333333
    513e:	46ac      	mov	ip, r5
			exp++;
    5140:	f105 0501 	add.w	r5, r5, #1
		} while ((uint32_t)(fract >> 32) >= (UINT32_MAX / 5U));
    5144:	d2f5      	bcs.n	5132 <cbvprintf+0x98e>
		fract *= 5U;
    5146:	fb0e f501 	mul.w	r5, lr, r1
    514a:	fba0 010e 	umull	r0, r1, r0, lr
    514e:	4429      	add	r1, r5
		decexp--;
    5150:	3b01      	subs	r3, #1
		exp++;
    5152:	f10c 0502 	add.w	r5, ip, #2
		decexp--;
    5156:	f04f 0c01 	mov.w	ip, #1
    515a:	e621      	b.n	4da0 <cbvprintf+0x5fc>
		fract += 2;
    515c:	3102      	adds	r1, #2
    515e:	f140 0000 	adc.w	r0, r0, #0
    5162:	e9cd 1008 	strd	r1, r0, [sp, #32]
		_ldiv5(&fract);
    5166:	a808      	add	r0, sp, #32
    5168:	e9cd 2303 	strd	r2, r3, [sp, #12]
    516c:	f01d f8a1 	bl	222b2 <_ldiv5>
		decexp++;
    5170:	9b04      	ldr	r3, [sp, #16]
    5172:	9a03      	ldr	r2, [sp, #12]
    5174:	e9dd 1008 	ldrd	r1, r0, [sp, #32]
		exp--;
    5178:	3d01      	subs	r5, #1
		decexp++;
    517a:	3301      	adds	r3, #1
			fract <<= 1;
    517c:	1849      	adds	r1, r1, r1
    517e:	4140      	adcs	r0, r0
		} while (!(fract & BIT_63));
    5180:	2800      	cmp	r0, #0
			exp--;
    5182:	f105 35ff 	add.w	r5, r5, #4294967295
		} while (!(fract & BIT_63));
    5186:	daf9      	bge.n	517c <cbvprintf+0x9d8>
    5188:	e9cd 1008 	strd	r1, r0, [sp, #32]
    518c:	e611      	b.n	4db2 <cbvprintf+0x60e>
    518e:	2300      	movs	r3, #0
    5190:	461d      	mov	r5, r3
    5192:	e613      	b.n	4dbc <cbvprintf+0x618>
			precision -= decexp;
    5194:	eba8 0803 	sub.w	r8, r8, r3
			c = 'f';
    5198:	2266      	movs	r2, #102	; 0x66
    519a:	e634      	b.n	4e06 <cbvprintf+0x662>
	bool prune_zero = false;
    519c:	2100      	movs	r1, #0
    519e:	e63c      	b.n	4e1a <cbvprintf+0x676>
		decimals = precision + 1;
    51a0:	f108 0501 	add.w	r5, r8, #1
	if (decimals > 16) {
    51a4:	2d10      	cmp	r5, #16
    51a6:	bfa8      	it	ge
    51a8:	2510      	movge	r5, #16
    51aa:	2110      	movs	r1, #16
    51ac:	9107      	str	r1, [sp, #28]
	uint64_t round = BIT64(59); /* 0.5 */
    51ae:	2000      	movs	r0, #0
    51b0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
    51b4:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
	*v >>= 1;
    51b8:	e9dd 100a 	ldrd	r1, r0, [sp, #40]	; 0x28
	while (decimals--) {
    51bc:	b9a5      	cbnz	r5, 51e8 <cbvprintf+0xa44>
	fract += round;
    51be:	9d08      	ldr	r5, [sp, #32]
    51c0:	1949      	adds	r1, r1, r5
    51c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
    51c4:	eb40 0505 	adc.w	r5, r0, r5
	if (fract >= BIT64(60)) {
    51c8:	f1b5 5f80 	cmp.w	r5, #268435456	; 0x10000000
    51cc:	d21b      	bcs.n	5206 <cbvprintf+0xa62>
	fract += round;
    51ce:	e9cd 1508 	strd	r1, r5, [sp, #32]
	if (c == 'f') {
    51d2:	2a66      	cmp	r2, #102	; 0x66
    51d4:	f040 8099 	bne.w	530a <cbvprintf+0xb66>
		if (decexp > 0) {
    51d8:	2b00      	cmp	r3, #0
    51da:	dc23      	bgt.n	5224 <cbvprintf+0xa80>
			*buf++ = '0';
    51dc:	2130      	movs	r1, #48	; 0x30
    51de:	f88d 104c 	strb.w	r1, [sp, #76]	; 0x4c
    51e2:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    51e6:	e02f      	b.n	5248 <cbvprintf+0xaa4>
	*v >>= 1;
    51e8:	0849      	lsrs	r1, r1, #1
    51ea:	ea41 71c0 	orr.w	r1, r1, r0, lsl #31
    51ee:	0840      	lsrs	r0, r0, #1
    51f0:	e9cd 100a 	strd	r1, r0, [sp, #40]	; 0x28
	_ldiv5(v);
    51f4:	a80a      	add	r0, sp, #40	; 0x28
    51f6:	e9cd 2304 	strd	r2, r3, [sp, #16]
    51fa:	3d01      	subs	r5, #1
    51fc:	f01d f859 	bl	222b2 <_ldiv5>
    5200:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
}
    5204:	e7d8      	b.n	51b8 <cbvprintf+0xa14>
	*v >>= 1;
    5206:	0849      	lsrs	r1, r1, #1
    5208:	ea41 71c5 	orr.w	r1, r1, r5, lsl #31
	_ldiv5(v);
    520c:	a808      	add	r0, sp, #32
	*v >>= 1;
    520e:	086d      	lsrs	r5, r5, #1
    5210:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5214:	e9cd 1508 	strd	r1, r5, [sp, #32]
	_ldiv5(v);
    5218:	f01d f84b 	bl	222b2 <_ldiv5>
		decexp++;
    521c:	9b05      	ldr	r3, [sp, #20]
    521e:	9a04      	ldr	r2, [sp, #16]
    5220:	3301      	adds	r3, #1
    5222:	e7d6      	b.n	51d2 <cbvprintf+0xa2e>
	char *buf = bps;
    5224:	ad13      	add	r5, sp, #76	; 0x4c
			while (decexp > 0 && digit_count > 0) {
    5226:	9907      	ldr	r1, [sp, #28]
    5228:	2900      	cmp	r1, #0
    522a:	dd0b      	ble.n	5244 <cbvprintf+0xaa0>
				*buf++ = _get_digit(&fract, &digit_count);
    522c:	a907      	add	r1, sp, #28
    522e:	a808      	add	r0, sp, #32
    5230:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5234:	f01d f855 	bl	222e2 <_get_digit>
			while (decexp > 0 && digit_count > 0) {
    5238:	9b05      	ldr	r3, [sp, #20]
				*buf++ = _get_digit(&fract, &digit_count);
    523a:	f805 0b01 	strb.w	r0, [r5], #1
			while (decexp > 0 && digit_count > 0) {
    523e:	3b01      	subs	r3, #1
    5240:	9a04      	ldr	r2, [sp, #16]
    5242:	d1f0      	bne.n	5226 <cbvprintf+0xa82>
			conv->pad0_value = decexp;
    5244:	930f      	str	r3, [sp, #60]	; 0x3c
			decexp = 0;
    5246:	2300      	movs	r3, #0
		if (conv->flag_hash || (precision > 0)) {
    5248:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
    524c:	0689      	lsls	r1, r1, #26
    524e:	d402      	bmi.n	5256 <cbvprintf+0xab2>
    5250:	f1b8 0f00 	cmp.w	r8, #0
    5254:	dd1d      	ble.n	5292 <cbvprintf+0xaee>
			*buf++ = '.';
    5256:	212e      	movs	r1, #46	; 0x2e
    5258:	f805 1b01 	strb.w	r1, [r5], #1
		if (decexp < 0 && precision > 0) {
    525c:	b19b      	cbz	r3, 5286 <cbvprintf+0xae2>
    525e:	f1b8 0f00 	cmp.w	r8, #0
    5262:	dd16      	ble.n	5292 <cbvprintf+0xaee>
			conv->pad0_value = -decexp;
    5264:	4259      	negs	r1, r3
    5266:	4541      	cmp	r1, r8
    5268:	bfa8      	it	ge
    526a:	4641      	movge	r1, r8
			conv->pad_postdp = (conv->pad0_value > 0);
    526c:	f89d 003a 	ldrb.w	r0, [sp, #58]	; 0x3a
			conv->pad0_value = -decexp;
    5270:	910f      	str	r1, [sp, #60]	; 0x3c
			conv->pad_postdp = (conv->pad0_value > 0);
    5272:	2900      	cmp	r1, #0
			precision -= conv->pad0_value;
    5274:	eba8 0801 	sub.w	r8, r8, r1
			conv->pad_postdp = (conv->pad0_value > 0);
    5278:	bfd4      	ite	le
    527a:	2100      	movle	r1, #0
    527c:	2101      	movgt	r1, #1
    527e:	f361 1045 	bfi	r0, r1, #5, #1
    5282:	f88d 003a 	strb.w	r0, [sp, #58]	; 0x3a
	while (precision > 0 && digit_count > 0) {
    5286:	f1b8 0f00 	cmp.w	r8, #0
    528a:	dd02      	ble.n	5292 <cbvprintf+0xaee>
    528c:	9907      	ldr	r1, [sp, #28]
    528e:	2900      	cmp	r1, #0
    5290:	dc56      	bgt.n	5340 <cbvprintf+0xb9c>
	if (prune_zero) {
    5292:	9903      	ldr	r1, [sp, #12]
    5294:	2900      	cmp	r1, #0
    5296:	d163      	bne.n	5360 <cbvprintf+0xbbc>
	conv->pad0_pre_exp = precision;
    5298:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
	if ((c == 'e') || (c == 'E')) {
    529c:	f002 01df 	and.w	r1, r2, #223	; 0xdf
    52a0:	2945      	cmp	r1, #69	; 0x45
    52a2:	d121      	bne.n	52e8 <cbvprintf+0xb44>
		if (decexp < 0) {
    52a4:	2b00      	cmp	r3, #0
		*buf++ = c;
    52a6:	4629      	mov	r1, r5
			decexp = -decexp;
    52a8:	bfb8      	it	lt
    52aa:	425b      	neglt	r3, r3
		*buf++ = c;
    52ac:	f801 2b02 	strb.w	r2, [r1], #2
			*buf++ = '-';
    52b0:	bfb4      	ite	lt
    52b2:	222d      	movlt	r2, #45	; 0x2d
			*buf++ = '+';
    52b4:	222b      	movge	r2, #43	; 0x2b
		if (decexp >= 100) {
    52b6:	2b63      	cmp	r3, #99	; 0x63
    52b8:	706a      	strb	r2, [r5, #1]
    52ba:	dd09      	ble.n	52d0 <cbvprintf+0xb2c>
			*buf++ = (decexp / 100) + '0';
    52bc:	2064      	movs	r0, #100	; 0x64
    52be:	fb93 f2f0 	sdiv	r2, r3, r0
    52c2:	f102 0c30 	add.w	ip, r2, #48	; 0x30
    52c6:	1ce9      	adds	r1, r5, #3
    52c8:	f885 c002 	strb.w	ip, [r5, #2]
			decexp %= 100;
    52cc:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    52d0:	200a      	movs	r0, #10
    52d2:	460d      	mov	r5, r1
    52d4:	fb93 f2f0 	sdiv	r2, r3, r0
		*buf++ = (decexp % 10) + '0';
    52d8:	fb00 3312 	mls	r3, r0, r2, r3
		*buf++ = (decexp / 10) + '0';
    52dc:	f102 0c30 	add.w	ip, r2, #48	; 0x30
		*buf++ = (decexp % 10) + '0';
    52e0:	3330      	adds	r3, #48	; 0x30
		*buf++ = (decexp / 10) + '0';
    52e2:	f805 cb02 	strb.w	ip, [r5], #2
		*buf++ = (decexp % 10) + '0';
    52e6:	704b      	strb	r3, [r1, #1]
		|| (conv->pad0_pre_exp > 0);
    52e8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    52ea:	2b00      	cmp	r3, #0
    52ec:	dc43      	bgt.n	5376 <cbvprintf+0xbd2>
    52ee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    52f0:	2b00      	cmp	r3, #0
    52f2:	bfd4      	ite	le
    52f4:	2300      	movle	r3, #0
    52f6:	2301      	movgt	r3, #1
	conv->pad_fp = (conv->pad0_value > 0)
    52f8:	f89d 203a 	ldrb.w	r2, [sp, #58]	; 0x3a
    52fc:	f363 1286 	bfi	r2, r3, #6, #1
	*buf = 0;
    5300:	2300      	movs	r3, #0
	conv->pad_fp = (conv->pad0_value > 0)
    5302:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
	*buf = 0;
    5306:	702b      	strb	r3, [r5, #0]
	return bps;
    5308:	e5f8      	b.n	4efc <cbvprintf+0x758>
		*buf = _get_digit(&fract, &digit_count);
    530a:	a907      	add	r1, sp, #28
    530c:	a808      	add	r0, sp, #32
    530e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5312:	f01c ffe6 	bl	222e2 <_get_digit>
		if (*buf++ != '0') {
    5316:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		if (conv->flag_hash || (precision > 0)) {
    531a:	f89d 1038 	ldrb.w	r1, [sp, #56]	; 0x38
		*buf = _get_digit(&fract, &digit_count);
    531e:	f88d 004c 	strb.w	r0, [sp, #76]	; 0x4c
		if (*buf++ != '0') {
    5322:	2830      	cmp	r0, #48	; 0x30
			decexp--;
    5324:	bf18      	it	ne
    5326:	f103 33ff 	addne.w	r3, r3, #4294967295
		if (conv->flag_hash || (precision > 0)) {
    532a:	0688      	lsls	r0, r1, #26
    532c:	d402      	bmi.n	5334 <cbvprintf+0xb90>
    532e:	f1b8 0f00 	cmp.w	r8, #0
    5332:	dd12      	ble.n	535a <cbvprintf+0xbb6>
			*buf++ = '.';
    5334:	212e      	movs	r1, #46	; 0x2e
    5336:	f88d 104d 	strb.w	r1, [sp, #77]	; 0x4d
    533a:	f10d 054e 	add.w	r5, sp, #78	; 0x4e
    533e:	e7a2      	b.n	5286 <cbvprintf+0xae2>
		*buf++ = _get_digit(&fract, &digit_count);
    5340:	a907      	add	r1, sp, #28
    5342:	a808      	add	r0, sp, #32
    5344:	e9cd 2304 	strd	r2, r3, [sp, #16]
    5348:	f01c ffcb 	bl	222e2 <_get_digit>
		precision--;
    534c:	f108 38ff 	add.w	r8, r8, #4294967295
    5350:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
		*buf++ = _get_digit(&fract, &digit_count);
    5354:	f805 0b01 	strb.w	r0, [r5], #1
		precision--;
    5358:	e795      	b.n	5286 <cbvprintf+0xae2>
		if (*buf++ != '0') {
    535a:	f10d 054d 	add.w	r5, sp, #77	; 0x4d
    535e:	e798      	b.n	5292 <cbvprintf+0xaee>
		conv->pad0_pre_exp = 0;
    5360:	2100      	movs	r1, #0
    5362:	9110      	str	r1, [sp, #64]	; 0x40
		while (*--buf == '0') {
    5364:	4628      	mov	r0, r5
    5366:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
    536a:	2930      	cmp	r1, #48	; 0x30
    536c:	d0fa      	beq.n	5364 <cbvprintf+0xbc0>
		if (*buf != '.') {
    536e:	292e      	cmp	r1, #46	; 0x2e
    5370:	bf18      	it	ne
    5372:	4605      	movne	r5, r0
    5374:	e792      	b.n	529c <cbvprintf+0xaf8>
		|| (conv->pad0_pre_exp > 0);
    5376:	2301      	movs	r3, #1
    5378:	e7be      	b.n	52f8 <cbvprintf+0xb54>
			bpe = bps + 5;
    537a:	4d4b      	ldr	r5, [pc, #300]	; (54a8 <cbvprintf+0xd04>)
		char sign = 0;
    537c:	4607      	mov	r7, r0
			bps = "(nil)";
    537e:	1f6a      	subs	r2, r5, #5
    5380:	e5bd      	b.n	4efe <cbvprintf+0x75a>
		} else if (conv->altform_0) {
    5382:	0701      	lsls	r1, r0, #28
			nj_len += 1U;
    5384:	bf48      	it	mi
    5386:	3301      	addmi	r3, #1
    5388:	e5c2      	b.n	4f10 <cbvprintf+0x76c>
					OUTC(pad);
    538a:	4651      	mov	r1, sl
    538c:	4640      	mov	r0, r8
    538e:	9203      	str	r2, [sp, #12]
    5390:	47c8      	blx	r9
    5392:	2800      	cmp	r0, #0
    5394:	9a03      	ldr	r2, [sp, #12]
    5396:	f6bf addf 	bge.w	4f58 <cbvprintf+0x7b4>
#undef OUTS
#undef OUTC
}
    539a:	b01b      	add	sp, #108	; 0x6c
    539c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				char pad = ' ';
    53a0:	f04f 0820 	mov.w	r8, #32
    53a4:	e5d7      	b.n	4f56 <cbvprintf+0x7b2>
					pad = '0';
    53a6:	f04f 0830 	mov.w	r8, #48	; 0x30
    53aa:	e5d4      	b.n	4f56 <cbvprintf+0x7b2>
			if (conv->specifier_a) {
    53ac:	4690      	mov	r8, r2
    53ae:	9b03      	ldr	r3, [sp, #12]
    53b0:	4647      	mov	r7, r8
    53b2:	4443      	add	r3, r8
				while (*cp != 'p') {
    53b4:	f818 0b01 	ldrb.w	r0, [r8], #1
    53b8:	2870      	cmp	r0, #112	; 0x70
    53ba:	d11e      	bne.n	53fa <cbvprintf+0xc56>
			while (pad_len-- > 0) {
    53bc:	461e      	mov	r6, r3
    53be:	9b10      	ldr	r3, [sp, #64]	; 0x40
    53c0:	eb03 0806 	add.w	r8, r3, r6
    53c4:	eba8 0306 	sub.w	r3, r8, r6
    53c8:	2b00      	cmp	r3, #0
    53ca:	dc3b      	bgt.n	5444 <cbvprintf+0xca0>
			OUTS(cp, bpe);
    53cc:	462b      	mov	r3, r5
    53ce:	463a      	mov	r2, r7
			OUTS(bps, bpe);
    53d0:	4651      	mov	r1, sl
    53d2:	4648      	mov	r0, r9
    53d4:	f01c ffe2 	bl	2239c <outs>
    53d8:	2800      	cmp	r0, #0
    53da:	dbde      	blt.n	539a <cbvprintf+0xbf6>
    53dc:	4430      	add	r0, r6
			while (pad_len-- > 0) {
    53de:	4606      	mov	r6, r0
    53e0:	4483      	add	fp, r0
		while (width > 0) {
    53e2:	ebab 0306 	sub.w	r3, fp, r6
    53e6:	2b00      	cmp	r3, #0
    53e8:	f77f ac41 	ble.w	4c6e <cbvprintf+0x4ca>
			OUTC(' ');
    53ec:	4651      	mov	r1, sl
    53ee:	2020      	movs	r0, #32
    53f0:	47c8      	blx	r9
    53f2:	2800      	cmp	r0, #0
    53f4:	dbd1      	blt.n	539a <cbvprintf+0xbf6>
    53f6:	3601      	adds	r6, #1
			--width;
    53f8:	e7f3      	b.n	53e2 <cbvprintf+0xc3e>
					OUTC(*cp++);
    53fa:	4651      	mov	r1, sl
    53fc:	47c8      	blx	r9
    53fe:	2800      	cmp	r0, #0
    5400:	dad5      	bge.n	53ae <cbvprintf+0xc0a>
    5402:	e7ca      	b.n	539a <cbvprintf+0xbf6>
					OUTC(*cp++);
    5404:	4651      	mov	r1, sl
    5406:	47c8      	blx	r9
    5408:	2800      	cmp	r0, #0
    540a:	f6bf adc6 	bge.w	4f9a <cbvprintf+0x7f6>
    540e:	e7c4      	b.n	539a <cbvprintf+0xbf6>
						OUTC('0');
    5410:	4651      	mov	r1, sl
    5412:	2030      	movs	r0, #48	; 0x30
    5414:	47c8      	blx	r9
    5416:	2800      	cmp	r0, #0
    5418:	f6bf add1 	bge.w	4fbe <cbvprintf+0x81a>
    541c:	e7bd      	b.n	539a <cbvprintf+0xbf6>
						OUTC('0');
    541e:	4651      	mov	r1, sl
    5420:	2030      	movs	r0, #48	; 0x30
    5422:	47c8      	blx	r9
    5424:	3f01      	subs	r7, #1
    5426:	e5d8      	b.n	4fda <cbvprintf+0x836>
					OUTC(*cp++);
    5428:	4651      	mov	r1, sl
    542a:	47c8      	blx	r9
    542c:	2800      	cmp	r0, #0
    542e:	dbb4      	blt.n	539a <cbvprintf+0xbf6>
    5430:	4647      	mov	r7, r8
    5432:	eb06 0308 	add.w	r3, r6, r8
				while (isdigit((int)*cp)) {
    5436:	f818 0b01 	ldrb.w	r0, [r8], #1
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
    543a:	f1a0 0230 	sub.w	r2, r0, #48	; 0x30
    543e:	2a09      	cmp	r2, #9
    5440:	d9f2      	bls.n	5428 <cbvprintf+0xc84>
    5442:	e7bb      	b.n	53bc <cbvprintf+0xc18>
				OUTC('0');
    5444:	4651      	mov	r1, sl
    5446:	2030      	movs	r0, #48	; 0x30
    5448:	47c8      	blx	r9
    544a:	2800      	cmp	r0, #0
    544c:	dba5      	blt.n	539a <cbvprintf+0xbf6>
    544e:	3601      	adds	r6, #1
    5450:	e7b8      	b.n	53c4 <cbvprintf+0xc20>
			if (conv->altform_0c | conv->altform_0) {
    5452:	06d8      	lsls	r0, r3, #27
    5454:	d401      	bmi.n	545a <cbvprintf+0xcb6>
    5456:	0719      	lsls	r1, r3, #28
    5458:	d507      	bpl.n	546a <cbvprintf+0xcc6>
				OUTC('0');
    545a:	4651      	mov	r1, sl
    545c:	2030      	movs	r0, #48	; 0x30
    545e:	9203      	str	r2, [sp, #12]
    5460:	47c8      	blx	r9
    5462:	2800      	cmp	r0, #0
    5464:	db99      	blt.n	539a <cbvprintf+0xbf6>
    5466:	9a03      	ldr	r2, [sp, #12]
    5468:	3601      	adds	r6, #1
			if (conv->altform_0c) {
    546a:	f89d 303a 	ldrb.w	r3, [sp, #58]	; 0x3a
    546e:	06db      	lsls	r3, r3, #27
    5470:	d508      	bpl.n	5484 <cbvprintf+0xce0>
				OUTC(conv->specifier);
    5472:	f89d 003b 	ldrb.w	r0, [sp, #59]	; 0x3b
    5476:	9203      	str	r2, [sp, #12]
    5478:	4651      	mov	r1, sl
    547a:	47c8      	blx	r9
    547c:	2800      	cmp	r0, #0
    547e:	db8c      	blt.n	539a <cbvprintf+0xbf6>
    5480:	9a03      	ldr	r2, [sp, #12]
    5482:	3601      	adds	r6, #1
			while (pad_len-- > 0) {
    5484:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
    5486:	4437      	add	r7, r6
    5488:	1bbb      	subs	r3, r7, r6
    548a:	2b00      	cmp	r3, #0
    548c:	dc01      	bgt.n	5492 <cbvprintf+0xcee>
			OUTS(bps, bpe);
    548e:	462b      	mov	r3, r5
    5490:	e79e      	b.n	53d0 <cbvprintf+0xc2c>
				OUTC('0');
    5492:	4651      	mov	r1, sl
    5494:	2030      	movs	r0, #48	; 0x30
    5496:	9203      	str	r2, [sp, #12]
    5498:	47c8      	blx	r9
    549a:	2800      	cmp	r0, #0
    549c:	f6ff af7d 	blt.w	539a <cbvprintf+0xbf6>
    54a0:	9a03      	ldr	r2, [sp, #12]
    54a2:	3601      	adds	r6, #1
    54a4:	e7f0      	b.n	5488 <cbvprintf+0xce4>
    54a6:	bf00      	nop
    54a8:	0002b53b 	.word	0x0002b53b

000054ac <enable_logger>:

K_KERNEL_STACK_DEFINE(logging_stack, CONFIG_LOG_PROCESS_THREAD_STACK_SIZE);
struct k_thread logging_thread;

static int enable_logger(const struct device *arg)
{
    54ac:	b530      	push	{r4, r5, lr}
	ARG_UNUSED(arg);

	if (IS_ENABLED(CONFIG_LOG_PROCESS_THREAD)) {
		k_timer_init(&log_process_thread_timer,
    54ae:	4910      	ldr	r1, [pc, #64]	; (54f0 <enable_logger+0x44>)
    54b0:	4810      	ldr	r0, [pc, #64]	; (54f4 <enable_logger+0x48>)
{
    54b2:	b089      	sub	sp, #36	; 0x24
		k_timer_init(&log_process_thread_timer,
    54b4:	2200      	movs	r2, #0
    54b6:	f021 ff0c 	bl	272d2 <k_timer_init>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    54ba:	4d0f      	ldr	r5, [pc, #60]	; (54f8 <enable_logger+0x4c>)
    54bc:	490f      	ldr	r1, [pc, #60]	; (54fc <enable_logger+0x50>)
    54be:	2200      	movs	r2, #0
    54c0:	2300      	movs	r3, #0
    54c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
    54c6:	2400      	movs	r4, #0
    54c8:	230e      	movs	r3, #14
    54ca:	e9cd 3403 	strd	r3, r4, [sp, #12]
    54ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
    54d2:	4b0b      	ldr	r3, [pc, #44]	; (5500 <enable_logger+0x54>)
    54d4:	9400      	str	r4, [sp, #0]
    54d6:	f44f 7240 	mov.w	r2, #768	; 0x300
    54da:	4628      	mov	r0, r5
    54dc:	f01b f85a 	bl	20594 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    54e0:	4908      	ldr	r1, [pc, #32]	; (5504 <enable_logger+0x58>)
    54e2:	4628      	mov	r0, r5
    54e4:	f021 fe07 	bl	270f6 <z_impl_k_thread_name_set>
	} else {
		log_init();
	}

	return 0;
}
    54e8:	4620      	mov	r0, r4
    54ea:	b009      	add	sp, #36	; 0x24
    54ec:	bd30      	pop	{r4, r5, pc}
    54ee:	bf00      	nop
    54f0:	00005509 	.word	0x00005509
    54f4:	2000a4a0 	.word	0x2000a4a0
    54f8:	2000a4d8 	.word	0x2000a4d8
    54fc:	20010000 	.word	0x20010000
    5500:	00005861 	.word	0x00005861
    5504:	0002b53c 	.word	0x0002b53c

00005508 <log_process_thread_timer_expiry_fn>:
		arch_syscall_invoke1(*(uintptr_t *)&sem, K_SYSCALL_K_SEM_GIVE);
		return;
	}
#endif
	compiler_barrier();
	z_impl_k_sem_give(sem);
    5508:	4801      	ldr	r0, [pc, #4]	; (5510 <log_process_thread_timer_expiry_fn+0x8>)
    550a:	f01a bfab 	b.w	20464 <z_impl_k_sem_give>
    550e:	bf00      	nop
    5510:	20009fe0 	.word	0x20009fe0

00005514 <log_core_init>:
{
    5514:	b508      	push	{r3, lr}
		log_msg_pool_init();
    5516:	f000 fa67 	bl	59e8 <log_msg_pool_init>
		log_list_init(&list);
    551a:	4809      	ldr	r0, [pc, #36]	; (5540 <log_core_init+0x2c>)
    551c:	f01c ff55 	bl	223ca <log_list_init>
		k_mem_slab_init(&log_strdup_pool, log_strdup_pool_buf,
    5520:	2304      	movs	r3, #4
    5522:	2228      	movs	r2, #40	; 0x28
    5524:	4907      	ldr	r1, [pc, #28]	; (5544 <log_core_init+0x30>)
    5526:	4808      	ldr	r0, [pc, #32]	; (5548 <log_core_init+0x34>)
    5528:	f021 fbe6 	bl	26cf8 <k_mem_slab_init>
		timestamp_func = k_cycle_get_32_wrapper;
    552c:	4b07      	ldr	r3, [pc, #28]	; (554c <log_core_init+0x38>)
    552e:	4a08      	ldr	r2, [pc, #32]	; (5550 <log_core_init+0x3c>)
    5530:	601a      	str	r2, [r3, #0]
	log_output_timestamp_freq_set(freq);
    5532:	f44f 4000 	mov.w	r0, #32768	; 0x8000
}
    5536:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	log_output_timestamp_freq_set(freq);
    553a:	f000 bc9d 	b.w	5e78 <log_output_timestamp_freq_set>
    553e:	bf00      	nop
    5540:	2000d510 	.word	0x2000d510
    5544:	20012bb8 	.word	0x20012bb8
    5548:	2000d518 	.word	0x2000d518
    554c:	20000280 	.word	0x20000280
    5550:	00022409 	.word	0x00022409

00005554 <dropped_notify>:
{
    5554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5556:	4b0f      	ldr	r3, [pc, #60]	; (5594 <dropped_notify+0x40>)
    5558:	f3bf 8f5b 	dmb	ish
    555c:	2500      	movs	r5, #0
    555e:	e853 7f00 	ldrex	r7, [r3]
    5562:	e843 5200 	strex	r2, r5, [r3]
    5566:	2a00      	cmp	r2, #0
    5568:	d1f9      	bne.n	555e <dropped_notify+0xa>
    556a:	f3bf 8f5b 	dmb	ish
 *
 * @return Number of backends.
 */
static inline int log_backend_count_get(void)
{
	return __log_backends_end - __log_backends_start;
    556e:	4c0a      	ldr	r4, [pc, #40]	; (5598 <dropped_notify+0x44>)
    5570:	4e0a      	ldr	r6, [pc, #40]	; (559c <dropped_notify+0x48>)
    5572:	1b36      	subs	r6, r6, r4
    5574:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5576:	42b5      	cmp	r5, r6
    5578:	db00      	blt.n	557c <dropped_notify+0x28>
}
    557a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 */
static inline bool log_backend_is_active(
				const struct log_backend *const backend)
{
	__ASSERT_NO_MSG(backend != NULL);
	return backend->cb->active;
    557c:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    557e:	795b      	ldrb	r3, [r3, #5]
    5580:	b12b      	cbz	r3, 558e <dropped_notify+0x3a>
	if (backend->api->dropped != NULL) {
    5582:	6823      	ldr	r3, [r4, #0]
    5584:	68db      	ldr	r3, [r3, #12]
    5586:	b113      	cbz	r3, 558e <dropped_notify+0x3a>
		backend->api->dropped(backend, cnt);
    5588:	4639      	mov	r1, r7
    558a:	4620      	mov	r0, r4
    558c:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    558e:	3501      	adds	r5, #1
    5590:	3410      	adds	r4, #16
    5592:	e7f0      	b.n	5576 <dropped_notify+0x22>
    5594:	2000d508 	.word	0x2000d508
    5598:	00027a28 	.word	0x00027a28
    559c:	00027a48 	.word	0x00027a48

000055a0 <log_dropped>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    55a0:	4b06      	ldr	r3, [pc, #24]	; (55bc <log_dropped+0x1c>)
    55a2:	f3bf 8f5b 	dmb	ish
    55a6:	e853 2f00 	ldrex	r2, [r3]
    55aa:	3201      	adds	r2, #1
    55ac:	e843 2100 	strex	r1, r2, [r3]
    55b0:	2900      	cmp	r1, #0
    55b2:	d1f8      	bne.n	55a6 <log_dropped+0x6>
    55b4:	f3bf 8f5b 	dmb	ish
}
    55b8:	4770      	bx	lr
    55ba:	bf00      	nop
    55bc:	2000d508 	.word	0x2000d508

000055c0 <log_source_name_get>:
    55c0:	4a04      	ldr	r2, [pc, #16]	; (55d4 <log_source_name_get+0x14>)
    55c2:	4b05      	ldr	r3, [pc, #20]	; (55d8 <log_source_name_get+0x18>)
    55c4:	1a9b      	subs	r3, r3, r2
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    55c6:	ebb1 0fd3 	cmp.w	r1, r3, lsr #3
	return __log_const_start[source_id].name;
    55ca:	bf34      	ite	cc
    55cc:	f852 0031 	ldrcc.w	r0, [r2, r1, lsl #3]
    55d0:	2000      	movcs	r0, #0
}
    55d2:	4770      	bx	lr
    55d4:	000278c0 	.word	0x000278c0
    55d8:	00027a28 	.word	0x00027a28

000055dc <log_backend_enable>:
	id += backend - log_backend_get(0);
    55dc:	4a09      	ldr	r2, [pc, #36]	; (5604 <log_backend_enable+0x28>)
	backend->cb->id = id;
    55de:	6843      	ldr	r3, [r0, #4]
    55e0:	1a80      	subs	r0, r0, r2
{
    55e2:	b510      	push	{r4, lr}
	id += backend - log_backend_get(0);
    55e4:	1100      	asrs	r0, r0, #4
	if (!backend_attached) {
    55e6:	4c08      	ldr	r4, [pc, #32]	; (5608 <log_backend_enable+0x2c>)
	backend->cb->ctx = ctx;
    55e8:	6019      	str	r1, [r3, #0]
	id += backend - log_backend_get(0);
    55ea:	3001      	adds	r0, #1
	backend->cb->active = true;
    55ec:	2201      	movs	r2, #1
	log_backend_id_set(backend, id);
    55ee:	7118      	strb	r0, [r3, #4]
    55f0:	715a      	strb	r2, [r3, #5]
	if (!backend_attached) {
    55f2:	7823      	ldrb	r3, [r4, #0]
    55f4:	b913      	cbnz	r3, 55fc <log_backend_enable+0x20>
    55f6:	4805      	ldr	r0, [pc, #20]	; (560c <log_backend_enable+0x30>)
    55f8:	f01a ff34 	bl	20464 <z_impl_k_sem_give>
	backend_attached = true;
    55fc:	2301      	movs	r3, #1
    55fe:	7023      	strb	r3, [r4, #0]
}
    5600:	bd10      	pop	{r4, pc}
    5602:	bf00      	nop
    5604:	00027a28 	.word	0x00027a28
    5608:	2000ed89 	.word	0x2000ed89
    560c:	20009fe0 	.word	0x20009fe0

00005610 <log_init>:
{
    5610:	b570      	push	{r4, r5, r6, lr}
    5612:	4b11      	ldr	r3, [pc, #68]	; (5658 <log_init+0x48>)
    5614:	f3bf 8f5b 	dmb	ish
    5618:	e853 5f00 	ldrex	r5, [r3]
    561c:	1c6a      	adds	r2, r5, #1
    561e:	e843 2100 	strex	r1, r2, [r3]
    5622:	2900      	cmp	r1, #0
    5624:	d1f8      	bne.n	5618 <log_init+0x8>
    5626:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&initialized) != 0) {
    562a:	b92d      	cbnz	r5, 5638 <log_init+0x28>
	return __log_backends_end - __log_backends_start;
    562c:	4c0b      	ldr	r4, [pc, #44]	; (565c <log_init+0x4c>)
    562e:	4e0c      	ldr	r6, [pc, #48]	; (5660 <log_init+0x50>)
    5630:	1b36      	subs	r6, r6, r4
    5632:	1136      	asrs	r6, r6, #4
	for (i = 0; i < log_backend_count_get(); i++) {
    5634:	42b5      	cmp	r5, r6
    5636:	db00      	blt.n	563a <log_init+0x2a>
}
    5638:	bd70      	pop	{r4, r5, r6, pc}
		if (backend->autostart) {
    563a:	7b23      	ldrb	r3, [r4, #12]
    563c:	b143      	cbz	r3, 5650 <log_init+0x40>
			if (backend->api->init != NULL) {
    563e:	6823      	ldr	r3, [r4, #0]
    5640:	695b      	ldr	r3, [r3, #20]
    5642:	b103      	cbz	r3, 5646 <log_init+0x36>
				backend->api->init();
    5644:	4798      	blx	r3
			log_backend_enable(backend, NULL, CONFIG_LOG_MAX_LEVEL);
    5646:	2204      	movs	r2, #4
    5648:	2100      	movs	r1, #0
    564a:	4620      	mov	r0, r4
    564c:	f7ff ffc6 	bl	55dc <log_backend_enable>
	for (i = 0; i < log_backend_count_get(); i++) {
    5650:	3501      	adds	r5, #1
    5652:	3410      	adds	r4, #16
    5654:	e7ee      	b.n	5634 <log_init+0x24>
    5656:	bf00      	nop
    5658:	2000d50c 	.word	0x2000d50c
    565c:	00027a28 	.word	0x00027a28
    5660:	00027a48 	.word	0x00027a48

00005664 <log_strdup>:
	return (((const char *)addr >= (const char *)RO_START) &&
    5664:	4b16      	ldr	r3, [pc, #88]	; (56c0 <log_strdup+0x5c>)
    5666:	4298      	cmp	r0, r3
{
    5668:	b537      	push	{r0, r1, r2, r4, r5, lr}
    566a:	4604      	mov	r4, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    566c:	d302      	bcc.n	5674 <log_strdup+0x10>
	if (IS_ENABLED(CONFIG_LOG_IMMEDIATE) ||
    566e:	4b15      	ldr	r3, [pc, #84]	; (56c4 <log_strdup+0x60>)
    5670:	4298      	cmp	r0, r3
    5672:	d320      	bcc.n	56b6 <log_strdup+0x52>
	err = k_mem_slab_alloc(&log_strdup_pool, (void **)&dup, K_NO_WAIT);
    5674:	4814      	ldr	r0, [pc, #80]	; (56c8 <log_strdup+0x64>)
    5676:	2200      	movs	r2, #0
    5678:	2300      	movs	r3, #0
    567a:	a901      	add	r1, sp, #4
    567c:	f01a fa24 	bl	1fac8 <k_mem_slab_alloc>
	if (err != 0) {
    5680:	4605      	mov	r5, r0
    5682:	b9d8      	cbnz	r0, 56bc <log_strdup+0x58>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    5684:	2201      	movs	r2, #1
    5686:	9b01      	ldr	r3, [sp, #4]
    5688:	f3bf 8f5b 	dmb	ish
    568c:	e853 1f00 	ldrex	r1, [r3]
    5690:	e843 2000 	strex	r0, r2, [r3]
    5694:	2800      	cmp	r0, #0
    5696:	d1f9      	bne.n	568c <log_strdup+0x28>
    5698:	f3bf 8f5b 	dmb	ish
	strncpy(dup->buf, str, sizeof(dup->buf) - 2);
    569c:	9801      	ldr	r0, [sp, #4]
    569e:	4621      	mov	r1, r4
    56a0:	221f      	movs	r2, #31
    56a2:	3004      	adds	r0, #4
    56a4:	f01e fe90 	bl	243c8 <strncpy>
	dup->buf[sizeof(dup->buf) - 2] = '~';
    56a8:	9c01      	ldr	r4, [sp, #4]
    56aa:	237e      	movs	r3, #126	; 0x7e
    56ac:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	dup->buf[sizeof(dup->buf) - 1] = '\0';
    56b0:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return dup->buf;
    56b4:	3404      	adds	r4, #4
}
    56b6:	4620      	mov	r0, r4
    56b8:	b003      	add	sp, #12
    56ba:	bd30      	pop	{r4, r5, pc}
		return (char *)log_strdup_fail_msg;
    56bc:	4c03      	ldr	r4, [pc, #12]	; (56cc <log_strdup+0x68>)
    56be:	e7fa      	b.n	56b6 <log_strdup+0x52>
    56c0:	000275dc 	.word	0x000275dc
    56c4:	0002da80 	.word	0x0002da80
    56c8:	2000d518 	.word	0x2000d518
    56cc:	0002b544 	.word	0x0002b544

000056d0 <log_is_strdup>:
	return PART_OF_ARRAY(log_strdup_pool_buf, (uint8_t *)buf);
    56d0:	b148      	cbz	r0, 56e6 <log_is_strdup+0x16>
    56d2:	4b05      	ldr	r3, [pc, #20]	; (56e8 <log_is_strdup+0x18>)
    56d4:	4298      	cmp	r0, r3
    56d6:	d305      	bcc.n	56e4 <log_is_strdup+0x14>
    56d8:	33a0      	adds	r3, #160	; 0xa0
    56da:	4298      	cmp	r0, r3
    56dc:	bf2c      	ite	cs
    56de:	2000      	movcs	r0, #0
    56e0:	2001      	movcc	r0, #1
    56e2:	4770      	bx	lr
    56e4:	2000      	movs	r0, #0
}
    56e6:	4770      	bx	lr
    56e8:	20012bb8 	.word	0x20012bb8

000056ec <z_impl_log_process>:
{
    56ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (!backend_attached && !bypass) {
    56f0:	4b4d      	ldr	r3, [pc, #308]	; (5828 <z_impl_log_process+0x13c>)
    56f2:	781b      	ldrb	r3, [r3, #0]
{
    56f4:	b085      	sub	sp, #20
    56f6:	4604      	mov	r4, r0
	if (!backend_attached && !bypass) {
    56f8:	b903      	cbnz	r3, 56fc <z_impl_log_process+0x10>
    56fa:	b360      	cbz	r0, 5756 <z_impl_log_process+0x6a>
    56fc:	f04f 0320 	mov.w	r3, #32
    5700:	f3ef 8611 	mrs	r6, BASEPRI
    5704:	f383 8811 	msr	BASEPRI, r3
    5708:	f3bf 8f6f 	isb	sy
	msg = log_list_head_get(&list);
    570c:	4847      	ldr	r0, [pc, #284]	; (582c <z_impl_log_process+0x140>)
    570e:	f01c fe6c 	bl	223ea <log_list_head_get>
    5712:	4605      	mov	r5, r0
	__asm__ volatile(
    5714:	f386 8811 	msr	BASEPRI, r6
    5718:	f3bf 8f6f 	isb	sy
	if (msg != NULL) {
    571c:	b178      	cbz	r0, 573e <z_impl_log_process+0x52>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    571e:	f3bf 8f5b 	dmb	ish
    5722:	4b43      	ldr	r3, [pc, #268]	; (5830 <z_impl_log_process+0x144>)
    5724:	e853 2f00 	ldrex	r2, [r3]
    5728:	3a01      	subs	r2, #1
    572a:	e843 2100 	strex	r1, r2, [r3]
    572e:	2900      	cmp	r1, #0
    5730:	d1f8      	bne.n	5724 <z_impl_log_process+0x38>
    5732:	f3bf 8f5b 	dmb	ish
	if (!bypass) {
    5736:	b194      	cbz	r4, 575e <z_impl_log_process+0x72>
	log_msg_put(msg);
    5738:	4628      	mov	r0, r5
    573a:	f01c ff6f 	bl	2261c <log_msg_put>
	if (!bypass && dropped_cnt) {
    573e:	b924      	cbnz	r4, 574a <z_impl_log_process+0x5e>
    5740:	4b3c      	ldr	r3, [pc, #240]	; (5834 <z_impl_log_process+0x148>)
    5742:	681b      	ldr	r3, [r3, #0]
    5744:	b10b      	cbz	r3, 574a <z_impl_log_process+0x5e>
		dropped_notify();
    5746:	f7ff ff05 	bl	5554 <dropped_notify>
	return (log_list_head_peek(&list) != NULL);
    574a:	4838      	ldr	r0, [pc, #224]	; (582c <z_impl_log_process+0x140>)
    574c:	f01c fe4b 	bl	223e6 <log_list_head_peek>
    5750:	1e04      	subs	r4, r0, #0
    5752:	bf18      	it	ne
    5754:	2401      	movne	r4, #1
}
    5756:	4620      	mov	r0, r4
    5758:	b005      	add	sp, #20
    575a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		    !panic_mode) {
    575e:	4b36      	ldr	r3, [pc, #216]	; (5838 <z_impl_log_process+0x14c>)
		if (IS_ENABLED(CONFIG_LOG_DETECT_MISSED_STRDUP) &&
    5760:	781b      	ldrb	r3, [r3, #0]
    5762:	b9e3      	cbnz	r3, 579e <z_impl_log_process+0xb2>
 * @retval true  Standard message.
 * @retval false Hexdump message.
 */
static inline bool log_msg_is_std(struct log_msg *msg)
{
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5764:	7a2b      	ldrb	r3, [r5, #8]
	if (!log_msg_is_std(msg)) {
    5766:	07db      	lsls	r3, r3, #31
    5768:	d419      	bmi.n	579e <z_impl_log_process+0xb2>
	msg_str = log_msg_str_get(msg);
    576a:	f01c ff6a 	bl	22642 <log_msg_str_get>
    576e:	4607      	mov	r7, r0
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5770:	4628      	mov	r0, r5
    5772:	f01c ff31 	bl	225d8 <log_msg_nargs_get>
    5776:	4601      	mov	r1, r0
    5778:	4638      	mov	r0, r7
    577a:	f01c fe49 	bl	22410 <z_log_get_s_mask>
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    577e:	f8df 80bc 	ldr.w	r8, [pc, #188]	; 583c <z_impl_log_process+0x150>
    5782:	4b2f      	ldr	r3, [pc, #188]	; (5840 <z_impl_log_process+0x154>)
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    5784:	f8df b0bc 	ldr.w	fp, [pc, #188]	; 5844 <z_impl_log_process+0x158>
    5788:	eba3 0308 	sub.w	r3, r3, r8
    578c:	08db      	lsrs	r3, r3, #3
    578e:	9303      	str	r3, [sp, #12]
    5790:	4b2d      	ldr	r3, [pc, #180]	; (5848 <z_impl_log_process+0x15c>)
    5792:	eba3 0308 	sub.w	r3, r3, r8
	mask = z_log_get_s_mask(msg_str, log_msg_nargs_get(msg));
    5796:	4606      	mov	r6, r0
    5798:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
	while (mask) {
    579c:	b936      	cbnz	r6, 57ac <z_impl_log_process+0xc0>
    579e:	4e2b      	ldr	r6, [pc, #172]	; (584c <z_impl_log_process+0x160>)
    57a0:	4f2b      	ldr	r7, [pc, #172]	; (5850 <z_impl_log_process+0x164>)
    57a2:	1bbf      	subs	r7, r7, r6
    57a4:	113f      	asrs	r7, r7, #4
    57a6:	f04f 0800 	mov.w	r8, #0
    57aa:	e03a      	b.n	5822 <z_impl_log_process+0x136>
		idx = 31 - __builtin_clz(mask);
    57ac:	fab6 f186 	clz	r1, r6
    57b0:	f1c1 091f 	rsb	r9, r1, #31
		str = (const char *)log_msg_arg_get(msg, idx);
    57b4:	4649      	mov	r1, r9
    57b6:	4628      	mov	r0, r5
    57b8:	f01c ff11 	bl	225de <log_msg_arg_get>
	return (((const char *)addr >= (const char *)RO_START) &&
    57bc:	4b25      	ldr	r3, [pc, #148]	; (5854 <z_impl_log_process+0x168>)
    57be:	4298      	cmp	r0, r3
		str = (const char *)log_msg_arg_get(msg, idx);
    57c0:	4601      	mov	r1, r0
	return (((const char *)addr >= (const char *)RO_START) &&
    57c2:	d302      	bcc.n	57ca <z_impl_log_process+0xde>
		if (!is_rodata(str) && !log_is_strdup(str) &&
    57c4:	4a24      	ldr	r2, [pc, #144]	; (5858 <z_impl_log_process+0x16c>)
    57c6:	4290      	cmp	r0, r2
    57c8:	d31a      	bcc.n	5800 <z_impl_log_process+0x114>
    57ca:	4608      	mov	r0, r1
    57cc:	f7ff ff80 	bl	56d0 <log_is_strdup>
    57d0:	4602      	mov	r2, r0
    57d2:	b9a8      	cbnz	r0, 5800 <z_impl_log_process+0x114>
    57d4:	4b21      	ldr	r3, [pc, #132]	; (585c <z_impl_log_process+0x170>)
    57d6:	4299      	cmp	r1, r3
    57d8:	d012      	beq.n	5800 <z_impl_log_process+0x114>
	return msg->hdr.ids.source_id;
    57da:	896b      	ldrh	r3, [r5, #10]
	return src_id < log_sources_count() ? log_name_get(src_id) : NULL;
    57dc:	9903      	ldr	r1, [sp, #12]
    57de:	f3c3 1389 	ubfx	r3, r3, #6, #10
    57e2:	428b      	cmp	r3, r1
	return __log_const_start[source_id].name;
    57e4:	bf38      	it	cc
    57e6:	f858 2033 	ldrcc.w	r2, [r8, r3, lsl #3]
				LOG_ERR(ERR_MSG, idx, src_name, msg_str);
    57ea:	ea4f 138a 	mov.w	r3, sl, lsl #6
    57ee:	f043 0301 	orr.w	r3, r3, #1
    57f2:	f8ad 3000 	strh.w	r3, [sp]
    57f6:	4649      	mov	r1, r9
    57f8:	463b      	mov	r3, r7
    57fa:	4658      	mov	r0, fp
    57fc:	f01c fe62 	bl	224c4 <log_3>
		mask &= ~BIT(idx);
    5800:	2301      	movs	r3, #1
    5802:	fa03 f109 	lsl.w	r1, r3, r9
    5806:	ea26 0601 	bic.w	r6, r6, r1
    580a:	e7c7      	b.n	579c <z_impl_log_process+0xb0>
	return backend->cb->active;
    580c:	6873      	ldr	r3, [r6, #4]
			if (log_backend_is_active(backend) &&
    580e:	795b      	ldrb	r3, [r3, #5]
    5810:	b123      	cbz	r3, 581c <z_impl_log_process+0x130>
	backend->api->put(backend, msg);
    5812:	6833      	ldr	r3, [r6, #0]
    5814:	4629      	mov	r1, r5
    5816:	681b      	ldr	r3, [r3, #0]
    5818:	4630      	mov	r0, r6
    581a:	4798      	blx	r3
		for (int i = 0; i < log_backend_count_get(); i++) {
    581c:	f108 0801 	add.w	r8, r8, #1
    5820:	3610      	adds	r6, #16
    5822:	45b8      	cmp	r8, r7
    5824:	dbf2      	blt.n	580c <z_impl_log_process+0x120>
    5826:	e787      	b.n	5738 <z_impl_log_process+0x4c>
    5828:	2000ed89 	.word	0x2000ed89
    582c:	2000d510 	.word	0x2000d510
    5830:	2000d504 	.word	0x2000d504
    5834:	2000d508 	.word	0x2000d508
    5838:	2000ed8a 	.word	0x2000ed8a
    583c:	000278c0 	.word	0x000278c0
    5840:	00027a28 	.word	0x00027a28
    5844:	0002b55e 	.word	0x0002b55e
    5848:	000279e0 	.word	0x000279e0
    584c:	00027a28 	.word	0x00027a28
    5850:	00027a48 	.word	0x00027a48
    5854:	000275dc 	.word	0x000275dc
    5858:	0002da80 	.word	0x0002da80
    585c:	0002b544 	.word	0x0002b544

00005860 <log_process_thread_func>:
{
    5860:	b510      	push	{r4, lr}
	log_init();
    5862:	f7ff fed5 	bl	5610 <log_init>
	return z_impl_k_current_get();
    5866:	f01a fdf7 	bl	20458 <z_impl_k_current_get>
	proc_tid = process_tid;
    586a:	4b0c      	ldr	r3, [pc, #48]	; (589c <log_process_thread_func+0x3c>)
    586c:	6018      	str	r0, [r3, #0]
	if (CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD &&
    586e:	b130      	cbz	r0, 587e <log_process_thread_func+0x1e>
	    buffered_cnt >= CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) {
    5870:	4b0b      	ldr	r3, [pc, #44]	; (58a0 <log_process_thread_func+0x40>)
	    process_tid &&
    5872:	681b      	ldr	r3, [r3, #0]
    5874:	2b09      	cmp	r3, #9
    5876:	dd02      	ble.n	587e <log_process_thread_func+0x1e>
	z_impl_k_sem_give(sem);
    5878:	480a      	ldr	r0, [pc, #40]	; (58a4 <log_process_thread_func+0x44>)
    587a:	f01a fdf3 	bl	20464 <z_impl_k_sem_give>
	return z_impl_k_sem_take(sem, timeout);
    587e:	4c09      	ldr	r4, [pc, #36]	; (58a4 <log_process_thread_func+0x44>)
	if (z_syscall_trap()) {
		return (bool) arch_syscall_invoke1(*(uintptr_t *)&bypass, K_SYSCALL_LOG_PROCESS);
	}
#endif
	compiler_barrier();
	return z_impl_log_process(bypass);
    5880:	2000      	movs	r0, #0
    5882:	f7ff ff33 	bl	56ec <z_impl_log_process>
		if (log_process(false) == false) {
    5886:	2800      	cmp	r0, #0
    5888:	d1fa      	bne.n	5880 <log_process_thread_func+0x20>
    588a:	f04f 32ff 	mov.w	r2, #4294967295
    588e:	f04f 33ff 	mov.w	r3, #4294967295
    5892:	4620      	mov	r0, r4
    5894:	f01a fe0c 	bl	204b0 <z_impl_k_sem_take>
    5898:	e7f2      	b.n	5880 <log_process_thread_func+0x20>
    589a:	bf00      	nop
    589c:	2000d534 	.word	0x2000d534
    58a0:	2000d504 	.word	0x2000d504
    58a4:	20009fe0 	.word	0x20009fe0

000058a8 <msg_finalize>:
	msg->hdr.timestamp = timestamp_func();
    58a8:	4b29      	ldr	r3, [pc, #164]	; (5950 <msg_finalize+0xa8>)
{
    58aa:	b573      	push	{r0, r1, r4, r5, r6, lr}
	msg->hdr.timestamp = timestamp_func();
    58ac:	681b      	ldr	r3, [r3, #0]
	msg->hdr.ids = src_level;
    58ae:	8141      	strh	r1, [r0, #10]
{
    58b0:	4604      	mov	r4, r0
	msg->hdr.timestamp = timestamp_func();
    58b2:	4798      	blx	r3
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    58b4:	4d27      	ldr	r5, [pc, #156]	; (5954 <msg_finalize+0xac>)
    58b6:	60e0      	str	r0, [r4, #12]
    58b8:	f3bf 8f5b 	dmb	ish
    58bc:	e855 3f00 	ldrex	r3, [r5]
    58c0:	3301      	adds	r3, #1
    58c2:	e845 3200 	strex	r2, r3, [r5]
    58c6:	2a00      	cmp	r2, #0
    58c8:	d1f8      	bne.n	58bc <msg_finalize+0x14>
    58ca:	f3bf 8f5b 	dmb	ish
	__asm__ volatile(
    58ce:	f04f 0320 	mov.w	r3, #32
    58d2:	f3ef 8611 	mrs	r6, BASEPRI
    58d6:	f383 8811 	msr	BASEPRI, r3
    58da:	f3bf 8f6f 	isb	sy
	log_list_add_tail(&list, msg);
    58de:	481e      	ldr	r0, [pc, #120]	; (5958 <msg_finalize+0xb0>)
    58e0:	4621      	mov	r1, r4
    58e2:	f01c fd76 	bl	223d2 <log_list_add_tail>
	__asm__ volatile(
    58e6:	f386 8811 	msr	BASEPRI, r6
    58ea:	f3bf 8f6f 	isb	sy
	if (panic_mode) {
    58ee:	4b1b      	ldr	r3, [pc, #108]	; (595c <msg_finalize+0xb4>)
    58f0:	781b      	ldrb	r3, [r3, #0]
    58f2:	b183      	cbz	r3, 5916 <msg_finalize+0x6e>
	__asm__ volatile(
    58f4:	f04f 0320 	mov.w	r3, #32
    58f8:	f3ef 8411 	mrs	r4, BASEPRI
    58fc:	f383 8811 	msr	BASEPRI, r3
    5900:	f3bf 8f6f 	isb	sy
    5904:	2000      	movs	r0, #0
    5906:	f7ff fef1 	bl	56ec <z_impl_log_process>
	__asm__ volatile(
    590a:	f384 8811 	msr	BASEPRI, r4
    590e:	f3bf 8f6f 	isb	sy
}
    5912:	b002      	add	sp, #8
    5914:	bd70      	pop	{r4, r5, r6, pc}
	} else if (proc_tid != NULL && buffered_cnt == 1) {
    5916:	4a12      	ldr	r2, [pc, #72]	; (5960 <msg_finalize+0xb8>)
    5918:	682b      	ldr	r3, [r5, #0]
    591a:	6812      	ldr	r2, [r2, #0]
    591c:	2a00      	cmp	r2, #0
    591e:	d0f8      	beq.n	5912 <msg_finalize+0x6a>
    5920:	2b01      	cmp	r3, #1
    5922:	d10a      	bne.n	593a <msg_finalize+0x92>
	z_impl_k_timer_start(timer, duration, period);
    5924:	2200      	movs	r2, #0
    5926:	2300      	movs	r3, #0
    5928:	e9cd 2300 	strd	r2, r3, [sp]
    592c:	480d      	ldr	r0, [pc, #52]	; (5964 <msg_finalize+0xbc>)
    592e:	f44f 4200 	mov.w	r2, #32768	; 0x8000
    5932:	2300      	movs	r3, #0
    5934:	f01b f8be 	bl	20ab4 <z_impl_k_timer_start>
    5938:	e7eb      	b.n	5912 <msg_finalize+0x6a>
		if ((buffered_cnt == CONFIG_LOG_PROCESS_TRIGGER_THRESHOLD) &&
    593a:	2b0a      	cmp	r3, #10
    593c:	d1e9      	bne.n	5912 <msg_finalize+0x6a>
	z_impl_k_timer_stop(timer);
    593e:	4809      	ldr	r0, [pc, #36]	; (5964 <msg_finalize+0xbc>)
    5940:	f021 fcd3 	bl	272ea <z_impl_k_timer_stop>
	z_impl_k_sem_give(sem);
    5944:	4808      	ldr	r0, [pc, #32]	; (5968 <msg_finalize+0xc0>)
}
    5946:	b002      	add	sp, #8
    5948:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    594c:	f01a bd8a 	b.w	20464 <z_impl_k_sem_give>
    5950:	20000280 	.word	0x20000280
    5954:	2000d504 	.word	0x2000d504
    5958:	2000d510 	.word	0x2000d510
    595c:	2000ed8a 	.word	0x2000ed8a
    5960:	2000d534 	.word	0x2000d534
    5964:	2000a4a0 	.word	0x2000a4a0
    5968:	20009fe0 	.word	0x20009fe0

0000596c <z_impl_log_panic>:
{
    596c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (panic_mode) {
    596e:	4f0e      	ldr	r7, [pc, #56]	; (59a8 <z_impl_log_panic+0x3c>)
    5970:	783d      	ldrb	r5, [r7, #0]
    5972:	b975      	cbnz	r5, 5992 <z_impl_log_panic+0x26>
	return __log_backends_end - __log_backends_start;
    5974:	4c0d      	ldr	r4, [pc, #52]	; (59ac <z_impl_log_panic+0x40>)
    5976:	4e0e      	ldr	r6, [pc, #56]	; (59b0 <z_impl_log_panic+0x44>)
	log_init();
    5978:	f7ff fe4a 	bl	5610 <log_init>
    597c:	1b36      	subs	r6, r6, r4
    597e:	1136      	asrs	r6, r6, #4
	for (int i = 0; i < log_backend_count_get(); i++) {
    5980:	42b5      	cmp	r5, r6
    5982:	db07      	blt.n	5994 <z_impl_log_panic+0x28>
    5984:	2000      	movs	r0, #0
    5986:	f7ff feb1 	bl	56ec <z_impl_log_process>
		while (log_process(false) == true) {
    598a:	2800      	cmp	r0, #0
    598c:	d1fa      	bne.n	5984 <z_impl_log_panic+0x18>
	panic_mode = true;
    598e:	2301      	movs	r3, #1
    5990:	703b      	strb	r3, [r7, #0]
}
    5992:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return backend->cb->active;
    5994:	6863      	ldr	r3, [r4, #4]
		if (log_backend_is_active(backend)) {
    5996:	795b      	ldrb	r3, [r3, #5]
    5998:	b11b      	cbz	r3, 59a2 <z_impl_log_panic+0x36>
	backend->api->panic(backend);
    599a:	6823      	ldr	r3, [r4, #0]
    599c:	4620      	mov	r0, r4
    599e:	691b      	ldr	r3, [r3, #16]
    59a0:	4798      	blx	r3
	for (int i = 0; i < log_backend_count_get(); i++) {
    59a2:	3501      	adds	r5, #1
    59a4:	3410      	adds	r4, #16
    59a6:	e7eb      	b.n	5980 <z_impl_log_panic+0x14>
    59a8:	2000ed8a 	.word	0x2000ed8a
    59ac:	00027a28 	.word	0x00027a28
    59b0:	00027a48 	.word	0x00027a48

000059b4 <log_free>:
{
    59b4:	b507      	push	{r0, r1, r2, lr}
	struct log_strdup_buf *dup = CONTAINER_OF(str, struct log_strdup_buf,
    59b6:	3804      	subs	r0, #4
    59b8:	9001      	str	r0, [sp, #4]
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    59ba:	f3bf 8f5b 	dmb	ish
    59be:	e850 3f00 	ldrex	r3, [r0]
    59c2:	1e5a      	subs	r2, r3, #1
    59c4:	e840 2100 	strex	r1, r2, [r0]
    59c8:	2900      	cmp	r1, #0
    59ca:	d1f8      	bne.n	59be <log_free+0xa>
    59cc:	f3bf 8f5b 	dmb	ish
	if (atomic_dec(&dup->refcount) == 1) {
    59d0:	2b01      	cmp	r3, #1
    59d2:	d103      	bne.n	59dc <log_free+0x28>
		k_mem_slab_free(&log_strdup_pool, (void **)&dup);
    59d4:	4803      	ldr	r0, [pc, #12]	; (59e4 <log_free+0x30>)
    59d6:	a901      	add	r1, sp, #4
    59d8:	f01a f8a6 	bl	1fb28 <k_mem_slab_free>
}
    59dc:	b003      	add	sp, #12
    59de:	f85d fb04 	ldr.w	pc, [sp], #4
    59e2:	bf00      	nop
    59e4:	2000d518 	.word	0x2000d518

000059e8 <log_msg_pool_init>:
static uint8_t __noinit __aligned(sizeof(void *))
		log_msg_pool_buf[CONFIG_LOG_BUFFER_SIZE];

void log_msg_pool_init(void)
{
	k_mem_slab_init(&log_msg_pool, log_msg_pool_buf, MSG_SIZE, NUM_OF_MSGS);
    59e8:	2320      	movs	r3, #32
    59ea:	4902      	ldr	r1, [pc, #8]	; (59f4 <log_msg_pool_init+0xc>)
    59ec:	4802      	ldr	r0, [pc, #8]	; (59f8 <log_msg_pool_init+0x10>)
    59ee:	461a      	mov	r2, r3
    59f0:	f021 b982 	b.w	26cf8 <k_mem_slab_init>
    59f4:	20012c58 	.word	0x20012c58
    59f8:	2000d538 	.word	0x2000d538

000059fc <log_msg_no_space_handle>:

	k_mem_slab_free(&log_msg_pool, (void **)&msg);
}

union log_msg_chunk *log_msg_no_space_handle(void)
{
    59fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
	union log_msg_chunk *msg = NULL;
    59fe:	2300      	movs	r3, #0

	if (IS_ENABLED(CONFIG_LOG_MODE_OVERFLOW)) {
		do {
			more = log_process(true);
			log_dropped();
			err = k_mem_slab_alloc(&log_msg_pool,
    5a00:	4d09      	ldr	r5, [pc, #36]	; (5a28 <log_msg_no_space_handle+0x2c>)
	union log_msg_chunk *msg = NULL;
    5a02:	9301      	str	r3, [sp, #4]
    5a04:	2001      	movs	r0, #1
    5a06:	f7ff fe71 	bl	56ec <z_impl_log_process>
    5a0a:	4604      	mov	r4, r0
			log_dropped();
    5a0c:	f7ff fdc8 	bl	55a0 <log_dropped>
			err = k_mem_slab_alloc(&log_msg_pool,
    5a10:	2200      	movs	r2, #0
    5a12:	2300      	movs	r3, #0
    5a14:	a901      	add	r1, sp, #4
    5a16:	4628      	mov	r0, r5
    5a18:	f01a f856 	bl	1fac8 <k_mem_slab_alloc>
					       (void **)&msg,
					       K_NO_WAIT);
		} while ((err != 0) && more);
    5a1c:	b108      	cbz	r0, 5a22 <log_msg_no_space_handle+0x26>
    5a1e:	2c00      	cmp	r4, #0
    5a20:	d1f0      	bne.n	5a04 <log_msg_no_space_handle+0x8>
	} else {
		log_dropped();
	}
	return msg;

}
    5a22:	9801      	ldr	r0, [sp, #4]
    5a24:	b003      	add	sp, #12
    5a26:	bd30      	pop	{r4, r5, pc}
    5a28:	2000d538 	.word	0x2000d538

00005a2c <log_msg_chunk_alloc>:
{
    5a2c:	b507      	push	{r0, r1, r2, lr}
	union log_msg_chunk *msg = NULL;
    5a2e:	2300      	movs	r3, #0
    5a30:	9301      	str	r3, [sp, #4]
	int err = k_mem_slab_alloc(&log_msg_pool, (void **)&msg,
    5a32:	4807      	ldr	r0, [pc, #28]	; (5a50 <log_msg_chunk_alloc+0x24>)
    5a34:	2200      	movs	r2, #0
    5a36:	2300      	movs	r3, #0
    5a38:	a901      	add	r1, sp, #4
    5a3a:	f01a f845 	bl	1fac8 <k_mem_slab_alloc>
	if (err != 0) {
    5a3e:	b110      	cbz	r0, 5a46 <log_msg_chunk_alloc+0x1a>
		msg = log_msg_no_space_handle();
    5a40:	f7ff ffdc 	bl	59fc <log_msg_no_space_handle>
    5a44:	9001      	str	r0, [sp, #4]
}
    5a46:	9801      	ldr	r0, [sp, #4]
    5a48:	b003      	add	sp, #12
    5a4a:	f85d fb04 	ldr.w	pc, [sp], #4
    5a4e:	bf00      	nop
    5a50:	2000d538 	.word	0x2000d538

00005a54 <msg_free>:
{
    5a54:	b5f0      	push	{r4, r5, r6, r7, lr}
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5a56:	7a03      	ldrb	r3, [r0, #8]
    5a58:	b085      	sub	sp, #20
	if (log_msg_is_std(msg) && nargs) {
    5a5a:	07dc      	lsls	r4, r3, #31
{
    5a5c:	9001      	str	r0, [sp, #4]
	if (log_msg_is_std(msg) && nargs) {
    5a5e:	d41e      	bmi.n	5a9e <msg_free+0x4a>
	}
}

uint32_t log_msg_nargs_get(struct log_msg *msg)
{
	return msg->hdr.params.std.nargs;
    5a60:	7a45      	ldrb	r5, [r0, #9]
	if (log_msg_is_std(msg) && nargs) {
    5a62:	092d      	lsrs	r5, r5, #4
    5a64:	d01b      	beq.n	5a9e <msg_free+0x4a>
		uint32_t smask = 0;
    5a66:	2400      	movs	r4, #0
		for (i = 0; i < nargs; i++) {
    5a68:	4626      	mov	r6, r4
			void *buf = (void *)log_msg_arg_get(msg, i);
    5a6a:	9801      	ldr	r0, [sp, #4]
    5a6c:	4631      	mov	r1, r6
    5a6e:	f01c fdb6 	bl	225de <log_msg_arg_get>
    5a72:	4607      	mov	r7, r0
			if (log_is_strdup(buf)) {
    5a74:	f7ff fe2c 	bl	56d0 <log_is_strdup>
    5a78:	b170      	cbz	r0, 5a98 <msg_free+0x44>
				if (smask == 0) {
    5a7a:	b934      	cbnz	r4, 5a8a <msg_free+0x36>
					smask = z_log_get_s_mask(
    5a7c:	9b01      	ldr	r3, [sp, #4]
    5a7e:	4629      	mov	r1, r5
    5a80:	6918      	ldr	r0, [r3, #16]
    5a82:	f01c fcc5 	bl	22410 <z_log_get_s_mask>
					if (smask == 0) {
    5a86:	4604      	mov	r4, r0
    5a88:	b148      	cbz	r0, 5a9e <msg_free+0x4a>
				if (smask & BIT(i)) {
    5a8a:	fa24 f306 	lsr.w	r3, r4, r6
    5a8e:	07d9      	lsls	r1, r3, #31
    5a90:	d502      	bpl.n	5a98 <msg_free+0x44>
					log_free(buf);
    5a92:	4638      	mov	r0, r7
    5a94:	f7ff ff8e 	bl	59b4 <log_free>
		for (i = 0; i < nargs; i++) {
    5a98:	3601      	adds	r6, #1
    5a9a:	42ae      	cmp	r6, r5
    5a9c:	d3e5      	bcc.n	5a6a <msg_free+0x16>
	if (msg->hdr.params.generic.ext == 1) {
    5a9e:	9b01      	ldr	r3, [sp, #4]
    5aa0:	7a1a      	ldrb	r2, [r3, #8]
    5aa2:	0792      	lsls	r2, r2, #30
    5aa4:	d504      	bpl.n	5ab0 <msg_free+0x5c>
		cont_free(msg->payload.ext.next);
    5aa6:	695b      	ldr	r3, [r3, #20]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5aa8:	4c08      	ldr	r4, [pc, #32]	; (5acc <msg_free+0x78>)
    5aaa:	9303      	str	r3, [sp, #12]
	while (cont != NULL) {
    5aac:	9b03      	ldr	r3, [sp, #12]
    5aae:	b92b      	cbnz	r3, 5abc <msg_free+0x68>
	k_mem_slab_free(&log_msg_pool, (void **)&msg);
    5ab0:	4806      	ldr	r0, [pc, #24]	; (5acc <msg_free+0x78>)
    5ab2:	a901      	add	r1, sp, #4
    5ab4:	f01a f838 	bl	1fb28 <k_mem_slab_free>
}
    5ab8:	b005      	add	sp, #20
    5aba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next = cont->next;
    5abc:	681d      	ldr	r5, [r3, #0]
		k_mem_slab_free(&log_msg_pool, (void **)&cont);
    5abe:	a903      	add	r1, sp, #12
    5ac0:	4620      	mov	r0, r4
    5ac2:	f01a f831 	bl	1fb28 <k_mem_slab_free>
		cont = next;
    5ac6:	9503      	str	r5, [sp, #12]
    5ac8:	e7f0      	b.n	5aac <msg_free+0x58>
    5aca:	bf00      	nop
    5acc:	2000d538 	.word	0x2000d538

00005ad0 <print_formatted>:
	return 0;
}

static int print_formatted(const struct log_output *log_output,
			   const char *fmt, ...)
{
    5ad0:	b40e      	push	{r1, r2, r3}
    5ad2:	b503      	push	{r0, r1, lr}
    5ad4:	ab03      	add	r3, sp, #12
    5ad6:	4601      	mov	r1, r0
    5ad8:	f853 2b04 	ldr.w	r2, [r3], #4
	va_list args;
	int length = 0;

	va_start(args, fmt);
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    5adc:	4804      	ldr	r0, [pc, #16]	; (5af0 <print_formatted+0x20>)
	va_start(args, fmt);
    5ade:	9301      	str	r3, [sp, #4]
	length = cbvprintf(out_func, (void *)log_output, fmt, args);
    5ae0:	f7fe fe60 	bl	47a4 <cbvprintf>
	va_end(args);

	return length;
}
    5ae4:	b002      	add	sp, #8
    5ae6:	f85d eb04 	ldr.w	lr, [sp], #4
    5aea:	b003      	add	sp, #12
    5aec:	4770      	bx	lr
    5aee:	bf00      	nop
    5af0:	000229fb 	.word	0x000229fb

00005af4 <hexdump_line_print>:
}

static void hexdump_line_print(const struct log_output *log_output,
			       const uint8_t *data, uint32_t length,
			       int prefix_offset, uint32_t flags)
{
    5af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5af8:	461d      	mov	r5, r3
    5afa:	9b08      	ldr	r3, [sp, #32]
    5afc:	4617      	mov	r7, r2
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5afe:	06da      	lsls	r2, r3, #27
{
    5b00:	4604      	mov	r4, r0
    5b02:	460e      	mov	r6, r1
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5b04:	d405      	bmi.n	5b12 <hexdump_line_print+0x1e>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5b06:	0699      	lsls	r1, r3, #26
		print_formatted(ctx, "\n");
    5b08:	bf4c      	ite	mi
    5b0a:	492a      	ldrmi	r1, [pc, #168]	; (5bb4 <hexdump_line_print+0xc0>)
		print_formatted(ctx, "\r\n");
    5b0c:	492a      	ldrpl	r1, [pc, #168]	; (5bb8 <hexdump_line_print+0xc4>)
    5b0e:	f7ff ffdf 	bl	5ad0 <print_formatted>
	newline_print(log_output, flags);

	for (int i = 0; i < prefix_offset; i++) {
		print_formatted(log_output, " ");
    5b12:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 5bbc <hexdump_line_print+0xc8>
{
    5b16:	f04f 0800 	mov.w	r8, #0
	for (int i = 0; i < prefix_offset; i++) {
    5b1a:	45a8      	cmp	r8, r5
    5b1c:	db2a      	blt.n	5b74 <hexdump_line_print+0x80>
		}

		if (i < length) {
			print_formatted(log_output, "%02x ", data[i]);
		} else {
			print_formatted(log_output, "   ");
    5b1e:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 5bc0 <hexdump_line_print+0xcc>
			print_formatted(log_output, "%02x ", data[i]);
    5b22:	f8df 90a0 	ldr.w	r9, [pc, #160]	; 5bc4 <hexdump_line_print+0xd0>
			print_formatted(log_output, " ");
    5b26:	f8df a094 	ldr.w	sl, [pc, #148]	; 5bbc <hexdump_line_print+0xc8>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5b2a:	2500      	movs	r5, #0
		if (i < length) {
    5b2c:	42bd      	cmp	r5, r7
    5b2e:	d22f      	bcs.n	5b90 <hexdump_line_print+0x9c>
			print_formatted(log_output, "%02x ", data[i]);
    5b30:	5d72      	ldrb	r2, [r6, r5]
    5b32:	4649      	mov	r1, r9
    5b34:	4620      	mov	r0, r4
    5b36:	f7ff ffcb 	bl	5ad0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5b3a:	3501      	adds	r5, #1
    5b3c:	2d10      	cmp	r5, #16
    5b3e:	d120      	bne.n	5b82 <hexdump_line_print+0x8e>
		}
	}

	print_formatted(log_output, "|");
    5b40:	4921      	ldr	r1, [pc, #132]	; (5bc8 <hexdump_line_print+0xd4>)
			char c = (char)data[i];

			print_formatted(log_output, "%c",
			      isprint((int)c) ? c : '.');
		} else {
			print_formatted(log_output, " ");
    5b42:	f8df 8078 	ldr.w	r8, [pc, #120]	; 5bbc <hexdump_line_print+0xc8>
			print_formatted(log_output, "%c",
    5b46:	f8df 9084 	ldr.w	r9, [pc, #132]	; 5bcc <hexdump_line_print+0xd8>
	print_formatted(log_output, "|");
    5b4a:	4620      	mov	r0, r4
    5b4c:	f7ff ffc0 	bl	5ad0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5b50:	2500      	movs	r5, #0
		if (i < length) {
    5b52:	42af      	cmp	r7, r5
    5b54:	d928      	bls.n	5ba8 <hexdump_line_print+0xb4>
			char c = (char)data[i];
    5b56:	5d72      	ldrb	r2, [r6, r5]
	return (int)((((unsigned)c) >= ' ') &&
    5b58:	f1a2 0320 	sub.w	r3, r2, #32
    5b5c:	2b5f      	cmp	r3, #95	; 0x5f
			print_formatted(log_output, "%c",
    5b5e:	bf28      	it	cs
    5b60:	222e      	movcs	r2, #46	; 0x2e
    5b62:	4649      	mov	r1, r9
    5b64:	4620      	mov	r0, r4
    5b66:	f7ff ffb3 	bl	5ad0 <print_formatted>
	for (int i = 0; i < HEXDUMP_BYTES_IN_LINE; i++) {
    5b6a:	3501      	adds	r5, #1
    5b6c:	2d10      	cmp	r5, #16
    5b6e:	d114      	bne.n	5b9a <hexdump_line_print+0xa6>
		}
	}
}
    5b70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, " ");
    5b74:	4649      	mov	r1, r9
    5b76:	4620      	mov	r0, r4
    5b78:	f7ff ffaa 	bl	5ad0 <print_formatted>
	for (int i = 0; i < prefix_offset; i++) {
    5b7c:	f108 0801 	add.w	r8, r8, #1
    5b80:	e7cb      	b.n	5b1a <hexdump_line_print+0x26>
		if (i > 0 && !(i % 8)) {
    5b82:	076a      	lsls	r2, r5, #29
    5b84:	d1d2      	bne.n	5b2c <hexdump_line_print+0x38>
			print_formatted(log_output, " ");
    5b86:	4651      	mov	r1, sl
    5b88:	4620      	mov	r0, r4
    5b8a:	f7ff ffa1 	bl	5ad0 <print_formatted>
    5b8e:	e7cd      	b.n	5b2c <hexdump_line_print+0x38>
			print_formatted(log_output, "   ");
    5b90:	4641      	mov	r1, r8
    5b92:	4620      	mov	r0, r4
    5b94:	f7ff ff9c 	bl	5ad0 <print_formatted>
    5b98:	e7cf      	b.n	5b3a <hexdump_line_print+0x46>
		if (i > 0 && !(i % 8)) {
    5b9a:	076b      	lsls	r3, r5, #29
    5b9c:	d1d9      	bne.n	5b52 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5b9e:	4641      	mov	r1, r8
    5ba0:	4620      	mov	r0, r4
    5ba2:	f7ff ff95 	bl	5ad0 <print_formatted>
    5ba6:	e7d4      	b.n	5b52 <hexdump_line_print+0x5e>
			print_formatted(log_output, " ");
    5ba8:	4641      	mov	r1, r8
    5baa:	4620      	mov	r0, r4
    5bac:	f7ff ff90 	bl	5ad0 <print_formatted>
    5bb0:	e7db      	b.n	5b6a <hexdump_line_print+0x76>
    5bb2:	bf00      	nop
    5bb4:	000294a3 	.word	0x000294a3
    5bb8:	0002978f 	.word	0x0002978f
    5bbc:	0002afec 	.word	0x0002afec
    5bc0:	0002b5a7 	.word	0x0002b5a7
    5bc4:	0002b5a1 	.word	0x0002b5a1
    5bc8:	0002b5ab 	.word	0x0002b5ab
    5bcc:	0002b5ad 	.word	0x0002b5ad

00005bd0 <prefix_print>:
}

static uint32_t prefix_print(const struct log_output *log_output,
			 uint32_t flags, bool func_on, uint32_t timestamp, uint8_t level,
			 uint8_t domain_id, uint16_t source_id)
{
    5bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5bd4:	b085      	sub	sp, #20
			"<%d>1 ",
			facility * 8 +
			level_to_rfc5424_severity(level));
	}

	if (stamp) {
    5bd6:	f011 0402 	ands.w	r4, r1, #2
{
    5bda:	4690      	mov	r8, r2
    5bdc:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
    5be0:	4606      	mov	r6, r0
    5be2:	461a      	mov	r2, r3
	bool colors_on = flags & LOG_OUTPUT_FLAG_COLORS;
    5be4:	f001 0901 	and.w	r9, r1, #1
	bool level_on = flags & LOG_OUTPUT_FLAG_LEVEL;
    5be8:	f001 0508 	and.w	r5, r1, #8
	if (stamp) {
    5bec:	d006      	beq.n	5bfc <prefix_print+0x2c>
	if (!format) {
    5bee:	f011 0f44 	tst.w	r1, #68	; 0x44
    5bf2:	d136      	bne.n	5c62 <prefix_print+0x92>
		length = print_formatted(log_output, "[%08lu] ", timestamp);
    5bf4:	4932      	ldr	r1, [pc, #200]	; (5cc0 <prefix_print+0xf0>)
    5bf6:	f7ff ff6b 	bl	5ad0 <print_formatted>
		length += timestamp_print(log_output, flags, timestamp);
    5bfa:	4604      	mov	r4, r0
	if (color) {
    5bfc:	f1b9 0f00 	cmp.w	r9, #0
    5c00:	d00a      	beq.n	5c18 <prefix_print+0x48>
		const char *log_color = start && (colors[level] != NULL) ?
    5c02:	4b30      	ldr	r3, [pc, #192]	; (5cc4 <prefix_print+0xf4>)
		print_formatted(log_output, "%s", log_color);
    5c04:	4930      	ldr	r1, [pc, #192]	; (5cc8 <prefix_print+0xf8>)
		const char *log_color = start && (colors[level] != NULL) ?
    5c06:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
		print_formatted(log_output, "%s", log_color);
    5c0a:	4b30      	ldr	r3, [pc, #192]	; (5ccc <prefix_print+0xfc>)
    5c0c:	4630      	mov	r0, r6
    5c0e:	2a00      	cmp	r2, #0
    5c10:	bf08      	it	eq
    5c12:	461a      	moveq	r2, r3
    5c14:	f7ff ff5c 	bl	5ad0 <print_formatted>
	if (level_on) {
    5c18:	b13d      	cbz	r5, 5c2a <prefix_print+0x5a>
		total += print_formatted(log_output, "<%s> ", severity[level]);
    5c1a:	4b2d      	ldr	r3, [pc, #180]	; (5cd0 <prefix_print+0x100>)
    5c1c:	492d      	ldr	r1, [pc, #180]	; (5cd4 <prefix_print+0x104>)
    5c1e:	f853 2027 	ldr.w	r2, [r3, r7, lsl #2]
    5c22:	4630      	mov	r0, r6
    5c24:	f7ff ff54 	bl	5ad0 <print_formatted>
    5c28:	4605      	mov	r5, r0
	total += print_formatted(log_output,
    5c2a:	f1b8 0f00 	cmp.w	r8, #0
    5c2e:	d044      	beq.n	5cba <prefix_print+0xea>
				((1 << level) & LOG_FUNCTION_PREFIX_MASK)) ?
    5c30:	2301      	movs	r3, #1
    5c32:	fa03 f707 	lsl.w	r7, r3, r7
	total += print_formatted(log_output,
    5c36:	4b28      	ldr	r3, [pc, #160]	; (5cd8 <prefix_print+0x108>)
    5c38:	f017 0f10 	tst.w	r7, #16
    5c3c:	4f27      	ldr	r7, [pc, #156]	; (5cdc <prefix_print+0x10c>)
    5c3e:	bf18      	it	ne
    5c40:	461f      	movne	r7, r3
    5c42:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
    5c46:	f89d 003c 	ldrb.w	r0, [sp, #60]	; 0x3c
    5c4a:	f7ff fcb9 	bl	55c0 <log_source_name_get>
    5c4e:	4639      	mov	r1, r7
    5c50:	4602      	mov	r2, r0
    5c52:	4630      	mov	r0, r6
    5c54:	f7ff ff3c 	bl	5ad0 <print_formatted>
    5c58:	4428      	add	r0, r5

	length += ids_print(log_output, level_on, func_on,
			domain_id, source_id, level);

	return length;
}
    5c5a:	4420      	add	r0, r4
    5c5c:	b005      	add	sp, #20
    5c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	} else if (freq != 0U) {
    5c62:	4b1f      	ldr	r3, [pc, #124]	; (5ce0 <prefix_print+0x110>)
    5c64:	6819      	ldr	r1, [r3, #0]
    5c66:	b331      	cbz	r1, 5cb6 <prefix_print+0xe6>
		timestamp /= timestamp_div;
    5c68:	4b1e      	ldr	r3, [pc, #120]	; (5ce4 <prefix_print+0x114>)
    5c6a:	f44f 6c61 	mov.w	ip, #3600	; 0xe10
    5c6e:	681b      	ldr	r3, [r3, #0]
    5c70:	fbb2 f3f3 	udiv	r3, r2, r3
		ms = (remainder * 1000U) / freq;
    5c74:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
		total_seconds = timestamp / freq;
    5c78:	fbb3 f4f1 	udiv	r4, r3, r1
		seconds -= hours * 3600U;
    5c7c:	fbb4 f2fc 	udiv	r2, r4, ip
    5c80:	fb0c 4c12 	mls	ip, ip, r2, r4
		remainder = timestamp % freq;
    5c84:	fb01 3414 	mls	r4, r1, r4, r3
		ms = (remainder * 1000U) / freq;
    5c88:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5c8c:	f04f 0e3c 	mov.w	lr, #60	; 0x3c
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5c90:	fbb4 faf1 	udiv	sl, r4, r1
    5c94:	fb01 441a 	mls	r4, r1, sl, r4
    5c98:	fb0b f404 	mul.w	r4, fp, r4
		mins = seconds / 60U;
    5c9c:	fbbc f3fe 	udiv	r3, ip, lr
		us = (1000 * (remainder * 1000U - (ms * freq))) / freq;
    5ca0:	fbb4 f1f1 	udiv	r1, r4, r1
			length = print_formatted(log_output,
    5ca4:	e9cd a101 	strd	sl, r1, [sp, #4]
    5ca8:	fb0e c113 	mls	r1, lr, r3, ip
    5cac:	9100      	str	r1, [sp, #0]
    5cae:	490e      	ldr	r1, [pc, #56]	; (5ce8 <prefix_print+0x118>)
    5cb0:	f7ff ff0e 	bl	5ad0 <print_formatted>
    5cb4:	e7a1      	b.n	5bfa <prefix_print+0x2a>
		length = 0;
    5cb6:	4608      	mov	r0, r1
    5cb8:	e79f      	b.n	5bfa <prefix_print+0x2a>
	total += print_formatted(log_output,
    5cba:	4f08      	ldr	r7, [pc, #32]	; (5cdc <prefix_print+0x10c>)
    5cbc:	e7c1      	b.n	5c42 <prefix_print+0x72>
    5cbe:	bf00      	nop
    5cc0:	0002b5be 	.word	0x0002b5be
    5cc4:	00027cc0 	.word	0x00027cc0
    5cc8:	0002c60a 	.word	0x0002c60a
    5ccc:	0002b5b0 	.word	0x0002b5b0
    5cd0:	00027cd4 	.word	0x00027cd4
    5cd4:	0002b5e3 	.word	0x0002b5e3
    5cd8:	0002b5ba 	.word	0x0002b5ba
    5cdc:	0002b5b5 	.word	0x0002b5b5
    5ce0:	2000d554 	.word	0x2000d554
    5ce4:	2000d558 	.word	0x2000d558
    5ce8:	0002b5c7 	.word	0x0002b5c7

00005cec <postfix_print>:

static void postfix_print(const struct log_output *log_output,
			  uint32_t flags, uint8_t level)
{
    5cec:	b538      	push	{r3, r4, r5, lr}
    5cee:	460c      	mov	r4, r1
	if (color) {
    5cf0:	07e1      	lsls	r1, r4, #31
{
    5cf2:	4605      	mov	r5, r0
	if (color) {
    5cf4:	d503      	bpl.n	5cfe <postfix_print+0x12>
		print_formatted(log_output, "%s", log_color);
    5cf6:	4a08      	ldr	r2, [pc, #32]	; (5d18 <postfix_print+0x2c>)
    5cf8:	4908      	ldr	r1, [pc, #32]	; (5d1c <postfix_print+0x30>)
    5cfa:	f7ff fee9 	bl	5ad0 <print_formatted>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_NONE) != 0U) {
    5cfe:	06e2      	lsls	r2, r4, #27
    5d00:	d408      	bmi.n	5d14 <postfix_print+0x28>
	if ((flags & LOG_OUTPUT_FLAG_CRLF_LFONLY) != 0U) {
    5d02:	06a3      	lsls	r3, r4, #26
		print_formatted(ctx, "\r\n");
    5d04:	4628      	mov	r0, r5
		print_formatted(ctx, "\n");
    5d06:	bf4c      	ite	mi
    5d08:	4905      	ldrmi	r1, [pc, #20]	; (5d20 <postfix_print+0x34>)
		print_formatted(ctx, "\r\n");
    5d0a:	4906      	ldrpl	r1, [pc, #24]	; (5d24 <postfix_print+0x38>)
	color_postfix(log_output, (flags & LOG_OUTPUT_FLAG_COLORS),
			      level);
	newline_print(log_output, flags);
}
    5d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		print_formatted(ctx, "\r\n");
    5d10:	f7ff bede 	b.w	5ad0 <print_formatted>
}
    5d14:	bd38      	pop	{r3, r4, r5, pc}
    5d16:	bf00      	nop
    5d18:	0002b5b0 	.word	0x0002b5b0
    5d1c:	0002c60a 	.word	0x0002c60a
    5d20:	000294a3 	.word	0x000294a3
    5d24:	0002978f 	.word	0x0002978f

00005d28 <log_output_msg_process>:

void log_output_msg_process(const struct log_output *log_output,
			    struct log_msg *msg,
			    uint32_t flags)
{
    5d28:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return msg->hdr.ids.level;
    5d2c:	7a8b      	ldrb	r3, [r1, #10]
		log_output_msg_syst_process(log_output, msg, flags);
		return;
	}

	prefix_offset = raw_string ?
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5d2e:	f013 0807 	ands.w	r8, r3, #7
{
    5d32:	b08a      	sub	sp, #40	; 0x28
    5d34:	4605      	mov	r5, r0
    5d36:	460e      	mov	r6, r1
    5d38:	4617      	mov	r7, r2
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5d3a:	d022      	beq.n	5d82 <log_output_msg_process+0x5a>
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d3c:	7a0a      	ldrb	r2, [r1, #8]
	return msg->hdr.ids.source_id;
    5d3e:	8949      	ldrh	r1, [r1, #10]
    5d40:	f3c3 03c2 	ubfx	r3, r3, #3, #3
    5d44:	f3c1 1189 	ubfx	r1, r1, #6, #10
	return  (msg->hdr.params.generic.type == LOG_MSG_TYPE_STD);
    5d48:	43d2      	mvns	r2, r2
    5d4a:	e9cd 8300 	strd	r8, r3, [sp]
    5d4e:	9102      	str	r1, [sp, #8]
    5d50:	68f3      	ldr	r3, [r6, #12]
    5d52:	f002 0201 	and.w	r2, r2, #1
    5d56:	4639      	mov	r1, r7
    5d58:	f7ff ff3a 	bl	5bd0 <prefix_print>
    5d5c:	4681      	mov	r9, r0
    5d5e:	7a34      	ldrb	r4, [r6, #8]
    5d60:	43e4      	mvns	r4, r4
					 level, domain_id, source_id);

	if (log_msg_is_std(msg)) {
    5d62:	f014 0401 	ands.w	r4, r4, #1
    5d66:	d00e      	beq.n	5d86 <log_output_msg_process+0x5e>
		std_print(msg, log_output);
    5d68:	4629      	mov	r1, r5
    5d6a:	4630      	mov	r0, r6
    5d6c:	f01c fcdb 	bl	22726 <std_print>
		raw_string_print(msg, log_output);
	} else {
		hexdump_print(msg, log_output, prefix_offset, flags);
	}

	if (!raw_string) {
    5d70:	f1b8 0f00 	cmp.w	r8, #0
    5d74:	d02b      	beq.n	5dce <log_output_msg_process+0xa6>
		postfix_print(log_output, flags, level);
    5d76:	4642      	mov	r2, r8
    5d78:	4639      	mov	r1, r7
    5d7a:	4628      	mov	r0, r5
    5d7c:	f7ff ffb6 	bl	5cec <postfix_print>
    5d80:	e025      	b.n	5dce <log_output_msg_process+0xa6>
			0 : prefix_print(log_output, flags, std_msg, timestamp,
    5d82:	46c1      	mov	r9, r8
    5d84:	e7eb      	b.n	5d5e <log_output_msg_process+0x36>
	} else if (raw_string) {
    5d86:	f1b8 0f00 	cmp.w	r8, #0
    5d8a:	d126      	bne.n	5dda <log_output_msg_process+0xb2>
	size_t offset = 0;
    5d8c:	4627      	mov	r7, r4
		length = log_output->size;
    5d8e:	68eb      	ldr	r3, [r5, #12]
    5d90:	9306      	str	r3, [sp, #24]
		log_msg_hexdump_data_get(msg, log_output->buf, &length, offset);
    5d92:	aa06      	add	r2, sp, #24
    5d94:	463b      	mov	r3, r7
    5d96:	68a9      	ldr	r1, [r5, #8]
    5d98:	4630      	mov	r0, r6
    5d9a:	f01c fcb0 	bl	226fe <log_msg_hexdump_data_get>
		log_output->control_block->offset = length;
    5d9e:	9a06      	ldr	r2, [sp, #24]
    5da0:	686b      	ldr	r3, [r5, #4]
    5da2:	601a      	str	r2, [r3, #0]
		if (length != 0) {
    5da4:	b13a      	cbz	r2, 5db6 <log_output_msg_process+0x8e>
			eol = (log_output->buf[length - 1] == '\n');
    5da6:	68ab      	ldr	r3, [r5, #8]
    5da8:	4413      	add	r3, r2
    5daa:	f813 4c01 	ldrb.w	r4, [r3, #-1]
    5dae:	f1a4 030a 	sub.w	r3, r4, #10
    5db2:	425c      	negs	r4, r3
    5db4:	415c      	adcs	r4, r3
		log_output_flush(log_output);
    5db6:	4628      	mov	r0, r5
    5db8:	f01c fe12 	bl	229e0 <log_output_flush>
		offset += length;
    5dbc:	9b06      	ldr	r3, [sp, #24]
    5dbe:	441f      	add	r7, r3
	} while (length > 0);
    5dc0:	2b00      	cmp	r3, #0
    5dc2:	d1e4      	bne.n	5d8e <log_output_msg_process+0x66>
	if (eol) {
    5dc4:	b11c      	cbz	r4, 5dce <log_output_msg_process+0xa6>
		print_formatted(log_output, "\r");
    5dc6:	4914      	ldr	r1, [pc, #80]	; (5e18 <log_output_msg_process+0xf0>)
    5dc8:	4628      	mov	r0, r5
    5dca:	f7ff fe81 	bl	5ad0 <print_formatted>
	}

	log_output_flush(log_output);
    5dce:	4628      	mov	r0, r5
}
    5dd0:	b00a      	add	sp, #40	; 0x28
    5dd2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	log_output_flush(log_output);
    5dd6:	f01c be03 	b.w	229e0 <log_output_flush>
	print_formatted(log_output, "%s", log_msg_str_get(msg));
    5dda:	4630      	mov	r0, r6
    5ddc:	f01c fc31 	bl	22642 <log_msg_str_get>
    5de0:	490e      	ldr	r1, [pc, #56]	; (5e1c <log_output_msg_process+0xf4>)
    5de2:	4602      	mov	r2, r0
    5de4:	4628      	mov	r0, r5
    5de6:	f7ff fe73 	bl	5ad0 <print_formatted>
		length = sizeof(buf);
    5dea:	f04f 0a10 	mov.w	sl, #16
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5dee:	aa05      	add	r2, sp, #20
    5df0:	4623      	mov	r3, r4
    5df2:	a906      	add	r1, sp, #24
    5df4:	4630      	mov	r0, r6
		length = sizeof(buf);
    5df6:	f8cd a014 	str.w	sl, [sp, #20]
		log_msg_hexdump_data_get(msg, buf, &length, offset);
    5dfa:	f01c fc80 	bl	226fe <log_msg_hexdump_data_get>
		if (length) {
    5dfe:	9a05      	ldr	r2, [sp, #20]
    5e00:	2a00      	cmp	r2, #0
    5e02:	d0b8      	beq.n	5d76 <log_output_msg_process+0x4e>
			hexdump_line_print(log_output, buf, length,
    5e04:	464b      	mov	r3, r9
    5e06:	9700      	str	r7, [sp, #0]
    5e08:	a906      	add	r1, sp, #24
    5e0a:	4628      	mov	r0, r5
    5e0c:	f7ff fe72 	bl	5af4 <hexdump_line_print>
			offset += length;
    5e10:	9b05      	ldr	r3, [sp, #20]
    5e12:	441c      	add	r4, r3
		length = sizeof(buf);
    5e14:	e7eb      	b.n	5dee <log_output_msg_process+0xc6>
    5e16:	bf00      	nop
    5e18:	0002b5e9 	.word	0x0002b5e9
    5e1c:	0002c60a 	.word	0x0002c60a

00005e20 <log_output_dropped_process>:
	postfix_print(log_output, flags, level);
	log_output_flush(log_output);
}

void log_output_dropped_process(const struct log_output *log_output, uint32_t cnt)
{
    5e20:	b573      	push	{r0, r1, r4, r5, r6, lr}
	static const char postfix[] =
			" messages dropped ---\r\n" DROPPED_COLOR_POSTFIX;
	log_output_func_t outf = log_output->func;

	cnt = MIN(cnt, 9999);
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e22:	f242 730f 	movw	r3, #9999	; 0x270f
    5e26:	428b      	cmp	r3, r1
    5e28:	bf28      	it	cs
    5e2a:	460b      	movcs	r3, r1
	log_output_func_t outf = log_output->func;
    5e2c:	6805      	ldr	r5, [r0, #0]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e2e:	4a0f      	ldr	r2, [pc, #60]	; (5e6c <log_output_dropped_process+0x4c>)
{
    5e30:	4604      	mov	r4, r0
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e32:	2105      	movs	r1, #5
    5e34:	4668      	mov	r0, sp
    5e36:	f01b fe82 	bl	21b3e <snprintk>

	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5e3a:	6863      	ldr	r3, [r4, #4]
    5e3c:	490c      	ldr	r1, [pc, #48]	; (5e70 <log_output_dropped_process+0x50>)
    5e3e:	685b      	ldr	r3, [r3, #4]
	len = snprintk(buf, sizeof(buf), "%d", cnt);
    5e40:	4606      	mov	r6, r0
	buffer_write(outf, (uint8_t *)prefix, sizeof(prefix) - 1,
    5e42:	220b      	movs	r2, #11
    5e44:	4628      	mov	r0, r5
    5e46:	f01c fc61 	bl	2270c <buffer_write>
		     log_output->control_block->ctx);
	buffer_write(outf, buf, len, log_output->control_block->ctx);
    5e4a:	6863      	ldr	r3, [r4, #4]
    5e4c:	4632      	mov	r2, r6
    5e4e:	4669      	mov	r1, sp
    5e50:	4628      	mov	r0, r5
    5e52:	685b      	ldr	r3, [r3, #4]
    5e54:	f01c fc5a 	bl	2270c <buffer_write>
	buffer_write(outf, (uint8_t *)postfix, sizeof(postfix) - 1,
    5e58:	6863      	ldr	r3, [r4, #4]
    5e5a:	4906      	ldr	r1, [pc, #24]	; (5e74 <log_output_dropped_process+0x54>)
    5e5c:	685b      	ldr	r3, [r3, #4]
    5e5e:	221b      	movs	r2, #27
    5e60:	4628      	mov	r0, r5
    5e62:	f01c fc53 	bl	2270c <buffer_write>
		     log_output->control_block->ctx);
}
    5e66:	b002      	add	sp, #8
    5e68:	bd70      	pop	{r4, r5, r6, pc}
    5e6a:	bf00      	nop
    5e6c:	0002c0fd 	.word	0x0002c0fd
    5e70:	0002b627 	.word	0x0002b627
    5e74:	0002b60b 	.word	0x0002b60b

00005e78 <log_output_timestamp_freq_set>:

void log_output_timestamp_freq_set(uint32_t frequency)
{
	timestamp_div = 1U;
    5e78:	4a08      	ldr	r2, [pc, #32]	; (5e9c <log_output_timestamp_freq_set+0x24>)
{
    5e7a:	b510      	push	{r4, lr}
	timestamp_div = 1U;
    5e7c:	2301      	movs	r3, #1
	/* There is no point to have frequency higher than 1MHz (ns are not
	 * printed) and too high frequency leads to overflows in calculations.
	 */
	while (frequency > 1000000) {
    5e7e:	4c08      	ldr	r4, [pc, #32]	; (5ea0 <log_output_timestamp_freq_set+0x28>)
	timestamp_div = 1U;
    5e80:	6013      	str	r3, [r2, #0]
	while (frequency > 1000000) {
    5e82:	2100      	movs	r1, #0
    5e84:	42a0      	cmp	r0, r4
    5e86:	d804      	bhi.n	5e92 <log_output_timestamp_freq_set+0x1a>
    5e88:	b101      	cbz	r1, 5e8c <log_output_timestamp_freq_set+0x14>
    5e8a:	6013      	str	r3, [r2, #0]
		frequency /= 2U;
		timestamp_div *= 2U;
	}

	freq = frequency;
    5e8c:	4b05      	ldr	r3, [pc, #20]	; (5ea4 <log_output_timestamp_freq_set+0x2c>)
    5e8e:	6018      	str	r0, [r3, #0]
}
    5e90:	bd10      	pop	{r4, pc}
		frequency /= 2U;
    5e92:	0840      	lsrs	r0, r0, #1
		timestamp_div *= 2U;
    5e94:	005b      	lsls	r3, r3, #1
    5e96:	2101      	movs	r1, #1
    5e98:	e7f4      	b.n	5e84 <log_output_timestamp_freq_set+0xc>
    5e9a:	bf00      	nop
    5e9c:	2000d558 	.word	0x2000d558
    5ea0:	000f4240 	.word	0x000f4240
    5ea4:	2000d554 	.word	0x2000d554

00005ea8 <char_out>:
#include <sys/__assert.h>

static const struct device *uart_dev;

static int char_out(uint8_t *data, size_t length, void *ctx)
{
    5ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(ctx);

	for (size_t i = 0; i < length; i++) {
		uart_poll_out(uart_dev, data[i]);
    5eaa:	4f07      	ldr	r7, [pc, #28]	; (5ec8 <char_out+0x20>)
{
    5eac:	460d      	mov	r5, r1
    5eae:	4604      	mov	r4, r0
    5eb0:	1846      	adds	r6, r0, r1
	for (size_t i = 0; i < length; i++) {
    5eb2:	42b4      	cmp	r4, r6
    5eb4:	d101      	bne.n	5eba <char_out+0x12>
	}

	return length;
}
    5eb6:	4628      	mov	r0, r5
    5eb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		uart_poll_out(uart_dev, data[i]);
    5eba:	6838      	ldr	r0, [r7, #0]
    5ebc:	f814 1b01 	ldrb.w	r1, [r4], #1
						unsigned char out_char)
{
	const struct uart_driver_api *api =
		(const struct uart_driver_api *)dev->api;

	api->poll_out(dev, out_char);
    5ec0:	6883      	ldr	r3, [r0, #8]
    5ec2:	685b      	ldr	r3, [r3, #4]
    5ec4:	4798      	blx	r3
	for (size_t i = 0; i < length; i++) {
    5ec6:	e7f4      	b.n	5eb2 <char_out+0xa>
    5ec8:	2000d570 	.word	0x2000d570

00005ecc <panic>:
 * @param log_output	Log output instance.
 */
static inline void
log_backend_std_panic(const struct log_output *const log_output)
{
	log_output_flush(log_output);
    5ecc:	4801      	ldr	r0, [pc, #4]	; (5ed4 <panic+0x8>)
    5ece:	f01c bd87 	b.w	229e0 <log_output_flush>
    5ed2:	bf00      	nop
    5ed4:	00027d00 	.word	0x00027d00

00005ed8 <dropped>:
 * @param cnt		Number of dropped messages.
 */
static inline void
log_backend_std_dropped(const struct log_output *const log_output, uint32_t cnt)
{
	log_output_dropped_process(log_output, cnt);
    5ed8:	4801      	ldr	r0, [pc, #4]	; (5ee0 <dropped+0x8>)
    5eda:	f7ff bfa1 	b.w	5e20 <log_output_dropped_process>
    5ede:	bf00      	nop
    5ee0:	00027d00 	.word	0x00027d00

00005ee4 <log_backend_uart_init>:

	log_backend_std_put(&log_output_uart, flag, msg);
}

static void log_backend_uart_init(void)
{
    5ee4:	b508      	push	{r3, lr}
    5ee6:	4803      	ldr	r0, [pc, #12]	; (5ef4 <log_backend_uart_init+0x10>)
    5ee8:	f019 fc26 	bl	1f738 <z_impl_device_get_binding>
	uart_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    5eec:	4b02      	ldr	r3, [pc, #8]	; (5ef8 <log_backend_uart_init+0x14>)
    5eee:	6018      	str	r0, [r3, #0]
	__ASSERT_NO_MSG((void *)uart_dev);
}
    5ef0:	bd08      	pop	{r3, pc}
    5ef2:	bf00      	nop
    5ef4:	0002b633 	.word	0x0002b633
    5ef8:	2000d570 	.word	0x2000d570

00005efc <put>:
{
    5efc:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5efe:	4608      	mov	r0, r1
    5f00:	460c      	mov	r4, r1
    5f02:	f01c fb5c 	bl	225be <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5f06:	4805      	ldr	r0, [pc, #20]	; (5f1c <put+0x20>)
    5f08:	4621      	mov	r1, r4
    5f0a:	220f      	movs	r2, #15
    5f0c:	f7ff ff0c 	bl	5d28 <log_output_msg_process>
	log_msg_put(msg);
    5f10:	4620      	mov	r0, r4
}
    5f12:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f16:	f01c bb81 	b.w	2261c <log_msg_put>
    5f1a:	bf00      	nop
    5f1c:	00027d00 	.word	0x00027d00

00005f20 <log_backend_rtt_init>:
{
	if (CONFIG_LOG_BACKEND_RTT_BUFFER > 0) {
		log_backend_rtt_cfg();
	}

	host_present = true;
    5f20:	4b01      	ldr	r3, [pc, #4]	; (5f28 <log_backend_rtt_init+0x8>)
    5f22:	2201      	movs	r2, #1
    5f24:	701a      	strb	r2, [r3, #0]
	line_pos = line_buf;
}
    5f26:	4770      	bx	lr
    5f28:	2000ed9c 	.word	0x2000ed9c

00005f2c <panic>:

static void panic(struct log_backend const *const backend)
{
	panic_mode = true;
    5f2c:	4b02      	ldr	r3, [pc, #8]	; (5f38 <panic+0xc>)
	log_output_flush(log_output);
    5f2e:	4803      	ldr	r0, [pc, #12]	; (5f3c <panic+0x10>)
    5f30:	2201      	movs	r2, #1
    5f32:	701a      	strb	r2, [r3, #0]
    5f34:	f01c bd54 	b.w	229e0 <log_output_flush>
    5f38:	2000ed9d 	.word	0x2000ed9d
    5f3c:	00027d28 	.word	0x00027d28

00005f40 <dropped>:
	log_output_dropped_process(log_output, cnt);
    5f40:	4801      	ldr	r0, [pc, #4]	; (5f48 <dropped+0x8>)
    5f42:	f7ff bf6d 	b.w	5e20 <log_output_dropped_process>
    5f46:	bf00      	nop
    5f48:	00027d28 	.word	0x00027d28

00005f4c <put>:
{
    5f4c:	b510      	push	{r4, lr}
	log_msg_get(msg);
    5f4e:	4608      	mov	r0, r1
    5f50:	460c      	mov	r4, r1
    5f52:	f01c fb34 	bl	225be <log_msg_get>
	log_output_msg_process(log_output, msg, flags);
    5f56:	4805      	ldr	r0, [pc, #20]	; (5f6c <put+0x20>)
    5f58:	4621      	mov	r1, r4
    5f5a:	220f      	movs	r2, #15
    5f5c:	f7ff fee4 	bl	5d28 <log_output_msg_process>
	log_msg_put(msg);
    5f60:	4620      	mov	r0, r4
}
    5f62:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    5f66:	f01c bb59 	b.w	2261c <log_msg_put>
    5f6a:	bf00      	nop
    5f6c:	00027d28 	.word	0x00027d28

00005f70 <on_failed_write.part.0>:
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5f70:	4b05      	ldr	r3, [pc, #20]	; (5f88 <on_failed_write.part.0+0x18>)
	} else if (is_sync_mode()) {
    5f72:	781b      	ldrb	r3, [r3, #0]
    5f74:	b11b      	cbz	r3, 5f7e <on_failed_write.part.0+0xe>
	z_impl_k_busy_wait(usec_to_wait);
    5f76:	f241 3088 	movw	r0, #5000	; 0x1388
    5f7a:	f021 b8b8 	b.w	270ee <z_impl_k_busy_wait>
	return z_impl_k_sleep(timeout);
    5f7e:	20a4      	movs	r0, #164	; 0xa4
    5f80:	2100      	movs	r1, #0
    5f82:	f01a ba4f 	b.w	20424 <z_impl_k_sleep>
    5f86:	bf00      	nop
    5f88:	2000ed9d 	.word	0x2000ed9d

00005f8c <data_out_block_mode>:
{
    5f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return IS_ENABLED(CONFIG_LOG_IMMEDIATE) || panic_mode;
    5f90:	f8df 8088 	ldr.w	r8, [pc, #136]	; 601c <data_out_block_mode+0x90>
	return z_impl_k_mutex_lock(mutex, timeout);
    5f94:	f8df a088 	ldr.w	sl, [pc, #136]	; 6020 <data_out_block_mode+0x94>
{
    5f98:	4607      	mov	r7, r0
    5f9a:	460e      	mov	r6, r1
	int retry_cnt = IS_ENABLED(CONFIG_LOG_BACKEND_RTT_MODE_BLOCK) ?
    5f9c:	2404      	movs	r4, #4
		if (!is_sync_mode()) {
    5f9e:	f898 3000 	ldrb.w	r3, [r8]
    5fa2:	b933      	cbnz	r3, 5fb2 <data_out_block_mode+0x26>
    5fa4:	f04f 32ff 	mov.w	r2, #4294967295
    5fa8:	f04f 33ff 	mov.w	r3, #4294967295
    5fac:	4650      	mov	r0, sl
    5fae:	f019 fde7 	bl	1fb80 <z_impl_k_mutex_lock>
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5fb2:	4632      	mov	r2, r6
    5fb4:	4639      	mov	r1, r7
    5fb6:	2000      	movs	r0, #0
    5fb8:	f001 f9f4 	bl	73a4 <SEGGER_RTT_WriteSkipNoLock>
		if (!is_sync_mode()) {
    5fbc:	f898 3000 	ldrb.w	r3, [r8]
		ret = SEGGER_RTT_WriteSkipNoLock(CONFIG_LOG_BACKEND_RTT_BUFFER,
    5fc0:	4681      	mov	r9, r0
		if (!is_sync_mode()) {
    5fc2:	b913      	cbnz	r3, 5fca <data_out_block_mode+0x3e>
	return z_impl_k_mutex_unlock(mutex);
    5fc4:	4650      	mov	r0, sl
    5fc6:	f019 fe4d 	bl	1fc64 <z_impl_k_mutex_unlock>
		if (ret) {
    5fca:	4d16      	ldr	r5, [pc, #88]	; (6024 <data_out_block_mode+0x98>)
    5fcc:	f1b9 0f00 	cmp.w	r9, #0
    5fd0:	d018      	beq.n	6004 <data_out_block_mode+0x78>
	host_present = true;
    5fd2:	2301      	movs	r3, #1
    5fd4:	702b      	strb	r3, [r5, #0]
	if (is_panic_mode()) {
    5fd6:	f898 3000 	ldrb.w	r3, [r8]
    5fda:	b933      	cbnz	r3, 5fea <data_out_block_mode+0x5e>
}
    5fdc:	4630      	mov	r0, r6
    5fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (retry_cnt == 0) {
    5fe2:	b95c      	cbnz	r4, 5ffc <data_out_block_mode+0x70>
		host_present = false;
    5fe4:	702c      	strb	r4, [r5, #0]
    5fe6:	f04f 34ff 	mov.w	r4, #4294967295
		while (SEGGER_RTT_HasDataUp(CONFIG_LOG_BACKEND_RTT_BUFFER) &&
    5fea:	2000      	movs	r0, #0
    5fec:	f001 fa26 	bl	743c <SEGGER_RTT_HasDataUp>
    5ff0:	2800      	cmp	r0, #0
    5ff2:	d0f3      	beq.n	5fdc <data_out_block_mode+0x50>
    5ff4:	782b      	ldrb	r3, [r5, #0]
    5ff6:	2b00      	cmp	r3, #0
    5ff8:	d1f3      	bne.n	5fe2 <data_out_block_mode+0x56>
    5ffa:	e7ef      	b.n	5fdc <data_out_block_mode+0x50>
			on_failed_write(retry_cnt--);
    5ffc:	3c01      	subs	r4, #1
    5ffe:	f7ff ffb7 	bl	5f70 <on_failed_write.part.0>
    6002:	e7f2      	b.n	5fea <data_out_block_mode+0x5e>
		} else if (host_present) {
    6004:	782b      	ldrb	r3, [r5, #0]
    6006:	b113      	cbz	r3, 600e <data_out_block_mode+0x82>
	if (retry_cnt == 0) {
    6008:	3c01      	subs	r4, #1
    600a:	d104      	bne.n	6016 <data_out_block_mode+0x8a>
		host_present = false;
    600c:	702c      	strb	r4, [r5, #0]
	} while ((ret == 0) && host_present);
    600e:	782b      	ldrb	r3, [r5, #0]
    6010:	2b00      	cmp	r3, #0
    6012:	d1c4      	bne.n	5f9e <data_out_block_mode+0x12>
    6014:	e7e2      	b.n	5fdc <data_out_block_mode+0x50>
    6016:	f7ff ffab 	bl	5f70 <on_failed_write.part.0>
    601a:	e7f8      	b.n	600e <data_out_block_mode+0x82>
    601c:	2000ed9d 	.word	0x2000ed9d
    6020:	20009fa0 	.word	0x20009fa0
    6024:	2000ed9c 	.word	0x2000ed9c

00006028 <hrs_init>:

static int hrs_init(const struct device *dev)
{
	ARG_UNUSED(dev);

	hrs_blsc = 0x01;
    6028:	4b02      	ldr	r3, [pc, #8]	; (6034 <hrs_init+0xc>)
    602a:	2201      	movs	r2, #1
    602c:	701a      	strb	r2, [r3, #0]

	return 0;
}
    602e:	2000      	movs	r0, #0
    6030:	4770      	bx	lr
    6032:	bf00      	nop
    6034:	2000eda0 	.word	0x2000eda0

00006038 <read_blsc>:
{
    6038:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &hrs_blsc,
    603a:	2401      	movs	r4, #1
    603c:	9402      	str	r4, [sp, #8]
    603e:	4c04      	ldr	r4, [pc, #16]	; (6050 <read_blsc+0x18>)
    6040:	9401      	str	r4, [sp, #4]
    6042:	f8bd 4018 	ldrh.w	r4, [sp, #24]
    6046:	9400      	str	r4, [sp, #0]
    6048:	f01f fd5c 	bl	25b04 <bt_gatt_attr_read>
}
    604c:	b004      	add	sp, #16
    604e:	bd10      	pop	{r4, pc}
    6050:	2000eda0 	.word	0x2000eda0

00006054 <hrmc_ccc_cfg_changed>:
	return ((uint8_t *)data - (uint8_t *)__log_const_start)/
    6054:	4b07      	ldr	r3, [pc, #28]	; (6074 <hrmc_ccc_cfg_changed+0x20>)
    6056:	4a08      	ldr	r2, [pc, #32]	; (6078 <hrmc_ccc_cfg_changed+0x24>)
	LOG_INF("HRS notifications %s", notif_enabled ? "enabled" : "disabled");
    6058:	4808      	ldr	r0, [pc, #32]	; (607c <hrmc_ccc_cfg_changed+0x28>)
    605a:	1ad2      	subs	r2, r2, r3
    605c:	08d2      	lsrs	r2, r2, #3
    605e:	4b08      	ldr	r3, [pc, #32]	; (6080 <hrmc_ccc_cfg_changed+0x2c>)
    6060:	0192      	lsls	r2, r2, #6
    6062:	2901      	cmp	r1, #1
    6064:	bf14      	ite	ne
    6066:	4601      	movne	r1, r0
    6068:	4619      	moveq	r1, r3
    606a:	f042 0203 	orr.w	r2, r2, #3
    606e:	4805      	ldr	r0, [pc, #20]	; (6084 <hrmc_ccc_cfg_changed+0x30>)
    6070:	f01c b9fb 	b.w	2246a <log_1>
    6074:	000278c0 	.word	0x000278c0
    6078:	000279c8 	.word	0x000279c8
    607c:	0002932a 	.word	0x0002932a
    6080:	00029322 	.word	0x00029322
    6084:	0002b65b 	.word	0x0002b65b

00006088 <bt_hrs_notify>:

int bt_hrs_notify(uint16_t heartrate)
{
    6088:	b510      	push	{r4, lr}
	int rc;
	static uint8_t hrm[2];

	hrm[0] = 0x06; /* uint8, sensor contact */
    608a:	4c0d      	ldr	r4, [pc, #52]	; (60c0 <bt_hrs_notify+0x38>)
{
    608c:	b086      	sub	sp, #24
	hrm[0] = 0x06; /* uint8, sensor contact */
    608e:	2306      	movs	r3, #6
	hrm[1] = heartrate;
    6090:	7060      	strb	r0, [r4, #1]
				 const struct bt_gatt_attr *attr,
				 const void *data, uint16_t len)
{
	struct bt_gatt_notify_params params;

	memset(&params, 0, sizeof(params));
    6092:	2218      	movs	r2, #24
    6094:	2100      	movs	r1, #0
    6096:	4668      	mov	r0, sp
	hrm[0] = 0x06; /* uint8, sensor contact */
    6098:	7023      	strb	r3, [r4, #0]
    609a:	f01e fa10 	bl	244be <memset>

	params.attr = attr;
    609e:	4b09      	ldr	r3, [pc, #36]	; (60c4 <bt_hrs_notify+0x3c>)
	params.data = data;
	params.len = len;

	return bt_gatt_notify_cb(conn, &params);
    60a0:	4669      	mov	r1, sp
	params.data = data;
    60a2:	e9cd 3401 	strd	r3, r4, [sp, #4]
	return bt_gatt_notify_cb(conn, &params);
    60a6:	2000      	movs	r0, #0
	params.len = len;
    60a8:	2302      	movs	r3, #2
    60aa:	f8ad 300c 	strh.w	r3, [sp, #12]
	return bt_gatt_notify_cb(conn, &params);
    60ae:	f007 ff9b 	bl	dfe8 <bt_gatt_notify_cb>

	rc = bt_gatt_notify(NULL, &hrs_svc.attrs[1], &hrm, sizeof(hrm));

	return rc == -ENOTCONN ? 0 : rc;
    60b2:	f110 0f39 	cmn.w	r0, #57	; 0x39
}
    60b6:	bf08      	it	eq
    60b8:	2000      	moveq	r0, #0
    60ba:	b006      	add	sp, #24
    60bc:	bd10      	pop	{r4, pc}
    60be:	bf00      	nop
    60c0:	2000ed9e 	.word	0x2000ed9e
    60c4:	00027d4c 	.word	0x00027d4c

000060c8 <nvs_recover_last_ate>:
 *
 * addr should point to the faulty closing ate and will be updated to the last
 * valid ate. If no valid ate is found it will be left untouched.
 */
static int nvs_recover_last_ate(struct nvs_fs *fs, uint32_t *addr)
{
    60c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    60cc:	460e      	mov	r6, r1
    60ce:	4680      	mov	r8, r0
	int rc;

	LOG_DBG("Recovering last ate from sector %d",
		(*addr >> ADDR_SECT_SHIFT));

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    60d0:	2108      	movs	r1, #8
    60d2:	6ac0      	ldr	r0, [r0, #44]	; 0x2c

	*addr -= ate_size;
	ate_end_addr = *addr;
	data_end_addr = *addr & ADDR_SECT_MASK;
    60d4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 6124 <nvs_recover_last_ate+0x5c>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    60d8:	f01c fd51 	bl	22b7e <nvs_al_size.isra.0>
	*addr -= ate_size;
    60dc:	6834      	ldr	r4, [r6, #0]
    60de:	1a24      	subs	r4, r4, r0
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    60e0:	4607      	mov	r7, r0
	*addr -= ate_size;
    60e2:	6034      	str	r4, [r6, #0]
	data_end_addr = *addr & ADDR_SECT_MASK;
    60e4:	ea04 0509 	and.w	r5, r4, r9
	while (ate_end_addr > data_end_addr) {
    60e8:	42ac      	cmp	r4, r5
    60ea:	d803      	bhi.n	60f4 <nvs_recover_last_ate+0x2c>
			*addr = ate_end_addr;
		}
		ate_end_addr -= ate_size;
	}

	return 0;
    60ec:	2000      	movs	r0, #0
}
    60ee:	b003      	add	sp, #12
    60f0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    60f4:	2308      	movs	r3, #8
    60f6:	466a      	mov	r2, sp
    60f8:	4621      	mov	r1, r4
    60fa:	4640      	mov	r0, r8
    60fc:	f01c fc9b 	bl	22a36 <nvs_flash_rd>
		if (rc) {
    6100:	2800      	cmp	r0, #0
    6102:	d1f4      	bne.n	60ee <nvs_recover_last_ate+0x26>
		if (!nvs_ate_crc8_check(&end_ate)) {
    6104:	4668      	mov	r0, sp
    6106:	f01c fd1a 	bl	22b3e <nvs_ate_crc8_check>
    610a:	b940      	cbnz	r0, 611e <nvs_recover_last_ate+0x56>
			data_end_addr += end_ate.offset + end_ate.len;
    610c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    6110:	f8bd 2004 	ldrh.w	r2, [sp, #4]
			*addr = ate_end_addr;
    6114:	6034      	str	r4, [r6, #0]
			data_end_addr &= ADDR_SECT_MASK;
    6116:	ea05 0509 	and.w	r5, r5, r9
			data_end_addr += end_ate.offset + end_ate.len;
    611a:	4413      	add	r3, r2
    611c:	441d      	add	r5, r3
		ate_end_addr -= ate_size;
    611e:	1be4      	subs	r4, r4, r7
    6120:	e7e2      	b.n	60e8 <nvs_recover_last_ate+0x20>
    6122:	bf00      	nop
    6124:	ffff0000 	.word	0xffff0000

00006128 <nvs_gc>:
/* garbage collection: the address ate_wra has been updated to the new sector
 * that has just been started. The data to gc is in the sector after this new
 * sector.
 */
static int nvs_gc(struct nvs_fs *fs)
{
    6128:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    612c:	4604      	mov	r4, r0
    612e:	b093      	sub	sp, #76	; 0x4c
	struct nvs_ate close_ate, gc_ate, wlk_ate;
	uint32_t sec_addr, gc_addr, gc_prev_addr, wlk_addr, wlk_prev_addr,
	      data_addr, stop_addr;
	size_t ate_size;

	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6130:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    6132:	2108      	movs	r1, #8
    6134:	f01c fd23 	bl	22b7e <nvs_al_size.isra.0>

	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    6138:	6863      	ldr	r3, [r4, #4]
    613a:	0c1b      	lsrs	r3, r3, #16
    613c:	041b      	lsls	r3, r3, #16
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    613e:	4680      	mov	r8, r0
	nvs_sector_advance(fs, &sec_addr);
    6140:	a901      	add	r1, sp, #4
    6142:	89e0      	ldrh	r0, [r4, #14]
	sec_addr = (fs->ate_wra & ADDR_SECT_MASK);
    6144:	9301      	str	r3, [sp, #4]
	nvs_sector_advance(fs, &sec_addr);
    6146:	f01c fd0f 	bl	22b68 <nvs_sector_advance.isra.0>
	gc_addr = sec_addr + fs->sector_size - ate_size;
    614a:	9b01      	ldr	r3, [sp, #4]
    614c:	89a1      	ldrh	r1, [r4, #12]
    614e:	4419      	add	r1, r3
    6150:	eba1 0108 	sub.w	r1, r1, r8
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    6154:	2308      	movs	r3, #8
    6156:	aa04      	add	r2, sp, #16
    6158:	4620      	mov	r0, r4
	gc_addr = sec_addr + fs->sector_size - ate_size;
    615a:	9102      	str	r1, [sp, #8]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    615c:	f01c fc6b 	bl	22a36 <nvs_flash_rd>

	/* if the sector is not closed don't do gc */
	rc = nvs_flash_ate_rd(fs, gc_addr, &close_ate);
	if (rc < 0) {
    6160:	2800      	cmp	r0, #0
    6162:	f2c0 8083 	blt.w	626c <nvs_gc+0x144>
		/* flash error */
		return rc;
	}

	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
    6166:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    6168:	aa04      	add	r2, sp, #16
    616a:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    616c:	2300      	movs	r3, #0
		if (data8[i] != value) {
    616e:	f812 0b01 	ldrb.w	r0, [r2], #1
    6172:	4281      	cmp	r1, r0
    6174:	d16c      	bne.n	6250 <nvs_gc+0x128>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    6176:	3301      	adds	r3, #1
    6178:	2b08      	cmp	r3, #8
    617a:	d1f8      	bne.n	616e <nvs_gc+0x46>
	if (!rc) {
		rc = nvs_flash_erase_sector(fs, sec_addr);
    617c:	9901      	ldr	r1, [sp, #4]
    617e:	4620      	mov	r0, r4
    6180:	f01c fcb6 	bl	22af0 <nvs_flash_erase_sector>
		if (rc) {
    6184:	e072      	b.n	626c <nvs_gc+0x144>
	}

	stop_addr = gc_addr - ate_size;

	if (!nvs_ate_crc8_check(&close_ate)) {
		gc_addr &= ADDR_SECT_MASK;
    6186:	9b02      	ldr	r3, [sp, #8]
		gc_addr += close_ate.offset;
    6188:	f8bd 2012 	ldrh.w	r2, [sp, #18]
		gc_addr &= ADDR_SECT_MASK;
    618c:	0c1b      	lsrs	r3, r3, #16
    618e:	041b      	lsls	r3, r3, #16
		gc_addr += close_ate.offset;
    6190:	4413      	add	r3, r2
    6192:	9302      	str	r3, [sp, #8]
		 */
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
			/* copy needed */
			LOG_DBG("Moving %d, len %d", gc_ate.id, gc_ate.len);

			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    6194:	f8df a0dc 	ldr.w	sl, [pc, #220]	; 6274 <nvs_gc+0x14c>
		gc_prev_addr = gc_addr;
    6198:	f8dd 9008 	ldr.w	r9, [sp, #8]
		rc = nvs_prev_ate(fs, &gc_addr, &gc_ate);
    619c:	aa06      	add	r2, sp, #24
    619e:	a902      	add	r1, sp, #8
    61a0:	4620      	mov	r0, r4
    61a2:	f01c fcf6 	bl	22b92 <nvs_prev_ate>
		if (rc) {
    61a6:	2800      	cmp	r0, #0
    61a8:	d160      	bne.n	626c <nvs_gc+0x144>
		if (nvs_ate_crc8_check(&gc_ate)) {
    61aa:	a806      	add	r0, sp, #24
    61ac:	f01c fcc7 	bl	22b3e <nvs_ate_crc8_check>
    61b0:	bb80      	cbnz	r0, 6214 <nvs_gc+0xec>
		wlk_addr = fs->ate_wra;
    61b2:	6863      	ldr	r3, [r4, #4]
    61b4:	9303      	str	r3, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    61b6:	aa08      	add	r2, sp, #32
    61b8:	a903      	add	r1, sp, #12
    61ba:	4620      	mov	r0, r4
			wlk_prev_addr = wlk_addr;
    61bc:	9d03      	ldr	r5, [sp, #12]
			rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    61be:	f01c fce8 	bl	22b92 <nvs_prev_ate>
			if (rc) {
    61c2:	2800      	cmp	r0, #0
    61c4:	d152      	bne.n	626c <nvs_gc+0x144>
			if ((wlk_ate.id == gc_ate.id) &&
    61c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
    61ca:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    61ce:	429a      	cmp	r2, r3
    61d0:	d023      	beq.n	621a <nvs_gc+0xf2>
		} while (wlk_addr != fs->ate_wra);
    61d2:	6862      	ldr	r2, [r4, #4]
    61d4:	9b03      	ldr	r3, [sp, #12]
    61d6:	429a      	cmp	r2, r3
    61d8:	d1ed      	bne.n	61b6 <nvs_gc+0x8e>
		if ((wlk_prev_addr == gc_prev_addr) && gc_ate.len) {
    61da:	454d      	cmp	r5, r9
    61dc:	d11a      	bne.n	6214 <nvs_gc+0xec>
    61de:	f8bd 301c 	ldrh.w	r3, [sp, #28]
    61e2:	b1bb      	cbz	r3, 6214 <nvs_gc+0xec>
			data_addr += gc_ate.offset;
    61e4:	f8bd 301a 	ldrh.w	r3, [sp, #26]
			data_addr = (gc_prev_addr & ADDR_SECT_MASK);
    61e8:	ea09 060a 	and.w	r6, r9, sl
			data_addr += gc_ate.offset;
    61ec:	441e      	add	r6, r3

			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
			nvs_ate_crc8_update(&gc_ate);
    61ee:	a806      	add	r0, sp, #24
			gc_ate.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    61f0:	68a3      	ldr	r3, [r4, #8]
    61f2:	f8ad 301a 	strh.w	r3, [sp, #26]
			nvs_ate_crc8_update(&gc_ate);
    61f6:	f01c fcae 	bl	22b56 <nvs_ate_crc8_update>
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    61fa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c

			rc = nvs_flash_block_move(fs, data_addr, gc_ate.len);
    61fc:	f8bd 701c 	ldrh.w	r7, [sp, #28]
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
    6200:	681d      	ldr	r5, [r3, #0]
    6202:	426d      	negs	r5, r5
	block_size =
    6204:	f005 0520 	and.w	r5, r5, #32
	while (len) {
    6208:	b96f      	cbnz	r7, 6226 <nvs_gc+0xfe>
			if (rc) {
				return rc;
			}

			rc = nvs_flash_ate_wrt(fs, &gc_ate);
    620a:	a906      	add	r1, sp, #24
    620c:	4620      	mov	r0, r4
    620e:	f01c fd6e 	bl	22cee <nvs_flash_ate_wrt>
			if (rc) {
    6212:	bb58      	cbnz	r0, 626c <nvs_gc+0x144>
				return rc;
			}
		}
	} while (gc_prev_addr != stop_addr);
    6214:	45c1      	cmp	r9, r8
    6216:	d1bf      	bne.n	6198 <nvs_gc+0x70>
    6218:	e7b0      	b.n	617c <nvs_gc+0x54>
			    (!nvs_ate_crc8_check(&wlk_ate))) {
    621a:	a808      	add	r0, sp, #32
    621c:	f01c fc8f 	bl	22b3e <nvs_ate_crc8_check>
			if ((wlk_ate.id == gc_ate.id) &&
    6220:	2800      	cmp	r0, #0
    6222:	d1d6      	bne.n	61d2 <nvs_gc+0xaa>
    6224:	e7d9      	b.n	61da <nvs_gc+0xb2>
		bytes_to_copy = MIN(block_size, len);
    6226:	42bd      	cmp	r5, r7
    6228:	46ab      	mov	fp, r5
    622a:	bf28      	it	cs
    622c:	46bb      	movcs	fp, r7
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_copy);
    622e:	465b      	mov	r3, fp
    6230:	aa0a      	add	r2, sp, #40	; 0x28
    6232:	4631      	mov	r1, r6
    6234:	4620      	mov	r0, r4
    6236:	f01c fbfe 	bl	22a36 <nvs_flash_rd>
		if (rc) {
    623a:	b9b8      	cbnz	r0, 626c <nvs_gc+0x144>
		rc = nvs_flash_data_wrt(fs, buf, bytes_to_copy);
    623c:	465a      	mov	r2, fp
    623e:	a90a      	add	r1, sp, #40	; 0x28
    6240:	4620      	mov	r0, r4
    6242:	f01c fd41 	bl	22cc8 <nvs_flash_data_wrt>
		if (rc) {
    6246:	b988      	cbnz	r0, 626c <nvs_gc+0x144>
		len -= bytes_to_copy;
    6248:	eba7 070b 	sub.w	r7, r7, fp
		addr += bytes_to_copy;
    624c:	445e      	add	r6, fp
    624e:	e7db      	b.n	6208 <nvs_gc+0xe0>
	stop_addr = gc_addr - ate_size;
    6250:	9802      	ldr	r0, [sp, #8]
    6252:	eba0 0808 	sub.w	r8, r0, r8
	if (!nvs_ate_crc8_check(&close_ate)) {
    6256:	a804      	add	r0, sp, #16
    6258:	f01c fc71 	bl	22b3e <nvs_ate_crc8_check>
    625c:	2800      	cmp	r0, #0
    625e:	d092      	beq.n	6186 <nvs_gc+0x5e>
		rc = nvs_recover_last_ate(fs, &gc_addr);
    6260:	a902      	add	r1, sp, #8
    6262:	4620      	mov	r0, r4
    6264:	f7ff ff30 	bl	60c8 <nvs_recover_last_ate>
		if (rc) {
    6268:	2800      	cmp	r0, #0
    626a:	d093      	beq.n	6194 <nvs_gc+0x6c>
	rc = nvs_flash_erase_sector(fs, sec_addr);
	if (rc) {
		return rc;
	}
	return 0;
}
    626c:	b013      	add	sp, #76	; 0x4c
    626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6272:	bf00      	nop
    6274:	ffff0000 	.word	0xffff0000

00006278 <nvs_init>:
	}
	return 0;
}

int nvs_init(struct nvs_fs *fs, const char *dev_name)
{
    6278:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    627c:	4604      	mov	r4, r0
    627e:	b086      	sub	sp, #24
    6280:	460d      	mov	r5, r1

	int rc;
	struct flash_pages_info info;
	size_t write_block_size;

	k_mutex_init(&fs->nvs_lock);
    6282:	f100 0614 	add.w	r6, r0, #20
	return z_impl_k_mutex_init(mutex);
    6286:	4630      	mov	r0, r6
    6288:	f020 fd59 	bl	26d3e <z_impl_k_mutex_init>
    628c:	4628      	mov	r0, r5
    628e:	f019 fa53 	bl	1f738 <z_impl_device_get_binding>

	fs->flash_device = device_get_binding(dev_name);
    6292:	62a0      	str	r0, [r4, #40]	; 0x28
	if (!fs->flash_device) {
    6294:	b978      	cbnz	r0, 62b6 <nvs_init+0x3e>
    6296:	4ba2      	ldr	r3, [pc, #648]	; (6520 <nvs_init+0x2a8>)
    6298:	49a2      	ldr	r1, [pc, #648]	; (6524 <nvs_init+0x2ac>)
		LOG_ERR("No valid flash device found");
    629a:	48a3      	ldr	r0, [pc, #652]	; (6528 <nvs_init+0x2b0>)
    629c:	1ac9      	subs	r1, r1, r3
    629e:	08c9      	lsrs	r1, r1, #3
    62a0:	0189      	lsls	r1, r1, #6
    62a2:	f041 0101 	orr.w	r1, r1, #1
    62a6:	f01c f8d3 	bl	22450 <log_0>
		return -ENXIO;
    62aa:	f06f 0505 	mvn.w	r5, #5
	LOG_INF("data wra: %d, %x",
		(fs->data_wra >> ADDR_SECT_SHIFT),
		(fs->data_wra & ADDR_OFFS_MASK));

	return 0;
}
    62ae:	4628      	mov	r0, r5
    62b0:	b006      	add	sp, #24
    62b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
static inline const struct flash_parameters *z_impl_flash_get_parameters(const struct device *dev)
{
	const struct flash_driver_api *api =
		(const struct flash_driver_api *)dev->api;

	return api->get_parameters(dev);
    62b6:	6883      	ldr	r3, [r0, #8]
    62b8:	691b      	ldr	r3, [r3, #16]
    62ba:	4798      	blx	r3
	fs->flash_parameters = flash_get_parameters(fs->flash_device);
    62bc:	62e0      	str	r0, [r4, #44]	; 0x2c
	if (fs->flash_parameters == NULL) {
    62be:	b960      	cbnz	r0, 62da <nvs_init+0x62>
    62c0:	4998      	ldr	r1, [pc, #608]	; (6524 <nvs_init+0x2ac>)
    62c2:	4b97      	ldr	r3, [pc, #604]	; (6520 <nvs_init+0x2a8>)
		LOG_ERR("Could not obtain flash parameters");
    62c4:	4899      	ldr	r0, [pc, #612]	; (652c <nvs_init+0x2b4>)
    62c6:	1ac9      	subs	r1, r1, r3
    62c8:	08c9      	lsrs	r1, r1, #3
    62ca:	0189      	lsls	r1, r1, #6
    62cc:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Configuration error - sector count");
    62d0:	f01c f8be 	bl	22450 <log_0>
		return -EINVAL;
    62d4:	f06f 0515 	mvn.w	r5, #21
    62d8:	e7e9      	b.n	62ae <nvs_init+0x36>
	write_block_size = flash_get_write_block_size(fs->flash_device);
    62da:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	return api->get_parameters(dev)->write_block_size;
    62dc:	6883      	ldr	r3, [r0, #8]
    62de:	691b      	ldr	r3, [r3, #16]
    62e0:	4798      	blx	r3
	if (write_block_size > NVS_BLOCK_SIZE || write_block_size == 0) {
    62e2:	6803      	ldr	r3, [r0, #0]
    62e4:	3b01      	subs	r3, #1
    62e6:	2b1f      	cmp	r3, #31
    62e8:	d908      	bls.n	62fc <nvs_init+0x84>
    62ea:	498e      	ldr	r1, [pc, #568]	; (6524 <nvs_init+0x2ac>)
    62ec:	4b8c      	ldr	r3, [pc, #560]	; (6520 <nvs_init+0x2a8>)
		LOG_ERR("Unsupported write block size");
    62ee:	4890      	ldr	r0, [pc, #576]	; (6530 <nvs_init+0x2b8>)
    62f0:	1ac9      	subs	r1, r1, r3
    62f2:	08c9      	lsrs	r1, r1, #3
    62f4:	0189      	lsls	r1, r1, #6
    62f6:	f041 0101 	orr.w	r1, r1, #1
    62fa:	e7e9      	b.n	62d0 <nvs_init+0x58>
	rc = flash_get_page_info_by_offs(fs->flash_device, fs->offset, &info);
    62fc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    62fe:	6821      	ldr	r1, [r4, #0]
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke3(*(uintptr_t *)&dev, *(uintptr_t *)&offset, *(uintptr_t *)&info, K_SYSCALL_FLASH_GET_PAGE_INFO_BY_OFFS);
	}
#endif
	compiler_barrier();
	return z_impl_flash_get_page_info_by_offs(dev, offset, info);
    6300:	aa03      	add	r2, sp, #12
    6302:	f020 facc 	bl	2689e <z_impl_flash_get_page_info_by_offs>
	if (rc) {
    6306:	b140      	cbz	r0, 631a <nvs_init+0xa2>
    6308:	4986      	ldr	r1, [pc, #536]	; (6524 <nvs_init+0x2ac>)
    630a:	4b85      	ldr	r3, [pc, #532]	; (6520 <nvs_init+0x2a8>)
		LOG_ERR("Unable to get page info");
    630c:	4889      	ldr	r0, [pc, #548]	; (6534 <nvs_init+0x2bc>)
    630e:	1ac9      	subs	r1, r1, r3
    6310:	08c9      	lsrs	r1, r1, #3
    6312:	0189      	lsls	r1, r1, #6
    6314:	f041 0101 	orr.w	r1, r1, #1
    6318:	e7da      	b.n	62d0 <nvs_init+0x58>
	if (!fs->sector_size || fs->sector_size % info.size) {
    631a:	89a5      	ldrh	r5, [r4, #12]
    631c:	b12d      	cbz	r5, 632a <nvs_init+0xb2>
    631e:	9b04      	ldr	r3, [sp, #16]
    6320:	fbb5 f2f3 	udiv	r2, r5, r3
    6324:	fb03 5512 	mls	r5, r3, r2, r5
    6328:	b145      	cbz	r5, 633c <nvs_init+0xc4>
    632a:	497e      	ldr	r1, [pc, #504]	; (6524 <nvs_init+0x2ac>)
    632c:	4b7c      	ldr	r3, [pc, #496]	; (6520 <nvs_init+0x2a8>)
		LOG_ERR("Invalid sector size");
    632e:	4882      	ldr	r0, [pc, #520]	; (6538 <nvs_init+0x2c0>)
    6330:	1ac9      	subs	r1, r1, r3
    6332:	08c9      	lsrs	r1, r1, #3
    6334:	0189      	lsls	r1, r1, #6
    6336:	f041 0101 	orr.w	r1, r1, #1
    633a:	e7c9      	b.n	62d0 <nvs_init+0x58>
	if (fs->sector_count < 2) {
    633c:	89e3      	ldrh	r3, [r4, #14]
    633e:	2b01      	cmp	r3, #1
    6340:	d808      	bhi.n	6354 <nvs_init+0xdc>
    6342:	4978      	ldr	r1, [pc, #480]	; (6524 <nvs_init+0x2ac>)
    6344:	4b76      	ldr	r3, [pc, #472]	; (6520 <nvs_init+0x2a8>)
		LOG_ERR("Configuration error - sector count");
    6346:	487d      	ldr	r0, [pc, #500]	; (653c <nvs_init+0x2c4>)
    6348:	1ac9      	subs	r1, r1, r3
    634a:	08c9      	lsrs	r1, r1, #3
    634c:	0189      	lsls	r1, r1, #6
    634e:	f041 0101 	orr.w	r1, r1, #1
    6352:	e7bd      	b.n	62d0 <nvs_init+0x58>
	uint8_t erase_value = fs->flash_parameters->erase_value;
    6354:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	uint32_t addr = 0U;
    6356:	9500      	str	r5, [sp, #0]
	uint8_t erase_value = fs->flash_parameters->erase_value;
    6358:	f893 9004 	ldrb.w	r9, [r3, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    635c:	f04f 33ff 	mov.w	r3, #4294967295
    6360:	f04f 32ff 	mov.w	r2, #4294967295
    6364:	4630      	mov	r0, r6
    6366:	f019 fc0b 	bl	1fb80 <z_impl_k_mutex_lock>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    636a:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    636c:	2108      	movs	r1, #8
    636e:	f01c fc06 	bl	22b7e <nvs_al_size.isra.0>
	uint16_t i, closed_sectors = 0;
    6372:	46a8      	mov	r8, r5
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6374:	4607      	mov	r7, r0
	for (i = 0; i < fs->sector_count; i++) {
    6376:	89e3      	ldrh	r3, [r4, #14]
    6378:	fa1f fa85 	uxth.w	sl, r5
    637c:	4553      	cmp	r3, sl
    637e:	d86f      	bhi.n	6460 <nvs_init+0x1e8>
	if (closed_sectors == fs->sector_count) {
    6380:	89e3      	ldrh	r3, [r4, #14]
    6382:	4543      	cmp	r3, r8
    6384:	f000 80af 	beq.w	64e6 <nvs_init+0x26e>
	if (i == fs->sector_count) {
    6388:	4553      	cmp	r3, sl
    638a:	d10b      	bne.n	63a4 <nvs_init+0x12c>
		rc = nvs_flash_cmp_const(fs, addr - ate_size, erase_value,
    638c:	9900      	ldr	r1, [sp, #0]
    638e:	2308      	movs	r3, #8
    6390:	464a      	mov	r2, r9
    6392:	1bc9      	subs	r1, r1, r7
    6394:	4620      	mov	r0, r4
    6396:	f01c fb86 	bl	22aa6 <nvs_flash_cmp_const>
		if (!rc) {
    639a:	b918      	cbnz	r0, 63a4 <nvs_init+0x12c>
			nvs_sector_advance(fs, &addr);
    639c:	89e0      	ldrh	r0, [r4, #14]
    639e:	4669      	mov	r1, sp
    63a0:	f01c fbe2 	bl	22b68 <nvs_sector_advance.isra.0>
	fs->ate_wra = addr - ate_size;
    63a4:	9b00      	ldr	r3, [sp, #0]
	fs->data_wra = addr & ADDR_SECT_MASK;
    63a6:	f8df 8198 	ldr.w	r8, [pc, #408]	; 6540 <nvs_init+0x2c8>
	fs->ate_wra = addr - ate_size;
    63aa:	1bda      	subs	r2, r3, r7
	fs->data_wra = addr & ADDR_SECT_MASK;
    63ac:	ea03 0308 	and.w	r3, r3, r8
	fs->ate_wra = addr - ate_size;
    63b0:	6062      	str	r2, [r4, #4]
	fs->data_wra = addr & ADDR_SECT_MASK;
    63b2:	60a3      	str	r3, [r4, #8]
	while (fs->ate_wra >= fs->data_wra) {
    63b4:	e9d4 1301 	ldrd	r1, r3, [r4, #4]
    63b8:	4299      	cmp	r1, r3
    63ba:	d30f      	bcc.n	63dc <nvs_init+0x164>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
    63bc:	2308      	movs	r3, #8
    63be:	aa01      	add	r2, sp, #4
    63c0:	4620      	mov	r0, r4
    63c2:	f01c fb38 	bl	22a36 <nvs_flash_rd>
		if (rc) {
    63c6:	4605      	mov	r5, r0
    63c8:	bb30      	cbnz	r0, 6418 <nvs_init+0x1a0>
    63ca:	ab01      	add	r3, sp, #4
		if (data8[i] != value) {
    63cc:	f813 2b01 	ldrb.w	r2, [r3], #1
    63d0:	4591      	cmp	r9, r2
    63d2:	f040 808b 	bne.w	64ec <nvs_init+0x274>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
    63d6:	3501      	adds	r5, #1
    63d8:	2d08      	cmp	r5, #8
    63da:	d1f7      	bne.n	63cc <nvs_init+0x154>
	while (fs->ate_wra > fs->data_wra) {
    63dc:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
    63e0:	428b      	cmp	r3, r1
    63e2:	d907      	bls.n	63f4 <nvs_init+0x17c>
		rc = nvs_flash_cmp_const(fs, fs->data_wra, erase_value,
    63e4:	1a5b      	subs	r3, r3, r1
    63e6:	464a      	mov	r2, r9
    63e8:	4620      	mov	r0, r4
    63ea:	f01c fb5c 	bl	22aa6 <nvs_flash_cmp_const>
		if (rc < 0) {
    63ee:	1e05      	subs	r5, r0, #0
    63f0:	db12      	blt.n	6418 <nvs_init+0x1a0>
		if (!rc) {
    63f2:	d15a      	bne.n	64aa <nvs_init+0x232>
	addr = fs->ate_wra & ADDR_SECT_MASK;
    63f4:	6863      	ldr	r3, [r4, #4]
    63f6:	f8df 8148 	ldr.w	r8, [pc, #328]	; 6540 <nvs_init+0x2c8>
	nvs_sector_advance(fs, &addr);
    63fa:	89e0      	ldrh	r0, [r4, #14]
	addr = fs->ate_wra & ADDR_SECT_MASK;
    63fc:	ea03 0308 	and.w	r3, r3, r8
	nvs_sector_advance(fs, &addr);
    6400:	4669      	mov	r1, sp
	addr = fs->ate_wra & ADDR_SECT_MASK;
    6402:	9300      	str	r3, [sp, #0]
	nvs_sector_advance(fs, &addr);
    6404:	f01c fbb0 	bl	22b68 <nvs_sector_advance.isra.0>
	rc = nvs_flash_cmp_const(fs, addr, erase_value, fs->sector_size);
    6408:	89a3      	ldrh	r3, [r4, #12]
    640a:	9900      	ldr	r1, [sp, #0]
    640c:	464a      	mov	r2, r9
    640e:	4620      	mov	r0, r4
    6410:	f01c fb49 	bl	22aa6 <nvs_flash_cmp_const>
	if (rc < 0) {
    6414:	1e05      	subs	r5, r0, #0
    6416:	da4e      	bge.n	64b6 <nvs_init+0x23e>
	return z_impl_k_mutex_unlock(mutex);
    6418:	4630      	mov	r0, r6
    641a:	f019 fc23 	bl	1fc64 <z_impl_k_mutex_unlock>
	if (rc) {
    641e:	2d00      	cmp	r5, #0
    6420:	f47f af45 	bne.w	62ae <nvs_init+0x36>
	fs->ready = true;
    6424:	2301      	movs	r3, #1
    6426:	7423      	strb	r3, [r4, #16]
    6428:	4e3e      	ldr	r6, [pc, #248]	; (6524 <nvs_init+0x2ac>)
    642a:	4b3d      	ldr	r3, [pc, #244]	; (6520 <nvs_init+0x2a8>)
	LOG_INF("%d Sectors of %d bytes", fs->sector_count, fs->sector_size);
    642c:	89a2      	ldrh	r2, [r4, #12]
    642e:	89e1      	ldrh	r1, [r4, #14]
    6430:	4844      	ldr	r0, [pc, #272]	; (6544 <nvs_init+0x2cc>)
    6432:	1af6      	subs	r6, r6, r3
    6434:	08f6      	lsrs	r6, r6, #3
    6436:	01b6      	lsls	r6, r6, #6
    6438:	f046 0603 	orr.w	r6, r6, #3
    643c:	4633      	mov	r3, r6
    643e:	f01c f828 	bl	22492 <log_2>
	LOG_INF("alloc wra: %d, %x",
    6442:	6861      	ldr	r1, [r4, #4]
    6444:	4840      	ldr	r0, [pc, #256]	; (6548 <nvs_init+0x2d0>)
    6446:	4633      	mov	r3, r6
    6448:	b28a      	uxth	r2, r1
    644a:	0c09      	lsrs	r1, r1, #16
    644c:	f01c f821 	bl	22492 <log_2>
	LOG_INF("data wra: %d, %x",
    6450:	68a1      	ldr	r1, [r4, #8]
    6452:	483e      	ldr	r0, [pc, #248]	; (654c <nvs_init+0x2d4>)
    6454:	b28a      	uxth	r2, r1
    6456:	4633      	mov	r3, r6
    6458:	0c09      	lsrs	r1, r1, #16
    645a:	f01c f81a 	bl	22492 <log_2>
	return 0;
    645e:	e726      	b.n	62ae <nvs_init+0x36>
		       (uint16_t)(fs->sector_size - ate_size);
    6460:	89a1      	ldrh	r1, [r4, #12]
		addr = (i << ADDR_SECT_SHIFT) +
    6462:	042b      	lsls	r3, r5, #16
		       (uint16_t)(fs->sector_size - ate_size);
    6464:	1bc9      	subs	r1, r1, r7
		addr = (i << ADDR_SECT_SHIFT) +
    6466:	fa13 f181 	uxtah	r1, r3, r1
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    646a:	464a      	mov	r2, r9
    646c:	2308      	movs	r3, #8
    646e:	4620      	mov	r0, r4
		addr = (i << ADDR_SECT_SHIFT) +
    6470:	9100      	str	r1, [sp, #0]
		rc = nvs_flash_cmp_const(fs, addr, erase_value,
    6472:	f01c fb18 	bl	22aa6 <nvs_flash_cmp_const>
		if (rc) {
    6476:	b180      	cbz	r0, 649a <nvs_init+0x222>
			nvs_sector_advance(fs, &addr);
    6478:	89e0      	ldrh	r0, [r4, #14]
    647a:	4669      	mov	r1, sp
    647c:	f01c fb74 	bl	22b68 <nvs_sector_advance.isra.0>
			closed_sectors++;
    6480:	f108 0801 	add.w	r8, r8, #1
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    6484:	9900      	ldr	r1, [sp, #0]
    6486:	2308      	movs	r3, #8
    6488:	464a      	mov	r2, r9
    648a:	4620      	mov	r0, r4
			closed_sectors++;
    648c:	fa1f f888 	uxth.w	r8, r8
			rc = nvs_flash_cmp_const(fs, addr, erase_value,
    6490:	f01c fb09 	bl	22aa6 <nvs_flash_cmp_const>
			if (!rc) {
    6494:	2800      	cmp	r0, #0
    6496:	f43f af73 	beq.w	6380 <nvs_init+0x108>
	for (i = 0; i < fs->sector_count; i++) {
    649a:	3501      	adds	r5, #1
    649c:	e76b      	b.n	6376 <nvs_init+0xfe>
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    649e:	f1ba 0f00 	cmp.w	sl, #0
    64a2:	d039      	beq.n	6518 <nvs_init+0x2a0>
				rc = -ESPIPE;
    64a4:	f06f 051c 	mvn.w	r5, #28
    64a8:	e7b6      	b.n	6418 <nvs_init+0x1a0>
		fs->data_wra += fs->flash_parameters->write_block_size;
    64aa:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    64ac:	68a3      	ldr	r3, [r4, #8]
    64ae:	6812      	ldr	r2, [r2, #0]
    64b0:	4413      	add	r3, r2
    64b2:	60a3      	str	r3, [r4, #8]
    64b4:	e792      	b.n	63dc <nvs_init+0x164>
	if (rc) {
    64b6:	d0af      	beq.n	6418 <nvs_init+0x1a0>
		rc = nvs_flash_erase_sector(fs, fs->ate_wra);
    64b8:	6861      	ldr	r1, [r4, #4]
    64ba:	4620      	mov	r0, r4
    64bc:	f01c fb18 	bl	22af0 <nvs_flash_erase_sector>
		if (rc) {
    64c0:	4605      	mov	r5, r0
    64c2:	2800      	cmp	r0, #0
    64c4:	d1a8      	bne.n	6418 <nvs_init+0x1a0>
		fs->ate_wra &= ADDR_SECT_MASK;
    64c6:	6863      	ldr	r3, [r4, #4]
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    64c8:	89a0      	ldrh	r0, [r4, #12]
		fs->ate_wra &= ADDR_SECT_MASK;
    64ca:	ea03 0308 	and.w	r3, r3, r8
		fs->ate_wra += (fs->sector_size - 2 * ate_size);
    64ce:	4403      	add	r3, r0
    64d0:	eba3 0047 	sub.w	r0, r3, r7, lsl #1
    64d4:	6060      	str	r0, [r4, #4]
		fs->data_wra = (fs->ate_wra & ADDR_SECT_MASK);
    64d6:	ea00 0008 	and.w	r0, r0, r8
    64da:	60a0      	str	r0, [r4, #8]
		rc = nvs_gc(fs);
    64dc:	4620      	mov	r0, r4
    64de:	f7ff fe23 	bl	6128 <nvs_gc>
    64e2:	4605      	mov	r5, r0
end:
    64e4:	e798      	b.n	6418 <nvs_init+0x1a0>
		rc = -EDEADLK;
    64e6:	f06f 0520 	mvn.w	r5, #32
    64ea:	e795      	b.n	6418 <nvs_init+0x1a0>
		if (!nvs_ate_crc8_check(&last_ate)) {
    64ec:	a801      	add	r0, sp, #4
    64ee:	f01c fb26 	bl	22b3e <nvs_ate_crc8_check>
    64f2:	6865      	ldr	r5, [r4, #4]
    64f4:	b980      	cbnz	r0, 6518 <nvs_init+0x2a0>
			fs->data_wra = addr & ADDR_SECT_MASK;
    64f6:	9a00      	ldr	r2, [sp, #0]
			fs->data_wra += last_ate.offset;
    64f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    64fc:	f8bd a008 	ldrh.w	sl, [sp, #8]
    6500:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
			fs->data_wra = addr & ADDR_SECT_MASK;
    6502:	ea02 0208 	and.w	r2, r2, r8
			fs->data_wra += last_ate.offset;
    6506:	441a      	add	r2, r3
    6508:	60a2      	str	r2, [r4, #8]
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    650a:	4651      	mov	r1, sl
    650c:	f01c fb37 	bl	22b7e <nvs_al_size.isra.0>
    6510:	4402      	add	r2, r0
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    6512:	42aa      	cmp	r2, r5
			fs->data_wra += nvs_al_size(fs, last_ate.len);
    6514:	60a2      	str	r2, [r4, #8]
			if (fs->ate_wra == fs->data_wra && last_ate.len) {
    6516:	d0c2      	beq.n	649e <nvs_init+0x226>
		fs->ate_wra -= ate_size;
    6518:	1bed      	subs	r5, r5, r7
    651a:	6065      	str	r5, [r4, #4]
    651c:	e74a      	b.n	63b4 <nvs_init+0x13c>
    651e:	bf00      	nop
    6520:	000278c0 	.word	0x000278c0
    6524:	000279c0 	.word	0x000279c0
    6528:	0002b688 	.word	0x0002b688
    652c:	0002b6a4 	.word	0x0002b6a4
    6530:	0002b6c6 	.word	0x0002b6c6
    6534:	0002b6e3 	.word	0x0002b6e3
    6538:	0002b6fb 	.word	0x0002b6fb
    653c:	0002b70f 	.word	0x0002b70f
    6540:	ffff0000 	.word	0xffff0000
    6544:	0002b732 	.word	0x0002b732
    6548:	0002b749 	.word	0x0002b749
    654c:	0002b75b 	.word	0x0002b75b

00006550 <nvs_write>:

ssize_t nvs_write(struct nvs_fs *fs, uint16_t id, const void *data, size_t len)
{
    6550:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6554:	461e      	mov	r6, r3
	struct nvs_ate wlk_ate;
	uint32_t wlk_addr, rd_addr;
	uint16_t required_space = 0U; /* no space, appropriate for delete ate */
	bool prev_found = false;

	if (!fs->ready) {
    6556:	7c03      	ldrb	r3, [r0, #16]
{
    6558:	b089      	sub	sp, #36	; 0x24
    655a:	4604      	mov	r4, r0
    655c:	4689      	mov	r9, r1
    655e:	4690      	mov	r8, r2
	if (!fs->ready) {
    6560:	b97b      	cbnz	r3, 6582 <nvs_write+0x32>
    6562:	4b61      	ldr	r3, [pc, #388]	; (66e8 <nvs_write+0x198>)
    6564:	4961      	ldr	r1, [pc, #388]	; (66ec <nvs_write+0x19c>)
		LOG_ERR("NVS not initialized");
    6566:	4862      	ldr	r0, [pc, #392]	; (66f0 <nvs_write+0x1a0>)
    6568:	1ac9      	subs	r1, r1, r3
    656a:	08c9      	lsrs	r1, r1, #3
    656c:	0189      	lsls	r1, r1, #6
    656e:	f041 0101 	orr.w	r1, r1, #1
    6572:	f01b ff6d 	bl	22450 <log_0>
		return -EACCES;
    6576:	f06f 050c 	mvn.w	r5, #12
	}
	rc = len;
end:
	k_mutex_unlock(&fs->nvs_lock);
	return rc;
}
    657a:	4628      	mov	r0, r5
    657c:	b009      	add	sp, #36	; 0x24
    657e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6582:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    6584:	2108      	movs	r1, #8
    6586:	4610      	mov	r0, r2
    6588:	f01c faf9 	bl	22b7e <nvs_al_size.isra.0>
	data_size = nvs_al_size(fs, len);
    658c:	4631      	mov	r1, r6
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    658e:	4682      	mov	sl, r0
	data_size = nvs_al_size(fs, len);
    6590:	4610      	mov	r0, r2
    6592:	f01c faf4 	bl	22b7e <nvs_al_size.isra.0>
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    6596:	89a3      	ldrh	r3, [r4, #12]
    6598:	eb0a 024a 	add.w	r2, sl, sl, lsl #1
    659c:	1a9b      	subs	r3, r3, r2
    659e:	42b3      	cmp	r3, r6
	data_size = nvs_al_size(fs, len);
    65a0:	4607      	mov	r7, r0
	if ((len > (fs->sector_size - 3 * ate_size)) ||
    65a2:	f0c0 809d 	bcc.w	66e0 <nvs_write+0x190>
    65a6:	b11e      	cbz	r6, 65b0 <nvs_write+0x60>
	    ((len > 0) && (data == NULL))) {
    65a8:	f1b8 0f00 	cmp.w	r8, #0
    65ac:	f000 8098 	beq.w	66e0 <nvs_write+0x190>
	wlk_addr = fs->ate_wra;
    65b0:	6863      	ldr	r3, [r4, #4]
    65b2:	9303      	str	r3, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    65b4:	aa04      	add	r2, sp, #16
    65b6:	a903      	add	r1, sp, #12
    65b8:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    65ba:	f8dd b00c 	ldr.w	fp, [sp, #12]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    65be:	f01c fae8 	bl	22b92 <nvs_prev_ate>
		if (rc) {
    65c2:	4605      	mov	r5, r0
    65c4:	2800      	cmp	r0, #0
    65c6:	d1d8      	bne.n	657a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    65c8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
    65cc:	454b      	cmp	r3, r9
    65ce:	d005      	beq.n	65dc <nvs_write+0x8c>
		if (wlk_addr == fs->ate_wra) {
    65d0:	6862      	ldr	r2, [r4, #4]
    65d2:	9b03      	ldr	r3, [sp, #12]
    65d4:	429a      	cmp	r2, r3
    65d6:	d1ed      	bne.n	65b4 <nvs_write+0x64>
		if (len == 0) {
    65d8:	b9de      	cbnz	r6, 6612 <nvs_write+0xc2>
    65da:	e7ce      	b.n	657a <nvs_write+0x2a>
		if ((wlk_ate.id == id) && (!nvs_ate_crc8_check(&wlk_ate))) {
    65dc:	a804      	add	r0, sp, #16
    65de:	f01c faae 	bl	22b3e <nvs_ate_crc8_check>
    65e2:	2800      	cmp	r0, #0
    65e4:	d1f4      	bne.n	65d0 <nvs_write+0x80>
			if (wlk_ate.len == 0U) {
    65e6:	f8bd 3014 	ldrh.w	r3, [sp, #20]
		if (len == 0) {
    65ea:	b186      	cbz	r6, 660e <nvs_write+0xbe>
		} else if (len == wlk_ate.len) {
    65ec:	42b3      	cmp	r3, r6
    65ee:	d110      	bne.n	6612 <nvs_write+0xc2>
		rd_addr += wlk_ate.offset;
    65f0:	f8bd 0012 	ldrh.w	r0, [sp, #18]
		rd_addr &= ADDR_SECT_MASK;
    65f4:	ea4f 411b 	mov.w	r1, fp, lsr #16
    65f8:	0409      	lsls	r1, r1, #16
			rc = nvs_flash_block_cmp(fs, rd_addr, data, len);
    65fa:	4401      	add	r1, r0
    65fc:	4633      	mov	r3, r6
    65fe:	4642      	mov	r2, r8
    6600:	4620      	mov	r0, r4
    6602:	f01c fa26 	bl	22a52 <nvs_flash_block_cmp>
			if (rc <= 0) {
    6606:	2800      	cmp	r0, #0
    6608:	dc03      	bgt.n	6612 <nvs_write+0xc2>
    660a:	4605      	mov	r5, r0
    660c:	e7b5      	b.n	657a <nvs_write+0x2a>
			if (wlk_ate.len == 0U) {
    660e:	2b00      	cmp	r3, #0
    6610:	d0b3      	beq.n	657a <nvs_write+0x2a>
	if (data_size) {
    6612:	bba7      	cbnz	r7, 667e <nvs_write+0x12e>
	k_mutex_lock(&fs->nvs_lock, K_FOREVER);
    6614:	f104 0a14 	add.w	sl, r4, #20
	return z_impl_k_mutex_lock(mutex, timeout);
    6618:	f04f 32ff 	mov.w	r2, #4294967295
    661c:	f04f 33ff 	mov.w	r3, #4294967295
    6620:	4650      	mov	r0, sl
    6622:	f019 faad 	bl	1fb80 <z_impl_k_mutex_lock>
	fs->ate_wra &= ADDR_SECT_MASK;
    6626:	f8df b0cc 	ldr.w	fp, [pc, #204]	; 66f4 <nvs_write+0x1a4>
		if (gc_count == fs->sector_count) {
    662a:	89e3      	ldrh	r3, [r4, #14]
    662c:	429d      	cmp	r5, r3
    662e:	d054      	beq.n	66da <nvs_write+0x18a>
		if (fs->ate_wra >= fs->data_wra + required_space) {
    6630:	e9d4 2301 	ldrd	r2, r3, [r4, #4]
    6634:	18f9      	adds	r1, r7, r3
    6636:	428a      	cmp	r2, r1
    6638:	d324      	bcc.n	6684 <nvs_write+0x134>
	entry.offset = (uint16_t)(fs->data_wra & ADDR_OFFS_MASK);
    663a:	f8ad 301a 	strh.w	r3, [sp, #26]
	nvs_ate_crc8_update(&entry);
    663e:	a806      	add	r0, sp, #24
	entry.part = 0xff;
    6640:	23ff      	movs	r3, #255	; 0xff
    6642:	f88d 301e 	strb.w	r3, [sp, #30]
	entry.id = id;
    6646:	f8ad 9018 	strh.w	r9, [sp, #24]
	entry.len = (uint16_t)len;
    664a:	f8ad 601c 	strh.w	r6, [sp, #28]
	nvs_ate_crc8_update(&entry);
    664e:	f01c fa82 	bl	22b56 <nvs_ate_crc8_update>
	rc = nvs_flash_data_wrt(fs, data, len);
    6652:	4632      	mov	r2, r6
    6654:	4641      	mov	r1, r8
    6656:	4620      	mov	r0, r4
    6658:	f01c fb36 	bl	22cc8 <nvs_flash_data_wrt>
	if (rc) {
    665c:	4603      	mov	r3, r0
    665e:	b938      	cbnz	r0, 6670 <nvs_write+0x120>
	rc = nvs_flash_ate_wrt(fs, &entry);
    6660:	a906      	add	r1, sp, #24
    6662:	4620      	mov	r0, r4
    6664:	f01c fb43 	bl	22cee <nvs_flash_ate_wrt>
	rc = len;
    6668:	2800      	cmp	r0, #0
    666a:	bf14      	ite	ne
    666c:	4603      	movne	r3, r0
    666e:	4633      	moveq	r3, r6
    6670:	9301      	str	r3, [sp, #4]
	return z_impl_k_mutex_unlock(mutex);
    6672:	4650      	mov	r0, sl
    6674:	f019 faf6 	bl	1fc64 <z_impl_k_mutex_unlock>
	return rc;
    6678:	9b01      	ldr	r3, [sp, #4]
    667a:	461d      	mov	r5, r3
    667c:	e77d      	b.n	657a <nvs_write+0x2a>
		required_space = data_size + ate_size;
    667e:	4457      	add	r7, sl
    6680:	b2bf      	uxth	r7, r7
    6682:	e7c7      	b.n	6614 <nvs_write+0xc4>
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    6684:	2108      	movs	r1, #8
    6686:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    6688:	f01c fa79 	bl	22b7e <nvs_al_size.isra.0>
	close_ate.id = 0xFFFF;
    668c:	f64f 73ff 	movw	r3, #65535	; 0xffff
    6690:	f8ad 3018 	strh.w	r3, [sp, #24]
	close_ate.len = 0U;
    6694:	2300      	movs	r3, #0
    6696:	f8ad 301c 	strh.w	r3, [sp, #28]
	close_ate.offset = (uint16_t)((fs->ate_wra + ate_size) & ADDR_OFFS_MASK);
    669a:	1813      	adds	r3, r2, r0
    669c:	f8ad 301a 	strh.w	r3, [sp, #26]
	fs->ate_wra += (fs->sector_size - ate_size);
    66a0:	89a3      	ldrh	r3, [r4, #12]
	fs->ate_wra &= ADDR_SECT_MASK;
    66a2:	ea02 020b 	and.w	r2, r2, fp
	fs->ate_wra += (fs->sector_size - ate_size);
    66a6:	441a      	add	r2, r3
    66a8:	1a12      	subs	r2, r2, r0
    66aa:	6062      	str	r2, [r4, #4]
	nvs_ate_crc8_update(&close_ate);
    66ac:	a806      	add	r0, sp, #24
    66ae:	f01c fa52 	bl	22b56 <nvs_ate_crc8_update>
	rc = nvs_flash_ate_wrt(fs, &close_ate);
    66b2:	a906      	add	r1, sp, #24
    66b4:	4620      	mov	r0, r4
    66b6:	f01c fb1a 	bl	22cee <nvs_flash_ate_wrt>
	nvs_sector_advance(fs, &fs->ate_wra);
    66ba:	89e0      	ldrh	r0, [r4, #14]
    66bc:	1d21      	adds	r1, r4, #4
    66be:	f01c fa53 	bl	22b68 <nvs_sector_advance.isra.0>
	fs->data_wra = fs->ate_wra & ADDR_SECT_MASK;
    66c2:	6863      	ldr	r3, [r4, #4]
    66c4:	ea03 030b 	and.w	r3, r3, fp
    66c8:	60a3      	str	r3, [r4, #8]
		rc = nvs_gc(fs);
    66ca:	4620      	mov	r0, r4
    66cc:	f7ff fd2c 	bl	6128 <nvs_gc>
		if (rc) {
    66d0:	4603      	mov	r3, r0
    66d2:	2800      	cmp	r0, #0
    66d4:	d1cc      	bne.n	6670 <nvs_write+0x120>
		gc_count++;
    66d6:	3501      	adds	r5, #1
		if (gc_count == fs->sector_count) {
    66d8:	e7a7      	b.n	662a <nvs_write+0xda>
			rc = -ENOSPC;
    66da:	f06f 031b 	mvn.w	r3, #27
    66de:	e7c7      	b.n	6670 <nvs_write+0x120>
		return -EINVAL;
    66e0:	f06f 0515 	mvn.w	r5, #21
    66e4:	e749      	b.n	657a <nvs_write+0x2a>
    66e6:	bf00      	nop
    66e8:	000278c0 	.word	0x000278c0
    66ec:	000279c0 	.word	0x000279c0
    66f0:	0002b674 	.word	0x0002b674
    66f4:	ffff0000 	.word	0xffff0000

000066f8 <nvs_read_hist>:
	return nvs_write(fs, id, NULL, 0);
}

ssize_t nvs_read_hist(struct nvs_fs *fs, uint16_t id, void *data, size_t len,
		      uint16_t cnt)
{
    66f8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
    66fc:	461e      	mov	r6, r3
	uint32_t wlk_addr, rd_addr;
	uint16_t cnt_his;
	struct nvs_ate wlk_ate;
	size_t ate_size;

	if (!fs->ready) {
    66fe:	7c03      	ldrb	r3, [r0, #16]
{
    6700:	f8bd 9030 	ldrh.w	r9, [sp, #48]	; 0x30
    6704:	4604      	mov	r4, r0
    6706:	460f      	mov	r7, r1
    6708:	4690      	mov	r8, r2
	if (!fs->ready) {
    670a:	b973      	cbnz	r3, 672a <nvs_read_hist+0x32>
    670c:	4b2b      	ldr	r3, [pc, #172]	; (67bc <nvs_read_hist+0xc4>)
    670e:	492c      	ldr	r1, [pc, #176]	; (67c0 <nvs_read_hist+0xc8>)
		LOG_ERR("NVS not initialized");
    6710:	482c      	ldr	r0, [pc, #176]	; (67c4 <nvs_read_hist+0xcc>)
    6712:	1ac9      	subs	r1, r1, r3
    6714:	08c9      	lsrs	r1, r1, #3
    6716:	0189      	lsls	r1, r1, #6
    6718:	f041 0101 	orr.w	r1, r1, #1
    671c:	f01b fe98 	bl	22450 <log_0>
		return -EACCES;
    6720:	f06f 000c 	mvn.w	r0, #12

	return wlk_ate.len;

err:
	return rc;
}
    6724:	b004      	add	sp, #16
    6726:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
    672a:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
    672c:	2108      	movs	r1, #8
    672e:	f01c fa26 	bl	22b7e <nvs_al_size.isra.0>
	if (len > (fs->sector_size - 2 * ate_size)) {
    6732:	89a3      	ldrh	r3, [r4, #12]
    6734:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
    6738:	42b3      	cmp	r3, r6
    673a:	d33b      	bcc.n	67b4 <nvs_read_hist+0xbc>
	wlk_addr = fs->ate_wra;
    673c:	6863      	ldr	r3, [r4, #4]
    673e:	9301      	str	r3, [sp, #4]
	cnt_his = 0U;
    6740:	f04f 0a00 	mov.w	sl, #0
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    6744:	aa02      	add	r2, sp, #8
    6746:	a901      	add	r1, sp, #4
    6748:	4620      	mov	r0, r4
		rd_addr = wlk_addr;
    674a:	9d01      	ldr	r5, [sp, #4]
		rc = nvs_prev_ate(fs, &wlk_addr, &wlk_ate);
    674c:	f01c fa21 	bl	22b92 <nvs_prev_ate>
		if (rc) {
    6750:	2800      	cmp	r0, #0
    6752:	d1e7      	bne.n	6724 <nvs_read_hist+0x2c>
		if ((wlk_ate.id == id) &&  (!nvs_ate_crc8_check(&wlk_ate))) {
    6754:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    6758:	42bb      	cmp	r3, r7
    675a:	d107      	bne.n	676c <nvs_read_hist+0x74>
    675c:	a802      	add	r0, sp, #8
    675e:	f01c f9ee 	bl	22b3e <nvs_ate_crc8_check>
    6762:	b918      	cbnz	r0, 676c <nvs_read_hist+0x74>
			cnt_his++;
    6764:	f10a 0a01 	add.w	sl, sl, #1
    6768:	fa1f fa8a 	uxth.w	sl, sl
		if (wlk_addr == fs->ate_wra) {
    676c:	6862      	ldr	r2, [r4, #4]
    676e:	9b01      	ldr	r3, [sp, #4]
    6770:	429a      	cmp	r2, r3
    6772:	d018      	beq.n	67a6 <nvs_read_hist+0xae>
	while (cnt_his <= cnt) {
    6774:	45ca      	cmp	sl, r9
    6776:	d9e5      	bls.n	6744 <nvs_read_hist+0x4c>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    6778:	f8bd 300c 	ldrh.w	r3, [sp, #12]
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    677c:	b1bb      	cbz	r3, 67ae <nvs_read_hist+0xb6>
	    (wlk_ate.len == 0U) || (cnt_his < cnt)) {
    677e:	45ca      	cmp	sl, r9
    6780:	d315      	bcc.n	67ae <nvs_read_hist+0xb6>
	rd_addr += wlk_ate.offset;
    6782:	f8bd 100a 	ldrh.w	r1, [sp, #10]
	rd_addr &= ADDR_SECT_MASK;
    6786:	0c2d      	lsrs	r5, r5, #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    6788:	42b3      	cmp	r3, r6
	rd_addr &= ADDR_SECT_MASK;
    678a:	ea4f 4505 	mov.w	r5, r5, lsl #16
	rc = nvs_flash_rd(fs, rd_addr, data, MIN(len, wlk_ate.len));
    678e:	bf28      	it	cs
    6790:	4633      	movcs	r3, r6
    6792:	4642      	mov	r2, r8
    6794:	4429      	add	r1, r5
    6796:	4620      	mov	r0, r4
    6798:	f01c f94d 	bl	22a36 <nvs_flash_rd>
	if (rc) {
    679c:	2800      	cmp	r0, #0
    679e:	d1c1      	bne.n	6724 <nvs_read_hist+0x2c>
	return wlk_ate.len;
    67a0:	f8bd 000c 	ldrh.w	r0, [sp, #12]
    67a4:	e7be      	b.n	6724 <nvs_read_hist+0x2c>
	if (((wlk_addr == fs->ate_wra) && (wlk_ate.id != id)) ||
    67a6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    67aa:	42bb      	cmp	r3, r7
    67ac:	d0e4      	beq.n	6778 <nvs_read_hist+0x80>
		return -ENOENT;
    67ae:	f06f 0001 	mvn.w	r0, #1
    67b2:	e7b7      	b.n	6724 <nvs_read_hist+0x2c>
		return -EINVAL;
    67b4:	f06f 0015 	mvn.w	r0, #21
    67b8:	e7b4      	b.n	6724 <nvs_read_hist+0x2c>
    67ba:	bf00      	nop
    67bc:	000278c0 	.word	0x000278c0
    67c0:	000279c0 	.word	0x000279c0
    67c4:	0002b674 	.word	0x0002b674

000067c8 <get_flash_area_from_id>:
extern const struct flash_area *flash_map;
extern const int flash_map_entries;

static struct flash_area const *get_flash_area_from_id(int idx)
{
	for (int i = 0; i < flash_map_entries; i++) {
    67c8:	4b08      	ldr	r3, [pc, #32]	; (67ec <get_flash_area_from_id+0x24>)
{
    67ca:	b530      	push	{r4, r5, lr}
	for (int i = 0; i < flash_map_entries; i++) {
    67cc:	681c      	ldr	r4, [r3, #0]
		if (flash_map[i].fa_id == idx) {
    67ce:	4b08      	ldr	r3, [pc, #32]	; (67f0 <get_flash_area_from_id+0x28>)
{
    67d0:	4601      	mov	r1, r0
    67d2:	681a      	ldr	r2, [r3, #0]
	for (int i = 0; i < flash_map_entries; i++) {
    67d4:	2300      	movs	r3, #0
    67d6:	429c      	cmp	r4, r3
    67d8:	dc01      	bgt.n	67de <get_flash_area_from_id+0x16>
			return &flash_map[i];
		}
	}

	return NULL;
    67da:	2000      	movs	r0, #0
}
    67dc:	bd30      	pop	{r4, r5, pc}
		if (flash_map[i].fa_id == idx) {
    67de:	4610      	mov	r0, r2
    67e0:	3210      	adds	r2, #16
    67e2:	7805      	ldrb	r5, [r0, #0]
    67e4:	428d      	cmp	r5, r1
    67e6:	d0f9      	beq.n	67dc <get_flash_area_from_id+0x14>
	for (int i = 0; i < flash_map_entries; i++) {
    67e8:	3301      	adds	r3, #1
    67ea:	e7f4      	b.n	67d6 <get_flash_area_from_id+0xe>
    67ec:	00027e28 	.word	0x00027e28
    67f0:	200002b4 	.word	0x200002b4

000067f4 <flash_area_open>:

int flash_area_open(uint8_t id, const struct flash_area **fap)
{
	const struct flash_area *area;

	if (flash_map == NULL) {
    67f4:	4b08      	ldr	r3, [pc, #32]	; (6818 <flash_area_open+0x24>)
    67f6:	681b      	ldr	r3, [r3, #0]
{
    67f8:	b510      	push	{r4, lr}
    67fa:	460c      	mov	r4, r1
	if (flash_map == NULL) {
    67fc:	b12b      	cbz	r3, 680a <flash_area_open+0x16>
		return -EACCES;
	}

	area = get_flash_area_from_id(id);
    67fe:	f7ff ffe3 	bl	67c8 <get_flash_area_from_id>
	if (area == NULL) {
    6802:	b128      	cbz	r0, 6810 <flash_area_open+0x1c>
		return -ENOENT;
	}

	*fap = area;
    6804:	6020      	str	r0, [r4, #0]
	return 0;
    6806:	2000      	movs	r0, #0
}
    6808:	bd10      	pop	{r4, pc}
		return -EACCES;
    680a:	f06f 000c 	mvn.w	r0, #12
    680e:	e7fb      	b.n	6808 <flash_area_open+0x14>
		return -ENOENT;
    6810:	f06f 0001 	mvn.w	r0, #1
    6814:	e7f8      	b.n	6808 <flash_area_open+0x14>
    6816:	bf00      	nop
    6818:	200002b4 	.word	0x200002b4

0000681c <flash_area_get_sectors>:

	return true;
}

int flash_area_get_sectors(int idx, uint32_t *cnt, struct flash_sector *ret)
{
    681c:	b530      	push	{r4, r5, lr}
    681e:	b089      	sub	sp, #36	; 0x24
    6820:	460c      	mov	r4, r1
    6822:	4615      	mov	r5, r2
	cb_data->area_idx = idx;
    6824:	9001      	str	r0, [sp, #4]
	fa = get_flash_area_from_id(idx);
    6826:	f7ff ffcf 	bl	67c8 <get_flash_area_from_id>
	if (fa == NULL) {
    682a:	b1b8      	cbz	r0, 685c <flash_area_get_sectors+0x40>
	cb_data->area_off = fa->fa_off;
    682c:	6843      	ldr	r3, [r0, #4]
    682e:	9302      	str	r3, [sp, #8]
	cb_data->area_len = fa->fa_size;
    6830:	6883      	ldr	r3, [r0, #8]
	cb_data->ret_len = *cnt;
    6832:	6822      	ldr	r2, [r4, #0]
	flash_dev = device_get_binding(fa->fa_dev_name);
    6834:	68c0      	ldr	r0, [r0, #12]
	cb_data->ret = ret;
    6836:	e9cd 3503 	strd	r3, r5, [sp, #12]
	cb_data->ret_idx = 0U;
    683a:	2300      	movs	r3, #0
	cb_data->status = 0;
    683c:	e9cd 2306 	strd	r2, r3, [sp, #24]
	cb_data->ret_idx = 0U;
    6840:	9305      	str	r3, [sp, #20]
	flash_dev = device_get_binding(fa->fa_dev_name);
    6842:	f01c fa70 	bl	22d26 <device_get_binding>
	if (flash_dev == NULL) {
    6846:	b160      	cbz	r0, 6862 <flash_area_get_sectors+0x46>
	flash_page_foreach(flash_dev, cb, cb_data);
    6848:	4907      	ldr	r1, [pc, #28]	; (6868 <flash_area_get_sectors+0x4c>)
    684a:	aa01      	add	r2, sp, #4
    684c:	f020 f82b 	bl	268a6 <flash_page_foreach>
	if (cb_data->status == 0) {
    6850:	9807      	ldr	r0, [sp, #28]
    6852:	b908      	cbnz	r0, 6858 <flash_area_get_sectors+0x3c>
		*cnt = cb_data->ret_idx;
    6854:	9b05      	ldr	r3, [sp, #20]
    6856:	6023      	str	r3, [r4, #0]
	struct layout_data data;

	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
}
    6858:	b009      	add	sp, #36	; 0x24
    685a:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
    685c:	f06f 0015 	mvn.w	r0, #21
    6860:	e7fa      	b.n	6858 <flash_area_get_sectors+0x3c>
		return -ENODEV;
    6862:	f06f 0012 	mvn.w	r0, #18
	return flash_area_layout(idx, cnt, ret, get_sectors_cb, &data);
    6866:	e7f7      	b.n	6858 <flash_area_get_sectors+0x3c>
    6868:	00022d2b 	.word	0x00022d2b

0000686c <settings_save_one>:
int settings_save_one(const char *name, const void *value, size_t val_len)
{
	int rc;
	struct settings_store *cs;

	cs = settings_save_dst;
    686c:	4b10      	ldr	r3, [pc, #64]	; (68b0 <settings_save_one+0x44>)
{
    686e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	cs = settings_save_dst;
    6872:	681c      	ldr	r4, [r3, #0]
{
    6874:	4605      	mov	r5, r0
    6876:	460e      	mov	r6, r1
    6878:	4617      	mov	r7, r2
	if (!cs) {
    687a:	b1ac      	cbz	r4, 68a8 <settings_save_one+0x3c>
	return z_impl_k_mutex_lock(mutex, timeout);
    687c:	f04f 32ff 	mov.w	r2, #4294967295
    6880:	f04f 33ff 	mov.w	r3, #4294967295
    6884:	480b      	ldr	r0, [pc, #44]	; (68b4 <settings_save_one+0x48>)
    6886:	f019 f97b 	bl	1fb80 <z_impl_k_mutex_lock>
		return -ENOENT;
	}

	k_mutex_lock(&settings_lock, K_FOREVER);

	rc = cs->cs_itf->csi_save(cs, name, (char *)value, val_len);
    688a:	6863      	ldr	r3, [r4, #4]
    688c:	4632      	mov	r2, r6
    688e:	f8d3 8008 	ldr.w	r8, [r3, #8]
    6892:	4629      	mov	r1, r5
    6894:	463b      	mov	r3, r7
    6896:	4620      	mov	r0, r4
    6898:	47c0      	blx	r8
    689a:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    689c:	4805      	ldr	r0, [pc, #20]	; (68b4 <settings_save_one+0x48>)
    689e:	f019 f9e1 	bl	1fc64 <z_impl_k_mutex_unlock>

	k_mutex_unlock(&settings_lock);

	return rc;
}
    68a2:	4620      	mov	r0, r4
    68a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOENT;
    68a8:	f06f 0401 	mvn.w	r4, #1
    68ac:	e7f9      	b.n	68a2 <settings_save_one+0x36>
    68ae:	bf00      	nop
    68b0:	2000d590 	.word	0x2000d590
    68b4:	20009fb4 	.word	0x20009fb4

000068b8 <settings_src_register>:
	parent->next = child;
    68b8:	2300      	movs	r3, #0
    68ba:	6003      	str	r3, [r0, #0]
 *
 * @return A pointer on the last node of the list (or NULL if none)
 */
static inline sys_snode_t *sys_slist_peek_tail(sys_slist_t *list)
{
	return list->tail;
    68bc:	4b04      	ldr	r3, [pc, #16]	; (68d0 <settings_src_register+0x18>)
    68be:	685a      	ldr	r2, [r3, #4]
 * @param node A pointer on the node to append
 */
static inline void sys_slist_append(sys_slist_t *list,
				    sys_snode_t *node);

Z_GENLIST_APPEND(slist, snode)
    68c0:	b912      	cbnz	r2, 68c8 <settings_src_register+0x10>
	list->head = node;
    68c2:	e9c3 0000 	strd	r0, r0, [r3]
}
    68c6:	4770      	bx	lr
	parent->next = child;
    68c8:	6010      	str	r0, [r2, #0]
	list->tail = node;
    68ca:	6058      	str	r0, [r3, #4]
}
    68cc:	4770      	bx	lr
    68ce:	bf00      	nop
    68d0:	2000d588 	.word	0x2000d588

000068d4 <settings_dst_register>:
	settings_save_dst = cs;
    68d4:	4b01      	ldr	r3, [pc, #4]	; (68dc <settings_dst_register+0x8>)
    68d6:	6018      	str	r0, [r3, #0]
}
    68d8:	4770      	bx	lr
    68da:	bf00      	nop
    68dc:	2000d590 	.word	0x2000d590

000068e0 <settings_load_subtree>:
{
    68e0:	b530      	push	{r4, r5, lr}
    68e2:	b085      	sub	sp, #20
	const struct settings_load_arg arg = {
    68e4:	2300      	movs	r3, #0
{
    68e6:	4605      	mov	r5, r0
	const struct settings_load_arg arg = {
    68e8:	e9cd 3302 	strd	r3, r3, [sp, #8]
    68ec:	9001      	str	r0, [sp, #4]
	return z_impl_k_mutex_lock(mutex, timeout);
    68ee:	f04f 33ff 	mov.w	r3, #4294967295
    68f2:	480c      	ldr	r0, [pc, #48]	; (6924 <settings_load_subtree+0x44>)
    68f4:	f04f 32ff 	mov.w	r2, #4294967295
    68f8:	f019 f942 	bl	1fb80 <z_impl_k_mutex_lock>
	return list->head;
    68fc:	4b0a      	ldr	r3, [pc, #40]	; (6928 <settings_load_subtree+0x48>)
    68fe:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    6900:	b134      	cbz	r4, 6910 <settings_load_subtree+0x30>
		cs->cs_itf->csi_load(cs, &arg);
    6902:	6863      	ldr	r3, [r4, #4]
    6904:	4620      	mov	r0, r4
    6906:	681b      	ldr	r3, [r3, #0]
    6908:	a901      	add	r1, sp, #4
    690a:	4798      	blx	r3
	return node->next;
    690c:	6824      	ldr	r4, [r4, #0]
    690e:	e7f7      	b.n	6900 <settings_load_subtree+0x20>
	rc = settings_commit_subtree(subtree);
    6910:	4628      	mov	r0, r5
    6912:	f000 f8d3 	bl	6abc <settings_commit_subtree>
    6916:	4604      	mov	r4, r0
	return z_impl_k_mutex_unlock(mutex);
    6918:	4802      	ldr	r0, [pc, #8]	; (6924 <settings_load_subtree+0x44>)
    691a:	f019 f9a3 	bl	1fc64 <z_impl_k_mutex_unlock>
}
    691e:	4620      	mov	r0, r4
    6920:	b005      	add	sp, #20
    6922:	bd30      	pop	{r4, r5, pc}
    6924:	20009fb4 	.word	0x20009fb4
    6928:	2000d588 	.word	0x2000d588

0000692c <settings_load_subtree_direct>:
{
    692c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	const struct settings_load_arg arg = {
    692e:	e9cd 0101 	strd	r0, r1, [sp, #4]
    6932:	9203      	str	r2, [sp, #12]
	return z_impl_k_mutex_lock(mutex, timeout);
    6934:	f04f 33ff 	mov.w	r3, #4294967295
    6938:	480a      	ldr	r0, [pc, #40]	; (6964 <settings_load_subtree_direct+0x38>)
    693a:	f04f 32ff 	mov.w	r2, #4294967295
    693e:	f019 f91f 	bl	1fb80 <z_impl_k_mutex_lock>
	return list->head;
    6942:	4b09      	ldr	r3, [pc, #36]	; (6968 <settings_load_subtree_direct+0x3c>)
    6944:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_load_srcs, cs, cs_next) {
    6946:	b134      	cbz	r4, 6956 <settings_load_subtree_direct+0x2a>
		cs->cs_itf->csi_load(cs, &arg);
    6948:	6863      	ldr	r3, [r4, #4]
    694a:	4620      	mov	r0, r4
    694c:	681b      	ldr	r3, [r3, #0]
    694e:	a901      	add	r1, sp, #4
    6950:	4798      	blx	r3
	return node->next;
    6952:	6824      	ldr	r4, [r4, #0]
    6954:	e7f7      	b.n	6946 <settings_load_subtree_direct+0x1a>
	return z_impl_k_mutex_unlock(mutex);
    6956:	4803      	ldr	r0, [pc, #12]	; (6964 <settings_load_subtree_direct+0x38>)
    6958:	f019 f984 	bl	1fc64 <z_impl_k_mutex_unlock>
}
    695c:	2000      	movs	r0, #0
    695e:	b004      	add	sp, #16
    6960:	bd10      	pop	{r4, pc}
    6962:	bf00      	nop
    6964:	20009fb4 	.word	0x20009fb4
    6968:	2000d588 	.word	0x2000d588

0000696c <settings_store_init>:
	list->head = NULL;
    696c:	4b02      	ldr	r3, [pc, #8]	; (6978 <settings_store_init+0xc>)
    696e:	2200      	movs	r2, #0
	list->tail = NULL;
    6970:	e9c3 2200 	strd	r2, r2, [r3]
}

void settings_store_init(void)
{
	sys_slist_init(&settings_load_srcs);
}
    6974:	4770      	bx	lr
    6976:	bf00      	nop
    6978:	2000d588 	.word	0x2000d588

0000697c <settings_init>:
	list->head = NULL;
    697c:	4b02      	ldr	r3, [pc, #8]	; (6988 <settings_init+0xc>)
    697e:	2200      	movs	r2, #0
	list->tail = NULL;
    6980:	e9c3 2200 	strd	r2, r2, [r3]
void settings_init(void)
{
#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	sys_slist_init(&settings_handlers);
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	settings_store_init();
    6984:	f7ff bff2 	b.w	696c <settings_store_init>
    6988:	2000d594 	.word	0x2000d594

0000698c <settings_parse_and_lookup>:
	return rc;
}

struct settings_handler_static *settings_parse_and_lookup(const char *name,
							const char **next)
{
    698c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    6990:	4607      	mov	r7, r0
	struct settings_handler_static *bestmatch;
	const char *tmpnext;

	bestmatch = NULL;
	if (next) {
    6992:	460e      	mov	r6, r1
    6994:	b109      	cbz	r1, 699a <settings_parse_and_lookup+0xe>
		*next = NULL;
    6996:	2300      	movs	r3, #0
    6998:	600b      	str	r3, [r1, #0]
    699a:	4c1e      	ldr	r4, [pc, #120]	; (6a14 <settings_parse_and_lookup+0x88>)
	}

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    699c:	f8df 8078 	ldr.w	r8, [pc, #120]	; 6a18 <settings_parse_and_lookup+0x8c>
    69a0:	2500      	movs	r5, #0
    69a2:	4544      	cmp	r4, r8
    69a4:	d308      	bcc.n	69b8 <settings_parse_and_lookup+0x2c>
	return list->head;
    69a6:	4b1d      	ldr	r3, [pc, #116]	; (6a1c <settings_parse_and_lookup+0x90>)
    69a8:	681c      	ldr	r4, [r3, #0]
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;

	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    69aa:	b10c      	cbz	r4, 69b0 <settings_parse_and_lookup+0x24>
    69ac:	3c14      	subs	r4, #20
    69ae:	b9c4      	cbnz	r4, 69e2 <settings_parse_and_lookup+0x56>
			}
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */
	return bestmatch;
}
    69b0:	4628      	mov	r0, r5
    69b2:	b002      	add	sp, #8
    69b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    69b8:	6821      	ldr	r1, [r4, #0]
    69ba:	aa01      	add	r2, sp, #4
    69bc:	4638      	mov	r0, r7
    69be:	f01c f9d9 	bl	22d74 <settings_name_steq>
    69c2:	b160      	cbz	r0, 69de <settings_parse_and_lookup+0x52>
		if (!bestmatch) {
    69c4:	b925      	cbnz	r5, 69d0 <settings_parse_and_lookup+0x44>
			if (next) {
    69c6:	b10e      	cbz	r6, 69cc <settings_parse_and_lookup+0x40>
				*next = tmpnext;
    69c8:	9b01      	ldr	r3, [sp, #4]
    69ca:	6033      	str	r3, [r6, #0]
    69cc:	4625      	mov	r5, r4
    69ce:	e006      	b.n	69de <settings_parse_and_lookup+0x52>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    69d0:	6829      	ldr	r1, [r5, #0]
    69d2:	6820      	ldr	r0, [r4, #0]
    69d4:	2200      	movs	r2, #0
    69d6:	f01c f9cd 	bl	22d74 <settings_name_steq>
    69da:	2800      	cmp	r0, #0
    69dc:	d1f3      	bne.n	69c6 <settings_parse_and_lookup+0x3a>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    69de:	3414      	adds	r4, #20
    69e0:	e7df      	b.n	69a2 <settings_parse_and_lookup+0x16>
		if (!settings_name_steq(name, ch->name, &tmpnext)) {
    69e2:	6821      	ldr	r1, [r4, #0]
    69e4:	aa01      	add	r2, sp, #4
    69e6:	4638      	mov	r0, r7
    69e8:	f01c f9c4 	bl	22d74 <settings_name_steq>
    69ec:	b160      	cbz	r0, 6a08 <settings_parse_and_lookup+0x7c>
		if (!bestmatch) {
    69ee:	b925      	cbnz	r5, 69fa <settings_parse_and_lookup+0x6e>
			if (next) {
    69f0:	b10e      	cbz	r6, 69f6 <settings_parse_and_lookup+0x6a>
				*next = tmpnext;
    69f2:	9b01      	ldr	r3, [sp, #4]
    69f4:	6033      	str	r3, [r6, #0]
    69f6:	4625      	mov	r5, r4
    69f8:	e006      	b.n	6a08 <settings_parse_and_lookup+0x7c>
		if (settings_name_steq(ch->name, bestmatch->name, NULL)) {
    69fa:	6829      	ldr	r1, [r5, #0]
    69fc:	6820      	ldr	r0, [r4, #0]
    69fe:	2200      	movs	r2, #0
    6a00:	f01c f9b8 	bl	22d74 <settings_name_steq>
    6a04:	2800      	cmp	r0, #0
    6a06:	d1f3      	bne.n	69f0 <settings_parse_and_lookup+0x64>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6a08:	f114 0f14 	cmn.w	r4, #20
    6a0c:	d0d0      	beq.n	69b0 <settings_parse_and_lookup+0x24>
	return node->next;
    6a0e:	6964      	ldr	r4, [r4, #20]
    6a10:	e7cb      	b.n	69aa <settings_parse_and_lookup+0x1e>
    6a12:	bf00      	nop
    6a14:	00027848 	.word	0x00027848
    6a18:	000278c0 	.word	0x000278c0
    6a1c:	2000d594 	.word	0x2000d594

00006a20 <settings_call_set_handler>:
int settings_call_set_handler(const char *name,
			      size_t len,
			      settings_read_cb read_cb,
			      void *read_cb_arg,
			      const struct settings_load_arg *load_arg)
{
    6a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    6a24:	b085      	sub	sp, #20
    6a26:	4605      	mov	r5, r0
    6a28:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
	int rc;
	const char *name_key = name;
    6a2c:	9003      	str	r0, [sp, #12]
{
    6a2e:	460c      	mov	r4, r1
    6a30:	4616      	mov	r6, r2
    6a32:	461f      	mov	r7, r3

	if (load_arg && load_arg->subtree &&
    6a34:	f1b8 0f00 	cmp.w	r8, #0
    6a38:	d018      	beq.n	6a6c <settings_call_set_handler+0x4c>
    6a3a:	f8d8 1000 	ldr.w	r1, [r8]
    6a3e:	b181      	cbz	r1, 6a62 <settings_call_set_handler+0x42>
	    !settings_name_steq(name, load_arg->subtree, &name_key)) {
    6a40:	aa03      	add	r2, sp, #12
    6a42:	f01c f997 	bl	22d74 <settings_name_steq>
	if (load_arg && load_arg->subtree &&
    6a46:	b960      	cbnz	r0, 6a62 <settings_call_set_handler+0x42>

		if (rc != 0) {
			LOG_ERR("set-value failure. key: %s error(%d)",
				log_strdup(name), rc);
			/* Ignoring the error */
			rc = 0;
    6a48:	2000      	movs	r0, #0
    6a4a:	e007      	b.n	6a5c <settings_call_set_handler+0x3c>
		rc = load_arg->cb(name_key, len, read_cb, read_cb_arg,
    6a4c:	f8d8 3008 	ldr.w	r3, [r8, #8]
    6a50:	9300      	str	r3, [sp, #0]
    6a52:	9803      	ldr	r0, [sp, #12]
    6a54:	463b      	mov	r3, r7
    6a56:	4632      	mov	r2, r6
    6a58:	4621      	mov	r1, r4
    6a5a:	47c8      	blx	r9
			LOG_DBG("set-value OK. key: %s",
				log_strdup(name));
		}
	}
	return rc;
}
    6a5c:	b005      	add	sp, #20
    6a5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (load_arg && load_arg->cb) {
    6a62:	f8d8 9004 	ldr.w	r9, [r8, #4]
    6a66:	f1b9 0f00 	cmp.w	r9, #0
    6a6a:	d1ef      	bne.n	6a4c <settings_call_set_handler+0x2c>
		ch = settings_parse_and_lookup(name, &name_key);
    6a6c:	a903      	add	r1, sp, #12
    6a6e:	4628      	mov	r0, r5
    6a70:	f7ff ff8c 	bl	698c <settings_parse_and_lookup>
		if (!ch) {
    6a74:	2800      	cmp	r0, #0
    6a76:	d0e7      	beq.n	6a48 <settings_call_set_handler+0x28>
		rc = ch->h_set(name_key, len, read_cb, read_cb_arg);
    6a78:	f8d0 8008 	ldr.w	r8, [r0, #8]
    6a7c:	9803      	ldr	r0, [sp, #12]
    6a7e:	4632      	mov	r2, r6
    6a80:	463b      	mov	r3, r7
    6a82:	4621      	mov	r1, r4
    6a84:	47c0      	blx	r8
		if (rc != 0) {
    6a86:	4606      	mov	r6, r0
    6a88:	2800      	cmp	r0, #0
    6a8a:	d0dd      	beq.n	6a48 <settings_call_set_handler+0x28>
    6a8c:	4b08      	ldr	r3, [pc, #32]	; (6ab0 <settings_call_set_handler+0x90>)
    6a8e:	4c09      	ldr	r4, [pc, #36]	; (6ab4 <settings_call_set_handler+0x94>)
			LOG_ERR("set-value failure. key: %s error(%d)",
    6a90:	4628      	mov	r0, r5
    6a92:	1ae4      	subs	r4, r4, r3
    6a94:	08e4      	lsrs	r4, r4, #3
    6a96:	f7fe fde5 	bl	5664 <log_strdup>
    6a9a:	01a4      	lsls	r4, r4, #6
    6a9c:	f044 0401 	orr.w	r4, r4, #1
    6aa0:	4601      	mov	r1, r0
    6aa2:	4623      	mov	r3, r4
    6aa4:	4804      	ldr	r0, [pc, #16]	; (6ab8 <settings_call_set_handler+0x98>)
    6aa6:	4632      	mov	r2, r6
    6aa8:	f01b fcf3 	bl	22492 <log_2>
    6aac:	e7cc      	b.n	6a48 <settings_call_set_handler+0x28>
    6aae:	bf00      	nop
    6ab0:	000278c0 	.word	0x000278c0
    6ab4:	00027a08 	.word	0x00027a08
    6ab8:	0002b786 	.word	0x0002b786

00006abc <settings_commit_subtree>:
{
	return settings_commit_subtree(NULL);
}

int settings_commit_subtree(const char *subtree)
{
    6abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int rc;
	int rc2;

	rc = 0;

	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6abe:	4c1a      	ldr	r4, [pc, #104]	; (6b28 <settings_commit_subtree+0x6c>)
    6ac0:	4f1a      	ldr	r7, [pc, #104]	; (6b2c <settings_commit_subtree+0x70>)
{
    6ac2:	4606      	mov	r6, r0
	rc = 0;
    6ac4:	2500      	movs	r5, #0
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6ac6:	42bc      	cmp	r4, r7
    6ac8:	d306      	bcc.n	6ad8 <settings_commit_subtree+0x1c>
	return list->head;
    6aca:	4b19      	ldr	r3, [pc, #100]	; (6b30 <settings_commit_subtree+0x74>)
    6acc:	681c      	ldr	r4, [r3, #0]
		}
	}

#if defined(CONFIG_SETTINGS_DYNAMIC_HANDLERS)
	struct settings_handler *ch;
	SYS_SLIST_FOR_EACH_CONTAINER(&settings_handlers, ch, node) {
    6ace:	b10c      	cbz	r4, 6ad4 <settings_commit_subtree+0x18>
    6ad0:	3c14      	subs	r4, #20
    6ad2:	b99c      	cbnz	r4, 6afc <settings_commit_subtree+0x40>
		}
	}
#endif /* CONFIG_SETTINGS_DYNAMIC_HANDLERS */

	return rc;
}
    6ad4:	4628      	mov	r0, r5
    6ad6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6ad8:	b91e      	cbnz	r6, 6ae2 <settings_commit_subtree+0x26>
		if (ch->h_commit) {
    6ada:	68e3      	ldr	r3, [r4, #12]
    6adc:	b94b      	cbnz	r3, 6af2 <settings_commit_subtree+0x36>
	Z_STRUCT_SECTION_FOREACH(settings_handler_static, ch) {
    6ade:	3414      	adds	r4, #20
    6ae0:	e7f1      	b.n	6ac6 <settings_commit_subtree+0xa>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6ae2:	6820      	ldr	r0, [r4, #0]
    6ae4:	2200      	movs	r2, #0
    6ae6:	4631      	mov	r1, r6
    6ae8:	f01c f944 	bl	22d74 <settings_name_steq>
    6aec:	2800      	cmp	r0, #0
    6aee:	d1f4      	bne.n	6ada <settings_commit_subtree+0x1e>
    6af0:	e7f5      	b.n	6ade <settings_commit_subtree+0x22>
			rc2 = ch->h_commit();
    6af2:	4798      	blx	r3
				rc = rc2;
    6af4:	2d00      	cmp	r5, #0
    6af6:	bf08      	it	eq
    6af8:	4605      	moveq	r5, r0
    6afa:	e7f0      	b.n	6ade <settings_commit_subtree+0x22>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6afc:	b936      	cbnz	r6, 6b0c <settings_commit_subtree+0x50>
		if (ch->h_commit) {
    6afe:	68e3      	ldr	r3, [r4, #12]
    6b00:	b963      	cbnz	r3, 6b1c <settings_commit_subtree+0x60>
Z_GENLIST_PEEK_NEXT(slist, snode)
    6b02:	f114 0f14 	cmn.w	r4, #20
    6b06:	d0e5      	beq.n	6ad4 <settings_commit_subtree+0x18>
	return node->next;
    6b08:	6964      	ldr	r4, [r4, #20]
    6b0a:	e7e0      	b.n	6ace <settings_commit_subtree+0x12>
		if (subtree && !settings_name_steq(ch->name, subtree, NULL)) {
    6b0c:	6820      	ldr	r0, [r4, #0]
    6b0e:	2200      	movs	r2, #0
    6b10:	4631      	mov	r1, r6
    6b12:	f01c f92f 	bl	22d74 <settings_name_steq>
    6b16:	2800      	cmp	r0, #0
    6b18:	d1f1      	bne.n	6afe <settings_commit_subtree+0x42>
    6b1a:	e7f2      	b.n	6b02 <settings_commit_subtree+0x46>
			rc2 = ch->h_commit();
    6b1c:	4798      	blx	r3
				rc = rc2;
    6b1e:	2d00      	cmp	r5, #0
    6b20:	bf08      	it	eq
    6b22:	4605      	moveq	r5, r0
    6b24:	e7ed      	b.n	6b02 <settings_commit_subtree+0x46>
    6b26:	bf00      	nop
    6b28:	00027848 	.word	0x00027848
    6b2c:	000278c0 	.word	0x000278c0
    6b30:	2000d594 	.word	0x2000d594

00006b34 <settings_subsys_init>:
void settings_init(void);

int settings_backend_init(void);

int settings_subsys_init(void)
{
    6b34:	b510      	push	{r4, lr}

	int err = 0;

	if (settings_subsys_initialized) {
    6b36:	4c06      	ldr	r4, [pc, #24]	; (6b50 <settings_subsys_init+0x1c>)
    6b38:	7823      	ldrb	r3, [r4, #0]
    6b3a:	b93b      	cbnz	r3, 6b4c <settings_subsys_init+0x18>
		return 0;
	}

	settings_init();
    6b3c:	f7ff ff1e 	bl	697c <settings_init>

	err = settings_backend_init(); /* func rises kernel panic once error */
    6b40:	f000 f864 	bl	6c0c <settings_backend_init>

	if (!err) {
    6b44:	b908      	cbnz	r0, 6b4a <settings_subsys_init+0x16>
		settings_subsys_initialized = true;
    6b46:	2301      	movs	r3, #1
    6b48:	7023      	strb	r3, [r4, #0]
	}

	return err;
}
    6b4a:	bd10      	pop	{r4, pc}
		return 0;
    6b4c:	2000      	movs	r0, #0
    6b4e:	e7fc      	b.n	6b4a <settings_subsys_init+0x16>
    6b50:	2000eda1 	.word	0x2000eda1

00006b54 <settings_nvs_load>:
	return 0;
}

static int settings_nvs_load(struct settings_store *cs,
			     const struct settings_load_arg *arg)
{
    6b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	char name[SETTINGS_MAX_NAME_LEN + SETTINGS_EXTRA_LEN + 1];
	char buf;
	ssize_t rc1, rc2;
	uint16_t name_id = NVS_NAMECNT_ID;

	name_id = cf->last_name_id + 1;
    6b58:	8f04      	ldrh	r4, [r0, #56]	; 0x38
		/* Found a name, this might not include a trailing \0 */
		name[rc1] = '\0';
		read_fn_arg.fs = &cf->cf_nvs;
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;

		ret = settings_call_set_handler(
    6b5a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 6c08 <settings_nvs_load+0xb4>
	name_id = cf->last_name_id + 1;
    6b5e:	3401      	adds	r4, #1
{
    6b60:	b098      	sub	sp, #96	; 0x60
    6b62:	4680      	mov	r8, r0
    6b64:	4689      	mov	r9, r1
	name_id = cf->last_name_id + 1;
    6b66:	b2a4      	uxth	r4, r4
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6b68:	f100 0608 	add.w	r6, r0, #8
		name_id--;
    6b6c:	1e65      	subs	r5, r4, #1
    6b6e:	b2ad      	uxth	r5, r5
		if (name_id == NVS_NAMECNT_ID) {
    6b70:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
    6b74:	d045      	beq.n	6c02 <settings_nvs_load+0xae>
		rc1 = nvs_read(&cf->cf_nvs, name_id, &name, sizeof(name));
    6b76:	234a      	movs	r3, #74	; 0x4a
    6b78:	aa05      	add	r2, sp, #20
    6b7a:	4629      	mov	r1, r5
    6b7c:	4630      	mov	r0, r6
    6b7e:	f01c f8cb 	bl	22d18 <nvs_read>
    6b82:	f504 547f 	add.w	r4, r4, #16320	; 0x3fc0
    6b86:	343f      	adds	r4, #63	; 0x3f
    6b88:	b2a4      	uxth	r4, r4
    6b8a:	4607      	mov	r7, r0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6b8c:	4621      	mov	r1, r4
    6b8e:	2301      	movs	r3, #1
    6b90:	f10d 020b 	add.w	r2, sp, #11
    6b94:	4630      	mov	r0, r6
    6b96:	f01c f8bf 	bl	22d18 <nvs_read>
		if ((rc1 <= 0) && (rc2 <= 0)) {
    6b9a:	2f00      	cmp	r7, #0
		rc2 = nvs_read(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET,
    6b9c:	4601      	mov	r1, r0
		if ((rc1 <= 0) && (rc2 <= 0)) {
    6b9e:	dc03      	bgt.n	6ba8 <settings_nvs_load+0x54>
    6ba0:	2800      	cmp	r0, #0
    6ba2:	dc03      	bgt.n	6bac <settings_nvs_load+0x58>
{
    6ba4:	462c      	mov	r4, r5
    6ba6:	e7e1      	b.n	6b6c <settings_nvs_load+0x18>
		if ((rc1 <= 0) || (rc2 <= 0)) {
    6ba8:	2800      	cmp	r0, #0
    6baa:	dc16      	bgt.n	6bda <settings_nvs_load+0x86>
			if (name_id == cf->last_name_id) {
    6bac:	f8b8 3038 	ldrh.w	r3, [r8, #56]	; 0x38
    6bb0:	42ab      	cmp	r3, r5
    6bb2:	d109      	bne.n	6bc8 <settings_nvs_load+0x74>
				cf->last_name_id--;
    6bb4:	4642      	mov	r2, r8
    6bb6:	1e6b      	subs	r3, r5, #1
    6bb8:	f822 3f38 	strh.w	r3, [r2, #56]!
				nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
    6bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    6bc0:	2302      	movs	r3, #2
    6bc2:	4630      	mov	r0, r6
    6bc4:	f7ff fcc4 	bl	6550 <nvs_write>
			nvs_delete(&cf->cf_nvs, name_id);
    6bc8:	4629      	mov	r1, r5
    6bca:	4630      	mov	r0, r6
    6bcc:	f01c f8a0 	bl	22d10 <nvs_delete>
			nvs_delete(&cf->cf_nvs, name_id + NVS_NAME_ID_OFFSET);
    6bd0:	4621      	mov	r1, r4
    6bd2:	4630      	mov	r0, r6
    6bd4:	f01c f89c 	bl	22d10 <nvs_delete>
			continue;
    6bd8:	e7e4      	b.n	6ba4 <settings_nvs_load+0x50>
		name[rc1] = '\0';
    6bda:	ab18      	add	r3, sp, #96	; 0x60
    6bdc:	441f      	add	r7, r3
    6bde:	2300      	movs	r3, #0
    6be0:	f807 3c4c 	strb.w	r3, [r7, #-76]
		ret = settings_call_set_handler(
    6be4:	4652      	mov	r2, sl
    6be6:	f8cd 9000 	str.w	r9, [sp]
    6bea:	ab03      	add	r3, sp, #12
    6bec:	a805      	add	r0, sp, #20
		read_fn_arg.fs = &cf->cf_nvs;
    6bee:	9603      	str	r6, [sp, #12]
		read_fn_arg.id = name_id + NVS_NAME_ID_OFFSET;
    6bf0:	f8ad 4010 	strh.w	r4, [sp, #16]
		ret = settings_call_set_handler(
    6bf4:	f7ff ff14 	bl	6a20 <settings_call_set_handler>
			name, rc2,
			settings_nvs_read_fn, &read_fn_arg,
			(void *)arg);
		if (ret) {
    6bf8:	2800      	cmp	r0, #0
    6bfa:	d0d3      	beq.n	6ba4 <settings_nvs_load+0x50>
			break;
		}
	}
	return ret;
}
    6bfc:	b018      	add	sp, #96	; 0x60
    6bfe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    6c02:	2000      	movs	r0, #0
	return ret;
    6c04:	e7fa      	b.n	6bfc <settings_nvs_load+0xa8>
    6c06:	bf00      	nop
    6c08:	00022de7 	.word	0x00022de7

00006c0c <settings_backend_init>:
	LOG_DBG("Initialized");
	return 0;
}

int settings_backend_init(void)
{
    6c0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	int rc;
	uint16_t cnt = 0;
	size_t nvs_sector_size, nvs_size = 0;
	const struct flash_area *fa;
	struct flash_sector hw_flash_sector;
	uint32_t sector_cnt = 1;
    6c0e:	2301      	movs	r3, #1

	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6c10:	4669      	mov	r1, sp
    6c12:	2004      	movs	r0, #4
	uint32_t sector_cnt = 1;
    6c14:	9301      	str	r3, [sp, #4]
	rc = flash_area_open(FLASH_AREA_ID(storage), &fa);
    6c16:	f7ff fded 	bl	67f4 <flash_area_open>
	if (rc) {
    6c1a:	4604      	mov	r4, r0
    6c1c:	2800      	cmp	r0, #0
    6c1e:	d136      	bne.n	6c8e <settings_backend_init+0x82>
		return rc;
	}

	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    6c20:	aa02      	add	r2, sp, #8
    6c22:	a901      	add	r1, sp, #4
    6c24:	2004      	movs	r0, #4
    6c26:	f7ff fdf9 	bl	681c <flash_area_get_sectors>
				    &hw_flash_sector);
	if (rc == -ENODEV) {
    6c2a:	f110 0f13 	cmn.w	r0, #19
	rc = flash_area_get_sectors(FLASH_AREA_ID(storage), &sector_cnt,
    6c2e:	4604      	mov	r4, r0
	if (rc == -ENODEV) {
    6c30:	d02d      	beq.n	6c8e <settings_backend_init+0x82>
		return rc;
	} else if (rc != 0 && rc != -ENOMEM) {
    6c32:	b138      	cbz	r0, 6c44 <settings_backend_init+0x38>
    6c34:	340c      	adds	r4, #12
    6c36:	d005      	beq.n	6c44 <settings_backend_init+0x38>
		k_panic();
    6c38:	4040      	eors	r0, r0
    6c3a:	f380 8811 	msr	BASEPRI, r0
    6c3e:	f04f 0004 	mov.w	r0, #4
    6c42:	df02      	svc	2
	}

	nvs_sector_size = CONFIG_SETTINGS_NVS_SECTOR_SIZE_MULT *
    6c44:	9903      	ldr	r1, [sp, #12]
			  hw_flash_sector.fs_size;

	if (nvs_sector_size > UINT16_MAX) {
    6c46:	f5b1 3f80 	cmp.w	r1, #65536	; 0x10000
    6c4a:	d223      	bcs.n	6c94 <settings_backend_init+0x88>
		return -EDOM;
	}

	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
		nvs_size += nvs_sector_size;
		if (nvs_size > fa->fa_size) {
    6c4c:	9a00      	ldr	r2, [sp, #0]
    6c4e:	2300      	movs	r3, #0
    6c50:	6895      	ldr	r5, [r2, #8]
	size_t nvs_sector_size, nvs_size = 0;
    6c52:	4618      	mov	r0, r3
		nvs_size += nvs_sector_size;
    6c54:	4408      	add	r0, r1
		if (nvs_size > fa->fa_size) {
    6c56:	4285      	cmp	r5, r0
    6c58:	b29c      	uxth	r4, r3
    6c5a:	d303      	bcc.n	6c64 <settings_backend_init+0x58>
	while (cnt < CONFIG_SETTINGS_NVS_SECTOR_COUNT) {
    6c5c:	3301      	adds	r3, #1
    6c5e:	2b08      	cmp	r3, #8
    6c60:	d1f8      	bne.n	6c54 <settings_backend_init+0x48>
    6c62:	461c      	mov	r4, r3
		}
		cnt++;
	}

	/* define the nvs file system using the page_info */
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6c64:	4d0d      	ldr	r5, [pc, #52]	; (6c9c <settings_backend_init+0x90>)
	default_settings_nvs.cf_nvs.sector_count = cnt;
	default_settings_nvs.cf_nvs.offset = fa->fa_off;
    6c66:	6853      	ldr	r3, [r2, #4]
    6c68:	60ab      	str	r3, [r5, #8]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;

	rc = settings_nvs_backend_init(&default_settings_nvs);
    6c6a:	4628      	mov	r0, r5
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6c6c:	68d3      	ldr	r3, [r2, #12]
	default_settings_nvs.cf_nvs.sector_count = cnt;
    6c6e:	82ec      	strh	r4, [r5, #22]
	default_settings_nvs.cf_nvs.sector_size = nvs_sector_size;
    6c70:	82a9      	strh	r1, [r5, #20]
	default_settings_nvs.flash_dev_name = fa->fa_dev_name;
    6c72:	63eb      	str	r3, [r5, #60]	; 0x3c
	rc = settings_nvs_backend_init(&default_settings_nvs);
    6c74:	f01c f94e 	bl	22f14 <settings_nvs_backend_init>
	if (rc) {
    6c78:	4604      	mov	r4, r0
    6c7a:	b940      	cbnz	r0, 6c8e <settings_backend_init+0x82>
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6c7c:	4e08      	ldr	r6, [pc, #32]	; (6ca0 <settings_backend_init+0x94>)
    6c7e:	606e      	str	r6, [r5, #4]
	settings_src_register(&cf->cf_store);
    6c80:	4628      	mov	r0, r5
    6c82:	f7ff fe19 	bl	68b8 <settings_src_register>
	settings_dst_register(&cf->cf_store);
    6c86:	4628      	mov	r0, r5
	cf->cf_store.cs_itf = &settings_nvs_itf;
    6c88:	606e      	str	r6, [r5, #4]
	settings_dst_register(&cf->cf_store);
    6c8a:	f7ff fe23 	bl	68d4 <settings_dst_register>
	}

	rc = settings_nvs_dst(&default_settings_nvs);

	return rc;
}
    6c8e:	4620      	mov	r0, r4
    6c90:	b004      	add	sp, #16
    6c92:	bd70      	pop	{r4, r5, r6, pc}
		return -EDOM;
    6c94:	f06f 0424 	mvn.w	r4, #36	; 0x24
    6c98:	e7f9      	b.n	6c8e <settings_backend_init+0x82>
    6c9a:	bf00      	nop
    6c9c:	2000d59c 	.word	0x2000d59c
    6ca0:	200002b8 	.word	0x200002b8

00006ca4 <pm_state_notify>:
/*
 * Function called to notify when the system is entering / exiting a
 * power state
 */
static inline void pm_state_notify(bool entering_state)
{
    6ca4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ca6:	4605      	mov	r5, r0
	__asm__ volatile(
    6ca8:	f04f 0320 	mov.w	r3, #32
    6cac:	f3ef 8611 	mrs	r6, BASEPRI
    6cb0:	f383 8811 	msr	BASEPRI, r3
    6cb4:	f3bf 8f6f 	isb	sy
	return list->head;
    6cb8:	4b09      	ldr	r3, [pc, #36]	; (6ce0 <pm_state_notify+0x3c>)
    6cba:	681c      	ldr	r4, [r3, #0]
	struct pm_notifier *notifier;
	k_spinlock_key_t pm_notifier_key;
	void (*callback)(enum pm_state state);

	pm_notifier_key = k_spin_lock(&pm_notifier_lock);
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6cbc:	b15c      	cbz	r4, 6cd6 <pm_state_notify+0x32>
		} else {
			callback = notifier->state_exit;
		}

		if (callback) {
			callback(z_power_state.state);
    6cbe:	4f09      	ldr	r7, [pc, #36]	; (6ce4 <pm_state_notify+0x40>)
			callback = notifier->state_exit;
    6cc0:	e9d4 3201 	ldrd	r3, r2, [r4, #4]
    6cc4:	2d00      	cmp	r5, #0
    6cc6:	bf08      	it	eq
    6cc8:	4613      	moveq	r3, r2
		if (callback) {
    6cca:	b10b      	cbz	r3, 6cd0 <pm_state_notify+0x2c>
			callback(z_power_state.state);
    6ccc:	7838      	ldrb	r0, [r7, #0]
    6cce:	4798      	blx	r3
	return node->next;
    6cd0:	6824      	ldr	r4, [r4, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&pm_notifiers, notifier, _node) {
    6cd2:	2c00      	cmp	r4, #0
    6cd4:	d1f4      	bne.n	6cc0 <pm_state_notify+0x1c>
	__asm__ volatile(
    6cd6:	f386 8811 	msr	BASEPRI, r6
    6cda:	f3bf 8f6f 	isb	sy
		}
	}
	k_spin_unlock(&pm_notifier_lock, pm_notifier_key);
}
    6cde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ce0:	2000d5dc 	.word	0x2000d5dc
    6ce4:	2000d5e4 	.word	0x2000d5e4

00006ce8 <pm_system_suspend>:
	return z_power_state.state;
}


enum pm_state pm_system_suspend(int32_t ticks)
{
    6ce8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (z_forced_power_state == false) {
    6cec:	4f18      	ldr	r7, [pc, #96]	; (6d50 <pm_system_suspend+0x68>)
    6cee:	4c19      	ldr	r4, [pc, #100]	; (6d54 <pm_system_suspend+0x6c>)
    6cf0:	783b      	ldrb	r3, [r7, #0]
{
    6cf2:	4601      	mov	r1, r0
	if (z_forced_power_state == false) {
    6cf4:	b93b      	cbnz	r3, 6d06 <pm_system_suspend+0x1e>
		z_power_state = pm_policy_next_state(ticks);
    6cf6:	466d      	mov	r5, sp
    6cf8:	4628      	mov	r0, r5
    6cfa:	f01c f927 	bl	22f4c <pm_policy_next_state>
    6cfe:	e895 0003 	ldmia.w	r5, {r0, r1}
    6d02:	e884 0003 	stmia.w	r4, {r0, r1}
	if (z_power_state.state == PM_STATE_ACTIVE) {
    6d06:	7825      	ldrb	r5, [r4, #0]
    6d08:	b1f5      	cbz	r5, 6d48 <pm_system_suspend+0x60>
	post_ops_done = 0;
    6d0a:	4e13      	ldr	r6, [pc, #76]	; (6d58 <pm_system_suspend+0x70>)
    6d0c:	f04f 0800 	mov.w	r8, #0
	pm_state_notify(true);
    6d10:	2001      	movs	r0, #1
	if (deep_sleep) {
    6d12:	3d04      	subs	r5, #4
	post_ops_done = 0;
    6d14:	f8c6 8000 	str.w	r8, [r6]
	pm_state_notify(true);
    6d18:	f7ff ffc4 	bl	6ca4 <pm_state_notify>
	if (deep_sleep) {
    6d1c:	2d01      	cmp	r5, #1
 * pm_system_suspend to disable the corresponding pm_system_resume notification.
 *
 */
static inline void pm_idle_exit_notification_disable(void)
{
	pm_idle_exit_notify = 0U;
    6d1e:	bf98      	it	ls
    6d20:	4b0e      	ldrls	r3, [pc, #56]	; (6d5c <pm_system_suspend+0x74>)
	pm_power_state_set(z_power_state);
    6d22:	e894 0003 	ldmia.w	r4, {r0, r1}
    6d26:	bf98      	it	ls
    6d28:	f883 8000 	strbls.w	r8, [r3]
    6d2c:	f01d fbfe 	bl	2452c <pm_power_state_set>
	if (!post_ops_done) {
    6d30:	6830      	ldr	r0, [r6, #0]
    6d32:	b940      	cbnz	r0, 6d46 <pm_system_suspend+0x5e>
		post_ops_done = 1;
    6d34:	2301      	movs	r3, #1
		z_forced_power_state = false;
    6d36:	7038      	strb	r0, [r7, #0]
		post_ops_done = 1;
    6d38:	6033      	str	r3, [r6, #0]
		pm_state_notify(false);
    6d3a:	f7ff ffb3 	bl	6ca4 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    6d3e:	e894 0003 	ldmia.w	r4, {r0, r1}
    6d42:	f01d fc06 	bl	24552 <pm_power_state_exit_post_ops>
	return z_power_state.state;
    6d46:	7825      	ldrb	r5, [r4, #0]
	return pm_policy_mgr(ticks);
}
    6d48:	4628      	mov	r0, r5
    6d4a:	b002      	add	sp, #8
    6d4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    6d50:	2000eda2 	.word	0x2000eda2
    6d54:	2000d5e4 	.word	0x2000d5e4
    6d58:	200002c8 	.word	0x200002c8
    6d5c:	2000f322 	.word	0x2000f322

00006d60 <pm_system_resume>:

void pm_system_resume(void)
{
    6d60:	b508      	push	{r3, lr}
	 * and it may schedule another thread.
	 *
	 * Call pm_idle_exit_notification_disable() if this
	 * notification is not required.
	 */
	if (!post_ops_done) {
    6d62:	4b06      	ldr	r3, [pc, #24]	; (6d7c <pm_system_resume+0x1c>)
    6d64:	6818      	ldr	r0, [r3, #0]
    6d66:	b940      	cbnz	r0, 6d7a <pm_system_resume+0x1a>
		post_ops_done = 1;
    6d68:	2201      	movs	r2, #1
    6d6a:	601a      	str	r2, [r3, #0]
		pm_state_notify(false);
    6d6c:	f7ff ff9a 	bl	6ca4 <pm_state_notify>
		pm_power_state_exit_post_ops(z_power_state);
    6d70:	4b03      	ldr	r3, [pc, #12]	; (6d80 <pm_system_resume+0x20>)
    6d72:	e893 0003 	ldmia.w	r3, {r0, r1}
    6d76:	f01d fbec 	bl	24552 <pm_power_state_exit_post_ops>
	}
}
    6d7a:	bd08      	pop	{r3, pc}
    6d7c:	200002c8 	.word	0x200002c8
    6d80:	2000d5e4 	.word	0x2000d5e4

00006d84 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(const struct device *arg)
{
    6d84:	b510      	push	{r4, lr}
    6d86:	4807      	ldr	r0, [pc, #28]	; (6da4 <uart_console_init+0x20>)
	__stdout_hook_install(console_out);
    6d88:	4c07      	ldr	r4, [pc, #28]	; (6da8 <uart_console_init+0x24>)
    6d8a:	f018 fcd5 	bl	1f738 <z_impl_device_get_binding>

	ARG_UNUSED(arg);

	/* Claim console device */
	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    6d8e:	4b07      	ldr	r3, [pc, #28]	; (6dac <uart_console_init+0x28>)
    6d90:	6018      	str	r0, [r3, #0]
	__stdout_hook_install(console_out);
    6d92:	4620      	mov	r0, r4
    6d94:	f001 f97a 	bl	808c <__stdout_hook_install>
	__printk_hook_install(console_out);
    6d98:	4620      	mov	r0, r4
    6d9a:	f7fd fbfb 	bl	4594 <__printk_hook_install>

	uart_console_hook_install();

	return 0;
}
    6d9e:	2000      	movs	r0, #0
    6da0:	bd10      	pop	{r4, pc}
    6da2:	bf00      	nop
    6da4:	0002b633 	.word	0x0002b633
    6da8:	00006db1 	.word	0x00006db1
    6dac:	2000d5ec 	.word	0x2000d5ec

00006db0 <console_out>:
	if ('\n' == c) {
    6db0:	280a      	cmp	r0, #10
{
    6db2:	b538      	push	{r3, r4, r5, lr}
    6db4:	4d07      	ldr	r5, [pc, #28]	; (6dd4 <console_out+0x24>)
    6db6:	4604      	mov	r4, r0
	if ('\n' == c) {
    6db8:	d104      	bne.n	6dc4 <console_out+0x14>
		uart_poll_out(uart_console_dev, '\r');
    6dba:	6828      	ldr	r0, [r5, #0]
    6dbc:	6883      	ldr	r3, [r0, #8]
    6dbe:	210d      	movs	r1, #13
    6dc0:	685b      	ldr	r3, [r3, #4]
    6dc2:	4798      	blx	r3
	uart_poll_out(uart_console_dev, c);
    6dc4:	6828      	ldr	r0, [r5, #0]
    6dc6:	6883      	ldr	r3, [r0, #8]
    6dc8:	b2e1      	uxtb	r1, r4
    6dca:	685b      	ldr	r3, [r3, #4]
    6dcc:	4798      	blx	r3
}
    6dce:	4620      	mov	r0, r4
    6dd0:	bd38      	pop	{r3, r4, r5, pc}
    6dd2:	bf00      	nop
    6dd4:	2000d5ec 	.word	0x2000d5ec

00006dd8 <onoff_stop>:
}

static clock_control_subsys_t get_subsys(struct onoff_manager *mgr)
{
	struct nrf_clock_control_data *data = CLOCK_DEVICE->data;
	size_t offset = (size_t)(mgr - data->mgr);
    6dd8:	4b08      	ldr	r3, [pc, #32]	; (6dfc <onoff_stop+0x24>)
	return (clock_control_subsys_t)offset;
}

static void onoff_stop(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6dda:	b570      	push	{r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6ddc:	1ac3      	subs	r3, r0, r3
{
    6dde:	460d      	mov	r5, r1
	int res;

	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6de0:	4907      	ldr	r1, [pc, #28]	; (6e00 <onoff_stop+0x28>)
	size_t offset = (size_t)(mgr - data->mgr);
    6de2:	109b      	asrs	r3, r3, #2
{
    6de4:	4604      	mov	r4, r0
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6de6:	4359      	muls	r1, r3
    6de8:	4806      	ldr	r0, [pc, #24]	; (6e04 <onoff_stop+0x2c>)
    6dea:	2240      	movs	r2, #64	; 0x40
    6dec:	f01c f8ce 	bl	22f8c <stop>
	notify(mgr, res);
    6df0:	462b      	mov	r3, r5
	res = stop(CLOCK_DEVICE, get_subsys(mgr), CTX_ONOFF);
    6df2:	4601      	mov	r1, r0
	notify(mgr, res);
    6df4:	4620      	mov	r0, r4
}
    6df6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	notify(mgr, res);
    6dfa:	4718      	bx	r3
    6dfc:	2000d600 	.word	0x2000d600
    6e00:	b6db6db7 	.word	0xb6db6db7
    6e04:	20009d88 	.word	0x20009d88

00006e08 <onoff_start>:
	notify(mgr, 0);
}

static void onoff_start(struct onoff_manager *mgr,
			onoff_notify_fn notify)
{
    6e08:	b573      	push	{r0, r1, r4, r5, r6, lr}
	size_t offset = (size_t)(mgr - data->mgr);
    6e0a:	4c0c      	ldr	r4, [pc, #48]	; (6e3c <onoff_start+0x34>)
	int err;

	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e0c:	4a0c      	ldr	r2, [pc, #48]	; (6e40 <onoff_start+0x38>)
    6e0e:	2340      	movs	r3, #64	; 0x40
	size_t offset = (size_t)(mgr - data->mgr);
    6e10:	1b04      	subs	r4, r0, r4
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e12:	9300      	str	r3, [sp, #0]
{
    6e14:	460d      	mov	r5, r1
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e16:	460b      	mov	r3, r1
    6e18:	490a      	ldr	r1, [pc, #40]	; (6e44 <onoff_start+0x3c>)
	size_t offset = (size_t)(mgr - data->mgr);
    6e1a:	10a4      	asrs	r4, r4, #2
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e1c:	4361      	muls	r1, r4
{
    6e1e:	4606      	mov	r6, r0
	err = async_start(CLOCK_DEVICE, get_subsys(mgr),
    6e20:	4809      	ldr	r0, [pc, #36]	; (6e48 <onoff_start+0x40>)
    6e22:	f01c f8e0 	bl	22fe6 <async_start>
			  onoff_started_callback, notify, CTX_ONOFF);
	if (err < 0) {
    6e26:	1e01      	subs	r1, r0, #0
    6e28:	da05      	bge.n	6e36 <onoff_start+0x2e>
		notify(mgr, err);
    6e2a:	4630      	mov	r0, r6
    6e2c:	462b      	mov	r3, r5
	}
}
    6e2e:	b002      	add	sp, #8
    6e30:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		notify(mgr, err);
    6e34:	4718      	bx	r3
}
    6e36:	b002      	add	sp, #8
    6e38:	bd70      	pop	{r4, r5, r6, pc}
    6e3a:	bf00      	nop
    6e3c:	2000d600 	.word	0x2000d600
    6e40:	00023055 	.word	0x00023055
    6e44:	b6db6db7 	.word	0xb6db6db7
    6e48:	20009d88 	.word	0x20009d88

00006e4c <clk_init>:
	static const struct onoff_transitions transitions = {
		.start = onoff_start,
		.stop = onoff_stop
	};

	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6e4c:	2200      	movs	r2, #0
{
    6e4e:	b570      	push	{r4, r5, r6, lr}
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6e50:	2101      	movs	r1, #1
{
    6e52:	4604      	mov	r4, r0
	IRQ_CONNECT(DT_INST_IRQN(0), DT_INST_IRQ(0, priority),
    6e54:	4610      	mov	r0, r2
    6e56:	f000 fcab 	bl	77b0 <z_arm_irq_priority_set>
		    nrfx_isr, nrfx_power_clock_irq_handler, 0);
	irq_enable(DT_INST_IRQN(0));
    6e5a:	2000      	movs	r0, #0
    6e5c:	f000 fc76 	bl	774c <arch_irq_enable>

	nrfx_err = nrfx_clock_init(clock_event_handler);
    6e60:	480f      	ldr	r0, [pc, #60]	; (6ea0 <clk_init+0x54>)
    6e62:	f017 ff63 	bl	1ed2c <nrfx_clock_init>
	if (nrfx_err != NRFX_SUCCESS) {
    6e66:	4b0f      	ldr	r3, [pc, #60]	; (6ea4 <clk_init+0x58>)
    6e68:	4298      	cmp	r0, r3
    6e6a:	d115      	bne.n	6e98 <clk_init+0x4c>
		struct nrf_clock_control_data *data = dev->data;

		z_nrf_clock_calibration_init(data->mgr);
	}

	nrfx_clock_enable();
    6e6c:	f01f fd9b 	bl	269a6 <nrfx_clock_enable>
	struct nrf_clock_control_data *data = dev->data;
    6e70:	68e6      	ldr	r6, [r4, #12]
	for (enum clock_control_nrf_type i = 0;
		i < CLOCK_CONTROL_NRF_TYPE_COUNT; i++) {
		struct nrf_clock_control_sub_data *subdata =
						get_sub_data(dev, i);

		err = onoff_manager_init(get_onoff_manager(dev, i),
    6e72:	490d      	ldr	r1, [pc, #52]	; (6ea8 <clk_init+0x5c>)
    6e74:	4630      	mov	r0, r6
    6e76:	f01a febe 	bl	21bf6 <onoff_manager_init>
					 &transitions);
		if (err < 0) {
    6e7a:	2800      	cmp	r0, #0
    6e7c:	db0b      	blt.n	6e96 <clk_init+0x4a>
	struct nrf_clock_control_data *data = dev->data;
    6e7e:	68e4      	ldr	r4, [r4, #12]
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6e80:	4909      	ldr	r1, [pc, #36]	; (6ea8 <clk_init+0x5c>)
			return err;
		}

		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6e82:	2501      	movs	r5, #1
    6e84:	6435      	str	r5, [r6, #64]	; 0x40
		err = onoff_manager_init(get_onoff_manager(dev, i),
    6e86:	f104 001c 	add.w	r0, r4, #28
    6e8a:	f01a feb4 	bl	21bf6 <onoff_manager_init>
		if (err < 0) {
    6e8e:	2800      	cmp	r0, #0
    6e90:	db01      	blt.n	6e96 <clk_init+0x4a>
		subdata->flags = CLOCK_CONTROL_STATUS_OFF;
    6e92:	64e5      	str	r5, [r4, #76]	; 0x4c
	}

	return 0;
    6e94:	2000      	movs	r0, #0
}
    6e96:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    6e98:	f06f 0004 	mvn.w	r0, #4
    6e9c:	e7fb      	b.n	6e96 <clk_init+0x4a>
    6e9e:	bf00      	nop
    6ea0:	00006ee1 	.word	0x00006ee1
    6ea4:	0bad0000 	.word	0x0bad0000
    6ea8:	00027e58 	.word	0x00027e58

00006eac <clkstarted_handle.constprop.0>:
static void clkstarted_handle(const struct device *dev,
    6eac:	4601      	mov	r1, r0
	clock_control_cb_t callback = sub_data->cb;
    6eae:	230c      	movs	r3, #12
    6eb0:	4809      	ldr	r0, [pc, #36]	; (6ed8 <clkstarted_handle.constprop.0+0x2c>)
    6eb2:	434b      	muls	r3, r1
static void clkstarted_handle(const struct device *dev,
    6eb4:	b570      	push	{r4, r5, r6, lr}
	clock_control_cb_t callback = sub_data->cb;
    6eb6:	18c4      	adds	r4, r0, r3
	void *user_data = sub_data->user_data;
    6eb8:	e9d4 560e 	ldrd	r5, r6, [r4, #56]	; 0x38
	sub_data->cb = NULL;
    6ebc:	2200      	movs	r2, #0
	set_on_state(&sub_data->flags);
    6ebe:	3340      	adds	r3, #64	; 0x40
	sub_data->cb = NULL;
    6ec0:	63a2      	str	r2, [r4, #56]	; 0x38
	set_on_state(&sub_data->flags);
    6ec2:	4418      	add	r0, r3
    6ec4:	f01c f84f 	bl	22f66 <set_on_state>
	if (callback) {
    6ec8:	b12d      	cbz	r5, 6ed6 <clkstarted_handle.constprop.0+0x2a>
		callback(dev, (clock_control_subsys_t)type, user_data);
    6eca:	4632      	mov	r2, r6
    6ecc:	462b      	mov	r3, r5
    6ece:	4803      	ldr	r0, [pc, #12]	; (6edc <clkstarted_handle.constprop.0+0x30>)
}
    6ed0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		callback(dev, (clock_control_subsys_t)type, user_data);
    6ed4:	4718      	bx	r3
}
    6ed6:	bd70      	pop	{r4, r5, r6, pc}
    6ed8:	2000d600 	.word	0x2000d600
    6edc:	20009d88 	.word	0x20009d88

00006ee0 <clock_event_handler>:
	switch (event) {
    6ee0:	b110      	cbz	r0, 6ee8 <clock_event_handler+0x8>
    6ee2:	2801      	cmp	r0, #1
    6ee4:	d004      	beq.n	6ef0 <clock_event_handler+0x10>
    6ee6:	4770      	bx	lr
		if (GET_STATUS(data->flags) == CLOCK_CONTROL_STATUS_STARTING) {
    6ee8:	4b03      	ldr	r3, [pc, #12]	; (6ef8 <clock_event_handler+0x18>)
    6eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    6eec:	075b      	lsls	r3, r3, #29
    6eee:	d101      	bne.n	6ef4 <clock_event_handler+0x14>
		clkstarted_handle(dev, CLOCK_CONTROL_NRF_TYPE_LFCLK);
    6ef0:	f7ff bfdc 	b.w	6eac <clkstarted_handle.constprop.0>
}
    6ef4:	4770      	bx	lr
    6ef6:	bf00      	nop
    6ef8:	2000d600 	.word	0x2000d600

00006efc <generic_hfclk_start>:
{
    6efc:	b508      	push	{r3, lr}
	__asm__ volatile(
    6efe:	f04f 0320 	mov.w	r3, #32
    6f02:	f3ef 8111 	mrs	r1, BASEPRI
    6f06:	f383 8811 	msr	BASEPRI, r3
    6f0a:	f3bf 8f6f 	isb	sy
	hfclk_users |= HF_USER_GENERIC;
    6f0e:	4a12      	ldr	r2, [pc, #72]	; (6f58 <generic_hfclk_start+0x5c>)
    6f10:	6813      	ldr	r3, [r2, #0]
    6f12:	f043 0002 	orr.w	r0, r3, #2
	if (hfclk_users & HF_USER_BT) {
    6f16:	f013 0301 	ands.w	r3, r3, #1
	hfclk_users |= HF_USER_GENERIC;
    6f1a:	6010      	str	r0, [r2, #0]
	if (hfclk_users & HF_USER_BT) {
    6f1c:	d00c      	beq.n	6f38 <generic_hfclk_start+0x3c>
            break;
        case NRF_CLOCK_DOMAIN_HFCLK:
            if (p_clk_src != NULL)
            {
                (*(nrf_clock_hfclk_t *)p_clk_src) =
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
    6f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
    6f22:	f8d2 340c 	ldr.w	r3, [r2, #1036]	; 0x40c
                                        >> CLOCK_HFCLKSTAT_SRC_Pos);
            }
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
    6f26:	f8d2 240c 	ldr.w	r2, [r2, #1036]	; 0x40c
		if (type == NRF_CLOCK_HFCLK_HIGH_ACCURACY) {
    6f2a:	f013 0301 	ands.w	r3, r3, #1
    6f2e:	d003      	beq.n	6f38 <generic_hfclk_start+0x3c>
			set_on_state(get_hf_flags());
    6f30:	480a      	ldr	r0, [pc, #40]	; (6f5c <generic_hfclk_start+0x60>)
    6f32:	f01c f818 	bl	22f66 <set_on_state>
			already_started = true;
    6f36:	2301      	movs	r3, #1
	__asm__ volatile(
    6f38:	f381 8811 	msr	BASEPRI, r1
    6f3c:	f3bf 8f6f 	isb	sy
	if (already_started) {
    6f40:	b123      	cbz	r3, 6f4c <generic_hfclk_start+0x50>
}
    6f42:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		clkstarted_handle(CLOCK_DEVICE,
    6f46:	2000      	movs	r0, #0
    6f48:	f7ff bfb0 	b.w	6eac <clkstarted_handle.constprop.0>
}
    6f4c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_start(void)
{
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6f50:	2001      	movs	r0, #1
    6f52:	f01f bd32 	b.w	269ba <nrfx_clock_start>
    6f56:	bf00      	nop
    6f58:	2000d650 	.word	0x2000d650
    6f5c:	2000d640 	.word	0x2000d640

00006f60 <api_blocking_start>:
{
    6f60:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6f62:	2200      	movs	r2, #0
    6f64:	2301      	movs	r3, #1
    6f66:	e9cd 2302 	strd	r2, r3, [sp, #8]
    6f6a:	ab04      	add	r3, sp, #16
    6f6c:	e9cd 3304 	strd	r3, r3, [sp, #16]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6f70:	4a09      	ldr	r2, [pc, #36]	; (6f98 <api_blocking_start+0x38>)
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6f72:	f8cd d000 	str.w	sp, [sp]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6f76:	466b      	mov	r3, sp
	struct k_sem sem = Z_SEM_INITIALIZER(sem, 0, 1);
    6f78:	f8cd d004 	str.w	sp, [sp, #4]
	err = api_start(dev, subsys, blocking_start_callback, &sem);
    6f7c:	f01c f863 	bl	23046 <api_start>
	if (err < 0) {
    6f80:	2800      	cmp	r0, #0
    6f82:	db05      	blt.n	6f90 <api_blocking_start+0x30>
	return z_impl_k_sem_take(sem, timeout);
    6f84:	f44f 4280 	mov.w	r2, #16384	; 0x4000
    6f88:	2300      	movs	r3, #0
    6f8a:	4668      	mov	r0, sp
    6f8c:	f019 fa90 	bl	204b0 <z_impl_k_sem_take>
}
    6f90:	b007      	add	sp, #28
    6f92:	f85d fb04 	ldr.w	pc, [sp], #4
    6f96:	bf00      	nop
    6f98:	00023073 	.word	0x00023073

00006f9c <generic_hfclk_stop>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6f9c:	4b09      	ldr	r3, [pc, #36]	; (6fc4 <generic_hfclk_stop+0x28>)
    6f9e:	f3bf 8f5b 	dmb	ish
    6fa2:	e853 2f00 	ldrex	r2, [r3]
    6fa6:	f022 0102 	bic.w	r1, r2, #2
    6faa:	e843 1000 	strex	r0, r1, [r3]
    6fae:	2800      	cmp	r0, #0
    6fb0:	d1f7      	bne.n	6fa2 <generic_hfclk_stop+0x6>
    6fb2:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_GENERIC) & HF_USER_BT) {
    6fb6:	07d3      	lsls	r3, r2, #31
    6fb8:	d402      	bmi.n	6fc0 <generic_hfclk_stop+0x24>
}

NRFX_STATIC_INLINE void nrfx_clock_hfclk_stop(void)
{
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    6fba:	2001      	movs	r0, #1
    6fbc:	f017 bec6 	b.w	1ed4c <nrfx_clock_stop>
}
    6fc0:	4770      	bx	lr
    6fc2:	bf00      	nop
    6fc4:	2000d650 	.word	0x2000d650

00006fc8 <z_nrf_clock_control_get_onoff>:
}
    6fc8:	4a02      	ldr	r2, [pc, #8]	; (6fd4 <z_nrf_clock_control_get_onoff+0xc>)
	return &data->mgr[type];
    6fca:	b2c3      	uxtb	r3, r0
}
    6fcc:	201c      	movs	r0, #28
    6fce:	fb03 2000 	mla	r0, r3, r0, r2
    6fd2:	4770      	bx	lr
    6fd4:	2000d600 	.word	0x2000d600

00006fd8 <z_nrf_clock_bt_ctlr_hf_request>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6fd8:	4b09      	ldr	r3, [pc, #36]	; (7000 <z_nrf_clock_bt_ctlr_hf_request+0x28>)
    6fda:	f3bf 8f5b 	dmb	ish
    6fde:	e853 2f00 	ldrex	r2, [r3]
    6fe2:	f042 0101 	orr.w	r1, r2, #1
    6fe6:	e843 1000 	strex	r0, r1, [r3]
    6fea:	2800      	cmp	r0, #0
    6fec:	d1f7      	bne.n	6fde <z_nrf_clock_bt_ctlr_hf_request+0x6>
    6fee:	f3bf 8f5b 	dmb	ish
	if (atomic_or(&hfclk_users, HF_USER_BT) & HF_USER_GENERIC) {
    6ff2:	0793      	lsls	r3, r2, #30
    6ff4:	d402      	bmi.n	6ffc <z_nrf_clock_bt_ctlr_hf_request+0x24>
    nrfx_clock_start(NRF_CLOCK_DOMAIN_HFCLK);
    6ff6:	2001      	movs	r0, #1
    6ff8:	f01f bcdf 	b.w	269ba <nrfx_clock_start>
}
    6ffc:	4770      	bx	lr
    6ffe:	bf00      	nop
    7000:	2000d650 	.word	0x2000d650

00007004 <z_nrf_clock_bt_ctlr_hf_release>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7004:	4b09      	ldr	r3, [pc, #36]	; (702c <z_nrf_clock_bt_ctlr_hf_release+0x28>)
    7006:	f3bf 8f5b 	dmb	ish
    700a:	e853 2f00 	ldrex	r2, [r3]
    700e:	f022 0101 	bic.w	r1, r2, #1
    7012:	e843 1000 	strex	r0, r1, [r3]
    7016:	2800      	cmp	r0, #0
    7018:	d1f7      	bne.n	700a <z_nrf_clock_bt_ctlr_hf_release+0x6>
    701a:	f3bf 8f5b 	dmb	ish
	if (atomic_and(&hfclk_users, ~HF_USER_BT) & HF_USER_GENERIC) {
    701e:	0793      	lsls	r3, r2, #30
    7020:	d402      	bmi.n	7028 <z_nrf_clock_bt_ctlr_hf_release+0x24>
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_HFCLK);
    7022:	2001      	movs	r0, #1
    7024:	f017 be92 	b.w	1ed4c <nrfx_clock_stop>
}
    7028:	4770      	bx	lr
    702a:	bf00      	nop
    702c:	2000d650 	.word	0x2000d650

00007030 <z_nrf_clock_control_lf_on>:
{
    7030:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    7034:	4939      	ldr	r1, [pc, #228]	; (711c <z_nrf_clock_control_lf_on+0xec>)
    7036:	f3bf 8f5b 	dmb	ish
    703a:	4607      	mov	r7, r0
    703c:	2201      	movs	r2, #1
    703e:	e851 3f00 	ldrex	r3, [r1]
    7042:	e841 2000 	strex	r0, r2, [r1]
    7046:	2800      	cmp	r0, #0
    7048:	d1f9      	bne.n	703e <z_nrf_clock_control_lf_on+0xe>
    704a:	f3bf 8f5b 	dmb	ish
	if (atomic_set(&on, 1) == 0) {
    704e:	b933      	cbnz	r3, 705e <z_nrf_clock_control_lf_on+0x2e>
 */
static inline void sys_notify_init_spinwait(struct sys_notify *notify)
{
	__ASSERT_NO_MSG(notify != NULL);

	*notify = (struct sys_notify){
    7050:	4933      	ldr	r1, [pc, #204]	; (7120 <z_nrf_clock_control_lf_on+0xf0>)
		err = onoff_request(mgr, &cli);
    7052:	4834      	ldr	r0, [pc, #208]	; (7124 <z_nrf_clock_control_lf_on+0xf4>)
    7054:	604b      	str	r3, [r1, #4]
    7056:	60cb      	str	r3, [r1, #12]
    7058:	608a      	str	r2, [r1, #8]
    705a:	f01a fddf 	bl	21c1c <onoff_request>
	switch (start_mode) {
    705e:	1e7b      	subs	r3, r7, #1
    7060:	2b01      	cmp	r3, #1
    7062:	d82f      	bhi.n	70c4 <z_nrf_clock_control_lf_on+0x94>
	if ((mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE) &&
    7064:	2f01      	cmp	r7, #1
    7066:	d107      	bne.n	7078 <z_nrf_clock_control_lf_on+0x48>
    return clk_src;
}

NRF_STATIC_INLINE nrf_clock_lfclk_t nrf_clock_lf_srccopy_get(NRF_CLOCK_Type const * p_reg)
{
    return (nrf_clock_lfclk_t)((p_reg->LFCLKSRCCOPY & CLOCK_LFCLKSRCCOPY_SRC_Msk)
    7068:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    706c:	f8d3 341c 	ldr.w	r3, [r3, #1052]	; 0x41c
    7070:	f003 0303 	and.w	r3, r3, #3
	    (target_type == NRF_CLOCK_LFCLK_Xtal) &&
    7074:	2b01      	cmp	r3, #1
    7076:	d025      	beq.n	70c4 <z_nrf_clock_control_lf_on+0x94>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
    7078:	f020 f833 	bl	270e2 <k_is_in_isr>
    707c:	4604      	mov	r4, r0
    707e:	b918      	cbnz	r0, 7088 <z_nrf_clock_control_lf_on+0x58>
	return !z_sys_post_kernel;
    7080:	4b29      	ldr	r3, [pc, #164]	; (7128 <z_nrf_clock_control_lf_on+0xf8>)
	int key = isr_mode ? irq_lock() : 0;
    7082:	781b      	ldrb	r3, [r3, #0]
    7084:	2b00      	cmp	r3, #0
    7086:	d141      	bne.n	710c <z_nrf_clock_control_lf_on+0xdc>
	__asm__ volatile(
    7088:	f04f 0320 	mov.w	r3, #32
    708c:	f3ef 8611 	mrs	r6, BASEPRI
    7090:	f383 8811 	msr	BASEPRI, r3
    7094:	f3bf 8f6f 	isb	sy
    7098:	2401      	movs	r4, #1
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    709a:	f8df 8090 	ldr.w	r8, [pc, #144]	; 712c <z_nrf_clock_control_lf_on+0xfc>
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
    709e:	f04f 4580 	mov.w	r5, #1073741824	; 0x40000000
    70a2:	f8d5 3418 	ldr.w	r3, [r5, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
    70a6:	f8d5 2418 	ldr.w	r2, [r5, #1048]	; 0x418
    70aa:	03d2      	lsls	r2, r2, #15
    70ac:	d50c      	bpl.n	70c8 <z_nrf_clock_control_lf_on+0x98>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
    70ae:	f003 0303 	and.w	r3, r3, #3
	while (!(nrfx_clock_is_running(d, (void *)&type)
    70b2:	2b01      	cmp	r3, #1
    70b4:	d001      	beq.n	70ba <z_nrf_clock_control_lf_on+0x8a>
		     || (mode == CLOCK_CONTROL_NRF_LF_START_AVAILABLE)))) {
    70b6:	2f01      	cmp	r7, #1
    70b8:	d106      	bne.n	70c8 <z_nrf_clock_control_lf_on+0x98>
	if (isr_mode) {
    70ba:	b30c      	cbz	r4, 7100 <z_nrf_clock_control_lf_on+0xd0>
	__asm__ volatile(
    70bc:	f386 8811 	msr	BASEPRI, r6
    70c0:	f3bf 8f6f 	isb	sy
}
    70c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (isr_mode) {
    70c8:	b1ac      	cbz	r4, 70f6 <z_nrf_clock_control_lf_on+0xc6>
 *
 * @return N/A
 */
static inline void k_cpu_atomic_idle(unsigned int key)
{
	arch_cpu_atomic_idle(key);
    70ca:	4630      	mov	r0, r6
    70cc:	f000 fbf6 	bl	78bc <arch_cpu_atomic_idle>
    return (nrf_clock_lfclk_t)(p_reg->LFCLKSRC);
    70d0:	f8d5 3518 	ldr.w	r3, [r5, #1304]	; 0x518
		if ((target_type ==  NRF_CLOCK_LFCLK_Xtal)
    70d4:	2b00      	cmp	r3, #0
    70d6:	d1e4      	bne.n	70a2 <z_nrf_clock_control_lf_on+0x72>
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
    70d8:	f8d5 2104 	ldr.w	r2, [r5, #260]	; 0x104
		    && nrf_clock_event_check(NRF_CLOCK,
    70dc:	2a00      	cmp	r2, #0
    70de:	d0e0      	beq.n	70a2 <z_nrf_clock_control_lf_on+0x72>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
    70e0:	f8c5 3104 	str.w	r3, [r5, #260]	; 0x104
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_event_readback(void * p_event_reg)
{
#if NRFX_CHECK(NRFX_EVENT_READBACK_ENABLED) && !defined(NRF51)
    (void)*((volatile uint32_t *)(p_event_reg));
    70e4:	f8d5 3104 	ldr.w	r3, [r5, #260]	; 0x104
    p_reg->LFCLKSRC = (uint32_t)(source);
    70e8:	2301      	movs	r3, #1
    70ea:	f8c5 3518 	str.w	r3, [r5, #1304]	; 0x518
    70ee:	f8c8 3180 	str.w	r3, [r8, #384]	; 0x180
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
    70f2:	60ab      	str	r3, [r5, #8]
}
    70f4:	e7d5      	b.n	70a2 <z_nrf_clock_control_lf_on+0x72>
	return z_impl_k_sleep(timeout);
    70f6:	2100      	movs	r1, #0
    70f8:	2021      	movs	r0, #33	; 0x21
    70fa:	f019 f993 	bl	20424 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
    70fe:	e7e7      	b.n	70d0 <z_nrf_clock_control_lf_on+0xa0>
    p_reg->INTENSET = mask;
    7100:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7104:	2202      	movs	r2, #2
    7106:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
}
    710a:	e7db      	b.n	70c4 <z_nrf_clock_control_lf_on+0x94>
    p_reg->INTENCLR = mask;
    710c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    7110:	2202      	movs	r2, #2
    7112:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	int key = isr_mode ? irq_lock() : 0;
    7116:	4606      	mov	r6, r0
}
    7118:	e7bf      	b.n	709a <z_nrf_clock_control_lf_on+0x6a>
    711a:	bf00      	nop
    711c:	2000d654 	.word	0x2000d654
    7120:	2000d5f0 	.word	0x2000d5f0
    7124:	2000d61c 	.word	0x2000d61c
    7128:	2000f323 	.word	0x2000f323
    712c:	e000e100 	.word	0xe000e100

00007130 <sys_clock_timeout_handler>:

static void sys_clock_timeout_handler(uint32_t chan,
				      uint32_t cc_value,
				      void *user_data)
{
	uint32_t dticks = counter_sub(cc_value, last_count) / CYC_PER_TICK;
    7130:	4a04      	ldr	r2, [pc, #16]	; (7144 <sys_clock_timeout_handler+0x14>)
    7132:	6813      	ldr	r3, [r2, #0]
	return (a - b) & COUNTER_MAX;
    7134:	1ac8      	subs	r0, r1, r3
    7136:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000

	last_count += dticks * CYC_PER_TICK;
    713a:	4403      	add	r3, r0
    713c:	6013      	str	r3, [r2, #0]
		 */
		compare_set(chan, last_count + CYC_PER_TICK,
					  sys_clock_timeout_handler, NULL);
	}

	z_clock_announce(IS_ENABLED(CONFIG_TICKLESS_KERNEL) ?
    713e:	f019 bc1d 	b.w	2097c <z_clock_announce>
    7142:	bf00      	nop
    7144:	2000d664 	.word	0x2000d664

00007148 <set_absolute_alarm>:
{
    7148:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    714c:	0086      	lsls	r6, r0, #2
    714e:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
	nrf_rtc_event_clear(RTC, RTC_CHANNEL_EVENT_ADDR(chan));
    7152:	f100 0450 	add.w	r4, r0, #80	; 0x50
    7156:	f506 3688 	add.w	r6, r6, #69632	; 0x11000
    715a:	00a4      	lsls	r4, r4, #2
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE void nrf_rtc_event_clear(NRF_RTC_Type * p_reg, nrf_rtc_event_t event)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    715c:	b2a4      	uxth	r4, r4
    715e:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7162:	f44f 3780 	mov.w	r7, #65536	; 0x10000
    return p_reg->CC[ch];
    7166:	f8d6 3540 	ldr.w	r3, [r6, #1344]	; 0x540
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)event);
}

NRF_STATIC_INLINE uint32_t nrf_rtc_counter_get(NRF_RTC_Type const * p_reg)
{
     return p_reg->COUNTER;
    716a:	f8df 806c 	ldr.w	r8, [pc, #108]	; 71d8 <set_absolute_alarm+0x90>
	uint32_t cc_val = abs_val & COUNTER_MAX;
    716e:	f021 457f 	bic.w	r5, r1, #4278190080	; 0xff000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    7172:	f504 3488 	add.w	r4, r4, #69632	; 0x11000
	nrf_rtc_event_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
    7176:	4087      	lsls	r7, r0
     return p_reg->COUNTER;
    7178:	f8d8 9504 	ldr.w	r9, [r8, #1284]	; 0x504
	return (a - b) & COUNTER_MAX;
    717c:	eba3 0309 	sub.w	r3, r3, r9
    7180:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    7184:	f029 427f 	bic.w	r2, r9, #4278190080	; 0xff000000
		if (counter_sub(prev_cc, now) == 1) {
    7188:	2b01      	cmp	r3, #1
    p_reg->CC[ch] = cc_val;
    718a:	f8c6 2540 	str.w	r2, [r6, #1344]	; 0x540
    718e:	d102      	bne.n	7196 <set_absolute_alarm+0x4e>
	z_impl_k_busy_wait(usec_to_wait);
    7190:	2013      	movs	r0, #19
    7192:	f01f ffac 	bl	270ee <z_impl_k_busy_wait>
		if (counter_sub(cc_val, now + 2) > COUNTER_HALF_SPAN) {
    7196:	f109 0202 	add.w	r2, r9, #2
	return (a - b) & COUNTER_MAX;
    719a:	1aab      	subs	r3, r5, r2
    719c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
			cc_val = now + 2;
    71a0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    71a4:	bf88      	it	hi
    71a6:	4615      	movhi	r5, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    71a8:	2300      	movs	r3, #0
    71aa:	6023      	str	r3, [r4, #0]
    71ac:	6823      	ldr	r3, [r4, #0]
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
}

NRF_STATIC_INLINE void nrf_rtc_event_enable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENSET = mask;
    71ae:	f8c8 7344 	str.w	r7, [r8, #836]	; 0x344
	nrf_rtc_cc_set(RTC, chan, cyc & COUNTER_MAX);
    71b2:	f025 437f 	bic.w	r3, r5, #4278190080	; 0xff000000
    p_reg->CC[ch] = cc_val;
    71b6:	f8c6 3540 	str.w	r3, [r6, #1344]	; 0x540
     return p_reg->COUNTER;
    71ba:	f8d8 3504 	ldr.w	r3, [r8, #1284]	; 0x504
		 (counter_sub(cc_val, now2 + 2) > COUNTER_HALF_SPAN));
    71be:	4599      	cmp	r9, r3
    71c0:	d006      	beq.n	71d0 <set_absolute_alarm+0x88>
	return (a - b) & COUNTER_MAX;
    71c2:	1aeb      	subs	r3, r5, r3
    71c4:	3b02      	subs	r3, #2
    71c6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	} while ((now2 != now) &&
    71ca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
    71ce:	d801      	bhi.n	71d4 <set_absolute_alarm+0x8c>
}
    71d0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		prev_cc = cc_val;
    71d4:	462b      	mov	r3, r5
    71d6:	e7cf      	b.n	7178 <set_absolute_alarm+0x30>
    71d8:	40011000 	.word	0x40011000

000071dc <rtc_nrf_isr>:
 * probably better abstract that at some point (e.g. query and reset
 * it by pointer at runtime, maybe?) so we don't have this leaky
 * symbol.
 */
void rtc_nrf_isr(const void *arg)
{
    71dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	ARG_UNUSED(arg);

	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    71de:	2500      	movs	r5, #0
    return p_reg->INTENSET & mask;
    71e0:	4c10      	ldr	r4, [pc, #64]	; (7224 <rtc_nrf_isr+0x48>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    71e2:	462f      	mov	r7, r5
    71e4:	4b10      	ldr	r3, [pc, #64]	; (7228 <rtc_nrf_isr+0x4c>)
    71e6:	681e      	ldr	r6, [r3, #0]
    71e8:	b105      	cbz	r5, 71ec <rtc_nrf_isr+0x10>
				handler(chan, cc_val,
					cc_data[chan].user_context);
			}
		}
	}
}
    71ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return p_reg->INTENSET & mask;
    71ec:	f8d4 2304 	ldr.w	r2, [r4, #772]	; 0x304
		if (nrf_rtc_int_enable_check(RTC, RTC_CHANNEL_INT_MASK(chan)) &&
    71f0:	03d2      	lsls	r2, r2, #15
    71f2:	d5fa      	bpl.n	71ea <rtc_nrf_isr+0xe>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
    71f4:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
    71f8:	2a00      	cmp	r2, #0
    71fa:	d0f6      	beq.n	71ea <rtc_nrf_isr+0xe>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0;
    71fc:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
    7200:	f8d4 2140 	ldr.w	r2, [r4, #320]	; 0x140
}

NRF_STATIC_INLINE void nrf_rtc_event_disable(NRF_RTC_Type * p_reg, uint32_t mask)
{
    p_reg->EVTENCLR = mask;
    7204:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    7208:	f8c4 2348 	str.w	r2, [r4, #840]	; 0x348
    return p_reg->CC[ch];
    720c:	f8d4 1540 	ldr.w	r1, [r4, #1344]	; 0x540
	for (uint32_t chan = 0; chan < CHAN_COUNT; chan++) {
    7210:	2501      	movs	r5, #1
			if (handler) {
    7212:	b126      	cbz	r6, 721e <rtc_nrf_isr+0x42>
				handler(chan, cc_val,
    7214:	685a      	ldr	r2, [r3, #4]
    7216:	601f      	str	r7, [r3, #0]
    7218:	2000      	movs	r0, #0
    721a:	47b0      	blx	r6
    721c:	e7e2      	b.n	71e4 <rtc_nrf_isr+0x8>
    721e:	601e      	str	r6, [r3, #0]
}
    7220:	e7e3      	b.n	71ea <rtc_nrf_isr+0xe>
    7222:	bf00      	nop
    7224:	40011000 	.word	0x40011000
    7228:	2000d658 	.word	0x2000d658

0000722c <z_clock_driver_init>:

	atomic_or(&alloc_mask, BIT(chan));
}

int z_clock_driver_init(const struct device *device)
{
    722c:	b538      	push	{r3, r4, r5, lr}
    p_reg->PRESCALER = val;
    722e:	4c0f      	ldr	r4, [pc, #60]	; (726c <z_clock_driver_init+0x40>)
    7230:	2500      	movs	r5, #0
    p_reg->INTENSET = mask;
    7232:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    p_reg->PRESCALER = val;
    7236:	f8c4 5508 	str.w	r5, [r4, #1288]	; 0x508
    p_reg->INTENSET = mask;
    723a:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    723e:	4b0c      	ldr	r3, [pc, #48]	; (7270 <z_clock_driver_init+0x44>)
    7240:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    7244:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		nrf_rtc_int_enable(RTC, RTC_CHANNEL_INT_MASK(chan));
	}

	NVIC_ClearPendingIRQ(RTC_IRQn);

	IRQ_CONNECT(RTC_IRQn, DT_IRQ(DT_NODELABEL(RTC_LABEL), priority),
    7248:	2101      	movs	r1, #1
    724a:	462a      	mov	r2, r5
    724c:	2011      	movs	r0, #17
    724e:	f000 faaf 	bl	77b0 <z_arm_irq_priority_set>
		    rtc_nrf_isr, 0, 0);
	irq_enable(RTC_IRQn);
    7252:	2011      	movs	r0, #17
    7254:	f000 fa7a 	bl	774c <arch_irq_enable>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
    7258:	2301      	movs	r3, #1

	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_CLEAR);
	nrf_rtc_task_trigger(RTC, NRF_RTC_TASK_START);

	int_mask = BIT_MASK(CHAN_COUNT);
    725a:	4a06      	ldr	r2, [pc, #24]	; (7274 <z_clock_driver_init+0x48>)
    725c:	60a3      	str	r3, [r4, #8]
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		compare_set(0, counter() + CYC_PER_TICK,
			    sys_clock_timeout_handler, NULL);
	}

	z_nrf_clock_control_lf_on(mode);
    725e:	2002      	movs	r0, #2
    7260:	6023      	str	r3, [r4, #0]
	int_mask = BIT_MASK(CHAN_COUNT);
    7262:	6013      	str	r3, [r2, #0]
	z_nrf_clock_control_lf_on(mode);
    7264:	f7ff fee4 	bl	7030 <z_nrf_clock_control_lf_on>

	return 0;
}
    7268:	4628      	mov	r0, r5
    726a:	bd38      	pop	{r3, r4, r5, pc}
    726c:	40011000 	.word	0x40011000
    7270:	e000e100 	.word	0xe000e100
    7274:	2000d660 	.word	0x2000d660

00007278 <z_clock_set_timeout>:

	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return;
	}

	ticks = (ticks == K_TICKS_FOREVER) ? MAX_TICKS : ticks;
    7278:	4a13      	ldr	r2, [pc, #76]	; (72c8 <z_clock_set_timeout+0x50>)
    727a:	f1b0 3fff 	cmp.w	r0, #4294967295
    727e:	bf14      	ite	ne
    7280:	4603      	movne	r3, r0
    7282:	4613      	moveq	r3, r2
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    7284:	3b01      	subs	r3, #1
    7286:	2b00      	cmp	r3, #0
    7288:	dd1c      	ble.n	72c4 <z_clock_set_timeout+0x4c>
    728a:	4293      	cmp	r3, r2
    728c:	bfa8      	it	ge
    728e:	4613      	movge	r3, r2
     return p_reg->COUNTER;
    7290:	4a0e      	ldr	r2, [pc, #56]	; (72cc <z_clock_set_timeout+0x54>)
    7292:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504

	uint32_t unannounced = counter_sub(counter(), last_count);
    7296:	4a0e      	ldr	r2, [pc, #56]	; (72d0 <z_clock_set_timeout+0x58>)
    7298:	6811      	ldr	r1, [r2, #0]
	return (a - b) & COUNTER_MAX;
    729a:	1a40      	subs	r0, r0, r1
	 * duration, then force an announce to avoid loss of a wrap
	 * event.  This can happen if new timeouts keep being set
	 * before the existing one triggers the interrupt.
	 */
	if (unannounced >= COUNTER_HALF_SPAN) {
		ticks = 0;
    729c:	f410 0f00 	tst.w	r0, #8388608	; 0x800000
	return (a - b) & COUNTER_MAX;
    72a0:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
		ticks = 0;
    72a4:	bf18      	it	ne
    72a6:	2300      	movne	r3, #0
	}

	/* Get the cycles from last_count to the tick boundary after
	 * the requested ticks have passed starting now.
	 */
	cyc = ticks * CYC_PER_TICK + 1 + unannounced;
    72a8:	3201      	adds	r2, #1
    72aa:	4413      	add	r3, r2
	cc_data[chan].callback = handler;
    72ac:	4a09      	ldr	r2, [pc, #36]	; (72d4 <z_clock_set_timeout+0x5c>)
    72ae:	480a      	ldr	r0, [pc, #40]	; (72d8 <z_clock_set_timeout+0x60>)
    72b0:	6010      	str	r0, [r2, #0]
	cc_data[chan].user_context = user_data;
    72b2:	2000      	movs	r0, #0
    72b4:	6050      	str	r0, [r2, #4]
	set_absolute_alarm(chan, cc_value);
    72b6:	4a04      	ldr	r2, [pc, #16]	; (72c8 <z_clock_set_timeout+0x50>)
    72b8:	4293      	cmp	r3, r2
    72ba:	bf94      	ite	ls
    72bc:	18c9      	addls	r1, r1, r3
    72be:	1889      	addhi	r1, r1, r2
    72c0:	f7ff bf42 	b.w	7148 <set_absolute_alarm>
	ticks = CLAMP(ticks - 1, 0, (int32_t)MAX_TICKS);
    72c4:	2300      	movs	r3, #0
    72c6:	e7e3      	b.n	7290 <z_clock_set_timeout+0x18>
    72c8:	007fffff 	.word	0x007fffff
    72cc:	40011000 	.word	0x40011000
    72d0:	2000d664 	.word	0x2000d664
    72d4:	2000d658 	.word	0x2000d658
    72d8:	00007131 	.word	0x00007131

000072dc <z_clock_elapsed>:
	__asm__ volatile(
    72dc:	f04f 0220 	mov.w	r2, #32
    72e0:	f3ef 8311 	mrs	r3, BASEPRI
    72e4:	f382 8811 	msr	BASEPRI, r2
    72e8:	f3bf 8f6f 	isb	sy
    72ec:	4a06      	ldr	r2, [pc, #24]	; (7308 <z_clock_elapsed+0x2c>)
    72ee:	f8d2 0504 	ldr.w	r0, [r2, #1284]	; 0x504
	if (!IS_ENABLED(CONFIG_TICKLESS_KERNEL)) {
		return 0;
	}

	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) / CYC_PER_TICK;
    72f2:	4a06      	ldr	r2, [pc, #24]	; (730c <z_clock_elapsed+0x30>)
	return (a - b) & COUNTER_MAX;
    72f4:	6812      	ldr	r2, [r2, #0]
    72f6:	1a80      	subs	r0, r0, r2
    72f8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	__asm__ volatile(
    72fc:	f383 8811 	msr	BASEPRI, r3
    7300:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&lock, key);
	return ret;
}
    7304:	4770      	bx	lr
    7306:	bf00      	nop
    7308:	40011000 	.word	0x40011000
    730c:	2000d664 	.word	0x2000d664

00007310 <z_timer_cycle_get_32>:
	__asm__ volatile(
    7310:	f04f 0320 	mov.w	r3, #32
    7314:	f3ef 8211 	mrs	r2, BASEPRI
    7318:	f383 8811 	msr	BASEPRI, r3
    731c:	f3bf 8f6f 	isb	sy

uint32_t z_timer_cycle_get_32(void)
{
	k_spinlock_key_t key = k_spin_lock(&lock);
	uint32_t ret = counter_sub(counter(), last_count) + last_count;
    7320:	4906      	ldr	r1, [pc, #24]	; (733c <z_timer_cycle_get_32+0x2c>)
    7322:	4b07      	ldr	r3, [pc, #28]	; (7340 <z_timer_cycle_get_32+0x30>)
    7324:	6808      	ldr	r0, [r1, #0]
    7326:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	__asm__ volatile(
    732a:	f382 8811 	msr	BASEPRI, r2
    732e:	f3bf 8f6f 	isb	sy
	return (a - b) & COUNTER_MAX;
    7332:	1a1b      	subs	r3, r3, r0
    7334:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	k_spin_unlock(&lock, key);
	return ret;
}
    7338:	4418      	add	r0, r3
    733a:	4770      	bx	lr
    733c:	2000d664 	.word	0x2000d664
    7340:	40011000 	.word	0x40011000

00007344 <_DoInit>:
*
*/
#define INIT()  do {                                            \
                  if (_SEGGER_RTT.acID[0] == '\0') { _DoInit(); }  \
                } while (0)
static void _DoInit(void) {
    7344:	b510      	push	{r4, lr}
  SEGGER_RTT_CB* p;
  //
  // Initialize control block
  //
  p = &_SEGGER_RTT;
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    7346:	4c11      	ldr	r4, [pc, #68]	; (738c <_DoInit+0x48>)
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
  //
  // Initialize up buffer 0
  //
  p->aUp[0].sName         = "Terminal";
    7348:	4a11      	ldr	r2, [pc, #68]	; (7390 <_DoInit+0x4c>)
    734a:	61a2      	str	r2, [r4, #24]
  p->MaxNumUpBuffers    = SEGGER_RTT_MAX_NUM_UP_BUFFERS;
    734c:	2303      	movs	r3, #3
  p->MaxNumDownBuffers  = SEGGER_RTT_MAX_NUM_DOWN_BUFFERS;
    734e:	e9c4 3304 	strd	r3, r3, [r4, #16]
  p->aUp[0].pBuffer       = _acUpBuffer;
    7352:	4b10      	ldr	r3, [pc, #64]	; (7394 <_DoInit+0x50>)
    7354:	61e3      	str	r3, [r4, #28]
  p->aUp[0].WrOff         = 0u;
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
  //
  // Initialize down buffer 0
  //
  p->aDown[0].sName         = "Terminal";
    7356:	6622      	str	r2, [r4, #96]	; 0x60
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    7358:	f44f 6380 	mov.w	r3, #1024	; 0x400
  p->aDown[0].pBuffer       = _acDownBuffer;
    735c:	4a0e      	ldr	r2, [pc, #56]	; (7398 <_DoInit+0x54>)
  //
  // Finish initialization of the control block.
  // Copy Id string in three steps to make sure "SEGGER RTT" is not found
  // in initializer memory (usually flash) by J-Link
  //
  strcpy(&p->acID[7], "RTT");
    735e:	490f      	ldr	r1, [pc, #60]	; (739c <_DoInit+0x58>)
  p->aUp[0].SizeOfBuffer  = sizeof(_acUpBuffer);
    7360:	6223      	str	r3, [r4, #32]
  p->aDown[0].pBuffer       = _acDownBuffer;
    7362:	6662      	str	r2, [r4, #100]	; 0x64
  p->aUp[0].RdOff         = 0u;
    7364:	2300      	movs	r3, #0
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7366:	2210      	movs	r2, #16
  strcpy(&p->acID[7], "RTT");
    7368:	1de0      	adds	r0, r4, #7
  p->aUp[0].RdOff         = 0u;
    736a:	62a3      	str	r3, [r4, #40]	; 0x28
  p->aUp[0].WrOff         = 0u;
    736c:	6263      	str	r3, [r4, #36]	; 0x24
  p->aUp[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    736e:	62e3      	str	r3, [r4, #44]	; 0x2c
  p->aDown[0].RdOff         = 0u;
    7370:	6723      	str	r3, [r4, #112]	; 0x70
  p->aDown[0].WrOff         = 0u;
    7372:	66e3      	str	r3, [r4, #108]	; 0x6c
  p->aDown[0].Flags         = SEGGER_RTT_MODE_DEFAULT;
    7374:	6763      	str	r3, [r4, #116]	; 0x74
  p->aDown[0].SizeOfBuffer  = sizeof(_acDownBuffer);
    7376:	66a2      	str	r2, [r4, #104]	; 0x68
  strcpy(&p->acID[7], "RTT");
    7378:	f01d f81c 	bl	243b4 <strcpy>
  strcpy(&p->acID[0], "SEGGER");
    737c:	4908      	ldr	r1, [pc, #32]	; (73a0 <_DoInit+0x5c>)
    737e:	4620      	mov	r0, r4
    7380:	f01d f818 	bl	243b4 <strcpy>
  p->acID[6] = ' ';
    7384:	2320      	movs	r3, #32
    7386:	71a3      	strb	r3, [r4, #6]
}
    7388:	bd10      	pop	{r4, pc}
    738a:	bf00      	nop
    738c:	2000d668 	.word	0x2000d668
    7390:	0002b7db 	.word	0x0002b7db
    7394:	2000edb3 	.word	0x2000edb3
    7398:	2000eda3 	.word	0x2000eda3
    739c:	0002b7e4 	.word	0x0002b7e4
    73a0:	0002b7e8 	.word	0x0002b7e8

000073a4 <SEGGER_RTT_WriteSkipNoLock>:
*    (2) For performance reasons this function does not call Init()
*        and may only be called after RTT has been initialized.
*        Either by calling SEGGER_RTT_Init() or calling another RTT API function first.
*/
#if (RTT_USE_ASM == 0)
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    73a4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  //
  // 1) is the most common case for large buffers and assuming that J-Link reads the data fast enough
  //
  pData = (const char *)pBuffer;
  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  RdOff = pRing->RdOff;
    73a8:	4f23      	ldr	r7, [pc, #140]	; (7438 <SEGGER_RTT_WriteSkipNoLock+0x94>)
    73aa:	f04f 0b18 	mov.w	fp, #24
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    73ae:	4614      	mov	r4, r2
  RdOff = pRing->RdOff;
    73b0:	fb0b 7200 	mla	r2, fp, r0, r7
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    73b4:	4606      	mov	r6, r0
  RdOff = pRing->RdOff;
    73b6:	6a93      	ldr	r3, [r2, #40]	; 0x28
  WrOff = pRing->WrOff;
    73b8:	6a55      	ldr	r5, [r2, #36]	; 0x24
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    73ba:	42ab      	cmp	r3, r5
unsigned SEGGER_RTT_WriteSkipNoLock(unsigned BufferIndex, const void* pBuffer, unsigned NumBytes) {
    73bc:	4688      	mov	r8, r1
  if (RdOff <= WrOff) {                                 // Case 1), 2) or 3)
    73be:	d834      	bhi.n	742a <SEGGER_RTT_WriteSkipNoLock+0x86>
    Avail = pRing->SizeOfBuffer - WrOff - 1u;           // Space until wrap-around (assume 1 byte not usable for case that RdOff == 0)
    73c0:	f8d2 a020 	ldr.w	sl, [r2, #32]
    73c4:	ebaa 0905 	sub.w	r9, sl, r5
    73c8:	f109 32ff 	add.w	r2, r9, #4294967295
    if (Avail >= NumBytes) {                            // Case 1)?
    73cc:	4294      	cmp	r4, r2
    73ce:	d811      	bhi.n	73f4 <SEGGER_RTT_WriteSkipNoLock+0x50>
CopyStraight:
      memcpy(pRing->pBuffer + WrOff, pData, NumBytes);
    73d0:	f04f 0918 	mov.w	r9, #24
    73d4:	fb06 9309 	mla	r3, r6, r9, r9
    73d8:	443b      	add	r3, r7
    73da:	4622      	mov	r2, r4
    73dc:	6858      	ldr	r0, [r3, #4]
    73de:	4641      	mov	r1, r8
    73e0:	4428      	add	r0, r5
    73e2:	f01d f841 	bl	24468 <memcpy>
      pRing->WrOff = WrOff + NumBytes;
    73e6:	fb09 7606 	mla	r6, r9, r6, r7
    73ea:	442c      	add	r4, r5
      // Therefore, check if 2nd memcpy is necessary at all
      //
      if (NumBytes) {
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
      }
      pRing->WrOff = NumBytes;
    73ec:	6274      	str	r4, [r6, #36]	; 0x24
      return 1;
    73ee:	2001      	movs	r0, #1
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
      goto CopyStraight;
    }
  }
  return 0;     // No space in buffer
}
    73f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    Avail += RdOff;                                     // Space incl. wrap-around
    73f4:	4413      	add	r3, r2
    if (Avail >= NumBytes) {                            // Case 2? => If not, we have case 3) (does not fit)
    73f6:	429c      	cmp	r4, r3
    73f8:	d81b      	bhi.n	7432 <SEGGER_RTT_WriteSkipNoLock+0x8e>
      memcpy(pRing->pBuffer + WrOff, pData, Rem);       // Copy 1st chunk
    73fa:	fb00 bb0b 	mla	fp, r0, fp, fp
    73fe:	44bb      	add	fp, r7
    7400:	464a      	mov	r2, r9
    7402:	f8db 0004 	ldr.w	r0, [fp, #4]
    7406:	442c      	add	r4, r5
    7408:	4428      	add	r0, r5
    740a:	f01d f82d 	bl	24468 <memcpy>
      if (NumBytes) {
    740e:	ebb4 040a 	subs.w	r4, r4, sl
    7412:	d006      	beq.n	7422 <SEGGER_RTT_WriteSkipNoLock+0x7e>
        memcpy(pRing->pBuffer, pData + Rem, NumBytes);
    7414:	f8db 0004 	ldr.w	r0, [fp, #4]
    7418:	4622      	mov	r2, r4
    741a:	eb08 0109 	add.w	r1, r8, r9
    741e:	f01d f823 	bl	24468 <memcpy>
      pRing->WrOff = NumBytes;
    7422:	2018      	movs	r0, #24
    7424:	fb00 7606 	mla	r6, r0, r6, r7
    7428:	e7e0      	b.n	73ec <SEGGER_RTT_WriteSkipNoLock+0x48>
    Avail = RdOff - WrOff - 1u;
    742a:	3b01      	subs	r3, #1
    742c:	1b5b      	subs	r3, r3, r5
    if (Avail >= NumBytes) {                           // Case 4)? => If not, we have case 5) (does not fit)
    742e:	42a3      	cmp	r3, r4
    7430:	d2ce      	bcs.n	73d0 <SEGGER_RTT_WriteSkipNoLock+0x2c>
  return 0;     // No space in buffer
    7432:	2000      	movs	r0, #0
    7434:	e7dc      	b.n	73f0 <SEGGER_RTT_WriteSkipNoLock+0x4c>
    7436:	bf00      	nop
    7438:	2000d668 	.word	0x2000d668

0000743c <SEGGER_RTT_HasDataUp>:
unsigned SEGGER_RTT_HasDataUp(unsigned BufferIndex) {
  SEGGER_RTT_BUFFER_UP* pRing;
  unsigned                v;

  pRing = &_SEGGER_RTT.aUp[BufferIndex];
  v = pRing->RdOff;
    743c:	4b03      	ldr	r3, [pc, #12]	; (744c <SEGGER_RTT_HasDataUp+0x10>)
    743e:	2218      	movs	r2, #24
    7440:	fb02 3300 	mla	r3, r2, r0, r3
    7444:	6a9a      	ldr	r2, [r3, #40]	; 0x28
  return pRing->WrOff - v;
    7446:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    7448:	1a80      	subs	r0, r0, r2
    744a:	4770      	bx	lr
    744c:	2000d668 	.word	0x2000d668

00007450 <uECC_get_rng>:
}

uECC_RNG_Function uECC_get_rng(void)
{
	return g_rng_function;
}
    7450:	4b01      	ldr	r3, [pc, #4]	; (7458 <uECC_get_rng+0x8>)
    7452:	6818      	ldr	r0, [r3, #0]
    7454:	4770      	bx	lr
    7456:	bf00      	nop
    7458:	200002cc 	.word	0x200002cc

0000745c <vli_mmod_fast_secp256r1>:
{
	return &curve_secp256r1;
}

void vli_mmod_fast_secp256r1(unsigned int *result, unsigned int*product)
{
    745c:	b5f0      	push	{r4, r5, r6, r7, lr}
	unsigned int tmp[NUM_ECC_WORDS];
	int carry;

	/* t */
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    745e:	2208      	movs	r2, #8
{
    7460:	b089      	sub	sp, #36	; 0x24
	uECC_vli_set(result, product, NUM_ECC_WORDS);
    7462:	f01b ffc9 	bl	233f8 <uECC_vli_set>

	/* s1 */
	tmp[0] = tmp[1] = tmp[2] = 0;
	tmp[3] = product[11];
    7466:	6acb      	ldr	r3, [r1, #44]	; 0x2c
    7468:	9303      	str	r3, [sp, #12]
	tmp[4] = product[12];
    746a:	6b0b      	ldr	r3, [r1, #48]	; 0x30
    746c:	9304      	str	r3, [sp, #16]
	tmp[5] = product[13];
    746e:	6b4b      	ldr	r3, [r1, #52]	; 0x34
    7470:	9305      	str	r3, [sp, #20]
	tmp[6] = product[14];
    7472:	6b8b      	ldr	r3, [r1, #56]	; 0x38
    7474:	9306      	str	r3, [sp, #24]
	tmp[7] = product[15];
    7476:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
    7478:	9307      	str	r3, [sp, #28]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    747a:	4613      	mov	r3, r2
    747c:	466a      	mov	r2, sp
{
    747e:	460c      	mov	r4, r1
    7480:	4606      	mov	r6, r0
	tmp[0] = tmp[1] = tmp[2] = 0;
    7482:	2700      	movs	r7, #0
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7484:	4611      	mov	r1, r2
    7486:	4610      	mov	r0, r2
	tmp[0] = tmp[1] = tmp[2] = 0;
    7488:	e9cd 7701 	strd	r7, r7, [sp, #4]
    748c:	9700      	str	r7, [sp, #0]
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    748e:	f01b fec0 	bl	23212 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7492:	4631      	mov	r1, r6
	carry = uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    7494:	4605      	mov	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    7496:	4630      	mov	r0, r6
    7498:	f01b febb 	bl	23212 <uECC_vli_add>

	/* s2 */
	tmp[3] = product[12];
    749c:	6b21      	ldr	r1, [r4, #48]	; 0x30
    749e:	9103      	str	r1, [sp, #12]
	tmp[4] = product[13];
    74a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
    74a2:	9104      	str	r1, [sp, #16]
	tmp[5] = product[14];
    74a4:	6ba1      	ldr	r1, [r4, #56]	; 0x38
    74a6:	9105      	str	r1, [sp, #20]
	tmp[6] = product[15];
    74a8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    74aa:	4405      	add	r5, r0
	tmp[7] = 0;
    74ac:	e9cd 1706 	strd	r1, r7, [sp, #24]
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    74b0:	4610      	mov	r0, r2
    74b2:	4611      	mov	r1, r2
    74b4:	f01b fead 	bl	23212 <uECC_vli_add>
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    74b8:	4631      	mov	r1, r6
	carry += uECC_vli_add(tmp, tmp, tmp, NUM_ECC_WORDS);
    74ba:	4405      	add	r5, r0
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    74bc:	4630      	mov	r0, r6
    74be:	f01b fea8 	bl	23212 <uECC_vli_add>
    74c2:	4405      	add	r5, r0

	/* s3 */
	tmp[0] = product[8];
    74c4:	6a20      	ldr	r0, [r4, #32]
    74c6:	9000      	str	r0, [sp, #0]
	tmp[1] = product[9];
    74c8:	6a60      	ldr	r0, [r4, #36]	; 0x24
    74ca:	9001      	str	r0, [sp, #4]
	tmp[2] = product[10];
    74cc:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    74ce:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[14];
    74d0:	6ba0      	ldr	r0, [r4, #56]	; 0x38
    74d2:	9006      	str	r0, [sp, #24]
	tmp[7] = product[15];
    74d4:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    74d6:	9007      	str	r0, [sp, #28]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    74d8:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    74da:	e9cd 7704 	strd	r7, r7, [sp, #16]
    74de:	9703      	str	r7, [sp, #12]
  	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    74e0:	f01b fe97 	bl	23212 <uECC_vli_add>
    74e4:	4405      	add	r5, r0

	/* s4 */
	tmp[0] = product[9];
    74e6:	6a60      	ldr	r0, [r4, #36]	; 0x24
    74e8:	9000      	str	r0, [sp, #0]
	tmp[1] = product[10];
    74ea:	6aa0      	ldr	r0, [r4, #40]	; 0x28
	tmp[2] = product[11];
	tmp[3] = product[13];
	tmp[4] = product[14];
    74ec:	f8d4 c038 	ldr.w	ip, [r4, #56]	; 0x38
	tmp[1] = product[10];
    74f0:	9001      	str	r0, [sp, #4]
	tmp[2] = product[11];
    74f2:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    74f4:	9002      	str	r0, [sp, #8]
	tmp[4] = product[14];
    74f6:	f8cd c010 	str.w	ip, [sp, #16]
	tmp[3] = product[13];
    74fa:	6b60      	ldr	r0, [r4, #52]	; 0x34
	tmp[5] = product[15];
    74fc:	f8d4 c03c 	ldr.w	ip, [r4, #60]	; 0x3c
	tmp[3] = product[13];
    7500:	9003      	str	r0, [sp, #12]
	tmp[6] = product[13];
    7502:	e9cd c005 	strd	ip, r0, [sp, #20]
	tmp[7] = product[8];
    7506:	6a20      	ldr	r0, [r4, #32]
    7508:	9007      	str	r0, [sp, #28]
	carry += uECC_vli_add(result, result, tmp, NUM_ECC_WORDS);
    750a:	4630      	mov	r0, r6
    750c:	f01b fe81 	bl	23212 <uECC_vli_add>
    7510:	4405      	add	r5, r0

	/* d1 */
	tmp[0] = product[11];
    7512:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
    7514:	9000      	str	r0, [sp, #0]
	tmp[1] = product[12];
    7516:	6b20      	ldr	r0, [r4, #48]	; 0x30
    7518:	9001      	str	r0, [sp, #4]
	tmp[2] = product[13];
    751a:	6b60      	ldr	r0, [r4, #52]	; 0x34
    751c:	9002      	str	r0, [sp, #8]
	tmp[3] = tmp[4] = tmp[5] = 0;
	tmp[6] = product[8];
    751e:	6a20      	ldr	r0, [r4, #32]
    7520:	9006      	str	r0, [sp, #24]
	tmp[7] = product[10];
    7522:	6aa0      	ldr	r0, [r4, #40]	; 0x28
    7524:	9007      	str	r0, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7526:	4630      	mov	r0, r6
	tmp[3] = tmp[4] = tmp[5] = 0;
    7528:	e9cd 7704 	strd	r7, r7, [sp, #16]
    752c:	9703      	str	r7, [sp, #12]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    752e:	f01b ff99 	bl	23464 <uECC_vli_sub>

	/* d2 */
	tmp[0] = product[12];
    7532:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7534:	9300      	str	r3, [sp, #0]
	tmp[1] = product[13];
    7536:	6b63      	ldr	r3, [r4, #52]	; 0x34
    7538:	9301      	str	r3, [sp, #4]
	tmp[2] = product[14];
    753a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    753c:	9302      	str	r3, [sp, #8]
	tmp[3] = product[15];
    753e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7540:	9303      	str	r3, [sp, #12]
	tmp[4] = tmp[5] = 0;
	tmp[6] = product[9];
    7542:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7544:	9306      	str	r3, [sp, #24]
	tmp[7] = product[11];
    7546:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
    7548:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    754a:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    754c:	2308      	movs	r3, #8
    754e:	4630      	mov	r0, r6
	tmp[4] = tmp[5] = 0;
    7550:	e9cd 7704 	strd	r7, r7, [sp, #16]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7554:	f01b ff86 	bl	23464 <uECC_vli_sub>

	/* d3 */
	tmp[0] = product[13];
    7558:	6b63      	ldr	r3, [r4, #52]	; 0x34
    755a:	9300      	str	r3, [sp, #0]
	tmp[1] = product[14];
    755c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    755e:	9301      	str	r3, [sp, #4]
	tmp[2] = product[15];
    7560:	6be3      	ldr	r3, [r4, #60]	; 0x3c
    7562:	9302      	str	r3, [sp, #8]
	tmp[3] = product[8];
    7564:	6a23      	ldr	r3, [r4, #32]
    7566:	9303      	str	r3, [sp, #12]
	tmp[4] = product[9];
    7568:	6a63      	ldr	r3, [r4, #36]	; 0x24
    756a:	9304      	str	r3, [sp, #16]
	tmp[5] = product[10];
    756c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
	tmp[6] = 0;
    756e:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[12];
    7572:	6b23      	ldr	r3, [r4, #48]	; 0x30
    7574:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7576:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    7578:	2308      	movs	r3, #8
    757a:	4630      	mov	r0, r6
    757c:	f01b ff72 	bl	23464 <uECC_vli_sub>

	/* d4 */
	tmp[0] = product[14];
    7580:	6ba3      	ldr	r3, [r4, #56]	; 0x38
    7582:	9300      	str	r3, [sp, #0]
	tmp[1] = product[15];
    7584:	6be3      	ldr	r3, [r4, #60]	; 0x3c
	tmp[2] = 0;
    7586:	e9cd 3701 	strd	r3, r7, [sp, #4]
	tmp[3] = product[9];
    758a:	6a63      	ldr	r3, [r4, #36]	; 0x24
    758c:	9303      	str	r3, [sp, #12]
	tmp[4] = product[10];
    758e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7590:	9304      	str	r3, [sp, #16]
	tmp[5] = product[11];
    7592:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	tmp[6] = 0;
    7594:	e9cd 3705 	strd	r3, r7, [sp, #20]
	tmp[7] = product[13];
    7598:	6b63      	ldr	r3, [r4, #52]	; 0x34
    759a:	9307      	str	r3, [sp, #28]
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    759c:	1a2d      	subs	r5, r5, r0
	carry -= uECC_vli_sub(result, result, tmp, NUM_ECC_WORDS);
    759e:	2308      	movs	r3, #8
    75a0:	4630      	mov	r0, r6
    75a2:	f01b ff5f 	bl	23464 <uECC_vli_sub>

	if (carry < 0) {
    75a6:	1a2d      	subs	r5, r5, r0
    75a8:	d410      	bmi.n	75cc <vli_mmod_fast_secp256r1+0x170>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
		}
		while (carry < 0);
	} else  {
		while (carry || 
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    75aa:	4c0d      	ldr	r4, [pc, #52]	; (75e0 <vli_mmod_fast_secp256r1+0x184>)
		while (carry || 
    75ac:	b935      	cbnz	r5, 75bc <vli_mmod_fast_secp256r1+0x160>
		       uECC_vli_cmp_unsafe(curve_secp256r1.p, result, NUM_ECC_WORDS) != 1) {
    75ae:	2208      	movs	r2, #8
    75b0:	4631      	mov	r1, r6
    75b2:	4620      	mov	r0, r4
    75b4:	f01b ff2c 	bl	23410 <uECC_vli_cmp_unsafe>
		while (carry || 
    75b8:	2801      	cmp	r0, #1
    75ba:	d00f      	beq.n	75dc <vli_mmod_fast_secp256r1+0x180>
			carry -= uECC_vli_sub(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    75bc:	2308      	movs	r3, #8
    75be:	4622      	mov	r2, r4
    75c0:	4631      	mov	r1, r6
    75c2:	4630      	mov	r0, r6
    75c4:	f01b ff4e 	bl	23464 <uECC_vli_sub>
    75c8:	1a2d      	subs	r5, r5, r0
    75ca:	e7ef      	b.n	75ac <vli_mmod_fast_secp256r1+0x150>
			carry += uECC_vli_add(result, result, curve_secp256r1.p, NUM_ECC_WORDS);
    75cc:	4a04      	ldr	r2, [pc, #16]	; (75e0 <vli_mmod_fast_secp256r1+0x184>)
    75ce:	2308      	movs	r3, #8
    75d0:	4631      	mov	r1, r6
    75d2:	4630      	mov	r0, r6
    75d4:	f01b fe1d 	bl	23212 <uECC_vli_add>
		while (carry < 0);
    75d8:	182d      	adds	r5, r5, r0
    75da:	d4f8      	bmi.n	75ce <vli_mmod_fast_secp256r1+0x172>
		}
	}
}
    75dc:	b009      	add	sp, #36	; 0x24
    75de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    75e0:	00027e68 	.word	0x00027e68

000075e4 <sub_bytes>:
static inline void sub_bytes(uint8_t *s)
{
	unsigned int i;

	for (i = 0; i < (Nb * Nk); ++i) {
		s[i] = sbox[s[i]];
    75e4:	4904      	ldr	r1, [pc, #16]	; (75f8 <sub_bytes+0x14>)
    75e6:	1e43      	subs	r3, r0, #1
    75e8:	300f      	adds	r0, #15
    75ea:	f813 2f01 	ldrb.w	r2, [r3, #1]!
    75ee:	5c8a      	ldrb	r2, [r1, r2]
    75f0:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (Nb * Nk); ++i) {
    75f2:	4283      	cmp	r3, r0
    75f4:	d1f9      	bne.n	75ea <sub_bytes+0x6>
	}
}
    75f6:	4770      	bx	lr
    75f8:	0002b7ef 	.word	0x0002b7ef

000075fc <tc_aes128_set_encrypt_key>:
{
    75fc:	b5f0      	push	{r4, r5, r6, r7, lr}
	const unsigned int rconst[11] = {
    75fe:	4e26      	ldr	r6, [pc, #152]	; (7698 <tc_aes128_set_encrypt_key+0x9c>)
{
    7600:	4607      	mov	r7, r0
    7602:	460c      	mov	r4, r1
	const unsigned int rconst[11] = {
    7604:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
{
    7606:	b08d      	sub	sp, #52	; 0x34
	const unsigned int rconst[11] = {
    7608:	ad01      	add	r5, sp, #4
    760a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    760c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    760e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    7610:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    7614:	e885 0007 	stmia.w	r5, {r0, r1, r2}
	if (s == (TCAesKeySched_t) 0) {
    7618:	4638      	mov	r0, r7
    761a:	2f00      	cmp	r7, #0
    761c:	d038      	beq.n	7690 <tc_aes128_set_encrypt_key+0x94>
	} else if (k == (const uint8_t *) 0) {
    761e:	2c00      	cmp	r4, #0
    7620:	d038      	beq.n	7694 <tc_aes128_set_encrypt_key+0x98>
    7622:	1f38      	subs	r0, r7, #4
    7624:	4621      	mov	r1, r4
    7626:	4602      	mov	r2, r0
    7628:	3410      	adds	r4, #16
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    762a:	784b      	ldrb	r3, [r1, #1]
    762c:	780d      	ldrb	r5, [r1, #0]
    762e:	041b      	lsls	r3, r3, #16
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    7630:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
    7634:	78cd      	ldrb	r5, [r1, #3]
    7636:	432b      	orrs	r3, r5
    7638:	788d      	ldrb	r5, [r1, #2]
	for (i = 0; i < Nk; ++i) {
    763a:	3104      	adds	r1, #4
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    763c:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
	for (i = 0; i < Nk; ++i) {
    7640:	428c      	cmp	r4, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    7642:	f842 3f04 	str.w	r3, [r2, #4]!
	for (i = 0; i < Nk; ++i) {
    7646:	d1f0      	bne.n	762a <tc_aes128_set_encrypt_key+0x2e>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    7648:	4c14      	ldr	r4, [pc, #80]	; (769c <tc_aes128_set_encrypt_key+0xa0>)
    764a:	2104      	movs	r1, #4
		if ((i % Nk) == 0) {
    764c:	078a      	lsls	r2, r1, #30
		t = s->words[i-1];
    764e:	6903      	ldr	r3, [r0, #16]
		if ((i % Nk) == 0) {
    7650:	d116      	bne.n	7680 <tc_aes128_set_encrypt_key+0x84>
			t = subword(rotword(t)) ^ rconst[i/Nk];
    7652:	f3c3 4207 	ubfx	r2, r3, #16, #8
    7656:	5ca5      	ldrb	r5, [r4, r2]
    7658:	0e1a      	lsrs	r2, r3, #24
    765a:	5ca2      	ldrb	r2, [r4, r2]
    765c:	ea42 6205 	orr.w	r2, r2, r5, lsl #24
    7660:	f3c3 2507 	ubfx	r5, r3, #8, #8
    7664:	b2db      	uxtb	r3, r3
    7666:	5d65      	ldrb	r5, [r4, r5]
    7668:	5ce3      	ldrb	r3, [r4, r3]
    766a:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
    766e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    7672:	ad0c      	add	r5, sp, #48	; 0x30
    7674:	f021 0303 	bic.w	r3, r1, #3
    7678:	442b      	add	r3, r5
    767a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    767e:	4053      	eors	r3, r2
		s->words[i] = s->words[i-Nk] ^ t;
    7680:	f850 2f04 	ldr.w	r2, [r0, #4]!
	for (; i < (Nb * (Nr + 1)); ++i) {
    7684:	3101      	adds	r1, #1
		s->words[i] = s->words[i-Nk] ^ t;
    7686:	4053      	eors	r3, r2
	for (; i < (Nb * (Nr + 1)); ++i) {
    7688:	292c      	cmp	r1, #44	; 0x2c
		s->words[i] = s->words[i-Nk] ^ t;
    768a:	6103      	str	r3, [r0, #16]
	for (; i < (Nb * (Nr + 1)); ++i) {
    768c:	d1de      	bne.n	764c <tc_aes128_set_encrypt_key+0x50>
	return TC_CRYPTO_SUCCESS;
    768e:	2001      	movs	r0, #1
}
    7690:	b00d      	add	sp, #52	; 0x34
    7692:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    7694:	4620      	mov	r0, r4
    7696:	e7fb      	b.n	7690 <tc_aes128_set_encrypt_key+0x94>
    7698:	00027a64 	.word	0x00027a64
    769c:	0002b7ef 	.word	0x0002b7ef

000076a0 <arch_swap>:
 * as BASEPRI is not available.
 */
int arch_swap(unsigned int key)
{
	/* store off key and return value */
	_current->arch.basepri = key;
    76a0:	4a0a      	ldr	r2, [pc, #40]	; (76cc <arch_swap+0x2c>)
	_current->arch.swap_return_value = _k_neg_eagain;
    76a2:	490b      	ldr	r1, [pc, #44]	; (76d0 <arch_swap+0x30>)
	_current->arch.basepri = key;
    76a4:	6893      	ldr	r3, [r2, #8]
	_current->arch.swap_return_value = _k_neg_eagain;
    76a6:	6809      	ldr	r1, [r1, #0]
    76a8:	f8c3 1080 	str.w	r1, [r3, #128]	; 0x80

#if defined(CONFIG_CPU_CORTEX_M)
	/* set pending bit to make sure we will take a PendSV exception */
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    76ac:	4909      	ldr	r1, [pc, #36]	; (76d4 <arch_swap+0x34>)
	_current->arch.basepri = key;
    76ae:	67d8      	str	r0, [r3, #124]	; 0x7c
	SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    76b0:	684b      	ldr	r3, [r1, #4]
    76b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    76b6:	604b      	str	r3, [r1, #4]
    76b8:	2300      	movs	r3, #0
    76ba:	f383 8811 	msr	BASEPRI, r3
    76be:	f3bf 8f6f 	isb	sy
#endif

	/* Context switch is performed here. Returning implies the
	 * thread has been context-switched-in again.
	 */
	return _current->arch.swap_return_value;
    76c2:	6893      	ldr	r3, [r2, #8]
}
    76c4:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
    76c8:	4770      	bx	lr
    76ca:	bf00      	nop
    76cc:	2000ed08 	.word	0x2000ed08
    76d0:	000292cc 	.word	0x000292cc
    76d4:	e000ed00 	.word	0xe000ed00

000076d8 <z_arm_pendsv>:
    pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_TRACING */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
    76d8:	4912      	ldr	r1, [pc, #72]	; (7724 <z_arm_pendsv+0x4c>)
    ldr r2, [r1, #_kernel_offset_to_current]
    76da:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
    76dc:	f04f 0038 	mov.w	r0, #56	; 0x38
    add r0, r2
    76e0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
#if defined(CONFIG_CPU_CORTEX_M)
    mrs ip, PSP
    76e2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    stmia r0, {v1-v8, ip}
    76e6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}

    /* Protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    76ea:	2020      	movs	r0, #32
    msr BASEPRI, r0
    76ec:	f380 8811 	msr	BASEPRI, r0
    isb /* Make the effect of disabling interrupts be realized immediately */
    76f0:	f3bf 8f6f 	isb	sy
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
#if defined(CONFIG_CPU_CORTEX_M)
    ldr v4, =_SCS_ICSR
    76f4:	4f0c      	ldr	r7, [pc, #48]	; (7728 <z_arm_pendsv+0x50>)
    ldr v3, =_SCS_ICSR_UNPENDSV
    76f6:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000
#endif

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, #_kernel_offset_to_ready_q_cache]
    76fa:	6a8a      	ldr	r2, [r1, #40]	; 0x28

    str r2, [r1, #_kernel_offset_to_current]
    76fc:	608a      	str	r2, [r1, #8]
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
#if defined(CONFIG_CPU_CORTEX_M)
    str v3, [v4, #0]
    76fe:	603e      	str	r6, [r7, #0]

    ldr r0, [r4]
    movs.n r3, #0
    str r3, [r4]
#else
    ldr r0, [r2, #_thread_offset_to_basepri]
    7700:	6fd0      	ldr	r0, [r2, #124]	; 0x7c
    movs r3, #0
    7702:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
    7704:	67d3      	str	r3, [r2, #124]	; 0x7c
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
    7706:	f380 8811 	msr	BASEPRI, r0
    isb
#endif

#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
    /* Re-program dynamic memory map */
    push {r2,lr}
    770a:	b504      	push	{r2, lr}
    mov r0, r2 /* _current thread */
    770c:	4610      	mov	r0, r2
    bl z_arm_configure_dynamic_mpu_regions
    770e:	f000 fbe5 	bl	7edc <z_arm_configure_dynamic_mpu_regions>
    pop {r2,lr}
    7712:	e8bd 4004 	ldmia.w	sp!, {r2, lr}
    isb

#endif

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
    7716:	f102 0038 	add.w	r0, r2, #56	; 0x38
    ldmia r0, {v1-v8, ip}
    771a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
    msr PSP, ip
    771e:	f38c 8809 	msr	PSP, ip

    /*
     * Cortex-M: return from PendSV exception
     * Cortex-R: return to the caller (z_arm_{exc,int}_exit, or z_arm_svc)
     */
    bx lr
    7722:	4770      	bx	lr
    ldr r1, =_kernel
    7724:	2000ed08 	.word	0x2000ed08
    ldr v4, =_SCS_ICSR
    7728:	e000ed04 	.word	0xe000ed04

0000772c <z_arm_svc>:
  bne _stack_frame_endif
_stack_frame_msp:
  mrs r0, MSP
_stack_frame_endif:
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    tst lr, #0x4    /* did we come from thread mode ? */
    772c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
    7730:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
    7732:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
    7736:	f3ef 8009 	mrsne	r0, PSP
#endif


    /* Figure out what SVC call number was invoked */

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
    773a:	6981      	ldr	r1, [r0, #24]
     */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    subs r1, r1, #2
    ldrb r1, [r1]
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    ldrb r1, [r1, #-2]
    773c:	f811 1c02 	ldrb.w	r1, [r1, #-2]
#endif
    bne _oops

#endif /* CONFIG_USERSPACE */

    cmp r1, #2
    7740:	2902      	cmp	r1, #2
    beq _oops
    7742:	d0ff      	beq.n	7744 <_oops>

00007744 <_oops>:
    /* exception return is done in z_arm_int_exit() */
    b z_arm_int_exit
#endif

_oops:
    push {r0, lr}
    7744:	b501      	push	{r0, lr}
    bl z_do_kernel_oops
    7746:	f01c fdb6 	bl	242b6 <z_do_kernel_oops>
    /* return from SVC exception is done here */
    pop {r0, pc}
    774a:	bd01      	pop	{r0, pc}

0000774c <arch_irq_enable>:
#define REG_FROM_IRQ(irq) (irq / NUM_IRQS_PER_REG)
#define BIT_FROM_IRQ(irq) (irq % NUM_IRQS_PER_REG)

void arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
    774c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    774e:	2b00      	cmp	r3, #0
    7750:	db08      	blt.n	7764 <arch_irq_enable+0x18>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7752:	2201      	movs	r2, #1
    7754:	f000 001f 	and.w	r0, r0, #31
    7758:	fa02 f000 	lsl.w	r0, r2, r0
    775c:	095b      	lsrs	r3, r3, #5
    775e:	4a02      	ldr	r2, [pc, #8]	; (7768 <arch_irq_enable+0x1c>)
    7760:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
}
    7764:	4770      	bx	lr
    7766:	bf00      	nop
    7768:	e000e100 	.word	0xe000e100

0000776c <arch_irq_disable>:

void arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
    776c:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) >= 0)
    776e:	2b00      	cmp	r3, #0
    7770:	db0d      	blt.n	778e <arch_irq_disable+0x22>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
    7772:	2201      	movs	r2, #1
    7774:	095b      	lsrs	r3, r3, #5
    7776:	f000 001f 	and.w	r0, r0, #31
    777a:	fa02 f000 	lsl.w	r0, r2, r0
    777e:	3320      	adds	r3, #32
    7780:	4a03      	ldr	r2, [pc, #12]	; (7790 <arch_irq_disable+0x24>)
    7782:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
    7786:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    778a:	f3bf 8f6f 	isb	sy
}
    778e:	4770      	bx	lr
    7790:	e000e100 	.word	0xe000e100

00007794 <arch_irq_is_enabled>:

int arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & BIT(BIT_FROM_IRQ(irq));
    7794:	4b05      	ldr	r3, [pc, #20]	; (77ac <arch_irq_is_enabled+0x18>)
    7796:	0942      	lsrs	r2, r0, #5
    7798:	f000 001f 	and.w	r0, r0, #31
    779c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
    77a0:	2301      	movs	r3, #1
    77a2:	fa03 f000 	lsl.w	r0, r3, r0
}
    77a6:	4010      	ands	r0, r2
    77a8:	4770      	bx	lr
    77aa:	bf00      	nop
    77ac:	e000e100 	.word	0xe000e100

000077b0 <z_arm_irq_priority_set>:
	 */
	__ASSERT(prio <= (BIT(NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %lu\n",
		 prio - _IRQ_PRIO_OFFSET,
		 BIT(NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
    77b0:	b243      	sxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
    77b2:	2b00      	cmp	r3, #0
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77b4:	bfa8      	it	ge
    77b6:	f103 4360 	addge.w	r3, r3, #3758096384	; 0xe0000000
	prio += _IRQ_PRIO_OFFSET;
    77ba:	f101 0101 	add.w	r1, r1, #1
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77be:	bfb8      	it	lt
    77c0:	4b06      	ldrlt	r3, [pc, #24]	; (77dc <z_arm_irq_priority_set+0x2c>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77c2:	ea4f 1141 	mov.w	r1, r1, lsl #5
    77c6:	bfac      	ite	ge
    77c8:	f503 4361 	addge.w	r3, r3, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77cc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77d0:	b2c9      	uxtb	r1, r1
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77d2:	bfb4      	ite	lt
    77d4:	5419      	strblt	r1, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
    77d6:	f883 1300 	strbge.w	r1, [r3, #768]	; 0x300
}
    77da:	4770      	bx	lr
    77dc:	e000ed14 	.word	0xe000ed14

000077e0 <_arch_isr_direct_pm>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
}

#ifdef CONFIG_PM
void _arch_isr_direct_pm(void)
{
    77e0:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/aarch32/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
    77e2:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	if (_kernel.idle) {
    77e4:	4b04      	ldr	r3, [pc, #16]	; (77f8 <_arch_isr_direct_pm+0x18>)
    77e6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    77e8:	b118      	cbz	r0, 77f2 <_arch_isr_direct_pm+0x12>
		int32_t idle_val = _kernel.idle;

		_kernel.idle = 0;
    77ea:	2200      	movs	r2, #0
    77ec:	625a      	str	r2, [r3, #36]	; 0x24
		z_pm_save_idle_exit(idle_val);
    77ee:	f018 f845 	bl	1f87c <z_pm_save_idle_exit>

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE) \
	|| defined(CONFIG_ARMV7_R)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	__asm__ volatile("cpsie i" : : : "memory");
    77f2:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

}
    77f4:	bd08      	pop	{r3, pc}
    77f6:	bf00      	nop
    77f8:	2000ed08 	.word	0x2000ed08

000077fc <arch_new_thread>:

#if defined(CONFIG_CPU_CORTEX_M)
	/* force ARM mode by clearing LSB of address */
	iframe->pc &= 0xfffffffe;
#endif
	iframe->a1 = (uint32_t)entry;
    77fc:	f842 3c20 	str.w	r3, [r2, #-32]
	iframe->a2 = (uint32_t)p1;
    7800:	9b00      	ldr	r3, [sp, #0]
    7802:	f842 3c1c 	str.w	r3, [r2, #-28]
	iframe->pc &= 0xfffffffe;
    7806:	490a      	ldr	r1, [pc, #40]	; (7830 <arch_new_thread+0x34>)
	iframe->a3 = (uint32_t)p2;
    7808:	9b01      	ldr	r3, [sp, #4]
    780a:	f842 3c18 	str.w	r3, [r2, #-24]
	iframe->a4 = (uint32_t)p3;
    780e:	9b02      	ldr	r3, [sp, #8]
    7810:	f842 3c14 	str.w	r3, [r2, #-20]
	iframe->pc &= 0xfffffffe;
    7814:	f021 0101 	bic.w	r1, r1, #1

#if defined(CONFIG_CPU_CORTEX_M)
	iframe->xpsr =
    7818:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    781c:	f842 3c04 	str.w	r3, [r2, #-4]
	iframe->pc &= 0xfffffffe;
    7820:	f842 1c08 	str.w	r1, [r2, #-8]
	iframe->xpsr |= T_BIT;
#endif /* CONFIG_COMPILER_ISA_THUMB2 */
#endif /* CONFIG_CPU_CORTEX_M */

	thread->callee_saved.psp = (uint32_t)iframe;
	thread->arch.basepri = 0;
    7824:	2300      	movs	r3, #0
	iframe = Z_STACK_PTR_TO_FRAME(struct __basic_sf, stack_ptr);
    7826:	3a20      	subs	r2, #32
	thread->callee_saved.psp = (uint32_t)iframe;
    7828:	6582      	str	r2, [r0, #88]	; 0x58
	thread->arch.basepri = 0;
    782a:	67c3      	str	r3, [r0, #124]	; 0x7c
#endif
	/*
	 * initial values in all other registers/thread entries are
	 * irrelevant.
	 */
}
    782c:	4770      	bx	lr
    782e:	bf00      	nop
    7830:	00021cf9 	.word	0x00021cf9

00007834 <z_check_thread_stack_fail>:
 *         thread stack corruption, otherwise return 0.
 */
uint32_t z_check_thread_stack_fail(const uint32_t fault_addr, const uint32_t psp)
{
#if defined(CONFIG_MULTITHREADING)
	const struct k_thread *thread = _current;
    7834:	4a09      	ldr	r2, [pc, #36]	; (785c <z_check_thread_stack_fail+0x28>)
{
    7836:	4603      	mov	r3, r0
	const struct k_thread *thread = _current;
    7838:	6890      	ldr	r0, [r2, #8]

	if (!thread) {
    783a:	b170      	cbz	r0, 785a <z_check_thread_stack_fail+0x26>
			return thread->stack_info.start;
		}
	}
#else /* CONFIG_USERSPACE */
#if defined(CONFIG_MULTITHREADING)
	if (IS_MPU_GUARD_VIOLATION(thread->stack_info.start - guard_len,
    783c:	f113 0f16 	cmn.w	r3, #22
    7840:	6ec0      	ldr	r0, [r0, #108]	; 0x6c
    7842:	d005      	beq.n	7850 <z_check_thread_stack_fail+0x1c>
    7844:	f1a0 0220 	sub.w	r2, r0, #32
    7848:	429a      	cmp	r2, r3
    784a:	d805      	bhi.n	7858 <z_check_thread_stack_fail+0x24>
    784c:	4283      	cmp	r3, r0
    784e:	d203      	bcs.n	7858 <z_check_thread_stack_fail+0x24>
		return (uint32_t)Z_THREAD_STACK_BUFFER(z_main_stack);
	}
#endif
#endif /* CONFIG_USERSPACE */

	return 0;
    7850:	4281      	cmp	r1, r0
    7852:	bf28      	it	cs
    7854:	2000      	movcs	r0, #0
    7856:	4770      	bx	lr
    7858:	2000      	movs	r0, #0
}
    785a:	4770      	bx	lr
    785c:	2000ed08 	.word	0x2000ed08

00007860 <arch_switch_to_main_thread>:
#endif
}

void arch_switch_to_main_thread(struct k_thread *main_thread, char *stack_ptr,
				k_thread_entry_t _main)
{
    7860:	b508      	push	{r3, lr}
    7862:	4604      	mov	r4, r0
    7864:	460e      	mov	r6, r1
    7866:	4615      	mov	r5, r2
	z_arm_configure_static_mpu_regions();
    7868:	f000 fb2c 	bl	7ec4 <z_arm_configure_static_mpu_regions>
	z_arm_prepare_switch_to_main();

	_current = main_thread;
    786c:	4b08      	ldr	r3, [pc, #32]	; (7890 <arch_switch_to_main_thread+0x30>)
#if defined(CONFIG_MPU_STACK_GUARD) || defined(CONFIG_USERSPACE)
	/*
	 * If stack protection is enabled, make sure to set it
	 * before jumping to thread entry function
	 */
	z_arm_configure_dynamic_mpu_regions(main_thread);
    786e:	4620      	mov	r0, r4
	_current = main_thread;
    7870:	609c      	str	r4, [r3, #8]
	z_arm_configure_dynamic_mpu_regions(main_thread);
    7872:	f000 fb33 	bl	7edc <z_arm_configure_dynamic_mpu_regions>

	/*
	 * Set PSP to the highest address of the main stack
	 * before enabling interrupts and jumping to main.
	 */
	__asm__ volatile (
    7876:	4628      	mov	r0, r5
    7878:	f386 8809 	msr	PSP, r6
    787c:	2100      	movs	r1, #0
    787e:	b663      	cpsie	if
    7880:	f381 8811 	msr	BASEPRI, r1
    7884:	f3bf 8f6f 	isb	sy
    7888:	2200      	movs	r2, #0
    788a:	2300      	movs	r3, #0
    788c:	f01a fa34 	bl	21cf8 <z_thread_entry>
	:
	: "r" (_main), "r" (stack_ptr)
	: "r0" /* not to be overwritten by msr PSP, %1 */
	);

	CODE_UNREACHABLE;
    7890:	2000ed08 	.word	0x2000ed08

00007894 <z_arm_cpu_idle_init>:
 * void z_arm_cpu_idle_init(void);
 */

SECTION_FUNC(TEXT, z_arm_cpu_idle_init)
#if defined(CONFIG_CPU_CORTEX_M)
	ldr	r1, =_SCB_SCR
    7894:	4901      	ldr	r1, [pc, #4]	; (789c <z_arm_cpu_idle_init+0x8>)
	movs.n	r2, #_SCR_INIT_BITS
    7896:	2210      	movs	r2, #16
	str	r2, [r1]
    7898:	600a      	str	r2, [r1, #0]
#endif
	bx	lr
    789a:	4770      	bx	lr
	ldr	r1, =_SCB_SCR
    789c:	e000ed10 	.word	0xe000ed10

000078a0 <arch_cpu_idle>:
	 * before entering low power state.
	 *
	 * Set PRIMASK before configuring BASEPRI to prevent interruption
	 * before wake-up.
	 */
	cpsid	i
    78a0:	b672      	cpsid	i

	/*
	 * Set wake-up interrupt priority to the lowest and synchronise to
	 * ensure that this is visible to the WFI instruction.
	 */
	eors.n	r0, r0
    78a2:	4040      	eors	r0, r0
	msr	BASEPRI, r0
    78a4:	f380 8811 	msr	BASEPRI, r0
	isb
    78a8:	f3bf 8f6f 	isb	sy

	/*
	 * Wait for all memory transactions to complete before entering low
	 * power state.
	 */
	dsb
    78ac:	f3bf 8f4f 	dsb	sy

	/* Enter low power state */
	wfi
    78b0:	bf30      	wfi

	/*
	 * Clear PRIMASK and flush instruction buffer to immediately service
	 * the wake-up interrupt.
	 */
	cpsie	i
    78b2:	b662      	cpsie	i
	isb
    78b4:	f3bf 8f6f 	isb	sy

	bx	lr
    78b8:	4770      	bx	lr
    78ba:	bf00      	nop

000078bc <arch_cpu_atomic_idle>:

	/*
	 * Lock PRIMASK while sleeping: wfe will still get interrupted by
	 * incoming interrupts but the CPU will not service them right away.
	 */
	cpsid	i
    78bc:	b672      	cpsid	i
	cpsie	i
_irq_disabled:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* r1: zero, for setting BASEPRI (needs a register) */
	eors.n	r1, r1
    78be:	4049      	eors	r1, r1

	/* unlock BASEPRI so wfe gets interrupted by incoming interrupts */
	msr	BASEPRI, r1
    78c0:	f381 8811 	msr	BASEPRI, r1

	wfe
    78c4:	bf20      	wfe

	msr	BASEPRI, r0
    78c6:	f380 8811 	msr	BASEPRI, r0
	cpsie	i
    78ca:	b662      	cpsie	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
	bx	lr
    78cc:	4770      	bx	lr
    78ce:	bf00      	nop

000078d0 <z_arm_fatal_error>:
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
		esf->basic.pc);
}

void z_arm_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
    78d0:	b573      	push	{r0, r1, r4, r5, r6, lr}
    78d2:	4606      	mov	r6, r0

	if (esf != NULL) {
    78d4:	460c      	mov	r4, r1
    78d6:	b301      	cbz	r1, 791a <z_arm_fatal_error+0x4a>
    78d8:	4b13      	ldr	r3, [pc, #76]	; (7928 <z_arm_fatal_error+0x58>)
    78da:	4d14      	ldr	r5, [pc, #80]	; (792c <z_arm_fatal_error+0x5c>)
	LOG_ERR("r0/a1:  0x%08x  r1/a2:  0x%08x  r2/a3:  0x%08x",
    78dc:	4814      	ldr	r0, [pc, #80]	; (7930 <z_arm_fatal_error+0x60>)
    78de:	1aed      	subs	r5, r5, r3
    78e0:	08ed      	lsrs	r5, r5, #3
    78e2:	01ad      	lsls	r5, r5, #6
    78e4:	f045 0501 	orr.w	r5, r5, #1
    78e8:	f8ad 5000 	strh.w	r5, [sp]
    78ec:	e9d1 2301 	ldrd	r2, r3, [r1, #4]
    78f0:	6809      	ldr	r1, [r1, #0]
    78f2:	f01a fde7 	bl	224c4 <log_3>
	LOG_ERR("r3/a4:  0x%08x r12/ip:  0x%08x r14/lr:  0x%08x",
    78f6:	f8ad 5000 	strh.w	r5, [sp]
    78fa:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    78fe:	68e1      	ldr	r1, [r4, #12]
    7900:	480c      	ldr	r0, [pc, #48]	; (7934 <z_arm_fatal_error+0x64>)
    7902:	f01a fddf 	bl	224c4 <log_3>
	LOG_ERR(" xpsr:  0x%08x", esf->basic.xpsr);
    7906:	69e1      	ldr	r1, [r4, #28]
    7908:	480b      	ldr	r0, [pc, #44]	; (7938 <z_arm_fatal_error+0x68>)
    790a:	462a      	mov	r2, r5
    790c:	f01a fdad 	bl	2246a <log_1>
	LOG_ERR("Faulting instruction address (r15/pc): 0x%08x",
    7910:	69a1      	ldr	r1, [r4, #24]
    7912:	480a      	ldr	r0, [pc, #40]	; (793c <z_arm_fatal_error+0x6c>)
    7914:	462a      	mov	r2, r5
    7916:	f01a fda8 	bl	2246a <log_1>
		esf_dump(esf);
	}
	z_fatal_error(reason, esf);
    791a:	4621      	mov	r1, r4
    791c:	4630      	mov	r0, r6
}
    791e:	b002      	add	sp, #8
    7920:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	z_fatal_error(reason, esf);
    7924:	f017 bf4c 	b.w	1f7c0 <z_fatal_error>
    7928:	000278c0 	.word	0x000278c0
    792c:	000279f8 	.word	0x000279f8
    7930:	0002b8ef 	.word	0x0002b8ef
    7934:	0002b91e 	.word	0x0002b91e
    7938:	0002b94d 	.word	0x0002b94d
    793c:	0002b95c 	.word	0x0002b95c

00007940 <z_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(z_SysNmiOnReset)

SECTION_FUNC(TEXT, z_SysNmiOnReset)
    wfi
    7940:	bf30      	wfi
    b z_SysNmiOnReset
    7942:	f7ff bffd 	b.w	7940 <z_SysNmiOnReset>
    7946:	bf00      	nop

00007948 <z_arm_prep_c>:

#define VECTOR_ADDRESS ((uintptr_t)_vector_start)

static inline void relocate_vector_table(void)
{
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    7948:	4a0e      	ldr	r2, [pc, #56]	; (7984 <z_arm_prep_c+0x3c>)
 * This routine prepares for the execution of and runs C code.
 *
 * @return N/A
 */
void z_arm_prep_c(void)
{
    794a:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
    794c:	4b0e      	ldr	r3, [pc, #56]	; (7988 <z_arm_prep_c+0x40>)
    794e:	f022 027f 	bic.w	r2, r2, #127	; 0x7f
    7952:	609a      	str	r2, [r3, #8]
  __ASM volatile ("dsb 0xF":::"memory");
    7954:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7958:	f3bf 8f6f 	isb	sy
	SCB->CPACR &= (~(CPACR_CP10_Msk | CPACR_CP11_Msk));
    795c:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
    7960:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
    7964:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  __ASM volatile ("MRS %0, control" : "=r" (result) );
    7968:	f3ef 8314 	mrs	r3, CONTROL
	__set_CONTROL(__get_CONTROL() & (~(CONTROL_FPCA_Msk)));
    796c:	f023 0304 	bic.w	r3, r3, #4
  __ASM volatile ("MSR control, %0" : : "r" (control) : "memory");
    7970:	f383 8814 	msr	CONTROL, r3
	relocate_vector_table();
#if defined(CONFIG_CPU_HAS_FPU)
	z_arm_floating_point_init();
#endif
	z_bss_zero();
    7974:	f017 ffcc 	bl	1f910 <z_bss_zero>
	z_data_copy();
    7978:	f018 ff1a 	bl	207b0 <z_data_copy>
#if defined(CONFIG_ARMV7_R) && defined(CONFIG_INIT_STACKS)
	z_arm_init_stacks();
#endif
	z_arm_interrupt_init();
    797c:	f000 fa74 	bl	7e68 <z_arm_interrupt_init>
	z_cstart();
    7980:	f017 ffea 	bl	1f958 <z_cstart>
    7984:	00000000 	.word	0x00000000
    7988:	e000ed00 	.word	0xe000ed00

0000798c <_isr_wrapper>:
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

#if defined(CONFIG_CPU_CORTEX_M)
	push {r0,lr}		/* r0, lr are now the first items on the stack */
    798c:	b501      	push	{r0, lr}
	 * Disable interrupts to prevent nesting while exiting idle state. This
	 * is only necessary for the Cortex-M because it is the only ARM
	 * architecture variant that automatically enables interrupts when
	 * entering an ISR.
	 */
	cpsid i  /* PRIMASK = 1 */
    798e:	b672      	cpsid	i
#endif

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
    7990:	4a0b      	ldr	r2, [pc, #44]	; (79c0 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
    7992:	6a50      	ldr	r0, [r2, #36]	; 0x24
	cmp r0, #0
    7994:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	bl z_pm_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	ittt ne
    7996:	bf1e      	ittt	ne
	movne	r1, #0
    7998:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
    799a:	6251      	strne	r1, [r2, #36]	; 0x24
		blne	z_pm_save_idle_exit
    799c:	f017 ff6e 	blne	1f87c <z_pm_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

#if defined(CONFIG_CPU_CORTEX_M)
	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
    79a0:	b662      	cpsie	i
#endif

#endif /* CONFIG_PM */

#if defined(CONFIG_CPU_CORTEX_M)
	mrs r0, IPSR	/* get exception number */
    79a2:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	sub r0, r0, #16	/* get IRQ number */
    79a6:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
    79aa:	ea4f 00c0 	mov.w	r0, r0, lsl #3
	 * interface function.
	 */
	cpsie i
#endif /* !CONFIG_CPU_CORTEX_M */

	ldr r1, =_sw_isr_table
    79ae:	4905      	ldr	r1, [pc, #20]	; (79c4 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
    79b0:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
    79b2:	c909      	ldmia	r1!, {r0, r3}
	blx r3		/* call ISR */
    79b4:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
	pop {r0, r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	pop {r0, lr}
    79b6:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */

	/* Use 'bx' instead of 'b' because 'bx' can jump further, and use
	 * 'bx' instead of 'blx' because exception return is done in
	 * z_arm_int_exit() */
	ldr r1, =z_arm_int_exit
    79ba:	4903      	ldr	r1, [pc, #12]	; (79c8 <_isr_wrapper+0x3c>)
	bx r1
    79bc:	4708      	bx	r1
    79be:	0000      	.short	0x0000
	ldr r2, =_kernel
    79c0:	2000ed08 	.word	0x2000ed08
	ldr r1, =_sw_isr_table
    79c4:	0002767c 	.word	0x0002767c
	ldr r1, =z_arm_int_exit
    79c8:	00007e4d 	.word	0x00007e4d

000079cc <__start>:
#endif /* CONFIG_CPU_CORTEX_M_HAS_SPLIM */

#endif /* CONFIG_INIT_ARCH_HW_AT_BOOT */

#if defined(CONFIG_PLATFORM_SPECIFIC_INIT)
    bl z_platform_init
    79cc:	f01c fdac 	bl	24528 <z_platform_init>

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
    cpsid i
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
    79d0:	2020      	movs	r0, #32
    msr BASEPRI, r0
    79d2:	f380 8811 	msr	BASEPRI, r0

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to z_interrupt_stacks during initialization.
     */
    ldr r0, =z_interrupt_stacks
    79d6:	4808      	ldr	r0, [pc, #32]	; (79f8 <__start+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE + MPU_GUARD_ALIGN_AND_SIZE
    79d8:	f44f 6102 	mov.w	r1, #2080	; 0x820
    adds r0, r0, r1
    79dc:	1840      	adds	r0, r0, r1
    msr PSP, r0
    79de:	f380 8809 	msr	PSP, r0
    mrs r0, CONTROL
    79e2:	f3ef 8014 	mrs	r0, CONTROL
    movs r1, #2
    79e6:	2102      	movs	r1, #2
    orrs r0, r1 /* CONTROL_SPSEL_Msk */
    79e8:	4308      	orrs	r0, r1
    msr CONTROL, r0
    79ea:	f380 8814 	msr	CONTROL, r0
    /*
     * When changing the stack pointer, software must use an ISB instruction
     * immediately after the MSR instruction. This ensures that instructions
     * after the ISB instruction execute using the new stack pointer.
     */
    isb
    79ee:	f3bf 8f6f 	isb	sy
    /*
     * 'bl' jumps the furthest of the branch instructions that are
     * supported on all platforms. So it is used when jumping to z_arm_prep_c
     * (even though we do not intend to return).
     */
    bl z_arm_prep_c
    79f2:	f7ff ffa9 	bl	7948 <z_arm_prep_c>
    79f6:	0000      	.short	0x0000
    ldr r0, =z_interrupt_stacks
    79f8:	20011a60 	.word	0x20011a60

000079fc <z_arm_bus_fault>:
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
SECTION_SUBSEC_FUNC(TEXT,__fault,z_arm_exc_spurious)

	mrs r0, MSP
    79fc:	f3ef 8008 	mrs	r0, MSP
	mrs r1, PSP
    7a00:	f3ef 8109 	mrs	r1, PSP
	push {r0, lr}
    7a04:	b501      	push	{r0, lr}
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	push {r4-r11}
#endif
	mov  r3, sp /* pointer to _callee_saved_t */
#endif /* CONFIG_EXTRA_EXCEPTION_INFO */
	mov r2, lr /* EXC_RETURN */
    7a06:	4672      	mov	r2, lr
	bl z_arm_fault
    7a08:	f000 f94e 	bl	7ca8 <z_arm_fault>
	 * in this routine. Therefore, we can just reset
	 * the MSP to its value prior to entering the function
	 */
	add sp, #40
#endif
	pop {r0, pc}
    7a0c:	bd01      	pop	{r0, pc}
    7a0e:	bf00      	nop

00007a10 <mem_manage_fault>:
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t mem_manage_fault(z_arch_esf_t *esf, int from_hard_fault,
			      bool *recoverable)
{
    7a10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    7a14:	4b35      	ldr	r3, [pc, #212]	; (7aec <mem_manage_fault+0xdc>)
    7a16:	4c36      	ldr	r4, [pc, #216]	; (7af0 <mem_manage_fault+0xe0>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	uint32_t mmfar = -EINVAL;

	PR_FAULT_INFO("***** MPU FAULT *****");

	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7a18:	4d36      	ldr	r5, [pc, #216]	; (7af4 <mem_manage_fault+0xe4>)
    7a1a:	1ae4      	subs	r4, r4, r3
    7a1c:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** MPU FAULT *****");
    7a1e:	01a4      	lsls	r4, r4, #6
    7a20:	f044 0901 	orr.w	r9, r4, #1
{
    7a24:	4607      	mov	r7, r0
    7a26:	4688      	mov	r8, r1
	PR_FAULT_INFO("***** MPU FAULT *****");
    7a28:	4833      	ldr	r0, [pc, #204]	; (7af8 <mem_manage_fault+0xe8>)
    7a2a:	4649      	mov	r1, r9
{
    7a2c:	4616      	mov	r6, r2
	PR_FAULT_INFO("***** MPU FAULT *****");
    7a2e:	f01a fd0f 	bl	22450 <log_0>
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) != 0) {
    7a32:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a34:	06db      	lsls	r3, r3, #27
    7a36:	d503      	bpl.n	7a40 <mem_manage_fault+0x30>
		PR_FAULT_INFO("  Stacking error (context area might be"
    7a38:	4830      	ldr	r0, [pc, #192]	; (7afc <mem_manage_fault+0xec>)
    7a3a:	4649      	mov	r1, r9
    7a3c:	f01a fd08 	bl	22450 <log_0>
			" not valid)");
	}
	if ((SCB->CFSR & SCB_CFSR_MUNSTKERR_Msk) != 0) {
    7a40:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a42:	0718      	lsls	r0, r3, #28
    7a44:	d504      	bpl.n	7a50 <mem_manage_fault+0x40>
		PR_FAULT_INFO("  Unstacking error");
    7a46:	482e      	ldr	r0, [pc, #184]	; (7b00 <mem_manage_fault+0xf0>)
    7a48:	f044 0101 	orr.w	r1, r4, #1
    7a4c:	f01a fd00 	bl	22450 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_DACCVIOL_Msk) != 0) {
    7a50:	4d28      	ldr	r5, [pc, #160]	; (7af4 <mem_manage_fault+0xe4>)
    7a52:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a54:	0799      	lsls	r1, r3, #30
    7a56:	d423      	bmi.n	7aa0 <mem_manage_fault+0x90>
	uint32_t mmfar = -EINVAL;
    7a58:	f06f 0915 	mvn.w	r9, #21
				/* clear SCB_MMAR[VALID] to reset */
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
			}
		}
	}
	if ((SCB->CFSR & SCB_CFSR_IACCVIOL_Msk) != 0) {
    7a5c:	4d25      	ldr	r5, [pc, #148]	; (7af4 <mem_manage_fault+0xe4>)
    7a5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a60:	07db      	lsls	r3, r3, #31
    7a62:	d504      	bpl.n	7a6e <mem_manage_fault+0x5e>
		PR_FAULT_INFO("  Instruction Access Violation");
    7a64:	4827      	ldr	r0, [pc, #156]	; (7b04 <mem_manage_fault+0xf4>)
    7a66:	f044 0101 	orr.w	r1, r4, #1
    7a6a:	f01a fcf1 	bl	22450 <log_0>
	}
#if defined(CONFIG_ARMV7_M_ARMV8_M_FP)
	if ((SCB->CFSR & SCB_CFSR_MLSPERR_Msk) != 0) {
    7a6e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7a70:	0698      	lsls	r0, r3, #26
    7a72:	d504      	bpl.n	7a7e <mem_manage_fault+0x6e>
		PR_FAULT_INFO(
    7a74:	4824      	ldr	r0, [pc, #144]	; (7b08 <mem_manage_fault+0xf8>)
    7a76:	f044 0101 	orr.w	r1, r4, #1
    7a7a:	f01a fce9 	bl	22450 <log_0>
	 * crossed into an area beyond the thread stack.]
	 *
	 * Data Access Violation errors may or may not be caused by
	 * thread stack overflows.
	 */
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7a7e:	4b1d      	ldr	r3, [pc, #116]	; (7af4 <mem_manage_fault+0xe4>)
    7a80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7a82:	06d1      	lsls	r1, r2, #27
    7a84:	d424      	bmi.n	7ad0 <mem_manage_fault+0xc0>
		(SCB->CFSR & SCB_CFSR_DACCVIOL_Msk)) {
    7a86:	6a9a      	ldr	r2, [r3, #40]	; 0x28
	if ((SCB->CFSR & SCB_CFSR_MSTKERR_Msk) ||
    7a88:	0792      	lsls	r2, r2, #30
    7a8a:	d421      	bmi.n	7ad0 <mem_manage_fault+0xc0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7a8c:	2000      	movs	r0, #0
		"Stacking error without stack guard / User-mode support\n");
#endif /* CONFIG_MPU_STACK_GUARD || CONFIG_USERSPACE */
	}

	/* clear MMFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_MEMFAULTSR_Msk;
    7a8e:	4a19      	ldr	r2, [pc, #100]	; (7af4 <mem_manage_fault+0xe4>)
    7a90:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7a92:	f043 03ff 	orr.w	r3, r3, #255	; 0xff
    7a96:	6293      	str	r3, [r2, #40]	; 0x28

	/* Assess whether system shall ignore/recover from this MPU fault. */
	*recoverable = memory_fault_recoverable(esf);
    7a98:	2300      	movs	r3, #0
    7a9a:	7033      	strb	r3, [r6, #0]

	return reason;
}
    7a9c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		PR_FAULT_INFO("  Data Access Violation");
    7aa0:	f044 0a01 	orr.w	sl, r4, #1
    7aa4:	4819      	ldr	r0, [pc, #100]	; (7b0c <mem_manage_fault+0xfc>)
    7aa6:	4651      	mov	r1, sl
    7aa8:	f01a fcd2 	bl	22450 <log_0>
		uint32_t temp = SCB->MMFAR;
    7aac:	f8d5 9034 	ldr.w	r9, [r5, #52]	; 0x34
		if ((SCB->CFSR & SCB_CFSR_MMARVALID_Msk) != 0) {
    7ab0:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ab2:	061a      	lsls	r2, r3, #24
    7ab4:	d5d0      	bpl.n	7a58 <mem_manage_fault+0x48>
			PR_EXC("  MMFAR Address: 0x%x", mmfar);
    7ab6:	4816      	ldr	r0, [pc, #88]	; (7b10 <mem_manage_fault+0x100>)
    7ab8:	4652      	mov	r2, sl
    7aba:	4649      	mov	r1, r9
    7abc:	f01a fcd5 	bl	2246a <log_1>
			if (from_hard_fault) {
    7ac0:	f1b8 0f00 	cmp.w	r8, #0
    7ac4:	d0ca      	beq.n	7a5c <mem_manage_fault+0x4c>
				SCB->CFSR &= ~SCB_CFSR_MMARVALID_Msk;
    7ac6:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7ac8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    7acc:	62ab      	str	r3, [r5, #40]	; 0x28
    7ace:	e7c5      	b.n	7a5c <mem_manage_fault+0x4c>
		if (SCB->ICSR & SCB_ICSR_RETTOBASE_Msk) {
    7ad0:	685b      	ldr	r3, [r3, #4]
    7ad2:	051b      	lsls	r3, r3, #20
    7ad4:	d5da      	bpl.n	7a8c <mem_manage_fault+0x7c>
			uint32_t min_stack_ptr = z_check_thread_stack_fail(mmfar,
    7ad6:	4639      	mov	r1, r7
    7ad8:	4648      	mov	r0, r9
    7ada:	f7ff feab 	bl	7834 <z_check_thread_stack_fail>
			if (min_stack_ptr) {
    7ade:	2800      	cmp	r0, #0
    7ae0:	d0d4      	beq.n	7a8c <mem_manage_fault+0x7c>
  __ASM volatile ("MSR psp, %0" : : "r" (topOfProcStack) : );
    7ae2:	f380 8809 	msr	PSP, r0
				reason = K_ERR_STACK_CHK_FAIL;
    7ae6:	2002      	movs	r0, #2
    7ae8:	e7d1      	b.n	7a8e <mem_manage_fault+0x7e>
    7aea:	bf00      	nop
    7aec:	000278c0 	.word	0x000278c0
    7af0:	000279f8 	.word	0x000279f8
    7af4:	e000ed00 	.word	0xe000ed00
    7af8:	0002b98a 	.word	0x0002b98a
    7afc:	0002b9a0 	.word	0x0002b9a0
    7b00:	0002b9d3 	.word	0x0002b9d3
    7b04:	0002ba14 	.word	0x0002ba14
    7b08:	0002ba33 	.word	0x0002ba33
    7b0c:	0002b9e6 	.word	0x0002b9e6
    7b10:	0002b9fe 	.word	0x0002b9fe

00007b14 <usage_fault.constprop.0>:
 *
 * See z_arm_fault_dump() for example.
 *
 * @return error code to identify the fatal error reason
 */
static uint32_t usage_fault(const z_arch_esf_t *esf)
    7b14:	b570      	push	{r4, r5, r6, lr}
    7b16:	4b23      	ldr	r3, [pc, #140]	; (7ba4 <usage_fault.constprop.0+0x90>)
    7b18:	4c23      	ldr	r4, [pc, #140]	; (7ba8 <usage_fault.constprop.0+0x94>)
	uint32_t reason = K_ERR_CPU_EXCEPTION;

	PR_FAULT_INFO("***** USAGE FAULT *****");

	/* bits are sticky: they stack and must be reset */
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7b1a:	4d24      	ldr	r5, [pc, #144]	; (7bac <usage_fault.constprop.0+0x98>)
	PR_FAULT_INFO("***** USAGE FAULT *****");
    7b1c:	4824      	ldr	r0, [pc, #144]	; (7bb0 <usage_fault.constprop.0+0x9c>)
    7b1e:	1ae4      	subs	r4, r4, r3
    7b20:	08e4      	lsrs	r4, r4, #3
    7b22:	01a4      	lsls	r4, r4, #6
    7b24:	f044 0601 	orr.w	r6, r4, #1
    7b28:	4631      	mov	r1, r6
    7b2a:	f01a fc91 	bl	22450 <log_0>
	if ((SCB->CFSR & SCB_CFSR_DIVBYZERO_Msk) != 0) {
    7b2e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b30:	019b      	lsls	r3, r3, #6
    7b32:	d503      	bpl.n	7b3c <usage_fault.constprop.0+0x28>
		PR_FAULT_INFO("  Division by zero");
    7b34:	481f      	ldr	r0, [pc, #124]	; (7bb4 <usage_fault.constprop.0+0xa0>)
    7b36:	4631      	mov	r1, r6
    7b38:	f01a fc8a 	bl	22450 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNALIGNED_Msk) != 0) {
    7b3c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b3e:	01dd      	lsls	r5, r3, #7
    7b40:	d504      	bpl.n	7b4c <usage_fault.constprop.0+0x38>
		PR_FAULT_INFO("  Unaligned memory access");
    7b42:	481d      	ldr	r0, [pc, #116]	; (7bb8 <usage_fault.constprop.0+0xa4>)
    7b44:	f044 0101 	orr.w	r1, r4, #1
    7b48:	f01a fc82 	bl	22450 <log_0>
		 */
		reason = K_ERR_STACK_CHK_FAIL;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
	}
#endif /* CONFIG_ARMV8_M_MAINLINE */
	if ((SCB->CFSR & SCB_CFSR_NOCP_Msk) != 0) {
    7b4c:	4d17      	ldr	r5, [pc, #92]	; (7bac <usage_fault.constprop.0+0x98>)
    7b4e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b50:	0318      	lsls	r0, r3, #12
    7b52:	d504      	bpl.n	7b5e <usage_fault.constprop.0+0x4a>
		PR_FAULT_INFO("  No coprocessor instructions");
    7b54:	4819      	ldr	r0, [pc, #100]	; (7bbc <usage_fault.constprop.0+0xa8>)
    7b56:	f044 0101 	orr.w	r1, r4, #1
    7b5a:	f01a fc79 	bl	22450 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVPC_Msk) != 0) {
    7b5e:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b60:	0359      	lsls	r1, r3, #13
    7b62:	d504      	bpl.n	7b6e <usage_fault.constprop.0+0x5a>
		PR_FAULT_INFO("  Illegal load of EXC_RETURN into PC");
    7b64:	4816      	ldr	r0, [pc, #88]	; (7bc0 <usage_fault.constprop.0+0xac>)
    7b66:	f044 0101 	orr.w	r1, r4, #1
    7b6a:	f01a fc71 	bl	22450 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_INVSTATE_Msk) != 0) {
    7b6e:	4d0f      	ldr	r5, [pc, #60]	; (7bac <usage_fault.constprop.0+0x98>)
    7b70:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b72:	039a      	lsls	r2, r3, #14
    7b74:	d504      	bpl.n	7b80 <usage_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Illegal use of the EPSR");
    7b76:	4813      	ldr	r0, [pc, #76]	; (7bc4 <usage_fault.constprop.0+0xb0>)
    7b78:	f044 0101 	orr.w	r1, r4, #1
    7b7c:	f01a fc68 	bl	22450 <log_0>
	}
	if ((SCB->CFSR & SCB_CFSR_UNDEFINSTR_Msk) != 0) {
    7b80:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7b82:	03db      	lsls	r3, r3, #15
    7b84:	d504      	bpl.n	7b90 <usage_fault.constprop.0+0x7c>
		PR_FAULT_INFO("  Attempt to execute undefined instruction");
    7b86:	4810      	ldr	r0, [pc, #64]	; (7bc8 <usage_fault.constprop.0+0xb4>)
    7b88:	f044 0101 	orr.w	r1, r4, #1
    7b8c:	f01a fc60 	bl	22450 <log_0>
	}

	/* clear UFSR sticky bits */
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
    7b90:	4a06      	ldr	r2, [pc, #24]	; (7bac <usage_fault.constprop.0+0x98>)
    7b92:	6a93      	ldr	r3, [r2, #40]	; 0x28
    7b94:	ea6f 4303 	mvn.w	r3, r3, lsl #16
    7b98:	ea6f 4313 	mvn.w	r3, r3, lsr #16
    7b9c:	6293      	str	r3, [r2, #40]	; 0x28

	return reason;
}
    7b9e:	2000      	movs	r0, #0
    7ba0:	bd70      	pop	{r4, r5, r6, pc}
    7ba2:	bf00      	nop
    7ba4:	000278c0 	.word	0x000278c0
    7ba8:	000279f8 	.word	0x000279f8
    7bac:	e000ed00 	.word	0xe000ed00
    7bb0:	0002ba62 	.word	0x0002ba62
    7bb4:	0002ba7a 	.word	0x0002ba7a
    7bb8:	0002ba8d 	.word	0x0002ba8d
    7bbc:	0002baa7 	.word	0x0002baa7
    7bc0:	0002bac5 	.word	0x0002bac5
    7bc4:	0002baea 	.word	0x0002baea
    7bc8:	0002bb04 	.word	0x0002bb04

00007bcc <bus_fault.constprop.0>:
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7bcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7bd0:	4b2a      	ldr	r3, [pc, #168]	; (7c7c <bus_fault.constprop.0+0xb0>)
    7bd2:	4c2b      	ldr	r4, [pc, #172]	; (7c80 <bus_fault.constprop.0+0xb4>)
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7bd4:	4d2b      	ldr	r5, [pc, #172]	; (7c84 <bus_fault.constprop.0+0xb8>)
    7bd6:	1ae4      	subs	r4, r4, r3
    7bd8:	08e4      	lsrs	r4, r4, #3
	PR_FAULT_INFO("***** BUS FAULT *****");
    7bda:	01a4      	lsls	r4, r4, #6
    7bdc:	f044 0801 	orr.w	r8, r4, #1
static int bus_fault(z_arch_esf_t *esf, int from_hard_fault, bool *recoverable)
    7be0:	4607      	mov	r7, r0
    7be2:	460e      	mov	r6, r1
	PR_FAULT_INFO("***** BUS FAULT *****");
    7be4:	4828      	ldr	r0, [pc, #160]	; (7c88 <bus_fault.constprop.0+0xbc>)
    7be6:	4641      	mov	r1, r8
    7be8:	f01a fc32 	bl	22450 <log_0>
	if (SCB->CFSR & SCB_CFSR_STKERR_Msk) {
    7bec:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7bee:	04d9      	lsls	r1, r3, #19
    7bf0:	d503      	bpl.n	7bfa <bus_fault.constprop.0+0x2e>
		PR_FAULT_INFO("  Stacking error");
    7bf2:	4826      	ldr	r0, [pc, #152]	; (7c8c <bus_fault.constprop.0+0xc0>)
    7bf4:	4641      	mov	r1, r8
    7bf6:	f01a fc2b 	bl	22450 <log_0>
	if (SCB->CFSR & SCB_CFSR_UNSTKERR_Msk) {
    7bfa:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7bfc:	051a      	lsls	r2, r3, #20
    7bfe:	d504      	bpl.n	7c0a <bus_fault.constprop.0+0x3e>
		PR_FAULT_INFO("  Unstacking error");
    7c00:	4823      	ldr	r0, [pc, #140]	; (7c90 <bus_fault.constprop.0+0xc4>)
    7c02:	f044 0101 	orr.w	r1, r4, #1
    7c06:	f01a fc23 	bl	22450 <log_0>
	if (SCB->CFSR & SCB_CFSR_PRECISERR_Msk) {
    7c0a:	4d1e      	ldr	r5, [pc, #120]	; (7c84 <bus_fault.constprop.0+0xb8>)
    7c0c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c0e:	059b      	lsls	r3, r3, #22
    7c10:	d512      	bpl.n	7c38 <bus_fault.constprop.0+0x6c>
		PR_FAULT_INFO("  Precise data bus error");
    7c12:	f044 0801 	orr.w	r8, r4, #1
    7c16:	481f      	ldr	r0, [pc, #124]	; (7c94 <bus_fault.constprop.0+0xc8>)
    7c18:	4641      	mov	r1, r8
    7c1a:	f01a fc19 	bl	22450 <log_0>
		STORE_xFAR(bfar, SCB->BFAR);
    7c1e:	6ba9      	ldr	r1, [r5, #56]	; 0x38
		if ((SCB->CFSR & SCB_CFSR_BFARVALID_Msk) != 0) {
    7c20:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c22:	0418      	lsls	r0, r3, #16
    7c24:	d508      	bpl.n	7c38 <bus_fault.constprop.0+0x6c>
			PR_EXC("  BFAR Address: 0x%x", bfar);
    7c26:	481c      	ldr	r0, [pc, #112]	; (7c98 <bus_fault.constprop.0+0xcc>)
    7c28:	4642      	mov	r2, r8
    7c2a:	f01a fc1e 	bl	2246a <log_1>
			if (from_hard_fault) {
    7c2e:	b11f      	cbz	r7, 7c38 <bus_fault.constprop.0+0x6c>
				SCB->CFSR &= ~SCB_CFSR_BFARVALID_Msk;
    7c30:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c32:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
    7c36:	62ab      	str	r3, [r5, #40]	; 0x28
	if (SCB->CFSR & SCB_CFSR_IMPRECISERR_Msk) {
    7c38:	4d12      	ldr	r5, [pc, #72]	; (7c84 <bus_fault.constprop.0+0xb8>)
    7c3a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c3c:	0559      	lsls	r1, r3, #21
    7c3e:	d504      	bpl.n	7c4a <bus_fault.constprop.0+0x7e>
		PR_FAULT_INFO("  Imprecise data bus error");
    7c40:	4816      	ldr	r0, [pc, #88]	; (7c9c <bus_fault.constprop.0+0xd0>)
    7c42:	f044 0101 	orr.w	r1, r4, #1
    7c46:	f01a fc03 	bl	22450 <log_0>
	if ((SCB->CFSR & SCB_CFSR_IBUSERR_Msk) != 0) {
    7c4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c4c:	05da      	lsls	r2, r3, #23
    7c4e:	d50d      	bpl.n	7c6c <bus_fault.constprop.0+0xa0>
		PR_FAULT_INFO("  Instruction bus error");
    7c50:	4813      	ldr	r0, [pc, #76]	; (7ca0 <bus_fault.constprop.0+0xd4>)
    7c52:	f044 0101 	orr.w	r1, r4, #1
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7c56:	f01a fbfb 	bl	22450 <log_0>
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7c5a:	4a0a      	ldr	r2, [pc, #40]	; (7c84 <bus_fault.constprop.0+0xb8>)
    7c5c:	6a93      	ldr	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7c5e:	2000      	movs	r0, #0
	SCB->CFSR |= SCB_CFSR_BUSFAULTSR_Msk;
    7c60:	f443 437f 	orr.w	r3, r3, #65280	; 0xff00
    7c64:	6293      	str	r3, [r2, #40]	; 0x28
	*recoverable = memory_fault_recoverable(esf);
    7c66:	7030      	strb	r0, [r6, #0]
}
    7c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (SCB->CFSR & SCB_CFSR_LSPERR_Msk) {
    7c6c:	6aab      	ldr	r3, [r5, #40]	; 0x28
    7c6e:	049b      	lsls	r3, r3, #18
    7c70:	d5f3      	bpl.n	7c5a <bus_fault.constprop.0+0x8e>
		PR_FAULT_INFO("  Floating-point lazy state preservation error");
    7c72:	480c      	ldr	r0, [pc, #48]	; (7ca4 <bus_fault.constprop.0+0xd8>)
    7c74:	f044 0101 	orr.w	r1, r4, #1
    7c78:	e7ed      	b.n	7c56 <bus_fault.constprop.0+0x8a>
    7c7a:	bf00      	nop
    7c7c:	000278c0 	.word	0x000278c0
    7c80:	000279f8 	.word	0x000279f8
    7c84:	e000ed00 	.word	0xe000ed00
    7c88:	0002bb2f 	.word	0x0002bb2f
    7c8c:	0002bb45 	.word	0x0002bb45
    7c90:	0002b9d3 	.word	0x0002b9d3
    7c94:	0002bb56 	.word	0x0002bb56
    7c98:	0002bb6f 	.word	0x0002bb6f
    7c9c:	0002bb84 	.word	0x0002bb84
    7ca0:	0002bb9f 	.word	0x0002bb9f
    7ca4:	0002ba33 	.word	0x0002ba33

00007ca8 <z_arm_fault>:
 * @param callee_regs Callee-saved registers (R4-R11, PSP)
 *
 */
void z_arm_fault(uint32_t msp, uint32_t psp, uint32_t exc_return,
	_callee_saved_t *callee_regs)
{
    7ca8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t reason = K_ERR_CPU_EXCEPTION;
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7cac:	4b58      	ldr	r3, [pc, #352]	; (7e10 <z_arm_fault+0x168>)
    7cae:	685e      	ldr	r6, [r3, #4]
{
    7cb0:	b08b      	sub	sp, #44	; 0x2c
    7cb2:	460f      	mov	r7, r1
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
    7cb4:	f3c6 0408 	ubfx	r4, r6, #0, #9
    7cb8:	2500      	movs	r5, #0
    7cba:	f385 8811 	msr	BASEPRI, r5
    7cbe:	f3bf 8f6f 	isb	sy
	if ((exc_return & EXC_RETURN_INDICATOR_PREFIX) !=
    7cc2:	f002 437f 	and.w	r3, r2, #4278190080	; 0xff000000
    7cc6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
    7cca:	d10d      	bne.n	7ce8 <z_arm_fault+0x40>
	if ((exc_return & EXC_RETURN_MODE_THREAD) &&
    7ccc:	f002 030c 	and.w	r3, r2, #12
    7cd0:	2b08      	cmp	r3, #8
    7cd2:	d10b      	bne.n	7cec <z_arm_fault+0x44>
    7cd4:	494f      	ldr	r1, [pc, #316]	; (7e14 <z_arm_fault+0x16c>)
    7cd6:	4b50      	ldr	r3, [pc, #320]	; (7e18 <z_arm_fault+0x170>)
		PR_EXC("SPSEL in thread mode does not indicate PSP");
    7cd8:	4850      	ldr	r0, [pc, #320]	; (7e1c <z_arm_fault+0x174>)
    7cda:	1ac9      	subs	r1, r1, r3
    7cdc:	08c9      	lsrs	r1, r1, #3
    7cde:	0189      	lsls	r1, r1, #6
    7ce0:	f041 0101 	orr.w	r1, r1, #1
    7ce4:	f01a fbb4 	bl	22450 <log_0>
		return NULL;
    7ce8:	462f      	mov	r7, r5
    7cea:	e003      	b.n	7cf4 <z_arm_fault+0x4c>
		if (exc_return & EXC_RETURN_MODE_THREAD) {
    7cec:	0712      	lsls	r2, r2, #28
    7cee:	d401      	bmi.n	7cf4 <z_arm_fault+0x4c>
			ptr_esf = (z_arch_esf_t *)msp;
    7cf0:	4607      	mov	r7, r0
			*nested_exc = true;
    7cf2:	2501      	movs	r5, #1
	*recoverable = false;
    7cf4:	2300      	movs	r3, #0
    7cf6:	f88d 3007 	strb.w	r3, [sp, #7]
	switch (fault) {
    7cfa:	1ee3      	subs	r3, r4, #3
    7cfc:	2b09      	cmp	r3, #9
    7cfe:	d86e      	bhi.n	7dde <z_arm_fault+0x136>
    7d00:	e8df f003 	tbb	[pc, r3]
    7d04:	40605c05 	.word	0x40605c05
    7d08:	6d6d6d6d 	.word	0x6d6d6d6d
    7d0c:	646d      	.short	0x646d
    7d0e:	4b42      	ldr	r3, [pc, #264]	; (7e18 <z_arm_fault+0x170>)
    7d10:	4e40      	ldr	r6, [pc, #256]	; (7e14 <z_arm_fault+0x16c>)
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d12:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 7e10 <z_arm_fault+0x168>
	PR_FAULT_INFO("***** HARD FAULT *****");
    7d16:	4842      	ldr	r0, [pc, #264]	; (7e20 <z_arm_fault+0x178>)
    7d18:	1af6      	subs	r6, r6, r3
    7d1a:	08f6      	lsrs	r6, r6, #3
    7d1c:	01b6      	lsls	r6, r6, #6
    7d1e:	f046 0601 	orr.w	r6, r6, #1
    7d22:	4631      	mov	r1, r6
    7d24:	f01a fb94 	bl	22450 <log_0>
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d28:	f8d8 402c 	ldr.w	r4, [r8, #44]	; 0x2c
	*recoverable = false;
    7d2c:	f04f 0900 	mov.w	r9, #0
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d30:	f014 0402 	ands.w	r4, r4, #2
	*recoverable = false;
    7d34:	f88d 9007 	strb.w	r9, [sp, #7]
	if ((SCB->HFSR & SCB_HFSR_VECTTBL_Msk) != 0) {
    7d38:	d005      	beq.n	7d46 <z_arm_fault+0x9e>
		PR_EXC("  Bus fault on vector table read");
    7d3a:	483a      	ldr	r0, [pc, #232]	; (7e24 <z_arm_fault+0x17c>)
    7d3c:	4631      	mov	r1, r6
	PR_FAULT_INFO(
    7d3e:	f01a fb87 	bl	22450 <log_0>
	uint32_t reason = K_ERR_CPU_EXCEPTION;
    7d42:	2400      	movs	r4, #0
}
    7d44:	e021      	b.n	7d8a <z_arm_fault+0xe2>
	} else if ((SCB->HFSR & SCB_HFSR_FORCED_Msk) != 0) {
    7d46:	f8d8 302c 	ldr.w	r3, [r8, #44]	; 0x2c
    7d4a:	005b      	lsls	r3, r3, #1
    7d4c:	d51d      	bpl.n	7d8a <z_arm_fault+0xe2>
		PR_EXC("  Fault escalation (see below)");
    7d4e:	4836      	ldr	r0, [pc, #216]	; (7e28 <z_arm_fault+0x180>)
    7d50:	4631      	mov	r1, r6
    7d52:	f01a fb7d 	bl	22450 <log_0>
		if (SCB_MMFSR != 0) {
    7d56:	f898 3028 	ldrb.w	r3, [r8, #40]	; 0x28
    7d5a:	b133      	cbz	r3, 7d6a <z_arm_fault+0xc2>
			reason = mem_manage_fault(esf, 1, recoverable);
    7d5c:	f10d 0207 	add.w	r2, sp, #7
    7d60:	2101      	movs	r1, #1
		reason = mem_manage_fault(esf, 0, recoverable);
    7d62:	4638      	mov	r0, r7
    7d64:	f7ff fe54 	bl	7a10 <mem_manage_fault>
    7d68:	e00e      	b.n	7d88 <z_arm_fault+0xe0>
		} else if (SCB_BFSR != 0) {
    7d6a:	f898 3029 	ldrb.w	r3, [r8, #41]	; 0x29
    7d6e:	b12b      	cbz	r3, 7d7c <z_arm_fault+0xd4>
			reason = bus_fault(esf, 1, recoverable);
    7d70:	f10d 0107 	add.w	r1, sp, #7
    7d74:	2001      	movs	r0, #1
		reason = bus_fault(esf, 0, recoverable);
    7d76:	f7ff ff29 	bl	7bcc <bus_fault.constprop.0>
    7d7a:	e005      	b.n	7d88 <z_arm_fault+0xe0>
		} else if (SCB_UFSR != 0) {
    7d7c:	f8b8 302a 	ldrh.w	r3, [r8, #42]	; 0x2a
    7d80:	b29b      	uxth	r3, r3
    7d82:	b113      	cbz	r3, 7d8a <z_arm_fault+0xe2>
			reason = usage_fault(esf);
    7d84:	f7ff fec6 	bl	7b14 <usage_fault.constprop.0>
    7d88:	4604      	mov	r4, r0
#ifdef CONFIG_DEBUG_COREDUMP
	z_arm_coredump_fault_sp = POINTER_TO_UINT(esf);
#endif

	reason = fault_handle(esf, fault, &recoverable);
	if (recoverable) {
    7d8a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    7d8e:	b993      	cbnz	r3, 7db6 <z_arm_fault+0x10e>
		return;
	}

	/* Copy ESF */
#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	memcpy(&esf_copy, esf, sizeof(z_arch_esf_t));
    7d90:	2220      	movs	r2, #32
    7d92:	4639      	mov	r1, r7
    7d94:	a802      	add	r0, sp, #8
    7d96:	f01c fb67 	bl	24468 <memcpy>
	/* Overwrite stacked IPSR to mark a nested exception,
	 * or a return to Thread mode. Note that this may be
	 * required, if the retrieved ESF contents are invalid
	 * due to, for instance, a stacking error.
	 */
	if (nested_exc) {
    7d9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
    7d9c:	b39d      	cbz	r5, 7e06 <z_arm_fault+0x15e>
		if ((esf_copy.basic.xpsr & IPSR_ISR_Msk) == 0) {
    7d9e:	f3c3 0208 	ubfx	r2, r3, #0, #9
    7da2:	b922      	cbnz	r2, 7dae <z_arm_fault+0x106>
			esf_copy.basic.xpsr |= IPSR_ISR_Msk;
    7da4:	ea6f 2353 	mvn.w	r3, r3, lsr #9
    7da8:	ea6f 2343 	mvn.w	r3, r3, lsl #9
		}
	} else {
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7dac:	9309      	str	r3, [sp, #36]	; 0x24
	}

	z_arm_fatal_error(reason, &esf_copy);
    7dae:	a902      	add	r1, sp, #8
    7db0:	4620      	mov	r0, r4
    7db2:	f7ff fd8d 	bl	78d0 <z_arm_fatal_error>
}
    7db6:	b00b      	add	sp, #44	; 0x2c
    7db8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		reason = mem_manage_fault(esf, 0, recoverable);
    7dbc:	f10d 0207 	add.w	r2, sp, #7
    7dc0:	2100      	movs	r1, #0
    7dc2:	e7ce      	b.n	7d62 <z_arm_fault+0xba>
		reason = bus_fault(esf, 0, recoverable);
    7dc4:	f10d 0107 	add.w	r1, sp, #7
    7dc8:	2000      	movs	r0, #0
    7dca:	e7d4      	b.n	7d76 <z_arm_fault+0xce>
    7dcc:	4911      	ldr	r1, [pc, #68]	; (7e14 <z_arm_fault+0x16c>)
    7dce:	4b12      	ldr	r3, [pc, #72]	; (7e18 <z_arm_fault+0x170>)
	PR_FAULT_INFO(
    7dd0:	4816      	ldr	r0, [pc, #88]	; (7e2c <z_arm_fault+0x184>)
    7dd2:	1ac9      	subs	r1, r1, r3
    7dd4:	08c9      	lsrs	r1, r1, #3
    7dd6:	0189      	lsls	r1, r1, #6
    7dd8:	f041 0101 	orr.w	r1, r1, #1
    7ddc:	e7af      	b.n	7d3e <z_arm_fault+0x96>
    7dde:	4a0e      	ldr	r2, [pc, #56]	; (7e18 <z_arm_fault+0x170>)
    7de0:	4b0c      	ldr	r3, [pc, #48]	; (7e14 <z_arm_fault+0x16c>)
	PR_FAULT_INFO("***** %s %d) *****",
    7de2:	4813      	ldr	r0, [pc, #76]	; (7e30 <z_arm_fault+0x188>)
    7de4:	4913      	ldr	r1, [pc, #76]	; (7e34 <z_arm_fault+0x18c>)
    7de6:	1a9b      	subs	r3, r3, r2
    7de8:	08db      	lsrs	r3, r3, #3
    7dea:	f416 7ff8 	tst.w	r6, #496	; 0x1f0
    7dee:	ea4f 1383 	mov.w	r3, r3, lsl #6
    7df2:	bf18      	it	ne
    7df4:	4601      	movne	r1, r0
    7df6:	f043 0301 	orr.w	r3, r3, #1
    7dfa:	480f      	ldr	r0, [pc, #60]	; (7e38 <z_arm_fault+0x190>)
    7dfc:	f1a4 0210 	sub.w	r2, r4, #16
    7e00:	f01a fb47 	bl	22492 <log_2>
    7e04:	e79d      	b.n	7d42 <z_arm_fault+0x9a>
		esf_copy.basic.xpsr &= ~(IPSR_ISR_Msk);
    7e06:	f423 73ff 	bic.w	r3, r3, #510	; 0x1fe
    7e0a:	f023 0301 	bic.w	r3, r3, #1
    7e0e:	e7cd      	b.n	7dac <z_arm_fault+0x104>
    7e10:	e000ed00 	.word	0xe000ed00
    7e14:	000279f8 	.word	0x000279f8
    7e18:	000278c0 	.word	0x000278c0
    7e1c:	0002bbb7 	.word	0x0002bbb7
    7e20:	0002bbe2 	.word	0x0002bbe2
    7e24:	0002bbf9 	.word	0x0002bbf9
    7e28:	0002bc1a 	.word	0x0002bc1a
    7e2c:	0002bc39 	.word	0x0002bc39
    7e30:	0002bc84 	.word	0x0002bc84
    7e34:	0002bc6f 	.word	0x0002bc6f
    7e38:	0002bc9d 	.word	0x0002bc9d

00007e3c <z_arm_fault_init>:
 */
void z_arm_fault_init(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
    7e3c:	4a02      	ldr	r2, [pc, #8]	; (7e48 <z_arm_fault_init+0xc>)
    7e3e:	6953      	ldr	r3, [r2, #20]
    7e40:	f043 0310 	orr.w	r3, r3, #16
    7e44:	6153      	str	r3, [r2, #20]
	 * Stack to attempt to descend into secure region, in which case a
	 * Secure Hard Fault will occur and we can track the fault from there.
	 */
	SCB->CCR |= SCB_CCR_STKOFHFNMIGN_Msk;
#endif /* CONFIG_BUILTIN_STACK_GUARD */
}
    7e46:	4770      	bx	lr
    7e48:	e000ed00 	.word	0xe000ed00

00007e4c <z_arm_exc_exit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, z_arm_exc_exit)

#ifdef CONFIG_PREEMPT_ENABLED
	ldr r3, =_kernel
    7e4c:	4b04      	ldr	r3, [pc, #16]	; (7e60 <_EXIT_EXC+0x2>)

	ldr r1, [r3, #_kernel_offset_to_current]
    7e4e:	6899      	ldr	r1, [r3, #8]
	ldr r0, [r3, #_kernel_offset_to_ready_q_cache]
    7e50:	6a98      	ldr	r0, [r3, #40]	; 0x28
	cmp r0, r1
    7e52:	4288      	cmp	r0, r1
	beq _EXIT_EXC
    7e54:	d003      	beq.n	7e5e <_EXIT_EXC>

	/* context switch required, pend the PendSV exception */
	ldr r1, =_SCS_ICSR
    7e56:	4903      	ldr	r1, [pc, #12]	; (7e64 <_EXIT_EXC+0x6>)
	ldr r2, =_SCS_ICSR_PENDSV
    7e58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
	str r2, [r1]
    7e5c:	600a      	str	r2, [r1, #0]

00007e5e <_EXIT_EXC>:
#else
	pop {r0, lr}
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
#endif /* CONFIG_STACK_SENTINEL */

	bx lr
    7e5e:	4770      	bx	lr
	ldr r3, =_kernel
    7e60:	2000ed08 	.word	0x2000ed08
	ldr r1, =_SCS_ICSR
    7e64:	e000ed04 	.word	0xe000ed04

00007e68 <z_arm_interrupt_init>:
    7e68:	4804      	ldr	r0, [pc, #16]	; (7e7c <z_arm_interrupt_init+0x14>)
 * @return N/A
 */

void z_arm_interrupt_init(void)
{
	int irq = 0;
    7e6a:	2300      	movs	r3, #0
    7e6c:	2120      	movs	r1, #32
    7e6e:	18c2      	adds	r2, r0, r3

	for (; irq < CONFIG_NUM_IRQS; irq++) {
    7e70:	3301      	adds	r3, #1
    7e72:	2b30      	cmp	r3, #48	; 0x30
    7e74:	f882 1300 	strb.w	r1, [r2, #768]	; 0x300
    7e78:	d1f9      	bne.n	7e6e <z_arm_interrupt_init+0x6>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
	}
}
    7e7a:	4770      	bx	lr
    7e7c:	e000e100 	.word	0xe000e100

00007e80 <z_impl_k_thread_abort>:
#include <kswap.h>
#include <wait_q.h>
#include <sys/__assert.h>

void z_impl_k_thread_abort(k_tid_t thread)
{
    7e80:	b508      	push	{r3, lr}
	if (_current == thread) {
    7e82:	4b0e      	ldr	r3, [pc, #56]	; (7ebc <z_impl_k_thread_abort+0x3c>)
    7e84:	689b      	ldr	r3, [r3, #8]
    7e86:	4283      	cmp	r3, r0
    7e88:	d107      	bne.n	7e9a <z_impl_k_thread_abort+0x1a>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
    7e8a:	f3ef 8305 	mrs	r3, IPSR
		if (arch_is_in_isr()) {
    7e8e:	b193      	cbz	r3, 7eb6 <z_impl_k_thread_abort+0x36>
			 * should no longer run after we return, so
			 * Trigger PendSV, in case we are in one of the
			 * situations where the isr check is true but there
			 * is not an implicit scheduler invocation.
			 */
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
    7e90:	4a0b      	ldr	r2, [pc, #44]	; (7ec0 <z_impl_k_thread_abort+0x40>)
    7e92:	6853      	ldr	r3, [r2, #4]
    7e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
    7e98:	6053      	str	r3, [r2, #4]
		} else {
			z_self_abort(); /* Never returns */
		}
	}

	z_thread_single_abort(thread);
    7e9a:	f018 f919 	bl	200d0 <z_thread_single_abort>
	__asm__ volatile(
    7e9e:	f04f 0320 	mov.w	r3, #32
    7ea2:	f3ef 8011 	mrs	r0, BASEPRI
    7ea6:	f383 8811 	msr	BASEPRI, r3
    7eaa:	f3bf 8f6f 	isb	sy

	/* The abort handler might have altered the ready queue. */
	z_reschedule_unlocked();
}
    7eae:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void) z_pend_curr_irqlock(arch_irq_lock(), wait_q, timeout);
}

static inline void z_reschedule_unlocked(void)
{
	(void) z_reschedule_irqlock(arch_irq_lock());
    7eb2:	f01f b832 	b.w	26f1a <z_reschedule_irqlock>
			z_self_abort(); /* Never returns */
    7eb6:	f018 fbf5 	bl	206a4 <z_self_abort>
    7eba:	bf00      	nop
    7ebc:	2000ed08 	.word	0x2000ed08
    7ec0:	e000ed00 	.word	0xe000ed00

00007ec4 <z_arm_configure_static_mpu_regions>:
	/* Configure the static MPU regions within firmware SRAM boundaries.
	 * Start address of the image is given by _image_ram_start. The end
	 * of the firmware SRAM area is marked by __kernel_ram_end, taking
	 * into account the unused SRAM area, as well.
	 */
	arm_core_mpu_configure_static_mpu_regions(static_regions,
    7ec4:	4b02      	ldr	r3, [pc, #8]	; (7ed0 <z_arm_configure_static_mpu_regions+0xc>)
    7ec6:	4a03      	ldr	r2, [pc, #12]	; (7ed4 <z_arm_configure_static_mpu_regions+0x10>)
    7ec8:	4803      	ldr	r0, [pc, #12]	; (7ed8 <z_arm_configure_static_mpu_regions+0x14>)
    7eca:	2101      	movs	r1, #1
    7ecc:	f000 b8bc 	b.w	8048 <arm_core_mpu_configure_static_mpu_regions>
    7ed0:	20040000 	.word	0x20040000
    7ed4:	20000000 	.word	0x20000000
    7ed8:	00027f14 	.word	0x00027f14

00007edc <z_arm_configure_dynamic_mpu_regions>:
#endif /* CONFIG_USERSPACE */
	{
		/* A supervisor thread only has the normal thread stack to
		 * protect with a stack guard.
		 */
		guard_start = thread->stack_info.start - guard_size;
    7edc:	6ec2      	ldr	r2, [r0, #108]	; 0x6c
	}

	__ASSERT(region_num < _MAX_DYNAMIC_MPU_REGIONS_NUM,
		"Out-of-bounds error for dynamic region map.");

	dynamic_regions[region_num].start = guard_start;
    7ede:	4b05      	ldr	r3, [pc, #20]	; (7ef4 <z_arm_configure_dynamic_mpu_regions+0x18>)
		guard_start = thread->stack_info.start - guard_size;
    7ee0:	3a20      	subs	r2, #32
	dynamic_regions[region_num].start = guard_start;
    7ee2:	601a      	str	r2, [r3, #0]
	dynamic_regions[region_num].size = guard_size;
	dynamic_regions[region_num].attr = K_MEM_PARTITION_P_RO_U_NA;
    7ee4:	4a04      	ldr	r2, [pc, #16]	; (7ef8 <z_arm_configure_dynamic_mpu_regions+0x1c>)
    7ee6:	2120      	movs	r1, #32
    7ee8:	e9c3 1201 	strd	r1, r2, [r3, #4]

	region_num++;
#endif /* CONFIG_MPU_STACK_GUARD */

	/* Configure the dynamic MPU regions */
	arm_core_mpu_configure_dynamic_mpu_regions(dynamic_regions,
    7eec:	4618      	mov	r0, r3
    7eee:	2101      	movs	r1, #1
    7ef0:	f000 b8b4 	b.w	805c <arm_core_mpu_configure_dynamic_mpu_regions>
    7ef4:	2000d710 	.word	0x2000d710
    7ef8:	150b0000 	.word	0x150b0000

00007efc <mpu_configure_regions>:
 * sanity check of the memory regions to be programmed.
 */
static int mpu_configure_regions(const struct z_arm_mpu_partition
	regions[], uint8_t regions_num, uint8_t start_reg_index,
	bool do_sanity_check)
{
    7efc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 */
static void region_init(const uint32_t index,
	const struct arm_mpu_region *region_conf)
{
	/* Select the region you want to access */
	MPU->RNR = index;
    7efe:	4f2a      	ldr	r7, [pc, #168]	; (7fa8 <mpu_configure_regions+0xac>)
    7f00:	460e      	mov	r6, r1
	int i;
	int reg_index = start_reg_index;

	for (i = 0; i < regions_num; i++) {
    7f02:	2100      	movs	r1, #0
    7f04:	42b1      	cmp	r1, r6
    7f06:	da14      	bge.n	7f32 <mpu_configure_regions+0x36>
		if (regions[i].size == 0U) {
    7f08:	6844      	ldr	r4, [r0, #4]
    7f0a:	2c00      	cmp	r4, #0
    7f0c:	d048      	beq.n	7fa0 <mpu_configure_regions+0xa4>
			continue;
		}
		/* Non-empty region. */

		if (do_sanity_check &&
    7f0e:	b1c3      	cbz	r3, 7f42 <mpu_configure_regions+0x46>
	 * and greater or equal to the minimum
	 * MPU region size. Start address of the
	 * partition must align with size.
	 */
	int partition_is_valid =
		((part->size & (part->size - 1U)) == 0U)
    7f10:	f104 3cff 	add.w	ip, r4, #4294967295
		&&
		(part->size >= CONFIG_ARM_MPU_REGION_MIN_ALIGN_AND_SIZE)
		&&
    7f14:	ea14 0f0c 	tst.w	r4, ip
    7f18:	d00d      	beq.n	7f36 <mpu_configure_regions+0x3a>
    7f1a:	4a24      	ldr	r2, [pc, #144]	; (7fac <mpu_configure_regions+0xb0>)
    7f1c:	4b24      	ldr	r3, [pc, #144]	; (7fb0 <mpu_configure_regions+0xb4>)
				(!mpu_partition_is_valid(&regions[i]))) {
			LOG_ERR("Partition %u: sanity check failed.", i);
    7f1e:	4825      	ldr	r0, [pc, #148]	; (7fb4 <mpu_configure_regions+0xb8>)
    7f20:	1ad2      	subs	r2, r2, r3
    7f22:	08d2      	lsrs	r2, r2, #3
    7f24:	0192      	lsls	r2, r2, #6
    7f26:	f042 0201 	orr.w	r2, r2, #1
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7f2a:	f01a fa9e 	bl	2246a <log_1>
			return -EINVAL;
		}

		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7f2e:	f06f 0215 	mvn.w	r2, #21
		/* Increment number of programmed MPU indices. */
		reg_index++;
	}

	return reg_index;
}
    7f32:	4610      	mov	r0, r2
    7f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		&&
    7f36:	2c1f      	cmp	r4, #31
    7f38:	d9ef      	bls.n	7f1a <mpu_configure_regions+0x1e>
		((part->start & (part->size - 1U)) == 0U);
    7f3a:	6805      	ldr	r5, [r0, #0]
		&&
    7f3c:	ea1c 0f05 	tst.w	ip, r5
    7f40:	d1eb      	bne.n	7f1a <mpu_configure_regions+0x1e>
 * to that power-of-two value.
 */
static inline uint32_t size_to_mpu_rasr_size(uint32_t size)
{
	/* The minimal supported region size is 32 bytes */
	if (size <= 32U) {
    7f42:	2c20      	cmp	r4, #32
		reg_index = mpu_configure_region(reg_index, &regions[i]);
    7f44:	b2d5      	uxtb	r5, r2
	/* in ARMv7-M MPU the base address is not required
	 * to determine region attributes
	 */
	(void) base;

	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7f46:	f8d0 c008 	ldr.w	ip, [r0, #8]
	region_conf.base = new_region->start;
    7f4a:	6802      	ldr	r2, [r0, #0]
	if (size <= 32U) {
    7f4c:	d916      	bls.n	7f7c <mpu_configure_regions+0x80>
	if (size > (1UL << 31)) {
    7f4e:	f1b4 4f00 	cmp.w	r4, #2147483648	; 0x80000000
    7f52:	d815      	bhi.n	7f80 <mpu_configure_regions+0x84>
	return ((32 - __builtin_clz(size - 1U) - 2 + 1) << MPU_RASR_SIZE_Pos) &
    7f54:	3c01      	subs	r4, #1
    7f56:	fab4 f484 	clz	r4, r4
    7f5a:	f1c4 041f 	rsb	r4, r4, #31
    7f5e:	0064      	lsls	r4, r4, #1
	if (index > (get_num_regions() - 1U)) {
    7f60:	2d07      	cmp	r5, #7
	p_attr->rasr = attr->rasr_attr | size_to_mpu_rasr_size(size);
    7f62:	ea4c 0404 	orr.w	r4, ip, r4
    7f66:	d90d      	bls.n	7f84 <mpu_configure_regions+0x88>
    7f68:	4a10      	ldr	r2, [pc, #64]	; (7fac <mpu_configure_regions+0xb0>)
    7f6a:	4b11      	ldr	r3, [pc, #68]	; (7fb0 <mpu_configure_regions+0xb4>)
		LOG_ERR("Failed to allocate new MPU region %u\n", index);
    7f6c:	4812      	ldr	r0, [pc, #72]	; (7fb8 <mpu_configure_regions+0xbc>)
    7f6e:	1ad2      	subs	r2, r2, r3
    7f70:	08d2      	lsrs	r2, r2, #3
    7f72:	0192      	lsls	r2, r2, #6
    7f74:	f042 0201 	orr.w	r2, r2, #1
    7f78:	4629      	mov	r1, r5
    7f7a:	e7d6      	b.n	7f2a <mpu_configure_regions+0x2e>
		return REGION_32B;
    7f7c:	2408      	movs	r4, #8
    7f7e:	e7ef      	b.n	7f60 <mpu_configure_regions+0x64>
		return REGION_4G;
    7f80:	243e      	movs	r4, #62	; 0x3e
    7f82:	e7ed      	b.n	7f60 <mpu_configure_regions+0x64>
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7f84:	f022 021f 	bic.w	r2, r2, #31
				| MPU_RBAR_VALID_Msk | index;
    7f88:	432a      	orrs	r2, r5
    7f8a:	f042 0210 	orr.w	r2, r2, #16
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7f8e:	f044 0401 	orr.w	r4, r4, #1
	MPU->RNR = index;
    7f92:	f8c7 5098 	str.w	r5, [r7, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    7f96:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    7f9a:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
		reg_index++;
    7f9e:	1c6a      	adds	r2, r5, #1
	for (i = 0; i < regions_num; i++) {
    7fa0:	3101      	adds	r1, #1
    7fa2:	300c      	adds	r0, #12
    7fa4:	e7ae      	b.n	7f04 <mpu_configure_regions+0x8>
    7fa6:	bf00      	nop
    7fa8:	e000ed00 	.word	0xe000ed00
    7fac:	000279e8 	.word	0x000279e8
    7fb0:	000278c0 	.word	0x000278c0
    7fb4:	0002bcb4 	.word	0x0002bcb4
    7fb8:	0002bcd7 	.word	0x0002bcd7

00007fbc <arm_core_mpu_enable>:
void arm_core_mpu_enable(void)
{
	/* Enable MPU and use the default memory map as a
	 * background region for privileged software access.
	 */
	MPU->CTRL = MPU_CTRL_ENABLE_Msk | MPU_CTRL_PRIVDEFENA_Msk;
    7fbc:	4b04      	ldr	r3, [pc, #16]	; (7fd0 <arm_core_mpu_enable+0x14>)
    7fbe:	2205      	movs	r2, #5
    7fc0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  __ASM volatile ("dsb 0xF":::"memory");
    7fc4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
    7fc8:	f3bf 8f6f 	isb	sy

	/* Make sure that all the registers are set before proceeding */
	__DSB();
	__ISB();
}
    7fcc:	4770      	bx	lr
    7fce:	bf00      	nop
    7fd0:	e000ed00 	.word	0xe000ed00

00007fd4 <arm_core_mpu_disable>:
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
    7fd4:	f3bf 8f5f 	dmb	sy
{
	/* Force any outstanding transfers to complete before disabling MPU */
	__DMB();

	/* Disable MPU */
	MPU->CTRL = 0;
    7fd8:	4b02      	ldr	r3, [pc, #8]	; (7fe4 <arm_core_mpu_disable+0x10>)
    7fda:	2200      	movs	r2, #0
    7fdc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
}
    7fe0:	4770      	bx	lr
    7fe2:	bf00      	nop
    7fe4:	e000ed00 	.word	0xe000ed00

00007fe8 <arm_mpu_init>:
 */
static int arm_mpu_init(const struct device *arg)
{
	uint32_t r_index;

	if (mpu_config.num_regions > get_num_regions()) {
    7fe8:	4914      	ldr	r1, [pc, #80]	; (803c <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x3c>)
    7fea:	6808      	ldr	r0, [r1, #0]
    7fec:	2808      	cmp	r0, #8
{
    7fee:	b510      	push	{r4, lr}
	if (mpu_config.num_regions > get_num_regions()) {
    7ff0:	d821      	bhi.n	8036 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x36>
		return -1;
	}

	LOG_DBG("total region count: %d", get_num_regions());

	arm_core_mpu_disable();
    7ff2:	f7ff ffef 	bl	7fd4 <arm_core_mpu_disable>
	MPU->RNR = index;
    7ff6:	4c12      	ldr	r4, [pc, #72]	; (8040 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x40>)
    7ff8:	6849      	ldr	r1, [r1, #4]

	/* Architecture-specific configuration */
	mpu_init();

	/* Program fixed regions configured at SOC definition. */
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    7ffa:	2200      	movs	r2, #0
    7ffc:	4290      	cmp	r0, r2
    7ffe:	f101 010c 	add.w	r1, r1, #12
    8002:	d105      	bne.n	8010 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x10>
		region_init(r_index, &mpu_config.mpu_regions[r_index]);
	}

	/* Update the number of programmed MPU regions. */
	static_regions_num = mpu_config.num_regions;
    8004:	4b0f      	ldr	r3, [pc, #60]	; (8044 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x44>)
    8006:	7018      	strb	r0, [r3, #0]


	arm_core_mpu_enable();
    8008:	f7ff ffd8 	bl	7fbc <arm_core_mpu_enable>
	__ASSERT(
		(MPU->TYPE & MPU_TYPE_DREGION_Msk) >> MPU_TYPE_DREGION_Pos ==
		NUM_MPU_REGIONS,
		"Invalid number of MPU regions\n");
#endif /* CORTEX_M0PLUS || CPU_CORTEX_M3 || CPU_CORTEX_M4 */
	return 0;
    800c:	2000      	movs	r0, #0
}
    800e:	bd10      	pop	{r4, pc}
    8010:	f8c4 2098 	str.w	r2, [r4, #152]	; 0x98
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8014:	f851 3c0c 	ldr.w	r3, [r1, #-12]
    8018:	f023 031f 	bic.w	r3, r3, #31
				| MPU_RBAR_VALID_Msk | index;
    801c:	4313      	orrs	r3, r2
    801e:	f043 0310 	orr.w	r3, r3, #16
	MPU->RBAR = (region_conf->base & MPU_RBAR_ADDR_Msk)
    8022:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	MPU->RASR = region_conf->attr.rasr | MPU_RASR_ENABLE_Msk;
    8026:	f851 3c04 	ldr.w	r3, [r1, #-4]
    802a:	f043 0301 	orr.w	r3, r3, #1
    802e:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	for (r_index = 0U; r_index < mpu_config.num_regions; r_index++) {
    8032:	3201      	adds	r2, #1
    8034:	e7e2      	b.n	7ffc <arm_mpu_init+0x14>
		return -1;
    8036:	f04f 30ff 	mov.w	r0, #4294967295
    803a:	e7e8      	b.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>
    803c:	00027f20 	.word	0x00027f20
    8040:	e000ed00 	.word	0xe000ed00
    8044:	2000f1b3 	.word	0x2000f1b3

00008048 <arm_core_mpu_configure_static_mpu_regions>:
{
    8048:	b510      	push	{r4, lr}
static int mpu_configure_static_mpu_regions(const struct z_arm_mpu_partition
	static_regions[], const uint8_t regions_num,
	const uint32_t background_area_base,
	const uint32_t background_area_end)
{
	int mpu_reg_index = static_regions_num;
    804a:	4c03      	ldr	r4, [pc, #12]	; (8058 <arm_core_mpu_configure_static_mpu_regions+0x10>)
	 * programmed on top of SRAM region configuration.
	 */
	ARG_UNUSED(background_area_base);
	ARG_UNUSED(background_area_end);

	mpu_reg_index = mpu_configure_regions(static_regions,
    804c:	2301      	movs	r3, #1
    804e:	7822      	ldrb	r2, [r4, #0]
    8050:	f7ff ff54 	bl	7efc <mpu_configure_regions>
		regions_num, mpu_reg_index, true);

	static_regions_num = mpu_reg_index;
    8054:	7020      	strb	r0, [r4, #0]
}
    8056:	bd10      	pop	{r4, pc}
    8058:	2000f1b3 	.word	0x2000f1b3

0000805c <arm_core_mpu_configure_dynamic_mpu_regions>:
{
    805c:	b508      	push	{r3, lr}

	/* In ARMv7-M architecture the dynamic regions are
	 * programmed on top of existing SRAM region configuration.
	 */

	mpu_reg_index = mpu_configure_regions(dynamic_regions,
    805e:	4a09      	ldr	r2, [pc, #36]	; (8084 <arm_core_mpu_configure_dynamic_mpu_regions+0x28>)
    8060:	2300      	movs	r3, #0
    8062:	7812      	ldrb	r2, [r2, #0]
    8064:	f7ff ff4a 	bl	7efc <mpu_configure_regions>
		regions_num, mpu_reg_index, false);

	if (mpu_reg_index != -EINVAL) {
    8068:	f110 0f16 	cmn.w	r0, #22
    806c:	d003      	beq.n	8076 <arm_core_mpu_configure_dynamic_mpu_regions+0x1a>
/** Clear and disable the given MPU region.
* \param rnr Region number to be cleared.
*/
__STATIC_INLINE void ARM_MPU_ClrRegion(uint32_t rnr)
{
  MPU->RNR = rnr;
    806e:	4b06      	ldr	r3, [pc, #24]	; (8088 <arm_core_mpu_configure_dynamic_mpu_regions+0x2c>)
  MPU->RASR = 0U;
    8070:	2200      	movs	r2, #0

		/* Disable the non-programmed MPU regions. */
		for (int i = mpu_reg_index; i < get_num_regions(); i++) {
    8072:	2807      	cmp	r0, #7
    8074:	dd00      	ble.n	8078 <arm_core_mpu_configure_dynamic_mpu_regions+0x1c>
}
    8076:	bd08      	pop	{r3, pc}
  MPU->RNR = rnr;
    8078:	f8c3 0098 	str.w	r0, [r3, #152]	; 0x98
  MPU->RASR = 0U;
    807c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
    8080:	3001      	adds	r0, #1
    8082:	e7f6      	b.n	8072 <arm_core_mpu_configure_dynamic_mpu_regions+0x16>
    8084:	2000f1b3 	.word	0x2000f1b3
    8088:	e000ed00 	.word	0xe000ed00

0000808c <__stdout_hook_install>:

static int (*_stdout_hook)(int) = _stdout_hook_default;

void __stdout_hook_install(int (*hook)(int))
{
	_stdout_hook = hook;
    808c:	4b01      	ldr	r3, [pc, #4]	; (8094 <__stdout_hook_install+0x8>)
    808e:	6018      	str	r0, [r3, #0]
}
    8090:	4770      	bx	lr
    8092:	bf00      	nop
    8094:	200002d0 	.word	0x200002d0

00008098 <z_impl_zephyr_fputc>:

int z_impl_zephyr_fputc(int c, FILE *stream)
{
	return (stream == stdout || stream == stderr) ? _stdout_hook(c) : EOF;
    8098:	3902      	subs	r1, #2
    809a:	2901      	cmp	r1, #1
    809c:	d802      	bhi.n	80a4 <z_impl_zephyr_fputc+0xc>
    809e:	4b03      	ldr	r3, [pc, #12]	; (80ac <z_impl_zephyr_fputc+0x14>)
    80a0:	681b      	ldr	r3, [r3, #0]
    80a2:	4718      	bx	r3
}
    80a4:	f04f 30ff 	mov.w	r0, #4294967295
    80a8:	4770      	bx	lr
    80aa:	bf00      	nop
    80ac:	200002d0 	.word	0x200002d0

000080b0 <sprintf>:
	*(p.ptr) = 0;
	return r;
}

int sprintf(char *_MLIBC_RESTRICT s, const char *_MLIBC_RESTRICT format, ...)
{
    80b0:	b40e      	push	{r1, r2, r3}
    80b2:	b50f      	push	{r0, r1, r2, r3, lr}
    80b4:	ab05      	add	r3, sp, #20

	struct emitter p;
	int     r;

	p.ptr = s;
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    80b6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
{
    80ba:	f853 2b04 	ldr.w	r2, [r3], #4
	p.ptr = s;
    80be:	9002      	str	r0, [sp, #8]
	p.len = (int) 0x7fffffff; /* allow up to "maxint" characters */
    80c0:	9103      	str	r1, [sp, #12]

	va_start(vargs, format);
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    80c2:	4806      	ldr	r0, [pc, #24]	; (80dc <sprintf+0x2c>)
	va_start(vargs, format);
    80c4:	9301      	str	r3, [sp, #4]
	r = cbvprintf(sprintf_out, (void *) (&p), format, vargs);
    80c6:	a902      	add	r1, sp, #8
    80c8:	f7fc fb6c 	bl	47a4 <cbvprintf>
	va_end(vargs);

	*(p.ptr) = 0;
    80cc:	9b02      	ldr	r3, [sp, #8]
    80ce:	2200      	movs	r2, #0
    80d0:	701a      	strb	r2, [r3, #0]
	return r;
}
    80d2:	b004      	add	sp, #16
    80d4:	f85d eb04 	ldr.w	lr, [sp], #4
    80d8:	b003      	add	sp, #12
    80da:	4770      	bx	lr
    80dc:	0002450f 	.word	0x0002450f

000080e0 <printf>:

	return r;
}

int printf(const char *_MLIBC_RESTRICT format, ...)
{
    80e0:	b40f      	push	{r0, r1, r2, r3}
    80e2:	b507      	push	{r0, r1, r2, lr}
    80e4:	ab04      	add	r3, sp, #16
	va_list vargs;
	int     r;

	va_start(vargs, format);
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    80e6:	2102      	movs	r1, #2
{
    80e8:	f853 2b04 	ldr.w	r2, [r3], #4
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    80ec:	4804      	ldr	r0, [pc, #16]	; (8100 <printf+0x20>)
	va_start(vargs, format);
    80ee:	9301      	str	r3, [sp, #4]
	r = cbvprintf(fputc, DESC(stdout), format, vargs);
    80f0:	f7fc fb58 	bl	47a4 <cbvprintf>
	va_end(vargs);

	return r;
}
    80f4:	b003      	add	sp, #12
    80f6:	f85d eb04 	ldr.w	lr, [sp], #4
    80fa:	b004      	add	sp, #16
    80fc:	4770      	bx	lr
    80fe:	bf00      	nop
    8100:	0002450b 	.word	0x0002450b

00008104 <nordicsemi_nrf52_init>:
    8104:	f04f 0320 	mov.w	r3, #32
    8108:	f3ef 8211 	mrs	r2, BASEPRI
    810c:	f383 8811 	msr	BASEPRI, r3
    8110:	f3bf 8f6f 	isb	sy

	key = irq_lock();

#ifdef CONFIG_NRF_ENABLE_ICACHE
	/* Enable the instruction cache */
	NRF_NVMC->ICACHECNF = NVMC_ICACHECNF_CACHEEN_Msk;
    8114:	4906      	ldr	r1, [pc, #24]	; (8130 <nordicsemi_nrf52_init+0x2c>)
    8116:	2301      	movs	r3, #1
    8118:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
#endif

#if NRF_POWER_HAS_DCDCEN
NRF_STATIC_INLINE void nrf_power_dcdcen_set(NRF_POWER_Type * p_reg, bool enable)
{
    p_reg->DCDCEN = (enable ? POWER_DCDCEN_DCDCEN_Enabled : POWER_DCDCEN_DCDCEN_Disabled) <<
    811c:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    8120:	f8c1 3578 	str.w	r3, [r1, #1400]	; 0x578
	__asm__ volatile(
    8124:	f382 8811 	msr	BASEPRI, r2
    8128:	f3bf 8f6f 	isb	sy
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
    812c:	2000      	movs	r0, #0
    812e:	4770      	bx	lr
    8130:	4001e000 	.word	0x4001e000

00008134 <arch_busy_wait>:

#else // NRFX_CHECK(NRFX_DELAY_DWT_BASED)

NRF_STATIC_INLINE void nrfx_coredep_delay_us(uint32_t time_us)
{
    if (time_us == 0)
    8134:	b120      	cbz	r0, 8140 <arch_busy_wait+0xc>
    };

    typedef void (* delay_func_t)(uint32_t);
    const delay_func_t delay_cycles =
        // Set LSB to 1 to execute the code in the Thumb mode.
        (delay_func_t)((((uint32_t)delay_machine_code) | 1));
    8136:	4b03      	ldr	r3, [pc, #12]	; (8144 <arch_busy_wait+0x10>)
    uint32_t cycles = time_us * NRFX_DELAY_CPU_FREQ_MHZ;
    delay_cycles(cycles);
    8138:	0180      	lsls	r0, r0, #6
    813a:	f043 0301 	orr.w	r3, r3, #1
    813e:	4718      	bx	r3

void arch_busy_wait(uint32_t time_us)
{
	nrfx_coredep_delay_us(time_us);
}
    8140:	4770      	bx	lr
    8142:	bf00      	nop
    8144:	00027b40 	.word	0x00027b40

00008148 <bt_hex_real>:
	static const char hex[] = "0123456789abcdef";
	static char str[129];
	const uint8_t *b = buf;
	size_t i;

	len = MIN(len, (sizeof(str) - 1) / 2);
    8148:	4b0e      	ldr	r3, [pc, #56]	; (8184 <bt_hex_real+0x3c>)
    814a:	2940      	cmp	r1, #64	; 0x40
{
    814c:	b570      	push	{r4, r5, r6, lr}
	len = MIN(len, (sizeof(str) - 1) / 2);
    814e:	bf28      	it	cs
    8150:	2140      	movcs	r1, #64	; 0x40

	for (i = 0; i < len; i++) {
		str[i * 2]     = hex[b[i] >> 4];
    8152:	4c0d      	ldr	r4, [pc, #52]	; (8188 <bt_hex_real+0x40>)
    8154:	1846      	adds	r6, r0, r1
    8156:	461d      	mov	r5, r3
	for (i = 0; i < len; i++) {
    8158:	42b0      	cmp	r0, r6
    815a:	f103 0302 	add.w	r3, r3, #2
    815e:	d104      	bne.n	816a <bt_hex_real+0x22>
		str[i * 2 + 1] = hex[b[i] & 0xf];
	}

	str[i * 2] = '\0';
    8160:	2300      	movs	r3, #0
    8162:	f805 3011 	strb.w	r3, [r5, r1, lsl #1]

	return str;
}
    8166:	4807      	ldr	r0, [pc, #28]	; (8184 <bt_hex_real+0x3c>)
    8168:	bd70      	pop	{r4, r5, r6, pc}
		str[i * 2]     = hex[b[i] >> 4];
    816a:	7802      	ldrb	r2, [r0, #0]
    816c:	0912      	lsrs	r2, r2, #4
    816e:	5ca2      	ldrb	r2, [r4, r2]
    8170:	f803 2c02 	strb.w	r2, [r3, #-2]
		str[i * 2 + 1] = hex[b[i] & 0xf];
    8174:	f810 2b01 	ldrb.w	r2, [r0], #1
    8178:	f002 020f 	and.w	r2, r2, #15
    817c:	5ca2      	ldrb	r2, [r4, r2]
    817e:	f803 2c01 	strb.w	r2, [r3, #-1]
	for (i = 0; i < len; i++) {
    8182:	e7e9      	b.n	8158 <bt_hex_real+0x10>
    8184:	2000f1d2 	.word	0x2000f1d2
    8188:	0002bd10 	.word	0x0002bd10

0000818c <bt_addr_le_str_real>:

	return str;
}

const char *bt_addr_le_str_real(const bt_addr_le_t *addr)
{
    818c:	b530      	push	{r4, r5, lr}
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    818e:	7803      	ldrb	r3, [r0, #0]
    8190:	b08b      	sub	sp, #44	; 0x2c
    8192:	4604      	mov	r4, r0
    8194:	ad07      	add	r5, sp, #28
    8196:	2b03      	cmp	r3, #3
    8198:	d821      	bhi.n	81de <bt_addr_le_str_real+0x52>
    819a:	e8df f003 	tbb	[pc, r3]
    819e:	1a02      	.short	0x1a02
    81a0:	1e1c      	.short	0x1e1c
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    81a2:	4912      	ldr	r1, [pc, #72]	; (81ec <bt_addr_le_str_real+0x60>)
		break;
	case BT_ADDR_LE_RANDOM:
		strcpy(type, "random");
    81a4:	4628      	mov	r0, r5
    81a6:	f01c f905 	bl	243b4 <strcpy>
	default:
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    81aa:	7863      	ldrb	r3, [r4, #1]
    81ac:	9304      	str	r3, [sp, #16]
    81ae:	78a3      	ldrb	r3, [r4, #2]
    81b0:	9303      	str	r3, [sp, #12]
    81b2:	78e3      	ldrb	r3, [r4, #3]
    81b4:	9302      	str	r3, [sp, #8]
    81b6:	7923      	ldrb	r3, [r4, #4]
    81b8:	9301      	str	r3, [sp, #4]
    81ba:	7963      	ldrb	r3, [r4, #5]
    81bc:	9300      	str	r3, [sp, #0]
    81be:	4a0c      	ldr	r2, [pc, #48]	; (81f0 <bt_addr_le_str_real+0x64>)
    81c0:	79a3      	ldrb	r3, [r4, #6]
    81c2:	9505      	str	r5, [sp, #20]
    81c4:	211e      	movs	r1, #30
    81c6:	480b      	ldr	r0, [pc, #44]	; (81f4 <bt_addr_le_str_real+0x68>)
    81c8:	f019 fcb9 	bl	21b3e <snprintk>
	static char str[BT_ADDR_LE_STR_LEN];

	bt_addr_le_to_str(addr, str, sizeof(str));

	return str;
}
    81cc:	4809      	ldr	r0, [pc, #36]	; (81f4 <bt_addr_le_str_real+0x68>)
    81ce:	b00b      	add	sp, #44	; 0x2c
    81d0:	bd30      	pop	{r4, r5, pc}
		strcpy(type, "random");
    81d2:	4909      	ldr	r1, [pc, #36]	; (81f8 <bt_addr_le_str_real+0x6c>)
    81d4:	e7e6      	b.n	81a4 <bt_addr_le_str_real+0x18>
		strcpy(type, "public-id");
    81d6:	4909      	ldr	r1, [pc, #36]	; (81fc <bt_addr_le_str_real+0x70>)
    81d8:	e7e4      	b.n	81a4 <bt_addr_le_str_real+0x18>
		strcpy(type, "random-id");
    81da:	4909      	ldr	r1, [pc, #36]	; (8200 <bt_addr_le_str_real+0x74>)
    81dc:	e7e2      	b.n	81a4 <bt_addr_le_str_real+0x18>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    81de:	4a09      	ldr	r2, [pc, #36]	; (8204 <bt_addr_le_str_real+0x78>)
    81e0:	210a      	movs	r1, #10
    81e2:	4628      	mov	r0, r5
    81e4:	f019 fcab 	bl	21b3e <snprintk>
		break;
    81e8:	e7df      	b.n	81aa <bt_addr_le_str_real+0x1e>
    81ea:	bf00      	nop
    81ec:	00029392 	.word	0x00029392
    81f0:	000293b4 	.word	0x000293b4
    81f4:	2000f1b4 	.word	0x2000f1b4
    81f8:	00029399 	.word	0x00029399
    81fc:	000293a0 	.word	0x000293a0
    8200:	000293aa 	.word	0x000293aa
    8204:	0002d435 	.word	0x0002d435

00008208 <ecc_thread>:

	bt_recv(buf);
}

static void ecc_thread(void *p1, void *p2, void *p3)
{
    8208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    820c:	4b64      	ldr	r3, [pc, #400]	; (83a0 <ecc_thread+0x198>)
    820e:	4d65      	ldr	r5, [pc, #404]	; (83a4 <ecc_thread+0x19c>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8210:	f8df 8194 	ldr.w	r8, [pc, #404]	; 83a8 <ecc_thread+0x1a0>
	return z_impl_k_sem_take(sem, timeout);
    8214:	f8df 9194 	ldr.w	r9, [pc, #404]	; 83ac <ecc_thread+0x1a4>
    8218:	1aed      	subs	r5, r5, r3
    821a:	08ed      	lsrs	r5, r5, #3
    821c:	4647      	mov	r7, r8
    821e:	f04f 32ff 	mov.w	r2, #4294967295
    8222:	f04f 33ff 	mov.w	r3, #4294967295
    8226:	4648      	mov	r0, r9
    8228:	f018 f942 	bl	204b0 <z_impl_k_sem_take>
    822c:	f3bf 8f5b 	dmb	ish
    8230:	f8d8 4000 	ldr.w	r4, [r8]
    8234:	f3bf 8f5b 	dmb	ish
	while (true) {
		k_sem_take(&cmd_sem, K_FOREVER);

		if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    8238:	f014 0401 	ands.w	r4, r4, #1
    823c:	d05a      	beq.n	82f4 <ecc_thread+0xec>
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    823e:	f8df a170 	ldr.w	sl, [pc, #368]	; 83b0 <ecc_thread+0x1a8>
    8242:	4c5c      	ldr	r4, [pc, #368]	; (83b4 <ecc_thread+0x1ac>)
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    8244:	4e5c      	ldr	r6, [pc, #368]	; (83b8 <ecc_thread+0x1b0>)
		rc = uECC_make_key(ecc.public_key_be, ecc.private_key_be,
    8246:	485d      	ldr	r0, [pc, #372]	; (83bc <ecc_thread+0x1b4>)
    8248:	4652      	mov	r2, sl
    824a:	4621      	mov	r1, r4
    824c:	f01a ff35 	bl	230ba <uECC_make_key>
		if (rc == TC_CRYPTO_FAIL) {
    8250:	bbe8      	cbnz	r0, 82ce <ecc_thread+0xc6>
			BT_ERR("Failed to create ECC public/private pair");
    8252:	01a9      	lsls	r1, r5, #6
    8254:	485a      	ldr	r0, [pc, #360]	; (83c0 <ecc_thread+0x1b8>)
    8256:	f041 0101 	orr.w	r1, r1, #1
    825a:	f01a f8f9 	bl	22450 <log_0>
			return BT_HCI_ERR_UNSPECIFIED;
    825e:	f04f 0a1f 	mov.w	sl, #31
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    8262:	f04f 32ff 	mov.w	r2, #4294967295
    8266:	f04f 33ff 	mov.w	r3, #4294967295
    826a:	2001      	movs	r0, #1
    826c:	f000 fb1a 	bl	88a4 <bt_buf_get_rx>
    8270:	f100 0608 	add.w	r6, r0, #8
    8274:	2102      	movs	r1, #2
    8276:	4604      	mov	r4, r0
    8278:	4630      	mov	r0, r6
    827a:	f01e f949 	bl	26510 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    827e:	233e      	movs	r3, #62	; 0x3e
    8280:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    8282:	2342      	movs	r3, #66	; 0x42
    8284:	7043      	strb	r3, [r0, #1]
    8286:	2101      	movs	r1, #1
    8288:	4630      	mov	r0, r6
    828a:	f01e f941 	bl	26510 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_P256_PUBLIC_KEY_COMPLETE;
    828e:	2308      	movs	r3, #8
    8290:	7003      	strb	r3, [r0, #0]
    8292:	2141      	movs	r1, #65	; 0x41
    8294:	4630      	mov	r0, r6
    8296:	f01e f93b 	bl	26510 <net_buf_simple_add>
    829a:	4606      	mov	r6, r0
	evt->status = status;
    829c:	f800 ab01 	strb.w	sl, [r0], #1
	if (status) {
    82a0:	f1ba 0f00 	cmp.w	sl, #0
    82a4:	d01d      	beq.n	82e2 <ecc_thread+0xda>
		(void)memset(evt->key, 0, sizeof(evt->key));
    82a6:	2240      	movs	r2, #64	; 0x40
    82a8:	2100      	movs	r1, #0
    82aa:	f01c f908 	bl	244be <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    82ae:	f3bf 8f5b 	dmb	ish
    82b2:	e857 3f00 	ldrex	r3, [r7]
    82b6:	f023 0301 	bic.w	r3, r3, #1
    82ba:	e847 3200 	strex	r2, r3, [r7]
    82be:	2a00      	cmp	r2, #0
    82c0:	d1f7      	bne.n	82b2 <ecc_thread+0xaa>
    82c2:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    82c6:	4620      	mov	r0, r4
	bt_recv(buf);
    82c8:	f002 f85a 	bl	a380 <bt_recv>
	while (true) {
    82cc:	e7a7      	b.n	821e <ecc_thread+0x16>
	} while (memcmp(ecc.private_key_be, debug_private_key_be, 32) == 0);
    82ce:	2220      	movs	r2, #32
    82d0:	4631      	mov	r1, r6
    82d2:	4620      	mov	r0, r4
    82d4:	f01c f8b7 	bl	24446 <memcmp>
    82d8:	2800      	cmp	r0, #0
    82da:	d0b4      	beq.n	8246 <ecc_thread+0x3e>
	return 0;
    82dc:	f04f 0a00 	mov.w	sl, #0
    82e0:	e7bf      	b.n	8262 <ecc_thread+0x5a>
		sys_memcpy_swap(evt->key, ecc.public_key_be, 32);
    82e2:	4936      	ldr	r1, [pc, #216]	; (83bc <ecc_thread+0x1b4>)
    82e4:	f01c f9ab 	bl	2463e <sys_memcpy_swap.constprop.0>
		sys_memcpy_swap(&evt->key[32], &ecc.public_key_be[32], 32);
    82e8:	3120      	adds	r1, #32
    82ea:	f106 0021 	add.w	r0, r6, #33	; 0x21
    82ee:	f01c f9a6 	bl	2463e <sys_memcpy_swap.constprop.0>
    82f2:	e7dc      	b.n	82ae <ecc_thread+0xa6>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    82f4:	f3bf 8f5b 	dmb	ish
    82f8:	f8d8 3000 	ldr.w	r3, [r8]
    82fc:	f3bf 8f5b 	dmb	ish
			emulate_le_p256_public_key_cmd();
		} else if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8300:	079b      	lsls	r3, r3, #30
    8302:	d58c      	bpl.n	821e <ecc_thread+0x16>
	ret = uECC_valid_public_key(ecc.public_key_be, &curve_secp256r1);
    8304:	492a      	ldr	r1, [pc, #168]	; (83b0 <ecc_thread+0x1a8>)
    8306:	482d      	ldr	r0, [pc, #180]	; (83bc <ecc_thread+0x1b4>)
    8308:	f01b fd9c 	bl	23e44 <uECC_valid_public_key>
	if (ret < 0) {
    830c:	1e01      	subs	r1, r0, #0
    830e:	da38      	bge.n	8382 <ecc_thread+0x17a>
		BT_ERR("public key is not valid (ret %d)", ret);
    8310:	01aa      	lsls	r2, r5, #6
    8312:	482c      	ldr	r0, [pc, #176]	; (83c4 <ecc_thread+0x1bc>)
    8314:	f042 0201 	orr.w	r2, r2, #1
    8318:	f01a f8a7 	bl	2246a <log_1>
	buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    831c:	f04f 32ff 	mov.w	r2, #4294967295
    8320:	f04f 33ff 	mov.w	r3, #4294967295
    8324:	2001      	movs	r0, #1
    8326:	f000 fabd 	bl	88a4 <bt_buf_get_rx>
    832a:	f100 0a08 	add.w	sl, r0, #8
    832e:	2102      	movs	r1, #2
    8330:	4606      	mov	r6, r0
    8332:	4650      	mov	r0, sl
    8334:	f01e f8ec 	bl	26510 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_LE_META_EVENT;
    8338:	233e      	movs	r3, #62	; 0x3e
    833a:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*meta) + sizeof(*evt);
    833c:	2322      	movs	r3, #34	; 0x22
    833e:	7043      	strb	r3, [r0, #1]
    8340:	2101      	movs	r1, #1
    8342:	4650      	mov	r0, sl
    8344:	f01e f8e4 	bl	26510 <net_buf_simple_add>
	meta->subevent = BT_HCI_EVT_LE_GENERATE_DHKEY_COMPLETE;
    8348:	2309      	movs	r3, #9
    834a:	7003      	strb	r3, [r0, #0]
    834c:	2121      	movs	r1, #33	; 0x21
    834e:	4650      	mov	r0, sl
    8350:	f01e f8de 	bl	26510 <net_buf_simple_add>
    8354:	4603      	mov	r3, r0
	if (ret == TC_CRYPTO_FAIL) {
    8356:	3001      	adds	r0, #1
    8358:	b9e4      	cbnz	r4, 8394 <ecc_thread+0x18c>
		evt->status = BT_HCI_ERR_UNSPECIFIED;
    835a:	221f      	movs	r2, #31
    835c:	701a      	strb	r2, [r3, #0]
		(void)memset(evt->dhkey, 0xff, sizeof(evt->dhkey));
    835e:	21ff      	movs	r1, #255	; 0xff
    8360:	2220      	movs	r2, #32
    8362:	f01c f8ac 	bl	244be <memset>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8366:	f3bf 8f5b 	dmb	ish
    836a:	e857 3f00 	ldrex	r3, [r7]
    836e:	f023 0302 	bic.w	r3, r3, #2
    8372:	e847 3200 	strex	r2, r3, [r7]
    8376:	2a00      	cmp	r2, #0
    8378:	d1f7      	bne.n	836a <ecc_thread+0x162>
    837a:	f3bf 8f5b 	dmb	ish
	bt_recv(buf);
    837e:	4630      	mov	r0, r6
    8380:	e7a2      	b.n	82c8 <ecc_thread+0xc0>
		ret = uECC_shared_secret(ecc.public_key_be, ecc.private_key_be,
    8382:	4a0e      	ldr	r2, [pc, #56]	; (83bc <ecc_thread+0x1b4>)
    8384:	4b0a      	ldr	r3, [pc, #40]	; (83b0 <ecc_thread+0x1a8>)
    8386:	f1a2 0120 	sub.w	r1, r2, #32
    838a:	4610      	mov	r0, r2
    838c:	f01a fee4 	bl	23158 <uECC_shared_secret>
    8390:	4604      	mov	r4, r0
    8392:	e7c3      	b.n	831c <ecc_thread+0x114>
		evt->status = 0U;
    8394:	2200      	movs	r2, #0
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    8396:	4909      	ldr	r1, [pc, #36]	; (83bc <ecc_thread+0x1b4>)
		evt->status = 0U;
    8398:	701a      	strb	r2, [r3, #0]
		sys_memcpy_swap(evt->dhkey, ecc.dhkey_be, sizeof(ecc.dhkey_be));
    839a:	f01c f950 	bl	2463e <sys_memcpy_swap.constprop.0>
    839e:	e7e2      	b.n	8366 <ecc_thread+0x15e>
    83a0:	000278c0 	.word	0x000278c0
    83a4:	00027980 	.word	0x00027980
    83a8:	2000d71c 	.word	0x2000d71c
    83ac:	20009fc8 	.word	0x20009fc8
    83b0:	00027f40 	.word	0x00027f40
    83b4:	2000f253 	.word	0x2000f253
    83b8:	0002bd84 	.word	0x0002bd84
    83bc:	2000f273 	.word	0x2000f273
    83c0:	0002bd28 	.word	0x0002bd28
    83c4:	0002bd51 	.word	0x0002bd51

000083c8 <bt_hci_ecc_send>:

	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
}

int bt_hci_ecc_send(struct net_buf *buf)
{
    83c8:	b570      	push	{r4, r5, r6, lr}
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    83ca:	7d05      	ldrb	r5, [r0, #20]
    83cc:	4604      	mov	r4, r0
	if (bt_buf_get_type(buf) == BT_BUF_CMD) {
    83ce:	b9ad      	cbnz	r5, 83fc <bt_hci_ecc_send+0x34>
		struct bt_hci_cmd_hdr *chdr = (void *)buf->data;
    83d0:	6883      	ldr	r3, [r0, #8]

		switch (sys_le16_to_cpu(chdr->opcode)) {
    83d2:	881a      	ldrh	r2, [r3, #0]
    83d4:	f242 0125 	movw	r1, #8229	; 0x2025
    83d8:	428a      	cmp	r2, r1
    83da:	d017      	beq.n	840c <bt_hci_ecc_send+0x44>
    83dc:	f242 0126 	movw	r1, #8230	; 0x2026
    83e0:	428a      	cmp	r2, r1
    83e2:	d03c      	beq.n	845e <bt_hci_ecc_send+0x96>
    83e4:	f242 0101 	movw	r1, #8193	; 0x2001
    83e8:	428a      	cmp	r2, r1
    83ea:	d107      	bne.n	83fc <bt_hci_ecc_send+0x34>
	cmd->events[0] &= ~0x80; /* LE Read Local P-256 PKey Compl */
    83ec:	78da      	ldrb	r2, [r3, #3]
    83ee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    83f2:	70da      	strb	r2, [r3, #3]
	cmd->events[1] &= ~0x01; /* LE Generate DHKey Compl Event */
    83f4:	791a      	ldrb	r2, [r3, #4]
    83f6:	f022 0201 	bic.w	r2, r2, #1
    83fa:	711a      	strb	r2, [r3, #4]
		default:
			break;
		}
	}

	return bt_dev.drv->send(buf);
    83fc:	4b31      	ldr	r3, [pc, #196]	; (84c4 <bt_hci_ecc_send+0xfc>)
    83fe:	f8d3 311c 	ldr.w	r3, [r3, #284]	; 0x11c
    8402:	4620      	mov	r0, r4
    8404:	691b      	ldr	r3, [r3, #16]
}
    8406:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_dev.drv->send(buf);
    840a:	4718      	bx	r3
 *
 * @return New beginning of the buffer data.
 */
static inline void *net_buf_pull(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull(&buf->b, len);
    840c:	2103      	movs	r1, #3
    840e:	3008      	adds	r0, #8
    8410:	f01e f89d 	bl	2654e <net_buf_simple_pull>
	net_buf_unref(buf);
    8414:	4620      	mov	r0, r4
    8416:	f015 f949 	bl	1d6ac <net_buf_unref>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    841a:	f3bf 8f5b 	dmb	ish
    841e:	4b2a      	ldr	r3, [pc, #168]	; (84c8 <bt_hci_ecc_send+0x100>)
    8420:	681a      	ldr	r2, [r3, #0]
    8422:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_DHKEY)) {
    8426:	0790      	lsls	r0, r2, #30
    8428:	d507      	bpl.n	843a <bt_hci_ecc_send+0x72>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    842a:	250c      	movs	r5, #12
	send_cmd_status(BT_HCI_OP_LE_P256_PUBLIC_KEY, status);
    842c:	4629      	mov	r1, r5
    842e:	f242 0025 	movw	r0, #8229	; 0x2025
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    8432:	f01c f8e0 	bl	245f6 <send_cmd_status>
}
    8436:	2000      	movs	r0, #0
    8438:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    843a:	f3bf 8f5b 	dmb	ish
    843e:	e853 2f00 	ldrex	r2, [r3]
    8442:	f042 0101 	orr.w	r1, r2, #1
    8446:	e843 1000 	strex	r0, r1, [r3]
    844a:	2800      	cmp	r0, #0
    844c:	d1f7      	bne.n	843e <bt_hci_ecc_send+0x76>
    844e:	f3bf 8f5b 	dmb	ish
	} else if (atomic_test_and_set_bit(flags, PENDING_PUB_KEY)) {
    8452:	07d1      	lsls	r1, r2, #31
    8454:	d4e9      	bmi.n	842a <bt_hci_ecc_send+0x62>
	z_impl_k_sem_give(sem);
    8456:	481d      	ldr	r0, [pc, #116]	; (84cc <bt_hci_ecc_send+0x104>)
    8458:	f018 f804 	bl	20464 <z_impl_k_sem_give>
}
    845c:	e7e6      	b.n	842c <bt_hci_ecc_send+0x64>
    845e:	2103      	movs	r1, #3
    8460:	3008      	adds	r0, #8
    8462:	f01e f874 	bl	2654e <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    8466:	f3bf 8f5b 	dmb	ish
    846a:	4b17      	ldr	r3, [pc, #92]	; (84c8 <bt_hci_ecc_send+0x100>)
    846c:	681a      	ldr	r2, [r3, #0]
    846e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(flags, PENDING_PUB_KEY)) {
    8472:	07d2      	lsls	r2, r2, #31
    8474:	d507      	bpl.n	8486 <bt_hci_ecc_send+0xbe>
		status = BT_HCI_ERR_CMD_DISALLOWED;
    8476:	250c      	movs	r5, #12
	net_buf_unref(buf);
    8478:	4620      	mov	r0, r4
    847a:	f015 f917 	bl	1d6ac <net_buf_unref>
	send_cmd_status(BT_HCI_OP_LE_GENERATE_DHKEY, status);
    847e:	4629      	mov	r1, r5
    8480:	f242 0026 	movw	r0, #8230	; 0x2026
    8484:	e7d5      	b.n	8432 <bt_hci_ecc_send+0x6a>
	if (buf->len < sizeof(struct bt_hci_cp_le_generate_dhkey)) {
    8486:	89a2      	ldrh	r2, [r4, #12]
    8488:	2a3f      	cmp	r2, #63	; 0x3f
    848a:	d919      	bls.n	84c0 <bt_hci_ecc_send+0xf8>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    848c:	f3bf 8f5b 	dmb	ish
    8490:	e853 2f00 	ldrex	r2, [r3]
    8494:	f042 0102 	orr.w	r1, r2, #2
    8498:	e843 1000 	strex	r0, r1, [r3]
    849c:	2800      	cmp	r0, #0
    849e:	d1f7      	bne.n	8490 <bt_hci_ecc_send+0xc8>
    84a0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(flags, PENDING_DHKEY)) {
    84a4:	0793      	lsls	r3, r2, #30
    84a6:	d4e6      	bmi.n	8476 <bt_hci_ecc_send+0xae>
	cmd = (void *)buf->data;
    84a8:	68a1      	ldr	r1, [r4, #8]
	sys_memcpy_swap(ecc.public_key_be, cmd->key, 32);
    84aa:	4809      	ldr	r0, [pc, #36]	; (84d0 <bt_hci_ecc_send+0x108>)
    84ac:	f01c f8c7 	bl	2463e <sys_memcpy_swap.constprop.0>
	sys_memcpy_swap(&ecc.public_key_be[32], &cmd->key[32], 32);
    84b0:	4808      	ldr	r0, [pc, #32]	; (84d4 <bt_hci_ecc_send+0x10c>)
    84b2:	3120      	adds	r1, #32
    84b4:	f01c f8c3 	bl	2463e <sys_memcpy_swap.constprop.0>
	z_impl_k_sem_give(sem);
    84b8:	4804      	ldr	r0, [pc, #16]	; (84cc <bt_hci_ecc_send+0x104>)
    84ba:	f017 ffd3 	bl	20464 <z_impl_k_sem_give>
}
    84be:	e7db      	b.n	8478 <bt_hci_ecc_send+0xb0>
		status = BT_HCI_ERR_INVALID_PARAM;
    84c0:	2512      	movs	r5, #18
    84c2:	e7d9      	b.n	8478 <bt_hci_ecc_send+0xb0>
    84c4:	20000008 	.word	0x20000008
    84c8:	2000d71c 	.word	0x2000d71c
    84cc:	20009fc8 	.word	0x20009fc8
    84d0:	2000f273 	.word	0x2000f273
    84d4:	2000f293 	.word	0x2000f293

000084d8 <bt_hci_ecc_init>:
{
	return !bt_rand(dst, len);
}

void bt_hci_ecc_init(void)
{
    84d8:	b510      	push	{r4, lr}
    84da:	b088      	sub	sp, #32
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    84dc:	4c0c      	ldr	r4, [pc, #48]	; (8510 <bt_hci_ecc_init+0x38>)
    84de:	490d      	ldr	r1, [pc, #52]	; (8514 <bt_hci_ecc_init+0x3c>)
    84e0:	2200      	movs	r2, #0
    84e2:	2300      	movs	r3, #0
    84e4:	e9cd 2306 	strd	r2, r3, [sp, #24]
    84e8:	2300      	movs	r3, #0
    84ea:	220a      	movs	r2, #10
    84ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
    84f0:	e9cd 3301 	strd	r3, r3, [sp, #4]
    84f4:	9300      	str	r3, [sp, #0]
    84f6:	f44f 628a 	mov.w	r2, #1104	; 0x450
    84fa:	4b07      	ldr	r3, [pc, #28]	; (8518 <bt_hci_ecc_init+0x40>)
    84fc:	4620      	mov	r0, r4
    84fe:	f018 f849 	bl	20594 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    8502:	4906      	ldr	r1, [pc, #24]	; (851c <bt_hci_ecc_init+0x44>)
    8504:	4620      	mov	r0, r4
	k_thread_create(&ecc_thread_data, ecc_thread_stack,
			K_KERNEL_STACK_SIZEOF(ecc_thread_stack), ecc_thread,
			NULL, NULL, NULL, K_PRIO_PREEMPT(10), 0, K_NO_WAIT);
	k_thread_name_set(&ecc_thread_data, "BT ECC");
}
    8506:	b008      	add	sp, #32
    8508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    850c:	f01e bdf3 	b.w	270f6 <z_impl_k_thread_name_set>
    8510:	2000a560 	.word	0x2000a560
    8514:	20010320 	.word	0x20010320
    8518:	00008209 	.word	0x00008209
    851c:	0002bd72 	.word	0x0002bd72

00008520 <save_id>:
}

#define ID_DATA_LEN(array) (bt_dev.id_count * sizeof(array[0]))

static void save_id(struct k_work *work)
{
    8520:	b538      	push	{r3, r4, r5, lr}
    8522:	4b14      	ldr	r3, [pc, #80]	; (8574 <save_id+0x54>)
    8524:	4c14      	ldr	r4, [pc, #80]	; (8578 <save_id+0x58>)
	int err;
	BT_INFO("Saving ID");
	err = settings_save_one("bt/id", &bt_dev.id_addr,
				ID_DATA_LEN(bt_dev.id_addr));
    8526:	4d15      	ldr	r5, [pc, #84]	; (857c <save_id+0x5c>)
	BT_INFO("Saving ID");
    8528:	4815      	ldr	r0, [pc, #84]	; (8580 <save_id+0x60>)
    852a:	1ae4      	subs	r4, r4, r3
    852c:	08e4      	lsrs	r4, r4, #3
    852e:	01a4      	lsls	r4, r4, #6
    8530:	f044 0103 	orr.w	r1, r4, #3
    8534:	f019 ff8c 	bl	22450 <log_0>
	err = settings_save_one("bt/id", &bt_dev.id_addr,
    8538:	79ea      	ldrb	r2, [r5, #7]
    853a:	4812      	ldr	r0, [pc, #72]	; (8584 <save_id+0x64>)
    853c:	4629      	mov	r1, r5
    853e:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
    8542:	f7fe f993 	bl	686c <settings_save_one>
	if (err) {
    8546:	4601      	mov	r1, r0
    8548:	b120      	cbz	r0, 8554 <save_id+0x34>
		BT_ERR("Failed to save ID (err %d)", err);
    854a:	480f      	ldr	r0, [pc, #60]	; (8588 <save_id+0x68>)
    854c:	f044 0201 	orr.w	r2, r4, #1
    8550:	f019 ff8b 	bl	2246a <log_1>
	}

#if defined(CONFIG_BT_PRIVACY)
	err = settings_save_one("bt/irk", bt_dev.irk, ID_DATA_LEN(bt_dev.irk));
    8554:	79ea      	ldrb	r2, [r5, #7]
    8556:	490d      	ldr	r1, [pc, #52]	; (858c <save_id+0x6c>)
    8558:	480d      	ldr	r0, [pc, #52]	; (8590 <save_id+0x70>)
    855a:	0112      	lsls	r2, r2, #4
    855c:	f7fe f986 	bl	686c <settings_save_one>
	if (err) {
    8560:	4601      	mov	r1, r0
    8562:	b130      	cbz	r0, 8572 <save_id+0x52>
		BT_ERR("Failed to save IRK (err %d)", err);
    8564:	f044 0201 	orr.w	r2, r4, #1
    8568:	480a      	ldr	r0, [pc, #40]	; (8594 <save_id+0x74>)
	}
#endif
}
    856a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Failed to save IRK (err %d)", err);
    856e:	f019 bf7c 	b.w	2246a <log_1>
}
    8572:	bd38      	pop	{r3, r4, r5, pc}
    8574:	000278c0 	.word	0x000278c0
    8578:	000279a0 	.word	0x000279a0
    857c:	20000008 	.word	0x20000008
    8580:	0002bda4 	.word	0x0002bda4
    8584:	0002bdae 	.word	0x0002bdae
    8588:	0002bdb4 	.word	0x0002bdb4
    858c:	20000128 	.word	0x20000128
    8590:	0002bdcf 	.word	0x0002bdcf
    8594:	0002bdd6 	.word	0x0002bdd6

00008598 <set>:
{
    8598:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    859c:	4605      	mov	r5, r0
    859e:	4616      	mov	r6, r2
    85a0:	461f      	mov	r7, r3
	if (!name) {
    85a2:	b960      	cbnz	r0, 85be <set+0x26>
    85a4:	4942      	ldr	r1, [pc, #264]	; (86b0 <set+0x118>)
    85a6:	4b43      	ldr	r3, [pc, #268]	; (86b4 <set+0x11c>)
		BT_ERR("Insufficient number of arguments");
    85a8:	4843      	ldr	r0, [pc, #268]	; (86b8 <set+0x120>)
    85aa:	1ac9      	subs	r1, r1, r3
    85ac:	08c9      	lsrs	r1, r1, #3
    85ae:	0189      	lsls	r1, r1, #6
    85b0:	f041 0101 	orr.w	r1, r1, #1
    85b4:	f019 ff4c 	bl	22450 <log_0>
	return -ENOENT;
    85b8:	f06f 0401 	mvn.w	r4, #1
    85bc:	e01c      	b.n	85f8 <set+0x60>
	len = settings_name_next(name, &next);
    85be:	a901      	add	r1, sp, #4
    85c0:	f01a fbfb 	bl	22dba <settings_name_next>
	if (!strncmp(name, "id", len)) {
    85c4:	493d      	ldr	r1, [pc, #244]	; (86bc <set+0x124>)
    85c6:	4602      	mov	r2, r0
	len = settings_name_next(name, &next);
    85c8:	4680      	mov	r8, r0
	if (!strncmp(name, "id", len)) {
    85ca:	4628      	mov	r0, r5
    85cc:	f01b ff2a 	bl	24424 <strncmp>
    85d0:	4604      	mov	r4, r0
    85d2:	bb90      	cbnz	r0, 863a <set+0xa2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    85d4:	f3bf 8f5b 	dmb	ish
    85d8:	4d39      	ldr	r5, [pc, #228]	; (86c0 <set+0x128>)
    85da:	682b      	ldr	r3, [r5, #0]
    85dc:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_PRESET_ID)) {
    85e0:	075b      	lsls	r3, r3, #29
    85e2:	d50d      	bpl.n	8600 <set+0x68>
    85e4:	4932      	ldr	r1, [pc, #200]	; (86b0 <set+0x118>)
    85e6:	4b33      	ldr	r3, [pc, #204]	; (86b4 <set+0x11c>)
			BT_WARN("Ignoring identities stored in flash");
    85e8:	4836      	ldr	r0, [pc, #216]	; (86c4 <set+0x12c>)
    85ea:	1ac9      	subs	r1, r1, r3
    85ec:	08c9      	lsrs	r1, r1, #3
    85ee:	0189      	lsls	r1, r1, #6
    85f0:	f041 0102 	orr.w	r1, r1, #2
    85f4:	f019 ff2c 	bl	22450 <log_0>
}
    85f8:	4620      	mov	r0, r4
    85fa:	b002      	add	sp, #8
    85fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		len = read_cb(cb_arg, &bt_dev.id_addr, sizeof(bt_dev.id_addr));
    8600:	3d94      	subs	r5, #148	; 0x94
    8602:	2207      	movs	r2, #7
    8604:	4629      	mov	r1, r5
    8606:	4638      	mov	r0, r7
    8608:	47b0      	blx	r6
		if (len < sizeof(bt_dev.id_addr[0])) {
    860a:	2806      	cmp	r0, #6
    860c:	d810      	bhi.n	8630 <set+0x98>
    860e:	4b29      	ldr	r3, [pc, #164]	; (86b4 <set+0x11c>)
    8610:	4927      	ldr	r1, [pc, #156]	; (86b0 <set+0x118>)
				BT_ERR("Invalid length ID address in storage");
    8612:	482d      	ldr	r0, [pc, #180]	; (86c8 <set+0x130>)
    8614:	1ac9      	subs	r1, r1, r3
    8616:	08c9      	lsrs	r1, r1, #3
    8618:	0189      	lsls	r1, r1, #6
    861a:	f041 0101 	orr.w	r1, r1, #1
    861e:	f019 ff17 	bl	22450 <log_0>
			(void)memset(bt_dev.id_addr, 0,
    8622:	2207      	movs	r2, #7
    8624:	4621      	mov	r1, r4
    8626:	4628      	mov	r0, r5
    8628:	f01b ff49 	bl	244be <memset>
			bt_dev.id_count = 0U;
    862c:	71ec      	strb	r4, [r5, #7]
    862e:	e7e3      	b.n	85f8 <set+0x60>
			bt_dev.id_count = len / sizeof(bt_dev.id_addr[0]);
    8630:	2307      	movs	r3, #7
    8632:	fbb0 f0f3 	udiv	r0, r0, r3
    8636:	71e8      	strb	r0, [r5, #7]
			for (i = 0; i < bt_dev.id_count; i++) {
    8638:	e7de      	b.n	85f8 <set+0x60>
	if (!strncmp(name, "name", len)) {
    863a:	4924      	ldr	r1, [pc, #144]	; (86cc <set+0x134>)
    863c:	4642      	mov	r2, r8
    863e:	4628      	mov	r0, r5
    8640:	f01b fef0 	bl	24424 <strncmp>
    8644:	4604      	mov	r4, r0
    8646:	b9a8      	cbnz	r0, 8674 <set+0xdc>
		len = read_cb(cb_arg, &bt_dev.name, sizeof(bt_dev.name) - 1);
    8648:	4921      	ldr	r1, [pc, #132]	; (86d0 <set+0x138>)
    864a:	2241      	movs	r2, #65	; 0x41
    864c:	4638      	mov	r0, r7
    864e:	47b0      	blx	r6
		if (len < 0) {
    8650:	1e01      	subs	r1, r0, #0
    8652:	da0a      	bge.n	866a <set+0xd2>
    8654:	4b17      	ldr	r3, [pc, #92]	; (86b4 <set+0x11c>)
    8656:	4a16      	ldr	r2, [pc, #88]	; (86b0 <set+0x118>)
			BT_ERR("Failed to read device name from storage"
    8658:	481e      	ldr	r0, [pc, #120]	; (86d4 <set+0x13c>)
    865a:	1ad2      	subs	r2, r2, r3
    865c:	08d2      	lsrs	r2, r2, #3
    865e:	0192      	lsls	r2, r2, #6
    8660:	f042 0201 	orr.w	r2, r2, #1
    8664:	f019 ff01 	bl	2246a <log_1>
    8668:	e7c6      	b.n	85f8 <set+0x60>
			bt_dev.name[len] = '\0';
    866a:	481b      	ldr	r0, [pc, #108]	; (86d8 <set+0x140>)
    866c:	4408      	add	r0, r1
    866e:	f880 4160 	strb.w	r4, [r0, #352]	; 0x160
			BT_DBG("Name set to %s", log_strdup(bt_dev.name));
    8672:	e7c1      	b.n	85f8 <set+0x60>
	if (!strncmp(name, "irk", len)) {
    8674:	4919      	ldr	r1, [pc, #100]	; (86dc <set+0x144>)
    8676:	4642      	mov	r2, r8
    8678:	4628      	mov	r0, r5
    867a:	f01b fed3 	bl	24424 <strncmp>
    867e:	4604      	mov	r4, r0
    8680:	2800      	cmp	r0, #0
    8682:	d199      	bne.n	85b8 <set+0x20>
		len = read_cb(cb_arg, bt_dev.irk, sizeof(bt_dev.irk));
    8684:	4916      	ldr	r1, [pc, #88]	; (86e0 <set+0x148>)
    8686:	2210      	movs	r2, #16
    8688:	4638      	mov	r0, r7
    868a:	47b0      	blx	r6
		if (len < sizeof(bt_dev.irk[0])) {
    868c:	280f      	cmp	r0, #15
    868e:	d8b3      	bhi.n	85f8 <set+0x60>
    8690:	4b08      	ldr	r3, [pc, #32]	; (86b4 <set+0x11c>)
    8692:	4907      	ldr	r1, [pc, #28]	; (86b0 <set+0x118>)
				BT_ERR("Invalid length IRK in storage");
    8694:	4813      	ldr	r0, [pc, #76]	; (86e4 <set+0x14c>)
    8696:	1ac9      	subs	r1, r1, r3
    8698:	08c9      	lsrs	r1, r1, #3
    869a:	0189      	lsls	r1, r1, #6
    869c:	f041 0101 	orr.w	r1, r1, #1
    86a0:	f019 fed6 	bl	22450 <log_0>
				(void)memset(bt_dev.irk, 0, sizeof(bt_dev.irk));
    86a4:	2210      	movs	r2, #16
    86a6:	4621      	mov	r1, r4
    86a8:	480d      	ldr	r0, [pc, #52]	; (86e0 <set+0x148>)
    86aa:	f01b ff08 	bl	244be <memset>
    86ae:	e7a3      	b.n	85f8 <set+0x60>
    86b0:	000279a0 	.word	0x000279a0
    86b4:	000278c0 	.word	0x000278c0
    86b8:	0002bdf2 	.word	0x0002bdf2
    86bc:	000293a7 	.word	0x000293a7
    86c0:	2000009c 	.word	0x2000009c
    86c4:	0002be13 	.word	0x0002be13
    86c8:	0002be37 	.word	0x0002be37
    86cc:	0002c7ea 	.word	0x0002c7ea
    86d0:	20000168 	.word	0x20000168
    86d4:	0002be5c 	.word	0x0002be5c
    86d8:	20000008 	.word	0x20000008
    86dc:	0002bdd2 	.word	0x0002bdd2
    86e0:	20000128 	.word	0x20000128
    86e4:	0002be8e 	.word	0x0002be8e

000086e8 <bt_settings_encode_key>:
{
    86e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    86ec:	b088      	sub	sp, #32
		snprintk(path, path_size,
    86ee:	799c      	ldrb	r4, [r3, #6]
{
    86f0:	f8dd 8038 	ldr.w	r8, [sp, #56]	; 0x38
		snprintk(path, path_size,
    86f4:	795d      	ldrb	r5, [r3, #5]
    86f6:	791e      	ldrb	r6, [r3, #4]
    86f8:	78df      	ldrb	r7, [r3, #3]
    86fa:	f893 c002 	ldrb.w	ip, [r3, #2]
    86fe:	f893 e001 	ldrb.w	lr, [r3, #1]
    8702:	781b      	ldrb	r3, [r3, #0]
	if (key) {
    8704:	f1b8 0f00 	cmp.w	r8, #0
    8708:	d00e      	beq.n	8728 <bt_settings_encode_key+0x40>
		snprintk(path, path_size,
    870a:	e9cd 3806 	strd	r3, r8, [sp, #24]
    870e:	e9cd ce04 	strd	ip, lr, [sp, #16]
    8712:	4613      	mov	r3, r2
    8714:	e9cd 6702 	strd	r6, r7, [sp, #8]
    8718:	e9cd 4500 	strd	r4, r5, [sp]
    871c:	4a08      	ldr	r2, [pc, #32]	; (8740 <bt_settings_encode_key+0x58>)
    871e:	f019 fa0e 	bl	21b3e <snprintk>
}
    8722:	b008      	add	sp, #32
    8724:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		snprintk(path, path_size,
    8728:	e9cd e305 	strd	lr, r3, [sp, #20]
    872c:	e9cd 7c03 	strd	r7, ip, [sp, #12]
    8730:	4613      	mov	r3, r2
    8732:	e9cd 5601 	strd	r5, r6, [sp, #4]
    8736:	4a03      	ldr	r2, [pc, #12]	; (8744 <bt_settings_encode_key+0x5c>)
    8738:	9400      	str	r4, [sp, #0]
    873a:	f019 fa00 	bl	21b3e <snprintk>
}
    873e:	e7f0      	b.n	8722 <bt_settings_encode_key+0x3a>
    8740:	0002beac 	.word	0x0002beac
    8744:	0002bed0 	.word	0x0002bed0

00008748 <bt_settings_save_id>:
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8748:	4909      	ldr	r1, [pc, #36]	; (8770 <bt_settings_save_id+0x28>)
    874a:	f3bf 8f5b 	dmb	ish
    874e:	e851 3f00 	ldrex	r3, [r1]
    8752:	f043 0201 	orr.w	r2, r3, #1
    8756:	e841 2000 	strex	r0, r2, [r1]
    875a:	2800      	cmp	r0, #0
    875c:	d1f7      	bne.n	874e <bt_settings_save_id+0x6>
    875e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    8762:	07db      	lsls	r3, r3, #31
    8764:	d403      	bmi.n	876e <bt_settings_save_id+0x26>
		k_queue_append(&work_q->queue, work);
    8766:	4803      	ldr	r0, [pc, #12]	; (8774 <bt_settings_save_id+0x2c>)
    8768:	3908      	subs	r1, #8
    876a:	f01e bb6c 	b.w	26e46 <k_queue_append>
K_WORK_DEFINE(save_id_work, save_id);

void bt_settings_save_id(void)
{
	k_work_submit(&save_id_work);
}
    876e:	4770      	bx	lr
    8770:	200002dc 	.word	0x200002dc
    8774:	2000aca8 	.word	0x2000aca8

00008778 <commit>:

static int commit(void)
{
    8778:	b538      	push	{r3, r4, r5, lr}
	BT_DBG("");

#if defined(CONFIG_BT_DEVICE_NAME_DYNAMIC)
	if (bt_dev.name[0] == '\0') {
    877a:	4c1d      	ldr	r4, [pc, #116]	; (87f0 <commit+0x78>)
    877c:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
    8780:	b913      	cbnz	r3, 8788 <commit+0x10>
		bt_set_name(CONFIG_BT_DEVICE_NAME);
    8782:	481c      	ldr	r0, [pc, #112]	; (87f4 <commit+0x7c>)
    8784:	f001 ffc4 	bl	a710 <bt_set_name>
	}
#endif
	if (!bt_dev.id_count) {
    8788:	79e3      	ldrb	r3, [r4, #7]
    878a:	b99b      	cbnz	r3, 87b4 <commit+0x3c>
		bt_setup_public_id_addr();
    878c:	f002 f87a 	bl	a884 <bt_setup_public_id_addr>
	}

	if (!bt_dev.id_count) {
    8790:	79e3      	ldrb	r3, [r4, #7]
    8792:	b97b      	cbnz	r3, 87b4 <commit+0x3c>
		int err;

		err = bt_setup_random_id_addr();
    8794:	f002 f95c 	bl	aa50 <bt_setup_random_id_addr>
		if (err) {
    8798:	4604      	mov	r4, r0
    879a:	b158      	cbz	r0, 87b4 <commit+0x3c>
    879c:	4916      	ldr	r1, [pc, #88]	; (87f8 <commit+0x80>)
    879e:	4b17      	ldr	r3, [pc, #92]	; (87fc <commit+0x84>)
			BT_ERR("Unable to setup an identity address");
    87a0:	4817      	ldr	r0, [pc, #92]	; (8800 <commit+0x88>)
    87a2:	1ac9      	subs	r1, r1, r3
    87a4:	08c9      	lsrs	r1, r1, #3
    87a6:	0189      	lsls	r1, r1, #6
    87a8:	f041 0101 	orr.w	r1, r1, #1
    87ac:	f019 fe50 	bl	22450 <log_0>
		BT_DBG("Storing Identity Information");
		bt_settings_save_id();
	}

	return 0;
}
    87b0:	4620      	mov	r0, r4
    87b2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    87b4:	4d13      	ldr	r5, [pc, #76]	; (8804 <commit+0x8c>)
    87b6:	f3bf 8f5b 	dmb	ish
    87ba:	682b      	ldr	r3, [r5, #0]
    87bc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    87c0:	079b      	lsls	r3, r3, #30
    87c2:	d401      	bmi.n	87c8 <commit+0x50>
		bt_finalize_init();
    87c4:	f001 feb2 	bl	a52c <bt_finalize_init>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    87c8:	f3bf 8f5b 	dmb	ish
    87cc:	e855 4f00 	ldrex	r4, [r5]
    87d0:	f424 4300 	bic.w	r3, r4, #32768	; 0x8000
    87d4:	e845 3200 	strex	r2, r3, [r5]
    87d8:	2a00      	cmp	r2, #0
    87da:	d1f7      	bne.n	87cc <commit+0x54>
    87dc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_STORE_ID)) {
    87e0:	f414 4400 	ands.w	r4, r4, #32768	; 0x8000
    87e4:	d0e4      	beq.n	87b0 <commit+0x38>
		bt_settings_save_id();
    87e6:	f7ff ffaf 	bl	8748 <bt_settings_save_id>
	return 0;
    87ea:	2400      	movs	r4, #0
    87ec:	e7e0      	b.n	87b0 <commit+0x38>
    87ee:	bf00      	nop
    87f0:	20000008 	.word	0x20000008
    87f4:	0002bef1 	.word	0x0002bef1
    87f8:	000279a0 	.word	0x000279a0
    87fc:	000278c0 	.word	0x000278c0
    8800:	0002bf09 	.word	0x0002bf09
    8804:	2000009c 	.word	0x2000009c

00008808 <bt_settings_init>:

SETTINGS_STATIC_HANDLER_DEFINE(bt, "bt", NULL, set, commit, NULL);

int bt_settings_init(void)
{
    8808:	b510      	push	{r4, lr}
	int err;

	BT_DBG("");

	err = settings_subsys_init();
    880a:	f7fe f993 	bl	6b34 <settings_subsys_init>
	if (err) {
    880e:	4604      	mov	r4, r0
    8810:	b150      	cbz	r0, 8828 <bt_settings_init+0x20>
    8812:	4a06      	ldr	r2, [pc, #24]	; (882c <bt_settings_init+0x24>)
    8814:	4b06      	ldr	r3, [pc, #24]	; (8830 <bt_settings_init+0x28>)
    8816:	1ad2      	subs	r2, r2, r3
    8818:	08d2      	lsrs	r2, r2, #3
		BT_ERR("settings_subsys_init failed (err %d)", err);
    881a:	0192      	lsls	r2, r2, #6
    881c:	4601      	mov	r1, r0
    881e:	f042 0201 	orr.w	r2, r2, #1
    8822:	4804      	ldr	r0, [pc, #16]	; (8834 <bt_settings_init+0x2c>)
    8824:	f019 fe21 	bl	2246a <log_1>
		return err;
	}

	return 0;
}
    8828:	4620      	mov	r0, r4
    882a:	bd10      	pop	{r4, pc}
    882c:	000279a0 	.word	0x000279a0
    8830:	000278c0 	.word	0x000278c0
    8834:	0002bf2d 	.word	0x0002bf2d

00008838 <uuid_to_uuid128>:
	.val = { BT_UUID_128_ENCODE(
		0x00000000, 0x0000, 0x1000, 0x8000, 0x00805F9B34FB) }
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    8838:	b430      	push	{r4, r5}
    883a:	4603      	mov	r3, r0
    883c:	4608      	mov	r0, r1
	switch (src->type) {
    883e:	781a      	ldrb	r2, [r3, #0]
    8840:	2a01      	cmp	r2, #1
    8842:	d013      	beq.n	886c <uuid_to_uuid128+0x34>
    8844:	2a02      	cmp	r2, #2
    8846:	d026      	beq.n	8896 <uuid_to_uuid128+0x5e>
    8848:	b972      	cbnz	r2, 8868 <uuid_to_uuid128+0x30>
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    884a:	4a15      	ldr	r2, [pc, #84]	; (88a0 <uuid_to_uuid128+0x68>)
    884c:	f102 0410 	add.w	r4, r2, #16
    8850:	f852 5b04 	ldr.w	r5, [r2], #4
    8854:	f841 5b04 	str.w	r5, [r1], #4
    8858:	42a2      	cmp	r2, r4
    885a:	d1f9      	bne.n	8850 <uuid_to_uuid128+0x18>
		sys_put_le16(BT_UUID_16(src)->val,
    885c:	885b      	ldrh	r3, [r3, #2]
		*dst = uuid128_base;
    885e:	7812      	ldrb	r2, [r2, #0]
    8860:	700a      	strb	r2, [r1, #0]
	dst[0] = val;
    8862:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    8864:	0a1b      	lsrs	r3, r3, #8
    8866:	7383      	strb	r3, [r0, #14]
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
		return;
	}
}
    8868:	bc30      	pop	{r4, r5}
    886a:	4770      	bx	lr
		*dst = uuid128_base;
    886c:	4a0c      	ldr	r2, [pc, #48]	; (88a0 <uuid_to_uuid128+0x68>)
    886e:	f102 0410 	add.w	r4, r2, #16
    8872:	f852 5b04 	ldr.w	r5, [r2], #4
    8876:	f841 5b04 	str.w	r5, [r1], #4
    887a:	42a2      	cmp	r2, r4
    887c:	d1f9      	bne.n	8872 <uuid_to_uuid128+0x3a>
		sys_put_le32(BT_UUID_32(src)->val,
    887e:	685b      	ldr	r3, [r3, #4]
		*dst = uuid128_base;
    8880:	7812      	ldrb	r2, [r2, #0]
    8882:	700a      	strb	r2, [r1, #0]
    8884:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[0] = val;
    8888:	7343      	strb	r3, [r0, #13]
	sys_put_le16(val >> 16, &dst[2]);
    888a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    888c:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    888e:	0a1b      	lsrs	r3, r3, #8
    8890:	7382      	strb	r2, [r0, #14]
    8892:	7403      	strb	r3, [r0, #16]
}
    8894:	e7e8      	b.n	8868 <uuid_to_uuid128+0x30>
}
    8896:	bc30      	pop	{r4, r5}
		memcpy(dst, src, sizeof(*dst));
    8898:	2211      	movs	r2, #17
    889a:	4619      	mov	r1, r3
    889c:	f01b bde4 	b.w	24468 <memcpy>
    88a0:	0002bf61 	.word	0x0002bf61

000088a4 <bt_buf_get_rx>:
NET_BUF_POOL_DEFINE(acl_in_pool, CONFIG_BT_ACL_RX_COUNT, ACL_IN_SIZE,
		    sizeof(struct acl_data), bt_hci_host_num_completed_packets);
#endif /* CONFIG_BT_HCI_ACL_FLOW_CONTROL */

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, k_timeout_t timeout)
{
    88a4:	b538      	push	{r3, r4, r5, lr}
    88a6:	4605      	mov	r5, r0
	return net_buf_alloc_fixed(pool, timeout);
    88a8:	4805      	ldr	r0, [pc, #20]	; (88c0 <bt_buf_get_rx+0x1c>)
    88aa:	f01d fddb 	bl	26464 <net_buf_alloc_fixed>
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
#endif

	if (buf) {
    88ae:	4604      	mov	r4, r0
    88b0:	b120      	cbz	r0, 88bc <bt_buf_get_rx+0x18>
	net_buf_simple_reserve(&buf->b, reserve);
    88b2:	2100      	movs	r1, #0
    88b4:	3008      	adds	r0, #8
    88b6:	f01d fdf4 	bl	264a2 <net_buf_simple_reserve>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    88ba:	7525      	strb	r5, [r4, #20]
		net_buf_reserve(buf, BT_BUF_RESERVE);
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    88bc:	4620      	mov	r0, r4
    88be:	bd38      	pop	{r3, r4, r5, pc}
    88c0:	2000a0f8 	.word	0x2000a0f8

000088c4 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(k_timeout_t timeout)
{
    88c4:	b570      	push	{r4, r5, r6, lr}
    88c6:	4602      	mov	r2, r0
    88c8:	460b      	mov	r3, r1
	__asm__ volatile(
    88ca:	f04f 0120 	mov.w	r1, #32
    88ce:	f3ef 8511 	mrs	r5, BASEPRI
    88d2:	f381 8811 	msr	BASEPRI, r1
    88d6:	f3bf 8f6f 	isb	sy
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    88da:	480c      	ldr	r0, [pc, #48]	; (890c <bt_buf_get_cmd_complete+0x48>)
	bt_dev.sent_cmd = NULL;
    88dc:	2100      	movs	r1, #0
	buf = bt_dev.sent_cmd;
    88de:	f8d0 4100 	ldr.w	r4, [r0, #256]	; 0x100
	bt_dev.sent_cmd = NULL;
    88e2:	f8c0 1100 	str.w	r1, [r0, #256]	; 0x100
	__asm__ volatile(
    88e6:	f385 8811 	msr	BASEPRI, r5
    88ea:	f3bf 8f6f 	isb	sy
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    88ee:	b924      	cbnz	r4, 88fa <bt_buf_get_cmd_complete+0x36>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    88f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    88f4:	2001      	movs	r0, #1
    88f6:	f7ff bfd5 	b.w	88a4 <bt_buf_get_rx>
    88fa:	2301      	movs	r3, #1
    88fc:	f104 0008 	add.w	r0, r4, #8
    8900:	7523      	strb	r3, [r4, #20]
		buf->len = 0U;
    8902:	81a1      	strh	r1, [r4, #12]
    8904:	f01d fdcd 	bl	264a2 <net_buf_simple_reserve>
}
    8908:	4620      	mov	r0, r4
    890a:	bd70      	pop	{r4, r5, r6, pc}
    890c:	20000008 	.word	0x20000008

00008910 <bt_buf_get_evt>:

struct net_buf *bt_buf_get_evt(uint8_t evt, bool discardable,
			       k_timeout_t timeout)
{
    8910:	b570      	push	{r4, r5, r6, lr}
    8912:	4604      	mov	r4, r0
	switch (evt) {
    8914:	2c0f      	cmp	r4, #15
{
    8916:	460d      	mov	r5, r1
    8918:	4610      	mov	r0, r2
    891a:	4619      	mov	r1, r3
	switch (evt) {
    891c:	d805      	bhi.n	892a <bt_buf_get_evt+0x1a>
    891e:	2c0d      	cmp	r4, #13
    8920:	d912      	bls.n	8948 <bt_buf_get_evt+0x38>
		}
#endif /* CONFIG_BT_DISCARDABLE_BUF_COUNT */

		return bt_buf_get_rx(BT_BUF_EVT, timeout);
	}
}
    8922:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_cmd_complete(timeout);
    8926:	f7ff bfcd 	b.w	88c4 <bt_buf_get_cmd_complete>
	switch (evt) {
    892a:	2c13      	cmp	r4, #19
    892c:	d10c      	bne.n	8948 <bt_buf_get_evt+0x38>
	return net_buf_alloc_fixed(pool, timeout);
    892e:	480b      	ldr	r0, [pc, #44]	; (895c <bt_buf_get_evt+0x4c>)
    8930:	f01d fd98 	bl	26464 <net_buf_alloc_fixed>
			if (buf) {
    8934:	4604      	mov	r4, r0
    8936:	b128      	cbz	r0, 8944 <bt_buf_get_evt+0x34>
	net_buf_simple_reserve(&buf->b, reserve);
    8938:	2100      	movs	r1, #0
    893a:	3008      	adds	r0, #8
    893c:	f01d fdb1 	bl	264a2 <net_buf_simple_reserve>
    8940:	2301      	movs	r3, #1
    8942:	7523      	strb	r3, [r4, #20]
}
    8944:	4620      	mov	r0, r4
    8946:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_alloc_fixed(pool, timeout);
    8948:	4602      	mov	r2, r0
    894a:	460b      	mov	r3, r1
		if (discardable) {
    894c:	b10d      	cbz	r5, 8952 <bt_buf_get_evt+0x42>
    894e:	4804      	ldr	r0, [pc, #16]	; (8960 <bt_buf_get_evt+0x50>)
    8950:	e7ee      	b.n	8930 <bt_buf_get_evt+0x20>
}
    8952:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_buf_get_rx(BT_BUF_EVT, timeout);
    8956:	2001      	movs	r0, #1
    8958:	f7ff bfa4 	b.w	88a4 <bt_buf_get_rx>
    895c:	2000a120 	.word	0x2000a120
    8960:	2000a080 	.word	0x2000a080

00008964 <bt_adv_foreach>:
{
    8964:	4603      	mov	r3, r0
	func(&bt_dev.adv, data);
    8966:	4801      	ldr	r0, [pc, #4]	; (896c <bt_adv_foreach+0x8>)
    8968:	4718      	bx	r3
    896a:	bf00      	nop
    896c:	20000020 	.word	0x20000020

00008970 <le_dhkey_complete>:
	if (dh_key_cb) {
    8970:	4905      	ldr	r1, [pc, #20]	; (8988 <le_dhkey_complete+0x18>)
    8972:	680b      	ldr	r3, [r1, #0]
    8974:	b133      	cbz	r3, 8984 <le_dhkey_complete+0x14>
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    8976:	6882      	ldr	r2, [r0, #8]
		dh_key_cb = NULL;
    8978:	2000      	movs	r0, #0
    897a:	6008      	str	r0, [r1, #0]
		cb(evt->status ? NULL : evt->dhkey);
    897c:	7811      	ldrb	r1, [r2, #0]
    897e:	b901      	cbnz	r1, 8982 <le_dhkey_complete+0x12>
    8980:	1c50      	adds	r0, r2, #1
    8982:	4718      	bx	r3
}
    8984:	4770      	bx	lr
    8986:	bf00      	nop
    8988:	2000d738 	.word	0x2000d738

0000898c <ver_str>:
{
    898c:	b570      	push	{r4, r5, r6, lr}
	const char * const str[] = {
    898e:	4d0b      	ldr	r5, [pc, #44]	; (89bc <ver_str+0x30>)
{
    8990:	4606      	mov	r6, r0
	const char * const str[] = {
    8992:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
{
    8994:	b08c      	sub	sp, #48	; 0x30
	const char * const str[] = {
    8996:	466c      	mov	r4, sp
    8998:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    899a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    899c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    899e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    89a2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	if (ver < ARRAY_SIZE(str)) {
    89a6:	2e0b      	cmp	r6, #11
		return str[ver];
    89a8:	bf9b      	ittet	ls
    89aa:	ab0c      	addls	r3, sp, #48	; 0x30
    89ac:	eb03 0686 	addls.w	r6, r3, r6, lsl #2
	return "unknown";
    89b0:	4803      	ldrhi	r0, [pc, #12]	; (89c0 <ver_str+0x34>)
		return str[ver];
    89b2:	f856 0c30 	ldrls.w	r0, [r6, #-48]
}
    89b6:	b00c      	add	sp, #48	; 0x30
    89b8:	bd70      	pop	{r4, r5, r6, pc}
    89ba:	bf00      	nop
    89bc:	00027a90 	.word	0x00027a90
    89c0:	0002c064 	.word	0x0002c064

000089c4 <le_rpa_invalidate>:
{
    89c4:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    89c6:	4c08      	ldr	r4, [pc, #32]	; (89e8 <le_rpa_invalidate+0x24>)
    89c8:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
    89cc:	4620      	mov	r0, r4
    89ce:	f01b fefb 	bl	247c8 <atomic_and>
    89d2:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    89d6:	4620      	mov	r0, r4
    89d8:	f01b fef6 	bl	247c8 <atomic_and>
}
    89dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_adv_foreach(adv_rpa_invalidate, NULL);
    89e0:	4802      	ldr	r0, [pc, #8]	; (89ec <le_rpa_invalidate+0x28>)
    89e2:	2100      	movs	r1, #0
    89e4:	f7ff bfbe 	b.w	8964 <bt_adv_foreach>
    89e8:	2000009c 	.word	0x2000009c
    89ec:	000248af 	.word	0x000248af

000089f0 <hci_data_buf_overflow>:
    89f0:	4905      	ldr	r1, [pc, #20]	; (8a08 <hci_data_buf_overflow+0x18>)
    89f2:	4a06      	ldr	r2, [pc, #24]	; (8a0c <hci_data_buf_overflow+0x1c>)
	struct bt_hci_evt_data_buf_overflow *evt = (void *)buf->data;
    89f4:	6883      	ldr	r3, [r0, #8]
	BT_WARN("Data buffer overflow (link type 0x%02x)", evt->link_type);
    89f6:	4806      	ldr	r0, [pc, #24]	; (8a10 <hci_data_buf_overflow+0x20>)
    89f8:	1a52      	subs	r2, r2, r1
    89fa:	08d2      	lsrs	r2, r2, #3
    89fc:	0192      	lsls	r2, r2, #6
    89fe:	7819      	ldrb	r1, [r3, #0]
    8a00:	f042 0202 	orr.w	r2, r2, #2
    8a04:	f019 bd31 	b.w	2246a <log_1>
    8a08:	000278c0 	.word	0x000278c0
    8a0c:	00027978 	.word	0x00027978
    8a10:	0002c06c 	.word	0x0002c06c

00008a14 <id_find>:
	memcpy(addrs, bt_dev.id_addr, to_copy * sizeof(bt_addr_le_t));
	*count = to_copy;
}

static int id_find(const bt_addr_le_t *addr)
{
    8a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t id;

	for (id = 0U; id < bt_dev.id_count; id++) {
    8a16:	4f0a      	ldr	r7, [pc, #40]	; (8a40 <id_find+0x2c>)
{
    8a18:	4606      	mov	r6, r0
	for (id = 0U; id < bt_dev.id_count; id++) {
    8a1a:	2500      	movs	r5, #0
    8a1c:	79fb      	ldrb	r3, [r7, #7]
    8a1e:	b2ec      	uxtb	r4, r5
    8a20:	42a3      	cmp	r3, r4
    8a22:	d802      	bhi.n	8a2a <id_find+0x16>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
			return id;
		}
	}

	return -ENOENT;
    8a24:	f06f 0401 	mvn.w	r4, #1
    8a28:	e008      	b.n	8a3c <id_find+0x28>
		if (!bt_addr_le_cmp(addr, &bt_dev.id_addr[id])) {
    8a2a:	ebc4 01c4 	rsb	r1, r4, r4, lsl #3
    8a2e:	4439      	add	r1, r7
    8a30:	4630      	mov	r0, r6
    8a32:	f01b fede 	bl	247f2 <bt_addr_le_cmp>
    8a36:	3501      	adds	r5, #1
    8a38:	2800      	cmp	r0, #0
    8a3a:	d1ef      	bne.n	8a1c <id_find+0x8>
}
    8a3c:	4620      	mov	r0, r4
    8a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8a40:	20000008 	.word	0x20000008

00008a44 <valid_adv_param>:
	return true;
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8a44:	6843      	ldr	r3, [r0, #4]
{
    8a46:	b537      	push	{r0, r1, r2, r4, r5, lr}
    8a48:	4604      	mov	r4, r0
	if (param->options & BT_LE_ADV_OPT_EXT_ADV) {
    8a4a:	0558      	lsls	r0, r3, #21
    8a4c:	d502      	bpl.n	8a54 <valid_adv_param+0x10>
		return false;
    8a4e:	2000      	movs	r0, #0
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
		return false;
	}

	return valid_adv_ext_param(param);
}
    8a50:	b003      	add	sp, #12
    8a52:	bd30      	pop	{r4, r5, pc}
	if (param->peer && !(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8a54:	6922      	ldr	r2, [r4, #16]
    8a56:	b12a      	cbz	r2, 8a64 <valid_adv_param+0x20>
    8a58:	07d9      	lsls	r1, r3, #31
    8a5a:	d5f8      	bpl.n	8a4e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_USE_IDENTITY) &&
    8a5c:	f003 0324 	and.w	r3, r3, #36	; 0x24
    8a60:	2b24      	cmp	r3, #36	; 0x24
    8a62:	d0f4      	beq.n	8a4e <valid_adv_param+0xa>
	if (param->id >= bt_dev.id_count ||
    8a64:	4d1a      	ldr	r5, [pc, #104]	; (8ad0 <valid_adv_param+0x8c>)
    8a66:	7820      	ldrb	r0, [r4, #0]
    8a68:	79eb      	ldrb	r3, [r5, #7]
    8a6a:	4283      	cmp	r3, r0
    8a6c:	d9ef      	bls.n	8a4e <valid_adv_param+0xa>
	    !bt_addr_le_cmp(&bt_dev.id_addr[param->id], BT_ADDR_LE_ANY)) {
    8a6e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
    8a72:	2300      	movs	r3, #0
    8a74:	4669      	mov	r1, sp
    8a76:	4428      	add	r0, r5
    8a78:	9300      	str	r3, [sp, #0]
    8a7a:	f8cd 3003 	str.w	r3, [sp, #3]
    8a7e:	f01b feb8 	bl	247f2 <bt_addr_le_cmp>
	if (param->id >= bt_dev.id_count ||
    8a82:	2800      	cmp	r0, #0
    8a84:	d0e3      	beq.n	8a4e <valid_adv_param+0xa>
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    8a86:	6860      	ldr	r0, [r4, #4]
    8a88:	07c2      	lsls	r2, r0, #31
    8a8a:	d406      	bmi.n	8a9a <valid_adv_param+0x56>
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    8a8c:	f895 3034 	ldrb.w	r3, [r5, #52]	; 0x34
    8a90:	2b08      	cmp	r3, #8
    8a92:	d802      	bhi.n	8a9a <valid_adv_param+0x56>
    8a94:	68a3      	ldr	r3, [r4, #8]
    8a96:	2b9f      	cmp	r3, #159	; 0x9f
    8a98:	d9d9      	bls.n	8a4e <valid_adv_param+0xa>
	if ((param->options & (BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY |
    8a9a:	f010 0f30 	tst.w	r0, #48	; 0x30
    8a9e:	d002      	beq.n	8aa6 <valid_adv_param+0x62>
			       BT_LE_ADV_OPT_DIR_ADDR_RPA)) &&
    8aa0:	6923      	ldr	r3, [r4, #16]
    8aa2:	2b00      	cmp	r3, #0
    8aa4:	d0d3      	beq.n	8a4e <valid_adv_param+0xa>
	if ((param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) ||
    8aa6:	06c3      	lsls	r3, r0, #27
    8aa8:	d401      	bmi.n	8aae <valid_adv_param+0x6a>
    8aaa:	6923      	ldr	r3, [r4, #16]
    8aac:	b943      	cbnz	r3, 8ac0 <valid_adv_param+0x7c>
		if (param->interval_min > param->interval_max ||
    8aae:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    8ab2:	429a      	cmp	r2, r3
    8ab4:	d8cb      	bhi.n	8a4e <valid_adv_param+0xa>
    8ab6:	2a1f      	cmp	r2, #31
    8ab8:	d9c9      	bls.n	8a4e <valid_adv_param+0xa>
		    param->interval_min < 0x0020 ||
    8aba:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
    8abe:	d8c6      	bhi.n	8a4e <valid_adv_param+0xa>
	    (param->options & BT_LE_ADV_OPT_DISABLE_CHAN_38) &&
    8ac0:	f400 3060 	and.w	r0, r0, #229376	; 0x38000
	if ((param->options & BT_LE_ADV_OPT_DISABLE_CHAN_37) &&
    8ac4:	f5b0 3060 	subs.w	r0, r0, #229376	; 0x38000
    8ac8:	bf18      	it	ne
    8aca:	2001      	movne	r0, #1
    8acc:	e7c0      	b.n	8a50 <valid_adv_param+0xc>
    8ace:	bf00      	nop
    8ad0:	20000008 	.word	0x20000008

00008ad4 <le_pkey_complete>:
{
    8ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    8ad6:	6885      	ldr	r5, [r0, #8]
    8ad8:	480f      	ldr	r0, [pc, #60]	; (8b18 <le_pkey_complete+0x44>)
    8ada:	f06f 0110 	mvn.w	r1, #16
    8ade:	f01b fe73 	bl	247c8 <atomic_and>
	if (!evt->status) {
    8ae2:	782b      	ldrb	r3, [r5, #0]
    8ae4:	b943      	cbnz	r3, 8af8 <le_pkey_complete+0x24>
		memcpy(pub_key, evt->key, 64);
    8ae6:	1c69      	adds	r1, r5, #1
    8ae8:	480c      	ldr	r0, [pc, #48]	; (8b1c <le_pkey_complete+0x48>)
    8aea:	2240      	movs	r2, #64	; 0x40
    8aec:	f01b fcbc 	bl	24468 <memcpy>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    8af0:	4809      	ldr	r0, [pc, #36]	; (8b18 <le_pkey_complete+0x44>)
    8af2:	2108      	movs	r1, #8
    8af4:	f01b fe86 	bl	24804 <atomic_or>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8af8:	4e09      	ldr	r6, [pc, #36]	; (8b20 <le_pkey_complete+0x4c>)
		cb->func(evt->status ? NULL : pub_key);
    8afa:	4f08      	ldr	r7, [pc, #32]	; (8b1c <le_pkey_complete+0x48>)
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8afc:	6834      	ldr	r4, [r6, #0]
    8afe:	b90c      	cbnz	r4, 8b04 <le_pkey_complete+0x30>
	pub_key_cb = NULL;
    8b00:	6034      	str	r4, [r6, #0]
}
    8b02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		cb->func(evt->status ? NULL : pub_key);
    8b04:	782a      	ldrb	r2, [r5, #0]
    8b06:	6823      	ldr	r3, [r4, #0]
    8b08:	2a00      	cmp	r2, #0
    8b0a:	bf0c      	ite	eq
    8b0c:	4638      	moveq	r0, r7
    8b0e:	2000      	movne	r0, #0
    8b10:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    8b12:	6864      	ldr	r4, [r4, #4]
    8b14:	e7f3      	b.n	8afe <le_pkey_complete+0x2a>
    8b16:	bf00      	nop
    8b18:	2000009c 	.word	0x2000009c
    8b1c:	2000f2b3 	.word	0x2000f2b3
    8b20:	2000d73c 	.word	0x2000d73c

00008b24 <unpair>:
{
    8b24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8b28:	4606      	mov	r6, r0
    8b2a:	460f      	mov	r7, r1
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, addr);
    8b2c:	f002 fee6 	bl	b8fc <bt_conn_lookup_addr_le>
	if (conn) {
    8b30:	4604      	mov	r4, r0
    8b32:	b9b0      	cbnz	r0, 8b62 <unpair+0x3e>
			keys = bt_keys_find_addr(id, addr);
    8b34:	4639      	mov	r1, r7
    8b36:	4630      	mov	r0, r6
    8b38:	f007 fc80 	bl	1043c <bt_keys_find_addr>
		if (keys) {
    8b3c:	4605      	mov	r5, r0
    8b3e:	b110      	cbz	r0, 8b46 <unpair+0x22>
			bt_keys_clear(keys);
    8b40:	4628      	mov	r0, r5
    8b42:	f007 fc8b 	bl	1045c <bt_keys_clear>
	bt_gatt_clear(id, addr);
    8b46:	4639      	mov	r1, r7
    8b48:	4630      	mov	r0, r6
    8b4a:	f005 fcb9 	bl	e4c0 <bt_gatt_clear>
	if (bt_auth && bt_auth->bond_deleted) {
    8b4e:	4b10      	ldr	r3, [pc, #64]	; (8b90 <unpair+0x6c>)
    8b50:	681b      	ldr	r3, [r3, #0]
    8b52:	b1db      	cbz	r3, 8b8c <unpair+0x68>
    8b54:	6a1b      	ldr	r3, [r3, #32]
    8b56:	b1cb      	cbz	r3, 8b8c <unpair+0x68>
		bt_auth->bond_deleted(id, addr);
    8b58:	4639      	mov	r1, r7
    8b5a:	4630      	mov	r0, r6
}
    8b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_auth->bond_deleted(id, addr);
    8b60:	4718      	bx	r3
		if (conn->type == BT_CONN_TYPE_LE) {
    8b62:	7883      	ldrb	r3, [r0, #2]
    8b64:	2b01      	cmp	r3, #1
    8b66:	f04f 0300 	mov.w	r3, #0
			keys = conn->le.keys;
    8b6a:	bf04      	itt	eq
    8b6c:	f8d0 50b4 	ldreq.w	r5, [r0, #180]	; 0xb4
			conn->le.keys = NULL;
    8b70:	f8c0 30b4 	streq.w	r3, [r0, #180]	; 0xb4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    8b74:	f04f 0113 	mov.w	r1, #19
	struct bt_keys *keys = NULL;
    8b78:	bf18      	it	ne
    8b7a:	461d      	movne	r5, r3
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    8b7c:	f01c f8e7 	bl	24d4e <bt_conn_disconnect>
		bt_conn_unref(conn);
    8b80:	4620      	mov	r0, r4
    8b82:	f01c f8a9 	bl	24cd8 <bt_conn_unref>
		if (!keys) {
    8b86:	2d00      	cmp	r5, #0
    8b88:	d1da      	bne.n	8b40 <unpair+0x1c>
    8b8a:	e7d3      	b.n	8b34 <unpair+0x10>
}
    8b8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8b90:	2000d744 	.word	0x2000d744

00008b94 <le_data_len_change>:
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8b94:	6883      	ldr	r3, [r0, #8]
{
    8b96:	b510      	push	{r4, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8b98:	881c      	ldrh	r4, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    8b9a:	4620      	mov	r0, r4
    8b9c:	f002 fdba 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    8ba0:	b960      	cbnz	r0, 8bbc <le_data_len_change+0x28>
    8ba2:	4a08      	ldr	r2, [pc, #32]	; (8bc4 <le_data_len_change+0x30>)
    8ba4:	4b08      	ldr	r3, [pc, #32]	; (8bc8 <le_data_len_change+0x34>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8ba6:	4809      	ldr	r0, [pc, #36]	; (8bcc <le_data_len_change+0x38>)
    8ba8:	1ad2      	subs	r2, r2, r3
    8baa:	08d2      	lsrs	r2, r2, #3
    8bac:	0192      	lsls	r2, r2, #6
    8bae:	4621      	mov	r1, r4
    8bb0:	f042 0201 	orr.w	r2, r2, #1
}
    8bb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8bb8:	f019 bc57 	b.w	2246a <log_1>
}
    8bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_conn_unref(conn);
    8bc0:	f01c b88a 	b.w	24cd8 <bt_conn_unref>
    8bc4:	00027978 	.word	0x00027978
    8bc8:	000278c0 	.word	0x000278c0
    8bcc:	0002c094 	.word	0x0002c094

00008bd0 <hci_disconn_complete_prio>:
{
    8bd0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8bd2:	6883      	ldr	r3, [r0, #8]
	if (evt->status) {
    8bd4:	781a      	ldrb	r2, [r3, #0]
    8bd6:	b9da      	cbnz	r2, 8c10 <hci_disconn_complete_prio+0x40>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8bd8:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    8bdc:	4628      	mov	r0, r5
    8bde:	f002 fd99 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    8be2:	4604      	mov	r4, r0
    8be4:	b960      	cbnz	r0, 8c00 <hci_disconn_complete_prio+0x30>
    8be6:	4b0b      	ldr	r3, [pc, #44]	; (8c14 <hci_disconn_complete_prio+0x44>)
    8be8:	4a0b      	ldr	r2, [pc, #44]	; (8c18 <hci_disconn_complete_prio+0x48>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8bea:	480c      	ldr	r0, [pc, #48]	; (8c1c <hci_disconn_complete_prio+0x4c>)
    8bec:	1ad2      	subs	r2, r2, r3
    8bee:	08d2      	lsrs	r2, r2, #3
    8bf0:	0192      	lsls	r2, r2, #6
    8bf2:	4629      	mov	r1, r5
    8bf4:	f042 0201 	orr.w	r2, r2, #1
}
    8bf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8bfc:	f019 bc35 	b.w	2246a <log_1>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT_COMPLETE);
    8c00:	2101      	movs	r1, #1
    8c02:	f002 fd8f 	bl	b724 <bt_conn_set_state>
	bt_conn_unref(conn);
    8c06:	4620      	mov	r0, r4
}
    8c08:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    8c0c:	f01c b864 	b.w	24cd8 <bt_conn_unref>
}
    8c10:	bd38      	pop	{r3, r4, r5, pc}
    8c12:	bf00      	nop
    8c14:	000278c0 	.word	0x000278c0
    8c18:	00027978 	.word	0x00027978
    8c1c:	0002c0b8 	.word	0x0002c0b8

00008c20 <hci_disconn_complete>:
{
    8c20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    8c22:	6886      	ldr	r6, [r0, #8]
	if (evt->status) {
    8c24:	7835      	ldrb	r5, [r6, #0]
    8c26:	b9f5      	cbnz	r5, 8c66 <hci_disconn_complete+0x46>
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    8c28:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	conn = bt_conn_lookup_handle(handle);
    8c2c:	4638      	mov	r0, r7
    8c2e:	f002 fd71 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    8c32:	4604      	mov	r4, r0
    8c34:	b960      	cbnz	r0, 8c50 <hci_disconn_complete+0x30>
    8c36:	4b0c      	ldr	r3, [pc, #48]	; (8c68 <hci_disconn_complete+0x48>)
    8c38:	4a0c      	ldr	r2, [pc, #48]	; (8c6c <hci_disconn_complete+0x4c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    8c3a:	480d      	ldr	r0, [pc, #52]	; (8c70 <hci_disconn_complete+0x50>)
    8c3c:	1ad2      	subs	r2, r2, r3
    8c3e:	08d2      	lsrs	r2, r2, #3
    8c40:	0192      	lsls	r2, r2, #6
    8c42:	4639      	mov	r1, r7
    8c44:	f042 0201 	orr.w	r2, r2, #1
}
    8c48:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    8c4c:	f019 bc0d 	b.w	2246a <log_1>
	conn->err = evt->reason;
    8c50:	78f3      	ldrb	r3, [r6, #3]
    8c52:	7303      	strb	r3, [r0, #12]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    8c54:	4629      	mov	r1, r5
    8c56:	f002 fd65 	bl	b724 <bt_conn_set_state>
	conn->handle = 0U;
    8c5a:	8025      	strh	r5, [r4, #0]
		bt_conn_unref(conn);
    8c5c:	4620      	mov	r0, r4
}
    8c5e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    8c62:	f01c b839 	b.w	24cd8 <bt_conn_unref>
}
    8c66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8c68:	000278c0 	.word	0x000278c0
    8c6c:	00027978 	.word	0x00027978
    8c70:	0002c0b8 	.word	0x0002c0b8

00008c74 <hci_hardware_error>:
{
    8c74:	b508      	push	{r3, lr}
 *
 * @return Pointer to the old beginning of the buffer data.
 */
static inline void *net_buf_pull_mem(struct net_buf *buf, size_t len)
{
	return net_buf_simple_pull_mem(&buf->b, len);
    8c76:	2101      	movs	r1, #1
    8c78:	3008      	adds	r0, #8
    8c7a:	f01d fc70 	bl	2655e <net_buf_simple_pull_mem>
    8c7e:	4b06      	ldr	r3, [pc, #24]	; (8c98 <hci_hardware_error+0x24>)
    8c80:	4a06      	ldr	r2, [pc, #24]	; (8c9c <hci_hardware_error+0x28>)
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8c82:	7801      	ldrb	r1, [r0, #0]
    8c84:	4806      	ldr	r0, [pc, #24]	; (8ca0 <hci_hardware_error+0x2c>)
    8c86:	1ad2      	subs	r2, r2, r3
    8c88:	08d2      	lsrs	r2, r2, #3
    8c8a:	0192      	lsls	r2, r2, #6
}
    8c8c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	BT_ERR("Hardware error, hardware code: %d", evt->hardware_code);
    8c90:	f042 0201 	orr.w	r2, r2, #1
    8c94:	f019 bbe9 	b.w	2246a <log_1>
    8c98:	000278c0 	.word	0x000278c0
    8c9c:	00027978 	.word	0x00027978
    8ca0:	0002c0de 	.word	0x0002c0de

00008ca4 <hci_vendor_event>:
{
    8ca4:	b510      	push	{r4, lr}
    8ca6:	4a0a      	ldr	r2, [pc, #40]	; (8cd0 <hci_vendor_event+0x2c>)
    8ca8:	4c0a      	ldr	r4, [pc, #40]	; (8cd4 <hci_vendor_event+0x30>)
		BT_WARN("Unhandled vendor-specific event: %s",
    8caa:	8981      	ldrh	r1, [r0, #12]
    8cac:	6880      	ldr	r0, [r0, #8]
    8cae:	1aa4      	subs	r4, r4, r2
    8cb0:	f7ff fa4a 	bl	8148 <bt_hex_real>
    8cb4:	f7fc fcd6 	bl	5664 <log_strdup>
    8cb8:	08e4      	lsrs	r4, r4, #3
    8cba:	01a4      	lsls	r4, r4, #6
    8cbc:	f044 0402 	orr.w	r4, r4, #2
    8cc0:	4601      	mov	r1, r0
    8cc2:	4622      	mov	r2, r4
    8cc4:	4804      	ldr	r0, [pc, #16]	; (8cd8 <hci_vendor_event+0x34>)
}
    8cc6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Unhandled vendor-specific event: %s",
    8cca:	f019 bbce 	b.w	2246a <log_1>
    8cce:	bf00      	nop
    8cd0:	000278c0 	.word	0x000278c0
    8cd4:	00027978 	.word	0x00027978
    8cd8:	0002c100 	.word	0x0002c100

00008cdc <le_conn_update_complete>:
{
    8cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    8cde:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    8ce0:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    8ce4:	4630      	mov	r0, r6
    8ce6:	f002 fd15 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    8cea:	4604      	mov	r4, r0
    8cec:	b968      	cbnz	r0, 8d0a <le_conn_update_complete+0x2e>
    8cee:	4b25      	ldr	r3, [pc, #148]	; (8d84 <le_conn_update_complete+0xa8>)
    8cf0:	4a25      	ldr	r2, [pc, #148]	; (8d88 <le_conn_update_complete+0xac>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8cf2:	4826      	ldr	r0, [pc, #152]	; (8d8c <le_conn_update_complete+0xb0>)
    8cf4:	1ad2      	subs	r2, r2, r3
    8cf6:	08d2      	lsrs	r2, r2, #3
    8cf8:	0192      	lsls	r2, r2, #6
    8cfa:	f042 0201 	orr.w	r2, r2, #1
    8cfe:	4631      	mov	r1, r6
}
    8d00:	b002      	add	sp, #8
    8d02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    8d06:	f019 bbb0 	b.w	2246a <log_1>
	if (!evt->status) {
    8d0a:	782b      	ldrb	r3, [r5, #0]
    8d0c:	b9cb      	cbnz	r3, 8d42 <le_conn_update_complete+0x66>
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    8d0e:	792a      	ldrb	r2, [r5, #4]
    8d10:	78eb      	ldrb	r3, [r5, #3]
    8d12:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8d16:	f8a0 309e 	strh.w	r3, [r0, #158]	; 0x9e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    8d1a:	79aa      	ldrb	r2, [r5, #6]
    8d1c:	796b      	ldrb	r3, [r5, #5]
    8d1e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8d22:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    8d26:	79eb      	ldrb	r3, [r5, #7]
    8d28:	7a2a      	ldrb	r2, [r5, #8]
    8d2a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    8d2e:	f8a0 30a6 	strh.w	r3, [r0, #166]	; 0xa6
		notify_le_param_updated(conn);
    8d32:	f002 fae1 	bl	b2f8 <notify_le_param_updated>
	bt_conn_unref(conn);
    8d36:	4620      	mov	r0, r4
}
    8d38:	b002      	add	sp, #8
    8d3a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    8d3e:	f01b bfcb 	b.w	24cd8 <bt_conn_unref>
	} else if (evt->status == BT_HCI_ERR_UNSUPP_REMOTE_FEATURE &&
    8d42:	2b1a      	cmp	r3, #26
    8d44:	d1f7      	bne.n	8d36 <le_conn_update_complete+0x5a>
    8d46:	78c3      	ldrb	r3, [r0, #3]
    8d48:	2b01      	cmp	r3, #1
    8d4a:	d1f4      	bne.n	8d36 <le_conn_update_complete+0x5a>
		   !atomic_test_and_set_bit(conn->flags,
    8d4c:	210a      	movs	r1, #10
    8d4e:	3004      	adds	r0, #4
    8d50:	f01b fd67 	bl	24822 <atomic_test_and_set_bit>
		   conn->role == BT_HCI_ROLE_SLAVE &&
    8d54:	2800      	cmp	r0, #0
    8d56:	d1ee      	bne.n	8d36 <le_conn_update_complete+0x5a>
		param.interval_min = conn->le.interval_min;
    8d58:	f8b4 30a0 	ldrh.w	r3, [r4, #160]	; 0xa0
    8d5c:	f8ad 3000 	strh.w	r3, [sp]
		param.interval_max = conn->le.interval_max;
    8d60:	f8b4 30a2 	ldrh.w	r3, [r4, #162]	; 0xa2
    8d64:	f8ad 3002 	strh.w	r3, [sp, #2]
		param.latency = conn->le.pending_latency;
    8d68:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	; 0xa8
    8d6c:	f8ad 3004 	strh.w	r3, [sp, #4]
		bt_l2cap_update_conn_param(conn, &param);
    8d70:	4669      	mov	r1, sp
		param.timeout = conn->le.pending_timeout;
    8d72:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	; 0xaa
    8d76:	f8ad 3006 	strh.w	r3, [sp, #6]
		bt_l2cap_update_conn_param(conn, &param);
    8d7a:	4620      	mov	r0, r4
    8d7c:	f003 f922 	bl	bfc4 <bt_l2cap_update_conn_param>
    8d80:	e7d9      	b.n	8d36 <le_conn_update_complete+0x5a>
    8d82:	bf00      	nop
    8d84:	000278c0 	.word	0x000278c0
    8d88:	00027978 	.word	0x00027978
    8d8c:	0002c094 	.word	0x0002c094

00008d90 <id_create>:
{
    8d90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8d94:	4f28      	ldr	r7, [pc, #160]	; (8e38 <id_create+0xa8>)
    8d96:	ebc0 08c0 	rsb	r8, r0, r0, lsl #3
{
    8d9a:	b086      	sub	sp, #24
    8d9c:	4605      	mov	r5, r0
    8d9e:	4614      	mov	r4, r2
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8da0:	44b8      	add	r8, r7
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    8da2:	460e      	mov	r6, r1
    8da4:	b351      	cbz	r1, 8dfc <id_create+0x6c>
    8da6:	2300      	movs	r3, #0
    8da8:	4669      	mov	r1, sp
    8daa:	4630      	mov	r0, r6
    8dac:	9300      	str	r3, [sp, #0]
    8dae:	f8cd 3003 	str.w	r3, [sp, #3]
    8db2:	f01b fd1e 	bl	247f2 <bt_addr_le_cmp>
    8db6:	b308      	cbz	r0, 8dfc <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], addr);
    8db8:	4631      	mov	r1, r6
    8dba:	4640      	mov	r0, r8
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8dbc:	f01b fd1f 	bl	247fe <bt_addr_le_copy>
		uint8_t zero_irk[16] = { 0 };
    8dc0:	2300      	movs	r3, #0
			memcpy(&bt_dev.irk[id], irk, 16);
    8dc2:	3512      	adds	r5, #18
		uint8_t zero_irk[16] = { 0 };
    8dc4:	e9cd 3302 	strd	r3, r3, [sp, #8]
    8dc8:	e9cd 3304 	strd	r3, r3, [sp, #16]
			memcpy(&bt_dev.irk[id], irk, 16);
    8dcc:	eb07 1505 	add.w	r5, r7, r5, lsl #4
		if (irk && memcmp(irk, zero_irk, 16)) {
    8dd0:	b32c      	cbz	r4, 8e1e <id_create+0x8e>
    8dd2:	2210      	movs	r2, #16
    8dd4:	a902      	add	r1, sp, #8
    8dd6:	4620      	mov	r0, r4
    8dd8:	f01b fb35 	bl	24446 <memcmp>
    8ddc:	b1f8      	cbz	r0, 8e1e <id_create+0x8e>
			memcpy(&bt_dev.irk[id], irk, 16);
    8dde:	2210      	movs	r2, #16
    8de0:	4621      	mov	r1, r4
    8de2:	4628      	mov	r0, r5
				memcpy(irk, &bt_dev.irk[id], 16);
    8de4:	f01b fb40 	bl	24468 <memcpy>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    8de8:	4814      	ldr	r0, [pc, #80]	; (8e3c <id_create+0xac>)
    8dea:	f01b fcfc 	bl	247e6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    8dee:	0783      	lsls	r3, r0, #30
    8df0:	d51f      	bpl.n	8e32 <id_create+0xa2>
}
    8df2:	b006      	add	sp, #24
    8df4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_settings_save_id();
    8df8:	f7ff bca6 	b.w	8748 <bt_settings_save_id>
			bt_addr_le_create_static(&new_addr);
    8dfc:	a802      	add	r0, sp, #8
    8dfe:	f01b fc9c 	bl	2473a <bt_addr_le_create_static>
		} while (id_find(&new_addr) >= 0);
    8e02:	a802      	add	r0, sp, #8
    8e04:	f7ff fe06 	bl	8a14 <id_find>
    8e08:	2800      	cmp	r0, #0
    8e0a:	daf7      	bge.n	8dfc <id_create+0x6c>
		bt_addr_le_copy(&bt_dev.id_addr[id], &new_addr);
    8e0c:	a902      	add	r1, sp, #8
    8e0e:	4640      	mov	r0, r8
    8e10:	f01b fcf5 	bl	247fe <bt_addr_le_copy>
		if (addr) {
    8e14:	2e00      	cmp	r6, #0
    8e16:	d0d3      	beq.n	8dc0 <id_create+0x30>
			bt_addr_le_copy(addr, &bt_dev.id_addr[id]);
    8e18:	4641      	mov	r1, r8
    8e1a:	4630      	mov	r0, r6
    8e1c:	e7ce      	b.n	8dbc <id_create+0x2c>
			bt_rand(&bt_dev.irk[id], 16);
    8e1e:	2110      	movs	r1, #16
    8e20:	4628      	mov	r0, r5
    8e22:	f00a fb77 	bl	13514 <bt_rand>
			if (irk) {
    8e26:	2c00      	cmp	r4, #0
    8e28:	d0de      	beq.n	8de8 <id_create+0x58>
				memcpy(irk, &bt_dev.irk[id], 16);
    8e2a:	2210      	movs	r2, #16
    8e2c:	4629      	mov	r1, r5
    8e2e:	4620      	mov	r0, r4
    8e30:	e7d8      	b.n	8de4 <id_create+0x54>
}
    8e32:	b006      	add	sp, #24
    8e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e38:	20000008 	.word	0x20000008
    8e3c:	2000009c 	.word	0x2000009c

00008e40 <le_adv_start_add_conn>:
	return 0;
}

static int le_adv_start_add_conn(const struct bt_le_ext_adv *adv,
				 struct bt_conn **out_conn)
{
    8e40:	b5f0      	push	{r4, r5, r6, r7, lr}
    8e42:	b087      	sub	sp, #28
	struct adv_id_check_data check_data = {
    8e44:	7803      	ldrb	r3, [r0, #0]
    8e46:	f88d 3004 	strb.w	r3, [sp, #4]
{
    8e4a:	4605      	mov	r5, r0
	struct adv_id_check_data check_data = {
    8e4c:	2300      	movs	r3, #0
		.id = adv->id,
		.adv_enabled = false
	};
	struct bt_conn *conn;

	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    8e4e:	4824      	ldr	r0, [pc, #144]	; (8ee0 <le_adv_start_add_conn+0xa0>)
	struct adv_id_check_data check_data = {
    8e50:	f88d 3005 	strb.w	r3, [sp, #5]
{
    8e54:	460f      	mov	r7, r1
	bt_adv_foreach(adv_id_check_connectable_func, &check_data);
    8e56:	a901      	add	r1, sp, #4
    8e58:	f7ff fd84 	bl	8964 <bt_adv_foreach>
	if (check_data.adv_enabled) {
    8e5c:	f89d 3005 	ldrb.w	r3, [sp, #5]
    8e60:	bba3      	cbnz	r3, 8ecc <le_adv_start_add_conn+0x8c>
		return -ENOTSUP;
	}

	bt_dev.adv_conn_id = adv->id;
    8e62:	462e      	mov	r6, r5
    8e64:	4a1f      	ldr	r2, [pc, #124]	; (8ee4 <le_adv_start_add_conn+0xa4>)
    8e66:	f816 1b09 	ldrb.w	r1, [r6], #9
    8e6a:	f882 1033 	strb.w	r1, [r2, #51]	; 0x33

	if (!bt_addr_le_cmp(&adv->target_addr, BT_ADDR_LE_ANY)) {
    8e6e:	4630      	mov	r0, r6
    8e70:	a902      	add	r1, sp, #8
    8e72:	9302      	str	r3, [sp, #8]
    8e74:	f8cd 300b 	str.w	r3, [sp, #11]
    8e78:	f01b fcbb 	bl	247f2 <bt_addr_le_cmp>
    8e7c:	782a      	ldrb	r2, [r5, #0]
    8e7e:	4604      	mov	r4, r0
    8e80:	b9b0      	cbnz	r0, 8eb0 <le_adv_start_add_conn+0x70>
		/* Undirected advertising */
		conn = bt_conn_add_le(adv->id, BT_ADDR_LE_NONE);
    8e82:	4b19      	ldr	r3, [pc, #100]	; (8ee8 <le_adv_start_add_conn+0xa8>)
    8e84:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8e86:	8e99      	ldrh	r1, [r3, #52]	; 0x34
    8e88:	9004      	str	r0, [sp, #16]
    8e8a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    8e8e:	f8ad 1014 	strh.w	r1, [sp, #20]
    8e92:	4610      	mov	r0, r2
    8e94:	a904      	add	r1, sp, #16
    8e96:	f88d 3016 	strb.w	r3, [sp, #22]
    8e9a:	f002 fc0d 	bl	b6b8 <bt_conn_add_le>
		if (!conn) {
    8e9e:	4605      	mov	r5, r0
    8ea0:	b1d0      	cbz	r0, 8ed8 <le_adv_start_add_conn+0x98>
			return -ENOMEM;
		}

		bt_conn_set_state(conn, BT_CONN_CONNECT_ADV);
    8ea2:	2104      	movs	r1, #4
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
	if (!conn) {
		return -ENOMEM;
	}

	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8ea4:	f002 fc3e 	bl	b724 <bt_conn_set_state>
	*out_conn = conn;
    8ea8:	603d      	str	r5, [r7, #0]
	return 0;
}
    8eaa:	4620      	mov	r0, r4
    8eac:	b007      	add	sp, #28
    8eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_conn_exists_le(adv->id, &adv->target_addr)) {
    8eb0:	4631      	mov	r1, r6
    8eb2:	4610      	mov	r0, r2
    8eb4:	f002 fd40 	bl	b938 <bt_conn_exists_le>
    8eb8:	4604      	mov	r4, r0
    8eba:	b950      	cbnz	r0, 8ed2 <le_adv_start_add_conn+0x92>
	conn = bt_conn_add_le(adv->id, &adv->target_addr);
    8ebc:	7828      	ldrb	r0, [r5, #0]
    8ebe:	4631      	mov	r1, r6
    8ec0:	f002 fbfa 	bl	b6b8 <bt_conn_add_le>
	if (!conn) {
    8ec4:	4605      	mov	r5, r0
    8ec6:	b138      	cbz	r0, 8ed8 <le_adv_start_add_conn+0x98>
	bt_conn_set_state(conn, BT_CONN_CONNECT_DIR_ADV);
    8ec8:	2105      	movs	r1, #5
    8eca:	e7eb      	b.n	8ea4 <le_adv_start_add_conn+0x64>
		return -ENOTSUP;
    8ecc:	f06f 0422 	mvn.w	r4, #34	; 0x22
    8ed0:	e7eb      	b.n	8eaa <le_adv_start_add_conn+0x6a>
		return -EINVAL;
    8ed2:	f06f 0415 	mvn.w	r4, #21
    8ed6:	e7e8      	b.n	8eaa <le_adv_start_add_conn+0x6a>
		return -ENOMEM;
    8ed8:	f06f 040b 	mvn.w	r4, #11
    8edc:	e7e5      	b.n	8eaa <le_adv_start_add_conn+0x6a>
    8ede:	bf00      	nop
    8ee0:	00024885 	.word	0x00024885
    8ee4:	20000008 	.word	0x20000008
    8ee8:	00027a90 	.word	0x00027a90

00008eec <find_pending_connect.part.0>:
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8eec:	b513      	push	{r0, r1, r4, lr}
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8eee:	4c0d      	ldr	r4, [pc, #52]	; (8f24 <find_pending_connect.part.0+0x38>)
static struct bt_conn *find_pending_connect(uint8_t role, bt_addr_le_t *peer_addr)
    8ef0:	4601      	mov	r1, r0
		conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id, peer_addr,
    8ef2:	2205      	movs	r2, #5
    8ef4:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
    8ef8:	f002 fd44 	bl	b984 <bt_conn_lookup_state_le>
		if (!conn) {
    8efc:	b978      	cbnz	r0, 8f1e <find_pending_connect.part.0+0x32>
						       BT_ADDR_LE_NONE,
    8efe:	4b0a      	ldr	r3, [pc, #40]	; (8f28 <find_pending_connect.part.0+0x3c>)
    8f00:	6b18      	ldr	r0, [r3, #48]	; 0x30
    8f02:	8e9a      	ldrh	r2, [r3, #52]	; 0x34
    8f04:	9000      	str	r0, [sp, #0]
    8f06:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
    8f0a:	f8ad 2004 	strh.w	r2, [sp, #4]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8f0e:	f894 0033 	ldrb.w	r0, [r4, #51]	; 0x33
						       BT_ADDR_LE_NONE,
    8f12:	f88d 3006 	strb.w	r3, [sp, #6]
			conn = bt_conn_lookup_state_le(bt_dev.adv_conn_id,
    8f16:	2204      	movs	r2, #4
    8f18:	4669      	mov	r1, sp
    8f1a:	f002 fd33 	bl	b984 <bt_conn_lookup_state_le>
}
    8f1e:	b002      	add	sp, #8
    8f20:	bd10      	pop	{r4, pc}
    8f22:	bf00      	nop
    8f24:	20000008 	.word	0x20000008
    8f28:	00027a90 	.word	0x00027a90

00008f2c <handle_event>:
{
    8f2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    8f2e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8f32:	4605      	mov	r5, r0
    8f34:	4608      	mov	r0, r1
		if (handler->event != event) {
    8f36:	7811      	ldrb	r1, [r2, #0]
    8f38:	42a9      	cmp	r1, r5
    8f3a:	d01a      	beq.n	8f72 <handle_event+0x46>
	for (i = 0; i < num_handlers; i++) {
    8f3c:	3208      	adds	r2, #8
    8f3e:	4293      	cmp	r3, r2
    8f40:	d1f9      	bne.n	8f36 <handle_event+0xa>
	BT_WARN("Unhandled event 0x%02x len %u: %s", event,
    8f42:	8986      	ldrh	r6, [r0, #12]
    8f44:	4b16      	ldr	r3, [pc, #88]	; (8fa0 <handle_event+0x74>)
    8f46:	4c17      	ldr	r4, [pc, #92]	; (8fa4 <handle_event+0x78>)
    8f48:	6880      	ldr	r0, [r0, #8]
    8f4a:	4631      	mov	r1, r6
    8f4c:	1ae4      	subs	r4, r4, r3
    8f4e:	f7ff f8fb 	bl	8148 <bt_hex_real>
    8f52:	f7fc fb87 	bl	5664 <log_strdup>
    8f56:	08e4      	lsrs	r4, r4, #3
    8f58:	01a4      	lsls	r4, r4, #6
    8f5a:	f044 0402 	orr.w	r4, r4, #2
    8f5e:	4603      	mov	r3, r0
    8f60:	f8ad 4000 	strh.w	r4, [sp]
    8f64:	4810      	ldr	r0, [pc, #64]	; (8fa8 <handle_event+0x7c>)
    8f66:	4632      	mov	r2, r6
    8f68:	4629      	mov	r1, r5
    8f6a:	f019 faab 	bl	224c4 <log_3>
}
    8f6e:	b002      	add	sp, #8
    8f70:	bd70      	pop	{r4, r5, r6, pc}
		if (buf->len < handler->min_len) {
    8f72:	8981      	ldrh	r1, [r0, #12]
    8f74:	7853      	ldrb	r3, [r2, #1]
    8f76:	428b      	cmp	r3, r1
    8f78:	d90d      	bls.n	8f96 <handle_event+0x6a>
    8f7a:	4a09      	ldr	r2, [pc, #36]	; (8fa0 <handle_event+0x74>)
    8f7c:	4b09      	ldr	r3, [pc, #36]	; (8fa4 <handle_event+0x78>)
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8f7e:	480b      	ldr	r0, [pc, #44]	; (8fac <handle_event+0x80>)
    8f80:	1a9b      	subs	r3, r3, r2
    8f82:	08db      	lsrs	r3, r3, #3
    8f84:	019b      	lsls	r3, r3, #6
    8f86:	f043 0301 	orr.w	r3, r3, #1
    8f8a:	462a      	mov	r2, r5
}
    8f8c:	b002      	add	sp, #8
    8f8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Too small (%u bytes) event 0x%02x",
    8f92:	f019 ba7e 	b.w	22492 <log_2>
		handler->handler(buf);
    8f96:	6853      	ldr	r3, [r2, #4]
}
    8f98:	b002      	add	sp, #8
    8f9a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		handler->handler(buf);
    8f9e:	4718      	bx	r3
    8fa0:	000278c0 	.word	0x000278c0
    8fa4:	00027978 	.word	0x00027978
    8fa8:	0002c146 	.word	0x0002c146
    8fac:	0002c124 	.word	0x0002c124

00008fb0 <hci_le_meta_event>:
{
    8fb0:	b510      	push	{r4, lr}
    8fb2:	2101      	movs	r1, #1
    8fb4:	4604      	mov	r4, r0
    8fb6:	3008      	adds	r0, #8
    8fb8:	f01d fad1 	bl	2655e <net_buf_simple_pull_mem>
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8fbc:	4621      	mov	r1, r4
    8fbe:	4a03      	ldr	r2, [pc, #12]	; (8fcc <hci_le_meta_event+0x1c>)
    8fc0:	7800      	ldrb	r0, [r0, #0]
}
    8fc2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	handle_event(evt->subevent, buf, meta_events, ARRAY_SIZE(meta_events));
    8fc6:	230a      	movs	r3, #10
    8fc8:	f7ff bfb0 	b.w	8f2c <handle_event>
    8fcc:	00028020 	.word	0x00028020

00008fd0 <hci_cmd_done>:
{
    8fd0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8fd4:	4607      	mov	r7, r0
    8fd6:	b085      	sub	sp, #20
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8fd8:	7990      	ldrb	r0, [r2, #6]
    8fda:	4e35      	ldr	r6, [pc, #212]	; (90b0 <hci_cmd_done+0xe0>)
{
    8fdc:	4688      	mov	r8, r1
    8fde:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    8fe0:	f014 faa6 	bl	1d530 <net_buf_pool_get>
    8fe4:	4286      	cmp	r6, r0
    8fe6:	d016      	beq.n	9016 <hci_cmd_done+0x46>
    8fe8:	4b32      	ldr	r3, [pc, #200]	; (90b4 <hci_cmd_done+0xe4>)
    8fea:	4d33      	ldr	r5, [pc, #204]	; (90b8 <hci_cmd_done+0xe8>)
		BT_WARN("opcode 0x%04x pool id %u pool %p != &hci_cmd_pool %p",
    8fec:	79a0      	ldrb	r0, [r4, #6]
    8fee:	9700      	str	r7, [sp, #0]
    8ff0:	1aed      	subs	r5, r5, r3
    8ff2:	08ed      	lsrs	r5, r5, #3
    8ff4:	9001      	str	r0, [sp, #4]
    8ff6:	f014 fa9b 	bl	1d530 <net_buf_pool_get>
    8ffa:	01ad      	lsls	r5, r5, #6
    8ffc:	f045 0502 	orr.w	r5, r5, #2
    9000:	e9cd 0602 	strd	r0, r6, [sp, #8]
    9004:	462b      	mov	r3, r5
    9006:	482d      	ldr	r0, [pc, #180]	; (90bc <hci_cmd_done+0xec>)
    9008:	2204      	movs	r2, #4
    900a:	4669      	mov	r1, sp
    900c:	f019 fa76 	bl	224fc <log_n>
}
    9010:	b005      	add	sp, #20
    9012:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (cmd(buf)->opcode != opcode) {
    9016:	4620      	mov	r0, r4
    9018:	f014 fa92 	bl	1d540 <net_buf_id>
    901c:	4d28      	ldr	r5, [pc, #160]	; (90c0 <hci_cmd_done+0xf0>)
    901e:	f04f 090c 	mov.w	r9, #12
    9022:	fb09 5000 	mla	r0, r9, r0, r5
    9026:	8843      	ldrh	r3, [r0, #2]
    9028:	42bb      	cmp	r3, r7
    902a:	d011      	beq.n	9050 <hci_cmd_done+0x80>
    902c:	4b21      	ldr	r3, [pc, #132]	; (90b4 <hci_cmd_done+0xe4>)
    902e:	4e22      	ldr	r6, [pc, #136]	; (90b8 <hci_cmd_done+0xe8>)
		BT_WARN("OpCode 0x%04x completed instead of expected 0x%04x",
    9030:	4620      	mov	r0, r4
    9032:	1af6      	subs	r6, r6, r3
    9034:	f014 fa84 	bl	1d540 <net_buf_id>
    9038:	08f6      	lsrs	r6, r6, #3
    903a:	fb09 5000 	mla	r0, r9, r0, r5
    903e:	01b6      	lsls	r6, r6, #6
    9040:	f046 0602 	orr.w	r6, r6, #2
    9044:	8842      	ldrh	r2, [r0, #2]
    9046:	481f      	ldr	r0, [pc, #124]	; (90c4 <hci_cmd_done+0xf4>)
    9048:	4633      	mov	r3, r6
    904a:	4639      	mov	r1, r7
    904c:	f019 fa21 	bl	22492 <log_2>
	if (cmd(buf)->state && !status) {
    9050:	4620      	mov	r0, r4
    9052:	f014 fa75 	bl	1d540 <net_buf_id>
    9056:	260c      	movs	r6, #12
    9058:	fb06 5000 	mla	r0, r6, r0, r5
    905c:	6843      	ldr	r3, [r0, #4]
    905e:	b16b      	cbz	r3, 907c <hci_cmd_done+0xac>
    9060:	f1b8 0f00 	cmp.w	r8, #0
    9064:	d10a      	bne.n	907c <hci_cmd_done+0xac>
		struct bt_hci_cmd_state_set *update = cmd(buf)->state;
    9066:	4620      	mov	r0, r4
    9068:	f014 fa6a 	bl	1d540 <net_buf_id>
    906c:	fb06 5000 	mla	r0, r6, r0, r5
    9070:	6843      	ldr	r3, [r0, #4]
		atomic_set_bit_to(update->target, update->bit, update->val);
    9072:	e9d3 0100 	ldrd	r0, r1, [r3]
    9076:	7a1a      	ldrb	r2, [r3, #8]
    9078:	f01b fbde 	bl	24838 <atomic_set_bit_to>
	if (cmd(buf)->sync) {
    907c:	4620      	mov	r0, r4
    907e:	f014 fa5f 	bl	1d540 <net_buf_id>
    9082:	260c      	movs	r6, #12
    9084:	fb06 5000 	mla	r0, r6, r0, r5
    9088:	6883      	ldr	r3, [r0, #8]
    908a:	2b00      	cmp	r3, #0
    908c:	d0c0      	beq.n	9010 <hci_cmd_done+0x40>
		cmd(buf)->status = status;
    908e:	4620      	mov	r0, r4
    9090:	f014 fa56 	bl	1d540 <net_buf_id>
    9094:	4370      	muls	r0, r6
    9096:	f805 8000 	strb.w	r8, [r5, r0]
		k_sem_give(cmd(buf)->sync);
    909a:	4620      	mov	r0, r4
    909c:	f014 fa50 	bl	1d540 <net_buf_id>
    90a0:	fb06 5500 	mla	r5, r6, r0, r5
    90a4:	68a8      	ldr	r0, [r5, #8]
}
    90a6:	b005      	add	sp, #20
    90a8:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	z_impl_k_sem_give(sem);
    90ac:	f017 b9da 	b.w	20464 <z_impl_k_sem_give>
    90b0:	2000a0d0 	.word	0x2000a0d0
    90b4:	000278c0 	.word	0x000278c0
    90b8:	00027978 	.word	0x00027978
    90bc:	0002c168 	.word	0x0002c168
    90c0:	2000d720 	.word	0x2000d720
    90c4:	0002c19d 	.word	0x0002c19d

000090c8 <hci_cmd_status>:
{
    90c8:	b538      	push	{r3, r4, r5, lr}
    90ca:	2104      	movs	r1, #4
    90cc:	4604      	mov	r4, r0
    90ce:	3008      	adds	r0, #8
    90d0:	f01d fa45 	bl	2655e <net_buf_simple_pull_mem>
	ncmd = evt->ncmd;
    90d4:	7845      	ldrb	r5, [r0, #1]
	hci_cmd_done(opcode, evt->status, buf);
    90d6:	7801      	ldrb	r1, [r0, #0]
    90d8:	8840      	ldrh	r0, [r0, #2]
    90da:	4622      	mov	r2, r4
    90dc:	f7ff ff78 	bl	8fd0 <hci_cmd_done>
	if (ncmd) {
    90e0:	b125      	cbz	r5, 90ec <hci_cmd_status+0x24>
    90e2:	4803      	ldr	r0, [pc, #12]	; (90f0 <hci_cmd_status+0x28>)
}
    90e4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    90e8:	f017 b9bc 	b.w	20464 <z_impl_k_sem_give>
    90ec:	bd38      	pop	{r3, r4, r5, pc}
    90ee:	bf00      	nop
    90f0:	200000f0 	.word	0x200000f0

000090f4 <hci_cmd_complete>:
{
    90f4:	b538      	push	{r3, r4, r5, lr}
    90f6:	2103      	movs	r1, #3
    90f8:	4604      	mov	r4, r0
    90fa:	3008      	adds	r0, #8
    90fc:	f01d fa2f 	bl	2655e <net_buf_simple_pull_mem>
	status = buf->data[0];
    9100:	68a3      	ldr	r3, [r4, #8]
	ncmd = evt->ncmd;
    9102:	7805      	ldrb	r5, [r0, #0]
	hci_cmd_done(opcode, status, buf);
    9104:	7819      	ldrb	r1, [r3, #0]
    9106:	f8b0 0001 	ldrh.w	r0, [r0, #1]
    910a:	4622      	mov	r2, r4
    910c:	f7ff ff60 	bl	8fd0 <hci_cmd_done>
	if (ncmd) {
    9110:	b125      	cbz	r5, 911c <hci_cmd_complete+0x28>
    9112:	4803      	ldr	r0, [pc, #12]	; (9120 <hci_cmd_complete+0x2c>)
}
    9114:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    9118:	f017 b9a4 	b.w	20464 <z_impl_k_sem_give>
    911c:	bd38      	pop	{r3, r4, r5, pc}
    911e:	bf00      	nop
    9120:	200000f0 	.word	0x200000f0

00009124 <hci_tx_thread>:
{
    9124:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9128:	4d51      	ldr	r5, [pc, #324]	; (9270 <hci_tx_thread+0x14c>)
    912a:	4b52      	ldr	r3, [pc, #328]	; (9274 <hci_tx_thread+0x150>)
		events[0].state = K_POLL_STATE_NOT_READY;
    912c:	f8df 9148 	ldr.w	r9, [pc, #328]	; 9278 <hci_tx_thread+0x154>
		BT_ASSERT(err == 0);
    9130:	f8df a148 	ldr.w	sl, [pc, #328]	; 927c <hci_tx_thread+0x158>
    9134:	1aed      	subs	r5, r5, r3
    9136:	08ed      	lsrs	r5, r5, #3
		events[0].state = K_POLL_STATE_NOT_READY;
    9138:	f8d9 300c 	ldr.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    913c:	4850      	ldr	r0, [pc, #320]	; (9280 <hci_tx_thread+0x15c>)
		events[0].state = K_POLL_STATE_NOT_READY;
    913e:	f36f 3310 	bfc	r3, #12, #5
    9142:	f8c9 300c 	str.w	r3, [r9, #12]
			ev_count += bt_conn_prepare_events(&events[1]);
    9146:	f002 fa81 	bl	b64c <bt_conn_prepare_events>
    914a:	1c47      	adds	r7, r0, #1
		parm0.val = timeout;
		return (int) arch_syscall_invoke4(*(uintptr_t *)&events, *(uintptr_t *)&num_events, parm0.split.lo, parm0.split.hi, K_SYSCALL_K_POLL);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll(events, num_events, timeout);
    914c:	484a      	ldr	r0, [pc, #296]	; (9278 <hci_tx_thread+0x154>)
    914e:	f04f 32ff 	mov.w	r2, #4294967295
    9152:	f04f 33ff 	mov.w	r3, #4294967295
    9156:	4639      	mov	r1, r7
    9158:	f017 fcf6 	bl	20b48 <z_impl_k_poll>
		BT_ASSERT(err == 0);
    915c:	b160      	cbz	r0, 9178 <hci_tx_thread+0x54>
    915e:	4949      	ldr	r1, [pc, #292]	; (9284 <hci_tx_thread+0x160>)
    9160:	4849      	ldr	r0, [pc, #292]	; (9288 <hci_tx_thread+0x164>)
    9162:	f241 437b 	movw	r3, #5243	; 0x147b
    9166:	4652      	mov	r2, sl
    9168:	f018 fcdc 	bl	21b24 <printk>
    916c:	4040      	eors	r0, r0
    916e:	f380 8811 	msr	BASEPRI, r0
    9172:	f04f 0003 	mov.w	r0, #3
    9176:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    9178:	4e44      	ldr	r6, [pc, #272]	; (928c <hci_tx_thread+0x168>)
{
    917a:	f8df 80fc 	ldr.w	r8, [pc, #252]	; 9278 <hci_tx_thread+0x154>
    917e:	f106 0be8 	add.w	fp, r6, #232	; 0xe8
	for (; count; ev++, count--) {
    9182:	b917      	cbnz	r7, 918a <hci_tx_thread+0x66>
	z_impl_k_yield();
    9184:	f017 f8c6 	bl	20314 <z_impl_k_yield>
	while (1) {
    9188:	e7d6      	b.n	9138 <hci_tx_thread+0x14>
		switch (ev->state) {
    918a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    918e:	f3c1 3104 	ubfx	r1, r1, #12, #5
    9192:	2901      	cmp	r1, #1
    9194:	d959      	bls.n	924a <hci_tx_thread+0x126>
    9196:	2904      	cmp	r1, #4
    9198:	d163      	bne.n	9262 <hci_tx_thread+0x13e>
			if (ev->tag == BT_EVENT_CMD_TX) {
    919a:	f898 300c 	ldrb.w	r3, [r8, #12]
    919e:	2b00      	cmp	r3, #0
    91a0:	d157      	bne.n	9252 <hci_tx_thread+0x12e>
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    91a2:	483b      	ldr	r0, [pc, #236]	; (9290 <hci_tx_thread+0x16c>)
    91a4:	2200      	movs	r2, #0
    91a6:	2300      	movs	r3, #0
    91a8:	f01d f961 	bl	2646e <net_buf_get>
	BT_ASSERT(buf);
    91ac:	4604      	mov	r4, r0
    91ae:	b960      	cbnz	r0, 91ca <hci_tx_thread+0xa6>
    91b0:	4938      	ldr	r1, [pc, #224]	; (9294 <hci_tx_thread+0x170>)
    91b2:	4835      	ldr	r0, [pc, #212]	; (9288 <hci_tx_thread+0x164>)
    91b4:	f241 4318 	movw	r3, #5144	; 0x1418
    91b8:	4652      	mov	r2, sl
    91ba:	f018 fcb3 	bl	21b24 <printk>
    91be:	4040      	eors	r0, r0
    91c0:	f380 8811 	msr	BASEPRI, r0
    91c4:	f04f 0003 	mov.w	r0, #3
    91c8:	df02      	svc	2
	return z_impl_k_sem_take(sem, timeout);
    91ca:	f04f 33ff 	mov.w	r3, #4294967295
    91ce:	f04f 32ff 	mov.w	r2, #4294967295
    91d2:	4658      	mov	r0, fp
    91d4:	f017 f96c 	bl	204b0 <z_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    91d8:	f8d6 3100 	ldr.w	r3, [r6, #256]	; 0x100
    91dc:	b163      	cbz	r3, 91f8 <hci_tx_thread+0xd4>
		BT_ERR("Uncleared pending sent_cmd");
    91de:	01a9      	lsls	r1, r5, #6
    91e0:	482d      	ldr	r0, [pc, #180]	; (9298 <hci_tx_thread+0x174>)
    91e2:	f041 0101 	orr.w	r1, r1, #1
    91e6:	f019 f933 	bl	22450 <log_0>
		net_buf_unref(bt_dev.sent_cmd);
    91ea:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    91ee:	f014 fa5d 	bl	1d6ac <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    91f2:	2300      	movs	r3, #0
    91f4:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
	bt_dev.sent_cmd = net_buf_ref(buf);
    91f8:	4620      	mov	r0, r4
    91fa:	f01d f963 	bl	264c4 <net_buf_ref>
    91fe:	f8c6 0100 	str.w	r0, [r6, #256]	; 0x100
		return bt_hci_ecc_send(buf);
    9202:	4620      	mov	r0, r4
    9204:	f7ff f8e0 	bl	83c8 <bt_hci_ecc_send>
	if (err) {
    9208:	4601      	mov	r1, r0
    920a:	b1f0      	cbz	r0, 924a <hci_tx_thread+0x126>
		BT_ERR("Unable to send to driver (err %d)", err);
    920c:	01aa      	lsls	r2, r5, #6
    920e:	4823      	ldr	r0, [pc, #140]	; (929c <hci_tx_thread+0x178>)
    9210:	f042 0201 	orr.w	r2, r2, #1
    9214:	f019 f929 	bl	2246a <log_1>
	z_impl_k_sem_give(sem);
    9218:	4821      	ldr	r0, [pc, #132]	; (92a0 <hci_tx_thread+0x17c>)
    921a:	f017 f923 	bl	20464 <z_impl_k_sem_give>
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED, buf);
    921e:	4620      	mov	r0, r4
    9220:	f014 f98e 	bl	1d540 <net_buf_id>
    9224:	4b1f      	ldr	r3, [pc, #124]	; (92a4 <hci_tx_thread+0x180>)
    9226:	220c      	movs	r2, #12
    9228:	fb02 3000 	mla	r0, r2, r0, r3
    922c:	211f      	movs	r1, #31
    922e:	8840      	ldrh	r0, [r0, #2]
    9230:	4622      	mov	r2, r4
    9232:	f7ff fecd 	bl	8fd0 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    9236:	f8d6 0100 	ldr.w	r0, [r6, #256]	; 0x100
    923a:	f014 fa37 	bl	1d6ac <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    923e:	2300      	movs	r3, #0
		net_buf_unref(buf);
    9240:	4620      	mov	r0, r4
		bt_dev.sent_cmd = NULL;
    9242:	f8c6 3100 	str.w	r3, [r6, #256]	; 0x100
		net_buf_unref(buf);
    9246:	f014 fa31 	bl	1d6ac <net_buf_unref>
	for (; count; ev++, count--) {
    924a:	f108 0814 	add.w	r8, r8, #20
    924e:	3f01      	subs	r7, #1
    9250:	e797      	b.n	9182 <hci_tx_thread+0x5e>
				if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    9252:	2b01      	cmp	r3, #1
    9254:	d1f9      	bne.n	924a <hci_tx_thread+0x126>
					conn = CONTAINER_OF(ev->fifo,
    9256:	f8d8 0010 	ldr.w	r0, [r8, #16]
					bt_conn_process_tx(conn);
    925a:	3834      	subs	r0, #52	; 0x34
    925c:	f002 fc9a 	bl	bb94 <bt_conn_process_tx>
    9260:	e7f3      	b.n	924a <hci_tx_thread+0x126>
			BT_WARN("Unexpected k_poll event state %u", ev->state);
    9262:	01aa      	lsls	r2, r5, #6
    9264:	4810      	ldr	r0, [pc, #64]	; (92a8 <hci_tx_thread+0x184>)
    9266:	f042 0202 	orr.w	r2, r2, #2
    926a:	f019 f8fe 	bl	2246a <log_1>
    926e:	e7ec      	b.n	924a <hci_tx_thread+0x126>
    9270:	00027978 	.word	0x00027978
    9274:	000278c0 	.word	0x000278c0
    9278:	200002e0 	.word	0x200002e0
    927c:	0002c1d0 	.word	0x0002c1d0
    9280:	200002f4 	.word	0x200002f4
    9284:	0002c204 	.word	0x0002c204
    9288:	0002c20d 	.word	0x0002c20d
    928c:	20000008 	.word	0x20000008
    9290:	2000010c 	.word	0x2000010c
    9294:	0002bf75 	.word	0x0002bf75
    9298:	0002c22a 	.word	0x0002c22a
    929c:	0002c245 	.word	0x0002c245
    92a0:	200000f0 	.word	0x200000f0
    92a4:	2000d720 	.word	0x2000d720
    92a8:	0002c267 	.word	0x0002c267

000092ac <hci_num_completed_packets>:
{
    92ac:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    92b0:	4d3d      	ldr	r5, [pc, #244]	; (93a8 <hci_num_completed_packets+0xfc>)
    92b2:	4b3e      	ldr	r3, [pc, #248]	; (93ac <hci_num_completed_packets+0x100>)
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    92b4:	f8d0 8008 	ldr.w	r8, [r0, #8]
    92b8:	f8df a0f4 	ldr.w	sl, [pc, #244]	; 93b0 <hci_num_completed_packets+0x104>
    92bc:	1aed      	subs	r5, r5, r3
	for (i = 0; i < evt->num_handles; i++) {
    92be:	2600      	movs	r6, #0
    92c0:	08ed      	lsrs	r5, r5, #3
			tx->pending_no_cb = 0U;
    92c2:	46b1      	mov	r9, r6
	for (i = 0; i < evt->num_handles; i++) {
    92c4:	f898 3000 	ldrb.w	r3, [r8]
    92c8:	429e      	cmp	r6, r3
    92ca:	db01      	blt.n	92d0 <hci_num_completed_packets+0x24>
}
    92cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		handle = sys_le16_to_cpu(evt->h[i].handle);
    92d0:	eb08 0386 	add.w	r3, r8, r6, lsl #2
    92d4:	f8b3 b001 	ldrh.w	fp, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    92d8:	f8b3 7003 	ldrh.w	r7, [r3, #3]
		conn = bt_conn_lookup_handle(handle);
    92dc:	4658      	mov	r0, fp
    92de:	f002 fa19 	bl	b714 <bt_conn_lookup_handle>
		if (!conn) {
    92e2:	4604      	mov	r4, r0
    92e4:	b1d8      	cbz	r0, 931e <hci_num_completed_packets+0x72>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    92e6:	f100 0b28 	add.w	fp, r0, #40	; 0x28
		while (count--) {
    92ea:	2f00      	cmp	r7, #0
    92ec:	d033      	beq.n	9356 <hci_num_completed_packets+0xaa>
	__asm__ volatile(
    92ee:	f04f 0320 	mov.w	r3, #32
    92f2:	f3ef 8211 	mrs	r2, BASEPRI
    92f6:	f383 8811 	msr	BASEPRI, r3
    92fa:	f3bf 8f6f 	isb	sy
			if (conn->pending_no_cb) {
    92fe:	69e3      	ldr	r3, [r4, #28]
    9300:	b1b3      	cbz	r3, 9330 <hci_num_completed_packets+0x84>
				conn->pending_no_cb--;
    9302:	3b01      	subs	r3, #1
    9304:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    9306:	f382 8811 	msr	BASEPRI, r2
    930a:	f3bf 8f6f 	isb	sy
			k_sem_give(bt_conn_get_pkts(conn));
    930e:	4620      	mov	r0, r4
    9310:	f001 ffee 	bl	b2f0 <bt_conn_get_pkts>
    9314:	3f01      	subs	r7, #1
    9316:	f017 f8a5 	bl	20464 <z_impl_k_sem_give>
    931a:	b2bf      	uxth	r7, r7
    931c:	e7e5      	b.n	92ea <hci_num_completed_packets+0x3e>
			BT_ERR("No connection for handle %u", handle);
    931e:	01aa      	lsls	r2, r5, #6
    9320:	4824      	ldr	r0, [pc, #144]	; (93b4 <hci_num_completed_packets+0x108>)
    9322:	f042 0201 	orr.w	r2, r2, #1
    9326:	4659      	mov	r1, fp
    9328:	f019 f89f 	bl	2246a <log_1>
	for (i = 0; i < evt->num_handles; i++) {
    932c:	3601      	adds	r6, #1
    932e:	e7c9      	b.n	92c4 <hci_num_completed_packets+0x18>
	return list->head;
    9330:	6963      	ldr	r3, [r4, #20]
 *
 * @return A pointer to the first node of the list (or NULL if empty)
 */
static inline sys_snode_t *sys_slist_get(sys_slist_t *list);

Z_GENLIST_GET(slist, snode)
    9332:	b12b      	cbz	r3, 9340 <hci_num_completed_packets+0x94>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    9334:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    9336:	6818      	ldr	r0, [r3, #0]
	list->head = node;
    9338:	6160      	str	r0, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    933a:	428b      	cmp	r3, r1
	list->tail = node;
    933c:	bf08      	it	eq
    933e:	61a0      	streq	r0, [r4, #24]
    9340:	f382 8811 	msr	BASEPRI, r2
    9344:	f3bf 8f6f 	isb	sy
			if (!node) {
    9348:	b94b      	cbnz	r3, 935e <hci_num_completed_packets+0xb2>
				BT_ERR("packets count mismatch");
    934a:	01a9      	lsls	r1, r5, #6
    934c:	481a      	ldr	r0, [pc, #104]	; (93b8 <hci_num_completed_packets+0x10c>)
    934e:	f041 0101 	orr.w	r1, r1, #1
    9352:	f019 f87d 	bl	22450 <log_0>
		bt_conn_unref(conn);
    9356:	4620      	mov	r0, r4
    9358:	f01b fcbe 	bl	24cd8 <bt_conn_unref>
    935c:	e7e6      	b.n	932c <hci_num_completed_packets+0x80>
	__asm__ volatile(
    935e:	f04f 0220 	mov.w	r2, #32
    9362:	f3ef 8111 	mrs	r1, BASEPRI
    9366:	f382 8811 	msr	BASEPRI, r2
    936a:	f3bf 8f6f 	isb	sy
			conn->pending_no_cb = tx->pending_no_cb;
    936e:	68da      	ldr	r2, [r3, #12]
    9370:	61e2      	str	r2, [r4, #28]
	return list->tail;
    9372:	6a62      	ldr	r2, [r4, #36]	; 0x24
			tx->pending_no_cb = 0U;
    9374:	f8c3 900c 	str.w	r9, [r3, #12]
	parent->next = child;
    9378:	f8c3 9000 	str.w	r9, [r3]
Z_GENLIST_APPEND(slist, snode)
    937c:	b98a      	cbnz	r2, 93a2 <hci_num_completed_packets+0xf6>
	list->head = node;
    937e:	e9c4 3308 	strd	r3, r3, [r4, #32]
	__asm__ volatile(
    9382:	f381 8811 	msr	BASEPRI, r1
    9386:	f3bf 8f6f 	isb	sy
    938a:	2100      	movs	r1, #0
    938c:	f104 0030 	add.w	r0, r4, #48	; 0x30
    9390:	f01b fa47 	bl	24822 <atomic_test_and_set_bit>
    9394:	2800      	cmp	r0, #0
    9396:	d1ba      	bne.n	930e <hci_num_completed_packets+0x62>
		k_queue_append(&work_q->queue, work);
    9398:	4659      	mov	r1, fp
    939a:	4650      	mov	r0, sl
    939c:	f01d fd53 	bl	26e46 <k_queue_append>
    93a0:	e7b5      	b.n	930e <hci_num_completed_packets+0x62>
	parent->next = child;
    93a2:	6013      	str	r3, [r2, #0]
	list->tail = node;
    93a4:	6263      	str	r3, [r4, #36]	; 0x24
}
    93a6:	e7ec      	b.n	9382 <hci_num_completed_packets+0xd6>
    93a8:	00027978 	.word	0x00027978
    93ac:	000278c0 	.word	0x000278c0
    93b0:	2000aca8 	.word	0x2000aca8
    93b4:	0002c288 	.word	0x0002c288
    93b8:	0002c2a4 	.word	0x0002c2a4

000093bc <bt_hci_cmd_create>:
{
    93bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return net_buf_alloc_fixed(pool, timeout);
    93c0:	f04f 32ff 	mov.w	r2, #4294967295
    93c4:	f04f 33ff 	mov.w	r3, #4294967295
    93c8:	4606      	mov	r6, r0
    93ca:	4817      	ldr	r0, [pc, #92]	; (9428 <bt_hci_cmd_create+0x6c>)
	cmd(buf)->opcode = opcode;
    93cc:	4d17      	ldr	r5, [pc, #92]	; (942c <bt_hci_cmd_create+0x70>)
{
    93ce:	460f      	mov	r7, r1
    93d0:	f01d f848 	bl	26464 <net_buf_alloc_fixed>
    93d4:	4604      	mov	r4, r0
	net_buf_simple_reserve(&buf->b, reserve);
    93d6:	f100 0a08 	add.w	sl, r0, #8
    93da:	2100      	movs	r1, #0
    93dc:	f04f 0800 	mov.w	r8, #0
    93e0:	4650      	mov	r0, sl
    93e2:	f01d f85e 	bl	264a2 <net_buf_simple_reserve>
    93e6:	f884 8014 	strb.w	r8, [r4, #20]
	cmd(buf)->opcode = opcode;
    93ea:	4620      	mov	r0, r4
    93ec:	f014 f8a8 	bl	1d540 <net_buf_id>
    93f0:	f04f 090c 	mov.w	r9, #12
    93f4:	fb09 5000 	mla	r0, r9, r0, r5
    93f8:	8046      	strh	r6, [r0, #2]
	cmd(buf)->sync = NULL;
    93fa:	4620      	mov	r0, r4
    93fc:	f014 f8a0 	bl	1d540 <net_buf_id>
    9400:	fb09 5000 	mla	r0, r9, r0, r5
    9404:	f8c0 8008 	str.w	r8, [r0, #8]
	cmd(buf)->state = NULL;
    9408:	4620      	mov	r0, r4
    940a:	f014 f899 	bl	1d540 <net_buf_id>
    940e:	fb09 5500 	mla	r5, r9, r0, r5
	return net_buf_simple_add(&buf->b, len);
    9412:	2103      	movs	r1, #3
    9414:	f8c5 8004 	str.w	r8, [r5, #4]
    9418:	4650      	mov	r0, sl
    941a:	f01d f879 	bl	26510 <net_buf_simple_add>
	hdr->param_len = param_len;
    941e:	7087      	strb	r7, [r0, #2]
	hdr->opcode = sys_cpu_to_le16(opcode);
    9420:	8006      	strh	r6, [r0, #0]
}
    9422:	4620      	mov	r0, r4
    9424:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9428:	2000a0d0 	.word	0x2000a0d0
    942c:	2000d720 	.word	0x2000d720

00009430 <bt_hci_cmd_send>:
{
    9430:	b538      	push	{r3, r4, r5, lr}
    9432:	4605      	mov	r5, r0
	if (!buf) {
    9434:	460c      	mov	r4, r1
    9436:	b919      	cbnz	r1, 9440 <bt_hci_cmd_send+0x10>
		buf = bt_hci_cmd_create(opcode, 0);
    9438:	f7ff ffc0 	bl	93bc <bt_hci_cmd_create>
		if (!buf) {
    943c:	4604      	mov	r4, r0
    943e:	b1f0      	cbz	r0, 947e <bt_hci_cmd_send+0x4e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    9440:	f640 4335 	movw	r3, #3125	; 0xc35
    9444:	429d      	cmp	r5, r3
    9446:	d114      	bne.n	9472 <bt_hci_cmd_send+0x42>
		return bt_hci_ecc_send(buf);
    9448:	4620      	mov	r0, r4
    944a:	f7fe ffbd 	bl	83c8 <bt_hci_ecc_send>
		if (err) {
    944e:	4605      	mov	r5, r0
    9450:	b168      	cbz	r0, 946e <bt_hci_cmd_send+0x3e>
    9452:	4b0c      	ldr	r3, [pc, #48]	; (9484 <bt_hci_cmd_send+0x54>)
    9454:	4a0c      	ldr	r2, [pc, #48]	; (9488 <bt_hci_cmd_send+0x58>)
    9456:	1ad2      	subs	r2, r2, r3
    9458:	08d2      	lsrs	r2, r2, #3
			BT_ERR("Unable to send to driver (err %d)", err);
    945a:	0192      	lsls	r2, r2, #6
    945c:	4601      	mov	r1, r0
    945e:	f042 0201 	orr.w	r2, r2, #1
    9462:	480a      	ldr	r0, [pc, #40]	; (948c <bt_hci_cmd_send+0x5c>)
    9464:	f019 f801 	bl	2246a <log_1>
			net_buf_unref(buf);
    9468:	4620      	mov	r0, r4
    946a:	f014 f91f 	bl	1d6ac <net_buf_unref>
}
    946e:	4628      	mov	r0, r5
    9470:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    9472:	4807      	ldr	r0, [pc, #28]	; (9490 <bt_hci_cmd_send+0x60>)
    9474:	4621      	mov	r1, r4
    9476:	f01d f818 	bl	264aa <net_buf_put>
	return 0;
    947a:	2500      	movs	r5, #0
    947c:	e7f7      	b.n	946e <bt_hci_cmd_send+0x3e>
			return -ENOBUFS;
    947e:	f06f 0536 	mvn.w	r5, #54	; 0x36
    9482:	e7f4      	b.n	946e <bt_hci_cmd_send+0x3e>
    9484:	000278c0 	.word	0x000278c0
    9488:	00027978 	.word	0x00027978
    948c:	0002c245 	.word	0x0002c245
    9490:	2000010c 	.word	0x2000010c

00009494 <le_ltk_request>:
{
    9494:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    9496:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9498:	882e      	ldrh	r6, [r5, #0]
    949a:	b2b7      	uxth	r7, r6
{
    949c:	b087      	sub	sp, #28
	conn = bt_conn_lookup_handle(handle);
    949e:	4638      	mov	r0, r7
    94a0:	f002 f938 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    94a4:	4604      	mov	r4, r0
    94a6:	b968      	cbnz	r0, 94c4 <le_ltk_request+0x30>
    94a8:	4b27      	ldr	r3, [pc, #156]	; (9548 <le_ltk_request+0xb4>)
    94aa:	4a28      	ldr	r2, [pc, #160]	; (954c <le_ltk_request+0xb8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    94ac:	4828      	ldr	r0, [pc, #160]	; (9550 <le_ltk_request+0xbc>)
    94ae:	1ad2      	subs	r2, r2, r3
    94b0:	08d2      	lsrs	r2, r2, #3
    94b2:	0192      	lsls	r2, r2, #6
    94b4:	f042 0201 	orr.w	r2, r2, #1
    94b8:	4639      	mov	r1, r7
}
    94ba:	b007      	add	sp, #28
    94bc:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    94c0:	f018 bfd3 	b.w	2246a <log_1>
	if (bt_smp_request_ltk(conn, evt->rand, evt->ediv, ltk)) {
    94c4:	af02      	add	r7, sp, #8
    94c6:	f8d5 2002 	ldr.w	r2, [r5, #2]
    94ca:	f8d5 3006 	ldr.w	r3, [r5, #6]
    94ce:	9701      	str	r7, [sp, #4]
    94d0:	8969      	ldrh	r1, [r5, #10]
    94d2:	9100      	str	r1, [sp, #0]
    94d4:	f01c fe25 	bl	26122 <bt_smp_request_ltk>
    94d8:	b328      	cbz	r0, 9526 <le_ltk_request+0x92>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    94da:	2112      	movs	r1, #18
    94dc:	f242 001a 	movw	r0, #8218	; 0x201a
    94e0:	f7ff ff6c 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    94e4:	4605      	mov	r5, r0
    94e6:	b970      	cbnz	r0, 9506 <le_ltk_request+0x72>
    94e8:	4918      	ldr	r1, [pc, #96]	; (954c <le_ltk_request+0xb8>)
    94ea:	4b17      	ldr	r3, [pc, #92]	; (9548 <le_ltk_request+0xb4>)
		BT_ERR("Out of command buffers");
    94ec:	4819      	ldr	r0, [pc, #100]	; (9554 <le_ltk_request+0xc0>)
    94ee:	1ac9      	subs	r1, r1, r3
    94f0:	08c9      	lsrs	r1, r1, #3
    94f2:	0189      	lsls	r1, r1, #6
    94f4:	f041 0101 	orr.w	r1, r1, #1
    94f8:	f018 ffaa 	bl	22450 <log_0>
	bt_conn_unref(conn);
    94fc:	4620      	mov	r0, r4
    94fe:	f01b fbeb 	bl	24cd8 <bt_conn_unref>
}
    9502:	b007      	add	sp, #28
    9504:	bdf0      	pop	{r4, r5, r6, r7, pc}
    9506:	2112      	movs	r1, #18
    9508:	3008      	adds	r0, #8
    950a:	f01d f801 	bl	26510 <net_buf_simple_add>
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    950e:	4639      	mov	r1, r7
	cp->handle = sys_cpu_to_le16(handle);
    9510:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(cp->ltk, ltk, sizeof(cp->ltk));
    9514:	2210      	movs	r2, #16
    9516:	f01a ffa7 	bl	24468 <memcpy>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    951a:	4629      	mov	r1, r5
    951c:	f242 001a 	movw	r0, #8218	; 0x201a
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9520:	f7ff ff86 	bl	9430 <bt_hci_cmd_send>
    9524:	e7ea      	b.n	94fc <le_ltk_request+0x68>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    9526:	2102      	movs	r1, #2
    9528:	f242 001b 	movw	r0, #8219	; 0x201b
    952c:	f7ff ff46 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    9530:	4605      	mov	r5, r0
    9532:	2800      	cmp	r0, #0
    9534:	d0d8      	beq.n	94e8 <le_ltk_request+0x54>
    9536:	2102      	movs	r1, #2
    9538:	3008      	adds	r0, #8
    953a:	f01c ffe9 	bl	26510 <net_buf_simple_add>
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    953e:	4629      	mov	r1, r5
	cp->handle = sys_cpu_to_le16(handle);
    9540:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    9542:	f242 001b 	movw	r0, #8219	; 0x201b
    9546:	e7eb      	b.n	9520 <le_ltk_request+0x8c>
    9548:	000278c0 	.word	0x000278c0
    954c:	00027978 	.word	0x00027978
    9550:	0002c094 	.word	0x0002c094
    9554:	0002c2bb 	.word	0x0002c2bb

00009558 <le_conn_param_neg_reply>:
{
    9558:	b570      	push	{r4, r5, r6, lr}
    955a:	4606      	mov	r6, r0
    955c:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    955e:	f242 0021 	movw	r0, #8225	; 0x2021
    9562:	2103      	movs	r1, #3
    9564:	f7ff ff2a 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    9568:	4604      	mov	r4, r0
    956a:	b958      	cbnz	r0, 9584 <le_conn_param_neg_reply+0x2c>
    956c:	490c      	ldr	r1, [pc, #48]	; (95a0 <le_conn_param_neg_reply+0x48>)
    956e:	4b0d      	ldr	r3, [pc, #52]	; (95a4 <le_conn_param_neg_reply+0x4c>)
		BT_ERR("Unable to allocate buffer");
    9570:	480d      	ldr	r0, [pc, #52]	; (95a8 <le_conn_param_neg_reply+0x50>)
    9572:	1ac9      	subs	r1, r1, r3
    9574:	08c9      	lsrs	r1, r1, #3
    9576:	0189      	lsls	r1, r1, #6
}
    9578:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to allocate buffer");
    957c:	f041 0101 	orr.w	r1, r1, #1
    9580:	f018 bf66 	b.w	22450 <log_0>
    9584:	2103      	movs	r1, #3
    9586:	3008      	adds	r0, #8
    9588:	f01c ffc2 	bl	26510 <net_buf_simple_add>
	cp->reason = sys_cpu_to_le16(reason);
    958c:	7085      	strb	r5, [r0, #2]
	cp->handle = sys_cpu_to_le16(handle);
    958e:	8006      	strh	r6, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    9590:	4621      	mov	r1, r4
    9592:	f242 0021 	movw	r0, #8225	; 0x2021
}
    9596:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    959a:	f7ff bf49 	b.w	9430 <bt_hci_cmd_send>
    959e:	bf00      	nop
    95a0:	00027978 	.word	0x00027978
    95a4:	000278c0 	.word	0x000278c0
    95a8:	0002c2d2 	.word	0x0002c2d2

000095ac <le_conn_param_req>:
{
    95ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    95ae:	6883      	ldr	r3, [r0, #8]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    95b0:	78d9      	ldrb	r1, [r3, #3]
    95b2:	789a      	ldrb	r2, [r3, #2]
	handle = sys_le16_to_cpu(evt->handle);
    95b4:	881f      	ldrh	r7, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    95b6:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    95ba:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    95be:	7959      	ldrb	r1, [r3, #5]
    95c0:	791a      	ldrb	r2, [r3, #4]
    95c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    95c6:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    95ca:	799a      	ldrb	r2, [r3, #6]
    95cc:	79d9      	ldrb	r1, [r3, #7]
    95ce:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    95d2:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    95d6:	7a1a      	ldrb	r2, [r3, #8]
    95d8:	7a5b      	ldrb	r3, [r3, #9]
	handle = sys_le16_to_cpu(evt->handle);
    95da:	b2bc      	uxth	r4, r7
	param.timeout = sys_le16_to_cpu(evt->timeout);
    95dc:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
	conn = bt_conn_lookup_handle(handle);
    95e0:	4620      	mov	r0, r4
	param.timeout = sys_le16_to_cpu(evt->timeout);
    95e2:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    95e6:	f002 f895 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    95ea:	4606      	mov	r6, r0
    95ec:	b980      	cbnz	r0, 9610 <le_conn_param_req+0x64>
    95ee:	4b20      	ldr	r3, [pc, #128]	; (9670 <le_conn_param_req+0xc4>)
    95f0:	4a20      	ldr	r2, [pc, #128]	; (9674 <le_conn_param_req+0xc8>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    95f2:	4821      	ldr	r0, [pc, #132]	; (9678 <le_conn_param_req+0xcc>)
    95f4:	1ad2      	subs	r2, r2, r3
    95f6:	08d2      	lsrs	r2, r2, #3
    95f8:	0192      	lsls	r2, r2, #6
    95fa:	4621      	mov	r1, r4
    95fc:	f042 0201 	orr.w	r2, r2, #1
    9600:	f018 ff33 	bl	2246a <log_1>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_UNKNOWN_CONN_ID);
    9604:	2102      	movs	r1, #2
    9606:	4620      	mov	r0, r4
    9608:	f7ff ffa6 	bl	9558 <le_conn_param_neg_reply>
}
    960c:	b003      	add	sp, #12
    960e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (!le_param_req(conn, &param)) {
    9610:	4669      	mov	r1, sp
    9612:	f001 fea1 	bl	b358 <le_param_req>
    9616:	b938      	cbnz	r0, 9628 <le_conn_param_req+0x7c>
		le_conn_param_neg_reply(handle, BT_HCI_ERR_INVALID_LL_PARAM);
    9618:	211e      	movs	r1, #30
    961a:	4620      	mov	r0, r4
    961c:	f7ff ff9c 	bl	9558 <le_conn_param_neg_reply>
	bt_conn_unref(conn);
    9620:	4630      	mov	r0, r6
    9622:	f01b fb59 	bl	24cd8 <bt_conn_unref>
    9626:	e7f1      	b.n	960c <le_conn_param_req+0x60>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    9628:	210e      	movs	r1, #14
    962a:	f242 0020 	movw	r0, #8224	; 0x2020
    962e:	f7ff fec5 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    9632:	4605      	mov	r5, r0
    9634:	2800      	cmp	r0, #0
    9636:	d0f3      	beq.n	9620 <le_conn_param_req+0x74>
    9638:	210e      	movs	r1, #14
    963a:	3008      	adds	r0, #8
    963c:	f01c ff68 	bl	26510 <net_buf_simple_add>
	(void)memset(cp, 0, sizeof(*cp));
    9640:	220e      	movs	r2, #14
    9642:	4604      	mov	r4, r0
    9644:	2100      	movs	r1, #0
    9646:	f01a ff3a 	bl	244be <memset>
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    964a:	f8bd 3000 	ldrh.w	r3, [sp]
    964e:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    9650:	f8bd 3002 	ldrh.w	r3, [sp, #2]
    9654:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    9656:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    965a:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    965c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
	cp->handle = sys_cpu_to_le16(handle);
    9660:	8027      	strh	r7, [r4, #0]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    9662:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    9664:	4629      	mov	r1, r5
    9666:	f242 0020 	movw	r0, #8224	; 0x2020
    966a:	f7ff fee1 	bl	9430 <bt_hci_cmd_send>
    966e:	e7d7      	b.n	9620 <le_conn_param_req+0x74>
    9670:	000278c0 	.word	0x000278c0
    9674:	00027978 	.word	0x00027978
    9678:	0002c094 	.word	0x0002c094

0000967c <bt_hci_cmd_send_sync>:
{
    967c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9680:	4607      	mov	r7, r0
    9682:	b086      	sub	sp, #24
    9684:	4615      	mov	r5, r2
	if (!buf) {
    9686:	460c      	mov	r4, r1
    9688:	b921      	cbnz	r1, 9694 <bt_hci_cmd_send_sync+0x18>
		buf = bt_hci_cmd_create(opcode, 0);
    968a:	f7ff fe97 	bl	93bc <bt_hci_cmd_create>
		if (!buf) {
    968e:	4604      	mov	r4, r0
    9690:	2800      	cmp	r0, #0
    9692:	d057      	beq.n	9744 <bt_hci_cmd_send_sync+0xc8>
	return z_impl_k_sem_init(sem, initial_count, limit);
    9694:	2201      	movs	r2, #1
    9696:	2100      	movs	r1, #0
    9698:	4668      	mov	r0, sp
    969a:	f01d fd12 	bl	270c2 <z_impl_k_sem_init>
	cmd(buf)->sync = &sync_sem;
    969e:	4620      	mov	r0, r4
    96a0:	f013 ff4e 	bl	1d540 <net_buf_id>
    96a4:	f8df 80a4 	ldr.w	r8, [pc, #164]	; 974c <bt_hci_cmd_send_sync+0xd0>
    96a8:	230c      	movs	r3, #12
    96aa:	fb03 8000 	mla	r0, r3, r0, r8
    96ae:	f8c0 d008 	str.w	sp, [r0, #8]
	net_buf_ref(buf);
    96b2:	4620      	mov	r0, r4
    96b4:	f01c ff06 	bl	264c4 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    96b8:	4825      	ldr	r0, [pc, #148]	; (9750 <bt_hci_cmd_send_sync+0xd4>)
    96ba:	4621      	mov	r1, r4
    96bc:	f01c fef5 	bl	264aa <net_buf_put>
	return z_impl_k_sem_take(sem, timeout);
    96c0:	f44f 22a0 	mov.w	r2, #327680	; 0x50000
    96c4:	2300      	movs	r3, #0
    96c6:	4668      	mov	r0, sp
    96c8:	f016 fef2 	bl	204b0 <z_impl_k_sem_take>
	BT_ASSERT_MSG(err == 0, "k_sem_take failed with err %d", err);
    96cc:	4606      	mov	r6, r0
    96ce:	b180      	cbz	r0, 96f2 <bt_hci_cmd_send_sync+0x76>
    96d0:	4a20      	ldr	r2, [pc, #128]	; (9754 <bt_hci_cmd_send_sync+0xd8>)
    96d2:	4921      	ldr	r1, [pc, #132]	; (9758 <bt_hci_cmd_send_sync+0xdc>)
    96d4:	4821      	ldr	r0, [pc, #132]	; (975c <bt_hci_cmd_send_sync+0xe0>)
    96d6:	f240 134d 	movw	r3, #333	; 0x14d
    96da:	f018 fa23 	bl	21b24 <printk>
    96de:	4820      	ldr	r0, [pc, #128]	; (9760 <bt_hci_cmd_send_sync+0xe4>)
    96e0:	4631      	mov	r1, r6
    96e2:	f018 fa1f 	bl	21b24 <printk>
    96e6:	4040      	eors	r0, r0
    96e8:	f380 8811 	msr	BASEPRI, r0
    96ec:	f04f 0003 	mov.w	r0, #3
    96f0:	df02      	svc	2
	status = cmd(buf)->status;
    96f2:	4620      	mov	r0, r4
    96f4:	f013 ff24 	bl	1d540 <net_buf_id>
    96f8:	230c      	movs	r3, #12
    96fa:	4358      	muls	r0, r3
    96fc:	f818 6000 	ldrb.w	r6, [r8, r0]
	if (status) {
    9700:	b1be      	cbz	r6, 9732 <bt_hci_cmd_send_sync+0xb6>
    9702:	4a18      	ldr	r2, [pc, #96]	; (9764 <bt_hci_cmd_send_sync+0xe8>)
    9704:	4b18      	ldr	r3, [pc, #96]	; (9768 <bt_hci_cmd_send_sync+0xec>)
		BT_WARN("opcode 0x%04x status 0x%02x", opcode, status);
    9706:	4819      	ldr	r0, [pc, #100]	; (976c <bt_hci_cmd_send_sync+0xf0>)
    9708:	1a9b      	subs	r3, r3, r2
    970a:	08db      	lsrs	r3, r3, #3
    970c:	019b      	lsls	r3, r3, #6
    970e:	f043 0302 	orr.w	r3, r3, #2
    9712:	4632      	mov	r2, r6
    9714:	4639      	mov	r1, r7
    9716:	f018 febc 	bl	22492 <log_2>
		net_buf_unref(buf);
    971a:	4620      	mov	r0, r4
    971c:	f013 ffc6 	bl	1d6ac <net_buf_unref>
			return -EIO;
    9720:	2e09      	cmp	r6, #9
    9722:	bf0c      	ite	eq
    9724:	f06f 003c 	mvneq.w	r0, #60	; 0x3c
    9728:	f06f 0004 	mvnne.w	r0, #4
}
    972c:	b006      	add	sp, #24
    972e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (rsp) {
    9732:	b115      	cbz	r5, 973a <bt_hci_cmd_send_sync+0xbe>
		*rsp = buf;
    9734:	602c      	str	r4, [r5, #0]
	return 0;
    9736:	4630      	mov	r0, r6
    9738:	e7f8      	b.n	972c <bt_hci_cmd_send_sync+0xb0>
		net_buf_unref(buf);
    973a:	4620      	mov	r0, r4
    973c:	f013 ffb6 	bl	1d6ac <net_buf_unref>
	return 0;
    9740:	4628      	mov	r0, r5
    9742:	e7f3      	b.n	972c <bt_hci_cmd_send_sync+0xb0>
			return -ENOBUFS;
    9744:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9748:	e7f0      	b.n	972c <bt_hci_cmd_send_sync+0xb0>
    974a:	bf00      	nop
    974c:	2000d720 	.word	0x2000d720
    9750:	2000010c 	.word	0x2000010c
    9754:	0002c1d0 	.word	0x0002c1d0
    9758:	0002c204 	.word	0x0002c204
    975c:	0002c20d 	.word	0x0002c20d
    9760:	0002c2ec 	.word	0x0002c2ec
    9764:	000278c0 	.word	0x000278c0
    9768:	00027978 	.word	0x00027978
    976c:	0002c30c 	.word	0x0002c30c

00009770 <set_random_address>:
{
    9770:	b570      	push	{r4, r5, r6, lr}
	return memcmp(a, b, sizeof(*a));
    9772:	4e15      	ldr	r6, [pc, #84]	; (97c8 <set_random_address+0x58>)
    9774:	2206      	movs	r2, #6
    9776:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    977a:	4605      	mov	r5, r0
    977c:	f01a fe63 	bl	24446 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    9780:	4604      	mov	r4, r0
    9782:	b1d8      	cbz	r0, 97bc <set_random_address+0x4c>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    9784:	2106      	movs	r1, #6
    9786:	f242 0005 	movw	r0, #8197	; 0x2005
    978a:	f7ff fe17 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    978e:	4604      	mov	r4, r0
    9790:	b1b0      	cbz	r0, 97c0 <set_random_address+0x50>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    9792:	2206      	movs	r2, #6
    9794:	4629      	mov	r1, r5
    9796:	3008      	adds	r0, #8
    9798:	f01c fec0 	bl	2651c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    979c:	4621      	mov	r1, r4
    979e:	2200      	movs	r2, #0
    97a0:	f242 0005 	movw	r0, #8197	; 0x2005
    97a4:	f7ff ff6a 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    97a8:	4604      	mov	r4, r0
    97aa:	b938      	cbnz	r0, 97bc <set_random_address+0x4c>
	bt_addr_copy(&bt_dev.random_addr.a, addr);
    97ac:	4629      	mov	r1, r5
    97ae:	f106 002d 	add.w	r0, r6, #45	; 0x2d
    97b2:	f01b f821 	bl	247f8 <bt_addr_copy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    97b6:	2301      	movs	r3, #1
    97b8:	f886 302c 	strb.w	r3, [r6, #44]	; 0x2c
}
    97bc:	4620      	mov	r0, r4
    97be:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    97c0:	f06f 0436 	mvn.w	r4, #54	; 0x36
    97c4:	e7fa      	b.n	97bc <set_random_address+0x4c>
    97c6:	bf00      	nop
    97c8:	20000008 	.word	0x20000008

000097cc <le_set_private_addr>:
{
    97cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
    97ce:	4d16      	ldr	r5, [pc, #88]	; (9828 <le_set_private_addr+0x5c>)
    97d0:	4603      	mov	r3, r0
    97d2:	f105 0094 	add.w	r0, r5, #148	; 0x94
    97d6:	f01b f806 	bl	247e6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_RPA_VALID)) {
    97da:	04c2      	lsls	r2, r0, #19
    97dc:	d422      	bmi.n	9824 <le_set_private_addr+0x58>
	err = bt_rpa_create(bt_dev.irk[id], &rpa);
    97de:	f103 0012 	add.w	r0, r3, #18
    97e2:	4669      	mov	r1, sp
    97e4:	eb05 1000 	add.w	r0, r5, r0, lsl #4
    97e8:	f01a feee 	bl	245c8 <bt_rpa_create>
	if (!err) {
    97ec:	4604      	mov	r4, r0
    97ee:	b950      	cbnz	r0, 9806 <le_set_private_addr+0x3a>
		err = set_random_address(&rpa);
    97f0:	4668      	mov	r0, sp
    97f2:	f7ff ffbd 	bl	9770 <set_random_address>
		if (!err) {
    97f6:	4604      	mov	r4, r0
    97f8:	b928      	cbnz	r0, 9806 <le_set_private_addr+0x3a>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    97fa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    97fe:	f105 0094 	add.w	r0, r5, #148	; 0x94
    9802:	f01a ffff 	bl	24804 <atomic_or>
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_RPA_TIMEOUT_SET)) {
    9806:	4809      	ldr	r0, [pc, #36]	; (982c <le_set_private_addr+0x60>)
    9808:	210d      	movs	r1, #13
    980a:	f01b f80a 	bl	24822 <atomic_test_and_set_bit>
    980e:	b930      	cbnz	r0, 981e <le_set_private_addr+0x52>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    9810:	4907      	ldr	r1, [pc, #28]	; (9830 <le_set_private_addr+0x64>)
    9812:	4808      	ldr	r0, [pc, #32]	; (9834 <le_set_private_addr+0x68>)
    9814:	f04f 72e1 	mov.w	r2, #29491200	; 0x1c20000
    9818:	2300      	movs	r3, #0
    981a:	f016 ff7d 	bl	20718 <k_delayed_work_submit_to_queue>
}
    981e:	4620      	mov	r0, r4
    9820:	b003      	add	sp, #12
    9822:	bd30      	pop	{r4, r5, pc}
		return 0;
    9824:	2400      	movs	r4, #0
    9826:	e7fa      	b.n	981e <le_set_private_addr+0x52>
    9828:	20000008 	.word	0x20000008
    982c:	2000009c 	.word	0x2000009c
    9830:	20000138 	.word	0x20000138
    9834:	2000aca8 	.word	0x2000aca8

00009838 <le_adv_set_random_addr.isra.0>:
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    9838:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    983c:	f011 0401 	ands.w	r4, r1, #1
static int le_adv_set_random_addr(struct bt_le_ext_adv *adv, uint32_t options,
    9840:	4605      	mov	r5, r0
    9842:	460f      	mov	r7, r1
    9844:	4690      	mov	r8, r2
    9846:	461e      	mov	r6, r3
	if (options & BT_LE_ADV_OPT_CONNECTABLE) {
    9848:	d035      	beq.n	98b6 <le_adv_set_random_addr.isra.0+0x7e>
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    984a:	b132      	cbz	r2, 985a <le_adv_set_random_addr.isra.0+0x22>
    984c:	068b      	lsls	r3, r1, #26
    984e:	d504      	bpl.n	985a <le_adv_set_random_addr.isra.0+0x22>
		    !BT_FEAT_LE_PRIVACY(bt_dev.le.features)) {
    9850:	4b28      	ldr	r3, [pc, #160]	; (98f4 <le_adv_set_random_addr.isra.0+0xbc>)
		if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA) &&
    9852:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    9856:	065c      	lsls	r4, r3, #25
    9858:	d548      	bpl.n	98ec <le_adv_set_random_addr.isra.0+0xb4>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    985a:	0778      	lsls	r0, r7, #29
    985c:	d40b      	bmi.n	9876 <le_adv_set_random_addr.isra.0+0x3e>
		return le_set_private_addr(adv->id);
    985e:	4628      	mov	r0, r5
    9860:	f7ff ffb4 	bl	97cc <le_set_private_addr>
			if (err) {
    9864:	bb00      	cbnz	r0, 98a8 <le_adv_set_random_addr.isra.0+0x70>
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    9866:	f1b8 0f00 	cmp.w	r8, #0
    986a:	d03d      	beq.n	98e8 <le_adv_set_random_addr.isra.0+0xb0>
    986c:	06b9      	lsls	r1, r7, #26
    986e:	d53b      	bpl.n	98e8 <le_adv_set_random_addr.isra.0+0xb0>
				*own_addr_type = BT_HCI_OWN_ADDR_RPA_OR_RANDOM;
    9870:	2303      	movs	r3, #3
			*own_addr_type = BT_ADDR_LE_RANDOM;
    9872:	7033      	strb	r3, [r6, #0]
		if (err) {
    9874:	e018      	b.n	98a8 <le_adv_set_random_addr.isra.0+0x70>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    9876:	4c1f      	ldr	r4, [pc, #124]	; (98f4 <le_adv_set_random_addr.isra.0+0xbc>)
    9878:	ebc5 03c5 	rsb	r3, r5, r5, lsl #3
    987c:	ea4f 09c5 	mov.w	r9, r5, lsl #3
    9880:	5ce3      	ldrb	r3, [r4, r3]
    9882:	2b01      	cmp	r3, #1
    9884:	d008      	beq.n	9898 <le_adv_set_random_addr.isra.0+0x60>
			*own_addr_type = id_addr->type;
    9886:	eba9 0505 	sub.w	r5, r9, r5
    988a:	5d63      	ldrb	r3, [r4, r5]
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    988c:	f1b8 0f00 	cmp.w	r8, #0
    9890:	d10c      	bne.n	98ac <le_adv_set_random_addr.isra.0+0x74>
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    9892:	7033      	strb	r3, [r6, #0]
	return 0;
    9894:	2000      	movs	r0, #0
    9896:	e007      	b.n	98a8 <le_adv_set_random_addr.isra.0+0x70>
				err = set_adv_random_address(adv, &id_addr->a);
    9898:	2007      	movs	r0, #7
    989a:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    989e:	4420      	add	r0, r4
    98a0:	f7ff ff66 	bl	9770 <set_random_address>
				if (err) {
    98a4:	2800      	cmp	r0, #0
    98a6:	d0ee      	beq.n	9886 <le_adv_set_random_addr.isra.0+0x4e>
}
    98a8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			if (dir_adv && (options & BT_LE_ADV_OPT_DIR_ADDR_RPA)) {
    98ac:	06ba      	lsls	r2, r7, #26
				*own_addr_type |= BT_HCI_OWN_ADDR_RPA_MASK;
    98ae:	bf48      	it	mi
    98b0:	f043 0302 	orrmi.w	r3, r3, #2
    98b4:	e7ed      	b.n	9892 <le_adv_set_random_addr.isra.0+0x5a>
		if (options & BT_LE_ADV_OPT_USE_IDENTITY) {
    98b6:	074b      	lsls	r3, r1, #29
    98b8:	d514      	bpl.n	98e4 <le_adv_set_random_addr.isra.0+0xac>
			if (id_addr->type == BT_ADDR_LE_RANDOM) {
    98ba:	f8df 8038 	ldr.w	r8, [pc, #56]	; 98f4 <le_adv_set_random_addr.isra.0+0xbc>
    98be:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
    98c2:	00c7      	lsls	r7, r0, #3
    98c4:	f818 3003 	ldrb.w	r3, [r8, r3]
    98c8:	2b01      	cmp	r3, #1
    98ca:	d109      	bne.n	98e0 <le_adv_set_random_addr.isra.0+0xa8>
				err = set_adv_random_address(adv, &id_addr->a);
    98cc:	2007      	movs	r0, #7
    98ce:	fb10 3005 	smlabb	r0, r0, r5, r3
		return set_random_address(addr);
    98d2:	4440      	add	r0, r8
    98d4:	f7ff ff4c 	bl	9770 <set_random_address>
			*own_addr_type = id_addr->type;
    98d8:	1b7d      	subs	r5, r7, r5
    98da:	f818 3005 	ldrb.w	r3, [r8, r5]
    98de:	e7c8      	b.n	9872 <le_adv_set_random_addr.isra.0+0x3a>
	int err = 0;
    98e0:	4620      	mov	r0, r4
    98e2:	e7f9      	b.n	98d8 <le_adv_set_random_addr.isra.0+0xa0>
		return le_set_private_addr(adv->id);
    98e4:	f7ff ff72 	bl	97cc <le_set_private_addr>
			*own_addr_type = BT_ADDR_LE_RANDOM;
    98e8:	2301      	movs	r3, #1
    98ea:	e7c2      	b.n	9872 <le_adv_set_random_addr.isra.0+0x3a>
			return -ENOTSUP;
    98ec:	f06f 0022 	mvn.w	r0, #34	; 0x22
    98f0:	e7da      	b.n	98a8 <le_adv_set_random_addr.isra.0+0x70>
    98f2:	bf00      	nop
    98f4:	20000008 	.word	0x20000008

000098f8 <set_le_adv_enable_legacy>:
{
    98f8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    98fa:	4606      	mov	r6, r0
    98fc:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    98fe:	f242 000a 	movw	r0, #8202	; 0x200a
    9902:	2101      	movs	r1, #1
    9904:	f7ff fd5a 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    9908:	4604      	mov	r4, r0
    990a:	b1e8      	cbz	r0, 9948 <set_le_adv_enable_legacy+0x50>
	return net_buf_simple_add_u8(&buf->b, val);
    990c:	3008      	adds	r0, #8
	if (enable) {
    990e:	b1cd      	cbz	r5, 9944 <set_le_adv_enable_legacy+0x4c>
    9910:	2101      	movs	r1, #1
    9912:	f01c fe0c 	bl	2652e <net_buf_simple_add_u8>
	bt_hci_cmd_state_set_init(&state, adv->flags, BT_ADV_ENABLED, enable);
    9916:	3610      	adds	r6, #16
static inline void bt_hci_cmd_state_set_init(struct bt_hci_cmd_state_set *state,
					     atomic_t *target, int bit,
					     bool val)
{
	state->target = target;
	state->bit = bit;
    9918:	2306      	movs	r3, #6
	cmd(buf)->state = &state;
    991a:	4620      	mov	r0, r4
    991c:	9302      	str	r3, [sp, #8]
	state->target = target;
    991e:	9601      	str	r6, [sp, #4]
	state->val = val;
    9920:	f88d 500c 	strb.w	r5, [sp, #12]
    9924:	f013 fe0c 	bl	1d540 <net_buf_id>
    9928:	4b09      	ldr	r3, [pc, #36]	; (9950 <set_le_adv_enable_legacy+0x58>)
    992a:	220c      	movs	r2, #12
    992c:	fb02 3300 	mla	r3, r2, r0, r3
    9930:	aa01      	add	r2, sp, #4
    9932:	605a      	str	r2, [r3, #4]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    9934:	4621      	mov	r1, r4
    9936:	2200      	movs	r2, #0
    9938:	f242 000a 	movw	r0, #8202	; 0x200a
    993c:	f7ff fe9e 	bl	967c <bt_hci_cmd_send_sync>
}
    9940:	b004      	add	sp, #16
    9942:	bd70      	pop	{r4, r5, r6, pc}
    9944:	4629      	mov	r1, r5
    9946:	e7e4      	b.n	9912 <set_le_adv_enable_legacy+0x1a>
		return -ENOBUFS;
    9948:	f06f 0036 	mvn.w	r0, #54	; 0x36
    994c:	e7f8      	b.n	9940 <set_le_adv_enable_legacy+0x48>
    994e:	bf00      	nop
    9950:	2000d720 	.word	0x2000d720

00009954 <le_update_private_addr>:
{
    9954:	b538      	push	{r3, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9956:	4b19      	ldr	r3, [pc, #100]	; (99bc <le_update_private_addr+0x68>)
    9958:	f103 0028 	add.w	r0, r3, #40	; 0x28
    995c:	f01a ff43 	bl	247e6 <atomic_get>
		if (adv &&
    9960:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    9962:	f3c0 1580 	ubfx	r5, r0, #6, #1
    9966:	d412      	bmi.n	998e <le_update_private_addr+0x3a>
	uint8_t id = BT_ID_DEFAULT;
    9968:	2400      	movs	r4, #0
	bool adv_enabled = false;
    996a:	4625      	mov	r5, r4
	err = le_set_private_addr(id);
    996c:	4620      	mov	r0, r4
    996e:	f7ff ff2d 	bl	97cc <le_set_private_addr>
	if (err) {
    9972:	4601      	mov	r1, r0
    9974:	b1c8      	cbz	r0, 99aa <le_update_private_addr+0x56>
    9976:	4b12      	ldr	r3, [pc, #72]	; (99c0 <le_update_private_addr+0x6c>)
    9978:	4a12      	ldr	r2, [pc, #72]	; (99c4 <le_update_private_addr+0x70>)
		BT_WARN("Failed to update RPA address (%d)", err);
    997a:	4813      	ldr	r0, [pc, #76]	; (99c8 <le_update_private_addr+0x74>)
    997c:	1ad2      	subs	r2, r2, r3
    997e:	08d2      	lsrs	r2, r2, #3
    9980:	0192      	lsls	r2, r2, #6
}
    9982:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_WARN("Failed to update RPA address (%d)", err);
    9986:	f042 0202 	orr.w	r2, r2, #2
    998a:	f018 bd6e 	b.w	2246a <log_1>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    998e:	f103 0028 	add.w	r0, r3, #40	; 0x28
    9992:	f01a ff28 	bl	247e6 <atomic_get>
		    atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
    9996:	0502      	lsls	r2, r0, #20
    9998:	f3c0 21c0 	ubfx	r1, r0, #11, #1
    999c:	d4e4      	bmi.n	9968 <le_update_private_addr+0x14>
			id = adv->id;
    999e:	4618      	mov	r0, r3
    99a0:	f810 4f18 	ldrb.w	r4, [r0, #24]!
			set_le_adv_enable_legacy(adv, false);
    99a4:	f7ff ffa8 	bl	98f8 <set_le_adv_enable_legacy>
    99a8:	e7e0      	b.n	996c <le_update_private_addr+0x18>
	if (adv && adv_enabled) {
    99aa:	b12d      	cbz	r5, 99b8 <le_update_private_addr+0x64>
}
    99ac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		set_le_adv_enable_legacy(adv, true);
    99b0:	4806      	ldr	r0, [pc, #24]	; (99cc <le_update_private_addr+0x78>)
    99b2:	2101      	movs	r1, #1
    99b4:	f7ff bfa0 	b.w	98f8 <set_le_adv_enable_legacy>
}
    99b8:	bd38      	pop	{r3, r4, r5, pc}
    99ba:	bf00      	nop
    99bc:	20000008 	.word	0x20000008
    99c0:	000278c0 	.word	0x000278c0
    99c4:	00027978 	.word	0x00027978
    99c8:	0002c328 	.word	0x0002c328
    99cc:	20000020 	.word	0x20000020

000099d0 <rpa_timeout>:
{
    99d0:	b507      	push	{r0, r1, r2, lr}
	bool adv_enabled = false;
    99d2:	2300      	movs	r3, #0
    99d4:	f88d 3007 	strb.w	r3, [sp, #7]
	le_rpa_invalidate();
    99d8:	f7fe fff4 	bl	89c4 <le_rpa_invalidate>
	bt_adv_foreach(adv_is_private_enabled, &adv_enabled);
    99dc:	480d      	ldr	r0, [pc, #52]	; (9a14 <rpa_timeout+0x44>)
    99de:	f10d 0107 	add.w	r1, sp, #7
    99e2:	f7fe ffbf 	bl	8964 <bt_adv_foreach>
	if (!(adv_enabled ||
    99e6:	f89d 3007 	ldrb.w	r3, [sp, #7]
    99ea:	b973      	cbnz	r3, 9a0a <rpa_timeout+0x3a>
    99ec:	480a      	ldr	r0, [pc, #40]	; (9a18 <rpa_timeout+0x48>)
    99ee:	f01a fefa 	bl	247e6 <atomic_get>
    99f2:	0501      	lsls	r1, r0, #20
    99f4:	d409      	bmi.n	9a0a <rpa_timeout+0x3a>
    99f6:	4808      	ldr	r0, [pc, #32]	; (9a18 <rpa_timeout+0x48>)
    99f8:	f01a fef5 	bl	247e6 <atomic_get>
    99fc:	0682      	lsls	r2, r0, #26
    99fe:	d506      	bpl.n	9a0e <rpa_timeout+0x3e>
    9a00:	4805      	ldr	r0, [pc, #20]	; (9a18 <rpa_timeout+0x48>)
    9a02:	f01a fef0 	bl	247e6 <atomic_get>
	      (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING) &&
    9a06:	0603      	lsls	r3, r0, #24
    9a08:	d501      	bpl.n	9a0e <rpa_timeout+0x3e>
	le_update_private_addr();
    9a0a:	f7ff ffa3 	bl	9954 <le_update_private_addr>
}
    9a0e:	b003      	add	sp, #12
    9a10:	f85d fb04 	ldr.w	pc, [sp], #4
    9a14:	000248cf 	.word	0x000248cf
    9a18:	2000009c 	.word	0x2000009c

00009a1c <hci_le_read_max_data_len>:
{
    9a1c:	b573      	push	{r0, r1, r4, r5, r6, lr}
    9a1e:	4606      	mov	r6, r0
    9a20:	460d      	mov	r5, r1
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    9a22:	aa01      	add	r2, sp, #4
    9a24:	2100      	movs	r1, #0
    9a26:	f242 002f 	movw	r0, #8239	; 0x202f
    9a2a:	f7ff fe27 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    9a2e:	4604      	mov	r4, r0
    9a30:	b160      	cbz	r0, 9a4c <hci_le_read_max_data_len+0x30>
    9a32:	490c      	ldr	r1, [pc, #48]	; (9a64 <hci_le_read_max_data_len+0x48>)
    9a34:	4b0c      	ldr	r3, [pc, #48]	; (9a68 <hci_le_read_max_data_len+0x4c>)
		BT_ERR("Failed to read DLE max data len");
    9a36:	480d      	ldr	r0, [pc, #52]	; (9a6c <hci_le_read_max_data_len+0x50>)
    9a38:	1ac9      	subs	r1, r1, r3
    9a3a:	08c9      	lsrs	r1, r1, #3
    9a3c:	0189      	lsls	r1, r1, #6
    9a3e:	f041 0101 	orr.w	r1, r1, #1
    9a42:	f018 fd05 	bl	22450 <log_0>
}
    9a46:	4620      	mov	r0, r4
    9a48:	b002      	add	sp, #8
    9a4a:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    9a4c:	9801      	ldr	r0, [sp, #4]
    9a4e:	6883      	ldr	r3, [r0, #8]
	*tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    9a50:	f8b3 2001 	ldrh.w	r2, [r3, #1]
    9a54:	8032      	strh	r2, [r6, #0]
	*tx_time = sys_le16_to_cpu(rp->max_tx_time);
    9a56:	f8b3 3003 	ldrh.w	r3, [r3, #3]
    9a5a:	802b      	strh	r3, [r5, #0]
	net_buf_unref(rsp);
    9a5c:	f013 fe26 	bl	1d6ac <net_buf_unref>
	return 0;
    9a60:	e7f1      	b.n	9a46 <hci_le_read_max_data_len+0x2a>
    9a62:	bf00      	nop
    9a64:	00027978 	.word	0x00027978
    9a68:	000278c0 	.word	0x000278c0
    9a6c:	0002c34a 	.word	0x0002c34a

00009a70 <hci_id_add>:
{
    9a70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a74:	4605      	mov	r5, r0
    9a76:	4688      	mov	r8, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    9a78:	f242 0027 	movw	r0, #8231	; 0x2027
    9a7c:	2127      	movs	r1, #39	; 0x27
{
    9a7e:	4617      	mov	r7, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_ADD_DEV_TO_RL, sizeof(*cp));
    9a80:	f7ff fc9c 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    9a84:	4604      	mov	r4, r0
    9a86:	b1e8      	cbz	r0, 9ac4 <hci_id_add+0x54>
	return net_buf_simple_add(&buf->b, len);
    9a88:	2127      	movs	r1, #39	; 0x27
    9a8a:	3008      	adds	r0, #8
    9a8c:	f01c fd40 	bl	26510 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    9a90:	4641      	mov	r1, r8
    9a92:	4606      	mov	r6, r0
    9a94:	f01a feb3 	bl	247fe <bt_addr_le_copy>
	memcpy(cp->peer_irk, peer_irk, 16);
    9a98:	4639      	mov	r1, r7
    9a9a:	2210      	movs	r2, #16
    9a9c:	1df0      	adds	r0, r6, #7
    9a9e:	f01a fce3 	bl	24468 <memcpy>
	memcpy(cp->local_irk, bt_dev.irk[id], 16);
    9aa2:	490a      	ldr	r1, [pc, #40]	; (9acc <hci_id_add+0x5c>)
    9aa4:	3512      	adds	r5, #18
    9aa6:	eb01 1105 	add.w	r1, r1, r5, lsl #4
    9aaa:	2210      	movs	r2, #16
    9aac:	f106 0017 	add.w	r0, r6, #23
    9ab0:	f01a fcda 	bl	24468 <memcpy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    9ab4:	4621      	mov	r1, r4
    9ab6:	2200      	movs	r2, #0
}
    9ab8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_ADD_DEV_TO_RL, buf, NULL);
    9abc:	f242 0027 	movw	r0, #8231	; 0x2027
    9ac0:	f7ff bddc 	b.w	967c <bt_hci_cmd_send_sync>
}
    9ac4:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9ac8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9acc:	20000008 	.word	0x20000008

00009ad0 <hci_set_ad>:
{
    9ad0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9ad4:	460c      	mov	r4, r1
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9ad6:	2120      	movs	r1, #32
{
    9ad8:	4682      	mov	sl, r0
    9ada:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    9adc:	f7ff fc6e 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    9ae0:	4606      	mov	r6, r0
    9ae2:	2800      	cmp	r0, #0
    9ae4:	d05c      	beq.n	9ba0 <hci_set_ad+0xd0>
    9ae6:	2120      	movs	r1, #32
    9ae8:	3008      	adds	r0, #8
    9aea:	f01c fd11 	bl	26510 <net_buf_simple_add>
	(void)memset(set_data, 0, sizeof(*set_data));
    9aee:	2220      	movs	r2, #32
    9af0:	2100      	movs	r1, #0
    9af2:	4681      	mov	r9, r0
    9af4:	f01a fce3 	bl	244be <memset>
	err = set_data_add(set_data->data, BT_GAP_ADV_MAX_ADV_DATA_LEN,
    9af8:	eb04 03c5 	add.w	r3, r4, r5, lsl #3
    9afc:	f109 0b01 	add.w	fp, r9, #1
	for (size_t i = 0; i < ad_len; i++) {
    9b00:	9300      	str	r3, [sp, #0]
	uint8_t set_data_len = 0;
    9b02:	2500      	movs	r5, #0
		for (size_t j = 0; j < ad[i].len; j++) {
    9b04:	f8d4 8000 	ldr.w	r8, [r4]
    9b08:	2300      	movs	r3, #0
    9b0a:	6862      	ldr	r2, [r4, #4]
    9b0c:	4293      	cmp	r3, r2
    9b0e:	d30d      	bcc.n	9b2c <hci_set_ad+0x5c>
	for (size_t i = 0; i < ad_len; i++) {
    9b10:	9b00      	ldr	r3, [sp, #0]
    9b12:	3408      	adds	r4, #8
    9b14:	429c      	cmp	r4, r3
    9b16:	d1f5      	bne.n	9b04 <hci_set_ad+0x34>
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9b18:	2200      	movs	r2, #0
    9b1a:	4631      	mov	r1, r6
    9b1c:	4650      	mov	r0, sl
	*data_len = set_data_len;
    9b1e:	f889 5000 	strb.w	r5, [r9]
}
    9b22:	b003      	add	sp, #12
    9b24:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    9b28:	f7ff bda8 	b.w	967c <bt_hci_cmd_send_sync>
			size_t len = data[j].data_len;
    9b2c:	f898 2001 	ldrb.w	r2, [r8, #1]
			uint8_t type = data[j].type;
    9b30:	f898 c000 	ldrb.w	ip, [r8]
			if ((set_data_len + len + 2) > set_data_len_max) {
    9b34:	1ca8      	adds	r0, r5, #2
    9b36:	1881      	adds	r1, r0, r2
    9b38:	291f      	cmp	r1, #31
    9b3a:	d91a      	bls.n	9b72 <hci_set_ad+0xa2>
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9b3c:	f1bc 0f09 	cmp.w	ip, #9
				ssize_t shortened_len = set_data_len_max -
    9b40:	f1c5 021d 	rsb	r2, r5, #29
				if (!(type == BT_DATA_NAME_COMPLETE &&
    9b44:	d101      	bne.n	9b4a <hci_set_ad+0x7a>
    9b46:	2a00      	cmp	r2, #0
    9b48:	dc11      	bgt.n	9b6e <hci_set_ad+0x9e>
    9b4a:	4b17      	ldr	r3, [pc, #92]	; (9ba8 <hci_set_ad+0xd8>)
    9b4c:	4917      	ldr	r1, [pc, #92]	; (9bac <hci_set_ad+0xdc>)
					BT_ERR("Too big advertising data");
    9b4e:	4818      	ldr	r0, [pc, #96]	; (9bb0 <hci_set_ad+0xe0>)
    9b50:	1ac9      	subs	r1, r1, r3
    9b52:	08c9      	lsrs	r1, r1, #3
    9b54:	0189      	lsls	r1, r1, #6
    9b56:	f041 0101 	orr.w	r1, r1, #1
    9b5a:	f018 fc79 	bl	22450 <log_0>
		net_buf_unref(buf);
    9b5e:	4630      	mov	r0, r6
    9b60:	f013 fda4 	bl	1d6ac <net_buf_unref>
					return -EINVAL;
    9b64:	f06f 0015 	mvn.w	r0, #21
}
    9b68:	b003      	add	sp, #12
    9b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				type = BT_DATA_NAME_SHORTENED;
    9b6e:	f04f 0c08 	mov.w	ip, #8
			set_data[set_data_len++] = len + 1;
    9b72:	b2d7      	uxtb	r7, r2
    9b74:	1c79      	adds	r1, r7, #1
    9b76:	f80b 1005 	strb.w	r1, [fp, r5]
    9b7a:	1c69      	adds	r1, r5, #1
			set_data[set_data_len++] = type;
    9b7c:	b2c9      	uxtb	r1, r1
			memcpy(&set_data[set_data_len], data[j].data, len);
    9b7e:	fa5b f080 	uxtab	r0, fp, r0
			set_data[set_data_len++] = type;
    9b82:	f80b c001 	strb.w	ip, [fp, r1]
			memcpy(&set_data[set_data_len], data[j].data, len);
    9b86:	f8d8 1004 	ldr.w	r1, [r8, #4]
    9b8a:	9301      	str	r3, [sp, #4]
			set_data_len += len;
    9b8c:	3702      	adds	r7, #2
			memcpy(&set_data[set_data_len], data[j].data, len);
    9b8e:	f01a fc6b 	bl	24468 <memcpy>
		for (size_t j = 0; j < ad[i].len; j++) {
    9b92:	9b01      	ldr	r3, [sp, #4]
			set_data_len += len;
    9b94:	443d      	add	r5, r7
    9b96:	b2ed      	uxtb	r5, r5
		for (size_t j = 0; j < ad[i].len; j++) {
    9b98:	3301      	adds	r3, #1
    9b9a:	f108 0808 	add.w	r8, r8, #8
    9b9e:	e7b4      	b.n	9b0a <hci_set_ad+0x3a>
		return -ENOBUFS;
    9ba0:	f06f 0036 	mvn.w	r0, #54	; 0x36
    9ba4:	e7e0      	b.n	9b68 <hci_set_ad+0x98>
    9ba6:	bf00      	nop
    9ba8:	000278c0 	.word	0x000278c0
    9bac:	00027978 	.word	0x00027978
    9bb0:	0002c36a 	.word	0x0002c36a

00009bb4 <le_adv_update.constprop.0>:
static int le_adv_update(struct bt_le_ext_adv *adv,
    9bb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9bb8:	b087      	sub	sp, #28
    9bba:	4606      	mov	r6, r0
    9bbc:	f89d 8048 	ldrb.w	r8, [sp, #72]	; 0x48
    9bc0:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
    9bc4:	f89d a044 	ldrb.w	sl, [sp, #68]	; 0x44
    9bc8:	460c      	mov	r4, r1
    9bca:	4617      	mov	r7, r2
	struct bt_ad d[2] = {};
    9bcc:	2100      	movs	r1, #0
    9bce:	2210      	movs	r2, #16
    9bd0:	a802      	add	r0, sp, #8
static int le_adv_update(struct bt_le_ext_adv *adv,
    9bd2:	461d      	mov	r5, r3
	struct bt_ad d[2] = {};
    9bd4:	f01a fc73 	bl	244be <memset>
	if (use_name) {
    9bd8:	f1b8 0f00 	cmp.w	r8, #0
    9bdc:	d00e      	beq.n	9bfc <le_adv_update.constprop.0+0x48>
		if ((ad && ad_has_name(ad, ad_len)) ||
    9bde:	bbb4      	cbnz	r4, 9c4e <le_adv_update.constprop.0+0x9a>
    9be0:	2d00      	cmp	r5, #0
    9be2:	d13f      	bne.n	9c64 <le_adv_update.constprop.0+0xb0>
		data = (struct bt_data)BT_DATA(
    9be4:	f8df b0b0 	ldr.w	fp, [pc, #176]	; 9c98 <le_adv_update.constprop.0+0xe4>
    9be8:	4658      	mov	r0, fp
    9bea:	f01a fbff 	bl	243ec <strlen>
    9bee:	2309      	movs	r3, #9
    9bf0:	f88d 3000 	strb.w	r3, [sp]
    9bf4:	f88d 0001 	strb.w	r0, [sp, #1]
    9bf8:	f8cd b004 	str.w	fp, [sp, #4]
		d[0].len = ad_len;
    9bfc:	e9cd 4702 	strd	r4, r7, [sp, #8]
		if (use_name && !scannable) {
    9c00:	f1b8 0f00 	cmp.w	r8, #0
    9c04:	d030      	beq.n	9c68 <le_adv_update.constprop.0+0xb4>
    9c06:	f1ba 0f00 	cmp.w	sl, #0
    9c0a:	d12d      	bne.n	9c68 <le_adv_update.constprop.0+0xb4>
			d[1].len = 1;
    9c0c:	2301      	movs	r3, #1
			d[1].data = &data;
    9c0e:	f8cd d010 	str.w	sp, [sp, #16]
			d[1].len = 1;
    9c12:	9305      	str	r3, [sp, #20]
			d_len = 2;
    9c14:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    9c16:	a902      	add	r1, sp, #8
    9c18:	f242 0008 	movw	r0, #8200	; 0x2008
    9c1c:	f7ff ff58 	bl	9ad0 <hci_set_ad>
		if (err) {
    9c20:	4604      	mov	r4, r0
    9c22:	b938      	cbnz	r0, 9c34 <le_adv_update.constprop.0+0x80>
	if (scannable) {
    9c24:	f1ba 0f00 	cmp.w	sl, #0
    9c28:	d120      	bne.n	9c6c <le_adv_update.constprop.0+0xb8>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9c2a:	2104      	movs	r1, #4
    9c2c:	f106 0010 	add.w	r0, r6, #16
    9c30:	f01a fde8 	bl	24804 <atomic_or>
}
    9c34:	4620      	mov	r0, r4
    9c36:	b007      	add	sp, #28
    9c38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9c3c:	f814 2033 	ldrb.w	r2, [r4, r3, lsl #3]
    9c40:	3a08      	subs	r2, #8
    9c42:	2a01      	cmp	r2, #1
    9c44:	d925      	bls.n	9c92 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9c46:	3301      	adds	r3, #1
    9c48:	429f      	cmp	r7, r3
    9c4a:	d1f7      	bne.n	9c3c <le_adv_update.constprop.0+0x88>
    9c4c:	e7c8      	b.n	9be0 <le_adv_update.constprop.0+0x2c>
    9c4e:	2300      	movs	r3, #0
    9c50:	e7fa      	b.n	9c48 <le_adv_update.constprop.0+0x94>
		if (ad[i].type == BT_DATA_NAME_COMPLETE ||
    9c52:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
    9c56:	3a08      	subs	r2, #8
    9c58:	2a01      	cmp	r2, #1
    9c5a:	d91a      	bls.n	9c92 <le_adv_update.constprop.0+0xde>
	for (i = 0; i < ad_len; i++) {
    9c5c:	3301      	adds	r3, #1
    9c5e:	4599      	cmp	r9, r3
    9c60:	d1f7      	bne.n	9c52 <le_adv_update.constprop.0+0x9e>
    9c62:	e7bf      	b.n	9be4 <le_adv_update.constprop.0+0x30>
    9c64:	2300      	movs	r3, #0
    9c66:	e7fa      	b.n	9c5e <le_adv_update.constprop.0+0xaa>
		d_len = 1;
    9c68:	2201      	movs	r2, #1
    9c6a:	e7d4      	b.n	9c16 <le_adv_update.constprop.0+0x62>
		d[0].len = sd_len;
    9c6c:	e9cd 5902 	strd	r5, r9, [sp, #8]
		if (use_name) {
    9c70:	2201      	movs	r2, #1
    9c72:	f1b8 0f00 	cmp.w	r8, #0
    9c76:	d003      	beq.n	9c80 <le_adv_update.constprop.0+0xcc>
			d[1].len = 1;
    9c78:	9205      	str	r2, [sp, #20]
			d[1].data = &data;
    9c7a:	f8cd d010 	str.w	sp, [sp, #16]
			d_len = 2;
    9c7e:	2202      	movs	r2, #2
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    9c80:	a902      	add	r1, sp, #8
    9c82:	f242 0009 	movw	r0, #8201	; 0x2009
    9c86:	f7ff ff23 	bl	9ad0 <hci_set_ad>
		if (err) {
    9c8a:	2800      	cmp	r0, #0
    9c8c:	d0cd      	beq.n	9c2a <le_adv_update.constprop.0+0x76>
    9c8e:	4604      	mov	r4, r0
    9c90:	e7d0      	b.n	9c34 <le_adv_update.constprop.0+0x80>
			return -EINVAL;
    9c92:	f06f 0415 	mvn.w	r4, #21
    9c96:	e7cd      	b.n	9c34 <le_adv_update.constprop.0+0x80>
    9c98:	20000168 	.word	0x20000168

00009c9c <conn_auto_initiate>:
{
    9c9c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	if (conn->state != BT_CONN_CONNECTED) {
    9c9e:	7b43      	ldrb	r3, [r0, #13]
    9ca0:	2b07      	cmp	r3, #7
{
    9ca2:	4604      	mov	r4, r0
	if (conn->state != BT_CONN_CONNECTED) {
    9ca4:	d169      	bne.n	9d7a <conn_auto_initiate+0xde>
	if (!atomic_test_bit(conn->flags, BT_CONN_AUTO_FEATURE_EXCH) &&
    9ca6:	1d06      	adds	r6, r0, #4
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    9ca8:	4630      	mov	r0, r6
    9caa:	f01a fd9c 	bl	247e6 <atomic_get>
    9cae:	0483      	lsls	r3, r0, #18
    9cb0:	d41b      	bmi.n	9cea <conn_auto_initiate+0x4e>
    9cb2:	78e3      	ldrb	r3, [r4, #3]
    9cb4:	b123      	cbz	r3, 9cc0 <conn_auto_initiate+0x24>
	     BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features))) {
    9cb6:	4b32      	ldr	r3, [pc, #200]	; (9d80 <conn_auto_initiate+0xe4>)
	    ((conn->role == BT_HCI_ROLE_MASTER) ||
    9cb8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    9cbc:	071d      	lsls	r5, r3, #28
    9cbe:	d514      	bpl.n	9cea <conn_auto_initiate+0x4e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    9cc0:	2102      	movs	r1, #2
    9cc2:	f242 0016 	movw	r0, #8214	; 0x2016
    9cc6:	f7ff fb79 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    9cca:	4605      	mov	r5, r0
    9ccc:	b168      	cbz	r0, 9cea <conn_auto_initiate+0x4e>
    9cce:	2102      	movs	r1, #2
    9cd0:	3008      	adds	r0, #8
    9cd2:	f01c fc1d 	bl	26510 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    9cd6:	8823      	ldrh	r3, [r4, #0]
    9cd8:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9cda:	4629      	mov	r1, r5
    9cdc:	f242 0016 	movw	r0, #8214	; 0x2016
}
    9ce0:	b004      	add	sp, #16
    9ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    9ce6:	f7ff bba3 	b.w	9430 <bt_hci_cmd_send>
    9cea:	4630      	mov	r0, r6
    9cec:	f01a fd7b 	bl	247e6 <atomic_get>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9cf0:	f410 5f80 	tst.w	r0, #4096	; 0x1000
    9cf4:	4d22      	ldr	r5, [pc, #136]	; (9d80 <conn_auto_initiate+0xe4>)
    9cf6:	f3c0 3100 	ubfx	r1, r0, #12, #1
    9cfa:	d11c      	bne.n	9d36 <conn_auto_initiate+0x9a>
	    !atomic_test_bit(conn->flags, BT_CONN_AUTO_PHY_COMPLETE) &&
    9cfc:	f895 3099 	ldrb.w	r3, [r5, #153]	; 0x99
    9d00:	07d8      	lsls	r0, r3, #31
    9d02:	d518      	bpl.n	9d36 <conn_auto_initiate+0x9a>
		err = bt_le_set_phy(conn, 0U, BT_HCI_LE_PHY_PREFER_2M,
    9d04:	2302      	movs	r3, #2
    9d06:	9100      	str	r1, [sp, #0]
    9d08:	461a      	mov	r2, r3
    9d0a:	4620      	mov	r0, r4
    9d0c:	f01a fe77 	bl	249fe <bt_le_set_phy>
		if (!err) {
    9d10:	4601      	mov	r1, r0
    9d12:	b930      	cbnz	r0, 9d22 <conn_auto_initiate+0x86>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9d14:	2180      	movs	r1, #128	; 0x80
    9d16:	4630      	mov	r0, r6
}
    9d18:	b004      	add	sp, #16
    9d1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    9d1e:	f01a bd71 	b.w	24804 <atomic_or>
    9d22:	4a18      	ldr	r2, [pc, #96]	; (9d84 <conn_auto_initiate+0xe8>)
    9d24:	4b18      	ldr	r3, [pc, #96]	; (9d88 <conn_auto_initiate+0xec>)
		BT_ERR("Failed to set LE PHY (%d)", err);
    9d26:	4819      	ldr	r0, [pc, #100]	; (9d8c <conn_auto_initiate+0xf0>)
    9d28:	1ad2      	subs	r2, r2, r3
    9d2a:	08d2      	lsrs	r2, r2, #3
    9d2c:	0192      	lsls	r2, r2, #6
    9d2e:	f042 0201 	orr.w	r2, r2, #1
    9d32:	f018 fb9a 	bl	2246a <log_1>
	if (IS_ENABLED(CONFIG_BT_AUTO_DATA_LEN_UPDATE) &&
    9d36:	f895 3098 	ldrb.w	r3, [r5, #152]	; 0x98
    9d3a:	069a      	lsls	r2, r3, #26
    9d3c:	d51d      	bpl.n	9d7a <conn_auto_initiate+0xde>
		if (IS_BT_QUIRK_NO_AUTO_DLE(&bt_dev)) {
    9d3e:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    9d42:	689b      	ldr	r3, [r3, #8]
    9d44:	079b      	lsls	r3, r3, #30
    9d46:	d518      	bpl.n	9d7a <conn_auto_initiate+0xde>
			err = hci_le_read_max_data_len(&tx_octets, &tx_time);
    9d48:	f10d 010e 	add.w	r1, sp, #14
    9d4c:	a803      	add	r0, sp, #12
    9d4e:	f7ff fe65 	bl	9a1c <hci_le_read_max_data_len>
			if (!err) {
    9d52:	b990      	cbnz	r0, 9d7a <conn_auto_initiate+0xde>
				err = bt_le_set_data_len(conn,
    9d54:	f8bd 100c 	ldrh.w	r1, [sp, #12]
    9d58:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9d5c:	4620      	mov	r0, r4
    9d5e:	f01a fe31 	bl	249c4 <bt_le_set_data_len>
				if (err) {
    9d62:	4601      	mov	r1, r0
    9d64:	b148      	cbz	r0, 9d7a <conn_auto_initiate+0xde>
    9d66:	4a07      	ldr	r2, [pc, #28]	; (9d84 <conn_auto_initiate+0xe8>)
    9d68:	4b07      	ldr	r3, [pc, #28]	; (9d88 <conn_auto_initiate+0xec>)
					BT_ERR("Failed to set data len (%d)", err);
    9d6a:	4809      	ldr	r0, [pc, #36]	; (9d90 <conn_auto_initiate+0xf4>)
    9d6c:	1ad2      	subs	r2, r2, r3
    9d6e:	08d2      	lsrs	r2, r2, #3
    9d70:	0192      	lsls	r2, r2, #6
    9d72:	f042 0201 	orr.w	r2, r2, #1
    9d76:	f018 fb78 	bl	2246a <log_1>
}
    9d7a:	b004      	add	sp, #16
    9d7c:	bd70      	pop	{r4, r5, r6, pc}
    9d7e:	bf00      	nop
    9d80:	20000008 	.word	0x20000008
    9d84:	00027978 	.word	0x00027978
    9d88:	000278c0 	.word	0x000278c0
    9d8c:	0002c383 	.word	0x0002c383
    9d90:	0002c39d 	.word	0x0002c39d

00009d94 <le_phy_update_complete>:
{
    9d94:	b538      	push	{r3, r4, r5, lr}
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9d96:	6883      	ldr	r3, [r0, #8]
    9d98:	f8b3 5001 	ldrh.w	r5, [r3, #1]
	conn = bt_conn_lookup_handle(handle);
    9d9c:	4628      	mov	r0, r5
    9d9e:	f001 fcb9 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    9da2:	4604      	mov	r4, r0
    9da4:	b960      	cbnz	r0, 9dc0 <le_phy_update_complete+0x2c>
    9da6:	4b11      	ldr	r3, [pc, #68]	; (9dec <le_phy_update_complete+0x58>)
    9da8:	4a11      	ldr	r2, [pc, #68]	; (9df0 <le_phy_update_complete+0x5c>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9daa:	4812      	ldr	r0, [pc, #72]	; (9df4 <le_phy_update_complete+0x60>)
    9dac:	1ad2      	subs	r2, r2, r3
    9dae:	08d2      	lsrs	r2, r2, #3
    9db0:	0192      	lsls	r2, r2, #6
    9db2:	4629      	mov	r1, r5
    9db4:	f042 0201 	orr.w	r2, r2, #1
}
    9db8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9dbc:	f018 bb55 	b.w	2246a <log_1>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    9dc0:	1d05      	adds	r5, r0, #4
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    9dc2:	f06f 0180 	mvn.w	r1, #128	; 0x80
    9dc6:	4628      	mov	r0, r5
    9dc8:	f01a fcfe 	bl	247c8 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_AUTO_PHY_UPDATE) &&
    9dcc:	0603      	lsls	r3, r0, #24
    9dce:	d507      	bpl.n	9de0 <le_phy_update_complete+0x4c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    9dd0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    9dd4:	4628      	mov	r0, r5
    9dd6:	f01a fd15 	bl	24804 <atomic_or>
		conn_auto_initiate(conn);
    9dda:	4620      	mov	r0, r4
    9ddc:	f7ff ff5e 	bl	9c9c <conn_auto_initiate>
	bt_conn_unref(conn);
    9de0:	4620      	mov	r0, r4
}
    9de2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_conn_unref(conn);
    9de6:	f01a bf77 	b.w	24cd8 <bt_conn_unref>
    9dea:	bf00      	nop
    9dec:	000278c0 	.word	0x000278c0
    9df0:	00027978 	.word	0x00027978
    9df4:	0002c094 	.word	0x0002c094

00009df8 <le_remote_feat_complete>:
{
    9df8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    9dfa:	6885      	ldr	r5, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9dfc:	f8b5 6001 	ldrh.w	r6, [r5, #1]
	conn = bt_conn_lookup_handle(handle);
    9e00:	4630      	mov	r0, r6
    9e02:	f001 fc87 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    9e06:	4604      	mov	r4, r0
    9e08:	b960      	cbnz	r0, 9e24 <le_remote_feat_complete+0x2c>
    9e0a:	4a10      	ldr	r2, [pc, #64]	; (9e4c <le_remote_feat_complete+0x54>)
    9e0c:	4b10      	ldr	r3, [pc, #64]	; (9e50 <le_remote_feat_complete+0x58>)
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9e0e:	4811      	ldr	r0, [pc, #68]	; (9e54 <le_remote_feat_complete+0x5c>)
    9e10:	1ad2      	subs	r2, r2, r3
    9e12:	08d2      	lsrs	r2, r2, #3
    9e14:	0192      	lsls	r2, r2, #6
    9e16:	4631      	mov	r1, r6
    9e18:	f042 0201 	orr.w	r2, r2, #1
}
    9e1c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to lookup conn for handle %u", handle);
    9e20:	f018 bb23 	b.w	2246a <log_1>
	if (!evt->status) {
    9e24:	782b      	ldrb	r3, [r5, #0]
    9e26:	b923      	cbnz	r3, 9e32 <le_remote_feat_complete+0x3a>
		memcpy(conn->le.features, evt->features,
    9e28:	2208      	movs	r2, #8
    9e2a:	1ce9      	adds	r1, r5, #3
    9e2c:	30ac      	adds	r0, #172	; 0xac
    9e2e:	f01a fb1b 	bl	24468 <memcpy>
    9e32:	f44f 5100 	mov.w	r1, #8192	; 0x2000
    9e36:	1d20      	adds	r0, r4, #4
    9e38:	f01a fce4 	bl	24804 <atomic_or>
	conn_auto_initiate(conn);
    9e3c:	4620      	mov	r0, r4
    9e3e:	f7ff ff2d 	bl	9c9c <conn_auto_initiate>
	bt_conn_unref(conn);
    9e42:	4620      	mov	r0, r4
}
    9e44:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9e48:	f01a bf46 	b.w	24cd8 <bt_conn_unref>
    9e4c:	00027978 	.word	0x00027978
    9e50:	000278c0 	.word	0x000278c0
    9e54:	0002c094 	.word	0x0002c094

00009e58 <bt_unpair>:
{
    9e58:	b530      	push	{r4, r5, lr}
    9e5a:	b085      	sub	sp, #20
    9e5c:	460d      	mov	r5, r1
    9e5e:	f88d 0007 	strb.w	r0, [sp, #7]
	if (id >= CONFIG_BT_ID_MAX) {
    9e62:	b9c8      	cbnz	r0, 9e98 <bt_unpair+0x40>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9e64:	b949      	cbnz	r1, 9e7a <bt_unpair+0x22>
		bt_foreach_bond(id, unpair_remote, &id);
    9e66:	490e      	ldr	r1, [pc, #56]	; (9ea0 <bt_unpair+0x48>)
    9e68:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9e6c:	f10d 0207 	add.w	r2, sp, #7
    9e70:	f006 fa68 	bl	10344 <bt_foreach_bond>
		return 0;
    9e74:	2000      	movs	r0, #0
}
    9e76:	b005      	add	sp, #20
    9e78:	bd30      	pop	{r4, r5, pc}
	    (!addr || !bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    9e7a:	9002      	str	r0, [sp, #8]
    9e7c:	a902      	add	r1, sp, #8
    9e7e:	f8cd 000b 	str.w	r0, [sp, #11]
    9e82:	4628      	mov	r0, r5
    9e84:	f01a fcb5 	bl	247f2 <bt_addr_le_cmp>
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    9e88:	2800      	cmp	r0, #0
    9e8a:	d0ec      	beq.n	9e66 <bt_unpair+0xe>
	unpair(id, addr);
    9e8c:	f89d 0007 	ldrb.w	r0, [sp, #7]
    9e90:	4629      	mov	r1, r5
    9e92:	f7fe fe47 	bl	8b24 <unpair>
	return 0;
    9e96:	e7ed      	b.n	9e74 <bt_unpair+0x1c>
		return -EINVAL;
    9e98:	f06f 0015 	mvn.w	r0, #21
    9e9c:	e7eb      	b.n	9e76 <bt_unpair+0x1e>
    9e9e:	bf00      	nop
    9ea0:	0002485b 	.word	0x0002485b

00009ea4 <bt_security_err_get>:
	switch (hci_err) {
    9ea4:	2829      	cmp	r0, #41	; 0x29
    9ea6:	bf9a      	itte	ls
    9ea8:	4b01      	ldrls	r3, [pc, #4]	; (9eb0 <bt_security_err_get+0xc>)
    9eaa:	5c18      	ldrbls	r0, [r3, r0]
{
    9eac:	2008      	movhi	r0, #8
}
    9eae:	4770      	bx	lr
    9eb0:	0002c982 	.word	0x0002c982

00009eb4 <hci_encrypt_key_refresh_complete>:
{
    9eb4:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    9eb6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    9eb8:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	uint8_t status = evt->status;
    9ebc:	781d      	ldrb	r5, [r3, #0]
	conn = bt_conn_lookup_handle(handle);
    9ebe:	4630      	mov	r0, r6
    9ec0:	f001 fc28 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    9ec4:	4604      	mov	r4, r0
    9ec6:	b960      	cbnz	r0, 9ee2 <hci_encrypt_key_refresh_complete+0x2e>
    9ec8:	4a1f      	ldr	r2, [pc, #124]	; (9f48 <hci_encrypt_key_refresh_complete+0x94>)
    9eca:	4b20      	ldr	r3, [pc, #128]	; (9f4c <hci_encrypt_key_refresh_complete+0x98>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9ecc:	4820      	ldr	r0, [pc, #128]	; (9f50 <hci_encrypt_key_refresh_complete+0x9c>)
    9ece:	1ad2      	subs	r2, r2, r3
    9ed0:	08d2      	lsrs	r2, r2, #3
    9ed2:	0192      	lsls	r2, r2, #6
    9ed4:	4631      	mov	r1, r6
    9ed6:	f042 0201 	orr.w	r2, r2, #1
}
    9eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    9ede:	f018 bac4 	b.w	2246a <log_1>
	if (status) {
    9ee2:	b165      	cbz	r5, 9efe <hci_encrypt_key_refresh_complete+0x4a>
		bt_conn_security_changed(conn, status,
    9ee4:	4628      	mov	r0, r5
    9ee6:	f7ff ffdd 	bl	9ea4 <bt_security_err_get>
    9eea:	4629      	mov	r1, r5
    9eec:	4602      	mov	r2, r0
    9eee:	4620      	mov	r0, r4
    9ef0:	f001 fa6c 	bl	b3cc <bt_conn_security_changed>
	bt_conn_unref(conn);
    9ef4:	4620      	mov	r0, r4
}
    9ef6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_conn_unref(conn);
    9efa:	f01a beed 	b.w	24cd8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9efe:	7883      	ldrb	r3, [r0, #2]
    9f00:	2b01      	cmp	r3, #1
    9f02:	d107      	bne.n	9f14 <hci_encrypt_key_refresh_complete+0x60>
		bt_smp_update_keys(conn);
    9f04:	f006 f930 	bl	10168 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9f08:	4620      	mov	r0, r4
    9f0a:	f01a fc36 	bl	2477a <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    9f0e:	2800      	cmp	r0, #0
    9f10:	bf08      	it	eq
    9f12:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    9f14:	4628      	mov	r0, r5
    9f16:	f7ff ffc5 	bl	9ea4 <bt_security_err_get>
    9f1a:	4629      	mov	r1, r5
    9f1c:	4602      	mov	r2, r0
    9f1e:	4620      	mov	r0, r4
    9f20:	f001 fa54 	bl	b3cc <bt_conn_security_changed>
	if (status) {
    9f24:	2d00      	cmp	r5, #0
    9f26:	d0e5      	beq.n	9ef4 <hci_encrypt_key_refresh_complete+0x40>
    9f28:	4b08      	ldr	r3, [pc, #32]	; (9f4c <hci_encrypt_key_refresh_complete+0x98>)
    9f2a:	4907      	ldr	r1, [pc, #28]	; (9f48 <hci_encrypt_key_refresh_complete+0x94>)
		BT_ERR("Failed to set required security level");
    9f2c:	4809      	ldr	r0, [pc, #36]	; (9f54 <hci_encrypt_key_refresh_complete+0xa0>)
    9f2e:	1ac9      	subs	r1, r1, r3
    9f30:	08c9      	lsrs	r1, r1, #3
    9f32:	0189      	lsls	r1, r1, #6
    9f34:	f041 0101 	orr.w	r1, r1, #1
    9f38:	f018 fa8a 	bl	22450 <log_0>
		bt_conn_disconnect(conn, status);
    9f3c:	4629      	mov	r1, r5
    9f3e:	4620      	mov	r0, r4
    9f40:	f01a ff05 	bl	24d4e <bt_conn_disconnect>
    9f44:	e7d6      	b.n	9ef4 <hci_encrypt_key_refresh_complete+0x40>
    9f46:	bf00      	nop
    9f48:	00027978 	.word	0x00027978
    9f4c:	000278c0 	.word	0x000278c0
    9f50:	0002c0b8 	.word	0x0002c0b8
    9f54:	0002c3b9 	.word	0x0002c3b9

00009f58 <hci_encrypt_change>:
{
    9f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    9f5a:	6886      	ldr	r6, [r0, #8]
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    9f5c:	f8b6 7001 	ldrh.w	r7, [r6, #1]
	uint8_t status = evt->status;
    9f60:	7835      	ldrb	r5, [r6, #0]
	conn = bt_conn_lookup_handle(handle);
    9f62:	4638      	mov	r0, r7
    9f64:	f001 fbd6 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    9f68:	4604      	mov	r4, r0
    9f6a:	b960      	cbnz	r0, 9f86 <hci_encrypt_change+0x2e>
    9f6c:	4b20      	ldr	r3, [pc, #128]	; (9ff0 <hci_encrypt_change+0x98>)
    9f6e:	4a21      	ldr	r2, [pc, #132]	; (9ff4 <hci_encrypt_change+0x9c>)
		BT_ERR("Unable to look up conn with handle %u", handle);
    9f70:	4821      	ldr	r0, [pc, #132]	; (9ff8 <hci_encrypt_change+0xa0>)
    9f72:	1ad2      	subs	r2, r2, r3
    9f74:	08d2      	lsrs	r2, r2, #3
    9f76:	0192      	lsls	r2, r2, #6
    9f78:	4639      	mov	r1, r7
    9f7a:	f042 0201 	orr.w	r2, r2, #1
}
    9f7e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		BT_ERR("Unable to look up conn with handle %u", handle);
    9f82:	f018 ba72 	b.w	2246a <log_1>
	if (status) {
    9f86:	b165      	cbz	r5, 9fa2 <hci_encrypt_change+0x4a>
		bt_conn_security_changed(conn, status,
    9f88:	4628      	mov	r0, r5
    9f8a:	f7ff ff8b 	bl	9ea4 <bt_security_err_get>
    9f8e:	4629      	mov	r1, r5
    9f90:	4602      	mov	r2, r0
    9f92:	4620      	mov	r0, r4
    9f94:	f001 fa1a 	bl	b3cc <bt_conn_security_changed>
	bt_conn_unref(conn);
    9f98:	4620      	mov	r0, r4
}
    9f9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	bt_conn_unref(conn);
    9f9e:	f01a be9b 	b.w	24cd8 <bt_conn_unref>
	if (conn->type == BT_CONN_TYPE_LE) {
    9fa2:	7882      	ldrb	r2, [r0, #2]
	conn->encrypt = evt->encrypt;
    9fa4:	78f3      	ldrb	r3, [r6, #3]
    9fa6:	72c3      	strb	r3, [r0, #11]
	if (conn->type == BT_CONN_TYPE_LE) {
    9fa8:	2a01      	cmp	r2, #1
    9faa:	d108      	bne.n	9fbe <hci_encrypt_change+0x66>
		if (conn->encrypt) {
    9fac:	b10b      	cbz	r3, 9fb2 <hci_encrypt_change+0x5a>
			bt_smp_update_keys(conn);
    9fae:	f006 f8db 	bl	10168 <bt_smp_update_keys>
		if (!update_sec_level(conn)) {
    9fb2:	4620      	mov	r0, r4
    9fb4:	f01a fbe1 	bl	2477a <update_sec_level>
			status = BT_HCI_ERR_AUTH_FAIL;
    9fb8:	2800      	cmp	r0, #0
    9fba:	bf08      	it	eq
    9fbc:	2505      	moveq	r5, #5
	bt_conn_security_changed(conn, status, bt_security_err_get(status));
    9fbe:	4628      	mov	r0, r5
    9fc0:	f7ff ff70 	bl	9ea4 <bt_security_err_get>
    9fc4:	4629      	mov	r1, r5
    9fc6:	4602      	mov	r2, r0
    9fc8:	4620      	mov	r0, r4
    9fca:	f001 f9ff 	bl	b3cc <bt_conn_security_changed>
	if (status) {
    9fce:	2d00      	cmp	r5, #0
    9fd0:	d0e2      	beq.n	9f98 <hci_encrypt_change+0x40>
    9fd2:	4b07      	ldr	r3, [pc, #28]	; (9ff0 <hci_encrypt_change+0x98>)
    9fd4:	4907      	ldr	r1, [pc, #28]	; (9ff4 <hci_encrypt_change+0x9c>)
		BT_ERR("Failed to set required security level");
    9fd6:	4809      	ldr	r0, [pc, #36]	; (9ffc <hci_encrypt_change+0xa4>)
    9fd8:	1ac9      	subs	r1, r1, r3
    9fda:	08c9      	lsrs	r1, r1, #3
    9fdc:	0189      	lsls	r1, r1, #6
    9fde:	f041 0101 	orr.w	r1, r1, #1
    9fe2:	f018 fa35 	bl	22450 <log_0>
		bt_conn_disconnect(conn, status);
    9fe6:	4629      	mov	r1, r5
    9fe8:	4620      	mov	r0, r4
    9fea:	f01a feb0 	bl	24d4e <bt_conn_disconnect>
    9fee:	e7d3      	b.n	9f98 <hci_encrypt_change+0x40>
    9ff0:	000278c0 	.word	0x000278c0
    9ff4:	00027978 	.word	0x00027978
    9ff8:	0002c0b8 	.word	0x0002c0b8
    9ffc:	0002c3b9 	.word	0x0002c3b9

0000a000 <bt_id_add>:
{
    a000:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a002:	4c5d      	ldr	r4, [pc, #372]	; (a178 <bt_id_add+0x178>)
    a004:	f894 20e0 	ldrb.w	r2, [r4, #224]	; 0xe0
    a008:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
{
    a00c:	4605      	mov	r5, r0
	if (!bt_dev.le.rl_size || bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a00e:	b10a      	cbz	r2, a014 <bt_id_add+0x14>
    a010:	429a      	cmp	r2, r3
    a012:	d208      	bcs.n	a026 <bt_id_add+0x26>
		bt_dev.le.rl_entries++;
    a014:	3301      	adds	r3, #1
    a016:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    a01a:	7a2b      	ldrb	r3, [r5, #8]
    a01c:	f043 0304 	orr.w	r3, r3, #4
    a020:	722b      	strb	r3, [r5, #8]
}
    a022:	b003      	add	sp, #12
    a024:	bdf0      	pop	{r4, r5, r6, r7, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    a026:	2100      	movs	r1, #0
    a028:	2206      	movs	r2, #6
    a02a:	4608      	mov	r0, r1
    a02c:	f001 fcaa 	bl	b984 <bt_conn_lookup_state_le>
	if (conn) {
    a030:	4606      	mov	r6, r0
    a032:	b178      	cbz	r0, a054 <bt_id_add+0x54>
    a034:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    a038:	f104 0094 	add.w	r0, r4, #148	; 0x94
    a03c:	f01a fbe2 	bl	24804 <atomic_or>
	keys->state |= flag;
    a040:	7a2b      	ldrb	r3, [r5, #8]
		bt_conn_unref(conn);
    a042:	4630      	mov	r0, r6
	keys->state |= flag;
    a044:	f043 0301 	orr.w	r3, r3, #1
    a048:	722b      	strb	r3, [r5, #8]
}
    a04a:	b003      	add	sp, #12
    a04c:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		bt_conn_unref(conn);
    a050:	f01a be42 	b.w	24cd8 <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    a054:	4601      	mov	r1, r0
    a056:	4849      	ldr	r0, [pc, #292]	; (a17c <bt_id_add+0x17c>)
    a058:	f7fe fc84 	bl	8964 <bt_adv_foreach>
	if (bt_dev.le.rl_entries) {
    a05c:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    a060:	b173      	cbz	r3, a080 <bt_id_add+0x80>
		err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    a062:	4630      	mov	r0, r6
    a064:	f01a fc73 	bl	2494e <addr_res_enable>
		if (err) {
    a068:	b150      	cbz	r0, a080 <bt_id_add+0x80>
    a06a:	4945      	ldr	r1, [pc, #276]	; (a180 <bt_id_add+0x180>)
    a06c:	4b45      	ldr	r3, [pc, #276]	; (a184 <bt_id_add+0x184>)
			BT_WARN("Failed to disable address resolution");
    a06e:	4846      	ldr	r0, [pc, #280]	; (a188 <bt_id_add+0x188>)
    a070:	1ac9      	subs	r1, r1, r3
    a072:	08c9      	lsrs	r1, r1, #3
    a074:	0189      	lsls	r1, r1, #6
    a076:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("Set privacy mode command is not supported");
    a07a:	f018 f9e9 	bl	22450 <log_0>
	if (err) {
    a07e:	e023      	b.n	a0c8 <bt_id_add+0xc8>
	if (bt_dev.le.rl_entries == bt_dev.le.rl_size) {
    a080:	f894 20e1 	ldrb.w	r2, [r4, #225]	; 0xe1
    a084:	f894 30e0 	ldrb.w	r3, [r4, #224]	; 0xe0
    a088:	429a      	cmp	r2, r3
    a08a:	d127      	bne.n	a0dc <bt_id_add+0xdc>
    a08c:	4b3d      	ldr	r3, [pc, #244]	; (a184 <bt_id_add+0x184>)
    a08e:	4e3c      	ldr	r6, [pc, #240]	; (a180 <bt_id_add+0x180>)
		BT_WARN("Resolving list size exceeded. Switching to host.");
    a090:	483e      	ldr	r0, [pc, #248]	; (a18c <bt_id_add+0x18c>)
    a092:	1af6      	subs	r6, r6, r3
    a094:	08f6      	lsrs	r6, r6, #3
    a096:	01b6      	lsls	r6, r6, #6
    a098:	f046 0102 	orr.w	r1, r6, #2
    a09c:	f018 f9d8 	bl	22450 <log_0>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_CLEAR_RL, NULL, NULL);
    a0a0:	2200      	movs	r2, #0
    a0a2:	4611      	mov	r1, r2
    a0a4:	f242 0029 	movw	r0, #8233	; 0x2029
    a0a8:	f7ff fae8 	bl	967c <bt_hci_cmd_send_sync>
		if (err) {
    a0ac:	b118      	cbz	r0, a0b6 <bt_id_add+0xb6>
			BT_ERR("Failed to clear resolution list");
    a0ae:	4838      	ldr	r0, [pc, #224]	; (a190 <bt_id_add+0x190>)
    a0b0:	f046 0101 	orr.w	r1, r6, #1
    a0b4:	e7e1      	b.n	a07a <bt_id_add+0x7a>
		bt_dev.le.rl_entries++;
    a0b6:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    a0ba:	3301      	adds	r3, #1
    a0bc:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
		keys->state |= BT_KEYS_ID_ADDED;
    a0c0:	7a2b      	ldrb	r3, [r5, #8]
    a0c2:	f043 0304 	orr.w	r3, r3, #4
    a0c6:	722b      	strb	r3, [r5, #8]
	addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    a0c8:	2001      	movs	r0, #1
    a0ca:	f01a fc40 	bl	2494e <addr_res_enable>
	bt_adv_foreach(adv_unpause_enabled, NULL);
    a0ce:	4831      	ldr	r0, [pc, #196]	; (a194 <bt_id_add+0x194>)
    a0d0:	2100      	movs	r1, #0
}
    a0d2:	b003      	add	sp, #12
    a0d4:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    a0d8:	f7fe bc44 	b.w	8964 <bt_adv_foreach>
	err = hci_id_add(keys->id, &keys->addr, keys->irk.val);
    a0dc:	462a      	mov	r2, r5
    a0de:	1c6f      	adds	r7, r5, #1
    a0e0:	f812 0b2a 	ldrb.w	r0, [r2], #42
    a0e4:	4639      	mov	r1, r7
    a0e6:	f7ff fcc3 	bl	9a70 <hci_id_add>
	if (err) {
    a0ea:	4606      	mov	r6, r0
    a0ec:	b140      	cbz	r0, a100 <bt_id_add+0x100>
    a0ee:	4924      	ldr	r1, [pc, #144]	; (a180 <bt_id_add+0x180>)
    a0f0:	4b24      	ldr	r3, [pc, #144]	; (a184 <bt_id_add+0x184>)
		BT_ERR("Failed to add IRK to controller");
    a0f2:	4829      	ldr	r0, [pc, #164]	; (a198 <bt_id_add+0x198>)
    a0f4:	1ac9      	subs	r1, r1, r3
    a0f6:	08c9      	lsrs	r1, r1, #3
    a0f8:	0189      	lsls	r1, r1, #6
    a0fa:	f041 0101 	orr.w	r1, r1, #1
    a0fe:	e7bc      	b.n	a07a <bt_id_add+0x7a>
	bt_dev.le.rl_entries++;
    a100:	f894 30e1 	ldrb.w	r3, [r4, #225]	; 0xe1
    a104:	3301      	adds	r3, #1
    a106:	f884 30e1 	strb.w	r3, [r4, #225]	; 0xe1
	keys->state |= BT_KEYS_ID_ADDED;
    a10a:	7a2b      	ldrb	r3, [r5, #8]
    a10c:	f043 0304 	orr.w	r3, r3, #4
    a110:	722b      	strb	r3, [r5, #8]
	if (!BT_CMD_TEST(bt_dev.supported_commands, 39, 2)) {
    a112:	f894 306b 	ldrb.w	r3, [r4, #107]	; 0x6b
    a116:	075b      	lsls	r3, r3, #29
    a118:	d408      	bmi.n	a12c <bt_id_add+0x12c>
    a11a:	4919      	ldr	r1, [pc, #100]	; (a180 <bt_id_add+0x180>)
    a11c:	4b19      	ldr	r3, [pc, #100]	; (a184 <bt_id_add+0x184>)
		BT_WARN("Set privacy mode command is not supported");
    a11e:	481f      	ldr	r0, [pc, #124]	; (a19c <bt_id_add+0x19c>)
    a120:	1ac9      	subs	r1, r1, r3
    a122:	08c9      	lsrs	r1, r1, #3
    a124:	0189      	lsls	r1, r1, #6
    a126:	f041 0102 	orr.w	r1, r1, #2
    a12a:	e7a6      	b.n	a07a <bt_id_add+0x7a>
	bt_addr_le_copy(&cp.id_addr, addr);
    a12c:	4639      	mov	r1, r7
    a12e:	4668      	mov	r0, sp
    a130:	f01a fb65 	bl	247fe <bt_addr_le_copy>
	cp.mode = mode;
    a134:	2301      	movs	r3, #1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    a136:	2108      	movs	r1, #8
    a138:	f242 004e 	movw	r0, #8270	; 0x204e
	cp.mode = mode;
    a13c:	f88d 3007 	strb.w	r3, [sp, #7]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PRIVACY_MODE, sizeof(cp));
    a140:	f7ff f93c 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    a144:	4604      	mov	r4, r0
    a146:	b940      	cbnz	r0, a15a <bt_id_add+0x15a>
    a148:	490d      	ldr	r1, [pc, #52]	; (a180 <bt_id_add+0x180>)
    a14a:	4b0e      	ldr	r3, [pc, #56]	; (a184 <bt_id_add+0x184>)
		BT_ERR("Failed to set privacy mode");
    a14c:	4814      	ldr	r0, [pc, #80]	; (a1a0 <bt_id_add+0x1a0>)
    a14e:	1ac9      	subs	r1, r1, r3
    a150:	08c9      	lsrs	r1, r1, #3
    a152:	0189      	lsls	r1, r1, #6
    a154:	f041 0101 	orr.w	r1, r1, #1
    a158:	e78f      	b.n	a07a <bt_id_add+0x7a>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    a15a:	2208      	movs	r2, #8
    a15c:	4669      	mov	r1, sp
    a15e:	4410      	add	r0, r2
    a160:	f01c f9dc 	bl	2651c <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_PRIVACY_MODE, buf, NULL);
    a164:	4632      	mov	r2, r6
    a166:	4621      	mov	r1, r4
    a168:	f242 004e 	movw	r0, #8270	; 0x204e
    a16c:	f7ff fa86 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    a170:	2800      	cmp	r0, #0
    a172:	d0a9      	beq.n	a0c8 <bt_id_add+0xc8>
    a174:	e7e8      	b.n	a148 <bt_id_add+0x148>
    a176:	bf00      	nop
    a178:	20000008 	.word	0x20000008
    a17c:	000248ef 	.word	0x000248ef
    a180:	00027978 	.word	0x00027978
    a184:	000278c0 	.word	0x000278c0
    a188:	0002c3df 	.word	0x0002c3df
    a18c:	0002c404 	.word	0x0002c404
    a190:	0002c435 	.word	0x0002c435
    a194:	00024919 	.word	0x00024919
    a198:	0002c455 	.word	0x0002c455
    a19c:	0002c475 	.word	0x0002c475
    a1a0:	0002c49f 	.word	0x0002c49f

0000a1a4 <bt_id_del>:
{
    a1a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!bt_dev.le.rl_size ||
    a1a8:	4d44      	ldr	r5, [pc, #272]	; (a2bc <bt_id_del+0x118>)
    a1aa:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a1ae:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
{
    a1b2:	4604      	mov	r4, r0
	if (!bt_dev.le.rl_size ||
    a1b4:	b112      	cbz	r2, a1bc <bt_id_del+0x18>
	    bt_dev.le.rl_entries > bt_dev.le.rl_size + 1) {
    a1b6:	3201      	adds	r2, #1
	if (!bt_dev.le.rl_size ||
    a1b8:	4293      	cmp	r3, r2
    a1ba:	dd08      	ble.n	a1ce <bt_id_del+0x2a>
		bt_dev.le.rl_entries--;
    a1bc:	3b01      	subs	r3, #1
    a1be:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    a1c2:	7a23      	ldrb	r3, [r4, #8]
    a1c4:	f023 0304 	bic.w	r3, r3, #4
    a1c8:	7223      	strb	r3, [r4, #8]
}
    a1ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	conn = bt_conn_lookup_state_le(BT_ID_DEFAULT, NULL, BT_CONN_CONNECT);
    a1ce:	2100      	movs	r1, #0
    a1d0:	2206      	movs	r2, #6
    a1d2:	4608      	mov	r0, r1
    a1d4:	f001 fbd6 	bl	b984 <bt_conn_lookup_state_le>
	if (conn) {
    a1d8:	4606      	mov	r6, r0
    a1da:	b170      	cbz	r0, a1fa <bt_id_del+0x56>
    a1dc:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a1e0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
    a1e4:	f01a fb0e 	bl	24804 <atomic_or>
	keys->state |= flag;
    a1e8:	7a23      	ldrb	r3, [r4, #8]
    a1ea:	f043 0302 	orr.w	r3, r3, #2
    a1ee:	7223      	strb	r3, [r4, #8]
		bt_conn_unref(conn);
    a1f0:	4630      	mov	r0, r6
}
    a1f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    a1f6:	f01a bd6f 	b.w	24cd8 <bt_conn_unref>
	bt_adv_foreach(adv_pause_enabled, NULL);
    a1fa:	4601      	mov	r1, r0
    a1fc:	4830      	ldr	r0, [pc, #192]	; (a2c0 <bt_id_del+0x11c>)
    a1fe:	f7fe fbb1 	bl	8964 <bt_adv_foreach>
	err = addr_res_enable(BT_HCI_ADDR_RES_DISABLE);
    a202:	4630      	mov	r0, r6
    a204:	f01a fba3 	bl	2494e <addr_res_enable>
	if (err) {
    a208:	4606      	mov	r6, r0
    a20a:	b1b0      	cbz	r0, a23a <bt_id_del+0x96>
    a20c:	4a2d      	ldr	r2, [pc, #180]	; (a2c4 <bt_id_del+0x120>)
    a20e:	4b2e      	ldr	r3, [pc, #184]	; (a2c8 <bt_id_del+0x124>)
    a210:	1ad2      	subs	r2, r2, r3
    a212:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Disabling address resolution failed (err %d)", err);
    a214:	0192      	lsls	r2, r2, #6
    a216:	4601      	mov	r1, r0
    a218:	f042 0201 	orr.w	r2, r2, #1
    a21c:	482b      	ldr	r0, [pc, #172]	; (a2cc <bt_id_del+0x128>)
    a21e:	f018 f924 	bl	2246a <log_1>
	if (bt_dev.le.rl_entries) {
    a222:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a226:	b113      	cbz	r3, a22e <bt_id_del+0x8a>
		addr_res_enable(BT_HCI_ADDR_RES_ENABLE);
    a228:	2001      	movs	r0, #1
    a22a:	f01a fb90 	bl	2494e <addr_res_enable>
}
    a22e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_adv_foreach(adv_unpause_enabled, NULL);
    a232:	4827      	ldr	r0, [pc, #156]	; (a2d0 <bt_id_del+0x12c>)
    a234:	2100      	movs	r1, #0
    a236:	f7fe bb95 	b.w	8964 <bt_adv_foreach>
	if (bt_dev.le.rl_entries > bt_dev.le.rl_size) {
    a23a:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a23e:	f895 20e0 	ldrb.w	r2, [r5, #224]	; 0xe0
    a242:	429a      	cmp	r2, r3
    a244:	d20c      	bcs.n	a260 <bt_id_del+0xbc>
		bt_dev.le.rl_entries--;
    a246:	3b01      	subs	r3, #1
    a248:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
		keys->state &= ~BT_KEYS_ID_ADDED;
    a24c:	7a23      	ldrb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a24e:	4921      	ldr	r1, [pc, #132]	; (a2d4 <bt_id_del+0x130>)
		keys->state &= ~BT_KEYS_ID_ADDED;
    a250:	f023 0304 	bic.w	r3, r3, #4
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a254:	4602      	mov	r2, r0
		keys->state &= ~BT_KEYS_ID_ADDED;
    a256:	7223      	strb	r3, [r4, #8]
			bt_keys_foreach(BT_KEYS_IRK, keys_add_id, NULL);
    a258:	2002      	movs	r0, #2
    a25a:	f006 f889 	bl	10370 <bt_keys_foreach>
		goto done;
    a25e:	e7e0      	b.n	a222 <bt_id_del+0x7e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_REM_DEV_FROM_RL, sizeof(*cp));
    a260:	2107      	movs	r1, #7
    a262:	f242 0028 	movw	r0, #8232	; 0x2028
    a266:	f7ff f8a9 	bl	93bc <bt_hci_cmd_create>
	err = hci_id_del(&keys->addr);
    a26a:	f104 0801 	add.w	r8, r4, #1
	if (!buf) {
    a26e:	4607      	mov	r7, r0
    a270:	b950      	cbnz	r0, a288 <bt_id_del+0xe4>
    a272:	4b15      	ldr	r3, [pc, #84]	; (a2c8 <bt_id_del+0x124>)
    a274:	4913      	ldr	r1, [pc, #76]	; (a2c4 <bt_id_del+0x120>)
		BT_ERR("Failed to remove IRK from controller");
    a276:	4818      	ldr	r0, [pc, #96]	; (a2d8 <bt_id_del+0x134>)
    a278:	1ac9      	subs	r1, r1, r3
    a27a:	08c9      	lsrs	r1, r1, #3
    a27c:	0189      	lsls	r1, r1, #6
    a27e:	f041 0101 	orr.w	r1, r1, #1
    a282:	f018 f8e5 	bl	22450 <log_0>
		goto done;
    a286:	e7cc      	b.n	a222 <bt_id_del+0x7e>
	return net_buf_simple_add(&buf->b, len);
    a288:	2107      	movs	r1, #7
    a28a:	3008      	adds	r0, #8
    a28c:	f01c f940 	bl	26510 <net_buf_simple_add>
	bt_addr_le_copy(&cp->peer_id_addr, addr);
    a290:	4641      	mov	r1, r8
    a292:	f01a fab4 	bl	247fe <bt_addr_le_copy>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_REM_DEV_FROM_RL, buf, NULL);
    a296:	4632      	mov	r2, r6
    a298:	4639      	mov	r1, r7
    a29a:	f242 0028 	movw	r0, #8232	; 0x2028
    a29e:	f7ff f9ed 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    a2a2:	2800      	cmp	r0, #0
    a2a4:	d1e5      	bne.n	a272 <bt_id_del+0xce>
	bt_dev.le.rl_entries--;
    a2a6:	f895 30e1 	ldrb.w	r3, [r5, #225]	; 0xe1
    a2aa:	3b01      	subs	r3, #1
    a2ac:	f885 30e1 	strb.w	r3, [r5, #225]	; 0xe1
	keys->state &= ~BT_KEYS_ID_ADDED;
    a2b0:	7a23      	ldrb	r3, [r4, #8]
    a2b2:	f023 0304 	bic.w	r3, r3, #4
    a2b6:	7223      	strb	r3, [r4, #8]
    a2b8:	e7b3      	b.n	a222 <bt_id_del+0x7e>
    a2ba:	bf00      	nop
    a2bc:	20000008 	.word	0x20000008
    a2c0:	000248ef 	.word	0x000248ef
    a2c4:	00027978 	.word	0x00027978
    a2c8:	000278c0 	.word	0x000278c0
    a2cc:	0002c4ba 	.word	0x0002c4ba
    a2d0:	00024919 	.word	0x00024919
    a2d4:	00024939 	.word	0x00024939
    a2d8:	0002c4e7 	.word	0x0002c4e7

0000a2dc <hci_event_prio>:
{
    a2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a2e0:	4604      	mov	r4, r0
	net_buf_simple_save(&buf->b, &state);
    a2e2:	f100 0608 	add.w	r6, r0, #8
	state->offset = net_buf_simple_headroom(buf);
    a2e6:	4630      	mov	r0, r6
    a2e8:	f01c f949 	bl	2657e <net_buf_simple_headroom>
	state->len = buf->len;
    a2ec:	f8b4 800c 	ldrh.w	r8, [r4, #12]
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a2f0:	f1b8 0f01 	cmp.w	r8, #1
	state->offset = net_buf_simple_headroom(buf);
    a2f4:	4605      	mov	r5, r0
    a2f6:	d80c      	bhi.n	a312 <hci_event_prio+0x36>
    a2f8:	4a1c      	ldr	r2, [pc, #112]	; (a36c <hci_event_prio+0x90>)
    a2fa:	491d      	ldr	r1, [pc, #116]	; (a370 <hci_event_prio+0x94>)
    a2fc:	481d      	ldr	r0, [pc, #116]	; (a374 <hci_event_prio+0x98>)
    a2fe:	f641 03b8 	movw	r3, #6328	; 0x18b8
    a302:	f017 fc0f 	bl	21b24 <printk>
    a306:	4040      	eors	r0, r0
    a308:	f380 8811 	msr	BASEPRI, r0
    a30c:	f04f 0003 	mov.w	r0, #3
    a310:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a312:	4630      	mov	r0, r6
    a314:	2102      	movs	r1, #2
    a316:	f01c f922 	bl	2655e <net_buf_simple_pull_mem>
    a31a:	4607      	mov	r7, r0
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a31c:	7800      	ldrb	r0, [r0, #0]
    a31e:	f01a fa1a 	bl	24756 <bt_hci_evt_get_flags>
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a322:	07c2      	lsls	r2, r0, #31
	evt_flags = bt_hci_evt_get_flags(hdr->evt);
    a324:	4606      	mov	r6, r0
	BT_ASSERT(evt_flags & BT_HCI_EVT_FLAG_RECV_PRIO);
    a326:	d40c      	bmi.n	a342 <hci_event_prio+0x66>
    a328:	4a10      	ldr	r2, [pc, #64]	; (a36c <hci_event_prio+0x90>)
    a32a:	4913      	ldr	r1, [pc, #76]	; (a378 <hci_event_prio+0x9c>)
    a32c:	4811      	ldr	r0, [pc, #68]	; (a374 <hci_event_prio+0x98>)
    a32e:	f641 03bc 	movw	r3, #6332	; 0x18bc
    a332:	f017 fbf7 	bl	21b24 <printk>
    a336:	4040      	eors	r0, r0
    a338:	f380 8811 	msr	BASEPRI, r0
    a33c:	f04f 0003 	mov.w	r0, #3
    a340:	df02      	svc	2
	handle_event(hdr->evt, buf, prio_events, ARRAY_SIZE(prio_events));
    a342:	2305      	movs	r3, #5
    a344:	4a0d      	ldr	r2, [pc, #52]	; (a37c <hci_event_prio+0xa0>)
    a346:	7838      	ldrb	r0, [r7, #0]
    a348:	4621      	mov	r1, r4
    a34a:	f7fe fdef 	bl	8f2c <handle_event>
	if (evt_flags & BT_HCI_EVT_FLAG_RECV) {
    a34e:	07b3      	lsls	r3, r6, #30
    a350:	d507      	bpl.n	a362 <hci_event_prio+0x86>
	buf->data = buf->__buf + state->offset;
    a352:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    a354:	f8a4 800c 	strh.w	r8, [r4, #12]
	buf->data = buf->__buf + state->offset;
    a358:	fa10 f585 	uxtah	r5, r0, r5
    a35c:	60a5      	str	r5, [r4, #8]
}
    a35e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		net_buf_unref(buf);
    a362:	4620      	mov	r0, r4
}
    a364:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		net_buf_unref(buf);
    a368:	f013 b9a0 	b.w	1d6ac <net_buf_unref>
    a36c:	0002c1d0 	.word	0x0002c1d0
    a370:	0002c50c 	.word	0x0002c50c
    a374:	0002c20d 	.word	0x0002c20d
    a378:	0002c525 	.word	0x0002c525
    a37c:	000280d0 	.word	0x000280d0

0000a380 <bt_recv>:
{
    a380:	b570      	push	{r4, r5, r6, lr}
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
    a382:	7d01      	ldrb	r1, [r0, #20]
	switch (bt_buf_get_type(buf)) {
    a384:	2901      	cmp	r1, #1
{
    a386:	4604      	mov	r4, r0
	switch (bt_buf_get_type(buf)) {
    a388:	d04b      	beq.n	a422 <bt_recv+0xa2>
    a38a:	2903      	cmp	r1, #3
    a38c:	d178      	bne.n	a480 <bt_recv+0x100>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a38e:	8983      	ldrh	r3, [r0, #12]
    a390:	2b03      	cmp	r3, #3
    a392:	d80c      	bhi.n	a3ae <bt_recv+0x2e>
    a394:	4a42      	ldr	r2, [pc, #264]	; (a4a0 <bt_recv+0x120>)
    a396:	4943      	ldr	r1, [pc, #268]	; (a4a4 <bt_recv+0x124>)
    a398:	4843      	ldr	r0, [pc, #268]	; (a4a8 <bt_recv+0x128>)
    a39a:	f240 43ac 	movw	r3, #1196	; 0x4ac
    a39e:	f017 fbc1 	bl	21b24 <printk>
    a3a2:	4040      	eors	r0, r0
    a3a4:	f380 8811 	msr	BASEPRI, r0
    a3a8:	f04f 0003 	mov.w	r0, #3
    a3ac:	df02      	svc	2
	return net_buf_simple_pull_mem(&buf->b, len);
    a3ae:	2104      	movs	r1, #4
    a3b0:	f104 0008 	add.w	r0, r4, #8
    a3b4:	f01c f8d3 	bl	2655e <net_buf_simple_pull_mem>
	if (buf->len != len) {
    a3b8:	89a1      	ldrh	r1, [r4, #12]
	len = sys_le16_to_cpu(hdr->len);
    a3ba:	8842      	ldrh	r2, [r0, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    a3bc:	8806      	ldrh	r6, [r0, #0]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a3be:	23ff      	movs	r3, #255	; 0xff
	acl(buf)->handle = bt_acl_handle(handle);
    a3c0:	f3c6 000b 	ubfx	r0, r6, #0, #12
	if (buf->len != len) {
    a3c4:	428a      	cmp	r2, r1
	acl(buf)->handle = bt_acl_handle(handle);
    a3c6:	82e0      	strh	r0, [r4, #22]
	acl(buf)->index = BT_CONN_INDEX_INVALID;
    a3c8:	7563      	strb	r3, [r4, #21]
	if (buf->len != len) {
    a3ca:	d00d      	beq.n	a3e8 <bt_recv+0x68>
    a3cc:	4837      	ldr	r0, [pc, #220]	; (a4ac <bt_recv+0x12c>)
    a3ce:	4b38      	ldr	r3, [pc, #224]	; (a4b0 <bt_recv+0x130>)
    a3d0:	1a1b      	subs	r3, r3, r0
    a3d2:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL data length mismatch (%u != %u)", buf->len, len);
    a3d4:	019b      	lsls	r3, r3, #6
    a3d6:	4837      	ldr	r0, [pc, #220]	; (a4b4 <bt_recv+0x134>)
    a3d8:	f043 0301 	orr.w	r3, r3, #1
    a3dc:	f018 f859 	bl	22492 <log_2>
	net_buf_unref(buf);
    a3e0:	4620      	mov	r0, r4
    a3e2:	f013 f963 	bl	1d6ac <net_buf_unref>
    a3e6:	e01a      	b.n	a41e <bt_recv+0x9e>
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    a3e8:	f001 f994 	bl	b714 <bt_conn_lookup_handle>
	if (!conn) {
    a3ec:	4605      	mov	r5, r0
    a3ee:	b958      	cbnz	r0, a408 <bt_recv+0x88>
    a3f0:	4b2e      	ldr	r3, [pc, #184]	; (a4ac <bt_recv+0x12c>)
    a3f2:	4a2f      	ldr	r2, [pc, #188]	; (a4b0 <bt_recv+0x130>)
		BT_ERR("Unable to find conn for handle %u", acl(buf)->handle);
    a3f4:	8ae1      	ldrh	r1, [r4, #22]
    a3f6:	4830      	ldr	r0, [pc, #192]	; (a4b8 <bt_recv+0x138>)
    a3f8:	1ad2      	subs	r2, r2, r3
    a3fa:	08d2      	lsrs	r2, r2, #3
    a3fc:	0192      	lsls	r2, r2, #6
    a3fe:	f042 0201 	orr.w	r2, r2, #1
    a402:	f018 f832 	bl	2246a <log_1>
		net_buf_unref(buf);
    a406:	e7eb      	b.n	a3e0 <bt_recv+0x60>
	acl(buf)->index = bt_conn_index(conn);
    a408:	f001 fc40 	bl	bc8c <bt_conn_index>
	bt_conn_recv(conn, buf, flags);
    a40c:	0b32      	lsrs	r2, r6, #12
	acl(buf)->index = bt_conn_index(conn);
    a40e:	7560      	strb	r0, [r4, #21]
	bt_conn_recv(conn, buf, flags);
    a410:	4621      	mov	r1, r4
    a412:	4628      	mov	r0, r5
    a414:	f001 f828 	bl	b468 <bt_conn_recv>
	bt_conn_unref(conn);
    a418:	4628      	mov	r0, r5
    a41a:	f01a fc5d 	bl	24cd8 <bt_conn_unref>
		return 0;
    a41e:	2000      	movs	r0, #0
}
    a420:	bd70      	pop	{r4, r5, r6, pc}
	BT_ASSERT(buf->len >= sizeof(*hdr));
    a422:	8983      	ldrh	r3, [r0, #12]
    a424:	2b01      	cmp	r3, #1
    a426:	d80c      	bhi.n	a442 <bt_recv+0xc2>
    a428:	4a1d      	ldr	r2, [pc, #116]	; (a4a0 <bt_recv+0x120>)
    a42a:	491e      	ldr	r1, [pc, #120]	; (a4a4 <bt_recv+0x124>)
    a42c:	481e      	ldr	r0, [pc, #120]	; (a4a8 <bt_recv+0x128>)
    a42e:	f241 4305 	movw	r3, #5125	; 0x1405
    a432:	f017 fb77 	bl	21b24 <printk>
    a436:	4040      	eors	r0, r0
    a438:	f380 8811 	msr	BASEPRI, r0
    a43c:	f04f 0003 	mov.w	r0, #3
    a440:	df02      	svc	2
    a442:	2102      	movs	r1, #2
    a444:	f104 0008 	add.w	r0, r4, #8
    a448:	f01c f889 	bl	2655e <net_buf_simple_pull_mem>
    a44c:	4605      	mov	r5, r0
	BT_ASSERT(bt_hci_evt_get_flags(hdr->evt) & BT_HCI_EVT_FLAG_RECV);
    a44e:	7800      	ldrb	r0, [r0, #0]
    a450:	f01a f981 	bl	24756 <bt_hci_evt_get_flags>
    a454:	0783      	lsls	r3, r0, #30
    a456:	d40c      	bmi.n	a472 <bt_recv+0xf2>
    a458:	4a11      	ldr	r2, [pc, #68]	; (a4a0 <bt_recv+0x120>)
    a45a:	4918      	ldr	r1, [pc, #96]	; (a4bc <bt_recv+0x13c>)
    a45c:	4812      	ldr	r0, [pc, #72]	; (a4a8 <bt_recv+0x128>)
    a45e:	f241 4309 	movw	r3, #5129	; 0x1409
    a462:	f017 fb5f 	bl	21b24 <printk>
    a466:	4040      	eors	r0, r0
    a468:	f380 8811 	msr	BASEPRI, r0
    a46c:	f04f 0003 	mov.w	r0, #3
    a470:	df02      	svc	2
	handle_event(hdr->evt, buf, normal_events, ARRAY_SIZE(normal_events));
    a472:	4a13      	ldr	r2, [pc, #76]	; (a4c0 <bt_recv+0x140>)
    a474:	7828      	ldrb	r0, [r5, #0]
    a476:	2306      	movs	r3, #6
    a478:	4621      	mov	r1, r4
    a47a:	f7fe fd57 	bl	8f2c <handle_event>
    a47e:	e7af      	b.n	a3e0 <bt_recv+0x60>
    a480:	4b0a      	ldr	r3, [pc, #40]	; (a4ac <bt_recv+0x12c>)
    a482:	4a0b      	ldr	r2, [pc, #44]	; (a4b0 <bt_recv+0x130>)
		BT_ERR("Invalid buf type %u", bt_buf_get_type(buf));
    a484:	480f      	ldr	r0, [pc, #60]	; (a4c4 <bt_recv+0x144>)
    a486:	1ad2      	subs	r2, r2, r3
    a488:	08d2      	lsrs	r2, r2, #3
    a48a:	0192      	lsls	r2, r2, #6
    a48c:	f042 0201 	orr.w	r2, r2, #1
    a490:	f017 ffeb 	bl	2246a <log_1>
		net_buf_unref(buf);
    a494:	4620      	mov	r0, r4
    a496:	f013 f909 	bl	1d6ac <net_buf_unref>
		return -EINVAL;
    a49a:	f06f 0015 	mvn.w	r0, #21
    a49e:	e7bf      	b.n	a420 <bt_recv+0xa0>
    a4a0:	0002c1d0 	.word	0x0002c1d0
    a4a4:	0002c50c 	.word	0x0002c50c
    a4a8:	0002c20d 	.word	0x0002c20d
    a4ac:	000278c0 	.word	0x000278c0
    a4b0:	00027978 	.word	0x00027978
    a4b4:	0002c53e 	.word	0x0002c53e
    a4b8:	0002c562 	.word	0x0002c562
    a4bc:	0002c584 	.word	0x0002c584
    a4c0:	00028090 	.word	0x00028090
    a4c4:	0002c5b2 	.word	0x0002c5b2

0000a4c8 <bt_recv_prio>:
{
    a4c8:	b510      	push	{r4, lr}
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a4ca:	7d03      	ldrb	r3, [r0, #20]
    a4cc:	2b01      	cmp	r3, #1
{
    a4ce:	4604      	mov	r4, r0
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    a4d0:	d00c      	beq.n	a4ec <bt_recv_prio+0x24>
    a4d2:	4a09      	ldr	r2, [pc, #36]	; (a4f8 <bt_recv_prio+0x30>)
    a4d4:	4909      	ldr	r1, [pc, #36]	; (a4fc <bt_recv_prio+0x34>)
    a4d6:	480a      	ldr	r0, [pc, #40]	; (a500 <bt_recv_prio+0x38>)
    a4d8:	f641 03ff 	movw	r3, #6399	; 0x18ff
    a4dc:	f017 fb22 	bl	21b24 <printk>
    a4e0:	4040      	eors	r0, r0
    a4e2:	f380 8811 	msr	BASEPRI, r0
    a4e6:	f04f 0003 	mov.w	r0, #3
    a4ea:	df02      	svc	2
	hci_event_prio(buf);
    a4ec:	4620      	mov	r0, r4
    a4ee:	f7ff fef5 	bl	a2dc <hci_event_prio>
}
    a4f2:	2000      	movs	r0, #0
    a4f4:	bd10      	pop	{r4, pc}
    a4f6:	bf00      	nop
    a4f8:	0002c1d0 	.word	0x0002c1d0
    a4fc:	0002c5c6 	.word	0x0002c5c6
    a500:	0002c20d 	.word	0x0002c20d

0000a504 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    a504:	4a08      	ldr	r2, [pc, #32]	; (a528 <bt_hci_driver_register+0x24>)
{
    a506:	4603      	mov	r3, r0
	if (bt_dev.drv) {
    a508:	f8d2 011c 	ldr.w	r0, [r2, #284]	; 0x11c
    a50c:	b930      	cbnz	r0, a51c <bt_hci_driver_register+0x18>
	if (!drv->open || !drv->send) {
    a50e:	68d9      	ldr	r1, [r3, #12]
    a510:	b139      	cbz	r1, a522 <bt_hci_driver_register+0x1e>
    a512:	6919      	ldr	r1, [r3, #16]
    a514:	b129      	cbz	r1, a522 <bt_hci_driver_register+0x1e>
	bt_dev.drv = drv;
    a516:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
	return 0;
    a51a:	4770      	bx	lr
		return -EALREADY;
    a51c:	f06f 0044 	mvn.w	r0, #68	; 0x44
    a520:	4770      	bx	lr
		return -EINVAL;
    a522:	f06f 0015 	mvn.w	r0, #21
}
    a526:	4770      	bx	lr
    a528:	20000008 	.word	0x20000008

0000a52c <bt_finalize_init>:
{
    a52c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a530:	4d2b      	ldr	r5, [pc, #172]	; (a5e0 <bt_finalize_init+0xb4>)
    a532:	4c2c      	ldr	r4, [pc, #176]	; (a5e4 <bt_finalize_init+0xb8>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    a534:	4e2c      	ldr	r6, [pc, #176]	; (a5e8 <bt_finalize_init+0xbc>)
		BT_INFO("Identity[%d]: %s",
    a536:	f8df 90b4 	ldr.w	r9, [pc, #180]	; a5ec <bt_finalize_init+0xc0>
{
    a53a:	b087      	sub	sp, #28
    a53c:	2102      	movs	r1, #2
    a53e:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a542:	f01a f95f 	bl	24804 <atomic_or>
    a546:	4b2a      	ldr	r3, [pc, #168]	; (a5f0 <bt_finalize_init+0xc4>)
	BT_INFO("Identity%s: %s", bt_dev.id_count > 1 ? "[0]" : "",
    a548:	492a      	ldr	r1, [pc, #168]	; (a5f4 <bt_finalize_init+0xc8>)
    a54a:	1ae4      	subs	r4, r4, r3
    a54c:	79eb      	ldrb	r3, [r5, #7]
    a54e:	4628      	mov	r0, r5
    a550:	2b01      	cmp	r3, #1
    a552:	bf88      	it	hi
    a554:	460e      	movhi	r6, r1
    a556:	f7fd fe19 	bl	818c <bt_addr_le_str_real>
    a55a:	f7fb f883 	bl	5664 <log_strdup>
    a55e:	08e4      	lsrs	r4, r4, #3
    a560:	01a4      	lsls	r4, r4, #6
    a562:	f044 0803 	orr.w	r8, r4, #3
    a566:	4602      	mov	r2, r0
    a568:	4631      	mov	r1, r6
    a56a:	4823      	ldr	r0, [pc, #140]	; (a5f8 <bt_finalize_init+0xcc>)
    a56c:	4643      	mov	r3, r8
    a56e:	f017 ff90 	bl	22492 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    a572:	462f      	mov	r7, r5
    a574:	2601      	movs	r6, #1
    a576:	79eb      	ldrb	r3, [r5, #7]
    a578:	429e      	cmp	r6, r3
    a57a:	f107 0707 	add.w	r7, r7, #7
    a57e:	db22      	blt.n	a5c6 <bt_finalize_init+0x9a>
	BT_INFO("HCI: version %s (0x%02x) revision 0x%04x, manufacturer 0x%04x",
    a580:	f895 6034 	ldrb.w	r6, [r5, #52]	; 0x34
    a584:	4630      	mov	r0, r6
    a586:	f7fe fa01 	bl	898c <ver_str>
    a58a:	8eeb      	ldrh	r3, [r5, #54]	; 0x36
    a58c:	9304      	str	r3, [sp, #16]
    a58e:	f044 0403 	orr.w	r4, r4, #3
    a592:	8f6b      	ldrh	r3, [r5, #58]	; 0x3a
    a594:	9305      	str	r3, [sp, #20]
    a596:	e9cd 0602 	strd	r0, r6, [sp, #8]
    a59a:	4623      	mov	r3, r4
    a59c:	a902      	add	r1, sp, #8
    a59e:	2204      	movs	r2, #4
    a5a0:	4816      	ldr	r0, [pc, #88]	; (a5fc <bt_finalize_init+0xd0>)
    a5a2:	f017 ffab 	bl	224fc <log_n>
	BT_INFO("LMP: version %s (0x%02x) subver 0x%04x",
    a5a6:	f895 6035 	ldrb.w	r6, [r5, #53]	; 0x35
    a5aa:	4630      	mov	r0, r6
    a5ac:	f7fe f9ee 	bl	898c <ver_str>
    a5b0:	8f2b      	ldrh	r3, [r5, #56]	; 0x38
    a5b2:	f8ad 4000 	strh.w	r4, [sp]
    a5b6:	4601      	mov	r1, r0
    a5b8:	4632      	mov	r2, r6
    a5ba:	4811      	ldr	r0, [pc, #68]	; (a600 <bt_finalize_init+0xd4>)
    a5bc:	f017 ff82 	bl	224c4 <log_3>
}
    a5c0:	b007      	add	sp, #28
    a5c2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		BT_INFO("Identity[%d]: %s",
    a5c6:	4638      	mov	r0, r7
    a5c8:	f7fd fde0 	bl	818c <bt_addr_le_str_real>
    a5cc:	f7fb f84a 	bl	5664 <log_strdup>
    a5d0:	4631      	mov	r1, r6
    a5d2:	4602      	mov	r2, r0
    a5d4:	4643      	mov	r3, r8
    a5d6:	4648      	mov	r0, r9
    a5d8:	f017 ff5b 	bl	22492 <log_2>
	for (i = 1; i < bt_dev.id_count; i++) {
    a5dc:	3601      	adds	r6, #1
    a5de:	e7ca      	b.n	a576 <bt_finalize_init+0x4a>
    a5e0:	20000008 	.word	0x20000008
    a5e4:	00027978 	.word	0x00027978
    a5e8:	000294a4 	.word	0x000294a4
    a5ec:	0002c5fc 	.word	0x0002c5fc
    a5f0:	000278c0 	.word	0x000278c0
    a5f4:	0002c5e9 	.word	0x0002c5e9
    a5f8:	0002c5ed 	.word	0x0002c5ed
    a5fc:	0002c60d 	.word	0x0002c60d
    a600:	0002c64b 	.word	0x0002c64b

0000a604 <init_work>:
{
    a604:	b510      	push	{r4, lr}
	err = bt_init();
    a606:	f7f6 ffaf 	bl	1568 <bt_init>
	if (ready_cb) {
    a60a:	4b03      	ldr	r3, [pc, #12]	; (a618 <init_work+0x14>)
    a60c:	681b      	ldr	r3, [r3, #0]
    a60e:	b113      	cbz	r3, a616 <init_work+0x12>
}
    a610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		ready_cb(err);
    a614:	4718      	bx	r3
}
    a616:	bd10      	pop	{r4, pc}
    a618:	2000d740 	.word	0x2000d740

0000a61c <bt_enable>:
{
    a61c:	b570      	push	{r4, r5, r6, lr}
	if (!bt_dev.drv) {
    a61e:	4d31      	ldr	r5, [pc, #196]	; (a6e4 <bt_enable+0xc8>)
    a620:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
{
    a624:	b088      	sub	sp, #32
    a626:	4606      	mov	r6, r0
	if (!bt_dev.drv) {
    a628:	b973      	cbnz	r3, a648 <bt_enable+0x2c>
    a62a:	4b2f      	ldr	r3, [pc, #188]	; (a6e8 <bt_enable+0xcc>)
    a62c:	492f      	ldr	r1, [pc, #188]	; (a6ec <bt_enable+0xd0>)
		BT_ERR("No HCI driver registered");
    a62e:	4830      	ldr	r0, [pc, #192]	; (a6f0 <bt_enable+0xd4>)
    a630:	1ac9      	subs	r1, r1, r3
    a632:	08c9      	lsrs	r1, r1, #3
    a634:	0189      	lsls	r1, r1, #6
    a636:	f041 0101 	orr.w	r1, r1, #1
    a63a:	f017 ff09 	bl	22450 <log_0>
		return -ENODEV;
    a63e:	f06f 0412 	mvn.w	r4, #18
}
    a642:	4620      	mov	r0, r4
    a644:	b008      	add	sp, #32
    a646:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a648:	2100      	movs	r1, #0
    a64a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    a64e:	f01a f8e8 	bl	24822 <atomic_test_and_set_bit>
    a652:	2800      	cmp	r0, #0
    a654:	d143      	bne.n	a6de <bt_enable+0xc2>
		err = bt_settings_init();
    a656:	f7fe f8d7 	bl	8808 <bt_settings_init>
		if (err) {
    a65a:	4604      	mov	r4, r0
    a65c:	2800      	cmp	r0, #0
    a65e:	d1f0      	bne.n	a642 <bt_enable+0x26>
	ready_cb = cb;
    a660:	4b24      	ldr	r3, [pc, #144]	; (a6f4 <bt_enable+0xd8>)
    a662:	601e      	str	r6, [r3, #0]
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
    a664:	2200      	movs	r2, #0
    a666:	2300      	movs	r3, #0
    a668:	e9cd 2306 	strd	r2, r3, [sp, #24]
    a66c:	f06f 0308 	mvn.w	r3, #8
    a670:	e9cd 0302 	strd	r0, r3, [sp, #8]
    a674:	e9cd 0000 	strd	r0, r0, [sp]
    a678:	9004      	str	r0, [sp, #16]
    a67a:	4b1f      	ldr	r3, [pc, #124]	; (a6f8 <bt_enable+0xdc>)
    a67c:	491f      	ldr	r1, [pc, #124]	; (a6fc <bt_enable+0xe0>)
    a67e:	4820      	ldr	r0, [pc, #128]	; (a700 <bt_enable+0xe4>)
    a680:	f44f 7220 	mov.w	r2, #640	; 0x280
    a684:	f015 ff86 	bl	20594 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
    a688:	491e      	ldr	r1, [pc, #120]	; (a704 <bt_enable+0xe8>)
    a68a:	481d      	ldr	r0, [pc, #116]	; (a700 <bt_enable+0xe4>)
    a68c:	f01c fd33 	bl	270f6 <z_impl_k_thread_name_set>
		bt_hci_ecc_init();
    a690:	f7fd ff22 	bl	84d8 <bt_hci_ecc_init>
	err = bt_dev.drv->open();
    a694:	f8d5 311c 	ldr.w	r3, [r5, #284]	; 0x11c
    a698:	68db      	ldr	r3, [r3, #12]
    a69a:	4798      	blx	r3
	if (err) {
    a69c:	4604      	mov	r4, r0
    a69e:	b158      	cbz	r0, a6b8 <bt_enable+0x9c>
    a6a0:	4b11      	ldr	r3, [pc, #68]	; (a6e8 <bt_enable+0xcc>)
    a6a2:	4a12      	ldr	r2, [pc, #72]	; (a6ec <bt_enable+0xd0>)
    a6a4:	1ad2      	subs	r2, r2, r3
    a6a6:	08d2      	lsrs	r2, r2, #3
		BT_ERR("HCI driver open failed (%d)", err);
    a6a8:	0192      	lsls	r2, r2, #6
    a6aa:	4601      	mov	r1, r0
    a6ac:	f042 0201 	orr.w	r2, r2, #1
    a6b0:	4815      	ldr	r0, [pc, #84]	; (a708 <bt_enable+0xec>)
    a6b2:	f017 feda 	bl	2246a <log_1>
		return err;
    a6b6:	e7c4      	b.n	a642 <bt_enable+0x26>
	if (!cb) {
    a6b8:	b926      	cbnz	r6, a6c4 <bt_enable+0xa8>
}
    a6ba:	b008      	add	sp, #32
    a6bc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_init();
    a6c0:	f7f6 bf52 	b.w	1568 <bt_init>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    a6c4:	4601      	mov	r1, r0
    a6c6:	f105 0090 	add.w	r0, r5, #144	; 0x90
    a6ca:	f01a f8aa 	bl	24822 <atomic_test_and_set_bit>
    a6ce:	2800      	cmp	r0, #0
    a6d0:	d1b7      	bne.n	a642 <bt_enable+0x26>
		k_queue_append(&work_q->queue, work);
    a6d2:	480e      	ldr	r0, [pc, #56]	; (a70c <bt_enable+0xf0>)
    a6d4:	f105 0188 	add.w	r1, r5, #136	; 0x88
    a6d8:	f01c fbb5 	bl	26e46 <k_queue_append>
    a6dc:	e7b1      	b.n	a642 <bt_enable+0x26>
		return -EALREADY;
    a6de:	f06f 0444 	mvn.w	r4, #68	; 0x44
    a6e2:	e7ae      	b.n	a642 <bt_enable+0x26>
    a6e4:	20000008 	.word	0x20000008
    a6e8:	000278c0 	.word	0x000278c0
    a6ec:	00027978 	.word	0x00027978
    a6f0:	0002c797 	.word	0x0002c797
    a6f4:	2000d740 	.word	0x2000d740
    a6f8:	00009125 	.word	0x00009125
    a6fc:	200107a0 	.word	0x200107a0
    a700:	2000a5e8 	.word	0x2000a5e8
    a704:	0002c7b0 	.word	0x0002c7b0
    a708:	0002c7b6 	.word	0x0002c7b6
    a70c:	2000aca8 	.word	0x2000aca8

0000a710 <bt_set_name>:
{
    a710:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    a712:	4605      	mov	r5, r0
	size_t len = strlen(name);
    a714:	f019 fe6a 	bl	243ec <strlen>
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    a718:	2841      	cmp	r0, #65	; 0x41
	size_t len = strlen(name);
    a71a:	4604      	mov	r4, r0
	if (len > CONFIG_BT_DEVICE_NAME_MAX) {
    a71c:	d83a      	bhi.n	a794 <bt_set_name+0x84>
	if (!strcmp(bt_dev.name, name)) {
    a71e:	4e1f      	ldr	r6, [pc, #124]	; (a79c <bt_set_name+0x8c>)
    a720:	4629      	mov	r1, r5
    a722:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    a726:	f019 fe71 	bl	2440c <strcmp>
    a72a:	b910      	cbnz	r0, a732 <bt_set_name+0x22>
	return 0;
    a72c:	2000      	movs	r0, #0
}
    a72e:	b004      	add	sp, #16
    a730:	bd70      	pop	{r4, r5, r6, pc}
	strncpy(bt_dev.name, name, len);
    a732:	4622      	mov	r2, r4
    a734:	4629      	mov	r1, r5
    a736:	f506 70b0 	add.w	r0, r6, #352	; 0x160
    a73a:	f019 fe45 	bl	243c8 <strncpy>
	bt_dev.name[len] = '\0';
    a73e:	1933      	adds	r3, r6, r4
    a740:	2200      	movs	r2, #0
    a742:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    a746:	f106 0028 	add.w	r0, r6, #40	; 0x28
    a74a:	f01a f84c 	bl	247e6 <atomic_get>
	if (adv && atomic_test_bit(adv->flags, BT_ADV_INCLUDE_NAME)) {
    a74e:	0603      	lsls	r3, r0, #24
    a750:	d50e      	bpl.n	a770 <bt_set_name+0x60>
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    a752:	2309      	movs	r3, #9
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    a754:	2201      	movs	r2, #1
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    a756:	a902      	add	r1, sp, #8
    a758:	f242 0009 	movw	r0, #8201	; 0x2009
		struct bt_data data[] = { BT_DATA(BT_DATA_NAME_COMPLETE, name,
    a75c:	f88d 3000 	strb.w	r3, [sp]
    a760:	f88d 4001 	strb.w	r4, [sp, #1]
    a764:	9501      	str	r5, [sp, #4]
		struct bt_ad sd = { data, ARRAY_SIZE(data) };
    a766:	f8cd d008 	str.w	sp, [sp, #8]
    a76a:	9203      	str	r2, [sp, #12]
	return hci_set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    a76c:	f7ff f9b0 	bl	9ad0 <hci_set_ad>
		err = settings_save_one("bt/name", bt_dev.name, len);
    a770:	490b      	ldr	r1, [pc, #44]	; (a7a0 <bt_set_name+0x90>)
    a772:	480c      	ldr	r0, [pc, #48]	; (a7a4 <bt_set_name+0x94>)
    a774:	4622      	mov	r2, r4
    a776:	f7fc f879 	bl	686c <settings_save_one>
		if (err) {
    a77a:	2800      	cmp	r0, #0
    a77c:	d0d6      	beq.n	a72c <bt_set_name+0x1c>
    a77e:	4b0a      	ldr	r3, [pc, #40]	; (a7a8 <bt_set_name+0x98>)
    a780:	490a      	ldr	r1, [pc, #40]	; (a7ac <bt_set_name+0x9c>)
			BT_WARN("Unable to store name");
    a782:	480b      	ldr	r0, [pc, #44]	; (a7b0 <bt_set_name+0xa0>)
    a784:	1ac9      	subs	r1, r1, r3
    a786:	08c9      	lsrs	r1, r1, #3
    a788:	0189      	lsls	r1, r1, #6
    a78a:	f041 0102 	orr.w	r1, r1, #2
    a78e:	f017 fe5f 	bl	22450 <log_0>
    a792:	e7cb      	b.n	a72c <bt_set_name+0x1c>
		return -ENOMEM;
    a794:	f06f 000b 	mvn.w	r0, #11
    a798:	e7c9      	b.n	a72e <bt_set_name+0x1e>
    a79a:	bf00      	nop
    a79c:	20000008 	.word	0x20000008
    a7a0:	20000168 	.word	0x20000168
    a7a4:	0002c7d2 	.word	0x0002c7d2
    a7a8:	000278c0 	.word	0x000278c0
    a7ac:	00027978 	.word	0x00027978
    a7b0:	0002c7da 	.word	0x0002c7da

0000a7b4 <bt_get_name>:
}
    a7b4:	4800      	ldr	r0, [pc, #0]	; (a7b8 <bt_get_name+0x4>)
    a7b6:	4770      	bx	lr
    a7b8:	20000168 	.word	0x20000168

0000a7bc <bt_id_create>:
{
    a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7be:	460e      	mov	r6, r1
    a7c0:	b087      	sub	sp, #28
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a7c2:	4605      	mov	r5, r0
    a7c4:	b930      	cbnz	r0, a7d4 <bt_id_create+0x18>
	if (bt_dev.id_count == ARRAY_SIZE(bt_dev.id_addr)) {
    a7c6:	4f2b      	ldr	r7, [pc, #172]	; (a874 <bt_id_create+0xb8>)
    a7c8:	79fb      	ldrb	r3, [r7, #7]
    a7ca:	2b01      	cmp	r3, #1
    a7cc:	d12a      	bne.n	a824 <bt_id_create+0x68>
		return -ENOMEM;
    a7ce:	f06f 040b 	mvn.w	r4, #11
    a7d2:	e024      	b.n	a81e <bt_id_create+0x62>
	if (addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY)) {
    a7d4:	2300      	movs	r3, #0
    a7d6:	a902      	add	r1, sp, #8
    a7d8:	9302      	str	r3, [sp, #8]
    a7da:	f8cd 300b 	str.w	r3, [sp, #11]
    a7de:	f01a f808 	bl	247f2 <bt_addr_le_cmp>
    a7e2:	2800      	cmp	r0, #0
    a7e4:	d0ef      	beq.n	a7c6 <bt_id_create+0xa>
		if (addr->type != BT_ADDR_LE_RANDOM ||
    a7e6:	782b      	ldrb	r3, [r5, #0]
    a7e8:	2b01      	cmp	r3, #1
    a7ea:	d104      	bne.n	a7f6 <bt_id_create+0x3a>
    a7ec:	79ab      	ldrb	r3, [r5, #6]
    a7ee:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    a7f2:	2bc0      	cmp	r3, #192	; 0xc0
    a7f4:	d00c      	beq.n	a810 <bt_id_create+0x54>
    a7f6:	4920      	ldr	r1, [pc, #128]	; (a878 <bt_id_create+0xbc>)
    a7f8:	4b20      	ldr	r3, [pc, #128]	; (a87c <bt_id_create+0xc0>)
			BT_ERR("Only static random identity address supported");
    a7fa:	4821      	ldr	r0, [pc, #132]	; (a880 <bt_id_create+0xc4>)
    a7fc:	1ac9      	subs	r1, r1, r3
    a7fe:	08c9      	lsrs	r1, r1, #3
    a800:	0189      	lsls	r1, r1, #6
    a802:	f041 0101 	orr.w	r1, r1, #1
    a806:	f017 fe23 	bl	22450 <log_0>
			return -EINVAL;
    a80a:	f06f 0415 	mvn.w	r4, #21
    a80e:	e006      	b.n	a81e <bt_id_create+0x62>
		if (id_find(addr) >= 0) {
    a810:	4628      	mov	r0, r5
    a812:	f7fe f8ff 	bl	8a14 <id_find>
    a816:	2800      	cmp	r0, #0
    a818:	dbd5      	blt.n	a7c6 <bt_id_create+0xa>
			return -EALREADY;
    a81a:	f06f 0444 	mvn.w	r4, #68	; 0x44
}
    a81e:	4620      	mov	r0, r4
    a820:	b007      	add	sp, #28
    a822:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a824:	f107 0094 	add.w	r0, r7, #148	; 0x94
    a828:	f019 ffdd 	bl	247e6 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    a82c:	f010 0001 	ands.w	r0, r0, #1
    a830:	d117      	bne.n	a862 <bt_id_create+0xa6>
		uint8_t zero_irk[16] = { 0 };
    a832:	e9cd 0002 	strd	r0, r0, [sp, #8]
    a836:	e9cd 0004 	strd	r0, r0, [sp, #16]
		if (!(addr && bt_addr_le_cmp(addr, BT_ADDR_LE_ANY))) {
    a83a:	2d00      	cmp	r5, #0
    a83c:	d0e5      	beq.n	a80a <bt_id_create+0x4e>
    a83e:	9000      	str	r0, [sp, #0]
    a840:	4669      	mov	r1, sp
    a842:	f8cd 0003 	str.w	r0, [sp, #3]
    a846:	4628      	mov	r0, r5
    a848:	f019 ffd3 	bl	247f2 <bt_addr_le_cmp>
    a84c:	2800      	cmp	r0, #0
    a84e:	d0dc      	beq.n	a80a <bt_id_create+0x4e>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a850:	2e00      	cmp	r6, #0
    a852:	d0da      	beq.n	a80a <bt_id_create+0x4e>
		    !(irk && memcmp(irk, zero_irk, 16))) {
    a854:	2210      	movs	r2, #16
    a856:	a902      	add	r1, sp, #8
    a858:	4630      	mov	r0, r6
    a85a:	f019 fdf4 	bl	24446 <memcmp>
		if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    a85e:	2800      	cmp	r0, #0
    a860:	d0d3      	beq.n	a80a <bt_id_create+0x4e>
	new_id = bt_dev.id_count++;
    a862:	79fc      	ldrb	r4, [r7, #7]
	id_create(new_id, addr, irk);
    a864:	4632      	mov	r2, r6
	new_id = bt_dev.id_count++;
    a866:	1c63      	adds	r3, r4, #1
	id_create(new_id, addr, irk);
    a868:	4629      	mov	r1, r5
    a86a:	4620      	mov	r0, r4
	new_id = bt_dev.id_count++;
    a86c:	71fb      	strb	r3, [r7, #7]
	id_create(new_id, addr, irk);
    a86e:	f7fe fa8f 	bl	8d90 <id_create>
	return new_id;
    a872:	e7d4      	b.n	a81e <bt_id_create+0x62>
    a874:	20000008 	.word	0x20000008
    a878:	00027978 	.word	0x00027978
    a87c:	000278c0 	.word	0x000278c0
    a880:	0002c7ef 	.word	0x0002c7ef

0000a884 <bt_setup_public_id_addr>:
{
    a884:	b570      	push	{r4, r5, r6, lr}
    a886:	b08c      	sub	sp, #48	; 0x30
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    a888:	aa01      	add	r2, sp, #4
    a88a:	2100      	movs	r1, #0
    a88c:	f241 0009 	movw	r0, #4105	; 0x1009
    a890:	f7fe fef4 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    a894:	4e3b      	ldr	r6, [pc, #236]	; (a984 <bt_setup_public_id_addr+0x100>)
    a896:	4604      	mov	r4, r0
    a898:	b168      	cbz	r0, a8b6 <bt_setup_public_id_addr+0x32>
    a89a:	493b      	ldr	r1, [pc, #236]	; (a988 <bt_setup_public_id_addr+0x104>)
    a89c:	4b3b      	ldr	r3, [pc, #236]	; (a98c <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read public address");
    a89e:	483c      	ldr	r0, [pc, #240]	; (a990 <bt_setup_public_id_addr+0x10c>)
    a8a0:	1ac9      	subs	r1, r1, r3
    a8a2:	08c9      	lsrs	r1, r1, #3
    a8a4:	0189      	lsls	r1, r1, #6
    a8a6:	f041 0102 	orr.w	r1, r1, #2
    a8aa:	f017 fdd1 	bl	22450 <log_0>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a8ae:	2300      	movs	r3, #0
    a8b0:	71f3      	strb	r3, [r6, #7]
}
    a8b2:	b00c      	add	sp, #48	; 0x30
    a8b4:	bd70      	pop	{r4, r5, r6, pc}
	rp = (void *)rsp->data;
    a8b6:	9b01      	ldr	r3, [sp, #4]
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a8b8:	689d      	ldr	r5, [r3, #8]
    a8ba:	9008      	str	r0, [sp, #32]
    a8bc:	3501      	adds	r5, #1
    a8be:	f8ad 0024 	strh.w	r0, [sp, #36]	; 0x24
    a8c2:	2206      	movs	r2, #6
    a8c4:	a908      	add	r1, sp, #32
    a8c6:	4628      	mov	r0, r5
    a8c8:	f019 fdbd 	bl	24446 <memcmp>
    a8cc:	b918      	cbnz	r0, a8d6 <bt_setup_public_id_addr+0x52>
		net_buf_unref(rsp);
    a8ce:	9801      	ldr	r0, [sp, #4]
    a8d0:	f012 feec 	bl	1d6ac <net_buf_unref>
    a8d4:	e7eb      	b.n	a8ae <bt_setup_public_id_addr+0x2a>
	    !bt_addr_cmp(&rp->bdaddr, BT_ADDR_NONE)) {
    a8d6:	23ff      	movs	r3, #255	; 0xff
    a8d8:	2206      	movs	r2, #6
    a8da:	a904      	add	r1, sp, #16
    a8dc:	4628      	mov	r0, r5
    a8de:	f88d 3010 	strb.w	r3, [sp, #16]
    a8e2:	f88d 3011 	strb.w	r3, [sp, #17]
    a8e6:	f88d 3012 	strb.w	r3, [sp, #18]
    a8ea:	f88d 3013 	strb.w	r3, [sp, #19]
    a8ee:	f88d 3014 	strb.w	r3, [sp, #20]
    a8f2:	f88d 3015 	strb.w	r3, [sp, #21]
    a8f6:	f019 fda6 	bl	24446 <memcmp>
	if (!bt_addr_cmp(&rp->bdaddr, BT_ADDR_ANY) ||
    a8fa:	2800      	cmp	r0, #0
    a8fc:	d0e7      	beq.n	a8ce <bt_setup_public_id_addr+0x4a>
	bt_addr_copy(&addr->a, &rp->bdaddr);
    a8fe:	4629      	mov	r1, r5
    a900:	f10d 0009 	add.w	r0, sp, #9
    a904:	f019 ff78 	bl	247f8 <bt_addr_copy>
	net_buf_unref(rsp);
    a908:	9801      	ldr	r0, [sp, #4]
	addr->type = BT_ADDR_LE_PUBLIC;
    a90a:	f88d 4008 	strb.w	r4, [sp, #8]
	net_buf_unref(rsp);
    a90e:	f012 fecd 	bl	1d6ac <net_buf_unref>
	bt_dev.id_count = bt_read_public_addr(&addr);
    a912:	2301      	movs	r3, #1
	memset(ir, 0, 16);
    a914:	2210      	movs	r2, #16
    a916:	4621      	mov	r1, r4
    a918:	a808      	add	r0, sp, #32
	bt_dev.id_count = bt_read_public_addr(&addr);
    a91a:	71f3      	strb	r3, [r6, #7]
	memset(ir, 0, 16);
    a91c:	f019 fdcf 	bl	244be <memset>
	if (!BT_VS_CMD_READ_KEY_ROOTS(bt_dev.vs_commands)) {
    a920:	f896 3086 	ldrb.w	r3, [r6, #134]	; 0x86
    a924:	079b      	lsls	r3, r3, #30
    a926:	d510      	bpl.n	a94a <bt_setup_public_id_addr+0xc6>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_KEY_HIERARCHY_ROOTS, NULL,
    a928:	aa04      	add	r2, sp, #16
    a92a:	4621      	mov	r1, r4
    a92c:	f64f 400a 	movw	r0, #64522	; 0xfc0a
    a930:	f7fe fea4 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    a934:	b1c8      	cbz	r0, a96a <bt_setup_public_id_addr+0xe6>
    a936:	4914      	ldr	r1, [pc, #80]	; (a988 <bt_setup_public_id_addr+0x104>)
    a938:	4b14      	ldr	r3, [pc, #80]	; (a98c <bt_setup_public_id_addr+0x108>)
		BT_WARN("Failed to read identity root");
    a93a:	4816      	ldr	r0, [pc, #88]	; (a994 <bt_setup_public_id_addr+0x110>)
    a93c:	1ac9      	subs	r1, r1, r3
    a93e:	08c9      	lsrs	r1, r1, #3
    a940:	0189      	lsls	r1, r1, #6
    a942:	f041 0102 	orr.w	r1, r1, #2
    a946:	f017 fd83 	bl	22450 <log_0>
	if (!bt_smp_irk_get(ir, ir_irk)) {
    a94a:	a904      	add	r1, sp, #16
    a94c:	a808      	add	r0, sp, #32
    a94e:	f01b fc8a 	bl	26266 <bt_smp_irk_get>
    a952:	b1a8      	cbz	r0, a980 <bt_setup_public_id_addr+0xfc>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    a954:	4810      	ldr	r0, [pc, #64]	; (a998 <bt_setup_public_id_addr+0x114>)
    a956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    a95a:	f019 ff53 	bl	24804 <atomic_or>
	uint8_t *irk = NULL;
    a95e:	2200      	movs	r2, #0
	id_create(BT_ID_DEFAULT, &addr, irk);
    a960:	a902      	add	r1, sp, #8
    a962:	2000      	movs	r0, #0
    a964:	f7fe fa14 	bl	8d90 <id_create>
    a968:	e7a3      	b.n	a8b2 <bt_setup_public_id_addr+0x2e>
	rp = (void *)rsp->data;
    a96a:	9b04      	ldr	r3, [sp, #16]
	memcpy(ir, rp->ir, 16);
    a96c:	6899      	ldr	r1, [r3, #8]
    a96e:	2210      	movs	r2, #16
    a970:	3101      	adds	r1, #1
    a972:	a808      	add	r0, sp, #32
    a974:	f019 fd78 	bl	24468 <memcpy>
	net_buf_unref(rsp);
    a978:	9804      	ldr	r0, [sp, #16]
    a97a:	f012 fe97 	bl	1d6ac <net_buf_unref>
    a97e:	e7e4      	b.n	a94a <bt_setup_public_id_addr+0xc6>
		irk = ir_irk;
    a980:	aa04      	add	r2, sp, #16
    a982:	e7ed      	b.n	a960 <bt_setup_public_id_addr+0xdc>
    a984:	20000008 	.word	0x20000008
    a988:	00027978 	.word	0x00027978
    a98c:	000278c0 	.word	0x000278c0
    a990:	0002c81d 	.word	0x0002c81d
    a994:	0002c83b 	.word	0x0002c83b
    a998:	2000009c 	.word	0x2000009c

0000a99c <bt_read_static_addr>:
{
    a99c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a9a0:	4b25      	ldr	r3, [pc, #148]	; (aa38 <bt_read_static_addr+0x9c>)
    a9a2:	f893 4086 	ldrb.w	r4, [r3, #134]	; 0x86
    a9a6:	f014 0401 	ands.w	r4, r4, #1
{
    a9aa:	4607      	mov	r7, r0
    a9ac:	460e      	mov	r6, r1
	if (!BT_VS_CMD_READ_STATIC_ADDRS(bt_dev.vs_commands)) {
    a9ae:	d10a      	bne.n	a9c6 <bt_read_static_addr+0x2a>
    a9b0:	4922      	ldr	r1, [pc, #136]	; (aa3c <bt_read_static_addr+0xa0>)
    a9b2:	4b23      	ldr	r3, [pc, #140]	; (aa40 <bt_read_static_addr+0xa4>)
		BT_WARN("Read Static Addresses command not available");
    a9b4:	4823      	ldr	r0, [pc, #140]	; (aa44 <bt_read_static_addr+0xa8>)
    a9b6:	1ac9      	subs	r1, r1, r3
    a9b8:	08c9      	lsrs	r1, r1, #3
    a9ba:	0189      	lsls	r1, r1, #6
    a9bc:	f041 0102 	orr.w	r1, r1, #2
		BT_WARN("No static addresses stored in controller");
    a9c0:	f017 fd46 	bl	22450 <log_0>
    a9c4:	e012      	b.n	a9ec <bt_read_static_addr+0x50>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS, NULL, &rsp);
    a9c6:	aa01      	add	r2, sp, #4
    a9c8:	2100      	movs	r1, #0
    a9ca:	f64f 4009 	movw	r0, #64521	; 0xfc09
    a9ce:	f7fe fe55 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    a9d2:	4605      	mov	r5, r0
    a9d4:	b170      	cbz	r0, a9f4 <bt_read_static_addr+0x58>
    a9d6:	4b1a      	ldr	r3, [pc, #104]	; (aa40 <bt_read_static_addr+0xa4>)
    a9d8:	4918      	ldr	r1, [pc, #96]	; (aa3c <bt_read_static_addr+0xa0>)
		BT_WARN("Failed to read static addresses");
    a9da:	481b      	ldr	r0, [pc, #108]	; (aa48 <bt_read_static_addr+0xac>)
    a9dc:	1ac9      	subs	r1, r1, r3
    a9de:	08c9      	lsrs	r1, r1, #3
    a9e0:	0189      	lsls	r1, r1, #6
    a9e2:	f041 0102 	orr.w	r1, r1, #2
    a9e6:	f017 fd33 	bl	22450 <log_0>
		return 0;
    a9ea:	2400      	movs	r4, #0
}
    a9ec:	4620      	mov	r0, r4
    a9ee:	b002      	add	sp, #8
    a9f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	rp = (void *)rsp->data;
    a9f4:	9b01      	ldr	r3, [sp, #4]
    a9f6:	689b      	ldr	r3, [r3, #8]
	cnt = MIN(rp->num_addrs, size);
    a9f8:	785c      	ldrb	r4, [r3, #1]
    a9fa:	42b4      	cmp	r4, r6
    a9fc:	bf28      	it	cs
    a9fe:	4634      	movcs	r4, r6
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    aa00:	f04f 0816 	mov.w	r8, #22
    aa04:	1c9e      	adds	r6, r3, #2
	for (i = 0; i < cnt; i++) {
    aa06:	42a5      	cmp	r5, r4
    aa08:	db0d      	blt.n	aa26 <bt_read_static_addr+0x8a>
	net_buf_unref(rsp);
    aa0a:	9801      	ldr	r0, [sp, #4]
    aa0c:	f012 fe4e 	bl	1d6ac <net_buf_unref>
	if (!cnt) {
    aa10:	2c00      	cmp	r4, #0
    aa12:	d1eb      	bne.n	a9ec <bt_read_static_addr+0x50>
    aa14:	4909      	ldr	r1, [pc, #36]	; (aa3c <bt_read_static_addr+0xa0>)
    aa16:	4b0a      	ldr	r3, [pc, #40]	; (aa40 <bt_read_static_addr+0xa4>)
		BT_WARN("No static addresses stored in controller");
    aa18:	480c      	ldr	r0, [pc, #48]	; (aa4c <bt_read_static_addr+0xb0>)
    aa1a:	1ac9      	subs	r1, r1, r3
    aa1c:	08c9      	lsrs	r1, r1, #3
    aa1e:	0189      	lsls	r1, r1, #6
    aa20:	f041 0102 	orr.w	r1, r1, #2
    aa24:	e7cc      	b.n	a9c0 <bt_read_static_addr+0x24>
		memcpy(&addrs[i], rp->a, sizeof(struct bt_hci_vs_static_addr));
    aa26:	fb08 7005 	mla	r0, r8, r5, r7
    aa2a:	2216      	movs	r2, #22
    aa2c:	4631      	mov	r1, r6
    aa2e:	f019 fd1b 	bl	24468 <memcpy>
	for (i = 0; i < cnt; i++) {
    aa32:	3501      	adds	r5, #1
    aa34:	e7e7      	b.n	aa06 <bt_read_static_addr+0x6a>
    aa36:	bf00      	nop
    aa38:	20000008 	.word	0x20000008
    aa3c:	00027978 	.word	0x00027978
    aa40:	000278c0 	.word	0x000278c0
    aa44:	0002c858 	.word	0x0002c858
    aa48:	0002c884 	.word	0x0002c884
    aa4c:	0002c8a4 	.word	0x0002c8a4

0000aa50 <bt_setup_random_id_addr>:
{
    aa50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (!bt_dev.id_count) {
    aa54:	f8df 808c 	ldr.w	r8, [pc, #140]	; aae4 <bt_setup_random_id_addr+0x94>
    aa58:	f898 4007 	ldrb.w	r4, [r8, #7]
{
    aa5c:	b08c      	sub	sp, #48	; 0x30
	if (!bt_dev.id_count) {
    aa5e:	bba4      	cbnz	r4, aaca <bt_setup_random_id_addr+0x7a>
		bt_dev.id_count = bt_read_static_addr(addrs, CONFIG_BT_ID_MAX);
    aa60:	2101      	movs	r1, #1
    aa62:	a806      	add	r0, sp, #24
    aa64:	f7ff ff9a 	bl	a99c <bt_read_static_addr>
    aa68:	f888 0007 	strb.w	r0, [r8, #7]
		if (bt_dev.id_count) {
    aa6c:	b368      	cbz	r0, aaca <bt_setup_random_id_addr+0x7a>
    aa6e:	f04f 0916 	mov.w	r9, #22
    aa72:	f108 0a94 	add.w	sl, r8, #148	; 0x94
    aa76:	b2e5      	uxtb	r5, r4
				if (!bt_smp_irk_get(addrs[i].ir, ir_irk)) {
    aa78:	fb09 f705 	mul.w	r7, r9, r5
    aa7c:	1db8      	adds	r0, r7, #6
    aa7e:	ab06      	add	r3, sp, #24
    aa80:	a902      	add	r1, sp, #8
    aa82:	4418      	add	r0, r3
    aa84:	f01b fbef 	bl	26266 <bt_smp_irk_get>
    aa88:	b1e8      	cbz	r0, aac6 <bt_setup_random_id_addr+0x76>
    aa8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    aa8e:	4650      	mov	r0, sl
    aa90:	f019 feb8 	bl	24804 <atomic_or>
				uint8_t *irk = NULL;
    aa94:	2600      	movs	r6, #0
				bt_addr_copy(&addr.a, &addrs[i].bdaddr);
    aa96:	ab06      	add	r3, sp, #24
    aa98:	19d9      	adds	r1, r3, r7
    aa9a:	f10d 0001 	add.w	r0, sp, #1
    aa9e:	f019 feab 	bl	247f8 <bt_addr_copy>
				addr.type = BT_ADDR_LE_RANDOM;
    aaa2:	2301      	movs	r3, #1
				id_create(i, &addr, irk);
    aaa4:	4632      	mov	r2, r6
    aaa6:	4669      	mov	r1, sp
    aaa8:	4628      	mov	r0, r5
				addr.type = BT_ADDR_LE_RANDOM;
    aaaa:	f88d 3000 	strb.w	r3, [sp]
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    aaae:	3401      	adds	r4, #1
				id_create(i, &addr, irk);
    aab0:	f7fe f96e 	bl	8d90 <id_create>
			for (uint8_t i = 0; i < bt_dev.id_count; i++) {
    aab4:	f898 2007 	ldrb.w	r2, [r8, #7]
    aab8:	b2e3      	uxtb	r3, r4
    aaba:	429a      	cmp	r2, r3
    aabc:	d8db      	bhi.n	aa76 <bt_setup_random_id_addr+0x26>
}
    aabe:	2000      	movs	r0, #0
    aac0:	b00c      	add	sp, #48	; 0x30
    aac2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
					irk = ir_irk;
    aac6:	ae02      	add	r6, sp, #8
    aac8:	e7e5      	b.n	aa96 <bt_setup_random_id_addr+0x46>
    aaca:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    aace:	4806      	ldr	r0, [pc, #24]	; (aae8 <bt_setup_random_id_addr+0x98>)
    aad0:	f019 fe98 	bl	24804 <atomic_or>
	return bt_id_create(NULL, NULL);
    aad4:	2100      	movs	r1, #0
    aad6:	4608      	mov	r0, r1
}
    aad8:	b00c      	add	sp, #48	; 0x30
    aada:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_id_create(NULL, NULL);
    aade:	f7ff be6d 	b.w	a7bc <bt_id_create>
    aae2:	bf00      	nop
    aae4:	20000008 	.word	0x20000008
    aae8:	2000009c 	.word	0x2000009c

0000aaec <bt_le_adv_start_legacy>:

int bt_le_adv_start_legacy(struct bt_le_ext_adv *adv,
			   const struct bt_le_adv_param *param,
			   const struct bt_data *ad, size_t ad_len,
			   const struct bt_data *sd, size_t sd_len)
{
    aaec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_hci_cp_le_set_adv_param set_param;
	struct bt_conn *conn = NULL;
	struct net_buf *buf;
	bool dir_adv = (param->peer != NULL), scannable;
    aaf0:	690d      	ldr	r5, [r1, #16]
{
    aaf2:	b08f      	sub	sp, #60	; 0x3c
    aaf4:	469a      	mov	sl, r3
	struct bt_conn *conn = NULL;
    aaf6:	2300      	movs	r3, #0
	bool dir_adv = (param->peer != NULL), scannable;
    aaf8:	ebb5 0b03 	subs.w	fp, r5, r3
{
    aafc:	4606      	mov	r6, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    aafe:	4883      	ldr	r0, [pc, #524]	; (ad0c <bt_le_adv_start_legacy+0x220>)
	struct bt_conn *conn = NULL;
    ab00:	9307      	str	r3, [sp, #28]
	bool dir_adv = (param->peer != NULL), scannable;
    ab02:	bf18      	it	ne
    ab04:	f04f 0b01 	movne.w	fp, #1
    ab08:	f019 fe6d 	bl	247e6 <atomic_get>
	int err;

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ab0c:	0787      	lsls	r7, r0, #30
{
    ab0e:	460c      	mov	r4, r1
    ab10:	4691      	mov	r9, r2
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    ab12:	f140 80ed 	bpl.w	acf0 <bt_le_adv_start_legacy+0x204>
		return -EAGAIN;
	}

	if (!valid_adv_param(param)) {
    ab16:	4608      	mov	r0, r1
    ab18:	f7fd ff94 	bl	8a44 <valid_adv_param>
    ab1c:	4607      	mov	r7, r0
    ab1e:	2800      	cmp	r0, #0
    ab20:	f000 80e9 	beq.w	acf6 <bt_le_adv_start_legacy+0x20a>

	if (!bt_le_adv_random_addr_check(param)) {
		return -EINVAL;
	}

	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
    ab24:	f106 0810 	add.w	r8, r6, #16
    ab28:	4640      	mov	r0, r8
    ab2a:	f019 fe5c 	bl	247e6 <atomic_get>
    ab2e:	f3c0 1180 	ubfx	r1, r0, #6, #1
    ab32:	0640      	lsls	r0, r0, #25
    ab34:	f100 80e2 	bmi.w	acfc <bt_le_adv_start_legacy+0x210>
		return -EALREADY;
	}

	(void)memset(&set_param, 0, sizeof(set_param));
    ab38:	220f      	movs	r2, #15
    ab3a:	a80a      	add	r0, sp, #40	; 0x28
    ab3c:	9105      	str	r1, [sp, #20]
    ab3e:	f019 fcbe 	bl	244be <memset>

	set_param.min_interval = sys_cpu_to_le16(param->interval_min);
    ab42:	68a3      	ldr	r3, [r4, #8]
    ab44:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
	set_param.channel_map  = get_adv_channel_map(param->options);
    ab48:	6860      	ldr	r0, [r4, #4]
	set_param.max_interval = sys_cpu_to_le16(param->interval_max);
    ab4a:	68e3      	ldr	r3, [r4, #12]
    ab4c:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
	set_param.channel_map  = get_adv_channel_map(param->options);
    ab50:	f019 fe2b 	bl	247aa <get_adv_channel_map>
	set_param.filter_policy = get_filter_policy(param->options);

	if (adv->id != param->id) {
    ab54:	7832      	ldrb	r2, [r6, #0]
    ab56:	7823      	ldrb	r3, [r4, #0]
	set_param.filter_policy = get_filter_policy(param->options);
    ab58:	9905      	ldr	r1, [sp, #20]
	set_param.channel_map  = get_adv_channel_map(param->options);
    ab5a:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
	if (adv->id != param->id) {
    ab5e:	429a      	cmp	r2, r3
	set_param.filter_policy = get_filter_policy(param->options);
    ab60:	f88d 1036 	strb.w	r1, [sp, #54]	; 0x36
	if (adv->id != param->id) {
    ab64:	d004      	beq.n	ab70 <bt_le_adv_start_legacy+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ab66:	4869      	ldr	r0, [pc, #420]	; (ad0c <bt_le_adv_start_legacy+0x220>)
    ab68:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    ab6c:	f019 fe2c 	bl	247c8 <atomic_and>
		atomic_clear_bit(bt_dev.flags, BT_DEV_RPA_VALID);
	}

	adv->id = param->id;
	bt_dev.adv_conn_id = adv->id;
    ab70:	4b67      	ldr	r3, [pc, #412]	; (ad10 <bt_le_adv_start_legacy+0x224>)
	adv->id = param->id;
    ab72:	7820      	ldrb	r0, [r4, #0]
    ab74:	7030      	strb	r0, [r6, #0]
	bt_dev.adv_conn_id = adv->id;
    ab76:	f883 0033 	strb.w	r0, [r3, #51]	; 0x33

	err = le_adv_set_random_addr(adv, param->options, dir_adv,
    ab7a:	465a      	mov	r2, fp
    ab7c:	6861      	ldr	r1, [r4, #4]
    ab7e:	f10d 032d 	add.w	r3, sp, #45	; 0x2d
    ab82:	f7fe fe59 	bl	9838 <le_adv_set_random_addr.isra.0>
				     &set_param.own_addr_type);
	if (err) {
    ab86:	4683      	mov	fp, r0
    ab88:	2800      	cmp	r0, #0
    ab8a:	d16f      	bne.n	ac6c <bt_le_adv_start_legacy+0x180>
		return err;
	}

	if (dir_adv) {
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ab8c:	f106 0009 	add.w	r0, r6, #9
	if (dir_adv) {
    ab90:	2d00      	cmp	r5, #0
    ab92:	d048      	beq.n	ac26 <bt_le_adv_start_legacy+0x13a>
		bt_addr_le_copy(&adv->target_addr, param->peer);
    ab94:	6921      	ldr	r1, [r4, #16]
	} else {
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    ab96:	f019 fe32 	bl	247fe <bt_addr_le_copy>
	}

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    ab9a:	6860      	ldr	r0, [r4, #4]
    ab9c:	07c1      	lsls	r1, r0, #31
    ab9e:	d54a      	bpl.n	ac36 <bt_le_adv_start_legacy+0x14a>
		scannable = true;

		if (dir_adv) {
    aba0:	2d00      	cmp	r5, #0
    aba2:	d045      	beq.n	ac30 <bt_le_adv_start_legacy+0x144>
			if (param->options & BT_LE_ADV_OPT_DIR_MODE_LOW_DUTY) {
				set_param.type = BT_HCI_ADV_DIRECT_IND_LOW_DUTY;
			} else {
				set_param.type = BT_HCI_ADV_DIRECT_IND;
    aba4:	f010 0f10 	tst.w	r0, #16
    aba8:	bf14      	ite	ne
    abaa:	2304      	movne	r3, #4
    abac:	2301      	moveq	r3, #1
			}

			bt_addr_le_copy(&set_param.direct_addr, param->peer);
    abae:	6921      	ldr	r1, [r4, #16]
    abb0:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    abb4:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
    abb8:	f019 fe21 	bl	247fe <bt_addr_le_copy>

		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
					     BT_HCI_ADV_NONCONN_IND;
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM, sizeof(set_param));
    abbc:	210f      	movs	r1, #15
    abbe:	f242 0006 	movw	r0, #8198	; 0x2006
    abc2:	f7fe fbfb 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    abc6:	4683      	mov	fp, r0
    abc8:	2800      	cmp	r0, #0
    abca:	f000 809a 	beq.w	ad02 <bt_le_adv_start_legacy+0x216>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    abce:	220f      	movs	r2, #15
    abd0:	a90a      	add	r1, sp, #40	; 0x28
    abd2:	3008      	adds	r0, #8
    abd4:	f01b fca2 	bl	2651c <net_buf_simple_add_mem>
		return -ENOBUFS;
	}

	net_buf_add_mem(buf, &set_param, sizeof(set_param));

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    abd8:	2200      	movs	r2, #0
    abda:	4659      	mov	r1, fp
    abdc:	f242 0006 	movw	r0, #8198	; 0x2006
    abe0:	f7fe fd4c 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    abe4:	2800      	cmp	r0, #0
    abe6:	f040 808f 	bne.w	ad08 <bt_le_adv_start_legacy+0x21c>
		return err;
	}

	if (!dir_adv) {
    abea:	b37d      	cbz	r5, ac4c <bt_le_adv_start_legacy+0x160>
			return err;
		}
	}

	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
	    (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    abec:	6863      	ldr	r3, [r4, #4]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    abee:	07da      	lsls	r2, r3, #31
    abf0:	d440      	bmi.n	ac74 <bt_le_adv_start_legacy+0x188>
	return set_le_adv_enable_legacy(adv, enable);
    abf2:	2101      	movs	r1, #1
    abf4:	4630      	mov	r0, r6
    abf6:	f7fe fe7f 	bl	98f8 <set_le_adv_enable_legacy>
			return err;
		}
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    abfa:	4683      	mov	fp, r0
    abfc:	2800      	cmp	r0, #0
    abfe:	d070      	beq.n	ace2 <bt_le_adv_start_legacy+0x1f6>
    ac00:	4b44      	ldr	r3, [pc, #272]	; (ad14 <bt_le_adv_start_legacy+0x228>)
    ac02:	4945      	ldr	r1, [pc, #276]	; (ad18 <bt_le_adv_start_legacy+0x22c>)
		BT_ERR("Failed to start advertiser");
    ac04:	4845      	ldr	r0, [pc, #276]	; (ad1c <bt_le_adv_start_legacy+0x230>)
    ac06:	1ac9      	subs	r1, r1, r3
    ac08:	08c9      	lsrs	r1, r1, #3
    ac0a:	0189      	lsls	r1, r1, #6
    ac0c:	f041 0101 	orr.w	r1, r1, #1
    ac10:	f017 fc1e 	bl	22450 <log_0>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ac14:	9807      	ldr	r0, [sp, #28]
    ac16:	b348      	cbz	r0, ac6c <bt_le_adv_start_legacy+0x180>
			bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ac18:	2100      	movs	r1, #0
    ac1a:	f000 fd83 	bl	b724 <bt_conn_set_state>
			bt_conn_unref(conn);
    ac1e:	9807      	ldr	r0, [sp, #28]
    ac20:	f01a f85a 	bl	24cd8 <bt_conn_unref>
    ac24:	e022      	b.n	ac6c <bt_le_adv_start_legacy+0x180>
		bt_addr_le_copy(&adv->target_addr, BT_ADDR_LE_ANY);
    ac26:	9508      	str	r5, [sp, #32]
    ac28:	a908      	add	r1, sp, #32
    ac2a:	f8cd 5023 	str.w	r5, [sp, #35]	; 0x23
    ac2e:	e7b2      	b.n	ab96 <bt_le_adv_start_legacy+0xaa>
			set_param.type = BT_HCI_ADV_IND;
    ac30:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    ac34:	e7c2      	b.n	abbc <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    ac36:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac38:	b933      	cbnz	r3, ac48 <bt_le_adv_start_legacy+0x15c>
    ac3a:	f3c0 07c0 	ubfx	r7, r0, #3, #1
		set_param.type = scannable ? BT_HCI_ADV_SCAN_IND :
    ac3e:	f1c7 0303 	rsb	r3, r7, #3
    ac42:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
    ac46:	e7b9      	b.n	abbc <bt_le_adv_start_legacy+0xd0>
		scannable = sd || (param->options & BT_LE_ADV_OPT_USE_NAME);
    ac48:	2701      	movs	r7, #1
    ac4a:	e7f8      	b.n	ac3e <bt_le_adv_start_legacy+0x152>
		err = le_adv_update(adv, ad, ad_len, sd, sd_len, false,
    ac4c:	6863      	ldr	r3, [r4, #4]
    ac4e:	f3c3 03c0 	ubfx	r3, r3, #3, #1
    ac52:	e9cd 7301 	strd	r7, r3, [sp, #4]
    ac56:	9b19      	ldr	r3, [sp, #100]	; 0x64
    ac58:	9300      	str	r3, [sp, #0]
    ac5a:	4652      	mov	r2, sl
    ac5c:	9b18      	ldr	r3, [sp, #96]	; 0x60
    ac5e:	4649      	mov	r1, r9
    ac60:	4630      	mov	r0, r6
    ac62:	f7fe ffa7 	bl	9bb4 <le_adv_update.constprop.0>
		if (err) {
    ac66:	4683      	mov	fp, r0
    ac68:	2800      	cmp	r0, #0
    ac6a:	d0bf      	beq.n	abec <bt_le_adv_start_legacy+0x100>

	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
			  param->options & BT_LE_ADV_OPT_USE_IDENTITY);

	return 0;
}
    ac6c:	4658      	mov	r0, fp
    ac6e:	b00f      	add	sp, #60	; 0x3c
    ac70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = le_adv_start_add_conn(adv, &conn);
    ac74:	a907      	add	r1, sp, #28
    ac76:	4630      	mov	r0, r6
    ac78:	f7fe f8e2 	bl	8e40 <le_adv_start_add_conn>
		if (err) {
    ac7c:	4683      	mov	fp, r0
    ac7e:	2800      	cmp	r0, #0
    ac80:	d0b7      	beq.n	abf2 <bt_le_adv_start_legacy+0x106>
			if (err == -ENOMEM && !dir_adv &&
    ac82:	f110 0f0c 	cmn.w	r0, #12
    ac86:	d1f1      	bne.n	ac6c <bt_le_adv_start_legacy+0x180>
    ac88:	2d00      	cmp	r5, #0
    ac8a:	d1ef      	bne.n	ac6c <bt_le_adv_start_legacy+0x180>
			    !(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    ac8c:	6863      	ldr	r3, [r4, #4]
			if (err == -ENOMEM && !dir_adv &&
    ac8e:	079b      	lsls	r3, r3, #30
    ac90:	d4ec      	bmi.n	ac6c <bt_le_adv_start_legacy+0x180>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    ac92:	6860      	ldr	r0, [r4, #4]
    ac94:	f080 0002 	eor.w	r0, r0, #2
    ac98:	f3c0 0b40 	ubfx	fp, r0, #1, #1
    ac9c:	f00b 0201 	and.w	r2, fp, #1
    aca0:	210c      	movs	r1, #12
    aca2:	4640      	mov	r0, r8
    aca4:	f019 fdc8 	bl	24838 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_INCLUDE_NAME,
    aca8:	6862      	ldr	r2, [r4, #4]
    acaa:	2107      	movs	r1, #7
    acac:	f3c2 02c0 	ubfx	r2, r2, #3, #1
    acb0:	4640      	mov	r0, r8
    acb2:	f019 fdc1 	bl	24838 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_CONNECTABLE,
    acb6:	6862      	ldr	r2, [r4, #4]
    acb8:	2108      	movs	r1, #8
    acba:	f002 0201 	and.w	r2, r2, #1
    acbe:	4640      	mov	r0, r8
    acc0:	f019 fdba 	bl	24838 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_SCANNABLE, scannable);
    acc4:	463a      	mov	r2, r7
    acc6:	2109      	movs	r1, #9
    acc8:	4640      	mov	r0, r8
    acca:	f019 fdb5 	bl	24838 <atomic_set_bit_to>
	atomic_set_bit_to(adv->flags, BT_ADV_USE_IDENTITY,
    acce:	6862      	ldr	r2, [r4, #4]
    acd0:	210b      	movs	r1, #11
    acd2:	f3c2 0280 	ubfx	r2, r2, #2, #1
    acd6:	4640      	mov	r0, r8
    acd8:	f019 fdae 	bl	24838 <atomic_set_bit_to>
	return 0;
    acdc:	f04f 0b00 	mov.w	fp, #0
    ace0:	e7c4      	b.n	ac6c <bt_le_adv_start_legacy+0x180>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn) {
    ace2:	9807      	ldr	r0, [sp, #28]
    ace4:	b108      	cbz	r0, acea <bt_le_adv_start_legacy+0x1fe>
		bt_conn_unref(conn);
    ace6:	f019 fff7 	bl	24cd8 <bt_conn_unref>
	atomic_set_bit_to(adv->flags, BT_ADV_PERSIST, !dir_adv &&
    acea:	2d00      	cmp	r5, #0
    acec:	d1d6      	bne.n	ac9c <bt_le_adv_start_legacy+0x1b0>
    acee:	e7d0      	b.n	ac92 <bt_le_adv_start_legacy+0x1a6>
		return -EAGAIN;
    acf0:	f06f 0b0a 	mvn.w	fp, #10
    acf4:	e7ba      	b.n	ac6c <bt_le_adv_start_legacy+0x180>
		return -EINVAL;
    acf6:	f06f 0b15 	mvn.w	fp, #21
    acfa:	e7b7      	b.n	ac6c <bt_le_adv_start_legacy+0x180>
		return -EALREADY;
    acfc:	f06f 0b44 	mvn.w	fp, #68	; 0x44
    ad00:	e7b4      	b.n	ac6c <bt_le_adv_start_legacy+0x180>
		return -ENOBUFS;
    ad02:	f06f 0b36 	mvn.w	fp, #54	; 0x36
    ad06:	e7b1      	b.n	ac6c <bt_le_adv_start_legacy+0x180>
    ad08:	4683      	mov	fp, r0
    ad0a:	e7af      	b.n	ac6c <bt_le_adv_start_legacy+0x180>
    ad0c:	2000009c 	.word	0x2000009c
    ad10:	20000008 	.word	0x20000008
    ad14:	000278c0 	.word	0x000278c0
    ad18:	00027978 	.word	0x00027978
    ad1c:	0002c8cd 	.word	0x0002c8cd

0000ad20 <bt_le_adv_start>:
}

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    ad20:	b513      	push	{r0, r1, r4, lr}

	if (IS_ENABLED(CONFIG_BT_EXT_ADV) &&
	    BT_FEAT_LE_EXT_ADV(bt_dev.le.features)) {
		err = bt_le_adv_start_ext(adv, param, ad, ad_len, sd, sd_len);
	} else {
		err = bt_le_adv_start_legacy(adv, param, ad, ad_len, sd, sd_len);
    ad22:	9c04      	ldr	r4, [sp, #16]
    ad24:	e9cd 3400 	strd	r3, r4, [sp]
    ad28:	4613      	mov	r3, r2
    ad2a:	460a      	mov	r2, r1
    ad2c:	4601      	mov	r1, r0
    ad2e:	4802      	ldr	r0, [pc, #8]	; (ad38 <bt_le_adv_start+0x18>)
    ad30:	f7ff fedc 	bl	aaec <bt_le_adv_start_legacy>
	if (err) {
		adv_delete_legacy();
	}

	return err;
}
    ad34:	b002      	add	sp, #8
    ad36:	bd10      	pop	{r4, pc}
    ad38:	20000020 	.word	0x20000020

0000ad3c <bt_le_adv_resume>:
	return 0;
}

#if defined(CONFIG_BT_PERIPHERAL)
void bt_le_adv_resume(void)
{
    ad3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ad3e:	4c1f      	ldr	r4, [pc, #124]	; (adbc <bt_le_adv_resume+0x80>)
    ad40:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ad44:	f019 fd4f 	bl	247e6 <atomic_get>
	if (!adv) {
		BT_DBG("No valid legacy adv");
		return;
	}

	if (!(atomic_test_bit(adv->flags, BT_ADV_PERSIST) &&
    ad48:	04c0      	lsls	r0, r0, #19
    ad4a:	d535      	bpl.n	adb8 <bt_le_adv_resume+0x7c>
    ad4c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ad50:	f019 fd49 	bl	247e6 <atomic_get>
    ad54:	0641      	lsls	r1, r0, #25
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
    ad56:	f3c0 1580 	ubfx	r5, r0, #6, #1
    ad5a:	d42d      	bmi.n	adb8 <bt_le_adv_resume+0x7c>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    ad5c:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ad60:	f019 fd41 	bl	247e6 <atomic_get>
	      !atomic_test_bit(adv->flags, BT_ADV_ENABLED))) {
		return;
	}

	if (!atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE)) {
    ad64:	05c2      	lsls	r2, r0, #23
    ad66:	d527      	bpl.n	adb8 <bt_le_adv_resume+0x7c>
		return;
	}

	err = le_adv_start_add_conn(adv, &conn);
    ad68:	a901      	add	r1, sp, #4
    ad6a:	f104 0018 	add.w	r0, r4, #24
    ad6e:	f7fe f867 	bl	8e40 <le_adv_start_add_conn>
	if (err) {
    ad72:	bb08      	cbnz	r0, adb8 <bt_le_adv_resume+0x7c>
    ad74:	f104 0028 	add.w	r0, r4, #40	; 0x28
    ad78:	f019 fd35 	bl	247e6 <atomic_get>
		return;
	}

	BT_DBG("Resuming connectable advertising");

	if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    ad7c:	0503      	lsls	r3, r0, #20
    ad7e:	d402      	bmi.n	ad86 <bt_le_adv_resume+0x4a>
		return le_set_private_addr(adv->id);
    ad80:	7e20      	ldrb	r0, [r4, #24]
    ad82:	f7fe fd23 	bl	97cc <le_set_private_addr>
	return set_le_adv_enable_legacy(adv, enable);
    ad86:	480e      	ldr	r0, [pc, #56]	; (adc0 <bt_le_adv_resume+0x84>)
    ad88:	2101      	movs	r1, #1
    ad8a:	f7fe fdb5 	bl	98f8 <set_le_adv_enable_legacy>
	    !atomic_test_bit(adv->flags, BT_ADV_USE_IDENTITY)) {
		le_adv_set_private_addr(adv);
	}

	err = set_le_adv_enable(adv, true);
	if (err) {
    ad8e:	b150      	cbz	r0, ada6 <bt_le_adv_resume+0x6a>
		BT_DBG("Controller cannot resume connectable advertising (%d)",
		       err);
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ad90:	9801      	ldr	r0, [sp, #4]
    ad92:	2100      	movs	r1, #0
    ad94:	f000 fcc6 	bl	b724 <bt_conn_set_state>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ad98:	480a      	ldr	r0, [pc, #40]	; (adc4 <bt_le_adv_resume+0x88>)
    ad9a:	f46f 5180 	mvn.w	r1, #4096	; 0x1000
    ad9e:	f019 fd13 	bl	247c8 <atomic_and>
	return (old & mask) != 0;
    ada2:	f3c0 3500 	ubfx	r5, r0, #12, #1
	}

	/* Since we don't give the application a reference to manage in
	 * this case, we need to release this reference here.
	 */
	bt_conn_unref(conn);
    ada6:	9801      	ldr	r0, [sp, #4]
    ada8:	f019 ff96 	bl	24cd8 <bt_conn_unref>
	if (persist_paused) {
    adac:	b125      	cbz	r5, adb8 <bt_le_adv_resume+0x7c>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    adae:	4805      	ldr	r0, [pc, #20]	; (adc4 <bt_le_adv_resume+0x88>)
    adb0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    adb4:	f019 fd26 	bl	24804 <atomic_or>
		atomic_set_bit(adv->flags, BT_ADV_PERSIST);
	}
}
    adb8:	b003      	add	sp, #12
    adba:	bd30      	pop	{r4, r5, pc}
    adbc:	20000008 	.word	0x20000008
    adc0:	20000020 	.word	0x20000020
    adc4:	20000030 	.word	0x20000030

0000adc8 <enh_conn_complete>:
{
    adc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    adcc:	f46f 4180 	mvn.w	r1, #16384	; 0x4000
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    add0:	f8b0 8001 	ldrh.w	r8, [r0, #1]
{
    add4:	b086      	sub	sp, #24
    add6:	4604      	mov	r4, r0
    add8:	4876      	ldr	r0, [pc, #472]	; (afb4 <enh_conn_complete+0x1ec>)
    adda:	f019 fcf5 	bl	247c8 <atomic_and>
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    adde:	0441      	lsls	r1, r0, #17
	uint16_t handle = sys_le16_to_cpu(evt->handle);
    ade0:	fa1f f788 	uxth.w	r7, r8
	if (atomic_test_and_clear_bit(bt_dev.flags, BT_DEV_ID_PENDING)) {
    ade4:	d504      	bpl.n	adf0 <enh_conn_complete+0x28>
			bt_keys_foreach(BT_KEYS_IRK, pending_id_update, NULL);
    ade6:	4974      	ldr	r1, [pc, #464]	; (afb8 <enh_conn_complete+0x1f0>)
    ade8:	2200      	movs	r2, #0
    adea:	2002      	movs	r0, #2
    adec:	f005 fac0 	bl	10370 <bt_keys_foreach>
	if (evt->status) {
    adf0:	7825      	ldrb	r5, [r4, #0]
    adf2:	b385      	cbz	r5, ae56 <enh_conn_complete+0x8e>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    adf4:	2d3c      	cmp	r5, #60	; 0x3c
    adf6:	d120      	bne.n	ae3a <enh_conn_complete+0x72>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    adf8:	f06f 0140 	mvn.w	r1, #64	; 0x40
    adfc:	486f      	ldr	r0, [pc, #444]	; (afbc <enh_conn_complete+0x1f4>)
    adfe:	f019 fce3 	bl	247c8 <atomic_and>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    ae02:	2000      	movs	r0, #0
    ae04:	f7fe f872 	bl	8eec <find_pending_connect.part.0>
		if (!conn) {
    ae08:	4604      	mov	r4, r0
    ae0a:	b960      	cbnz	r0, ae26 <enh_conn_complete+0x5e>
    ae0c:	4b6c      	ldr	r3, [pc, #432]	; (afc0 <enh_conn_complete+0x1f8>)
    ae0e:	496d      	ldr	r1, [pc, #436]	; (afc4 <enh_conn_complete+0x1fc>)
			BT_ERR("No pending slave connection");
    ae10:	486d      	ldr	r0, [pc, #436]	; (afc8 <enh_conn_complete+0x200>)
    ae12:	1ac9      	subs	r1, r1, r3
    ae14:	08c9      	lsrs	r1, r1, #3
    ae16:	0189      	lsls	r1, r1, #6
    ae18:	f041 0101 	orr.w	r1, r1, #1
}
    ae1c:	b006      	add	sp, #24
    ae1e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
			BT_ERR("No pending slave connection");
    ae22:	f017 bb15 	b.w	22450 <log_0>
		conn->err = BT_HCI_ERR_ADV_TIMEOUT;
    ae26:	7305      	strb	r5, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    ae28:	2100      	movs	r1, #0
    ae2a:	f000 fc7b 	bl	b724 <bt_conn_set_state>
		bt_conn_unref(conn);
    ae2e:	4620      	mov	r0, r4
}
    ae30:	b006      	add	sp, #24
    ae32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_conn_unref(conn);
    ae36:	f019 bf4f 	b.w	24cd8 <bt_conn_unref>
    ae3a:	4b61      	ldr	r3, [pc, #388]	; (afc0 <enh_conn_complete+0x1f8>)
    ae3c:	4a61      	ldr	r2, [pc, #388]	; (afc4 <enh_conn_complete+0x1fc>)
		BT_WARN("Unexpected status 0x%02x", evt->status);
    ae3e:	4863      	ldr	r0, [pc, #396]	; (afcc <enh_conn_complete+0x204>)
    ae40:	1ad2      	subs	r2, r2, r3
    ae42:	08d2      	lsrs	r2, r2, #3
    ae44:	0192      	lsls	r2, r2, #6
    ae46:	f042 0202 	orr.w	r2, r2, #2
    ae4a:	4629      	mov	r1, r5
}
    ae4c:	b006      	add	sp, #24
    ae4e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("Unexpected status 0x%02x", evt->status);
    ae52:	f017 bb0a 	b.w	2246a <log_1>
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ae56:	7923      	ldrb	r3, [r4, #4]
    ae58:	3b02      	subs	r3, #2
    ae5a:	2b01      	cmp	r3, #1
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ae5c:	f104 0604 	add.w	r6, r4, #4
	if (evt->peer_addr.type == BT_ADDR_LE_PUBLIC_ID ||
    ae60:	d839      	bhi.n	aed6 <enh_conn_complete+0x10e>
		bt_addr_le_copy(&id_addr, &evt->peer_addr);
    ae62:	4631      	mov	r1, r6
    ae64:	a804      	add	r0, sp, #16
    ae66:	f019 fcca 	bl	247fe <bt_addr_le_copy>
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ae6a:	f89d 3010 	ldrb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    ae6e:	f104 0111 	add.w	r1, r4, #17
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ae72:	3b02      	subs	r3, #2
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    ae74:	f10d 0009 	add.w	r0, sp, #9
		id_addr.type -= BT_ADDR_LE_PUBLIC_ID;
    ae78:	f88d 3010 	strb.w	r3, [sp, #16]
		bt_addr_copy(&peer_addr.a, &evt->peer_rpa);
    ae7c:	f019 fcbc 	bl	247f8 <bt_addr_copy>
		peer_addr.type = BT_ADDR_LE_RANDOM;
    ae80:	2301      	movs	r3, #1
    ae82:	f88d 3008 	strb.w	r3, [sp, #8]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && role == BT_HCI_ROLE_SLAVE) {
    ae86:	78e3      	ldrb	r3, [r4, #3]
    ae88:	2b01      	cmp	r3, #1
    ae8a:	d10c      	bne.n	aea6 <enh_conn_complete+0xde>
    ae8c:	a804      	add	r0, sp, #16
    ae8e:	f7fe f82d 	bl	8eec <find_pending_connect.part.0>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    ae92:	78e3      	ldrb	r3, [r4, #3]
    ae94:	2b01      	cmp	r3, #1
    ae96:	4605      	mov	r5, r0
    ae98:	d104      	bne.n	aea4 <enh_conn_complete+0xdc>
    ae9a:	4848      	ldr	r0, [pc, #288]	; (afbc <enh_conn_complete+0x1f4>)
    ae9c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    aea0:	f019 fc92 	bl	247c8 <atomic_and>
	if (!conn) {
    aea4:	bb55      	cbnz	r5, aefc <enh_conn_complete+0x134>
    aea6:	4a46      	ldr	r2, [pc, #280]	; (afc0 <enh_conn_complete+0x1f8>)
    aea8:	4c46      	ldr	r4, [pc, #280]	; (afc4 <enh_conn_complete+0x1fc>)
		BT_ERR("No pending conn for peer %s",
    aeaa:	4630      	mov	r0, r6
    aeac:	1aa4      	subs	r4, r4, r2
    aeae:	f7fd f96d 	bl	818c <bt_addr_le_str_real>
    aeb2:	f7fa fbd7 	bl	5664 <log_strdup>
    aeb6:	08e4      	lsrs	r4, r4, #3
    aeb8:	01a4      	lsls	r4, r4, #6
    aeba:	f044 0401 	orr.w	r4, r4, #1
    aebe:	4601      	mov	r1, r0
    aec0:	4622      	mov	r2, r4
    aec2:	4843      	ldr	r0, [pc, #268]	; (afd0 <enh_conn_complete+0x208>)
    aec4:	f017 fad1 	bl	2246a <log_1>
		bt_hci_disconnect(handle, BT_HCI_ERR_UNSPECIFIED);
    aec8:	211f      	movs	r1, #31
    aeca:	4638      	mov	r0, r7
    aecc:	f019 fd5f 	bl	2498e <bt_hci_disconnect>
}
    aed0:	b006      	add	sp, #24
    aed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		uint8_t id = evt->role == BT_HCI_ROLE_SLAVE ? bt_dev.adv_conn_id :
    aed6:	78e3      	ldrb	r3, [r4, #3]
    aed8:	2b01      	cmp	r3, #1
    aeda:	bf04      	itt	eq
    aedc:	4b3d      	ldreq	r3, [pc, #244]	; (afd4 <enh_conn_complete+0x20c>)
    aede:	f893 5033 	ldrbeq.w	r5, [r3, #51]	; 0x33
		bt_addr_le_copy(&id_addr,
    aee2:	4631      	mov	r1, r6
    aee4:	4628      	mov	r0, r5
    aee6:	f019 fd4a 	bl	2497e <bt_lookup_id_addr>
    aeea:	4601      	mov	r1, r0
    aeec:	a804      	add	r0, sp, #16
    aeee:	f019 fc86 	bl	247fe <bt_addr_le_copy>
		bt_addr_le_copy(&peer_addr, &evt->peer_addr);
    aef2:	4631      	mov	r1, r6
    aef4:	a802      	add	r0, sp, #8
    aef6:	f019 fc82 	bl	247fe <bt_addr_le_copy>
    aefa:	e7c4      	b.n	ae86 <enh_conn_complete+0xbe>
	conn->handle = handle;
    aefc:	4628      	mov	r0, r5
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    aefe:	a904      	add	r1, sp, #16
	conn->handle = handle;
    af00:	f820 8b88 	strh.w	r8, [r0], #136
	bt_addr_le_copy(&conn->le.dst, &id_addr);
    af04:	f019 fc7b 	bl	247fe <bt_addr_le_copy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    af08:	7e22      	ldrb	r2, [r4, #24]
    af0a:	7de3      	ldrb	r3, [r4, #23]
    af0c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    af10:	f8a5 309e 	strh.w	r3, [r5, #158]	; 0x9e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    af14:	7ea2      	ldrb	r2, [r4, #26]
    af16:	7e63      	ldrb	r3, [r4, #25]
    af18:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    af1c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    af20:	7ee3      	ldrb	r3, [r4, #27]
    af22:	7f22      	ldrb	r2, [r4, #28]
    af24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
    af28:	f8a5 30a6 	strh.w	r3, [r5, #166]	; 0xa6
	conn->role = evt->role;
    af2c:	78e7      	ldrb	r7, [r4, #3]
    af2e:	70ef      	strb	r7, [r5, #3]
	conn->err = 0U;
    af30:	2300      	movs	r3, #0
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    af32:	2f01      	cmp	r7, #1
	conn->err = 0U;
    af34:	732b      	strb	r3, [r5, #12]
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    af36:	d125      	bne.n	af84 <enh_conn_complete+0x1bc>
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    af38:	4e26      	ldr	r6, [pc, #152]	; (afd4 <enh_conn_complete+0x20c>)
		bt_addr_le_copy(&conn->le.init_addr, &peer_addr);
    af3a:	f105 008f 	add.w	r0, r5, #143	; 0x8f
    af3e:	a902      	add	r1, sp, #8
    af40:	f019 fc5d 	bl	247fe <bt_addr_le_copy>
    af44:	f106 0028 	add.w	r0, r6, #40	; 0x28
    af48:	f019 fc4d 	bl	247e6 <atomic_get>
			if (IS_ENABLED(CONFIG_BT_PRIVACY) &&
    af4c:	0502      	lsls	r2, r0, #20
    af4e:	f3c0 23c0 	ubfx	r3, r0, #11, #1
    af52:	d425      	bmi.n	afa0 <enh_conn_complete+0x1d8>
				if (bt_addr_cmp(&evt->local_rpa,
    af54:	340b      	adds	r4, #11
				conn->le.resp_addr.type = BT_ADDR_LE_RANDOM;
    af56:	f885 7096 	strb.w	r7, [r5, #150]	; 0x96
    af5a:	2206      	movs	r2, #6
    af5c:	4669      	mov	r1, sp
    af5e:	4620      	mov	r0, r4
						BT_ADDR_ANY) != 0) {
    af60:	9300      	str	r3, [sp, #0]
    af62:	f8ad 3004 	strh.w	r3, [sp, #4]
    af66:	f019 fa6e 	bl	24446 <memcmp>
    af6a:	4603      	mov	r3, r0
					bt_addr_copy(&conn->le.resp_addr.a,
    af6c:	f105 0097 	add.w	r0, r5, #151	; 0x97
				if (bt_addr_cmp(&evt->local_rpa,
    af70:	b19b      	cbz	r3, af9a <enh_conn_complete+0x1d2>
					bt_addr_copy(&conn->le.resp_addr.a,
    af72:	4621      	mov	r1, r4
					bt_addr_copy(&conn->le.resp_addr.a,
    af74:	f019 fc40 	bl	247f8 <bt_addr_copy>
		if (BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    af78:	f8d6 30a4 	ldr.w	r3, [r6, #164]	; 0xa4
    af7c:	065b      	lsls	r3, r3, #25
    af7e:	d501      	bpl.n	af84 <enh_conn_complete+0x1bc>
			bt_le_adv_resume();
    af80:	f7ff fedc 	bl	ad3c <bt_le_adv_resume>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    af84:	2107      	movs	r1, #7
    af86:	4628      	mov	r0, r5
    af88:	f000 fbcc 	bl	b724 <bt_conn_set_state>
	conn_auto_initiate(conn);
    af8c:	4628      	mov	r0, r5
    af8e:	f7fe fe85 	bl	9c9c <conn_auto_initiate>
	bt_conn_unref(conn);
    af92:	4628      	mov	r0, r5
    af94:	f019 fea0 	bl	24cd8 <bt_conn_unref>
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    af98:	e79a      	b.n	aed0 <enh_conn_complete+0x108>
					bt_addr_copy(&conn->le.resp_addr.a,
    af9a:	f106 012d 	add.w	r1, r6, #45	; 0x2d
    af9e:	e7e9      	b.n	af74 <enh_conn_complete+0x1ac>
						&bt_dev.id_addr[conn->id]);
    afa0:	7a29      	ldrb	r1, [r5, #8]
    afa2:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
				bt_addr_le_copy(&conn->le.resp_addr,
    afa6:	4431      	add	r1, r6
    afa8:	f105 0096 	add.w	r0, r5, #150	; 0x96
    afac:	f019 fc27 	bl	247fe <bt_addr_le_copy>
    afb0:	e7e2      	b.n	af78 <enh_conn_complete+0x1b0>
    afb2:	bf00      	nop
    afb4:	2000009c 	.word	0x2000009c
    afb8:	00024a8d 	.word	0x00024a8d
    afbc:	20000030 	.word	0x20000030
    afc0:	000278c0 	.word	0x000278c0
    afc4:	00027978 	.word	0x00027978
    afc8:	0002c8e8 	.word	0x0002c8e8
    afcc:	0002c904 	.word	0x0002c904
    afd0:	0002c91d 	.word	0x0002c91d
    afd4:	20000008 	.word	0x20000008

0000afd8 <le_legacy_conn_complete>:
{
    afd8:	b500      	push	{lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    afda:	6881      	ldr	r1, [r0, #8]
{
    afdc:	b08b      	sub	sp, #44	; 0x2c
	enh.status         = evt->status;
    afde:	780b      	ldrb	r3, [r1, #0]
    afe0:	f88d 3008 	strb.w	r3, [sp, #8]
	enh.handle         = evt->handle;
    afe4:	f8b1 3001 	ldrh.w	r3, [r1, #1]
    afe8:	f8ad 3009 	strh.w	r3, [sp, #9]
	enh.role           = evt->role;
    afec:	78cb      	ldrb	r3, [r1, #3]
    afee:	f88d 300b 	strb.w	r3, [sp, #11]
	enh.interval       = evt->interval;
    aff2:	f8b1 300b 	ldrh.w	r3, [r1, #11]
    aff6:	f8ad 301f 	strh.w	r3, [sp, #31]
	enh.latency        = evt->latency;
    affa:	f8b1 300d 	ldrh.w	r3, [r1, #13]
    affe:	f8ad 3021 	strh.w	r3, [sp, #33]	; 0x21
	enh.supv_timeout   = evt->supv_timeout;
    b002:	f8b1 300f 	ldrh.w	r3, [r1, #15]
    b006:	f8ad 3023 	strh.w	r3, [sp, #35]	; 0x23
	enh.clock_accuracy = evt->clock_accuracy;
    b00a:	7c4b      	ldrb	r3, [r1, #17]
    b00c:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
	bt_addr_le_copy(&enh.peer_addr, &evt->peer_addr);
    b010:	a803      	add	r0, sp, #12
    b012:	3104      	adds	r1, #4
    b014:	f019 fbf3 	bl	247fe <bt_addr_le_copy>
		bt_addr_copy(&enh.local_rpa, &bt_dev.random_addr.a);
    b018:	f10d 0013 	add.w	r0, sp, #19
    b01c:	4908      	ldr	r1, [pc, #32]	; (b040 <le_legacy_conn_complete+0x68>)
    b01e:	f019 fbeb 	bl	247f8 <bt_addr_copy>
	bt_addr_copy(&enh.peer_rpa, BT_ADDR_ANY);
    b022:	2300      	movs	r3, #0
    b024:	4669      	mov	r1, sp
    b026:	f10d 0019 	add.w	r0, sp, #25
    b02a:	9300      	str	r3, [sp, #0]
    b02c:	f8ad 3004 	strh.w	r3, [sp, #4]
    b030:	f019 fbe2 	bl	247f8 <bt_addr_copy>
	enh_conn_complete(&enh);
    b034:	a802      	add	r0, sp, #8
    b036:	f7ff fec7 	bl	adc8 <enh_conn_complete>
}
    b03a:	b00b      	add	sp, #44	; 0x2c
    b03c:	f85d fb04 	ldr.w	pc, [sp], #4
    b040:	20000035 	.word	0x20000035

0000b044 <bt_pub_key_gen>:
}
#endif /* CONFIG_BT_BREDR */

#if defined(CONFIG_BT_ECC)
int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    b044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!BT_CMD_TEST(bt_dev.supported_commands, 34, 1) ||
    b046:	4d21      	ldr	r5, [pc, #132]	; (b0cc <bt_pub_key_gen+0x88>)
    b048:	f895 3066 	ldrb.w	r3, [r5, #102]	; 0x66
    b04c:	f003 0306 	and.w	r3, r3, #6
    b050:	2b06      	cmp	r3, #6
    b052:	d00d      	beq.n	b070 <bt_pub_key_gen+0x2c>
    b054:	4b1e      	ldr	r3, [pc, #120]	; (b0d0 <bt_pub_key_gen+0x8c>)
    b056:	491f      	ldr	r1, [pc, #124]	; (b0d4 <bt_pub_key_gen+0x90>)
	    !BT_CMD_TEST(bt_dev.supported_commands, 34, 2)) {
		BT_WARN("ECC HCI commands not available");
    b058:	481f      	ldr	r0, [pc, #124]	; (b0d8 <bt_pub_key_gen+0x94>)
    b05a:	1ac9      	subs	r1, r1, r3
    b05c:	08c9      	lsrs	r1, r1, #3
    b05e:	0189      	lsls	r1, r1, #6
    b060:	f041 0102 	orr.w	r1, r1, #2
    b064:	f017 f9f4 	bl	22450 <log_0>
		return -ENOTSUP;
    b068:	f06f 0422 	mvn.w	r4, #34	; 0x22
		pub_key_cb = NULL;
		return err;
	}

	return 0;
}
    b06c:	4620      	mov	r0, r4
    b06e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	new_cb->_next = pub_key_cb;
    b070:	4e1a      	ldr	r6, [pc, #104]	; (b0dc <bt_pub_key_gen+0x98>)
    b072:	6833      	ldr	r3, [r6, #0]
    b074:	6043      	str	r3, [r0, #4]
	pub_key_cb = new_cb;
    b076:	6030      	str	r0, [r6, #0]
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b078:	2104      	movs	r1, #4
    b07a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    b07e:	f019 fbd0 	bl	24822 <atomic_test_and_set_bit>
    b082:	4607      	mov	r7, r0
    b084:	bb00      	cbnz	r0, b0c8 <bt_pub_key_gen+0x84>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b086:	f06f 0108 	mvn.w	r1, #8
    b08a:	f105 0094 	add.w	r0, r5, #148	; 0x94
    b08e:	f019 fb9b 	bl	247c8 <atomic_and>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    b092:	463a      	mov	r2, r7
    b094:	4639      	mov	r1, r7
    b096:	f242 0025 	movw	r0, #8229	; 0x2025
    b09a:	f7fe faef 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    b09e:	4604      	mov	r4, r0
    b0a0:	2800      	cmp	r0, #0
    b0a2:	d0e3      	beq.n	b06c <bt_pub_key_gen+0x28>
    b0a4:	4b0a      	ldr	r3, [pc, #40]	; (b0d0 <bt_pub_key_gen+0x8c>)
    b0a6:	490b      	ldr	r1, [pc, #44]	; (b0d4 <bt_pub_key_gen+0x90>)
		BT_ERR("Sending LE P256 Public Key command failed");
    b0a8:	480d      	ldr	r0, [pc, #52]	; (b0e0 <bt_pub_key_gen+0x9c>)
    b0aa:	1ac9      	subs	r1, r1, r3
    b0ac:	08c9      	lsrs	r1, r1, #3
    b0ae:	0189      	lsls	r1, r1, #6
    b0b0:	f041 0101 	orr.w	r1, r1, #1
    b0b4:	f017 f9cc 	bl	22450 <log_0>
    b0b8:	f06f 0110 	mvn.w	r1, #16
    b0bc:	f105 0094 	add.w	r0, r5, #148	; 0x94
    b0c0:	f019 fb82 	bl	247c8 <atomic_and>
		pub_key_cb = NULL;
    b0c4:	6037      	str	r7, [r6, #0]
		return err;
    b0c6:	e7d1      	b.n	b06c <bt_pub_key_gen+0x28>
		return 0;
    b0c8:	2400      	movs	r4, #0
    b0ca:	e7cf      	b.n	b06c <bt_pub_key_gen+0x28>
    b0cc:	20000008 	.word	0x20000008
    b0d0:	000278c0 	.word	0x000278c0
    b0d4:	00027978 	.word	0x00027978
    b0d8:	0002c939 	.word	0x0002c939
    b0dc:	2000d73c 	.word	0x2000d73c
    b0e0:	0002c958 	.word	0x0002c958

0000b0e4 <bt_pub_key_get>:

const uint8_t *bt_pub_key_get(void)
{
    b0e4:	b508      	push	{r3, lr}
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
    b0e6:	4804      	ldr	r0, [pc, #16]	; (b0f8 <bt_pub_key_get+0x14>)
    b0e8:	f019 fb7d 	bl	247e6 <atomic_get>
	if (atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
		return pub_key;
    b0ec:	f010 0f08 	tst.w	r0, #8
	}

	return NULL;
}
    b0f0:	4802      	ldr	r0, [pc, #8]	; (b0fc <bt_pub_key_get+0x18>)
    b0f2:	bf08      	it	eq
    b0f4:	2000      	moveq	r0, #0
    b0f6:	bd08      	pop	{r3, pc}
    b0f8:	2000009c 	.word	0x2000009c
    b0fc:	2000f2b3 	.word	0x2000f2b3

0000b100 <bt_dh_key_gen>:

int bt_dh_key_gen(const uint8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb == cb) {
    b102:	4d1c      	ldr	r5, [pc, #112]	; (b174 <bt_dh_key_gen+0x74>)
    b104:	682b      	ldr	r3, [r5, #0]
    b106:	428b      	cmp	r3, r1
{
    b108:	4606      	mov	r6, r0
	if (dh_key_cb == cb) {
    b10a:	d02d      	beq.n	b168 <bt_dh_key_gen+0x68>
		return -EALREADY;
	}

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b10c:	b113      	cbz	r3, b114 <bt_dh_key_gen+0x14>
		return -EBUSY;
    b10e:	f06f 000f 	mvn.w	r0, #15
		dh_key_cb = NULL;
		return err;
	}

	return 0;
}
    b112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b114:	4818      	ldr	r0, [pc, #96]	; (b178 <bt_dh_key_gen+0x78>)
    b116:	f019 fb66 	bl	247e6 <atomic_get>
	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    b11a:	06c2      	lsls	r2, r0, #27
    b11c:	f3c0 1700 	ubfx	r7, r0, #4, #1
    b120:	d4f5      	bmi.n	b10e <bt_dh_key_gen+0xe>
    b122:	4815      	ldr	r0, [pc, #84]	; (b178 <bt_dh_key_gen+0x78>)
    b124:	f019 fb5f 	bl	247e6 <atomic_get>
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    b128:	0703      	lsls	r3, r0, #28
    b12a:	d520      	bpl.n	b16e <bt_dh_key_gen+0x6e>
	dh_key_cb = cb;
    b12c:	6029      	str	r1, [r5, #0]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    b12e:	f242 0026 	movw	r0, #8230	; 0x2026
    b132:	2140      	movs	r1, #64	; 0x40
    b134:	f7fe f942 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
    b138:	4604      	mov	r4, r0
    b13a:	b918      	cbnz	r0, b144 <bt_dh_key_gen+0x44>
		dh_key_cb = NULL;
    b13c:	6028      	str	r0, [r5, #0]
		return -ENOBUFS;
    b13e:	f06f 0036 	mvn.w	r0, #54	; 0x36
    b142:	e7e6      	b.n	b112 <bt_dh_key_gen+0x12>
	return net_buf_simple_add(&buf->b, len);
    b144:	2140      	movs	r1, #64	; 0x40
    b146:	3008      	adds	r0, #8
    b148:	f01b f9e2 	bl	26510 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    b14c:	2240      	movs	r2, #64	; 0x40
    b14e:	4631      	mov	r1, r6
    b150:	f019 f98a 	bl	24468 <memcpy>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    b154:	463a      	mov	r2, r7
    b156:	4621      	mov	r1, r4
    b158:	f242 0026 	movw	r0, #8230	; 0x2026
    b15c:	f7fe fa8e 	bl	967c <bt_hci_cmd_send_sync>
	if (err) {
    b160:	2800      	cmp	r0, #0
    b162:	d0d6      	beq.n	b112 <bt_dh_key_gen+0x12>
		dh_key_cb = NULL;
    b164:	602f      	str	r7, [r5, #0]
		return err;
    b166:	e7d4      	b.n	b112 <bt_dh_key_gen+0x12>
		return -EALREADY;
    b168:	f06f 0044 	mvn.w	r0, #68	; 0x44
    b16c:	e7d1      	b.n	b112 <bt_dh_key_gen+0x12>
		return -EADDRNOTAVAIL;
    b16e:	f06f 0030 	mvn.w	r0, #48	; 0x30
    b172:	e7ce      	b.n	b112 <bt_dh_key_gen+0x12>
    b174:	2000d738 	.word	0x2000d738
    b178:	2000009c 	.word	0x2000009c

0000b17c <tx_free>:
	return bt_l2cap_update_conn_param(conn, param);
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    b17c:	2300      	movs	r3, #0
	tx->user_data = NULL;
    b17e:	e9c0 3301 	strd	r3, r3, [r0, #4]
{
    b182:	4601      	mov	r1, r0
	tx->pending_no_cb = 0U;
    b184:	60c3      	str	r3, [r0, #12]
	k_fifo_put(&free_tx, tx);
    b186:	4801      	ldr	r0, [pc, #4]	; (b18c <tx_free+0x10>)
    b188:	f01b be5d 	b.w	26e46 <k_queue_append>
    b18c:	2000a028 	.word	0x2000a028

0000b190 <notify_connected>:
{
    b190:	b538      	push	{r3, r4, r5, lr}
	for (cb = callback_list; cb; cb = cb->_next) {
    b192:	4b09      	ldr	r3, [pc, #36]	; (b1b8 <notify_connected+0x28>)
    b194:	681d      	ldr	r5, [r3, #0]
{
    b196:	4604      	mov	r4, r0
			cb->connected(conn, conn->err);
    b198:	7b21      	ldrb	r1, [r4, #12]
	for (cb = callback_list; cb; cb = cb->_next) {
    b19a:	b92d      	cbnz	r5, b1a8 <notify_connected+0x18>
	if (!conn->err) {
    b19c:	b951      	cbnz	r1, b1b4 <notify_connected+0x24>
		bt_gatt_connected(conn);
    b19e:	4620      	mov	r0, r4
}
    b1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		bt_gatt_connected(conn);
    b1a4:	f003 b8d4 	b.w	e350 <bt_gatt_connected>
		if (cb->connected) {
    b1a8:	682b      	ldr	r3, [r5, #0]
    b1aa:	b10b      	cbz	r3, b1b0 <notify_connected+0x20>
			cb->connected(conn, conn->err);
    b1ac:	4620      	mov	r0, r4
    b1ae:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b1b0:	69ad      	ldr	r5, [r5, #24]
    b1b2:	e7f1      	b.n	b198 <notify_connected+0x8>
}
    b1b4:	bd38      	pop	{r3, r4, r5, pc}
    b1b6:	bf00      	nop
    b1b8:	2000d748 	.word	0x2000d748

0000b1bc <send_frag>:
	return bt_send(buf);
}

static bool send_frag(struct bt_conn *conn, struct net_buf *buf, uint8_t flags,
		      bool always_consume)
{
    b1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn_tx *tx = tx_data(buf)->tx;
    b1c0:	694d      	ldr	r5, [r1, #20]
{
    b1c2:	4604      	mov	r4, r0
    b1c4:	460e      	mov	r6, r1
    b1c6:	4691      	mov	r9, r2
    b1c8:	461f      	mov	r7, r3
	return z_impl_k_sem_take(sem, timeout);
    b1ca:	f04f 33ff 	mov.w	r3, #4294967295
    b1ce:	4844      	ldr	r0, [pc, #272]	; (b2e0 <send_frag+0x124>)
    b1d0:	f04f 32ff 	mov.w	r2, #4294967295
    b1d4:	f015 f96c 	bl	204b0 <z_impl_k_sem_take>

	/* Wait until the controller can accept ACL packets */
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);

	/* Check for disconnection while waiting for pkts_sem */
	if (conn->state != BT_CONN_CONNECTED) {
    b1d8:	7b63      	ldrb	r3, [r4, #13]
    b1da:	2b07      	cmp	r3, #7
    b1dc:	d151      	bne.n	b282 <send_frag+0xc6>
	__asm__ volatile(
    b1de:	f04f 0320 	mov.w	r3, #32
    b1e2:	f3ef 8211 	mrs	r2, BASEPRI
    b1e6:	f383 8811 	msr	BASEPRI, r3
    b1ea:	f3bf 8f6f 	isb	sy
		goto fail;
	}

	/* Add to pending, it must be done before bt_buf_set_type */
	key = irq_lock();
	if (tx) {
    b1ee:	69a3      	ldr	r3, [r4, #24]
    b1f0:	2d00      	cmp	r5, #0
    b1f2:	d058      	beq.n	b2a6 <send_frag+0xea>
	parent->next = child;
    b1f4:	2100      	movs	r1, #0
    b1f6:	6029      	str	r1, [r5, #0]
Z_GENLIST_APPEND(slist, snode)
    b1f8:	2b00      	cmp	r3, #0
    b1fa:	d151      	bne.n	b2a0 <send_frag+0xe4>
	list->head = node;
    b1fc:	e9c4 5505 	strd	r5, r5, [r4, #20]
	__asm__ volatile(
    b200:	f382 8811 	msr	BASEPRI, r2
    b204:	f3bf 8f6f 	isb	sy
	return net_buf_simple_push(&buf->b, len);
    b208:	2104      	movs	r1, #4
    b20a:	f106 0008 	add.w	r0, r6, #8
    b20e:	f01b f996 	bl	2653e <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b212:	8823      	ldrh	r3, [r4, #0]
    b214:	f009 09fd 	and.w	r9, r9, #253	; 0xfd
    b218:	ea43 3909 	orr.w	r9, r3, r9, lsl #12
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b21c:	89b3      	ldrh	r3, [r6, #12]
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    b21e:	f8a0 9000 	strh.w	r9, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    b222:	3b04      	subs	r3, #4
    b224:	8043      	strh	r3, [r0, #2]
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
    b226:	2302      	movs	r3, #2
    b228:	7533      	strb	r3, [r6, #20]
	return bt_send(buf);
    b22a:	4630      	mov	r0, r6
    b22c:	f019 fc3e 	bl	24aac <bt_send>
		err = send_iso(conn, buf, flags);
	} else {
		err = send_acl(conn, buf, flags);
	}

	if (err) {
    b230:	4601      	mov	r1, r0
    b232:	2800      	cmp	r0, #0
    b234:	d051      	beq.n	b2da <send_frag+0x11e>
    b236:	4b2b      	ldr	r3, [pc, #172]	; (b2e4 <send_frag+0x128>)
    b238:	4a2b      	ldr	r2, [pc, #172]	; (b2e8 <send_frag+0x12c>)
		BT_ERR("Unable to send to driver (err %d)", err);
    b23a:	482c      	ldr	r0, [pc, #176]	; (b2ec <send_frag+0x130>)
    b23c:	1ad2      	subs	r2, r2, r3
    b23e:	08d2      	lsrs	r2, r2, #3
    b240:	0192      	lsls	r2, r2, #6
    b242:	f042 0201 	orr.w	r2, r2, #1
    b246:	f017 f910 	bl	2246a <log_1>
	__asm__ volatile(
    b24a:	f04f 0320 	mov.w	r3, #32
    b24e:	f3ef 8011 	mrs	r0, BASEPRI
    b252:	f383 8811 	msr	BASEPRI, r3
    b256:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		/* Roll back the pending TX info */
		if (tx) {
    b25a:	2d00      	cmp	r5, #0
    b25c:	d037      	beq.n	b2ce <send_frag+0x112>
	return list->head;
    b25e:	6963      	ldr	r3, [r4, #20]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node);

Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b260:	2200      	movs	r2, #0
    b262:	b153      	cbz	r3, b27a <send_frag+0xbe>
    b264:	429d      	cmp	r5, r3
    b266:	d12f      	bne.n	b2c8 <send_frag+0x10c>
	return node->next;
    b268:	682b      	ldr	r3, [r5, #0]
	return list->tail;
    b26a:	69a1      	ldr	r1, [r4, #24]
Z_GENLIST_REMOVE(slist, snode)
    b26c:	bb3a      	cbnz	r2, b2be <send_frag+0x102>
    b26e:	428d      	cmp	r5, r1
	list->head = node;
    b270:	6163      	str	r3, [r4, #20]
Z_GENLIST_REMOVE(slist, snode)
    b272:	d100      	bne.n	b276 <send_frag+0xba>
	list->tail = node;
    b274:	61a3      	str	r3, [r4, #24]
	parent->next = child;
    b276:	2300      	movs	r3, #0
    b278:	602b      	str	r3, [r5, #0]
	__asm__ volatile(
    b27a:	f380 8811 	msr	BASEPRI, r0
    b27e:	f3bf 8f6f 	isb	sy
	z_impl_k_sem_give(sem);
    b282:	4817      	ldr	r0, [pc, #92]	; (b2e0 <send_frag+0x124>)
    b284:	f015 f8ee 	bl	20464 <z_impl_k_sem_give>

	return true;

fail:
	k_sem_give(bt_conn_get_pkts(conn));
	if (tx) {
    b288:	b115      	cbz	r5, b290 <send_frag+0xd4>
		tx_free(tx);
    b28a:	4628      	mov	r0, r5
    b28c:	f7ff ff76 	bl	b17c <tx_free>
	}

	if (always_consume) {
    b290:	b11f      	cbz	r7, b29a <send_frag+0xde>
		net_buf_unref(buf);
    b292:	4630      	mov	r0, r6
    b294:	f012 fa0a 	bl	1d6ac <net_buf_unref>
	}
	return false;
    b298:	2700      	movs	r7, #0
}
    b29a:	4638      	mov	r0, r7
    b29c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    b2a0:	601d      	str	r5, [r3, #0]
	list->tail = node;
    b2a2:	61a5      	str	r5, [r4, #24]
}
    b2a4:	e7ac      	b.n	b200 <send_frag+0x44>
		if (tail_tx) {
    b2a6:	b133      	cbz	r3, b2b6 <send_frag+0xfa>
			pending_no_cb = &tail_tx->pending_no_cb;
    b2a8:	f103 080c 	add.w	r8, r3, #12
    b2ac:	68db      	ldr	r3, [r3, #12]
		(*pending_no_cb)++;
    b2ae:	3301      	adds	r3, #1
    b2b0:	f8c8 3000 	str.w	r3, [r8]
    b2b4:	e7a4      	b.n	b200 <send_frag+0x44>
			pending_no_cb = &conn->pending_no_cb;
    b2b6:	69e3      	ldr	r3, [r4, #28]
    b2b8:	f104 081c 	add.w	r8, r4, #28
    b2bc:	e7f7      	b.n	b2ae <send_frag+0xf2>
Z_GENLIST_REMOVE(slist, snode)
    b2be:	428d      	cmp	r5, r1
	parent->next = child;
    b2c0:	6013      	str	r3, [r2, #0]
	list->tail = node;
    b2c2:	bf08      	it	eq
    b2c4:	61a2      	streq	r2, [r4, #24]
}
    b2c6:	e7d6      	b.n	b276 <send_frag+0xba>
	return node->next;
    b2c8:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
    b2ca:	681b      	ldr	r3, [r3, #0]
    b2cc:	e7c9      	b.n	b262 <send_frag+0xa6>
			(*pending_no_cb)--;
    b2ce:	f8d8 3000 	ldr.w	r3, [r8]
    b2d2:	3b01      	subs	r3, #1
    b2d4:	f8c8 3000 	str.w	r3, [r8]
    b2d8:	e7cf      	b.n	b27a <send_frag+0xbe>
	return true;
    b2da:	2701      	movs	r7, #1
    b2dc:	e7dd      	b.n	b29a <send_frag+0xde>
    b2de:	bf00      	nop
    b2e0:	200000d0 	.word	0x200000d0
    b2e4:	000278c0 	.word	0x000278c0
    b2e8:	000278d0 	.word	0x000278d0
    b2ec:	0002c245 	.word	0x0002c245

0000b2f0 <bt_conn_get_pkts>:
}
    b2f0:	4800      	ldr	r0, [pc, #0]	; (b2f4 <bt_conn_get_pkts+0x4>)
    b2f2:	4770      	bx	lr
    b2f4:	200000d0 	.word	0x200000d0

0000b2f8 <notify_le_param_updated>:
{
    b2f8:	b570      	push	{r4, r5, r6, lr}
    b2fa:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b2fc:	f3bf 8f5b 	dmb	ish
    b300:	6863      	ldr	r3, [r4, #4]
    b302:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    b306:	059b      	lsls	r3, r3, #22
    b308:	f100 0004 	add.w	r0, r0, #4
    b30c:	d511      	bpl.n	b332 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    b30e:	f8b4 309e 	ldrh.w	r3, [r4, #158]	; 0x9e
	if (atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_SET) &&
    b312:	f8b4 20a0 	ldrh.w	r2, [r4, #160]	; 0xa0
    b316:	429a      	cmp	r2, r3
    b318:	d80b      	bhi.n	b332 <notify_le_param_updated+0x3a>
	    conn->le.interval >= conn->le.interval_min &&
    b31a:	f8b4 20a2 	ldrh.w	r2, [r4, #162]	; 0xa2
    b31e:	429a      	cmp	r2, r3
    b320:	d307      	bcc.n	b332 <notify_le_param_updated+0x3a>
	    conn->le.latency == conn->le.pending_latency &&
    b322:	e9d4 2329 	ldrd	r2, r3, [r4, #164]	; 0xa4
    b326:	429a      	cmp	r2, r3
    b328:	d103      	bne.n	b332 <notify_le_param_updated+0x3a>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b32a:	f46f 7100 	mvn.w	r1, #512	; 0x200
    b32e:	f019 fc02 	bl	24b36 <atomic_and>
	for (cb = callback_list; cb; cb = cb->_next) {
    b332:	4b08      	ldr	r3, [pc, #32]	; (b354 <notify_le_param_updated+0x5c>)
    b334:	681d      	ldr	r5, [r3, #0]
    b336:	b905      	cbnz	r5, b33a <notify_le_param_updated+0x42>
}
    b338:	bd70      	pop	{r4, r5, r6, pc}
		if (cb->le_param_updated) {
    b33a:	68ee      	ldr	r6, [r5, #12]
    b33c:	b13e      	cbz	r6, b34e <notify_le_param_updated+0x56>
			cb->le_param_updated(conn, conn->le.interval,
    b33e:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
    b342:	f8b4 20a4 	ldrh.w	r2, [r4, #164]	; 0xa4
    b346:	f8b4 109e 	ldrh.w	r1, [r4, #158]	; 0x9e
    b34a:	4620      	mov	r0, r4
    b34c:	47b0      	blx	r6
	for (cb = callback_list; cb; cb = cb->_next) {
    b34e:	69ad      	ldr	r5, [r5, #24]
    b350:	e7f1      	b.n	b336 <notify_le_param_updated+0x3e>
    b352:	bf00      	nop
    b354:	2000d748 	.word	0x2000d748

0000b358 <le_param_req>:
{
    b358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b35a:	4607      	mov	r7, r0
	if (!bt_le_conn_params_valid(param)) {
    b35c:	4608      	mov	r0, r1
{
    b35e:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b360:	f019 fb73 	bl	24a4a <bt_le_conn_params_valid>
    b364:	4604      	mov	r4, r0
    b366:	b910      	cbnz	r0, b36e <le_param_req+0x16>
		return false;
    b368:	2400      	movs	r4, #0
}
    b36a:	4620      	mov	r0, r4
    b36c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	for (cb = callback_list; cb; cb = cb->_next) {
    b36e:	4b09      	ldr	r3, [pc, #36]	; (b394 <le_param_req+0x3c>)
    b370:	681e      	ldr	r6, [r3, #0]
    b372:	2e00      	cmp	r6, #0
    b374:	d0f9      	beq.n	b36a <le_param_req+0x12>
		if (!cb->le_param_req) {
    b376:	68b3      	ldr	r3, [r6, #8]
    b378:	b90b      	cbnz	r3, b37e <le_param_req+0x26>
	for (cb = callback_list; cb; cb = cb->_next) {
    b37a:	69b6      	ldr	r6, [r6, #24]
    b37c:	e7f9      	b.n	b372 <le_param_req+0x1a>
		if (!cb->le_param_req(conn, param)) {
    b37e:	4629      	mov	r1, r5
    b380:	4638      	mov	r0, r7
    b382:	4798      	blx	r3
    b384:	2800      	cmp	r0, #0
    b386:	d0ef      	beq.n	b368 <le_param_req+0x10>
		if (!bt_le_conn_params_valid(param)) {
    b388:	4628      	mov	r0, r5
    b38a:	f019 fb5e 	bl	24a4a <bt_le_conn_params_valid>
    b38e:	2800      	cmp	r0, #0
    b390:	d1f3      	bne.n	b37a <le_param_req+0x22>
    b392:	e7e9      	b.n	b368 <le_param_req+0x10>
    b394:	2000d748 	.word	0x2000d748

0000b398 <bt_conn_identity_resolved>:
{
    b398:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (conn->role == BT_HCI_ROLE_MASTER) {
    b39a:	78c3      	ldrb	r3, [r0, #3]
{
    b39c:	4604      	mov	r4, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    b39e:	b93b      	cbnz	r3, b3b0 <bt_conn_identity_resolved+0x18>
		rpa = &conn->le.resp_addr;
    b3a0:	f100 0696 	add.w	r6, r0, #150	; 0x96
	for (cb = callback_list; cb; cb = cb->_next) {
    b3a4:	4b08      	ldr	r3, [pc, #32]	; (b3c8 <bt_conn_identity_resolved+0x30>)
    b3a6:	681d      	ldr	r5, [r3, #0]
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    b3a8:	f104 0788 	add.w	r7, r4, #136	; 0x88
	for (cb = callback_list; cb; cb = cb->_next) {
    b3ac:	b91d      	cbnz	r5, b3b6 <bt_conn_identity_resolved+0x1e>
}
    b3ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rpa = &conn->le.init_addr;
    b3b0:	f100 068f 	add.w	r6, r0, #143	; 0x8f
    b3b4:	e7f6      	b.n	b3a4 <bt_conn_identity_resolved+0xc>
		if (cb->identity_resolved) {
    b3b6:	692b      	ldr	r3, [r5, #16]
    b3b8:	b11b      	cbz	r3, b3c2 <bt_conn_identity_resolved+0x2a>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    b3ba:	463a      	mov	r2, r7
    b3bc:	4631      	mov	r1, r6
    b3be:	4620      	mov	r0, r4
    b3c0:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b3c2:	69ad      	ldr	r5, [r5, #24]
    b3c4:	e7f2      	b.n	b3ac <bt_conn_identity_resolved+0x14>
    b3c6:	bf00      	nop
    b3c8:	2000d748 	.word	0x2000d748

0000b3cc <bt_conn_security_changed>:
{
    b3cc:	b570      	push	{r4, r5, r6, lr}
	conn->required_sec_level = conn->sec_level;
    b3ce:	7a43      	ldrb	r3, [r0, #9]
    b3d0:	7283      	strb	r3, [r0, #10]
{
    b3d2:	4604      	mov	r4, r0
    b3d4:	4615      	mov	r5, r2
	bt_l2cap_security_changed(conn, hci_err);
    b3d6:	f019 fd51 	bl	24e7c <bt_l2cap_security_changed>
	for (cb = callback_list; cb; cb = cb->_next) {
    b3da:	4b0d      	ldr	r3, [pc, #52]	; (b410 <bt_conn_security_changed+0x44>)
    b3dc:	681e      	ldr	r6, [r3, #0]
    b3de:	b96e      	cbnz	r6, b3fc <bt_conn_security_changed+0x30>
	if (!err && conn->sec_level >= BT_SECURITY_L2) {
    b3e0:	b9a5      	cbnz	r5, b40c <bt_conn_security_changed+0x40>
    b3e2:	7a63      	ldrb	r3, [r4, #9]
    b3e4:	2b01      	cmp	r3, #1
    b3e6:	d911      	bls.n	b40c <bt_conn_security_changed+0x40>
		if (conn->type == BT_CONN_TYPE_LE) {
    b3e8:	78a3      	ldrb	r3, [r4, #2]
    b3ea:	2b01      	cmp	r3, #1
    b3ec:	d10e      	bne.n	b40c <bt_conn_security_changed+0x40>
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    b3ee:	7a20      	ldrb	r0, [r4, #8]
    b3f0:	f104 0188 	add.w	r1, r4, #136	; 0x88
}
    b3f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_keys_update_usage(conn->id, bt_conn_get_dst(conn));
    b3f8:	f005 b94a 	b.w	10690 <bt_keys_update_usage>
		if (cb->security_changed) {
    b3fc:	6973      	ldr	r3, [r6, #20]
    b3fe:	b11b      	cbz	r3, b408 <bt_conn_security_changed+0x3c>
			cb->security_changed(conn, conn->sec_level, err);
    b400:	7a61      	ldrb	r1, [r4, #9]
    b402:	462a      	mov	r2, r5
    b404:	4620      	mov	r0, r4
    b406:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    b408:	69b6      	ldr	r6, [r6, #24]
    b40a:	e7e8      	b.n	b3de <bt_conn_security_changed+0x12>
}
    b40c:	bd70      	pop	{r4, r5, r6, pc}
    b40e:	bf00      	nop
    b410:	2000d748 	.word	0x2000d748

0000b414 <bt_conn_cb_register>:
	cb->_next = callback_list;
    b414:	4b02      	ldr	r3, [pc, #8]	; (b420 <bt_conn_cb_register+0xc>)
    b416:	681a      	ldr	r2, [r3, #0]
    b418:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    b41a:	6018      	str	r0, [r3, #0]
}
    b41c:	4770      	bx	lr
    b41e:	bf00      	nop
    b420:	2000d748 	.word	0x2000d748

0000b424 <conn_cleanup>:

static struct k_poll_signal conn_change =
		K_POLL_SIGNAL_INITIALIZER(conn_change);

static void conn_cleanup(struct bt_conn *conn)
{
    b424:	b570      	push	{r4, r5, r6, lr}
    b426:	4604      	mov	r4, r0
	struct net_buf *buf;

	/* Give back any allocated buffers */
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    b428:	f100 0634 	add.w	r6, r0, #52	; 0x34
    b42c:	2200      	movs	r2, #0
    b42e:	2300      	movs	r3, #0
    b430:	4630      	mov	r0, r6
    b432:	f01b f81c 	bl	2646e <net_buf_get>
    b436:	4605      	mov	r5, r0
    b438:	b958      	cbnz	r0, b452 <conn_cleanup+0x2e>
	}

	__ASSERT(sys_slist_is_empty(&conn->tx_pending), "Pending TX packets");
	__ASSERT_NO_MSG(conn->pending_no_cb == 0);

	bt_conn_reset_rx_state(conn);
    b43a:	4620      	mov	r0, r4
    b43c:	f019 fc08 	bl	24c50 <bt_conn_reset_rx_state>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b440:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b444:	4807      	ldr	r0, [pc, #28]	; (b464 <conn_cleanup+0x40>)

	k_delayed_work_submit(&conn->deferred_work, K_NO_WAIT);
}
    b446:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b44a:	2200      	movs	r2, #0
    b44c:	2300      	movs	r3, #0
    b44e:	f015 b963 	b.w	20718 <k_delayed_work_submit_to_queue>
		if (tx_data(buf)->tx) {
    b452:	6968      	ldr	r0, [r5, #20]
    b454:	b108      	cbz	r0, b45a <conn_cleanup+0x36>
			tx_free(tx_data(buf)->tx);
    b456:	f7ff fe91 	bl	b17c <tx_free>
		net_buf_unref(buf);
    b45a:	4628      	mov	r0, r5
    b45c:	f012 f926 	bl	1d6ac <net_buf_unref>
    b460:	e7e4      	b.n	b42c <conn_cleanup+0x8>
    b462:	bf00      	nop
    b464:	2000aca8 	.word	0x2000aca8

0000b468 <bt_conn_recv>:
{
    b468:	b570      	push	{r4, r5, r6, lr}
    b46a:	4616      	mov	r6, r2
    b46c:	4604      	mov	r4, r0
    b46e:	460d      	mov	r5, r1
	tx_notify(conn);
    b470:	f019 fb70 	bl	24b54 <tx_notify>
	switch (flags) {
    b474:	2e01      	cmp	r6, #1
    b476:	d02b      	beq.n	b4d0 <bt_conn_recv+0x68>
    b478:	2e02      	cmp	r6, #2
    b47a:	d158      	bne.n	b52e <bt_conn_recv+0xc6>
		if (conn->rx) {
    b47c:	6923      	ldr	r3, [r4, #16]
    b47e:	b163      	cbz	r3, b49a <bt_conn_recv+0x32>
    b480:	4b35      	ldr	r3, [pc, #212]	; (b558 <bt_conn_recv+0xf0>)
    b482:	4936      	ldr	r1, [pc, #216]	; (b55c <bt_conn_recv+0xf4>)
			BT_ERR("Unexpected first L2CAP frame");
    b484:	4836      	ldr	r0, [pc, #216]	; (b560 <bt_conn_recv+0xf8>)
    b486:	1ac9      	subs	r1, r1, r3
    b488:	08c9      	lsrs	r1, r1, #3
    b48a:	0189      	lsls	r1, r1, #6
    b48c:	f041 0101 	orr.w	r1, r1, #1
    b490:	f016 ffde 	bl	22450 <log_0>
			bt_conn_reset_rx_state(conn);
    b494:	4620      	mov	r0, r4
    b496:	f019 fbdb 	bl	24c50 <bt_conn_reset_rx_state>
		conn->rx = buf;
    b49a:	6125      	str	r5, [r4, #16]
	if (conn->rx->len < sizeof(uint16_t)) {
    b49c:	6923      	ldr	r3, [r4, #16]
    b49e:	8999      	ldrh	r1, [r3, #12]
    b4a0:	2901      	cmp	r1, #1
    b4a2:	d958      	bls.n	b556 <bt_conn_recv+0xee>
	acl_total_len = sys_get_le16(conn->rx->data) + sizeof(struct bt_l2cap_hdr);
    b4a4:	689a      	ldr	r2, [r3, #8]
    b4a6:	8812      	ldrh	r2, [r2, #0]
    b4a8:	3204      	adds	r2, #4
    b4aa:	b292      	uxth	r2, r2
	if (conn->rx->len < acl_total_len) {
    b4ac:	428a      	cmp	r2, r1
    b4ae:	d852      	bhi.n	b556 <bt_conn_recv+0xee>
	if (conn->rx->len > acl_total_len) {
    b4b0:	d249      	bcs.n	b546 <bt_conn_recv+0xde>
    b4b2:	4829      	ldr	r0, [pc, #164]	; (b558 <bt_conn_recv+0xf0>)
    b4b4:	4b29      	ldr	r3, [pc, #164]	; (b55c <bt_conn_recv+0xf4>)
    b4b6:	1a1b      	subs	r3, r3, r0
    b4b8:	08db      	lsrs	r3, r3, #3
		BT_ERR("ACL len mismatch (%u > %u)",
    b4ba:	019b      	lsls	r3, r3, #6
    b4bc:	4829      	ldr	r0, [pc, #164]	; (b564 <bt_conn_recv+0xfc>)
    b4be:	f043 0301 	orr.w	r3, r3, #1
    b4c2:	f016 ffe6 	bl	22492 <log_2>
		bt_conn_reset_rx_state(conn);
    b4c6:	4620      	mov	r0, r4
}
    b4c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_reset_rx_state(conn);
    b4cc:	f019 bbc0 	b.w	24c50 <bt_conn_reset_rx_state>
		if (!conn->rx) {
    b4d0:	6920      	ldr	r0, [r4, #16]
    b4d2:	b968      	cbnz	r0, b4f0 <bt_conn_recv+0x88>
    b4d4:	4921      	ldr	r1, [pc, #132]	; (b55c <bt_conn_recv+0xf4>)
    b4d6:	4b20      	ldr	r3, [pc, #128]	; (b558 <bt_conn_recv+0xf0>)
			BT_ERR("Unexpected L2CAP continuation");
    b4d8:	4823      	ldr	r0, [pc, #140]	; (b568 <bt_conn_recv+0x100>)
    b4da:	1ac9      	subs	r1, r1, r3
    b4dc:	08c9      	lsrs	r1, r1, #3
    b4de:	0189      	lsls	r1, r1, #6
    b4e0:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Not enough buffer space for L2CAP data");
    b4e4:	f016 ffb4 	bl	22450 <log_0>
			bt_conn_reset_rx_state(conn);
    b4e8:	4620      	mov	r0, r4
    b4ea:	f019 fbb1 	bl	24c50 <bt_conn_reset_rx_state>
    b4ee:	e001      	b.n	b4f4 <bt_conn_recv+0x8c>
		if (!buf->len) {
    b4f0:	89ae      	ldrh	r6, [r5, #12]
    b4f2:	b926      	cbnz	r6, b4fe <bt_conn_recv+0x96>
			net_buf_unref(buf);
    b4f4:	4628      	mov	r0, r5
}
    b4f6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			net_buf_unref(buf);
    b4fa:	f012 b8d7 	b.w	1d6ac <net_buf_unref>
 *
 * @return Number of bytes available at the end of the buffer.
 */
static inline size_t net_buf_tailroom(struct net_buf *buf)
{
	return net_buf_simple_tailroom(&buf->b);
    b4fe:	3008      	adds	r0, #8
    b500:	f01b f841 	bl	26586 <net_buf_simple_tailroom>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    b504:	4286      	cmp	r6, r0
    b506:	d908      	bls.n	b51a <bt_conn_recv+0xb2>
    b508:	4914      	ldr	r1, [pc, #80]	; (b55c <bt_conn_recv+0xf4>)
    b50a:	4b13      	ldr	r3, [pc, #76]	; (b558 <bt_conn_recv+0xf0>)
			BT_ERR("Not enough buffer space for L2CAP data");
    b50c:	4817      	ldr	r0, [pc, #92]	; (b56c <bt_conn_recv+0x104>)
    b50e:	1ac9      	subs	r1, r1, r3
    b510:	08c9      	lsrs	r1, r1, #3
    b512:	0189      	lsls	r1, r1, #6
    b514:	f041 0101 	orr.w	r1, r1, #1
    b518:	e7e4      	b.n	b4e4 <bt_conn_recv+0x7c>
	return net_buf_simple_add_mem(&buf->b, mem, len);
    b51a:	6920      	ldr	r0, [r4, #16]
    b51c:	89aa      	ldrh	r2, [r5, #12]
    b51e:	68a9      	ldr	r1, [r5, #8]
    b520:	3008      	adds	r0, #8
    b522:	f01a fffb 	bl	2651c <net_buf_simple_add_mem>
		net_buf_unref(buf);
    b526:	4628      	mov	r0, r5
    b528:	f012 f8c0 	bl	1d6ac <net_buf_unref>
		break;
    b52c:	e7b6      	b.n	b49c <bt_conn_recv+0x34>
    b52e:	4a0a      	ldr	r2, [pc, #40]	; (b558 <bt_conn_recv+0xf0>)
    b530:	4b0a      	ldr	r3, [pc, #40]	; (b55c <bt_conn_recv+0xf4>)
		BT_ERR("Unexpected ACL flags (0x%02x)", flags);
    b532:	480f      	ldr	r0, [pc, #60]	; (b570 <bt_conn_recv+0x108>)
    b534:	1a9b      	subs	r3, r3, r2
    b536:	08db      	lsrs	r3, r3, #3
    b538:	019b      	lsls	r3, r3, #6
    b53a:	f043 0201 	orr.w	r2, r3, #1
    b53e:	4631      	mov	r1, r6
    b540:	f016 ff93 	bl	2246a <log_1>
		bt_conn_reset_rx_state(conn);
    b544:	e7d0      	b.n	b4e8 <bt_conn_recv+0x80>
	conn->rx = NULL;
    b546:	2200      	movs	r2, #0
    b548:	6122      	str	r2, [r4, #16]
	bt_l2cap_recv(conn, buf);
    b54a:	4620      	mov	r0, r4
    b54c:	4619      	mov	r1, r3
}
    b54e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	bt_l2cap_recv(conn, buf);
    b552:	f000 bcff 	b.w	bf54 <bt_l2cap_recv>
}
    b556:	bd70      	pop	{r4, r5, r6, pc}
    b558:	000278c0 	.word	0x000278c0
    b55c:	000278d0 	.word	0x000278d0
    b560:	0002c9ac 	.word	0x0002c9ac
    b564:	0002ca2c 	.word	0x0002ca2c
    b568:	0002c9c9 	.word	0x0002c9c9
    b56c:	0002c9e7 	.word	0x0002c9e7
    b570:	0002ca0e 	.word	0x0002ca0e

0000b574 <bt_conn_send_cb>:
{
    b574:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b578:	4698      	mov	r8, r3
	if (conn->state != BT_CONN_CONNECTED) {
    b57a:	7b43      	ldrb	r3, [r0, #13]
    b57c:	2b07      	cmp	r3, #7
{
    b57e:	4606      	mov	r6, r0
    b580:	460d      	mov	r5, r1
    b582:	4617      	mov	r7, r2
	if (conn->state != BT_CONN_CONNECTED) {
    b584:	d00f      	beq.n	b5a6 <bt_conn_send_cb+0x32>
    b586:	4b2a      	ldr	r3, [pc, #168]	; (b630 <bt_conn_send_cb+0xbc>)
    b588:	492a      	ldr	r1, [pc, #168]	; (b634 <bt_conn_send_cb+0xc0>)
		BT_ERR("not connected!");
    b58a:	482b      	ldr	r0, [pc, #172]	; (b638 <bt_conn_send_cb+0xc4>)
    b58c:	1ac9      	subs	r1, r1, r3
    b58e:	08c9      	lsrs	r1, r1, #3
    b590:	0189      	lsls	r1, r1, #6
    b592:	f041 0101 	orr.w	r1, r1, #1
    b596:	f016 ff5b 	bl	22450 <log_0>
		net_buf_unref(buf);
    b59a:	4628      	mov	r0, r5
    b59c:	f012 f886 	bl	1d6ac <net_buf_unref>
			return -ENOTCONN;
    b5a0:	f06f 0038 	mvn.w	r0, #56	; 0x38
    b5a4:	e020      	b.n	b5e8 <bt_conn_send_cb+0x74>
	if (cb) {
    b5a6:	2a00      	cmp	r2, #0
    b5a8:	d040      	beq.n	b62c <bt_conn_send_cb+0xb8>
	return z_impl_k_current_get();
    b5aa:	f014 ff55 	bl	20458 <z_impl_k_current_get>
	if (k_current_get() == &k_sys_work_q.thread) {
    b5ae:	4b23      	ldr	r3, [pc, #140]	; (b63c <bt_conn_send_cb+0xc8>)
    b5b0:	4283      	cmp	r3, r0
	return z_impl_k_queue_get(queue, timeout);
    b5b2:	4823      	ldr	r0, [pc, #140]	; (b640 <bt_conn_send_cb+0xcc>)
    b5b4:	bf07      	ittee	eq
    b5b6:	2200      	moveq	r2, #0
    b5b8:	2300      	moveq	r3, #0
    b5ba:	f04f 32ff 	movne.w	r2, #4294967295
    b5be:	f04f 33ff 	movne.w	r3, #4294967295
    b5c2:	f014 fb93 	bl	1fcec <z_impl_k_queue_get>
    b5c6:	4604      	mov	r4, r0
		if (!tx) {
    b5c8:	b980      	cbnz	r0, b5ec <bt_conn_send_cb+0x78>
    b5ca:	4b19      	ldr	r3, [pc, #100]	; (b630 <bt_conn_send_cb+0xbc>)
    b5cc:	4919      	ldr	r1, [pc, #100]	; (b634 <bt_conn_send_cb+0xc0>)
			BT_ERR("Unable to allocate TX context");
    b5ce:	481d      	ldr	r0, [pc, #116]	; (b644 <bt_conn_send_cb+0xd0>)
    b5d0:	1ac9      	subs	r1, r1, r3
    b5d2:	08c9      	lsrs	r1, r1, #3
    b5d4:	0189      	lsls	r1, r1, #6
    b5d6:	f041 0101 	orr.w	r1, r1, #1
    b5da:	f016 ff39 	bl	22450 <log_0>
			net_buf_unref(buf);
    b5de:	4628      	mov	r0, r5
    b5e0:	f012 f864 	bl	1d6ac <net_buf_unref>
			return -ENOBUFS;
    b5e4:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
    b5e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (conn->state != BT_CONN_CONNECTED) {
    b5ec:	7b73      	ldrb	r3, [r6, #13]
    b5ee:	2b07      	cmp	r3, #7
    b5f0:	d010      	beq.n	b614 <bt_conn_send_cb+0xa0>
    b5f2:	4b0f      	ldr	r3, [pc, #60]	; (b630 <bt_conn_send_cb+0xbc>)
    b5f4:	490f      	ldr	r1, [pc, #60]	; (b634 <bt_conn_send_cb+0xc0>)
			BT_WARN("Disconnected while allocating context");
    b5f6:	4814      	ldr	r0, [pc, #80]	; (b648 <bt_conn_send_cb+0xd4>)
    b5f8:	1ac9      	subs	r1, r1, r3
    b5fa:	08c9      	lsrs	r1, r1, #3
    b5fc:	0189      	lsls	r1, r1, #6
    b5fe:	f041 0102 	orr.w	r1, r1, #2
    b602:	f016 ff25 	bl	22450 <log_0>
			net_buf_unref(buf);
    b606:	4628      	mov	r0, r5
    b608:	f012 f850 	bl	1d6ac <net_buf_unref>
			tx_free(tx);
    b60c:	4620      	mov	r0, r4
    b60e:	f7ff fdb5 	bl	b17c <tx_free>
    b612:	e7c5      	b.n	b5a0 <bt_conn_send_cb+0x2c>
		tx->pending_no_cb = 0U;
    b614:	2300      	movs	r3, #0
		tx->user_data = user_data;
    b616:	e9c0 7801 	strd	r7, r8, [r0, #4]
		tx->pending_no_cb = 0U;
    b61a:	60c3      	str	r3, [r0, #12]
		tx_data(buf)->tx = tx;
    b61c:	6168      	str	r0, [r5, #20]
	net_buf_put(&conn->tx_queue, buf);
    b61e:	f106 0034 	add.w	r0, r6, #52	; 0x34
    b622:	4629      	mov	r1, r5
    b624:	f01a ff41 	bl	264aa <net_buf_put>
	return 0;
    b628:	2000      	movs	r0, #0
    b62a:	e7dd      	b.n	b5e8 <bt_conn_send_cb+0x74>
		tx_data(buf)->tx = NULL;
    b62c:	614a      	str	r2, [r1, #20]
    b62e:	e7f6      	b.n	b61e <bt_conn_send_cb+0xaa>
    b630:	000278c0 	.word	0x000278c0
    b634:	000278d0 	.word	0x000278d0
    b638:	0002ca47 	.word	0x0002ca47
    b63c:	2000acc0 	.word	0x2000acc0
    b640:	2000a028 	.word	0x2000a028
    b644:	0002ca56 	.word	0x0002ca56
    b648:	0002ca74 	.word	0x0002ca74

0000b64c <bt_conn_prepare_events>:

	return 0;
}

int bt_conn_prepare_events(struct k_poll_event events[])
{
    b64c:	b570      	push	{r4, r5, r6, lr}
	int i, ev_count = 0;
	struct bt_conn *conn;

	BT_DBG("");

	conn_change.signaled = 0U;
    b64e:	4b17      	ldr	r3, [pc, #92]	; (b6ac <bt_conn_prepare_events+0x60>)
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b650:	4c17      	ldr	r4, [pc, #92]	; (b6b0 <bt_conn_prepare_events+0x64>)
    b652:	2200      	movs	r2, #0
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b654:	2101      	movs	r1, #1
{
    b656:	4605      	mov	r5, r0
	conn_change.signaled = 0U;
    b658:	609a      	str	r2, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    b65a:	f01b ff95 	bl	27588 <k_poll_event_init>
    b65e:	f3bf 8f5b 	dmb	ish
    b662:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    b666:	f3bf 8f5b 	dmb	ish
			  K_POLL_MODE_NOTIFY_ONLY, &conn_change);

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		conn = &acl_conns[i];

		if (!conn_prepare_events(conn, &events[ev_count])) {
    b66a:	f105 0614 	add.w	r6, r5, #20
	if (!atomic_get(&conn->ref)) {
    b66e:	b90b      	cbnz	r3, b674 <bt_conn_prepare_events+0x28>
		conn_cleanup(conn);
    b670:	2001      	movs	r0, #1
		}
	}
#endif

	return ev_count;
}
    b672:	bd70      	pop	{r4, r5, r6, pc}
	if (conn->state == BT_CONN_DISCONNECTED &&
    b674:	7b63      	ldrb	r3, [r4, #13]
    b676:	b953      	cbnz	r3, b68e <bt_conn_prepare_events+0x42>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b678:	f06f 0140 	mvn.w	r1, #64	; 0x40
    b67c:	1d20      	adds	r0, r4, #4
    b67e:	f019 fa5a 	bl	24b36 <atomic_and>
    b682:	0643      	lsls	r3, r0, #25
    b684:	d503      	bpl.n	b68e <bt_conn_prepare_events+0x42>
		conn_cleanup(conn);
    b686:	4620      	mov	r0, r4
    b688:	f7ff fecc 	bl	b424 <conn_cleanup>
    b68c:	e7f0      	b.n	b670 <bt_conn_prepare_events+0x24>
	if (conn->state != BT_CONN_CONNECTED) {
    b68e:	7b63      	ldrb	r3, [r4, #13]
    b690:	2b07      	cmp	r3, #7
    b692:	d1ed      	bne.n	b670 <bt_conn_prepare_events+0x24>
	k_poll_event_init(&events[0],
    b694:	4b07      	ldr	r3, [pc, #28]	; (b6b4 <bt_conn_prepare_events+0x68>)
    b696:	4630      	mov	r0, r6
    b698:	2200      	movs	r2, #0
    b69a:	2104      	movs	r1, #4
    b69c:	f01b ff74 	bl	27588 <k_poll_event_init>
	events[0].tag = BT_EVENT_CONN_TX_QUEUE;
    b6a0:	2301      	movs	r3, #1
    b6a2:	f885 3020 	strb.w	r3, [r5, #32]
			ev_count++;
    b6a6:	2002      	movs	r0, #2
	return ev_count;
    b6a8:	e7e3      	b.n	b672 <bt_conn_prepare_events+0x26>
    b6aa:	bf00      	nop
    b6ac:	2000031c 	.word	0x2000031c
    b6b0:	2000a670 	.word	0x2000a670
    b6b4:	2000a6a4 	.word	0x2000a6a4

0000b6b8 <bt_conn_add_le>:

	return false;
}

struct bt_conn *bt_conn_add_le(uint8_t id, const bt_addr_le_t *peer)
{
    b6b8:	b570      	push	{r4, r5, r6, lr}
    b6ba:	4606      	mov	r6, r0
    b6bc:	460d      	mov	r5, r1
	conn = bt_conn_new(acl_conns, ARRAY_SIZE(acl_conns));
    b6be:	4811      	ldr	r0, [pc, #68]	; (b704 <bt_conn_add_le+0x4c>)
    b6c0:	2101      	movs	r1, #1
    b6c2:	f019 fa6d 	bl	24ba0 <bt_conn_new>
	if (!conn) {
    b6c6:	4604      	mov	r4, r0
    b6c8:	b1c8      	cbz	r0, b6fe <bt_conn_add_le+0x46>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b6ca:	2230      	movs	r2, #48	; 0x30
    b6cc:	2100      	movs	r1, #0
    b6ce:	3058      	adds	r0, #88	; 0x58
    b6d0:	f018 fef5 	bl	244be <memset>
    b6d4:	4b0c      	ldr	r3, [pc, #48]	; (b708 <bt_conn_add_le+0x50>)
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b6d6:	4a0d      	ldr	r2, [pc, #52]	; (b70c <bt_conn_add_le+0x54>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    b6d8:	65e3      	str	r3, [r4, #92]	; 0x5c
	*work = (struct k_work)Z_WORK_INITIALIZER(handler);
    b6da:	2300      	movs	r3, #0
    b6dc:	e9c4 230b 	strd	r2, r3, [r4, #44]	; 0x2c
    b6e0:	62a3      	str	r3, [r4, #40]	; 0x28

	if (!conn) {
		return NULL;
	}

	conn->id = id;
    b6e2:	7226      	strb	r6, [r4, #8]
	memcpy(dst, src, sizeof(*dst));
    b6e4:	2207      	movs	r2, #7
    b6e6:	4629      	mov	r1, r5
    b6e8:	f104 0088 	add.w	r0, r4, #136	; 0x88
    b6ec:	f018 febc 	bl	24468 <memcpy>
	bt_addr_le_copy(&conn->le.dst, peer);
#if defined(CONFIG_BT_SMP)
	conn->sec_level = BT_SECURITY_L1;
    b6f0:	2301      	movs	r3, #1
    b6f2:	7263      	strb	r3, [r4, #9]
	conn->required_sec_level = BT_SECURITY_L1;
    b6f4:	72a3      	strb	r3, [r4, #10]
#endif /* CONFIG_BT_SMP */
	conn->type = BT_CONN_TYPE_LE;
    b6f6:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    b6f8:	4b05      	ldr	r3, [pc, #20]	; (b710 <bt_conn_add_le+0x58>)
    b6fa:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;

	return conn;
}
    b6fe:	4620      	mov	r0, r4
    b700:	bd70      	pop	{r4, r5, r6, pc}
    b702:	bf00      	nop
    b704:	2000a670 	.word	0x2000a670
    b708:	0000ba2d 	.word	0x0000ba2d
    b70c:	00024b9b 	.word	0x00024b9b
    b710:	00280018 	.word	0x00280018

0000b714 <bt_conn_lookup_handle>:
		break;
	}
}

struct bt_conn *bt_conn_lookup_handle(uint16_t handle)
{
    b714:	4602      	mov	r2, r0
	struct bt_conn *conn;

	conn = conn_lookup_handle(acl_conns, ARRAY_SIZE(acl_conns), handle);
    b716:	2101      	movs	r1, #1
    b718:	4801      	ldr	r0, [pc, #4]	; (b720 <bt_conn_lookup_handle+0xc>)
    b71a:	f019 baf4 	b.w	24d06 <conn_lookup_handle>
    b71e:	bf00      	nop
    b720:	2000a670 	.word	0x2000a670

0000b724 <bt_conn_set_state>:
{
    b724:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == state) {
    b726:	7b46      	ldrb	r6, [r0, #13]
    b728:	428e      	cmp	r6, r1
{
    b72a:	4604      	mov	r4, r0
    b72c:	460d      	mov	r5, r1
	if (conn->state == state) {
    b72e:	d112      	bne.n	b756 <bt_conn_set_state+0x32>
    b730:	4b68      	ldr	r3, [pc, #416]	; (b8d4 <bt_conn_set_state+0x1b0>)
    b732:	4a69      	ldr	r2, [pc, #420]	; (b8d8 <bt_conn_set_state+0x1b4>)
		BT_WARN("no transition %s", state2str(state));
    b734:	4869      	ldr	r0, [pc, #420]	; (b8dc <bt_conn_set_state+0x1b8>)
    b736:	2e08      	cmp	r6, #8
    b738:	eba2 0203 	sub.w	r2, r2, r3
    b73c:	bf96      	itet	ls
    b73e:	4b68      	ldrls	r3, [pc, #416]	; (b8e0 <bt_conn_set_state+0x1bc>)
    b740:	4968      	ldrhi	r1, [pc, #416]	; (b8e4 <bt_conn_set_state+0x1c0>)
    b742:	f853 1026 	ldrls.w	r1, [r3, r6, lsl #2]
    b746:	08d2      	lsrs	r2, r2, #3
    b748:	0192      	lsls	r2, r2, #6
    b74a:	f042 0202 	orr.w	r2, r2, #2
}
    b74e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		BT_WARN("no valid (%u) state was set", state);
    b752:	f016 be8a 	b.w	2246a <log_1>
	conn->state = state;
    b756:	7341      	strb	r1, [r0, #13]
	switch (old_state) {
    b758:	b90e      	cbnz	r6, b75e <bt_conn_set_state+0x3a>
		bt_conn_ref(conn);
    b75a:	f019 faa2 	bl	24ca2 <bt_conn_ref>
	switch (conn->state) {
    b75e:	7b63      	ldrb	r3, [r4, #13]
    b760:	2b08      	cmp	r3, #8
    b762:	f200 80ac 	bhi.w	b8be <bt_conn_set_state+0x19a>
    b766:	e8df f003 	tbb	[pc, r3]
    b76a:	053e      	.short	0x053e
    b76c:	b4b4b4b4 	.word	0xb4b4b4b4
    b770:	1cb4      	.short	0x1cb4
    b772:	b4          	.byte	0xb4
    b773:	00          	.byte	0x00
	z_impl_k_sem_give(sem);
    b774:	4d5c      	ldr	r5, [pc, #368]	; (b8e8 <bt_conn_set_state+0x1c4>)
		tx->pending_no_cb = 0U;
    b776:	2600      	movs	r6, #0
	__asm__ volatile(
    b778:	f04f 0320 	mov.w	r3, #32
    b77c:	f3ef 8211 	mrs	r2, BASEPRI
    b780:	f383 8811 	msr	BASEPRI, r3
    b784:	f3bf 8f6f 	isb	sy
		if (conn->pending_no_cb) {
    b788:	69e3      	ldr	r3, [r4, #28]
    b78a:	2b00      	cmp	r3, #0
    b78c:	d078      	beq.n	b880 <bt_conn_set_state+0x15c>
			conn->pending_no_cb--;
    b78e:	3b01      	subs	r3, #1
    b790:	61e3      	str	r3, [r4, #28]
	__asm__ volatile(
    b792:	f382 8811 	msr	BASEPRI, r2
    b796:	f3bf 8f6f 	isb	sy
    b79a:	4628      	mov	r0, r5
    b79c:	f014 fe62 	bl	20464 <z_impl_k_sem_give>
}
    b7a0:	e7ea      	b.n	b778 <bt_conn_set_state+0x54>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b7a2:	78a3      	ldrb	r3, [r4, #2]
    b7a4:	2b04      	cmp	r3, #4
    b7a6:	f000 8094 	beq.w	b8d2 <bt_conn_set_state+0x1ae>
	z_impl_k_queue_init(queue);
    b7aa:	f104 0034 	add.w	r0, r4, #52	; 0x34
    b7ae:	f01b fb3e 	bl	26e2e <z_impl_k_queue_init>
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&signal, *(uintptr_t *)&result, K_SYSCALL_K_POLL_SIGNAL_RAISE);
	}
#endif
	compiler_barrier();
	return z_impl_k_poll_signal_raise(signal, result);
    b7b2:	2100      	movs	r1, #0
    b7b4:	484d      	ldr	r0, [pc, #308]	; (b8ec <bt_conn_set_state+0x1c8>)
    b7b6:	f015 fa23 	bl	20c00 <z_impl_k_poll_signal_raise>
	list->head = NULL;
    b7ba:	2300      	movs	r3, #0
	list->tail = NULL;
    b7bc:	e9c4 3313 	strd	r3, r3, [r4, #76]	; 0x4c
		bt_l2cap_connected(conn);
    b7c0:	4620      	mov	r0, r4
    b7c2:	f000 faf7 	bl	bdb4 <bt_l2cap_connected>
		notify_connected(conn);
    b7c6:	4620      	mov	r0, r4
    b7c8:	f7ff fce2 	bl	b190 <notify_connected>
		if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
    b7cc:	78e3      	ldrb	r3, [r4, #3]
    b7ce:	2b01      	cmp	r3, #1
    b7d0:	d17f      	bne.n	b8d2 <bt_conn_set_state+0x1ae>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    b7d2:	f104 0158 	add.w	r1, r4, #88	; 0x58
    b7d6:	4846      	ldr	r0, [pc, #280]	; (b8f0 <bt_conn_set_state+0x1cc>)
}
    b7d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b7dc:	f44f 3220 	mov.w	r2, #163840	; 0x28000
    b7e0:	2300      	movs	r3, #0
    b7e2:	f014 bf99 	b.w	20718 <k_delayed_work_submit_to_queue>
		if (conn->type == BT_CONN_TYPE_SCO) {
    b7e6:	78a3      	ldrb	r3, [r4, #2]
    b7e8:	2b04      	cmp	r3, #4
    b7ea:	d104      	bne.n	b7f6 <bt_conn_set_state+0xd2>
			bt_conn_unref(conn);
    b7ec:	4620      	mov	r0, r4
}
    b7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			bt_conn_unref(conn);
    b7f2:	f019 ba71 	b.w	24cd8 <bt_conn_unref>
		switch (old_state) {
    b7f6:	2e08      	cmp	r6, #8
    b7f8:	d86b      	bhi.n	b8d2 <bt_conn_set_state+0x1ae>
    b7fa:	a301      	add	r3, pc, #4	; (adr r3, b800 <bt_conn_set_state+0xdc>)
    b7fc:	f853 f026 	ldr.w	pc, [r3, r6, lsl #2]
    b800:	0000b86d 	.word	0x0000b86d
    b804:	0000b825 	.word	0x0000b825
    b808:	0000b85f 	.word	0x0000b85f
    b80c:	0000b7ed 	.word	0x0000b7ed
    b810:	0000b7ed 	.word	0x0000b7ed
    b814:	0000b85f 	.word	0x0000b85f
    b818:	0000b85f 	.word	0x0000b85f
    b81c:	0000b86d 	.word	0x0000b86d
    b820:	0000b86d 	.word	0x0000b86d
			tx_notify(conn);
    b824:	4620      	mov	r0, r4
    b826:	f019 f995 	bl	24b54 <tx_notify>
			if (conn->type == BT_CONN_TYPE_LE) {
    b82a:	78a3      	ldrb	r3, [r4, #2]
    b82c:	2b01      	cmp	r3, #1
    b82e:	d103      	bne.n	b838 <bt_conn_set_state+0x114>
				k_delayed_work_cancel(&conn->deferred_work);
    b830:	f104 0058 	add.w	r0, r4, #88	; 0x58
    b834:	f01b fcc7 	bl	271c6 <k_delayed_work_cancel>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b838:	f3bf 8f5b 	dmb	ish
    b83c:	3404      	adds	r4, #4
    b83e:	e854 3f00 	ldrex	r3, [r4]
    b842:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b846:	e844 3200 	strex	r2, r3, [r4]
    b84a:	2a00      	cmp	r2, #0
    b84c:	d1f7      	bne.n	b83e <bt_conn_set_state+0x11a>
    b84e:	f3bf 8f5b 	dmb	ish
    b852:	4826      	ldr	r0, [pc, #152]	; (b8ec <bt_conn_set_state+0x1c8>)
}
    b854:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    b858:	2100      	movs	r1, #0
    b85a:	f015 b9d1 	b.w	20c00 <z_impl_k_poll_signal_raise>
			if (conn->err) {
    b85e:	7b23      	ldrb	r3, [r4, #12]
    b860:	2b00      	cmp	r3, #0
    b862:	d0c3      	beq.n	b7ec <bt_conn_set_state+0xc8>
				notify_connected(conn);
    b864:	4620      	mov	r0, r4
    b866:	f7ff fc93 	bl	b190 <notify_connected>
    b86a:	e7bf      	b.n	b7ec <bt_conn_set_state+0xc8>
    b86c:	4a1a      	ldr	r2, [pc, #104]	; (b8d8 <bt_conn_set_state+0x1b4>)
    b86e:	4b19      	ldr	r3, [pc, #100]	; (b8d4 <bt_conn_set_state+0x1b0>)
			BT_WARN("Invalid (%u) old state", state);
    b870:	4820      	ldr	r0, [pc, #128]	; (b8f4 <bt_conn_set_state+0x1d0>)
    b872:	1ad2      	subs	r2, r2, r3
    b874:	08d2      	lsrs	r2, r2, #3
    b876:	0192      	lsls	r2, r2, #6
    b878:	f042 0202 	orr.w	r2, r2, #2
    b87c:	4629      	mov	r1, r5
    b87e:	e766      	b.n	b74e <bt_conn_set_state+0x2a>
	return list->head;
    b880:	6960      	ldr	r0, [r4, #20]
Z_GENLIST_GET(slist, snode)
    b882:	b128      	cbz	r0, b890 <bt_conn_set_state+0x16c>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b884:	69a1      	ldr	r1, [r4, #24]
	return node->next;
    b886:	6803      	ldr	r3, [r0, #0]
	list->head = node;
    b888:	6163      	str	r3, [r4, #20]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
    b88a:	4288      	cmp	r0, r1
	list->tail = node;
    b88c:	bf08      	it	eq
    b88e:	61a3      	streq	r3, [r4, #24]
    b890:	f382 8811 	msr	BASEPRI, r2
    b894:	f3bf 8f6f 	isb	sy
		if (!node) {
    b898:	b1d8      	cbz	r0, b8d2 <bt_conn_set_state+0x1ae>
	__asm__ volatile(
    b89a:	f04f 0220 	mov.w	r2, #32
    b89e:	f3ef 8311 	mrs	r3, BASEPRI
    b8a2:	f382 8811 	msr	BASEPRI, r2
    b8a6:	f3bf 8f6f 	isb	sy
		conn->pending_no_cb = tx->pending_no_cb;
    b8aa:	68c2      	ldr	r2, [r0, #12]
    b8ac:	61e2      	str	r2, [r4, #28]
		tx->pending_no_cb = 0U;
    b8ae:	60c6      	str	r6, [r0, #12]
	__asm__ volatile(
    b8b0:	f383 8811 	msr	BASEPRI, r3
    b8b4:	f3bf 8f6f 	isb	sy
		tx_free(tx);
    b8b8:	f7ff fc60 	bl	b17c <tx_free>
    b8bc:	e76d      	b.n	b79a <bt_conn_set_state+0x76>
    b8be:	4a06      	ldr	r2, [pc, #24]	; (b8d8 <bt_conn_set_state+0x1b4>)
    b8c0:	4b04      	ldr	r3, [pc, #16]	; (b8d4 <bt_conn_set_state+0x1b0>)
		BT_WARN("no valid (%u) state was set", state);
    b8c2:	480d      	ldr	r0, [pc, #52]	; (b8f8 <bt_conn_set_state+0x1d4>)
    b8c4:	1ad2      	subs	r2, r2, r3
    b8c6:	08d2      	lsrs	r2, r2, #3
    b8c8:	0192      	lsls	r2, r2, #6
    b8ca:	f042 0202 	orr.w	r2, r2, #2
    b8ce:	4629      	mov	r1, r5
    b8d0:	e73d      	b.n	b74e <bt_conn_set_state+0x2a>
}
    b8d2:	bd70      	pop	{r4, r5, r6, pc}
    b8d4:	000278c0 	.word	0x000278c0
    b8d8:	000278d0 	.word	0x000278d0
    b8dc:	0002caa4 	.word	0x0002caa4
    b8e0:	00028108 	.word	0x00028108
    b8e4:	0002ca9a 	.word	0x0002ca9a
    b8e8:	200000d0 	.word	0x200000d0
    b8ec:	2000031c 	.word	0x2000031c
    b8f0:	2000aca8 	.word	0x2000aca8
    b8f4:	0002cab5 	.word	0x0002cab5
    b8f8:	0002cacc 	.word	0x0002cacc

0000b8fc <bt_conn_lookup_addr_le>:

	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
}

struct bt_conn *bt_conn_lookup_addr_le(uint8_t id, const bt_addr_le_t *peer)
{
    b8fc:	b570      	push	{r4, r5, r6, lr}
    b8fe:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b900:	480c      	ldr	r0, [pc, #48]	; (b934 <bt_conn_lookup_addr_le+0x38>)
{
    b902:	460e      	mov	r6, r1
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b904:	f019 f9cd 	bl	24ca2 <bt_conn_ref>

		if (!conn) {
    b908:	4604      	mov	r4, r0
    b90a:	b128      	cbz	r0, b918 <bt_conn_lookup_addr_le+0x1c>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b90c:	7883      	ldrb	r3, [r0, #2]
    b90e:	2b01      	cmp	r3, #1
    b910:	d004      	beq.n	b91c <bt_conn_lookup_addr_le+0x20>
			bt_conn_unref(conn);
    b912:	f019 f9e1 	bl	24cd8 <bt_conn_unref>
		}

		return conn;
	}

	return NULL;
    b916:	2400      	movs	r4, #0
}
    b918:	4620      	mov	r0, r4
    b91a:	bd70      	pop	{r4, r5, r6, pc}
		if (!bt_conn_is_peer_addr_le(conn, id, peer)) {
    b91c:	4629      	mov	r1, r5
    b91e:	4632      	mov	r2, r6
    b920:	f019 f99f 	bl	24c62 <bt_conn_is_peer_addr_le>
    b924:	4605      	mov	r5, r0
    b926:	2800      	cmp	r0, #0
    b928:	d1f6      	bne.n	b918 <bt_conn_lookup_addr_le+0x1c>
			bt_conn_unref(conn);
    b92a:	4620      	mov	r0, r4
    b92c:	f019 f9d4 	bl	24cd8 <bt_conn_unref>
	return NULL;
    b930:	462c      	mov	r4, r5
			continue;
    b932:	e7f1      	b.n	b918 <bt_conn_lookup_addr_le+0x1c>
    b934:	2000a670 	.word	0x2000a670

0000b938 <bt_conn_exists_le>:
{
    b938:	b510      	push	{r4, lr}
	struct bt_conn *conn = bt_conn_lookup_addr_le(id, peer);
    b93a:	f7ff ffdf 	bl	b8fc <bt_conn_lookup_addr_le>
	if (conn) {
    b93e:	4604      	mov	r4, r0
    b940:	b1a0      	cbz	r0, b96c <bt_conn_exists_le+0x34>
    b942:	4b0b      	ldr	r3, [pc, #44]	; (b970 <bt_conn_exists_le+0x38>)
    b944:	4a0b      	ldr	r2, [pc, #44]	; (b974 <bt_conn_exists_le+0x3c>)
    b946:	1ad2      	subs	r2, r2, r3
		BT_WARN("Found valid connection in %s state",
    b948:	7b43      	ldrb	r3, [r0, #13]
    b94a:	480b      	ldr	r0, [pc, #44]	; (b978 <bt_conn_exists_le+0x40>)
    b94c:	2b08      	cmp	r3, #8
    b94e:	bf96      	itet	ls
    b950:	490a      	ldrls	r1, [pc, #40]	; (b97c <bt_conn_exists_le+0x44>)
    b952:	490b      	ldrhi	r1, [pc, #44]	; (b980 <bt_conn_exists_le+0x48>)
    b954:	f851 1023 	ldrls.w	r1, [r1, r3, lsl #2]
    b958:	08d2      	lsrs	r2, r2, #3
    b95a:	0192      	lsls	r2, r2, #6
    b95c:	f042 0202 	orr.w	r2, r2, #2
    b960:	f016 fd83 	bl	2246a <log_1>
		bt_conn_unref(conn);
    b964:	4620      	mov	r0, r4
    b966:	f019 f9b7 	bl	24cd8 <bt_conn_unref>
		return true;
    b96a:	2001      	movs	r0, #1
}
    b96c:	bd10      	pop	{r4, pc}
    b96e:	bf00      	nop
    b970:	000278c0 	.word	0x000278c0
    b974:	000278d0 	.word	0x000278d0
    b978:	0002cae8 	.word	0x0002cae8
    b97c:	00028108 	.word	0x00028108
    b980:	0002ca9a 	.word	0x0002ca9a

0000b984 <bt_conn_lookup_state_le>:

struct bt_conn *bt_conn_lookup_state_le(uint8_t id, const bt_addr_le_t *peer,
					const bt_conn_state_t state)
{
    b984:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    b986:	4605      	mov	r5, r0
	int i;

	for (i = 0; i < ARRAY_SIZE(acl_conns); i++) {
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b988:	480f      	ldr	r0, [pc, #60]	; (b9c8 <bt_conn_lookup_state_le+0x44>)
{
    b98a:	460e      	mov	r6, r1
    b98c:	4617      	mov	r7, r2
		struct bt_conn *conn = bt_conn_ref(&acl_conns[i]);
    b98e:	f019 f988 	bl	24ca2 <bt_conn_ref>

		if (!conn) {
    b992:	4604      	mov	r4, r0
    b994:	b1b0      	cbz	r0, b9c4 <bt_conn_lookup_state_le+0x40>
			continue;
		}

		if (conn->type != BT_CONN_TYPE_LE) {
    b996:	7883      	ldrb	r3, [r0, #2]
    b998:	2b01      	cmp	r3, #1
    b99a:	d003      	beq.n	b9a4 <bt_conn_lookup_state_le+0x20>
			bt_conn_ref(conn);
    b99c:	f019 f981 	bl	24ca2 <bt_conn_ref>
		}

		return conn;
	}

	return NULL;
    b9a0:	2400      	movs	r4, #0
			continue;
    b9a2:	e00f      	b.n	b9c4 <bt_conn_lookup_state_le+0x40>
		if (peer && !bt_conn_is_peer_addr_le(conn, id, peer)) {
    b9a4:	b146      	cbz	r6, b9b8 <bt_conn_lookup_state_le+0x34>
    b9a6:	4632      	mov	r2, r6
    b9a8:	4629      	mov	r1, r5
    b9aa:	f019 f95a 	bl	24c62 <bt_conn_is_peer_addr_le>
    b9ae:	b918      	cbnz	r0, b9b8 <bt_conn_lookup_state_le+0x34>
			bt_conn_unref(conn);
    b9b0:	4620      	mov	r0, r4
    b9b2:	f019 f991 	bl	24cd8 <bt_conn_unref>
    b9b6:	e7f3      	b.n	b9a0 <bt_conn_lookup_state_le+0x1c>
		if (!(conn->state == state && conn->id == id)) {
    b9b8:	7b63      	ldrb	r3, [r4, #13]
    b9ba:	42bb      	cmp	r3, r7
    b9bc:	d1f8      	bne.n	b9b0 <bt_conn_lookup_state_le+0x2c>
    b9be:	7a23      	ldrb	r3, [r4, #8]
    b9c0:	42ab      	cmp	r3, r5
    b9c2:	d1f5      	bne.n	b9b0 <bt_conn_lookup_state_le+0x2c>
}
    b9c4:	4620      	mov	r0, r4
    b9c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    b9c8:	2000a670 	.word	0x2000a670

0000b9cc <send_conn_le_param_update>:
{
    b9cc:	b538      	push	{r3, r4, r5, lr}
    b9ce:	4604      	mov	r4, r0
	if (!bt_le_conn_params_valid(param)) {
    b9d0:	4608      	mov	r0, r1
{
    b9d2:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    b9d4:	f019 f839 	bl	24a4a <bt_le_conn_params_valid>
    b9d8:	b318      	cbz	r0, ba22 <send_conn_le_param_update+0x56>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b9da:	4b13      	ldr	r3, [pc, #76]	; (ba28 <send_conn_le_param_update+0x5c>)
    b9dc:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
    b9e0:	0799      	lsls	r1, r3, #30
    b9e2:	d407      	bmi.n	b9f4 <send_conn_le_param_update+0x28>
	     !atomic_test_bit(conn->flags, BT_CONN_SLAVE_PARAM_L2CAP)) ||
    b9e4:	78e3      	ldrb	r3, [r4, #3]
    b9e6:	b183      	cbz	r3, ba0a <send_conn_le_param_update+0x3e>
	return bt_l2cap_update_conn_param(conn, param);
    b9e8:	4629      	mov	r1, r5
    b9ea:	4620      	mov	r0, r4
}
    b9ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_l2cap_update_conn_param(conn, param);
    b9f0:	f000 bae8 	b.w	bfc4 <bt_l2cap_update_conn_param>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    b9f4:	f894 30ac 	ldrb.w	r3, [r4, #172]	; 0xac
    b9f8:	079a      	lsls	r2, r3, #30
    b9fa:	d5f3      	bpl.n	b9e4 <send_conn_le_param_update+0x18>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b9fc:	f3bf 8f5b 	dmb	ish
    ba00:	6863      	ldr	r3, [r4, #4]
    ba02:	f3bf 8f5b 	dmb	ish
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features) &&
    ba06:	055b      	lsls	r3, r3, #21
    ba08:	d4ec      	bmi.n	b9e4 <send_conn_le_param_update+0x18>
		rc = bt_conn_le_conn_update(conn, param);
    ba0a:	4629      	mov	r1, r5
    ba0c:	4620      	mov	r0, r4
    ba0e:	f019 f9bf 	bl	24d90 <bt_conn_le_conn_update>
		if (rc == 0) {
    ba12:	b928      	cbnz	r0, ba20 <send_conn_le_param_update+0x54>
			conn->le.pending_latency = param->latency;
    ba14:	88ab      	ldrh	r3, [r5, #4]
    ba16:	f8a4 30a8 	strh.w	r3, [r4, #168]	; 0xa8
			conn->le.pending_timeout = param->timeout;
    ba1a:	88eb      	ldrh	r3, [r5, #6]
    ba1c:	f8a4 30aa 	strh.w	r3, [r4, #170]	; 0xaa
}
    ba20:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
    ba22:	f06f 0015 	mvn.w	r0, #21
    ba26:	e7fb      	b.n	ba20 <send_conn_le_param_update+0x54>
    ba28:	20000008 	.word	0x20000008

0000ba2c <deferred_work>:
{
    ba2c:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED) {
    ba2e:	f810 3c4b 	ldrb.w	r3, [r0, #-75]
{
    ba32:	4604      	mov	r4, r0
	struct bt_conn *conn = CONTAINER_OF(work, struct bt_conn, deferred_work);
    ba34:	f1a0 0558 	sub.w	r5, r0, #88	; 0x58
	if (conn->state == BT_CONN_DISCONNECTED) {
    ba38:	b99b      	cbnz	r3, ba62 <deferred_work+0x36>
		bt_l2cap_disconnected(conn);
    ba3a:	4628      	mov	r0, r5
    ba3c:	f019 fa08 	bl	24e50 <bt_l2cap_disconnected>
	for (cb = callback_list; cb; cb = cb->_next) {
    ba40:	4b22      	ldr	r3, [pc, #136]	; (bacc <deferred_work+0xa0>)
    ba42:	681e      	ldr	r6, [r3, #0]
    ba44:	b92e      	cbnz	r6, ba52 <deferred_work+0x26>
		bt_conn_unref(conn);
    ba46:	4628      	mov	r0, r5
}
    ba48:	b002      	add	sp, #8
    ba4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		bt_conn_unref(conn);
    ba4e:	f019 b943 	b.w	24cd8 <bt_conn_unref>
		if (cb->disconnected) {
    ba52:	6873      	ldr	r3, [r6, #4]
    ba54:	b11b      	cbz	r3, ba5e <deferred_work+0x32>
			cb->disconnected(conn, conn->err);
    ba56:	f814 1c4c 	ldrb.w	r1, [r4, #-76]
    ba5a:	4628      	mov	r0, r5
    ba5c:	4798      	blx	r3
	for (cb = callback_list; cb; cb = cb->_next) {
    ba5e:	69b6      	ldr	r6, [r6, #24]
    ba60:	e7f0      	b.n	ba44 <deferred_work+0x18>
	if (conn->type != BT_CONN_TYPE_LE) {
    ba62:	f810 3c56 	ldrb.w	r3, [r0, #-86]
    ba66:	2b01      	cmp	r3, #1
    ba68:	d128      	bne.n	babc <deferred_work+0x90>
	if (atomic_test_and_clear_bit(conn->flags,
    ba6a:	f1a0 0654 	sub.w	r6, r0, #84	; 0x54
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    ba6e:	f46f 7100 	mvn.w	r1, #512	; 0x200
    ba72:	4630      	mov	r0, r6
    ba74:	f019 f85f 	bl	24b36 <atomic_and>
    ba78:	0583      	lsls	r3, r0, #22
    ba7a:	d521      	bpl.n	bac0 <deferred_work+0x94>
		param = BT_LE_CONN_PARAM(conn->le.interval_min,
    ba7c:	f8b4 3048 	ldrh.w	r3, [r4, #72]	; 0x48
    ba80:	f8ad 3000 	strh.w	r3, [sp]
    ba84:	f8b4 304a 	ldrh.w	r3, [r4, #74]	; 0x4a
    ba88:	f8ad 3002 	strh.w	r3, [sp, #2]
    ba8c:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
    ba90:	f8ad 3004 	strh.w	r3, [sp, #4]
    ba94:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
    ba98:	f8ad 3006 	strh.w	r3, [sp, #6]
		send_conn_le_param_update(conn, param);
    ba9c:	4669      	mov	r1, sp
    ba9e:	4628      	mov	r0, r5
    baa0:	f7ff ff94 	bl	b9cc <send_conn_le_param_update>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    baa4:	f3bf 8f5b 	dmb	ish
    baa8:	e856 3f00 	ldrex	r3, [r6]
    baac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bab0:	e846 3200 	strex	r2, r3, [r6]
    bab4:	2a00      	cmp	r2, #0
    bab6:	d1f7      	bne.n	baa8 <deferred_work+0x7c>
    bab8:	f3bf 8f5b 	dmb	ish
}
    babc:	b002      	add	sp, #8
    babe:	bd70      	pop	{r4, r5, r6, pc}
		param = BT_LE_CONN_PARAM(
    bac0:	4a03      	ldr	r2, [pc, #12]	; (bad0 <deferred_work+0xa4>)
    bac2:	6810      	ldr	r0, [r2, #0]
    bac4:	6851      	ldr	r1, [r2, #4]
    bac6:	466b      	mov	r3, sp
    bac8:	c303      	stmia	r3!, {r0, r1}
    baca:	e7e7      	b.n	ba9c <deferred_work+0x70>
    bacc:	2000d748 	.word	0x2000d748
    bad0:	00027af0 	.word	0x00027af0

0000bad4 <bt_conn_create_pdu_timeout>:
						 const char *func, int line)
#else
struct net_buf *bt_conn_create_pdu_timeout(struct net_buf_pool *pool,
					   size_t reserve, k_timeout_t timeout)
#endif
{
    bad4:	b538      	push	{r3, r4, r5, lr}
    bad6:	460d      	mov	r5, r1
	return net_buf_alloc_fixed(pool, timeout);
    bad8:	490c      	ldr	r1, [pc, #48]	; (bb0c <bt_conn_create_pdu_timeout+0x38>)
    bada:	2800      	cmp	r0, #0
    badc:	bf08      	it	eq
    bade:	4608      	moveq	r0, r1
    bae0:	f01a fcc0 	bl	26464 <net_buf_alloc_fixed>
#else
		buf = net_buf_alloc(pool, timeout);
#endif
	}

	if (!buf) {
    bae4:	4604      	mov	r4, r0
    bae6:	b958      	cbnz	r0, bb00 <bt_conn_create_pdu_timeout+0x2c>
    bae8:	4909      	ldr	r1, [pc, #36]	; (bb10 <bt_conn_create_pdu_timeout+0x3c>)
    baea:	4b0a      	ldr	r3, [pc, #40]	; (bb14 <bt_conn_create_pdu_timeout+0x40>)
		BT_WARN("Unable to allocate buffer within timeout");
    baec:	480a      	ldr	r0, [pc, #40]	; (bb18 <bt_conn_create_pdu_timeout+0x44>)
    baee:	1ac9      	subs	r1, r1, r3
    baf0:	08c9      	lsrs	r1, r1, #3
    baf2:	0189      	lsls	r1, r1, #6
    baf4:	f041 0102 	orr.w	r1, r1, #2
    baf8:	f016 fcaa 	bl	22450 <log_0>

	reserve += sizeof(struct bt_hci_acl_hdr) + BT_BUF_RESERVE;
	net_buf_reserve(buf, reserve);

	return buf;
}
    bafc:	4620      	mov	r0, r4
    bafe:	bd38      	pop	{r3, r4, r5, pc}
	net_buf_simple_reserve(&buf->b, reserve);
    bb00:	1d29      	adds	r1, r5, #4
    bb02:	3008      	adds	r0, #8
    bb04:	f01a fccd 	bl	264a2 <net_buf_simple_reserve>
	return buf;
    bb08:	e7f8      	b.n	bafc <bt_conn_create_pdu_timeout+0x28>
    bb0a:	bf00      	nop
    bb0c:	2000a058 	.word	0x2000a058
    bb10:	000278d0 	.word	0x000278d0
    bb14:	000278c0 	.word	0x000278c0
    bb18:	0002cb0b 	.word	0x0002cb0b

0000bb1c <bt_conn_create_frag_timeout>:
{
    bb1c:	4601      	mov	r1, r0
	return bt_conn_create_pdu_timeout(pool, reserve, timeout);
    bb1e:	4801      	ldr	r0, [pc, #4]	; (bb24 <bt_conn_create_frag_timeout+0x8>)
    bb20:	f7ff bfd8 	b.w	bad4 <bt_conn_create_pdu_timeout>
    bb24:	2000a0a8 	.word	0x2000a0a8

0000bb28 <create_frag>:
{
    bb28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    bb2c:	4606      	mov	r6, r0
		frag = bt_conn_create_frag(0);
    bb2e:	f04f 33ff 	mov.w	r3, #4294967295
    bb32:	f04f 32ff 	mov.w	r2, #4294967295
    bb36:	2000      	movs	r0, #0
{
    bb38:	460c      	mov	r4, r1
		frag = bt_conn_create_frag(0);
    bb3a:	f7ff ffef 	bl	bb1c <bt_conn_create_frag_timeout>
	if (conn->state != BT_CONN_CONNECTED) {
    bb3e:	7b73      	ldrb	r3, [r6, #13]
    bb40:	2b07      	cmp	r3, #7
		frag = bt_conn_create_frag(0);
    bb42:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    bb44:	f04f 0600 	mov.w	r6, #0
    bb48:	d005      	beq.n	bb56 <create_frag+0x2e>
		net_buf_unref(frag);
    bb4a:	f011 fdaf 	bl	1d6ac <net_buf_unref>
		return NULL;
    bb4e:	4635      	mov	r5, r6
}
    bb50:	4628      	mov	r0, r5
    bb52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tx_data(frag)->tx = NULL;
    bb56:	6146      	str	r6, [r0, #20]
	return net_buf_simple_tailroom(&buf->b);
    bb58:	f100 0708 	add.w	r7, r0, #8
	return bt_dev.le.acl_mtu;
    bb5c:	4e0c      	ldr	r6, [pc, #48]	; (bb90 <create_frag+0x68>)
    bb5e:	4638      	mov	r0, r7
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    bb60:	f8b6 80c4 	ldrh.w	r8, [r6, #196]	; 0xc4
    bb64:	f01a fd0f 	bl	26586 <net_buf_simple_tailroom>
    bb68:	4580      	cmp	r8, r0
    bb6a:	d20c      	bcs.n	bb86 <create_frag+0x5e>
	return bt_dev.le.acl_mtu;
    bb6c:	f8b6 60c4 	ldrh.w	r6, [r6, #196]	; 0xc4
	return net_buf_simple_add_mem(&buf->b, mem, len);
    bb70:	f854 1f08 	ldr.w	r1, [r4, #8]!
    bb74:	4632      	mov	r2, r6
    bb76:	4638      	mov	r0, r7
    bb78:	f01a fcd0 	bl	2651c <net_buf_simple_add_mem>
	return net_buf_simple_pull(&buf->b, len);
    bb7c:	4631      	mov	r1, r6
    bb7e:	4620      	mov	r0, r4
    bb80:	f01a fce5 	bl	2654e <net_buf_simple_pull>
    bb84:	e7e4      	b.n	bb50 <create_frag+0x28>
	return net_buf_simple_tailroom(&buf->b);
    bb86:	4638      	mov	r0, r7
    bb88:	f01a fcfd 	bl	26586 <net_buf_simple_tailroom>
	frag_len = MIN(conn_mtu(conn), net_buf_tailroom(frag));
    bb8c:	b286      	uxth	r6, r0
    bb8e:	e7ef      	b.n	bb70 <create_frag+0x48>
    bb90:	20000008 	.word	0x20000008

0000bb94 <bt_conn_process_tx>:
{
    bb94:	b570      	push	{r4, r5, r6, lr}
	if (conn->state == BT_CONN_DISCONNECTED &&
    bb96:	7b43      	ldrb	r3, [r0, #13]
{
    bb98:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    bb9a:	b95b      	cbnz	r3, bbb4 <bt_conn_process_tx+0x20>
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bb9c:	f06f 0140 	mvn.w	r1, #64	; 0x40
    bba0:	3004      	adds	r0, #4
    bba2:	f018 ffc8 	bl	24b36 <atomic_and>
    bba6:	0643      	lsls	r3, r0, #25
    bba8:	d504      	bpl.n	bbb4 <bt_conn_process_tx+0x20>
		conn_cleanup(conn);
    bbaa:	4620      	mov	r0, r4
}
    bbac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		conn_cleanup(conn);
    bbb0:	f7ff bc38 	b.w	b424 <conn_cleanup>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    bbb4:	2200      	movs	r2, #0
    bbb6:	2300      	movs	r3, #0
    bbb8:	f104 0034 	add.w	r0, r4, #52	; 0x34
    bbbc:	f01a fc57 	bl	2646e <net_buf_get>
	BT_ASSERT(buf);
    bbc0:	4605      	mov	r5, r0
    bbc2:	b960      	cbnz	r0, bbde <bt_conn_process_tx+0x4a>
    bbc4:	4a1f      	ldr	r2, [pc, #124]	; (bc44 <bt_conn_process_tx+0xb0>)
    bbc6:	4920      	ldr	r1, [pc, #128]	; (bc48 <bt_conn_process_tx+0xb4>)
    bbc8:	4820      	ldr	r0, [pc, #128]	; (bc4c <bt_conn_process_tx+0xb8>)
    bbca:	f240 535f 	movw	r3, #1375	; 0x55f
    bbce:	f015 ffa9 	bl	21b24 <printk>
    bbd2:	4040      	eors	r0, r0
    bbd4:	f380 8811 	msr	BASEPRI, r0
    bbd8:	f04f 0003 	mov.w	r0, #3
    bbdc:	df02      	svc	2
	return bt_dev.le.acl_mtu;
    bbde:	4e1c      	ldr	r6, [pc, #112]	; (bc50 <bt_conn_process_tx+0xbc>)
	if (buf->len <= conn_mtu(conn)) {
    bbe0:	89aa      	ldrh	r2, [r5, #12]
    bbe2:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    bbe6:	429a      	cmp	r2, r3
    bbe8:	d807      	bhi.n	bbfa <bt_conn_process_tx+0x66>
		return send_frag(conn, buf, FRAG_SINGLE, false);
    bbea:	2300      	movs	r3, #0
    bbec:	2202      	movs	r2, #2
	return send_frag(conn, buf, FRAG_END, false);
    bbee:	4629      	mov	r1, r5
    bbf0:	4620      	mov	r0, r4
    bbf2:	f7ff fae3 	bl	b1bc <send_frag>
	if (!send_buf(conn, buf)) {
    bbf6:	b130      	cbz	r0, bc06 <bt_conn_process_tx+0x72>
}
    bbf8:	bd70      	pop	{r4, r5, r6, pc}
	frag = create_frag(conn, buf);
    bbfa:	4629      	mov	r1, r5
    bbfc:	4620      	mov	r0, r4
    bbfe:	f7ff ff93 	bl	bb28 <create_frag>
	if (!frag) {
    bc02:	4601      	mov	r1, r0
    bc04:	b920      	cbnz	r0, bc10 <bt_conn_process_tx+0x7c>
		net_buf_unref(buf);
    bc06:	4628      	mov	r0, r5
}
    bc08:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		net_buf_unref(buf);
    bc0c:	f011 bd4e 	b.w	1d6ac <net_buf_unref>
	if (!send_frag(conn, frag, FRAG_START, true)) {
    bc10:	2301      	movs	r3, #1
    bc12:	2200      	movs	r2, #0
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bc14:	4620      	mov	r0, r4
    bc16:	f7ff fad1 	bl	b1bc <send_frag>
    bc1a:	2800      	cmp	r0, #0
    bc1c:	d0f3      	beq.n	bc06 <bt_conn_process_tx+0x72>
	while (buf->len > conn_mtu(conn)) {
    bc1e:	89aa      	ldrh	r2, [r5, #12]
    bc20:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
    bc24:	429a      	cmp	r2, r3
    bc26:	d802      	bhi.n	bc2e <bt_conn_process_tx+0x9a>
	return send_frag(conn, buf, FRAG_END, false);
    bc28:	2300      	movs	r3, #0
    bc2a:	2203      	movs	r2, #3
    bc2c:	e7df      	b.n	bbee <bt_conn_process_tx+0x5a>
		frag = create_frag(conn, buf);
    bc2e:	4629      	mov	r1, r5
    bc30:	4620      	mov	r0, r4
    bc32:	f7ff ff79 	bl	bb28 <create_frag>
		if (!frag) {
    bc36:	4601      	mov	r1, r0
    bc38:	2800      	cmp	r0, #0
    bc3a:	d0e4      	beq.n	bc06 <bt_conn_process_tx+0x72>
		if (!send_frag(conn, frag, FRAG_CONT, true)) {
    bc3c:	2301      	movs	r3, #1
    bc3e:	461a      	mov	r2, r3
    bc40:	e7e8      	b.n	bc14 <bt_conn_process_tx+0x80>
    bc42:	bf00      	nop
    bc44:	0002cb34 	.word	0x0002cb34
    bc48:	0002bf75 	.word	0x0002bf75
    bc4c:	0002c20d 	.word	0x0002c20d
    bc50:	20000008 	.word	0x20000008

0000bc54 <bt_conn_auth_cb_register>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_BREDR)
int bt_conn_auth_cb_register(const struct bt_conn_auth_cb *cb)
{
	if (!cb) {
    bc54:	4b0c      	ldr	r3, [pc, #48]	; (bc88 <bt_conn_auth_cb_register+0x34>)
    bc56:	b908      	cbnz	r0, bc5c <bt_conn_auth_cb_register+0x8>
		bt_auth = NULL;
    bc58:	6018      	str	r0, [r3, #0]
		return 0;
    bc5a:	4770      	bx	lr
	}

	if (bt_auth) {
    bc5c:	681a      	ldr	r2, [r3, #0]
    bc5e:	b962      	cbnz	r2, bc7a <bt_conn_auth_cb_register+0x26>
	}

	/* The cancel callback must always be provided if the app provides
	 * interactive callbacks.
	 */
	if (!cb->cancel &&
    bc60:	6902      	ldr	r2, [r0, #16]
    bc62:	b93a      	cbnz	r2, bc74 <bt_conn_auth_cb_register+0x20>
    bc64:	6802      	ldr	r2, [r0, #0]
    bc66:	b95a      	cbnz	r2, bc80 <bt_conn_auth_cb_register+0x2c>
	    (cb->passkey_display || cb->passkey_entry || cb->passkey_confirm ||
    bc68:	6842      	ldr	r2, [r0, #4]
    bc6a:	b94a      	cbnz	r2, bc80 <bt_conn_auth_cb_register+0x2c>
    bc6c:	6882      	ldr	r2, [r0, #8]
    bc6e:	b93a      	cbnz	r2, bc80 <bt_conn_auth_cb_register+0x2c>
    bc70:	6942      	ldr	r2, [r0, #20]
    bc72:	b92a      	cbnz	r2, bc80 <bt_conn_auth_cb_register+0x2c>
#endif
	     cb->pairing_confirm)) {
		return -EINVAL;
	}

	bt_auth = cb;
    bc74:	6018      	str	r0, [r3, #0]
	return 0;
    bc76:	2000      	movs	r0, #0
    bc78:	4770      	bx	lr
		return -EALREADY;
    bc7a:	f06f 0044 	mvn.w	r0, #68	; 0x44
    bc7e:	4770      	bx	lr
		return -EINVAL;
    bc80:	f06f 0015 	mvn.w	r0, #21
}
    bc84:	4770      	bx	lr
    bc86:	bf00      	nop
    bc88:	2000d744 	.word	0x2000d744

0000bc8c <bt_conn_index>:
		__ASSERT(0 <= index && index < ARRAY_SIZE(sco_conns),
			"Invalid bt_conn pointer");
		break;
#endif
	default:
		index = conn - acl_conns;
    bc8c:	4b03      	ldr	r3, [pc, #12]	; (bc9c <bt_conn_index+0x10>)
    bc8e:	1ac0      	subs	r0, r0, r3
    bc90:	4b03      	ldr	r3, [pc, #12]	; (bca0 <bt_conn_index+0x14>)
    bc92:	1180      	asrs	r0, r0, #6
    bc94:	4358      	muls	r0, r3
			 "Invalid bt_conn pointer");
		break;
	}

	return (uint8_t)index;
}
    bc96:	b2c0      	uxtb	r0, r0
    bc98:	4770      	bx	lr
    bc9a:	bf00      	nop
    bc9c:	2000a670 	.word	0x2000a670
    bca0:	aaaaaaab 	.word	0xaaaaaaab

0000bca4 <bt_conn_init>:

	return bt_conn_ref(&acl_conns[index]);
}

int bt_conn_init(void)
{
    bca4:	b510      	push	{r4, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
		k_fifo_put(&free_tx, &conn_tx[i]);
    bca6:	490b      	ldr	r1, [pc, #44]	; (bcd4 <bt_conn_init+0x30>)
    bca8:	480b      	ldr	r0, [pc, #44]	; (bcd8 <bt_conn_init+0x34>)
    bcaa:	f01b f8cc 	bl	26e46 <k_queue_append>
    bcae:	490b      	ldr	r1, [pc, #44]	; (bcdc <bt_conn_init+0x38>)
    bcb0:	4809      	ldr	r0, [pc, #36]	; (bcd8 <bt_conn_init+0x34>)
    bcb2:	f01b f8c8 	bl	26e46 <k_queue_append>
    bcb6:	490a      	ldr	r1, [pc, #40]	; (bce0 <bt_conn_init+0x3c>)
    bcb8:	4807      	ldr	r0, [pc, #28]	; (bcd8 <bt_conn_init+0x34>)
    bcba:	f01b f8c4 	bl	26e46 <k_queue_append>
	}

	bt_att_init();
    bcbe:	f019 fc6c 	bl	2559a <bt_att_init>

	err = bt_smp_init();
    bcc2:	f004 fae1 	bl	10288 <bt_smp_init>
	if (err) {
    bcc6:	4604      	mov	r4, r0
    bcc8:	b908      	cbnz	r0, bcce <bt_conn_init+0x2a>
		return err;
	}

	bt_l2cap_init();
    bcca:	f019 f92d 	bl	24f28 <bt_l2cap_init>
			bt_conn_unref(conn);
		}
	}

	return 0;
}
    bcce:	4620      	mov	r0, r4
    bcd0:	bd10      	pop	{r4, pc}
    bcd2:	bf00      	nop
    bcd4:	2000d74c 	.word	0x2000d74c
    bcd8:	2000a028 	.word	0x2000a028
    bcdc:	2000d75c 	.word	0x2000d75c
    bce0:	2000d76c 	.word	0x2000d76c

0000bce4 <l2cap_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
		struct bt_l2cap *l2cap = &bt_l2cap_pool[i];

		if (l2cap->chan.chan.conn) {
    bce4:	4a0b      	ldr	r2, [pc, #44]	; (bd14 <l2cap_accept+0x30>)
{
    bce6:	b508      	push	{r3, lr}
    bce8:	4603      	mov	r3, r0
		if (l2cap->chan.chan.conn) {
    bcea:	6810      	ldr	r0, [r2, #0]
    bcec:	b918      	cbnz	r0, bcf6 <l2cap_accept+0x12>
			continue;
		}

		l2cap->chan.chan.ops = &ops;
    bcee:	4b0a      	ldr	r3, [pc, #40]	; (bd18 <l2cap_accept+0x34>)
    bcf0:	6053      	str	r3, [r2, #4]
		*chan = &l2cap->chan.chan;
    bcf2:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
}
    bcf4:	bd08      	pop	{r3, pc}
    bcf6:	4909      	ldr	r1, [pc, #36]	; (bd1c <l2cap_accept+0x38>)
    bcf8:	4a09      	ldr	r2, [pc, #36]	; (bd20 <l2cap_accept+0x3c>)
	BT_ERR("No available L2CAP context for conn %p", conn);
    bcfa:	480a      	ldr	r0, [pc, #40]	; (bd24 <l2cap_accept+0x40>)
    bcfc:	1a52      	subs	r2, r2, r1
    bcfe:	08d2      	lsrs	r2, r2, #3
    bd00:	0192      	lsls	r2, r2, #6
    bd02:	f042 0201 	orr.w	r2, r2, #1
    bd06:	4619      	mov	r1, r3
    bd08:	f016 fbaf 	bl	2246a <log_1>
	return -ENOMEM;
    bd0c:	f06f 000b 	mvn.w	r0, #11
    bd10:	e7f0      	b.n	bcf4 <l2cap_accept+0x10>
    bd12:	bf00      	nop
    bd14:	2000a730 	.word	0x2000a730
    bd18:	0002814c 	.word	0x0002814c
    bd1c:	000278c0 	.word	0x000278c0
    bd20:	00027990 	.word	0x00027990
    bd24:	0002cbc1 	.word	0x0002cbc1

0000bd28 <l2cap_create_le_sig_pdu.constprop.0>:
static struct net_buf *l2cap_create_le_sig_pdu(struct net_buf *buf,
    bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    bd2a:	4605      	mov	r5, r0
    bd2c:	460f      	mov	r7, r1
    bd2e:	4616      	mov	r6, r2
	return bt_conn_create_pdu_timeout(pool,
    bd30:	2300      	movs	r3, #0
    bd32:	f44f 3280 	mov.w	r2, #65536	; 0x10000
    bd36:	2104      	movs	r1, #4
    bd38:	2000      	movs	r0, #0
    bd3a:	f7ff fecb 	bl	bad4 <bt_conn_create_pdu_timeout>
	if (!buf) {
    bd3e:	4604      	mov	r4, r0
    bd40:	b960      	cbnz	r0, bd5c <l2cap_create_le_sig_pdu.constprop.0+0x34>
    bd42:	4a0a      	ldr	r2, [pc, #40]	; (bd6c <l2cap_create_le_sig_pdu.constprop.0+0x44>)
    bd44:	4b0a      	ldr	r3, [pc, #40]	; (bd70 <l2cap_create_le_sig_pdu.constprop.0+0x48>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", code);
    bd46:	480b      	ldr	r0, [pc, #44]	; (bd74 <l2cap_create_le_sig_pdu.constprop.0+0x4c>)
    bd48:	1ad2      	subs	r2, r2, r3
    bd4a:	08d2      	lsrs	r2, r2, #3
    bd4c:	0192      	lsls	r2, r2, #6
    bd4e:	f042 0201 	orr.w	r2, r2, #1
    bd52:	4629      	mov	r1, r5
    bd54:	f016 fb89 	bl	2246a <log_1>
}
    bd58:	4620      	mov	r0, r4
    bd5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_add(&buf->b, len);
    bd5c:	2104      	movs	r1, #4
    bd5e:	3008      	adds	r0, #8
    bd60:	f01a fbd6 	bl	26510 <net_buf_simple_add>
	hdr->code = code;
    bd64:	7005      	strb	r5, [r0, #0]
	hdr->ident = ident;
    bd66:	7047      	strb	r7, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    bd68:	8046      	strh	r6, [r0, #2]
	return buf;
    bd6a:	e7f5      	b.n	bd58 <l2cap_create_le_sig_pdu.constprop.0+0x30>
    bd6c:	00027990 	.word	0x00027990
    bd70:	000278c0 	.word	0x000278c0
    bd74:	0002cbe8 	.word	0x0002cbe8

0000bd78 <l2cap_rtx_timeout>:
{
    bd78:	b538      	push	{r3, r4, r5, lr}
    bd7a:	4a0b      	ldr	r2, [pc, #44]	; (bda8 <l2cap_rtx_timeout+0x30>)
    bd7c:	4b0b      	ldr	r3, [pc, #44]	; (bdac <l2cap_rtx_timeout+0x34>)
	struct bt_conn *conn = chan->chan.conn;
    bd7e:	4604      	mov	r4, r0
    bd80:	1ad2      	subs	r2, r2, r3
    bd82:	f854 5d10 	ldr.w	r5, [r4, #-16]!
	BT_ERR("chan %p timeout", chan);
    bd86:	480a      	ldr	r0, [pc, #40]	; (bdb0 <l2cap_rtx_timeout+0x38>)
    bd88:	08d2      	lsrs	r2, r2, #3
    bd8a:	0192      	lsls	r2, r2, #6
    bd8c:	4621      	mov	r1, r4
    bd8e:	f042 0201 	orr.w	r2, r2, #1
    bd92:	f016 fb6a 	bl	2246a <log_1>
	bt_l2cap_chan_remove(conn, &chan->chan);
    bd96:	4628      	mov	r0, r5
    bd98:	4621      	mov	r1, r4
    bd9a:	f019 f823 	bl	24de4 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    bd9e:	4620      	mov	r0, r4
}
    bda0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	bt_l2cap_chan_del(&chan->chan);
    bda4:	f019 b83f 	b.w	24e26 <bt_l2cap_chan_del>
    bda8:	00027990 	.word	0x00027990
    bdac:	000278c0 	.word	0x000278c0
    bdb0:	0002cc10 	.word	0x0002cc10

0000bdb4 <bt_l2cap_connected>:
{
    bdb4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bdb8:	4e2a      	ldr	r6, [pc, #168]	; (be64 <bt_l2cap_connected+0xb0>)
    bdba:	4f2b      	ldr	r7, [pc, #172]	; (be68 <bt_l2cap_connected+0xb4>)
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    bdbc:	f8df 80ac 	ldr.w	r8, [pc, #172]	; be6c <bt_l2cap_connected+0xb8>
{
    bdc0:	4605      	mov	r5, r0
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    bdc2:	42be      	cmp	r6, r7
    bdc4:	d302      	bcc.n	bdcc <bt_l2cap_connected+0x18>
}
    bdc6:	b003      	add	sp, #12
    bdc8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		if (fchan->accept(conn, &chan) < 0) {
    bdcc:	6873      	ldr	r3, [r6, #4]
    bdce:	a901      	add	r1, sp, #4
    bdd0:	4628      	mov	r0, r5
    bdd2:	4798      	blx	r3
    bdd4:	2800      	cmp	r0, #0
    bdd6:	db40      	blt.n	be5a <bt_l2cap_connected+0xa6>
		ch = BT_L2CAP_LE_CHAN(chan);
    bdd8:	9c01      	ldr	r4, [sp, #4]
		ch->rx.cid = fchan->cid;
    bdda:	8833      	ldrh	r3, [r6, #0]
    bddc:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
		ch->tx.cid = fchan->cid;
    bde0:	f8a4 3054 	strh.w	r3, [r4, #84]	; 0x54
    bde4:	2230      	movs	r2, #48	; 0x30
    bde6:	2100      	movs	r1, #0
    bde8:	f104 0010 	add.w	r0, r4, #16
		if (!l2cap_chan_add(conn, chan, fchan->destroy)) {
    bdec:	f8d6 9008 	ldr.w	r9, [r6, #8]
    bdf0:	f018 fb65 	bl	244be <memset>
    bdf4:	f8c4 8014 	str.w	r8, [r4, #20]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    bdf8:	f104 0340 	add.w	r3, r4, #64	; 0x40
    bdfc:	2200      	movs	r2, #0
    bdfe:	f3bf 8f5b 	dmb	ish
    be02:	e853 1f00 	ldrex	r1, [r3]
    be06:	e843 2000 	strex	r0, r2, [r3]
    be0a:	2800      	cmp	r0, #0
    be0c:	d1f9      	bne.n	be02 <bt_l2cap_connected+0x4e>
    be0e:	f3bf 8f5b 	dmb	ish
	parent->next = child;
    be12:	60a2      	str	r2, [r4, #8]
	return list->tail;
    be14:	6d2a      	ldr	r2, [r5, #80]	; 0x50
	sys_slist_append(&conn->channels, &chan->node);
    be16:	f104 0308 	add.w	r3, r4, #8
Z_GENLIST_APPEND(slist, snode)
    be1a:	bb02      	cbnz	r2, be5e <bt_l2cap_connected+0xaa>
	list->head = node;
    be1c:	e9c5 3313 	strd	r3, r3, [r5, #76]	; 0x4c
		if (chan->ops->connected) {
    be20:	9801      	ldr	r0, [sp, #4]
	chan->conn = conn;
    be22:	6025      	str	r5, [r4, #0]
		if (chan->ops->connected) {
    be24:	6843      	ldr	r3, [r0, #4]
	chan->destroy = destroy;
    be26:	f8c4 900c 	str.w	r9, [r4, #12]
		if (chan->ops->connected) {
    be2a:	681b      	ldr	r3, [r3, #0]
    be2c:	b103      	cbz	r3, be30 <bt_l2cap_connected+0x7c>
			chan->ops->connected(chan);
    be2e:	4798      	blx	r3
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be30:	9b01      	ldr	r3, [sp, #4]
    be32:	f3bf 8f5b 	dmb	ish
    be36:	3340      	adds	r3, #64	; 0x40
    be38:	e853 2f00 	ldrex	r2, [r3]
    be3c:	f042 0201 	orr.w	r2, r2, #1
    be40:	e843 2100 	strex	r1, r2, [r3]
    be44:	2900      	cmp	r1, #0
    be46:	d1f7      	bne.n	be38 <bt_l2cap_connected+0x84>
    be48:	f3bf 8f5b 	dmb	ish
		if (chan->ops->status) {
    be4c:	9801      	ldr	r0, [sp, #4]
    be4e:	6843      	ldr	r3, [r0, #4]
    be50:	699b      	ldr	r3, [r3, #24]
    be52:	b113      	cbz	r3, be5a <bt_l2cap_connected+0xa6>
			chan->ops->status(chan, chan->status);
    be54:	f100 0140 	add.w	r1, r0, #64	; 0x40
    be58:	4798      	blx	r3
	Z_STRUCT_SECTION_FOREACH(bt_l2cap_fixed_chan, fchan) {
    be5a:	360c      	adds	r6, #12
    be5c:	e7b1      	b.n	bdc2 <bt_l2cap_connected+0xe>
	parent->next = child;
    be5e:	6013      	str	r3, [r2, #0]
	list->tail = node;
    be60:	652b      	str	r3, [r5, #80]	; 0x50
}
    be62:	e7dd      	b.n	be20 <bt_l2cap_connected+0x6c>
    be64:	000277fc 	.word	0x000277fc
    be68:	00027820 	.word	0x00027820
    be6c:	0000bd79 	.word	0x0000bd79

0000be70 <l2cap_recv>:
	if (buf->len < sizeof(*hdr)) {
    be70:	898b      	ldrh	r3, [r1, #12]
    be72:	2b03      	cmp	r3, #3
{
    be74:	b573      	push	{r0, r1, r4, r5, r6, lr}
    be76:	4606      	mov	r6, r0
    be78:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    be7a:	d80a      	bhi.n	be92 <l2cap_recv+0x22>
    be7c:	492e      	ldr	r1, [pc, #184]	; (bf38 <l2cap_recv+0xc8>)
    be7e:	4b2f      	ldr	r3, [pc, #188]	; (bf3c <l2cap_recv+0xcc>)
		BT_ERR("Too small L2CAP signaling PDU");
    be80:	482f      	ldr	r0, [pc, #188]	; (bf40 <l2cap_recv+0xd0>)
    be82:	1ac9      	subs	r1, r1, r3
    be84:	08c9      	lsrs	r1, r1, #3
    be86:	0189      	lsls	r1, r1, #6
    be88:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Invalid ident value in L2CAP PDU");
    be8c:	f016 fae0 	bl	22450 <log_0>
		return 0;
    be90:	e013      	b.n	beba <l2cap_recv+0x4a>
	return net_buf_simple_pull_mem(&buf->b, len);
    be92:	2104      	movs	r1, #4
    be94:	f105 0008 	add.w	r0, r5, #8
    be98:	f01a fb61 	bl	2655e <net_buf_simple_pull_mem>
	if (buf->len != len) {
    be9c:	89a9      	ldrh	r1, [r5, #12]
	len = sys_le16_to_cpu(hdr->len);
    be9e:	8842      	ldrh	r2, [r0, #2]
	if (buf->len != len) {
    bea0:	428a      	cmp	r2, r1
    bea2:	4604      	mov	r4, r0
    bea4:	d00c      	beq.n	bec0 <l2cap_recv+0x50>
    bea6:	4825      	ldr	r0, [pc, #148]	; (bf3c <l2cap_recv+0xcc>)
    bea8:	4b23      	ldr	r3, [pc, #140]	; (bf38 <l2cap_recv+0xc8>)
    beaa:	1a1b      	subs	r3, r3, r0
    beac:	08db      	lsrs	r3, r3, #3
		BT_ERR("L2CAP length mismatch (%u != %u)", buf->len, len);
    beae:	019b      	lsls	r3, r3, #6
    beb0:	4824      	ldr	r0, [pc, #144]	; (bf44 <l2cap_recv+0xd4>)
    beb2:	f043 0301 	orr.w	r3, r3, #1
    beb6:	f016 faec 	bl	22492 <log_2>
}
    beba:	2000      	movs	r0, #0
    bebc:	b002      	add	sp, #8
    bebe:	bd70      	pop	{r4, r5, r6, pc}
	if (!hdr->ident) {
    bec0:	7843      	ldrb	r3, [r0, #1]
    bec2:	b943      	cbnz	r3, bed6 <l2cap_recv+0x66>
    bec4:	491c      	ldr	r1, [pc, #112]	; (bf38 <l2cap_recv+0xc8>)
    bec6:	4b1d      	ldr	r3, [pc, #116]	; (bf3c <l2cap_recv+0xcc>)
		BT_ERR("Invalid ident value in L2CAP PDU");
    bec8:	481f      	ldr	r0, [pc, #124]	; (bf48 <l2cap_recv+0xd8>)
    beca:	1ac9      	subs	r1, r1, r3
    becc:	08c9      	lsrs	r1, r1, #3
    bece:	0189      	lsls	r1, r1, #6
    bed0:	f041 0101 	orr.w	r1, r1, #1
    bed4:	e7da      	b.n	be8c <l2cap_recv+0x1c>
	switch (hdr->code) {
    bed6:	7801      	ldrb	r1, [r0, #0]
    bed8:	2901      	cmp	r1, #1
    beda:	d0ee      	beq.n	beba <l2cap_recv+0x4a>
    bedc:	2913      	cmp	r1, #19
    bede:	d10a      	bne.n	bef6 <l2cap_recv+0x86>
	if (buf->len < sizeof(*rsp)) {
    bee0:	2a01      	cmp	r2, #1
    bee2:	d8ea      	bhi.n	beba <l2cap_recv+0x4a>
    bee4:	4914      	ldr	r1, [pc, #80]	; (bf38 <l2cap_recv+0xc8>)
    bee6:	4b15      	ldr	r3, [pc, #84]	; (bf3c <l2cap_recv+0xcc>)
		BT_ERR("Too small LE conn param rsp");
    bee8:	4818      	ldr	r0, [pc, #96]	; (bf4c <l2cap_recv+0xdc>)
    beea:	1ac9      	subs	r1, r1, r3
    beec:	08c9      	lsrs	r1, r1, #3
    beee:	0189      	lsls	r1, r1, #6
    bef0:	f041 0101 	orr.w	r1, r1, #1
    bef4:	e7ca      	b.n	be8c <l2cap_recv+0x1c>
    bef6:	4b11      	ldr	r3, [pc, #68]	; (bf3c <l2cap_recv+0xcc>)
    bef8:	4a0f      	ldr	r2, [pc, #60]	; (bf38 <l2cap_recv+0xc8>)
		BT_WARN("Unknown L2CAP PDU code 0x%02x", hdr->code);
    befa:	4815      	ldr	r0, [pc, #84]	; (bf50 <l2cap_recv+0xe0>)
    befc:	1ad2      	subs	r2, r2, r3
    befe:	08d2      	lsrs	r2, r2, #3
    bf00:	0192      	lsls	r2, r2, #6
    bf02:	f042 0202 	orr.w	r2, r2, #2
    bf06:	f016 fab0 	bl	2246a <log_1>
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bf0a:	7861      	ldrb	r1, [r4, #1]
		l2cap_send_reject(chan->conn, hdr->ident,
    bf0c:	6835      	ldr	r5, [r6, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    bf0e:	2202      	movs	r2, #2
    bf10:	2001      	movs	r0, #1
    bf12:	f7ff ff09 	bl	bd28 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    bf16:	4604      	mov	r4, r0
    bf18:	2800      	cmp	r0, #0
    bf1a:	d0ce      	beq.n	beba <l2cap_recv+0x4a>
	return net_buf_simple_add(&buf->b, len);
    bf1c:	2102      	movs	r1, #2
    bf1e:	3008      	adds	r0, #8
    bf20:	f01a faf6 	bl	26510 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    bf24:	2300      	movs	r3, #0
    bf26:	7003      	strb	r3, [r0, #0]
    bf28:	7043      	strb	r3, [r0, #1]
		     bt_conn_tx_cb_t cb, void *user_data);

static inline void bt_l2cap_send(struct bt_conn *conn, uint16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    bf2a:	4622      	mov	r2, r4
    bf2c:	9300      	str	r3, [sp, #0]
    bf2e:	2105      	movs	r1, #5
    bf30:	4628      	mov	r0, r5
    bf32:	f018 ffc0 	bl	24eb6 <bt_l2cap_send_cb>
}
    bf36:	e7c0      	b.n	beba <l2cap_recv+0x4a>
    bf38:	00027990 	.word	0x00027990
    bf3c:	000278c0 	.word	0x000278c0
    bf40:	0002cc20 	.word	0x0002cc20
    bf44:	0002cc3e 	.word	0x0002cc3e
    bf48:	0002cc5f 	.word	0x0002cc5f
    bf4c:	0002cc80 	.word	0x0002cc80
    bf50:	0002cc9c 	.word	0x0002cc9c

0000bf54 <bt_l2cap_recv>:
{
    bf54:	b538      	push	{r3, r4, r5, lr}
	if (buf->len < sizeof(*hdr)) {
    bf56:	898b      	ldrh	r3, [r1, #12]
    bf58:	2b03      	cmp	r3, #3
{
    bf5a:	4605      	mov	r5, r0
    bf5c:	460c      	mov	r4, r1
	if (buf->len < sizeof(*hdr)) {
    bf5e:	d80e      	bhi.n	bf7e <bt_l2cap_recv+0x2a>
    bf60:	4914      	ldr	r1, [pc, #80]	; (bfb4 <bt_l2cap_recv+0x60>)
    bf62:	4b15      	ldr	r3, [pc, #84]	; (bfb8 <bt_l2cap_recv+0x64>)
		BT_ERR("Too small L2CAP PDU received");
    bf64:	4815      	ldr	r0, [pc, #84]	; (bfbc <bt_l2cap_recv+0x68>)
    bf66:	1ac9      	subs	r1, r1, r3
    bf68:	08c9      	lsrs	r1, r1, #3
    bf6a:	0189      	lsls	r1, r1, #6
    bf6c:	f041 0101 	orr.w	r1, r1, #1
    bf70:	f016 fa6e 	bl	22450 <log_0>
	net_buf_unref(buf);
    bf74:	4620      	mov	r0, r4
}
    bf76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	net_buf_unref(buf);
    bf7a:	f011 bb97 	b.w	1d6ac <net_buf_unref>
	return net_buf_simple_pull_mem(&buf->b, len);
    bf7e:	2104      	movs	r1, #4
    bf80:	f104 0008 	add.w	r0, r4, #8
    bf84:	f01a faeb 	bl	2655e <net_buf_simple_pull_mem>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    bf88:	8841      	ldrh	r1, [r0, #2]
    bf8a:	4628      	mov	r0, r5
    bf8c:	f018 ffbc 	bl	24f08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    bf90:	b950      	cbnz	r0, bfa8 <bt_l2cap_recv+0x54>
    bf92:	4b09      	ldr	r3, [pc, #36]	; (bfb8 <bt_l2cap_recv+0x64>)
    bf94:	4a07      	ldr	r2, [pc, #28]	; (bfb4 <bt_l2cap_recv+0x60>)
		BT_WARN("Ignoring data for unknown channel ID 0x%04x", cid);
    bf96:	480a      	ldr	r0, [pc, #40]	; (bfc0 <bt_l2cap_recv+0x6c>)
    bf98:	1ad2      	subs	r2, r2, r3
    bf9a:	08d2      	lsrs	r2, r2, #3
    bf9c:	0192      	lsls	r2, r2, #6
    bf9e:	f042 0202 	orr.w	r2, r2, #2
    bfa2:	f016 fa62 	bl	2246a <log_1>
		net_buf_unref(buf);
    bfa6:	e7e5      	b.n	bf74 <bt_l2cap_recv+0x20>
	chan->ops->recv(chan, buf);
    bfa8:	6843      	ldr	r3, [r0, #4]
    bfaa:	4621      	mov	r1, r4
    bfac:	691b      	ldr	r3, [r3, #16]
    bfae:	4798      	blx	r3
    bfb0:	e7e0      	b.n	bf74 <bt_l2cap_recv+0x20>
    bfb2:	bf00      	nop
    bfb4:	00027990 	.word	0x00027990
    bfb8:	000278c0 	.word	0x000278c0
    bfbc:	0002ccba 	.word	0x0002ccba
    bfc0:	0002ccd7 	.word	0x0002ccd7

0000bfc4 <bt_l2cap_update_conn_param>:
{
    bfc4:	b573      	push	{r0, r1, r4, r5, r6, lr}
    bfc6:	460c      	mov	r4, r1
	ident++;
    bfc8:	4914      	ldr	r1, [pc, #80]	; (c01c <bt_l2cap_update_conn_param+0x58>)
    bfca:	780b      	ldrb	r3, [r1, #0]
    bfcc:	3301      	adds	r3, #1
	if (!ident) {
    bfce:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
		ident++;
    bfd2:	bf08      	it	eq
    bfd4:	2301      	moveq	r3, #1
    bfd6:	700b      	strb	r3, [r1, #0]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    bfd8:	7809      	ldrb	r1, [r1, #0]
{
    bfda:	4605      	mov	r5, r0
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    bfdc:	2208      	movs	r2, #8
    bfde:	2012      	movs	r0, #18
    bfe0:	f7ff fea2 	bl	bd28 <l2cap_create_le_sig_pdu.constprop.0>
	if (!buf) {
    bfe4:	4606      	mov	r6, r0
    bfe6:	b1b0      	cbz	r0, c016 <bt_l2cap_update_conn_param+0x52>
	return net_buf_simple_add(&buf->b, len);
    bfe8:	2108      	movs	r1, #8
    bfea:	4408      	add	r0, r1
    bfec:	f01a fa90 	bl	26510 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    bff0:	8822      	ldrh	r2, [r4, #0]
    bff2:	8002      	strh	r2, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    bff4:	8862      	ldrh	r2, [r4, #2]
    bff6:	8042      	strh	r2, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    bff8:	88a2      	ldrh	r2, [r4, #4]
    bffa:	8082      	strh	r2, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    bffc:	88e2      	ldrh	r2, [r4, #6]
    bffe:	80c2      	strh	r2, [r0, #6]
	bt_l2cap_send_cb(conn, cid, buf, NULL, NULL);
    c000:	2400      	movs	r4, #0
    c002:	9400      	str	r4, [sp, #0]
    c004:	4623      	mov	r3, r4
    c006:	4632      	mov	r2, r6
    c008:	2105      	movs	r1, #5
    c00a:	4628      	mov	r0, r5
    c00c:	f018 ff53 	bl	24eb6 <bt_l2cap_send_cb>
	return 0;
    c010:	4620      	mov	r0, r4
}
    c012:	b002      	add	sp, #8
    c014:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOMEM;
    c016:	f06f 000b 	mvn.w	r0, #11
    c01a:	e7fa      	b.n	c012 <bt_l2cap_update_conn_param+0x4e>
    c01c:	2000f2f3 	.word	0x2000f2f3

0000c020 <att_cfm_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_cfm_sent;
    c020:	4b02      	ldr	r3, [pc, #8]	; (c02c <att_cfm_sent+0xc>)
    c022:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    c026:	f018 bf92 	b.w	24f4e <att_sent>
    c02a:	bf00      	nop
    c02c:	000252ab 	.word	0x000252ab

0000c030 <att_rsp_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_rsp_sent;
    c030:	4b02      	ldr	r3, [pc, #8]	; (c03c <att_rsp_sent+0xc>)
    c032:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    c036:	f018 bf8a 	b.w	24f4e <att_sent>
    c03a:	bf00      	nop
    c03c:	000252c7 	.word	0x000252c7

0000c040 <att_req_sent>:
	struct bt_l2cap_chan *ch = user_data;
	struct bt_att_chan *chan = ATT_CHAN(ch);

	BT_DBG("conn %p chan %p", conn, chan);

	chan->sent = chan_req_sent;
    c040:	4b02      	ldr	r3, [pc, #8]	; (c04c <att_req_sent+0xc>)
    c042:	f8c1 3108 	str.w	r3, [r1, #264]	; 0x108

	att_sent(conn, user_data);
    c046:	f018 bf82 	b.w	24f4e <att_sent>
    c04a:	bf00      	nop
    c04c:	0000c24d 	.word	0x0000c24d

0000c050 <att_get>:

	return 0;
}

static struct bt_att *att_get(struct bt_conn *conn)
{
    c050:	b510      	push	{r4, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att_chan *att_chan;

	if (conn->state != BT_CONN_CONNECTED) {
    c052:	7b43      	ldrb	r3, [r0, #13]
    c054:	2b07      	cmp	r3, #7
    c056:	d00b      	beq.n	c070 <att_get+0x20>
    c058:	4918      	ldr	r1, [pc, #96]	; (c0bc <att_get+0x6c>)
    c05a:	4b19      	ldr	r3, [pc, #100]	; (c0c0 <att_get+0x70>)
		BT_WARN("Not connected");
    c05c:	4819      	ldr	r0, [pc, #100]	; (c0c4 <att_get+0x74>)
    c05e:	1ac9      	subs	r1, r1, r3
    c060:	08c9      	lsrs	r1, r1, #3
    c062:	0189      	lsls	r1, r1, #6
    c064:	f041 0102 	orr.w	r1, r1, #2
		return NULL;
	}

	att_chan = ATT_CHAN(chan);
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
		BT_WARN("ATT channel flagged as disconnected");
    c068:	f016 f9f2 	bl	22450 <log_0>
		return NULL;
    c06c:	2400      	movs	r4, #0
    c06e:	e00e      	b.n	c08e <att_get+0x3e>
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    c070:	2104      	movs	r1, #4
    c072:	f018 ff49 	bl	24f08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    c076:	4604      	mov	r4, r0
    c078:	b958      	cbnz	r0, c092 <att_get+0x42>
    c07a:	4910      	ldr	r1, [pc, #64]	; (c0bc <att_get+0x6c>)
    c07c:	4b10      	ldr	r3, [pc, #64]	; (c0c0 <att_get+0x70>)
		BT_ERR("Unable to find ATT channel");
    c07e:	4812      	ldr	r0, [pc, #72]	; (c0c8 <att_get+0x78>)
    c080:	1ac9      	subs	r1, r1, r3
    c082:	08c9      	lsrs	r1, r1, #3
    c084:	0189      	lsls	r1, r1, #6
    c086:	f041 0101 	orr.w	r1, r1, #1
    c08a:	f016 f9e1 	bl	22450 <log_0>
	}

	return att_chan->att;
}
    c08e:	4620      	mov	r0, r4
    c090:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c092:	f3bf 8f5b 	dmb	ish
    c096:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
    c09a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(att_chan->flags, ATT_DISCONNECTED)) {
    c09e:	075b      	lsls	r3, r3, #29
    c0a0:	d508      	bpl.n	c0b4 <att_get+0x64>
    c0a2:	4906      	ldr	r1, [pc, #24]	; (c0bc <att_get+0x6c>)
    c0a4:	4b06      	ldr	r3, [pc, #24]	; (c0c0 <att_get+0x70>)
		BT_WARN("ATT channel flagged as disconnected");
    c0a6:	4809      	ldr	r0, [pc, #36]	; (c0cc <att_get+0x7c>)
    c0a8:	1ac9      	subs	r1, r1, r3
    c0aa:	08c9      	lsrs	r1, r1, #3
    c0ac:	0189      	lsls	r1, r1, #6
    c0ae:	f041 0102 	orr.w	r1, r1, #2
    c0b2:	e7d9      	b.n	c068 <att_get+0x18>
	return att_chan->att;
    c0b4:	f850 4c08 	ldr.w	r4, [r0, #-8]
    c0b8:	e7e9      	b.n	c08e <att_get+0x3e>
    c0ba:	bf00      	nop
    c0bc:	000278c0 	.word	0x000278c0
    c0c0:	000278c0 	.word	0x000278c0
    c0c4:	0002cd13 	.word	0x0002cd13
    c0c8:	0002cd21 	.word	0x0002cd21
    c0cc:	0002cd3c 	.word	0x0002cd3c

0000c0d0 <bt_att_released>:
	/* Prepend back to the list as it could not be sent */
	sys_slist_prepend(&chan->att->reqs, node);
}

static void bt_att_released(struct bt_l2cap_chan *ch)
{
    c0d0:	b507      	push	{r0, r1, r2, lr}
	struct bt_att_chan *chan = ATT_CHAN(ch);
    c0d2:	3808      	subs	r0, #8
    c0d4:	9001      	str	r0, [sp, #4]

	BT_DBG("chan %p", chan);

	k_mem_slab_free(&chan_slab, (void **)&chan);
    c0d6:	a901      	add	r1, sp, #4
    c0d8:	4802      	ldr	r0, [pc, #8]	; (c0e4 <bt_att_released+0x14>)
    c0da:	f013 fd25 	bl	1fb28 <k_mem_slab_free>
}
    c0de:	b003      	add	sp, #12
    c0e0:	f85d fb04 	ldr.w	pc, [sp], #4
    c0e4:	20009f68 	.word	0x20009f68

0000c0e8 <find_type_cb>:
{
    c0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_att_chan *chan = data->chan;
    c0ec:	f8d2 9000 	ldr.w	r9, [r2]
{
    c0f0:	b091      	sub	sp, #68	; 0x44
    c0f2:	4607      	mov	r7, r0
    c0f4:	460e      	mov	r6, r1
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c0f6:	2500      	movs	r5, #0
    c0f8:	f642 0301 	movw	r3, #10241	; 0x2801
    c0fc:	6800      	ldr	r0, [r0, #0]
	struct bt_conn *conn = chan->chan.chan.conn;
    c0fe:	f8d9 8008 	ldr.w	r8, [r9, #8]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c102:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    c106:	a90b      	add	r1, sp, #44	; 0x2c
{
    c108:	4614      	mov	r4, r2
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c10a:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c10e:	f018 facb 	bl	246a8 <bt_uuid_cmp>
    c112:	2800      	cmp	r0, #0
    c114:	d066      	beq.n	c1e4 <find_type_cb+0xfc>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    c116:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c11a:	6838      	ldr	r0, [r7, #0]
    c11c:	f88d 502c 	strb.w	r5, [sp, #44]	; 0x2c
    c120:	a90b      	add	r1, sp, #44	; 0x2c
    c122:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
    c126:	f018 fabf 	bl	246a8 <bt_uuid_cmp>
    c12a:	b138      	cbz	r0, c13c <find_type_cb+0x54>
		if (data->group &&
    c12c:	68a3      	ldr	r3, [r4, #8]
    c12e:	b11b      	cbz	r3, c138 <find_type_cb+0x50>
    c130:	885a      	ldrh	r2, [r3, #2]
    c132:	42b2      	cmp	r2, r6
    c134:	d200      	bcs.n	c138 <find_type_cb+0x50>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c136:	805e      	strh	r6, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    c138:	2001      	movs	r0, #1
    c13a:	e009      	b.n	c150 <find_type_cb+0x68>
	if (chan->chan.tx.mtu - net_buf_frags_len(data->buf) <
    c13c:	6861      	ldr	r1, [r4, #4]
    c13e:	4608      	mov	r0, r1
    c140:	f018 fefd 	bl	24f3e <net_buf_frags_len>
    c144:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    c148:	1a1b      	subs	r3, r3, r0
    c14a:	2b03      	cmp	r3, #3
    c14c:	d803      	bhi.n	c156 <find_type_cb+0x6e>
		return BT_GATT_ITER_STOP;
    c14e:	2000      	movs	r0, #0
}
    c150:	b011      	add	sp, #68	; 0x44
    c152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	frag = net_buf_frag_last(data->buf);
    c156:	4608      	mov	r0, r1
    c158:	f01a f9b8 	bl	264cc <net_buf_frag_last>
    c15c:	4605      	mov	r5, r0
	len = MIN(chan->chan.tx.mtu - net_buf_frags_len(data->buf),
    c15e:	6860      	ldr	r0, [r4, #4]
    c160:	f018 feed 	bl	24f3e <net_buf_frags_len>
    c164:	f8b9 a05e 	ldrh.w	sl, [r9, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
    c168:	f105 0b08 	add.w	fp, r5, #8
    c16c:	ebaa 0a00 	sub.w	sl, sl, r0
    c170:	4658      	mov	r0, fp
    c172:	f01a fa08 	bl	26586 <net_buf_simple_tailroom>
    c176:	4582      	cmp	sl, r0
    c178:	d237      	bcs.n	c1ea <find_type_cb+0x102>
    c17a:	6860      	ldr	r0, [r4, #4]
    c17c:	f018 fedf 	bl	24f3e <net_buf_frags_len>
    c180:	f8b9 305e 	ldrh.w	r3, [r9, #94]	; 0x5e
    c184:	1a18      	subs	r0, r3, r0
	if (!len) {
    c186:	b970      	cbnz	r0, c1a6 <find_type_cb+0xbe>
		frag = net_buf_alloc(net_buf_pool_get(data->buf->pool_id),
    c188:	6863      	ldr	r3, [r4, #4]
    c18a:	7998      	ldrb	r0, [r3, #6]
    c18c:	f011 f9d0 	bl	1d530 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
    c190:	2200      	movs	r2, #0
    c192:	2300      	movs	r3, #0
    c194:	f01a f966 	bl	26464 <net_buf_alloc_fixed>
		if (!frag) {
    c198:	4605      	mov	r5, r0
    c19a:	2800      	cmp	r0, #0
    c19c:	d0d7      	beq.n	c14e <find_type_cb+0x66>
		net_buf_frag_add(data->buf, frag);
    c19e:	4601      	mov	r1, r0
    c1a0:	6860      	ldr	r0, [r4, #4]
    c1a2:	f01a f9a4 	bl	264ee <net_buf_frag_add>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    c1a6:	2300      	movs	r3, #0
    c1a8:	9300      	str	r3, [sp, #0]
    c1aa:	f8d7 9004 	ldr.w	r9, [r7, #4]
    c1ae:	4639      	mov	r1, r7
    c1b0:	2310      	movs	r3, #16
    c1b2:	aa02      	add	r2, sp, #8
    c1b4:	4640      	mov	r0, r8
    c1b6:	47c8      	blx	r9
	if (read < 0) {
    c1b8:	1e07      	subs	r7, r0, #0
    c1ba:	db13      	blt.n	c1e4 <find_type_cb+0xfc>
	if (read != data->value_len) {
    c1bc:	7c22      	ldrb	r2, [r4, #16]
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c1be:	68e0      	ldr	r0, [r4, #12]
	if (read != data->value_len) {
    c1c0:	42ba      	cmp	r2, r7
    c1c2:	d037      	beq.n	c234 <find_type_cb+0x14c>
		if (!bt_uuid_create(&recvd_uuid.uuid, data->value, data->value_len)) {
    c1c4:	4601      	mov	r1, r0
    c1c6:	a80b      	add	r0, sp, #44	; 0x2c
    c1c8:	f018 fa9c 	bl	24704 <bt_uuid_create>
    c1cc:	b988      	cbnz	r0, c1f2 <find_type_cb+0x10a>
    c1ce:	4a1b      	ldr	r2, [pc, #108]	; (c23c <find_type_cb+0x154>)
    c1d0:	4b1b      	ldr	r3, [pc, #108]	; (c240 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %u", data->value_len);
    c1d2:	7c21      	ldrb	r1, [r4, #16]
    c1d4:	481b      	ldr	r0, [pc, #108]	; (c244 <find_type_cb+0x15c>)
    c1d6:	1ad2      	subs	r2, r2, r3
    c1d8:	08d2      	lsrs	r2, r2, #3
    c1da:	0192      	lsls	r2, r2, #6
    c1dc:	f042 0202 	orr.w	r2, r2, #2
			BT_WARN("Unable to create UUID: size %d", read);
    c1e0:	f016 f943 	bl	2246a <log_1>
	data->group = NULL;
    c1e4:	2300      	movs	r3, #0
    c1e6:	60a3      	str	r3, [r4, #8]
    c1e8:	e7a6      	b.n	c138 <find_type_cb+0x50>
	return net_buf_simple_tailroom(&buf->b);
    c1ea:	4658      	mov	r0, fp
    c1ec:	f01a f9cb 	bl	26586 <net_buf_simple_tailroom>
    c1f0:	e7c9      	b.n	c186 <find_type_cb+0x9e>
		if (!bt_uuid_create(&ref_uuid.uuid, uuid, read)) {
    c1f2:	b2fa      	uxtb	r2, r7
    c1f4:	a902      	add	r1, sp, #8
    c1f6:	a806      	add	r0, sp, #24
    c1f8:	f018 fa84 	bl	24704 <bt_uuid_create>
    c1fc:	b948      	cbnz	r0, c212 <find_type_cb+0x12a>
    c1fe:	4a0f      	ldr	r2, [pc, #60]	; (c23c <find_type_cb+0x154>)
    c200:	4b0f      	ldr	r3, [pc, #60]	; (c240 <find_type_cb+0x158>)
			BT_WARN("Unable to create UUID: size %d", read);
    c202:	4811      	ldr	r0, [pc, #68]	; (c248 <find_type_cb+0x160>)
    c204:	1ad2      	subs	r2, r2, r3
    c206:	08d2      	lsrs	r2, r2, #3
    c208:	0192      	lsls	r2, r2, #6
    c20a:	f042 0202 	orr.w	r2, r2, #2
    c20e:	4639      	mov	r1, r7
    c210:	e7e6      	b.n	c1e0 <find_type_cb+0xf8>
		if (bt_uuid_cmp(&recvd_uuid.uuid, &ref_uuid.uuid)) {
    c212:	a906      	add	r1, sp, #24
    c214:	a80b      	add	r0, sp, #44	; 0x2c
    c216:	f018 fa47 	bl	246a8 <bt_uuid_cmp>
	} else if (memcmp(data->value, uuid, read)) {
    c21a:	2800      	cmp	r0, #0
    c21c:	d1e2      	bne.n	c1e4 <find_type_cb+0xfc>
	data->err = 0x00;
    c21e:	2300      	movs	r3, #0
    c220:	7463      	strb	r3, [r4, #17]
	return net_buf_simple_add(&buf->b, len);
    c222:	2104      	movs	r1, #4
    c224:	f105 0008 	add.w	r0, r5, #8
    c228:	f01a f972 	bl	26510 <net_buf_simple_add>
	data->group = net_buf_add(frag, sizeof(*data->group));
    c22c:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c22e:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c230:	8046      	strh	r6, [r0, #2]
	return BT_GATT_ITER_CONTINUE;
    c232:	e781      	b.n	c138 <find_type_cb+0x50>
	} else if (memcmp(data->value, uuid, read)) {
    c234:	a902      	add	r1, sp, #8
    c236:	f018 f906 	bl	24446 <memcmp>
    c23a:	e7ee      	b.n	c21a <find_type_cb+0x132>
    c23c:	000278c0 	.word	0x000278c0
    c240:	000278c0 	.word	0x000278c0
    c244:	0002cd60 	.word	0x0002cd60
    c248:	0002cd7f 	.word	0x0002cd7f

0000c24c <chan_req_sent>:
	if (chan->req) {
    c24c:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
    c250:	b13b      	cbz	r3, c262 <chan_req_sent+0x16>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    c252:	f100 01e0 	add.w	r1, r0, #224	; 0xe0
    c256:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c25a:	4802      	ldr	r0, [pc, #8]	; (c264 <chan_req_sent+0x18>)
    c25c:	2300      	movs	r3, #0
    c25e:	f014 ba5b 	b.w	20718 <k_delayed_work_submit_to_queue>
}
    c262:	4770      	bx	lr
    c264:	2000aca8 	.word	0x2000aca8

0000c268 <chan_send>:
{
    c268:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c26c:	688b      	ldr	r3, [r1, #8]
    c26e:	781b      	ldrb	r3, [r3, #0]
    c270:	2bd2      	cmp	r3, #210	; 0xd2
{
    c272:	4606      	mov	r6, r0
    c274:	460c      	mov	r4, r1
    c276:	4617      	mov	r7, r2
	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    c278:	d116      	bne.n	c2a8 <chan_send+0x40>
		err = bt_smp_sign(chan->att->conn, buf);
    c27a:	6803      	ldr	r3, [r0, #0]
    c27c:	6818      	ldr	r0, [r3, #0]
    c27e:	f003 fa15 	bl	f6ac <bt_smp_sign>
		if (err) {
    c282:	4605      	mov	r5, r0
    c284:	b180      	cbz	r0, c2a8 <chan_send+0x40>
    c286:	4b24      	ldr	r3, [pc, #144]	; (c318 <chan_send+0xb0>)
    c288:	4924      	ldr	r1, [pc, #144]	; (c31c <chan_send+0xb4>)
			BT_ERR("Error signing data");
    c28a:	4825      	ldr	r0, [pc, #148]	; (c320 <chan_send+0xb8>)
    c28c:	1ac9      	subs	r1, r1, r3
    c28e:	08c9      	lsrs	r1, r1, #3
    c290:	0189      	lsls	r1, r1, #6
    c292:	f041 0101 	orr.w	r1, r1, #1
    c296:	f016 f8db 	bl	22450 <log_0>
			net_buf_unref(buf);
    c29a:	4620      	mov	r0, r4
    c29c:	f011 fa06 	bl	1d6ac <net_buf_unref>
}
    c2a0:	4628      	mov	r0, r5
    c2a2:	b003      	add	sp, #12
    c2a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	state->offset = net_buf_simple_headroom(buf);
    c2a8:	f104 0008 	add.w	r0, r4, #8
    c2ac:	f01a f967 	bl	2657e <net_buf_simple_headroom>
	state->len = buf->len;
    c2b0:	f8b4 900c 	ldrh.w	r9, [r4, #12]
	state->offset = net_buf_simple_headroom(buf);
    c2b4:	4680      	mov	r8, r0
	chan->sent = cb ? cb : chan_cb(buf);
    c2b6:	b957      	cbnz	r7, c2ce <chan_send+0x66>
	switch (att_op_get_type(buf->data[0])) {
    c2b8:	68a3      	ldr	r3, [r4, #8]
    c2ba:	7818      	ldrb	r0, [r3, #0]
    c2bc:	f018 fe5d 	bl	24f7a <att_op_get_type>
    c2c0:	1e43      	subs	r3, r0, #1
    c2c2:	b2db      	uxtb	r3, r3
    c2c4:	2b04      	cmp	r3, #4
    c2c6:	bf9c      	itt	ls
    c2c8:	4a16      	ldrls	r2, [pc, #88]	; (c324 <chan_send+0xbc>)
    c2ca:	f852 7023 	ldrls.w	r7, [r2, r3, lsl #2]
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c2ce:	6833      	ldr	r3, [r6, #0]
	chan->sent = cb ? cb : chan_cb(buf);
    c2d0:	f8c6 7110 	str.w	r7, [r6, #272]	; 0x110
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c2d4:	6818      	ldr	r0, [r3, #0]
	if (cb == chan_rsp_sent) {
    c2d6:	4b14      	ldr	r3, [pc, #80]	; (c328 <chan_send+0xc0>)
    c2d8:	429f      	cmp	r7, r3
    c2da:	d018      	beq.n	c30e <chan_send+0xa6>
	} else if (cb == chan_cfm_sent) {
    c2dc:	4b13      	ldr	r3, [pc, #76]	; (c32c <chan_send+0xc4>)
    c2de:	429f      	cmp	r7, r3
    c2e0:	d017      	beq.n	c312 <chan_send+0xaa>
		return att_sent;
    c2e2:	4913      	ldr	r1, [pc, #76]	; (c330 <chan_send+0xc8>)
    c2e4:	4b13      	ldr	r3, [pc, #76]	; (c334 <chan_send+0xcc>)
    c2e6:	4a14      	ldr	r2, [pc, #80]	; (c338 <chan_send+0xd0>)
    c2e8:	428f      	cmp	r7, r1
    c2ea:	bf18      	it	ne
    c2ec:	4613      	movne	r3, r2
			       &chan->chan.chan);
    c2ee:	3608      	adds	r6, #8
	err = bt_l2cap_send_cb(chan->att->conn, BT_L2CAP_CID_ATT,
    c2f0:	9600      	str	r6, [sp, #0]
    c2f2:	4622      	mov	r2, r4
    c2f4:	2104      	movs	r1, #4
    c2f6:	f018 fdde 	bl	24eb6 <bt_l2cap_send_cb>
	if (err) {
    c2fa:	4605      	mov	r5, r0
    c2fc:	2800      	cmp	r0, #0
    c2fe:	d0cf      	beq.n	c2a0 <chan_send+0x38>
	buf->data = buf->__buf + state->offset;
    c300:	6920      	ldr	r0, [r4, #16]
	buf->len = state->len;
    c302:	f8a4 900c 	strh.w	r9, [r4, #12]
	buf->data = buf->__buf + state->offset;
    c306:	fa10 f088 	uxtah	r0, r0, r8
    c30a:	60a0      	str	r0, [r4, #8]
}
    c30c:	e7c8      	b.n	c2a0 <chan_send+0x38>
		return att_rsp_sent;
    c30e:	4b0b      	ldr	r3, [pc, #44]	; (c33c <chan_send+0xd4>)
    c310:	e7ed      	b.n	c2ee <chan_send+0x86>
		return att_cfm_sent;
    c312:	4b0b      	ldr	r3, [pc, #44]	; (c340 <chan_send+0xd8>)
    c314:	e7eb      	b.n	c2ee <chan_send+0x86>
    c316:	bf00      	nop
    c318:	000278c0 	.word	0x000278c0
    c31c:	000278c0 	.word	0x000278c0
    c320:	0002cd9e 	.word	0x0002cd9e
    c324:	0002816c 	.word	0x0002816c
    c328:	000252c7 	.word	0x000252c7
    c32c:	000252ab 	.word	0x000252ab
    c330:	0000c24d 	.word	0x0000c24d
    c334:	0000c041 	.word	0x0000c041
    c338:	00024f4f 	.word	0x00024f4f
    c33c:	0000c031 	.word	0x0000c031
    c340:	0000c021 	.word	0x0000c021

0000c344 <bt_att_chan_send_rsp.constprop.0>:
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c344:	b538      	push	{r3, r4, r5, lr}
	return chan_send(chan, buf, cb);
    c346:	4a07      	ldr	r2, [pc, #28]	; (c364 <bt_att_chan_send_rsp.constprop.0+0x20>)
static void bt_att_chan_send_rsp(struct bt_att_chan *chan, struct net_buf *buf,
    c348:	4604      	mov	r4, r0
    c34a:	460d      	mov	r5, r1
	return chan_send(chan, buf, cb);
    c34c:	f7ff ff8c 	bl	c268 <chan_send>
	if (err) {
    c350:	b130      	cbz	r0, c360 <bt_att_chan_send_rsp.constprop.0+0x1c>
		net_buf_put(&chan->tx_queue, buf);
    c352:	4629      	mov	r1, r5
    c354:	f104 00c8 	add.w	r0, r4, #200	; 0xc8
}
    c358:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		net_buf_put(&chan->tx_queue, buf);
    c35c:	f01a b8a5 	b.w	264aa <net_buf_put>
}
    c360:	bd38      	pop	{r3, r4, r5, pc}
    c362:	bf00      	nop
    c364:	000252c7 	.word	0x000252c7

0000c368 <read_group_cb>:
{
    c368:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    c36c:	4605      	mov	r5, r0
    c36e:	460e      	mov	r6, r1
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c370:	f04f 0800 	mov.w	r8, #0
    c374:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    c378:	6800      	ldr	r0, [r0, #0]
	struct bt_att_chan *chan = data->chan;
    c37a:	6817      	ldr	r7, [r2, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c37c:	f88d 8008 	strb.w	r8, [sp, #8]
    c380:	a902      	add	r1, sp, #8
{
    c382:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c384:	f8ad 300a 	strh.w	r3, [sp, #10]
    c388:	f018 f98e 	bl	246a8 <bt_uuid_cmp>
    c38c:	b1a0      	cbz	r0, c3b8 <read_group_cb+0x50>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    c38e:	f642 0301 	movw	r3, #10241	; 0x2801
    c392:	6828      	ldr	r0, [r5, #0]
    c394:	f88d 800c 	strb.w	r8, [sp, #12]
    c398:	a903      	add	r1, sp, #12
    c39a:	f8ad 300e 	strh.w	r3, [sp, #14]
    c39e:	f018 f983 	bl	246a8 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    c3a2:	b148      	cbz	r0, c3b8 <read_group_cb+0x50>
		if (data->group &&
    c3a4:	6923      	ldr	r3, [r4, #16]
    c3a6:	b11b      	cbz	r3, c3b0 <read_group_cb+0x48>
    c3a8:	885a      	ldrh	r2, [r3, #2]
    c3aa:	42b2      	cmp	r2, r6
    c3ac:	d200      	bcs.n	c3b0 <read_group_cb+0x48>
			data->group->end_handle = sys_cpu_to_le16(handle);
    c3ae:	805e      	strh	r6, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    c3b0:	2001      	movs	r0, #1
}
    c3b2:	b004      	add	sp, #16
    c3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c3b8:	6861      	ldr	r1, [r4, #4]
    c3ba:	6828      	ldr	r0, [r5, #0]
    c3bc:	f018 f974 	bl	246a8 <bt_uuid_cmp>
    c3c0:	b110      	cbz	r0, c3c8 <read_group_cb+0x60>
		data->group = NULL;
    c3c2:	2300      	movs	r3, #0
    c3c4:	6123      	str	r3, [r4, #16]
    c3c6:	e7f3      	b.n	c3b0 <read_group_cb+0x48>
	if (data->rsp->len &&
    c3c8:	68e3      	ldr	r3, [r4, #12]
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c3ca:	68a0      	ldr	r0, [r4, #8]
	if (data->rsp->len &&
    c3cc:	781a      	ldrb	r2, [r3, #0]
    c3ce:	b13a      	cbz	r2, c3e0 <read_group_cb+0x78>
	    chan->chan.tx.mtu - data->buf->len < data->rsp->len) {
    c3d0:	f8b7 305e 	ldrh.w	r3, [r7, #94]	; 0x5e
    c3d4:	8981      	ldrh	r1, [r0, #12]
    c3d6:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    c3d8:	4293      	cmp	r3, r2
    c3da:	da01      	bge.n	c3e0 <read_group_cb+0x78>
		return BT_GATT_ITER_STOP;
    c3dc:	2000      	movs	r0, #0
    c3de:	e7e8      	b.n	c3b2 <read_group_cb+0x4a>
	return net_buf_simple_add(&buf->b, len);
    c3e0:	2104      	movs	r1, #4
    c3e2:	3008      	adds	r0, #8
    c3e4:	f01a f894 	bl	26510 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c3e8:	4b09      	ldr	r3, [pc, #36]	; (c410 <read_group_cb+0xa8>)
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    c3ea:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c3ec:	68a2      	ldr	r2, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(handle);
    c3ee:	8006      	strh	r6, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(handle);
    c3f0:	8046      	strh	r6, [r0, #2]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_group_cb,
    c3f2:	4629      	mov	r1, r5
    c3f4:	9300      	str	r3, [sp, #0]
    c3f6:	9401      	str	r4, [sp, #4]
    c3f8:	2300      	movs	r3, #0
    c3fa:	4638      	mov	r0, r7
    c3fc:	f018 feca 	bl	25194 <att_chan_read>
	if (read < 0) {
    c400:	2800      	cmp	r0, #0
    c402:	dbeb      	blt.n	c3dc <read_group_cb+0x74>
	if (!data->group) {
    c404:	6920      	ldr	r0, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    c406:	3800      	subs	r0, #0
    c408:	bf18      	it	ne
    c40a:	2001      	movne	r0, #1
    c40c:	e7d1      	b.n	c3b2 <read_group_cb+0x4a>
    c40e:	bf00      	nop
    c410:	00025083 	.word	0x00025083

0000c414 <read_type_cb>:
{
    c414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	struct bt_att_chan *chan = data->chan;
    c418:	f8d2 8000 	ldr.w	r8, [r2]
{
    c41c:	4606      	mov	r6, r0
    c41e:	4689      	mov	r9, r1
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c420:	6800      	ldr	r0, [r0, #0]
    c422:	6851      	ldr	r1, [r2, #4]
	struct bt_conn *conn = chan->chan.chan.conn;
    c424:	f8d8 5008 	ldr.w	r5, [r8, #8]
{
    c428:	4614      	mov	r4, r2
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    c42a:	f018 f93d 	bl	246a8 <bt_uuid_cmp>
    c42e:	4607      	mov	r7, r0
    c430:	2800      	cmp	r0, #0
    c432:	d13e      	bne.n	c4b2 <read_type_cb+0x9e>
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    c434:	4628      	mov	r0, r5
    c436:	2215      	movs	r2, #21
    c438:	4631      	mov	r1, r6
    c43a:	f019 fbf1 	bl	25c20 <bt_gatt_check_perm>
    c43e:	4605      	mov	r5, r0
    c440:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    c442:	b148      	cbz	r0, c458 <read_type_cb+0x44>
		if (data->rsp->len) {
    c444:	68e3      	ldr	r3, [r4, #12]
    c446:	781b      	ldrb	r3, [r3, #0]
    c448:	b923      	cbnz	r3, c454 <read_type_cb+0x40>
		return BT_GATT_ITER_STOP;
    c44a:	2500      	movs	r5, #0
}
    c44c:	4628      	mov	r0, r5
    c44e:	b003      	add	sp, #12
    c450:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
			data->err = 0x00;
    c454:	7527      	strb	r7, [r4, #20]
    c456:	e7f8      	b.n	c44a <read_type_cb+0x36>
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c458:	68a0      	ldr	r0, [r4, #8]
    c45a:	f01a f837 	bl	264cc <net_buf_frag_last>
    c45e:	2102      	movs	r1, #2
    c460:	3008      	adds	r0, #8
    c462:	f01a f855 	bl	26510 <net_buf_simple_add>
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c466:	4b14      	ldr	r3, [pc, #80]	; (c4b8 <read_type_cb+0xa4>)
	data->item = net_buf_add(net_buf_frag_last(data->buf),
    c468:	6120      	str	r0, [r4, #16]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c46a:	68a2      	ldr	r2, [r4, #8]
	data->item->handle = sys_cpu_to_le16(handle);
    c46c:	f8a0 9000 	strh.w	r9, [r0]
	read = att_chan_read(chan, attr, data->buf, 0, attr_read_type_cb, data);
    c470:	4631      	mov	r1, r6
    c472:	9300      	str	r3, [sp, #0]
    c474:	9401      	str	r4, [sp, #4]
    c476:	462b      	mov	r3, r5
    c478:	4640      	mov	r0, r8
    c47a:	f018 fe8b 	bl	25194 <att_chan_read>
	if (read < 0) {
    c47e:	2800      	cmp	r0, #0
    c480:	da07      	bge.n	c492 <read_type_cb+0x7e>
	if (err < 0 && err >= -0xff) {
    c482:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c486:	bf26      	itte	cs
    c488:	4240      	negcs	r0, r0
    c48a:	b2c0      	uxtbcs	r0, r0
	return BT_ATT_ERR_UNLIKELY;
    c48c:	200e      	movcc	r0, #14
		data->err = err_to_att(read);
    c48e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    c490:	e7dc      	b.n	c44c <read_type_cb+0x38>
	if (!data->item) {
    c492:	6923      	ldr	r3, [r4, #16]
    c494:	2b00      	cmp	r3, #0
    c496:	d0d8      	beq.n	c44a <read_type_cb+0x36>
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c498:	68a0      	ldr	r0, [r4, #8]
    c49a:	f018 fd50 	bl	24f3e <net_buf_frags_len>
    c49e:	f8b8 505e 	ldrh.w	r5, [r8, #94]	; 0x5e
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c4a2:	68e3      	ldr	r3, [r4, #12]
	return chan->chan.tx.mtu - net_buf_frags_len(data->buf) >
    c4a4:	1a2d      	subs	r5, r5, r0
	       data->rsp->len ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    c4a6:	7818      	ldrb	r0, [r3, #0]
    c4a8:	4285      	cmp	r5, r0
    c4aa:	bf94      	ite	ls
    c4ac:	2500      	movls	r5, #0
    c4ae:	2501      	movhi	r5, #1
    c4b0:	e7cc      	b.n	c44c <read_type_cb+0x38>
		return BT_GATT_ITER_CONTINUE;
    c4b2:	2501      	movs	r5, #1
    c4b4:	e7ca      	b.n	c44c <read_type_cb+0x38>
    c4b6:	bf00      	nop
    c4b8:	00024f5b 	.word	0x00024f5b

0000c4bc <prep_write_cb>:
{
    c4bc:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    c4c0:	4614      	mov	r4, r2
    c4c2:	4606      	mov	r6, r0
    c4c4:	460f      	mov	r7, r1
	data->err = bt_gatt_check_perm(data->conn, attr,
    c4c6:	222a      	movs	r2, #42	; 0x2a
    c4c8:	4601      	mov	r1, r0
    c4ca:	6820      	ldr	r0, [r4, #0]
    c4cc:	f019 fba8 	bl	25c20 <bt_gatt_check_perm>
    c4d0:	4605      	mov	r5, r0
    c4d2:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    c4d4:	2800      	cmp	r0, #0
    c4d6:	d12e      	bne.n	c536 <prep_write_cb+0x7a>
	if (!(attr->perm & BT_GATT_PERM_PREPARE_WRITE)) {
    c4d8:	7cb3      	ldrb	r3, [r6, #18]
    c4da:	065b      	lsls	r3, r3, #25
    c4dc:	d516      	bpl.n	c50c <prep_write_cb+0x50>
	write = attr->write(data->conn, attr, data->value, data->len,
    c4de:	2301      	movs	r3, #1
    c4e0:	9301      	str	r3, [sp, #4]
    c4e2:	89e3      	ldrh	r3, [r4, #14]
    c4e4:	9300      	str	r3, [sp, #0]
    c4e6:	f8d6 8008 	ldr.w	r8, [r6, #8]
    c4ea:	89a3      	ldrh	r3, [r4, #12]
    c4ec:	68a2      	ldr	r2, [r4, #8]
    c4ee:	6820      	ldr	r0, [r4, #0]
    c4f0:	4631      	mov	r1, r6
    c4f2:	47c0      	blx	r8
	if (write != 0) {
    c4f4:	b150      	cbz	r0, c50c <prep_write_cb+0x50>
	if (err < 0 && err >= -0xff) {
    c4f6:	f110 0fff 	cmn.w	r0, #255	; 0xff
		return -err;
    c4fa:	bf26      	itte	cs
    c4fc:	4243      	negcs	r3, r0
    c4fe:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
    c500:	230e      	movcc	r3, #14
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c502:	7423      	strb	r3, [r4, #16]
}
    c504:	4628      	mov	r0, r5
    c506:	b002      	add	sp, #8
    c508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_alloc_fixed(pool, timeout);
    c50c:	480b      	ldr	r0, [pc, #44]	; (c53c <prep_write_cb+0x80>)
    c50e:	2200      	movs	r2, #0
    c510:	2300      	movs	r3, #0
    c512:	f019 ffa7 	bl	26464 <net_buf_alloc_fixed>
	data->buf = net_buf_alloc(&prep_pool, K_NO_WAIT);
    c516:	6060      	str	r0, [r4, #4]
	if (!data->buf) {
    c518:	b908      	cbnz	r0, c51e <prep_write_cb+0x62>
		data->err = BT_ATT_ERR_PREPARE_QUEUE_FULL;
    c51a:	2309      	movs	r3, #9
    c51c:	e7f1      	b.n	c502 <prep_write_cb+0x46>
	attr_data->offset = data->offset;
    c51e:	89e3      	ldrh	r3, [r4, #14]
    c520:	82c3      	strh	r3, [r0, #22]
	attr_data->handle = handle;
    c522:	8287      	strh	r7, [r0, #20]
	return net_buf_simple_add_mem(&buf->b, mem, len);
    c524:	89a2      	ldrh	r2, [r4, #12]
    c526:	68a1      	ldr	r1, [r4, #8]
    c528:	3008      	adds	r0, #8
    c52a:	f019 fff7 	bl	2651c <net_buf_simple_add_mem>
	data->err = 0U;
    c52e:	2300      	movs	r3, #0
    c530:	7423      	strb	r3, [r4, #16]
	return BT_GATT_ITER_CONTINUE;
    c532:	2501      	movs	r5, #1
    c534:	e7e6      	b.n	c504 <prep_write_cb+0x48>
		return BT_GATT_ITER_STOP;
    c536:	2500      	movs	r5, #0
    c538:	e7e4      	b.n	c504 <prep_write_cb+0x48>
    c53a:	bf00      	nop
    c53c:	2000a148 	.word	0x2000a148

0000c540 <bt_att_accept>:

	return chan;
}

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **ch)
{
    c540:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_chan *chan;

	BT_DBG("conn %p handle %u", conn, conn->handle);

	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c542:	2300      	movs	r3, #0
{
    c544:	4606      	mov	r6, r0
    c546:	460f      	mov	r7, r1
	if (k_mem_slab_alloc(&att_slab, (void **)&att, K_NO_WAIT)) {
    c548:	4828      	ldr	r0, [pc, #160]	; (c5ec <bt_att_accept+0xac>)
    c54a:	2200      	movs	r2, #0
    c54c:	4669      	mov	r1, sp
    c54e:	f013 fabb 	bl	1fac8 <k_mem_slab_alloc>
    c552:	4604      	mov	r4, r0
    c554:	b178      	cbz	r0, c576 <bt_att_accept+0x36>
    c556:	4a26      	ldr	r2, [pc, #152]	; (c5f0 <bt_att_accept+0xb0>)
    c558:	4b26      	ldr	r3, [pc, #152]	; (c5f4 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT context for conn %p", conn);
    c55a:	4827      	ldr	r0, [pc, #156]	; (c5f8 <bt_att_accept+0xb8>)
    c55c:	1ad2      	subs	r2, r2, r3
    c55e:	08d2      	lsrs	r2, r2, #3
    c560:	0192      	lsls	r2, r2, #6
    c562:	f042 0201 	orr.w	r2, r2, #1
    c566:	4631      	mov	r1, r6
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c568:	f015 ff7f 	bl	2246a <log_1>
	sys_slist_init(&att->reqs);
	sys_slist_init(&att->chans);

	chan = att_chan_new(att, 0);
	if (!chan) {
		return -ENOMEM;
    c56c:	f06f 040b 	mvn.w	r4, #11
	}

	*ch = &chan->chan.chan;

	return 0;
}
    c570:	4620      	mov	r0, r4
    c572:	b003      	add	sp, #12
    c574:	bdf0      	pop	{r4, r5, r6, r7, pc}
	(void)memset(att, 0, sizeof(*att));
    c576:	4601      	mov	r1, r0
    c578:	2244      	movs	r2, #68	; 0x44
    c57a:	9800      	ldr	r0, [sp, #0]
    c57c:	f017 ff9f 	bl	244be <memset>
	att->conn = conn;
    c580:	9d00      	ldr	r5, [sp, #0]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c582:	481e      	ldr	r0, [pc, #120]	; (c5fc <bt_att_accept+0xbc>)
	list->tail = NULL;
    c584:	60ac      	str	r4, [r5, #8]
	list->head = NULL;
    c586:	e9c5 6400 	strd	r6, r4, [r5]
	list->tail = NULL;
    c58a:	e9c5 440f 	strd	r4, r4, [r5, #60]	; 0x3c
    c58e:	2200      	movs	r2, #0
    c590:	2300      	movs	r3, #0
    c592:	a901      	add	r1, sp, #4
	SYS_SLIST_FOR_EACH_CONTAINER(&att->chans, chan, node) {
    c594:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&chan_slab, (void **)&chan, K_NO_WAIT)) {
    c596:	f013 fa97 	bl	1fac8 <k_mem_slab_alloc>
    c59a:	4604      	mov	r4, r0
    c59c:	b148      	cbz	r0, c5b2 <bt_att_accept+0x72>
    c59e:	4a14      	ldr	r2, [pc, #80]	; (c5f0 <bt_att_accept+0xb0>)
    c5a0:	4b14      	ldr	r3, [pc, #80]	; (c5f4 <bt_att_accept+0xb4>)
		BT_ERR("No available ATT channel for conn %p", att->conn);
    c5a2:	6829      	ldr	r1, [r5, #0]
    c5a4:	4816      	ldr	r0, [pc, #88]	; (c600 <bt_att_accept+0xc0>)
    c5a6:	1ad2      	subs	r2, r2, r3
    c5a8:	08d2      	lsrs	r2, r2, #3
    c5aa:	0192      	lsls	r2, r2, #6
    c5ac:	f042 0201 	orr.w	r2, r2, #1
    c5b0:	e7da      	b.n	c568 <bt_att_accept+0x28>
	(void)memset(chan, 0, sizeof(*chan));
    c5b2:	4601      	mov	r1, r0
    c5b4:	f44f 728c 	mov.w	r2, #280	; 0x118
    c5b8:	9801      	ldr	r0, [sp, #4]
    c5ba:	f017 ff80 	bl	244be <memset>
	chan->chan.chan.ops = &ops;
    c5be:	9801      	ldr	r0, [sp, #4]
    c5c0:	4b10      	ldr	r3, [pc, #64]	; (c604 <bt_att_accept+0xc4>)
    c5c2:	60c3      	str	r3, [r0, #12]
	z_impl_k_queue_init(queue);
    c5c4:	30c8      	adds	r0, #200	; 0xc8
    c5c6:	f01a fc32 	bl	26e2e <z_impl_k_queue_init>
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    c5ca:	9b01      	ldr	r3, [sp, #4]
    c5cc:	f3bf 8f5b 	dmb	ish
    c5d0:	33c0      	adds	r3, #192	; 0xc0
    c5d2:	e853 2f00 	ldrex	r2, [r3]
    c5d6:	e843 4100 	strex	r1, r4, [r3]
    c5da:	2900      	cmp	r1, #0
    c5dc:	d1f9      	bne.n	c5d2 <bt_att_accept+0x92>
    c5de:	f3bf 8f5b 	dmb	ish
	chan->att = att;
    c5e2:	9b01      	ldr	r3, [sp, #4]
    c5e4:	f843 5b08 	str.w	r5, [r3], #8
	*ch = &chan->chan.chan;
    c5e8:	603b      	str	r3, [r7, #0]
	return 0;
    c5ea:	e7c1      	b.n	c570 <bt_att_accept+0x30>
    c5ec:	20009f4c 	.word	0x20009f4c
    c5f0:	000278c0 	.word	0x000278c0
    c5f4:	000278c0 	.word	0x000278c0
    c5f8:	0002cdb1 	.word	0x0002cdb1
    c5fc:	20009f68 	.word	0x20009f68
    c600:	0002cdd6 	.word	0x0002cdd6
    c604:	2000032c 	.word	0x2000032c

0000c608 <bt_att_connected>:
{
    c608:	b538      	push	{r3, r4, r5, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c60a:	2104      	movs	r1, #4
{
    c60c:	4604      	mov	r4, r0
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    c60e:	6800      	ldr	r0, [r0, #0]
    c610:	f018 fc6a 	bl	24ee8 <bt_l2cap_le_lookup_tx_cid>
	struct bt_att *att = att_chan->att;
    c614:	f850 5c08 	ldr.w	r5, [r0, #-8]
	if (sys_slist_is_empty(&att->chans)) {
    c618:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    c61a:	b93b      	cbnz	r3, c62c <bt_att_connected+0x24>
    c61c:	f105 000c 	add.w	r0, r5, #12
    c620:	f01a fc05 	bl	26e2e <z_impl_k_queue_init>
    c624:	f105 0024 	add.w	r0, r5, #36	; 0x24
    c628:	f01a fc01 	bl	26e2e <z_impl_k_queue_init>
	parent->next = child;
    c62c:	6bea      	ldr	r2, [r5, #60]	; 0x3c
    c62e:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
Z_GENLIST_PREPEND(slist, snode)
    c632:	6c2a      	ldr	r2, [r5, #64]	; 0x40
	sys_slist_prepend(&att->chans, &chan->node);
    c634:	f504 7386 	add.w	r3, r4, #268	; 0x10c
	list->head = node;
    c638:	63eb      	str	r3, [r5, #60]	; 0x3c
Z_GENLIST_PREPEND(slist, snode)
    c63a:	b902      	cbnz	r2, c63e <bt_att_connected+0x36>
	list->tail = node;
    c63c:	642b      	str	r3, [r5, #64]	; 0x40
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c63e:	f3bf 8f5b 	dmb	ish
    c642:	f8d4 30b8 	ldr.w	r3, [r4, #184]	; 0xb8
    c646:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(att_chan->flags, ATT_ENHANCED)) {
    c64a:	071b      	lsls	r3, r3, #28
		ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c64c:	bf5e      	ittt	pl
    c64e:	2317      	movpl	r3, #23
    c650:	f8a4 3056 	strhpl.w	r3, [r4, #86]	; 0x56
		ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    c654:	f8a4 304a 	strhpl.w	r3, [r4, #74]	; 0x4a
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    c658:	2230      	movs	r2, #48	; 0x30
    c65a:	2100      	movs	r1, #0
    c65c:	f104 00d8 	add.w	r0, r4, #216	; 0xd8
    c660:	f017 ff2d 	bl	244be <memset>
    c664:	4b01      	ldr	r3, [pc, #4]	; (c66c <bt_att_connected+0x64>)
    c666:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
}
    c66a:	bd38      	pop	{r3, r4, r5, pc}
    c66c:	0000d0fd 	.word	0x0000d0fd

0000c670 <bt_att_chan_create_pdu>:
{
    c670:	b538      	push	{r3, r4, r5, lr}
    c672:	460d      	mov	r5, r1
	if (len + sizeof(op) > chan->chan.tx.mtu) {
    c674:	f8b0 105e 	ldrh.w	r1, [r0, #94]	; 0x5e
    c678:	3201      	adds	r2, #1
    c67a:	428a      	cmp	r2, r1
    c67c:	d90c      	bls.n	c698 <bt_att_chan_create_pdu+0x28>
    c67e:	481a      	ldr	r0, [pc, #104]	; (c6e8 <bt_att_chan_create_pdu+0x78>)
    c680:	4b1a      	ldr	r3, [pc, #104]	; (c6ec <bt_att_chan_create_pdu+0x7c>)
    c682:	1a1b      	subs	r3, r3, r0
    c684:	08db      	lsrs	r3, r3, #3
		BT_WARN("ATT MTU exceeded, max %u, wanted %zu",
    c686:	019b      	lsls	r3, r3, #6
    c688:	4819      	ldr	r0, [pc, #100]	; (c6f0 <bt_att_chan_create_pdu+0x80>)
    c68a:	f043 0302 	orr.w	r3, r3, #2
    c68e:	f015 ff00 	bl	22492 <log_2>
		return NULL;
    c692:	2400      	movs	r4, #0
}
    c694:	4620      	mov	r0, r4
    c696:	bd38      	pop	{r3, r4, r5, pc}
	switch (att_op_get_type(op)) {
    c698:	4628      	mov	r0, r5
    c69a:	f018 fc6e 	bl	24f7a <att_op_get_type>
    c69e:	2802      	cmp	r0, #2
    c6a0:	d001      	beq.n	c6a6 <bt_att_chan_create_pdu+0x36>
    c6a2:	2804      	cmp	r0, #4
    c6a4:	d114      	bne.n	c6d0 <bt_att_chan_create_pdu+0x60>
		buf = bt_l2cap_create_pdu_timeout(NULL, 0, BT_ATT_TIMEOUT);
    c6a6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    c6aa:	2300      	movs	r3, #0
		buf = bt_l2cap_create_pdu(NULL, 0);
    c6ac:	2100      	movs	r1, #0
    c6ae:	4608      	mov	r0, r1
    c6b0:	f018 fbfe 	bl	24eb0 <bt_l2cap_create_pdu_timeout>
    c6b4:	4604      	mov	r4, r0
	if (!buf) {
    c6b6:	b980      	cbnz	r0, c6da <bt_att_chan_create_pdu+0x6a>
    c6b8:	4b0b      	ldr	r3, [pc, #44]	; (c6e8 <bt_att_chan_create_pdu+0x78>)
    c6ba:	4a0c      	ldr	r2, [pc, #48]	; (c6ec <bt_att_chan_create_pdu+0x7c>)
		BT_ERR("Unable to allocate buffer for op 0x%02x", op);
    c6bc:	480d      	ldr	r0, [pc, #52]	; (c6f4 <bt_att_chan_create_pdu+0x84>)
    c6be:	1ad2      	subs	r2, r2, r3
    c6c0:	08d2      	lsrs	r2, r2, #3
    c6c2:	0192      	lsls	r2, r2, #6
    c6c4:	f042 0201 	orr.w	r2, r2, #1
    c6c8:	4629      	mov	r1, r5
    c6ca:	f015 fece 	bl	2246a <log_1>
		return NULL;
    c6ce:	e7e1      	b.n	c694 <bt_att_chan_create_pdu+0x24>
		buf = bt_l2cap_create_pdu(NULL, 0);
    c6d0:	f04f 32ff 	mov.w	r2, #4294967295
    c6d4:	f04f 33ff 	mov.w	r3, #4294967295
    c6d8:	e7e8      	b.n	c6ac <bt_att_chan_create_pdu+0x3c>
	return net_buf_simple_add(&buf->b, len);
    c6da:	2101      	movs	r1, #1
    c6dc:	3008      	adds	r0, #8
    c6de:	f019 ff17 	bl	26510 <net_buf_simple_add>
	hdr->code = op;
    c6e2:	7005      	strb	r5, [r0, #0]
	return buf;
    c6e4:	e7d6      	b.n	c694 <bt_att_chan_create_pdu+0x24>
    c6e6:	bf00      	nop
    c6e8:	000278c0 	.word	0x000278c0
    c6ec:	000278c0 	.word	0x000278c0
    c6f0:	0002cdfb 	.word	0x0002cdfb
    c6f4:	0002cbe8 	.word	0x0002cbe8

0000c6f8 <bt_att_recv>:
	if (buf->len < sizeof(*hdr)) {
    c6f8:	898b      	ldrh	r3, [r1, #12]
{
    c6fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c6fe:	4604      	mov	r4, r0
    c700:	4688      	mov	r8, r1
	if (buf->len < sizeof(*hdr)) {
    c702:	b963      	cbnz	r3, c71e <bt_att_recv+0x26>
    c704:	494c      	ldr	r1, [pc, #304]	; (c838 <bt_att_recv+0x140>)
    c706:	4b4d      	ldr	r3, [pc, #308]	; (c83c <bt_att_recv+0x144>)
		BT_ERR("Too small ATT PDU received");
    c708:	484d      	ldr	r0, [pc, #308]	; (c840 <bt_att_recv+0x148>)
    c70a:	1ac9      	subs	r1, r1, r3
    c70c:	08c9      	lsrs	r1, r1, #3
    c70e:	0189      	lsls	r1, r1, #6
    c710:	f041 0101 	orr.w	r1, r1, #1
			BT_WARN("Ignoring unexpected indication");
    c714:	f015 fe9c 	bl	22450 <log_0>
}
    c718:	2000      	movs	r0, #0
    c71a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    c71e:	2101      	movs	r1, #1
    c720:	f108 0008 	add.w	r0, r8, #8
    c724:	f019 ff1b 	bl	2655e <net_buf_simple_pull_mem>
	if (!att_chan->att) {
    c728:	f854 3c08 	ldr.w	r3, [r4, #-8]
    c72c:	4605      	mov	r5, r0
    c72e:	2b00      	cmp	r3, #0
    c730:	d0f2      	beq.n	c718 <bt_att_recv+0x20>
		if (hdr->code == handlers[i].op) {
    c732:	7801      	ldrb	r1, [r0, #0]
    c734:	4a43      	ldr	r2, [pc, #268]	; (c844 <bt_att_recv+0x14c>)
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
    c736:	f1a4 0608 	sub.w	r6, r4, #8
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c73a:	2300      	movs	r3, #0
		if (hdr->code == handlers[i].op) {
    c73c:	f812 0033 	ldrb.w	r0, [r2, r3, lsl #3]
    c740:	4288      	cmp	r0, r1
    c742:	d11e      	bne.n	c782 <bt_att_recv+0x8a>
		if (handler->type == ATT_REQUEST &&
    c744:	00d8      	lsls	r0, r3, #3
    c746:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    c74a:	789f      	ldrb	r7, [r3, #2]
    c74c:	2f01      	cmp	r7, #1
    c74e:	d133      	bne.n	c7b8 <bt_att_recv+0xc0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c750:	f3bf 8f5b 	dmb	ish
    c754:	34b8      	adds	r4, #184	; 0xb8
    c756:	e854 3f00 	ldrex	r3, [r4]
    c75a:	f043 0101 	orr.w	r1, r3, #1
    c75e:	e844 1c00 	strex	ip, r1, [r4]
    c762:	f1bc 0f00 	cmp.w	ip, #0
    c766:	d1f6      	bne.n	c756 <bt_att_recv+0x5e>
    c768:	f3bf 8f5b 	dmb	ish
    c76c:	07d9      	lsls	r1, r3, #31
    c76e:	d53e      	bpl.n	c7ee <bt_att_recv+0xf6>
    c770:	4931      	ldr	r1, [pc, #196]	; (c838 <bt_att_recv+0x140>)
    c772:	4b32      	ldr	r3, [pc, #200]	; (c83c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected request");
    c774:	4834      	ldr	r0, [pc, #208]	; (c848 <bt_att_recv+0x150>)
    c776:	1ac9      	subs	r1, r1, r3
    c778:	08c9      	lsrs	r1, r1, #3
    c77a:	0189      	lsls	r1, r1, #6
    c77c:	f041 0102 	orr.w	r1, r1, #2
    c780:	e7c8      	b.n	c714 <bt_att_recv+0x1c>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    c782:	3301      	adds	r3, #1
    c784:	2b0e      	cmp	r3, #14
    c786:	d1d9      	bne.n	c73c <bt_att_recv+0x44>
    c788:	4b2c      	ldr	r3, [pc, #176]	; (c83c <bt_att_recv+0x144>)
    c78a:	4a2b      	ldr	r2, [pc, #172]	; (c838 <bt_att_recv+0x140>)
		BT_WARN("Unhandled ATT code 0x%02x", hdr->code);
    c78c:	482f      	ldr	r0, [pc, #188]	; (c84c <bt_att_recv+0x154>)
    c78e:	1ad2      	subs	r2, r2, r3
    c790:	08d2      	lsrs	r2, r2, #3
    c792:	0192      	lsls	r2, r2, #6
    c794:	f042 0202 	orr.w	r2, r2, #2
    c798:	f015 fe67 	bl	2246a <log_1>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    c79c:	7829      	ldrb	r1, [r5, #0]
    c79e:	4608      	mov	r0, r1
    c7a0:	f018 fbeb 	bl	24f7a <att_op_get_type>
    c7a4:	2800      	cmp	r0, #0
    c7a6:	d0b7      	beq.n	c718 <bt_att_recv+0x20>
	if (!req) {
    c7a8:	2900      	cmp	r1, #0
    c7aa:	d0b5      	beq.n	c718 <bt_att_recv+0x20>
    c7ac:	2306      	movs	r3, #6
    c7ae:	2200      	movs	r2, #0
    c7b0:	4630      	mov	r0, r6
    c7b2:	f018 fe21 	bl	253f8 <send_err_rsp.part.0>
    c7b6:	e7af      	b.n	c718 <bt_att_recv+0x20>
		} else if (handler->type == ATT_INDICATION &&
    c7b8:	2f05      	cmp	r7, #5
    c7ba:	d118      	bne.n	c7ee <bt_att_recv+0xf6>
    c7bc:	f3bf 8f5b 	dmb	ish
    c7c0:	34b8      	adds	r4, #184	; 0xb8
    c7c2:	e854 3f00 	ldrex	r3, [r4]
    c7c6:	f043 0102 	orr.w	r1, r3, #2
    c7ca:	e844 1c00 	strex	ip, r1, [r4]
    c7ce:	f1bc 0f00 	cmp.w	ip, #0
    c7d2:	d1f6      	bne.n	c7c2 <bt_att_recv+0xca>
    c7d4:	f3bf 8f5b 	dmb	ish
    c7d8:	079b      	lsls	r3, r3, #30
    c7da:	d508      	bpl.n	c7ee <bt_att_recv+0xf6>
    c7dc:	4916      	ldr	r1, [pc, #88]	; (c838 <bt_att_recv+0x140>)
    c7de:	4b17      	ldr	r3, [pc, #92]	; (c83c <bt_att_recv+0x144>)
			BT_WARN("Ignoring unexpected indication");
    c7e0:	481b      	ldr	r0, [pc, #108]	; (c850 <bt_att_recv+0x158>)
    c7e2:	1ac9      	subs	r1, r1, r3
    c7e4:	08c9      	lsrs	r1, r1, #3
    c7e6:	0189      	lsls	r1, r1, #6
    c7e8:	f041 0102 	orr.w	r1, r1, #2
    c7ec:	e792      	b.n	c714 <bt_att_recv+0x1c>
	if (buf->len < handler->expect_len) {
    c7ee:	1813      	adds	r3, r2, r0
    c7f0:	f8b8 100c 	ldrh.w	r1, [r8, #12]
    c7f4:	785a      	ldrb	r2, [r3, #1]
    c7f6:	428a      	cmp	r2, r1
    c7f8:	d90e      	bls.n	c818 <bt_att_recv+0x120>
    c7fa:	4a10      	ldr	r2, [pc, #64]	; (c83c <bt_att_recv+0x144>)
    c7fc:	4b0e      	ldr	r3, [pc, #56]	; (c838 <bt_att_recv+0x140>)
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    c7fe:	4815      	ldr	r0, [pc, #84]	; (c854 <bt_att_recv+0x15c>)
    c800:	1a9b      	subs	r3, r3, r2
    c802:	08db      	lsrs	r3, r3, #3
    c804:	019b      	lsls	r3, r3, #6
    c806:	782a      	ldrb	r2, [r5, #0]
    c808:	f043 0301 	orr.w	r3, r3, #1
    c80c:	f015 fe41 	bl	22492 <log_2>
	if (handler->type == ATT_REQUEST && err) {
    c810:	2f01      	cmp	r7, #1
    c812:	d181      	bne.n	c718 <bt_att_recv+0x20>
		err = BT_ATT_ERR_INVALID_PDU;
    c814:	2304      	movs	r3, #4
    c816:	e00a      	b.n	c82e <bt_att_recv+0x136>
		err = handler->func(att_chan, buf);
    c818:	685b      	ldr	r3, [r3, #4]
    c81a:	4641      	mov	r1, r8
    c81c:	4630      	mov	r0, r6
    c81e:	4798      	blx	r3
	if (handler->type == ATT_REQUEST && err) {
    c820:	2f01      	cmp	r7, #1
		err = handler->func(att_chan, buf);
    c822:	4603      	mov	r3, r0
	if (handler->type == ATT_REQUEST && err) {
    c824:	f47f af78 	bne.w	c718 <bt_att_recv+0x20>
    c828:	2800      	cmp	r0, #0
    c82a:	f43f af75 	beq.w	c718 <bt_att_recv+0x20>
		send_err_rsp(att_chan, hdr->code, 0, err);
    c82e:	7829      	ldrb	r1, [r5, #0]
	if (!req) {
    c830:	2900      	cmp	r1, #0
    c832:	f43f af71 	beq.w	c718 <bt_att_recv+0x20>
    c836:	e7ba      	b.n	c7ae <bt_att_recv+0xb6>
    c838:	000278c0 	.word	0x000278c0
    c83c:	000278c0 	.word	0x000278c0
    c840:	0002ce20 	.word	0x0002ce20
    c844:	00028180 	.word	0x00028180
    c848:	0002ce3b 	.word	0x0002ce3b
    c84c:	0002ce95 	.word	0x0002ce95
    c850:	0002ce57 	.word	0x0002ce57
    c854:	0002ce76 	.word	0x0002ce76

0000c858 <att_write_rsp>:
{
    c858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c85c:	461f      	mov	r7, r3
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c85e:	6803      	ldr	r3, [r0, #0]
    c860:	460e      	mov	r6, r1
    c862:	3900      	subs	r1, #0
{
    c864:	b086      	sub	sp, #24
    c866:	4605      	mov	r5, r0
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c868:	bf18      	it	ne
    c86a:	2101      	movne	r1, #1
    c86c:	6818      	ldr	r0, [r3, #0]
{
    c86e:	4690      	mov	r8, r2
	if (!bt_gatt_change_aware(chan->att->conn, req ? true : false)) {
    c870:	f019 fa01 	bl	25c76 <bt_gatt_change_aware>
    c874:	2800      	cmp	r0, #0
    c876:	d04d      	beq.n	c914 <att_write_rsp+0xbc>
	if (!handle) {
    c878:	2f00      	cmp	r7, #0
    c87a:	d04d      	beq.n	c918 <att_write_rsp+0xc0>
	(void)memset(&data, 0, sizeof(data));
    c87c:	2218      	movs	r2, #24
    c87e:	2100      	movs	r1, #0
    c880:	4668      	mov	r0, sp
    c882:	f017 fe1c 	bl	244be <memset>
	if (rsp) {
    c886:	f1b8 0f00 	cmp.w	r8, #0
    c88a:	d126      	bne.n	c8da <att_write_rsp+0x82>
	data.conn = chan->att->conn;
    c88c:	682b      	ldr	r3, [r5, #0]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c88e:	4a23      	ldr	r2, [pc, #140]	; (c91c <att_write_rsp+0xc4>)
	data.conn = chan->att->conn;
    c890:	681b      	ldr	r3, [r3, #0]
    c892:	9300      	str	r3, [sp, #0]
	data.offset = offset;
    c894:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    c898:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    c89c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    c89e:	9303      	str	r3, [sp, #12]
	data.len = len;
    c8a0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    c8a4:	f8ad 3010 	strh.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    c8a8:	2301      	movs	r3, #1
    c8aa:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c8ae:	4639      	mov	r1, r7
    c8b0:	466b      	mov	r3, sp
    c8b2:	4638      	mov	r0, r7
	data.req = req;
    c8b4:	f88d 6008 	strb.w	r6, [sp, #8]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    c8b8:	f018 fb8c 	bl	24fd4 <bt_gatt_foreach_attr>
	if (data.err) {
    c8bc:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c8c0:	b30c      	cbz	r4, c906 <att_write_rsp+0xae>
		if (rsp) {
    c8c2:	f1b8 0f00 	cmp.w	r8, #0
    c8c6:	d019      	beq.n	c8fc <att_write_rsp+0xa4>
			net_buf_unref(data.buf);
    c8c8:	9801      	ldr	r0, [sp, #4]
    c8ca:	f010 feef 	bl	1d6ac <net_buf_unref>
	if (!req) {
    c8ce:	b976      	cbnz	r6, c8ee <att_write_rsp+0x96>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c8d0:	2400      	movs	r4, #0
}
    c8d2:	4620      	mov	r0, r4
    c8d4:	b006      	add	sp, #24
    c8d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		data.buf = bt_att_chan_create_pdu(chan, rsp, 0);
    c8da:	2200      	movs	r2, #0
    c8dc:	4641      	mov	r1, r8
    c8de:	4628      	mov	r0, r5
    c8e0:	f7ff fec6 	bl	c670 <bt_att_chan_create_pdu>
    c8e4:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    c8e6:	2800      	cmp	r0, #0
    c8e8:	d1d0      	bne.n	c88c <att_write_rsp+0x34>
			return BT_ATT_ERR_UNLIKELY;
    c8ea:	240e      	movs	r4, #14
    c8ec:	e7f1      	b.n	c8d2 <att_write_rsp+0x7a>
    c8ee:	f89d 3014 	ldrb.w	r3, [sp, #20]
    c8f2:	463a      	mov	r2, r7
    c8f4:	4631      	mov	r1, r6
    c8f6:	4628      	mov	r0, r5
    c8f8:	f018 fd7e 	bl	253f8 <send_err_rsp.part.0>
		return req == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    c8fc:	2e18      	cmp	r6, #24
    c8fe:	d1e7      	bne.n	c8d0 <att_write_rsp+0x78>
    c900:	f89d 4014 	ldrb.w	r4, [sp, #20]
    c904:	e7e5      	b.n	c8d2 <att_write_rsp+0x7a>
	if (data.buf) {
    c906:	9901      	ldr	r1, [sp, #4]
    c908:	2900      	cmp	r1, #0
    c90a:	d0e1      	beq.n	c8d0 <att_write_rsp+0x78>
		bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    c90c:	4628      	mov	r0, r5
    c90e:	f7ff fd19 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
    c912:	e7de      	b.n	c8d2 <att_write_rsp+0x7a>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    c914:	2412      	movs	r4, #18
    c916:	e7dc      	b.n	c8d2 <att_write_rsp+0x7a>
		return BT_ATT_ERR_INVALID_HANDLE;
    c918:	2401      	movs	r4, #1
    c91a:	e7da      	b.n	c8d2 <att_write_rsp+0x7a>
    c91c:	000250a3 	.word	0x000250a3

0000c920 <att_signed_write_cmd>:
{
    c920:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	handle = sys_le16_to_cpu(req->handle);
    c924:	4688      	mov	r8, r1
	struct bt_conn *conn = chan->chan.chan.conn;
    c926:	6885      	ldr	r5, [r0, #8]
	handle = sys_le16_to_cpu(req->handle);
    c928:	f858 3f08 	ldr.w	r3, [r8, #8]!
{
    c92c:	460c      	mov	r4, r1
    c92e:	4606      	mov	r6, r0
	return net_buf_simple_push(&buf->b, len);
    c930:	2101      	movs	r1, #1
    c932:	4640      	mov	r0, r8
	handle = sys_le16_to_cpu(req->handle);
    c934:	881f      	ldrh	r7, [r3, #0]
    c936:	f019 fe02 	bl	2653e <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    c93a:	4628      	mov	r0, r5
    c93c:	4621      	mov	r1, r4
    c93e:	f002 fe39 	bl	f5b4 <bt_smp_sign_verify>
	if (err) {
    c942:	4605      	mov	r5, r0
    c944:	b168      	cbz	r0, c962 <att_signed_write_cmd+0x42>
    c946:	4b12      	ldr	r3, [pc, #72]	; (c990 <att_signed_write_cmd+0x70>)
    c948:	4912      	ldr	r1, [pc, #72]	; (c994 <att_signed_write_cmd+0x74>)
		BT_ERR("Error verifying data");
    c94a:	4813      	ldr	r0, [pc, #76]	; (c998 <att_signed_write_cmd+0x78>)
    c94c:	1ac9      	subs	r1, r1, r3
    c94e:	08c9      	lsrs	r1, r1, #3
    c950:	0189      	lsls	r1, r1, #6
    c952:	f041 0101 	orr.w	r1, r1, #1
    c956:	f015 fd7b 	bl	22450 <log_0>
		return 0;
    c95a:	2000      	movs	r0, #0
}
    c95c:	b004      	add	sp, #16
    c95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_pull(&buf->b, len);
    c962:	2101      	movs	r1, #1
    c964:	4640      	mov	r0, r8
    c966:	f019 fdf2 	bl	2654e <net_buf_simple_pull>
    c96a:	2102      	movs	r1, #2
    c96c:	4640      	mov	r0, r8
    c96e:	f019 fdee 	bl	2654e <net_buf_simple_pull>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data,
    c972:	89a3      	ldrh	r3, [r4, #12]
    c974:	3b0c      	subs	r3, #12
    c976:	b29b      	uxth	r3, r3
    c978:	9302      	str	r3, [sp, #8]
    c97a:	68a3      	ldr	r3, [r4, #8]
    c97c:	462a      	mov	r2, r5
    c97e:	e9cd 5300 	strd	r5, r3, [sp]
    c982:	4629      	mov	r1, r5
    c984:	463b      	mov	r3, r7
    c986:	4630      	mov	r0, r6
    c988:	f7ff ff66 	bl	c858 <att_write_rsp>
    c98c:	e7e6      	b.n	c95c <att_signed_write_cmd+0x3c>
    c98e:	bf00      	nop
    c990:	000278c0 	.word	0x000278c0
    c994:	000278c0 	.word	0x000278c0
    c998:	0002ceaf 	.word	0x0002ceaf

0000c99c <bt_att_create_pdu>:
{
    c99c:	b570      	push	{r4, r5, r6, lr}
    c99e:	460e      	mov	r6, r1
    c9a0:	4615      	mov	r5, r2
	att = att_get(conn);
    c9a2:	f7ff fb55 	bl	c050 <att_get>
	if (!att) {
    c9a6:	b1c0      	cbz	r0, c9da <bt_att_create_pdu+0x3e>
	return list->head;
    c9a8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
    c9aa:	1c69      	adds	r1, r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c9ac:	b15b      	cbz	r3, c9c6 <bt_att_create_pdu+0x2a>
    c9ae:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
    c9b2:	d008      	beq.n	c9c6 <bt_att_create_pdu+0x2a>
	return node->next;
    c9b4:	681b      	ldr	r3, [r3, #0]
    c9b6:	b10b      	cbz	r3, c9bc <bt_att_create_pdu+0x20>
    c9b8:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
		if (len + sizeof(op) > chan->chan.tx.mtu) {
    c9bc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
    c9c0:	4291      	cmp	r1, r2
    c9c2:	d90c      	bls.n	c9de <bt_att_create_pdu+0x42>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c9c4:	b98b      	cbnz	r3, c9ea <bt_att_create_pdu+0x4e>
    c9c6:	4a0e      	ldr	r2, [pc, #56]	; (ca00 <bt_att_create_pdu+0x64>)
    c9c8:	4b0e      	ldr	r3, [pc, #56]	; (ca04 <bt_att_create_pdu+0x68>)
	BT_WARN("No ATT channel for MTU %zu", len + sizeof(op));
    c9ca:	480f      	ldr	r0, [pc, #60]	; (ca08 <bt_att_create_pdu+0x6c>)
    c9cc:	1ad2      	subs	r2, r2, r3
    c9ce:	08d2      	lsrs	r2, r2, #3
    c9d0:	0192      	lsls	r2, r2, #6
    c9d2:	f042 0202 	orr.w	r2, r2, #2
    c9d6:	f015 fd48 	bl	2246a <log_1>
}
    c9da:	2000      	movs	r0, #0
    c9dc:	bd70      	pop	{r4, r5, r6, pc}
		return bt_att_chan_create_pdu(chan, op, len);
    c9de:	462a      	mov	r2, r5
    c9e0:	4631      	mov	r1, r6
}
    c9e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return bt_att_chan_create_pdu(chan, op, len);
    c9e6:	f7ff be43 	b.w	c670 <bt_att_chan_create_pdu>
Z_GENLIST_PEEK_NEXT(slist, snode)
    c9ea:	f513 748a 	adds.w	r4, r3, #276	; 0x114
    c9ee:	d004      	beq.n	c9fa <bt_att_create_pdu+0x5e>
	return node->next;
    c9f0:	f8d3 4114 	ldr.w	r4, [r3, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    c9f4:	b10c      	cbz	r4, c9fa <bt_att_create_pdu+0x5e>
    c9f6:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
{
    c9fa:	4618      	mov	r0, r3
    c9fc:	4623      	mov	r3, r4
    c9fe:	e7dd      	b.n	c9bc <bt_att_create_pdu+0x20>
    ca00:	000278c0 	.word	0x000278c0
    ca04:	000278c0 	.word	0x000278c0
    ca08:	0002cec4 	.word	0x0002cec4

0000ca0c <att_prepare_write_req>:
{
    ca0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ca10:	460c      	mov	r4, r1
    ca12:	b087      	sub	sp, #28
    ca14:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    ca16:	2104      	movs	r1, #4
    ca18:	f104 0008 	add.w	r0, r4, #8
    ca1c:	f019 fd9f 	bl	2655e <net_buf_simple_pull_mem>
	struct bt_conn *conn = chan->chan.chan.conn;
    ca20:	f8d5 b008 	ldr.w	fp, [r5, #8]
	handle = sys_le16_to_cpu(req->handle);
    ca24:	f8b0 a000 	ldrh.w	sl, [r0]
	offset = sys_le16_to_cpu(req->offset);
    ca28:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	return att_prep_write_rsp(chan, handle, offset, buf->data, buf->len);
    ca2c:	f8d4 8008 	ldr.w	r8, [r4, #8]
    ca30:	89a7      	ldrh	r7, [r4, #12]
	if (!bt_gatt_change_aware(conn, true)) {
    ca32:	2101      	movs	r1, #1
    ca34:	4658      	mov	r0, fp
	handle = sys_le16_to_cpu(req->handle);
    ca36:	fa1f f68a 	uxth.w	r6, sl
	if (!bt_gatt_change_aware(conn, true)) {
    ca3a:	f019 f91c 	bl	25c76 <bt_gatt_change_aware>
    ca3e:	2800      	cmp	r0, #0
    ca40:	d04a      	beq.n	cad8 <att_prepare_write_req+0xcc>
	if (!handle) {
    ca42:	2e00      	cmp	r6, #0
    ca44:	d04a      	beq.n	cadc <att_prepare_write_req+0xd0>
	(void)memset(&data, 0, sizeof(data));
    ca46:	2214      	movs	r2, #20
    ca48:	2100      	movs	r1, #0
    ca4a:	a801      	add	r0, sp, #4
    ca4c:	f017 fd37 	bl	244be <memset>
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ca50:	2301      	movs	r3, #1
    ca52:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca56:	4a23      	ldr	r2, [pc, #140]	; (cae4 <att_prepare_write_req+0xd8>)
	data.conn = conn;
    ca58:	f8cd b004 	str.w	fp, [sp, #4]
	data.len = len;
    ca5c:	b2ff      	uxtb	r7, r7
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca5e:	ab01      	add	r3, sp, #4
    ca60:	4631      	mov	r1, r6
    ca62:	4630      	mov	r0, r6
	data.offset = offset;
    ca64:	f8ad 9012 	strh.w	r9, [sp, #18]
	data.value = value;
    ca68:	f8cd 800c 	str.w	r8, [sp, #12]
	data.len = len;
    ca6c:	f8ad 7010 	strh.w	r7, [sp, #16]
	bt_gatt_foreach_attr(handle, handle, prep_write_cb, &data);
    ca70:	f018 fab0 	bl	24fd4 <bt_gatt_foreach_attr>
	if (data.err) {
    ca74:	f89d 4014 	ldrb.w	r4, [sp, #20]
    ca78:	b154      	cbz	r4, ca90 <att_prepare_write_req+0x84>
	if (!req) {
    ca7a:	4623      	mov	r3, r4
    ca7c:	4632      	mov	r2, r6
    ca7e:	2116      	movs	r1, #22
    ca80:	4628      	mov	r0, r5
    ca82:	f018 fcb9 	bl	253f8 <send_err_rsp.part.0>
		return 0;
    ca86:	2400      	movs	r4, #0
}
    ca88:	4620      	mov	r0, r4
    ca8a:	b007      	add	sp, #28
    ca8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_buf_put(&chan->att->prep_queue, data.buf);
    ca90:	6828      	ldr	r0, [r5, #0]
    ca92:	9902      	ldr	r1, [sp, #8]
    ca94:	3024      	adds	r0, #36	; 0x24
    ca96:	f019 fd08 	bl	264aa <net_buf_put>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_PREPARE_WRITE_RSP, 0);
    ca9a:	4622      	mov	r2, r4
    ca9c:	2117      	movs	r1, #23
    ca9e:	4658      	mov	r0, fp
    caa0:	f7ff ff7c 	bl	c99c <bt_att_create_pdu>
    caa4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    caa6:	b1d8      	cbz	r0, cae0 <att_prepare_write_req+0xd4>
	return net_buf_simple_add(&buf->b, len);
    caa8:	2104      	movs	r1, #4
    caaa:	3008      	adds	r0, #8
    caac:	f019 fd30 	bl	26510 <net_buf_simple_add>
    cab0:	4606      	mov	r6, r0
	rsp->handle = sys_cpu_to_le16(handle);
    cab2:	f8a0 a000 	strh.w	sl, [r0]
	rsp->offset = sys_cpu_to_le16(offset);
    cab6:	f8a0 9002 	strh.w	r9, [r0, #2]
    caba:	9802      	ldr	r0, [sp, #8]
    cabc:	4639      	mov	r1, r7
    cabe:	3008      	adds	r0, #8
    cac0:	f019 fd26 	bl	26510 <net_buf_simple_add>
	memcpy(rsp->value, value, len);
    cac4:	4641      	mov	r1, r8
    cac6:	463a      	mov	r2, r7
    cac8:	1d30      	adds	r0, r6, #4
    caca:	f017 fccd 	bl	24468 <memcpy>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cace:	9902      	ldr	r1, [sp, #8]
    cad0:	4628      	mov	r0, r5
    cad2:	f7ff fc37 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cad6:	e7d7      	b.n	ca88 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    cad8:	2412      	movs	r4, #18
    cada:	e7d5      	b.n	ca88 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_INVALID_HANDLE;
    cadc:	2401      	movs	r4, #1
    cade:	e7d3      	b.n	ca88 <att_prepare_write_req+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    cae0:	240e      	movs	r4, #14
    cae2:	e7d1      	b.n	ca88 <att_prepare_write_req+0x7c>
    cae4:	0000c4bd 	.word	0x0000c4bd

0000cae8 <att_read_group_req>:
{
    cae8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    caec:	898c      	ldrh	r4, [r1, #12]
    caee:	3c04      	subs	r4, #4
    caf0:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    caf2:	2c02      	cmp	r4, #2
{
    caf4:	4605      	mov	r5, r0
    caf6:	b08c      	sub	sp, #48	; 0x30
    caf8:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cafa:	d001      	beq.n	cb00 <att_read_group_req+0x18>
    cafc:	2c10      	cmp	r4, #16
    cafe:	d16e      	bne.n	cbde <att_read_group_req+0xf6>
	return net_buf_simple_pull_mem(&buf->b, len);
    cb00:	2104      	movs	r1, #4
    cb02:	3008      	adds	r0, #8
    cb04:	f019 fd2b 	bl	2655e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cb08:	f10d 0808 	add.w	r8, sp, #8
	start_handle = sys_le16_to_cpu(req->start_handle);
    cb0c:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cb0e:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cb10:	1d01      	adds	r1, r0, #4
    cb12:	4622      	mov	r2, r4
    cb14:	4640      	mov	r0, r8
    cb16:	f017 fdf5 	bl	24704 <bt_uuid_create>
    cb1a:	2800      	cmp	r0, #0
    cb1c:	d061      	beq.n	cbe2 <att_read_group_req+0xfa>
	if (!start || !end) {
    cb1e:	2e00      	cmp	r6, #0
    cb20:	d03a      	beq.n	cb98 <att_read_group_req+0xb0>
    cb22:	2400      	movs	r4, #0
    cb24:	2f00      	cmp	r7, #0
    cb26:	d036      	beq.n	cb96 <att_read_group_req+0xae>
	if (start > end) {
    cb28:	42be      	cmp	r6, r7
    cb2a:	d835      	bhi.n	cb98 <att_read_group_req+0xb0>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cb2c:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cb30:	a901      	add	r1, sp, #4
    cb32:	4640      	mov	r0, r8
    cb34:	f88d 4004 	strb.w	r4, [sp, #4]
    cb38:	f8ad 3006 	strh.w	r3, [sp, #6]
    cb3c:	f017 fdb4 	bl	246a8 <bt_uuid_cmp>
    cb40:	2800      	cmp	r0, #0
    cb42:	d134      	bne.n	cbae <att_read_group_req+0xc6>
	struct bt_conn *conn = chan->chan.chan.conn;
    cb44:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cb46:	2214      	movs	r2, #20
    cb48:	2100      	movs	r1, #0
    cb4a:	a807      	add	r0, sp, #28
    cb4c:	f017 fcb7 	bl	244be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    cb50:	2201      	movs	r2, #1
    cb52:	2111      	movs	r1, #17
    cb54:	4620      	mov	r0, r4
    cb56:	f7ff ff21 	bl	c99c <bt_att_create_pdu>
    cb5a:	9009      	str	r0, [sp, #36]	; 0x24
	if (!data.buf) {
    cb5c:	2800      	cmp	r0, #0
    cb5e:	d040      	beq.n	cbe2 <att_read_group_req+0xfa>
	return net_buf_simple_add(&buf->b, len);
    cb60:	2101      	movs	r1, #1
    cb62:	3008      	adds	r0, #8
	data.uuid = uuid;
    cb64:	e9cd 5807 	strd	r5, r8, [sp, #28]
    cb68:	f019 fcd2 	bl	26510 <net_buf_simple_add>
	data.rsp->len = 0U;
    cb6c:	f04f 0800 	mov.w	r8, #0
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cb70:	900a      	str	r0, [sp, #40]	; 0x28
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb72:	ab07      	add	r3, sp, #28
	data.rsp->len = 0U;
    cb74:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb78:	4a1b      	ldr	r2, [pc, #108]	; (cbe8 <att_read_group_req+0x100>)
	data.group = NULL;
    cb7a:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    cb7e:	4639      	mov	r1, r7
    cb80:	4630      	mov	r0, r6
    cb82:	f018 fa27 	bl	24fd4 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    cb86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    cb88:	781c      	ldrb	r4, [r3, #0]
    cb8a:	bb1c      	cbnz	r4, cbd4 <att_read_group_req+0xec>
		net_buf_unref(data.buf);
    cb8c:	9809      	ldr	r0, [sp, #36]	; 0x24
    cb8e:	f010 fd8d 	bl	1d6ac <net_buf_unref>
	if (!req) {
    cb92:	230a      	movs	r3, #10
    cb94:	e018      	b.n	cbc8 <att_read_group_req+0xe0>
			*err = 0U;
    cb96:	463e      	mov	r6, r7
	if (!req) {
    cb98:	2301      	movs	r3, #1
    cb9a:	4632      	mov	r2, r6
    cb9c:	2110      	movs	r1, #16
    cb9e:	4628      	mov	r0, r5
    cba0:	f018 fc2a 	bl	253f8 <send_err_rsp.part.0>
		return 0;
    cba4:	2400      	movs	r4, #0
}
    cba6:	4620      	mov	r0, r4
    cba8:	b00c      	add	sp, #48	; 0x30
    cbaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    cbae:	f642 0301 	movw	r3, #10241	; 0x2801
    cbb2:	a907      	add	r1, sp, #28
    cbb4:	4640      	mov	r0, r8
    cbb6:	f88d 401c 	strb.w	r4, [sp, #28]
    cbba:	f8ad 301e 	strh.w	r3, [sp, #30]
    cbbe:	f017 fd73 	bl	246a8 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    cbc2:	2800      	cmp	r0, #0
    cbc4:	d0be      	beq.n	cb44 <att_read_group_req+0x5c>
	if (!req) {
    cbc6:	2310      	movs	r3, #16
    cbc8:	4632      	mov	r2, r6
    cbca:	2110      	movs	r1, #16
    cbcc:	4628      	mov	r0, r5
    cbce:	f018 fc13 	bl	253f8 <send_err_rsp.part.0>
		return 0;
    cbd2:	e7e8      	b.n	cba6 <att_read_group_req+0xbe>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cbd4:	9909      	ldr	r1, [sp, #36]	; 0x24
    cbd6:	4628      	mov	r0, r5
    cbd8:	f7ff fbb4 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cbdc:	e7e2      	b.n	cba4 <att_read_group_req+0xbc>
		return BT_ATT_ERR_INVALID_PDU;
    cbde:	2404      	movs	r4, #4
    cbe0:	e7e1      	b.n	cba6 <att_read_group_req+0xbe>
		return BT_ATT_ERR_UNLIKELY;
    cbe2:	240e      	movs	r4, #14
    cbe4:	e7df      	b.n	cba6 <att_read_group_req+0xbe>
    cbe6:	bf00      	nop
    cbe8:	0000c369 	.word	0x0000c369

0000cbec <att_read_mult_req>:
{
    cbec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    cbf0:	6886      	ldr	r6, [r0, #8]
{
    cbf2:	b085      	sub	sp, #20
	(void)memset(&data, 0, sizeof(data));
    cbf4:	2210      	movs	r2, #16
{
    cbf6:	4604      	mov	r4, r0
    cbf8:	460d      	mov	r5, r1
	(void)memset(&data, 0, sizeof(data));
    cbfa:	4668      	mov	r0, sp
    cbfc:	2100      	movs	r1, #0
    cbfe:	f017 fc5e 	bl	244be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    cc02:	2200      	movs	r2, #0
    cc04:	210f      	movs	r1, #15
    cc06:	4630      	mov	r0, r6
    cc08:	f7ff fec8 	bl	c99c <bt_att_create_pdu>
    cc0c:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    cc0e:	b358      	cbz	r0, cc68 <att_read_mult_req+0x7c>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc10:	f8df 9058 	ldr.w	r9, [pc, #88]	; cc6c <att_read_mult_req+0x80>
	data.chan = chan;
    cc14:	9400      	str	r4, [sp, #0]
	return net_buf_simple_pull_le16(&buf->b);
    cc16:	f105 0708 	add.w	r7, r5, #8
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cc1a:	f04f 0801 	mov.w	r8, #1
	while (buf->len >= sizeof(uint16_t)) {
    cc1e:	89ab      	ldrh	r3, [r5, #12]
    cc20:	2b01      	cmp	r3, #1
    cc22:	d804      	bhi.n	cc2e <att_read_mult_req+0x42>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cc24:	9902      	ldr	r1, [sp, #8]
    cc26:	4620      	mov	r0, r4
    cc28:	f7ff fb8c 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
    cc2c:	e018      	b.n	cc60 <att_read_mult_req+0x74>
    cc2e:	4638      	mov	r0, r7
    cc30:	f019 fc9d 	bl	2656e <net_buf_simple_pull_le16>
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc34:	466b      	mov	r3, sp
    cc36:	464a      	mov	r2, r9
    cc38:	4601      	mov	r1, r0
    cc3a:	4606      	mov	r6, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    cc3c:	f88d 800c 	strb.w	r8, [sp, #12]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    cc40:	f018 f9c8 	bl	24fd4 <bt_gatt_foreach_attr>
		if (data.err) {
    cc44:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cc48:	2b00      	cmp	r3, #0
    cc4a:	d0e8      	beq.n	cc1e <att_read_mult_req+0x32>
			net_buf_unref(data.buf);
    cc4c:	9802      	ldr	r0, [sp, #8]
    cc4e:	f010 fd2d 	bl	1d6ac <net_buf_unref>
	if (!req) {
    cc52:	f89d 300c 	ldrb.w	r3, [sp, #12]
    cc56:	4632      	mov	r2, r6
    cc58:	210e      	movs	r1, #14
    cc5a:	4620      	mov	r0, r4
    cc5c:	f018 fbcc 	bl	253f8 <send_err_rsp.part.0>
	return 0;
    cc60:	2000      	movs	r0, #0
}
    cc62:	b005      	add	sp, #20
    cc64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_ATT_ERR_UNLIKELY;
    cc68:	200e      	movs	r0, #14
    cc6a:	e7fa      	b.n	cc62 <att_read_mult_req+0x76>
    cc6c:	000252e3 	.word	0x000252e3

0000cc70 <att_read_rsp>:
{
    cc70:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = chan->chan.chan.conn;
    cc74:	f8d0 8008 	ldr.w	r8, [r0, #8]
{
    cc78:	4605      	mov	r5, r0
    cc7a:	460f      	mov	r7, r1
	if (!bt_gatt_change_aware(conn, true)) {
    cc7c:	4640      	mov	r0, r8
    cc7e:	2101      	movs	r1, #1
{
    cc80:	4614      	mov	r4, r2
    cc82:	461e      	mov	r6, r3
	if (!bt_gatt_change_aware(conn, true)) {
    cc84:	f018 fff7 	bl	25c76 <bt_gatt_change_aware>
    cc88:	b388      	cbz	r0, ccee <att_read_rsp+0x7e>
	if (!handle) {
    cc8a:	b396      	cbz	r6, ccf2 <att_read_rsp+0x82>
	(void)memset(&data, 0, sizeof(data));
    cc8c:	2210      	movs	r2, #16
    cc8e:	2100      	movs	r1, #0
    cc90:	4668      	mov	r0, sp
    cc92:	f017 fc14 	bl	244be <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    cc96:	2200      	movs	r2, #0
    cc98:	4621      	mov	r1, r4
    cc9a:	4640      	mov	r0, r8
    cc9c:	f7ff fe7e 	bl	c99c <bt_att_create_pdu>
    cca0:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    cca2:	b340      	cbz	r0, ccf6 <att_read_rsp+0x86>
	data.offset = offset;
    cca4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    cca8:	f8ad 3004 	strh.w	r3, [sp, #4]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    ccac:	2301      	movs	r3, #1
    ccae:	f88d 300c 	strb.w	r3, [sp, #12]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ccb2:	4a12      	ldr	r2, [pc, #72]	; (ccfc <att_read_rsp+0x8c>)
	data.chan = chan;
    ccb4:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    ccb6:	466b      	mov	r3, sp
    ccb8:	4631      	mov	r1, r6
    ccba:	4630      	mov	r0, r6
    ccbc:	f018 f98a 	bl	24fd4 <bt_gatt_foreach_attr>
	if (data.err) {
    ccc0:	f89d 400c 	ldrb.w	r4, [sp, #12]
    ccc4:	b174      	cbz	r4, cce4 <att_read_rsp+0x74>
		net_buf_unref(data.buf);
    ccc6:	9802      	ldr	r0, [sp, #8]
    ccc8:	f010 fcf0 	bl	1d6ac <net_buf_unref>
	if (!req) {
    cccc:	f89d 300c 	ldrb.w	r3, [sp, #12]
    ccd0:	4632      	mov	r2, r6
    ccd2:	4639      	mov	r1, r7
    ccd4:	4628      	mov	r0, r5
    ccd6:	f018 fb8f 	bl	253f8 <send_err_rsp.part.0>
		return 0;
    ccda:	2400      	movs	r4, #0
}
    ccdc:	4620      	mov	r0, r4
    ccde:	b004      	add	sp, #16
    cce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cce4:	9902      	ldr	r1, [sp, #8]
    cce6:	4628      	mov	r0, r5
    cce8:	f7ff fb2c 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    ccec:	e7f6      	b.n	ccdc <att_read_rsp+0x6c>
		return BT_ATT_ERR_DB_OUT_OF_SYNC;
    ccee:	2412      	movs	r4, #18
    ccf0:	e7f4      	b.n	ccdc <att_read_rsp+0x6c>
		return BT_ATT_ERR_INVALID_HANDLE;
    ccf2:	2401      	movs	r4, #1
    ccf4:	e7f2      	b.n	ccdc <att_read_rsp+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    ccf6:	240e      	movs	r4, #14
    ccf8:	e7f0      	b.n	ccdc <att_read_rsp+0x6c>
    ccfa:	bf00      	nop
    ccfc:	000252e3 	.word	0x000252e3

0000cd00 <att_read_type_req>:
{
    cd00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t uuid_len = buf->len - sizeof(*req);
    cd04:	898c      	ldrh	r4, [r1, #12]
    cd06:	3c04      	subs	r4, #4
    cd08:	b2e4      	uxtb	r4, r4
	if (uuid_len != 2 && uuid_len != 16) {
    cd0a:	2c02      	cmp	r4, #2
{
    cd0c:	4605      	mov	r5, r0
    cd0e:	b08c      	sub	sp, #48	; 0x30
    cd10:	4608      	mov	r0, r1
	if (uuid_len != 2 && uuid_len != 16) {
    cd12:	d001      	beq.n	cd18 <att_read_type_req+0x18>
    cd14:	2c10      	cmp	r4, #16
    cd16:	d14f      	bne.n	cdb8 <att_read_type_req+0xb8>
	return net_buf_simple_pull_mem(&buf->b, len);
    cd18:	2104      	movs	r1, #4
    cd1a:	3008      	adds	r0, #8
    cd1c:	f019 fc1f 	bl	2655e <net_buf_simple_pull_mem>
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cd20:	f10d 0804 	add.w	r8, sp, #4
	start_handle = sys_le16_to_cpu(req->start_handle);
    cd24:	8806      	ldrh	r6, [r0, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    cd26:	8847      	ldrh	r7, [r0, #2]
	if (!bt_uuid_create(&u.uuid, req->uuid, uuid_len)) {
    cd28:	1d01      	adds	r1, r0, #4
    cd2a:	4622      	mov	r2, r4
    cd2c:	4640      	mov	r0, r8
    cd2e:	f017 fce9 	bl	24704 <bt_uuid_create>
    cd32:	b188      	cbz	r0, cd58 <att_read_type_req+0x58>
	if (!start || !end) {
    cd34:	b19e      	cbz	r6, cd5e <att_read_type_req+0x5e>
    cd36:	b18f      	cbz	r7, cd5c <att_read_type_req+0x5c>
	if (start > end) {
    cd38:	42b7      	cmp	r7, r6
    cd3a:	d310      	bcc.n	cd5e <att_read_type_req+0x5e>
	(void)memset(&data, 0, sizeof(data));
    cd3c:	2218      	movs	r2, #24
	struct bt_conn *conn = chan->chan.chan.conn;
    cd3e:	68ac      	ldr	r4, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    cd40:	2100      	movs	r1, #0
    cd42:	eb0d 0002 	add.w	r0, sp, r2
    cd46:	f017 fbba 	bl	244be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    cd4a:	2201      	movs	r2, #1
    cd4c:	2109      	movs	r1, #9
    cd4e:	4620      	mov	r0, r4
    cd50:	f7ff fe24 	bl	c99c <bt_att_create_pdu>
    cd54:	9008      	str	r0, [sp, #32]
	if (!data.buf) {
    cd56:	b968      	cbnz	r0, cd74 <att_read_type_req+0x74>
		return BT_ATT_ERR_UNLIKELY;
    cd58:	240e      	movs	r4, #14
    cd5a:	e007      	b.n	cd6c <att_read_type_req+0x6c>
			*err = 0U;
    cd5c:	463e      	mov	r6, r7
	if (!req) {
    cd5e:	2301      	movs	r3, #1
    cd60:	4632      	mov	r2, r6
    cd62:	2108      	movs	r1, #8
    cd64:	4628      	mov	r0, r5
    cd66:	f018 fb47 	bl	253f8 <send_err_rsp.part.0>
		return 0;
    cd6a:	2400      	movs	r4, #0
}
    cd6c:	4620      	mov	r0, r4
    cd6e:	b00c      	add	sp, #48	; 0x30
    cd70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return net_buf_simple_add(&buf->b, len);
    cd74:	2101      	movs	r1, #1
    cd76:	3008      	adds	r0, #8
	data.uuid = uuid;
    cd78:	e9cd 5806 	strd	r5, r8, [sp, #24]
    cd7c:	f019 fbc8 	bl	26510 <net_buf_simple_add>
	data.rsp->len = 0U;
    cd80:	f04f 0800 	mov.w	r8, #0
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cd84:	230a      	movs	r3, #10
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    cd86:	9009      	str	r0, [sp, #36]	; 0x24
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd88:	4a0c      	ldr	r2, [pc, #48]	; (cdbc <att_read_type_req+0xbc>)
	data.rsp->len = 0U;
    cd8a:	f880 8000 	strb.w	r8, [r0]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd8e:	4639      	mov	r1, r7
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    cd90:	f88d 302c 	strb.w	r3, [sp, #44]	; 0x2c
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    cd94:	4630      	mov	r0, r6
    cd96:	ab06      	add	r3, sp, #24
    cd98:	f018 f91c 	bl	24fd4 <bt_gatt_foreach_attr>
	if (data.err) {
    cd9c:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
    cda0:	b12c      	cbz	r4, cdae <att_read_type_req+0xae>
		net_buf_unref(data.buf);
    cda2:	9808      	ldr	r0, [sp, #32]
    cda4:	f010 fc82 	bl	1d6ac <net_buf_unref>
	if (!req) {
    cda8:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    cdac:	e7d8      	b.n	cd60 <att_read_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cdae:	9908      	ldr	r1, [sp, #32]
    cdb0:	4628      	mov	r0, r5
    cdb2:	f7ff fac7 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    cdb6:	e7d9      	b.n	cd6c <att_read_type_req+0x6c>
		return BT_ATT_ERR_INVALID_PDU;
    cdb8:	2404      	movs	r4, #4
    cdba:	e7d7      	b.n	cd6c <att_read_type_req+0x6c>
    cdbc:	0000c415 	.word	0x0000c415

0000cdc0 <att_find_type_req>:
{
    cdc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    cdc4:	4688      	mov	r8, r1
    cdc6:	b086      	sub	sp, #24
    cdc8:	4605      	mov	r5, r0
	return net_buf_simple_pull_mem(&buf->b, len);
    cdca:	2106      	movs	r1, #6
    cdcc:	f108 0008 	add.w	r0, r8, #8
    cdd0:	f019 fbc5 	bl	2655e <net_buf_simple_pull_mem>
	start_handle = sys_le16_to_cpu(req->start_handle);
    cdd4:	8807      	ldrh	r7, [r0, #0]
	if (!start || !end) {
    cdd6:	b317      	cbz	r7, ce1e <att_find_type_req+0x5e>
	end_handle = sys_le16_to_cpu(req->end_handle);
    cdd8:	f8b0 9002 	ldrh.w	r9, [r0, #2]
	if (!start || !end) {
    cddc:	f1b9 0f00 	cmp.w	r9, #0
    cde0:	d01c      	beq.n	ce1c <att_find_type_req+0x5c>
	if (start > end) {
    cde2:	454f      	cmp	r7, r9
    cde4:	d81b      	bhi.n	ce1e <att_find_type_req+0x5e>
	type = sys_le16_to_cpu(req->type);
    cde6:	8883      	ldrh	r3, [r0, #4]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    cde8:	f8ad 3002 	strh.w	r3, [sp, #2]
    cdec:	2400      	movs	r4, #0
    cdee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    cdf2:	a901      	add	r1, sp, #4
    cdf4:	4668      	mov	r0, sp
	value = buf->data;
    cdf6:	f8d8 a008 	ldr.w	sl, [r8, #8]
	if (bt_uuid_cmp(BT_UUID_DECLARE_16(type), BT_UUID_GATT_PRIMARY)) {
    cdfa:	f88d 4000 	strb.w	r4, [sp]
    cdfe:	f88d 4004 	strb.w	r4, [sp, #4]
    ce02:	f8ad 3006 	strh.w	r3, [sp, #6]
    ce06:	f017 fc4f 	bl	246a8 <bt_uuid_cmp>
    ce0a:	4606      	mov	r6, r0
    ce0c:	b190      	cbz	r0, ce34 <att_find_type_req+0x74>
	if (!req) {
    ce0e:	230a      	movs	r3, #10
    ce10:	463a      	mov	r2, r7
    ce12:	2106      	movs	r1, #6
    ce14:	4628      	mov	r0, r5
    ce16:	f018 faef 	bl	253f8 <send_err_rsp.part.0>
		return 0;
    ce1a:	e007      	b.n	ce2c <att_find_type_req+0x6c>
			*err = 0U;
    ce1c:	464f      	mov	r7, r9
	if (!req) {
    ce1e:	2301      	movs	r3, #1
    ce20:	463a      	mov	r2, r7
    ce22:	2106      	movs	r1, #6
    ce24:	4628      	mov	r0, r5
    ce26:	f018 fae7 	bl	253f8 <send_err_rsp.part.0>
		return 0;
    ce2a:	2400      	movs	r4, #0
}
    ce2c:	4620      	mov	r0, r4
    ce2e:	b006      	add	sp, #24
    ce30:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    ce34:	f898 400c 	ldrb.w	r4, [r8, #12]
	struct bt_conn *conn = chan->chan.chan.conn;
    ce38:	f8d5 8008 	ldr.w	r8, [r5, #8]
	(void)memset(&data, 0, sizeof(data));
    ce3c:	4601      	mov	r1, r0
    ce3e:	2214      	movs	r2, #20
    ce40:	a801      	add	r0, sp, #4
    ce42:	f017 fb3c 	bl	244be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    ce46:	4632      	mov	r2, r6
    ce48:	2107      	movs	r1, #7
    ce4a:	4640      	mov	r0, r8
    ce4c:	f7ff fda6 	bl	c99c <bt_att_create_pdu>
    ce50:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    ce52:	b1d8      	cbz	r0, ce8c <att_find_type_req+0xcc>
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    ce54:	230a      	movs	r3, #10
    ce56:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce5a:	4a0d      	ldr	r2, [pc, #52]	; (ce90 <att_find_type_req+0xd0>)
	data.value_len = value_len;
    ce5c:	f88d 4014 	strb.w	r4, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce60:	ab01      	add	r3, sp, #4
    ce62:	4649      	mov	r1, r9
    ce64:	4638      	mov	r0, r7
	data.value = value;
    ce66:	e9cd 6a03 	strd	r6, sl, [sp, #12]
	data.chan = chan;
    ce6a:	9501      	str	r5, [sp, #4]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    ce6c:	f018 f8b2 	bl	24fd4 <bt_gatt_foreach_attr>
	if (data.err) {
    ce70:	f89d 4015 	ldrb.w	r4, [sp, #21]
    ce74:	b12c      	cbz	r4, ce82 <att_find_type_req+0xc2>
		net_buf_unref(data.buf);
    ce76:	9802      	ldr	r0, [sp, #8]
    ce78:	f010 fc18 	bl	1d6ac <net_buf_unref>
	if (!req) {
    ce7c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    ce80:	e7ce      	b.n	ce20 <att_find_type_req+0x60>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    ce82:	9902      	ldr	r1, [sp, #8]
    ce84:	4628      	mov	r0, r5
    ce86:	f7ff fa5d 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
	return 0;
    ce8a:	e7cf      	b.n	ce2c <att_find_type_req+0x6c>
		return BT_ATT_ERR_UNLIKELY;
    ce8c:	240e      	movs	r4, #14
	return att_find_type_rsp(chan, start_handle, end_handle, value,
    ce8e:	e7cd      	b.n	ce2c <att_find_type_req+0x6c>
    ce90:	0000c0e9 	.word	0x0000c0e9

0000ce94 <att_find_info_req>:
{
    ce94:	b5f0      	push	{r4, r5, r6, r7, lr}
	req = (void *)buf->data;
    ce96:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    ce98:	881e      	ldrh	r6, [r3, #0]
{
    ce9a:	b085      	sub	sp, #20
    ce9c:	4605      	mov	r5, r0
	if (!start || !end) {
    ce9e:	b19e      	cbz	r6, cec8 <att_find_info_req+0x34>
	end_handle = sys_le16_to_cpu(req->end_handle);
    cea0:	885c      	ldrh	r4, [r3, #2]
	if (!start || !end) {
    cea2:	b184      	cbz	r4, cec6 <att_find_info_req+0x32>
	if (start > end) {
    cea4:	42b4      	cmp	r4, r6
    cea6:	d30f      	bcc.n	cec8 <att_find_info_req+0x34>
	struct bt_conn *conn = chan->chan.chan.conn;
    cea8:	6887      	ldr	r7, [r0, #8]
	(void)memset(&data, 0, sizeof(data));
    ceaa:	2210      	movs	r2, #16
    ceac:	2100      	movs	r1, #0
    ceae:	4668      	mov	r0, sp
    ceb0:	f017 fb05 	bl	244be <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    ceb4:	2200      	movs	r2, #0
    ceb6:	2105      	movs	r1, #5
    ceb8:	4638      	mov	r0, r7
    ceba:	f7ff fd6f 	bl	c99c <bt_att_create_pdu>
    cebe:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    cec0:	b958      	cbnz	r0, ceda <att_find_info_req+0x46>
		return BT_ATT_ERR_UNLIKELY;
    cec2:	200e      	movs	r0, #14
	return att_find_info_rsp(chan, start_handle, end_handle);
    cec4:	e007      	b.n	ced6 <att_find_info_req+0x42>
			*err = 0U;
    cec6:	4626      	mov	r6, r4
	if (!req) {
    cec8:	2301      	movs	r3, #1
    ceca:	4632      	mov	r2, r6
    cecc:	2104      	movs	r1, #4
    cece:	4628      	mov	r0, r5
    ced0:	f018 fa92 	bl	253f8 <send_err_rsp.part.0>
	return 0;
    ced4:	2000      	movs	r0, #0
}
    ced6:	b005      	add	sp, #20
    ced8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    ceda:	4621      	mov	r1, r4
    cedc:	4a08      	ldr	r2, [pc, #32]	; (cf00 <att_find_info_req+0x6c>)
	data.chan = chan;
    cede:	9500      	str	r5, [sp, #0]
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    cee0:	466b      	mov	r3, sp
    cee2:	4630      	mov	r0, r6
    cee4:	f018 f876 	bl	24fd4 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    cee8:	9c02      	ldr	r4, [sp, #8]
    ceea:	b924      	cbnz	r4, cef6 <att_find_info_req+0x62>
		net_buf_unref(data.buf);
    ceec:	9801      	ldr	r0, [sp, #4]
    ceee:	f010 fbdd 	bl	1d6ac <net_buf_unref>
	if (!req) {
    cef2:	230a      	movs	r3, #10
    cef4:	e7e9      	b.n	ceca <att_find_info_req+0x36>
	bt_att_chan_send_rsp(chan, data.buf, chan_rsp_sent);
    cef6:	9901      	ldr	r1, [sp, #4]
    cef8:	4628      	mov	r0, r5
    cefa:	f7ff fa23 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
    cefe:	e7e9      	b.n	ced4 <att_find_info_req+0x40>
    cf00:	00024feb 	.word	0x00024feb

0000cf04 <bt_att_req_alloc>:

	return mtu;
}

struct bt_att_req *bt_att_req_alloc(k_timeout_t timeout)
{
    cf04:	b513      	push	{r0, r1, r4, lr}
    cf06:	4602      	mov	r2, r0
    cf08:	460b      	mov	r3, r1
	struct bt_att_req *req = NULL;

	/* Reserve space for request */
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cf0a:	4808      	ldr	r0, [pc, #32]	; (cf2c <bt_att_req_alloc+0x28>)
    cf0c:	a901      	add	r1, sp, #4
	struct bt_att_req *req = NULL;
    cf0e:	2400      	movs	r4, #0
    cf10:	9401      	str	r4, [sp, #4]
	if (k_mem_slab_alloc(&req_slab, (void **)&req, timeout)) {
    cf12:	f012 fdd9 	bl	1fac8 <k_mem_slab_alloc>
    cf16:	4601      	mov	r1, r0
    cf18:	b930      	cbnz	r0, cf28 <bt_att_req_alloc+0x24>
		return NULL;
	}

	BT_DBG("req %p", req);

	memset(req, 0, sizeof(*req));
    cf1a:	9801      	ldr	r0, [sp, #4]
    cf1c:	221c      	movs	r2, #28
    cf1e:	f017 face 	bl	244be <memset>

	return req;
    cf22:	9801      	ldr	r0, [sp, #4]
}
    cf24:	b002      	add	sp, #8
    cf26:	bd10      	pop	{r4, pc}
		return NULL;
    cf28:	4620      	mov	r0, r4
    cf2a:	e7fb      	b.n	cf24 <bt_att_req_alloc+0x20>
    cf2c:	20009f84 	.word	0x20009f84

0000cf30 <bt_att_req_free>:

void bt_att_req_free(struct bt_att_req *req)
{
    cf30:	b507      	push	{r0, r1, r2, lr}
    cf32:	9001      	str	r0, [sp, #4]
	BT_DBG("req %p", req);

	if (req->buf) {
    cf34:	6880      	ldr	r0, [r0, #8]
    cf36:	b120      	cbz	r0, cf42 <bt_att_req_free+0x12>
		net_buf_unref(req->buf);
    cf38:	f010 fbb8 	bl	1d6ac <net_buf_unref>
		req->buf = NULL;
    cf3c:	9b01      	ldr	r3, [sp, #4]
    cf3e:	2200      	movs	r2, #0
    cf40:	609a      	str	r2, [r3, #8]
	}

	k_mem_slab_free(&req_slab, (void **)&req);
    cf42:	4803      	ldr	r0, [pc, #12]	; (cf50 <bt_att_req_free+0x20>)
    cf44:	a901      	add	r1, sp, #4
    cf46:	f012 fdef 	bl	1fb28 <k_mem_slab_free>
}
    cf4a:	b003      	add	sp, #12
    cf4c:	f85d fb04 	ldr.w	pc, [sp], #4
    cf50:	20009f84 	.word	0x20009f84

0000cf54 <att_handle_rsp>:
{
    cf54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    cf58:	4605      	mov	r5, r0
    cf5a:	b085      	sub	sp, #20
	k_delayed_work_cancel(&chan->timeout_work);
    cf5c:	30e0      	adds	r0, #224	; 0xe0
{
    cf5e:	4689      	mov	r9, r1
    cf60:	4692      	mov	sl, r2
    cf62:	4698      	mov	r8, r3
	k_delayed_work_cancel(&chan->timeout_work);
    cf64:	f01a f92f 	bl	271c6 <k_delayed_work_cancel>
	if (!chan->req) {
    cf68:	f8d5 40c4 	ldr.w	r4, [r5, #196]	; 0xc4
    cf6c:	bb5c      	cbnz	r4, cfc6 <att_handle_rsp+0x72>
    cf6e:	4b2e      	ldr	r3, [pc, #184]	; (d028 <att_handle_rsp+0xd4>)
    cf70:	492e      	ldr	r1, [pc, #184]	; (d02c <att_handle_rsp+0xd8>)
		BT_WARN("No pending ATT request");
    cf72:	482f      	ldr	r0, [pc, #188]	; (d030 <att_handle_rsp+0xdc>)
    cf74:	1ac9      	subs	r1, r1, r3
    cf76:	08c9      	lsrs	r1, r1, #3
    cf78:	0189      	lsls	r1, r1, #6
    cf7a:	f041 0102 	orr.w	r1, r1, #2
    cf7e:	f015 fa67 	bl	22450 <log_0>
	bt_att_func_t func = NULL;
    cf82:	4627      	mov	r7, r4
	att_process(chan->att);
    cf84:	f8d5 b000 	ldr.w	fp, [r5]
	node = sys_slist_get(&att->reqs);
    cf88:	f10b 0004 	add.w	r0, fp, #4
    cf8c:	f017 ffcd 	bl	24f2a <sys_slist_get>
	if (!node) {
    cf90:	4606      	mov	r6, r0
    cf92:	b380      	cbz	r0, cff6 <att_handle_rsp+0xa2>
	return list->head;
    cf94:	f8db 203c 	ldr.w	r2, [fp, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cf98:	b152      	cbz	r2, cfb0 <att_handle_rsp+0x5c>
    cf9a:	f5b2 708a 	subs.w	r0, r2, #276	; 0x114
    cf9e:	d007      	beq.n	cfb0 <att_handle_rsp+0x5c>
	return node->next;
    cfa0:	6814      	ldr	r4, [r2, #0]
    cfa2:	b10c      	cbz	r4, cfa8 <att_handle_rsp+0x54>
    cfa4:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		if (!chan->req) {
    cfa8:	f8d0 20c4 	ldr.w	r2, [r0, #196]	; 0xc4
    cfac:	b1f2      	cbz	r2, cfec <att_handle_rsp+0x98>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    cfae:	bb7c      	cbnz	r4, d010 <att_handle_rsp+0xbc>
	parent->next = child;
    cfb0:	f8db 2004 	ldr.w	r2, [fp, #4]
    cfb4:	6032      	str	r2, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
    cfb6:	f8db 2008 	ldr.w	r2, [fp, #8]
	list->head = node;
    cfba:	f8cb 6004 	str.w	r6, [fp, #4]
Z_GENLIST_PREPEND(slist, snode)
    cfbe:	b9d2      	cbnz	r2, cff6 <att_handle_rsp+0xa2>
	list->tail = node;
    cfc0:	f8cb 6008 	str.w	r6, [fp, #8]
}
    cfc4:	e017      	b.n	cff6 <att_handle_rsp+0xa2>
	if (chan->req == &cancel) {
    cfc6:	4b1b      	ldr	r3, [pc, #108]	; (d034 <att_handle_rsp+0xe0>)
    cfc8:	429c      	cmp	r4, r3
    cfca:	f04f 0600 	mov.w	r6, #0
    cfce:	d103      	bne.n	cfd8 <att_handle_rsp+0x84>
		chan->req = NULL;
    cfd0:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
	bt_att_func_t func = NULL;
    cfd4:	4637      	mov	r7, r6
		goto process;
    cfd6:	e7d5      	b.n	cf84 <att_handle_rsp+0x30>
	func = chan->req->func;
    cfd8:	6867      	ldr	r7, [r4, #4]
	params = chan->req->user_data;
    cfda:	69a3      	ldr	r3, [r4, #24]
	chan->req->func = NULL;
    cfdc:	6066      	str	r6, [r4, #4]
	bt_att_req_free(chan->req);
    cfde:	4620      	mov	r0, r4
	params = chan->req->user_data;
    cfe0:	9303      	str	r3, [sp, #12]
	bt_att_req_free(chan->req);
    cfe2:	f7ff ffa5 	bl	cf30 <bt_att_req_free>
	chan->req = NULL;
    cfe6:	f8c5 60c4 	str.w	r6, [r5, #196]	; 0xc4
    cfea:	e7cb      	b.n	cf84 <att_handle_rsp+0x30>
	return chan_req_send(chan, req);
    cfec:	4631      	mov	r1, r6
    cfee:	f018 f886 	bl	250fe <chan_req_send>
			if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
    cff2:	2800      	cmp	r0, #0
    cff4:	dbdb      	blt.n	cfae <att_handle_rsp+0x5a>
	if (func) {
    cff6:	b13f      	cbz	r7, d008 <att_handle_rsp+0xb4>
		func(chan->att->conn, err, pdu, len, params);
    cff8:	9b03      	ldr	r3, [sp, #12]
    cffa:	6828      	ldr	r0, [r5, #0]
    cffc:	9300      	str	r3, [sp, #0]
    cffe:	6800      	ldr	r0, [r0, #0]
    d000:	4653      	mov	r3, sl
    d002:	464a      	mov	r2, r9
    d004:	4641      	mov	r1, r8
    d006:	47b8      	blx	r7
}
    d008:	2000      	movs	r0, #0
    d00a:	b005      	add	sp, #20
    d00c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
    d010:	f514 728a 	adds.w	r2, r4, #276	; 0x114
    d014:	d004      	beq.n	d020 <att_handle_rsp+0xcc>
	return node->next;
    d016:	f8d4 2114 	ldr.w	r2, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
    d01a:	b10a      	cbz	r2, d020 <att_handle_rsp+0xcc>
    d01c:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
	bt_att_func_t func = NULL;
    d020:	4620      	mov	r0, r4
    d022:	4614      	mov	r4, r2
    d024:	e7c0      	b.n	cfa8 <att_handle_rsp+0x54>
    d026:	bf00      	nop
    d028:	000278c0 	.word	0x000278c0
    d02c:	000278c0 	.word	0x000278c0
    d030:	0002cedf 	.word	0x0002cedf
    d034:	2000d77c 	.word	0x2000d77c

0000d038 <bt_att_disconnected>:
{
    d038:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_att *att = att_chan->att;
    d03a:	f850 5c08 	ldr.w	r5, [r0, #-8]
{
    d03e:	b085      	sub	sp, #20
    d040:	4604      	mov	r4, r0
	if (!att_chan->att) {
    d042:	2d00      	cmp	r5, #0
    d044:	d056      	beq.n	d0f4 <bt_att_disconnected+0xbc>
	sys_slist_find_and_remove(&chan->att->chans, &chan->node);
    d046:	f500 7186 	add.w	r1, r0, #268	; 0x10c
    d04a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
    d04e:	f018 f889 	bl	25164 <sys_slist_find_and_remove.isra.0>
	while ((buf = net_buf_get(&chan->tx_queue, K_NO_WAIT))) {
    d052:	f1a4 0608 	sub.w	r6, r4, #8
    d056:	f104 07c0 	add.w	r7, r4, #192	; 0xc0
    d05a:	2200      	movs	r2, #0
    d05c:	2300      	movs	r3, #0
    d05e:	4638      	mov	r0, r7
    d060:	f019 fa05 	bl	2646e <net_buf_get>
    d064:	4602      	mov	r2, r0
    d066:	bb50      	cbnz	r0, d0be <bt_att_disconnected+0x86>
	if (chan->req) {
    d068:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    d06c:	b123      	cbz	r3, d078 <bt_att_disconnected+0x40>
		att_handle_rsp(chan, NULL, 0, BT_ATT_ERR_UNLIKELY);
    d06e:	4601      	mov	r1, r0
    d070:	230e      	movs	r3, #14
    d072:	4630      	mov	r0, r6
    d074:	f7ff ff6e 	bl	cf54 <att_handle_rsp>
	chan->att = NULL;
    d078:	2300      	movs	r3, #0
    d07a:	f844 3c08 	str.w	r3, [r4, #-8]
	if (!sys_slist_is_empty(&att->chans)) {
    d07e:	6beb      	ldr	r3, [r5, #60]	; 0x3c
    d080:	2b00      	cmp	r3, #0
    d082:	d137      	bne.n	d0f4 <bt_att_disconnected+0xbc>
	att_reset(att);
    d084:	9503      	str	r5, [sp, #12]
	while ((buf = net_buf_get(&att->prep_queue, K_NO_WAIT))) {
    d086:	9803      	ldr	r0, [sp, #12]
    d088:	2200      	movs	r2, #0
    d08a:	2300      	movs	r3, #0
    d08c:	3024      	adds	r0, #36	; 0x24
    d08e:	f019 f9ee 	bl	2646e <net_buf_get>
    d092:	b9b8      	cbnz	r0, d0c4 <bt_att_disconnected+0x8c>
	while ((buf = net_buf_get(&att->tx_queue, K_NO_WAIT))) {
    d094:	9803      	ldr	r0, [sp, #12]
    d096:	2200      	movs	r2, #0
    d098:	2300      	movs	r3, #0
    d09a:	300c      	adds	r0, #12
    d09c:	f019 f9e7 	bl	2646e <net_buf_get>
    d0a0:	b998      	cbnz	r0, d0ca <bt_att_disconnected+0x92>
	att->conn = NULL;
    d0a2:	9a03      	ldr	r2, [sp, #12]
	return list->head;
    d0a4:	6855      	ldr	r5, [r2, #4]
    d0a6:	6010      	str	r0, [r2, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d0a8:	b995      	cbnz	r5, d0d0 <bt_att_disconnected+0x98>
	k_mem_slab_free(&att_slab, (void **)&att);
    d0aa:	4813      	ldr	r0, [pc, #76]	; (d0f8 <bt_att_disconnected+0xc0>)
    d0ac:	a903      	add	r1, sp, #12
    d0ae:	f012 fd3b 	bl	1fb28 <k_mem_slab_free>
	bt_gatt_disconnected(ch->chan.conn);
    d0b2:	6820      	ldr	r0, [r4, #0]
}
    d0b4:	b005      	add	sp, #20
    d0b6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	bt_gatt_disconnected(ch->chan.conn);
    d0ba:	f001 ba4f 	b.w	e55c <bt_gatt_disconnected>
		net_buf_unref(buf);
    d0be:	f010 faf5 	bl	1d6ac <net_buf_unref>
    d0c2:	e7ca      	b.n	d05a <bt_att_disconnected+0x22>
		net_buf_unref(buf);
    d0c4:	f010 faf2 	bl	1d6ac <net_buf_unref>
    d0c8:	e7dd      	b.n	d086 <bt_att_disconnected+0x4e>
		net_buf_unref(buf);
    d0ca:	f010 faef 	bl	1d6ac <net_buf_unref>
    d0ce:	e7e1      	b.n	d094 <bt_att_disconnected+0x5c>
	return node->next;
    d0d0:	682e      	ldr	r6, [r5, #0]
		if (req->func) {
    d0d2:	686f      	ldr	r7, [r5, #4]
    d0d4:	b137      	cbz	r7, d0e4 <bt_att_disconnected+0xac>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0,
    d0d6:	69ab      	ldr	r3, [r5, #24]
    d0d8:	9300      	str	r3, [sp, #0]
    d0da:	2300      	movs	r3, #0
    d0dc:	461a      	mov	r2, r3
    d0de:	210e      	movs	r1, #14
    d0e0:	4618      	mov	r0, r3
    d0e2:	47b8      	blx	r7
		bt_att_req_free(req);
    d0e4:	4628      	mov	r0, r5
    d0e6:	f7ff ff23 	bl	cf30 <bt_att_req_free>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    d0ea:	2e00      	cmp	r6, #0
    d0ec:	d0dd      	beq.n	d0aa <bt_att_disconnected+0x72>
    d0ee:	4635      	mov	r5, r6
    d0f0:	6836      	ldr	r6, [r6, #0]
    d0f2:	e7ee      	b.n	d0d2 <bt_att_disconnected+0x9a>
}
    d0f4:	b005      	add	sp, #20
    d0f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d0f8:	20009f4c 	.word	0x20009f4c

0000d0fc <att_timeout>:
    d0fc:	4b08      	ldr	r3, [pc, #32]	; (d120 <att_timeout+0x24>)
    d0fe:	4909      	ldr	r1, [pc, #36]	; (d124 <att_timeout+0x28>)
{
    d100:	b510      	push	{r4, lr}
    d102:	1ac9      	subs	r1, r1, r3
    d104:	08c9      	lsrs	r1, r1, #3
	BT_ERR("ATT Timeout");
    d106:	0189      	lsls	r1, r1, #6
{
    d108:	4604      	mov	r4, r0
	BT_ERR("ATT Timeout");
    d10a:	f041 0101 	orr.w	r1, r1, #1
    d10e:	4806      	ldr	r0, [pc, #24]	; (d128 <att_timeout+0x2c>)
    d110:	f015 f99e 	bl	22450 <log_0>
	bt_att_disconnected(&chan->chan.chan);
    d114:	f1a4 00d8 	sub.w	r0, r4, #216	; 0xd8
}
    d118:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	bt_att_disconnected(&chan->chan.chan);
    d11c:	f7ff bf8c 	b.w	d038 <bt_att_disconnected>
    d120:	000278c0 	.word	0x000278c0
    d124:	000278c0 	.word	0x000278c0
    d128:	0002cef6 	.word	0x0002cef6

0000d12c <db_hash_store>:

static void db_hash_store(void)
{
	int err;

	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    d12c:	490a      	ldr	r1, [pc, #40]	; (d158 <db_hash_store+0x2c>)
    d12e:	480b      	ldr	r0, [pc, #44]	; (d15c <db_hash_store+0x30>)
{
    d130:	b508      	push	{r3, lr}
	err = settings_save_one("bt/hash", &db_hash, sizeof(db_hash));
    d132:	2210      	movs	r2, #16
    d134:	f7f9 fb9a 	bl	686c <settings_save_one>
	if (err) {
    d138:	4601      	mov	r1, r0
    d13a:	b158      	cbz	r0, d154 <db_hash_store+0x28>
    d13c:	4b08      	ldr	r3, [pc, #32]	; (d160 <db_hash_store+0x34>)
    d13e:	4a09      	ldr	r2, [pc, #36]	; (d164 <db_hash_store+0x38>)
		BT_ERR("Failed to save Database Hash (err %d)", err);
    d140:	4809      	ldr	r0, [pc, #36]	; (d168 <db_hash_store+0x3c>)
    d142:	1ad2      	subs	r2, r2, r3
    d144:	08d2      	lsrs	r2, r2, #3
    d146:	0192      	lsls	r2, r2, #6
	}

	BT_DBG("Database Hash stored");
}
    d148:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		BT_ERR("Failed to save Database Hash (err %d)", err);
    d14c:	f042 0201 	orr.w	r2, r2, #1
    d150:	f015 b98b 	b.w	2246a <log_1>
}
    d154:	bd08      	pop	{r3, pc}
    d156:	bf00      	nop
    d158:	2000f2f4 	.word	0x2000f2f4
    d15c:	0002cf09 	.word	0x0002cf09
    d160:	000278c0 	.word	0x000278c0
    d164:	00027970 	.word	0x00027970
    d168:	0002cf11 	.word	0x0002cf11

0000d16c <db_hash_set>:

static uint8_t stored_hash[16];

static int db_hash_set(const char *name, size_t len_rd,
		       settings_read_cb read_cb, void *cb_arg)
{
    d16c:	b510      	push	{r4, lr}
	ssize_t len;

	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    d16e:	490b      	ldr	r1, [pc, #44]	; (d19c <db_hash_set+0x30>)
{
    d170:	4614      	mov	r4, r2
	len = read_cb(cb_arg, stored_hash, sizeof(stored_hash));
    d172:	4618      	mov	r0, r3
    d174:	2210      	movs	r2, #16
    d176:	47a0      	blx	r4
	if (len < 0) {
    d178:	1e04      	subs	r4, r0, #0
    d17a:	da0c      	bge.n	d196 <db_hash_set+0x2a>
    d17c:	4a08      	ldr	r2, [pc, #32]	; (d1a0 <db_hash_set+0x34>)
    d17e:	4b09      	ldr	r3, [pc, #36]	; (d1a4 <db_hash_set+0x38>)
		BT_ERR("Failed to decode value (err %zd)", len);
    d180:	4809      	ldr	r0, [pc, #36]	; (d1a8 <db_hash_set+0x3c>)
    d182:	1ad2      	subs	r2, r2, r3
    d184:	08d2      	lsrs	r2, r2, #3
    d186:	0192      	lsls	r2, r2, #6
    d188:	f042 0201 	orr.w	r2, r2, #1
    d18c:	4621      	mov	r1, r4
    d18e:	f015 f96c 	bl	2246a <log_1>
	}

	BT_HEXDUMP_DBG(stored_hash, sizeof(stored_hash), "Stored Hash: ");

	return 0;
}
    d192:	4620      	mov	r0, r4
    d194:	bd10      	pop	{r4, pc}
	return 0;
    d196:	2400      	movs	r4, #0
    d198:	e7fb      	b.n	d192 <db_hash_set+0x26>
    d19a:	bf00      	nop
    d19c:	2000f304 	.word	0x2000f304
    d1a0:	00027970 	.word	0x00027970
    d1a4:	000278c0 	.word	0x000278c0
    d1a8:	0002cf37 	.word	0x0002cf37

0000d1ac <find_cf_cfg>:
{
    d1ac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    d1ae:	4d0f      	ldr	r5, [pc, #60]	; (d1ec <find_cf_cfg+0x40>)
    d1b0:	4604      	mov	r4, r0
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d1b2:	2700      	movs	r7, #0
		struct gatt_cf_cfg *cfg = &cf_cfg[i];
    d1b4:	462e      	mov	r6, r5
		if (!conn) {
    d1b6:	1c68      	adds	r0, r5, #1
    d1b8:	b964      	cbnz	r4, d1d4 <find_cf_cfg+0x28>
	return memcmp(a, b, sizeof(*a));
    d1ba:	2207      	movs	r2, #7
    d1bc:	4669      	mov	r1, sp
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d1be:	9400      	str	r4, [sp, #0]
    d1c0:	f8cd 4003 	str.w	r4, [sp, #3]
    d1c4:	f017 f93f 	bl	24446 <memcmp>
    d1c8:	b958      	cbnz	r0, d1e2 <find_cf_cfg+0x36>
}
    d1ca:	4630      	mov	r0, r6
    d1cc:	b003      	add	sp, #12
    d1ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    d1d0:	2701      	movs	r7, #1
    d1d2:	e7ef      	b.n	d1b4 <find_cf_cfg+0x8>
		} else if (bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d1d4:	4602      	mov	r2, r0
    d1d6:	7829      	ldrb	r1, [r5, #0]
    d1d8:	4620      	mov	r0, r4
    d1da:	f017 fd42 	bl	24c62 <bt_conn_is_peer_addr_le>
    d1de:	2800      	cmp	r0, #0
    d1e0:	d1f3      	bne.n	d1ca <find_cf_cfg+0x1e>
	for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d1e2:	3510      	adds	r5, #16
    d1e4:	2f00      	cmp	r7, #0
    d1e6:	d0f3      	beq.n	d1d0 <find_cf_cfg+0x24>
	return NULL;
    d1e8:	2600      	movs	r6, #0
    d1ea:	e7ee      	b.n	d1ca <find_cf_cfg+0x1e>
    d1ec:	2000d798 	.word	0x2000d798

0000d1f0 <cf_write>:
{
    d1f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d1f4:	461f      	mov	r7, r3
    d1f6:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	if (offset > sizeof(cfg->data)) {
    d1fa:	2b01      	cmp	r3, #1
{
    d1fc:	4680      	mov	r8, r0
    d1fe:	4616      	mov	r6, r2
	if (offset > sizeof(cfg->data)) {
    d200:	d84b      	bhi.n	d29a <cf_write+0xaa>
	if (offset + len > sizeof(cfg->data)) {
    d202:	443b      	add	r3, r7
    d204:	2b01      	cmp	r3, #1
    d206:	463d      	mov	r5, r7
    d208:	dc4a      	bgt.n	d2a0 <cf_write+0xb0>
	cfg = find_cf_cfg(conn);
    d20a:	f7ff ffcf 	bl	d1ac <find_cf_cfg>
	if (!cfg) {
    d20e:	4604      	mov	r4, r0
    d210:	b918      	cbnz	r0, d21a <cf_write+0x2a>
		cfg = find_cf_cfg(NULL);
    d212:	f7ff ffcb 	bl	d1ac <find_cf_cfg>
	if (!cfg) {
    d216:	4604      	mov	r4, r0
    d218:	b1d8      	cbz	r0, d252 <cf_write+0x62>
    d21a:	4632      	mov	r2, r6
    d21c:	f104 0008 	add.w	r0, r4, #8
    d220:	eb07 0e06 	add.w	lr, r7, r6
	for (i = 0U; i < len && i <= last_byte; i++) {
    d224:	4596      	cmp	lr, r2
    d226:	d123      	bne.n	d270 <cf_write+0x80>
	for (i = 0U; i < len && i < last_byte; i++) {
    d228:	b12f      	cbz	r7, d236 <cf_write+0x46>
		cfg->data[i] |= value[i] & (BIT(last_bit + 1) - 1);
    d22a:	7833      	ldrb	r3, [r6, #0]
    d22c:	7a22      	ldrb	r2, [r4, #8]
    d22e:	f003 0307 	and.w	r3, r3, #7
    d232:	4313      	orrs	r3, r2
    d234:	7223      	strb	r3, [r4, #8]
	bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d236:	f108 0188 	add.w	r1, r8, #136	; 0x88
    d23a:	1c60      	adds	r0, r4, #1
    d23c:	f018 fa94 	bl	25768 <bt_addr_le_copy>
	cfg->id = conn->id;
    d240:	4620      	mov	r0, r4
    d242:	f898 3008 	ldrb.w	r3, [r8, #8]
    d246:	f800 3b0c 	strb.w	r3, [r0], #12
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    d24a:	2101      	movs	r1, #1
    d24c:	f018 fb13 	bl	25876 <atomic_or>
}
    d250:	e00b      	b.n	d26a <cf_write+0x7a>
    d252:	4b16      	ldr	r3, [pc, #88]	; (d2ac <cf_write+0xbc>)
    d254:	4916      	ldr	r1, [pc, #88]	; (d2b0 <cf_write+0xc0>)
		BT_WARN("No space to store Client Supported Features");
    d256:	4817      	ldr	r0, [pc, #92]	; (d2b4 <cf_write+0xc4>)
    d258:	1ac9      	subs	r1, r1, r3
    d25a:	08c9      	lsrs	r1, r1, #3
    d25c:	0189      	lsls	r1, r1, #6
    d25e:	f041 0102 	orr.w	r1, r1, #2
    d262:	f015 f8f5 	bl	22450 <log_0>
		return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d266:	f06f 0510 	mvn.w	r5, #16
}
    d26a:	4628      	mov	r0, r5
    d26c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		uint8_t chg_bits = value[i] ^ cfg->data[i];
    d270:	f812 1b01 	ldrb.w	r1, [r2], #1
    d274:	f810 cb01 	ldrb.w	ip, [r0], #1
    d278:	2300      	movs	r3, #0
    d27a:	ea81 010c 	eor.w	r1, r1, ip
			if ((BIT(bit) & chg_bits) &&
    d27e:	fa21 f903 	lsr.w	r9, r1, r3
    d282:	f019 0f01 	tst.w	r9, #1
    d286:	d004      	beq.n	d292 <cf_write+0xa2>
    d288:	fa2c f903 	lsr.w	r9, ip, r3
    d28c:	f019 0f01 	tst.w	r9, #1
    d290:	d109      	bne.n	d2a6 <cf_write+0xb6>
		for (bit = 0U; bit <= last_bit; bit++) {
    d292:	3301      	adds	r3, #1
    d294:	2b03      	cmp	r3, #3
    d296:	d1f2      	bne.n	d27e <cf_write+0x8e>
    d298:	e7c4      	b.n	d224 <cf_write+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d29a:	f06f 0506 	mvn.w	r5, #6
    d29e:	e7e4      	b.n	d26a <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d2a0:	f06f 050c 	mvn.w	r5, #12
    d2a4:	e7e1      	b.n	d26a <cf_write+0x7a>
		return BT_GATT_ERR(BT_ATT_ERR_VALUE_NOT_ALLOWED);
    d2a6:	f06f 0512 	mvn.w	r5, #18
    d2aa:	e7de      	b.n	d26a <cf_write+0x7a>
    d2ac:	000278c0 	.word	0x000278c0
    d2b0:	00027970 	.word	0x00027970
    d2b4:	0002cf58 	.word	0x0002cf58

0000d2b8 <sc_store>:
{
    d2b8:	b570      	push	{r4, r5, r6, lr}
	if (cfg->id) {
    d2ba:	4605      	mov	r5, r0
{
    d2bc:	b08c      	sub	sp, #48	; 0x30
	if (cfg->id) {
    d2be:	f815 2b01 	ldrb.w	r2, [r5], #1
{
    d2c2:	4604      	mov	r4, r0
	if (cfg->id) {
    d2c4:	b1fa      	cbz	r2, d306 <sc_store+0x4e>
		u8_to_dec(id_str, sizeof(id_str), cfg->id);
    d2c6:	ae02      	add	r6, sp, #8
    d2c8:	2104      	movs	r1, #4
    d2ca:	4630      	mov	r0, r6
    d2cc:	f014 fb77 	bl	219be <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "sc",
    d2d0:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "sc",
    d2d2:	4a0e      	ldr	r2, [pc, #56]	; (d30c <sc_store+0x54>)
    d2d4:	462b      	mov	r3, r5
    d2d6:	2124      	movs	r1, #36	; 0x24
    d2d8:	a803      	add	r0, sp, #12
    d2da:	f7fb fa05 	bl	86e8 <bt_settings_encode_key>
	err = settings_save_one(key, (char *)&cfg->data, sizeof(cfg->data));
    d2de:	f104 0108 	add.w	r1, r4, #8
    d2e2:	2204      	movs	r2, #4
    d2e4:	a803      	add	r0, sp, #12
    d2e6:	f7f9 fac1 	bl	686c <settings_save_one>
	if (err) {
    d2ea:	4601      	mov	r1, r0
    d2ec:	b148      	cbz	r0, d302 <sc_store+0x4a>
    d2ee:	4a08      	ldr	r2, [pc, #32]	; (d310 <sc_store+0x58>)
    d2f0:	4b08      	ldr	r3, [pc, #32]	; (d314 <sc_store+0x5c>)
		BT_ERR("failed to store SC (err %d)", err);
    d2f2:	4809      	ldr	r0, [pc, #36]	; (d318 <sc_store+0x60>)
    d2f4:	1ad2      	subs	r2, r2, r3
    d2f6:	08d2      	lsrs	r2, r2, #3
    d2f8:	0192      	lsls	r2, r2, #6
    d2fa:	f042 0201 	orr.w	r2, r2, #1
    d2fe:	f015 f8b4 	bl	2246a <log_1>
}
    d302:	b00c      	add	sp, #48	; 0x30
    d304:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "sc",
    d306:	9200      	str	r2, [sp, #0]
    d308:	e7e3      	b.n	d2d2 <sc_store+0x1a>
    d30a:	bf00      	nop
    d30c:	0002d182 	.word	0x0002d182
    d310:	00027970 	.word	0x00027970
    d314:	000278c0 	.word	0x000278c0
    d318:	0002cf84 	.word	0x0002cf84

0000d31c <gatt_indicate>:
{
    d31c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d320:	4680      	mov	r8, r0
    d322:	4689      	mov	r9, r1
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d324:	f44f 2070 	mov.w	r0, #983040	; 0xf0000
    d328:	2100      	movs	r1, #0
	len = sizeof(*ind) + params->len;
    d32a:	8a96      	ldrh	r6, [r2, #20]
{
    d32c:	4615      	mov	r5, r2
	req = bt_att_req_alloc(BT_ATT_TIMEOUT);
    d32e:	f7ff fde9 	bl	cf04 <bt_att_req_alloc>
	len = sizeof(*ind) + params->len;
    d332:	3602      	adds	r6, #2
	if (!req) {
    d334:	4604      	mov	r4, r0
    d336:	b920      	cbnz	r0, d342 <gatt_indicate+0x26>
		return -ENOMEM;
    d338:	f06f 050b 	mvn.w	r5, #11
}
    d33c:	4628      	mov	r0, r5
    d33e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	req->encode = encode;
    d342:	2300      	movs	r3, #0
    d344:	60c3      	str	r3, [r0, #12]
	req->att_op = op;
    d346:	211d      	movs	r1, #29
	req->func = func;
    d348:	4b1b      	ldr	r3, [pc, #108]	; (d3b8 <gatt_indicate+0x9c>)
	req->len = len;
    d34a:	6146      	str	r6, [r0, #20]
	req->att_op = op;
    d34c:	7441      	strb	r1, [r0, #17]
	req->func = func;
    d34e:	6043      	str	r3, [r0, #4]
	req->user_data = params;
    d350:	6185      	str	r5, [r0, #24]
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE, len);
    d352:	4632      	mov	r2, r6
    d354:	4640      	mov	r0, r8
    d356:	f7ff fb21 	bl	c99c <bt_att_create_pdu>
	if (!buf) {
    d35a:	4606      	mov	r6, r0
    d35c:	b968      	cbnz	r0, d37a <gatt_indicate+0x5e>
    d35e:	4b17      	ldr	r3, [pc, #92]	; (d3bc <gatt_indicate+0xa0>)
    d360:	4917      	ldr	r1, [pc, #92]	; (d3c0 <gatt_indicate+0xa4>)
		BT_WARN("No buffer available to send indication");
    d362:	4818      	ldr	r0, [pc, #96]	; (d3c4 <gatt_indicate+0xa8>)
    d364:	1ac9      	subs	r1, r1, r3
    d366:	08c9      	lsrs	r1, r1, #3
    d368:	0189      	lsls	r1, r1, #6
    d36a:	f041 0102 	orr.w	r1, r1, #2
    d36e:	f015 f86f 	bl	22450 <log_0>
		bt_att_req_free(req);
    d372:	4620      	mov	r0, r4
    d374:	f7ff fddc 	bl	cf30 <bt_att_req_free>
    d378:	e7de      	b.n	d338 <gatt_indicate+0x1c>
	return net_buf_simple_add(&buf->b, len);
    d37a:	f100 0a08 	add.w	sl, r0, #8
    d37e:	2102      	movs	r1, #2
    d380:	4650      	mov	r0, sl
    d382:	f019 f8c5 	bl	26510 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(handle);
    d386:	4607      	mov	r7, r0
    d388:	8aa9      	ldrh	r1, [r5, #20]
    d38a:	f827 9b02 	strh.w	r9, [r7], #2
    d38e:	4650      	mov	r0, sl
    d390:	f019 f8be 	bl	26510 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    d394:	8aaa      	ldrh	r2, [r5, #20]
    d396:	6929      	ldr	r1, [r5, #16]
    d398:	4638      	mov	r0, r7
    d39a:	f017 f865 	bl	24468 <memcpy>
	req->buf = buf;
    d39e:	60a6      	str	r6, [r4, #8]
	err = bt_att_req_send(conn, req);
    d3a0:	4621      	mov	r1, r4
    d3a2:	4640      	mov	r0, r8
    d3a4:	f018 f98b 	bl	256be <bt_att_req_send>
	if (err) {
    d3a8:	4605      	mov	r5, r0
    d3aa:	2800      	cmp	r0, #0
    d3ac:	d0c6      	beq.n	d33c <gatt_indicate+0x20>
		bt_att_req_free(req);
    d3ae:	4620      	mov	r0, r4
    d3b0:	f7ff fdbe 	bl	cf30 <bt_att_req_free>
    d3b4:	e7c2      	b.n	d33c <gatt_indicate+0x20>
    d3b6:	bf00      	nop
    d3b8:	00025737 	.word	0x00025737
    d3bc:	000278c0 	.word	0x000278c0
    d3c0:	00027970 	.word	0x00027970
    d3c4:	0002cfa0 	.word	0x0002cfa0

0000d3c8 <gatt_notify>:
{
    d3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d3cc:	4614      	mov	r4, r2
				sizeof(*nfy) + params->len);
    d3ce:	8992      	ldrh	r2, [r2, #12]
{
    d3d0:	4688      	mov	r8, r1
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d3d2:	3202      	adds	r2, #2
    d3d4:	211b      	movs	r1, #27
{
    d3d6:	4607      	mov	r7, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY,
    d3d8:	f7ff fae0 	bl	c99c <bt_att_create_pdu>
	if (!buf) {
    d3dc:	4605      	mov	r5, r0
    d3de:	b1c8      	cbz	r0, d414 <gatt_notify+0x4c>
    d3e0:	f100 0908 	add.w	r9, r0, #8
    d3e4:	2102      	movs	r1, #2
    d3e6:	4648      	mov	r0, r9
    d3e8:	f019 f892 	bl	26510 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    d3ec:	4606      	mov	r6, r0
    d3ee:	89a1      	ldrh	r1, [r4, #12]
    d3f0:	f826 8b02 	strh.w	r8, [r6], #2
    d3f4:	4648      	mov	r0, r9
    d3f6:	f019 f88b 	bl	26510 <net_buf_simple_add>
	memcpy(nfy->value, params->data, params->len);
    d3fa:	89a2      	ldrh	r2, [r4, #12]
    d3fc:	68a1      	ldr	r1, [r4, #8]
    d3fe:	4630      	mov	r0, r6
    d400:	f017 f832 	bl	24468 <memcpy>
	return bt_att_send(conn, buf, params->func, params->user_data);
    d404:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    d408:	4629      	mov	r1, r5
    d40a:	4638      	mov	r0, r7
}
    d40c:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	return bt_att_send(conn, buf, params->func, params->user_data);
    d410:	f018 b90b 	b.w	2562a <bt_att_send>
    d414:	4b06      	ldr	r3, [pc, #24]	; (d430 <gatt_notify+0x68>)
    d416:	4907      	ldr	r1, [pc, #28]	; (d434 <gatt_notify+0x6c>)
		BT_WARN("No buffer available to send notification");
    d418:	4807      	ldr	r0, [pc, #28]	; (d438 <gatt_notify+0x70>)
    d41a:	1ac9      	subs	r1, r1, r3
    d41c:	08c9      	lsrs	r1, r1, #3
    d41e:	0189      	lsls	r1, r1, #6
    d420:	f041 0102 	orr.w	r1, r1, #2
    d424:	f015 f814 	bl	22450 <log_0>
}
    d428:	f06f 000b 	mvn.w	r0, #11
    d42c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d430:	000278c0 	.word	0x000278c0
    d434:	00027970 	.word	0x00027970
    d438:	0002cfc7 	.word	0x0002cfc7

0000d43c <find_cf_cfg_by_addr>:
{
    d43c:	b570      	push	{r4, r5, r6, lr}
			if (id == cf_cfg[i].id &&
    d43e:	4c0e      	ldr	r4, [pc, #56]	; (d478 <find_cf_cfg_by_addr+0x3c>)
    d440:	7823      	ldrb	r3, [r4, #0]
    d442:	4283      	cmp	r3, r0
{
    d444:	4606      	mov	r6, r0
    d446:	460d      	mov	r5, r1
			if (id == cf_cfg[i].id &&
    d448:	d00a      	beq.n	d460 <find_cf_cfg_by_addr+0x24>
    d44a:	7c23      	ldrb	r3, [r4, #16]
    d44c:	42b3      	cmp	r3, r6
    d44e:	d111      	bne.n	d474 <find_cf_cfg_by_addr+0x38>
    d450:	490a      	ldr	r1, [pc, #40]	; (d47c <find_cf_cfg_by_addr+0x40>)
    d452:	2207      	movs	r2, #7
    d454:	4628      	mov	r0, r5
    d456:	f016 fff6 	bl	24446 <memcmp>
    d45a:	b958      	cbnz	r0, d474 <find_cf_cfg_by_addr+0x38>
		for (i = 0; i < ARRAY_SIZE(cf_cfg); i++) {
    d45c:	2001      	movs	r0, #1
    d45e:	e006      	b.n	d46e <find_cf_cfg_by_addr+0x32>
    d460:	2207      	movs	r2, #7
    d462:	1c61      	adds	r1, r4, #1
    d464:	4628      	mov	r0, r5
    d466:	f016 ffee 	bl	24446 <memcmp>
			if (id == cf_cfg[i].id &&
    d46a:	2800      	cmp	r0, #0
    d46c:	d1ed      	bne.n	d44a <find_cf_cfg_by_addr+0xe>
				return &cf_cfg[i];
    d46e:	eb04 1000 	add.w	r0, r4, r0, lsl #4
    d472:	e000      	b.n	d476 <find_cf_cfg_by_addr+0x3a>
	return NULL;
    d474:	2000      	movs	r0, #0
}
    d476:	bd70      	pop	{r4, r5, r6, pc}
    d478:	2000d798 	.word	0x2000d798
    d47c:	2000d7a9 	.word	0x2000d7a9

0000d480 <cf_set>:
{
    d480:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    d484:	4689      	mov	r9, r1
    d486:	b085      	sub	sp, #20
    d488:	4617      	mov	r7, r2
    d48a:	4698      	mov	r8, r3
	if (!name) {
    d48c:	4605      	mov	r5, r0
    d48e:	b978      	cbnz	r0, d4b0 <cf_set+0x30>
    d490:	4934      	ldr	r1, [pc, #208]	; (d564 <cf_set+0xe4>)
    d492:	4b35      	ldr	r3, [pc, #212]	; (d568 <cf_set+0xe8>)
		BT_ERR("Insufficient number of arguments");
    d494:	4835      	ldr	r0, [pc, #212]	; (d56c <cf_set+0xec>)
    d496:	1ac9      	subs	r1, r1, r3
    d498:	08c9      	lsrs	r1, r1, #3
    d49a:	0189      	lsls	r1, r1, #6
    d49c:	f041 0101 	orr.w	r1, r1, #1
    d4a0:	f014 ffd6 	bl	22450 <log_0>
		return -EINVAL;
    d4a4:	f06f 0415 	mvn.w	r4, #21
}
    d4a8:	4620      	mov	r0, r4
    d4aa:	b005      	add	sp, #20
    d4ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    d4b0:	a902      	add	r1, sp, #8
    d4b2:	f017 f8d5 	bl	24660 <bt_settings_decode_key>
	if (err) {
    d4b6:	4604      	mov	r4, r0
    d4b8:	b178      	cbz	r0, d4da <cf_set+0x5a>
    d4ba:	4a2b      	ldr	r2, [pc, #172]	; (d568 <cf_set+0xe8>)
    d4bc:	4c29      	ldr	r4, [pc, #164]	; (d564 <cf_set+0xe4>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    d4be:	4628      	mov	r0, r5
    d4c0:	1aa4      	subs	r4, r4, r2
    d4c2:	08e4      	lsrs	r4, r4, #3
    d4c4:	f7f8 f8ce 	bl	5664 <log_strdup>
    d4c8:	01a4      	lsls	r4, r4, #6
    d4ca:	f044 0401 	orr.w	r4, r4, #1
    d4ce:	4601      	mov	r1, r0
    d4d0:	4622      	mov	r2, r4
    d4d2:	4827      	ldr	r0, [pc, #156]	; (d570 <cf_set+0xf0>)
    d4d4:	f014 ffc9 	bl	2246a <log_1>
    d4d8:	e7e4      	b.n	d4a4 <cf_set+0x24>
	settings_name_next(name, &next);
    d4da:	a901      	add	r1, sp, #4
    d4dc:	4628      	mov	r0, r5
    d4de:	f015 fc6c 	bl	22dba <settings_name_next>
	if (!next) {
    d4e2:	9801      	ldr	r0, [sp, #4]
    d4e4:	b1d8      	cbz	r0, d51e <cf_set+0x9e>
		id = strtol(next, NULL, 10);
    d4e6:	220a      	movs	r2, #10
    d4e8:	4621      	mov	r1, r4
    d4ea:	f016 feef 	bl	242cc <strtol>
    d4ee:	b2c6      	uxtb	r6, r0
	cfg = find_cf_cfg_by_addr(id, &addr);
    d4f0:	a902      	add	r1, sp, #8
    d4f2:	4630      	mov	r0, r6
    d4f4:	f7ff ffa2 	bl	d43c <find_cf_cfg_by_addr>
	if (!cfg) {
    d4f8:	4605      	mov	r5, r0
    d4fa:	b9b8      	cbnz	r0, d52c <cf_set+0xac>
		cfg = find_cf_cfg(NULL);
    d4fc:	f7ff fe56 	bl	d1ac <find_cf_cfg>
		if (!cfg) {
    d500:	4605      	mov	r5, r0
    d502:	b970      	cbnz	r0, d522 <cf_set+0xa2>
    d504:	4b18      	ldr	r3, [pc, #96]	; (d568 <cf_set+0xe8>)
    d506:	4917      	ldr	r1, [pc, #92]	; (d564 <cf_set+0xe4>)
			BT_ERR("Unable to restore CF: no cfg left");
    d508:	481a      	ldr	r0, [pc, #104]	; (d574 <cf_set+0xf4>)
    d50a:	1ac9      	subs	r1, r1, r3
    d50c:	08c9      	lsrs	r1, r1, #3
    d50e:	0189      	lsls	r1, r1, #6
    d510:	f041 0101 	orr.w	r1, r1, #1
    d514:	f014 ff9c 	bl	22450 <log_0>
			return -ENOMEM;
    d518:	f06f 040b 	mvn.w	r4, #11
    d51c:	e7c4      	b.n	d4a8 <cf_set+0x28>
		id = BT_ID_DEFAULT;
    d51e:	4626      	mov	r6, r4
    d520:	e7e6      	b.n	d4f0 <cf_set+0x70>
		cfg->id = id;
    d522:	f800 6b01 	strb.w	r6, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    d526:	a902      	add	r1, sp, #8
    d528:	f018 f91e 	bl	25768 <bt_addr_le_copy>
	if (len_rd) {
    d52c:	f1b9 0f00 	cmp.w	r9, #0
    d530:	d013      	beq.n	d55a <cf_set+0xda>
		len = read_cb(cb_arg, cfg->data, sizeof(cfg->data));
    d532:	f105 0108 	add.w	r1, r5, #8
    d536:	2201      	movs	r2, #1
    d538:	4640      	mov	r0, r8
    d53a:	47b8      	blx	r7
		if (len < 0) {
    d53c:	1e05      	subs	r5, r0, #0
    d53e:	dab3      	bge.n	d4a8 <cf_set+0x28>
    d540:	4b09      	ldr	r3, [pc, #36]	; (d568 <cf_set+0xe8>)
    d542:	4a08      	ldr	r2, [pc, #32]	; (d564 <cf_set+0xe4>)
			BT_ERR("Failed to decode value (err %zd)", len);
    d544:	480c      	ldr	r0, [pc, #48]	; (d578 <cf_set+0xf8>)
    d546:	1ad2      	subs	r2, r2, r3
    d548:	08d2      	lsrs	r2, r2, #3
    d54a:	0192      	lsls	r2, r2, #6
    d54c:	f042 0201 	orr.w	r2, r2, #1
    d550:	4629      	mov	r1, r5
    d552:	f014 ff8a 	bl	2246a <log_1>
			return len;
    d556:	462c      	mov	r4, r5
    d558:	e7a6      	b.n	d4a8 <cf_set+0x28>
		clear_cf_cfg(cfg);
    d55a:	4628      	mov	r0, r5
    d55c:	f018 f99a 	bl	25894 <clear_cf_cfg>
    d560:	e7a2      	b.n	d4a8 <cf_set+0x28>
    d562:	bf00      	nop
    d564:	00027970 	.word	0x00027970
    d568:	000278c0 	.word	0x000278c0
    d56c:	0002bdf2 	.word	0x0002bdf2
    d570:	0002cff0 	.word	0x0002cff0
    d574:	0002d00c 	.word	0x0002d00c
    d578:	0002cf37 	.word	0x0002cf37

0000d57c <remove_peer_from_attr>:
#endif /*CONFIG_BT_GATT_CACHING */
#endif /* CONFIG_BT_SETTINGS */

static uint8_t remove_peer_from_attr(const struct bt_gatt_attr *attr,
				     uint16_t handle, void *user_data)
{
    d57c:	b508      	push	{r3, lr}
	const struct addr_with_id *addr_with_id = user_data;
	struct _bt_gatt_ccc *ccc;
	struct bt_gatt_ccc_cfg *cfg;

	/* Check if attribute is a CCC */
	if (attr->write != bt_gatt_attr_write_ccc) {
    d57e:	6881      	ldr	r1, [r0, #8]
{
    d580:	4613      	mov	r3, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d582:	4a07      	ldr	r2, [pc, #28]	; (d5a0 <remove_peer_from_attr+0x24>)
    d584:	4291      	cmp	r1, r2
    d586:	d109      	bne.n	d59c <remove_peer_from_attr+0x20>
	}

	ccc = attr->user_data;

	/* Check if there is a cfg for the peer */
	cfg = ccc_find_cfg(ccc, addr_with_id->addr, addr_with_id->id);
    d588:	791a      	ldrb	r2, [r3, #4]
    d58a:	6819      	ldr	r1, [r3, #0]
    d58c:	68c0      	ldr	r0, [r0, #12]
    d58e:	f018 fa53 	bl	25a38 <ccc_find_cfg>
	if (cfg) {
    d592:	b118      	cbz	r0, d59c <remove_peer_from_attr+0x20>
		memset(cfg, 0, sizeof(*cfg));
    d594:	220a      	movs	r2, #10
    d596:	2100      	movs	r1, #0
    d598:	f016 ff91 	bl	244be <memset>
	}

	return BT_GATT_ITER_CONTINUE;
}
    d59c:	2001      	movs	r0, #1
    d59e:	bd08      	pop	{r3, pc}
    d5a0:	0000d669 	.word	0x0000d669

0000d5a4 <ccc_save>:
{
    d5a4:	b538      	push	{r3, r4, r5, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d5a6:	4b0c      	ldr	r3, [pc, #48]	; (d5d8 <ccc_save+0x34>)
{
    d5a8:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d5aa:	6882      	ldr	r2, [r0, #8]
    d5ac:	429a      	cmp	r2, r3
{
    d5ae:	460d      	mov	r5, r1
	if (attr->write != bt_gatt_attr_write_ccc) {
    d5b0:	d10f      	bne.n	d5d2 <ccc_save+0x2e>
	cfg = ccc_find_cfg(ccc, save->addr_with_id.addr, save->addr_with_id.id);
    d5b2:	7922      	ldrb	r2, [r4, #4]
    d5b4:	6821      	ldr	r1, [r4, #0]
    d5b6:	68c0      	ldr	r0, [r0, #12]
    d5b8:	f018 fa3e 	bl	25a38 <ccc_find_cfg>
	if (!cfg) {
    d5bc:	b148      	cbz	r0, d5d2 <ccc_save+0x2e>
	save->store[save->count].handle = handle;
    d5be:	f8d4 30c8 	ldr.w	r3, [r4, #200]	; 0xc8
	save->store[save->count].value = cfg->value;
    d5c2:	8901      	ldrh	r1, [r0, #8]
    d5c4:	eb04 0283 	add.w	r2, r4, r3, lsl #2
	save->count++;
    d5c8:	3301      	adds	r3, #1
	save->store[save->count].handle = handle;
    d5ca:	8115      	strh	r5, [r2, #8]
	save->store[save->count].value = cfg->value;
    d5cc:	8151      	strh	r1, [r2, #10]
	save->count++;
    d5ce:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
}
    d5d2:	2001      	movs	r0, #1
    d5d4:	bd38      	pop	{r3, r4, r5, pc}
    d5d6:	bf00      	nop
    d5d8:	0000d669 	.word	0x0000d669

0000d5dc <ccc_load>:
{
    d5dc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d5de:	4b21      	ldr	r3, [pc, #132]	; (d664 <ccc_load+0x88>)
{
    d5e0:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d5e2:	6882      	ldr	r2, [r0, #8]
    d5e4:	429a      	cmp	r2, r3
    d5e6:	d002      	beq.n	d5ee <ccc_load+0x12>
		return BT_GATT_ITER_CONTINUE;
    d5e8:	2001      	movs	r0, #1
}
    d5ea:	b002      	add	sp, #8
    d5ec:	bd70      	pop	{r4, r5, r6, pc}
	if (!load->entry) {
    d5ee:	68a3      	ldr	r3, [r4, #8]
    d5f0:	68c6      	ldr	r6, [r0, #12]
    d5f2:	b94b      	cbnz	r3, d608 <ccc_load+0x2c>
	cfg = ccc_find_cfg(ccc, addr, id);
    d5f4:	7922      	ldrb	r2, [r4, #4]
    d5f6:	6821      	ldr	r1, [r4, #0]
    d5f8:	4630      	mov	r0, r6
    d5fa:	f018 fa1d 	bl	25a38 <ccc_find_cfg>
	if (!cfg) {
    d5fe:	2800      	cmp	r0, #0
    d600:	d0f2      	beq.n	d5e8 <ccc_load+0xc>
	clear_ccc_cfg(cfg);
    d602:	f018 f8b4 	bl	2576e <clear_ccc_cfg>
    d606:	e7ef      	b.n	d5e8 <ccc_load+0xc>
	} else if (!load->count) {
    d608:	68e0      	ldr	r0, [r4, #12]
    d60a:	2800      	cmp	r0, #0
    d60c:	d0ed      	beq.n	d5ea <ccc_load+0xe>
	if (load->entry->handle != handle) {
    d60e:	881b      	ldrh	r3, [r3, #0]
    d610:	4299      	cmp	r1, r3
    d612:	d00a      	beq.n	d62a <ccc_load+0x4e>
		if (load->entry->handle < handle) {
    d614:	d9e8      	bls.n	d5e8 <ccc_load+0xc>
	load->count--;
    d616:	68e0      	ldr	r0, [r4, #12]
	load->entry++;
    d618:	68a3      	ldr	r3, [r4, #8]
	load->count--;
    d61a:	3801      	subs	r0, #1
	load->entry++;
    d61c:	3304      	adds	r3, #4
	load->count--;
    d61e:	60e0      	str	r0, [r4, #12]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    d620:	3800      	subs	r0, #0
	load->entry++;
    d622:	60a3      	str	r3, [r4, #8]
	return load->count ? BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    d624:	bf18      	it	ne
    d626:	2001      	movne	r0, #1
    d628:	e7df      	b.n	d5ea <ccc_load+0xe>
	cfg = ccc_find_cfg(ccc, load->addr_with_id.addr, load->addr_with_id.id);
    d62a:	7922      	ldrb	r2, [r4, #4]
    d62c:	6821      	ldr	r1, [r4, #0]
    d62e:	4630      	mov	r0, r6
    d630:	f018 fa02 	bl	25a38 <ccc_find_cfg>
	if (!cfg) {
    d634:	4605      	mov	r5, r0
    d636:	b980      	cbnz	r0, d65a <ccc_load+0x7e>
		cfg = ccc_find_cfg(ccc, BT_ADDR_LE_ANY, 0);
    d638:	9000      	str	r0, [sp, #0]
    d63a:	4602      	mov	r2, r0
    d63c:	f8cd 0003 	str.w	r0, [sp, #3]
    d640:	4669      	mov	r1, sp
    d642:	4630      	mov	r0, r6
    d644:	f018 f9f8 	bl	25a38 <ccc_find_cfg>
		if (!cfg) {
    d648:	4605      	mov	r5, r0
    d64a:	2800      	cmp	r0, #0
    d64c:	d0e3      	beq.n	d616 <ccc_load+0x3a>
		bt_addr_le_copy(&cfg->peer, load->addr_with_id.addr);
    d64e:	6821      	ldr	r1, [r4, #0]
    d650:	3001      	adds	r0, #1
    d652:	f018 f889 	bl	25768 <bt_addr_le_copy>
		cfg->id = load->addr_with_id.id;
    d656:	7923      	ldrb	r3, [r4, #4]
    d658:	702b      	strb	r3, [r5, #0]
	cfg->value = load->entry->value;
    d65a:	68a3      	ldr	r3, [r4, #8]
    d65c:	885b      	ldrh	r3, [r3, #2]
    d65e:	812b      	strh	r3, [r5, #8]
    d660:	e7d9      	b.n	d616 <ccc_load+0x3a>
    d662:	bf00      	nop
    d664:	0000d669 	.word	0x0000d669

0000d668 <bt_gatt_attr_write_ccc>:
{
    d668:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    d66c:	461f      	mov	r7, r3
    d66e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    d672:	f8d1 900c 	ldr.w	r9, [r1, #12]
{
    d676:	4604      	mov	r4, r0
    d678:	4688      	mov	r8, r1
	if (offset) {
    d67a:	2b00      	cmp	r3, #0
    d67c:	d147      	bne.n	d70e <bt_gatt_attr_write_ccc+0xa6>
	if (!len || len > sizeof(uint16_t)) {
    d67e:	1e7b      	subs	r3, r7, #1
    d680:	2b01      	cmp	r3, #1
    d682:	d847      	bhi.n	d714 <bt_gatt_attr_write_ccc+0xac>
		value = *(uint8_t *)buf;
    d684:	7816      	ldrb	r6, [r2, #0]
	if (len < sizeof(uint16_t)) {
    d686:	2f01      	cmp	r7, #1
	cfg = find_ccc_cfg(conn, ccc);
    d688:	4649      	mov	r1, r9
    d68a:	bf14      	ite	ne
    d68c:	8816      	ldrhne	r6, [r2, #0]
		value = *(uint8_t *)buf;
    d68e:	b2b6      	uxtheq	r6, r6
	cfg = find_ccc_cfg(conn, ccc);
    d690:	f018 f9e1 	bl	25a56 <find_ccc_cfg>
	if (!cfg) {
    d694:	4605      	mov	r5, r0
    d696:	b9e0      	cbnz	r0, d6d2 <bt_gatt_attr_write_ccc+0x6a>
		if (!value) {
    d698:	b916      	cbnz	r6, d6a0 <bt_gatt_attr_write_ccc+0x38>
			return len;
    d69a:	4638      	mov	r0, r7
}
    d69c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cfg = find_ccc_cfg(NULL, ccc);
    d6a0:	4649      	mov	r1, r9
    d6a2:	f018 f9d8 	bl	25a56 <find_ccc_cfg>
		if (!cfg) {
    d6a6:	4605      	mov	r5, r0
    d6a8:	b960      	cbnz	r0, d6c4 <bt_gatt_attr_write_ccc+0x5c>
    d6aa:	4b1c      	ldr	r3, [pc, #112]	; (d71c <bt_gatt_attr_write_ccc+0xb4>)
    d6ac:	491c      	ldr	r1, [pc, #112]	; (d720 <bt_gatt_attr_write_ccc+0xb8>)
			BT_WARN("No space to store CCC cfg");
    d6ae:	481d      	ldr	r0, [pc, #116]	; (d724 <bt_gatt_attr_write_ccc+0xbc>)
    d6b0:	1ac9      	subs	r1, r1, r3
    d6b2:	08c9      	lsrs	r1, r1, #3
    d6b4:	0189      	lsls	r1, r1, #6
    d6b6:	f041 0102 	orr.w	r1, r1, #2
    d6ba:	f014 fec9 	bl	22450 <log_0>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    d6be:	f06f 0010 	mvn.w	r0, #16
    d6c2:	e7eb      	b.n	d69c <bt_gatt_attr_write_ccc+0x34>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d6c4:	f104 0188 	add.w	r1, r4, #136	; 0x88
    d6c8:	3001      	adds	r0, #1
    d6ca:	f018 f84d 	bl	25768 <bt_addr_le_copy>
		cfg->id = conn->id;
    d6ce:	7a23      	ldrb	r3, [r4, #8]
    d6d0:	702b      	strb	r3, [r5, #0]
	if (ccc->cfg_write) {
    d6d2:	f8d9 3010 	ldr.w	r3, [r9, #16]
    d6d6:	b973      	cbnz	r3, d6f6 <bt_gatt_attr_write_ccc+0x8e>
	if (cfg->value != ccc->value) {
    d6d8:	f8b9 300a 	ldrh.w	r3, [r9, #10]
	cfg->value = value;
    d6dc:	812e      	strh	r6, [r5, #8]
	if (cfg->value != ccc->value) {
    d6de:	42b3      	cmp	r3, r6
    d6e0:	d003      	beq.n	d6ea <bt_gatt_attr_write_ccc+0x82>
		gatt_ccc_changed(attr, ccc);
    d6e2:	4649      	mov	r1, r9
    d6e4:	4640      	mov	r0, r8
    d6e6:	f018 f81c 	bl	25722 <gatt_ccc_changed>
	if (!value) {
    d6ea:	2e00      	cmp	r6, #0
    d6ec:	d1d5      	bne.n	d69a <bt_gatt_attr_write_ccc+0x32>
		clear_ccc_cfg(cfg);
    d6ee:	4628      	mov	r0, r5
    d6f0:	f018 f83d 	bl	2576e <clear_ccc_cfg>
    d6f4:	e7d1      	b.n	d69a <bt_gatt_attr_write_ccc+0x32>
		ssize_t write = ccc->cfg_write(conn, attr, value);
    d6f6:	4632      	mov	r2, r6
    d6f8:	4641      	mov	r1, r8
    d6fa:	4620      	mov	r0, r4
    d6fc:	4798      	blx	r3
		if (write < 0) {
    d6fe:	2800      	cmp	r0, #0
    d700:	dbcc      	blt.n	d69c <bt_gatt_attr_write_ccc+0x34>
		if (write != sizeof(value) && write != 1) {
    d702:	1e44      	subs	r4, r0, #1
    d704:	2c01      	cmp	r4, #1
    d706:	d9e7      	bls.n	d6d8 <bt_gatt_attr_write_ccc+0x70>
			return BT_GATT_ERR(BT_ATT_ERR_UNLIKELY);
    d708:	f06f 000d 	mvn.w	r0, #13
    d70c:	e7c6      	b.n	d69c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    d70e:	f06f 0006 	mvn.w	r0, #6
    d712:	e7c3      	b.n	d69c <bt_gatt_attr_write_ccc+0x34>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    d714:	f06f 000c 	mvn.w	r0, #12
    d718:	e7c0      	b.n	d69c <bt_gatt_attr_write_ccc+0x34>
    d71a:	bf00      	nop
    d71c:	000278c0 	.word	0x000278c0
    d720:	00027970 	.word	0x00027970
    d724:	0002d02e 	.word	0x0002d02e

0000d728 <find_sc_cfg>:
{
    d728:	b570      	push	{r4, r5, r6, lr}
		if (id == sc_cfg[i].id &&
    d72a:	4c0e      	ldr	r4, [pc, #56]	; (d764 <find_sc_cfg+0x3c>)
    d72c:	7823      	ldrb	r3, [r4, #0]
    d72e:	4283      	cmp	r3, r0
{
    d730:	4605      	mov	r5, r0
    d732:	460e      	mov	r6, r1
		if (id == sc_cfg[i].id &&
    d734:	d00a      	beq.n	d74c <find_sc_cfg+0x24>
    d736:	7b23      	ldrb	r3, [r4, #12]
    d738:	42ab      	cmp	r3, r5
    d73a:	d111      	bne.n	d760 <find_sc_cfg+0x38>
    d73c:	480a      	ldr	r0, [pc, #40]	; (d768 <find_sc_cfg+0x40>)
    d73e:	2207      	movs	r2, #7
    d740:	4631      	mov	r1, r6
    d742:	f016 fe80 	bl	24446 <memcmp>
    d746:	b958      	cbnz	r0, d760 <find_sc_cfg+0x38>
	for (size_t i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d748:	2001      	movs	r0, #1
    d74a:	e005      	b.n	d758 <find_sc_cfg+0x30>
    d74c:	2207      	movs	r2, #7
    d74e:	1c60      	adds	r0, r4, #1
    d750:	f016 fe79 	bl	24446 <memcmp>
		if (id == sc_cfg[i].id &&
    d754:	2800      	cmp	r0, #0
    d756:	d1ee      	bne.n	d736 <find_sc_cfg+0xe>
			return &sc_cfg[i];
    d758:	230c      	movs	r3, #12
    d75a:	fb03 4000 	mla	r0, r3, r0, r4
    d75e:	e000      	b.n	d762 <find_sc_cfg+0x3a>
	return NULL;
    d760:	2000      	movs	r0, #0
}
    d762:	bd70      	pop	{r4, r5, r6, pc}
    d764:	2000ed5c 	.word	0x2000ed5c
    d768:	2000ed69 	.word	0x2000ed69

0000d76c <sc_save>:
{
    d76c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    d770:	4680      	mov	r8, r0
    d772:	460f      	mov	r7, r1
    d774:	4616      	mov	r6, r2
    d776:	461d      	mov	r5, r3
	cfg = find_sc_cfg(id, peer);
    d778:	f7ff ffd6 	bl	d728 <find_sc_cfg>
	if (!cfg) {
    d77c:	4604      	mov	r4, r0
    d77e:	b9c8      	cbnz	r0, d7b4 <sc_save+0x48>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    d780:	4669      	mov	r1, sp
    d782:	9000      	str	r0, [sp, #0]
    d784:	f8cd 0003 	str.w	r0, [sp, #3]
    d788:	f7ff ffce 	bl	d728 <find_sc_cfg>
		if (!cfg) {
    d78c:	4604      	mov	r4, r0
    d78e:	b960      	cbnz	r0, d7aa <sc_save+0x3e>
    d790:	4916      	ldr	r1, [pc, #88]	; (d7ec <sc_save+0x80>)
    d792:	4b17      	ldr	r3, [pc, #92]	; (d7f0 <sc_save+0x84>)
			BT_ERR("unable to save SC: no cfg left");
    d794:	4817      	ldr	r0, [pc, #92]	; (d7f4 <sc_save+0x88>)
    d796:	1ac9      	subs	r1, r1, r3
    d798:	08c9      	lsrs	r1, r1, #3
    d79a:	0189      	lsls	r1, r1, #6
    d79c:	f041 0101 	orr.w	r1, r1, #1
    d7a0:	f014 fe56 	bl	22450 <log_0>
}
    d7a4:	b002      	add	sp, #8
    d7a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cfg->id = id;
    d7aa:	f800 8b01 	strb.w	r8, [r0], #1
		bt_addr_le_copy(&cfg->peer, peer);
    d7ae:	4639      	mov	r1, r7
    d7b0:	f017 ffda 	bl	25768 <bt_addr_le_copy>
	if (!(cfg->data.start || cfg->data.end)) {
    d7b4:	8922      	ldrh	r2, [r4, #8]
    d7b6:	8963      	ldrh	r3, [r4, #10]
    d7b8:	b97a      	cbnz	r2, d7da <sc_save+0x6e>
    d7ba:	b983      	cbnz	r3, d7de <sc_save+0x72>
		cfg->data.start = start;
    d7bc:	8126      	strh	r6, [r4, #8]
		*end = new_end;
    d7be:	8165      	strh	r5, [r4, #10]
	    modified && bt_addr_le_is_bonded(cfg->id, &cfg->peer)) {
    d7c0:	4621      	mov	r1, r4
    d7c2:	f811 0b01 	ldrb.w	r0, [r1], #1
    d7c6:	f017 f973 	bl	24ab0 <bt_addr_le_is_bonded>
    d7ca:	2800      	cmp	r0, #0
    d7cc:	d0ea      	beq.n	d7a4 <sc_save+0x38>
		sc_store(cfg);
    d7ce:	4620      	mov	r0, r4
}
    d7d0:	b002      	add	sp, #8
    d7d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		sc_store(cfg);
    d7d6:	f7ff bd6f 	b.w	d2b8 <sc_store>
	if (new_start >= *start && new_end <= *end) {
    d7da:	4296      	cmp	r6, r2
    d7dc:	d302      	bcc.n	d7e4 <sc_save+0x78>
    d7de:	429d      	cmp	r5, r3
    d7e0:	d8ed      	bhi.n	d7be <sc_save+0x52>
    d7e2:	e7df      	b.n	d7a4 <sc_save+0x38>
	if (*end < new_end) {
    d7e4:	429d      	cmp	r5, r3
		*start = new_start;
    d7e6:	8126      	strh	r6, [r4, #8]
	if (*end < new_end) {
    d7e8:	d9ea      	bls.n	d7c0 <sc_save+0x54>
    d7ea:	e7e8      	b.n	d7be <sc_save+0x52>
    d7ec:	00027970 	.word	0x00027970
    d7f0:	000278c0 	.word	0x000278c0
    d7f4:	0002d048 	.word	0x0002d048

0000d7f8 <notify_cb>:
{
    d7f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d7fc:	4b33      	ldr	r3, [pc, #204]	; (d8cc <notify_cb+0xd4>)
{
    d7fe:	4614      	mov	r4, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d800:	6882      	ldr	r2, [r0, #8]
    d802:	429a      	cmp	r2, r3
{
    d804:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d806:	d113      	bne.n	d830 <notify_cb+0x38>
	ccc = attr->user_data;
    d808:	68c7      	ldr	r7, [r0, #12]
	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) && ccc == &sc_ccc) {
    d80a:	4b31      	ldr	r3, [pc, #196]	; (d8d0 <notify_cb+0xd8>)
    d80c:	429f      	cmp	r7, r3
    d80e:	d013      	beq.n	d838 <notify_cb+0x40>
		if (cfg->value != data->type) {
    d810:	893a      	ldrh	r2, [r7, #8]
    d812:	89a3      	ldrh	r3, [r4, #12]
    d814:	429a      	cmp	r2, r3
    d816:	d10b      	bne.n	d830 <notify_cb+0x38>
		conn = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d818:	4639      	mov	r1, r7
    d81a:	f811 0b01 	ldrb.w	r0, [r1], #1
    d81e:	f7fe f86d 	bl	b8fc <bt_conn_lookup_addr_le>
		if (!conn) {
    d822:	4605      	mov	r5, r0
    d824:	b120      	cbz	r0, d830 <notify_cb+0x38>
		if (conn->state != BT_CONN_CONNECTED) {
    d826:	7b43      	ldrb	r3, [r0, #13]
    d828:	2b07      	cmp	r3, #7
    d82a:	d02d      	beq.n	d888 <notify_cb+0x90>
			bt_conn_unref(conn);
    d82c:	f017 fa54 	bl	24cd8 <bt_conn_unref>
	return BT_GATT_ITER_CONTINUE;
    d830:	2001      	movs	r0, #1
}
    d832:	b003      	add	sp, #12
    d834:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d838:	f04f 0800 	mov.w	r8, #0
    d83c:	4d25      	ldr	r5, [pc, #148]	; (d8d4 <notify_cb+0xdc>)
			if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
    d83e:	46c1      	mov	r9, r8
    d840:	2207      	movs	r2, #7
    d842:	4669      	mov	r1, sp
    d844:	4628      	mov	r0, r5
    d846:	f8cd 9000 	str.w	r9, [sp]
    d84a:	f8cd 9003 	str.w	r9, [sp, #3]
    d84e:	f016 fdfa 	bl	24446 <memcmp>
    d852:	b178      	cbz	r0, d874 <notify_cb+0x7c>
			conn = bt_conn_lookup_state_le(cfg->id, &cfg->peer,
    d854:	f815 0c01 	ldrb.w	r0, [r5, #-1]
    d858:	2207      	movs	r2, #7
    d85a:	4629      	mov	r1, r5
    d85c:	f7fe f892 	bl	b984 <bt_conn_lookup_state_le>
			if (!conn) {
    d860:	b978      	cbnz	r0, d882 <notify_cb+0x8a>
				sc = (struct sc_data *)data->ind_params->data;
    d862:	6923      	ldr	r3, [r4, #16]
				sc_save(cfg->id, &cfg->peer,
    d864:	f815 0c01 	ldrb.w	r0, [r5, #-1]
				sc = (struct sc_data *)data->ind_params->data;
    d868:	691a      	ldr	r2, [r3, #16]
				sc_save(cfg->id, &cfg->peer,
    d86a:	4629      	mov	r1, r5
    d86c:	8853      	ldrh	r3, [r2, #2]
    d86e:	8812      	ldrh	r2, [r2, #0]
    d870:	f7ff ff7c 	bl	d76c <sc_save>
		for (i = 0; i < ARRAY_SIZE(sc_cfg); i++) {
    d874:	350c      	adds	r5, #12
    d876:	f1b8 0f00 	cmp.w	r8, #0
    d87a:	d1c9      	bne.n	d810 <notify_cb+0x18>
    d87c:	f04f 0801 	mov.w	r8, #1
    d880:	e7de      	b.n	d840 <notify_cb+0x48>
			bt_conn_unref(conn);
    d882:	f017 fa29 	bl	24cd8 <bt_conn_unref>
    d886:	e7f5      	b.n	d874 <notify_cb+0x7c>
		if (ccc->cfg_match && !ccc->cfg_match(conn, attr)) {
    d888:	697b      	ldr	r3, [r7, #20]
    d88a:	b123      	cbz	r3, d896 <notify_cb+0x9e>
    d88c:	4631      	mov	r1, r6
    d88e:	4798      	blx	r3
    d890:	b908      	cbnz	r0, d896 <notify_cb+0x9e>
			bt_conn_unref(conn);
    d892:	4628      	mov	r0, r5
    d894:	e7ca      	b.n	d82c <notify_cb+0x34>
		if (data->type == BT_GATT_CCC_INDICATE) {
    d896:	89a3      	ldrh	r3, [r4, #12]
			err = gatt_indicate(conn, data->handle,
    d898:	88a1      	ldrh	r1, [r4, #4]
    d89a:	6922      	ldr	r2, [r4, #16]
		if (data->type == BT_GATT_CCC_INDICATE) {
    d89c:	2b02      	cmp	r3, #2
			err = gatt_indicate(conn, data->handle,
    d89e:	4628      	mov	r0, r5
		if (data->type == BT_GATT_CCC_INDICATE) {
    d8a0:	d110      	bne.n	d8c4 <notify_cb+0xcc>
			err = gatt_indicate(conn, data->handle,
    d8a2:	f7ff fd3b 	bl	d31c <gatt_indicate>
			if (err == 0) {
    d8a6:	4606      	mov	r6, r0
    d8a8:	b918      	cbnz	r0, d8b2 <notify_cb+0xba>
				data->ind_params->_ref++;
    d8aa:	6922      	ldr	r2, [r4, #16]
    d8ac:	7d93      	ldrb	r3, [r2, #22]
    d8ae:	3301      	adds	r3, #1
    d8b0:	7593      	strb	r3, [r2, #22]
		bt_conn_unref(conn);
    d8b2:	4628      	mov	r0, r5
    d8b4:	f017 fa10 	bl	24cd8 <bt_conn_unref>
		if (err < 0) {
    d8b8:	2e00      	cmp	r6, #0
    d8ba:	f04f 0000 	mov.w	r0, #0
    d8be:	dbb8      	blt.n	d832 <notify_cb+0x3a>
		data->err = 0;
    d8c0:	60a0      	str	r0, [r4, #8]
    d8c2:	e7b5      	b.n	d830 <notify_cb+0x38>
			err = gatt_notify(conn, data->handle, data->nfy_params);
    d8c4:	f7ff fd80 	bl	d3c8 <gatt_notify>
    d8c8:	4606      	mov	r6, r0
    d8ca:	e7f2      	b.n	d8b2 <notify_cb+0xba>
    d8cc:	0000d669 	.word	0x0000d669
    d8d0:	2000037c 	.word	0x2000037c
    d8d4:	2000ed5d 	.word	0x2000ed5d

0000d8d8 <bt_gatt_clear_sc>:
{
    d8d8:	b570      	push	{r4, r5, r6, lr}
    d8da:	b08c      	sub	sp, #48	; 0x30
	cfg = find_sc_cfg(id, (bt_addr_le_t *)addr);
    d8dc:	f7ff ff24 	bl	d728 <find_sc_cfg>
	if (!cfg) {
    d8e0:	4604      	mov	r4, r0
    d8e2:	b318      	cbz	r0, d92c <bt_gatt_clear_sc+0x54>
		if (cfg->id) {
    d8e4:	4605      	mov	r5, r0
    d8e6:	f815 2b01 	ldrb.w	r2, [r5], #1
    d8ea:	b312      	cbz	r2, d932 <bt_gatt_clear_sc+0x5a>
			u8_to_dec(id_str, sizeof(id_str), cfg->id);
    d8ec:	ae02      	add	r6, sp, #8
    d8ee:	2104      	movs	r1, #4
    d8f0:	4630      	mov	r0, r6
    d8f2:	f014 f864 	bl	219be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "sc",
    d8f6:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "sc",
    d8f8:	2124      	movs	r1, #36	; 0x24
    d8fa:	4a0f      	ldr	r2, [pc, #60]	; (d938 <bt_gatt_clear_sc+0x60>)
    d8fc:	462b      	mov	r3, r5
    d8fe:	a803      	add	r0, sp, #12
    d900:	f7fa fef2 	bl	86e8 <bt_settings_encode_key>
		err = settings_delete(key);
    d904:	a803      	add	r0, sp, #12
    d906:	f015 fa31 	bl	22d6c <settings_delete>
		if (err) {
    d90a:	4601      	mov	r1, r0
    d90c:	b148      	cbz	r0, d922 <bt_gatt_clear_sc+0x4a>
    d90e:	4a0b      	ldr	r2, [pc, #44]	; (d93c <bt_gatt_clear_sc+0x64>)
    d910:	4b0b      	ldr	r3, [pc, #44]	; (d940 <bt_gatt_clear_sc+0x68>)
			BT_ERR("failed to delete SC (err %d)", err);
    d912:	480c      	ldr	r0, [pc, #48]	; (d944 <bt_gatt_clear_sc+0x6c>)
    d914:	1ad2      	subs	r2, r2, r3
    d916:	08d2      	lsrs	r2, r2, #3
    d918:	0192      	lsls	r2, r2, #6
    d91a:	f042 0201 	orr.w	r2, r2, #1
    d91e:	f014 fda4 	bl	2246a <log_1>
	memset(cfg, 0, sizeof(*cfg));
    d922:	220c      	movs	r2, #12
    d924:	2100      	movs	r1, #0
    d926:	4620      	mov	r0, r4
    d928:	f016 fdc9 	bl	244be <memset>
}
    d92c:	2000      	movs	r0, #0
    d92e:	b00c      	add	sp, #48	; 0x30
    d930:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "sc",
    d932:	9200      	str	r2, [sp, #0]
    d934:	e7e0      	b.n	d8f8 <bt_gatt_clear_sc+0x20>
    d936:	bf00      	nop
    d938:	0002d182 	.word	0x0002d182
    d93c:	00027970 	.word	0x00027970
    d940:	000278c0 	.word	0x000278c0
    d944:	0002d067 	.word	0x0002d067

0000d948 <sc_clear>:
{
    d948:	b570      	push	{r4, r5, r6, lr}
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d94a:	f100 0688 	add.w	r6, r0, #136	; 0x88
{
    d94e:	4604      	mov	r4, r0
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d950:	4631      	mov	r1, r6
    d952:	7a00      	ldrb	r0, [r0, #8]
    d954:	f017 f8ac 	bl	24ab0 <bt_addr_le_is_bonded>
    d958:	4605      	mov	r5, r0
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d95a:	4631      	mov	r1, r6
    d95c:	7a20      	ldrb	r0, [r4, #8]
	if (bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d95e:	b17d      	cbz	r5, d980 <sc_clear+0x38>
		err = bt_gatt_clear_sc(conn->id, &conn->le.dst);
    d960:	f7ff ffba 	bl	d8d8 <bt_gatt_clear_sc>
		if (err) {
    d964:	4601      	mov	r1, r0
    d966:	b1a0      	cbz	r0, d992 <sc_clear+0x4a>
    d968:	4a0a      	ldr	r2, [pc, #40]	; (d994 <sc_clear+0x4c>)
    d96a:	4b0b      	ldr	r3, [pc, #44]	; (d998 <sc_clear+0x50>)
			BT_ERR("Failed to clear SC %d", err);
    d96c:	480b      	ldr	r0, [pc, #44]	; (d99c <sc_clear+0x54>)
    d96e:	1ad2      	subs	r2, r2, r3
    d970:	08d2      	lsrs	r2, r2, #3
    d972:	0192      	lsls	r2, r2, #6
}
    d974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			BT_ERR("Failed to clear SC %d", err);
    d978:	f042 0201 	orr.w	r2, r2, #1
    d97c:	f014 bd75 	b.w	2246a <log_1>
		cfg = find_sc_cfg(conn->id, &conn->le.dst);
    d980:	f7ff fed2 	bl	d728 <find_sc_cfg>
		if (cfg) {
    d984:	b128      	cbz	r0, d992 <sc_clear+0x4a>
	memset(cfg, 0, sizeof(*cfg));
    d986:	4629      	mov	r1, r5
    d988:	220c      	movs	r2, #12
}
    d98a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	memset(cfg, 0, sizeof(*cfg));
    d98e:	f016 bd96 	b.w	244be <memset>
}
    d992:	bd70      	pop	{r4, r5, r6, pc}
    d994:	00027970 	.word	0x00027970
    d998:	000278c0 	.word	0x000278c0
    d99c:	0002d084 	.word	0x0002d084

0000d9a0 <disconnected_cb>:
{
    d9a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    d9a4:	4b1f      	ldr	r3, [pc, #124]	; (da24 <disconnected_cb+0x84>)
{
    d9a6:	4615      	mov	r5, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    d9a8:	6882      	ldr	r2, [r0, #8]
    d9aa:	429a      	cmp	r2, r3
{
    d9ac:	4606      	mov	r6, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    d9ae:	d102      	bne.n	d9b6 <disconnected_cb+0x16>
	ccc = attr->user_data;
    d9b0:	68c4      	ldr	r4, [r0, #12]
	if (!ccc->value) {
    d9b2:	8963      	ldrh	r3, [r4, #10]
    d9b4:	b9c3      	cbnz	r3, d9e8 <disconnected_cb+0x48>
}
    d9b6:	2001      	movs	r0, #1
    d9b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    d9bc:	f105 0888 	add.w	r8, r5, #136	; 0x88
    d9c0:	7a28      	ldrb	r0, [r5, #8]
    d9c2:	4641      	mov	r1, r8
    d9c4:	f017 f874 	bl	24ab0 <bt_addr_le_is_bonded>
    d9c8:	b948      	cbnz	r0, d9de <disconnected_cb+0x3e>
				if (ccc == &sc_ccc) {
    d9ca:	4b17      	ldr	r3, [pc, #92]	; (da28 <disconnected_cb+0x88>)
    d9cc:	429c      	cmp	r4, r3
    d9ce:	d102      	bne.n	d9d6 <disconnected_cb+0x36>
					sc_clear(conn);
    d9d0:	4628      	mov	r0, r5
    d9d2:	f7ff ffb9 	bl	d948 <sc_clear>
				clear_ccc_cfg(cfg);
    d9d6:	4620      	mov	r0, r4
    d9d8:	f017 fec9 	bl	2576e <clear_ccc_cfg>
	if (!value_used) {
    d9dc:	e019      	b.n	da12 <disconnected_cb+0x72>
				bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    d9de:	4641      	mov	r1, r8
    d9e0:	4638      	mov	r0, r7
    d9e2:	f017 fec1 	bl	25768 <bt_addr_le_copy>
	if (!value_used) {
    d9e6:	e014      	b.n	da12 <disconnected_cb+0x72>
		if (!cfg->value) {
    d9e8:	8923      	ldrh	r3, [r4, #8]
    d9ea:	b193      	cbz	r3, da12 <disconnected_cb+0x72>
		if (!bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    d9ec:	4627      	mov	r7, r4
    d9ee:	4628      	mov	r0, r5
    d9f0:	f817 1b01 	ldrb.w	r1, [r7], #1
    d9f4:	463a      	mov	r2, r7
    d9f6:	f017 f934 	bl	24c62 <bt_conn_is_peer_addr_le>
    d9fa:	2800      	cmp	r0, #0
    d9fc:	d1de      	bne.n	d9bc <disconnected_cb+0x1c>
			tmp = bt_conn_lookup_addr_le(cfg->id, &cfg->peer);
    d9fe:	7820      	ldrb	r0, [r4, #0]
    da00:	4639      	mov	r1, r7
    da02:	f7fd ff7b 	bl	b8fc <bt_conn_lookup_addr_le>
			if (tmp) {
    da06:	b120      	cbz	r0, da12 <disconnected_cb+0x72>
				if (tmp->state == BT_CONN_CONNECTED) {
    da08:	7b45      	ldrb	r5, [r0, #13]
				bt_conn_unref(tmp);
    da0a:	f017 f965 	bl	24cd8 <bt_conn_unref>
	if (!value_used) {
    da0e:	2d07      	cmp	r5, #7
    da10:	d0d1      	beq.n	d9b6 <disconnected_cb+0x16>
		if (ccc->cfg_changed) {
    da12:	68e3      	ldr	r3, [r4, #12]
		ccc->value = 0U;
    da14:	2100      	movs	r1, #0
    da16:	8161      	strh	r1, [r4, #10]
		if (ccc->cfg_changed) {
    da18:	2b00      	cmp	r3, #0
    da1a:	d0cc      	beq.n	d9b6 <disconnected_cb+0x16>
			ccc->cfg_changed(attr, ccc->value);
    da1c:	4630      	mov	r0, r6
    da1e:	4798      	blx	r3
    da20:	e7c9      	b.n	d9b6 <disconnected_cb+0x16>
    da22:	bf00      	nop
    da24:	0000d669 	.word	0x0000d669
    da28:	2000037c 	.word	0x2000037c

0000da2c <sc_set>:
{
    da2c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    da30:	460e      	mov	r6, r1
    da32:	b087      	sub	sp, #28
    da34:	4690      	mov	r8, r2
    da36:	4699      	mov	r9, r3
	if (!name) {
    da38:	4607      	mov	r7, r0
    da3a:	b978      	cbnz	r0, da5c <sc_set+0x30>
    da3c:	4937      	ldr	r1, [pc, #220]	; (db1c <sc_set+0xf0>)
    da3e:	4b38      	ldr	r3, [pc, #224]	; (db20 <sc_set+0xf4>)
		BT_ERR("Insufficient number of arguments");
    da40:	4838      	ldr	r0, [pc, #224]	; (db24 <sc_set+0xf8>)
    da42:	1ac9      	subs	r1, r1, r3
    da44:	08c9      	lsrs	r1, r1, #3
    da46:	0189      	lsls	r1, r1, #6
    da48:	f041 0101 	orr.w	r1, r1, #1
    da4c:	f014 fd00 	bl	22450 <log_0>
		return -EINVAL;
    da50:	f06f 0515 	mvn.w	r5, #21
}
    da54:	4628      	mov	r0, r5
    da56:	b007      	add	sp, #28
    da58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	err = bt_settings_decode_key(name, &addr);
    da5c:	a902      	add	r1, sp, #8
    da5e:	f016 fdff 	bl	24660 <bt_settings_decode_key>
	if (err) {
    da62:	4605      	mov	r5, r0
    da64:	b178      	cbz	r0, da86 <sc_set+0x5a>
    da66:	4a2e      	ldr	r2, [pc, #184]	; (db20 <sc_set+0xf4>)
    da68:	4c2c      	ldr	r4, [pc, #176]	; (db1c <sc_set+0xf0>)
		BT_ERR("Unable to decode address %s", log_strdup(name));
    da6a:	4638      	mov	r0, r7
    da6c:	1aa4      	subs	r4, r4, r2
    da6e:	08e4      	lsrs	r4, r4, #3
    da70:	f7f7 fdf8 	bl	5664 <log_strdup>
    da74:	01a4      	lsls	r4, r4, #6
    da76:	f044 0401 	orr.w	r4, r4, #1
    da7a:	4601      	mov	r1, r0
    da7c:	4622      	mov	r2, r4
    da7e:	482a      	ldr	r0, [pc, #168]	; (db28 <sc_set+0xfc>)
    da80:	f014 fcf3 	bl	2246a <log_1>
    da84:	e7e4      	b.n	da50 <sc_set+0x24>
	settings_name_next(name, &next);
    da86:	a901      	add	r1, sp, #4
    da88:	4638      	mov	r0, r7
    da8a:	f015 f996 	bl	22dba <settings_name_next>
	if (!next) {
    da8e:	9801      	ldr	r0, [sp, #4]
    da90:	b308      	cbz	r0, dad6 <sc_set+0xaa>
		id = strtol(next, NULL, 10);
    da92:	220a      	movs	r2, #10
    da94:	4629      	mov	r1, r5
    da96:	f016 fc19 	bl	242cc <strtol>
    da9a:	b2c7      	uxtb	r7, r0
	cfg = find_sc_cfg(id, &addr);
    da9c:	a902      	add	r1, sp, #8
    da9e:	4638      	mov	r0, r7
    daa0:	f7ff fe42 	bl	d728 <find_sc_cfg>
	if (!cfg && len_rd) {
    daa4:	4604      	mov	r4, r0
    daa6:	bb88      	cbnz	r0, db0c <sc_set+0xe0>
    daa8:	2e00      	cmp	r6, #0
    daaa:	d0d3      	beq.n	da54 <sc_set+0x28>
		cfg = find_sc_cfg(BT_ID_DEFAULT, BT_ADDR_LE_ANY);
    daac:	a904      	add	r1, sp, #16
    daae:	9004      	str	r0, [sp, #16]
    dab0:	f8cd 0013 	str.w	r0, [sp, #19]
    dab4:	f7ff fe38 	bl	d728 <find_sc_cfg>
		if (!cfg) {
    dab8:	4604      	mov	r4, r0
    daba:	b970      	cbnz	r0, dada <sc_set+0xae>
    dabc:	4b18      	ldr	r3, [pc, #96]	; (db20 <sc_set+0xf4>)
    dabe:	4917      	ldr	r1, [pc, #92]	; (db1c <sc_set+0xf0>)
			BT_ERR("Unable to restore SC: no cfg left");
    dac0:	481a      	ldr	r0, [pc, #104]	; (db2c <sc_set+0x100>)
    dac2:	1ac9      	subs	r1, r1, r3
    dac4:	08c9      	lsrs	r1, r1, #3
    dac6:	0189      	lsls	r1, r1, #6
    dac8:	f041 0101 	orr.w	r1, r1, #1
    dacc:	f014 fcc0 	bl	22450 <log_0>
			return -ENOMEM;
    dad0:	f06f 050b 	mvn.w	r5, #11
    dad4:	e7be      	b.n	da54 <sc_set+0x28>
		id = BT_ID_DEFAULT;
    dad6:	462f      	mov	r7, r5
    dad8:	e7e0      	b.n	da9c <sc_set+0x70>
		cfg->id = id;
    dada:	f800 7b01 	strb.w	r7, [r0], #1
		bt_addr_le_copy(&cfg->peer, &addr);
    dade:	a902      	add	r1, sp, #8
    dae0:	f017 fe42 	bl	25768 <bt_addr_le_copy>
		len = read_cb(cb_arg, &cfg->data, sizeof(cfg->data));
    dae4:	f104 0108 	add.w	r1, r4, #8
    dae8:	2204      	movs	r2, #4
    daea:	4648      	mov	r0, r9
    daec:	47c0      	blx	r8
		if (len < 0) {
    daee:	1e04      	subs	r4, r0, #0
    daf0:	dab0      	bge.n	da54 <sc_set+0x28>
    daf2:	4b0b      	ldr	r3, [pc, #44]	; (db20 <sc_set+0xf4>)
    daf4:	4a09      	ldr	r2, [pc, #36]	; (db1c <sc_set+0xf0>)
			BT_ERR("Failed to decode value (err %zd)", len);
    daf6:	480e      	ldr	r0, [pc, #56]	; (db30 <sc_set+0x104>)
    daf8:	1ad2      	subs	r2, r2, r3
    dafa:	08d2      	lsrs	r2, r2, #3
    dafc:	0192      	lsls	r2, r2, #6
    dafe:	f042 0201 	orr.w	r2, r2, #1
    db02:	4621      	mov	r1, r4
    db04:	f014 fcb1 	bl	2246a <log_1>
			return len;
    db08:	4625      	mov	r5, r4
    db0a:	e7a3      	b.n	da54 <sc_set+0x28>
	if (len_rd) {
    db0c:	2e00      	cmp	r6, #0
    db0e:	d1e9      	bne.n	dae4 <sc_set+0xb8>
		memset(cfg, 0, sizeof(*cfg));
    db10:	220c      	movs	r2, #12
    db12:	4631      	mov	r1, r6
    db14:	f016 fcd3 	bl	244be <memset>
		BT_DBG("Removed SC for %s", bt_addr_le_str(&addr));
    db18:	e79c      	b.n	da54 <sc_set+0x28>
    db1a:	bf00      	nop
    db1c:	00027970 	.word	0x00027970
    db20:	000278c0 	.word	0x000278c0
    db24:	0002bdf2 	.word	0x0002bdf2
    db28:	0002cff0 	.word	0x0002cff0
    db2c:	0002d09a 	.word	0x0002d09a
    db30:	0002cf37 	.word	0x0002cf37

0000db34 <sc_commit>:
{
    db34:	b510      	push	{r4, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    db36:	4c0c      	ldr	r4, [pc, #48]	; (db68 <sc_commit+0x34>)
    db38:	f06f 0102 	mvn.w	r1, #2
    db3c:	f104 0050 	add.w	r0, r4, #80	; 0x50
    db40:	f017 fec5 	bl	258ce <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db44:	f3bf 8f5b 	dmb	ish
    db48:	6d23      	ldr	r3, [r4, #80]	; 0x50
    db4a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    db4e:	07db      	lsls	r3, r3, #31
    db50:	d507      	bpl.n	db62 <sc_commit+0x2e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    db52:	4806      	ldr	r0, [pc, #24]	; (db6c <sc_commit+0x38>)
    db54:	f44f 72a4 	mov.w	r2, #328	; 0x148
    db58:	2300      	movs	r3, #0
    db5a:	f104 0120 	add.w	r1, r4, #32
    db5e:	f012 fddb 	bl	20718 <k_delayed_work_submit_to_queue>
}
    db62:	2000      	movs	r0, #0
    db64:	bd10      	pop	{r4, pc}
    db66:	bf00      	nop
    db68:	2000a818 	.word	0x2000a818
    db6c:	2000aca8 	.word	0x2000aca8

0000db70 <sc_indicate_rsp>:
{
    db70:	b538      	push	{r3, r4, r5, lr}
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    db72:	4d12      	ldr	r5, [pc, #72]	; (dbbc <sc_indicate_rsp+0x4c>)
    db74:	4604      	mov	r4, r0
    db76:	f06f 0102 	mvn.w	r1, #2
    db7a:	f105 0050 	add.w	r0, r5, #80	; 0x50
    db7e:	f017 fea6 	bl	258ce <atomic_and.isra.0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    db82:	f3bf 8f5b 	dmb	ish
    db86:	6d2b      	ldr	r3, [r5, #80]	; 0x50
    db88:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    db8c:	07da      	lsls	r2, r3, #31
    db8e:	d506      	bpl.n	db9e <sc_indicate_rsp+0x2e>
    db90:	480b      	ldr	r0, [pc, #44]	; (dbc0 <sc_indicate_rsp+0x50>)
    db92:	2200      	movs	r2, #0
    db94:	2300      	movs	r3, #0
    db96:	f105 0120 	add.w	r1, r5, #32
    db9a:	f012 fdbd 	bl	20718 <k_delayed_work_submit_to_queue>
	cfg = find_cf_cfg(conn);
    db9e:	4620      	mov	r0, r4
    dba0:	f7ff fb04 	bl	d1ac <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
    dba4:	b140      	cbz	r0, dbb8 <sc_indicate_rsp+0x48>
    dba6:	7a03      	ldrb	r3, [r0, #8]
    dba8:	07db      	lsls	r3, r3, #31
    dbaa:	d505      	bpl.n	dbb8 <sc_indicate_rsp+0x48>
}
    dbac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    dbb0:	2101      	movs	r1, #1
    dbb2:	300c      	adds	r0, #12
    dbb4:	f017 be5f 	b.w	25876 <atomic_or>
    dbb8:	bd38      	pop	{r3, r4, r5, pc}
    dbba:	bf00      	nop
    dbbc:	2000a818 	.word	0x2000a818
    dbc0:	2000aca8 	.word	0x2000aca8

0000dbc4 <bt_gatt_init>:
{
    dbc4:	b510      	push	{r4, lr}
	return __atomic_compare_exchange_n(target, &old_value, new_value,
    dbc6:	4b26      	ldr	r3, [pc, #152]	; (dc60 <bt_gatt_init+0x9c>)
    dbc8:	f3bf 8f5b 	dmb	ish
    dbcc:	2201      	movs	r2, #1
    dbce:	e853 1f00 	ldrex	r1, [r3]
    dbd2:	2900      	cmp	r1, #0
    dbd4:	d103      	bne.n	dbde <bt_gatt_init+0x1a>
    dbd6:	e843 2000 	strex	r0, r2, [r3]
    dbda:	2800      	cmp	r0, #0
    dbdc:	d1f7      	bne.n	dbce <bt_gatt_init+0xa>
    dbde:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&init, 0, 1)) {
    dbe2:	d13b      	bne.n	dc5c <bt_gatt_init+0x98>
    dbe4:	f3bf 8f5b 	dmb	ish
    dbe8:	4b1e      	ldr	r3, [pc, #120]	; (dc64 <bt_gatt_init+0xa0>)
    dbea:	e853 1f00 	ldrex	r1, [r3]
    dbee:	2900      	cmp	r1, #0
    dbf0:	d103      	bne.n	dbfa <bt_gatt_init+0x36>
    dbf2:	e843 2000 	strex	r0, r2, [r3]
    dbf6:	2800      	cmp	r0, #0
    dbf8:	d1f7      	bne.n	dbea <bt_gatt_init+0x26>
    dbfa:	f3bf 8f5b 	dmb	ish
	if (!atomic_cas(&service_init, 0, 1)) {
    dbfe:	d108      	bne.n	dc12 <bt_gatt_init+0x4e>
    dc00:	4919      	ldr	r1, [pc, #100]	; (dc68 <bt_gatt_init+0xa4>)
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dc02:	4a1a      	ldr	r2, [pc, #104]	; (dc6c <bt_gatt_init+0xa8>)
    dc04:	880b      	ldrh	r3, [r1, #0]
    dc06:	4c1a      	ldr	r4, [pc, #104]	; (dc70 <bt_gatt_init+0xac>)
	if (!atomic_cas(&service_init, 0, 1)) {
    dc08:	2000      	movs	r0, #0
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dc0a:	42a2      	cmp	r2, r4
    dc0c:	d320      	bcc.n	dc50 <bt_gatt_init+0x8c>
    dc0e:	b100      	cbz	r0, dc12 <bt_gatt_init+0x4e>
    dc10:	800b      	strh	r3, [r1, #0]
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dc12:	4c18      	ldr	r4, [pc, #96]	; (dc74 <bt_gatt_init+0xb0>)
    dc14:	2230      	movs	r2, #48	; 0x30
    dc16:	2100      	movs	r1, #0
    dc18:	4620      	mov	r0, r4
    dc1a:	f016 fc50 	bl	244be <memset>
    dc1e:	4b16      	ldr	r3, [pc, #88]	; (dc78 <bt_gatt_init+0xb4>)
    dc20:	6063      	str	r3, [r4, #4]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dc22:	4621      	mov	r1, r4
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dc24:	4c15      	ldr	r4, [pc, #84]	; (dc7c <bt_gatt_init+0xb8>)
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    dc26:	4816      	ldr	r0, [pc, #88]	; (dc80 <bt_gatt_init+0xbc>)
    dc28:	2300      	movs	r3, #0
    dc2a:	f44f 72a4 	mov.w	r2, #328	; 0x148
    dc2e:	f012 fd73 	bl	20718 <k_delayed_work_submit_to_queue>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    dc32:	2100      	movs	r1, #0
    dc34:	f104 0020 	add.w	r0, r4, #32
    dc38:	2230      	movs	r2, #48	; 0x30
    dc3a:	f016 fc40 	bl	244be <memset>
    dc3e:	4b11      	ldr	r3, [pc, #68]	; (dc84 <bt_gatt_init+0xc0>)
    dc40:	6263      	str	r3, [r4, #36]	; 0x24
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    dc42:	f104 0050 	add.w	r0, r4, #80	; 0x50
    dc46:	2102      	movs	r1, #2
}
    dc48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    dc4c:	f017 be13 	b.w	25876 <atomic_or>
		last_static_handle += svc->attr_count;
    dc50:	6850      	ldr	r0, [r2, #4]
    dc52:	4403      	add	r3, r0
    dc54:	b29b      	uxth	r3, r3
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, svc) {
    dc56:	3208      	adds	r2, #8
    dc58:	2001      	movs	r0, #1
    dc5a:	e7d6      	b.n	dc0a <bt_gatt_init+0x46>
}
    dc5c:	bd10      	pop	{r4, pc}
    dc5e:	bf00      	nop
    dc60:	2000d7b8 	.word	0x2000d7b8
    dc64:	2000d7d4 	.word	0x2000d7d4
    dc68:	2000ed5a 	.word	0x2000ed5a
    dc6c:	00027820 	.word	0x00027820
    dc70:	00027848 	.word	0x00027848
    dc74:	2000a7e8 	.word	0x2000a7e8
    dc78:	00025be5 	.word	0x00025be5
    dc7c:	2000a818 	.word	0x2000a818
    dc80:	2000aca8 	.word	0x2000aca8
    dc84:	0000e1c9 	.word	0x0000e1c9

0000dc88 <bt_gatt_attr_get_handle>:
{
    dc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!attr) {
    dc8c:	4603      	mov	r3, r0
    dc8e:	b148      	cbz	r0, dca4 <bt_gatt_attr_get_handle+0x1c>
	if (attr->handle) {
    dc90:	8a00      	ldrh	r0, [r0, #16]
    dc92:	b938      	cbnz	r0, dca4 <bt_gatt_attr_get_handle+0x1c>
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dc94:	4912      	ldr	r1, [pc, #72]	; (dce0 <bt_gatt_attr_get_handle+0x58>)
    dc96:	f8df e04c 	ldr.w	lr, [pc, #76]	; dce4 <bt_gatt_attr_get_handle+0x5c>
	uint16_t handle = 1;
    dc9a:	2401      	movs	r4, #1
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    dc9c:	f04f 0c14 	mov.w	ip, #20
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dca0:	4571      	cmp	r1, lr
    dca2:	d301      	bcc.n	dca8 <bt_gatt_attr_get_handle+0x20>
}
    dca4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    dca8:	e9d1 7600 	ldrd	r7, r6, [r1]
		if ((attr < &static_svc->attrs[0]) ||
    dcac:	42bb      	cmp	r3, r7
    dcae:	d304      	bcc.n	dcba <bt_gatt_attr_get_handle+0x32>
		    (attr > &static_svc->attrs[static_svc->attr_count - 1])) {
    dcb0:	fb0c 7206 	mla	r2, ip, r6, r7
    dcb4:	3a14      	subs	r2, #20
		if ((attr < &static_svc->attrs[0]) ||
    dcb6:	4293      	cmp	r3, r2
    dcb8:	d90e      	bls.n	dcd8 <bt_gatt_attr_get_handle+0x50>
			handle += static_svc->attr_count;
    dcba:	19a2      	adds	r2, r4, r6
    dcbc:	b292      	uxth	r2, r2
	Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dcbe:	3108      	adds	r1, #8
    dcc0:	4614      	mov	r4, r2
    dcc2:	e7ed      	b.n	dca0 <bt_gatt_attr_get_handle+0x18>
			if (attr == &static_svc->attrs[i]) {
    dcc4:	fb0c 7805 	mla	r8, ip, r5, r7
    dcc8:	4543      	cmp	r3, r8
    dcca:	d007      	beq.n	dcdc <bt_gatt_attr_get_handle+0x54>
		for (size_t i = 0; i < static_svc->attr_count; i++, handle++) {
    dccc:	3501      	adds	r5, #1
    dcce:	1962      	adds	r2, r4, r5
    dcd0:	42b5      	cmp	r5, r6
    dcd2:	b292      	uxth	r2, r2
    dcd4:	d1f6      	bne.n	dcc4 <bt_gatt_attr_get_handle+0x3c>
    dcd6:	e7f2      	b.n	dcbe <bt_gatt_attr_get_handle+0x36>
    dcd8:	2500      	movs	r5, #0
    dcda:	e7f8      	b.n	dcce <bt_gatt_attr_get_handle+0x46>
    dcdc:	4610      	mov	r0, r2
    dcde:	e7e1      	b.n	dca4 <bt_gatt_attr_get_handle+0x1c>
    dce0:	00027820 	.word	0x00027820
    dce4:	00027848 	.word	0x00027848

0000dce8 <bt_gatt_foreach_attr_type>:
{
    dce8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    dcec:	f8bd 5030 	ldrh.w	r5, [sp, #48]	; 0x30
    dcf0:	9100      	str	r1, [sp, #0]
    dcf2:	4699      	mov	r9, r3
		num_matches = UINT16_MAX;
    dcf4:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dcf8:	2d00      	cmp	r5, #0
    dcfa:	bf08      	it	eq
    dcfc:	461d      	moveq	r5, r3
	if (start_handle <= last_static_handle) {
    dcfe:	4b24      	ldr	r3, [pc, #144]	; (dd90 <bt_gatt_foreach_attr_type+0xa8>)
    dd00:	881b      	ldrh	r3, [r3, #0]
    dd02:	4283      	cmp	r3, r0
{
    dd04:	4607      	mov	r7, r0
    dd06:	4690      	mov	r8, r2
	if (start_handle <= last_static_handle) {
    dd08:	d23c      	bcs.n	dd84 <bt_gatt_foreach_attr_type+0x9c>
}
    dd0a:	b003      	add	sp, #12
    dd0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (handle + static_svc->attr_count < start_handle) {
    dd10:	6873      	ldr	r3, [r6, #4]
    dd12:	4423      	add	r3, r4
    dd14:	42bb      	cmp	r3, r7
    dd16:	d232      	bcs.n	dd7e <bt_gatt_foreach_attr_type+0x96>
				handle += static_svc->attr_count;
    dd18:	b29c      	uxth	r4, r3
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dd1a:	3608      	adds	r6, #8
    dd1c:	4b1d      	ldr	r3, [pc, #116]	; (dd94 <bt_gatt_foreach_attr_type+0xac>)
    dd1e:	429e      	cmp	r6, r3
    dd20:	d3f6      	bcc.n	dd10 <bt_gatt_foreach_attr_type+0x28>
    dd22:	e7f2      	b.n	dd0a <bt_gatt_foreach_attr_type+0x22>
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dd24:	5889      	ldr	r1, [r1, r2]
    dd26:	9301      	str	r3, [sp, #4]
    dd28:	4640      	mov	r0, r8
    dd2a:	f016 fcbd 	bl	246a8 <bt_uuid_cmp>
    dd2e:	9b01      	ldr	r3, [sp, #4]
    dd30:	b190      	cbz	r0, dd58 <bt_gatt_foreach_attr_type+0x70>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dd32:	3401      	adds	r4, #1
    dd34:	f10a 0a01 	add.w	sl, sl, #1
    dd38:	b2a4      	uxth	r4, r4
    dd3a:	6873      	ldr	r3, [r6, #4]
    dd3c:	4553      	cmp	r3, sl
    dd3e:	d9ec      	bls.n	dd1a <bt_gatt_foreach_attr_type+0x32>
	if (handle > end_handle) {
    dd40:	9b00      	ldr	r3, [sp, #0]
    dd42:	429c      	cmp	r4, r3
    dd44:	d8e1      	bhi.n	dd0a <bt_gatt_foreach_attr_type+0x22>
	if (handle < start_handle) {
    dd46:	42bc      	cmp	r4, r7
    dd48:	d3f3      	bcc.n	dd32 <bt_gatt_foreach_attr_type+0x4a>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dd4a:	6831      	ldr	r1, [r6, #0]
    dd4c:	fb0b f20a 	mul.w	r2, fp, sl
    dd50:	188b      	adds	r3, r1, r2
	if (uuid && bt_uuid_cmp(uuid, attr->uuid)) {
    dd52:	f1b8 0f00 	cmp.w	r8, #0
    dd56:	d1e5      	bne.n	dd24 <bt_gatt_foreach_attr_type+0x3c>
	if (attr_data && attr_data != attr->user_data) {
    dd58:	f1b9 0f00 	cmp.w	r9, #0
    dd5c:	d10b      	bne.n	dd76 <bt_gatt_foreach_attr_type+0x8e>
	*num_matches -= 1;
    dd5e:	3d01      	subs	r5, #1
    dd60:	b2ad      	uxth	r5, r5
	result = func(attr, handle, user_data);
    dd62:	4618      	mov	r0, r3
    dd64:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    dd66:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    dd68:	4621      	mov	r1, r4
    dd6a:	4798      	blx	r3
	if (!*num_matches) {
    dd6c:	2d00      	cmp	r5, #0
    dd6e:	d0cc      	beq.n	dd0a <bt_gatt_foreach_attr_type+0x22>
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dd70:	2800      	cmp	r0, #0
    dd72:	d1de      	bne.n	dd32 <bt_gatt_foreach_attr_type+0x4a>
    dd74:	e7c9      	b.n	dd0a <bt_gatt_foreach_attr_type+0x22>
	if (attr_data && attr_data != attr->user_data) {
    dd76:	68da      	ldr	r2, [r3, #12]
    dd78:	4591      	cmp	r9, r2
    dd7a:	d1da      	bne.n	dd32 <bt_gatt_foreach_attr_type+0x4a>
    dd7c:	e7ef      	b.n	dd5e <bt_gatt_foreach_attr_type+0x76>
			for (i = 0; i < static_svc->attr_count; i++, handle++) {
    dd7e:	f04f 0a00 	mov.w	sl, #0
    dd82:	e7da      	b.n	dd3a <bt_gatt_foreach_attr_type+0x52>
		Z_STRUCT_SECTION_FOREACH(bt_gatt_service_static, static_svc) {
    dd84:	4e04      	ldr	r6, [pc, #16]	; (dd98 <bt_gatt_foreach_attr_type+0xb0>)
		uint16_t handle = 1;
    dd86:	2401      	movs	r4, #1
				if (gatt_foreach_iter(&static_svc->attrs[i],
    dd88:	f04f 0b14 	mov.w	fp, #20
    dd8c:	e7c6      	b.n	dd1c <bt_gatt_foreach_attr_type+0x34>
    dd8e:	bf00      	nop
    dd90:	2000ed5a 	.word	0x2000ed5a
    dd94:	00027848 	.word	0x00027848
    dd98:	00027820 	.word	0x00027820

0000dd9c <db_hash_gen>:
{
    dd9c:	b530      	push	{r4, r5, lr}
    dd9e:	b0c9      	sub	sp, #292	; 0x124
	uint8_t key[16] = {};
    dda0:	2300      	movs	r3, #0
{
    dda2:	4604      	mov	r4, r0
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    dda4:	aa1c      	add	r2, sp, #112	; 0x70
    dda6:	4669      	mov	r1, sp
    dda8:	a804      	add	r0, sp, #16
	uint8_t key[16] = {};
    ddaa:	e9cd 3300 	strd	r3, r3, [sp]
    ddae:	e9cd 3302 	strd	r3, r3, [sp, #8]
	if (tc_cmac_setup(&state.state, key, &sched) == TC_CRYPTO_FAIL) {
    ddb2:	f016 f9b1 	bl	24118 <tc_cmac_setup>
    ddb6:	b958      	cbnz	r0, ddd0 <db_hash_gen+0x34>
    ddb8:	4918      	ldr	r1, [pc, #96]	; (de1c <db_hash_gen+0x80>)
    ddba:	4b19      	ldr	r3, [pc, #100]	; (de20 <db_hash_gen+0x84>)
		BT_ERR("Unable to setup AES CMAC");
    ddbc:	4819      	ldr	r0, [pc, #100]	; (de24 <db_hash_gen+0x88>)
    ddbe:	1ac9      	subs	r1, r1, r3
    ddc0:	08c9      	lsrs	r1, r1, #3
    ddc2:	0189      	lsls	r1, r1, #6
    ddc4:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Unable to calculate hash");
    ddc8:	f014 fb42 	bl	22450 <log_0>
}
    ddcc:	b049      	add	sp, #292	; 0x124
    ddce:	bd30      	pop	{r4, r5, pc}
	bt_gatt_foreach_attr(0x0001, 0xffff, gen_hash_m, &state);
    ddd0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    ddd4:	2001      	movs	r0, #1
    ddd6:	4a14      	ldr	r2, [pc, #80]	; (de28 <db_hash_gen+0x8c>)
    ddd8:	ab04      	add	r3, sp, #16
    ddda:	f017 fef8 	bl	25bce <bt_gatt_foreach_attr>
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ddde:	4813      	ldr	r0, [pc, #76]	; (de2c <db_hash_gen+0x90>)
    dde0:	a904      	add	r1, sp, #16
    dde2:	f016 fa2f 	bl	24244 <tc_cmac_final>
    dde6:	b940      	cbnz	r0, ddfa <db_hash_gen+0x5e>
    dde8:	490c      	ldr	r1, [pc, #48]	; (de1c <db_hash_gen+0x80>)
    ddea:	4b0d      	ldr	r3, [pc, #52]	; (de20 <db_hash_gen+0x84>)
		BT_ERR("Unable to calculate hash");
    ddec:	4810      	ldr	r0, [pc, #64]	; (de30 <db_hash_gen+0x94>)
    ddee:	1ac9      	subs	r1, r1, r3
    ddf0:	08c9      	lsrs	r1, r1, #3
    ddf2:	0189      	lsls	r1, r1, #6
    ddf4:	f041 0101 	orr.w	r1, r1, #1
    ddf8:	e7e6      	b.n	ddc8 <db_hash_gen+0x2c>
    ddfa:	4b0c      	ldr	r3, [pc, #48]	; (de2c <db_hash_gen+0x90>)
	if (tc_cmac_final(db_hash, &state.state) == TC_CRYPTO_FAIL) {
    ddfc:	2208      	movs	r2, #8
    ddfe:	f103 0110 	add.w	r1, r3, #16
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
		uint8_t tmp = ((uint8_t *)buf)[i];
    de02:	7818      	ldrb	r0, [r3, #0]

		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
    de04:	f811 5d01 	ldrb.w	r5, [r1, #-1]!
    de08:	f803 5b01 	strb.w	r5, [r3], #1
	for (i = 0; i < (length/2); i++) {
    de0c:	3a01      	subs	r2, #1
		((uint8_t *)buf)[length - 1 - i] = tmp;
    de0e:	7008      	strb	r0, [r1, #0]
	for (i = 0; i < (length/2); i++) {
    de10:	d1f7      	bne.n	de02 <db_hash_gen+0x66>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) && store) {
    de12:	2c00      	cmp	r4, #0
    de14:	d0da      	beq.n	ddcc <db_hash_gen+0x30>
		db_hash_store();
    de16:	f7ff f989 	bl	d12c <db_hash_store>
    de1a:	e7d7      	b.n	ddcc <db_hash_gen+0x30>
    de1c:	00027970 	.word	0x00027970
    de20:	000278c0 	.word	0x000278c0
    de24:	0002d0bc 	.word	0x0002d0bc
    de28:	000257cb 	.word	0x000257cb
    de2c:	2000f2f4 	.word	0x2000f2f4
    de30:	0002d0d5 	.word	0x0002d0d5

0000de34 <db_hash_commit>:
{
    de34:	b510      	push	{r4, lr}
	err = k_delayed_work_cancel(&db_hash_work);
    de36:	4820      	ldr	r0, [pc, #128]	; (deb8 <db_hash_commit+0x84>)
    de38:	f019 f9c5 	bl	271c6 <k_delayed_work_cancel>
	if (!err) {
    de3c:	b908      	cbnz	r0, de42 <db_hash_commit+0xe>
		db_hash_gen(false);
    de3e:	f7ff ffad 	bl	dd9c <db_hash_gen>
	if (!memcmp(stored_hash, db_hash, sizeof(stored_hash))) {
    de42:	491e      	ldr	r1, [pc, #120]	; (debc <db_hash_commit+0x88>)
    de44:	481e      	ldr	r0, [pc, #120]	; (dec0 <db_hash_commit+0x8c>)
    de46:	2210      	movs	r2, #16
    de48:	f016 fafd 	bl	24446 <memcmp>
    de4c:	b948      	cbnz	r0, de62 <db_hash_commit+0x2e>
		k_delayed_work_cancel(&gatt_sc.work);
    de4e:	481d      	ldr	r0, [pc, #116]	; (dec4 <db_hash_commit+0x90>)
    de50:	f019 f9b9 	bl	271c6 <k_delayed_work_cancel>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    de54:	481c      	ldr	r0, [pc, #112]	; (dec8 <db_hash_commit+0x94>)
    de56:	f06f 0101 	mvn.w	r1, #1
    de5a:	f017 fd38 	bl	258ce <atomic_and.isra.0>
}
    de5e:	2000      	movs	r0, #0
    de60:	bd10      	pop	{r4, pc}
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
    de62:	4c1a      	ldr	r4, [pc, #104]	; (decc <db_hash_commit+0x98>)
    de64:	2101      	movs	r1, #1
    de66:	f104 0050 	add.w	r0, r4, #80	; 0x50
    de6a:	f017 fd04 	bl	25876 <atomic_or>
	if (!atomic_test_and_set_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    de6e:	07c2      	lsls	r2, r0, #31
    de70:	d412      	bmi.n	de98 <db_hash_commit+0x64>
		gatt_sc.start = start;
    de72:	4b17      	ldr	r3, [pc, #92]	; (ded0 <db_hash_commit+0x9c>)
    de74:	61a3      	str	r3, [r4, #24]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    de76:	f3bf 8f5b 	dmb	ish
    de7a:	6d23      	ldr	r3, [r4, #80]	; 0x50
    de7c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_INDICATE_PENDING)) {
    de80:	079b      	lsls	r3, r3, #30
    de82:	d406      	bmi.n	de92 <db_hash_commit+0x5e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    de84:	490f      	ldr	r1, [pc, #60]	; (dec4 <db_hash_commit+0x90>)
    de86:	4813      	ldr	r0, [pc, #76]	; (ded4 <db_hash_commit+0xa0>)
    de88:	f44f 72a4 	mov.w	r2, #328	; 0x148
    de8c:	2300      	movs	r3, #0
    de8e:	f012 fc43 	bl	20718 <k_delayed_work_submit_to_queue>
	db_hash_store();
    de92:	f7ff f94b 	bl	d12c <db_hash_store>
	return 0;
    de96:	e7e2      	b.n	de5e <db_hash_commit+0x2a>
	if (new_start >= *start && new_end <= *end) {
    de98:	8b23      	ldrh	r3, [r4, #24]
    de9a:	8b62      	ldrh	r2, [r4, #26]
    de9c:	2b01      	cmp	r3, #1
    de9e:	f64f 73ff 	movw	r3, #65535	; 0xffff
    dea2:	d805      	bhi.n	deb0 <db_hash_commit+0x7c>
    dea4:	429a      	cmp	r2, r3
    dea6:	d0f4      	beq.n	de92 <db_hash_commit+0x5e>
		*end = new_end;
    dea8:	f64f 73ff 	movw	r3, #65535	; 0xffff
    deac:	8363      	strh	r3, [r4, #26]
    deae:	e7e2      	b.n	de76 <db_hash_commit+0x42>
	if (*end < new_end) {
    deb0:	429a      	cmp	r2, r3
		*start = new_start;
    deb2:	8321      	strh	r1, [r4, #24]
	if (*end < new_end) {
    deb4:	d0df      	beq.n	de76 <db_hash_commit+0x42>
    deb6:	e7f7      	b.n	dea8 <db_hash_commit+0x74>
    deb8:	2000a7e8 	.word	0x2000a7e8
    debc:	2000f2f4 	.word	0x2000f2f4
    dec0:	2000f304 	.word	0x2000f304
    dec4:	2000a838 	.word	0x2000a838
    dec8:	2000a868 	.word	0x2000a868
    decc:	2000a818 	.word	0x2000a818
    ded0:	ffff0001 	.word	0xffff0001
    ded4:	2000aca8 	.word	0x2000aca8

0000ded8 <ccc_set_direct>:
{
    ded8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    dedc:	b0b9      	sub	sp, #228	; 0xe4
    dede:	4688      	mov	r8, r1
    dee0:	4614      	mov	r4, r2
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    dee2:	4939      	ldr	r1, [pc, #228]	; (dfc8 <ccc_set_direct+0xf0>)
    dee4:	9840      	ldr	r0, [sp, #256]	; 0x100
    dee6:	466a      	mov	r2, sp
{
    dee8:	461f      	mov	r7, r3
		if (!settings_name_steq((const char *)param, "bt/ccc", &name)) {
    deea:	f014 ff43 	bl	22d74 <settings_name_steq>
    deee:	b978      	cbnz	r0, df10 <ccc_set_direct+0x38>
    def0:	4b36      	ldr	r3, [pc, #216]	; (dfcc <ccc_set_direct+0xf4>)
    def2:	4937      	ldr	r1, [pc, #220]	; (dfd0 <ccc_set_direct+0xf8>)
			BT_ERR("Invalid key");
    def4:	4837      	ldr	r0, [pc, #220]	; (dfd4 <ccc_set_direct+0xfc>)
    def6:	1ac9      	subs	r1, r1, r3
    def8:	08c9      	lsrs	r1, r1, #3
    defa:	0189      	lsls	r1, r1, #6
    defc:	f041 0101 	orr.w	r1, r1, #1
    df00:	f014 faa6 	bl	22450 <log_0>
			return -EINVAL;
    df04:	f06f 0515 	mvn.w	r5, #21
}
    df08:	4628      	mov	r0, r5
    df0a:	b039      	add	sp, #228	; 0xe4
    df0c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return ccc_set(name, len, read_cb, cb_arg);
    df10:	9e00      	ldr	r6, [sp, #0]
		settings_name_next(name, &next);
    df12:	a901      	add	r1, sp, #4
    df14:	4630      	mov	r0, r6
    df16:	f014 ff50 	bl	22dba <settings_name_next>
		if (!name) {
    df1a:	b96e      	cbnz	r6, df38 <ccc_set_direct+0x60>
    df1c:	492c      	ldr	r1, [pc, #176]	; (dfd0 <ccc_set_direct+0xf8>)
    df1e:	4b2b      	ldr	r3, [pc, #172]	; (dfcc <ccc_set_direct+0xf4>)
			BT_ERR("Insufficient number of arguments");
    df20:	482d      	ldr	r0, [pc, #180]	; (dfd8 <ccc_set_direct+0x100>)
    df22:	1ac9      	subs	r1, r1, r3
    df24:	08c9      	lsrs	r1, r1, #3
    df26:	0189      	lsls	r1, r1, #6
    df28:	f041 0101 	orr.w	r1, r1, #1
    df2c:	f014 fa90 	bl	22450 <log_0>
			return -EINVAL;
    df30:	f06f 0415 	mvn.w	r4, #21
			return -EINVAL;
    df34:	4625      	mov	r5, r4
    df36:	e7e7      	b.n	df08 <ccc_set_direct+0x30>
		} else if (!next) {
    df38:	9801      	ldr	r0, [sp, #4]
    df3a:	b9c8      	cbnz	r0, df70 <ccc_set_direct+0x98>
		err = bt_settings_decode_key(name, &addr);
    df3c:	f10d 0908 	add.w	r9, sp, #8
			load.addr_with_id.id = strtol(next, NULL, 10);
    df40:	f88d 0014 	strb.w	r0, [sp, #20]
		err = bt_settings_decode_key(name, &addr);
    df44:	4649      	mov	r1, r9
    df46:	4630      	mov	r0, r6
    df48:	f016 fb8a 	bl	24660 <bt_settings_decode_key>
		if (err) {
    df4c:	4605      	mov	r5, r0
    df4e:	b1a0      	cbz	r0, df7a <ccc_set_direct+0xa2>
    df50:	4a1e      	ldr	r2, [pc, #120]	; (dfcc <ccc_set_direct+0xf4>)
    df52:	4c1f      	ldr	r4, [pc, #124]	; (dfd0 <ccc_set_direct+0xf8>)
			BT_ERR("Unable to decode address %s", log_strdup(name));
    df54:	4630      	mov	r0, r6
    df56:	1aa4      	subs	r4, r4, r2
    df58:	08e4      	lsrs	r4, r4, #3
    df5a:	f7f7 fb83 	bl	5664 <log_strdup>
    df5e:	01a4      	lsls	r4, r4, #6
    df60:	f044 0401 	orr.w	r4, r4, #1
    df64:	4601      	mov	r1, r0
    df66:	4622      	mov	r2, r4
    df68:	481c      	ldr	r0, [pc, #112]	; (dfdc <ccc_set_direct+0x104>)
    df6a:	f014 fa7e 	bl	2246a <log_1>
    df6e:	e7df      	b.n	df30 <ccc_set_direct+0x58>
			load.addr_with_id.id = strtol(next, NULL, 10);
    df70:	220a      	movs	r2, #10
    df72:	2100      	movs	r1, #0
    df74:	f016 f9aa 	bl	242cc <strtol>
    df78:	e7e0      	b.n	df3c <ccc_set_direct+0x64>
		load.addr_with_id.addr = &addr;
    df7a:	f8cd 9010 	str.w	r9, [sp, #16]
		if (len_rd) {
    df7e:	f1b8 0f00 	cmp.w	r8, #0
    df82:	d01d      	beq.n	dfc0 <ccc_set_direct+0xe8>
			len = read_cb(cb_arg, ccc_store, sizeof(ccc_store));
    df84:	ae08      	add	r6, sp, #32
    df86:	22c0      	movs	r2, #192	; 0xc0
    df88:	4631      	mov	r1, r6
    df8a:	4638      	mov	r0, r7
    df8c:	47a0      	blx	r4
			if (len < 0) {
    df8e:	1e04      	subs	r4, r0, #0
    df90:	da0b      	bge.n	dfaa <ccc_set_direct+0xd2>
    df92:	4b0e      	ldr	r3, [pc, #56]	; (dfcc <ccc_set_direct+0xf4>)
    df94:	4a0e      	ldr	r2, [pc, #56]	; (dfd0 <ccc_set_direct+0xf8>)
				BT_ERR("Failed to decode value (err %zd)", len);
    df96:	4812      	ldr	r0, [pc, #72]	; (dfe0 <ccc_set_direct+0x108>)
    df98:	1ad2      	subs	r2, r2, r3
    df9a:	08d2      	lsrs	r2, r2, #3
    df9c:	0192      	lsls	r2, r2, #6
    df9e:	f042 0201 	orr.w	r2, r2, #1
    dfa2:	4621      	mov	r1, r4
    dfa4:	f014 fa61 	bl	2246a <log_1>
				return len;
    dfa8:	e7c4      	b.n	df34 <ccc_set_direct+0x5c>
			load.count = len / sizeof(*ccc_store);
    dfaa:	08a4      	lsrs	r4, r4, #2
			load.entry = ccc_store;
    dfac:	9606      	str	r6, [sp, #24]
			load.count = len / sizeof(*ccc_store);
    dfae:	9407      	str	r4, [sp, #28]
		bt_gatt_foreach_attr(0x0001, 0xffff, ccc_load, &load);
    dfb0:	4a0c      	ldr	r2, [pc, #48]	; (dfe4 <ccc_set_direct+0x10c>)
    dfb2:	ab04      	add	r3, sp, #16
    dfb4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    dfb8:	2001      	movs	r0, #1
    dfba:	f017 fe08 	bl	25bce <bt_gatt_foreach_attr>
	return 0;
    dfbe:	e7a3      	b.n	df08 <ccc_set_direct+0x30>
			load.count = 0;
    dfc0:	e9cd 0006 	strd	r0, r0, [sp, #24]
    dfc4:	e7f4      	b.n	dfb0 <ccc_set_direct+0xd8>
    dfc6:	bf00      	nop
    dfc8:	0002d0ee 	.word	0x0002d0ee
    dfcc:	000278c0 	.word	0x000278c0
    dfd0:	00027970 	.word	0x00027970
    dfd4:	0002d0f5 	.word	0x0002d0f5
    dfd8:	0002bdf2 	.word	0x0002bdf2
    dfdc:	0002cff0 	.word	0x0002cff0
    dfe0:	0002cf37 	.word	0x0002cf37
    dfe4:	0000d5dd 	.word	0x0000d5dd

0000dfe8 <bt_gatt_notify_cb>:
{
    dfe8:	b530      	push	{r4, r5, lr}
    dfea:	4b37      	ldr	r3, [pc, #220]	; (e0c8 <bt_gatt_notify_cb+0xe0>)
    dfec:	f3bf 8f5b 	dmb	ish
    dff0:	681b      	ldr	r3, [r3, #0]
    dff2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dff6:	079a      	lsls	r2, r3, #30
{
    dff8:	b08b      	sub	sp, #44	; 0x2c
    dffa:	4604      	mov	r4, r0
    dffc:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    dffe:	d55d      	bpl.n	e0bc <bt_gatt_notify_cb+0xd4>
	data.attr = params->attr;
    e000:	6848      	ldr	r0, [r1, #4]
    e002:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    e004:	b114      	cbz	r4, e00c <bt_gatt_notify_cb+0x24>
    e006:	7b63      	ldrb	r3, [r4, #13]
    e008:	2b07      	cmp	r3, #7
    e00a:	d15a      	bne.n	e0c2 <bt_gatt_notify_cb+0xda>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    e00c:	f7ff fe3c 	bl	dc88 <bt_gatt_attr_get_handle>
    e010:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    e014:	b918      	cbnz	r0, e01e <bt_gatt_notify_cb+0x36>
		return -ENOENT;
    e016:	f06f 0001 	mvn.w	r0, #1
}
    e01a:	b00b      	add	sp, #44	; 0x2c
    e01c:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    e01e:	682a      	ldr	r2, [r5, #0]
    e020:	b9aa      	cbnz	r2, e04e <bt_gatt_notify_cb+0x66>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    e022:	9b05      	ldr	r3, [sp, #20]
    e024:	6818      	ldr	r0, [r3, #0]
    e026:	2300      	movs	r3, #0
    e028:	f88d 3010 	strb.w	r3, [sp, #16]
    e02c:	a904      	add	r1, sp, #16
    e02e:	f642 0303 	movw	r3, #10243	; 0x2803
    e032:	f8ad 3012 	strh.w	r3, [sp, #18]
    e036:	f016 fb37 	bl	246a8 <bt_uuid_cmp>
    e03a:	b1c0      	cbz	r0, e06e <bt_gatt_notify_cb+0x86>
		return gatt_notify(conn, data.handle, params);
    e03c:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    e040:	b314      	cbz	r4, e088 <bt_gatt_notify_cb+0xa0>
		return gatt_notify(conn, data.handle, params);
    e042:	4601      	mov	r1, r0
    e044:	462a      	mov	r2, r5
    e046:	4620      	mov	r0, r4
    e048:	f7ff f9be 	bl	d3c8 <gatt_notify>
    e04c:	e7e5      	b.n	e01a <bt_gatt_notify_cb+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e04e:	a905      	add	r1, sp, #20
    e050:	9102      	str	r1, [sp, #8]
    e052:	491e      	ldr	r1, [pc, #120]	; (e0cc <bt_gatt_notify_cb+0xe4>)
    e054:	9101      	str	r1, [sp, #4]
    e056:	2101      	movs	r1, #1
	found->attr = NULL;
    e058:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e05a:	9100      	str	r1, [sp, #0]
    e05c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    e060:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e062:	f7ff fe41 	bl	dce8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    e066:	9b05      	ldr	r3, [sp, #20]
    e068:	2b00      	cmp	r3, #0
    e06a:	d1da      	bne.n	e022 <bt_gatt_notify_cb+0x3a>
    e06c:	e7d3      	b.n	e016 <bt_gatt_notify_cb+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    e06e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_NOTIFY)) {
    e070:	68c3      	ldr	r3, [r0, #12]
    e072:	799b      	ldrb	r3, [r3, #6]
    e074:	06db      	lsls	r3, r3, #27
    e076:	d402      	bmi.n	e07e <bt_gatt_notify_cb+0x96>
			return -EINVAL;
    e078:	f06f 0015 	mvn.w	r0, #21
    e07c:	e7cd      	b.n	e01a <bt_gatt_notify_cb+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    e07e:	f017 fd58 	bl	25b32 <bt_gatt_attr_value_handle>
    e082:	f8ad 0018 	strh.w	r0, [sp, #24]
    e086:	e7d9      	b.n	e03c <bt_gatt_notify_cb+0x54>
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e088:	f642 1202 	movw	r2, #10498	; 0x2902
    e08c:	f8ad 2012 	strh.w	r2, [sp, #18]
    e090:	aa05      	add	r2, sp, #20
	data.err = -ENOTCONN;
    e092:	f06f 0338 	mvn.w	r3, #56	; 0x38
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e096:	9202      	str	r2, [sp, #8]
    e098:	4a0d      	ldr	r2, [pc, #52]	; (e0d0 <bt_gatt_notify_cb+0xe8>)
	data.err = -ENOTCONN;
    e09a:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_NOTIFY;
    e09c:	2301      	movs	r3, #1
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e09e:	e9cd 3200 	strd	r3, r2, [sp]
	data.type = BT_GATT_CCC_NOTIFY;
    e0a2:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e0a6:	aa04      	add	r2, sp, #16
    e0a8:	4623      	mov	r3, r4
    e0aa:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.nfy_params = params;
    e0ae:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e0b0:	f88d 4010 	strb.w	r4, [sp, #16]
    e0b4:	f7ff fe18 	bl	dce8 <bt_gatt_foreach_attr_type>
	return data.err;
    e0b8:	9807      	ldr	r0, [sp, #28]
    e0ba:	e7ae      	b.n	e01a <bt_gatt_notify_cb+0x32>
		return -EAGAIN;
    e0bc:	f06f 000a 	mvn.w	r0, #10
    e0c0:	e7ab      	b.n	e01a <bt_gatt_notify_cb+0x32>
		return -ENOTCONN;
    e0c2:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e0c6:	e7a8      	b.n	e01a <bt_gatt_notify_cb+0x32>
    e0c8:	2000009c 	.word	0x2000009c
    e0cc:	0002575d 	.word	0x0002575d
    e0d0:	0000d7f9 	.word	0x0000d7f9

0000e0d4 <bt_gatt_indicate>:
{
    e0d4:	b530      	push	{r4, r5, lr}
    e0d6:	4b39      	ldr	r3, [pc, #228]	; (e1bc <bt_gatt_indicate+0xe8>)
    e0d8:	f3bf 8f5b 	dmb	ish
    e0dc:	681b      	ldr	r3, [r3, #0]
    e0de:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e0e2:	079a      	lsls	r2, r3, #30
{
    e0e4:	b08b      	sub	sp, #44	; 0x2c
    e0e6:	4604      	mov	r4, r0
    e0e8:	460d      	mov	r5, r1
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_READY)) {
    e0ea:	d561      	bpl.n	e1b0 <bt_gatt_indicate+0xdc>
	data.attr = params->attr;
    e0ec:	6848      	ldr	r0, [r1, #4]
    e0ee:	9005      	str	r0, [sp, #20]
	if (conn && conn->state != BT_CONN_CONNECTED) {
    e0f0:	b114      	cbz	r4, e0f8 <bt_gatt_indicate+0x24>
    e0f2:	7b63      	ldrb	r3, [r4, #13]
    e0f4:	2b07      	cmp	r3, #7
    e0f6:	d15e      	bne.n	e1b6 <bt_gatt_indicate+0xe2>
	data.handle = bt_gatt_attr_get_handle(data.attr);
    e0f8:	f7ff fdc6 	bl	dc88 <bt_gatt_attr_get_handle>
    e0fc:	f8ad 0018 	strh.w	r0, [sp, #24]
	if (!data.handle) {
    e100:	b918      	cbnz	r0, e10a <bt_gatt_indicate+0x36>
		return -ENOENT;
    e102:	f06f 0001 	mvn.w	r0, #1
}
    e106:	b00b      	add	sp, #44	; 0x2c
    e108:	bd30      	pop	{r4, r5, pc}
	if (params->uuid) {
    e10a:	682a      	ldr	r2, [r5, #0]
    e10c:	b9ba      	cbnz	r2, e13e <bt_gatt_indicate+0x6a>
	if (!bt_uuid_cmp(data.attr->uuid, BT_UUID_GATT_CHRC)) {
    e10e:	9b05      	ldr	r3, [sp, #20]
    e110:	6818      	ldr	r0, [r3, #0]
    e112:	2300      	movs	r3, #0
    e114:	f88d 3010 	strb.w	r3, [sp, #16]
    e118:	a904      	add	r1, sp, #16
    e11a:	f642 0303 	movw	r3, #10243	; 0x2803
    e11e:	f8ad 3012 	strh.w	r3, [sp, #18]
    e122:	f016 fac1 	bl	246a8 <bt_uuid_cmp>
    e126:	b1d0      	cbz	r0, e15e <bt_gatt_indicate+0x8a>
		return gatt_indicate(conn, data.handle, params);
    e128:	f8bd 0018 	ldrh.w	r0, [sp, #24]
	if (conn) {
    e12c:	b324      	cbz	r4, e178 <bt_gatt_indicate+0xa4>
		params->_ref = 1;
    e12e:	2301      	movs	r3, #1
		return gatt_indicate(conn, data.handle, params);
    e130:	4601      	mov	r1, r0
		params->_ref = 1;
    e132:	75ab      	strb	r3, [r5, #22]
		return gatt_indicate(conn, data.handle, params);
    e134:	462a      	mov	r2, r5
    e136:	4620      	mov	r0, r4
    e138:	f7ff f8f0 	bl	d31c <gatt_indicate>
    e13c:	e7e3      	b.n	e106 <bt_gatt_indicate+0x32>
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e13e:	a905      	add	r1, sp, #20
    e140:	9102      	str	r1, [sp, #8]
    e142:	491f      	ldr	r1, [pc, #124]	; (e1c0 <bt_gatt_indicate+0xec>)
    e144:	9101      	str	r1, [sp, #4]
    e146:	2101      	movs	r1, #1
	found->attr = NULL;
    e148:	2300      	movs	r3, #0
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e14a:	9100      	str	r1, [sp, #0]
    e14c:	f64f 71ff 	movw	r1, #65535	; 0xffff
	found->attr = NULL;
    e150:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr_type(found->handle, 0xffff, uuid, NULL, 1,
    e152:	f7ff fdc9 	bl	dce8 <bt_gatt_foreach_attr_type>
		if (!gatt_find_by_uuid(&data, params->uuid)) {
    e156:	9b05      	ldr	r3, [sp, #20]
    e158:	2b00      	cmp	r3, #0
    e15a:	d1d8      	bne.n	e10e <bt_gatt_indicate+0x3a>
    e15c:	e7d1      	b.n	e102 <bt_gatt_indicate+0x2e>
		struct bt_gatt_chrc *chrc = data.attr->user_data;
    e15e:	9805      	ldr	r0, [sp, #20]
		if (!(chrc->properties & BT_GATT_CHRC_INDICATE)) {
    e160:	68c3      	ldr	r3, [r0, #12]
    e162:	799b      	ldrb	r3, [r3, #6]
    e164:	069b      	lsls	r3, r3, #26
    e166:	d402      	bmi.n	e16e <bt_gatt_indicate+0x9a>
			return -EINVAL;
    e168:	f06f 0015 	mvn.w	r0, #21
    e16c:	e7cb      	b.n	e106 <bt_gatt_indicate+0x32>
		data.handle = bt_gatt_attr_value_handle(data.attr);
    e16e:	f017 fce0 	bl	25b32 <bt_gatt_attr_value_handle>
    e172:	f8ad 0018 	strh.w	r0, [sp, #24]
    e176:	e7d7      	b.n	e128 <bt_gatt_indicate+0x54>
	data.err = -ENOTCONN;
    e178:	f06f 0338 	mvn.w	r3, #56	; 0x38
    e17c:	9307      	str	r3, [sp, #28]
	data.type = BT_GATT_CCC_INDICATE;
    e17e:	2302      	movs	r3, #2
    e180:	f8ad 3020 	strh.w	r3, [sp, #32]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e184:	f642 1302 	movw	r3, #10498	; 0x2902
    e188:	f8ad 3012 	strh.w	r3, [sp, #18]
    e18c:	ab05      	add	r3, sp, #20
    e18e:	9302      	str	r3, [sp, #8]
    e190:	4b0c      	ldr	r3, [pc, #48]	; (e1c4 <bt_gatt_indicate+0xf0>)
    e192:	9301      	str	r3, [sp, #4]
    e194:	2301      	movs	r3, #1
    e196:	9300      	str	r3, [sp, #0]
	params->_ref = 0;
    e198:	75ac      	strb	r4, [r5, #22]
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e19a:	4623      	mov	r3, r4
    e19c:	aa04      	add	r2, sp, #16
    e19e:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.ind_params = params;
    e1a2:	9509      	str	r5, [sp, #36]	; 0x24
	bt_gatt_foreach_attr_type(data.handle, 0xffff, BT_UUID_GATT_CCC, NULL,
    e1a4:	f88d 4010 	strb.w	r4, [sp, #16]
    e1a8:	f7ff fd9e 	bl	dce8 <bt_gatt_foreach_attr_type>
	return data.err;
    e1ac:	9807      	ldr	r0, [sp, #28]
    e1ae:	e7aa      	b.n	e106 <bt_gatt_indicate+0x32>
		return -EAGAIN;
    e1b0:	f06f 000a 	mvn.w	r0, #10
    e1b4:	e7a7      	b.n	e106 <bt_gatt_indicate+0x32>
		return -ENOTCONN;
    e1b6:	f06f 0038 	mvn.w	r0, #56	; 0x38
    e1ba:	e7a4      	b.n	e106 <bt_gatt_indicate+0x32>
    e1bc:	2000009c 	.word	0x2000009c
    e1c0:	0002575d 	.word	0x0002575d
    e1c4:	0000d7f9 	.word	0x0000d7f9

0000e1c8 <sc_process>:
{
    e1c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
	sc_range[0] = sys_cpu_to_le16(sc->start);
    e1ca:	f830 3c08 	ldrh.w	r3, [r0, #-8]
    e1ce:	f8ad 3004 	strh.w	r3, [sp, #4]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e1d2:	f100 0530 	add.w	r5, r0, #48	; 0x30
{
    e1d6:	4604      	mov	r4, r0
	sc_range[1] = sys_cpu_to_le16(sc->end);
    e1d8:	f830 3c06 	ldrh.w	r3, [r0, #-6]
    e1dc:	f8ad 3006 	strh.w	r3, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    e1e0:	f1a0 0620 	sub.w	r6, r0, #32
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e1e4:	f06f 0101 	mvn.w	r1, #1
    e1e8:	4628      	mov	r0, r5
    e1ea:	f017 fb70 	bl	258ce <atomic_and.isra.0>
	sc->params.attr = &_1_gatt_svc.attrs[2];
    e1ee:	4b0d      	ldr	r3, [pc, #52]	; (e224 <sc_process+0x5c>)
    e1f0:	f844 3c1c 	str.w	r3, [r4, #-28]
	sc->params.func = sc_indicate_rsp;
    e1f4:	4b0c      	ldr	r3, [pc, #48]	; (e228 <sc_process+0x60>)
    e1f6:	f844 3c18 	str.w	r3, [r4, #-24]
	sc->params.data = &sc_range[0];
    e1fa:	ab01      	add	r3, sp, #4
	sc->start = 0U;
    e1fc:	2000      	movs	r0, #0
	sc->params.data = &sc_range[0];
    e1fe:	f844 3c10 	str.w	r3, [r4, #-16]
	sc->params.len = sizeof(sc_range);
    e202:	2304      	movs	r3, #4
	sc->start = 0U;
    e204:	f824 0c08 	strh.w	r0, [r4, #-8]
	sc->end = 0U;
    e208:	f824 0c06 	strh.w	r0, [r4, #-6]
	sc->params.len = sizeof(sc_range);
    e20c:	f824 3c0c 	strh.w	r3, [r4, #-12]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    e210:	4631      	mov	r1, r6
    e212:	f7ff ff5f 	bl	e0d4 <bt_gatt_indicate>
    e216:	b918      	cbnz	r0, e220 <sc_process+0x58>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
    e218:	2102      	movs	r1, #2
    e21a:	4628      	mov	r0, r5
    e21c:	f017 fb2b 	bl	25876 <atomic_or>
}
    e220:	b002      	add	sp, #8
    e222:	bd70      	pop	{r4, r5, r6, pc}
    e224:	00028228 	.word	0x00028228
    e228:	0000db71 	.word	0x0000db71

0000e22c <update_ccc>:
{
    e22c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	if (attr->write != bt_gatt_attr_write_ccc) {
    e230:	4b3e      	ldr	r3, [pc, #248]	; (e32c <update_ccc+0x100>)
	struct bt_conn *conn = data->conn;
    e232:	6815      	ldr	r5, [r2, #0]
{
    e234:	4616      	mov	r6, r2
	if (attr->write != bt_gatt_attr_write_ccc) {
    e236:	6882      	ldr	r2, [r0, #8]
    e238:	429a      	cmp	r2, r3
{
    e23a:	4604      	mov	r4, r0
	if (attr->write != bt_gatt_attr_write_ccc) {
    e23c:	d11c      	bne.n	e278 <update_ccc+0x4c>
	ccc = attr->user_data;
    e23e:	68c7      	ldr	r7, [r0, #12]
		if (!cfg->value ||
    e240:	893b      	ldrh	r3, [r7, #8]
    e242:	b1cb      	cbz	r3, e278 <update_ccc+0x4c>
		    !bt_conn_is_peer_addr_le(conn, cfg->id, &cfg->peer)) {
    e244:	463a      	mov	r2, r7
    e246:	4628      	mov	r0, r5
    e248:	f812 1b01 	ldrb.w	r1, [r2], #1
    e24c:	f016 fd09 	bl	24c62 <bt_conn_is_peer_addr_le>
		if (!cfg->value ||
    e250:	b190      	cbz	r0, e278 <update_ccc+0x4c>
		err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_WRITE_MASK);
    e252:	222a      	movs	r2, #42	; 0x2a
    e254:	4621      	mov	r1, r4
    e256:	4628      	mov	r0, r5
    e258:	f017 fce2 	bl	25c20 <bt_gatt_check_perm>
		if (err) {
    e25c:	b308      	cbz	r0, e2a2 <update_ccc+0x76>
			if (err == BT_ATT_ERR_WRITE_NOT_PERMITTED) {
    e25e:	2803      	cmp	r0, #3
    e260:	d10e      	bne.n	e280 <update_ccc+0x54>
    e262:	4a33      	ldr	r2, [pc, #204]	; (e330 <update_ccc+0x104>)
    e264:	4b33      	ldr	r3, [pc, #204]	; (e334 <update_ccc+0x108>)
				BT_WARN("CCC %p not writable", attr);
    e266:	4834      	ldr	r0, [pc, #208]	; (e338 <update_ccc+0x10c>)
    e268:	1ad2      	subs	r2, r2, r3
    e26a:	08d2      	lsrs	r2, r2, #3
    e26c:	0192      	lsls	r2, r2, #6
    e26e:	f042 0202 	orr.w	r2, r2, #2
    e272:	4621      	mov	r1, r4
    e274:	f014 f8f9 	bl	2246a <log_1>
}
    e278:	2001      	movs	r0, #1
    e27a:	b002      	add	sp, #8
    e27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				sec = BT_SECURITY_L3;
    e280:	2805      	cmp	r0, #5
			    bt_conn_get_security(conn) < sec) {
    e282:	4628      	mov	r0, r5
				sec = BT_SECURITY_L3;
    e284:	bf14      	ite	ne
    e286:	f04f 0802 	movne.w	r8, #2
    e28a:	f04f 0803 	moveq.w	r8, #3
			    bt_conn_get_security(conn) < sec) {
    e28e:	f016 fcdd 	bl	24c4c <bt_conn_get_security>
			if (IS_ENABLED(CONFIG_BT_SMP) &&
    e292:	4580      	cmp	r8, r0
    e294:	d905      	bls.n	e2a2 <update_ccc+0x76>
				if (data->sec < sec) {
    e296:	7933      	ldrb	r3, [r6, #4]
    e298:	4543      	cmp	r3, r8
    e29a:	d2ed      	bcs.n	e278 <update_ccc+0x4c>
					data->sec = sec;
    e29c:	f886 8004 	strb.w	r8, [r6, #4]
    e2a0:	e7ea      	b.n	e278 <update_ccc+0x4c>
		gatt_ccc_changed(attr, ccc);
    e2a2:	4639      	mov	r1, r7
    e2a4:	4620      	mov	r0, r4
    e2a6:	f017 fa3c 	bl	25722 <gatt_ccc_changed>
		if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED) &&
    e2aa:	4b24      	ldr	r3, [pc, #144]	; (e33c <update_ccc+0x110>)
    e2ac:	429f      	cmp	r7, r3
    e2ae:	d1e3      	bne.n	e278 <update_ccc+0x4c>
	cfg = find_sc_cfg(conn->id, &conn->le.dst);
    e2b0:	7a28      	ldrb	r0, [r5, #8]
    e2b2:	f105 0188 	add.w	r1, r5, #136	; 0x88
    e2b6:	f7ff fa37 	bl	d728 <find_sc_cfg>
	if (!cfg) {
    e2ba:	4604      	mov	r4, r0
    e2bc:	2800      	cmp	r0, #0
    e2be:	d0db      	beq.n	e278 <update_ccc+0x4c>
	if (!(cfg->data.start || cfg->data.end)) {
    e2c0:	8902      	ldrh	r2, [r0, #8]
    e2c2:	8943      	ldrh	r3, [r0, #10]
    e2c4:	ea52 0103 	orrs.w	r1, r2, r3
    e2c8:	d0d6      	beq.n	e278 <update_ccc+0x4c>
	index = bt_conn_index(conn);
    e2ca:	4628      	mov	r0, r5
	sc_range[0] = sys_cpu_to_le16(cfg->data.start);
    e2cc:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(cfg->data.end);
    e2d0:	f8ad 3006 	strh.w	r3, [sp, #6]
	index = bt_conn_index(conn);
    e2d4:	f7fd fcda 	bl	bc8c <bt_conn_index>
	sc_restore_params[index].attr = &_1_gatt_svc.attrs[2];
    e2d8:	4919      	ldr	r1, [pc, #100]	; (e340 <update_ccc+0x114>)
    e2da:	4a1a      	ldr	r2, [pc, #104]	; (e344 <update_ccc+0x118>)
    e2dc:	2318      	movs	r3, #24
    e2de:	fb03 1300 	mla	r3, r3, r0, r1
    e2e2:	605a      	str	r2, [r3, #4]
	sc_restore_params[index].func = sc_restore_rsp;
    e2e4:	4a18      	ldr	r2, [pc, #96]	; (e348 <update_ccc+0x11c>)
    e2e6:	609a      	str	r2, [r3, #8]
	sc_restore_params[index].data = &sc_range[0];
    e2e8:	aa01      	add	r2, sp, #4
    e2ea:	611a      	str	r2, [r3, #16]
	sc_restore_params[index].len = sizeof(sc_range);
    e2ec:	2204      	movs	r2, #4
    e2ee:	829a      	strh	r2, [r3, #20]
	if (bt_gatt_indicate(conn, &sc_restore_params[index])) {
    e2f0:	b203      	sxth	r3, r0
    e2f2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
    e2f6:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
    e2fa:	4628      	mov	r0, r5
    e2fc:	f7ff feea 	bl	e0d4 <bt_gatt_indicate>
    e300:	b148      	cbz	r0, e316 <update_ccc+0xea>
    e302:	490b      	ldr	r1, [pc, #44]	; (e330 <update_ccc+0x104>)
    e304:	4b0b      	ldr	r3, [pc, #44]	; (e334 <update_ccc+0x108>)
		BT_ERR("SC restore indication failed");
    e306:	4811      	ldr	r0, [pc, #68]	; (e34c <update_ccc+0x120>)
    e308:	1ac9      	subs	r1, r1, r3
    e30a:	08c9      	lsrs	r1, r1, #3
    e30c:	0189      	lsls	r1, r1, #6
    e30e:	f041 0101 	orr.w	r1, r1, #1
    e312:	f014 f89d 	bl	22450 <log_0>
	memset(&cfg->data, 0, sizeof(cfg->data));
    e316:	2204      	movs	r2, #4
    e318:	2100      	movs	r1, #0
    e31a:	f104 0008 	add.w	r0, r4, #8
    e31e:	f016 f8ce 	bl	244be <memset>
		sc_store(cfg);
    e322:	4620      	mov	r0, r4
    e324:	f7fe ffc8 	bl	d2b8 <sc_store>
    e328:	e7a6      	b.n	e278 <update_ccc+0x4c>
    e32a:	bf00      	nop
    e32c:	0000d669 	.word	0x0000d669
    e330:	00027970 	.word	0x00027970
    e334:	000278c0 	.word	0x000278c0
    e338:	0002d101 	.word	0x0002d101
    e33c:	2000037c 	.word	0x2000037c
    e340:	2000d7bc 	.word	0x2000d7bc
    e344:	00028228 	.word	0x00028228
    e348:	00025ae9 	.word	0x00025ae9
    e34c:	0002d115 	.word	0x0002d115

0000e350 <bt_gatt_connected>:
{
    e350:	b570      	push	{r4, r5, r6, lr}
    e352:	b08e      	sub	sp, #56	; 0x38
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e354:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    e358:	4604      	mov	r4, r0
	data.conn = conn;
    e35a:	9003      	str	r0, [sp, #12]
	data.sec = BT_SECURITY_L1;
    e35c:	2301      	movs	r3, #1
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e35e:	7a00      	ldrb	r0, [r0, #8]
	data.sec = BT_SECURITY_L1;
    e360:	f88d 3010 	strb.w	r3, [sp, #16]
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e364:	4629      	mov	r1, r5
    e366:	f016 fba3 	bl	24ab0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e36a:	b190      	cbz	r0, e392 <bt_gatt_connected+0x42>
		if (conn->id) {
    e36c:	7a22      	ldrb	r2, [r4, #8]
    e36e:	b31a      	cbz	r2, e3b8 <bt_gatt_connected+0x68>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e370:	ae02      	add	r6, sp, #8
    e372:	2104      	movs	r1, #4
    e374:	4630      	mov	r0, r6
    e376:	f013 fb22 	bl	219be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e37a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e37c:	4a0f      	ldr	r2, [pc, #60]	; (e3bc <bt_gatt_connected+0x6c>)
    e37e:	2124      	movs	r1, #36	; 0x24
    e380:	a805      	add	r0, sp, #20
    e382:	462b      	mov	r3, r5
    e384:	f7fa f9b0 	bl	86e8 <bt_settings_encode_key>
		settings_load_subtree_direct(key, ccc_set_direct, (void *)key);
    e388:	aa05      	add	r2, sp, #20
    e38a:	490d      	ldr	r1, [pc, #52]	; (e3c0 <bt_gatt_connected+0x70>)
    e38c:	4610      	mov	r0, r2
    e38e:	f7f8 facd 	bl	692c <settings_load_subtree_direct>
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e392:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e396:	4a0b      	ldr	r2, [pc, #44]	; (e3c4 <bt_gatt_connected+0x74>)
    e398:	ab03      	add	r3, sp, #12
    e39a:	2001      	movs	r0, #1
    e39c:	f017 fc17 	bl	25bce <bt_gatt_foreach_attr>
	    bt_conn_get_security(conn) < data.sec) {
    e3a0:	4620      	mov	r0, r4
    e3a2:	f016 fc53 	bl	24c4c <bt_conn_get_security>
    e3a6:	f89d 1010 	ldrb.w	r1, [sp, #16]
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    e3aa:	4288      	cmp	r0, r1
    e3ac:	d202      	bcs.n	e3b4 <bt_gatt_connected+0x64>
		bt_conn_set_security(conn, data.sec);
    e3ae:	4620      	mov	r0, r4
    e3b0:	f016 fc1c 	bl	24bec <bt_conn_set_security>
}
    e3b4:	b00e      	add	sp, #56	; 0x38
    e3b6:	bd70      	pop	{r4, r5, r6, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e3b8:	9200      	str	r2, [sp, #0]
    e3ba:	e7df      	b.n	e37c <bt_gatt_connected+0x2c>
    e3bc:	0002d0f1 	.word	0x0002d0f1
    e3c0:	0000ded9 	.word	0x0000ded9
    e3c4:	0000e22d 	.word	0x0000e22d

0000e3c8 <bt_gatt_encrypt_change>:
{
    e3c8:	b507      	push	{r0, r1, r2, lr}
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3ca:	4a06      	ldr	r2, [pc, #24]	; (e3e4 <bt_gatt_encrypt_change+0x1c>)
	data.conn = conn;
    e3cc:	9000      	str	r0, [sp, #0]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3ce:	466b      	mov	r3, sp
	data.sec = BT_SECURITY_L1;
    e3d0:	2001      	movs	r0, #1
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3d2:	f64f 71ff 	movw	r1, #65535	; 0xffff
	data.sec = BT_SECURITY_L1;
    e3d6:	f88d 0004 	strb.w	r0, [sp, #4]
	bt_gatt_foreach_attr(0x0001, 0xffff, update_ccc, &data);
    e3da:	f017 fbf8 	bl	25bce <bt_gatt_foreach_attr>
}
    e3de:	b003      	add	sp, #12
    e3e0:	f85d fb04 	ldr.w	pc, [sp], #4
    e3e4:	0000e22d 	.word	0x0000e22d

0000e3e8 <db_hash_read>:
{
    e3e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e3ea:	4604      	mov	r4, r0
	err = k_delayed_work_cancel(&db_hash_work);
    e3ec:	4810      	ldr	r0, [pc, #64]	; (e430 <db_hash_read+0x48>)
{
    e3ee:	f8bd 6018 	ldrh.w	r6, [sp, #24]
    e3f2:	4615      	mov	r5, r2
    e3f4:	461f      	mov	r7, r3
	err = k_delayed_work_cancel(&db_hash_work);
    e3f6:	f018 fee6 	bl	271c6 <k_delayed_work_cancel>
	if (!err) {
    e3fa:	b910      	cbnz	r0, e402 <db_hash_read+0x1a>
		db_hash_gen(true);
    e3fc:	2001      	movs	r0, #1
    e3fe:	f7ff fccd 	bl	dd9c <db_hash_gen>
	bt_gatt_change_aware(conn, true);
    e402:	2101      	movs	r1, #1
    e404:	4620      	mov	r0, r4
    e406:	f017 fc36 	bl	25c76 <bt_gatt_change_aware>
	if (offset > value_len) {
    e40a:	2e10      	cmp	r6, #16
    e40c:	d80c      	bhi.n	e428 <db_hash_read+0x40>
	len = MIN(buf_len, value_len - offset);
    e40e:	f1c6 0410 	rsb	r4, r6, #16
	memcpy(buf, (uint8_t *)value + offset, len);
    e412:	4908      	ldr	r1, [pc, #32]	; (e434 <db_hash_read+0x4c>)
	len = MIN(buf_len, value_len - offset);
    e414:	42bc      	cmp	r4, r7
    e416:	bfa8      	it	ge
    e418:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
    e41a:	4622      	mov	r2, r4
    e41c:	4431      	add	r1, r6
    e41e:	4628      	mov	r0, r5
    e420:	f016 f822 	bl	24468 <memcpy>
}
    e424:	4620      	mov	r0, r4
    e426:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    e428:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, db_hash,
    e42c:	e7fa      	b.n	e424 <db_hash_read+0x3c>
    e42e:	bf00      	nop
    e430:	2000a7e8 	.word	0x2000a7e8
    e434:	2000f2f4 	.word	0x2000f2f4

0000e438 <bt_gatt_store_ccc>:
{
    e438:	b570      	push	{r4, r5, r6, lr}
    e43a:	b0c0      	sub	sp, #256	; 0x100
	save.count = 0;
    e43c:	2300      	movs	r3, #0
{
    e43e:	4604      	mov	r4, r0
    e440:	460d      	mov	r5, r1
	save.addr_with_id.addr = addr;
    e442:	910d      	str	r1, [sp, #52]	; 0x34
	save.addr_with_id.id = id;
    e444:	f88d 0038 	strb.w	r0, [sp, #56]	; 0x38
	save.count = 0;
    e448:	933f      	str	r3, [sp, #252]	; 0xfc
	bt_gatt_foreach_attr(0x0001, 0xffff, ccc_save, &save);
    e44a:	4a18      	ldr	r2, [pc, #96]	; (e4ac <bt_gatt_store_ccc+0x74>)
    e44c:	ab0d      	add	r3, sp, #52	; 0x34
    e44e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e452:	2001      	movs	r0, #1
    e454:	f017 fbbb 	bl	25bce <bt_gatt_foreach_attr>
	if (id) {
    e458:	b31c      	cbz	r4, e4a2 <bt_gatt_store_ccc+0x6a>
		u8_to_dec(id_str, sizeof(id_str), id);
    e45a:	ae03      	add	r6, sp, #12
    e45c:	4622      	mov	r2, r4
    e45e:	2104      	movs	r1, #4
    e460:	4630      	mov	r0, r6
    e462:	f013 faac 	bl	219be <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, id_str);
    e466:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e468:	4a11      	ldr	r2, [pc, #68]	; (e4b0 <bt_gatt_store_ccc+0x78>)
    e46a:	462b      	mov	r3, r5
    e46c:	2124      	movs	r1, #36	; 0x24
    e46e:	a804      	add	r0, sp, #16
    e470:	f7fa f93a 	bl	86e8 <bt_settings_encode_key>
	if (save.count) {
    e474:	9a3f      	ldr	r2, [sp, #252]	; 0xfc
    e476:	b1b2      	cbz	r2, e4a6 <bt_gatt_store_ccc+0x6e>
		len = save.count * sizeof(*save.store);
    e478:	0092      	lsls	r2, r2, #2
		str = (char *)save.store;
    e47a:	a90f      	add	r1, sp, #60	; 0x3c
	err = settings_save_one(key, str, len);
    e47c:	a804      	add	r0, sp, #16
    e47e:	f7f8 f9f5 	bl	686c <settings_save_one>
	if (err) {
    e482:	4604      	mov	r4, r0
    e484:	b150      	cbz	r0, e49c <bt_gatt_store_ccc+0x64>
    e486:	4a0b      	ldr	r2, [pc, #44]	; (e4b4 <bt_gatt_store_ccc+0x7c>)
    e488:	4b0b      	ldr	r3, [pc, #44]	; (e4b8 <bt_gatt_store_ccc+0x80>)
    e48a:	1ad2      	subs	r2, r2, r3
    e48c:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to store CCCs (err %d)", err);
    e48e:	0192      	lsls	r2, r2, #6
    e490:	4601      	mov	r1, r0
    e492:	f042 0201 	orr.w	r2, r2, #1
    e496:	4809      	ldr	r0, [pc, #36]	; (e4bc <bt_gatt_store_ccc+0x84>)
    e498:	f013 ffe7 	bl	2246a <log_1>
}
    e49c:	4620      	mov	r0, r4
    e49e:	b040      	add	sp, #256	; 0x100
    e4a0:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "ccc", addr, NULL);
    e4a2:	9400      	str	r4, [sp, #0]
    e4a4:	e7e0      	b.n	e468 <bt_gatt_store_ccc+0x30>
		str = NULL;
    e4a6:	4611      	mov	r1, r2
    e4a8:	e7e8      	b.n	e47c <bt_gatt_store_ccc+0x44>
    e4aa:	bf00      	nop
    e4ac:	0000d5a5 	.word	0x0000d5a5
    e4b0:	0002d0f1 	.word	0x0002d0f1
    e4b4:	00027970 	.word	0x00027970
    e4b8:	000278c0 	.word	0x000278c0
    e4bc:	0002d132 	.word	0x0002d132

0000e4c0 <bt_gatt_clear>:
		gatt_sub_remove(NULL, sub, prev, params);
	}
}

int bt_gatt_clear(uint8_t id, const bt_addr_le_t *addr)
{
    e4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    e4c2:	b08f      	sub	sp, #60	; 0x3c
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    e4c4:	ae03      	add	r6, sp, #12
{
    e4c6:	4604      	mov	r4, r0
    e4c8:	460d      	mov	r5, r1
	struct addr_with_id addr_with_id = {
    e4ca:	9103      	str	r1, [sp, #12]
    e4cc:	f88d 0010 	strb.w	r0, [sp, #16]
	bt_gatt_foreach_attr(0x0001, 0xffff, remove_peer_from_attr,
    e4d0:	4a1f      	ldr	r2, [pc, #124]	; (e550 <bt_gatt_clear+0x90>)
    e4d2:	4633      	mov	r3, r6
    e4d4:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e4d8:	2001      	movs	r0, #1
    e4da:	f017 fb78 	bl	25bce <bt_gatt_foreach_attr>
		if (id) {
    e4de:	b394      	cbz	r4, e546 <bt_gatt_clear+0x86>
			u8_to_dec(id_str, sizeof(id_str), id);
    e4e0:	af02      	add	r7, sp, #8
    e4e2:	4622      	mov	r2, r4
    e4e4:	2104      	movs	r1, #4
    e4e6:	4638      	mov	r0, r7
    e4e8:	f013 fa69 	bl	219be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e4ec:	9700      	str	r7, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e4ee:	4a19      	ldr	r2, [pc, #100]	; (e554 <bt_gatt_clear+0x94>)
    e4f0:	462b      	mov	r3, r5
    e4f2:	2124      	movs	r1, #36	; 0x24
    e4f4:	a805      	add	r0, sp, #20
    e4f6:	f7fa f8f7 	bl	86e8 <bt_settings_encode_key>
		return settings_delete(key);
    e4fa:	a805      	add	r0, sp, #20
    e4fc:	f014 fc36 	bl	22d6c <settings_delete>
	int err;

	err = bt_gatt_clear_ccc(id, addr);
	if (err < 0) {
    e500:	2800      	cmp	r0, #0
    e502:	db1e      	blt.n	e542 <bt_gatt_clear+0x82>
		return err;
	}

	if (IS_ENABLED(CONFIG_BT_GATT_SERVICE_CHANGED)) {
		err = bt_gatt_clear_sc(id, addr);
    e504:	4629      	mov	r1, r5
    e506:	4620      	mov	r0, r4
    e508:	f7ff f9e6 	bl	d8d8 <bt_gatt_clear_sc>
		if (err < 0) {
    e50c:	2800      	cmp	r0, #0
    e50e:	db18      	blt.n	e542 <bt_gatt_clear+0x82>
	cfg = find_cf_cfg_by_addr(id, addr);
    e510:	4629      	mov	r1, r5
    e512:	4620      	mov	r0, r4
    e514:	f7fe ff92 	bl	d43c <find_cf_cfg_by_addr>
	if (cfg) {
    e518:	b108      	cbz	r0, e51e <bt_gatt_clear+0x5e>
		clear_cf_cfg(cfg);
    e51a:	f017 f9bb 	bl	25894 <clear_cf_cfg>
		if (id) {
    e51e:	b1a4      	cbz	r4, e54a <bt_gatt_clear+0x8a>
			u8_to_dec(id_str, sizeof(id_str), id);
    e520:	4622      	mov	r2, r4
    e522:	2104      	movs	r1, #4
    e524:	4630      	mov	r0, r6
    e526:	f013 fa4a 	bl	219be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e52a:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "cf",
    e52c:	4a0a      	ldr	r2, [pc, #40]	; (e558 <bt_gatt_clear+0x98>)
    e52e:	462b      	mov	r3, r5
    e530:	2124      	movs	r1, #36	; 0x24
    e532:	a805      	add	r0, sp, #20
    e534:	f7fa f8d8 	bl	86e8 <bt_settings_encode_key>
		return settings_delete(key);
    e538:	a805      	add	r0, sp, #20
    e53a:	f014 fc17 	bl	22d6c <settings_delete>
		}
	}

	if (IS_ENABLED(CONFIG_BT_GATT_CACHING)) {
		err = bt_gatt_clear_cf(id, addr);
		if (err < 0) {
    e53e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
	if (IS_ENABLED(CONFIG_BT_GATT_CLIENT)) {
		bt_gatt_clear_subscriptions(id, addr);
	}

	return 0;
}
    e542:	b00f      	add	sp, #60	; 0x3c
    e544:	bdf0      	pop	{r4, r5, r6, r7, pc}
			bt_settings_encode_key(key, sizeof(key), "ccc",
    e546:	9400      	str	r4, [sp, #0]
    e548:	e7d1      	b.n	e4ee <bt_gatt_clear+0x2e>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e54a:	9400      	str	r4, [sp, #0]
    e54c:	e7ee      	b.n	e52c <bt_gatt_clear+0x6c>
    e54e:	bf00      	nop
    e550:	0000d57d 	.word	0x0000d57d
    e554:	0002d0f1 	.word	0x0002d0f1
    e558:	0002d17c 	.word	0x0002d17c

0000e55c <bt_gatt_disconnected>:

void bt_gatt_disconnected(struct bt_conn *conn)
{
    e55c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e55e:	4604      	mov	r4, r0
    e560:	b08d      	sub	sp, #52	; 0x34
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e562:	4603      	mov	r3, r0
    e564:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e568:	2001      	movs	r0, #1
    e56a:	4a3a      	ldr	r2, [pc, #232]	; (e654 <bt_gatt_disconnected+0xf8>)
		k_delayed_work_cancel(&gatt_ccc_store.work);
	}
#endif

	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e56c:	f104 0588 	add.w	r5, r4, #136	; 0x88
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    e570:	f017 fb2d 	bl	25bce <bt_gatt_foreach_attr>
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e574:	7a20      	ldrb	r0, [r4, #8]
    e576:	4629      	mov	r1, r5
    e578:	f016 fa9a 	bl	24ab0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS) &&
    e57c:	2800      	cmp	r0, #0
    e57e:	d035      	beq.n	e5ec <bt_gatt_disconnected+0x90>
		bt_gatt_store_ccc(conn->id, &conn->le.dst);
    e580:	4629      	mov	r1, r5
    e582:	7a20      	ldrb	r0, [r4, #8]
    e584:	f7ff ff58 	bl	e438 <bt_gatt_store_ccc>
	cfg = find_cf_cfg(conn);
    e588:	4620      	mov	r0, r4
    e58a:	f7fe fe0f 	bl	d1ac <find_cf_cfg>
	if (!cfg) {
    e58e:	4606      	mov	r6, r0
    e590:	2800      	cmp	r0, #0
    e592:	d04b      	beq.n	e62c <bt_gatt_disconnected+0xd0>
		if (conn->id) {
    e594:	7a22      	ldrb	r2, [r4, #8]
		str = (char *)cfg->data;
    e596:	3608      	adds	r6, #8
		if (conn->id) {
    e598:	2a00      	cmp	r2, #0
    e59a:	d049      	beq.n	e630 <bt_gatt_disconnected+0xd4>
			u8_to_dec(id_str, sizeof(id_str), conn->id);
    e59c:	af02      	add	r7, sp, #8
    e59e:	2104      	movs	r1, #4
    e5a0:	4638      	mov	r0, r7
    e5a2:	f013 fa0c 	bl	219be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "cf",
    e5a6:	9700      	str	r7, [sp, #0]
    e5a8:	462b      	mov	r3, r5
    e5aa:	4a2b      	ldr	r2, [pc, #172]	; (e658 <bt_gatt_disconnected+0xfc>)
    e5ac:	2124      	movs	r1, #36	; 0x24
    e5ae:	a803      	add	r0, sp, #12
    e5b0:	f7fa f89a 	bl	86e8 <bt_settings_encode_key>
	if (!cfg || !conn->id) {
    e5b4:	7a23      	ldrb	r3, [r4, #8]
    e5b6:	2701      	movs	r7, #1
    e5b8:	b93b      	cbnz	r3, e5ca <bt_gatt_disconnected+0x6e>
		bt_settings_encode_key(key, sizeof(key), "cf",
    e5ba:	2300      	movs	r3, #0
    e5bc:	9300      	str	r3, [sp, #0]
    e5be:	4a26      	ldr	r2, [pc, #152]	; (e658 <bt_gatt_disconnected+0xfc>)
    e5c0:	462b      	mov	r3, r5
    e5c2:	2124      	movs	r1, #36	; 0x24
    e5c4:	a803      	add	r0, sp, #12
    e5c6:	f7fa f88f 	bl	86e8 <bt_settings_encode_key>
	err = settings_save_one(key, str, len);
    e5ca:	4631      	mov	r1, r6
    e5cc:	463a      	mov	r2, r7
    e5ce:	a803      	add	r0, sp, #12
    e5d0:	f7f8 f94c 	bl	686c <settings_save_one>
	if (err) {
    e5d4:	4601      	mov	r1, r0
    e5d6:	b148      	cbz	r0, e5ec <bt_gatt_disconnected+0x90>
    e5d8:	4a20      	ldr	r2, [pc, #128]	; (e65c <bt_gatt_disconnected+0x100>)
    e5da:	4b21      	ldr	r3, [pc, #132]	; (e660 <bt_gatt_disconnected+0x104>)
		BT_ERR("Failed to store Client Features (err %d)", err);
    e5dc:	4821      	ldr	r0, [pc, #132]	; (e664 <bt_gatt_disconnected+0x108>)
    e5de:	1ad2      	subs	r2, r2, r3
    e5e0:	08d2      	lsrs	r2, r2, #3
    e5e2:	0192      	lsls	r2, r2, #6
    e5e4:	f042 0201 	orr.w	r2, r2, #1
    e5e8:	f013 ff3f 	bl	2246a <log_1>
		bt_gatt_store_cf(conn);
	}

	/* Make sure to clear the CCC entry when using lazy loading */
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
	    bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e5ec:	7a20      	ldrb	r0, [r4, #8]
    e5ee:	4629      	mov	r1, r5
    e5f0:	f016 fa5e 	bl	24ab0 <bt_addr_le_is_bonded>
	if (IS_ENABLED(CONFIG_BT_SETTINGS_CCC_LAZY_LOADING) &&
    e5f4:	b150      	cbz	r0, e60c <bt_gatt_disconnected+0xb0>
		struct addr_with_id addr_with_id = {
    e5f6:	7a23      	ldrb	r3, [r4, #8]
    e5f8:	f88d 3010 	strb.w	r3, [sp, #16]
			.addr = &conn->le.dst,
			.id = conn->id,
		};
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e5fc:	4a1a      	ldr	r2, [pc, #104]	; (e668 <bt_gatt_disconnected+0x10c>)
		struct addr_with_id addr_with_id = {
    e5fe:	9503      	str	r5, [sp, #12]
		bt_gatt_foreach_attr(0x0001, 0xffff,
    e600:	ab03      	add	r3, sp, #12
    e602:	f64f 71ff 	movw	r1, #65535	; 0xffff
    e606:	2001      	movs	r0, #1
    e608:	f017 fae1 	bl	25bce <bt_gatt_foreach_attr>
	cfg = find_cf_cfg(conn);
    e60c:	4620      	mov	r0, r4
    e60e:	f7fe fdcd 	bl	d1ac <find_cf_cfg>
	if (!cfg) {
    e612:	4606      	mov	r6, r0
    e614:	b1d8      	cbz	r0, e64e <bt_gatt_disconnected+0xf2>
	if (!bt_addr_le_is_bonded(conn->id, &conn->le.dst)) {
    e616:	7a20      	ldrb	r0, [r4, #8]
    e618:	4629      	mov	r1, r5
    e61a:	f016 fa49 	bl	24ab0 <bt_addr_le_is_bonded>
    e61e:	b948      	cbnz	r0, e634 <bt_gatt_disconnected+0xd8>
		clear_cf_cfg(cfg);
    e620:	4630      	mov	r0, r6
#endif /* CONFIG_BT_GATT_CLIENT */

#if defined(CONFIG_BT_GATT_CACHING)
	remove_cf_cfg(conn);
#endif
}
    e622:	b00d      	add	sp, #52	; 0x34
    e624:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		clear_cf_cfg(cfg);
    e628:	f017 b934 	b.w	25894 <clear_cf_cfg>
		len = 0;
    e62c:	4607      	mov	r7, r0
    e62e:	e7c4      	b.n	e5ba <bt_gatt_disconnected+0x5e>
    e630:	2701      	movs	r7, #1
    e632:	e7c2      	b.n	e5ba <bt_gatt_disconnected+0x5e>
		bt_addr_le_copy(&cfg->peer, &conn->le.dst);
    e634:	4629      	mov	r1, r5
    e636:	1c70      	adds	r0, r6, #1
    e638:	f017 f896 	bl	25768 <bt_addr_le_copy>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    e63c:	f06f 0102 	mvn.w	r1, #2
    e640:	f106 000c 	add.w	r0, r6, #12
}
    e644:	b00d      	add	sp, #52	; 0x34
    e646:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    e64a:	f017 b940 	b.w	258ce <atomic_and.isra.0>
    e64e:	b00d      	add	sp, #52	; 0x34
    e650:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e652:	bf00      	nop
    e654:	0000d9a1 	.word	0x0000d9a1
    e658:	0002d17c 	.word	0x0002d17c
    e65c:	00027970 	.word	0x00027970
    e660:	000278c0 	.word	0x000278c0
    e664:	0002d150 	.word	0x0002d150
    e668:	0000d57d 	.word	0x0000d57d

0000e66c <get_io_capa>:
	       BT_CMD_TEST(bt_dev.supported_commands, 34, 2);
}

static uint8_t get_io_capa(void)
{
	if (!bt_auth) {
    e66c:	4b10      	ldr	r3, [pc, #64]	; (e6b0 <get_io_capa+0x44>)
    e66e:	681b      	ldr	r3, [r3, #0]
    e670:	b1bb      	cbz	r3, e6a2 <get_io_capa+0x36>
		goto no_callbacks;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    e672:	681a      	ldr	r2, [r3, #0]
    e674:	b142      	cbz	r2, e688 <get_io_capa+0x1c>
    e676:	6859      	ldr	r1, [r3, #4]
    e678:	b131      	cbz	r1, e688 <get_io_capa+0x1c>
    e67a:	6899      	ldr	r1, [r3, #8]
    e67c:	b911      	cbnz	r1, e684 <get_io_capa+0x18>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    e67e:	490d      	ldr	r1, [pc, #52]	; (e6b4 <get_io_capa+0x48>)
    e680:	7809      	ldrb	r1, [r1, #0]
    e682:	b939      	cbnz	r1, e694 <get_io_capa+0x28>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    e684:	2004      	movs	r0, #4
    e686:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    e688:	490a      	ldr	r1, [pc, #40]	; (e6b4 <get_io_capa+0x48>)
    e68a:	7809      	ldrb	r1, [r1, #0]
    e68c:	b111      	cbz	r1, e694 <get_io_capa+0x28>
    e68e:	b10a      	cbz	r2, e694 <get_io_capa+0x28>
    e690:	6899      	ldr	r1, [r3, #8]
    e692:	b941      	cbnz	r1, e6a6 <get_io_capa+0x3a>
	    bt_auth->passkey_confirm) {
		return BT_SMP_IO_DISPLAY_YESNO;
	}

	if (bt_auth->passkey_entry) {
    e694:	685b      	ldr	r3, [r3, #4]
    e696:	b943      	cbnz	r3, e6aa <get_io_capa+0x3e>
			return BT_SMP_IO_KEYBOARD_ONLY;
		}
	}

	if (bt_auth->passkey_display) {
		return BT_SMP_IO_DISPLAY_ONLY;
    e698:	2a00      	cmp	r2, #0
    e69a:	bf0c      	ite	eq
    e69c:	2003      	moveq	r0, #3
    e69e:	2000      	movne	r0, #0
    e6a0:	4770      	bx	lr
no_callbacks:
	if (IS_ENABLED(CONFIG_BT_FIXED_PASSKEY) &&
	    fixed_passkey != BT_PASSKEY_INVALID) {
		return BT_SMP_IO_DISPLAY_ONLY;
	} else {
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    e6a2:	2003      	movs	r0, #3
    e6a4:	4770      	bx	lr
		return BT_SMP_IO_DISPLAY_YESNO;
    e6a6:	2001      	movs	r0, #1
    e6a8:	4770      	bx	lr
			return BT_SMP_IO_KEYBOARD_ONLY;
    e6aa:	2002      	movs	r0, #2
	}
}
    e6ac:	4770      	bx	lr
    e6ae:	bf00      	nop
    e6b0:	2000d744 	.word	0x2000d744
    e6b4:	2000f315 	.word	0x2000f315

0000e6b8 <smp_sign_buf>:
 * msg buffer contains message itself, 32 bit count and signature,
 * so total buffer size is len + 4 + 8 octets.
 * API is Little Endian to make it suitable for Bluetooth.
 */
static int smp_sign_buf(const uint8_t *key, uint8_t *msg, uint16_t len)
{
    e6b8:	b5f0      	push	{r4, r5, r6, r7, lr}
	int err;

	BT_DBG("Signing msg %s len %u key %s", bt_hex(msg, len), len,
	       bt_hex(key, 16));

	sys_mem_swap(m, len + sizeof(cnt));
    e6ba:	1d14      	adds	r4, r2, #4
{
    e6bc:	b08b      	sub	sp, #44	; 0x2c
    e6be:	460d      	mov	r5, r1
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    e6c0:	588b      	ldr	r3, [r1, r2]
    e6c2:	9301      	str	r3, [sp, #4]
{
    e6c4:	4606      	mov	r6, r0
	uint32_t cnt = UNALIGNED_GET((uint32_t *)&msg[len]);
    e6c6:	188f      	adds	r7, r1, r2
	sys_mem_swap(m, len + sizeof(cnt));
    e6c8:	4628      	mov	r0, r5
    e6ca:	4621      	mov	r1, r4
    e6cc:	f017 fb07 	bl	25cde <sys_mem_swap>
	sys_memcpy_swap(key_s, key, 16);
    e6d0:	4631      	mov	r1, r6
    e6d2:	2210      	movs	r2, #16
    e6d4:	a802      	add	r0, sp, #8
    e6d6:	f017 faf8 	bl	25cca <sys_memcpy_swap>

	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    e6da:	ab06      	add	r3, sp, #24
    e6dc:	4622      	mov	r2, r4
    e6de:	4629      	mov	r1, r5
    e6e0:	a802      	add	r0, sp, #8
    e6e2:	f017 fb0b 	bl	25cfc <bt_smp_aes_cmac>
	if (err) {
    e6e6:	4606      	mov	r6, r0
    e6e8:	b160      	cbz	r0, e704 <smp_sign_buf+0x4c>
    e6ea:	4910      	ldr	r1, [pc, #64]	; (e72c <smp_sign_buf+0x74>)
    e6ec:	4b10      	ldr	r3, [pc, #64]	; (e730 <smp_sign_buf+0x78>)
		BT_ERR("Data signing failed");
    e6ee:	4811      	ldr	r0, [pc, #68]	; (e734 <smp_sign_buf+0x7c>)
    e6f0:	1ac9      	subs	r1, r1, r3
    e6f2:	08c9      	lsrs	r1, r1, #3
    e6f4:	0189      	lsls	r1, r1, #6
    e6f6:	f041 0101 	orr.w	r1, r1, #1
    e6fa:	f013 fea9 	bl	22450 <log_0>
	memcpy(sig, tmp + 4, 12);

	BT_DBG("sig %s", bt_hex(sig, 12));

	return 0;
}
    e6fe:	4630      	mov	r0, r6
    e700:	b00b      	add	sp, #44	; 0x2c
    e702:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sys_mem_swap(tmp, sizeof(tmp));
    e704:	a806      	add	r0, sp, #24
    e706:	2110      	movs	r1, #16
    e708:	f017 fae9 	bl	25cde <sys_mem_swap>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    e70c:	2204      	movs	r2, #4
    e70e:	eb0d 0102 	add.w	r1, sp, r2
    e712:	a807      	add	r0, sp, #28
    e714:	f015 fea8 	bl	24468 <memcpy>
	sys_mem_swap(m, len + sizeof(cnt));
    e718:	4621      	mov	r1, r4
    e71a:	4628      	mov	r0, r5
    e71c:	f017 fadf 	bl	25cde <sys_mem_swap>
	memcpy(sig, tmp + 4, 12);
    e720:	220c      	movs	r2, #12
    e722:	a907      	add	r1, sp, #28
    e724:	4638      	mov	r0, r7
    e726:	f015 fe9f 	bl	24468 <memcpy>
	return 0;
    e72a:	e7e8      	b.n	e6fe <smp_sign_buf+0x46>
    e72c:	000279a8 	.word	0x000279a8
    e730:	000278c0 	.word	0x000278c0
    e734:	0002d18d 	.word	0x0002d18d

0000e738 <smp_chan_get>:
{
    e738:	b510      	push	{r4, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    e73a:	2106      	movs	r1, #6
    e73c:	f016 fbe4 	bl	24f08 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    e740:	4604      	mov	r4, r0
    e742:	b948      	cbnz	r0, e758 <smp_chan_get+0x20>
    e744:	4905      	ldr	r1, [pc, #20]	; (e75c <smp_chan_get+0x24>)
    e746:	4b06      	ldr	r3, [pc, #24]	; (e760 <smp_chan_get+0x28>)
		BT_ERR("Unable to find SMP channel");
    e748:	4806      	ldr	r0, [pc, #24]	; (e764 <smp_chan_get+0x2c>)
    e74a:	1ac9      	subs	r1, r1, r3
    e74c:	08c9      	lsrs	r1, r1, #3
    e74e:	0189      	lsls	r1, r1, #6
    e750:	f041 0101 	orr.w	r1, r1, #1
    e754:	f013 fe7c 	bl	22450 <log_0>
}
    e758:	4620      	mov	r0, r4
    e75a:	bd10      	pop	{r4, pc}
    e75c:	000279a8 	.word	0x000279a8
    e760:	000278c0 	.word	0x000278c0
    e764:	0002d1a1 	.word	0x0002d1a1

0000e768 <bt_smp_accept>:
	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
		struct bt_smp *smp = &bt_smp_pool[i];

		if (smp->chan.chan.conn) {
    e768:	4a0b      	ldr	r2, [pc, #44]	; (e798 <bt_smp_accept+0x30>)
{
    e76a:	b508      	push	{r3, lr}
    e76c:	4603      	mov	r3, r0
		if (smp->chan.chan.conn) {
    e76e:	6810      	ldr	r0, [r2, #0]
    e770:	b918      	cbnz	r0, e77a <bt_smp_accept+0x12>
			continue;
		}

		smp->chan.chan.ops = &ops;
    e772:	4b0a      	ldr	r3, [pc, #40]	; (e79c <bt_smp_accept+0x34>)
    e774:	6053      	str	r3, [r2, #4]

		*chan = &smp->chan.chan;
    e776:	600a      	str	r2, [r1, #0]
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
}
    e778:	bd08      	pop	{r3, pc}
    e77a:	4909      	ldr	r1, [pc, #36]	; (e7a0 <bt_smp_accept+0x38>)
    e77c:	4a09      	ldr	r2, [pc, #36]	; (e7a4 <bt_smp_accept+0x3c>)
	BT_ERR("No available SMP context for conn %p", conn);
    e77e:	480a      	ldr	r0, [pc, #40]	; (e7a8 <bt_smp_accept+0x40>)
    e780:	1a52      	subs	r2, r2, r1
    e782:	08d2      	lsrs	r2, r2, #3
    e784:	0192      	lsls	r2, r2, #6
    e786:	f042 0201 	orr.w	r2, r2, #1
    e78a:	4619      	mov	r1, r3
    e78c:	f013 fe6d 	bl	2246a <log_1>
	return -ENOMEM;
    e790:	f06f 000b 	mvn.w	r0, #11
    e794:	e7f0      	b.n	e778 <bt_smp_accept+0x10>
    e796:	bf00      	nop
    e798:	2000a870 	.word	0x2000a870
    e79c:	000283a4 	.word	0x000283a4
    e7a0:	000278c0 	.word	0x000278c0
    e7a4:	000279a8 	.word	0x000279a8
    e7a8:	0002d1bc 	.word	0x0002d1bc

0000e7ac <get_auth.constprop.0>:
	if (sc_supported) {
    e7ac:	4b0c      	ldr	r3, [pc, #48]	; (e7e0 <get_auth.constprop.0+0x34>)
    e7ae:	781b      	ldrb	r3, [r3, #0]
static uint8_t get_auth(struct bt_conn *conn, uint8_t auth)
    e7b0:	b510      	push	{r4, lr}
	if (sc_supported) {
    e7b2:	b17b      	cbz	r3, e7d4 <get_auth.constprop.0+0x28>
		auth &= BT_SMP_AUTH_MASK_SC;
    e7b4:	f000 040f 	and.w	r4, r0, #15
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e7b8:	f7ff ff58 	bl	e66c <get_io_capa>
	if (bondable) {
    e7bc:	4b09      	ldr	r3, [pc, #36]	; (e7e4 <get_auth.constprop.0+0x38>)
    e7be:	781b      	ldrb	r3, [r3, #0]
	if ((get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) ||
    e7c0:	2803      	cmp	r0, #3
		auth &= ~(BT_SMP_AUTH_MITM);
    e7c2:	bf0c      	ite	eq
    e7c4:	f004 040b 	andeq.w	r4, r4, #11
		auth |= BT_SMP_AUTH_MITM;
    e7c8:	f044 0404 	orrne.w	r4, r4, #4
	if (bondable) {
    e7cc:	b12b      	cbz	r3, e7da <get_auth.constprop.0+0x2e>
		auth |= BT_SMP_AUTH_BONDING;
    e7ce:	f044 0001 	orr.w	r0, r4, #1
}
    e7d2:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    e7d4:	f000 0407 	and.w	r4, r0, #7
    e7d8:	e7ee      	b.n	e7b8 <get_auth.constprop.0+0xc>
		auth &= ~BT_SMP_AUTH_BONDING;
    e7da:	f004 00fe 	and.w	r0, r4, #254	; 0xfe
    e7de:	e7f8      	b.n	e7d2 <get_auth.constprop.0+0x26>
    e7e0:	2000f315 	.word	0x2000f315
    e7e4:	20009d84 	.word	0x20009d84

0000e7e8 <smp_send.constprop.0>:
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e7e8:	b513      	push	{r0, r1, r4, lr}
    e7ea:	4613      	mov	r3, r2
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e7ec:	2200      	movs	r2, #0
    e7ee:	9200      	str	r2, [sp, #0]
static void smp_send(struct bt_smp *smp, struct net_buf *buf,
    e7f0:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb, NULL);
    e7f2:	460a      	mov	r2, r1
    e7f4:	6800      	ldr	r0, [r0, #0]
    e7f6:	2106      	movs	r1, #6
    e7f8:	f016 fb5d 	bl	24eb6 <bt_l2cap_send_cb>
    e7fc:	4805      	ldr	r0, [pc, #20]	; (e814 <smp_send.constprop.0+0x2c>)
    e7fe:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
    e802:	2300      	movs	r3, #0
    e804:	f504 71d4 	add.w	r1, r4, #424	; 0x1a8
}
    e808:	b002      	add	sp, #8
    e80a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    e80e:	f011 bf83 	b.w	20718 <k_delayed_work_submit_to_queue>
    e812:	bf00      	nop
    e814:	2000aca8 	.word	0x2000aca8

0000e818 <smp_init>:
{
    e818:	b538      	push	{r3, r4, r5, lr}
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e81a:	f100 05b8 	add.w	r5, r0, #184	; 0xb8
{
    e81e:	4604      	mov	r4, r0
	(void)memset((uint8_t *)smp + sizeof(smp->chan), 0,
    e820:	22f0      	movs	r2, #240	; 0xf0
    e822:	2100      	movs	r1, #0
    e824:	4628      	mov	r0, r5
    e826:	f015 fe4a 	bl	244be <memset>
	if (bt_rand(smp->prnd, 16)) {
    e82a:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    e82e:	2110      	movs	r1, #16
    e830:	f004 fe70 	bl	13514 <bt_rand>
    e834:	4604      	mov	r4, r0
    e836:	b948      	cbnz	r0, e84c <smp_init+0x34>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    e838:	2105      	movs	r1, #5
    e83a:	4628      	mov	r0, r5
    e83c:	f017 fafc 	bl	25e38 <atomic_set_bit>
	sc_public_key = bt_pub_key_get();
    e840:	f7fc fc50 	bl	b0e4 <bt_pub_key_get>
    e844:	4b02      	ldr	r3, [pc, #8]	; (e850 <smp_init+0x38>)
    e846:	6018      	str	r0, [r3, #0]
}
    e848:	4620      	mov	r0, r4
    e84a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    e84c:	2408      	movs	r4, #8
    e84e:	e7fb      	b.n	e848 <smp_init+0x30>
    e850:	2000d7d8 	.word	0x2000d7d8

0000e854 <smp_dhkey_generate>:
{
    e854:	b538      	push	{r3, r4, r5, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e856:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    e85a:	4604      	mov	r4, r0
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e85c:	2108      	movs	r1, #8
    e85e:	4628      	mov	r0, r5
    e860:	f017 faea 	bl	25e38 <atomic_set_bit>
	err = bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready);
    e864:	490a      	ldr	r1, [pc, #40]	; (e890 <smp_dhkey_generate+0x3c>)
    e866:	f204 100f 	addw	r0, r4, #271	; 0x10f
    e86a:	f7fc fc49 	bl	b100 <bt_dh_key_gen>
	if (err) {
    e86e:	b170      	cbz	r0, e88e <smp_dhkey_generate+0x3a>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
    e870:	2108      	movs	r1, #8
    e872:	4628      	mov	r0, r5
    e874:	f017 fad1 	bl	25e1a <atomic_clear_bit>
    e878:	4b06      	ldr	r3, [pc, #24]	; (e894 <smp_dhkey_generate+0x40>)
    e87a:	4907      	ldr	r1, [pc, #28]	; (e898 <smp_dhkey_generate+0x44>)
		BT_ERR("Failed to generate DHKey");
    e87c:	4807      	ldr	r0, [pc, #28]	; (e89c <smp_dhkey_generate+0x48>)
    e87e:	1ac9      	subs	r1, r1, r3
    e880:	08c9      	lsrs	r1, r1, #3
    e882:	0189      	lsls	r1, r1, #6
    e884:	f041 0101 	orr.w	r1, r1, #1
    e888:	f013 fde2 	bl	22450 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    e88c:	2008      	movs	r0, #8
}
    e88e:	bd38      	pop	{r3, r4, r5, pc}
    e890:	00026311 	.word	0x00026311
    e894:	000278c0 	.word	0x000278c0
    e898:	000279a8 	.word	0x000279a8
    e89c:	0002d1e1 	.word	0x0002d1e1

0000e8a0 <smp_find>:
{
    e8a0:	4601      	mov	r1, r0
    e8a2:	b508      	push	{r3, lr}
		if (atomic_test_bit(bt_smp_pool[i].flags, flag)) {
    e8a4:	4803      	ldr	r0, [pc, #12]	; (e8b4 <smp_find+0x14>)
    e8a6:	f017 fade 	bl	25e66 <atomic_test_bit>
	return NULL;
    e8aa:	2800      	cmp	r0, #0
}
    e8ac:	4802      	ldr	r0, [pc, #8]	; (e8b8 <smp_find+0x18>)
    e8ae:	bf08      	it	eq
    e8b0:	2000      	moveq	r0, #0
    e8b2:	bd08      	pop	{r3, pc}
    e8b4:	2000a92c 	.word	0x2000a92c
    e8b8:	2000a870 	.word	0x2000a870

0000e8bc <smp_ident_info>:
{
    e8bc:	b570      	push	{r4, r5, r6, lr}
    e8be:	460b      	mov	r3, r1
    e8c0:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e8c2:	210d      	movs	r1, #13
    e8c4:	30bc      	adds	r0, #188	; 0xbc
    e8c6:	f017 face 	bl	25e66 <atomic_test_bit>
    e8ca:	b308      	cbz	r0, e910 <smp_ident_info+0x54>
		struct bt_smp_ident_info *req = (void *)buf->data;
    e8cc:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e8ce:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    e8d0:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e8d4:	7a19      	ldrb	r1, [r3, #8]
    e8d6:	462a      	mov	r2, r5
    e8d8:	2002      	movs	r0, #2
    e8da:	f017 fdae 	bl	2643a <bt_keys_get_type>
		if (!keys) {
    e8de:	b990      	cbnz	r0, e906 <smp_ident_info+0x4a>
    e8e0:	4a0f      	ldr	r2, [pc, #60]	; (e920 <smp_ident_info+0x64>)
    e8e2:	4c10      	ldr	r4, [pc, #64]	; (e924 <smp_ident_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e8e4:	4628      	mov	r0, r5
    e8e6:	1aa4      	subs	r4, r4, r2
    e8e8:	f7f9 fc50 	bl	818c <bt_addr_le_str_real>
    e8ec:	f7f6 feba 	bl	5664 <log_strdup>
    e8f0:	08e4      	lsrs	r4, r4, #3
    e8f2:	01a4      	lsls	r4, r4, #6
    e8f4:	f044 0401 	orr.w	r4, r4, #1
    e8f8:	4601      	mov	r1, r0
    e8fa:	4622      	mov	r2, r4
    e8fc:	480a      	ldr	r0, [pc, #40]	; (e928 <smp_ident_info+0x6c>)
    e8fe:	f013 fdb4 	bl	2246a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e902:	2008      	movs	r0, #8
}
    e904:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->irk.val, req->irk, 16);
    e906:	2210      	movs	r2, #16
    e908:	4631      	mov	r1, r6
    e90a:	302a      	adds	r0, #42	; 0x2a
    e90c:	f015 fdac 	bl	24468 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    e910:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e914:	2109      	movs	r1, #9
    e916:	f017 fa8f 	bl	25e38 <atomic_set_bit>
	return 0;
    e91a:	2000      	movs	r0, #0
    e91c:	e7f2      	b.n	e904 <smp_ident_info+0x48>
    e91e:	bf00      	nop
    e920:	000278c0 	.word	0x000278c0
    e924:	000279a8 	.word	0x000279a8
    e928:	0002d1fa 	.word	0x0002d1fa

0000e92c <smp_encrypt_info>:
{
    e92c:	b570      	push	{r4, r5, r6, lr}
    e92e:	460b      	mov	r3, r1
    e930:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    e932:	210d      	movs	r1, #13
    e934:	30bc      	adds	r0, #188	; 0xbc
    e936:	f017 fa96 	bl	25e66 <atomic_test_bit>
    e93a:	b308      	cbz	r0, e980 <smp_encrypt_info+0x54>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    e93c:	689e      	ldr	r6, [r3, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    e93e:	6823      	ldr	r3, [r4, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    e940:	f103 0588 	add.w	r5, r3, #136	; 0x88
    e944:	7a19      	ldrb	r1, [r3, #8]
    e946:	462a      	mov	r2, r5
    e948:	2004      	movs	r0, #4
    e94a:	f017 fd76 	bl	2643a <bt_keys_get_type>
		if (!keys) {
    e94e:	b990      	cbnz	r0, e976 <smp_encrypt_info+0x4a>
    e950:	4a0f      	ldr	r2, [pc, #60]	; (e990 <smp_encrypt_info+0x64>)
    e952:	4c10      	ldr	r4, [pc, #64]	; (e994 <smp_encrypt_info+0x68>)
			BT_ERR("Unable to get keys for %s",
    e954:	4628      	mov	r0, r5
    e956:	1aa4      	subs	r4, r4, r2
    e958:	f7f9 fc18 	bl	818c <bt_addr_le_str_real>
    e95c:	f7f6 fe82 	bl	5664 <log_strdup>
    e960:	08e4      	lsrs	r4, r4, #3
    e962:	01a4      	lsls	r4, r4, #6
    e964:	f044 0401 	orr.w	r4, r4, #1
    e968:	4601      	mov	r1, r0
    e96a:	4622      	mov	r2, r4
    e96c:	480a      	ldr	r0, [pc, #40]	; (e998 <smp_encrypt_info+0x6c>)
    e96e:	f013 fd7c 	bl	2246a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    e972:	2008      	movs	r0, #8
}
    e974:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(keys->ltk.val, req->ltk, 16);
    e976:	2210      	movs	r2, #16
    e978:	4631      	mov	r1, r6
    e97a:	301a      	adds	r0, #26
    e97c:	f015 fd74 	bl	24468 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    e980:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    e984:	2107      	movs	r1, #7
    e986:	f017 fa57 	bl	25e38 <atomic_set_bit>
	return 0;
    e98a:	2000      	movs	r0, #0
    e98c:	e7f2      	b.n	e974 <smp_encrypt_info+0x48>
    e98e:	bf00      	nop
    e990:	000278c0 	.word	0x000278c0
    e994:	000279a8 	.word	0x000279a8
    e998:	0002d1fa 	.word	0x0002d1fa

0000e99c <smp_pairing_req>:
{
    e99c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    e9a0:	688f      	ldr	r7, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e9a2:	78fb      	ldrb	r3, [r7, #3]
    e9a4:	3b07      	subs	r3, #7
    e9a6:	2b09      	cmp	r3, #9
{
    e9a8:	4604      	mov	r4, r0
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    e9aa:	d904      	bls.n	e9b6 <smp_pairing_req+0x1a>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    e9ac:	2706      	movs	r7, #6
}
    e9ae:	4638      	mov	r0, r7
    e9b0:	b002      	add	sp, #8
    e9b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	struct bt_conn *conn = smp->chan.chan.conn;
    e9b6:	6806      	ldr	r6, [r0, #0]
	if (!conn->le.keys) {
    e9b8:	f8d6 30b4 	ldr.w	r3, [r6, #180]	; 0xb4
    e9bc:	b163      	cbz	r3, e9d8 <smp_pairing_req+0x3c>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
    e9be:	f104 05bc 	add.w	r5, r4, #188	; 0xbc
    e9c2:	210f      	movs	r1, #15
    e9c4:	4628      	mov	r0, r5
    e9c6:	f017 fa4e 	bl	25e66 <atomic_test_bit>
    e9ca:	b980      	cbnz	r0, e9ee <smp_pairing_req+0x52>
		int ret = smp_init(smp);
    e9cc:	4620      	mov	r0, r4
    e9ce:	f7ff ff23 	bl	e818 <smp_init>
		if (ret) {
    e9d2:	b160      	cbz	r0, e9ee <smp_pairing_req+0x52>
			return ret;
    e9d4:	b2c7      	uxtb	r7, r0
    e9d6:	e7ea      	b.n	e9ae <smp_pairing_req+0x12>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    e9d8:	7a30      	ldrb	r0, [r6, #8]
    e9da:	f106 0188 	add.w	r1, r6, #136	; 0x88
    e9de:	f001 fc69 	bl	102b4 <bt_keys_get_addr>
    e9e2:	f8c6 00b4 	str.w	r0, [r6, #180]	; 0xb4
		if (!conn->le.keys) {
    e9e6:	2800      	cmp	r0, #0
    e9e8:	d1e9      	bne.n	e9be <smp_pairing_req+0x22>
	switch (conn->required_sec_level) {
    e9ea:	2708      	movs	r7, #8
    e9ec:	e7df      	b.n	e9ae <smp_pairing_req+0x12>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e9ee:	2301      	movs	r3, #1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e9f0:	2206      	movs	r2, #6
    e9f2:	4639      	mov	r1, r7
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    e9f4:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	memcpy(smp->preq + 1, req, sizeof(*req));
    e9f8:	f104 00c2 	add.w	r0, r4, #194	; 0xc2
    e9fc:	f015 fd34 	bl	24468 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    ea00:	2302      	movs	r3, #2
    ea02:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
	rsp->auth_req = get_auth(conn, req->auth_req);
    ea06:	78b8      	ldrb	r0, [r7, #2]
    ea08:	f7ff fed0 	bl	e7ac <get_auth.constprop.0>
    ea0c:	f884 00cb 	strb.w	r0, [r4, #203]	; 0xcb
    ea10:	4680      	mov	r8, r0
	rsp->io_capability = get_io_capa();
    ea12:	f7ff fe2b 	bl	e66c <get_io_capa>
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ea16:	4b9e      	ldr	r3, [pc, #632]	; (ec90 <smp_pairing_req+0x2f4>)
	rsp->io_capability = get_io_capa();
    ea18:	f884 00c9 	strb.w	r0, [r4, #201]	; 0xc9
	rsp->oob_flag = oobd_present ? BT_SMP_OOB_PRESENT :
    ea1c:	781b      	ldrb	r3, [r3, #0]
    ea1e:	f884 30ca 	strb.w	r3, [r4, #202]	; 0xca
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    ea22:	2310      	movs	r3, #16
    ea24:	f884 30cc 	strb.w	r3, [r4, #204]	; 0xcc
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    ea28:	793b      	ldrb	r3, [r7, #4]
    ea2a:	f003 0307 	and.w	r3, r3, #7
    ea2e:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    ea32:	797b      	ldrb	r3, [r7, #5]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    ea34:	f018 0f08 	tst.w	r8, #8
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    ea38:	f003 0307 	and.w	r3, r3, #7
    ea3c:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    ea40:	d012      	beq.n	ea68 <smp_pairing_req+0xcc>
    ea42:	78bb      	ldrb	r3, [r7, #2]
    ea44:	0719      	lsls	r1, r3, #28
    ea46:	d50f      	bpl.n	ea68 <smp_pairing_req+0xcc>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    ea48:	2105      	movs	r1, #5
    ea4a:	4628      	mov	r0, r5
    ea4c:	f017 f9f4 	bl	25e38 <atomic_set_bit>
		rsp->init_key_dist &= RECV_KEYS_SC;
    ea50:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    ea54:	f003 0306 	and.w	r3, r3, #6
    ea58:	f884 30cd 	strb.w	r3, [r4, #205]	; 0xcd
		rsp->resp_key_dist &= SEND_KEYS_SC;
    ea5c:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    ea60:	f003 0306 	and.w	r3, r3, #6
    ea64:	f884 30ce 	strb.w	r3, [r4, #206]	; 0xce
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    ea68:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    ea6c:	069a      	lsls	r2, r3, #26
    ea6e:	d506      	bpl.n	ea7e <smp_pairing_req+0xe2>
    ea70:	78bb      	ldrb	r3, [r7, #2]
    ea72:	069b      	lsls	r3, r3, #26
    ea74:	d503      	bpl.n	ea7e <smp_pairing_req+0xe2>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    ea76:	2114      	movs	r1, #20
    ea78:	4628      	mov	r0, r5
    ea7a:	f017 f9dd 	bl	25e38 <atomic_set_bit>
	smp->local_dist = rsp->resp_key_dist;
    ea7e:	f894 30ce 	ldrb.w	r3, [r4, #206]	; 0xce
    ea82:	f884 31a0 	strb.w	r3, [r4, #416]	; 0x1a0
	smp->remote_dist = rsp->init_key_dist;
    ea86:	f894 30cd 	ldrb.w	r3, [r4, #205]	; 0xcd
    ea8a:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    ea8e:	f894 30cb 	ldrb.w	r3, [r4, #203]	; 0xcb
    ea92:	07d8      	lsls	r0, r3, #31
    ea94:	d506      	bpl.n	eaa4 <smp_pairing_req+0x108>
    ea96:	78bb      	ldrb	r3, [r7, #2]
    ea98:	07d9      	lsls	r1, r3, #31
    ea9a:	d503      	bpl.n	eaa4 <smp_pairing_req+0x108>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    ea9c:	210d      	movs	r1, #13
    ea9e:	4628      	mov	r0, r5
    eaa0:	f017 f9ca 	bl	25e38 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    eaa4:	2103      	movs	r1, #3
    eaa6:	4628      	mov	r0, r5
    eaa8:	f017 f9c6 	bl	25e38 <atomic_set_bit>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eaac:	2105      	movs	r1, #5
	smp->method = get_pair_method(smp, req->io_capability);
    eaae:	783f      	ldrb	r7, [r7, #0]
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eab0:	f017 f9d9 	bl	25e66 <atomic_test_bit>
    eab4:	f8d4 8000 	ldr.w	r8, [r4]
    eab8:	2800      	cmp	r0, #0
    eaba:	d15a      	bne.n	eb72 <smp_pairing_req+0x1d6>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    eabc:	2f04      	cmp	r7, #4
    eabe:	d879      	bhi.n	ebb4 <smp_pairing_req+0x218>
	if ((req->oob_flag & rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    eac0:	f894 20ca 	ldrb.w	r2, [r4, #202]	; 0xca
    eac4:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    eac8:	4013      	ands	r3, r2
    eaca:	07da      	lsls	r2, r3, #31
    eacc:	d470      	bmi.n	ebb0 <smp_pairing_req+0x214>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    eace:	f894 10c4 	ldrb.w	r1, [r4, #196]	; 0xc4
    ead2:	f894 00cb 	ldrb.w	r0, [r4, #203]	; 0xcb
    ead6:	4301      	orrs	r1, r0
    ead8:	f011 0104 	ands.w	r1, r1, #4
    eadc:	d00e      	beq.n	eafc <smp_pairing_req+0x160>
	method = gen_method_legacy[remote_io][get_io_capa()];
    eade:	f7ff fdc5 	bl	e66c <get_io_capa>
    eae2:	4b6c      	ldr	r3, [pc, #432]	; (ec94 <smp_pairing_req+0x2f8>)
    eae4:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    eae8:	441f      	add	r7, r3
    eaea:	5c39      	ldrb	r1, [r7, r0]
	if (method == PASSKEY_ROLE) {
    eaec:	2904      	cmp	r1, #4
    eaee:	d105      	bne.n	eafc <smp_pairing_req+0x160>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    eaf0:	f898 3003 	ldrb.w	r3, [r8, #3]
			method = PASSKEY_INPUT;
    eaf4:	2b00      	cmp	r3, #0
    eaf6:	bf0c      	ite	eq
    eaf8:	2102      	moveq	r1, #2
    eafa:	2101      	movne	r1, #1
	smp->method = get_pair_method(smp, req->io_capability);
    eafc:	f884 10c0 	strb.w	r1, [r4, #192]	; 0xc0
	if (!conn->le.keys) {
    eb00:	f8d8 30b4 	ldr.w	r3, [r8, #180]	; 0xb4
    eb04:	b93b      	cbnz	r3, eb16 <smp_pairing_req+0x17a>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    eb06:	f898 0008 	ldrb.w	r0, [r8, #8]
    eb0a:	f108 0188 	add.w	r1, r8, #136	; 0x88
    eb0e:	f001 fbd1 	bl	102b4 <bt_keys_get_addr>
    eb12:	f8c8 00b4 	str.w	r0, [r8, #180]	; 0xb4
	if (!conn->le.keys ||
    eb16:	f8d8 20b4 	ldr.w	r2, [r8, #180]	; 0xb4
    eb1a:	2a00      	cmp	r2, #0
    eb1c:	d163      	bne.n	ebe6 <smp_pairing_req+0x24a>
	switch (conn->required_sec_level) {
    eb1e:	6823      	ldr	r3, [r4, #0]
    eb20:	7a9b      	ldrb	r3, [r3, #10]
    eb22:	2b03      	cmp	r3, #3
    eb24:	d05a      	beq.n	ebdc <smp_pairing_req+0x240>
    eb26:	d847      	bhi.n	ebb8 <smp_pairing_req+0x21c>
    eb28:	3b01      	subs	r3, #1
    eb2a:	2b01      	cmp	r3, #1
    eb2c:	f63f af5d 	bhi.w	e9ea <smp_pairing_req+0x4e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    eb30:	2105      	movs	r1, #5
    eb32:	4628      	mov	r0, r5
    eb34:	f017 f997 	bl	25e66 <atomic_test_bit>
    eb38:	2800      	cmp	r0, #0
    eb3a:	f040 8104 	bne.w	ed46 <smp_pairing_req+0x3aa>
	struct bt_conn *conn = smp->chan.chan.conn;
    eb3e:	6826      	ldr	r6, [r4, #0]
	keys = bt_keys_find_addr(conn->id, &conn->le.dst);
    eb40:	f106 0188 	add.w	r1, r6, #136	; 0x88
    eb44:	7a30      	ldrb	r0, [r6, #8]
    eb46:	f001 fc79 	bl	1043c <bt_keys_find_addr>
	if (keys && (keys->flags & BT_KEYS_AUTHENTICATED) &&
    eb4a:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    eb4e:	2800      	cmp	r0, #0
    eb50:	d067      	beq.n	ec22 <smp_pairing_req+0x286>
    eb52:	7b43      	ldrb	r3, [r0, #13]
    eb54:	07db      	lsls	r3, r3, #31
    eb56:	d564      	bpl.n	ec22 <smp_pairing_req+0x286>
    eb58:	2900      	cmp	r1, #0
    eb5a:	d162      	bne.n	ec22 <smp_pairing_req+0x286>
    eb5c:	4b4e      	ldr	r3, [pc, #312]	; (ec98 <smp_pairing_req+0x2fc>)
    eb5e:	494f      	ldr	r1, [pc, #316]	; (ec9c <smp_pairing_req+0x300>)
		BT_ERR("JustWorks failed, authenticated keys present");
    eb60:	484f      	ldr	r0, [pc, #316]	; (eca0 <smp_pairing_req+0x304>)
    eb62:	1ac9      	subs	r1, r1, r3
    eb64:	08c9      	lsrs	r1, r1, #3
    eb66:	0189      	lsls	r1, r1, #6
    eb68:	f041 0101 	orr.w	r1, r1, #1
    eb6c:	f013 fc70 	bl	22450 <log_0>
	if (ret) {
    eb70:	e73b      	b.n	e9ea <smp_pairing_req+0x4e>
	if ((req->auth_req & rsp->auth_req) & BT_SMP_AUTH_SC) {
    eb72:	f894 00c4 	ldrb.w	r0, [r4, #196]	; 0xc4
    eb76:	f894 20cb 	ldrb.w	r2, [r4, #203]	; 0xcb
    eb7a:	ea00 0302 	and.w	r3, r0, r2
    eb7e:	071b      	lsls	r3, r3, #28
    eb80:	d507      	bpl.n	eb92 <smp_pairing_req+0x1f6>
		if ((req->oob_flag | rsp->oob_flag) & BT_SMP_OOB_DATA_MASK) {
    eb82:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
    eb86:	f894 c0ca 	ldrb.w	ip, [r4, #202]	; 0xca
    eb8a:	ea43 030c 	orr.w	r3, r3, ip
    eb8e:	07db      	lsls	r3, r3, #31
    eb90:	d4b4      	bmi.n	eafc <smp_pairing_req+0x160>
	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY) {
    eb92:	2f04      	cmp	r7, #4
    eb94:	d80e      	bhi.n	ebb4 <smp_pairing_req+0x218>
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    eb96:	ea40 0102 	orr.w	r1, r0, r2
    eb9a:	f011 0104 	ands.w	r1, r1, #4
    eb9e:	d0ad      	beq.n	eafc <smp_pairing_req+0x160>
	return gen_method_sc[remote_io][get_io_capa()];
    eba0:	f7ff fd64 	bl	e66c <get_io_capa>
    eba4:	4b3f      	ldr	r3, [pc, #252]	; (eca4 <smp_pairing_req+0x308>)
    eba6:	eb07 0787 	add.w	r7, r7, r7, lsl #2
    ebaa:	441f      	add	r7, r3
    ebac:	5c39      	ldrb	r1, [r7, r0]
    ebae:	e7a5      	b.n	eafc <smp_pairing_req+0x160>
		return LEGACY_OOB;
    ebb0:	2106      	movs	r1, #6
    ebb2:	e7a3      	b.n	eafc <smp_pairing_req+0x160>
		return JUST_WORKS;
    ebb4:	2100      	movs	r1, #0
    ebb6:	e7a1      	b.n	eafc <smp_pairing_req+0x160>
	switch (conn->required_sec_level) {
    ebb8:	2b04      	cmp	r3, #4
    ebba:	f47f af16 	bne.w	e9ea <smp_pairing_req+0x4e>
	return MIN(req->max_key_size, rsp->max_key_size);
    ebbe:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    ebc2:	f894 20c5 	ldrb.w	r2, [r4, #197]	; 0xc5
		if (get_encryption_key_size(smp) != BT_SMP_MAX_ENC_KEY_SIZE) {
    ebc6:	4293      	cmp	r3, r2
    ebc8:	bf28      	it	cs
    ebca:	4613      	movcs	r3, r2
    ebcc:	2b10      	cmp	r3, #16
    ebce:	f47f aeed 	bne.w	e9ac <smp_pairing_req+0x10>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ebd2:	2105      	movs	r1, #5
    ebd4:	4628      	mov	r0, r5
    ebd6:	f017 f946 	bl	25e66 <atomic_test_bit>
    ebda:	b190      	cbz	r0, ec02 <smp_pairing_req+0x266>
		if (smp->method == JUST_WORKS) {
    ebdc:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ebe0:	2b00      	cmp	r3, #0
    ebe2:	d1a5      	bne.n	eb30 <smp_pairing_req+0x194>
    ebe4:	e00d      	b.n	ec02 <smp_pairing_req+0x266>
	    !(conn->le.keys->keys & (BT_KEYS_LTK_P256 | BT_KEYS_LTK))) {
    ebe6:	89d1      	ldrh	r1, [r2, #14]
	if (!conn->le.keys ||
    ebe8:	f011 0f24 	tst.w	r1, #36	; 0x24
    ebec:	d097      	beq.n	eb1e <smp_pairing_req+0x182>
	return MIN(req->max_key_size, rsp->max_key_size);
    ebee:	f894 30cc 	ldrb.w	r3, [r4, #204]	; 0xcc
    ebf2:	f894 00c5 	ldrb.w	r0, [r4, #197]	; 0xc5
	if (conn->le.keys->enc_size > get_encryption_key_size(smp)) {
    ebf6:	7b12      	ldrb	r2, [r2, #12]
    ebf8:	4283      	cmp	r3, r0
    ebfa:	bf28      	it	cs
    ebfc:	4603      	movcs	r3, r0
    ebfe:	429a      	cmp	r2, r3
    ec00:	d901      	bls.n	ec06 <smp_pairing_req+0x26a>
		return BT_SMP_ERR_AUTH_REQUIREMENTS;
    ec02:	2703      	movs	r7, #3
    ec04:	e6d3      	b.n	e9ae <smp_pairing_req+0x12>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    ec06:	068a      	lsls	r2, r1, #26
    ec08:	d404      	bmi.n	ec14 <smp_pairing_req+0x278>
	if (!IS_ENABLED(CONFIG_BT_SMP_ALLOW_UNAUTH_OVERWRITE) &&
    ec0a:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ec0e:	2b00      	cmp	r3, #0
    ec10:	d185      	bne.n	eb1e <smp_pairing_req+0x182>
    ec12:	e7f6      	b.n	ec02 <smp_pairing_req+0x266>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ec14:	2105      	movs	r1, #5
    ec16:	4628      	mov	r0, r5
    ec18:	f017 f925 	bl	25e66 <atomic_test_bit>
	if ((conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    ec1c:	2800      	cmp	r0, #0
    ec1e:	d1f4      	bne.n	ec0a <smp_pairing_req+0x26e>
    ec20:	e7ef      	b.n	ec02 <smp_pairing_req+0x266>
	switch (smp->method) {
    ec22:	2906      	cmp	r1, #6
    ec24:	d877      	bhi.n	ed16 <smp_pairing_req+0x37a>
    ec26:	e8df f001 	tbb	[pc, r1]
    ec2a:	6c1b      	.short	0x6c1b
    ec2c:	76767641 	.word	0x76767641
    ec30:	04          	.byte	0x04
    ec31:	00          	.byte	0x00
		if (bt_auth && bt_auth->oob_data_request) {
    ec32:	4e1d      	ldr	r6, [pc, #116]	; (eca8 <smp_pairing_req+0x30c>)
    ec34:	6833      	ldr	r3, [r6, #0]
    ec36:	2b00      	cmp	r3, #0
    ec38:	d078      	beq.n	ed2c <smp_pairing_req+0x390>
    ec3a:	68db      	ldr	r3, [r3, #12]
    ec3c:	2b00      	cmp	r3, #0
    ec3e:	d075      	beq.n	ed2c <smp_pairing_req+0x390>
			struct bt_conn_oob_info info = {
    ec40:	2300      	movs	r3, #0
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec42:	210a      	movs	r1, #10
    ec44:	4628      	mov	r0, r5
			struct bt_conn_oob_info info = {
    ec46:	f8ad 3004 	strh.w	r3, [sp, #4]
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec4a:	f017 f8f5 	bl	25e38 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    ec4e:	6833      	ldr	r3, [r6, #0]
    ec50:	6820      	ldr	r0, [r4, #0]
    ec52:	68db      	ldr	r3, [r3, #12]
    ec54:	a901      	add	r1, sp, #4
    ec56:	4798      	blx	r3
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ec58:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    ec5c:	2b00      	cmp	r3, #0
    ec5e:	d167      	bne.n	ed30 <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ec60:	210f      	movs	r1, #15
    ec62:	4628      	mov	r0, r5
    ec64:	f017 f8ff 	bl	25e66 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ec68:	4607      	mov	r7, r0
    ec6a:	2800      	cmp	r0, #0
    ec6c:	d160      	bne.n	ed30 <smp_pairing_req+0x394>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ec6e:	4e0e      	ldr	r6, [pc, #56]	; (eca8 <smp_pairing_req+0x30c>)
    ec70:	6833      	ldr	r3, [r6, #0]
    ec72:	2b00      	cmp	r3, #0
    ec74:	d05c      	beq.n	ed30 <smp_pairing_req+0x394>
	    bt_auth && bt_auth->pairing_confirm) {
    ec76:	695b      	ldr	r3, [r3, #20]
    ec78:	2b00      	cmp	r3, #0
    ec7a:	d059      	beq.n	ed30 <smp_pairing_req+0x394>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ec7c:	4628      	mov	r0, r5
    ec7e:	210a      	movs	r1, #10
    ec80:	f017 f8da 	bl	25e38 <atomic_set_bit>
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    ec84:	6833      	ldr	r3, [r6, #0]
    ec86:	6820      	ldr	r0, [r4, #0]
    ec88:	695b      	ldr	r3, [r3, #20]
		bt_auth->pairing_confirm(conn);
    ec8a:	4798      	blx	r3
		return 0;
    ec8c:	e68f      	b.n	e9ae <smp_pairing_req+0x12>
    ec8e:	bf00      	nop
    ec90:	2000f314 	.word	0x2000f314
    ec94:	0002d5b5 	.word	0x0002d5b5
    ec98:	000278c0 	.word	0x000278c0
    ec9c:	000279a8 	.word	0x000279a8
    eca0:	0002d214 	.word	0x0002d214
    eca4:	0002d5ce 	.word	0x0002d5ce
    eca8:	2000d744 	.word	0x2000d744
			if (bt_rand(&passkey, sizeof(passkey))) {
    ecac:	2104      	movs	r1, #4
    ecae:	eb0d 0001 	add.w	r0, sp, r1
    ecb2:	f004 fc2f 	bl	13514 <bt_rand>
    ecb6:	2800      	cmp	r0, #0
    ecb8:	f47f ae97 	bne.w	e9ea <smp_pairing_req+0x4e>
			passkey %= 1000000;
    ecbc:	9b01      	ldr	r3, [sp, #4]
    ecbe:	4a2f      	ldr	r2, [pc, #188]	; (ed7c <smp_pairing_req+0x3e0>)
		if (bt_auth && bt_auth->passkey_display) {
    ecc0:	4f2f      	ldr	r7, [pc, #188]	; (ed80 <smp_pairing_req+0x3e4>)
			passkey %= 1000000;
    ecc2:	fbb3 f1f2 	udiv	r1, r3, r2
    ecc6:	fb02 3311 	mls	r3, r2, r1, r3
    ecca:	9301      	str	r3, [sp, #4]
		if (bt_auth && bt_auth->passkey_display) {
    eccc:	683b      	ldr	r3, [r7, #0]
    ecce:	b153      	cbz	r3, ece6 <smp_pairing_req+0x34a>
    ecd0:	681b      	ldr	r3, [r3, #0]
    ecd2:	b143      	cbz	r3, ece6 <smp_pairing_req+0x34a>
			atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    ecd4:	210b      	movs	r1, #11
    ecd6:	4628      	mov	r0, r5
    ecd8:	f017 f8ae 	bl	25e38 <atomic_set_bit>
			bt_auth->passkey_display(conn, passkey);
    ecdc:	683b      	ldr	r3, [r7, #0]
    ecde:	9901      	ldr	r1, [sp, #4]
    ece0:	681b      	ldr	r3, [r3, #0]
    ece2:	4630      	mov	r0, r6
    ece4:	4798      	blx	r3
		sys_put_le32(passkey, smp->tk);
    ece6:	9b01      	ldr	r3, [sp, #4]
	dst[0] = val;
    ece8:	f884 30ff 	strb.w	r3, [r4, #255]	; 0xff
	dst[1] = val >> 8;
    ecec:	f3c3 2207 	ubfx	r2, r3, #8, #8
	sys_put_le16(val >> 16, &dst[2]);
    ecf0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    ecf2:	f884 3101 	strb.w	r3, [r4, #257]	; 0x101
	dst[1] = val >> 8;
    ecf6:	0a1b      	lsrs	r3, r3, #8
    ecf8:	f884 2100 	strb.w	r2, [r4, #256]	; 0x100
    ecfc:	f884 3102 	strb.w	r3, [r4, #258]	; 0x102
	if (ret) {
    ed00:	e7aa      	b.n	ec58 <smp_pairing_req+0x2bc>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ed02:	4628      	mov	r0, r5
    ed04:	210a      	movs	r1, #10
    ed06:	f017 f897 	bl	25e38 <atomic_set_bit>
		bt_auth->passkey_entry(conn);
    ed0a:	4b1d      	ldr	r3, [pc, #116]	; (ed80 <smp_pairing_req+0x3e4>)
    ed0c:	681b      	ldr	r3, [r3, #0]
    ed0e:	4630      	mov	r0, r6
    ed10:	685b      	ldr	r3, [r3, #4]
    ed12:	4798      	blx	r3
	if (ret) {
    ed14:	e7a0      	b.n	ec58 <smp_pairing_req+0x2bc>
    ed16:	4b1b      	ldr	r3, [pc, #108]	; (ed84 <smp_pairing_req+0x3e8>)
    ed18:	4a1b      	ldr	r2, [pc, #108]	; (ed88 <smp_pairing_req+0x3ec>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    ed1a:	481c      	ldr	r0, [pc, #112]	; (ed8c <smp_pairing_req+0x3f0>)
    ed1c:	1ad2      	subs	r2, r2, r3
    ed1e:	08d2      	lsrs	r2, r2, #3
    ed20:	0192      	lsls	r2, r2, #6
    ed22:	f042 0201 	orr.w	r2, r2, #1
    ed26:	f013 fba0 	bl	2246a <log_1>
	if (ret) {
    ed2a:	e65e      	b.n	e9ea <smp_pairing_req+0x4e>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    ed2c:	2702      	movs	r7, #2
    ed2e:	e63e      	b.n	e9ae <smp_pairing_req+0x12>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ed30:	2103      	movs	r1, #3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ed32:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    ed36:	f017 f87f 	bl	25e38 <atomic_set_bit>
	return send_pairing_rsp(smp);
    ed3a:	4620      	mov	r0, r4
}
    ed3c:	b002      	add	sp, #8
    ed3e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return send_pairing_rsp(smp);
    ed42:	f017 b8b9 	b.w	25eb8 <send_pairing_rsp>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ed46:	f894 70c0 	ldrb.w	r7, [r4, #192]	; 0xc0
    ed4a:	b9a7      	cbnz	r7, ed76 <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ed4c:	210f      	movs	r1, #15
    ed4e:	4628      	mov	r0, r5
    ed50:	f017 f889 	bl	25e66 <atomic_test_bit>
	if ((DISPLAY_FIXED(smp) || smp->method == JUST_WORKS) &&
    ed54:	b978      	cbnz	r0, ed76 <smp_pairing_req+0x3da>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ed56:	f8df 8028 	ldr.w	r8, [pc, #40]	; ed80 <smp_pairing_req+0x3e4>
    ed5a:	f8d8 3000 	ldr.w	r3, [r8]
    ed5e:	b153      	cbz	r3, ed76 <smp_pairing_req+0x3da>
	    bt_auth && bt_auth->pairing_confirm) {
    ed60:	695b      	ldr	r3, [r3, #20]
    ed62:	b143      	cbz	r3, ed76 <smp_pairing_req+0x3da>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    ed64:	4628      	mov	r0, r5
    ed66:	210a      	movs	r1, #10
    ed68:	f017 f866 	bl	25e38 <atomic_set_bit>
		bt_auth->pairing_confirm(conn);
    ed6c:	f8d8 3000 	ldr.w	r3, [r8]
    ed70:	4630      	mov	r0, r6
    ed72:	695b      	ldr	r3, [r3, #20]
    ed74:	e789      	b.n	ec8a <smp_pairing_req+0x2ee>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ed76:	210c      	movs	r1, #12
    ed78:	e7db      	b.n	ed32 <smp_pairing_req+0x396>
    ed7a:	bf00      	nop
    ed7c:	000f4240 	.word	0x000f4240
    ed80:	2000d744 	.word	0x2000d744
    ed84:	000278c0 	.word	0x000278c0
    ed88:	000279a8 	.word	0x000279a8
    ed8c:	0002d241 	.word	0x0002d241

0000ed90 <compute_and_check_and_send_slave_dhcheck>:
{
    ed90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	(void)memset(r, 0, sizeof(r));
    ed94:	2210      	movs	r2, #16
{
    ed96:	b0a3      	sub	sp, #140	; 0x8c
    ed98:	4604      	mov	r4, r0
	(void)memset(r, 0, sizeof(r));
    ed9a:	2100      	movs	r1, #0
    ed9c:	eb0d 0002 	add.w	r0, sp, r2
    eda0:	f015 fb8d 	bl	244be <memset>
	switch (smp->method) {
    eda4:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    eda8:	2905      	cmp	r1, #5
    edaa:	f200 809a 	bhi.w	eee2 <compute_and_check_and_send_slave_dhcheck+0x152>
    edae:	e8df f001 	tbb	[pc, r1]
    edb2:	0309      	.short	0x0309
    edb4:	8f980903 	.word	0x8f980903
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    edb8:	2204      	movs	r2, #4
    edba:	f504 71c8 	add.w	r1, r4, #400	; 0x190
    edbe:	a804      	add	r0, sp, #16
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    edc0:	f015 fb52 	bl	24468 <memcpy>
	uint8_t m[53] = { 0x00, /* counter */
    edc4:	4b79      	ldr	r3, [pc, #484]	; (efac <compute_and_check_and_send_slave_dhcheck+0x21c>)
		   &smp->chan.chan.conn->le.init_addr,
    edc6:	f8d4 9000 	ldr.w	r9, [r4]
	uint8_t m[53] = { 0x00, /* counter */
    edca:	aa14      	add	r2, sp, #80	; 0x50
    edcc:	f103 0630 	add.w	r6, r3, #48	; 0x30
    edd0:	6818      	ldr	r0, [r3, #0]
    edd2:	6859      	ldr	r1, [r3, #4]
    edd4:	4615      	mov	r5, r2
    edd6:	c503      	stmia	r5!, {r0, r1}
    edd8:	3308      	adds	r3, #8
    edda:	42b3      	cmp	r3, r6
    eddc:	462a      	mov	r2, r5
    edde:	d1f7      	bne.n	edd0 <compute_and_check_and_send_slave_dhcheck+0x40>
    ede0:	6818      	ldr	r0, [r3, #0]
    ede2:	791b      	ldrb	r3, [r3, #4]
    ede4:	6028      	str	r0, [r5, #0]
    ede6:	712b      	strb	r3, [r5, #4]
	sys_memcpy_swap(ws, w, 32);
    ede8:	ad0c      	add	r5, sp, #48	; 0x30
    edea:	2220      	movs	r2, #32
    edec:	f204 114f 	addw	r1, r4, #335	; 0x14f
    edf0:	4628      	mov	r0, r5
    edf2:	f016 ff6a 	bl	25cca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    edf6:	486e      	ldr	r0, [pc, #440]	; (efb0 <compute_and_check_and_send_slave_dhcheck+0x220>)
    edf8:	ab08      	add	r3, sp, #32
    edfa:	2220      	movs	r2, #32
    edfc:	4629      	mov	r1, r5
    edfe:	f016 ff7d 	bl	25cfc <bt_smp_aes_cmac>
	if (err) {
    ee02:	2800      	cmp	r0, #0
    ee04:	f040 80c9 	bne.w	ef9a <compute_and_check_and_send_slave_dhcheck+0x20a>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    ee08:	f104 07ef 	add.w	r7, r4, #239	; 0xef
	sys_memcpy_swap(m + 5, n1, 16);
    ee0c:	2210      	movs	r2, #16
    ee0e:	4639      	mov	r1, r7
    ee10:	f10d 0055 	add.w	r0, sp, #85	; 0x55
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    ee14:	f104 08df 	add.w	r8, r4, #223	; 0xdf
	sys_memcpy_swap(m + 5, n1, 16);
    ee18:	f016 ff57 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(m + 21, n2, 16);
    ee1c:	2210      	movs	r2, #16
    ee1e:	4641      	mov	r1, r8
    ee20:	f10d 0065 	add.w	r0, sp, #101	; 0x65
    ee24:	f016 ff51 	bl	25cca <sys_memcpy_swap>
	m[37] = a1->type;
    ee28:	f899 308f 	ldrb.w	r3, [r9, #143]	; 0x8f
    ee2c:	f88d 3075 	strb.w	r3, [sp, #117]	; 0x75
	sys_memcpy_swap(m + 38, a1->a.val, 6);
    ee30:	2206      	movs	r2, #6
    ee32:	f109 0190 	add.w	r1, r9, #144	; 0x90
    ee36:	f10d 0076 	add.w	r0, sp, #118	; 0x76
    ee3a:	f016 ff46 	bl	25cca <sys_memcpy_swap>
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    ee3e:	f204 167f 	addw	r6, r4, #383	; 0x17f
	m[44] = a2->type;
    ee42:	f899 3096 	ldrb.w	r3, [r9, #150]	; 0x96
    ee46:	f88d 307c 	strb.w	r3, [sp, #124]	; 0x7c
	sys_memcpy_swap(m + 45, a2->a.val, 6);
    ee4a:	2206      	movs	r2, #6
    ee4c:	f109 0197 	add.w	r1, r9, #151	; 0x97
    ee50:	f10d 007d 	add.w	r0, sp, #125	; 0x7d
    ee54:	f016 ff39 	bl	25cca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    ee58:	4633      	mov	r3, r6
    ee5a:	2235      	movs	r2, #53	; 0x35
    ee5c:	a914      	add	r1, sp, #80	; 0x50
    ee5e:	a808      	add	r0, sp, #32
    ee60:	f016 ff4c 	bl	25cfc <bt_smp_aes_cmac>
	if (err) {
    ee64:	2800      	cmp	r0, #0
    ee66:	f040 8098 	bne.w	ef9a <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(mackey, 16);
    ee6a:	2110      	movs	r1, #16
    ee6c:	4630      	mov	r0, r6
    ee6e:	f016 ff36 	bl	25cde <sys_mem_swap>
		   smp->tk)) {
    ee72:	f104 09ff 	add.w	r9, r4, #255	; 0xff
	m[0] = 0x01;
    ee76:	2301      	movs	r3, #1
    ee78:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    ee7c:	2235      	movs	r2, #53	; 0x35
    ee7e:	464b      	mov	r3, r9
    ee80:	a914      	add	r1, sp, #80	; 0x50
    ee82:	a808      	add	r0, sp, #32
    ee84:	f016 ff3a 	bl	25cfc <bt_smp_aes_cmac>
	if (err) {
    ee88:	2800      	cmp	r0, #0
    ee8a:	f040 8086 	bne.w	ef9a <compute_and_check_and_send_slave_dhcheck+0x20a>
	sys_mem_swap(ltk, 16);
    ee8e:	2110      	movs	r1, #16
    ee90:	4648      	mov	r0, r9
    ee92:	f016 ff24 	bl	25cde <sys_mem_swap>
		   &smp->chan.chan.conn->le.resp_addr,
    ee96:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    ee98:	a914      	add	r1, sp, #80	; 0x50
		   &smp->chan.chan.conn->le.resp_addr,
    ee9a:	f852 3bc9 	ldr.w	r3, [r2], #201
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    ee9e:	9103      	str	r1, [sp, #12]
		   &smp->chan.chan.conn->le.init_addr, e)) {
    eea0:	f103 018f 	add.w	r1, r3, #143	; 0x8f
		   &smp->chan.chan.conn->le.resp_addr,
    eea4:	3396      	adds	r3, #150	; 0x96
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    eea6:	e9cd 2300 	strd	r2, r3, [sp]
    eeaa:	9102      	str	r1, [sp, #8]
    eeac:	ab04      	add	r3, sp, #16
    eeae:	463a      	mov	r2, r7
    eeb0:	4641      	mov	r1, r8
    eeb2:	4630      	mov	r0, r6
    eeb4:	f016 ff64 	bl	25d80 <smp_f6>
    eeb8:	b1f8      	cbz	r0, eefa <compute_and_check_and_send_slave_dhcheck+0x16a>
    eeba:	493e      	ldr	r1, [pc, #248]	; (efb4 <compute_and_check_and_send_slave_dhcheck+0x224>)
    eebc:	4b3e      	ldr	r3, [pc, #248]	; (efb8 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate local DHKey check failed");
    eebe:	483f      	ldr	r0, [pc, #252]	; (efbc <compute_and_check_and_send_slave_dhcheck+0x22c>)
    eec0:	1ac9      	subs	r1, r1, r3
    eec2:	08c9      	lsrs	r1, r1, #3
    eec4:	0189      	lsls	r1, r1, #6
    eec6:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate LTK failed");
    eeca:	f013 fac1 	bl	22450 <log_0>
    eece:	e012      	b.n	eef6 <compute_and_check_and_send_slave_dhcheck+0x166>
		if (smp->oobd_remote) {
    eed0:	f8d4 119c 	ldr.w	r1, [r4, #412]	; 0x19c
    eed4:	2900      	cmp	r1, #0
    eed6:	f43f af75 	beq.w	edc4 <compute_and_check_and_send_slave_dhcheck+0x34>
			memcpy(r, smp->oobd_remote->r, sizeof(r));
    eeda:	2210      	movs	r2, #16
    eedc:	eb0d 0002 	add.w	r0, sp, r2
    eee0:	e76e      	b.n	edc0 <compute_and_check_and_send_slave_dhcheck+0x30>
    eee2:	4a34      	ldr	r2, [pc, #208]	; (efb4 <compute_and_check_and_send_slave_dhcheck+0x224>)
    eee4:	4b34      	ldr	r3, [pc, #208]	; (efb8 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    eee6:	4836      	ldr	r0, [pc, #216]	; (efc0 <compute_and_check_and_send_slave_dhcheck+0x230>)
    eee8:	1ad2      	subs	r2, r2, r3
    eeea:	08d2      	lsrs	r2, r2, #3
    eeec:	0192      	lsls	r2, r2, #6
    eeee:	f042 0201 	orr.w	r2, r2, #1
    eef2:	f013 faba 	bl	2246a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    eef6:	2008      	movs	r0, #8
    eef8:	e04a      	b.n	ef90 <compute_and_check_and_send_slave_dhcheck+0x200>
	if (smp->method == LE_SC_OOB) {
    eefa:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
    eefe:	2b05      	cmp	r3, #5
    ef00:	d107      	bne.n	ef12 <compute_and_check_and_send_slave_dhcheck+0x182>
		if (smp->oobd_local) {
    ef02:	f8d4 1198 	ldr.w	r1, [r4, #408]	; 0x198
			memcpy(r, smp->oobd_local->r, sizeof(r));
    ef06:	2210      	movs	r2, #16
    ef08:	eb0d 0002 	add.w	r0, sp, r2
		if (smp->oobd_local) {
    ef0c:	b1d9      	cbz	r1, ef46 <compute_and_check_and_send_slave_dhcheck+0x1b6>
			memcpy(r, smp->oobd_local->r, sizeof(r));
    ef0e:	f015 faab 	bl	24468 <memcpy>
		   &smp->chan.chan.conn->le.init_addr,
    ef12:	4622      	mov	r2, r4
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ef14:	4630      	mov	r0, r6
		   &smp->chan.chan.conn->le.init_addr,
    ef16:	f852 3bc2 	ldr.w	r3, [r2], #194
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ef1a:	9503      	str	r5, [sp, #12]
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    ef1c:	f103 0196 	add.w	r1, r3, #150	; 0x96
		   &smp->chan.chan.conn->le.init_addr,
    ef20:	338f      	adds	r3, #143	; 0x8f
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    ef22:	e9cd 2300 	strd	r2, r3, [sp]
    ef26:	9102      	str	r1, [sp, #8]
    ef28:	ab04      	add	r3, sp, #16
    ef2a:	4642      	mov	r2, r8
    ef2c:	4639      	mov	r1, r7
    ef2e:	f016 ff27 	bl	25d80 <smp_f6>
    ef32:	b158      	cbz	r0, ef4c <compute_and_check_and_send_slave_dhcheck+0x1bc>
    ef34:	491f      	ldr	r1, [pc, #124]	; (efb4 <compute_and_check_and_send_slave_dhcheck+0x224>)
    ef36:	4b20      	ldr	r3, [pc, #128]	; (efb8 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate remote DHKey check failed");
    ef38:	4822      	ldr	r0, [pc, #136]	; (efc4 <compute_and_check_and_send_slave_dhcheck+0x234>)
    ef3a:	1ac9      	subs	r1, r1, r3
    ef3c:	08c9      	lsrs	r1, r1, #3
    ef3e:	0189      	lsls	r1, r1, #6
    ef40:	f041 0101 	orr.w	r1, r1, #1
    ef44:	e7c1      	b.n	eeca <compute_and_check_and_send_slave_dhcheck+0x13a>
			memset(r, 0, sizeof(r));
    ef46:	f015 faba 	bl	244be <memset>
    ef4a:	e7e2      	b.n	ef12 <compute_and_check_and_send_slave_dhcheck+0x182>
	if (memcmp(smp->e, re, 16)) {
    ef4c:	4629      	mov	r1, r5
    ef4e:	2210      	movs	r2, #16
    ef50:	f204 106f 	addw	r0, r4, #367	; 0x16f
    ef54:	f015 fa77 	bl	24446 <memcmp>
    ef58:	4605      	mov	r5, r0
    ef5a:	b9e0      	cbnz	r0, ef96 <compute_and_check_and_send_slave_dhcheck+0x206>
	buf = smp_create_pdu(smp, BT_SMP_DHKEY_CHECK, sizeof(*req));
    ef5c:	210d      	movs	r1, #13
    ef5e:	4620      	mov	r0, r4
    ef60:	f016 ff8a 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!buf) {
    ef64:	4606      	mov	r6, r0
    ef66:	2800      	cmp	r0, #0
    ef68:	d0c5      	beq.n	eef6 <compute_and_check_and_send_slave_dhcheck+0x166>
    ef6a:	2110      	movs	r1, #16
    ef6c:	3008      	adds	r0, #8
    ef6e:	f017 facf 	bl	26510 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    ef72:	2210      	movs	r2, #16
    ef74:	a914      	add	r1, sp, #80	; 0x50
    ef76:	f015 fa77 	bl	24468 <memcpy>
	smp_send(smp, buf, NULL, NULL);
    ef7a:	462a      	mov	r2, r5
    ef7c:	4631      	mov	r1, r6
    ef7e:	4620      	mov	r0, r4
    ef80:	f7ff fc32 	bl	e7e8 <smp_send.constprop.0>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    ef84:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    ef88:	2101      	movs	r1, #1
    ef8a:	f016 ff55 	bl	25e38 <atomic_set_bit>
	return 0;
    ef8e:	4628      	mov	r0, r5
}
    ef90:	b023      	add	sp, #140	; 0x8c
    ef92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    ef96:	200b      	movs	r0, #11
    ef98:	e7fa      	b.n	ef90 <compute_and_check_and_send_slave_dhcheck+0x200>
    ef9a:	4906      	ldr	r1, [pc, #24]	; (efb4 <compute_and_check_and_send_slave_dhcheck+0x224>)
    ef9c:	4b06      	ldr	r3, [pc, #24]	; (efb8 <compute_and_check_and_send_slave_dhcheck+0x228>)
		BT_ERR("Calculate LTK failed");
    ef9e:	480a      	ldr	r0, [pc, #40]	; (efc8 <compute_and_check_and_send_slave_dhcheck+0x238>)
    efa0:	1ac9      	subs	r1, r1, r3
    efa2:	08c9      	lsrs	r1, r1, #3
    efa4:	0189      	lsls	r1, r1, #6
    efa6:	f041 0101 	orr.w	r1, r1, #1
    efaa:	e78e      	b.n	eeca <compute_and_check_and_send_slave_dhcheck+0x13a>
    efac:	00027b04 	.word	0x00027b04
    efb0:	0002d5e7 	.word	0x0002d5e7
    efb4:	000279a8 	.word	0x000279a8
    efb8:	000278c0 	.word	0x000278c0
    efbc:	0002d25d 	.word	0x0002d25d
    efc0:	0002d241 	.word	0x0002d241
    efc4:	0002d280 	.word	0x0002d280
    efc8:	0002d2a4 	.word	0x0002d2a4

0000efcc <smp_send_pairing_confirm>:
{
    efcc:	b573      	push	{r0, r1, r4, r5, r6, lr}
	switch (smp->method) {
    efce:	f890 40c0 	ldrb.w	r4, [r0, #192]	; 0xc0
    efd2:	2c02      	cmp	r4, #2
{
    efd4:	4606      	mov	r6, r0
	switch (smp->method) {
    efd6:	d823      	bhi.n	f020 <smp_send_pairing_confirm+0x54>
    efd8:	b144      	cbz	r4, efec <smp_send_pairing_confirm+0x20>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    efda:	f890 3194 	ldrb.w	r3, [r0, #404]	; 0x194
    efde:	f8d0 4190 	ldr.w	r4, [r0, #400]	; 0x190
    efe2:	40dc      	lsrs	r4, r3
    efe4:	f004 0401 	and.w	r4, r4, #1
		r |= 0x80;
    efe8:	f044 0480 	orr.w	r4, r4, #128	; 0x80
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    efec:	2103      	movs	r1, #3
    efee:	4630      	mov	r0, r6
    eff0:	f016 ff42 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!buf) {
    eff4:	4605      	mov	r5, r0
    eff6:	b300      	cbz	r0, f03a <smp_send_pairing_confirm+0x6e>
    eff8:	2110      	movs	r1, #16
    effa:	3008      	adds	r0, #8
    effc:	f017 fa88 	bl	26510 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    f000:	9000      	str	r0, [sp, #0]
    f002:	4816      	ldr	r0, [pc, #88]	; (f05c <smp_send_pairing_confirm+0x90>)
    f004:	4623      	mov	r3, r4
    f006:	6800      	ldr	r0, [r0, #0]
    f008:	f106 02df 	add.w	r2, r6, #223	; 0xdf
    f00c:	f206 110f 	addw	r1, r6, #271	; 0x10f
    f010:	f016 fe90 	bl	25d34 <smp_f4>
    f014:	4604      	mov	r4, r0
    f016:	b1a0      	cbz	r0, f042 <smp_send_pairing_confirm+0x76>
		net_buf_unref(buf);
    f018:	4628      	mov	r0, r5
    f01a:	f00e fb47 	bl	1d6ac <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    f01e:	e00c      	b.n	f03a <smp_send_pairing_confirm+0x6e>
	switch (smp->method) {
    f020:	2c03      	cmp	r4, #3
    f022:	d00c      	beq.n	f03e <smp_send_pairing_confirm+0x72>
    f024:	4a0e      	ldr	r2, [pc, #56]	; (f060 <smp_send_pairing_confirm+0x94>)
    f026:	4b0f      	ldr	r3, [pc, #60]	; (f064 <smp_send_pairing_confirm+0x98>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f028:	480f      	ldr	r0, [pc, #60]	; (f068 <smp_send_pairing_confirm+0x9c>)
    f02a:	1ad2      	subs	r2, r2, r3
    f02c:	08d2      	lsrs	r2, r2, #3
    f02e:	0192      	lsls	r2, r2, #6
    f030:	f042 0201 	orr.w	r2, r2, #1
    f034:	4621      	mov	r1, r4
    f036:	f013 fa18 	bl	2246a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    f03a:	2008      	movs	r0, #8
    f03c:	e00c      	b.n	f058 <smp_send_pairing_confirm+0x8c>
	switch (smp->method) {
    f03e:	2400      	movs	r4, #0
    f040:	e7d4      	b.n	efec <smp_send_pairing_confirm+0x20>
	smp_send(smp, buf, NULL, NULL);
    f042:	4602      	mov	r2, r0
    f044:	4629      	mov	r1, r5
    f046:	4630      	mov	r0, r6
    f048:	f7ff fbce 	bl	e7e8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f04c:	f106 00bc 	add.w	r0, r6, #188	; 0xbc
    f050:	4621      	mov	r1, r4
    f052:	f016 fee2 	bl	25e1a <atomic_clear_bit>
	return 0;
    f056:	4620      	mov	r0, r4
}
    f058:	b002      	add	sp, #8
    f05a:	bd70      	pop	{r4, r5, r6, pc}
    f05c:	2000d7d8 	.word	0x2000d7d8
    f060:	000279a8 	.word	0x000279a8
    f064:	000278c0 	.word	0x000278c0
    f068:	0002d241 	.word	0x0002d241

0000f06c <smp_public_key_slave>:
{
    f06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f070:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
{
    f074:	4604      	mov	r4, r0
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f076:	210e      	movs	r1, #14
    f078:	4630      	mov	r0, r6
    f07a:	f016 fef4 	bl	25e66 <atomic_test_bit>
    f07e:	b998      	cbnz	r0, f0a8 <smp_public_key_slave+0x3c>
	    memcmp(smp->pkey, sc_public_key, 64) == 0) {
    f080:	4b4c      	ldr	r3, [pc, #304]	; (f1b4 <smp_public_key_slave+0x148>)
    f082:	2240      	movs	r2, #64	; 0x40
    f084:	6819      	ldr	r1, [r3, #0]
    f086:	f204 100f 	addw	r0, r4, #271	; 0x10f
    f08a:	f015 f9dc 	bl	24446 <memcmp>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY) &&
    f08e:	b958      	cbnz	r0, f0a8 <smp_public_key_slave+0x3c>
    f090:	4949      	ldr	r1, [pc, #292]	; (f1b8 <smp_public_key_slave+0x14c>)
    f092:	4b4a      	ldr	r3, [pc, #296]	; (f1bc <smp_public_key_slave+0x150>)
		BT_WARN("Remote is using identical public key");
    f094:	484a      	ldr	r0, [pc, #296]	; (f1c0 <smp_public_key_slave+0x154>)
    f096:	1ac9      	subs	r1, r1, r3
    f098:	08c9      	lsrs	r1, r1, #3
    f09a:	0189      	lsls	r1, r1, #6
    f09c:	f041 0102 	orr.w	r1, r1, #2
    f0a0:	f013 f9d6 	bl	22450 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    f0a4:	2008      	movs	r0, #8
    f0a6:	e031      	b.n	f10c <smp_public_key_slave+0xa0>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_PUBLIC_KEY, sizeof(*req));
    f0a8:	210c      	movs	r1, #12
    f0aa:	4620      	mov	r0, r4
    f0ac:	f016 fee4 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f0b0:	4605      	mov	r5, r0
    f0b2:	2800      	cmp	r0, #0
    f0b4:	d0f6      	beq.n	f0a4 <smp_public_key_slave+0x38>
    f0b6:	2140      	movs	r1, #64	; 0x40
    f0b8:	3008      	adds	r0, #8
    f0ba:	f017 fa29 	bl	26510 <net_buf_simple_add>
	memcpy(req->x, sc_public_key, sizeof(req->x));
    f0be:	f8df 80f4 	ldr.w	r8, [pc, #244]	; f1b4 <smp_public_key_slave+0x148>
    f0c2:	2220      	movs	r2, #32
    f0c4:	f8d8 1000 	ldr.w	r1, [r8]
    f0c8:	4607      	mov	r7, r0
    f0ca:	f015 f9cd 	bl	24468 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    f0ce:	f8d8 1000 	ldr.w	r1, [r8]
    f0d2:	2220      	movs	r2, #32
    f0d4:	4411      	add	r1, r2
    f0d6:	18b8      	adds	r0, r7, r2
    f0d8:	f015 f9c6 	bl	24468 <memcpy>
	smp_send(smp, req_buf, NULL, NULL);
    f0dc:	4629      	mov	r1, r5
    f0de:	2200      	movs	r2, #0
    f0e0:	4620      	mov	r0, r4
    f0e2:	f7ff fb81 	bl	e7e8 <smp_send.constprop.0>
	switch (smp->method) {
    f0e6:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f0ea:	2905      	cmp	r1, #5
    f0ec:	d854      	bhi.n	f198 <smp_public_key_slave+0x12c>
    f0ee:	e8df f001 	tbb	[pc, r1]
    f0f2:	3603      	.short	0x3603
    f0f4:	5153030f 	.word	0x5153030f
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f0f8:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f0fc:	2104      	movs	r1, #4
    f0fe:	f016 fe9b 	bl	25e38 <atomic_set_bit>
		err = smp_send_pairing_confirm(smp);
    f102:	4620      	mov	r0, r4
    f104:	f7ff ff62 	bl	efcc <smp_send_pairing_confirm>
		if (err) {
    f108:	2800      	cmp	r0, #0
    f10a:	d036      	beq.n	f17a <smp_public_key_slave+0x10e>
}
    f10c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    f110:	2104      	movs	r1, #4
    f112:	f504 70c8 	add.w	r0, r4, #400	; 0x190
    f116:	f004 f9fd 	bl	13514 <bt_rand>
    f11a:	2800      	cmp	r0, #0
    f11c:	d1c2      	bne.n	f0a4 <smp_public_key_slave+0x38>
		smp->passkey %= 1000000;
    f11e:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
    f122:	4a28      	ldr	r2, [pc, #160]	; (f1c4 <smp_public_key_slave+0x158>)
	if (bt_auth && bt_auth->passkey_display) {
    f124:	4d28      	ldr	r5, [pc, #160]	; (f1c8 <smp_public_key_slave+0x15c>)
		smp->passkey %= 1000000;
    f126:	fbb3 f1f2 	udiv	r1, r3, r2
    f12a:	fb02 3311 	mls	r3, r2, r1, r3
    f12e:	f8c4 3190 	str.w	r3, [r4, #400]	; 0x190
	if (bt_auth && bt_auth->passkey_display) {
    f132:	682b      	ldr	r3, [r5, #0]
	smp->passkey_round = 0U;
    f134:	f884 0194 	strb.w	r0, [r4, #404]	; 0x194
	if (bt_auth && bt_auth->passkey_display) {
    f138:	b15b      	cbz	r3, f152 <smp_public_key_slave+0xe6>
    f13a:	681b      	ldr	r3, [r3, #0]
    f13c:	b14b      	cbz	r3, f152 <smp_public_key_slave+0xe6>
		atomic_set_bit(smp->flags, SMP_FLAG_DISPLAY);
    f13e:	210b      	movs	r1, #11
    f140:	4630      	mov	r0, r6
    f142:	f016 fe79 	bl	25e38 <atomic_set_bit>
		bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    f146:	682b      	ldr	r3, [r5, #0]
    f148:	f8d4 1190 	ldr.w	r1, [r4, #400]	; 0x190
    f14c:	681b      	ldr	r3, [r3, #0]
    f14e:	6820      	ldr	r0, [r4, #0]
    f150:	4798      	blx	r3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f152:	2103      	movs	r1, #3
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f154:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f158:	f016 fe6e 	bl	25e38 <atomic_set_bit>
		break;
    f15c:	e00d      	b.n	f17a <smp_public_key_slave+0x10e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    f15e:	2103      	movs	r1, #3
    f160:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f164:	f016 fe68 	bl	25e38 <atomic_set_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f168:	4630      	mov	r0, r6
    f16a:	210a      	movs	r1, #10
    f16c:	f016 fe64 	bl	25e38 <atomic_set_bit>
		bt_auth->passkey_entry(smp->chan.chan.conn);
    f170:	4b15      	ldr	r3, [pc, #84]	; (f1c8 <smp_public_key_slave+0x15c>)
    f172:	6820      	ldr	r0, [r4, #0]
    f174:	681b      	ldr	r3, [r3, #0]
    f176:	685b      	ldr	r3, [r3, #4]
    f178:	4798      	blx	r3
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    f17a:	4630      	mov	r0, r6
    f17c:	2107      	movs	r1, #7
    f17e:	f016 fe5b 	bl	25e38 <atomic_set_bit>
	if (!smp_find(SMP_FLAG_DHKEY_GEN)) {
    f182:	2008      	movs	r0, #8
    f184:	f7ff fb8c 	bl	e8a0 <smp_find>
    f188:	b988      	cbnz	r0, f1ae <smp_public_key_slave+0x142>
		return smp_dhkey_generate(smp);
    f18a:	4620      	mov	r0, r4
}
    f18c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		return smp_dhkey_generate(smp);
    f190:	f7ff bb60 	b.w	e854 <smp_dhkey_generate>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f194:	2104      	movs	r1, #4
    f196:	e7dd      	b.n	f154 <smp_public_key_slave+0xe8>
    f198:	4b08      	ldr	r3, [pc, #32]	; (f1bc <smp_public_key_slave+0x150>)
    f19a:	4a07      	ldr	r2, [pc, #28]	; (f1b8 <smp_public_key_slave+0x14c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f19c:	480b      	ldr	r0, [pc, #44]	; (f1cc <smp_public_key_slave+0x160>)
    f19e:	1ad2      	subs	r2, r2, r3
    f1a0:	08d2      	lsrs	r2, r2, #3
    f1a2:	0192      	lsls	r2, r2, #6
    f1a4:	f042 0201 	orr.w	r2, r2, #1
    f1a8:	f013 f95f 	bl	2246a <log_1>
    f1ac:	e77a      	b.n	f0a4 <smp_public_key_slave+0x38>
	return 0;
    f1ae:	2000      	movs	r0, #0
    f1b0:	e7ac      	b.n	f10c <smp_public_key_slave+0xa0>
    f1b2:	bf00      	nop
    f1b4:	2000d7d8 	.word	0x2000d7d8
    f1b8:	000279a8 	.word	0x000279a8
    f1bc:	000278c0 	.word	0x000278c0
    f1c0:	0002d2b9 	.word	0x0002d2b9
    f1c4:	000f4240 	.word	0x000f4240
    f1c8:	2000d744 	.word	0x2000d744
    f1cc:	0002d241 	.word	0x0002d241

0000f1d0 <smp_public_key>:
{
    f1d0:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_public_key *req = (void *)buf->data;
    f1d2:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    f1d4:	f200 150f 	addw	r5, r0, #271	; 0x10f
{
    f1d8:	4604      	mov	r4, r0
	memcpy(smp->pkey, req->x, 32);
    f1da:	2220      	movs	r2, #32
    f1dc:	4631      	mov	r1, r6
    f1de:	4628      	mov	r0, r5
    f1e0:	f015 f942 	bl	24468 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    f1e4:	2220      	movs	r2, #32
    f1e6:	18b1      	adds	r1, r6, r2
    f1e8:	f204 102f 	addw	r0, r4, #303	; 0x12f
    f1ec:	f015 f93c 	bl	24468 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    f1f0:	491e      	ldr	r1, [pc, #120]	; (f26c <smp_public_key+0x9c>)
    f1f2:	2240      	movs	r2, #64	; 0x40
    f1f4:	4628      	mov	r0, r5
    f1f6:	f015 f926 	bl	24446 <memcmp>
    f1fa:	b148      	cbz	r0, f210 <smp_public_key+0x40>
	if (!sc_public_key) {
    f1fc:	4b1c      	ldr	r3, [pc, #112]	; (f270 <smp_public_key+0xa0>)
    f1fe:	681d      	ldr	r5, [r3, #0]
    f200:	bb75      	cbnz	r5, f260 <smp_public_key+0x90>
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    f202:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f206:	2106      	movs	r1, #6
    f208:	f016 fe16 	bl	25e38 <atomic_set_bit>
		return 0;
    f20c:	4628      	mov	r0, r5
    f20e:	e026      	b.n	f25e <smp_public_key+0x8e>
    f210:	4b18      	ldr	r3, [pc, #96]	; (f274 <smp_public_key+0xa4>)
    f212:	4919      	ldr	r1, [pc, #100]	; (f278 <smp_public_key+0xa8>)
		BT_INFO("Remote is using Debug Public key");
    f214:	4819      	ldr	r0, [pc, #100]	; (f27c <smp_public_key+0xac>)
    f216:	1ac9      	subs	r1, r1, r3
    f218:	08c9      	lsrs	r1, r1, #3
    f21a:	0189      	lsls	r1, r1, #6
    f21c:	f041 0103 	orr.w	r1, r1, #3
    f220:	f013 f916 	bl	22450 <log_0>
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    f224:	210e      	movs	r1, #14
    f226:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f22a:	f016 fe05 	bl	25e38 <atomic_set_bit>
		if (!update_debug_keys_check(smp)) {
    f22e:	6825      	ldr	r5, [r4, #0]
	if (!conn->le.keys) {
    f230:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f234:	b933      	cbnz	r3, f244 <smp_public_key+0x74>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f236:	7a28      	ldrb	r0, [r5, #8]
    f238:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f23c:	f001 f83a 	bl	102b4 <bt_keys_get_addr>
    f240:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f244:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f248:	2b00      	cmp	r3, #0
    f24a:	d0d7      	beq.n	f1fc <smp_public_key+0x2c>
    f24c:	89da      	ldrh	r2, [r3, #14]
    f24e:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f252:	2a00      	cmp	r2, #0
    f254:	d0d2      	beq.n	f1fc <smp_public_key+0x2c>
	if (conn->le.keys->flags & BT_KEYS_DEBUG) {
    f256:	7b5b      	ldrb	r3, [r3, #13]
    f258:	079b      	lsls	r3, r3, #30
    f25a:	d4cf      	bmi.n	f1fc <smp_public_key+0x2c>
			return BT_SMP_ERR_AUTH_REQUIREMENTS;
    f25c:	2003      	movs	r0, #3
}
    f25e:	bd70      	pop	{r4, r5, r6, pc}
	err = smp_public_key_slave(smp);
    f260:	4620      	mov	r0, r4
}
    f262:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = smp_public_key_slave(smp);
    f266:	f7ff bf01 	b.w	f06c <smp_public_key_slave>
    f26a:	bf00      	nop
    f26c:	0002d5f7 	.word	0x0002d5f7
    f270:	2000d7d8 	.word	0x2000d7d8
    f274:	000278c0 	.word	0x000278c0
    f278:	000279a8 	.word	0x000279a8
    f27c:	0002d2de 	.word	0x0002d2de

0000f280 <bt_smp_connected>:
{
    f280:	b510      	push	{r4, lr}
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
    f282:	2230      	movs	r2, #48	; 0x30
    f284:	4604      	mov	r4, r0
    f286:	2100      	movs	r1, #0
    f288:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
    f28c:	f015 f917 	bl	244be <memset>
    f290:	4b03      	ldr	r3, [pc, #12]	; (f2a0 <bt_smp_connected+0x20>)
    f292:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
	smp_reset(smp);
    f296:	4620      	mov	r0, r4
}
    f298:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	smp_reset(smp);
    f29c:	f016 be7f 	b.w	25f9e <smp_reset>
    f2a0:	0001012d 	.word	0x0001012d

0000f2a4 <smp_pairing_confirm>:
{
    f2a4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing_confirm *req = (void *)buf->data;
    f2a6:	688e      	ldr	r6, [r1, #8]
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f2a8:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
{
    f2ac:	4604      	mov	r4, r0
	atomic_clear_bit(smp->flags, SMP_FLAG_DISPLAY);
    f2ae:	210b      	movs	r1, #11
    f2b0:	4628      	mov	r0, r5
    f2b2:	f016 fdb2 	bl	25e1a <atomic_clear_bit>
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    f2b6:	4631      	mov	r1, r6
    f2b8:	2210      	movs	r2, #16
    f2ba:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f2be:	f015 f8d3 	bl	24468 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f2c2:	2105      	movs	r1, #5
    f2c4:	4628      	mov	r0, r5
    f2c6:	f016 fdce 	bl	25e66 <atomic_test_bit>
    f2ca:	b920      	cbnz	r0, f2d6 <smp_pairing_confirm+0x32>
		return legacy_pairing_confirm(smp);
    f2cc:	4620      	mov	r0, r4
}
    f2ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return legacy_pairing_confirm(smp);
    f2d2:	f016 bee4 	b.w	2609e <legacy_pairing_confirm>
	switch (smp->method) {
    f2d6:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f2da:	2901      	cmp	r1, #1
    f2dc:	d00b      	beq.n	f2f6 <smp_pairing_confirm+0x52>
    f2de:	2902      	cmp	r1, #2
    f2e0:	d115      	bne.n	f30e <smp_pairing_confirm+0x6a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    f2e2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f2e6:	2104      	movs	r1, #4
    f2e8:	f016 fda6 	bl	25e38 <atomic_set_bit>
		return smp_send_pairing_confirm(smp);
    f2ec:	4620      	mov	r0, r4
}
    f2ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return smp_send_pairing_confirm(smp);
    f2f2:	f7ff be6b 	b.w	efcc <smp_send_pairing_confirm>
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    f2f6:	210a      	movs	r1, #10
    f2f8:	4628      	mov	r0, r5
    f2fa:	f016 fdb4 	bl	25e66 <atomic_test_bit>
    f2fe:	2800      	cmp	r0, #0
    f300:	d0ef      	beq.n	f2e2 <smp_pairing_confirm+0x3e>
			atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    f302:	4628      	mov	r0, r5
    f304:	2100      	movs	r1, #0
    f306:	f016 fd97 	bl	25e38 <atomic_set_bit>
			return 0;
    f30a:	2000      	movs	r0, #0
}
    f30c:	bd70      	pop	{r4, r5, r6, pc}
    f30e:	4b06      	ldr	r3, [pc, #24]	; (f328 <smp_pairing_confirm+0x84>)
    f310:	4a06      	ldr	r2, [pc, #24]	; (f32c <smp_pairing_confirm+0x88>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f312:	4807      	ldr	r0, [pc, #28]	; (f330 <smp_pairing_confirm+0x8c>)
    f314:	1ad2      	subs	r2, r2, r3
    f316:	08d2      	lsrs	r2, r2, #3
    f318:	0192      	lsls	r2, r2, #6
    f31a:	f042 0201 	orr.w	r2, r2, #1
    f31e:	f013 f8a4 	bl	2246a <log_1>
		return BT_SMP_ERR_UNSPECIFIED;
    f322:	2008      	movs	r0, #8
    f324:	e7f2      	b.n	f30c <smp_pairing_confirm+0x68>
    f326:	bf00      	nop
    f328:	000278c0 	.word	0x000278c0
    f32c:	000279a8 	.word	0x000279a8
    f330:	0002d241 	.word	0x0002d241

0000f334 <smp_pairing_random>:
{
    f334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    f338:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f33a:	f100 07ef 	add.w	r7, r0, #239	; 0xef
    f33e:	6889      	ldr	r1, [r1, #8]
{
    f340:	b09e      	sub	sp, #120	; 0x78
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f342:	2210      	movs	r2, #16
    f344:	4638      	mov	r0, r7
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f346:	f104 06bc 	add.w	r6, r4, #188	; 0xbc
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    f34a:	f015 f88d 	bl	24468 <memcpy>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    f34e:	2105      	movs	r1, #5
    f350:	4630      	mov	r0, r6
    f352:	f016 fd88 	bl	25e66 <atomic_test_bit>
    f356:	2800      	cmp	r0, #0
    f358:	d146      	bne.n	f3e8 <smp_pairing_random+0xb4>
	struct bt_conn *conn = smp->chan.chan.conn;
    f35a:	46a0      	mov	r8, r4
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f35c:	ad0a      	add	r5, sp, #40	; 0x28
	struct bt_conn *conn = smp->chan.chan.conn;
    f35e:	f858 3bff 	ldr.w	r3, [r8], #255
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f362:	9502      	str	r5, [sp, #8]
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    f364:	f103 0296 	add.w	r2, r3, #150	; 0x96
    f368:	338f      	adds	r3, #143	; 0x8f
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    f36a:	9201      	str	r2, [sp, #4]
    f36c:	9300      	str	r3, [sp, #0]
    f36e:	f104 02c1 	add.w	r2, r4, #193	; 0xc1
    f372:	f104 03c8 	add.w	r3, r4, #200	; 0xc8
    f376:	4639      	mov	r1, r7
    f378:	4640      	mov	r0, r8
    f37a:	f016 fe35 	bl	25fe8 <smp_c1>
	if (err) {
    f37e:	bb18      	cbnz	r0, f3c8 <smp_pairing_random+0x94>
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    f380:	2210      	movs	r2, #16
    f382:	4629      	mov	r1, r5
    f384:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f388:	f015 f85d 	bl	24446 <memcmp>
    f38c:	2800      	cmp	r0, #0
    f38e:	f040 8096 	bne.w	f4be <smp_pairing_random+0x18a>
	memcpy(out, r2, 8);
    f392:	2208      	movs	r2, #8
    f394:	4639      	mov	r1, r7
    f396:	4628      	mov	r0, r5
    f398:	f015 f866 	bl	24468 <memcpy>
	memcpy(out + 8, r1, 8);
    f39c:	2208      	movs	r2, #8
    f39e:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f3a2:	a80c      	add	r0, sp, #48	; 0x30
    f3a4:	f015 f860 	bl	24468 <memcpy>
	return bt_encrypt_le(k, out, out);
    f3a8:	462a      	mov	r2, r5
    f3aa:	4629      	mov	r1, r5
    f3ac:	4640      	mov	r0, r8
    f3ae:	f004 f8b3 	bl	13518 <bt_encrypt_le>
		if (err) {
    f3b2:	b158      	cbz	r0, f3cc <smp_pairing_random+0x98>
    f3b4:	4976      	ldr	r1, [pc, #472]	; (f590 <smp_pairing_random+0x25c>)
    f3b6:	4b77      	ldr	r3, [pc, #476]	; (f594 <smp_pairing_random+0x260>)
			BT_ERR("Calculate STK failed");
    f3b8:	4877      	ldr	r0, [pc, #476]	; (f598 <smp_pairing_random+0x264>)
    f3ba:	1ac9      	subs	r1, r1, r3
    f3bc:	08c9      	lsrs	r1, r1, #3
    f3be:	0189      	lsls	r1, r1, #6
    f3c0:	f041 0101 	orr.w	r1, r1, #1
		BT_ERR("Calculate confirm failed");
    f3c4:	f013 f844 	bl	22450 <log_0>
		return BT_SMP_ERR_UNSPECIFIED;
    f3c8:	2508      	movs	r5, #8
    f3ca:	e079      	b.n	f4c0 <smp_pairing_random+0x18c>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    f3cc:	4629      	mov	r1, r5
    f3ce:	2210      	movs	r2, #16
    f3d0:	4640      	mov	r0, r8
    f3d2:	f015 f849 	bl	24468 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    f3d6:	2101      	movs	r1, #1
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f3d8:	4630      	mov	r0, r6
    f3da:	f016 fd2d 	bl	25e38 <atomic_set_bit>
	return smp_send_pairing_random(smp);
    f3de:	4620      	mov	r0, r4
    f3e0:	f016 fd83 	bl	25eea <smp_send_pairing_random>
    f3e4:	4605      	mov	r5, r0
    f3e6:	e06b      	b.n	f4c0 <smp_pairing_random+0x18c>
	switch (smp->method) {
    f3e8:	f894 10c0 	ldrb.w	r1, [r4, #192]	; 0xc0
    f3ec:	2905      	cmp	r1, #5
    f3ee:	f200 80af 	bhi.w	f550 <smp_pairing_random+0x21c>
    f3f2:	e8df f001 	tbb	[pc, r1]
    f3f6:	413a      	.short	0x413a
    f3f8:	8ead0341 	.word	0x8ead0341
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    f3fc:	4b67      	ldr	r3, [pc, #412]	; (f59c <smp_pairing_random+0x268>)
    f3fe:	681d      	ldr	r5, [r3, #0]
	sys_memcpy_swap(m, u, 32);
    f400:	2220      	movs	r2, #32
    f402:	f204 110f 	addw	r1, r4, #271	; 0x10f
    f406:	a80a      	add	r0, sp, #40	; 0x28
    f408:	f016 fc5f 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
    f40c:	2220      	movs	r2, #32
    f40e:	4629      	mov	r1, r5
    f410:	a812      	add	r0, sp, #72	; 0x48
    f412:	f016 fc5a 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(m + 64, y, 16);
    f416:	2210      	movs	r2, #16
    f418:	f104 01df 	add.w	r1, r4, #223	; 0xdf
    f41c:	a81a      	add	r0, sp, #104	; 0x68
    f41e:	f016 fc54 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
    f422:	2210      	movs	r2, #16
    f424:	4639      	mov	r1, r7
    f426:	a806      	add	r0, sp, #24
    f428:	f016 fc4f 	bl	25cca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    f42c:	ab06      	add	r3, sp, #24
    f42e:	2250      	movs	r2, #80	; 0x50
    f430:	a90a      	add	r1, sp, #40	; 0x28
    f432:	4618      	mov	r0, r3
    f434:	f016 fc62 	bl	25cfc <bt_smp_aes_cmac>
	if (err) {
    f438:	2800      	cmp	r0, #0
    f43a:	d1c5      	bne.n	f3c8 <smp_pairing_random+0x94>
	memcpy(passkey, xs + 12, 4);
    f43c:	2204      	movs	r2, #4
    f43e:	a909      	add	r1, sp, #36	; 0x24
    f440:	a805      	add	r0, sp, #20
    f442:	f015 f811 	bl	24468 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f446:	9b05      	ldr	r3, [sp, #20]
    f448:	4a55      	ldr	r2, [pc, #340]	; (f5a0 <smp_pairing_random+0x26c>)
    f44a:	ba1b      	rev	r3, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f44c:	4630      	mov	r0, r6
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f44e:	fbb3 f1f2 	udiv	r1, r3, r2
    f452:	fb02 3311 	mls	r3, r2, r1, r3
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f456:	210a      	movs	r1, #10
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    f458:	9305      	str	r3, [sp, #20]
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    f45a:	f016 fced 	bl	25e38 <atomic_set_bit>
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    f45e:	4b51      	ldr	r3, [pc, #324]	; (f5a4 <smp_pairing_random+0x270>)
    f460:	9905      	ldr	r1, [sp, #20]
    f462:	681b      	ldr	r3, [r3, #0]
    f464:	6820      	ldr	r0, [r4, #0]
    f466:	689b      	ldr	r3, [r3, #8]
    f468:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f46a:	210d      	movs	r1, #13
    f46c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    f470:	f016 fce2 	bl	25e38 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f474:	2110      	movs	r1, #16
    f476:	e7af      	b.n	f3d8 <smp_pairing_random+0xa4>
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f478:	f894 2194 	ldrb.w	r2, [r4, #404]	; 0x194
    f47c:	f8d4 3190 	ldr.w	r3, [r4, #400]	; 0x190
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f480:	4946      	ldr	r1, [pc, #280]	; (f59c <smp_pairing_random+0x268>)
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f482:	40d3      	lsrs	r3, r2
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f484:	ad0a      	add	r5, sp, #40	; 0x28
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    f486:	f003 0301 	and.w	r3, r3, #1
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    f48a:	9500      	str	r5, [sp, #0]
    f48c:	6809      	ldr	r1, [r1, #0]
    f48e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    f492:	463a      	mov	r2, r7
    f494:	f204 100f 	addw	r0, r4, #271	; 0x10f
    f498:	f016 fc4c 	bl	25d34 <smp_f4>
    f49c:	b140      	cbz	r0, f4b0 <smp_pairing_random+0x17c>
    f49e:	493c      	ldr	r1, [pc, #240]	; (f590 <smp_pairing_random+0x25c>)
    f4a0:	4b3c      	ldr	r3, [pc, #240]	; (f594 <smp_pairing_random+0x260>)
		BT_ERR("Calculate confirm failed");
    f4a2:	4841      	ldr	r0, [pc, #260]	; (f5a8 <smp_pairing_random+0x274>)
    f4a4:	1ac9      	subs	r1, r1, r3
    f4a6:	08c9      	lsrs	r1, r1, #3
    f4a8:	0189      	lsls	r1, r1, #6
    f4aa:	f041 0101 	orr.w	r1, r1, #1
    f4ae:	e789      	b.n	f3c4 <smp_pairing_random+0x90>
	if (memcmp(smp->pcnf, cfm, 16)) {
    f4b0:	2210      	movs	r2, #16
    f4b2:	4629      	mov	r1, r5
    f4b4:	f104 00cf 	add.w	r0, r4, #207	; 0xcf
    f4b8:	f014 ffc5 	bl	24446 <memcmp>
    f4bc:	b120      	cbz	r0, f4c8 <smp_pairing_random+0x194>
		return BT_SMP_ERR_CONFIRM_FAILED;
    f4be:	2504      	movs	r5, #4
}
    f4c0:	4628      	mov	r0, r5
    f4c2:	b01e      	add	sp, #120	; 0x78
    f4c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		atomic_set_bit(&smp->allowed_cmds,
    f4c8:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
    f4cc:	2103      	movs	r1, #3
    f4ce:	4638      	mov	r0, r7
    f4d0:	f016 fcb2 	bl	25e38 <atomic_set_bit>
		err = smp_send_pairing_random(smp);
    f4d4:	4620      	mov	r0, r4
    f4d6:	f016 fd08 	bl	25eea <smp_send_pairing_random>
		if (err) {
    f4da:	4605      	mov	r5, r0
    f4dc:	2800      	cmp	r0, #0
    f4de:	d1ef      	bne.n	f4c0 <smp_pairing_random+0x18c>
		smp->passkey_round++;
    f4e0:	f894 3194 	ldrb.w	r3, [r4, #404]	; 0x194
    f4e4:	3301      	adds	r3, #1
    f4e6:	b2db      	uxtb	r3, r3
		if (smp->passkey_round == 20U) {
    f4e8:	2b14      	cmp	r3, #20
		smp->passkey_round++;
    f4ea:	f884 3194 	strb.w	r3, [r4, #404]	; 0x194
		if (smp->passkey_round == 20U) {
    f4ee:	d108      	bne.n	f502 <smp_pairing_random+0x1ce>
			atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    f4f0:	4638      	mov	r0, r7
    f4f2:	210d      	movs	r1, #13
    f4f4:	f016 fca0 	bl	25e38 <atomic_set_bit>
			atomic_set_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    f4f8:	2110      	movs	r1, #16
    f4fa:	4630      	mov	r0, r6
    f4fc:	f016 fc9c 	bl	25e38 <atomic_set_bit>
			return 0;
    f500:	e7de      	b.n	f4c0 <smp_pairing_random+0x18c>
		if (bt_rand(smp->prnd, 16)) {
    f502:	2110      	movs	r1, #16
    f504:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f508:	f004 f804 	bl	13514 <bt_rand>
    f50c:	2800      	cmp	r0, #0
    f50e:	d0d7      	beq.n	f4c0 <smp_pairing_random+0x18c>
    f510:	e75a      	b.n	f3c8 <smp_pairing_random+0x94>
		if (bt_rand(smp->prnd, 16)) {
    f512:	2110      	movs	r1, #16
    f514:	f104 00df 	add.w	r0, r4, #223	; 0xdf
    f518:	f003 fffc 	bl	13514 <bt_rand>
    f51c:	2800      	cmp	r0, #0
    f51e:	f47f af53 	bne.w	f3c8 <smp_pairing_random+0x94>
		if (bt_auth && bt_auth->oob_data_request) {
    f522:	4f20      	ldr	r7, [pc, #128]	; (f5a4 <smp_pairing_random+0x270>)
    f524:	683b      	ldr	r3, [r7, #0]
    f526:	b1f3      	cbz	r3, f566 <smp_pairing_random+0x232>
    f528:	68db      	ldr	r3, [r3, #12]
    f52a:	b1e3      	cbz	r3, f566 <smp_pairing_random+0x232>
			struct bt_conn_oob_info info = {
    f52c:	4b1f      	ldr	r3, [pc, #124]	; (f5ac <smp_pairing_random+0x278>)
	return ((req->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f52e:	f894 20c3 	ldrb.w	r2, [r4, #195]	; 0xc3
			struct bt_conn_oob_info info = {
    f532:	f8b3 3035 	ldrh.w	r3, [r3, #53]	; 0x35
    f536:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f53a:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f53e:	07d2      	lsls	r2, r2, #31
	return ((rsp->oob_flag & BT_SMP_OOB_DATA_MASK) == BT_SMP_OOB_PRESENT);
    f540:	f003 0301 	and.w	r3, r3, #1
		oob_config = req_oob_present ? BT_CONN_OOB_LOCAL_ONLY :
    f544:	d411      	bmi.n	f56a <smp_pairing_random+0x236>
				     BT_CONN_OOB_BOTH_PEERS :
    f546:	2b00      	cmp	r3, #0
    f548:	bf0c      	ite	eq
    f54a:	2003      	moveq	r0, #3
    f54c:	2001      	movne	r0, #1
    f54e:	e00f      	b.n	f570 <smp_pairing_random+0x23c>
    f550:	4b10      	ldr	r3, [pc, #64]	; (f594 <smp_pairing_random+0x260>)
    f552:	4a0f      	ldr	r2, [pc, #60]	; (f590 <smp_pairing_random+0x25c>)
		BT_ERR("Unknown pairing method (%u)", smp->method);
    f554:	4816      	ldr	r0, [pc, #88]	; (f5b0 <smp_pairing_random+0x27c>)
    f556:	1ad2      	subs	r2, r2, r3
    f558:	08d2      	lsrs	r2, r2, #3
    f55a:	0192      	lsls	r2, r2, #6
    f55c:	f042 0201 	orr.w	r2, r2, #1
    f560:	f012 ff83 	bl	2246a <log_1>
    f564:	e730      	b.n	f3c8 <smp_pairing_random+0x94>
			return BT_SMP_ERR_OOB_NOT_AVAIL;
    f566:	2502      	movs	r5, #2
    f568:	e7aa      	b.n	f4c0 <smp_pairing_random+0x18c>
				     BT_CONN_OOB_BOTH_PEERS :
    f56a:	2b00      	cmp	r3, #0
    f56c:	bf18      	it	ne
    f56e:	2002      	movne	r0, #2
			smp->oobd_local = NULL;
    f570:	2500      	movs	r5, #0
	info->lesc.oob_config = oob_config;
    f572:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
			smp->oobd_remote = NULL;
    f576:	e9c4 5566 	strd	r5, r5, [r4, #408]	; 0x198
			atomic_set_bit(smp->flags, SMP_FLAG_OOB_PENDING);
    f57a:	4630      	mov	r0, r6
    f57c:	210c      	movs	r1, #12
    f57e:	f016 fc5b 	bl	25e38 <atomic_set_bit>
			bt_auth->oob_data_request(smp->chan.chan.conn, &info);
    f582:	683b      	ldr	r3, [r7, #0]
    f584:	6820      	ldr	r0, [r4, #0]
    f586:	68db      	ldr	r3, [r3, #12]
    f588:	a90a      	add	r1, sp, #40	; 0x28
    f58a:	4798      	blx	r3
			return 0;
    f58c:	e798      	b.n	f4c0 <smp_pairing_random+0x18c>
    f58e:	bf00      	nop
    f590:	000279a8 	.word	0x000279a8
    f594:	000278c0 	.word	0x000278c0
    f598:	0002d2ff 	.word	0x0002d2ff
    f59c:	2000d7d8 	.word	0x2000d7d8
    f5a0:	000f4240 	.word	0x000f4240
    f5a4:	2000d744 	.word	0x2000d744
    f5a8:	0002d314 	.word	0x0002d314
    f5ac:	00027b04 	.word	0x00027b04
    f5b0:	0002d241 	.word	0x0002d241

0000f5b4 <bt_smp_sign_verify>:
{
    f5b4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	return buf->data + buf->len;
    f5b6:	898b      	ldrh	r3, [r1, #12]
    f5b8:	460c      	mov	r4, r1
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f5ba:	6889      	ldr	r1, [r1, #8]
{
    f5bc:	4606      	mov	r6, r0
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f5be:	3b0c      	subs	r3, #12
    f5c0:	4419      	add	r1, r3
    f5c2:	220c      	movs	r2, #12
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    f5c4:	f106 0588 	add.w	r5, r6, #136	; 0x88
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    f5c8:	a801      	add	r0, sp, #4
    f5ca:	f014 ff4d 	bl	24468 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, conn->id, &conn->le.dst);
    f5ce:	7a31      	ldrb	r1, [r6, #8]
    f5d0:	462a      	mov	r2, r5
    f5d2:	2010      	movs	r0, #16
    f5d4:	f000 fee4 	bl	103a0 <bt_keys_find>
	if (!keys) {
    f5d8:	4606      	mov	r6, r0
    f5da:	b9a0      	cbnz	r0, f606 <bt_smp_sign_verify+0x52>
    f5dc:	4a2e      	ldr	r2, [pc, #184]	; (f698 <bt_smp_sign_verify+0xe4>)
    f5de:	4c2f      	ldr	r4, [pc, #188]	; (f69c <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to find Remote CSRK for %s",
    f5e0:	4628      	mov	r0, r5
    f5e2:	1aa4      	subs	r4, r4, r2
    f5e4:	f7f8 fdd2 	bl	818c <bt_addr_le_str_real>
    f5e8:	f7f6 f83c 	bl	5664 <log_strdup>
    f5ec:	08e4      	lsrs	r4, r4, #3
    f5ee:	01a4      	lsls	r4, r4, #6
    f5f0:	f044 0401 	orr.w	r4, r4, #1
    f5f4:	4601      	mov	r1, r0
    f5f6:	4622      	mov	r2, r4
    f5f8:	4829      	ldr	r0, [pc, #164]	; (f6a0 <bt_smp_sign_verify+0xec>)
    f5fa:	f012 ff36 	bl	2246a <log_1>
		return -ENOENT;
    f5fe:	f06f 0001 	mvn.w	r0, #1
}
    f602:	b004      	add	sp, #16
    f604:	bd70      	pop	{r4, r5, r6, pc}
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    f606:	6e43      	ldr	r3, [r0, #100]	; 0x64
    f608:	9300      	str	r3, [sp, #0]
    f60a:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    f60c:	68a0      	ldr	r0, [r4, #8]
    f60e:	3b0c      	subs	r3, #12
    f610:	2204      	movs	r2, #4
    f612:	4669      	mov	r1, sp
    f614:	4418      	add	r0, r3
    f616:	f014 ff27 	bl	24468 <memcpy>
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    f61a:	89a2      	ldrh	r2, [r4, #12]
    f61c:	68a1      	ldr	r1, [r4, #8]
    f61e:	3a0c      	subs	r2, #12
    f620:	b292      	uxth	r2, r2
    f622:	f106 0054 	add.w	r0, r6, #84	; 0x54
    f626:	f7ff f847 	bl	e6b8 <smp_sign_buf>
	if (err) {
    f62a:	b198      	cbz	r0, f654 <bt_smp_sign_verify+0xa0>
    f62c:	4a1a      	ldr	r2, [pc, #104]	; (f698 <bt_smp_sign_verify+0xe4>)
    f62e:	4c1b      	ldr	r4, [pc, #108]	; (f69c <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to create signature for %s",
    f630:	4628      	mov	r0, r5
    f632:	1aa4      	subs	r4, r4, r2
    f634:	f7f8 fdaa 	bl	818c <bt_addr_le_str_real>
    f638:	f7f6 f814 	bl	5664 <log_strdup>
    f63c:	08e4      	lsrs	r4, r4, #3
    f63e:	01a4      	lsls	r4, r4, #6
    f640:	f044 0401 	orr.w	r4, r4, #1
    f644:	4601      	mov	r1, r0
    f646:	4622      	mov	r2, r4
    f648:	4816      	ldr	r0, [pc, #88]	; (f6a4 <bt_smp_sign_verify+0xf0>)
    f64a:	f012 ff0e 	bl	2246a <log_1>
		return -EIO;
    f64e:	f06f 0004 	mvn.w	r0, #4
    f652:	e7d6      	b.n	f602 <bt_smp_sign_verify+0x4e>
    f654:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    f656:	68a1      	ldr	r1, [r4, #8]
    f658:	3b0c      	subs	r3, #12
    f65a:	220c      	movs	r2, #12
    f65c:	4419      	add	r1, r3
    f65e:	a801      	add	r0, sp, #4
    f660:	f014 fef1 	bl	24446 <memcmp>
    f664:	b198      	cbz	r0, f68e <bt_smp_sign_verify+0xda>
    f666:	4a0c      	ldr	r2, [pc, #48]	; (f698 <bt_smp_sign_verify+0xe4>)
    f668:	4c0c      	ldr	r4, [pc, #48]	; (f69c <bt_smp_sign_verify+0xe8>)
		BT_ERR("Unable to verify signature for %s",
    f66a:	4628      	mov	r0, r5
    f66c:	1aa4      	subs	r4, r4, r2
    f66e:	f7f8 fd8d 	bl	818c <bt_addr_le_str_real>
    f672:	f7f5 fff7 	bl	5664 <log_strdup>
    f676:	08e4      	lsrs	r4, r4, #3
    f678:	01a4      	lsls	r4, r4, #6
    f67a:	f044 0401 	orr.w	r4, r4, #1
    f67e:	4601      	mov	r1, r0
    f680:	4622      	mov	r2, r4
    f682:	4809      	ldr	r0, [pc, #36]	; (f6a8 <bt_smp_sign_verify+0xf4>)
    f684:	f012 fef1 	bl	2246a <log_1>
		return -EBADMSG;
    f688:	f06f 004c 	mvn.w	r0, #76	; 0x4c
    f68c:	e7b9      	b.n	f602 <bt_smp_sign_verify+0x4e>
	keys->remote_csrk.cnt++;
    f68e:	6e73      	ldr	r3, [r6, #100]	; 0x64
    f690:	3301      	adds	r3, #1
    f692:	6673      	str	r3, [r6, #100]	; 0x64
	return 0;
    f694:	e7b5      	b.n	f602 <bt_smp_sign_verify+0x4e>
    f696:	bf00      	nop
    f698:	000278c0 	.word	0x000278c0
    f69c:	000279a8 	.word	0x000279a8
    f6a0:	0002d32d 	.word	0x0002d32d
    f6a4:	0002d34f 	.word	0x0002d34f
    f6a8:	0002d371 	.word	0x0002d371

0000f6ac <bt_smp_sign>:
{
    f6ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    f6ae:	f100 0588 	add.w	r5, r0, #136	; 0x88
{
    f6b2:	460e      	mov	r6, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, conn->id, &conn->le.dst);
    f6b4:	462a      	mov	r2, r5
    f6b6:	7a01      	ldrb	r1, [r0, #8]
    f6b8:	2008      	movs	r0, #8
    f6ba:	f000 fe71 	bl	103a0 <bt_keys_find>
	if (!keys) {
    f6be:	4604      	mov	r4, r0
    f6c0:	b9a0      	cbnz	r0, f6ec <bt_smp_sign+0x40>
    f6c2:	4a23      	ldr	r2, [pc, #140]	; (f750 <bt_smp_sign+0xa4>)
    f6c4:	4c23      	ldr	r4, [pc, #140]	; (f754 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to find local CSRK for %s",
    f6c6:	4628      	mov	r0, r5
    f6c8:	1aa4      	subs	r4, r4, r2
    f6ca:	f7f8 fd5f 	bl	818c <bt_addr_le_str_real>
    f6ce:	f7f5 ffc9 	bl	5664 <log_strdup>
    f6d2:	08e4      	lsrs	r4, r4, #3
    f6d4:	01a4      	lsls	r4, r4, #6
    f6d6:	f044 0401 	orr.w	r4, r4, #1
    f6da:	4601      	mov	r1, r0
    f6dc:	4622      	mov	r2, r4
    f6de:	481e      	ldr	r0, [pc, #120]	; (f758 <bt_smp_sign+0xac>)
    f6e0:	f012 fec3 	bl	2246a <log_1>
		return -ENOENT;
    f6e4:	f06f 0001 	mvn.w	r0, #1
}
    f6e8:	b002      	add	sp, #8
    f6ea:	bd70      	pop	{r4, r5, r6, pc}
	return net_buf_simple_add(&buf->b, len);
    f6ec:	210c      	movs	r1, #12
    f6ee:	f106 0008 	add.w	r0, r6, #8
    f6f2:	f016 ff0d 	bl	26510 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    f6f6:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f6f8:	9301      	str	r3, [sp, #4]
	return buf->data + buf->len;
    f6fa:	89b3      	ldrh	r3, [r6, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    f6fc:	68b0      	ldr	r0, [r6, #8]
    f6fe:	2204      	movs	r2, #4
    f700:	3b0c      	subs	r3, #12
    f702:	eb0d 0102 	add.w	r1, sp, r2
    f706:	4418      	add	r0, r3
    f708:	f014 feae 	bl	24468 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    f70c:	89b2      	ldrh	r2, [r6, #12]
    f70e:	68b1      	ldr	r1, [r6, #8]
    f710:	3a0c      	subs	r2, #12
    f712:	b292      	uxth	r2, r2
    f714:	f104 0040 	add.w	r0, r4, #64	; 0x40
    f718:	f7fe ffce 	bl	e6b8 <smp_sign_buf>
	if (err) {
    f71c:	b198      	cbz	r0, f746 <bt_smp_sign+0x9a>
    f71e:	4a0c      	ldr	r2, [pc, #48]	; (f750 <bt_smp_sign+0xa4>)
    f720:	4c0c      	ldr	r4, [pc, #48]	; (f754 <bt_smp_sign+0xa8>)
		BT_ERR("Unable to create signature for %s",
    f722:	4628      	mov	r0, r5
    f724:	1aa4      	subs	r4, r4, r2
    f726:	f7f8 fd31 	bl	818c <bt_addr_le_str_real>
    f72a:	f7f5 ff9b 	bl	5664 <log_strdup>
    f72e:	08e4      	lsrs	r4, r4, #3
    f730:	01a4      	lsls	r4, r4, #6
    f732:	f044 0401 	orr.w	r4, r4, #1
    f736:	4601      	mov	r1, r0
    f738:	4622      	mov	r2, r4
    f73a:	4808      	ldr	r0, [pc, #32]	; (f75c <bt_smp_sign+0xb0>)
    f73c:	f012 fe95 	bl	2246a <log_1>
		return -EIO;
    f740:	f06f 0004 	mvn.w	r0, #4
    f744:	e7d0      	b.n	f6e8 <bt_smp_sign+0x3c>
	keys->local_csrk.cnt++;
    f746:	6d23      	ldr	r3, [r4, #80]	; 0x50
    f748:	3301      	adds	r3, #1
    f74a:	6523      	str	r3, [r4, #80]	; 0x50
	return 0;
    f74c:	e7cc      	b.n	f6e8 <bt_smp_sign+0x3c>
    f74e:	bf00      	nop
    f750:	000278c0 	.word	0x000278c0
    f754:	000279a8 	.word	0x000279a8
    f758:	0002d393 	.word	0x0002d393
    f75c:	0002d34f 	.word	0x0002d34f

0000f760 <bt_smp_start_security>:
{
    f760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
	switch (conn->role) {
    f764:	78c4      	ldrb	r4, [r0, #3]
    f766:	2c01      	cmp	r4, #1
{
    f768:	4605      	mov	r5, r0
	switch (conn->role) {
    f76a:	d005      	beq.n	f778 <bt_smp_start_security+0x18>
		return -EINVAL;
    f76c:	f06f 0415 	mvn.w	r4, #21
}
    f770:	4620      	mov	r0, r4
    f772:	b003      	add	sp, #12
    f774:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	smp = smp_chan_get(conn);
    f778:	f7fe ffde 	bl	e738 <smp_chan_get>
	if (!smp) {
    f77c:	4606      	mov	r6, r0
    f77e:	2800      	cmp	r0, #0
    f780:	f000 80a0 	beq.w	f8c4 <bt_smp_start_security+0x164>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f784:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
    f788:	2104      	movs	r1, #4
    f78a:	4638      	mov	r0, r7
    f78c:	f016 fb6b 	bl	25e66 <atomic_test_bit>
    f790:	2800      	cmp	r0, #0
    f792:	f040 809a 	bne.w	f8ca <bt_smp_start_security+0x16a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    f796:	2103      	movs	r1, #3
    f798:	4638      	mov	r0, r7
    f79a:	f016 fb64 	bl	25e66 <atomic_test_bit>
    f79e:	b110      	cbz	r0, f7a6 <bt_smp_start_security+0x46>
		return -EBUSY;
    f7a0:	f06f 040f 	mvn.w	r4, #15
    f7a4:	e7e4      	b.n	f770 <bt_smp_start_security+0x10>
	if (atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    f7a6:	4621      	mov	r1, r4
    f7a8:	4638      	mov	r0, r7
    f7aa:	f016 fb5c 	bl	25e66 <atomic_test_bit>
    f7ae:	2800      	cmp	r0, #0
    f7b0:	d1f6      	bne.n	f7a0 <bt_smp_start_security+0x40>
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f7b2:	7aab      	ldrb	r3, [r5, #10]
	switch (conn->required_sec_level) {
    f7b4:	2b03      	cmp	r3, #3
    f7b6:	d03d      	beq.n	f834 <bt_smp_start_security+0xd4>
    f7b8:	d82c      	bhi.n	f814 <bt_smp_start_security+0xb4>
    f7ba:	3b01      	subs	r3, #1
    f7bc:	2b01      	cmp	r3, #1
    f7be:	d946      	bls.n	f84e <bt_smp_start_security+0xee>
	if (atomic_test_bit(conn->flags, BT_CONN_FORCE_PAIR)) {
    f7c0:	210b      	movs	r1, #11
    f7c2:	1d28      	adds	r0, r5, #4
    f7c4:	f016 fb4f 	bl	25e66 <atomic_test_bit>
    f7c8:	2800      	cmp	r0, #0
    f7ca:	d1cf      	bne.n	f76c <bt_smp_start_security+0xc>
	if (!conn->le.keys) {
    f7cc:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f7d0:	b983      	cbnz	r3, f7f4 <bt_smp_start_security+0x94>
						     conn->id, &conn->le.dst);
    f7d2:	f105 0488 	add.w	r4, r5, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    f7d6:	7a29      	ldrb	r1, [r5, #8]
    f7d8:	4622      	mov	r2, r4
    f7da:	2020      	movs	r0, #32
    f7dc:	f000 fde0 	bl	103a0 <bt_keys_find>
    f7e0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f7e4:	b930      	cbnz	r0, f7f4 <bt_smp_start_security+0x94>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    f7e6:	7a29      	ldrb	r1, [r5, #8]
    f7e8:	4622      	mov	r2, r4
    f7ea:	2004      	movs	r0, #4
    f7ec:	f000 fdd8 	bl	103a0 <bt_keys_find>
    f7f0:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
	if (!conn->le.keys ||
    f7f4:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f7f8:	2b00      	cmp	r3, #0
    f7fa:	d0b7      	beq.n	f76c <bt_smp_start_security+0xc>
    f7fc:	89da      	ldrh	r2, [r3, #14]
    f7fe:	f002 0224 	and.w	r2, r2, #36	; 0x24
    f802:	2a00      	cmp	r2, #0
    f804:	d0b2      	beq.n	f76c <bt_smp_start_security+0xc>
	if (conn->required_sec_level > BT_SECURITY_L2 &&
    f806:	7aaa      	ldrb	r2, [r5, #10]
    f808:	2a02      	cmp	r2, #2
    f80a:	d920      	bls.n	f84e <bt_smp_start_security+0xee>
    f80c:	7b5b      	ldrb	r3, [r3, #13]
    f80e:	07db      	lsls	r3, r3, #31
    f810:	d5ac      	bpl.n	f76c <bt_smp_start_security+0xc>
    f812:	e01c      	b.n	f84e <bt_smp_start_security+0xee>
	switch (conn->required_sec_level) {
    f814:	2b04      	cmp	r3, #4
    f816:	d1d3      	bne.n	f7c0 <bt_smp_start_security+0x60>
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f818:	f7fe ff28 	bl	e66c <get_io_capa>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f81c:	2803      	cmp	r0, #3
    f81e:	d104      	bne.n	f82a <bt_smp_start_security+0xca>
    f820:	4b2b      	ldr	r3, [pc, #172]	; (f8d0 <bt_smp_start_security+0x170>)
    f822:	681b      	ldr	r3, [r3, #0]
		return (get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f824:	b1f3      	cbz	r3, f864 <bt_smp_start_security+0x104>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f826:	68dc      	ldr	r4, [r3, #12]
    f828:	b10c      	cbz	r4, f82e <bt_smp_start_security+0xce>
    f82a:	4b2a      	ldr	r3, [pc, #168]	; (f8d4 <bt_smp_start_security+0x174>)
    f82c:	781c      	ldrb	r4, [r3, #0]
    f82e:	f004 0401 	and.w	r4, r4, #1
    f832:	e00a      	b.n	f84a <bt_smp_start_security+0xea>
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f834:	f7fe ff1a 	bl	e66c <get_io_capa>
    f838:	2803      	cmp	r0, #3
    f83a:	d106      	bne.n	f84a <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    f83c:	4b24      	ldr	r3, [pc, #144]	; (f8d0 <bt_smp_start_security+0x170>)
    f83e:	681c      	ldr	r4, [r3, #0]
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT ||
    f840:	b11c      	cbz	r4, f84a <bt_smp_start_security+0xea>
		       (bt_auth && bt_auth->oob_data_request);
    f842:	68e4      	ldr	r4, [r4, #12]
    f844:	3c00      	subs	r4, #0
    f846:	bf18      	it	ne
    f848:	2401      	movne	r4, #1
	if (!(sec_level_reachable(conn) || smp_keys_check(conn))) {
    f84a:	2c00      	cmp	r4, #0
    f84c:	d0b8      	beq.n	f7c0 <bt_smp_start_security+0x60>
	if (!conn->le.keys) {
    f84e:	f8d5 30b4 	ldr.w	r3, [r5, #180]	; 0xb4
    f852:	b14b      	cbz	r3, f868 <bt_smp_start_security+0x108>
	if (smp_init(smp) != 0) {
    f854:	4630      	mov	r0, r6
    f856:	f7fe ffdf 	bl	e818 <smp_init>
    f85a:	4604      	mov	r4, r0
    f85c:	b180      	cbz	r0, f880 <bt_smp_start_security+0x120>
		return -ENOBUFS;
    f85e:	f06f 0436 	mvn.w	r4, #54	; 0x36
    f862:	e785      	b.n	f770 <bt_smp_start_security+0x10>
			(bt_auth && bt_auth->oob_data_request)) && sc_supported;
    f864:	2400      	movs	r4, #0
    f866:	e7e2      	b.n	f82e <bt_smp_start_security+0xce>
		conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
    f868:	7a28      	ldrb	r0, [r5, #8]
    f86a:	f105 0188 	add.w	r1, r5, #136	; 0x88
    f86e:	f000 fd21 	bl	102b4 <bt_keys_get_addr>
    f872:	f8c5 00b4 	str.w	r0, [r5, #180]	; 0xb4
		if (!conn->le.keys) {
    f876:	2800      	cmp	r0, #0
    f878:	d1ec      	bne.n	f854 <bt_smp_start_security+0xf4>
			return -ENOMEM;
    f87a:	f06f 040b 	mvn.w	r4, #11
    f87e:	e777      	b.n	f770 <bt_smp_start_security+0x10>
	req_buf = smp_create_pdu(smp, BT_SMP_CMD_SECURITY_REQUEST,
    f880:	210b      	movs	r1, #11
    f882:	4630      	mov	r0, r6
    f884:	f016 faf8 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!req_buf) {
    f888:	4680      	mov	r8, r0
    f88a:	2800      	cmp	r0, #0
    f88c:	d0e7      	beq.n	f85e <bt_smp_start_security+0xfe>
	return net_buf_simple_add(&buf->b, len);
    f88e:	2101      	movs	r1, #1
    f890:	3008      	adds	r0, #8
    f892:	f016 fe3d 	bl	26510 <net_buf_simple_add>
    f896:	4681      	mov	r9, r0
	req->auth_req = get_auth(conn, BT_SMP_AUTH_DEFAULT);
    f898:	2009      	movs	r0, #9
    f89a:	f7fe ff87 	bl	e7ac <get_auth.constprop.0>
    f89e:	4623      	mov	r3, r4
    f8a0:	f889 0000 	strb.w	r0, [r9]
    f8a4:	4642      	mov	r2, r8
    f8a6:	9400      	str	r4, [sp, #0]
    f8a8:	2106      	movs	r1, #6
    f8aa:	4628      	mov	r0, r5
    f8ac:	f015 fb03 	bl	24eb6 <bt_l2cap_send_cb>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    f8b0:	4638      	mov	r0, r7
    f8b2:	210f      	movs	r1, #15
    f8b4:	f016 fac0 	bl	25e38 <atomic_set_bit>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
    f8b8:	2101      	movs	r1, #1
    f8ba:	f106 00b8 	add.w	r0, r6, #184	; 0xb8
    f8be:	f016 fabb 	bl	25e38 <atomic_set_bit>
	return 0;
    f8c2:	e755      	b.n	f770 <bt_smp_start_security+0x10>
		return -ENOTCONN;
    f8c4:	f06f 0438 	mvn.w	r4, #56	; 0x38
    f8c8:	e752      	b.n	f770 <bt_smp_start_security+0x10>
		return -EIO;
    f8ca:	f06f 0404 	mvn.w	r4, #4
    f8ce:	e74f      	b.n	f770 <bt_smp_start_security+0x10>
    f8d0:	2000d744 	.word	0x2000d744
    f8d4:	2000f315 	.word	0x2000f315

0000f8d8 <smp_pairing_complete>:
{
    f8d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    f8dc:	4606      	mov	r6, r0
    f8de:	f8df 80a8 	ldr.w	r8, [pc, #168]	; f988 <smp_pairing_complete+0xb0>
    f8e2:	f856 4bbc 	ldr.w	r4, [r6], #188
{
    f8e6:	4607      	mov	r7, r0
	if (!status) {
    f8e8:	b9e9      	cbnz	r1, f926 <smp_pairing_complete+0x4e>
		bool bond_flag = atomic_test_bit(smp->flags, SMP_FLAG_BOND);
    f8ea:	210d      	movs	r1, #13
    f8ec:	4630      	mov	r0, r6
    f8ee:	f016 faba 	bl	25e66 <atomic_test_bit>
		if (bond_flag) {
    f8f2:	4605      	mov	r5, r0
    f8f4:	b118      	cbz	r0, f8fe <smp_pairing_complete+0x26>
			bt_keys_store(conn->le.keys);
    f8f6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f8fa:	f000 fe95 	bl	10628 <bt_keys_store>
		if (bt_auth && bt_auth->pairing_complete) {
    f8fe:	f8d8 3000 	ldr.w	r3, [r8]
    f902:	b123      	cbz	r3, f90e <smp_pairing_complete+0x36>
    f904:	699b      	ldr	r3, [r3, #24]
		if (bt_auth && bt_auth->pairing_failed) {
    f906:	b113      	cbz	r3, f90e <smp_pairing_complete+0x36>
			bt_auth->pairing_failed(conn, security_err);
    f908:	4629      	mov	r1, r5
    f90a:	4620      	mov	r0, r4
    f90c:	4798      	blx	r3
	smp_reset(smp);
    f90e:	4638      	mov	r0, r7
    f910:	f016 fb45 	bl	25f9e <smp_reset>
	if (conn->sec_level != conn->required_sec_level) {
    f914:	7a62      	ldrb	r2, [r4, #9]
    f916:	7aa3      	ldrb	r3, [r4, #10]
    f918:	429a      	cmp	r2, r3
    f91a:	d033      	beq.n	f984 <smp_pairing_complete+0xac>
		bt_smp_start_security(conn);
    f91c:	4620      	mov	r0, r4
}
    f91e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_smp_start_security(conn);
    f922:	f7ff bf1d 	b.w	f760 <bt_smp_start_security>
	switch (smp_err) {
    f926:	3901      	subs	r1, #1
    f928:	b2c9      	uxtb	r1, r1
    f92a:	290d      	cmp	r1, #13
    f92c:	bf9c      	itt	ls
    f92e:	4b17      	ldrls	r3, [pc, #92]	; (f98c <smp_pairing_complete+0xb4>)
    f930:	5c5d      	ldrbls	r5, [r3, r1]
		if (conn->le.keys &&
    f932:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
	if (!status) {
    f936:	bf88      	it	hi
    f938:	2508      	movhi	r5, #8
		if (conn->le.keys &&
    f93a:	b143      	cbz	r3, f94e <smp_pairing_complete+0x76>
    f93c:	7b1b      	ldrb	r3, [r3, #12]
    f93e:	b9d3      	cbnz	r3, f976 <smp_pairing_complete+0x9e>
			bt_keys_clear(conn->le.keys);
    f940:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
    f944:	f000 fd8a 	bl	1045c <bt_keys_clear>
			conn->le.keys = NULL;
    f948:	2300      	movs	r3, #0
    f94a:	f8c4 30b4 	str.w	r3, [r4, #180]	; 0xb4
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f94e:	2102      	movs	r1, #2
    f950:	4630      	mov	r0, r6
    f952:	f016 fa88 	bl	25e66 <atomic_test_bit>
    f956:	b940      	cbnz	r0, f96a <smp_pairing_complete+0x92>
	switch (err) {
    f958:	2d08      	cmp	r5, #8
    f95a:	bf16      	itet	ne
    f95c:	4b0c      	ldrne	r3, [pc, #48]	; (f990 <smp_pairing_complete+0xb8>)
		if (!atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR)) {
    f95e:	211f      	moveq	r1, #31
    f960:	5d59      	ldrbne	r1, [r3, r5]
			bt_conn_security_changed(conn,
    f962:	462a      	mov	r2, r5
    f964:	4620      	mov	r0, r4
    f966:	f7fb fd31 	bl	b3cc <bt_conn_security_changed>
		if (bt_auth && bt_auth->pairing_failed) {
    f96a:	f8d8 3000 	ldr.w	r3, [r8]
    f96e:	2b00      	cmp	r3, #0
    f970:	d0cd      	beq.n	f90e <smp_pairing_complete+0x36>
    f972:	69db      	ldr	r3, [r3, #28]
    f974:	e7c7      	b.n	f906 <smp_pairing_complete+0x2e>
		     atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR))) {
    f976:	2102      	movs	r1, #2
    f978:	4630      	mov	r0, r6
    f97a:	f016 fa74 	bl	25e66 <atomic_test_bit>
		    (!conn->le.keys->enc_size ||
    f97e:	2800      	cmp	r0, #0
    f980:	d1de      	bne.n	f940 <smp_pairing_complete+0x68>
    f982:	e7e4      	b.n	f94e <smp_pairing_complete+0x76>
}
    f984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    f988:	2000d744 	.word	0x2000d744
    f98c:	0002d597 	.word	0x0002d597
    f990:	0002d5ad 	.word	0x0002d5ad

0000f994 <bt_smp_recv>:
{
    f994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (buf->len < sizeof(*hdr)) {
    f996:	898b      	ldrh	r3, [r1, #12]
{
    f998:	4604      	mov	r4, r0
    f99a:	460d      	mov	r5, r1
	if (buf->len < sizeof(*hdr)) {
    f99c:	b95b      	cbnz	r3, f9b6 <bt_smp_recv+0x22>
    f99e:	493a      	ldr	r1, [pc, #232]	; (fa88 <bt_smp_recv+0xf4>)
    f9a0:	4b3a      	ldr	r3, [pc, #232]	; (fa8c <bt_smp_recv+0xf8>)
		BT_ERR("Too small SMP PDU received");
    f9a2:	483b      	ldr	r0, [pc, #236]	; (fa90 <bt_smp_recv+0xfc>)
    f9a4:	1ac9      	subs	r1, r1, r3
    f9a6:	08c9      	lsrs	r1, r1, #3
    f9a8:	0189      	lsls	r1, r1, #6
    f9aa:	f041 0101 	orr.w	r1, r1, #1
    f9ae:	f012 fd4f 	bl	22450 <log_0>
}
    f9b2:	2000      	movs	r0, #0
    f9b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return net_buf_simple_pull_mem(&buf->b, len);
    f9b6:	2101      	movs	r1, #1
    f9b8:	f105 0008 	add.w	r0, r5, #8
    f9bc:	f016 fdcf 	bl	2655e <net_buf_simple_pull_mem>
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    f9c0:	2104      	movs	r1, #4
    f9c2:	4606      	mov	r6, r0
    f9c4:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    f9c8:	f016 fa4d 	bl	25e66 <atomic_test_bit>
    f9cc:	7831      	ldrb	r1, [r6, #0]
    f9ce:	b150      	cbz	r0, f9e6 <bt_smp_recv+0x52>
    f9d0:	4a2d      	ldr	r2, [pc, #180]	; (fa88 <bt_smp_recv+0xf4>)
    f9d2:	4b2e      	ldr	r3, [pc, #184]	; (fa8c <bt_smp_recv+0xf8>)
		BT_WARN("SMP command (code 0x%02x) received after timeout",
    f9d4:	482f      	ldr	r0, [pc, #188]	; (fa94 <bt_smp_recv+0x100>)
    f9d6:	1ad2      	subs	r2, r2, r3
    f9d8:	08d2      	lsrs	r2, r2, #3
    f9da:	0192      	lsls	r2, r2, #6
    f9dc:	f042 0202 	orr.w	r2, r2, #2
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f9e0:	f012 fd43 	bl	2246a <log_1>
		return 0;
    f9e4:	e7e5      	b.n	f9b2 <bt_smp_recv+0x1e>
	if (hdr->code >= ARRAY_SIZE(handlers)) {
    f9e6:	290e      	cmp	r1, #14
    f9e8:	d908      	bls.n	f9fc <bt_smp_recv+0x68>
    f9ea:	4a27      	ldr	r2, [pc, #156]	; (fa88 <bt_smp_recv+0xf4>)
    f9ec:	4b27      	ldr	r3, [pc, #156]	; (fa8c <bt_smp_recv+0xf8>)
		BT_WARN("Received reserved SMP code 0x%02x", hdr->code);
    f9ee:	482a      	ldr	r0, [pc, #168]	; (fa98 <bt_smp_recv+0x104>)
    f9f0:	1ad2      	subs	r2, r2, r3
    f9f2:	08d2      	lsrs	r2, r2, #3
    f9f4:	0192      	lsls	r2, r2, #6
    f9f6:	f042 0202 	orr.w	r2, r2, #2
    f9fa:	e7f1      	b.n	f9e0 <bt_smp_recv+0x4c>
	if (!handlers[hdr->code].func) {
    f9fc:	4f27      	ldr	r7, [pc, #156]	; (fa9c <bt_smp_recv+0x108>)
    f9fe:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    fa02:	b973      	cbnz	r3, fa22 <bt_smp_recv+0x8e>
    fa04:	4b21      	ldr	r3, [pc, #132]	; (fa8c <bt_smp_recv+0xf8>)
    fa06:	4a20      	ldr	r2, [pc, #128]	; (fa88 <bt_smp_recv+0xf4>)
		BT_WARN("Unhandled SMP code 0x%02x", hdr->code);
    fa08:	4825      	ldr	r0, [pc, #148]	; (faa0 <bt_smp_recv+0x10c>)
    fa0a:	1ad2      	subs	r2, r2, r3
    fa0c:	08d2      	lsrs	r2, r2, #3
    fa0e:	0192      	lsls	r2, r2, #6
    fa10:	f042 0202 	orr.w	r2, r2, #2
    fa14:	f012 fd29 	bl	2246a <log_1>
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    fa18:	2107      	movs	r1, #7
		smp_error(smp, err);
    fa1a:	4620      	mov	r0, r4
    fa1c:	f016 fc44 	bl	262a8 <smp_error>
    fa20:	e7c7      	b.n	f9b2 <bt_smp_recv+0x1e>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    fa22:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fa26:	f016 faa2 	bl	25f6e <atomic_test_and_clear_bit>
    fa2a:	7831      	ldrb	r1, [r6, #0]
    fa2c:	b970      	cbnz	r0, fa4c <bt_smp_recv+0xb8>
    fa2e:	4b17      	ldr	r3, [pc, #92]	; (fa8c <bt_smp_recv+0xf8>)
    fa30:	4a15      	ldr	r2, [pc, #84]	; (fa88 <bt_smp_recv+0xf4>)
		BT_WARN("Unexpected SMP code 0x%02x", hdr->code);
    fa32:	481c      	ldr	r0, [pc, #112]	; (faa4 <bt_smp_recv+0x110>)
    fa34:	1ad2      	subs	r2, r2, r3
    fa36:	08d2      	lsrs	r2, r2, #3
    fa38:	0192      	lsls	r2, r2, #6
    fa3a:	f042 0202 	orr.w	r2, r2, #2
    fa3e:	f012 fd14 	bl	2246a <log_1>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    fa42:	7833      	ldrb	r3, [r6, #0]
    fa44:	2b05      	cmp	r3, #5
    fa46:	d0b4      	beq.n	f9b2 <bt_smp_recv+0x1e>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    fa48:	2108      	movs	r1, #8
    fa4a:	e7e6      	b.n	fa1a <bt_smp_recv+0x86>
	if (buf->len != handlers[hdr->code].expect_len) {
    fa4c:	eb07 03c1 	add.w	r3, r7, r1, lsl #3
    fa50:	89a8      	ldrh	r0, [r5, #12]
    fa52:	791b      	ldrb	r3, [r3, #4]
    fa54:	4283      	cmp	r3, r0
    fa56:	d00d      	beq.n	fa74 <bt_smp_recv+0xe0>
    fa58:	4a0c      	ldr	r2, [pc, #48]	; (fa8c <bt_smp_recv+0xf8>)
    fa5a:	4b0b      	ldr	r3, [pc, #44]	; (fa88 <bt_smp_recv+0xf4>)
    fa5c:	1a9b      	subs	r3, r3, r2
    fa5e:	08db      	lsrs	r3, r3, #3
		BT_ERR("Invalid len %u for code 0x%02x", buf->len, hdr->code);
    fa60:	019b      	lsls	r3, r3, #6
    fa62:	460a      	mov	r2, r1
    fa64:	f043 0301 	orr.w	r3, r3, #1
    fa68:	4601      	mov	r1, r0
    fa6a:	480f      	ldr	r0, [pc, #60]	; (faa8 <bt_smp_recv+0x114>)
    fa6c:	f012 fd11 	bl	22492 <log_2>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    fa70:	210a      	movs	r1, #10
    fa72:	e7d2      	b.n	fa1a <bt_smp_recv+0x86>
	err = handlers[hdr->code].func(smp, buf);
    fa74:	f857 3031 	ldr.w	r3, [r7, r1, lsl #3]
    fa78:	4620      	mov	r0, r4
    fa7a:	4629      	mov	r1, r5
    fa7c:	4798      	blx	r3
	if (err) {
    fa7e:	4601      	mov	r1, r0
    fa80:	2800      	cmp	r0, #0
    fa82:	d096      	beq.n	f9b2 <bt_smp_recv+0x1e>
    fa84:	e7c9      	b.n	fa1a <bt_smp_recv+0x86>
    fa86:	bf00      	nop
    fa88:	000279a8 	.word	0x000279a8
    fa8c:	000278c0 	.word	0x000278c0
    fa90:	0002d3b4 	.word	0x0002d3b4
    fa94:	0002d3cf 	.word	0x0002d3cf
    fa98:	0002d400 	.word	0x0002d400
    fa9c:	0002832c 	.word	0x0002832c
    faa0:	0002d422 	.word	0x0002d422
    faa4:	0002d43c 	.word	0x0002d43c
    faa8:	0002ce76 	.word	0x0002ce76

0000faac <bt_smp_pkey_ready>:
	sc_public_key = pkey;
    faac:	4b13      	ldr	r3, [pc, #76]	; (fafc <bt_smp_pkey_ready+0x50>)
{
    faae:	b510      	push	{r4, lr}
	sc_public_key = pkey;
    fab0:	6018      	str	r0, [r3, #0]
	if (!pkey) {
    fab2:	b958      	cbnz	r0, facc <bt_smp_pkey_ready+0x20>
    fab4:	4912      	ldr	r1, [pc, #72]	; (fb00 <bt_smp_pkey_ready+0x54>)
    fab6:	4b13      	ldr	r3, [pc, #76]	; (fb04 <bt_smp_pkey_ready+0x58>)
		BT_WARN("Public key not available");
    fab8:	4813      	ldr	r0, [pc, #76]	; (fb08 <bt_smp_pkey_ready+0x5c>)
    faba:	1ac9      	subs	r1, r1, r3
    fabc:	08c9      	lsrs	r1, r1, #3
    fabe:	0189      	lsls	r1, r1, #6
}
    fac0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		BT_WARN("Public key not available");
    fac4:	f041 0102 	orr.w	r1, r1, #2
    fac8:	f012 bcc2 	b.w	22450 <log_0>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    facc:	4c0f      	ldr	r4, [pc, #60]	; (fb0c <bt_smp_pkey_ready+0x60>)
	z_impl_k_sem_give(sem);
    face:	4810      	ldr	r0, [pc, #64]	; (fb10 <bt_smp_pkey_ready+0x64>)
    fad0:	f010 fcc8 	bl	20464 <z_impl_k_sem_give>
    fad4:	f3bf 8f5b 	dmb	ish
    fad8:	f8d4 30bc 	ldr.w	r3, [r4, #188]	; 0xbc
    fadc:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    fae0:	065b      	lsls	r3, r3, #25
    fae2:	d509      	bpl.n	faf8 <bt_smp_pkey_ready+0x4c>
		err = smp_public_key_slave(smp);
    fae4:	4620      	mov	r0, r4
    fae6:	f7ff fac1 	bl	f06c <smp_public_key_slave>
		if (err) {
    faea:	4601      	mov	r1, r0
    faec:	b120      	cbz	r0, faf8 <bt_smp_pkey_ready+0x4c>
			smp_error(smp, err);
    faee:	4620      	mov	r0, r4
}
    faf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_error(smp, err);
    faf4:	f016 bbd8 	b.w	262a8 <smp_error>
}
    faf8:	bd10      	pop	{r4, pc}
    fafa:	bf00      	nop
    fafc:	2000d7d8 	.word	0x2000d7d8
    fb00:	000279a8 	.word	0x000279a8
    fb04:	000278c0 	.word	0x000278c0
    fb08:	0002d457 	.word	0x0002d457
    fb0c:	2000a870 	.word	0x2000a870
    fb10:	20009ff8 	.word	0x20009ff8

0000fb14 <smp_signing_info>:
{
    fb14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fb16:	4605      	mov	r5, r0
    fb18:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    fb1a:	f850 4bbc 	ldr.w	r4, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fb1e:	210d      	movs	r1, #13
    fb20:	f016 f9a1 	bl	25e66 <atomic_test_bit>
    fb24:	b300      	cbz	r0, fb68 <smp_signing_info+0x54>
					&conn->le.dst);
    fb26:	f104 0688 	add.w	r6, r4, #136	; 0x88
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    fb2a:	7a21      	ldrb	r1, [r4, #8]
		struct bt_smp_signing_info *req = (void *)buf->data;
    fb2c:	689f      	ldr	r7, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, conn->id,
    fb2e:	4632      	mov	r2, r6
    fb30:	2010      	movs	r0, #16
    fb32:	f016 fc82 	bl	2643a <bt_keys_get_type>
		if (!keys) {
    fb36:	b990      	cbnz	r0, fb5e <smp_signing_info+0x4a>
    fb38:	4a13      	ldr	r2, [pc, #76]	; (fb88 <smp_signing_info+0x74>)
    fb3a:	4c14      	ldr	r4, [pc, #80]	; (fb8c <smp_signing_info+0x78>)
			BT_ERR("Unable to get keys for %s",
    fb3c:	4630      	mov	r0, r6
    fb3e:	1aa4      	subs	r4, r4, r2
    fb40:	f7f8 fb24 	bl	818c <bt_addr_le_str_real>
    fb44:	f7f5 fd8e 	bl	5664 <log_strdup>
    fb48:	08e4      	lsrs	r4, r4, #3
    fb4a:	01a4      	lsls	r4, r4, #6
    fb4c:	f044 0401 	orr.w	r4, r4, #1
    fb50:	4601      	mov	r1, r0
    fb52:	4622      	mov	r2, r4
    fb54:	480e      	ldr	r0, [pc, #56]	; (fb90 <smp_signing_info+0x7c>)
    fb56:	f012 fc88 	bl	2246a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fb5a:	2008      	movs	r0, #8
}
    fb5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->remote_csrk.val, req->csrk,
    fb5e:	2210      	movs	r2, #16
    fb60:	4639      	mov	r1, r7
    fb62:	3054      	adds	r0, #84	; 0x54
    fb64:	f014 fc80 	bl	24468 <memcpy>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    fb68:	f895 31a1 	ldrb.w	r3, [r5, #417]	; 0x1a1
    fb6c:	f023 0304 	bic.w	r3, r3, #4
    fb70:	f885 31a1 	strb.w	r3, [r5, #417]	; 0x1a1
	if (!smp->local_dist && !smp->remote_dist) {
    fb74:	f8b5 41a0 	ldrh.w	r4, [r5, #416]	; 0x1a0
    fb78:	b91c      	cbnz	r4, fb82 <smp_signing_info+0x6e>
		smp_pairing_complete(smp, 0);
    fb7a:	4621      	mov	r1, r4
    fb7c:	4628      	mov	r0, r5
    fb7e:	f7ff feab 	bl	f8d8 <smp_pairing_complete>
	return 0;
    fb82:	2000      	movs	r0, #0
    fb84:	e7ea      	b.n	fb5c <smp_signing_info+0x48>
    fb86:	bf00      	nop
    fb88:	000278c0 	.word	0x000278c0
    fb8c:	000279a8 	.word	0x000279a8
    fb90:	0002d1fa 	.word	0x0002d1fa

0000fb94 <smp_ident_addr_info>:
{
    fb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    fb98:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fb9a:	6805      	ldr	r5, [r0, #0]
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fb9c:	7833      	ldrb	r3, [r6, #0]
{
    fb9e:	4604      	mov	r4, r0
    fba0:	b31b      	cbz	r3, fbea <smp_ident_addr_info+0x56>
	if (!bt_addr_le_is_identity(&req->addr)) {
    fba2:	79b3      	ldrb	r3, [r6, #6]
    fba4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fba8:	2bc0      	cmp	r3, #192	; 0xc0
    fbaa:	d01e      	beq.n	fbea <smp_ident_addr_info+0x56>
    fbac:	4b43      	ldr	r3, [pc, #268]	; (fcbc <smp_ident_addr_info+0x128>)
    fbae:	4c44      	ldr	r4, [pc, #272]	; (fcc0 <smp_ident_addr_info+0x12c>)
		BT_ERR("Invalid identity %s", bt_addr_le_str(&req->addr));
    fbb0:	4630      	mov	r0, r6
    fbb2:	1ae4      	subs	r4, r4, r3
    fbb4:	f7f8 faea 	bl	818c <bt_addr_le_str_real>
    fbb8:	f7f5 fd54 	bl	5664 <log_strdup>
    fbbc:	08e4      	lsrs	r4, r4, #3
    fbbe:	01a4      	lsls	r4, r4, #6
    fbc0:	f044 0401 	orr.w	r4, r4, #1
    fbc4:	4601      	mov	r1, r0
    fbc6:	4622      	mov	r2, r4
    fbc8:	483e      	ldr	r0, [pc, #248]	; (fcc4 <smp_ident_addr_info+0x130>)
    fbca:	f012 fc4e 	bl	2246a <log_1>
		BT_ERR(" for %s", bt_addr_le_str(&conn->le.dst));
    fbce:	f105 0088 	add.w	r0, r5, #136	; 0x88
    fbd2:	f7f8 fadb 	bl	818c <bt_addr_le_str_real>
    fbd6:	f7f5 fd45 	bl	5664 <log_strdup>
    fbda:	4622      	mov	r2, r4
    fbdc:	4601      	mov	r1, r0
    fbde:	483a      	ldr	r0, [pc, #232]	; (fcc8 <smp_ident_addr_info+0x134>)
    fbe0:	f012 fc43 	bl	2246a <log_1>
		return BT_SMP_ERR_INVALID_PARAMS;
    fbe4:	200a      	movs	r0, #10
}
    fbe6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fbea:	210d      	movs	r1, #13
    fbec:	f104 00bc 	add.w	r0, r4, #188	; 0xbc
    fbf0:	f016 f939 	bl	25e66 <atomic_test_bit>
    fbf4:	2800      	cmp	r0, #0
    fbf6:	d048      	beq.n	fc8a <smp_ident_addr_info+0xf6>
		keys = bt_keys_get_type(BT_KEYS_IRK, conn->id, &conn->le.dst);
    fbf8:	f105 0788 	add.w	r7, r5, #136	; 0x88
    fbfc:	7a29      	ldrb	r1, [r5, #8]
    fbfe:	463a      	mov	r2, r7
    fc00:	2002      	movs	r0, #2
    fc02:	f016 fc1a 	bl	2643a <bt_keys_get_type>
		if (!keys) {
    fc06:	4680      	mov	r8, r0
    fc08:	b990      	cbnz	r0, fc30 <smp_ident_addr_info+0x9c>
    fc0a:	4a2c      	ldr	r2, [pc, #176]	; (fcbc <smp_ident_addr_info+0x128>)
    fc0c:	4c2c      	ldr	r4, [pc, #176]	; (fcc0 <smp_ident_addr_info+0x12c>)
			BT_ERR("Unable to get keys for %s",
    fc0e:	4638      	mov	r0, r7
    fc10:	1aa4      	subs	r4, r4, r2
    fc12:	f7f8 fabb 	bl	818c <bt_addr_le_str_real>
    fc16:	f7f5 fd25 	bl	5664 <log_strdup>
    fc1a:	08e4      	lsrs	r4, r4, #3
    fc1c:	01a4      	lsls	r4, r4, #6
    fc1e:	f044 0401 	orr.w	r4, r4, #1
    fc22:	4601      	mov	r1, r0
    fc24:	4622      	mov	r2, r4
    fc26:	4829      	ldr	r0, [pc, #164]	; (fccc <smp_ident_addr_info+0x138>)
    fc28:	f012 fc1f 	bl	2246a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fc2c:	2008      	movs	r0, #8
    fc2e:	e7da      	b.n	fbe6 <smp_ident_addr_info+0x52>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    fc30:	78eb      	ldrb	r3, [r5, #3]
    fc32:	2b00      	cmp	r3, #0
    fc34:	d13f      	bne.n	fcb6 <smp_ident_addr_info+0x122>
			dst = &conn->le.resp_addr;
    fc36:	f105 0196 	add.w	r1, r5, #150	; 0x96
	if (addr->type != BT_ADDR_LE_RANDOM) {
    fc3a:	780b      	ldrb	r3, [r1, #0]
    fc3c:	2b01      	cmp	r3, #1
    fc3e:	d121      	bne.n	fc84 <smp_ident_addr_info+0xf0>
		if (bt_addr_le_is_rpa(dst)) {
    fc40:	798b      	ldrb	r3, [r1, #6]
    fc42:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fc46:	2b40      	cmp	r3, #64	; 0x40
    fc48:	d11c      	bne.n	fc84 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fc4a:	2206      	movs	r2, #6
    fc4c:	3101      	adds	r1, #1
    fc4e:	f108 003a 	add.w	r0, r8, #58	; 0x3a
    fc52:	f014 fc09 	bl	24468 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    fc56:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    fc5a:	b19b      	cbz	r3, fc84 <smp_ident_addr_info+0xf0>
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    fc5c:	f895 308e 	ldrb.w	r3, [r5, #142]	; 0x8e
    fc60:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    fc64:	2bc0      	cmp	r3, #192	; 0xc0
    fc66:	d00d      	beq.n	fc84 <smp_ident_addr_info+0xf0>
	memcpy(dst, src, sizeof(*dst));
    fc68:	2207      	movs	r2, #7
    fc6a:	4631      	mov	r1, r6
    fc6c:	f108 0001 	add.w	r0, r8, #1
    fc70:	f014 fbfa 	bl	24468 <memcpy>
    fc74:	2207      	movs	r2, #7
    fc76:	4631      	mov	r1, r6
    fc78:	4638      	mov	r0, r7
    fc7a:	f014 fbf5 	bl	24468 <memcpy>
				bt_conn_identity_resolved(conn);
    fc7e:	4628      	mov	r0, r5
    fc80:	f7fb fb8a 	bl	b398 <bt_conn_identity_resolved>
		bt_id_add(keys);
    fc84:	4640      	mov	r0, r8
    fc86:	f7fa f9bb 	bl	a000 <bt_id_add>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fc8a:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fc8e:	f023 0202 	bic.w	r2, r3, #2
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fc92:	075b      	lsls	r3, r3, #29
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    fc94:	f884 21a1 	strb.w	r2, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fc98:	d504      	bpl.n	fca4 <smp_ident_addr_info+0x110>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fc9a:	210a      	movs	r1, #10
    fc9c:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fca0:	f016 f8ca 	bl	25e38 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    fca4:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    fca8:	b91d      	cbnz	r5, fcb2 <smp_ident_addr_info+0x11e>
		smp_pairing_complete(smp, 0);
    fcaa:	4629      	mov	r1, r5
    fcac:	4620      	mov	r0, r4
    fcae:	f7ff fe13 	bl	f8d8 <smp_pairing_complete>
	return 0;
    fcb2:	2000      	movs	r0, #0
    fcb4:	e797      	b.n	fbe6 <smp_ident_addr_info+0x52>
			dst = &conn->le.init_addr;
    fcb6:	f105 018f 	add.w	r1, r5, #143	; 0x8f
    fcba:	e7be      	b.n	fc3a <smp_ident_addr_info+0xa6>
    fcbc:	000278c0 	.word	0x000278c0
    fcc0:	000279a8 	.word	0x000279a8
    fcc4:	0002d470 	.word	0x0002d470
    fcc8:	0002d347 	.word	0x0002d347
    fccc:	0002d1fa 	.word	0x0002d1fa

0000fcd0 <smp_master_ident>:
{
    fcd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fcd2:	4604      	mov	r4, r0
    fcd4:	460b      	mov	r3, r1
	struct bt_conn *conn = smp->chan.chan.conn;
    fcd6:	f850 5bbc 	ldr.w	r5, [r0], #188
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    fcda:	210d      	movs	r1, #13
    fcdc:	f016 f8c3 	bl	25e66 <atomic_test_bit>
    fce0:	b368      	cbz	r0, fd3e <smp_master_ident+0x6e>
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fce2:	f105 0788 	add.w	r7, r5, #136	; 0x88
    fce6:	7a29      	ldrb	r1, [r5, #8]
		struct bt_smp_master_ident *req = (void *)buf->data;
    fce8:	689e      	ldr	r6, [r3, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, conn->id, &conn->le.dst);
    fcea:	463a      	mov	r2, r7
    fcec:	2004      	movs	r0, #4
    fcee:	f016 fba4 	bl	2643a <bt_keys_get_type>
		if (!keys) {
    fcf2:	4605      	mov	r5, r0
    fcf4:	b990      	cbnz	r0, fd1c <smp_master_ident+0x4c>
    fcf6:	4a1d      	ldr	r2, [pc, #116]	; (fd6c <smp_master_ident+0x9c>)
    fcf8:	4c1d      	ldr	r4, [pc, #116]	; (fd70 <smp_master_ident+0xa0>)
			BT_ERR("Unable to get keys for %s",
    fcfa:	4638      	mov	r0, r7
    fcfc:	1aa4      	subs	r4, r4, r2
    fcfe:	f7f8 fa45 	bl	818c <bt_addr_le_str_real>
    fd02:	f7f5 fcaf 	bl	5664 <log_strdup>
    fd06:	08e4      	lsrs	r4, r4, #3
    fd08:	01a4      	lsls	r4, r4, #6
    fd0a:	f044 0401 	orr.w	r4, r4, #1
    fd0e:	4601      	mov	r1, r0
    fd10:	4622      	mov	r2, r4
    fd12:	4818      	ldr	r0, [pc, #96]	; (fd74 <smp_master_ident+0xa4>)
    fd14:	f012 fba9 	bl	2246a <log_1>
			return BT_SMP_ERR_UNSPECIFIED;
    fd18:	2008      	movs	r0, #8
}
    fd1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		memcpy(keys->ltk.ediv, req->ediv, sizeof(keys->ltk.ediv));
    fd1c:	2202      	movs	r2, #2
    fd1e:	4631      	mov	r1, r6
    fd20:	3018      	adds	r0, #24
    fd22:	f014 fba1 	bl	24468 <memcpy>
		memcpy(keys->ltk.rand, req->rand, sizeof(req->rand));
    fd26:	2208      	movs	r2, #8
    fd28:	1cb1      	adds	r1, r6, #2
    fd2a:	f105 0010 	add.w	r0, r5, #16
    fd2e:	f014 fb9b 	bl	24468 <memcpy>
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    fd32:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fd36:	f023 0301 	bic.w	r3, r3, #1
    fd3a:	f884 31a1 	strb.w	r3, [r4, #417]	; 0x1a1
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fd3e:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fd42:	079a      	lsls	r2, r3, #30
    fd44:	d50d      	bpl.n	fd62 <smp_master_ident+0x92>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fd46:	2108      	movs	r1, #8
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd48:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fd4c:	f016 f874 	bl	25e38 <atomic_set_bit>
	if (!smp->local_dist && !smp->remote_dist) {
    fd50:	f8b4 51a0 	ldrh.w	r5, [r4, #416]	; 0x1a0
    fd54:	b91d      	cbnz	r5, fd5e <smp_master_ident+0x8e>
		smp_pairing_complete(smp, 0);
    fd56:	4629      	mov	r1, r5
    fd58:	4620      	mov	r0, r4
    fd5a:	f7ff fdbd 	bl	f8d8 <smp_pairing_complete>
	return 0;
    fd5e:	2000      	movs	r0, #0
    fd60:	e7db      	b.n	fd1a <smp_master_ident+0x4a>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fd62:	075b      	lsls	r3, r3, #29
    fd64:	d5f4      	bpl.n	fd50 <smp_master_ident+0x80>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fd66:	210a      	movs	r1, #10
    fd68:	e7ee      	b.n	fd48 <smp_master_ident+0x78>
    fd6a:	bf00      	nop
    fd6c:	000278c0 	.word	0x000278c0
    fd70:	000279a8 	.word	0x000279a8
    fd74:	0002d1fa 	.word	0x0002d1fa

0000fd78 <smp_pairing_failed>:
{
    fd78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    fd7a:	4a15      	ldr	r2, [pc, #84]	; (fdd0 <smp_pairing_failed+0x58>)
    fd7c:	4b15      	ldr	r3, [pc, #84]	; (fdd4 <smp_pairing_failed+0x5c>)
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    fd7e:	688e      	ldr	r6, [r1, #8]
	struct bt_conn *conn = smp->chan.chan.conn;
    fd80:	4605      	mov	r5, r0
    fd82:	1ad2      	subs	r2, r2, r3
    fd84:	08d2      	lsrs	r2, r2, #3
    fd86:	f855 7bbc 	ldr.w	r7, [r5], #188
	BT_ERR("reason 0x%x", req->reason);
    fd8a:	7831      	ldrb	r1, [r6, #0]
    fd8c:	0192      	lsls	r2, r2, #6
{
    fd8e:	4604      	mov	r4, r0
	BT_ERR("reason 0x%x", req->reason);
    fd90:	f042 0201 	orr.w	r2, r2, #1
    fd94:	4810      	ldr	r0, [pc, #64]	; (fdd8 <smp_pairing_failed+0x60>)
    fd96:	f012 fb68 	bl	2246a <log_1>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fd9a:	210a      	movs	r1, #10
    fd9c:	4628      	mov	r0, r5
    fd9e:	f016 f8e6 	bl	25f6e <atomic_test_and_clear_bit>
    fda2:	b140      	cbz	r0, fdb6 <smp_pairing_failed+0x3e>
		if (bt_auth && bt_auth->cancel) {
    fda4:	4b0d      	ldr	r3, [pc, #52]	; (fddc <smp_pairing_failed+0x64>)
    fda6:	681b      	ldr	r3, [r3, #0]
    fda8:	b963      	cbnz	r3, fdc4 <smp_pairing_failed+0x4c>
	smp_pairing_complete(smp, req->reason);
    fdaa:	4620      	mov	r0, r4
    fdac:	7831      	ldrb	r1, [r6, #0]
    fdae:	f7ff fd93 	bl	f8d8 <smp_pairing_complete>
}
    fdb2:	2000      	movs	r0, #0
    fdb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    atomic_test_and_clear_bit(smp->flags, SMP_FLAG_DISPLAY)) {
    fdb6:	210b      	movs	r1, #11
    fdb8:	4628      	mov	r0, r5
    fdba:	f016 f8d8 	bl	25f6e <atomic_test_and_clear_bit>
	if (atomic_test_and_clear_bit(smp->flags, SMP_FLAG_USER) ||
    fdbe:	2800      	cmp	r0, #0
    fdc0:	d1f0      	bne.n	fda4 <smp_pairing_failed+0x2c>
    fdc2:	e7f2      	b.n	fdaa <smp_pairing_failed+0x32>
		if (bt_auth && bt_auth->cancel) {
    fdc4:	691b      	ldr	r3, [r3, #16]
    fdc6:	2b00      	cmp	r3, #0
    fdc8:	d0ef      	beq.n	fdaa <smp_pairing_failed+0x32>
			bt_auth->cancel(conn);
    fdca:	4638      	mov	r0, r7
    fdcc:	4798      	blx	r3
    fdce:	e7ec      	b.n	fdaa <smp_pairing_failed+0x32>
    fdd0:	000279a8 	.word	0x000279a8
    fdd4:	000278c0 	.word	0x000278c0
    fdd8:	0002d484 	.word	0x0002d484
    fddc:	2000d744 	.word	0x2000d744

0000fde0 <bt_smp_encrypt_change>:
{
    fde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct bt_conn *conn = chan->conn;
    fde4:	4605      	mov	r5, r0
{
    fde6:	b089      	sub	sp, #36	; 0x24
	struct bt_conn *conn = chan->conn;
    fde8:	f855 7bbc 	ldr.w	r7, [r5], #188
{
    fdec:	4604      	mov	r4, r0
    fdee:	460e      	mov	r6, r1
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    fdf0:	4628      	mov	r0, r5
    fdf2:	2101      	movs	r1, #1
    fdf4:	f016 f8bb 	bl	25f6e <atomic_test_and_clear_bit>
    fdf8:	2800      	cmp	r0, #0
    fdfa:	f000 8178 	beq.w	100ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xef>
	if (hci_status) {
    fdfe:	b1de      	cbz	r6, fe38 <bt_smp_encrypt_change+0x58>
		if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fe00:	2103      	movs	r1, #3
    fe02:	4628      	mov	r0, r5
    fe04:	f016 f82f 	bl	25e66 <atomic_test_bit>
    fe08:	2800      	cmp	r0, #0
    fe0a:	f000 8170 	beq.w	100ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xef>
			uint8_t smp_err = smp_err_get(
    fe0e:	4630      	mov	r0, r6
    fe10:	f7fa f848 	bl	9ea4 <bt_security_err_get>
	switch (auth_err) {
    fe14:	3801      	subs	r0, #1
    fe16:	b2c0      	uxtb	r0, r0
    fe18:	2807      	cmp	r0, #7
    fe1a:	bf9a      	itte	ls
    fe1c:	4bb5      	ldrls	r3, [pc, #724]	; (100f4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf5>)
    fe1e:	5c1e      	ldrbls	r6, [r3, r0]
			uint8_t smp_err = smp_err_get(
    fe20:	2600      	movhi	r6, #0
			atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    fe22:	2102      	movs	r1, #2
    fe24:	4628      	mov	r0, r5
    fe26:	f016 f807 	bl	25e38 <atomic_set_bit>
			smp_pairing_complete(smp, smp_err);
    fe2a:	4631      	mov	r1, r6
		smp_pairing_complete(smp, 0);
    fe2c:	4620      	mov	r0, r4
}
    fe2e:	b009      	add	sp, #36	; 0x24
    fe30:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_pairing_complete(smp, 0);
    fe34:	f7ff bd50 	b.w	f8d8 <smp_pairing_complete>
	if (!conn->encrypt) {
    fe38:	7afb      	ldrb	r3, [r7, #11]
    fe3a:	2b00      	cmp	r3, #0
    fe3c:	f000 8157 	beq.w	100ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xef>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    fe40:	2103      	movs	r1, #3
    fe42:	4628      	mov	r0, r5
    fe44:	f016 f80f 	bl	25e66 <atomic_test_bit>
    fe48:	b928      	cbnz	r0, fe56 <bt_smp_encrypt_change+0x76>
		smp_reset(smp);
    fe4a:	4620      	mov	r0, r4
}
    fe4c:	b009      	add	sp, #36	; 0x24
    fe4e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		smp_reset(smp);
    fe52:	f016 b8a4 	b.w	25f9e <smp_reset>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fe56:	2105      	movs	r1, #5
    fe58:	4628      	mov	r0, r5
    fe5a:	f016 f804 	bl	25e66 <atomic_test_bit>
    fe5e:	b198      	cbz	r0, fe88 <bt_smp_encrypt_change+0xa8>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    fe60:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    fe64:	071a      	lsls	r2, r3, #28
    fe66:	d507      	bpl.n	fe78 <bt_smp_encrypt_change+0x98>
    fe68:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fe6c:	071b      	lsls	r3, r3, #28
    fe6e:	d503      	bpl.n	fe78 <bt_smp_encrypt_change+0x98>
			atomic_set_bit(smp->flags, SMP_FLAG_DERIVE_LK);
    fe70:	2111      	movs	r1, #17
    fe72:	4628      	mov	r0, r5
    fe74:	f015 ffe0 	bl	25e38 <atomic_set_bit>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    fe78:	f8b4 31a0 	ldrh.w	r3, [r4, #416]	; 0x1a0
    fe7c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    fe80:	f023 0308 	bic.w	r3, r3, #8
    fe84:	f8a4 31a0 	strh.w	r3, [r4, #416]	; 0x1a0
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    fe88:	f894 31a1 	ldrb.w	r3, [r4, #417]	; 0x1a1
    fe8c:	07df      	lsls	r7, r3, #31
    fe8e:	d521      	bpl.n	fed4 <bt_smp_encrypt_change+0xf4>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    fe90:	2106      	movs	r1, #6
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fe92:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
    fe96:	f015 ffcf 	bl	25e38 <atomic_set_bit>
	atomic_set_bit(smp->flags, SMP_FLAG_KEYS_DISTR);
    fe9a:	2102      	movs	r1, #2
    fe9c:	4628      	mov	r0, r5
    fe9e:	f015 ffcb 	bl	25e38 <atomic_set_bit>
	struct bt_conn *conn = smp->chan.chan.conn;
    fea2:	6826      	ldr	r6, [r4, #0]
	struct bt_keys *keys = conn->le.keys;
    fea4:	f8d6 70b4 	ldr.w	r7, [r6, #180]	; 0xb4
	if (!keys) {
    fea8:	b9e7      	cbnz	r7, fee4 <bt_smp_encrypt_change+0x104>
    feaa:	4a93      	ldr	r2, [pc, #588]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
    feac:	4c93      	ldr	r4, [pc, #588]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    feae:	f106 0088 	add.w	r0, r6, #136	; 0x88
    feb2:	1aa4      	subs	r4, r4, r2
    feb4:	f7f8 f96a 	bl	818c <bt_addr_le_str_real>
    feb8:	f7f5 fbd4 	bl	5664 <log_strdup>
    febc:	08e4      	lsrs	r4, r4, #3
    febe:	01a4      	lsls	r4, r4, #6
    fec0:	f044 0401 	orr.w	r4, r4, #1
    fec4:	4601      	mov	r1, r0
    fec6:	488e      	ldr	r0, [pc, #568]	; (10100 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x101>)
    fec8:	4622      	mov	r2, r4
}
    feca:	b009      	add	sp, #36	; 0x24
    fecc:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		BT_ERR("No keys space for %s", bt_addr_le_str(&conn->le.dst));
    fed0:	f012 bacb 	b.w	2246a <log_1>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    fed4:	079e      	lsls	r6, r3, #30
    fed6:	d501      	bpl.n	fedc <bt_smp_encrypt_change+0xfc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    fed8:	2108      	movs	r1, #8
    feda:	e7da      	b.n	fe92 <bt_smp_encrypt_change+0xb2>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    fedc:	0758      	lsls	r0, r3, #29
    fede:	d5dc      	bpl.n	fe9a <bt_smp_encrypt_change+0xba>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    fee0:	210a      	movs	r1, #10
    fee2:	e7d6      	b.n	fe92 <bt_smp_encrypt_change+0xb2>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    fee4:	2105      	movs	r1, #5
    fee6:	f015 ffbe 	bl	25e66 <atomic_test_bit>
    feea:	b9b0      	cbnz	r0, ff1a <bt_smp_encrypt_change+0x13a>
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    feec:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    fef0:	07d9      	lsls	r1, r3, #31
    fef2:	d512      	bpl.n	ff1a <bt_smp_encrypt_change+0x13a>
	struct bt_keys *keys = conn->le.keys;
    fef4:	6823      	ldr	r3, [r4, #0]
		if (bt_rand((void *)&rand, sizeof(rand))) {
    fef6:	211a      	movs	r1, #26
    fef8:	a801      	add	r0, sp, #4
	struct bt_keys *keys = conn->le.keys;
    fefa:	f8d3 80b4 	ldr.w	r8, [r3, #180]	; 0xb4
		if (bt_rand((void *)&rand, sizeof(rand))) {
    fefe:	f003 fb09 	bl	13514 <bt_rand>
    ff02:	4682      	mov	sl, r0
    ff04:	b310      	cbz	r0, ff4c <bt_smp_encrypt_change+0x16c>
    ff06:	497d      	ldr	r1, [pc, #500]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
    ff08:	4b7b      	ldr	r3, [pc, #492]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
			BT_ERR("Unable to get random bytes");
    ff0a:	487e      	ldr	r0, [pc, #504]	; (10104 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x105>)
    ff0c:	1ac9      	subs	r1, r1, r3
    ff0e:	08c9      	lsrs	r1, r1, #3
    ff10:	0189      	lsls	r1, r1, #6
    ff12:	f041 0101 	orr.w	r1, r1, #1
			BT_ERR("Unable to allocate Encrypt Info buffer");
    ff16:	f012 fa9b 	bl	22450 <log_0>
	if (smp->local_dist & BT_SMP_DIST_ID_KEY) {
    ff1a:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
    ff1e:	079a      	lsls	r2, r3, #30
    ff20:	f140 80ad 	bpl.w	1007e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x7f>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_INFO,
    ff24:	2108      	movs	r1, #8
    ff26:	4620      	mov	r0, r4
    ff28:	f015 ffa6 	bl	25e78 <smp_create_pdu.constprop.0>
		if (!buf) {
    ff2c:	4680      	mov	r8, r0
    ff2e:	2800      	cmp	r0, #0
    ff30:	d174      	bne.n	1001c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x1d>
    ff32:	4972      	ldr	r1, [pc, #456]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
    ff34:	4b70      	ldr	r3, [pc, #448]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
			BT_ERR("Unable to allocate Ident Info buffer");
    ff36:	4874      	ldr	r0, [pc, #464]	; (10108 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x109>)
    ff38:	1ac9      	subs	r1, r1, r3
    ff3a:	08c9      	lsrs	r1, r1, #3
    ff3c:	0189      	lsls	r1, r1, #6
    ff3e:	f041 0101 	orr.w	r1, r1, #1
}
    ff42:	b009      	add	sp, #36	; 0x24
    ff44:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
			BT_ERR("Unable to allocate Ident Addr Info buffer");
    ff48:	f012 ba82 	b.w	22450 <log_0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_ENCRYPT_INFO,
    ff4c:	2106      	movs	r1, #6
    ff4e:	4620      	mov	r0, r4
    ff50:	f015 ff92 	bl	25e78 <smp_create_pdu.constprop.0>
		if (!buf) {
    ff54:	4681      	mov	r9, r0
    ff56:	b940      	cbnz	r0, ff6a <bt_smp_encrypt_change+0x18a>
    ff58:	4968      	ldr	r1, [pc, #416]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
    ff5a:	4b67      	ldr	r3, [pc, #412]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
			BT_ERR("Unable to allocate Encrypt Info buffer");
    ff5c:	486b      	ldr	r0, [pc, #428]	; (1010c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x10d>)
    ff5e:	1ac9      	subs	r1, r1, r3
    ff60:	08c9      	lsrs	r1, r1, #3
    ff62:	0189      	lsls	r1, r1, #6
    ff64:	f041 0101 	orr.w	r1, r1, #1
    ff68:	e7d5      	b.n	ff16 <bt_smp_encrypt_change+0x136>
	return net_buf_simple_add(&buf->b, len);
    ff6a:	2110      	movs	r1, #16
    ff6c:	3008      	adds	r0, #8
    ff6e:	f016 facf 	bl	26510 <net_buf_simple_add>
		memcpy(info->ltk, rand.key, keys->enc_size);
    ff72:	f898 200c 	ldrb.w	r2, [r8, #12]
    ff76:	a901      	add	r1, sp, #4
    ff78:	4683      	mov	fp, r0
    ff7a:	f014 fa75 	bl	24468 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    ff7e:	f898 000c 	ldrb.w	r0, [r8, #12]
    ff82:	280f      	cmp	r0, #15
    ff84:	d805      	bhi.n	ff92 <bt_smp_encrypt_change+0x1b2>
			(void)memset(info->ltk + keys->enc_size, 0,
    ff86:	f1c0 0210 	rsb	r2, r0, #16
    ff8a:	4651      	mov	r1, sl
    ff8c:	4458      	add	r0, fp
    ff8e:	f014 fa96 	bl	244be <memset>
		smp_send(smp, buf, NULL, NULL);
    ff92:	4649      	mov	r1, r9
    ff94:	2200      	movs	r2, #0
    ff96:	4620      	mov	r0, r4
    ff98:	f7fe fc26 	bl	e7e8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_MASTER_IDENT,
    ff9c:	2107      	movs	r1, #7
    ff9e:	4620      	mov	r0, r4
    ffa0:	f015 ff6a 	bl	25e78 <smp_create_pdu.constprop.0>
		if (!buf) {
    ffa4:	4681      	mov	r9, r0
    ffa6:	b940      	cbnz	r0, ffba <bt_smp_encrypt_change+0x1da>
    ffa8:	4954      	ldr	r1, [pc, #336]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
    ffaa:	4b53      	ldr	r3, [pc, #332]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
			BT_ERR("Unable to allocate Master Ident buffer");
    ffac:	4858      	ldr	r0, [pc, #352]	; (10110 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x111>)
    ffae:	1ac9      	subs	r1, r1, r3
    ffb0:	08c9      	lsrs	r1, r1, #3
    ffb2:	0189      	lsls	r1, r1, #6
    ffb4:	f041 0101 	orr.w	r1, r1, #1
    ffb8:	e7ad      	b.n	ff16 <bt_smp_encrypt_change+0x136>
    ffba:	210a      	movs	r1, #10
    ffbc:	3008      	adds	r0, #8
    ffbe:	f016 faa7 	bl	26510 <net_buf_simple_add>
		memcpy(ident->rand, rand.rand, sizeof(ident->rand));
    ffc2:	2208      	movs	r2, #8
    ffc4:	4682      	mov	sl, r0
    ffc6:	a905      	add	r1, sp, #20
    ffc8:	3002      	adds	r0, #2
    ffca:	f014 fa4d 	bl	24468 <memcpy>
		memcpy(ident->ediv, rand.ediv, sizeof(ident->ediv));
    ffce:	2202      	movs	r2, #2
    ffd0:	a907      	add	r1, sp, #28
    ffd2:	4650      	mov	r0, sl
    ffd4:	f014 fa48 	bl	24468 <memcpy>
		smp_send(smp, buf, smp_ident_sent, NULL);
    ffd8:	4649      	mov	r1, r9
    ffda:	4620      	mov	r0, r4
    ffdc:	4a4d      	ldr	r2, [pc, #308]	; (10114 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x115>)
    ffde:	f7fe fc03 	bl	e7e8 <smp_send.constprop.0>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ffe2:	210d      	movs	r1, #13
    ffe4:	4628      	mov	r0, r5
    ffe6:	f015 ff3e 	bl	25e66 <atomic_test_bit>
    ffea:	2800      	cmp	r0, #0
    ffec:	d095      	beq.n	ff1a <bt_smp_encrypt_change+0x13a>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    ffee:	4640      	mov	r0, r8
    fff0:	2101      	movs	r1, #1
    fff2:	f016 fa32 	bl	2645a <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, rand.key,
    fff6:	a901      	add	r1, sp, #4
    fff8:	2210      	movs	r2, #16
    fffa:	f108 0072 	add.w	r0, r8, #114	; 0x72
    fffe:	f014 fa33 	bl	24468 <memcpy>
			memcpy(keys->slave_ltk.rand, rand.rand,
   10002:	a905      	add	r1, sp, #20
   10004:	2208      	movs	r2, #8
   10006:	f108 0068 	add.w	r0, r8, #104	; 0x68
   1000a:	f014 fa2d 	bl	24468 <memcpy>
			memcpy(keys->slave_ltk.ediv, rand.ediv,
   1000e:	2202      	movs	r2, #2
   10010:	a907      	add	r1, sp, #28
   10012:	f108 0070 	add.w	r0, r8, #112	; 0x70
   10016:	f014 fa27 	bl	24468 <memcpy>
   1001a:	e77e      	b.n	ff1a <bt_smp_encrypt_change+0x13a>
   1001c:	2110      	movs	r1, #16
   1001e:	3008      	adds	r0, #8
   10020:	f016 fa76 	bl	26510 <net_buf_simple_add>
		memcpy(id_info->irk, bt_dev.irk[conn->id], 16);
   10024:	7a31      	ldrb	r1, [r6, #8]
   10026:	f8df 90f0 	ldr.w	r9, [pc, #240]	; 10118 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x119>
   1002a:	3112      	adds	r1, #18
   1002c:	2210      	movs	r2, #16
   1002e:	eb09 1101 	add.w	r1, r9, r1, lsl #4
   10032:	f014 fa19 	bl	24468 <memcpy>
		smp_send(smp, buf, NULL, NULL);
   10036:	4641      	mov	r1, r8
   10038:	2200      	movs	r2, #0
   1003a:	4620      	mov	r0, r4
   1003c:	f7fe fbd4 	bl	e7e8 <smp_send.constprop.0>
		buf = smp_create_pdu(smp, BT_SMP_CMD_IDENT_ADDR_INFO,
   10040:	2109      	movs	r1, #9
   10042:	4620      	mov	r0, r4
   10044:	f015 ff18 	bl	25e78 <smp_create_pdu.constprop.0>
		if (!buf) {
   10048:	4680      	mov	r8, r0
   1004a:	b940      	cbnz	r0, 1005e <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x5f>
   1004c:	492b      	ldr	r1, [pc, #172]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
   1004e:	4b2a      	ldr	r3, [pc, #168]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
			BT_ERR("Unable to allocate Ident Addr Info buffer");
   10050:	4832      	ldr	r0, [pc, #200]	; (1011c <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x11d>)
   10052:	1ac9      	subs	r1, r1, r3
   10054:	08c9      	lsrs	r1, r1, #3
   10056:	0189      	lsls	r1, r1, #6
   10058:	f041 0101 	orr.w	r1, r1, #1
   1005c:	e771      	b.n	ff42 <bt_smp_encrypt_change+0x162>
   1005e:	2107      	movs	r1, #7
   10060:	3008      	adds	r0, #8
   10062:	f016 fa55 	bl	26510 <net_buf_simple_add>
		bt_addr_le_copy(&id_addr_info->addr, &bt_dev.id_addr[conn->id]);
   10066:	7a31      	ldrb	r1, [r6, #8]
   10068:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
   1006c:	2207      	movs	r2, #7
   1006e:	4449      	add	r1, r9
   10070:	f014 f9fa 	bl	24468 <memcpy>
		smp_send(smp, buf, smp_id_sent, NULL);
   10074:	4a2a      	ldr	r2, [pc, #168]	; (10120 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x121>)
   10076:	4641      	mov	r1, r8
   10078:	4620      	mov	r0, r4
   1007a:	f7fe fbb5 	bl	e7e8 <smp_send.constprop.0>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
   1007e:	f894 31a0 	ldrb.w	r3, [r4, #416]	; 0x1a0
   10082:	075b      	lsls	r3, r3, #29
   10084:	d52e      	bpl.n	100e4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xe5>
		buf = smp_create_pdu(smp, BT_SMP_CMD_SIGNING_INFO,
   10086:	210a      	movs	r1, #10
   10088:	4620      	mov	r0, r4
   1008a:	f015 fef5 	bl	25e78 <smp_create_pdu.constprop.0>
		if (!buf) {
   1008e:	4606      	mov	r6, r0
   10090:	b940      	cbnz	r0, 100a4 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xa5>
   10092:	491a      	ldr	r1, [pc, #104]	; (100fc <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xfd>)
   10094:	4b18      	ldr	r3, [pc, #96]	; (100f8 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xf9>)
			BT_ERR("Unable to allocate Signing Info buffer");
   10096:	4823      	ldr	r0, [pc, #140]	; (10124 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x125>)
   10098:	1ac9      	subs	r1, r1, r3
   1009a:	08c9      	lsrs	r1, r1, #3
   1009c:	0189      	lsls	r1, r1, #6
   1009e:	f041 0101 	orr.w	r1, r1, #1
   100a2:	e74e      	b.n	ff42 <bt_smp_encrypt_change+0x162>
   100a4:	2110      	movs	r1, #16
   100a6:	3008      	adds	r0, #8
   100a8:	f016 fa32 	bl	26510 <net_buf_simple_add>
		if (bt_rand(info->csrk, sizeof(info->csrk))) {
   100ac:	2110      	movs	r1, #16
   100ae:	4681      	mov	r9, r0
   100b0:	f003 fa30 	bl	13514 <bt_rand>
   100b4:	4680      	mov	r8, r0
   100b6:	b9d0      	cbnz	r0, 100ee <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xef>
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   100b8:	210d      	movs	r1, #13
   100ba:	4628      	mov	r0, r5
   100bc:	f015 fed3 	bl	25e66 <atomic_test_bit>
   100c0:	b158      	cbz	r0, 100da <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0xdb>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
   100c2:	2108      	movs	r1, #8
   100c4:	4638      	mov	r0, r7
   100c6:	f016 f9c8 	bl	2645a <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
   100ca:	2210      	movs	r2, #16
   100cc:	4649      	mov	r1, r9
   100ce:	f107 0040 	add.w	r0, r7, #64	; 0x40
   100d2:	f014 f9c9 	bl	24468 <memcpy>
			keys->local_csrk.cnt = 0U;
   100d6:	f8c7 8050 	str.w	r8, [r7, #80]	; 0x50
		smp_send(smp, buf, smp_sign_info_sent, NULL);
   100da:	4a13      	ldr	r2, [pc, #76]	; (10128 <CONFIG_BT_CTLR_SUBVERSION_NUMBER+0x129>)
   100dc:	4631      	mov	r1, r6
   100de:	4620      	mov	r0, r4
   100e0:	f7fe fb82 	bl	e7e8 <smp_send.constprop.0>
	if (!smp->local_dist && !smp->remote_dist) {
   100e4:	f8b4 11a0 	ldrh.w	r1, [r4, #416]	; 0x1a0
   100e8:	2900      	cmp	r1, #0
   100ea:	f43f ae9f 	beq.w	fe2c <bt_smp_encrypt_change+0x4c>
}
   100ee:	b009      	add	sp, #36	; 0x24
   100f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   100f4:	0002d5a5 	.word	0x0002d5a5
   100f8:	000278c0 	.word	0x000278c0
   100fc:	000279a8 	.word	0x000279a8
   10100:	0002d490 	.word	0x0002d490
   10104:	0002d4a5 	.word	0x0002d4a5
   10108:	0002d50e 	.word	0x0002d50e
   1010c:	0002d4c0 	.word	0x0002d4c0
   10110:	0002d4e7 	.word	0x0002d4e7
   10114:	000263cd 	.word	0x000263cd
   10118:	20000008 	.word	0x20000008
   1011c:	0002d533 	.word	0x0002d533
   10120:	000263c7 	.word	0x000263c7
   10124:	0002d55d 	.word	0x0002d55d
   10128:	000263c1 	.word	0x000263c1

0001012c <smp_timeout>:
   1012c:	4b0b      	ldr	r3, [pc, #44]	; (1015c <smp_timeout+0x30>)
   1012e:	490c      	ldr	r1, [pc, #48]	; (10160 <smp_timeout+0x34>)
{
   10130:	b510      	push	{r4, lr}
   10132:	1ac9      	subs	r1, r1, r3
   10134:	08c9      	lsrs	r1, r1, #3
	BT_ERR("SMP Timeout");
   10136:	0189      	lsls	r1, r1, #6
{
   10138:	4604      	mov	r4, r0
	BT_ERR("SMP Timeout");
   1013a:	f041 0101 	orr.w	r1, r1, #1
   1013e:	4809      	ldr	r0, [pc, #36]	; (10164 <smp_timeout+0x38>)
   10140:	f012 f986 	bl	22450 <log_0>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   10144:	f5a4 70d4 	sub.w	r0, r4, #424	; 0x1a8
   10148:	2108      	movs	r1, #8
   1014a:	f7ff fbc5 	bl	f8d8 <smp_pairing_complete>
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   1014e:	f1a4 00ec 	sub.w	r0, r4, #236	; 0xec
   10152:	2104      	movs	r1, #4
}
   10154:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   10158:	f015 be6e 	b.w	25e38 <atomic_set_bit>
   1015c:	000278c0 	.word	0x000278c0
   10160:	000279a8 	.word	0x000279a8
   10164:	0002d584 	.word	0x0002d584

00010168 <bt_smp_update_keys>:
{
   10168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1016a:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   1016c:	f7fe fae4 	bl	e738 <smp_chan_get>
	if (!smp) {
   10170:	4605      	mov	r5, r0
   10172:	2800      	cmp	r0, #0
   10174:	f000 8081 	beq.w	1027a <bt_smp_update_keys+0x112>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
   10178:	f100 06bc 	add.w	r6, r0, #188	; 0xbc
   1017c:	2103      	movs	r1, #3
   1017e:	4630      	mov	r0, r6
   10180:	f015 fe71 	bl	25e66 <atomic_test_bit>
   10184:	2800      	cmp	r0, #0
   10186:	d078      	beq.n	1027a <bt_smp_update_keys+0x112>
	if (conn->le.keys) {
   10188:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1018c:	b108      	cbz	r0, 10192 <bt_smp_update_keys+0x2a>
		bt_keys_clear(conn->le.keys);
   1018e:	f000 f965 	bl	1045c <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(conn->id, &conn->le.dst);
   10192:	f104 0788 	add.w	r7, r4, #136	; 0x88
   10196:	7a20      	ldrb	r0, [r4, #8]
   10198:	4639      	mov	r1, r7
   1019a:	f000 f88b 	bl	102b4 <bt_keys_get_addr>
   1019e:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (!conn->le.keys) {
   101a2:	b9b0      	cbnz	r0, 101d2 <bt_smp_update_keys+0x6a>
   101a4:	4a35      	ldr	r2, [pc, #212]	; (1027c <bt_smp_update_keys+0x114>)
   101a6:	4c36      	ldr	r4, [pc, #216]	; (10280 <bt_smp_update_keys+0x118>)
		BT_ERR("Unable to get keys for %s",
   101a8:	4638      	mov	r0, r7
   101aa:	1aa4      	subs	r4, r4, r2
   101ac:	f7f7 ffee 	bl	818c <bt_addr_le_str_real>
   101b0:	f7f5 fa58 	bl	5664 <log_strdup>
   101b4:	08e4      	lsrs	r4, r4, #3
   101b6:	01a4      	lsls	r4, r4, #6
   101b8:	f044 0401 	orr.w	r4, r4, #1
   101bc:	4601      	mov	r1, r0
   101be:	4622      	mov	r2, r4
   101c0:	4830      	ldr	r0, [pc, #192]	; (10284 <bt_smp_update_keys+0x11c>)
   101c2:	f012 f952 	bl	2246a <log_1>
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   101c6:	4628      	mov	r0, r5
   101c8:	2108      	movs	r1, #8
}
   101ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
   101ce:	f016 b86b 	b.w	262a8 <smp_error>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
   101d2:	210e      	movs	r1, #14
   101d4:	4630      	mov	r0, r6
   101d6:	f015 fe46 	bl	25e66 <atomic_test_bit>
   101da:	b128      	cbz	r0, 101e8 <bt_smp_update_keys+0x80>
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   101dc:	f8d4 20b4 	ldr.w	r2, [r4, #180]	; 0xb4
   101e0:	7b53      	ldrb	r3, [r2, #13]
   101e2:	f043 0302 	orr.w	r3, r3, #2
   101e6:	7353      	strb	r3, [r2, #13]
	switch (smp->method) {
   101e8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		conn->le.keys->flags |= BT_KEYS_DEBUG;
   101ec:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
	switch (smp->method) {
   101f0:	2a03      	cmp	r2, #3
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   101f2:	7b4b      	ldrb	r3, [r1, #13]
	switch (smp->method) {
   101f4:	d838      	bhi.n	10268 <bt_smp_update_keys+0x100>
   101f6:	b3d2      	cbz	r2, 1026e <bt_smp_update_keys+0x106>
		conn->le.keys->flags |= BT_KEYS_AUTHENTICATED;
   101f8:	f043 0301 	orr.w	r3, r3, #1
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   101fc:	734b      	strb	r3, [r1, #13]
	return MIN(req->max_key_size, rsp->max_key_size);
   101fe:	f895 30cc 	ldrb.w	r3, [r5, #204]	; 0xcc
   10202:	f895 20c5 	ldrb.w	r2, [r5, #197]	; 0xc5
   10206:	4293      	cmp	r3, r2
   10208:	bf28      	it	cs
   1020a:	4613      	movcs	r3, r2
	conn->le.keys->enc_size = get_encryption_key_size(smp);
   1020c:	730b      	strb	r3, [r1, #12]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1020e:	4630      	mov	r0, r6
   10210:	2105      	movs	r1, #5
   10212:	f015 fe28 	bl	25e66 <atomic_test_bit>
   10216:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
		conn->le.keys->flags |= BT_KEYS_SC;
   1021a:	7b5a      	ldrb	r2, [r3, #13]
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
   1021c:	b350      	cbz	r0, 10274 <bt_smp_update_keys+0x10c>
		conn->le.keys->flags |= BT_KEYS_SC;
   1021e:	f042 0210 	orr.w	r2, r2, #16
   10222:	735a      	strb	r2, [r3, #13]
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
   10224:	210d      	movs	r1, #13
   10226:	4630      	mov	r0, r6
   10228:	f015 fe1d 	bl	25e66 <atomic_test_bit>
   1022c:	b328      	cbz	r0, 1027a <bt_smp_update_keys+0x112>
			bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
   1022e:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   10232:	2120      	movs	r1, #32
   10234:	f016 f911 	bl	2645a <bt_keys_add_type>
			memcpy(conn->le.keys->ltk.val, smp->tk,
   10238:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1023c:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   10240:	2210      	movs	r2, #16
   10242:	301a      	adds	r0, #26
   10244:	f014 f910 	bl	24468 <memcpy>
			(void)memset(conn->le.keys->ltk.rand, 0,
   10248:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1024c:	2208      	movs	r2, #8
   1024e:	2100      	movs	r1, #0
   10250:	3010      	adds	r0, #16
   10252:	f014 f934 	bl	244be <memset>
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10256:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   1025a:	2202      	movs	r2, #2
}
   1025c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			(void)memset(conn->le.keys->ltk.ediv, 0,
   10260:	2100      	movs	r1, #0
   10262:	3018      	adds	r0, #24
   10264:	f014 b92b 	b.w	244be <memset>
	switch (smp->method) {
   10268:	3a05      	subs	r2, #5
   1026a:	2a01      	cmp	r2, #1
   1026c:	d9c4      	bls.n	101f8 <bt_smp_update_keys+0x90>
		conn->le.keys->flags &= ~BT_KEYS_AUTHENTICATED;
   1026e:	f023 0301 	bic.w	r3, r3, #1
   10272:	e7c3      	b.n	101fc <bt_smp_update_keys+0x94>
		conn->le.keys->flags &= ~BT_KEYS_SC;
   10274:	f022 0210 	bic.w	r2, r2, #16
   10278:	735a      	strb	r2, [r3, #13]
}
   1027a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1027c:	000278c0 	.word	0x000278c0
   10280:	000279a8 	.word	0x000279a8
   10284:	0002d1fa 	.word	0x0002d1fa

00010288 <bt_smp_init>:
BT_L2CAP_CHANNEL_DEFINE(smp_br_fixed_chan, BT_L2CAP_CID_BR_SMP,
			bt_smp_br_accept, NULL);
#endif /* CONFIG_BT_BREDR */

int bt_smp_init(void)
{
   10288:	b508      	push	{r3, lr}
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1028a:	4b07      	ldr	r3, [pc, #28]	; (102a8 <bt_smp_init+0x20>)
	}

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	if (!IS_ENABLED(CONFIG_BT_SMP_OOB_LEGACY_PAIR_ONLY)) {
		bt_pub_key_gen(&pub_key_cb);
   1028c:	4807      	ldr	r0, [pc, #28]	; (102ac <bt_smp_init+0x24>)
	return BT_CMD_TEST(bt_dev.supported_commands, 34, 1) &&
   1028e:	f893 3066 	ldrb.w	r3, [r3, #102]	; 0x66
   10292:	f003 0306 	and.w	r3, r3, #6
   10296:	1f9a      	subs	r2, r3, #6
   10298:	4253      	negs	r3, r2
   1029a:	4153      	adcs	r3, r2
   1029c:	4a04      	ldr	r2, [pc, #16]	; (102b0 <bt_smp_init+0x28>)
   1029e:	7013      	strb	r3, [r2, #0]
		bt_pub_key_gen(&pub_key_cb);
   102a0:	f7fa fed0 	bl	b044 <bt_pub_key_gen>
	}

	return smp_self_test();
}
   102a4:	2000      	movs	r0, #0
   102a6:	bd08      	pop	{r3, pc}
   102a8:	20000008 	.word	0x20000008
   102ac:	20000394 	.word	0x20000394
   102b0:	2000f315 	.word	0x2000f315

000102b4 <bt_keys_get_addr>:
static uint32_t aging_counter_val;
static struct bt_keys *last_keys_updated;
#endif /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */

struct bt_keys *bt_keys_get_addr(uint8_t id, const bt_addr_le_t *addr)
{
   102b4:	b5f0      	push	{r4, r5, r6, r7, lr}
	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		keys = &key_pool[i];

		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   102b6:	4c1f      	ldr	r4, [pc, #124]	; (10334 <bt_keys_get_addr+0x80>)
   102b8:	7823      	ldrb	r3, [r4, #0]
   102ba:	4283      	cmp	r3, r0
{
   102bc:	b085      	sub	sp, #20
   102be:	4606      	mov	r6, r0
   102c0:	460f      	mov	r7, r1
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   102c2:	d02b      	beq.n	1031c <bt_keys_get_addr+0x68>
			return keys;
		}

		if (first_free_slot == ARRAY_SIZE(key_pool) &&
		    !bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
   102c4:	2500      	movs	r5, #0
	return memcmp(a, b, sizeof(*a));
   102c6:	481c      	ldr	r0, [pc, #112]	; (10338 <bt_keys_get_addr+0x84>)
   102c8:	9502      	str	r5, [sp, #8]
   102ca:	2207      	movs	r2, #7
   102cc:	a902      	add	r1, sp, #8
   102ce:	f8cd 500b 	str.w	r5, [sp, #11]
   102d2:	f014 f8b8 	bl	24446 <memcmp>
		if (first_free_slot == ARRAY_SIZE(key_pool) &&
   102d6:	b188      	cbz	r0, 102fc <bt_keys_get_addr+0x48>
	memcpy(dst, src, sizeof(*dst));
   102d8:	2207      	movs	r2, #7
   102da:	4917      	ldr	r1, [pc, #92]	; (10338 <bt_keys_get_addr+0x84>)
   102dc:	4668      	mov	r0, sp
   102de:	f014 f8c3 	bl	24468 <memcpy>
			}
		}

		/* Use a copy as bt_unpair will clear the oldest key. */
		bt_addr_le_copy(&oldest_addr, &oldest->addr);
		bt_unpair(oldest->id, &oldest_addr);
   102e2:	4669      	mov	r1, sp
   102e4:	7820      	ldrb	r0, [r4, #0]
   102e6:	f7f9 fdb7 	bl	9e58 <bt_unpair>
	return memcmp(a, b, sizeof(*a));
   102ea:	4813      	ldr	r0, [pc, #76]	; (10338 <bt_keys_get_addr+0x84>)
		if (!bt_addr_le_cmp(&oldest->addr, BT_ADDR_LE_ANY)) {
   102ec:	9502      	str	r5, [sp, #8]
   102ee:	2207      	movs	r2, #7
   102f0:	a902      	add	r1, sp, #8
   102f2:	f8cd 500b 	str.w	r5, [sp, #11]
   102f6:	f014 f8a6 	bl	24446 <memcmp>
   102fa:	b9b8      	cbnz	r0, 1032c <bt_keys_get_addr+0x78>
	memcpy(dst, src, sizeof(*dst));
   102fc:	2207      	movs	r2, #7
   102fe:	480e      	ldr	r0, [pc, #56]	; (10338 <bt_keys_get_addr+0x84>)
	}

#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
	if (first_free_slot < ARRAY_SIZE(key_pool)) {
		keys = &key_pool[first_free_slot];
		keys->id = id;
   10300:	7026      	strb	r6, [r4, #0]
   10302:	4639      	mov	r1, r7
   10304:	f014 f8b0 	bl	24468 <memcpy>
		bt_addr_le_copy(&keys->addr, addr);
#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
		keys->aging_counter = ++aging_counter_val;
   10308:	4a0c      	ldr	r2, [pc, #48]	; (1033c <bt_keys_get_addr+0x88>)
		last_keys_updated = keys;
#endif  /* CONFIG_BT_KEYS_OVERWRITE_OLDEST */
		BT_DBG("created %p for %s", keys, bt_addr_le_str(addr));
		return keys;
   1030a:	480a      	ldr	r0, [pc, #40]	; (10334 <bt_keys_get_addr+0x80>)
		keys->aging_counter = ++aging_counter_val;
   1030c:	6813      	ldr	r3, [r2, #0]
   1030e:	3301      	adds	r3, #1
   10310:	6013      	str	r3, [r2, #0]
   10312:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
		last_keys_updated = keys;
   10316:	4b0a      	ldr	r3, [pc, #40]	; (10340 <bt_keys_get_addr+0x8c>)
   10318:	601c      	str	r4, [r3, #0]
		return keys;
   1031a:	e008      	b.n	1032e <bt_keys_get_addr+0x7a>
	return memcmp(a, b, sizeof(*a));
   1031c:	2207      	movs	r2, #7
   1031e:	1c60      	adds	r0, r4, #1
   10320:	f014 f891 	bl	24446 <memcmp>
		if (keys->id == id && !bt_addr_le_cmp(&keys->addr, addr)) {
   10324:	2800      	cmp	r0, #0
   10326:	d1cd      	bne.n	102c4 <bt_keys_get_addr+0x10>
		keys = &key_pool[i];
   10328:	4620      	mov	r0, r4
   1032a:	e000      	b.n	1032e <bt_keys_get_addr+0x7a>
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
   1032c:	4628      	mov	r0, r5
}
   1032e:	b005      	add	sp, #20
   10330:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10332:	bf00      	nop
   10334:	2000d7e0 	.word	0x2000d7e0
   10338:	2000d7e1 	.word	0x2000d7e1
   1033c:	2000d7dc 	.word	0x2000d7dc
   10340:	2000d868 	.word	0x2000d868

00010344 <bt_foreach_bond>:

void bt_foreach_bond(uint8_t id, void (*func)(const struct bt_bond_info *info,
					   void *user_data),
		     void *user_data)
{
   10344:	b537      	push	{r0, r1, r2, r4, r5, lr}
   10346:	460c      	mov	r4, r1
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		struct bt_keys *keys = &key_pool[i];

		if (keys->keys && keys->id == id) {
   10348:	4908      	ldr	r1, [pc, #32]	; (1036c <bt_foreach_bond+0x28>)
   1034a:	89cb      	ldrh	r3, [r1, #14]
{
   1034c:	4615      	mov	r5, r2
		if (keys->keys && keys->id == id) {
   1034e:	b153      	cbz	r3, 10366 <bt_foreach_bond+0x22>
   10350:	780b      	ldrb	r3, [r1, #0]
   10352:	4283      	cmp	r3, r0
   10354:	d107      	bne.n	10366 <bt_foreach_bond+0x22>
	memcpy(dst, src, sizeof(*dst));
   10356:	3101      	adds	r1, #1
   10358:	2207      	movs	r2, #7
   1035a:	4668      	mov	r0, sp
   1035c:	f014 f884 	bl	24468 <memcpy>
			struct bt_bond_info info;

			bt_addr_le_copy(&info.addr, &keys->addr);
			func(&info, user_data);
   10360:	4629      	mov	r1, r5
   10362:	4668      	mov	r0, sp
   10364:	47a0      	blx	r4
		}
	}
}
   10366:	b003      	add	sp, #12
   10368:	bd30      	pop	{r4, r5, pc}
   1036a:	bf00      	nop
   1036c:	2000d7e0 	.word	0x2000d7e0

00010370 <bt_keys_foreach>:

void bt_keys_foreach(int type, void (*func)(struct bt_keys *keys, void *data),
		     void *data)
{
   10370:	460b      	mov	r3, r1
   10372:	4611      	mov	r1, r2
	int i;

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
		if ((key_pool[i].keys & type)) {
   10374:	4a04      	ldr	r2, [pc, #16]	; (10388 <bt_keys_foreach+0x18>)
{
   10376:	b410      	push	{r4}
		if ((key_pool[i].keys & type)) {
   10378:	89d4      	ldrh	r4, [r2, #14]
   1037a:	4204      	tst	r4, r0
   1037c:	d002      	beq.n	10384 <bt_keys_foreach+0x14>
			func(&key_pool[i], data);
		}
	}
}
   1037e:	bc10      	pop	{r4}
			func(&key_pool[i], data);
   10380:	4610      	mov	r0, r2
   10382:	4718      	bx	r3
}
   10384:	bc10      	pop	{r4}
   10386:	4770      	bx	lr
   10388:	2000d7e0 	.word	0x2000d7e0

0001038c <keys_commit>:
{
	bt_id_add(keys);
}

static int keys_commit(void)
{
   1038c:	b508      	push	{r3, lr}
	 * the keys were already removed.
	 */
	if (IS_ENABLED(CONFIG_BT_CENTRAL) && IS_ENABLED(CONFIG_BT_PRIVACY)) {
		bt_keys_foreach(BT_KEYS_ALL, id_add, NULL);
	} else {
		bt_keys_foreach(BT_KEYS_IRK, id_add, NULL);
   1038e:	4903      	ldr	r1, [pc, #12]	; (1039c <keys_commit+0x10>)
   10390:	2200      	movs	r2, #0
   10392:	2002      	movs	r0, #2
   10394:	f7ff ffec 	bl	10370 <bt_keys_foreach>
	}

	return 0;
}
   10398:	2000      	movs	r0, #0
   1039a:	bd08      	pop	{r3, pc}
   1039c:	00026437 	.word	0x00026437

000103a0 <bt_keys_find>:
{
   103a0:	b510      	push	{r4, lr}
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   103a2:	4c09      	ldr	r4, [pc, #36]	; (103c8 <bt_keys_find+0x28>)
{
   103a4:	460b      	mov	r3, r1
   103a6:	4611      	mov	r1, r2
		if ((key_pool[i].keys & type) && key_pool[i].id == id &&
   103a8:	89e2      	ldrh	r2, [r4, #14]
   103aa:	4202      	tst	r2, r0
   103ac:	d007      	beq.n	103be <bt_keys_find+0x1e>
   103ae:	7822      	ldrb	r2, [r4, #0]
   103b0:	429a      	cmp	r2, r3
   103b2:	d104      	bne.n	103be <bt_keys_find+0x1e>
	return memcmp(a, b, sizeof(*a));
   103b4:	2207      	movs	r2, #7
   103b6:	1c60      	adds	r0, r4, #1
   103b8:	f014 f845 	bl	24446 <memcmp>
   103bc:	b108      	cbz	r0, 103c2 <bt_keys_find+0x22>
	return NULL;
   103be:	2000      	movs	r0, #0
}
   103c0:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   103c2:	4620      	mov	r0, r4
   103c4:	e7fc      	b.n	103c0 <bt_keys_find+0x20>
   103c6:	bf00      	nop
   103c8:	2000d7e0 	.word	0x2000d7e0

000103cc <bt_keys_find_irk>:
{
   103cc:	b570      	push	{r4, r5, r6, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
   103ce:	780b      	ldrb	r3, [r1, #0]
   103d0:	2b01      	cmp	r3, #1
   103d2:	4606      	mov	r6, r0
   103d4:	460d      	mov	r5, r1
   103d6:	d001      	beq.n	103dc <bt_keys_find_irk+0x10>
		return NULL;
   103d8:	2000      	movs	r0, #0
}
   103da:	bd70      	pop	{r4, r5, r6, pc}
	if (!bt_addr_le_is_rpa(addr)) {
   103dc:	798b      	ldrb	r3, [r1, #6]
   103de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   103e2:	2b40      	cmp	r3, #64	; 0x40
   103e4:	d1f8      	bne.n	103d8 <bt_keys_find_irk+0xc>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   103e6:	4c12      	ldr	r4, [pc, #72]	; (10430 <bt_keys_find_irk+0x64>)
   103e8:	89e3      	ldrh	r3, [r4, #14]
   103ea:	079b      	lsls	r3, r3, #30
   103ec:	d5f4      	bpl.n	103d8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id == id &&
   103ee:	7823      	ldrb	r3, [r4, #0]
   103f0:	42b3      	cmp	r3, r6
   103f2:	d10b      	bne.n	1040c <bt_keys_find_irk+0x40>
	return memcmp(a, b, sizeof(*a));
   103f4:	2206      	movs	r2, #6
   103f6:	f104 013a 	add.w	r1, r4, #58	; 0x3a
   103fa:	1c68      	adds	r0, r5, #1
   103fc:	f014 f823 	bl	24446 <memcmp>
   10400:	b908      	cbnz	r0, 10406 <bt_keys_find_irk+0x3a>
			return &key_pool[i];
   10402:	4620      	mov	r0, r4
   10404:	e7e9      	b.n	103da <bt_keys_find_irk+0xe>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
   10406:	89e3      	ldrh	r3, [r4, #14]
   10408:	079a      	lsls	r2, r3, #30
   1040a:	d5e5      	bpl.n	103d8 <bt_keys_find_irk+0xc>
		if (key_pool[i].id != id) {
   1040c:	7823      	ldrb	r3, [r4, #0]
   1040e:	42b3      	cmp	r3, r6
   10410:	d1e2      	bne.n	103d8 <bt_keys_find_irk+0xc>
		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
   10412:	3501      	adds	r5, #1
   10414:	4807      	ldr	r0, [pc, #28]	; (10434 <bt_keys_find_irk+0x68>)
   10416:	4629      	mov	r1, r5
   10418:	f014 f8c3 	bl	245a2 <bt_rpa_irk_matches>
   1041c:	2800      	cmp	r0, #0
   1041e:	d0db      	beq.n	103d8 <bt_keys_find_irk+0xc>
	memcpy(dst, src, sizeof(*dst));
   10420:	4805      	ldr	r0, [pc, #20]	; (10438 <bt_keys_find_irk+0x6c>)
   10422:	2206      	movs	r2, #6
   10424:	4629      	mov	r1, r5
   10426:	f014 f81f 	bl	24468 <memcpy>
			return &key_pool[i];
   1042a:	4801      	ldr	r0, [pc, #4]	; (10430 <bt_keys_find_irk+0x64>)
}
   1042c:	e7d5      	b.n	103da <bt_keys_find_irk+0xe>
   1042e:	bf00      	nop
   10430:	2000d7e0 	.word	0x2000d7e0
   10434:	2000d80a 	.word	0x2000d80a
   10438:	2000d81a 	.word	0x2000d81a

0001043c <bt_keys_find_addr>:
{
   1043c:	b510      	push	{r4, lr}
		if (key_pool[i].id == id &&
   1043e:	4c06      	ldr	r4, [pc, #24]	; (10458 <bt_keys_find_addr+0x1c>)
   10440:	7823      	ldrb	r3, [r4, #0]
   10442:	4283      	cmp	r3, r0
   10444:	d104      	bne.n	10450 <bt_keys_find_addr+0x14>
	return memcmp(a, b, sizeof(*a));
   10446:	2207      	movs	r2, #7
   10448:	1c60      	adds	r0, r4, #1
   1044a:	f013 fffc 	bl	24446 <memcmp>
   1044e:	b108      	cbz	r0, 10454 <bt_keys_find_addr+0x18>
	return NULL;
   10450:	2000      	movs	r0, #0
}
   10452:	bd10      	pop	{r4, pc}
			return &key_pool[i];
   10454:	4620      	mov	r0, r4
   10456:	e7fc      	b.n	10452 <bt_keys_find_addr+0x16>
   10458:	2000d7e0 	.word	0x2000d7e0

0001045c <bt_keys_clear>:
{
   1045c:	b570      	push	{r4, r5, r6, lr}
	if (keys->state & BT_KEYS_ID_ADDED) {
   1045e:	7a03      	ldrb	r3, [r0, #8]
   10460:	075b      	lsls	r3, r3, #29
{
   10462:	b08c      	sub	sp, #48	; 0x30
   10464:	4604      	mov	r4, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   10466:	d501      	bpl.n	1046c <bt_keys_clear+0x10>
		bt_id_del(keys);
   10468:	f7f9 fe9c 	bl	a1a4 <bt_id_del>
		if (keys->id) {
   1046c:	4625      	mov	r5, r4
   1046e:	f815 2b01 	ldrb.w	r2, [r5], #1
   10472:	b1b2      	cbz	r2, 104a2 <bt_keys_clear+0x46>
			u8_to_dec(id, sizeof(id), keys->id);
   10474:	ae02      	add	r6, sp, #8
   10476:	2104      	movs	r1, #4
   10478:	4630      	mov	r0, r6
   1047a:	f011 faa0 	bl	219be <u8_to_dec>
			bt_settings_encode_key(key, sizeof(key), "keys",
   1047e:	9600      	str	r6, [sp, #0]
			bt_settings_encode_key(key, sizeof(key), "keys",
   10480:	4a09      	ldr	r2, [pc, #36]	; (104a8 <bt_keys_clear+0x4c>)
   10482:	462b      	mov	r3, r5
   10484:	2124      	movs	r1, #36	; 0x24
   10486:	a803      	add	r0, sp, #12
   10488:	f7f8 f92e 	bl	86e8 <bt_settings_encode_key>
		settings_delete(key);
   1048c:	a803      	add	r0, sp, #12
   1048e:	f012 fc6d 	bl	22d6c <settings_delete>
	(void)memset(keys, 0, sizeof(*keys));
   10492:	2288      	movs	r2, #136	; 0x88
   10494:	2100      	movs	r1, #0
   10496:	4620      	mov	r0, r4
}
   10498:	b00c      	add	sp, #48	; 0x30
   1049a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	(void)memset(keys, 0, sizeof(*keys));
   1049e:	f014 b80e 	b.w	244be <memset>
			bt_settings_encode_key(key, sizeof(key), "keys",
   104a2:	9200      	str	r2, [sp, #0]
   104a4:	e7ec      	b.n	10480 <bt_keys_clear+0x24>
   104a6:	bf00      	nop
   104a8:	0002d6f8 	.word	0x0002d6f8

000104ac <keys_set>:
{
   104ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   104ae:	4614      	mov	r4, r2
   104b0:	b0a3      	sub	sp, #140	; 0x8c
	if (!name) {
   104b2:	4606      	mov	r6, r0
   104b4:	b970      	cbnz	r0, 104d4 <keys_set+0x28>
   104b6:	4952      	ldr	r1, [pc, #328]	; (10600 <keys_set+0x154>)
   104b8:	4b52      	ldr	r3, [pc, #328]	; (10604 <keys_set+0x158>)
		BT_ERR("Insufficient number of arguments");
   104ba:	4853      	ldr	r0, [pc, #332]	; (10608 <keys_set+0x15c>)
   104bc:	1ac9      	subs	r1, r1, r3
   104be:	08c9      	lsrs	r1, r1, #3
   104c0:	0189      	lsls	r1, r1, #6
   104c2:	f041 0101 	orr.w	r1, r1, #1
   104c6:	f011 ffc3 	bl	22450 <log_0>
		return -EINVAL;
   104ca:	f06f 0415 	mvn.w	r4, #21
}
   104ce:	4620      	mov	r0, r4
   104d0:	b023      	add	sp, #140	; 0x8c
   104d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	len = read_cb(cb_arg, val, sizeof(val));
   104d4:	227c      	movs	r2, #124	; 0x7c
   104d6:	a903      	add	r1, sp, #12
   104d8:	4618      	mov	r0, r3
   104da:	47a0      	blx	r4
	if (len < 0) {
   104dc:	1e05      	subs	r5, r0, #0
   104de:	da0b      	bge.n	104f8 <keys_set+0x4c>
   104e0:	4a47      	ldr	r2, [pc, #284]	; (10600 <keys_set+0x154>)
   104e2:	4b48      	ldr	r3, [pc, #288]	; (10604 <keys_set+0x158>)
		BT_ERR("Failed to read value (err %zd)", len);
   104e4:	4849      	ldr	r0, [pc, #292]	; (1060c <keys_set+0x160>)
   104e6:	1ad2      	subs	r2, r2, r3
   104e8:	08d2      	lsrs	r2, r2, #3
   104ea:	0192      	lsls	r2, r2, #6
   104ec:	f042 0201 	orr.w	r2, r2, #1
   104f0:	4629      	mov	r1, r5
   104f2:	f011 ffba 	bl	2246a <log_1>
   104f6:	e7e8      	b.n	104ca <keys_set+0x1e>
	err = bt_settings_decode_key(name, &addr);
   104f8:	a901      	add	r1, sp, #4
   104fa:	4630      	mov	r0, r6
   104fc:	f014 f8b0 	bl	24660 <bt_settings_decode_key>
	if (err) {
   10500:	4604      	mov	r4, r0
   10502:	b148      	cbz	r0, 10518 <keys_set+0x6c>
   10504:	4a3e      	ldr	r2, [pc, #248]	; (10600 <keys_set+0x154>)
   10506:	4b3f      	ldr	r3, [pc, #252]	; (10604 <keys_set+0x158>)
		BT_ERR("Unable to decode address %s", name);
   10508:	4841      	ldr	r0, [pc, #260]	; (10610 <keys_set+0x164>)
   1050a:	1ad2      	subs	r2, r2, r3
   1050c:	08d2      	lsrs	r2, r2, #3
   1050e:	0192      	lsls	r2, r2, #6
   10510:	f042 0201 	orr.w	r2, r2, #1
   10514:	4631      	mov	r1, r6
   10516:	e7ec      	b.n	104f2 <keys_set+0x46>
	settings_name_next(name, &next);
   10518:	4669      	mov	r1, sp
   1051a:	4630      	mov	r0, r6
   1051c:	f012 fc4d 	bl	22dba <settings_name_next>
	if (!next) {
   10520:	9800      	ldr	r0, [sp, #0]
   10522:	b188      	cbz	r0, 10548 <keys_set+0x9c>
		id = strtol(next, NULL, 10);
   10524:	220a      	movs	r2, #10
   10526:	4621      	mov	r1, r4
   10528:	f013 fed0 	bl	242cc <strtol>
   1052c:	b2c0      	uxtb	r0, r0
	if (!len) {
   1052e:	b9fd      	cbnz	r5, 10570 <keys_set+0xc4>
		keys = bt_keys_find(BT_KEYS_ALL, id, &addr);
   10530:	4601      	mov	r1, r0
   10532:	aa01      	add	r2, sp, #4
   10534:	203f      	movs	r0, #63	; 0x3f
   10536:	f7ff ff33 	bl	103a0 <bt_keys_find>
		if (keys) {
   1053a:	b138      	cbz	r0, 1054c <keys_set+0xa0>
			(void)memset(keys, 0, sizeof(*keys));
   1053c:	2288      	movs	r2, #136	; 0x88
   1053e:	4629      	mov	r1, r5
   10540:	f013 ffbd 	bl	244be <memset>
		return 0;
   10544:	462c      	mov	r4, r5
   10546:	e7c2      	b.n	104ce <keys_set+0x22>
		id = BT_ID_DEFAULT;
   10548:	4620      	mov	r0, r4
   1054a:	e7f0      	b.n	1052e <keys_set+0x82>
   1054c:	4a2d      	ldr	r2, [pc, #180]	; (10604 <keys_set+0x158>)
   1054e:	4c2c      	ldr	r4, [pc, #176]	; (10600 <keys_set+0x154>)
			BT_WARN("Unable to find deleted keys for %s",
   10550:	a801      	add	r0, sp, #4
   10552:	1aa4      	subs	r4, r4, r2
   10554:	f7f7 fe1a 	bl	818c <bt_addr_le_str_real>
   10558:	f7f5 f884 	bl	5664 <log_strdup>
   1055c:	08e4      	lsrs	r4, r4, #3
   1055e:	01a4      	lsls	r4, r4, #6
   10560:	f044 0402 	orr.w	r4, r4, #2
   10564:	4601      	mov	r1, r0
   10566:	4622      	mov	r2, r4
   10568:	482a      	ldr	r0, [pc, #168]	; (10614 <keys_set+0x168>)
   1056a:	f011 ff7e 	bl	2246a <log_1>
   1056e:	e7e9      	b.n	10544 <keys_set+0x98>
	keys = bt_keys_get_addr(id, &addr);
   10570:	a901      	add	r1, sp, #4
   10572:	f7ff fe9f 	bl	102b4 <bt_keys_get_addr>
	if (!keys) {
   10576:	4607      	mov	r7, r0
   10578:	b998      	cbnz	r0, 105a2 <keys_set+0xf6>
   1057a:	4a22      	ldr	r2, [pc, #136]	; (10604 <keys_set+0x158>)
   1057c:	4c20      	ldr	r4, [pc, #128]	; (10600 <keys_set+0x154>)
		BT_ERR("Failed to allocate keys for %s", bt_addr_le_str(&addr));
   1057e:	a801      	add	r0, sp, #4
   10580:	1aa4      	subs	r4, r4, r2
   10582:	f7f7 fe03 	bl	818c <bt_addr_le_str_real>
   10586:	f7f5 f86d 	bl	5664 <log_strdup>
   1058a:	08e4      	lsrs	r4, r4, #3
   1058c:	01a4      	lsls	r4, r4, #6
   1058e:	f044 0401 	orr.w	r4, r4, #1
   10592:	4601      	mov	r1, r0
   10594:	4622      	mov	r2, r4
   10596:	4820      	ldr	r0, [pc, #128]	; (10618 <keys_set+0x16c>)
   10598:	f011 ff67 	bl	2246a <log_1>
		return -ENOMEM;
   1059c:	f06f 040b 	mvn.w	r4, #11
   105a0:	e795      	b.n	104ce <keys_set+0x22>
	if (len != BT_KEYS_STORAGE_LEN) {
   105a2:	2d7c      	cmp	r5, #124	; 0x7c
   105a4:	d013      	beq.n	105ce <keys_set+0x122>
   105a6:	4b16      	ldr	r3, [pc, #88]	; (10600 <keys_set+0x154>)
   105a8:	4a16      	ldr	r2, [pc, #88]	; (10604 <keys_set+0x158>)
   105aa:	1a9b      	subs	r3, r3, r2
   105ac:	08db      	lsrs	r3, r3, #3
			if (IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST) &&
   105ae:	2d78      	cmp	r5, #120	; 0x78
   105b0:	ea4f 1383 	mov.w	r3, r3, lsl #6
   105b4:	d119      	bne.n	105ea <keys_set+0x13e>
				BT_WARN("Keys for %s have no aging counter",
   105b6:	a801      	add	r0, sp, #4
   105b8:	f043 0602 	orr.w	r6, r3, #2
   105bc:	f7f7 fde6 	bl	818c <bt_addr_le_str_real>
   105c0:	f7f5 f850 	bl	5664 <log_strdup>
   105c4:	4632      	mov	r2, r6
   105c6:	4601      	mov	r1, r0
   105c8:	4814      	ldr	r0, [pc, #80]	; (1061c <keys_set+0x170>)
   105ca:	f011 ff4e 	bl	2246a <log_1>
		memcpy(keys->storage_start, val, len);
   105ce:	462a      	mov	r2, r5
   105d0:	a903      	add	r1, sp, #12
   105d2:	f107 000c 	add.w	r0, r7, #12
   105d6:	f013 ff47 	bl	24468 <memcpy>
	if (aging_counter_val < keys->aging_counter) {
   105da:	4b11      	ldr	r3, [pc, #68]	; (10620 <keys_set+0x174>)
   105dc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
   105e0:	6819      	ldr	r1, [r3, #0]
   105e2:	428a      	cmp	r2, r1
		aging_counter_val = keys->aging_counter;
   105e4:	bf88      	it	hi
   105e6:	601a      	strhi	r2, [r3, #0]
   105e8:	e771      	b.n	104ce <keys_set+0x22>
			BT_ERR("Invalid key length %zd != %zu", len,
   105ea:	480e      	ldr	r0, [pc, #56]	; (10624 <keys_set+0x178>)
   105ec:	f043 0301 	orr.w	r3, r3, #1
   105f0:	227c      	movs	r2, #124	; 0x7c
   105f2:	4629      	mov	r1, r5
   105f4:	f011 ff4d 	bl	22492 <log_2>
			bt_keys_clear(keys);
   105f8:	4638      	mov	r0, r7
   105fa:	f7ff ff2f 	bl	1045c <bt_keys_clear>
			return -EINVAL;
   105fe:	e764      	b.n	104ca <keys_set+0x1e>
   10600:	00027988 	.word	0x00027988
   10604:	000278c0 	.word	0x000278c0
   10608:	0002bdf2 	.word	0x0002bdf2
   1060c:	0002d637 	.word	0x0002d637
   10610:	0002cff0 	.word	0x0002cff0
   10614:	0002d656 	.word	0x0002d656
   10618:	0002d679 	.word	0x0002d679
   1061c:	0002d698 	.word	0x0002d698
   10620:	2000d7dc 	.word	0x2000d7dc
   10624:	0002d6ba 	.word	0x0002d6ba

00010628 <bt_keys_store>:
{
   10628:	b570      	push	{r4, r5, r6, lr}
	if (keys->id) {
   1062a:	4605      	mov	r5, r0
{
   1062c:	b08c      	sub	sp, #48	; 0x30
	if (keys->id) {
   1062e:	f815 2b01 	ldrb.w	r2, [r5], #1
{
   10632:	4604      	mov	r4, r0
	if (keys->id) {
   10634:	b30a      	cbz	r2, 1067a <bt_keys_store+0x52>
		u8_to_dec(id, sizeof(id), keys->id);
   10636:	ae02      	add	r6, sp, #8
   10638:	2104      	movs	r1, #4
   1063a:	4630      	mov	r0, r6
   1063c:	f011 f9bf 	bl	219be <u8_to_dec>
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   10640:	9600      	str	r6, [sp, #0]
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   10642:	4a0f      	ldr	r2, [pc, #60]	; (10680 <bt_keys_store+0x58>)
   10644:	462b      	mov	r3, r5
   10646:	2124      	movs	r1, #36	; 0x24
   10648:	a803      	add	r0, sp, #12
   1064a:	f7f8 f84d 	bl	86e8 <bt_settings_encode_key>
	err = settings_save_one(key, keys->storage_start, BT_KEYS_STORAGE_LEN);
   1064e:	f104 010c 	add.w	r1, r4, #12
   10652:	227c      	movs	r2, #124	; 0x7c
   10654:	a803      	add	r0, sp, #12
   10656:	f7f6 f909 	bl	686c <settings_save_one>
	if (err) {
   1065a:	4604      	mov	r4, r0
   1065c:	b150      	cbz	r0, 10674 <bt_keys_store+0x4c>
   1065e:	4a09      	ldr	r2, [pc, #36]	; (10684 <bt_keys_store+0x5c>)
   10660:	4b09      	ldr	r3, [pc, #36]	; (10688 <bt_keys_store+0x60>)
   10662:	1ad2      	subs	r2, r2, r3
   10664:	08d2      	lsrs	r2, r2, #3
		BT_ERR("Failed to save keys (err %d)", err);
   10666:	0192      	lsls	r2, r2, #6
   10668:	4601      	mov	r1, r0
   1066a:	f042 0201 	orr.w	r2, r2, #1
   1066e:	4807      	ldr	r0, [pc, #28]	; (1068c <bt_keys_store+0x64>)
   10670:	f011 fefb 	bl	2246a <log_1>
}
   10674:	4620      	mov	r0, r4
   10676:	b00c      	add	sp, #48	; 0x30
   10678:	bd70      	pop	{r4, r5, r6, pc}
		bt_settings_encode_key(key, sizeof(key), "keys", &keys->addr,
   1067a:	9200      	str	r2, [sp, #0]
   1067c:	e7e1      	b.n	10642 <bt_keys_store+0x1a>
   1067e:	bf00      	nop
   10680:	0002d6f8 	.word	0x0002d6f8
   10684:	00027988 	.word	0x00027988
   10688:	000278c0 	.word	0x000278c0
   1068c:	0002d6d8 	.word	0x0002d6d8

00010690 <bt_keys_update_usage>:

#endif /* CONFIG_BT_SETTINGS */

#if IS_ENABLED(CONFIG_BT_KEYS_OVERWRITE_OLDEST)
void bt_keys_update_usage(uint8_t id, const bt_addr_le_t *addr)
{
   10690:	b508      	push	{r3, lr}
	struct bt_keys *keys = bt_keys_find_addr(id, addr);
   10692:	f7ff fed3 	bl	1043c <bt_keys_find_addr>

	if (!keys) {
   10696:	b150      	cbz	r0, 106ae <bt_keys_update_usage+0x1e>
		return;
	}

	if (last_keys_updated == keys) {
   10698:	4a05      	ldr	r2, [pc, #20]	; (106b0 <bt_keys_update_usage+0x20>)
   1069a:	6813      	ldr	r3, [r2, #0]
   1069c:	4283      	cmp	r3, r0
   1069e:	d006      	beq.n	106ae <bt_keys_update_usage+0x1e>
		return;
	}

	keys->aging_counter = ++aging_counter_val;
   106a0:	4904      	ldr	r1, [pc, #16]	; (106b4 <bt_keys_update_usage+0x24>)
	last_keys_updated = keys;
   106a2:	6010      	str	r0, [r2, #0]
	keys->aging_counter = ++aging_counter_val;
   106a4:	680b      	ldr	r3, [r1, #0]
   106a6:	3301      	adds	r3, #1
   106a8:	600b      	str	r3, [r1, #0]
   106aa:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
	       keys->aging_counter);

	if (IS_ENABLED(CONFIG_BT_KEYS_SAVE_AGING_COUNTER_ON_PAIRING)) {
		bt_keys_store(keys);
	}
}
   106ae:	bd08      	pop	{r3, pc}
   106b0:	2000d868 	.word	0x2000d868
   106b4:	2000d7dc 	.word	0x2000d7dc

000106b8 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, uint16_t mem_size, uint16_t mem_count,
	      void **mem_head)
{
   106b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   106bc:	4616      	mov	r6, r2
	*mem_head = mem_pool;

	/* Store free mem_count after the list's next pointer at an 32-bit
	 * aligned memory location to ensure atomic read/write (in ARM for now).
	 */
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   106be:	1dc2      	adds	r2, r0, #7
   106c0:	f022 0203 	bic.w	r2, r2, #3

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   106c4:	1e75      	subs	r5, r6, #1
{
   106c6:	460f      	mov	r7, r1
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   106c8:	b2ad      	uxth	r5, r5
	*mem_head = mem_pool;
   106ca:	6018      	str	r0, [r3, #0]
{
   106cc:	b082      	sub	sp, #8
   106ce:	4604      	mov	r4, r0
	*((uint16_t *)MROUND((uint8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
   106d0:	8016      	strh	r6, [r2, #0]
	(void)memset(((uint8_t *)mem_pool + (mem_size * (--mem_count))), 0,
   106d2:	2100      	movs	r1, #0
   106d4:	2204      	movs	r2, #4
   106d6:	fb07 0005 	mla	r0, r7, r5, r0
   106da:	f013 fef0 	bl	244be <memset>
		     sizeof(mem_pool));
	while (mem_count--) {
   106de:	b1bd      	cbz	r5, 10710 <mem_init+0x58>
   106e0:	3e02      	subs	r6, #2
   106e2:	b2b6      	uxth	r6, r6
   106e4:	fb06 7307 	mla	r3, r6, r7, r7
   106e8:	fb06 f807 	mul.w	r8, r6, r7
   106ec:	441c      	add	r4, r3
   106ee:	eba8 0803 	sub.w	r8, r8, r3
   106f2:	2500      	movs	r5, #0
		uint32_t next;

		next = (uint32_t)((uint8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   106f4:	2204      	movs	r2, #4
   106f6:	eb04 0008 	add.w	r0, r4, r8
   106fa:	eb0d 0102 	add.w	r1, sp, r2
		next = (uint32_t)((uint8_t *) mem_pool +
   106fe:	9401      	str	r4, [sp, #4]
		memcpy(((uint8_t *)mem_pool + (mem_size * mem_count)),
   10700:	f013 feb2 	bl	24468 <memcpy>
	while (mem_count--) {
   10704:	42b5      	cmp	r5, r6
   10706:	eba4 0407 	sub.w	r4, r4, r7
   1070a:	f105 0501 	add.w	r5, r5, #1
   1070e:	d1f1      	bne.n	106f4 <mem_init+0x3c>
		       (void *)&next, sizeof(next));
	}
}
   10710:	b002      	add	sp, #8
   10712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10716:	bf00      	nop

00010718 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
   10718:	b570      	push	{r4, r5, r6, lr}
	if (*mem_head) {
   1071a:	6805      	ldr	r5, [r0, #0]
{
   1071c:	b082      	sub	sp, #8
	if (*mem_head) {
   1071e:	b195      	cbz	r5, 10746 <mem_acquire+0x2e>
		uint16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10720:	1deb      	adds	r3, r5, #7
   10722:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
		free_count--;

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
   10726:	2204      	movs	r2, #4
   10728:	4604      	mov	r4, r0
   1072a:	4629      	mov	r1, r5
   1072c:	eb0d 0002 	add.w	r0, sp, r2
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10730:	881e      	ldrh	r6, [r3, #0]
		memcpy(&head, mem, sizeof(head));
   10732:	f013 fe99 	bl	24468 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
   10736:	9b01      	ldr	r3, [sp, #4]
   10738:	b123      	cbz	r3, 10744 <mem_acquire+0x2c>
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   1073a:	1dda      	adds	r2, r3, #7
   1073c:	f022 0203 	bic.w	r2, r2, #3
		free_count--;
   10740:	3e01      	subs	r6, #1
			*((uint16_t *)MROUND((uint8_t *)head + sizeof(head))) =
   10742:	8016      	strh	r6, [r2, #0]
				free_count;
		}

		*mem_head = head;
   10744:	6023      	str	r3, [r4, #0]
		return mem;
	}

	return NULL;
}
   10746:	4628      	mov	r0, r5
   10748:	b002      	add	sp, #8
   1074a:	bd70      	pop	{r4, r5, r6, pc}

0001074c <mem_release>:
void mem_release(void *mem, void **mem_head)
{
	uint16_t free_count = 0U;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
   1074c:	680b      	ldr	r3, [r1, #0]
{
   1074e:	b570      	push	{r4, r5, r6, lr}
   10750:	460c      	mov	r4, r1
   10752:	4605      	mov	r5, r0
	if (*mem_head) {
   10754:	b183      	cbz	r3, 10778 <mem_release+0x2c>
		free_count = *((uint16_t *)MROUND((uint8_t *)*mem_head +
   10756:	3307      	adds	r3, #7
   10758:	f023 0303 	bic.w	r3, r3, #3
					       sizeof(mem_head)));
	}
	free_count++;
   1075c:	881e      	ldrh	r6, [r3, #0]
   1075e:	3601      	adds	r6, #1
   10760:	b2b6      	uxth	r6, r6

	memcpy(mem, mem_head, sizeof(mem));
   10762:	2204      	movs	r2, #4
   10764:	4621      	mov	r1, r4
   10766:	4628      	mov	r0, r5
   10768:	f013 fe7e 	bl	24468 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((uint16_t *)MROUND((uint8_t *)mem + sizeof(mem))) = free_count;
   1076c:	1deb      	adds	r3, r5, #7
   1076e:	f023 0303 	bic.w	r3, r3, #3
   10772:	801e      	strh	r6, [r3, #0]

	*mem_head = mem;
   10774:	6025      	str	r5, [r4, #0]
}
   10776:	bd70      	pop	{r4, r5, r6, pc}
   10778:	2601      	movs	r6, #1
   1077a:	e7f2      	b.n	10762 <mem_release+0x16>

0001077c <mem_get>:
}

void *mem_get(void *mem_pool, uint16_t mem_size, uint16_t index)
{
	return ((void *)((uint8_t *)mem_pool + (mem_size * index)));
}
   1077c:	fb02 0001 	mla	r0, r2, r1, r0
   10780:	4770      	bx	lr
   10782:	bf00      	nop

00010784 <mem_index_get>:

uint16_t mem_index_get(void *mem, void *mem_pool, uint16_t mem_size)
{
	return ((uint16_t)((uint8_t *)mem - (uint8_t *)mem_pool) / mem_size);
   10784:	1a40      	subs	r0, r0, r1
   10786:	b280      	uxth	r0, r0
}
   10788:	fbb0 f0f2 	udiv	r0, r0, r2
   1078c:	4770      	bx	lr
   1078e:	bf00      	nop

00010790 <mem_rcopy>:
 * @details Example: [ 0x11 0x22 0x33 ] -> [ 0x33 0x22 0x11 ]
 */
void mem_rcopy(uint8_t *dst, uint8_t const *src, uint16_t len)
{
	src += len;
	while (len--) {
   10790:	1e53      	subs	r3, r2, #1
	src += len;
   10792:	4411      	add	r1, r2
	while (len--) {
   10794:	b29b      	uxth	r3, r3
   10796:	b142      	cbz	r2, 107aa <mem_rcopy+0x1a>
   10798:	43db      	mvns	r3, r3
   1079a:	3801      	subs	r0, #1
   1079c:	18ca      	adds	r2, r1, r3
		*dst++ = *--src;
   1079e:	f811 3d01 	ldrb.w	r3, [r1, #-1]!
   107a2:	f800 3f01 	strb.w	r3, [r0, #1]!
	while (len--) {
   107a6:	4291      	cmp	r1, r2
   107a8:	d1f9      	bne.n	1079e <mem_rcopy+0xe>
	}
}
   107aa:	4770      	bx	lr

000107ac <mem_nz>:
 * @brief Determine if src[0..len-1] contains one or more non-zero bytes
 * @return 0 if all bytes are zero; otherwise 1
 */
uint8_t mem_nz(uint8_t *src, uint16_t len)
{
	while (len--) {
   107ac:	4401      	add	r1, r0
   107ae:	e002      	b.n	107b6 <mem_nz+0xa>
		if (*src++) {
   107b0:	f810 3b01 	ldrb.w	r3, [r0], #1
   107b4:	b91b      	cbnz	r3, 107be <mem_nz+0x12>
	while (len--) {
   107b6:	4288      	cmp	r0, r1
   107b8:	d1fa      	bne.n	107b0 <mem_nz+0x4>
			return 1;
		}
	}

	return 0;
   107ba:	2000      	movs	r0, #0
   107bc:	4770      	bx	lr
			return 1;
   107be:	2001      	movs	r0, #1
}
   107c0:	4770      	bx	lr
   107c2:	bf00      	nop

000107c4 <memq_init>:
 * @return          Initial link-element
 */
memq_link_t *memq_init(memq_link_t *link, memq_link_t **head, memq_link_t **tail)
{
	/* Head and tail pointer to the initial link - forms an empty queue */
	*head = *tail = link;
   107c4:	6010      	str	r0, [r2, #0]
   107c6:	6008      	str	r0, [r1, #0]

	return link;
}
   107c8:	4770      	bx	lr
   107ca:	bf00      	nop

000107cc <memq_deinit>:
memq_link_t *memq_deinit(memq_link_t **head, memq_link_t **tail)
{
	memq_link_t *old_head;

	/* If head and tail are not equal, then queue is not empty */
	if (*head != *tail) {
   107cc:	680a      	ldr	r2, [r1, #0]
{
   107ce:	4603      	mov	r3, r0
	if (*head != *tail) {
   107d0:	6800      	ldr	r0, [r0, #0]
   107d2:	4290      	cmp	r0, r2
		return NULL;
	}

	old_head = *head;
	*head = *tail = NULL;
   107d4:	bf05      	ittet	eq
   107d6:	2200      	moveq	r2, #0
   107d8:	600a      	streq	r2, [r1, #0]
		return NULL;
   107da:	2000      	movne	r0, #0
	*head = *tail = NULL;
   107dc:	601a      	streq	r2, [r3, #0]

	return old_head;
}
   107de:	4770      	bx	lr

000107e0 <memq_enqueue>:
 * @return             New tail. Note: Does not point to the new mem
 */
memq_link_t *memq_enqueue(memq_link_t *link, void *mem, memq_link_t **tail)
{
	/* Let the old tail element point to the new tail element */
	(*tail)->next = link;
   107e0:	f8d2 c000 	ldr.w	ip, [r2]
   107e4:	f8cc 0000 	str.w	r0, [ip]

	/* Let the old tail element point the the new memory */
	(*tail)->mem = mem;
   107e8:	f8d2 c000 	ldr.w	ip, [r2]
   107ec:	f8cc 1004 	str.w	r1, [ip, #4]

	/* Update the tail-pointer to point to the new tail element.
	 * The new tail-element is not expected to point to anything sensible
	 */
	cpu_dmb(); /* Ensure data accesses are synchronized */
	*tail = link; /* Commit: enqueue of memq node */
   107f0:	6010      	str	r0, [r2, #0]

	return link;
}
   107f2:	4770      	bx	lr

000107f4 <memq_peek>:
 * @return         head or NULL if queue is empty
 */
memq_link_t *memq_peek(memq_link_t *head, memq_link_t *tail, void **mem)
{
	/* If head and tail are equal, then queue empty */
	if (head == tail) {
   107f4:	4288      	cmp	r0, r1
   107f6:	d003      	beq.n	10800 <memq_peek+0xc>
		return NULL;
	}

	/* Extract the head link-element's memory */
	if (mem) {
   107f8:	b11a      	cbz	r2, 10802 <memq_peek+0xe>
		*mem = head->mem;
   107fa:	6843      	ldr	r3, [r0, #4]
   107fc:	6013      	str	r3, [r2, #0]
   107fe:	4770      	bx	lr
		return NULL;
   10800:	2000      	movs	r0, #0
	}

	return head; /* queue was not empty */
}
   10802:	4770      	bx	lr

00010804 <memq_dequeue>:
memq_link_t *memq_dequeue(memq_link_t *tail, memq_link_t **head, void **mem)
{
	memq_link_t *old_head;

	/* Use memq peek to get the old head and its mem */
	old_head = memq_peek(*head, tail, mem);
   10804:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
   10806:	4283      	cmp	r3, r0
   10808:	d009      	beq.n	1081e <memq_dequeue+0x1a>
	if (mem) {
   1080a:	b12a      	cbz	r2, 10818 <memq_dequeue+0x14>
		*mem = head->mem;
   1080c:	6858      	ldr	r0, [r3, #4]
   1080e:	6010      	str	r0, [r2, #0]
	if (old_head == NULL) {
		return NULL; /* queue is empty */
	}

	/* Update the head-pointer to point to the new head element */
	*head = old_head->next;
   10810:	681a      	ldr	r2, [r3, #0]
   10812:	600a      	str	r2, [r1, #0]

	return old_head;
}
   10814:	4618      	mov	r0, r3
   10816:	4770      	bx	lr
	if (old_head == NULL) {
   10818:	2b00      	cmp	r3, #0
   1081a:	d1f9      	bne.n	10810 <memq_dequeue+0xc>
   1081c:	e7fa      	b.n	10814 <memq_dequeue+0x10>
		return NULL; /* queue is empty */
   1081e:	2300      	movs	r3, #0
   10820:	e7f8      	b.n	10814 <memq_dequeue+0x10>
   10822:	bf00      	nop

00010824 <mayfly_init>:
#if defined(MAYFLY_UT)
static uint8_t _state;
#endif /* MAYFLY_UT */

void mayfly_init(void)
{
   10824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   10828:	f8df 8030 	ldr.w	r8, [pc, #48]	; 1085c <mayfly_init+0x38>
   1082c:	4e0c      	ldr	r6, [pc, #48]	; (10860 <mayfly_init+0x3c>)
   1082e:	270c      	movs	r7, #12
	callee_id = MAYFLY_CALLEE_COUNT;
	while (callee_id--) {
		uint8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
   10830:	f106 0430 	add.w	r4, r6, #48	; 0x30
{
   10834:	4645      	mov	r5, r8
			memq_init(&mfl[callee_id][caller_id],
   10836:	1d22      	adds	r2, r4, #4
   10838:	4621      	mov	r1, r4
   1083a:	4628      	mov	r0, r5
		while (caller_id--) {
   1083c:	3c0c      	subs	r4, #12
			memq_init(&mfl[callee_id][caller_id],
   1083e:	f7ff ffc1 	bl	107c4 <memq_init>
		while (caller_id--) {
   10842:	42b4      	cmp	r4, r6
   10844:	f1a5 0508 	sub.w	r5, r5, #8
   10848:	d1f5      	bne.n	10836 <mayfly_init+0x12>
	while (callee_id--) {
   1084a:	3f04      	subs	r7, #4
   1084c:	1d3b      	adds	r3, r7, #4
   1084e:	f1a8 0820 	sub.w	r8, r8, #32
   10852:	f1a4 0630 	sub.w	r6, r4, #48	; 0x30
   10856:	d1eb      	bne.n	10830 <mayfly_init+0xc>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
   10858:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1085c:	2000d8e4 	.word	0x2000d8e4
   10860:	2000d974 	.word	0x2000d974

00010864 <mayfly_enable>:

void mayfly_enable(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
   10864:	b410      	push	{r4}
   10866:	4603      	mov	r3, r0
	if (enable) {
		if (mft[callee_id][caller_id].enable_req ==
   10868:	4c15      	ldr	r4, [pc, #84]	; (108c0 <mayfly_enable+0x5c>)
{
   1086a:	468c      	mov	ip, r1
	if (enable) {
   1086c:	b192      	cbz	r2, 10894 <mayfly_enable+0x30>
		if (mft[callee_id][caller_id].enable_req ==
   1086e:	eb00 0140 	add.w	r1, r0, r0, lsl #1
   10872:	eb0c 004c 	add.w	r0, ip, ip, lsl #1
   10876:	0100      	lsls	r0, r0, #4
   10878:	eb00 0181 	add.w	r1, r0, r1, lsl #2
   1087c:	4421      	add	r1, r4
   1087e:	7a48      	ldrb	r0, [r1, #9]
   10880:	7a0c      	ldrb	r4, [r1, #8]
   10882:	42a0      	cmp	r0, r4
		    mft[callee_id][caller_id].enable_ack) {
			mft[callee_id][caller_id].enable_req++;
   10884:	bf04      	itt	eq
   10886:	3001      	addeq	r0, #1
   10888:	7208      	strbeq	r0, [r1, #8]

			/* pend the callee for execution */
			mayfly_pend(caller_id, callee_id);
		}
	}
}
   1088a:	bc10      	pop	{r4}
		mayfly_enable_cb(caller_id, callee_id, enable);
   1088c:	4661      	mov	r1, ip
   1088e:	4618      	mov	r0, r3
   10890:	f00c bc36 	b.w	1d100 <mayfly_enable_cb>
		if (mft[callee_id][caller_id].disable_req ==
   10894:	eb01 0241 	add.w	r2, r1, r1, lsl #1
   10898:	0112      	lsls	r2, r2, #4
   1089a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1089e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   108a2:	4423      	add	r3, r4
   108a4:	7a9c      	ldrb	r4, [r3, #10]
   108a6:	7ada      	ldrb	r2, [r3, #11]
   108a8:	42a2      	cmp	r2, r4
   108aa:	d001      	beq.n	108b0 <mayfly_enable+0x4c>
}
   108ac:	bc10      	pop	{r4}
   108ae:	4770      	bx	lr
			mft[callee_id][caller_id].disable_req++;
   108b0:	3201      	adds	r2, #1
   108b2:	729a      	strb	r2, [r3, #10]
			mfp[callee_id] = 1U;
   108b4:	4b03      	ldr	r3, [pc, #12]	; (108c4 <mayfly_enable+0x60>)
   108b6:	2201      	movs	r2, #1
   108b8:	545a      	strb	r2, [r3, r1]
}
   108ba:	bc10      	pop	{r4}
			mayfly_pend(caller_id, callee_id);
   108bc:	f00c bc76 	b.w	1d1ac <mayfly_pend>
   108c0:	2000d8f0 	.word	0x2000d8f0
   108c4:	2000d8ec 	.word	0x2000d8ec

000108c8 <mayfly_enqueue>:

uint32_t mayfly_enqueue(uint8_t caller_id, uint8_t callee_id, uint8_t chain,
			struct mayfly *m)
{
   108c8:	b570      	push	{r4, r5, r6, lr}
   108ca:	4606      	mov	r6, r0
   108cc:	461c      	mov	r4, r3
   108ce:	460d      	mov	r5, r1
	uint8_t state;
	uint8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
   108d0:	b322      	cbz	r2, 1091c <mayfly_enqueue+0x54>

	/* shadow the ack */
	ack = m->_ack;

	/* already in queue */
	state = (m->_req - ack) & 0x03;
   108d2:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   108d4:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   108d6:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   108d8:	f012 0203 	ands.w	r2, r2, #3
   108dc:	d005      	beq.n	108ea <mayfly_enqueue+0x22>
		if (chain) {
			if (state != 1U) {
   108de:	2a01      	cmp	r2, #1
   108e0:	d040      	beq.n	10964 <mayfly_enqueue+0x9c>
				/* mark as ready in queue */
				m->_req = ack + 1;
   108e2:	3301      	adds	r3, #1
   108e4:	b2db      	uxtb	r3, r3
   108e6:	7023      	strb	r3, [r4, #0]

				goto mayfly_enqueue_pend;
   108e8:	e00f      	b.n	1090a <mayfly_enqueue+0x42>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
   108ea:	3301      	adds	r3, #1
   108ec:	b2db      	uxtb	r3, r3
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   108ee:	2130      	movs	r1, #48	; 0x30
	m->_req = ack + 1;
   108f0:	7023      	strb	r3, [r4, #0]
	memq_enqueue(m->_link, m, &mft[callee_id][caller_id].tail);
   108f2:	2304      	movs	r3, #4
   108f4:	fb11 3105 	smlabb	r1, r1, r5, r3
   108f8:	4a1b      	ldr	r2, [pc, #108]	; (10968 <mayfly_enqueue+0xa0>)
   108fa:	6860      	ldr	r0, [r4, #4]
   108fc:	230c      	movs	r3, #12
   108fe:	fb13 1306 	smlabb	r3, r3, r6, r1
   10902:	441a      	add	r2, r3
   10904:	4621      	mov	r1, r4
   10906:	f7ff ff6b 	bl	107e0 <memq_enqueue>

mayfly_enqueue_pend:
	/* set mayfly callee pending */
	mfp[callee_id] = 1U;
   1090a:	4b18      	ldr	r3, [pc, #96]	; (1096c <mayfly_enqueue+0xa4>)
   1090c:	2201      	movs	r2, #1

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
   1090e:	4630      	mov	r0, r6
	mfp[callee_id] = 1U;
   10910:	555a      	strb	r2, [r3, r5]
	mayfly_pend(caller_id, callee_id);
   10912:	4629      	mov	r1, r5
   10914:	f00c fc4a 	bl	1d1ac <mayfly_pend>

	return 0;
   10918:	2000      	movs	r0, #0
}
   1091a:	bd70      	pop	{r4, r5, r6, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1091c:	f00c fc30 	bl	1d180 <mayfly_prio_is_equal>
   10920:	2800      	cmp	r0, #0
   10922:	d0d6      	beq.n	108d2 <mayfly_enqueue+0xa>
		!mayfly_is_enabled(caller_id, callee_id) ||
   10924:	4629      	mov	r1, r5
   10926:	4630      	mov	r0, r6
   10928:	f00c fc0a 	bl	1d140 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
   1092c:	2800      	cmp	r0, #0
   1092e:	d0d0      	beq.n	108d2 <mayfly_enqueue+0xa>
		(mft[callee_id][caller_id].disable_req !=
   10930:	eb05 0245 	add.w	r2, r5, r5, lsl #1
   10934:	0112      	lsls	r2, r2, #4
   10936:	490c      	ldr	r1, [pc, #48]	; (10968 <mayfly_enqueue+0xa0>)
   10938:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1093c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   10940:	440b      	add	r3, r1
		!mayfly_is_enabled(caller_id, callee_id) ||
   10942:	7a9a      	ldrb	r2, [r3, #10]
   10944:	7adb      	ldrb	r3, [r3, #11]
   10946:	429a      	cmp	r2, r3
   10948:	d1c3      	bne.n	108d2 <mayfly_enqueue+0xa>
	state = (m->_req - ack) & 0x03;
   1094a:	7822      	ldrb	r2, [r4, #0]
	ack = m->_ack;
   1094c:	7863      	ldrb	r3, [r4, #1]
	state = (m->_req - ack) & 0x03;
   1094e:	1ad2      	subs	r2, r2, r3
	if (state != 0U) {
   10950:	0792      	lsls	r2, r2, #30
   10952:	d002      	beq.n	1095a <mayfly_enqueue+0x92>
		m->_req = ack + 2;
   10954:	3302      	adds	r3, #2
   10956:	b2db      	uxtb	r3, r3
   10958:	7023      	strb	r3, [r4, #0]
		m->fp(m->param);
   1095a:	e9d4 0302 	ldrd	r0, r3, [r4, #8]
   1095e:	4798      	blx	r3
		return 0;
   10960:	2000      	movs	r0, #0
}
   10962:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   10964:	4610      	mov	r0, r2
}
   10966:	bd70      	pop	{r4, r5, r6, pc}
   10968:	2000d8f0 	.word	0x2000d8f0
   1096c:	2000d8ec 	.word	0x2000d8ec

00010970 <mayfly_run>:
{
	uint8_t disable = 0U;
	uint8_t enable = 0U;
	uint8_t caller_id;

	if (!mfp[callee_id]) {
   10970:	4a4f      	ldr	r2, [pc, #316]	; (10ab0 <mayfly_run+0x140>)
   10972:	5c13      	ldrb	r3, [r2, r0]
   10974:	2b00      	cmp	r3, #0
   10976:	f000 8099 	beq.w	10aac <mayfly_run+0x13c>
{
   1097a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		return;
	}
	mfp[callee_id] = 0U;
   1097e:	2300      	movs	r3, #0
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10980:	4f4c      	ldr	r7, [pc, #304]	; (10ab4 <mayfly_run+0x144>)
	mfp[callee_id] = 0U;
   10982:	5413      	strb	r3, [r2, r0]
{
   10984:	b087      	sub	sp, #28
	uint8_t enable = 0U;
   10986:	461a      	mov	r2, r3
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10988:	f04f 0b3c 	mov.w	fp, #60	; 0x3c

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
	while (caller_id--) {
		memq_link_t *link;
		struct mayfly *m = 0;
   1098c:	e9cd 2001 	strd	r2, r0, [sp, #4]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10990:	fb0b 7b00 	mla	fp, fp, r0, r7
	uint8_t enable = 0U;
   10994:	9303      	str	r3, [sp, #12]
   10996:	eb00 0340 	add.w	r3, r0, r0, lsl #1
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   1099a:	f10b 0804 	add.w	r8, fp, #4
   1099e:	eb07 1703 	add.w	r7, r7, r3, lsl #4
	while (caller_id--) {
   109a2:	f04f 0903 	mov.w	r9, #3
		struct mayfly *m = 0;
   109a6:	2300      	movs	r3, #0

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].head,
   109a8:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   109ac:	aa05      	add	r2, sp, #20
		struct mayfly *m = 0;
   109ae:	9305      	str	r3, [sp, #20]
		link = memq_peek(mft[callee_id][caller_id].head,
   109b0:	f7ff ff20 	bl	107f4 <memq_peek>
				 mft[callee_id][caller_id].tail,
				 (void **)&m);
		while (link) {
   109b4:	f107 0624 	add.w	r6, r7, #36	; 0x24
   109b8:	4683      	mov	fp, r0
   109ba:	b398      	cbz	r0, 10a24 <mayfly_run+0xb4>
#if defined(MAYFLY_UT)
			_state = 0U;
#endif /* MAYFLY_UT */

			/* execute work if ready */
			state = (m->_req - m->_ack) & 0x03;
   109bc:	9c05      	ldr	r4, [sp, #20]
   109be:	7863      	ldrb	r3, [r4, #1]
   109c0:	7825      	ldrb	r5, [r4, #0]
   109c2:	1aed      	subs	r5, r5, r3
   109c4:	f005 0503 	and.w	r5, r5, #3
			if (state == 1U) {
   109c8:	2d01      	cmp	r5, #1
   109ca:	d106      	bne.n	109da <mayfly_run+0x6a>
#if defined(MAYFLY_UT)
				_state = 1U;
#endif /* MAYFLY_UT */

				/* mark mayfly as ran */
				m->_ack--;
   109cc:	3b01      	subs	r3, #1
   109ce:	7063      	strb	r3, [r4, #1]

				/* call the mayfly function */
				m->fp(m->param);
   109d0:	e9d4 0202 	ldrd	r0, r2, [r4, #8]
   109d4:	4790      	blx	r2
			}

			/* dequeue if not re-pended */
			dequeue(callee_id, caller_id, link, m);
   109d6:	9c05      	ldr	r4, [sp, #20]
	if (((req - m->_ack) & 0x03) != 1U) {
   109d8:	7863      	ldrb	r3, [r4, #1]
	req = m->_req;
   109da:	7820      	ldrb	r0, [r4, #0]
	if (((req - m->_ack) & 0x03) != 1U) {
   109dc:	1ac3      	subs	r3, r0, r3
   109de:	f003 0303 	and.w	r3, r3, #3
   109e2:	2b01      	cmp	r3, #1
		memq_dequeue(mft[callee_id][caller_id].tail,
   109e4:	f04f 0200 	mov.w	r2, #0
   109e8:	4631      	mov	r1, r6
	req = m->_req;
   109ea:	fa5f fa80 	uxtb.w	sl, r0
	if (((req - m->_ack) & 0x03) != 1U) {
   109ee:	d00f      	beq.n	10a10 <mayfly_run+0xa0>
		memq_dequeue(mft[callee_id][caller_id].tail,
   109f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
   109f2:	f7ff ff07 	bl	10804 <memq_dequeue>
		ack = m->_ack;
   109f6:	f894 c001 	ldrb.w	ip, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   109fa:	7823      	ldrb	r3, [r4, #0]
		m->_link = link;
   109fc:	f8c4 b004 	str.w	fp, [r4, #4]
		if (((m->_req - ack) & 0x03) == 1U) {
   10a00:	eba3 030c 	sub.w	r3, r3, ip
   10a04:	f003 0303 	and.w	r3, r3, #3
   10a08:	2b01      	cmp	r3, #1
		m->_ack = req;
   10a0a:	f884 a001 	strb.w	sl, [r4, #1]
		if (((m->_req - ack) & 0x03) == 1U) {
   10a0e:	d045      	beq.n	10a9c <mayfly_run+0x12c>

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].head,
   10a10:	e9d7 0109 	ldrd	r0, r1, [r7, #36]	; 0x24
   10a14:	aa05      	add	r2, sp, #20
   10a16:	f7ff feed 	bl	107f4 <memq_peek>
 */
#if defined(CONFIG_BT_MAYFLY_YIELD_AFTER_CALL)
			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1U) {
   10a1a:	2d01      	cmp	r5, #1
			link = memq_peek(mft[callee_id][caller_id].head,
   10a1c:	4683      	mov	fp, r0
			if (state == 1U) {
   10a1e:	d02b      	beq.n	10a78 <mayfly_run+0x108>
		while (link) {
   10a20:	2800      	cmp	r0, #0
   10a22:	d1cb      	bne.n	109bc <mayfly_run+0x4c>
				}
			}
#endif
		}

		if (mft[callee_id][caller_id].disable_req !=
   10a24:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
   10a28:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
   10a2c:	429a      	cmp	r2, r3
   10a2e:	d003      	beq.n	10a38 <mayfly_run+0xc8>
		    mft[callee_id][caller_id].disable_ack) {
			disable = 1U;

			mft[callee_id][caller_id].disable_ack =
   10a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			disable = 1U;
   10a34:	2301      	movs	r3, #1
   10a36:	9301      	str	r3, [sp, #4]
				mft[callee_id][caller_id].disable_req;
		}

		if (mft[callee_id][caller_id].enable_req !=
   10a38:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
   10a3c:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
   10a40:	429a      	cmp	r2, r3
   10a42:	d003      	beq.n	10a4c <mayfly_run+0xdc>
		    mft[callee_id][caller_id].enable_ack) {
			enable = 1U;

			mft[callee_id][caller_id].enable_ack =
   10a44:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
			enable = 1U;
   10a48:	2301      	movs	r3, #1
   10a4a:	9303      	str	r3, [sp, #12]
	while (caller_id--) {
   10a4c:	f109 39ff 	add.w	r9, r9, #4294967295
   10a50:	fa5f f989 	uxtb.w	r9, r9
   10a54:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
   10a58:	f1a7 070c 	sub.w	r7, r7, #12
   10a5c:	d1a3      	bne.n	109a6 <mayfly_run+0x36>
				mft[callee_id][caller_id].enable_req;
		}
	}

	if (disable && !enable) {
   10a5e:	e9dd 3a01 	ldrd	r3, sl, [sp, #4]
   10a62:	b1c3      	cbz	r3, 10a96 <mayfly_run+0x126>
   10a64:	9b03      	ldr	r3, [sp, #12]
   10a66:	b9b3      	cbnz	r3, 10a96 <mayfly_run+0x126>
		mayfly_enable_cb(callee_id, callee_id, 0);
   10a68:	461a      	mov	r2, r3
   10a6a:	4651      	mov	r1, sl
   10a6c:	4650      	mov	r0, sl
	}
}
   10a6e:	b007      	add	sp, #28
   10a70:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		mayfly_enable_cb(callee_id, callee_id, 0);
   10a74:	f00c bb44 	b.w	1d100 <mayfly_enable_cb>
				if (caller_id || link) {
   10a78:	f1b9 0f00 	cmp.w	r9, #0
   10a7c:	d101      	bne.n	10a82 <mayfly_run+0x112>
   10a7e:	2800      	cmp	r0, #0
   10a80:	d0d0      	beq.n	10a24 <mayfly_run+0xb4>
					mfp[callee_id] = 1U;
   10a82:	f8dd a008 	ldr.w	sl, [sp, #8]
   10a86:	4a0a      	ldr	r2, [pc, #40]	; (10ab0 <mayfly_run+0x140>)
   10a88:	2301      	movs	r3, #1
   10a8a:	f802 300a 	strb.w	r3, [r2, sl]
					mayfly_pend(callee_id, callee_id);
   10a8e:	4651      	mov	r1, sl
   10a90:	4650      	mov	r0, sl
   10a92:	f00c fb8b 	bl	1d1ac <mayfly_pend>
}
   10a96:	b007      	add	sp, #28
   10a98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10a9c:	4642      	mov	r2, r8
   10a9e:	4621      	mov	r1, r4
   10aa0:	4658      	mov	r0, fp
			m->_ack = ack;
   10aa2:	f884 c001 	strb.w	ip, [r4, #1]
			memq_enqueue(link, m, &mft[callee_id][callee_id].tail);
   10aa6:	f7ff fe9b 	bl	107e0 <memq_enqueue>
   10aaa:	e7b1      	b.n	10a10 <mayfly_run+0xa0>
   10aac:	4770      	bx	lr
   10aae:	bf00      	nop
   10ab0:	2000d8ec 	.word	0x2000d8ec
   10ab4:	2000d8f0 	.word	0x2000d8f0

00010ab8 <util_ones_count_get>:
 */
uint8_t util_ones_count_get(uint8_t *octets, uint8_t octets_len)
{
	uint8_t one_count = 0U;

	while (octets_len--) {
   10ab8:	1e4b      	subs	r3, r1, #1
   10aba:	b2db      	uxtb	r3, r3
   10abc:	b189      	cbz	r1, 10ae2 <util_ones_count_get+0x2a>
   10abe:	1e41      	subs	r1, r0, #1
   10ac0:	eb00 0c03 	add.w	ip, r0, r3
	uint8_t one_count = 0U;
   10ac4:	2000      	movs	r0, #0
		uint8_t bite;

		bite = *octets;
   10ac6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
		while (bite) {
   10aca:	b13b      	cbz	r3, 10adc <util_ones_count_get+0x24>
			bite &= (bite - 1);
   10acc:	b25b      	sxtb	r3, r3
   10ace:	1e5a      	subs	r2, r3, #1
   10ad0:	4013      	ands	r3, r2
			one_count++;
   10ad2:	3001      	adds	r0, #1
		while (bite) {
   10ad4:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
			one_count++;
   10ad8:	b2c0      	uxtb	r0, r0
		while (bite) {
   10ada:	d1f7      	bne.n	10acc <util_ones_count_get+0x14>
	while (octets_len--) {
   10adc:	4561      	cmp	r1, ip
   10ade:	d1f2      	bne.n	10ac6 <util_ones_count_get+0xe>
   10ae0:	4770      	bx	lr
	uint8_t one_count = 0U;
   10ae2:	4608      	mov	r0, r1
		}
		octets++;
	}

	return one_count;
}
   10ae4:	4770      	bx	lr
   10ae6:	bf00      	nop

00010ae8 <ticks_to_expire_prep>:
{
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;

	/* Calculate ticks to expire for this new node */
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10ae8:	eba2 0c01 	sub.w	ip, r2, r1
   10aec:	f41c 0f00 	tst.w	ip, #8388608	; 0x800000
{
   10af0:	b410      	push	{r4}
	uint32_t ticks_to_expire = ticker->ticks_to_expire;
   10af2:	6883      	ldr	r3, [r0, #8]
	uint32_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10af4:	6944      	ldr	r4, [r0, #20]
	if (!((ticks_at_start - ticks_current) & BIT(HAL_TICKER_CNTR_MSBIT))) {
   10af6:	d10a      	bne.n	10b0e <ticks_to_expire_prep+0x26>
 * @param ticks_now Highest tick count (now)
 * @param ticks_old Tick count to subtract from ticks_now
 */
uint32_t ticker_ticks_diff_get(uint32_t ticks_now, uint32_t ticks_old)
{
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10af8:	f02c 417f 	bic.w	r1, ip, #4278190080	; 0xff000000
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10afc:	440b      	add	r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   10afe:	42a3      	cmp	r3, r4
   10b00:	d914      	bls.n	10b2c <ticks_to_expire_prep+0x44>
		ticks_to_expire -= ticks_to_expire_minus;
   10b02:	1b1b      	subs	r3, r3, r4
		ticks_to_expire_minus = 0U;
   10b04:	2100      	movs	r1, #0
}
   10b06:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   10b08:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10b0a:	6141      	str	r1, [r0, #20]
}
   10b0c:	4770      	bx	lr
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10b0e:	1a89      	subs	r1, r1, r2
   10b10:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
		if (ticks_to_expire > delta_current_start) {
   10b14:	428b      	cmp	r3, r1
   10b16:	d806      	bhi.n	10b26 <ticks_to_expire_prep+0x3e>
			ticks_to_expire_minus +=
   10b18:	4421      	add	r1, r4
   10b1a:	1ac9      	subs	r1, r1, r3
		ticks_to_expire = 0U;
   10b1c:	2300      	movs	r3, #0
}
   10b1e:	bc10      	pop	{r4}
	ticker->ticks_to_expire = ticks_to_expire;
   10b20:	6083      	str	r3, [r0, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10b22:	6141      	str	r1, [r0, #20]
}
   10b24:	4770      	bx	lr
			ticks_to_expire -= delta_current_start;
   10b26:	1a5b      	subs	r3, r3, r1
	if (ticks_to_expire > ticks_to_expire_minus) {
   10b28:	42a3      	cmp	r3, r4
   10b2a:	d8ea      	bhi.n	10b02 <ticks_to_expire_prep+0x1a>
		ticks_to_expire_minus -= ticks_to_expire;
   10b2c:	1ae1      	subs	r1, r4, r3
   10b2e:	e7f5      	b.n	10b1c <ticks_to_expire_prep+0x34>

00010b30 <ticker_job_list_insert>:
{
   10b30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10b34:	b087      	sub	sp, #28
   10b36:	4603      	mov	r3, r0
	count_user = instance->count_user;
   10b38:	7a42      	ldrb	r2, [r0, #9]
{
   10b3a:	9001      	str	r0, [sp, #4]
	node = &instance->nodes[0];
   10b3c:	6800      	ldr	r0, [r0, #0]
   10b3e:	9002      	str	r0, [sp, #8]
	users = &instance->users[0];
   10b40:	6858      	ldr	r0, [r3, #4]
   10b42:	9005      	str	r0, [sp, #20]
	while (count_user--) {
   10b44:	2a00      	cmp	r2, #0
   10b46:	f000 80f6 	beq.w	10d36 <ticker_job_list_insert+0x206>
   10b4a:	1e53      	subs	r3, r2, #1
   10b4c:	b2db      	uxtb	r3, r3
   10b4e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
   10b52:	460f      	mov	r7, r1
   10b54:	9303      	str	r3, [sp, #12]
		user_ops = (void *)&user->user_op[0];
   10b56:	9b03      	ldr	r3, [sp, #12]
   10b58:	685a      	ldr	r2, [r3, #4]
		user_ops_first = user->first;
   10b5a:	785e      	ldrb	r6, [r3, #1]
		user_ops = (void *)&user->user_op[0];
   10b5c:	9204      	str	r2, [sp, #16]
		while ((insert_head != TICKER_NULL) ||
   10b5e:	2fff      	cmp	r7, #255	; 0xff
   10b60:	d05e      	beq.n	10c20 <ticker_job_list_insert+0xf0>
				ticker = &node[id_insert];
   10b62:	eb07 0447 	add.w	r4, r7, r7, lsl #1
   10b66:	9b02      	ldr	r3, [sp, #8]
   10b68:	ea4f 1a04 	mov.w	sl, r4, lsl #4
   10b6c:	46b8      	mov	r8, r7
				insert_head = ticker->next;
   10b6e:	f813 700a 	ldrb.w	r7, [r3, sl]
				ticker = &node[id_insert];
   10b72:	eb03 1404 	add.w	r4, r3, r4, lsl #4
				user_op = NULL;
   10b76:	2500      	movs	r5, #0
	node = &instance->nodes[0];
   10b78:	9b01      	ldr	r3, [sp, #4]
	ticker->next = TICKER_NULL;
   10b7a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   10b7e:	f884 9000 	strb.w	r9, [r4]
	node = &instance->nodes[0];
   10b82:	f8d3 e000 	ldr.w	lr, [r3]
	current = instance->ticker_id_head;
   10b86:	7f5a      	ldrb	r2, [r3, #29]
	ticker_new = &node[id];
   10b88:	eb0e 0b0a 	add.w	fp, lr, sl
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10b8c:	454a      	cmp	r2, r9
	ticks_to_expire = ticker_new->ticks_to_expire;
   10b8e:	f8db 1008 	ldr.w	r1, [fp, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10b92:	d10f      	bne.n	10bb4 <ticker_job_list_insert+0x84>
   10b94:	e0ca      	b.n	10d2c <ticker_job_list_insert+0x1fc>
		if (ticks_to_expire == 0 && (ticker_new->lazy_current >
   10b96:	1a09      	subs	r1, r1, r0
   10b98:	d106      	bne.n	10ba8 <ticker_job_list_insert+0x78>
   10b9a:	f8bb a01e 	ldrh.w	sl, [fp, #30]
   10b9e:	f8bc c01e 	ldrh.w	ip, [ip, #30]
   10ba2:	45e2      	cmp	sl, ip
   10ba4:	f200 8086 	bhi.w	10cb4 <ticker_job_list_insert+0x184>
		current = ticker_current->next;
   10ba8:	f81e 3003 	ldrb.w	r3, [lr, r3]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10bac:	2bff      	cmp	r3, #255	; 0xff
   10bae:	4691      	mov	r9, r2
   10bb0:	d072      	beq.n	10c98 <ticker_job_list_insert+0x168>
   10bb2:	461a      	mov	r2, r3
		(ticker_current = &node[current])->ticks_to_expire))) {
   10bb4:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   10bb8:	eb0e 1c03 	add.w	ip, lr, r3, lsl #4
   10bbc:	011b      	lsls	r3, r3, #4
		(ticks_to_expire_current =
   10bbe:	f8dc 0008 	ldr.w	r0, [ip, #8]
	while ((current != TICKER_NULL) && (ticks_to_expire >=
   10bc2:	4288      	cmp	r0, r1
   10bc4:	d9e7      	bls.n	10b96 <ticker_job_list_insert+0x66>
	if (previous == TICKER_NULL) {
   10bc6:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	ticker_new->ticks_to_expire = ticks_to_expire;
   10bca:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   10bce:	f88b 2000 	strb.w	r2, [fp]
	if (previous == TICKER_NULL) {
   10bd2:	d166      	bne.n	10ca2 <ticker_job_list_insert+0x172>
		instance->ticker_id_head = id;
   10bd4:	9b01      	ldr	r3, [sp, #4]
   10bd6:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   10bda:	2aff      	cmp	r2, #255	; 0xff
   10bdc:	d008      	beq.n	10bf0 <ticker_job_list_insert+0xc0>
		node[current].ticks_to_expire -= ticks_to_expire;
   10bde:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   10be2:	eb0e 1e02 	add.w	lr, lr, r2, lsl #4
   10be6:	f8de 3008 	ldr.w	r3, [lr, #8]
   10bea:	1a5b      	subs	r3, r3, r1
   10bec:	f8ce 3008 	str.w	r3, [lr, #8]
	ticker->req = ticker->ack + 1;
   10bf0:	78a3      	ldrb	r3, [r4, #2]
   10bf2:	3301      	adds	r3, #1
   10bf4:	7063      	strb	r3, [r4, #1]
			if (user_op) {
   10bf6:	2d00      	cmp	r5, #0
   10bf8:	d0b1      	beq.n	10b5e <ticker_job_list_insert+0x2e>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10bfa:	f04f 0200 	mov.w	r2, #0
	if (user_op->fp_op_func) {
   10bfe:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10c00:	702a      	strb	r2, [r5, #0]
	user_op->status = status;
   10c02:	2200      	movs	r2, #0
   10c04:	62aa      	str	r2, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10c06:	b113      	cbz	r3, 10c0e <ticker_job_list_insert+0xde>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10c08:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10c0a:	4610      	mov	r0, r2
   10c0c:	4798      	blx	r3
				if ((ticker->ticks_periodic == 0U) &&
   10c0e:	6863      	ldr	r3, [r4, #4]
   10c10:	2b00      	cmp	r3, #0
   10c12:	d1a4      	bne.n	10b5e <ticker_job_list_insert+0x2e>
					ticker->op_context =
   10c14:	e9d5 230b 	ldrd	r2, r3, [r5, #44]	; 0x2c
		while ((insert_head != TICKER_NULL) ||
   10c18:	2fff      	cmp	r7, #255	; 0xff
					ticker->op_context =
   10c1a:	e9c4 2308 	strd	r2, r3, [r4, #32]
		while ((insert_head != TICKER_NULL) ||
   10c1e:	d1a0      	bne.n	10b62 <ticker_job_list_insert+0x32>
   10c20:	9b03      	ldr	r3, [sp, #12]
   10c22:	7898      	ldrb	r0, [r3, #2]
   10c24:	42b0      	cmp	r0, r6
   10c26:	d02f      	beq.n	10c88 <ticker_job_list_insert+0x158>
   10c28:	e9dd b903 	ldrd	fp, r9, [sp, #12]
				user_op = &user_ops[user_ops_first];
   10c2c:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   10c30:	eb06 0383 	add.w	r3, r6, r3, lsl #2
				if (first == user->count_user_op) {
   10c34:	f89b 1000 	ldrb.w	r1, [fp]
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10c38:	f819 2023 	ldrb.w	r2, [r9, r3, lsl #2]
				first = user_ops_first + 1;
   10c3c:	3601      	adds	r6, #1
   10c3e:	b2f6      	uxtb	r6, r6
					first = 0U;
   10c40:	42b1      	cmp	r1, r6
   10c42:	bf08      	it	eq
   10c44:	2600      	moveq	r6, #0
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10c46:	2a04      	cmp	r2, #4
				user_op = &user_ops[user_ops_first];
   10c48:	eb09 0583 	add.w	r5, r9, r3, lsl #2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10c4c:	d11a      	bne.n	10c84 <ticker_job_list_insert+0x154>
				id_insert = user_op->id;
   10c4e:	f895 8001 	ldrb.w	r8, [r5, #1]
				ticker = &node[id_insert];
   10c52:	9902      	ldr	r1, [sp, #8]
   10c54:	eb08 0248 	add.w	r2, r8, r8, lsl #1
   10c58:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   10c5c:	ea4f 1a02 	mov.w	sl, r2, lsl #4
				      ticker->ack) & 0xff) != 0U) {
   10c60:	78a1      	ldrb	r1, [r4, #2]
				if (((ticker->req -
   10c62:	7862      	ldrb	r2, [r4, #1]
   10c64:	1a52      	subs	r2, r2, r1
   10c66:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   10c6a:	d025      	beq.n	10cb8 <ticker_job_list_insert+0x188>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10c6c:	f04f 0200 	mov.w	r2, #0
   10c70:	f809 2023 	strb.w	r2, [r9, r3, lsl #2]
	if (user_op->fp_op_func) {
   10c74:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10c76:	2001      	movs	r0, #1
	user_op->status = status;
   10c78:	62a8      	str	r0, [r5, #40]	; 0x28
	if (user_op->fp_op_func) {
   10c7a:	b10b      	cbz	r3, 10c80 <ticker_job_list_insert+0x150>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10c7c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   10c7e:	4798      	blx	r3
		while ((insert_head != TICKER_NULL) ||
   10c80:	f89b 0002 	ldrb.w	r0, [fp, #2]
   10c84:	42b0      	cmp	r0, r6
   10c86:	d1d1      	bne.n	10c2c <ticker_job_list_insert+0xfc>
	while (count_user--) {
   10c88:	9a03      	ldr	r2, [sp, #12]
   10c8a:	9905      	ldr	r1, [sp, #20]
   10c8c:	4291      	cmp	r1, r2
   10c8e:	f1a2 0308 	sub.w	r3, r2, #8
   10c92:	d050      	beq.n	10d36 <ticker_job_list_insert+0x206>
   10c94:	9303      	str	r3, [sp, #12]
   10c96:	e75e      	b.n	10b56 <ticker_job_list_insert+0x26>
	ticker_new->ticks_to_expire = ticks_to_expire;
   10c98:	f8cb 1008 	str.w	r1, [fp, #8]
	ticker_new->next = current;
   10c9c:	f88b 3000 	strb.w	r3, [fp]
   10ca0:	461a      	mov	r2, r3
		node[previous].next = id;
   10ca2:	fa0f f989 	sxth.w	r9, r9
   10ca6:	eb09 0949 	add.w	r9, r9, r9, lsl #1
   10caa:	ea4f 1909 	mov.w	r9, r9, lsl #4
   10cae:	f80e 8009 	strb.w	r8, [lr, r9]
   10cb2:	e792      	b.n	10bda <ticker_job_list_insert+0xaa>
   10cb4:	4601      	mov	r1, r0
   10cb6:	e786      	b.n	10bc6 <ticker_job_list_insert+0x96>
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10cb8:	8aab      	ldrh	r3, [r5, #20]
				ticker_job_op_start(ticker, user_op,
   10cba:	9901      	ldr	r1, [sp, #4]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10cbc:	f64f 70fe 	movw	r0, #65534	; 0xfffe
   10cc0:	4283      	cmp	r3, r0
				ticker_job_op_start(ticker, user_op,
   10cc2:	6949      	ldr	r1, [r1, #20]
	if (start->lazy != TICKER_LAZY_MUST_EXPIRE_KEEP) {
   10cc4:	d02a      	beq.n	10d1c <ticker_job_list_insert+0x1ec>
		ticker->must_expire =
   10cc6:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10cca:	1a9a      	subs	r2, r3, r2
   10ccc:	fab2 f282 	clz	r2, r2
   10cd0:	0952      	lsrs	r2, r2, #5
   10cd2:	f884 202c 	strb.w	r2, [r4, #44]	; 0x2c
	ticker->ext_data = start->ext_data;
   10cd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10cd8:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10cda:	68ea      	ldr	r2, [r5, #12]
   10cdc:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10cde:	692a      	ldr	r2, [r5, #16]
   10ce0:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   10ce2:	f64f 72fd 	movw	r2, #65533	; 0xfffd
   10ce6:	4293      	cmp	r3, r2
   10ce8:	bf88      	it	hi
   10cea:	2300      	movhi	r3, #0
   10cec:	83a3      	strh	r3, [r4, #28]
	ticker->ticks_slot = start->ticks_slot;
   10cee:	69ab      	ldr	r3, [r5, #24]
   10cf0:	61a3      	str	r3, [r4, #24]
	ticker->timeout_func = start->fp_timeout_func;
   10cf2:	69eb      	ldr	r3, [r5, #28]
   10cf4:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   10cf6:	6a2b      	ldr	r3, [r5, #32]
   10cf8:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   10cfa:	68ab      	ldr	r3, [r5, #8]
   10cfc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0U;
   10cfe:	2300      	movs	r3, #0
   10d00:	6163      	str	r3, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10d02:	686a      	ldr	r2, [r5, #4]
   10d04:	4620      	mov	r0, r4
	ticker->ticks_to_expire_minus = 0U;
   10d06:	4699      	mov	r9, r3
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10d08:	f7ff feee 	bl	10ae8 <ticks_to_expire_prep>
	ticker->force = 1U;
   10d0c:	f04f 0301 	mov.w	r3, #1
	ticker->remainder_current = 0U;
   10d10:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
	ticker->lazy_current = 0U;
   10d14:	f8a4 901e 	strh.w	r9, [r4, #30]
	ticker->force = 1U;
   10d18:	70e3      	strb	r3, [r4, #3]
}
   10d1a:	e72d      	b.n	10b78 <ticker_job_list_insert+0x48>
	ticker->lazy_periodic =
   10d1c:	4613      	mov	r3, r2
	ticker->ext_data = start->ext_data;
   10d1e:	6a6a      	ldr	r2, [r5, #36]	; 0x24
   10d20:	62a2      	str	r2, [r4, #40]	; 0x28
	ticker->ticks_periodic = start->ticks_periodic;
   10d22:	68ea      	ldr	r2, [r5, #12]
   10d24:	6062      	str	r2, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10d26:	692a      	ldr	r2, [r5, #16]
   10d28:	6222      	str	r2, [r4, #32]
	ticker->lazy_periodic =
   10d2a:	e7df      	b.n	10cec <ticker_job_list_insert+0x1bc>
	ticker_new->next = current;
   10d2c:	f80e 200a 	strb.w	r2, [lr, sl]
		instance->ticker_id_head = id;
   10d30:	f883 801d 	strb.w	r8, [r3, #29]
	if (current != TICKER_NULL) {
   10d34:	e75c      	b.n	10bf0 <ticker_job_list_insert+0xc0>
}
   10d36:	b007      	add	sp, #28
   10d38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00010d3c <ticker_worker>:
{
   10d3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (instance->job_guard) {
   10d40:	7f82      	ldrb	r2, [r0, #30]
{
   10d42:	b08d      	sub	sp, #52	; 0x34
	instance->worker_trigger = 1U;
   10d44:	2301      	movs	r3, #1
	if (instance->job_guard) {
   10d46:	9204      	str	r2, [sp, #16]
	instance->worker_trigger = 1U;
   10d48:	77c3      	strb	r3, [r0, #31]
	if (instance->job_guard) {
   10d4a:	2a00      	cmp	r2, #0
   10d4c:	d15b      	bne.n	10e06 <ticker_worker+0xca>
	if (instance->ticker_id_head == TICKER_NULL) {
   10d4e:	7f43      	ldrb	r3, [r0, #29]
   10d50:	2bff      	cmp	r3, #255	; 0xff
   10d52:	4681      	mov	r9, r0
   10d54:	d056      	beq.n	10e04 <ticker_worker+0xc8>
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10d56:	f00b fd1b 	bl	1c790 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10d5a:	f8d9 2014 	ldr.w	r2, [r9, #20]
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10d5e:	f899 301c 	ldrb.w	r3, [r9, #28]
	ticker_id_head = instance->ticker_id_head;
   10d62:	f899 b01d 	ldrb.w	fp, [r9, #29]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10d66:	1a80      	subs	r0, r0, r2
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10d68:	2bff      	cmp	r3, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   10d6a:	f020 467f 	bic.w	r6, r0, #4278190080	; 0xff000000
	if (instance->ticker_id_slot_previous != TICKER_NULL) {
   10d6e:	f000 8139 	beq.w	10fe4 <ticker_worker+0x2a8>
		if (instance->ticks_slot_previous > ticks_elapsed) {
   10d72:	f8d9 3018 	ldr.w	r3, [r9, #24]
	uint8_t slot_reserved = 0;
   10d76:	42b3      	cmp	r3, r6
   10d78:	bf94      	ite	ls
   10d7a:	2300      	movls	r3, #0
   10d7c:	2301      	movhi	r3, #1
   10d7e:	9301      	str	r3, [sp, #4]
	while (ticker_id_head != TICKER_NULL) {
   10d80:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
	node = &instance->nodes[0];
   10d84:	f8d9 7000 	ldr.w	r7, [r9]
	ticks_expired = 0U;
   10d88:	f04f 0800 	mov.w	r8, #0
	while (ticker_id_head != TICKER_NULL) {
   10d8c:	d046      	beq.n	10e1c <ticker_worker+0xe0>
			must_expire_skip = 1U;
   10d8e:	f8cd 9008 	str.w	r9, [sp, #8]
		ticker = &node[ticker_id_head];
   10d92:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
   10d96:	eb07 140b 	add.w	r4, r7, fp, lsl #4
   10d9a:	ea4f 1b0b 	mov.w	fp, fp, lsl #4
		ticks_to_expire = ticker->ticks_to_expire;
   10d9e:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10da0:	42b3      	cmp	r3, r6
   10da2:	d839      	bhi.n	10e18 <ticker_worker+0xdc>
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10da4:	f894 a002 	ldrb.w	sl, [r4, #2]
		ticker_id_head = ticker->next;
   10da8:	f817 b00b 	ldrb.w	fp, [r7, fp]
		ticks_elapsed -= ticks_to_expire;
   10dac:	1af6      	subs	r6, r6, r3
		ticks_expired += ticks_to_expire;
   10dae:	4498      	add	r8, r3
		if (((ticker->req - ticker->ack) & 0xff) != 1U) {
   10db0:	7863      	ldrb	r3, [r4, #1]
   10db2:	eba3 030a 	sub.w	r3, r3, sl
   10db6:	b2db      	uxtb	r3, r3
   10db8:	2b01      	cmp	r3, #1
   10dba:	d12a      	bne.n	10e12 <ticker_worker+0xd6>
		if (ticker->ticks_slot != 0U &&
   10dbc:	69a0      	ldr	r0, [r4, #24]
   10dbe:	2800      	cmp	r0, #0
   10dc0:	d054      	beq.n	10e6c <ticker_worker+0x130>
   10dc2:	9b01      	ldr	r3, [sp, #4]
   10dc4:	2b00      	cmp	r3, #0
   10dc6:	d04c      	beq.n	10e62 <ticker_worker+0x126>
		int32_t lazy_current = ticker->lazy_current;
   10dc8:	8be3      	ldrh	r3, [r4, #30]
   10dca:	9303      	str	r3, [sp, #12]
			struct ticker_ext *ext_data = ticker->ext_data;
   10dcc:	6aa2      	ldr	r2, [r4, #40]	; 0x28
			if (ext_data &&
   10dce:	b13a      	cbz	r2, 10de0 <ticker_worker+0xa4>
   10dd0:	6813      	ldr	r3, [r2, #0]
   10dd2:	b11b      	cbz	r3, 10ddc <ticker_worker+0xa0>
			    ext_data->ticks_slot_window != 0U &&
   10dd4:	7a13      	ldrb	r3, [r2, #8]
   10dd6:	2b00      	cmp	r3, #0
   10dd8:	f000 80ea 	beq.w	10fb0 <ticker_worker+0x274>
				ext_data->reschedule_state =
   10ddc:	2300      	movs	r3, #0
   10dde:	7213      	strb	r3, [r2, #8]
			ticker->lazy_current++;
   10de0:	9b03      	ldr	r3, [sp, #12]
			if ((ticker->must_expire == 0U) ||
   10de2:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
			ticker->lazy_current++;
   10de6:	3301      	adds	r3, #1
   10de8:	b29b      	uxth	r3, r3
   10dea:	83e3      	strh	r3, [r4, #30]
			if ((ticker->must_expire == 0U) ||
   10dec:	b171      	cbz	r1, 10e0c <ticker_worker+0xd0>
   10dee:	8ba1      	ldrh	r1, [r4, #28]
   10df0:	4299      	cmp	r1, r3
   10df2:	d20b      	bcs.n	10e0c <ticker_worker+0xd0>
			    (ticker->lazy_periodic >= ticker->lazy_current) ||
   10df4:	2a00      	cmp	r2, #0
   10df6:	f000 80f8 	beq.w	10fea <ticker_worker+0x2ae>
			    TICKER_RESCHEDULE_PENDING(ticker)) {
   10dfa:	7a13      	ldrb	r3, [r2, #8]
   10dfc:	2b01      	cmp	r3, #1
   10dfe:	d005      	beq.n	10e0c <ticker_worker+0xd0>
			must_expire_skip = 1U;
   10e00:	2301      	movs	r3, #1
   10e02:	e036      	b.n	10e72 <ticker_worker+0x136>
		instance->worker_trigger = 0U;
   10e04:	77c2      	strb	r2, [r0, #31]
}
   10e06:	b00d      	add	sp, #52	; 0x34
   10e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				ticker->ack--;
   10e0c:	f10a 33ff 	add.w	r3, sl, #4294967295
   10e10:	70a3      	strb	r3, [r4, #2]
	while (ticker_id_head != TICKER_NULL) {
   10e12:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10e16:	d1bc      	bne.n	10d92 <ticker_worker+0x56>
   10e18:	f8dd 9008 	ldr.w	r9, [sp, #8]
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   10e1c:	f899 300b 	ldrb.w	r3, [r9, #11]
   10e20:	f899 200a 	ldrb.w	r2, [r9, #10]
   10e24:	429a      	cmp	r2, r3
   10e26:	d10a      	bne.n	10e3e <ticker_worker+0x102>
	uint8_t idx = *ticks_elapsed_index + 1;
   10e28:	3201      	adds	r2, #1
   10e2a:	b2d2      	uxtb	r2, r2
	if (idx == DOUBLE_BUFFER_SIZE) {
   10e2c:	2a02      	cmp	r2, #2
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10e2e:	bf1c      	itt	ne
   10e30:	4613      	movne	r3, r2
   10e32:	9304      	strne	r3, [sp, #16]
	*ticks_elapsed_index = idx;
   10e34:	9a04      	ldr	r2, [sp, #16]
   10e36:	f889 200b 	strb.w	r2, [r9, #11]
   10e3a:	bf08      	it	eq
   10e3c:	2300      	moveq	r3, #0
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10e3e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10e42:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   10e46:	f8c3 800c 	str.w	r8, [r3, #12]
	instance->worker_trigger = 0U;
   10e4a:	2200      	movs	r2, #0
   10e4c:	f889 201f 	strb.w	r2, [r9, #31]
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10e50:	464b      	mov	r3, r9
   10e52:	2201      	movs	r2, #1
   10e54:	2104      	movs	r1, #4
   10e56:	2003      	movs	r0, #3
   10e58:	46a4      	mov	ip, r4
}
   10e5a:	b00d      	add	sp, #52	; 0x34
   10e5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	instance->sched_cb(TICKER_CALL_ID_WORKER, TICKER_CALL_ID_JOB, 1,
   10e60:	4760      	bx	ip
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   10e62:	f994 302d 	ldrsb.w	r3, [r4, #45]	; 0x2d
   10e66:	9305      	str	r3, [sp, #20]
   10e68:	3380      	adds	r3, #128	; 0x80
   10e6a:	d136      	bne.n	10eda <ticker_worker+0x19e>
		if (ticker->ext_data) {
   10e6c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   10e6e:	b1c2      	cbz	r2, 10ea2 <ticker_worker+0x166>
   10e70:	2300      	movs	r3, #0
			ticker->ext_data->ticks_drift = 0U;
   10e72:	2100      	movs	r1, #0
			ticker->ext_data->reschedule_state =
   10e74:	7211      	strb	r1, [r2, #8]
		if (ticker->timeout_func) {
   10e76:	68e5      	ldr	r5, [r4, #12]
			ticker->ext_data->ticks_drift = 0U;
   10e78:	6051      	str	r1, [r2, #4]
		ticker->ack--;
   10e7a:	f10a 30ff 	add.w	r0, sl, #4294967295
   10e7e:	70a0      	strb	r0, [r4, #2]
		if (ticker->timeout_func) {
   10e80:	2d00      	cmp	r5, #0
   10e82:	d0c6      	beq.n	10e12 <ticker_worker+0xd6>
					   ticks_expired -
   10e84:	9a02      	ldr	r2, [sp, #8]
   10e86:	6960      	ldr	r0, [r4, #20]
   10e88:	6952      	ldr	r2, [r2, #20]
			ticker->timeout_func(ticks_at_expire,
   10e8a:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   10e8c:	eba8 0000 	sub.w	r0, r8, r0
   10e90:	4410      	add	r0, r2
			ticks_at_expire = (instance->ticks_current +
   10e92:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10e96:	b19b      	cbz	r3, 10ec0 <ticker_worker+0x184>
   10e98:	6923      	ldr	r3, [r4, #16]
   10e9a:	f64f 72ff 	movw	r2, #65535	; 0xffff
   10e9e:	47a8      	blx	r5
			if (must_expire_skip == 0U) {
   10ea0:	e7b7      	b.n	10e12 <ticker_worker+0xd6>
		if (ticker->timeout_func) {
   10ea2:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   10ea4:	f10a 33ff 	add.w	r3, sl, #4294967295
   10ea8:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   10eaa:	2d00      	cmp	r5, #0
   10eac:	d0b1      	beq.n	10e12 <ticker_worker+0xd6>
					   ticks_expired -
   10eae:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   10eb0:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   10eb2:	eba8 0003 	sub.w	r0, r8, r3
   10eb6:	9b02      	ldr	r3, [sp, #8]
   10eb8:	695b      	ldr	r3, [r3, #20]
   10eba:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   10ebc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   10ec0:	6923      	ldr	r3, [r4, #16]
   10ec2:	8be2      	ldrh	r2, [r4, #30]
   10ec4:	47a8      	blx	r5
				if (ticker->ticks_slot != 0U) {
   10ec6:	69a3      	ldr	r3, [r4, #24]
					slot_reserved = 1U;
   10ec8:	2b00      	cmp	r3, #0
   10eca:	9b01      	ldr	r3, [sp, #4]
   10ecc:	bf18      	it	ne
   10ece:	2301      	movne	r3, #1
   10ed0:	9301      	str	r3, [sp, #4]
				ticker->lazy_current = 0U;
   10ed2:	2300      	movs	r3, #0
   10ed4:	83e3      	strh	r3, [r4, #30]
				ticker->force = 0U;
   10ed6:	70e3      	strb	r3, [r4, #3]
				if (ticker->ticks_slot != 0U) {
   10ed8:	e79b      	b.n	10e12 <ticker_worker+0xd6>
	if ((ticker->priority != TICKER_PRIORITY_CRITICAL) &&
   10eda:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10ede:	d0c5      	beq.n	10e6c <ticker_worker+0x130>
		int32_t lazy_current = ticker->lazy_current;
   10ee0:	8be2      	ldrh	r2, [r4, #30]
		if (lazy_current >= ticker->lazy_periodic) {
   10ee2:	8ba3      	ldrh	r3, [r4, #28]
		uint32_t current_age = ticker->ticks_periodic +
   10ee4:	f8d4 c004 	ldr.w	ip, [r4, #4]
		int32_t lazy_current = ticker->lazy_current;
   10ee8:	9203      	str	r2, [sp, #12]
		if (lazy_current >= ticker->lazy_periodic) {
   10eea:	429a      	cmp	r2, r3
			lazy_current -= ticker->lazy_periodic;
   10eec:	bf28      	it	cs
   10eee:	1ad2      	subcs	r2, r2, r3
		uint32_t current_age = ticker->ticks_periodic +
   10ef0:	fb02 c10c 	mla	r1, r2, ip, ip
   10ef4:	9106      	str	r1, [sp, #24]
				(lazy_current - ticker->priority);
   10ef6:	9905      	ldr	r1, [sp, #20]
		uint32_t acc_ticks_to_expire = 0U;
   10ef8:	f8cd a020 	str.w	sl, [sp, #32]
   10efc:	e9cd 6809 	strd	r6, r8, [sp, #36]	; 0x24
				(lazy_current - ticker->priority);
   10f00:	1a52      	subs	r2, r2, r1
		uint32_t acc_ticks_to_expire = 0U;
   10f02:	46a1      	mov	r9, r4
		uint32_t current_age = ticker->ticks_periodic +
   10f04:	465b      	mov	r3, fp
				(lazy_current - ticker->priority);
   10f06:	9207      	str	r2, [sp, #28]
		uint32_t acc_ticks_to_expire = 0U;
   10f08:	2500      	movs	r5, #0
   10f0a:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
   10f0e:	4664      	mov	r4, ip
			struct ticker_node *ticker_next = &nodes[id_head];
   10f10:	b21b      	sxth	r3, r3
   10f12:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   10f16:	eb07 1203 	add.w	r2, r7, r3, lsl #4
   10f1a:	011b      	lsls	r3, r3, #4
			acc_ticks_to_expire += ticker_next->ticks_to_expire;
   10f1c:	f8d2 8008 	ldr.w	r8, [r2, #8]
   10f20:	4445      	add	r5, r8
			if (acc_ticks_to_expire > ticker->ticks_slot) {
   10f22:	42a8      	cmp	r0, r5
   10f24:	d33c      	bcc.n	10fa0 <ticker_worker+0x264>
			if (ticker_next->ticks_slot == 0U) {
   10f26:	6991      	ldr	r1, [r2, #24]
   10f28:	2900      	cmp	r1, #0
   10f2a:	d036      	beq.n	10f9a <ticker_worker+0x25e>
			int32_t lazy_next = ticker_next->lazy_current;
   10f2c:	8bd1      	ldrh	r1, [r2, #30]
				ticker_next->lazy_periodic > lazy_next;
   10f2e:	8b96      	ldrh	r6, [r2, #28]
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10f30:	f8d2 a004 	ldr.w	sl, [r2, #4]
				ticker_next->priority;
   10f34:	f992 e02d 	ldrsb.w	lr, [r2, #45]	; 0x2d
			if (!lazy_next_periodic_skip) {
   10f38:	42b1      	cmp	r1, r6
			int32_t lazy_next = ticker_next->lazy_current;
   10f3a:	468c      	mov	ip, r1
				lazy_next -= ticker_next->lazy_periodic;
   10f3c:	bf28      	it	cs
   10f3e:	eba1 0c06 	subcs.w	ip, r1, r6
					  0U :
   10f42:	f1ba 0f00 	cmp.w	sl, #0
   10f46:	d040      	beq.n	10fca <ticker_worker+0x28e>
   10f48:	ebaa 0808 	sub.w	r8, sl, r8
				(ticker->ticks_periodic == 0U) ||
   10f4c:	2c00      	cmp	r4, #0
   10f4e:	d038      	beq.n	10fc2 <ticker_worker+0x286>
			uint32_t next_age = (ticker_next->ticks_periodic == 0U ?
   10f50:	fb0a 880c 	mla	r8, sl, ip, r8
				(ticker->ticks_periodic == 0U) ||
   10f54:	f8dd a018 	ldr.w	sl, [sp, #24]
   10f58:	45c2      	cmp	sl, r8
   10f5a:	bf8c      	ite	hi
   10f5c:	f04f 0801 	movhi.w	r8, #1
   10f60:	f04f 0800 	movls.w	r8, #0
					(ticker->ticks_periodic != 0U) &&
   10f64:	bf34      	ite	cc
   10f66:	f04f 0a01 	movcc.w	sl, #1
   10f6a:	f04f 0a00 	movcs.w	sl, #0
			if (!lazy_next_periodic_skip &&
   10f6e:	42b1      	cmp	r1, r6
			uint8_t next_force = (ticker_next->force > ticker->force);
   10f70:	f892 b003 	ldrb.w	fp, [r2, #3]
   10f74:	f899 2003 	ldrb.w	r2, [r9, #3]
			if (!lazy_next_periodic_skip &&
   10f78:	d30f      	bcc.n	10f9a <ticker_worker+0x25e>
   10f7a:	4593      	cmp	fp, r2
   10f7c:	d82a      	bhi.n	10fd4 <ticker_worker+0x298>
			    (next_force ||
   10f7e:	f11e 0f80 	cmn.w	lr, #128	; 0x80
   10f82:	d027      	beq.n	10fd4 <ticker_worker+0x298>
			     next_is_critical ||
   10f84:	9a07      	ldr	r2, [sp, #28]
				(lazy_next - ticker_next->priority) >
   10f86:	ebac 0c0e 	sub.w	ip, ip, lr
			     next_is_critical ||
   10f8a:	4594      	cmp	ip, r2
   10f8c:	dd02      	ble.n	10f94 <ticker_worker+0x258>
			     (next_has_priority && !current_is_older) ||
   10f8e:	f1b8 0f00 	cmp.w	r8, #0
   10f92:	d01f      	beq.n	10fd4 <ticker_worker+0x298>
   10f94:	9a05      	ldr	r2, [sp, #20]
   10f96:	4572      	cmp	r2, lr
   10f98:	d019      	beq.n	10fce <ticker_worker+0x292>
			id_head = ticker_next->next;
   10f9a:	5cfb      	ldrb	r3, [r7, r3]
		while (id_head != TICKER_NULL) {
   10f9c:	2bff      	cmp	r3, #255	; 0xff
   10f9e:	d1b7      	bne.n	10f10 <ticker_worker+0x1d4>
   10fa0:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   10fa4:	f8dd a020 	ldr.w	sl, [sp, #32]
   10fa8:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10fac:	464c      	mov	r4, r9
   10fae:	e75d      	b.n	10e6c <ticker_worker+0x130>
			    TICKER_RESCHEDULE_STATE_NONE &&
   10fb0:	8ba3      	ldrh	r3, [r4, #28]
   10fb2:	9903      	ldr	r1, [sp, #12]
   10fb4:	428b      	cmp	r3, r1
   10fb6:	f63f af11 	bhi.w	10ddc <ticker_worker+0xa0>
				ext_data->reschedule_state =
   10fba:	f04f 0301 	mov.w	r3, #1
   10fbe:	7213      	strb	r3, [r2, #8]
   10fc0:	e70e      	b.n	10de0 <ticker_worker+0xa4>
				(ticker->ticks_periodic == 0U) ||
   10fc2:	f04f 0801 	mov.w	r8, #1
					(ticker->ticks_periodic != 0U) &&
   10fc6:	46a2      	mov	sl, r4
   10fc8:	e7d1      	b.n	10f6e <ticker_worker+0x232>
					  0U :
   10fca:	46d0      	mov	r8, sl
   10fcc:	e7be      	b.n	10f4c <ticker_worker+0x210>
			     (equal_priority && next_is_older))) {
   10fce:	f1ba 0f00 	cmp.w	sl, #0
   10fd2:	d0e2      	beq.n	10f9a <ticker_worker+0x25e>
   10fd4:	e9dd 6809 	ldrd	r6, r8, [sp, #36]	; 0x24
   10fd8:	f8dd a020 	ldr.w	sl, [sp, #32]
   10fdc:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   10fe0:	464c      	mov	r4, r9
   10fe2:	e6f3      	b.n	10dcc <ticker_worker+0x90>
	uint8_t slot_reserved = 0;
   10fe4:	9b04      	ldr	r3, [sp, #16]
   10fe6:	9301      	str	r3, [sp, #4]
   10fe8:	e6ca      	b.n	10d80 <ticker_worker+0x44>
		if (ticker->timeout_func) {
   10fea:	68e5      	ldr	r5, [r4, #12]
		ticker->ack--;
   10fec:	f10a 33ff 	add.w	r3, sl, #4294967295
   10ff0:	70a3      	strb	r3, [r4, #2]
		if (ticker->timeout_func) {
   10ff2:	2d00      	cmp	r5, #0
   10ff4:	f43f af0d 	beq.w	10e12 <ticker_worker+0xd6>
					   ticks_expired -
   10ff8:	6963      	ldr	r3, [r4, #20]
			ticker->timeout_func(ticks_at_expire,
   10ffa:	6a61      	ldr	r1, [r4, #36]	; 0x24
					   ticks_expired -
   10ffc:	eba8 0003 	sub.w	r0, r8, r3
   11000:	9b02      	ldr	r3, [sp, #8]
   11002:	695b      	ldr	r3, [r3, #20]
   11004:	4418      	add	r0, r3
			ticks_at_expire = (instance->ticks_current +
   11006:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticker->timeout_func(ticks_at_expire,
   1100a:	e745      	b.n	10e98 <ticker_worker+0x15c>

0001100c <ticker_job>:
	if (instance->worker_trigger) {
   1100c:	7fc2      	ldrb	r2, [r0, #31]
   1100e:	2a00      	cmp	r2, #0
   11010:	f040 83f3 	bne.w	117fa <ticker_job+0x7ee>
{
   11014:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11018:	4683      	mov	fp, r0
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1101a:	7a83      	ldrb	r3, [r0, #10]
   1101c:	7ac1      	ldrb	r1, [r0, #11]
{
   1101e:	b08f      	sub	sp, #60	; 0x3c
	instance->job_guard = 1U;
   11020:	2001      	movs	r0, #1
   11022:	f88b 001e 	strb.w	r0, [fp, #30]
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   11026:	4299      	cmp	r1, r3
	ticks_previous = instance->ticks_current;
   11028:	f8db 0014 	ldr.w	r0, [fp, #20]
   1102c:	900a      	str	r0, [sp, #40]	; 0x28
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1102e:	f000 80a2 	beq.w	11176 <ticker_job+0x16a>
	uint8_t idx = *ticks_elapsed_index + 1;
   11032:	3301      	adds	r3, #1
   11034:	b2db      	uxtb	r3, r3
	if (idx == DOUBLE_BUFFER_SIZE) {
   11036:	2b02      	cmp	r3, #2
		idx = 0U;
   11038:	bf08      	it	eq
   1103a:	4613      	moveq	r3, r2
		ticks_elapsed =
   1103c:	eb0b 0283 	add.w	r2, fp, r3, lsl #2
	*ticks_elapsed_index = idx;
   11040:	f88b 300a 	strb.w	r3, [fp, #10]
	ticker_id_old_head = instance->ticker_id_head;
   11044:	f89b 301d 	ldrb.w	r3, [fp, #29]
		ticks_elapsed =
   11048:	68d2      	ldr	r2, [r2, #12]
	ticker_id_old_head = instance->ticker_id_head;
   1104a:	930b      	str	r3, [sp, #44]	; 0x2c
		instance->ticks_current += ticks_elapsed;
   1104c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
		ticks_elapsed =
   1104e:	9205      	str	r2, [sp, #20]
		instance->ticks_current += ticks_elapsed;
   11050:	4413      	add	r3, r2
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   11052:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	count_user = instance->count_user;
   11056:	f89b 2009 	ldrb.w	r2, [fp, #9]
		instance->ticks_current &= HAL_TICKER_CNTR_MASK;
   1105a:	f8cb 3014 	str.w	r3, [fp, #20]
	node = &instance->nodes[0];
   1105e:	f8db 3000 	ldr.w	r3, [fp]
   11062:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   11064:	f8db 3004 	ldr.w	r3, [fp, #4]
   11068:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   1106a:	1e53      	subs	r3, r2, #1
	count_user = instance->count_user;
   1106c:	9208      	str	r2, [sp, #32]
	while (count_user--) {
   1106e:	b2db      	uxtb	r3, r3
   11070:	2a00      	cmp	r2, #0
   11072:	f000 84c0 	beq.w	119f6 <ticker_job+0x9ea>
		flag_elapsed = 1U;
   11076:	2201      	movs	r2, #1
   11078:	920d      	str	r2, [sp, #52]	; 0x34
   1107a:	9a07      	ldr	r2, [sp, #28]
   1107c:	f8cd b004 	str.w	fp, [sp, #4]
   11080:	eb02 09c3 	add.w	r9, r2, r3, lsl #3
	pending = 0U;
   11084:	2300      	movs	r3, #0
   11086:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   11088:	23ff      	movs	r3, #255	; 0xff
   1108a:	9304      	str	r3, [sp, #16]
   1108c:	46cb      	mov	fp, r9
		user_ops = &user->user_op[0];
   1108e:	f8db 8004 	ldr.w	r8, [fp, #4]
		while (user->middle != user->last) {
   11092:	f89b c003 	ldrb.w	ip, [fp, #3]
   11096:	f89b 9002 	ldrb.w	r9, [fp, #2]
   1109a:	45e1      	cmp	r9, ip
   1109c:	d063      	beq.n	11166 <ticker_job+0x15a>
			if (middle == user->count_user_op) {
   1109e:	f89b 2000 	ldrb.w	r2, [fp]
			middle = user->middle + 1;
   110a2:	f109 0301 	add.w	r3, r9, #1
			user_op = &user_ops[user->middle];
   110a6:	fa0f f789 	sxth.w	r7, r9
			middle = user->middle + 1;
   110aa:	b2db      	uxtb	r3, r3
				middle = 0U;
   110ac:	429a      	cmp	r2, r3
   110ae:	bf08      	it	eq
   110b0:	2300      	moveq	r3, #0
			user_op = &user_ops[user->middle];
   110b2:	eb07 0247 	add.w	r2, r7, r7, lsl #1
   110b6:	eb07 0782 	add.w	r7, r7, r2, lsl #2
			user->middle = middle;
   110ba:	f88b 3002 	strb.w	r3, [fp, #2]
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   110be:	f818 2027 	ldrb.w	r2, [r8, r7, lsl #2]
   110c2:	2a04      	cmp	r2, #4
			user_op = &user_ops[user->middle];
   110c4:	eb08 0687 	add.w	r6, r8, r7, lsl #2
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   110c8:	d969      	bls.n	1119e <ticker_job+0x192>
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   110ca:	2a07      	cmp	r2, #7
   110cc:	d879      	bhi.n	111c2 <ticker_job+0x1b6>
			ticker = &node[user_op->id];
   110ce:	7875      	ldrb	r5, [r6, #1]
   110d0:	9903      	ldr	r1, [sp, #12]
   110d2:	eb05 0445 	add.w	r4, r5, r5, lsl #1
   110d6:	eb01 1404 	add.w	r4, r1, r4, lsl #4
   110da:	b229      	sxth	r1, r5
			state = (ticker->req - ticker->ack) & 0xff;
   110dc:	f894 e002 	ldrb.w	lr, [r4, #2]
			ticker = &node[user_op->id];
   110e0:	9102      	str	r1, [sp, #8]
			state = (ticker->req - ticker->ack) & 0xff;
   110e2:	7861      	ldrb	r1, [r4, #1]
   110e4:	eba1 010e 	sub.w	r1, r1, lr
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP_ABS) ||
   110e8:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
   110ec:	d069      	beq.n	111c2 <ticker_job+0x1b6>
			    (state == 0U) ||
   110ee:	2a05      	cmp	r2, #5
   110f0:	d057      	beq.n	111a2 <ticker_job+0x196>
			if (state == 1U) {
   110f2:	2901      	cmp	r1, #1
   110f4:	f040 8170 	bne.w	113d8 <ticker_job+0x3cc>
	previous = instance->ticker_id_head;
   110f8:	9901      	ldr	r1, [sp, #4]
   110fa:	7f4b      	ldrb	r3, [r1, #29]
	node = &instance->nodes[0];
   110fc:	f8d1 9000 	ldr.w	r9, [r1]
	while (current != TICKER_NULL) {
   11100:	2bff      	cmp	r3, #255	; 0xff
   11102:	d016      	beq.n	11132 <ticker_job+0x126>
		ticker_current = &node[current];
   11104:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		if (current == id) {
   11108:	429d      	cmp	r5, r3
		ticker_current = &node[current];
   1110a:	eb09 1101 	add.w	r1, r9, r1, lsl #4
		if (current == id) {
   1110e:	f000 8260 	beq.w	115d2 <ticker_job+0x5c6>
	total = 0U;
   11112:	f04f 0c00 	mov.w	ip, #0
   11116:	e001      	b.n	1111c <ticker_job+0x110>
		if (current == id) {
   11118:	429d      	cmp	r5, r3
   1111a:	d061      	beq.n	111e0 <ticker_job+0x1d4>
		total += ticker_current->ticks_to_expire;
   1111c:	4618      	mov	r0, r3
		current = ticker_current->next;
   1111e:	780b      	ldrb	r3, [r1, #0]
		total += ticker_current->ticks_to_expire;
   11120:	f8d1 a008 	ldr.w	sl, [r1, #8]
	while (current != TICKER_NULL) {
   11124:	2bff      	cmp	r3, #255	; 0xff
		ticker_current = &node[current];
   11126:	eb03 0143 	add.w	r1, r3, r3, lsl #1
		total += ticker_current->ticks_to_expire;
   1112a:	44d4      	add	ip, sl
		ticker_current = &node[current];
   1112c:	eb09 1101 	add.w	r1, r9, r1, lsl #4
	while (current != TICKER_NULL) {
   11130:	d1f2      	bne.n	11118 <ticker_job+0x10c>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11132:	2300      	movs	r3, #0
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11134:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11136:	60a3      	str	r3, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11138:	f000 8135 	beq.w	113a6 <ticker_job+0x39a>
		if (instance->ticker_id_slot_previous == user_op->id) {
   1113c:	9b01      	ldr	r3, [sp, #4]
		ticker->req = ticker->ack;
   1113e:	f884 e001 	strb.w	lr, [r4, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11142:	7f1b      	ldrb	r3, [r3, #28]
   11144:	42ab      	cmp	r3, r5
   11146:	f000 8102 	beq.w	1134e <ticker_job+0x342>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   1114a:	2000      	movs	r0, #0
   1114c:	f808 0027 	strb.w	r0, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   11150:	6af3      	ldr	r3, [r6, #44]	; 0x2c
	user_op->status = status;
   11152:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   11154:	b10b      	cbz	r3, 1115a <ticker_job+0x14e>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   11156:	6b31      	ldr	r1, [r6, #48]	; 0x30
   11158:	4798      	blx	r3
		while (user->middle != user->last) {
   1115a:	f89b c003 	ldrb.w	ip, [fp, #3]
   1115e:	f89b 9002 	ldrb.w	r9, [fp, #2]
   11162:	45e1      	cmp	r9, ip
   11164:	d19b      	bne.n	1109e <ticker_job+0x92>
	while (count_user--) {
   11166:	9a07      	ldr	r2, [sp, #28]
   11168:	455a      	cmp	r2, fp
   1116a:	f1ab 0308 	sub.w	r3, fp, #8
   1116e:	f000 8143 	beq.w	113f8 <ticker_job+0x3ec>
   11172:	469b      	mov	fp, r3
   11174:	e78b      	b.n	1108e <ticker_job+0x82>
	ticker_id_old_head = instance->ticker_id_head;
   11176:	f89b 301d 	ldrb.w	r3, [fp, #29]
	count_user = instance->count_user;
   1117a:	f89b 1009 	ldrb.w	r1, [fp, #9]
	ticker_id_old_head = instance->ticker_id_head;
   1117e:	930b      	str	r3, [sp, #44]	; 0x2c
	node = &instance->nodes[0];
   11180:	f8db 3000 	ldr.w	r3, [fp]
   11184:	9303      	str	r3, [sp, #12]
	users = &instance->users[0];
   11186:	f8db 3004 	ldr.w	r3, [fp, #4]
   1118a:	9307      	str	r3, [sp, #28]
	while (count_user--) {
   1118c:	1e4b      	subs	r3, r1, #1
	count_user = instance->count_user;
   1118e:	9108      	str	r1, [sp, #32]
	while (count_user--) {
   11190:	b2db      	uxtb	r3, r3
   11192:	2900      	cmp	r1, #0
   11194:	f000 82f5 	beq.w	11782 <ticker_job+0x776>
		flag_elapsed = 0U;
   11198:	920d      	str	r2, [sp, #52]	; 0x34
		ticks_elapsed = 0U;
   1119a:	9205      	str	r2, [sp, #20]
   1119c:	e76d      	b.n	1107a <ticker_job+0x6e>
   1119e:	4699      	mov	r9, r3
   111a0:	e77b      	b.n	1109a <ticker_job+0x8e>
			    ((user_op->op == TICKER_USER_OP_TYPE_UPDATE) &&
   111a2:	6870      	ldr	r0, [r6, #4]
   111a4:	2800      	cmp	r0, #0
   111a6:	d1a4      	bne.n	110f2 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_plus == 0U) &&
   111a8:	68b0      	ldr	r0, [r6, #8]
   111aa:	2800      	cmp	r0, #0
   111ac:	d1a1      	bne.n	110f2 <ticker_job+0xe6>
			     (user_op->params.update.ticks_drift_minus == 0U) &&
   111ae:	68f0      	ldr	r0, [r6, #12]
   111b0:	2800      	cmp	r0, #0
   111b2:	d19e      	bne.n	110f2 <ticker_job+0xe6>
			     (user_op->params.update.ticks_slot_plus == 0U) &&
   111b4:	6930      	ldr	r0, [r6, #16]
   111b6:	2800      	cmp	r0, #0
   111b8:	d19b      	bne.n	110f2 <ticker_job+0xe6>
			     (user_op->params.update.lazy == 0U) &&
   111ba:	6970      	ldr	r0, [r6, #20]
   111bc:	f030 407f 	bics.w	r0, r0, #4278190080	; 0xff000000
   111c0:	d197      	bne.n	110f2 <ticker_job+0xe6>
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   111c2:	2200      	movs	r2, #0
   111c4:	f808 2027 	strb.w	r2, [r8, r7, lsl #2]
	if (user_op->fp_op_func) {
   111c8:	6af2      	ldr	r2, [r6, #44]	; 0x2c
	user_op->status = status;
   111ca:	2001      	movs	r0, #1
   111cc:	62b0      	str	r0, [r6, #40]	; 0x28
	if (user_op->fp_op_func) {
   111ce:	2a00      	cmp	r2, #0
   111d0:	d0e5      	beq.n	1119e <ticker_job+0x192>
		user_op->fp_op_func(user_op->status, user_op->op_context);
   111d2:	6b31      	ldr	r1, [r6, #48]	; 0x30
   111d4:	4790      	blx	r2
		while (user->middle != user->last) {
   111d6:	f89b c003 	ldrb.w	ip, [fp, #3]
   111da:	f89b 9002 	ldrb.w	r9, [fp, #2]
   111de:	e75c      	b.n	1109a <ticker_job+0x8e>
	if (previous == current) {
   111e0:	4285      	cmp	r5, r0
   111e2:	f000 80c9 	beq.w	11378 <ticker_job+0x36c>
	node[previous].next = ticker_current->next;
   111e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   111ea:	780b      	ldrb	r3, [r1, #0]
   111ec:	eb09 1000 	add.w	r0, r9, r0, lsl #4
	timeout = ticker_current->ticks_to_expire;
   111f0:	f8d1 a008 	ldr.w	sl, [r1, #8]
	node[previous].next = ticker_current->next;
   111f4:	7003      	strb	r3, [r0, #0]
	if (ticker_current->next != TICKER_NULL) {
   111f6:	780b      	ldrb	r3, [r1, #0]
   111f8:	2bff      	cmp	r3, #255	; 0xff
   111fa:	d008      	beq.n	1120e <ticker_job+0x202>
		node[ticker_current->next].ticks_to_expire += timeout;
   111fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11200:	eb09 1903 	add.w	r9, r9, r3, lsl #4
   11204:	f8d9 3008 	ldr.w	r3, [r9, #8]
   11208:	4453      	add	r3, sl
   1120a:	f8c9 3008 	str.w	r3, [r9, #8]
	return (total + timeout);
   1120e:	eb0a 090c 	add.w	r9, sl, ip
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11212:	2a05      	cmp	r2, #5
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11214:	f8c4 9008 	str.w	r9, [r4, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   11218:	d190      	bne.n	1113c <ticker_job+0x130>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1121a:	9b01      	ldr	r3, [sp, #4]
   1121c:	695d      	ldr	r5, [r3, #20]
   1121e:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   11220:	f00b fab6 	bl	1c790 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11224:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11226:	1b42      	subs	r2, r0, r5
   11228:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   1122c:	441a      	add	r2, r3
	if (ticks_to_expire > ticks_elapsed) {
   1122e:	4591      	cmp	r9, r2
	ticks_now = cntr_cnt_get();
   11230:	4682      	mov	sl, r0
	if (ticks_to_expire > ticks_elapsed) {
   11232:	f240 80c4 	bls.w	113be <ticker_job+0x3b2>
	ticker->ticks_to_expire_minus +=
   11236:	6963      	ldr	r3, [r4, #20]
   11238:	9306      	str	r3, [sp, #24]
		ticks_to_expire -= ticks_elapsed;
   1123a:	eba9 0202 	sub.w	r2, r9, r2
	if ((ticker->ticks_periodic != 0U) &&
   1123e:	6865      	ldr	r5, [r4, #4]
   11240:	2d00      	cmp	r5, #0
   11242:	d059      	beq.n	112f8 <ticker_job+0x2ec>
	    (user_op->params.update.lazy != 0U)) {
   11244:	f8b6 9014 	ldrh.w	r9, [r6, #20]
	if ((ticker->ticks_periodic != 0U) &&
   11248:	f1b9 0f00 	cmp.w	r9, #0
   1124c:	d054      	beq.n	112f8 <ticker_job+0x2ec>
		user_op->params.update.lazy--;
   1124e:	f109 3eff 	add.w	lr, r9, #4294967295
   11252:	fa1f fe8e 	uxth.w	lr, lr
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11256:	4295      	cmp	r5, r2
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   11258:	8be3      	ldrh	r3, [r4, #30]
		user_op->params.update.lazy--;
   1125a:	f8a6 e014 	strh.w	lr, [r6, #20]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1125e:	d223      	bcs.n	112a8 <ticker_job+0x29c>
   11260:	1c69      	adds	r1, r5, #1
   11262:	f8cd 8020 	str.w	r8, [sp, #32]
   11266:	960c      	str	r6, [sp, #48]	; 0x30
   11268:	468c      	mov	ip, r1
   1126a:	e018      	b.n	1129e <ticker_job+0x292>
	if ((ticker->remainder_current >= BIT(31)) ||
   1126c:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1126e:	f8df 8160 	ldr.w	r8, [pc, #352]	; 113d0 <ticker_job+0x3c4>
   11272:	4e58      	ldr	r6, [pc, #352]	; (113d4 <ticker_job+0x3c8>)
   11274:	4488      	add	r8, r1
   11276:	45b0      	cmp	r8, r6
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   11278:	bf84      	itt	hi
   1127a:	f101 71e8 	addhi.w	r1, r1, #30408704	; 0x1d00000
   1127e:	f501 31d4 	addhi.w	r1, r1, #108544	; 0x1a800
   11282:	4660      	mov	r0, ip
	ticker->remainder_current -= ticker->remainder_periodic;
   11284:	6a26      	ldr	r6, [r4, #32]
   11286:	bf94      	ite	ls
   11288:	4628      	movls	r0, r5
		ticker->remainder_current += HAL_TICKER_REMAINDER_RANGE;
   1128a:	f501 71a5 	addhi.w	r1, r1, #330	; 0x14a
			ticker->lazy_current--;
   1128e:	3b01      	subs	r3, #1
			ticks_to_expire -= ticker->ticks_periodic +
   11290:	1a12      	subs	r2, r2, r0
	ticker->remainder_current -= ticker->remainder_periodic;
   11292:	1b89      	subs	r1, r1, r6
			ticker->lazy_current--;
   11294:	b29b      	uxth	r3, r3
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   11296:	4295      	cmp	r5, r2
	ticker->remainder_current -= ticker->remainder_periodic;
   11298:	6261      	str	r1, [r4, #36]	; 0x24
			ticker->lazy_current--;
   1129a:	83e3      	strh	r3, [r4, #30]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   1129c:	d201      	bcs.n	112a2 <ticker_job+0x296>
   1129e:	459e      	cmp	lr, r3
   112a0:	d3e4      	bcc.n	1126c <ticker_job+0x260>
   112a2:	f8dd 8020 	ldr.w	r8, [sp, #32]
   112a6:	9e0c      	ldr	r6, [sp, #48]	; 0x30
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112a8:	459e      	cmp	lr, r3
   112aa:	d923      	bls.n	112f4 <ticker_job+0x2e8>
   112ac:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   112ae:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   112b0:	e9d4 c108 	ldrd	ip, r1, [r4, #32]
   112b4:	b29b      	uxth	r3, r3
			ticks_to_expire += ticker->ticks_periodic +
   112b6:	9008      	str	r0, [sp, #32]
   112b8:	940c      	str	r4, [sp, #48]	; 0x30
   112ba:	e005      	b.n	112c8 <ticker_job+0x2bc>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112bc:	3301      	adds	r3, #1
   112be:	b29b      	uxth	r3, r3
   112c0:	4628      	mov	r0, r5
   112c2:	4599      	cmp	r9, r3
			ticks_to_expire += ticker->ticks_periodic +
   112c4:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112c6:	d011      	beq.n	112ec <ticker_job+0x2e0>
	if ((ticker->remainder_current < BIT(31)) &&
   112c8:	4841      	ldr	r0, [pc, #260]	; (113d0 <ticker_job+0x3c4>)
   112ca:	4c42      	ldr	r4, [pc, #264]	; (113d4 <ticker_job+0x3c8>)
	ticker->remainder_current += ticker->remainder_periodic;
   112cc:	4461      	add	r1, ip
	if ((ticker->remainder_current < BIT(31)) &&
   112ce:	1808      	adds	r0, r1, r0
   112d0:	42a0      	cmp	r0, r4
   112d2:	d8f3      	bhi.n	112bc <ticker_job+0x2b0>
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112d4:	3301      	adds	r3, #1
			ticks_to_expire += ticker->ticks_periodic +
   112d6:	9808      	ldr	r0, [sp, #32]
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   112d8:	f1a1 71e8 	sub.w	r1, r1, #30408704	; 0x1d00000
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112dc:	b29b      	uxth	r3, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   112de:	f5a1 31d4 	sub.w	r1, r1, #108544	; 0x1a800
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112e2:	4599      	cmp	r9, r3
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   112e4:	f5a1 71a5 	sub.w	r1, r1, #330	; 0x14a
			ticks_to_expire += ticker->ticks_periodic +
   112e8:	4402      	add	r2, r0
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112ea:	d1ed      	bne.n	112c8 <ticker_job+0x2bc>
   112ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   112ee:	6261      	str	r1, [r4, #36]	; 0x24
   112f0:	f8a4 e01e 	strh.w	lr, [r4, #30]
		ticker->lazy_periodic = user_op->params.update.lazy;
   112f4:	f8a4 e01c 	strh.w	lr, [r4, #28]
				  user_op->params.update.ticks_drift_plus;
   112f8:	6871      	ldr	r1, [r6, #4]
				user_op->params.update.ticks_drift_minus;
   112fa:	68b0      	ldr	r0, [r6, #8]
	ticker->ticks_to_expire = ticks_to_expire +
   112fc:	440a      	add	r2, r1
   112fe:	60a2      	str	r2, [r4, #8]
	ticker->ticks_to_expire_minus +=
   11300:	9a06      	ldr	r2, [sp, #24]
   11302:	4402      	add	r2, r0
   11304:	6162      	str	r2, [r4, #20]
	struct ticker_ext *ext_data = ticker->ext_data;
   11306:	6aa2      	ldr	r2, [r4, #40]	; 0x28
	if (ext_data && ext_data->ticks_slot_window != 0U) {
   11308:	b11a      	cbz	r2, 11312 <ticker_job+0x306>
   1130a:	6813      	ldr	r3, [r2, #0]
   1130c:	b10b      	cbz	r3, 11312 <ticker_job+0x306>
			user_op->params.update.ticks_drift_plus -
   1130e:	1a09      	subs	r1, r1, r0
		ext_data->ticks_drift =
   11310:	6051      	str	r1, [r2, #4]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   11312:	4652      	mov	r2, sl
   11314:	9902      	ldr	r1, [sp, #8]
   11316:	4620      	mov	r0, r4
   11318:	f7ff fbe6 	bl	10ae8 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   1131c:	68f2      	ldr	r2, [r6, #12]
   1131e:	69a3      	ldr	r3, [r4, #24]
   11320:	4413      	add	r3, r2
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11322:	6932      	ldr	r2, [r6, #16]
   11324:	4293      	cmp	r3, r2
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   11326:	bf8c      	ite	hi
   11328:	1a9b      	subhi	r3, r3, r2
		ticker->ticks_slot = 0U;
   1132a:	2300      	movls	r3, #0
   1132c:	61a3      	str	r3, [r4, #24]
	if (user_op->params.update.force != 0U) {
   1132e:	7db3      	ldrb	r3, [r6, #22]
   11330:	b103      	cbz	r3, 11334 <ticker_job+0x328>
		ticker->force = user_op->params.update.force;
   11332:	70e3      	strb	r3, [r4, #3]
	if (user_op->params.update.must_expire) {
   11334:	7df3      	ldrb	r3, [r6, #23]
   11336:	b113      	cbz	r3, 1133e <ticker_job+0x332>
		ticker->must_expire = (user_op->params.update.must_expire - 1);
   11338:	3b01      	subs	r3, #1
   1133a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
	ticker->next = *insert_head;
   1133e:	9b04      	ldr	r3, [sp, #16]
   11340:	7023      	strb	r3, [r4, #0]
		ticker->req++;
   11342:	7863      	ldrb	r3, [r4, #1]
	*insert_head = user_op->id;
   11344:	7872      	ldrb	r2, [r6, #1]
   11346:	9204      	str	r2, [sp, #16]
		ticker->req++;
   11348:	3301      	adds	r3, #1
   1134a:	7063      	strb	r3, [r4, #1]
   1134c:	e6fd      	b.n	1114a <ticker_job+0x13e>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1134e:	9901      	ldr	r1, [sp, #4]
   11350:	23ff      	movs	r3, #255	; 0xff
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   11352:	2a07      	cmp	r2, #7
			instance->ticker_id_slot_previous = TICKER_NULL;
   11354:	770b      	strb	r3, [r1, #28]
			if (user_op->op == TICKER_USER_OP_TYPE_STOP_ABS) {
   11356:	d123      	bne.n	113a0 <ticker_job+0x394>
				ticks_at_stop =
   11358:	6870      	ldr	r0, [r6, #4]
			ticks_current = instance->ticks_current;
   1135a:	9b01      	ldr	r3, [sp, #4]
   1135c:	695b      	ldr	r3, [r3, #20]
			if (!((ticks_at_stop - ticks_current) &
   1135e:	1ac2      	subs	r2, r0, r3
   11360:	0214      	lsls	r4, r2, #8
   11362:	d414      	bmi.n	1138e <ticker_job+0x382>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11364:	f022 437f 	bic.w	r3, r2, #4278190080	; 0xff000000
				ticks_used = ticks_elapsed +
   11368:	9a05      	ldr	r2, [sp, #20]
   1136a:	4413      	add	r3, r2
			if (instance->ticks_slot_previous > ticks_used) {
   1136c:	9901      	ldr	r1, [sp, #4]
   1136e:	698a      	ldr	r2, [r1, #24]
   11370:	429a      	cmp	r2, r3
				instance->ticks_slot_previous = ticks_used;
   11372:	bf88      	it	hi
   11374:	618b      	strhi	r3, [r1, #24]
   11376:	e6e8      	b.n	1114a <ticker_job+0x13e>
	node[previous].next = ticker_current->next;
   11378:	9b02      	ldr	r3, [sp, #8]
   1137a:	eb03 0043 	add.w	r0, r3, r3, lsl #1
   1137e:	eb09 1000 	add.w	r0, r9, r0, lsl #4
		instance->ticker_id_head = ticker_current->next;
   11382:	f8dd a004 	ldr.w	sl, [sp, #4]
   11386:	780b      	ldrb	r3, [r1, #0]
   11388:	f88a 301d 	strb.w	r3, [sl, #29]
   1138c:	e730      	b.n	111f0 <ticker_job+0x1e4>
				if (ticks_elapsed > ticks_used) {
   1138e:	9a05      	ldr	r2, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11390:	1a1b      	subs	r3, r3, r0
   11392:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
				if (ticks_elapsed > ticks_used) {
   11396:	4293      	cmp	r3, r2
					ticks_used = ticks_elapsed -
   11398:	bf34      	ite	cc
   1139a:	1ad3      	subcc	r3, r2, r3
					ticks_used = 0;
   1139c:	2300      	movcs	r3, #0
   1139e:	e7e5      	b.n	1136c <ticker_job+0x360>
				ticks_at_stop = cntr_cnt_get();
   113a0:	f00b f9f6 	bl	1c790 <cntr_cnt_get>
   113a4:	e7d9      	b.n	1135a <ticker_job+0x34e>
		return 0;
   113a6:	4699      	mov	r9, r3
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   113a8:	9b01      	ldr	r3, [sp, #4]
   113aa:	695d      	ldr	r5, [r3, #20]
   113ac:	9502      	str	r5, [sp, #8]
	ticks_now = cntr_cnt_get();
   113ae:	f00b f9ef 	bl	1c790 <cntr_cnt_get>
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   113b2:	9b05      	ldr	r3, [sp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   113b4:	1b42      	subs	r2, r0, r5
   113b6:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
	ticks_now = cntr_cnt_get();
   113ba:	4682      	mov	sl, r0
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   113bc:	441a      	add	r2, r3
		ticker->ticks_to_expire_minus += ticks_elapsed -
   113be:	6963      	ldr	r3, [r4, #20]
   113c0:	441a      	add	r2, r3
   113c2:	eba2 0309 	sub.w	r3, r2, r9
   113c6:	9306      	str	r3, [sp, #24]
   113c8:	6163      	str	r3, [r4, #20]
		ticks_to_expire = 0U;
   113ca:	2200      	movs	r2, #0
   113cc:	e737      	b.n	1123e <ticker_job+0x232>
   113ce:	bf00      	nop
   113d0:	ff172b5a 	.word	0xff172b5a
   113d4:	7f172b59 	.word	0x7f172b59
				instance->sched_cb(TICKER_CALL_ID_JOB,
   113d8:	9b01      	ldr	r3, [sp, #4]
   113da:	2104      	movs	r1, #4
   113dc:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   113de:	2201      	movs	r2, #1
   113e0:	4608      	mov	r0, r1
   113e2:	47a0      	blx	r4
	while (count_user--) {
   113e4:	9a07      	ldr	r2, [sp, #28]
				user->middle = prev;
   113e6:	f88b 9002 	strb.w	r9, [fp, #2]
				pending = 1U;
   113ea:	2301      	movs	r3, #1
	while (count_user--) {
   113ec:	455a      	cmp	r2, fp
				pending = 1U;
   113ee:	9309      	str	r3, [sp, #36]	; 0x24
	while (count_user--) {
   113f0:	f1ab 0308 	sub.w	r3, fp, #8
   113f4:	f47f aebd 	bne.w	11172 <ticker_job+0x166>
	if (instance->ticker_id_head != ticker_id_old_head) {
   113f8:	f8dd b004 	ldr.w	fp, [sp, #4]
		flag_compare_update = 1U;
   113fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
	if (instance->ticker_id_head != ticker_id_old_head) {
   113fe:	f89b 301d 	ldrb.w	r3, [fp, #29]
		flag_compare_update = 1U;
   11402:	1a9b      	subs	r3, r3, r2
   11404:	bf18      	it	ne
   11406:	2301      	movne	r3, #1
   11408:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   1140a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1140c:	2b00      	cmp	r3, #0
   1140e:	f000 81bb 	beq.w	11788 <ticker_job+0x77c>
	ticks_now = cntr_cnt_get();
   11412:	f00b f9bd 	bl	1c790 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11416:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	while (instance->ticker_id_head != TICKER_NULL) {
   11418:	f89b 601d 	ldrb.w	r6, [fp, #29]
	node = &instance->nodes[0];
   1141c:	f8db 9000 	ldr.w	r9, [fp]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11420:	1ac3      	subs	r3, r0, r3
   11422:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
	while (instance->ticker_id_head != TICKER_NULL) {
   11426:	2eff      	cmp	r6, #255	; 0xff
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11428:	9303      	str	r3, [sp, #12]
	while (instance->ticker_id_head != TICKER_NULL) {
   1142a:	d051      	beq.n	114d0 <ticker_job+0x4c4>
	ticks_expired = 0U;
   1142c:	2300      	movs	r3, #0
	if ((ticker->remainder_current < BIT(31)) &&
   1142e:	f8df 829c 	ldr.w	r8, [pc, #668]	; 116cc <ticker_job+0x6c0>
   11432:	f8df a29c 	ldr.w	sl, [pc, #668]	; 116d0 <ticker_job+0x6c4>
	while (instance->ticker_id_head != TICKER_NULL) {
   11436:	9f05      	ldr	r7, [sp, #20]
	ticks_expired = 0U;
   11438:	9302      	str	r3, [sp, #8]
		ticker = &node[id_expired];
   1143a:	eb06 0346 	add.w	r3, r6, r6, lsl #1
   1143e:	eb09 1403 	add.w	r4, r9, r3, lsl #4
   11442:	011b      	lsls	r3, r3, #4
   11444:	9301      	str	r3, [sp, #4]
		ticks_to_expire = ticker->ticks_to_expire;
   11446:	68a3      	ldr	r3, [r4, #8]
		if (ticks_elapsed < ticks_to_expire) {
   11448:	42bb      	cmp	r3, r7
   1144a:	f200 82a6 	bhi.w	1199a <ticker_job+0x98e>
		ticks_expired += ticks_to_expire;
   1144e:	9a02      	ldr	r2, [sp, #8]
		skip_collision = (ticker->lazy_current != 0U);
   11450:	f8b4 e01e 	ldrh.w	lr, [r4, #30]
		ticks_expired += ticks_to_expire;
   11454:	441a      	add	r2, r3
   11456:	9202      	str	r2, [sp, #8]
		ticks_latency -= ticks_to_expire;
   11458:	9a03      	ldr	r2, [sp, #12]
   1145a:	1ad2      	subs	r2, r2, r3
   1145c:	9203      	str	r2, [sp, #12]
		if (instance->ticks_slot_previous > ticks_to_expire) {
   1145e:	f8db 2018 	ldr.w	r2, [fp, #24]
   11462:	4293      	cmp	r3, r2
		ticks_elapsed -= ticks_to_expire;
   11464:	eba7 0703 	sub.w	r7, r7, r3
			instance->ticker_id_slot_previous = TICKER_NULL;
   11468:	bf25      	ittet	cs
   1146a:	f04f 33ff 	movcs.w	r3, #4294967295
   1146e:	f88b 301c 	strbcs.w	r3, [fp, #28]
			instance->ticks_slot_previous -= ticks_to_expire;
   11472:	1ad3      	subcc	r3, r2, r3
			instance->ticks_slot_previous = 0U;
   11474:	2300      	movcs	r3, #0
   11476:	f8cb 3018 	str.w	r3, [fp, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   1147a:	78a2      	ldrb	r2, [r4, #2]
   1147c:	7863      	ldrb	r3, [r4, #1]
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   1147e:	69a1      	ldr	r1, [r4, #24]
		state = (ticker->req - ticker->ack) & 0xff;
   11480:	1a9b      	subs	r3, r3, r2
   11482:	b2db      	uxtb	r3, r3
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   11484:	b111      	cbz	r1, 1148c <ticker_job+0x480>
   11486:	2b02      	cmp	r3, #2
   11488:	f000 81a4 	beq.w	117d4 <ticker_job+0x7c8>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   1148c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		ticker->ticks_to_expire = 0U;
   1148e:	2100      	movs	r1, #0
   11490:	60a1      	str	r1, [r4, #8]
		instance->ticker_id_head = ticker->next;
   11492:	9901      	ldr	r1, [sp, #4]
   11494:	f819 1001 	ldrb.w	r1, [r9, r1]
   11498:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   1149c:	6865      	ldr	r5, [r4, #4]
   1149e:	2d00      	cmp	r5, #0
   114a0:	f040 809b 	bne.w	115da <ticker_job+0x5ce>
   114a4:	b118      	cbz	r0, 114ae <ticker_job+0x4a2>
		    TICKER_RESCHEDULE_PENDING(ticker)) {
   114a6:	7a01      	ldrb	r1, [r0, #8]
   114a8:	2901      	cmp	r1, #1
   114aa:	f000 809d 	beq.w	115e8 <ticker_job+0x5dc>
			if (state && ((state == 1U) || skip_collision) &&
   114ae:	b153      	cbz	r3, 114c6 <ticker_job+0x4ba>
   114b0:	2b01      	cmp	r3, #1
   114b2:	d002      	beq.n	114ba <ticker_job+0x4ae>
   114b4:	f1be 0f00 	cmp.w	lr, #0
   114b8:	d005      	beq.n	114c6 <ticker_job+0x4ba>
			    ticker->fp_op_func) {
   114ba:	6a23      	ldr	r3, [r4, #32]
			if (state && ((state == 1U) || skip_collision) &&
   114bc:	b11b      	cbz	r3, 114c6 <ticker_job+0x4ba>
				ticker->fp_op_func(TICKER_STATUS_FAILURE,
   114be:	6a61      	ldr	r1, [r4, #36]	; 0x24
   114c0:	2001      	movs	r0, #1
   114c2:	4798      	blx	r3
			ticker->req = ticker->ack;
   114c4:	78a2      	ldrb	r2, [r4, #2]
   114c6:	7062      	strb	r2, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   114c8:	f89b 601d 	ldrb.w	r6, [fp, #29]
   114cc:	2eff      	cmp	r6, #255	; 0xff
   114ce:	d1b4      	bne.n	1143a <ticker_job+0x42e>
			flag_compare_update = 1U;
   114d0:	9b08      	ldr	r3, [sp, #32]
   114d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
		ticker_job_list_insert(instance, insert_head);
   114d4:	9904      	ldr	r1, [sp, #16]
			flag_compare_update = 1U;
   114d6:	4296      	cmp	r6, r2
   114d8:	bf18      	it	ne
   114da:	2301      	movne	r3, #1
		ticker_job_list_insert(instance, insert_head);
   114dc:	4658      	mov	r0, fp
			flag_compare_update = 1U;
   114de:	9308      	str	r3, [sp, #32]
		ticker_job_list_insert(instance, insert_head);
   114e0:	f7ff fb26 	bl	10b30 <ticker_job_list_insert>
		ticker_id_head = instance->ticker_id_head;
   114e4:	f89b 301d 	ldrb.w	r3, [fp, #29]
	nodes = &instance->nodes[0];
   114e8:	f8db 1000 	ldr.w	r1, [fp]
	while (rescheduling) {
   114ec:	e9cd 3b01 	strd	r3, fp, [sp, #4]
	uint8_t  rescheduled = 0U;
   114f0:	2200      	movs	r2, #0
		while (ticker_id_head != TICKER_NULL) {
   114f2:	9b01      	ldr	r3, [sp, #4]
   114f4:	2bff      	cmp	r3, #255	; 0xff
   114f6:	d00f      	beq.n	11518 <ticker_job+0x50c>
   114f8:	9f01      	ldr	r7, [sp, #4]
			ticker = &nodes[ticker_id_head];
   114fa:	b23b      	sxth	r3, r7
   114fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   11500:	eb01 1603 	add.w	r6, r1, r3, lsl #4
   11504:	011b      	lsls	r3, r3, #4
			ext_data = ticker->ext_data;
   11506:	6ab0      	ldr	r0, [r6, #40]	; 0x28
			if (ext_data && ext_data->reschedule_state ==
   11508:	b118      	cbz	r0, 11512 <ticker_job+0x506>
   1150a:	7a04      	ldrb	r4, [r0, #8]
   1150c:	2c01      	cmp	r4, #1
   1150e:	f000 8083 	beq.w	11618 <ticker_job+0x60c>
			ticker_id_head = ticker->next;
   11512:	5ccf      	ldrb	r7, [r1, r3]
		while (ticker_id_head != TICKER_NULL) {
   11514:	2fff      	cmp	r7, #255	; 0xff
   11516:	d1f0      	bne.n	114fa <ticker_job+0x4ee>
	return rescheduled;
   11518:	f8dd b008 	ldr.w	fp, [sp, #8]
		if (ticker_job_reschedule_in_window(instance, ticks_elapsed)) {
   1151c:	2a00      	cmp	r2, #0
   1151e:	f000 813a 	beq.w	11796 <ticker_job+0x78a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11522:	9b01      	ldr	r3, [sp, #4]
   11524:	990b      	ldr	r1, [sp, #44]	; 0x2c
   11526:	428b      	cmp	r3, r1
   11528:	f000 819b 	beq.w	11862 <ticker_job+0x856>
	if (!pending) {
   1152c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   1152e:	2b00      	cmp	r3, #0
   11530:	f000 81a2 	beq.w	11878 <ticker_job+0x86c>
	if (instance->ticker_id_head == TICKER_NULL) {
   11534:	f89b 201d 	ldrb.w	r2, [fp, #29]
   11538:	9201      	str	r2, [sp, #4]
	instance->job_guard = 0U;
   1153a:	2300      	movs	r3, #0
   1153c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (instance->ticker_id_head == TICKER_NULL) {
   11540:	9b01      	ldr	r3, [sp, #4]
   11542:	2bff      	cmp	r3, #255	; 0xff
   11544:	f000 824b 	beq.w	119de <ticker_job+0x9d2>
	if (ticker_id_old_head == TICKER_NULL) {
   11548:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1154a:	2bff      	cmp	r3, #255	; 0xff
   1154c:	f000 8258 	beq.w	11a00 <ticker_job+0x9f4>
	ticker = &instance->nodes[instance->ticker_id_head];
   11550:	9a01      	ldr	r2, [sp, #4]
	ticks_to_expire = ticker->ticks_to_expire;
   11552:	f8db 3000 	ldr.w	r3, [fp]
		LL_ASSERT(i);
   11556:	f8df 917c 	ldr.w	r9, [pc, #380]	; 116d4 <ticker_job+0x6c8>
   1155a:	f8df 817c 	ldr.w	r8, [pc, #380]	; 116d8 <ticker_job+0x6cc>
   1155e:	4f5f      	ldr	r7, [pc, #380]	; (116dc <ticker_job+0x6d0>)
	ticker = &instance->nodes[instance->ticker_id_head];
   11560:	eb02 0242 	add.w	r2, r2, r2, lsl #1
	ticks_to_expire = ticker->ticks_to_expire;
   11564:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	i = 10U;
   11568:	250a      	movs	r5, #10
	ticks_to_expire = ticker->ticks_to_expire;
   1156a:	689e      	ldr	r6, [r3, #8]
		ctr = cntr_cnt_get();
   1156c:	f00b f910 	bl	1c790 <cntr_cnt_get>
		cc = instance->ticks_current;
   11570:	f8db 4014 	ldr.w	r4, [fp, #20]
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11574:	1b03      	subs	r3, r0, r4
   11576:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   1157a:	3303      	adds	r3, #3
		cc += MAX(ticks_elapsed, ticks_to_expire);
   1157c:	42b3      	cmp	r3, r6
   1157e:	bf2c      	ite	cs
   11580:	18e4      	addcs	r4, r4, r3
   11582:	19a4      	addcc	r4, r4, r6
		cc &= HAL_TICKER_CNTR_MASK;
   11584:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->trigger_set_cb(cc);
   11588:	f8db 3028 	ldr.w	r3, [fp, #40]	; 0x28
		ctr = cntr_cnt_get();
   1158c:	4682      	mov	sl, r0
		instance->trigger_set_cb(cc);
   1158e:	4620      	mov	r0, r4
   11590:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   11592:	f00b f8fd 	bl	1c790 <cntr_cnt_get>
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11596:	eba0 030a 	sub.w	r3, r0, sl
   1159a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   1159e:	eba4 020a 	sub.w	r2, r4, sl
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   115a2:	3303      	adds	r3, #3
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   115a4:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		  ticker_ticks_diff_get(cc, ctr));
   115a8:	4293      	cmp	r3, r2
		i--;
   115aa:	f105 35ff 	add.w	r5, r5, #4294967295
		  ticker_ticks_diff_get(cc, ctr));
   115ae:	f240 8102 	bls.w	117b6 <ticker_job+0x7aa>
		LL_ASSERT(i);
   115b2:	2d00      	cmp	r5, #0
   115b4:	d1da      	bne.n	1156c <ticker_job+0x560>
   115b6:	f640 03ba 	movw	r3, #2234	; 0x8ba
   115ba:	464a      	mov	r2, r9
   115bc:	4641      	mov	r1, r8
   115be:	4638      	mov	r0, r7
   115c0:	f010 fab0 	bl	21b24 <printk>
   115c4:	4040      	eors	r0, r0
   115c6:	f380 8811 	msr	BASEPRI, r0
   115ca:	f04f 0003 	mov.w	r0, #3
   115ce:	df02      	svc	2
   115d0:	e7cc      	b.n	1156c <ticker_job+0x560>
		if (current == id) {
   115d2:	4608      	mov	r0, r1
	total = 0U;
   115d4:	f04f 0c00 	mov.w	ip, #0
   115d8:	e6d3      	b.n	11382 <ticker_job+0x376>
			if (TICKER_RESCHEDULE_PENDING(ticker)) {
   115da:	2800      	cmp	r0, #0
   115dc:	f000 80a6 	beq.w	1172c <ticker_job+0x720>
   115e0:	7a03      	ldrb	r3, [r0, #8]
   115e2:	2b01      	cmp	r3, #1
   115e4:	f040 80a2 	bne.w	1172c <ticker_job+0x720>
				ticker->req = ticker->ack;
   115e8:	7062      	strb	r2, [r4, #1]
				ticker->ticks_to_expire = ticks_elapsed;
   115ea:	60a7      	str	r7, [r4, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   115ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115ee:	9a02      	ldr	r2, [sp, #8]
   115f0:	f8db 1014 	ldr.w	r1, [fp, #20]
   115f4:	189a      	adds	r2, r3, r2
   115f6:	4620      	mov	r0, r4
   115f8:	f7ff fa76 	bl	10ae8 <ticks_to_expire_prep>
			ticker->next = *insert_head;
   115fc:	9a01      	ldr	r2, [sp, #4]
   115fe:	9b04      	ldr	r3, [sp, #16]
   11600:	f809 3002 	strb.w	r3, [r9, r2]
			ticker->req++;
   11604:	7863      	ldrb	r3, [r4, #1]
   11606:	9604      	str	r6, [sp, #16]
   11608:	3301      	adds	r3, #1
   1160a:	7063      	strb	r3, [r4, #1]
	while (instance->ticker_id_head != TICKER_NULL) {
   1160c:	f89b 601d 	ldrb.w	r6, [fp, #29]
   11610:	2eff      	cmp	r6, #255	; 0xff
   11612:	f47f af12 	bne.w	1143a <ticker_job+0x42e>
   11616:	e75b      	b.n	114d0 <ticker_job+0x4c4>
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11618:	9b02      	ldr	r3, [sp, #8]
   1161a:	7f1b      	ldrb	r3, [r3, #28]
   1161c:	2bff      	cmp	r3, #255	; 0xff
   1161e:	4686      	mov	lr, r0
   11620:	d044      	beq.n	116ac <ticker_job+0x6a0>
			instance->ticks_slot_previous > ticks_elapsed) {
   11622:	9b02      	ldr	r3, [sp, #8]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11624:	9a05      	ldr	r2, [sp, #20]
			instance->ticks_slot_previous > ticks_elapsed) {
   11626:	699b      	ldr	r3, [r3, #24]
		if (instance->ticker_id_slot_previous != TICKER_NULL &&
   11628:	4293      	cmp	r3, r2
   1162a:	d93f      	bls.n	116ac <ticker_job+0x6a0>
			window_start_ticks = instance->ticks_slot_previous -
   1162c:	eba3 0c02 	sub.w	ip, r3, r2
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   11630:	e9de 2300 	ldrd	r2, r3, [lr]
   11634:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   11636:	f896 b000 	ldrb.w	fp, [r6]
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   1163a:	d23f      	bcs.n	116bc <ticker_job+0x6b0>
		while (ticker_id_iter != TICKER_NULL &&
   1163c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
			ticks_slot_window = ext_data->ticks_slot_window -
   11640:	eba2 0903 	sub.w	r9, r2, r3
		while (ticker_id_iter != TICKER_NULL &&
   11644:	d03a      	beq.n	116bc <ticker_job+0x6b0>
		       ticks_start_offset + ticker->ticks_slot <=
   11646:	f8d6 8018 	ldr.w	r8, [r6, #24]
		while (ticker_id_iter != TICKER_NULL &&
   1164a:	45c1      	cmp	r9, r8
   1164c:	f04f 0300 	mov.w	r3, #0
   11650:	d337      	bcc.n	116c2 <ticker_job+0x6b6>
   11652:	46c2      	mov	sl, r8
   11654:	465a      	mov	r2, fp
   11656:	461d      	mov	r5, r3
   11658:	e01b      	b.n	11692 <ticker_job+0x686>
			if (node->ticks_to_expire >
   1165a:	68a0      	ldr	r0, [r4, #8]
					MIN(ticks_slot_window,
   1165c:	1f03      	subs	r3, r0, #4
			if (node->ticks_to_expire >
   1165e:	2804      	cmp	r0, #4
					MIN(ticks_slot_window,
   11660:	442b      	add	r3, r5
			if (node->ticks_to_expire >
   11662:	d909      	bls.n	11678 <ticker_job+0x66c>
				window_end_ticks =
   11664:	454b      	cmp	r3, r9
   11666:	bf28      	it	cs
   11668:	464b      	movcs	r3, r9
			if (window_end_ticks > ticks_start_offset +
   1166a:	459a      	cmp	sl, r3
   1166c:	d204      	bcs.n	11678 <ticker_job+0x66c>
			if (ticks_to_expire != 0U &&
   1166e:	ebb3 0308 	subs.w	r3, r3, r8
   11672:	d001      	beq.n	11678 <ticker_job+0x66c>
   11674:	459c      	cmp	ip, r3
   11676:	d924      	bls.n	116c2 <ticker_job+0x6b6>
			window_start_ticks  = node->ticks_to_expire +
   11678:	69a3      	ldr	r3, [r4, #24]
			ticker_id_iter = node->next;
   1167a:	5c8a      	ldrb	r2, [r1, r2]
			window_start_ticks  = node->ticks_to_expire +
   1167c:	eb00 0c03 	add.w	ip, r0, r3
			ticks_start_offset += node->ticks_to_expire;
   11680:	4405      	add	r5, r0
			ticks_to_expire     = ticks_slot_window -
   11682:	eba9 0308 	sub.w	r3, r9, r8
		while (ticker_id_iter != TICKER_NULL &&
   11686:	2aff      	cmp	r2, #255	; 0xff
		       ticks_start_offset + ticker->ticks_slot <=
   11688:	eb05 0a08 	add.w	sl, r5, r8
		while (ticker_id_iter != TICKER_NULL &&
   1168c:	d019      	beq.n	116c2 <ticker_job+0x6b6>
   1168e:	45d1      	cmp	r9, sl
   11690:	d317      	bcc.n	116c2 <ticker_job+0x6b6>
			node = &nodes[ticker_id_iter];
   11692:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11696:	eb01 1402 	add.w	r4, r1, r2, lsl #4
   1169a:	0112      	lsls	r2, r2, #4
			if (node->ext_data &&
   1169c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
   1169e:	2800      	cmp	r0, #0
   116a0:	d0db      	beq.n	1165a <ticker_job+0x64e>
   116a2:	7a00      	ldrb	r0, [r0, #8]
   116a4:	2801      	cmp	r0, #1
   116a6:	d1d8      	bne.n	1165a <ticker_job+0x64e>
				ticker_id_iter = node->next;
   116a8:	5c8a      	ldrb	r2, [r1, r2]
				continue;
   116aa:	e7ec      	b.n	11686 <ticker_job+0x67a>
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   116ac:	e9de 2300 	ldrd	r2, r3, [lr]
   116b0:	4293      	cmp	r3, r2
		ticker_id_iter = nodes[ticker_id_head].next;
   116b2:	f896 b000 	ldrb.w	fp, [r6]
		window_start_ticks = 0U;
   116b6:	f04f 0c00 	mov.w	ip, #0
		if (ext_data->ticks_drift < ext_data->ticks_slot_window) {
   116ba:	d3bf      	bcc.n	1163c <ticker_job+0x630>
		ticker->ticks_to_expire = ticks_to_expire;
   116bc:	2300      	movs	r3, #0
   116be:	60b3      	str	r3, [r6, #8]
		while (ticker_id_iter != TICKER_NULL) {
   116c0:	e02b      	b.n	1171a <ticker_job+0x70e>
		ticker->ticks_to_expire = ticks_to_expire;
   116c2:	60b3      	str	r3, [r6, #8]
   116c4:	465d      	mov	r5, fp
   116c6:	f04f 08ff 	mov.w	r8, #255	; 0xff
   116ca:	e00a      	b.n	116e2 <ticker_job+0x6d6>
   116cc:	ff172b5a 	.word	0xff172b5a
   116d0:	7f172b59 	.word	0x7f172b59
   116d4:	000283c4 	.word	0x000283c4
   116d8:	000284c8 	.word	0x000284c8
   116dc:	00028404 	.word	0x00028404
   116e0:	4615      	mov	r5, r2
			node = &nodes[ticker_id_iter];
   116e2:	b228      	sxth	r0, r5
   116e4:	eb00 0240 	add.w	r2, r0, r0, lsl #1
   116e8:	eb01 1c02 	add.w	ip, r1, r2, lsl #4
   116ec:	0112      	lsls	r2, r2, #4
			if (ticker->ticks_to_expire > node->ticks_to_expire) {
   116ee:	f8dc 4008 	ldr.w	r4, [ip, #8]
   116f2:	429c      	cmp	r4, r3
   116f4:	f080 80ab 	bcs.w	1184e <ticker_job+0x842>
				ticker->ticks_to_expire -=
   116f8:	1b1b      	subs	r3, r3, r4
   116fa:	60b3      	str	r3, [r6, #8]
			ticker_id_iter = node->next;
   116fc:	5c8a      	ldrb	r2, [r1, r2]
		while (ticker_id_iter != TICKER_NULL) {
   116fe:	2aff      	cmp	r2, #255	; 0xff
   11700:	46a8      	mov	r8, r5
   11702:	d1ed      	bne.n	116e0 <ticker_job+0x6d4>
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11704:	9a02      	ldr	r2, [sp, #8]
			nodes[ticker_id_prev].next = ticker_id_head;
   11706:	f8cd b004 	str.w	fp, [sp, #4]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   1170a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
   1170e:	0103      	lsls	r3, r0, #4
			instance->ticker_id_head = nodes[ticker_id_head].next;
   11710:	f882 b01d 	strb.w	fp, [r2, #29]
			nodes[ticker_id_head].next = nodes[ticker_id_prev].next;
   11714:	5cca      	ldrb	r2, [r1, r3]
   11716:	7032      	strb	r2, [r6, #0]
			nodes[ticker_id_prev].next = ticker_id_head;
   11718:	54cf      	strb	r7, [r1, r3]
		ticker->lazy_current--;
   1171a:	8bf3      	ldrh	r3, [r6, #30]
   1171c:	3b01      	subs	r3, #1
   1171e:	83f3      	strh	r3, [r6, #30]
		ext_data->reschedule_state =
   11720:	f04f 0302 	mov.w	r3, #2
   11724:	f88e 3008 	strb.w	r3, [lr, #8]
		rescheduled  = 1U;
   11728:	2201      	movs	r2, #1
   1172a:	e6e2      	b.n	114f2 <ticker_job+0x4e6>
				if (!ticker->lazy_current) {
   1172c:	f1be 0f00 	cmp.w	lr, #0
   11730:	d15f      	bne.n	117f2 <ticker_job+0x7e6>
					lazy_periodic = ticker->lazy_periodic;
   11732:	8ba3      	ldrh	r3, [r4, #28]
   11734:	9307      	str	r3, [sp, #28]
   11736:	461a      	mov	r2, r3
				while (count--) {
   11738:	1c68      	adds	r0, r5, #1
	ticker->remainder_current += ticker->remainder_periodic;
   1173a:	e9d4 c308 	ldrd	ip, r3, [r4, #32]
				ticks_to_expire = 0U;
   1173e:	2100      	movs	r1, #0
   11740:	9006      	str	r0, [sp, #24]
   11742:	e004      	b.n	1174e <ticker_job+0x742>
   11744:	4628      	mov	r0, r5
				while (count--) {
   11746:	3a01      	subs	r2, #1
					ticks_to_expire +=
   11748:	4401      	add	r1, r0
				while (count--) {
   1174a:	1c50      	adds	r0, r2, #1
   1174c:	d00f      	beq.n	1176e <ticker_job+0x762>
	ticker->remainder_current += ticker->remainder_periodic;
   1174e:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   11750:	eb03 0008 	add.w	r0, r3, r8
   11754:	4550      	cmp	r0, sl
   11756:	d8f5      	bhi.n	11744 <ticker_job+0x738>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11758:	9806      	ldr	r0, [sp, #24]
   1175a:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
				while (count--) {
   1175e:	3a01      	subs	r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11760:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
					ticks_to_expire +=
   11764:	4401      	add	r1, r0
				while (count--) {
   11766:	1c50      	adds	r0, r2, #1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11768:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
				while (count--) {
   1176c:	d1ef      	bne.n	1174e <ticker_job+0x742>
				if (!ticker->must_expire) {
   1176e:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
   11772:	6263      	str	r3, [r4, #36]	; 0x24
   11774:	2a00      	cmp	r2, #0
   11776:	d041      	beq.n	117fc <ticker_job+0x7f0>
				ticker->lazy_current += (lazy_periodic + lazy);
   11778:	9b07      	ldr	r3, [sp, #28]
				ticker->ticks_to_expire = ticks_to_expire;
   1177a:	60a1      	str	r1, [r4, #8]
				ticker->lazy_current += (lazy_periodic + lazy);
   1177c:	4473      	add	r3, lr
   1177e:	83e3      	strh	r3, [r4, #30]
   11780:	e734      	b.n	115ec <ticker_job+0x5e0>
	insert_head = TICKER_NULL;
   11782:	23ff      	movs	r3, #255	; 0xff
	pending = 0U;
   11784:	9109      	str	r1, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   11786:	9304      	str	r3, [sp, #16]
		ticker_job_list_insert(instance, insert_head);
   11788:	9904      	ldr	r1, [sp, #16]
   1178a:	4658      	mov	r0, fp
   1178c:	f7ff f9d0 	bl	10b30 <ticker_job_list_insert>
	if (instance->ticker_id_head != ticker_id_old_head) {
   11790:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11794:	9301      	str	r3, [sp, #4]
   11796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11798:	9a01      	ldr	r2, [sp, #4]
   1179a:	4293      	cmp	r3, r2
   1179c:	f47f aec6 	bne.w	1152c <ticker_job+0x520>
	if (!pending) {
   117a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
   117a2:	2b00      	cmp	r3, #0
   117a4:	f000 80fc 	beq.w	119a0 <ticker_job+0x994>
	instance->job_guard = 0U;
   117a8:	2300      	movs	r3, #0
   117aa:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   117ae:	9b08      	ldr	r3, [sp, #32]
   117b0:	2b00      	cmp	r3, #0
   117b2:	f040 8133 	bne.w	11a1c <ticker_job+0xa10>
	if (instance->worker_trigger) {
   117b6:	f89b 301f 	ldrb.w	r3, [fp, #31]
   117ba:	2b00      	cmp	r3, #0
   117bc:	d059      	beq.n	11872 <ticker_job+0x866>
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   117be:	f8db 4024 	ldr.w	r4, [fp, #36]	; 0x24
   117c2:	465b      	mov	r3, fp
   117c4:	2201      	movs	r2, #1
   117c6:	2103      	movs	r1, #3
   117c8:	2004      	movs	r0, #4
   117ca:	46a4      	mov	ip, r4
}
   117cc:	b00f      	add	sp, #60	; 0x3c
   117ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
		instance->sched_cb(TICKER_CALL_ID_JOB, TICKER_CALL_ID_WORKER, 1,
   117d2:	4760      	bx	ip
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   117d4:	6aa0      	ldr	r0, [r4, #40]	; 0x28
		if (ticker->ticks_slot && (state == 2U) && !skip_collision &&
   117d6:	f1be 0f00 	cmp.w	lr, #0
   117da:	f47f ae58 	bne.w	1148e <ticker_job+0x482>
   117de:	b118      	cbz	r0, 117e8 <ticker_job+0x7dc>
		    !TICKER_RESCHEDULE_PENDING(ticker)) {
   117e0:	7a05      	ldrb	r5, [r0, #8]
   117e2:	2d01      	cmp	r5, #1
   117e4:	f000 80e6 	beq.w	119b4 <ticker_job+0x9a8>
			instance->ticks_slot_previous = ticker->ticks_slot;
   117e8:	f8cb 1018 	str.w	r1, [fp, #24]
			instance->ticker_id_slot_previous = id_expired;
   117ec:	f88b 601c 	strb.w	r6, [fp, #28]
			instance->ticks_slot_previous = ticker->ticks_slot;
   117f0:	e64d      	b.n	1148e <ticker_job+0x482>
					ticker->req = ticker->ack;
   117f2:	7062      	strb	r2, [r4, #1]
   117f4:	2200      	movs	r2, #0
					lazy_periodic = 0U;
   117f6:	9207      	str	r2, [sp, #28]
   117f8:	e79e      	b.n	11738 <ticker_job+0x72c>
   117fa:	4770      	bx	lr
					while (ticks_to_expire <
   117fc:	9803      	ldr	r0, [sp, #12]
   117fe:	4288      	cmp	r0, r1
   11800:	d9ba      	bls.n	11778 <ticker_job+0x76c>
   11802:	1c68      	adds	r0, r5, #1
   11804:	f8cd 9030 	str.w	r9, [sp, #48]	; 0x30
   11808:	9006      	str	r0, [sp, #24]
   1180a:	f8dd 900c 	ldr.w	r9, [sp, #12]
   1180e:	e005      	b.n	1181c <ticker_job+0x810>
   11810:	4628      	mov	r0, r5
						ticks_to_expire +=
   11812:	4401      	add	r1, r0
						lazy++;
   11814:	3201      	adds	r2, #1
					while (ticks_to_expire <
   11816:	4589      	cmp	r9, r1
						lazy++;
   11818:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1181a:	d910      	bls.n	1183e <ticker_job+0x832>
	ticker->remainder_current += ticker->remainder_periodic;
   1181c:	4463      	add	r3, ip
	if ((ticker->remainder_current < BIT(31)) &&
   1181e:	eb03 0008 	add.w	r0, r3, r8
   11822:	4550      	cmp	r0, sl
   11824:	d8f4      	bhi.n	11810 <ticker_job+0x804>
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11826:	9806      	ldr	r0, [sp, #24]
   11828:	f1a3 73e8 	sub.w	r3, r3, #30408704	; 0x1d00000
						ticks_to_expire +=
   1182c:	4401      	add	r1, r0
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   1182e:	f5a3 33d4 	sub.w	r3, r3, #108544	; 0x1a800
						lazy++;
   11832:	3201      	adds	r2, #1
					while (ticks_to_expire <
   11834:	4589      	cmp	r9, r1
		ticker->remainder_current -= HAL_TICKER_REMAINDER_RANGE;
   11836:	f5a3 73a5 	sub.w	r3, r3, #330	; 0x14a
						lazy++;
   1183a:	b292      	uxth	r2, r2
					while (ticks_to_expire <
   1183c:	d8ee      	bhi.n	1181c <ticker_job+0x810>
				ticker->lazy_current += (lazy_periodic + lazy);
   1183e:	9807      	ldr	r0, [sp, #28]
   11840:	6263      	str	r3, [r4, #36]	; 0x24
   11842:	4410      	add	r0, r2
   11844:	b283      	uxth	r3, r0
   11846:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
   1184a:	9307      	str	r3, [sp, #28]
   1184c:	e794      	b.n	11778 <ticker_job+0x76c>
				node->ticks_to_expire -=
   1184e:	1ae3      	subs	r3, r4, r3
		if (ticker_id_prev != TICKER_NULL) {
   11850:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
				node->ticks_to_expire -=
   11854:	f8cc 3008 	str.w	r3, [ip, #8]
		if (ticker_id_prev != TICKER_NULL) {
   11858:	f43f af5f 	beq.w	1171a <ticker_job+0x70e>
   1185c:	fa0f f088 	sxth.w	r0, r8
   11860:	e750      	b.n	11704 <ticker_job+0x6f8>
	if (!pending) {
   11862:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11864:	2b00      	cmp	r3, #0
   11866:	f000 80b1 	beq.w	119cc <ticker_job+0x9c0>
	instance->job_guard = 0U;
   1186a:	2300      	movs	r3, #0
   1186c:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11870:	e666      	b.n	11540 <ticker_job+0x534>
}
   11872:	b00f      	add	sp, #60	; 0x3c
   11874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	count_user = instance->count_user;
   11878:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   1187c:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   11880:	1e5c      	subs	r4, r3, #1
   11882:	b2e4      	uxtb	r4, r4
   11884:	2b00      	cmp	r3, #0
   11886:	f43f ae55 	beq.w	11534 <ticker_job+0x528>
		flag_compare_update = 1U;
   1188a:	2301      	movs	r3, #1
   1188c:	9308      	str	r3, [sp, #32]
   1188e:	eb06 04c4 	add.w	r4, r6, r4, lsl #3
		uop->status = TICKER_STATUS_SUCCESS;
   11892:	2500      	movs	r5, #0
			uop->status = TICKER_STATUS_FAILURE;
   11894:	f04f 0a01 	mov.w	sl, #1
   11898:	9601      	str	r6, [sp, #4]
		while (user->first != user->last) {
   1189a:	7863      	ldrb	r3, [r4, #1]
   1189c:	78e2      	ldrb	r2, [r4, #3]
		user_op = &user->user_op[0];
   1189e:	6867      	ldr	r7, [r4, #4]
		while (user->first != user->last) {
   118a0:	429a      	cmp	r2, r3
   118a2:	d10c      	bne.n	118be <ticker_job+0x8b2>
   118a4:	e068      	b.n	11978 <ticker_job+0x96c>
	switch (uop->op) {
   118a6:	2b01      	cmp	r3, #1
   118a8:	d05e      	beq.n	11968 <ticker_job+0x95c>
			first = user->first + 1;
   118aa:	7863      	ldrb	r3, [r4, #1]
			if (first == user->count_user_op) {
   118ac:	7821      	ldrb	r1, [r4, #0]
			first = user->first + 1;
   118ae:	3301      	adds	r3, #1
   118b0:	b2db      	uxtb	r3, r3
				first = 0U;
   118b2:	4299      	cmp	r1, r3
   118b4:	bf08      	it	eq
   118b6:	2300      	moveq	r3, #0
		while (user->first != user->last) {
   118b8:	429a      	cmp	r2, r3
			user->first = first;
   118ba:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   118bc:	d05c      	beq.n	11978 <ticker_job+0x96c>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   118be:	b21b      	sxth	r3, r3
   118c0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   118c4:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   118c8:	eb07 0c83 	add.w	ip, r7, r3, lsl #2
	switch (uop->op) {
   118cc:	f817 3023 	ldrb.w	r3, [r7, r3, lsl #2]
   118d0:	2b02      	cmp	r3, #2
   118d2:	d01d      	beq.n	11910 <ticker_job+0x904>
   118d4:	2b03      	cmp	r3, #3
   118d6:	d1e6      	bne.n	118a6 <ticker_job+0x89a>
		if (uop->id < instance->count_node) {
   118d8:	f89c 3001 	ldrb.w	r3, [ip, #1]
   118dc:	f89b 2008 	ldrb.w	r2, [fp, #8]
   118e0:	429a      	cmp	r2, r3
   118e2:	d946      	bls.n	11972 <ticker_job+0x966>
			node[uop->id].priority =
   118e4:	f8db 2000 	ldr.w	r2, [fp]
   118e8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   118ec:	eb02 1303 	add.w	r3, r2, r3, lsl #4
   118f0:	f89c 2004 	ldrb.w	r2, [ip, #4]
   118f4:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
			uop->status = TICKER_STATUS_SUCCESS;
   118f8:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		fp_op_func = uop->fp_op_func;
   118fc:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
	if (fp_op_func) {
   11900:	b123      	cbz	r3, 1190c <ticker_job+0x900>
		fp_op_func(uop->status, uop->op_context);
   11902:	f8dc 1030 	ldr.w	r1, [ip, #48]	; 0x30
   11906:	f8dc 0028 	ldr.w	r0, [ip, #40]	; 0x28
   1190a:	4798      	blx	r3
   1190c:	78e2      	ldrb	r2, [r4, #3]
   1190e:	e7cc      	b.n	118aa <ticker_job+0x89e>
		ticker_by_next_slot_get(instance,
   11910:	e9dc e101 	ldrd	lr, r1, [ip, #4]
	_ticker_id_head = *ticker_id_head;
   11914:	f89e 2000 	ldrb.w	r2, [lr]
		ticker_by_next_slot_get(instance,
   11918:	f8dc 800c 	ldr.w	r8, [ip, #12]
	node = instance->nodes;
   1191c:	f8db 0000 	ldr.w	r0, [fp]
	    (*ticks_current != instance->ticks_current)) {
   11920:	f8db 6014 	ldr.w	r6, [fp, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   11924:	2aff      	cmp	r2, #255	; 0xff
   11926:	d002      	beq.n	1192e <ticker_job+0x922>
   11928:	680b      	ldr	r3, [r1, #0]
   1192a:	42b3      	cmp	r3, r6
   1192c:	d02e      	beq.n	1198c <ticker_job+0x980>
		_ticker_id_head = instance->ticker_id_head;
   1192e:	f89b 201d 	ldrb.w	r2, [fp, #29]
		*ticks_current = instance->ticks_current;
   11932:	600e      	str	r6, [r1, #0]
		_ticks_to_expire = 0U;
   11934:	2600      	movs	r6, #0
	while ((_ticker_id_head != TICKER_NULL) &&
   11936:	2aff      	cmp	r2, #255	; 0xff
   11938:	bf18      	it	ne
   1193a:	46a1      	movne	r9, r4
   1193c:	d105      	bne.n	1194a <ticker_job+0x93e>
   1193e:	e00f      	b.n	11960 <ticker_job+0x954>
		_ticker_id_head = ticker->next;
   11940:	5cc2      	ldrb	r2, [r0, r3]
		_ticks_to_expire += ticker->ticks_to_expire;
   11942:	6889      	ldr	r1, [r1, #8]
	while ((_ticker_id_head != TICKER_NULL) &&
   11944:	2aff      	cmp	r2, #255	; 0xff
		_ticks_to_expire += ticker->ticks_to_expire;
   11946:	440e      	add	r6, r1
	while ((_ticker_id_head != TICKER_NULL) &&
   11948:	d01e      	beq.n	11988 <ticker_job+0x97c>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0U)) {
   1194a:	eb02 0342 	add.w	r3, r2, r2, lsl #1
   1194e:	eb00 1103 	add.w	r1, r0, r3, lsl #4
   11952:	011b      	lsls	r3, r3, #4
	while ((_ticker_id_head != TICKER_NULL) &&
   11954:	698c      	ldr	r4, [r1, #24]
   11956:	2c00      	cmp	r4, #0
   11958:	d0f2      	beq.n	11940 <ticker_job+0x934>
		_ticks_to_expire += ticker->ticks_to_expire;
   1195a:	688b      	ldr	r3, [r1, #8]
   1195c:	464c      	mov	r4, r9
   1195e:	441e      	add	r6, r3
	*ticker_id_head = _ticker_id_head;
   11960:	f88e 2000 	strb.w	r2, [lr]
	*ticks_to_expire = _ticks_to_expire;
   11964:	f8c8 6000 	str.w	r6, [r8]
		fp_op_func = uop->fp_op_func;
   11968:	f8dc 302c 	ldr.w	r3, [ip, #44]	; 0x2c
		uop->status = TICKER_STATUS_SUCCESS;
   1196c:	f8cc 5028 	str.w	r5, [ip, #40]	; 0x28
		break;
   11970:	e7c6      	b.n	11900 <ticker_job+0x8f4>
			uop->status = TICKER_STATUS_FAILURE;
   11972:	f8cc a028 	str.w	sl, [ip, #40]	; 0x28
   11976:	e7c1      	b.n	118fc <ticker_job+0x8f0>
	while (count_user--) {
   11978:	9a01      	ldr	r2, [sp, #4]
   1197a:	42a2      	cmp	r2, r4
   1197c:	f1a4 0308 	sub.w	r3, r4, #8
   11980:	f43f af12 	beq.w	117a8 <ticker_job+0x79c>
   11984:	461c      	mov	r4, r3
   11986:	e788      	b.n	1189a <ticker_job+0x88e>
   11988:	464c      	mov	r4, r9
   1198a:	e7e9      	b.n	11960 <ticker_job+0x954>
		ticker = &node[_ticker_id_head];
   1198c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
   11990:	0113      	lsls	r3, r2, #4
	_ticks_to_expire = *ticks_to_expire;
   11992:	f8d8 6000 	ldr.w	r6, [r8]
		_ticker_id_head = ticker->next;
   11996:	5cc2      	ldrb	r2, [r0, r3]
   11998:	e7cd      	b.n	11936 <ticker_job+0x92a>
			ticker->ticks_to_expire -= ticks_elapsed;
   1199a:	1bdb      	subs	r3, r3, r7
   1199c:	60a3      	str	r3, [r4, #8]
			break;
   1199e:	e597      	b.n	114d0 <ticker_job+0x4c4>
	count_user = instance->count_user;
   119a0:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   119a4:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   119a8:	1e5c      	subs	r4, r3, #1
   119aa:	b2e4      	uxtb	r4, r4
   119ac:	2b00      	cmp	r3, #0
   119ae:	f47f af6e 	bne.w	1188e <ticker_job+0x882>
   119b2:	e6f9      	b.n	117a8 <ticker_job+0x79c>
		instance->ticker_id_head = ticker->next;
   119b4:	9901      	ldr	r1, [sp, #4]
		ticker->ticks_to_expire = 0U;
   119b6:	f8c4 e008 	str.w	lr, [r4, #8]
		instance->ticker_id_head = ticker->next;
   119ba:	f819 1001 	ldrb.w	r1, [r9, r1]
   119be:	f88b 101d 	strb.w	r1, [fp, #29]
		if ((ticker->ticks_periodic != 0U) ||
   119c2:	6861      	ldr	r1, [r4, #4]
   119c4:	2900      	cmp	r1, #0
   119c6:	f43f ad6e 	beq.w	114a6 <ticker_job+0x49a>
   119ca:	e60d      	b.n	115e8 <ticker_job+0x5dc>
	count_user = instance->count_user;
   119cc:	f89b 3009 	ldrb.w	r3, [fp, #9]
	users = &instance->users[0];
   119d0:	f8db 6004 	ldr.w	r6, [fp, #4]
	while (count_user--) {
   119d4:	1e5c      	subs	r4, r3, #1
   119d6:	b2e4      	uxtb	r4, r4
   119d8:	b323      	cbz	r3, 11a24 <ticker_job+0xa18>
			flag_compare_update = 1U;
   119da:	9208      	str	r2, [sp, #32]
   119dc:	e757      	b.n	1188e <ticker_job+0x882>
		if (cntr_stop() == 0) {
   119de:	f00a feb1 	bl	1c744 <cntr_stop>
   119e2:	2800      	cmp	r0, #0
   119e4:	f47f aee7 	bne.w	117b6 <ticker_job+0x7aa>
			instance->ticks_slot_previous = 0U;
   119e8:	f8cb 0018 	str.w	r0, [fp, #24]
			instance->ticks_current = cntr_cnt_get();
   119ec:	f00a fed0 	bl	1c790 <cntr_cnt_get>
   119f0:	f8cb 0014 	str.w	r0, [fp, #20]
   119f4:	e6df      	b.n	117b6 <ticker_job+0x7aa>
	pending = 0U;
   119f6:	9b08      	ldr	r3, [sp, #32]
   119f8:	9309      	str	r3, [sp, #36]	; 0x24
	insert_head = TICKER_NULL;
   119fa:	23ff      	movs	r3, #255	; 0xff
   119fc:	9304      	str	r3, [sp, #16]
   119fe:	e508      	b.n	11412 <ticker_job+0x406>
		ticks_current = cntr_cnt_get();
   11a00:	f00a fec6 	bl	1c790 <cntr_cnt_get>
   11a04:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11a06:	f00a fe8d 	bl	1c724 <cntr_start>
	ticker = &instance->nodes[instance->ticker_id_head];
   11a0a:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11a0e:	9301      	str	r3, [sp, #4]
		if (cntr_start() == 0) {
   11a10:	2800      	cmp	r0, #0
   11a12:	f47f ad9d 	bne.w	11550 <ticker_job+0x544>
			instance->ticks_current = ticks_current;
   11a16:	f8cb 4014 	str.w	r4, [fp, #20]
   11a1a:	e599      	b.n	11550 <ticker_job+0x544>
	if (instance->ticker_id_head == TICKER_NULL) {
   11a1c:	f89b 301d 	ldrb.w	r3, [fp, #29]
   11a20:	9301      	str	r3, [sp, #4]
   11a22:	e58d      	b.n	11540 <ticker_job+0x534>
	instance->job_guard = 0U;
   11a24:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11a26:	f88b 301e 	strb.w	r3, [fp, #30]
	if (flag_compare_update) {
   11a2a:	e589      	b.n	11540 <ticker_job+0x534>

00011a2c <ticker_init>:
{
   11a2c:	b4f0      	push	{r4, r5, r6, r7}
   11a2e:	9d04      	ldr	r5, [sp, #16]
   11a30:	f89d 7014 	ldrb.w	r7, [sp, #20]
   11a34:	9c06      	ldr	r4, [sp, #24]
	if (instance_index >= TICKER_INSTANCE_MAX) {
   11a36:	2800      	cmp	r0, #0
   11a38:	d137      	bne.n	11aaa <ticker_init+0x7e>
	instance->count_node = count_node;
   11a3a:	4e1d      	ldr	r6, [pc, #116]	; (11ab0 <ticker_init+0x84>)
	while (count_node--) {
   11a3c:	f101 3cff 	add.w	ip, r1, #4294967295
	instance->count_node = count_node;
   11a40:	7231      	strb	r1, [r6, #8]
	instance->nodes = node;
   11a42:	6032      	str	r2, [r6, #0]
	while (count_node--) {
   11a44:	fa5f fc8c 	uxtb.w	ip, ip
   11a48:	b149      	cbz	r1, 11a5e <ticker_init+0x32>
   11a4a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
   11a4e:	eb02 110c 	add.w	r1, r2, ip, lsl #4
   11a52:	4291      	cmp	r1, r2
		instance->nodes[count_node].priority = 0;
   11a54:	f881 002d 	strb.w	r0, [r1, #45]	; 0x2d
	while (count_node--) {
   11a58:	f1a1 0130 	sub.w	r1, r1, #48	; 0x30
   11a5c:	d1f9      	bne.n	11a52 <ticker_init+0x26>
	while (count_user--) {
   11a5e:	1e5a      	subs	r2, r3, #1
	instance->count_user = count_user;
   11a60:	7273      	strb	r3, [r6, #9]
	instance->users = user;
   11a62:	6075      	str	r5, [r6, #4]
	while (count_user--) {
   11a64:	b2d2      	uxtb	r2, r2
   11a66:	b183      	cbz	r3, 11a8a <ticker_init+0x5e>
   11a68:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
		users[count_user].user_op = user_op_;
   11a6c:	6054      	str	r4, [r2, #4]
		user_op_ += users[count_user].count_user_op;
   11a6e:	4610      	mov	r0, r2
   11a70:	f812 3908 	ldrb.w	r3, [r2], #-8
   11a74:	eb03 0143 	add.w	r1, r3, r3, lsl #1
   11a78:	eb03 0181 	add.w	r1, r3, r1, lsl #2
	while (count_user--) {
   11a7c:	4285      	cmp	r5, r0
		count_op -= users[count_user].count_user_op;
   11a7e:	eba7 0303 	sub.w	r3, r7, r3
		user_op_ += users[count_user].count_user_op;
   11a82:	eb04 0481 	add.w	r4, r4, r1, lsl #2
		count_op -= users[count_user].count_user_op;
   11a86:	b2df      	uxtb	r7, r3
	while (count_user--) {
   11a88:	d1f0      	bne.n	11a6c <ticker_init+0x40>
	if (count_op) {
   11a8a:	b977      	cbnz	r7, 11aaa <ticker_init+0x7e>
	instance->caller_id_get_cb = caller_id_get_cb;
   11a8c:	9a07      	ldr	r2, [sp, #28]
   11a8e:	6232      	str	r2, [r6, #32]
	instance->sched_cb = sched_cb;
   11a90:	9a08      	ldr	r2, [sp, #32]
   11a92:	6272      	str	r2, [r6, #36]	; 0x24
	instance->ticker_id_slot_previous = TICKER_NULL;
   11a94:	f64f 73ff 	movw	r3, #65535	; 0xffff
	instance->trigger_set_cb = trigger_set_cb;
   11a98:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11a9a:	62b2      	str	r2, [r6, #40]	; 0x28
	return TICKER_STATUS_SUCCESS;
   11a9c:	4638      	mov	r0, r7
	instance->ticks_slot_previous = 0U;
   11a9e:	e9c6 7705 	strd	r7, r7, [r6, #20]
	instance->ticker_id_slot_previous = TICKER_NULL;
   11aa2:	83b3      	strh	r3, [r6, #28]
	instance->ticks_elapsed_first = 0U;
   11aa4:	8177      	strh	r7, [r6, #10]
}
   11aa6:	bcf0      	pop	{r4, r5, r6, r7}
   11aa8:	4770      	bx	lr
		return TICKER_STATUS_FAILURE;
   11aaa:	2001      	movs	r0, #1
}
   11aac:	bcf0      	pop	{r4, r5, r6, r7}
   11aae:	4770      	bx	lr
   11ab0:	2000d9b0 	.word	0x2000d9b0

00011ab4 <ticker_is_initialized>:
	return !!(_instance[instance_index].count_node);
   11ab4:	4b04      	ldr	r3, [pc, #16]	; (11ac8 <ticker_is_initialized+0x14>)
   11ab6:	222c      	movs	r2, #44	; 0x2c
   11ab8:	fb02 3300 	mla	r3, r2, r0, r3
   11abc:	7a18      	ldrb	r0, [r3, #8]
}
   11abe:	3800      	subs	r0, #0
   11ac0:	bf18      	it	ne
   11ac2:	2001      	movne	r0, #1
   11ac4:	4770      	bx	lr
   11ac6:	bf00      	nop
   11ac8:	2000d9b0 	.word	0x2000d9b0

00011acc <ticker_trigger>:
	if (instance->sched_cb) {
   11acc:	4b0a      	ldr	r3, [pc, #40]	; (11af8 <ticker_trigger+0x2c>)
   11ace:	222c      	movs	r2, #44	; 0x2c
   11ad0:	fb02 3200 	mla	r2, r2, r0, r3
{
   11ad4:	b410      	push	{r4}
	if (instance->sched_cb) {
   11ad6:	6a54      	ldr	r4, [r2, #36]	; 0x24
   11ad8:	b15c      	cbz	r4, 11af2 <ticker_trigger+0x26>
	instance = &_instance[instance_index];
   11ada:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   11ade:	eb00 0042 	add.w	r0, r0, r2, lsl #1
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11ae2:	eb03 0380 	add.w	r3, r3, r0, lsl #2
   11ae6:	46a4      	mov	ip, r4
   11ae8:	2201      	movs	r2, #1
}
   11aea:	bc10      	pop	{r4}
		instance->sched_cb(TICKER_CALL_ID_TRIGGER,
   11aec:	2103      	movs	r1, #3
   11aee:	2002      	movs	r0, #2
   11af0:	4760      	bx	ip
}
   11af2:	bc10      	pop	{r4}
   11af4:	4770      	bx	lr
   11af6:	bf00      	nop
   11af8:	2000d9b0 	.word	0x2000d9b0

00011afc <ticker_start_ext>:
{
   11afc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11b00:	4e28      	ldr	r6, [pc, #160]	; (11ba4 <ticker_start_ext+0xa8>)
{
   11b02:	f8bd 802c 	ldrh.w	r8, [sp, #44]	; 0x2c
   11b06:	4604      	mov	r4, r0
	user = &instance->users[user_id];
   11b08:	252c      	movs	r5, #44	; 0x2c
   11b0a:	fb05 6504 	mla	r5, r5, r4, r6
{
   11b0e:	4608      	mov	r0, r1
	struct ticker_instance *instance = &_instance[instance_index];
   11b10:	eb04 0184 	add.w	r1, r4, r4, lsl #2
   11b14:	eb04 0441 	add.w	r4, r4, r1, lsl #1
	user = &instance->users[user_id];
   11b18:	6869      	ldr	r1, [r5, #4]
   11b1a:	eb01 07c0 	add.w	r7, r1, r0, lsl #3
	struct ticker_instance *instance = &_instance[instance_index];
   11b1e:	eb06 0684 	add.w	r6, r6, r4, lsl #2
	last = user->last + 1;
   11b22:	f897 e003 	ldrb.w	lr, [r7, #3]
	if (last >= user->count_user_op) {
   11b26:	f811 4030 	ldrb.w	r4, [r1, r0, lsl #3]
	if (last == user->first) {
   11b2a:	7879      	ldrb	r1, [r7, #1]
	last = user->last + 1;
   11b2c:	f10e 0c01 	add.w	ip, lr, #1
   11b30:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11b34:	4564      	cmp	r4, ip
   11b36:	bf98      	it	ls
   11b38:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11b3c:	4561      	cmp	r1, ip
   11b3e:	d02e      	beq.n	11b9e <ticker_start_ext+0xa2>
	user_op = &user->user_op[user->last];
   11b40:	6879      	ldr	r1, [r7, #4]
   11b42:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   11b46:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   11b4a:	eb01 048e 	add.w	r4, r1, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_START;
   11b4e:	f04f 0904 	mov.w	r9, #4
   11b52:	f801 902e 	strb.w	r9, [r1, lr, lsl #2]
	user_op->params.start.ticks_at_start = ticks_anchor;
   11b56:	6063      	str	r3, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   11b58:	9b08      	ldr	r3, [sp, #32]
   11b5a:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   11b5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11b5e:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   11b60:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11b62:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   11b64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11b66:	61a3      	str	r3, [r4, #24]
	user_op->params.start.ext_data = ext_data;
   11b68:	9b11      	ldr	r3, [sp, #68]	; 0x44
   11b6a:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->params.start.fp_timeout_func = fp_timeout_func;
   11b6c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   11b6e:	61e3      	str	r3, [r4, #28]
	user_op->params.start.context = context;
   11b70:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   11b72:	6223      	str	r3, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   11b74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11b76:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   11b78:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11b7a:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11b7c:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11b7e:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11b80:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.start.lazy = lazy;
   11b82:	f8a4 8014 	strh.w	r8, [r4, #20]
	user->last = last;
   11b86:	f887 c003 	strb.w	ip, [r7, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11b8a:	e9d5 3508 	ldrd	r3, r5, [r5, #32]
   11b8e:	4798      	blx	r3
   11b90:	4633      	mov	r3, r6
   11b92:	4649      	mov	r1, r9
   11b94:	2200      	movs	r2, #0
   11b96:	47a8      	blx	r5
	return user_op->status;
   11b98:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11b9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   11b9e:	2001      	movs	r0, #1
}
   11ba0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   11ba4:	2000d9b0 	.word	0x2000d9b0

00011ba8 <ticker_start>:
{
   11ba8:	b510      	push	{r4, lr}
   11baa:	b08a      	sub	sp, #40	; 0x28
   11bac:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bae:	9400      	str	r4, [sp, #0]
{
   11bb0:	9c0d      	ldr	r4, [sp, #52]	; 0x34
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bb2:	9401      	str	r4, [sp, #4]
{
   11bb4:	9c0e      	ldr	r4, [sp, #56]	; 0x38
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bb6:	9402      	str	r4, [sp, #8]
{
   11bb8:	f8bd 403c 	ldrh.w	r4, [sp, #60]	; 0x3c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bbc:	9403      	str	r4, [sp, #12]
{
   11bbe:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bc0:	9404      	str	r4, [sp, #16]
{
   11bc2:	9c11      	ldr	r4, [sp, #68]	; 0x44
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bc4:	9405      	str	r4, [sp, #20]
{
   11bc6:	9c12      	ldr	r4, [sp, #72]	; 0x48
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bc8:	9406      	str	r4, [sp, #24]
{
   11bca:	9c13      	ldr	r4, [sp, #76]	; 0x4c
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bcc:	9407      	str	r4, [sp, #28]
{
   11bce:	9c14      	ldr	r4, [sp, #80]	; 0x50
	return ticker_start_ext(instance_index, user_id, ticker_id,
   11bd0:	9408      	str	r4, [sp, #32]
   11bd2:	2400      	movs	r4, #0
   11bd4:	9409      	str	r4, [sp, #36]	; 0x24
   11bd6:	f7ff ff91 	bl	11afc <ticker_start_ext>
}
   11bda:	b00a      	add	sp, #40	; 0x28
   11bdc:	bd10      	pop	{r4, pc}
   11bde:	bf00      	nop

00011be0 <ticker_update_ext>:
{
   11be0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11be4:	4d28      	ldr	r5, [pc, #160]	; (11c88 <ticker_update_ext+0xa8>)
{
   11be6:	f8bd 7034 	ldrh.w	r7, [sp, #52]	; 0x34
   11bea:	f89d 8038 	ldrb.w	r8, [sp, #56]	; 0x38
   11bee:	4604      	mov	r4, r0
   11bf0:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11bf2:	212c      	movs	r1, #44	; 0x2c
   11bf4:	fb01 5104 	mla	r1, r1, r4, r5
	struct ticker_instance *instance = &_instance[instance_index];
   11bf8:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   11bfc:	eb04 0446 	add.w	r4, r4, r6, lsl #1
   11c00:	eb05 0584 	add.w	r5, r5, r4, lsl #2
	user = &instance->users[user_id];
   11c04:	684c      	ldr	r4, [r1, #4]
   11c06:	eb04 06c0 	add.w	r6, r4, r0, lsl #3
	if (last >= user->count_user_op) {
   11c0a:	f814 9030 	ldrb.w	r9, [r4, r0, lsl #3]
	last = user->last + 1;
   11c0e:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11c12:	7874      	ldrb	r4, [r6, #1]
	last = user->last + 1;
   11c14:	f10e 0c01 	add.w	ip, lr, #1
   11c18:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11c1c:	45e1      	cmp	r9, ip
   11c1e:	bf98      	it	ls
   11c20:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11c24:	4564      	cmp	r4, ip
{
   11c26:	f89d 9044 	ldrb.w	r9, [sp, #68]	; 0x44
	if (last == user->first) {
   11c2a:	d02a      	beq.n	11c82 <ticker_update_ext+0xa2>
	user_op = &user->user_op[user->last];
   11c2c:	f8d6 a004 	ldr.w	sl, [r6, #4]
   11c30:	eb0e 044e 	add.w	r4, lr, lr, lsl #1
   11c34:	eb0e 0e84 	add.w	lr, lr, r4, lsl #2
   11c38:	eb0a 048e 	add.w	r4, sl, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   11c3c:	f04f 0b05 	mov.w	fp, #5
   11c40:	f80a b02e 	strb.w	fp, [sl, lr, lsl #2]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   11c44:	6063      	str	r3, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   11c46:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11c48:	60a3      	str	r3, [r4, #8]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   11c4a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   11c4c:	60e3      	str	r3, [r4, #12]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   11c4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   11c50:	6123      	str	r3, [r4, #16]
	user_op->fp_op_func = fp_op_func;
   11c52:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   11c54:	62e3      	str	r3, [r4, #44]	; 0x2c
	user_op->op_context = op_context;
   11c56:	9b10      	ldr	r3, [sp, #64]	; 0x40
   11c58:	6323      	str	r3, [r4, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11c5a:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11c5c:	7062      	strb	r2, [r4, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11c5e:	62a3      	str	r3, [r4, #40]	; 0x28
	user_op->params.update.lazy = lazy;
   11c60:	82a7      	strh	r7, [r4, #20]
	user_op->params.update.force = force;
   11c62:	f884 8016 	strb.w	r8, [r4, #22]
	user_op->params.update.must_expire = must_expire;
   11c66:	f884 9017 	strb.w	r9, [r4, #23]
	user->last = last;
   11c6a:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11c6e:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11c72:	4798      	blx	r3
   11c74:	462b      	mov	r3, r5
   11c76:	2200      	movs	r2, #0
   11c78:	2104      	movs	r1, #4
   11c7a:	47b0      	blx	r6
	return user_op->status;
   11c7c:	6aa0      	ldr	r0, [r4, #40]	; 0x28
}
   11c7e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return TICKER_STATUS_FAILURE;
   11c82:	2001      	movs	r0, #1
}
   11c84:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   11c88:	2000d9b0 	.word	0x2000d9b0

00011c8c <ticker_update>:
{
   11c8c:	b510      	push	{r4, lr}
   11c8e:	b088      	sub	sp, #32
   11c90:	9c0a      	ldr	r4, [sp, #40]	; 0x28
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11c92:	9400      	str	r4, [sp, #0]
{
   11c94:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11c96:	9401      	str	r4, [sp, #4]
{
   11c98:	9c0c      	ldr	r4, [sp, #48]	; 0x30
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11c9a:	9402      	str	r4, [sp, #8]
{
   11c9c:	f8bd 4034 	ldrh.w	r4, [sp, #52]	; 0x34
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11ca0:	9403      	str	r4, [sp, #12]
{
   11ca2:	f89d 4038 	ldrb.w	r4, [sp, #56]	; 0x38
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11ca6:	9404      	str	r4, [sp, #16]
{
   11ca8:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11caa:	9405      	str	r4, [sp, #20]
{
   11cac:	9c10      	ldr	r4, [sp, #64]	; 0x40
	return ticker_update_ext(instance_index, user_id, ticker_id,
   11cae:	9406      	str	r4, [sp, #24]
   11cb0:	2400      	movs	r4, #0
   11cb2:	9407      	str	r4, [sp, #28]
   11cb4:	f7ff ff94 	bl	11be0 <ticker_update_ext>
}
   11cb8:	b008      	add	sp, #32
   11cba:	bd10      	pop	{r4, pc}

00011cbc <ticker_stop>:
{
   11cbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
   11cc0:	4c1e      	ldr	r4, [pc, #120]	; (11d3c <ticker_stop+0x80>)
{
   11cc2:	4684      	mov	ip, r0
   11cc4:	4608      	mov	r0, r1
	user = &instance->users[user_id];
   11cc6:	212c      	movs	r1, #44	; 0x2c
   11cc8:	fb01 410c 	mla	r1, r1, ip, r4
	struct ticker_instance *instance = &_instance[instance_index];
   11ccc:	eb0c 058c 	add.w	r5, ip, ip, lsl #2
   11cd0:	eb0c 0c45 	add.w	ip, ip, r5, lsl #1
	user = &instance->users[user_id];
   11cd4:	684d      	ldr	r5, [r1, #4]
   11cd6:	eb05 06c0 	add.w	r6, r5, r0, lsl #3
	if (last >= user->count_user_op) {
   11cda:	f815 7030 	ldrb.w	r7, [r5, r0, lsl #3]
	last = user->last + 1;
   11cde:	f896 e003 	ldrb.w	lr, [r6, #3]
	if (last == user->first) {
   11ce2:	7875      	ldrb	r5, [r6, #1]
	struct ticker_instance *instance = &_instance[instance_index];
   11ce4:	eb04 048c 	add.w	r4, r4, ip, lsl #2
	last = user->last + 1;
   11ce8:	f10e 0c01 	add.w	ip, lr, #1
   11cec:	fa5f fc8c 	uxtb.w	ip, ip
		last = 0U;
   11cf0:	4567      	cmp	r7, ip
   11cf2:	bf98      	it	ls
   11cf4:	f04f 0c00 	movls.w	ip, #0
	if (last == user->first) {
   11cf8:	4565      	cmp	r5, ip
   11cfa:	d01c      	beq.n	11d36 <ticker_stop+0x7a>
	user_op = &user->user_op[user->last];
   11cfc:	6877      	ldr	r7, [r6, #4]
   11cfe:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
   11d02:	eb0e 0e85 	add.w	lr, lr, r5, lsl #2
   11d06:	eb07 058e 	add.w	r5, r7, lr, lsl #2
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   11d0a:	f04f 0806 	mov.w	r8, #6
   11d0e:	f807 802e 	strb.w	r8, [r7, lr, lsl #2]
	user_op->fp_op_func = fp_op_func;
   11d12:	62eb      	str	r3, [r5, #44]	; 0x2c
	user_op->op_context = op_context;
   11d14:	9b06      	ldr	r3, [sp, #24]
   11d16:	632b      	str	r3, [r5, #48]	; 0x30
	user_op->status = TICKER_STATUS_BUSY;
   11d18:	2302      	movs	r3, #2
	user_op->id = ticker_id;
   11d1a:	706a      	strb	r2, [r5, #1]
	user_op->status = TICKER_STATUS_BUSY;
   11d1c:	62ab      	str	r3, [r5, #40]	; 0x28
	user->last = last;
   11d1e:	f886 c003 	strb.w	ip, [r6, #3]
	instance->sched_cb(instance->caller_id_get_cb(user_id),
   11d22:	e9d1 3608 	ldrd	r3, r6, [r1, #32]
   11d26:	4798      	blx	r3
   11d28:	4623      	mov	r3, r4
   11d2a:	2200      	movs	r2, #0
   11d2c:	2104      	movs	r1, #4
   11d2e:	47b0      	blx	r6
	return user_op->status;
   11d30:	6aa8      	ldr	r0, [r5, #40]	; 0x28
}
   11d32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11d36:	2001      	movs	r0, #1
}
   11d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   11d3c:	2000d9b0 	.word	0x2000d9b0

00011d40 <ticker_ticks_now_get>:
	return cntr_cnt_get();
   11d40:	f00a bd26 	b.w	1c790 <cntr_cnt_get>

00011d44 <ticker_ticks_diff_get>:
	return ((ticks_now - ticks_old) & HAL_TICKER_CNTR_MASK);
   11d44:	1a40      	subs	r0, r0, r1
}
   11d46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   11d4a:	4770      	bx	lr

00011d4c <ll_addr_get>:
static uint8_t pub_addr[BDADDR_SIZE];
static uint8_t rnd_addr[BDADDR_SIZE];

uint8_t *ll_addr_get(uint8_t addr_type, uint8_t *bdaddr)
{
	if (addr_type > 1) {
   11d4c:	2801      	cmp	r0, #1
{
   11d4e:	b508      	push	{r3, lr}
   11d50:	4603      	mov	r3, r0
	if (addr_type > 1) {
   11d52:	d811      	bhi.n	11d78 <ll_addr_get+0x2c>
		return NULL;
	}

	if (addr_type) {
   11d54:	4608      	mov	r0, r1
   11d56:	b943      	cbnz	r3, 11d6a <ll_addr_get+0x1e>
		}

		return rnd_addr;
	}

	if (bdaddr) {
   11d58:	b129      	cbz	r1, 11d66 <ll_addr_get+0x1a>
		memcpy(bdaddr, pub_addr, BDADDR_SIZE);
   11d5a:	4909      	ldr	r1, [pc, #36]	; (11d80 <ll_addr_get+0x34>)
   11d5c:	2206      	movs	r2, #6
   11d5e:	f012 fb83 	bl	24468 <memcpy>
	}

	return pub_addr;
   11d62:	4807      	ldr	r0, [pc, #28]	; (11d80 <ll_addr_get+0x34>)
}
   11d64:	bd08      	pop	{r3, pc}
	return pub_addr;
   11d66:	4806      	ldr	r0, [pc, #24]	; (11d80 <ll_addr_get+0x34>)
}
   11d68:	bd08      	pop	{r3, pc}
		if (bdaddr) {
   11d6a:	b139      	cbz	r1, 11d7c <ll_addr_get+0x30>
			memcpy(bdaddr, rnd_addr, BDADDR_SIZE);
   11d6c:	4905      	ldr	r1, [pc, #20]	; (11d84 <ll_addr_get+0x38>)
   11d6e:	2206      	movs	r2, #6
   11d70:	f012 fb7a 	bl	24468 <memcpy>
		return rnd_addr;
   11d74:	4803      	ldr	r0, [pc, #12]	; (11d84 <ll_addr_get+0x38>)
}
   11d76:	bd08      	pop	{r3, pc}
		return NULL;
   11d78:	2000      	movs	r0, #0
}
   11d7a:	bd08      	pop	{r3, pc}
		return rnd_addr;
   11d7c:	4801      	ldr	r0, [pc, #4]	; (11d84 <ll_addr_get+0x38>)
}
   11d7e:	bd08      	pop	{r3, pc}
   11d80:	2000d9dc 	.word	0x2000d9dc
   11d84:	2000d9e4 	.word	0x2000d9e4

00011d88 <ll_addr_set>:

uint8_t ll_addr_set(uint8_t addr_type, uint8_t const *const bdaddr)
{
   11d88:	b570      	push	{r4, r5, r6, lr}
   11d8a:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BROADCASTER)) {
#if defined(CONFIG_BT_CTLR_ADV_EXT)
		if (ull_adv_is_enabled(0) && !ll_adv_cmds_is_ext()) {
#else /* !CONFIG_BT_CTLR_ADV_EXT */
		if (ull_adv_is_enabled(0)) {
   11d8c:	2000      	movs	r0, #0
{
   11d8e:	460e      	mov	r6, r1
		if (ull_adv_is_enabled(0)) {
   11d90:	f003 f8fc 	bl	14f8c <ull_adv_is_enabled>
   11d94:	b978      	cbnz	r0, 11db6 <ll_addr_set+0x2e>
	if (IS_ENABLED(CONFIG_BT_OBSERVER) &&
	    (ull_scan_is_enabled(0) & (BIT(1) | BIT(2)))) {
		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	if (addr_type) {
   11d96:	b13c      	cbz	r4, 11da8 <ll_addr_set+0x20>
   11d98:	4605      	mov	r5, r0
		memcpy(rnd_addr, bdaddr, BDADDR_SIZE);
   11d9a:	2206      	movs	r2, #6
   11d9c:	4631      	mov	r1, r6
   11d9e:	4807      	ldr	r0, [pc, #28]	; (11dbc <ll_addr_set+0x34>)
   11da0:	f012 fb62 	bl	24468 <memcpy>
	} else {
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
	}

	return 0;
   11da4:	4628      	mov	r0, r5
}
   11da6:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(pub_addr, bdaddr, BDADDR_SIZE);
   11da8:	2206      	movs	r2, #6
   11daa:	4631      	mov	r1, r6
   11dac:	4804      	ldr	r0, [pc, #16]	; (11dc0 <ll_addr_set+0x38>)
   11dae:	f012 fb5b 	bl	24468 <memcpy>
	return 0;
   11db2:	4620      	mov	r0, r4
}
   11db4:	bd70      	pop	{r4, r5, r6, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   11db6:	200c      	movs	r0, #12
}
   11db8:	bd70      	pop	{r4, r5, r6, pc}
   11dba:	bf00      	nop
   11dbc:	2000d9e4 	.word	0x2000d9e4
   11dc0:	2000d9dc 	.word	0x2000d9dc

00011dc4 <ll_tx_pwr_lvl_get>:
#include "ull_conn_internal.h"

uint8_t ll_tx_pwr_lvl_get(uint8_t handle_type,
		       uint16_t handle, uint8_t type, int8_t *tx_pwr_lvl)
{
	switch (handle_type) {
   11dc4:	2802      	cmp	r0, #2
   11dc6:	d001      	beq.n	11dcc <ll_tx_pwr_lvl_get+0x8>
			}
			break;
		}
#endif /* CONFIG_BT_CONN */
		default: {
			return BT_HCI_ERR_UNKNOWN_CMD;
   11dc8:	2001      	movs	r0, #1
		}
	}

	return BT_HCI_ERR_SUCCESS;
}
   11dca:	4770      	bx	lr
{
   11dcc:	b538      	push	{r3, r4, r5, lr}
   11dce:	4604      	mov	r4, r0
			conn = ll_connected_get(handle);
   11dd0:	4608      	mov	r0, r1
   11dd2:	461d      	mov	r5, r3
   11dd4:	f003 fea2 	bl	15b1c <ll_connected_get>
			if (!conn) {
   11dd8:	b110      	cbz	r0, 11de0 <ll_tx_pwr_lvl_get+0x1c>
				*tx_pwr_lvl = RADIO_TXP_DEFAULT;
   11dda:	2000      	movs	r0, #0
   11ddc:	7028      	strb	r0, [r5, #0]
}
   11dde:	bd38      	pop	{r3, r4, r5, pc}
				return BT_HCI_ERR_UNKNOWN_CONN_ID;
   11de0:	4620      	mov	r0, r4
}
   11de2:	bd38      	pop	{r3, r4, r5, pc}

00011de4 <ll_tx_pwr_get>:
{
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	*min = lll_radio_tx_pwr_min_get();
	*max = lll_radio_tx_pwr_max_get();
#else
	*min = RADIO_TXP_DEFAULT;
   11de4:	2300      	movs	r3, #0
   11de6:	7003      	strb	r3, [r0, #0]
	*max = RADIO_TXP_DEFAULT;
   11de8:	700b      	strb	r3, [r1, #0]
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */
}
   11dea:	4770      	bx	lr

00011dec <hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int hci_driver_init(const struct device *unused)
{
   11dec:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
   11dee:	4802      	ldr	r0, [pc, #8]	; (11df8 <hci_driver_init+0xc>)
   11df0:	f7f8 fb88 	bl	a504 <bt_hci_driver_register>

	return 0;
}
   11df4:	2000      	movs	r0, #0
   11df6:	bd08      	pop	{r3, pc}
   11df8:	000284f4 	.word	0x000284f4

00011dfc <hci_driver_send>:
{
   11dfc:	b530      	push	{r4, r5, lr}
	if (!buf->len) {
   11dfe:	8983      	ldrh	r3, [r0, #12]
{
   11e00:	b083      	sub	sp, #12
	if (!buf->len) {
   11e02:	2b00      	cmp	r3, #0
   11e04:	d03a      	beq.n	11e7c <hci_driver_send+0x80>
	return (enum bt_buf_type)((struct bt_buf_data *)net_buf_user_data(buf))
   11e06:	7d03      	ldrb	r3, [r0, #20]
	switch (type) {
   11e08:	4604      	mov	r4, r0
   11e0a:	b31b      	cbz	r3, 11e54 <hci_driver_send+0x58>
   11e0c:	2b02      	cmp	r3, #2
   11e0e:	d00f      	beq.n	11e30 <hci_driver_send+0x34>
   11e10:	4921      	ldr	r1, [pc, #132]	; (11e98 <hci_driver_send+0x9c>)
   11e12:	4a22      	ldr	r2, [pc, #136]	; (11e9c <hci_driver_send+0xa0>)
		BT_ERR("Unknown HCI type %u", type);
   11e14:	4822      	ldr	r0, [pc, #136]	; (11ea0 <hci_driver_send+0xa4>)
   11e16:	1a52      	subs	r2, r2, r1
   11e18:	08d2      	lsrs	r2, r2, #3
   11e1a:	0192      	lsls	r2, r2, #6
   11e1c:	f042 0201 	orr.w	r2, r2, #1
   11e20:	4619      	mov	r1, r3
   11e22:	f010 fb22 	bl	2246a <log_1>
		return -EINVAL;
   11e26:	f06f 0515 	mvn.w	r5, #21
}
   11e2a:	4628      	mov	r0, r5
   11e2c:	b003      	add	sp, #12
   11e2e:	bd30      	pop	{r4, r5, pc}
	err = hci_acl_handle(buf, &evt);
   11e30:	a901      	add	r1, sp, #4
   11e32:	f000 ff3f 	bl	12cb4 <hci_acl_handle>
	if (evt) {
   11e36:	9b01      	ldr	r3, [sp, #4]
	err = hci_acl_handle(buf, &evt);
   11e38:	4605      	mov	r5, r0
	if (evt) {
   11e3a:	b113      	cbz	r3, 11e42 <hci_driver_send+0x46>
		bt_recv_prio(evt);
   11e3c:	4618      	mov	r0, r3
   11e3e:	f7f8 fb43 	bl	a4c8 <bt_recv_prio>
	if (!err) {
   11e42:	2d00      	cmp	r5, #0
   11e44:	d1f1      	bne.n	11e2a <hci_driver_send+0x2e>
		net_buf_unref(buf);
   11e46:	4620      	mov	r0, r4
   11e48:	f00b fc30 	bl	1d6ac <net_buf_unref>
   11e4c:	2500      	movs	r5, #0
}
   11e4e:	4628      	mov	r0, r5
   11e50:	b003      	add	sp, #12
   11e52:	bd30      	pop	{r4, r5, pc}
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11e54:	a901      	add	r1, sp, #4
	struct node_rx_pdu *node_rx = NULL;
   11e56:	9301      	str	r3, [sp, #4]
	evt = hci_cmd_handle(buf, (void **) &node_rx);
   11e58:	f000 fa54 	bl	12304 <hci_cmd_handle>
	if (evt) {
   11e5c:	2800      	cmp	r0, #0
   11e5e:	d0f2      	beq.n	11e46 <hci_driver_send+0x4a>
		bt_recv_prio(evt);
   11e60:	f7f8 fb32 	bl	a4c8 <bt_recv_prio>
		if (node_rx) {
   11e64:	9d01      	ldr	r5, [sp, #4]
   11e66:	2d00      	cmp	r5, #0
   11e68:	d0ed      	beq.n	11e46 <hci_driver_send+0x4a>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11e6a:	4628      	mov	r0, r5
   11e6c:	f001 fb1c 	bl	134a8 <hci_get_class>
   11e70:	7168      	strb	r0, [r5, #5]
			k_fifo_put(&recv_fifo, node_rx);
   11e72:	9901      	ldr	r1, [sp, #4]
   11e74:	480b      	ldr	r0, [pc, #44]	; (11ea4 <hci_driver_send+0xa8>)
   11e76:	f014 ffe6 	bl	26e46 <k_queue_append>
	if (!err) {
   11e7a:	e7e4      	b.n	11e46 <hci_driver_send+0x4a>
   11e7c:	4b06      	ldr	r3, [pc, #24]	; (11e98 <hci_driver_send+0x9c>)
   11e7e:	4907      	ldr	r1, [pc, #28]	; (11e9c <hci_driver_send+0xa0>)
		BT_ERR("Empty HCI packet");
   11e80:	4809      	ldr	r0, [pc, #36]	; (11ea8 <hci_driver_send+0xac>)
   11e82:	1ac9      	subs	r1, r1, r3
   11e84:	08c9      	lsrs	r1, r1, #3
   11e86:	0189      	lsls	r1, r1, #6
   11e88:	f041 0101 	orr.w	r1, r1, #1
   11e8c:	f010 fae0 	bl	22450 <log_0>
		return -EINVAL;
   11e90:	f06f 0515 	mvn.w	r5, #21
   11e94:	e7c9      	b.n	11e2a <hci_driver_send+0x2e>
   11e96:	bf00      	nop
   11e98:	000278c0 	.word	0x000278c0
   11e9c:	00027908 	.word	0x00027908
   11ea0:	00028448 	.word	0x00028448
   11ea4:	2000a040 	.word	0x2000a040
   11ea8:	00028434 	.word	0x00028434

00011eac <recv_thread>:
{
   11eac:	b5f0      	push	{r4, r5, r6, r7, lr}
	return z_impl_k_queue_get(queue, timeout);
   11eae:	4d37      	ldr	r5, [pc, #220]	; (11f8c <recv_thread+0xe0>)
		LL_ASSERT(0);
   11eb0:	4f37      	ldr	r7, [pc, #220]	; (11f90 <recv_thread+0xe4>)
   11eb2:	4e38      	ldr	r6, [pc, #224]	; (11f94 <recv_thread+0xe8>)
{
   11eb4:	b083      	sub	sp, #12
   11eb6:	e015      	b.n	11ee4 <recv_thread+0x38>
	switch (class) {
   11eb8:	2b00      	cmp	r3, #0
   11eba:	d13c      	bne.n	11f36 <recv_thread+0x8a>
		LL_ASSERT(0);
   11ebc:	4836      	ldr	r0, [pc, #216]	; (11f98 <recv_thread+0xec>)
   11ebe:	23cf      	movs	r3, #207	; 0xcf
   11ec0:	463a      	mov	r2, r7
   11ec2:	4631      	mov	r1, r6
   11ec4:	f00f fe2e 	bl	21b24 <printk>
   11ec8:	4040      	eors	r0, r0
   11eca:	f380 8811 	msr	BASEPRI, r0
   11ece:	f04f 0003 	mov.w	r0, #3
   11ed2:	df02      	svc	2
	node_rx->hdr.next = NULL;
   11ed4:	9b01      	ldr	r3, [sp, #4]
   11ed6:	2200      	movs	r2, #0
   11ed8:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11eda:	a801      	add	r0, sp, #4
   11edc:	f002 f94c 	bl	14178 <ll_rx_mem_release>
	z_impl_k_yield();
   11ee0:	f00e fa18 	bl	20314 <z_impl_k_yield>
	return z_impl_k_queue_get(queue, timeout);
   11ee4:	f04f 32ff 	mov.w	r2, #4294967295
   11ee8:	f04f 33ff 	mov.w	r3, #4294967295
   11eec:	4628      	mov	r0, r5
   11eee:	f00d fefd 	bl	1fcec <z_impl_k_queue_get>
		if (node_rx && !buf) {
   11ef2:	2800      	cmp	r0, #0
   11ef4:	d0f4      	beq.n	11ee0 <recv_thread+0x34>
	uint8_t class = node_rx->hdr.user_meta;
   11ef6:	7943      	ldrb	r3, [r0, #5]
	buf = encode_node(node_rx, class);
   11ef8:	9001      	str	r0, [sp, #4]
	switch (class) {
   11efa:	2b04      	cmp	r3, #4
   11efc:	d9dc      	bls.n	11eb8 <recv_thread+0xc>
   11efe:	2b05      	cmp	r3, #5
   11f00:	d1dc      	bne.n	11ebc <recv_thread+0x10>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
   11f02:	f04f 32ff 	mov.w	r2, #4294967295
   11f06:	f04f 33ff 	mov.w	r3, #4294967295
   11f0a:	2003      	movs	r0, #3
   11f0c:	f7f6 fcca 	bl	88a4 <bt_buf_get_rx>
   11f10:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
   11f12:	4621      	mov	r1, r4
   11f14:	9801      	ldr	r0, [sp, #4]
   11f16:	f000 ff8b 	bl	12e30 <hci_acl_encode>
	node_rx->hdr.next = NULL;
   11f1a:	9b01      	ldr	r3, [sp, #4]
   11f1c:	2200      	movs	r2, #0
   11f1e:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11f20:	a801      	add	r0, sp, #4
   11f22:	f002 f929 	bl	14178 <ll_rx_mem_release>
		if (buf) {
   11f26:	2c00      	cmp	r4, #0
   11f28:	d0da      	beq.n	11ee0 <recv_thread+0x34>
			if (buf->len) {
   11f2a:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11f2c:	4620      	mov	r0, r4
			if (buf->len) {
   11f2e:	b1db      	cbz	r3, 11f68 <recv_thread+0xbc>
				bt_recv(buf);
   11f30:	f7f8 fa26 	bl	a380 <bt_recv>
   11f34:	e7d4      	b.n	11ee0 <recv_thread+0x34>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
   11f36:	2b02      	cmp	r3, #2
   11f38:	d019      	beq.n	11f6e <recv_thread+0xc2>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   11f3a:	f04f 32ff 	mov.w	r2, #4294967295
   11f3e:	f04f 33ff 	mov.w	r3, #4294967295
   11f42:	2001      	movs	r0, #1
   11f44:	f7f6 fcae 	bl	88a4 <bt_buf_get_rx>
   11f48:	4604      	mov	r4, r0
		if (buf) {
   11f4a:	b1cc      	cbz	r4, 11f80 <recv_thread+0xd4>
			hci_evt_encode(node_rx, buf);
   11f4c:	9801      	ldr	r0, [sp, #4]
   11f4e:	4621      	mov	r1, r4
   11f50:	f000 ffa8 	bl	12ea4 <hci_evt_encode>
	node_rx->hdr.next = NULL;
   11f54:	9b01      	ldr	r3, [sp, #4]
   11f56:	2200      	movs	r2, #0
   11f58:	601a      	str	r2, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11f5a:	a801      	add	r0, sp, #4
   11f5c:	f002 f90c 	bl	14178 <ll_rx_mem_release>
			if (buf->len) {
   11f60:	89a3      	ldrh	r3, [r4, #12]
				bt_recv(buf);
   11f62:	4620      	mov	r0, r4
			if (buf->len) {
   11f64:	2b00      	cmp	r3, #0
   11f66:	d1e3      	bne.n	11f30 <recv_thread+0x84>
				net_buf_unref(buf);
   11f68:	f00b fba0 	bl	1d6ac <net_buf_unref>
   11f6c:	e7b8      	b.n	11ee0 <recv_thread+0x34>
			buf = bt_buf_get_evt(BT_HCI_EVT_UNKNOWN, true,
   11f6e:	2200      	movs	r2, #0
   11f70:	2300      	movs	r3, #0
   11f72:	2101      	movs	r1, #1
   11f74:	2000      	movs	r0, #0
   11f76:	f7f6 fccb 	bl	8910 <bt_buf_get_evt>
   11f7a:	4604      	mov	r4, r0
		if (buf) {
   11f7c:	2c00      	cmp	r4, #0
   11f7e:	d1e5      	bne.n	11f4c <recv_thread+0xa0>
	node_rx->hdr.next = NULL;
   11f80:	9b01      	ldr	r3, [sp, #4]
	ll_rx_mem_release((void **)&node_rx);
   11f82:	a801      	add	r0, sp, #4
	node_rx->hdr.next = NULL;
   11f84:	601c      	str	r4, [r3, #0]
	ll_rx_mem_release((void **)&node_rx);
   11f86:	f002 f8f7 	bl	14178 <ll_rx_mem_release>
		if (buf) {
   11f8a:	e7a9      	b.n	11ee0 <recv_thread+0x34>
   11f8c:	2000a040 	.word	0x2000a040
   11f90:	0002845c 	.word	0x0002845c
   11f94:	0002849c 	.word	0x0002849c
   11f98:	00028404 	.word	0x00028404

00011f9c <prio_recv_thread>:
{
   11f9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return z_impl_k_sem_take(sem, timeout);
   11fa0:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 12054 <prio_recv_thread+0xb8>
				k_fifo_put(&recv_fifo, node_rx);
   11fa4:	4f2c      	ldr	r7, [pc, #176]	; (12058 <prio_recv_thread+0xbc>)
{
   11fa6:	b082      	sub	sp, #8
   11fa8:	e00c      	b.n	11fc4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11faa:	f7f6 fcb1 	bl	8910 <bt_buf_get_evt>
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11fae:	4622      	mov	r2, r4
   11fb0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11fb4:	4604      	mov	r4, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
   11fb6:	f001 fa5f 	bl	13478 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
   11fba:	4620      	mov	r0, r4
   11fbc:	f7f8 fa84 	bl	a4c8 <bt_recv_prio>
	z_impl_k_yield();
   11fc0:	f00e f9a8 	bl	20314 <z_impl_k_yield>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11fc4:	f10d 0102 	add.w	r1, sp, #2
   11fc8:	a801      	add	r0, sp, #4
   11fca:	f001 ff21 	bl	13e10 <ll_rx_get>
   11fce:	4604      	mov	r4, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_NUM_COMPLETED_PACKETS,
   11fd0:	f04f 32ff 	mov.w	r2, #4294967295
   11fd4:	f04f 33ff 	mov.w	r3, #4294967295
   11fd8:	2100      	movs	r1, #0
   11fda:	2013      	movs	r0, #19
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   11fdc:	2c00      	cmp	r4, #0
   11fde:	d1e4      	bne.n	11faa <prio_recv_thread+0xe>
		if (node_rx) {
   11fe0:	9b01      	ldr	r3, [sp, #4]
   11fe2:	b193      	cbz	r3, 1200a <prio_recv_thread+0x6e>
			ll_rx_dequeue();
   11fe4:	f001 fffa 	bl	13fdc <ll_rx_dequeue>
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11fe8:	9e01      	ldr	r6, [sp, #4]
   11fea:	4630      	mov	r0, r6
   11fec:	f001 fa5c 	bl	134a8 <hci_get_class>
			buf = process_prio_evt(node_rx, &evt_flags);
   11ff0:	9d01      	ldr	r5, [sp, #4]
			node_rx->hdr.user_meta = hci_get_class(node_rx);
   11ff2:	7170      	strb	r0, [r6, #5]
	if (node_rx->hdr.user_meta == HCI_CLASS_EVT_CONNECTION) {
   11ff4:	796b      	ldrb	r3, [r5, #5]
   11ff6:	2b03      	cmp	r3, #3
   11ff8:	d102      	bne.n	12000 <prio_recv_thread+0x64>
		if (node_rx->hdr.type == NODE_RX_TYPE_TERMINATE) {
   11ffa:	792b      	ldrb	r3, [r5, #4]
   11ffc:	2b14      	cmp	r3, #20
   11ffe:	d00c      	beq.n	1201a <prio_recv_thread+0x7e>
				k_fifo_put(&recv_fifo, node_rx);
   12000:	4629      	mov	r1, r5
   12002:	4638      	mov	r0, r7
   12004:	f014 ff1f 	bl	26e46 <k_queue_append>
			continue;
   12008:	e7dc      	b.n	11fc4 <prio_recv_thread+0x28>
	return z_impl_k_sem_take(sem, timeout);
   1200a:	f04f 32ff 	mov.w	r2, #4294967295
   1200e:	f04f 33ff 	mov.w	r3, #4294967295
   12012:	4640      	mov	r0, r8
   12014:	f00e fa4c 	bl	204b0 <z_impl_k_sem_take>
		while ((num_cmplt = ll_rx_get((void *)&node_rx, &handle))) {
   12018:	e7d4      	b.n	11fc4 <prio_recv_thread+0x28>
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   1201a:	f04f 33ff 	mov.w	r3, #4294967295
   1201e:	4621      	mov	r1, r4
   12020:	f04f 32ff 	mov.w	r2, #4294967295
   12024:	2005      	movs	r0, #5
		handle = node_rx->hdr.handle;
   12026:	88ee      	ldrh	r6, [r5, #6]
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   12028:	f7f6 fc72 	bl	8910 <bt_buf_get_evt>
			hci_disconn_complete_encode(pdu_data, handle, buf);
   1202c:	4631      	mov	r1, r6
   1202e:	4602      	mov	r2, r0
			buf = bt_buf_get_evt(BT_HCI_EVT_DISCONN_COMPLETE, false,
   12030:	4604      	mov	r4, r0
			hci_disconn_complete_encode(pdu_data, handle, buf);
   12032:	f105 001c 	add.w	r0, r5, #28
   12036:	f000 fed3 	bl	12de0 <hci_disconn_complete_encode>
			hci_disconn_complete_process(handle);
   1203a:	4630      	mov	r0, r6
   1203c:	f000 fef0 	bl	12e20 <hci_disconn_complete_process>
				bt_recv_prio(buf);
   12040:	4620      	mov	r0, r4
			if (buf) {
   12042:	b124      	cbz	r4, 1204e <prio_recv_thread+0xb2>
				bt_recv_prio(buf);
   12044:	f7f8 fa40 	bl	a4c8 <bt_recv_prio>
					net_buf_unref(buf);
   12048:	4620      	mov	r0, r4
   1204a:	f00b fb2f 	bl	1d6ac <net_buf_unref>
				k_fifo_put(&recv_fifo, node_rx);
   1204e:	9d01      	ldr	r5, [sp, #4]
   12050:	e7d6      	b.n	12000 <prio_recv_thread+0x64>
   12052:	bf00      	nop
   12054:	2000a010 	.word	0x2000a010
   12058:	2000a040 	.word	0x2000a040

0001205c <hci_driver_open>:
{
   1205c:	b5d0      	push	{r4, r6, r7, lr}
	err = ll_init(&sem_prio_recv);
   1205e:	4821      	ldr	r0, [pc, #132]	; (120e4 <hci_driver_open+0x88>)
{
   12060:	b088      	sub	sp, #32
	err = ll_init(&sem_prio_recv);
   12062:	f001 fdd1 	bl	13c08 <ll_init>
	if (err) {
   12066:	4604      	mov	r4, r0
   12068:	bb70      	cbnz	r0, 120c8 <hci_driver_open+0x6c>
	hci_init(NULL);
   1206a:	f001 fa33 	bl	134d4 <hci_init>
	k_thread_create(&prio_recv_thread_data, prio_recv_thread_stack,
   1206e:	2600      	movs	r6, #0
   12070:	2700      	movs	r7, #0
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   12072:	f06f 0209 	mvn.w	r2, #9
   12076:	e9cd 2403 	strd	r2, r4, [sp, #12]
   1207a:	e9cd 6706 	strd	r6, r7, [sp, #24]
   1207e:	e9cd 4401 	strd	r4, r4, [sp, #4]
   12082:	4b19      	ldr	r3, [pc, #100]	; (120e8 <hci_driver_open+0x8c>)
   12084:	4919      	ldr	r1, [pc, #100]	; (120ec <hci_driver_open+0x90>)
   12086:	9400      	str	r4, [sp, #0]
   12088:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
   1208c:	4818      	ldr	r0, [pc, #96]	; (120f0 <hci_driver_open+0x94>)
   1208e:	f00e fa81 	bl	20594 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   12092:	4918      	ldr	r1, [pc, #96]	; (120f4 <hci_driver_open+0x98>)
   12094:	4816      	ldr	r0, [pc, #88]	; (120f0 <hci_driver_open+0x94>)
   12096:	f015 f82e 	bl	270f6 <z_impl_k_thread_name_set>
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   1209a:	f06f 0207 	mvn.w	r2, #7
   1209e:	e9cd 2403 	strd	r2, r4, [sp, #12]
   120a2:	e9cd 6706 	strd	r6, r7, [sp, #24]
   120a6:	e9cd 4401 	strd	r4, r4, [sp, #4]
   120aa:	4b13      	ldr	r3, [pc, #76]	; (120f8 <hci_driver_open+0x9c>)
   120ac:	4913      	ldr	r1, [pc, #76]	; (120fc <hci_driver_open+0xa0>)
   120ae:	9400      	str	r4, [sp, #0]
   120b0:	f640 0298 	movw	r2, #2200	; 0x898
   120b4:	4812      	ldr	r0, [pc, #72]	; (12100 <hci_driver_open+0xa4>)
   120b6:	f00e fa6d 	bl	20594 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   120ba:	4912      	ldr	r1, [pc, #72]	; (12104 <hci_driver_open+0xa8>)
   120bc:	4810      	ldr	r0, [pc, #64]	; (12100 <hci_driver_open+0xa4>)
   120be:	f015 f81a 	bl	270f6 <z_impl_k_thread_name_set>
}
   120c2:	4620      	mov	r0, r4
   120c4:	b008      	add	sp, #32
   120c6:	bdd0      	pop	{r4, r6, r7, pc}
   120c8:	4b0f      	ldr	r3, [pc, #60]	; (12108 <hci_driver_open+0xac>)
   120ca:	4a10      	ldr	r2, [pc, #64]	; (1210c <hci_driver_open+0xb0>)
		BT_ERR("LL initialization failed: %d", err);
   120cc:	4810      	ldr	r0, [pc, #64]	; (12110 <hci_driver_open+0xb4>)
   120ce:	1ad2      	subs	r2, r2, r3
   120d0:	08d2      	lsrs	r2, r2, #3
   120d2:	0192      	lsls	r2, r2, #6
   120d4:	f042 0201 	orr.w	r2, r2, #1
   120d8:	4621      	mov	r1, r4
   120da:	f010 f9c6 	bl	2246a <log_1>
}
   120de:	4620      	mov	r0, r4
   120e0:	b008      	add	sp, #32
   120e2:	bdd0      	pop	{r4, r6, r7, pc}
   120e4:	2000a010 	.word	0x2000a010
   120e8:	00011f9d 	.word	0x00011f9d
   120ec:	20010a40 	.word	0x20010a40
   120f0:	2000aa48 	.word	0x2000aa48
   120f4:	000284c0 	.word	0x000284c0
   120f8:	00011ead 	.word	0x00011ead
   120fc:	20010c20 	.word	0x20010c20
   12100:	2000aad0 	.word	0x2000aad0
   12104:	000284cc 	.word	0x000284cc
   12108:	000278c0 	.word	0x000278c0
   1210c:	00027908 	.word	0x00027908
   12110:	000284a0 	.word	0x000284a0

00012114 <le_remote_feat_complete>:
}
#endif /* CONFIG_BT_CTLR_LE_ENC */

static void le_remote_feat_complete(uint8_t status, struct pdu_data *pdu_data,
				    uint16_t handle, struct net_buf *buf)
{
   12114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_hci_evt_le_remote_feat_complete *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12116:	4c19      	ldr	r4, [pc, #100]	; (1217c <le_remote_feat_complete+0x68>)
   12118:	6864      	ldr	r4, [r4, #4]
   1211a:	00a4      	lsls	r4, r4, #2
   1211c:	d504      	bpl.n	12128 <le_remote_feat_complete+0x14>
   1211e:	4615      	mov	r5, r2
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
   12120:	4a17      	ldr	r2, [pc, #92]	; (12180 <le_remote_feat_complete+0x6c>)
   12122:	6812      	ldr	r2, [r2, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12124:	0712      	lsls	r2, r2, #28
   12126:	d400      	bmi.n	1212a <le_remote_feat_complete+0x16>
		       &pdu_data->llctrl.feature_rsp.features[0],
		       sizeof(sep->features));
	} else {
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
	}
}
   12128:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1212a:	f103 0408 	add.w	r4, r3, #8
   1212e:	4607      	mov	r7, r0
   12130:	460e      	mov	r6, r1
   12132:	4620      	mov	r0, r4
   12134:	2102      	movs	r1, #2
   12136:	f014 f9eb 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   1213a:	233e      	movs	r3, #62	; 0x3e
   1213c:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1213e:	230c      	movs	r3, #12
   12140:	7043      	strb	r3, [r0, #1]
   12142:	2101      	movs	r1, #1
   12144:	4620      	mov	r0, r4
   12146:	f014 f9e3 	bl	26510 <net_buf_simple_add>
   1214a:	4603      	mov	r3, r0
	me->subevent = subevt;
   1214c:	2204      	movs	r2, #4
   1214e:	701a      	strb	r2, [r3, #0]
   12150:	4620      	mov	r0, r4
   12152:	210b      	movs	r1, #11
   12154:	f014 f9dc 	bl	26510 <net_buf_simple_add>
		memcpy(&sep->features[0],
   12158:	2208      	movs	r2, #8
	sep->status = status;
   1215a:	7007      	strb	r7, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   1215c:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
   12160:	b92f      	cbnz	r7, 1216e <le_remote_feat_complete+0x5a>
		memcpy(&sep->features[0],
   12162:	1d31      	adds	r1, r6, #4
   12164:	3003      	adds	r0, #3
}
   12166:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		memcpy(&sep->features[0],
   1216a:	f012 b97d 	b.w	24468 <memcpy>
}
   1216e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		(void)memset(&sep->features[0], 0x00, sizeof(sep->features));
   12172:	2100      	movs	r1, #0
   12174:	3003      	adds	r0, #3
   12176:	f012 b9a2 	b.w	244be <memset>
   1217a:	bf00      	nop
   1217c:	200001b0 	.word	0x200001b0
   12180:	200001b8 	.word	0x200001b8

00012184 <hci_vendor_cmd_handle_common>:
{
   12184:	b5f0      	push	{r4, r5, r6, r7, lr}
   12186:	3801      	subs	r0, #1
   12188:	b087      	sub	sp, #28
   1218a:	4615      	mov	r5, r2
   1218c:	2809      	cmp	r0, #9
   1218e:	d806      	bhi.n	1219e <hci_vendor_cmd_handle_common+0x1a>
   12190:	e8df f000 	tbb	[pc, r0]
   12194:	05432609 	.word	0x05432609
   12198:	6b055705 	.word	0x6b055705
   1219c:	9f8a      	.short	0x9f8a
	return 0;
   1219e:	f06f 0015 	mvn.w	r0, #21
}
   121a2:	b007      	add	sp, #28
   121a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   121a6:	4b55      	ldr	r3, [pc, #340]	; (122fc <hci_vendor_cmd_handle_common+0x178>)
   121a8:	210d      	movs	r1, #13
   121aa:	8818      	ldrh	r0, [r3, #0]
   121ac:	f012 fc9f 	bl	24aee <bt_hci_cmd_complete_create>
   121b0:	210d      	movs	r1, #13
   121b2:	6028      	str	r0, [r5, #0]
   121b4:	3008      	adds	r0, #8
   121b6:	f014 f9ab 	bl	26510 <net_buf_simple_add>
   121ba:	4603      	mov	r3, r0
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   121bc:	2202      	movs	r2, #2
	rp->status = 0x00;
   121be:	2000      	movs	r0, #0
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   121c0:	2105      	movs	r1, #5
	rp->status = 0x00;
   121c2:	7018      	strb	r0, [r3, #0]
	rp->hw_platform = sys_cpu_to_le16(BT_HCI_VS_HW_PLAT);
   121c4:	705a      	strb	r2, [r3, #1]
   121c6:	7098      	strb	r0, [r3, #2]
	rp->hw_variant = sys_cpu_to_le16(BT_HCI_VS_HW_VAR);
   121c8:	70da      	strb	r2, [r3, #3]
   121ca:	7118      	strb	r0, [r3, #4]
	rp->fw_variant = 0U;
   121cc:	7158      	strb	r0, [r3, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
   121ce:	719a      	strb	r2, [r3, #6]
	rp->fw_revision = sys_cpu_to_le16(KERNEL_VERSION_MINOR);
   121d0:	71d9      	strb	r1, [r3, #7]
   121d2:	7218      	strb	r0, [r3, #8]
	rp->fw_build = sys_cpu_to_le32(KERNEL_PATCHLEVEL & 0xffff);
   121d4:	7258      	strb	r0, [r3, #9]
   121d6:	7298      	strb	r0, [r3, #10]
   121d8:	72d8      	strb	r0, [r3, #11]
   121da:	7318      	strb	r0, [r3, #12]
}
   121dc:	b007      	add	sp, #28
   121de:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   121e0:	4b46      	ldr	r3, [pc, #280]	; (122fc <hci_vendor_cmd_handle_common+0x178>)
   121e2:	2141      	movs	r1, #65	; 0x41
   121e4:	8818      	ldrh	r0, [r3, #0]
   121e6:	f012 fc82 	bl	24aee <bt_hci_cmd_complete_create>
   121ea:	2141      	movs	r1, #65	; 0x41
   121ec:	6028      	str	r0, [r5, #0]
   121ee:	3008      	adds	r0, #8
   121f0:	f014 f98e 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   121f4:	2400      	movs	r4, #0
   121f6:	4605      	mov	r5, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   121f8:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   121fa:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   121fe:	4621      	mov	r1, r4
   12200:	f012 f95d 	bl	244be <memset>
	rp->commands[0] |= BIT(5) | BIT(7);
   12204:	786a      	ldrb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12206:	78ab      	ldrb	r3, [r5, #2]
	rp->commands[0] |= BIT(5) | BIT(7);
   12208:	f062 0258 	orn	r2, r2, #88	; 0x58
	rp->commands[1] |= BIT(0) | BIT(1);
   1220c:	f043 0303 	orr.w	r3, r3, #3
	return 0;
   12210:	4620      	mov	r0, r4
	rp->commands[0] |= BIT(5) | BIT(7);
   12212:	706a      	strb	r2, [r5, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
   12214:	70ab      	strb	r3, [r5, #2]
}
   12216:	b007      	add	sp, #28
   12218:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1221a:	4b38      	ldr	r3, [pc, #224]	; (122fc <hci_vendor_cmd_handle_common+0x178>)
   1221c:	2109      	movs	r1, #9
   1221e:	8818      	ldrh	r0, [r3, #0]
   12220:	f012 fc65 	bl	24aee <bt_hci_cmd_complete_create>
   12224:	2109      	movs	r1, #9
   12226:	6028      	str	r0, [r5, #0]
   12228:	3008      	adds	r0, #8
   1222a:	f014 f971 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   1222e:	2400      	movs	r4, #0
   12230:	f800 4b01 	strb.w	r4, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12234:	2208      	movs	r2, #8
   12236:	4621      	mov	r1, r4
   12238:	f012 f941 	bl	244be <memset>
	return 0;
   1223c:	4620      	mov	r0, r4
}
   1223e:	b007      	add	sp, #28
   12240:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_addr_set(0, &cmd->bdaddr.val[0]);
   12242:	6889      	ldr	r1, [r1, #8]
   12244:	2000      	movs	r0, #0
   12246:	f7ff fd9f 	bl	11d88 <ll_addr_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1224a:	4b2c      	ldr	r3, [pc, #176]	; (122fc <hci_vendor_cmd_handle_common+0x178>)
   1224c:	2101      	movs	r1, #1
   1224e:	8818      	ldrh	r0, [r3, #0]
   12250:	f012 fc4d 	bl	24aee <bt_hci_cmd_complete_create>
   12254:	2101      	movs	r1, #1
   12256:	4604      	mov	r4, r0
   12258:	3008      	adds	r0, #8
   1225a:	f014 f959 	bl	26510 <net_buf_simple_add>
   1225e:	4603      	mov	r3, r0
	ccst->status = status;
   12260:	2000      	movs	r0, #0
   12262:	7018      	strb	r0, [r3, #0]
	*evt = cmd_complete_status(0x00);
   12264:	602c      	str	r4, [r5, #0]
}
   12266:	b007      	add	sp, #28
   12268:	bdf0      	pop	{r4, r5, r6, r7, pc}
	const char build_info[] = HCI_VS_BUILD_INFO;
   1226a:	4e25      	ldr	r6, [pc, #148]	; (12300 <hci_vendor_cmd_handle_common+0x17c>)
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1226c:	4f23      	ldr	r7, [pc, #140]	; (122fc <hci_vendor_cmd_handle_common+0x178>)
	const char build_info[] = HCI_VS_BUILD_INFO;
   1226e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   12270:	46ec      	mov	ip, sp
   12272:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   12276:	e896 0003 	ldmia.w	r6, {r0, r1}
   1227a:	f84c 0b04 	str.w	r0, [ip], #4
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   1227e:	8838      	ldrh	r0, [r7, #0]
	const char build_info[] = HCI_VS_BUILD_INFO;
   12280:	f88c 1000 	strb.w	r1, [ip]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12284:	2116      	movs	r1, #22
   12286:	f012 fc32 	bl	24aee <bt_hci_cmd_complete_create>
   1228a:	2116      	movs	r1, #22
   1228c:	6028      	str	r0, [r5, #0]
   1228e:	3008      	adds	r0, #8
   12290:	f014 f93e 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12294:	2400      	movs	r4, #0
   12296:	f800 4b01 	strb.w	r4, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
   1229a:	2215      	movs	r2, #21
   1229c:	4669      	mov	r1, sp
   1229e:	f012 f8e3 	bl	24468 <memcpy>
	return 0;
   122a2:	4620      	mov	r0, r4
}
   122a4:	b007      	add	sp, #28
   122a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   122a8:	4b14      	ldr	r3, [pc, #80]	; (122fc <hci_vendor_cmd_handle_common+0x178>)
   122aa:	2118      	movs	r1, #24
   122ac:	8818      	ldrh	r0, [r3, #0]
   122ae:	f012 fc1e 	bl	24aee <bt_hci_cmd_complete_create>
   122b2:	2118      	movs	r1, #24
   122b4:	6028      	str	r0, [r5, #0]
   122b6:	3008      	adds	r0, #8
   122b8:	f014 f92a 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   122bc:	2400      	movs	r4, #0
   122be:	4605      	mov	r5, r0
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   122c0:	2101      	movs	r1, #1
	rp->status = 0x00;
   122c2:	f800 4b02 	strb.w	r4, [r0], #2
	rp->num_addrs = hci_vendor_read_static_addr(rp->a, 1);
   122c6:	f00b f877 	bl	1d3b8 <hci_vendor_read_static_addr>
   122ca:	7068      	strb	r0, [r5, #1]
	return 0;
   122cc:	4620      	mov	r0, r4
}
   122ce:	b007      	add	sp, #28
   122d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   122d2:	4b0a      	ldr	r3, [pc, #40]	; (122fc <hci_vendor_cmd_handle_common+0x178>)
   122d4:	2121      	movs	r1, #33	; 0x21
   122d6:	8818      	ldrh	r0, [r3, #0]
   122d8:	f012 fc09 	bl	24aee <bt_hci_cmd_complete_create>
   122dc:	2121      	movs	r1, #33	; 0x21
   122de:	6028      	str	r0, [r5, #0]
   122e0:	3008      	adds	r0, #8
   122e2:	f014 f915 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   122e6:	4601      	mov	r1, r0
   122e8:	2400      	movs	r4, #0
   122ea:	f801 4b11 	strb.w	r4, [r1], #17
	hci_vendor_read_key_hierarchy_roots(rp->ir, rp->er);
   122ee:	3001      	adds	r0, #1
   122f0:	f00b f8d6 	bl	1d4a0 <hci_vendor_read_key_hierarchy_roots>
	return 0;
   122f4:	4620      	mov	r0, r4
}
   122f6:	b007      	add	sp, #28
   122f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   122fa:	bf00      	nop
   122fc:	2000ed74 	.word	0x2000ed74
   12300:	00028508 	.word	0x00028508

00012304 <hci_cmd_handle>:
{
   12304:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (cmd->len < sizeof(*chdr)) {
   12306:	8983      	ldrh	r3, [r0, #12]
{
   12308:	b08d      	sub	sp, #52	; 0x34
	struct net_buf *evt = NULL;
   1230a:	2400      	movs	r4, #0
	if (cmd->len < sizeof(*chdr)) {
   1230c:	2b02      	cmp	r3, #2
	struct net_buf *evt = NULL;
   1230e:	9407      	str	r4, [sp, #28]
	if (cmd->len < sizeof(*chdr)) {
   12310:	f240 811c 	bls.w	1254c <hci_cmd_handle+0x248>
	return net_buf_simple_pull_mem(&buf->b, len);
   12314:	4605      	mov	r5, r0
   12316:	2103      	movs	r1, #3
   12318:	3008      	adds	r0, #8
   1231a:	f014 f920 	bl	2655e <net_buf_simple_pull_mem>
	if (cmd->len < chdr->param_len) {
   1231e:	89aa      	ldrh	r2, [r5, #12]
   12320:	7883      	ldrb	r3, [r0, #2]
   12322:	429a      	cmp	r2, r3
   12324:	f0c0 8150 	bcc.w	125c8 <hci_cmd_handle+0x2c4>
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12328:	8802      	ldrh	r2, [r0, #0]
   1232a:	4ebc      	ldr	r6, [pc, #752]	; (1261c <hci_cmd_handle+0x318>)
	switch (BT_OGF(_opcode)) {
   1232c:	f3c2 2385 	ubfx	r3, r2, #10, #6
   12330:	2b08      	cmp	r3, #8
	_opcode = sys_le16_to_cpu(chdr->opcode);
   12332:	8032      	strh	r2, [r6, #0]
   12334:	b290      	uxth	r0, r2
	ocf = BT_OCF(_opcode);
   12336:	f3c2 0409 	ubfx	r4, r2, #0, #10
	switch (BT_OGF(_opcode)) {
   1233a:	d809      	bhi.n	12350 <hci_cmd_handle+0x4c>
   1233c:	b1a3      	cbz	r3, 12368 <hci_cmd_handle+0x64>
   1233e:	3b01      	subs	r3, #1
   12340:	2b07      	cmp	r3, #7
   12342:	d811      	bhi.n	12368 <hci_cmd_handle+0x64>
   12344:	e8df f003 	tbb	[pc, r3]
   12348:	e9c81017 	.word	0xe9c81017
   1234c:	26101010 	.word	0x26101010
   12350:	2b3f      	cmp	r3, #63	; 0x3f
   12352:	d109      	bne.n	12368 <hci_cmd_handle+0x64>

/* Map vendor command handler directly to common implementation */
inline int hci_vendor_cmd_handle(uint16_t ocf, struct net_buf *cmd,
				 struct net_buf **evt)
{
	return hci_vendor_cmd_handle_common(ocf, cmd, evt);
   12354:	4629      	mov	r1, r5
   12356:	aa07      	add	r2, sp, #28
   12358:	4620      	mov	r0, r4
   1235a:	f7ff ff13 	bl	12184 <hci_vendor_cmd_handle_common>
	if (err == -EINVAL) {
   1235e:	3016      	adds	r0, #22
	return evt;
   12360:	bf18      	it	ne
   12362:	9d07      	ldrne	r5, [sp, #28]
	if (err == -EINVAL) {
   12364:	d104      	bne.n	12370 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12366:	8830      	ldrh	r0, [r6, #0]
   12368:	2101      	movs	r1, #1
   1236a:	f012 fbd2 	bl	24b12 <bt_hci_cmd_status_create>
   1236e:	4605      	mov	r5, r0
}
   12370:	4628      	mov	r0, r5
   12372:	b00d      	add	sp, #52	; 0x34
   12374:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12376:	2c06      	cmp	r4, #6
   12378:	f000 8437 	beq.w	12bea <hci_cmd_handle+0x8e6>
   1237c:	2c1d      	cmp	r4, #29
   1237e:	d1f3      	bne.n	12368 <hci_cmd_handle+0x64>
	handle = sys_le16_to_cpu(cmd->handle);
   12380:	68ab      	ldr	r3, [r5, #8]
	status = ll_version_ind_send(handle);
   12382:	8818      	ldrh	r0, [r3, #0]
   12384:	f003 fd50 	bl	15e28 <ll_version_ind_send>
   12388:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   1238a:	8830      	ldrh	r0, [r6, #0]
   1238c:	f012 fbc1 	bl	24b12 <bt_hci_cmd_status_create>
   12390:	4605      	mov	r5, r0
}
   12392:	e7ed      	b.n	12370 <hci_cmd_handle+0x6c>
	switch (ocf) {
   12394:	1e62      	subs	r2, r4, #1
   12396:	2a4d      	cmp	r2, #77	; 0x4d
   12398:	d8e6      	bhi.n	12368 <hci_cmd_handle+0x64>
   1239a:	a301      	add	r3, pc, #4	; (adr r3, 123a0 <hci_cmd_handle+0x9c>)
   1239c:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   123a0:	00012923 	.word	0x00012923
   123a4:	00012985 	.word	0x00012985
   123a8:	00012955 	.word	0x00012955
   123ac:	00012369 	.word	0x00012369
   123b0:	0001294b 	.word	0x0001294b
   123b4:	0001292f 	.word	0x0001292f
   123b8:	00012a03 	.word	0x00012a03
   123bc:	000129f7 	.word	0x000129f7
   123c0:	000129eb 	.word	0x000129eb
   123c4:	000129e1 	.word	0x000129e1
   123c8:	00012369 	.word	0x00012369
   123cc:	00012369 	.word	0x00012369
   123d0:	00012369 	.word	0x00012369
   123d4:	00012369 	.word	0x00012369
   123d8:	000129bf 	.word	0x000129bf
   123dc:	000129b9 	.word	0x000129b9
   123e0:	000129b1 	.word	0x000129b1
   123e4:	000129a9 	.word	0x000129a9
   123e8:	00012bc3 	.word	0x00012bc3
   123ec:	00012369 	.word	0x00012369
   123f0:	00012b97 	.word	0x00012b97
   123f4:	00012b81 	.word	0x00012b81
   123f8:	00012b4b 	.word	0x00012b4b
   123fc:	00012b29 	.word	0x00012b29
   12400:	00012369 	.word	0x00012369
   12404:	00012b1f 	.word	0x00012b1f
   12408:	00012b0f 	.word	0x00012b0f
   1240c:	00012ad9 	.word	0x00012ad9
   12410:	00012369 	.word	0x00012369
   12414:	00012369 	.word	0x00012369
   12418:	00012369 	.word	0x00012369
   1241c:	00012ac3 	.word	0x00012ac3
   12420:	00012a8d 	.word	0x00012a8d
   12424:	00012a7d 	.word	0x00012a7d
   12428:	00012a47 	.word	0x00012a47
   1242c:	00012a3b 	.word	0x00012a3b
   12430:	00012369 	.word	0x00012369
   12434:	00012369 	.word	0x00012369
   12438:	00012a2d 	.word	0x00012a2d
   1243c:	00012a25 	.word	0x00012a25
   12440:	00012a1f 	.word	0x00012a1f
   12444:	000128a7 	.word	0x000128a7
   12448:	00012879 	.word	0x00012879
   1244c:	0001284b 	.word	0x0001284b
   12450:	00012841 	.word	0x00012841
   12454:	00012915 	.word	0x00012915
   12458:	000128c9 	.word	0x000128c9
   1245c:	000127e7 	.word	0x000127e7
   12460:	000127c9 	.word	0x000127c9
   12464:	0001276d 	.word	0x0001276d
   12468:	00012369 	.word	0x00012369
   1246c:	00012369 	.word	0x00012369
   12470:	00012369 	.word	0x00012369
   12474:	00012369 	.word	0x00012369
   12478:	00012369 	.word	0x00012369
   1247c:	00012369 	.word	0x00012369
   12480:	00012369 	.word	0x00012369
   12484:	00012369 	.word	0x00012369
   12488:	00012369 	.word	0x00012369
   1248c:	00012369 	.word	0x00012369
   12490:	00012369 	.word	0x00012369
   12494:	00012369 	.word	0x00012369
   12498:	00012369 	.word	0x00012369
   1249c:	00012369 	.word	0x00012369
   124a0:	00012369 	.word	0x00012369
   124a4:	00012369 	.word	0x00012369
   124a8:	00012369 	.word	0x00012369
   124ac:	00012369 	.word	0x00012369
   124b0:	00012369 	.word	0x00012369
   124b4:	00012369 	.word	0x00012369
   124b8:	00012369 	.word	0x00012369
   124bc:	00012369 	.word	0x00012369
   124c0:	00012369 	.word	0x00012369
   124c4:	00012369 	.word	0x00012369
   124c8:	00012749 	.word	0x00012749
   124cc:	00012369 	.word	0x00012369
   124d0:	00012369 	.word	0x00012369
   124d4:	00012727 	.word	0x00012727
	switch (ocf) {
   124d8:	2c63      	cmp	r4, #99	; 0x63
   124da:	f000 8392 	beq.w	12c02 <hci_cmd_handle+0x8fe>
   124de:	d857      	bhi.n	12590 <hci_cmd_handle+0x28c>
   124e0:	2c03      	cmp	r4, #3
   124e2:	f000 8395 	beq.w	12c10 <hci_cmd_handle+0x90c>
   124e6:	2c2d      	cmp	r4, #45	; 0x2d
   124e8:	d13e      	bne.n	12568 <hci_cmd_handle+0x264>
		read_tx_power_level(cmd, evt);
   124ea:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   124ec:	2104      	movs	r1, #4
	handle = sys_le16_to_cpu(cmd->handle);
   124ee:	881e      	ldrh	r6, [r3, #0]
	type = cmd->type;
   124f0:	789f      	ldrb	r7, [r3, #2]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   124f2:	f012 fafc 	bl	24aee <bt_hci_cmd_complete_create>
	return net_buf_simple_add(&buf->b, len);
   124f6:	2104      	movs	r1, #4
   124f8:	9007      	str	r0, [sp, #28]
   124fa:	3008      	adds	r0, #8
   124fc:	f014 f808 	bl	26510 <net_buf_simple_add>
	handle = sys_le16_to_cpu(cmd->handle);
   12500:	b2b5      	uxth	r5, r6
   12502:	4604      	mov	r4, r0
	status = ll_tx_pwr_lvl_get(BT_HCI_VS_LL_HANDLE_TYPE_CONN,
   12504:	1cc3      	adds	r3, r0, #3
   12506:	4629      	mov	r1, r5
   12508:	463a      	mov	r2, r7
   1250a:	2002      	movs	r0, #2
   1250c:	f7ff fc5a 	bl	11dc4 <ll_tx_pwr_lvl_get>
	rp->status = status;
   12510:	7020      	strb	r0, [r4, #0]
	return evt;
   12512:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   12514:	f8a4 6001 	strh.w	r6, [r4, #1]
}
   12518:	e72a      	b.n	12370 <hci_cmd_handle+0x6c>
	switch (ocf) {
   1251a:	1e62      	subs	r2, r4, #1
   1251c:	2a08      	cmp	r2, #8
   1251e:	f63f af23 	bhi.w	12368 <hci_cmd_handle+0x64>
   12522:	a301      	add	r3, pc, #4	; (adr r3, 12528 <hci_cmd_handle+0x224>)
   12524:	f853 f022 	ldr.w	pc, [r3, r2, lsl #2]
   12528:	000126f1 	.word	0x000126f1
   1252c:	00012635 	.word	0x00012635
   12530:	000125f3 	.word	0x000125f3
   12534:	00012369 	.word	0x00012369
   12538:	00012369 	.word	0x00012369
   1253c:	00012369 	.word	0x00012369
   12540:	00012369 	.word	0x00012369
   12544:	00012369 	.word	0x00012369
   12548:	000125d1 	.word	0x000125d1
   1254c:	4934      	ldr	r1, [pc, #208]	; (12620 <hci_cmd_handle+0x31c>)
   1254e:	4b35      	ldr	r3, [pc, #212]	; (12624 <hci_cmd_handle+0x320>)
		BT_ERR("No HCI Command header");
   12550:	4835      	ldr	r0, [pc, #212]	; (12628 <hci_cmd_handle+0x324>)
   12552:	1ac9      	subs	r1, r1, r3
   12554:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI CMD packet length");
   12556:	0189      	lsls	r1, r1, #6
   12558:	f041 0101 	orr.w	r1, r1, #1
   1255c:	f00f ff78 	bl	22450 <log_0>
		return NULL;
   12560:	4625      	mov	r5, r4
}
   12562:	4628      	mov	r0, r5
   12564:	b00d      	add	sp, #52	; 0x34
   12566:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (ocf) {
   12568:	2c01      	cmp	r4, #1
   1256a:	f47f aefd 	bne.w	12368 <hci_cmd_handle+0x64>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   1256e:	68aa      	ldr	r2, [r5, #8]
	event_mask = sys_get_le64(cmd->events);
   12570:	4b2e      	ldr	r3, [pc, #184]	; (1262c <hci_cmd_handle+0x328>)
   12572:	6811      	ldr	r1, [r2, #0]
   12574:	6852      	ldr	r2, [r2, #4]
   12576:	6019      	str	r1, [r3, #0]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12578:	2101      	movs	r1, #1
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1257a:	605a      	str	r2, [r3, #4]
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1257c:	f012 fab7 	bl	24aee <bt_hci_cmd_complete_create>
   12580:	2101      	movs	r1, #1
   12582:	4605      	mov	r5, r0
   12584:	3008      	adds	r0, #8
   12586:	f013 ffc3 	bl	26510 <net_buf_simple_add>
	ccst->status = status;
   1258a:	2300      	movs	r3, #0
   1258c:	7003      	strb	r3, [r0, #0]
}
   1258e:	e6ef      	b.n	12370 <hci_cmd_handle+0x6c>
	switch (ocf) {
   12590:	2c7b      	cmp	r4, #123	; 0x7b
   12592:	f000 835f 	beq.w	12c54 <hci_cmd_handle+0x950>
   12596:	2c7c      	cmp	r4, #124	; 0x7c
   12598:	f47f aee6 	bne.w	12368 <hci_cmd_handle+0x64>
		write_auth_payload_timeout(cmd, evt);
   1259c:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   1259e:	881f      	ldrh	r7, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
   125a0:	8859      	ldrh	r1, [r3, #2]
   125a2:	b2b8      	uxth	r0, r7
   125a4:	f003 fd7a 	bl	1609c <ll_apto_set>
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   125a8:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   125aa:	2103      	movs	r1, #3
   125ac:	8830      	ldrh	r0, [r6, #0]
   125ae:	f012 fa9e 	bl	24aee <bt_hci_cmd_complete_create>
   125b2:	2103      	movs	r1, #3
   125b4:	4603      	mov	r3, r0
   125b6:	3008      	adds	r0, #8
   125b8:	9307      	str	r3, [sp, #28]
   125ba:	f013 ffa9 	bl	26510 <net_buf_simple_add>
	rp->status = status;
   125be:	7004      	strb	r4, [r0, #0]
	return evt;
   125c0:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   125c2:	f8a0 7001 	strh.w	r7, [r0, #1]
	if (err == -EINVAL) {
   125c6:	e6d3      	b.n	12370 <hci_cmd_handle+0x6c>
   125c8:	4915      	ldr	r1, [pc, #84]	; (12620 <hci_cmd_handle+0x31c>)
   125ca:	4b16      	ldr	r3, [pc, #88]	; (12624 <hci_cmd_handle+0x320>)
		BT_ERR("Invalid HCI CMD packet length");
   125cc:	4818      	ldr	r0, [pc, #96]	; (12630 <hci_cmd_handle+0x32c>)
   125ce:	e7c0      	b.n	12552 <hci_cmd_handle+0x24e>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   125d0:	2107      	movs	r1, #7
   125d2:	f012 fa8c 	bl	24aee <bt_hci_cmd_complete_create>
   125d6:	2107      	movs	r1, #7
   125d8:	4603      	mov	r3, r0
   125da:	3008      	adds	r0, #8
   125dc:	9307      	str	r3, [sp, #28]
   125de:	f013 ff97 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   125e2:	4601      	mov	r1, r0
   125e4:	2000      	movs	r0, #0
   125e6:	f801 0b01 	strb.w	r0, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
   125ea:	f7ff fbaf 	bl	11d4c <ll_addr_get>
	return evt;
   125ee:	9d07      	ldr	r5, [sp, #28]
   125f0:	e6be      	b.n	12370 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   125f2:	2109      	movs	r1, #9
   125f4:	f012 fa7b 	bl	24aee <bt_hci_cmd_complete_create>
   125f8:	2109      	movs	r1, #9
   125fa:	4603      	mov	r3, r0
   125fc:	3008      	adds	r0, #8
   125fe:	9307      	str	r3, [sp, #28]
   12600:	f013 ff86 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12604:	2100      	movs	r1, #0
   12606:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12608:	2208      	movs	r2, #8
	rp->status = 0x00;
   1260a:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1260e:	f011 ff56 	bl	244be <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
   12612:	2360      	movs	r3, #96	; 0x60
	return evt;
   12614:	9d07      	ldr	r5, [sp, #28]
	rp->features[4] = (1 << 5) | (1 << 6);
   12616:	7163      	strb	r3, [r4, #5]
	if (err == -EINVAL) {
   12618:	e6aa      	b.n	12370 <hci_cmd_handle+0x6c>
   1261a:	bf00      	nop
   1261c:	2000ed74 	.word	0x2000ed74
   12620:	00027900 	.word	0x00027900
   12624:	000278c0 	.word	0x000278c0
   12628:	00028520 	.word	0x00028520
   1262c:	200001b0 	.word	0x200001b0
   12630:	00028538 	.word	0x00028538
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12634:	2141      	movs	r1, #65	; 0x41
   12636:	f012 fa5a 	bl	24aee <bt_hci_cmd_complete_create>
   1263a:	2141      	movs	r1, #65	; 0x41
   1263c:	4603      	mov	r3, r0
   1263e:	3008      	adds	r0, #8
   12640:	9307      	str	r3, [sp, #28]
   12642:	f013 ff65 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12646:	2100      	movs	r1, #0
   12648:	4604      	mov	r4, r0
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   1264a:	2240      	movs	r2, #64	; 0x40
	rp->status = 0x00;
   1264c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->commands[0], 0, sizeof(rp->commands));
   12650:	f011 ff35 	bl	244be <memset>
	rp->commands[15] |= BIT(1);
   12654:	7c23      	ldrb	r3, [r4, #16]
	rp->commands[5] |= BIT(6) | BIT(7);
   12656:	79a0      	ldrb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   12658:	7ae1      	ldrb	r1, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
   1265a:	7be2      	ldrb	r2, [r4, #15]
	rp->commands[15] |= BIT(1);
   1265c:	f043 0302 	orr.w	r3, r3, #2
   12660:	7423      	strb	r3, [r4, #16]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12662:	7ea3      	ldrb	r3, [r4, #26]
	rp->commands[5] |= BIT(6) | BIT(7);
   12664:	f060 003f 	orn	r0, r0, #63	; 0x3f
	rp->commands[10] |= BIT(2);
   12668:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   1266c:	f063 0308 	orn	r3, r3, #8
	rp->commands[5] |= BIT(6) | BIT(7);
   12670:	71a0      	strb	r0, [r4, #6]
	rp->commands[10] |= BIT(2);
   12672:	72e1      	strb	r1, [r4, #11]
	rp->commands[26] |= BIT(6) | BIT(7);
   12674:	7ee0      	ldrb	r0, [r4, #27]
	rp->commands[22] |= BIT(2);
   12676:	7de1      	ldrb	r1, [r4, #23]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
   12678:	76a3      	strb	r3, [r4, #26]
	rp->commands[33] |= BIT(4) | BIT(5);
   1267a:	f894 3022 	ldrb.w	r3, [r4, #34]	; 0x22
	rp->commands[14] |= BIT(3) | BIT(5);
   1267e:	f042 0228 	orr.w	r2, r2, #40	; 0x28
	rp->commands[22] |= BIT(2);
   12682:	f041 0104 	orr.w	r1, r1, #4
	rp->commands[26] |= BIT(0) | BIT(1);
   12686:	f060 003c 	orn	r0, r0, #60	; 0x3c
	rp->commands[33] |= BIT(6) | BIT(7);
   1268a:	f063 030f 	orn	r3, r3, #15
	rp->commands[26] |= BIT(0) | BIT(1);
   1268e:	76e0      	strb	r0, [r4, #27]
	rp->commands[14] |= BIT(3) | BIT(5);
   12690:	73e2      	strb	r2, [r4, #15]
	rp->commands[28] |= BIT(3);
   12692:	7f60      	ldrb	r0, [r4, #29]
	rp->commands[27] |= BIT(0) | BIT(1);
   12694:	7f22      	ldrb	r2, [r4, #28]
	rp->commands[22] |= BIT(2);
   12696:	75e1      	strb	r1, [r4, #23]
	rp->commands[33] |= BIT(6) | BIT(7);
   12698:	f884 3022 	strb.w	r3, [r4, #34]	; 0x22
	rp->commands[0] |= BIT(5);
   1269c:	7861      	ldrb	r1, [r4, #1]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   1269e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
	rp->commands[28] |= BIT(1) | BIT(2);
   126a2:	f040 000e 	orr.w	r0, r0, #14
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   126a6:	f062 0208 	orn	r2, r2, #8
	rp->commands[0] |= BIT(5);
   126aa:	f041 0120 	orr.w	r1, r1, #32
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   126ae:	f063 0306 	orn	r3, r3, #6
	rp->commands[0] |= BIT(5);
   126b2:	7061      	strb	r1, [r4, #1]
	rp->commands[28] |= BIT(1) | BIT(2);
   126b4:	7760      	strb	r0, [r4, #29]
	rp->commands[35] |= BIT(3);
   126b6:	f894 1024 	ldrb.w	r1, [r4, #36]	; 0x24
	rp->commands[32] |= BIT(4) | BIT(5);
   126ba:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
   126be:	7722      	strb	r2, [r4, #28]
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
   126c0:	f884 3023 	strb.w	r3, [r4, #35]	; 0x23
	rp->commands[39] |= BIT(2);
   126c4:	f894 2028 	ldrb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   126c8:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   126cc:	f041 017f 	orr.w	r1, r1, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   126d0:	f040 0030 	orr.w	r0, r0, #48	; 0x30
	rp->commands[39] |= BIT(2);
   126d4:	f042 0204 	orr.w	r2, r2, #4
	rp->commands[38] |= BIT(7);
   126d8:	f063 037f 	orn	r3, r3, #127	; 0x7f
	rp->commands[32] |= BIT(4) | BIT(5);
   126dc:	f884 0021 	strb.w	r0, [r4, #33]	; 0x21
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
   126e0:	f884 1024 	strb.w	r1, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
   126e4:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
	rp->commands[38] |= BIT(7);
   126e8:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
	return evt;
   126ec:	9d07      	ldr	r5, [sp, #28]
   126ee:	e63f      	b.n	12370 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   126f0:	2109      	movs	r1, #9
   126f2:	f012 f9fc 	bl	24aee <bt_hci_cmd_complete_create>
   126f6:	2109      	movs	r1, #9
   126f8:	4603      	mov	r3, r0
   126fa:	3008      	adds	r0, #8
   126fc:	9307      	str	r3, [sp, #28]
   126fe:	f013 ff07 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12702:	2300      	movs	r3, #0
	rp->hci_version = LL_VERSION_NUMBER;
   12704:	210b      	movs	r1, #11
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12706:	f04f 32ff 	mov.w	r2, #4294967295
	rp->status = 0x00;
   1270a:	7003      	strb	r3, [r0, #0]
	rp->hci_version = LL_VERSION_NUMBER;
   1270c:	7041      	strb	r1, [r0, #1]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1270e:	f06f 040e 	mvn.w	r4, #14
	rp->hci_revision = sys_cpu_to_le16(0);
   12712:	7083      	strb	r3, [r0, #2]
   12714:	70c3      	strb	r3, [r0, #3]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   12716:	2305      	movs	r3, #5
	return evt;
   12718:	9d07      	ldr	r5, [sp, #28]
	rp->lmp_version = LL_VERSION_NUMBER;
   1271a:	7101      	strb	r1, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(ll_settings_company_id());
   1271c:	7144      	strb	r4, [r0, #5]
   1271e:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(ll_settings_subversion_number());
   12720:	71c2      	strb	r2, [r0, #7]
   12722:	7202      	strb	r2, [r0, #8]
	if (err == -EINVAL) {
   12724:	e624      	b.n	12370 <hci_cmd_handle+0x6c>
		le_set_privacy_mode(cmd, evt);
   12726:	68a8      	ldr	r0, [r5, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   12728:	79c1      	ldrb	r1, [r0, #7]
   1272a:	f007 fcff 	bl	1a12c <ll_priv_mode_set>
   1272e:	4603      	mov	r3, r0
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12730:	2101      	movs	r1, #1
   12732:	8830      	ldrh	r0, [r6, #0]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
   12734:	461e      	mov	r6, r3
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12736:	f012 f9da 	bl	24aee <bt_hci_cmd_complete_create>
   1273a:	2101      	movs	r1, #1
   1273c:	4605      	mov	r5, r0
   1273e:	3008      	adds	r0, #8
   12740:	f013 fee6 	bl	26510 <net_buf_simple_add>
	ccst->status = status;
   12744:	7006      	strb	r6, [r0, #0]
	if (err == -EINVAL) {
   12746:	e613      	b.n	12370 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12748:	2103      	movs	r1, #3
   1274a:	f012 f9d0 	bl	24aee <bt_hci_cmd_complete_create>
   1274e:	2103      	movs	r1, #3
   12750:	4603      	mov	r3, r0
   12752:	3008      	adds	r0, #8
   12754:	9307      	str	r3, [sp, #28]
   12756:	f013 fedb 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   1275a:	4601      	mov	r1, r0
   1275c:	2300      	movs	r3, #0
   1275e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_pwr_get(&rp->min_tx_power, &rp->max_tx_power);
   12762:	3001      	adds	r0, #1
   12764:	f7ff fb3e 	bl	11de4 <ll_tx_pwr_get>
	return evt;
   12768:	9d07      	ldr	r5, [sp, #28]
   1276a:	e601      	b.n	12370 <hci_cmd_handle+0x6c>
		le_set_phy(cmd, evt);
   1276c:	68aa      	ldr	r2, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   1276e:	7893      	ldrb	r3, [r2, #2]
		cmd->tx_phys |= mask_phys;
   12770:	78d1      	ldrb	r1, [r2, #3]
	handle = sys_le16_to_cpu(cmd->handle);
   12772:	8815      	ldrh	r5, [r2, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
   12774:	f8b2 4005 	ldrh.w	r4, [r2, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   12778:	07df      	lsls	r7, r3, #31
		cmd->tx_phys |= mask_phys;
   1277a:	bf44      	itt	mi
   1277c:	f041 0103 	orrmi.w	r1, r1, #3
   12780:	70d1      	strbmi	r1, [r2, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   12782:	f013 0f02 	tst.w	r3, #2
		cmd->rx_phys |= mask_phys;
   12786:	7913      	ldrb	r3, [r2, #4]
   12788:	bf1c      	itt	ne
   1278a:	f043 0303 	orrne.w	r3, r3, #3
   1278e:	7113      	strbne	r3, [r2, #4]
	if ((cmd->tx_phys | cmd->rx_phys) & ~mask_phys) {
   12790:	ea43 0201 	orr.w	r2, r3, r1
   12794:	f012 0ffc 	tst.w	r2, #252	; 0xfc
   12798:	f040 827d 	bne.w	12c96 <hci_cmd_handle+0x992>
	if (!(cmd->tx_phys & 0x07) ||
   1279c:	074f      	lsls	r7, r1, #29
   1279e:	f000 8274 	beq.w	12c8a <hci_cmd_handle+0x986>
   127a2:	075a      	lsls	r2, r3, #29
   127a4:	f000 8271 	beq.w	12c8a <hci_cmd_handle+0x986>
	if (phy_opts & 0x03) {
   127a8:	f014 0203 	ands.w	r2, r4, #3
		phy_opts -= 1U;
   127ac:	bf1c      	itt	ne
   127ae:	f104 34ff 	addne.w	r4, r4, #4294967295
		phy_opts &= 1;
   127b2:	f004 0201 	andne.w	r2, r4, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
   127b6:	4628      	mov	r0, r5
   127b8:	f003 fbfa 	bl	15fb0 <ll_phy_req_send>
   127bc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   127be:	8830      	ldrh	r0, [r6, #0]
   127c0:	f012 f9a7 	bl	24b12 <bt_hci_cmd_status_create>
   127c4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   127c6:	e5d3      	b.n	12370 <hci_cmd_handle+0x6c>
		le_set_default_phy(cmd, evt);
   127c8:	68ab      	ldr	r3, [r5, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
   127ca:	781a      	ldrb	r2, [r3, #0]
   127cc:	07d1      	lsls	r1, r2, #31
		cmd->tx_phys = 0x07;
   127ce:	bf4a      	itet	mi
   127d0:	2007      	movmi	r0, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   127d2:	7858      	ldrbpl	r0, [r3, #1]
		cmd->tx_phys = 0x07;
   127d4:	7058      	strbmi	r0, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
   127d6:	0792      	lsls	r2, r2, #30
		cmd->rx_phys = 0x07;
   127d8:	bf4a      	itet	mi
   127da:	2107      	movmi	r1, #7
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   127dc:	7899      	ldrbpl	r1, [r3, #2]
		cmd->rx_phys = 0x07;
   127de:	7099      	strbmi	r1, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
   127e0:	f003 fbdc 	bl	15f9c <ll_phy_default_set>
   127e4:	e7a3      	b.n	1272e <hci_cmd_handle+0x42a>
	handle = sys_le16_to_cpu(cmd->handle);
   127e6:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   127e8:	2105      	movs	r1, #5
	handle = sys_le16_to_cpu(cmd->handle);
   127ea:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   127ec:	f012 f97f 	bl	24aee <bt_hci_cmd_complete_create>
   127f0:	2105      	movs	r1, #5
   127f2:	4603      	mov	r3, r0
   127f4:	3008      	adds	r0, #8
   127f6:	9307      	str	r3, [sp, #28]
   127f8:	f013 fe8a 	bl	26510 <net_buf_simple_add>
   127fc:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   127fe:	1d22      	adds	r2, r4, #4
	handle = sys_le16_to_cpu(cmd->handle);
   12800:	b2b0      	uxth	r0, r6
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
   12802:	1ce1      	adds	r1, r4, #3
   12804:	f003 fbac 	bl	15f60 <ll_phy_get>
 * @return least significant bit set, 0 if @a op is 0
 */

static ALWAYS_INLINE unsigned int find_lsb_set(uint32_t op)
{
	return __builtin_ffs(op);
   12808:	78e3      	ldrb	r3, [r4, #3]
	rp->status = status;
   1280a:	7020      	strb	r0, [r4, #0]
   1280c:	2b00      	cmp	r3, #0
   1280e:	fa93 f2a3 	rbit	r2, r3
   12812:	7923      	ldrb	r3, [r4, #4]
   12814:	fab2 f282 	clz	r2, r2
   12818:	bf08      	it	eq
   1281a:	f04f 32ff 	moveq.w	r2, #4294967295
   1281e:	2b00      	cmp	r3, #0
   12820:	fa93 f3a3 	rbit	r3, r3
   12824:	fab3 f383 	clz	r3, r3
   12828:	f102 0201 	add.w	r2, r2, #1
   1282c:	bf08      	it	eq
   1282e:	f04f 33ff 	moveq.w	r3, #4294967295
	rp->tx_phy = find_lsb_set(rp->tx_phy);
   12832:	70e2      	strb	r2, [r4, #3]
   12834:	3301      	adds	r3, #1
	return evt;
   12836:	9d07      	ldr	r5, [sp, #28]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
   12838:	7123      	strb	r3, [r4, #4]
	rp->handle = sys_cpu_to_le16(handle);
   1283a:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   1283e:	e597      	b.n	12370 <hci_cmd_handle+0x6c>
	status = ll_rl_enable(cmd->enable);
   12840:	68ab      	ldr	r3, [r5, #8]
   12842:	7818      	ldrb	r0, [r3, #0]
   12844:	f007 fc52 	bl	1a0ec <ll_rl_enable>
   12848:	e771      	b.n	1272e <hci_cmd_handle+0x42a>
	memcpy(dst, src, sizeof(*dst));
   1284a:	2207      	movs	r2, #7
   1284c:	68a9      	ldr	r1, [r5, #8]
   1284e:	a808      	add	r0, sp, #32
   12850:	f011 fe0a 	bl	24468 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12854:	2107      	movs	r1, #7
   12856:	8830      	ldrh	r0, [r6, #0]
   12858:	f012 f949 	bl	24aee <bt_hci_cmd_complete_create>
   1285c:	2107      	movs	r1, #7
   1285e:	4603      	mov	r3, r0
   12860:	3008      	adds	r0, #8
   12862:	9307      	str	r3, [sp, #28]
   12864:	f013 fe54 	bl	26510 <net_buf_simple_add>
   12868:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
   1286a:	1c41      	adds	r1, r0, #1
   1286c:	a808      	add	r0, sp, #32
   1286e:	f007 fc0b 	bl	1a088 <ll_rl_lrpa_get>
   12872:	7020      	strb	r0, [r4, #0]
	return evt;
   12874:	9d07      	ldr	r5, [sp, #28]
   12876:	e57b      	b.n	12370 <hci_cmd_handle+0x6c>
   12878:	2207      	movs	r2, #7
   1287a:	68a9      	ldr	r1, [r5, #8]
   1287c:	a808      	add	r0, sp, #32
   1287e:	f011 fdf3 	bl	24468 <memcpy>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12882:	2107      	movs	r1, #7
   12884:	8830      	ldrh	r0, [r6, #0]
   12886:	f012 f932 	bl	24aee <bt_hci_cmd_complete_create>
   1288a:	2107      	movs	r1, #7
   1288c:	4603      	mov	r3, r0
   1288e:	3008      	adds	r0, #8
   12890:	9307      	str	r3, [sp, #28]
   12892:	f013 fe3d 	bl	26510 <net_buf_simple_add>
   12896:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
   12898:	1c41      	adds	r1, r0, #1
   1289a:	a808      	add	r0, sp, #32
   1289c:	f007 fbba 	bl	1a014 <ll_rl_crpa_get>
   128a0:	7020      	strb	r0, [r4, #0]
	return evt;
   128a2:	9d07      	ldr	r5, [sp, #28]
   128a4:	e564      	b.n	12370 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   128a6:	2102      	movs	r1, #2
   128a8:	f012 f921 	bl	24aee <bt_hci_cmd_complete_create>
   128ac:	2102      	movs	r1, #2
   128ae:	4603      	mov	r3, r0
   128b0:	3008      	adds	r0, #8
   128b2:	9307      	str	r3, [sp, #28]
   128b4:	f013 fe2c 	bl	26510 <net_buf_simple_add>
   128b8:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
   128ba:	f007 fa73 	bl	19da4 <ll_rl_size_get>
	rp->status = 0x00;
   128be:	2300      	movs	r3, #0
	rp->rl_size = ll_rl_size_get();
   128c0:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
   128c2:	7023      	strb	r3, [r4, #0]
	return evt;
   128c4:	9d07      	ldr	r5, [sp, #28]
   128c6:	e553      	b.n	12370 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   128c8:	2109      	movs	r1, #9
   128ca:	f012 f910 	bl	24aee <bt_hci_cmd_complete_create>
   128ce:	2109      	movs	r1, #9
   128d0:	4603      	mov	r3, r0
   128d2:	3008      	adds	r0, #8
   128d4:	9307      	str	r3, [sp, #28]
   128d6:	f013 fe1b 	bl	26510 <net_buf_simple_add>
	ll_length_max_get(&max_tx_octets, &max_tx_time,
   128da:	ab08      	add	r3, sp, #32
   128dc:	4604      	mov	r4, r0
   128de:	f10d 021a 	add.w	r2, sp, #26
   128e2:	a906      	add	r1, sp, #24
   128e4:	f10d 0016 	add.w	r0, sp, #22
   128e8:	f003 fb2e 	bl	15f48 <ll_length_max_get>
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   128ec:	f8bd 3018 	ldrh.w	r3, [sp, #24]
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   128f0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   128f4:	f8a4 2001 	strh.w	r2, [r4, #1]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   128f8:	f8a4 3003 	strh.w	r3, [r4, #3]
	rp->max_rx_octets = sys_cpu_to_le16(max_rx_octets);
   128fc:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12900:	f8a4 3005 	strh.w	r3, [r4, #5]
	rp->status = 0x00;
   12904:	2200      	movs	r2, #0
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   12906:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   1290a:	7022      	strb	r2, [r4, #0]
	return evt;
   1290c:	9d07      	ldr	r5, [sp, #28]
	rp->max_rx_time = sys_cpu_to_le16(max_rx_time);
   1290e:	f8a4 3007 	strh.w	r3, [r4, #7]
	if (err == -EINVAL) {
   12912:	e52d      	b.n	12370 <hci_cmd_handle+0x6c>
	uint16_t timeout = sys_le16_to_cpu(cmd->rpa_timeout);
   12914:	68ab      	ldr	r3, [r5, #8]
	ll_rl_timeout_set(timeout);
   12916:	8818      	ldrh	r0, [r3, #0]
   12918:	f007 fbfe 	bl	1a118 <ll_rl_timeout_set>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   1291c:	8830      	ldrh	r0, [r6, #0]
   1291e:	2101      	movs	r1, #1
   12920:	e62c      	b.n	1257c <hci_cmd_handle+0x278>
   12922:	68aa      	ldr	r2, [r5, #8]
	le_event_mask = sys_get_le64(cmd->events);
   12924:	4bb8      	ldr	r3, [pc, #736]	; (12c08 <hci_cmd_handle+0x904>)
   12926:	6811      	ldr	r1, [r2, #0]
   12928:	6852      	ldr	r2, [r2, #4]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   1292a:	6019      	str	r1, [r3, #0]
   1292c:	e624      	b.n	12578 <hci_cmd_handle+0x274>
		le_set_adv_param(cmd, evt);
   1292e:	68ac      	ldr	r4, [r5, #8]
	status = ll_adv_params_set(min_interval, cmd->type,
   12930:	7ba5      	ldrb	r5, [r4, #14]
   12932:	79a3      	ldrb	r3, [r4, #6]
   12934:	7962      	ldrb	r2, [r4, #5]
   12936:	7921      	ldrb	r1, [r4, #4]
   12938:	8820      	ldrh	r0, [r4, #0]
   1293a:	9502      	str	r5, [sp, #8]
   1293c:	7b65      	ldrb	r5, [r4, #13]
   1293e:	9501      	str	r5, [sp, #4]
				   &cmd->direct_addr.a.val[0], cmd->channel_map,
   12940:	3407      	adds	r4, #7
	status = ll_adv_params_set(min_interval, cmd->type,
   12942:	9400      	str	r4, [sp, #0]
   12944:	f002 f9e2 	bl	14d0c <ll_adv_params_set>
   12948:	e6f1      	b.n	1272e <hci_cmd_handle+0x42a>
	status = ll_addr_set(1, &cmd->bdaddr.val[0]);
   1294a:	68a9      	ldr	r1, [r5, #8]
   1294c:	2001      	movs	r0, #1
   1294e:	f7ff fa1b 	bl	11d88 <ll_addr_set>
   12952:	e6ec      	b.n	1272e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12954:	2109      	movs	r1, #9
   12956:	f012 f8ca 	bl	24aee <bt_hci_cmd_complete_create>
   1295a:	2109      	movs	r1, #9
   1295c:	4603      	mov	r3, r0
   1295e:	3008      	adds	r0, #8
   12960:	9307      	str	r3, [sp, #28]
   12962:	f013 fdd5 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12966:	2100      	movs	r1, #0
   12968:	4604      	mov	r4, r0
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   1296a:	2208      	movs	r2, #8
	rp->status = 0x00;
   1296c:	f800 1b01 	strb.w	r1, [r0], #1
	(void)memset(&rp->features[0], 0x00, sizeof(rp->features));
   12970:	f011 fda5 	bl	244be <memset>
	dst[0] = val;
   12974:	217f      	movs	r1, #127	; 0x7f
	dst[1] = val >> 8;
   12976:	2241      	movs	r2, #65	; 0x41
	dst[2] = val >> 16;
   12978:	2301      	movs	r3, #1
	dst[0] = val;
   1297a:	7061      	strb	r1, [r4, #1]
	dst[1] = val >> 8;
   1297c:	70a2      	strb	r2, [r4, #2]
	dst[2] = val >> 16;
   1297e:	70e3      	strb	r3, [r4, #3]
	return evt;
   12980:	9d07      	ldr	r5, [sp, #28]
   12982:	e4f5      	b.n	12370 <hci_cmd_handle+0x6c>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12984:	2104      	movs	r1, #4
   12986:	f012 f8b2 	bl	24aee <bt_hci_cmd_complete_create>
   1298a:	2104      	movs	r1, #4
   1298c:	4603      	mov	r3, r0
   1298e:	3008      	adds	r0, #8
   12990:	9307      	str	r3, [sp, #28]
   12992:	f013 fdbd 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12996:	2300      	movs	r3, #0
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   12998:	2103      	movs	r1, #3
	rp->status = 0x00;
   1299a:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   1299c:	221b      	movs	r2, #27
	rp->le_max_num = CONFIG_BT_CTLR_TX_BUFFERS;
   1299e:	70c1      	strb	r1, [r0, #3]
	return evt;
   129a0:	9d07      	ldr	r5, [sp, #28]
	rp->le_max_len = sys_cpu_to_le16(CONFIG_BT_CTLR_TX_BUFFER_SIZE);
   129a2:	7042      	strb	r2, [r0, #1]
   129a4:	7083      	strb	r3, [r0, #2]
	if (err == -EINVAL) {
   129a6:	e4e3      	b.n	12370 <hci_cmd_handle+0x6c>
	status = ll_wl_remove(&cmd->addr);
   129a8:	68a8      	ldr	r0, [r5, #8]
   129aa:	f007 f969 	bl	19c80 <ll_wl_remove>
   129ae:	e6be      	b.n	1272e <hci_cmd_handle+0x42a>
	status = ll_wl_add(&cmd->addr);
   129b0:	68a8      	ldr	r0, [r5, #8]
   129b2:	f007 f8c5 	bl	19b40 <ll_wl_add>
   129b6:	e6ba      	b.n	1272e <hci_cmd_handle+0x42a>
	status = ll_wl_clear();
   129b8:	f007 f898 	bl	19aec <ll_wl_clear>
   129bc:	e6b7      	b.n	1272e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   129be:	2102      	movs	r1, #2
   129c0:	f012 f895 	bl	24aee <bt_hci_cmd_complete_create>
   129c4:	2102      	movs	r1, #2
   129c6:	4603      	mov	r3, r0
   129c8:	3008      	adds	r0, #8
   129ca:	9307      	str	r3, [sp, #28]
   129cc:	f013 fda0 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   129d0:	2300      	movs	r3, #0
   129d2:	7003      	strb	r3, [r0, #0]
   129d4:	4604      	mov	r4, r0
	rp->wl_size = ll_wl_size_get();
   129d6:	f007 f887 	bl	19ae8 <ll_wl_size_get>
   129da:	7060      	strb	r0, [r4, #1]
	return evt;
   129dc:	9d07      	ldr	r5, [sp, #28]
   129de:	e4c7      	b.n	12370 <hci_cmd_handle+0x6c>
	status = ll_adv_enable(cmd->enable);
   129e0:	68ab      	ldr	r3, [r5, #8]
   129e2:	7818      	ldrb	r0, [r3, #0]
   129e4:	f7ef f8b4 	bl	1b50 <ll_adv_enable>
   129e8:	e6a1      	b.n	1272e <hci_cmd_handle+0x42a>
	status = ll_adv_scan_rsp_set(cmd->len, &cmd->data[0]);
   129ea:	68a9      	ldr	r1, [r5, #8]
   129ec:	f811 0b01 	ldrb.w	r0, [r1], #1
   129f0:	f002 fb14 	bl	1501c <ll_adv_scan_rsp_set>
   129f4:	e69b      	b.n	1272e <hci_cmd_handle+0x42a>
	status = ll_adv_data_set(cmd->len, &cmd->data[0]);
   129f6:	68a9      	ldr	r1, [r5, #8]
   129f8:	f811 0b01 	ldrb.w	r0, [r1], #1
   129fc:	f002 fa28 	bl	14e50 <ll_adv_data_set>
   12a00:	e695      	b.n	1272e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a02:	2102      	movs	r1, #2
   12a04:	f012 f873 	bl	24aee <bt_hci_cmd_complete_create>
   12a08:	2102      	movs	r1, #2
   12a0a:	4603      	mov	r3, r0
   12a0c:	3008      	adds	r0, #8
   12a0e:	9307      	str	r3, [sp, #28]
   12a10:	f013 fd7e 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12a14:	2300      	movs	r3, #0
   12a16:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
   12a18:	7043      	strb	r3, [r0, #1]
	return evt;
   12a1a:	9d07      	ldr	r5, [sp, #28]
   12a1c:	e4a8      	b.n	12370 <hci_cmd_handle+0x6c>
	status = ll_rl_clear();
   12a1e:	f007 f9c3 	bl	19da8 <ll_rl_clear>
   12a22:	e684      	b.n	1272e <hci_cmd_handle+0x42a>
	status = ll_rl_remove(&cmd->peer_id_addr);
   12a24:	68a8      	ldr	r0, [r5, #8]
   12a26:	f007 f9fd 	bl	19e24 <ll_rl_remove>
   12a2a:	e680      	b.n	1272e <hci_cmd_handle+0x42a>
		le_add_dev_to_rl(cmd, evt);
   12a2c:	68a8      	ldr	r0, [r5, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
   12a2e:	f100 0217 	add.w	r2, r0, #23
   12a32:	1dc1      	adds	r1, r0, #7
   12a34:	f007 fd8e 	bl	1a554 <ll_rl_add>
   12a38:	e679      	b.n	1272e <hci_cmd_handle+0x42a>
		le_write_default_data_len(cmd, evt);
   12a3a:	68ab      	ldr	r3, [r5, #8]
	status = ll_length_default_set(max_tx_octets, max_tx_time);
   12a3c:	8859      	ldrh	r1, [r3, #2]
   12a3e:	8818      	ldrh	r0, [r3, #0]
   12a40:	f003 fa78 	bl	15f34 <ll_length_default_set>
   12a44:	e673      	b.n	1272e <hci_cmd_handle+0x42a>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12a46:	2105      	movs	r1, #5
   12a48:	f012 f851 	bl	24aee <bt_hci_cmd_complete_create>
   12a4c:	2105      	movs	r1, #5
   12a4e:	4603      	mov	r3, r0
   12a50:	3008      	adds	r0, #8
   12a52:	9307      	str	r3, [sp, #28]
   12a54:	f013 fd5c 	bl	26510 <net_buf_simple_add>
	ll_length_default_get(&max_tx_octets, &max_tx_time);
   12a58:	a908      	add	r1, sp, #32
   12a5a:	4604      	mov	r4, r0
   12a5c:	f10d 001a 	add.w	r0, sp, #26
   12a60:	f003 fa5c 	bl	15f1c <ll_length_default_get>
	rp->max_tx_octets = sys_cpu_to_le16(max_tx_octets);
   12a64:	f8bd 301a 	ldrh.w	r3, [sp, #26]
   12a68:	f8a4 3001 	strh.w	r3, [r4, #1]
	rp->status = 0x00;
   12a6c:	2200      	movs	r2, #0
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12a6e:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	rp->status = 0x00;
   12a72:	7022      	strb	r2, [r4, #0]
	return evt;
   12a74:	9d07      	ldr	r5, [sp, #28]
	rp->max_tx_time = sys_cpu_to_le16(max_tx_time);
   12a76:	f8a4 3003 	strh.w	r3, [r4, #3]
	if (err == -EINVAL) {
   12a7a:	e479      	b.n	12370 <hci_cmd_handle+0x6c>
		le_set_data_len(cmd, evt);
   12a7c:	68ab      	ldr	r3, [r5, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12a7e:	881f      	ldrh	r7, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
   12a80:	889a      	ldrh	r2, [r3, #4]
   12a82:	8859      	ldrh	r1, [r3, #2]
   12a84:	b2b8      	uxth	r0, r7
   12a86:	f003 f9f5 	bl	15e74 <ll_length_req_send>
   12a8a:	e58d      	b.n	125a8 <hci_cmd_handle+0x2a4>
		le_conn_param_req_neg_reply(cmd, evt);
   12a8c:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12a8e:	2300      	movs	r3, #0
	handle = sys_le16_to_cpu(cmd->handle);
   12a90:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12a92:	7892      	ldrb	r2, [r2, #2]
   12a94:	9300      	str	r3, [sp, #0]
   12a96:	e9cd 3301 	strd	r3, r3, [sp, #4]
   12a9a:	2102      	movs	r1, #2
   12a9c:	b2a0      	uxth	r0, r4
   12a9e:	f003 f8a7 	bl	15bf0 <ll_conn_update>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12aa2:	2103      	movs	r1, #3
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0, 0);
   12aa4:	4605      	mov	r5, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12aa6:	8830      	ldrh	r0, [r6, #0]
   12aa8:	f012 f821 	bl	24aee <bt_hci_cmd_complete_create>
   12aac:	2103      	movs	r1, #3
   12aae:	4603      	mov	r3, r0
   12ab0:	3008      	adds	r0, #8
   12ab2:	9307      	str	r3, [sp, #28]
   12ab4:	f013 fd2c 	bl	26510 <net_buf_simple_add>
	rp->status = status;
   12ab8:	7005      	strb	r5, [r0, #0]
	return evt;
   12aba:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_cpu_to_le16(handle);
   12abc:	f8a0 4001 	strh.w	r4, [r0, #1]
	if (err == -EINVAL) {
   12ac0:	e456      	b.n	12370 <hci_cmd_handle+0x6c>
		le_conn_param_req_reply(cmd, evt);
   12ac2:	68aa      	ldr	r2, [r5, #8]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12ac4:	8911      	ldrh	r1, [r2, #8]
	handle = sys_le16_to_cpu(cmd->handle);
   12ac6:	8814      	ldrh	r4, [r2, #0]
	status = ll_conn_update(handle, 2, 0, interval_min, interval_max,
   12ac8:	8853      	ldrh	r3, [r2, #2]
   12aca:	9102      	str	r1, [sp, #8]
   12acc:	88d1      	ldrh	r1, [r2, #6]
   12ace:	9101      	str	r1, [sp, #4]
   12ad0:	8891      	ldrh	r1, [r2, #4]
   12ad2:	9100      	str	r1, [sp, #0]
   12ad4:	2200      	movs	r2, #0
   12ad6:	e7e0      	b.n	12a9a <hci_cmd_handle+0x796>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12ad8:	2109      	movs	r1, #9
   12ada:	f012 f808 	bl	24aee <bt_hci_cmd_complete_create>
   12ade:	2109      	movs	r1, #9
   12ae0:	4603      	mov	r3, r0
   12ae2:	3008      	adds	r0, #8
   12ae4:	9307      	str	r3, [sp, #28]
   12ae6:	f013 fd13 	bl	26510 <net_buf_simple_add>
	dst[0] = val;
   12aea:	248f      	movs	r4, #143	; 0x8f
	rp->status = 0x00;
   12aec:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   12aee:	21cc      	movs	r1, #204	; 0xcc
	dst[0] = val;
   12af0:	2230      	movs	r2, #48	; 0x30
   12af2:	7044      	strb	r4, [r0, #1]
	dst[1] = val >> 8;
   12af4:	7081      	strb	r1, [r0, #2]
	dst[0] = val;
   12af6:	70c2      	strb	r2, [r0, #3]
   12af8:	7003      	strb	r3, [r0, #0]
	dst[1] = val >> 8;
   12afa:	24ec      	movs	r4, #236	; 0xec
	dst[0] = val;
   12afc:	21c0      	movs	r1, #192	; 0xc0
	dst[1] = val >> 8;
   12afe:	2201      	movs	r2, #1
	return evt;
   12b00:	9d07      	ldr	r5, [sp, #28]
   12b02:	7104      	strb	r4, [r0, #4]
	dst[0] = val;
   12b04:	7141      	strb	r1, [r0, #5]
	dst[1] = val >> 8;
   12b06:	7182      	strb	r2, [r0, #6]
	dst[0] = val;
   12b08:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
   12b0a:	7203      	strb	r3, [r0, #8]
	if (err == -EINVAL) {
   12b0c:	e430      	b.n	12370 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12b0e:	68ab      	ldr	r3, [r5, #8]
   12b10:	881f      	ldrh	r7, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   12b12:	2200      	movs	r2, #0
   12b14:	2106      	movs	r1, #6
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12b16:	b2b8      	uxth	r0, r7
   12b18:	f006 fe72 	bl	19800 <ll_start_enc_req_send>
   12b1c:	e544      	b.n	125a8 <hci_cmd_handle+0x2a4>
	handle = sys_le16_to_cpu(cmd->handle);
   12b1e:	68aa      	ldr	r2, [r5, #8]
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
   12b20:	2100      	movs	r1, #0
	handle = sys_le16_to_cpu(cmd->handle);
   12b22:	f832 7b02 	ldrh.w	r7, [r2], #2
   12b26:	e7f6      	b.n	12b16 <hci_cmd_handle+0x812>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b28:	2109      	movs	r1, #9
   12b2a:	f011 ffe0 	bl	24aee <bt_hci_cmd_complete_create>
   12b2e:	2109      	movs	r1, #9
   12b30:	4603      	mov	r3, r0
   12b32:	3008      	adds	r0, #8
   12b34:	9307      	str	r3, [sp, #28]
   12b36:	f013 fceb 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12b3a:	2300      	movs	r3, #0
   12b3c:	f800 3b01 	strb.w	r3, [r0], #1
	lll_csrand_get(rp->rand, count);
   12b40:	2108      	movs	r1, #8
   12b42:	f008 f95b 	bl	1adfc <lll_csrand_get>
	return evt;
   12b46:	9d07      	ldr	r5, [sp, #28]
   12b48:	e412      	b.n	12370 <hci_cmd_handle+0x6c>
		le_encrypt(cmd, evt);
   12b4a:	68a8      	ldr	r0, [r5, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
   12b4c:	aa08      	add	r2, sp, #32
   12b4e:	2300      	movs	r3, #0
   12b50:	f100 0110 	add.w	r1, r0, #16
   12b54:	f009 fe52 	bl	1c7fc <ecb_encrypt>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b58:	2111      	movs	r1, #17
   12b5a:	8830      	ldrh	r0, [r6, #0]
   12b5c:	f011 ffc7 	bl	24aee <bt_hci_cmd_complete_create>
   12b60:	2111      	movs	r1, #17
   12b62:	4603      	mov	r3, r0
   12b64:	3008      	adds	r0, #8
   12b66:	9307      	str	r3, [sp, #28]
   12b68:	f013 fcd2 	bl	26510 <net_buf_simple_add>
	rp->status = 0x00;
   12b6c:	2300      	movs	r3, #0
   12b6e:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
   12b72:	2210      	movs	r2, #16
   12b74:	a908      	add	r1, sp, #32
   12b76:	f011 fc77 	bl	24468 <memcpy>
	return evt;
   12b7a:	9d07      	ldr	r5, [sp, #28]
   12b7c:	f7ff bbf8 	b.w	12370 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12b80:	68ab      	ldr	r3, [r5, #8]
	status = ll_feature_req_send(handle);
   12b82:	8818      	ldrh	r0, [r3, #0]
   12b84:	f003 f92a 	bl	15ddc <ll_feature_req_send>
   12b88:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12b8a:	8830      	ldrh	r0, [r6, #0]
   12b8c:	f011 ffc1 	bl	24b12 <bt_hci_cmd_status_create>
   12b90:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12b92:	f7ff bbed 	b.w	12370 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12b96:	68ab      	ldr	r3, [r5, #8]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b98:	2108      	movs	r1, #8
	handle = sys_le16_to_cpu(cmd->handle);
   12b9a:	881e      	ldrh	r6, [r3, #0]
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12b9c:	f011 ffa7 	bl	24aee <bt_hci_cmd_complete_create>
   12ba0:	2108      	movs	r1, #8
   12ba2:	4603      	mov	r3, r0
   12ba4:	4408      	add	r0, r1
   12ba6:	9307      	str	r3, [sp, #28]
   12ba8:	f013 fcb2 	bl	26510 <net_buf_simple_add>
   12bac:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
   12bae:	1ce1      	adds	r1, r4, #3
	handle = sys_le16_to_cpu(cmd->handle);
   12bb0:	b2b0      	uxth	r0, r6
	status = ll_chm_get(handle, rp->ch_map);
   12bb2:	f003 f8b1 	bl	15d18 <ll_chm_get>
	rp->status = status;
   12bb6:	7020      	strb	r0, [r4, #0]
	return evt;
   12bb8:	9d07      	ldr	r5, [sp, #28]
	rp->handle = sys_le16_to_cpu(handle);
   12bba:	f8a4 6001 	strh.w	r6, [r4, #1]
	if (err == -EINVAL) {
   12bbe:	f7ff bbd7 	b.w	12370 <hci_cmd_handle+0x6c>
		le_conn_update(cmd, evt);
   12bc2:	68a9      	ldr	r1, [r5, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_min,
   12bc4:	890a      	ldrh	r2, [r1, #8]
   12bc6:	884b      	ldrh	r3, [r1, #2]
   12bc8:	8808      	ldrh	r0, [r1, #0]
   12bca:	9202      	str	r2, [sp, #8]
   12bcc:	88ca      	ldrh	r2, [r1, #6]
   12bce:	9201      	str	r2, [sp, #4]
   12bd0:	8889      	ldrh	r1, [r1, #4]
   12bd2:	9100      	str	r1, [sp, #0]
   12bd4:	2200      	movs	r2, #0
   12bd6:	4611      	mov	r1, r2
   12bd8:	f003 f80a 	bl	15bf0 <ll_conn_update>
   12bdc:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12bde:	8830      	ldrh	r0, [r6, #0]
   12be0:	f011 ff97 	bl	24b12 <bt_hci_cmd_status_create>
   12be4:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12be6:	f7ff bbc3 	b.w	12370 <hci_cmd_handle+0x6c>
		disconnect(cmd, evt);
   12bea:	68ab      	ldr	r3, [r5, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
   12bec:	7899      	ldrb	r1, [r3, #2]
   12bee:	8818      	ldrh	r0, [r3, #0]
   12bf0:	f003 f8b2 	bl	15d58 <ll_terminate_ind_send>
   12bf4:	4601      	mov	r1, r0
	return bt_hci_cmd_status_create(_opcode, status);
   12bf6:	8830      	ldrh	r0, [r6, #0]
   12bf8:	f011 ff8b 	bl	24b12 <bt_hci_cmd_status_create>
   12bfc:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12bfe:	f7ff bbb7 	b.w	12370 <hci_cmd_handle+0x6c>
	return ((uint64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
   12c02:	68aa      	ldr	r2, [r5, #8]
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
   12c04:	4b01      	ldr	r3, [pc, #4]	; (12c0c <hci_cmd_handle+0x908>)
   12c06:	e68e      	b.n	12926 <hci_cmd_handle+0x622>
   12c08:	200001b8 	.word	0x200001b8
   12c0c:	2000ab58 	.word	0x2000ab58
	event_mask = DEFAULT_EVENT_MASK;
   12c10:	4b24      	ldr	r3, [pc, #144]	; (12ca4 <hci_cmd_handle+0x9a0>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12c12:	4a25      	ldr	r2, [pc, #148]	; (12ca8 <hci_cmd_handle+0x9a4>)
	event_mask = DEFAULT_EVENT_MASK;
   12c14:	f04f 30ff 	mov.w	r0, #4294967295
   12c18:	f641 71ff 	movw	r1, #8191	; 0x1fff
   12c1c:	e9c3 0100 	strd	r0, r1, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12c20:	4b22      	ldr	r3, [pc, #136]	; (12cac <hci_cmd_handle+0x9a8>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   12c22:	2000      	movs	r0, #0
   12c24:	2100      	movs	r1, #0
   12c26:	e9c2 0100 	strd	r0, r1, [r2]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   12c2a:	201f      	movs	r0, #31
   12c2c:	2100      	movs	r1, #0
   12c2e:	e9c3 0100 	strd	r0, r1, [r3]
		ll_reset();
   12c32:	f001 f857 	bl	13ce4 <ll_reset>
	buf = bt_hci_cmd_complete_create(_opcode, sizeof(*ccst));
   12c36:	2101      	movs	r1, #1
   12c38:	8830      	ldrh	r0, [r6, #0]
   12c3a:	f011 ff58 	bl	24aee <bt_hci_cmd_complete_create>
   12c3e:	2101      	movs	r1, #1
   12c40:	4605      	mov	r5, r0
   12c42:	3008      	adds	r0, #8
   12c44:	f013 fc64 	bl	26510 <net_buf_simple_add>
	conn_count = 0U;
   12c48:	4a19      	ldr	r2, [pc, #100]	; (12cb0 <hci_cmd_handle+0x9ac>)
	ccst->status = status;
   12c4a:	2300      	movs	r3, #0
   12c4c:	7003      	strb	r3, [r0, #0]
	conn_count = 0U;
   12c4e:	6013      	str	r3, [r2, #0]
}
   12c50:	f7ff bb8e 	b.w	12370 <hci_cmd_handle+0x6c>
	handle = sys_le16_to_cpu(cmd->handle);
   12c54:	68ab      	ldr	r3, [r5, #8]
   12c56:	881d      	ldrh	r5, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
   12c58:	a908      	add	r1, sp, #32
   12c5a:	b2a8      	uxth	r0, r5
   12c5c:	f003 f9fa 	bl	16054 <ll_apto_get>
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12c60:	2105      	movs	r1, #5
	status = ll_apto_get(handle, &auth_payload_timeout);
   12c62:	4604      	mov	r4, r0
	*buf = bt_hci_cmd_complete_create(_opcode, plen);
   12c64:	8830      	ldrh	r0, [r6, #0]
   12c66:	f011 ff42 	bl	24aee <bt_hci_cmd_complete_create>
   12c6a:	2105      	movs	r1, #5
   12c6c:	4603      	mov	r3, r0
   12c6e:	3008      	adds	r0, #8
   12c70:	9307      	str	r3, [sp, #28]
   12c72:	f013 fc4d 	bl	26510 <net_buf_simple_add>
	rp->status = status;
   12c76:	7004      	strb	r4, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
   12c78:	f8a0 5001 	strh.w	r5, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   12c7c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
	return evt;
   12c80:	9d07      	ldr	r5, [sp, #28]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
   12c82:	f8a0 3003 	strh.w	r3, [r0, #3]
}
   12c86:	f7ff bb73 	b.w	12370 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12c8a:	2112      	movs	r1, #18
   12c8c:	f011 ff41 	bl	24b12 <bt_hci_cmd_status_create>
   12c90:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12c92:	f7ff bb6d 	b.w	12370 <hci_cmd_handle+0x6c>
	return bt_hci_cmd_status_create(_opcode, status);
   12c96:	2111      	movs	r1, #17
   12c98:	f011 ff3b 	bl	24b12 <bt_hci_cmd_status_create>
   12c9c:	4605      	mov	r5, r0
	if (err == -EINVAL) {
   12c9e:	f7ff bb67 	b.w	12370 <hci_cmd_handle+0x6c>
   12ca2:	bf00      	nop
   12ca4:	200001b0 	.word	0x200001b0
   12ca8:	2000ab58 	.word	0x2000ab58
   12cac:	200001b8 	.word	0x200001b8
   12cb0:	2000d9ec 	.word	0x2000d9ec

00012cb4 <hci_acl_handle>:
{
   12cb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (buf->len < sizeof(*acl)) {
   12cb8:	8983      	ldrh	r3, [r0, #12]
	*evt = NULL;
   12cba:	2200      	movs	r2, #0
	if (buf->len < sizeof(*acl)) {
   12cbc:	2b03      	cmp	r3, #3
	*evt = NULL;
   12cbe:	600a      	str	r2, [r1, #0]
	if (buf->len < sizeof(*acl)) {
   12cc0:	d944      	bls.n	12d4c <hci_acl_handle+0x98>
	return net_buf_simple_pull_mem(&buf->b, len);
   12cc2:	4605      	mov	r5, r0
   12cc4:	460f      	mov	r7, r1
   12cc6:	3008      	adds	r0, #8
   12cc8:	2104      	movs	r1, #4
   12cca:	f013 fc48 	bl	2655e <net_buf_simple_pull_mem>
	if (buf->len < len) {
   12cce:	89ab      	ldrh	r3, [r5, #12]
	len = sys_le16_to_cpu(acl->len);
   12cd0:	f8b0 8002 	ldrh.w	r8, [r0, #2]
	handle = sys_le16_to_cpu(acl->handle);
   12cd4:	f8b0 9000 	ldrh.w	r9, [r0]
	if (buf->len < len) {
   12cd8:	4543      	cmp	r3, r8
   12cda:	d344      	bcc.n	12d66 <hci_acl_handle+0xb2>
	node_tx = ll_tx_mem_acquire();
   12cdc:	f002 ff30 	bl	15b40 <ll_tx_mem_acquire>
	flags = bt_acl_flags(handle);
   12ce0:	ea4f 3619 	mov.w	r6, r9, lsr #12
	if (!node_tx) {
   12ce4:	4604      	mov	r4, r0
   12ce6:	2800      	cmp	r0, #0
   12ce8:	d041      	beq.n	12d6e <hci_acl_handle+0xba>
	if (bt_acl_flags_bc(flags) != BT_ACL_POINT_TO_POINT) {
   12cea:	08b3      	lsrs	r3, r6, #2
   12cec:	d102      	bne.n	12cf4 <hci_acl_handle+0x40>
	switch (bt_acl_flags_pb(flags)) {
   12cee:	b33e      	cbz	r6, 12d40 <hci_acl_handle+0x8c>
   12cf0:	2e01      	cmp	r6, #1
   12cf2:	d003      	beq.n	12cfc <hci_acl_handle+0x48>
		return -EINVAL;
   12cf4:	f06f 0015 	mvn.w	r0, #21
}
   12cf8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12cfc:	7903      	ldrb	r3, [r0, #4]
   12cfe:	f366 0301 	bfi	r3, r6, #0, #2
   12d02:	7103      	strb	r3, [r0, #4]
	pdu_data->len = len;
   12d04:	f884 8005 	strb.w	r8, [r4, #5]
	memcpy(&pdu_data->lldata[0], buf->data, len);
   12d08:	68a9      	ldr	r1, [r5, #8]
   12d0a:	4642      	mov	r2, r8
   12d0c:	1de0      	adds	r0, r4, #7
   12d0e:	f011 fbab 	bl	24468 <memcpy>
	if (ll_tx_mem_enqueue(handle, node_tx)) {
   12d12:	4621      	mov	r1, r4
   12d14:	f3c9 000b 	ubfx	r0, r9, #0, #12
   12d18:	f002 ff1e 	bl	15b58 <ll_tx_mem_enqueue>
   12d1c:	2800      	cmp	r0, #0
   12d1e:	d0eb      	beq.n	12cf8 <hci_acl_handle+0x44>
   12d20:	4b28      	ldr	r3, [pc, #160]	; (12dc4 <hci_acl_handle+0x110>)
   12d22:	4929      	ldr	r1, [pc, #164]	; (12dc8 <hci_acl_handle+0x114>)
		BT_ERR("Invalid Tx Enqueue");
   12d24:	4829      	ldr	r0, [pc, #164]	; (12dcc <hci_acl_handle+0x118>)
   12d26:	1ac9      	subs	r1, r1, r3
   12d28:	08c9      	lsrs	r1, r1, #3
   12d2a:	0189      	lsls	r1, r1, #6
   12d2c:	f041 0101 	orr.w	r1, r1, #1
   12d30:	f00f fb8e 	bl	22450 <log_0>
		ll_tx_mem_release(node_tx);
   12d34:	4620      	mov	r0, r4
   12d36:	f002 ff09 	bl	15b4c <ll_tx_mem_release>
		return -EINVAL;
   12d3a:	f06f 0015 	mvn.w	r0, #21
   12d3e:	e7db      	b.n	12cf8 <hci_acl_handle+0x44>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
   12d40:	7903      	ldrb	r3, [r0, #4]
   12d42:	2202      	movs	r2, #2
   12d44:	f362 0301 	bfi	r3, r2, #0, #2
   12d48:	7103      	strb	r3, [r0, #4]
		break;
   12d4a:	e7db      	b.n	12d04 <hci_acl_handle+0x50>
   12d4c:	491e      	ldr	r1, [pc, #120]	; (12dc8 <hci_acl_handle+0x114>)
   12d4e:	4b1d      	ldr	r3, [pc, #116]	; (12dc4 <hci_acl_handle+0x110>)
		BT_ERR("No HCI ACL header");
   12d50:	481f      	ldr	r0, [pc, #124]	; (12dd0 <hci_acl_handle+0x11c>)
   12d52:	1ac9      	subs	r1, r1, r3
   12d54:	08c9      	lsrs	r1, r1, #3
		BT_ERR("Invalid HCI ACL packet length");
   12d56:	0189      	lsls	r1, r1, #6
   12d58:	f041 0101 	orr.w	r1, r1, #1
   12d5c:	f00f fb78 	bl	22450 <log_0>
		return -EINVAL;
   12d60:	f06f 0015 	mvn.w	r0, #21
   12d64:	e7c8      	b.n	12cf8 <hci_acl_handle+0x44>
   12d66:	4918      	ldr	r1, [pc, #96]	; (12dc8 <hci_acl_handle+0x114>)
   12d68:	4b16      	ldr	r3, [pc, #88]	; (12dc4 <hci_acl_handle+0x110>)
		BT_ERR("Invalid HCI ACL packet length");
   12d6a:	481a      	ldr	r0, [pc, #104]	; (12dd4 <hci_acl_handle+0x120>)
   12d6c:	e7f1      	b.n	12d52 <hci_acl_handle+0x9e>
   12d6e:	4b15      	ldr	r3, [pc, #84]	; (12dc4 <hci_acl_handle+0x110>)
   12d70:	4915      	ldr	r1, [pc, #84]	; (12dc8 <hci_acl_handle+0x114>)
		BT_ERR("Tx Buffer Overflow");
   12d72:	4819      	ldr	r0, [pc, #100]	; (12dd8 <hci_acl_handle+0x124>)
   12d74:	1ac9      	subs	r1, r1, r3
   12d76:	08c9      	lsrs	r1, r1, #3
   12d78:	0189      	lsls	r1, r1, #6
   12d7a:	f041 0101 	orr.w	r1, r1, #1
   12d7e:	f00f fb67 	bl	22450 <log_0>
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
   12d82:	4b16      	ldr	r3, [pc, #88]	; (12ddc <hci_acl_handle+0x128>)
   12d84:	681b      	ldr	r3, [r3, #0]
   12d86:	019b      	lsls	r3, r3, #6
   12d88:	d402      	bmi.n	12d90 <hci_acl_handle+0xdc>
		return -ENOBUFS;
   12d8a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   12d8e:	e7b3      	b.n	12cf8 <hci_acl_handle+0x44>
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
   12d90:	f04f 33ff 	mov.w	r3, #4294967295
   12d94:	f04f 32ff 	mov.w	r2, #4294967295
   12d98:	2001      	movs	r0, #1
   12d9a:	f7f5 fd83 	bl	88a4 <bt_buf_get_rx>
	return net_buf_simple_add(&buf->b, len);
   12d9e:	2102      	movs	r1, #2
   12da0:	6038      	str	r0, [r7, #0]
   12da2:	3008      	adds	r0, #8
   12da4:	f013 fbb4 	bl	26510 <net_buf_simple_add>
	hdr->len = len;
   12da8:	2401      	movs	r4, #1
	hdr->evt = evt;
   12daa:	221a      	movs	r2, #26
   12dac:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   12dae:	7044      	strb	r4, [r0, #1]
   12db0:	6838      	ldr	r0, [r7, #0]
   12db2:	4621      	mov	r1, r4
   12db4:	3008      	adds	r0, #8
   12db6:	f013 fbab 	bl	26510 <net_buf_simple_add>
   12dba:	4603      	mov	r3, r0
		return -ENOBUFS;
   12dbc:	f06f 0036 	mvn.w	r0, #54	; 0x36
	ep->link_type = BT_OVERFLOW_LINK_ACL;
   12dc0:	701c      	strb	r4, [r3, #0]
   12dc2:	e799      	b.n	12cf8 <hci_acl_handle+0x44>
   12dc4:	000278c0 	.word	0x000278c0
   12dc8:	00027900 	.word	0x00027900
   12dcc:	000285a0 	.word	0x000285a0
   12dd0:	00028558 	.word	0x00028558
   12dd4:	0002856c 	.word	0x0002856c
   12dd8:	0002858c 	.word	0x0002858c
   12ddc:	200001b0 	.word	0x200001b0

00012de0 <hci_disconn_complete_encode>:
{
   12de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
   12de2:	4b0e      	ldr	r3, [pc, #56]	; (12e1c <hci_disconn_complete_encode+0x3c>)
   12de4:	681b      	ldr	r3, [r3, #0]
   12de6:	06db      	lsls	r3, r3, #27
   12de8:	d400      	bmi.n	12dec <hci_disconn_complete_encode+0xc>
}
   12dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12dec:	f102 0408 	add.w	r4, r2, #8
   12df0:	4605      	mov	r5, r0
   12df2:	460e      	mov	r6, r1
   12df4:	4620      	mov	r0, r4
   12df6:	2102      	movs	r1, #2
   12df8:	f013 fb8a 	bl	26510 <net_buf_simple_add>
   12dfc:	4603      	mov	r3, r0
	hdr->len = len;
   12dfe:	2104      	movs	r1, #4
	hdr->evt = evt;
   12e00:	2205      	movs	r2, #5
	hdr->len = len;
   12e02:	7059      	strb	r1, [r3, #1]
	hdr->evt = evt;
   12e04:	701a      	strb	r2, [r3, #0]
   12e06:	4620      	mov	r0, r4
   12e08:	f013 fb82 	bl	26510 <net_buf_simple_add>
   12e0c:	2700      	movs	r7, #0
	ep->status = 0x00;
   12e0e:	7007      	strb	r7, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   12e10:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((uint8_t *)pdu_data);
   12e14:	782b      	ldrb	r3, [r5, #0]
   12e16:	70c3      	strb	r3, [r0, #3]
}
   12e18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   12e1a:	bf00      	nop
   12e1c:	200001b0 	.word	0x200001b0

00012e20 <hci_disconn_complete_process>:
	conn_count--;
   12e20:	4a02      	ldr	r2, [pc, #8]	; (12e2c <hci_disconn_complete_process+0xc>)
   12e22:	6813      	ldr	r3, [r2, #0]
   12e24:	3b01      	subs	r3, #1
   12e26:	6013      	str	r3, [r2, #0]
}
   12e28:	4770      	bx	lr
   12e2a:	bf00      	nop
   12e2c:	2000d9ec 	.word	0x2000d9ec

00012e30 <hci_acl_encode>:
	uint16_t handle;
	uint8_t *data;

	handle = node_rx->hdr.handle;

	switch (pdu_data->ll_id) {
   12e30:	7f03      	ldrb	r3, [r0, #28]
   12e32:	f003 0303 	and.w	r3, r3, #3
   12e36:	3b01      	subs	r3, #1
   12e38:	2b01      	cmp	r3, #1
{
   12e3a:	b570      	push	{r4, r5, r6, lr}
	switch (pdu_data->ll_id) {
   12e3c:	d90d      	bls.n	12e5a <hci_acl_encode+0x2a>
		}
#endif
		break;

	default:
		LL_ASSERT(0);
   12e3e:	4a16      	ldr	r2, [pc, #88]	; (12e98 <hci_acl_encode+0x68>)
   12e40:	4916      	ldr	r1, [pc, #88]	; (12e9c <hci_acl_encode+0x6c>)
   12e42:	4817      	ldr	r0, [pc, #92]	; (12ea0 <hci_acl_encode+0x70>)
   12e44:	f241 737a 	movw	r3, #6010	; 0x177a
   12e48:	f00e fe6c 	bl	21b24 <printk>
   12e4c:	4040      	eors	r0, r0
   12e4e:	f380 8811 	msr	BASEPRI, r0
   12e52:	f04f 0003 	mov.w	r0, #3
   12e56:	df02      	svc	2
		break;
	}
}
   12e58:	bd70      	pop	{r4, r5, r6, pc}
   12e5a:	4604      	mov	r4, r0
   12e5c:	f101 0508 	add.w	r5, r1, #8
   12e60:	4628      	mov	r0, r5
   12e62:	2104      	movs	r1, #4
	handle = node_rx->hdr.handle;
   12e64:	88e6      	ldrh	r6, [r4, #6]
   12e66:	f013 fb53 	bl	26510 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
   12e6a:	7f23      	ldrb	r3, [r4, #28]
   12e6c:	f003 0303 	and.w	r3, r3, #3
   12e70:	2b02      	cmp	r3, #2
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
   12e72:	bf0c      	ite	eq
   12e74:	f446 5600 	orreq.w	r6, r6, #8192	; 0x2000
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
   12e78:	f446 5680 	orrne.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
   12e7c:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
   12e7e:	7f61      	ldrb	r1, [r4, #29]
   12e80:	8041      	strh	r1, [r0, #2]
   12e82:	4628      	mov	r0, r5
   12e84:	f013 fb44 	bl	26510 <net_buf_simple_add>
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12e88:	7f62      	ldrb	r2, [r4, #29]
   12e8a:	f104 011f 	add.w	r1, r4, #31
}
   12e8e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		memcpy(data, pdu_data->lldata, pdu_data->len);
   12e92:	f011 bae9 	b.w	24468 <memcpy>
   12e96:	bf00      	nop
   12e98:	000285b4 	.word	0x000285b4
   12e9c:	0002849c 	.word	0x0002849c
   12ea0:	00028404 	.word	0x00028404

00012ea4 <hci_evt_encode>:
#endif /* CONFIG_BT_CONN */

void hci_evt_encode(struct node_rx_pdu *node_rx, struct net_buf *buf)
{
   12ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct pdu_data *pdu_data = (void *)node_rx->pdu;

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12ea8:	f890 c004 	ldrb.w	ip, [r0, #4]
   12eac:	f1bc 0f03 	cmp.w	ip, #3
{
   12eb0:	4604      	mov	r4, r0
   12eb2:	b088      	sub	sp, #32
   12eb4:	460d      	mov	r5, r1
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
   12eb6:	f100 001c 	add.w	r0, r0, #28
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   12eba:	d00f      	beq.n	12edc <hci_evt_encode+0x38>
		encode_control(node_rx, pdu_data, buf);
   12ebc:	f1ac 0c13 	sub.w	ip, ip, #19
   12ec0:	88e6      	ldrh	r6, [r4, #6]
	switch (node_rx->hdr.type) {
   12ec2:	f1bc 0f06 	cmp.w	ip, #6
   12ec6:	f200 82be 	bhi.w	13446 <hci_evt_encode+0x5a2>
   12eca:	e8df f01c 	tbh	[pc, ip, lsl #1]
   12ece:	0022      	.short	0x0022
   12ed0:	0083007c 	.word	0x0083007c
   12ed4:	00c200ac 	.word	0x00c200ac
   12ed8:	00f300d4 	.word	0x00f300d4
	} else if (IS_ENABLED(CONFIG_BT_CONN)) {
		encode_data_ctrl(node_rx, pdu_data, buf);
   12edc:	7fe3      	ldrb	r3, [r4, #31]
   12ede:	88e6      	ldrh	r6, [r4, #6]
	switch (pdu_data->llctrl.opcode) {
   12ee0:	3b03      	subs	r3, #3
   12ee2:	2b12      	cmp	r3, #18
   12ee4:	f200 8116 	bhi.w	13114 <hci_evt_encode+0x270>
   12ee8:	e8df f013 	tbh	[pc, r3, lsl #1]
   12eec:	011401e8 	.word	0x011401e8
   12ef0:	02170114 	.word	0x02170114
   12ef4:	01140177 	.word	0x01140177
   12ef8:	01140189 	.word	0x01140189
   12efc:	01140114 	.word	0x01140114
   12f00:	011401a8 	.word	0x011401a8
   12f04:	011401c3 	.word	0x011401c3
   12f08:	01140114 	.word	0x01140114
   12f0c:	01220114 	.word	0x01220114
   12f10:	0122      	.short	0x0122
	uint8_t status = cc->status;
   12f12:	7f27      	ldrb	r7, [r4, #28]
	if (!status) {
   12f14:	2f00      	cmp	r7, #0
   12f16:	f000 8219 	beq.w	1334c <hci_evt_encode+0x4a8>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12f1a:	4bbd      	ldr	r3, [pc, #756]	; (13210 <hci_evt_encode+0x36c>)
   12f1c:	685b      	ldr	r3, [r3, #4]
   12f1e:	009a      	lsls	r2, r3, #2
   12f20:	d54e      	bpl.n	12fc0 <hci_evt_encode+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12f22:	4bbc      	ldr	r3, [pc, #752]	; (13214 <hci_evt_encode+0x370>)
   12f24:	681b      	ldr	r3, [r3, #0]
   12f26:	f240 2201 	movw	r2, #513	; 0x201
   12f2a:	4213      	tst	r3, r2
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
   12f2c:	f403 7800 	and.w	r8, r3, #512	; 0x200
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
   12f30:	d046      	beq.n	12fc0 <hci_evt_encode+0x11c>
	if (!status) {
   12f32:	2f00      	cmp	r7, #0
   12f34:	f040 821d 	bne.w	13372 <hci_evt_encode+0x4ce>
		conn_count++;
   12f38:	4ab7      	ldr	r2, [pc, #732]	; (13218 <hci_evt_encode+0x374>)
   12f3a:	6813      	ldr	r3, [r2, #0]
   12f3c:	3301      	adds	r3, #1
   12f3e:	6013      	str	r3, [r2, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   12f40:	f1b8 0f00 	cmp.w	r8, #0
   12f44:	f000 8232 	beq.w	133ac <hci_evt_encode+0x508>
   12f48:	3508      	adds	r5, #8
   12f4a:	2102      	movs	r1, #2
   12f4c:	4628      	mov	r0, r5
   12f4e:	f013 fadf 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   12f52:	233e      	movs	r3, #62	; 0x3e
   12f54:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12f56:	231f      	movs	r3, #31
   12f58:	7043      	strb	r3, [r0, #1]
   12f5a:	2101      	movs	r1, #1
   12f5c:	4628      	mov	r0, r5
   12f5e:	f013 fad7 	bl	26510 <net_buf_simple_add>
   12f62:	4603      	mov	r3, r0
	me->subevent = subevt;
   12f64:	220a      	movs	r2, #10
   12f66:	701a      	strb	r2, [r3, #0]
   12f68:	4628      	mov	r0, r5
   12f6a:	211e      	movs	r1, #30
   12f6c:	f013 fad0 	bl	26510 <net_buf_simple_add>
		leecc->status = 0x00;
   12f70:	7007      	strb	r7, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
   12f72:	f8a0 6001 	strh.w	r6, [r0, #1]
		leecc->role = cc->role;
   12f76:	7f63      	ldrb	r3, [r4, #29]
   12f78:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = cc->peer_addr_type;
   12f7a:	7fa3      	ldrb	r3, [r4, #30]
   12f7c:	7103      	strb	r3, [r0, #4]
   12f7e:	4605      	mov	r5, r0
		memcpy(&leecc->peer_addr.a.val[0], &cc->peer_addr[0],
   12f80:	2206      	movs	r2, #6
   12f82:	f104 011f 	add.w	r1, r4, #31
   12f86:	3005      	adds	r0, #5
   12f88:	f011 fa6e 	bl	24468 <memcpy>
		memcpy(&leecc->local_rpa.val[0], &cc->local_rpa[0],
   12f8c:	2206      	movs	r2, #6
   12f8e:	f104 012b 	add.w	r1, r4, #43	; 0x2b
   12f92:	f105 000b 	add.w	r0, r5, #11
   12f96:	f011 fa67 	bl	24468 <memcpy>
		memcpy(&leecc->peer_rpa.val[0], &cc->peer_rpa[0],
   12f9a:	2206      	movs	r2, #6
   12f9c:	f104 0125 	add.w	r1, r4, #37	; 0x25
   12fa0:	f105 0011 	add.w	r0, r5, #17
   12fa4:	f011 fa60 	bl	24468 <memcpy>
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12fa8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12faa:	8e61      	ldrh	r1, [r4, #50]	; 0x32
		leecc->latency = sys_cpu_to_le16(cc->latency);
   12fac:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   12fae:	f8a5 2019 	strh.w	r2, [r5, #25]
		leecc->interval = sys_cpu_to_le16(cc->interval);
   12fb2:	f8a5 1017 	strh.w	r1, [r5, #23]
		leecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   12fb6:	f8a5 301b 	strh.w	r3, [r5, #27]
		leecc->clock_accuracy = cc->sca;
   12fba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   12fbe:	776b      	strb	r3, [r5, #29]
	}
}
   12fc0:	b008      	add	sp, #32
   12fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12fc6:	460a      	mov	r2, r1
   12fc8:	4631      	mov	r1, r6
}
   12fca:	b008      	add	sp, #32
   12fcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		hci_disconn_complete_encode(pdu_data, handle, buf);
   12fd0:	f7ff bf06 	b.w	12de0 <hci_disconn_complete_encode>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fd4:	4b8e      	ldr	r3, [pc, #568]	; (13210 <hci_evt_encode+0x36c>)
   12fd6:	685b      	ldr	r3, [r3, #4]
   12fd8:	009b      	lsls	r3, r3, #2
   12fda:	d5f1      	bpl.n	12fc0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
   12fdc:	4b8d      	ldr	r3, [pc, #564]	; (13214 <hci_evt_encode+0x370>)
   12fde:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   12fe0:	075f      	lsls	r7, r3, #29
   12fe2:	d5ed      	bpl.n	12fc0 <hci_evt_encode+0x11c>
   12fe4:	3508      	adds	r5, #8
   12fe6:	2102      	movs	r1, #2
   12fe8:	4628      	mov	r0, r5
   12fea:	f013 fa91 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   12fee:	233e      	movs	r3, #62	; 0x3e
   12ff0:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   12ff2:	230a      	movs	r3, #10
   12ff4:	7043      	strb	r3, [r0, #1]
   12ff6:	2101      	movs	r1, #1
   12ff8:	4628      	mov	r0, r5
   12ffa:	f013 fa89 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   12ffe:	2303      	movs	r3, #3
   13000:	7003      	strb	r3, [r0, #0]
   13002:	2109      	movs	r1, #9
   13004:	4628      	mov	r0, r5
   13006:	f013 fa83 	bl	26510 <net_buf_simple_add>
	sep->status = cu->status;
   1300a:	7f23      	ldrb	r3, [r4, #28]
   1300c:	7003      	strb	r3, [r0, #0]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1300e:	8be1      	ldrh	r1, [r4, #30]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13010:	8c22      	ldrh	r2, [r4, #32]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   13012:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   13014:	f8a0 3007 	strh.w	r3, [r0, #7]
	sep->handle = sys_cpu_to_le16(handle);
   13018:	f8a0 6001 	strh.w	r6, [r0, #1]
	sep->interval = sys_cpu_to_le16(cu->interval);
   1301c:	f8a0 1003 	strh.w	r1, [r0, #3]
	sep->latency = sys_cpu_to_le16(cu->latency);
   13020:	f8a0 2005 	strh.w	r2, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(cu->timeout);
   13024:	e7cc      	b.n	12fc0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
   13026:	4b7a      	ldr	r3, [pc, #488]	; (13210 <hci_evt_encode+0x36c>)
   13028:	685b      	ldr	r3, [r3, #4]
   1302a:	0418      	lsls	r0, r3, #16
   1302c:	f04f 0400 	mov.w	r4, #0
   13030:	d5c6      	bpl.n	12fc0 <hci_evt_encode+0x11c>
   13032:	3508      	adds	r5, #8
   13034:	2102      	movs	r1, #2
   13036:	4628      	mov	r0, r5
   13038:	f013 fa6a 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   1303c:	2330      	movs	r3, #48	; 0x30
	hdr->len = len;
   1303e:	2103      	movs	r1, #3
	hdr->evt = evt;
   13040:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13042:	7041      	strb	r1, [r0, #1]
   13044:	4628      	mov	r0, r5
   13046:	f013 fa63 	bl	26510 <net_buf_simple_add>
	ep->status = 0x00;
   1304a:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1304c:	f8a0 6001 	strh.w	r6, [r0, #1]
   13050:	e7b6      	b.n	12fc0 <hci_evt_encode+0x11c>
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
   13052:	4b72      	ldr	r3, [pc, #456]	; (1321c <hci_evt_encode+0x378>)
   13054:	681b      	ldr	r3, [r3, #0]
   13056:	0219      	lsls	r1, r3, #8
   13058:	d5b2      	bpl.n	12fc0 <hci_evt_encode+0x11c>
   1305a:	3508      	adds	r5, #8
   1305c:	2102      	movs	r1, #2
   1305e:	4628      	mov	r0, r5
   13060:	f013 fa56 	bl	26510 <net_buf_simple_add>
	hdr->len = len;
   13064:	2102      	movs	r1, #2
	hdr->evt = evt;
   13066:	2357      	movs	r3, #87	; 0x57
   13068:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1306a:	7041      	strb	r1, [r0, #1]
   1306c:	4628      	mov	r0, r5
   1306e:	f013 fa4f 	bl	26510 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
   13072:	8006      	strh	r6, [r0, #0]
   13074:	e7a4      	b.n	12fc0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13076:	4b66      	ldr	r3, [pc, #408]	; (13210 <hci_evt_encode+0x36c>)
   13078:	685b      	ldr	r3, [r3, #4]
   1307a:	009a      	lsls	r2, r3, #2
   1307c:	d5a0      	bpl.n	12fc0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
   1307e:	4b65      	ldr	r3, [pc, #404]	; (13214 <hci_evt_encode+0x370>)
   13080:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13082:	031b      	lsls	r3, r3, #12
   13084:	d59c      	bpl.n	12fc0 <hci_evt_encode+0x11c>
   13086:	3508      	adds	r5, #8
   13088:	2102      	movs	r1, #2
   1308a:	4628      	mov	r0, r5
   1308c:	f013 fa40 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   13090:	233e      	movs	r3, #62	; 0x3e
   13092:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13094:	2304      	movs	r3, #4
   13096:	7043      	strb	r3, [r0, #1]
   13098:	2101      	movs	r1, #1
   1309a:	4628      	mov	r0, r5
   1309c:	f013 fa38 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   130a0:	2314      	movs	r3, #20
   130a2:	7003      	strb	r3, [r0, #0]
   130a4:	2103      	movs	r1, #3
   130a6:	4628      	mov	r0, r5
   130a8:	f013 fa32 	bl	26510 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   130ac:	8006      	strh	r6, [r0, #0]
	sep->chan_sel_algo = cs->csa;
   130ae:	7f23      	ldrb	r3, [r4, #28]
   130b0:	7083      	strb	r3, [r0, #2]
   130b2:	e785      	b.n	12fc0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   130b4:	4b56      	ldr	r3, [pc, #344]	; (13210 <hci_evt_encode+0x36c>)
   130b6:	685b      	ldr	r3, [r3, #4]
   130b8:	009f      	lsls	r7, r3, #2
   130ba:	d503      	bpl.n	130c4 <hci_evt_encode+0x220>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
   130bc:	4b55      	ldr	r3, [pc, #340]	; (13214 <hci_evt_encode+0x370>)
   130be:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   130c0:	0518      	lsls	r0, r3, #20
   130c2:	d45c      	bmi.n	1317e <hci_evt_encode+0x2da>
   130c4:	7f62      	ldrb	r2, [r4, #29]
   130c6:	7fa0      	ldrb	r0, [r4, #30]
   130c8:	4955      	ldr	r1, [pc, #340]	; (13220 <hci_evt_encode+0x37c>)
   130ca:	4b56      	ldr	r3, [pc, #344]	; (13224 <hci_evt_encode+0x380>)
		BT_WARN("handle: 0x%04x, status: %x, tx: %x, rx: %x.", handle,
   130cc:	7f24      	ldrb	r4, [r4, #28]
   130ce:	2a00      	cmp	r2, #0
   130d0:	fa92 f2a2 	rbit	r2, r2
   130d4:	fab2 f282 	clz	r2, r2
   130d8:	eba3 0301 	sub.w	r3, r3, r1
   130dc:	bf08      	it	eq
   130de:	f04f 32ff 	moveq.w	r2, #4294967295
   130e2:	2800      	cmp	r0, #0
   130e4:	fa90 f0a0 	rbit	r0, r0
   130e8:	fab0 f080 	clz	r0, r0
   130ec:	ea4f 03d3 	mov.w	r3, r3, lsr #3
   130f0:	bf08      	it	eq
   130f2:	f04f 30ff 	moveq.w	r0, #4294967295
   130f6:	1c51      	adds	r1, r2, #1
   130f8:	3001      	adds	r0, #1
   130fa:	019b      	lsls	r3, r3, #6
   130fc:	9007      	str	r0, [sp, #28]
   130fe:	9106      	str	r1, [sp, #24]
   13100:	4849      	ldr	r0, [pc, #292]	; (13228 <hci_evt_encode+0x384>)
   13102:	f043 0302 	orr.w	r3, r3, #2
   13106:	2204      	movs	r2, #4
   13108:	a904      	add	r1, sp, #16
   1310a:	e9cd 6404 	strd	r6, r4, [sp, #16]
   1310e:	f00f f9f5 	bl	224fc <log_n>
		return;
   13112:	e755      	b.n	12fc0 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   13114:	4a45      	ldr	r2, [pc, #276]	; (1322c <hci_evt_encode+0x388>)
   13116:	4946      	ldr	r1, [pc, #280]	; (13230 <hci_evt_encode+0x38c>)
   13118:	4846      	ldr	r0, [pc, #280]	; (13234 <hci_evt_encode+0x390>)
   1311a:	f241 734e 	movw	r3, #5966	; 0x174e
   1311e:	f00e fd01 	bl	21b24 <printk>
   13122:	4040      	eors	r0, r0
   13124:	f380 8811 	msr	BASEPRI, r0
   13128:	f04f 0003 	mov.w	r0, #3
   1312c:	df02      	svc	2
}
   1312e:	e747      	b.n	12fc0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13130:	4b37      	ldr	r3, [pc, #220]	; (13210 <hci_evt_encode+0x36c>)
   13132:	685b      	ldr	r3, [r3, #4]
   13134:	009a      	lsls	r2, r3, #2
   13136:	f57f af43 	bpl.w	12fc0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
   1313a:	4b36      	ldr	r3, [pc, #216]	; (13214 <hci_evt_encode+0x370>)
   1313c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1313e:	065b      	lsls	r3, r3, #25
   13140:	f57f af3e 	bpl.w	12fc0 <hci_evt_encode+0x11c>
   13144:	3508      	adds	r5, #8
   13146:	2102      	movs	r1, #2
   13148:	4628      	mov	r0, r5
   1314a:	f013 f9e1 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   1314e:	233e      	movs	r3, #62	; 0x3e
   13150:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13152:	230b      	movs	r3, #11
   13154:	7043      	strb	r3, [r0, #1]
   13156:	2101      	movs	r1, #1
   13158:	4628      	mov	r0, r5
   1315a:	f013 f9d9 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   1315e:	2307      	movs	r3, #7
   13160:	7003      	strb	r3, [r0, #0]
   13162:	210a      	movs	r1, #10
   13164:	4628      	mov	r0, r5
   13166:	f013 f9d3 	bl	26510 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   1316a:	8006      	strh	r6, [r0, #0]
	sep->max_tx_octets = pdu_data->llctrl.length_rsp.max_tx_octets;
   1316c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1316e:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time = pdu_data->llctrl.length_rsp.max_tx_time;
   13170:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   13172:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets = pdu_data->llctrl.length_rsp.max_rx_octets;
   13174:	8c23      	ldrh	r3, [r4, #32]
   13176:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time = pdu_data->llctrl.length_rsp.max_rx_time;
   13178:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   1317a:	8103      	strh	r3, [r0, #8]
   1317c:	e720      	b.n	12fc0 <hci_evt_encode+0x11c>
   1317e:	3508      	adds	r5, #8
   13180:	2102      	movs	r1, #2
   13182:	4628      	mov	r0, r5
   13184:	f013 f9c4 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   13188:	233e      	movs	r3, #62	; 0x3e
   1318a:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1318c:	2306      	movs	r3, #6
   1318e:	7043      	strb	r3, [r0, #1]
   13190:	2101      	movs	r1, #1
   13192:	4628      	mov	r0, r5
   13194:	f013 f9bc 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   13198:	230c      	movs	r3, #12
   1319a:	7003      	strb	r3, [r0, #0]
   1319c:	2105      	movs	r1, #5
   1319e:	4628      	mov	r0, r5
   131a0:	f013 f9b6 	bl	26510 <net_buf_simple_add>
	sep->status = pu->status;
   131a4:	7f23      	ldrb	r3, [r4, #28]
   131a6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
   131a8:	f8a0 6001 	strh.w	r6, [r0, #1]
   131ac:	7f62      	ldrb	r2, [r4, #29]
   131ae:	2a00      	cmp	r2, #0
   131b0:	fa92 f3a2 	rbit	r3, r2
   131b4:	fab3 f383 	clz	r3, r3
   131b8:	bf08      	it	eq
   131ba:	f04f 33ff 	moveq.w	r3, #4294967295
   131be:	3301      	adds	r3, #1
	sep->tx_phy = find_lsb_set(pu->tx);
   131c0:	70c3      	strb	r3, [r0, #3]
   131c2:	7fa2      	ldrb	r2, [r4, #30]
   131c4:	fa92 f3a2 	rbit	r3, r2
   131c8:	2a00      	cmp	r2, #0
   131ca:	fab3 f383 	clz	r3, r3
   131ce:	bf08      	it	eq
   131d0:	f04f 33ff 	moveq.w	r3, #4294967295
   131d4:	3301      	adds	r3, #1
	sep->rx_phy = find_lsb_set(pu->rx);
   131d6:	7103      	strb	r3, [r0, #4]
   131d8:	e6f2      	b.n	12fc0 <hci_evt_encode+0x11c>
		le_unknown_rsp(pdu_data, handle, buf);
   131da:	f894 1020 	ldrb.w	r1, [r4, #32]
	switch (pdu_data->llctrl.unknown_rsp.type) {
   131de:	290e      	cmp	r1, #14
   131e0:	f000 8115 	beq.w	1340e <hci_evt_encode+0x56a>
   131e4:	4b0e      	ldr	r3, [pc, #56]	; (13220 <hci_evt_encode+0x37c>)
   131e6:	4a0f      	ldr	r2, [pc, #60]	; (13224 <hci_evt_encode+0x380>)
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   131e8:	4813      	ldr	r0, [pc, #76]	; (13238 <hci_evt_encode+0x394>)
   131ea:	1ad2      	subs	r2, r2, r3
   131ec:	08d2      	lsrs	r2, r2, #3
   131ee:	0192      	lsls	r2, r2, #6
   131f0:	f042 0202 	orr.w	r2, r2, #2
}
   131f4:	b008      	add	sp, #32
   131f6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		BT_WARN("type: 0x%02x",	pdu_data->llctrl.unknown_rsp.type);
   131fa:	f00f b936 	b.w	2246a <log_1>
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
   131fe:	460b      	mov	r3, r1
   13200:	4632      	mov	r2, r6
   13202:	4601      	mov	r1, r0
   13204:	2000      	movs	r0, #0
}
   13206:	b008      	add	sp, #32
   13208:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1320c:	f7fe bf82 	b.w	12114 <le_remote_feat_complete>
   13210:	200001b0 	.word	0x200001b0
   13214:	200001b8 	.word	0x200001b8
   13218:	2000d9ec 	.word	0x2000d9ec
   1321c:	2000ab58 	.word	0x2000ab58
   13220:	000278c0 	.word	0x000278c0
   13224:	00027900 	.word	0x00027900
   13228:	000285f0 	.word	0x000285f0
   1322c:	000285b4 	.word	0x000285b4
   13230:	0002849c 	.word	0x0002849c
   13234:	00028404 	.word	0x00028404
   13238:	0002861c 	.word	0x0002861c
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1323c:	4b89      	ldr	r3, [pc, #548]	; (13464 <hci_evt_encode+0x5c0>)
   1323e:	681b      	ldr	r3, [r3, #0]
   13240:	061f      	lsls	r7, r3, #24
   13242:	f57f aebd 	bpl.w	12fc0 <hci_evt_encode+0x11c>
   13246:	3508      	adds	r5, #8
   13248:	2102      	movs	r1, #2
   1324a:	4628      	mov	r0, r5
		encrypt_change(pdu_data->llctrl.reject_ind.error_code, handle,
   1324c:	f894 4020 	ldrb.w	r4, [r4, #32]
   13250:	f013 f95e 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   13254:	2308      	movs	r3, #8
	hdr->len = len;
   13256:	2104      	movs	r1, #4
	hdr->evt = evt;
   13258:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   1325a:	7041      	strb	r1, [r0, #1]
   1325c:	4628      	mov	r0, r5
   1325e:	f013 f957 	bl	26510 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   13262:	fab4 f384 	clz	r3, r4
   13266:	095b      	lsrs	r3, r3, #5
	ep->status = err;
   13268:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   1326a:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   1326e:	70c3      	strb	r3, [r0, #3]
   13270:	e6a6      	b.n	12fc0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   13272:	4b7c      	ldr	r3, [pc, #496]	; (13464 <hci_evt_encode+0x5c0>)
   13274:	685b      	ldr	r3, [r3, #4]
   13276:	0098      	lsls	r0, r3, #2
   13278:	d571      	bpl.n	1335e <hci_evt_encode+0x4ba>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
   1327a:	4b7b      	ldr	r3, [pc, #492]	; (13468 <hci_evt_encode+0x5c4>)
   1327c:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   1327e:	0699      	lsls	r1, r3, #26
   13280:	d56d      	bpl.n	1335e <hci_evt_encode+0x4ba>
   13282:	3508      	adds	r5, #8
   13284:	2102      	movs	r1, #2
   13286:	4628      	mov	r0, r5
   13288:	f013 f942 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   1328c:	233e      	movs	r3, #62	; 0x3e
   1328e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13290:	230b      	movs	r3, #11
   13292:	7043      	strb	r3, [r0, #1]
   13294:	2101      	movs	r1, #1
   13296:	4628      	mov	r0, r5
   13298:	f013 f93a 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   1329c:	2306      	movs	r3, #6
   1329e:	7003      	strb	r3, [r0, #0]
   132a0:	210a      	movs	r1, #10
   132a2:	4628      	mov	r0, r5
   132a4:	f013 f934 	bl	26510 <net_buf_simple_add>
	sep->handle = sys_cpu_to_le16(handle);
   132a8:	8006      	strh	r6, [r0, #0]
	sep->interval_min = pdu_data->llctrl.conn_param_req.interval_min;
   132aa:	8c23      	ldrh	r3, [r4, #32]
   132ac:	8043      	strh	r3, [r0, #2]
	sep->interval_max = pdu_data->llctrl.conn_param_req.interval_max;
   132ae:	8c63      	ldrh	r3, [r4, #34]	; 0x22
   132b0:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->llctrl.conn_param_req.latency;
   132b2:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   132b4:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->llctrl.conn_param_req.timeout;
   132b6:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   132b8:	8103      	strh	r3, [r0, #8]
   132ba:	e681      	b.n	12fc0 <hci_evt_encode+0x11c>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   132bc:	4b69      	ldr	r3, [pc, #420]	; (13464 <hci_evt_encode+0x5c0>)
   132be:	685b      	ldr	r3, [r3, #4]
   132c0:	0099      	lsls	r1, r3, #2
   132c2:	f57f ae7d 	bpl.w	12fc0 <hci_evt_encode+0x11c>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
   132c6:	4b68      	ldr	r3, [pc, #416]	; (13468 <hci_evt_encode+0x5c4>)
   132c8:	681b      	ldr	r3, [r3, #0]
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
   132ca:	06da      	lsls	r2, r3, #27
   132cc:	f57f ae78 	bpl.w	12fc0 <hci_evt_encode+0x11c>
   132d0:	3508      	adds	r5, #8
   132d2:	2102      	movs	r1, #2
   132d4:	4628      	mov	r0, r5
   132d6:	f013 f91b 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   132da:	233e      	movs	r3, #62	; 0x3e
   132dc:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   132de:	230d      	movs	r3, #13
   132e0:	7043      	strb	r3, [r0, #1]
   132e2:	2101      	movs	r1, #1
   132e4:	4628      	mov	r0, r5
   132e6:	f013 f913 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   132ea:	2305      	movs	r3, #5
   132ec:	7003      	strb	r3, [r0, #0]
   132ee:	210c      	movs	r1, #12
   132f0:	4628      	mov	r0, r5
   132f2:	f013 f90d 	bl	26510 <net_buf_simple_add>
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   132f6:	f104 0120 	add.w	r1, r4, #32
   132fa:	4605      	mov	r5, r0
   132fc:	2208      	movs	r2, #8
	sep->handle = sys_cpu_to_le16(handle);
   132fe:	f820 6b02 	strh.w	r6, [r0], #2
	memcpy(&sep->rand, pdu_data->llctrl.enc_req.rand, sizeof(uint64_t));
   13302:	f011 f8b1 	bl	24468 <memcpy>
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   13306:	2202      	movs	r2, #2
   13308:	f104 0128 	add.w	r1, r4, #40	; 0x28
   1330c:	f105 000a 	add.w	r0, r5, #10
}
   13310:	b008      	add	sp, #32
   13312:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(&sep->ediv, pdu_data->llctrl.enc_req.ediv, sizeof(uint16_t));
   13316:	f011 b8a7 	b.w	24468 <memcpy>
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
   1331a:	4b52      	ldr	r3, [pc, #328]	; (13464 <hci_evt_encode+0x5c0>)
   1331c:	681b      	ldr	r3, [r3, #0]
   1331e:	061b      	lsls	r3, r3, #24
   13320:	f04f 0400 	mov.w	r4, #0
   13324:	f57f ae4c 	bpl.w	12fc0 <hci_evt_encode+0x11c>
   13328:	3508      	adds	r5, #8
   1332a:	2102      	movs	r1, #2
   1332c:	4628      	mov	r0, r5
   1332e:	f013 f8ef 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   13332:	2308      	movs	r3, #8
	hdr->len = len;
   13334:	2104      	movs	r1, #4
	hdr->evt = evt;
   13336:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13338:	7041      	strb	r1, [r0, #1]
   1333a:	4628      	mov	r0, r5
   1333c:	f013 f8e8 	bl	26510 <net_buf_simple_add>
	ep->encrypt = !err ? 1 : 0;
   13340:	2301      	movs	r3, #1
	ep->status = err;
   13342:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
   13344:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
   13348:	70c3      	strb	r3, [r0, #3]
   1334a:	e639      	b.n	12fc0 <hci_evt_encode+0x11c>
		ll_rl_crpa_set(cc->peer_addr_type,
   1334c:	7fa0      	ldrb	r0, [r4, #30]
   1334e:	f104 0325 	add.w	r3, r4, #37	; 0x25
   13352:	22ff      	movs	r2, #255	; 0xff
   13354:	f104 011f 	add.w	r1, r4, #31
   13358:	f006 fe16 	bl	19f88 <ll_rl_crpa_set>
   1335c:	e5dd      	b.n	12f1a <hci_evt_encode+0x76>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE, 0,
   1335e:	2300      	movs	r3, #0
   13360:	e9cd 3301 	strd	r3, r3, [sp, #4]
   13364:	9300      	str	r3, [sp, #0]
   13366:	221a      	movs	r2, #26
   13368:	2102      	movs	r1, #2
   1336a:	4630      	mov	r0, r6
   1336c:	f002 fc40 	bl	15bf0 <ll_conn_update>
		return;
   13370:	e626      	b.n	12fc0 <hci_evt_encode+0x11c>
   13372:	3508      	adds	r5, #8
   13374:	2102      	movs	r1, #2
   13376:	4628      	mov	r0, r5
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
   13378:	f1b8 0f00 	cmp.w	r8, #0
   1337c:	d14c      	bne.n	13418 <hci_evt_encode+0x574>
   1337e:	f013 f8c7 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   13382:	233e      	movs	r3, #62	; 0x3e
   13384:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13386:	2313      	movs	r3, #19
   13388:	7043      	strb	r3, [r0, #1]
   1338a:	2101      	movs	r1, #1
   1338c:	4628      	mov	r0, r5
   1338e:	f013 f8bf 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   13392:	2301      	movs	r3, #1
   13394:	7003      	strb	r3, [r0, #0]
   13396:	2112      	movs	r1, #18
   13398:	4628      	mov	r0, r5
   1339a:	f013 f8b9 	bl	26510 <net_buf_simple_add>
   1339e:	4604      	mov	r4, r0
		(void)memset(lecc, 0x00, sizeof(*lecc));
   133a0:	2212      	movs	r2, #18
   133a2:	4641      	mov	r1, r8
   133a4:	f011 f88b 	bl	244be <memset>
		lecc->status = status;
   133a8:	7027      	strb	r7, [r4, #0]
		return;
   133aa:	e609      	b.n	12fc0 <hci_evt_encode+0x11c>
   133ac:	3508      	adds	r5, #8
   133ae:	2102      	movs	r1, #2
   133b0:	4628      	mov	r0, r5
   133b2:	f013 f8ad 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   133b6:	233e      	movs	r3, #62	; 0x3e
   133b8:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   133ba:	2313      	movs	r3, #19
   133bc:	7043      	strb	r3, [r0, #1]
   133be:	2101      	movs	r1, #1
   133c0:	4628      	mov	r0, r5
   133c2:	f013 f8a5 	bl	26510 <net_buf_simple_add>
   133c6:	4603      	mov	r3, r0
	me->subevent = subevt;
   133c8:	2201      	movs	r2, #1
   133ca:	701a      	strb	r2, [r3, #0]
   133cc:	4628      	mov	r0, r5
   133ce:	2112      	movs	r1, #18
   133d0:	f013 f89e 	bl	26510 <net_buf_simple_add>
	lecc->status = 0x00;
   133d4:	7007      	strb	r7, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
   133d6:	f8a0 6001 	strh.w	r6, [r0, #1]
	lecc->role = cc->role;
   133da:	7f63      	ldrb	r3, [r4, #29]
   133dc:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = cc->peer_addr_type & 0x1;
   133de:	7fa3      	ldrb	r3, [r4, #30]
   133e0:	f003 0301 	and.w	r3, r3, #1
   133e4:	4605      	mov	r5, r0
   133e6:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &cc->peer_addr[0], BDADDR_SIZE);
   133e8:	2206      	movs	r2, #6
   133ea:	f104 011f 	add.w	r1, r4, #31
   133ee:	3005      	adds	r0, #5
   133f0:	f011 f83a 	bl	24468 <memcpy>
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   133f4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
	lecc->interval = sys_cpu_to_le16(cc->interval);
   133f6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	lecc->latency = sys_cpu_to_le16(cc->latency);
   133f8:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   133fa:	f8a5 200d 	strh.w	r2, [r5, #13]
	lecc->interval = sys_cpu_to_le16(cc->interval);
   133fe:	f8a5 100b 	strh.w	r1, [r5, #11]
	lecc->supv_timeout = sys_cpu_to_le16(cc->timeout);
   13402:	f8a5 300f 	strh.w	r3, [r5, #15]
	lecc->clock_accuracy = cc->sca;
   13406:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1340a:	746b      	strb	r3, [r5, #17]
   1340c:	e5d8      	b.n	12fc0 <hci_evt_encode+0x11c>
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
   1340e:	462b      	mov	r3, r5
   13410:	4632      	mov	r2, r6
   13412:	2100      	movs	r1, #0
   13414:	201a      	movs	r0, #26
   13416:	e6f6      	b.n	13206 <hci_evt_encode+0x362>
   13418:	f013 f87a 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   1341c:	223e      	movs	r2, #62	; 0x3e
	hdr->len = len;
   1341e:	231f      	movs	r3, #31
	hdr->evt = evt;
   13420:	7002      	strb	r2, [r0, #0]
	hdr->len = len;
   13422:	7043      	strb	r3, [r0, #1]
   13424:	2101      	movs	r1, #1
   13426:	4628      	mov	r0, r5
   13428:	f013 f872 	bl	26510 <net_buf_simple_add>
	me->subevent = subevt;
   1342c:	230a      	movs	r3, #10
   1342e:	7003      	strb	r3, [r0, #0]
   13430:	211e      	movs	r1, #30
   13432:	4628      	mov	r0, r5
   13434:	f013 f86c 	bl	26510 <net_buf_simple_add>
   13438:	4604      	mov	r4, r0
			(void)memset(leecc, 0x00, sizeof(*leecc));
   1343a:	221e      	movs	r2, #30
   1343c:	2100      	movs	r1, #0
   1343e:	f011 f83e 	bl	244be <memset>
			leecc->status = status;
   13442:	7027      	strb	r7, [r4, #0]
			return;
   13444:	e5bc      	b.n	12fc0 <hci_evt_encode+0x11c>
		LL_ASSERT(0);
   13446:	4a09      	ldr	r2, [pc, #36]	; (1346c <hci_evt_encode+0x5c8>)
   13448:	4909      	ldr	r1, [pc, #36]	; (13470 <hci_evt_encode+0x5cc>)
   1344a:	480a      	ldr	r0, [pc, #40]	; (13474 <hci_evt_encode+0x5d0>)
   1344c:	f241 6385 	movw	r3, #5765	; 0x1685
   13450:	f00e fb68 	bl	21b24 <printk>
   13454:	4040      	eors	r0, r0
   13456:	f380 8811 	msr	BASEPRI, r0
   1345a:	f04f 0003 	mov.w	r0, #3
   1345e:	df02      	svc	2
		return;
   13460:	e5ae      	b.n	12fc0 <hci_evt_encode+0x11c>
   13462:	bf00      	nop
   13464:	200001b0 	.word	0x200001b0
   13468:	200001b8 	.word	0x200001b8
   1346c:	000285b4 	.word	0x000285b4
   13470:	0002849c 	.word	0x0002849c
   13474:	00028404 	.word	0x00028404

00013478 <hci_num_cmplt_encode>:

#if defined(CONFIG_BT_CONN)
void hci_num_cmplt_encode(struct net_buf *buf, uint16_t handle, uint8_t num)
{
   13478:	b570      	push	{r4, r5, r6, lr}
   1347a:	f100 0408 	add.w	r4, r0, #8
   1347e:	460e      	mov	r6, r1
   13480:	4620      	mov	r0, r4
   13482:	2102      	movs	r1, #2
   13484:	4615      	mov	r5, r2
   13486:	f013 f843 	bl	26510 <net_buf_simple_add>
	hdr->evt = evt;
   1348a:	2313      	movs	r3, #19
	hdr->len = len;
   1348c:	2105      	movs	r1, #5
	hdr->evt = evt;
   1348e:	7003      	strb	r3, [r0, #0]
	hdr->len = len;
   13490:	7041      	strb	r1, [r0, #1]
   13492:	4620      	mov	r0, r4
   13494:	f013 f83c 	bl	26510 <net_buf_simple_add>

	len = (sizeof(*ep) + (sizeof(*hc) * num_handles));
	hci_evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);

	ep = net_buf_add(buf, len);
	ep->num_handles = num_handles;
   13498:	2301      	movs	r3, #1
   1349a:	7003      	strb	r3, [r0, #0]
	hc = &ep->h[0];
	hc->handle = sys_cpu_to_le16(handle);
   1349c:	f8a0 6001 	strh.w	r6, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
   134a0:	f8a0 5003 	strh.w	r5, [r0, #3]
}
   134a4:	bd70      	pop	{r4, r5, r6, pc}
   134a6:	bf00      	nop

000134a8 <hci_get_class>:
{
#if defined(CONFIG_BT_CONN)
	struct pdu_data *pdu_data = (void *)node_rx->pdu;
#endif

	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
   134a8:	7903      	ldrb	r3, [r0, #4]
   134aa:	2b03      	cmp	r3, #3
   134ac:	d009      	beq.n	134c2 <hci_get_class+0x1a>

		switch (node_rx->hdr.type) {
   134ae:	2b13      	cmp	r3, #19
   134b0:	d005      	beq.n	134be <hci_get_class+0x16>
   134b2:	3b14      	subs	r3, #20
		case NODE_RX_TYPE_USER_START ... NODE_RX_TYPE_USER_END - 1:
			return hci_user_ext_get_class(node_rx);
#endif /* CONFIG_BT_CTLR_USER_EVT_RANGE > 0 */

		default:
			return HCI_CLASS_NONE;
   134b4:	2b05      	cmp	r3, #5
   134b6:	bf94      	ite	ls
   134b8:	2003      	movls	r0, #3
   134ba:	2000      	movhi	r0, #0
   134bc:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
   134be:	2001      	movs	r0, #1
#else
	} else {
		return HCI_CLASS_NONE;
	}
#endif
}
   134c0:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
   134c2:	7f03      	ldrb	r3, [r0, #28]
   134c4:	f003 0303 	and.w	r3, r3, #3
		return HCI_CLASS_ACL_DATA;
   134c8:	2b03      	cmp	r3, #3
   134ca:	bf0c      	ite	eq
   134cc:	2004      	moveq	r0, #4
   134ce:	2005      	movne	r0, #5
   134d0:	4770      	bx	lr
   134d2:	bf00      	nop

000134d4 <hci_init>:

void hci_init(struct k_poll_signal *signal_host_buf)
{
   134d4:	b430      	push	{r4, r5}
	event_mask = DEFAULT_EVENT_MASK;
   134d6:	4b0b      	ldr	r3, [pc, #44]	; (13504 <hci_init+0x30>)
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   134d8:	490b      	ldr	r1, [pc, #44]	; (13508 <hci_init+0x34>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   134da:	4a0c      	ldr	r2, [pc, #48]	; (1350c <hci_init+0x38>)
	event_mask = DEFAULT_EVENT_MASK;
   134dc:	f04f 34ff 	mov.w	r4, #4294967295
   134e0:	f641 75ff 	movw	r5, #8191	; 0x1fff
   134e4:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
   134e8:	2400      	movs	r4, #0
   134ea:	2500      	movs	r5, #0
   134ec:	e9c1 4500 	strd	r4, r5, [r1]
	conn_count = 0U;
   134f0:	4b07      	ldr	r3, [pc, #28]	; (13510 <hci_init+0x3c>)
	le_event_mask = DEFAULT_LE_EVENT_MASK;
   134f2:	201f      	movs	r0, #31
   134f4:	2100      	movs	r1, #0
   134f6:	e9c2 0100 	strd	r0, r1, [r2]
	conn_count = 0U;
   134fa:	2200      	movs	r2, #0
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
}
   134fc:	bc30      	pop	{r4, r5}
	conn_count = 0U;
   134fe:	601a      	str	r2, [r3, #0]
}
   13500:	4770      	bx	lr
   13502:	bf00      	nop
   13504:	200001b0 	.word	0x200001b0
   13508:	2000ab58 	.word	0x2000ab58
   1350c:	200001b8 	.word	0x200001b8
   13510:	2000d9ec 	.word	0x2000d9ec

00013514 <bt_rand>:
#include "hal/ecb.h"
#include "lll.h"

int bt_rand(void *buf, size_t len)
{
	return lll_csrand_get(buf, len);
   13514:	f007 bc72 	b.w	1adfc <lll_csrand_get>

00013518 <bt_encrypt_le>:
}

int bt_encrypt_le(const uint8_t key[16], const uint8_t plaintext[16],
		  uint8_t enc_data[16])
{
   13518:	b508      	push	{r3, lr}
	BT_DBG("key %s", bt_hex(key, 16));
	BT_DBG("plaintext %s", bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1351a:	2300      	movs	r3, #0
   1351c:	f009 f96e 	bl	1c7fc <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   13520:	2000      	movs	r0, #0
   13522:	bd08      	pop	{r3, pc}

00013524 <perform_lll_reset>:

	return 0;
}

static void perform_lll_reset(void *param)
{
   13524:	b510      	push	{r4, lr}
   13526:	4604      	mov	r4, r0
	int err;

	/* Reset LLL */
	err = lll_reset();
   13528:	f007 fc9e 	bl	1ae68 <lll_reset>
	LL_ASSERT(!err);
   1352c:	b950      	cbnz	r0, 13544 <perform_lll_reset+0x20>

#if defined(CONFIG_BT_BROADCASTER)
	/* Reset adv state */
	err = lll_adv_reset();
   1352e:	f007 ffc9 	bl	1b4c4 <lll_adv_reset>
	LL_ASSERT(!err);
   13532:	b9c0      	cbnz	r0, 13566 <perform_lll_reset+0x42>
	LL_ASSERT(!err);
#endif /* CONFIG_BT_OBSERVER */

#if defined(CONFIG_BT_CONN)
	/* Reset conn role */
	err = lll_conn_reset();
   13534:	f008 fc5c 	bl	1bdf0 <lll_conn_reset>
	LL_ASSERT(!err);
   13538:	bb30      	cbnz	r0, 13588 <perform_lll_reset+0x64>
	z_impl_k_sem_give(sem);
   1353a:	4620      	mov	r0, r4
#endif /* CONFIG_BT_CTLR_DF */

#if !defined(CONFIG_BT_CTLR_ZLI)
	k_sem_give(param);
#endif /* !CONFIG_BT_CTLR_ZLI */
}
   1353c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   13540:	f00c bf90 	b.w	20464 <z_impl_k_sem_give>
	LL_ASSERT(!err);
   13544:	4a19      	ldr	r2, [pc, #100]	; (135ac <perform_lll_reset+0x88>)
   13546:	491a      	ldr	r1, [pc, #104]	; (135b0 <perform_lll_reset+0x8c>)
   13548:	481a      	ldr	r0, [pc, #104]	; (135b4 <perform_lll_reset+0x90>)
   1354a:	f240 637c 	movw	r3, #1660	; 0x67c
   1354e:	f00e fae9 	bl	21b24 <printk>
   13552:	4040      	eors	r0, r0
   13554:	f380 8811 	msr	BASEPRI, r0
   13558:	f04f 0003 	mov.w	r0, #3
   1355c:	df02      	svc	2
	err = lll_adv_reset();
   1355e:	f007 ffb1 	bl	1b4c4 <lll_adv_reset>
	LL_ASSERT(!err);
   13562:	2800      	cmp	r0, #0
   13564:	d0e6      	beq.n	13534 <perform_lll_reset+0x10>
   13566:	4a11      	ldr	r2, [pc, #68]	; (135ac <perform_lll_reset+0x88>)
   13568:	4911      	ldr	r1, [pc, #68]	; (135b0 <perform_lll_reset+0x8c>)
   1356a:	4812      	ldr	r0, [pc, #72]	; (135b4 <perform_lll_reset+0x90>)
   1356c:	f240 6381 	movw	r3, #1665	; 0x681
   13570:	f00e fad8 	bl	21b24 <printk>
   13574:	4040      	eors	r0, r0
   13576:	f380 8811 	msr	BASEPRI, r0
   1357a:	f04f 0003 	mov.w	r0, #3
   1357e:	df02      	svc	2
	err = lll_conn_reset();
   13580:	f008 fc36 	bl	1bdf0 <lll_conn_reset>
	LL_ASSERT(!err);
   13584:	2800      	cmp	r0, #0
   13586:	d0d8      	beq.n	1353a <perform_lll_reset+0x16>
   13588:	4a08      	ldr	r2, [pc, #32]	; (135ac <perform_lll_reset+0x88>)
   1358a:	4909      	ldr	r1, [pc, #36]	; (135b0 <perform_lll_reset+0x8c>)
   1358c:	4809      	ldr	r0, [pc, #36]	; (135b4 <perform_lll_reset+0x90>)
   1358e:	f240 638d 	movw	r3, #1677	; 0x68d
   13592:	f00e fac7 	bl	21b24 <printk>
   13596:	4040      	eors	r0, r0
   13598:	f380 8811 	msr	BASEPRI, r0
   1359c:	f04f 0003 	mov.w	r0, #3
   135a0:	df02      	svc	2
   135a2:	4620      	mov	r0, r4
}
   135a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   135a8:	f00c bf5c 	b.w	20464 <z_impl_k_sem_give>
   135ac:	00028648 	.word	0x00028648
   135b0:	00028684 	.word	0x00028684
   135b4:	00028404 	.word	0x00028404

000135b8 <ull_ticker_status_give>:
	*((uint32_t volatile *)param) = status;
   135b8:	6008      	str	r0, [r1, #0]
   135ba:	4801      	ldr	r0, [pc, #4]	; (135c0 <ull_ticker_status_give+0x8>)
   135bc:	f00c bf52 	b.w	20464 <z_impl_k_sem_give>
   135c0:	2000dddc 	.word	0x2000dddc

000135c4 <disabled_cb>:
   135c4:	f00c bf4e 	b.w	20464 <z_impl_k_sem_give>

000135c8 <tx_cmplt_get>:
}
#endif /* CONFIG_BT_CTLR_LOW_LAT_ULL */

#if defined(CONFIG_BT_CONN)
static uint8_t tx_cmplt_get(uint16_t *handle, uint8_t *first, uint8_t last)
{
   135c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	struct lll_tx *tx;
	uint8_t cmplt;

	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   135cc:	4e2f      	ldr	r6, [pc, #188]	; (1368c <tx_cmplt_get+0xc4>)
{
   135ce:	460c      	mov	r4, r1
   135d0:	4691      	mov	r9, r2
					   uint8_t first, uint8_t last, uint8_t *idx)
{
	void *p;
	uint8_t i;

	if (*idx >= count) {
   135d2:	7823      	ldrb	r3, [r4, #0]
	tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   135d4:	7872      	ldrb	r2, [r6, #1]
   135d6:	7831      	ldrb	r1, [r6, #0]
   135d8:	429a      	cmp	r2, r3
   135da:	bf9c      	itt	ls
   135dc:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   135de:	7023      	strbls	r3, [r4, #0]
	}

	if (*idx == last) {
   135e0:	4599      	cmp	r9, r3
{
   135e2:	4682      	mov	sl, r0
   135e4:	d049      	beq.n	1367a <tx_cmplt_get+0xb2>
	i = *idx + 1;
	if (i == count) {
		i = 0U;
	}

	p = (void *)(fifo + (*idx) * size);
   135e6:	fb13 f101 	smulbb	r1, r3, r1
   135ea:	4d29      	ldr	r5, [pc, #164]	; (13690 <tx_cmplt_get+0xc8>)
	i = *idx + 1;
   135ec:	3301      	adds	r3, #1
   135ee:	b2db      	uxtb	r3, r3
		i = 0U;
   135f0:	429a      	cmp	r2, r3
   135f2:	bf08      	it	eq
   135f4:	2300      	moveq	r3, #0
				    mfifo_tx_ack.n, mfifo_tx_ack.f, last,
				    first);
	if (!tx) {
   135f6:	186a      	adds	r2, r5, r1

	*idx = i;
   135f8:	7023      	strb	r3, [r4, #0]
   135fa:	d03e      	beq.n	1367a <tx_cmplt_get+0xb2>
		return 0;
	}

	*handle = tx->handle;
   135fc:	5a6b      	ldrh	r3, [r5, r1]
   135fe:	8003      	strh	r3, [r0, #0]
	cmplt = 0U;
   13600:	2700      	movs	r7, #0
   13602:	f04f 0802 	mov.w	r8, #2
   13606:	f04f 0b01 	mov.w	fp, #1
   1360a:	e022      	b.n	13652 <tx_cmplt_get+0x8a>
		    (((uint32_t)node_tx & ~3) &&
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
		      p->ll_id == PDU_DATA_LLID_DATA_CONTINUE))) {
			/* data packet, hence count num cmplt */
			tx->node = (void *)1;
			cmplt++;
   1360c:	3701      	adds	r7, #1
		} else {
			/* ctrl packet or flushed, hence dont count num cmplt */
			tx->node = (void *)2;
		}

		if (((uint32_t)node_tx & ~3)) {
   1360e:	f030 0303 	bics.w	r3, r0, #3
   13612:	f8c2 b004 	str.w	fp, [r2, #4]
			cmplt++;
   13616:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   13618:	d129      	bne.n	1366e <tx_cmplt_get+0xa6>
	if (*idx >= count) {
   1361a:	7823      	ldrb	r3, [r4, #0]
			ll_tx_mem_release(node_tx);
		}

		tx = mfifo_dequeue_iter_get(mfifo_tx_ack.m, mfifo_tx_ack.s,
   1361c:	7872      	ldrb	r2, [r6, #1]
   1361e:	7831      	ldrb	r1, [r6, #0]
   13620:	429a      	cmp	r2, r3
   13622:	bf9c      	itt	ls
   13624:	78b3      	ldrbls	r3, [r6, #2]
		*idx = first;
   13626:	7023      	strbls	r3, [r4, #0]
	if (*idx == last) {
   13628:	454b      	cmp	r3, r9
   1362a:	d027      	beq.n	1367c <tx_cmplt_get+0xb4>
	i = *idx + 1;
   1362c:	f103 0c01 	add.w	ip, r3, #1
   13630:	fa5f fc8c 	uxtb.w	ip, ip
	p = (void *)(fifo + (*idx) * size);
   13634:	fb13 f301 	smulbb	r3, r3, r1
		i = 0U;
   13638:	4562      	cmp	r2, ip
   1363a:	bf08      	it	eq
   1363c:	f04f 0c00 	moveq.w	ip, #0
					    mfifo_tx_ack.n, mfifo_tx_ack.f,
					    last, first);
	} while (tx && tx->handle == *handle);
   13640:	18ea      	adds	r2, r5, r3
	*idx = i;
   13642:	f884 c000 	strb.w	ip, [r4]
   13646:	d019      	beq.n	1367c <tx_cmplt_get+0xb4>
   13648:	5ae9      	ldrh	r1, [r5, r3]
   1364a:	f8ba 3000 	ldrh.w	r3, [sl]
   1364e:	4299      	cmp	r1, r3
   13650:	d114      	bne.n	1367c <tx_cmplt_get+0xb4>
		node_tx = tx->node;
   13652:	6850      	ldr	r0, [r2, #4]
		if (!node_tx || (node_tx == (void *)1) ||
   13654:	2801      	cmp	r0, #1
   13656:	d9d9      	bls.n	1360c <tx_cmplt_get+0x44>
   13658:	f030 0303 	bics.w	r3, r0, #3
   1365c:	d00a      	beq.n	13674 <tx_cmplt_get+0xac>
		     (p->ll_id == PDU_DATA_LLID_DATA_START ||
   1365e:	7903      	ldrb	r3, [r0, #4]
   13660:	f003 0303 	and.w	r3, r3, #3
		    (((uint32_t)node_tx & ~3) &&
   13664:	3b01      	subs	r3, #1
   13666:	2b01      	cmp	r3, #1
   13668:	d90b      	bls.n	13682 <tx_cmplt_get+0xba>
   1366a:	f8c2 8004 	str.w	r8, [r2, #4]
			ll_tx_mem_release(node_tx);
   1366e:	f002 fa6d 	bl	15b4c <ll_tx_mem_release>
   13672:	e7d2      	b.n	1361a <tx_cmplt_get+0x52>
   13674:	f8c2 8004 	str.w	r8, [r2, #4]
		if (((uint32_t)node_tx & ~3)) {
   13678:	e7cf      	b.n	1361a <tx_cmplt_get+0x52>
		return 0;
   1367a:	2700      	movs	r7, #0

	return cmplt;
}
   1367c:	4638      	mov	r0, r7
   1367e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			cmplt++;
   13682:	3701      	adds	r7, #1
   13684:	f8c2 b004 	str.w	fp, [r2, #4]
   13688:	b2ff      	uxtb	r7, r7
		if (((uint32_t)node_tx & ~3)) {
   1368a:	e7f0      	b.n	1366e <tx_cmplt_get+0xa6>
   1368c:	20000500 	.word	0x20000500
   13690:	20000504 	.word	0x20000504

00013694 <rx_alloc>:
{
   13694:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (max > mem_link_rx.quota_pdu) {
   13698:	4e37      	ldr	r6, [pc, #220]	; (13778 <rx_alloc+0xe4>)
   1369a:	7833      	ldrb	r3, [r6, #0]
   1369c:	4298      	cmp	r0, r3
   1369e:	bf28      	it	cs
   136a0:	4618      	movcs	r0, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   136a2:	b380      	cbz	r0, 13706 <rx_alloc+0x72>
   136a4:	4d35      	ldr	r5, [pc, #212]	; (1377c <rx_alloc+0xe8>)
		rx = mem_acquire(&mem_pdu_rx.free);
   136a6:	f8df 80d8 	ldr.w	r8, [pc, #216]	; 13780 <rx_alloc+0xec>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   136aa:	78ec      	ldrb	r4, [r5, #3]
   136ac:	f100 39ff 	add.w	r9, r0, #4294967295
   136b0:	fa5f f989 	uxtb.w	r9, r9
		link = mem_acquire(&mem_link_rx.free);
   136b4:	1d37      	adds	r7, r6, #4
	if (last == count) {
   136b6:	786a      	ldrb	r2, [r5, #1]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   136b8:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   136ba:	3401      	adds	r4, #1
   136bc:	b2e4      	uxtb	r4, r4
		last = 0U;
   136be:	42a2      	cmp	r2, r4
   136c0:	bf08      	it	eq
   136c2:	2400      	moveq	r4, #0
	if (last == first) {
   136c4:	42a3      	cmp	r3, r4
		link = mem_acquire(&mem_link_rx.free);
   136c6:	4638      	mov	r0, r7
   136c8:	d04b      	beq.n	13762 <rx_alloc+0xce>
   136ca:	f7fd f825 	bl	10718 <mem_acquire>
   136ce:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   136d0:	4640      	mov	r0, r8
		if (!link) {
   136d2:	f1ba 0f00 	cmp.w	sl, #0
   136d6:	d042      	beq.n	1375e <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   136d8:	f7fd f81e 	bl	10718 <mem_acquire>
		if (!rx) {
   136dc:	2800      	cmp	r0, #0
   136de:	d045      	beq.n	1376c <rx_alloc+0xd8>
		rx->link = link;
   136e0:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   136e4:	78ea      	ldrb	r2, [r5, #3]
   136e6:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   136e8:	fb02 5303 	mla	r3, r2, r3, r5
   136ec:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   136ee:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   136f0:	70ec      	strb	r4, [r5, #3]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   136f2:	f109 39ff 	add.w	r9, r9, #4294967295
	mem_link_rx.quota_pdu += delta;
   136f6:	3b01      	subs	r3, #1
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   136f8:	fa5f f989 	uxtb.w	r9, r9
	mem_link_rx.quota_pdu += delta;
   136fc:	b2db      	uxtb	r3, r3
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   136fe:	f1b9 0fff 	cmp.w	r9, #255	; 0xff
	mem_link_rx.quota_pdu += delta;
   13702:	7033      	strb	r3, [r6, #0]
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13704:	d1d7      	bne.n	136b6 <rx_alloc+0x22>
	while (mem_link_rx.quota_pdu &&
   13706:	b353      	cbz	r3, 1375e <rx_alloc+0xca>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13708:	4d1e      	ldr	r5, [pc, #120]	; (13784 <rx_alloc+0xf0>)
		link = mem_acquire(&mem_link_rx.free);
   1370a:	4f1f      	ldr	r7, [pc, #124]	; (13788 <rx_alloc+0xf4>)
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   1370c:	78ec      	ldrb	r4, [r5, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   1370e:	f8df 8070 	ldr.w	r8, [pc, #112]	; 13780 <rx_alloc+0xec>
		link->mem = NULL;
   13712:	f04f 0900 	mov.w	r9, #0
	if (last == count) {
   13716:	786a      	ldrb	r2, [r5, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13718:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   1371a:	3401      	adds	r4, #1
   1371c:	b2e4      	uxtb	r4, r4
		last = 0U;
   1371e:	42a2      	cmp	r2, r4
   13720:	bf08      	it	eq
   13722:	2400      	moveq	r4, #0
	if (last == first) {
   13724:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_rx.free);
   13726:	4638      	mov	r0, r7
   13728:	d019      	beq.n	1375e <rx_alloc+0xca>
   1372a:	f7fc fff5 	bl	10718 <mem_acquire>
   1372e:	4682      	mov	sl, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13730:	4640      	mov	r0, r8
		if (!link) {
   13732:	f1ba 0f00 	cmp.w	sl, #0
   13736:	d012      	beq.n	1375e <rx_alloc+0xca>
		rx = mem_acquire(&mem_pdu_rx.free);
   13738:	f7fc ffee 	bl	10718 <mem_acquire>
		if (!rx) {
   1373c:	b1b0      	cbz	r0, 1376c <rx_alloc+0xd8>
		link->mem = NULL;
   1373e:	f8ca 9004 	str.w	r9, [sl, #4]
		rx->link = link;
   13742:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13746:	78ea      	ldrb	r2, [r5, #3]
   13748:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1374a:	fb02 5303 	mla	r3, r2, r3, r5
   1374e:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13750:	7833      	ldrb	r3, [r6, #0]
	*last = idx; /* Commit: Update write index */
   13752:	70ec      	strb	r4, [r5, #3]
   13754:	3b01      	subs	r3, #1
   13756:	b2db      	uxtb	r3, r3
   13758:	7033      	strb	r3, [r6, #0]
	while (mem_link_rx.quota_pdu &&
   1375a:	2b00      	cmp	r3, #0
   1375c:	d1db      	bne.n	13716 <rx_alloc+0x82>
}
   1375e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (!max) {
   13762:	f1b9 0f00 	cmp.w	r9, #0
   13766:	d0fa      	beq.n	1375e <rx_alloc+0xca>
	while (mem_link_rx.quota_pdu &&
   13768:	7833      	ldrb	r3, [r6, #0]
   1376a:	e7cc      	b.n	13706 <rx_alloc+0x72>
			mem_release(link, &mem_link_rx.free);
   1376c:	4650      	mov	r0, sl
   1376e:	4906      	ldr	r1, [pc, #24]	; (13788 <rx_alloc+0xf4>)
}
   13770:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			mem_release(link, &mem_link_rx.free);
   13774:	f7fc bfea 	b.w	1074c <mem_release>
   13778:	2000dadc 	.word	0x2000dadc
   1377c:	200003c4 	.word	0x200003c4
   13780:	2000db3c 	.word	0x2000db3c
   13784:	200003b0 	.word	0x200003b0
   13788:	2000dae0 	.word	0x2000dae0

0001378c <init_reset>:
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   1378c:	4b3a      	ldr	r3, [pc, #232]	; (13878 <init_reset+0xec>)
{
   1378e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	mem_init(mem_done.pool, sizeof(struct node_rx_event_done),
   13792:	1d18      	adds	r0, r3, #4
   13794:	2203      	movs	r2, #3
   13796:	2134      	movs	r1, #52	; 0x34
   13798:	f7fc ff8e 	bl	106b8 <mem_init>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   1379c:	4b37      	ldr	r3, [pc, #220]	; (1387c <init_reset+0xf0>)
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   1379e:	4d38      	ldr	r5, [pc, #224]	; (13880 <init_reset+0xf4>)
		link = mem_acquire(&mem_link_done.free);
   137a0:	4f36      	ldr	r7, [pc, #216]	; (1387c <init_reset+0xf0>)
		rx = mem_acquire(&mem_done.free);
   137a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 13878 <init_reset+0xec>
	mem_init(mem_link_done.pool, sizeof(memq_link_t), EVENT_DONE_MAX,
   137a6:	2203      	movs	r2, #3
   137a8:	2108      	movs	r1, #8
   137aa:	1d18      	adds	r0, r3, #4
   137ac:	f7fc ff84 	bl	106b8 <mem_init>
	while (MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   137b0:	78ec      	ldrb	r4, [r5, #3]
	if (last == count) {
   137b2:	786a      	ldrb	r2, [r5, #1]
   137b4:	78ab      	ldrb	r3, [r5, #2]
	last = last + 1;
   137b6:	3401      	adds	r4, #1
   137b8:	b2e4      	uxtb	r4, r4
		last = 0U;
   137ba:	42a2      	cmp	r2, r4
   137bc:	bf08      	it	eq
   137be:	2400      	moveq	r4, #0
	if (last == first) {
   137c0:	429c      	cmp	r4, r3
		link = mem_acquire(&mem_link_done.free);
   137c2:	4638      	mov	r0, r7
   137c4:	d013      	beq.n	137ee <init_reset+0x62>
   137c6:	f7fc ffa7 	bl	10718 <mem_acquire>
   137ca:	4606      	mov	r6, r0
		rx = mem_acquire(&mem_done.free);
   137cc:	4640      	mov	r0, r8
		if (!link) {
   137ce:	b176      	cbz	r6, 137ee <init_reset+0x62>
		rx = mem_acquire(&mem_done.free);
   137d0:	f7fc ffa2 	bl	10718 <mem_acquire>
		if (!rx) {
   137d4:	b138      	cbz	r0, 137e6 <init_reset+0x5a>
		rx->link = link;
   137d6:	6006      	str	r6, [r0, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   137d8:	78ea      	ldrb	r2, [r5, #3]
   137da:	782b      	ldrb	r3, [r5, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   137dc:	fb02 5303 	mla	r3, r2, r3, r5
   137e0:	6058      	str	r0, [r3, #4]
	*last = idx; /* Commit: Update write index */
   137e2:	70ec      	strb	r4, [r5, #3]
}
   137e4:	e7e5      	b.n	137b2 <init_reset+0x26>
			mem_release(link, &mem_link_done.free);
   137e6:	4925      	ldr	r1, [pc, #148]	; (1387c <init_reset+0xf0>)
   137e8:	4630      	mov	r0, r6
   137ea:	f7fc ffaf 	bl	1074c <mem_release>
	mem_init(mem_pdu_rx.pool, (PDU_RX_NODE_POOL_ELEMENT_SIZE),
   137ee:	4b25      	ldr	r3, [pc, #148]	; (13884 <init_reset+0xf8>)
   137f0:	2209      	movs	r2, #9
   137f2:	1d18      	adds	r0, r3, #4
   137f4:	2148      	movs	r1, #72	; 0x48
   137f6:	f7fc ff5f 	bl	106b8 <mem_init>
	mem_init(mem_link_rx.pool, sizeof(memq_link_t),
   137fa:	4b23      	ldr	r3, [pc, #140]	; (13888 <init_reset+0xfc>)
   137fc:	220b      	movs	r2, #11
   137fe:	1d18      	adds	r0, r3, #4
   13800:	2108      	movs	r1, #8
   13802:	f7fc ff59 	bl	106b8 <mem_init>
	link = mem_acquire(&mem_link_rx.free);
   13806:	4820      	ldr	r0, [pc, #128]	; (13888 <init_reset+0xfc>)
   13808:	f7fc ff86 	bl	10718 <mem_acquire>
	LL_ASSERT(link);
   1380c:	4604      	mov	r4, r0
   1380e:	b1b8      	cbz	r0, 13840 <init_reset+0xb4>
	MEMQ_INIT(ull_rx, link);
   13810:	4a1e      	ldr	r2, [pc, #120]	; (1388c <init_reset+0x100>)
   13812:	4620      	mov	r0, r4
   13814:	1f11      	subs	r1, r2, #4
   13816:	f7fc ffd5 	bl	107c4 <memq_init>
	link = mem_acquire(&mem_link_rx.free);
   1381a:	481b      	ldr	r0, [pc, #108]	; (13888 <init_reset+0xfc>)
   1381c:	f7fc ff7c 	bl	10718 <mem_acquire>
	LL_ASSERT(link);
   13820:	4604      	mov	r4, r0
   13822:	b1d8      	cbz	r0, 1385c <init_reset+0xd0>
	MEMQ_INIT(ll_rx, link);
   13824:	4a1a      	ldr	r2, [pc, #104]	; (13890 <init_reset+0x104>)
   13826:	4620      	mov	r0, r4
   13828:	1f11      	subs	r1, r2, #4
   1382a:	f7fc ffcb 	bl	107c4 <memq_init>
	mem_link_rx.quota_pdu = RX_CNT;
   1382e:	4b19      	ldr	r3, [pc, #100]	; (13894 <init_reset+0x108>)
   13830:	2207      	movs	r2, #7
	rx_alloc(UINT8_MAX);
   13832:	20ff      	movs	r0, #255	; 0xff
	mem_link_rx.quota_pdu = RX_CNT;
   13834:	701a      	strb	r2, [r3, #0]
	rx_alloc(UINT8_MAX);
   13836:	f7ff ff2d 	bl	13694 <rx_alloc>
}
   1383a:	2000      	movs	r0, #0
   1383c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(link);
   13840:	4a15      	ldr	r2, [pc, #84]	; (13898 <init_reset+0x10c>)
   13842:	4916      	ldr	r1, [pc, #88]	; (1389c <init_reset+0x110>)
   13844:	4816      	ldr	r0, [pc, #88]	; (138a0 <init_reset+0x114>)
   13846:	f240 6363 	movw	r3, #1635	; 0x663
   1384a:	f00e f96b 	bl	21b24 <printk>
   1384e:	4040      	eors	r0, r0
   13850:	f380 8811 	msr	BASEPRI, r0
   13854:	f04f 0003 	mov.w	r0, #3
   13858:	df02      	svc	2
   1385a:	e7d9      	b.n	13810 <init_reset+0x84>
	LL_ASSERT(link);
   1385c:	4a0e      	ldr	r2, [pc, #56]	; (13898 <init_reset+0x10c>)
   1385e:	490f      	ldr	r1, [pc, #60]	; (1389c <init_reset+0x110>)
   13860:	480f      	ldr	r0, [pc, #60]	; (138a0 <init_reset+0x114>)
   13862:	f240 636a 	movw	r3, #1642	; 0x66a
   13866:	f00e f95d 	bl	21b24 <printk>
   1386a:	4040      	eors	r0, r0
   1386c:	f380 8811 	msr	BASEPRI, r0
   13870:	f04f 0003 	mov.w	r0, #3
   13874:	df02      	svc	2
   13876:	e7d5      	b.n	13824 <init_reset+0x98>
   13878:	2000da20 	.word	0x2000da20
   1387c:	2000dac0 	.word	0x2000dac0
   13880:	2000039c 	.word	0x2000039c
   13884:	2000db3c 	.word	0x2000db3c
   13888:	2000dae0 	.word	0x2000dae0
   1388c:	2000ddd4 	.word	0x2000ddd4
   13890:	2000ddcc 	.word	0x2000ddcc
   13894:	2000dadc 	.word	0x2000dadc
   13898:	00028648 	.word	0x00028648
   1389c:	00028910 	.word	0x00028910
   138a0:	00028404 	.word	0x00028404

000138a4 <rx_demux>:
{
   138a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   138a8:	4c9e      	ldr	r4, [pc, #632]	; (13b24 <rx_demux+0x280>)
	k_sem_give(sem_recv);
   138aa:	4e9f      	ldr	r6, [pc, #636]	; (13b28 <rx_demux+0x284>)
			static memq_link_t link;
			static struct mayfly mfy = {0, 0, &link, NULL,
						    lll_resume};
			uint32_t ret;

			mfy.param = next;
   138ac:	f8df b27c 	ldr.w	fp, [pc, #636]	; 13b2c <rx_demux+0x288>
{
   138b0:	b087      	sub	sp, #28
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   138b2:	e9d4 0100 	ldrd	r0, r1, [r4]
   138b6:	aa03      	add	r2, sp, #12
   138b8:	f7fc ff9c 	bl	107f4 <memq_peek>
		if (link) {
   138bc:	4607      	mov	r7, r0
   138be:	2800      	cmp	r0, #0
   138c0:	d036      	beq.n	13930 <rx_demux+0x8c>
			LL_ASSERT(rx);
   138c2:	9b03      	ldr	r3, [sp, #12]
   138c4:	2b00      	cmp	r3, #0
   138c6:	f000 811e 	beq.w	13b06 <rx_demux+0x262>
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   138ca:	7818      	ldrb	r0, [r3, #0]
   138cc:	aa04      	add	r2, sp, #16
   138ce:	a902      	add	r1, sp, #8
   138d0:	f005 fd34 	bl	1933c <ull_conn_ack_by_last_peek>
			if (link_tx) {
   138d4:	4605      	mov	r5, r0
   138d6:	2800      	cmp	r0, #0
   138d8:	d057      	beq.n	1398a <rx_demux+0xe6>
				rx_demux_conn_tx_ack(rx->ack_last, handle,
   138da:	e9dd 1303 	ldrd	r1, r3, [sp, #12]
   138de:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   138e2:	f891 9000 	ldrb.w	r9, [r1]
   138e6:	f8ad 200a 	strh.w	r2, [sp, #10]
   138ea:	f10d 0814 	add.w	r8, sp, #20
   138ee:	9305      	str	r3, [sp, #20]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   138f0:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   138f4:	f005 fd3e 	bl	19374 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   138f8:	4629      	mov	r1, r5
   138fa:	9a05      	ldr	r2, [sp, #20]
   138fc:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13900:	f005 fd82 	bl	19408 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   13904:	4628      	mov	r0, r5
   13906:	f005 fcf1 	bl	192ec <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   1390a:	4642      	mov	r2, r8
   1390c:	4639      	mov	r1, r7
   1390e:	4648      	mov	r0, r9
   13910:	f005 fd14 	bl	1933c <ull_conn_ack_by_last_peek>
	} while (link);
   13914:	4605      	mov	r5, r0
   13916:	2800      	cmp	r0, #0
   13918:	d1ec      	bne.n	138f4 <rx_demux+0x50>
	k_sem_give(sem_recv);
   1391a:	6830      	ldr	r0, [r6, #0]
   1391c:	f00c fda2 	bl	20464 <z_impl_k_sem_give>
		link = memq_peek(memq_ull_rx.head, memq_ull_rx.tail,
   13920:	e9d4 0100 	ldrd	r0, r1, [r4]
   13924:	aa03      	add	r2, sp, #12
   13926:	f7fc ff65 	bl	107f4 <memq_peek>
		if (link) {
   1392a:	4607      	mov	r7, r0
   1392c:	2800      	cmp	r0, #0
   1392e:	d1c8      	bne.n	138c2 <rx_demux+0x1e>
			link = ull_conn_ack_peek(&ack_last, &handle, &node_tx);
   13930:	aa04      	add	r2, sp, #16
   13932:	a902      	add	r1, sp, #8
   13934:	f10d 0007 	add.w	r0, sp, #7
   13938:	f005 fce4 	bl	19304 <ull_conn_ack_peek>
			if (link) {
   1393c:	4605      	mov	r5, r0
   1393e:	2800      	cmp	r0, #0
   13940:	f000 80de 	beq.w	13b00 <rx_demux+0x25c>
				rx_demux_conn_tx_ack(ack_last, handle,
   13944:	9b04      	ldr	r3, [sp, #16]
   13946:	9305      	str	r3, [sp, #20]
   13948:	f89d 9007 	ldrb.w	r9, [sp, #7]
   1394c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   13950:	f8ad 300a 	strh.w	r3, [sp, #10]
static inline void rx_demux_conn_tx_ack(uint8_t ack_last, uint16_t handle,
   13954:	f10d 0814 	add.w	r8, sp, #20
   13958:	f10d 070a 	add.w	r7, sp, #10
		ull_conn_ack_dequeue();
   1395c:	f005 fd0a 	bl	19374 <ull_conn_ack_dequeue>
		ull_conn_tx_ack(handle, link, node_tx);
   13960:	4629      	mov	r1, r5
   13962:	9a05      	ldr	r2, [sp, #20]
   13964:	f8bd 000a 	ldrh.w	r0, [sp, #10]
   13968:	f005 fd4e 	bl	19408 <ull_conn_tx_ack>
		ull_conn_link_tx_release(link);
   1396c:	4628      	mov	r0, r5
   1396e:	f005 fcbd 	bl	192ec <ull_conn_link_tx_release>
		link = ull_conn_ack_by_last_peek(ack_last, &handle, &node_tx);
   13972:	4642      	mov	r2, r8
   13974:	4639      	mov	r1, r7
   13976:	4648      	mov	r0, r9
   13978:	f005 fce0 	bl	1933c <ull_conn_ack_by_last_peek>
	} while (link);
   1397c:	4605      	mov	r5, r0
   1397e:	2800      	cmp	r0, #0
   13980:	d1ec      	bne.n	1395c <rx_demux+0xb8>
	k_sem_give(sem_recv);
   13982:	6830      	ldr	r0, [r6, #0]
   13984:	f00c fd6e 	bl	20464 <z_impl_k_sem_give>
			if (nack) {
   13988:	e7ca      	b.n	13920 <rx_demux+0x7c>
				nack = rx_demux_rx(link, rx);
   1398a:	9b03      	ldr	r3, [sp, #12]
   1398c:	9305      	str	r3, [sp, #20]
	switch (rx->type) {
   1398e:	791b      	ldrb	r3, [r3, #4]
   13990:	3b01      	subs	r3, #1
   13992:	2b13      	cmp	r3, #19
   13994:	d80b      	bhi.n	139ae <rx_demux+0x10a>
   13996:	e8df f003 	tbb	[pc, r3]
   1399a:	2918      	.short	0x2918
   1399c:	0a0a0aad 	.word	0x0a0a0aad
   139a0:	0a0a0a0a 	.word	0x0a0a0a0a
   139a4:	0a0a0a0a 	.word	0x0a0a0a0a
   139a8:	0a0a0a0a 	.word	0x0a0a0a0a
   139ac:	18a3      	.short	0x18a3
		LL_ASSERT(0);
   139ae:	4a60      	ldr	r2, [pc, #384]	; (13b30 <rx_demux+0x28c>)
   139b0:	4960      	ldr	r1, [pc, #384]	; (13b34 <rx_demux+0x290>)
   139b2:	4861      	ldr	r0, [pc, #388]	; (13b38 <rx_demux+0x294>)
   139b4:	f640 0334 	movw	r3, #2100	; 0x834
   139b8:	f00e f8b4 	bl	21b24 <printk>
   139bc:	4040      	eors	r0, r0
   139be:	f380 8811 	msr	BASEPRI, r0
   139c2:	f04f 0003 	mov.w	r0, #3
   139c6:	df02      	svc	2
			if (nack) {
   139c8:	e773      	b.n	138b2 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   139ca:	4956      	ldr	r1, [pc, #344]	; (13b24 <rx_demux+0x280>)
   139cc:	6860      	ldr	r0, [r4, #4]
   139ce:	2200      	movs	r2, #0
   139d0:	f7fc ff18 	bl	10804 <memq_dequeue>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   139d4:	4b59      	ldr	r3, [pc, #356]	; (13b3c <rx_demux+0x298>)
		ll_rx_put(link, rx);
   139d6:	9905      	ldr	r1, [sp, #20]
	rx_hdr->ack_last = mfifo_tx_ack.l;
   139d8:	78db      	ldrb	r3, [r3, #3]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   139da:	4638      	mov	r0, r7
   139dc:	4a58      	ldr	r2, [pc, #352]	; (13b40 <rx_demux+0x29c>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   139de:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   139e0:	f7fc fefe 	bl	107e0 <memq_enqueue>
	k_sem_give(sem_recv);
   139e4:	6830      	ldr	r0, [r6, #0]
   139e6:	f00c fd3d 	bl	20464 <z_impl_k_sem_give>
			if (nack) {
   139ea:	e799      	b.n	13920 <rx_demux+0x7c>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   139ec:	494d      	ldr	r1, [pc, #308]	; (13b24 <rx_demux+0x280>)
   139ee:	6860      	ldr	r0, [r4, #4]
   139f0:	2200      	movs	r2, #0
   139f2:	f7fc ff07 	bl	10804 <memq_dequeue>
		rx_demux_event_done(link, rx);
   139f6:	9d05      	ldr	r5, [sp, #20]
	switch (done->extra.type) {
   139f8:	f895 3020 	ldrb.w	r3, [r5, #32]
	ull_hdr = done->param;
   139fc:	f8d5 901c 	ldr.w	r9, [r5, #28]
	switch (done->extra.type) {
   13a00:	b17b      	cbz	r3, 13a22 <rx_demux+0x17e>
   13a02:	2b01      	cmp	r3, #1
   13a04:	f000 80c2 	beq.w	13b8c <rx_demux+0x2e8>
		LL_ASSERT(0);
   13a08:	4a49      	ldr	r2, [pc, #292]	; (13b30 <rx_demux+0x28c>)
   13a0a:	494a      	ldr	r1, [pc, #296]	; (13b34 <rx_demux+0x290>)
   13a0c:	484a      	ldr	r0, [pc, #296]	; (13b38 <rx_demux+0x294>)
   13a0e:	f640 0374 	movw	r3, #2164	; 0x874
   13a12:	f00e f887 	bl	21b24 <printk>
   13a16:	4040      	eors	r0, r0
   13a18:	f380 8811 	msr	BASEPRI, r0
   13a1c:	f04f 0003 	mov.w	r0, #3
   13a20:	df02      	svc	2
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13a22:	4a48      	ldr	r2, [pc, #288]	; (13b44 <rx_demux+0x2a0>)
	done->extra.type = 0U;
   13a24:	2300      	movs	r3, #0
   13a26:	f885 3020 	strb.w	r3, [r5, #32]
	last = last + 1;
   13a2a:	78d3      	ldrb	r3, [r2, #3]
	if (last == count) {
   13a2c:	7851      	ldrb	r1, [r2, #1]
	last = last + 1;
   13a2e:	3301      	adds	r3, #1
   13a30:	b2db      	uxtb	r3, r3
		last = 0U;
   13a32:	4299      	cmp	r1, r3
   13a34:	bf08      	it	eq
   13a36:	2300      	moveq	r3, #0
	if (!MFIFO_ENQUEUE_IDX_GET(done, &idx)) {
   13a38:	7891      	ldrb	r1, [r2, #2]
	if (last == first) {
   13a3a:	4299      	cmp	r1, r3
   13a3c:	f000 80b7 	beq.w	13bae <rx_demux+0x30a>
	done->hdr.link = link;
   13a40:	602f      	str	r7, [r5, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13a42:	78d0      	ldrb	r0, [r2, #3]
   13a44:	7811      	ldrb	r1, [r2, #0]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13a46:	fb00 2101 	mla	r1, r0, r1, r2
   13a4a:	604d      	str	r5, [r1, #4]
	*last = idx; /* Commit: Update write index */
   13a4c:	70d3      	strb	r3, [r2, #3]
	return MFIFO_DEQUEUE_GET(prep);
   13a4e:	4d3e      	ldr	r5, [pc, #248]	; (13b48 <rx_demux+0x2a4>)
   13a50:	78aa      	ldrb	r2, [r5, #2]
	if (first == last) {
   13a52:	78e9      	ldrb	r1, [r5, #3]
   13a54:	782b      	ldrb	r3, [r5, #0]
   13a56:	4291      	cmp	r1, r2
   13a58:	d025      	beq.n	13aa6 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   13a5a:	f105 0a04 	add.w	sl, r5, #4
   13a5e:	fb02 a303 	mla	r3, r2, r3, sl
	while (next) {
   13a62:	b303      	cbz	r3, 13aa6 <rx_demux+0x202>
		uint8_t is_aborted = next->is_aborted;
   13a64:	f893 2020 	ldrb.w	r2, [r3, #32]
		if (!is_aborted) {
   13a68:	0791      	lsls	r1, r2, #30
		uint8_t is_aborted = next->is_aborted;
   13a6a:	f3c2 0740 	ubfx	r7, r2, #1, #1
		uint8_t is_resume = next->is_resume;
   13a6e:	f002 0801 	and.w	r8, r2, #1
		if (!is_aborted) {
   13a72:	d56d      	bpl.n	13b50 <rx_demux+0x2ac>
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
					     TICKER_USER_ID_LLL, 0, &mfy);
			LL_ASSERT(!ret);
		}

		MFIFO_DEQUEUE(prep);
   13a74:	78e9      	ldrb	r1, [r5, #3]
 * @return              Head buffer; or NULL if queue was empty
 */
static inline void *mfifo_dequeue(uint8_t *fifo, uint8_t size, uint8_t count,
				  uint8_t last, uint8_t *first)
{
	uint8_t _first = *first; /* Copy read-index */
   13a76:	78ab      	ldrb	r3, [r5, #2]
   13a78:	782a      	ldrb	r2, [r5, #0]
   13a7a:	7868      	ldrb	r0, [r5, #1]
	void *mem;

	/* Queue is empty if first == last */
	if (_first == last) {
   13a7c:	4299      	cmp	r1, r3
   13a7e:	d012      	beq.n	13aa6 <rx_demux+0x202>
	 * API 2: fifo is array of void-ptrs
	 */
	mem = *((void **)(fifo + _first * size));

	/* Circular buffer increment read-index modulo 'count' */
	_first += 1U;
   13a80:	3301      	adds	r3, #1
   13a82:	b2db      	uxtb	r3, r3
	if (_first == count) {
   13a84:	4298      	cmp	r0, r3
   13a86:	d07b      	beq.n	13b80 <rx_demux+0x2dc>
	if (first == last) {
   13a88:	4299      	cmp	r1, r3
		_first = 0U;
	}

	*first = _first; /* Write back read-index */
   13a8a:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   13a8c:	d00b      	beq.n	13aa6 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   13a8e:	fb03 a302 	mla	r3, r3, r2, sl

		next = ull_prepare_dequeue_get();

		if (!next || (!is_aborted && (!is_resume || next->is_resume))) {
   13a92:	b143      	cbz	r3, 13aa6 <rx_demux+0x202>
   13a94:	2f00      	cmp	r7, #0
   13a96:	d1e5      	bne.n	13a64 <rx_demux+0x1c0>
   13a98:	f1b8 0f00 	cmp.w	r8, #0
   13a9c:	d003      	beq.n	13aa6 <rx_demux+0x202>
   13a9e:	f893 2020 	ldrb.w	r2, [r3, #32]
   13aa2:	07d2      	lsls	r2, r2, #31
   13aa4:	d5de      	bpl.n	13a64 <rx_demux+0x1c0>
			break;
		}
	}

	/* ull instance will resume, dont decrement ref */
	if (!ull_hdr) {
   13aa6:	f1b9 0f00 	cmp.w	r9, #0
   13aaa:	f43f af02 	beq.w	138b2 <rx_demux+0xe>
	return hdr->ref;
   13aae:	f899 3000 	ldrb.w	r3, [r9]
		return;
	}

	/* Decrement prepare reference */
	LL_ASSERT(ull_ref_get(ull_hdr));
   13ab2:	2b00      	cmp	r3, #0
   13ab4:	f000 8089 	beq.w	13bca <rx_demux+0x326>
	return hdr->ref--;
   13ab8:	f899 3000 	ldrb.w	r3, [r9]
   13abc:	3b01      	subs	r3, #1
   13abe:	b2db      	uxtb	r3, r3
   13ac0:	f889 3000 	strb.w	r3, [r9]
	return hdr->ref;
   13ac4:	f899 3000 	ldrb.w	r3, [r9]
	ull_ref_dec(ull_hdr);

	/* If disable initiated, signal the semaphore */
	if (!ull_ref_get(ull_hdr) && ull_hdr->disabled_cb) {
   13ac8:	2b00      	cmp	r3, #0
   13aca:	f47f aef2 	bne.w	138b2 <rx_demux+0xe>
   13ace:	f8d9 3004 	ldr.w	r3, [r9, #4]
   13ad2:	2b00      	cmp	r3, #0
   13ad4:	f43f aeed 	beq.w	138b2 <rx_demux+0xe>
		ull_hdr->disabled_cb(ull_hdr->disabled_param);
   13ad8:	f8d9 0008 	ldr.w	r0, [r9, #8]
   13adc:	4798      	blx	r3
			if (nack) {
   13ade:	e6e8      	b.n	138b2 <rx_demux+0xe>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13ae0:	4910      	ldr	r1, [pc, #64]	; (13b24 <rx_demux+0x280>)
   13ae2:	6860      	ldr	r0, [r4, #4]
   13ae4:	2200      	movs	r2, #0
   13ae6:	f7fc fe8d 	bl	10804 <memq_dequeue>
		ull_conn_setup(link, rx);
   13aea:	9905      	ldr	r1, [sp, #20]
   13aec:	4638      	mov	r0, r7
   13aee:	f002 fb4b 	bl	16188 <ull_conn_setup>
			if (nack) {
   13af2:	e6de      	b.n	138b2 <rx_demux+0xe>
		nack = ull_conn_rx(link, (void *)&rx);
   13af4:	a905      	add	r1, sp, #20
   13af6:	4638      	mov	r0, r7
   13af8:	f002 fb66 	bl	161c8 <ull_conn_rx>
		if (nack) {
   13afc:	2800      	cmp	r0, #0
   13afe:	d049      	beq.n	13b94 <rx_demux+0x2f0>
}
   13b00:	b007      	add	sp, #28
   13b02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			LL_ASSERT(rx);
   13b06:	4a0a      	ldr	r2, [pc, #40]	; (13b30 <rx_demux+0x28c>)
   13b08:	4910      	ldr	r1, [pc, #64]	; (13b4c <rx_demux+0x2a8>)
   13b0a:	480b      	ldr	r0, [pc, #44]	; (13b38 <rx_demux+0x294>)
   13b0c:	f240 7333 	movw	r3, #1843	; 0x733
   13b10:	f00e f808 	bl	21b24 <printk>
   13b14:	4040      	eors	r0, r0
   13b16:	f380 8811 	msr	BASEPRI, r0
   13b1a:	f04f 0003 	mov.w	r0, #3
   13b1e:	df02      	svc	2
			link_tx = ull_conn_ack_by_last_peek(rx->ack_last,
   13b20:	9b03      	ldr	r3, [sp, #12]
   13b22:	e6d2      	b.n	138ca <rx_demux+0x26>
   13b24:	2000ddd0 	.word	0x2000ddd0
   13b28:	2000ddd8 	.word	0x2000ddd8
   13b2c:	20000524 	.word	0x20000524
   13b30:	00028648 	.word	0x00028648
   13b34:	0002849c 	.word	0x0002849c
   13b38:	00028404 	.word	0x00028404
   13b3c:	20000500 	.word	0x20000500
   13b40:	2000ddcc 	.word	0x2000ddcc
   13b44:	2000039c 	.word	0x2000039c
   13b48:	200003dc 	.word	0x200003dc
   13b4c:	0002868c 	.word	0x0002868c
			mfy.param = next;
   13b50:	f8cb 3008 	str.w	r3, [fp, #8]
			ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   13b54:	463a      	mov	r2, r7
   13b56:	465b      	mov	r3, fp
   13b58:	4639      	mov	r1, r7
   13b5a:	2001      	movs	r0, #1
   13b5c:	f7fc feb4 	bl	108c8 <mayfly_enqueue>
			LL_ASSERT(!ret);
   13b60:	2800      	cmp	r0, #0
   13b62:	d087      	beq.n	13a74 <rx_demux+0x1d0>
   13b64:	4820      	ldr	r0, [pc, #128]	; (13be8 <rx_demux+0x344>)
   13b66:	4a21      	ldr	r2, [pc, #132]	; (13bec <rx_demux+0x348>)
   13b68:	4921      	ldr	r1, [pc, #132]	; (13bf0 <rx_demux+0x34c>)
   13b6a:	f640 038c 	movw	r3, #2188	; 0x88c
   13b6e:	f00d ffd9 	bl	21b24 <printk>
   13b72:	4040      	eors	r0, r0
   13b74:	f380 8811 	msr	BASEPRI, r0
   13b78:	f04f 0003 	mov.w	r0, #3
   13b7c:	df02      	svc	2
   13b7e:	e779      	b.n	13a74 <rx_demux+0x1d0>
	*first = _first; /* Write back read-index */
   13b80:	2300      	movs	r3, #0
   13b82:	70ab      	strb	r3, [r5, #2]
	if (first == last) {
   13b84:	2900      	cmp	r1, #0
   13b86:	d08e      	beq.n	13aa6 <rx_demux+0x202>
	return (void *)(fifo + first * size);
   13b88:	4b1a      	ldr	r3, [pc, #104]	; (13bf4 <rx_demux+0x350>)
   13b8a:	e783      	b.n	13a94 <rx_demux+0x1f0>
		ull_conn_done(done);
   13b8c:	4628      	mov	r0, r5
   13b8e:	f005 f947 	bl	18e20 <ull_conn_done>
		break;
   13b92:	e746      	b.n	13a22 <rx_demux+0x17e>
		memq_dequeue(memq_ull_rx.tail, &memq_ull_rx.head, NULL);
   13b94:	4918      	ldr	r1, [pc, #96]	; (13bf8 <rx_demux+0x354>)
   13b96:	4602      	mov	r2, r0
   13b98:	6860      	ldr	r0, [r4, #4]
   13b9a:	f7fc fe33 	bl	10804 <memq_dequeue>
		if (rx) {
   13b9e:	9905      	ldr	r1, [sp, #20]
   13ba0:	2900      	cmp	r1, #0
   13ba2:	f43f ae86 	beq.w	138b2 <rx_demux+0xe>
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13ba6:	4b15      	ldr	r3, [pc, #84]	; (13bfc <rx_demux+0x358>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   13ba8:	4638      	mov	r0, r7
	rx_hdr->ack_last = mfifo_tx_ack.l;
   13baa:	78db      	ldrb	r3, [r3, #3]
   13bac:	e716      	b.n	139dc <rx_demux+0x138>
	LL_ASSERT(release == done);
   13bae:	4a0f      	ldr	r2, [pc, #60]	; (13bec <rx_demux+0x348>)
   13bb0:	4913      	ldr	r1, [pc, #76]	; (13c00 <rx_demux+0x35c>)
   13bb2:	480d      	ldr	r0, [pc, #52]	; (13be8 <rx_demux+0x344>)
   13bb4:	f640 037b 	movw	r3, #2171	; 0x87b
   13bb8:	f00d ffb4 	bl	21b24 <printk>
   13bbc:	4040      	eors	r0, r0
   13bbe:	f380 8811 	msr	BASEPRI, r0
   13bc2:	f04f 0003 	mov.w	r0, #3
   13bc6:	df02      	svc	2
   13bc8:	e741      	b.n	13a4e <rx_demux+0x1aa>
	LL_ASSERT(ull_ref_get(ull_hdr));
   13bca:	4a08      	ldr	r2, [pc, #32]	; (13bec <rx_demux+0x348>)
   13bcc:	490d      	ldr	r1, [pc, #52]	; (13c04 <rx_demux+0x360>)
   13bce:	4806      	ldr	r0, [pc, #24]	; (13be8 <rx_demux+0x344>)
   13bd0:	f640 039e 	movw	r3, #2206	; 0x89e
   13bd4:	f00d ffa6 	bl	21b24 <printk>
   13bd8:	4040      	eors	r0, r0
   13bda:	f380 8811 	msr	BASEPRI, r0
   13bde:	f04f 0003 	mov.w	r0, #3
   13be2:	df02      	svc	2
   13be4:	e768      	b.n	13ab8 <rx_demux+0x214>
   13be6:	bf00      	nop
   13be8:	00028404 	.word	0x00028404
   13bec:	00028648 	.word	0x00028648
   13bf0:	000286a0 	.word	0x000286a0
   13bf4:	200003e0 	.word	0x200003e0
   13bf8:	2000ddd0 	.word	0x2000ddd0
   13bfc:	20000500 	.word	0x20000500
   13c00:	00028690 	.word	0x00028690
   13c04:	000286a8 	.word	0x000286a8

00013c08 <ll_init>:
{
   13c08:	b530      	push	{r4, r5, lr}
	sem_recv = sem_rx;
   13c0a:	4b2b      	ldr	r3, [pc, #172]	; (13cb8 <ll_init+0xb0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13c0c:	4d2b      	ldr	r5, [pc, #172]	; (13cbc <ll_init+0xb4>)
	sem_recv = sem_rx;
   13c0e:	6018      	str	r0, [r3, #0]
{
   13c10:	b087      	sub	sp, #28
	cntr_init();
   13c12:	f008 fd79 	bl	1c708 <cntr_init>
	mayfly_init();
   13c16:	f7fc fe05 	bl	10824 <mayfly_init>
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13c1a:	4a29      	ldr	r2, [pc, #164]	; (13cc0 <ll_init+0xb8>)
   13c1c:	4c29      	ldr	r4, [pc, #164]	; (13cc4 <ll_init+0xbc>)
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13c1e:	492a      	ldr	r1, [pc, #168]	; (13cc8 <ll_init+0xc0>)
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13c20:	e9cd 2504 	strd	r2, r5, [sp, #16]
   13c24:	4a29      	ldr	r2, [pc, #164]	; (13ccc <ll_init+0xc4>)
   13c26:	e9cd 2402 	strd	r2, r4, [sp, #8]
   13c2a:	240c      	movs	r4, #12
   13c2c:	e9cd 1400 	strd	r1, r4, [sp]
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13c30:	2003      	movs	r0, #3
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13c32:	2304      	movs	r3, #4
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   13c34:	2402      	movs	r4, #2
	ticker_users[MAYFLY_CALL_ID_0][0] = TICKER_USER_LLL_OPS;
   13c36:	7008      	strb	r0, [r1, #0]
	ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   13c38:	7608      	strb	r0, [r1, #24]
	ticker_users[MAYFLY_CALL_ID_1][0] = TICKER_USER_ULL_HIGH_OPS;
   13c3a:	720b      	strb	r3, [r1, #8]
	ticker_users[MAYFLY_CALL_ID_2][0] = TICKER_USER_ULL_LOW_OPS;
   13c3c:	740c      	strb	r4, [r1, #16]
	err = ticker_init(TICKER_INSTANCE_ID_CTLR,
   13c3e:	4a24      	ldr	r2, [pc, #144]	; (13cd0 <ll_init+0xc8>)
   13c40:	2106      	movs	r1, #6
   13c42:	2000      	movs	r0, #0
   13c44:	f7fd fef2 	bl	11a2c <ticker_init>
	LL_ASSERT(!err);
   13c48:	bb40      	cbnz	r0, 13c9c <ll_init+0x94>
	return z_impl_k_sem_init(sem, initial_count, limit);
   13c4a:	2201      	movs	r2, #1
   13c4c:	2100      	movs	r1, #0
   13c4e:	4821      	ldr	r0, [pc, #132]	; (13cd4 <ll_init+0xcc>)
   13c50:	f013 fa37 	bl	270c2 <z_impl_k_sem_init>
	err = lll_init();
   13c54:	f007 f89e 	bl	1ad94 <lll_init>
	if (err) {
   13c58:	4604      	mov	r4, r0
   13c5a:	b110      	cbz	r0, 13c62 <ll_init+0x5a>
}
   13c5c:	4620      	mov	r0, r4
   13c5e:	b007      	add	sp, #28
   13c60:	bd30      	pop	{r4, r5, pc}
	err = init_reset();
   13c62:	f7ff fd93 	bl	1378c <init_reset>
	if (err) {
   13c66:	4604      	mov	r4, r0
   13c68:	2800      	cmp	r0, #0
   13c6a:	d1f7      	bne.n	13c5c <ll_init+0x54>
	err = lll_adv_init();
   13c6c:	f007 fc12 	bl	1b494 <lll_adv_init>
	if (err) {
   13c70:	4604      	mov	r4, r0
   13c72:	2800      	cmp	r0, #0
   13c74:	d1f2      	bne.n	13c5c <ll_init+0x54>
	err = ull_adv_init();
   13c76:	f001 f931 	bl	14edc <ull_adv_init>
	if (err) {
   13c7a:	4604      	mov	r4, r0
   13c7c:	2800      	cmp	r0, #0
   13c7e:	d1ed      	bne.n	13c5c <ll_init+0x54>
	err = lll_conn_init();
   13c80:	f008 f8aa 	bl	1bdd8 <lll_conn_init>
	if (err) {
   13c84:	4604      	mov	r4, r0
   13c86:	2800      	cmp	r0, #0
   13c88:	d1e8      	bne.n	13c5c <ll_init+0x54>
	err = ull_conn_init();
   13c8a:	f002 fa29 	bl	160e0 <ull_conn_init>
	if (err) {
   13c8e:	4604      	mov	r4, r0
   13c90:	2800      	cmp	r0, #0
   13c92:	d1e3      	bne.n	13c5c <ll_init+0x54>
		ull_filter_reset(true);
   13c94:	2001      	movs	r0, #1
   13c96:	f006 fd37 	bl	1a708 <ull_filter_reset>
	return  0;
   13c9a:	e7df      	b.n	13c5c <ll_init+0x54>
	LL_ASSERT(!err);
   13c9c:	4a0e      	ldr	r2, [pc, #56]	; (13cd8 <ll_init+0xd0>)
   13c9e:	490f      	ldr	r1, [pc, #60]	; (13cdc <ll_init+0xd4>)
   13ca0:	480f      	ldr	r0, [pc, #60]	; (13ce0 <ll_init+0xd8>)
   13ca2:	f44f 73b8 	mov.w	r3, #368	; 0x170
   13ca6:	f00d ff3d 	bl	21b24 <printk>
   13caa:	4040      	eors	r0, r0
   13cac:	f380 8811 	msr	BASEPRI, r0
   13cb0:	f04f 0003 	mov.w	r0, #3
   13cb4:	df02      	svc	2
   13cb6:	e7c8      	b.n	13c4a <ll_init+0x42>
   13cb8:	2000ddd8 	.word	0x2000ddd8
   13cbc:	0001d3b1 	.word	0x0001d3b1
   13cc0:	0001d261 	.word	0x0001d261
   13cc4:	0001d1fd 	.word	0x0001d1fd
   13cc8:	2000e184 	.word	0x2000e184
   13ccc:	2000df14 	.word	0x2000df14
   13cd0:	2000ddf4 	.word	0x2000ddf4
   13cd4:	2000dddc 	.word	0x2000dddc
   13cd8:	00028648 	.word	0x00028648
   13cdc:	00028684 	.word	0x00028684
   13ce0:	00028404 	.word	0x00028404

00013ce4 <ll_reset>:
{
   13ce4:	b510      	push	{r4, lr}
   13ce6:	b086      	sub	sp, #24
	err = ull_adv_reset();
   13ce8:	f001 f906 	bl	14ef8 <ull_adv_reset>
	LL_ASSERT(!err);
   13cec:	2800      	cmp	r0, #0
   13cee:	d130      	bne.n	13d52 <ll_reset+0x6e>
	err = ull_conn_reset();
   13cf0:	f002 f9f8 	bl	160e4 <ull_conn_reset>
	LL_ASSERT(!err);
   13cf4:	2800      	cmp	r0, #0
   13cf6:	d13d      	bne.n	13d74 <ll_reset+0x90>
	MFIFO_INIT(tx_ack);
   13cf8:	4b3b      	ldr	r3, [pc, #236]	; (13de8 <ll_reset+0x104>)
   13cfa:	2400      	movs	r4, #0
		ull_filter_reset(false);
   13cfc:	4620      	mov	r0, r4
	MFIFO_INIT(tx_ack);
   13cfe:	805c      	strh	r4, [r3, #2]
		ull_filter_reset(false);
   13d00:	f006 fd02 	bl	1a708 <ull_filter_reset>
	MFIFO_INIT(prep);
   13d04:	4839      	ldr	r0, [pc, #228]	; (13dec <ll_reset+0x108>)
	MFIFO_INIT(done);
   13d06:	493a      	ldr	r1, [pc, #232]	; (13df0 <ll_reset+0x10c>)
	MFIFO_INIT(pdu_rx_free);
   13d08:	4a3a      	ldr	r2, [pc, #232]	; (13df4 <ll_reset+0x110>)
	MFIFO_INIT(ll_pdu_rx_free);
   13d0a:	4b3b      	ldr	r3, [pc, #236]	; (13df8 <ll_reset+0x114>)
	MFIFO_INIT(prep);
   13d0c:	8044      	strh	r4, [r0, #2]
	MFIFO_INIT(done);
   13d0e:	804c      	strh	r4, [r1, #2]
	MFIFO_INIT(pdu_rx_free);
   13d10:	8054      	strh	r4, [r2, #2]
	MFIFO_INIT(ll_pdu_rx_free);
   13d12:	805c      	strh	r4, [r3, #2]
   13d14:	2201      	movs	r2, #1
   13d16:	4621      	mov	r1, r4
   13d18:	4668      	mov	r0, sp
   13d1a:	f013 f9d2 	bl	270c2 <z_impl_k_sem_init>
		mfy.param = &sem;
   13d1e:	4b37      	ldr	r3, [pc, #220]	; (13dfc <ll_reset+0x118>)
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13d20:	4622      	mov	r2, r4
   13d22:	4621      	mov	r1, r4
   13d24:	2003      	movs	r0, #3
		mfy.param = &sem;
   13d26:	f8c3 d008 	str.w	sp, [r3, #8]
		retval = mayfly_enqueue(TICKER_USER_ID_THREAD,
   13d2a:	f7fc fdcd 	bl	108c8 <mayfly_enqueue>
		LL_ASSERT(!retval);
   13d2e:	2800      	cmp	r0, #0
   13d30:	d14b      	bne.n	13dca <ll_reset+0xe6>
	return z_impl_k_sem_take(sem, timeout);
   13d32:	f04f 32ff 	mov.w	r2, #4294967295
   13d36:	f04f 33ff 	mov.w	r3, #4294967295
   13d3a:	4668      	mov	r0, sp
   13d3c:	f00c fbb8 	bl	204b0 <z_impl_k_sem_take>
	err = ull_adv_reset_finalize();
   13d40:	f001 f8e6 	bl	14f10 <ull_adv_reset_finalize>
	LL_ASSERT(!err);
   13d44:	2800      	cmp	r0, #0
   13d46:	d132      	bne.n	13dae <ll_reset+0xca>
	err = init_reset();
   13d48:	f7ff fd20 	bl	1378c <init_reset>
	LL_ASSERT(!err);
   13d4c:	bb00      	cbnz	r0, 13d90 <ll_reset+0xac>
}
   13d4e:	b006      	add	sp, #24
   13d50:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   13d52:	4a2b      	ldr	r2, [pc, #172]	; (13e00 <ll_reset+0x11c>)
   13d54:	492b      	ldr	r1, [pc, #172]	; (13e04 <ll_reset+0x120>)
   13d56:	482c      	ldr	r0, [pc, #176]	; (13e08 <ll_reset+0x124>)
   13d58:	f44f 73fe 	mov.w	r3, #508	; 0x1fc
   13d5c:	f00d fee2 	bl	21b24 <printk>
   13d60:	4040      	eors	r0, r0
   13d62:	f380 8811 	msr	BASEPRI, r0
   13d66:	f04f 0003 	mov.w	r0, #3
   13d6a:	df02      	svc	2
	err = ull_conn_reset();
   13d6c:	f002 f9ba 	bl	160e4 <ull_conn_reset>
	LL_ASSERT(!err);
   13d70:	2800      	cmp	r0, #0
   13d72:	d0c1      	beq.n	13cf8 <ll_reset+0x14>
   13d74:	4a22      	ldr	r2, [pc, #136]	; (13e00 <ll_reset+0x11c>)
   13d76:	4923      	ldr	r1, [pc, #140]	; (13e04 <ll_reset+0x120>)
   13d78:	4823      	ldr	r0, [pc, #140]	; (13e08 <ll_reset+0x124>)
   13d7a:	f44f 730f 	mov.w	r3, #572	; 0x23c
   13d7e:	f00d fed1 	bl	21b24 <printk>
   13d82:	4040      	eors	r0, r0
   13d84:	f380 8811 	msr	BASEPRI, r0
   13d88:	f04f 0003 	mov.w	r0, #3
   13d8c:	df02      	svc	2
   13d8e:	e7b3      	b.n	13cf8 <ll_reset+0x14>
	LL_ASSERT(!err);
   13d90:	4a1b      	ldr	r2, [pc, #108]	; (13e00 <ll_reset+0x11c>)
   13d92:	491c      	ldr	r1, [pc, #112]	; (13e04 <ll_reset+0x120>)
   13d94:	481c      	ldr	r0, [pc, #112]	; (13e08 <ll_reset+0x124>)
   13d96:	f44f 7320 	mov.w	r3, #640	; 0x280
   13d9a:	f00d fec3 	bl	21b24 <printk>
   13d9e:	4040      	eors	r0, r0
   13da0:	f380 8811 	msr	BASEPRI, r0
   13da4:	f04f 0003 	mov.w	r0, #3
   13da8:	df02      	svc	2
}
   13daa:	b006      	add	sp, #24
   13dac:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err);
   13dae:	4a14      	ldr	r2, [pc, #80]	; (13e00 <ll_reset+0x11c>)
   13db0:	4914      	ldr	r1, [pc, #80]	; (13e04 <ll_reset+0x120>)
   13db2:	4815      	ldr	r0, [pc, #84]	; (13e08 <ll_reset+0x124>)
   13db4:	f240 237b 	movw	r3, #635	; 0x27b
   13db8:	f00d feb4 	bl	21b24 <printk>
   13dbc:	4040      	eors	r0, r0
   13dbe:	f380 8811 	msr	BASEPRI, r0
   13dc2:	f04f 0003 	mov.w	r0, #3
   13dc6:	df02      	svc	2
   13dc8:	e7be      	b.n	13d48 <ll_reset+0x64>
		LL_ASSERT(!retval);
   13dca:	4a0d      	ldr	r2, [pc, #52]	; (13e00 <ll_reset+0x11c>)
   13dcc:	490f      	ldr	r1, [pc, #60]	; (13e0c <ll_reset+0x128>)
   13dce:	480e      	ldr	r0, [pc, #56]	; (13e08 <ll_reset+0x124>)
   13dd0:	f240 236e 	movw	r3, #622	; 0x26e
   13dd4:	f00d fea6 	bl	21b24 <printk>
   13dd8:	4040      	eors	r0, r0
   13dda:	f380 8811 	msr	BASEPRI, r0
   13dde:	f04f 0003 	mov.w	r0, #3
   13de2:	df02      	svc	2
   13de4:	e7a5      	b.n	13d32 <ll_reset+0x4e>
   13de6:	bf00      	nop
   13de8:	20000500 	.word	0x20000500
   13dec:	200003dc 	.word	0x200003dc
   13df0:	2000039c 	.word	0x2000039c
   13df4:	200003c4 	.word	0x200003c4
   13df8:	200003b0 	.word	0x200003b0
   13dfc:	20000564 	.word	0x20000564
   13e00:	00028648 	.word	0x00028648
   13e04:	00028684 	.word	0x00028684
   13e08:	00028404 	.word	0x00028404
   13e0c:	000286c0 	.word	0x000286c0

00013e10 <ll_rx_get>:
{
   13e10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13e14:	b085      	sub	sp, #20
   13e16:	e9cd 0100 	strd	r0, r1, [sp]
   13e1a:	4c65      	ldr	r4, [pc, #404]	; (13fb0 <ll_rx_get+0x1a0>)
				mem_release(link, &mem_link_rx.free);
   13e1c:	4d65      	ldr	r5, [pc, #404]	; (13fb4 <ll_rx_get+0x1a4>)
   13e1e:	4e66      	ldr	r6, [pc, #408]	; (13fb8 <ll_rx_get+0x1a8>)
	*node_rx = NULL;
   13e20:	9a00      	ldr	r2, [sp, #0]
   13e22:	2300      	movs	r3, #0
   13e24:	6013      	str	r3, [r2, #0]
	link = memq_peek(memq_ll_rx.head, memq_ll_rx.tail, (void **)&rx);
   13e26:	e9d6 0100 	ldrd	r0, r1, [r6]
   13e2a:	aa03      	add	r2, sp, #12
   13e2c:	f7fc fce2 	bl	107f4 <memq_peek>
	if (link) {
   13e30:	4680      	mov	r8, r0
   13e32:	2800      	cmp	r0, #0
   13e34:	f000 80a8 	beq.w	13f88 <ll_rx_get+0x178>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13e38:	9b03      	ldr	r3, [sp, #12]
   13e3a:	4960      	ldr	r1, [pc, #384]	; (13fbc <ll_rx_get+0x1ac>)
   13e3c:	781a      	ldrb	r2, [r3, #0]
   13e3e:	9801      	ldr	r0, [sp, #4]
   13e40:	f7ff fbc2 	bl	135c8 <tx_cmplt_get>
		if (!cmplt) {
   13e44:	2800      	cmp	r0, #0
   13e46:	f040 80a4 	bne.w	13f92 <ll_rx_get+0x182>
			f = mfifo_tx_ack.f;
   13e4a:	78a3      	ldrb	r3, [r4, #2]
   13e4c:	f88d 3009 	strb.w	r3, [sp, #9]
				cmplt_curr = tx_cmplt_get(&h, &f,
   13e50:	78e2      	ldrb	r2, [r4, #3]
   13e52:	4607      	mov	r7, r0
   13e54:	f10d 0109 	add.w	r1, sp, #9
   13e58:	f10d 000a 	add.w	r0, sp, #10
   13e5c:	f7ff fbb4 	bl	135c8 <tx_cmplt_get>
			} while ((cmplt_prev != 0U) ||
   13e60:	ea47 0200 	orr.w	r2, r7, r0
   13e64:	f012 02ff 	ands.w	r2, r2, #255	; 0xff
   13e68:	d1f2      	bne.n	13e50 <ll_rx_get+0x40>
			if (rx->type == NODE_RX_TYPE_RELEASE) {
   13e6a:	9b03      	ldr	r3, [sp, #12]
   13e6c:	7919      	ldrb	r1, [r3, #4]
   13e6e:	2901      	cmp	r1, #1
   13e70:	f040 8097 	bne.w	13fa2 <ll_rx_get+0x192>
				(void)memq_dequeue(memq_ll_rx.tail,
   13e74:	4950      	ldr	r1, [pc, #320]	; (13fb8 <ll_rx_get+0x1a8>)
   13e76:	6870      	ldr	r0, [r6, #4]
   13e78:	f7fc fcc4 	bl	10804 <memq_dequeue>
				mem_release(link, &mem_link_rx.free);
   13e7c:	4950      	ldr	r1, [pc, #320]	; (13fc0 <ll_rx_get+0x1b0>)
   13e7e:	4640      	mov	r0, r8
   13e80:	f7fc fc64 	bl	1074c <mem_release>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13e84:	782b      	ldrb	r3, [r5, #0]
   13e86:	2b06      	cmp	r3, #6
   13e88:	d86f      	bhi.n	13f6a <ll_rx_get+0x15a>
	mem_link_rx.quota_pdu += delta;
   13e8a:	3301      	adds	r3, #1
				mem_release(rx, &mem_pdu_rx.free);
   13e8c:	494d      	ldr	r1, [pc, #308]	; (13fc4 <ll_rx_get+0x1b4>)
   13e8e:	9803      	ldr	r0, [sp, #12]
	mem_link_rx.quota_pdu += delta;
   13e90:	702b      	strb	r3, [r5, #0]
				mem_release(rx, &mem_pdu_rx.free);
   13e92:	f7fc fc5b 	bl	1074c <mem_release>
	while ((max--) && MFIFO_ENQUEUE_IDX_GET(pdu_rx_free, &idx)) {
   13e96:	782b      	ldrb	r3, [r5, #0]
   13e98:	2b00      	cmp	r3, #0
   13e9a:	d0c1      	beq.n	13e20 <ll_rx_get+0x10>
   13e9c:	f8df 8128 	ldr.w	r8, [pc, #296]	; 13fc8 <ll_rx_get+0x1b8>
	last = last + 1;
   13ea0:	f898 7003 	ldrb.w	r7, [r8, #3]
	if (last == count) {
   13ea4:	f898 2001 	ldrb.w	r2, [r8, #1]
   13ea8:	f898 3002 	ldrb.w	r3, [r8, #2]
	last = last + 1;
   13eac:	3701      	adds	r7, #1
   13eae:	b2ff      	uxtb	r7, r7
		last = 0U;
   13eb0:	42ba      	cmp	r2, r7
   13eb2:	bf08      	it	eq
   13eb4:	2700      	moveq	r7, #0
	if (last == first) {
   13eb6:	429f      	cmp	r7, r3
   13eb8:	d0b2      	beq.n	13e20 <ll_rx_get+0x10>
		link = mem_acquire(&mem_link_rx.free);
   13eba:	4841      	ldr	r0, [pc, #260]	; (13fc0 <ll_rx_get+0x1b0>)
   13ebc:	f7fc fc2c 	bl	10718 <mem_acquire>
		if (!link) {
   13ec0:	4682      	mov	sl, r0
   13ec2:	2800      	cmp	r0, #0
   13ec4:	d0ac      	beq.n	13e20 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   13ec6:	483f      	ldr	r0, [pc, #252]	; (13fc4 <ll_rx_get+0x1b4>)
   13ec8:	f7fc fc26 	bl	10718 <mem_acquire>
		if (!rx) {
   13ecc:	2800      	cmp	r0, #0
   13ece:	d063      	beq.n	13f98 <ll_rx_get+0x188>
		rx->link = link;
   13ed0:	f8c0 a000 	str.w	sl, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13ed4:	f898 2003 	ldrb.w	r2, [r8, #3]
   13ed8:	f898 3000 	ldrb.w	r3, [r8]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13edc:	fb02 8303 	mla	r3, r2, r3, r8
   13ee0:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13ee2:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13ee4:	f888 7003 	strb.w	r7, [r8, #3]
   13ee8:	3b01      	subs	r3, #1
   13eea:	b2db      	uxtb	r3, r3
   13eec:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   13eee:	2b00      	cmp	r3, #0
   13ef0:	d096      	beq.n	13e20 <ll_rx_get+0x10>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13ef2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 13fcc <ll_rx_get+0x1bc>
		link = mem_acquire(&mem_link_rx.free);
   13ef6:	f8df 80c8 	ldr.w	r8, [pc, #200]	; 13fc0 <ll_rx_get+0x1b0>
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13efa:	f89a 7003 	ldrb.w	r7, [sl, #3]
		rx = mem_acquire(&mem_pdu_rx.free);
   13efe:	f8df b0c4 	ldr.w	fp, [pc, #196]	; 13fc4 <ll_rx_get+0x1b4>
   13f02:	e014      	b.n	13f2e <ll_rx_get+0x11e>
		link->mem = NULL;
   13f04:	2300      	movs	r3, #0
   13f06:	f8c9 3004 	str.w	r3, [r9, #4]
		rx->link = link;
   13f0a:	f8c0 9000 	str.w	r9, [r0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   13f0e:	f89a 2003 	ldrb.w	r2, [sl, #3]
   13f12:	f89a 3000 	ldrb.w	r3, [sl]
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   13f16:	fb02 a303 	mla	r3, r2, r3, sl
   13f1a:	6058      	str	r0, [r3, #4]
	mem_link_rx.quota_pdu += delta;
   13f1c:	782b      	ldrb	r3, [r5, #0]
	*last = idx; /* Commit: Update write index */
   13f1e:	f88a 7003 	strb.w	r7, [sl, #3]
   13f22:	3b01      	subs	r3, #1
   13f24:	b2db      	uxtb	r3, r3
   13f26:	702b      	strb	r3, [r5, #0]
	while (mem_link_rx.quota_pdu &&
   13f28:	2b00      	cmp	r3, #0
   13f2a:	f43f af79 	beq.w	13e20 <ll_rx_get+0x10>
	if (last == count) {
   13f2e:	f89a 2001 	ldrb.w	r2, [sl, #1]
	       MFIFO_ENQUEUE_IDX_GET(ll_pdu_rx_free, &idx)) {
   13f32:	f89a 3002 	ldrb.w	r3, [sl, #2]
	last = last + 1;
   13f36:	3701      	adds	r7, #1
   13f38:	b2ff      	uxtb	r7, r7
		last = 0U;
   13f3a:	42ba      	cmp	r2, r7
   13f3c:	bf08      	it	eq
   13f3e:	2700      	moveq	r7, #0
	if (last == first) {
   13f40:	429f      	cmp	r7, r3
		link = mem_acquire(&mem_link_rx.free);
   13f42:	4640      	mov	r0, r8
   13f44:	f43f af6c 	beq.w	13e20 <ll_rx_get+0x10>
   13f48:	f7fc fbe6 	bl	10718 <mem_acquire>
   13f4c:	4681      	mov	r9, r0
		rx = mem_acquire(&mem_pdu_rx.free);
   13f4e:	4658      	mov	r0, fp
		if (!link) {
   13f50:	f1b9 0f00 	cmp.w	r9, #0
   13f54:	f43f af64 	beq.w	13e20 <ll_rx_get+0x10>
		rx = mem_acquire(&mem_pdu_rx.free);
   13f58:	f7fc fbde 	bl	10718 <mem_acquire>
		if (!rx) {
   13f5c:	2800      	cmp	r0, #0
   13f5e:	d1d1      	bne.n	13f04 <ll_rx_get+0xf4>
			mem_release(link, &mem_link_rx.free);
   13f60:	4917      	ldr	r1, [pc, #92]	; (13fc0 <ll_rx_get+0x1b0>)
   13f62:	4648      	mov	r0, r9
   13f64:	f7fc fbf2 	bl	1074c <mem_release>
			return;
   13f68:	e75a      	b.n	13e20 <ll_rx_get+0x10>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   13f6a:	4a19      	ldr	r2, [pc, #100]	; (13fd0 <ll_rx_get+0x1c0>)
   13f6c:	4919      	ldr	r1, [pc, #100]	; (13fd4 <ll_rx_get+0x1c4>)
   13f6e:	481a      	ldr	r0, [pc, #104]	; (13fd8 <ll_rx_get+0x1c8>)
   13f70:	f240 43ac 	movw	r3, #1196	; 0x4ac
   13f74:	f00d fdd6 	bl	21b24 <printk>
   13f78:	4040      	eors	r0, r0
   13f7a:	f380 8811 	msr	BASEPRI, r0
   13f7e:	f04f 0003 	mov.w	r0, #3
   13f82:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   13f84:	782b      	ldrb	r3, [r5, #0]
   13f86:	e780      	b.n	13e8a <ll_rx_get+0x7a>
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, mfifo_tx_ack.l);
   13f88:	78e2      	ldrb	r2, [r4, #3]
   13f8a:	490c      	ldr	r1, [pc, #48]	; (13fbc <ll_rx_get+0x1ac>)
   13f8c:	9801      	ldr	r0, [sp, #4]
   13f8e:	f7ff fb1b 	bl	135c8 <tx_cmplt_get>
}
   13f92:	b005      	add	sp, #20
   13f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mem_release(link, &mem_link_rx.free);
   13f98:	4909      	ldr	r1, [pc, #36]	; (13fc0 <ll_rx_get+0x1b0>)
   13f9a:	4650      	mov	r0, sl
   13f9c:	f7fc fbd6 	bl	1074c <mem_release>
			return;
   13fa0:	e73e      	b.n	13e20 <ll_rx_get+0x10>
			*node_rx = rx;
   13fa2:	9900      	ldr	r1, [sp, #0]
		cmplt = tx_cmplt_get(handle, &mfifo_tx_ack.f, rx->ack_last);
   13fa4:	4610      	mov	r0, r2
			*node_rx = rx;
   13fa6:	600b      	str	r3, [r1, #0]
}
   13fa8:	b005      	add	sp, #20
   13faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13fae:	bf00      	nop
   13fb0:	20000500 	.word	0x20000500
   13fb4:	2000dadc 	.word	0x2000dadc
   13fb8:	2000ddc8 	.word	0x2000ddc8
   13fbc:	20000502 	.word	0x20000502
   13fc0:	2000dae0 	.word	0x2000dae0
   13fc4:	2000db3c 	.word	0x2000db3c
   13fc8:	200003c4 	.word	0x200003c4
   13fcc:	200003b0 	.word	0x200003b0
   13fd0:	00028648 	.word	0x00028648
   13fd4:	000286c8 	.word	0x000286c8
   13fd8:	00028404 	.word	0x00028404

00013fdc <ll_rx_dequeue>:
{
   13fdc:	b570      	push	{r4, r5, r6, lr}
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13fde:	495c      	ldr	r1, [pc, #368]	; (14150 <ll_rx_dequeue+0x174>)
{
   13fe0:	b082      	sub	sp, #8
	struct node_rx_hdr *rx = NULL;
   13fe2:	2300      	movs	r3, #0
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13fe4:	6848      	ldr	r0, [r1, #4]
	struct node_rx_hdr *rx = NULL;
   13fe6:	9301      	str	r3, [sp, #4]
	link = memq_dequeue(memq_ll_rx.tail, &memq_ll_rx.head,
   13fe8:	aa01      	add	r2, sp, #4
   13fea:	f7fc fc0b 	bl	10804 <memq_dequeue>
	LL_ASSERT(link);
   13fee:	4604      	mov	r4, r0
   13ff0:	2800      	cmp	r0, #0
   13ff2:	d061      	beq.n	140b8 <ll_rx_dequeue+0xdc>
	mem_release(link, &mem_link_rx.free);
   13ff4:	4957      	ldr	r1, [pc, #348]	; (14154 <ll_rx_dequeue+0x178>)
   13ff6:	4620      	mov	r0, r4
   13ff8:	f7fc fba8 	bl	1074c <mem_release>
	switch (rx->type) {
   13ffc:	9a01      	ldr	r2, [sp, #4]
   13ffe:	7913      	ldrb	r3, [r2, #4]
   14000:	2b19      	cmp	r3, #25
   14002:	d80e      	bhi.n	14022 <ll_rx_dequeue+0x46>
   14004:	e8df f003 	tbb	[pc, r3]
   14008:	1c0d0d1c 	.word	0x1c0d0d1c
   1400c:	0d0d0d0d 	.word	0x0d0d0d0d
   14010:	0d0d0d0d 	.word	0x0d0d0d0d
   14014:	0d0d0d0d 	.word	0x0d0d0d0d
   14018:	2d0d0d0d 	.word	0x2d0d0d0d
   1401c:	1c1c1c1c 	.word	0x1c1c1c1c
   14020:	1c1c      	.short	0x1c1c
		LL_ASSERT(0);
   14022:	4a4d      	ldr	r2, [pc, #308]	; (14158 <ll_rx_dequeue+0x17c>)
   14024:	494d      	ldr	r1, [pc, #308]	; (1415c <ll_rx_dequeue+0x180>)
   14026:	484e      	ldr	r0, [pc, #312]	; (14160 <ll_rx_dequeue+0x184>)
   14028:	f44f 736f 	mov.w	r3, #956	; 0x3bc
   1402c:	f00d fd7a 	bl	21b24 <printk>
   14030:	4040      	eors	r0, r0
   14032:	f380 8811 	msr	BASEPRI, r0
   14036:	f04f 0003 	mov.w	r0, #3
   1403a:	df02      	svc	2
}
   1403c:	b002      	add	sp, #8
   1403e:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rx->type != NODE_RX_TYPE_NONE);
   14040:	2b00      	cmp	r3, #0
   14042:	d1fb      	bne.n	1403c <ll_rx_dequeue+0x60>
   14044:	4a44      	ldr	r2, [pc, #272]	; (14158 <ll_rx_dequeue+0x17c>)
   14046:	4947      	ldr	r1, [pc, #284]	; (14164 <ll_rx_dequeue+0x188>)
   14048:	4845      	ldr	r0, [pc, #276]	; (14160 <ll_rx_dequeue+0x184>)
   1404a:	f44f 736e 	mov.w	r3, #952	; 0x3b8
   1404e:	f00d fd69 	bl	21b24 <printk>
   14052:	4040      	eors	r0, r0
   14054:	f380 8811 	msr	BASEPRI, r0
   14058:	f04f 0003 	mov.w	r0, #3
   1405c:	df02      	svc	2
}
   1405e:	b002      	add	sp, #8
   14060:	bd70      	pop	{r4, r5, r6, pc}
		} else if ((cc->status == BT_HCI_ERR_ADV_TIMEOUT) || cc->role) {
   14062:	7f13      	ldrb	r3, [r2, #28]
   14064:	2b3c      	cmp	r3, #60	; 0x3c
   14066:	d035      	beq.n	140d4 <ll_rx_dequeue+0xf8>
   14068:	7f53      	ldrb	r3, [r2, #29]
   1406a:	b1bb      	cbz	r3, 1409c <ll_rx_dequeue+0xc0>
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   1406c:	6893      	ldr	r3, [r2, #8]
   1406e:	681c      	ldr	r4, [r3, #0]
				if (adv->node_rx_cc_free) {
   14070:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   14072:	b120      	cbz	r0, 1407e <ll_rx_dequeue+0xa2>
					adv->node_rx_cc_free = NULL;
   14074:	2300      	movs	r3, #0
					mem_release(rx_free, &mem_pdu_rx.free);
   14076:	493c      	ldr	r1, [pc, #240]	; (14168 <ll_rx_dequeue+0x18c>)
					adv->node_rx_cc_free = NULL;
   14078:	64a3      	str	r3, [r4, #72]	; 0x48
					mem_release(rx_free, &mem_pdu_rx.free);
   1407a:	f7fc fb67 	bl	1074c <mem_release>
			adv->is_enabled = 0U;
   1407e:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
   14082:	f36f 0300 	bfc	r3, #0, #1
   14086:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
			      ull_adv_is_enabled(0));
   1408a:	2000      	movs	r0, #0
   1408c:	f000 ff7e 	bl	14f8c <ull_adv_is_enabled>
			if (!bm) {
   14090:	2800      	cmp	r0, #0
   14092:	d1d3      	bne.n	1403c <ll_rx_dequeue+0x60>
				ull_filter_adv_scan_state_cb(0);
   14094:	f006 f890 	bl	1a1b8 <ull_filter_adv_scan_state_cb>
}
   14098:	b002      	add	sp, #8
   1409a:	bd70      	pop	{r4, r5, r6, pc}
			LL_ASSERT(0);
   1409c:	4a2e      	ldr	r2, [pc, #184]	; (14158 <ll_rx_dequeue+0x17c>)
   1409e:	492f      	ldr	r1, [pc, #188]	; (1415c <ll_rx_dequeue+0x180>)
   140a0:	482f      	ldr	r0, [pc, #188]	; (14160 <ll_rx_dequeue+0x184>)
   140a2:	f44f 7359 	mov.w	r3, #868	; 0x364
   140a6:	f00d fd3d 	bl	21b24 <printk>
   140aa:	4040      	eors	r0, r0
   140ac:	f380 8811 	msr	BASEPRI, r0
   140b0:	f04f 0003 	mov.w	r0, #3
   140b4:	df02      	svc	2
   140b6:	e7e8      	b.n	1408a <ll_rx_dequeue+0xae>
	LL_ASSERT(link);
   140b8:	4a27      	ldr	r2, [pc, #156]	; (14158 <ll_rx_dequeue+0x17c>)
   140ba:	492c      	ldr	r1, [pc, #176]	; (1416c <ll_rx_dequeue+0x190>)
   140bc:	4828      	ldr	r0, [pc, #160]	; (14160 <ll_rx_dequeue+0x184>)
   140be:	f240 23d2 	movw	r3, #722	; 0x2d2
   140c2:	f00d fd2f 	bl	21b24 <printk>
   140c6:	4040      	eors	r0, r0
   140c8:	f380 8811 	msr	BASEPRI, r0
   140cc:	f04f 0003 	mov.w	r0, #3
   140d0:	df02      	svc	2
   140d2:	e78f      	b.n	13ff4 <ll_rx_dequeue+0x18>
			struct lll_adv *lll = ftr->param;
   140d4:	6896      	ldr	r6, [r2, #8]
				conn_lll = lll->conn;
   140d6:	68b5      	ldr	r5, [r6, #8]
			struct ll_adv_set *adv = (void *)HDR_LLL2EVT(lll);
   140d8:	6834      	ldr	r4, [r6, #0]
				LL_ASSERT(conn_lll);
   140da:	b1ed      	cbz	r5, 14118 <ll_rx_dequeue+0x13c>
				LL_ASSERT(!conn_lll->link_tx_free);
   140dc:	6deb      	ldr	r3, [r5, #92]	; 0x5c
				lll->conn = NULL;
   140de:	2200      	movs	r2, #0
   140e0:	60b2      	str	r2, [r6, #8]
				LL_ASSERT(!conn_lll->link_tx_free);
   140e2:	b163      	cbz	r3, 140fe <ll_rx_dequeue+0x122>
   140e4:	4a1c      	ldr	r2, [pc, #112]	; (14158 <ll_rx_dequeue+0x17c>)
   140e6:	4922      	ldr	r1, [pc, #136]	; (14170 <ll_rx_dequeue+0x194>)
   140e8:	481d      	ldr	r0, [pc, #116]	; (14160 <ll_rx_dequeue+0x184>)
   140ea:	f44f 734f 	mov.w	r3, #828	; 0x33c
   140ee:	f00d fd19 	bl	21b24 <printk>
   140f2:	4040      	eors	r0, r0
   140f4:	f380 8811 	msr	BASEPRI, r0
   140f8:	f04f 0003 	mov.w	r0, #3
   140fc:	df02      	svc	2
				link = memq_deinit(&conn_lll->memq_tx.head,
   140fe:	f105 0150 	add.w	r1, r5, #80	; 0x50
   14102:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   14106:	f7fc fb61 	bl	107cc <memq_deinit>
				LL_ASSERT(link);
   1410a:	4606      	mov	r6, r0
   1410c:	b190      	cbz	r0, 14134 <ll_rx_dequeue+0x158>
				ll_conn_release(conn);
   1410e:	6828      	ldr	r0, [r5, #0]
				conn_lll->link_tx_free = link;
   14110:	65ee      	str	r6, [r5, #92]	; 0x5c
				ll_conn_release(conn);
   14112:	f001 fced 	bl	15af0 <ll_conn_release>
   14116:	e7b2      	b.n	1407e <ll_rx_dequeue+0xa2>
				LL_ASSERT(conn_lll);
   14118:	4a0f      	ldr	r2, [pc, #60]	; (14158 <ll_rx_dequeue+0x17c>)
   1411a:	4916      	ldr	r1, [pc, #88]	; (14174 <ll_rx_dequeue+0x198>)
   1411c:	4810      	ldr	r0, [pc, #64]	; (14160 <ll_rx_dequeue+0x184>)
   1411e:	f240 3339 	movw	r3, #825	; 0x339
   14122:	f00d fcff 	bl	21b24 <printk>
   14126:	4040      	eors	r0, r0
   14128:	f380 8811 	msr	BASEPRI, r0
   1412c:	f04f 0003 	mov.w	r0, #3
   14130:	df02      	svc	2
   14132:	e7d3      	b.n	140dc <ll_rx_dequeue+0x100>
				LL_ASSERT(link);
   14134:	4a08      	ldr	r2, [pc, #32]	; (14158 <ll_rx_dequeue+0x17c>)
   14136:	490d      	ldr	r1, [pc, #52]	; (1416c <ll_rx_dequeue+0x190>)
   14138:	4809      	ldr	r0, [pc, #36]	; (14160 <ll_rx_dequeue+0x184>)
   1413a:	f240 333f 	movw	r3, #831	; 0x33f
   1413e:	f00d fcf1 	bl	21b24 <printk>
   14142:	4040      	eors	r0, r0
   14144:	f380 8811 	msr	BASEPRI, r0
   14148:	f04f 0003 	mov.w	r0, #3
   1414c:	df02      	svc	2
   1414e:	e7de      	b.n	1410e <ll_rx_dequeue+0x132>
   14150:	2000ddc8 	.word	0x2000ddc8
   14154:	2000dae0 	.word	0x2000dae0
   14158:	00028648 	.word	0x00028648
   1415c:	0002849c 	.word	0x0002849c
   14160:	00028404 	.word	0x00028404
   14164:	00028720 	.word	0x00028720
   14168:	2000db3c 	.word	0x2000db3c
   1416c:	00028910 	.word	0x00028910
   14170:	00028708 	.word	0x00028708
   14174:	000286fc 	.word	0x000286fc

00014178 <ll_rx_mem_release>:
{
   14178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx = *node_rx;
   1417c:	6804      	ldr	r4, [r0, #0]
{
   1417e:	4680      	mov	r8, r0
	while (rx) {
   14180:	b334      	cbz	r4, 141d0 <ll_rx_mem_release+0x58>
			LL_ASSERT(0);
   14182:	4f54      	ldr	r7, [pc, #336]	; (142d4 <ll_rx_mem_release+0x15c>)
   14184:	f8df 9150 	ldr.w	r9, [pc, #336]	; 142d8 <ll_rx_mem_release+0x160>
   14188:	4e54      	ldr	r6, [pc, #336]	; (142dc <ll_rx_mem_release+0x164>)
		rx = rx->next;
   1418a:	4625      	mov	r5, r4
   1418c:	6824      	ldr	r4, [r4, #0]
		switch (rx_free->type) {
   1418e:	792b      	ldrb	r3, [r5, #4]
   14190:	2b19      	cmp	r3, #25
   14192:	d80e      	bhi.n	141b2 <ll_rx_mem_release+0x3a>
   14194:	e8df f003 	tbb	[pc, r3]
   14198:	360d0d36 	.word	0x360d0d36
   1419c:	0d0d0d0d 	.word	0x0d0d0d0d
   141a0:	0d0d0d0d 	.word	0x0d0d0d0d
   141a4:	0d0d0d0d 	.word	0x0d0d0d0d
   141a8:	240d0d0d 	.word	0x240d0d0d
   141ac:	36363654 	.word	0x36363654
   141b0:	3636      	.short	0x3636
			LL_ASSERT(0);
   141b2:	f44f 6394 	mov.w	r3, #1184	; 0x4a0
   141b6:	463a      	mov	r2, r7
   141b8:	4649      	mov	r1, r9
   141ba:	4630      	mov	r0, r6
   141bc:	f00d fcb2 	bl	21b24 <printk>
   141c0:	4040      	eors	r0, r0
   141c2:	f380 8811 	msr	BASEPRI, r0
   141c6:	f04f 0003 	mov.w	r0, #3
   141ca:	df02      	svc	2
	while (rx) {
   141cc:	2c00      	cmp	r4, #0
   141ce:	d1dc      	bne.n	1418a <ll_rx_mem_release+0x12>
	*node_rx = rx;
   141d0:	2300      	movs	r3, #0
   141d2:	f8c8 3000 	str.w	r3, [r8]
	rx_alloc(UINT8_MAX);
   141d6:	20ff      	movs	r0, #255	; 0xff
}
   141d8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	rx_alloc(UINT8_MAX);
   141dc:	f7ff ba5a 	b.w	13694 <rx_alloc>
			} else if (cc->status == BT_HCI_ERR_ADV_TIMEOUT) {
   141e0:	7f2b      	ldrb	r3, [r5, #28]
   141e2:	2b3c      	cmp	r3, #60	; 0x3c
   141e4:	d05f      	beq.n	142a6 <ll_rx_mem_release+0x12e>
				LL_ASSERT(!cc->status);
   141e6:	b1db      	cbz	r3, 14220 <ll_rx_mem_release+0xa8>
   141e8:	493d      	ldr	r1, [pc, #244]	; (142e0 <ll_rx_mem_release+0x168>)
   141ea:	f240 4326 	movw	r3, #1062	; 0x426
   141ee:	463a      	mov	r2, r7
   141f0:	4630      	mov	r0, r6
   141f2:	f00d fc97 	bl	21b24 <printk>
   141f6:	4040      	eors	r0, r0
   141f8:	f380 8811 	msr	BASEPRI, r0
   141fc:	f04f 0003 	mov.w	r0, #3
   14200:	df02      	svc	2
			LL_ASSERT(rx_free->type != NODE_RX_TYPE_NONE);
   14202:	792b      	ldrb	r3, [r5, #4]
   14204:	b963      	cbnz	r3, 14220 <ll_rx_mem_release+0xa8>
   14206:	4937      	ldr	r1, [pc, #220]	; (142e4 <ll_rx_mem_release+0x16c>)
   14208:	f240 436c 	movw	r3, #1132	; 0x46c
   1420c:	463a      	mov	r2, r7
   1420e:	4630      	mov	r0, r6
   14210:	f00d fc88 	bl	21b24 <printk>
   14214:	4040      	eors	r0, r0
   14216:	f380 8811 	msr	BASEPRI, r0
   1421a:	f04f 0003 	mov.w	r0, #3
   1421e:	df02      	svc	2
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14220:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 142e8 <ll_rx_mem_release+0x170>
   14224:	f89a 3000 	ldrb.w	r3, [sl]
   14228:	2b06      	cmp	r3, #6
   1422a:	d82c      	bhi.n	14286 <ll_rx_mem_release+0x10e>
	mem_link_rx.quota_pdu += delta;
   1422c:	3301      	adds	r3, #1
			mem_release(rx_free, &mem_pdu_rx.free);
   1422e:	492f      	ldr	r1, [pc, #188]	; (142ec <ll_rx_mem_release+0x174>)
	mem_link_rx.quota_pdu += delta;
   14230:	f88a 3000 	strb.w	r3, [sl]
			mem_release(rx_free, &mem_pdu_rx.free);
   14234:	4628      	mov	r0, r5
   14236:	f7fc fa89 	bl	1074c <mem_release>
	while (rx) {
   1423a:	2c00      	cmp	r4, #0
   1423c:	d1a5      	bne.n	1418a <ll_rx_mem_release+0x12>
   1423e:	e7c7      	b.n	141d0 <ll_rx_mem_release+0x58>
			conn = ll_conn_get(rx_free->handle);
   14240:	88e8      	ldrh	r0, [r5, #6]
   14242:	f001 fc63 	bl	15b0c <ll_conn_get>
			LL_ASSERT(!conn->lll.link_tx_free);
   14246:	6f83      	ldr	r3, [r0, #120]	; 0x78
			conn = ll_conn_get(rx_free->handle);
   14248:	4605      	mov	r5, r0
			LL_ASSERT(!conn->lll.link_tx_free);
   1424a:	b163      	cbz	r3, 14266 <ll_rx_mem_release+0xee>
   1424c:	4928      	ldr	r1, [pc, #160]	; (142f0 <ll_rx_mem_release+0x178>)
   1424e:	f240 4393 	movw	r3, #1171	; 0x493
   14252:	463a      	mov	r2, r7
   14254:	4630      	mov	r0, r6
   14256:	f00d fc65 	bl	21b24 <printk>
   1425a:	4040      	eors	r0, r0
   1425c:	f380 8811 	msr	BASEPRI, r0
   14260:	f04f 0003 	mov.w	r0, #3
   14264:	df02      	svc	2
			link = memq_deinit(&conn->lll.memq_tx.head,
   14266:	f105 016c 	add.w	r1, r5, #108	; 0x6c
   1426a:	f105 0068 	add.w	r0, r5, #104	; 0x68
   1426e:	f7fc faad 	bl	107cc <memq_deinit>
			LL_ASSERT(link);
   14272:	4682      	mov	sl, r0
   14274:	b1f8      	cbz	r0, 142b6 <ll_rx_mem_release+0x13e>
			conn->lll.link_tx_free = link;
   14276:	f8c5 a078 	str.w	sl, [r5, #120]	; 0x78
			ll_conn_release(conn);
   1427a:	4628      	mov	r0, r5
   1427c:	f001 fc38 	bl	15af0 <ll_conn_release>
	while (rx) {
   14280:	2c00      	cmp	r4, #0
   14282:	d182      	bne.n	1418a <ll_rx_mem_release+0x12>
   14284:	e7a4      	b.n	141d0 <ll_rx_mem_release+0x58>
	LL_ASSERT(delta <= 0 || mem_link_rx.quota_pdu < RX_CNT);
   14286:	491b      	ldr	r1, [pc, #108]	; (142f4 <ll_rx_mem_release+0x17c>)
   14288:	f240 43ac 	movw	r3, #1196	; 0x4ac
   1428c:	463a      	mov	r2, r7
   1428e:	4630      	mov	r0, r6
   14290:	f00d fc48 	bl	21b24 <printk>
   14294:	4040      	eors	r0, r0
   14296:	f380 8811 	msr	BASEPRI, r0
   1429a:	f04f 0003 	mov.w	r0, #3
   1429e:	df02      	svc	2
	mem_link_rx.quota_pdu += delta;
   142a0:	f89a 3000 	ldrb.w	r3, [sl]
   142a4:	e7c2      	b.n	1422c <ll_rx_mem_release+0xb4>
				mem_release(rx_free, &mem_pdu_rx.free);
   142a6:	4911      	ldr	r1, [pc, #68]	; (142ec <ll_rx_mem_release+0x174>)
   142a8:	4628      	mov	r0, r5
   142aa:	f7fc fa4f 	bl	1074c <mem_release>
	while (rx) {
   142ae:	2c00      	cmp	r4, #0
   142b0:	f47f af6b 	bne.w	1418a <ll_rx_mem_release+0x12>
   142b4:	e78c      	b.n	141d0 <ll_rx_mem_release+0x58>
			LL_ASSERT(link);
   142b6:	4910      	ldr	r1, [pc, #64]	; (142f8 <ll_rx_mem_release+0x180>)
   142b8:	f240 4396 	movw	r3, #1174	; 0x496
   142bc:	463a      	mov	r2, r7
   142be:	4630      	mov	r0, r6
   142c0:	f00d fc30 	bl	21b24 <printk>
   142c4:	4040      	eors	r0, r0
   142c6:	f380 8811 	msr	BASEPRI, r0
   142ca:	f04f 0003 	mov.w	r0, #3
   142ce:	df02      	svc	2
   142d0:	e7d1      	b.n	14276 <ll_rx_mem_release+0xfe>
   142d2:	bf00      	nop
   142d4:	00028648 	.word	0x00028648
   142d8:	0002849c 	.word	0x0002849c
   142dc:	00028404 	.word	0x00028404
   142e0:	00028740 	.word	0x00028740
   142e4:	0002874c 	.word	0x0002874c
   142e8:	2000dadc 	.word	0x2000dadc
   142ec:	2000db3c 	.word	0x2000db3c
   142f0:	00028770 	.word	0x00028770
   142f4:	000286c8 	.word	0x000286c8
   142f8:	00028910 	.word	0x00028910

000142fc <ll_rx_link_alloc>:
	return mem_acquire(&mem_link_rx.free);
   142fc:	4801      	ldr	r0, [pc, #4]	; (14304 <ll_rx_link_alloc+0x8>)
   142fe:	f7fc ba0b 	b.w	10718 <mem_acquire>
   14302:	bf00      	nop
   14304:	2000dae0 	.word	0x2000dae0

00014308 <ll_rx_link_release>:
	mem_release(link, &mem_link_rx.free);
   14308:	4901      	ldr	r1, [pc, #4]	; (14310 <ll_rx_link_release+0x8>)
   1430a:	f7fc ba1f 	b.w	1074c <mem_release>
   1430e:	bf00      	nop
   14310:	2000dae0 	.word	0x2000dae0

00014314 <ll_rx_alloc>:
	return mem_acquire(&mem_pdu_rx.free);
   14314:	4801      	ldr	r0, [pc, #4]	; (1431c <ll_rx_alloc+0x8>)
   14316:	f7fc b9ff 	b.w	10718 <mem_acquire>
   1431a:	bf00      	nop
   1431c:	2000db3c 	.word	0x2000db3c

00014320 <ll_rx_release>:
	mem_release(node_rx, &mem_pdu_rx.free);
   14320:	4901      	ldr	r1, [pc, #4]	; (14328 <ll_rx_release+0x8>)
   14322:	f7fc ba13 	b.w	1074c <mem_release>
   14326:	bf00      	nop
   14328:	2000db3c 	.word	0x2000db3c

0001432c <ll_rx_put>:
	rx_hdr->ack_last = mfifo_tx_ack.l;
   1432c:	4b02      	ldr	r3, [pc, #8]	; (14338 <ll_rx_put+0xc>)
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   1432e:	4a03      	ldr	r2, [pc, #12]	; (1433c <ll_rx_put+0x10>)
	rx_hdr->ack_last = mfifo_tx_ack.l;
   14330:	78db      	ldrb	r3, [r3, #3]
   14332:	700b      	strb	r3, [r1, #0]
	memq_enqueue(link, rx, &memq_ll_rx.tail);
   14334:	f7fc ba54 	b.w	107e0 <memq_enqueue>
   14338:	20000500 	.word	0x20000500
   1433c:	2000ddcc 	.word	0x2000ddcc

00014340 <ll_rx_sched>:
	k_sem_give(sem_recv);
   14340:	4b01      	ldr	r3, [pc, #4]	; (14348 <ll_rx_sched+0x8>)
   14342:	6818      	ldr	r0, [r3, #0]
	z_impl_k_sem_give(sem);
   14344:	f00c b88e 	b.w	20464 <z_impl_k_sem_give>
   14348:	2000ddd8 	.word	0x2000ddd8

0001434c <ll_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   1434c:	4b0d      	ldr	r3, [pc, #52]	; (14384 <ll_pdu_rx_alloc_peek+0x38>)
   1434e:	789a      	ldrb	r2, [r3, #2]
   14350:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   14354:	4562      	cmp	r2, ip
   14356:	d809      	bhi.n	1436c <ll_pdu_rx_alloc_peek+0x20>
		return last - first;
   14358:	ebac 0102 	sub.w	r1, ip, r2
   1435c:	b2c9      	uxtb	r1, r1
   1435e:	4288      	cmp	r0, r1
   14360:	d802      	bhi.n	14368 <ll_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   14362:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14364:	7819      	ldrb	r1, [r3, #0]
   14366:	d108      	bne.n	1437a <ll_pdu_rx_alloc_peek+0x2e>
		return NULL;
   14368:	2000      	movs	r0, #0
}
   1436a:	4770      	bx	lr
		return count - first + last;
   1436c:	7859      	ldrb	r1, [r3, #1]
   1436e:	1a89      	subs	r1, r1, r2
   14370:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(ll_pdu_rx_free)) {
   14372:	b2c9      	uxtb	r1, r1
   14374:	4288      	cmp	r0, r1
   14376:	d8f7      	bhi.n	14368 <ll_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(ll_pdu_rx_free);
   14378:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   1437a:	fb02 3301 	mla	r3, r2, r1, r3
   1437e:	6858      	ldr	r0, [r3, #4]
   14380:	4770      	bx	lr
   14382:	bf00      	nop
   14384:	200003b0 	.word	0x200003b0

00014388 <ll_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(ll_pdu_rx_free);
   14388:	4b09      	ldr	r3, [pc, #36]	; (143b0 <ll_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   1438a:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   1438c:	78da      	ldrb	r2, [r3, #3]
   1438e:	7818      	ldrb	r0, [r3, #0]
   14390:	f893 c001 	ldrb.w	ip, [r3, #1]
   14394:	428a      	cmp	r2, r1
   14396:	d009      	beq.n	143ac <ll_pdu_rx_alloc+0x24>
	_first += 1U;
   14398:	1c4a      	adds	r2, r1, #1
   1439a:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   1439c:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   143a0:	4594      	cmp	ip, r2
   143a2:	bf08      	it	eq
   143a4:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   143a6:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   143a8:	709a      	strb	r2, [r3, #2]

	return mem;
   143aa:	4770      	bx	lr
		return NULL;
   143ac:	2000      	movs	r0, #0
}
   143ae:	4770      	bx	lr
   143b0:	200003b0 	.word	0x200003b0

000143b4 <ll_tx_ack_put>:
{
   143b4:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(tx_ack, (void **)&tx);
   143b6:	4a15      	ldr	r2, [pc, #84]	; (1440c <ll_tx_ack_put+0x58>)
   143b8:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   143ba:	f892 e001 	ldrb.w	lr, [r2, #1]
   143be:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   143c2:	1c63      	adds	r3, r4, #1
   143c4:	b2db      	uxtb	r3, r3
		last = 0U;
   143c6:	459e      	cmp	lr, r3
   143c8:	bf08      	it	eq
   143ca:	2300      	moveq	r3, #0
	if (last == first) {
   143cc:	459c      	cmp	ip, r3
   143ce:	d00c      	beq.n	143ea <ll_tx_ack_put+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   143d0:	4696      	mov	lr, r2
   143d2:	f81e cb04 	ldrb.w	ip, [lr], #4
   143d6:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(tx);
   143da:	eb1e 040c 	adds.w	r4, lr, ip
   143de:	d004      	beq.n	143ea <ll_tx_ack_put+0x36>
	tx->handle = handle;
   143e0:	f82e 000c 	strh.w	r0, [lr, ip]
	tx->node = node_tx;
   143e4:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   143e6:	70d3      	strb	r3, [r2, #3]
}
   143e8:	bd10      	pop	{r4, pc}
	LL_ASSERT(tx);
   143ea:	4a09      	ldr	r2, [pc, #36]	; (14410 <ll_tx_ack_put+0x5c>)
   143ec:	4909      	ldr	r1, [pc, #36]	; (14414 <ll_tx_ack_put+0x60>)
   143ee:	480a      	ldr	r0, [pc, #40]	; (14418 <ll_tx_ack_put+0x64>)
   143f0:	f240 43f4 	movw	r3, #1268	; 0x4f4
   143f4:	f00d fb96 	bl	21b24 <printk>
   143f8:	4040      	eors	r0, r0
   143fa:	f380 8811 	msr	BASEPRI, r0
   143fe:	f04f 0003 	mov.w	r0, #3
   14402:	df02      	svc	2
	tx->handle = handle;
   14404:	2300      	movs	r3, #0
   14406:	801b      	strh	r3, [r3, #0]
   14408:	deff      	udf	#255	; 0xff
   1440a:	bf00      	nop
   1440c:	20000500 	.word	0x20000500
   14410:	00028648 	.word	0x00028648
   14414:	00028904 	.word	0x00028904
   14418:	00028404 	.word	0x00028404

0001441c <ll_timeslice_ticker_id_get>:
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   1441c:	2200      	movs	r2, #0
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   1441e:	2304      	movs	r3, #4
	*instance_index = TICKER_INSTANCE_ID_CTLR;
   14420:	7002      	strb	r2, [r0, #0]
	*user_id = (TICKER_NODES - FLASH_TICKER_NODES);
   14422:	700b      	strb	r3, [r1, #0]
}
   14424:	4770      	bx	lr
   14426:	bf00      	nop

00014428 <ll_radio_state_abort>:
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   14428:	2200      	movs	r2, #0
{
   1442a:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL, 0,
   1442c:	4611      	mov	r1, r2
   1442e:	4b0a      	ldr	r3, [pc, #40]	; (14458 <ll_radio_state_abort+0x30>)
   14430:	2001      	movs	r0, #1
   14432:	f7fc fa49 	bl	108c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   14436:	b900      	cbnz	r0, 1443a <ll_radio_state_abort+0x12>
}
   14438:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1443a:	4a08      	ldr	r2, [pc, #32]	; (1445c <ll_radio_state_abort+0x34>)
   1443c:	4908      	ldr	r1, [pc, #32]	; (14460 <ll_radio_state_abort+0x38>)
   1443e:	4809      	ldr	r0, [pc, #36]	; (14464 <ll_radio_state_abort+0x3c>)
   14440:	f240 530c 	movw	r3, #1292	; 0x50c
   14444:	f00d fb6e 	bl	21b24 <printk>
   14448:	4040      	eors	r0, r0
   1444a:	f380 8811 	msr	BASEPRI, r0
   1444e:	f04f 0003 	mov.w	r0, #3
   14452:	df02      	svc	2
}
   14454:	bd08      	pop	{r3, pc}
   14456:	bf00      	nop
   14458:	20000554 	.word	0x20000554
   1445c:	00028648 	.word	0x00028648
   14460:	000286a0 	.word	0x000286a0
   14464:	00028404 	.word	0x00028404

00014468 <ull_ticker_status_take>:
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14468:	f030 0302 	bics.w	r3, r0, #2
{
   1446c:	b510      	push	{r4, lr}
   1446e:	460c      	mov	r4, r1
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   14470:	d002      	beq.n	14478 <ull_ticker_status_take+0x10>
   14472:	680b      	ldr	r3, [r1, #0]
   14474:	2b02      	cmp	r3, #2
   14476:	d008      	beq.n	1448a <ull_ticker_status_take+0x22>
	return z_impl_k_sem_take(sem, timeout);
   14478:	f04f 32ff 	mov.w	r2, #4294967295
   1447c:	f04f 33ff 	mov.w	r3, #4294967295
   14480:	4809      	ldr	r0, [pc, #36]	; (144a8 <ull_ticker_status_take+0x40>)
   14482:	f00c f815 	bl	204b0 <z_impl_k_sem_take>
	return *ret_cb;
   14486:	6820      	ldr	r0, [r4, #0]
}
   14488:	bd10      	pop	{r4, pc}
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1448a:	4a08      	ldr	r2, [pc, #32]	; (144ac <ull_ticker_status_take+0x44>)
   1448c:	4908      	ldr	r1, [pc, #32]	; (144b0 <ull_ticker_status_take+0x48>)
   1448e:	4809      	ldr	r0, [pc, #36]	; (144b4 <ull_ticker_status_take+0x4c>)
   14490:	f44f 63a5 	mov.w	r3, #1320	; 0x528
   14494:	f00d fb46 	bl	21b24 <printk>
   14498:	4040      	eors	r0, r0
   1449a:	f380 8811 	msr	BASEPRI, r0
   1449e:	f04f 0003 	mov.w	r0, #3
   144a2:	df02      	svc	2
   144a4:	e7e8      	b.n	14478 <ull_ticker_status_take+0x10>
   144a6:	bf00      	nop
   144a8:	2000dddc 	.word	0x2000dddc
   144ac:	00028648 	.word	0x00028648
   144b0:	00028788 	.word	0x00028788
   144b4:	00028404 	.word	0x00028404

000144b8 <ull_disable_mark>:
	if (!*m) {
   144b8:	4a03      	ldr	r2, [pc, #12]	; (144c8 <ull_disable_mark+0x10>)
{
   144ba:	4603      	mov	r3, r0
	if (!*m) {
   144bc:	6810      	ldr	r0, [r2, #0]
   144be:	b100      	cbz	r0, 144c2 <ull_disable_mark+0xa>
}
   144c0:	4770      	bx	lr
		*m = param;
   144c2:	6013      	str	r3, [r2, #0]
   144c4:	4618      	mov	r0, r3
}
   144c6:	4770      	bx	lr
   144c8:	2000da18 	.word	0x2000da18

000144cc <ull_disable_unmark>:
	if (*m && *m == param) {
   144cc:	4a04      	ldr	r2, [pc, #16]	; (144e0 <ull_disable_unmark+0x14>)
   144ce:	6813      	ldr	r3, [r2, #0]
   144d0:	b123      	cbz	r3, 144dc <ull_disable_unmark+0x10>
   144d2:	4298      	cmp	r0, r3
		*m = NULL;
   144d4:	bf06      	itte	eq
   144d6:	2100      	moveq	r1, #0
   144d8:	6011      	streq	r1, [r2, #0]
	return NULL;
   144da:	2300      	movne	r3, #0
}
   144dc:	4618      	mov	r0, r3
   144de:	4770      	bx	lr
   144e0:	2000da18 	.word	0x2000da18

000144e4 <ull_disable_mark_get>:
	return mark_get(mark_disable);
   144e4:	4b01      	ldr	r3, [pc, #4]	; (144ec <ull_disable_mark_get+0x8>)
}
   144e6:	6818      	ldr	r0, [r3, #0]
   144e8:	4770      	bx	lr
   144ea:	bf00      	nop
   144ec:	2000da18 	.word	0x2000da18

000144f0 <ull_update_mark>:
	if (!*m) {
   144f0:	4a03      	ldr	r2, [pc, #12]	; (14500 <ull_update_mark+0x10>)
{
   144f2:	4603      	mov	r3, r0
	if (!*m) {
   144f4:	6810      	ldr	r0, [r2, #0]
   144f6:	b100      	cbz	r0, 144fa <ull_update_mark+0xa>
}
   144f8:	4770      	bx	lr
		*m = param;
   144fa:	6013      	str	r3, [r2, #0]
   144fc:	4618      	mov	r0, r3
}
   144fe:	4770      	bx	lr
   14500:	2000da1c 	.word	0x2000da1c

00014504 <ull_update_unmark>:
	if (*m && *m == param) {
   14504:	4a04      	ldr	r2, [pc, #16]	; (14518 <ull_update_unmark+0x14>)
   14506:	6813      	ldr	r3, [r2, #0]
   14508:	b123      	cbz	r3, 14514 <ull_update_unmark+0x10>
   1450a:	4298      	cmp	r0, r3
		*m = NULL;
   1450c:	bf06      	itte	eq
   1450e:	2100      	moveq	r1, #0
   14510:	6011      	streq	r1, [r2, #0]
	return NULL;
   14512:	2300      	movne	r3, #0
}
   14514:	4618      	mov	r0, r3
   14516:	4770      	bx	lr
   14518:	2000da1c 	.word	0x2000da1c

0001451c <ull_update_mark_get>:
	return mark_get(mark_update);
   1451c:	4b01      	ldr	r3, [pc, #4]	; (14524 <ull_update_mark_get+0x8>)
}
   1451e:	6818      	ldr	r0, [r3, #0]
   14520:	4770      	bx	lr
   14522:	bf00      	nop
   14524:	2000da1c 	.word	0x2000da1c

00014528 <ull_disable>:
{
   14528:	b530      	push	{r4, r5, lr}
	hdr = HDR_ULL(((struct lll_hdr *)lll)->parent);
   1452a:	6805      	ldr	r5, [r0, #0]
	if (!hdr) {
   1452c:	f115 0f10 	cmn.w	r5, #16
{
   14530:	b087      	sub	sp, #28
	if (!hdr) {
   14532:	d00b      	beq.n	1454c <ull_disable+0x24>
	compiler_barrier();
   14534:	4604      	mov	r4, r0
	return z_impl_k_sem_init(sem, initial_count, limit);
   14536:	2201      	movs	r2, #1
   14538:	2100      	movs	r1, #0
   1453a:	4668      	mov	r0, sp
   1453c:	f012 fdc1 	bl	270c2 <z_impl_k_sem_init>
   14540:	7c2b      	ldrb	r3, [r5, #16]
	hdr->disabled_cb = disabled_cb;
   14542:	4a13      	ldr	r2, [pc, #76]	; (14590 <ull_disable+0x68>)
	hdr->disabled_param = &sem;
   14544:	f8c5 d018 	str.w	sp, [r5, #24]
	hdr->disabled_cb = disabled_cb;
   14548:	616a      	str	r2, [r5, #20]
	if (!ull_ref_get(hdr)) {
   1454a:	b913      	cbnz	r3, 14552 <ull_disable+0x2a>
		return ULL_STATUS_SUCCESS;
   1454c:	2000      	movs	r0, #0
}
   1454e:	b007      	add	sp, #28
   14550:	bd30      	pop	{r4, r5, pc}
	mfy.param = lll;
   14552:	4b10      	ldr	r3, [pc, #64]	; (14594 <ull_disable+0x6c>)
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   14554:	2200      	movs	r2, #0
   14556:	4611      	mov	r1, r2
   14558:	2003      	movs	r0, #3
	mfy.param = lll;
   1455a:	609c      	str	r4, [r3, #8]
	ret = mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_LLL, 0,
   1455c:	f7fc f9b4 	bl	108c8 <mayfly_enqueue>
	LL_ASSERT(!ret);
   14560:	b940      	cbnz	r0, 14574 <ull_disable+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   14562:	f04f 32ff 	mov.w	r2, #4294967295
   14566:	f04f 33ff 	mov.w	r3, #4294967295
   1456a:	4668      	mov	r0, sp
   1456c:	f00b ffa0 	bl	204b0 <z_impl_k_sem_take>
}
   14570:	b007      	add	sp, #28
   14572:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14574:	4a08      	ldr	r2, [pc, #32]	; (14598 <ull_disable+0x70>)
   14576:	4909      	ldr	r1, [pc, #36]	; (1459c <ull_disable+0x74>)
   14578:	4809      	ldr	r0, [pc, #36]	; (145a0 <ull_disable+0x78>)
   1457a:	f240 539a 	movw	r3, #1434	; 0x59a
   1457e:	f00d fad1 	bl	21b24 <printk>
   14582:	4040      	eors	r0, r0
   14584:	f380 8811 	msr	BASEPRI, r0
   14588:	f04f 0003 	mov.w	r0, #3
   1458c:	df02      	svc	2
   1458e:	e7e8      	b.n	14562 <ull_disable+0x3a>
   14590:	000135c5 	.word	0x000135c5
   14594:	20000544 	.word	0x20000544
   14598:	00028648 	.word	0x00028648
   1459c:	000286a0 	.word	0x000286a0
   145a0:	00028404 	.word	0x00028404

000145a4 <ull_ticker_stop_with_mark>:
{
   145a4:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (!*m) {
   145a6:	4d1d      	ldr	r5, [pc, #116]	; (1461c <ull_ticker_stop_with_mark+0x78>)
   145a8:	682b      	ldr	r3, [r5, #0]
{
   145aa:	b085      	sub	sp, #20
   145ac:	460c      	mov	r4, r1
   145ae:	4616      	mov	r6, r2
	if (!*m) {
   145b0:	b323      	cbz	r3, 145fc <ull_ticker_stop_with_mark+0x58>
	if (mark != param) {
   145b2:	4299      	cmp	r1, r3
   145b4:	d112      	bne.n	145dc <ull_ticker_stop_with_mark+0x38>
	ret_cb = TICKER_STATUS_BUSY;
   145b6:	2302      	movs	r3, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   145b8:	af03      	add	r7, sp, #12
   145ba:	4602      	mov	r2, r0
	ret_cb = TICKER_STATUS_BUSY;
   145bc:	9303      	str	r3, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   145be:	2103      	movs	r1, #3
   145c0:	4b17      	ldr	r3, [pc, #92]	; (14620 <ull_ticker_stop_with_mark+0x7c>)
   145c2:	9700      	str	r7, [sp, #0]
   145c4:	2000      	movs	r0, #0
   145c6:	f7fd fb79 	bl	11cbc <ticker_stop>
	ret = ull_ticker_status_take(ret, &ret_cb);
   145ca:	4639      	mov	r1, r7
   145cc:	f7ff ff4c 	bl	14468 <ull_ticker_status_take>
	if (ret) {
   145d0:	b140      	cbz	r0, 145e4 <ull_ticker_stop_with_mark+0x40>
	if (*m && *m == param) {
   145d2:	682b      	ldr	r3, [r5, #0]
   145d4:	b10b      	cbz	r3, 145da <ull_ticker_stop_with_mark+0x36>
   145d6:	429c      	cmp	r4, r3
   145d8:	d012      	beq.n	14600 <ull_ticker_stop_with_mark+0x5c>
		if (mark != param) {
   145da:	b1cc      	cbz	r4, 14610 <ull_ticker_stop_with_mark+0x6c>
			return -ENOLCK;
   145dc:	f06f 0021 	mvn.w	r0, #33	; 0x21
}
   145e0:	b005      	add	sp, #20
   145e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = ull_disable(lll_disable);
   145e4:	4630      	mov	r0, r6
   145e6:	f7ff ff9f 	bl	14528 <ull_disable>
	if (ret) {
   145ea:	b9a0      	cbnz	r0, 14616 <ull_ticker_stop_with_mark+0x72>
	if (*m && *m == param) {
   145ec:	682b      	ldr	r3, [r5, #0]
   145ee:	b10b      	cbz	r3, 145f4 <ull_ticker_stop_with_mark+0x50>
   145f0:	429c      	cmp	r4, r3
   145f2:	d00b      	beq.n	1460c <ull_ticker_stop_with_mark+0x68>
	if (mark != param) {
   145f4:	2c00      	cmp	r4, #0
   145f6:	d1f1      	bne.n	145dc <ull_ticker_stop_with_mark+0x38>
}
   145f8:	b005      	add	sp, #20
   145fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = param;
   145fc:	6029      	str	r1, [r5, #0]
	if (mark != param) {
   145fe:	e7da      	b.n	145b6 <ull_ticker_stop_with_mark+0x12>
		*m = NULL;
   14600:	2300      	movs	r3, #0
		return -EALREADY;
   14602:	f06f 0044 	mvn.w	r0, #68	; 0x44
		*m = NULL;
   14606:	602b      	str	r3, [r5, #0]
}
   14608:	b005      	add	sp, #20
   1460a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*m = NULL;
   1460c:	6028      	str	r0, [r5, #0]
	if (mark != param) {
   1460e:	e7e7      	b.n	145e0 <ull_ticker_stop_with_mark+0x3c>
		return -EALREADY;
   14610:	f06f 0044 	mvn.w	r0, #68	; 0x44
   14614:	e7e4      	b.n	145e0 <ull_ticker_stop_with_mark+0x3c>
		return -EBUSY;
   14616:	f06f 000f 	mvn.w	r0, #15
   1461a:	e7e1      	b.n	145e0 <ull_ticker_stop_with_mark+0x3c>
   1461c:	2000da18 	.word	0x2000da18
   14620:	000135b9 	.word	0x000135b9

00014624 <ull_pdu_rx_alloc_peek>:
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   14624:	4b0d      	ldr	r3, [pc, #52]	; (1465c <ull_pdu_rx_alloc_peek+0x38>)
   14626:	789a      	ldrb	r2, [r3, #2]
   14628:	f893 c003 	ldrb.w	ip, [r3, #3]
	if (last >= first) {
   1462c:	4562      	cmp	r2, ip
   1462e:	d809      	bhi.n	14644 <ull_pdu_rx_alloc_peek+0x20>
		return last - first;
   14630:	ebac 0102 	sub.w	r1, ip, r2
   14634:	b2c9      	uxtb	r1, r1
   14636:	4288      	cmp	r0, r1
   14638:	d802      	bhi.n	14640 <ull_pdu_rx_alloc_peek+0x1c>
	if (first == last) {
   1463a:	4562      	cmp	r2, ip
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   1463c:	7819      	ldrb	r1, [r3, #0]
   1463e:	d108      	bne.n	14652 <ull_pdu_rx_alloc_peek+0x2e>
		return NULL;
   14640:	2000      	movs	r0, #0
}
   14642:	4770      	bx	lr
		return count - first + last;
   14644:	7859      	ldrb	r1, [r3, #1]
   14646:	1a89      	subs	r1, r1, r2
   14648:	4461      	add	r1, ip
	if (count > MFIFO_AVAIL_COUNT_GET(pdu_rx_free)) {
   1464a:	b2c9      	uxtb	r1, r1
   1464c:	4288      	cmp	r0, r1
   1464e:	d8f7      	bhi.n	14640 <ull_pdu_rx_alloc_peek+0x1c>
	return MFIFO_DEQUEUE_PEEK(pdu_rx_free);
   14650:	7819      	ldrb	r1, [r3, #0]
	return *((void **)(fifo + first * size));
   14652:	fb02 3301 	mla	r3, r2, r1, r3
   14656:	6858      	ldr	r0, [r3, #4]
   14658:	4770      	bx	lr
   1465a:	bf00      	nop
   1465c:	200003c4 	.word	0x200003c4

00014660 <ull_pdu_rx_alloc>:
	return MFIFO_DEQUEUE(pdu_rx_free);
   14660:	4b09      	ldr	r3, [pc, #36]	; (14688 <ull_pdu_rx_alloc+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   14662:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   14664:	78da      	ldrb	r2, [r3, #3]
   14666:	7818      	ldrb	r0, [r3, #0]
   14668:	f893 c001 	ldrb.w	ip, [r3, #1]
   1466c:	428a      	cmp	r2, r1
   1466e:	d009      	beq.n	14684 <ull_pdu_rx_alloc+0x24>
	_first += 1U;
   14670:	1c4a      	adds	r2, r1, #1
   14672:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   14674:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   14678:	4594      	cmp	ip, r2
   1467a:	bf08      	it	eq
   1467c:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   1467e:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   14680:	709a      	strb	r2, [r3, #2]
	return mem;
   14682:	4770      	bx	lr
		return NULL;
   14684:	2000      	movs	r0, #0
}
   14686:	4770      	bx	lr
   14688:	200003c4 	.word	0x200003c4

0001468c <ull_rx_put>:
{
   1468c:	b538      	push	{r3, r4, r5, lr}
   1468e:	460c      	mov	r4, r1
   14690:	4605      	mov	r5, r0
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14692:	f004 fe31 	bl	192f8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   14696:	4621      	mov	r1, r4
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   14698:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   1469a:	4a03      	ldr	r2, [pc, #12]	; (146a8 <ull_rx_put+0x1c>)
   1469c:	4628      	mov	r0, r5
}
   1469e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   146a2:	f7fc b89d 	b.w	107e0 <memq_enqueue>
   146a6:	bf00      	nop
   146a8:	2000ddd4 	.word	0x2000ddd4

000146ac <ull_rx_sched>:
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   146ac:	2201      	movs	r2, #1
   146ae:	4b02      	ldr	r3, [pc, #8]	; (146b8 <ull_rx_sched+0xc>)
   146b0:	4611      	mov	r1, r2
   146b2:	2000      	movs	r0, #0
   146b4:	f7fc b908 	b.w	108c8 <mayfly_enqueue>
   146b8:	20000534 	.word	0x20000534

000146bc <ull_prepare_enqueue>:
{
   146bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   146c0:	4e18      	ldr	r6, [pc, #96]	; (14724 <ull_prepare_enqueue+0x68>)
{
   146c2:	f89d a024 	ldrb.w	sl, [sp, #36]	; 0x24
   146c6:	4699      	mov	r9, r3
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   146c8:	78f3      	ldrb	r3, [r6, #3]
{
   146ca:	4680      	mov	r8, r0
	last = last + 1;
   146cc:	1c5d      	adds	r5, r3, #1
	if (last == count) {
   146ce:	7870      	ldrb	r0, [r6, #1]
	last = last + 1;
   146d0:	b2ed      	uxtb	r5, r5
		last = 0U;
   146d2:	42a8      	cmp	r0, r5
   146d4:	bf08      	it	eq
   146d6:	2500      	moveq	r5, #0
	idx = MFIFO_ENQUEUE_GET(prep, (void **)&e);
   146d8:	78b0      	ldrb	r0, [r6, #2]
	if (last == first) {
   146da:	42a8      	cmp	r0, r5
   146dc:	d01e      	beq.n	1471c <ull_prepare_enqueue+0x60>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   146de:	4634      	mov	r4, r6
   146e0:	460f      	mov	r7, r1
   146e2:	4611      	mov	r1, r2
   146e4:	f814 2b04 	ldrb.w	r2, [r4], #4
   146e8:	fb02 4403 	mla	r4, r2, r3, r4
	if (!e) {
   146ec:	b1b4      	cbz	r4, 1471c <ull_prepare_enqueue+0x60>
	memcpy(&e->prepare_param, prepare_param, sizeof(e->prepare_param));
   146ee:	2210      	movs	r2, #16
   146f0:	4620      	mov	r0, r4
   146f2:	f00f feb9 	bl	24468 <memcpy>
	e->is_resume = is_resume;
   146f6:	f894 3020 	ldrb.w	r3, [r4, #32]
	e->prio = prio;
   146fa:	9a08      	ldr	r2, [sp, #32]
	e->abort_cb = abort_cb;
   146fc:	61a7      	str	r7, [r4, #24]
	e->is_resume = is_resume;
   146fe:	f00a 0a01 	and.w	sl, sl, #1
   14702:	f023 0303 	bic.w	r3, r3, #3
   14706:	ea43 030a 	orr.w	r3, r3, sl
	e->is_abort_cb = is_abort_cb;
   1470a:	e9c4 9804 	strd	r9, r8, [r4, #16]
	e->prio = prio;
   1470e:	61e2      	str	r2, [r4, #28]
	e->is_resume = is_resume;
   14710:	f884 3020 	strb.w	r3, [r4, #32]
	return 0;
   14714:	2000      	movs	r0, #0
	*last = idx; /* Commit: Update write index */
   14716:	70f5      	strb	r5, [r6, #3]
}
   14718:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
   1471c:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   14720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   14724:	200003dc 	.word	0x200003dc

00014728 <ull_prepare_dequeue_get>:
	return MFIFO_DEQUEUE_GET(prep);
   14728:	4b05      	ldr	r3, [pc, #20]	; (14740 <ull_prepare_dequeue_get+0x18>)
   1472a:	7898      	ldrb	r0, [r3, #2]
	if (first == last) {
   1472c:	78da      	ldrb	r2, [r3, #3]
   1472e:	7819      	ldrb	r1, [r3, #0]
   14730:	4282      	cmp	r2, r0
	return (void *)(fifo + first * size);
   14732:	bf1a      	itte	ne
   14734:	3304      	addne	r3, #4
   14736:	fb00 3001 	mlane	r0, r0, r1, r3
		return NULL;
   1473a:	2000      	moveq	r0, #0
}
   1473c:	4770      	bx	lr
   1473e:	bf00      	nop
   14740:	200003dc 	.word	0x200003dc

00014744 <ull_prepare_dequeue_iter>:
{
   14744:	b500      	push	{lr}
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14746:	4b0d      	ldr	r3, [pc, #52]	; (1477c <ull_prepare_dequeue_iter+0x38>)
	if (*idx >= count) {
   14748:	7802      	ldrb	r2, [r0, #0]
   1474a:	7859      	ldrb	r1, [r3, #1]
   1474c:	f893 c003 	ldrb.w	ip, [r3, #3]
   14750:	f893 e000 	ldrb.w	lr, [r3]
   14754:	4291      	cmp	r1, r2
   14756:	bf9c      	itt	ls
   14758:	789a      	ldrbls	r2, [r3, #2]
		*idx = first;
   1475a:	7002      	strbls	r2, [r0, #0]
	if (*idx == last) {
   1475c:	4594      	cmp	ip, r2
   1475e:	d00a      	beq.n	14776 <ull_prepare_dequeue_iter+0x32>
	i = *idx + 1;
   14760:	1c53      	adds	r3, r2, #1
   14762:	b2db      	uxtb	r3, r3
		i = 0U;
   14764:	4299      	cmp	r1, r3
   14766:	bf08      	it	eq
   14768:	2300      	moveq	r3, #0
	p = (void *)(fifo + (*idx) * size);
   1476a:	4905      	ldr	r1, [pc, #20]	; (14780 <ull_prepare_dequeue_iter+0x3c>)
	*idx = i;
   1476c:	7003      	strb	r3, [r0, #0]
	p = (void *)(fifo + (*idx) * size);
   1476e:	fb02 100e 	mla	r0, r2, lr, r1
}
   14772:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   14776:	2000      	movs	r0, #0
	return MFIFO_DEQUEUE_ITER_GET(prep, idx);
   14778:	e7fb      	b.n	14772 <ull_prepare_dequeue_iter+0x2e>
   1477a:	bf00      	nop
   1477c:	200003dc 	.word	0x200003dc
   14780:	200003e0 	.word	0x200003e0

00014784 <ull_event_done_extra_get>:
	evdone = MFIFO_DEQUEUE_PEEK(done);
   14784:	4b06      	ldr	r3, [pc, #24]	; (147a0 <ull_event_done_extra_get+0x1c>)
   14786:	789a      	ldrb	r2, [r3, #2]
	if (first == last) {
   14788:	78d9      	ldrb	r1, [r3, #3]
   1478a:	7818      	ldrb	r0, [r3, #0]
   1478c:	4291      	cmp	r1, r2
   1478e:	d005      	beq.n	1479c <ull_event_done_extra_get+0x18>
	return *((void **)(fifo + first * size));
   14790:	fb02 3300 	mla	r3, r2, r0, r3
   14794:	6858      	ldr	r0, [r3, #4]
	if (!evdone) {
   14796:	b110      	cbz	r0, 1479e <ull_event_done_extra_get+0x1a>
	return &evdone->extra;
   14798:	3020      	adds	r0, #32
   1479a:	4770      	bx	lr
		return NULL;
   1479c:	2000      	movs	r0, #0
}
   1479e:	4770      	bx	lr
   147a0:	2000039c 	.word	0x2000039c

000147a4 <ull_event_done>:
{
   147a4:	b570      	push	{r4, r5, r6, lr}
	evdone = MFIFO_DEQUEUE(done);
   147a6:	4a14      	ldr	r2, [pc, #80]	; (147f8 <ull_event_done+0x54>)
	uint8_t _first = *first; /* Copy read-index */
   147a8:	7893      	ldrb	r3, [r2, #2]
	if (_first == last) {
   147aa:	78d4      	ldrb	r4, [r2, #3]
   147ac:	7811      	ldrb	r1, [r2, #0]
   147ae:	7855      	ldrb	r5, [r2, #1]
   147b0:	429c      	cmp	r4, r3
   147b2:	d01f      	beq.n	147f4 <ull_event_done+0x50>
	mem = *((void **)(fifo + _first * size));
   147b4:	fb03 2101 	mla	r1, r3, r1, r2
	_first += 1U;
   147b8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   147ba:	684c      	ldr	r4, [r1, #4]
	_first += 1U;
   147bc:	b2db      	uxtb	r3, r3
		_first = 0U;
   147be:	429d      	cmp	r5, r3
   147c0:	bf08      	it	eq
   147c2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   147c4:	7093      	strb	r3, [r2, #2]
	if (!evdone) {
   147c6:	b19c      	cbz	r4, 147f0 <ull_event_done+0x4c>
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   147c8:	2302      	movs	r3, #2
	evdone->hdr.link = NULL;
   147ca:	2500      	movs	r5, #0
	link = evdone->hdr.link;
   147cc:	6826      	ldr	r6, [r4, #0]
	evdone->hdr.type = NODE_RX_TYPE_EVENT_DONE;
   147ce:	7123      	strb	r3, [r4, #4]
	evdone->hdr.link = NULL;
   147d0:	6025      	str	r5, [r4, #0]
	evdone->param = param;
   147d2:	61e0      	str	r0, [r4, #28]
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   147d4:	f004 fd90 	bl	192f8 <ull_conn_ack_last_idx_get>
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   147d8:	4a08      	ldr	r2, [pc, #32]	; (147fc <ull_event_done+0x58>)
	rx_hdr->ack_last = ull_conn_ack_last_idx_get();
   147da:	7020      	strb	r0, [r4, #0]
	memq_enqueue(link, rx, &memq_ull_rx.tail);
   147dc:	4621      	mov	r1, r4
   147de:	4630      	mov	r0, r6
   147e0:	f7fb fffe 	bl	107e0 <memq_enqueue>
	mayfly_enqueue(TICKER_USER_ID_LLL, TICKER_USER_ID_ULL_HIGH, 1, &mfy);
   147e4:	2201      	movs	r2, #1
   147e6:	4b06      	ldr	r3, [pc, #24]	; (14800 <ull_event_done+0x5c>)
   147e8:	4611      	mov	r1, r2
   147ea:	4628      	mov	r0, r5
   147ec:	f7fc f86c 	bl	108c8 <mayfly_enqueue>
}
   147f0:	4620      	mov	r0, r4
   147f2:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   147f4:	2400      	movs	r4, #0
   147f6:	e7fb      	b.n	147f0 <ull_event_done+0x4c>
   147f8:	2000039c 	.word	0x2000039c
   147fc:	2000ddd4 	.word	0x2000ddd4
   14800:	20000534 	.word	0x20000534

00014804 <ticker_stop_cb>:
}

#if defined(CONFIG_BT_PERIPHERAL)
static void ticker_stop_cb(uint32_t ticks_at_expire, uint32_t remainder,
			   uint16_t lazy, void *param)
{
   14804:	b530      	push	{r4, r5, lr}
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14806:	491a      	ldr	r1, [pc, #104]	; (14870 <ticker_stop_cb+0x6c>)
   14808:	4a1a      	ldr	r2, [pc, #104]	; (14874 <ticker_stop_cb+0x70>)
   1480a:	1a59      	subs	r1, r3, r1
{
   1480c:	461c      	mov	r4, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   1480e:	fba2 3101 	umull	r3, r1, r2, r1
	struct ll_adv_set *adv = param;
	uint8_t handle;
	uint32_t ret;

	handle = ull_adv_handle_get(adv);
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   14812:	f411 5f7f 	tst.w	r1, #16320	; 0x3fc0
{
   14816:	b083      	sub	sp, #12
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14818:	ea4f 1591 	mov.w	r5, r1, lsr #6
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   1481c:	d119      	bne.n	14852 <ticker_stop_cb+0x4e>

	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
			  TICKER_ID_ADV_BASE + handle,
   1481e:	1caa      	adds	r2, r5, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_ULL_HIGH,
   14820:	4b15      	ldr	r3, [pc, #84]	; (14878 <ticker_stop_cb+0x74>)
   14822:	9400      	str	r4, [sp, #0]
   14824:	b2d2      	uxtb	r2, r2
   14826:	2101      	movs	r1, #1
   14828:	2000      	movs	r0, #0
   1482a:	f7fd fa47 	bl	11cbc <ticker_stop>
			  ticker_op_stop_cb, adv);
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1482e:	f030 0302 	bics.w	r3, r0, #2
   14832:	d00c      	beq.n	1484e <ticker_stop_cb+0x4a>
   14834:	4a11      	ldr	r2, [pc, #68]	; (1487c <ticker_stop_cb+0x78>)
   14836:	4912      	ldr	r1, [pc, #72]	; (14880 <ticker_stop_cb+0x7c>)
   14838:	4812      	ldr	r0, [pc, #72]	; (14884 <ticker_stop_cb+0x80>)
   1483a:	f240 63de 	movw	r3, #1758	; 0x6de
   1483e:	f00d f971 	bl	21b24 <printk>
   14842:	4040      	eors	r0, r0
   14844:	f380 8811 	msr	BASEPRI, r0
   14848:	f04f 0003 	mov.w	r0, #3
   1484c:	df02      	svc	2
		  (ret == TICKER_STATUS_BUSY));
}
   1484e:	b003      	add	sp, #12
   14850:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(handle < BT_CTLR_ADV_SET);
   14852:	4a0a      	ldr	r2, [pc, #40]	; (1487c <ticker_stop_cb+0x78>)
   14854:	490c      	ldr	r1, [pc, #48]	; (14888 <ticker_stop_cb+0x84>)
   14856:	480b      	ldr	r0, [pc, #44]	; (14884 <ticker_stop_cb+0x80>)
   14858:	f240 63d9 	movw	r3, #1753	; 0x6d9
   1485c:	f00d f962 	bl	21b24 <printk>
   14860:	4040      	eors	r0, r0
   14862:	f380 8811 	msr	BASEPRI, r0
   14866:	f04f 0003 	mov.w	r0, #3
   1486a:	df02      	svc	2
   1486c:	e7d7      	b.n	1481e <ticker_stop_cb+0x1a>
   1486e:	bf00      	nop
   14870:	2000e1b4 	.word	0x2000e1b4
   14874:	ba2e8ba3 	.word	0xba2e8ba3
   14878:	00014a4d 	.word	0x00014a4d
   1487c:	000287b4 	.word	0x000287b4
   14880:	00028800 	.word	0x00028800
   14884:	00028404 	.word	0x00028404
   14888:	000287f4 	.word	0x000287f4

0001488c <disabled_cb>:
		LL_ASSERT(!ret);
	}
}

static void disabled_cb(void *param)
{
   1488c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct ll_adv_set *adv;
	struct node_rx_pdu *rx;
	struct node_rx_cc *cc;
	memq_link_t *link;

	adv = ((struct lll_hdr *)param)->parent;
   1488e:	6805      	ldr	r5, [r0, #0]

	LL_ASSERT(adv->link_cc_free);
   14890:	6c6f      	ldr	r7, [r5, #68]	; 0x44
{
   14892:	4606      	mov	r6, r0
	LL_ASSERT(adv->link_cc_free);
   14894:	b1d7      	cbz	r7, 148cc <disabled_cb+0x40>
	link = adv->link_cc_free;
	adv->link_cc_free = NULL;

	LL_ASSERT(adv->node_rx_cc_free);
   14896:	6cac      	ldr	r4, [r5, #72]	; 0x48
	adv->link_cc_free = NULL;
   14898:	2300      	movs	r3, #0
   1489a:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   1489c:	b34c      	cbz	r4, 148f2 <disabled_cb+0x66>
	rx = adv->node_rx_cc_free;
	adv->node_rx_cc_free = NULL;
   1489e:	2100      	movs	r1, #0

	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   148a0:	2313      	movs	r3, #19
	adv->node_rx_cc_free = NULL;
   148a2:	64a9      	str	r1, [r5, #72]	; 0x48
	rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   148a4:	7123      	strb	r3, [r4, #4]
	rx->hdr.handle = 0xffff;
   148a6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   148aa:	80e3      	strh	r3, [r4, #6]

	cc = (void *)rx->pdu;
	memset(cc, 0x00, sizeof(struct node_rx_cc));
   148ac:	221e      	movs	r2, #30
   148ae:	f104 001c 	add.w	r0, r4, #28
   148b2:	f00f fe04 	bl	244be <memset>
	cc->status = BT_HCI_ERR_ADV_TIMEOUT;
   148b6:	233c      	movs	r3, #60	; 0x3c
   148b8:	7723      	strb	r3, [r4, #28]

	rx->hdr.rx_ftr.param = param;
   148ba:	60a6      	str	r6, [r4, #8]

		link = rx->hdr.link;
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	ll_rx_put(link, rx);
   148bc:	4621      	mov	r1, r4
   148be:	4638      	mov	r0, r7
   148c0:	f7ff fd34 	bl	1432c <ll_rx_put>
	ll_rx_sched();
}
   148c4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ll_rx_sched();
   148c8:	f7ff bd3a 	b.w	14340 <ll_rx_sched>
	LL_ASSERT(adv->link_cc_free);
   148cc:	4a10      	ldr	r2, [pc, #64]	; (14910 <disabled_cb+0x84>)
   148ce:	4911      	ldr	r1, [pc, #68]	; (14914 <disabled_cb+0x88>)
   148d0:	4811      	ldr	r0, [pc, #68]	; (14918 <disabled_cb+0x8c>)
   148d2:	f240 7315 	movw	r3, #1813	; 0x715
   148d6:	f00d f925 	bl	21b24 <printk>
   148da:	4040      	eors	r0, r0
   148dc:	f380 8811 	msr	BASEPRI, r0
   148e0:	f04f 0003 	mov.w	r0, #3
   148e4:	df02      	svc	2
	LL_ASSERT(adv->node_rx_cc_free);
   148e6:	6cac      	ldr	r4, [r5, #72]	; 0x48
	link = adv->link_cc_free;
   148e8:	6c6f      	ldr	r7, [r5, #68]	; 0x44
	adv->link_cc_free = NULL;
   148ea:	2300      	movs	r3, #0
   148ec:	646b      	str	r3, [r5, #68]	; 0x44
	LL_ASSERT(adv->node_rx_cc_free);
   148ee:	2c00      	cmp	r4, #0
   148f0:	d1d5      	bne.n	1489e <disabled_cb+0x12>
   148f2:	4a07      	ldr	r2, [pc, #28]	; (14910 <disabled_cb+0x84>)
   148f4:	4909      	ldr	r1, [pc, #36]	; (1491c <disabled_cb+0x90>)
   148f6:	4808      	ldr	r0, [pc, #32]	; (14918 <disabled_cb+0x8c>)
   148f8:	f240 7319 	movw	r3, #1817	; 0x719
   148fc:	f00d f912 	bl	21b24 <printk>
   14900:	4040      	eors	r0, r0
   14902:	f380 8811 	msr	BASEPRI, r0
   14906:	f04f 0003 	mov.w	r0, #3
   1490a:	df02      	svc	2
	rx = adv->node_rx_cc_free;
   1490c:	6cac      	ldr	r4, [r5, #72]	; 0x48
   1490e:	e7c6      	b.n	1489e <disabled_cb+0x12>
   14910:	000287b4 	.word	0x000287b4
   14914:	0002881c 	.word	0x0002881c
   14918:	00028404 	.word	0x00028404
   1491c:	00028830 	.word	0x00028830

00014920 <ticker_cb>:
{
   14920:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   14924:	4615      	mov	r5, r2
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   14926:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1492a:	4295      	cmp	r5, r2
{
   1492c:	b08a      	sub	sp, #40	; 0x28
   1492e:	461c      	mov	r4, r3
	if (IS_ENABLED(CONFIG_BT_TICKER_COMPATIBILITY_MODE) ||
   14930:	d017      	beq.n	14962 <ticker_cb+0x42>
	return ++hdr->ref;
   14932:	7c1b      	ldrb	r3, [r3, #16]
   14934:	3301      	adds	r3, #1
   14936:	b2db      	uxtb	r3, r3
   14938:	4680      	mov	r8, r0
   1493a:	460f      	mov	r7, r1
   1493c:	7423      	strb	r3, [r4, #16]
		LL_ASSERT(ref);
   1493e:	2b00      	cmp	r3, #0
   14940:	d060      	beq.n	14a04 <ticker_cb+0xe4>
		p.ticks_at_expire = ticks_at_expire;
   14942:	4e37      	ldr	r6, [pc, #220]	; (14a20 <ticker_cb+0x100>)
		mfy.param = &p;
   14944:	4b37      	ldr	r3, [pc, #220]	; (14a24 <ticker_cb+0x104>)
		p.ticks_at_expire = ticks_at_expire;
   14946:	f8c6 8000 	str.w	r8, [r6]
	lll = &adv->lll;
   1494a:	f104 021c 	add.w	r2, r4, #28
		p.param = lll;
   1494e:	60f2      	str	r2, [r6, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   14950:	2200      	movs	r2, #0
   14952:	4611      	mov	r1, r2
   14954:	2001      	movs	r0, #1
		p.remainder = remainder;
   14956:	6077      	str	r7, [r6, #4]
		p.lazy = lazy;
   14958:	8135      	strh	r5, [r6, #8]
		mfy.param = &p;
   1495a:	609e      	str	r6, [r3, #8]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH,
   1495c:	f7fb ffb4 	bl	108c8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14960:	b938      	cbnz	r0, 14972 <ticker_cb+0x52>
	if (!lll->is_hdcd)
   14962:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   14966:	f010 0501 	ands.w	r5, r0, #1
   1496a:	d014      	beq.n	14996 <ticker_cb+0x76>
}
   1496c:	b00a      	add	sp, #40	; 0x28
   1496e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(!ret);
   14972:	4a2d      	ldr	r2, [pc, #180]	; (14a28 <ticker_cb+0x108>)
   14974:	492d      	ldr	r1, [pc, #180]	; (14a2c <ticker_cb+0x10c>)
   14976:	482e      	ldr	r0, [pc, #184]	; (14a30 <ticker_cb+0x110>)
   14978:	f240 6395 	movw	r3, #1685	; 0x695
   1497c:	f00d f8d2 	bl	21b24 <printk>
   14980:	4040      	eors	r0, r0
   14982:	f380 8811 	msr	BASEPRI, r0
   14986:	f04f 0003 	mov.w	r0, #3
   1498a:	df02      	svc	2
	if (!lll->is_hdcd)
   1498c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
   14990:	f010 0501 	ands.w	r5, r0, #1
   14994:	d1ea      	bne.n	1496c <ticker_cb+0x4c>
		lll_rand_isr_get(&random_delay, sizeof(random_delay));
   14996:	2104      	movs	r1, #4
   14998:	a809      	add	r0, sp, #36	; 0x24
   1499a:	f006 fa51 	bl	1ae40 <lll_rand_isr_get>
		random_delay %= ULL_ADV_RANDOM_DELAY;
   1499e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   149a0:	4a24      	ldr	r2, [pc, #144]	; (14a34 <ticker_cb+0x114>)
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   149a2:	9406      	str	r4, [sp, #24]
		random_delay %= ULL_ADV_RANDOM_DELAY;
   149a4:	fba2 1203 	umull	r1, r2, r2, r3
   149a8:	1a99      	subs	r1, r3, r2
   149aa:	eb02 0251 	add.w	r2, r2, r1, lsr #1
   149ae:	0a12      	lsrs	r2, r2, #8
   149b0:	f240 1147 	movw	r1, #327	; 0x147
   149b4:	fb01 3312 	mls	r3, r1, r2, r3
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   149b8:	4a1f      	ldr	r2, [pc, #124]	; (14a38 <ticker_cb+0x118>)
   149ba:	4920      	ldr	r1, [pc, #128]	; (14a3c <ticker_cb+0x11c>)
   149bc:	1aa2      	subs	r2, r4, r2
   149be:	fba1 1202 	umull	r1, r2, r1, r2
   149c2:	0992      	lsrs	r2, r2, #6
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   149c4:	491e      	ldr	r1, [pc, #120]	; (14a40 <ticker_cb+0x120>)
				    (TICKER_ID_ADV_BASE +
   149c6:	3202      	adds	r2, #2
		random_delay += 1;
   149c8:	3301      	adds	r3, #1
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   149ca:	e9cd 5104 	strd	r5, r1, [sp, #16]
   149ce:	e9cd 5502 	strd	r5, r5, [sp, #8]
   149d2:	e9cd 5500 	strd	r5, r5, [sp]
   149d6:	b2d2      	uxtb	r2, r2
   149d8:	2101      	movs	r1, #1
   149da:	4628      	mov	r0, r5
		random_delay += 1;
   149dc:	9309      	str	r3, [sp, #36]	; 0x24
		ret = ticker_update(TICKER_INSTANCE_ID_CTLR,
   149de:	f7fd f955 	bl	11c8c <ticker_update>
		LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   149e2:	f030 0302 	bics.w	r3, r0, #2
   149e6:	d0c1      	beq.n	1496c <ticker_cb+0x4c>
   149e8:	4a0f      	ldr	r2, [pc, #60]	; (14a28 <ticker_cb+0x108>)
   149ea:	4916      	ldr	r1, [pc, #88]	; (14a44 <ticker_cb+0x124>)
   149ec:	4810      	ldr	r0, [pc, #64]	; (14a30 <ticker_cb+0x110>)
   149ee:	f240 63ab 	movw	r3, #1707	; 0x6ab
   149f2:	f00d f897 	bl	21b24 <printk>
   149f6:	4040      	eors	r0, r0
   149f8:	f380 8811 	msr	BASEPRI, r0
   149fc:	f04f 0003 	mov.w	r0, #3
   14a00:	df02      	svc	2
}
   14a02:	e7b3      	b.n	1496c <ticker_cb+0x4c>
		LL_ASSERT(ref);
   14a04:	4a08      	ldr	r2, [pc, #32]	; (14a28 <ticker_cb+0x108>)
   14a06:	4910      	ldr	r1, [pc, #64]	; (14a48 <ticker_cb+0x128>)
   14a08:	4809      	ldr	r0, [pc, #36]	; (14a30 <ticker_cb+0x110>)
   14a0a:	f240 6389 	movw	r3, #1673	; 0x689
   14a0e:	f00d f889 	bl	21b24 <printk>
   14a12:	4040      	eors	r0, r0
   14a14:	f380 8811 	msr	BASEPRI, r0
   14a18:	f04f 0003 	mov.w	r0, #3
   14a1c:	df02      	svc	2
   14a1e:	e790      	b.n	14942 <ticker_cb+0x22>
   14a20:	2000e218 	.word	0x2000e218
   14a24:	20000574 	.word	0x20000574
   14a28:	000287b4 	.word	0x000287b4
   14a2c:	000286a0 	.word	0x000286a0
   14a30:	00028404 	.word	0x00028404
   14a34:	90d4f121 	.word	0x90d4f121
   14a38:	2000e1b4 	.word	0x2000e1b4
   14a3c:	ba2e8ba3 	.word	0xba2e8ba3
   14a40:	00014b09 	.word	0x00014b09
   14a44:	00028800 	.word	0x00028800
   14a48:	00028848 	.word	0x00028848

00014a4c <ticker_op_stop_cb>:
	if (status != TICKER_STATUS_SUCCESS) {
   14a4c:	2800      	cmp	r0, #0
   14a4e:	d13d      	bne.n	14acc <ticker_op_stop_cb+0x80>
{
   14a50:	b538      	push	{r3, r4, r5, lr}
   14a52:	460c      	mov	r4, r1
	mfy.param = &adv->lll;
   14a54:	4d25      	ldr	r5, [pc, #148]	; (14aec <ticker_op_stop_cb+0xa0>)
	return hdr->ref;
   14a56:	7c09      	ldrb	r1, [r1, #16]
   14a58:	f104 031c 	add.w	r3, r4, #28
   14a5c:	60ab      	str	r3, [r5, #8]
	if (ull_ref_get(hdr)) {
   14a5e:	f001 02ff 	and.w	r2, r1, #255	; 0xff
   14a62:	b1e1      	cbz	r1, 14a9e <ticker_op_stop_cb+0x52>
		LL_ASSERT(!hdr->disabled_cb);
   14a64:	6962      	ldr	r2, [r4, #20]
   14a66:	b16a      	cbz	r2, 14a84 <ticker_op_stop_cb+0x38>
   14a68:	4a21      	ldr	r2, [pc, #132]	; (14af0 <ticker_op_stop_cb+0xa4>)
   14a6a:	4922      	ldr	r1, [pc, #136]	; (14af4 <ticker_op_stop_cb+0xa8>)
   14a6c:	4822      	ldr	r0, [pc, #136]	; (14af8 <ticker_op_stop_cb+0xac>)
   14a6e:	f240 63fc 	movw	r3, #1788	; 0x6fc
   14a72:	f00d f857 	bl	21b24 <printk>
   14a76:	4040      	eors	r0, r0
   14a78:	f380 8811 	msr	BASEPRI, r0
   14a7c:	f04f 0003 	mov.w	r0, #3
   14a80:	df02      	svc	2
		hdr->disabled_param = mfy.param;
   14a82:	68ab      	ldr	r3, [r5, #8]
		hdr->disabled_cb = disabled_cb;
   14a84:	491d      	ldr	r1, [pc, #116]	; (14afc <ticker_op_stop_cb+0xb0>)
		mfy.fp = lll_disable;
   14a86:	481e      	ldr	r0, [pc, #120]	; (14b00 <ticker_op_stop_cb+0xb4>)
		hdr->disabled_param = mfy.param;
   14a88:	61a3      	str	r3, [r4, #24]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14a8a:	2200      	movs	r2, #0
		hdr->disabled_cb = disabled_cb;
   14a8c:	6161      	str	r1, [r4, #20]
		mfy.fp = lll_disable;
   14a8e:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14a90:	4b16      	ldr	r3, [pc, #88]	; (14aec <ticker_op_stop_cb+0xa0>)
   14a92:	4611      	mov	r1, r2
   14a94:	2002      	movs	r0, #2
   14a96:	f7fb ff17 	bl	108c8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14a9a:	b9c0      	cbnz	r0, 14ace <ticker_op_stop_cb+0x82>
}
   14a9c:	bd38      	pop	{r3, r4, r5, pc}
		mfy.fp = disabled_cb;
   14a9e:	4817      	ldr	r0, [pc, #92]	; (14afc <ticker_op_stop_cb+0xb0>)
   14aa0:	60e8      	str	r0, [r5, #12]
		ret = mayfly_enqueue(TICKER_USER_ID_ULL_LOW,
   14aa2:	462b      	mov	r3, r5
   14aa4:	2101      	movs	r1, #1
   14aa6:	2002      	movs	r0, #2
   14aa8:	f7fb ff0e 	bl	108c8 <mayfly_enqueue>
		LL_ASSERT(!ret);
   14aac:	2800      	cmp	r0, #0
   14aae:	d0f5      	beq.n	14a9c <ticker_op_stop_cb+0x50>
   14ab0:	4a0f      	ldr	r2, [pc, #60]	; (14af0 <ticker_op_stop_cb+0xa4>)
   14ab2:	4914      	ldr	r1, [pc, #80]	; (14b04 <ticker_op_stop_cb+0xb8>)
   14ab4:	4810      	ldr	r0, [pc, #64]	; (14af8 <ticker_op_stop_cb+0xac>)
   14ab6:	f44f 63e1 	mov.w	r3, #1800	; 0x708
   14aba:	f00d f833 	bl	21b24 <printk>
   14abe:	4040      	eors	r0, r0
   14ac0:	f380 8811 	msr	BASEPRI, r0
   14ac4:	f04f 0003 	mov.w	r0, #3
   14ac8:	df02      	svc	2
}
   14aca:	bd38      	pop	{r3, r4, r5, pc}
   14acc:	4770      	bx	lr
		LL_ASSERT(!ret);
   14ace:	4a08      	ldr	r2, [pc, #32]	; (14af0 <ticker_op_stop_cb+0xa4>)
   14ad0:	490c      	ldr	r1, [pc, #48]	; (14b04 <ticker_op_stop_cb+0xb8>)
   14ad2:	4809      	ldr	r0, [pc, #36]	; (14af8 <ticker_op_stop_cb+0xac>)
   14ad4:	f240 7303 	movw	r3, #1795	; 0x703
   14ad8:	f00d f824 	bl	21b24 <printk>
   14adc:	4040      	eors	r0, r0
   14ade:	f380 8811 	msr	BASEPRI, r0
   14ae2:	f04f 0003 	mov.w	r0, #3
   14ae6:	df02      	svc	2
}
   14ae8:	bd38      	pop	{r3, r4, r5, pc}
   14aea:	bf00      	nop
   14aec:	20000584 	.word	0x20000584
   14af0:	000287b4 	.word	0x000287b4
   14af4:	0002884c 	.word	0x0002884c
   14af8:	00028404 	.word	0x00028404
   14afc:	0001488d 	.word	0x0001488d
   14b00:	0001aed1 	.word	0x0001aed1
   14b04:	000286a0 	.word	0x000286a0

00014b08 <ticker_op_update_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14b08:	b900      	cbnz	r0, 14b0c <ticker_op_update_cb+0x4>
   14b0a:	4770      	bx	lr
{
   14b0c:	b510      	push	{r4, lr}
   14b0e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   14b10:	f7ff fce8 	bl	144e4 <ull_disable_mark_get>
   14b14:	4284      	cmp	r4, r0
   14b16:	d00c      	beq.n	14b32 <ticker_op_update_cb+0x2a>
   14b18:	4a06      	ldr	r2, [pc, #24]	; (14b34 <ticker_op_update_cb+0x2c>)
   14b1a:	4907      	ldr	r1, [pc, #28]	; (14b38 <ticker_op_update_cb+0x30>)
   14b1c:	4807      	ldr	r0, [pc, #28]	; (14b3c <ticker_op_update_cb+0x34>)
   14b1e:	f240 63cc 	movw	r3, #1740	; 0x6cc
   14b22:	f00c ffff 	bl	21b24 <printk>
   14b26:	4040      	eors	r0, r0
   14b28:	f380 8811 	msr	BASEPRI, r0
   14b2c:	f04f 0003 	mov.w	r0, #3
   14b30:	df02      	svc	2
}
   14b32:	bd10      	pop	{r4, pc}
   14b34:	000287b4 	.word	0x000287b4
   14b38:	00028860 	.word	0x00028860
   14b3c:	00028404 	.word	0x00028404

00014b40 <conn_release.constprop.0>:

static void conn_release(struct ll_adv_set *adv)
   14b40:	b570      	push	{r4, r5, r6, lr}
{
	struct lll_conn *lll = adv->lll.conn;
   14b42:	4c1b      	ldr	r4, [pc, #108]	; (14bb0 <conn_release.constprop.0+0x70>)
   14b44:	6a65      	ldr	r5, [r4, #36]	; 0x24
	memq_link_t *link;

	LL_ASSERT(!lll->link_tx_free);
   14b46:	6deb      	ldr	r3, [r5, #92]	; 0x5c
   14b48:	b163      	cbz	r3, 14b64 <conn_release.constprop.0+0x24>
   14b4a:	4a1a      	ldr	r2, [pc, #104]	; (14bb4 <conn_release.constprop.0+0x74>)
   14b4c:	491a      	ldr	r1, [pc, #104]	; (14bb8 <conn_release.constprop.0+0x78>)
   14b4e:	481b      	ldr	r0, [pc, #108]	; (14bbc <conn_release.constprop.0+0x7c>)
   14b50:	f240 7343 	movw	r3, #1859	; 0x743
   14b54:	f00c ffe6 	bl	21b24 <printk>
   14b58:	4040      	eors	r0, r0
   14b5a:	f380 8811 	msr	BASEPRI, r0
   14b5e:	f04f 0003 	mov.w	r0, #3
   14b62:	df02      	svc	2
	link = memq_deinit(&lll->memq_tx.head, &lll->memq_tx.tail);
   14b64:	f105 0150 	add.w	r1, r5, #80	; 0x50
   14b68:	f105 004c 	add.w	r0, r5, #76	; 0x4c
   14b6c:	f7fb fe2e 	bl	107cc <memq_deinit>
	LL_ASSERT(link);
   14b70:	4606      	mov	r6, r0
   14b72:	b170      	cbz	r0, 14b92 <conn_release.constprop.0+0x52>
	lll->link_tx_free = link;

	ll_conn_release(lll->hdr.parent);
   14b74:	6828      	ldr	r0, [r5, #0]
	lll->link_tx_free = link;
   14b76:	65ee      	str	r6, [r5, #92]	; 0x5c
	ll_conn_release(lll->hdr.parent);
   14b78:	f000 ffba 	bl	15af0 <ll_conn_release>
	adv->lll.conn = NULL;
   14b7c:	2500      	movs	r5, #0

	ll_rx_release(adv->node_rx_cc_free);
   14b7e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
	adv->lll.conn = NULL;
   14b80:	6265      	str	r5, [r4, #36]	; 0x24
	ll_rx_release(adv->node_rx_cc_free);
   14b82:	f7ff fbcd 	bl	14320 <ll_rx_release>
	adv->node_rx_cc_free = NULL;
	ll_rx_link_release(adv->link_cc_free);
   14b86:	6c60      	ldr	r0, [r4, #68]	; 0x44
	adv->node_rx_cc_free = NULL;
   14b88:	64a5      	str	r5, [r4, #72]	; 0x48
	ll_rx_link_release(adv->link_cc_free);
   14b8a:	f7ff fbbd 	bl	14308 <ll_rx_link_release>
	adv->link_cc_free = NULL;
   14b8e:	6465      	str	r5, [r4, #68]	; 0x44
}
   14b90:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(link);
   14b92:	4a08      	ldr	r2, [pc, #32]	; (14bb4 <conn_release.constprop.0+0x74>)
   14b94:	490a      	ldr	r1, [pc, #40]	; (14bc0 <conn_release.constprop.0+0x80>)
   14b96:	4809      	ldr	r0, [pc, #36]	; (14bbc <conn_release.constprop.0+0x7c>)
   14b98:	f240 7345 	movw	r3, #1861	; 0x745
   14b9c:	f00c ffc2 	bl	21b24 <printk>
   14ba0:	4040      	eors	r0, r0
   14ba2:	f380 8811 	msr	BASEPRI, r0
   14ba6:	f04f 0003 	mov.w	r0, #3
   14baa:	df02      	svc	2
   14bac:	e7e2      	b.n	14b74 <conn_release.constprop.0+0x34>
   14bae:	bf00      	nop
   14bb0:	2000e1b4 	.word	0x2000e1b4
   14bb4:	000287b4 	.word	0x000287b4
   14bb8:	00028890 	.word	0x00028890
   14bbc:	00028404 	.word	0x00028404
   14bc0:	00028910 	.word	0x00028910

00014bc4 <disable.part.0>:
	ll_rx_put(rx_hdr->link, rx_hdr);
	ll_rx_sched();
}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

static inline uint8_t disable(uint8_t handle)
   14bc4:	b530      	push	{r4, r5, lr}
			return err;
		}
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT && (CONFIG_BT_CTLR_ADV_AUX_SET > 0) */

	mark = ull_disable_mark(adv);
   14bc6:	4c4a      	ldr	r4, [pc, #296]	; (14cf0 <disable.part.0+0x12c>)
static inline uint8_t disable(uint8_t handle)
   14bc8:	b085      	sub	sp, #20
	mark = ull_disable_mark(adv);
   14bca:	4620      	mov	r0, r4
   14bcc:	f7ff fc74 	bl	144b8 <ull_disable_mark>
	LL_ASSERT(mark == adv);
   14bd0:	4284      	cmp	r4, r0
   14bd2:	d00c      	beq.n	14bee <disable.part.0+0x2a>
   14bd4:	4a47      	ldr	r2, [pc, #284]	; (14cf4 <disable.part.0+0x130>)
   14bd6:	4948      	ldr	r1, [pc, #288]	; (14cf8 <disable.part.0+0x134>)
   14bd8:	4848      	ldr	r0, [pc, #288]	; (14cfc <disable.part.0+0x138>)
   14bda:	f44f 63f3 	mov.w	r3, #1944	; 0x798
   14bde:	f00c ffa1 	bl	21b24 <printk>
   14be2:	4040      	eors	r0, r0
   14be4:	f380 8811 	msr	BASEPRI, r0
   14be8:	f04f 0003 	mov.w	r0, #3
   14bec:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.is_hdcd) {
   14bee:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   14bf2:	07db      	lsls	r3, r3, #31
		ret_cb = TICKER_STATUS_BUSY;
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14bf4:	ad03      	add	r5, sp, #12
	if (adv->lll.is_hdcd) {
   14bf6:	d50d      	bpl.n	14c14 <disable.part.0+0x50>
		ret_cb = TICKER_STATUS_BUSY;
   14bf8:	2102      	movs	r1, #2
   14bfa:	9103      	str	r1, [sp, #12]
		ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   14bfc:	4b40      	ldr	r3, [pc, #256]	; (14d00 <disable.part.0+0x13c>)
   14bfe:	9500      	str	r5, [sp, #0]
   14c00:	2103      	movs	r1, #3
   14c02:	2201      	movs	r2, #1
   14c04:	2000      	movs	r0, #0
   14c06:	f7fd f859 	bl	11cbc <ticker_stop>
				  TICKER_USER_ID_THREAD, TICKER_ID_ADV_STOP,
				  ull_ticker_status_give, (void *)&ret_cb);
		ret = ull_ticker_status_take(ret, &ret_cb);
   14c0a:	4629      	mov	r1, r5
   14c0c:	f7ff fc2c 	bl	14468 <ull_ticker_status_take>
		if (ret) {
   14c10:	2800      	cmp	r0, #0
   14c12:	d157      	bne.n	14cc4 <disable.part.0+0x100>
			return BT_HCI_ERR_CMD_DISALLOWED;
		}
	}
#endif

	ret_cb = TICKER_STATUS_BUSY;
   14c14:	2202      	movs	r2, #2
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14c16:	2103      	movs	r1, #3
   14c18:	4b39      	ldr	r3, [pc, #228]	; (14d00 <disable.part.0+0x13c>)
   14c1a:	9500      	str	r5, [sp, #0]
   14c1c:	2000      	movs	r0, #0
	ret_cb = TICKER_STATUS_BUSY;
   14c1e:	9203      	str	r2, [sp, #12]
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR, TICKER_USER_ID_THREAD,
   14c20:	f7fd f84c 	bl	11cbc <ticker_stop>
			  TICKER_ID_ADV_BASE + handle,
			  ull_ticker_status_give, (void *)&ret_cb);
	ret = ull_ticker_status_take(ret, &ret_cb);
   14c24:	4629      	mov	r1, r5
   14c26:	f7ff fc1f 	bl	14468 <ull_ticker_status_take>
	if (ret) {
   14c2a:	2800      	cmp	r0, #0
   14c2c:	d135      	bne.n	14c9a <disable.part.0+0xd6>
		LL_ASSERT(mark == adv);

		return BT_HCI_ERR_CMD_DISALLOWED;
	}

	ret = ull_disable(&adv->lll);
   14c2e:	4835      	ldr	r0, [pc, #212]	; (14d04 <disable.part.0+0x140>)
   14c30:	f7ff fc7a 	bl	14528 <ull_disable>
	LL_ASSERT(!ret);
   14c34:	b9f0      	cbnz	r0, 14c74 <disable.part.0+0xb0>

	mark = ull_disable_unmark(adv);
   14c36:	482e      	ldr	r0, [pc, #184]	; (14cf0 <disable.part.0+0x12c>)
   14c38:	f7ff fc48 	bl	144cc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14c3c:	4284      	cmp	r4, r0
   14c3e:	d00c      	beq.n	14c5a <disable.part.0+0x96>
   14c40:	4a2c      	ldr	r2, [pc, #176]	; (14cf4 <disable.part.0+0x130>)
   14c42:	492d      	ldr	r1, [pc, #180]	; (14cf8 <disable.part.0+0x134>)
   14c44:	482d      	ldr	r0, [pc, #180]	; (14cfc <disable.part.0+0x138>)
   14c46:	f240 73ba 	movw	r3, #1978	; 0x7ba
   14c4a:	f00c ff6b 	bl	21b24 <printk>
   14c4e:	4040      	eors	r0, r0
   14c50:	f380 8811 	msr	BASEPRI, r0
   14c54:	f04f 0003 	mov.w	r0, #3
   14c58:	df02      	svc	2

#if defined(CONFIG_BT_PERIPHERAL)
	if (adv->lll.conn) {
   14c5a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   14c5c:	b10b      	cbz	r3, 14c62 <disable.part.0+0x9e>
		conn_release(adv);
   14c5e:	f7ff ff6f 	bl	14b40 <conn_release.constprop.0>
		ll_rx_link_release(node_rx_adv_term->hdr.link);
		ll_rx_release(node_rx_adv_term);
	}
#endif /* CONFIG_BT_CTLR_ADV_EXT */

	adv->is_enabled = 0U;
   14c62:	f894 304e 	ldrb.w	r3, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_OBSERVER) && !ull_scan_is_enabled_get(0)) {
		ull_filter_adv_scan_state_cb(0);
	}
#endif /* CONFIG_BT_CTLR_PRIVACY */

	return 0;
   14c66:	2000      	movs	r0, #0
	adv->is_enabled = 0U;
   14c68:	f36f 0300 	bfc	r3, #0, #1
   14c6c:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
}
   14c70:	b005      	add	sp, #20
   14c72:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!ret);
   14c74:	4a1f      	ldr	r2, [pc, #124]	; (14cf4 <disable.part.0+0x130>)
   14c76:	4924      	ldr	r1, [pc, #144]	; (14d08 <disable.part.0+0x144>)
   14c78:	4820      	ldr	r0, [pc, #128]	; (14cfc <disable.part.0+0x138>)
   14c7a:	f240 73b7 	movw	r3, #1975	; 0x7b7
   14c7e:	f00c ff51 	bl	21b24 <printk>
   14c82:	4040      	eors	r0, r0
   14c84:	f380 8811 	msr	BASEPRI, r0
   14c88:	f04f 0003 	mov.w	r0, #3
   14c8c:	df02      	svc	2
	mark = ull_disable_unmark(adv);
   14c8e:	4818      	ldr	r0, [pc, #96]	; (14cf0 <disable.part.0+0x12c>)
   14c90:	f7ff fc1c 	bl	144cc <ull_disable_unmark>
	LL_ASSERT(mark == adv);
   14c94:	4284      	cmp	r4, r0
   14c96:	d1d3      	bne.n	14c40 <disable.part.0+0x7c>
   14c98:	e7df      	b.n	14c5a <disable.part.0+0x96>
		mark = ull_disable_unmark(adv);
   14c9a:	4815      	ldr	r0, [pc, #84]	; (14cf0 <disable.part.0+0x12c>)
   14c9c:	f7ff fc16 	bl	144cc <ull_disable_unmark>
		LL_ASSERT(mark == adv);
   14ca0:	4284      	cmp	r4, r0
   14ca2:	d021      	beq.n	14ce8 <disable.part.0+0x124>
   14ca4:	4a13      	ldr	r2, [pc, #76]	; (14cf4 <disable.part.0+0x130>)
   14ca6:	4914      	ldr	r1, [pc, #80]	; (14cf8 <disable.part.0+0x134>)
   14ca8:	4814      	ldr	r0, [pc, #80]	; (14cfc <disable.part.0+0x138>)
   14caa:	f240 73b1 	movw	r3, #1969	; 0x7b1
   14cae:	f00c ff39 	bl	21b24 <printk>
   14cb2:	4040      	eors	r0, r0
   14cb4:	f380 8811 	msr	BASEPRI, r0
   14cb8:	f04f 0003 	mov.w	r0, #3
   14cbc:	df02      	svc	2
		return BT_HCI_ERR_CMD_DISALLOWED;
   14cbe:	200c      	movs	r0, #12
}
   14cc0:	b005      	add	sp, #20
   14cc2:	bd30      	pop	{r4, r5, pc}
			mark = ull_disable_unmark(adv);
   14cc4:	480a      	ldr	r0, [pc, #40]	; (14cf0 <disable.part.0+0x12c>)
   14cc6:	f7ff fc01 	bl	144cc <ull_disable_unmark>
			LL_ASSERT(mark == adv);
   14cca:	4284      	cmp	r4, r0
   14ccc:	d00c      	beq.n	14ce8 <disable.part.0+0x124>
   14cce:	4a09      	ldr	r2, [pc, #36]	; (14cf4 <disable.part.0+0x130>)
   14cd0:	4909      	ldr	r1, [pc, #36]	; (14cf8 <disable.part.0+0x134>)
   14cd2:	480a      	ldr	r0, [pc, #40]	; (14cfc <disable.part.0+0x138>)
   14cd4:	f240 73a3 	movw	r3, #1955	; 0x7a3
   14cd8:	f00c ff24 	bl	21b24 <printk>
   14cdc:	4040      	eors	r0, r0
   14cde:	f380 8811 	msr	BASEPRI, r0
   14ce2:	f04f 0003 	mov.w	r0, #3
   14ce6:	df02      	svc	2
			return BT_HCI_ERR_CMD_DISALLOWED;
   14ce8:	200c      	movs	r0, #12
}
   14cea:	b005      	add	sp, #20
   14cec:	bd30      	pop	{r4, r5, pc}
   14cee:	bf00      	nop
   14cf0:	2000e1b4 	.word	0x2000e1b4
   14cf4:	000287b4 	.word	0x000287b4
   14cf8:	000288a4 	.word	0x000288a4
   14cfc:	00028404 	.word	0x00028404
   14d00:	000135b9 	.word	0x000135b9
   14d04:	2000e1d0 	.word	0x2000e1d0
   14d08:	000286a0 	.word	0x000286a0

00014d0c <ll_adv_params_set>:
{
   14d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (!adv || adv->is_enabled) {
   14d10:	4c4d      	ldr	r4, [pc, #308]	; (14e48 <ll_adv_params_set+0x13c>)
{
   14d12:	461f      	mov	r7, r3
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14d14:	4b4d      	ldr	r3, [pc, #308]	; (14e4c <ll_adv_params_set+0x140>)
	if (!adv || adv->is_enabled) {
   14d16:	f894 604e 	ldrb.w	r6, [r4, #78]	; 0x4e
{
   14d1a:	4680      	mov	r8, r0
   14d1c:	468e      	mov	lr, r1
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14d1e:	e893 0003 	ldmia.w	r3, {r0, r1}
{
   14d22:	b082      	sub	sp, #8
	if (!adv || adv->is_enabled) {
   14d24:	f016 0601 	ands.w	r6, r6, #1
{
   14d28:	4615      	mov	r5, r2
   14d2a:	f89d c024 	ldrb.w	ip, [sp, #36]	; 0x24
   14d2e:	f89d 2028 	ldrb.w	r2, [sp, #40]	; 0x28
	uint8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   14d32:	9000      	str	r0, [sp, #0]
   14d34:	f88d 1004 	strb.w	r1, [sp, #4]
	if (!adv || adv->is_enabled) {
   14d38:	d170      	bne.n	14e1c <ll_adv_params_set+0x110>
	adv->lll.chan_map = chan_map;
   14d3a:	f00c 0c07 	and.w	ip, ip, #7
   14d3e:	f002 0203 	and.w	r2, r2, #3
   14d42:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
   14d46:	ea4c 2c02 	orr.w	ip, ip, r2, lsl #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14d4a:	f894 202d 	ldrb.w	r2, [r4, #45]	; 0x2d
		adv->interval = 0;
   14d4e:	f1be 0f01 	cmp.w	lr, #1
   14d52:	eb04 0282 	add.w	r2, r4, r2, lsl #2
   14d56:	bf08      	it	eq
   14d58:	f04f 0800 	moveq.w	r8, #0
   14d5c:	f8a4 804c 	strh.w	r8, [r4, #76]	; 0x4c
   14d60:	f8d2 8030 	ldr.w	r8, [r2, #48]	; 0x30
	adv->lll.chan_map = chan_map;
   14d64:	8d22      	ldrh	r2, [r4, #40]	; 0x28
	pdu->type = pdu_adv_type[adv_type];
   14d66:	ab02      	add	r3, sp, #8
   14d68:	449e      	add	lr, r3
	adv->lll.chan_map = chan_map;
   14d6a:	f422 7243 	bic.w	r2, r2, #780	; 0x30c
   14d6e:	f022 0202 	bic.w	r2, r2, #2
	pdu->type = pdu_adv_type[adv_type];
   14d72:	f81e 3c08 	ldrb.w	r3, [lr, #-8]
	adv->lll.chan_map = chan_map;
   14d76:	ea4c 0c02 	orr.w	ip, ip, r2
	pdu->type = pdu_adv_type[adv_type];
   14d7a:	f898 2000 	ldrb.w	r2, [r8]
	adv->lll.chan_map = chan_map;
   14d7e:	f8a4 c028 	strh.w	ip, [r4, #40]	; 0x28
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14d82:	f013 0f0e 	tst.w	r3, #14
	pdu->type = pdu_adv_type[adv_type];
   14d86:	f022 021f 	bic.w	r2, r2, #31
   14d8a:	f003 030f 	and.w	r3, r3, #15
   14d8e:	ea43 0302 	orr.w	r3, r3, r2
	adv->own_addr_type = own_addr_type;
   14d92:	f894 204e 	ldrb.w	r2, [r4, #78]	; 0x4e
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   14d96:	bf0c      	ite	eq
   14d98:	2101      	moveq	r1, #1
   14d9a:	2100      	movne	r1, #0
	adv->own_addr_type = own_addr_type;
   14d9c:	f365 0242 	bfi	r2, r5, #1, #2
   14da0:	f361 1345 	bfi	r3, r1, #5, #1
   14da4:	f888 3000 	strb.w	r3, [r8]
   14da8:	f884 204e 	strb.w	r2, [r4, #78]	; 0x4e
	if (adv->own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   14dac:	b2d3      	uxtb	r3, r2
   14dae:	0752      	lsls	r2, r2, #29
   14db0:	d509      	bpl.n	14dc6 <ll_adv_params_set+0xba>
		adv->id_addr_type = direct_addr_type;
   14db2:	f367 03c3 	bfi	r3, r7, #3, #1
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14db6:	9908      	ldr	r1, [sp, #32]
		adv->id_addr_type = direct_addr_type;
   14db8:	f884 304e 	strb.w	r3, [r4, #78]	; 0x4e
		memcpy(&adv->id_addr, direct_addr, BDADDR_SIZE);
   14dbc:	2206      	movs	r2, #6
   14dbe:	f104 004f 	add.w	r0, r4, #79	; 0x4f
   14dc2:	f00f fb51 	bl	24468 <memcpy>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   14dc6:	f898 3000 	ldrb.w	r3, [r8]
   14dca:	f003 020f 	and.w	r2, r3, #15
   14dce:	2a01      	cmp	r2, #1
   14dd0:	d029      	beq.n	14e26 <ll_adv_params_set+0x11a>
	} else if (pdu->len == 0) {
   14dd2:	f898 2001 	ldrb.w	r2, [r8, #1]
		pdu->tx_addr = own_addr_type & 0x1;
   14dd6:	f005 0501 	and.w	r5, r5, #1
   14dda:	f365 1386 	bfi	r3, r5, #6, #1
	} else if (pdu->len == 0) {
   14dde:	b1aa      	cbz	r2, 14e0c <ll_adv_params_set+0x100>
		pdu->rx_addr = 0;
   14de0:	f36f 13c7 	bfc	r3, #7, #1
   14de4:	f888 3000 	strb.w	r3, [r8]
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14de8:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   14dec:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14df0:	01ad      	lsls	r5, r5, #6
   14df2:	6be3      	ldr	r3, [r4, #60]	; 0x3c
		if (pdu->len == 0) {
   14df4:	785a      	ldrb	r2, [r3, #1]
		pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14df6:	f045 0504 	orr.w	r5, r5, #4
   14dfa:	701d      	strb	r5, [r3, #0]
		if (pdu->len == 0) {
   14dfc:	b912      	cbnz	r2, 14e04 <ll_adv_params_set+0xf8>
			pdu->len = BDADDR_SIZE;
   14dfe:	2106      	movs	r1, #6
   14e00:	7059      	strb	r1, [r3, #1]
	return 0;
   14e02:	4616      	mov	r6, r2
}
   14e04:	4630      	mov	r0, r6
   14e06:	b002      	add	sp, #8
   14e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->rx_addr = 0;
   14e0c:	f362 13c7 	bfi	r3, r2, #7, #1
   14e10:	f888 3000 	strb.w	r3, [r8]
		pdu->len = BDADDR_SIZE;
   14e14:	2306      	movs	r3, #6
   14e16:	f888 3001 	strb.w	r3, [r8, #1]
   14e1a:	e7e5      	b.n	14de8 <ll_adv_params_set+0xdc>
		return BT_HCI_ERR_CMD_DISALLOWED;
   14e1c:	260c      	movs	r6, #12
}
   14e1e:	4630      	mov	r0, r6
   14e20:	b002      	add	sp, #8
   14e22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu->tx_addr = own_addr_type & 0x1;
   14e26:	f005 0501 	and.w	r5, r5, #1
		pdu->rx_addr = direct_addr_type;
   14e2a:	4640      	mov	r0, r8
		pdu->tx_addr = own_addr_type & 0x1;
   14e2c:	f365 1386 	bfi	r3, r5, #6, #1
		pdu->rx_addr = direct_addr_type;
   14e30:	f367 13c7 	bfi	r3, r7, #7, #1
   14e34:	f800 3b08 	strb.w	r3, [r0], #8
		memcpy(&pdu->direct_ind.tgt_addr[0], direct_addr, BDADDR_SIZE);
   14e38:	9908      	ldr	r1, [sp, #32]
   14e3a:	2206      	movs	r2, #6
   14e3c:	f00f fb14 	bl	24468 <memcpy>
		pdu->len = sizeof(struct pdu_adv_direct_ind);
   14e40:	230c      	movs	r3, #12
   14e42:	f888 3001 	strb.w	r3, [r8, #1]
   14e46:	e7cf      	b.n	14de8 <ll_adv_params_set+0xdc>
   14e48:	2000e1b4 	.word	0x2000e1b4
   14e4c:	00027ac8 	.word	0x00027ac8

00014e50 <ll_adv_data_set>:
{
   14e50:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   14e52:	4e21      	ldr	r6, [pc, #132]	; (14ed8 <ll_adv_data_set+0x88>)
   14e54:	f896 302d 	ldrb.w	r3, [r6, #45]	; 0x2d
   14e58:	eb06 0383 	add.w	r3, r6, r3, lsl #2
   14e5c:	b083      	sub	sp, #12
   14e5e:	6b1d      	ldr	r5, [r3, #48]	; 0x30
	if (prev->type == PDU_ADV_TYPE_DIRECT_IND) {
   14e60:	782b      	ldrb	r3, [r5, #0]
   14e62:	f003 030f 	and.w	r3, r3, #15
   14e66:	2b01      	cmp	r3, #1
   14e68:	d032      	beq.n	14ed0 <ll_adv_data_set+0x80>
	if (len > PDU_AC_DATA_SIZE_MAX) {
   14e6a:	281f      	cmp	r0, #31
   14e6c:	4604      	mov	r4, r0
   14e6e:	d82c      	bhi.n	14eca <ll_adv_data_set+0x7a>
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   14e70:	460f      	mov	r7, r1
   14e72:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   14e76:	f10d 0107 	add.w	r1, sp, #7
   14e7a:	f006 fb51 	bl	1b520 <lll_adv_pdu_alloc>
		pdu->chan_sel = prev->chan_sel;
   14e7e:	4629      	mov	r1, r5
   14e80:	4605      	mov	r5, r0
   14e82:	f811 2b02 	ldrb.w	r2, [r1], #2
   14e86:	f3c2 1040 	ubfx	r0, r2, #5, #1
	pdu->type = prev->type;
   14e8a:	f3c2 0303 	ubfx	r3, r2, #0, #4
   14e8e:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
	pdu->tx_addr = prev->tx_addr;
   14e92:	f3c2 1080 	ubfx	r0, r2, #6, #1
	pdu->type = prev->type;
   14e96:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
   14e9a:	f002 0280 	and.w	r2, r2, #128	; 0x80
   14e9e:	4628      	mov	r0, r5
   14ea0:	4313      	orrs	r3, r2
   14ea2:	f800 3b02 	strb.w	r3, [r0], #2
	memcpy(&pdu->adv_ind.addr[0], &prev->adv_ind.addr[0], BDADDR_SIZE);
   14ea6:	2206      	movs	r2, #6
   14ea8:	f00f fade 	bl	24468 <memcpy>
	memcpy(&pdu->adv_ind.data[0], data, len);
   14eac:	4622      	mov	r2, r4
   14eae:	4639      	mov	r1, r7
   14eb0:	f105 0008 	add.w	r0, r5, #8
   14eb4:	f00f fad8 	bl	24468 <memcpy>
	pdu->last = idx;
   14eb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
	pdu->len = BDADDR_SIZE + len;
   14ebc:	3406      	adds	r4, #6
	return 0;
   14ebe:	2000      	movs	r0, #0
	pdu->len = BDADDR_SIZE + len;
   14ec0:	706c      	strb	r4, [r5, #1]
   14ec2:	f886 302d 	strb.w	r3, [r6, #45]	; 0x2d
}
   14ec6:	b003      	add	sp, #12
   14ec8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_HCI_ERR_INVALID_PARAM;
   14eca:	2012      	movs	r0, #18
}
   14ecc:	b003      	add	sp, #12
   14ece:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return 0;
   14ed0:	2000      	movs	r0, #0
}
   14ed2:	b003      	add	sp, #12
   14ed4:	bdf0      	pop	{r4, r5, r6, r7, pc}
   14ed6:	bf00      	nop
   14ed8:	2000e1b4 	.word	0x2000e1b4

00014edc <ull_adv_init>:
{
   14edc:	b510      	push	{r4, lr}
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   14ede:	4c05      	ldr	r4, [pc, #20]	; (14ef4 <ull_adv_init+0x18>)
   14ee0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   14ee4:	f006 fb06 	bl	1b4f4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   14ee8:	f104 0038 	add.w	r0, r4, #56	; 0x38
   14eec:	f006 fb02 	bl	1b4f4 <lll_adv_data_init>
}
   14ef0:	2000      	movs	r0, #0
   14ef2:	bd10      	pop	{r4, pc}
   14ef4:	2000e1b4 	.word	0x2000e1b4

00014ef8 <ull_adv_reset>:
{
   14ef8:	b508      	push	{r3, lr}
	if (!adv || !adv->is_enabled) {
   14efa:	4b04      	ldr	r3, [pc, #16]	; (14f0c <ull_adv_reset+0x14>)
   14efc:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
   14f00:	07db      	lsls	r3, r3, #31
   14f02:	d501      	bpl.n	14f08 <ull_adv_reset+0x10>
   14f04:	f7ff fe5e 	bl	14bc4 <disable.part.0>
}
   14f08:	2000      	movs	r0, #0
   14f0a:	bd08      	pop	{r3, pc}
   14f0c:	2000e1b4 	.word	0x2000e1b4

00014f10 <ull_adv_reset_finalize>:
{
   14f10:	b538      	push	{r3, r4, r5, lr}
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   14f12:	4c09      	ldr	r4, [pc, #36]	; (14f38 <ull_adv_reset_finalize+0x28>)
   14f14:	f104 052c 	add.w	r5, r4, #44	; 0x2c
   14f18:	4628      	mov	r0, r5
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   14f1a:	3438      	adds	r4, #56	; 0x38
		lll_adv_data_reset(&ll_adv[handle].lll.adv_data);
   14f1c:	f006 fafa 	bl	1b514 <lll_adv_data_reset>
		lll_adv_data_reset(&ll_adv[handle].lll.scan_rsp);
   14f20:	4620      	mov	r0, r4
   14f22:	f006 faf7 	bl	1b514 <lll_adv_data_reset>
		lll_adv_data_init(&ll_adv[handle].lll.adv_data);
   14f26:	4628      	mov	r0, r5
   14f28:	f006 fae4 	bl	1b4f4 <lll_adv_data_init>
		lll_adv_data_init(&ll_adv[handle].lll.scan_rsp);
   14f2c:	4620      	mov	r0, r4
   14f2e:	f006 fae1 	bl	1b4f4 <lll_adv_data_init>
}
   14f32:	2000      	movs	r0, #0
   14f34:	bd38      	pop	{r3, r4, r5, pc}
   14f36:	bf00      	nop
   14f38:	2000e1b4 	.word	0x2000e1b4

00014f3c <ull_adv_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14f3c:	4a03      	ldr	r2, [pc, #12]	; (14f4c <ull_adv_handle_get+0x10>)
   14f3e:	4b04      	ldr	r3, [pc, #16]	; (14f50 <ull_adv_handle_get+0x14>)
   14f40:	1a80      	subs	r0, r0, r2
   14f42:	fba3 3000 	umull	r3, r0, r3, r0
}
   14f46:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14f4a:	4770      	bx	lr
   14f4c:	2000e1b4 	.word	0x2000e1b4
   14f50:	ba2e8ba3 	.word	0xba2e8ba3

00014f54 <ull_adv_lll_handle_get>:
	return ((uint8_t *)adv - (uint8_t *)ll_adv) / sizeof(*adv);
   14f54:	4a04      	ldr	r2, [pc, #16]	; (14f68 <ull_adv_lll_handle_get+0x14>)
   14f56:	6800      	ldr	r0, [r0, #0]
   14f58:	4b04      	ldr	r3, [pc, #16]	; (14f6c <ull_adv_lll_handle_get+0x18>)
   14f5a:	1a80      	subs	r0, r0, r2
   14f5c:	fba3 3000 	umull	r3, r0, r3, r0
}
   14f60:	f3c0 108f 	ubfx	r0, r0, #6, #16
   14f64:	4770      	bx	lr
   14f66:	bf00      	nop
   14f68:	2000e1b4 	.word	0x2000e1b4
   14f6c:	ba2e8ba3 	.word	0xba2e8ba3

00014f70 <ull_adv_is_enabled_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   14f70:	b938      	cbnz	r0, 14f82 <ull_adv_is_enabled_get+0x12>
	if (!adv || !adv->is_enabled) {
   14f72:	4805      	ldr	r0, [pc, #20]	; (14f88 <ull_adv_is_enabled_get+0x18>)
   14f74:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
	return &ll_adv[handle];
   14f78:	f013 0f01 	tst.w	r3, #1
   14f7c:	bf08      	it	eq
   14f7e:	2000      	moveq	r0, #0
   14f80:	4770      	bx	lr
		return NULL;
   14f82:	2000      	movs	r0, #0
}
   14f84:	4770      	bx	lr
   14f86:	bf00      	nop
   14f88:	2000e1b4 	.word	0x2000e1b4

00014f8c <ull_adv_is_enabled>:
	if (handle >= BT_CTLR_ADV_SET) {
   14f8c:	b928      	cbnz	r0, 14f9a <ull_adv_is_enabled+0xe>
	if (!adv || !adv->is_enabled) {
   14f8e:	4b04      	ldr	r3, [pc, #16]	; (14fa0 <ull_adv_is_enabled+0x14>)
   14f90:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   14f94:	f000 0001 	and.w	r0, r0, #1
   14f98:	4770      	bx	lr
   14f9a:	2000      	movs	r0, #0
}
   14f9c:	4770      	bx	lr
   14f9e:	bf00      	nop
   14fa0:	2000e1b4 	.word	0x2000e1b4

00014fa4 <ull_adv_filter_pol_get>:
	if (handle >= BT_CTLR_ADV_SET) {
   14fa4:	b950      	cbnz	r0, 14fbc <ull_adv_filter_pol_get+0x18>
	if (!adv || !adv->is_enabled) {
   14fa6:	4b06      	ldr	r3, [pc, #24]	; (14fc0 <ull_adv_filter_pol_get+0x1c>)
   14fa8:	f893 004e 	ldrb.w	r0, [r3, #78]	; 0x4e
   14fac:	f010 0001 	ands.w	r0, r0, #1
   14fb0:	d005      	beq.n	14fbe <ull_adv_filter_pol_get+0x1a>
	return adv->lll.filter_policy;
   14fb2:	f893 0029 	ldrb.w	r0, [r3, #41]	; 0x29
   14fb6:	f000 0003 	and.w	r0, r0, #3
   14fba:	4770      	bx	lr
		return 0;
   14fbc:	2000      	movs	r0, #0
}
   14fbe:	4770      	bx	lr
   14fc0:	2000e1b4 	.word	0x2000e1b4

00014fc4 <ull_scan_rsp_set>:
{
   14fc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.last];
   14fc6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   14fca:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   14fce:	b083      	sub	sp, #12
   14fd0:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
   14fd2:	460e      	mov	r6, r1
   14fd4:	4604      	mov	r4, r0
	return lll_adv_pdu_alloc(&lll->scan_rsp, idx);
   14fd6:	f10d 0107 	add.w	r1, sp, #7
   14fda:	3038      	adds	r0, #56	; 0x38
   14fdc:	4617      	mov	r7, r2
   14fde:	f006 fa9f 	bl	1b520 <lll_adv_pdu_alloc>
	pdu->tx_addr = prev->tx_addr;
   14fe2:	4629      	mov	r1, r5
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   14fe4:	2206      	movs	r2, #6
	pdu->tx_addr = prev->tx_addr;
   14fe6:	f811 3b02 	ldrb.w	r3, [r1], #2
   14fea:	f3c3 1380 	ubfx	r3, r3, #6, #1
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   14fee:	019b      	lsls	r3, r3, #6
   14ff0:	f043 0304 	orr.w	r3, r3, #4
   14ff4:	7003      	strb	r3, [r0, #0]
	pdu->len = BDADDR_SIZE + len;
   14ff6:	1db3      	adds	r3, r6, #6
   14ff8:	7043      	strb	r3, [r0, #1]
   14ffa:	4605      	mov	r5, r0
	memcpy(&pdu->scan_rsp.addr[0], &prev->scan_rsp.addr[0], BDADDR_SIZE);
   14ffc:	3002      	adds	r0, #2
   14ffe:	f00f fa33 	bl	24468 <memcpy>
	memcpy(&pdu->scan_rsp.data[0], data, len);
   15002:	4632      	mov	r2, r6
   15004:	4639      	mov	r1, r7
   15006:	f105 0008 	add.w	r0, r5, #8
   1500a:	f00f fa2d 	bl	24468 <memcpy>
	pdu->last = idx;
   1500e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   15012:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
   15016:	2000      	movs	r0, #0
   15018:	b003      	add	sp, #12
   1501a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001501c <ll_adv_scan_rsp_set>:
{
   1501c:	4603      	mov	r3, r0
   1501e:	460a      	mov	r2, r1
	return ull_scan_rsp_set(adv, len, data);
   15020:	4801      	ldr	r0, [pc, #4]	; (15028 <ll_adv_scan_rsp_set+0xc>)
   15022:	4619      	mov	r1, r3
   15024:	f7ff bfce 	b.w	14fc4 <ull_scan_rsp_set>
   15028:	2000e1b4 	.word	0x2000e1b4

0001502c <ull_adv_pdu_update_addrs>:
{
   1502c:	b570      	push	{r4, r5, r6, lr}
   1502e:	460c      	mov	r4, r1
   15030:	4605      	mov	r5, r0
}

static const uint8_t *adva_update(struct ll_adv_set *adv, struct pdu_adv *pdu)
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *tx_addr = ull_filter_adva_get(adv);
   15032:	f005 fa0b 	bl	1a44c <ull_filter_adva_get>
#else
	const uint8_t *tx_addr = NULL;
#endif
	uint8_t *adv_addr;

	if (tx_addr) {
   15036:	4601      	mov	r1, r0
   15038:	b300      	cbz	r0, 1507c <ull_adv_pdu_update_addrs+0x50>
		pdu->tx_addr = 1;
   1503a:	7823      	ldrb	r3, [r4, #0]
   1503c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   15040:	7023      	strb	r3, [r4, #0]
	return pdu->adv_ind.addr;
   15042:	1ca6      	adds	r6, r4, #2
	} else {
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
	}

	adv_addr = adv_pdu_adva_get(pdu);
	memcpy(adv_addr, tx_addr, BDADDR_SIZE);
   15044:	2206      	movs	r2, #6
   15046:	4630      	mov	r0, r6
   15048:	f00f fa0e 	bl	24468 <memcpy>
	if ((pdu->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1504c:	7823      	ldrb	r3, [r4, #0]
   1504e:	f003 030f 	and.w	r3, r3, #15
   15052:	2b01      	cmp	r3, #1
   15054:	d001      	beq.n	1505a <ull_adv_pdu_update_addrs+0x2e>
}
   15056:	4630      	mov	r0, r6
   15058:	bd70      	pop	{r4, r5, r6, pc}
{
#if defined(CONFIG_BT_CTLR_PRIVACY)
	const uint8_t *rx_addr = NULL;
	uint8_t *tgt_addr;

	rx_addr = ull_filter_tgta_get(adv);
   1505a:	4628      	mov	r0, r5
   1505c:	f005 fa24 	bl	1a4a8 <ull_filter_tgta_get>
	if (rx_addr) {
   15060:	4601      	mov	r1, r0
   15062:	2800      	cmp	r0, #0
   15064:	d0f7      	beq.n	15056 <ull_adv_pdu_update_addrs+0x2a>
		pdu->rx_addr = 1;
   15066:	7823      	ldrb	r3, [r4, #0]
   15068:	4620      	mov	r0, r4
   1506a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1506e:	f800 3b08 	strb.w	r3, [r0], #8

		/* TargetA always follows AdvA in all PDUs */
		tgt_addr = adv_pdu_adva_get(pdu) + BDADDR_SIZE;
		memcpy(tgt_addr, rx_addr, BDADDR_SIZE);
   15072:	2206      	movs	r2, #6
   15074:	f00f f9f8 	bl	24468 <memcpy>
}
   15078:	4630      	mov	r0, r6
   1507a:	bd70      	pop	{r4, r5, r6, pc}
		tx_addr = ll_addr_get(pdu->tx_addr, NULL);
   1507c:	7820      	ldrb	r0, [r4, #0]
   1507e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   15082:	f7fc fe63 	bl	11d4c <ll_addr_get>
   15086:	4601      	mov	r1, r0
   15088:	e7db      	b.n	15042 <ull_adv_pdu_update_addrs+0x16>
   1508a:	bf00      	nop

0001508c <tx_ull_dequeue>:
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   1508c:	f8d0 21c0 	ldr.w	r2, [r0, #448]	; 0x1c0
{
   15090:	4603      	mov	r3, r0
   15092:	b410      	push	{r4}
   15094:	4608      	mov	r0, r1
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   15096:	b172      	cbz	r2, 150b6 <tx_ull_dequeue+0x2a>
	if (conn->tx_head == conn->tx_ctrl) {
   15098:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
   1509c:	428a      	cmp	r2, r1
   1509e:	d02b      	beq.n	150f8 <tx_ull_dequeue+0x6c>
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   150a0:	f8d3 21c8 	ldr.w	r2, [r3, #456]	; 0x1c8
		if (conn->tx_head == conn->tx_data) {
   150a4:	4291      	cmp	r1, r2
   150a6:	d01a      	beq.n	150de <tx_ull_dequeue+0x52>
		conn->tx_head = conn->tx_head->next;
   150a8:	6809      	ldr	r1, [r1, #0]
   150aa:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		tx->next = NULL;
   150ae:	2200      	movs	r2, #0
}
   150b0:	bc10      	pop	{r4}
		tx->next = NULL;
   150b2:	6002      	str	r2, [r0, #0]
}
   150b4:	4770      	bx	lr
	if (!conn->tx_ctrl && (conn->tx_head != conn->tx_data)) {
   150b6:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
   150ba:	f8d3 11c8 	ldr.w	r1, [r3, #456]	; 0x1c8
   150be:	428a      	cmp	r2, r1
   150c0:	d025      	beq.n	1510e <tx_ull_dequeue+0x82>
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   150c2:	7911      	ldrb	r1, [r2, #4]
   150c4:	f001 0103 	and.w	r1, r1, #3
   150c8:	2903      	cmp	r1, #3
   150ca:	d00e      	beq.n	150ea <tx_ull_dequeue+0x5e>
		conn->tx_head = conn->tx_head->next;
   150cc:	6812      	ldr	r2, [r2, #0]
   150ce:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
			conn->tx_ctrl = NULL;
   150d2:	2200      	movs	r2, #0
			conn->tx_ctrl_last = NULL;
   150d4:	e9c3 2270 	strd	r2, r2, [r3, #448]	; 0x1c0
}
   150d8:	bc10      	pop	{r4}
		tx->next = tx;
   150da:	6000      	str	r0, [r0, #0]
}
   150dc:	4770      	bx	lr
   150de:	4611      	mov	r1, r2
			conn->tx_data = conn->tx_data->next;
   150e0:	6809      	ldr	r1, [r1, #0]
   150e2:	f8c3 11c8 	str.w	r1, [r3, #456]	; 0x1c8
   150e6:	4611      	mov	r1, r2
   150e8:	e7de      	b.n	150a8 <tx_ull_dequeue+0x1c>
		    ((pdu_data_tx->llctrl.opcode !=
   150ea:	79d1      	ldrb	r1, [r2, #7]
		if ((pdu_data_tx->ll_id != PDU_DATA_LLID_CTRL) ||
   150ec:	2903      	cmp	r1, #3
   150ee:	d001      	beq.n	150f4 <tx_ull_dequeue+0x68>
		      PDU_DATA_LLCTRL_TYPE_ENC_REQ) &&
   150f0:	290a      	cmp	r1, #10
   150f2:	d1eb      	bne.n	150cc <tx_ull_dequeue+0x40>
   150f4:	4611      	mov	r1, r2
   150f6:	e7d7      	b.n	150a8 <tx_ull_dequeue+0x1c>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   150f8:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
		conn->tx_head = conn->tx_head->next;
   150fc:	6809      	ldr	r1, [r1, #0]
   150fe:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15102:	4294      	cmp	r4, r2
			conn->tx_ctrl = conn->tx_head;
   15104:	bf18      	it	ne
   15106:	f8c3 11c0 	strne.w	r1, [r3, #448]	; 0x1c0
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   1510a:	d1e5      	bne.n	150d8 <tx_ull_dequeue+0x4c>
   1510c:	e7e1      	b.n	150d2 <tx_ull_dequeue+0x46>
	if (conn->tx_head == conn->tx_ctrl) {
   1510e:	2a00      	cmp	r2, #0
   15110:	d1e6      	bne.n	150e0 <tx_ull_dequeue+0x54>
		if (conn->tx_ctrl == conn->tx_ctrl_last) {
   15112:	f8d3 41c4 	ldr.w	r4, [r3, #452]	; 0x1c4
	if (conn->tx_head == conn->tx_ctrl) {
   15116:	4611      	mov	r1, r2
   15118:	e7f0      	b.n	150fc <tx_ull_dequeue+0x70>
   1511a:	bf00      	nop

0001511c <init_reset>:
{
   1511c:	b510      	push	{r4, lr}
	mem_init(conn_pool, sizeof(struct ll_conn),
   1511e:	4b15      	ldr	r3, [pc, #84]	; (15174 <init_reset+0x58>)
   15120:	4815      	ldr	r0, [pc, #84]	; (15178 <init_reset+0x5c>)
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   15122:	4c16      	ldr	r4, [pc, #88]	; (1517c <init_reset+0x60>)
	mem_init(conn_pool, sizeof(struct ll_conn),
   15124:	2201      	movs	r2, #1
   15126:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1512a:	f7fb fac5 	bl	106b8 <mem_init>
	mem_init(mem_conn_tx.pool, CONN_TX_BUF_SIZE, CONFIG_BT_CTLR_TX_BUFFERS,
   1512e:	4b14      	ldr	r3, [pc, #80]	; (15180 <init_reset+0x64>)
   15130:	2203      	movs	r2, #3
   15132:	1d18      	adds	r0, r3, #4
   15134:	2124      	movs	r1, #36	; 0x24
   15136:	f7fb fabf 	bl	106b8 <mem_init>
	mem_init(mem_conn_tx_ctrl.pool, CONN_TX_CTRL_BUF_SIZE,
   1513a:	4b12      	ldr	r3, [pc, #72]	; (15184 <init_reset+0x68>)
   1513c:	2204      	movs	r2, #4
   1513e:	1898      	adds	r0, r3, r2
   15140:	2120      	movs	r1, #32
   15142:	f7fb fab9 	bl	106b8 <mem_init>
	mem_init(mem_link_tx.pool, sizeof(memq_link_t),
   15146:	4b10      	ldr	r3, [pc, #64]	; (15188 <init_reset+0x6c>)
   15148:	2207      	movs	r2, #7
   1514a:	1d18      	adds	r0, r3, #4
   1514c:	2108      	movs	r1, #8
   1514e:	f7fb fab3 	bl	106b8 <mem_init>
	default_phy_tx |= PHY_2M;
   15152:	490e      	ldr	r1, [pc, #56]	; (1518c <init_reset+0x70>)
	default_phy_rx |= PHY_2M;
   15154:	4a0e      	ldr	r2, [pc, #56]	; (15190 <init_reset+0x74>)
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15156:	480f      	ldr	r0, [pc, #60]	; (15194 <init_reset+0x78>)
	default_phy_tx |= PHY_2M;
   15158:	2303      	movs	r3, #3
	default_tx_octets = PDU_DC_PAYLOAD_SIZE_MIN;
   1515a:	f04f 0c1b 	mov.w	ip, #27
   1515e:	f8a4 c000 	strh.w	ip, [r4]
	default_phy_tx |= PHY_2M;
   15162:	700b      	strb	r3, [r1, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   15164:	f44f 7ca4 	mov.w	ip, #328	; 0x148
	default_phy_rx |= PHY_2M;
   15168:	7013      	strb	r3, [r2, #0]
	default_tx_time = PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M);
   1516a:	f8a0 c000 	strh.w	ip, [r0]
}
   1516e:	2000      	movs	r0, #0
   15170:	bd10      	pop	{r4, pc}
   15172:	bf00      	nop
   15174:	2000e228 	.word	0x2000e228
   15178:	2000e22c 	.word	0x2000e22c
   1517c:	2000ed76 	.word	0x2000ed76
   15180:	2000e414 	.word	0x2000e414
   15184:	2000e484 	.word	0x2000e484
   15188:	2000e508 	.word	0x2000e508
   1518c:	2000f317 	.word	0x2000f317
   15190:	2000f316 	.word	0x2000f316
   15194:	2000ed78 	.word	0x2000ed78

00015198 <tx_lll_flush>:
{
   15198:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct ll_conn *conn = (void *)HDR_LLL2EVT(param);
   1519c:	f8d0 8000 	ldr.w	r8, [r0]
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   151a0:	4934      	ldr	r1, [pc, #208]	; (15274 <tx_lll_flush+0xdc>)
{
   151a2:	b083      	sub	sp, #12
   151a4:	4605      	mov	r5, r0
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   151a6:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   151aa:	4640      	mov	r0, r8
   151ac:	f7fb faea 	bl	10784 <mem_index_get>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   151b0:	f105 064c 	add.w	r6, r5, #76	; 0x4c
	lll_conn_flush(handle, lll);
   151b4:	4629      	mov	r1, r5
   151b6:	f006 fe1d 	bl	1bdf4 <lll_conn_flush>
	link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   151ba:	6d28      	ldr	r0, [r5, #80]	; 0x50
   151bc:	aa01      	add	r2, sp, #4
   151be:	4631      	mov	r1, r6
   151c0:	f7fb fb20 	bl	10804 <memq_dequeue>
	while (link) {
   151c4:	b328      	cbz	r0, 15212 <tx_lll_flush+0x7a>
   151c6:	4c2c      	ldr	r4, [pc, #176]	; (15278 <tx_lll_flush+0xe0>)
		lll_tx->handle = 0xFFFF;
   151c8:	f64f 77ff 	movw	r7, #65535	; 0xffff
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   151cc:	f104 0904 	add.w	r9, r4, #4
		idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   151d0:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   151d2:	f894 c001 	ldrb.w	ip, [r4, #1]
   151d6:	78a2      	ldrb	r2, [r4, #2]
	last = last + 1;
   151d8:	1c4b      	adds	r3, r1, #1
   151da:	b2db      	uxtb	r3, r3
		last = 0U;
   151dc:	459c      	cmp	ip, r3
   151de:	bf08      	it	eq
   151e0:	2300      	moveq	r3, #0
	if (last == first) {
   151e2:	429a      	cmp	r2, r3
   151e4:	d035      	beq.n	15252 <tx_lll_flush+0xba>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   151e6:	7822      	ldrb	r2, [r4, #0]
   151e8:	fb12 f201 	smulbb	r2, r2, r1
		LL_ASSERT(lll_tx);
   151ec:	eb19 0c02 	adds.w	ip, r9, r2
   151f0:	d02f      	beq.n	15252 <tx_lll_flush+0xba>
		lll_tx->node = tx;
   151f2:	9901      	ldr	r1, [sp, #4]
		lll_tx->handle = 0xFFFF;
   151f4:	f829 7002 	strh.w	r7, [r9, r2]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   151f8:	680a      	ldr	r2, [r1, #0]
		lll_tx->node = tx;
   151fa:	f8cc 1004 	str.w	r1, [ip, #4]
		link->next = tx->next; /* Indicates ctrl pool or data pool */
   151fe:	6002      	str	r2, [r0, #0]
		tx->next = link;
   15200:	6008      	str	r0, [r1, #0]
		link = memq_dequeue(lll->memq_tx.tail, &lll->memq_tx.head,
   15202:	6d28      	ldr	r0, [r5, #80]	; 0x50
	*last = idx; /* Commit: Update write index */
   15204:	70e3      	strb	r3, [r4, #3]
   15206:	aa01      	add	r2, sp, #4
   15208:	4631      	mov	r1, r6
   1520a:	f7fb fafb 	bl	10804 <memq_dequeue>
	while (link) {
   1520e:	2800      	cmp	r0, #0
   15210:	d1de      	bne.n	151d0 <tx_lll_flush+0x38>
	LL_ASSERT(rx->hdr.link);
   15212:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
	rx = (void *)&conn->llcp_terminate.node_rx;
   15216:	f508 749e 	add.w	r4, r8, #316	; 0x13c
	LL_ASSERT(rx->hdr.link);
   1521a:	b150      	cbz	r0, 15232 <tx_lll_flush+0x9a>
	rx->hdr.link = NULL;
   1521c:	2300      	movs	r3, #0
	ull_rx_put(link, rx);
   1521e:	4621      	mov	r1, r4
	rx->hdr.link = NULL;
   15220:	f8c8 313c 	str.w	r3, [r8, #316]	; 0x13c
	ull_rx_put(link, rx);
   15224:	f7ff fa32 	bl	1468c <ull_rx_put>
	ull_rx_sched();
   15228:	f7ff fa40 	bl	146ac <ull_rx_sched>
}
   1522c:	b003      	add	sp, #12
   1522e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	LL_ASSERT(rx->hdr.link);
   15232:	4a12      	ldr	r2, [pc, #72]	; (1527c <tx_lll_flush+0xe4>)
   15234:	4912      	ldr	r1, [pc, #72]	; (15280 <tx_lll_flush+0xe8>)
   15236:	4813      	ldr	r0, [pc, #76]	; (15284 <tx_lll_flush+0xec>)
   15238:	f240 7394 	movw	r3, #1940	; 0x794
   1523c:	f00c fc72 	bl	21b24 <printk>
   15240:	4040      	eors	r0, r0
   15242:	f380 8811 	msr	BASEPRI, r0
   15246:	f04f 0003 	mov.w	r0, #3
   1524a:	df02      	svc	2
	link = rx->hdr.link;
   1524c:	f8d8 013c 	ldr.w	r0, [r8, #316]	; 0x13c
   15250:	e7e4      	b.n	1521c <tx_lll_flush+0x84>
		LL_ASSERT(lll_tx);
   15252:	4a0a      	ldr	r2, [pc, #40]	; (1527c <tx_lll_flush+0xe4>)
   15254:	490c      	ldr	r1, [pc, #48]	; (15288 <tx_lll_flush+0xf0>)
   15256:	480b      	ldr	r0, [pc, #44]	; (15284 <tx_lll_flush+0xec>)
   15258:	f44f 63f0 	mov.w	r3, #1920	; 0x780
   1525c:	f00c fc62 	bl	21b24 <printk>
   15260:	4040      	eors	r0, r0
   15262:	f380 8811 	msr	BASEPRI, r0
   15266:	f04f 0003 	mov.w	r0, #3
   1526a:	df02      	svc	2
		lll_tx->handle = 0xFFFF;
   1526c:	2300      	movs	r3, #0
   1526e:	801b      	strh	r3, [r3, #0]
   15270:	deff      	udf	#255	; 0xff
   15272:	bf00      	nop
   15274:	2000e22c 	.word	0x2000e22c
   15278:	20000594 	.word	0x20000594
   1527c:	000288c0 	.word	0x000288c0
   15280:	00028908 	.word	0x00028908
   15284:	00028404 	.word	0x00028404
   15288:	00028900 	.word	0x00028900

0001528c <ticker_op_stop_cb>:
{
   1528c:	b510      	push	{r4, lr}
   1528e:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15290:	b9b0      	cbnz	r0, 152c0 <ticker_op_stop_cb+0x34>
	mfy.param = param;
   15292:	4b12      	ldr	r3, [pc, #72]	; (152dc <ticker_op_stop_cb+0x50>)
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   15294:	2200      	movs	r2, #0
   15296:	4611      	mov	r1, r2
   15298:	2002      	movs	r0, #2
	mfy.param = param;
   1529a:	609c      	str	r4, [r3, #8]
	retval = mayfly_enqueue(TICKER_USER_ID_ULL_LOW, TICKER_USER_ID_LLL, 0,
   1529c:	f7fb fb14 	bl	108c8 <mayfly_enqueue>
	LL_ASSERT(!retval);
   152a0:	b900      	cbnz	r0, 152a4 <ticker_op_stop_cb+0x18>
}
   152a2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!retval);
   152a4:	4a0e      	ldr	r2, [pc, #56]	; (152e0 <ticker_op_stop_cb+0x54>)
   152a6:	490f      	ldr	r1, [pc, #60]	; (152e4 <ticker_op_stop_cb+0x58>)
   152a8:	480f      	ldr	r0, [pc, #60]	; (152e8 <ticker_op_stop_cb+0x5c>)
   152aa:	f44f 63dd 	mov.w	r3, #1768	; 0x6e8
   152ae:	f00c fc39 	bl	21b24 <printk>
   152b2:	4040      	eors	r0, r0
   152b4:	f380 8811 	msr	BASEPRI, r0
   152b8:	f04f 0003 	mov.w	r0, #3
   152bc:	df02      	svc	2
}
   152be:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   152c0:	4a07      	ldr	r2, [pc, #28]	; (152e0 <ticker_op_stop_cb+0x54>)
   152c2:	490a      	ldr	r1, [pc, #40]	; (152ec <ticker_op_stop_cb+0x60>)
   152c4:	4808      	ldr	r0, [pc, #32]	; (152e8 <ticker_op_stop_cb+0x5c>)
   152c6:	f240 63e1 	movw	r3, #1761	; 0x6e1
   152ca:	f00c fc2b 	bl	21b24 <printk>
   152ce:	4040      	eors	r0, r0
   152d0:	f380 8811 	msr	BASEPRI, r0
   152d4:	f04f 0003 	mov.w	r0, #3
   152d8:	df02      	svc	2
   152da:	e7da      	b.n	15292 <ticker_op_stop_cb+0x6>
   152dc:	200005fc 	.word	0x200005fc
   152e0:	000288c0 	.word	0x000288c0
   152e4:	000286c0 	.word	0x000286c0
   152e8:	00028404 	.word	0x00028404
   152ec:	00028918 	.word	0x00028918

000152f0 <ticker_start_conn_op_cb>:
{
   152f0:	b510      	push	{r4, lr}
   152f2:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   152f4:	b990      	cbnz	r0, 1531c <ticker_start_conn_op_cb+0x2c>
	p = ull_update_unmark(param);
   152f6:	4620      	mov	r0, r4
   152f8:	f7ff f904 	bl	14504 <ull_update_unmark>
	LL_ASSERT(p == param);
   152fc:	4284      	cmp	r4, r0
   152fe:	d00c      	beq.n	1531a <ticker_start_conn_op_cb+0x2a>
   15300:	4a0d      	ldr	r2, [pc, #52]	; (15338 <ticker_start_conn_op_cb+0x48>)
   15302:	490e      	ldr	r1, [pc, #56]	; (1533c <ticker_start_conn_op_cb+0x4c>)
   15304:	480e      	ldr	r0, [pc, #56]	; (15340 <ticker_start_conn_op_cb+0x50>)
   15306:	f44f 63db 	mov.w	r3, #1752	; 0x6d8
   1530a:	f00c fc0b 	bl	21b24 <printk>
   1530e:	4040      	eors	r0, r0
   15310:	f380 8811 	msr	BASEPRI, r0
   15314:	f04f 0003 	mov.w	r0, #3
   15318:	df02      	svc	2
}
   1531a:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1531c:	4a06      	ldr	r2, [pc, #24]	; (15338 <ticker_start_conn_op_cb+0x48>)
   1531e:	4909      	ldr	r1, [pc, #36]	; (15344 <ticker_start_conn_op_cb+0x54>)
   15320:	4807      	ldr	r0, [pc, #28]	; (15340 <ticker_start_conn_op_cb+0x50>)
   15322:	f240 63d5 	movw	r3, #1749	; 0x6d5
   15326:	f00c fbfd 	bl	21b24 <printk>
   1532a:	4040      	eors	r0, r0
   1532c:	f380 8811 	msr	BASEPRI, r0
   15330:	f04f 0003 	mov.w	r0, #3
   15334:	df02      	svc	2
   15336:	e7de      	b.n	152f6 <ticker_start_conn_op_cb+0x6>
   15338:	000288c0 	.word	0x000288c0
   1533c:	00028924 	.word	0x00028924
   15340:	00028404 	.word	0x00028404
   15344:	00028918 	.word	0x00028918

00015348 <ticker_stop_conn_op_cb>:
{
   15348:	b510      	push	{r4, lr}
   1534a:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1534c:	b990      	cbnz	r0, 15374 <ticker_stop_conn_op_cb+0x2c>
	p = ull_update_mark(param);
   1534e:	4620      	mov	r0, r4
   15350:	f7ff f8ce 	bl	144f0 <ull_update_mark>
	LL_ASSERT(p == param);
   15354:	4284      	cmp	r4, r0
   15356:	d00c      	beq.n	15372 <ticker_stop_conn_op_cb+0x2a>
   15358:	4a0d      	ldr	r2, [pc, #52]	; (15390 <ticker_stop_conn_op_cb+0x48>)
   1535a:	490e      	ldr	r1, [pc, #56]	; (15394 <ticker_stop_conn_op_cb+0x4c>)
   1535c:	480e      	ldr	r0, [pc, #56]	; (15398 <ticker_stop_conn_op_cb+0x50>)
   1535e:	f240 63ce 	movw	r3, #1742	; 0x6ce
   15362:	f00c fbdf 	bl	21b24 <printk>
   15366:	4040      	eors	r0, r0
   15368:	f380 8811 	msr	BASEPRI, r0
   1536c:	f04f 0003 	mov.w	r0, #3
   15370:	df02      	svc	2
}
   15372:	bd10      	pop	{r4, pc}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   15374:	4a06      	ldr	r2, [pc, #24]	; (15390 <ticker_stop_conn_op_cb+0x48>)
   15376:	4909      	ldr	r1, [pc, #36]	; (1539c <ticker_stop_conn_op_cb+0x54>)
   15378:	4807      	ldr	r0, [pc, #28]	; (15398 <ticker_stop_conn_op_cb+0x50>)
   1537a:	f240 63cb 	movw	r3, #1739	; 0x6cb
   1537e:	f00c fbd1 	bl	21b24 <printk>
   15382:	4040      	eors	r0, r0
   15384:	f380 8811 	msr	BASEPRI, r0
   15388:	f04f 0003 	mov.w	r0, #3
   1538c:	df02      	svc	2
   1538e:	e7de      	b.n	1534e <ticker_stop_conn_op_cb+0x6>
   15390:	000288c0 	.word	0x000288c0
   15394:	00028924 	.word	0x00028924
   15398:	00028404 	.word	0x00028404
   1539c:	00028918 	.word	0x00028918

000153a0 <ticker_update_conn_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   153a0:	b900      	cbnz	r0, 153a4 <ticker_update_conn_op_cb+0x4>
   153a2:	4770      	bx	lr
{
   153a4:	b510      	push	{r4, lr}
   153a6:	460c      	mov	r4, r1
	LL_ASSERT(status == TICKER_STATUS_SUCCESS ||
   153a8:	f7ff f8b8 	bl	1451c <ull_update_mark_get>
   153ac:	4284      	cmp	r4, r0
   153ae:	d010      	beq.n	153d2 <ticker_update_conn_op_cb+0x32>
   153b0:	f7ff f898 	bl	144e4 <ull_disable_mark_get>
   153b4:	4284      	cmp	r4, r0
   153b6:	d00c      	beq.n	153d2 <ticker_update_conn_op_cb+0x32>
   153b8:	4a06      	ldr	r2, [pc, #24]	; (153d4 <ticker_update_conn_op_cb+0x34>)
   153ba:	4907      	ldr	r1, [pc, #28]	; (153d8 <ticker_update_conn_op_cb+0x38>)
   153bc:	4807      	ldr	r0, [pc, #28]	; (153dc <ticker_update_conn_op_cb+0x3c>)
   153be:	f240 63c2 	movw	r3, #1730	; 0x6c2
   153c2:	f00c fbaf 	bl	21b24 <printk>
   153c6:	4040      	eors	r0, r0
   153c8:	f380 8811 	msr	BASEPRI, r0
   153cc:	f04f 0003 	mov.w	r0, #3
   153d0:	df02      	svc	2
}
   153d2:	bd10      	pop	{r4, pc}
   153d4:	000288c0 	.word	0x000288c0
   153d8:	00028930 	.word	0x00028930
   153dc:	00028404 	.word	0x00028404

000153e0 <reject_ext_ind_send>:
}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ) || defined(CONFIG_BT_CTLR_PHY)
static int reject_ext_ind_send(struct ll_conn *conn, struct node_rx_pdu *rx,
			       uint8_t reject_opcode, uint8_t error_code)
{
   153e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   153e2:	4607      	mov	r7, r0
	struct pdu_data *pdu_ctrl_tx;
	struct node_tx *tx;

	/* acquire tx mem */
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   153e4:	4825      	ldr	r0, [pc, #148]	; (1547c <reject_ext_ind_send+0x9c>)
{
   153e6:	460c      	mov	r4, r1
   153e8:	4616      	mov	r6, r2
   153ea:	461d      	mov	r5, r3
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   153ec:	f7fb f994 	bl	10718 <mem_acquire>
	if (!tx) {
   153f0:	2800      	cmp	r0, #0
   153f2:	d040      	beq.n	15476 <reject_ext_ind_send+0x96>
		return -ENOBUFS;
	}

	pdu_ctrl_tx = (void *)tx->pdu;
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   153f4:	2303      	movs	r3, #3
		sizeof(struct pdu_data_llctrl_reject_ext_ind);
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   153f6:	2211      	movs	r2, #17
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   153f8:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   153fa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   153fe:	71c2      	strb	r2, [r0, #7]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15400:	7902      	ldrb	r2, [r0, #4]
	pdu_ctrl_tx->llctrl.reject_ext_ind.reject_opcode = reject_opcode;
   15402:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15404:	f042 0203 	orr.w	r2, r2, #3
	pdu_ctrl_tx->llctrl.reject_ext_ind.error_code = error_code;
   15408:	7245      	strb	r5, [r0, #9]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1540a:	7102      	strb	r2, [r0, #4]
	if (
   1540c:	b11b      	cbz	r3, 15416 <reject_ext_ind_send+0x36>
	    !conn->llcp_enc.pause_tx &&
   1540e:	f897 215e 	ldrb.w	r2, [r7, #350]	; 0x15e
	    conn->tx_head &&
   15412:	0791      	lsls	r1, r2, #30
   15414:	d50f      	bpl.n	15436 <reject_ext_ind_send+0x56>
		if (!conn->tx_ctrl) {
   15416:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   1541a:	b332      	cbz	r2, 1546a <reject_ext_ind_send+0x8a>
	tx->next = conn->tx_ctrl_last->next;
   1541c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
   15420:	681a      	ldr	r2, [r3, #0]
   15422:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   15424:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15426:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15428:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
	if (!tx->next) {
   1542c:	b1d3      	cbz	r3, 15464 <reject_ext_ind_send+0x84>

	ctrl_tx_enqueue(conn, tx);

	/* Mark for buffer for release */
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1542e:	2301      	movs	r3, #1
   15430:	7123      	strb	r3, [r4, #4]

	return 0;
   15432:	2000      	movs	r0, #0
}
   15434:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	    !conn->llcp_phy.pause_tx &&
   15436:	f897 21b7 	ldrb.w	r2, [r7, #439]	; 0x1b7
   1543a:	07d2      	lsls	r2, r2, #31
   1543c:	d4eb      	bmi.n	15416 <reject_ext_ind_send+0x36>
		if (conn->tx_head == conn->tx_data) {
   1543e:	f8d7 21c8 	ldr.w	r2, [r7, #456]	; 0x1c8
   15442:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15444:	bf04      	itt	eq
   15446:	681a      	ldreq	r2, [r3, #0]
   15448:	f8c7 21c8 	streq.w	r2, [r7, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1544c:	f8d7 21c0 	ldr.w	r2, [r7, #448]	; 0x1c0
   15450:	2a00      	cmp	r2, #0
   15452:	d1e3      	bne.n	1541c <reject_ext_ind_send+0x3c>
			tx->next = conn->tx_head->next;
   15454:	681a      	ldr	r2, [r3, #0]
   15456:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15458:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1545a:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1545c:	e9c7 0070 	strd	r0, r0, [r7, #448]	; 0x1c0
	if (!tx->next) {
   15460:	2b00      	cmp	r3, #0
   15462:	d1e4      	bne.n	1542e <reject_ext_ind_send+0x4e>
		conn->tx_data_last = tx;
   15464:	f8c7 01cc 	str.w	r0, [r7, #460]	; 0x1cc
   15468:	e7e1      	b.n	1542e <reject_ext_ind_send+0x4e>
			tx->next = conn->tx_head;
   1546a:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1546c:	e9c7 006f 	strd	r0, r0, [r7, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   15470:	f8c7 01c4 	str.w	r0, [r7, #452]	; 0x1c4
   15474:	e7da      	b.n	1542c <reject_ext_ind_send+0x4c>
		return -ENOBUFS;
   15476:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   1547a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1547c:	2000e484 	.word	0x2000e484

00015480 <ctrl_tx_sec_enqueue>:
{
   15480:	b538      	push	{r3, r4, r5, lr}
	if (conn->llcp_enc.pause_tx) {
   15482:	f890 315e 	ldrb.w	r3, [r0, #350]	; 0x15e
   15486:	079a      	lsls	r2, r3, #30
{
   15488:	4604      	mov	r4, r0
   1548a:	460d      	mov	r5, r1
	if (conn->llcp_enc.pause_tx) {
   1548c:	d50c      	bpl.n	154a8 <ctrl_tx_sec_enqueue+0x28>
		if (!conn->tx_ctrl) {
   1548e:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   15492:	2b00      	cmp	r3, #0
   15494:	d04e      	beq.n	15534 <ctrl_tx_sec_enqueue+0xb4>
			tx->next = conn->tx_ctrl_last->next;
   15496:	f8d0 31c4 	ldr.w	r3, [r0, #452]	; 0x1c4
   1549a:	681a      	ldr	r2, [r3, #0]
   1549c:	600a      	str	r2, [r1, #0]
			conn->tx_ctrl_last->next = tx;
   1549e:	6019      	str	r1, [r3, #0]
		if (!tx->next) {
   154a0:	682b      	ldr	r3, [r5, #0]
   154a2:	2b00      	cmp	r3, #0
   154a4:	d034      	beq.n	15510 <ctrl_tx_sec_enqueue+0x90>
}
   154a6:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->tx_head) {
   154a8:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
   154ac:	b342      	cbz	r2, 15500 <ctrl_tx_sec_enqueue+0x80>
			if ((conn->llcp_req != conn->llcp_ack) &&
   154ae:	f890 10e8 	ldrb.w	r1, [r0, #232]	; 0xe8
   154b2:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   154b6:	4299      	cmp	r1, r3
   154b8:	d003      	beq.n	154c2 <ctrl_tx_sec_enqueue+0x42>
   154ba:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   154be:	2b03      	cmp	r3, #3
   154c0:	d040      	beq.n	15544 <ctrl_tx_sec_enqueue+0xc4>
	    !conn->llcp_phy.pause_tx &&
   154c2:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   154c6:	f013 0301 	ands.w	r3, r3, #1
   154ca:	d124      	bne.n	15516 <ctrl_tx_sec_enqueue+0x96>
		if (conn->tx_head == conn->tx_data) {
   154cc:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   154d0:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   154d2:	bf04      	itt	eq
   154d4:	6811      	ldreq	r1, [r2, #0]
   154d6:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   154da:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   154de:	2900      	cmp	r1, #0
   154e0:	d053      	beq.n	1558a <ctrl_tx_sec_enqueue+0x10a>
			LL_ASSERT(!pause);
   154e2:	b1e3      	cbz	r3, 1551e <ctrl_tx_sec_enqueue+0x9e>
   154e4:	4a32      	ldr	r2, [pc, #200]	; (155b0 <ctrl_tx_sec_enqueue+0x130>)
   154e6:	4933      	ldr	r1, [pc, #204]	; (155b4 <ctrl_tx_sec_enqueue+0x134>)
   154e8:	4833      	ldr	r0, [pc, #204]	; (155b8 <ctrl_tx_sec_enqueue+0x138>)
   154ea:	f240 73ef 	movw	r3, #2031	; 0x7ef
   154ee:	f00c fb19 	bl	21b24 <printk>
   154f2:	4040      	eors	r0, r0
   154f4:	f380 8811 	msr	BASEPRI, r0
   154f8:	f04f 0003 	mov.w	r0, #3
   154fc:	df02      	svc	2
	tx->next = conn->tx_ctrl_last->next;
   154fe:	e00e      	b.n	1551e <ctrl_tx_sec_enqueue+0x9e>
		if (!conn->tx_ctrl) {
   15500:	f8d0 31c0 	ldr.w	r3, [r0, #448]	; 0x1c0
   15504:	b95b      	cbnz	r3, 1551e <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   15506:	600b      	str	r3, [r1, #0]
				conn->tx_ctrl = tx;
   15508:	e9c0 116f 	strd	r1, r1, [r0, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1550c:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
			conn->tx_data_last = tx;
   15510:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   15514:	bd38      	pop	{r3, r4, r5, pc}
		if (!conn->tx_ctrl) {
   15516:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   1551a:	2b00      	cmp	r3, #0
   1551c:	d040      	beq.n	155a0 <ctrl_tx_sec_enqueue+0x120>
	tx->next = conn->tx_ctrl_last->next;
   1551e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   15522:	681a      	ldr	r2, [r3, #0]
   15524:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   15526:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15528:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   1552a:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
		if (!tx->next) {
   1552e:	2b00      	cmp	r3, #0
   15530:	d1b9      	bne.n	154a6 <ctrl_tx_sec_enqueue+0x26>
   15532:	e7ed      	b.n	15510 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   15534:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   15538:	600b      	str	r3, [r1, #0]
			conn->tx_head = tx;
   1553a:	f8c4 11bc 	str.w	r1, [r4, #444]	; 0x1bc
		if (!tx->next) {
   1553e:	2b00      	cmp	r3, #0
   15540:	d1b1      	bne.n	154a6 <ctrl_tx_sec_enqueue+0x26>
   15542:	e7e5      	b.n	15510 <ctrl_tx_sec_enqueue+0x90>
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15544:	7913      	ldrb	r3, [r2, #4]
			    (conn->llcp_type == LLCP_ENCRYPTION) &&
   15546:	f003 0303 	and.w	r3, r3, #3
   1554a:	2b03      	cmp	r3, #3
   1554c:	d1b9      	bne.n	154c2 <ctrl_tx_sec_enqueue+0x42>
			    ((pdu_data_tx->llctrl.opcode ==
   1554e:	79d3      	ldrb	r3, [r2, #7]
			    (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   15550:	2b03      	cmp	r3, #3
   15552:	d001      	beq.n	15558 <ctrl_tx_sec_enqueue+0xd8>
			      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   15554:	2b0a      	cmp	r3, #10
   15556:	d1b4      	bne.n	154c2 <ctrl_tx_sec_enqueue+0x42>
	    !conn->llcp_phy.pause_tx &&
   15558:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1555c:	07db      	lsls	r3, r3, #31
   1555e:	d525      	bpl.n	155ac <ctrl_tx_sec_enqueue+0x12c>
		if (!conn->tx_ctrl) {
   15560:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   15564:	b16b      	cbz	r3, 15582 <ctrl_tx_sec_enqueue+0x102>
			LL_ASSERT(!pause);
   15566:	4a12      	ldr	r2, [pc, #72]	; (155b0 <ctrl_tx_sec_enqueue+0x130>)
   15568:	4912      	ldr	r1, [pc, #72]	; (155b4 <ctrl_tx_sec_enqueue+0x134>)
   1556a:	4813      	ldr	r0, [pc, #76]	; (155b8 <ctrl_tx_sec_enqueue+0x138>)
   1556c:	f640 0301 	movw	r3, #2049	; 0x801
   15570:	f00c fad8 	bl	21b24 <printk>
   15574:	4040      	eors	r0, r0
   15576:	f380 8811 	msr	BASEPRI, r0
   1557a:	f04f 0003 	mov.w	r0, #3
   1557e:	df02      	svc	2
   15580:	e7cd      	b.n	1551e <ctrl_tx_sec_enqueue+0x9e>
			tx->next = conn->tx_head;
   15582:	602a      	str	r2, [r5, #0]
			conn->tx_head = tx;
   15584:	f8c4 51bc 	str.w	r5, [r4, #444]	; 0x1bc
}
   15588:	bd38      	pop	{r3, r4, r5, pc}
			tx->next = conn->tx_head->next;
   1558a:	6811      	ldr	r1, [r2, #0]
   1558c:	6029      	str	r1, [r5, #0]
			conn->tx_head->next = tx;
   1558e:	6015      	str	r5, [r2, #0]
			if (!pause) {
   15590:	2b00      	cmp	r3, #0
   15592:	d185      	bne.n	154a0 <ctrl_tx_sec_enqueue+0x20>
	if (!tx->next) {
   15594:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   15596:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
		if (!tx->next) {
   1559a:	2b00      	cmp	r3, #0
   1559c:	d183      	bne.n	154a6 <ctrl_tx_sec_enqueue+0x26>
   1559e:	e7b7      	b.n	15510 <ctrl_tx_sec_enqueue+0x90>
			tx->next = conn->tx_head;
   155a0:	602a      	str	r2, [r5, #0]
				conn->tx_ctrl = tx;
   155a2:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   155a6:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
}
   155aa:	bd38      	pop	{r3, r4, r5, pc}
				pause = true;
   155ac:	2301      	movs	r3, #1
   155ae:	e78d      	b.n	154cc <ctrl_tx_sec_enqueue+0x4c>
   155b0:	000288c0 	.word	0x000288c0
   155b4:	00028984 	.word	0x00028984
   155b8:	00028404 	.word	0x00028404

000155bc <event_len_prep>:
{
   155bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	switch (conn->llcp_length.state) {
   155be:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   155c2:	f003 0207 	and.w	r2, r3, #7
{
   155c6:	4604      	mov	r4, r0
   155c8:	2a06      	cmp	r2, #6
   155ca:	f200 80c6 	bhi.w	1575a <event_len_prep+0x19e>
   155ce:	e8df f002 	tbb	[pc, r2]
   155d2:	4804      	.short	0x4804
   155d4:	49494848 	.word	0x49494848
   155d8:	48          	.byte	0x48
   155d9:	00          	.byte	0x00
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   155da:	4867      	ldr	r0, [pc, #412]	; (15778 <event_len_prep+0x1bc>)
   155dc:	f7fb f89c 	bl	10718 <mem_acquire>
		if (!tx) {
   155e0:	2800      	cmp	r0, #0
   155e2:	d03e      	beq.n	15662 <event_len_prep+0xa6>
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   155e4:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   155e8:	f8b4 21aa 	ldrh.w	r2, [r4, #426]	; 0x1aa
		conn->default_tx_time = conn->llcp_length.tx_time;
   155ec:	f8b4 51ae 	ldrh.w	r5, [r4, #430]	; 0x1ae
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   155f0:	f8a4 20d6 	strh.w	r2, [r4, #214]	; 0xd6
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   155f4:	2301      	movs	r3, #1
   155f6:	f363 0102 	bfi	r1, r3, #0, #3
		conn->default_tx_time = conn->llcp_length.tx_time;
   155fa:	f8a4 50d8 	strh.w	r5, [r4, #216]	; 0xd8
		conn->llcp_length.state = LLCP_LENGTH_STATE_REQ_ACK_WAIT;
   155fe:	f884 11a6 	strb.w	r1, [r4, #422]	; 0x1a6
		lr->max_tx_octets = sys_cpu_to_le16(conn->default_tx_octets);
   15602:	8182      	strh	r2, [r0, #12]
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   15604:	72c3      	strb	r3, [r0, #11]
   15606:	2248      	movs	r2, #72	; 0x48
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   15608:	73c3      	strb	r3, [r0, #15]
		pdu_ctrl_tx->len =
   1560a:	2309      	movs	r3, #9
		lr->max_rx_time = sys_cpu_to_le16(rx_time);
   1560c:	7282      	strb	r2, [r0, #10]
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   1560e:	7382      	strb	r2, [r0, #14]
		pdu_ctrl_tx->len =
   15610:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15612:	2214      	movs	r2, #20
	    conn->tx_head &&
   15614:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_REQ;
   15618:	71c2      	strb	r2, [r0, #7]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   1561a:	221b      	movs	r2, #27
   1561c:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1561e:	7902      	ldrb	r2, [r0, #4]
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   15620:	2100      	movs	r1, #0
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15622:	f042 0203 	orr.w	r2, r2, #3
		lr->max_rx_octets = sys_cpu_to_le16(LL_LENGTH_OCTETS_RX_MAX);
   15626:	7241      	strb	r1, [r0, #9]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15628:	7102      	strb	r2, [r0, #4]
	if (
   1562a:	b13b      	cbz	r3, 1563c <event_len_prep+0x80>
	    !conn->llcp_enc.pause_tx &&
   1562c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   15630:	0791      	lsls	r1, r2, #30
   15632:	d403      	bmi.n	1563c <event_len_prep+0x80>
	    !conn->llcp_phy.pause_tx &&
   15634:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   15638:	07d2      	lsls	r2, r2, #31
   1563a:	d576      	bpl.n	1572a <event_len_prep+0x16e>
		if (!conn->tx_ctrl) {
   1563c:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15640:	2a00      	cmp	r2, #0
   15642:	f000 8084 	beq.w	1574e <event_len_prep+0x192>
	tx->next = conn->tx_ctrl_last->next;
   15646:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1564a:	681a      	ldr	r2, [r3, #0]
   1564c:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1564e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15650:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   15652:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   15656:	2b00      	cmp	r3, #0
   15658:	d056      	beq.n	15708 <event_len_prep+0x14c>
		conn->procedure_expire = conn->procedure_reload;
   1565a:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   1565e:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   15662:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15664:	f003 0207 	and.w	r2, r3, #7
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   15668:	f8b0 c1a8 	ldrh.w	ip, [r0, #424]	; 0x1a8
		lll->max_rx_time = conn->llcp_length.rx_time;
   1566c:	f8b0 11ac 	ldrh.w	r1, [r0, #428]	; 0x1ac
		tx_octets = conn->llcp_length.tx_octets;
   15670:	f8b0 71aa 	ldrh.w	r7, [r0, #426]	; 0x1aa
		uint16_t tx_time = conn->llcp_length.tx_time;
   15674:	f8b0 61ae 	ldrh.w	r6, [r0, #430]	; 0x1ae
		lll->max_rx_octets = conn->llcp_length.rx_octets;
   15678:	f8a0 c05e 	strh.w	ip, [r0, #94]	; 0x5e
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   1567c:	2a04      	cmp	r2, #4
		lll->max_rx_time = conn->llcp_length.rx_time;
   1567e:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
		if (conn->llcp_length.state == LLCP_LENGTH_STATE_RESIZE) {
   15682:	d024      	beq.n	156ce <event_len_prep+0x112>
			conn->llcp_length.state =
   15684:	2206      	movs	r2, #6
   15686:	f362 0302 	bfi	r3, r2, #0, #3
   1568a:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
		rx = conn->llcp_rx;
   1568e:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   15692:	b335      	cbz	r5, 156e2 <event_len_prep+0x126>
   15694:	6828      	ldr	r0, [r5, #0]
   15696:	b320      	cbz	r0, 156e2 <event_len_prep+0x126>
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15698:	7f2b      	ldrb	r3, [r5, #28]
		conn->llcp_rx = rx->hdr.link->mem;
   1569a:	6842      	ldr	r2, [r0, #4]
   1569c:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   156a0:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.handle = conn->lll.handle;
   156a4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   156a6:	772b      	strb	r3, [r5, #28]
		pdu_ctrl_rx->len =
   156a8:	2309      	movs	r3, #9
		rx->hdr.handle = conn->lll.handle;
   156aa:	80ea      	strh	r2, [r5, #6]
		pdu_ctrl_rx->len =
   156ac:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   156ae:	2203      	movs	r2, #3
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   156b0:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   156b2:	8469      	strh	r1, [r5, #34]	; 0x22
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   156b4:	f8a5 c020 	strh.w	ip, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(tx_octets);
   156b8:	84af      	strh	r7, [r5, #36]	; 0x24
		lr->max_tx_time = sys_cpu_to_le16(tx_time);
   156ba:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   156bc:	4629      	mov	r1, r5
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   156be:	712a      	strb	r2, [r5, #4]
		pdu_ctrl_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   156c0:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   156c2:	f7fe fe33 	bl	1432c <ll_rx_put>
}
   156c6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		ll_rx_sched();
   156ca:	f7fe be39 	b.w	14340 <ll_rx_sched>
			if (!conn->llcp_length.cache.tx_octets) {
   156ce:	f8b0 21b0 	ldrh.w	r2, [r0, #432]	; 0x1b0
   156d2:	b9e2      	cbnz	r2, 1570e <event_len_prep+0x152>
				conn->llcp_length.ack = conn->llcp_length.req;
   156d4:	f890 31a4 	ldrb.w	r3, [r0, #420]	; 0x1a4
				conn->procedure_expire = 0U;
   156d8:	f8a0 20cc 	strh.w	r2, [r0, #204]	; 0xcc
				conn->llcp_length.ack = conn->llcp_length.req;
   156dc:	f880 31a5 	strb.w	r3, [r0, #421]	; 0x1a5
				conn->procedure_expire = 0U;
   156e0:	e7d5      	b.n	1568e <event_len_prep+0xd2>
		LL_ASSERT(rx && rx->hdr.link);
   156e2:	4a26      	ldr	r2, [pc, #152]	; (1577c <event_len_prep+0x1c0>)
   156e4:	4926      	ldr	r1, [pc, #152]	; (15780 <event_len_prep+0x1c4>)
   156e6:	4827      	ldr	r0, [pc, #156]	; (15784 <event_len_prep+0x1c8>)
   156e8:	f640 53f3 	movw	r3, #3571	; 0xdf3
   156ec:	f00c fa1a 	bl	21b24 <printk>
   156f0:	4040      	eors	r0, r0
   156f2:	f380 8811 	msr	BASEPRI, r0
   156f6:	f04f 0003 	mov.w	r0, #3
   156fa:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   156fc:	6828      	ldr	r0, [r5, #0]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   156fe:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   15702:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   15706:	e7c7      	b.n	15698 <event_len_prep+0xdc>
		conn->tx_data_last = tx;
   15708:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   1570c:	e7a5      	b.n	1565a <event_len_prep+0x9e>
				conn->llcp_length.tx_octets =
   1570e:	f8a0 21aa 	strh.w	r2, [r0, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   15712:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15714:	f362 0302 	bfi	r3, r2, #0, #3
   15718:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   1571c:	f8b0 31b2 	ldrh.w	r3, [r0, #434]	; 0x1b2
				conn->llcp_length.cache.tx_octets = 0;
   15720:	f8a0 21b0 	strh.w	r2, [r0, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   15724:	f8a0 31ae 	strh.w	r3, [r0, #430]	; 0x1ae
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15728:	e7b1      	b.n	1568e <event_len_prep+0xd2>
		if (conn->tx_head == conn->tx_data) {
   1572a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1572e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15730:	bf04      	itt	eq
   15732:	681a      	ldreq	r2, [r3, #0]
   15734:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15738:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1573c:	2a00      	cmp	r2, #0
   1573e:	d182      	bne.n	15646 <event_len_prep+0x8a>
			tx->next = conn->tx_head->next;
   15740:	681a      	ldr	r2, [r3, #0]
   15742:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   15744:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   15746:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   15748:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   1574c:	e783      	b.n	15656 <event_len_prep+0x9a>
			tx->next = conn->tx_head;
   1574e:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   15750:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   15754:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   15758:	e77d      	b.n	15656 <event_len_prep+0x9a>
		LL_ASSERT(0);
   1575a:	4a08      	ldr	r2, [pc, #32]	; (1577c <event_len_prep+0x1c0>)
   1575c:	490a      	ldr	r1, [pc, #40]	; (15788 <event_len_prep+0x1cc>)
   1575e:	4809      	ldr	r0, [pc, #36]	; (15784 <event_len_prep+0x1c8>)
   15760:	f640 631b 	movw	r3, #3611	; 0xe1b
   15764:	f00c f9de 	bl	21b24 <printk>
   15768:	4040      	eors	r0, r0
   1576a:	f380 8811 	msr	BASEPRI, r0
   1576e:	f04f 0003 	mov.w	r0, #3
   15772:	df02      	svc	2
}
   15774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   15776:	bf00      	nop
   15778:	2000e484 	.word	0x2000e484
   1577c:	000288c0 	.word	0x000288c0
   15780:	0002898c 	.word	0x0002898c
   15784:	00028404 	.word	0x00028404
   15788:	0002849c 	.word	0x0002849c

0001578c <event_phy_upd_ind_prep>:
{
   1578c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (conn->llcp.phy_upd_ind.initiate) {
   15790:	f890 30ec 	ldrb.w	r3, [r0, #236]	; 0xec
   15794:	f013 0201 	ands.w	r2, r3, #1
{
   15798:	4604      	mov	r4, r0
   1579a:	460e      	mov	r6, r1
	if (conn->llcp.phy_upd_ind.initiate) {
   1579c:	f040 808d 	bne.w	158ba <event_phy_upd_ind_prep+0x12e>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) &
   157a0:	f8b0 10ee 	ldrh.w	r1, [r0, #238]	; 0xee
   157a4:	1a71      	subs	r1, r6, r1
   157a6:	0409      	lsls	r1, r1, #16
   157a8:	f100 80d2 	bmi.w	15950 <event_phy_upd_ind_prep+0x1c4>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   157ac:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
   157b0:	2900      	cmp	r1, #0
   157b2:	469c      	mov	ip, r3
   157b4:	f2c0 80f7 	blt.w	159a6 <event_phy_upd_ind_prep+0x21a>
			conn->llcp_ack = conn->llcp_req;
   157b8:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   157bc:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
		old_tx = lll->phy_tx;
   157c0:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
		old_rx = lll->phy_rx;
   157c4:	f894 8065 	ldrb.w	r8, [r4, #101]	; 0x65
		uint16_t eff_rx_time = lll->max_rx_time;
   157c8:	f8b4 7062 	ldrh.w	r7, [r4, #98]	; 0x62
		if (conn->llcp.phy_upd_ind.tx) {
   157cc:	f013 0f1c 	tst.w	r3, #28
		old_tx = lll->phy_tx;
   157d0:	f002 0907 	and.w	r9, r2, #7
		old_rx = lll->phy_rx;
   157d4:	f008 0807 	and.w	r8, r8, #7
		if (conn->llcp.phy_upd_ind.tx) {
   157d8:	f040 80bc 	bne.w	15954 <event_phy_upd_ind_prep+0x1c8>
		uint16_t eff_tx_time = lll->max_tx_time;
   157dc:	f8b4 6060 	ldrh.w	r6, [r4, #96]	; 0x60
		if (conn->llcp.phy_upd_ind.rx) {
   157e0:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   157e4:	d008      	beq.n	157f8 <event_phy_upd_ind_prep+0x6c>
			lll->phy_rx = conn->llcp.phy_upd_ind.rx;
   157e6:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
   157ea:	095b      	lsrs	r3, r3, #5
   157ec:	f363 0202 	bfi	r2, r3, #0, #3
   157f0:	f884 2065 	strb.w	r2, [r4, #101]	; 0x65
				calc_eff_time(lll->max_rx_octets, lll->phy_rx,
   157f4:	f44f 77a4 	mov.w	r7, #328	; 0x148
		rx = conn->llcp_rx;
   157f8:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   157fc:	2d00      	cmp	r5, #0
   157fe:	f000 80b2 	beq.w	15966 <event_phy_upd_ind_prep+0x1da>
   15802:	6828      	ldr	r0, [r5, #0]
   15804:	2800      	cmp	r0, #0
   15806:	f000 80ae 	beq.w	15966 <event_phy_upd_ind_prep+0x1da>
		conn->llcp_rx = rx->hdr.link->mem;
   1580a:	6843      	ldr	r3, [r0, #4]
		    (lll->phy_rx == old_rx)) {
   1580c:	f894 2065 	ldrb.w	r2, [r4, #101]	; 0x65
		conn->llcp_rx = rx->hdr.link->mem;
   15810:	f8c4 310c 	str.w	r3, [r4, #268]	; 0x10c
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15814:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   15818:	f01c 0f02 	tst.w	ip, #2
   1581c:	f003 0307 	and.w	r3, r3, #7
		    (lll->phy_rx == old_rx)) {
   15820:	f002 0207 	and.w	r2, r2, #7
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15824:	d102      	bne.n	1582c <event_phy_upd_ind_prep+0xa0>
   15826:	4599      	cmp	r9, r3
   15828:	f000 80c5 	beq.w	159b6 <event_phy_upd_ind_prep+0x22a>
		rx->hdr.handle = lll->handle;
   1582c:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
		upd->tx = lll->phy_tx;
   1582e:	776b      	strb	r3, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15830:	2319      	movs	r3, #25
   15832:	712b      	strb	r3, [r5, #4]
		upd->status = 0U;
   15834:	2300      	movs	r3, #0
		rx->hdr.handle = lll->handle;
   15836:	80e9      	strh	r1, [r5, #6]
		upd->rx = lll->phy_rx;
   15838:	77aa      	strb	r2, [r5, #30]
		upd->status = 0U;
   1583a:	772b      	strb	r3, [r5, #28]
		ll_rx_put(rx->hdr.link, rx);
   1583c:	4629      	mov	r1, r5
   1583e:	f7fe fd75 	bl	1432c <ll_rx_put>
		rx = conn->llcp_rx;
   15842:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
		LL_ASSERT(rx && rx->hdr.link);
   15846:	2d00      	cmp	r5, #0
   15848:	f000 809e 	beq.w	15988 <event_phy_upd_ind_prep+0x1fc>
   1584c:	6828      	ldr	r0, [r5, #0]
   1584e:	2800      	cmp	r0, #0
   15850:	f000 809a 	beq.w	15988 <event_phy_upd_ind_prep+0x1fc>
		if ((eff_tx_time <= lll->max_tx_time) &&
   15854:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
		conn->llcp_rx = rx->hdr.link->mem;
   15858:	6842      	ldr	r2, [r0, #4]
   1585a:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
		if ((eff_tx_time <= lll->max_tx_time) &&
   1585e:	42b3      	cmp	r3, r6
   15860:	d30a      	bcc.n	15878 <event_phy_upd_ind_prep+0xec>
   15862:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   15866:	d807      	bhi.n	15878 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   15868:	f8b4 3062 	ldrh.w	r3, [r4, #98]	; 0x62
		    (lll->max_tx_time <= max_tx_time) &&
   1586c:	42bb      	cmp	r3, r7
   1586e:	d303      	bcc.n	15878 <event_phy_upd_ind_prep+0xec>
		    (eff_rx_time <= lll->max_rx_time) &&
   15870:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   15874:	f240 8116 	bls.w	15aa4 <event_phy_upd_ind_prep+0x318>
		lll->max_tx_time = eff_tx_time;
   15878:	f8a4 6060 	strh.w	r6, [r4, #96]	; 0x60
		lll->max_rx_time = eff_rx_time;
   1587c:	f8a4 7062 	strh.w	r7, [r4, #98]	; 0x62
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15880:	7f2b      	ldrb	r3, [r5, #28]
		rx->hdr.handle = lll->handle;
   15882:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   15884:	80ea      	strh	r2, [r5, #6]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15886:	f043 0303 	orr.w	r3, r3, #3
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1588a:	f04f 0c03 	mov.w	ip, #3
		pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   1588e:	2109      	movs	r1, #9
   15890:	7769      	strb	r1, [r5, #29]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15892:	f885 c004 	strb.w	ip, [r5, #4]
		pdu_rx->ll_id = PDU_DATA_LLID_CTRL;
   15896:	772b      	strb	r3, [r5, #28]
		lr->max_rx_octets = sys_cpu_to_le16(lll->max_rx_octets);
   15898:	f8b4 305e 	ldrh.w	r3, [r4, #94]	; 0x5e
   1589c:	842b      	strh	r3, [r5, #32]
		lr->max_tx_octets = sys_cpu_to_le16(lll->max_tx_octets);
   1589e:	f8b4 305c 	ldrh.w	r3, [r4, #92]	; 0x5c
   158a2:	84ab      	strh	r3, [r5, #36]	; 0x24
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   158a4:	2315      	movs	r3, #21
		lr->max_rx_time = sys_cpu_to_le16(lll->max_rx_time);
   158a6:	846f      	strh	r7, [r5, #34]	; 0x22
		lr->max_tx_time = sys_cpu_to_le16(lll->max_tx_time);
   158a8:	84ee      	strh	r6, [r5, #38]	; 0x26
		ll_rx_put(rx->hdr.link, rx);
   158aa:	4629      	mov	r1, r5
		pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   158ac:	77eb      	strb	r3, [r5, #31]
		ll_rx_put(rx->hdr.link, rx);
   158ae:	f7fe fd3d 	bl	1432c <ll_rx_put>
}
   158b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		ll_rx_sched();
   158b6:	f7fe bd43 	b.w	14340 <ll_rx_sched>
		rx = ll_pdu_rx_alloc_peek(2);
   158ba:	2002      	movs	r0, #2
   158bc:	f7fe fd46 	bl	1434c <ll_pdu_rx_alloc_peek>
		if (!rx) {
   158c0:	4680      	mov	r8, r0
   158c2:	2800      	cmp	r0, #0
   158c4:	d044      	beq.n	15950 <event_phy_upd_ind_prep+0x1c4>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   158c6:	4883      	ldr	r0, [pc, #524]	; (15ad4 <event_phy_upd_ind_prep+0x348>)
   158c8:	f7fa ff26 	bl	10718 <mem_acquire>
		if (!tx) {
   158cc:	4605      	mov	r5, r0
   158ce:	2800      	cmp	r0, #0
   158d0:	d03e      	beq.n	15950 <event_phy_upd_ind_prep+0x1c4>
		conn->llcp.phy_upd_ind.initiate = 0U;
   158d2:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
   158d6:	f36f 0300 	bfc	r3, #0, #1
		       conn->llcp.phy_upd_ind.rx) & 0x07)) {
   158da:	f3c3 1742 	ubfx	r7, r3, #5, #3
		if (!((conn->llcp.phy_upd_ind.tx |
   158de:	ea47 0793 	orr.w	r7, r7, r3, lsr #2
   158e2:	f017 0707 	ands.w	r7, r7, #7
		conn->llcp.phy_upd_ind.initiate = 0U;
   158e6:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		if (!((conn->llcp.phy_upd_ind.tx |
   158ea:	b2db      	uxtb	r3, r3
   158ec:	d17e      	bne.n	159ec <event_phy_upd_ind_prep+0x260>
			conn->llcp_ack = conn->llcp_req;
   158ee:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
			conn->llcp.phy_upd_ind.instant = 0U;
   158f2:	f8a4 70ee 	strh.w	r7, [r4, #238]	; 0xee
			if (conn->llcp.phy_upd_ind.cmd) {
   158f6:	079b      	lsls	r3, r3, #30
			conn->llcp_ack = conn->llcp_req;
   158f8:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			if (conn->llcp.phy_upd_ind.cmd) {
   158fc:	f100 80ad 	bmi.w	15a5a <event_phy_upd_ind_prep+0x2ce>
   15900:	463b      	mov	r3, r7
   15902:	463a      	mov	r2, r7
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15904:	726b      	strb	r3, [r5, #9]
		pdu_ctrl_tx->len =
   15906:	2305      	movs	r3, #5
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15908:	722f      	strb	r7, [r5, #8]
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   1590a:	816a      	strh	r2, [r5, #10]
		pdu_ctrl_tx->len =
   1590c:	716b      	strb	r3, [r5, #5]
		pdu_ctrl_tx->llctrl.opcode =
   1590e:	2218      	movs	r2, #24
	    conn->tx_head &&
   15910:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode =
   15914:	71ea      	strb	r2, [r5, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15916:	792a      	ldrb	r2, [r5, #4]
   15918:	f042 0203 	orr.w	r2, r2, #3
   1591c:	712a      	strb	r2, [r5, #4]
	if (
   1591e:	b13b      	cbz	r3, 15930 <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_enc.pause_tx &&
   15920:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   15924:	0796      	lsls	r6, r2, #30
   15926:	d403      	bmi.n	15930 <event_phy_upd_ind_prep+0x1a4>
	    !conn->llcp_phy.pause_tx &&
   15928:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   1592c:	07d0      	lsls	r0, r2, #31
   1592e:	d57b      	bpl.n	15a28 <event_phy_upd_ind_prep+0x29c>
		if (!conn->tx_ctrl) {
   15930:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15934:	2a00      	cmp	r2, #0
   15936:	f000 808a 	beq.w	15a4e <event_phy_upd_ind_prep+0x2c2>
	tx->next = conn->tx_ctrl_last->next;
   1593a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1593e:	681a      	ldr	r2, [r3, #0]
   15940:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   15942:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15944:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   15946:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   1594a:	b90b      	cbnz	r3, 15950 <event_phy_upd_ind_prep+0x1c4>
		conn->tx_data_last = tx;
   1594c:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
}
   15950:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			lll->phy_tx = conn->llcp.phy_upd_ind.tx;
   15954:	f3c3 0182 	ubfx	r1, r3, #2, #3
   15958:	f361 0202 	bfi	r2, r1, #0, #3
   1595c:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
			eff_tx_time = calc_eff_time(lll->max_tx_octets,
   15960:	f44f 76a4 	mov.w	r6, #328	; 0x148
   15964:	e73c      	b.n	157e0 <event_phy_upd_ind_prep+0x54>
		LL_ASSERT(rx && rx->hdr.link);
   15966:	4a5c      	ldr	r2, [pc, #368]	; (15ad8 <event_phy_upd_ind_prep+0x34c>)
   15968:	495c      	ldr	r1, [pc, #368]	; (15adc <event_phy_upd_ind_prep+0x350>)
   1596a:	485d      	ldr	r0, [pc, #372]	; (15ae0 <event_phy_upd_ind_prep+0x354>)
   1596c:	f640 732c 	movw	r3, #3884	; 0xf2c
   15970:	f00c f8d8 	bl	21b24 <printk>
   15974:	4040      	eors	r0, r0
   15976:	f380 8811 	msr	BASEPRI, r0
   1597a:	f04f 0003 	mov.w	r0, #3
   1597e:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   15980:	6828      	ldr	r0, [r5, #0]
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   15982:	f894 c0ec 	ldrb.w	ip, [r4, #236]	; 0xec
   15986:	e740      	b.n	1580a <event_phy_upd_ind_prep+0x7e>
		LL_ASSERT(rx && rx->hdr.link);
   15988:	4a53      	ldr	r2, [pc, #332]	; (15ad8 <event_phy_upd_ind_prep+0x34c>)
   1598a:	4954      	ldr	r1, [pc, #336]	; (15adc <event_phy_upd_ind_prep+0x350>)
   1598c:	4854      	ldr	r0, [pc, #336]	; (15ae0 <event_phy_upd_ind_prep+0x354>)
   1598e:	f640 7358 	movw	r3, #3928	; 0xf58
   15992:	f00c f8c7 	bl	21b24 <printk>
   15996:	4040      	eors	r0, r0
   15998:	f380 8811 	msr	BASEPRI, r0
   1599c:	f04f 0003 	mov.w	r0, #3
   159a0:	df02      	svc	2
		conn->llcp_rx = rx->hdr.link->mem;
   159a2:	6828      	ldr	r0, [r5, #0]
   159a4:	e756      	b.n	15854 <event_phy_upd_ind_prep+0xc8>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   159a6:	f890 10dd 	ldrb.w	r1, [r0, #221]	; 0xdd
   159aa:	2900      	cmp	r1, #0
   159ac:	f43f af04 	beq.w	157b8 <event_phy_upd_ind_prep+0x2c>
			conn->slave.llcp_type = LLCP_NONE;
   159b0:	f880 20dd 	strb.w	r2, [r0, #221]	; 0xdd
   159b4:	e704      	b.n	157c0 <event_phy_upd_ind_prep+0x34>
		if (!conn->llcp.phy_upd_ind.cmd && (lll->phy_tx == old_tx) &&
   159b6:	4590      	cmp	r8, r2
   159b8:	f47f af38 	bne.w	1582c <event_phy_upd_ind_prep+0xa0>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   159bc:	2301      	movs	r3, #1
   159be:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   159c0:	4629      	mov	r1, r5
   159c2:	f7fe fcb3 	bl	1432c <ll_rx_put>
				rx = conn->llcp_rx;
   159c6:	f8d4 510c 	ldr.w	r5, [r4, #268]	; 0x10c
				LL_ASSERT(rx && rx->hdr.link);
   159ca:	2d00      	cmp	r5, #0
   159cc:	d073      	beq.n	15ab6 <event_phy_upd_ind_prep+0x32a>
   159ce:	6828      	ldr	r0, [r5, #0]
   159d0:	2800      	cmp	r0, #0
   159d2:	d070      	beq.n	15ab6 <event_phy_upd_ind_prep+0x32a>
				conn->llcp_rx = rx->hdr.link->mem;
   159d4:	6842      	ldr	r2, [r0, #4]
   159d6:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   159da:	2301      	movs	r3, #1
				ll_rx_put(rx->hdr.link, rx);
   159dc:	4629      	mov	r1, r5
				rx->hdr.type = NODE_RX_TYPE_RELEASE;
   159de:	712b      	strb	r3, [r5, #4]
				ll_rx_put(rx->hdr.link, rx);
   159e0:	f7fe fca4 	bl	1432c <ll_rx_put>
}
   159e4:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   159e8:	f7fe bcaa 	b.w	14340 <ll_rx_sched>
			conn->llcp.phy_upd_ind.instant = event_counter +
   159ec:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   159ee:	4431      	add	r1, r6
							 lll->latency +
   159f0:	3106      	adds	r1, #6
			conn->llcp.phy_upd_ind.instant = event_counter +
   159f2:	f8a4 10ee 	strh.w	r1, [r4, #238]	; 0xee
			(void)ll_pdu_rx_alloc();
   159f6:	f7fe fcc7 	bl	14388 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   159fa:	f8d8 3000 	ldr.w	r3, [r8]
   159fe:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15a02:	605a      	str	r2, [r3, #4]
			conn->llcp_rx = rx;
   15a04:	f8c4 810c 	str.w	r8, [r4, #268]	; 0x10c
			rx = ll_pdu_rx_alloc();
   15a08:	f7fe fcbe 	bl	14388 <ll_pdu_rx_alloc>
			rx->hdr.link->mem = conn->llcp_rx;
   15a0c:	6803      	ldr	r3, [r0, #0]
   15a0e:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   15a12:	605a      	str	r2, [r3, #4]
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15a14:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15a18:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
			conn->llcp_rx = rx;
   15a1c:	f8c4 010c 	str.w	r0, [r4, #268]	; 0x10c
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15a20:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15a24:	095b      	lsrs	r3, r3, #5
   15a26:	e76d      	b.n	15904 <event_phy_upd_ind_prep+0x178>
		if (conn->tx_head == conn->tx_data) {
   15a28:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   15a2c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   15a2e:	bf04      	itt	eq
   15a30:	681a      	ldreq	r2, [r3, #0]
   15a32:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   15a36:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   15a3a:	2a00      	cmp	r2, #0
   15a3c:	f47f af7d 	bne.w	1593a <event_phy_upd_ind_prep+0x1ae>
			tx->next = conn->tx_head->next;
   15a40:	681a      	ldr	r2, [r3, #0]
   15a42:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   15a44:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   15a46:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   15a48:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   15a4c:	e77d      	b.n	1594a <event_phy_upd_ind_prep+0x1be>
			tx->next = conn->tx_head;
   15a4e:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   15a50:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   15a54:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   15a58:	e777      	b.n	1594a <event_phy_upd_ind_prep+0x1be>
				(void)ll_pdu_rx_alloc();
   15a5a:	f7fe fc95 	bl	14388 <ll_pdu_rx_alloc>
				rx->hdr.handle = lll->handle;
   15a5e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   15a60:	f8a8 3006 	strh.w	r3, [r8, #6]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15a64:	2319      	movs	r3, #25
				upd->status = 0U;
   15a66:	f888 701c 	strb.w	r7, [r8, #28]
				rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   15a6a:	f888 3004 	strb.w	r3, [r8, #4]
				upd->tx = lll->phy_tx;
   15a6e:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
				ll_rx_put(rx->hdr.link, rx);
   15a72:	f8d8 0000 	ldr.w	r0, [r8]
				upd->tx = lll->phy_tx;
   15a76:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15a7a:	f888 301d 	strb.w	r3, [r8, #29]
				upd->rx = lll->phy_rx;
   15a7e:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   15a82:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15a86:	f888 301e 	strb.w	r3, [r8, #30]
				ll_rx_put(rx->hdr.link, rx);
   15a8a:	4641      	mov	r1, r8
   15a8c:	f7fe fc4e 	bl	1432c <ll_rx_put>
				ll_rx_sched();
   15a90:	f7fe fc56 	bl	14340 <ll_rx_sched>
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15a94:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
		ind->instant = sys_cpu_to_le16(conn->llcp.phy_upd_ind.instant);
   15a98:	f8b4 20ee 	ldrh.w	r2, [r4, #238]	; 0xee
		ind->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   15a9c:	f3c3 0782 	ubfx	r7, r3, #2, #3
		ind->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   15aa0:	095b      	lsrs	r3, r3, #5
   15aa2:	e72f      	b.n	15904 <event_phy_upd_ind_prep+0x178>
			rx->hdr.type = NODE_RX_TYPE_RELEASE;
   15aa4:	2301      	movs	r3, #1
   15aa6:	712b      	strb	r3, [r5, #4]
			ll_rx_put(rx->hdr.link, rx);
   15aa8:	4629      	mov	r1, r5
   15aaa:	f7fe fc3f 	bl	1432c <ll_rx_put>
}
   15aae:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			ll_rx_sched();
   15ab2:	f7fe bc45 	b.w	14340 <ll_rx_sched>
				LL_ASSERT(rx && rx->hdr.link);
   15ab6:	4a08      	ldr	r2, [pc, #32]	; (15ad8 <event_phy_upd_ind_prep+0x34c>)
   15ab8:	4908      	ldr	r1, [pc, #32]	; (15adc <event_phy_upd_ind_prep+0x350>)
   15aba:	4809      	ldr	r0, [pc, #36]	; (15ae0 <event_phy_upd_ind_prep+0x354>)
   15abc:	f640 733b 	movw	r3, #3899	; 0xf3b
   15ac0:	f00c f830 	bl	21b24 <printk>
   15ac4:	4040      	eors	r0, r0
   15ac6:	f380 8811 	msr	BASEPRI, r0
   15aca:	f04f 0003 	mov.w	r0, #3
   15ace:	df02      	svc	2
				conn->llcp_rx = rx->hdr.link->mem;
   15ad0:	6828      	ldr	r0, [r5, #0]
   15ad2:	e77f      	b.n	159d4 <event_phy_upd_ind_prep+0x248>
   15ad4:	2000e484 	.word	0x2000e484
   15ad8:	000288c0 	.word	0x000288c0
   15adc:	0002898c 	.word	0x0002898c
   15ae0:	00028404 	.word	0x00028404

00015ae4 <ll_conn_acquire>:
	return mem_acquire(&conn_free);
   15ae4:	4801      	ldr	r0, [pc, #4]	; (15aec <ll_conn_acquire+0x8>)
   15ae6:	f7fa be17 	b.w	10718 <mem_acquire>
   15aea:	bf00      	nop
   15aec:	2000e228 	.word	0x2000e228

00015af0 <ll_conn_release>:
	mem_release(conn, &conn_free);
   15af0:	4901      	ldr	r1, [pc, #4]	; (15af8 <ll_conn_release+0x8>)
   15af2:	f7fa be2b 	b.w	1074c <mem_release>
   15af6:	bf00      	nop
   15af8:	2000e228 	.word	0x2000e228

00015afc <ll_conn_handle_get>:
	return mem_index_get(conn, conn_pool, sizeof(struct ll_conn));
   15afc:	4902      	ldr	r1, [pc, #8]	; (15b08 <ll_conn_handle_get+0xc>)
   15afe:	f44f 72ea 	mov.w	r2, #468	; 0x1d4
   15b02:	f7fa be3f 	b.w	10784 <mem_index_get>
   15b06:	bf00      	nop
   15b08:	2000e22c 	.word	0x2000e22c

00015b0c <ll_conn_get>:
{
   15b0c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15b0e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15b12:	4801      	ldr	r0, [pc, #4]	; (15b18 <ll_conn_get+0xc>)
   15b14:	f7fa be32 	b.w	1077c <mem_get>
   15b18:	2000e22c 	.word	0x2000e22c

00015b1c <ll_connected_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15b1c:	b958      	cbnz	r0, 15b36 <ll_connected_get+0x1a>
{
   15b1e:	b508      	push	{r3, lr}
   15b20:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15b22:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15b26:	4805      	ldr	r0, [pc, #20]	; (15b3c <ll_connected_get+0x20>)
   15b28:	f7fa fe28 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15b2c:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15b2e:	b903      	cbnz	r3, 15b32 <ll_connected_get+0x16>
}
   15b30:	bd08      	pop	{r3, pc}
		return NULL;
   15b32:	2000      	movs	r0, #0
}
   15b34:	bd08      	pop	{r3, pc}
		return NULL;
   15b36:	2000      	movs	r0, #0
}
   15b38:	4770      	bx	lr
   15b3a:	bf00      	nop
   15b3c:	2000e22c 	.word	0x2000e22c

00015b40 <ll_tx_mem_acquire>:
	return mem_acquire(&mem_conn_tx.free);
   15b40:	4801      	ldr	r0, [pc, #4]	; (15b48 <ll_tx_mem_acquire+0x8>)
   15b42:	f7fa bde9 	b.w	10718 <mem_acquire>
   15b46:	bf00      	nop
   15b48:	2000e414 	.word	0x2000e414

00015b4c <ll_tx_mem_release>:
	mem_release(tx, &mem_conn_tx.free);
   15b4c:	4901      	ldr	r1, [pc, #4]	; (15b54 <ll_tx_mem_release+0x8>)
   15b4e:	f7fa bdfd 	b.w	1074c <mem_release>
   15b52:	bf00      	nop
   15b54:	2000e414 	.word	0x2000e414

00015b58 <ll_tx_mem_enqueue>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15b58:	2800      	cmp	r0, #0
   15b5a:	d140      	bne.n	15bde <ll_tx_mem_enqueue+0x86>
{
   15b5c:	b570      	push	{r4, r5, r6, lr}
   15b5e:	4602      	mov	r2, r0
   15b60:	460e      	mov	r6, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15b62:	4820      	ldr	r0, [pc, #128]	; (15be4 <ll_tx_mem_enqueue+0x8c>)
   15b64:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15b68:	f7fa fe08 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15b6c:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15b6e:	4605      	mov	r5, r0
	if (conn->lll.handle != handle) {
   15b70:	bb7a      	cbnz	r2, 15bd2 <ll_tx_mem_enqueue+0x7a>
	idx = MFIFO_ENQUEUE_GET(conn_tx, (void **) &lll_tx);
   15b72:	4c1d      	ldr	r4, [pc, #116]	; (15be8 <ll_tx_mem_enqueue+0x90>)
   15b74:	78e1      	ldrb	r1, [r4, #3]
	if (last == count) {
   15b76:	f894 c001 	ldrb.w	ip, [r4, #1]
   15b7a:	78a0      	ldrb	r0, [r4, #2]
	last = last + 1;
   15b7c:	1c4b      	adds	r3, r1, #1
   15b7e:	b2db      	uxtb	r3, r3
		last = 0U;
   15b80:	459c      	cmp	ip, r3
   15b82:	bf08      	it	eq
   15b84:	2300      	moveq	r3, #0
	if (last == first) {
   15b86:	4298      	cmp	r0, r3
   15b88:	d026      	beq.n	15bd8 <ll_tx_mem_enqueue+0x80>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   15b8a:	46a4      	mov	ip, r4
   15b8c:	f81c 0b04 	ldrb.w	r0, [ip], #4
   15b90:	fb10 f001 	smulbb	r0, r0, r1
	if (!lll_tx) {
   15b94:	eb1c 0100 	adds.w	r1, ip, r0
   15b98:	d01e      	beq.n	15bd8 <ll_tx_mem_enqueue+0x80>
	lll_tx->handle = handle;
   15b9a:	f82c 2000 	strh.w	r2, [ip, r0]
	lll_tx->node = tx;
   15b9e:	604e      	str	r6, [r1, #4]
   15ba0:	7c29      	ldrb	r1, [r5, #16]
	*last = idx; /* Commit: Update write index */
   15ba2:	70e3      	strb	r3, [r4, #3]
	if (ull_ref_get(&conn->ull)) {
   15ba4:	b929      	cbnz	r1, 15bb2 <ll_tx_mem_enqueue+0x5a>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ba6:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15baa:	2b00      	cmp	r3, #0
   15bac:	db0b      	blt.n	15bc6 <ll_tx_mem_enqueue+0x6e>
	return 0;
   15bae:	2000      	movs	r0, #0
}
   15bb0:	bd70      	pop	{r4, r5, r6, pc}
		mfy.param = conn;
   15bb2:	4b0e      	ldr	r3, [pc, #56]	; (15bec <ll_tx_mem_enqueue+0x94>)
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   15bb4:	2101      	movs	r1, #1
   15bb6:	2003      	movs	r0, #3
		mfy.param = conn;
   15bb8:	609d      	str	r5, [r3, #8]
		mayfly_enqueue(TICKER_USER_ID_THREAD, TICKER_USER_ID_ULL_HIGH,
   15bba:	f7fa fe85 	bl	108c8 <mayfly_enqueue>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15bbe:	f995 303d 	ldrsb.w	r3, [r5, #61]	; 0x3d
   15bc2:	2b00      	cmp	r3, #0
   15bc4:	daf3      	bge.n	15bae <ll_tx_mem_enqueue+0x56>
		ull_slave_latency_cancel(conn, handle);
   15bc6:	4628      	mov	r0, r5
   15bc8:	2100      	movs	r1, #0
   15bca:	f003 fde1 	bl	19790 <ull_slave_latency_cancel>
	return 0;
   15bce:	2000      	movs	r0, #0
}
   15bd0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15bd2:	f06f 0015 	mvn.w	r0, #21
}
   15bd6:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
   15bd8:	f06f 0036 	mvn.w	r0, #54	; 0x36
}
   15bdc:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   15bde:	f06f 0015 	mvn.w	r0, #21
}
   15be2:	4770      	bx	lr
   15be4:	2000e22c 	.word	0x2000e22c
   15be8:	200005d8 	.word	0x200005d8
   15bec:	2000060c 	.word	0x2000060c

00015bf0 <ll_conn_update>:
{
   15bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   15bf4:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   15bf8:	f8bd 8024 	ldrh.w	r8, [sp, #36]	; 0x24
   15bfc:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	if (handle >= CONFIG_BT_MAX_CONN) {
   15c00:	2800      	cmp	r0, #0
   15c02:	d155      	bne.n	15cb0 <ll_conn_update+0xc0>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15c04:	460c      	mov	r4, r1
   15c06:	4615      	mov	r5, r2
   15c08:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15c0c:	4602      	mov	r2, r0
   15c0e:	4841      	ldr	r0, [pc, #260]	; (15d14 <ll_conn_update+0x124>)
   15c10:	461e      	mov	r6, r3
   15c12:	f7fa fdb3 	bl	1077c <mem_get>
   15c16:	4684      	mov	ip, r0
	if (conn->lll.handle != handle) {
   15c18:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15c1a:	2800      	cmp	r0, #0
   15c1c:	d148      	bne.n	15cb0 <ll_conn_update+0xc0>
	if (!cmd) {
   15c1e:	bb3c      	cbnz	r4, 15c70 <ll_conn_update+0x80>
		if (!conn->llcp_conn_param.disabled &&
   15c20:	f89c 317e 	ldrb.w	r3, [ip, #382]	; 0x17e
   15c24:	06d9      	lsls	r1, r3, #27
   15c26:	d44a      	bmi.n	15cbe <ll_conn_update+0xce>
		    (!conn->common.fex_valid ||
   15c28:	f89c 30dc 	ldrb.w	r3, [ip, #220]	; 0xdc
		if (!conn->llcp_conn_param.disabled &&
   15c2c:	07da      	lsls	r2, r3, #31
   15c2e:	d442      	bmi.n	15cb6 <ll_conn_update+0xc6>
			if (conn->llcp_conn_param.req !=
   15c30:	f89c 217c 	ldrb.w	r2, [ip, #380]	; 0x17c
   15c34:	f89c 317d 	ldrb.w	r3, [ip, #381]	; 0x17d
   15c38:	4293      	cmp	r3, r2
   15c3a:	d136      	bne.n	15caa <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   15c3c:	f8bc 217e 	ldrh.w	r2, [ip, #382]	; 0x17e
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c40:	f99c 103d 	ldrsb.w	r1, [ip, #61]	; 0x3d
			conn->llcp_conn_param.interval_min = interval_min;
   15c44:	f8ac 6180 	strh.w	r6, [ip, #384]	; 0x180
			conn->llcp_conn_param.state = cmd;
   15c48:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
			conn->llcp_conn_param.req++;
   15c4c:	3301      	adds	r3, #1
			conn->llcp_conn_param.state = cmd;
   15c4e:	f042 0208 	orr.w	r2, r2, #8
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c52:	2900      	cmp	r1, #0
			conn->llcp_conn_param.interval_max = interval_max;
   15c54:	f8ac 9182 	strh.w	r9, [ip, #386]	; 0x182
			conn->llcp_conn_param.latency = latency;
   15c58:	f8ac 8184 	strh.w	r8, [ip, #388]	; 0x184
			conn->llcp_conn_param.timeout = timeout;
   15c5c:	f8ac 7186 	strh.w	r7, [ip, #390]	; 0x186
			conn->llcp_conn_param.state = cmd;
   15c60:	f8ac 217e 	strh.w	r2, [ip, #382]	; 0x17e
			conn->llcp_conn_param.req++;
   15c64:	f88c 317c 	strb.w	r3, [ip, #380]	; 0x17c
			if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15c68:	db4e      	blt.n	15d08 <ll_conn_update+0x118>
	return 0;
   15c6a:	2000      	movs	r0, #0
}
   15c6c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		cmd--;
   15c70:	3c01      	subs	r4, #1
		if (cmd) {
   15c72:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   15c76:	d0db      	beq.n	15c30 <ll_conn_update+0x40>
			if ((conn->llcp_conn_param.req ==
   15c78:	f89c 217c 	ldrb.w	r2, [ip, #380]	; 0x17c
   15c7c:	f89c 317d 	ldrb.w	r3, [ip, #381]	; 0x17d
   15c80:	429a      	cmp	r2, r3
   15c82:	d012      	beq.n	15caa <ll_conn_update+0xba>
			    (conn->llcp_conn_param.state !=
   15c84:	f89c 317e 	ldrb.w	r3, [ip, #382]	; 0x17e
			     conn->llcp_conn_param.ack) ||
   15c88:	f003 0207 	and.w	r2, r3, #7
   15c8c:	2a03      	cmp	r2, #3
   15c8e:	d10c      	bne.n	15caa <ll_conn_update+0xba>
			conn->llcp_conn_param.state = cmd;
   15c90:	f004 0407 	and.w	r4, r4, #7
   15c94:	f023 030f 	bic.w	r3, r3, #15
   15c98:	f044 0408 	orr.w	r4, r4, #8
   15c9c:	431c      	orrs	r4, r3
			conn->llcp_conn_param.status = status;
   15c9e:	f88c 517f 	strb.w	r5, [ip, #383]	; 0x17f
			conn->llcp_conn_param.state = cmd;
   15ca2:	f88c 417e 	strb.w	r4, [ip, #382]	; 0x17e
}
   15ca6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   15caa:	200c      	movs	r0, #12
}
   15cac:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15cb0:	2002      	movs	r0, #2
}
   15cb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		     (conn->llcp_feature.features_conn &
   15cb6:	f8dc 3128 	ldr.w	r3, [ip, #296]	; 0x128
		    (!conn->common.fex_valid ||
   15cba:	079b      	lsls	r3, r3, #30
   15cbc:	d4b8      	bmi.n	15c30 <ll_conn_update+0x40>
		} else if (conn->lll.role) {
   15cbe:	f99c 303d 	ldrsb.w	r3, [ip, #61]	; 0x3d
   15cc2:	2b00      	cmp	r3, #0
   15cc4:	db1e      	blt.n	15d04 <ll_conn_update+0x114>
		if (conn->llcp_cu.req != conn->llcp_cu.ack) {
   15cc6:	f89c 2110 	ldrb.w	r2, [ip, #272]	; 0x110
   15cca:	f89c 3111 	ldrb.w	r3, [ip, #273]	; 0x111
   15cce:	4293      	cmp	r3, r2
   15cd0:	d1eb      	bne.n	15caa <ll_conn_update+0xba>
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15cd2:	f89c 2112 	ldrb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.interval = interval_max;
   15cd6:	f8ac 9114 	strh.w	r9, [ip, #276]	; 0x114
		conn->llcp_cu.req++;
   15cda:	3301      	adds	r3, #1
   15cdc:	f88c 3110 	strb.w	r3, [ip, #272]	; 0x110
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15ce0:	f022 020f 	bic.w	r2, r2, #15
		conn->llcp_cu.win_size = 1U;
   15ce4:	2301      	movs	r3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15ce6:	f042 0209 	orr.w	r2, r2, #9
		conn->llcp_cu.win_offset_us = 0U;
   15cea:	2000      	movs	r0, #0
		conn->llcp_cu.win_size = 1U;
   15cec:	f88c 3120 	strb.w	r3, [ip, #288]	; 0x120
		conn->llcp_cu.latency = latency;
   15cf0:	f8ac 8116 	strh.w	r8, [ip, #278]	; 0x116
		conn->llcp_cu.timeout = timeout;
   15cf4:	f8ac 7118 	strh.w	r7, [ip, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   15cf8:	f88c 2112 	strb.w	r2, [ip, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   15cfc:	f8cc 011c 	str.w	r0, [ip, #284]	; 0x11c
}
   15d00:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15d04:	201a      	movs	r0, #26
   15d06:	e7d1      	b.n	15cac <ll_conn_update+0xbc>
				ull_slave_latency_cancel(conn, handle);
   15d08:	4660      	mov	r0, ip
   15d0a:	2100      	movs	r1, #0
   15d0c:	f003 fd40 	bl	19790 <ull_slave_latency_cancel>
	return 0;
   15d10:	2000      	movs	r0, #0
   15d12:	e7cb      	b.n	15cac <ll_conn_update+0xbc>
   15d14:	2000e22c 	.word	0x2000e22c

00015d18 <ll_chm_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15d18:	b9d0      	cbnz	r0, 15d50 <ll_chm_get+0x38>
{
   15d1a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   15d1c:	4602      	mov	r2, r0
   15d1e:	460d      	mov	r5, r1
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15d20:	480c      	ldr	r0, [pc, #48]	; (15d54 <ll_chm_get+0x3c>)
   15d22:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15d26:	f7fa fd29 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15d2a:	8d86      	ldrh	r6, [r0, #44]	; 0x2c
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15d2c:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   15d2e:	b96e      	cbnz	r6, 15d4c <ll_chm_get+0x34>
		memcpy(chm, conn->lll.data_chan_map,
   15d30:	f100 0738 	add.w	r7, r0, #56	; 0x38
		conn->chm_updated = 0U;
   15d34:	f884 61d0 	strb.w	r6, [r4, #464]	; 0x1d0
		memcpy(chm, conn->lll.data_chan_map,
   15d38:	2205      	movs	r2, #5
   15d3a:	4639      	mov	r1, r7
   15d3c:	4628      	mov	r0, r5
   15d3e:	f00e fb93 	bl	24468 <memcpy>
	} while (conn->chm_updated);
   15d42:	f894 01d0 	ldrb.w	r0, [r4, #464]	; 0x1d0
   15d46:	2800      	cmp	r0, #0
   15d48:	d1f4      	bne.n	15d34 <ll_chm_get+0x1c>
}
   15d4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15d4c:	2002      	movs	r0, #2
}
   15d4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15d50:	2002      	movs	r0, #2
}
   15d52:	4770      	bx	lr
   15d54:	2000e22c 	.word	0x2000e22c

00015d58 <ll_terminate_ind_send>:
	switch (reason) {
   15d58:	2929      	cmp	r1, #41	; 0x29
{
   15d5a:	b538      	push	{r3, r4, r5, lr}
   15d5c:	460d      	mov	r5, r1
   15d5e:	4604      	mov	r4, r0
	switch (reason) {
   15d60:	d819      	bhi.n	15d96 <ll_terminate_ind_send+0x3e>
   15d62:	2904      	cmp	r1, #4
   15d64:	d919      	bls.n	15d9a <ll_terminate_ind_send+0x42>
   15d66:	1f4b      	subs	r3, r1, #5
   15d68:	2b24      	cmp	r3, #36	; 0x24
   15d6a:	d816      	bhi.n	15d9a <ll_terminate_ind_send+0x42>
   15d6c:	e8df f003 	tbb	[pc, r3]
   15d70:	15151517 	.word	0x15151517
   15d74:	15151515 	.word	0x15151515
   15d78:	15151515 	.word	0x15151515
   15d7c:	17171515 	.word	0x17171515
   15d80:	15151517 	.word	0x15151517
   15d84:	15151715 	.word	0x15151715
   15d88:	15151515 	.word	0x15151515
   15d8c:	15151515 	.word	0x15151515
   15d90:	15151515 	.word	0x15151515
   15d94:	17          	.byte	0x17
   15d95:	00          	.byte	0x00
   15d96:	293b      	cmp	r1, #59	; 0x3b
   15d98:	d001      	beq.n	15d9e <ll_terminate_ind_send+0x46>
   15d9a:	2012      	movs	r0, #18
}
   15d9c:	bd38      	pop	{r3, r4, r5, pc}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15d9e:	b9a4      	cbnz	r4, 15dca <ll_terminate_ind_send+0x72>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15da0:	4622      	mov	r2, r4
   15da2:	480d      	ldr	r0, [pc, #52]	; (15dd8 <ll_terminate_ind_send+0x80>)
   15da4:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15da8:	f7fa fce8 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15dac:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   15dae:	b962      	cbnz	r2, 15dca <ll_terminate_ind_send+0x72>
	conn->llcp_terminate.req++;
   15db0:	f890 2138 	ldrb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15db4:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_terminate.reason_own = reason;
   15db8:	f880 513a 	strb.w	r5, [r0, #314]	; 0x13a
	conn->llcp_terminate.req++;
   15dbc:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15dbe:	2b00      	cmp	r3, #0
	conn->llcp_terminate.req++;
   15dc0:	f880 2138 	strb.w	r2, [r0, #312]	; 0x138
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15dc4:	db03      	blt.n	15dce <ll_terminate_ind_send+0x76>
	return 0;
   15dc6:	4620      	mov	r0, r4
}
   15dc8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15dca:	2002      	movs	r0, #2
}
   15dcc:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   15dce:	4621      	mov	r1, r4
   15dd0:	f003 fcde 	bl	19790 <ull_slave_latency_cancel>
	return 0;
   15dd4:	4620      	mov	r0, r4
}
   15dd6:	bd38      	pop	{r3, r4, r5, pc}
   15dd8:	2000e22c 	.word	0x2000e22c

00015ddc <ll_feature_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15ddc:	bb00      	cbnz	r0, 15e20 <ll_feature_req_send+0x44>
{
   15dde:	b510      	push	{r4, lr}
   15de0:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15de2:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15de6:	480f      	ldr	r0, [pc, #60]	; (15e24 <ll_feature_req_send+0x48>)
   15de8:	f7fa fcc8 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15dec:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   15dee:	b984      	cbnz	r4, 15e12 <ll_feature_req_send+0x36>
	if (conn->llcp_feature.req != conn->llcp_feature.ack) {
   15df0:	f890 1124 	ldrb.w	r1, [r0, #292]	; 0x124
   15df4:	f890 2125 	ldrb.w	r2, [r0, #293]	; 0x125
   15df8:	428a      	cmp	r2, r1
   15dfa:	d108      	bne.n	15e0e <ll_feature_req_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15dfc:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_feature.req++;
   15e00:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e02:	2900      	cmp	r1, #0
	conn->llcp_feature.req++;
   15e04:	f880 2124 	strb.w	r2, [r0, #292]	; 0x124
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   15e08:	db05      	blt.n	15e16 <ll_feature_req_send+0x3a>
	return 0;
   15e0a:	4620      	mov	r0, r4
}
   15e0c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15e0e:	200c      	movs	r0, #12
}
   15e10:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e12:	2002      	movs	r0, #2
}
   15e14:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   15e16:	4621      	mov	r1, r4
   15e18:	f003 fcba 	bl	19790 <ull_slave_latency_cancel>
	return 0;
   15e1c:	4620      	mov	r0, r4
}
   15e1e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e20:	2002      	movs	r0, #2
}
   15e22:	4770      	bx	lr
   15e24:	2000e22c 	.word	0x2000e22c

00015e28 <ll_version_ind_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15e28:	bb00      	cbnz	r0, 15e6c <ll_version_ind_send+0x44>
{
   15e2a:	b510      	push	{r4, lr}
   15e2c:	4602      	mov	r2, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15e2e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15e32:	480f      	ldr	r0, [pc, #60]	; (15e70 <ll_version_ind_send+0x48>)
   15e34:	f7fa fca2 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15e38:	8d84      	ldrh	r4, [r0, #44]	; 0x2c
   15e3a:	b984      	cbnz	r4, 15e5e <ll_version_ind_send+0x36>
	if (conn->llcp_version.req != conn->llcp_version.ack) {
   15e3c:	f890 1130 	ldrb.w	r1, [r0, #304]	; 0x130
   15e40:	f890 2131 	ldrb.w	r2, [r0, #305]	; 0x131
   15e44:	428a      	cmp	r2, r1
   15e46:	d108      	bne.n	15e5a <ll_version_ind_send+0x32>
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15e48:	f990 103d 	ldrsb.w	r1, [r0, #61]	; 0x3d
	conn->llcp_version.req++;
   15e4c:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15e4e:	2900      	cmp	r1, #0
	conn->llcp_version.req++;
   15e50:	f880 2130 	strb.w	r2, [r0, #304]	; 0x130
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15e54:	db05      	blt.n	15e62 <ll_version_ind_send+0x3a>
	return 0;
   15e56:	4620      	mov	r0, r4
}
   15e58:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   15e5a:	200c      	movs	r0, #12
}
   15e5c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e5e:	2002      	movs	r0, #2
}
   15e60:	bd10      	pop	{r4, pc}
		ull_slave_latency_cancel(conn, handle);
   15e62:	4621      	mov	r1, r4
   15e64:	f003 fc94 	bl	19790 <ull_slave_latency_cancel>
	return 0;
   15e68:	4620      	mov	r0, r4
}
   15e6a:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15e6c:	2002      	movs	r0, #2
}
   15e6e:	4770      	bx	lr
   15e70:	2000e22c 	.word	0x2000e22c

00015e74 <ll_length_req_send>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15e74:	2800      	cmp	r0, #0
   15e76:	d14c      	bne.n	15f12 <ll_length_req_send+0x9e>
{
   15e78:	b538      	push	{r3, r4, r5, lr}
   15e7a:	460d      	mov	r5, r1
   15e7c:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15e7e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15e82:	4602      	mov	r2, r0
   15e84:	4824      	ldr	r0, [pc, #144]	; (15f18 <ll_length_req_send+0xa4>)
   15e86:	f7fa fc79 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15e8a:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15e8c:	bbc3      	cbnz	r3, 15f00 <ll_length_req_send+0x8c>
	if (conn->llcp_length.disabled ||
   15e8e:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
   15e92:	071a      	lsls	r2, r3, #28
   15e94:	d432      	bmi.n	15efc <ll_length_req_send+0x88>
	    (conn->common.fex_valid &&
   15e96:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
	if (conn->llcp_length.disabled ||
   15e9a:	07d1      	lsls	r1, r2, #31
   15e9c:	d503      	bpl.n	15ea6 <ll_length_req_send+0x32>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_DLE)))) {
   15e9e:	f8d0 2128 	ldr.w	r2, [r0, #296]	; 0x128
	    (conn->common.fex_valid &&
   15ea2:	0692      	lsls	r2, r2, #26
   15ea4:	d52a      	bpl.n	15efc <ll_length_req_send+0x88>
	if (conn->llcp_length.req != conn->llcp_length.ack) {
   15ea6:	f890 11a4 	ldrb.w	r1, [r0, #420]	; 0x1a4
   15eaa:	f890 21a5 	ldrb.w	r2, [r0, #421]	; 0x1a5
   15eae:	428a      	cmp	r2, r1
   15eb0:	d011      	beq.n	15ed6 <ll_length_req_send+0x62>
		switch (conn->llcp_length.state) {
   15eb2:	f003 0307 	and.w	r3, r3, #7
   15eb6:	2b03      	cmp	r3, #3
   15eb8:	d004      	beq.n	15ec4 <ll_length_req_send+0x50>
   15eba:	3303      	adds	r3, #3
   15ebc:	f003 0307 	and.w	r3, r3, #7
   15ec0:	2b01      	cmp	r3, #1
   15ec2:	d824      	bhi.n	15f0e <ll_length_req_send+0x9a>
			if (!conn->llcp_length.cache.tx_octets) {
   15ec4:	f8b0 31b0 	ldrh.w	r3, [r0, #432]	; 0x1b0
   15ec8:	bb0b      	cbnz	r3, 15f0e <ll_length_req_send+0x9a>
				conn->llcp_length.cache.tx_octets = tx_octets;
   15eca:	f8a0 51b0 	strh.w	r5, [r0, #432]	; 0x1b0
				conn->llcp_length.cache.tx_time = tx_time;
   15ece:	f8a0 41b2 	strh.w	r4, [r0, #434]	; 0x1b2
				return 0;
   15ed2:	4618      	mov	r0, r3
}
   15ed4:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ed6:	f890 31a6 	ldrb.w	r3, [r0, #422]	; 0x1a6
	conn->llcp_length.tx_octets = tx_octets;
   15eda:	f8a0 51aa 	strh.w	r5, [r0, #426]	; 0x1aa
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   15ede:	f36f 0302 	bfc	r3, #0, #3
   15ee2:	f880 31a6 	strb.w	r3, [r0, #422]	; 0x1a6
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ee6:	f990 303d 	ldrsb.w	r3, [r0, #61]	; 0x3d
	conn->llcp_length.tx_time = tx_time;
   15eea:	f8a0 41ae 	strh.w	r4, [r0, #430]	; 0x1ae
	conn->llcp_length.req++;
   15eee:	3201      	adds	r2, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ef0:	2b00      	cmp	r3, #0
	conn->llcp_length.req++;
   15ef2:	f880 21a4 	strb.w	r2, [r0, #420]	; 0x1a4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   15ef6:	db05      	blt.n	15f04 <ll_length_req_send+0x90>
	return 0;
   15ef8:	2000      	movs	r0, #0
}
   15efa:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   15efc:	201a      	movs	r0, #26
}
   15efe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f00:	2002      	movs	r0, #2
}
   15f02:	bd38      	pop	{r3, r4, r5, pc}
		ull_slave_latency_cancel(conn, handle);
   15f04:	2100      	movs	r1, #0
   15f06:	f003 fc43 	bl	19790 <ull_slave_latency_cancel>
	return 0;
   15f0a:	2000      	movs	r0, #0
}
   15f0c:	bd38      	pop	{r3, r4, r5, pc}
			return BT_HCI_ERR_CMD_DISALLOWED;
   15f0e:	200c      	movs	r0, #12
}
   15f10:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f12:	2002      	movs	r0, #2
}
   15f14:	4770      	bx	lr
   15f16:	bf00      	nop
   15f18:	2000e22c 	.word	0x2000e22c

00015f1c <ll_length_default_get>:
	*max_tx_octets = default_tx_octets;
   15f1c:	4a03      	ldr	r2, [pc, #12]	; (15f2c <ll_length_default_get+0x10>)
	*max_tx_time = default_tx_time;
   15f1e:	4b04      	ldr	r3, [pc, #16]	; (15f30 <ll_length_default_get+0x14>)
	*max_tx_octets = default_tx_octets;
   15f20:	8812      	ldrh	r2, [r2, #0]
	*max_tx_time = default_tx_time;
   15f22:	881b      	ldrh	r3, [r3, #0]
	*max_tx_octets = default_tx_octets;
   15f24:	8002      	strh	r2, [r0, #0]
	*max_tx_time = default_tx_time;
   15f26:	800b      	strh	r3, [r1, #0]
}
   15f28:	4770      	bx	lr
   15f2a:	bf00      	nop
   15f2c:	2000ed76 	.word	0x2000ed76
   15f30:	2000ed78 	.word	0x2000ed78

00015f34 <ll_length_default_set>:
	default_tx_octets = max_tx_octets;
   15f34:	4a02      	ldr	r2, [pc, #8]	; (15f40 <ll_length_default_set+0xc>)
	default_tx_time = max_tx_time;
   15f36:	4b03      	ldr	r3, [pc, #12]	; (15f44 <ll_length_default_set+0x10>)
	default_tx_octets = max_tx_octets;
   15f38:	8010      	strh	r0, [r2, #0]
	default_tx_time = max_tx_time;
   15f3a:	8019      	strh	r1, [r3, #0]
}
   15f3c:	2000      	movs	r0, #0
   15f3e:	4770      	bx	lr
   15f40:	2000ed76 	.word	0x2000ed76
   15f44:	2000ed78 	.word	0x2000ed78

00015f48 <ll_length_max_get>:
	*max_tx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15f48:	f04f 0c1b 	mov.w	ip, #27
   15f4c:	f8a0 c000 	strh.w	ip, [r0]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15f50:	f44f 70a0 	mov.w	r0, #320	; 0x140
	*max_rx_octets = LL_LENGTH_OCTETS_RX_MAX;
   15f54:	f8a2 c000 	strh.w	ip, [r2]
	*max_tx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15f58:	8008      	strh	r0, [r1, #0]
	*max_rx_time = PKT_US(LL_LENGTH_OCTETS_RX_MAX, PHY_CODED);
   15f5a:	8018      	strh	r0, [r3, #0]
}
   15f5c:	4770      	bx	lr
   15f5e:	bf00      	nop

00015f60 <ll_phy_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   15f60:	b9c0      	cbnz	r0, 15f94 <ll_phy_get+0x34>
{
   15f62:	b538      	push	{r3, r4, r5, lr}
   15f64:	460d      	mov	r5, r1
   15f66:	4614      	mov	r4, r2
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15f68:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15f6c:	4602      	mov	r2, r0
   15f6e:	480a      	ldr	r0, [pc, #40]	; (15f98 <ll_phy_get+0x38>)
   15f70:	f7fa fc04 	bl	1077c <mem_get>
   15f74:	4603      	mov	r3, r0
	if (conn->lll.handle != handle) {
   15f76:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   15f78:	b950      	cbnz	r0, 15f90 <ll_phy_get+0x30>
	*tx = conn->lll.phy_tx;
   15f7a:	f893 2064 	ldrb.w	r2, [r3, #100]	; 0x64
   15f7e:	f3c2 0202 	ubfx	r2, r2, #0, #3
   15f82:	702a      	strb	r2, [r5, #0]
	*rx = conn->lll.phy_rx;
   15f84:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
   15f88:	f3c3 0302 	ubfx	r3, r3, #0, #3
   15f8c:	7023      	strb	r3, [r4, #0]
}
   15f8e:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f90:	2002      	movs	r0, #2
}
   15f92:	bd38      	pop	{r3, r4, r5, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   15f94:	2002      	movs	r0, #2
}
   15f96:	4770      	bx	lr
   15f98:	2000e22c 	.word	0x2000e22c

00015f9c <ll_phy_default_set>:
	default_phy_tx = tx;
   15f9c:	4a02      	ldr	r2, [pc, #8]	; (15fa8 <ll_phy_default_set+0xc>)
	default_phy_rx = rx;
   15f9e:	4b03      	ldr	r3, [pc, #12]	; (15fac <ll_phy_default_set+0x10>)
	default_phy_tx = tx;
   15fa0:	7010      	strb	r0, [r2, #0]
	default_phy_rx = rx;
   15fa2:	7019      	strb	r1, [r3, #0]
}
   15fa4:	2000      	movs	r0, #0
   15fa6:	4770      	bx	lr
   15fa8:	2000f317 	.word	0x2000f317
   15fac:	2000f316 	.word	0x2000f316

00015fb0 <ll_phy_req_send>:
{
   15fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (handle >= CONFIG_BT_MAX_CONN) {
   15fb2:	2800      	cmp	r0, #0
   15fb4:	d143      	bne.n	1603e <ll_phy_req_send+0x8e>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   15fb6:	460c      	mov	r4, r1
   15fb8:	4616      	mov	r6, r2
   15fba:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   15fbe:	4602      	mov	r2, r0
   15fc0:	4823      	ldr	r0, [pc, #140]	; (16050 <ll_phy_req_send+0xa0>)
   15fc2:	461f      	mov	r7, r3
   15fc4:	f7fa fbda 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   15fc8:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   15fca:	bbc3      	cbnz	r3, 1603e <ll_phy_req_send+0x8e>
	if (conn->llcp_phy.disabled ||
   15fcc:	f890 51b7 	ldrb.w	r5, [r0, #439]	; 0x1b7
   15fd0:	f015 0508 	ands.w	r5, r5, #8
   15fd4:	d130      	bne.n	16038 <ll_phy_req_send+0x88>
	    (conn->common.fex_valid &&
   15fd6:	f890 30dc 	ldrb.w	r3, [r0, #220]	; 0xdc
	if (conn->llcp_phy.disabled ||
   15fda:	07db      	lsls	r3, r3, #31
   15fdc:	d504      	bpl.n	15fe8 <ll_phy_req_send+0x38>
	     !(conn->llcp_feature.features_conn & BIT(BT_LE_FEAT_BIT_PHY_2M)) &&
   15fde:	f8d0 3128 	ldr.w	r3, [r0, #296]	; 0x128
   15fe2:	f413 6f10 	tst.w	r3, #2304	; 0x900
   15fe6:	d027      	beq.n	16038 <ll_phy_req_send+0x88>
	if (conn->llcp_phy.req != conn->llcp_phy.ack) {
   15fe8:	f890 31b4 	ldrb.w	r3, [r0, #436]	; 0x1b4
   15fec:	f890 11b5 	ldrb.w	r1, [r0, #437]	; 0x1b5
   15ff0:	4299      	cmp	r1, r3
   15ff2:	d11e      	bne.n	16032 <ll_phy_req_send+0x82>
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   15ff4:	f004 0407 	and.w	r4, r4, #7
   15ff8:	f8b0 21b6 	ldrh.w	r2, [r0, #438]	; 0x1b6
   15ffc:	00a4      	lsls	r4, r4, #2
   15ffe:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
   16002:	f007 0307 	and.w	r3, r7, #7
   16006:	ea44 1343 	orr.w	r3, r4, r3, lsl #5
   1600a:	f006 0601 	and.w	r6, r6, #1
   1600e:	f422 62df 	bic.w	r2, r2, #1784	; 0x6f8
   16012:	f022 0207 	bic.w	r2, r2, #7
   16016:	ea43 2346 	orr.w	r3, r3, r6, lsl #9
   1601a:	4313      	orrs	r3, r2
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1601c:	f990 203d 	ldrsb.w	r2, [r0, #61]	; 0x3d
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   16020:	f8a0 31b6 	strh.w	r3, [r0, #438]	; 0x1b6
	conn->llcp_phy.req++;
   16024:	3101      	adds	r1, #1
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   16026:	2a00      	cmp	r2, #0
	conn->llcp_phy.req++;
   16028:	f880 11b4 	strb.w	r1, [r0, #436]	; 0x1b4
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) && conn->lll.role) {
   1602c:	db0a      	blt.n	16044 <ll_phy_req_send+0x94>
}
   1602e:	4628      	mov	r0, r5
   16030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   16032:	250c      	movs	r5, #12
}
   16034:	4628      	mov	r0, r5
   16036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   16038:	251a      	movs	r5, #26
}
   1603a:	4628      	mov	r0, r5
   1603c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1603e:	2502      	movs	r5, #2
}
   16040:	4628      	mov	r0, r5
   16042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		ull_slave_latency_cancel(conn, handle);
   16044:	2100      	movs	r1, #0
   16046:	f003 fba3 	bl	19790 <ull_slave_latency_cancel>
}
   1604a:	4628      	mov	r0, r5
   1604c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1604e:	bf00      	nop
   16050:	2000e22c 	.word	0x2000e22c

00016054 <ll_apto_get>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   16054:	b9d8      	cbnz	r0, 1608e <ll_apto_get+0x3a>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   16056:	4602      	mov	r2, r0
{
   16058:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1605a:	480e      	ldr	r0, [pc, #56]	; (16094 <ll_apto_get+0x40>)
   1605c:	460c      	mov	r4, r1
   1605e:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   16062:	f7fa fb8b 	bl	1077c <mem_get>
   16066:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   16068:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   1606a:	b970      	cbnz	r0, 1608a <ll_apto_get+0x36>
	*apto = conn->apto_reload * conn->lll.interval * 125U / 1000;
   1606c:	f8b2 30d2 	ldrh.w	r3, [r2, #210]	; 0xd2
   16070:	8dd2      	ldrh	r2, [r2, #46]	; 0x2e
   16072:	fb02 f303 	mul.w	r3, r2, r3
   16076:	ebc3 1143 	rsb	r1, r3, r3, lsl #5
   1607a:	4a07      	ldr	r2, [pc, #28]	; (16098 <ll_apto_get+0x44>)
   1607c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
   16080:	fba2 2303 	umull	r2, r3, r2, r3
   16084:	099b      	lsrs	r3, r3, #6
   16086:	8023      	strh	r3, [r4, #0]
}
   16088:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1608a:	2002      	movs	r0, #2
}
   1608c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1608e:	2002      	movs	r0, #2
}
   16090:	4770      	bx	lr
   16092:	bf00      	nop
   16094:	2000e22c 	.word	0x2000e22c
   16098:	10624dd3 	.word	0x10624dd3

0001609c <ll_apto_set>:
	if (handle >= CONFIG_BT_MAX_CONN) {
   1609c:	b9e0      	cbnz	r0, 160d8 <ll_apto_set+0x3c>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   1609e:	4602      	mov	r2, r0
{
   160a0:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   160a2:	480e      	ldr	r0, [pc, #56]	; (160dc <ll_apto_set+0x40>)
   160a4:	460c      	mov	r4, r1
   160a6:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   160aa:	f7fa fb67 	bl	1077c <mem_get>
   160ae:	4602      	mov	r2, r0
	if (conn->lll.handle != handle) {
   160b0:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   160b2:	b978      	cbnz	r0, 160d4 <ll_apto_set+0x38>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10U * 1000U,
   160b4:	f8b2 c02e 	ldrh.w	ip, [r2, #46]	; 0x2e
   160b8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   160bc:	fb03 fc0c 	mul.w	ip, r3, ip
   160c0:	f242 7310 	movw	r3, #10000	; 0x2710
   160c4:	fb03 c304 	mla	r3, r3, r4, ip
   160c8:	3b01      	subs	r3, #1
   160ca:	fbb3 f3fc 	udiv	r3, r3, ip
   160ce:	f8a2 30d2 	strh.w	r3, [r2, #210]	; 0xd2
}
   160d2:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   160d4:	2002      	movs	r0, #2
}
   160d6:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   160d8:	2002      	movs	r0, #2
}
   160da:	4770      	bx	lr
   160dc:	2000e22c 	.word	0x2000e22c

000160e0 <ull_conn_init>:
	err = init_reset();
   160e0:	f7ff b81c 	b.w	1511c <init_reset>

000160e4 <ull_conn_reset>:
{
   160e4:	b510      	push	{r4, lr}
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   160e6:	2200      	movs	r2, #0
   160e8:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   160ec:	4813      	ldr	r0, [pc, #76]	; (1613c <ull_conn_reset+0x58>)
   160ee:	f7fa fb45 	bl	1077c <mem_get>
   160f2:	4604      	mov	r4, r0
	err = ull_ticker_stop_with_mark(TICKER_ID_CONN_BASE + handle,
   160f4:	f100 021c 	add.w	r2, r0, #28
   160f8:	4601      	mov	r1, r0
   160fa:	2003      	movs	r0, #3
   160fc:	f7fe fa52 	bl	145a4 <ull_ticker_stop_with_mark>
	LL_ASSERT(err == 0 || err == -EALREADY);
   16100:	b108      	cbz	r0, 16106 <ull_conn_reset+0x22>
   16102:	3045      	adds	r0, #69	; 0x45
   16104:	d10b      	bne.n	1611e <ull_conn_reset+0x3a>
	MFIFO_INIT(conn_tx);
   16106:	480e      	ldr	r0, [pc, #56]	; (16140 <ull_conn_reset+0x5c>)
	MFIFO_INIT(conn_ack);
   16108:	490e      	ldr	r1, [pc, #56]	; (16144 <ull_conn_reset+0x60>)
	conn_upd_curr = NULL;
   1610a:	4a0f      	ldr	r2, [pc, #60]	; (16148 <ull_conn_reset+0x64>)
	conn->lll.link_tx_free = NULL;
   1610c:	2300      	movs	r3, #0
	MFIFO_INIT(conn_tx);
   1610e:	8043      	strh	r3, [r0, #2]
	MFIFO_INIT(conn_ack);
   16110:	804b      	strh	r3, [r1, #2]
	conn->lll.link_tx_free = NULL;
   16112:	67a3      	str	r3, [r4, #120]	; 0x78
}
   16114:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	conn_upd_curr = NULL;
   16118:	6013      	str	r3, [r2, #0]
	err = init_reset();
   1611a:	f7fe bfff 	b.w	1511c <init_reset>
	LL_ASSERT(err == 0 || err == -EALREADY);
   1611e:	4a0b      	ldr	r2, [pc, #44]	; (1614c <ull_conn_reset+0x68>)
   16120:	490b      	ldr	r1, [pc, #44]	; (16150 <ull_conn_reset+0x6c>)
   16122:	480c      	ldr	r0, [pc, #48]	; (16154 <ull_conn_reset+0x70>)
   16124:	f240 63f4 	movw	r3, #1780	; 0x6f4
   16128:	f00b fcfc 	bl	21b24 <printk>
   1612c:	4040      	eors	r0, r0
   1612e:	f380 8811 	msr	BASEPRI, r0
   16132:	f04f 0003 	mov.w	r0, #3
   16136:	df02      	svc	2
   16138:	e7e5      	b.n	16106 <ull_conn_reset+0x22>
   1613a:	bf00      	nop
   1613c:	2000e22c 	.word	0x2000e22c
   16140:	200005d8 	.word	0x200005d8
   16144:	20000594 	.word	0x20000594
   16148:	2000e400 	.word	0x2000e400
   1614c:	000288c0 	.word	0x000288c0
   16150:	000289d0 	.word	0x000289d0
   16154:	00028404 	.word	0x00028404

00016158 <ull_conn_default_tx_octets_get>:
	return default_tx_octets;
   16158:	4b01      	ldr	r3, [pc, #4]	; (16160 <ull_conn_default_tx_octets_get+0x8>)
}
   1615a:	8818      	ldrh	r0, [r3, #0]
   1615c:	4770      	bx	lr
   1615e:	bf00      	nop
   16160:	2000ed76 	.word	0x2000ed76

00016164 <ull_conn_default_tx_time_get>:
	return default_tx_time;
   16164:	4b01      	ldr	r3, [pc, #4]	; (1616c <ull_conn_default_tx_time_get+0x8>)
}
   16166:	8818      	ldrh	r0, [r3, #0]
   16168:	4770      	bx	lr
   1616a:	bf00      	nop
   1616c:	2000ed78 	.word	0x2000ed78

00016170 <ull_conn_default_phy_tx_get>:
	return default_phy_tx;
   16170:	4b01      	ldr	r3, [pc, #4]	; (16178 <ull_conn_default_phy_tx_get+0x8>)
}
   16172:	7818      	ldrb	r0, [r3, #0]
   16174:	4770      	bx	lr
   16176:	bf00      	nop
   16178:	2000f317 	.word	0x2000f317

0001617c <ull_conn_default_phy_rx_get>:
	return default_phy_rx;
   1617c:	4b01      	ldr	r3, [pc, #4]	; (16184 <ull_conn_default_phy_rx_get+0x8>)
}
   1617e:	7818      	ldrb	r0, [r3, #0]
   16180:	4770      	bx	lr
   16182:	bf00      	nop
   16184:	2000f316 	.word	0x2000f316

00016188 <ull_conn_setup>:
	lll = *((struct lll_conn **)((uint8_t *)ftr->param +
   16188:	688b      	ldr	r3, [r1, #8]
   1618a:	689b      	ldr	r3, [r3, #8]
	switch (lll->role) {
   1618c:	f893 c021 	ldrb.w	ip, [r3, #33]	; 0x21
   16190:	ea5f 1cdc 	movs.w	ip, ip, lsr #7
   16194:	d10e      	bne.n	161b4 <ull_conn_setup+0x2c>
{
   16196:	b510      	push	{r4, lr}
		LL_ASSERT(0);
   16198:	4a08      	ldr	r2, [pc, #32]	; (161bc <ull_conn_setup+0x34>)
   1619a:	4909      	ldr	r1, [pc, #36]	; (161c0 <ull_conn_setup+0x38>)
   1619c:	4809      	ldr	r0, [pc, #36]	; (161c4 <ull_conn_setup+0x3c>)
   1619e:	f240 331d 	movw	r3, #797	; 0x31d
   161a2:	f00b fcbf 	bl	21b24 <printk>
   161a6:	4040      	eors	r0, r0
   161a8:	f380 8811 	msr	BASEPRI, r0
   161ac:	f04f 0003 	mov.w	r0, #3
   161b0:	df02      	svc	2
}
   161b2:	bd10      	pop	{r4, pc}
		ull_slave_setup(link, rx, ftr, lll);
   161b4:	460a      	mov	r2, r1
   161b6:	3208      	adds	r2, #8
   161b8:	f7ec b9b6 	b.w	2528 <ull_slave_setup>
   161bc:	000288c0 	.word	0x000288c0
   161c0:	0002849c 	.word	0x0002849c
   161c4:	00028404 	.word	0x00028404

000161c8 <ull_conn_rx>:
	conn = ll_connected_get((*rx)->hdr.handle);
   161c8:	680b      	ldr	r3, [r1, #0]
	if (handle >= CONFIG_BT_MAX_CONN) {
   161ca:	88da      	ldrh	r2, [r3, #6]
   161cc:	2a00      	cmp	r2, #0
   161ce:	f040 80c1 	bne.w	16354 <ull_conn_rx+0x18c>
{
   161d2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   161d6:	460d      	mov	r5, r1
   161d8:	b083      	sub	sp, #12
   161da:	4606      	mov	r6, r0
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   161dc:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   161e0:	48a6      	ldr	r0, [pc, #664]	; (1647c <ull_conn_rx+0x2b4>)
   161e2:	f7fa facb 	bl	1077c <mem_get>
   161e6:	4604      	mov	r4, r0
	if (conn->lll.handle != handle) {
   161e8:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
   161ea:	2800      	cmp	r0, #0
   161ec:	f040 80ab 	bne.w	16346 <ull_conn_rx+0x17e>
	pdu_rx = (void *)(*rx)->pdu;
   161f0:	682f      	ldr	r7, [r5, #0]
	switch (pdu_rx->ll_id) {
   161f2:	7f3a      	ldrb	r2, [r7, #28]
   161f4:	f002 0203 	and.w	r2, r2, #3
   161f8:	2a03      	cmp	r2, #3
   161fa:	d127      	bne.n	1624c <ull_conn_rx+0x84>

	opcode = pdu_rx->llctrl.opcode;

#if defined(CONFIG_BT_CTLR_LE_ENC)
	/* FIXME: do check in individual case to reduce CPU time */
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   161fc:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	opcode = pdu_rx->llctrl.opcode;
   16200:	f897 801f 	ldrb.w	r8, [r7, #31]
	if (conn->llcp_enc.pause_rx && ctrl_is_unexpected(conn, opcode)) {
   16204:	07d3      	lsls	r3, r2, #31
   16206:	d53b      	bpl.n	16280 <ull_conn_rx+0xb8>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   16208:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1620c:	2b00      	cmp	r3, #0
   1620e:	f2c0 80a5 	blt.w	1635c <ull_conn_rx+0x194>
	return (!conn->lll.role &&
   16212:	0750      	lsls	r0, r2, #29
   16214:	f100 80d1 	bmi.w	163ba <ull_conn_rx+0x1f2>
		((!conn->llcp_enc.refresh &&
   16218:	f1b8 0f02 	cmp.w	r8, #2
   1621c:	f000 82f2 	beq.w	16804 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   16220:	f1b8 0f05 	cmp.w	r8, #5
   16224:	d04f      	beq.n	162c6 <ull_conn_rx+0xfe>
   16226:	f1b8 0f06 	cmp.w	r8, #6
   1622a:	f000 852b 	beq.w	16c84 <ull_conn_rx+0xabc>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   1622e:	f1b8 0f0d 	cmp.w	r8, #13
   16232:	f000 83ca 	beq.w	169ca <ull_conn_rx+0x802>
   16236:	f1b8 0f11 	cmp.w	r8, #17
   1623a:	f000 8288 	beq.w	1674e <ull_conn_rx+0x586>
		conn->llcp_terminate.reason_peer =
   1623e:	223d      	movs	r2, #61	; 0x3d
			BT_HCI_ERR_TERM_DUE_TO_MIC_FAIL;

		/* Mark for buffer for release */
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16240:	2301      	movs	r3, #1
		conn->llcp_terminate.reason_peer =
   16242:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b

		return 0;
   16246:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16248:	713b      	strb	r3, [r7, #4]
		return 0;
   1624a:	e00a      	b.n	16262 <ull_conn_rx+0x9a>
	switch (pdu_rx->ll_id) {
   1624c:	b962      	cbnz	r2, 16268 <ull_conn_rx+0xa0>
		if (conn->llcp_enc.pause_rx) {
   1624e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   16252:	07db      	lsls	r3, r3, #31
			conn->llcp_terminate.reason_peer =
   16254:	bf44      	itt	mi
   16256:	233d      	movmi	r3, #61	; 0x3d
   16258:	f884 313b 	strbmi.w	r3, [r4, #315]	; 0x13b
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1625c:	2301      	movs	r3, #1
   1625e:	713b      	strb	r3, [r7, #4]
	return 0;
   16260:	2000      	movs	r0, #0
}
   16262:	b003      	add	sp, #12
   16264:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (conn->llcp_enc.pause_rx) {
   16268:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   1626c:	07d2      	lsls	r2, r2, #31
   1626e:	d5f7      	bpl.n	16260 <ull_conn_rx+0x98>
			conn->llcp_terminate.reason_peer =
   16270:	213d      	movs	r1, #61	; 0x3d
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16272:	2201      	movs	r2, #1
			conn->llcp_terminate.reason_peer =
   16274:	f884 113b 	strb.w	r1, [r4, #315]	; 0x13b
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16278:	713a      	strb	r2, [r7, #4]
}
   1627a:	b003      	add	sp, #12
   1627c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	}
#endif /* CONFIG_BT_CTLR_LE_ENC */

	switch (opcode) {
   16280:	f1b8 0f18 	cmp.w	r8, #24
   16284:	d81f      	bhi.n	162c6 <ull_conn_rx+0xfe>
   16286:	e8df f018 	tbh	[pc, r8, lsl #1]
   1628a:	01f5      	.short	0x01f5
   1628c:	02bd01c0 	.word	0x02bd01c0
   16290:	001e0019 	.word	0x001e0019
   16294:	0441001e 	.word	0x0441001e
   16298:	034d0297 	.word	0x034d0297
   1629c:	02cd0318 	.word	0x02cd0318
   162a0:	03e30422 	.word	0x03e30422
   162a4:	001e03a0 	.word	0x001e03a0
   162a8:	001e0413 	.word	0x001e0413
   162ac:	016b0262 	.word	0x016b0262
   162b0:	00fd0161 	.word	0x00fd0161
   162b4:	013000fd 	.word	0x013000fd
   162b8:	0183001e 	.word	0x0183001e
		break;

#if defined(CONFIG_BT_CTLR_LE_ENC)
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_ENC_REQ:
		if (!conn->lll.role ||
   162bc:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   162c0:	2b00      	cmp	r3, #0
   162c2:	f2c0 8092 	blt.w	163ea <ull_conn_rx+0x222>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   162c6:	486e      	ldr	r0, [pc, #440]	; (16480 <ull_conn_rx+0x2b8>)
   162c8:	f7fa fa26 	bl	10718 <mem_acquire>
	if (!tx) {
   162cc:	2800      	cmp	r0, #0
   162ce:	f000 85ab 	beq.w	16e28 <ull_conn_rx+0xc60>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   162d2:	7903      	ldrb	r3, [r0, #4]
	pdu->llctrl.unknown_rsp.type = type;
   162d4:	f880 8008 	strb.w	r8, [r0, #8]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   162d8:	f043 0303 	orr.w	r3, r3, #3
   162dc:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, unknown_rsp) +
   162de:	2302      	movs	r3, #2
   162e0:	7143      	strb	r3, [r0, #5]
	    conn->tx_head &&
   162e2:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   162e6:	2207      	movs	r2, #7
   162e8:	71c2      	strb	r2, [r0, #7]
	if (
   162ea:	b1e3      	cbz	r3, 16326 <ull_conn_rx+0x15e>
	    !conn->llcp_enc.pause_tx &&
   162ec:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   162f0:	0795      	lsls	r5, r2, #30
   162f2:	d418      	bmi.n	16326 <ull_conn_rx+0x15e>
	    !conn->llcp_phy.pause_tx &&
   162f4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   162f8:	07d1      	lsls	r1, r2, #31
   162fa:	d414      	bmi.n	16326 <ull_conn_rx+0x15e>
		if (conn->tx_head == conn->tx_data) {
   162fc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   16300:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16302:	bf04      	itt	eq
   16304:	681a      	ldreq	r2, [r3, #0]
   16306:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1630a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1630e:	b97a      	cbnz	r2, 16330 <ull_conn_rx+0x168>
			tx->next = conn->tx_head->next;
   16310:	681a      	ldr	r2, [r3, #0]
   16312:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   16314:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   16316:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   16318:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   1631c:	2b00      	cmp	r3, #0
   1631e:	d19d      	bne.n	1625c <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   16320:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16324:	e79a      	b.n	1625c <ull_conn_rx+0x94>
		if (!conn->tx_ctrl) {
   16326:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1632a:	2a00      	cmp	r2, #0
   1632c:	f000 84a0 	beq.w	16c70 <ull_conn_rx+0xaa8>
	tx->next = conn->tx_ctrl_last->next;
   16330:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   16334:	681a      	ldr	r2, [r3, #0]
   16336:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   16338:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1633a:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1633c:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   16340:	2b00      	cmp	r3, #0
   16342:	d18b      	bne.n	1625c <ull_conn_rx+0x94>
   16344:	e7ec      	b.n	16320 <ull_conn_rx+0x158>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16346:	682b      	ldr	r3, [r5, #0]
   16348:	2201      	movs	r2, #1
		return 0;
   1634a:	2000      	movs	r0, #0
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1634c:	711a      	strb	r2, [r3, #4]
}
   1634e:	b003      	add	sp, #12
   16350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16354:	2201      	movs	r2, #1
   16356:	711a      	strb	r2, [r3, #4]
		return 0;
   16358:	2000      	movs	r0, #0
}
   1635a:	4770      	bx	lr
	       (conn->lll.role &&
   1635c:	0751      	lsls	r1, r2, #29
   1635e:	d439      	bmi.n	163d4 <ull_conn_rx+0x20c>
		((!conn->llcp_enc.refresh &&
   16360:	f1b8 0f07 	cmp.w	r8, #7
   16364:	f000 8228 	beq.w	167b8 <ull_conn_rx+0x5f0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP) &&
   16368:	f1b8 0f02 	cmp.w	r8, #2
   1636c:	f000 824a 	beq.w	16804 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   16370:	f1b8 0f06 	cmp.w	r8, #6
   16374:	f47f af5b 	bne.w	1622e <ull_conn_rx+0x66>

		break;
#endif /* CONFIG_BT_CENTRAL */

	case PDU_DATA_LLCTRL_TYPE_START_ENC_RSP:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16378:	7f7b      	ldrb	r3, [r7, #29]
   1637a:	2b01      	cmp	r3, #1
   1637c:	d1a3      	bne.n	162c6 <ull_conn_rx+0xfe>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (conn->lll.role) {
#if !defined(CONFIG_BT_CTLR_FAST_ENC)
			if ((conn->llcp_req != conn->llcp_ack) &&
   1637e:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   16382:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16386:	428b      	cmp	r3, r1
   16388:	f001 8061 	beq.w	1744e <ull_conn_rx+0x1286>
   1638c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16390:	2b03      	cmp	r3, #3
   16392:	d198      	bne.n	162c6 <ull_conn_rx+0xfe>
			    (conn->llcp_type != LLCP_ENCRYPTION)) {
				goto ull_conn_rx_unknown_rsp_send;
			}

			/* start enc rsp to be scheduled in slave  prepare */
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   16394:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16398:	f36f 0301 	bfc	r3, #0, #2
   1639c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_enc.pause_rx = 0U;
			conn->llcp_enc.pause_tx = 0U;
		}

		/* enqueue the start enc resp (encryption change/refresh) */
		if (conn->llcp_enc.refresh) {
   163a0:	0750      	lsls	r0, r2, #29
   163a2:	d505      	bpl.n	163b0 <ull_conn_rx+0x1e8>
			conn->llcp_enc.refresh = 0U;
   163a4:	f36f 0282 	bfc	r2, #2, #1

			/* key refresh event */
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   163a8:	2316      	movs	r3, #22
			conn->llcp_enc.refresh = 0U;
   163aa:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
			(*rx)->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   163ae:	713b      	strb	r3, [r7, #4]
				break;
			}
		}

		/* Procedure complete */
		conn->procedure_expire = 0U;
   163b0:	2300      	movs	r3, #0
   163b2:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   163b6:	4618      	mov	r0, r3
		break;
   163b8:	e753      	b.n	16262 <ull_conn_rx+0x9a>
		 (conn->llcp_enc.refresh &&
   163ba:	f1b8 0f02 	cmp.w	r8, #2
   163be:	f000 8221 	beq.w	16804 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   163c2:	f1b8 0f0b 	cmp.w	r8, #11
   163c6:	f000 8462 	beq.w	16c8e <ull_conn_rx+0xac6>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   163ca:	f1b8 0f04 	cmp.w	r8, #4
   163ce:	f47f af27 	bne.w	16220 <ull_conn_rx+0x58>
   163d2:	e778      	b.n	162c6 <ull_conn_rx+0xfe>
		 (conn->llcp_enc.refresh &&
   163d4:	f1b8 0f02 	cmp.w	r8, #2
   163d8:	f000 8214 	beq.w	16804 <ull_conn_rx+0x63c>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   163dc:	f1b8 0f0b 	cmp.w	r8, #11
   163e0:	f000 845a 	beq.w	16c98 <ull_conn_rx+0xad0>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   163e4:	f1b8 0f03 	cmp.w	r8, #3
   163e8:	d1c2      	bne.n	16370 <ull_conn_rx+0x1a8>
		if (!conn->lll.role ||
   163ea:	7f7b      	ldrb	r3, [r7, #29]
   163ec:	2b17      	cmp	r3, #23
   163ee:	f47f af6a 	bne.w	162c6 <ull_conn_rx+0xfe>
		if (unlikely(((conn->llcp_req - conn->llcp_ack) & 0x03) ==
   163f2:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   163f6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   163fa:	1a9b      	subs	r3, r3, r2
   163fc:	f003 0303 	and.w	r3, r3, #3
   16400:	2b02      	cmp	r3, #2
   16402:	f001 8104 	beq.w	1760e <ull_conn_rx+0x1446>
		memcpy(&conn->llcp_enc.rand[0],
   16406:	2208      	movs	r2, #8
   16408:	f107 0120 	add.w	r1, r7, #32
   1640c:	f204 1061 	addw	r0, r4, #353	; 0x161
   16410:	f00e f82a 	bl	24468 <memcpy>
		conn->llcp_enc.ediv[0] = pdu_rx->llctrl.enc_req.ediv[0];
   16414:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
   16418:	f884 315f 	strb.w	r3, [r4, #351]	; 0x15f
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   1641c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   16420:	f894 20f8 	ldrb.w	r2, [r4, #248]	; 0xf8
		conn->llcp_enc.ediv[1] = pdu_rx->llctrl.enc_req.ediv[1];
   16424:	f884 3160 	strb.w	r3, [r4, #352]	; 0x160
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16428:	6829      	ldr	r1, [r5, #0]
		conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1642a:	2301      	movs	r3, #1
   1642c:	f363 0201 	bfi	r2, r3, #0, #2
   16430:	f884 20f8 	strb.w	r2, [r4, #248]	; 0xf8
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16434:	710b      	strb	r3, [r1, #4]
		conn->llcp_ack -= 2U;
   16436:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
		conn->llcp_type = LLCP_ENCRYPTION;
   1643a:	2103      	movs	r1, #3
		conn->llcp_ack -= 2U;
   1643c:	3b02      	subs	r3, #2
   1643e:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&conn->llcp.encryption.skd[0],
   16442:	2208      	movs	r2, #8
		conn->llcp_type = LLCP_ENCRYPTION;
   16444:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
		memcpy(&conn->llcp.encryption.skd[0],
   16448:	f104 00fa 	add.w	r0, r4, #250	; 0xfa
   1644c:	f107 012a 	add.w	r1, r7, #42	; 0x2a
   16450:	f00e f80a 	bl	24468 <memcpy>
		memcpy(&conn->lll.ccm_rx.iv[0],
   16454:	2204      	movs	r2, #4
   16456:	f107 0132 	add.w	r1, r7, #50	; 0x32
   1645a:	f104 0098 	add.w	r0, r4, #152	; 0x98
   1645e:	f00e f803 	bl	24468 <memcpy>
		conn->llcp_enc.pause_rx = 1U;
   16462:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
		conn->procedure_expire = conn->procedure_reload;
   16466:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
   1646a:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->llcp_enc.pause_rx = 1U;
   1646e:	f043 0301 	orr.w	r3, r3, #1
   16472:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	int nack = 0;
   16476:	2000      	movs	r0, #0
		break;
   16478:	e6f3      	b.n	16262 <ull_conn_rx+0x9a>
   1647a:	bf00      	nop
   1647c:	2000e22c 	.word	0x2000e22c
   16480:	2000e484 	.word	0x2000e484

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	case PDU_DATA_LLCTRL_TYPE_LENGTH_RSP:
	case PDU_DATA_LLCTRL_TYPE_LENGTH_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_LENGTH_REQ,
   16484:	7f7b      	ldrb	r3, [r7, #29]
   16486:	2b09      	cmp	r3, #9
   16488:	f47f af1d 	bne.w	162c6 <ull_conn_rx+0xfe>
	if (pdu_rx->llctrl.opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1648c:	f1b8 0f14 	cmp.w	r8, #20
   16490:	f000 8442 	beq.w	16d18 <ull_conn_rx+0xb50>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16494:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
	if (/* Local idle, and Peer request then complete the Peer procedure
   16498:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   1649c:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   164a0:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   164a4:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   164a8:	f8b4 a060 	ldrh.w	sl, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   164ac:	4293      	cmp	r3, r2
   164ae:	f000 87df 	beq.w	17470 <ull_conn_rx+0x12a8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   164b2:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
	struct node_tx *tx = NULL;
   164b6:	2300      	movs	r3, #0
	       tx) ||
   164b8:	f001 0107 	and.w	r1, r1, #7
   164bc:	2902      	cmp	r1, #2
   164be:	f000 8441 	beq.w	16d44 <ull_conn_rx+0xb7c>
   164c2:	f897 801f 	ldrb.w	r8, [r7, #31]
		if (pdu_rx->llctrl.opcode != PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) {
   164c6:	f1b8 0f15 	cmp.w	r8, #21
   164ca:	f43f aec9 	beq.w	16260 <ull_conn_rx+0x98>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   164ce:	4618      	mov	r0, r3
   164d0:	49d2      	ldr	r1, [pc, #840]	; (1681c <ull_conn_rx+0x654>)
   164d2:	f7fa f93b 	bl	1074c <mem_release>
			if (conn->llcp_length.state ==
   164d6:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
   164da:	f003 0307 	and.w	r3, r3, #7
   164de:	2b04      	cmp	r3, #4
   164e0:	f47f aebe 	bne.w	16260 <ull_conn_rx+0x98>
				return -EBUSY;
   164e4:	f06f 000f 	mvn.w	r0, #15
   164e8:	e6bb      	b.n	16262 <ull_conn_rx+0x9a>
		break;
#endif /* CONFIG_BT_CTLR_DATA_LENGTH */

#if defined(CONFIG_BT_CTLR_PHY)
	case PDU_DATA_LLCTRL_TYPE_PHY_REQ:
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PHY_REQ, pdu_rx->len)) {
   164ea:	7f7b      	ldrb	r3, [r7, #29]
   164ec:	2b03      	cmp	r3, #3
   164ee:	f47f aeea 	bne.w	162c6 <ull_conn_rx+0xfe>
			goto ull_conn_rx_unknown_rsp_send;
		}

		if (!conn->lll.role) {
   164f2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   164f6:	2b00      	cmp	r3, #0
   164f8:	f2c0 84d0 	blt.w	16e9c <ull_conn_rx+0xcd4>
			if ((conn->llcp_phy.ack !=
   164fc:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
			     conn->llcp_phy.req) &&
   16500:	f894 01b4 	ldrb.w	r0, [r4, #436]	; 0x1b4
			if ((conn->llcp_phy.ack !=
   16504:	4281      	cmp	r1, r0
   16506:	d007      	beq.n	16518 <ull_conn_rx+0x350>
			    ((conn->llcp_phy.state ==
			      LLCP_PHY_STATE_ACK_WAIT) ||
			     (conn->llcp_phy.state ==
			      LLCP_PHY_STATE_RSP_WAIT) ||
   16508:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
   1650c:	f002 0203 	and.w	r2, r2, #3
			     conn->llcp_phy.req) &&
   16510:	3a01      	subs	r2, #1
   16512:	2a02      	cmp	r2, #2
   16514:	f240 8711 	bls.w	1733a <ull_conn_rx+0x1172>
				nack = reject_ext_ind_send(conn, *rx,
					PDU_DATA_LLCTRL_TYPE_PHY_REQ,
					BT_HCI_ERR_LL_PROC_COLLISION);
#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
#if defined(CONFIG_BT_CTLR_LE_ENC)
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   16518:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1651c:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   16520:	1a9b      	subs	r3, r3, r2
   16522:	f003 0303 	and.w	r3, r3, #3
   16526:	2b02      	cmp	r3, #2
   16528:	f000 8640 	beq.w	171ac <ull_conn_rx+0xfe4>
				      0x03) == 0x02) &&
				    (conn->llcp_type !=
				     LLCP_ENCRYPTION)) ||
   1652c:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   16530:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
   16534:	429a      	cmp	r2, r3
   16536:	f000 86bd 	beq.w	172b4 <ull_conn_rx+0x10ec>
			} else if (((conn->llcp_req - conn->llcp_ack) &
				    0x03) == 0x02) {
#endif /* !CONFIG_BT_CTLR_LE_ENC */
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */
				/* Different procedure collision */
				nack = reject_ext_ind_send(conn, *rx,
   1653a:	232a      	movs	r3, #42	; 0x2a
   1653c:	2216      	movs	r2, #22
   1653e:	4639      	mov	r1, r7
   16540:	4620      	mov	r0, r4
}
   16542:	b003      	add	sp, #12
   16544:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
				nack = reject_ext_ind_send(conn, *rx,
   16548:	f7fe bf4a 	b.w	153e0 <reject_ext_ind_send>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_RSP, pdu_rx->len)) {
   1654c:	7f7a      	ldrb	r2, [r7, #29]
   1654e:	2a01      	cmp	r2, #1
   16550:	f47f aeb9 	bne.w	162c6 <ull_conn_rx+0xfe>
		conn->procedure_expire = 0U;
   16554:	2300      	movs	r3, #0
   16556:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   1655a:	4618      	mov	r0, r3
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1655c:	713a      	strb	r2, [r7, #4]
		break;
   1655e:	e680      	b.n	16262 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PING_REQ, pdu_rx->len)) {
   16560:	7f7d      	ldrb	r5, [r7, #29]
   16562:	2d01      	cmp	r5, #1
   16564:	f47f aeaf 	bne.w	162c6 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16568:	48ac      	ldr	r0, [pc, #688]	; (1681c <ull_conn_rx+0x654>)
   1656a:	f7fa f8d5 	bl	10718 <mem_acquire>
	if (!tx) {
   1656e:	4601      	mov	r1, r0
   16570:	2800      	cmp	r0, #0
   16572:	f000 8459 	beq.w	16e28 <ull_conn_rx+0xc60>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16576:	7903      	ldrb	r3, [r0, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, ping_rsp) +
   16578:	7145      	strb	r5, [r0, #5]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1657a:	f043 0303 	orr.w	r3, r3, #3
   1657e:	7103      	strb	r3, [r0, #4]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   16580:	2313      	movs	r3, #19
   16582:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16584:	4620      	mov	r0, r4
   16586:	f7fe ff7b 	bl	15480 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   1658a:	713d      	strb	r5, [r7, #4]
	return 0;
   1658c:	2000      	movs	r0, #0
   1658e:	e668      	b.n	16262 <ull_conn_rx+0x9a>
#if defined(CONFIG_BT_PERIPHERAL)
	case PDU_DATA_LLCTRL_TYPE_PHY_UPD_IND:
	{
		uint8_t err;

		if (!conn->lll.role ||
   16590:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16594:	2b00      	cmp	r3, #0
   16596:	f6bf ae96 	bge.w	162c6 <ull_conn_rx+0xfe>
   1659a:	7f7b      	ldrb	r3, [r7, #29]
   1659c:	2b05      	cmp	r3, #5
   1659e:	f47f ae92 	bne.w	162c6 <ull_conn_rx+0xfe>
	if (!((ind->m_to_s_phy | ind->s_to_m_phy) & 0x07)) {
   165a2:	f897 1020 	ldrb.w	r1, [r7, #32]
   165a6:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   165aa:	ea41 0203 	orr.w	r2, r1, r3
   165ae:	f012 0007 	ands.w	r0, r2, #7
   165b2:	f040 8602 	bne.w	171ba <ull_conn_rx+0xff2>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   165b6:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   165ba:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   165be:	429a      	cmp	r2, r3
   165c0:	f43f ae4c 	beq.w	1625c <ull_conn_rx+0x94>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   165c4:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   165c8:	f001 0103 	and.w	r1, r1, #3
   165cc:	2902      	cmp	r1, #2
   165ce:	f47f ae45 	bne.w	1625c <ull_conn_rx+0x94>
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   165d2:	f894 1064 	ldrb.w	r1, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   165d6:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   165da:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   165de:	460b      	mov	r3, r1
   165e0:	f361 1306 	bfi	r3, r1, #4, #3
		conn->llcp_phy.pause_tx = 0U;
   165e4:	f360 0200 	bfi	r2, r0, #0, #1
   165e8:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   165ec:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
		if (!conn->llcp_phy.cmd) {
   165f0:	f012 0204 	ands.w	r2, r2, #4
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   165f4:	682b      	ldr	r3, [r5, #0]
		conn->procedure_expire = 0U;
   165f6:	f8a4 00cc 	strh.w	r0, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   165fa:	f3c1 0102 	ubfx	r1, r1, #0, #3
		if (!conn->llcp_phy.cmd) {
   165fe:	f041 8013 	bne.w	17628 <ull_conn_rx+0x1460>
			(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16602:	2101      	movs	r1, #1
   16604:	7119      	strb	r1, [r3, #4]
	int nack = 0;
   16606:	4610      	mov	r0, r2
   16608:	e62b      	b.n	16262 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   1660a:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   1660e:	2b00      	cmp	r3, #0
   16610:	f6bf ae59 	bge.w	162c6 <ull_conn_rx+0xfe>
   16614:	7f7b      	ldrb	r3, [r7, #29]
   16616:	2b08      	cmp	r3, #8
   16618:	f47f ae55 	bne.w	162c6 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.chan_map_ind.instant);
   1661c:	f8b7 5025 	ldrh.w	r5, [r7, #37]	; 0x25
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   16620:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   16622:	1aeb      	subs	r3, r5, r3
   16624:	041e      	lsls	r6, r3, #16
   16626:	f100 868b 	bmi.w	17340 <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   1662a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1662e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   16632:	1a9b      	subs	r3, r3, r2
   16634:	f003 0303 	and.w	r3, r3, #3
   16638:	2b02      	cmp	r3, #2
   1663a:	f000 86bb 	beq.w	173b4 <ull_conn_rx+0x11ec>
	memcpy(&conn->llcp.chan_map.chm[0], &pdu->llctrl.chan_map_ind.chm[0],
   1663e:	2205      	movs	r2, #5
   16640:	f107 0120 	add.w	r1, r7, #32
   16644:	f104 00ed 	add.w	r0, r4, #237	; 0xed
   16648:	f00d ff0e 	bl	24468 <memcpy>
	conn->llcp.chan_map.initiate = 0U;
   1664c:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp_ack -= 2U;
   16650:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
	conn->llcp.chan_map.instant = instant;
   16654:	f8a4 50f2 	strh.w	r5, [r4, #242]	; 0xf2
	conn->llcp.chan_map.initiate = 0U;
   16658:	f36f 0200 	bfc	r2, #0, #1
   1665c:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
	conn->llcp_type = LLCP_CHAN_MAP;
   16660:	2102      	movs	r1, #2
	conn->llcp_ack -= 2U;
   16662:	3b02      	subs	r3, #2
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16664:	2201      	movs	r2, #1
	conn->llcp_type = LLCP_CHAN_MAP;
   16666:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   1666a:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
	int nack = 0;
   1666e:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16670:	713a      	strb	r2, [r7, #4]
		if (err) {
   16672:	e5f6      	b.n	16262 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   16674:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16678:	2b00      	cmp	r3, #0
   1667a:	f6bf ae24 	bge.w	162c6 <ull_conn_rx+0xfe>
   1667e:	7f7b      	ldrb	r3, [r7, #29]
   16680:	2b0c      	cmp	r3, #12
   16682:	f47f ae20 	bne.w	162c6 <ull_conn_rx+0xfe>
	instant = sys_le16_to_cpu(pdu->llctrl.conn_update_ind.instant);
   16686:	f8b7 2029 	ldrh.w	r2, [r7, #41]	; 0x29
	if (((instant - conn->lll.event_counter) & 0xFFFF) > 0x7FFF) {
   1668a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   1668c:	1ad3      	subs	r3, r2, r3
   1668e:	041b      	lsls	r3, r3, #16
   16690:	f100 8656 	bmi.w	17340 <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   16694:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16698:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1669c:	1a5b      	subs	r3, r3, r1
   1669e:	f003 0303 	and.w	r3, r3, #3
   166a2:	2b02      	cmp	r3, #2
   166a4:	f000 8686 	beq.w	173b4 <ull_conn_rx+0x11ec>
	if (!conn_upd_curr) {
   166a8:	4b5d      	ldr	r3, [pc, #372]	; (16820 <ull_conn_rx+0x658>)
   166aa:	6819      	ldr	r1, [r3, #0]
   166ac:	2900      	cmp	r1, #0
   166ae:	f000 86dc 	beq.w	1746a <ull_conn_rx+0x12a2>
	conn->llcp_cu.win_size = pdu->llctrl.conn_update_ind.win_size;
   166b2:	f897 3020 	ldrb.w	r3, [r7, #32]
   166b6:	f884 3120 	strb.w	r3, [r4, #288]	; 0x120
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.win_offset) *
   166ba:	f8b7 3021 	ldrh.w	r3, [r7, #33]	; 0x21
   166be:	f240 41e2 	movw	r1, #1250	; 0x4e2
   166c2:	fb01 f303 	mul.w	r3, r1, r3
	conn->llcp_cu.win_offset_us =
   166c6:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.interval);
   166ca:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
   166ce:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
   166d2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.interval =
   166d6:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.latency);
   166da:	f897 1026 	ldrb.w	r1, [r7, #38]	; 0x26
   166de:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
   166e2:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	conn->llcp_cu.latency =
   166e6:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   166ea:	f894 3112 	ldrb.w	r3, [r4, #274]	; 0x112
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   166ee:	f897 1027 	ldrb.w	r1, [r7, #39]	; 0x27
   166f2:	f897 0028 	ldrb.w	r0, [r7, #40]	; 0x28
	conn->llcp.conn_upd.instant = instant;
   166f6:	f8a4 20ec 	strh.w	r2, [r4, #236]	; 0xec
	conn->llcp_cu.state = LLCP_CUI_STATE_INPROG;
   166fa:	f023 030f 	bic.w	r3, r3, #15
   166fe:	f043 0308 	orr.w	r3, r3, #8
   16702:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
	conn->llcp_cu.ack--;
   16706:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		sys_le16_to_cpu(pdu->llctrl.conn_update_ind.timeout);
   1670a:	ea41 2200 	orr.w	r2, r1, r0, lsl #8
	conn->llcp_cu.timeout =
   1670e:	f8a4 2118 	strh.w	r2, [r4, #280]	; 0x118
	conn->llcp_cu.ack--;
   16712:	3b01      	subs	r3, #1
	link->mem = conn->llcp_rx;
   16714:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
	conn->llcp_cu.ack--;
   16718:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
	link->mem = conn->llcp_rx;
   1671c:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   1671e:	682a      	ldr	r2, [r5, #0]
   16720:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   16722:	682a      	ldr	r2, [r5, #0]
   16724:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
	*rx = NULL;
   16728:	2300      	movs	r3, #0
   1672a:	602b      	str	r3, [r5, #0]
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1672c:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   16730:	f894 317d 	ldrb.w	r3, [r4, #381]	; 0x17d
   16734:	4293      	cmp	r3, r2
   16736:	f43f ae3b 	beq.w	163b0 <ull_conn_rx+0x1e8>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   1673a:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1673e:	f003 0307 	and.w	r3, r3, #7
   16742:	2b04      	cmp	r3, #4
   16744:	f47f ae34 	bne.w	163b0 <ull_conn_rx+0x1e8>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16748:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
		if (err) {
   1674c:	e630      	b.n	163b0 <ull_conn_rx+0x1e8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND,
   1674e:	7f7b      	ldrb	r3, [r7, #29]
   16750:	2b03      	cmp	r3, #3
   16752:	f47f adb8 	bne.w	162c6 <ull_conn_rx+0xfe>
	switch (rej_ext_ind->reject_opcode) {
   16756:	f897 3020 	ldrb.w	r3, [r7, #32]
   1675a:	3b03      	subs	r3, #3
   1675c:	2b13      	cmp	r3, #19
   1675e:	f63f ad7d 	bhi.w	1625c <ull_conn_rx+0x94>
   16762:	a201      	add	r2, pc, #4	; (adr r2, 16768 <ull_conn_rx+0x5a0>)
   16764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   16768:	00016c31 	.word	0x00016c31
   1676c:	0001625d 	.word	0x0001625d
   16770:	0001625d 	.word	0x0001625d
   16774:	0001625d 	.word	0x0001625d
   16778:	0001625d 	.word	0x0001625d
   1677c:	0001625d 	.word	0x0001625d
   16780:	0001625d 	.word	0x0001625d
   16784:	0001625d 	.word	0x0001625d
   16788:	0001625d 	.word	0x0001625d
   1678c:	0001625d 	.word	0x0001625d
   16790:	0001625d 	.word	0x0001625d
   16794:	0001625d 	.word	0x0001625d
   16798:	00016bcb 	.word	0x00016bcb
   1679c:	0001625d 	.word	0x0001625d
   167a0:	0001625d 	.word	0x0001625d
   167a4:	0001625d 	.word	0x0001625d
   167a8:	0001625d 	.word	0x0001625d
   167ac:	00016b2d 	.word	0x00016b2d
   167b0:	0001625d 	.word	0x0001625d
   167b4:	00016b7d 	.word	0x00016b7d
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP,
   167b8:	7f7b      	ldrb	r3, [r7, #29]
   167ba:	2b02      	cmp	r3, #2
   167bc:	f47f ad83 	bne.w	162c6 <ull_conn_rx+0xfe>
		} else if ((conn->llcp_conn_param.ack !=
   167c0:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   167c4:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   167c8:	429a      	cmp	r2, r3
			   (llctrl->unknown_rsp.type ==
   167ca:	f897 2020 	ldrb.w	r2, [r7, #32]
		} else if ((conn->llcp_conn_param.ack !=
   167ce:	d002      	beq.n	167d6 <ull_conn_rx+0x60e>
			    conn->llcp_conn_param.req) &&
   167d0:	2a0f      	cmp	r2, #15
   167d2:	f000 83da 	beq.w	16f8a <ull_conn_rx+0xdc2>
		} else if ((conn->llcp_length.req != conn->llcp_length.ack) &&
   167d6:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   167da:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
   167de:	4299      	cmp	r1, r3
   167e0:	d002      	beq.n	167e8 <ull_conn_rx+0x620>
   167e2:	2a14      	cmp	r2, #20
   167e4:	f000 855c 	beq.w	172a0 <ull_conn_rx+0x10d8>
		} else if ((conn->llcp_phy.req != conn->llcp_phy.ack) &&
   167e8:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   167ec:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   167f0:	428b      	cmp	r3, r1
   167f2:	d002      	beq.n	167fa <ull_conn_rx+0x632>
   167f4:	2a16      	cmp	r2, #22
   167f6:	f000 85ab 	beq.w	17350 <ull_conn_rx+0x1188>
			switch (llctrl->unknown_rsp.type) {
   167fa:	2a12      	cmp	r2, #18
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   167fc:	bf04      	itt	eq
   167fe:	2301      	moveq	r3, #1
   16800:	713b      	strbeq	r3, [r7, #4]
				break;
   16802:	e5d5      	b.n	163b0 <ull_conn_rx+0x1e8>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_TERMINATE_IND,
   16804:	7f7b      	ldrb	r3, [r7, #29]
   16806:	2b02      	cmp	r3, #2
   16808:	f47f ad5d 	bne.w	162c6 <ull_conn_rx+0xfe>
	conn->llcp_terminate.reason_peer = pdu->llctrl.terminate_ind.error_code;
   1680c:	f897 2020 	ldrb.w	r2, [r7, #32]
   16810:	f884 213b 	strb.w	r2, [r4, #315]	; 0x13b
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16814:	2301      	movs	r3, #1
	int nack = 0;
   16816:	2000      	movs	r0, #0
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16818:	713b      	strb	r3, [r7, #4]
}
   1681a:	e522      	b.n	16262 <ull_conn_rx+0x9a>
   1681c:	2000e484 	.word	0x2000e484
   16820:	2000e400 	.word	0x2000e400
		if (!conn->lll.role ||
   16824:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16828:	2b00      	cmp	r3, #0
   1682a:	f6bf ad4c 	bge.w	162c6 <ull_conn_rx+0xfe>
   1682e:	7f7d      	ldrb	r5, [r7, #29]
   16830:	2d01      	cmp	r5, #1
   16832:	f47f ad48 	bne.w	162c6 <ull_conn_rx+0xfe>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16836:	48cd      	ldr	r0, [pc, #820]	; (16b6c <ull_conn_rx+0x9a4>)
   16838:	f7f9 ff6e 	bl	10718 <mem_acquire>
		if (!tx) {
   1683c:	2800      	cmp	r0, #0
   1683e:	f000 82f3 	beq.w	16e28 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   16842:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   16846:	f023 0305 	bic.w	r3, r3, #5
   1684a:	f043 0305 	orr.w	r3, r3, #5
   1684e:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   16852:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   16856:	f36f 03c3 	bfc	r3, #3, #1
   1685a:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1685e:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16860:	7145      	strb	r5, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16862:	f043 0303 	orr.w	r3, r3, #3
   16866:	7103      	strb	r3, [r0, #4]
	    conn->tx_head &&
   16868:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP;
   1686c:	220b      	movs	r2, #11
   1686e:	71c2      	strb	r2, [r0, #7]
	if (
   16870:	2b00      	cmp	r3, #0
   16872:	f000 8246 	beq.w	16d02 <ull_conn_rx+0xb3a>
	    !conn->llcp_enc.pause_tx &&
   16876:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1687a:	0791      	lsls	r1, r2, #30
   1687c:	f100 8241 	bmi.w	16d02 <ull_conn_rx+0xb3a>
	    !conn->llcp_phy.pause_tx &&
   16880:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   16884:	07d2      	lsls	r2, r2, #31
   16886:	f100 823c 	bmi.w	16d02 <ull_conn_rx+0xb3a>
		if (conn->tx_head == conn->tx_data) {
   1688a:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1688e:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   16890:	bf04      	itt	eq
   16892:	681a      	ldreq	r2, [r3, #0]
   16894:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   16898:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1689c:	2a00      	cmp	r2, #0
   1689e:	f000 86de 	beq.w	1765e <ull_conn_rx+0x1496>
	tx->next = conn->tx_ctrl_last->next;
   168a2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   168a6:	681a      	ldr	r2, [r3, #0]
   168a8:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   168aa:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   168ac:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   168b0:	6803      	ldr	r3, [r0, #0]
   168b2:	2b00      	cmp	r3, #0
   168b4:	f47f acd2 	bne.w	1625c <ull_conn_rx+0x94>
   168b8:	e532      	b.n	16320 <ull_conn_rx+0x158>
		if ((!IS_ENABLED(CONFIG_BT_CTLR_SLAVE_FEAT_REQ) &&
   168ba:	7f7b      	ldrb	r3, [r7, #29]
   168bc:	2b09      	cmp	r3, #9
   168be:	f47f ad02 	bne.w	162c6 <ull_conn_rx+0xfe>
	       (features[1] << 8) | (features[2] << 16);
   168c2:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   168c6:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   168ca:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   168ce:	48a8      	ldr	r0, [pc, #672]	; (16b70 <ull_conn_rx+0x9a8>)
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   168d0:	4da8      	ldr	r5, [pc, #672]	; (16b74 <ull_conn_rx+0x9ac>)
	       (features[1] << 8) | (features[2] << 16);
   168d2:	041b      	lsls	r3, r3, #16
   168d4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   168d8:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   168da:	f8d4 2128 	ldr.w	r2, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   168de:	4303      	orrs	r3, r0
	conn->llcp_feature.features_conn &= feat_get(&rsp->features[0]);
   168e0:	4013      	ands	r3, r2
   168e2:	f3c3 0310 	ubfx	r3, r3, #0, #17
   168e6:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   168ea:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
   168ee:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   168f2:	f897 3020 	ldrb.w	r3, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   168f6:	0412      	lsls	r2, r2, #16
   168f8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   168fc:	431a      	orrs	r2, r3
	conn->common.fex_valid = 1U;
   168fe:	f894 10dc 	ldrb.w	r1, [r4, #220]	; 0xdc
	       (features[1] << 8) | (features[2] << 16);
   16902:	4302      	orrs	r2, r0
	conn->procedure_expire = 0U;
   16904:	2300      	movs	r3, #0
	conn->llcp_feature.ack = conn->llcp_feature.req;
   16906:	f894 0124 	ldrb.w	r0, [r4, #292]	; 0x124
   1690a:	f884 0125 	strb.w	r0, [r4, #293]	; 0x125
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   1690e:	4015      	ands	r5, r2
	conn->common.fex_valid = 1U;
   16910:	f041 0201 	orr.w	r2, r1, #1
	conn->llcp_feature.features_peer =
   16914:	f8c4 512c 	str.w	r5, [r4, #300]	; 0x12c
	conn->common.fex_valid = 1U;
   16918:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	conn->procedure_expire = 0U;
   1691c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   16920:	4618      	mov	r0, r3
}
   16922:	e49e      	b.n	16262 <ull_conn_rx+0x9a>
		if (!conn->lll.role ||
   16924:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16928:	2b00      	cmp	r3, #0
   1692a:	f6bf accc 	bge.w	162c6 <ull_conn_rx+0xfe>
   1692e:	7f7e      	ldrb	r6, [r7, #29]
   16930:	2e09      	cmp	r6, #9
   16932:	f47f acc8 	bne.w	162c6 <ull_conn_rx+0xfe>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16936:	488d      	ldr	r0, [pc, #564]	; (16b6c <ull_conn_rx+0x9a4>)
   16938:	f7f9 feee 	bl	10718 <mem_acquire>
	if (!tx) {
   1693c:	4605      	mov	r5, r0
   1693e:	2800      	cmp	r0, #0
   16940:	f000 8272 	beq.w	16e28 <ull_conn_rx+0xc60>
	       (features[1] << 8) | (features[2] << 16);
   16944:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   16948:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   1694c:	f8d4 1128 	ldr.w	r1, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   16950:	041b      	lsls	r3, r3, #16
   16952:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16956:	f897 2020 	ldrb.w	r2, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   1695a:	4313      	orrs	r3, r2
   1695c:	4a84      	ldr	r2, [pc, #528]	; (16b70 <ull_conn_rx+0x9a8>)
   1695e:	4313      	orrs	r3, r2
	conn->llcp_feature.features_conn &= feat_get(&req->features[0]);
   16960:	400b      	ands	r3, r1
   16962:	f3c3 0310 	ubfx	r3, r3, #0, #17
   16966:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	       (features[1] << 8) | (features[2] << 16);
   1696a:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
   1696e:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
   16972:	041b      	lsls	r3, r3, #16
   16974:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	feat = ~LL_FEAT_BIT_MASK_VALID | features[0] |
   16978:	f897 1020 	ldrb.w	r1, [r7, #32]
	       (features[1] << 8) | (features[2] << 16);
   1697c:	430b      	orrs	r3, r1
   1697e:	4313      	orrs	r3, r2
	conn->common.fex_valid = 1U;
   16980:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16984:	497b      	ldr	r1, [pc, #492]	; (16b74 <ull_conn_rx+0x9ac>)
	conn->common.fex_valid = 1U;
   16986:	f042 0201 	orr.w	r2, r2, #1
   1698a:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1698e:	7902      	ldrb	r2, [r0, #4]
	feat_result |= feat_to_keep & LL_FEAT_FILTER_OCTET0;
   16990:	4019      	ands	r1, r3
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16992:	f042 0203 	orr.w	r2, r2, #3
	conn->llcp_feature.features_peer =
   16996:	f8c4 112c 	str.w	r1, [r4, #300]	; 0x12c
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1699a:	7102      	strb	r2, [r0, #4]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   1699c:	2208      	movs	r2, #8
	pdu_tx->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   1699e:	7146      	strb	r6, [r0, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   169a0:	71c6      	strb	r6, [r0, #7]
	(void)memset(&pdu_tx->llctrl.feature_rsp.features[0], 0x00,
   169a2:	2100      	movs	r1, #0
   169a4:	4410      	add	r0, r2
   169a6:	f00d fd8a 	bl	244be <memset>
	feat_result &= 0xFF;
   169aa:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[2] = val >> 16;
   169ae:	2601      	movs	r6, #1
   169b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
	dst[1] = val >> 8;
   169b4:	2241      	movs	r2, #65	; 0x41
	ctrl_tx_sec_enqueue(conn, tx);
   169b6:	4620      	mov	r0, r4
   169b8:	726a      	strb	r2, [r5, #9]
	dst[0] = val;
   169ba:	722b      	strb	r3, [r5, #8]
	dst[2] = val >> 16;
   169bc:	72ae      	strb	r6, [r5, #10]
   169be:	4629      	mov	r1, r5
   169c0:	f7fe fd5e 	bl	15480 <ctrl_tx_sec_enqueue>
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   169c4:	713e      	strb	r6, [r7, #4]
	return 0;
   169c6:	2000      	movs	r0, #0
   169c8:	e44b      	b.n	16262 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_REJECT_IND, pdu_rx->len)) {
   169ca:	7f7b      	ldrb	r3, [r7, #29]
   169cc:	2b02      	cmp	r3, #2
   169ce:	f47f ac7a 	bne.w	162c6 <ull_conn_rx+0xfe>
	} else if ((conn->llcp_ack != conn->llcp_req) &&
   169d2:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   169d6:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   169da:	4293      	cmp	r3, r2
   169dc:	d004      	beq.n	169e8 <ull_conn_rx+0x820>
   169de:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   169e2:	2b03      	cmp	r3, #3
   169e4:	f000 84d8 	beq.w	17398 <ull_conn_rx+0x11d0>
	} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   169e8:	f894 21b4 	ldrb.w	r2, [r4, #436]	; 0x1b4
   169ec:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   169f0:	4293      	cmp	r3, r2
   169f2:	f000 821d 	beq.w	16e30 <ull_conn_rx+0xc68>
		rej_ext_ind->error_code = rej_ind->error_code;
   169f6:	f897 1020 	ldrb.w	r1, [r7, #32]
   169fa:	f887 1021 	strb.w	r1, [r7, #33]	; 0x21
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   169fe:	2923      	cmp	r1, #35	; 0x23
   16a00:	d012      	beq.n	16a28 <ull_conn_rx+0x860>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16a02:	f884 21b5 	strb.w	r2, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   16a06:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16a0a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16a0e:	f36f 0200 	bfc	r2, #0, #1
   16a12:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   16a16:	2200      	movs	r2, #0
   16a18:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16a1c:	f3c3 0202 	ubfx	r2, r3, #0, #3
   16a20:	f362 1306 	bfi	r3, r2, #4, #3
   16a24:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (!conn->llcp_phy.cmd) {
   16a28:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   16a2c:	0758      	lsls	r0, r3, #29
   16a2e:	f57f ac15 	bpl.w	1625c <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16a32:	2319      	movs	r3, #25
   16a34:	713b      	strb	r3, [r7, #4]
	p->status = rej_ext_ind->error_code;
   16a36:	7739      	strb	r1, [r7, #28]
	p->tx = conn->lll.phy_tx;
   16a38:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
   16a3c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   16a40:	777b      	strb	r3, [r7, #29]
	p->rx = conn->lll.phy_rx;
   16a42:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   16a46:	f3c3 0302 	ubfx	r3, r3, #0, #3
	int nack = 0;
   16a4a:	2000      	movs	r0, #0
	p->rx = conn->lll.phy_rx;
   16a4c:	77bb      	strb	r3, [r7, #30]
	if (err) {
   16a4e:	e408      	b.n	16262 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_VERSION_IND,
   16a50:	7f7d      	ldrb	r5, [r7, #29]
   16a52:	2d06      	cmp	r5, #6
   16a54:	f47f ac37 	bne.w	162c6 <ull_conn_rx+0xfe>
	if (!conn->llcp_version.tx) {
   16a58:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   16a5c:	07de      	lsls	r6, r3, #31
   16a5e:	f140 8375 	bpl.w	1714c <ull_conn_rx+0xf84>
	} else if (!conn->llcp_version.rx) {
   16a62:	f013 0302 	ands.w	r3, r3, #2
   16a66:	f47f abf9 	bne.w	1625c <ull_conn_rx+0x94>
		conn->llcp_version.ack = conn->llcp_version.req;
   16a6a:	f894 2130 	ldrb.w	r2, [r4, #304]	; 0x130
   16a6e:	f884 2131 	strb.w	r2, [r4, #305]	; 0x131
		conn->procedure_expire = 0U;
   16a72:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	conn->llcp_version.version_number = v->version_number;
   16a76:	f897 3020 	ldrb.w	r3, [r7, #32]
   16a7a:	f884 3133 	strb.w	r3, [r4, #307]	; 0x133
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16a7e:	f897 1022 	ldrb.w	r1, [r7, #34]	; 0x22
   16a82:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
	conn->llcp_version.rx = 1U;
   16a86:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
	conn->llcp_version.company_id = sys_le16_to_cpu(v->company_id);
   16a8a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   16a8e:	f8a4 2134 	strh.w	r2, [r4, #308]	; 0x134
		sys_le16_to_cpu(v->sub_version_number);
   16a92:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
   16a96:	f897 1024 	ldrb.w	r1, [r7, #36]	; 0x24
	conn->llcp_version.rx = 1U;
   16a9a:	f043 0302 	orr.w	r3, r3, #2
		sys_le16_to_cpu(v->sub_version_number);
   16a9e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
	conn->llcp_version.sub_version_number =
   16aa2:	f8a4 2136 	strh.w	r2, [r4, #310]	; 0x136
	conn->llcp_version.rx = 1U;
   16aa6:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
	return 0;
   16aaa:	2000      	movs	r0, #0
   16aac:	f7ff bbd9 	b.w	16262 <ull_conn_rx+0x9a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ,
   16ab0:	7f7b      	ldrb	r3, [r7, #29]
   16ab2:	2b18      	cmp	r3, #24
   16ab4:	f47f ac07 	bne.w	162c6 <ull_conn_rx+0xfe>
		if (conn_upd_curr && (conn_upd_curr != conn)) {
   16ab8:	4e2f      	ldr	r6, [pc, #188]	; (16b78 <ull_conn_rx+0x9b0>)
   16aba:	6833      	ldr	r3, [r6, #0]
   16abc:	2b00      	cmp	r3, #0
   16abe:	f000 80f7 	beq.w	16cb0 <ull_conn_rx+0xae8>
   16ac2:	429c      	cmp	r4, r3
   16ac4:	f000 80f4 	beq.w	16cb0 <ull_conn_rx+0xae8>
			nack = reject_ext_ind_send(conn, *rx,
   16ac8:	2320      	movs	r3, #32
   16aca:	220f      	movs	r2, #15
   16acc:	e537      	b.n	1653e <ull_conn_rx+0x376>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16ace:	7f7b      	ldrb	r3, [r7, #29]
   16ad0:	2b01      	cmp	r3, #1
   16ad2:	f47f abf8 	bne.w	162c6 <ull_conn_rx+0xfe>
	} else if (!conn->lll.role) {
   16ad6:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16ada:	2b00      	cmp	r3, #0
   16adc:	f2c0 80e0 	blt.w	16ca0 <ull_conn_rx+0xad8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16ae0:	4822      	ldr	r0, [pc, #136]	; (16b6c <ull_conn_rx+0x9a4>)
   16ae2:	f7f9 fe19 	bl	10718 <mem_acquire>
		if (!tx) {
   16ae6:	2800      	cmp	r0, #0
   16ae8:	f000 819e 	beq.w	16e28 <ull_conn_rx+0xc60>
	conn->llcp_enc.pause_rx = 1U;
   16aec:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	conn->lll.enc_rx = 0;
   16af0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
	conn->llcp_enc.pause_rx = 1U;
   16af4:	f042 0201 	orr.w	r2, r2, #1
	conn->lll.enc_rx = 0;
   16af8:	f023 0318 	bic.w	r3, r3, #24
	conn->llcp_enc.pause_rx = 1U;
   16afc:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16b00:	2201      	movs	r2, #1
	conn->lll.enc_rx = 0;
   16b02:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16b06:	7903      	ldrb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   16b08:	7142      	strb	r2, [r0, #5]
   16b0a:	e6aa      	b.n	16862 <ull_conn_rx+0x69a>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16b0c:	7f7b      	ldrb	r3, [r7, #29]
   16b0e:	2b01      	cmp	r3, #1
   16b10:	f47f abd9 	bne.w	162c6 <ull_conn_rx+0xfe>
		if (conn->lll.role) {
   16b14:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   16b18:	2b00      	cmp	r3, #0
   16b1a:	f6ff ac30 	blt.w	1637e <ull_conn_rx+0x1b6>
			conn->llcp_enc.pause_rx = 0U;
   16b1e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
   16b22:	f022 0203 	bic.w	r2, r2, #3
   16b26:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
   16b2a:	e439      	b.n	163a0 <ull_conn_rx+0x1d8>
		if (conn->llcp_length.ack != conn->llcp_length.req) {
   16b2c:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   16b30:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
   16b34:	4293      	cmp	r3, r2
   16b36:	f43f ab91 	beq.w	1625c <ull_conn_rx+0x94>
	conn->procedure_expire = 0U;
   16b3a:	2300      	movs	r3, #0
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16b3c:	2109      	movs	r1, #9
	conn->llcp_length.ack = conn->llcp_length.req;
   16b3e:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
	conn->procedure_expire = 0U;
   16b42:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16b46:	7779      	strb	r1, [r7, #29]
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16b48:	f8b4 205e 	ldrh.w	r2, [r4, #94]	; 0x5e
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   16b4c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	; 0x5c
	lr->max_rx_octets = sys_cpu_to_le16(conn->lll.max_rx_octets);
   16b50:	843a      	strh	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16b52:	2115      	movs	r1, #21
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16b54:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16b58:	77f9      	strb	r1, [r7, #31]
	lr->max_rx_time = sys_cpu_to_le16(conn->lll.max_rx_time);
   16b5a:	f8b4 1062 	ldrh.w	r1, [r4, #98]	; 0x62
   16b5e:	8479      	strh	r1, [r7, #34]	; 0x22
	lr->max_tx_octets = sys_cpu_to_le16(conn->lll.max_tx_octets);
   16b60:	84b8      	strh	r0, [r7, #36]	; 0x24
	lr->max_tx_time = sys_cpu_to_le16(conn->lll.max_tx_time);
   16b62:	84fa      	strh	r2, [r7, #38]	; 0x26
	int nack = 0;
   16b64:	4618      	mov	r0, r3
   16b66:	f7ff bb7c 	b.w	16262 <ull_conn_rx+0x9a>
   16b6a:	bf00      	nop
   16b6c:	2000e484 	.word	0x2000e484
   16b70:	fffe30d0 	.word	0xfffe30d0
   16b74:	0001ff7f 	.word	0x0001ff7f
   16b78:	2000e400 	.word	0x2000e400
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   16b7c:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   16b80:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   16b84:	428b      	cmp	r3, r1
   16b86:	f43f ab69 	beq.w	1625c <ull_conn_rx+0x94>
	if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   16b8a:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16b8e:	2a23      	cmp	r2, #35	; 0x23
   16b90:	d012      	beq.n	16bb8 <ull_conn_rx+0x9f0>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   16b92:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   16b96:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16b9a:	f894 3064 	ldrb.w	r3, [r4, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   16b9e:	f36f 0100 	bfc	r1, #0, #1
   16ba2:	f884 11b7 	strb.w	r1, [r4, #439]	; 0x1b7
		conn->procedure_expire = 0U;
   16ba6:	2100      	movs	r1, #0
   16ba8:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
		conn->lll.phy_tx_time = conn->lll.phy_tx;
   16bac:	f3c3 0102 	ubfx	r1, r3, #0, #3
   16bb0:	f361 1306 	bfi	r3, r1, #4, #3
   16bb4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (!conn->llcp_phy.cmd) {
   16bb8:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   16bbc:	075e      	lsls	r6, r3, #29
   16bbe:	f57f ab4d 	bpl.w	1625c <ull_conn_rx+0x94>
	rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   16bc2:	2319      	movs	r3, #25
   16bc4:	713b      	strb	r3, [r7, #4]
	p->status = rej_ext_ind->error_code;
   16bc6:	773a      	strb	r2, [r7, #28]
   16bc8:	e736      	b.n	16a38 <ull_conn_rx+0x870>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16bca:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   16bce:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   16bd2:	429a      	cmp	r2, r3
   16bd4:	f43f ab42 	beq.w	1625c <ull_conn_rx+0x94>
	if (!lll->role && (rej_ext_ind->error_code ==
   16bd8:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16bdc:	2a00      	cmp	r2, #0
   16bde:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16be2:	f2c0 8565 	blt.w	176b0 <ull_conn_rx+0x14e8>
   16be6:	2a1a      	cmp	r2, #26
   16be8:	f000 8588 	beq.w	176fc <ull_conn_rx+0x1534>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16bec:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16bf0:	f002 0107 	and.w	r1, r2, #7
   16bf4:	2904      	cmp	r1, #4
   16bf6:	f000 8564 	beq.w	176c2 <ull_conn_rx+0x14fa>
	if (!conn->llcp_conn_param.cmd) {
   16bfa:	0715      	lsls	r5, r2, #28
   16bfc:	f57f ab2e 	bpl.w	1625c <ull_conn_rx+0x94>
	cu->status = rej_ext_ind->error_code;
   16c00:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16c04:	773b      	strb	r3, [r7, #28]
	rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   16c06:	2215      	movs	r2, #21
   16c08:	713a      	strb	r2, [r7, #4]
	cu->interval = lll->interval;
   16c0a:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
	cu->timeout = conn->supervision_reload *
   16c0c:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
	cu->latency = lll->latency;
   16c10:	8e21      	ldrh	r1, [r4, #48]	; 0x30
   16c12:	8439      	strh	r1, [r7, #32]
		      lll->interval * 125U / 1000;
   16c14:	207d      	movs	r0, #125	; 0x7d
	cu->timeout = conn->supervision_reload *
   16c16:	fb02 f303 	mul.w	r3, r2, r3
		      lll->interval * 125U / 1000;
   16c1a:	fb00 f303 	mul.w	r3, r0, r3
	cu->interval = lll->interval;
   16c1e:	83fa      	strh	r2, [r7, #30]
		      lll->interval * 125U / 1000;
   16c20:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   16c24:	fbb3 f3f0 	udiv	r3, r3, r0
	int nack = 0;
   16c28:	2000      	movs	r0, #0
	cu->timeout = conn->supervision_reload *
   16c2a:	847b      	strh	r3, [r7, #34]	; 0x22
	if (err) {
   16c2c:	f7ff bb19 	b.w	16262 <ull_conn_rx+0x9a>
		if ((conn->llcp_ack != conn->llcp_req) &&
   16c30:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   16c34:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   16c38:	428b      	cmp	r3, r1
   16c3a:	f43f ab0f 	beq.w	1625c <ull_conn_rx+0x94>
   16c3e:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   16c42:	2b03      	cmp	r3, #3
   16c44:	f47f ab0a 	bne.w	1625c <ull_conn_rx+0x94>
	conn->llcp_enc.pause_rx = 0U;
   16c48:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   16c4c:	f884 10e9 	strb.w	r1, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   16c50:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   16c52:	f022 0203 	bic.w	r2, r2, #3
   16c56:	f884 215e 	strb.w	r2, [r4, #350]	; 0x15e
	conn->procedure_expire = 0U;
   16c5a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	pdu_rx->llctrl.reject_ind.error_code = rej_ext_ind->error_code;
   16c5e:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
   16c62:	f887 2020 	strb.w	r2, [r7, #32]
	pdu_rx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   16c66:	210d      	movs	r1, #13
   16c68:	77f9      	strb	r1, [r7, #31]
	int nack = 0;
   16c6a:	4618      	mov	r0, r3
   16c6c:	f7ff baf9 	b.w	16262 <ull_conn_rx+0x9a>
			tx->next = conn->tx_head;
   16c70:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16c72:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16c76:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   16c7a:	2b00      	cmp	r3, #0
   16c7c:	f47f aaee 	bne.w	1625c <ull_conn_rx+0x94>
   16c80:	f7ff bb4e 	b.w	16320 <ull_conn_rx+0x158>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_START_ENC_RSP,
   16c84:	7f7b      	ldrb	r3, [r7, #29]
   16c86:	2b01      	cmp	r3, #1
   16c88:	f47f ab1d 	bne.w	162c6 <ull_conn_rx+0xfe>
   16c8c:	e747      	b.n	16b1e <ull_conn_rx+0x956>
		if (!pdu_len_cmp(PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP,
   16c8e:	7f7b      	ldrb	r3, [r7, #29]
   16c90:	2b01      	cmp	r3, #1
   16c92:	f47f ab18 	bne.w	162c6 <ull_conn_rx+0xfe>
   16c96:	e723      	b.n	16ae0 <ull_conn_rx+0x918>
   16c98:	7f7b      	ldrb	r3, [r7, #29]
   16c9a:	2b01      	cmp	r3, #1
   16c9c:	f47f ab13 	bne.w	162c6 <ull_conn_rx+0xfe>
		conn->lll.enc_tx = 0;
   16ca0:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   16ca4:	f36f 1304 	bfc	r3, #4, #1
   16ca8:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
		goto pause_enc_rsp_send_exit;
   16cac:	f7ff bad6 	b.w	1625c <ull_conn_rx+0x94>
		if (!conn->lll.role) {
   16cb0:	f994 103d 	ldrsb.w	r1, [r4, #61]	; 0x3d
					conn->llcp_conn_param.ack) &&
   16cb4:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
		if (!conn->lll.role) {
   16cb8:	2900      	cmp	r1, #0
   16cba:	f2c0 809b 	blt.w	16df4 <ull_conn_rx+0xc2c>
			if ((conn->llcp_conn_param.req !=
   16cbe:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   16cc2:	4281      	cmp	r1, r0
   16cc4:	d009      	beq.n	16cda <ull_conn_rx+0xb12>
			    ((conn->llcp_conn_param.state ==
   16cc6:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
					conn->llcp_conn_param.ack) &&
   16cca:	f011 0107 	ands.w	r1, r1, #7
   16cce:	f000 82e1 	beq.w	17294 <ull_conn_rx+0x10cc>
			      LLCP_CPR_STATE_REQ) ||
   16cd2:	3904      	subs	r1, #4
   16cd4:	2901      	cmp	r1, #1
   16cd6:	f240 82dd 	bls.w	17294 <ull_conn_rx+0x10cc>
			} else if (((((conn->llcp_req - conn->llcp_ack) &
   16cda:	f894 10e8 	ldrb.w	r1, [r4, #232]	; 0xe8
   16cde:	f894 50e9 	ldrb.w	r5, [r4, #233]	; 0xe9
   16ce2:	1b49      	subs	r1, r1, r5
   16ce4:	f001 0103 	and.w	r1, r1, #3
   16ce8:	2902      	cmp	r1, #2
   16cea:	f000 83c4 	beq.w	17476 <ull_conn_rx+0x12ae>
				    (conn->llcp_type != LLCP_ENCRYPTION)) ||
   16cee:	f894 51b4 	ldrb.w	r5, [r4, #436]	; 0x1b4
   16cf2:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
   16cf6:	428d      	cmp	r5, r1
   16cf8:	f000 83e6 	beq.w	174c8 <ull_conn_rx+0x1300>
				nack = reject_ext_ind_send(conn, *rx,
   16cfc:	232a      	movs	r3, #42	; 0x2a
   16cfe:	220f      	movs	r2, #15
   16d00:	e41d      	b.n	1653e <ull_conn_rx+0x376>
		if (!conn->tx_ctrl) {
   16d02:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   16d06:	2a00      	cmp	r2, #0
   16d08:	f47f adcb 	bne.w	168a2 <ull_conn_rx+0x6da>
			tx->next = conn->tx_head;
   16d0c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   16d0e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   16d12:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   16d16:	e5cb      	b.n	168b0 <ull_conn_rx+0x6e8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16d18:	48c1      	ldr	r0, [pc, #772]	; (17020 <ull_conn_rx+0xe58>)
   16d1a:	f7f9 fcfd 	bl	10718 <mem_acquire>
		if (!tx) {
   16d1e:	4603      	mov	r3, r0
   16d20:	2800      	cmp	r0, #0
   16d22:	f000 8081 	beq.w	16e28 <ull_conn_rx+0xc60>
	    ((conn->llcp_length.req == conn->llcp_length.ack) && tx) ||
   16d26:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   16d2a:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
	eff_rx_octets = conn->lll.max_rx_octets;
   16d2e:	f8b4 c05e 	ldrh.w	ip, [r4, #94]	; 0x5e
	eff_tx_octets = conn->lll.max_tx_octets;
   16d32:	f8b4 b05c 	ldrh.w	fp, [r4, #92]	; 0x5c
	eff_rx_time = conn->lll.max_rx_time;
   16d36:	f8b4 9062 	ldrh.w	r9, [r4, #98]	; 0x62
	eff_tx_time = conn->lll.max_tx_time;
   16d3a:	f8b4 a060 	ldrh.w	sl, [r4, #96]	; 0x60
	if (/* Local idle, and Peer request then complete the Peer procedure
   16d3e:	428a      	cmp	r2, r1
   16d40:	f040 854f 	bne.w	177e2 <ull_conn_rx+0x161a>
		max_rx_octets = sys_le16_to_cpu(lr->max_rx_octets);
   16d44:	8c39      	ldrh	r1, [r7, #32]
		if (max_rx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16d46:	291a      	cmp	r1, #26
   16d48:	f240 82a8 	bls.w	1729c <ull_conn_rx+0x10d4>
			eff_tx_octets = MIN(max_rx_octets,
   16d4c:	f8b4 00d6 	ldrh.w	r0, [r4, #214]	; 0xd6
   16d50:	4281      	cmp	r1, r0
   16d52:	bf28      	it	cs
   16d54:	4601      	movcs	r1, r0
		if (max_tx_octets >= PDU_DC_PAYLOAD_SIZE_MIN) {
   16d56:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
		lr_tx_time = sys_le16_to_cpu(lr->max_tx_time);
   16d58:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
			eff_rx_octets = MIN(max_tx_octets,
   16d5c:	281b      	cmp	r0, #27
		if (lr_rx_time >= PKT_US(PDU_DC_PAYLOAD_SIZE_MIN, PHY_1M)) {
   16d5e:	8c78      	ldrh	r0, [r7, #34]	; 0x22
			eff_rx_octets = MIN(max_tx_octets,
   16d60:	bf34      	ite	cc
   16d62:	46e0      	movcc	r8, ip
   16d64:	f04f 081b 	movcs.w	r8, #27
			eff_tx_time = MIN(lr_rx_time, max_tx_time);
   16d68:	f5b0 7fa4 	cmp.w	r0, #328	; 0x148
   16d6c:	bf34      	ite	cc
   16d6e:	4650      	movcc	r0, sl
   16d70:	f44f 70a4 	movcs.w	r0, #328	; 0x148
			eff_rx_time = MIN(lr_tx_time, max_rx_time);
   16d74:	f5be 7fa4 	cmp.w	lr, #328	; 0x148
   16d78:	bf34      	ite	cc
   16d7a:	46ce      	movcc	lr, r9
   16d7c:	f44f 7ea4 	movcs.w	lr, #328	; 0x148
		if (eff_rx_octets != conn->lll.max_rx_octets) {
   16d80:	45e0      	cmp	r8, ip
   16d82:	f000 831b 	beq.w	173bc <ull_conn_rx+0x11f4>
			conn->llcp_length.ack = conn->llcp_length.req - 1;
   16d86:	3a01      	subs	r2, #1
   16d88:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
			conn->llcp_length.rx_octets = eff_rx_octets;
   16d8c:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
			conn->llcp_length.tx_octets = eff_tx_octets;
   16d90:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
			conn->llcp_length.rx_time = eff_rx_time;
   16d94:	f8a4 e1ac 	strh.w	lr, [r4, #428]	; 0x1ac
			conn->llcp_length.tx_time = eff_tx_time;
   16d98:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
			if (tx) {
   16d9c:	2b00      	cmp	r3, #0
   16d9e:	f000 8370 	beq.w	17482 <ull_conn_rx+0x12ba>
				conn->llcp_length.state =
   16da2:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
   16da6:	2705      	movs	r7, #5
   16da8:	f367 0202 	bfi	r2, r7, #0, #3
   16dac:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
			link->mem = conn->llcp_rx;
   16db0:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   16db4:	6072      	str	r2, [r6, #4]
			(*rx)->hdr.link = link;
   16db6:	682a      	ldr	r2, [r5, #0]
   16db8:	6016      	str	r6, [r2, #0]
			conn->llcp_rx = *rx;
   16dba:	682a      	ldr	r2, [r5, #0]
   16dbc:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
			*rx = NULL;
   16dc0:	2200      	movs	r2, #0
   16dc2:	602a      	str	r2, [r5, #0]
	if (tx) {
   16dc4:	2b00      	cmp	r3, #0
   16dc6:	f43f aa4b 	beq.w	16260 <ull_conn_rx+0x98>
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16dca:	791a      	ldrb	r2, [r3, #4]
	pdu_tx->llctrl.length_rsp.max_tx_time = sys_cpu_to_le16(eff_tx_time);
   16dcc:	81d8      	strh	r0, [r3, #14]
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16dce:	f042 0203 	orr.w	r2, r2, #3
	ctrl_tx_sec_enqueue(conn, tx);
   16dd2:	4620      	mov	r0, r4
	pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   16dd4:	711a      	strb	r2, [r3, #4]
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16dd6:	2409      	movs	r4, #9
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16dd8:	2215      	movs	r2, #21
	pdu_tx->llctrl.length_rsp.max_tx_octets =
   16dda:	8199      	strh	r1, [r3, #12]
	pdu_tx->llctrl.length_rsp.max_rx_octets =
   16ddc:	f8a3 8008 	strh.w	r8, [r3, #8]
	pdu_tx->llctrl.length_rsp.max_rx_time = sys_cpu_to_le16(eff_rx_time);
   16de0:	f8a3 e00a 	strh.w	lr, [r3, #10]
	ctrl_tx_sec_enqueue(conn, tx);
   16de4:	4619      	mov	r1, r3
	pdu_tx->len = offsetof(struct pdu_data_llctrl, length_rsp) +
   16de6:	715c      	strb	r4, [r3, #5]
	pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_LENGTH_RSP;
   16de8:	71da      	strb	r2, [r3, #7]
	ctrl_tx_sec_enqueue(conn, tx);
   16dea:	f7fe fb49 	bl	15480 <ctrl_tx_sec_enqueue>
	return 0;
   16dee:	2000      	movs	r0, #0
}
   16df0:	f7ff ba37 	b.w	16262 <ull_conn_rx+0x9a>
		} else if ((conn->llcp_conn_param.req ==
   16df4:	f894 217c 	ldrb.w	r2, [r4, #380]	; 0x17c
   16df8:	4282      	cmp	r2, r0
   16dfa:	f000 811f 	beq.w	1703c <ull_conn_rx+0xe74>
			    conn->llcp_conn_param.ack) ||
   16dfe:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16e02:	0792      	lsls	r2, r2, #30
   16e04:	f000 811a 	beq.w	1703c <ull_conn_rx+0xe74>
			LL_ASSERT(0);
   16e08:	4a86      	ldr	r2, [pc, #536]	; (17024 <ull_conn_rx+0xe5c>)
   16e0a:	4987      	ldr	r1, [pc, #540]	; (17028 <ull_conn_rx+0xe60>)
   16e0c:	4887      	ldr	r0, [pc, #540]	; (1702c <ull_conn_rx+0xe64>)
   16e0e:	f241 73de 	movw	r3, #6110	; 0x17de
   16e12:	f00a fe87 	bl	21b24 <printk>
   16e16:	4040      	eors	r0, r0
   16e18:	f380 8811 	msr	BASEPRI, r0
   16e1c:	f04f 0003 	mov.w	r0, #3
   16e20:	df02      	svc	2
	int nack = 0;
   16e22:	2000      	movs	r0, #0
   16e24:	f7ff ba1d 	b.w	16262 <ull_conn_rx+0x9a>
		return -ENOBUFS;
   16e28:	f06f 0036 	mvn.w	r0, #54	; 0x36
   16e2c:	f7ff ba19 	b.w	16262 <ull_conn_rx+0x9a>
	} else if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   16e30:	f894 217d 	ldrb.w	r2, [r4, #381]	; 0x17d
   16e34:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   16e38:	429a      	cmp	r2, r3
   16e3a:	f43f ae77 	beq.w	16b2c <ull_conn_rx+0x964>
		rej_ext_ind->error_code = rej_ind->error_code;
   16e3e:	f897 3020 	ldrb.w	r3, [r7, #32]
   16e42:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (!lll->role && (rej_ext_ind->error_code ==
   16e46:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16e4a:	2a00      	cmp	r2, #0
   16e4c:	f2c0 8329 	blt.w	174a2 <ull_conn_rx+0x12da>
   16e50:	2b1a      	cmp	r3, #26
   16e52:	f000 8453 	beq.w	176fc <ull_conn_rx+0x1534>
	if (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT) {
   16e56:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16e5a:	f002 0307 	and.w	r3, r2, #7
   16e5e:	2b04      	cmp	r3, #4
   16e60:	f47f aecb 	bne.w	16bfa <ull_conn_rx+0xa32>
		LL_ASSERT(conn_upd_curr == conn);
   16e64:	4e72      	ldr	r6, [pc, #456]	; (17030 <ull_conn_rx+0xe68>)
   16e66:	6833      	ldr	r3, [r6, #0]
   16e68:	429c      	cmp	r4, r3
   16e6a:	d00e      	beq.n	16e8a <ull_conn_rx+0xcc2>
   16e6c:	4a6d      	ldr	r2, [pc, #436]	; (17024 <ull_conn_rx+0xe5c>)
   16e6e:	4971      	ldr	r1, [pc, #452]	; (17034 <ull_conn_rx+0xe6c>)
   16e70:	486e      	ldr	r0, [pc, #440]	; (1702c <ull_conn_rx+0xe64>)
   16e72:	f241 13ba 	movw	r3, #4538	; 0x11ba
   16e76:	f00a fe55 	bl	21b24 <printk>
   16e7a:	4040      	eors	r0, r0
   16e7c:	f380 8811 	msr	BASEPRI, r0
   16e80:	f04f 0003 	mov.w	r0, #3
   16e84:	df02      	svc	2
   16e86:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   16e8a:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   16e8e:	f884 117d 	strb.w	r1, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   16e92:	2300      	movs	r3, #0
   16e94:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   16e96:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   16e9a:	e6ae      	b.n	16bfa <ull_conn_rx+0xa32>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   16e9c:	4860      	ldr	r0, [pc, #384]	; (17020 <ull_conn_rx+0xe58>)
   16e9e:	f7f9 fc3b 	bl	10718 <mem_acquire>
	if (!tx) {
   16ea2:	4602      	mov	r2, r0
   16ea4:	2800      	cmp	r0, #0
   16ea6:	d0bf      	beq.n	16e28 <ull_conn_rx+0xc60>
	conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   16ea8:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   16eac:	2102      	movs	r1, #2
   16eae:	f361 0301 	bfi	r3, r1, #0, #2
   16eb2:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
	if (conn->llcp_phy.ack ==
   16eb6:	f894 11b5 	ldrb.w	r1, [r4, #437]	; 0x1b5
   16eba:	f894 31b4 	ldrb.w	r3, [r4, #436]	; 0x1b4
   16ebe:	428b      	cmp	r3, r1
   16ec0:	d115      	bne.n	16eee <ull_conn_rx+0xd26>
		conn->llcp_phy.ack--;
   16ec2:	3b01      	subs	r3, #1
   16ec4:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
		conn->llcp_phy.tx =
   16ec8:	f8b4 31b6 	ldrh.w	r3, [r4, #438]	; 0x1b6
			conn->phy_pref_rx;
   16ecc:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
		conn->llcp_phy.tx =
   16ed0:	f423 619f 	bic.w	r1, r3, #1272	; 0x4f8
   16ed4:	f240 43fc 	movw	r3, #1276	; 0x4fc
   16ed8:	f021 0104 	bic.w	r1, r1, #4
   16edc:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   16ee0:	430b      	orrs	r3, r1
		conn->procedure_expire =
   16ee2:	f8b4 10ca 	ldrh.w	r1, [r4, #202]	; 0xca
		conn->llcp_phy.tx =
   16ee6:	f8a4 31b6 	strh.w	r3, [r4, #438]	; 0x1b6
		conn->procedure_expire =
   16eea:	f8a4 10cc 	strh.w	r1, [r4, #204]	; 0xcc
	conn->llcp_phy.rx &= p->tx_phys;
   16eee:	f894 11b6 	ldrb.w	r1, [r4, #438]	; 0x1b6
   16ef2:	f897 3020 	ldrb.w	r3, [r7, #32]
   16ef6:	ea03 1051 	and.w	r0, r3, r1, lsr #5
	conn->llcp_phy.tx &= p->rx_phys;
   16efa:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   16efe:	f3c1 0582 	ubfx	r5, r1, #2, #3
   16f02:	402b      	ands	r3, r5
   16f04:	009b      	lsls	r3, r3, #2
   16f06:	ea43 1340 	orr.w	r3, r3, r0, lsl #5
   16f0a:	f001 0103 	and.w	r1, r1, #3
   16f0e:	430b      	orrs	r3, r1
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16f10:	2103      	movs	r1, #3
	conn->llcp_phy.tx &= p->rx_phys;
   16f12:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, phy_rsp) +
   16f16:	7151      	strb	r1, [r2, #5]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16f18:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16f1c:	7911      	ldrb	r1, [r2, #4]
	pdu_ctrl_tx->llctrl.phy_rsp.rx_phys = conn->phy_pref_rx;
   16f1e:	4603      	mov	r3, r0
   16f20:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16f24:	7253      	strb	r3, [r2, #9]
	    conn->tx_head &&
   16f26:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16f2a:	f041 0103 	orr.w	r1, r1, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16f2e:	2517      	movs	r5, #23
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16f30:	f3c0 0002 	ubfx	r0, r0, #0, #3
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   16f34:	71d5      	strb	r5, [r2, #7]
	pdu_ctrl_tx->llctrl.phy_rsp.tx_phys = conn->phy_pref_tx;
   16f36:	7210      	strb	r0, [r2, #8]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16f38:	7111      	strb	r1, [r2, #4]
	if (
   16f3a:	2b00      	cmp	r3, #0
   16f3c:	f000 812b 	beq.w	17196 <ull_conn_rx+0xfce>
	    !conn->llcp_enc.pause_tx &&
   16f40:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   16f44:	0788      	lsls	r0, r1, #30
   16f46:	f100 8126 	bmi.w	17196 <ull_conn_rx+0xfce>
	    !conn->llcp_phy.pause_tx &&
   16f4a:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   16f4e:	07c9      	lsls	r1, r1, #31
   16f50:	f100 8121 	bmi.w	17196 <ull_conn_rx+0xfce>
		if (conn->tx_head == conn->tx_data) {
   16f54:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   16f58:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   16f5a:	bf04      	itt	eq
   16f5c:	6819      	ldreq	r1, [r3, #0]
   16f5e:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   16f62:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   16f66:	2900      	cmp	r1, #0
   16f68:	f000 8380 	beq.w	1766c <ull_conn_rx+0x14a4>
	tx->next = conn->tx_ctrl_last->next;
   16f6c:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   16f70:	6819      	ldr	r1, [r3, #0]
   16f72:	6011      	str	r1, [r2, #0]
	conn->tx_ctrl_last->next = tx;
   16f74:	601a      	str	r2, [r3, #0]
	conn->tx_ctrl_last = tx;
   16f76:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
	if (!tx->next) {
   16f7a:	6813      	ldr	r3, [r2, #0]
   16f7c:	2b00      	cmp	r3, #0
   16f7e:	f47f a96d 	bne.w	1625c <ull_conn_rx+0x94>
		conn->tx_data_last = tx;
   16f82:	f8c4 21cc 	str.w	r2, [r4, #460]	; 0x1cc
	rx->hdr.type = NODE_RX_TYPE_RELEASE;
   16f86:	f7ff b969 	b.w	1625c <ull_conn_rx+0x94>
			conn->llcp_conn_param.disabled = 1U;
   16f8a:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16f8e:	f042 0210 	orr.w	r2, r2, #16
   16f92:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
			if (!conn->lll.role) {
   16f96:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   16f9a:	2a00      	cmp	r2, #0
   16f9c:	f2c0 8234 	blt.w	17408 <ull_conn_rx+0x1240>
				LL_ASSERT(conn->llcp_cu.req ==
   16fa0:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   16fa4:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   16fa8:	429a      	cmp	r2, r3
   16faa:	d00e      	beq.n	16fca <ull_conn_rx+0xe02>
   16fac:	4a1d      	ldr	r2, [pc, #116]	; (17024 <ull_conn_rx+0xe5c>)
   16fae:	4922      	ldr	r1, [pc, #136]	; (17038 <ull_conn_rx+0xe70>)
   16fb0:	481e      	ldr	r0, [pc, #120]	; (1702c <ull_conn_rx+0xe64>)
   16fb2:	f641 0364 	movw	r3, #6244	; 0x1864
   16fb6:	f00a fdb5 	bl	21b24 <printk>
   16fba:	4040      	eors	r0, r0
   16fbc:	f380 8811 	msr	BASEPRI, r0
   16fc0:	f04f 0003 	mov.w	r0, #3
   16fc4:	df02      	svc	2
   16fc6:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
				conn->llcp_conn_param.state =
   16fca:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   16fce:	2105      	movs	r1, #5
   16fd0:	f361 0202 	bfi	r2, r1, #0, #3
				conn->llcp_cu.ack--;
   16fd4:	3b01      	subs	r3, #1
				conn->llcp_cu.win_size = 1U;
   16fd6:	2101      	movs	r1, #1
				conn->llcp_cu.ack--;
   16fd8:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
				conn->llcp_cu.win_size = 1U;
   16fdc:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   16fe0:	682d      	ldr	r5, [r5, #0]
				conn->llcp_conn_param.state =
   16fe2:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
				conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   16fe6:	f002 0308 	and.w	r3, r2, #8
   16fea:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
   16fee:	430b      	orrs	r3, r1
   16ff0:	f022 020f 	bic.w	r2, r2, #15
   16ff4:	4313      	orrs	r3, r2
   16ff6:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
				conn->llcp_cu.latency =
   16ffa:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
				conn->llcp_cu.interval =
   16ffe:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
				conn->llcp_cu.latency =
   17002:	f8a4 3116 	strh.w	r3, [r4, #278]	; 0x116
				conn->llcp_cu.win_offset_us = 0U;
   17006:	2000      	movs	r0, #0
				conn->llcp_cu.timeout =
   17008:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
				conn->llcp_cu.interval =
   1700c:	f8a4 2114 	strh.w	r2, [r4, #276]	; 0x114
				conn->llcp_cu.timeout =
   17010:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
				conn->llcp_cu.win_offset_us = 0U;
   17014:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17018:	7129      	strb	r1, [r5, #4]
				break;
   1701a:	f7ff b922 	b.w	16262 <ull_conn_rx+0x9a>
   1701e:	bf00      	nop
   17020:	2000e484 	.word	0x2000e484
   17024:	000288c0 	.word	0x000288c0
   17028:	0002849c 	.word	0x0002849c
   1702c:	00028404 	.word	0x00028404
   17030:	2000e400 	.word	0x2000e400
   17034:	00028a34 	.word	0x00028a34
   17038:	00028a0c 	.word	0x00028a0c
			uint16_t interval_min = sys_le16_to_cpu(cpr->interval_min);
   1703c:	f8b7 a020 	ldrh.w	sl, [r7, #32]
   17040:	fa1f f28a 	uxth.w	r2, sl
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17044:	2a05      	cmp	r2, #5
   17046:	d97d      	bls.n	17144 <ull_conn_rx+0xf7c>
			uint16_t interval_max = sys_le16_to_cpu(cpr->interval_max);
   17048:	f8b7 9022 	ldrh.w	r9, [r7, #34]	; 0x22
   1704c:	fa1f f189 	uxth.w	r1, r9
			if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   17050:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   17054:	d876      	bhi.n	17144 <ull_conn_rx+0xf7c>
			    (interval_max > 3200) ||
   17056:	428a      	cmp	r2, r1
   17058:	d874      	bhi.n	17144 <ull_conn_rx+0xf7c>
			uint16_t latency = sys_le16_to_cpu(cpr->latency);
   1705a:	f8b7 8024 	ldrh.w	r8, [r7, #36]	; 0x24
   1705e:	fa1f fc88 	uxth.w	ip, r8
			    (interval_min > interval_max) ||
   17062:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   17066:	d26d      	bcs.n	17144 <ull_conn_rx+0xf7c>
			uint16_t timeout = sys_le16_to_cpu(cpr->timeout);
   17068:	f8b7 e026 	ldrh.w	lr, [r7, #38]	; 0x26
   1706c:	fa1f f28e 	uxth.w	r2, lr
			    (latency > 499) ||
   17070:	f1a2 050a 	sub.w	r5, r2, #10
   17074:	f640 4b76 	movw	fp, #3190	; 0xc76
   17078:	b2ad      	uxth	r5, r5
   1707a:	455d      	cmp	r5, fp
   1707c:	d862      	bhi.n	17144 <ull_conn_rx+0xf7c>
			     ((latency + 1) * interval_max)) ||
   1707e:	f10c 0501 	add.w	r5, ip, #1
   17082:	b2ad      	uxth	r5, r5
   17084:	fb01 f505 	mul.w	r5, r1, r5
			    (timeout < 10) || (timeout > 3200) ||
   17088:	ebb5 0f82 	cmp.w	r5, r2, lsl #2
   1708c:	d25a      	bcs.n	17144 <ull_conn_rx+0xf7c>
			     ((latency + 1) * interval_max)) ||
   1708e:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   17092:	4559      	cmp	r1, fp
   17094:	d356      	bcc.n	17144 <ull_conn_rx+0xf7c>
			conn->llcp_conn_param.interval_min = interval_min;
   17096:	f8a4 a180 	strh.w	sl, [r4, #384]	; 0x180
			conn->llcp_conn_param.interval_max = interval_max;
   1709a:	f8a4 9182 	strh.w	r9, [r4, #386]	; 0x182
			conn->llcp_conn_param.latency =	latency;
   1709e:	f8a4 8184 	strh.w	r8, [r4, #388]	; 0x184
			conn->llcp_conn_param.timeout =	timeout;
   170a2:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
			conn->llcp_conn_param.preferred_periodicity =
   170a6:	f884 b188 	strb.w	fp, [r4, #392]	; 0x188
				sys_le16_to_cpu(cpr->reference_conn_event_count);
   170aa:	f897 e02a 	ldrb.w	lr, [r7, #42]	; 0x2a
   170ae:	f897 5029 	ldrb.w	r5, [r7, #41]	; 0x29
   170b2:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.reference_conn_event_count =
   170b6:	f8a4 518a 	strh.w	r5, [r4, #394]	; 0x18a
				sys_le16_to_cpu(cpr->offset0);
   170ba:	f897 e02c 	ldrb.w	lr, [r7, #44]	; 0x2c
   170be:	f897 502b 	ldrb.w	r5, [r7, #43]	; 0x2b
   170c2:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset0 =
   170c6:	f8a4 518c 	strh.w	r5, [r4, #396]	; 0x18c
				sys_le16_to_cpu(cpr->offset1);
   170ca:	f897 e02e 	ldrb.w	lr, [r7, #46]	; 0x2e
   170ce:	f897 502d 	ldrb.w	r5, [r7, #45]	; 0x2d
   170d2:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset1 =
   170d6:	f8a4 518e 	strh.w	r5, [r4, #398]	; 0x18e
				sys_le16_to_cpu(cpr->offset2);
   170da:	f897 e030 	ldrb.w	lr, [r7, #48]	; 0x30
   170de:	f897 502f 	ldrb.w	r5, [r7, #47]	; 0x2f
   170e2:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset2 =
   170e6:	f8a4 5190 	strh.w	r5, [r4, #400]	; 0x190
				sys_le16_to_cpu(cpr->offset3);
   170ea:	f897 e032 	ldrb.w	lr, [r7, #50]	; 0x32
   170ee:	f897 5031 	ldrb.w	r5, [r7, #49]	; 0x31
   170f2:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset3 =
   170f6:	f8a4 5192 	strh.w	r5, [r4, #402]	; 0x192
				sys_le16_to_cpu(cpr->offset4);
   170fa:	f897 e034 	ldrb.w	lr, [r7, #52]	; 0x34
   170fe:	f897 5033 	ldrb.w	r5, [r7, #51]	; 0x33
   17102:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset4 =
   17106:	f8a4 5194 	strh.w	r5, [r4, #404]	; 0x194
				sys_le16_to_cpu(cpr->offset5);
   1710a:	f897 5035 	ldrb.w	r5, [r7, #53]	; 0x35
   1710e:	f897 e036 	ldrb.w	lr, [r7, #54]	; 0x36
   17112:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
			conn->llcp_conn_param.offset5 =
   17116:	f8a4 5196 	strh.w	r5, [r4, #406]	; 0x196
			     lll->interval) ||
   1711a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
			if ((conn->llcp_conn_param.interval_max !=
   1711c:	42a9      	cmp	r1, r5
   1711e:	f000 834a 	beq.w	177b6 <ull_conn_rx+0x15ee>
				conn->llcp_conn_param.state =
   17122:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   17126:	2103      	movs	r1, #3
   17128:	f361 0202 	bfi	r2, r1, #0, #3
   1712c:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
			conn->llcp_conn_param.ack--;
   17130:	3801      	subs	r0, #1
   17132:	f884 017d 	strb.w	r0, [r4, #381]	; 0x17d
			if (!conn_upd_curr) {
   17136:	2b00      	cmp	r3, #0
   17138:	f47f a892 	bne.w	16260 <ull_conn_rx+0x98>
				conn_upd_curr = conn;
   1713c:	6034      	str	r4, [r6, #0]
	int nack = 0;
   1713e:	4618      	mov	r0, r3
   17140:	f7ff b88f 	b.w	16262 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   17144:	231e      	movs	r3, #30
   17146:	220f      	movs	r2, #15
   17148:	f7ff b9f9 	b.w	1653e <ull_conn_rx+0x376>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1714c:	48d9      	ldr	r0, [pc, #868]	; (174b4 <ull_conn_rx+0x12ec>)
   1714e:	f7f9 fae3 	bl	10718 <mem_acquire>
		if (!tx) {
   17152:	4601      	mov	r1, r0
   17154:	2800      	cmp	r0, #0
   17156:	f43f ae67 	beq.w	16e28 <ull_conn_rx+0xc60>
		conn->llcp_version.tx = 1U;
   1715a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   1715e:	f043 0301 	orr.w	r3, r3, #1
   17162:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17166:	220c      	movs	r2, #12
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17168:	7903      	ldrb	r3, [r0, #4]
		pdu_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   1716a:	71c2      	strb	r2, [r0, #7]
		v->version_number = LL_VERSION_NUMBER;
   1716c:	220b      	movs	r2, #11
   1716e:	7202      	strb	r2, [r0, #8]
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17170:	f043 0303 	orr.w	r3, r3, #3
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17174:	f06f 020e 	mvn.w	r2, #14
		pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17178:	7103      	strb	r3, [r0, #4]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   1717a:	7242      	strb	r2, [r0, #9]
		v->sub_version_number =
   1717c:	f04f 33ff 	mov.w	r3, #4294967295
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17180:	2205      	movs	r2, #5
		v->sub_version_number =
   17182:	72c3      	strb	r3, [r0, #11]
   17184:	7303      	strb	r3, [r0, #12]
		pdu_tx->len =
   17186:	7145      	strb	r5, [r0, #5]
		v->company_id =	sys_cpu_to_le16(ll_settings_company_id());
   17188:	7282      	strb	r2, [r0, #10]
		ctrl_tx_sec_enqueue(conn, tx);
   1718a:	4620      	mov	r0, r4
   1718c:	f7fe f978 	bl	15480 <ctrl_tx_sec_enqueue>
		rx->hdr.type = NODE_RX_TYPE_RELEASE;
   17190:	2301      	movs	r3, #1
   17192:	713b      	strb	r3, [r7, #4]
   17194:	e46f      	b.n	16a76 <ull_conn_rx+0x8ae>
		if (!conn->tx_ctrl) {
   17196:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   1719a:	2900      	cmp	r1, #0
   1719c:	f47f aee6 	bne.w	16f6c <ull_conn_rx+0xda4>
			tx->next = conn->tx_head;
   171a0:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl = tx;
   171a2:	e9c4 226f 	strd	r2, r2, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   171a6:	f8c4 21c4 	str.w	r2, [r4, #452]	; 0x1c4
   171aa:	e6e6      	b.n	16f7a <ull_conn_rx+0xdb2>
				      0x03) == 0x02) &&
   171ac:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   171b0:	2b03      	cmp	r3, #3
   171b2:	f47f a9c2 	bne.w	1653a <ull_conn_rx+0x372>
   171b6:	f7ff b9b9 	b.w	1652c <ull_conn_rx+0x364>
	instant = sys_le16_to_cpu(ind->instant);
   171ba:	8c78      	ldrh	r0, [r7, #34]	; 0x22
	if (((instant - conn->lll.event_counter) & 0xffff) > 0x7fff) {
   171bc:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   171be:	1a82      	subs	r2, r0, r2
   171c0:	0412      	lsls	r2, r2, #16
   171c2:	f100 80bd 	bmi.w	17340 <ull_conn_rx+0x1178>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   171c6:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   171ca:	f894 c0e9 	ldrb.w	ip, [r4, #233]	; 0xe9
   171ce:	eba2 020c 	sub.w	r2, r2, ip
   171d2:	f002 0203 	and.w	r2, r2, #3
   171d6:	2a02      	cmp	r2, #2
   171d8:	f000 80ec 	beq.w	173b4 <ull_conn_rx+0x11ec>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   171dc:	f894 71b4 	ldrb.w	r7, [r4, #436]	; 0x1b4
   171e0:	f894 21b5 	ldrb.w	r2, [r4, #437]	; 0x1b5
   171e4:	42ba      	cmp	r2, r7
   171e6:	d018      	beq.n	1721a <ull_conn_rx+0x1052>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   171e8:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   171ec:	f002 0203 	and.w	r2, r2, #3
   171f0:	2a02      	cmp	r2, #2
   171f2:	d112      	bne.n	1721a <ull_conn_rx+0x1052>
		conn->llcp_phy.pause_tx = 0U;
   171f4:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp_phy.ack = conn->llcp_phy.req;
   171f8:	f884 71b5 	strb.w	r7, [r4, #437]	; 0x1b5
		conn->llcp_phy.pause_tx = 0U;
   171fc:	f36f 0200 	bfc	r2, #0, #1
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17200:	f894 70ec 	ldrb.w	r7, [r4, #236]	; 0xec
		conn->llcp_phy.pause_tx = 0U;
   17204:	f884 21b7 	strb.w	r2, [r4, #439]	; 0x1b7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17208:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1720c:	f362 0741 	bfi	r7, r2, #1, #1
		conn->procedure_expire = 0U;
   17210:	2200      	movs	r2, #0
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   17212:	f884 70ec 	strb.w	r7, [r4, #236]	; 0xec
		conn->procedure_expire = 0U;
   17216:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	conn->llcp.phy_upd_ind.initiate = 0U;
   1721a:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
	conn->llcp.phy_upd_ind.instant = instant;
   1721e:	f8a4 00ee 	strh.w	r0, [r4, #238]	; 0xee
	conn->llcp.phy_upd_ind.initiate = 0U;
   17222:	009b      	lsls	r3, r3, #2
   17224:	f003 031c 	and.w	r3, r3, #28
   17228:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   1722c:	f002 0202 	and.w	r2, r2, #2
   17230:	4313      	orrs	r3, r2
	link->mem = conn->llcp_rx;
   17232:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
	conn->llcp.phy_upd_ind.initiate = 0U;
   17236:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
	link->mem = conn->llcp_rx;
   1723a:	6072      	str	r2, [r6, #4]
	(*rx)->hdr.link = link;
   1723c:	682a      	ldr	r2, [r5, #0]
   1723e:	6016      	str	r6, [r2, #0]
	conn->llcp_rx = *rx;
   17240:	682a      	ldr	r2, [r5, #0]
   17242:	f8c4 210c 	str.w	r2, [r4, #268]	; 0x10c
	*rx = NULL;
   17246:	2300      	movs	r3, #0
   17248:	602b      	str	r3, [r5, #0]
	struct node_rx_pdu *rx_dle = ll_pdu_rx_alloc();
   1724a:	f7fd f89d 	bl	14388 <ll_pdu_rx_alloc>
	LL_ASSERT(rx_dle);
   1724e:	4605      	mov	r5, r0
   17250:	2800      	cmp	r0, #0
   17252:	f000 8211 	beq.w	17678 <ull_conn_rx+0x14b0>
	rx_dle->hdr.link->mem = conn->llcp_rx;
   17256:	682b      	ldr	r3, [r5, #0]
   17258:	f8d4 210c 	ldr.w	r2, [r4, #268]	; 0x10c
   1725c:	605a      	str	r2, [r3, #4]
	conn->llcp_ack -= 2U;
   1725e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   17262:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
	conn->llcp_rx = rx_dle;
   17266:	f8c4 510c 	str.w	r5, [r4, #268]	; 0x10c
	conn->llcp_type = LLCP_PHY_UPD;
   1726a:	2106      	movs	r1, #6
	conn->llcp_ack -= 2U;
   1726c:	3a02      	subs	r2, #2
	if (conn->llcp.phy_upd_ind.tx) {
   1726e:	f013 0f1c 	tst.w	r3, #28
	conn->llcp_type = LLCP_PHY_UPD;
   17272:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
	conn->llcp_ack -= 2U;
   17276:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	if (conn->llcp.phy_upd_ind.tx) {
   1727a:	f43e aff1 	beq.w	16260 <ull_conn_rx+0x98>
		conn->lll.phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1727e:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
   17282:	f3c3 0382 	ubfx	r3, r3, #2, #3
   17286:	f363 1206 	bfi	r2, r3, #4, #3
   1728a:	f884 2064 	strb.w	r2, [r4, #100]	; 0x64
	int nack = 0;
   1728e:	2000      	movs	r0, #0
   17290:	f7fe bfe7 	b.w	16262 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   17294:	2323      	movs	r3, #35	; 0x23
   17296:	220f      	movs	r2, #15
   17298:	f7ff b951 	b.w	1653e <ull_conn_rx+0x376>
   1729c:	4659      	mov	r1, fp
   1729e:	e55a      	b.n	16d56 <ull_conn_rx+0xb8e>
			conn->llcp_length.disabled = 1U;
   172a0:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   172a4:	f884 31a5 	strb.w	r3, [r4, #421]	; 0x1a5
			conn->llcp_length.disabled = 1U;
   172a8:	f042 0308 	orr.w	r3, r2, #8
   172ac:	f884 31a6 	strb.w	r3, [r4, #422]	; 0x1a6
			conn->llcp_length.ack = conn->llcp_length.req;
   172b0:	f7ff b87e 	b.w	163b0 <ull_conn_rx+0x1e8>
				conn->llcp_phy.state =
   172b4:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   172b8:	4281      	cmp	r1, r0
				conn->llcp_phy.state =
   172ba:	f043 0303 	orr.w	r3, r3, #3
   172be:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				if (conn->llcp_phy.ack ==
   172c2:	d111      	bne.n	172e8 <ull_conn_rx+0x1120>
					conn->llcp_phy.tx =
   172c4:	f8b4 21b6 	ldrh.w	r2, [r4, #438]	; 0x1b6
						conn->phy_pref_rx;
   172c8:	f894 01b8 	ldrb.w	r0, [r4, #440]	; 0x1b8
					conn->llcp_phy.ack--;
   172cc:	1e4b      	subs	r3, r1, #1
					conn->llcp_phy.tx =
   172ce:	f422 629f 	bic.w	r2, r2, #1272	; 0x4f8
					conn->llcp_phy.ack--;
   172d2:	f884 31b5 	strb.w	r3, [r4, #437]	; 0x1b5
					conn->llcp_phy.tx =
   172d6:	f240 43fc 	movw	r3, #1276	; 0x4fc
   172da:	f022 0204 	bic.w	r2, r2, #4
   172de:	ea03 0380 	and.w	r3, r3, r0, lsl #2
   172e2:	4313      	orrs	r3, r2
   172e4:	f8a4 31b6 	strh.w	r3, [r4, #438]	; 0x1b6
				conn->llcp_phy.rx &= p->tx_phys;
   172e8:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   172ec:	f897 1020 	ldrb.w	r1, [r7, #32]
				conn->llcp_phy.tx &= p->rx_phys;
   172f0:	f3c3 0082 	ubfx	r0, r3, #2, #3
				conn->llcp_phy.rx &= p->tx_phys;
   172f4:	ea01 1153 	and.w	r1, r1, r3, lsr #5
				conn->llcp_phy.tx &= p->rx_phys;
   172f8:	f003 0203 	and.w	r2, r3, #3
   172fc:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
   17300:	4003      	ands	r3, r0
   17302:	009b      	lsls	r3, r3, #2
   17304:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   17308:	4313      	orrs	r3, r2
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   1730a:	f013 0f1c 	tst.w	r3, #28
				conn->llcp_phy.tx &= p->rx_phys;
   1730e:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				if (!conn->llcp_phy.tx || !conn->llcp_phy.rx) {
   17312:	d002      	beq.n	1731a <ull_conn_rx+0x1152>
   17314:	f013 0fe0 	tst.w	r3, #224	; 0xe0
   17318:	d105      	bne.n	17326 <ull_conn_rx+0x115e>
					conn->llcp_phy.tx = 0;
   1731a:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   1731e:	f003 0303 	and.w	r3, r3, #3
   17322:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
				conn->llcp_phy.pause_tx = 1U;
   17326:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1732a:	2201      	movs	r2, #1
				conn->llcp_phy.pause_tx = 1U;
   1732c:	4313      	orrs	r3, r2
   1732e:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
	int nack = 0;
   17332:	2000      	movs	r0, #0
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17334:	713a      	strb	r2, [r7, #4]
   17336:	f7fe bf94 	b.w	16262 <ull_conn_rx+0x9a>
				nack = reject_ext_ind_send(conn, *rx,
   1733a:	2323      	movs	r3, #35	; 0x23
   1733c:	f7ff b8fe 	b.w	1653c <ull_conn_rx+0x374>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17340:	2301      	movs	r3, #1
   17342:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_INSTANT_PASSED;
   17344:	2328      	movs	r3, #40	; 0x28
			goto ull_conn_rx_unknown_rsp_send;
		}

		err = phy_upd_ind_recv(conn, link, rx, pdu_rx);
		if (err) {
			conn->llcp_terminate.reason_peer = err;
   17346:	f884 313b 	strb.w	r3, [r4, #315]	; 0x13b
	int nack = 0;
   1734a:	2000      	movs	r0, #0
   1734c:	f7fe bf89 	b.w	16262 <ull_conn_rx+0x9a>
			lll->phy_tx_time = lll->phy_tx;
   17350:	f894 2064 	ldrb.w	r2, [r4, #100]	; 0x64
			conn->llcp_phy.pause_tx = 0U;
   17354:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
			conn->llcp_phy.ack = conn->llcp_phy.req;
   17358:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
			conn->llcp_phy.pause_tx = 0U;
   1735c:	f023 0309 	bic.w	r3, r3, #9
			lll->phy_tx_time = lll->phy_tx;
   17360:	4611      	mov	r1, r2
			conn->llcp_phy.pause_tx = 0U;
   17362:	f043 0308 	orr.w	r3, r3, #8
			lll->phy_tx_time = lll->phy_tx;
   17366:	f362 1106 	bfi	r1, r2, #4, #3
   1736a:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
			if (conn->llcp_phy.cmd) {
   1736e:	f013 0f04 	tst.w	r3, #4
			conn->llcp_phy.pause_tx = 0U;
   17372:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
			lll->phy_tx_time = lll->phy_tx;
   17376:	f3c2 0202 	ubfx	r2, r2, #0, #3
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   1737a:	682b      	ldr	r3, [r5, #0]
			if (conn->llcp_phy.cmd) {
   1737c:	f000 808d 	beq.w	1749a <ull_conn_rx+0x12d2>
				(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17380:	2119      	movs	r1, #25
   17382:	7119      	strb	r1, [r3, #4]
				p->status = 0U;
   17384:	2300      	movs	r3, #0
   17386:	773b      	strb	r3, [r7, #28]
				p->tx = lll->phy_tx;
   17388:	777a      	strb	r2, [r7, #29]
				p->rx = lll->phy_rx;
   1738a:	f894 3065 	ldrb.w	r3, [r4, #101]	; 0x65
   1738e:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17392:	77bb      	strb	r3, [r7, #30]
   17394:	f7ff b80c 	b.w	163b0 <ull_conn_rx+0x1e8>
	conn->llcp_enc.pause_rx = 0U;
   17398:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	conn->llcp_ack = conn->llcp_req;
   1739c:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
	conn->procedure_expire = 0U;
   173a0:	2300      	movs	r3, #0
	conn->llcp_enc.pause_rx = 0U;
   173a2:	f021 0103 	bic.w	r1, r1, #3
   173a6:	f884 115e 	strb.w	r1, [r4, #350]	; 0x15e
	conn->procedure_expire = 0U;
   173aa:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	int nack = 0;
   173ae:	4618      	mov	r0, r3
   173b0:	f7fe bf57 	b.w	16262 <ull_conn_rx+0x9a>
		(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   173b4:	2301      	movs	r3, #1
   173b6:	713b      	strb	r3, [r7, #4]
		return BT_HCI_ERR_DIFF_TRANS_COLLISION;
   173b8:	232a      	movs	r3, #42	; 0x2a
   173ba:	e7c4      	b.n	17346 <ull_conn_rx+0x117e>
			conn->procedure_expire = 0U;
   173bc:	2600      	movs	r6, #0
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   173be:	4559      	cmp	r1, fp
			conn->llcp_length.ack = conn->llcp_length.req;
   173c0:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
			conn->procedure_expire = 0U;
   173c4:	f8a4 60cc 	strh.w	r6, [r4, #204]	; 0xcc
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   173c8:	f000 813e 	beq.w	17648 <ull_conn_rx+0x1480>
			conn->lll.max_rx_time = eff_rx_time;
   173cc:	f8a4 e062 	strh.w	lr, [r4, #98]	; 0x62
			if (tx) {
   173d0:	2b00      	cmp	r3, #0
   173d2:	f000 8134 	beq.w	1763e <ull_conn_rx+0x1476>
					(conn->llcp_length.req - 1);
   173d6:	3a01      	subs	r2, #1
				conn->llcp_length.ack =
   173d8:	f884 21a5 	strb.w	r2, [r4, #421]	; 0x1a5
				conn->llcp_length.state =
   173dc:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
				conn->llcp_length.rx_octets = eff_rx_octets;
   173e0:	f8a4 81a8 	strh.w	r8, [r4, #424]	; 0x1a8
				conn->llcp_length.state =
   173e4:	2503      	movs	r5, #3
   173e6:	f365 0202 	bfi	r2, r5, #0, #3
				conn->llcp_length.tx_octets = eff_tx_octets;
   173ea:	f8a4 11aa 	strh.w	r1, [r4, #426]	; 0x1aa
				conn->llcp_length.rx_time = eff_rx_time;
   173ee:	f8a4 e1ac 	strh.w	lr, [r4, #428]	; 0x1ac
				conn->llcp_length.tx_time = eff_tx_time;
   173f2:	f8a4 01ae 	strh.w	r0, [r4, #430]	; 0x1ae
				conn->llcp_length.state =
   173f6:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
			lr->max_rx_octets = sys_cpu_to_le16(eff_rx_octets);
   173fa:	f8a7 8020 	strh.w	r8, [r7, #32]
			lr->max_tx_octets = sys_cpu_to_le16(eff_tx_octets);
   173fe:	84b9      	strh	r1, [r7, #36]	; 0x24
			lr->max_rx_time = sys_cpu_to_le16(eff_rx_time);
   17400:	f8a7 e022 	strh.w	lr, [r7, #34]	; 0x22
			lr->max_tx_time = sys_cpu_to_le16(eff_tx_time);
   17404:	84f8      	strh	r0, [r7, #38]	; 0x26
   17406:	e4dd      	b.n	16dc4 <ull_conn_rx+0xbfc>
			LL_ASSERT(conn_upd_curr == conn);
   17408:	4e2b      	ldr	r6, [pc, #172]	; (174b8 <ull_conn_rx+0x12f0>)
   1740a:	6832      	ldr	r2, [r6, #0]
   1740c:	4294      	cmp	r4, r2
   1740e:	d00e      	beq.n	1742e <ull_conn_rx+0x1266>
   17410:	4a2a      	ldr	r2, [pc, #168]	; (174bc <ull_conn_rx+0x12f4>)
   17412:	492b      	ldr	r1, [pc, #172]	; (174c0 <ull_conn_rx+0x12f8>)
   17414:	482b      	ldr	r0, [pc, #172]	; (174c4 <ull_conn_rx+0x12fc>)
   17416:	f641 037c 	movw	r3, #6268	; 0x187c
   1741a:	f00a fb83 	bl	21b24 <printk>
   1741e:	4040      	eors	r0, r0
   17420:	f380 8811 	msr	BASEPRI, r0
   17424:	f04f 0003 	mov.w	r0, #3
   17428:	df02      	svc	2
   1742a:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   1742e:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (!conn->llcp_conn_param.cmd) {
   17432:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
	conn_upd_curr = NULL;
   17436:	2200      	movs	r2, #0
			if (!conn->llcp_conn_param.cmd) {
   17438:	f013 0308 	ands.w	r3, r3, #8
	conn_upd_curr = NULL;
   1743c:	6032      	str	r2, [r6, #0]
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1743e:	682a      	ldr	r2, [r5, #0]
			if (!conn->llcp_conn_param.cmd) {
   17440:	f040 80cf 	bne.w	175e2 <ull_conn_rx+0x141a>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17444:	2101      	movs	r1, #1
   17446:	7111      	strb	r1, [r2, #4]
	int nack = 0;
   17448:	4618      	mov	r0, r3
				break;
   1744a:	f7fe bf0a 	b.w	16262 <ull_conn_rx+0x9a>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   1744e:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   17452:	f36f 0101 	bfc	r1, #0, #2
				conn->llcp_ack -= 2U;
   17456:	3b02      	subs	r3, #2
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   17458:	f884 10f8 	strb.w	r1, [r4, #248]	; 0xf8
				conn->llcp_type = LLCP_ENCRYPTION;
   1745c:	2103      	movs	r1, #3
   1745e:	f884 10ea 	strb.w	r1, [r4, #234]	; 0xea
				conn->llcp_ack -= 2U;
   17462:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   17466:	f7fe bf9b 	b.w	163a0 <ull_conn_rx+0x1d8>
		conn_upd_curr = conn;
   1746a:	601c      	str	r4, [r3, #0]
   1746c:	f7ff b921 	b.w	166b2 <ull_conn_rx+0x4ea>
	struct node_tx *tx = NULL;
   17470:	2300      	movs	r3, #0
   17472:	f7ff b828 	b.w	164c6 <ull_conn_rx+0x2fe>
				      0x03) == 0x02) &&
   17476:	f894 10ea 	ldrb.w	r1, [r4, #234]	; 0xea
   1747a:	2903      	cmp	r1, #3
   1747c:	f47f ac3e 	bne.w	16cfc <ull_conn_rx+0xb34>
   17480:	e435      	b.n	16cee <ull_conn_rx+0xb26>
				conn->llcp_length.state =
   17482:	f894 21a6 	ldrb.w	r2, [r4, #422]	; 0x1a6
				conn->lll.max_tx_octets = eff_tx_octets;
   17486:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
				conn->llcp_length.state =
   1748a:	2704      	movs	r7, #4
   1748c:	f367 0202 	bfi	r2, r7, #0, #3
				conn->lll.max_tx_time = eff_tx_time;
   17490:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
				conn->llcp_length.state =
   17494:	f884 21a6 	strb.w	r2, [r4, #422]	; 0x1a6
   17498:	e48a      	b.n	16db0 <ull_conn_rx+0xbe8>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   1749a:	2201      	movs	r2, #1
   1749c:	711a      	strb	r2, [r3, #4]
   1749e:	f7fe bf87 	b.w	163b0 <ull_conn_rx+0x1e8>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   174a2:	2b23      	cmp	r3, #35	; 0x23
   174a4:	f43f acd7 	beq.w	16e56 <ull_conn_rx+0xc8e>
			conn->slave.ticks_to_offset =
   174a8:	f8d4 31a0 	ldr.w	r3, [r4, #416]	; 0x1a0
   174ac:	f8c4 30e4 	str.w	r3, [r4, #228]	; 0xe4
   174b0:	e4d1      	b.n	16e56 <ull_conn_rx+0xc8e>
   174b2:	bf00      	nop
   174b4:	2000e484 	.word	0x2000e484
   174b8:	2000e400 	.word	0x2000e400
   174bc:	000288c0 	.word	0x000288c0
   174c0:	00028a34 	.word	0x00028a34
   174c4:	00028404 	.word	0x00028404
				uint16_t interval_min =
   174c8:	f8b7 9020 	ldrh.w	r9, [r7, #32]
   174cc:	fa1f f189 	uxth.w	r1, r9
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   174d0:	2905      	cmp	r1, #5
   174d2:	f67f ae37 	bls.w	17144 <ull_conn_rx+0xf7c>
				uint16_t interval_max =
   174d6:	f8b7 8022 	ldrh.w	r8, [r7, #34]	; 0x22
   174da:	fa1f f588 	uxth.w	r5, r8
				if ((interval_min < CONN_INTERVAL_MIN(conn)) ||
   174de:	f5b5 6f48 	cmp.w	r5, #3200	; 0xc80
   174e2:	f63f ae2f 	bhi.w	17144 <ull_conn_rx+0xf7c>
				    (interval_max > 3200) ||
   174e6:	42a9      	cmp	r1, r5
   174e8:	f63f ae2c 	bhi.w	17144 <ull_conn_rx+0xf7c>
				uint16_t latency =
   174ec:	f8b7 e024 	ldrh.w	lr, [r7, #36]	; 0x24
   174f0:	fa1f fc8e 	uxth.w	ip, lr
				    (interval_min > interval_max) ||
   174f4:	f5bc 7ffa 	cmp.w	ip, #500	; 0x1f4
   174f8:	f4bf ae24 	bcs.w	17144 <ull_conn_rx+0xf7c>
				uint16_t timeout =
   174fc:	8cf9      	ldrh	r1, [r7, #38]	; 0x26
   174fe:	f8ad 1006 	strh.w	r1, [sp, #6]
   17502:	b289      	uxth	r1, r1
				    (latency > 499) ||
   17504:	f1a1 0a0a 	sub.w	sl, r1, #10
   17508:	f640 4b76 	movw	fp, #3190	; 0xc76
   1750c:	fa1f fa8a 	uxth.w	sl, sl
   17510:	45da      	cmp	sl, fp
   17512:	f63f ae17 	bhi.w	17144 <ull_conn_rx+0xf7c>
				     ((latency + 1) * interval_max)) ||
   17516:	f10c 0a01 	add.w	sl, ip, #1
   1751a:	fa1f fa8a 	uxth.w	sl, sl
   1751e:	fb05 fa0a 	mul.w	sl, r5, sl
				    (timeout > 3200) ||
   17522:	ebba 0f81 	cmp.w	sl, r1, lsl #2
   17526:	f4bf ae0d 	bcs.w	17144 <ull_conn_rx+0xf7c>
				     ((latency + 1) * interval_max)) ||
   1752a:	f897 b028 	ldrb.w	fp, [r7, #40]	; 0x28
   1752e:	455d      	cmp	r5, fp
   17530:	f4ff ae08 	bcc.w	17144 <ull_conn_rx+0xf7c>
				conn->llcp_conn_param.latency =	latency;
   17534:	f8a4 e184 	strh.w	lr, [r4, #388]	; 0x184
				conn->llcp_conn_param.timeout =	timeout;
   17538:	f8bd e006 	ldrh.w	lr, [sp, #6]
				conn->llcp_conn_param.interval_min =
   1753c:	f8a4 9180 	strh.w	r9, [r4, #384]	; 0x180
				conn->llcp_conn_param.interval_max =
   17540:	f8a4 8182 	strh.w	r8, [r4, #386]	; 0x182
				conn->llcp_conn_param.timeout =	timeout;
   17544:	f8a4 e186 	strh.w	lr, [r4, #390]	; 0x186
				conn->llcp_conn_param.preferred_periodicity =
   17548:	f884 b188 	strb.w	fp, [r4, #392]	; 0x188
					sys_le16_to_cpu(cpr->reference_conn_event_count);
   1754c:	f897 802a 	ldrb.w	r8, [r7, #42]	; 0x2a
   17550:	f897 e029 	ldrb.w	lr, [r7, #41]	; 0x29
   17554:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.reference_conn_event_count =
   17558:	f8a4 e18a 	strh.w	lr, [r4, #394]	; 0x18a
					sys_le16_to_cpu(cpr->offset0);
   1755c:	f897 802c 	ldrb.w	r8, [r7, #44]	; 0x2c
   17560:	f897 e02b 	ldrb.w	lr, [r7, #43]	; 0x2b
   17564:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset0 =
   17568:	f8a4 e18c 	strh.w	lr, [r4, #396]	; 0x18c
					sys_le16_to_cpu(cpr->offset1);
   1756c:	f897 802e 	ldrb.w	r8, [r7, #46]	; 0x2e
   17570:	f897 e02d 	ldrb.w	lr, [r7, #45]	; 0x2d
   17574:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset1 =
   17578:	f8a4 e18e 	strh.w	lr, [r4, #398]	; 0x18e
					sys_le16_to_cpu(cpr->offset2);
   1757c:	f897 8030 	ldrb.w	r8, [r7, #48]	; 0x30
   17580:	f897 e02f 	ldrb.w	lr, [r7, #47]	; 0x2f
   17584:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset2 =
   17588:	f8a4 e190 	strh.w	lr, [r4, #400]	; 0x190
					sys_le16_to_cpu(cpr->offset3);
   1758c:	f897 8032 	ldrb.w	r8, [r7, #50]	; 0x32
   17590:	f897 e031 	ldrb.w	lr, [r7, #49]	; 0x31
   17594:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset3 =
   17598:	f8a4 e192 	strh.w	lr, [r4, #402]	; 0x192
					sys_le16_to_cpu(cpr->offset4);
   1759c:	f897 8034 	ldrb.w	r8, [r7, #52]	; 0x34
   175a0:	f897 e033 	ldrb.w	lr, [r7, #51]	; 0x33
   175a4:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset4 =
   175a8:	f8a4 e194 	strh.w	lr, [r4, #404]	; 0x194
					sys_le16_to_cpu(cpr->offset5);
   175ac:	f897 e035 	ldrb.w	lr, [r7, #53]	; 0x35
   175b0:	f897 8036 	ldrb.w	r8, [r7, #54]	; 0x36
   175b4:	ea4e 2e08 	orr.w	lr, lr, r8, lsl #8
				conn->llcp_conn_param.offset5 =
   175b8:	f8a4 e196 	strh.w	lr, [r4, #406]	; 0x196
				     lll->interval) ||
   175bc:	f8b4 e02e 	ldrh.w	lr, [r4, #46]	; 0x2e
				if ((conn->llcp_conn_param.interval_max !=
   175c0:	4575      	cmp	r5, lr
   175c2:	f000 80d8 	beq.w	17776 <ull_conn_rx+0x15ae>
					if (conn->llcp_enc.pause_tx) {
   175c6:	f012 0f02 	tst.w	r2, #2
						conn->llcp_conn_param.state =
   175ca:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
					if (conn->llcp_enc.pause_tx) {
   175ce:	f43f adaa 	beq.w	17126 <ull_conn_rx+0xf5e>
						conn->llcp_conn_param.state =
   175d2:	2102      	movs	r1, #2
   175d4:	f361 0202 	bfi	r2, r1, #0, #3
   175d8:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
						(*rx)->hdr.type =
   175dc:	2201      	movs	r2, #1
   175de:	713a      	strb	r2, [r7, #4]
   175e0:	e5a6      	b.n	17130 <ull_conn_rx+0xf68>
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   175e2:	2115      	movs	r1, #21
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   175e4:	231a      	movs	r3, #26
			(*rx)->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   175e6:	7111      	strb	r1, [r2, #4]
			cu->status = BT_HCI_ERR_UNSUPP_REMOTE_FEATURE;
   175e8:	773b      	strb	r3, [r7, #28]
			cu->interval = lll->interval;
   175ea:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
			cu->timeout = conn->supervision_reload *
   175ec:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			cu->latency = lll->latency;
   175f0:	8e21      	ldrh	r1, [r4, #48]	; 0x30
			cu->interval = lll->interval;
   175f2:	83fa      	strh	r2, [r7, #30]
			cu->timeout = conn->supervision_reload *
   175f4:	fb02 f303 	mul.w	r3, r2, r3
				      lll->interval * 125U / 1000;
   175f8:	227d      	movs	r2, #125	; 0x7d
   175fa:	fb02 f303 	mul.w	r3, r2, r3
			cu->latency = lll->latency;
   175fe:	8439      	strh	r1, [r7, #32]
				      lll->interval * 125U / 1000;
   17600:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17604:	fbb3 f3f2 	udiv	r3, r3, r2
			cu->timeout = conn->supervision_reload *
   17608:	847b      	strh	r3, [r7, #34]	; 0x22
			    PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ)) {
   1760a:	f7fe bed1 	b.w	163b0 <ull_conn_rx+0x1e8>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   1760e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
			conn->llcp_ack += 2U;
   17612:	3202      	adds	r2, #2
   17614:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   17618:	2b00      	cmp	r3, #0
   1761a:	d13b      	bne.n	17694 <ull_conn_rx+0x14cc>
			conn->slave.llcp_type = conn->llcp_type;
   1761c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   17620:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
   17624:	f7fe beef 	b.w	16406 <ull_conn_rx+0x23e>
		(*rx)->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   17628:	2219      	movs	r2, #25
   1762a:	711a      	strb	r2, [r3, #4]
		p->status = 0U;
   1762c:	7738      	strb	r0, [r7, #28]
		p->tx = conn->lll.phy_tx;
   1762e:	7779      	strb	r1, [r7, #29]
		p->rx = conn->lll.phy_rx;
   17630:	f894 1065 	ldrb.w	r1, [r4, #101]	; 0x65
   17634:	f3c1 0302 	ubfx	r3, r1, #0, #3
   17638:	77bb      	strb	r3, [r7, #30]
		if (err) {
   1763a:	f7fe be12 	b.w	16262 <ull_conn_rx+0x9a>
				conn->lll.max_tx_octets = eff_tx_octets;
   1763e:	f8a4 105c 	strh.w	r1, [r4, #92]	; 0x5c
				conn->lll.max_tx_time = eff_tx_time;
   17642:	f8a4 0060 	strh.w	r0, [r4, #96]	; 0x60
   17646:	e6d8      	b.n	173fa <ull_conn_rx+0x1232>
			if (eff_tx_octets == conn->lll.max_tx_octets &&
   17648:	4550      	cmp	r0, sl
   1764a:	f47f aebf 	bne.w	173cc <ull_conn_rx+0x1204>
			    eff_rx_time == conn->lll.max_rx_time &&
   1764e:	45ce      	cmp	lr, r9
   17650:	f47f aebc 	bne.w	173cc <ull_conn_rx+0x1204>
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   17654:	682a      	ldr	r2, [r5, #0]
   17656:	2501      	movs	r5, #1
   17658:	7115      	strb	r5, [r2, #4]
				goto send_length_resp;
   1765a:	f7ff bbb3 	b.w	16dc4 <ull_conn_rx+0xbfc>
			tx->next = conn->tx_head->next;
   1765e:	681a      	ldr	r2, [r3, #0]
   17660:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   17662:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   17664:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   17668:	f7ff b922 	b.w	168b0 <ull_conn_rx+0x6e8>
			tx->next = conn->tx_head->next;
   1766c:	6819      	ldr	r1, [r3, #0]
   1766e:	6011      	str	r1, [r2, #0]
			conn->tx_head->next = tx;
   17670:	601a      	str	r2, [r3, #0]
				conn->tx_ctrl_last = tx;
   17672:	e9c4 2270 	strd	r2, r2, [r4, #448]	; 0x1c0
   17676:	e480      	b.n	16f7a <ull_conn_rx+0xdb2>
	LL_ASSERT(rx_dle);
   17678:	4a5e      	ldr	r2, [pc, #376]	; (177f4 <ull_conn_rx+0x162c>)
   1767a:	495f      	ldr	r1, [pc, #380]	; (177f8 <ull_conn_rx+0x1630>)
   1767c:	485f      	ldr	r0, [pc, #380]	; (177fc <ull_conn_rx+0x1634>)
   1767e:	f241 4372 	movw	r3, #5234	; 0x1472
   17682:	f00a fa4f 	bl	21b24 <printk>
   17686:	4040      	eors	r0, r0
   17688:	f380 8811 	msr	BASEPRI, r0
   1768c:	f04f 0003 	mov.w	r0, #3
   17690:	df02      	svc	2
   17692:	e5e0      	b.n	17256 <ull_conn_rx+0x108e>
			LL_ASSERT(conn->slave.llcp_type == LLCP_NONE);
   17694:	4a57      	ldr	r2, [pc, #348]	; (177f4 <ull_conn_rx+0x162c>)
   17696:	495a      	ldr	r1, [pc, #360]	; (17800 <ull_conn_rx+0x1638>)
   17698:	4858      	ldr	r0, [pc, #352]	; (177fc <ull_conn_rx+0x1634>)
   1769a:	f241 6309 	movw	r3, #5641	; 0x1609
   1769e:	f00a fa41 	bl	21b24 <printk>
   176a2:	4040      	eors	r0, r0
   176a4:	f380 8811 	msr	BASEPRI, r0
   176a8:	f04f 0003 	mov.w	r0, #3
   176ac:	df02      	svc	2
   176ae:	e7b5      	b.n	1761c <ull_conn_rx+0x1454>
	else if (rej_ext_ind->error_code != BT_HCI_ERR_LL_PROC_COLLISION) {
   176b0:	2a23      	cmp	r2, #35	; 0x23
   176b2:	f43f aa9b 	beq.w	16bec <ull_conn_rx+0xa24>
			conn->slave.ticks_to_offset =
   176b6:	f8d4 21a0 	ldr.w	r2, [r4, #416]	; 0x1a0
   176ba:	f8c4 20e4 	str.w	r2, [r4, #228]	; 0xe4
   176be:	f7ff ba95 	b.w	16bec <ull_conn_rx+0xa24>
		LL_ASSERT(conn_upd_curr == conn);
   176c2:	4e50      	ldr	r6, [pc, #320]	; (17804 <ull_conn_rx+0x163c>)
   176c4:	6831      	ldr	r1, [r6, #0]
   176c6:	428c      	cmp	r4, r1
   176c8:	d010      	beq.n	176ec <ull_conn_rx+0x1524>
   176ca:	4a4a      	ldr	r2, [pc, #296]	; (177f4 <ull_conn_rx+0x162c>)
   176cc:	494e      	ldr	r1, [pc, #312]	; (17808 <ull_conn_rx+0x1640>)
   176ce:	484b      	ldr	r0, [pc, #300]	; (177fc <ull_conn_rx+0x1634>)
   176d0:	f241 13ba 	movw	r3, #4538	; 0x11ba
   176d4:	f00a fa26 	bl	21b24 <printk>
   176d8:	4040      	eors	r0, r0
   176da:	f380 8811 	msr	BASEPRI, r0
   176de:	f04f 0003 	mov.w	r0, #3
   176e2:	df02      	svc	2
   176e4:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   176e8:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   176ec:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   176f0:	2300      	movs	r3, #0
   176f2:	6033      	str	r3, [r6, #0]
		conn->procedure_expire = 0U;
   176f4:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   176f8:	f7ff ba7f 	b.w	16bfa <ull_conn_rx+0xa32>
		LL_ASSERT(conn->llcp_cu.req == conn->llcp_cu.ack);
   176fc:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   17700:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   17704:	429a      	cmp	r2, r3
   17706:	d00e      	beq.n	17726 <ull_conn_rx+0x155e>
   17708:	4a3a      	ldr	r2, [pc, #232]	; (177f4 <ull_conn_rx+0x162c>)
   1770a:	4940      	ldr	r1, [pc, #256]	; (1780c <ull_conn_rx+0x1644>)
   1770c:	483b      	ldr	r0, [pc, #236]	; (177fc <ull_conn_rx+0x1634>)
   1770e:	f241 139f 	movw	r3, #4511	; 0x119f
   17712:	f00a fa07 	bl	21b24 <printk>
   17716:	4040      	eors	r0, r0
   17718:	f380 8811 	msr	BASEPRI, r0
   1771c:	f04f 0003 	mov.w	r0, #3
   17720:	df02      	svc	2
   17722:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17726:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
   1772a:	2105      	movs	r1, #5
   1772c:	f361 0202 	bfi	r2, r1, #0, #3
		conn->llcp_cu.ack--;
   17730:	3b01      	subs	r3, #1
   17732:	f884 3111 	strb.w	r3, [r4, #273]	; 0x111
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   17736:	f884 217e 	strb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   1773a:	f002 0308 	and.w	r3, r2, #8
   1773e:	f894 2112 	ldrb.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.win_size = 1U;
   17742:	2101      	movs	r1, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17744:	430b      	orrs	r3, r1
   17746:	f022 020f 	bic.w	r2, r2, #15
   1774a:	4313      	orrs	r3, r2
		conn->llcp_cu.win_size = 1U;
   1774c:	f884 1120 	strb.w	r1, [r4, #288]	; 0x120
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   17750:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17754:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
		conn->llcp_cu.state = LLCP_CUI_STATE_USE;
   17758:	f884 3112 	strb.w	r3, [r4, #274]	; 0x112
		conn->llcp_cu.win_offset_us = 0U;
   1775c:	2000      	movs	r0, #0
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1775e:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
		conn->llcp_cu.win_offset_us = 0U;
   17762:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c
		conn->llcp_cu.interval = conn->llcp_conn_param.interval_max;
   17766:	f8a4 1114 	strh.w	r1, [r4, #276]	; 0x114
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   1776a:	f8a4 2116 	strh.w	r2, [r4, #278]	; 0x116
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   1776e:	f8a4 3118 	strh.w	r3, [r4, #280]	; 0x118
	if (err) {
   17772:	f7fe bd73 	b.w	1625c <ull_conn_rx+0x94>
				     lll->interval) ||
   17776:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   17778:	4565      	cmp	r5, ip
   1777a:	f47f af24 	bne.w	175c6 <ull_conn_rx+0x13fe>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1777e:	f240 45e2 	movw	r5, #1250	; 0x4e2
   17782:	fb05 f50e 	mul.w	r5, r5, lr
   17786:	f242 7c10 	movw	ip, #10000	; 0x2710
   1778a:	fb0c 5101 	mla	r1, ip, r1, r5
   1778e:	3901      	subs	r1, #1
   17790:	fbb1 f1f5 	udiv	r1, r1, r5
				     lll->latency) ||
   17794:	f8b4 50c6 	ldrh.w	r5, [r4, #198]	; 0xc6
   17798:	b289      	uxth	r1, r1
   1779a:	428d      	cmp	r5, r1
   1779c:	f47f af13 	bne.w	175c6 <ull_conn_rx+0x13fe>
				conn->llcp_conn_param.state =
   177a0:	f8b4 217e 	ldrh.w	r2, [r4, #382]	; 0x17e
   177a4:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
   177a8:	f042 0201 	orr.w	r2, r2, #1
   177ac:	f8a4 217e 	strh.w	r2, [r4, #382]	; 0x17e
				(*rx)->hdr.type = NODE_RX_TYPE_RELEASE;
   177b0:	2201      	movs	r2, #1
   177b2:	713a      	strb	r2, [r7, #4]
   177b4:	e4bc      	b.n	17130 <ull_conn_rx+0xf68>
			     lll->interval) ||
   177b6:	8e25      	ldrh	r5, [r4, #48]	; 0x30
   177b8:	4565      	cmp	r5, ip
   177ba:	f47f acb2 	bne.w	17122 <ull_conn_rx+0xf5a>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   177be:	f240 45e2 	movw	r5, #1250	; 0x4e2
   177c2:	fb05 f101 	mul.w	r1, r5, r1
   177c6:	f242 7510 	movw	r5, #10000	; 0x2710
   177ca:	fb05 1202 	mla	r2, r5, r2, r1
   177ce:	3a01      	subs	r2, #1
   177d0:	fbb2 f2f1 	udiv	r2, r2, r1
			    (conn->llcp_conn_param.latency != lll->latency) ||
   177d4:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   177d8:	b292      	uxth	r2, r2
   177da:	4291      	cmp	r1, r2
   177dc:	f47f aca1 	bne.w	17122 <ull_conn_rx+0xf5a>
   177e0:	e7de      	b.n	177a0 <ull_conn_rx+0x15d8>
	     ((((conn->llcp_length.state == LLCP_LENGTH_STATE_REQ) ||
   177e2:	f894 11a6 	ldrb.w	r1, [r4, #422]	; 0x1a6
	    ((conn->llcp_length.req != conn->llcp_length.ack) &&
   177e6:	f011 0f06 	tst.w	r1, #6
   177ea:	f43f aaab 	beq.w	16d44 <ull_conn_rx+0xb7c>
   177ee:	f7fe be63 	b.w	164b8 <ull_conn_rx+0x2f0>
   177f2:	bf00      	nop
   177f4:	000288c0 	.word	0x000288c0
   177f8:	00028a4c 	.word	0x00028a4c
   177fc:	00028404 	.word	0x00028404
   17800:	000289e8 	.word	0x000289e8
   17804:	2000e400 	.word	0x2000e400
   17808:	00028a34 	.word	0x00028a34
   1780c:	00028a0c 	.word	0x00028a0c

00017810 <ull_conn_llcp>:
{
   17810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   17814:	4604      	mov	r4, r0
	if ((conn->llcp_ack == conn->llcp_req) &&
   17816:	f890 00e9 	ldrb.w	r0, [r0, #233]	; 0xe9
   1781a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   1781e:	4298      	cmp	r0, r3
{
   17820:	460d      	mov	r5, r1
   17822:	4616      	mov	r6, r2
	if ((conn->llcp_ack == conn->llcp_req) &&
   17824:	d076      	beq.n	17914 <ull_conn_llcp+0x104>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17826:	1a1b      	subs	r3, r3, r0
   17828:	f003 0303 	and.w	r3, r3, #3
   1782c:	2b02      	cmp	r3, #2
   1782e:	d049      	beq.n	178c4 <ull_conn_llcp+0xb4>
   17830:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
   17834:	4694      	mov	ip, r2
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17836:	f1bc 0f00 	cmp.w	ip, #0
   1783a:	f2c0 8094 	blt.w	17966 <ull_conn_llcp+0x156>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   1783e:	f894 2139 	ldrb.w	r2, [r4, #313]	; 0x139
   17842:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   17846:	429a      	cmp	r2, r3
   17848:	d039      	beq.n	178be <ull_conn_llcp+0xae>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1784a:	4887      	ldr	r0, [pc, #540]	; (17a68 <ull_conn_llcp+0x258>)
   1784c:	f7f8 ff64 	bl	10718 <mem_acquire>
		if (tx) {
   17850:	b360      	cbz	r0, 178ac <ull_conn_llcp+0x9c>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   17852:	f894 3138 	ldrb.w	r3, [r4, #312]	; 0x138
   17856:	f884 3139 	strb.w	r3, [r4, #313]	; 0x139
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   1785a:	7903      	ldrb	r3, [r0, #4]
			pdu_tx->len = offsetof(struct pdu_data_llctrl,
   1785c:	2202      	movs	r2, #2
   1785e:	7142      	strb	r2, [r0, #5]
			pdu_tx->ll_id = PDU_DATA_LLID_CTRL;
   17860:	f043 0303 	orr.w	r3, r3, #3
   17864:	7103      	strb	r3, [r0, #4]
			pdu_tx->llctrl.opcode =
   17866:	71c2      	strb	r2, [r0, #7]
	    conn->tx_head &&
   17868:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_tx->llctrl.terminate_ind.error_code =
   1786c:	f894 213a 	ldrb.w	r2, [r4, #314]	; 0x13a
   17870:	7202      	strb	r2, [r0, #8]
	if (
   17872:	2b00      	cmp	r3, #0
   17874:	d041      	beq.n	178fa <ull_conn_llcp+0xea>
	    !conn->llcp_enc.pause_tx &&
   17876:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1787a:	0791      	lsls	r1, r2, #30
   1787c:	d43d      	bmi.n	178fa <ull_conn_llcp+0xea>
	    !conn->llcp_phy.pause_tx &&
   1787e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17882:	07d2      	lsls	r2, r2, #31
   17884:	d439      	bmi.n	178fa <ull_conn_llcp+0xea>
		if (conn->tx_head == conn->tx_data) {
   17886:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1788a:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1788c:	bf04      	itt	eq
   1788e:	681a      	ldreq	r2, [r3, #0]
   17890:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17894:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17898:	bb9a      	cbnz	r2, 17902 <ull_conn_llcp+0xf2>
			tx->next = conn->tx_head->next;
   1789a:	681a      	ldr	r2, [r3, #0]
   1789c:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   1789e:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   178a0:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   178a2:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
	if (!tx->next) {
   178a6:	b90b      	cbnz	r3, 178ac <ull_conn_llcp+0x9c>
		conn->tx_data_last = tx;
   178a8:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
		if (!conn->procedure_expire) {
   178ac:	f8b4 00cc 	ldrh.w	r0, [r4, #204]	; 0xcc
   178b0:	b928      	cbnz	r0, 178be <ull_conn_llcp+0xae>
			conn->procedure_expire = conn->supervision_reload;
   178b2:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
			if (conn->procedure_expire <= 1U) {
   178b6:	2b01      	cmp	r3, #1
   178b8:	d96f      	bls.n	1799a <ull_conn_llcp+0x18a>
			conn->procedure_expire = conn->supervision_reload;
   178ba:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	return 0;
   178be:	2000      	movs	r0, #0
}
   178c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   178c4:	f894 21a5 	ldrb.w	r2, [r4, #421]	; 0x1a5
   178c8:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   178cc:	429a      	cmp	r2, r3
   178ce:	d006      	beq.n	178de <ull_conn_llcp+0xce>
			     LLCP_LENGTH_STATE_RESIZE) ||
   178d0:	f894 31a6 	ldrb.w	r3, [r4, #422]	; 0x1a6
			if ((conn->llcp_length.state ==
   178d4:	f003 0306 	and.w	r3, r3, #6
   178d8:	2b04      	cmp	r3, #4
   178da:	f000 81c8 	beq.w	17c6e <ull_conn_llcp+0x45e>
		switch (conn->llcp_type) {
   178de:	f894 70ea 	ldrb.w	r7, [r4, #234]	; 0xea
   178e2:	1e7b      	subs	r3, r7, #1
   178e4:	2b05      	cmp	r3, #5
   178e6:	f200 81ac 	bhi.w	17c42 <ull_conn_llcp+0x432>
   178ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   178ee:	0031      	.short	0x0031
   178f0:	00c50151 	.word	0x00c50151
   178f4:	007e01aa 	.word	0x007e01aa
   178f8:	0073      	.short	0x0073
		if (!conn->tx_ctrl) {
   178fa:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   178fe:	2a00      	cmp	r2, #0
   17900:	d062      	beq.n	179c8 <ull_conn_llcp+0x1b8>
	tx->next = conn->tx_ctrl_last->next;
   17902:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17906:	681a      	ldr	r2, [r3, #0]
   17908:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1790a:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   1790c:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   1790e:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
}
   17912:	e7c8      	b.n	178a6 <ull_conn_llcp+0x96>
   17914:	f994 203d 	ldrsb.w	r2, [r4, #61]	; 0x3d
	if ((conn->llcp_ack == conn->llcp_req) &&
   17918:	2a00      	cmp	r2, #0
   1791a:	4694      	mov	ip, r2
   1791c:	f2c0 81a1 	blt.w	17c62 <ull_conn_llcp+0x452>
	    !conn->llcp_enc.pause_rx) {
   17920:	f894 e15e 	ldrb.w	lr, [r4, #350]	; 0x15e
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   17924:	f01e 0801 	ands.w	r8, lr, #1
   17928:	d185      	bne.n	17836 <ull_conn_llcp+0x26>
		if (conn->llcp_cu.ack != conn->llcp_cu.req) {
   1792a:	f894 9111 	ldrb.w	r9, [r4, #273]	; 0x111
   1792e:	f894 7110 	ldrb.w	r7, [r4, #272]	; 0x110
   17932:	454f      	cmp	r7, r9
   17934:	f000 82a7 	beq.w	17e86 <ull_conn_llcp+0x676>
			conn->llcp_type = LLCP_CONN_UPD;
   17938:	2201      	movs	r2, #1
			conn->llcp_ack -= 2U;
   1793a:	1e83      	subs	r3, r0, #2
			conn->llcp_type = LLCP_CONN_UPD;
   1793c:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   17940:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   17944:	f894 21a4 	ldrb.w	r2, [r4, #420]	; 0x1a4
   17948:	f894 31a5 	ldrb.w	r3, [r4, #421]	; 0x1a5
   1794c:	429a      	cmp	r2, r3
   1794e:	d1bf      	bne.n	178d0 <ull_conn_llcp+0xc0>
			if (event_conn_upd_prep(conn, lazy,
   17950:	462a      	mov	r2, r5
   17952:	4631      	mov	r1, r6
   17954:	4620      	mov	r0, r4
   17956:	f7ea fb47 	bl	1fe8 <event_conn_upd_prep>
   1795a:	2800      	cmp	r0, #0
   1795c:	f040 817e 	bne.w	17c5c <ull_conn_llcp+0x44c>
				return -ECANCELED;
   17960:	f06f 0047 	mvn.w	r0, #71	; 0x47
   17964:	e7ac      	b.n	178c0 <ull_conn_llcp+0xb0>
   17966:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1796a:	2900      	cmp	r1, #0
   1796c:	f43f af67 	beq.w	1783e <ull_conn_llcp+0x2e>
		switch (conn->slave.llcp_type) {
   17970:	2902      	cmp	r1, #2
   17972:	f000 813d 	beq.w	17bf0 <ull_conn_llcp+0x3e0>
   17976:	2906      	cmp	r1, #6
   17978:	d01d      	beq.n	179b6 <ull_conn_llcp+0x1a6>
   1797a:	2901      	cmp	r1, #1
   1797c:	d012      	beq.n	179a4 <ull_conn_llcp+0x194>
			LL_ASSERT(0);
   1797e:	4a3b      	ldr	r2, [pc, #236]	; (17a6c <ull_conn_llcp+0x25c>)
   17980:	493b      	ldr	r1, [pc, #236]	; (17a70 <ull_conn_llcp+0x260>)
   17982:	483c      	ldr	r0, [pc, #240]	; (17a74 <ull_conn_llcp+0x264>)
   17984:	f240 4316 	movw	r3, #1046	; 0x416
   17988:	f00a f8cc 	bl	21b24 <printk>
   1798c:	4040      	eors	r0, r0
   1798e:	f380 8811 	msr	BASEPRI, r0
   17992:	f04f 0003 	mov.w	r0, #3
   17996:	df02      	svc	2
			break;
   17998:	e751      	b.n	1783e <ull_conn_llcp+0x2e>
				conn->procedure_expire++;
   1799a:	3301      	adds	r3, #1
   1799c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
}
   179a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			if (event_conn_upd_prep(conn, lazy,
   179a4:	462a      	mov	r2, r5
   179a6:	4631      	mov	r1, r6
   179a8:	4620      	mov	r0, r4
   179aa:	f7ea fb1d 	bl	1fe8 <event_conn_upd_prep>
   179ae:	2800      	cmp	r0, #0
   179b0:	f47f af45 	bne.w	1783e <ull_conn_llcp+0x2e>
   179b4:	e7d4      	b.n	17960 <ull_conn_llcp+0x150>
			event_counter = lll->event_counter +
   179b6:	8e61      	ldrh	r1, [r4, #50]	; 0x32
   179b8:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   179ba:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   179bc:	4432      	add	r2, r6
			event_phy_upd_ind_prep(conn, event_counter);
   179be:	4620      	mov	r0, r4
   179c0:	b291      	uxth	r1, r2
   179c2:	f7fd fee3 	bl	1578c <event_phy_upd_ind_prep>
		break;
   179c6:	e73a      	b.n	1783e <ull_conn_llcp+0x2e>
			tx->next = conn->tx_head;
   179c8:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   179ca:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   179ce:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   179d2:	e768      	b.n	178a6 <ull_conn_llcp+0x96>
			event_counter = lll->event_counter +
   179d4:	8ee1      	ldrh	r1, [r4, #54]	; 0x36
   179d6:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   179d8:	4419      	add	r1, r3
					lll->latency_prepare + lazy;
   179da:	4431      	add	r1, r6
			event_phy_upd_ind_prep(conn, event_counter);
   179dc:	b289      	uxth	r1, r1
   179de:	4620      	mov	r0, r4
   179e0:	f7fd fed4 	bl	1578c <event_phy_upd_ind_prep>
		break;
   179e4:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   179e8:	e725      	b.n	17836 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   179ea:	481f      	ldr	r0, [pc, #124]	; (17a68 <ull_conn_llcp+0x258>)
   179ec:	f7f8 fe94 	bl	10718 <mem_acquire>
	if (tx) {
   179f0:	2800      	cmp	r0, #0
   179f2:	f000 8133 	beq.w	17c5c <ull_conn_llcp+0x44c>
		conn->llcp_ack = conn->llcp_req;
   179f6:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   179fa:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   179fe:	7903      	ldrb	r3, [r0, #4]
   17a00:	f043 0303 	orr.w	r3, r3, #3
   17a04:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ping_req) +
   17a06:	2301      	movs	r3, #1
   17a08:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_REQ;
   17a0a:	2312      	movs	r3, #18
   17a0c:	71c3      	strb	r3, [r0, #7]
	    conn->tx_head &&
   17a0e:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17a12:	2b00      	cmp	r3, #0
   17a14:	f000 8275 	beq.w	17f02 <ull_conn_llcp+0x6f2>
	    !conn->llcp_enc.pause_tx &&
   17a18:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17a1c:	0791      	lsls	r1, r2, #30
   17a1e:	f100 8270 	bmi.w	17f02 <ull_conn_llcp+0x6f2>
	    !conn->llcp_phy.pause_tx &&
   17a22:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17a26:	07d2      	lsls	r2, r2, #31
   17a28:	f100 826b 	bmi.w	17f02 <ull_conn_llcp+0x6f2>
		if (conn->tx_head == conn->tx_data) {
   17a2c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17a30:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17a32:	bf04      	itt	eq
   17a34:	681a      	ldreq	r2, [r3, #0]
   17a36:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17a3a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17a3e:	2a00      	cmp	r2, #0
   17a40:	f000 8687 	beq.w	18752 <ull_conn_llcp+0xf42>
	tx->next = conn->tx_ctrl_last->next;
   17a44:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17a48:	681a      	ldr	r2, [r3, #0]
   17a4a:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   17a4c:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   17a4e:	6803      	ldr	r3, [r0, #0]
	conn->tx_ctrl_last = tx;
   17a50:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17a54:	2b00      	cmp	r3, #0
   17a56:	f000 8399 	beq.w	1818c <ull_conn_llcp+0x97c>
		conn->procedure_expire = conn->procedure_reload;
   17a5a:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
   17a5e:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17a62:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
   17a66:	e6e6      	b.n	17836 <ull_conn_llcp+0x26>
   17a68:	2000e484 	.word	0x2000e484
   17a6c:	000288c0 	.word	0x000288c0
   17a70:	0002849c 	.word	0x0002849c
   17a74:	00028404 	.word	0x00028404
	if (conn->llcp.encryption.state) {
   17a78:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   17a7c:	f013 0803 	ands.w	r8, r3, #3
   17a80:	f000 814a 	beq.w	17d18 <ull_conn_llcp+0x508>
		if (lll->role &&
   17a84:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17a88:	2b00      	cmp	r3, #0
   17a8a:	f6bf aed8 	bge.w	1783e <ull_conn_llcp+0x2e>
   17a8e:	f1b8 0f01 	cmp.w	r8, #1
   17a92:	f47f af68 	bne.w	17966 <ull_conn_llcp+0x156>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17a96:	48d1      	ldr	r0, [pc, #836]	; (17ddc <ull_conn_llcp+0x5cc>)
   17a98:	f7f8 fe3e 	bl	10718 <mem_acquire>
	if (!tx) {
   17a9c:	4680      	mov	r8, r0
   17a9e:	2800      	cmp	r0, #0
   17aa0:	f000 80dc 	beq.w	17c5c <ull_conn_llcp+0x44c>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17aa4:	7903      	ldrb	r3, [r0, #4]
   17aa6:	f043 0303 	orr.w	r3, r3, #3
   17aaa:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   17aac:	f04f 0904 	mov.w	r9, #4
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   17ab0:	230d      	movs	r3, #13
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   17ab2:	f100 0708 	add.w	r7, r0, #8
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp) +
   17ab6:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   17ab8:	f880 9007 	strb.w	r9, [r0, #7]
	lll_csrand_isr_get(pdu_ctrl_tx->llctrl.enc_rsp.skds,
   17abc:	210c      	movs	r1, #12
   17abe:	4638      	mov	r0, r7
   17ac0:	f003 f9aa 	bl	1ae18 <lll_csrand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   17ac4:	4639      	mov	r1, r7
   17ac6:	2208      	movs	r2, #8
   17ac8:	f504 7081 	add.w	r0, r4, #258	; 0x102
   17acc:	f00c fccc 	bl	24468 <memcpy>
	memcpy(&conn->lll.ccm_rx.iv[4],
   17ad0:	464a      	mov	r2, r9
   17ad2:	f108 0110 	add.w	r1, r8, #16
   17ad6:	f104 009c 	add.w	r0, r4, #156	; 0x9c
   17ada:	f00c fcc5 	bl	24468 <memcpy>
	    conn->tx_head &&
   17ade:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17ae2:	2b00      	cmp	r3, #0
   17ae4:	f000 8450 	beq.w	18388 <ull_conn_llcp+0xb78>
	    !conn->llcp_enc.pause_tx &&
   17ae8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17aec:	0791      	lsls	r1, r2, #30
   17aee:	f100 844b 	bmi.w	18388 <ull_conn_llcp+0xb78>
	    !conn->llcp_phy.pause_tx &&
   17af2:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17af6:	07d2      	lsls	r2, r2, #31
   17af8:	f100 8446 	bmi.w	18388 <ull_conn_llcp+0xb78>
		if (conn->tx_head == conn->tx_data) {
   17afc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17b00:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17b02:	bf04      	itt	eq
   17b04:	681a      	ldreq	r2, [r3, #0]
   17b06:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17b0a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17b0e:	2a00      	cmp	r2, #0
   17b10:	f000 8704 	beq.w	1891c <ull_conn_llcp+0x110c>
	tx->next = conn->tx_ctrl_last->next;
   17b14:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17b18:	681a      	ldr	r2, [r3, #0]
   17b1a:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   17b1e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   17b22:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   17b26:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17b2a:	2b00      	cmp	r3, #0
   17b2c:	f000 85f3 	beq.w	18716 <ull_conn_llcp+0xf06>
			rx = ll_pdu_rx_alloc();
   17b30:	f7fc fc2a 	bl	14388 <ll_pdu_rx_alloc>
			if (!rx) {
   17b34:	4607      	mov	r7, r0
   17b36:	2800      	cmp	r0, #0
   17b38:	f000 8090 	beq.w	17c5c <ull_conn_llcp+0x44c>
			rx->hdr.handle = conn->lll.handle;
   17b3c:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   17b3e:	80fb      	strh	r3, [r7, #6]
			rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17b40:	2303      	movs	r3, #3
   17b42:	713b      	strb	r3, [r7, #4]
			pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17b44:	77fb      	strb	r3, [r7, #31]
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   17b46:	7f3b      	ldrb	r3, [r7, #28]
   17b48:	f043 0303 	orr.w	r3, r3, #3
   17b4c:	773b      	strb	r3, [r7, #28]
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17b4e:	2317      	movs	r3, #23
			memcpy(&pdu->llctrl.enc_req.rand[0],
   17b50:	2208      	movs	r2, #8
			pdu->len = offsetof(struct pdu_data_llctrl, enc_req) +
   17b52:	777b      	strb	r3, [r7, #29]
			memcpy(&pdu->llctrl.enc_req.rand[0],
   17b54:	f204 1161 	addw	r1, r4, #353	; 0x161
   17b58:	f107 0020 	add.w	r0, r7, #32
   17b5c:	f00c fc84 	bl	24468 <memcpy>
			pdu->llctrl.enc_req.ediv[0] = conn->llcp_enc.ediv[0];
   17b60:	f894 315f 	ldrb.w	r3, [r4, #351]	; 0x15f
   17b64:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
			pdu->llctrl.enc_req.ediv[1] = conn->llcp_enc.ediv[1];
   17b68:	f894 3160 	ldrb.w	r3, [r4, #352]	; 0x160
   17b6c:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
			ll_rx_put(rx->hdr.link, rx);
   17b70:	6838      	ldr	r0, [r7, #0]
   17b72:	4639      	mov	r1, r7
   17b74:	f7fc fbda 	bl	1432c <ll_rx_put>
			ll_rx_sched();
   17b78:	f7fc fbe2 	bl	14340 <ll_rx_sched>
			conn->llcp.encryption.state = LLCP_ENC_STATE_LTK_WAIT;
   17b7c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   17b80:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17b84:	2202      	movs	r2, #2
   17b86:	f362 0301 	bfi	r3, r2, #0, #2
   17b8a:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
   17b8e:	e652      	b.n	17836 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17b90:	8e62      	ldrh	r2, [r4, #50]	; 0x32
   17b92:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
   17b94:	4413      	add	r3, r2
	if (conn->llcp.chan_map.initiate) {
   17b96:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
					lll->latency_prepare + lazy;
   17b9a:	4433      	add	r3, r6
	if (conn->llcp.chan_map.initiate) {
   17b9c:	f012 0201 	ands.w	r2, r2, #1
			event_counter = lll->event_counter +
   17ba0:	b29f      	uxth	r7, r3
	if (conn->llcp.chan_map.initiate) {
   17ba2:	d168      	bne.n	17c76 <ull_conn_llcp+0x466>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17ba4:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17ba8:	1afb      	subs	r3, r7, r3
   17baa:	0418      	lsls	r0, r3, #16
   17bac:	d456      	bmi.n	17c5c <ull_conn_llcp+0x44c>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   17bae:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   17bb2:	2b00      	cmp	r3, #0
   17bb4:	f2c0 82e2 	blt.w	1817c <ull_conn_llcp+0x96c>
			conn->llcp_ack = conn->llcp_req;
   17bb8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17bbc:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		memcpy(&lll->data_chan_map[0],
   17bc0:	f104 0738 	add.w	r7, r4, #56	; 0x38
   17bc4:	2205      	movs	r2, #5
   17bc6:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17bca:	4638      	mov	r0, r7
   17bcc:	f00c fc4c 	bl	24468 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17bd0:	2105      	movs	r1, #5
   17bd2:	4638      	mov	r0, r7
   17bd4:	f7f8 ff70 	bl	10ab8 <util_ones_count_get>
		lll->data_chan_count =
   17bd8:	f894 c03d 	ldrb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17bdc:	2301      	movs	r3, #1
		lll->data_chan_count =
   17bde:	f360 0c05 	bfi	ip, r0, #0, #6
   17be2:	f884 c03d 	strb.w	ip, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17be6:	f884 31d0 	strb.w	r3, [r4, #464]	; 0x1d0
   17bea:	fa4f fc8c 	sxtb.w	ip, ip
   17bee:	e622      	b.n	17836 <ull_conn_llcp+0x26>
			event_counter = lll->event_counter +
   17bf0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   17bf2:	8e61      	ldrh	r1, [r4, #50]	; 0x32
	if (conn->llcp.chan_map.initiate) {
   17bf4:	f894 30ec 	ldrb.w	r3, [r4, #236]	; 0xec
			event_counter = lll->event_counter +
   17bf8:	440a      	add	r2, r1
					lll->latency_prepare + lazy;
   17bfa:	4432      	add	r2, r6
	if (conn->llcp.chan_map.initiate) {
   17bfc:	f013 0301 	ands.w	r3, r3, #1
			event_counter = lll->event_counter +
   17c00:	b296      	uxth	r6, r2
	if (conn->llcp.chan_map.initiate) {
   17c02:	f040 80f3 	bne.w	17dec <ull_conn_llcp+0x5dc>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   17c06:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   17c0a:	1ab6      	subs	r6, r6, r2
   17c0c:	0430      	lsls	r0, r6, #16
   17c0e:	f53f ae16 	bmi.w	1783e <ull_conn_llcp+0x2e>
		memcpy(&lll->data_chan_map[0],
   17c12:	f104 0538 	add.w	r5, r4, #56	; 0x38
   17c16:	2205      	movs	r2, #5
			conn->slave.llcp_type = LLCP_NONE;
   17c18:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		memcpy(&lll->data_chan_map[0],
   17c1c:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17c20:	4628      	mov	r0, r5
   17c22:	f00c fc21 	bl	24468 <memcpy>
			util_ones_count_get(&lll->data_chan_map[0],
   17c26:	2105      	movs	r1, #5
   17c28:	4628      	mov	r0, r5
   17c2a:	f7f8 ff45 	bl	10ab8 <util_ones_count_get>
		lll->data_chan_count =
   17c2e:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17c32:	2201      	movs	r2, #1
		lll->data_chan_count =
   17c34:	f360 0305 	bfi	r3, r0, #0, #6
   17c38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
		conn->chm_updated = 1U;
   17c3c:	f884 21d0 	strb.w	r2, [r4, #464]	; 0x1d0
   17c40:	e5fd      	b.n	1783e <ull_conn_llcp+0x2e>
			LL_ASSERT(0);
   17c42:	4a67      	ldr	r2, [pc, #412]	; (17de0 <ull_conn_llcp+0x5d0>)
   17c44:	4967      	ldr	r1, [pc, #412]	; (17de4 <ull_conn_llcp+0x5d4>)
   17c46:	4868      	ldr	r0, [pc, #416]	; (17de8 <ull_conn_llcp+0x5d8>)
   17c48:	f240 33e5 	movw	r3, #997	; 0x3e5
   17c4c:	f009 ff6a 	bl	21b24 <printk>
   17c50:	4040      	eors	r0, r0
   17c52:	f380 8811 	msr	BASEPRI, r0
   17c56:	f04f 0003 	mov.w	r0, #3
   17c5a:	df02      	svc	2
			break;
   17c5c:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17c60:	e5e9      	b.n	17836 <ull_conn_llcp+0x26>
	    (!conn->lll.role || (conn->slave.llcp_type == LLCP_NONE)) &&
   17c62:	f894 10dd 	ldrb.w	r1, [r4, #221]	; 0xdd
   17c66:	2900      	cmp	r1, #0
   17c68:	f47f ae82 	bne.w	17970 <ull_conn_llcp+0x160>
   17c6c:	e658      	b.n	17920 <ull_conn_llcp+0x110>
				event_len_prep(conn);
   17c6e:	4620      	mov	r0, r4
   17c70:	f7fd fca4 	bl	155bc <event_len_prep>
   17c74:	e633      	b.n	178de <ull_conn_llcp+0xce>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17c76:	4859      	ldr	r0, [pc, #356]	; (17ddc <ull_conn_llcp+0x5cc>)
   17c78:	f7f8 fd4e 	bl	10718 <mem_acquire>
		if (tx) {
   17c7c:	4680      	mov	r8, r0
   17c7e:	2800      	cmp	r0, #0
   17c80:	d0ec      	beq.n	17c5c <ull_conn_llcp+0x44c>
			conn->llcp.chan_map.instant = event_counter +
   17c82:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   17c84:	f894 20ec 	ldrb.w	r2, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   17c88:	443b      	add	r3, r7
						      conn->lll.latency + 6;
   17c8a:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant = event_counter +
   17c8c:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c90:	7903      	ldrb	r3, [r0, #4]
			conn->llcp.chan_map.initiate = 0U;
   17c92:	f36f 0200 	bfc	r2, #0, #1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c96:	f043 0303 	orr.w	r3, r3, #3
			conn->llcp.chan_map.initiate = 0U;
   17c9a:	f884 20ec 	strb.w	r2, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17c9e:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17ca0:	2308      	movs	r3, #8
   17ca2:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17ca4:	2301      	movs	r3, #1
   17ca6:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17ca8:	2205      	movs	r2, #5
   17caa:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17cae:	3008      	adds	r0, #8
   17cb0:	f00c fbda 	bl	24468 <memcpy>
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   17cb4:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   17cb8:	f8a8 300d 	strh.w	r3, [r8, #13]
	    conn->tx_head &&
   17cbc:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   17cc0:	2b00      	cmp	r3, #0
   17cc2:	f000 8266 	beq.w	18192 <ull_conn_llcp+0x982>
	    !conn->llcp_enc.pause_tx &&
   17cc6:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17cca:	0792      	lsls	r2, r2, #30
   17ccc:	f100 8261 	bmi.w	18192 <ull_conn_llcp+0x982>
	    !conn->llcp_phy.pause_tx &&
   17cd0:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17cd4:	07d7      	lsls	r7, r2, #31
   17cd6:	f100 825c 	bmi.w	18192 <ull_conn_llcp+0x982>
		if (conn->tx_head == conn->tx_data) {
   17cda:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17cde:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17ce0:	bf04      	itt	eq
   17ce2:	681a      	ldreq	r2, [r3, #0]
   17ce4:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17ce8:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17cec:	2a00      	cmp	r2, #0
   17cee:	f000 8602 	beq.w	188f6 <ull_conn_llcp+0x10e6>
	tx->next = conn->tx_ctrl_last->next;
   17cf2:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17cf6:	681a      	ldr	r2, [r3, #0]
   17cf8:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   17cfc:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   17d00:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   17d04:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17d08:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17d0c:	2b00      	cmp	r3, #0
   17d0e:	f47f ad92 	bne.w	17836 <ull_conn_llcp+0x26>
		conn->tx_data_last = tx;
   17d12:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   17d16:	e58e      	b.n	17836 <ull_conn_llcp+0x26>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17d18:	4830      	ldr	r0, [pc, #192]	; (17ddc <ull_conn_llcp+0x5cc>)
   17d1a:	f7f8 fcfd 	bl	10718 <mem_acquire>
	if (!tx) {
   17d1e:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   17d22:	4681      	mov	r9, r0
   17d24:	2800      	cmp	r0, #0
   17d26:	f43f ad86 	beq.w	17836 <ull_conn_llcp+0x26>
	if (!lll->role) {
   17d2a:	f1bc 0f00 	cmp.w	ip, #0
	pdu_ctrl_tx = (void *)tx->pdu;
   17d2e:	f100 0a04 	add.w	sl, r0, #4
	if (!lll->role) {
   17d32:	f280 82a5 	bge.w	18280 <ull_conn_llcp+0xa70>
	else if (!lll->enc_rx) {
   17d36:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   17d3a:	0719      	lsls	r1, r3, #28
   17d3c:	f100 842b 	bmi.w	18596 <ull_conn_llcp+0xd86>
		if (conn->llcp.encryption.error_code) {
   17d40:	f894 80f9 	ldrb.w	r8, [r4, #249]	; 0xf9
   17d44:	f1b8 0f00 	cmp.w	r8, #0
   17d48:	f000 83b5 	beq.w	184b6 <ull_conn_llcp+0xca6>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17d4c:	7903      	ldrb	r3, [r0, #4]
   17d4e:	f043 0303 	orr.w	r3, r3, #3
   17d52:	7103      	strb	r3, [r0, #4]
	if (conn->common.fex_valid &&
   17d54:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17d58:	07da      	lsls	r2, r3, #31
   17d5a:	f140 84d4 	bpl.w	18706 <ull_conn_llcp+0xef6>
	    (conn->llcp_feature.features_conn &
   17d5e:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	if (conn->common.fex_valid &&
   17d62:	075b      	lsls	r3, r3, #29
   17d64:	f140 84cf 	bpl.w	18706 <ull_conn_llcp+0xef6>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   17d68:	2311      	movs	r3, #17
   17d6a:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17d6c:	2303      	movs	r3, #3
		p->error_code = conn->llcp.encryption.error_code;
   17d6e:	f880 8009 	strb.w	r8, [r0, #9]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   17d72:	7203      	strb	r3, [r0, #8]
	pdu->len += offsetof(struct pdu_data_llctrl, reject_ind);
   17d74:	f889 7005 	strb.w	r7, [r9, #5]
	    conn->tx_head &&
   17d78:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	conn->llcp.encryption.error_code = 0U;
   17d7c:	2200      	movs	r2, #0
   17d7e:	f884 20f9 	strb.w	r2, [r4, #249]	; 0xf9
	if (
   17d82:	2b00      	cmp	r3, #0
   17d84:	f000 8454 	beq.w	18630 <ull_conn_llcp+0xe20>
	    !conn->llcp_enc.pause_tx &&
   17d88:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17d8c:	0790      	lsls	r0, r2, #30
   17d8e:	f100 844f 	bmi.w	18630 <ull_conn_llcp+0xe20>
	    !conn->llcp_phy.pause_tx &&
   17d92:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17d96:	07d1      	lsls	r1, r2, #31
   17d98:	f100 844a 	bmi.w	18630 <ull_conn_llcp+0xe20>
		if (conn->tx_head == conn->tx_data) {
   17d9c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17da0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17da2:	bf04      	itt	eq
   17da4:	681a      	ldreq	r2, [r3, #0]
   17da6:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17daa:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17dae:	2a00      	cmp	r2, #0
   17db0:	f000 85e6 	beq.w	18980 <ull_conn_llcp+0x1170>
	tx->next = conn->tx_ctrl_last->next;
   17db4:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17db8:	681a      	ldr	r2, [r3, #0]
   17dba:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   17dbe:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   17dc2:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17dc6:	f8d9 3000 	ldr.w	r3, [r9]
   17dca:	2b00      	cmp	r3, #0
   17dcc:	f000 82cf 	beq.w	1836e <ull_conn_llcp+0xb5e>
	conn->llcp_ack = conn->llcp_req;
   17dd0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17dd4:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
   17dd8:	e52d      	b.n	17836 <ull_conn_llcp+0x26>
   17dda:	bf00      	nop
   17ddc:	2000e484 	.word	0x2000e484
   17de0:	000288c0 	.word	0x000288c0
   17de4:	0002849c 	.word	0x0002849c
   17de8:	00028404 	.word	0x00028404
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   17dec:	48ab      	ldr	r0, [pc, #684]	; (1809c <ull_conn_llcp+0x88c>)
   17dee:	f7f8 fc93 	bl	10718 <mem_acquire>
		if (tx) {
   17df2:	4605      	mov	r5, r0
   17df4:	2800      	cmp	r0, #0
   17df6:	f43f ad22 	beq.w	1783e <ull_conn_llcp+0x2e>
			conn->llcp.chan_map.instant = event_counter +
   17dfa:	8e23      	ldrh	r3, [r4, #48]	; 0x30
			conn->llcp.chan_map.initiate = 0U;
   17dfc:	f894 10ec 	ldrb.w	r1, [r4, #236]	; 0xec
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17e00:	7902      	ldrb	r2, [r0, #4]
			conn->llcp.chan_map.instant = event_counter +
   17e02:	4433      	add	r3, r6
			conn->llcp.chan_map.initiate = 0U;
   17e04:	f36f 0100 	bfc	r1, #0, #1
						      conn->lll.latency + 6;
   17e08:	3306      	adds	r3, #6
			conn->llcp.chan_map.initiate = 0U;
   17e0a:	f884 10ec 	strb.w	r1, [r4, #236]	; 0xec
			conn->llcp.chan_map.instant = event_counter +
   17e0e:	f8a4 30f2 	strh.w	r3, [r4, #242]	; 0xf2
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17e12:	f042 0203 	orr.w	r2, r2, #3
			pdu_ctrl_tx->llctrl.opcode =
   17e16:	2301      	movs	r3, #1
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17e18:	2108      	movs	r1, #8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   17e1a:	7102      	strb	r2, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   17e1c:	7141      	strb	r1, [r0, #5]
			pdu_ctrl_tx->llctrl.opcode =
   17e1e:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->llctrl.chan_map_ind.chm[0],
   17e20:	2205      	movs	r2, #5
   17e22:	f104 01ed 	add.w	r1, r4, #237	; 0xed
   17e26:	3008      	adds	r0, #8
   17e28:	f00c fb1e 	bl	24468 <memcpy>
	    conn->tx_head &&
   17e2c:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
			pdu_ctrl_tx->llctrl.chan_map_ind.instant =
   17e30:	f8b4 20f2 	ldrh.w	r2, [r4, #242]	; 0xf2
   17e34:	f8a5 200d 	strh.w	r2, [r5, #13]
	if (
   17e38:	2b00      	cmp	r3, #0
   17e3a:	f000 81b6 	beq.w	181aa <ull_conn_llcp+0x99a>
	    !conn->llcp_enc.pause_tx &&
   17e3e:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   17e42:	0797      	lsls	r7, r2, #30
   17e44:	f100 81b1 	bmi.w	181aa <ull_conn_llcp+0x99a>
	    !conn->llcp_phy.pause_tx &&
   17e48:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   17e4c:	07d6      	lsls	r6, r2, #31
   17e4e:	f100 81ac 	bmi.w	181aa <ull_conn_llcp+0x99a>
		if (conn->tx_head == conn->tx_data) {
   17e52:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   17e56:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   17e58:	bf04      	itt	eq
   17e5a:	681a      	ldreq	r2, [r3, #0]
   17e5c:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   17e60:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17e64:	2a00      	cmp	r2, #0
   17e66:	f000 8551 	beq.w	1890c <ull_conn_llcp+0x10fc>
	tx->next = conn->tx_ctrl_last->next;
   17e6a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   17e6e:	681a      	ldr	r2, [r3, #0]
   17e70:	602a      	str	r2, [r5, #0]
	conn->tx_ctrl_last->next = tx;
   17e72:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   17e74:	682b      	ldr	r3, [r5, #0]
	conn->tx_ctrl_last = tx;
   17e76:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
	if (!tx->next) {
   17e7a:	2b00      	cmp	r3, #0
   17e7c:	f47f acdf 	bne.w	1783e <ull_conn_llcp+0x2e>
		conn->tx_data_last = tx;
   17e80:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
   17e84:	e4db      	b.n	1783e <ull_conn_llcp+0x2e>
		} else if (conn->llcp_feature.ack != conn->llcp_feature.req) {
   17e86:	f894 1125 	ldrb.w	r1, [r4, #293]	; 0x125
   17e8a:	f894 7124 	ldrb.w	r7, [r4, #292]	; 0x124
   17e8e:	42b9      	cmp	r1, r7
   17e90:	d042      	beq.n	17f18 <ull_conn_llcp+0x708>
	if (!((conn->llcp_feature.ack - conn->llcp_feature.req) & 0x01)) {
   17e92:	1bc9      	subs	r1, r1, r7
   17e94:	07c9      	lsls	r1, r1, #31
   17e96:	f57f acce 	bpl.w	17836 <ull_conn_llcp+0x26>
	if (conn->common.fex_valid) {
   17e9a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   17e9e:	f013 0701 	ands.w	r7, r3, #1
   17ea2:	f000 818d 	beq.w	181c0 <ull_conn_llcp+0x9b0>
		rx = ll_pdu_rx_alloc();
   17ea6:	f7fc fa6f 	bl	14388 <ll_pdu_rx_alloc>
		if (!rx) {
   17eaa:	4607      	mov	r7, r0
   17eac:	b320      	cbz	r0, 17ef8 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack = conn->llcp_feature.req;
   17eae:	f894 3124 	ldrb.w	r3, [r4, #292]	; 0x124
   17eb2:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17eb6:	7f03      	ldrb	r3, [r0, #28]
		rx->hdr.handle = conn->lll.handle;
   17eb8:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   17eba:	80c2      	strh	r2, [r0, #6]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17ebc:	f043 0303 	orr.w	r3, r3, #3
   17ec0:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, feature_rsp) +
   17ec2:	2309      	movs	r3, #9
   17ec4:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   17ec6:	77c3      	strb	r3, [r0, #31]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17ec8:	2303      	movs	r3, #3
   17eca:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_rsp.features[0], 0x00,
   17ecc:	4641      	mov	r1, r8
   17ece:	2208      	movs	r2, #8
   17ed0:	3020      	adds	r0, #32
   17ed2:	f00c faf4 	bl	244be <memset>
		sys_put_le24(conn->llcp_feature.features_peer,
   17ed6:	f8d4 312c 	ldr.w	r3, [r4, #300]	; 0x12c
	dst[0] = val;
   17eda:	f887 3020 	strb.w	r3, [r7, #32]
	dst[1] = val >> 8;
   17ede:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   17ee2:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   17ee4:	f887 2021 	strb.w	r2, [r7, #33]	; 0x21
	dst[2] = val >> 16;
   17ee8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		ll_rx_put(rx->hdr.link, rx);
   17eec:	4639      	mov	r1, r7
		ll_rx_put(rx->hdr.link, rx);
   17eee:	6808      	ldr	r0, [r1, #0]
   17ef0:	f7fc fa1c 	bl	1432c <ll_rx_put>
		ll_rx_sched();
   17ef4:	f7fc fa24 	bl	14340 <ll_rx_sched>
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   17ef8:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   17efc:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
}
   17f00:	e491      	b.n	17826 <ull_conn_llcp+0x16>
		if (!conn->tx_ctrl) {
   17f02:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   17f06:	2a00      	cmp	r2, #0
   17f08:	f47f ad9c 	bne.w	17a44 <ull_conn_llcp+0x234>
			tx->next = conn->tx_head;
   17f0c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   17f0e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   17f12:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   17f16:	e59d      	b.n	17a54 <ull_conn_llcp+0x244>
		} else if (conn->llcp_version.ack != conn->llcp_version.req) {
   17f18:	f894 1131 	ldrb.w	r1, [r4, #305]	; 0x131
   17f1c:	f894 7130 	ldrb.w	r7, [r4, #304]	; 0x130
   17f20:	42b9      	cmp	r1, r7
   17f22:	d02d      	beq.n	17f80 <ull_conn_llcp+0x770>
	if (!((conn->llcp_version.ack - conn->llcp_version.req) & 0x01)) {
   17f24:	1bc9      	subs	r1, r1, r7
   17f26:	07c8      	lsls	r0, r1, #31
   17f28:	f57f ac85 	bpl.w	17836 <ull_conn_llcp+0x26>
	if (conn->llcp_version.tx == 0U) {
   17f2c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   17f30:	07d9      	lsls	r1, r3, #31
   17f32:	f140 8398 	bpl.w	18666 <ull_conn_llcp+0xe56>
	} else if (conn->llcp_version.rx) {
   17f36:	0799      	lsls	r1, r3, #30
   17f38:	f140 8387 	bpl.w	1864a <ull_conn_llcp+0xe3a>
		rx = ll_pdu_rx_alloc();
   17f3c:	f7fc fa24 	bl	14388 <ll_pdu_rx_alloc>
		if (!rx) {
   17f40:	4601      	mov	r1, r0
   17f42:	2800      	cmp	r0, #0
   17f44:	d0d8      	beq.n	17ef8 <ull_conn_llcp+0x6e8>
		conn->llcp_version.ack = conn->llcp_version.req;
   17f46:	f894 3130 	ldrb.w	r3, [r4, #304]	; 0x130
   17f4a:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
		rx->hdr.handle = conn->lll.handle;
   17f4e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   17f50:	80c3      	strh	r3, [r0, #6]
		rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17f52:	2303      	movs	r3, #3
   17f54:	7103      	strb	r3, [r0, #4]
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   17f56:	7f03      	ldrb	r3, [r0, #28]
   17f58:	f043 0303 	orr.w	r3, r3, #3
   17f5c:	7703      	strb	r3, [r0, #28]
		pdu->len = offsetof(struct pdu_data_llctrl, version_ind) +
   17f5e:	2306      	movs	r3, #6
   17f60:	7743      	strb	r3, [r0, #29]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   17f62:	230c      	movs	r3, #12
   17f64:	77c3      	strb	r3, [r0, #31]
		pdu->llctrl.version_ind.version_number =
   17f66:	f894 3133 	ldrb.w	r3, [r4, #307]	; 0x133
   17f6a:	f880 3020 	strb.w	r3, [r0, #32]
		pdu->llctrl.version_ind.company_id =
   17f6e:	f8b4 3134 	ldrh.w	r3, [r4, #308]	; 0x134
   17f72:	f8a0 3021 	strh.w	r3, [r0, #33]	; 0x21
		pdu->llctrl.version_ind.sub_version_number =
   17f76:	f8b4 3136 	ldrh.w	r3, [r4, #310]	; 0x136
   17f7a:	f8a0 3023 	strh.w	r3, [r0, #35]	; 0x23
   17f7e:	e7b6      	b.n	17eee <ull_conn_llcp+0x6de>
		} else if (conn->llcp_conn_param.ack !=
   17f80:	f894 717d 	ldrb.w	r7, [r4, #381]	; 0x17d
   17f84:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   17f88:	428f      	cmp	r7, r1
   17f8a:	f000 81f3 	beq.w	18374 <ull_conn_llcp+0xb64>
	conn_upd = conn_upd_curr;
   17f8e:	4f44      	ldr	r7, [pc, #272]	; (180a0 <ull_conn_llcp+0x890>)
   17f90:	6839      	ldr	r1, [r7, #0]
	if (conn_upd && (conn_upd != conn)) {
   17f92:	2900      	cmp	r1, #0
   17f94:	f000 83c3 	beq.w	1871e <ull_conn_llcp+0xf0e>
   17f98:	428c      	cmp	r4, r1
   17f9a:	f47f ac4c 	bne.w	17836 <ull_conn_llcp+0x26>
	switch (conn->llcp_conn_param.state) {
   17f9e:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
   17fa2:	f001 0107 	and.w	r1, r1, #7
   17fa6:	2905      	cmp	r1, #5
   17fa8:	f200 8659 	bhi.w	18c5e <ull_conn_llcp+0x144e>
   17fac:	f20f 0804 	addw	r8, pc, #4
   17fb0:	f858 f021 	ldr.w	pc, [r8, r1, lsl #2]
   17fb4:	000180a5 	.word	0x000180a5
   17fb8:	0001801d 	.word	0x0001801d
   17fbc:	00017fcd 	.word	0x00017fcd
   17fc0:	00017827 	.word	0x00017827
   17fc4:	00017827 	.word	0x00017827
   17fc8:	00017827 	.word	0x00017827
	if (conn->llcp_enc.pause_tx) {
   17fcc:	f01e 0f02 	tst.w	lr, #2
   17fd0:	f47f ac31 	bne.w	17836 <ull_conn_llcp+0x26>
	rx = ll_pdu_rx_alloc();
   17fd4:	f7fc f9d8 	bl	14388 <ll_pdu_rx_alloc>
	if (!rx) {
   17fd8:	4601      	mov	r1, r0
   17fda:	2800      	cmp	r0, #0
   17fdc:	d08c      	beq.n	17ef8 <ull_conn_llcp+0x6e8>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17fde:	f894 017e 	ldrb.w	r0, [r4, #382]	; 0x17e
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17fe2:	7f0b      	ldrb	r3, [r1, #28]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17fe4:	2203      	movs	r2, #3
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17fe6:	f043 0303 	orr.w	r3, r3, #3
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17fea:	f362 0002 	bfi	r0, r2, #0, #3
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   17fee:	2718      	movs	r7, #24
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   17ff0:	f884 017e 	strb.w	r0, [r4, #382]	; 0x17e
	rx->hdr.handle = conn->lll.handle;
   17ff4:	8da0      	ldrh	r0, [r4, #44]	; 0x2c
	rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   17ff6:	710a      	strb	r2, [r1, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   17ff8:	770b      	strb	r3, [r1, #28]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   17ffa:	774f      	strb	r7, [r1, #29]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   17ffc:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   18000:	840b      	strh	r3, [r1, #32]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   18002:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   18006:	844b      	strh	r3, [r1, #34]	; 0x22
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   18008:	f8b4 3184 	ldrh.w	r3, [r4, #388]	; 0x184
   1800c:	848b      	strh	r3, [r1, #36]	; 0x24
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   1800e:	f8b4 3186 	ldrh.w	r3, [r4, #390]	; 0x186
   18012:	84cb      	strh	r3, [r1, #38]	; 0x26
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18014:	230f      	movs	r3, #15
	rx->hdr.handle = conn->lll.handle;
   18016:	80c8      	strh	r0, [r1, #6]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18018:	77cb      	strb	r3, [r1, #31]
	ll_rx_put(rx->hdr.link, rx);
   1801a:	e768      	b.n	17eee <ull_conn_llcp+0x6de>
	if (conn->llcp_conn_param.status) {
   1801c:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   18020:	2b00      	cmp	r3, #0
   18022:	f040 8515 	bne.w	18a50 <ull_conn_llcp+0x1240>
	if (!conn->lll.role) {
   18026:	2a00      	cmp	r2, #0
   18028:	f2c0 8559 	blt.w	18ade <ull_conn_llcp+0x12ce>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1802c:	f894 117e 	ldrb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_offset_us = 0U;
   18030:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   18034:	2205      	movs	r2, #5
   18036:	f362 0102 	bfi	r1, r2, #0, #3
		if (conn->llcp_conn_param.preferred_periodicity) {
   1803a:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1803e:	f884 117e 	strb.w	r1, [r4, #382]	; 0x17e
		conn->llcp_cu.win_size = 1U;
   18042:	2001      	movs	r0, #1
   18044:	f884 0120 	strb.w	r0, [r4, #288]	; 0x120
		if (conn->llcp_conn_param.preferred_periodicity) {
   18048:	2a00      	cmp	r2, #0
   1804a:	f000 85c0 	beq.w	18bce <ull_conn_llcp+0x13be>
				((conn->llcp_conn_param.interval_min /
   1804e:	f8b4 3180 	ldrh.w	r3, [r4, #384]	; 0x180
   18052:	fbb3 f3f2 	udiv	r3, r3, r2
				  conn->llcp_conn_param.preferred_periodicity) +
   18056:	4403      	add	r3, r0
			conn->llcp_cu.interval =
   18058:	fb13 f302 	smulbb	r3, r3, r2
   1805c:	b29b      	uxth	r3, r3
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1805e:	f894 217e 	ldrb.w	r2, [r4, #382]	; 0x17e
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   18062:	f894 1112 	ldrb.w	r1, [r4, #274]	; 0x112
		conn->llcp_cu.latency = conn->llcp_conn_param.latency;
   18066:	f8b4 0184 	ldrh.w	r0, [r4, #388]	; 0x184
   1806a:	f8a4 0116 	strh.w	r0, [r4, #278]	; 0x116
		conn->llcp_cu.cmd = conn->llcp_conn_param.cmd;
   1806e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   18072:	00d2      	lsls	r2, r2, #3
   18074:	f021 010f 	bic.w	r1, r1, #15
   18078:	f042 0202 	orr.w	r2, r2, #2
   1807c:	430a      	orrs	r2, r1
		conn->llcp_cu.ack--;
   1807e:	f109 39ff 	add.w	r9, r9, #4294967295
		conn->llcp_cu.timeout = conn->llcp_conn_param.timeout;
   18082:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
   18086:	f8a4 3114 	strh.w	r3, [r4, #276]	; 0x114
   1808a:	f8a4 1118 	strh.w	r1, [r4, #280]	; 0x118
		conn->llcp_cu.state = LLCP_CUI_STATE_SELECT;
   1808e:	f884 2112 	strb.w	r2, [r4, #274]	; 0x112
		conn->llcp_cu.ack--;
   18092:	f884 9111 	strb.w	r9, [r4, #273]	; 0x111
	if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   18096:	f7ff bbd2 	b.w	1783e <ull_conn_llcp+0x2e>
   1809a:	bf00      	nop
   1809c:	2000e484 	.word	0x2000e484
   180a0:	2000e400 	.word	0x2000e400
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   180a4:	48cd      	ldr	r0, [pc, #820]	; (183dc <ull_conn_llcp+0xbcc>)
			event_counter = lll->event_counter +
   180a6:	f8b4 8036 	ldrh.w	r8, [r4, #54]	; 0x36
					lll->latency_prepare + lazy;
   180aa:	f8b4 9032 	ldrh.w	r9, [r4, #50]	; 0x32
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   180ae:	f7f8 fb33 	bl	10718 <mem_acquire>
	if (!tx) {
   180b2:	2800      	cmp	r0, #0
   180b4:	f43f af20 	beq.w	17ef8 <ull_conn_llcp+0x6e8>
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   180b8:	7903      	ldrb	r3, [r0, #4]
	conn_upd_curr = conn;
   180ba:	603c      	str	r4, [r7, #0]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   180bc:	f043 0303 	orr.w	r3, r3, #3
   180c0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, conn_param_req) +
   180c2:	2318      	movs	r3, #24
   180c4:	7143      	strb	r3, [r0, #5]
	p->interval_min = sys_cpu_to_le16(conn->llcp_conn_param.interval_min);
   180c6:	f8b4 1180 	ldrh.w	r1, [r4, #384]	; 0x180
   180ca:	8101      	strh	r1, [r0, #8]
	p->interval_max = sys_cpu_to_le16(conn->llcp_conn_param.interval_max);
   180cc:	f8b4 1182 	ldrh.w	r1, [r4, #386]	; 0x182
   180d0:	8141      	strh	r1, [r0, #10]
	p->preferred_periodicity = 0U;
   180d2:	2300      	movs	r3, #0
	p->latency = sys_cpu_to_le16(conn->llcp_conn_param.latency);
   180d4:	f8b4 1184 	ldrh.w	r1, [r4, #388]	; 0x184
   180d8:	8181      	strh	r1, [r0, #12]
			event_counter = lll->event_counter +
   180da:	44c8      	add	r8, r9
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   180dc:	f8b4 1186 	ldrh.w	r1, [r4, #390]	; 0x186
	p->preferred_periodicity = 0U;
   180e0:	7403      	strb	r3, [r0, #16]
	p->offset0 = sys_cpu_to_le16(0x0000);
   180e2:	74c3      	strb	r3, [r0, #19]
   180e4:	7503      	strb	r3, [r0, #20]
	p->offset1 = sys_cpu_to_le16(0xffff);
   180e6:	f04f 33ff 	mov.w	r3, #4294967295
	p->timeout = sys_cpu_to_le16(conn->llcp_conn_param.timeout);
   180ea:	81c1      	strh	r1, [r0, #14]
	p->offset1 = sys_cpu_to_le16(0xffff);
   180ec:	7543      	strb	r3, [r0, #21]
   180ee:	7583      	strb	r3, [r0, #22]
	p->offset2 = sys_cpu_to_le16(0xffff);
   180f0:	75c3      	strb	r3, [r0, #23]
   180f2:	7603      	strb	r3, [r0, #24]
	p->offset3 = sys_cpu_to_le16(0xffff);
   180f4:	7643      	strb	r3, [r0, #25]
   180f6:	7683      	strb	r3, [r0, #26]
	p->offset4 = sys_cpu_to_le16(0xffff);
   180f8:	76c3      	strb	r3, [r0, #27]
   180fa:	7703      	strb	r3, [r0, #28]
	p->offset5 = sys_cpu_to_le16(0xffff);
   180fc:	7743      	strb	r3, [r0, #29]
   180fe:	7783      	strb	r3, [r0, #30]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18100:	210f      	movs	r1, #15
	conn->procedure_expire = conn->procedure_reload;
   18102:	f8b4 30ca 	ldrh.w	r3, [r4, #202]	; 0xca
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18106:	71c1      	strb	r1, [r0, #7]
					lll->latency_prepare + lazy;
   18108:	44b0      	add	r8, r6
	conn->procedure_expire = conn->procedure_reload;
   1810a:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	p->reference_conn_event_count = sys_cpu_to_le16(event_counter);
   1810e:	f8a0 8011 	strh.w	r8, [r0, #17]
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   18112:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   18116:	2104      	movs	r1, #4
   18118:	f361 0302 	bfi	r3, r1, #0, #3
   1811c:	f884 317e 	strb.w	r3, [r4, #382]	; 0x17e
	    conn->tx_head &&
   18120:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   18124:	2b00      	cmp	r3, #0
   18126:	f000 840c 	beq.w	18942 <ull_conn_llcp+0x1132>
	    !conn->llcp_enc.pause_tx &&
   1812a:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1812e:	078a      	lsls	r2, r1, #30
   18130:	f100 8407 	bmi.w	18942 <ull_conn_llcp+0x1132>
	    !conn->llcp_phy.pause_tx &&
   18134:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   18138:	07cf      	lsls	r7, r1, #31
   1813a:	f100 8402 	bmi.w	18942 <ull_conn_llcp+0x1132>
		if (conn->tx_head == conn->tx_data) {
   1813e:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18142:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   18144:	bf04      	itt	eq
   18146:	6819      	ldreq	r1, [r3, #0]
   18148:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1814c:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18150:	2900      	cmp	r1, #0
   18152:	f000 8574 	beq.w	18c3e <ull_conn_llcp+0x142e>
	tx->next = conn->tx_ctrl_last->next;
   18156:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1815a:	6819      	ldr	r1, [r3, #0]
   1815c:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   1815e:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18160:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18164:	6803      	ldr	r3, [r0, #0]
   18166:	2b00      	cmp	r3, #0
   18168:	f47f aec6 	bne.w	17ef8 <ull_conn_llcp+0x6e8>
		conn->tx_data_last = tx;
   1816c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18170:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18174:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
   18178:	f7ff bb55 	b.w	17826 <ull_conn_llcp+0x16>
		if (conn->lll.role && (conn->slave.llcp_type != LLCP_NONE)) {
   1817c:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18180:	2b00      	cmp	r3, #0
   18182:	f43f ad19 	beq.w	17bb8 <ull_conn_llcp+0x3a8>
			conn->slave.llcp_type = LLCP_NONE;
   18186:	f884 20dd 	strb.w	r2, [r4, #221]	; 0xdd
   1818a:	e519      	b.n	17bc0 <ull_conn_llcp+0x3b0>
		conn->tx_data_last = tx;
   1818c:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18190:	e463      	b.n	17a5a <ull_conn_llcp+0x24a>
		if (!conn->tx_ctrl) {
   18192:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18196:	2a00      	cmp	r2, #0
   18198:	f47f adab 	bne.w	17cf2 <ull_conn_llcp+0x4e2>
			tx->next = conn->tx_head;
   1819c:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   181a0:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   181a4:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   181a8:	e5ae      	b.n	17d08 <ull_conn_llcp+0x4f8>
		if (!conn->tx_ctrl) {
   181aa:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   181ae:	2a00      	cmp	r2, #0
   181b0:	f47f ae5b 	bne.w	17e6a <ull_conn_llcp+0x65a>
			tx->next = conn->tx_head;
   181b4:	602b      	str	r3, [r5, #0]
				conn->tx_ctrl = tx;
   181b6:	e9c4 556f 	strd	r5, r5, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   181ba:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
   181be:	e65c      	b.n	17e7a <ull_conn_llcp+0x66a>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   181c0:	4886      	ldr	r0, [pc, #536]	; (183dc <ull_conn_llcp+0xbcc>)
   181c2:	f7f8 faa9 	bl	10718 <mem_acquire>
	if (tx) {
   181c6:	4680      	mov	r8, r0
   181c8:	2800      	cmp	r0, #0
   181ca:	f43f ae95 	beq.w	17ef8 <ull_conn_llcp+0x6e8>
		conn->llcp_feature.ack--;
   181ce:	f894 3125 	ldrb.w	r3, [r4, #293]	; 0x125
   181d2:	3b01      	subs	r3, #1
   181d4:	f884 3125 	strb.w	r3, [r4, #293]	; 0x125
		conn->llcp_feature.features_conn = LL_FEAT;
   181d8:	4b81      	ldr	r3, [pc, #516]	; (183e0 <ull_conn_llcp+0xbd0>)
   181da:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
		pdu->len = offsetof(struct pdu_data_llctrl, feature_req) +
   181de:	2309      	movs	r3, #9
   181e0:	7143      	strb	r3, [r0, #5]
		pdu->llctrl.opcode = !conn->lll.role ?
   181e2:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   181e6:	2b00      	cmp	r3, #0
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   181e8:	7903      	ldrb	r3, [r0, #4]
   181ea:	f043 0303 	orr.w	r3, r3, #3
   181ee:	7103      	strb	r3, [r0, #4]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   181f0:	f04f 0208 	mov.w	r2, #8
		pdu->llctrl.opcode = !conn->lll.role ?
   181f4:	bfac      	ite	ge
   181f6:	2308      	movge	r3, #8
   181f8:	230e      	movlt	r3, #14
   181fa:	71c3      	strb	r3, [r0, #7]
		(void)memset(&pdu->llctrl.feature_req.features[0],
   181fc:	4639      	mov	r1, r7
   181fe:	4410      	add	r0, r2
   18200:	f00c f95d 	bl	244be <memset>
		sys_put_le24(conn->llcp_feature.features_conn,
   18204:	f8d4 3128 	ldr.w	r3, [r4, #296]	; 0x128
	dst[0] = val;
   18208:	f888 3008 	strb.w	r3, [r8, #8]
	dst[1] = val >> 8;
   1820c:	f3c3 2207 	ubfx	r2, r3, #8, #8
	dst[2] = val >> 16;
   18210:	0c1b      	lsrs	r3, r3, #16
	dst[1] = val >> 8;
   18212:	f888 2009 	strb.w	r2, [r8, #9]
	dst[2] = val >> 16;
   18216:	f888 300a 	strb.w	r3, [r8, #10]
	    conn->tx_head &&
   1821a:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   1821e:	2b00      	cmp	r3, #0
   18220:	f000 80cf 	beq.w	183c2 <ull_conn_llcp+0xbb2>
	    !conn->llcp_enc.pause_tx &&
   18224:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18228:	0792      	lsls	r2, r2, #30
   1822a:	f100 80ca 	bmi.w	183c2 <ull_conn_llcp+0xbb2>
	    !conn->llcp_phy.pause_tx &&
   1822e:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   18232:	07d7      	lsls	r7, r2, #31
   18234:	f100 80c5 	bmi.w	183c2 <ull_conn_llcp+0xbb2>
		if (conn->tx_head == conn->tx_data) {
   18238:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   1823c:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   1823e:	bf04      	itt	eq
   18240:	681a      	ldreq	r2, [r3, #0]
   18242:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18246:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1824a:	2a00      	cmp	r2, #0
   1824c:	f000 8384 	beq.w	18958 <ull_conn_llcp+0x1148>
	tx->next = conn->tx_ctrl_last->next;
   18250:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18254:	681a      	ldr	r2, [r3, #0]
   18256:	f8c8 2000 	str.w	r2, [r8]
	conn->tx_ctrl_last->next = tx;
   1825a:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   1825e:	f8d8 3000 	ldr.w	r3, [r8]
	conn->tx_ctrl_last = tx;
   18262:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18266:	2b00      	cmp	r3, #0
   18268:	f000 8270 	beq.w	1874c <ull_conn_llcp+0xf3c>
		conn->procedure_expire = conn->procedure_reload;
   1826c:	f8b4 20ca 	ldrh.w	r2, [r4, #202]	; 0xca
	if (((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) {
   18270:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18274:	f894 00e9 	ldrb.w	r0, [r4, #233]	; 0xe9
		conn->procedure_expire = conn->procedure_reload;
   18278:	f8a4 20cc 	strh.w	r2, [r4, #204]	; 0xcc
	break;
   1827c:	f7ff bad3 	b.w	17826 <ull_conn_llcp+0x16>
		ecb_encrypt(&conn->llcp_enc.ltk[0],
   18280:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   18284:	463b      	mov	r3, r7
   18286:	4642      	mov	r2, r8
   18288:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   1828c:	f204 1069 	addw	r0, r4, #361	; 0x169
   18290:	f004 fab4 	bl	1c7fc <ecb_encrypt>
		memcpy(&lll->ccm_tx.key[0], &lll->ccm_rx.key[0],
   18294:	4639      	mov	r1, r7
   18296:	2210      	movs	r2, #16
   18298:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   1829c:	f00c f8e4 	bl	24468 <memcpy>
		memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   182a0:	2208      	movs	r2, #8
   182a2:	f104 0198 	add.w	r1, r4, #152	; 0x98
   182a6:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   182aa:	f00c f8dd 	bl	24468 <memcpy>
		lll->ccm_rx.direction = 0;
   182ae:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
		lll->ccm_rx.counter = 0;
   182b2:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
		lll->ccm_rx.direction = 0;
   182b6:	f368 0300 	bfi	r3, r8, #0, #1
   182ba:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
		lll->ccm_tx.direction = 1;
   182be:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
		lll->ccm_rx.counter = 0;
   182c2:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
		lll->ccm_tx.direction = 1;
   182c6:	f043 0301 	orr.w	r3, r3, #1
   182ca:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
		lll->enc_rx = 1;
   182ce:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
		lll->ccm_rx.counter = 0;
   182d2:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
		lll->enc_rx = 1;
   182d6:	f043 0308 	orr.w	r3, r3, #8
		lll->ccm_tx.counter = 0;
   182da:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
		lll->ccm_rx.counter = 0;
   182de:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
   182e2:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   182e6:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   182ea:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   182ee:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
		lll->enc_rx = 1;
   182f2:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	if (!pdu_ctrl_tx) {
   182f6:	f1ba 0f00 	cmp.w	sl, #0
   182fa:	f000 8242 	beq.w	18782 <ull_conn_llcp+0xf72>
	conn->lll.enc_tx = 1;
   182fe:	b2db      	uxtb	r3, r3
   18300:	f043 0310 	orr.w	r3, r3, #16
   18304:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18308:	f899 3004 	ldrb.w	r3, [r9, #4]
   1830c:	f043 0303 	orr.w	r3, r3, #3
   18310:	f889 3004 	strb.w	r3, [r9, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18314:	2301      	movs	r3, #1
   18316:	f889 3005 	strb.w	r3, [r9, #5]
		if (!conn->tx_ctrl) {
   1831a:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   1831e:	2306      	movs	r3, #6
   18320:	f889 3007 	strb.w	r3, [r9, #7]
	if (
   18324:	2800      	cmp	r0, #0
   18326:	d03c      	beq.n	183a2 <ull_conn_llcp+0xb92>
	    !conn->llcp_enc.pause_tx &&
   18328:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   1832c:	079b      	lsls	r3, r3, #30
   1832e:	d438      	bmi.n	183a2 <ull_conn_llcp+0xb92>
	    !conn->llcp_phy.pause_tx &&
   18330:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   18334:	07df      	lsls	r7, r3, #31
   18336:	d434      	bmi.n	183a2 <ull_conn_llcp+0xb92>
		if (conn->tx_head == conn->tx_data) {
   18338:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   1833c:	4283      	cmp	r3, r0
			conn->tx_data = conn->tx_data->next;
   1833e:	bf04      	itt	eq
   18340:	6803      	ldreq	r3, [r0, #0]
   18342:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18346:	f1be 0f00 	cmp.w	lr, #0
   1834a:	f000 830f 	beq.w	1896c <ull_conn_llcp+0x115c>
	tx->next = conn->tx_ctrl_last->next;
   1834e:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18352:	681a      	ldr	r2, [r3, #0]
   18354:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   18358:	f8c3 9000 	str.w	r9, [r3]
	if (!tx->next) {
   1835c:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   18360:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18364:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   18368:	2800      	cmp	r0, #0
   1836a:	f47f ad31 	bne.w	17dd0 <ull_conn_llcp+0x5c0>
		conn->tx_data_last = tx;
   1836e:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   18372:	e52d      	b.n	17dd0 <ull_conn_llcp+0x5c0>
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   18374:	f894 11a5 	ldrb.w	r1, [r4, #421]	; 0x1a5
   18378:	f894 31a4 	ldrb.w	r3, [r4, #420]	; 0x1a4
   1837c:	4299      	cmp	r1, r3
   1837e:	d031      	beq.n	183e4 <ull_conn_llcp+0xbd4>
			event_len_prep(conn);
   18380:	4620      	mov	r0, r4
   18382:	f7fd f91b 	bl	155bc <event_len_prep>
   18386:	e5b7      	b.n	17ef8 <ull_conn_llcp+0x6e8>
		if (!conn->tx_ctrl) {
   18388:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1838c:	2a00      	cmp	r2, #0
   1838e:	f47f abc1 	bne.w	17b14 <ull_conn_llcp+0x304>
			tx->next = conn->tx_head;
   18392:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   18396:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1839a:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   1839e:	f7ff bbc4 	b.w	17b2a <ull_conn_llcp+0x31a>
		if (!conn->tx_ctrl) {
   183a2:	f1be 0f00 	cmp.w	lr, #0
   183a6:	f000 81e5 	beq.w	18774 <ull_conn_llcp+0xf64>
   183aa:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
	tx->next = conn->tx_ctrl_last->next;
   183ae:	680b      	ldr	r3, [r1, #0]
   183b0:	f8c9 3000 	str.w	r3, [r9]
	conn->tx_ctrl_last->next = tx;
   183b4:	f8c1 9000 	str.w	r9, [r1]
	if (!tx->next) {
   183b8:	f8d9 0000 	ldr.w	r0, [r9]
	conn->tx_ctrl_last = tx;
   183bc:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
}
   183c0:	e7d0      	b.n	18364 <ull_conn_llcp+0xb54>
		if (!conn->tx_ctrl) {
   183c2:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   183c6:	2a00      	cmp	r2, #0
   183c8:	f47f af42 	bne.w	18250 <ull_conn_llcp+0xa40>
			tx->next = conn->tx_head;
   183cc:	f8c8 3000 	str.w	r3, [r8]
				conn->tx_ctrl = tx;
   183d0:	e9c4 886f 	strd	r8, r8, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   183d4:	f8c4 81c4 	str.w	r8, [r4, #452]	; 0x1c4
   183d8:	e745      	b.n	18266 <ull_conn_llcp+0xa56>
   183da:	bf00      	nop
   183dc:	2000e484 	.word	0x2000e484
   183e0:	0001417f 	.word	0x0001417f
		} else if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   183e4:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   183e8:	f894 31b5 	ldrb.w	r3, [r4, #437]	; 0x1b5
   183ec:	428b      	cmp	r3, r1
   183ee:	f43f aa22 	beq.w	17836 <ull_conn_llcp+0x26>
	switch (conn->llcp_phy.state) {
   183f2:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   183f6:	f003 0703 	and.w	r7, r3, #3
   183fa:	2f03      	cmp	r7, #3
   183fc:	f000 82d4 	beq.w	189a8 <ull_conn_llcp+0x1198>
   18400:	2f00      	cmp	r7, #0
   18402:	f47f aa17 	bne.w	17834 <ull_conn_llcp+0x24>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18406:	48d7      	ldr	r0, [pc, #860]	; (18764 <ull_conn_llcp+0xf54>)
   18408:	f7f8 f986 	bl	10718 <mem_acquire>
		if (!tx) {
   1840c:	2800      	cmp	r0, #0
   1840e:	f43f ad73 	beq.w	17ef8 <ull_conn_llcp+0x6e8>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   18412:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		conn->lll.phy_flags = conn->llcp_phy.flags;
   18416:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   1841a:	2201      	movs	r2, #1
   1841c:	f362 0301 	bfi	r3, r2, #0, #2
		conn->phy_pref_tx = conn->llcp_phy.tx;
   18420:	f894 21b8 	ldrb.w	r2, [r4, #440]	; 0x1b8
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   18424:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   18428:	f3c3 0782 	ubfx	r7, r3, #2, #3
   1842c:	f367 0202 	bfi	r2, r7, #0, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   18430:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
   18434:	f3c1 0140 	ubfx	r1, r1, #1, #1
   18438:	f361 07c3 	bfi	r7, r1, #3, #1
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1843c:	f3c3 1142 	ubfx	r1, r3, #5, #3
   18440:	f361 02c5 	bfi	r2, r1, #3, #3
   18444:	f884 21b8 	strb.w	r2, [r4, #440]	; 0x1b8
		conn->phy_pref_tx = conn->llcp_phy.tx;
   18448:	f3c3 0282 	ubfx	r2, r3, #2, #3
		pdu_ctrl_tx->len =
   1844c:	2303      	movs	r3, #3
		conn->lll.phy_flags = conn->llcp_phy.flags;
   1844e:	f884 7064 	strb.w	r7, [r4, #100]	; 0x64
		pdu_ctrl_tx->len =
   18452:	7143      	strb	r3, [r0, #5]
		pr->tx_phys = conn->llcp_phy.tx;
   18454:	7202      	strb	r2, [r0, #8]
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   18456:	2316      	movs	r3, #22
		pr->rx_phys = conn->llcp_phy.rx;
   18458:	7241      	strb	r1, [r0, #9]
	    conn->tx_head &&
   1845a:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
		pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_REQ;
   1845e:	71c3      	strb	r3, [r0, #7]
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18460:	7903      	ldrb	r3, [r0, #4]
   18462:	f043 0303 	orr.w	r3, r3, #3
   18466:	7103      	strb	r3, [r0, #4]
	if (
   18468:	2a00      	cmp	r2, #0
   1846a:	f000 8292 	beq.w	18992 <ull_conn_llcp+0x1182>
	    !conn->llcp_enc.pause_tx &&
   1846e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18472:	0799      	lsls	r1, r3, #30
   18474:	f100 828d 	bmi.w	18992 <ull_conn_llcp+0x1182>
	    !conn->llcp_phy.pause_tx &&
   18478:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1847c:	07db      	lsls	r3, r3, #31
   1847e:	f100 8288 	bmi.w	18992 <ull_conn_llcp+0x1182>
		if (conn->tx_head == conn->tx_data) {
   18482:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   18486:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   18488:	bf04      	itt	eq
   1848a:	6813      	ldreq	r3, [r2, #0]
   1848c:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18490:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   18494:	2b00      	cmp	r3, #0
   18496:	f000 83cc 	beq.w	18c32 <ull_conn_llcp+0x1422>
	tx->next = conn->tx_ctrl_last->next;
   1849a:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   1849e:	681a      	ldr	r2, [r3, #0]
   184a0:	6002      	str	r2, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   184a2:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   184a4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   184a8:	6803      	ldr	r3, [r0, #0]
   184aa:	2b00      	cmp	r3, #0
   184ac:	f47f aede 	bne.w	1826c <ull_conn_llcp+0xa5c>
		conn->tx_data_last = tx;
   184b0:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   184b4:	e6da      	b.n	1826c <ull_conn_llcp+0xa5c>
			ecb_encrypt(&conn->llcp_enc.ltk[0],
   184b6:	f104 077f 	add.w	r7, r4, #127	; 0x7f
   184ba:	463b      	mov	r3, r7
   184bc:	4642      	mov	r2, r8
   184be:	f104 01fa 	add.w	r1, r4, #250	; 0xfa
   184c2:	f204 1069 	addw	r0, r4, #361	; 0x169
   184c6:	f004 f999 	bl	1c7fc <ecb_encrypt>
			memcpy(&lll->ccm_tx.key[0],
   184ca:	4639      	mov	r1, r7
   184cc:	2210      	movs	r2, #16
   184ce:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
   184d2:	f00b ffc9 	bl	24468 <memcpy>
			memcpy(&lll->ccm_tx.iv[0], &lll->ccm_rx.iv[0],
   184d6:	2208      	movs	r2, #8
   184d8:	f104 0198 	add.w	r1, r4, #152	; 0x98
   184dc:	f104 00b9 	add.w	r0, r4, #185	; 0xb9
   184e0:	f00b ffc2 	bl	24468 <memcpy>
			lll->ccm_rx.direction = 1U;
   184e4:	f894 3097 	ldrb.w	r3, [r4, #151]	; 0x97
			lll->ccm_rx.counter = 0U;
   184e8:	f884 808f 	strb.w	r8, [r4, #143]	; 0x8f
			lll->ccm_rx.direction = 1U;
   184ec:	f043 0301 	orr.w	r3, r3, #1
   184f0:	f884 3097 	strb.w	r3, [r4, #151]	; 0x97
			lll->ccm_tx.direction = 0U;
   184f4:	f894 30b8 	ldrb.w	r3, [r4, #184]	; 0xb8
			lll->ccm_rx.counter = 0U;
   184f8:	f884 8090 	strb.w	r8, [r4, #144]	; 0x90
			lll->ccm_tx.direction = 0U;
   184fc:	f368 0300 	bfi	r3, r8, #0, #1
   18500:	f884 30b8 	strb.w	r3, [r4, #184]	; 0xb8
			lll->enc_rx = 1U;
   18504:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
			lll->ccm_rx.counter = 0U;
   18508:	f884 8091 	strb.w	r8, [r4, #145]	; 0x91
			lll->enc_rx = 1U;
   1850c:	f043 0308 	orr.w	r3, r3, #8
   18510:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18514:	f899 3004 	ldrb.w	r3, [r9, #4]
			lll->ccm_rx.counter = 0U;
   18518:	f884 8092 	strb.w	r8, [r4, #146]	; 0x92
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1851c:	f043 0303 	orr.w	r3, r3, #3
			lll->ccm_tx.counter = 0U;
   18520:	e9c4 882c 	strd	r8, r8, [r4, #176]	; 0xb0
			lll->ccm_rx.counter = 0U;
   18524:	f884 8093 	strb.w	r8, [r4, #147]	; 0x93
   18528:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
   1852c:	f884 8095 	strb.w	r8, [r4, #149]	; 0x95
   18530:	f884 8096 	strb.w	r8, [r4, #150]	; 0x96
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18534:	f889 3004 	strb.w	r3, [r9, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   18538:	2301      	movs	r3, #1
   1853a:	f889 3005 	strb.w	r3, [r9, #5]
			pdu_ctrl_tx->llctrl.opcode =
   1853e:	2305      	movs	r3, #5
   18540:	f889 3007 	strb.w	r3, [r9, #7]
	    conn->tx_head &&
   18544:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   18548:	2b00      	cmp	r3, #0
   1854a:	d066      	beq.n	1861a <ull_conn_llcp+0xe0a>
	    !conn->llcp_enc.pause_tx &&
   1854c:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18550:	0792      	lsls	r2, r2, #30
   18552:	d462      	bmi.n	1861a <ull_conn_llcp+0xe0a>
	    !conn->llcp_phy.pause_tx &&
   18554:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   18558:	07d7      	lsls	r7, r2, #31
   1855a:	d45e      	bmi.n	1861a <ull_conn_llcp+0xe0a>
		if (conn->tx_head == conn->tx_data) {
   1855c:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   18560:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   18562:	bf04      	itt	eq
   18564:	681a      	ldreq	r2, [r3, #0]
   18566:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   1856a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1856e:	2a00      	cmp	r2, #0
   18570:	f000 825c 	beq.w	18a2c <ull_conn_llcp+0x121c>
	tx->next = conn->tx_ctrl_last->next;
   18574:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18578:	681a      	ldr	r2, [r3, #0]
   1857a:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   1857e:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   18582:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18586:	f8d9 3000 	ldr.w	r3, [r9]
   1858a:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   1858e:	2b00      	cmp	r3, #0
   18590:	f47f ac1e 	bne.w	17dd0 <ull_conn_llcp+0x5c0>
   18594:	e6eb      	b.n	1836e <ull_conn_llcp+0xb5e>
	if (!pdu_ctrl_tx) {
   18596:	f1ba 0f00 	cmp.w	sl, #0
   1859a:	f000 8160 	beq.w	1885e <ull_conn_llcp+0x104e>
	conn->lll.enc_tx = 1;
   1859e:	f043 0310 	orr.w	r3, r3, #16
   185a2:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   185a6:	7903      	ldrb	r3, [r0, #4]
   185a8:	f043 0303 	orr.w	r3, r3, #3
   185ac:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   185ae:	2301      	movs	r3, #1
   185b0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   185b2:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   185b6:	2306      	movs	r3, #6
   185b8:	71c3      	strb	r3, [r0, #7]
	if (
   185ba:	2a00      	cmp	r2, #0
   185bc:	f000 8098 	beq.w	186f0 <ull_conn_llcp+0xee0>
	    !conn->llcp_enc.pause_tx &&
   185c0:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   185c4:	079f      	lsls	r7, r3, #30
   185c6:	f100 8093 	bmi.w	186f0 <ull_conn_llcp+0xee0>
	    !conn->llcp_phy.pause_tx &&
   185ca:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   185ce:	07d8      	lsls	r0, r3, #31
   185d0:	f100 808e 	bmi.w	186f0 <ull_conn_llcp+0xee0>
		if (conn->tx_head == conn->tx_data) {
   185d4:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
   185d8:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   185da:	bf04      	itt	eq
   185dc:	6813      	ldreq	r3, [r2, #0]
   185de:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   185e2:	f1bc 0f00 	cmp.w	ip, #0
   185e6:	f000 8229 	beq.w	18a3c <ull_conn_llcp+0x122c>
	tx->next = conn->tx_ctrl_last->next;
   185ea:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   185ee:	681a      	ldr	r2, [r3, #0]
   185f0:	f8c9 2000 	str.w	r2, [r9]
	conn->tx_ctrl_last->next = tx;
   185f4:	f8c3 9000 	str.w	r9, [r3]
	conn->tx_ctrl_last = tx;
   185f8:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
	if (!tx->next) {
   185fc:	f8d9 3000 	ldr.w	r3, [r9]
   18600:	2b00      	cmp	r3, #0
   18602:	f000 8121 	beq.w	18848 <ull_conn_llcp+0x1038>
		conn->llcp_enc.pause_rx = 0U;
   18606:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1860a:	f994 c03d 	ldrsb.w	ip, [r4, #61]	; 0x3d
   1860e:	f023 0303 	bic.w	r3, r3, #3
   18612:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
   18616:	f7ff bbdb 	b.w	17dd0 <ull_conn_llcp+0x5c0>
		if (!conn->tx_ctrl) {
   1861a:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1861e:	2a00      	cmp	r2, #0
   18620:	d1a8      	bne.n	18574 <ull_conn_llcp+0xd64>
			tx->next = conn->tx_head;
   18622:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   18626:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1862a:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   1862e:	e7aa      	b.n	18586 <ull_conn_llcp+0xd76>
		if (!conn->tx_ctrl) {
   18630:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   18634:	2a00      	cmp	r2, #0
   18636:	f47f abbd 	bne.w	17db4 <ull_conn_llcp+0x5a4>
			tx->next = conn->tx_head;
   1863a:	f8c9 3000 	str.w	r3, [r9]
				conn->tx_ctrl = tx;
   1863e:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18642:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   18646:	f7ff bbbe 	b.w	17dc6 <ull_conn_llcp+0x5b6>
		LL_ASSERT(0);
   1864a:	4a47      	ldr	r2, [pc, #284]	; (18768 <ull_conn_llcp+0xf58>)
   1864c:	4947      	ldr	r1, [pc, #284]	; (1876c <ull_conn_llcp+0xf5c>)
   1864e:	f640 33f4 	movw	r3, #3060	; 0xbf4
		LL_ASSERT(0);
   18652:	4847      	ldr	r0, [pc, #284]	; (18770 <ull_conn_llcp+0xf60>)
   18654:	f009 fa66 	bl	21b24 <printk>
   18658:	4040      	eors	r0, r0
   1865a:	f380 8811 	msr	BASEPRI, r0
   1865e:	f04f 0003 	mov.w	r0, #3
   18662:	df02      	svc	2
		break;
   18664:	e448      	b.n	17ef8 <ull_conn_llcp+0x6e8>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18666:	483f      	ldr	r0, [pc, #252]	; (18764 <ull_conn_llcp+0xf54>)
   18668:	f7f8 f856 	bl	10718 <mem_acquire>
		if (tx) {
   1866c:	2800      	cmp	r0, #0
   1866e:	f43f ac43 	beq.w	17ef8 <ull_conn_llcp+0x6e8>
			conn->llcp_version.ack--;
   18672:	f894 3131 	ldrb.w	r3, [r4, #305]	; 0x131
   18676:	3b01      	subs	r3, #1
   18678:	f884 3131 	strb.w	r3, [r4, #305]	; 0x131
			conn->llcp_version.tx = 1U;
   1867c:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   18680:	f043 0301 	orr.w	r3, r3, #1
   18684:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			pdu->ll_id = PDU_DATA_LLID_CTRL;
   18688:	7903      	ldrb	r3, [r0, #4]
   1868a:	f043 0303 	orr.w	r3, r3, #3
   1868e:	7103      	strb	r3, [r0, #4]
			pdu->len =
   18690:	2306      	movs	r3, #6
   18692:	7143      	strb	r3, [r0, #5]
			pdu->llctrl.opcode =
   18694:	230c      	movs	r3, #12
   18696:	71c3      	strb	r3, [r0, #7]
			pdu->llctrl.version_ind.version_number =
   18698:	230b      	movs	r3, #11
   1869a:	7203      	strb	r3, [r0, #8]
			pdu->llctrl.version_ind.company_id = cid;
   1869c:	f06f 030e 	mvn.w	r3, #14
   186a0:	7243      	strb	r3, [r0, #9]
   186a2:	2305      	movs	r3, #5
   186a4:	7283      	strb	r3, [r0, #10]
			pdu->llctrl.version_ind.sub_version_number = svn;
   186a6:	f04f 33ff 	mov.w	r3, #4294967295
   186aa:	72c3      	strb	r3, [r0, #11]
   186ac:	7303      	strb	r3, [r0, #12]
	    conn->tx_head &&
   186ae:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   186b2:	2b00      	cmp	r3, #0
   186b4:	f000 80b8 	beq.w	18828 <ull_conn_llcp+0x1018>
	    !conn->llcp_enc.pause_tx &&
   186b8:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
	    conn->tx_head &&
   186bc:	0792      	lsls	r2, r2, #30
   186be:	f100 80b3 	bmi.w	18828 <ull_conn_llcp+0x1018>
	    !conn->llcp_phy.pause_tx &&
   186c2:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
   186c6:	07d7      	lsls	r7, r2, #31
   186c8:	f100 80ae 	bmi.w	18828 <ull_conn_llcp+0x1018>
		if (conn->tx_head == conn->tx_data) {
   186cc:	f8d4 21c8 	ldr.w	r2, [r4, #456]	; 0x1c8
   186d0:	4293      	cmp	r3, r2
			conn->tx_data = conn->tx_data->next;
   186d2:	bf04      	itt	eq
   186d4:	681a      	ldreq	r2, [r3, #0]
   186d6:	f8c4 21c8 	streq.w	r2, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   186da:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   186de:	2a00      	cmp	r2, #0
   186e0:	f47f aedb 	bne.w	1849a <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head->next;
   186e4:	681a      	ldr	r2, [r3, #0]
   186e6:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   186e8:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   186ea:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   186ee:	e6db      	b.n	184a8 <ull_conn_llcp+0xc98>
		if (!conn->tx_ctrl) {
   186f0:	f1bc 0f00 	cmp.w	ip, #0
   186f4:	f47f af79 	bne.w	185ea <ull_conn_llcp+0xdda>
			tx->next = conn->tx_head;
   186f8:	f8c9 2000 	str.w	r2, [r9]
				conn->tx_ctrl = tx;
   186fc:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18700:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   18704:	e77a      	b.n	185fc <ull_conn_llcp+0xdec>
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   18706:	230d      	movs	r3, #13
		p->error_code =	conn->llcp.encryption.error_code;
   18708:	f889 8008 	strb.w	r8, [r9, #8]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   1870c:	f889 3007 	strb.w	r3, [r9, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   18710:	2702      	movs	r7, #2
   18712:	f7ff bb2f 	b.w	17d74 <ull_conn_llcp+0x564>
		conn->tx_data_last = tx;
   18716:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
   1871a:	f7ff ba09 	b.w	17b30 <ull_conn_llcp+0x320>
	switch (conn->llcp_conn_param.state) {
   1871e:	f894 317e 	ldrb.w	r3, [r4, #382]	; 0x17e
   18722:	f003 0307 	and.w	r3, r3, #7
   18726:	2b05      	cmp	r3, #5
   18728:	f200 8299 	bhi.w	18c5e <ull_conn_llcp+0x144e>
   1872c:	a101      	add	r1, pc, #4	; (adr r1, 18734 <ull_conn_llcp+0xf24>)
   1872e:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
   18732:	bf00      	nop
   18734:	000180a5 	.word	0x000180a5
   18738:	0001801d 	.word	0x0001801d
   1873c:	00017fcd 	.word	0x00017fcd
   18740:	00017837 	.word	0x00017837
   18744:	00017837 	.word	0x00017837
   18748:	00017837 	.word	0x00017837
		conn->tx_data_last = tx;
   1874c:	f8c4 81cc 	str.w	r8, [r4, #460]	; 0x1cc
		conn->procedure_expire = conn->procedure_reload;
   18750:	e58c      	b.n	1826c <ull_conn_llcp+0xa5c>
			tx->next = conn->tx_head->next;
   18752:	681a      	ldr	r2, [r3, #0]
   18754:	6002      	str	r2, [r0, #0]
			conn->tx_head->next = tx;
   18756:	6018      	str	r0, [r3, #0]
	if (!tx->next) {
   18758:	6803      	ldr	r3, [r0, #0]
				conn->tx_ctrl_last = tx;
   1875a:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   1875e:	f7ff b979 	b.w	17a54 <ull_conn_llcp+0x244>
   18762:	bf00      	nop
   18764:	2000e484 	.word	0x2000e484
   18768:	000288c0 	.word	0x000288c0
   1876c:	0002849c 	.word	0x0002849c
   18770:	00028404 	.word	0x00028404
			tx->next = conn->tx_head;
   18774:	f8c9 0000 	str.w	r0, [r9]
				conn->tx_ctrl = tx;
   18778:	e9c4 996f 	strd	r9, r9, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1877c:	f8c4 91c4 	str.w	r9, [r4, #452]	; 0x1c4
   18780:	e5f0      	b.n	18364 <ull_conn_llcp+0xb54>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18782:	48b2      	ldr	r0, [pc, #712]	; (18a4c <ull_conn_llcp+0x123c>)
   18784:	f7f7 ffc8 	bl	10718 <mem_acquire>
		if (!tx) {
   18788:	4603      	mov	r3, r0
   1878a:	2800      	cmp	r0, #0
   1878c:	f000 8241 	beq.w	18c12 <ull_conn_llcp+0x1402>
	conn->lll.enc_tx = 1;
   18790:	f894 207e 	ldrb.w	r2, [r4, #126]	; 0x7e
   18794:	f042 0210 	orr.w	r2, r2, #16
   18798:	f884 207e 	strb.w	r2, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   1879c:	2201      	movs	r2, #1
   1879e:	7142      	strb	r2, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   187a0:	7902      	ldrb	r2, [r0, #4]
   187a2:	f042 0203 	orr.w	r2, r2, #3
   187a6:	7102      	strb	r2, [r0, #4]
	    conn->tx_head &&
   187a8:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   187ac:	2106      	movs	r1, #6
   187ae:	71c1      	strb	r1, [r0, #7]
	    conn->tx_head &&
   187b0:	4610      	mov	r0, r2
	if (
   187b2:	b302      	cbz	r2, 187f6 <ull_conn_llcp+0xfe6>
	    !conn->llcp_enc.pause_tx &&
   187b4:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   187b8:	078f      	lsls	r7, r1, #30
   187ba:	d41c      	bmi.n	187f6 <ull_conn_llcp+0xfe6>
	    !conn->llcp_phy.pause_tx &&
   187bc:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   187c0:	07c9      	lsls	r1, r1, #31
   187c2:	d418      	bmi.n	187f6 <ull_conn_llcp+0xfe6>
		if (conn->tx_head == conn->tx_data) {
   187c4:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   187c8:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   187cc:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   187ce:	bf04      	itt	eq
   187d0:	6811      	ldreq	r1, [r2, #0]
   187d2:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   187d6:	f1bc 0f00 	cmp.w	ip, #0
   187da:	f000 8179 	beq.w	18ad0 <ull_conn_llcp+0x12c0>
	tx->next = conn->tx_ctrl_last->next;
   187de:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   187e2:	6808      	ldr	r0, [r1, #0]
   187e4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   187e6:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   187e8:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
	if (!tx->next) {
   187ec:	6819      	ldr	r1, [r3, #0]
   187ee:	b331      	cbz	r1, 1883e <ull_conn_llcp+0x102e>
	    conn->tx_head &&
   187f0:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   187f2:	46e6      	mov	lr, ip
   187f4:	e598      	b.n	18328 <ull_conn_llcp+0xb18>
		if (!conn->tx_ctrl) {
   187f6:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   187fa:	46e6      	mov	lr, ip
   187fc:	f1bc 0f00 	cmp.w	ip, #0
   18800:	d025      	beq.n	1884e <ull_conn_llcp+0x103e>
	tx->next = conn->tx_ctrl_last->next;
   18802:	f8d4 11c4 	ldr.w	r1, [r4, #452]	; 0x1c4
   18806:	680f      	ldr	r7, [r1, #0]
   18808:	601f      	str	r7, [r3, #0]
	conn->tx_ctrl_last->next = tx;
   1880a:	600b      	str	r3, [r1, #0]
	if (!tx->next) {
   1880c:	681f      	ldr	r7, [r3, #0]
	conn->tx_ctrl_last = tx;
   1880e:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   18812:	4619      	mov	r1, r3
	if (!tx->next) {
   18814:	b19f      	cbz	r7, 1883e <ull_conn_llcp+0x102e>
	if (
   18816:	2a00      	cmp	r2, #0
   18818:	f43f adc9 	beq.w	183ae <ull_conn_llcp+0xb9e>
	    !conn->llcp_enc.pause_tx &&
   1881c:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18820:	079b      	lsls	r3, r3, #30
   18822:	f57f ad85 	bpl.w	18330 <ull_conn_llcp+0xb20>
   18826:	e5c2      	b.n	183ae <ull_conn_llcp+0xb9e>
		if (!conn->tx_ctrl) {
   18828:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   1882c:	2a00      	cmp	r2, #0
   1882e:	f47f ae34 	bne.w	1849a <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   18832:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18834:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18838:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   1883c:	e634      	b.n	184a8 <ull_conn_llcp+0xc98>
		conn->tx_data_last = tx;
   1883e:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
	    conn->tx_head &&
   18842:	4610      	mov	r0, r2
		if (!conn->tx_ctrl) {
   18844:	46e6      	mov	lr, ip
   18846:	e56d      	b.n	18324 <ull_conn_llcp+0xb14>
		conn->tx_data_last = tx;
   18848:	f8c4 91cc 	str.w	r9, [r4, #460]	; 0x1cc
   1884c:	e6db      	b.n	18606 <ull_conn_llcp+0xdf6>
			tx->next = conn->tx_head;
   1884e:	601a      	str	r2, [r3, #0]
			conn->tx_head = tx;
   18850:	469c      	mov	ip, r3
				conn->tx_ctrl = tx;
   18852:	e9c4 336f 	strd	r3, r3, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18856:	f8c4 31c4 	str.w	r3, [r4, #452]	; 0x1c4
   1885a:	461a      	mov	r2, r3
   1885c:	e7c6      	b.n	187ec <ull_conn_llcp+0xfdc>
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   1885e:	487b      	ldr	r0, [pc, #492]	; (18a4c <ull_conn_llcp+0x123c>)
   18860:	f7f7 ff5a 	bl	10718 <mem_acquire>
		if (!tx) {
   18864:	4601      	mov	r1, r0
   18866:	2800      	cmp	r0, #0
   18868:	f000 81e0 	beq.w	18c2c <ull_conn_llcp+0x141c>
	conn->lll.enc_tx = 1;
   1886c:	f894 307e 	ldrb.w	r3, [r4, #126]	; 0x7e
   18870:	f043 0310 	orr.w	r3, r3, #16
   18874:	f884 307e 	strb.w	r3, [r4, #126]	; 0x7e
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, enc_rsp);
   18878:	2301      	movs	r3, #1
   1887a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1887c:	7903      	ldrb	r3, [r0, #4]
	    conn->tx_head &&
   1887e:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   18882:	f043 0303 	orr.w	r3, r3, #3
   18886:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_START_ENC_RSP;
   18888:	2306      	movs	r3, #6
   1888a:	71c3      	strb	r3, [r0, #7]
	if (
   1888c:	b312      	cbz	r2, 188d4 <ull_conn_llcp+0x10c4>
	    !conn->llcp_enc.pause_tx &&
   1888e:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18892:	0798      	lsls	r0, r3, #30
   18894:	d41e      	bmi.n	188d4 <ull_conn_llcp+0x10c4>
	    !conn->llcp_phy.pause_tx &&
   18896:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   1889a:	07db      	lsls	r3, r3, #31
   1889c:	d41a      	bmi.n	188d4 <ull_conn_llcp+0x10c4>
		if (conn->tx_head == conn->tx_data) {
   1889e:	f8d4 31c8 	ldr.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   188a2:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
		if (conn->tx_head == conn->tx_data) {
   188a6:	429a      	cmp	r2, r3
			conn->tx_data = conn->tx_data->next;
   188a8:	bf04      	itt	eq
   188aa:	681b      	ldreq	r3, [r3, #0]
   188ac:	f8c4 31c8 	streq.w	r3, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   188b0:	f1bc 0f00 	cmp.w	ip, #0
   188b4:	f000 8184 	beq.w	18bc0 <ull_conn_llcp+0x13b0>
	tx->next = conn->tx_ctrl_last->next;
   188b8:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   188bc:	6803      	ldr	r3, [r0, #0]
   188be:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   188c0:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last = tx;
   188c2:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   188c6:	680b      	ldr	r3, [r1, #0]
   188c8:	2b00      	cmp	r3, #0
   188ca:	f47f ae79 	bne.w	185c0 <ull_conn_llcp+0xdb0>
		conn->tx_data_last = tx;
   188ce:	f8c4 11cc 	str.w	r1, [r4, #460]	; 0x1cc
   188d2:	e672      	b.n	185ba <ull_conn_llcp+0xdaa>
		if (!conn->tx_ctrl) {
   188d4:	f8d4 c1c0 	ldr.w	ip, [r4, #448]	; 0x1c0
   188d8:	f1bc 0f00 	cmp.w	ip, #0
   188dc:	d029      	beq.n	18932 <ull_conn_llcp+0x1122>
	tx->next = conn->tx_ctrl_last->next;
   188de:	f8d4 01c4 	ldr.w	r0, [r4, #452]	; 0x1c4
   188e2:	6803      	ldr	r3, [r0, #0]
   188e4:	600b      	str	r3, [r1, #0]
	conn->tx_ctrl_last->next = tx;
   188e6:	6001      	str	r1, [r0, #0]
	if (!tx->next) {
   188e8:	680b      	ldr	r3, [r1, #0]
	conn->tx_ctrl_last = tx;
   188ea:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
	if (!tx->next) {
   188ee:	2b00      	cmp	r3, #0
   188f0:	f47f ae63 	bne.w	185ba <ull_conn_llcp+0xdaa>
   188f4:	e7eb      	b.n	188ce <ull_conn_llcp+0x10be>
			tx->next = conn->tx_head->next;
   188f6:	681a      	ldr	r2, [r3, #0]
   188f8:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   188fc:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18900:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   18904:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   18908:	f7ff b9fe 	b.w	17d08 <ull_conn_llcp+0x4f8>
			tx->next = conn->tx_head->next;
   1890c:	681a      	ldr	r2, [r3, #0]
   1890e:	602a      	str	r2, [r5, #0]
			conn->tx_head->next = tx;
   18910:	601d      	str	r5, [r3, #0]
	if (!tx->next) {
   18912:	682b      	ldr	r3, [r5, #0]
				conn->tx_ctrl_last = tx;
   18914:	e9c4 5570 	strd	r5, r5, [r4, #448]	; 0x1c0
   18918:	f7ff baaf 	b.w	17e7a <ull_conn_llcp+0x66a>
			tx->next = conn->tx_head->next;
   1891c:	681a      	ldr	r2, [r3, #0]
   1891e:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   18922:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18926:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   1892a:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   1892e:	f7ff b8fc 	b.w	17b2a <ull_conn_llcp+0x31a>
			tx->next = conn->tx_head;
   18932:	600a      	str	r2, [r1, #0]
			conn->tx_head = tx;
   18934:	468c      	mov	ip, r1
				conn->tx_ctrl = tx;
   18936:	e9c4 116f 	strd	r1, r1, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   1893a:	f8c4 11c4 	str.w	r1, [r4, #452]	; 0x1c4
   1893e:	460a      	mov	r2, r1
   18940:	e7c1      	b.n	188c6 <ull_conn_llcp+0x10b6>
		if (!conn->tx_ctrl) {
   18942:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18946:	2900      	cmp	r1, #0
   18948:	f47f ac05 	bne.w	18156 <ull_conn_llcp+0x946>
			tx->next = conn->tx_head;
   1894c:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   1894e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18952:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18956:	e405      	b.n	18164 <ull_conn_llcp+0x954>
			tx->next = conn->tx_head->next;
   18958:	681a      	ldr	r2, [r3, #0]
   1895a:	f8c8 2000 	str.w	r2, [r8]
			conn->tx_head->next = tx;
   1895e:	f8c3 8000 	str.w	r8, [r3]
	if (!tx->next) {
   18962:	f8d8 3000 	ldr.w	r3, [r8]
				conn->tx_ctrl_last = tx;
   18966:	e9c4 8870 	strd	r8, r8, [r4, #448]	; 0x1c0
   1896a:	e47c      	b.n	18266 <ull_conn_llcp+0xa56>
			tx->next = conn->tx_head->next;
   1896c:	6803      	ldr	r3, [r0, #0]
   1896e:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   18972:	f8c0 9000 	str.w	r9, [r0]
	if (!tx->next) {
   18976:	f8d9 0000 	ldr.w	r0, [r9]
				conn->tx_ctrl_last = tx;
   1897a:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   1897e:	e4f1      	b.n	18364 <ull_conn_llcp+0xb54>
			tx->next = conn->tx_head->next;
   18980:	681a      	ldr	r2, [r3, #0]
   18982:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   18986:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   1898a:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   1898e:	f7ff ba1a 	b.w	17dc6 <ull_conn_llcp+0x5b6>
		if (!conn->tx_ctrl) {
   18992:	f8d4 31c0 	ldr.w	r3, [r4, #448]	; 0x1c0
   18996:	2b00      	cmp	r3, #0
   18998:	f47f ad7f 	bne.w	1849a <ull_conn_llcp+0xc8a>
			tx->next = conn->tx_head;
   1899c:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   1899e:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   189a2:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   189a6:	e57f      	b.n	184a8 <ull_conn_llcp+0xc98>
		if (conn->llcp_phy.tx & PHY_2M) {
   189a8:	071f      	lsls	r7, r3, #28
		conn->llcp_phy.ack = conn->llcp_phy.req;
   189aa:	f884 11b5 	strb.w	r1, [r4, #437]	; 0x1b5
		if (conn->llcp_phy.tx & PHY_2M) {
   189ae:	f3c3 0282 	ubfx	r2, r3, #2, #3
   189b2:	f140 8118 	bpl.w	18be6 <ull_conn_llcp+0x13d6>
			conn->llcp_phy.tx = PHY_2M;
   189b6:	2202      	movs	r2, #2
   189b8:	f362 0384 	bfi	r3, r2, #2, #3
   189bc:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		if (conn->llcp_phy.rx & PHY_2M) {
   189c0:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
   189c4:	065f      	lsls	r7, r3, #25
   189c6:	ea4f 1253 	mov.w	r2, r3, lsr #5
   189ca:	f140 8104 	bpl.w	18bd6 <ull_conn_llcp+0x13c6>
			conn->llcp_phy.rx = PHY_2M;
   189ce:	2202      	movs	r2, #2
   189d0:	f362 1347 	bfi	r3, r2, #5, #3
   189d4:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
		conn->llcp_ack -= 2U;
   189d8:	1e83      	subs	r3, r0, #2
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   189da:	f894 21b6 	ldrb.w	r2, [r4, #438]	; 0x1b6
   189de:	f894 7064 	ldrb.w	r7, [r4, #100]	; 0x64
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   189e2:	f894 0065 	ldrb.w	r0, [r4, #101]	; 0x65
		conn->llcp_ack -= 2U;
   189e6:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   189ea:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
		if (conn->llcp_phy.tx != conn->lll.phy_tx) {
   189ee:	f3c2 0182 	ubfx	r1, r2, #2, #3
   189f2:	f007 0707 	and.w	r7, r7, #7
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   189f6:	f000 0007 	and.w	r0, r0, #7
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   189fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
			conn->llcp.phy_upd_ind.tx = 0U;
   189fe:	428f      	cmp	r7, r1
   18a00:	bf08      	it	eq
   18a02:	2100      	moveq	r1, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   18a04:	005b      	lsls	r3, r3, #1
			conn->llcp.phy_upd_ind.rx = 0U;
   18a06:	ebb0 1f52 	cmp.w	r0, r2, lsr #5
		conn->llcp.phy_upd_ind.initiate = 1U;
   18a0a:	f043 0301 	orr.w	r3, r3, #1
		if (conn->llcp_phy.rx != conn->lll.phy_rx) {
   18a0e:	ea4f 1252 	mov.w	r2, r2, lsr #5
			conn->llcp.phy_upd_ind.rx = 0U;
   18a12:	bf08      	it	eq
   18a14:	2200      	moveq	r2, #0
		conn->llcp.phy_upd_ind.initiate = 1U;
   18a16:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
   18a1a:	ea43 0381 	orr.w	r3, r3, r1, lsl #2
		conn->llcp_type = LLCP_PHY_UPD;
   18a1e:	2206      	movs	r2, #6
		conn->llcp.phy_upd_ind.initiate = 1U;
   18a20:	f884 30ec 	strb.w	r3, [r4, #236]	; 0xec
		conn->llcp_type = LLCP_PHY_UPD;
   18a24:	f884 20ea 	strb.w	r2, [r4, #234]	; 0xea
		} else if (conn->llcp_length.ack != conn->llcp_length.req) {
   18a28:	f7fe bf59 	b.w	178de <ull_conn_llcp+0xce>
			tx->next = conn->tx_head->next;
   18a2c:	681a      	ldr	r2, [r3, #0]
   18a2e:	f8c9 2000 	str.w	r2, [r9]
			conn->tx_head->next = tx;
   18a32:	f8c3 9000 	str.w	r9, [r3]
				conn->tx_ctrl_last = tx;
   18a36:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   18a3a:	e5a4      	b.n	18586 <ull_conn_llcp+0xd76>
			tx->next = conn->tx_head->next;
   18a3c:	6813      	ldr	r3, [r2, #0]
   18a3e:	f8c9 3000 	str.w	r3, [r9]
			conn->tx_head->next = tx;
   18a42:	f8c2 9000 	str.w	r9, [r2]
				conn->tx_ctrl_last = tx;
   18a46:	e9c4 9970 	strd	r9, r9, [r4, #448]	; 0x1c0
   18a4a:	e5d7      	b.n	185fc <ull_conn_llcp+0xdec>
   18a4c:	2000e484 	.word	0x2000e484
		tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18a50:	4885      	ldr	r0, [pc, #532]	; (18c68 <ull_conn_llcp+0x1458>)
   18a52:	f7f7 fe61 	bl	10718 <mem_acquire>
		if (!tx) {
   18a56:	2800      	cmp	r0, #0
   18a58:	f43f aa4e 	beq.w	17ef8 <ull_conn_llcp+0x6e8>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   18a5c:	7903      	ldrb	r3, [r0, #4]
   18a5e:	f043 0303 	orr.w	r3, r3, #3
   18a62:	7103      	strb	r3, [r0, #4]
		pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND;
   18a64:	2311      	movs	r3, #17
   18a66:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, reject_ext_ind) +
   18a68:	2303      	movs	r3, #3
   18a6a:	7143      	strb	r3, [r0, #5]
		rej->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   18a6c:	230f      	movs	r3, #15
   18a6e:	7203      	strb	r3, [r0, #8]
		rej->error_code = conn->llcp_conn_param.status;
   18a70:	f894 317f 	ldrb.w	r3, [r4, #383]	; 0x17f
   18a74:	7243      	strb	r3, [r0, #9]
	    conn->tx_head &&
   18a76:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
	if (
   18a7a:	2b00      	cmp	r3, #0
   18a7c:	f000 8095 	beq.w	18baa <ull_conn_llcp+0x139a>
	    !conn->llcp_enc.pause_tx &&
   18a80:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18a84:	0789      	lsls	r1, r1, #30
   18a86:	f100 8090 	bmi.w	18baa <ull_conn_llcp+0x139a>
	    !conn->llcp_phy.pause_tx &&
   18a8a:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   18a8e:	07ca      	lsls	r2, r1, #31
   18a90:	f100 808b 	bmi.w	18baa <ull_conn_llcp+0x139a>
		if (conn->tx_head == conn->tx_data) {
   18a94:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18a98:	428b      	cmp	r3, r1
			conn->tx_data = conn->tx_data->next;
   18a9a:	bf04      	itt	eq
   18a9c:	6819      	ldreq	r1, [r3, #0]
   18a9e:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18aa2:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18aa6:	2900      	cmp	r1, #0
   18aa8:	f000 80a7 	beq.w	18bfa <ull_conn_llcp+0x13ea>
	tx->next = conn->tx_ctrl_last->next;
   18aac:	f8d4 31c4 	ldr.w	r3, [r4, #452]	; 0x1c4
   18ab0:	6819      	ldr	r1, [r3, #0]
   18ab2:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18ab4:	6018      	str	r0, [r3, #0]
	conn->tx_ctrl_last = tx;
   18ab6:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18aba:	6803      	ldr	r3, [r0, #0]
   18abc:	2b00      	cmp	r3, #0
   18abe:	d067      	beq.n	18b90 <ull_conn_llcp+0x1380>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   18ac0:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   18ac4:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
	conn_upd_curr = NULL;
   18ac8:	2300      	movs	r3, #0
   18aca:	603b      	str	r3, [r7, #0]
   18acc:	f7ff ba14 	b.w	17ef8 <ull_conn_llcp+0x6e8>
			tx->next = conn->tx_head->next;
   18ad0:	6811      	ldr	r1, [r2, #0]
   18ad2:	6019      	str	r1, [r3, #0]
			conn->tx_head->next = tx;
   18ad4:	469c      	mov	ip, r3
   18ad6:	6013      	str	r3, [r2, #0]
				conn->tx_ctrl_last = tx;
   18ad8:	e9c4 3370 	strd	r3, r3, [r4, #448]	; 0x1c0
   18adc:	e686      	b.n	187ec <ull_conn_llcp+0xfdc>
	tx = mem_acquire(&mem_conn_tx_ctrl.free);
   18ade:	4862      	ldr	r0, [pc, #392]	; (18c68 <ull_conn_llcp+0x1458>)
   18ae0:	f7f7 fe1a 	bl	10718 <mem_acquire>
	if (!tx) {
   18ae4:	2800      	cmp	r0, #0
   18ae6:	f43f aa07 	beq.w	17ef8 <ull_conn_llcp+0x6e8>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   18aea:	7902      	ldrb	r2, [r0, #4]
   18aec:	f042 0203 	orr.w	r2, r2, #3
   18af0:	7102      	strb	r2, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, conn_param_rsp) +
   18af2:	2218      	movs	r2, #24
   18af4:	7142      	strb	r2, [r0, #5]
	rsp->interval_min =
   18af6:	f8b4 2180 	ldrh.w	r2, [r4, #384]	; 0x180
   18afa:	8102      	strh	r2, [r0, #8]
	rsp->interval_max =
   18afc:	f8b4 2182 	ldrh.w	r2, [r4, #386]	; 0x182
   18b00:	8142      	strh	r2, [r0, #10]
	rsp->latency =
   18b02:	f8b4 2184 	ldrh.w	r2, [r4, #388]	; 0x184
   18b06:	8182      	strh	r2, [r0, #12]
	rsp->timeout =
   18b08:	f8b4 2186 	ldrh.w	r2, [r4, #390]	; 0x186
   18b0c:	81c2      	strh	r2, [r0, #14]
	pdu->llctrl.opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_RSP;
   18b0e:	2210      	movs	r2, #16
   18b10:	71c2      	strb	r2, [r0, #7]
	rsp->preferred_periodicity =
   18b12:	f894 2188 	ldrb.w	r2, [r4, #392]	; 0x188
   18b16:	7402      	strb	r2, [r0, #16]
	rsp->reference_conn_event_count =
   18b18:	f8b4 118a 	ldrh.w	r1, [r4, #394]	; 0x18a
	    conn->tx_head &&
   18b1c:	f8d4 21bc 	ldr.w	r2, [r4, #444]	; 0x1bc
	rsp->reference_conn_event_count =
   18b20:	f8a0 1011 	strh.w	r1, [r0, #17]
	rsp->offset0 = sys_cpu_to_le16(conn->llcp_conn_param.offset0);
   18b24:	f8b4 118c 	ldrh.w	r1, [r4, #396]	; 0x18c
   18b28:	f8a0 1013 	strh.w	r1, [r0, #19]
	rsp->offset1 = sys_cpu_to_le16(conn->llcp_conn_param.offset1);
   18b2c:	f8b4 118e 	ldrh.w	r1, [r4, #398]	; 0x18e
   18b30:	f8a0 1015 	strh.w	r1, [r0, #21]
	rsp->offset2 = sys_cpu_to_le16(conn->llcp_conn_param.offset2);
   18b34:	f8b4 1190 	ldrh.w	r1, [r4, #400]	; 0x190
   18b38:	f8a0 1017 	strh.w	r1, [r0, #23]
	rsp->offset3 = sys_cpu_to_le16(conn->llcp_conn_param.offset3);
   18b3c:	f8b4 1192 	ldrh.w	r1, [r4, #402]	; 0x192
   18b40:	f8a0 1019 	strh.w	r1, [r0, #25]
	rsp->offset4 = sys_cpu_to_le16(conn->llcp_conn_param.offset4);
   18b44:	f8b4 1194 	ldrh.w	r1, [r4, #404]	; 0x194
   18b48:	f8a0 101b 	strh.w	r1, [r0, #27]
	rsp->offset5 = sys_cpu_to_le16(conn->llcp_conn_param.offset5);
   18b4c:	f8b4 1196 	ldrh.w	r1, [r4, #406]	; 0x196
   18b50:	f8a0 101d 	strh.w	r1, [r0, #29]
	if (
   18b54:	b1fa      	cbz	r2, 18b96 <ull_conn_llcp+0x1386>
	    !conn->llcp_enc.pause_tx &&
   18b56:	f894 115e 	ldrb.w	r1, [r4, #350]	; 0x15e
	    conn->tx_head &&
   18b5a:	0789      	lsls	r1, r1, #30
   18b5c:	d41b      	bmi.n	18b96 <ull_conn_llcp+0x1386>
	    !conn->llcp_phy.pause_tx &&
   18b5e:	f894 11b7 	ldrb.w	r1, [r4, #439]	; 0x1b7
   18b62:	07cb      	lsls	r3, r1, #31
   18b64:	d417      	bmi.n	18b96 <ull_conn_llcp+0x1386>
		if (conn->tx_head == conn->tx_data) {
   18b66:	f8d4 11c8 	ldr.w	r1, [r4, #456]	; 0x1c8
   18b6a:	428a      	cmp	r2, r1
			conn->tx_data = conn->tx_data->next;
   18b6c:	bf04      	itt	eq
   18b6e:	6811      	ldreq	r1, [r2, #0]
   18b70:	f8c4 11c8 	streq.w	r1, [r4, #456]	; 0x1c8
		if (!conn->tx_ctrl) {
   18b74:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18b78:	2900      	cmp	r1, #0
   18b7a:	d044      	beq.n	18c06 <ull_conn_llcp+0x13f6>
	tx->next = conn->tx_ctrl_last->next;
   18b7c:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
   18b80:	6811      	ldr	r1, [r2, #0]
   18b82:	6001      	str	r1, [r0, #0]
	conn->tx_ctrl_last->next = tx;
   18b84:	6010      	str	r0, [r2, #0]
	conn->tx_ctrl_last = tx;
   18b86:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
	if (!tx->next) {
   18b8a:	6802      	ldr	r2, [r0, #0]
   18b8c:	2a00      	cmp	r2, #0
   18b8e:	d197      	bne.n	18ac0 <ull_conn_llcp+0x12b0>
		conn->tx_data_last = tx;
   18b90:	f8c4 01cc 	str.w	r0, [r4, #460]	; 0x1cc
   18b94:	e794      	b.n	18ac0 <ull_conn_llcp+0x12b0>
		if (!conn->tx_ctrl) {
   18b96:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18b9a:	2900      	cmp	r1, #0
   18b9c:	d1ee      	bne.n	18b7c <ull_conn_llcp+0x136c>
			tx->next = conn->tx_head;
   18b9e:	6002      	str	r2, [r0, #0]
				conn->tx_ctrl = tx;
   18ba0:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18ba4:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18ba8:	e7ef      	b.n	18b8a <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   18baa:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   18bae:	2900      	cmp	r1, #0
   18bb0:	f47f af7c 	bne.w	18aac <ull_conn_llcp+0x129c>
			tx->next = conn->tx_head;
   18bb4:	6003      	str	r3, [r0, #0]
				conn->tx_ctrl = tx;
   18bb6:	e9c4 006f 	strd	r0, r0, [r4, #444]	; 0x1bc
				conn->tx_ctrl_last = tx;
   18bba:	f8c4 01c4 	str.w	r0, [r4, #452]	; 0x1c4
   18bbe:	e77c      	b.n	18aba <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18bc0:	6813      	ldr	r3, [r2, #0]
   18bc2:	600b      	str	r3, [r1, #0]
			conn->tx_head->next = tx;
   18bc4:	468c      	mov	ip, r1
   18bc6:	6011      	str	r1, [r2, #0]
				conn->tx_ctrl_last = tx;
   18bc8:	e9c4 1170 	strd	r1, r1, [r4, #448]	; 0x1c0
   18bcc:	e67b      	b.n	188c6 <ull_conn_llcp+0x10b6>
				conn->llcp_conn_param.interval_max;
   18bce:	f8b4 3182 	ldrh.w	r3, [r4, #386]	; 0x182
   18bd2:	f7ff ba44 	b.w	1805e <ull_conn_llcp+0x84e>
		} else if (conn->llcp_phy.rx & PHY_1M) {
   18bd6:	07d1      	lsls	r1, r2, #31
   18bd8:	d51f      	bpl.n	18c1a <ull_conn_llcp+0x140a>
			conn->llcp_phy.rx = PHY_1M;
   18bda:	2201      	movs	r2, #1
   18bdc:	f362 1347 	bfi	r3, r2, #5, #3
   18be0:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18be4:	e6f8      	b.n	189d8 <ull_conn_llcp+0x11c8>
		} else if (conn->llcp_phy.tx & PHY_1M) {
   18be6:	07d1      	lsls	r1, r2, #31
			conn->llcp_phy.tx = PHY_1M;
   18be8:	f894 31b6 	ldrb.w	r3, [r4, #438]	; 0x1b6
		} else if (conn->llcp_phy.tx & PHY_1M) {
   18bec:	d52e      	bpl.n	18c4c <ull_conn_llcp+0x143c>
			conn->llcp_phy.tx = PHY_1M;
   18bee:	2201      	movs	r2, #1
   18bf0:	f362 0384 	bfi	r3, r2, #2, #3
   18bf4:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18bf8:	e6e2      	b.n	189c0 <ull_conn_llcp+0x11b0>
			tx->next = conn->tx_head->next;
   18bfa:	6819      	ldr	r1, [r3, #0]
   18bfc:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18bfe:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18c00:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18c04:	e759      	b.n	18aba <ull_conn_llcp+0x12aa>
			tx->next = conn->tx_head->next;
   18c06:	6811      	ldr	r1, [r2, #0]
   18c08:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18c0a:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   18c0c:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18c10:	e7bb      	b.n	18b8a <ull_conn_llcp+0x137a>
		if (!conn->tx_ctrl) {
   18c12:	e9d4 0e6f 	ldrd	r0, lr, [r4, #444]	; 0x1bc
   18c16:	f7ff bb85 	b.w	18324 <ull_conn_llcp+0xb14>
		} else if (conn->llcp_phy.rx & PHY_CODED) {
   18c1a:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.rx = PHY_CODED;
   18c1e:	bf18      	it	ne
   18c20:	2204      	movne	r2, #4
			conn->llcp_phy.rx = 0U;
   18c22:	f362 1347 	bfi	r3, r2, #5, #3
   18c26:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18c2a:	e6d5      	b.n	189d8 <ull_conn_llcp+0x11c8>
   18c2c:	e9d4 2c6f 	ldrd	r2, ip, [r4, #444]	; 0x1bc
   18c30:	e4c3      	b.n	185ba <ull_conn_llcp+0xdaa>
			tx->next = conn->tx_head->next;
   18c32:	6813      	ldr	r3, [r2, #0]
   18c34:	6003      	str	r3, [r0, #0]
			conn->tx_head->next = tx;
   18c36:	6010      	str	r0, [r2, #0]
				conn->tx_ctrl_last = tx;
   18c38:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18c3c:	e434      	b.n	184a8 <ull_conn_llcp+0xc98>
			tx->next = conn->tx_head->next;
   18c3e:	6819      	ldr	r1, [r3, #0]
   18c40:	6001      	str	r1, [r0, #0]
			conn->tx_head->next = tx;
   18c42:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last = tx;
   18c44:	e9c4 0070 	strd	r0, r0, [r4, #448]	; 0x1c0
   18c48:	f7ff ba8c 	b.w	18164 <ull_conn_llcp+0x954>
		} else if (conn->llcp_phy.tx & PHY_CODED) {
   18c4c:	f012 0204 	ands.w	r2, r2, #4
			conn->llcp_phy.tx = PHY_CODED;
   18c50:	bf18      	it	ne
   18c52:	2204      	movne	r2, #4
			conn->llcp_phy.tx = 0U;
   18c54:	f362 0384 	bfi	r3, r2, #2, #3
   18c58:	f884 31b6 	strb.w	r3, [r4, #438]	; 0x1b6
   18c5c:	e6b0      	b.n	189c0 <ull_conn_llcp+0x11b0>
		LL_ASSERT(0);
   18c5e:	4a03      	ldr	r2, [pc, #12]	; (18c6c <ull_conn_llcp+0x145c>)
   18c60:	4903      	ldr	r1, [pc, #12]	; (18c70 <ull_conn_llcp+0x1460>)
   18c62:	f640 531f 	movw	r3, #3359	; 0xd1f
   18c66:	e4f4      	b.n	18652 <ull_conn_llcp+0xe42>
   18c68:	2000e484 	.word	0x2000e484
   18c6c:	000288c0 	.word	0x000288c0
   18c70:	0002849c 	.word	0x0002849c

00018c74 <ull_conn_tx_demux>:
{
   18c74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18c78:	4f24      	ldr	r7, [pc, #144]	; (18d0c <ull_conn_tx_demux+0x98>)
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c7a:	4e25      	ldr	r6, [pc, #148]	; (18d10 <ull_conn_tx_demux+0x9c>)
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18c7c:	78fa      	ldrb	r2, [r7, #3]
{
   18c7e:	4604      	mov	r4, r0
	return (void *)(fifo + first * size);
   18c80:	1d3d      	adds	r5, r7, #4
   18c82:	e021      	b.n	18cc8 <ull_conn_tx_demux+0x54>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   18c84:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   18c88:	4630      	mov	r0, r6
   18c8a:	f7f7 fd77 	bl	1077c <mem_get>
	if (conn->lll.handle != handle) {
   18c8e:	8d82      	ldrh	r2, [r0, #44]	; 0x2c
   18c90:	bb32      	cbnz	r2, 18ce0 <ull_conn_tx_demux+0x6c>
			struct node_tx *tx = lll_tx->node;
   18c92:	f8d8 3004 	ldr.w	r3, [r8, #4]
			if (!conn->tx_data) {
   18c96:	f8d0 11c8 	ldr.w	r1, [r0, #456]	; 0x1c8
			tx->next = NULL;
   18c9a:	601a      	str	r2, [r3, #0]
			if (!conn->tx_data) {
   18c9c:	b359      	cbz	r1, 18cf6 <ull_conn_tx_demux+0x82>
			if (conn->tx_data_last) {
   18c9e:	f8d0 21cc 	ldr.w	r2, [r0, #460]	; 0x1cc
   18ca2:	b102      	cbz	r2, 18ca6 <ull_conn_tx_demux+0x32>
				conn->tx_data_last->next = tx;
   18ca4:	6013      	str	r3, [r2, #0]
			conn->tx_data_last = tx;
   18ca6:	f8c0 31cc 	str.w	r3, [r0, #460]	; 0x1cc
		MFIFO_DEQUEUE(conn_tx);
   18caa:	78fa      	ldrb	r2, [r7, #3]
	uint8_t _first = *first; /* Copy read-index */
   18cac:	78bb      	ldrb	r3, [r7, #2]
   18cae:	7879      	ldrb	r1, [r7, #1]
	if (_first == last) {
   18cb0:	429a      	cmp	r2, r3
   18cb2:	d005      	beq.n	18cc0 <ull_conn_tx_demux+0x4c>
	_first += 1U;
   18cb4:	3301      	adds	r3, #1
   18cb6:	b2db      	uxtb	r3, r3
		_first = 0U;
   18cb8:	4299      	cmp	r1, r3
   18cba:	bf08      	it	eq
   18cbc:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   18cbe:	70bb      	strb	r3, [r7, #2]
	} while (--count);
   18cc0:	3c01      	subs	r4, #1
   18cc2:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   18cc6:	d01f      	beq.n	18d08 <ull_conn_tx_demux+0x94>
		lll_tx = MFIFO_DEQUEUE_GET(conn_tx);
   18cc8:	78bb      	ldrb	r3, [r7, #2]
   18cca:	7839      	ldrb	r1, [r7, #0]
	if (first == last) {
   18ccc:	4293      	cmp	r3, r2
   18cce:	d01b      	beq.n	18d08 <ull_conn_tx_demux+0x94>
	return (void *)(fifo + first * size);
   18cd0:	fb13 f301 	smulbb	r3, r3, r1
		if (!lll_tx) {
   18cd4:	eb15 0803 	adds.w	r8, r5, r3
   18cd8:	d016      	beq.n	18d08 <ull_conn_tx_demux+0x94>
	if (handle >= CONFIG_BT_MAX_CONN) {
   18cda:	5aea      	ldrh	r2, [r5, r3]
   18cdc:	2a00      	cmp	r2, #0
   18cde:	d0d1      	beq.n	18c84 <ull_conn_tx_demux+0x10>
			struct node_tx *tx = lll_tx->node;
   18ce0:	f8d8 1004 	ldr.w	r1, [r8, #4]
			p->ll_id = PDU_DATA_LLID_RESV;
   18ce4:	790b      	ldrb	r3, [r1, #4]
   18ce6:	f36f 0301 	bfc	r3, #0, #2
			ll_tx_ack_put(0xFFFF, tx);
   18cea:	f64f 70ff 	movw	r0, #65535	; 0xffff
			p->ll_id = PDU_DATA_LLID_RESV;
   18cee:	710b      	strb	r3, [r1, #4]
			ll_tx_ack_put(0xFFFF, tx);
   18cf0:	f7fb fb60 	bl	143b4 <ll_tx_ack_put>
   18cf4:	e7d9      	b.n	18caa <ull_conn_tx_demux+0x36>
				if (!conn->tx_head) {
   18cf6:	f8d0 21bc 	ldr.w	r2, [r0, #444]	; 0x1bc
				conn->tx_data = tx;
   18cfa:	f8c0 31c8 	str.w	r3, [r0, #456]	; 0x1c8
				if (!conn->tx_head) {
   18cfe:	2a00      	cmp	r2, #0
   18d00:	d1cd      	bne.n	18c9e <ull_conn_tx_demux+0x2a>
					conn->tx_head = tx;
   18d02:	f8c0 31bc 	str.w	r3, [r0, #444]	; 0x1bc
			if (conn->tx_data_last) {
   18d06:	e7ce      	b.n	18ca6 <ull_conn_tx_demux+0x32>
}
   18d08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   18d0c:	200005d8 	.word	0x200005d8
   18d10:	2000e22c 	.word	0x2000e22c

00018d14 <conn_cleanup>:
	if (conn == conn_upd_curr) {
   18d14:	4b3b      	ldr	r3, [pc, #236]	; (18e04 <conn_cleanup+0xf0>)
   18d16:	681a      	ldr	r2, [r3, #0]
{
   18d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (conn == conn_upd_curr) {
   18d1c:	4282      	cmp	r2, r0
	conn_upd_curr = NULL;
   18d1e:	bf04      	itt	eq
   18d20:	2200      	moveq	r2, #0
   18d22:	601a      	streq	r2, [r3, #0]
	rx = conn->llcp_rx;
   18d24:	f8d0 410c 	ldr.w	r4, [r0, #268]	; 0x10c
	rx->hdr.handle = conn->lll.handle;
   18d28:	8d83      	ldrh	r3, [r0, #44]	; 0x2c
   18d2a:	f8a0 3142 	strh.w	r3, [r0, #322]	; 0x142
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18d2e:	2314      	movs	r3, #20
{
   18d30:	b083      	sub	sp, #12
   18d32:	4606      	mov	r6, r0
	struct lll_conn *lll = &conn->lll;
   18d34:	f100 0b1c 	add.w	fp, r0, #28
	rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   18d38:	f880 3140 	strb.w	r3, [r0, #320]	; 0x140
	*((uint8_t *)rx->pdu) = reason;
   18d3c:	f880 1158 	strb.w	r1, [r0, #344]	; 0x158
	while (rx) {
   18d40:	b144      	cbz	r4, 18d54 <conn_cleanup+0x40>
		hdr->type = NODE_RX_TYPE_RELEASE;
   18d42:	2501      	movs	r5, #1
		rx = hdr->link->mem;
   18d44:	6820      	ldr	r0, [r4, #0]
		hdr = &rx->hdr;
   18d46:	4621      	mov	r1, r4
		rx = hdr->link->mem;
   18d48:	6844      	ldr	r4, [r0, #4]
		hdr->type = NODE_RX_TYPE_RELEASE;
   18d4a:	710d      	strb	r5, [r1, #4]
		ll_rx_put(hdr->link, hdr);
   18d4c:	f7fb faee 	bl	1432c <ll_rx_put>
	while (rx) {
   18d50:	2c00      	cmp	r4, #0
   18d52:	d1f7      	bne.n	18d44 <conn_cleanup+0x30>
	while (conn->tx_head) {
   18d54:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18d58:	b381      	cbz	r1, 18dbc <conn_cleanup+0xa8>
		link = mem_acquire(&mem_link_tx.free);
   18d5a:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 18e08 <conn_cleanup+0xf4>
		LL_ASSERT(link);
   18d5e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 18e0c <conn_cleanup+0xf8>
   18d62:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 18e10 <conn_cleanup+0xfc>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18d66:	f106 076c 	add.w	r7, r6, #108	; 0x6c
   18d6a:	e007      	b.n	18d7c <conn_cleanup+0x68>
   18d6c:	4629      	mov	r1, r5
   18d6e:	463a      	mov	r2, r7
   18d70:	4620      	mov	r0, r4
   18d72:	f7f7 fd35 	bl	107e0 <memq_enqueue>
	while (conn->tx_head) {
   18d76:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18d7a:	b1f9      	cbz	r1, 18dbc <conn_cleanup+0xa8>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   18d7c:	4630      	mov	r0, r6
   18d7e:	f7fc f985 	bl	1508c <tx_ull_dequeue>
   18d82:	4605      	mov	r5, r0
		link = mem_acquire(&mem_link_tx.free);
   18d84:	4640      	mov	r0, r8
   18d86:	f7f7 fcc7 	bl	10718 <mem_acquire>
		LL_ASSERT(link);
   18d8a:	4604      	mov	r4, r0
   18d8c:	2800      	cmp	r0, #0
   18d8e:	d1ed      	bne.n	18d6c <conn_cleanup+0x58>
   18d90:	4820      	ldr	r0, [pc, #128]	; (18e14 <conn_cleanup+0x100>)
   18d92:	f44f 63ed 	mov.w	r3, #1896	; 0x768
   18d96:	4652      	mov	r2, sl
   18d98:	4649      	mov	r1, r9
   18d9a:	f008 fec3 	bl	21b24 <printk>
   18d9e:	4040      	eors	r0, r0
   18da0:	f380 8811 	msr	BASEPRI, r0
   18da4:	f04f 0003 	mov.w	r0, #3
   18da8:	df02      	svc	2
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   18daa:	4629      	mov	r1, r5
   18dac:	463a      	mov	r2, r7
   18dae:	4620      	mov	r0, r4
   18db0:	f7f7 fd16 	bl	107e0 <memq_enqueue>
	while (conn->tx_head) {
   18db4:	f8d6 11bc 	ldr.w	r1, [r6, #444]	; 0x1bc
   18db8:	2900      	cmp	r1, #0
   18dba:	d1df      	bne.n	18d7c <conn_cleanup+0x68>
				    TICKER_ID_CONN_BASE + lll->handle,
   18dbc:	8db2      	ldrh	r2, [r6, #44]	; 0x2c
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18dbe:	4b16      	ldr	r3, [pc, #88]	; (18e18 <conn_cleanup+0x104>)
   18dc0:	f8cd b000 	str.w	fp, [sp]
				    TICKER_ID_CONN_BASE + lll->handle,
   18dc4:	3203      	adds	r2, #3
	ticker_status = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   18dc6:	b2d2      	uxtb	r2, r2
   18dc8:	2101      	movs	r1, #1
   18dca:	2000      	movs	r0, #0
   18dcc:	f7f8 ff76 	bl	11cbc <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18dd0:	f030 0302 	bics.w	r3, r0, #2
   18dd4:	d00c      	beq.n	18df0 <conn_cleanup+0xdc>
   18dd6:	4a0d      	ldr	r2, [pc, #52]	; (18e0c <conn_cleanup+0xf8>)
   18dd8:	4910      	ldr	r1, [pc, #64]	; (18e1c <conn_cleanup+0x108>)
   18dda:	480e      	ldr	r0, [pc, #56]	; (18e14 <conn_cleanup+0x100>)
   18ddc:	f240 7327 	movw	r3, #1831	; 0x727
   18de0:	f008 fea0 	bl	21b24 <printk>
   18de4:	4040      	eors	r0, r0
   18de6:	f380 8811 	msr	BASEPRI, r0
   18dea:	f04f 0003 	mov.w	r0, #3
   18dee:	df02      	svc	2
	lll->handle = 0xFFFF;
   18df0:	f64f 73ff 	movw	r3, #65535	; 0xffff
	ull_conn_tx_demux(UINT8_MAX);
   18df4:	20ff      	movs	r0, #255	; 0xff
	lll->handle = 0xFFFF;
   18df6:	85b3      	strh	r3, [r6, #44]	; 0x2c
}
   18df8:	b003      	add	sp, #12
   18dfa:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	ull_conn_tx_demux(UINT8_MAX);
   18dfe:	f7ff bf39 	b.w	18c74 <ull_conn_tx_demux>
   18e02:	bf00      	nop
   18e04:	2000e400 	.word	0x2000e400
   18e08:	2000e508 	.word	0x2000e508
   18e0c:	000288c0 	.word	0x000288c0
   18e10:	00028910 	.word	0x00028910
   18e14:	00028404 	.word	0x00028404
   18e18:	0001528d 	.word	0x0001528d
   18e1c:	000289a0 	.word	0x000289a0

00018e20 <ull_conn_done>:
{
   18e20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	struct lll_conn *lll = (void *)HDR_ULL2LLL(done->param);
   18e24:	69c5      	ldr	r5, [r0, #28]
	if (unlikely(lll->handle == 0xFFFF)) {
   18e26:	8baa      	ldrh	r2, [r5, #28]
	struct ll_conn *conn = (void *)HDR_LLL2EVT(lll);
   18e28:	68ec      	ldr	r4, [r5, #12]
	if (unlikely(lll->handle == 0xFFFF)) {
   18e2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18e2e:	429a      	cmp	r2, r3
{
   18e30:	b08b      	sub	sp, #44	; 0x2c
	if (unlikely(lll->handle == 0xFFFF)) {
   18e32:	d05e      	beq.n	18ef2 <ull_conn_done+0xd2>
	switch (done->extra.mic_state) {
   18e34:	f890 3027 	ldrb.w	r3, [r0, #39]	; 0x27
   18e38:	2b01      	cmp	r3, #1
   18e3a:	4606      	mov	r6, r0
   18e3c:	f000 80ea 	beq.w	19014 <ull_conn_done+0x1f4>
   18e40:	2b02      	cmp	r3, #2
   18e42:	f000 80dd 	beq.w	19000 <ull_conn_done+0x1e0>
   18e46:	2b00      	cmp	r3, #0
   18e48:	f000 80c0 	beq.w	18fcc <ull_conn_done+0x1ac>
	reason_peer = conn->llcp_terminate.reason_peer;
   18e4c:	f894 713b 	ldrb.w	r7, [r4, #315]	; 0x13b
	if (reason_peer && (
   18e50:	2f00      	cmp	r7, #0
   18e52:	f040 80d8 	bne.w	19006 <ull_conn_done+0x1e6>
	latency_event = lll->latency_event;
   18e56:	f8b5 9024 	ldrh.w	r9, [r5, #36]	; 0x24
	if (done->extra.trx_cnt) {
   18e5a:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	elapsed_event = latency_event + 1;
   18e5c:	f109 0801 	add.w	r8, r9, #1
	ticks_drift_minus = 0U;
   18e60:	e9cd 7708 	strd	r7, r7, [sp, #32]
	elapsed_event = latency_event + 1;
   18e64:	fa1f f888 	uxth.w	r8, r8
	if (done->extra.trx_cnt) {
   18e68:	2b00      	cmp	r3, #0
   18e6a:	d045      	beq.n	18ef8 <ull_conn_done+0xd8>
		} else if (lll->role) {
   18e6c:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   18e70:	2b00      	cmp	r3, #0
   18e72:	f2c0 8118 	blt.w	190a6 <ull_conn_done+0x286>
	if (done->extra.crc_valid) {
   18e76:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		conn->connect_expire = 0U;
   18e7a:	2200      	movs	r2, #0
   18e7c:	f8a4 20c4 	strh.w	r2, [r4, #196]	; 0xc4
	if (done->extra.crc_valid) {
   18e80:	2b00      	cmp	r3, #0
   18e82:	f000 80cd 	beq.w	19020 <ull_conn_done+0x200>
		conn->supervision_expire = 0U;
   18e86:	2300      	movs	r3, #0
   18e88:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
	if (conn->procedure_expire != 0U) {
   18e8c:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   18e90:	b133      	cbz	r3, 18ea0 <ull_conn_done+0x80>
		if (conn->procedure_expire > elapsed_event) {
   18e92:	4543      	cmp	r3, r8
   18e94:	f240 8118 	bls.w	190c8 <ull_conn_done+0x2a8>
			conn->procedure_expire -= elapsed_event;
   18e98:	eba3 0308 	sub.w	r3, r3, r8
   18e9c:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc
	if (conn->apto_expire != 0U) {
   18ea0:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   18ea4:	b133      	cbz	r3, 18eb4 <ull_conn_done+0x94>
		if (conn->apto_expire > elapsed_event) {
   18ea6:	4543      	cmp	r3, r8
   18ea8:	f240 80ea 	bls.w	19080 <ull_conn_done+0x260>
			conn->apto_expire -= elapsed_event;
   18eac:	eba3 0308 	sub.w	r3, r3, r8
   18eb0:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
	if (conn->appto_expire != 0U) {
   18eb4:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   18eb8:	2b00      	cmp	r3, #0
   18eba:	d046      	beq.n	18f4a <ull_conn_done+0x12a>
		if (conn->appto_expire > elapsed_event) {
   18ebc:	4543      	cmp	r3, r8
   18ebe:	f200 80be 	bhi.w	1903e <ull_conn_done+0x21e>
			conn->appto_expire = 0U;
   18ec2:	2300      	movs	r3, #0
   18ec4:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			if ((conn->procedure_expire == 0U) &&
   18ec8:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   18ecc:	2b00      	cmp	r3, #0
   18ece:	d13c      	bne.n	18f4a <ull_conn_done+0x12a>
			    (conn->llcp_req == conn->llcp_ack)) {
   18ed0:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18ed4:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			if ((conn->procedure_expire == 0U) &&
   18ed8:	4293      	cmp	r3, r2
   18eda:	d13a      	bne.n	18f52 <ull_conn_done+0x132>
				conn->llcp_ack -= 2U;
   18edc:	3b02      	subs	r3, #2
   18ede:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
				conn->llcp_type = LLCP_PING;
   18ee2:	2305      	movs	r3, #5
   18ee4:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18ee8:	e038      	b.n	18f5c <ull_conn_done+0x13c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_TIMEOUT);
   18eea:	2108      	movs	r1, #8
   18eec:	4620      	mov	r0, r4
   18eee:	f7ff ff11 	bl	18d14 <conn_cleanup>
}
   18ef2:	b00b      	add	sp, #44	; 0x2c
   18ef4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (done->extra.crc_valid) {
   18ef8:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
   18efc:	2b00      	cmp	r3, #0
   18efe:	d1c2      	bne.n	18e86 <ull_conn_done+0x66>
	else if (conn->connect_expire) {
   18f00:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   18f04:	2b00      	cmp	r3, #0
   18f06:	f000 808b 	beq.w	19020 <ull_conn_done+0x200>
		if (conn->connect_expire > elapsed_event) {
   18f0a:	4543      	cmp	r3, r8
   18f0c:	f240 80f3 	bls.w	190f6 <ull_conn_done+0x2d6>
			conn->connect_expire -= elapsed_event;
   18f10:	eba3 0308 	sub.w	r3, r3, r8
   18f14:	f8a4 30c4 	strh.w	r3, [r4, #196]	; 0xc4
	if (conn->supervision_expire) {
   18f18:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   18f1c:	2b00      	cmp	r3, #0
   18f1e:	d0b5      	beq.n	18e8c <ull_conn_done+0x6c>
		if (conn->supervision_expire > elapsed_event) {
   18f20:	4598      	cmp	r8, r3
   18f22:	d2e2      	bcs.n	18eea <ull_conn_done+0xca>
			conn->supervision_expire -= elapsed_event;
   18f24:	eba3 0308 	sub.w	r3, r3, r8
   18f28:	b29b      	uxth	r3, r3
			lll->latency_event = 0U;
   18f2a:	2200      	movs	r2, #0
			if (conn->supervision_expire <= 6U) {
   18f2c:	2b06      	cmp	r3, #6
			conn->supervision_expire -= elapsed_event;
   18f2e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
			lll->latency_event = 0U;
   18f32:	84aa      	strh	r2, [r5, #36]	; 0x24
			if (conn->supervision_expire <= 6U) {
   18f34:	d907      	bls.n	18f46 <ull_conn_done+0x126>
			else if (lll->role) {
   18f36:	f995 302d 	ldrsb.w	r3, [r5, #45]	; 0x2d
   18f3a:	4293      	cmp	r3, r2
   18f3c:	daa6      	bge.n	18e8c <ull_conn_done+0x6c>
				if (latency_event) {
   18f3e:	f1b9 0f00 	cmp.w	r9, #0
   18f42:	f000 80ca 	beq.w	190da <ull_conn_done+0x2ba>
				force = 1U;
   18f46:	2701      	movs	r7, #1
   18f48:	e7a0      	b.n	18e8c <ull_conn_done+0x6c>
			    (conn->llcp_req == conn->llcp_ack)) {
   18f4a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   18f4e:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   18f52:	1a9b      	subs	r3, r3, r2
   18f54:	f003 0303 	and.w	r3, r3, #3
   18f58:	2b02      	cmp	r3, #2
   18f5a:	d07d      	beq.n	19058 <ull_conn_done+0x238>
	      (conn->llcp_type == LLCP_CHAN_MAP))) ||
   18f5c:	f894 2110 	ldrb.w	r2, [r4, #272]	; 0x110
   18f60:	f894 3111 	ldrb.w	r3, [r4, #273]	; 0x111
   18f64:	429a      	cmp	r2, r3
   18f66:	f000 809c 	beq.w	190a2 <ull_conn_done+0x282>
		lll->latency_event = 0U;
   18f6a:	2200      	movs	r2, #0
   18f6c:	84aa      	strh	r2, [r5, #36]	; 0x24
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18f6e:	9b09      	ldr	r3, [sp, #36]	; 0x24
	if ((force) || (latency_event != lll->latency_event)) {
   18f70:	b90f      	cbnz	r7, 18f76 <ull_conn_done+0x156>
   18f72:	4591      	cmp	r9, r2
   18f74:	d07d      	beq.n	19072 <ull_conn_done+0x252>
		lazy = lll->latency_event + 1U;
   18f76:	3201      	adds	r2, #1
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18f78:	9c08      	ldr	r4, [sp, #32]
		lazy = lll->latency_event + 1U;
   18f7a:	b291      	uxth	r1, r2
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   18f7c:	b90b      	cbnz	r3, 18f82 <ull_conn_done+0x162>
   18f7e:	2c00      	cmp	r4, #0
   18f80:	d058      	beq.n	19034 <ull_conn_done+0x214>
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   18f82:	8baa      	ldrh	r2, [r5, #28]
		struct ll_conn *conn = lll->hdr.parent;
   18f84:	68ed      	ldr	r5, [r5, #12]
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18f86:	9400      	str	r4, [sp, #0]
   18f88:	2000      	movs	r0, #0
   18f8a:	4c68      	ldr	r4, [pc, #416]	; (1912c <ull_conn_done+0x30c>)
   18f8c:	9103      	str	r1, [sp, #12]
		uint8_t ticker_id = TICKER_ID_CONN_BASE + lll->handle;
   18f8e:	3203      	adds	r2, #3
		ticker_status = ticker_update(TICKER_INSTANCE_ID_CTLR,
   18f90:	e9cd 0001 	strd	r0, r0, [sp, #4]
   18f94:	9704      	str	r7, [sp, #16]
   18f96:	9506      	str	r5, [sp, #24]
   18f98:	b2d2      	uxtb	r2, r2
   18f9a:	2101      	movs	r1, #1
   18f9c:	9405      	str	r4, [sp, #20]
   18f9e:	f7f8 fe75 	bl	11c8c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18fa2:	f030 0302 	bics.w	r3, r0, #2
   18fa6:	d0a4      	beq.n	18ef2 <ull_conn_done+0xd2>
   18fa8:	f7fb fa9c 	bl	144e4 <ull_disable_mark_get>
   18fac:	4285      	cmp	r5, r0
   18fae:	d0a0      	beq.n	18ef2 <ull_conn_done+0xd2>
   18fb0:	4a5f      	ldr	r2, [pc, #380]	; (19130 <ull_conn_done+0x310>)
   18fb2:	4960      	ldr	r1, [pc, #384]	; (19134 <ull_conn_done+0x314>)
   18fb4:	4860      	ldr	r0, [pc, #384]	; (19138 <ull_conn_done+0x318>)
   18fb6:	f240 5376 	movw	r3, #1398	; 0x576
   18fba:	f008 fdb3 	bl	21b24 <printk>
   18fbe:	4040      	eors	r0, r0
   18fc0:	f380 8811 	msr	BASEPRI, r0
   18fc4:	f04f 0003 	mov.w	r0, #3
   18fc8:	df02      	svc	2
   18fca:	e792      	b.n	18ef2 <ull_conn_done+0xd2>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   18fcc:	f895 306e 	ldrb.w	r3, [r5, #110]	; 0x6e
   18fd0:	0719      	lsls	r1, r3, #28
   18fd2:	d548      	bpl.n	19066 <ull_conn_done+0x246>
					    (lll->latency + 6)) ?
   18fd4:	8c2b      	ldrh	r3, [r5, #32]
			appto_reload_new = (conn->apto_reload >
   18fd6:	f8b4 20d2 	ldrh.w	r2, [r4, #210]	; 0xd2
					    (lll->latency + 6)) ?
   18fda:	1d99      	adds	r1, r3, #6
			appto_reload_new = (conn->apto_reload >
   18fdc:	428a      	cmp	r2, r1
					   (conn->apto_reload -
   18fde:	bfc4      	itt	gt
   18fe0:	1ad3      	subgt	r3, r2, r3
   18fe2:	3b06      	subgt	r3, #6
			if (conn->appto_reload != appto_reload_new) {
   18fe4:	f8b4 10ce 	ldrh.w	r1, [r4, #206]	; 0xce
			appto_reload_new = (conn->apto_reload >
   18fe8:	bfcc      	ite	gt
   18fea:	b29b      	uxthgt	r3, r3
   18fec:	4613      	movle	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   18fee:	4299      	cmp	r1, r3
   18ff0:	d064      	beq.n	190bc <ull_conn_done+0x29c>
				conn->appto_reload = appto_reload_new;
   18ff2:	f8a4 30ce 	strh.w	r3, [r4, #206]	; 0xce
				conn->appto_expire = conn->appto_reload;
   18ff6:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
				conn->apto_expire = conn->apto_reload;
   18ffa:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
   18ffe:	e725      	b.n	18e4c <ull_conn_done+0x2c>
		conn->llcp_terminate.reason_peer =
   19000:	273d      	movs	r7, #61	; 0x3d
   19002:	f884 713b 	strb.w	r7, [r4, #315]	; 0x13b
		conn_cleanup(conn, reason_peer);
   19006:	4639      	mov	r1, r7
   19008:	4620      	mov	r0, r4
}
   1900a:	b00b      	add	sp, #44	; 0x2c
   1900c:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
		conn_cleanup(conn, reason_peer);
   19010:	f7ff be80 	b.w	18d14 <conn_cleanup>
		conn->appto_expire = conn->apto_expire = 0U;
   19014:	2300      	movs	r3, #0
   19016:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   1901a:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
		break;
   1901e:	e715      	b.n	18e4c <ull_conn_done+0x2c>
		if (!conn->supervision_expire) {
   19020:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   19024:	2b00      	cmp	r3, #0
   19026:	f47f af7b 	bne.w	18f20 <ull_conn_done+0x100>
			conn->supervision_expire = conn->supervision_reload;
   1902a:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1902e:	f8a4 30c8 	strh.w	r3, [r4, #200]	; 0xc8
   19032:	e773      	b.n	18f1c <ull_conn_done+0xfc>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19034:	2900      	cmp	r1, #0
   19036:	d1a4      	bne.n	18f82 <ull_conn_done+0x162>
   19038:	2f00      	cmp	r7, #0
   1903a:	d1a2      	bne.n	18f82 <ull_conn_done+0x162>
   1903c:	e759      	b.n	18ef2 <ull_conn_done+0xd2>
			conn->appto_expire -= elapsed_event;
   1903e:	eba3 0308 	sub.w	r3, r3, r8
			    (conn->llcp_req == conn->llcp_ack)) {
   19042:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
			conn->appto_expire -= elapsed_event;
   19046:	f8a4 30d0 	strh.w	r3, [r4, #208]	; 0xd0
			    (conn->llcp_req == conn->llcp_ack)) {
   1904a:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1904e:	1a9b      	subs	r3, r3, r2
   19050:	f003 0303 	and.w	r3, r3, #3
   19054:	2b02      	cmp	r3, #2
   19056:	d181      	bne.n	18f5c <ull_conn_done+0x13c>
	     ((conn->llcp_type == LLCP_CONN_UPD) ||
   19058:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
	if (((((conn->llcp_req - conn->llcp_ack) & 0x03) == 0x02) &&
   1905c:	3b01      	subs	r3, #1
   1905e:	2b01      	cmp	r3, #1
   19060:	f63f af7c 	bhi.w	18f5c <ull_conn_done+0x13c>
   19064:	e781      	b.n	18f6a <ull_conn_done+0x14a>
		if (lll->enc_rx || conn->llcp_enc.pause_rx) {
   19066:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   1906a:	07da      	lsls	r2, r3, #31
   1906c:	f57f aeee 	bpl.w	18e4c <ull_conn_done+0x2c>
   19070:	e7b0      	b.n	18fd4 <ull_conn_done+0x1b4>
	if (ticks_drift_plus || ticks_drift_minus || lazy || force) {
   19072:	9c08      	ldr	r4, [sp, #32]
   19074:	b913      	cbnz	r3, 1907c <ull_conn_done+0x25c>
   19076:	2c00      	cmp	r4, #0
   19078:	f43f af3b 	beq.w	18ef2 <ull_conn_done+0xd2>
	lazy = 0U;
   1907c:	4639      	mov	r1, r7
   1907e:	e780      	b.n	18f82 <ull_conn_done+0x162>
			rx = ll_pdu_rx_alloc();
   19080:	f7fb f982 	bl	14388 <ll_pdu_rx_alloc>
			if (rx) {
   19084:	4601      	mov	r1, r0
   19086:	b320      	cbz	r0, 190d2 <ull_conn_done+0x2b2>
				rx->handle = lll->handle;
   19088:	8bab      	ldrh	r3, [r5, #28]
				conn->apto_expire = 0U;
   1908a:	2200      	movs	r2, #0
   1908c:	f8a4 20d4 	strh.w	r2, [r4, #212]	; 0xd4
				rx->handle = lll->handle;
   19090:	80c3      	strh	r3, [r0, #6]
				rx->type = NODE_RX_TYPE_APTO;
   19092:	2317      	movs	r3, #23
   19094:	7103      	strb	r3, [r0, #4]
				ll_rx_put(rx->link, rx);
   19096:	6800      	ldr	r0, [r0, #0]
   19098:	f7fb f948 	bl	1432c <ll_rx_put>
				ll_rx_sched();
   1909c:	f7fb f950 	bl	14340 <ll_rx_sched>
   190a0:	e708      	b.n	18eb4 <ull_conn_done+0x94>
	if ((force) || (latency_event != lll->latency_event)) {
   190a2:	8caa      	ldrh	r2, [r5, #36]	; 0x24
   190a4:	e763      	b.n	18f6e <ull_conn_done+0x14e>
			ull_drift_ticks_get(done, &ticks_drift_plus,
   190a6:	aa08      	add	r2, sp, #32
   190a8:	a909      	add	r1, sp, #36	; 0x24
   190aa:	4630      	mov	r0, r6
   190ac:	f7e8 fd08 	bl	1ac0 <ull_drift_ticks_get>
			if (!conn->tx_head) {
   190b0:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   190b4:	b323      	cbz	r3, 19100 <ull_conn_done+0x2e0>
				lll->latency_event = 0;
   190b6:	2300      	movs	r3, #0
   190b8:	84ab      	strh	r3, [r5, #36]	; 0x24
   190ba:	e6dc      	b.n	18e76 <ull_conn_done+0x56>
			if (conn->apto_expire == 0U) {
   190bc:	f8b4 10d4 	ldrh.w	r1, [r4, #212]	; 0xd4
   190c0:	2900      	cmp	r1, #0
   190c2:	f47f aec3 	bne.w	18e4c <ull_conn_done+0x2c>
   190c6:	e796      	b.n	18ff6 <ull_conn_done+0x1d6>
			conn_cleanup(conn, BT_HCI_ERR_LL_RESP_TIMEOUT);
   190c8:	2122      	movs	r1, #34	; 0x22
   190ca:	4620      	mov	r0, r4
   190cc:	f7ff fe22 	bl	18d14 <conn_cleanup>
			return;
   190d0:	e70f      	b.n	18ef2 <ull_conn_done+0xd2>
				conn->apto_expire = 1U;
   190d2:	2301      	movs	r3, #1
   190d4:	f8a4 30d4 	strh.w	r3, [r4, #212]	; 0xd4
   190d8:	e6ec      	b.n	18eb4 <ull_conn_done+0x94>
					force = conn->slave.force & 0x01;
   190da:	f8d4 30e0 	ldr.w	r3, [r4, #224]	; 0xe0
					conn->slave.force >>= 1U;
   190de:	085a      	lsrs	r2, r3, #1
					if (force) {
   190e0:	f013 0301 	ands.w	r3, r3, #1
						conn->slave.force |= BIT(31);
   190e4:	bf17      	itett	ne
   190e6:	f042 4200 	orrne.w	r2, r2, #2147483648	; 0x80000000
					conn->slave.force >>= 1U;
   190ea:	f8c4 20e0 	streq.w	r2, [r4, #224]	; 0xe0
						conn->slave.force |= BIT(31);
   190ee:	f8c4 20e0 	strne.w	r2, [r4, #224]	; 0xe0
					force = conn->slave.force & 0x01;
   190f2:	461f      	movne	r7, r3
   190f4:	e6ca      	b.n	18e8c <ull_conn_done+0x6c>
			conn_cleanup(conn, BT_HCI_ERR_CONN_FAIL_TO_ESTAB);
   190f6:	213e      	movs	r1, #62	; 0x3e
   190f8:	4620      	mov	r0, r4
   190fa:	f7ff fe0b 	bl	18d14 <conn_cleanup>
			return;
   190fe:	e6f8      	b.n	18ef2 <ull_conn_done+0xd2>
				ull_conn_tx_demux(UINT8_MAX);
   19100:	20ff      	movs	r0, #255	; 0xff
   19102:	f7ff fdb7 	bl	18c74 <ull_conn_tx_demux>
			if (conn->tx_head || memq_peek(lll->memq_tx.head,
   19106:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   1910a:	2b00      	cmp	r3, #0
   1910c:	d1d3      	bne.n	190b6 <ull_conn_done+0x296>
   1910e:	e9d5 0116 	ldrd	r0, r1, [r5, #88]	; 0x58
   19112:	463a      	mov	r2, r7
   19114:	f7f7 fb6e 	bl	107f4 <memq_peek>
   19118:	2800      	cmp	r0, #0
   1911a:	d1cc      	bne.n	190b6 <ull_conn_done+0x296>
			} else if (lll->slave.latency_enabled) {
   1911c:	f895 3030 	ldrb.w	r3, [r5, #48]	; 0x30
   19120:	07db      	lsls	r3, r3, #31
				lll->latency_event = lll->latency;
   19122:	bf44      	itt	mi
   19124:	8c2b      	ldrhmi	r3, [r5, #32]
   19126:	84ab      	strhmi	r3, [r5, #36]	; 0x24
   19128:	e6a5      	b.n	18e76 <ull_conn_done+0x56>
   1912a:	bf00      	nop
   1912c:	000153a1 	.word	0x000153a1
   19130:	000288c0 	.word	0x000288c0
   19134:	00028a54 	.word	0x00028a54
   19138:	00028404 	.word	0x00028404

0001913c <ull_conn_tx_lll_enqueue>:
	while (conn->tx_head &&
   1913c:	f8d0 31bc 	ldr.w	r3, [r0, #444]	; 0x1bc
   19140:	2b00      	cmp	r3, #0
   19142:	f000 80be 	beq.w	192c2 <ull_conn_tx_lll_enqueue+0x186>
   19146:	3901      	subs	r1, #1
{
   19148:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		link = mem_acquire(&mem_link_tx.free);
   1914c:	f8df 8174 	ldr.w	r8, [pc, #372]	; 192c4 <ull_conn_tx_lll_enqueue+0x188>
		LL_ASSERT(link);
   19150:	f8df a174 	ldr.w	sl, [pc, #372]	; 192c8 <ull_conn_tx_lll_enqueue+0x18c>
   19154:	f8df 9174 	ldr.w	r9, [pc, #372]	; 192cc <ull_conn_tx_lll_enqueue+0x190>
   19158:	4604      	mov	r4, r0
   1915a:	b2cd      	uxtb	r5, r1
   1915c:	e010      	b.n	19180 <ull_conn_tx_lll_enqueue+0x44>
		link = mem_acquire(&mem_link_tx.free);
   1915e:	4640      	mov	r0, r8
   19160:	f7f7 fada 	bl	10718 <mem_acquire>
		LL_ASSERT(link);
   19164:	4607      	mov	r7, r0
   19166:	b3b0      	cbz	r0, 191d6 <ull_conn_tx_lll_enqueue+0x9a>
		memq_enqueue(link, tx, &conn->lll.memq_tx.tail);
   19168:	f104 026c 	add.w	r2, r4, #108	; 0x6c
   1916c:	4631      	mov	r1, r6
   1916e:	4638      	mov	r0, r7
   19170:	f7f7 fb36 	bl	107e0 <memq_enqueue>
	while (conn->tx_head &&
   19174:	f8d4 31bc 	ldr.w	r3, [r4, #444]	; 0x1bc
   19178:	3d01      	subs	r5, #1
   1917a:	b2ed      	uxtb	r5, r5
   1917c:	2b00      	cmp	r3, #0
   1917e:	d05c      	beq.n	1923a <ull_conn_tx_lll_enqueue+0xfe>
		 !conn->llcp_phy.pause_tx &&
   19180:	f894 21b7 	ldrb.w	r2, [r4, #439]	; 0x1b7
	while (conn->tx_head &&
   19184:	07d1      	lsls	r1, r2, #31
   19186:	d403      	bmi.n	19190 <ull_conn_tx_lll_enqueue+0x54>
		 !conn->llcp_enc.pause_tx &&
   19188:	f894 215e 	ldrb.w	r2, [r4, #350]	; 0x15e
		 !conn->llcp_phy.pause_tx &&
   1918c:	0792      	lsls	r2, r2, #30
   1918e:	d53a      	bpl.n	19206 <ull_conn_tx_lll_enqueue+0xca>
		(!pause_tx && (conn->tx_head == conn->tx_ctrl))) && count--) {
   19190:	f8d4 21c0 	ldr.w	r2, [r4, #448]	; 0x1c0
   19194:	4293      	cmp	r3, r2
   19196:	d150      	bne.n	1923a <ull_conn_tx_lll_enqueue+0xfe>
   19198:	2dff      	cmp	r5, #255	; 0xff
   1919a:	d04e      	beq.n	1923a <ull_conn_tx_lll_enqueue+0xfe>
		tx = tx_ull_dequeue(conn, conn->tx_head);
   1919c:	f8d4 11bc 	ldr.w	r1, [r4, #444]	; 0x1bc
   191a0:	4620      	mov	r0, r4
   191a2:	f7fb ff73 	bl	1508c <tx_ull_dequeue>
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   191a6:	7903      	ldrb	r3, [r0, #4]
   191a8:	f003 0303 	and.w	r3, r3, #3
   191ac:	2b03      	cmp	r3, #3
		tx = tx_ull_dequeue(conn, conn->tx_head);
   191ae:	4606      	mov	r6, r0
		if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   191b0:	d1d5      	bne.n	1915e <ull_conn_tx_lll_enqueue+0x22>
			ctrl_tx_pre_ack(conn, pdu_tx);
   191b2:	79c3      	ldrb	r3, [r0, #7]
	switch (pdu_tx->llctrl.opcode) {
   191b4:	2b0b      	cmp	r3, #11
   191b6:	d042      	beq.n	1923e <ull_conn_tx_lll_enqueue+0x102>
   191b8:	d81b      	bhi.n	191f2 <ull_conn_tx_lll_enqueue+0xb6>
   191ba:	2b04      	cmp	r3, #4
   191bc:	d1cf      	bne.n	1915e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_enc.pause_tx = 1U;
   191be:	f894 315e 	ldrb.w	r3, [r4, #350]	; 0x15e
   191c2:	f043 0302 	orr.w	r3, r3, #2
   191c6:	f884 315e 	strb.w	r3, [r4, #350]	; 0x15e
		link = mem_acquire(&mem_link_tx.free);
   191ca:	4640      	mov	r0, r8
   191cc:	f7f7 faa4 	bl	10718 <mem_acquire>
		LL_ASSERT(link);
   191d0:	4607      	mov	r7, r0
   191d2:	2800      	cmp	r0, #0
   191d4:	d1c8      	bne.n	19168 <ull_conn_tx_lll_enqueue+0x2c>
   191d6:	483e      	ldr	r0, [pc, #248]	; (192d0 <ull_conn_tx_lll_enqueue+0x194>)
   191d8:	f240 53ca 	movw	r3, #1482	; 0x5ca
   191dc:	4652      	mov	r2, sl
   191de:	4649      	mov	r1, r9
   191e0:	f008 fca0 	bl	21b24 <printk>
   191e4:	4040      	eors	r0, r0
   191e6:	f380 8811 	msr	BASEPRI, r0
   191ea:	f04f 0003 	mov.w	r0, #3
   191ee:	df02      	svc	2
   191f0:	e7ba      	b.n	19168 <ull_conn_tx_lll_enqueue+0x2c>
	switch (pdu_tx->llctrl.opcode) {
   191f2:	3b16      	subs	r3, #22
   191f4:	2b01      	cmp	r3, #1
   191f6:	d8b2      	bhi.n	1915e <ull_conn_tx_lll_enqueue+0x22>
		conn->llcp_phy.pause_tx = 1U;
   191f8:	f894 31b7 	ldrb.w	r3, [r4, #439]	; 0x1b7
   191fc:	f043 0301 	orr.w	r3, r3, #1
   19200:	f884 31b7 	strb.w	r3, [r4, #439]	; 0x1b7
		break;
   19204:	e7ab      	b.n	1915e <ull_conn_tx_lll_enqueue+0x22>
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19206:	791a      	ldrb	r2, [r3, #4]
   19208:	f002 0203 	and.w	r2, r2, #3
   1920c:	2a03      	cmp	r2, #3
   1920e:	d1c3      	bne.n	19198 <ull_conn_tx_lll_enqueue+0x5c>
	    ((pdu_data_tx->llctrl.opcode ==
   19210:	79da      	ldrb	r2, [r3, #7]
	if ((pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) &&
   19212:	2a03      	cmp	r2, #3
   19214:	d001      	beq.n	1921a <ull_conn_tx_lll_enqueue+0xde>
	      PDU_DATA_LLCTRL_TYPE_ENC_REQ) ||
   19216:	2a0a      	cmp	r2, #10
   19218:	d1be      	bne.n	19198 <ull_conn_tx_lll_enqueue+0x5c>
		if (((conn->llcp_req != conn->llcp_ack) &&
   1921a:	f894 10e9 	ldrb.w	r1, [r4, #233]	; 0xe9
   1921e:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19222:	428a      	cmp	r2, r1
   19224:	d010      	beq.n	19248 <ull_conn_tx_lll_enqueue+0x10c>
   19226:	f894 20ea 	ldrb.w	r2, [r4, #234]	; 0xea
   1922a:	2a03      	cmp	r2, #3
   1922c:	d0b4      	beq.n	19198 <ull_conn_tx_lll_enqueue+0x5c>
			if ((tx->next != NULL) &&
   1922e:	681a      	ldr	r2, [r3, #0]
   19230:	b11a      	cbz	r2, 1923a <ull_conn_tx_lll_enqueue+0xfe>
   19232:	f8d4 11c0 	ldr.w	r1, [r4, #448]	; 0x1c0
   19236:	428a      	cmp	r2, r1
   19238:	d032      	beq.n	192a0 <ull_conn_tx_lll_enqueue+0x164>
}
   1923a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (!conn->lll.role) {
   1923e:	f994 303d 	ldrsb.w	r3, [r4, #61]	; 0x3d
   19242:	2b00      	cmp	r3, #0
   19244:	da8b      	bge.n	1915e <ull_conn_tx_lll_enqueue+0x22>
   19246:	e7ba      	b.n	191be <ull_conn_tx_lll_enqueue+0x82>
		    ((conn->llcp_req == conn->llcp_ack) &&
   19248:	f894 0125 	ldrb.w	r0, [r4, #293]	; 0x125
   1924c:	f894 1124 	ldrb.w	r1, [r4, #292]	; 0x124
   19250:	4288      	cmp	r0, r1
   19252:	d1ec      	bne.n	1922e <ull_conn_tx_lll_enqueue+0xf2>
		     ((conn->llcp_feature.ack != conn->llcp_feature.req) ||
   19254:	f894 0131 	ldrb.w	r0, [r4, #305]	; 0x131
   19258:	f894 1130 	ldrb.w	r1, [r4, #304]	; 0x130
   1925c:	4288      	cmp	r0, r1
   1925e:	d1e6      	bne.n	1922e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_version.ack != conn->llcp_version.req) ||
   19260:	f894 017d 	ldrb.w	r0, [r4, #381]	; 0x17d
   19264:	f894 117c 	ldrb.w	r1, [r4, #380]	; 0x17c
   19268:	4288      	cmp	r0, r1
   1926a:	d1e0      	bne.n	1922e <ull_conn_tx_lll_enqueue+0xf2>
		       conn->llcp_conn_param.req) ||
   1926c:	f894 01a5 	ldrb.w	r0, [r4, #421]	; 0x1a5
   19270:	f894 11a4 	ldrb.w	r1, [r4, #420]	; 0x1a4
   19274:	4288      	cmp	r0, r1
   19276:	d1da      	bne.n	1922e <ull_conn_tx_lll_enqueue+0xf2>
		      (conn->llcp_phy.ack != conn->llcp_phy.req) ||
   19278:	f894 01b5 	ldrb.w	r0, [r4, #437]	; 0x1b5
   1927c:	f894 11b4 	ldrb.w	r1, [r4, #436]	; 0x1b4
   19280:	4288      	cmp	r0, r1
   19282:	d1d4      	bne.n	1922e <ull_conn_tx_lll_enqueue+0xf2>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   19284:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_ack -= 2U;
   19288:	3a02      	subs	r2, #2
   1928a:	f884 20e9 	strb.w	r2, [r4, #233]	; 0xe9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INIT;
   1928e:	2201      	movs	r2, #1
   19290:	f362 0301 	bfi	r3, r2, #0, #2
   19294:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			conn->llcp_type = LLCP_ENCRYPTION;
   19298:	2303      	movs	r3, #3
   1929a:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
			conn->llcp_ack -= 2U;
   1929e:	e77b      	b.n	19198 <ull_conn_tx_lll_enqueue+0x5c>
				conn->tx_head = tx->next;
   192a0:	f8c4 21bc 	str.w	r2, [r4, #444]	; 0x1bc
				tx->next = conn->tx_ctrl_last->next;
   192a4:	f8d4 21c4 	ldr.w	r2, [r4, #452]	; 0x1c4
				if (!conn->tx_data_last) {
   192a8:	f8d4 11cc 	ldr.w	r1, [r4, #460]	; 0x1cc
				tx->next = conn->tx_ctrl_last->next;
   192ac:	6810      	ldr	r0, [r2, #0]
   192ae:	6018      	str	r0, [r3, #0]
				conn->tx_ctrl_last->next = tx;
   192b0:	6013      	str	r3, [r2, #0]
				conn->tx_data = tx;
   192b2:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
				if (!conn->tx_data_last) {
   192b6:	2900      	cmp	r1, #0
   192b8:	f47f af6e 	bne.w	19198 <ull_conn_tx_lll_enqueue+0x5c>
					conn->tx_data_last = tx;
   192bc:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
   192c0:	e76a      	b.n	19198 <ull_conn_tx_lll_enqueue+0x5c>
   192c2:	4770      	bx	lr
   192c4:	2000e508 	.word	0x2000e508
   192c8:	000288c0 	.word	0x000288c0
   192cc:	00028910 	.word	0x00028910
   192d0:	00028404 	.word	0x00028404

000192d4 <tx_demux>:
{
   192d4:	b510      	push	{r4, lr}
   192d6:	4604      	mov	r4, r0
	ull_conn_tx_demux(1);
   192d8:	2001      	movs	r0, #1
   192da:	f7ff fccb 	bl	18c74 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(param, 1);
   192de:	4620      	mov	r0, r4
   192e0:	2101      	movs	r1, #1
}
   192e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	ull_conn_tx_lll_enqueue(param, 1);
   192e6:	f7ff bf29 	b.w	1913c <ull_conn_tx_lll_enqueue>
   192ea:	bf00      	nop

000192ec <ull_conn_link_tx_release>:
	mem_release(link, &mem_link_tx.free);
   192ec:	4901      	ldr	r1, [pc, #4]	; (192f4 <ull_conn_link_tx_release+0x8>)
   192ee:	f7f7 ba2d 	b.w	1074c <mem_release>
   192f2:	bf00      	nop
   192f4:	2000e508 	.word	0x2000e508

000192f8 <ull_conn_ack_last_idx_get>:
	return mfifo_conn_ack.l;
   192f8:	4b01      	ldr	r3, [pc, #4]	; (19300 <ull_conn_ack_last_idx_get+0x8>)
}
   192fa:	78d8      	ldrb	r0, [r3, #3]
   192fc:	4770      	bx	lr
   192fe:	bf00      	nop
   19300:	20000594 	.word	0x20000594

00019304 <ull_conn_ack_peek>:
{
   19304:	b530      	push	{r4, r5, lr}
	lll_tx = MFIFO_DEQUEUE_GET(conn_ack);
   19306:	4b0c      	ldr	r3, [pc, #48]	; (19338 <ull_conn_ack_peek+0x34>)
   19308:	f893 c002 	ldrb.w	ip, [r3, #2]
   1930c:	78dc      	ldrb	r4, [r3, #3]
   1930e:	781d      	ldrb	r5, [r3, #0]
	if (first == last) {
   19310:	45a4      	cmp	ip, r4
   19312:	d00f      	beq.n	19334 <ull_conn_ack_peek+0x30>
	return (void *)(fifo + first * size);
   19314:	fb1c fc05 	smulbb	ip, ip, r5
   19318:	3304      	adds	r3, #4
	if (!lll_tx) {
   1931a:	4686      	mov	lr, r0
   1931c:	eb13 000c 	adds.w	r0, r3, ip
   19320:	d007      	beq.n	19332 <ull_conn_ack_peek+0x2e>
	*ack_last = mfifo_conn_ack.l;
   19322:	f88e 4000 	strb.w	r4, [lr]
	*handle = lll_tx->handle;
   19326:	f833 400c 	ldrh.w	r4, [r3, ip]
	*tx = lll_tx->node;
   1932a:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1932c:	800c      	strh	r4, [r1, #0]
	*tx = lll_tx->node;
   1932e:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   19330:	6818      	ldr	r0, [r3, #0]
}
   19332:	bd30      	pop	{r4, r5, pc}
		return NULL;
   19334:	2000      	movs	r0, #0
}
   19336:	bd30      	pop	{r4, r5, pc}
   19338:	20000594 	.word	0x20000594

0001933c <ull_conn_ack_by_last_peek>:
{
   1933c:	b500      	push	{lr}
	lll_tx = mfifo_dequeue_get(mfifo_conn_ack.m, mfifo_conn_ack.s,
   1933e:	4b0c      	ldr	r3, [pc, #48]	; (19370 <ull_conn_ack_by_last_peek+0x34>)
   19340:	f893 c002 	ldrb.w	ip, [r3, #2]
   19344:	f893 e000 	ldrb.w	lr, [r3]
	if (first == last) {
   19348:	4584      	cmp	ip, r0
   1934a:	d00e      	beq.n	1936a <ull_conn_ack_by_last_peek+0x2e>
	return (void *)(fifo + first * size);
   1934c:	3304      	adds	r3, #4
   1934e:	fb1c fc0e 	smulbb	ip, ip, lr
	if (!lll_tx) {
   19352:	eb13 000c 	adds.w	r0, r3, ip
   19356:	d006      	beq.n	19366 <ull_conn_ack_by_last_peek+0x2a>
	*handle = lll_tx->handle;
   19358:	f833 c00c 	ldrh.w	ip, [r3, ip]
	*tx = lll_tx->node;
   1935c:	6843      	ldr	r3, [r0, #4]
	*handle = lll_tx->handle;
   1935e:	f8a1 c000 	strh.w	ip, [r1]
	*tx = lll_tx->node;
   19362:	6013      	str	r3, [r2, #0]
	return (*tx)->link;
   19364:	6818      	ldr	r0, [r3, #0]
}
   19366:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1936a:	2000      	movs	r0, #0
   1936c:	e7fb      	b.n	19366 <ull_conn_ack_by_last_peek+0x2a>
   1936e:	bf00      	nop
   19370:	20000594 	.word	0x20000594

00019374 <ull_conn_ack_dequeue>:
	return MFIFO_DEQUEUE(conn_ack);
   19374:	4b09      	ldr	r3, [pc, #36]	; (1939c <ull_conn_ack_dequeue+0x28>)
	uint8_t _first = *first; /* Copy read-index */
   19376:	7899      	ldrb	r1, [r3, #2]
	if (_first == last) {
   19378:	78da      	ldrb	r2, [r3, #3]
   1937a:	7818      	ldrb	r0, [r3, #0]
   1937c:	f893 c001 	ldrb.w	ip, [r3, #1]
   19380:	428a      	cmp	r2, r1
   19382:	d009      	beq.n	19398 <ull_conn_ack_dequeue+0x24>
	_first += 1U;
   19384:	1c4a      	adds	r2, r1, #1
   19386:	b2d2      	uxtb	r2, r2
	mem = *((void **)(fifo + _first * size));
   19388:	fb01 3100 	mla	r1, r1, r0, r3
		_first = 0U;
   1938c:	4594      	cmp	ip, r2
   1938e:	bf08      	it	eq
   19390:	2200      	moveq	r2, #0
	mem = *((void **)(fifo + _first * size));
   19392:	6848      	ldr	r0, [r1, #4]
	*first = _first; /* Write back read-index */
   19394:	709a      	strb	r2, [r3, #2]
	return mem;
   19396:	4770      	bx	lr
		return NULL;
   19398:	2000      	movs	r0, #0
}
   1939a:	4770      	bx	lr
   1939c:	20000594 	.word	0x20000594

000193a0 <ull_conn_lll_ack_enqueue>:
{
   193a0:	b510      	push	{r4, lr}
	idx = MFIFO_ENQUEUE_GET(conn_ack, (void **)&lll_tx);
   193a2:	4a15      	ldr	r2, [pc, #84]	; (193f8 <ull_conn_lll_ack_enqueue+0x58>)
   193a4:	78d4      	ldrb	r4, [r2, #3]
	if (last == count) {
   193a6:	f892 e001 	ldrb.w	lr, [r2, #1]
   193aa:	f892 c002 	ldrb.w	ip, [r2, #2]
	last = last + 1;
   193ae:	1c63      	adds	r3, r4, #1
   193b0:	b2db      	uxtb	r3, r3
		last = 0U;
   193b2:	459e      	cmp	lr, r3
   193b4:	bf08      	it	eq
   193b6:	2300      	moveq	r3, #0
	if (last == first) {
   193b8:	459c      	cmp	ip, r3
   193ba:	d00c      	beq.n	193d6 <ull_conn_lll_ack_enqueue+0x36>
	*mem = (void *)(fifo + last * size); /* preceding buffer */
   193bc:	4696      	mov	lr, r2
   193be:	f81e cb04 	ldrb.w	ip, [lr], #4
   193c2:	fb1c fc04 	smulbb	ip, ip, r4
	LL_ASSERT(lll_tx);
   193c6:	eb1e 040c 	adds.w	r4, lr, ip
   193ca:	d004      	beq.n	193d6 <ull_conn_lll_ack_enqueue+0x36>
	lll_tx->handle = handle;
   193cc:	f82e 000c 	strh.w	r0, [lr, ip]
	lll_tx->node = tx;
   193d0:	6061      	str	r1, [r4, #4]
	*last = idx; /* Commit: Update write index */
   193d2:	70d3      	strb	r3, [r2, #3]
}
   193d4:	bd10      	pop	{r4, pc}
	LL_ASSERT(lll_tx);
   193d6:	4a09      	ldr	r2, [pc, #36]	; (193fc <ull_conn_lll_ack_enqueue+0x5c>)
   193d8:	4909      	ldr	r1, [pc, #36]	; (19400 <ull_conn_lll_ack_enqueue+0x60>)
   193da:	480a      	ldr	r0, [pc, #40]	; (19404 <ull_conn_lll_ack_enqueue+0x64>)
   193dc:	f44f 63c1 	mov.w	r3, #1544	; 0x608
   193e0:	f008 fba0 	bl	21b24 <printk>
   193e4:	4040      	eors	r0, r0
   193e6:	f380 8811 	msr	BASEPRI, r0
   193ea:	f04f 0003 	mov.w	r0, #3
   193ee:	df02      	svc	2
	lll_tx->handle = handle;
   193f0:	2300      	movs	r3, #0
   193f2:	801b      	strh	r3, [r3, #0]
   193f4:	deff      	udf	#255	; 0xff
   193f6:	bf00      	nop
   193f8:	20000594 	.word	0x20000594
   193fc:	000288c0 	.word	0x000288c0
   19400:	00028900 	.word	0x00028900
   19404:	00028404 	.word	0x00028404

00019408 <ull_conn_tx_ack>:
{
   19408:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(pdu_tx->len);
   1940a:	7953      	ldrb	r3, [r2, #5]
{
   1940c:	b082      	sub	sp, #8
   1940e:	4614      	mov	r4, r2
   19410:	4605      	mov	r5, r0
   19412:	460e      	mov	r6, r1
	LL_ASSERT(pdu_tx->len);
   19414:	b37b      	cbz	r3, 19476 <ull_conn_tx_ack+0x6e>
	if (pdu_tx->ll_id == PDU_DATA_LLID_CTRL) {
   19416:	7923      	ldrb	r3, [r4, #4]
   19418:	f003 0203 	and.w	r2, r3, #3
   1941c:	2a03      	cmp	r2, #3
   1941e:	d00d      	beq.n	1943c <ull_conn_tx_ack+0x34>
	} else if (handle == 0xFFFF) {
   19420:	f64f 72ff 	movw	r2, #65535	; 0xffff
   19424:	4295      	cmp	r5, r2
		pdu_tx->ll_id = PDU_DATA_LLID_RESV;
   19426:	bf04      	itt	eq
   19428:	f36f 0301 	bfceq	r3, #0, #2
   1942c:	7123      	strbeq	r3, [r4, #4]
	ll_tx_ack_put(handle, tx);
   1942e:	4621      	mov	r1, r4
   19430:	4628      	mov	r0, r5
}
   19432:	b002      	add	sp, #8
   19434:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   19438:	f7fa bfbc 	b.w	143b4 <ll_tx_ack_put>
		if (handle != 0xFFFF) {
   1943c:	f64f 73ff 	movw	r3, #65535	; 0xffff
   19440:	429d      	cmp	r5, r3
   19442:	d126      	bne.n	19492 <ull_conn_tx_ack+0x8a>
		if (link->next == (void *)tx) {
   19444:	6833      	ldr	r3, [r6, #0]
   19446:	429c      	cmp	r4, r3
   19448:	d03e      	beq.n	194c8 <ull_conn_tx_ack+0xc0>
			LL_ASSERT(!link->next);
   1944a:	2b00      	cmp	r3, #0
   1944c:	d0ef      	beq.n	1942e <ull_conn_tx_ack+0x26>
   1944e:	4a64      	ldr	r2, [pc, #400]	; (195e0 <ull_conn_tx_ack+0x1d8>)
   19450:	4964      	ldr	r1, [pc, #400]	; (195e4 <ull_conn_tx_ack+0x1dc>)
   19452:	4865      	ldr	r0, [pc, #404]	; (195e8 <ull_conn_tx_ack+0x1e0>)
   19454:	f44f 63c5 	mov.w	r3, #1576	; 0x628
   19458:	f008 fb64 	bl	21b24 <printk>
   1945c:	4040      	eors	r0, r0
   1945e:	f380 8811 	msr	BASEPRI, r0
   19462:	f04f 0003 	mov.w	r0, #3
   19466:	df02      	svc	2
	ll_tx_ack_put(handle, tx);
   19468:	4621      	mov	r1, r4
   1946a:	4628      	mov	r0, r5
}
   1946c:	b002      	add	sp, #8
   1946e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	ll_tx_ack_put(handle, tx);
   19472:	f7fa bf9f 	b.w	143b4 <ll_tx_ack_put>
	LL_ASSERT(pdu_tx->len);
   19476:	4a5a      	ldr	r2, [pc, #360]	; (195e0 <ull_conn_tx_ack+0x1d8>)
   19478:	495c      	ldr	r1, [pc, #368]	; (195ec <ull_conn_tx_ack+0x1e4>)
   1947a:	485b      	ldr	r0, [pc, #364]	; (195e8 <ull_conn_tx_ack+0x1e0>)
   1947c:	f240 6315 	movw	r3, #1557	; 0x615
   19480:	f008 fb50 	bl	21b24 <printk>
   19484:	4040      	eors	r0, r0
   19486:	f380 8811 	msr	BASEPRI, r0
   1948a:	f04f 0003 	mov.w	r0, #3
   1948e:	df02      	svc	2
   19490:	e7c1      	b.n	19416 <ull_conn_tx_ack+0xe>
	return mem_get(conn_pool, sizeof(struct ll_conn), handle);
   19492:	462a      	mov	r2, r5
   19494:	4856      	ldr	r0, [pc, #344]	; (195f0 <ull_conn_tx_ack+0x1e8>)
   19496:	f44f 71ea 	mov.w	r1, #468	; 0x1d4
   1949a:	f7f7 f96f 	bl	1077c <mem_get>
   1949e:	79e2      	ldrb	r2, [r4, #7]
   194a0:	3a02      	subs	r2, #2
   194a2:	4603      	mov	r3, r0
	switch (pdu_tx->llctrl.opcode) {
   194a4:	2a15      	cmp	r2, #21
   194a6:	d80c      	bhi.n	194c2 <ull_conn_tx_ack+0xba>
   194a8:	e8df f002 	tbb	[pc, r2]
   194ac:	0b150b51 	.word	0x0b150b51
   194b0:	0b0b0b0b 	.word	0x0b0b0b0b
   194b4:	470b150b 	.word	0x470b150b
   194b8:	440b0b0b 	.word	0x440b0b0b
   194bc:	587e0b0b 	.word	0x587e0b0b
   194c0:	231c      	.short	0x231c
		if (link->next == (void *)tx) {
   194c2:	6833      	ldr	r3, [r6, #0]
   194c4:	42a3      	cmp	r3, r4
   194c6:	d1c0      	bne.n	1944a <ull_conn_tx_ack+0x42>
			mem_release(tx, &mem_conn_tx_ctrl.free);
   194c8:	494a      	ldr	r1, [pc, #296]	; (195f4 <ull_conn_tx_ack+0x1ec>)
   194ca:	4620      	mov	r0, r4
}
   194cc:	b002      	add	sp, #8
   194ce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
			mem_release(tx, &mem_conn_tx_ctrl.free);
   194d2:	f7f7 b93b 	b.w	1074c <mem_release>
			conn->llcp_enc.pause_tx = 1U;
   194d6:	f890 215e 	ldrb.w	r2, [r0, #350]	; 0x15e
   194da:	f042 0202 	orr.w	r2, r2, #2
   194de:	f880 215e 	strb.w	r2, [r0, #350]	; 0x15e
		break;
   194e2:	e7af      	b.n	19444 <ull_conn_tx_ack+0x3c>
		conn->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   194e4:	f890 21b6 	ldrb.w	r2, [r0, #438]	; 0x1b6
   194e8:	2102      	movs	r1, #2
   194ea:	f361 0201 	bfi	r2, r1, #0, #2
   194ee:	f880 21b6 	strb.w	r2, [r0, #438]	; 0x1b6
		if (conn->lll.role) {
   194f2:	f993 203d 	ldrsb.w	r2, [r3, #61]	; 0x3d
   194f6:	2a00      	cmp	r2, #0
   194f8:	da15      	bge.n	19526 <ull_conn_tx_ack+0x11e>
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   194fa:	4a3f      	ldr	r2, [pc, #252]	; (195f8 <ull_conn_tx_ack+0x1f0>)
			phys = conn->llcp_phy.tx | lll->phy_tx;
   194fc:	f893 c064 	ldrb.w	ip, [r3, #100]	; 0x64
			uint8_t phy_tx_time[8] = {PHY_1M, PHY_1M, PHY_2M,
   19500:	e892 0003 	ldmia.w	r2, {r0, r1}
   19504:	aa02      	add	r2, sp, #8
   19506:	e902 0003 	stmdb	r2, {r0, r1}
			phys = conn->llcp_phy.tx | lll->phy_tx;
   1950a:	f893 21b6 	ldrb.w	r2, [r3, #438]	; 0x1b6
   1950e:	ea4c 0292 	orr.w	r2, ip, r2, lsr #2
			lll->phy_tx_time = phy_tx_time[phys];
   19512:	f002 0207 	and.w	r2, r2, #7
   19516:	a902      	add	r1, sp, #8
   19518:	440a      	add	r2, r1
   1951a:	f812 2c08 	ldrb.w	r2, [r2, #-8]
   1951e:	f362 1c06 	bfi	ip, r2, #4, #3
   19522:	f883 c064 	strb.w	ip, [r3, #100]	; 0x64
		conn->llcp_phy.pause_tx = 0U;
   19526:	f893 21b7 	ldrb.w	r2, [r3, #439]	; 0x1b7
   1952a:	f36f 0200 	bfc	r2, #0, #1
   1952e:	f883 21b7 	strb.w	r2, [r3, #439]	; 0x1b7
		break;
   19532:	e787      	b.n	19444 <ull_conn_tx_ack+0x3c>
		if (pdu_tx->llctrl.reject_ext_ind.reject_opcode !=
   19534:	7a22      	ldrb	r2, [r4, #8]
   19536:	2a03      	cmp	r2, #3
   19538:	d184      	bne.n	19444 <ull_conn_tx_ack+0x3c>
		conn->llcp_enc.pause_rx = 0U;
   1953a:	f893 215e 	ldrb.w	r2, [r3, #350]	; 0x15e
   1953e:	f022 0203 	bic.w	r2, r2, #3
   19542:	f883 215e 	strb.w	r2, [r3, #350]	; 0x15e
		conn->procedure_expire = 0U;
   19546:	2200      	movs	r2, #0
   19548:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
		break;
   1954c:	e77a      	b.n	19444 <ull_conn_tx_ack+0x3c>
		uint8_t reason = (pdu_tx->llctrl.terminate_ind.error_code ==
   1954e:	7a21      	ldrb	r1, [r4, #8]
   19550:	2913      	cmp	r1, #19
		conn_cleanup(conn, reason);
   19552:	bf08      	it	eq
   19554:	2116      	moveq	r1, #22
   19556:	f7ff fbdd 	bl	18d14 <conn_cleanup>
	break;
   1955a:	e773      	b.n	19444 <ull_conn_tx_ack+0x3c>
		if (conn->llcp_length.req != conn->llcp_length.ack) {
   1955c:	f890 01a4 	ldrb.w	r0, [r0, #420]	; 0x1a4
   19560:	f893 21a5 	ldrb.w	r2, [r3, #421]	; 0x1a5
   19564:	4282      	cmp	r2, r0
   19566:	f43f af6d 	beq.w	19444 <ull_conn_tx_ack+0x3c>
			switch (conn->llcp_length.state) {
   1956a:	f893 11a6 	ldrb.w	r1, [r3, #422]	; 0x1a6
   1956e:	f001 0207 	and.w	r2, r1, #7
   19572:	2a03      	cmp	r2, #3
   19574:	d004      	beq.n	19580 <ull_conn_tx_ack+0x178>
   19576:	3203      	adds	r2, #3
   19578:	f002 0207 	and.w	r2, r2, #7
   1957c:	2a01      	cmp	r2, #1
   1957e:	d8a0      	bhi.n	194c2 <ull_conn_tx_ack+0xba>
				conn->lll.max_tx_octets =
   19580:	f8b3 21aa 	ldrh.w	r2, [r3, #426]	; 0x1aa
   19584:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
				conn->lll.max_tx_time =
   19588:	f8b3 21ae 	ldrh.w	r2, [r3, #430]	; 0x1ae
   1958c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
				if (conn->llcp_length.state ==
   19590:	f001 0207 	and.w	r2, r1, #7
   19594:	2a05      	cmp	r2, #5
   19596:	d00f      	beq.n	195b8 <ull_conn_tx_ack+0x1b0>
				if (!conn->llcp_length.cache.tx_octets) {
   19598:	f8b3 21b0 	ldrh.w	r2, [r3, #432]	; 0x1b0
   1959c:	b992      	cbnz	r2, 195c4 <ull_conn_tx_ack+0x1bc>
					conn->llcp_length.ack =
   1959e:	f883 01a5 	strb.w	r0, [r3, #421]	; 0x1a5
					conn->procedure_expire = 0U;
   195a2:	f8a3 20cc 	strh.w	r2, [r3, #204]	; 0xcc
					break;
   195a6:	e74d      	b.n	19444 <ull_conn_tx_ack+0x3c>
		conn->llcp_length.state = LLCP_LENGTH_STATE_RSP_WAIT;
   195a8:	f890 21a6 	ldrb.w	r2, [r0, #422]	; 0x1a6
   195ac:	2102      	movs	r1, #2
   195ae:	f361 0202 	bfi	r2, r1, #0, #3
   195b2:	f880 21a6 	strb.w	r2, [r0, #422]	; 0x1a6
		break;
   195b6:	e745      	b.n	19444 <ull_conn_tx_ack+0x3c>
					conn->llcp_length.state =
   195b8:	2204      	movs	r2, #4
   195ba:	f362 0102 	bfi	r1, r2, #0, #3
   195be:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
					break;
   195c2:	e73f      	b.n	19444 <ull_conn_tx_ack+0x3c>
				conn->llcp_length.tx_octets =
   195c4:	f8a3 21aa 	strh.w	r2, [r3, #426]	; 0x1aa
				conn->llcp_length.cache.tx_octets = 0;
   195c8:	2200      	movs	r2, #0
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   195ca:	f362 0102 	bfi	r1, r2, #0, #3
				conn->llcp_length.cache.tx_octets = 0;
   195ce:	f8a3 21b0 	strh.w	r2, [r3, #432]	; 0x1b0
				conn->llcp_length.tx_time =
   195d2:	f8b3 21b2 	ldrh.w	r2, [r3, #434]	; 0x1b2
				conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   195d6:	f883 11a6 	strb.w	r1, [r3, #422]	; 0x1a6
				conn->llcp_length.tx_time =
   195da:	f8a3 21ae 	strh.w	r2, [r3, #430]	; 0x1ae
				break;
   195de:	e731      	b.n	19444 <ull_conn_tx_ack+0x3c>
   195e0:	000288c0 	.word	0x000288c0
   195e4:	00028abc 	.word	0x00028abc
   195e8:	00028404 	.word	0x00028404
   195ec:	00028ab0 	.word	0x00028ab0
   195f0:	2000e22c 	.word	0x2000e22c
   195f4:	2000e484 	.word	0x2000e484
   195f8:	00028ac8 	.word	0x00028ac8

000195fc <ull_conn_lll_max_tx_octets_get>:
	switch (lll->phy_tx_time) {
   195fc:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
	if (lll->enc_tx) {
   19600:	f890 2062 	ldrb.w	r2, [r0, #98]	; 0x62
	switch (lll->phy_tx_time) {
   19604:	f3c3 1302 	ubfx	r3, r3, #4, #3
   19608:	2b02      	cmp	r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   1960a:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
	return max_tx_octets;
   1960e:	f8b0 0040 	ldrh.w	r0, [r0, #64]	; 0x40
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   19612:	bf15      	itete	ne
   19614:	08db      	lsrne	r3, r3, #3
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   19616:	089b      	lsreq	r3, r3, #2
		max_tx_octets = (lll->max_tx_time >> 3) - 10;
   19618:	3b0a      	subne	r3, #10
		max_tx_octets = (lll->max_tx_time >> 2) - 11;
   1961a:	3b0b      	subeq	r3, #11
   1961c:	b29b      	uxth	r3, r3
	if (lll->enc_tx) {
   1961e:	06d2      	lsls	r2, r2, #27
		max_tx_octets -= 4U;
   19620:	bf44      	itt	mi
   19622:	3b04      	submi	r3, #4
   19624:	b29b      	uxthmi	r3, r3
}
   19626:	4298      	cmp	r0, r3
   19628:	bf28      	it	cs
   1962a:	4618      	movcs	r0, r3
   1962c:	4770      	bx	lr
   1962e:	bf00      	nop

00019630 <ticker_update_latency_cancel_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
}

static void ticker_update_latency_cancel_op_cb(uint32_t ticker_status,
					       void *params)
{
   19630:	b510      	push	{r4, lr}
   19632:	460c      	mov	r4, r1
	struct ll_conn *conn = params;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   19634:	b930      	cbnz	r0, 19644 <ticker_update_latency_cancel_op_cb+0x14>

	conn->slave.latency_cancel = 0U;
   19636:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   1963a:	f36f 0341 	bfc	r3, #1, #1
   1963e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   19642:	bd10      	pop	{r4, pc}
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   19644:	4a09      	ldr	r2, [pc, #36]	; (1966c <ticker_update_latency_cancel_op_cb+0x3c>)
   19646:	490a      	ldr	r1, [pc, #40]	; (19670 <ticker_update_latency_cancel_op_cb+0x40>)
   19648:	480a      	ldr	r0, [pc, #40]	; (19674 <ticker_update_latency_cancel_op_cb+0x44>)
   1964a:	f240 230d 	movw	r3, #525	; 0x20d
   1964e:	f008 fa69 	bl	21b24 <printk>
   19652:	4040      	eors	r0, r0
   19654:	f380 8811 	msr	BASEPRI, r0
   19658:	f04f 0003 	mov.w	r0, #3
   1965c:	df02      	svc	2
	conn->slave.latency_cancel = 0U;
   1965e:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   19662:	f36f 0341 	bfc	r3, #1, #1
   19666:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
}
   1966a:	bd10      	pop	{r4, pc}
   1966c:	00028ae8 	.word	0x00028ae8
   19670:	00028b2c 	.word	0x00028b2c
   19674:	00028404 	.word	0x00028404

00019678 <ticker_op_cb>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   19678:	b900      	cbnz	r0, 1967c <ticker_op_cb+0x4>
   1967a:	4770      	bx	lr
{
   1967c:	b508      	push	{r3, lr}
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   1967e:	4a07      	ldr	r2, [pc, #28]	; (1969c <ticker_op_cb+0x24>)
   19680:	4907      	ldr	r1, [pc, #28]	; (196a0 <ticker_op_cb+0x28>)
   19682:	4808      	ldr	r0, [pc, #32]	; (196a4 <ticker_op_cb+0x2c>)
   19684:	f240 2305 	movw	r3, #517	; 0x205
   19688:	f008 fa4c 	bl	21b24 <printk>
   1968c:	4040      	eors	r0, r0
   1968e:	f380 8811 	msr	BASEPRI, r0
   19692:	f04f 0003 	mov.w	r0, #3
   19696:	df02      	svc	2
}
   19698:	bd08      	pop	{r3, pc}
   1969a:	bf00      	nop
   1969c:	00028ae8 	.word	0x00028ae8
   196a0:	00028918 	.word	0x00028918
   196a4:	00028404 	.word	0x00028404

000196a8 <ticker_op_stop_adv_cb>:
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   196a8:	2801      	cmp	r0, #1
   196aa:	d000      	beq.n	196ae <ticker_op_stop_adv_cb+0x6>
   196ac:	4770      	bx	lr
{
   196ae:	b510      	push	{r4, lr}
   196b0:	460c      	mov	r4, r1
	LL_ASSERT(status != TICKER_STATUS_FAILURE ||
   196b2:	f7fa ff17 	bl	144e4 <ull_disable_mark_get>
   196b6:	4284      	cmp	r4, r0
   196b8:	d00c      	beq.n	196d4 <ticker_op_stop_adv_cb+0x2c>
   196ba:	4a07      	ldr	r2, [pc, #28]	; (196d8 <ticker_op_stop_adv_cb+0x30>)
   196bc:	4907      	ldr	r1, [pc, #28]	; (196dc <ticker_op_stop_adv_cb+0x34>)
   196be:	4808      	ldr	r0, [pc, #32]	; (196e0 <ticker_op_stop_adv_cb+0x38>)
   196c0:	f240 13fd 	movw	r3, #509	; 0x1fd
   196c4:	f008 fa2e 	bl	21b24 <printk>
   196c8:	4040      	eors	r0, r0
   196ca:	f380 8811 	msr	BASEPRI, r0
   196ce:	f04f 0003 	mov.w	r0, #3
   196d2:	df02      	svc	2
}
   196d4:	bd10      	pop	{r4, pc}
   196d6:	bf00      	nop
   196d8:	00028ae8 	.word	0x00028ae8
   196dc:	00028b40 	.word	0x00028b40
   196e0:	00028404 	.word	0x00028404

000196e4 <ull_slave_ticker_cb>:
{
   196e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   196e6:	460f      	mov	r7, r1
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   196e8:	8d99      	ldrh	r1, [r3, #44]	; 0x2c
{
   196ea:	461c      	mov	r4, r3
	if (unlikely(conn->lll.handle == 0xFFFF)) {
   196ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
   196f0:	4299      	cmp	r1, r3
   196f2:	d023      	beq.n	1973c <ull_slave_ticker_cb+0x58>
		ret = ull_conn_llcp(conn, ticks_at_expire, lazy);
   196f4:	4605      	mov	r5, r0
   196f6:	4601      	mov	r1, r0
   196f8:	4620      	mov	r0, r4
   196fa:	4616      	mov	r6, r2
   196fc:	f7fe f888 	bl	17810 <ull_conn_llcp>
		if (ret) {
   19700:	b9e0      	cbnz	r0, 1973c <ull_slave_ticker_cb+0x58>
	return ++hdr->ref;
   19702:	7c23      	ldrb	r3, [r4, #16]
   19704:	3301      	adds	r3, #1
   19706:	b2db      	uxtb	r3, r3
   19708:	7423      	strb	r3, [r4, #16]
	LL_ASSERT(ref);
   1970a:	b333      	cbz	r3, 1975a <ull_slave_ticker_cb+0x76>
	p.ticks_at_expire = ticks_at_expire;
   1970c:	491a      	ldr	r1, [pc, #104]	; (19778 <ull_slave_ticker_cb+0x94>)
	mfy.param = &p;
   1970e:	4b1b      	ldr	r3, [pc, #108]	; (1977c <ull_slave_ticker_cb+0x98>)
	p.ticks_at_expire = ticks_at_expire;
   19710:	600d      	str	r5, [r1, #0]
	p.param = &conn->lll;
   19712:	f104 021c 	add.w	r2, r4, #28
   19716:	60ca      	str	r2, [r1, #12]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19718:	2200      	movs	r2, #0
	p.remainder = remainder;
   1971a:	604f      	str	r7, [r1, #4]
	p.lazy = lazy;
   1971c:	810e      	strh	r6, [r1, #8]
	mfy.param = &p;
   1971e:	6099      	str	r1, [r3, #8]
	err = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   19720:	2001      	movs	r0, #1
   19722:	4611      	mov	r1, r2
   19724:	f7f7 f8d0 	bl	108c8 <mayfly_enqueue>
	LL_ASSERT(!err);
   19728:	b948      	cbnz	r0, 1973e <ull_slave_ticker_cb+0x5a>
	ull_conn_tx_demux(UINT8_MAX);
   1972a:	20ff      	movs	r0, #255	; 0xff
   1972c:	f7ff faa2 	bl	18c74 <ull_conn_tx_demux>
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   19730:	4620      	mov	r0, r4
   19732:	21ff      	movs	r1, #255	; 0xff
}
   19734:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	ull_conn_tx_lll_enqueue(conn, UINT8_MAX);
   19738:	f7ff bd00 	b.w	1913c <ull_conn_tx_lll_enqueue>
}
   1973c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(!err);
   1973e:	4a10      	ldr	r2, [pc, #64]	; (19780 <ull_slave_ticker_cb+0x9c>)
   19740:	4910      	ldr	r1, [pc, #64]	; (19784 <ull_slave_ticker_cb+0xa0>)
   19742:	4811      	ldr	r0, [pc, #68]	; (19788 <ull_slave_ticker_cb+0xa4>)
   19744:	f240 13c1 	movw	r3, #449	; 0x1c1
   19748:	f008 f9ec 	bl	21b24 <printk>
   1974c:	4040      	eors	r0, r0
   1974e:	f380 8811 	msr	BASEPRI, r0
   19752:	f04f 0003 	mov.w	r0, #3
   19756:	df02      	svc	2
   19758:	e7e7      	b.n	1972a <ull_slave_ticker_cb+0x46>
	LL_ASSERT(ref);
   1975a:	4a09      	ldr	r2, [pc, #36]	; (19780 <ull_slave_ticker_cb+0x9c>)
   1975c:	490b      	ldr	r1, [pc, #44]	; (1978c <ull_slave_ticker_cb+0xa8>)
   1975e:	480a      	ldr	r0, [pc, #40]	; (19788 <ull_slave_ticker_cb+0xa4>)
   19760:	f240 13b5 	movw	r3, #437	; 0x1b5
   19764:	f008 f9de 	bl	21b24 <printk>
   19768:	4040      	eors	r0, r0
   1976a:	f380 8811 	msr	BASEPRI, r0
   1976e:	f04f 0003 	mov.w	r0, #3
   19772:	df02      	svc	2
   19774:	e7ca      	b.n	1970c <ull_slave_ticker_cb+0x28>
   19776:	bf00      	nop
   19778:	2000e54c 	.word	0x2000e54c
   1977c:	2000061c 	.word	0x2000061c
   19780:	00028ae8 	.word	0x00028ae8
   19784:	00028684 	.word	0x00028684
   19788:	00028404 	.word	0x00028404
   1978c:	00028848 	.word	0x00028848

00019790 <ull_slave_latency_cancel>:
	if (conn->lll.latency_event && !conn->slave.latency_cancel) {
   19790:	8e83      	ldrh	r3, [r0, #52]	; 0x34
   19792:	b123      	cbz	r3, 1979e <ull_slave_latency_cancel+0xe>
   19794:	f890 20dc 	ldrb.w	r2, [r0, #220]	; 0xdc
   19798:	f012 0302 	ands.w	r3, r2, #2
   1979c:	d000      	beq.n	197a0 <ull_slave_latency_cancel+0x10>
   1979e:	4770      	bx	lr
{
   197a0:	b510      	push	{r4, lr}
		conn->slave.latency_cancel = 1U;
   197a2:	f042 0202 	orr.w	r2, r2, #2
{
   197a6:	b088      	sub	sp, #32
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   197a8:	4c11      	ldr	r4, [pc, #68]	; (197f0 <ull_slave_latency_cancel+0x60>)
		conn->slave.latency_cancel = 1U;
   197aa:	f880 20dc 	strb.w	r2, [r0, #220]	; 0xdc
				      (TICKER_ID_CONN_BASE + handle),
   197ae:	3103      	adds	r1, #3
			ticker_update(TICKER_INSTANCE_ID_CTLR,
   197b0:	2201      	movs	r2, #1
   197b2:	e9cd 3202 	strd	r3, r2, [sp, #8]
   197b6:	e9cd 3404 	strd	r3, r4, [sp, #16]
   197ba:	e9cd 3300 	strd	r3, r3, [sp]
   197be:	9006      	str	r0, [sp, #24]
   197c0:	b2ca      	uxtb	r2, r1
   197c2:	4618      	mov	r0, r3
   197c4:	2103      	movs	r1, #3
   197c6:	f7f8 fa61 	bl	11c8c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   197ca:	f030 0302 	bics.w	r3, r0, #2
   197ce:	d00c      	beq.n	197ea <ull_slave_latency_cancel+0x5a>
   197d0:	4a08      	ldr	r2, [pc, #32]	; (197f4 <ull_slave_latency_cancel+0x64>)
   197d2:	4909      	ldr	r1, [pc, #36]	; (197f8 <ull_slave_latency_cancel+0x68>)
   197d4:	4809      	ldr	r0, [pc, #36]	; (197fc <ull_slave_latency_cancel+0x6c>)
   197d6:	f240 1387 	movw	r3, #391	; 0x187
   197da:	f008 f9a3 	bl	21b24 <printk>
   197de:	4040      	eors	r0, r0
   197e0:	f380 8811 	msr	BASEPRI, r0
   197e4:	f04f 0003 	mov.w	r0, #3
   197e8:	df02      	svc	2
}
   197ea:	b008      	add	sp, #32
   197ec:	bd10      	pop	{r4, pc}
   197ee:	bf00      	nop
   197f0:	00019631 	.word	0x00019631
   197f4:	00028ae8 	.word	0x00028ae8
   197f8:	000289a0 	.word	0x000289a0
   197fc:	00028404 	.word	0x00028404

00019800 <ll_start_enc_req_send>:
{
   19800:	b570      	push	{r4, r5, r6, lr}
   19802:	460e      	mov	r6, r1
   19804:	4615      	mov	r5, r2
	conn = ll_connected_get(handle);
   19806:	f7fc f989 	bl	15b1c <ll_connected_get>
	if (!conn) {
   1980a:	2800      	cmp	r0, #0
   1980c:	d040      	beq.n	19890 <ll_start_enc_req_send+0x90>
	if (error_code) {
   1980e:	4604      	mov	r4, r0
   19810:	b95e      	cbnz	r6, 1982a <ll_start_enc_req_send+0x2a>
		if ((conn->llcp_req == conn->llcp_ack) ||
   19812:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   19816:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
   1981a:	429a      	cmp	r2, r3
   1981c:	d003      	beq.n	19826 <ll_start_enc_req_send+0x26>
   1981e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
   19822:	2b03      	cmp	r3, #3
   19824:	d026      	beq.n	19874 <ll_start_enc_req_send+0x74>
				return BT_HCI_ERR_CMD_DISALLOWED;
   19826:	200c      	movs	r0, #12
}
   19828:	bd70      	pop	{r4, r5, r6, pc}
		if (conn->llcp_enc.refresh == 0U) {
   1982a:	f890 015e 	ldrb.w	r0, [r0, #350]	; 0x15e
   1982e:	f010 0004 	ands.w	r0, r0, #4
   19832:	d112      	bne.n	1985a <ll_start_enc_req_send+0x5a>
			if ((conn->llcp_req == conn->llcp_ack) ||
   19834:	f894 20e8 	ldrb.w	r2, [r4, #232]	; 0xe8
   19838:	f894 30e9 	ldrb.w	r3, [r4, #233]	; 0xe9
   1983c:	429a      	cmp	r2, r3
   1983e:	d0f2      	beq.n	19826 <ll_start_enc_req_send+0x26>
   19840:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   19844:	2b03      	cmp	r3, #3
   19846:	d1ee      	bne.n	19826 <ll_start_enc_req_send+0x26>
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19848:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->llcp.encryption.error_code = error_code;
   1984c:	f884 60f9 	strb.w	r6, [r4, #249]	; 0xf9
			conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19850:	f360 0301 	bfi	r3, r0, #0, #2
   19854:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
}
   19858:	bd70      	pop	{r4, r5, r6, pc}
			    conn->llcp_terminate.req) {
   1985a:	f894 2138 	ldrb.w	r2, [r4, #312]	; 0x138
			if (conn->llcp_terminate.ack !=
   1985e:	f894 3139 	ldrb.w	r3, [r4, #313]	; 0x139
   19862:	4293      	cmp	r3, r2
   19864:	d1df      	bne.n	19826 <ll_start_enc_req_send+0x26>
			conn->llcp_terminate.req++;
   19866:	3301      	adds	r3, #1
			conn->llcp_terminate.reason_own = error_code;
   19868:	f884 613a 	strb.w	r6, [r4, #314]	; 0x13a
			conn->llcp_terminate.req++;
   1986c:	f884 3138 	strb.w	r3, [r4, #312]	; 0x138
	return 0;
   19870:	2000      	movs	r0, #0
}
   19872:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp_enc.ltk[0], ltk,
   19874:	2210      	movs	r2, #16
   19876:	4629      	mov	r1, r5
   19878:	f200 1069 	addw	r0, r0, #361	; 0x169
   1987c:	f00a fdf4 	bl	24468 <memcpy>
		conn->llcp.encryption.state = LLCP_ENC_STATE_INPROG;
   19880:	f8b4 30f8 	ldrh.w	r3, [r4, #248]	; 0xf8
   19884:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   19888:	f8a4 30f8 	strh.w	r3, [r4, #248]	; 0xf8
	return 0;
   1988c:	4630      	mov	r0, r6
}
   1988e:	bd70      	pop	{r4, r5, r6, pc}
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19890:	2002      	movs	r0, #2
}
   19892:	bd70      	pop	{r4, r5, r6, pc}

00019894 <lll_chan_sel_1>:
#endif /* CONFIG_BT_CTLR_CHAN_SEL_2 */

#if defined(CONFIG_BT_CONN)
uint8_t lll_chan_sel_1(uint8_t *chan_use, uint8_t hop, uint16_t latency, uint8_t *chan_map,
		    uint8_t chan_count)
{
   19894:	b530      	push	{r4, r5, lr}
	uint8_t chan_next;

	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   19896:	fb02 1c01 	mla	ip, r2, r1, r1
   1989a:	7802      	ldrb	r2, [r0, #0]
   1989c:	491c      	ldr	r1, [pc, #112]	; (19910 <lll_chan_sel_1+0x7c>)
{
   1989e:	f89d 500c 	ldrb.w	r5, [sp, #12]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   198a2:	4494      	add	ip, r2
   198a4:	fb81 210c 	smull	r2, r1, r1, ip
   198a8:	4461      	add	r1, ip
   198aa:	1149      	asrs	r1, r1, #5
   198ac:	eb01 0ec1 	add.w	lr, r1, r1, lsl #3
   198b0:	eb01 018e 	add.w	r1, r1, lr, lsl #2
{
   198b4:	4604      	mov	r4, r0
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   198b6:	ebac 0101 	sub.w	r1, ip, r1
   198ba:	b2c8      	uxtb	r0, r1
	*chan_use = chan_next;
   198bc:	7020      	strb	r0, [r4, #0]

	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   198be:	08c4      	lsrs	r4, r0, #3
   198c0:	f001 0107 	and.w	r1, r1, #7
   198c4:	f813 c004 	ldrb.w	ip, [r3, r4]
   198c8:	fa4c f101 	asr.w	r1, ip, r1
   198cc:	f011 0101 	ands.w	r1, r1, #1
   198d0:	d11d      	bne.n	1990e <lll_chan_sel_1+0x7a>
		uint8_t chan_index;

		chan_index = chan_next % chan_count;
   198d2:	fbb0 f2f5 	udiv	r2, r0, r5
   198d6:	fb05 0212 	mls	r2, r5, r2, r0
   198da:	b2d2      	uxtb	r2, r2
	uint8_t chan_next;
	uint8_t byte_count;

	chan_next = 0U;
	byte_count = 5U;
	while (byte_count--) {
   198dc:	f103 3eff 	add.w	lr, r3, #4294967295
   198e0:	1d1c      	adds	r4, r3, #4
	chan_next = 0U;
   198e2:	4608      	mov	r0, r1
		uint8_t bite;
		uint8_t bit_count;

		bite = *chan_map;
   198e4:	f100 0c08 	add.w	ip, r0, #8
   198e8:	f81e 3f01 	ldrb.w	r3, [lr, #1]!
		bit_count = 8U;
		while (bit_count--) {
   198ec:	fa5f fc8c 	uxtb.w	ip, ip
			if (bite & 0x01) {
   198f0:	f013 0f01 	tst.w	r3, #1
				if (chan_index == 0U) {
					break;
				}
				chan_index--;
			}
			chan_next++;
   198f4:	f100 0101 	add.w	r1, r0, #1
			bite >>= 1;
   198f8:	ea4f 0353 	mov.w	r3, r3, lsr #1
			if (bite & 0x01) {
   198fc:	d002      	beq.n	19904 <lll_chan_sel_1+0x70>
				if (chan_index == 0U) {
   198fe:	b132      	cbz	r2, 1990e <lll_chan_sel_1+0x7a>
				chan_index--;
   19900:	3a01      	subs	r2, #1
   19902:	b2d2      	uxtb	r2, r2
			chan_next++;
   19904:	b2c8      	uxtb	r0, r1
		while (bit_count--) {
   19906:	4584      	cmp	ip, r0
   19908:	d1f2      	bne.n	198f0 <lll_chan_sel_1+0x5c>
	while (byte_count--) {
   1990a:	45a6      	cmp	lr, r4
   1990c:	d1ea      	bne.n	198e4 <lll_chan_sel_1+0x50>
}
   1990e:	bd30      	pop	{r4, r5, pc}
   19910:	dd67c8a7 	.word	0xdd67c8a7

00019914 <lll_chan_sel_2>:
{
   19914:	b5f0      	push	{r4, r5, r6, r7, lr}
/* Attribution:
 * http://graphics.stanford.edu/%7Eseander/bithacks.html#ReverseByteWith32Bits
 */
static uint8_t chan_rev_8(uint8_t b)
{
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19916:	4d2f      	ldr	r5, [pc, #188]	; (199d4 <lll_chan_sel_2+0xc0>)
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19918:	4c2f      	ldr	r4, [pc, #188]	; (199d8 <lll_chan_sel_2+0xc4>)
static uint16_t chan_prn(uint16_t counter, uint16_t chan_id)
{
	uint8_t iterate;
	uint16_t prn_e;

	prn_e = counter ^ chan_id;
   1991a:	4048      	eors	r0, r1
   1991c:	f04f 0c03 	mov.w	ip, #3
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   19920:	0a07      	lsrs	r7, r0, #8
   19922:	b2c0      	uxtb	r0, r0
   19924:	eb07 2787 	add.w	r7, r7, r7, lsl #10
   19928:	eb00 2e80 	add.w	lr, r0, r0, lsl #10
   1992c:	ea05 0647 	and.w	r6, r5, r7, lsl #1
   19930:	ea05 004e 	and.w	r0, r5, lr, lsl #1
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19934:	ea04 1747 	and.w	r7, r4, r7, lsl #5
   19938:	ea04 1e4e 	and.w	lr, r4, lr, lsl #5
	b = (((uint32_t)b * 0x0802LU & 0x22110LU) |
   1993c:	433e      	orrs	r6, r7
   1993e:	ea40 000e 	orr.w	r0, r0, lr
	     ((uint32_t)b * 0x8020LU & 0x88440LU)) * 0x10101LU >> 16;
   19942:	eb00 2700 	add.w	r7, r0, r0, lsl #8
   19946:	eb06 2e06 	add.w	lr, r6, r6, lsl #8
   1994a:	eb06 260e 	add.w	r6, r6, lr, lsl #8
   1994e:	eb00 2007 	add.w	r0, r0, r7, lsl #8
   19952:	0c36      	lsrs	r6, r6, #16
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   19954:	f3c0 4007 	ubfx	r0, r0, #16, #8
   19958:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1995c:	eb00 1000 	add.w	r0, r0, r0, lsl #4

	for (iterate = 0U; iterate < 3; iterate++) {
   19960:	f10c 3cff 	add.w	ip, ip, #4294967295
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   19964:	4408      	add	r0, r1
	for (iterate = 0U; iterate < 3; iterate++) {
   19966:	f01c 0cff 	ands.w	ip, ip, #255	; 0xff
	return ((uint32_t)a * 17U + b) & 0xFFFF;
   1996a:	b280      	uxth	r0, r0
	for (iterate = 0U; iterate < 3; iterate++) {
   1996c:	d1d8      	bne.n	19920 <lll_chan_sel_2+0xc>
		prn_e = chan_perm(prn_e);
		prn_e = chan_mam(prn_e, chan_id);
	}

	prn_e ^= chan_id;
   1996e:	4041      	eors	r1, r0
	chan_next = prn_e % 37;
   19970:	481a      	ldr	r0, [pc, #104]	; (199dc <lll_chan_sel_2+0xc8>)
   19972:	fba0 4001 	umull	r4, r0, r0, r1
   19976:	1a0c      	subs	r4, r1, r0
   19978:	eb00 0054 	add.w	r0, r0, r4, lsr #1
   1997c:	0940      	lsrs	r0, r0, #5
   1997e:	eb00 04c0 	add.w	r4, r0, r0, lsl #3
   19982:	eb00 0084 	add.w	r0, r0, r4, lsl #2
   19986:	1a08      	subs	r0, r1, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19988:	f3c0 04c4 	ubfx	r4, r0, #3, #5
   1998c:	f000 0507 	and.w	r5, r0, #7
   19990:	5d14      	ldrb	r4, [r2, r4]
   19992:	412c      	asrs	r4, r5
   19994:	07e4      	lsls	r4, r4, #31
	chan_next = prn_e % 37;
   19996:	b2c0      	uxtb	r0, r0
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0U) {
   19998:	d41a      	bmi.n	199d0 <lll_chan_sel_2+0xbc>
		chan_index = ((uint32_t)chan_count * prn_e) >> 16;
   1999a:	fb01 f303 	mul.w	r3, r1, r3
   1999e:	1e56      	subs	r6, r2, #1
   199a0:	f3c3 4307 	ubfx	r3, r3, #16, #8
	while (byte_count--) {
   199a4:	3204      	adds	r2, #4
	chan_next = 0U;
   199a6:	4660      	mov	r0, ip
		bite = *chan_map;
   199a8:	f100 0508 	add.w	r5, r0, #8
   199ac:	f816 1f01 	ldrb.w	r1, [r6, #1]!
		while (bit_count--) {
   199b0:	b2ed      	uxtb	r5, r5
			if (bite & 0x01) {
   199b2:	f011 0f01 	tst.w	r1, #1
			chan_next++;
   199b6:	f100 0401 	add.w	r4, r0, #1
			bite >>= 1;
   199ba:	ea4f 0151 	mov.w	r1, r1, lsr #1
			if (bite & 0x01) {
   199be:	d002      	beq.n	199c6 <lll_chan_sel_2+0xb2>
				if (chan_index == 0U) {
   199c0:	b133      	cbz	r3, 199d0 <lll_chan_sel_2+0xbc>
				chan_index--;
   199c2:	3b01      	subs	r3, #1
   199c4:	b2db      	uxtb	r3, r3
			chan_next++;
   199c6:	b2e0      	uxtb	r0, r4
		while (bit_count--) {
   199c8:	42a8      	cmp	r0, r5
   199ca:	d1f2      	bne.n	199b2 <lll_chan_sel_2+0x9e>
	while (byte_count--) {
   199cc:	42b2      	cmp	r2, r6
   199ce:	d1eb      	bne.n	199a8 <lll_chan_sel_2+0x94>
}
   199d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   199d2:	bf00      	nop
   199d4:	00022110 	.word	0x00022110
   199d8:	00088440 	.word	0x00088440
   199dc:	bacf914d 	.word	0xbacf914d

000199e0 <rl_update>:
		}
	}
}

static void rl_update(void)
{
   199e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   199e4:	4d18      	ldr	r5, [pc, #96]	; (19a48 <rl_update+0x68>)
   199e6:	4e19      	ldr	r6, [pc, #100]	; (19a4c <rl_update+0x6c>)
   199e8:	2400      	movs	r4, #0
   199ea:	f106 39ff 	add.w	r9, r6, #4294967295
#endif /* !CONFIG_BT_CTLR_PRIVACY */

static void filter_insert(struct lll_filter *filter, int index, uint8_t addr_type,
			   uint8_t *bdaddr)
{
	filter->enable_bitmask |= BIT(index);
   199ee:	1eaf      	subs	r7, r5, #2
   199f0:	f04f 0801 	mov.w	r8, #1
   199f4:	e006      	b.n	19a04 <rl_update+0x24>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   199f6:	3401      	adds	r4, #1
   199f8:	2c08      	cmp	r4, #8
   199fa:	f105 0506 	add.w	r5, r5, #6
   199fe:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19a02:	d01e      	beq.n	19a42 <rl_update+0x62>
		if (rl[i].taken) {
   19a04:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19a08:	f819 3033 	ldrb.w	r3, [r9, r3, lsl #3]
   19a0c:	07da      	lsls	r2, r3, #31
   19a0e:	d5f2      	bpl.n	199f6 <rl_update+0x16>
	filter->enable_bitmask |= BIT(index);
   19a10:	7839      	ldrb	r1, [r7, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19a12:	787a      	ldrb	r2, [r7, #1]
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   19a14:	f3c3 1380 	ubfx	r3, r3, #6, #1
	filter->enable_bitmask |= BIT(index);
   19a18:	fa08 fc04 	lsl.w	ip, r8, r4
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19a1c:	40a3      	lsls	r3, r4
	filter->enable_bitmask |= BIT(index);
   19a1e:	ea41 0c0c 	orr.w	ip, r1, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19a22:	4313      	orrs	r3, r2
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19a24:	4631      	mov	r1, r6
   19a26:	4628      	mov	r0, r5
   19a28:	2206      	movs	r2, #6
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19a2a:	3401      	adds	r4, #1
	filter->enable_bitmask |= BIT(index);
   19a2c:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19a30:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19a32:	f00a fd19 	bl	24468 <memcpy>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19a36:	2c08      	cmp	r4, #8
   19a38:	f105 0506 	add.w	r5, r5, #6
   19a3c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19a40:	d1e0      	bne.n	19a04 <rl_update+0x24>
}
   19a42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   19a46:	bf00      	nop
   19a48:	2000e756 	.word	0x2000e756
   19a4c:	2000e615 	.word	0x2000e615

00019a50 <wl_update>:
{
   19a50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19a54:	4e20      	ldr	r6, [pc, #128]	; (19ad8 <wl_update+0x88>)
   19a56:	4d21      	ldr	r5, [pc, #132]	; (19adc <wl_update+0x8c>)
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19a58:	f8df 8084 	ldr.w	r8, [pc, #132]	; 19ae0 <wl_update+0x90>
   19a5c:	f8df 9084 	ldr.w	r9, [pc, #132]	; 19ae4 <wl_update+0x94>
{
   19a60:	2400      	movs	r4, #0
   19a62:	f1a5 0a02 	sub.w	sl, r5, #2
	filter->enable_bitmask |= BIT(index);
   19a66:	1eb7      	subs	r7, r6, #2
		if (!wl[i].taken) {
   19a68:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19a6c:	f04f 0c01 	mov.w	ip, #1
		if (!wl[i].taken) {
   19a70:	f013 0f01 	tst.w	r3, #1
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19a74:	4630      	mov	r0, r6
	filter->enable_bitmask |= BIT(index);
   19a76:	fa0c fc04 	lsl.w	ip, ip, r4
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19a7a:	4629      	mov	r1, r5
	for (i = 0U; i < WL_SIZE; i++) {
   19a7c:	f106 0606 	add.w	r6, r6, #6
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19a80:	f04f 0206 	mov.w	r2, #6
		if (!wl[i].taken) {
   19a84:	d021      	beq.n	19aca <wl_update+0x7a>
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19a86:	f898 3000 	ldrb.w	r3, [r8]
   19a8a:	b163      	cbz	r3, 19aa6 <wl_update+0x56>
		j = wl[i].rl_idx;
   19a8c:	f815 3c01 	ldrb.w	r3, [r5, #-1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19a90:	2b07      	cmp	r3, #7
   19a92:	eb03 0e83 	add.w	lr, r3, r3, lsl #2
   19a96:	d806      	bhi.n	19aa6 <wl_update+0x56>
   19a98:	f819 303e 	ldrb.w	r3, [r9, lr, lsl #3]
   19a9c:	f013 0f04 	tst.w	r3, #4
   19aa0:	d001      	beq.n	19aa6 <wl_update+0x56>
   19aa2:	06db      	lsls	r3, r3, #27
   19aa4:	d511      	bpl.n	19aca <wl_update+0x7a>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19aa6:	f81a 3034 	ldrb.w	r3, [sl, r4, lsl #3]
	filter->enable_bitmask |= BIT(index);
   19aaa:	f897 e000 	ldrb.w	lr, [r7]
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19aae:	f3c3 0340 	ubfx	r3, r3, #1, #1
	filter->enable_bitmask |= BIT(index);
   19ab2:	ea4e 0c0c 	orr.w	ip, lr, ip
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19ab6:	f897 e001 	ldrb.w	lr, [r7, #1]
	filter->enable_bitmask |= BIT(index);
   19aba:	f887 c000 	strb.w	ip, [r7]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19abe:	40a3      	lsls	r3, r4
   19ac0:	ea4e 0303 	orr.w	r3, lr, r3
   19ac4:	707b      	strb	r3, [r7, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19ac6:	f00a fccf 	bl	24468 <memcpy>
	for (i = 0U; i < WL_SIZE; i++) {
   19aca:	3401      	adds	r4, #1
   19acc:	2c08      	cmp	r4, #8
   19ace:	f105 0508 	add.w	r5, r5, #8
   19ad2:	d1c9      	bne.n	19a68 <wl_update+0x18>
}
   19ad4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   19ad8:	2000e7ce 	.word	0x2000e7ce
   19adc:	2000e78e 	.word	0x2000e78e
   19ae0:	2000f319 	.word	0x2000f319
   19ae4:	2000e614 	.word	0x2000e614

00019ae8 <ll_wl_size_get>:
}
   19ae8:	2008      	movs	r0, #8
   19aea:	4770      	bx	lr

00019aec <ll_wl_clear>:
{
   19aec:	b510      	push	{r4, lr}
	if (ull_adv_filter_pol_get(0)) {
   19aee:	2000      	movs	r0, #0
   19af0:	f7fb fa58 	bl	14fa4 <ull_adv_filter_pol_get>
   19af4:	b9d8      	cbnz	r0, 19b2e <ll_wl_clear+0x42>
   19af6:	4a0f      	ldr	r2, [pc, #60]	; (19b34 <ll_wl_clear+0x48>)
			rl[j].wl = 0U;
   19af8:	4c0f      	ldr	r4, [pc, #60]	; (19b38 <ll_wl_clear+0x4c>)
		uint8_t j = wl[i].rl_idx;
   19afa:	eb02 03c0 	add.w	r3, r2, r0, lsl #3
   19afe:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19b00:	2b07      	cmp	r3, #7
			rl[j].wl = 0U;
   19b02:	eb03 0183 	add.w	r1, r3, r3, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   19b06:	d805      	bhi.n	19b14 <ll_wl_clear+0x28>
			rl[j].wl = 0U;
   19b08:	f814 3031 	ldrb.w	r3, [r4, r1, lsl #3]
   19b0c:	f36f 1345 	bfc	r3, #5, #1
   19b10:	f804 3031 	strb.w	r3, [r4, r1, lsl #3]
		wl[i].taken = 0U;
   19b14:	f812 3030 	ldrb.w	r3, [r2, r0, lsl #3]
   19b18:	f36f 0300 	bfc	r3, #0, #1
   19b1c:	f802 3030 	strb.w	r3, [r2, r0, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19b20:	3001      	adds	r0, #1
   19b22:	2808      	cmp	r0, #8
   19b24:	d1e9      	bne.n	19afa <ll_wl_clear+0xe>
	wl_anon = 0U;
   19b26:	4b05      	ldr	r3, [pc, #20]	; (19b3c <ll_wl_clear+0x50>)
   19b28:	2000      	movs	r0, #0
   19b2a:	7018      	strb	r0, [r3, #0]
}
   19b2c:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19b2e:	200c      	movs	r0, #12
}
   19b30:	bd10      	pop	{r4, pc}
   19b32:	bf00      	nop
   19b34:	2000e78c 	.word	0x2000e78c
   19b38:	2000e614 	.word	0x2000e614
   19b3c:	2000f31a 	.word	0x2000f31a

00019b40 <ll_wl_add>:
{
   19b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19b44:	4681      	mov	r9, r0
   19b46:	b083      	sub	sp, #12
	if (ull_adv_filter_pol_get(0)) {
   19b48:	2000      	movs	r0, #0
   19b4a:	f7fb fa2b 	bl	14fa4 <ull_adv_filter_pol_get>
   19b4e:	2800      	cmp	r0, #0
   19b50:	d173      	bne.n	19c3a <ll_wl_add+0xfa>
	if (addr->type == ADDR_TYPE_ANON) {
   19b52:	f899 a000 	ldrb.w	sl, [r9]
   19b56:	f1ba 0fff 	cmp.w	sl, #255	; 0xff
   19b5a:	4605      	mov	r5, r0
   19b5c:	d067      	beq.n	19c2e <ll_wl_add+0xee>
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19b5e:	4e45      	ldr	r6, [pc, #276]	; (19c74 <ll_wl_add+0x134>)
   19b60:	f109 0b01 	add.w	fp, r9, #1
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19b64:	f00a 0a01 	and.w	sl, sl, #1
		*free = FILTER_IDX_NONE;
   19b68:	f04f 08ff 	mov.w	r8, #255	; 0xff
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19b6c:	4604      	mov	r4, r0
   19b6e:	1eb7      	subs	r7, r6, #2
   19b70:	e009      	b.n	19b86 <ll_wl_add+0x46>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19b72:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   19b76:	d101      	bne.n	19b7c <ll_wl_add+0x3c>
			*free = i;
   19b78:	fa5f f884 	uxtb.w	r8, r4
	for (i = 0; i < WL_SIZE; i++) {
   19b7c:	3401      	adds	r4, #1
   19b7e:	2c08      	cmp	r4, #8
   19b80:	f106 0608 	add.w	r6, r6, #8
   19b84:	d017      	beq.n	19bb6 <ll_wl_add+0x76>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19b86:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19b8a:	07d8      	lsls	r0, r3, #31
   19b8c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19b90:	d5ef      	bpl.n	19b72 <ll_wl_add+0x32>
   19b92:	4552      	cmp	r2, sl
   19b94:	d1f2      	bne.n	19b7c <ll_wl_add+0x3c>
   19b96:	2206      	movs	r2, #6
   19b98:	4630      	mov	r0, r6
   19b9a:	4659      	mov	r1, fp
   19b9c:	f00a fc53 	bl	24446 <memcmp>
   19ba0:	2800      	cmp	r0, #0
   19ba2:	d041      	beq.n	19c28 <ll_wl_add+0xe8>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19ba4:	f817 3034 	ldrb.w	r3, [r7, r4, lsl #3]
   19ba8:	07d9      	lsls	r1, r3, #31
   19baa:	d5e2      	bpl.n	19b72 <ll_wl_add+0x32>
	for (i = 0; i < WL_SIZE; i++) {
   19bac:	3401      	adds	r4, #1
   19bae:	2c08      	cmp	r4, #8
   19bb0:	f106 0608 	add.w	r6, r6, #8
   19bb4:	d1e7      	bne.n	19b86 <ll_wl_add+0x46>
	} else if (j >= ARRAY_SIZE(wl)) {
   19bb6:	f1b8 0f07 	cmp.w	r8, #7
   19bba:	d856      	bhi.n	19c6a <ll_wl_add+0x12a>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19bbc:	f899 2000 	ldrb.w	r2, [r9]
   19bc0:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19bc4:	4e2c      	ldr	r6, [pc, #176]	; (19c78 <ll_wl_add+0x138>)
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19bc6:	2002      	movs	r0, #2
	wl[i].id_addr_type = id_addr->type & 0x1;
   19bc8:	f362 0341 	bfi	r3, r2, #1, #1
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19bcc:	fb14 0008 	smlabb	r0, r4, r8, r0
	wl[i].id_addr_type = id_addr->type & 0x1;
   19bd0:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	memcpy(dst, src, sizeof(*dst));
   19bd4:	4438      	add	r0, r7
   19bd6:	2206      	movs	r2, #6
   19bd8:	4659      	mov	r1, fp
   19bda:	f00a fc45 	bl	24468 <memcpy>
	j = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19bde:	f899 3000 	ldrb.w	r3, [r9]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19be2:	f106 39ff 	add.w	r9, r6, #4294967295
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19be6:	f003 0301 	and.w	r3, r3, #1
   19bea:	eb05 0485 	add.w	r4, r5, r5, lsl #2
   19bee:	fa5f fa85 	uxtb.w	sl, r5
   19bf2:	f819 2034 	ldrb.w	r2, [r9, r4, lsl #3]
   19bf6:	f3c2 1180 	ubfx	r1, r2, #6, #1
   19bfa:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bfc:	f105 0501 	add.w	r5, r5, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19c00:	ea4f 04c4 	mov.w	r4, r4, lsl #3
   19c04:	d501      	bpl.n	19c0a <ll_wl_add+0xca>
   19c06:	4299      	cmp	r1, r3
   19c08:	d01b      	beq.n	19c42 <ll_wl_add+0x102>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19c0a:	2d08      	cmp	r5, #8
   19c0c:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19c10:	d1eb      	bne.n	19bea <ll_wl_add+0xaa>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19c12:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19c16:	22ff      	movs	r2, #255	; 0xff
   19c18:	705a      	strb	r2, [r3, #1]
	wl[i].taken = 1U;
   19c1a:	f817 3038 	ldrb.w	r3, [r7, r8, lsl #3]
   19c1e:	f043 0301 	orr.w	r3, r3, #1
   19c22:	f807 3038 	strb.w	r3, [r7, r8, lsl #3]
	return 0;
   19c26:	2000      	movs	r0, #0
}
   19c28:	b003      	add	sp, #12
   19c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		wl_anon = 1U;
   19c2e:	4b13      	ldr	r3, [pc, #76]	; (19c7c <ll_wl_add+0x13c>)
   19c30:	2201      	movs	r2, #1
   19c32:	701a      	strb	r2, [r3, #0]
}
   19c34:	b003      	add	sp, #12
   19c36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c3a:	200c      	movs	r0, #12
}
   19c3c:	b003      	add	sp, #12
   19c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19c42:	4630      	mov	r0, r6
   19c44:	2206      	movs	r2, #6
   19c46:	4659      	mov	r1, fp
   19c48:	9301      	str	r3, [sp, #4]
   19c4a:	f00a fbfc 	bl	24446 <memcmp>
   19c4e:	9b01      	ldr	r3, [sp, #4]
   19c50:	2800      	cmp	r0, #0
   19c52:	d1da      	bne.n	19c0a <ll_wl_add+0xca>
		rl[j].wl = 1U;
   19c54:	f819 3004 	ldrb.w	r3, [r9, r4]
   19c58:	f043 0320 	orr.w	r3, r3, #32
   19c5c:	f809 3004 	strb.w	r3, [r9, r4]
		wl[i].rl_idx = j;
   19c60:	eb07 03c8 	add.w	r3, r7, r8, lsl #3
   19c64:	f883 a001 	strb.w	sl, [r3, #1]
		rl[j].wl = 1U;
   19c68:	e7d7      	b.n	19c1a <ll_wl_add+0xda>
   19c6a:	2007      	movs	r0, #7
}
   19c6c:	b003      	add	sp, #12
   19c6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   19c72:	bf00      	nop
   19c74:	2000e78e 	.word	0x2000e78e
   19c78:	2000e615 	.word	0x2000e615
   19c7c:	2000f31a 	.word	0x2000f31a

00019c80 <ll_wl_remove>:
{
   19c80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19c84:	4607      	mov	r7, r0
	if (ull_adv_filter_pol_get(0)) {
   19c86:	2000      	movs	r0, #0
   19c88:	f7fb f98c 	bl	14fa4 <ull_adv_filter_pol_get>
   19c8c:	2800      	cmp	r0, #0
   19c8e:	d13b      	bne.n	19d08 <ll_wl_remove+0x88>
	if (addr->type == ADDR_TYPE_ANON) {
   19c90:	783e      	ldrb	r6, [r7, #0]
   19c92:	2eff      	cmp	r6, #255	; 0xff
   19c94:	4604      	mov	r4, r0
   19c96:	d033      	beq.n	19d00 <ll_wl_remove+0x80>
	uint8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   19c98:	4d1d      	ldr	r5, [pc, #116]	; (19d10 <ll_wl_remove+0x90>)
   19c9a:	3701      	adds	r7, #1
	for (i = 0; i < WL_SIZE; i++) {
   19c9c:	f1a5 0802 	sub.w	r8, r5, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19ca0:	f006 0601 	and.w	r6, r6, #1
   19ca4:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19ca8:	f3c3 0240 	ubfx	r2, r3, #1, #1
   19cac:	07db      	lsls	r3, r3, #31
   19cae:	d501      	bpl.n	19cb4 <ll_wl_remove+0x34>
   19cb0:	42b2      	cmp	r2, r6
   19cb2:	d007      	beq.n	19cc4 <ll_wl_remove+0x44>
	for (i = 0; i < WL_SIZE; i++) {
   19cb4:	3401      	adds	r4, #1
   19cb6:	2c08      	cmp	r4, #8
   19cb8:	f105 0508 	add.w	r5, r5, #8
   19cbc:	d1f2      	bne.n	19ca4 <ll_wl_remove+0x24>
   19cbe:	2002      	movs	r0, #2
}
   19cc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19cc4:	2206      	movs	r2, #6
   19cc6:	4628      	mov	r0, r5
   19cc8:	4639      	mov	r1, r7
   19cca:	f00a fbbc 	bl	24446 <memcmp>
   19cce:	2800      	cmp	r0, #0
   19cd0:	d1f0      	bne.n	19cb4 <ll_wl_remove+0x34>
		uint8_t j = wl[i].rl_idx;
   19cd2:	eb08 03c4 	add.w	r3, r8, r4, lsl #3
   19cd6:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   19cd8:	2b07      	cmp	r3, #7
   19cda:	d808      	bhi.n	19cee <ll_wl_remove+0x6e>
			rl[j].wl = 0U;
   19cdc:	4a0d      	ldr	r2, [pc, #52]	; (19d14 <ll_wl_remove+0x94>)
   19cde:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19ce2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   19ce6:	f360 1145 	bfi	r1, r0, #5, #1
   19cea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
		wl[i].taken = 0U;
   19cee:	f818 3034 	ldrb.w	r3, [r8, r4, lsl #3]
   19cf2:	f36f 0300 	bfc	r3, #0, #1
   19cf6:	f808 3034 	strb.w	r3, [r8, r4, lsl #3]
		return 0;
   19cfa:	2000      	movs	r0, #0
}
   19cfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		wl_anon = 0U;
   19d00:	4b05      	ldr	r3, [pc, #20]	; (19d18 <ll_wl_remove+0x98>)
   19d02:	7018      	strb	r0, [r3, #0]
}
   19d04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19d08:	200c      	movs	r0, #12
}
   19d0a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19d0e:	bf00      	nop
   19d10:	2000e78e 	.word	0x2000e78e
   19d14:	2000e614 	.word	0x2000e614
   19d18:	2000f31a 	.word	0x2000f31a

00019d1c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d1c:	2807      	cmp	r0, #7
{
   19d1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19d22:	4604      	mov	r4, r0
   19d24:	460e      	mov	r6, r1
   19d26:	4690      	mov	r8, r2
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d28:	d817      	bhi.n	19d5a <ll_rl_id_addr_get+0x3e>
	LL_ASSERT(rl[rl_idx].taken);
   19d2a:	4d19      	ldr	r5, [pc, #100]	; (19d90 <ll_rl_id_addr_get+0x74>)
   19d2c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19d30:	00a7      	lsls	r7, r4, #2
   19d32:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   19d36:	07db      	lsls	r3, r3, #31
   19d38:	d51c      	bpl.n	19d74 <ll_rl_id_addr_get+0x58>
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d3a:	4427      	add	r7, r4
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d3c:	2128      	movs	r1, #40	; 0x28
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d3e:	f815 3037 	ldrb.w	r3, [r5, r7, lsl #3]
   19d42:	f3c3 1380 	ubfx	r3, r3, #6, #1
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d46:	fb01 5104 	mla	r1, r1, r4, r5
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d4a:	7033      	strb	r3, [r6, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d4c:	4640      	mov	r0, r8
   19d4e:	2206      	movs	r2, #6
}
   19d50:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d54:	3101      	adds	r1, #1
   19d56:	f00a bb87 	b.w	24468 <memcpy>
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d5a:	4a0e      	ldr	r2, [pc, #56]	; (19d94 <ll_rl_id_addr_get+0x78>)
   19d5c:	490e      	ldr	r1, [pc, #56]	; (19d98 <ll_rl_id_addr_get+0x7c>)
   19d5e:	480f      	ldr	r0, [pc, #60]	; (19d9c <ll_rl_id_addr_get+0x80>)
   19d60:	23e9      	movs	r3, #233	; 0xe9
   19d62:	f007 fedf 	bl	21b24 <printk>
   19d66:	4040      	eors	r0, r0
   19d68:	f380 8811 	msr	BASEPRI, r0
   19d6c:	f04f 0003 	mov.w	r0, #3
   19d70:	df02      	svc	2
   19d72:	e7da      	b.n	19d2a <ll_rl_id_addr_get+0xe>
	LL_ASSERT(rl[rl_idx].taken);
   19d74:	4a07      	ldr	r2, [pc, #28]	; (19d94 <ll_rl_id_addr_get+0x78>)
   19d76:	490a      	ldr	r1, [pc, #40]	; (19da0 <ll_rl_id_addr_get+0x84>)
   19d78:	4808      	ldr	r0, [pc, #32]	; (19d9c <ll_rl_id_addr_get+0x80>)
   19d7a:	23ea      	movs	r3, #234	; 0xea
   19d7c:	f007 fed2 	bl	21b24 <printk>
   19d80:	4040      	eors	r0, r0
   19d82:	f380 8811 	msr	BASEPRI, r0
   19d86:	f04f 0003 	mov.w	r0, #3
   19d8a:	df02      	svc	2
   19d8c:	e7d5      	b.n	19d3a <ll_rl_id_addr_get+0x1e>
   19d8e:	bf00      	nop
   19d90:	2000e614 	.word	0x2000e614
   19d94:	00028b98 	.word	0x00028b98
   19d98:	00028bdc 	.word	0x00028bdc
   19d9c:	00028404 	.word	0x00028404
   19da0:	00028be8 	.word	0x00028be8

00019da4 <ll_rl_size_get>:
   19da4:	2008      	movs	r0, #8
   19da6:	4770      	bx	lr

00019da8 <ll_rl_clear>:
{
   19da8:	b510      	push	{r4, lr}
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19daa:	2000      	movs	r0, #0
   19dac:	f7fb f8ee 	bl	14f8c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19db0:	bb88      	cbnz	r0, 19e16 <ll_rl_clear+0x6e>
		rl[i].taken = 0U;
   19db2:	4b1a      	ldr	r3, [pc, #104]	; (19e1c <ll_rl_clear+0x74>)
	peer_irk_count = 0U;
   19db4:	4c1a      	ldr	r4, [pc, #104]	; (19e20 <ll_rl_clear+0x78>)
		rl[i].taken = 0U;
   19db6:	7819      	ldrb	r1, [r3, #0]
   19db8:	f893 2028 	ldrb.w	r2, [r3, #40]	; 0x28
	peer_irk_count = 0U;
   19dbc:	7020      	strb	r0, [r4, #0]
		rl[i].taken = 0U;
   19dbe:	f360 0100 	bfi	r1, r0, #0, #1
   19dc2:	f360 0200 	bfi	r2, r0, #0, #1
   19dc6:	7019      	strb	r1, [r3, #0]
   19dc8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
   19dcc:	f893 1050 	ldrb.w	r1, [r3, #80]	; 0x50
   19dd0:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   19dd4:	f360 0100 	bfi	r1, r0, #0, #1
   19dd8:	f360 0200 	bfi	r2, r0, #0, #1
   19ddc:	f883 1050 	strb.w	r1, [r3, #80]	; 0x50
   19de0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78
   19de4:	f893 10a0 	ldrb.w	r1, [r3, #160]	; 0xa0
   19de8:	f893 20c8 	ldrb.w	r2, [r3, #200]	; 0xc8
   19dec:	f360 0100 	bfi	r1, r0, #0, #1
   19df0:	f360 0200 	bfi	r2, r0, #0, #1
   19df4:	f883 10a0 	strb.w	r1, [r3, #160]	; 0xa0
   19df8:	f883 20c8 	strb.w	r2, [r3, #200]	; 0xc8
   19dfc:	f893 10f0 	ldrb.w	r1, [r3, #240]	; 0xf0
   19e00:	f893 2118 	ldrb.w	r2, [r3, #280]	; 0x118
   19e04:	f360 0100 	bfi	r1, r0, #0, #1
   19e08:	f360 0200 	bfi	r2, r0, #0, #1
   19e0c:	f883 10f0 	strb.w	r1, [r3, #240]	; 0xf0
   19e10:	f883 2118 	strb.w	r2, [r3, #280]	; 0x118
}
   19e14:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19e16:	200c      	movs	r0, #12
}
   19e18:	bd10      	pop	{r4, pc}
   19e1a:	bf00      	nop
   19e1c:	2000e614 	.word	0x2000e614
   19e20:	2000f318 	.word	0x2000f318

00019e24 <ll_rl_remove>:
{
   19e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19e28:	4681      	mov	r9, r0
   19e2a:	b083      	sub	sp, #12
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   19e2c:	2000      	movs	r0, #0
   19e2e:	f7fb f8ad 	bl	14f8c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   19e32:	2800      	cmp	r0, #0
   19e34:	d149      	bne.n	19eca <ll_rl_remove+0xa6>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   19e36:	46ca      	mov	sl, r9
   19e38:	4e4d      	ldr	r6, [pc, #308]	; (19f70 <ll_rl_remove+0x14c>)
   19e3a:	f81a 8b01 	ldrb.w	r8, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19e3e:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19e40:	f008 0801 	and.w	r8, r8, #1
   19e44:	1e75      	subs	r5, r6, #1
   19e46:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19e4a:	eb05 0bc3 	add.w	fp, r5, r3, lsl #3
   19e4e:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   19e52:	f3c2 1380 	ubfx	r3, r2, #6, #1
   19e56:	07d2      	lsls	r2, r2, #31
   19e58:	ea4f 0784 	mov.w	r7, r4, lsl #2
   19e5c:	d501      	bpl.n	19e62 <ll_rl_remove+0x3e>
   19e5e:	4543      	cmp	r3, r8
   19e60:	d008      	beq.n	19e74 <ll_rl_remove+0x50>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19e62:	3401      	adds	r4, #1
   19e64:	2c08      	cmp	r4, #8
   19e66:	f106 0628 	add.w	r6, r6, #40	; 0x28
   19e6a:	d1ec      	bne.n	19e46 <ll_rl_remove+0x22>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19e6c:	2002      	movs	r0, #2
}
   19e6e:	b003      	add	sp, #12
   19e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19e74:	4630      	mov	r0, r6
   19e76:	2206      	movs	r2, #6
   19e78:	4651      	mov	r1, sl
   19e7a:	f00a fae4 	bl	24446 <memcmp>
   19e7e:	4603      	mov	r3, r0
   19e80:	2800      	cmp	r0, #0
   19e82:	d1ee      	bne.n	19e62 <ll_rl_remove+0x3e>
		if (rl[i].pirk) {
   19e84:	f89b 2000 	ldrb.w	r2, [fp]
   19e88:	0752      	lsls	r2, r2, #29
   19e8a:	d430      	bmi.n	19eee <ll_rl_remove+0xca>
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19e8c:	f899 9000 	ldrb.w	r9, [r9]
	for (i = 0; i < WL_SIZE; i++) {
   19e90:	4e38      	ldr	r6, [pc, #224]	; (19f74 <ll_rl_remove+0x150>)
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19e92:	f009 0901 	and.w	r9, r9, #1
   19e96:	f1a6 0802 	sub.w	r8, r6, #2
   19e9a:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   19e9e:	07d0      	lsls	r0, r2, #31
   19ea0:	f3c2 0140 	ubfx	r1, r2, #1, #1
   19ea4:	d501      	bpl.n	19eaa <ll_rl_remove+0x86>
   19ea6:	4549      	cmp	r1, r9
   19ea8:	d013      	beq.n	19ed2 <ll_rl_remove+0xae>
	for (i = 0; i < WL_SIZE; i++) {
   19eaa:	3301      	adds	r3, #1
   19eac:	2b08      	cmp	r3, #8
   19eae:	f106 0608 	add.w	r6, r6, #8
   19eb2:	d1f2      	bne.n	19e9a <ll_rl_remove+0x76>
		rl[i].taken = 0U;
   19eb4:	443c      	add	r4, r7
		return 0;
   19eb6:	2000      	movs	r0, #0
		rl[i].taken = 0U;
   19eb8:	f815 3034 	ldrb.w	r3, [r5, r4, lsl #3]
   19ebc:	f36f 0300 	bfc	r3, #0, #1
   19ec0:	f805 3034 	strb.w	r3, [r5, r4, lsl #3]
}
   19ec4:	b003      	add	sp, #12
   19ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19eca:	200c      	movs	r0, #12
}
   19ecc:	b003      	add	sp, #12
   19ece:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19ed2:	2206      	movs	r2, #6
   19ed4:	4630      	mov	r0, r6
   19ed6:	4651      	mov	r1, sl
   19ed8:	9301      	str	r3, [sp, #4]
   19eda:	f00a fab4 	bl	24446 <memcmp>
   19ede:	9b01      	ldr	r3, [sp, #4]
   19ee0:	2800      	cmp	r0, #0
   19ee2:	d1e2      	bne.n	19eaa <ll_rl_remove+0x86>
			wl[j].rl_idx = FILTER_IDX_NONE;
   19ee4:	eb08 03c3 	add.w	r3, r8, r3, lsl #3
   19ee8:	22ff      	movs	r2, #255	; 0xff
   19eea:	705a      	strb	r2, [r3, #1]
   19eec:	e7e2      	b.n	19eb4 <ll_rl_remove+0x90>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   19eee:	4e22      	ldr	r6, [pc, #136]	; (19f78 <ll_rl_remove+0x154>)
   19ef0:	7832      	ldrb	r2, [r6, #0]
   19ef2:	3a01      	subs	r2, #1
			if (pj && pi != pj) {
   19ef4:	f012 08ff 	ands.w	r8, r2, #255	; 0xff
   19ef8:	d005      	beq.n	19f06 <ll_rl_remove+0xe2>
			uint8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   19efa:	f89b b017 	ldrb.w	fp, [fp, #23]
			if (pj && pi != pj) {
   19efe:	45c3      	cmp	fp, r8
   19f00:	d104      	bne.n	19f0c <ll_rl_remove+0xe8>
			peer_irk_count--;
   19f02:	7032      	strb	r2, [r6, #0]
   19f04:	e7c2      	b.n	19e8c <ll_rl_remove+0x68>
   19f06:	461a      	mov	r2, r3
   19f08:	7032      	strb	r2, [r6, #0]
   19f0a:	e7bf      	b.n	19e8c <ll_rl_remove+0x68>
				memcpy(peer_irks[pi], peer_irks[pj], IRK_SIZE);
   19f0c:	481b      	ldr	r0, [pc, #108]	; (19f7c <ll_rl_remove+0x158>)
   19f0e:	9301      	str	r3, [sp, #4]
   19f10:	2210      	movs	r2, #16
   19f12:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   19f16:	eb00 100b 	add.w	r0, r0, fp, lsl #4
   19f1a:	f00a faa5 	bl	24468 <memcpy>
   19f1e:	9b01      	ldr	r3, [sp, #4]
   19f20:	f8df c05c 	ldr.w	ip, [pc, #92]	; 19f80 <ll_rl_remove+0x15c>
   19f24:	461a      	mov	r2, r3
					if (rl[k].taken && rl[k].pirk &&
   19f26:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   19f2a:	fa5f fe82 	uxtb.w	lr, r2
   19f2e:	f815 0031 	ldrb.w	r0, [r5, r1, lsl #3]
   19f32:	f010 0f01 	tst.w	r0, #1
   19f36:	f102 0201 	add.w	r2, r2, #1
   19f3a:	eb05 01c1 	add.w	r1, r5, r1, lsl #3
   19f3e:	d005      	beq.n	19f4c <ll_rl_remove+0x128>
   19f40:	0740      	lsls	r0, r0, #29
   19f42:	d503      	bpl.n	19f4c <ll_rl_remove+0x128>
   19f44:	f89c 0017 	ldrb.w	r0, [ip, #23]
   19f48:	4540      	cmp	r0, r8
   19f4a:	d007      	beq.n	19f5c <ll_rl_remove+0x138>
				for (k = 0U;
   19f4c:	2a08      	cmp	r2, #8
   19f4e:	f10c 0c28 	add.w	ip, ip, #40	; 0x28
   19f52:	d1e8      	bne.n	19f26 <ll_rl_remove+0x102>
			peer_irk_count--;
   19f54:	7832      	ldrb	r2, [r6, #0]
   19f56:	3a01      	subs	r2, #1
   19f58:	7032      	strb	r2, [r6, #0]
   19f5a:	e797      	b.n	19e8c <ll_rl_remove+0x68>
						peer_irk_rl_ids[pi] = k;
   19f5c:	4a09      	ldr	r2, [pc, #36]	; (19f84 <ll_rl_remove+0x160>)
						rl[k].pirk_idx = pi;
   19f5e:	f881 b017 	strb.w	fp, [r1, #23]
						peer_irk_rl_ids[pi] = k;
   19f62:	f802 e00b 	strb.w	lr, [r2, fp]
			peer_irk_count--;
   19f66:	7832      	ldrb	r2, [r6, #0]
   19f68:	3a01      	subs	r2, #1
   19f6a:	7032      	strb	r2, [r6, #0]
   19f6c:	e78e      	b.n	19e8c <ll_rl_remove+0x68>
   19f6e:	bf00      	nop
   19f70:	2000e615 	.word	0x2000e615
   19f74:	2000e78e 	.word	0x2000e78e
   19f78:	2000f318 	.word	0x2000f318
   19f7c:	2000e594 	.word	0x2000e594
   19f80:	2000e614 	.word	0x2000e614
   19f84:	2000e58c 	.word	0x2000e58c

00019f88 <ll_rl_crpa_set>:
{
   19f88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if ((crpa[5] & 0xc0) == 0x40) {
   19f8c:	795c      	ldrb	r4, [r3, #5]
   19f8e:	f004 04c0 	and.w	r4, r4, #192	; 0xc0
   19f92:	2c40      	cmp	r4, #64	; 0x40
   19f94:	d001      	beq.n	19f9a <ll_rl_crpa_set+0x12>
}
   19f96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (id_addr) {
   19f9a:	461e      	mov	r6, r3
   19f9c:	460f      	mov	r7, r1
   19f9e:	b301      	cbz	r1, 19fe2 <ll_rl_crpa_set+0x5a>
   19fa0:	f8df 9068 	ldr.w	r9, [pc, #104]	; 1a00c <ll_rl_crpa_set+0x84>
   19fa4:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19fa6:	f000 0a01 	and.w	sl, r0, #1
   19faa:	f109 38ff 	add.w	r8, r9, #4294967295
   19fae:	e003      	b.n	19fb8 <ll_rl_crpa_set+0x30>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19fb0:	2c08      	cmp	r4, #8
   19fb2:	f109 0928 	add.w	r9, r9, #40	; 0x28
   19fb6:	d0ee      	beq.n	19f96 <ll_rl_crpa_set+0xe>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19fb8:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19fbc:	4625      	mov	r5, r4
   19fbe:	f818 2033 	ldrb.w	r2, [r8, r3, lsl #3]
   19fc2:	f3c2 1380 	ubfx	r3, r2, #6, #1
   19fc6:	07d2      	lsls	r2, r2, #31
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19fc8:	f104 0401 	add.w	r4, r4, #1
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19fcc:	d5f0      	bpl.n	19fb0 <ll_rl_crpa_set+0x28>
   19fce:	4553      	cmp	r3, sl
   19fd0:	d1ee      	bne.n	19fb0 <ll_rl_crpa_set+0x28>
   19fd2:	4648      	mov	r0, r9
   19fd4:	2206      	movs	r2, #6
   19fd6:	4639      	mov	r1, r7
   19fd8:	f00a fa35 	bl	24446 <memcmp>
   19fdc:	2800      	cmp	r0, #0
   19fde:	d1e7      	bne.n	19fb0 <ll_rl_crpa_set+0x28>
   19fe0:	e004      	b.n	19fec <ll_rl_crpa_set+0x64>
		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   19fe2:	2a07      	cmp	r2, #7
   19fe4:	d8d7      	bhi.n	19f96 <ll_rl_crpa_set+0xe>
   19fe6:	f8df 8028 	ldr.w	r8, [pc, #40]	; 1a010 <ll_rl_crpa_set+0x88>
   19fea:	4615      	mov	r5, r2
   19fec:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19ff0:	00e8      	lsls	r0, r5, #3
   19ff2:	f818 3035 	ldrb.w	r3, [r8, r5, lsl #3]
   19ff6:	07db      	lsls	r3, r3, #31
   19ff8:	d5cd      	bpl.n	19f96 <ll_rl_crpa_set+0xe>
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19ffa:	3018      	adds	r0, #24
   19ffc:	4631      	mov	r1, r6
   19ffe:	4440      	add	r0, r8
   1a000:	2206      	movs	r2, #6
}
   1a002:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
			memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a006:	f00a ba2f 	b.w	24468 <memcpy>
   1a00a:	bf00      	nop
   1a00c:	2000e615 	.word	0x2000e615
   1a010:	2000e614 	.word	0x2000e614

0001a014 <ll_rl_crpa_get>:
{
   1a014:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a018:	4682      	mov	sl, r0
   1a01a:	4e1a      	ldr	r6, [pc, #104]	; (1a084 <ll_rl_crpa_get+0x70>)
   1a01c:	f81a 8b01 	ldrb.w	r8, [sl], #1
{
   1a020:	4689      	mov	r9, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a022:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a024:	f008 0801 	and.w	r8, r8, #1
   1a028:	1e77      	subs	r7, r6, #1
   1a02a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a02e:	00d5      	lsls	r5, r2, #3
   1a030:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1a034:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a038:	07db      	lsls	r3, r3, #31
   1a03a:	f104 0401 	add.w	r4, r4, #1
   1a03e:	d501      	bpl.n	1a044 <ll_rl_crpa_get+0x30>
   1a040:	4542      	cmp	r2, r8
   1a042:	d006      	beq.n	1a052 <ll_rl_crpa_get+0x3e>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a044:	2c08      	cmp	r4, #8
   1a046:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a04a:	d1ee      	bne.n	1a02a <ll_rl_crpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a04c:	2002      	movs	r0, #2
}
   1a04e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a052:	4630      	mov	r0, r6
   1a054:	2206      	movs	r2, #6
   1a056:	4651      	mov	r1, sl
   1a058:	f00a f9f5 	bl	24446 <memcmp>
   1a05c:	4683      	mov	fp, r0
   1a05e:	2800      	cmp	r0, #0
   1a060:	d1f0      	bne.n	1a044 <ll_rl_crpa_get+0x30>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a062:	f105 0218 	add.w	r2, r5, #24
   1a066:	4417      	add	r7, r2
   1a068:	2106      	movs	r1, #6
   1a06a:	4638      	mov	r0, r7
   1a06c:	f7f6 fb9e 	bl	107ac <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a070:	2800      	cmp	r0, #0
   1a072:	d0eb      	beq.n	1a04c <ll_rl_crpa_get+0x38>
   1a074:	2206      	movs	r2, #6
   1a076:	4639      	mov	r1, r7
   1a078:	4648      	mov	r0, r9
   1a07a:	f00a f9f5 	bl	24468 <memcpy>
		return 0;
   1a07e:	4658      	mov	r0, fp
}
   1a080:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a084:	2000e615 	.word	0x2000e615

0001a088 <ll_rl_lrpa_get>:
{
   1a088:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a08c:	4681      	mov	r9, r0
   1a08e:	4e16      	ldr	r6, [pc, #88]	; (1a0e8 <ll_rl_lrpa_get+0x60>)
   1a090:	f819 8b01 	ldrb.w	r8, [r9], #1
{
   1a094:	468a      	mov	sl, r1
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a096:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a098:	f008 0801 	and.w	r8, r8, #1
   1a09c:	1e77      	subs	r7, r6, #1
   1a09e:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a0a2:	eb07 05c2 	add.w	r5, r7, r2, lsl #3
   1a0a6:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1a0aa:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a0ae:	07db      	lsls	r3, r3, #31
   1a0b0:	f104 0401 	add.w	r4, r4, #1
   1a0b4:	d501      	bpl.n	1a0ba <ll_rl_lrpa_get+0x32>
   1a0b6:	4542      	cmp	r2, r8
   1a0b8:	d006      	beq.n	1a0c8 <ll_rl_lrpa_get+0x40>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a0ba:	2c08      	cmp	r4, #8
   1a0bc:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a0c0:	d1ed      	bne.n	1a09e <ll_rl_lrpa_get+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a0c2:	2002      	movs	r0, #2
}
   1a0c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a0c8:	4630      	mov	r0, r6
   1a0ca:	2206      	movs	r2, #6
   1a0cc:	4649      	mov	r1, r9
   1a0ce:	f00a f9ba 	bl	24446 <memcmp>
   1a0d2:	4683      	mov	fp, r0
   1a0d4:	2800      	cmp	r0, #0
   1a0d6:	d1f0      	bne.n	1a0ba <ll_rl_lrpa_get+0x32>
   1a0d8:	6a69      	ldr	r1, [r5, #36]	; 0x24
   1a0da:	2206      	movs	r2, #6
   1a0dc:	4650      	mov	r0, sl
   1a0de:	f00a f9c3 	bl	24468 <memcpy>
		return 0;
   1a0e2:	4658      	mov	r0, fp
}
   1a0e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a0e8:	2000e615 	.word	0x2000e615

0001a0ec <ll_rl_enable>:
{
   1a0ec:	b510      	push	{r4, lr}
   1a0ee:	4604      	mov	r4, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a0f0:	2000      	movs	r0, #0
   1a0f2:	f7fa ff4b 	bl	14f8c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1a0f6:	b958      	cbnz	r0, 1a110 <ll_rl_enable+0x24>
	switch (enable) {
   1a0f8:	b134      	cbz	r4, 1a108 <ll_rl_enable+0x1c>
   1a0fa:	2c01      	cmp	r4, #1
   1a0fc:	d001      	beq.n	1a102 <ll_rl_enable+0x16>
   1a0fe:	2012      	movs	r0, #18
}
   1a100:	bd10      	pop	{r4, pc}
		rl_enable = 1U;
   1a102:	4b04      	ldr	r3, [pc, #16]	; (1a114 <ll_rl_enable+0x28>)
   1a104:	701c      	strb	r4, [r3, #0]
}
   1a106:	bd10      	pop	{r4, pc}
		rl_enable = 0U;
   1a108:	4b02      	ldr	r3, [pc, #8]	; (1a114 <ll_rl_enable+0x28>)
   1a10a:	701c      	strb	r4, [r3, #0]
	return 0;
   1a10c:	4620      	mov	r0, r4
}
   1a10e:	bd10      	pop	{r4, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a110:	200c      	movs	r0, #12
}
   1a112:	bd10      	pop	{r4, pc}
   1a114:	2000f319 	.word	0x2000f319

0001a118 <ll_rl_timeout_set>:
	rpa_timeout_ms = timeout * 1000U;
   1a118:	4b03      	ldr	r3, [pc, #12]	; (1a128 <ll_rl_timeout_set+0x10>)
   1a11a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a11e:	fb02 f000 	mul.w	r0, r2, r0
   1a122:	6018      	str	r0, [r3, #0]
}
   1a124:	4770      	bx	lr
   1a126:	bf00      	nop
   1a128:	2000e788 	.word	0x2000e788

0001a12c <ll_priv_mode_set>:
{
   1a12c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a130:	4682      	mov	sl, r0
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a132:	2000      	movs	r0, #0
{
   1a134:	4688      	mov	r8, r1
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a136:	f7fa ff29 	bl	14f8c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1a13a:	bb68      	cbnz	r0, 1a198 <ll_priv_mode_set+0x6c>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a13c:	4e1d      	ldr	r6, [pc, #116]	; (1a1b4 <ll_priv_mode_set+0x88>)
   1a13e:	f81a 9b01 	ldrb.w	r9, [sl], #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a142:	4604      	mov	r4, r0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a144:	f009 0901 	and.w	r9, r9, #1
   1a148:	1e77      	subs	r7, r6, #1
   1a14a:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a14e:	00d5      	lsls	r5, r2, #3
   1a150:	f817 3032 	ldrb.w	r3, [r7, r2, lsl #3]
   1a154:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a158:	07db      	lsls	r3, r3, #31
   1a15a:	f104 0401 	add.w	r4, r4, #1
   1a15e:	d501      	bpl.n	1a164 <ll_priv_mode_set+0x38>
   1a160:	454a      	cmp	r2, r9
   1a162:	d006      	beq.n	1a172 <ll_priv_mode_set+0x46>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a164:	2c08      	cmp	r4, #8
   1a166:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a16a:	d1ee      	bne.n	1a14a <ll_priv_mode_set+0x1e>
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a16c:	2002      	movs	r0, #2
}
   1a16e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a172:	4630      	mov	r0, r6
   1a174:	2206      	movs	r2, #6
   1a176:	4651      	mov	r1, sl
   1a178:	f00a f965 	bl	24446 <memcmp>
   1a17c:	2800      	cmp	r0, #0
   1a17e:	d1f1      	bne.n	1a164 <ll_priv_mode_set+0x38>
		switch (mode) {
   1a180:	f1b8 0f00 	cmp.w	r8, #0
   1a184:	d00e      	beq.n	1a1a4 <ll_priv_mode_set+0x78>
   1a186:	f1b8 0f01 	cmp.w	r8, #1
   1a18a:	d108      	bne.n	1a19e <ll_priv_mode_set+0x72>
			rl[i].dev = 1U;
   1a18c:	5d7b      	ldrb	r3, [r7, r5]
   1a18e:	f043 0310 	orr.w	r3, r3, #16
   1a192:	557b      	strb	r3, [r7, r5]
}
   1a194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a198:	200c      	movs	r0, #12
}
   1a19a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		switch (mode) {
   1a19e:	2012      	movs	r0, #18
}
   1a1a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			rl[i].dev = 0U;
   1a1a4:	5d7b      	ldrb	r3, [r7, r5]
   1a1a6:	f368 1304 	bfi	r3, r8, #4, #1
   1a1aa:	557b      	strb	r3, [r7, r5]
	return 0;
   1a1ac:	4640      	mov	r0, r8
}
   1a1ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1a1b2:	bf00      	nop
   1a1b4:	2000e615 	.word	0x2000e615

0001a1b8 <ull_filter_adv_scan_state_cb>:
	if (bm) {
   1a1b8:	b1b0      	cbz	r0, 1a1e8 <ull_filter_adv_scan_state_cb+0x30>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1a1ba:	4a0d      	ldr	r2, [pc, #52]	; (1a1f0 <ull_filter_adv_scan_state_cb+0x38>)
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   1a1bc:	6812      	ldr	r2, [r2, #0]
{
   1a1be:	b510      	push	{r4, lr}
   1a1c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a1c4:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a1c8:	2100      	movs	r1, #0
   1a1ca:	fbe2 0103 	umlal	r0, r1, r2, r3
   1a1ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a1d2:	2300      	movs	r3, #0
   1a1d4:	f7e6 fee0 	bl	f98 <__aeabi_uldivmod>
}
   1a1d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a1dc:	4602      	mov	r2, r0
   1a1de:	460b      	mov	r3, r1
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   1a1e0:	4804      	ldr	r0, [pc, #16]	; (1a1f4 <ull_filter_adv_scan_state_cb+0x3c>)
   1a1e2:	4905      	ldr	r1, [pc, #20]	; (1a1f8 <ull_filter_adv_scan_state_cb+0x40>)
   1a1e4:	f006 ba98 	b.w	20718 <k_delayed_work_submit_to_queue>
	k_delayed_work_cancel(&rpa_work);
   1a1e8:	4803      	ldr	r0, [pc, #12]	; (1a1f8 <ull_filter_adv_scan_state_cb+0x40>)
   1a1ea:	f00c bfec 	b.w	271c6 <k_delayed_work_cancel>
   1a1ee:	bf00      	nop
   1a1f0:	2000e788 	.word	0x2000e788
   1a1f4:	2000aca8 	.word	0x2000aca8
   1a1f8:	2000ab68 	.word	0x2000ab68

0001a1fc <ull_filter_adv_update>:
{
   1a1fc:	b508      	push	{r3, lr}
}

static void filter_clear(struct lll_filter *filter)
{
	filter->enable_bitmask = 0;
   1a1fe:	4b09      	ldr	r3, [pc, #36]	; (1a224 <ull_filter_adv_update+0x28>)
   1a200:	2200      	movs	r2, #0
   1a202:	801a      	strh	r2, [r3, #0]
	if (adv_fp &&
   1a204:	b930      	cbnz	r0, 1a214 <ull_filter_adv_update+0x18>
	if (rl_enable &&
   1a206:	4b08      	ldr	r3, [pc, #32]	; (1a228 <ull_filter_adv_update+0x2c>)
	filter->enable_bitmask = 0;
   1a208:	4a08      	ldr	r2, [pc, #32]	; (1a22c <ull_filter_adv_update+0x30>)
	if (rl_enable &&
   1a20a:	781b      	ldrb	r3, [r3, #0]
	filter->enable_bitmask = 0;
   1a20c:	2100      	movs	r1, #0
   1a20e:	8011      	strh	r1, [r2, #0]
	if (rl_enable &&
   1a210:	b91b      	cbnz	r3, 1a21a <ull_filter_adv_update+0x1e>
}
   1a212:	bd08      	pop	{r3, pc}
		wl_update();
   1a214:	f7ff fc1c 	bl	19a50 <wl_update>
   1a218:	e7f5      	b.n	1a206 <ull_filter_adv_update+0xa>
}
   1a21a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		rl_update();
   1a21e:	f7ff bbdf 	b.w	199e0 <rl_update>
   1a222:	bf00      	nop
   1a224:	2000e7cc 	.word	0x2000e7cc
   1a228:	2000f319 	.word	0x2000f319
   1a22c:	2000e754 	.word	0x2000e754

0001a230 <ull_filter_rpa_update>:
{
   1a230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a234:	4683      	mov	fp, r0
   1a236:	b087      	sub	sp, #28
	return z_impl_k_uptime_ticks();
   1a238:	f00d f81e 	bl	27278 <z_impl_k_uptime_ticks>
   1a23c:	014b      	lsls	r3, r1, #5
   1a23e:	0142      	lsls	r2, r0, #5
   1a240:	1a12      	subs	r2, r2, r0
   1a242:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
   1a246:	eb63 0301 	sbc.w	r3, r3, r1
   1a24a:	009b      	lsls	r3, r3, #2
   1a24c:	ea4f 0982 	mov.w	r9, r2, lsl #2
   1a250:	eb19 0900 	adds.w	r9, r9, r0
   1a254:	ea43 7392 	orr.w	r3, r3, r2, lsr #30
   1a258:	eb41 0103 	adc.w	r1, r1, r3
   1a25c:	00cb      	lsls	r3, r1, #3
   1a25e:	ea43 7359 	orr.w	r3, r3, r9, lsr #29
   1a262:	0bd9      	lsrs	r1, r3, #15
   1a264:	f3c9 3910 	ubfx	r9, r9, #12, #17
   1a268:	ea49 4943 	orr.w	r9, r9, r3, lsl #17
   1a26c:	9101      	str	r1, [sp, #4]
	bool all = timeout || (rpa_last_ms == -1) ||
   1a26e:	f1bb 0f00 	cmp.w	fp, #0
   1a272:	d117      	bne.n	1a2a4 <ull_filter_rpa_update+0x74>
   1a274:	4a5d      	ldr	r2, [pc, #372]	; (1a3ec <ull_filter_rpa_update+0x1bc>)
   1a276:	e9d2 3200 	ldrd	r3, r2, [r2]
   1a27a:	f1b2 3fff 	cmp.w	r2, #4294967295
   1a27e:	bf08      	it	eq
   1a280:	f1b3 3fff 	cmpeq.w	r3, #4294967295
   1a284:	d00e      	beq.n	1a2a4 <ull_filter_rpa_update+0x74>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1a286:	ebb9 0303 	subs.w	r3, r9, r3
   1a28a:	eb61 0202 	sbc.w	r2, r1, r2
   1a28e:	4958      	ldr	r1, [pc, #352]	; (1a3f0 <ull_filter_rpa_update+0x1c0>)
   1a290:	6809      	ldr	r1, [r1, #0]
	bool all = timeout || (rpa_last_ms == -1) ||
   1a292:	428b      	cmp	r3, r1
   1a294:	f172 0300 	sbcs.w	r3, r2, #0
   1a298:	bfac      	ite	ge
   1a29a:	f04f 0a01 	movge.w	sl, #1
   1a29e:	f04f 0a00 	movlt.w	sl, #0
   1a2a2:	e001      	b.n	1a2a8 <ull_filter_rpa_update+0x78>
   1a2a4:	f04f 0a01 	mov.w	sl, #1
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a2a8:	4e52      	ldr	r6, [pc, #328]	; (1a3f4 <ull_filter_rpa_update+0x1c4>)
   1a2aa:	f8df 814c 	ldr.w	r8, [pc, #332]	; 1a3f8 <ull_filter_rpa_update+0x1c8>
	bool all = timeout || (rpa_last_ms == -1) ||
   1a2ae:	2400      	movs	r4, #0
   1a2b0:	f1a6 071e 	sub.w	r7, r6, #30
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a2b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a2b8:	00a5      	lsls	r5, r4, #2
   1a2ba:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a2be:	07da      	lsls	r2, r3, #31
   1a2c0:	d515      	bpl.n	1a2ee <ull_filter_rpa_update+0xbe>
   1a2c2:	f1ba 0f00 	cmp.w	sl, #0
   1a2c6:	d101      	bne.n	1a2cc <ull_filter_rpa_update+0x9c>
   1a2c8:	0798      	lsls	r0, r3, #30
   1a2ca:	d410      	bmi.n	1a2ee <ull_filter_rpa_update+0xbe>
			if (rl[i].pirk) {
   1a2cc:	192b      	adds	r3, r5, r4
   1a2ce:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a2d2:	0759      	lsls	r1, r3, #29
   1a2d4:	d432      	bmi.n	1a33c <ull_filter_rpa_update+0x10c>
			if (rl[i].lirk) {
   1a2d6:	192b      	adds	r3, r5, r4
   1a2d8:	f817 3033 	ldrb.w	r3, [r7, r3, lsl #3]
   1a2dc:	071a      	lsls	r2, r3, #28
   1a2de:	d41b      	bmi.n	1a318 <ull_filter_rpa_update+0xe8>
			rl[i].rpas_ready = 1U;
   1a2e0:	4425      	add	r5, r4
   1a2e2:	f817 3035 	ldrb.w	r3, [r7, r5, lsl #3]
   1a2e6:	f043 0302 	orr.w	r3, r3, #2
   1a2ea:	f807 3035 	strb.w	r3, [r7, r5, lsl #3]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a2ee:	3401      	adds	r4, #1
   1a2f0:	2c08      	cmp	r4, #8
   1a2f2:	f108 0806 	add.w	r8, r8, #6
   1a2f6:	f106 0628 	add.w	r6, r6, #40	; 0x28
   1a2fa:	d1db      	bne.n	1a2b4 <ull_filter_rpa_update+0x84>
	if (all) {
   1a2fc:	f1ba 0f00 	cmp.w	sl, #0
   1a300:	d004      	beq.n	1a30c <ull_filter_rpa_update+0xdc>
		rpa_last_ms = now;
   1a302:	4b3a      	ldr	r3, [pc, #232]	; (1a3ec <ull_filter_rpa_update+0x1bc>)
   1a304:	9a01      	ldr	r2, [sp, #4]
   1a306:	f8c3 9000 	str.w	r9, [r3]
   1a30a:	605a      	str	r2, [r3, #4]
	if (timeout) {
   1a30c:	f1bb 0f00 	cmp.w	fp, #0
   1a310:	d138      	bne.n	1a384 <ull_filter_rpa_update+0x154>
}
   1a312:	b007      	add	sp, #28
   1a314:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a318:	a902      	add	r1, sp, #8
   1a31a:	f1a6 0017 	sub.w	r0, r6, #23
   1a31e:	f00a f953 	bl	245c8 <bt_rpa_create>
				LL_ASSERT(!err);
   1a322:	2800      	cmp	r0, #0
   1a324:	d154      	bne.n	1a3d0 <ull_filter_rpa_update+0x1a0>
				rl[i].local_rpa = &rpa;
   1a326:	ab02      	add	r3, sp, #8
   1a328:	f8c6 3006 	str.w	r3, [r6, #6]
   1a32c:	4619      	mov	r1, r3
   1a32e:	2206      	movs	r2, #6
   1a330:	4640      	mov	r0, r8
   1a332:	f00a f899 	bl	24468 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a336:	f8c6 8006 	str.w	r8, [r6, #6]
   1a33a:	e7d1      	b.n	1a2e0 <ull_filter_rpa_update+0xb0>
	psrc += length - 1;
   1a33c:	f816 3c07 	ldrb.w	r3, [r6, #-7]
   1a340:	4a2e      	ldr	r2, [pc, #184]	; (1a3fc <ull_filter_rpa_update+0x1cc>)
   1a342:	eb02 1203 	add.w	r2, r2, r3, lsl #4
   1a346:	320f      	adds	r2, #15
	for (; length > 0; length--) {
   1a348:	f10d 0307 	add.w	r3, sp, #7
   1a34c:	f10d 0017 	add.w	r0, sp, #23
		*pdst++ = *psrc--;
   1a350:	f812 1901 	ldrb.w	r1, [r2], #-1
   1a354:	f803 1f01 	strb.w	r1, [r3, #1]!
	for (; length > 0; length--) {
   1a358:	4283      	cmp	r3, r0
   1a35a:	d1f9      	bne.n	1a350 <ull_filter_rpa_update+0x120>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a35c:	4631      	mov	r1, r6
   1a35e:	a802      	add	r0, sp, #8
   1a360:	f00a f932 	bl	245c8 <bt_rpa_create>
				LL_ASSERT(!err);
   1a364:	2800      	cmp	r0, #0
   1a366:	d0b6      	beq.n	1a2d6 <ull_filter_rpa_update+0xa6>
   1a368:	4a25      	ldr	r2, [pc, #148]	; (1a400 <ull_filter_rpa_update+0x1d0>)
   1a36a:	4926      	ldr	r1, [pc, #152]	; (1a404 <ull_filter_rpa_update+0x1d4>)
   1a36c:	4826      	ldr	r0, [pc, #152]	; (1a408 <ull_filter_rpa_update+0x1d8>)
   1a36e:	f240 2316 	movw	r3, #534	; 0x216
   1a372:	f007 fbd7 	bl	21b24 <printk>
   1a376:	4040      	eors	r0, r0
   1a378:	f380 8811 	msr	BASEPRI, r0
   1a37c:	f04f 0003 	mov.w	r0, #3
   1a380:	df02      	svc	2
   1a382:	e7a8      	b.n	1a2d6 <ull_filter_rpa_update+0xa6>
		adv = ull_adv_is_enabled_get(0);
   1a384:	2000      	movs	r0, #0
   1a386:	f7fa fdf3 	bl	14f70 <ull_adv_is_enabled_get>
		if (adv) {
   1a38a:	4604      	mov	r4, r0
   1a38c:	2800      	cmp	r0, #0
   1a38e:	d0c0      	beq.n	1a312 <ull_filter_rpa_update+0xe2>
	if (adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   1a390:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a394:	075b      	lsls	r3, r3, #29
   1a396:	d5bc      	bpl.n	1a312 <ull_filter_rpa_update+0xe2>
	if (adv->lll.rl_idx >= ARRAY_SIZE(rl)) {
   1a398:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
   1a39c:	2b07      	cmp	r3, #7
   1a39e:	d8b8      	bhi.n	1a312 <ull_filter_rpa_update+0xe2>
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a3a0:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   1a3a4:	eb00 0383 	add.w	r3, r0, r3, lsl #2
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1a3a8:	a902      	add	r1, sp, #8
	return (void *)lll->adv_data.pdu[lll->adv_data.last];
   1a3aa:	6b1e      	ldr	r6, [r3, #48]	; 0x30
	return lll_adv_pdu_alloc(&lll->adv_data, idx);
   1a3ac:	302c      	adds	r0, #44	; 0x2c
   1a3ae:	f001 f8b7 	bl	1b520 <lll_adv_pdu_alloc>
	memcpy(pdu, prev, PDU_AC_LL_HEADER_SIZE + prev->len);
   1a3b2:	7872      	ldrb	r2, [r6, #1]
   1a3b4:	4605      	mov	r5, r0
   1a3b6:	3202      	adds	r2, #2
   1a3b8:	4631      	mov	r1, r6
   1a3ba:	f00a f855 	bl	24468 <memcpy>
	ull_adv_pdu_update_addrs(adv, pdu);
   1a3be:	4629      	mov	r1, r5
   1a3c0:	4620      	mov	r0, r4
   1a3c2:	f7fa fe33 	bl	1502c <ull_adv_pdu_update_addrs>
	pdu->last = idx;
   1a3c6:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1a3ca:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   1a3ce:	e7a0      	b.n	1a312 <ull_filter_rpa_update+0xe2>
				LL_ASSERT(!err);
   1a3d0:	4a0b      	ldr	r2, [pc, #44]	; (1a400 <ull_filter_rpa_update+0x1d0>)
   1a3d2:	490c      	ldr	r1, [pc, #48]	; (1a404 <ull_filter_rpa_update+0x1d4>)
   1a3d4:	480c      	ldr	r0, [pc, #48]	; (1a408 <ull_filter_rpa_update+0x1d8>)
   1a3d6:	f240 2323 	movw	r3, #547	; 0x223
   1a3da:	f007 fba3 	bl	21b24 <printk>
   1a3de:	4040      	eors	r0, r0
   1a3e0:	f380 8811 	msr	BASEPRI, r0
   1a3e4:	f04f 0003 	mov.w	r0, #3
   1a3e8:	df02      	svc	2
   1a3ea:	e79c      	b.n	1a326 <ull_filter_rpa_update+0xf6>
   1a3ec:	2000ab60 	.word	0x2000ab60
   1a3f0:	2000e788 	.word	0x2000e788
   1a3f4:	2000e632 	.word	0x2000e632
   1a3f8:	2000e55c 	.word	0x2000e55c
   1a3fc:	2000e594 	.word	0x2000e594
   1a400:	00028b98 	.word	0x00028b98
   1a404:	00028684 	.word	0x00028684
   1a408:	00028404 	.word	0x00028404

0001a40c <rpa_timeout>:
{
   1a40c:	b510      	push	{r4, lr}
	ull_filter_rpa_update(true);
   1a40e:	2001      	movs	r0, #1
   1a410:	f7ff ff0e 	bl	1a230 <ull_filter_rpa_update>
	k_delayed_work_submit(&rpa_work, K_MSEC(rpa_timeout_ms));
   1a414:	4a0a      	ldr	r2, [pc, #40]	; (1a440 <rpa_timeout+0x34>)
   1a416:	6812      	ldr	r2, [r2, #0]
   1a418:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1a41c:	f240 30e7 	movw	r0, #999	; 0x3e7
   1a420:	2100      	movs	r1, #0
   1a422:	fbe2 0103 	umlal	r0, r1, r2, r3
   1a426:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1a42a:	2300      	movs	r3, #0
   1a42c:	f7e6 fdb4 	bl	f98 <__aeabi_uldivmod>
}
   1a430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1a434:	4602      	mov	r2, r0
   1a436:	460b      	mov	r3, r1
   1a438:	4802      	ldr	r0, [pc, #8]	; (1a444 <rpa_timeout+0x38>)
   1a43a:	4903      	ldr	r1, [pc, #12]	; (1a448 <rpa_timeout+0x3c>)
   1a43c:	f006 b96c 	b.w	20718 <k_delayed_work_submit_to_queue>
   1a440:	2000e788 	.word	0x2000e788
   1a444:	2000aca8 	.word	0x2000aca8
   1a448:	2000ab68 	.word	0x2000ab68

0001a44c <ull_filter_adva_get>:
{
   1a44c:	b570      	push	{r4, r5, r6, lr}
	uint8_t idx = adv->lll.rl_idx;
   1a44e:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   1a452:	2c07      	cmp	r4, #7
   1a454:	d810      	bhi.n	1a478 <ull_filter_adva_get+0x2c>
   1a456:	4d10      	ldr	r5, [pc, #64]	; (1a498 <ull_filter_adva_get+0x4c>)
   1a458:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a45c:	00a6      	lsls	r6, r4, #2
   1a45e:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1a462:	071a      	lsls	r2, r3, #28
   1a464:	f3c3 00c0 	ubfx	r0, r3, #3, #1
   1a468:	d505      	bpl.n	1a476 <ull_filter_adva_get+0x2a>
		LL_ASSERT(rl[idx].rpas_ready);
   1a46a:	079b      	lsls	r3, r3, #30
   1a46c:	d506      	bpl.n	1a47c <ull_filter_adva_get+0x30>
		return rl[idx].local_rpa->val;
   1a46e:	4434      	add	r4, r6
   1a470:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
   1a474:	6a68      	ldr	r0, [r5, #36]	; 0x24
}
   1a476:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1a478:	2000      	movs	r0, #0
}
   1a47a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT(rl[idx].rpas_ready);
   1a47c:	4a07      	ldr	r2, [pc, #28]	; (1a49c <ull_filter_adva_get+0x50>)
   1a47e:	4908      	ldr	r1, [pc, #32]	; (1a4a0 <ull_filter_adva_get+0x54>)
   1a480:	4808      	ldr	r0, [pc, #32]	; (1a4a4 <ull_filter_adva_get+0x58>)
   1a482:	f240 2349 	movw	r3, #585	; 0x249
   1a486:	f007 fb4d 	bl	21b24 <printk>
   1a48a:	4040      	eors	r0, r0
   1a48c:	f380 8811 	msr	BASEPRI, r0
   1a490:	f04f 0003 	mov.w	r0, #3
   1a494:	df02      	svc	2
   1a496:	e7ea      	b.n	1a46e <ull_filter_adva_get+0x22>
   1a498:	2000e614 	.word	0x2000e614
   1a49c:	00028b98 	.word	0x00028b98
   1a4a0:	00028bfc 	.word	0x00028bfc
   1a4a4:	00028404 	.word	0x00028404

0001a4a8 <ull_filter_tgta_get>:
	uint8_t idx = adv->lll.rl_idx;
   1a4a8:	f890 302a 	ldrb.w	r3, [r0, #42]	; 0x2a
	if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   1a4ac:	2b07      	cmp	r3, #7
   1a4ae:	d80d      	bhi.n	1a4cc <ull_filter_tgta_get+0x24>
   1a4b0:	4a07      	ldr	r2, [pc, #28]	; (1a4d0 <ull_filter_tgta_get+0x28>)
   1a4b2:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a4b6:	f812 1031 	ldrb.w	r1, [r2, r1, lsl #3]
   1a4ba:	f3c1 0080 	ubfx	r0, r1, #2, #1
   1a4be:	0749      	lsls	r1, r1, #29
   1a4c0:	d505      	bpl.n	1a4ce <ull_filter_tgta_get+0x26>
		return rl[idx].peer_rpa.val;
   1a4c2:	2028      	movs	r0, #40	; 0x28
   1a4c4:	fb00 2003 	mla	r0, r0, r3, r2
   1a4c8:	301e      	adds	r0, #30
   1a4ca:	4770      	bx	lr
	return NULL;
   1a4cc:	2000      	movs	r0, #0
}
   1a4ce:	4770      	bx	lr
   1a4d0:	2000e614 	.word	0x2000e614

0001a4d4 <ull_filter_rl_find>:
{
   1a4d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a4d8:	468b      	mov	fp, r1
	if (free) {
   1a4da:	4617      	mov	r7, r2
   1a4dc:	b10a      	cbz	r2, 1a4e2 <ull_filter_rl_find+0xe>
		*free = FILTER_IDX_NONE;
   1a4de:	23ff      	movs	r3, #255	; 0xff
   1a4e0:	7013      	strb	r3, [r2, #0]
   1a4e2:	4d1b      	ldr	r5, [pc, #108]	; (1a550 <ull_filter_rl_find+0x7c>)
{
   1a4e4:	2400      	movs	r4, #0
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a4e6:	f000 0a01 	and.w	sl, r0, #1
   1a4ea:	f105 39ff 	add.w	r9, r5, #4294967295
   1a4ee:	e006      	b.n	1a4fe <ull_filter_rl_find+0x2a>
   1a4f0:	4552      	cmp	r2, sl
   1a4f2:	d01f      	beq.n	1a534 <ull_filter_rl_find+0x60>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a4f4:	3401      	adds	r4, #1
   1a4f6:	2c08      	cmp	r4, #8
   1a4f8:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1a4fc:	d015      	beq.n	1a52a <ull_filter_rl_find+0x56>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a4fe:	eb04 0684 	add.w	r6, r4, r4, lsl #2
   1a502:	fa5f f884 	uxtb.w	r8, r4
   1a506:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1a50a:	07d9      	lsls	r1, r3, #31
   1a50c:	f3c3 1280 	ubfx	r2, r3, #6, #1
   1a510:	d4ee      	bmi.n	1a4f0 <ull_filter_rl_find+0x1c>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a512:	2f00      	cmp	r7, #0
   1a514:	d0ee      	beq.n	1a4f4 <ull_filter_rl_find+0x20>
   1a516:	783b      	ldrb	r3, [r7, #0]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a518:	3401      	adds	r4, #1
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a51a:	2bff      	cmp	r3, #255	; 0xff
			*free = i;
   1a51c:	bf08      	it	eq
   1a51e:	f887 8000 	strbeq.w	r8, [r7]
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a522:	2c08      	cmp	r4, #8
   1a524:	f105 0528 	add.w	r5, r5, #40	; 0x28
   1a528:	d1e9      	bne.n	1a4fe <ull_filter_rl_find+0x2a>
	return FILTER_IDX_NONE;
   1a52a:	f04f 08ff 	mov.w	r8, #255	; 0xff
}
   1a52e:	4640      	mov	r0, r8
   1a530:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   1a534:	4628      	mov	r0, r5
   1a536:	2206      	movs	r2, #6
   1a538:	4659      	mov	r1, fp
   1a53a:	f009 ff84 	bl	24446 <memcmp>
   1a53e:	2800      	cmp	r0, #0
   1a540:	d0f5      	beq.n	1a52e <ull_filter_rl_find+0x5a>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   1a542:	2f00      	cmp	r7, #0
   1a544:	d0d6      	beq.n	1a4f4 <ull_filter_rl_find+0x20>
   1a546:	f819 3036 	ldrb.w	r3, [r9, r6, lsl #3]
   1a54a:	07db      	lsls	r3, r3, #31
   1a54c:	d4d2      	bmi.n	1a4f4 <ull_filter_rl_find+0x20>
   1a54e:	e7e2      	b.n	1a516 <ull_filter_rl_find+0x42>
   1a550:	2000e615 	.word	0x2000e615

0001a554 <ll_rl_add>:
{
   1a554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a558:	4680      	mov	r8, r0
   1a55a:	b085      	sub	sp, #20
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a55c:	2000      	movs	r0, #0
{
   1a55e:	460e      	mov	r6, r1
   1a560:	4691      	mov	r9, r2
	return ((IS_ENABLED(CONFIG_BT_BROADCASTER) && ull_adv_is_enabled(0)) ||
   1a562:	f7fa fd13 	bl	14f8c <ull_adv_is_enabled>
	if (!rl_access_check(false)) {
   1a566:	2800      	cmp	r0, #0
   1a568:	d17d      	bne.n	1a666 <ll_rl_add+0x112>
	i = ull_filter_rl_find(id_addr->type, id_addr->a.val, &j);
   1a56a:	46c2      	mov	sl, r8
   1a56c:	4604      	mov	r4, r0
   1a56e:	f81a 0b01 	ldrb.w	r0, [sl], #1
   1a572:	f10d 020f 	add.w	r2, sp, #15
   1a576:	4651      	mov	r1, sl
   1a578:	f7ff ffac 	bl	1a4d4 <ull_filter_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a57c:	2807      	cmp	r0, #7
   1a57e:	f240 80b5 	bls.w	1a6ec <ll_rl_add+0x198>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a582:	f89d 700f 	ldrb.w	r7, [sp, #15]
   1a586:	2f07      	cmp	r7, #7
   1a588:	f200 8084 	bhi.w	1a694 <ll_rl_add+0x140>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a58c:	eb07 0b87 	add.w	fp, r7, r7, lsl #2
   1a590:	4d58      	ldr	r5, [pc, #352]	; (1a6f4 <ll_rl_add+0x1a0>)
   1a592:	ea4f 03cb 	mov.w	r3, fp, lsl #3
   1a596:	1c58      	adds	r0, r3, #1
   1a598:	2206      	movs	r2, #6
   1a59a:	4651      	mov	r1, sl
   1a59c:	4428      	add	r0, r5
   1a59e:	9300      	str	r3, [sp, #0]
   1a5a0:	f009 ff62 	bl	24468 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a5a4:	f898 3000 	ldrb.w	r3, [r8]
   1a5a8:	f815 103b 	ldrb.w	r1, [r5, fp, lsl #3]
   1a5ac:	465a      	mov	r2, fp
   1a5ae:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
   1a5b2:	f363 1186 	bfi	r1, r3, #6, #1
   1a5b6:	f805 100b 	strb.w	r1, [r5, fp]
   1a5ba:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a5be:	2110      	movs	r1, #16
   1a5c0:	4630      	mov	r0, r6
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a5c2:	9301      	str	r3, [sp, #4]
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a5c4:	f7f6 f8f2 	bl	107ac <mem_nz>
   1a5c8:	f815 200b 	ldrb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a5cc:	2110      	movs	r1, #16
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a5ce:	f360 0282 	bfi	r2, r0, #2, #1
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a5d2:	4648      	mov	r0, r9
	rl[i].pirk = mem_nz((uint8_t *)pirk, IRK_SIZE);
   1a5d4:	f805 200b 	strb.w	r2, [r5, fp]
	rl[i].lirk = mem_nz((uint8_t *)lirk, IRK_SIZE);
   1a5d8:	f7f6 f8e8 	bl	107ac <mem_nz>
   1a5dc:	f815 200b 	ldrb.w	r2, [r5, fp]
   1a5e0:	f000 0001 	and.w	r0, r0, #1
   1a5e4:	f360 02c3 	bfi	r2, r0, #3, #1
   1a5e8:	f805 200b 	strb.w	r2, [r5, fp]
	if (rl[i].pirk) {
   1a5ec:	0752      	lsls	r2, r2, #29
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a5ee:	ea4f 0b87 	mov.w	fp, r7, lsl #2
	if (rl[i].pirk) {
   1a5f2:	d453      	bmi.n	1a69c <ll_rl_add+0x148>
	if (rl[i].lirk) {
   1a5f4:	2800      	cmp	r0, #0
   1a5f6:	d16b      	bne.n	1a6d0 <ll_rl_add+0x17c>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a5f8:	9800      	ldr	r0, [sp, #0]
   1a5fa:	4e3f      	ldr	r6, [pc, #252]	; (1a6f8 <ll_rl_add+0x1a4>)
   1a5fc:	3018      	adds	r0, #24
   1a5fe:	2206      	movs	r2, #6
   1a600:	2100      	movs	r1, #0
   1a602:	4428      	add	r0, r5
   1a604:	f009 ff5b 	bl	244be <memset>
	rl[i].dev = 0U;
   1a608:	eb0b 0207 	add.w	r2, fp, r7
	rl[i].rpas_ready = 0U;
   1a60c:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1a610:	f021 0112 	bic.w	r1, r1, #18
   1a614:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a618:	f898 9000 	ldrb.w	r9, [r8]
	for (i = 0; i < WL_SIZE; i++) {
   1a61c:	f1a6 0802 	sub.w	r8, r6, #2
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a620:	f009 0901 	and.w	r9, r9, #1
   1a624:	f818 2034 	ldrb.w	r2, [r8, r4, lsl #3]
   1a628:	07d3      	lsls	r3, r2, #31
   1a62a:	f3c2 0140 	ubfx	r1, r2, #1, #1
   1a62e:	d501      	bpl.n	1a634 <ll_rl_add+0xe0>
   1a630:	4549      	cmp	r1, r9
   1a632:	d01c      	beq.n	1a66e <ll_rl_add+0x11a>
	for (i = 0; i < WL_SIZE; i++) {
   1a634:	3401      	adds	r4, #1
   1a636:	2c08      	cmp	r4, #8
   1a638:	f106 0608 	add.w	r6, r6, #8
   1a63c:	d1f2      	bne.n	1a624 <ll_rl_add+0xd0>
		rl[i].wl = 0U;
   1a63e:	eb0b 0207 	add.w	r2, fp, r7
   1a642:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
   1a646:	f36f 1145 	bfc	r1, #5, #1
   1a64a:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
	rl[i].taken = 1U;
   1a64e:	eb0b 0307 	add.w	r3, fp, r7
	return 0;
   1a652:	2000      	movs	r0, #0
	rl[i].taken = 1U;
   1a654:	f815 2033 	ldrb.w	r2, [r5, r3, lsl #3]
   1a658:	f042 0201 	orr.w	r2, r2, #1
   1a65c:	f805 2033 	strb.w	r2, [r5, r3, lsl #3]
}
   1a660:	b005      	add	sp, #20
   1a662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a666:	200c      	movs	r0, #12
}
   1a668:	b005      	add	sp, #20
   1a66a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1a66e:	2206      	movs	r2, #6
   1a670:	4630      	mov	r0, r6
   1a672:	4651      	mov	r1, sl
   1a674:	f009 fee7 	bl	24446 <memcmp>
   1a678:	2800      	cmp	r0, #0
   1a67a:	d1db      	bne.n	1a634 <ll_rl_add+0xe0>
		rl[i].wl = 1U;
   1a67c:	eb0b 0207 	add.w	r2, fp, r7
		wl[j].rl_idx = i;
   1a680:	eb08 04c4 	add.w	r4, r8, r4, lsl #3
		rl[i].wl = 1U;
   1a684:	f815 1032 	ldrb.w	r1, [r5, r2, lsl #3]
		wl[j].rl_idx = i;
   1a688:	7067      	strb	r7, [r4, #1]
		rl[i].wl = 1U;
   1a68a:	f041 0120 	orr.w	r1, r1, #32
   1a68e:	f805 1032 	strb.w	r1, [r5, r2, lsl #3]
   1a692:	e7dc      	b.n	1a64e <ll_rl_add+0xfa>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a694:	2007      	movs	r0, #7
}
   1a696:	b005      	add	sp, #20
   1a698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		rl[i].pirk_idx = peer_irk_count;
   1a69c:	4b17      	ldr	r3, [pc, #92]	; (1a6fc <ll_rl_add+0x1a8>)
		peer_irk_rl_ids[peer_irk_count] = i;
   1a69e:	4a18      	ldr	r2, [pc, #96]	; (1a700 <ll_rl_add+0x1ac>)
		rl[i].pirk_idx = peer_irk_count;
   1a6a0:	7819      	ldrb	r1, [r3, #0]
   1a6a2:	f8dd c004 	ldr.w	ip, [sp, #4]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a6a6:	5457      	strb	r7, [r2, r1]
   1a6a8:	4a16      	ldr	r2, [pc, #88]	; (1a704 <ll_rl_add+0x1b0>)
		rl[i].pirk_idx = peer_irk_count;
   1a6aa:	f88c 1017 	strb.w	r1, [ip, #23]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, IRK_SIZE);
   1a6ae:	eb02 1c01 	add.w	ip, r2, r1, lsl #4
   1a6b2:	3101      	adds	r1, #1
	psrc += length - 1;
   1a6b4:	f106 020f 	add.w	r2, r6, #15
   1a6b8:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a6ba:	f10c 3cff 	add.w	ip, ip, #4294967295
   1a6be:	3e01      	subs	r6, #1
		*pdst++ = *psrc--;
   1a6c0:	f812 1901 	ldrb.w	r1, [r2], #-1
   1a6c4:	f80c 1f01 	strb.w	r1, [ip, #1]!
	for (; length > 0; length--) {
   1a6c8:	42b2      	cmp	r2, r6
   1a6ca:	d1f9      	bne.n	1a6c0 <ll_rl_add+0x16c>
	if (rl[i].lirk) {
   1a6cc:	2800      	cmp	r0, #0
   1a6ce:	d093      	beq.n	1a5f8 <ll_rl_add+0xa4>
		memcpy(rl[i].local_irk, lirk, IRK_SIZE);
   1a6d0:	9b00      	ldr	r3, [sp, #0]
   1a6d2:	1dd8      	adds	r0, r3, #7
   1a6d4:	4649      	mov	r1, r9
   1a6d6:	2210      	movs	r2, #16
   1a6d8:	4428      	add	r0, r5
   1a6da:	f009 fec5 	bl	24468 <memcpy>
		rl[i].local_rpa = NULL;
   1a6de:	eb0b 0207 	add.w	r2, fp, r7
   1a6e2:	eb05 02c2 	add.w	r2, r5, r2, lsl #3
   1a6e6:	2100      	movs	r1, #0
   1a6e8:	6251      	str	r1, [r2, #36]	; 0x24
   1a6ea:	e785      	b.n	1a5f8 <ll_rl_add+0xa4>
		return BT_HCI_ERR_INVALID_PARAM;
   1a6ec:	2012      	movs	r0, #18
}
   1a6ee:	b005      	add	sp, #20
   1a6f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1a6f4:	2000e614 	.word	0x2000e614
   1a6f8:	2000e78e 	.word	0x2000e78e
   1a6fc:	2000f318 	.word	0x2000f318
   1a700:	2000e58c 	.word	0x2000e58c
   1a704:	2000e594 	.word	0x2000e594

0001a708 <ull_filter_reset>:
	wl_anon = 0U;
   1a708:	4a33      	ldr	r2, [pc, #204]	; (1a7d8 <ull_filter_reset+0xd0>)
   1a70a:	4934      	ldr	r1, [pc, #208]	; (1a7dc <ull_filter_reset+0xd4>)
{
   1a70c:	b538      	push	{r3, r4, r5, lr}
	wl_anon = 0U;
   1a70e:	2300      	movs	r3, #0
   1a710:	4c33      	ldr	r4, [pc, #204]	; (1a7e0 <ull_filter_reset+0xd8>)
   1a712:	7013      	strb	r3, [r2, #0]
		uint8_t j = wl[i].rl_idx;
   1a714:	eb01 02c3 	add.w	r2, r1, r3, lsl #3
   1a718:	7852      	ldrb	r2, [r2, #1]
		if (j < ARRAY_SIZE(rl)) {
   1a71a:	2a07      	cmp	r2, #7
			rl[j].wl = 0U;
   1a71c:	eb02 0c82 	add.w	ip, r2, r2, lsl #2
		if (j < ARRAY_SIZE(rl)) {
   1a720:	d805      	bhi.n	1a72e <ull_filter_reset+0x26>
			rl[j].wl = 0U;
   1a722:	f814 203c 	ldrb.w	r2, [r4, ip, lsl #3]
   1a726:	f36f 1245 	bfc	r2, #5, #1
   1a72a:	f804 203c 	strb.w	r2, [r4, ip, lsl #3]
		wl[i].taken = 0U;
   1a72e:	f811 2033 	ldrb.w	r2, [r1, r3, lsl #3]
   1a732:	f36f 0200 	bfc	r2, #0, #1
   1a736:	f801 2033 	strb.w	r2, [r1, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   1a73a:	3301      	adds	r3, #1
   1a73c:	2b08      	cmp	r3, #8
   1a73e:	d1e9      	bne.n	1a714 <ull_filter_reset+0xc>
	rl_enable = 0U;
   1a740:	4b28      	ldr	r3, [pc, #160]	; (1a7e4 <ull_filter_reset+0xdc>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a742:	4a29      	ldr	r2, [pc, #164]	; (1a7e8 <ull_filter_reset+0xe0>)
	rl_enable = 0U;
   1a744:	2100      	movs	r1, #0
   1a746:	7019      	strb	r1, [r3, #0]
		rl[i].taken = 0U;
   1a748:	7823      	ldrb	r3, [r4, #0]
   1a74a:	f361 0300 	bfi	r3, r1, #0, #1
   1a74e:	7023      	strb	r3, [r4, #0]
   1a750:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
   1a754:	f361 0300 	bfi	r3, r1, #0, #1
   1a758:	f884 3028 	strb.w	r3, [r4, #40]	; 0x28
   1a75c:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1a760:	f361 0300 	bfi	r3, r1, #0, #1
   1a764:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
   1a768:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1a76c:	f361 0300 	bfi	r3, r1, #0, #1
   1a770:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   1a774:	f894 30a0 	ldrb.w	r3, [r4, #160]	; 0xa0
   1a778:	f361 0300 	bfi	r3, r1, #0, #1
   1a77c:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
   1a780:	f894 30c8 	ldrb.w	r3, [r4, #200]	; 0xc8
   1a784:	f361 0300 	bfi	r3, r1, #0, #1
   1a788:	f884 30c8 	strb.w	r3, [r4, #200]	; 0xc8
   1a78c:	f894 30f0 	ldrb.w	r3, [r4, #240]	; 0xf0
   1a790:	f361 0300 	bfi	r3, r1, #0, #1
   1a794:	f884 30f0 	strb.w	r3, [r4, #240]	; 0xf0
   1a798:	f894 3118 	ldrb.w	r3, [r4, #280]	; 0x118
   1a79c:	f361 0300 	bfi	r3, r1, #0, #1
   1a7a0:	f884 3118 	strb.w	r3, [r4, #280]	; 0x118
	peer_irk_count = 0U;
   1a7a4:	4b11      	ldr	r3, [pc, #68]	; (1a7ec <ull_filter_reset+0xe4>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a7a6:	4c12      	ldr	r4, [pc, #72]	; (1a7f0 <ull_filter_reset+0xe8>)
	peer_irk_count = 0U;
   1a7a8:	7019      	strb	r1, [r3, #0]
	rpa_last_ms = -1;
   1a7aa:	4b12      	ldr	r3, [pc, #72]	; (1a7f4 <ull_filter_reset+0xec>)
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a7ac:	6014      	str	r4, [r2, #0]
	rpa_last_ms = -1;
   1a7ae:	f04f 35ff 	mov.w	r5, #4294967295
   1a7b2:	f04f 34ff 	mov.w	r4, #4294967295
   1a7b6:	e9c3 4500 	strd	r4, r5, [r3]
	if (init) {
   1a7ba:	b138      	cbz	r0, 1a7cc <ull_filter_reset+0xc4>
	*work = (struct k_delayed_work)Z_DELAYED_WORK_INITIALIZER(handler);
   1a7bc:	4b0e      	ldr	r3, [pc, #56]	; (1a7f8 <ull_filter_reset+0xf0>)
   1a7be:	2230      	movs	r2, #48	; 0x30
   1a7c0:	4618      	mov	r0, r3
   1a7c2:	f009 fe7c 	bl	244be <memset>
   1a7c6:	4a0d      	ldr	r2, [pc, #52]	; (1a7fc <ull_filter_reset+0xf4>)
   1a7c8:	6042      	str	r2, [r0, #4]
}
   1a7ca:	bd38      	pop	{r3, r4, r5, pc}
   1a7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		k_delayed_work_cancel(&rpa_work);
   1a7d0:	4809      	ldr	r0, [pc, #36]	; (1a7f8 <ull_filter_reset+0xf0>)
   1a7d2:	f00c bcf8 	b.w	271c6 <k_delayed_work_cancel>
   1a7d6:	bf00      	nop
   1a7d8:	2000f31a 	.word	0x2000f31a
   1a7dc:	2000e78c 	.word	0x2000e78c
   1a7e0:	2000e614 	.word	0x2000e614
   1a7e4:	2000f319 	.word	0x2000f319
   1a7e8:	2000e788 	.word	0x2000e788
   1a7ec:	2000f318 	.word	0x2000f318
   1a7f0:	000dbba0 	.word	0x000dbba0
   1a7f4:	2000ab60 	.word	0x2000ab60
   1a7f8:	2000ab68 	.word	0x2000ab68
   1a7fc:	0001a40d 	.word	0x0001a40d

0001a800 <ull_filter_lll_lrpa_used>:
	return rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].lirk;
   1a800:	2807      	cmp	r0, #7
   1a802:	d807      	bhi.n	1a814 <ull_filter_lll_lrpa_used+0x14>
   1a804:	4b04      	ldr	r3, [pc, #16]	; (1a818 <ull_filter_lll_lrpa_used+0x18>)
   1a806:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a80a:	f813 0030 	ldrb.w	r0, [r3, r0, lsl #3]
   1a80e:	f3c0 00c0 	ubfx	r0, r0, #3, #1
   1a812:	4770      	bx	lr
   1a814:	2000      	movs	r0, #0
}
   1a816:	4770      	bx	lr
   1a818:	2000e614 	.word	0x2000e614

0001a81c <ull_filter_lll_irks_get>:
	*count = peer_irk_count;
   1a81c:	4b02      	ldr	r3, [pc, #8]	; (1a828 <ull_filter_lll_irks_get+0xc>)
   1a81e:	781b      	ldrb	r3, [r3, #0]
   1a820:	7003      	strb	r3, [r0, #0]
}
   1a822:	4802      	ldr	r0, [pc, #8]	; (1a82c <ull_filter_lll_irks_get+0x10>)
   1a824:	4770      	bx	lr
   1a826:	bf00      	nop
   1a828:	2000f318 	.word	0x2000f318
   1a82c:	2000e594 	.word	0x2000e594

0001a830 <ull_filter_lll_rl_irk_idx>:
{
   1a830:	b510      	push	{r4, lr}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a832:	4b20      	ldr	r3, [pc, #128]	; (1a8b4 <ull_filter_lll_rl_irk_idx+0x84>)
   1a834:	781b      	ldrb	r3, [r3, #0]
   1a836:	4283      	cmp	r3, r0
{
   1a838:	4604      	mov	r4, r0
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a83a:	d90c      	bls.n	1a856 <ull_filter_lll_rl_irk_idx+0x26>
	i = peer_irk_rl_ids[irkmatch_id];
   1a83c:	4b1e      	ldr	r3, [pc, #120]	; (1a8b8 <ull_filter_lll_rl_irk_idx+0x88>)
   1a83e:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a840:	2c07      	cmp	r4, #7
   1a842:	d819      	bhi.n	1a878 <ull_filter_lll_rl_irk_idx+0x48>
	LL_ASSERT(rl[i].taken);
   1a844:	4b1d      	ldr	r3, [pc, #116]	; (1a8bc <ull_filter_lll_rl_irk_idx+0x8c>)
   1a846:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a84a:	f813 3032 	ldrb.w	r3, [r3, r2, lsl #3]
   1a84e:	07db      	lsls	r3, r3, #31
   1a850:	d520      	bpl.n	1a894 <ull_filter_lll_rl_irk_idx+0x64>
}
   1a852:	4620      	mov	r0, r4
   1a854:	bd10      	pop	{r4, pc}
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1a856:	4a1a      	ldr	r2, [pc, #104]	; (1a8c0 <ull_filter_lll_rl_irk_idx+0x90>)
   1a858:	491a      	ldr	r1, [pc, #104]	; (1a8c4 <ull_filter_lll_rl_irk_idx+0x94>)
   1a85a:	481b      	ldr	r0, [pc, #108]	; (1a8c8 <ull_filter_lll_rl_irk_idx+0x98>)
   1a85c:	f240 23b9 	movw	r3, #697	; 0x2b9
   1a860:	f007 f960 	bl	21b24 <printk>
   1a864:	4040      	eors	r0, r0
   1a866:	f380 8811 	msr	BASEPRI, r0
   1a86a:	f04f 0003 	mov.w	r0, #3
   1a86e:	df02      	svc	2
	i = peer_irk_rl_ids[irkmatch_id];
   1a870:	4b11      	ldr	r3, [pc, #68]	; (1a8b8 <ull_filter_lll_rl_irk_idx+0x88>)
   1a872:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1a874:	2c07      	cmp	r4, #7
   1a876:	d9e5      	bls.n	1a844 <ull_filter_lll_rl_irk_idx+0x14>
   1a878:	4a11      	ldr	r2, [pc, #68]	; (1a8c0 <ull_filter_lll_rl_irk_idx+0x90>)
   1a87a:	4914      	ldr	r1, [pc, #80]	; (1a8cc <ull_filter_lll_rl_irk_idx+0x9c>)
   1a87c:	4812      	ldr	r0, [pc, #72]	; (1a8c8 <ull_filter_lll_rl_irk_idx+0x98>)
   1a87e:	f240 23bb 	movw	r3, #699	; 0x2bb
   1a882:	f007 f94f 	bl	21b24 <printk>
   1a886:	4040      	eors	r0, r0
   1a888:	f380 8811 	msr	BASEPRI, r0
   1a88c:	f04f 0003 	mov.w	r0, #3
   1a890:	df02      	svc	2
   1a892:	e7d7      	b.n	1a844 <ull_filter_lll_rl_irk_idx+0x14>
	LL_ASSERT(rl[i].taken);
   1a894:	4a0a      	ldr	r2, [pc, #40]	; (1a8c0 <ull_filter_lll_rl_irk_idx+0x90>)
   1a896:	490e      	ldr	r1, [pc, #56]	; (1a8d0 <ull_filter_lll_rl_irk_idx+0xa0>)
   1a898:	480b      	ldr	r0, [pc, #44]	; (1a8c8 <ull_filter_lll_rl_irk_idx+0x98>)
   1a89a:	f44f 732f 	mov.w	r3, #700	; 0x2bc
   1a89e:	f007 f941 	bl	21b24 <printk>
   1a8a2:	4040      	eors	r0, r0
   1a8a4:	f380 8811 	msr	BASEPRI, r0
   1a8a8:	f04f 0003 	mov.w	r0, #3
   1a8ac:	df02      	svc	2
}
   1a8ae:	4620      	mov	r0, r4
   1a8b0:	bd10      	pop	{r4, pc}
   1a8b2:	bf00      	nop
   1a8b4:	2000f318 	.word	0x2000f318
   1a8b8:	2000e58c 	.word	0x2000e58c
   1a8bc:	2000e614 	.word	0x2000e614
   1a8c0:	00028b98 	.word	0x00028b98
   1a8c4:	00028d7c 	.word	0x00028d7c
   1a8c8:	00028404 	.word	0x00028404
   1a8cc:	00028d9c 	.word	0x00028d9c
   1a8d0:	00028d70 	.word	0x00028d70

0001a8d4 <ull_filter_lll_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   1a8d4:	2807      	cmp	r0, #7
   1a8d6:	d823      	bhi.n	1a920 <ull_filter_lll_irk_whitelisted+0x4c>
{
   1a8d8:	b570      	push	{r4, r5, r6, lr}
	LL_ASSERT(rl[rl_idx].taken);
   1a8da:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a8de:	4e11      	ldr	r6, [pc, #68]	; (1a924 <ull_filter_lll_irk_whitelisted+0x50>)
   1a8e0:	f816 3033 	ldrb.w	r3, [r6, r3, lsl #3]
   1a8e4:	07db      	lsls	r3, r3, #31
   1a8e6:	4604      	mov	r4, r0
   1a8e8:	ea4f 0580 	mov.w	r5, r0, lsl #2
   1a8ec:	d505      	bpl.n	1a8fa <ull_filter_lll_irk_whitelisted+0x26>
	return rl[rl_idx].wl;
   1a8ee:	442c      	add	r4, r5
   1a8f0:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a8f4:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a8f8:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl[rl_idx].taken);
   1a8fa:	4a0b      	ldr	r2, [pc, #44]	; (1a928 <ull_filter_lll_irk_whitelisted+0x54>)
   1a8fc:	490b      	ldr	r1, [pc, #44]	; (1a92c <ull_filter_lll_irk_whitelisted+0x58>)
   1a8fe:	480c      	ldr	r0, [pc, #48]	; (1a930 <ull_filter_lll_irk_whitelisted+0x5c>)
   1a900:	f240 23c7 	movw	r3, #711	; 0x2c7
   1a904:	f007 f90e 	bl	21b24 <printk>
   1a908:	4040      	eors	r0, r0
   1a90a:	f380 8811 	msr	BASEPRI, r0
   1a90e:	f04f 0003 	mov.w	r0, #3
   1a912:	df02      	svc	2
	return rl[rl_idx].wl;
   1a914:	442c      	add	r4, r5
   1a916:	f816 0034 	ldrb.w	r0, [r6, r4, lsl #3]
   1a91a:	f3c0 1040 	ubfx	r0, r0, #5, #1
}
   1a91e:	bd70      	pop	{r4, r5, r6, pc}
		return false;
   1a920:	2000      	movs	r0, #0
}
   1a922:	4770      	bx	lr
   1a924:	2000e614 	.word	0x2000e614
   1a928:	00028b98 	.word	0x00028b98
   1a92c:	00028be8 	.word	0x00028be8
   1a930:	00028404 	.word	0x00028404

0001a934 <ull_filter_lll_get>:
		return &wl_filter;
   1a934:	4a03      	ldr	r2, [pc, #12]	; (1a944 <ull_filter_lll_get+0x10>)
   1a936:	4b04      	ldr	r3, [pc, #16]	; (1a948 <ull_filter_lll_get+0x14>)
}
   1a938:	2800      	cmp	r0, #0
   1a93a:	bf0c      	ite	eq
   1a93c:	4610      	moveq	r0, r2
   1a93e:	4618      	movne	r0, r3
   1a940:	4770      	bx	lr
   1a942:	bf00      	nop
   1a944:	2000e754 	.word	0x2000e754
   1a948:	2000e7cc 	.word	0x2000e7cc

0001a94c <ull_filter_lll_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1a94c:	4b1c      	ldr	r3, [pc, #112]	; (1a9c0 <ull_filter_lll_rl_addr_allowed+0x74>)
   1a94e:	781b      	ldrb	r3, [r3, #0]
   1a950:	b1f3      	cbz	r3, 1a990 <ull_filter_lll_rl_addr_allowed+0x44>
   1a952:	7813      	ldrb	r3, [r2, #0]
   1a954:	2bff      	cmp	r3, #255	; 0xff
   1a956:	d11b      	bne.n	1a990 <ull_filter_lll_rl_addr_allowed+0x44>
{
   1a958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a95c:	4d19      	ldr	r5, [pc, #100]	; (1a9c4 <ull_filter_lll_rl_addr_allowed+0x78>)
   1a95e:	4604      	mov	r4, r0
   1a960:	46ae      	mov	lr, r5
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1a962:	2300      	movs	r3, #0
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a964:	eb03 0c83 	add.w	ip, r3, r3, lsl #2
   1a968:	b2df      	uxtb	r7, r3
   1a96a:	f815 c03c 	ldrb.w	ip, [r5, ip, lsl #3]
   1a96e:	f01c 0001 	ands.w	r0, ip, #1
   1a972:	ea4f 0683 	mov.w	r6, r3, lsl #2
   1a976:	d003      	beq.n	1a980 <ull_filter_lll_rl_addr_allowed+0x34>
   1a978:	f3cc 1c80 	ubfx	ip, ip, #6, #1
   1a97c:	45a4      	cmp	ip, r4
   1a97e:	d009      	beq.n	1a994 <ull_filter_lll_rl_addr_allowed+0x48>
	for (i = 0U; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a980:	3301      	adds	r3, #1
   1a982:	2b08      	cmp	r3, #8
   1a984:	f10e 0e28 	add.w	lr, lr, #40	; 0x28
   1a988:	d1ec      	bne.n	1a964 <ull_filter_lll_rl_addr_allowed+0x18>
		return true;
   1a98a:	2001      	movs	r0, #1
}
   1a98c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return true;
   1a990:	2001      	movs	r0, #1
}
   1a992:	4770      	bx	lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a994:	f101 38ff 	add.w	r8, r1, #4294967295
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   1a998:	46f4      	mov	ip, lr
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a99a:	f10e 0b06 	add.w	fp, lr, #6
				if (addr[j] != id_addr[j]) {
   1a99e:	f81c af01 	ldrb.w	sl, [ip, #1]!
   1a9a2:	f818 9f01 	ldrb.w	r9, [r8, #1]!
   1a9a6:	45ca      	cmp	sl, r9
   1a9a8:	d1ea      	bne.n	1a980 <ull_filter_lll_rl_addr_allowed+0x34>
			for (j = 0U; j < BDADDR_SIZE; j++) {
   1a9aa:	45dc      	cmp	ip, fp
   1a9ac:	d1f7      	bne.n	1a99e <ull_filter_lll_rl_addr_allowed+0x52>
				return !rl[i].pirk || rl[i].dev;
   1a9ae:	4433      	add	r3, r6
				*rl_idx = i;
   1a9b0:	7017      	strb	r7, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1a9b2:	f815 3033 	ldrb.w	r3, [r5, r3, lsl #3]
   1a9b6:	075a      	lsls	r2, r3, #29
   1a9b8:	d5e8      	bpl.n	1a98c <ull_filter_lll_rl_addr_allowed+0x40>
   1a9ba:	f3c3 1000 	ubfx	r0, r3, #4, #1
   1a9be:	e7e5      	b.n	1a98c <ull_filter_lll_rl_addr_allowed+0x40>
   1a9c0:	2000f319 	.word	0x2000f319
   1a9c4:	2000e614 	.word	0x2000e614

0001a9c8 <ull_filter_lll_rl_enabled>:
	return rl_enable;
   1a9c8:	4b02      	ldr	r3, [pc, #8]	; (1a9d4 <ull_filter_lll_rl_enabled+0xc>)
   1a9ca:	7818      	ldrb	r0, [r3, #0]
}
   1a9cc:	3800      	subs	r0, #0
   1a9ce:	bf18      	it	ne
   1a9d0:	2001      	movne	r0, #1
   1a9d2:	4770      	bx	lr
   1a9d4:	2000f319 	.word	0x2000f319

0001a9d8 <radio_nrf5_isr>:
static void mfy_ticker_job_idle_get(void *param);
static void ticker_op_job_disable(uint32_t status, void *op_context);
#endif
#endif /* CONFIG_BT_CTLR_LOW_LAT */

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a9d8:	4668      	mov	r0, sp
   1a9da:	f020 0107 	bic.w	r1, r0, #7
   1a9de:	468d      	mov	sp, r1
   1a9e0:	b501      	push	{r0, lr}
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_radio();

	isr_radio();
   1a9e2:	f001 ff2d 	bl	1c840 <isr_radio>

	ISR_DIRECT_PM();
   1a9e6:	f7ec fefb 	bl	77e0 <_arch_isr_direct_pm>
{
#ifdef CONFIG_TRACING
	sys_trace_isr_exit();
#endif
	if (maybe_swap) {
		z_arm_int_exit();
   1a9ea:	f7ed fa2f 	bl	7e4c <z_arm_exc_exit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1a9ee:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   1a9f2:	4685      	mov	sp, r0
   1a9f4:	4770      	bx	lr
   1a9f6:	bf00      	nop

0001a9f8 <rtc0_nrf5_isr>:
	DEBUG_RADIO_ISR(0);
	return 1;
}

static void rtc0_nrf5_isr(const void *arg)
{
   1a9f8:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	lll_prof_enter_ull_high();

	/* On compare0 run ticker worker instance0 */
	if (NRF_RTC0->EVENTS_COMPARE[0]) {
   1a9fa:	4b09      	ldr	r3, [pc, #36]	; (1aa20 <rtc0_nrf5_isr+0x28>)
   1a9fc:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
   1aa00:	b93a      	cbnz	r2, 1aa12 <rtc0_nrf5_isr+0x1a>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;

		ticker_trigger(0);
	}

	mayfly_run(TICKER_USER_ID_ULL_HIGH);
   1aa02:	2001      	movs	r0, #1
   1aa04:	f7f5 ffb4 	bl	10970 <mayfly_run>

	lll_prof_exit_ull_low();
#endif

	DEBUG_TICKER_ISR(0);
}
   1aa08:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	mayfly_run(TICKER_USER_ID_ULL_LOW);
   1aa0c:	2002      	movs	r0, #2
   1aa0e:	f7f5 bfaf 	b.w	10970 <mayfly_run>
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   1aa12:	2000      	movs	r0, #0
   1aa14:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   1aa18:	f7f7 f858 	bl	11acc <ticker_trigger>
   1aa1c:	e7f1      	b.n	1aa02 <rtc0_nrf5_isr+0xa>
   1aa1e:	bf00      	nop
   1aa20:	4000b000 	.word	0x4000b000

0001aa24 <swi_lll_nrf5_isr>:
{
	DEBUG_RADIO_ISR(1);

	lll_prof_enter_lll();

	mayfly_run(TICKER_USER_ID_LLL);
   1aa24:	2000      	movs	r0, #0
   1aa26:	f7f5 bfa3 	b.w	10970 <mayfly_run>
   1aa2a:	bf00      	nop

0001aa2c <isr_race>:
}

static void isr_race(void *param)
{
	/* NOTE: lll_disable could have a race with ... */
	radio_status_reset();
   1aa2c:	f002 b822 	b.w	1ca74 <radio_status_reset>

0001aa30 <ticker_stop_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1aa30:	2801      	cmp	r0, #1
   1aa32:	d800      	bhi.n	1aa36 <ticker_stop_op_cb+0x6>
   1aa34:	4770      	bx	lr
{
   1aa36:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1aa38:	4a06      	ldr	r2, [pc, #24]	; (1aa54 <ticker_stop_op_cb+0x24>)
   1aa3a:	4907      	ldr	r1, [pc, #28]	; (1aa58 <ticker_stop_op_cb+0x28>)
   1aa3c:	4807      	ldr	r0, [pc, #28]	; (1aa5c <ticker_stop_op_cb+0x2c>)
   1aa3e:	f240 23a3 	movw	r3, #675	; 0x2a3
   1aa42:	f007 f86f 	bl	21b24 <printk>
   1aa46:	4040      	eors	r0, r0
   1aa48:	f380 8811 	msr	BASEPRI, r0
   1aa4c:	f04f 0003 	mov.w	r0, #3
   1aa50:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1aa52:	bd08      	pop	{r3, pc}
   1aa54:	00028db8 	.word	0x00028db8
   1aa58:	00028e00 	.word	0x00028e00
   1aa5c:	00028404 	.word	0x00028404

0001aa60 <ticker_start_op_cb>:
	/* NOTE: this callback is present only for addition of debug messages
	 * when needed, else can be dispensed with.
	 */
	ARG_UNUSED(param);

	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1aa60:	2801      	cmp	r0, #1
   1aa62:	d800      	bhi.n	1aa66 <ticker_start_op_cb+0x6>
   1aa64:	4770      	bx	lr
{
   1aa66:	b508      	push	{r3, lr}
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   1aa68:	4a06      	ldr	r2, [pc, #24]	; (1aa84 <ticker_start_op_cb+0x24>)
   1aa6a:	4907      	ldr	r1, [pc, #28]	; (1aa88 <ticker_start_op_cb+0x28>)
   1aa6c:	4807      	ldr	r0, [pc, #28]	; (1aa8c <ticker_start_op_cb+0x2c>)
   1aa6e:	f240 23ae 	movw	r3, #686	; 0x2ae
   1aa72:	f007 f857 	bl	21b24 <printk>
   1aa76:	4040      	eors	r0, r0
   1aa78:	f380 8811 	msr	BASEPRI, r0
   1aa7c:	f04f 0003 	mov.w	r0, #3
   1aa80:	df02      	svc	2
		  (status == TICKER_STATUS_FAILURE));
}
   1aa82:	bd08      	pop	{r3, pc}
   1aa84:	00028db8 	.word	0x00028db8
   1aa88:	00028e00 	.word	0x00028e00
   1aa8c:	00028404 	.word	0x00028404

0001aa90 <preempt_ticker_cb>:
{
	static memq_link_t link;
	static struct mayfly mfy = {0, 0, &link, NULL, preempt};
	uint32_t ret;

	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1aa90:	2200      	movs	r2, #0
{
   1aa92:	b508      	push	{r3, lr}
	ret = mayfly_enqueue(TICKER_USER_ID_ULL_HIGH, TICKER_USER_ID_LLL,
   1aa94:	4611      	mov	r1, r2
   1aa96:	4b0a      	ldr	r3, [pc, #40]	; (1aac0 <preempt_ticker_cb+0x30>)
   1aa98:	2001      	movs	r0, #1
   1aa9a:	f7f5 ff15 	bl	108c8 <mayfly_enqueue>
			     0, &mfy);
	LL_ASSERT(!ret);
   1aa9e:	b900      	cbnz	r0, 1aaa2 <preempt_ticker_cb+0x12>
}
   1aaa0:	bd08      	pop	{r3, pc}
	LL_ASSERT(!ret);
   1aaa2:	4a08      	ldr	r2, [pc, #32]	; (1aac4 <preempt_ticker_cb+0x34>)
   1aaa4:	4908      	ldr	r1, [pc, #32]	; (1aac8 <preempt_ticker_cb+0x38>)
   1aaa6:	4809      	ldr	r0, [pc, #36]	; (1aacc <preempt_ticker_cb+0x3c>)
   1aaa8:	f240 23da 	movw	r3, #730	; 0x2da
   1aaac:	f007 f83a 	bl	21b24 <printk>
   1aab0:	4040      	eors	r0, r0
   1aab2:	f380 8811 	msr	BASEPRI, r0
   1aab6:	f04f 0003 	mov.w	r0, #3
   1aaba:	df02      	svc	2
}
   1aabc:	bd08      	pop	{r3, pc}
   1aabe:	bf00      	nop
   1aac0:	2000062c 	.word	0x2000062c
   1aac4:	00028db8 	.word	0x00028db8
   1aac8:	000286a0 	.word	0x000286a0
   1aacc:	00028404 	.word	0x00028404

0001aad0 <preempt_ticker_start.isra.0>:
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1aad0:	b530      	push	{r4, r5, lr}
	evt = HDR_LLL2EVT(prepare_param->param);
   1aad2:	680b      	ldr	r3, [r1, #0]
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1aad4:	4c16      	ldr	r4, [pc, #88]	; (1ab30 <preempt_ticker_start.isra.0+0x60>)
   1aad6:	4917      	ldr	r1, [pc, #92]	; (1ab34 <preempt_ticker_start.isra.0+0x64>)
   1aad8:	2200      	movs	r2, #0
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1aada:	b08b      	sub	sp, #44	; 0x2c
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1aadc:	e9cd 4207 	strd	r4, r2, [sp, #28]
   1aae0:	e9cd 1205 	strd	r1, r2, [sp, #20]
   1aae4:	e9cd 2203 	strd	r2, r2, [sp, #12]
   1aae8:	e9cd 2201 	strd	r2, r2, [sp, #4]
	preempt_to = MAX(evt->ticks_active_to_start,
   1aaec:	e9d3 5400 	ldrd	r5, r4, [r3]
   1aaf0:	6899      	ldr	r1, [r3, #8]
   1aaf2:	42a5      	cmp	r5, r4
   1aaf4:	bf2c      	ite	cs
   1aaf6:	ebc1 0105 	rsbcs	r1, r1, r5
   1aafa:	ebc1 0104 	rsbcc	r1, r1, r4
static void preempt_ticker_start(struct lll_prepare_param *prepare_param)
   1aafe:	4603      	mov	r3, r0
	ret = ticker_start(TICKER_INSTANCE_ID_CTLR,
   1ab00:	9100      	str	r1, [sp, #0]
   1ab02:	4610      	mov	r0, r2
   1ab04:	4611      	mov	r1, r2
   1ab06:	f7f7 f84f 	bl	11ba8 <ticker_start>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ab0a:	2802      	cmp	r0, #2
   1ab0c:	d801      	bhi.n	1ab12 <preempt_ticker_start.isra.0+0x42>
}
   1ab0e:	b00b      	add	sp, #44	; 0x2c
   1ab10:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ab12:	4a09      	ldr	r2, [pc, #36]	; (1ab38 <preempt_ticker_start.isra.0+0x68>)
   1ab14:	4909      	ldr	r1, [pc, #36]	; (1ab3c <preempt_ticker_start.isra.0+0x6c>)
   1ab16:	480a      	ldr	r0, [pc, #40]	; (1ab40 <preempt_ticker_start.isra.0+0x70>)
   1ab18:	f44f 7333 	mov.w	r3, #716	; 0x2cc
   1ab1c:	f007 f802 	bl	21b24 <printk>
   1ab20:	4040      	eors	r0, r0
   1ab22:	f380 8811 	msr	BASEPRI, r0
   1ab26:	f04f 0003 	mov.w	r0, #3
   1ab2a:	df02      	svc	2
}
   1ab2c:	b00b      	add	sp, #44	; 0x2c
   1ab2e:	bd30      	pop	{r4, r5, pc}
   1ab30:	0001aa61 	.word	0x0001aa61
   1ab34:	0001aa91 	.word	0x0001aa91
   1ab38:	00028db8 	.word	0x00028db8
   1ab3c:	00028e20 	.word	0x00028e20
   1ab40:	00028404 	.word	0x00028404

0001ab44 <preempt>:

static void preempt(void *param)
{
   1ab44:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct lll_event *next;
	int resume_prio;
	uint8_t idx;
	int ret;

	if (!event.curr.abort_cb || !event.curr.param) {
   1ab46:	4e4b      	ldr	r6, [pc, #300]	; (1ac74 <preempt+0x130>)
   1ab48:	68b3      	ldr	r3, [r6, #8]
{
   1ab4a:	b08b      	sub	sp, #44	; 0x2c
	if (!event.curr.abort_cb || !event.curr.param) {
   1ab4c:	b1b3      	cbz	r3, 1ab7c <preempt+0x38>
   1ab4e:	6833      	ldr	r3, [r6, #0]
   1ab50:	b1a3      	cbz	r3, 1ab7c <preempt+0x38>
		return;
	}

	idx = UINT8_MAX;
   1ab52:	23ff      	movs	r3, #255	; 0xff
	next = ull_prepare_dequeue_iter(&idx);
   1ab54:	f10d 000e 	add.w	r0, sp, #14
	idx = UINT8_MAX;
   1ab58:	f88d 300e 	strb.w	r3, [sp, #14]
	next = ull_prepare_dequeue_iter(&idx);
   1ab5c:	f7f9 fdf2 	bl	14744 <ull_prepare_dequeue_iter>
	if (!next) {
   1ab60:	4604      	mov	r4, r0
   1ab62:	b158      	cbz	r0, 1ab7c <preempt+0x38>
		return;
	}

	while (next && (next->is_aborted || next->is_resume)) {
   1ab64:	f894 3020 	ldrb.w	r3, [r4, #32]
   1ab68:	f013 0503 	ands.w	r5, r3, #3
		next = ull_prepare_dequeue_iter(&idx);
   1ab6c:	f10d 000e 	add.w	r0, sp, #14
	while (next && (next->is_aborted || next->is_resume)) {
   1ab70:	d006      	beq.n	1ab80 <preempt+0x3c>
		next = ull_prepare_dequeue_iter(&idx);
   1ab72:	f7f9 fde7 	bl	14744 <ull_prepare_dequeue_iter>
	while (next && (next->is_aborted || next->is_resume)) {
   1ab76:	4604      	mov	r4, r0
   1ab78:	2800      	cmp	r0, #0
   1ab7a:	d1f3      	bne.n	1ab64 <preempt+0x20>
			return;
		}
	} while (next->is_aborted || next->is_resume);

	preempt_ticker_start(&next->prepare_param);
}
   1ab7c:	b00b      	add	sp, #44	; 0x2c
   1ab7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ret = event.curr.is_abort_cb(next->prepare_param.param, next->prio,
   1ab80:	ab05      	add	r3, sp, #20
   1ab82:	e9d6 2700 	ldrd	r2, r7, [r6]
   1ab86:	69e1      	ldr	r1, [r4, #28]
   1ab88:	68e0      	ldr	r0, [r4, #12]
   1ab8a:	9300      	str	r3, [sp, #0]
   1ab8c:	ab04      	add	r3, sp, #16
   1ab8e:	47b8      	blx	r7
	if (!ret) {
   1ab90:	4607      	mov	r7, r0
   1ab92:	2800      	cmp	r0, #0
   1ab94:	d062      	beq.n	1ac5c <preempt+0x118>
	event.curr.abort_cb(NULL, event.curr.param);
   1ab96:	68b3      	ldr	r3, [r6, #8]
   1ab98:	6831      	ldr	r1, [r6, #0]
   1ab9a:	4628      	mov	r0, r5
   1ab9c:	4798      	blx	r3
	if (ret == -EAGAIN) {
   1ab9e:	f117 0f0b 	cmn.w	r7, #11
   1aba2:	d01a      	beq.n	1abda <preempt+0x96>
		LL_ASSERT(ret == -ECANCELED);
   1aba4:	3748      	adds	r7, #72	; 0x48
   1aba6:	d011      	beq.n	1abcc <preempt+0x88>
   1aba8:	4a33      	ldr	r2, [pc, #204]	; (1ac78 <preempt+0x134>)
   1abaa:	4934      	ldr	r1, [pc, #208]	; (1ac7c <preempt+0x138>)
   1abac:	4834      	ldr	r0, [pc, #208]	; (1ac80 <preempt+0x13c>)
   1abae:	f44f 7346 	mov.w	r3, #792	; 0x318
   1abb2:	f006 ffb7 	bl	21b24 <printk>
   1abb6:	4040      	eors	r0, r0
   1abb8:	f380 8811 	msr	BASEPRI, r0
   1abbc:	f04f 0003 	mov.w	r0, #3
   1abc0:	df02      	svc	2
   1abc2:	e003      	b.n	1abcc <preempt+0x88>
	} while (next->is_aborted || next->is_resume);
   1abc4:	f890 3020 	ldrb.w	r3, [r0, #32]
   1abc8:	079b      	lsls	r3, r3, #30
   1abca:	d041      	beq.n	1ac50 <preempt+0x10c>
		next = ull_prepare_dequeue_iter(&idx);
   1abcc:	f10d 000e 	add.w	r0, sp, #14
   1abd0:	f7f9 fdb8 	bl	14744 <ull_prepare_dequeue_iter>
		if (!next) {
   1abd4:	2800      	cmp	r0, #0
   1abd6:	d1f5      	bne.n	1abc4 <preempt+0x80>
   1abd8:	e7d0      	b.n	1ab7c <preempt+0x38>
		iter_idx = UINT8_MAX;
   1abda:	23ff      	movs	r3, #255	; 0xff
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1abdc:	f10d 000f 	add.w	r0, sp, #15
		iter_idx = UINT8_MAX;
   1abe0:	f88d 300f 	strb.w	r3, [sp, #15]
		iter = ull_prepare_dequeue_iter(&iter_idx);
   1abe4:	f7f9 fdae 	bl	14744 <ull_prepare_dequeue_iter>
		while (iter) {
   1abe8:	bb48      	cbnz	r0, 1ac3e <preempt+0xfa>
	prepare_param.param = event.curr.param;
   1abea:	6832      	ldr	r2, [r6, #0]
		ret = resume_enqueue(resume_cb, resume_prio);
   1abec:	9905      	ldr	r1, [sp, #20]
	prepare_param.param = event.curr.param;
   1abee:	9209      	str	r2, [sp, #36]	; 0x24
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1abf0:	2301      	movs	r3, #1
	event.curr.param = NULL;
   1abf2:	2200      	movs	r2, #0
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1abf4:	9301      	str	r3, [sp, #4]
   1abf6:	9100      	str	r1, [sp, #0]
	event.curr.param = NULL;
   1abf8:	6032      	str	r2, [r6, #0]
	return ull_prepare_enqueue(event.curr.is_abort_cb, event.curr.abort_cb,
   1abfa:	e9d6 0101 	ldrd	r0, r1, [r6, #4]
   1abfe:	9b04      	ldr	r3, [sp, #16]
   1ac00:	aa06      	add	r2, sp, #24
   1ac02:	f7f9 fd5b 	bl	146bc <ull_prepare_enqueue>
		LL_ASSERT(!ret);
   1ac06:	2800      	cmp	r0, #0
   1ac08:	d0e0      	beq.n	1abcc <preempt+0x88>
   1ac0a:	4a1b      	ldr	r2, [pc, #108]	; (1ac78 <preempt+0x134>)
   1ac0c:	491d      	ldr	r1, [pc, #116]	; (1ac84 <preempt+0x140>)
   1ac0e:	481c      	ldr	r0, [pc, #112]	; (1ac80 <preempt+0x13c>)
   1ac10:	f240 3316 	movw	r3, #790	; 0x316
   1ac14:	f006 ff86 	bl	21b24 <printk>
   1ac18:	4040      	eors	r0, r0
   1ac1a:	f380 8811 	msr	BASEPRI, r0
   1ac1e:	f04f 0003 	mov.w	r0, #3
   1ac22:	df02      	svc	2
   1ac24:	e7d2      	b.n	1abcc <preempt+0x88>
				iter->is_aborted = 1;
   1ac26:	f043 0302 	orr.w	r3, r3, #2
				iter->abort_cb(&iter->prepare_param,
   1ac2a:	6982      	ldr	r2, [r0, #24]
				iter->is_aborted = 1;
   1ac2c:	f880 3020 	strb.w	r3, [r0, #32]
				iter->abort_cb(&iter->prepare_param,
   1ac30:	4790      	blx	r2
			iter = ull_prepare_dequeue_iter(&iter_idx);
   1ac32:	f10d 000f 	add.w	r0, sp, #15
   1ac36:	f7f9 fd85 	bl	14744 <ull_prepare_dequeue_iter>
		while (iter) {
   1ac3a:	2800      	cmp	r0, #0
   1ac3c:	d0d5      	beq.n	1abea <preempt+0xa6>
			if (!iter->is_aborted &&
   1ac3e:	f890 3020 	ldrb.w	r3, [r0, #32]
   1ac42:	079a      	lsls	r2, r3, #30
   1ac44:	d4f5      	bmi.n	1ac32 <preempt+0xee>
			    event.curr.param == iter->prepare_param.param) {
   1ac46:	68c2      	ldr	r2, [r0, #12]
			if (!iter->is_aborted &&
   1ac48:	6831      	ldr	r1, [r6, #0]
   1ac4a:	4291      	cmp	r1, r2
   1ac4c:	d1f1      	bne.n	1ac32 <preempt+0xee>
   1ac4e:	e7ea      	b.n	1ac26 <preempt+0xe2>
	preempt_ticker_start(&next->prepare_param);
   1ac50:	68c1      	ldr	r1, [r0, #12]
   1ac52:	6800      	ldr	r0, [r0, #0]
   1ac54:	f7ff ff3c 	bl	1aad0 <preempt_ticker_start.isra.0>
}
   1ac58:	b00b      	add	sp, #44	; 0x2c
   1ac5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		next->is_aborted = 1;
   1ac5c:	f894 3020 	ldrb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1ac60:	69a2      	ldr	r2, [r4, #24]
   1ac62:	68e1      	ldr	r1, [r4, #12]
		next->is_aborted = 1;
   1ac64:	f043 0302 	orr.w	r3, r3, #2
   1ac68:	f884 3020 	strb.w	r3, [r4, #32]
		next->abort_cb(&next->prepare_param, next->prepare_param.param);
   1ac6c:	4620      	mov	r0, r4
   1ac6e:	4790      	blx	r2
		goto preempt_next;
   1ac70:	e7ac      	b.n	1abcc <preempt+0x88>
   1ac72:	bf00      	nop
   1ac74:	2000e804 	.word	0x2000e804
   1ac78:	00028db8 	.word	0x00028db8
   1ac7c:	00028e48 	.word	0x00028e48
   1ac80:	00028404 	.word	0x00028404
   1ac84:	000286a0 	.word	0x000286a0

0001ac88 <prepare>:
{
   1ac88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1ac8c:	b085      	sub	sp, #20
   1ac8e:	4604      	mov	r4, r0
   1ac90:	461f      	mov	r7, r3
	p = ull_prepare_dequeue_iter(&idx);
   1ac92:	f10d 000f 	add.w	r0, sp, #15
	idx = UINT8_MAX;
   1ac96:	23ff      	movs	r3, #255	; 0xff
{
   1ac98:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   1ac9c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
	idx = UINT8_MAX;
   1aca0:	f88d 300f 	strb.w	r3, [sp, #15]
{
   1aca4:	460d      	mov	r5, r1
   1aca6:	4616      	mov	r6, r2
	p = ull_prepare_dequeue_iter(&idx);
   1aca8:	f7f9 fd4c 	bl	14744 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1acac:	b918      	cbnz	r0, 1acb6 <prepare+0x2e>
   1acae:	e01e      	b.n	1acee <prepare+0x66>
		p = ull_prepare_dequeue_iter(&idx);
   1acb0:	f7f9 fd48 	bl	14744 <ull_prepare_dequeue_iter>
	while (p && (p->is_aborted || p->is_resume)) {
   1acb4:	b1d8      	cbz	r0, 1acee <prepare+0x66>
   1acb6:	f890 3020 	ldrb.w	r3, [r0, #32]
   1acba:	079b      	lsls	r3, r3, #30
		p = ull_prepare_dequeue_iter(&idx);
   1acbc:	f10d 000f 	add.w	r0, sp, #15
	while (p && (p->is_aborted || p->is_resume)) {
   1acc0:	d1f6      	bne.n	1acb0 <prepare+0x28>
	if (event.curr.abort_cb || (p && is_resume)) {
   1acc2:	4b2e      	ldr	r3, [pc, #184]	; (1ad7c <prepare+0xf4>)
   1acc4:	689a      	ldr	r2, [r3, #8]
   1acc6:	b9aa      	cbnz	r2, 1acf4 <prepare+0x6c>
   1acc8:	f1b9 0f00 	cmp.w	r9, #0
   1accc:	d036      	beq.n	1ad3c <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1acce:	2201      	movs	r2, #1
   1acd0:	9201      	str	r2, [sp, #4]
   1acd2:	9700      	str	r7, [sp, #0]
   1acd4:	4633      	mov	r3, r6
   1acd6:	4629      	mov	r1, r5
   1acd8:	4620      	mov	r0, r4
   1acda:	4642      	mov	r2, r8
   1acdc:	f7f9 fcee 	bl	146bc <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1ace0:	b9d8      	cbnz	r0, 1ad1a <prepare+0x92>
		return -EINPROGRESS;
   1ace2:	f06f 0443 	mvn.w	r4, #67	; 0x43
}
   1ace6:	4620      	mov	r0, r4
   1ace8:	b005      	add	sp, #20
   1acea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (event.curr.abort_cb || (p && is_resume)) {
   1acee:	4b23      	ldr	r3, [pc, #140]	; (1ad7c <prepare+0xf4>)
   1acf0:	689a      	ldr	r2, [r3, #8]
   1acf2:	b31a      	cbz	r2, 1ad3c <prepare+0xb4>
		err = ull_prepare_enqueue(is_abort_cb, abort_cb, prepare_param,
   1acf4:	e9cd 7900 	strd	r7, r9, [sp]
   1acf8:	4633      	mov	r3, r6
   1acfa:	4629      	mov	r1, r5
   1acfc:	4620      	mov	r0, r4
   1acfe:	4642      	mov	r2, r8
   1ad00:	f7f9 fcdc 	bl	146bc <ull_prepare_enqueue>
		LL_ASSERT(!err);
   1ad04:	b948      	cbnz	r0, 1ad1a <prepare+0x92>
		if (is_resume) {
   1ad06:	f1b9 0f00 	cmp.w	r9, #0
   1ad0a:	d1ea      	bne.n	1ace2 <prepare+0x5a>
		preempt_ticker_start(prepare_param);
   1ad0c:	f8d8 100c 	ldr.w	r1, [r8, #12]
   1ad10:	f8d8 0000 	ldr.w	r0, [r8]
   1ad14:	f7ff fedc 	bl	1aad0 <preempt_ticker_start.isra.0>
   1ad18:	e7e3      	b.n	1ace2 <prepare+0x5a>
		LL_ASSERT(!err);
   1ad1a:	4a19      	ldr	r2, [pc, #100]	; (1ad80 <prepare+0xf8>)
   1ad1c:	4919      	ldr	r1, [pc, #100]	; (1ad84 <prepare+0xfc>)
   1ad1e:	481a      	ldr	r0, [pc, #104]	; (1ad88 <prepare+0x100>)
   1ad20:	f44f 7312 	mov.w	r3, #584	; 0x248
   1ad24:	f006 fefe 	bl	21b24 <printk>
   1ad28:	4040      	eors	r0, r0
   1ad2a:	f380 8811 	msr	BASEPRI, r0
   1ad2e:	f04f 0003 	mov.w	r0, #3
   1ad32:	df02      	svc	2
		if (is_resume) {
   1ad34:	f1b9 0f00 	cmp.w	r9, #0
   1ad38:	d1d3      	bne.n	1ace2 <prepare+0x5a>
   1ad3a:	e7e7      	b.n	1ad0c <prepare+0x84>
	event.curr.param = prepare_param->param;
   1ad3c:	f8d8 200c 	ldr.w	r2, [r8, #12]
   1ad40:	601a      	str	r2, [r3, #0]
	event.curr.abort_cb = abort_cb;
   1ad42:	e9c3 4501 	strd	r4, r5, [r3, #4]
	err = prepare_cb(prepare_param);
   1ad46:	4640      	mov	r0, r8
   1ad48:	47b0      	blx	r6
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1ad4a:	2200      	movs	r2, #0
   1ad4c:	4b0f      	ldr	r3, [pc, #60]	; (1ad8c <prepare+0x104>)
   1ad4e:	9200      	str	r2, [sp, #0]
	err = prepare_cb(prepare_param);
   1ad50:	4604      	mov	r4, r0
	ret = ticker_stop(TICKER_INSTANCE_ID_CTLR,
   1ad52:	4611      	mov	r1, r2
   1ad54:	4610      	mov	r0, r2
   1ad56:	f7f6 ffb1 	bl	11cbc <ticker_stop>
	LL_ASSERT((ret == TICKER_STATUS_SUCCESS) ||
   1ad5a:	2802      	cmp	r0, #2
   1ad5c:	d9c3      	bls.n	1ace6 <prepare+0x5e>
   1ad5e:	4a08      	ldr	r2, [pc, #32]	; (1ad80 <prepare+0xf8>)
   1ad60:	490b      	ldr	r1, [pc, #44]	; (1ad90 <prepare+0x108>)
   1ad62:	4809      	ldr	r0, [pc, #36]	; (1ad88 <prepare+0x100>)
   1ad64:	f240 2382 	movw	r3, #642	; 0x282
   1ad68:	f006 fedc 	bl	21b24 <printk>
   1ad6c:	4040      	eors	r0, r0
   1ad6e:	f380 8811 	msr	BASEPRI, r0
   1ad72:	f04f 0003 	mov.w	r0, #3
   1ad76:	df02      	svc	2
   1ad78:	e7b5      	b.n	1ace6 <prepare+0x5e>
   1ad7a:	bf00      	nop
   1ad7c:	2000e804 	.word	0x2000e804
   1ad80:	00028db8 	.word	0x00028db8
   1ad84:	00028684 	.word	0x00028684
   1ad88:	00028404 	.word	0x00028404
   1ad8c:	0001aa31 	.word	0x0001aa31
   1ad90:	00028e20 	.word	0x00028e20

0001ad94 <lll_init>:
{
   1ad94:	b510      	push	{r4, lr}
   1ad96:	4816      	ldr	r0, [pc, #88]	; (1adf0 <lll_init+0x5c>)
   1ad98:	f004 fcce 	bl	1f738 <z_impl_device_get_binding>
	dev_entropy = device_get_binding(DT_LABEL(DT_NODELABEL(rng)));
   1ad9c:	4b15      	ldr	r3, [pc, #84]	; (1adf4 <lll_init+0x60>)
   1ad9e:	6018      	str	r0, [r3, #0]
	if (!dev_entropy) {
   1ada0:	b310      	cbz	r0, 1ade8 <lll_init+0x54>
	event.curr.abort_cb = NULL;
   1ada2:	4b15      	ldr	r3, [pc, #84]	; (1adf8 <lll_init+0x64>)
   1ada4:	2400      	movs	r4, #0
   1ada6:	609c      	str	r4, [r3, #8]
	err = lll_clock_init();
   1ada8:	f000 fa3c 	bl	1b224 <lll_clock_init>
	if (err < 0) {
   1adac:	2800      	cmp	r0, #0
   1adae:	db1a      	blt.n	1ade6 <lll_init+0x52>
	IRQ_DIRECT_CONNECT(RADIO_IRQn, CONFIG_BT_CTLR_LLL_PRIO,
   1adb0:	4621      	mov	r1, r4
   1adb2:	2001      	movs	r0, #1
   1adb4:	4622      	mov	r2, r4
   1adb6:	f7ec fcfb 	bl	77b0 <z_arm_irq_priority_set>
	IRQ_CONNECT(RTC0_IRQn, CONFIG_BT_CTLR_ULL_HIGH_PRIO,
   1adba:	4622      	mov	r2, r4
   1adbc:	200b      	movs	r0, #11
   1adbe:	2101      	movs	r1, #1
   1adc0:	f7ec fcf6 	bl	77b0 <z_arm_irq_priority_set>
	IRQ_CONNECT(HAL_SWI_RADIO_IRQ, CONFIG_BT_CTLR_LLL_PRIO,
   1adc4:	4622      	mov	r2, r4
   1adc6:	4621      	mov	r1, r4
   1adc8:	2018      	movs	r0, #24
   1adca:	f7ec fcf1 	bl	77b0 <z_arm_irq_priority_set>
	irq_enable(RADIO_IRQn);
   1adce:	2001      	movs	r0, #1
   1add0:	f7ec fcbc 	bl	774c <arch_irq_enable>
	irq_enable(RTC0_IRQn);
   1add4:	200b      	movs	r0, #11
   1add6:	f7ec fcb9 	bl	774c <arch_irq_enable>
	irq_enable(HAL_SWI_RADIO_IRQ);
   1adda:	2018      	movs	r0, #24
   1addc:	f7ec fcb6 	bl	774c <arch_irq_enable>
	radio_setup();
   1ade0:	f001 fd5e 	bl	1c8a0 <radio_setup>
	return 0;
   1ade4:	4620      	mov	r0, r4
}
   1ade6:	bd10      	pop	{r4, pc}
		return -ENODEV;
   1ade8:	f06f 0012 	mvn.w	r0, #18
}
   1adec:	bd10      	pop	{r4, pc}
   1adee:	bf00      	nop
   1adf0:	00028e54 	.word	0x00028e54
   1adf4:	2000e800 	.word	0x2000e800
   1adf8:	2000e804 	.word	0x2000e804

0001adfc <lll_csrand_get>:
	return entropy_get_entropy(dev_entropy, buf, len);
   1adfc:	4a05      	ldr	r2, [pc, #20]	; (1ae14 <lll_csrand_get+0x18>)
{
   1adfe:	b410      	push	{r4}
   1ae00:	4603      	mov	r3, r0
	return entropy_get_entropy(dev_entropy, buf, len);
   1ae02:	6810      	ldr	r0, [r2, #0]
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	__ASSERT(api->get_entropy != NULL,
		"Callback pointer should not be NULL");
	return api->get_entropy(dev, buffer, length);
   1ae04:	6884      	ldr	r4, [r0, #8]
   1ae06:	6824      	ldr	r4, [r4, #0]
   1ae08:	b28a      	uxth	r2, r1
   1ae0a:	4619      	mov	r1, r3
   1ae0c:	4623      	mov	r3, r4
}
   1ae0e:	bc10      	pop	{r4}
   1ae10:	4718      	bx	r3
   1ae12:	bf00      	nop
   1ae14:	2000e800 	.word	0x2000e800

0001ae18 <lll_csrand_isr_get>:
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1ae18:	4b08      	ldr	r3, [pc, #32]	; (1ae3c <lll_csrand_isr_get+0x24>)
{
   1ae1a:	b430      	push	{r4, r5}
	return entropy_get_entropy_isr(dev_entropy, buf, len, 0);
   1ae1c:	681d      	ldr	r5, [r3, #0]
					  uint32_t flags)
{
	const struct entropy_driver_api *api =
		(const struct entropy_driver_api *)dev->api;

	if (unlikely(!api->get_entropy_isr)) {
   1ae1e:	68ab      	ldr	r3, [r5, #8]
   1ae20:	685c      	ldr	r4, [r3, #4]
   1ae22:	b13c      	cbz	r4, 1ae34 <lll_csrand_isr_get+0x1c>
   1ae24:	460a      	mov	r2, r1
		return -ENOTSUP;
	}

	return api->get_entropy_isr(dev, buffer, length, flags);
   1ae26:	46a4      	mov	ip, r4
   1ae28:	4601      	mov	r1, r0
   1ae2a:	b292      	uxth	r2, r2
   1ae2c:	4628      	mov	r0, r5
   1ae2e:	2300      	movs	r3, #0
}
   1ae30:	bc30      	pop	{r4, r5}
   1ae32:	4760      	bx	ip
   1ae34:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ae38:	bc30      	pop	{r4, r5}
   1ae3a:	4770      	bx	lr
   1ae3c:	2000e800 	.word	0x2000e800

0001ae40 <lll_rand_isr_get>:
   1ae40:	4b08      	ldr	r3, [pc, #32]	; (1ae64 <lll_rand_isr_get+0x24>)
   1ae42:	b430      	push	{r4, r5}
   1ae44:	681d      	ldr	r5, [r3, #0]
   1ae46:	68ab      	ldr	r3, [r5, #8]
   1ae48:	685c      	ldr	r4, [r3, #4]
   1ae4a:	b13c      	cbz	r4, 1ae5c <lll_rand_isr_get+0x1c>
   1ae4c:	460a      	mov	r2, r1
   1ae4e:	46a4      	mov	ip, r4
   1ae50:	4601      	mov	r1, r0
   1ae52:	b292      	uxth	r2, r2
   1ae54:	4628      	mov	r0, r5
   1ae56:	2300      	movs	r3, #0
   1ae58:	bc30      	pop	{r4, r5}
   1ae5a:	4760      	bx	ip
   1ae5c:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1ae60:	bc30      	pop	{r4, r5}
   1ae62:	4770      	bx	lr
   1ae64:	2000e800 	.word	0x2000e800

0001ae68 <lll_reset>:
}
   1ae68:	2000      	movs	r0, #0
   1ae6a:	4770      	bx	lr

0001ae6c <lll_prepare>:
{
   1ae6c:	b510      	push	{r4, lr}
   1ae6e:	b082      	sub	sp, #8
   1ae70:	9c04      	ldr	r4, [sp, #16]
	return prepare(is_abort_cb, abort_cb, prepare_cb, prio, prepare_param,
   1ae72:	9400      	str	r4, [sp, #0]
   1ae74:	2400      	movs	r4, #0
   1ae76:	9401      	str	r4, [sp, #4]
   1ae78:	f7ff ff06 	bl	1ac88 <prepare>
}
   1ae7c:	b002      	add	sp, #8
   1ae7e:	bd10      	pop	{r4, pc}

0001ae80 <lll_resume>:
{
   1ae80:	b510      	push	{r4, lr}
   1ae82:	b082      	sub	sp, #8
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1ae84:	9000      	str	r0, [sp, #0]
		      next->prio, &next->prepare_param, next->is_resume);
   1ae86:	f890 4020 	ldrb.w	r4, [r0, #32]
	ret = prepare(next->is_abort_cb, next->abort_cb, next->prepare_cb,
   1ae8a:	69c3      	ldr	r3, [r0, #28]
   1ae8c:	6902      	ldr	r2, [r0, #16]
   1ae8e:	f004 0401 	and.w	r4, r4, #1
   1ae92:	e9d0 0105 	ldrd	r0, r1, [r0, #20]
   1ae96:	9401      	str	r4, [sp, #4]
   1ae98:	f7ff fef6 	bl	1ac88 <prepare>
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1ae9c:	b108      	cbz	r0, 1aea2 <lll_resume+0x22>
   1ae9e:	3044      	adds	r0, #68	; 0x44
   1aea0:	d101      	bne.n	1aea6 <lll_resume+0x26>
}
   1aea2:	b002      	add	sp, #8
   1aea4:	bd10      	pop	{r4, pc}
	LL_ASSERT(!ret || ret == -EINPROGRESS);
   1aea6:	4a07      	ldr	r2, [pc, #28]	; (1aec4 <lll_resume+0x44>)
   1aea8:	4907      	ldr	r1, [pc, #28]	; (1aec8 <lll_resume+0x48>)
   1aeaa:	4808      	ldr	r0, [pc, #32]	; (1aecc <lll_resume+0x4c>)
   1aeac:	23fe      	movs	r3, #254	; 0xfe
   1aeae:	f006 fe39 	bl	21b24 <printk>
   1aeb2:	4040      	eors	r0, r0
   1aeb4:	f380 8811 	msr	BASEPRI, r0
   1aeb8:	f04f 0003 	mov.w	r0, #3
   1aebc:	df02      	svc	2
}
   1aebe:	b002      	add	sp, #8
   1aec0:	bd10      	pop	{r4, pc}
   1aec2:	bf00      	nop
   1aec4:	00028db8 	.word	0x00028db8
   1aec8:	00028e58 	.word	0x00028e58
   1aecc:	00028404 	.word	0x00028404

0001aed0 <lll_disable>:
{
   1aed0:	b510      	push	{r4, lr}
	if (!param || (param == event.curr.param)) {
   1aed2:	4604      	mov	r4, r0
{
   1aed4:	b082      	sub	sp, #8
	if (!param || (param == event.curr.param)) {
   1aed6:	2800      	cmp	r0, #0
   1aed8:	d033      	beq.n	1af42 <lll_disable+0x72>
   1aeda:	4b26      	ldr	r3, [pc, #152]	; (1af74 <lll_disable+0xa4>)
   1aedc:	681a      	ldr	r2, [r3, #0]
   1aede:	4282      	cmp	r2, r0
   1aee0:	d029      	beq.n	1af36 <lll_disable+0x66>
		idx = UINT8_MAX;
   1aee2:	23ff      	movs	r3, #255	; 0xff
		next = ull_prepare_dequeue_iter(&idx);
   1aee4:	f10d 0007 	add.w	r0, sp, #7
		idx = UINT8_MAX;
   1aee8:	f88d 3007 	strb.w	r3, [sp, #7]
		next = ull_prepare_dequeue_iter(&idx);
   1aeec:	f7f9 fc2a 	bl	14744 <ull_prepare_dequeue_iter>
		while (next) {
   1aef0:	b940      	cbnz	r0, 1af04 <lll_disable+0x34>
   1aef2:	e01c      	b.n	1af2e <lll_disable+0x5e>
			    (!param || (param == next->prepare_param.param))) {
   1aef4:	68c3      	ldr	r3, [r0, #12]
   1aef6:	42a3      	cmp	r3, r4
   1aef8:	d01b      	beq.n	1af32 <lll_disable+0x62>
			next = ull_prepare_dequeue_iter(&idx);
   1aefa:	f10d 0007 	add.w	r0, sp, #7
   1aefe:	f7f9 fc21 	bl	14744 <ull_prepare_dequeue_iter>
		while (next) {
   1af02:	b1a0      	cbz	r0, 1af2e <lll_disable+0x5e>
			if (!next->is_aborted &&
   1af04:	f890 3020 	ldrb.w	r3, [r0, #32]
   1af08:	079b      	lsls	r3, r3, #30
   1af0a:	d4f6      	bmi.n	1aefa <lll_disable+0x2a>
   1af0c:	2c00      	cmp	r4, #0
   1af0e:	d1f1      	bne.n	1aef4 <lll_disable+0x24>
			    (!param || (param == next->prepare_param.param))) {
   1af10:	68c1      	ldr	r1, [r0, #12]
				next->is_aborted = 1;
   1af12:	f890 3020 	ldrb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1af16:	6982      	ldr	r2, [r0, #24]
				next->is_aborted = 1;
   1af18:	f043 0302 	orr.w	r3, r3, #2
   1af1c:	f880 3020 	strb.w	r3, [r0, #32]
				next->abort_cb(&next->prepare_param,
   1af20:	4790      	blx	r2
			next = ull_prepare_dequeue_iter(&idx);
   1af22:	f10d 0007 	add.w	r0, sp, #7
   1af26:	f7f9 fc0d 	bl	14744 <ull_prepare_dequeue_iter>
		while (next) {
   1af2a:	2800      	cmp	r0, #0
   1af2c:	d1ea      	bne.n	1af04 <lll_disable+0x34>
}
   1af2e:	b002      	add	sp, #8
   1af30:	bd10      	pop	{r4, pc}
   1af32:	4621      	mov	r1, r4
   1af34:	e7ed      	b.n	1af12 <lll_disable+0x42>
		if (event.curr.abort_cb && event.curr.param) {
   1af36:	689b      	ldr	r3, [r3, #8]
   1af38:	b16b      	cbz	r3, 1af56 <lll_disable+0x86>
   1af3a:	4621      	mov	r1, r4
			event.curr.abort_cb(NULL, event.curr.param);
   1af3c:	2000      	movs	r0, #0
   1af3e:	4798      	blx	r3
   1af40:	e7cf      	b.n	1aee2 <lll_disable+0x12>
		if (event.curr.abort_cb && event.curr.param) {
   1af42:	4a0c      	ldr	r2, [pc, #48]	; (1af74 <lll_disable+0xa4>)
   1af44:	6893      	ldr	r3, [r2, #8]
   1af46:	2b00      	cmp	r3, #0
   1af48:	d0cb      	beq.n	1aee2 <lll_disable+0x12>
   1af4a:	6811      	ldr	r1, [r2, #0]
   1af4c:	2900      	cmp	r1, #0
   1af4e:	d0c8      	beq.n	1aee2 <lll_disable+0x12>
			event.curr.abort_cb(NULL, event.curr.param);
   1af50:	2000      	movs	r0, #0
   1af52:	4798      	blx	r3
   1af54:	e7c5      	b.n	1aee2 <lll_disable+0x12>
			LL_ASSERT(!param);
   1af56:	4a08      	ldr	r2, [pc, #32]	; (1af78 <lll_disable+0xa8>)
   1af58:	4908      	ldr	r1, [pc, #32]	; (1af7c <lll_disable+0xac>)
   1af5a:	4809      	ldr	r0, [pc, #36]	; (1af80 <lll_disable+0xb0>)
   1af5c:	f44f 7384 	mov.w	r3, #264	; 0x108
   1af60:	f006 fde0 	bl	21b24 <printk>
   1af64:	4040      	eors	r0, r0
   1af66:	f380 8811 	msr	BASEPRI, r0
   1af6a:	f04f 0003 	mov.w	r0, #3
   1af6e:	df02      	svc	2
   1af70:	e7b7      	b.n	1aee2 <lll_disable+0x12>
   1af72:	bf00      	nop
   1af74:	2000e804 	.word	0x2000e804
   1af78:	00028db8 	.word	0x00028db8
   1af7c:	00028e6c 	.word	0x00028e6c
   1af80:	00028404 	.word	0x00028404

0001af84 <lll_prepare_done>:
}
   1af84:	2000      	movs	r0, #0
   1af86:	4770      	bx	lr

0001af88 <lll_done>:
{
   1af88:	b510      	push	{r4, lr}
   1af8a:	4604      	mov	r4, r0
	next = ull_prepare_dequeue_get();
   1af8c:	f7f9 fbcc 	bl	14728 <ull_prepare_dequeue_get>
	LL_ASSERT(!param || next);
   1af90:	b13c      	cbz	r4, 1afa2 <lll_done+0x1a>
   1af92:	b320      	cbz	r0, 1afde <lll_done+0x56>
		ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1af94:	6820      	ldr	r0, [r4, #0]
   1af96:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1af98:	f7f9 fc04 	bl	147a4 <ull_event_done>
	LL_ASSERT(evdone);
   1af9c:	b180      	cbz	r0, 1afc0 <lll_done+0x38>
}
   1af9e:	2000      	movs	r0, #0
   1afa0:	bd10      	pop	{r4, pc}
		LL_ASSERT(event.curr.abort_cb);
   1afa2:	4c1d      	ldr	r4, [pc, #116]	; (1b018 <lll_done+0x90>)
   1afa4:	68a3      	ldr	r3, [r4, #8]
   1afa6:	b343      	cbz	r3, 1affa <lll_done+0x72>
		param = event.curr.param;
   1afa8:	6820      	ldr	r0, [r4, #0]
		event.curr.abort_cb = NULL;
   1afaa:	2300      	movs	r3, #0
   1afac:	60a3      	str	r3, [r4, #8]
		event.curr.param = NULL;
   1afae:	6023      	str	r3, [r4, #0]
		if (param) {
   1afb0:	2800      	cmp	r0, #0
   1afb2:	d0f1      	beq.n	1af98 <lll_done+0x10>
			ull = HDR_ULL(((struct lll_hdr *)param)->parent);
   1afb4:	6800      	ldr	r0, [r0, #0]
   1afb6:	3010      	adds	r0, #16
	evdone = ull_event_done(ull);
   1afb8:	f7f9 fbf4 	bl	147a4 <ull_event_done>
	LL_ASSERT(evdone);
   1afbc:	2800      	cmp	r0, #0
   1afbe:	d1ee      	bne.n	1af9e <lll_done+0x16>
   1afc0:	4a16      	ldr	r2, [pc, #88]	; (1b01c <lll_done+0x94>)
   1afc2:	4917      	ldr	r1, [pc, #92]	; (1b020 <lll_done+0x98>)
   1afc4:	4817      	ldr	r0, [pc, #92]	; (1b024 <lll_done+0x9c>)
   1afc6:	f240 1359 	movw	r3, #345	; 0x159
   1afca:	f006 fdab 	bl	21b24 <printk>
   1afce:	4040      	eors	r0, r0
   1afd0:	f380 8811 	msr	BASEPRI, r0
   1afd4:	f04f 0003 	mov.w	r0, #3
   1afd8:	df02      	svc	2
}
   1afda:	2000      	movs	r0, #0
   1afdc:	bd10      	pop	{r4, pc}
	LL_ASSERT(!param || next);
   1afde:	4a0f      	ldr	r2, [pc, #60]	; (1b01c <lll_done+0x94>)
   1afe0:	4911      	ldr	r1, [pc, #68]	; (1b028 <lll_done+0xa0>)
   1afe2:	4810      	ldr	r0, [pc, #64]	; (1b024 <lll_done+0x9c>)
   1afe4:	f240 133b 	movw	r3, #315	; 0x13b
   1afe8:	f006 fd9c 	bl	21b24 <printk>
   1afec:	4040      	eors	r0, r0
   1afee:	f380 8811 	msr	BASEPRI, r0
   1aff2:	f04f 0003 	mov.w	r0, #3
   1aff6:	df02      	svc	2
   1aff8:	e7cc      	b.n	1af94 <lll_done+0xc>
		LL_ASSERT(event.curr.abort_cb);
   1affa:	4a08      	ldr	r2, [pc, #32]	; (1b01c <lll_done+0x94>)
   1affc:	490b      	ldr	r1, [pc, #44]	; (1b02c <lll_done+0xa4>)
   1affe:	4809      	ldr	r0, [pc, #36]	; (1b024 <lll_done+0x9c>)
   1b000:	f240 1341 	movw	r3, #321	; 0x141
   1b004:	f006 fd8e 	bl	21b24 <printk>
   1b008:	4040      	eors	r0, r0
   1b00a:	f380 8811 	msr	BASEPRI, r0
   1b00e:	f04f 0003 	mov.w	r0, #3
   1b012:	df02      	svc	2
   1b014:	e7c8      	b.n	1afa8 <lll_done+0x20>
   1b016:	bf00      	nop
   1b018:	2000e804 	.word	0x2000e804
   1b01c:	00028db8 	.word	0x00028db8
   1b020:	00028e98 	.word	0x00028e98
   1b024:	00028404 	.word	0x00028404
   1b028:	00028e74 	.word	0x00028e74
   1b02c:	00028e84 	.word	0x00028e84

0001b030 <lll_is_abort_cb>:
}
   1b030:	f06f 0047 	mvn.w	r0, #71	; 0x47
   1b034:	4770      	bx	lr
   1b036:	bf00      	nop

0001b038 <lll_evt_offset_get>:
	} else if (evt->ticks_xtal_to_start & XON_BITMASK) {
   1b038:	6803      	ldr	r3, [r0, #0]
   1b03a:	2b00      	cmp	r3, #0
		return MAX(evt->ticks_active_to_start,
   1b03c:	bfb4      	ite	lt
   1b03e:	e9d0 0301 	ldrdlt	r0, r3, [r0, #4]
		return MAX(evt->ticks_active_to_start,
   1b042:	6840      	ldrge	r0, [r0, #4]
   1b044:	4298      	cmp	r0, r3
   1b046:	bf38      	it	cc
   1b048:	4618      	movcc	r0, r3
}
   1b04a:	4770      	bx	lr

0001b04c <lll_preempt_calc>:
{
   1b04c:	b510      	push	{r4, lr}
   1b04e:	4614      	mov	r4, r2
	ticks_now = ticker_ticks_now_get();
   1b050:	f7f6 fe76 	bl	11d40 <ticker_ticks_now_get>
	diff = ticker_ticks_diff_get(ticks_now, ticks_at_event);
   1b054:	4621      	mov	r1, r4
   1b056:	f7f6 fe75 	bl	11d44 <ticker_ticks_diff_get>
	diff += HAL_TICKER_CNTR_CMP_OFFSET_MIN;
   1b05a:	3003      	adds	r0, #3
	if (!(diff & BIT(HAL_TICKER_CNTR_MSBIT)) &&
   1b05c:	0203      	lsls	r3, r0, #8
   1b05e:	d404      	bmi.n	1b06a <lll_preempt_calc+0x1e>
   1b060:	2809      	cmp	r0, #9
   1b062:	bf94      	ite	ls
   1b064:	2000      	movls	r0, #0
   1b066:	2001      	movhi	r0, #1
}
   1b068:	bd10      	pop	{r4, pc}
	return 0;
   1b06a:	2000      	movs	r0, #0
}
   1b06c:	bd10      	pop	{r4, pc}
   1b06e:	bf00      	nop

0001b070 <lll_chan_set>:
	switch (chan) {
   1b070:	2826      	cmp	r0, #38	; 0x26
{
   1b072:	b510      	push	{r4, lr}
   1b074:	4604      	mov	r4, r0
	switch (chan) {
   1b076:	d01c      	beq.n	1b0b2 <lll_chan_set+0x42>
   1b078:	2827      	cmp	r0, #39	; 0x27
   1b07a:	d012      	beq.n	1b0a2 <lll_chan_set+0x32>
   1b07c:	2825      	cmp	r0, #37	; 0x25
   1b07e:	d008      	beq.n	1b092 <lll_chan_set+0x22>
		if (chan < 11) {
   1b080:	280a      	cmp	r0, #10
   1b082:	d91e      	bls.n	1b0c2 <lll_chan_set+0x52>
		} else if (chan < 40) {
   1b084:	2827      	cmp	r0, #39	; 0x27
   1b086:	d821      	bhi.n	1b0cc <lll_chan_set+0x5c>
			radio_freq_chan_set(28 + ((chan - 11) * 2U));
   1b088:	3003      	adds	r0, #3
   1b08a:	0040      	lsls	r0, r0, #1
   1b08c:	f001 fc64 	bl	1c958 <radio_freq_chan_set>
   1b090:	e002      	b.n	1b098 <lll_chan_set+0x28>
		radio_freq_chan_set(2);
   1b092:	2002      	movs	r0, #2
   1b094:	f001 fc60 	bl	1c958 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b098:	4620      	mov	r0, r4
}
   1b09a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b09e:	f001 bc61 	b.w	1c964 <radio_whiten_iv_set>
		radio_freq_chan_set(80);
   1b0a2:	2050      	movs	r0, #80	; 0x50
   1b0a4:	f001 fc58 	bl	1c958 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b0a8:	4620      	mov	r0, r4
}
   1b0aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b0ae:	f001 bc59 	b.w	1c964 <radio_whiten_iv_set>
		radio_freq_chan_set(26);
   1b0b2:	201a      	movs	r0, #26
   1b0b4:	f001 fc50 	bl	1c958 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1b0b8:	4620      	mov	r0, r4
}
   1b0ba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	radio_whiten_iv_set(chan);
   1b0be:	f001 bc51 	b.w	1c964 <radio_whiten_iv_set>
			radio_freq_chan_set(4 + (chan * 2U));
   1b0c2:	3002      	adds	r0, #2
   1b0c4:	0040      	lsls	r0, r0, #1
   1b0c6:	f001 fc47 	bl	1c958 <radio_freq_chan_set>
   1b0ca:	e7e5      	b.n	1b098 <lll_chan_set+0x28>
			LL_ASSERT(0);
   1b0cc:	4a06      	ldr	r2, [pc, #24]	; (1b0e8 <lll_chan_set+0x78>)
   1b0ce:	4907      	ldr	r1, [pc, #28]	; (1b0ec <lll_chan_set+0x7c>)
   1b0d0:	4807      	ldr	r0, [pc, #28]	; (1b0f0 <lll_chan_set+0x80>)
   1b0d2:	f44f 73de 	mov.w	r3, #444	; 0x1bc
   1b0d6:	f006 fd25 	bl	21b24 <printk>
   1b0da:	4040      	eors	r0, r0
   1b0dc:	f380 8811 	msr	BASEPRI, r0
   1b0e0:	f04f 0003 	mov.w	r0, #3
   1b0e4:	df02      	svc	2
   1b0e6:	e7d7      	b.n	1b098 <lll_chan_set+0x28>
   1b0e8:	00028db8 	.word	0x00028db8
   1b0ec:	0002849c 	.word	0x0002849c
   1b0f0:	00028404 	.word	0x00028404

0001b0f4 <lll_radio_rx_ready_delay_get>:
	return radio_rx_ready_delay_get(phy, flags);
   1b0f4:	f001 bc9c 	b.w	1ca30 <radio_rx_ready_delay_get>

0001b0f8 <lll_isr_tx_status_reset>:
{
   1b0f8:	b508      	push	{r3, lr}
	radio_status_reset();
   1b0fa:	f001 fcbb 	bl	1ca74 <radio_status_reset>
}
   1b0fe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_tmr_status_reset();
   1b102:	f001 be09 	b.w	1cd18 <radio_tmr_status_reset>
   1b106:	bf00      	nop

0001b108 <lll_isr_rx_status_reset>:
{
   1b108:	b508      	push	{r3, lr}
	radio_status_reset();
   1b10a:	f001 fcb3 	bl	1ca74 <radio_status_reset>
	radio_tmr_status_reset();
   1b10e:	f001 fe03 	bl	1cd18 <radio_tmr_status_reset>
}
   1b112:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1b116:	f001 bdab 	b.w	1cc70 <radio_rssi_status_reset>
   1b11a:	bf00      	nop

0001b11c <lll_isr_status_reset>:
{
   1b11c:	b508      	push	{r3, lr}
	radio_status_reset();
   1b11e:	f001 fca9 	bl	1ca74 <radio_status_reset>
	radio_tmr_status_reset();
   1b122:	f001 fdf9 	bl	1cd18 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1b126:	f001 fddf 	bl	1cce8 <radio_filter_status_reset>
	radio_ar_status_reset();
   1b12a:	f001 ffbf 	bl	1d0ac <radio_ar_status_reset>
}
   1b12e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	radio_rssi_status_reset();
   1b132:	f001 bd9d 	b.w	1cc70 <radio_rssi_status_reset>
   1b136:	bf00      	nop

0001b138 <lll_isr_cleanup>:
{
   1b138:	b508      	push	{r3, lr}
   1b13a:	4601      	mov	r1, r0
	radio_isr_set(isr_race, param);
   1b13c:	4815      	ldr	r0, [pc, #84]	; (1b194 <lll_isr_cleanup+0x5c>)
   1b13e:	f001 fb8f 	bl	1c860 <radio_isr_set>
	if (!radio_is_idle()) {
   1b142:	f001 fcb7 	bl	1cab4 <radio_is_idle>
   1b146:	b150      	cbz	r0, 1b15e <lll_isr_cleanup+0x26>
	radio_tmr_stop();
   1b148:	f001 fe8a 	bl	1ce60 <radio_tmr_stop>
	err = lll_hfclock_off();
   1b14c:	f000 f8ae 	bl	1b2ac <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b150:	2800      	cmp	r0, #0
   1b152:	db0c      	blt.n	1b16e <lll_isr_cleanup+0x36>
}
   1b154:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b158:	2000      	movs	r0, #0
   1b15a:	f7ff bf15 	b.w	1af88 <lll_done>
		radio_disable();
   1b15e:	f001 fc75 	bl	1ca4c <radio_disable>
	radio_tmr_stop();
   1b162:	f001 fe7d 	bl	1ce60 <radio_tmr_stop>
	err = lll_hfclock_off();
   1b166:	f000 f8a1 	bl	1b2ac <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b16a:	2800      	cmp	r0, #0
   1b16c:	daf2      	bge.n	1b154 <lll_isr_cleanup+0x1c>
   1b16e:	4a0a      	ldr	r2, [pc, #40]	; (1b198 <lll_isr_cleanup+0x60>)
   1b170:	490a      	ldr	r1, [pc, #40]	; (1b19c <lll_isr_cleanup+0x64>)
   1b172:	480b      	ldr	r0, [pc, #44]	; (1b1a0 <lll_isr_cleanup+0x68>)
   1b174:	f240 231f 	movw	r3, #543	; 0x21f
   1b178:	f006 fcd4 	bl	21b24 <printk>
   1b17c:	4040      	eors	r0, r0
   1b17e:	f380 8811 	msr	BASEPRI, r0
   1b182:	f04f 0003 	mov.w	r0, #3
   1b186:	df02      	svc	2
	lll_done(NULL);
   1b188:	2000      	movs	r0, #0
}
   1b18a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	lll_done(NULL);
   1b18e:	f7ff befb 	b.w	1af88 <lll_done>
   1b192:	bf00      	nop
   1b194:	0001aa2d 	.word	0x0001aa2d
   1b198:	00028db8 	.word	0x00028db8
   1b19c:	00028ea0 	.word	0x00028ea0
   1b1a0:	00028404 	.word	0x00028404

0001b1a4 <lll_isr_abort>:
{
   1b1a4:	b510      	push	{r4, lr}
   1b1a6:	4604      	mov	r4, r0
	radio_status_reset();
   1b1a8:	f001 fc64 	bl	1ca74 <radio_status_reset>
	radio_tmr_status_reset();
   1b1ac:	f001 fdb4 	bl	1cd18 <radio_tmr_status_reset>
	radio_filter_status_reset();
   1b1b0:	f001 fd9a 	bl	1cce8 <radio_filter_status_reset>
	radio_ar_status_reset();
   1b1b4:	f001 ff7a 	bl	1d0ac <radio_ar_status_reset>
	radio_rssi_status_reset();
   1b1b8:	f001 fd5a 	bl	1cc70 <radio_rssi_status_reset>
	lll_isr_cleanup(param);
   1b1bc:	4620      	mov	r0, r4
}
   1b1be:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b1c2:	f7ff bfb9 	b.w	1b138 <lll_isr_cleanup>
   1b1c6:	bf00      	nop

0001b1c8 <clock_ready>:
	z_impl_k_sem_give(sem);
   1b1c8:	f101 0010 	add.w	r0, r1, #16
   1b1cc:	f005 b94a 	b.w	20464 <z_impl_k_sem_give>

0001b1d0 <blocking_on>:

	k_sem_give(&clk_state->sem);
}

static int blocking_on(struct onoff_manager *mgr, uint32_t timeout)
{
   1b1d0:	b570      	push	{r4, r5, r6, lr}
   1b1d2:	4605      	mov	r5, r0
   1b1d4:	b08a      	sub	sp, #40	; 0x28
   1b1d6:	460c      	mov	r4, r1
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b1d8:	2201      	movs	r2, #1
   1b1da:	2100      	movs	r1, #0
   1b1dc:	a804      	add	r0, sp, #16
   1b1de:	f00b ff70 	bl	270c2 <z_impl_k_sem_init>
					      sys_notify_generic_callback handler)
{
	__ASSERT_NO_MSG(notify != NULL);
	__ASSERT_NO_MSG(handler != NULL);

	*notify = (struct sys_notify){
   1b1e2:	4b0f      	ldr	r3, [pc, #60]	; (1b220 <blocking_on+0x50>)
   1b1e4:	9301      	str	r3, [sp, #4]
   1b1e6:	2600      	movs	r6, #0
   1b1e8:	2303      	movs	r3, #3
	struct lll_clock_state state;
	int err;

	k_sem_init(&state.sem, 0, 1);
	sys_notify_init_callback(&state.cli.notify, clock_ready);
	err = onoff_request(mgr, &state.cli);
   1b1ea:	4669      	mov	r1, sp
   1b1ec:	4628      	mov	r0, r5
   1b1ee:	9603      	str	r6, [sp, #12]
   1b1f0:	9302      	str	r3, [sp, #8]
   1b1f2:	f006 fd13 	bl	21c1c <onoff_request>
	if (err < 0) {
   1b1f6:	2800      	cmp	r0, #0
   1b1f8:	db10      	blt.n	1b21c <blocking_on+0x4c>
   1b1fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
   1b1fe:	4631      	mov	r1, r6
   1b200:	f240 30e7 	movw	r0, #999	; 0x3e7
   1b204:	fbe4 0103 	umlal	r0, r1, r4, r3
   1b208:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b20c:	2300      	movs	r3, #0
   1b20e:	f7e5 fec3 	bl	f98 <__aeabi_uldivmod>
   1b212:	4602      	mov	r2, r0
   1b214:	460b      	mov	r3, r1
	return z_impl_k_sem_take(sem, timeout);
   1b216:	a804      	add	r0, sp, #16
   1b218:	f005 f94a 	bl	204b0 <z_impl_k_sem_take>
		return err;
	}

	return k_sem_take(&state.sem, K_MSEC(timeout));
}
   1b21c:	b00a      	add	sp, #40	; 0x28
   1b21e:	bd70      	pop	{r4, r5, r6, pc}
   1b220:	0001b1c9 	.word	0x0001b1c9

0001b224 <lll_clock_init>:

int lll_clock_init(void)
{
   1b224:	b510      	push	{r4, lr}
	struct onoff_manager *mgr =
		z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b226:	2001      	movs	r0, #1
   1b228:	f7eb fece 	bl	6fc8 <z_nrf_clock_control_get_onoff>
	*notify = (struct sys_notify){
   1b22c:	4904      	ldr	r1, [pc, #16]	; (1b240 <lll_clock_init+0x1c>)
   1b22e:	2300      	movs	r3, #0
   1b230:	2401      	movs	r4, #1
   1b232:	608c      	str	r4, [r1, #8]
   1b234:	604b      	str	r3, [r1, #4]

	sys_notify_init_spinwait(&lf_cli.notify);

	return onoff_request(mgr, &lf_cli);
}
   1b236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1b23a:	60cb      	str	r3, [r1, #12]
	return onoff_request(mgr, &lf_cli);
   1b23c:	f006 bcee 	b.w	21c1c <onoff_request>
   1b240:	2000e81c 	.word	0x2000e81c

0001b244 <lll_clock_wait>:
{
	struct onoff_manager *mgr;
	static bool done;
	int err;

	if (done) {
   1b244:	4b0c      	ldr	r3, [pc, #48]	; (1b278 <lll_clock_wait+0x34>)
   1b246:	781a      	ldrb	r2, [r3, #0]
   1b248:	b10a      	cbz	r2, 1b24e <lll_clock_wait+0xa>
		return 0;
   1b24a:	2000      	movs	r0, #0
	if (err != ONOFF_STATE_ON) {
		return -EIO;
	}

	return 0;
}
   1b24c:	4770      	bx	lr
{
   1b24e:	b510      	push	{r4, lr}
	done = true;
   1b250:	2001      	movs	r0, #1
   1b252:	7018      	strb	r0, [r3, #0]
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b254:	f7eb feb8 	bl	6fc8 <z_nrf_clock_control_get_onoff>
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b258:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
	mgr = z_nrf_clock_control_get_onoff(CLOCK_CONTROL_NRF_SUBSYS_LF);
   1b25c:	4604      	mov	r4, r0
	err = blocking_on(mgr, LFCLOCK_TIMEOUT_MS);
   1b25e:	f7ff ffb7 	bl	1b1d0 <blocking_on>
	if (err) {
   1b262:	b938      	cbnz	r0, 1b274 <lll_clock_wait+0x30>
	err = onoff_release(mgr);
   1b264:	4620      	mov	r0, r4
   1b266:	f006 fd22 	bl	21cae <onoff_release>
	if (err != ONOFF_STATE_ON) {
   1b26a:	2802      	cmp	r0, #2
		return 0;
   1b26c:	bf0c      	ite	eq
   1b26e:	2000      	moveq	r0, #0
		return -EIO;
   1b270:	f06f 0004 	mvnne.w	r0, #4
}
   1b274:	bd10      	pop	{r4, pc}
   1b276:	bf00      	nop
   1b278:	2000f31b 	.word	0x2000f31b

0001b27c <lll_hfclock_on>:

int lll_hfclock_on(void)
{
   1b27c:	b508      	push	{r3, lr}
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1b27e:	4b0a      	ldr	r3, [pc, #40]	; (1b2a8 <lll_hfclock_on+0x2c>)
   1b280:	f3bf 8f5b 	dmb	ish
   1b284:	e853 2f00 	ldrex	r2, [r3]
   1b288:	1c51      	adds	r1, r2, #1
   1b28a:	e843 1000 	strex	r0, r1, [r3]
   1b28e:	2800      	cmp	r0, #0
   1b290:	d1f8      	bne.n	1b284 <lll_hfclock_on+0x8>
   1b292:	f3bf 8f5b 	dmb	ish
	if (atomic_inc(&hf_refcnt) > 0) {
   1b296:	2a00      	cmp	r2, #0
   1b298:	dd01      	ble.n	1b29e <lll_hfclock_on+0x22>

	z_nrf_clock_bt_ctlr_hf_request();
	DEBUG_RADIO_XTAL(1);

	return 0;
}
   1b29a:	2000      	movs	r0, #0
   1b29c:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_request();
   1b29e:	f7eb fe9b 	bl	6fd8 <z_nrf_clock_bt_ctlr_hf_request>
}
   1b2a2:	2000      	movs	r0, #0
   1b2a4:	bd08      	pop	{r3, pc}
   1b2a6:	bf00      	nop
   1b2a8:	2000e818 	.word	0x2000e818

0001b2ac <lll_hfclock_off>:

	return err;
}

int lll_hfclock_off(void)
{
   1b2ac:	b508      	push	{r3, lr}
	if (hf_refcnt < 1) {
   1b2ae:	4b0d      	ldr	r3, [pc, #52]	; (1b2e4 <lll_hfclock_off+0x38>)
   1b2b0:	681a      	ldr	r2, [r3, #0]
   1b2b2:	2a00      	cmp	r2, #0
   1b2b4:	dd12      	ble.n	1b2dc <lll_hfclock_off+0x30>
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1b2b6:	f3bf 8f5b 	dmb	ish
   1b2ba:	e853 2f00 	ldrex	r2, [r3]
   1b2be:	1e51      	subs	r1, r2, #1
   1b2c0:	e843 1000 	strex	r0, r1, [r3]
   1b2c4:	2800      	cmp	r0, #0
   1b2c6:	d1f8      	bne.n	1b2ba <lll_hfclock_off+0xe>
   1b2c8:	f3bf 8f5b 	dmb	ish
		return -EALREADY;
	}

	if (atomic_dec(&hf_refcnt) > 1) {
   1b2cc:	2a01      	cmp	r2, #1
   1b2ce:	dd01      	ble.n	1b2d4 <lll_hfclock_off+0x28>
		return 0;
   1b2d0:	2000      	movs	r0, #0

	z_nrf_clock_bt_ctlr_hf_release();
	DEBUG_RADIO_XTAL(0);

	return 0;
}
   1b2d2:	bd08      	pop	{r3, pc}
	z_nrf_clock_bt_ctlr_hf_release();
   1b2d4:	f7eb fe96 	bl	7004 <z_nrf_clock_bt_ctlr_hf_release>
	return 0;
   1b2d8:	2000      	movs	r0, #0
}
   1b2da:	bd08      	pop	{r3, pc}
		return -EALREADY;
   1b2dc:	f06f 0044 	mvn.w	r0, #68	; 0x44
}
   1b2e0:	bd08      	pop	{r3, pc}
   1b2e2:	bf00      	nop
   1b2e4:	2000e818 	.word	0x2000e818

0001b2e8 <lll_clock_ppm_local_get>:
}

uint32_t lll_clock_ppm_local_get(void)
{
	return sca_ppm_lut[CLOCK_CONTROL_NRF_K32SRC_ACCURACY];
}
   1b2e8:	2014      	movs	r0, #20
   1b2ea:	4770      	bx	lr

0001b2ec <lll_clock_ppm_get>:

uint32_t lll_clock_ppm_get(uint8_t sca)
{
	return sca_ppm_lut[sca];
   1b2ec:	4b01      	ldr	r3, [pc, #4]	; (1b2f4 <lll_clock_ppm_get+0x8>)
}
   1b2ee:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
   1b2f2:	4770      	bx	lr
   1b2f4:	00028ecc 	.word	0x00028ecc

0001b2f8 <isr_abort>:

	lll_isr_cleanup(param);
}

static void isr_abort(void *param)
{
   1b2f8:	b510      	push	{r4, lr}
   1b2fa:	4604      	mov	r4, r0
	/* Clear radio status and events */
	lll_isr_status_reset();
   1b2fc:	f7ff ff0e 	bl	1b11c <lll_isr_status_reset>

	radio_filter_disable();
   1b300:	f001 fce8 	bl	1ccd4 <radio_filter_disable>

	lll_isr_cleanup(param);
   1b304:	4620      	mov	r0, r4
}
   1b306:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b30a:	f7ff bf15 	b.w	1b138 <lll_isr_cleanup>
   1b30e:	bf00      	nop

0001b310 <isr_tx>:
{
   1b310:	b530      	push	{r4, r5, lr}
   1b312:	b083      	sub	sp, #12
   1b314:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1b316:	f7ff feef 	bl	1b0f8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1b31a:	2096      	movs	r0, #150	; 0x96
   1b31c:	f001 fd0c 	bl	1cd38 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(phy_p, 0, phy_p, 0);
   1b320:	2300      	movs	r3, #0
   1b322:	461a      	mov	r2, r3
   1b324:	4619      	mov	r1, r3
   1b326:	4618      	mov	r0, r3
   1b328:	f001 fc34 	bl	1cb94 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(radio_pkt_scratch_get());
   1b32c:	f001 fbe6 	bl	1cafc <radio_pkt_scratch_get>
   1b330:	f001 fb70 	bl	1ca14 <radio_pkt_rx_set>
	LL_ASSERT(!radio_is_ready());
   1b334:	f001 fbaa 	bl	1ca8c <radio_is_ready>
   1b338:	b9e0      	cbnz	r0, 1b374 <isr_tx+0x64>
	radio_isr_set(isr_rx, param);
   1b33a:	481e      	ldr	r0, [pc, #120]	; (1b3b4 <isr_tx+0xa4>)
   1b33c:	4621      	mov	r1, r4
   1b33e:	f001 fa8f 	bl	1c860 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b342:	f7ff fb41 	bl	1a9c8 <ull_filter_lll_rl_enabled>
   1b346:	bb50      	cbnz	r0, 1b39e <isr_tx+0x8e>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b348:	f001 fdde 	bl	1cf08 <radio_tmr_tifs_base_get>
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b34c:	2100      	movs	r1, #0
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 + 1;
   1b34e:	4604      	mov	r4, r0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b350:	4608      	mov	r0, r1
   1b352:	f001 fb6f 	bl	1ca34 <radio_rx_chain_delay_get>
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b356:	2100      	movs	r1, #0
	hcto += radio_rx_chain_delay_get(phy_p, 0);
   1b358:	4605      	mov	r5, r0
	hcto -= radio_tx_chain_delay_get(phy_p, 0);
   1b35a:	4608      	mov	r0, r1
   1b35c:	f001 fb66 	bl	1ca2c <radio_tx_chain_delay_get>
   1b360:	442c      	add	r4, r5
   1b362:	34c3      	adds	r4, #195	; 0xc3
	radio_tmr_hcto_configure(hcto);
   1b364:	1a20      	subs	r0, r4, r0
   1b366:	f001 fd87 	bl	1ce78 <radio_tmr_hcto_configure>
}
   1b36a:	b003      	add	sp, #12
   1b36c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	radio_tmr_end_capture();
   1b370:	f001 bdbc 	b.w	1ceec <radio_tmr_end_capture>
	LL_ASSERT(!radio_is_ready());
   1b374:	4a10      	ldr	r2, [pc, #64]	; (1b3b8 <isr_tx+0xa8>)
   1b376:	4911      	ldr	r1, [pc, #68]	; (1b3bc <isr_tx+0xac>)
   1b378:	4811      	ldr	r0, [pc, #68]	; (1b3c0 <isr_tx+0xb0>)
   1b37a:	f240 238e 	movw	r3, #654	; 0x28e
   1b37e:	f006 fbd1 	bl	21b24 <printk>
   1b382:	4040      	eors	r0, r0
   1b384:	f380 8811 	msr	BASEPRI, r0
   1b388:	f04f 0003 	mov.w	r0, #3
   1b38c:	df02      	svc	2
	radio_isr_set(isr_rx, param);
   1b38e:	4809      	ldr	r0, [pc, #36]	; (1b3b4 <isr_tx+0xa4>)
   1b390:	4621      	mov	r1, r4
   1b392:	f001 fa65 	bl	1c860 <radio_isr_set>
	if (ull_filter_lll_rl_enabled()) {
   1b396:	f7ff fb17 	bl	1a9c8 <ull_filter_lll_rl_enabled>
   1b39a:	2800      	cmp	r0, #0
   1b39c:	d0d4      	beq.n	1b348 <isr_tx+0x38>
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b39e:	f10d 0007 	add.w	r0, sp, #7
   1b3a2:	f7ff fa3b 	bl	1a81c <ull_filter_lll_irks_get>
		radio_ar_configure(count, irks, 0);
   1b3a6:	2200      	movs	r2, #0
		uint8_t count, *irks = ull_filter_lll_irks_get(&count);
   1b3a8:	4601      	mov	r1, r0
		radio_ar_configure(count, irks, 0);
   1b3aa:	f89d 0007 	ldrb.w	r0, [sp, #7]
   1b3ae:	f001 fe43 	bl	1d038 <radio_ar_configure>
   1b3b2:	e7c9      	b.n	1b348 <isr_tx+0x38>
   1b3b4:	0001bb15 	.word	0x0001bb15
   1b3b8:	00028edc 	.word	0x00028edc
   1b3bc:	00028f28 	.word	0x00028f28
   1b3c0:	00028404 	.word	0x00028404

0001b3c4 <is_abort_cb>:
	if (next != curr) {
   1b3c4:	4282      	cmp	r2, r0
{
   1b3c6:	b508      	push	{r3, lr}
	if (next != curr) {
   1b3c8:	d011      	beq.n	1b3ee <is_abort_cb+0x2a>
		} else if (lll->is_hdcd) {
   1b3ca:	7b12      	ldrb	r2, [r2, #12]
   1b3cc:	07d2      	lsls	r2, r2, #31
   1b3ce:	d402      	bmi.n	1b3d6 <is_abort_cb+0x12>
			return -ECANCELED;
   1b3d0:	f06f 0047 	mvn.w	r0, #71	; 0x47
}
   1b3d4:	bd08      	pop	{r3, pc}
			*resume_cb = resume_prepare_cb;
   1b3d6:	4914      	ldr	r1, [pc, #80]	; (1b428 <is_abort_cb+0x64>)
   1b3d8:	6019      	str	r1, [r3, #0]
			*resume_prio = 0; /* TODO: */
   1b3da:	9b02      	ldr	r3, [sp, #8]
   1b3dc:	2200      	movs	r2, #0
   1b3de:	601a      	str	r2, [r3, #0]
			err = lll_hfclock_on();
   1b3e0:	f7ff ff4c 	bl	1b27c <lll_hfclock_on>
			LL_ASSERT(err >= 0);
   1b3e4:	2800      	cmp	r0, #0
   1b3e6:	db0f      	blt.n	1b408 <is_abort_cb+0x44>
   1b3e8:	f06f 000a 	mvn.w	r0, #10
}
   1b3ec:	bd08      	pop	{r3, pc}
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
}

static inline struct pdu_adv *lll_adv_data_curr_get(struct lll_adv *lll)
{
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1b3ee:	7c13      	ldrb	r3, [r2, #16]
   1b3f0:	eb02 0283 	add.w	r2, r2, r3, lsl #2
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1b3f4:	6953      	ldr	r3, [r2, #20]
   1b3f6:	781b      	ldrb	r3, [r3, #0]
   1b3f8:	f003 030f 	and.w	r3, r3, #15
		return 0;
   1b3fc:	2b01      	cmp	r3, #1
   1b3fe:	bf14      	ite	ne
   1b400:	f06f 0047 	mvnne.w	r0, #71	; 0x47
   1b404:	2000      	moveq	r0, #0
}
   1b406:	bd08      	pop	{r3, pc}
			LL_ASSERT(err >= 0);
   1b408:	4a08      	ldr	r2, [pc, #32]	; (1b42c <is_abort_cb+0x68>)
   1b40a:	4909      	ldr	r1, [pc, #36]	; (1b430 <is_abort_cb+0x6c>)
   1b40c:	4809      	ldr	r0, [pc, #36]	; (1b434 <is_abort_cb+0x70>)
   1b40e:	f44f 7313 	mov.w	r3, #588	; 0x24c
   1b412:	f006 fb87 	bl	21b24 <printk>
   1b416:	4040      	eors	r0, r0
   1b418:	f380 8811 	msr	BASEPRI, r0
   1b41c:	f04f 0003 	mov.w	r0, #3
   1b420:	df02      	svc	2
   1b422:	f06f 000a 	mvn.w	r0, #10
}
   1b426:	bd08      	pop	{r3, pc}
   1b428:	0001b931 	.word	0x0001b931
   1b42c:	00028edc 	.word	0x00028edc
   1b430:	00028ea0 	.word	0x00028ea0
   1b434:	00028404 	.word	0x00028404

0001b438 <abort_cb>:
{
   1b438:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1b43a:	b1d8      	cbz	r0, 1b474 <abort_cb+0x3c>
	err = lll_hfclock_off();
   1b43c:	460c      	mov	r4, r1
   1b43e:	f7ff ff35 	bl	1b2ac <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1b442:	2800      	cmp	r0, #0
   1b444:	db04      	blt.n	1b450 <abort_cb+0x18>
	lll_done(param);
   1b446:	4620      	mov	r0, r4
}
   1b448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b44c:	f7ff bd9c 	b.w	1af88 <lll_done>
	LL_ASSERT(err >= 0);
   1b450:	4a0c      	ldr	r2, [pc, #48]	; (1b484 <abort_cb+0x4c>)
   1b452:	490d      	ldr	r1, [pc, #52]	; (1b488 <abort_cb+0x50>)
   1b454:	480d      	ldr	r0, [pc, #52]	; (1b48c <abort_cb+0x54>)
   1b456:	f240 2372 	movw	r3, #626	; 0x272
   1b45a:	f006 fb63 	bl	21b24 <printk>
   1b45e:	4040      	eors	r0, r0
   1b460:	f380 8811 	msr	BASEPRI, r0
   1b464:	f04f 0003 	mov.w	r0, #3
   1b468:	df02      	svc	2
	lll_done(param);
   1b46a:	4620      	mov	r0, r4
}
   1b46c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1b470:	f7ff bd8a 	b.w	1af88 <lll_done>
		radio_isr_set(isr_abort, param);
   1b474:	4806      	ldr	r0, [pc, #24]	; (1b490 <abort_cb+0x58>)
   1b476:	f001 f9f3 	bl	1c860 <radio_isr_set>
}
   1b47a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1b47e:	f001 bae5 	b.w	1ca4c <radio_disable>
   1b482:	bf00      	nop
   1b484:	00028edc 	.word	0x00028edc
   1b488:	00028ea0 	.word	0x00028ea0
   1b48c:	00028404 	.word	0x00028404
   1b490:	0001b2f9 	.word	0x0001b2f9

0001b494 <lll_adv_init>:
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b494:	4b08      	ldr	r3, [pc, #32]	; (1b4b8 <lll_adv_init+0x24>)
{
   1b496:	b510      	push	{r4, lr}
	mem_init(mem_pdu.pool, PDU_MEM_SIZE,
   1b498:	1d18      	adds	r0, r3, #4
   1b49a:	2205      	movs	r2, #5
   1b49c:	2128      	movs	r1, #40	; 0x28
   1b49e:	f7f5 f90b 	bl	106b8 <mem_init>
	MFIFO_INIT(pdu_free);
   1b4a2:	4b06      	ldr	r3, [pc, #24]	; (1b4bc <lll_adv_init+0x28>)
   1b4a4:	2400      	movs	r4, #0
   1b4a6:	805c      	strh	r4, [r3, #2]
	return z_impl_k_sem_init(sem, initial_count, limit);
   1b4a8:	2203      	movs	r2, #3
   1b4aa:	4621      	mov	r1, r4
   1b4ac:	4804      	ldr	r0, [pc, #16]	; (1b4c0 <lll_adv_init+0x2c>)
   1b4ae:	f00b fe08 	bl	270c2 <z_impl_k_sem_init>
}
   1b4b2:	4620      	mov	r0, r4
   1b4b4:	bd10      	pop	{r4, pc}
   1b4b6:	bf00      	nop
   1b4b8:	2000e82c 	.word	0x2000e82c
   1b4bc:	2000063c 	.word	0x2000063c
   1b4c0:	2000e8f8 	.word	0x2000e8f8

0001b4c4 <lll_adv_reset>:
   1b4c4:	4b08      	ldr	r3, [pc, #32]	; (1b4e8 <lll_adv_reset+0x24>)
   1b4c6:	b510      	push	{r4, lr}
   1b4c8:	1d18      	adds	r0, r3, #4
   1b4ca:	2205      	movs	r2, #5
   1b4cc:	2128      	movs	r1, #40	; 0x28
   1b4ce:	f7f5 f8f3 	bl	106b8 <mem_init>
   1b4d2:	4b06      	ldr	r3, [pc, #24]	; (1b4ec <lll_adv_reset+0x28>)
   1b4d4:	2400      	movs	r4, #0
   1b4d6:	805c      	strh	r4, [r3, #2]
   1b4d8:	2203      	movs	r2, #3
   1b4da:	4621      	mov	r1, r4
   1b4dc:	4804      	ldr	r0, [pc, #16]	; (1b4f0 <lll_adv_reset+0x2c>)
   1b4de:	f00b fdf0 	bl	270c2 <z_impl_k_sem_init>
   1b4e2:	4620      	mov	r0, r4
   1b4e4:	bd10      	pop	{r4, pc}
   1b4e6:	bf00      	nop
   1b4e8:	2000e82c 	.word	0x2000e82c
   1b4ec:	2000063c 	.word	0x2000063c
   1b4f0:	2000e8f8 	.word	0x2000e8f8

0001b4f4 <lll_adv_data_init>:
{
   1b4f4:	b510      	push	{r4, lr}
   1b4f6:	4604      	mov	r4, r0
	p = mem_acquire(&mem_pdu.free);
   1b4f8:	4805      	ldr	r0, [pc, #20]	; (1b510 <lll_adv_data_init+0x1c>)
   1b4fa:	f7f5 f90d 	bl	10718 <mem_acquire>
	if (!p) {
   1b4fe:	b120      	cbz	r0, 1b50a <lll_adv_data_init+0x16>
   1b500:	4603      	mov	r3, r0
	p->len = 0U;
   1b502:	2000      	movs	r0, #0
   1b504:	7058      	strb	r0, [r3, #1]
	pdu->pdu[0] = (void *)p;
   1b506:	6063      	str	r3, [r4, #4]
}
   1b508:	bd10      	pop	{r4, pc}
		return -ENOMEM;
   1b50a:	f06f 000b 	mvn.w	r0, #11
}
   1b50e:	bd10      	pop	{r4, pc}
   1b510:	2000e82c 	.word	0x2000e82c

0001b514 <lll_adv_data_reset>:
{
   1b514:	4603      	mov	r3, r0
	pdu->first = 0U;
   1b516:	2000      	movs	r0, #0
   1b518:	7018      	strb	r0, [r3, #0]
	pdu->last = 0U;
   1b51a:	7058      	strb	r0, [r3, #1]
	pdu->pdu[1] = NULL;
   1b51c:	6098      	str	r0, [r3, #8]
}
   1b51e:	4770      	bx	lr

0001b520 <lll_adv_pdu_alloc>:
{
   1b520:	b570      	push	{r4, r5, r6, lr}
	first = pdu->first;
   1b522:	7802      	ldrb	r2, [r0, #0]
	last = pdu->last;
   1b524:	7843      	ldrb	r3, [r0, #1]
	if (first == last) {
   1b526:	429a      	cmp	r2, r3
   1b528:	d004      	beq.n	1b534 <lll_adv_pdu_alloc+0x14>
		pdu->last = first;
   1b52a:	b2d4      	uxtb	r4, r2
   1b52c:	7044      	strb	r4, [r0, #1]
		first_latest = pdu->first;
   1b52e:	7802      	ldrb	r2, [r0, #0]
		if (first_latest != first) {
   1b530:	4294      	cmp	r4, r2
   1b532:	d003      	beq.n	1b53c <lll_adv_pdu_alloc+0x1c>
		last++;
   1b534:	3301      	adds	r3, #1
   1b536:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1b538:	2b02      	cmp	r3, #2
   1b53a:	d007      	beq.n	1b54c <lll_adv_pdu_alloc+0x2c>
	p = (void *)pdu->pdu[last];
   1b53c:	461c      	mov	r4, r3
   1b53e:	eb00 0484 	add.w	r4, r0, r4, lsl #2
	*idx = last;
   1b542:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1b544:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1b546:	b14d      	cbz	r5, 1b55c <lll_adv_pdu_alloc+0x3c>
}
   1b548:	4628      	mov	r0, r5
   1b54a:	bd70      	pop	{r4, r5, r6, pc}
{
   1b54c:	2400      	movs	r4, #0
			last = 0U;
   1b54e:	4623      	mov	r3, r4
	*idx = last;
   1b550:	eb00 0484 	add.w	r4, r0, r4, lsl #2
   1b554:	700b      	strb	r3, [r1, #0]
	p = (void *)pdu->pdu[last];
   1b556:	6865      	ldr	r5, [r4, #4]
	if (p) {
   1b558:	2d00      	cmp	r5, #0
   1b55a:	d1f5      	bne.n	1b548 <lll_adv_pdu_alloc+0x28>
	p = MFIFO_DEQUEUE_PEEK(pdu_free);
   1b55c:	4e34      	ldr	r6, [pc, #208]	; (1b630 <lll_adv_pdu_alloc+0x110>)
   1b55e:	78b2      	ldrb	r2, [r6, #2]
	if (first == last) {
   1b560:	78f1      	ldrb	r1, [r6, #3]
   1b562:	7833      	ldrb	r3, [r6, #0]
   1b564:	4291      	cmp	r1, r2
   1b566:	d003      	beq.n	1b570 <lll_adv_pdu_alloc+0x50>
	return *((void **)(fifo + first * size));
   1b568:	fb02 6303 	mla	r3, r2, r3, r6
   1b56c:	685d      	ldr	r5, [r3, #4]
	if (p) {
   1b56e:	b93d      	cbnz	r5, 1b580 <lll_adv_pdu_alloc+0x60>
	p = mem_acquire(&mem_pdu.free);
   1b570:	4830      	ldr	r0, [pc, #192]	; (1b634 <lll_adv_pdu_alloc+0x114>)
   1b572:	f7f5 f8d1 	bl	10718 <mem_acquire>
	if (p) {
   1b576:	4605      	mov	r5, r0
   1b578:	b1a8      	cbz	r0, 1b5a6 <lll_adv_pdu_alloc+0x86>
	pdu->pdu[last] = (void *)p;
   1b57a:	6065      	str	r5, [r4, #4]
}
   1b57c:	4628      	mov	r0, r5
   1b57e:	bd70      	pop	{r4, r5, r6, pc}
	return z_impl_k_sem_take(sem, timeout);
   1b580:	482d      	ldr	r0, [pc, #180]	; (1b638 <lll_adv_pdu_alloc+0x118>)
   1b582:	2200      	movs	r2, #0
   1b584:	2300      	movs	r3, #0
   1b586:	f004 ff93 	bl	204b0 <z_impl_k_sem_take>
		LL_ASSERT(!err);
   1b58a:	2800      	cmp	r0, #0
   1b58c:	d134      	bne.n	1b5f8 <lll_adv_pdu_alloc+0xd8>
	uint8_t _first = *first; /* Copy read-index */
   1b58e:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1b590:	78f2      	ldrb	r2, [r6, #3]
		MFIFO_DEQUEUE(pdu_free);
   1b592:	7871      	ldrb	r1, [r6, #1]
   1b594:	429a      	cmp	r2, r3
   1b596:	d0f0      	beq.n	1b57a <lll_adv_pdu_alloc+0x5a>
	_first += 1U;
   1b598:	3301      	adds	r3, #1
   1b59a:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b59c:	4299      	cmp	r1, r3
   1b59e:	bf08      	it	eq
   1b5a0:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b5a2:	70b3      	strb	r3, [r6, #2]
	return mem;
   1b5a4:	e7e9      	b.n	1b57a <lll_adv_pdu_alloc+0x5a>
   1b5a6:	4824      	ldr	r0, [pc, #144]	; (1b638 <lll_adv_pdu_alloc+0x118>)
   1b5a8:	f04f 32ff 	mov.w	r2, #4294967295
   1b5ac:	f04f 33ff 	mov.w	r3, #4294967295
   1b5b0:	f004 ff7e 	bl	204b0 <z_impl_k_sem_take>
	LL_ASSERT(!err);
   1b5b4:	2800      	cmp	r0, #0
   1b5b6:	d12c      	bne.n	1b612 <lll_adv_pdu_alloc+0xf2>
	uint8_t _first = *first; /* Copy read-index */
   1b5b8:	78b3      	ldrb	r3, [r6, #2]
	if (_first == last) {
   1b5ba:	78f1      	ldrb	r1, [r6, #3]
	p = MFIFO_DEQUEUE(pdu_free);
   1b5bc:	7832      	ldrb	r2, [r6, #0]
   1b5be:	7870      	ldrb	r0, [r6, #1]
   1b5c0:	4299      	cmp	r1, r3
   1b5c2:	d00a      	beq.n	1b5da <lll_adv_pdu_alloc+0xba>
	mem = *((void **)(fifo + _first * size));
   1b5c4:	fb03 6202 	mla	r2, r3, r2, r6
	_first += 1U;
   1b5c8:	3301      	adds	r3, #1
	mem = *((void **)(fifo + _first * size));
   1b5ca:	6855      	ldr	r5, [r2, #4]
	_first += 1U;
   1b5cc:	b2db      	uxtb	r3, r3
		_first = 0U;
   1b5ce:	4298      	cmp	r0, r3
   1b5d0:	bf08      	it	eq
   1b5d2:	2300      	moveq	r3, #0
	*first = _first; /* Write back read-index */
   1b5d4:	70b3      	strb	r3, [r6, #2]
	LL_ASSERT(p);
   1b5d6:	2d00      	cmp	r5, #0
   1b5d8:	d1cf      	bne.n	1b57a <lll_adv_pdu_alloc+0x5a>
   1b5da:	4a18      	ldr	r2, [pc, #96]	; (1b63c <lll_adv_pdu_alloc+0x11c>)
   1b5dc:	4918      	ldr	r1, [pc, #96]	; (1b640 <lll_adv_pdu_alloc+0x120>)
   1b5de:	4819      	ldr	r0, [pc, #100]	; (1b644 <lll_adv_pdu_alloc+0x124>)
   1b5e0:	f44f 7385 	mov.w	r3, #266	; 0x10a
   1b5e4:	f006 fa9e 	bl	21b24 <printk>
   1b5e8:	4040      	eors	r0, r0
   1b5ea:	f380 8811 	msr	BASEPRI, r0
   1b5ee:	f04f 0003 	mov.w	r0, #3
   1b5f2:	df02      	svc	2
   1b5f4:	2500      	movs	r5, #0
   1b5f6:	e7c0      	b.n	1b57a <lll_adv_pdu_alloc+0x5a>
		LL_ASSERT(!err);
   1b5f8:	4a10      	ldr	r2, [pc, #64]	; (1b63c <lll_adv_pdu_alloc+0x11c>)
   1b5fa:	4913      	ldr	r1, [pc, #76]	; (1b648 <lll_adv_pdu_alloc+0x128>)
   1b5fc:	4811      	ldr	r0, [pc, #68]	; (1b644 <lll_adv_pdu_alloc+0x124>)
   1b5fe:	23f7      	movs	r3, #247	; 0xf7
   1b600:	f006 fa90 	bl	21b24 <printk>
   1b604:	4040      	eors	r0, r0
   1b606:	f380 8811 	msr	BASEPRI, r0
   1b60a:	f04f 0003 	mov.w	r0, #3
   1b60e:	df02      	svc	2
   1b610:	e7bd      	b.n	1b58e <lll_adv_pdu_alloc+0x6e>
	LL_ASSERT(!err);
   1b612:	4a0a      	ldr	r2, [pc, #40]	; (1b63c <lll_adv_pdu_alloc+0x11c>)
   1b614:	490c      	ldr	r1, [pc, #48]	; (1b648 <lll_adv_pdu_alloc+0x128>)
   1b616:	480b      	ldr	r0, [pc, #44]	; (1b644 <lll_adv_pdu_alloc+0x124>)
   1b618:	f240 1307 	movw	r3, #263	; 0x107
   1b61c:	f006 fa82 	bl	21b24 <printk>
   1b620:	4040      	eors	r0, r0
   1b622:	f380 8811 	msr	BASEPRI, r0
   1b626:	f04f 0003 	mov.w	r0, #3
   1b62a:	df02      	svc	2
   1b62c:	e7c4      	b.n	1b5b8 <lll_adv_pdu_alloc+0x98>
   1b62e:	bf00      	nop
   1b630:	2000063c 	.word	0x2000063c
   1b634:	2000e82c 	.word	0x2000e82c
   1b638:	2000e8f8 	.word	0x2000e8f8
   1b63c:	00028edc 	.word	0x00028edc
   1b640:	00028f3c 	.word	0x00028f3c
   1b644:	00028404 	.word	0x00028404
   1b648:	00028684 	.word	0x00028684

0001b64c <lll_adv_pdu_latest_get>:
{
   1b64c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b64e:	4604      	mov	r4, r0
	first = pdu->first;
   1b650:	7803      	ldrb	r3, [r0, #0]
	if (first != pdu->last) {
   1b652:	7840      	ldrb	r0, [r0, #1]
   1b654:	4298      	cmp	r0, r3
   1b656:	d028      	beq.n	1b6aa <lll_adv_pdu_latest_get+0x5e>
		if (!MFIFO_ENQUEUE_IDX_GET(pdu_free, &free_idx)) {
   1b658:	4d1c      	ldr	r5, [pc, #112]	; (1b6cc <lll_adv_pdu_latest_get+0x80>)
   1b65a:	b2da      	uxtb	r2, r3
	last = last + 1;
   1b65c:	78eb      	ldrb	r3, [r5, #3]
	if (last == count) {
   1b65e:	786e      	ldrb	r6, [r5, #1]
   1b660:	78a8      	ldrb	r0, [r5, #2]
	last = last + 1;
   1b662:	3301      	adds	r3, #1
   1b664:	b2db      	uxtb	r3, r3
		last = 0U;
   1b666:	429e      	cmp	r6, r3
   1b668:	bf08      	it	eq
   1b66a:	2300      	moveq	r3, #0
	if (last == first) {
   1b66c:	4298      	cmp	r0, r3
   1b66e:	d01e      	beq.n	1b6ae <lll_adv_pdu_latest_get+0x62>
		first += 1U;
   1b670:	1c50      	adds	r0, r2, #1
   1b672:	b2c0      	uxtb	r0, r0
		if (first == DOUBLE_BUFFER_SIZE) {
   1b674:	2802      	cmp	r0, #2
   1b676:	bf04      	itt	eq
   1b678:	2600      	moveq	r6, #0
			first = 0U;
   1b67a:	4630      	moveq	r0, r6
		pdu->first = first;
   1b67c:	7020      	strb	r0, [r4, #0]
	return (void *)pdu->pdu[first];
   1b67e:	bf18      	it	ne
   1b680:	4606      	movne	r6, r0
		*is_modified = 1U;
   1b682:	2001      	movs	r0, #1
   1b684:	7008      	strb	r0, [r1, #0]
	void **p = (void **)(fifo + (*last) * size); /* buffer preceding idx */
   1b686:	78e8      	ldrb	r0, [r5, #3]
   1b688:	7829      	ldrb	r1, [r5, #0]
   1b68a:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	*p = mem; /* store the payload which for API 2 is only a void-ptr */
   1b68e:	fb00 5101 	mla	r1, r0, r1, r5
		pdu->pdu[pdu_idx] = NULL;
   1b692:	2700      	movs	r7, #0
		p = pdu->pdu[pdu_idx];
   1b694:	6850      	ldr	r0, [r2, #4]
		pdu->pdu[pdu_idx] = NULL;
   1b696:	6057      	str	r7, [r2, #4]
   1b698:	6048      	str	r0, [r1, #4]
	*last = idx; /* Commit: Update write index */
   1b69a:	70eb      	strb	r3, [r5, #3]
	z_impl_k_sem_give(sem);
   1b69c:	480c      	ldr	r0, [pc, #48]	; (1b6d0 <lll_adv_pdu_latest_get+0x84>)
   1b69e:	f004 fee1 	bl	20464 <z_impl_k_sem_give>
	return (void *)pdu->pdu[first];
   1b6a2:	eb04 0486 	add.w	r4, r4, r6, lsl #2
   1b6a6:	6860      	ldr	r0, [r4, #4]
}
   1b6a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (void *)pdu->pdu[first];
   1b6aa:	4606      	mov	r6, r0
   1b6ac:	e7f9      	b.n	1b6a2 <lll_adv_pdu_latest_get+0x56>
			LL_ASSERT(false);
   1b6ae:	4a09      	ldr	r2, [pc, #36]	; (1b6d4 <lll_adv_pdu_latest_get+0x88>)
   1b6b0:	4909      	ldr	r1, [pc, #36]	; (1b6d8 <lll_adv_pdu_latest_get+0x8c>)
   1b6b2:	480a      	ldr	r0, [pc, #40]	; (1b6dc <lll_adv_pdu_latest_get+0x90>)
   1b6b4:	f240 131d 	movw	r3, #285	; 0x11d
   1b6b8:	f006 fa34 	bl	21b24 <printk>
   1b6bc:	4040      	eors	r0, r0
   1b6be:	f380 8811 	msr	BASEPRI, r0
   1b6c2:	f04f 0003 	mov.w	r0, #3
   1b6c6:	df02      	svc	2
			return NULL;
   1b6c8:	2000      	movs	r0, #0
}
   1b6ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b6cc:	2000063c 	.word	0x2000063c
   1b6d0:	2000e8f8 	.word	0x2000e8f8
   1b6d4:	00028edc 	.word	0x00028edc
   1b6d8:	0002849c 	.word	0x0002849c
   1b6dc:	00028404 	.word	0x00028404

0001b6e0 <chan_prepare.isra.0>:
{
	struct pdu_adv *pdu;
	uint8_t chan;
	uint8_t upd;

	chan = find_lsb_set(lll->chan_map_curr);
   1b6e0:	7b03      	ldrb	r3, [r0, #12]
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b6e2:	b530      	push	{r4, r5, lr}
	chan = find_lsb_set(lll->chan_map_curr);
   1b6e4:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1b6e8:	2b00      	cmp	r3, #0
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b6ea:	4604      	mov	r4, r0
   1b6ec:	fa93 f0a3 	rbit	r0, r3
   1b6f0:	fab0 f080 	clz	r0, r0
   1b6f4:	bf08      	it	eq
   1b6f6:	f04f 30ff 	moveq.w	r0, #4294967295
	LL_ASSERT(chan);
   1b6fa:	1c45      	adds	r5, r0, #1
static struct pdu_adv *chan_prepare(struct lll_adv *lll)
   1b6fc:	b083      	sub	sp, #12
	LL_ASSERT(chan);
   1b6fe:	d03d      	beq.n	1b77c <chan_prepare.isra.0+0x9c>

	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b700:	7b22      	ldrb	r2, [r4, #12]
   1b702:	1e59      	subs	r1, r3, #1
   1b704:	400b      	ands	r3, r1
   1b706:	f363 1206 	bfi	r2, r3, #4, #3

	lll_chan_set(36 + chan);
   1b70a:	f105 0024 	add.w	r0, r5, #36	; 0x24
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b70e:	7322      	strb	r2, [r4, #12]
	lll_chan_set(36 + chan);
   1b710:	f7ff fcae 	bl	1b070 <lll_chan_set>

	/* FIXME: get latest only when primary PDU without Aux PDUs */
	upd = 0U;
   1b714:	2300      	movs	r3, #0
	return lll_adv_pdu_latest_get(&lll->adv_data, is_modified);
   1b716:	f10d 0107 	add.w	r1, sp, #7
   1b71a:	f104 0010 	add.w	r0, r4, #16
   1b71e:	f88d 3007 	strb.w	r3, [sp, #7]
   1b722:	f7ff ff93 	bl	1b64c <lll_adv_pdu_latest_get>
   1b726:	4605      	mov	r5, r0
	pdu = lll_adv_data_latest_get(lll, &upd);

	radio_pkt_tx_set(pdu);
   1b728:	f001 f97a 	bl	1ca20 <radio_pkt_tx_set>

	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   1b72c:	782b      	ldrb	r3, [r5, #0]
   1b72e:	f003 030f 	and.w	r3, r3, #15
   1b732:	2b02      	cmp	r3, #2
   1b734:	d01a      	beq.n	1b76c <chan_prepare.isra.0+0x8c>
	return lll_adv_pdu_latest_get(&lll->scan_rsp, is_modified);
   1b736:	f10d 0107 	add.w	r1, sp, #7
   1b73a:	f104 001c 	add.w	r0, r4, #28
   1b73e:	f7ff ff85 	bl	1b64c <lll_adv_pdu_latest_get>
		struct pdu_adv *scan_pdu;

		scan_pdu = lll_adv_scan_rsp_latest_get(lll, &upd);

#if defined(CONFIG_BT_CTLR_PRIVACY)
		if (upd) {
   1b742:	f89d 3007 	ldrb.w	r3, [sp, #7]
   1b746:	b95b      	cbnz	r3, 1b760 <chan_prepare.isra.0+0x80>
#else
		ARG_UNUSED(scan_pdu);
		ARG_UNUSED(upd);
#endif /* !CONFIG_BT_CTLR_PRIVACY */

		radio_isr_set(isr_tx, lll);
   1b748:	4621      	mov	r1, r4
   1b74a:	4815      	ldr	r0, [pc, #84]	; (1b7a0 <chan_prepare.isra.0+0xc0>)
   1b74c:	f001 f888 	bl	1c860 <radio_isr_set>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1b750:	2096      	movs	r0, #150	; 0x96
   1b752:	f001 faf1 	bl	1cd38 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   1b756:	2000      	movs	r0, #0
   1b758:	f001 f9d4 	bl	1cb04 <radio_switch_complete_and_rx>
		radio_isr_set(isr_done, lll);
		radio_switch_complete_and_disable();
	}

	return pdu;
}
   1b75c:	b003      	add	sp, #12
   1b75e:	bd30      	pop	{r4, r5, pc}
			memcpy(&scan_pdu->scan_rsp.addr[0],
   1b760:	2206      	movs	r2, #6
   1b762:	1ca9      	adds	r1, r5, #2
   1b764:	3002      	adds	r0, #2
   1b766:	f008 fe7f 	bl	24468 <memcpy>
   1b76a:	e7ed      	b.n	1b748 <chan_prepare.isra.0+0x68>
		radio_isr_set(isr_done, lll);
   1b76c:	480d      	ldr	r0, [pc, #52]	; (1b7a4 <chan_prepare.isra.0+0xc4>)
   1b76e:	4621      	mov	r1, r4
   1b770:	f001 f876 	bl	1c860 <radio_isr_set>
		radio_switch_complete_and_disable();
   1b774:	f001 fa6e 	bl	1cc54 <radio_switch_complete_and_disable>
}
   1b778:	b003      	add	sp, #12
   1b77a:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(chan);
   1b77c:	4a0a      	ldr	r2, [pc, #40]	; (1b7a8 <chan_prepare.isra.0+0xc8>)
   1b77e:	490b      	ldr	r1, [pc, #44]	; (1b7ac <chan_prepare.isra.0+0xcc>)
   1b780:	480b      	ldr	r0, [pc, #44]	; (1b7b0 <chan_prepare.isra.0+0xd0>)
   1b782:	f240 3387 	movw	r3, #903	; 0x387
   1b786:	f006 f9cd 	bl	21b24 <printk>
   1b78a:	4040      	eors	r0, r0
   1b78c:	f380 8811 	msr	BASEPRI, r0
   1b790:	f04f 0003 	mov.w	r0, #3
   1b794:	df02      	svc	2
	lll->chan_map_curr &= (lll->chan_map_curr - 1);
   1b796:	7b23      	ldrb	r3, [r4, #12]
   1b798:	f3c3 1302 	ubfx	r3, r3, #4, #3
   1b79c:	e7b0      	b.n	1b700 <chan_prepare.isra.0+0x20>
   1b79e:	bf00      	nop
   1b7a0:	0001b311 	.word	0x0001b311
   1b7a4:	0001b7b5 	.word	0x0001b7b5
   1b7a8:	00028edc 	.word	0x00028edc
   1b7ac:	00028b90 	.word	0x00028b90
   1b7b0:	00028404 	.word	0x00028404

0001b7b4 <isr_done>:
{
   1b7b4:	b510      	push	{r4, lr}
   1b7b6:	4604      	mov	r4, r0
	lll_isr_status_reset();
   1b7b8:	f7ff fcb0 	bl	1b11c <lll_isr_status_reset>
	if (!IS_ENABLED(CONFIG_BT_CTLR_LOW_LAT) && lll->is_hdcd &&
   1b7bc:	7b23      	ldrb	r3, [r4, #12]
   1b7be:	f003 0271 	and.w	r2, r3, #113	; 0x71
   1b7c2:	2a01      	cmp	r2, #1
   1b7c4:	d105      	bne.n	1b7d2 <isr_done+0x1e>
		lll->chan_map_curr = lll->chan_map;
   1b7c6:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b7ca:	f362 1306 	bfi	r3, r2, #4, #3
   1b7ce:	7323      	strb	r3, [r4, #12]
	if (lll->chan_map_curr) {
   1b7d0:	b2db      	uxtb	r3, r3
   1b7d2:	f013 0f70 	tst.w	r3, #112	; 0x70
   1b7d6:	d106      	bne.n	1b7e6 <isr_done+0x32>
	radio_filter_disable();
   1b7d8:	f001 fa7c 	bl	1ccd4 <radio_filter_disable>
	lll_isr_cleanup(param);
   1b7dc:	4620      	mov	r0, r4
}
   1b7de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_isr_cleanup(param);
   1b7e2:	f7ff bca9 	b.w	1b138 <lll_isr_cleanup>
		pdu = chan_prepare(lll);
   1b7e6:	4620      	mov	r0, r4
   1b7e8:	f7ff ff7a 	bl	1b6e0 <chan_prepare.isra.0>
		radio_tx_enable();
   1b7ec:	f001 f928 	bl	1ca40 <radio_tx_enable>
}
   1b7f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_tmr_end_capture();
   1b7f4:	f001 bb7a 	b.w	1ceec <radio_tmr_end_capture>

0001b7f8 <prepare_cb>:
{
   1b7f8:	b5f0      	push	{r4, r5, r6, r7, lr}
	lll = p->param;
   1b7fa:	68c4      	ldr	r4, [r0, #12]

static inline int lll_is_stop(void *lll)
{
	struct lll_hdr *hdr = lll;

	return !!hdr->is_stop;
   1b7fc:	7925      	ldrb	r5, [r4, #4]
	if (unlikely(lll_is_stop(lll))) {
   1b7fe:	f015 0501 	ands.w	r5, r5, #1
{
   1b802:	b083      	sub	sp, #12
	if (unlikely(lll_is_stop(lll))) {
   1b804:	d16e      	bne.n	1b8e4 <prepare_cb+0xec>
	radio_reset();
   1b806:	4606      	mov	r6, r0
   1b808:	f001 f86c 	bl	1c8e4 <radio_reset>
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1b80c:	4628      	mov	r0, r5
   1b80e:	f001 f89d 	bl	1c94c <radio_tx_power_set>
	radio_phy_set(0, 0);
   1b812:	4629      	mov	r1, r5
   1b814:	4628      	mov	r0, r5
   1b816:	f001 f889 	bl	1c92c <radio_phy_set>
	radio_pkt_configure(8, PDU_AC_LEG_PAYLOAD_SIZE_MAX, 0);
   1b81a:	462a      	mov	r2, r5
   1b81c:	2125      	movs	r1, #37	; 0x25
   1b81e:	2008      	movs	r0, #8
   1b820:	f001 f8ca 	bl	1c9b8 <radio_pkt_configure>
	aa = sys_cpu_to_le32(PDU_AC_ACCESS_ADDR);
   1b824:	4b3b      	ldr	r3, [pc, #236]	; (1b914 <prepare_cb+0x11c>)
   1b826:	9301      	str	r3, [sp, #4]
	radio_aa_set((uint8_t *)&aa);
   1b828:	a801      	add	r0, sp, #4
   1b82a:	f001 f8ad 	bl	1c988 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1b82e:	493a      	ldr	r1, [pc, #232]	; (1b918 <prepare_cb+0x120>)
   1b830:	f240 605b 	movw	r0, #1627	; 0x65b
   1b834:	f001 f948 	bl	1cac8 <radio_crc_configure>
	lll->chan_map_curr = lll->chan_map;
   1b838:	7b23      	ldrb	r3, [r4, #12]
   1b83a:	f3c3 0242 	ubfx	r2, r3, #1, #3
   1b83e:	f362 1306 	bfi	r3, r2, #4, #3
	pdu = chan_prepare(lll);
   1b842:	4620      	mov	r0, r4
	lll->chan_map_curr = lll->chan_map;
   1b844:	7323      	strb	r3, [r4, #12]
	pdu = chan_prepare(lll);
   1b846:	f7ff ff4b 	bl	1b6e0 <chan_prepare.isra.0>
	if (ull_filter_lll_rl_enabled()) {
   1b84a:	f7ff f8bd 	bl	1a9c8 <ull_filter_lll_rl_enabled>
   1b84e:	bb50      	cbnz	r0, 1b8a6 <prepare_cb+0xae>
	if (IS_ENABLED(CONFIG_BT_CTLR_FILTER) && lll->filter_policy) {
   1b850:	7b63      	ldrb	r3, [r4, #13]
   1b852:	079b      	lsls	r3, r3, #30
   1b854:	d134      	bne.n	1b8c0 <prepare_cb+0xc8>
	evt = HDR_LLL2EVT(lll);
   1b856:	6827      	ldr	r7, [r4, #0]
	ticks_at_event = p->ticks_at_expire;
   1b858:	6835      	ldr	r5, [r6, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1b85a:	4638      	mov	r0, r7
   1b85c:	f7ff fbec 	bl	1b038 <lll_evt_offset_get>
   1b860:	4405      	add	r5, r0
	start_us = radio_tmr_start(1, ticks_at_start, remainder);
   1b862:	6872      	ldr	r2, [r6, #4]
   1b864:	f105 0109 	add.w	r1, r5, #9
   1b868:	2001      	movs	r0, #1
   1b86a:	f001 fa71 	bl	1cd50 <radio_tmr_start>
	radio_tmr_end_capture();
   1b86e:	f001 fb3d 	bl	1ceec <radio_tmr_end_capture>
				   ull_adv_lll_handle_get(lll)),
   1b872:	4620      	mov	r0, r4
   1b874:	f7f9 fb6e 	bl	14f54 <ull_adv_lll_handle_get>
	if (lll_preempt_calc(evt, (TICKER_ID_ADV_BASE +
   1b878:	1c81      	adds	r1, r0, #2
   1b87a:	462a      	mov	r2, r5
   1b87c:	b2c9      	uxtb	r1, r1
   1b87e:	4638      	mov	r0, r7
   1b880:	f7ff fbe4 	bl	1b04c <lll_preempt_calc>
   1b884:	b930      	cbnz	r0, 1b894 <prepare_cb+0x9c>
		ret = lll_prepare_done(lll);
   1b886:	4620      	mov	r0, r4
   1b888:	f7ff fb7c 	bl	1af84 <lll_prepare_done>
		LL_ASSERT(!ret);
   1b88c:	b9d0      	cbnz	r0, 1b8c4 <prepare_cb+0xcc>
}
   1b88e:	2000      	movs	r0, #0
   1b890:	b003      	add	sp, #12
   1b892:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_isr_set(isr_abort, lll);
   1b894:	4821      	ldr	r0, [pc, #132]	; (1b91c <prepare_cb+0x124>)
   1b896:	4621      	mov	r1, r4
   1b898:	f000 ffe2 	bl	1c860 <radio_isr_set>
		radio_disable();
   1b89c:	f001 f8d6 	bl	1ca4c <radio_disable>
}
   1b8a0:	2000      	movs	r0, #0
   1b8a2:	b003      	add	sp, #12
   1b8a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
			ull_filter_lll_get(!!(lll->filter_policy));
   1b8a6:	7b60      	ldrb	r0, [r4, #13]
   1b8a8:	f010 0003 	ands.w	r0, r0, #3
   1b8ac:	bf18      	it	ne
   1b8ae:	2001      	movne	r0, #1
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b8b0:	f7ff f840 	bl	1a934 <ull_filter_lll_get>
		radio_filter_configure(wl->enable_bitmask,
   1b8b4:	7841      	ldrb	r1, [r0, #1]
   1b8b6:	1c82      	adds	r2, r0, #2
   1b8b8:	7800      	ldrb	r0, [r0, #0]
   1b8ba:	f001 f9eb 	bl	1cc94 <radio_filter_configure>
   1b8be:	e7ca      	b.n	1b856 <prepare_cb+0x5e>
		struct lll_filter *wl = ull_filter_lll_get(true);
   1b8c0:	2001      	movs	r0, #1
   1b8c2:	e7f5      	b.n	1b8b0 <prepare_cb+0xb8>
		LL_ASSERT(!ret);
   1b8c4:	4a16      	ldr	r2, [pc, #88]	; (1b920 <prepare_cb+0x128>)
   1b8c6:	4917      	ldr	r1, [pc, #92]	; (1b924 <prepare_cb+0x12c>)
   1b8c8:	4817      	ldr	r0, [pc, #92]	; (1b928 <prepare_cb+0x130>)
   1b8ca:	f240 2321 	movw	r3, #545	; 0x221
   1b8ce:	f006 f929 	bl	21b24 <printk>
   1b8d2:	4040      	eors	r0, r0
   1b8d4:	f380 8811 	msr	BASEPRI, r0
   1b8d8:	f04f 0003 	mov.w	r0, #3
   1b8dc:	df02      	svc	2
}
   1b8de:	2000      	movs	r0, #0
   1b8e0:	b003      	add	sp, #12
   1b8e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = lll_hfclock_off();
   1b8e4:	f7ff fce2 	bl	1b2ac <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1b8e8:	2800      	cmp	r0, #0
   1b8ea:	db05      	blt.n	1b8f8 <prepare_cb+0x100>
		lll_done(NULL);
   1b8ec:	2000      	movs	r0, #0
   1b8ee:	f7ff fb4b 	bl	1af88 <lll_done>
}
   1b8f2:	2000      	movs	r0, #0
   1b8f4:	b003      	add	sp, #12
   1b8f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		LL_ASSERT(err >= 0);
   1b8f8:	4a09      	ldr	r2, [pc, #36]	; (1b920 <prepare_cb+0x128>)
   1b8fa:	490c      	ldr	r1, [pc, #48]	; (1b92c <prepare_cb+0x134>)
   1b8fc:	480a      	ldr	r0, [pc, #40]	; (1b928 <prepare_cb+0x130>)
   1b8fe:	f44f 73e1 	mov.w	r3, #450	; 0x1c2
   1b902:	f006 f90f 	bl	21b24 <printk>
   1b906:	4040      	eors	r0, r0
   1b908:	f380 8811 	msr	BASEPRI, r0
   1b90c:	f04f 0003 	mov.w	r0, #3
   1b910:	df02      	svc	2
   1b912:	e7eb      	b.n	1b8ec <prepare_cb+0xf4>
   1b914:	8e89bed6 	.word	0x8e89bed6
   1b918:	00555555 	.word	0x00555555
   1b91c:	0001b2f9 	.word	0x0001b2f9
   1b920:	00028edc 	.word	0x00028edc
   1b924:	000286a0 	.word	0x000286a0
   1b928:	00028404 	.word	0x00028404
   1b92c:	00028ea0 	.word	0x00028ea0

0001b930 <resume_prepare_cb>:
	evt = HDR_LLL2EVT(p->param);
   1b930:	68c3      	ldr	r3, [r0, #12]
{
   1b932:	b570      	push	{r4, r5, r6, lr}
	evt = HDR_LLL2EVT(p->param);
   1b934:	681e      	ldr	r6, [r3, #0]
{
   1b936:	4604      	mov	r4, r0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b938:	f7f6 fa02 	bl	11d40 <ticker_ticks_now_get>
   1b93c:	4605      	mov	r5, r0
   1b93e:	4630      	mov	r0, r6
   1b940:	f7ff fb7a 	bl	1b038 <lll_evt_offset_get>
	p->remainder = 0;
   1b944:	2300      	movs	r3, #0
	p->ticks_at_expire = ticker_ticks_now_get() - lll_evt_offset_get(evt);
   1b946:	1a2d      	subs	r5, r5, r0
	p->remainder = 0;
   1b948:	e9c4 5300 	strd	r5, r3, [r4]
	p->lazy = 0;
   1b94c:	8123      	strh	r3, [r4, #8]
	return prepare_cb(p);
   1b94e:	4620      	mov	r0, r4
}
   1b950:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return prepare_cb(p);
   1b954:	f7ff bf50 	b.w	1b7f8 <prepare_cb>

0001b958 <lll_adv_prepare>:
{
   1b958:	b510      	push	{r4, lr}
   1b95a:	b082      	sub	sp, #8
   1b95c:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1b95e:	f7ff fc8d 	bl	1b27c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1b962:	2800      	cmp	r0, #0
   1b964:	db1a      	blt.n	1b99c <lll_adv_prepare+0x44>
	err = lll_prepare(is_abort_cb, abort_cb, prepare_cb, 0, param);
   1b966:	4a14      	ldr	r2, [pc, #80]	; (1b9b8 <lll_adv_prepare+0x60>)
   1b968:	4914      	ldr	r1, [pc, #80]	; (1b9bc <lll_adv_prepare+0x64>)
   1b96a:	4815      	ldr	r0, [pc, #84]	; (1b9c0 <lll_adv_prepare+0x68>)
   1b96c:	9400      	str	r4, [sp, #0]
   1b96e:	2300      	movs	r3, #0
   1b970:	f7ff fa7c 	bl	1ae6c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b974:	b108      	cbz	r0, 1b97a <lll_adv_prepare+0x22>
   1b976:	3044      	adds	r0, #68	; 0x44
   1b978:	d101      	bne.n	1b97e <lll_adv_prepare+0x26>
}
   1b97a:	b002      	add	sp, #8
   1b97c:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1b97e:	4a11      	ldr	r2, [pc, #68]	; (1b9c4 <lll_adv_prepare+0x6c>)
   1b980:	4911      	ldr	r1, [pc, #68]	; (1b9c8 <lll_adv_prepare+0x70>)
   1b982:	4812      	ldr	r0, [pc, #72]	; (1b9cc <lll_adv_prepare+0x74>)
   1b984:	f240 133d 	movw	r3, #317	; 0x13d
   1b988:	f006 f8cc 	bl	21b24 <printk>
   1b98c:	4040      	eors	r0, r0
   1b98e:	f380 8811 	msr	BASEPRI, r0
   1b992:	f04f 0003 	mov.w	r0, #3
   1b996:	df02      	svc	2
}
   1b998:	b002      	add	sp, #8
   1b99a:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1b99c:	4a09      	ldr	r2, [pc, #36]	; (1b9c4 <lll_adv_prepare+0x6c>)
   1b99e:	490c      	ldr	r1, [pc, #48]	; (1b9d0 <lll_adv_prepare+0x78>)
   1b9a0:	480a      	ldr	r0, [pc, #40]	; (1b9cc <lll_adv_prepare+0x74>)
   1b9a2:	f44f 739d 	mov.w	r3, #314	; 0x13a
   1b9a6:	f006 f8bd 	bl	21b24 <printk>
   1b9aa:	4040      	eors	r0, r0
   1b9ac:	f380 8811 	msr	BASEPRI, r0
   1b9b0:	f04f 0003 	mov.w	r0, #3
   1b9b4:	df02      	svc	2
   1b9b6:	e7d6      	b.n	1b966 <lll_adv_prepare+0xe>
   1b9b8:	0001b7f9 	.word	0x0001b7f9
   1b9bc:	0001b439 	.word	0x0001b439
   1b9c0:	0001b3c5 	.word	0x0001b3c5
   1b9c4:	00028edc 	.word	0x00028edc
   1b9c8:	00028f40 	.word	0x00028f40
   1b9cc:	00028404 	.word	0x00028404
   1b9d0:	00028ea0 	.word	0x00028ea0

0001b9d4 <lll_adv_scan_req_check>:
{
   1b9d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return ((((lll->filter_policy & 0x01) == 0) &&
   1b9d8:	f890 c00d 	ldrb.w	ip, [r0, #13]
{
   1b9dc:	f89d 8018 	ldrb.w	r8, [sp, #24]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b9e0:	f01c 0f01 	tst.w	ip, #1
{
   1b9e4:	460f      	mov	r7, r1
   1b9e6:	4616      	mov	r6, r2
   1b9e8:	461d      	mov	r5, r3
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1b9ea:	d009      	beq.n	1ba00 <lll_adv_scan_req_check+0x2c>
		(((lll->filter_policy & 0x01) != 0) &&
   1b9ec:	f1b8 0f00 	cmp.w	r8, #0
   1b9f0:	d016      	beq.n	1ba20 <lll_adv_scan_req_check+0x4c>
}

static bool isr_rx_sr_adva_check(uint8_t tx_addr, uint8_t *addr,
				 struct pdu_adv *sr)
{
	return (tx_addr == sr->rx_addr) &&
   1b9f2:	783b      	ldrb	r3, [r7, #0]
   1b9f4:	ebb6 1fd3 	cmp.w	r6, r3, lsr #7
   1b9f8:	d019      	beq.n	1ba2e <lll_adv_scan_req_check+0x5a>
{
   1b9fa:	2000      	movs	r0, #0
}
   1b9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba00:	4604      	mov	r4, r0
		 ull_filter_lll_rl_addr_allowed(sr->tx_addr,
   1ba02:	f811 0b02 	ldrb.w	r0, [r1], #2
   1ba06:	9a07      	ldr	r2, [sp, #28]
   1ba08:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ba0c:	f7fe ff9e 	bl	1a94c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x01) == 0) &&
   1ba10:	2800      	cmp	r0, #0
   1ba12:	d1ee      	bne.n	1b9f2 <lll_adv_scan_req_check+0x1e>
		(((lll->filter_policy & 0x01) != 0) &&
   1ba14:	7b63      	ldrb	r3, [r4, #13]
						rl_idx)) ||
   1ba16:	07db      	lsls	r3, r3, #31
   1ba18:	d5ef      	bpl.n	1b9fa <lll_adv_scan_req_check+0x26>
		(((lll->filter_policy & 0x01) != 0) &&
   1ba1a:	f1b8 0f00 	cmp.w	r8, #0
   1ba1e:	d1e8      	bne.n	1b9f2 <lll_adv_scan_req_check+0x1e>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ba20:	9b07      	ldr	r3, [sp, #28]
   1ba22:	7818      	ldrb	r0, [r3, #0]
   1ba24:	f7fe ff56 	bl	1a8d4 <ull_filter_lll_irk_whitelisted>
   1ba28:	2800      	cmp	r0, #0
   1ba2a:	d1e2      	bne.n	1b9f2 <lll_adv_scan_req_check+0x1e>
   1ba2c:	e7e5      	b.n	1b9fa <lll_adv_scan_req_check+0x26>
		!memcmp(addr, sr->scan_req.adv_addr, BDADDR_SIZE);
   1ba2e:	2206      	movs	r2, #6
   1ba30:	f107 0108 	add.w	r1, r7, #8
   1ba34:	4628      	mov	r0, r5
   1ba36:	f008 fd06 	bl	24446 <memcmp>
	return (tx_addr == sr->rx_addr) &&
   1ba3a:	fab0 f080 	clz	r0, r0
   1ba3e:	0940      	lsrs	r0, r0, #5
}
   1ba40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001ba44 <lll_adv_connect_ind_check>:
{
   1ba44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1ba48:	461f      	mov	r7, r3
	if (tgt_addr) {
   1ba4a:	9b09      	ldr	r3, [sp, #36]	; 0x24
{
   1ba4c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   1ba50:	f89d 6028 	ldrb.w	r6, [sp, #40]	; 0x28
   1ba54:	4605      	mov	r5, r0
   1ba56:	460c      	mov	r4, r1
   1ba58:	4690      	mov	r8, r2
	if (tgt_addr) {
   1ba5a:	b9fb      	cbnz	r3, 1ba9c <lll_adv_connect_ind_check+0x58>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1ba5c:	7b43      	ldrb	r3, [r0, #13]
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ba5e:	079a      	lsls	r2, r3, #30
   1ba60:	d507      	bpl.n	1ba72 <lll_adv_connect_ind_check+0x2e>
		(((lll->filter_policy & 0x02) != 0) &&
   1ba62:	b1a6      	cbz	r6, 1ba8e <lll_adv_connect_ind_check+0x4a>
}

static inline bool isr_rx_ci_adva_check(uint8_t tx_addr, uint8_t *addr,
					struct pdu_adv *ci)
{
	return (tx_addr == ci->rx_addr) &&
   1ba64:	7823      	ldrb	r3, [r4, #0]
   1ba66:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1ba6a:	d03a      	beq.n	1bae2 <lll_adv_connect_ind_check+0x9e>
   1ba6c:	2000      	movs	r0, #0
}
   1ba6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		 ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1ba72:	f811 0b02 	ldrb.w	r0, [r1], #2
   1ba76:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1ba78:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ba7c:	f7fe ff66 	bl	1a94c <ull_filter_lll_rl_addr_allowed>
	return ((((lll->filter_policy & 0x02) == 0) &&
   1ba80:	2800      	cmp	r0, #0
   1ba82:	d1ef      	bne.n	1ba64 <lll_adv_connect_ind_check+0x20>
		(((lll->filter_policy & 0x02) != 0) &&
   1ba84:	7b6b      	ldrb	r3, [r5, #13]
						rl_idx)) ||
   1ba86:	079b      	lsls	r3, r3, #30
   1ba88:	d5f0      	bpl.n	1ba6c <lll_adv_connect_ind_check+0x28>
		(((lll->filter_policy & 0x02) != 0) &&
   1ba8a:	2e00      	cmp	r6, #0
   1ba8c:	d1ea      	bne.n	1ba64 <lll_adv_connect_ind_check+0x20>
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1ba8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1ba90:	7818      	ldrb	r0, [r3, #0]
   1ba92:	f7fe ff1f 	bl	1a8d4 <ull_filter_lll_irk_whitelisted>
   1ba96:	2800      	cmp	r0, #0
   1ba98:	d1e4      	bne.n	1ba64 <lll_adv_connect_ind_check+0x20>
   1ba9a:	e7e7      	b.n	1ba6c <lll_adv_connect_ind_check+0x28>
						      ci->connect_ind.init_addr,
   1ba9c:	468a      	mov	sl, r1
		return ull_filter_lll_rl_addr_allowed(ci->tx_addr,
   1ba9e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1baa0:	f81a 0b02 	ldrb.w	r0, [sl], #2
   1baa4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1baa8:	4651      	mov	r1, sl
   1baaa:	f7fe ff4f 	bl	1a94c <ull_filter_lll_rl_addr_allowed>
		       isr_rx_ci_adva_check(tx_addr, addr, ci) &&
   1baae:	2800      	cmp	r0, #0
   1bab0:	d0dc      	beq.n	1ba6c <lll_adv_connect_ind_check+0x28>
	return (tx_addr == ci->rx_addr) &&
   1bab2:	7823      	ldrb	r3, [r4, #0]
   1bab4:	ebb8 1fd3 	cmp.w	r8, r3, lsr #7
   1bab8:	d1d8      	bne.n	1ba6c <lll_adv_connect_ind_check+0x28>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1baba:	4638      	mov	r0, r7
   1babc:	2206      	movs	r2, #6
   1babe:	f104 0108 	add.w	r1, r4, #8
   1bac2:	f008 fcc0 	bl	24446 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1bac6:	2800      	cmp	r0, #0
   1bac8:	d1d0      	bne.n	1ba6c <lll_adv_connect_ind_check+0x28>
		       isr_rx_ci_tgta_check(lll, rx_addr, tgt_addr, ci,
   1baca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1bacc:	7818      	ldrb	r0, [r3, #0]
	if (rl_idx != FILTER_IDX_NONE && lll->rl_idx != FILTER_IDX_NONE) {
   1bace:	28ff      	cmp	r0, #255	; 0xff
   1bad0:	d011      	beq.n	1baf6 <lll_adv_connect_ind_check+0xb2>
   1bad2:	7bab      	ldrb	r3, [r5, #14]
   1bad4:	2bff      	cmp	r3, #255	; 0xff
   1bad6:	d00e      	beq.n	1baf6 <lll_adv_connect_ind_check+0xb2>
		return rl_idx == lll->rl_idx;
   1bad8:	1ac0      	subs	r0, r0, r3
   1bada:	fab0 f080 	clz	r0, r0
   1bade:	0940      	lsrs	r0, r0, #5
   1bae0:	e7c5      	b.n	1ba6e <lll_adv_connect_ind_check+0x2a>
		!memcmp(addr, ci->connect_ind.adv_addr, BDADDR_SIZE);
   1bae2:	2206      	movs	r2, #6
   1bae4:	f104 0108 	add.w	r1, r4, #8
   1bae8:	4638      	mov	r0, r7
   1baea:	f008 fcac 	bl	24446 <memcmp>
	return (tx_addr == ci->rx_addr) &&
   1baee:	fab0 f080 	clz	r0, r0
   1baf2:	0940      	lsrs	r0, r0, #5
		 (devmatch_ok || ull_filter_lll_irk_whitelisted(*rl_idx)))) &&
   1baf4:	e7bb      	b.n	1ba6e <lll_adv_connect_ind_check+0x2a>
	return (rx_addr == ci->tx_addr) &&
   1baf6:	7823      	ldrb	r3, [r4, #0]
   1baf8:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1bafc:	454b      	cmp	r3, r9
   1bafe:	d1b5      	bne.n	1ba6c <lll_adv_connect_ind_check+0x28>
	       !memcmp(tgt_addr, ci->connect_ind.init_addr, BDADDR_SIZE);
   1bb00:	9809      	ldr	r0, [sp, #36]	; 0x24
   1bb02:	2206      	movs	r2, #6
   1bb04:	4651      	mov	r1, sl
   1bb06:	f008 fc9e 	bl	24446 <memcmp>
	return (rx_addr == ci->tx_addr) &&
   1bb0a:	fab0 f080 	clz	r0, r0
   1bb0e:	0940      	lsrs	r0, r0, #5
   1bb10:	e7ad      	b.n	1ba6e <lll_adv_connect_ind_check+0x2a>
   1bb12:	bf00      	nop

0001bb14 <isr_rx>:
{
   1bb14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1bb18:	b089      	sub	sp, #36	; 0x24
   1bb1a:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1bb1c:	f000 ffc0 	bl	1caa0 <radio_is_done>
	if (trx_done) {
   1bb20:	b2c0      	uxtb	r0, r0
   1bb22:	b950      	cbnz	r0, 1bb3a <isr_rx+0x26>
	lll_isr_status_reset();
   1bb24:	f7ff fafa 	bl	1b11c <lll_isr_status_reset>
	radio_isr_set(isr_done, param);
   1bb28:	4879      	ldr	r0, [pc, #484]	; (1bd10 <isr_rx+0x1fc>)
   1bb2a:	4621      	mov	r1, r4
   1bb2c:	f000 fe98 	bl	1c860 <radio_isr_set>
}
   1bb30:	b009      	add	sp, #36	; 0x24
   1bb32:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	radio_disable();
   1bb36:	f000 bf89 	b.w	1ca4c <radio_disable>
		crc_ok = radio_crc_is_valid();
   1bb3a:	f000 ffd1 	bl	1cae0 <radio_crc_is_valid>
   1bb3e:	4605      	mov	r5, r0
		devmatch_ok = radio_filter_has_match();
   1bb40:	f001 f8da 	bl	1ccf8 <radio_filter_has_match>
   1bb44:	4607      	mov	r7, r0
		devmatch_id = radio_filter_match_get();
   1bb46:	f001 f8e1 	bl	1cd0c <radio_filter_match_get>
		irkmatch_ok = radio_ar_has_match();
   1bb4a:	f001 fac5 	bl	1d0d8 <radio_ar_has_match>
   1bb4e:	4606      	mov	r6, r0
		irkmatch_id = radio_ar_match_get();
   1bb50:	f001 faa6 	bl	1d0a0 <radio_ar_match_get>
	if (crc_ok) {
   1bb54:	b2ed      	uxtb	r5, r5
		irkmatch_id = radio_ar_match_get();
   1bb56:	4680      	mov	r8, r0
		rssi_ready = radio_rssi_is_ready();
   1bb58:	f001 f892 	bl	1cc80 <radio_rssi_is_ready>
	lll_isr_status_reset();
   1bb5c:	f7ff fade 	bl	1b11c <lll_isr_status_reset>
	if (crc_ok) {
   1bb60:	2d00      	cmp	r5, #0
   1bb62:	d0e1      	beq.n	1bb28 <isr_rx+0x14>
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1bb64:	f016 06ff 	ands.w	r6, r6, #255	; 0xff
   1bb68:	d175      	bne.n	1bc56 <isr_rx+0x142>
   1bb6a:	20ff      	movs	r0, #255	; 0xff
   1bb6c:	f88d 001f 	strb.w	r0, [sp, #31]
	pdu_rx = (void *)radio_pkt_scratch_get();
   1bb70:	f000 ffc4 	bl	1cafc <radio_pkt_scratch_get>
	return (void *)lll->adv_data.pdu[lll->adv_data.first];
   1bb74:	7c23      	ldrb	r3, [r4, #16]
   1bb76:	eb04 0383 	add.w	r3, r4, r3, lsl #2
   1bb7a:	4680      	mov	r8, r0
   1bb7c:	6959      	ldr	r1, [r3, #20]
	addr = pdu_adv->adv_ind.addr;
   1bb7e:	460b      	mov	r3, r1
		devmatch_ok = radio_filter_has_match();
   1bb80:	b2ff      	uxtb	r7, r7
	tx_addr = pdu_adv->tx_addr;
   1bb82:	f813 5b02 	ldrb.w	r5, [r3], #2
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1bb86:	f005 000f 	and.w	r0, r5, #15
   1bb8a:	2801      	cmp	r0, #1
		tgt_addr = pdu_adv->direct_ind.tgt_addr;
   1bb8c:	bf08      	it	eq
   1bb8e:	f101 0908 	addeq.w	r9, r1, #8
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bb92:	f898 1000 	ldrb.w	r1, [r8]
   1bb96:	f001 010f 	and.w	r1, r1, #15
		tgt_addr = NULL;
   1bb9a:	bf18      	it	ne
   1bb9c:	f04f 0900 	movne.w	r9, #0
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bba0:	2903      	cmp	r1, #3
	tx_addr = pdu_adv->tx_addr;
   1bba2:	f3c5 1280 	ubfx	r2, r5, #6, #1
	rx_addr = pdu_adv->rx_addr;
   1bba6:	ea4f 15d5 	mov.w	r5, r5, lsr #7
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bbaa:	d05b      	beq.n	1bc64 <isr_rx+0x150>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1bbac:	2905      	cmp	r1, #5
   1bbae:	d1bb      	bne.n	1bb28 <isr_rx+0x14>
   1bbb0:	f898 1001 	ldrb.w	r1, [r8, #1]
   1bbb4:	2922      	cmp	r1, #34	; 0x22
   1bbb6:	d1b7      	bne.n	1bb28 <isr_rx+0x14>
		   lll_adv_connect_ind_check(lll, pdu_rx, tx_addr, addr,
   1bbb8:	f10d 011f 	add.w	r1, sp, #31
   1bbbc:	9103      	str	r1, [sp, #12]
   1bbbe:	e9cd 9701 	strd	r9, r7, [sp, #4]
   1bbc2:	9500      	str	r5, [sp, #0]
   1bbc4:	4641      	mov	r1, r8
   1bbc6:	4620      	mov	r0, r4
   1bbc8:	f7ff ff3c 	bl	1ba44 <lll_adv_connect_ind_check>
		   (pdu_rx->len == sizeof(struct pdu_adv_connect_ind)) &&
   1bbcc:	2800      	cmp	r0, #0
   1bbce:	d0ab      	beq.n	1bb28 <isr_rx+0x14>
					     devmatch_ok, &rl_idx) &&
   1bbd0:	68a3      	ldr	r3, [r4, #8]
   1bbd2:	2b00      	cmp	r3, #0
   1bbd4:	d0a8      	beq.n	1bb28 <isr_rx+0x14>
			rx = ull_pdu_rx_alloc_peek(4);
   1bbd6:	2004      	movs	r0, #4
   1bbd8:	f7f8 fd24 	bl	14624 <ull_pdu_rx_alloc_peek>
		if (!rx) {
   1bbdc:	2800      	cmp	r0, #0
   1bbde:	d0a3      	beq.n	1bb28 <isr_rx+0x14>
		radio_isr_set(isr_abort, lll);
   1bbe0:	484c      	ldr	r0, [pc, #304]	; (1bd14 <isr_rx+0x200>)
   1bbe2:	4621      	mov	r1, r4
   1bbe4:	f000 fe3c 	bl	1c860 <radio_isr_set>
		radio_disable();
   1bbe8:	f000 ff30 	bl	1ca4c <radio_disable>
		LL_ASSERT(!radio_is_ready());
   1bbec:	f000 ff4e 	bl	1ca8c <radio_is_ready>
   1bbf0:	2800      	cmp	r0, #0
   1bbf2:	d160      	bne.n	1bcb6 <isr_rx+0x1a2>
}

static inline int lll_stop(void *lll)
{
	struct lll_hdr *hdr = lll;
	int ret = !!hdr->is_stop;
   1bbf4:	7923      	ldrb	r3, [r4, #4]

	hdr->is_stop = 1U;
   1bbf6:	f043 0201 	orr.w	r2, r3, #1
		LL_ASSERT(!ret);
   1bbfa:	07db      	lsls	r3, r3, #31
   1bbfc:	7122      	strb	r2, [r4, #4]
   1bbfe:	d44c      	bmi.n	1bc9a <isr_rx+0x186>
		rx = ull_pdu_rx_alloc();
   1bc00:	f7f8 fd2e 	bl	14660 <ull_pdu_rx_alloc>
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1bc04:	2313      	movs	r3, #19
		rx = ull_pdu_rx_alloc();
   1bc06:	4605      	mov	r5, r0
		rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   1bc08:	7103      	strb	r3, [r0, #4]
		rx->hdr.handle = 0xffff;
   1bc0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1bc0e:	80c3      	strh	r3, [r0, #6]
		memcpy(rx->pdu, pdu_rx, (offsetof(struct pdu_adv, connect_ind) +
   1bc10:	4641      	mov	r1, r8
   1bc12:	2224      	movs	r2, #36	; 0x24
   1bc14:	301c      	adds	r0, #28
   1bc16:	f008 fc27 	bl	24468 <memcpy>
		ftr->param = lll;
   1bc1a:	60ac      	str	r4, [r5, #8]
		ftr->ticks_anchor = radio_tmr_start_get();
   1bc1c:	f001 f91a 	bl	1ce54 <radio_tmr_start_get>
   1bc20:	6128      	str	r0, [r5, #16]
		ftr->radio_end_us = radio_tmr_end_get() -
   1bc22:	f001 f96b 	bl	1cefc <radio_tmr_end_get>
				    radio_tx_chain_delay_get(0, 0);
   1bc26:	2100      	movs	r1, #0
		ftr->radio_end_us = radio_tmr_end_get() -
   1bc28:	4604      	mov	r4, r0
				    radio_tx_chain_delay_get(0, 0);
   1bc2a:	4608      	mov	r0, r1
   1bc2c:	f000 fefe 	bl	1ca2c <radio_tx_chain_delay_get>
		ftr->radio_end_us = radio_tmr_end_get() -
   1bc30:	1a24      	subs	r4, r4, r0
   1bc32:	616c      	str	r4, [r5, #20]
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1bc34:	b1a6      	cbz	r6, 1bc60 <isr_rx+0x14c>
   1bc36:	f89d 301f 	ldrb.w	r3, [sp, #31]
   1bc3a:	76ab      	strb	r3, [r5, #26]
			ftr->extra = ull_pdu_rx_alloc();
   1bc3c:	f7f8 fd10 	bl	14660 <ull_pdu_rx_alloc>
   1bc40:	4603      	mov	r3, r0
		ull_rx_put(rx->hdr.link, rx);
   1bc42:	4629      	mov	r1, r5
   1bc44:	6828      	ldr	r0, [r5, #0]
			ftr->extra = ull_pdu_rx_alloc();
   1bc46:	60eb      	str	r3, [r5, #12]
		ull_rx_put(rx->hdr.link, rx);
   1bc48:	f7f8 fd20 	bl	1468c <ull_rx_put>
		ull_rx_sched();
   1bc4c:	f7f8 fd2e 	bl	146ac <ull_rx_sched>
}
   1bc50:	b009      	add	sp, #36	; 0x24
   1bc52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint8_t rl_idx = irkmatch_ok ? ull_filter_lll_rl_irk_idx(irkmatch_id) :
   1bc56:	fa5f f088 	uxtb.w	r0, r8
   1bc5a:	f7fe fde9 	bl	1a830 <ull_filter_lll_rl_irk_idx>
   1bc5e:	e785      	b.n	1bb6c <isr_rx+0x58>
		ftr->rl_idx = irkmatch_ok ? rl_idx : FILTER_IDX_NONE;
   1bc60:	23ff      	movs	r3, #255	; 0xff
   1bc62:	e7ea      	b.n	1bc3a <isr_rx+0x126>
	if ((pdu_rx->type == PDU_ADV_TYPE_SCAN_REQ) &&
   1bc64:	f898 1001 	ldrb.w	r1, [r8, #1]
   1bc68:	290c      	cmp	r1, #12
   1bc6a:	f47f af5d 	bne.w	1bb28 <isr_rx+0x14>
	    (pdu_rx->len == sizeof(struct pdu_adv_scan_req)) &&
   1bc6e:	f1b9 0f00 	cmp.w	r9, #0
   1bc72:	f47f af59 	bne.w	1bb28 <isr_rx+0x14>
	    lll_adv_scan_req_check(lll, pdu_rx, tx_addr, addr, devmatch_ok,
   1bc76:	f10d 011f 	add.w	r1, sp, #31
   1bc7a:	9101      	str	r1, [sp, #4]
   1bc7c:	9700      	str	r7, [sp, #0]
   1bc7e:	4641      	mov	r1, r8
   1bc80:	4620      	mov	r0, r4
   1bc82:	e9cd 2304 	strd	r2, r3, [sp, #16]
   1bc86:	f7ff fea5 	bl	1b9d4 <lll_adv_scan_req_check>
	    (tgt_addr == NULL) &&
   1bc8a:	bb10      	cbnz	r0, 1bcd2 <isr_rx+0x1be>
	} else if ((pdu_rx->type == PDU_ADV_TYPE_CONNECT_IND) &&
   1bc8c:	f898 1000 	ldrb.w	r1, [r8]
   1bc90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   1bc94:	f001 010f 	and.w	r1, r1, #15
   1bc98:	e788      	b.n	1bbac <isr_rx+0x98>
		LL_ASSERT(!ret);
   1bc9a:	4a1f      	ldr	r2, [pc, #124]	; (1bd18 <isr_rx+0x204>)
   1bc9c:	491f      	ldr	r1, [pc, #124]	; (1bd1c <isr_rx+0x208>)
   1bc9e:	4820      	ldr	r0, [pc, #128]	; (1bd20 <isr_rx+0x20c>)
   1bca0:	f240 4329 	movw	r3, #1065	; 0x429
   1bca4:	f005 ff3e 	bl	21b24 <printk>
   1bca8:	4040      	eors	r0, r0
   1bcaa:	f380 8811 	msr	BASEPRI, r0
   1bcae:	f04f 0003 	mov.w	r0, #3
   1bcb2:	df02      	svc	2
   1bcb4:	e7a4      	b.n	1bc00 <isr_rx+0xec>
		LL_ASSERT(!radio_is_ready());
   1bcb6:	4a18      	ldr	r2, [pc, #96]	; (1bd18 <isr_rx+0x204>)
   1bcb8:	491a      	ldr	r1, [pc, #104]	; (1bd24 <isr_rx+0x210>)
   1bcba:	4819      	ldr	r0, [pc, #100]	; (1bd20 <isr_rx+0x20c>)
   1bcbc:	f240 431b 	movw	r3, #1051	; 0x41b
   1bcc0:	f005 ff30 	bl	21b24 <printk>
   1bcc4:	4040      	eors	r0, r0
   1bcc6:	f380 8811 	msr	BASEPRI, r0
   1bcca:	f04f 0003 	mov.w	r0, #3
   1bcce:	df02      	svc	2
   1bcd0:	e790      	b.n	1bbf4 <isr_rx+0xe0>
		radio_isr_set(isr_done, lll);
   1bcd2:	4621      	mov	r1, r4
   1bcd4:	480e      	ldr	r0, [pc, #56]	; (1bd10 <isr_rx+0x1fc>)
   1bcd6:	f000 fdc3 	bl	1c860 <radio_isr_set>
		radio_switch_complete_and_disable();
   1bcda:	f000 ffbb 	bl	1cc54 <radio_switch_complete_and_disable>
}

static inline struct pdu_adv *lll_adv_scan_rsp_curr_get(struct lll_adv *lll)
{
	return (void *)lll->scan_rsp.pdu[lll->scan_rsp.first];
   1bcde:	7f23      	ldrb	r3, [r4, #28]
   1bce0:	eb04 0483 	add.w	r4, r4, r3, lsl #2
		radio_pkt_tx_set(lll_adv_scan_rsp_curr_get(lll));
   1bce4:	6a20      	ldr	r0, [r4, #32]
   1bce6:	f000 fe9b 	bl	1ca20 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   1bcea:	f000 fecf 	bl	1ca8c <radio_is_ready>
   1bcee:	2800      	cmp	r0, #0
   1bcf0:	d0ae      	beq.n	1bc50 <isr_rx+0x13c>
   1bcf2:	4a09      	ldr	r2, [pc, #36]	; (1bd18 <isr_rx+0x204>)
   1bcf4:	490b      	ldr	r1, [pc, #44]	; (1bd24 <isr_rx+0x210>)
   1bcf6:	480a      	ldr	r0, [pc, #40]	; (1bd20 <isr_rx+0x20c>)
   1bcf8:	f240 33dd 	movw	r3, #989	; 0x3dd
   1bcfc:	f005 ff12 	bl	21b24 <printk>
   1bd00:	4040      	eors	r0, r0
   1bd02:	f380 8811 	msr	BASEPRI, r0
   1bd06:	f04f 0003 	mov.w	r0, #3
   1bd0a:	df02      	svc	2
		if (!err) {
   1bd0c:	e7a0      	b.n	1bc50 <isr_rx+0x13c>
   1bd0e:	bf00      	nop
   1bd10:	0001b7b5 	.word	0x0001b7b5
   1bd14:	0001b2f9 	.word	0x0001b2f9
   1bd18:	00028edc 	.word	0x00028edc
   1bd1c:	000286a0 	.word	0x000286a0
   1bd20:	00028404 	.word	0x00028404
   1bd24:	00028f28 	.word	0x00028f28

0001bd28 <isr_done>:
{
	return 0;
}

static void isr_done(void *param)
{
   1bd28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bd2a:	4605      	mov	r5, r0
	struct event_done_extra *e;

	lll_isr_status_reset();
   1bd2c:	f7ff f9f6 	bl	1b11c <lll_isr_status_reset>

	e = ull_event_done_extra_get();
   1bd30:	f7f8 fd28 	bl	14784 <ull_event_done_extra_get>
	LL_ASSERT(e);
   1bd34:	4604      	mov	r4, r0
   1bd36:	2800      	cmp	r0, #0
   1bd38:	d033      	beq.n	1bda2 <isr_done+0x7a>

	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
	e->trx_cnt = trx_cnt;
   1bd3a:	4b21      	ldr	r3, [pc, #132]	; (1bdc0 <isr_done+0x98>)
	e->crc_valid = crc_valid;
   1bd3c:	4921      	ldr	r1, [pc, #132]	; (1bdc4 <isr_done+0x9c>)

#if defined(CONFIG_BT_CTLR_LE_ENC)
	e->mic_state = mic_state;
   1bd3e:	4a22      	ldr	r2, [pc, #136]	; (1bdc8 <isr_done+0xa0>)
	e->trx_cnt = trx_cnt;
   1bd40:	881b      	ldrh	r3, [r3, #0]
	e->crc_valid = crc_valid;
   1bd42:	7809      	ldrb	r1, [r1, #0]
	e->mic_state = mic_state;
   1bd44:	7812      	ldrb	r2, [r2, #0]
	e->crc_valid = crc_valid;
   1bd46:	71a1      	strb	r1, [r4, #6]
	e->type = EVENT_DONE_EXTRA_TYPE_CONN;
   1bd48:	2001      	movs	r0, #1
   1bd4a:	7020      	strb	r0, [r4, #0]
	e->trx_cnt = trx_cnt;
   1bd4c:	80a3      	strh	r3, [r4, #4]
	e->mic_state = mic_state;
   1bd4e:	71e2      	strb	r2, [r4, #7]
#endif /* CONFIG_BT_CTLR_LE_ENC */

#if defined(CONFIG_BT_PERIPHERAL)
	if (trx_cnt) {
   1bd50:	b11b      	cbz	r3, 1bd5a <isr_done+0x32>
		struct lll_conn *lll = param;

		if (lll->role) {
   1bd52:	f995 3021 	ldrsb.w	r3, [r5, #33]	; 0x21
   1bd56:	2b00      	cmp	r3, #0
   1bd58:	db04      	blt.n	1bd64 <isr_done+0x3c>
			lll->slave.window_size_event_us = 0;
		}
	}
#endif /* CONFIG_BT_PERIPHERAL */

	lll_isr_cleanup(param);
   1bd5a:	4628      	mov	r0, r5
}
   1bd5c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bd60:	f7ff b9ea 	b.w	1b138 <lll_isr_cleanup>
				addr_us_get(lll->phy_rx);
   1bd64:	f895 3049 	ldrb.w	r3, [r5, #73]	; 0x49
   1bd68:	f003 0307 	and.w	r3, r3, #7
#define RANGE_DISTANCE 1000 /* meters */
#define RANGE_DELAY_US (2 * RANGE_DISTANCE * 4 / 1000)

static inline uint32_t addr_us_get(uint8_t phy)
{
	switch (phy) {
   1bd6c:	2b02      	cmp	r3, #2
   1bd6e:	d016      	beq.n	1bd9e <isr_done+0x76>
	case BIT(0):
		return 40;
	case BIT(1):
		return 24;
	case BIT(2):
		return 376;
   1bd70:	2b04      	cmp	r3, #4
   1bd72:	bf14      	ite	ne
   1bd74:	2728      	movne	r7, #40	; 0x28
   1bd76:	f44f 77bc 	moveq.w	r7, #376	; 0x178
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bd7a:	f001 f8ab 	bl	1ced4 <radio_tmr_aa_restore>
   1bd7e:	4606      	mov	r6, r0
   1bd80:	f001 f8ae 	bl	1cee0 <radio_tmr_ready_get>
			e->drift.window_widening_event_us =
   1bd84:	6b6b      	ldr	r3, [r5, #52]	; 0x34
			e->drift.preamble_to_addr_us = preamble_to_addr_us;
   1bd86:	6127      	str	r7, [r4, #16]
				radio_tmr_aa_restore() - radio_tmr_ready_get();
   1bd88:	1a36      	subs	r6, r6, r0
			e->drift.window_widening_event_us =
   1bd8a:	e9c4 6302 	strd	r6, r3, [r4, #8]
			lll->slave.window_widening_event_us = 0;
   1bd8e:	2300      	movs	r3, #0
   1bd90:	636b      	str	r3, [r5, #52]	; 0x34
			lll->slave.window_size_event_us = 0;
   1bd92:	63eb      	str	r3, [r5, #60]	; 0x3c
	lll_isr_cleanup(param);
   1bd94:	4628      	mov	r0, r5
}
   1bd96:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	lll_isr_cleanup(param);
   1bd9a:	f7ff b9cd 	b.w	1b138 <lll_isr_cleanup>
	switch (phy) {
   1bd9e:	2718      	movs	r7, #24
   1bda0:	e7eb      	b.n	1bd7a <isr_done+0x52>
	LL_ASSERT(e);
   1bda2:	4a0a      	ldr	r2, [pc, #40]	; (1bdcc <isr_done+0xa4>)
   1bda4:	490a      	ldr	r1, [pc, #40]	; (1bdd0 <isr_done+0xa8>)
   1bda6:	480b      	ldr	r0, [pc, #44]	; (1bdd4 <isr_done+0xac>)
   1bda8:	f240 236e 	movw	r3, #622	; 0x26e
   1bdac:	f005 feba 	bl	21b24 <printk>
   1bdb0:	4040      	eors	r0, r0
   1bdb2:	f380 8811 	msr	BASEPRI, r0
   1bdb6:	f04f 0003 	mov.w	r0, #3
   1bdba:	df02      	svc	2
   1bdbc:	e7bd      	b.n	1bd3a <isr_done+0x12>
   1bdbe:	bf00      	nop
   1bdc0:	2000ed7a 	.word	0x2000ed7a
   1bdc4:	2000f31d 	.word	0x2000f31d
   1bdc8:	2000f31e 	.word	0x2000f31e
   1bdcc:	00028f64 	.word	0x00028f64
   1bdd0:	0002882c 	.word	0x0002882c
   1bdd4:	00028404 	.word	0x00028404

0001bdd8 <lll_conn_init>:
{
   1bdd8:	b508      	push	{r3, lr}

static void empty_tx_init(void)
{
	struct pdu_data *p;

	p = (void *)radio_pkt_empty_get();
   1bdda:	f000 fe8b 	bl	1caf4 <radio_pkt_empty_get>
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bdde:	7802      	ldrb	r2, [r0, #0]
	p = (void *)radio_pkt_empty_get();
   1bde0:	4603      	mov	r3, r0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bde2:	2101      	movs	r1, #1
   1bde4:	f361 0201 	bfi	r2, r1, #0, #2
}
   1bde8:	2000      	movs	r0, #0
	p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1bdea:	701a      	strb	r2, [r3, #0]
}
   1bdec:	bd08      	pop	{r3, pc}
   1bdee:	bf00      	nop

0001bdf0 <lll_conn_reset>:
}
   1bdf0:	2000      	movs	r0, #0
   1bdf2:	4770      	bx	lr

0001bdf4 <lll_conn_flush>:
}
   1bdf4:	4770      	bx	lr
   1bdf6:	bf00      	nop

0001bdf8 <lll_conn_prepare_reset>:
	crc_valid = 0U;
   1bdf8:	4805      	ldr	r0, [pc, #20]	; (1be10 <lll_conn_prepare_reset+0x18>)
	crc_expire = 0U;
   1bdfa:	4906      	ldr	r1, [pc, #24]	; (1be14 <lll_conn_prepare_reset+0x1c>)
	mic_state = LLL_CONN_MIC_NONE;
   1bdfc:	4a06      	ldr	r2, [pc, #24]	; (1be18 <lll_conn_prepare_reset+0x20>)
{
   1bdfe:	b410      	push	{r4}
	trx_cnt = 0U;
   1be00:	2300      	movs	r3, #0
   1be02:	4c06      	ldr	r4, [pc, #24]	; (1be1c <lll_conn_prepare_reset+0x24>)
	crc_valid = 0U;
   1be04:	7003      	strb	r3, [r0, #0]
	crc_expire = 0U;
   1be06:	700b      	strb	r3, [r1, #0]
	mic_state = LLL_CONN_MIC_NONE;
   1be08:	7013      	strb	r3, [r2, #0]
	trx_cnt = 0U;
   1be0a:	8023      	strh	r3, [r4, #0]
}
   1be0c:	bc10      	pop	{r4}
   1be0e:	4770      	bx	lr
   1be10:	2000f31d 	.word	0x2000f31d
   1be14:	2000f31c 	.word	0x2000f31c
   1be18:	2000f31e 	.word	0x2000f31e
   1be1c:	2000ed7a 	.word	0x2000ed7a

0001be20 <lll_conn_abort_cb>:
{
   1be20:	b510      	push	{r4, lr}
	if (!prepare_param) {
   1be22:	b1d0      	cbz	r0, 1be5a <lll_conn_abort_cb+0x3a>
	err = lll_hfclock_off();
   1be24:	460c      	mov	r4, r1
   1be26:	f7ff fa41 	bl	1b2ac <lll_hfclock_off>
	LL_ASSERT(err >= 0);
   1be2a:	2800      	cmp	r0, #0
   1be2c:	db04      	blt.n	1be38 <lll_conn_abort_cb+0x18>
	lll_done(param);
   1be2e:	4620      	mov	r0, r4
}
   1be30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1be34:	f7ff b8a8 	b.w	1af88 <lll_done>
	LL_ASSERT(err >= 0);
   1be38:	4a0b      	ldr	r2, [pc, #44]	; (1be68 <lll_conn_abort_cb+0x48>)
   1be3a:	490c      	ldr	r1, [pc, #48]	; (1be6c <lll_conn_abort_cb+0x4c>)
   1be3c:	480c      	ldr	r0, [pc, #48]	; (1be70 <lll_conn_abort_cb+0x50>)
   1be3e:	239c      	movs	r3, #156	; 0x9c
   1be40:	f005 fe70 	bl	21b24 <printk>
   1be44:	4040      	eors	r0, r0
   1be46:	f380 8811 	msr	BASEPRI, r0
   1be4a:	f04f 0003 	mov.w	r0, #3
   1be4e:	df02      	svc	2
	lll_done(param);
   1be50:	4620      	mov	r0, r4
}
   1be52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	lll_done(param);
   1be56:	f7ff b897 	b.w	1af88 <lll_done>
		radio_isr_set(isr_done, param);
   1be5a:	4806      	ldr	r0, [pc, #24]	; (1be74 <lll_conn_abort_cb+0x54>)
   1be5c:	f000 fd00 	bl	1c860 <radio_isr_set>
}
   1be60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		radio_disable();
   1be64:	f000 bdf2 	b.w	1ca4c <radio_disable>
   1be68:	00028f64 	.word	0x00028f64
   1be6c:	00028ea0 	.word	0x00028ea0
   1be70:	00028404 	.word	0x00028404
   1be74:	0001bd29 	.word	0x0001bd29

0001be78 <lll_conn_rx_pkt_set>:
{
   1be78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1be7a:	4605      	mov	r5, r0
	node_rx = ull_pdu_rx_alloc_peek(1);
   1be7c:	2001      	movs	r0, #1
   1be7e:	f7f8 fbd1 	bl	14624 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1be82:	4606      	mov	r6, r0
   1be84:	b368      	cbz	r0, 1bee2 <lll_conn_rx_pkt_set+0x6a>
	phy = lll->phy_rx;
   1be86:	f895 4049 	ldrb.w	r4, [r5, #73]	; 0x49
	max_rx_octets = lll->max_rx_octets;
   1be8a:	f8b5 7042 	ldrh.w	r7, [r5, #66]	; 0x42
	phy = lll->phy_rx;
   1be8e:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   1be92:	2100      	movs	r1, #0
   1be94:	4620      	mov	r0, r4
   1be96:	f000 fd49 	bl	1c92c <radio_phy_set>
	} else if (lll->enc_rx) {
   1be9a:	f895 3062 	ldrb.w	r3, [r5, #98]	; 0x62
   1be9e:	071b      	lsls	r3, r3, #28
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1bea0:	ea4f 0244 	mov.w	r2, r4, lsl #1
	} else if (lll->enc_rx) {
   1bea4:	d511      	bpl.n	1beca <lll_conn_rx_pkt_set+0x52>
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   1bea6:	1d39      	adds	r1, r7, #4
   1bea8:	f042 0201 	orr.w	r2, r2, #1
   1beac:	b2c9      	uxtb	r1, r1
   1beae:	2008      	movs	r0, #8
   1beb0:	f000 fd82 	bl	1c9b8 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1beb4:	f106 021c 	add.w	r2, r6, #28
   1beb8:	4621      	mov	r1, r4
   1beba:	f105 0063 	add.w	r0, r5, #99	; 0x63
   1bebe:	f001 f829 	bl	1cf14 <radio_ccm_rx_pkt_set>
}
   1bec2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&lll->ccm_rx, phy,
   1bec6:	f000 bda5 	b.w	1ca14 <radio_pkt_rx_set>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   1beca:	2008      	movs	r0, #8
   1becc:	b2f9      	uxtb	r1, r7
   1bece:	f042 0201 	orr.w	r2, r2, #1
   1bed2:	f000 fd71 	bl	1c9b8 <radio_pkt_configure>
		radio_pkt_rx_set(node_rx->pdu);
   1bed6:	f106 001c 	add.w	r0, r6, #28
}
   1beda:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_rx_set(node_rx->pdu);
   1bede:	f000 bd99 	b.w	1ca14 <radio_pkt_rx_set>
	LL_ASSERT(node_rx);
   1bee2:	4a07      	ldr	r2, [pc, #28]	; (1bf00 <lll_conn_rx_pkt_set+0x88>)
   1bee4:	4907      	ldr	r1, [pc, #28]	; (1bf04 <lll_conn_rx_pkt_set+0x8c>)
   1bee6:	4808      	ldr	r0, [pc, #32]	; (1bf08 <lll_conn_rx_pkt_set+0x90>)
   1bee8:	f44f 73eb 	mov.w	r3, #470	; 0x1d6
   1beec:	f005 fe1a 	bl	21b24 <printk>
   1bef0:	4040      	eors	r0, r0
   1bef2:	f380 8811 	msr	BASEPRI, r0
   1bef6:	f04f 0003 	mov.w	r0, #3
   1befa:	df02      	svc	2
   1befc:	e7c3      	b.n	1be86 <lll_conn_rx_pkt_set+0xe>
   1befe:	bf00      	nop
   1bf00:	00028f64 	.word	0x00028f64
   1bf04:	00028fb0 	.word	0x00028fb0
   1bf08:	00028404 	.word	0x00028404

0001bf0c <lll_conn_isr_tx>:
{
   1bf0c:	b538      	push	{r3, r4, r5, lr}
   1bf0e:	4604      	mov	r4, r0
	lll_isr_tx_status_reset();
   1bf10:	f7ff f8f2 	bl	1b0f8 <lll_isr_tx_status_reset>
	radio_tmr_tifs_set(EVENT_IFS_US);
   1bf14:	2096      	movs	r0, #150	; 0x96
   1bf16:	f000 ff0f 	bl	1cd38 <radio_tmr_tifs_set>
				     lll->phy_flags);
   1bf1a:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0,
   1bf1e:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bf22:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1bf26:	f000 0007 	and.w	r0, r0, #7
   1bf2a:	f002 0207 	and.w	r2, r2, #7
   1bf2e:	2100      	movs	r1, #0
   1bf30:	f000 fe30 	bl	1cb94 <radio_switch_complete_and_tx>
	lll_conn_rx_pkt_set(lll);
   1bf34:	4620      	mov	r0, r4
   1bf36:	f7ff ff9f 	bl	1be78 <lll_conn_rx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1bf3a:	f000 fda7 	bl	1ca8c <radio_is_ready>
   1bf3e:	bb58      	cbnz	r0, 1bf98 <lll_conn_isr_tx+0x8c>
	hcto = radio_tmr_tifs_base_get() + EVENT_IFS_US + 4 +
   1bf40:	f000 ffe2 	bl	1cf08 <radio_tmr_tifs_base_get>
   1bf44:	4605      	mov	r5, r0
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bf46:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1bf4a:	2101      	movs	r1, #1
   1bf4c:	f000 0007 	and.w	r0, r0, #7
   1bf50:	f000 fd70 	bl	1ca34 <radio_rx_chain_delay_get>
	hcto += addr_us_get(lll->phy_rx);
   1bf54:	f894 3049 	ldrb.w	r3, [r4, #73]	; 0x49
   1bf58:	f003 0307 	and.w	r3, r3, #7
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1bf5c:	4405      	add	r5, r0
   1bf5e:	2b02      	cmp	r3, #2
   1bf60:	f105 05a3 	add.w	r5, r5, #163	; 0xa3
   1bf64:	d016      	beq.n	1bf94 <lll_conn_isr_tx+0x88>
		return 376;
   1bf66:	2b04      	cmp	r3, #4
   1bf68:	bf14      	ite	ne
   1bf6a:	2328      	movne	r3, #40	; 0x28
   1bf6c:	f44f 73bc 	moveq.w	r3, #376	; 0x178
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1bf70:	f894 0048 	ldrb.w	r0, [r4, #72]	; 0x48
   1bf74:	f3c0 01c0 	ubfx	r1, r0, #3, #1
   1bf78:	f000 0007 	and.w	r0, r0, #7
	hcto += addr_us_get(lll->phy_rx);
   1bf7c:	441d      	add	r5, r3
	hcto -= radio_tx_chain_delay_get(lll->phy_tx, lll->phy_flags);
   1bf7e:	f000 fd55 	bl	1ca2c <radio_tx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   1bf82:	1a28      	subs	r0, r5, r0
   1bf84:	f000 ff78 	bl	1ce78 <radio_tmr_hcto_configure>
	radio_isr_set(lll_conn_isr_rx, param);
   1bf88:	4621      	mov	r1, r4
   1bf8a:	480a      	ldr	r0, [pc, #40]	; (1bfb4 <lll_conn_isr_tx+0xa8>)
}
   1bf8c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	radio_isr_set(lll_conn_isr_rx, param);
   1bf90:	f000 bc66 	b.w	1c860 <radio_isr_set>
	switch (phy) {
   1bf94:	2318      	movs	r3, #24
   1bf96:	e7eb      	b.n	1bf70 <lll_conn_isr_tx+0x64>
	LL_ASSERT(!radio_is_ready());
   1bf98:	4a07      	ldr	r2, [pc, #28]	; (1bfb8 <lll_conn_isr_tx+0xac>)
   1bf9a:	4908      	ldr	r1, [pc, #32]	; (1bfbc <lll_conn_isr_tx+0xb0>)
   1bf9c:	4808      	ldr	r0, [pc, #32]	; (1bfc0 <lll_conn_isr_tx+0xb4>)
   1bf9e:	f44f 73d1 	mov.w	r3, #418	; 0x1a2
   1bfa2:	f005 fdbf 	bl	21b24 <printk>
   1bfa6:	4040      	eors	r0, r0
   1bfa8:	f380 8811 	msr	BASEPRI, r0
   1bfac:	f04f 0003 	mov.w	r0, #3
   1bfb0:	df02      	svc	2
   1bfb2:	e7c5      	b.n	1bf40 <lll_conn_isr_tx+0x34>
   1bfb4:	0001c105 	.word	0x0001c105
   1bfb8:	00028f64 	.word	0x00028f64
   1bfbc:	00028f28 	.word	0x00028f28
   1bfc0:	00028404 	.word	0x00028404

0001bfc4 <lll_conn_tx_pkt_set>:
{
   1bfc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bfc6:	460e      	mov	r6, r1
	phy = lll->phy_tx;
   1bfc8:	f890 1048 	ldrb.w	r1, [r0, #72]	; 0x48
	max_tx_octets = lll->max_tx_octets;
   1bfcc:	f8b0 7040 	ldrh.w	r7, [r0, #64]	; 0x40
	phy = lll->phy_tx;
   1bfd0:	f001 0507 	and.w	r5, r1, #7
{
   1bfd4:	4604      	mov	r4, r0
	radio_phy_set(phy, flags);
   1bfd6:	f3c1 01c0 	ubfx	r1, r1, #3, #1
   1bfda:	4628      	mov	r0, r5
   1bfdc:	f000 fca6 	bl	1c92c <radio_phy_set>
	} else if (lll->enc_tx) {
   1bfe0:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1bfe4:	06db      	lsls	r3, r3, #27
				    (phy << 1) | 0x01);
   1bfe6:	ea4f 0245 	mov.w	r2, r5, lsl #1
	} else if (lll->enc_tx) {
   1bfea:	d50f      	bpl.n	1c00c <lll_conn_tx_pkt_set+0x48>
		radio_pkt_configure(8, (max_tx_octets + 4U),
   1bfec:	1d39      	adds	r1, r7, #4
   1bfee:	f042 0201 	orr.w	r2, r2, #1
   1bff2:	b2c9      	uxtb	r1, r1
   1bff4:	2008      	movs	r0, #8
   1bff6:	f000 fcdf 	bl	1c9b8 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1bffa:	4631      	mov	r1, r6
   1bffc:	f104 0084 	add.w	r0, r4, #132	; 0x84
   1c000:	f000 ffc6 	bl	1cf90 <radio_ccm_tx_pkt_set>
}
   1c004:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&lll->ccm_tx,
   1c008:	f000 bd0a 	b.w	1ca20 <radio_pkt_tx_set>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1c00c:	b2f9      	uxtb	r1, r7
   1c00e:	2008      	movs	r0, #8
   1c010:	f042 0201 	orr.w	r2, r2, #1
   1c014:	f000 fcd0 	bl	1c9b8 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1c018:	4630      	mov	r0, r6
}
   1c01a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
		radio_pkt_tx_set(pdu_data_tx);
   1c01e:	f000 bcff 	b.w	1ca20 <radio_pkt_tx_set>
   1c022:	bf00      	nop

0001c024 <lll_conn_pdu_tx_prep>:
{
   1c024:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c028:	4604      	mov	r4, r0
   1c02a:	b083      	sub	sp, #12
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c02c:	aa01      	add	r2, sp, #4
   1c02e:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
{
   1c030:	4689      	mov	r9, r1
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c032:	6d21      	ldr	r1, [r4, #80]	; 0x50
   1c034:	f7f4 fbde 	bl	107f4 <memq_peek>
	if (lll->empty || !link) {
   1c038:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c03c:	075a      	lsls	r2, r3, #29
	link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail, (void **)&tx);
   1c03e:	4606      	mov	r6, r0
	if (lll->empty || !link) {
   1c040:	d432      	bmi.n	1c0a8 <lll_conn_pdu_tx_prep+0x84>
   1c042:	2800      	cmp	r0, #0
   1c044:	d04e      	beq.n	1c0e4 <lll_conn_pdu_tx_prep+0xc0>
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c046:	9b01      	ldr	r3, [sp, #4]
   1c048:	f894 7061 	ldrb.w	r7, [r4, #97]	; 0x61
   1c04c:	f103 0804 	add.w	r8, r3, #4
		if (!lll->packet_tx_head_len) {
   1c050:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
		p = (void *)(tx->pdu + lll->packet_tx_head_offset);
   1c054:	eb08 0507 	add.w	r5, r8, r7
		if (!lll->packet_tx_head_len) {
   1c058:	b913      	cbnz	r3, 1c060 <lll_conn_pdu_tx_prep+0x3c>
			lll->packet_tx_head_len = p->len;
   1c05a:	786b      	ldrb	r3, [r5, #1]
   1c05c:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
		if (lll->packet_tx_head_offset) {
   1c060:	b137      	cbz	r7, 1c070 <lll_conn_pdu_tx_prep+0x4c>
			p->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   1c062:	f818 2007 	ldrb.w	r2, [r8, r7]
   1c066:	2101      	movs	r1, #1
   1c068:	f361 0201 	bfi	r2, r1, #0, #2
   1c06c:	f808 2007 	strb.w	r2, [r8, r7]
		p->len = lll->packet_tx_head_len - lll->packet_tx_head_offset;
   1c070:	1bdb      	subs	r3, r3, r7
   1c072:	706b      	strb	r3, [r5, #1]
		max_tx_octets = ull_conn_lll_max_tx_octets_get(lll);
   1c074:	4620      	mov	r0, r4
   1c076:	f7fd fac1 	bl	195fc <ull_conn_lll_max_tx_octets_get>
		if (p->len > max_tx_octets) {
   1c07a:	786b      	ldrb	r3, [r5, #1]
   1c07c:	4283      	cmp	r3, r0
   1c07e:	d924      	bls.n	1c0ca <lll_conn_pdu_tx_prep+0xa6>
			p->len = max_tx_octets;
   1c080:	7068      	strb	r0, [r5, #1]
			p->md = 1U;
   1c082:	f818 3007 	ldrb.w	r3, [r8, r7]
   1c086:	f043 0310 	orr.w	r3, r3, #16
   1c08a:	f808 3007 	strb.w	r3, [r8, r7]
		p->rfu = 0U;
   1c08e:	f818 3007 	ldrb.w	r3, [r8, r7]
   1c092:	f36f 1347 	bfc	r3, #5, #3
   1c096:	f808 3007 	strb.w	r3, [r8, r7]
		p->resv = 0U;
   1c09a:	2300      	movs	r3, #0
   1c09c:	70ab      	strb	r3, [r5, #2]
	*pdu_data_tx = p;
   1c09e:	f8c9 5000 	str.w	r5, [r9]
}
   1c0a2:	b003      	add	sp, #12
   1c0a4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		lll->empty = 1U;
   1c0a8:	f043 0304 	orr.w	r3, r3, #4
   1c0ac:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1c0b0:	f000 fd20 	bl	1caf4 <radio_pkt_empty_get>
   1c0b4:	4605      	mov	r5, r0
		if (link || FORCE_MD_CNT_GET()) {
   1c0b6:	b1e6      	cbz	r6, 1c0f2 <lll_conn_pdu_tx_prep+0xce>
			p->md = 1U;
   1c0b8:	7803      	ldrb	r3, [r0, #0]
   1c0ba:	f043 0310 	orr.w	r3, r3, #16
   1c0be:	7003      	strb	r3, [r0, #0]
	*pdu_data_tx = p;
   1c0c0:	f8c9 5000 	str.w	r5, [r9]
}
   1c0c4:	b003      	add	sp, #12
   1c0c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		} else if ((link->next != lll->memq_tx.tail) ||
   1c0ca:	6d23      	ldr	r3, [r4, #80]	; 0x50
   1c0cc:	6832      	ldr	r2, [r6, #0]
   1c0ce:	429a      	cmp	r2, r3
			p->md = 1U;
   1c0d0:	f818 3007 	ldrb.w	r3, [r8, r7]
   1c0d4:	bf14      	ite	ne
   1c0d6:	f043 0310 	orrne.w	r3, r3, #16
			p->md = 0U;
   1c0da:	f36f 1304 	bfceq	r3, #4, #1
   1c0de:	f808 3007 	strb.w	r3, [r8, r7]
   1c0e2:	e7d4      	b.n	1c08e <lll_conn_pdu_tx_prep+0x6a>
		lll->empty = 1U;
   1c0e4:	f043 0304 	orr.w	r3, r3, #4
   1c0e8:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		p = (void *)radio_pkt_empty_get();
   1c0ec:	f000 fd02 	bl	1caf4 <radio_pkt_empty_get>
   1c0f0:	4605      	mov	r5, r0
			p->md = 0U;
   1c0f2:	782b      	ldrb	r3, [r5, #0]
   1c0f4:	f36f 1304 	bfc	r3, #4, #1
   1c0f8:	702b      	strb	r3, [r5, #0]
	*pdu_data_tx = p;
   1c0fa:	f8c9 5000 	str.w	r5, [r9]
}
   1c0fe:	b003      	add	sp, #12
   1c100:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001c104 <lll_conn_isr_rx>:
{
   1c104:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c106:	b083      	sub	sp, #12
   1c108:	4604      	mov	r4, r0
	trx_done = radio_is_done();
   1c10a:	f000 fcc9 	bl	1caa0 <radio_is_done>
	if (trx_done) {
   1c10e:	b2c0      	uxtb	r0, r0
   1c110:	b950      	cbnz	r0, 1c128 <lll_conn_isr_rx+0x24>
	lll_isr_rx_status_reset();
   1c112:	f7fe fff9 	bl	1b108 <lll_isr_rx_status_reset>
		radio_isr_set(isr_done, param);
   1c116:	48b1      	ldr	r0, [pc, #708]	; (1c3dc <lll_conn_isr_rx+0x2d8>)
   1c118:	4621      	mov	r1, r4
   1c11a:	f000 fba1 	bl	1c860 <radio_isr_set>
}
   1c11e:	b003      	add	sp, #12
   1c120:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		radio_disable();
   1c124:	f000 bc92 	b.w	1ca4c <radio_disable>
		crc_ok = radio_crc_is_valid();
   1c128:	f000 fcda 	bl	1cae0 <radio_crc_is_valid>
   1c12c:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
   1c12e:	f000 fda7 	bl	1cc80 <radio_rssi_is_ready>
	lll_isr_rx_status_reset();
   1c132:	f7fe ffe9 	bl	1b108 <lll_isr_rx_status_reset>
	trx_cnt++;
   1c136:	4aaa      	ldr	r2, [pc, #680]	; (1c3e0 <lll_conn_isr_rx+0x2dc>)
   1c138:	8813      	ldrh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c13a:	2001      	movs	r0, #1
	trx_cnt++;
   1c13c:	4403      	add	r3, r0
   1c13e:	8013      	strh	r3, [r2, #0]
	node_rx = ull_pdu_rx_alloc_peek(1);
   1c140:	f7f8 fa70 	bl	14624 <ull_pdu_rx_alloc_peek>
	LL_ASSERT(node_rx);
   1c144:	4606      	mov	r6, r0
   1c146:	2800      	cmp	r0, #0
   1c148:	f000 80bd 	beq.w	1c2c6 <lll_conn_isr_rx+0x1c2>
	if (crc_ok) {
   1c14c:	2d00      	cmp	r5, #0
   1c14e:	d155      	bne.n	1c1fc <lll_conn_isr_rx+0xf8>
		if (crc_expire == 0U) {
   1c150:	4ba4      	ldr	r3, [pc, #656]	; (1c3e4 <lll_conn_isr_rx+0x2e0>)
   1c152:	781f      	ldrb	r7, [r3, #0]
   1c154:	2f00      	cmp	r7, #0
   1c156:	f040 80a5 	bne.w	1c2a4 <lll_conn_isr_rx+0x1a0>
		crc_expire--;
   1c15a:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c15c:	a901      	add	r1, sp, #4
   1c15e:	4620      	mov	r0, r4
		crc_expire--;
   1c160:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c162:	f7ff ff5f 	bl	1c024 <lll_conn_pdu_tx_prep>
		radio_tmr_tifs_set(EVENT_IFS_US);
   1c166:	2096      	movs	r0, #150	; 0x96
   1c168:	f000 fde6 	bl	1cd38 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(lll->phy_rx);
   1c16c:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c170:	f000 0007 	and.w	r0, r0, #7
   1c174:	f000 fcc6 	bl	1cb04 <radio_switch_complete_and_rx>
		radio_isr_set(lll_conn_isr_tx, param);
   1c178:	489b      	ldr	r0, [pc, #620]	; (1c3e8 <lll_conn_isr_rx+0x2e4>)
   1c17a:	4621      	mov	r1, r4
   1c17c:	f000 fb70 	bl	1c860 <radio_isr_set>
		radio_tmr_end_capture();
   1c180:	f000 feb4 	bl	1ceec <radio_tmr_end_capture>
	pdu_data_tx->sn = lll->sn;
   1c184:	9901      	ldr	r1, [sp, #4]
   1c186:	f894 2062 	ldrb.w	r2, [r4, #98]	; 0x62
	pdu_data_tx->nesn = lll->nesn;
   1c18a:	780b      	ldrb	r3, [r1, #0]
   1c18c:	f023 000c 	bic.w	r0, r3, #12
   1c190:	f3c2 0340 	ubfx	r3, r2, #1, #1
   1c194:	009b      	lsls	r3, r3, #2
	pdu_data_tx->sn = lll->sn;
   1c196:	f3c2 0200 	ubfx	r2, r2, #0, #1
	pdu_data_tx->nesn = lll->nesn;
   1c19a:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
   1c19e:	4303      	orrs	r3, r0
   1c1a0:	700b      	strb	r3, [r1, #0]
	lll_conn_tx_pkt_set(lll, pdu_data_tx);
   1c1a2:	4620      	mov	r0, r4
   1c1a4:	f7ff ff0e 	bl	1bfc4 <lll_conn_tx_pkt_set>
	LL_ASSERT(!radio_is_ready());
   1c1a8:	f000 fc70 	bl	1ca8c <radio_is_ready>
   1c1ac:	2800      	cmp	r0, #0
   1c1ae:	f040 80b9 	bne.w	1c324 <lll_conn_isr_rx+0x220>
	if (!radio_tmr_aa_restore()) {
   1c1b2:	f000 fe8f 	bl	1ced4 <radio_tmr_aa_restore>
   1c1b6:	b170      	cbz	r0, 1c1d6 <lll_conn_isr_rx+0xd2>
	if (tx_release) {
   1c1b8:	b19d      	cbz	r5, 1c1e2 <lll_conn_isr_rx+0xde>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c1ba:	8a20      	ldrh	r0, [r4, #16]
   1c1bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c1c0:	4298      	cmp	r0, r3
   1c1c2:	f000 80bd 	beq.w	1c340 <lll_conn_isr_rx+0x23c>
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c1c6:	4629      	mov	r1, r5
   1c1c8:	f7fd f8ea 	bl	193a0 <ull_conn_lll_ack_enqueue>
	if (is_rx_enqueue) {
   1c1cc:	b95f      	cbnz	r7, 1c1e6 <lll_conn_isr_rx+0xe2>
		ull_rx_sched();
   1c1ce:	f7f8 fa6d 	bl	146ac <ull_rx_sched>
}
   1c1d2:	b003      	add	sp, #12
   1c1d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		radio_tmr_aa_save(radio_tmr_aa_get());
   1c1d6:	f000 fe71 	bl	1cebc <radio_tmr_aa_get>
   1c1da:	f000 fe75 	bl	1cec8 <radio_tmr_aa_save>
	if (tx_release) {
   1c1de:	2d00      	cmp	r5, #0
   1c1e0:	d1eb      	bne.n	1c1ba <lll_conn_isr_rx+0xb6>
	if (is_rx_enqueue) {
   1c1e2:	2f00      	cmp	r7, #0
   1c1e4:	d0f5      	beq.n	1c1d2 <lll_conn_isr_rx+0xce>
		ull_pdu_rx_alloc();
   1c1e6:	f7f8 fa3b 	bl	14660 <ull_pdu_rx_alloc>
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1c1ea:	2303      	movs	r3, #3
   1c1ec:	7133      	strb	r3, [r6, #4]
		node_rx->hdr.handle = lll->handle;
   1c1ee:	8a23      	ldrh	r3, [r4, #16]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c1f0:	6830      	ldr	r0, [r6, #0]
		node_rx->hdr.handle = lll->handle;
   1c1f2:	80f3      	strh	r3, [r6, #6]
		ull_rx_put(node_rx->hdr.link, node_rx);
   1c1f4:	4631      	mov	r1, r6
   1c1f6:	f7f8 fa49 	bl	1468c <ull_rx_put>
	if (is_ull_rx) {
   1c1fa:	e7e8      	b.n	1c1ce <lll_conn_isr_rx+0xca>
	if (pdu_data_rx->nesn != lll->sn) {
   1c1fc:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c200:	7f32      	ldrb	r2, [r6, #28]
   1c202:	f003 0101 	and.w	r1, r3, #1
   1c206:	f3c2 0080 	ubfx	r0, r2, #2, #1
   1c20a:	4288      	cmp	r0, r1
   1c20c:	d06b      	beq.n	1c2e6 <lll_conn_isr_rx+0x1e2>
		if (lll->role) {
   1c20e:	f994 2021 	ldrsb.w	r2, [r4, #33]	; 0x21
		lll->sn++;
   1c212:	f081 0101 	eor.w	r1, r1, #1
   1c216:	f361 0300 	bfi	r3, r1, #0, #1
		if (lll->role) {
   1c21a:	2a00      	cmp	r2, #0
		lll->sn++;
   1c21c:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (lll->role) {
   1c220:	da05      	bge.n	1c22e <lll_conn_isr_rx+0x12a>
			lll->slave.latency_enabled = 1;
   1c222:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
   1c226:	f043 0301 	orr.w	r3, r3, #1
   1c22a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
		if (!lll->empty) {
   1c22e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c232:	075a      	lsls	r2, r3, #29
   1c234:	f100 8093 	bmi.w	1c35e <lll_conn_isr_rx+0x25a>
			link = memq_peek(lll->memq_tx.head, lll->memq_tx.tail,
   1c238:	e9d4 0113 	ldrd	r0, r1, [r4, #76]	; 0x4c
   1c23c:	aa01      	add	r2, sp, #4
   1c23e:	f7f4 fad9 	bl	107f4 <memq_peek>
		if (link) {
   1c242:	4605      	mov	r5, r0
   1c244:	2800      	cmp	r0, #0
   1c246:	f000 8097 	beq.w	1c378 <lll_conn_isr_rx+0x274>
					       lll->packet_tx_head_offset);
   1c24a:	f894 2061 	ldrb.w	r2, [r4, #97]	; 0x61
			pdu_data_tx_len = pdu_data_tx->len;
   1c24e:	9b01      	ldr	r3, [sp, #4]
   1c250:	4413      	add	r3, r2
   1c252:	7959      	ldrb	r1, [r3, #5]
			if (pdu_data_tx_len != 0U) {
   1c254:	b171      	cbz	r1, 1c274 <lll_conn_isr_rx+0x170>
				if (lll->enc_tx) {
   1c256:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c25a:	06df      	lsls	r7, r3, #27
   1c25c:	d50a      	bpl.n	1c274 <lll_conn_isr_rx+0x170>
					lll->ccm_tx.counter++;
   1c25e:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
   1c262:	3301      	adds	r3, #1
   1c264:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
   1c268:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   1c26c:	f143 0300 	adc.w	r3, r3, #0
   1c270:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
			if (offset < lll->packet_tx_head_len) {
   1c274:	f894 3060 	ldrb.w	r3, [r4, #96]	; 0x60
			offset = lll->packet_tx_head_offset + pdu_data_tx_len;
   1c278:	440a      	add	r2, r1
   1c27a:	b2d2      	uxtb	r2, r2
			if (offset < lll->packet_tx_head_len) {
   1c27c:	429a      	cmp	r2, r3
   1c27e:	d379      	bcc.n	1c374 <lll_conn_isr_rx+0x270>
			} else if (offset == lll->packet_tx_head_len) {
   1c280:	d17a      	bne.n	1c378 <lll_conn_isr_rx+0x274>
				lll->packet_tx_head_len = 0;
   1c282:	2200      	movs	r2, #0
   1c284:	f8a4 2060 	strh.w	r2, [r4, #96]	; 0x60
				memq_dequeue(lll->memq_tx.tail,
   1c288:	6d20      	ldr	r0, [r4, #80]	; 0x50
   1c28a:	f104 014c 	add.w	r1, r4, #76	; 0x4c
   1c28e:	f7f4 fab9 	bl	10804 <memq_dequeue>
				link->next = tx->next; /* Indicates ctrl or data
   1c292:	9b01      	ldr	r3, [sp, #4]
   1c294:	681a      	ldr	r2, [r3, #0]
   1c296:	602a      	str	r2, [r5, #0]
				tx->next = link;
   1c298:	601d      	str	r5, [r3, #0]
				*tx_release = tx;
   1c29a:	9d01      	ldr	r5, [sp, #4]
   1c29c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c2a0:	7f32      	ldrb	r2, [r6, #28]
   1c2a2:	e021      	b.n	1c2e8 <lll_conn_isr_rx+0x1e4>
		crc_expire--;
   1c2a4:	3f01      	subs	r7, #1
   1c2a6:	b2ff      	uxtb	r7, r7
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c2a8:	a901      	add	r1, sp, #4
   1c2aa:	4620      	mov	r0, r4
		crc_expire--;
   1c2ac:	701f      	strb	r7, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c2ae:	f7ff feb9 	bl	1c024 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c2b2:	2f00      	cmp	r7, #0
   1c2b4:	f040 80dd 	bne.w	1c472 <lll_conn_isr_rx+0x36e>
		radio_isr_set(isr_done, param);
   1c2b8:	4848      	ldr	r0, [pc, #288]	; (1c3dc <lll_conn_isr_rx+0x2d8>)
   1c2ba:	4621      	mov	r1, r4
   1c2bc:	f000 fad0 	bl	1c860 <radio_isr_set>
			radio_switch_complete_and_disable();
   1c2c0:	f000 fcc8 	bl	1cc54 <radio_switch_complete_and_disable>
   1c2c4:	e75e      	b.n	1c184 <lll_conn_isr_rx+0x80>
	LL_ASSERT(node_rx);
   1c2c6:	4a49      	ldr	r2, [pc, #292]	; (1c3ec <lll_conn_isr_rx+0x2e8>)
   1c2c8:	4949      	ldr	r1, [pc, #292]	; (1c3f0 <lll_conn_isr_rx+0x2ec>)
   1c2ca:	484a      	ldr	r0, [pc, #296]	; (1c3f4 <lll_conn_isr_rx+0x2f0>)
   1c2cc:	23d1      	movs	r3, #209	; 0xd1
   1c2ce:	f005 fc29 	bl	21b24 <printk>
   1c2d2:	4040      	eors	r0, r0
   1c2d4:	f380 8811 	msr	BASEPRI, r0
   1c2d8:	f04f 0003 	mov.w	r0, #3
   1c2dc:	df02      	svc	2
	if (crc_ok) {
   1c2de:	2d00      	cmp	r5, #0
   1c2e0:	f43f af36 	beq.w	1c150 <lll_conn_isr_rx+0x4c>
   1c2e4:	e78a      	b.n	1c1fc <lll_conn_isr_rx+0xf8>
	tx_release = NULL;
   1c2e6:	2500      	movs	r5, #0
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c2e8:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   1c2ec:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1c2f0:	429a      	cmp	r2, r3
   1c2f2:	d046      	beq.n	1c382 <lll_conn_isr_rx+0x27e>
	is_rx_enqueue = 0U;
   1c2f4:	2700      	movs	r7, #0
		crc_expire = 0U;
   1c2f6:	4a3b      	ldr	r2, [pc, #236]	; (1c3e4 <lll_conn_isr_rx+0x2e0>)
		crc_valid = 1U;
   1c2f8:	4b3f      	ldr	r3, [pc, #252]	; (1c3f8 <lll_conn_isr_rx+0x2f4>)
		crc_expire = 0U;
   1c2fa:	2100      	movs	r1, #0
   1c2fc:	7011      	strb	r1, [r2, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c2fe:	4620      	mov	r0, r4
		crc_valid = 1U;
   1c300:	2201      	movs	r2, #1
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c302:	a901      	add	r1, sp, #4
		crc_valid = 1U;
   1c304:	701a      	strb	r2, [r3, #0]
	lll_conn_pdu_tx_prep(lll, &pdu_data_tx);
   1c306:	f7ff fe8d 	bl	1c024 <lll_conn_pdu_tx_prep>
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c30a:	7f33      	ldrb	r3, [r6, #28]
   1c30c:	06d9      	lsls	r1, r3, #27
   1c30e:	f53f af2a 	bmi.w	1c166 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1c312:	9b01      	ldr	r3, [sp, #4]
   1c314:	781a      	ldrb	r2, [r3, #0]
	is_done = is_done || ((crc_ok) && (pdu_data_rx->md == 0) &&
   1c316:	06d2      	lsls	r2, r2, #27
   1c318:	f53f af25 	bmi.w	1c166 <lll_conn_isr_rx+0x62>
			      (pdu_data_tx->md == 0) &&
   1c31c:	785b      	ldrb	r3, [r3, #1]
   1c31e:	2b00      	cmp	r3, #0
   1c320:	d0ca      	beq.n	1c2b8 <lll_conn_isr_rx+0x1b4>
   1c322:	e720      	b.n	1c166 <lll_conn_isr_rx+0x62>
	LL_ASSERT(!radio_is_ready());
   1c324:	4a31      	ldr	r2, [pc, #196]	; (1c3ec <lll_conn_isr_rx+0x2e8>)
   1c326:	4935      	ldr	r1, [pc, #212]	; (1c3fc <lll_conn_isr_rx+0x2f8>)
   1c328:	4832      	ldr	r0, [pc, #200]	; (1c3f4 <lll_conn_isr_rx+0x2f0>)
   1c32a:	f240 133d 	movw	r3, #317	; 0x13d
   1c32e:	f005 fbf9 	bl	21b24 <printk>
   1c332:	4040      	eors	r0, r0
   1c334:	f380 8811 	msr	BASEPRI, r0
   1c338:	f04f 0003 	mov.w	r0, #3
   1c33c:	df02      	svc	2
   1c33e:	e738      	b.n	1c1b2 <lll_conn_isr_rx+0xae>
		LL_ASSERT(lll->handle != 0xFFFF);
   1c340:	4a2a      	ldr	r2, [pc, #168]	; (1c3ec <lll_conn_isr_rx+0x2e8>)
   1c342:	492f      	ldr	r1, [pc, #188]	; (1c400 <lll_conn_isr_rx+0x2fc>)
   1c344:	482b      	ldr	r0, [pc, #172]	; (1c3f4 <lll_conn_isr_rx+0x2f0>)
   1c346:	f44f 73a6 	mov.w	r3, #332	; 0x14c
   1c34a:	f005 fbeb 	bl	21b24 <printk>
   1c34e:	4040      	eors	r0, r0
   1c350:	f380 8811 	msr	BASEPRI, r0
   1c354:	f04f 0003 	mov.w	r0, #3
   1c358:	df02      	svc	2
		ull_conn_lll_ack_enqueue(lll->handle, tx_release);
   1c35a:	8a20      	ldrh	r0, [r4, #16]
   1c35c:	e733      	b.n	1c1c6 <lll_conn_isr_rx+0xc2>
			lll->empty = 0;
   1c35e:	f36f 0382 	bfc	r3, #2, #1
   1c362:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
			pdu_data_tx = (void *)radio_pkt_empty_get();
   1c366:	f000 fbc5 	bl	1caf4 <radio_pkt_empty_get>
	tx_release = NULL;
   1c36a:	2500      	movs	r5, #0
   1c36c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c370:	7f32      	ldrb	r2, [r6, #28]
   1c372:	e7b9      	b.n	1c2e8 <lll_conn_isr_rx+0x1e4>
				lll->packet_tx_head_offset = offset;
   1c374:	f884 2061 	strb.w	r2, [r4, #97]	; 0x61
   1c378:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c37c:	7f32      	ldrb	r2, [r6, #28]
	tx_release = NULL;
   1c37e:	2500      	movs	r5, #0
   1c380:	e7b2      	b.n	1c2e8 <lll_conn_isr_rx+0x1e4>
	    (ull_pdu_rx_alloc_peek(3) != 0)) {
   1c382:	2003      	movs	r0, #3
   1c384:	f7f8 f94e 	bl	14624 <ull_pdu_rx_alloc_peek>
	if ((pdu_data_rx->sn == lll->nesn) &&
   1c388:	2800      	cmp	r0, #0
   1c38a:	d0b3      	beq.n	1c2f4 <lll_conn_isr_rx+0x1f0>
		lll->nesn++;
   1c38c:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c390:	f083 0302 	eor.w	r3, r3, #2
   1c394:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
		if (pdu_data_rx->len != 0) {
   1c398:	7f73      	ldrb	r3, [r6, #29]
   1c39a:	2b00      	cmp	r3, #0
   1c39c:	d0aa      	beq.n	1c2f4 <lll_conn_isr_rx+0x1f0>
			if (lll->enc_rx) {
   1c39e:	f894 3062 	ldrb.w	r3, [r4, #98]	; 0x62
   1c3a2:	0718      	lsls	r0, r3, #28
   1c3a4:	d401      	bmi.n	1c3aa <lll_conn_isr_rx+0x2a6>
			*is_rx_enqueue = 1U;
   1c3a6:	2701      	movs	r7, #1
   1c3a8:	e7a5      	b.n	1c2f6 <lll_conn_isr_rx+0x1f2>
				done = radio_ccm_is_done();
   1c3aa:	f000 fe19 	bl	1cfe0 <radio_ccm_is_done>
				LL_ASSERT(done);
   1c3ae:	2800      	cmp	r0, #0
   1c3b0:	d051      	beq.n	1c456 <lll_conn_isr_rx+0x352>
				bool mic_failure = !radio_ccm_mic_is_valid();
   1c3b2:	f000 fe37 	bl	1d024 <radio_ccm_mic_is_valid>
				if (mic_failure &&
   1c3b6:	2800      	cmp	r0, #0
   1c3b8:	d13d      	bne.n	1c436 <lll_conn_isr_rx+0x332>
				    lll->ccm_rx.counter == 0 &&
   1c3ba:	f8d4 2073 	ldr.w	r2, [r4, #115]	; 0x73
   1c3be:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
				if (mic_failure &&
   1c3c2:	4313      	orrs	r3, r2
   1c3c4:	d104      	bne.n	1c3d0 <lll_conn_isr_rx+0x2cc>
				    (pdu_data_rx->ll_id ==
   1c3c6:	7f33      	ldrb	r3, [r6, #28]
				    lll->ccm_rx.counter == 0 &&
   1c3c8:	f003 0303 	and.w	r3, r3, #3
   1c3cc:	2b03      	cmp	r3, #3
   1c3ce:	d01b      	beq.n	1c408 <lll_conn_isr_rx+0x304>
					mic_state = LLL_CONN_MIC_FAIL;
   1c3d0:	4b0c      	ldr	r3, [pc, #48]	; (1c404 <lll_conn_isr_rx+0x300>)
   1c3d2:	2202      	movs	r2, #2
   1c3d4:	701a      	strb	r2, [r3, #0]
	is_rx_enqueue = 0U;
   1c3d6:	2700      	movs	r7, #0
   1c3d8:	e6eb      	b.n	1c1b2 <lll_conn_isr_rx+0xae>
   1c3da:	bf00      	nop
   1c3dc:	0001bd29 	.word	0x0001bd29
   1c3e0:	2000ed7a 	.word	0x2000ed7a
   1c3e4:	2000f31c 	.word	0x2000f31c
   1c3e8:	0001bf0d 	.word	0x0001bf0d
   1c3ec:	00028f64 	.word	0x00028f64
   1c3f0:	00028fb0 	.word	0x00028fb0
   1c3f4:	00028404 	.word	0x00028404
   1c3f8:	2000f31d 	.word	0x2000f31d
   1c3fc:	00028f28 	.word	0x00028f28
   1c400:	00028fc0 	.word	0x00028fc0
   1c404:	2000f31e 	.word	0x2000f31e
						radio_pkt_scratch_get();
   1c408:	f000 fb78 	bl	1cafc <radio_pkt_scratch_get>
					if (ctrl_pdu_len_check(
   1c40c:	7843      	ldrb	r3, [r0, #1]
   1c40e:	2b1b      	cmp	r3, #27
						radio_pkt_scratch_get();
   1c410:	4601      	mov	r1, r0
					if (ctrl_pdu_len_check(
   1c412:	d8dd      	bhi.n	1c3d0 <lll_conn_isr_rx+0x2cc>
						memcpy(pdu_data_rx,
   1c414:	3303      	adds	r3, #3
   1c416:	b2da      	uxtb	r2, r3
   1c418:	f106 001c 	add.w	r0, r6, #28
   1c41c:	f008 f824 	bl	24468 <memcpy>
						lll->ccm_rx.counter--;
   1c420:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
   1c424:	f8d4 2077 	ldr.w	r2, [r4, #119]	; 0x77
   1c428:	3b01      	subs	r3, #1
   1c42a:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1c42e:	f142 33ff 	adc.w	r3, r2, #4294967295
   1c432:	f8c4 3077 	str.w	r3, [r4, #119]	; 0x77
				lll->ccm_rx.counter++;
   1c436:	f8d4 3073 	ldr.w	r3, [r4, #115]	; 0x73
				mic_state = LLL_CONN_MIC_PASS;
   1c43a:	4a0f      	ldr	r2, [pc, #60]	; (1c478 <lll_conn_isr_rx+0x374>)
				lll->ccm_rx.counter++;
   1c43c:	3301      	adds	r3, #1
   1c43e:	f8c4 3073 	str.w	r3, [r4, #115]	; 0x73
   1c442:	f8d4 3077 	ldr.w	r3, [r4, #119]	; 0x77
						lll->ccm_rx.counter--;
   1c446:	f104 0173 	add.w	r1, r4, #115	; 0x73
				lll->ccm_rx.counter++;
   1c44a:	f143 0300 	adc.w	r3, r3, #0
				mic_state = LLL_CONN_MIC_PASS;
   1c44e:	2701      	movs	r7, #1
				lll->ccm_rx.counter++;
   1c450:	604b      	str	r3, [r1, #4]
				mic_state = LLL_CONN_MIC_PASS;
   1c452:	7017      	strb	r7, [r2, #0]
		if (err) {
   1c454:	e74f      	b.n	1c2f6 <lll_conn_isr_rx+0x1f2>
				LL_ASSERT(done);
   1c456:	4a09      	ldr	r2, [pc, #36]	; (1c47c <lll_conn_isr_rx+0x378>)
   1c458:	4909      	ldr	r1, [pc, #36]	; (1c480 <lll_conn_isr_rx+0x37c>)
   1c45a:	480a      	ldr	r0, [pc, #40]	; (1c484 <lll_conn_isr_rx+0x380>)
   1c45c:	f44f 7344 	mov.w	r3, #784	; 0x310
   1c460:	f005 fb60 	bl	21b24 <printk>
   1c464:	4040      	eors	r0, r0
   1c466:	f380 8811 	msr	BASEPRI, r0
   1c46a:	f04f 0003 	mov.w	r0, #3
   1c46e:	df02      	svc	2
   1c470:	e79f      	b.n	1c3b2 <lll_conn_isr_rx+0x2ae>
	is_rx_enqueue = 0U;
   1c472:	462f      	mov	r7, r5
   1c474:	e677      	b.n	1c166 <lll_conn_isr_rx+0x62>
   1c476:	bf00      	nop
   1c478:	2000f31e 	.word	0x2000f31e
   1c47c:	00028f64 	.word	0x00028f64
   1c480:	00028fb8 	.word	0x00028fb8
   1c484:	00028404 	.word	0x00028404

0001c488 <prepare_cb>:
{
	return 0;
}

static int prepare_cb(struct lll_prepare_param *p)
{
   1c488:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t remainder;
	uint32_t hcto;

	DEBUG_RADIO_START_S(1);

	lll = p->param;
   1c48c:	68c4      	ldr	r4, [r0, #12]

	/* Check if stopped (on disconnection between prepare and pre-empt)
	 */
	if (unlikely(lll->handle == 0xFFFF)) {
   1c48e:	8a22      	ldrh	r2, [r4, #16]
   1c490:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1c494:	429a      	cmp	r2, r3
{
   1c496:	b082      	sub	sp, #8
	if (unlikely(lll->handle == 0xFFFF)) {
   1c498:	f000 80c3 	beq.w	1c622 <prepare_cb+0x19a>
		DEBUG_RADIO_CLOSE_S(0);
		return 0;
	}

	/* Reset connection event global variables */
	lll_conn_prepare_reset();
   1c49c:	4605      	mov	r5, r0
   1c49e:	f7ff fcab 	bl	1bdf8 <lll_conn_prepare_reset>

	/* Deduce the latency */
	lll->latency_event = lll->latency_prepare - 1;
   1c4a2:	8ae3      	ldrh	r3, [r4, #22]

	/* Calculate the current event counter value */
	event_counter = lll->event_counter + lll->latency_event;
   1c4a4:	8b60      	ldrh	r0, [r4, #26]
	lll->latency_event = lll->latency_prepare - 1;
   1c4a6:	1e5a      	subs	r2, r3, #1

	/* Update event counter to next value */
	lll->event_counter = lll->event_counter + lll->latency_prepare;
   1c4a8:	4403      	add	r3, r0
   1c4aa:	8363      	strh	r3, [r4, #26]

	/* Reset accumulated latencies */
	lll->latency_prepare = 0;
   1c4ac:	2300      	movs	r3, #0
   1c4ae:	82e3      	strh	r3, [r4, #22]

	if (lll->data_chan_sel) {
   1c4b0:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
	lll->latency_event = lll->latency_prepare - 1;
   1c4b4:	b292      	uxth	r2, r2
	if (lll->data_chan_sel) {
   1c4b6:	0659      	lsls	r1, r3, #25
	lll->latency_event = lll->latency_prepare - 1;
   1c4b8:	8322      	strh	r2, [r4, #24]
	if (lll->data_chan_sel) {
   1c4ba:	f100 808f 	bmi.w	1c5dc <prepare_cb+0x154>
#else /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
		data_chan_use = 0;
		LL_ASSERT(0);
#endif /* !CONFIG_BT_CTLR_CHAN_SEL_2 */
	} else {
		data_chan_use = lll_chan_sel_1(&lll->data_chan_use,
   1c4be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c4c2:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
   1c4c6:	9300      	str	r3, [sp, #0]
   1c4c8:	f104 0023 	add.w	r0, r4, #35	; 0x23
   1c4cc:	f104 031c 	add.w	r3, r4, #28
   1c4d0:	f7fd f9e0 	bl	19894 <lll_chan_sel_1>
   1c4d4:	4607      	mov	r7, r0
					       &lll->data_chan_map[0],
					       lll->data_chan_count);
	}

	/* current window widening */
	lll->slave.window_widening_event_us +=
   1c4d6:	e9d4 230c 	ldrd	r2, r3, [r4, #48]	; 0x30
   1c4da:	441a      	add	r2, r3
		lll->slave.window_widening_event_us =
			lll->slave.window_widening_max_us;
	}

	/* current window size */
	lll->slave.window_size_event_us +=
   1c4dc:	e9d4 130e 	ldrd	r1, r3, [r4, #56]	; 0x38
	lll->slave.window_widening_prepare_us = 0;
   1c4e0:	2600      	movs	r6, #0
	lll->slave.window_size_event_us +=
   1c4e2:	440b      	add	r3, r1
		lll->slave.window_size_prepare_us;
	lll->slave.window_size_prepare_us = 0;
   1c4e4:	e9c4 630e 	strd	r6, r3, [r4, #56]	; 0x38
	    lll->slave.window_widening_max_us) {
   1c4e8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
	lll->slave.window_widening_prepare_us = 0;
   1c4ea:	6326      	str	r6, [r4, #48]	; 0x30
		lll->slave.window_widening_event_us =
   1c4ec:	4293      	cmp	r3, r2
   1c4ee:	bf28      	it	cs
   1c4f0:	4613      	movcs	r3, r2
   1c4f2:	6363      	str	r3, [r4, #52]	; 0x34

	/* Start setting up Radio h/w */
	radio_reset();
   1c4f4:	f000 f9f6 	bl	1c8e4 <radio_reset>
#if defined(CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL)
	radio_tx_power_set(lll->tx_pwr_lvl);
#else
	radio_tx_power_set(RADIO_TXP_DEFAULT);
   1c4f8:	4630      	mov	r0, r6
   1c4fa:	f000 fa27 	bl	1c94c <radio_tx_power_set>
#endif /* CONFIG_BT_CTLR_TX_PWR_DYNAMIC_CONTROL */

	lll_conn_rx_pkt_set(lll);
   1c4fe:	4620      	mov	r0, r4
   1c500:	f7ff fcba 	bl	1be78 <lll_conn_rx_pkt_set>

	radio_aa_set(lll->access_addr);
   1c504:	f104 0008 	add.w	r0, r4, #8
   1c508:	f000 fa3e 	bl	1c988 <radio_aa_set>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
			    (((uint32_t)lll->crc_init[2] << 16) |
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c50c:	7b63      	ldrb	r3, [r4, #13]
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c50e:	7ba1      	ldrb	r1, [r4, #14]
			     ((uint32_t)lll->crc_init[1] << 8) |
   1c510:	021b      	lsls	r3, r3, #8
			    (((uint32_t)lll->crc_init[2] << 16) |
   1c512:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((uint32_t)lll->crc_init[0])));
   1c516:	7b21      	ldrb	r1, [r4, #12]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   1c518:	f240 605b 	movw	r0, #1627	; 0x65b
   1c51c:	4319      	orrs	r1, r3
   1c51e:	f000 fad3 	bl	1cac8 <radio_crc_configure>

	lll_chan_set(data_chan_use);
   1c522:	4638      	mov	r0, r7
   1c524:	f7fe fda4 	bl	1b070 <lll_chan_set>

	radio_isr_set(lll_conn_isr_rx, lll);
   1c528:	4621      	mov	r1, r4
   1c52a:	484a      	ldr	r0, [pc, #296]	; (1c654 <prepare_cb+0x1cc>)
   1c52c:	f000 f998 	bl	1c860 <radio_isr_set>

	radio_tmr_tifs_set(EVENT_IFS_US);
   1c530:	2096      	movs	r0, #150	; 0x96
   1c532:	f000 fc01 	bl	1cd38 <radio_tmr_tifs_set>

#if defined(CONFIG_BT_CTLR_PHY)
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
				     lll->phy_flags);
   1c536:	f894 2048 	ldrb.w	r2, [r4, #72]	; 0x48
	radio_switch_complete_and_tx(lll->phy_rx, 0, lll->phy_tx,
   1c53a:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c53e:	f3c2 03c0 	ubfx	r3, r2, #3, #1
   1c542:	4631      	mov	r1, r6
   1c544:	f002 0207 	and.w	r2, r2, #7
   1c548:	f000 0007 	and.w	r0, r0, #7
   1c54c:	f000 fb22 	bl	1cb94 <radio_switch_complete_and_tx>
#else /* !CONFIG_BT_CTLR_PHY */
	radio_switch_complete_and_tx(0, 0, 0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	ticks_at_event = p->ticks_at_expire;
	evt = HDR_LLL2EVT(lll);
   1c550:	f8d4 8000 	ldr.w	r8, [r4]
	ticks_at_event = p->ticks_at_expire;
   1c554:	682f      	ldr	r7, [r5, #0]
	ticks_at_event += lll_evt_offset_get(evt);
   1c556:	4640      	mov	r0, r8
   1c558:	f7fe fd6e 	bl	1b038 <lll_evt_offset_get>
   1c55c:	4407      	add	r7, r0

	ticks_at_start = ticks_at_event;
	ticks_at_start += HAL_TICKER_US_TO_TICKS(EVENT_OVERHEAD_START_US);

	remainder = p->remainder;
	remainder_us = radio_tmr_start(0, ticks_at_start, remainder);
   1c55e:	686a      	ldr	r2, [r5, #4]
   1c560:	f107 0109 	add.w	r1, r7, #9
   1c564:	4630      	mov	r0, r6
   1c566:	f000 fbf3 	bl	1cd50 <radio_tmr_start>
   1c56a:	4605      	mov	r5, r0

	radio_tmr_aa_capture();
   1c56c:	f000 fc92 	bl	1ce94 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   1c570:	4630      	mov	r0, r6
   1c572:	f000 fca9 	bl	1cec8 <radio_tmr_aa_save>

	hcto = remainder_us +
	       ((EVENT_JITTER_US + EVENT_TICKER_RES_MARGIN_US +
   1c576:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1c578:	f103 0030 	add.w	r0, r3, #48	; 0x30
	hcto = remainder_us +
   1c57c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   1c57e:	eb03 0340 	add.w	r3, r3, r0, lsl #1
		 lll->slave.window_widening_event_us) << 1) +
	       lll->slave.window_size_event_us;

#if defined(CONFIG_BT_CTLR_PHY)
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c582:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c586:	2101      	movs	r1, #1
   1c588:	f000 0007 	and.w	r0, r0, #7
	hcto = remainder_us +
   1c58c:	441d      	add	r5, r3
	hcto += radio_rx_ready_delay_get(lll->phy_rx, 1);
   1c58e:	f000 fa4f 	bl	1ca30 <radio_rx_ready_delay_get>
   1c592:	4405      	add	r5, r0
	hcto += addr_us_get(lll->phy_rx);
   1c594:	f894 0049 	ldrb.w	r0, [r4, #73]	; 0x49
   1c598:	f000 0007 	and.w	r0, r0, #7
   1c59c:	2802      	cmp	r0, #2
   1c59e:	d03e      	beq.n	1c61e <prepare_cb+0x196>
		return 40;
   1c5a0:	2804      	cmp	r0, #4
   1c5a2:	bf0c      	ite	eq
   1c5a4:	f44f 73bc 	moveq.w	r3, #376	; 0x178
   1c5a8:	2328      	movne	r3, #40	; 0x28
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c5aa:	2101      	movs	r1, #1
	hcto += addr_us_get(lll->phy_rx);
   1c5ac:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(lll->phy_rx, 1);
   1c5ae:	f000 fa41 	bl	1ca34 <radio_rx_chain_delay_get>
	hcto += radio_rx_ready_delay_get(0, 0);
	hcto += addr_us_get(0);
	hcto += radio_rx_chain_delay_get(0, 0);
#endif /* !CONFIG_BT_CTLR_PHY */

	radio_tmr_hcto_configure(hcto);
   1c5b2:	4428      	add	r0, r5
   1c5b4:	f000 fc60 	bl	1ce78 <radio_tmr_hcto_configure>
#endif /* CONFIG_BT_CTLR_CONN_RSSI */

#if defined(CONFIG_BT_CTLR_XTAL_ADVANCED) && \
	(EVENT_OVERHEAD_PREEMPT_US <= EVENT_OVERHEAD_PREEMPT_MIN_US)
	/* check if preempt to start has changed */
	if (lll_preempt_calc(evt, (TICKER_ID_CONN_BASE + lll->handle),
   1c5b8:	8a21      	ldrh	r1, [r4, #16]
   1c5ba:	3103      	adds	r1, #3
   1c5bc:	463a      	mov	r2, r7
   1c5be:	b2c9      	uxtb	r1, r1
   1c5c0:	4640      	mov	r0, r8
   1c5c2:	f7fe fd43 	bl	1b04c <lll_preempt_calc>
   1c5c6:	b1a0      	cbz	r0, 1c5f2 <prepare_cb+0x16a>
			     ticks_at_event)) {
		radio_isr_set(lll_isr_abort, lll);
   1c5c8:	4823      	ldr	r0, [pc, #140]	; (1c658 <prepare_cb+0x1d0>)
   1c5ca:	4621      	mov	r1, r4
   1c5cc:	f000 f948 	bl	1c860 <radio_isr_set>
		radio_disable();
   1c5d0:	f000 fa3c 	bl	1ca4c <radio_disable>
	}

	DEBUG_RADIO_START_S(1);

	return 0;
}
   1c5d4:	2000      	movs	r0, #0
   1c5d6:	b002      	add	sp, #8
   1c5d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	event_counter = lll->event_counter + lll->latency_event;
   1c5dc:	4410      	add	r0, r2
		data_chan_use = lll_chan_sel_2(event_counter, lll->data_chan_id,
   1c5de:	8c61      	ldrh	r1, [r4, #34]	; 0x22
   1c5e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c5e4:	f104 021c 	add.w	r2, r4, #28
   1c5e8:	b280      	uxth	r0, r0
   1c5ea:	f7fd f993 	bl	19914 <lll_chan_sel_2>
   1c5ee:	4607      	mov	r7, r0
   1c5f0:	e771      	b.n	1c4d6 <prepare_cb+0x4e>
		ret = lll_prepare_done(lll);
   1c5f2:	4620      	mov	r0, r4
   1c5f4:	f7fe fcc6 	bl	1af84 <lll_prepare_done>
		LL_ASSERT(!ret);
   1c5f8:	2800      	cmp	r0, #0
   1c5fa:	d0eb      	beq.n	1c5d4 <prepare_cb+0x14c>
   1c5fc:	4a17      	ldr	r2, [pc, #92]	; (1c65c <prepare_cb+0x1d4>)
   1c5fe:	4918      	ldr	r1, [pc, #96]	; (1c660 <prepare_cb+0x1d8>)
   1c600:	4818      	ldr	r0, [pc, #96]	; (1c664 <prepare_cb+0x1dc>)
   1c602:	f240 1313 	movw	r3, #275	; 0x113
   1c606:	f005 fa8d 	bl	21b24 <printk>
   1c60a:	4040      	eors	r0, r0
   1c60c:	f380 8811 	msr	BASEPRI, r0
   1c610:	f04f 0003 	mov.w	r0, #3
   1c614:	df02      	svc	2
}
   1c616:	2000      	movs	r0, #0
   1c618:	b002      	add	sp, #8
   1c61a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	switch (phy) {
   1c61e:	2318      	movs	r3, #24
   1c620:	e7c3      	b.n	1c5aa <prepare_cb+0x122>
		err = lll_hfclock_off();
   1c622:	f7fe fe43 	bl	1b2ac <lll_hfclock_off>
		LL_ASSERT(err >= 0);
   1c626:	2800      	cmp	r0, #0
   1c628:	db06      	blt.n	1c638 <prepare_cb+0x1b0>
		lll_done(NULL);
   1c62a:	2000      	movs	r0, #0
   1c62c:	f7fe fcac 	bl	1af88 <lll_done>
}
   1c630:	2000      	movs	r0, #0
   1c632:	b002      	add	sp, #8
   1c634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		LL_ASSERT(err >= 0);
   1c638:	4a08      	ldr	r2, [pc, #32]	; (1c65c <prepare_cb+0x1d4>)
   1c63a:	490b      	ldr	r1, [pc, #44]	; (1c668 <prepare_cb+0x1e0>)
   1c63c:	4809      	ldr	r0, [pc, #36]	; (1c664 <prepare_cb+0x1dc>)
   1c63e:	237d      	movs	r3, #125	; 0x7d
   1c640:	f005 fa70 	bl	21b24 <printk>
   1c644:	4040      	eors	r0, r0
   1c646:	f380 8811 	msr	BASEPRI, r0
   1c64a:	f04f 0003 	mov.w	r0, #3
   1c64e:	df02      	svc	2
   1c650:	e7eb      	b.n	1c62a <prepare_cb+0x1a2>
   1c652:	bf00      	nop
   1c654:	0001c105 	.word	0x0001c105
   1c658:	0001b1a5 	.word	0x0001b1a5
   1c65c:	00028fec 	.word	0x00028fec
   1c660:	000286a0 	.word	0x000286a0
   1c664:	00028404 	.word	0x00028404
   1c668:	00028ea0 	.word	0x00028ea0

0001c66c <lll_slave_prepare>:
{
   1c66c:	b510      	push	{r4, lr}
   1c66e:	b082      	sub	sp, #8
   1c670:	4604      	mov	r4, r0
	err = lll_hfclock_on();
   1c672:	f7fe fe03 	bl	1b27c <lll_hfclock_on>
	LL_ASSERT(err >= 0);
   1c676:	2800      	cmp	r0, #0
   1c678:	db2a      	blt.n	1c6d0 <lll_slave_prepare+0x64>
	lll = p->param;
   1c67a:	68e1      	ldr	r1, [r4, #12]
	elapsed = p->lazy + 1;
   1c67c:	8923      	ldrh	r3, [r4, #8]
	lll->slave.window_widening_prepare_us +=
   1c67e:	6b0a      	ldr	r2, [r1, #48]	; 0x30
	lll->latency_prepare += elapsed;
   1c680:	f8b1 c016 	ldrh.w	ip, [r1, #22]
	    lll->slave.window_widening_periodic_us * elapsed;
   1c684:	6a88      	ldr	r0, [r1, #40]	; 0x28
	elapsed = p->lazy + 1;
   1c686:	3301      	adds	r3, #1
   1c688:	b29b      	uxth	r3, r3
	lll->slave.window_widening_prepare_us +=
   1c68a:	fb00 2003 	mla	r0, r0, r3, r2
	lll->latency_prepare += elapsed;
   1c68e:	4463      	add	r3, ip
   1c690:	82cb      	strh	r3, [r1, #22]
	    lll->slave.window_widening_max_us) {
   1c692:	6acb      	ldr	r3, [r1, #44]	; 0x2c
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c694:	4a15      	ldr	r2, [pc, #84]	; (1c6ec <lll_slave_prepare+0x80>)
		lll->slave.window_widening_prepare_us =
   1c696:	4283      	cmp	r3, r0
   1c698:	bf28      	it	cs
   1c69a:	4603      	movcs	r3, r0
   1c69c:	630b      	str	r3, [r1, #48]	; 0x30
	err = lll_prepare(lll_is_abort_cb, lll_conn_abort_cb, prepare_cb, 0, p);
   1c69e:	4814      	ldr	r0, [pc, #80]	; (1c6f0 <lll_slave_prepare+0x84>)
   1c6a0:	4914      	ldr	r1, [pc, #80]	; (1c6f4 <lll_slave_prepare+0x88>)
   1c6a2:	9400      	str	r4, [sp, #0]
   1c6a4:	2300      	movs	r3, #0
   1c6a6:	f7fe fbe1 	bl	1ae6c <lll_prepare>
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c6aa:	b108      	cbz	r0, 1c6b0 <lll_slave_prepare+0x44>
   1c6ac:	3044      	adds	r0, #68	; 0x44
   1c6ae:	d101      	bne.n	1c6b4 <lll_slave_prepare+0x48>
}
   1c6b0:	b002      	add	sp, #8
   1c6b2:	bd10      	pop	{r4, pc}
	LL_ASSERT(!err || err == -EINPROGRESS);
   1c6b4:	4a10      	ldr	r2, [pc, #64]	; (1c6f8 <lll_slave_prepare+0x8c>)
   1c6b6:	4911      	ldr	r1, [pc, #68]	; (1c6fc <lll_slave_prepare+0x90>)
   1c6b8:	4811      	ldr	r0, [pc, #68]	; (1c700 <lll_slave_prepare+0x94>)
   1c6ba:	235f      	movs	r3, #95	; 0x5f
   1c6bc:	f005 fa32 	bl	21b24 <printk>
   1c6c0:	4040      	eors	r0, r0
   1c6c2:	f380 8811 	msr	BASEPRI, r0
   1c6c6:	f04f 0003 	mov.w	r0, #3
   1c6ca:	df02      	svc	2
}
   1c6cc:	b002      	add	sp, #8
   1c6ce:	bd10      	pop	{r4, pc}
	LL_ASSERT(err >= 0);
   1c6d0:	4a09      	ldr	r2, [pc, #36]	; (1c6f8 <lll_slave_prepare+0x8c>)
   1c6d2:	490c      	ldr	r1, [pc, #48]	; (1c704 <lll_slave_prepare+0x98>)
   1c6d4:	480a      	ldr	r0, [pc, #40]	; (1c700 <lll_slave_prepare+0x94>)
   1c6d6:	2348      	movs	r3, #72	; 0x48
   1c6d8:	f005 fa24 	bl	21b24 <printk>
   1c6dc:	4040      	eors	r0, r0
   1c6de:	f380 8811 	msr	BASEPRI, r0
   1c6e2:	f04f 0003 	mov.w	r0, #3
   1c6e6:	df02      	svc	2
   1c6e8:	e7c7      	b.n	1c67a <lll_slave_prepare+0xe>
   1c6ea:	bf00      	nop
   1c6ec:	0001c489 	.word	0x0001c489
   1c6f0:	0001b031 	.word	0x0001b031
   1c6f4:	0001be21 	.word	0x0001be21
   1c6f8:	00028fec 	.word	0x00028fec
   1c6fc:	00028f40 	.word	0x00028f40
   1c700:	00028404 	.word	0x00028404
   1c704:	00028ea0 	.word	0x00028ea0

0001c708 <cntr_init>:

static uint8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
   1c708:	4b05      	ldr	r3, [pc, #20]	; (1c720 <cntr_init+0x18>)
    p_reg->EVTENSET = mask;
   1c70a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
   1c70e:	2100      	movs	r1, #0
   1c710:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   1c714:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
    p_reg->INTENSET = mask;
   1c718:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	nrf_rtc_event_enable(NRF_RTC, RTC_EVTENSET_COMPARE0_Msk);
	nrf_rtc_int_enable(NRF_RTC, RTC_INTENSET_COMPARE0_Msk);
}
   1c71c:	4770      	bx	lr
   1c71e:	bf00      	nop
   1c720:	4000b000 	.word	0x4000b000

0001c724 <cntr_start>:

uint32_t cntr_start(void)
{
	if (_refcount++) {
   1c724:	4b05      	ldr	r3, [pc, #20]	; (1c73c <cntr_start+0x18>)
   1c726:	7818      	ldrb	r0, [r3, #0]
   1c728:	1c42      	adds	r2, r0, #1
   1c72a:	701a      	strb	r2, [r3, #0]
   1c72c:	b918      	cbnz	r0, 1c736 <cntr_start+0x12>
    *(__IO uint32_t *)((uint32_t)p_reg + task) = 1;
   1c72e:	4b04      	ldr	r3, [pc, #16]	; (1c740 <cntr_start+0x1c>)
   1c730:	2201      	movs	r2, #1
   1c732:	601a      	str	r2, [r3, #0]
		return 1;
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_START);

	return 0;
   1c734:	4770      	bx	lr
		return 1;
   1c736:	2001      	movs	r0, #1
}
   1c738:	4770      	bx	lr
   1c73a:	bf00      	nop
   1c73c:	2000f31f 	.word	0x2000f31f
   1c740:	4000b000 	.word	0x4000b000

0001c744 <cntr_stop>:

uint32_t cntr_stop(void)
{
   1c744:	b510      	push	{r4, lr}
	LL_ASSERT(_refcount);
   1c746:	4c0d      	ldr	r4, [pc, #52]	; (1c77c <cntr_stop+0x38>)
   1c748:	7820      	ldrb	r0, [r4, #0]
   1c74a:	b148      	cbz	r0, 1c760 <cntr_stop+0x1c>

	if (--_refcount) {
   1c74c:	3801      	subs	r0, #1
   1c74e:	b2c0      	uxtb	r0, r0
   1c750:	7020      	strb	r0, [r4, #0]
   1c752:	b918      	cbnz	r0, 1c75c <cntr_stop+0x18>
   1c754:	4b0a      	ldr	r3, [pc, #40]	; (1c780 <cntr_stop+0x3c>)
   1c756:	2201      	movs	r2, #1
   1c758:	605a      	str	r2, [r3, #4]
	}

	nrf_rtc_task_trigger(NRF_RTC, NRF_RTC_TASK_STOP);

	return 0;
}
   1c75a:	bd10      	pop	{r4, pc}
		return 1;
   1c75c:	2001      	movs	r0, #1
}
   1c75e:	bd10      	pop	{r4, pc}
	LL_ASSERT(_refcount);
   1c760:	4a08      	ldr	r2, [pc, #32]	; (1c784 <cntr_stop+0x40>)
   1c762:	4909      	ldr	r1, [pc, #36]	; (1c788 <cntr_stop+0x44>)
   1c764:	4809      	ldr	r0, [pc, #36]	; (1c78c <cntr_stop+0x48>)
   1c766:	232d      	movs	r3, #45	; 0x2d
   1c768:	f005 f9dc 	bl	21b24 <printk>
   1c76c:	4040      	eors	r0, r0
   1c76e:	f380 8811 	msr	BASEPRI, r0
   1c772:	f04f 0003 	mov.w	r0, #3
   1c776:	df02      	svc	2
	if (--_refcount) {
   1c778:	7820      	ldrb	r0, [r4, #0]
   1c77a:	e7e7      	b.n	1c74c <cntr_stop+0x8>
   1c77c:	2000f31f 	.word	0x2000f31f
   1c780:	4000b000 	.word	0x4000b000
   1c784:	0002904c 	.word	0x0002904c
   1c788:	00029098 	.word	0x00029098
   1c78c:	00028404 	.word	0x00028404

0001c790 <cntr_cnt_get>:
     return p_reg->COUNTER;
   1c790:	4b01      	ldr	r3, [pc, #4]	; (1c798 <cntr_cnt_get+0x8>)
   1c792:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504

uint32_t cntr_cnt_get(void)
{
	return nrf_rtc_counter_get(NRF_RTC);
}
   1c796:	4770      	bx	lr
   1c798:	4000b000 	.word	0x4000b000

0001c79c <cntr_cmp_set>:
    p_reg->CC[ch] = cc_val;
   1c79c:	4b02      	ldr	r3, [pc, #8]	; (1c7a8 <cntr_cmp_set+0xc>)
   1c79e:	f500 70a8 	add.w	r0, r0, #336	; 0x150
   1c7a2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]

void cntr_cmp_set(uint8_t cmp, uint32_t value)
{
	nrf_rtc_cc_set(NRF_RTC, cmp, value);
}
   1c7a6:	4770      	bx	lr
   1c7a8:	4000b000 	.word	0x4000b000

0001c7ac <do_ecb>:

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ecb_task_trigger(NRF_ECB_Type * p_reg, nrf_ecb_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c7ac:	4b12      	ldr	r3, [pc, #72]	; (1c7f8 <do_ecb+0x4c>)
	uint8_t clear_text[16];
	uint8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
   1c7ae:	b430      	push	{r4, r5}
   1c7b0:	2101      	movs	r1, #1
   1c7b2:	4604      	mov	r4, r0
	do {
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
		NRF_ECB->EVENTS_ENDECB = 0;
   1c7b4:	2000      	movs	r0, #0
   1c7b6:	6059      	str	r1, [r3, #4]
		NRF_ECB->ECBDATAPTR = (uint32_t)ecb;
   1c7b8:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
   1c7bc:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
   1c7c0:	f8c3 0104 	str.w	r0, [r3, #260]	; 0x104
   1c7c4:	6019      	str	r1, [r3, #0]
}
   1c7c6:	e005      	b.n	1c7d4 <do_ecb+0x28>
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STARTECB);
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c7c8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c7cc:	b932      	cbnz	r2, 1c7dc <do_ecb+0x30>
		       (NRF_ECB->ECBDATAPTR != 0)) {
   1c7ce:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
   1c7d2:	b11a      	cbz	r2, 1c7dc <do_ecb+0x30>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
   1c7d4:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
   1c7d8:	2a00      	cmp	r2, #0
   1c7da:	d0f5      	beq.n	1c7c8 <do_ecb+0x1c>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1c7dc:	6059      	str	r1, [r3, #4]
#else
			/*__WFE();*/
#endif
		}
		nrf_ecb_task_trigger(NRF_ECB, NRF_ECB_TASK_STOPECB);
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
   1c7de:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
   1c7e2:	2a00      	cmp	r2, #0
   1c7e4:	d1e7      	bne.n	1c7b6 <do_ecb+0xa>
   1c7e6:	f8d3 5504 	ldr.w	r5, [r3, #1284]	; 0x504
   1c7ea:	2d00      	cmp	r5, #0
   1c7ec:	d0e3      	beq.n	1c7b6 <do_ecb+0xa>

	NRF_ECB->ECBDATAPTR = 0;
}
   1c7ee:	bc30      	pop	{r4, r5}
	NRF_ECB->ECBDATAPTR = 0;
   1c7f0:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   1c7f4:	4770      	bx	lr
   1c7f6:	bf00      	nop
   1c7f8:	4000e000 	.word	0x4000e000

0001c7fc <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(uint8_t const *const key_le, uint8_t const *const clear_text_le,
		 uint8_t * const cipher_text_le, uint8_t * const cipher_text_be)
{
   1c7fc:	b570      	push	{r4, r5, r6, lr}
   1c7fe:	b08c      	sub	sp, #48	; 0x30
   1c800:	460e      	mov	r6, r1
   1c802:	4615      	mov	r5, r2
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c804:	4601      	mov	r1, r0
   1c806:	2210      	movs	r2, #16
   1c808:	4668      	mov	r0, sp
{
   1c80a:	461c      	mov	r4, r3
	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
   1c80c:	f7f3 ffc0 	bl	10790 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
   1c810:	2210      	movs	r2, #16
   1c812:	eb0d 0002 	add.w	r0, sp, r2
   1c816:	4631      	mov	r1, r6
   1c818:	f7f3 ffba 	bl	10790 <mem_rcopy>

	do_ecb(&ecb);
   1c81c:	4668      	mov	r0, sp
   1c81e:	f7ff ffc5 	bl	1c7ac <do_ecb>

	if (cipher_text_le) {
   1c822:	b125      	cbz	r5, 1c82e <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
   1c824:	2210      	movs	r2, #16
   1c826:	a908      	add	r1, sp, #32
   1c828:	4628      	mov	r0, r5
   1c82a:	f7f3 ffb1 	bl	10790 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
   1c82e:	b124      	cbz	r4, 1c83a <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
   1c830:	2210      	movs	r2, #16
   1c832:	a908      	add	r1, sp, #32
   1c834:	4620      	mov	r0, r4
   1c836:	f007 fe17 	bl	24468 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
   1c83a:	b00c      	add	sp, #48	; 0x30
   1c83c:	bd70      	pop	{r4, r5, r6, pc}
   1c83e:	bf00      	nop

0001c840 <isr_radio>:
}
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */

uint32_t radio_has_disabled(void)
{
	return (NRF_RADIO->EVENTS_DISABLED != 0);
   1c840:	4b04      	ldr	r3, [pc, #16]	; (1c854 <isr_radio+0x14>)
   1c842:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (radio_has_disabled()) {
   1c846:	b123      	cbz	r3, 1c852 <isr_radio+0x12>
		isr_cb(isr_cb_param);
   1c848:	4a03      	ldr	r2, [pc, #12]	; (1c858 <isr_radio+0x18>)
   1c84a:	4b04      	ldr	r3, [pc, #16]	; (1c85c <isr_radio+0x1c>)
   1c84c:	6810      	ldr	r0, [r2, #0]
   1c84e:	681b      	ldr	r3, [r3, #0]
   1c850:	4718      	bx	r3
}
   1c852:	4770      	bx	lr
   1c854:	40001000 	.word	0x40001000
   1c858:	2000eb2c 	.word	0x2000eb2c
   1c85c:	2000eb28 	.word	0x2000eb28

0001c860 <radio_isr_set>:
{
   1c860:	b538      	push	{r3, r4, r5, lr}
   1c862:	4604      	mov	r4, r0
	irq_disable(RADIO_IRQn);
   1c864:	2001      	movs	r0, #1
{
   1c866:	460d      	mov	r5, r1
	irq_disable(RADIO_IRQn);
   1c868:	f7ea ff80 	bl	776c <arch_irq_disable>
	isr_cb = cb;
   1c86c:	4b08      	ldr	r3, [pc, #32]	; (1c890 <radio_isr_set+0x30>)
	isr_cb_param = param;
   1c86e:	4a09      	ldr	r2, [pc, #36]	; (1c894 <radio_isr_set+0x34>)
	isr_cb = cb;
   1c870:	601c      	str	r4, [r3, #0]
    return p_reg->SHORTS;
}

NRF_STATIC_INLINE void nrf_radio_int_enable(NRF_RADIO_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1c872:	4909      	ldr	r1, [pc, #36]	; (1c898 <radio_isr_set+0x38>)
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1c874:	4b09      	ldr	r3, [pc, #36]	; (1c89c <radio_isr_set+0x3c>)
	isr_cb_param = param;
   1c876:	6015      	str	r5, [r2, #0]
   1c878:	2010      	movs	r0, #16
   1c87a:	2202      	movs	r2, #2
   1c87c:	f8c1 0304 	str.w	r0, [r1, #772]	; 0x304
   1c880:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(RADIO_IRQn);
   1c884:	2001      	movs	r0, #1
}
   1c886:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	irq_enable(RADIO_IRQn);
   1c88a:	f7ea bf5f 	b.w	774c <arch_irq_enable>
   1c88e:	bf00      	nop
   1c890:	2000eb28 	.word	0x2000eb28
   1c894:	2000eb2c 	.word	0x2000eb2c
   1c898:	40001000 	.word	0x40001000
   1c89c:	e000e100 	.word	0xe000e100

0001c8a0 <radio_setup>:
			uint32_t volatile PDM;
			uint32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c8a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1c8a4:	f04f 32ff 	mov.w	r2, #4294967295
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c8a8:	2100      	movs	r1, #0
	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
   1c8aa:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
   1c8ae:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
   1c8b2:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
   1c8b6:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
   1c8ba:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
   1c8be:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
   1c8c2:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
   1c8c6:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
   1c8ca:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
   1c8ce:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
   1c8d2:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
   1c8d6:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
   1c8da:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
   1c8de:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
}
   1c8e2:	4770      	bx	lr

0001c8e4 <radio_reset>:
{
   1c8e4:	b510      	push	{r4, lr}
	irq_disable(RADIO_IRQn);
   1c8e6:	2001      	movs	r0, #1
   1c8e8:	f7ea ff40 	bl	776c <arch_irq_disable>
}
#endif

NRF_STATIC_INLINE void nrf_radio_power_set(NRF_RADIO_Type * p_reg, bool radio_power)
{
    p_reg->POWER = (uint32_t) radio_power;
   1c8ec:	4a0d      	ldr	r2, [pc, #52]	; (1c924 <radio_reset+0x40>)
   1c8ee:	2100      	movs	r1, #0
   1c8f0:	2301      	movs	r3, #1
   1c8f2:	f8c2 1ffc 	str.w	r1, [r2, #4092]	; 0xffc
   1c8f6:	f8c2 3ffc 	str.w	r3, [r2, #4092]	; 0xffc
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c8fa:	f8d2 3774 	ldr.w	r3, [r2, #1908]	; 0x774
static inline void hal_radio_sw_switch_ppi_group_setup(void)
{
	/* Include the appropriate PPI channels in the two PPI Groups. */
#if !defined(CONFIG_BT_CTLR_PHY_CODED) || \
	!defined(CONFIG_HAS_HW_NRF_RADIO_BLE_CODED)
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c8fe:	490a      	ldr	r1, [pc, #40]	; (1c928 <radio_reset+0x44>)
					 0xfffffffe) | 0x01000000;
   1c900:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   1c904:	f023 0301 	bic.w	r3, r3, #1
   1c908:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
   1c90c:	f44f 5490 	mov.w	r4, #4608	; 0x1200
		BIT(HAL_SW_SWITCH_GROUP_TASK_DISABLE_PPI(0)) |
		BIT(HAL_SW_SWITCH_RADIO_ENABLE_PPI(0));
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c910:	f44f 5010 	mov.w	r0, #9216	; 0x2400
	*(volatile uint32_t *)0x40001774 = ((*(volatile uint32_t *)0x40001774) &
   1c914:	f8c2 3774 	str.w	r3, [r2, #1908]	; 0x774
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(0)] =
   1c918:	f8c1 4800 	str.w	r4, [r1, #2048]	; 0x800
	NRF_PPI->CHG[SW_SWITCH_TIMER_TASK_GROUP(1)] =
   1c91c:	f8c1 0804 	str.w	r0, [r1, #2052]	; 0x804
}
   1c920:	bd10      	pop	{r4, pc}
   1c922:	bf00      	nop
   1c924:	40001000 	.word	0x40001000
   1c928:	4001f000 	.word	0x4001f000

0001c92c <radio_phy_set>:
	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
   1c92c:	4b06      	ldr	r3, [pc, #24]	; (1c948 <radio_phy_set+0x1c>)
#endif /* CONFIG_BT_CTLR_PHY_CODED */

		break;

	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
   1c92e:	2802      	cmp	r0, #2
   1c930:	bf14      	ite	ne
   1c932:	2203      	movne	r2, #3
   1c934:	2204      	moveq	r2, #4
   1c936:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_RADIO->MODECNF0 |= (RADIO_MODECNF0_RU_Fast <<
   1c93a:	f8d3 2650 	ldr.w	r2, [r3, #1616]	; 0x650
   1c93e:	f042 0201 	orr.w	r2, r2, #1
   1c942:	f8c3 2650 	str.w	r2, [r3, #1616]	; 0x650
}
   1c946:	4770      	bx	lr
   1c948:	40001000 	.word	0x40001000

0001c94c <radio_tx_power_set>:
	NRF_RADIO->TXPOWER = (uint32_t)power;
   1c94c:	4b01      	ldr	r3, [pc, #4]	; (1c954 <radio_tx_power_set+0x8>)
   1c94e:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
}
   1c952:	4770      	bx	lr
   1c954:	40001000 	.word	0x40001000

0001c958 <radio_freq_chan_set>:
	NRF_RADIO->FREQUENCY = chan;
   1c958:	4b01      	ldr	r3, [pc, #4]	; (1c960 <radio_freq_chan_set+0x8>)
   1c95a:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
}
   1c95e:	4770      	bx	lr
   1c960:	40001000 	.word	0x40001000

0001c964 <radio_whiten_iv_set>:
	NRF_RADIO->DATAWHITEIV = iv;
   1c964:	4b07      	ldr	r3, [pc, #28]	; (1c984 <radio_whiten_iv_set+0x20>)
   1c966:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554
	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
   1c96a:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c96e:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
   1c972:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
   1c976:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
   1c97a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
   1c97e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
}
   1c982:	4770      	bx	lr
   1c984:	40001000 	.word	0x40001000

0001c988 <radio_aa_set>:
	NRF_RADIO->TXADDRESS =
   1c988:	4a0a      	ldr	r2, [pc, #40]	; (1c9b4 <radio_aa_set+0x2c>)
   1c98a:	2100      	movs	r1, #0
	NRF_RADIO->RXADDRESSES =
   1c98c:	2301      	movs	r3, #1
	NRF_RADIO->TXADDRESS =
   1c98e:	f8c2 152c 	str.w	r1, [r2, #1324]	; 0x52c
	NRF_RADIO->RXADDRESSES =
   1c992:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	NRF_RADIO->PREFIX0 = aa[3];
   1c996:	78c3      	ldrb	r3, [r0, #3]
   1c998:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
   1c99c:	7843      	ldrb	r3, [r0, #1]
   1c99e:	f890 c002 	ldrb.w	ip, [r0, #2]
   1c9a2:	7801      	ldrb	r1, [r0, #0]
   1c9a4:	041b      	lsls	r3, r3, #16
   1c9a6:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
   1c9aa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   1c9ae:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
}
   1c9b2:	4770      	bx	lr
   1c9b4:	40001000 	.word	0x40001000

0001c9b8 <radio_pkt_configure>:
	switch (phy) {
   1c9b8:	f3c2 0342 	ubfx	r3, r2, #1, #3
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
   1c9bc:	2b02      	cmp	r3, #2
   1c9be:	bf14      	ite	ne
   1c9c0:	f04f 0c00 	movne.w	ip, #0
   1c9c4:	f04f 7c80 	moveq.w	ip, #16777216	; 0x1000000
	if (dc) {
   1c9c8:	07d3      	lsls	r3, r2, #31
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c9ca:	f1c0 0308 	rsb	r3, r0, #8
		extra |= (RADIO_PCNF0_S1INCL_Include <<
   1c9ce:	bf48      	it	mi
   1c9d0:	f44c 1c80 	orrmi.w	ip, ip, #1048576	; 0x100000
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c9d4:	041b      	lsls	r3, r3, #16
			   ((((uint32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
   1c9d6:	f000 000f 	and.w	r0, r0, #15
			    RADIO_PCNF0_S1LEN_Msk) |
   1c9da:	ea40 000c 	orr.w	r0, r0, ip
			   ((((uint32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
   1c9de:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c9e2:	4a0a      	ldr	r2, [pc, #40]	; (1ca0c <radio_pkt_configure+0x54>)
			    RADIO_PCNF0_S1LEN_Msk) |
   1c9e4:	4303      	orrs	r3, r0
   1c9e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
   1c9ea:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
   1c9ee:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
   1c9f2:	4b07      	ldr	r3, [pc, #28]	; (1ca10 <radio_pkt_configure+0x58>)
   1c9f4:	4003      	ands	r3, r0
   1c9f6:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((((uint32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
   1c9fa:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
   1c9fe:	4319      	orrs	r1, r3
   1ca00:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
   1ca04:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
}
   1ca08:	4770      	bx	lr
   1ca0a:	bf00      	nop
   1ca0c:	40001000 	.word	0x40001000
   1ca10:	fef80000 	.word	0xfef80000

0001ca14 <radio_pkt_rx_set>:
	NRF_RADIO->PACKETPTR = (uint32_t)rx_packet;
   1ca14:	4b01      	ldr	r3, [pc, #4]	; (1ca1c <radio_pkt_rx_set+0x8>)
   1ca16:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
}
   1ca1a:	4770      	bx	lr
   1ca1c:	40001000 	.word	0x40001000

0001ca20 <radio_pkt_tx_set>:
   1ca20:	4b01      	ldr	r3, [pc, #4]	; (1ca28 <radio_pkt_tx_set+0x8>)
   1ca22:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
   1ca26:	4770      	bx	lr
   1ca28:	40001000 	.word	0x40001000

0001ca2c <radio_tx_chain_delay_get>:
}
   1ca2c:	2001      	movs	r0, #1
   1ca2e:	4770      	bx	lr

0001ca30 <radio_rx_ready_delay_get>:
}
   1ca30:	2029      	movs	r0, #41	; 0x29
   1ca32:	4770      	bx	lr

0001ca34 <radio_rx_chain_delay_get>:
	switch (phy) {
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_US;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_US;
   1ca34:	2802      	cmp	r0, #2
}
   1ca36:	bf14      	ite	ne
   1ca38:	200a      	movne	r0, #10
   1ca3a:	2005      	moveq	r0, #5
   1ca3c:	4770      	bx	lr
   1ca3e:	bf00      	nop

0001ca40 <radio_tx_enable>:
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ca40:	4b01      	ldr	r3, [pc, #4]	; (1ca48 <radio_tx_enable+0x8>)
   1ca42:	2201      	movs	r2, #1
   1ca44:	601a      	str	r2, [r3, #0]
}
   1ca46:	4770      	bx	lr
   1ca48:	40001000 	.word	0x40001000

0001ca4c <radio_disable>:
    p_reg->CHENSET = mask;
}

NRF_STATIC_INLINE void nrf_ppi_channels_disable(NRF_PPI_Type * p_reg, uint32_t mask)
{
    p_reg->CHENCLR = mask;
   1ca4c:	4a07      	ldr	r2, [pc, #28]	; (1ca6c <radio_disable+0x20>)
	NRF_RADIO->SHORTS = 0;
   1ca4e:	4908      	ldr	r1, [pc, #32]	; (1ca70 <radio_disable+0x24>)
{
   1ca50:	b410      	push	{r4}
    p_reg->TASKS_CHG[(uint32_t) group].EN = 1UL;
}

NRF_STATIC_INLINE void nrf_ppi_group_disable(NRF_PPI_Type * p_reg, nrf_ppi_channel_group_t group)
{
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1ca52:	2301      	movs	r3, #1
    p_reg->CHENCLR = mask;
   1ca54:	f44f 6410 	mov.w	r4, #2304	; 0x900
	NRF_RADIO->SHORTS = 0;
   1ca58:	2000      	movs	r0, #0
   1ca5a:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
    p_reg->TASKS_CHG[(uint32_t) group].DIS = 1UL;
   1ca5e:	6053      	str	r3, [r2, #4]
}
   1ca60:	bc10      	pop	{r4}
   1ca62:	60d3      	str	r3, [r2, #12]
	NRF_RADIO->SHORTS = 0;
   1ca64:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1ca68:	610b      	str	r3, [r1, #16]
}
   1ca6a:	4770      	bx	lr
   1ca6c:	4001f000 	.word	0x4001f000
   1ca70:	40001000 	.word	0x40001000

0001ca74 <radio_status_reset>:
	NRF_RADIO->EVENTS_READY = 0;
   1ca74:	4b04      	ldr	r3, [pc, #16]	; (1ca88 <radio_status_reset+0x14>)
   1ca76:	2200      	movs	r2, #0
   1ca78:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_END = 0;
   1ca7c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
   1ca80:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
}
   1ca84:	4770      	bx	lr
   1ca86:	bf00      	nop
   1ca88:	40001000 	.word	0x40001000

0001ca8c <radio_is_ready>:
	return (NRF_RADIO->EVENTS_READY != 0);
   1ca8c:	4b03      	ldr	r3, [pc, #12]	; (1ca9c <radio_is_ready+0x10>)
   1ca8e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
   1ca92:	3800      	subs	r0, #0
   1ca94:	bf18      	it	ne
   1ca96:	2001      	movne	r0, #1
   1ca98:	4770      	bx	lr
   1ca9a:	bf00      	nop
   1ca9c:	40001000 	.word	0x40001000

0001caa0 <radio_is_done>:
	return (NRF_RADIO->EVENTS_END != 0);
   1caa0:	4b03      	ldr	r3, [pc, #12]	; (1cab0 <radio_is_done+0x10>)
   1caa2:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
   1caa6:	3800      	subs	r0, #0
   1caa8:	bf18      	it	ne
   1caaa:	2001      	movne	r0, #1
   1caac:	4770      	bx	lr
   1caae:	bf00      	nop
   1cab0:	40001000 	.word	0x40001000

0001cab4 <radio_is_idle>:
}

uint32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
   1cab4:	4b03      	ldr	r3, [pc, #12]	; (1cac4 <radio_is_idle+0x10>)
   1cab6:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
   1caba:	fab0 f080 	clz	r0, r0
   1cabe:	0940      	lsrs	r0, r0, #5
   1cac0:	4770      	bx	lr
   1cac2:	bf00      	nop
   1cac4:	40001000 	.word	0x40001000

0001cac8 <radio_crc_configure>:

void radio_crc_configure(uint32_t polynomial, uint32_t iv)
{
	NRF_RADIO->CRCCNF =
   1cac8:	4b04      	ldr	r3, [pc, #16]	; (1cadc <radio_crc_configure+0x14>)
   1caca:	f240 1203 	movw	r2, #259	; 0x103
   1cace:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
   1cad2:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
   1cad6:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
}
   1cada:	4770      	bx	lr
   1cadc:	40001000 	.word	0x40001000

0001cae0 <radio_crc_is_valid>:

uint32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
   1cae0:	4b03      	ldr	r3, [pc, #12]	; (1caf0 <radio_crc_is_valid+0x10>)
   1cae2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1cae6:	3800      	subs	r0, #0
   1cae8:	bf18      	it	ne
   1caea:	2001      	movne	r0, #1
   1caec:	4770      	bx	lr
   1caee:	bf00      	nop
   1caf0:	40001000 	.word	0x40001000

0001caf4 <radio_pkt_empty_get>:
				       PDU_AC_LL_SIZE_MAX)];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
   1caf4:	4800      	ldr	r0, [pc, #0]	; (1caf8 <radio_pkt_empty_get+0x4>)
   1caf6:	4770      	bx	lr
   1caf8:	2000ea20 	.word	0x2000ea20

0001cafc <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
   1cafc:	4800      	ldr	r0, [pc, #0]	; (1cb00 <radio_pkt_scratch_get+0x4>)
   1cafe:	4770      	bx	lr
   1cb00:	2000ea24 	.word	0x2000ea24

0001cb04 <radio_switch_complete_and_rx>:
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_RXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cb04:	4b1d      	ldr	r3, [pc, #116]	; (1cb7c <radio_switch_complete_and_rx+0x78>)
{
   1cb06:	b4f0      	push	{r4, r5, r6, r7}
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cb08:	2203      	movs	r2, #3
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cb0a:	4d1d      	ldr	r5, [pc, #116]	; (1cb80 <radio_switch_complete_and_rx+0x7c>)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cb0c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cb10:	782a      	ldrb	r2, [r5, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cb12:	4e1c      	ldr	r6, [pc, #112]	; (1cb84 <radio_switch_complete_and_rx+0x80>)
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cb14:	4c1c      	ldr	r4, [pc, #112]	; (1cb88 <radio_switch_complete_and_rx+0x84>)
   1cb16:	4f1d      	ldr	r7, [pc, #116]	; (1cb8c <radio_switch_complete_and_rx+0x88>)
   1cb18:	f8c6 7568 	str.w	r7, [r6, #1384]	; 0x568
   1cb1c:	f102 030c 	add.w	r3, r2, #12
   1cb20:	b2db      	uxtb	r3, r3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cb22:	00d0      	lsls	r0, r2, #3
   1cb24:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cb26:	0091      	lsls	r1, r2, #2
   1cb28:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cb2c:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
   1cb30:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1cb34:	f500 30f8 	add.w	r0, r0, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cb38:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
   1cb3c:	f8c6 056c 	str.w	r0, [r6, #1388]	; 0x56c
	nrf_ppi_event_endpoint_setup(
   1cb40:	f501 4110 	add.w	r1, r1, #36864	; 0x9000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cb44:	eb04 0482 	add.w	r4, r4, r2, lsl #2
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cb48:	4811      	ldr	r0, [pc, #68]	; (1cb90 <radio_switch_complete_and_rx+0x8c>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cb4a:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cb4e:	f8c3 0514 	str.w	r0, [r3, #1300]	; 0x514
		SW_SWITCH_TIMER->CC[cc]) {
   1cb52:	f8d1 3540 	ldr.w	r3, [r1, #1344]	; 0x540
	if (delay <
   1cb56:	2b28      	cmp	r3, #40	; 0x28
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1cb58:	bf8a      	itet	hi
   1cb5a:	f8d1 3540 	ldrhi.w	r3, [r1, #1344]	; 0x540

NRF_STATIC_INLINE void nrf_timer_cc_set(NRF_TIMER_Type *       p_reg,
                                        nrf_timer_cc_channel_t cc_channel,
                                        uint32_t               cc_value)
{
    p_reg->CC[cc_channel] = cc_value;
   1cb5e:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1cb60:	3b28      	subhi	r3, #40	; 0x28
   1cb62:	f8c1 3540 	str.w	r3, [r1, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1cb66:	3201      	adds	r2, #1
    p_reg->CHENSET = mask;
   1cb68:	4b06      	ldr	r3, [pc, #24]	; (1cb84 <radio_switch_complete_and_rx+0x80>)
   1cb6a:	f44f 6110 	mov.w	r1, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1cb6e:	f002 0201 	and.w	r2, r2, #1
   1cb72:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
   1cb76:	702a      	strb	r2, [r5, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(0, 0, 0, phy_rx, 0);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cb78:	bcf0      	pop	{r4, r5, r6, r7}
   1cb7a:	4770      	bx	lr
   1cb7c:	40001000 	.word	0x40001000
   1cb80:	2000f320 	.word	0x2000f320
   1cb84:	4001f000 	.word	0x4001f000
   1cb88:	40009140 	.word	0x40009140
   1cb8c:	4000110c 	.word	0x4000110c
   1cb90:	40001004 	.word	0x40001004

0001cb94 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(uint8_t phy_rx, uint8_t flags_rx, uint8_t phy_tx,
				  uint8_t flags_tx)
{
   1cb94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
			    RADIO_SHORTS_END_DISABLE_Msk |
			    RADIO_SHORTS_DISABLED_TXEN_Msk;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cb98:	4e28      	ldr	r6, [pc, #160]	; (1cc3c <radio_switch_complete_and_tx+0xa8>)
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cb9a:	4c29      	ldr	r4, [pc, #164]	; (1cc40 <radio_switch_complete_and_tx+0xac>)
   1cb9c:	4f29      	ldr	r7, [pc, #164]	; (1cc44 <radio_switch_complete_and_tx+0xb0>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cb9e:	f8df e0a8 	ldr.w	lr, [pc, #168]	; 1cc48 <radio_switch_complete_and_tx+0xb4>
   1cba2:	f8df 80a8 	ldr.w	r8, [pc, #168]	; 1cc4c <radio_switch_complete_and_tx+0xb8>
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
   1cba6:	2303      	movs	r3, #3
   1cba8:	f8c6 3200 	str.w	r3, [r6, #512]	; 0x200
	uint8_t ppi = HAL_SW_SWITCH_RADIO_ENABLE_PPI(sw_tifs_toggle);
   1cbac:	7821      	ldrb	r1, [r4, #0]
   1cbae:	f8ce 8568 	str.w	r8, [lr, #1384]	; 0x568
   1cbb2:	f101 030c 	add.w	r3, r1, #12
   1cbb6:	b2db      	uxtb	r3, r3
   1cbb8:	00db      	lsls	r3, r3, #3
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cbba:	00cd      	lsls	r5, r1, #3
   1cbbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cbc0:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
   1cbc4:	f105 4580 	add.w	r5, r5, #1073741824	; 0x40000000
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cbc8:	eb07 0781 	add.w	r7, r7, r1, lsl #2
		HAL_SW_SWITCH_GROUP_TASK_ENABLE_PPI_TASK(ppi_group_index));
   1cbcc:	f505 35f8 	add.w	r5, r5, #126976	; 0x1f000
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cbd0:	f8ce 556c 	str.w	r5, [lr, #1388]	; 0x56c
		HAL_SW_SWITCH_RADIO_ENABLE_PPI_EVT(compare_reg));
   1cbd4:	ea4f 0c81 	mov.w	ip, r1, lsl #2
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cbd8:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	}
}

static inline uint32_t hal_radio_tx_ready_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1cbdc:	f649 6534 	movw	r5, #40500	; 0x9e34
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cbe0:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
   1cbe4:	f24a 13b8 	movw	r3, #41400	; 0xa1b8
   1cbe8:	2a02      	cmp	r2, #2
   1cbea:	bf18      	it	ne
   1cbec:	461d      	movne	r5, r3
	}
}

static inline uint32_t hal_radio_rx_chain_delay_ns_get(uint8_t phy, uint8_t flags)
{
	switch (phy) {
   1cbee:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
	default:
	case BIT(0):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_1M_NS;
	case BIT(1):
		return HAL_RADIO_NRF52840_RX_CHAIN_DELAY_2M_NS;
   1cbf2:	f241 3288 	movw	r2, #5000	; 0x1388
   1cbf6:	f242 43b8 	movw	r3, #9400	; 0x24b8
   1cbfa:	2802      	cmp	r0, #2
   1cbfc:	bf08      	it	eq
   1cbfe:	4613      	moveq	r3, r2
   1cc00:	f50c 4c10 	add.w	ip, ip, #36864	; 0x9000
		delay = HAL_RADIO_NS2US_ROUND(
   1cc04:	4a12      	ldr	r2, [pc, #72]	; (1cc50 <radio_switch_complete_and_tx+0xbc>)
   1cc06:	442b      	add	r3, r5
   1cc08:	fba2 2303 	umull	r2, r3, r2, r3
		SW_SWITCH_TIMER->CC[cc]) {
   1cc0c:	f8dc 2540 	ldr.w	r2, [ip, #1344]	; 0x540
	if (delay <
   1cc10:	ebb2 1f93 	cmp.w	r2, r3, lsr #6
   1cc14:	bf85      	ittet	hi
   1cc16:	0998      	lsrhi	r0, r3, #6
				 SW_SWITCH_TIMER->CC[cc] - delay);
   1cc18:	f8dc 3540 	ldrhi.w	r3, [ip, #1344]	; 0x540
   1cc1c:	2301      	movls	r3, #1
		nrf_timer_cc_set(SW_SWITCH_TIMER, cc,
   1cc1e:	1a1b      	subhi	r3, r3, r0
   1cc20:	f8cc 3540 	str.w	r3, [ip, #1344]	; 0x540
	sw_tifs_toggle += 1U;
   1cc24:	3101      	adds	r1, #1
    p_reg->CHENSET = mask;
   1cc26:	4b08      	ldr	r3, [pc, #32]	; (1cc48 <radio_switch_complete_and_tx+0xb4>)
   1cc28:	f44f 6210 	mov.w	r2, #2304	; 0x900
	sw_tifs_toggle &= 1;
   1cc2c:	f001 0101 	and.w	r1, r1, #1
   1cc30:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1cc34:	7021      	strb	r1, [r4, #0]
			    RADIO_SHORTS_END_DISABLE_Msk;
	sw_switch(1, phy_rx, flags_rx, phy_tx, flags_tx);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cc36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1cc3a:	bf00      	nop
   1cc3c:	40001000 	.word	0x40001000
   1cc40:	2000f320 	.word	0x2000f320
   1cc44:	40009140 	.word	0x40009140
   1cc48:	4001f000 	.word	0x4001f000
   1cc4c:	4000110c 	.word	0x4000110c
   1cc50:	10624dd3 	.word	0x10624dd3

0001cc54 <radio_switch_complete_and_disable>:

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
   1cc54:	4904      	ldr	r1, [pc, #16]	; (1cc68 <radio_switch_complete_and_disable+0x14>)
    p_reg->CHENCLR = mask;
   1cc56:	4b05      	ldr	r3, [pc, #20]	; (1cc6c <radio_switch_complete_and_disable+0x18>)
   1cc58:	2003      	movs	r0, #3
   1cc5a:	f44f 6210 	mov.w	r2, #2304	; 0x900
   1cc5e:	f8c1 0200 	str.w	r0, [r1, #512]	; 0x200
   1cc62:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	    (RADIO_SHORTS_READY_START_Msk | RADIO_SHORTS_END_DISABLE_Msk);

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	hal_radio_sw_switch_disable();
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cc66:	4770      	bx	lr
   1cc68:	40001000 	.word	0x40001000
   1cc6c:	4001f000 	.word	0x4001f000

0001cc70 <radio_rssi_status_reset>:
	return NRF_RADIO->RSSISAMPLE;
}

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
   1cc70:	4b02      	ldr	r3, [pc, #8]	; (1cc7c <radio_rssi_status_reset+0xc>)
   1cc72:	2200      	movs	r2, #0
   1cc74:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
}
   1cc78:	4770      	bx	lr
   1cc7a:	bf00      	nop
   1cc7c:	40001000 	.word	0x40001000

0001cc80 <radio_rssi_is_ready>:

uint32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
   1cc80:	4b03      	ldr	r3, [pc, #12]	; (1cc90 <radio_rssi_is_ready+0x10>)
   1cc82:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
   1cc86:	3800      	subs	r0, #0
   1cc88:	bf18      	it	ne
   1cc8a:	2001      	movne	r0, #1
   1cc8c:	4770      	bx	lr
   1cc8e:	bf00      	nop
   1cc90:	40001000 	.word	0x40001000

0001cc94 <radio_filter_configure>:

void radio_filter_configure(uint8_t bitmask_enable, uint8_t bitmask_addr_type,
			    uint8_t *bdaddr)
{
   1cc94:	b410      	push	{r4}
   1cc96:	f04f 0c00 	mov.w	ip, #0
	uint8_t index;

	for (index = 0U; index < 8; index++) {
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cc9a:	ea4f 038c 	mov.w	r3, ip, lsl #2
   1cc9e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1cca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
			((uint32_t)bdaddr[2] << 16) |
			((uint32_t)bdaddr[1] << 8) |
   1cca6:	6814      	ldr	r4, [r2, #0]
		NRF_RADIO->DAB[index] = ((uint32_t)bdaddr[3] << 24) |
   1cca8:	f8c3 4600 	str.w	r4, [r3, #1536]	; 0x600
	for (index = 0U; index < 8; index++) {
   1ccac:	f10c 0c01 	add.w	ip, ip, #1
			bdaddr[0];
		NRF_RADIO->DAP[index] = ((uint32_t)bdaddr[5] << 8) | bdaddr[4];
   1ccb0:	8894      	ldrh	r4, [r2, #4]
   1ccb2:	f8c3 4620 	str.w	r4, [r3, #1568]	; 0x620
	for (index = 0U; index < 8; index++) {
   1ccb6:	f1bc 0f08 	cmp.w	ip, #8
		bdaddr += 6;
   1ccba:	f102 0206 	add.w	r2, r2, #6
	for (index = 0U; index < 8; index++) {
   1ccbe:	d1ec      	bne.n	1cc9a <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1ccc0:	4b03      	ldr	r3, [pc, #12]	; (1ccd0 <radio_filter_configure+0x3c>)
}
   1ccc2:	bc10      	pop	{r4}
	NRF_RADIO->DACNF = ((uint32_t)bitmask_addr_type << 8) | bitmask_enable;
   1ccc4:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
   1ccc8:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
   1cccc:	4770      	bx	lr
   1ccce:	bf00      	nop
   1ccd0:	40001000 	.word	0x40001000

0001ccd4 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
   1ccd4:	4a03      	ldr	r2, [pc, #12]	; (1cce4 <radio_filter_disable+0x10>)
   1ccd6:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
   1ccda:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
   1ccde:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
}
   1cce2:	4770      	bx	lr
   1cce4:	40001000 	.word	0x40001000

0001cce8 <radio_filter_status_reset>:

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
   1cce8:	4b02      	ldr	r3, [pc, #8]	; (1ccf4 <radio_filter_status_reset+0xc>)
   1ccea:	2200      	movs	r2, #0
   1ccec:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
}
   1ccf0:	4770      	bx	lr
   1ccf2:	bf00      	nop
   1ccf4:	40001000 	.word	0x40001000

0001ccf8 <radio_filter_has_match>:

uint32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
   1ccf8:	4b03      	ldr	r3, [pc, #12]	; (1cd08 <radio_filter_has_match+0x10>)
   1ccfa:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
   1ccfe:	3800      	subs	r0, #0
   1cd00:	bf18      	it	ne
   1cd02:	2001      	movne	r0, #1
   1cd04:	4770      	bx	lr
   1cd06:	bf00      	nop
   1cd08:	40001000 	.word	0x40001000

0001cd0c <radio_filter_match_get>:

uint32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
   1cd0c:	4b01      	ldr	r3, [pc, #4]	; (1cd14 <radio_filter_match_get+0x8>)
   1cd0e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
   1cd12:	4770      	bx	lr
   1cd14:	40001000 	.word	0x40001000

0001cd18 <radio_tmr_status_reset>:
    p_reg->EVTENCLR = mask;
   1cd18:	4904      	ldr	r1, [pc, #16]	; (1cd2c <radio_tmr_status_reset+0x14>)
   1cd1a:	4b05      	ldr	r3, [pc, #20]	; (1cd30 <radio_tmr_status_reset+0x18>)
   1cd1c:	4a05      	ldr	r2, [pc, #20]	; (1cd34 <radio_tmr_status_reset+0x1c>)
   1cd1e:	f44f 2080 	mov.w	r0, #262144	; 0x40000
   1cd22:	f8c1 0348 	str.w	r0, [r1, #840]	; 0x348
   1cd26:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
			BIT(HAL_SW_SWITCH_TIMER_S8_DISABLE_PPI) |
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* CONFIG_BT_CTLR_PHY_CODED */
			BIT(HAL_TRIGGER_CRYPT_PPI));
}
   1cd2a:	4770      	bx	lr
   1cd2c:	4000b000 	.word	0x4000b000
   1cd30:	4001f000 	.word	0x4001f000
   1cd34:	0e7000c0 	.word	0x0e7000c0

0001cd38 <radio_tmr_tifs_set>:
void radio_tmr_tifs_set(uint32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	nrf_timer_cc_set(SW_SWITCH_TIMER,
   1cd38:	4b03      	ldr	r3, [pc, #12]	; (1cd48 <radio_tmr_tifs_set+0x10>)
   1cd3a:	4a04      	ldr	r2, [pc, #16]	; (1cd4c <radio_tmr_tifs_set+0x14>)
   1cd3c:	781b      	ldrb	r3, [r3, #0]
   1cd3e:	f503 73a8 	add.w	r3, r3, #336	; 0x150
   1cd42:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
			 SW_SWITCH_TIMER_EVTS_COMP(sw_tifs_toggle), tifs);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1cd46:	4770      	bx	lr
   1cd48:	2000f320 	.word	0x2000f320
   1cd4c:	40009000 	.word	0x40009000

0001cd50 <radio_tmr_start>:

uint32_t radio_tmr_start(uint8_t trx, uint32_t ticks_start, uint32_t remainder)
{
   1cd50:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1cd54:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
   1cd58:	4d31      	ldr	r5, [pc, #196]	; (1ce20 <radio_tmr_start+0xd0>)
   1cd5a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
   1cd5e:	42ab      	cmp	r3, r5
{
   1cd60:	4604      	mov	r4, r0
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
   1cd62:	d906      	bls.n	1cd72 <radio_tmr_start+0x22>
		ticks_start--;
		remainder += 30517578UL;
   1cd64:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
   1cd68:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
		ticks_start--;
   1cd6c:	3901      	subs	r1, #1
		remainder += 30517578UL;
   1cd6e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cd72:	4b2c      	ldr	r3, [pc, #176]	; (1ce24 <radio_tmr_start+0xd4>)
	}
	remainder /= 1000000UL;
   1cd74:	482c      	ldr	r0, [pc, #176]	; (1ce28 <radio_tmr_start+0xd8>)
    p_reg->CC[ch] = cc_val;
   1cd76:	4d2d      	ldr	r5, [pc, #180]	; (1ce2c <radio_tmr_start+0xdc>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cd78:	4e2d      	ldr	r6, [pc, #180]	; (1ce30 <radio_tmr_start+0xe0>)
   1cd7a:	2701      	movs	r7, #1
   1cd7c:	60df      	str	r7, [r3, #12]

	nrf_timer_task_trigger(EVENT_TIMER, NRF_TIMER_TASK_CLEAR);
	EVENT_TIMER->MODE = 0;
   1cd7e:	2700      	movs	r7, #0
   1cd80:	f8c3 7504 	str.w	r7, [r3, #1284]	; 0x504
	remainder /= 1000000UL;
   1cd84:	fba0 0202 	umull	r0, r2, r0, r2
	EVENT_TIMER->PRESCALER = 4;
   1cd88:	2704      	movs	r7, #4
   1cd8a:	f8c3 7510 	str.w	r7, [r3, #1296]	; 0x510
	remainder /= 1000000UL;
   1cd8e:	0c90      	lsrs	r0, r2, #18
	EVENT_TIMER->BITMODE = 2;	/* 24 - bit */
   1cd90:	2702      	movs	r7, #2
   1cd92:	f8c3 7508 	str.w	r7, [r3, #1288]	; 0x508
   1cd96:	4a27      	ldr	r2, [pc, #156]	; (1ce34 <radio_tmr_start+0xe4>)
    p_reg->CC[cc_channel] = cc_value;
   1cd98:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
   1cd9c:	f8c5 1548 	str.w	r1, [r5, #1352]	; 0x548
    p_reg->EVTENSET = mask;
   1cda0:	f44f 2180 	mov.w	r1, #262144	; 0x40000
   1cda4:	f8c5 1344 	str.w	r1, [r5, #836]	; 0x344
    p_reg->CHENSET = mask;
   1cda8:	2140      	movs	r1, #64	; 0x40
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdaa:	f8c2 6540 	str.w	r6, [r2, #1344]	; 0x540
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cdae:	f8c2 3544 	str.w	r3, [r2, #1348]	; 0x544
    p_reg->CHENSET = mask;
   1cdb2:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
	nrf_ppi_channels_disable(
   1cdb6:	bb64      	cbnz	r4, 1ce12 <radio_tmr_start+0xc2>
    p_reg->CHENCLR = mask;
   1cdb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
   1cdbc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
	nrf_ppi_channels_enable(
   1cdc0:	f44f 1400 	mov.w	r4, #2097152	; 0x200000
    p_reg->CHENSET = mask;
   1cdc4:	4b1b      	ldr	r3, [pc, #108]	; (1ce34 <radio_tmr_start+0xe4>)
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cdc6:	4a1c      	ldr	r2, [pc, #112]	; (1ce38 <radio_tmr_start+0xe8>)
   1cdc8:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
   1cdcc:	2101      	movs	r1, #1
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	last_pdu_end_us = 0U;

#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_CLEAR);
	SW_SWITCH_TIMER->MODE = 0;
   1cdce:	2400      	movs	r4, #0
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdd0:	f8df 8068 	ldr.w	r8, [pc, #104]	; 1ce3c <radio_tmr_start+0xec>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cdd4:	f8df e068 	ldr.w	lr, [pc, #104]	; 1ce40 <radio_tmr_start+0xf0>
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdd8:	f8df c068 	ldr.w	ip, [pc, #104]	; 1ce44 <radio_tmr_start+0xf4>
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cddc:	4f1a      	ldr	r7, [pc, #104]	; (1ce48 <radio_tmr_start+0xf8>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdde:	4e1b      	ldr	r6, [pc, #108]	; (1ce4c <radio_tmr_start+0xfc>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cde0:	4d1b      	ldr	r5, [pc, #108]	; (1ce50 <radio_tmr_start+0x100>)
   1cde2:	60d1      	str	r1, [r2, #12]
	SW_SWITCH_TIMER->PRESCALER = 4;
   1cde4:	f04f 0904 	mov.w	r9, #4
	SW_SWITCH_TIMER->MODE = 0;
   1cde8:	f8c2 4504 	str.w	r4, [r2, #1284]	; 0x504
	SW_SWITCH_TIMER->PRESCALER = 4;
   1cdec:	f8c2 9510 	str.w	r9, [r2, #1296]	; 0x510
	SW_SWITCH_TIMER->BITMODE = 0; /* 16 bit */
   1cdf0:	f8c2 4508 	str.w	r4, [r2, #1288]	; 0x508
   1cdf4:	6011      	str	r1, [r2, #0]
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdf6:	f8c3 8550 	str.w	r8, [r3, #1360]	; 0x550
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cdfa:	f8c3 e554 	str.w	lr, [r3, #1364]	; 0x554
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1cdfe:	f8c3 c558 	str.w	ip, [r3, #1368]	; 0x558
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ce02:	f8c3 755c 	str.w	r7, [r3, #1372]	; 0x55c
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ce06:	f8c3 6560 	str.w	r6, [r3, #1376]	; 0x560
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ce0a:	f8c3 5564 	str.w	r5, [r3, #1380]	; 0x564
	 */
#endif /* CONFIG_BT_CTLR_PHY_CODED && CONFIG_HAS_HW_NRF_RADIO_BLE_CODED */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
   1ce0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    p_reg->CHENCLR = mask;
   1ce12:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
   1ce16:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
   1ce1a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
   1ce1e:	e7d1      	b.n	1cdc4 <radio_tmr_start+0x74>
   1ce20:	7ff0bdbf 	.word	0x7ff0bdbf
   1ce24:	40008000 	.word	0x40008000
   1ce28:	431bde83 	.word	0x431bde83
   1ce2c:	4000b000 	.word	0x4000b000
   1ce30:	4000b148 	.word	0x4000b148
   1ce34:	4001f000 	.word	0x4001f000
   1ce38:	40009000 	.word	0x40009000
   1ce3c:	4000110c 	.word	0x4000110c
   1ce40:	4000900c 	.word	0x4000900c
   1ce44:	40009140 	.word	0x40009140
   1ce48:	4001f004 	.word	0x4001f004
   1ce4c:	40009144 	.word	0x40009144
   1ce50:	4001f00c 	.word	0x4001f00c

0001ce54 <radio_tmr_start_get>:
    return p_reg->CC[ch];
   1ce54:	4b01      	ldr	r3, [pc, #4]	; (1ce5c <radio_tmr_start_get+0x8>)
   1ce56:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}

uint32_t radio_tmr_start_get(void)
{
	return nrf_rtc_cc_get(NRF_RTC0, 2);
}
   1ce5a:	4770      	bx	lr
   1ce5c:	4000b000 	.word	0x4000b000

0001ce60 <radio_tmr_stop>:
   1ce60:	4903      	ldr	r1, [pc, #12]	; (1ce70 <radio_tmr_stop+0x10>)
   1ce62:	4a04      	ldr	r2, [pc, #16]	; (1ce74 <radio_tmr_stop+0x14>)
   1ce64:	2301      	movs	r3, #1
   1ce66:	604b      	str	r3, [r1, #4]
   1ce68:	610b      	str	r3, [r1, #16]
   1ce6a:	6053      	str	r3, [r2, #4]
   1ce6c:	6113      	str	r3, [r2, #16]

#if !defined(CONFIG_BT_CTLR_TIFS_HW)
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_STOP);
	nrf_timer_task_trigger(SW_SWITCH_TIMER, NRF_TIMER_TASK_SHUTDOWN);
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}
   1ce6e:	4770      	bx	lr
   1ce70:	40008000 	.word	0x40008000
   1ce74:	40009000 	.word	0x40009000

0001ce78 <radio_tmr_hcto_configure>:
    p_reg->CC[cc_channel] = cc_value;
   1ce78:	4904      	ldr	r1, [pc, #16]	; (1ce8c <radio_tmr_hcto_configure+0x14>)
    p_reg->CHENSET = mask;
   1ce7a:	4b05      	ldr	r3, [pc, #20]	; (1ce90 <radio_tmr_hcto_configure+0x18>)
   1ce7c:	f8c1 0544 	str.w	r0, [r1, #1348]	; 0x544
   1ce80:	f04f 6288 	mov.w	r2, #71303168	; 0x4400000
   1ce84:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_disable_on_hcto_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI) |
		BIT(HAL_RADIO_DISABLE_ON_HCTO_PPI));
}
   1ce88:	4770      	bx	lr
   1ce8a:	bf00      	nop
   1ce8c:	40008000 	.word	0x40008000
   1ce90:	4001f000 	.word	0x4001f000

0001ce94 <radio_tmr_aa_capture>:
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ce94:	4b05      	ldr	r3, [pc, #20]	; (1ceac <radio_tmr_aa_capture+0x18>)
   1ce96:	4806      	ldr	r0, [pc, #24]	; (1ceb0 <radio_tmr_aa_capture+0x1c>)
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1ce98:	4906      	ldr	r1, [pc, #24]	; (1ceb4 <radio_tmr_aa_capture+0x20>)
    p_reg->CHENSET = mask;
   1ce9a:	4a07      	ldr	r2, [pc, #28]	; (1ceb8 <radio_tmr_aa_capture+0x24>)
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1ce9c:	f8c3 0548 	str.w	r0, [r3, #1352]	; 0x548
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1cea0:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
    p_reg->CHENSET = mask;
   1cea4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
	hal_radio_ready_time_capture_ppi_config();
	hal_radio_recv_timeout_cancel_ppi_config();
	hal_radio_nrf_ppi_channels_enable(
		BIT(HAL_RADIO_READY_TIME_CAPTURE_PPI) |
		BIT(HAL_RADIO_RECV_TIMEOUT_CANCEL_PPI));
}
   1cea8:	4770      	bx	lr
   1ceaa:	bf00      	nop
   1ceac:	4001f000 	.word	0x4001f000
   1ceb0:	40001100 	.word	0x40001100
   1ceb4:	40008040 	.word	0x40008040
   1ceb8:	04000080 	.word	0x04000080

0001cebc <radio_tmr_aa_get>:

uint32_t radio_tmr_aa_get(void)
{
	return EVENT_TIMER->CC[1];
   1cebc:	4b01      	ldr	r3, [pc, #4]	; (1cec4 <radio_tmr_aa_get+0x8>)
   1cebe:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
   1cec2:	4770      	bx	lr
   1cec4:	40008000 	.word	0x40008000

0001cec8 <radio_tmr_aa_save>:

static uint32_t radio_tmr_aa;

void radio_tmr_aa_save(uint32_t aa)
{
	radio_tmr_aa = aa;
   1cec8:	4b01      	ldr	r3, [pc, #4]	; (1ced0 <radio_tmr_aa_save+0x8>)
   1ceca:	6018      	str	r0, [r3, #0]
}
   1cecc:	4770      	bx	lr
   1cece:	bf00      	nop
   1ced0:	2000eb30 	.word	0x2000eb30

0001ced4 <radio_tmr_aa_restore>:

uint32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
   1ced4:	4b01      	ldr	r3, [pc, #4]	; (1cedc <radio_tmr_aa_restore+0x8>)
}
   1ced6:	6818      	ldr	r0, [r3, #0]
   1ced8:	4770      	bx	lr
   1ceda:	bf00      	nop
   1cedc:	2000eb30 	.word	0x2000eb30

0001cee0 <radio_tmr_ready_get>:

uint32_t radio_tmr_ready_get(void)
{
	return EVENT_TIMER->CC[0];
   1cee0:	4b01      	ldr	r3, [pc, #4]	; (1cee8 <radio_tmr_ready_get+0x8>)
   1cee2:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
   1cee6:	4770      	bx	lr
   1cee8:	40008000 	.word	0x40008000

0001ceec <radio_tmr_end_capture>:
   1ceec:	4b02      	ldr	r3, [pc, #8]	; (1cef8 <radio_tmr_end_capture+0xc>)
   1ceee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   1cef2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504

void radio_tmr_end_capture(void)
{
	hal_radio_end_time_capture_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_RADIO_END_TIME_CAPTURE_PPI));
}
   1cef6:	4770      	bx	lr
   1cef8:	4001f000 	.word	0x4001f000

0001cefc <radio_tmr_end_get>:
uint32_t radio_tmr_end_get(void)
{
#if defined(CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER)
	return last_pdu_end_us;
#else /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
	return EVENT_TIMER->CC[2];
   1cefc:	4b01      	ldr	r3, [pc, #4]	; (1cf04 <radio_tmr_end_get+0x8>)
   1cefe:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
#endif /* !CONFIG_BT_CTLR_SW_SWITCH_SINGLE_TIMER */
}
   1cf02:	4770      	bx	lr
   1cf04:	40008000 	.word	0x40008000

0001cf08 <radio_tmr_tifs_base_get>:
   1cf08:	4b01      	ldr	r3, [pc, #4]	; (1cf10 <radio_tmr_tifs_base_get+0x8>)
   1cf0a:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
   1cf0e:	4770      	bx	lr
   1cf10:	40008000 	.word	0x40008000

0001cf14 <radio_ccm_rx_pkt_set>:

void *radio_ccm_rx_pkt_set(struct ccm *ccm, uint8_t phy, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cf14:	4b17      	ldr	r3, [pc, #92]	; (1cf74 <radio_ccm_rx_pkt_set+0x60>)
{
   1cf16:	b470      	push	{r4, r5, r6}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cf18:	2400      	movs	r4, #0
{
   1cf1a:	4605      	mov	r5, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1cf1c:	2602      	movs	r6, #2
	}

#if !defined(CONFIG_SOC_COMPATIBLE_NRF52832) && \
	(!defined(CONFIG_BT_CTLR_DATA_LENGTH_MAX) || \
	 (CONFIG_BT_CTLR_DATA_LENGTH_MAX < ((HAL_RADIO_PDU_LEN_MAX) - 4)))
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1cf1e:	4816      	ldr	r0, [pc, #88]	; (1cf78 <radio_ccm_rx_pkt_set+0x64>)
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cf20:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1cf24:	f8c3 6500 	str.w	r6, [r3, #1280]	; 0x500
	uint8_t max_len = (NRF_RADIO->PCNF1 & RADIO_PCNF1_MAXLEN_Msk) >>
   1cf28:	f8d0 0518 	ldr.w	r0, [r0, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1cf2c:	4e13      	ldr	r6, [pc, #76]	; (1cf7c <radio_ccm_rx_pkt_set+0x68>)
   1cf2e:	b2c0      	uxtb	r0, r0
			RADIO_PCNF1_MAXLEN_Pos;

	NRF_CCM->MAXPACKETSIZE = max_len;
   1cf30:	f8c3 0518 	str.w	r0, [r3, #1304]	; 0x518
		mode |= (CCM_MODE_DATARATE_2Mbit <<
   1cf34:	4812      	ldr	r0, [pc, #72]	; (1cf80 <radio_ccm_rx_pkt_set+0x6c>)
   1cf36:	2902      	cmp	r1, #2
   1cf38:	bf08      	it	eq
   1cf3a:	4630      	moveq	r0, r6
#endif
#endif /* !CONFIG_SOC_SERIES_NRF51X */

	NRF_CCM->MODE = mode;
   1cf3c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1cf40:	4810      	ldr	r0, [pc, #64]	; (1cf84 <radio_ccm_rx_pkt_set+0x70>)
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1cf42:	f8c3 5508 	str.w	r5, [r3, #1288]	; 0x508
	NRF_CCM->OUTPTR = (uint32_t)pkt;
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1cf46:	4910      	ldr	r1, [pc, #64]	; (1cf88 <radio_ccm_rx_pkt_set+0x74>)
	NRF_CCM->INPTR = (uint32_t)_pkt_scratch;
   1cf48:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (uint32_t)pkt;
   1cf4c:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
   1cf50:	4a0e      	ldr	r2, [pc, #56]	; (1cf8c <radio_ccm_rx_pkt_set+0x78>)
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1cf52:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
   1cf56:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
	NRF_CCM->SHORTS = 0;
   1cf5a:	f8c3 4200 	str.w	r4, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1cf5e:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1cf62:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1cf66:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504
#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE void nrf_ccm_task_trigger(NRF_CCM_Type * p_reg,
                                            nrf_ccm_task_t task)
{
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1cf6a:	2201      	movs	r2, #1
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_CRYPT_PPI));

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1cf6c:	bc70      	pop	{r4, r5, r6}
   1cf6e:	601a      	str	r2, [r3, #0]
   1cf70:	4770      	bx	lr
   1cf72:	bf00      	nop
   1cf74:	4000f000 	.word	0x4000f000
   1cf78:	40001000 	.word	0x40001000
   1cf7c:	01010001 	.word	0x01010001
   1cf80:	01000001 	.word	0x01000001
   1cf84:	2000ea24 	.word	0x2000ea24
   1cf88:	2000e914 	.word	0x2000e914
   1cf8c:	4001f000 	.word	0x4001f000

0001cf90 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
	uint32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cf90:	4b0f      	ldr	r3, [pc, #60]	; (1cfd0 <radio_ccm_tx_pkt_set+0x40>)
{
   1cf92:	b410      	push	{r4}
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cf94:	2200      	movs	r2, #0
{
   1cf96:	4604      	mov	r4, r0
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1cf98:	2002      	movs	r0, #2
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
   1cf9a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
   1cf9e:	f8c3 0500 	str.w	r0, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
   1cfa2:	480c      	ldr	r0, [pc, #48]	; (1cfd4 <radio_ccm_tx_pkt_set+0x44>)
   1cfa4:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (uint32_t)ccm;
   1cfa8:	f8c3 4508 	str.w	r4, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (uint32_t)pkt;
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1cfac:	480a      	ldr	r0, [pc, #40]	; (1cfd8 <radio_ccm_tx_pkt_set+0x48>)
	NRF_CCM->INPTR = (uint32_t)pkt;
   1cfae:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1cfb2:	4c0a      	ldr	r4, [pc, #40]	; (1cfdc <radio_ccm_tx_pkt_set+0x4c>)
	NRF_CCM->OUTPTR = (uint32_t)_pkt_scratch;
   1cfb4:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1cfb8:	2101      	movs	r1, #1
	NRF_CCM->SCRATCHPTR = (uint32_t)_ccm_scratch;
   1cfba:	f8c3 4514 	str.w	r4, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
   1cfbe:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ERROR = 0;

	nrf_ccm_task_trigger(NRF_CCM, NRF_CCM_TASK_KSGEN);

	return _pkt_scratch;
}
   1cfc2:	bc10      	pop	{r4}
	NRF_CCM->EVENTS_ENDCRYPT = 0;
   1cfc4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
   1cfc8:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
   1cfcc:	6019      	str	r1, [r3, #0]
}
   1cfce:	4770      	bx	lr
   1cfd0:	4000f000 	.word	0x4000f000
   1cfd4:	01010000 	.word	0x01010000
   1cfd8:	2000ea24 	.word	0x2000ea24
   1cfdc:	2000e914 	.word	0x2000e914

0001cfe0 <radio_ccm_is_done>:
    p_reg->SHORTS = mask;
}

NRF_STATIC_INLINE void nrf_ccm_int_enable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1cfe0:	4a0e      	ldr	r2, [pc, #56]	; (1d01c <radio_ccm_is_done+0x3c>)
   1cfe2:	2302      	movs	r3, #2
   1cfe4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304

uint32_t radio_ccm_is_done(void)
{
	nrf_ccm_int_enable(NRF_CCM, CCM_INTENSET_ENDCRYPT_Msk);
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1cfe8:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1cfec:	b933      	cbnz	r3, 1cffc <radio_ccm_is_done+0x1c>
		__WFE();
   1cfee:	bf20      	wfe
		__SEV();
   1cff0:	bf40      	sev
		__WFE();
   1cff2:	bf20      	wfe
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
   1cff4:	f8d2 3104 	ldr.w	r3, [r2, #260]	; 0x104
   1cff8:	2b00      	cmp	r3, #0
   1cffa:	d0f8      	beq.n	1cfee <radio_ccm_is_done+0xe>
}

NRF_STATIC_INLINE void nrf_ccm_int_disable(NRF_CCM_Type * p_reg, uint32_t mask)
{
    p_reg->INTENCLR = mask;
   1cffc:	4b07      	ldr	r3, [pc, #28]	; (1d01c <radio_ccm_is_done+0x3c>)
   1cffe:	4a08      	ldr	r2, [pc, #32]	; (1d020 <radio_ccm_is_done+0x40>)
   1d000:	2002      	movs	r0, #2
   1d002:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   1d006:	f8c3 0308 	str.w	r0, [r3, #776]	; 0x308
   1d00a:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	}
	nrf_ccm_int_disable(NRF_CCM, CCM_INTENCLR_ENDCRYPT_Msk);
	NVIC_ClearPendingIRQ(nrfx_get_irq_number(NRF_CCM));

	return (NRF_CCM->EVENTS_ERROR == 0);
   1d00e:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
   1d012:	fab0 f080 	clz	r0, r0
   1d016:	0940      	lsrs	r0, r0, #5
   1d018:	4770      	bx	lr
   1d01a:	bf00      	nop
   1d01c:	4000f000 	.word	0x4000f000
   1d020:	e000e100 	.word	0xe000e100

0001d024 <radio_ccm_mic_is_valid>:

uint32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
   1d024:	4b03      	ldr	r3, [pc, #12]	; (1d034 <radio_ccm_mic_is_valid+0x10>)
   1d026:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d02a:	3800      	subs	r0, #0
   1d02c:	bf18      	it	ne
   1d02e:	2001      	movne	r0, #1
   1d030:	4770      	bx	lr
   1d032:	bf00      	nop
   1d034:	4000f000 	.word	0x4000f000

0001d038 <radio_ar_configure>:
	if (IS_ENABLED(CONFIG_BT_CTLR_ADV_EXT) &&
	    ((flags & BIT(1)) || (!(flags & BIT(0)) && (phy > PHY_1M)))) {
		addrptr = NRF_RADIO->PACKETPTR + 1;
		bcc = 80;
	} else {
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1d038:	4a15      	ldr	r2, [pc, #84]	; (1d090 <radio_ar_configure+0x58>)
	/* For Coded PHY adjust for CI and TERM1 */
	if (IS_ENABLED(CONFIG_BT_CTLR_PHY_CODED) && (phy == PHY_CODED)) {
		bcc += 5;
	}

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d03a:	4b16      	ldr	r3, [pc, #88]	; (1d094 <radio_ar_configure+0x5c>)
{
   1d03c:	b4f0      	push	{r4, r5, r6, r7}
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1d03e:	f8d2 5504 	ldr.w	r5, [r2, #1284]	; 0x504
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
	NRF_AAR->IRKPTR = (uint32_t)irk;
	NRF_AAR->ADDRPTR = addrptr;
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d042:	4e15      	ldr	r6, [pc, #84]	; (1d098 <radio_ar_configure+0x60>)
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
   1d044:	2703      	movs	r7, #3
   1d046:	f8c3 7500 	str.w	r7, [r3, #1280]	; 0x500

	NRF_AAR->EVENTS_END = 0;
   1d04a:	2400      	movs	r4, #0
	NRF_AAR->NIRK = nirk;
   1d04c:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		addrptr = NRF_RADIO->PACKETPTR - 1;
   1d050:	3d01      	subs	r5, #1
	NRF_AAR->IRKPTR = (uint32_t)irk;
   1d052:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
    p_reg->BCC = radio_bcc;
   1d056:	2140      	movs	r1, #64	; 0x40
	NRF_AAR->ADDRPTR = addrptr;
   1d058:	f8c3 5510 	str.w	r5, [r3, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (uint32_t)&_aar_scratch[0];
   1d05c:	f8c3 6514 	str.w	r6, [r3, #1300]	; 0x514
	NRF_AAR->EVENTS_END = 0;
   1d060:	f8c3 4100 	str.w	r4, [r3, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
   1d064:	f8c3 4104 	str.w	r4, [r3, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
   1d068:	f8c3 4108 	str.w	r4, [r3, #264]	; 0x108
   1d06c:	f8c2 1560 	str.w	r1, [r2, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
   1d070:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
   1d074:	4909      	ldr	r1, [pc, #36]	; (1d09c <radio_ar_configure+0x64>)
   1d076:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   1d07a:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
   1d07e:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d082:	f8c2 4128 	str.w	r4, [r2, #296]	; 0x128
	radio_bc_configure(bcc);
	radio_bc_status_reset();

	hal_trigger_aar_ppi_config();
	hal_radio_nrf_ppi_channels_enable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1d086:	bcf0      	pop	{r4, r5, r6, r7}
   1d088:	f8c1 0504 	str.w	r0, [r1, #1284]	; 0x504
   1d08c:	4770      	bx	lr
   1d08e:	bf00      	nop
   1d090:	40001000 	.word	0x40001000
   1d094:	4000f000 	.word	0x4000f000
   1d098:	2000e910 	.word	0x2000e910
   1d09c:	4001f000 	.word	0x4001f000

0001d0a0 <radio_ar_match_get>:

uint32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
   1d0a0:	4b01      	ldr	r3, [pc, #4]	; (1d0a8 <radio_ar_match_get+0x8>)
   1d0a2:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
   1d0a6:	4770      	bx	lr
   1d0a8:	4000f000 	.word	0x4000f000

0001d0ac <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
   1d0ac:	b410      	push	{r4}
	radio_bc_status_reset();

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d0ae:	4807      	ldr	r0, [pc, #28]	; (1d0cc <radio_ar_status_reset+0x20>)
	NRF_RADIO->EVENTS_BCMATCH = 0;
   1d0b0:	4c07      	ldr	r4, [pc, #28]	; (1d0d0 <radio_ar_status_reset+0x24>)
    p_reg->CHENCLR = mask;
   1d0b2:	4a08      	ldr	r2, [pc, #32]	; (1d0d4 <radio_ar_status_reset+0x28>)
   1d0b4:	2300      	movs	r3, #0
   1d0b6:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
   1d0ba:	f8c4 3128 	str.w	r3, [r4, #296]	; 0x128
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
   1d0be:	f8c0 3500 	str.w	r3, [r0, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;

	hal_radio_nrf_ppi_channels_disable(BIT(HAL_TRIGGER_AAR_PPI));
}
   1d0c2:	bc10      	pop	{r4}
   1d0c4:	f8c2 1508 	str.w	r1, [r2, #1288]	; 0x508
   1d0c8:	4770      	bx	lr
   1d0ca:	bf00      	nop
   1d0cc:	4000f000 	.word	0x4000f000
   1d0d0:	40001000 	.word	0x40001000
   1d0d4:	4001f000 	.word	0x4001f000

0001d0d8 <radio_ar_has_match>:
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
   1d0d8:	4b08      	ldr	r3, [pc, #32]	; (1d0fc <radio_ar_has_match+0x24>)
   1d0da:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128

uint32_t radio_ar_has_match(void)
{
	return (radio_bc_has_match() &&
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
   1d0de:	b160      	cbz	r0, 1d0fa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_END &&
   1d0e0:	f503 4360 	add.w	r3, r3, #57344	; 0xe000
   1d0e4:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
   1d0e8:	b138      	cbz	r0, 1d0fa <radio_ar_has_match+0x22>
		NRF_AAR->EVENTS_RESOLVED &&
   1d0ea:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
   1d0ee:	b120      	cbz	r0, 1d0fa <radio_ar_has_match+0x22>
		!NRF_AAR->EVENTS_NOTRESOLVED);
   1d0f0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
   1d0f4:	fab0 f080 	clz	r0, r0
   1d0f8:	0940      	lsrs	r0, r0, #5
}
   1d0fa:	4770      	bx	lr
   1d0fc:	40001000 	.word	0x40001000

0001d100 <mayfly_enable_cb>:

void mayfly_enable_cb(uint8_t caller_id, uint8_t callee_id, uint8_t enable)
{
	(void)caller_id;

	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d100:	2902      	cmp	r1, #2
{
   1d102:	b510      	push	{r4, lr}
   1d104:	4614      	mov	r4, r2
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_JOB);
   1d106:	d00b      	beq.n	1d120 <mayfly_enable_cb+0x20>
   1d108:	4a0a      	ldr	r2, [pc, #40]	; (1d134 <mayfly_enable_cb+0x34>)
   1d10a:	490b      	ldr	r1, [pc, #44]	; (1d138 <mayfly_enable_cb+0x38>)
   1d10c:	480b      	ldr	r0, [pc, #44]	; (1d13c <mayfly_enable_cb+0x3c>)
   1d10e:	231e      	movs	r3, #30
   1d110:	f004 fd08 	bl	21b24 <printk>
   1d114:	4040      	eors	r0, r0
   1d116:	f380 8811 	msr	BASEPRI, r0
   1d11a:	f04f 0003 	mov.w	r0, #3
   1d11e:	df02      	svc	2

	if (enable) {
		irq_enable(HAL_SWI_JOB_IRQ);
   1d120:	200b      	movs	r0, #11
	if (enable) {
   1d122:	b11c      	cbz	r4, 1d12c <mayfly_enable_cb+0x2c>
	} else {
		irq_disable(HAL_SWI_JOB_IRQ);
	}
}
   1d124:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_enable(HAL_SWI_JOB_IRQ);
   1d128:	f7ea bb10 	b.w	774c <arch_irq_enable>
}
   1d12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		irq_disable(HAL_SWI_JOB_IRQ);
   1d130:	f7ea bb1c 	b.w	776c <arch_irq_disable>
   1d134:	000290cc 	.word	0x000290cc
   1d138:	0002911c 	.word	0x0002911c
   1d13c:	00028404 	.word	0x00028404

0001d140 <mayfly_is_enabled>:

uint32_t mayfly_is_enabled(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1d140:	b129      	cbz	r1, 1d14e <mayfly_is_enabled+0xe>
   1d142:	3901      	subs	r1, #1
   1d144:	2901      	cmp	r1, #1
   1d146:	d805      	bhi.n	1d154 <mayfly_is_enabled+0x14>
	case MAYFLY_CALL_ID_LLL:
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);

	case MAYFLY_CALL_ID_WORKER:
		return irq_is_enabled(HAL_SWI_WORKER_IRQ);
   1d148:	200b      	movs	r0, #11
   1d14a:	f7ea bb23 	b.w	7794 <arch_irq_is_enabled>
		return irq_is_enabled(HAL_SWI_RADIO_IRQ);
   1d14e:	2018      	movs	r0, #24
   1d150:	f7ea bb20 	b.w	7794 <arch_irq_is_enabled>
{
   1d154:	b508      	push	{r3, lr}

	case MAYFLY_CALL_ID_JOB:
		return irq_is_enabled(HAL_SWI_JOB_IRQ);

	default:
		LL_ASSERT(0);
   1d156:	4a07      	ldr	r2, [pc, #28]	; (1d174 <mayfly_is_enabled+0x34>)
   1d158:	4907      	ldr	r1, [pc, #28]	; (1d178 <mayfly_is_enabled+0x38>)
   1d15a:	4808      	ldr	r0, [pc, #32]	; (1d17c <mayfly_is_enabled+0x3c>)
   1d15c:	2336      	movs	r3, #54	; 0x36
   1d15e:	f004 fce1 	bl	21b24 <printk>
   1d162:	4040      	eors	r0, r0
   1d164:	f380 8811 	msr	BASEPRI, r0
   1d168:	f04f 0003 	mov.w	r0, #3
   1d16c:	df02      	svc	2
		break;
	}

	return 0;
}
   1d16e:	2000      	movs	r0, #0
   1d170:	bd08      	pop	{r3, pc}
   1d172:	bf00      	nop
   1d174:	000290cc 	.word	0x000290cc
   1d178:	0002849c 	.word	0x0002849c
   1d17c:	00028404 	.word	0x00028404

0001d180 <mayfly_prio_is_equal>:
#endif
#if (CONFIG_BT_CTLR_ULL_HIGH_PRIO == CONFIG_BT_CTLR_ULL_LOW_PRIO)
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
		(callee_id == MAYFLY_CALL_ID_JOB)) ||
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d180:	4288      	cmp	r0, r1
   1d182:	d00b      	beq.n	1d19c <mayfly_prio_is_equal+0x1c>
	return (caller_id == callee_id) ||
   1d184:	2801      	cmp	r0, #1
   1d186:	d003      	beq.n	1d190 <mayfly_prio_is_equal+0x10>
		(callee_id == MAYFLY_CALL_ID_WORKER)) ||
   1d188:	2802      	cmp	r0, #2
   1d18a:	d009      	beq.n	1d1a0 <mayfly_prio_is_equal+0x20>
   1d18c:	2000      	movs	r0, #0
#endif
	       0;
}
   1d18e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_WORKER) &&
   1d190:	f1a1 0002 	sub.w	r0, r1, #2
   1d194:	fab0 f080 	clz	r0, r0
   1d198:	0940      	lsrs	r0, r0, #5
   1d19a:	4770      	bx	lr
   1d19c:	2001      	movs	r0, #1
   1d19e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_JOB) &&
   1d1a0:	f1a1 0001 	sub.w	r0, r1, #1
   1d1a4:	fab0 f080 	clz	r0, r0
   1d1a8:	0940      	lsrs	r0, r0, #5
   1d1aa:	4770      	bx	lr

0001d1ac <mayfly_pend>:

void mayfly_pend(uint8_t caller_id, uint8_t callee_id)
{
	(void)caller_id;

	switch (callee_id) {
   1d1ac:	2901      	cmp	r1, #1
{
   1d1ae:	b508      	push	{r3, lr}
	switch (callee_id) {
   1d1b0:	d00f      	beq.n	1d1d2 <mayfly_pend+0x26>
   1d1b2:	2902      	cmp	r1, #2
   1d1b4:	d00d      	beq.n	1d1d2 <mayfly_pend+0x26>
   1d1b6:	b191      	cbz	r1, 1d1de <mayfly_pend+0x32>
	case MAYFLY_CALL_ID_JOB:
		hal_swi_job_pend();
		break;

	default:
		LL_ASSERT(0);
   1d1b8:	4a0c      	ldr	r2, [pc, #48]	; (1d1ec <mayfly_pend+0x40>)
   1d1ba:	490d      	ldr	r1, [pc, #52]	; (1d1f0 <mayfly_pend+0x44>)
   1d1bc:	480d      	ldr	r0, [pc, #52]	; (1d1f4 <mayfly_pend+0x48>)
   1d1be:	2367      	movs	r3, #103	; 0x67
   1d1c0:	f004 fcb0 	bl	21b24 <printk>
   1d1c4:	4040      	eors	r0, r0
   1d1c6:	f380 8811 	msr	BASEPRI, r0
   1d1ca:	f04f 0003 	mov.w	r0, #3
   1d1ce:	df02      	svc	2
		break;
	}
}
   1d1d0:	bd08      	pop	{r3, pc}
    NVIC->ISPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1d1d2:	4b09      	ldr	r3, [pc, #36]	; (1d1f8 <mayfly_pend+0x4c>)
   1d1d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1d1d8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d1dc:	bd08      	pop	{r3, pc}
   1d1de:	4b06      	ldr	r3, [pc, #24]	; (1d1f8 <mayfly_pend+0x4c>)
   1d1e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   1d1e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1d1e8:	bd08      	pop	{r3, pc}
   1d1ea:	bf00      	nop
   1d1ec:	000290cc 	.word	0x000290cc
   1d1f0:	0002849c 	.word	0x0002849c
   1d1f4:	00028404 	.word	0x00028404
   1d1f8:	e000e100 	.word	0xe000e100

0001d1fc <hal_ticker_instance0_caller_id_get>:

uint8_t hal_ticker_instance0_caller_id_get(uint8_t user_id)
{
	uint8_t caller_id;

	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d1fc:	2803      	cmp	r0, #3
{
   1d1fe:	b510      	push	{r4, lr}
   1d200:	4604      	mov	r4, r0
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d202:	d804      	bhi.n	1d20e <hal_ticker_instance0_caller_id_get+0x12>

	caller_id = caller_id_lut[user_id];
   1d204:	4b11      	ldr	r3, [pc, #68]	; (1d24c <hal_ticker_instance0_caller_id_get+0x50>)
   1d206:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d208:	b18c      	cbz	r4, 1d22e <hal_ticker_instance0_caller_id_get+0x32>

	return caller_id;
}
   1d20a:	4620      	mov	r0, r4
   1d20c:	bd10      	pop	{r4, pc}
	LL_ASSERT(user_id < sizeof(caller_id_lut));
   1d20e:	4a10      	ldr	r2, [pc, #64]	; (1d250 <hal_ticker_instance0_caller_id_get+0x54>)
   1d210:	4910      	ldr	r1, [pc, #64]	; (1d254 <hal_ticker_instance0_caller_id_get+0x58>)
   1d212:	4811      	ldr	r0, [pc, #68]	; (1d258 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d214:	232b      	movs	r3, #43	; 0x2b
   1d216:	f004 fc85 	bl	21b24 <printk>
   1d21a:	4040      	eors	r0, r0
   1d21c:	f380 8811 	msr	BASEPRI, r0
   1d220:	f04f 0003 	mov.w	r0, #3
   1d224:	df02      	svc	2
	caller_id = caller_id_lut[user_id];
   1d226:	4b09      	ldr	r3, [pc, #36]	; (1d24c <hal_ticker_instance0_caller_id_get+0x50>)
   1d228:	5d1c      	ldrb	r4, [r3, r4]
	LL_ASSERT(caller_id != TICKER_CALL_ID_NONE);
   1d22a:	2c00      	cmp	r4, #0
   1d22c:	d1ed      	bne.n	1d20a <hal_ticker_instance0_caller_id_get+0xe>
   1d22e:	4a08      	ldr	r2, [pc, #32]	; (1d250 <hal_ticker_instance0_caller_id_get+0x54>)
   1d230:	490a      	ldr	r1, [pc, #40]	; (1d25c <hal_ticker_instance0_caller_id_get+0x60>)
   1d232:	4809      	ldr	r0, [pc, #36]	; (1d258 <hal_ticker_instance0_caller_id_get+0x5c>)
   1d234:	232e      	movs	r3, #46	; 0x2e
   1d236:	f004 fc75 	bl	21b24 <printk>
   1d23a:	4040      	eors	r0, r0
   1d23c:	f380 8811 	msr	BASEPRI, r0
   1d240:	f04f 0003 	mov.w	r0, #3
   1d244:	df02      	svc	2
}
   1d246:	4620      	mov	r0, r4
   1d248:	bd10      	pop	{r4, pc}
   1d24a:	bf00      	nop
   1d24c:	000291d4 	.word	0x000291d4
   1d250:	00029140 	.word	0x00029140
   1d254:	00029190 	.word	0x00029190
   1d258:	00028404 	.word	0x00028404
   1d25c:	000291b0 	.word	0x000291b0

0001d260 <hal_ticker_instance0_sched>:
{
	/* return value not checked as we allow multiple calls to schedule
	 * before being actually needing the work to complete before new
	 * schedule.
	 */
	switch (caller_id) {
   1d260:	3801      	subs	r0, #1
{
   1d262:	b510      	push	{r4, lr}
   1d264:	461c      	mov	r4, r3
   1d266:	2804      	cmp	r0, #4
   1d268:	f200 8082 	bhi.w	1d370 <hal_ticker_instance0_sched+0x110>
   1d26c:	e8df f000 	tbb	[pc, r0]
   1d270:	3f302112 	.word	0x3f302112
   1d274:	03          	.byte	0x03
   1d275:	00          	.byte	0x00
			break;
		}
		break;

	case TICKER_CALL_ID_PROGRAM:
		switch (callee_id) {
   1d276:	2904      	cmp	r1, #4
   1d278:	d04a      	beq.n	1d310 <hal_ticker_instance0_sched+0xb0>
				       &m);
		}
		break;

		default:
			LL_ASSERT(0);
   1d27a:	4a44      	ldr	r2, [pc, #272]	; (1d38c <hal_ticker_instance0_sched+0x12c>)
   1d27c:	4944      	ldr	r1, [pc, #272]	; (1d390 <hal_ticker_instance0_sched+0x130>)
   1d27e:	4845      	ldr	r0, [pc, #276]	; (1d394 <hal_ticker_instance0_sched+0x134>)
   1d280:	23ba      	movs	r3, #186	; 0xba
   1d282:	f004 fc4f 	bl	21b24 <printk>
   1d286:	4040      	eors	r0, r0
   1d288:	f380 8811 	msr	BASEPRI, r0
   1d28c:	f04f 0003 	mov.w	r0, #3
   1d290:	df02      	svc	2

	default:
		LL_ASSERT(0);
		break;
	}
}
   1d292:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d294:	2904      	cmp	r1, #4
   1d296:	d043      	beq.n	1d320 <hal_ticker_instance0_sched+0xc0>
			LL_ASSERT(0);
   1d298:	4a3c      	ldr	r2, [pc, #240]	; (1d38c <hal_ticker_instance0_sched+0x12c>)
   1d29a:	493d      	ldr	r1, [pc, #244]	; (1d390 <hal_ticker_instance0_sched+0x130>)
   1d29c:	483d      	ldr	r0, [pc, #244]	; (1d394 <hal_ticker_instance0_sched+0x134>)
   1d29e:	234e      	movs	r3, #78	; 0x4e
   1d2a0:	f004 fc40 	bl	21b24 <printk>
   1d2a4:	4040      	eors	r0, r0
   1d2a6:	f380 8811 	msr	BASEPRI, r0
   1d2aa:	f04f 0003 	mov.w	r0, #3
   1d2ae:	df02      	svc	2
}
   1d2b0:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d2b2:	2903      	cmp	r1, #3
   1d2b4:	d03c      	beq.n	1d330 <hal_ticker_instance0_sched+0xd0>
			LL_ASSERT(0);
   1d2b6:	4a35      	ldr	r2, [pc, #212]	; (1d38c <hal_ticker_instance0_sched+0x12c>)
   1d2b8:	4935      	ldr	r1, [pc, #212]	; (1d390 <hal_ticker_instance0_sched+0x130>)
   1d2ba:	4836      	ldr	r0, [pc, #216]	; (1d394 <hal_ticker_instance0_sched+0x134>)
   1d2bc:	2365      	movs	r3, #101	; 0x65
   1d2be:	f004 fc31 	bl	21b24 <printk>
   1d2c2:	4040      	eors	r0, r0
   1d2c4:	f380 8811 	msr	BASEPRI, r0
   1d2c8:	f04f 0003 	mov.w	r0, #3
   1d2cc:	df02      	svc	2
}
   1d2ce:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d2d0:	2904      	cmp	r1, #4
   1d2d2:	d035      	beq.n	1d340 <hal_ticker_instance0_sched+0xe0>
			LL_ASSERT(0);
   1d2d4:	4a2d      	ldr	r2, [pc, #180]	; (1d38c <hal_ticker_instance0_sched+0x12c>)
   1d2d6:	492e      	ldr	r1, [pc, #184]	; (1d390 <hal_ticker_instance0_sched+0x130>)
   1d2d8:	482e      	ldr	r0, [pc, #184]	; (1d394 <hal_ticker_instance0_sched+0x134>)
   1d2da:	237c      	movs	r3, #124	; 0x7c
   1d2dc:	f004 fc22 	bl	21b24 <printk>
   1d2e0:	4040      	eors	r0, r0
   1d2e2:	f380 8811 	msr	BASEPRI, r0
   1d2e6:	f04f 0003 	mov.w	r0, #3
   1d2ea:	df02      	svc	2
}
   1d2ec:	bd10      	pop	{r4, pc}
		switch (callee_id) {
   1d2ee:	2903      	cmp	r1, #3
   1d2f0:	d036      	beq.n	1d360 <hal_ticker_instance0_sched+0x100>
   1d2f2:	2904      	cmp	r1, #4
   1d2f4:	d02c      	beq.n	1d350 <hal_ticker_instance0_sched+0xf0>
			LL_ASSERT(0);
   1d2f6:	4a25      	ldr	r2, [pc, #148]	; (1d38c <hal_ticker_instance0_sched+0x12c>)
   1d2f8:	4925      	ldr	r1, [pc, #148]	; (1d390 <hal_ticker_instance0_sched+0x130>)
   1d2fa:	4826      	ldr	r0, [pc, #152]	; (1d394 <hal_ticker_instance0_sched+0x134>)
   1d2fc:	23a2      	movs	r3, #162	; 0xa2
   1d2fe:	f004 fc11 	bl	21b24 <printk>
   1d302:	4040      	eors	r0, r0
   1d304:	f380 8811 	msr	BASEPRI, r0
   1d308:	f04f 0003 	mov.w	r0, #3
   1d30c:	df02      	svc	2
}
   1d30e:	bd10      	pop	{r4, pc}
			m.param = instance;
   1d310:	4b21      	ldr	r3, [pc, #132]	; (1d398 <hal_ticker_instance0_sched+0x138>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d312:	2102      	movs	r1, #2
			m.param = instance;
   1d314:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d316:	2003      	movs	r0, #3
}
   1d318:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_PROGRAM,
   1d31c:	f7f3 bad4 	b.w	108c8 <mayfly_enqueue>
			m.param = instance;
   1d320:	4b1e      	ldr	r3, [pc, #120]	; (1d39c <hal_ticker_instance0_sched+0x13c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d322:	2102      	movs	r1, #2
			m.param = instance;
   1d324:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d326:	2000      	movs	r0, #0
}
   1d328:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_ISR,
   1d32c:	f7f3 bacc 	b.w	108c8 <mayfly_enqueue>
			m.param = instance;
   1d330:	4b1b      	ldr	r3, [pc, #108]	; (1d3a0 <hal_ticker_instance0_sched+0x140>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d332:	2101      	movs	r1, #1
			m.param = instance;
   1d334:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d336:	4608      	mov	r0, r1
}
   1d338:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_TRIGGER,
   1d33c:	f7f3 bac4 	b.w	108c8 <mayfly_enqueue>
			m.param = instance;
   1d340:	4b18      	ldr	r3, [pc, #96]	; (1d3a4 <hal_ticker_instance0_sched+0x144>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d342:	2102      	movs	r1, #2
			m.param = instance;
   1d344:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d346:	2001      	movs	r0, #1
}
   1d348:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_WORKER,
   1d34c:	f7f3 babc 	b.w	108c8 <mayfly_enqueue>
			m.param = instance;
   1d350:	4b15      	ldr	r3, [pc, #84]	; (1d3a8 <hal_ticker_instance0_sched+0x148>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d352:	2102      	movs	r1, #2
			m.param = instance;
   1d354:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d356:	4608      	mov	r0, r1
}
   1d358:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d35c:	f7f3 bab4 	b.w	108c8 <mayfly_enqueue>
			m.param = instance;
   1d360:	4b12      	ldr	r3, [pc, #72]	; (1d3ac <hal_ticker_instance0_sched+0x14c>)
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d362:	2101      	movs	r1, #1
			m.param = instance;
   1d364:	609c      	str	r4, [r3, #8]
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d366:	2002      	movs	r0, #2
}
   1d368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			mayfly_enqueue(TICKER_MAYFLY_CALL_ID_JOB,
   1d36c:	f7f3 baac 	b.w	108c8 <mayfly_enqueue>
		LL_ASSERT(0);
   1d370:	4a06      	ldr	r2, [pc, #24]	; (1d38c <hal_ticker_instance0_sched+0x12c>)
   1d372:	4907      	ldr	r1, [pc, #28]	; (1d390 <hal_ticker_instance0_sched+0x130>)
   1d374:	4807      	ldr	r0, [pc, #28]	; (1d394 <hal_ticker_instance0_sched+0x134>)
   1d376:	23c0      	movs	r3, #192	; 0xc0
   1d378:	f004 fbd4 	bl	21b24 <printk>
   1d37c:	4040      	eors	r0, r0
   1d37e:	f380 8811 	msr	BASEPRI, r0
   1d382:	f04f 0003 	mov.w	r0, #3
   1d386:	df02      	svc	2
}
   1d388:	bd10      	pop	{r4, pc}
   1d38a:	bf00      	nop
   1d38c:	00029140 	.word	0x00029140
   1d390:	0002849c 	.word	0x0002849c
   1d394:	00028404 	.word	0x00028404
   1d398:	20000670 	.word	0x20000670
   1d39c:	20000660 	.word	0x20000660
   1d3a0:	20000650 	.word	0x20000650
   1d3a4:	200006a0 	.word	0x200006a0
   1d3a8:	20000680 	.word	0x20000680
   1d3ac:	20000690 	.word	0x20000690

0001d3b0 <hal_ticker_instance0_trigger_set>:

void hal_ticker_instance0_trigger_set(uint32_t value)
{
   1d3b0:	4601      	mov	r1, r0
	cntr_cmp_set(0, value);
   1d3b2:	2000      	movs	r0, #0
   1d3b4:	f7ff b9f2 	b.w	1c79c <cntr_cmp_set>

0001d3b8 <hci_vendor_read_static_addr>:

#include <soc.h>

uint8_t hci_vendor_read_static_addr(struct bt_hci_vs_static_addr addrs[],
				 uint8_t size)
{
   1d3b8:	b508      	push	{r3, lr}
	/* only one supported */
	ARG_UNUSED(size);

	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d3ba:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d3be:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   1d3c2:	3201      	adds	r2, #1
   1d3c4:	d008      	beq.n	1d3d8 <hci_vendor_read_static_addr+0x20>
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
	     (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
   1d3c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1d3ca:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d3ce:	f013 0301 	ands.w	r3, r3, #1
   1d3d2:	d10a      	bne.n	1d3ea <hci_vendor_read_static_addr+0x32>
		}

		return 1;
	}

	return 0;
   1d3d4:	4618      	mov	r0, r3
}
   1d3d6:	bd08      	pop	{r3, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
   1d3d8:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
   1d3dc:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1d3e0:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
   1d3e2:	4293      	cmp	r3, r2
   1d3e4:	d1ef      	bne.n	1d3c6 <hci_vendor_read_static_addr+0xe>
	return 0;
   1d3e6:	2000      	movs	r0, #0
}
   1d3e8:	bd08      	pop	{r3, pc}
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addrs[0].bdaddr.val[0]);
   1d3ea:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
   1d3ee:	7003      	strb	r3, [r0, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d3f0:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d3f2:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d3f6:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d3fa:	7043      	strb	r3, [r0, #1]
	dst[0] = val;
   1d3fc:	7081      	strb	r1, [r0, #2]
	dst[1] = val >> 8;
   1d3fe:	f880 c003 	strb.w	ip, [r0, #3]
		sys_put_le16(NRF_FICR->DEVICEADDR[1], &addrs[0].bdaddr.val[4]);
   1d402:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
	dst[0] = val;
   1d406:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
   1d408:	f3c3 2307 	ubfx	r3, r3, #8, #8
		BT_ADDR_SET_STATIC(&addrs[0].bdaddr);
   1d40c:	f063 033f 	orn	r3, r3, #63	; 0x3f
   1d410:	7143      	strb	r3, [r0, #5]
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d412:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1d416:	3301      	adds	r3, #1
   1d418:	d03b      	beq.n	1d492 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d41a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
		if ((NRF_FICR->IR[0] != UINT32_MAX) &&
   1d41e:	3301      	adds	r3, #1
   1d420:	d037      	beq.n	1d492 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d422:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
		    (NRF_FICR->IR[1] != UINT32_MAX) &&
   1d426:	3301      	adds	r3, #1
   1d428:	d033      	beq.n	1d492 <hci_vendor_read_static_addr+0xda>
		    (NRF_FICR->IR[3] != UINT32_MAX)) {
   1d42a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
		    (NRF_FICR->IR[2] != UINT32_MAX) &&
   1d42e:	3301      	adds	r3, #1
   1d430:	d02f      	beq.n	1d492 <hci_vendor_read_static_addr+0xda>
			sys_put_le32(NRF_FICR->IR[0], &addrs[0].ir[0]);
   1d432:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
   1d436:	7183      	strb	r3, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
   1d438:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d43a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d43e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d442:	7201      	strb	r1, [r0, #8]
	dst[1] = val >> 8;
   1d444:	f880 c009 	strb.w	ip, [r0, #9]
   1d448:	71c3      	strb	r3, [r0, #7]
			sys_put_le32(NRF_FICR->IR[1], &addrs[0].ir[4]);
   1d44a:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
   1d44e:	7283      	strb	r3, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
   1d450:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d452:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d456:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d45a:	7301      	strb	r1, [r0, #12]
	dst[1] = val >> 8;
   1d45c:	f880 c00d 	strb.w	ip, [r0, #13]
   1d460:	72c3      	strb	r3, [r0, #11]
			sys_put_le32(NRF_FICR->IR[2], &addrs[0].ir[8]);
   1d462:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
   1d466:	7383      	strb	r3, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
   1d468:	0c19      	lsrs	r1, r3, #16
	dst[1] = val >> 8;
   1d46a:	ea4f 2c11 	mov.w	ip, r1, lsr #8
   1d46e:	f3c3 2307 	ubfx	r3, r3, #8, #8
	dst[0] = val;
   1d472:	7401      	strb	r1, [r0, #16]
	dst[1] = val >> 8;
   1d474:	73c3      	strb	r3, [r0, #15]
   1d476:	f880 c011 	strb.w	ip, [r0, #17]
			sys_put_le32(NRF_FICR->IR[3], &addrs[0].ir[12]);
   1d47a:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
   1d47e:	7483      	strb	r3, [r0, #18]
	sys_put_le16(val >> 16, &dst[2]);
   1d480:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d482:	0a11      	lsrs	r1, r2, #8
   1d484:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d488:	74c3      	strb	r3, [r0, #19]
	dst[0] = val;
   1d48a:	7502      	strb	r2, [r0, #20]
	dst[1] = val >> 8;
   1d48c:	7541      	strb	r1, [r0, #21]
		return 1;
   1d48e:	2001      	movs	r0, #1
}
   1d490:	bd08      	pop	{r3, pc}
			(void)memset(addrs[0].ir, 0x00, sizeof(addrs[0].ir));
   1d492:	2210      	movs	r2, #16
   1d494:	2100      	movs	r1, #0
   1d496:	3006      	adds	r0, #6
   1d498:	f007 f811 	bl	244be <memset>
		return 1;
   1d49c:	2001      	movs	r0, #1
}
   1d49e:	bd08      	pop	{r3, pc}

0001d4a0 <hci_vendor_read_key_hierarchy_roots>:

void hci_vendor_read_key_hierarchy_roots(uint8_t ir[16], uint8_t er[16])
{
   1d4a0:	b510      	push	{r4, lr}
	/* Mark IR as invalid.
	 * No public address is available, and static address IR should be read
	 * using Read Static Addresses command.
	 */
	(void)memset(ir, 0x00, 16);
   1d4a2:	2210      	movs	r2, #16
{
   1d4a4:	460c      	mov	r4, r1
	(void)memset(ir, 0x00, 16);
   1d4a6:	2100      	movs	r1, #0
   1d4a8:	f007 f809 	bl	244be <memset>

	/* Fill in ER if present */
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d4ac:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1d4b0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
   1d4b4:	3201      	adds	r2, #1
   1d4b6:	d034      	beq.n	1d522 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d4b8:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
   1d4bc:	3201      	adds	r2, #1
   1d4be:	d030      	beq.n	1d522 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d4c0:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
   1d4c4:	3201      	adds	r2, #1
   1d4c6:	d02c      	beq.n	1d522 <hci_vendor_read_key_hierarchy_roots+0x82>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
   1d4c8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
   1d4cc:	3201      	adds	r2, #1
   1d4ce:	d028      	beq.n	1d522 <hci_vendor_read_key_hierarchy_roots+0x82>
		sys_put_le32(NRF_FICR->ER[0], &er[0]);
   1d4d0:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80
	dst[0] = val;
   1d4d4:	7022      	strb	r2, [r4, #0]
	sys_put_le16(val >> 16, &dst[2]);
   1d4d6:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d4d8:	0a08      	lsrs	r0, r1, #8
   1d4da:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1d4de:	70a1      	strb	r1, [r4, #2]
	dst[1] = val >> 8;
   1d4e0:	70e0      	strb	r0, [r4, #3]
   1d4e2:	7062      	strb	r2, [r4, #1]
		sys_put_le32(NRF_FICR->ER[1], &er[4]);
   1d4e4:	f8d3 2084 	ldr.w	r2, [r3, #132]	; 0x84
	dst[0] = val;
   1d4e8:	7122      	strb	r2, [r4, #4]
	sys_put_le16(val >> 16, &dst[2]);
   1d4ea:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d4ec:	0a08      	lsrs	r0, r1, #8
   1d4ee:	f3c2 2207 	ubfx	r2, r2, #8, #8
	dst[0] = val;
   1d4f2:	71a1      	strb	r1, [r4, #6]
	dst[1] = val >> 8;
   1d4f4:	71e0      	strb	r0, [r4, #7]
   1d4f6:	7162      	strb	r2, [r4, #5]
		sys_put_le32(NRF_FICR->ER[2], &er[8]);
   1d4f8:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
	dst[0] = val;
   1d4fc:	7222      	strb	r2, [r4, #8]
	sys_put_le16(val >> 16, &dst[2]);
   1d4fe:	0c11      	lsrs	r1, r2, #16
	dst[1] = val >> 8;
   1d500:	0a08      	lsrs	r0, r1, #8
   1d502:	f3c2 2207 	ubfx	r2, r2, #8, #8
   1d506:	7262      	strb	r2, [r4, #9]
	dst[0] = val;
   1d508:	72a1      	strb	r1, [r4, #10]
	dst[1] = val >> 8;
   1d50a:	72e0      	strb	r0, [r4, #11]
		sys_put_le32(NRF_FICR->ER[3], &er[12]);
   1d50c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	dst[0] = val;
   1d510:	7323      	strb	r3, [r4, #12]
	sys_put_le16(val >> 16, &dst[2]);
   1d512:	0c1a      	lsrs	r2, r3, #16
	dst[1] = val >> 8;
   1d514:	0a11      	lsrs	r1, r2, #8
   1d516:	f3c3 2307 	ubfx	r3, r3, #8, #8
   1d51a:	7363      	strb	r3, [r4, #13]
	dst[0] = val;
   1d51c:	73a2      	strb	r2, [r4, #14]
	dst[1] = val >> 8;
   1d51e:	73e1      	strb	r1, [r4, #15]
	} else {
		/* Mark ER as invalid */
		(void)memset(er, 0x00, 16);
	}
}
   1d520:	bd10      	pop	{r4, pc}
		(void)memset(er, 0x00, 16);
   1d522:	4620      	mov	r0, r4
   1d524:	2210      	movs	r2, #16
}
   1d526:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		(void)memset(er, 0x00, 16);
   1d52a:	2100      	movs	r1, #0
   1d52c:	f006 bfc7 	b.w	244be <memset>

0001d530 <net_buf_pool_get>:
extern struct net_buf_pool _net_buf_pool_list[];

struct net_buf_pool *net_buf_pool_get(int id)
{
	return &_net_buf_pool_list[id];
}
   1d530:	4b02      	ldr	r3, [pc, #8]	; (1d53c <net_buf_pool_get+0xc>)
   1d532:	2228      	movs	r2, #40	; 0x28
   1d534:	fb02 3000 	mla	r0, r2, r0, r3
   1d538:	4770      	bx	lr
   1d53a:	bf00      	nop
   1d53c:	2000a058 	.word	0x2000a058

0001d540 <net_buf_id>:
	return pool - _net_buf_pool_list;
}

int net_buf_id(struct net_buf *buf)
{
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d540:	7982      	ldrb	r2, [r0, #6]

	return buf - pool->__bufs;
   1d542:	4b05      	ldr	r3, [pc, #20]	; (1d558 <net_buf_id+0x18>)
   1d544:	2128      	movs	r1, #40	; 0x28
   1d546:	fb01 3302 	mla	r3, r1, r2, r3
   1d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1d54c:	1ac0      	subs	r0, r0, r3
}
   1d54e:	4b03      	ldr	r3, [pc, #12]	; (1d55c <net_buf_id+0x1c>)
	return buf - pool->__bufs;
   1d550:	10c0      	asrs	r0, r0, #3
}
   1d552:	4358      	muls	r0, r3
   1d554:	4770      	bx	lr
   1d556:	bf00      	nop
   1d558:	2000a058 	.word	0x2000a058
   1d55c:	aaaaaaab 	.word	0xaaaaaaab

0001d560 <fixed_data_alloc>:
	.unref = mem_pool_data_unref,
};

static uint8_t *fixed_data_alloc(struct net_buf *buf, size_t *size,
			      k_timeout_t timeout)
{
   1d560:	b510      	push	{r4, lr}
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d562:	4b0a      	ldr	r3, [pc, #40]	; (1d58c <fixed_data_alloc+0x2c>)
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d564:	7982      	ldrb	r2, [r0, #6]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d566:	2428      	movs	r4, #40	; 0x28
   1d568:	fb04 3302 	mla	r3, r4, r2, r3

	*size = MIN(fixed->data_size, *size);
   1d56c:	680a      	ldr	r2, [r1, #0]
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   1d56e:	6a1b      	ldr	r3, [r3, #32]
   1d570:	685c      	ldr	r4, [r3, #4]
	*size = MIN(fixed->data_size, *size);
   1d572:	6823      	ldr	r3, [r4, #0]
   1d574:	429a      	cmp	r2, r3
   1d576:	bf94      	ite	ls
   1d578:	600a      	strls	r2, [r1, #0]
   1d57a:	600b      	strhi	r3, [r1, #0]

	return fixed->data_pool + fixed->data_size * net_buf_id(buf);
   1d57c:	f7ff ffe0 	bl	1d540 <net_buf_id>
   1d580:	e9d4 2300 	ldrd	r2, r3, [r4]
}
   1d584:	fb02 3000 	mla	r0, r2, r0, r3
   1d588:	bd10      	pop	{r4, pc}
   1d58a:	bf00      	nop
   1d58c:	2000a058 	.word	0x2000a058

0001d590 <net_buf_alloc_len>:
					int line)
#else
struct net_buf *net_buf_alloc_len(struct net_buf_pool *pool, size_t size,
				  k_timeout_t timeout)
#endif
{
   1d590:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d594:	4605      	mov	r5, r0
   1d596:	9101      	str	r1, [sp, #4]
	uint64_t end = z_timeout_end_calc(timeout);
   1d598:	4610      	mov	r0, r2
   1d59a:	4619      	mov	r1, r3
{
   1d59c:	4691      	mov	r9, r2
   1d59e:	4698      	mov	r8, r3
   1d5a0:	4617      	mov	r7, r2
   1d5a2:	461e      	mov	r6, r3
	uint64_t end = z_timeout_end_calc(timeout);
   1d5a4:	f009 fe6a 	bl	2727c <z_timeout_end_calc>
   1d5a8:	4682      	mov	sl, r0
   1d5aa:	468b      	mov	fp, r1
	__asm__ volatile(
   1d5ac:	f04f 0320 	mov.w	r3, #32
   1d5b0:	f3ef 8111 	mrs	r1, BASEPRI
   1d5b4:	f383 8811 	msr	BASEPRI, r3
   1d5b8:	f3bf 8f6f 	isb	sy
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1d5bc:	8b6b      	ldrh	r3, [r5, #26]
   1d5be:	2b00      	cmp	r3, #0
   1d5c0:	d055      	beq.n	1d66e <net_buf_alloc_len+0xde>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1d5c2:	8b2a      	ldrh	r2, [r5, #24]
   1d5c4:	429a      	cmp	r2, r3
   1d5c6:	d93e      	bls.n	1d646 <net_buf_alloc_len+0xb6>
   1d5c8:	9100      	str	r1, [sp, #0]
	return z_impl_k_queue_get(queue, timeout);
   1d5ca:	2200      	movs	r2, #0
   1d5cc:	2300      	movs	r3, #0
   1d5ce:	4628      	mov	r0, r5
   1d5d0:	f002 fb8c 	bl	1fcec <z_impl_k_queue_get>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
			if (buf) {
   1d5d4:	9900      	ldr	r1, [sp, #0]
   1d5d6:	4604      	mov	r4, r0
   1d5d8:	2800      	cmp	r0, #0
   1d5da:	d034      	beq.n	1d646 <net_buf_alloc_len+0xb6>
	__asm__ volatile(
   1d5dc:	f381 8811 	msr	BASEPRI, r1
   1d5e0:	f3bf 8f6f 	isb	sy
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	if (size) {
   1d5e4:	9b01      	ldr	r3, [sp, #4]
   1d5e6:	2b00      	cmp	r3, #0
   1d5e8:	d051      	beq.n	1d68e <net_buf_alloc_len+0xfe>
#if __ASSERT_ON
		size_t req_size = size;
#endif
		if (!K_TIMEOUT_EQ(timeout, K_NO_WAIT) &&
   1d5ea:	ea58 0309 	orrs.w	r3, r8, r9
   1d5ee:	d00f      	beq.n	1d610 <net_buf_alloc_len+0x80>
   1d5f0:	f1b8 3fff 	cmp.w	r8, #4294967295
   1d5f4:	bf08      	it	eq
   1d5f6:	f1b9 3fff 	cmpeq.w	r9, #4294967295
   1d5fa:	d009      	beq.n	1d610 <net_buf_alloc_len+0x80>
		    !K_TIMEOUT_EQ(timeout, K_FOREVER)) {
			int64_t remaining = end - z_tick_get();
   1d5fc:	f003 fa1a 	bl	20a34 <z_tick_get>
   1d600:	ebba 0700 	subs.w	r7, sl, r0
   1d604:	eb6b 0601 	sbc.w	r6, fp, r1
   1d608:	2e00      	cmp	r6, #0
   1d60a:	bfbc      	itt	lt
   1d60c:	2700      	movlt	r7, #0
   1d60e:	463e      	movlt	r6, r7
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d610:	79a3      	ldrb	r3, [r4, #6]
	return pool->alloc->cb->alloc(buf, size, timeout);
   1d612:	f8df 8090 	ldr.w	r8, [pc, #144]	; 1d6a4 <net_buf_alloc_len+0x114>
   1d616:	2228      	movs	r2, #40	; 0x28
   1d618:	fb02 8303 	mla	r3, r2, r3, r8
   1d61c:	a901      	add	r1, sp, #4
   1d61e:	6a1b      	ldr	r3, [r3, #32]
   1d620:	681b      	ldr	r3, [r3, #0]
   1d622:	463a      	mov	r2, r7
   1d624:	681d      	ldr	r5, [r3, #0]
   1d626:	4620      	mov	r0, r4
   1d628:	4633      	mov	r3, r6
   1d62a:	47a8      	blx	r5
   1d62c:	4605      	mov	r5, r0
			} else {
				timeout = Z_TIMEOUT_TICKS(remaining);
			}
		}

		buf->__buf = data_alloc(buf, &size, timeout);
   1d62e:	6120      	str	r0, [r4, #16]
		if (!buf->__buf) {
   1d630:	bb70      	cbnz	r0, 1d690 <net_buf_alloc_len+0x100>
	k_lifo_put(&pool->free, buf);
   1d632:	79a0      	ldrb	r0, [r4, #6]
   1d634:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d638:	4621      	mov	r1, r4
   1d63a:	eb08 00c0 	add.w	r0, r8, r0, lsl #3
   1d63e:	f009 fc0d 	bl	26e5c <k_queue_prepend>
			NET_BUF_ERR("%s():%d: Failed to allocate data",
				    func, line);
			net_buf_destroy(buf);
			return NULL;
   1d642:	462c      	mov	r4, r5
}
   1d644:	e01f      	b.n	1d686 <net_buf_alloc_len+0xf6>
		uninit_count = pool->uninit_count--;
   1d646:	8b6b      	ldrh	r3, [r5, #26]
   1d648:	1e5a      	subs	r2, r3, #1
   1d64a:	836a      	strh	r2, [r5, #26]
   1d64c:	f381 8811 	msr	BASEPRI, r1
   1d650:	f3bf 8f6f 	isb	sy
	buf = &pool->__bufs[pool->buf_count - uninit_count];
   1d654:	8b2c      	ldrh	r4, [r5, #24]
   1d656:	1ae3      	subs	r3, r4, r3
   1d658:	6a6c      	ldr	r4, [r5, #36]	; 0x24
   1d65a:	2018      	movs	r0, #24
   1d65c:	fb00 4403 	mla	r4, r0, r3, r4
	return pool - _net_buf_pool_list;
   1d660:	4810      	ldr	r0, [pc, #64]	; (1d6a4 <net_buf_alloc_len+0x114>)
   1d662:	4b11      	ldr	r3, [pc, #68]	; (1d6a8 <net_buf_alloc_len+0x118>)
   1d664:	1a2d      	subs	r5, r5, r0
   1d666:	10ed      	asrs	r5, r5, #3
   1d668:	435d      	muls	r5, r3
	buf->pool_id = pool_id(pool);
   1d66a:	71a5      	strb	r5, [r4, #6]
		goto success;
   1d66c:	e7ba      	b.n	1d5e4 <net_buf_alloc_len+0x54>
   1d66e:	f381 8811 	msr	BASEPRI, r1
   1d672:	f3bf 8f6f 	isb	sy
   1d676:	464a      	mov	r2, r9
   1d678:	4643      	mov	r3, r8
   1d67a:	4628      	mov	r0, r5
   1d67c:	f002 fb36 	bl	1fcec <z_impl_k_queue_get>
	if (!buf) {
   1d680:	4604      	mov	r4, r0
   1d682:	2800      	cmp	r0, #0
   1d684:	d1ae      	bne.n	1d5e4 <net_buf_alloc_len+0x54>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
	atomic_dec(&pool->avail_count);
	__ASSERT_NO_MSG(atomic_get(&pool->avail_count) >= 0);
#endif
	return buf;
}
   1d686:	4620      	mov	r0, r4
   1d688:	b003      	add	sp, #12
   1d68a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		buf->__buf = NULL;
   1d68e:	6123      	str	r3, [r4, #16]
	buf->frags = NULL;
   1d690:	2300      	movs	r3, #0
	buf->ref   = 1U;
   1d692:	2201      	movs	r2, #1
	buf->frags = NULL;
   1d694:	6023      	str	r3, [r4, #0]
	buf->ref   = 1U;
   1d696:	80a2      	strh	r2, [r4, #4]
	buf->len  = 0U;
   1d698:	81a3      	strh	r3, [r4, #12]
	buf->size  = size;
   1d69a:	9a01      	ldr	r2, [sp, #4]
	buf->data = buf->__buf;
   1d69c:	6923      	ldr	r3, [r4, #16]
   1d69e:	81e2      	strh	r2, [r4, #14]
   1d6a0:	60a3      	str	r3, [r4, #8]
	return buf;
   1d6a2:	e7f0      	b.n	1d686 <net_buf_alloc_len+0xf6>
   1d6a4:	2000a058 	.word	0x2000a058
   1d6a8:	cccccccd 	.word	0xcccccccd

0001d6ac <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1d6ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d6b0:	4d17      	ldr	r5, [pc, #92]	; (1d710 <net_buf_unref+0x64>)
   1d6b2:	4604      	mov	r4, r0
			return;
		}

		if (buf->__buf) {
			data_unref(buf, buf->__buf);
			buf->__buf = NULL;
   1d6b4:	2600      	movs	r6, #0
	pool->alloc->cb->unref(buf, data);
   1d6b6:	2728      	movs	r7, #40	; 0x28
	while (buf) {
   1d6b8:	b90c      	cbnz	r4, 1d6be <net_buf_unref+0x12>
			net_buf_destroy(buf);
		}

		buf = frags;
	}
}
   1d6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (--buf->ref > 0) {
   1d6be:	7923      	ldrb	r3, [r4, #4]
		struct net_buf *frags = buf->frags;
   1d6c0:	f8d4 8000 	ldr.w	r8, [r4]
		if (--buf->ref > 0) {
   1d6c4:	3b01      	subs	r3, #1
   1d6c6:	b2db      	uxtb	r3, r3
   1d6c8:	7123      	strb	r3, [r4, #4]
   1d6ca:	2b00      	cmp	r3, #0
   1d6cc:	d1f5      	bne.n	1d6ba <net_buf_unref+0xe>
		if (buf->__buf) {
   1d6ce:	6921      	ldr	r1, [r4, #16]
   1d6d0:	b159      	cbz	r1, 1d6ea <net_buf_unref+0x3e>
	if (buf->flags & NET_BUF_EXTERNAL_DATA) {
   1d6d2:	7963      	ldrb	r3, [r4, #5]
   1d6d4:	079b      	lsls	r3, r3, #30
   1d6d6:	d407      	bmi.n	1d6e8 <net_buf_unref+0x3c>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1d6d8:	79a3      	ldrb	r3, [r4, #6]
	pool->alloc->cb->unref(buf, data);
   1d6da:	fb07 5303 	mla	r3, r7, r3, r5
   1d6de:	4620      	mov	r0, r4
   1d6e0:	6a1b      	ldr	r3, [r3, #32]
   1d6e2:	681b      	ldr	r3, [r3, #0]
   1d6e4:	689b      	ldr	r3, [r3, #8]
   1d6e6:	4798      	blx	r3
			buf->__buf = NULL;
   1d6e8:	6126      	str	r6, [r4, #16]
		pool = net_buf_pool_get(buf->pool_id);
   1d6ea:	79a0      	ldrb	r0, [r4, #6]
		buf->data = NULL;
   1d6ec:	60a6      	str	r6, [r4, #8]
		if (pool->destroy) {
   1d6ee:	fb07 5300 	mla	r3, r7, r0, r5
		buf->frags = NULL;
   1d6f2:	6026      	str	r6, [r4, #0]
		if (pool->destroy) {
   1d6f4:	69db      	ldr	r3, [r3, #28]
   1d6f6:	b11b      	cbz	r3, 1d700 <net_buf_unref+0x54>
			pool->destroy(buf);
   1d6f8:	4620      	mov	r0, r4
   1d6fa:	4798      	blx	r3
{
   1d6fc:	4644      	mov	r4, r8
   1d6fe:	e7db      	b.n	1d6b8 <net_buf_unref+0xc>
	k_lifo_put(&pool->free, buf);
   1d700:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1d704:	4621      	mov	r1, r4
   1d706:	eb05 00c0 	add.w	r0, r5, r0, lsl #3
   1d70a:	f009 fba7 	bl	26e5c <k_queue_prepend>
}
   1d70e:	e7f5      	b.n	1d6fc <net_buf_unref+0x50>
   1d710:	2000a058 	.word	0x2000a058

0001d714 <gpio_nrfx_init>:
}

#define GPIOTE_NODE DT_INST(0, nordic_nrf_gpiote)

static int gpio_nrfx_init(const struct device *port)
{
   1d714:	b508      	push	{r3, lr}
	static bool gpio_initialized;

	if (!gpio_initialized) {
   1d716:	4b09      	ldr	r3, [pc, #36]	; (1d73c <gpio_nrfx_init+0x28>)
   1d718:	781a      	ldrb	r2, [r3, #0]
   1d71a:	b96a      	cbnz	r2, 1d738 <gpio_nrfx_init+0x24>
		gpio_initialized = true;
   1d71c:	2101      	movs	r1, #1
   1d71e:	7019      	strb	r1, [r3, #0]
		IRQ_CONNECT(DT_IRQN(GPIOTE_NODE), DT_IRQ(GPIOTE_NODE, priority),
   1d720:	2006      	movs	r0, #6
   1d722:	2105      	movs	r1, #5
   1d724:	f7ea f844 	bl	77b0 <z_arm_irq_priority_set>
			    gpiote_event_handler, NULL, 0);

		irq_enable(DT_IRQN(GPIOTE_NODE));
   1d728:	2006      	movs	r0, #6
   1d72a:	f7ea f80f 	bl	774c <arch_irq_enable>
    return ((uint32_t)p_reg + event);
}

NRF_STATIC_INLINE void nrf_gpiote_int_enable(NRF_GPIOTE_Type * p_reg, uint32_t mask)
{
    p_reg->INTENSET = mask;
   1d72e:	4b04      	ldr	r3, [pc, #16]	; (1d740 <gpio_nrfx_init+0x2c>)
   1d730:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   1d734:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		nrf_gpiote_int_enable(NRF_GPIOTE, NRF_GPIOTE_INT_PORT_MASK);
	}

	return 0;
}
   1d738:	2000      	movs	r0, #0
   1d73a:	bd08      	pop	{r3, pc}
   1d73c:	2000f321 	.word	0x2000f321
   1d740:	40006000 	.word	0x40006000

0001d744 <gpio_nrfx_config>:
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d744:	4b2b      	ldr	r3, [pc, #172]	; (1d7f4 <gpio_nrfx_config+0xb0>)
{
   1d746:	b5f0      	push	{r4, r5, r6, r7, lr}
	return port->config;
   1d748:	6844      	ldr	r4, [r0, #4]
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d74a:	482b      	ldr	r0, [pc, #172]	; (1d7f8 <gpio_nrfx_config+0xb4>)
   1d74c:	4013      	ands	r3, r2
   1d74e:	4283      	cmp	r3, r0
   1d750:	d041      	beq.n	1d7d6 <gpio_nrfx_config+0x92>
   1d752:	d80d      	bhi.n	1d770 <gpio_nrfx_config+0x2c>
   1d754:	2b06      	cmp	r3, #6
   1d756:	d015      	beq.n	1d784 <gpio_nrfx_config+0x40>
   1d758:	d805      	bhi.n	1d766 <gpio_nrfx_config+0x22>
   1d75a:	b19b      	cbz	r3, 1d784 <gpio_nrfx_config+0x40>
   1d75c:	2b02      	cmp	r3, #2
   1d75e:	d03c      	beq.n	1d7da <gpio_nrfx_config+0x96>
   1d760:	f06f 0015 	mvn.w	r0, #21
   1d764:	e036      	b.n	1d7d4 <gpio_nrfx_config+0x90>
   1d766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   1d76a:	d1f9      	bne.n	1d760 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_H0S1;
   1d76c:	2301      	movs	r3, #1
   1d76e:	e009      	b.n	1d784 <gpio_nrfx_config+0x40>
	switch (flags & (GPIO_DS_LOW_MASK | GPIO_DS_HIGH_MASK |
   1d770:	4822      	ldr	r0, [pc, #136]	; (1d7fc <gpio_nrfx_config+0xb8>)
   1d772:	4283      	cmp	r3, r0
   1d774:	d033      	beq.n	1d7de <gpio_nrfx_config+0x9a>
   1d776:	f5b3 0fa0 	cmp.w	r3, #5242880	; 0x500000
   1d77a:	d032      	beq.n	1d7e2 <gpio_nrfx_config+0x9e>
   1d77c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
   1d780:	d1ee      	bne.n	1d760 <gpio_nrfx_config+0x1c>
		drive = NRF_GPIO_PIN_S0H1;
   1d782:	2302      	movs	r3, #2
	if ((flags & GPIO_PULL_UP) != 0) {
   1d784:	06d0      	lsls	r0, r2, #27
		pull = NRF_GPIO_PIN_NOPULL;
   1d786:	bf54      	ite	pl
   1d788:	f3c2 1640 	ubfxpl	r6, r2, #5, #1
		pull = NRF_GPIO_PIN_PULLUP;
   1d78c:	2603      	movmi	r6, #3
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d78e:	f482 7580 	eor.w	r5, r2, #256	; 0x100
	if ((flags & GPIO_OUTPUT) != 0) {
   1d792:	0597      	lsls	r7, r2, #22
	dir = ((flags & GPIO_OUTPUT) != 0)
   1d794:	f3c2 2040 	ubfx	r0, r2, #9, #1
		: NRF_GPIO_PIN_INPUT_DISCONNECT;
   1d798:	f3c5 2500 	ubfx	r5, r5, #8, #1
	if ((flags & GPIO_OUTPUT) != 0) {
   1d79c:	d507      	bpl.n	1d7ae <gpio_nrfx_config+0x6a>
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d79e:	f412 6f00 	tst.w	r2, #2048	; 0x800
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   1d7a2:	6867      	ldr	r7, [r4, #4]
		if ((flags & GPIO_OUTPUT_INIT_HIGH) != 0) {
   1d7a4:	d01f      	beq.n	1d7e6 <gpio_nrfx_config+0xa2>
			nrf_gpio_port_out_set(reg, BIT(pin));
   1d7a6:	2201      	movs	r2, #1
   1d7a8:	408a      	lsls	r2, r1
}


NRF_STATIC_INLINE void nrf_gpio_port_out_set(NRF_GPIO_Type * p_reg, uint32_t set_mask)
{
    p_reg->OUTSET = set_mask;
   1d7aa:	f8c7 2508 	str.w	r2, [r7, #1288]	; 0x508
NRF_STATIC_INLINE uint32_t nrf_gpio_pin_port_number_extract(uint32_t * p_pin)
{
    uint32_t pin_number = *p_pin;
    *p_pin = pin_number & 0x1F;

    return pin_number >> 5;
   1d7ae:	7a22      	ldrb	r2, [r4, #8]
        case 1: return NRF_P1;
   1d7b0:	4c13      	ldr	r4, [pc, #76]	; (1d800 <gpio_nrfx_config+0xbc>)
   1d7b2:	2a01      	cmp	r2, #1
    *p_pin = pin_number & 0x1F;
   1d7b4:	f001 011f 	and.w	r1, r1, #31
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d7b8:	ea40 0245 	orr.w	r2, r0, r5, lsl #1
        case 1: return NRF_P1;
   1d7bc:	bf18      	it	ne
   1d7be:	f04f 44a0 	movne.w	r4, #1342177280	; 0x50000000
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d7c2:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d7c6:	f501 71e0 	add.w	r1, r1, #448	; 0x1c0
                               | ((uint32_t)drive << GPIO_PIN_CNF_DRIVE_Pos)
   1d7ca:	ea43 0386 	orr.w	r3, r3, r6, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1d7ce:	f844 3021 	str.w	r3, [r4, r1, lsl #2]
	return 0;
   1d7d2:	2000      	movs	r0, #0
}
   1d7d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		drive = NRF_GPIO_PIN_H0D1;
   1d7d6:	2307      	movs	r3, #7
   1d7d8:	e7d4      	b.n	1d784 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0S1;
   1d7da:	2304      	movs	r3, #4
   1d7dc:	e7d2      	b.n	1d784 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_D0H1;
   1d7de:	2305      	movs	r3, #5
   1d7e0:	e7d0      	b.n	1d784 <gpio_nrfx_config+0x40>
		drive = NRF_GPIO_PIN_H0H1;
   1d7e2:	2303      	movs	r3, #3
   1d7e4:	e7ce      	b.n	1d784 <gpio_nrfx_config+0x40>
		} else if ((flags & GPIO_OUTPUT_INIT_LOW) != 0) {
   1d7e6:	0552      	lsls	r2, r2, #21
			nrf_gpio_port_out_clear(reg, BIT(pin));
   1d7e8:	bf42      	ittt	mi
   1d7ea:	2201      	movmi	r2, #1
   1d7ec:	408a      	lslmi	r2, r1
    p_reg->OUTCLR = clr_mask;
   1d7ee:	f8c7 250c 	strmi.w	r2, [r7, #1292]	; 0x50c
}
   1d7f2:	e7dc      	b.n	1d7ae <gpio_nrfx_config+0x6a>
   1d7f4:	00f00006 	.word	0x00f00006
   1d7f8:	00100006 	.word	0x00100006
   1d7fc:	00400002 	.word	0x00400002
   1d800:	50000300 	.word	0x50000300

0001d804 <nrf_gpio_cfg_sense_set>:
    *p_pin = pin_number & 0x1F;
   1d804:	f000 021f 	and.w	r2, r0, #31
    return pin_number >> 5;
   1d808:	0940      	lsrs	r0, r0, #5
        case 1: return NRF_P1;
   1d80a:	4b08      	ldr	r3, [pc, #32]	; (1d82c <nrf_gpio_cfg_sense_set+0x28>)
   1d80c:	2801      	cmp	r0, #1
   1d80e:	bf18      	it	ne
   1d810:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    uint32_t cnf = reg->PIN_CNF[pin_number] & ~GPIO_PIN_CNF_SENSE_Msk;
   1d814:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1d818:	f8d3 2700 	ldr.w	r2, [r3, #1792]	; 0x700
   1d81c:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
    reg->PIN_CNF[pin_number] = cnf | (sense_config << GPIO_PIN_CNF_SENSE_Pos);
   1d820:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   1d824:	f8c3 2700 	str.w	r2, [r3, #1792]	; 0x700
}
   1d828:	4770      	bx	lr
   1d82a:	bf00      	nop
   1d82c:	50000300 	.word	0x50000300

0001d830 <gpiote_event_handler>:
{
   1d830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint32_t fired_triggers[GPIO_COUNT] = {0};
   1d832:	2600      	movs	r6, #0
   1d834:	e9cd 6600 	strd	r6, r6, [sp]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d838:	4d28      	ldr	r5, [pc, #160]	; (1d8dc <gpiote_event_handler+0xac>)
   1d83a:	f8d5 417c 	ldr.w	r4, [r5, #380]	; 0x17c
	if (port_event) {
   1d83e:	b15c      	cbz	r4, 1d858 <gpiote_event_handler+0x28>
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(0)));
   1d840:	4827      	ldr	r0, [pc, #156]	; (1d8e0 <gpiote_event_handler+0xb0>)
   1d842:	f008 ff30 	bl	266a6 <check_level_trigger_pins>
		fired_triggers[0] =
   1d846:	9000      	str	r0, [sp, #0]
			check_level_trigger_pins(DEVICE_DT_GET(GPIO(1)));
   1d848:	4826      	ldr	r0, [pc, #152]	; (1d8e4 <gpiote_event_handler+0xb4>)
   1d84a:	f008 ff2c 	bl	266a6 <check_level_trigger_pins>
		fired_triggers[1] =
   1d84e:	9001      	str	r0, [sp, #4]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d850:	f8c5 617c 	str.w	r6, [r5, #380]	; 0x17c
   1d854:	f8d5 317c 	ldr.w	r3, [r5, #380]	; 0x17c
{
   1d858:	4923      	ldr	r1, [pc, #140]	; (1d8e8 <gpiote_event_handler+0xb8>)
    p_reg->INTENCLR = mask;
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_int_enable_check(NRF_GPIOTE_Type const * p_reg, uint32_t mask)
{
    return p_reg->INTENSET & mask;
   1d85a:	4d20      	ldr	r5, [pc, #128]	; (1d8dc <gpiote_event_handler+0xac>)
   1d85c:	2200      	movs	r2, #0
		if (nrf_gpiote_int_enable_check(NRF_GPIOTE, BIT(i)) &&
   1d85e:	2601      	movs	r6, #1
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d860:	4694      	mov	ip, r2
    return p_reg->INTENSET & mask;
   1d862:	f8d5 3304 	ldr.w	r3, [r5, #772]	; 0x304
   1d866:	fa06 f002 	lsl.w	r0, r6, r2
   1d86a:	4218      	tst	r0, r3
   1d86c:	d016      	beq.n	1d89c <gpiote_event_handler+0x6c>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1d86e:	680b      	ldr	r3, [r1, #0]
   1d870:	b1a3      	cbz	r3, 1d89c <gpiote_event_handler+0x6c>
                        ((polarity << GPIOTE_CONFIG_POLARITY_Pos) & GPIOTE_CONFIG_POLARITY_Msk);
}

NRF_STATIC_INLINE uint32_t nrf_gpiote_event_pin_get(NRF_GPIOTE_Type const * p_reg, uint32_t idx)
{
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d872:	f502 73a2 	add.w	r3, r2, #324	; 0x144
			fired_triggers[abs_pin / 32U] |= BIT(abs_pin % 32);
   1d876:	af02      	add	r7, sp, #8
   1d878:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1d87c:	f8c1 c000 	str.w	ip, [r1]
   1d880:	f3c3 3040 	ubfx	r0, r3, #13, #1
   1d884:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   1d888:	f3c3 2304 	ubfx	r3, r3, #8, #5
   1d88c:	f850 7c08 	ldr.w	r7, [r0, #-8]
   1d890:	fa06 f303 	lsl.w	r3, r6, r3
   1d894:	433b      	orrs	r3, r7
   1d896:	f840 3c08 	str.w	r3, [r0, #-8]
   1d89a:	680b      	ldr	r3, [r1, #0]
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d89c:	3201      	adds	r2, #1
   1d89e:	2a08      	cmp	r2, #8
   1d8a0:	f101 0104 	add.w	r1, r1, #4
   1d8a4:	d1dd      	bne.n	1d862 <gpiote_event_handler+0x32>
	if (fired_triggers[0]) {
   1d8a6:	9a00      	ldr	r2, [sp, #0]
   1d8a8:	b122      	cbz	r2, 1d8b4 <gpiote_event_handler+0x84>
	gpio_fire_callbacks(list, port, pins);
   1d8aa:	4b10      	ldr	r3, [pc, #64]	; (1d8ec <gpiote_event_handler+0xbc>)
   1d8ac:	490c      	ldr	r1, [pc, #48]	; (1d8e0 <gpiote_event_handler+0xb0>)
   1d8ae:	6858      	ldr	r0, [r3, #4]
   1d8b0:	f008 fec2 	bl	26638 <gpio_fire_callbacks.isra.0>
	if (fired_triggers[1]) {
   1d8b4:	9a01      	ldr	r2, [sp, #4]
   1d8b6:	b122      	cbz	r2, 1d8c2 <gpiote_event_handler+0x92>
	gpio_fire_callbacks(list, port, pins);
   1d8b8:	4b0d      	ldr	r3, [pc, #52]	; (1d8f0 <gpiote_event_handler+0xc0>)
   1d8ba:	490a      	ldr	r1, [pc, #40]	; (1d8e4 <gpiote_event_handler+0xb4>)
   1d8bc:	6858      	ldr	r0, [r3, #4]
   1d8be:	f008 febb 	bl	26638 <gpio_fire_callbacks.isra.0>
	if (port_event) {
   1d8c2:	b144      	cbz	r4, 1d8d6 <gpiote_event_handler+0xa6>
		cfg_level_pins(DEVICE_DT_GET(GPIO(0)));
   1d8c4:	4806      	ldr	r0, [pc, #24]	; (1d8e0 <gpiote_event_handler+0xb0>)
   1d8c6:	f008 fec8 	bl	2665a <cfg_level_pins>
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d8ca:	4806      	ldr	r0, [pc, #24]	; (1d8e4 <gpiote_event_handler+0xb4>)
}
   1d8cc:	b003      	add	sp, #12
   1d8ce:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		cfg_level_pins(DEVICE_DT_GET(GPIO(1)));
   1d8d2:	f008 bec2 	b.w	2665a <cfg_level_pins>
}
   1d8d6:	b003      	add	sp, #12
   1d8d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1d8da:	bf00      	nop
   1d8dc:	40006000 	.word	0x40006000
   1d8e0:	20009dd8 	.word	0x20009dd8
   1d8e4:	20009de8 	.word	0x20009de8
   1d8e8:	40006100 	.word	0x40006100
   1d8ec:	2000eb64 	.word	0x2000eb64
   1d8f0:	2000eb80 	.word	0x2000eb80

0001d8f4 <gpio_nrfx_pin_interrupt_configure>:
{
   1d8f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   1d8f6:	4614      	mov	r4, r2
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d8f8:	6842      	ldr	r2, [r0, #4]
	return port->data;
   1d8fa:	68c7      	ldr	r7, [r0, #12]
	uint32_t abs_pin = NRF_GPIO_PIN_MAP(get_port_cfg(port)->port_num, pin);
   1d8fc:	7a12      	ldrb	r2, [r2, #8]
   1d8fe:	f001 051f 	and.w	r5, r1, #31
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d902:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
{
   1d906:	460e      	mov	r6, r1
   1d908:	ea45 1542 	orr.w	r5, r5, r2, lsl #5
	if ((mode == GPIO_INT_MODE_EDGE) &&
   1d90c:	d110      	bne.n	1d930 <gpio_nrfx_pin_interrupt_configure+0x3c>
    return pin_number >> 5;
   1d90e:	0969      	lsrs	r1, r5, #5
        case 1: return NRF_P1;
   1d910:	2901      	cmp	r1, #1
    *p_pin = pin_number & 0x1F;
   1d912:	f005 021f 	and.w	r2, r5, #31
        case 1: return NRF_P1;
   1d916:	4961      	ldr	r1, [pc, #388]	; (1da9c <gpio_nrfx_pin_interrupt_configure+0x1a8>)
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d918:	f502 72e0 	add.w	r2, r2, #448	; 0x1c0
        case 1: return NRF_P1;
   1d91c:	bf18      	it	ne
   1d91e:	f04f 41a0 	movne.w	r1, #1342177280	; 0x50000000
    return (nrf_gpio_pin_dir_t)((reg->PIN_CNF[pin_number] &
   1d922:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   1d926:	07d0      	lsls	r0, r2, #31
   1d928:	d507      	bpl.n	1d93a <gpio_nrfx_pin_interrupt_configure+0x46>
		return -ENOTSUP;
   1d92a:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1d92e:	e09a      	b.n	1da66 <gpio_nrfx_pin_interrupt_configure+0x172>
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d930:	f5b4 5f00 	cmp.w	r4, #8192	; 0x2000
   1d934:	68f9      	ldr	r1, [r7, #12]
   1d936:	f000 8098 	beq.w	1da6a <gpio_nrfx_pin_interrupt_configure+0x176>
   1d93a:	68fa      	ldr	r2, [r7, #12]
   1d93c:	2101      	movs	r1, #1
   1d93e:	40b1      	lsls	r1, r6
   1d940:	4311      	orrs	r1, r2
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d942:	697a      	ldr	r2, [r7, #20]
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1d944:	60f9      	str	r1, [r7, #12]
   1d946:	2101      	movs	r1, #1
   1d948:	40b1      	lsls	r1, r6
	WRITE_BIT(data->trig_edge, pin, mode == GPIO_INT_MODE_EDGE);
   1d94a:	f5b4 3fa0 	cmp.w	r4, #81920	; 0x14000
   1d94e:	bf0c      	ite	eq
   1d950:	430a      	orreq	r2, r1
   1d952:	438a      	bicne	r2, r1
   1d954:	617a      	str	r2, [r7, #20]
	WRITE_BIT(data->double_edge, pin, trig == GPIO_INT_TRIG_BOTH);
   1d956:	69ba      	ldr	r2, [r7, #24]
   1d958:	f5b3 2fc0 	cmp.w	r3, #393216	; 0x60000
   1d95c:	bf0c      	ite	eq
   1d95e:	430a      	orreq	r2, r1
   1d960:	438a      	bicne	r2, r1
   1d962:	61ba      	str	r2, [r7, #24]
	WRITE_BIT(data->int_active_level, pin, trig == GPIO_INT_TRIG_HIGH);
   1d964:	693a      	ldr	r2, [r7, #16]
   1d966:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
   1d96a:	bf0c      	ite	eq
   1d96c:	4311      	orreq	r1, r2
   1d96e:	ea22 0101 	bicne.w	r1, r2, r1
    return p_reg->INTENSET & mask;
   1d972:	4a4b      	ldr	r2, [pc, #300]	; (1daa0 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
   1d974:	6139      	str	r1, [r7, #16]
   1d976:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1d97a:	2000      	movs	r0, #0
   1d97c:	b2db      	uxtb	r3, r3
    return ((p_reg->CONFIG[idx] & GPIOTE_CONFIG_PORT_PIN_Msk) >> GPIOTE_CONFIG_PSEL_Pos);
   1d97e:	f500 71a2 	add.w	r1, r0, #324	; 0x144
   1d982:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
   1d986:	f3c1 2105 	ubfx	r1, r1, #8, #6
		if ((nrf_gpiote_event_pin_get(NRF_GPIOTE, i) == abs_pin)
   1d98a:	428d      	cmp	r5, r1
   1d98c:	d172      	bne.n	1da74 <gpio_nrfx_pin_interrupt_configure+0x180>
		    && (intenset & BIT(i))) {
   1d98e:	fa23 f100 	lsr.w	r1, r3, r0
   1d992:	07c9      	lsls	r1, r1, #31
   1d994:	d56e      	bpl.n	1da74 <gpio_nrfx_pin_interrupt_configure+0x180>
   p_reg->CONFIG[idx] &= ~GPIOTE_CONFIG_MODE_Event;
   1d996:	0083      	lsls	r3, r0, #2
   1d998:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1d99c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1d9a0:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1d9a4:	f021 0101 	bic.w	r1, r1, #1
   1d9a8:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
			nrf_gpiote_int_disable(NRF_GPIOTE, BIT(i));
   1d9ac:	2301      	movs	r3, #1
   1d9ae:	4083      	lsls	r3, r0
    p_reg->INTENCLR = mask;
   1d9b0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
			nrfx_gpiote_channel_free(i);
   1d9b4:	b2c0      	uxtb	r0, r0
   1d9b6:	f001 fa39 	bl	1ee2c <nrfx_gpiote_channel_free>
	nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   1d9ba:	4628      	mov	r0, r5
   1d9bc:	2100      	movs	r1, #0
   1d9be:	f7ff ff21 	bl	1d804 <nrf_gpio_cfg_sense_set>
	if (data->pin_int_en & BIT(pin)) {
   1d9c2:	68f8      	ldr	r0, [r7, #12]
   1d9c4:	40f0      	lsrs	r0, r6
   1d9c6:	f010 0001 	ands.w	r0, r0, #1
   1d9ca:	d04c      	beq.n	1da66 <gpio_nrfx_pin_interrupt_configure+0x172>
		if (data->trig_edge & BIT(pin)) {
   1d9cc:	6978      	ldr	r0, [r7, #20]
   1d9ce:	40f0      	lsrs	r0, r6
   1d9d0:	f010 0401 	ands.w	r4, r0, #1
   1d9d4:	d055      	beq.n	1da82 <gpio_nrfx_pin_interrupt_configure+0x18e>
			if (data->double_edge & BIT(pin)) {
   1d9d6:	69bb      	ldr	r3, [r7, #24]
   1d9d8:	40f3      	lsrs	r3, r6
   1d9da:	07db      	lsls	r3, r3, #31
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d9dc:	bf5f      	itttt	pl
   1d9de:	6939      	ldrpl	r1, [r7, #16]
   1d9e0:	fa21 f606 	lsrpl.w	r6, r1, r6
   1d9e4:	f006 0601 	andpl.w	r6, r6, #1
   1d9e8:	f1c6 0602 	rsbpl	r6, r6, #2
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d9ec:	f10d 0007 	add.w	r0, sp, #7
			} else if ((data->int_active_level & BIT(pin)) != 0U) {
   1d9f0:	bf54      	ite	pl
   1d9f2:	b2f6      	uxtbpl	r6, r6
				pol = NRF_GPIOTE_POLARITY_TOGGLE;
   1d9f4:	2603      	movmi	r6, #3
	if (nrfx_gpiote_channel_alloc(&channel) != NRFX_SUCCESS) {
   1d9f6:	f001 fa39 	bl	1ee6c <nrfx_gpiote_channel_alloc>
   1d9fa:	4b2a      	ldr	r3, [pc, #168]	; (1daa4 <gpio_nrfx_pin_interrupt_configure+0x1b0>)
   1d9fc:	4298      	cmp	r0, r3
   1d9fe:	d13d      	bne.n	1da7c <gpio_nrfx_pin_interrupt_configure+0x188>
	nrf_gpiote_event_t evt = offsetof(NRF_GPIOTE_Type, EVENTS_IN[channel]);
   1da00:	f89d 2007 	ldrb.w	r2, [sp, #7]
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1da04:	0093      	lsls	r3, r2, #2
   1da06:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1da0a:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da0e:	022d      	lsls	r5, r5, #8
  p_reg->CONFIG[idx] &= ~(GPIOTE_CONFIG_PORT_PIN_Msk | GPIOTE_CONFIG_POLARITY_Msk);
   1da10:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1da14:	f421 314f 	bic.w	r1, r1, #211968	; 0x33c00
   1da18:	f421 7140 	bic.w	r1, r1, #768	; 0x300
   1da1c:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
  p_reg->CONFIG[idx] |= ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PORT_PIN_Msk) |
   1da20:	f8d3 1510 	ldr.w	r1, [r3, #1296]	; 0x510
   1da24:	f405 557c 	and.w	r5, r5, #16128	; 0x3f00
   1da28:	430d      	orrs	r5, r1
   1da2a:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
   1da2e:	f8c3 6510 	str.w	r6, [r3, #1296]	; 0x510
    return ((uint32_t)p_reg + event);
   1da32:	0093      	lsls	r3, r2, #2
   1da34:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1da38:	f503 43c2 	add.w	r3, r3, #24832	; 0x6100
    *((volatile uint32_t *)nrf_gpiote_event_address_get(p_reg, event)) = 0;
   1da3c:	2000      	movs	r0, #0
   1da3e:	6018      	str	r0, [r3, #0]
	nrf_gpiote_event_enable(NRF_GPIOTE, channel);
   1da40:	f89d 1007 	ldrb.w	r1, [sp, #7]
   1da44:	681b      	ldr	r3, [r3, #0]
   p_reg->CONFIG[idx] |= GPIOTE_CONFIG_MODE_Event;
   1da46:	008b      	lsls	r3, r1, #2
   1da48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1da4c:	f503 43c0 	add.w	r3, r3, #24576	; 0x6000
   1da50:	f8d3 2510 	ldr.w	r2, [r3, #1296]	; 0x510
   1da54:	f042 0201 	orr.w	r2, r2, #1
   1da58:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
    p_reg->INTENSET = mask;
   1da5c:	4a10      	ldr	r2, [pc, #64]	; (1daa0 <gpio_nrfx_pin_interrupt_configure+0x1ac>)
	nrf_gpiote_int_enable(NRF_GPIOTE, BIT(channel));
   1da5e:	2301      	movs	r3, #1
   1da60:	408b      	lsls	r3, r1
   1da62:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
}
   1da66:	b003      	add	sp, #12
   1da68:	bdf0      	pop	{r4, r5, r6, r7, pc}
	WRITE_BIT(data->pin_int_en, pin, mode != GPIO_INT_MODE_DISABLED);
   1da6a:	2201      	movs	r2, #1
   1da6c:	40b2      	lsls	r2, r6
   1da6e:	ea21 0102 	bic.w	r1, r1, r2
   1da72:	e766      	b.n	1d942 <gpio_nrfx_pin_interrupt_configure+0x4e>
	for (size_t i = 0; i < GPIOTE_CH_NUM; i++) {
   1da74:	3001      	adds	r0, #1
   1da76:	2808      	cmp	r0, #8
   1da78:	d181      	bne.n	1d97e <gpio_nrfx_pin_interrupt_configure+0x8a>
   1da7a:	e79e      	b.n	1d9ba <gpio_nrfx_pin_interrupt_configure+0xc6>
		return -ENODEV;
   1da7c:	f06f 0012 	mvn.w	r0, #18
   1da80:	e7f1      	b.n	1da66 <gpio_nrfx_pin_interrupt_configure+0x172>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   1da82:	6939      	ldr	r1, [r7, #16]
   1da84:	40f1      	lsrs	r1, r6
   1da86:	f001 0101 	and.w	r1, r1, #1
   1da8a:	f1c1 0103 	rsb	r1, r1, #3
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   1da8e:	4628      	mov	r0, r5
   1da90:	b2c9      	uxtb	r1, r1
   1da92:	f7ff feb7 	bl	1d804 <nrf_gpio_cfg_sense_set>
	int res = 0;
   1da96:	4620      	mov	r0, r4
   1da98:	e7e5      	b.n	1da66 <gpio_nrfx_pin_interrupt_configure+0x172>
   1da9a:	bf00      	nop
   1da9c:	50000300 	.word	0x50000300
   1daa0:	40006000 	.word	0x40006000
   1daa4:	0bad0000 	.word	0x0bad0000

0001daa8 <twi_0_init>:
		      POST_KERNEL,					       \
		      CONFIG_I2C_INIT_PRIORITY,				       \
		      &i2c_nrfx_twi_driver_api)

#ifdef CONFIG_I2C_0_NRF_TWI
I2C_NRFX_TWI_DEVICE(0);
   1daa8:	b510      	push	{r4, lr}
   1daaa:	4604      	mov	r4, r0
   1daac:	2200      	movs	r2, #0
   1daae:	2101      	movs	r1, #1
   1dab0:	2003      	movs	r0, #3
   1dab2:	f7e9 fe7d 	bl	77b0 <z_arm_irq_priority_set>
	return dev->config;
   1dab6:	6860      	ldr	r0, [r4, #4]
	nrfx_err_t result = nrfx_twi_init(&get_dev_config(dev)->twi,
   1dab8:	68e3      	ldr	r3, [r4, #12]
   1daba:	4a0c      	ldr	r2, [pc, #48]	; (1daec <twi_0_init+0x44>)
   1dabc:	f100 0108 	add.w	r1, r0, #8
   1dac0:	f001 fcae 	bl	1f420 <nrfx_twi_init>
	if (result != NRFX_SUCCESS) {
   1dac4:	4b0a      	ldr	r3, [pc, #40]	; (1daf0 <twi_0_init+0x48>)
   1dac6:	4298      	cmp	r0, r3
   1dac8:	d00d      	beq.n	1dae6 <twi_0_init+0x3e>
   1daca:	4b0a      	ldr	r3, [pc, #40]	; (1daf4 <twi_0_init+0x4c>)
   1dacc:	4a0a      	ldr	r2, [pc, #40]	; (1daf8 <twi_0_init+0x50>)
		LOG_ERR("Failed to initialize device: %s",
   1dace:	480b      	ldr	r0, [pc, #44]	; (1dafc <twi_0_init+0x54>)
   1dad0:	6821      	ldr	r1, [r4, #0]
   1dad2:	1ad2      	subs	r2, r2, r3
   1dad4:	08d2      	lsrs	r2, r2, #3
   1dad6:	0192      	lsls	r2, r2, #6
   1dad8:	f042 0201 	orr.w	r2, r2, #1
   1dadc:	f004 fcc5 	bl	2246a <log_1>
		return -EBUSY;
   1dae0:	f06f 000f 	mvn.w	r0, #15
I2C_NRFX_TWI_DEVICE(0);
   1dae4:	bd10      	pop	{r4, pc}
	return 0;
   1dae6:	2000      	movs	r0, #0
I2C_NRFX_TWI_DEVICE(0);
   1dae8:	e7fc      	b.n	1dae4 <twi_0_init+0x3c>
   1daea:	bf00      	nop
   1daec:	0001db55 	.word	0x0001db55
   1daf0:	0bad0000 	.word	0x0bad0000
   1daf4:	000278c0 	.word	0x000278c0
   1daf8:	000279d8 	.word	0x000279d8
   1dafc:	0002d711 	.word	0x0002d711

0001db00 <i2c_nrfx_twi_configure>:
	if (I2C_ADDR_10_BITS & dev_config) {
   1db00:	07ca      	lsls	r2, r1, #31
{
   1db02:	b508      	push	{r3, lr}
	return dev->config;
   1db04:	6843      	ldr	r3, [r0, #4]
	if (I2C_ADDR_10_BITS & dev_config) {
   1db06:	d40f      	bmi.n	1db28 <i2c_nrfx_twi_configure+0x28>
	switch (I2C_SPEED_GET(dev_config)) {
   1db08:	f3c1 0242 	ubfx	r2, r1, #1, #3
   1db0c:	2a01      	cmp	r2, #1
   1db0e:	d00e      	beq.n	1db2e <i2c_nrfx_twi_configure+0x2e>
   1db10:	2a02      	cmp	r2, #2
   1db12:	d015      	beq.n	1db40 <i2c_nrfx_twi_configure+0x40>
   1db14:	490c      	ldr	r1, [pc, #48]	; (1db48 <i2c_nrfx_twi_configure+0x48>)
   1db16:	4b0d      	ldr	r3, [pc, #52]	; (1db4c <i2c_nrfx_twi_configure+0x4c>)
		LOG_ERR("unsupported speed");
   1db18:	480d      	ldr	r0, [pc, #52]	; (1db50 <i2c_nrfx_twi_configure+0x50>)
   1db1a:	1ac9      	subs	r1, r1, r3
   1db1c:	08c9      	lsrs	r1, r1, #3
   1db1e:	0189      	lsls	r1, r1, #6
   1db20:	f041 0101 	orr.w	r1, r1, #1
   1db24:	f004 fc94 	bl	22450 <log_0>
		return -EINVAL;
   1db28:	f06f 0015 	mvn.w	r0, #21
   1db2c:	e007      	b.n	1db3e <i2c_nrfx_twi_configure+0x3e>
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_100K);
   1db2e:	681b      	ldr	r3, [r3, #0]
}

NRF_STATIC_INLINE void nrf_twi_frequency_set(NRF_TWI_Type *      p_reg,
                                             nrf_twi_frequency_t frequency)
{
    p_reg->FREQUENCY = frequency;
   1db30:	f04f 72cc 	mov.w	r2, #26738688	; 0x1980000
   1db34:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	get_dev_data(dev)->dev_config = dev_config;
   1db38:	68c3      	ldr	r3, [r0, #12]
	return 0;
   1db3a:	2000      	movs	r0, #0
	get_dev_data(dev)->dev_config = dev_config;
   1db3c:	6359      	str	r1, [r3, #52]	; 0x34
}
   1db3e:	bd08      	pop	{r3, pc}
		nrf_twi_frequency_set(inst->p_twi, NRF_TWI_FREQ_400K);
   1db40:	681b      	ldr	r3, [r3, #0]
   1db42:	f04f 62cd 	mov.w	r2, #107479040	; 0x6680000
   1db46:	e7f5      	b.n	1db34 <i2c_nrfx_twi_configure+0x34>
   1db48:	000279d8 	.word	0x000279d8
   1db4c:	000278c0 	.word	0x000278c0
   1db50:	0002d731 	.word	0x0002d731

0001db54 <event_handler>:
	switch (p_event->type) {
   1db54:	7803      	ldrb	r3, [r0, #0]
   1db56:	2b01      	cmp	r3, #1
   1db58:	d008      	beq.n	1db6c <event_handler+0x18>
   1db5a:	2b02      	cmp	r3, #2
   1db5c:	d008      	beq.n	1db70 <event_handler+0x1c>
   1db5e:	b94b      	cbnz	r3, 1db74 <event_handler+0x20>
		dev_data->res = NRFX_SUCCESS;
   1db60:	4b05      	ldr	r3, [pc, #20]	; (1db78 <event_handler+0x24>)
		dev_data->res = NRFX_ERROR_INTERNAL;
   1db62:	630b      	str	r3, [r1, #48]	; 0x30
	z_impl_k_sem_give(sem);
   1db64:	f101 0018 	add.w	r0, r1, #24
   1db68:	f002 bc7c 	b.w	20464 <z_impl_k_sem_give>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1db6c:	4b03      	ldr	r3, [pc, #12]	; (1db7c <event_handler+0x28>)
   1db6e:	e7f8      	b.n	1db62 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1db70:	4b03      	ldr	r3, [pc, #12]	; (1db80 <event_handler+0x2c>)
   1db72:	e7f6      	b.n	1db62 <event_handler+0xe>
		dev_data->res = NRFX_ERROR_INTERNAL;
   1db74:	4b03      	ldr	r3, [pc, #12]	; (1db84 <event_handler+0x30>)
   1db76:	e7f4      	b.n	1db62 <event_handler+0xe>
   1db78:	0bad0000 	.word	0x0bad0000
   1db7c:	0bae0001 	.word	0x0bae0001
   1db80:	0bae0002 	.word	0x0bae0002
   1db84:	0bad0001 	.word	0x0bad0001

0001db88 <i2c_nrfx_twi_transfer>:
{
   1db88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1db8c:	4604      	mov	r4, r0
   1db8e:	b087      	sub	sp, #28
   1db90:	460d      	mov	r5, r1
   1db92:	4690      	mov	r8, r2
   1db94:	4699      	mov	r9, r3
	k_sem_take(&(get_dev_data(dev)->transfer_sync), K_FOREVER);
   1db96:	68c0      	ldr	r0, [r0, #12]
	return z_impl_k_sem_take(sem, timeout);
   1db98:	f04f 32ff 	mov.w	r2, #4294967295
   1db9c:	f04f 33ff 	mov.w	r3, #4294967295
   1dba0:	f002 fc86 	bl	204b0 <z_impl_k_sem_take>
	k_sem_take(&(get_dev_data(dev)->completion_sync), K_NO_WAIT);
   1dba4:	68e0      	ldr	r0, [r4, #12]
   1dba6:	3018      	adds	r0, #24
   1dba8:	2200      	movs	r2, #0
   1dbaa:	2300      	movs	r3, #0
   1dbac:	f002 fc80 	bl	204b0 <z_impl_k_sem_take>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1dbb0:	6860      	ldr	r0, [r4, #4]
		if (res != NRFX_SUCCESS) {
   1dbb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1dc98 <i2c_nrfx_twi_transfer+0x110>
	nrfx_twi_enable(&get_dev_config(dev)->twi);
   1dbb6:	f001 fc8b 	bl	1f4d0 <nrfx_twi_enable>
	for (size_t i = 0; i < num_msgs; i++) {
   1dbba:	2600      	movs	r6, #0
   1dbbc:	4546      	cmp	r6, r8
   1dbbe:	d301      	bcc.n	1dbc4 <i2c_nrfx_twi_transfer+0x3c>
   1dbc0:	2500      	movs	r5, #0
   1dbc2:	e02d      	b.n	1dc20 <i2c_nrfx_twi_transfer+0x98>
		if (I2C_MSG_ADDR_10_BITS & msgs[i].flags) {
   1dbc4:	f895 b008 	ldrb.w	fp, [r5, #8]
   1dbc8:	f01b 0708 	ands.w	r7, fp, #8
   1dbcc:	d160      	bne.n	1dc90 <i2c_nrfx_twi_transfer+0x108>
		nrfx_twi_xfer_desc_t cur_xfer = {
   1dbce:	2214      	movs	r2, #20
   1dbd0:	4639      	mov	r1, r7
   1dbd2:	a801      	add	r0, sp, #4
   1dbd4:	f006 fc73 	bl	244be <memset>
   1dbd8:	686a      	ldr	r2, [r5, #4]
   1dbda:	9202      	str	r2, [sp, #8]
					  NRFX_TWI_XFER_RX : NRFX_TWI_XFER_TX
   1dbdc:	f00b 0301 	and.w	r3, fp, #1
		nrfx_twi_xfer_desc_t cur_xfer = {
   1dbe0:	682a      	ldr	r2, [r5, #0]
   1dbe2:	f88d 3004 	strb.w	r3, [sp, #4]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1dbe6:	f01b 0f02 	tst.w	fp, #2
		nrfx_twi_xfer_desc_t cur_xfer = {
   1dbea:	f88d 9005 	strb.w	r9, [sp, #5]
   1dbee:	9204      	str	r2, [sp, #16]
		if (!(msgs[i].flags & I2C_MSG_STOP)) {
   1dbf0:	d120      	bne.n	1dc34 <i2c_nrfx_twi_transfer+0xac>
			if ((i < (num_msgs - 1)) &&
   1dbf2:	f108 32ff 	add.w	r2, r8, #4294967295
   1dbf6:	42b2      	cmp	r2, r6
   1dbf8:	d902      	bls.n	1dc00 <i2c_nrfx_twi_transfer+0x78>
   1dbfa:	7d2a      	ldrb	r2, [r5, #20]
   1dbfc:	0752      	lsls	r2, r2, #29
   1dbfe:	d51b      	bpl.n	1dc38 <i2c_nrfx_twi_transfer+0xb0>
			} else if (msgs[i].flags & I2C_MSG_READ) {
   1dc00:	2b00      	cmp	r3, #0
   1dc02:	d145      	bne.n	1dc90 <i2c_nrfx_twi_transfer+0x108>
				xfer_flags |= NRFX_TWI_FLAG_TX_NO_STOP;
   1dc04:	2220      	movs	r2, #32
		res = nrfx_twi_xfer(&get_dev_config(dev)->twi,
   1dc06:	6860      	ldr	r0, [r4, #4]
   1dc08:	a901      	add	r1, sp, #4
   1dc0a:	f001 fc8b 	bl	1f524 <nrfx_twi_xfer>
		if (res != NRFX_SUCCESS) {
   1dc0e:	4550      	cmp	r0, sl
   1dc10:	d014      	beq.n	1dc3c <i2c_nrfx_twi_transfer+0xb4>
			if (res == NRFX_ERROR_BUSY) {
   1dc12:	4b22      	ldr	r3, [pc, #136]	; (1dc9c <i2c_nrfx_twi_transfer+0x114>)
				ret = -EIO;
   1dc14:	4298      	cmp	r0, r3
   1dc16:	bf0c      	ite	eq
   1dc18:	f06f 050f 	mvneq.w	r5, #15
   1dc1c:	f06f 0504 	mvnne.w	r5, #4
	nrfx_twi_disable(&get_dev_config(dev)->twi);
   1dc20:	6860      	ldr	r0, [r4, #4]
   1dc22:	f001 fc65 	bl	1f4f0 <nrfx_twi_disable>
	k_sem_give(&(get_dev_data(dev)->transfer_sync));
   1dc26:	68e0      	ldr	r0, [r4, #12]
	z_impl_k_sem_give(sem);
   1dc28:	f002 fc1c 	bl	20464 <z_impl_k_sem_give>
}
   1dc2c:	4628      	mov	r0, r5
   1dc2e:	b007      	add	sp, #28
   1dc30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uint32_t xfer_flags = 0;
   1dc34:	463a      	mov	r2, r7
   1dc36:	e7e6      	b.n	1dc06 <i2c_nrfx_twi_transfer+0x7e>
				xfer_flags |= NRFX_TWI_FLAG_SUSPEND;
   1dc38:	2240      	movs	r2, #64	; 0x40
   1dc3a:	e7e4      	b.n	1dc06 <i2c_nrfx_twi_transfer+0x7e>
		ret = k_sem_take(&(get_dev_data(dev)->completion_sync),
   1dc3c:	68e0      	ldr	r0, [r4, #12]
   1dc3e:	3018      	adds	r0, #24
	return z_impl_k_sem_take(sem, timeout);
   1dc40:	f44f 4280 	mov.w	r2, #16384	; 0x4000
   1dc44:	2300      	movs	r3, #0
   1dc46:	f002 fc33 	bl	204b0 <z_impl_k_sem_take>
		if (ret != 0) {
   1dc4a:	b168      	cbz	r0, 1dc68 <i2c_nrfx_twi_transfer+0xe0>
   1dc4c:	4a14      	ldr	r2, [pc, #80]	; (1dca0 <i2c_nrfx_twi_transfer+0x118>)
   1dc4e:	4b15      	ldr	r3, [pc, #84]	; (1dca4 <i2c_nrfx_twi_transfer+0x11c>)
			LOG_ERR("Error on I2C line occurred for message %d", i);
   1dc50:	4815      	ldr	r0, [pc, #84]	; (1dca8 <i2c_nrfx_twi_transfer+0x120>)
   1dc52:	1ad2      	subs	r2, r2, r3
   1dc54:	08d2      	lsrs	r2, r2, #3
   1dc56:	0192      	lsls	r2, r2, #6
   1dc58:	f042 0201 	orr.w	r2, r2, #1
   1dc5c:	4631      	mov	r1, r6
   1dc5e:	f004 fc04 	bl	2246a <log_1>
			ret = -EIO;
   1dc62:	f06f 0504 	mvn.w	r5, #4
			break;
   1dc66:	e7db      	b.n	1dc20 <i2c_nrfx_twi_transfer+0x98>
	return dev->data;
   1dc68:	68e3      	ldr	r3, [r4, #12]
		res = get_dev_data(dev)->res;
   1dc6a:	6b19      	ldr	r1, [r3, #48]	; 0x30
		if (res != NRFX_SUCCESS) {
   1dc6c:	4551      	cmp	r1, sl
   1dc6e:	f105 050c 	add.w	r5, r5, #12
   1dc72:	d00b      	beq.n	1dc8c <i2c_nrfx_twi_transfer+0x104>
   1dc74:	4a0b      	ldr	r2, [pc, #44]	; (1dca4 <i2c_nrfx_twi_transfer+0x11c>)
   1dc76:	4b0a      	ldr	r3, [pc, #40]	; (1dca0 <i2c_nrfx_twi_transfer+0x118>)
			LOG_ERR("Error %d occurred for message %d", res, i);
   1dc78:	480c      	ldr	r0, [pc, #48]	; (1dcac <i2c_nrfx_twi_transfer+0x124>)
   1dc7a:	1a9b      	subs	r3, r3, r2
   1dc7c:	08db      	lsrs	r3, r3, #3
   1dc7e:	019b      	lsls	r3, r3, #6
   1dc80:	f043 0301 	orr.w	r3, r3, #1
   1dc84:	4632      	mov	r2, r6
   1dc86:	f004 fc04 	bl	22492 <log_2>
   1dc8a:	e7ea      	b.n	1dc62 <i2c_nrfx_twi_transfer+0xda>
	for (size_t i = 0; i < num_msgs; i++) {
   1dc8c:	3601      	adds	r6, #1
   1dc8e:	e795      	b.n	1dbbc <i2c_nrfx_twi_transfer+0x34>
			ret = -ENOTSUP;
   1dc90:	f06f 0522 	mvn.w	r5, #34	; 0x22
   1dc94:	e7c4      	b.n	1dc20 <i2c_nrfx_twi_transfer+0x98>
   1dc96:	bf00      	nop
   1dc98:	0bad0000 	.word	0x0bad0000
   1dc9c:	0bad000b 	.word	0x0bad000b
   1dca0:	000279d8 	.word	0x000279d8
   1dca4:	000278c0 	.word	0x000278c0
   1dca8:	0002d743 	.word	0x0002d743
   1dcac:	0002d76d 	.word	0x0002d76d

0001dcb0 <spi_2_init>:
#ifdef CONFIG_SPI_1_NRF_SPI
SPI_NRFX_SPI_DEVICE(1);
#endif

#ifdef CONFIG_SPI_2_NRF_SPI
SPI_NRFX_SPI_DEVICE(2);
   1dcb0:	b538      	push	{r3, r4, r5, lr}
   1dcb2:	4604      	mov	r4, r0
   1dcb4:	2200      	movs	r2, #0
   1dcb6:	2101      	movs	r1, #1
   1dcb8:	2023      	movs	r0, #35	; 0x23
   1dcba:	f7e9 fd79 	bl	77b0 <z_arm_irq_priority_set>
	return dev->data;
   1dcbe:	68e3      	ldr	r3, [r4, #12]
	return dev->config;
   1dcc0:	6860      	ldr	r0, [r4, #4]
	dev_data->dev = dev;
   1dcc2:	65dc      	str	r4, [r3, #92]	; 0x5c
	result = nrfx_spi_init(&get_dev_config(dev)->spi,
   1dcc4:	4a0d      	ldr	r2, [pc, #52]	; (1dcfc <spi_2_init+0x4c>)
   1dcc6:	f100 0108 	add.w	r1, r0, #8
   1dcca:	f001 f989 	bl	1efe0 <nrfx_spi_init>
	if (result != NRFX_SUCCESS) {
   1dcce:	4b0c      	ldr	r3, [pc, #48]	; (1dd00 <spi_2_init+0x50>)
   1dcd0:	4298      	cmp	r0, r3
   1dcd2:	d011      	beq.n	1dcf8 <spi_2_init+0x48>
   1dcd4:	4b0b      	ldr	r3, [pc, #44]	; (1dd04 <spi_2_init+0x54>)
   1dcd6:	4a0c      	ldr	r2, [pc, #48]	; (1dd08 <spi_2_init+0x58>)
		LOG_ERR("Failed to initialize device: %s", dev->name);
   1dcd8:	6821      	ldr	r1, [r4, #0]
   1dcda:	480c      	ldr	r0, [pc, #48]	; (1dd0c <spi_2_init+0x5c>)
   1dcdc:	1ad2      	subs	r2, r2, r3
   1dcde:	08d2      	lsrs	r2, r2, #3
   1dce0:	0192      	lsls	r2, r2, #6
   1dce2:	f042 0201 	orr.w	r2, r2, #1
   1dce6:	f004 fbc0 	bl	2246a <log_1>
		return -EBUSY;
   1dcea:	f06f 050f 	mvn.w	r5, #15
SPI_NRFX_SPI_DEVICE(2);
   1dcee:	68e0      	ldr	r0, [r4, #12]
   1dcf0:	f008 fd37 	bl	26762 <spi_context_unlock_unconditionally>
   1dcf4:	4628      	mov	r0, r5
   1dcf6:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   1dcf8:	2500      	movs	r5, #0
   1dcfa:	e7f8      	b.n	1dcee <spi_2_init+0x3e>
   1dcfc:	0001dd8d 	.word	0x0001dd8d
   1dd00:	0bad0000 	.word	0x0bad0000
   1dd04:	000278c0 	.word	0x000278c0
   1dd08:	00027a18 	.word	0x00027a18
   1dd0c:	0002d711 	.word	0x0002d711

0001dd10 <transfer_next_chunk>:
{
   1dd10:	b530      	push	{r4, r5, lr}
	return dev->data;
   1dd12:	68c5      	ldr	r5, [r0, #12]
 * directions have a continuous buffer, i.e. the maximum SPI transfer that
 * can be done with DMA that handles only non-scattered buffers.
 */
static inline size_t spi_context_max_continuous_chunk(struct spi_context *ctx)
{
	if (!ctx->tx_len) {
   1dd14:	6d2a      	ldr	r2, [r5, #80]	; 0x50
		return ctx->rx_len;
   1dd16:	6dab      	ldr	r3, [r5, #88]	; 0x58
{
   1dd18:	b085      	sub	sp, #20
	if (!ctx->tx_len) {
   1dd1a:	b982      	cbnz	r2, 1dd3e <transfer_next_chunk+0x2e>
	if (chunk_len > 0) {
   1dd1c:	bb73      	cbnz	r3, 1dd7c <transfer_next_chunk+0x6c>
	int error = 0;
   1dd1e:	461c      	mov	r4, r3
	_spi_context_cs_control(ctx, on, false);
   1dd20:	2200      	movs	r2, #0
   1dd22:	4611      	mov	r1, r2
   1dd24:	4628      	mov	r0, r5
   1dd26:	f008 fcf7 	bl	26718 <_spi_context_cs_control>
	ctx->sync_status = status;
   1dd2a:	63ac      	str	r4, [r5, #56]	; 0x38
	z_impl_k_sem_give(sem);
   1dd2c:	f105 0020 	add.w	r0, r5, #32
   1dd30:	f002 fb98 	bl	20464 <z_impl_k_sem_give>
	dev_data->busy = false;
   1dd34:	2300      	movs	r3, #0
   1dd36:	f885 3064 	strb.w	r3, [r5, #100]	; 0x64
}
   1dd3a:	b005      	add	sp, #20
   1dd3c:	bd30      	pop	{r4, r5, pc}
	} else if (!ctx->rx_len) {
   1dd3e:	4611      	mov	r1, r2
   1dd40:	b113      	cbz	r3, 1dd48 <transfer_next_chunk+0x38>
		return ctx->tx_len;
	}

	return MIN(ctx->tx_len, ctx->rx_len);
   1dd42:	429a      	cmp	r2, r3
   1dd44:	bf28      	it	cs
   1dd46:	4619      	movcs	r1, r3
		xfer.p_tx_buffer = ctx->tx_buf;
   1dd48:	6cec      	ldr	r4, [r5, #76]	; 0x4c
		dev_data->chunk_len = chunk_len;
   1dd4a:	6629      	str	r1, [r5, #96]	; 0x60
		xfer.p_tx_buffer = ctx->tx_buf;
   1dd4c:	9400      	str	r4, [sp, #0]
	return !!(ctx->tx_buf && ctx->tx_len);
   1dd4e:	b1bc      	cbz	r4, 1dd80 <transfer_next_chunk+0x70>
   1dd50:	2a00      	cmp	r2, #0
   1dd52:	bf18      	it	ne
   1dd54:	460a      	movne	r2, r1
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dd56:	9201      	str	r2, [sp, #4]
		xfer.p_rx_buffer = ctx->rx_buf;
   1dd58:	6d6a      	ldr	r2, [r5, #84]	; 0x54
   1dd5a:	9202      	str	r2, [sp, #8]
	return !!(ctx->rx_buf && ctx->rx_len);
   1dd5c:	b192      	cbz	r2, 1dd84 <transfer_next_chunk+0x74>
   1dd5e:	2b00      	cmp	r3, #0
   1dd60:	bf18      	it	ne
   1dd62:	460b      	movne	r3, r1
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1dd64:	6840      	ldr	r0, [r0, #4]
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dd66:	9303      	str	r3, [sp, #12]
		result = nrfx_spi_xfer(&get_dev_config(dev)->spi, &xfer, 0);
   1dd68:	2200      	movs	r2, #0
   1dd6a:	4669      	mov	r1, sp
   1dd6c:	f001 f9da 	bl	1f124 <nrfx_spi_xfer>
		if (result == NRFX_SUCCESS) {
   1dd70:	4b05      	ldr	r3, [pc, #20]	; (1dd88 <transfer_next_chunk+0x78>)
   1dd72:	4298      	cmp	r0, r3
   1dd74:	d0e1      	beq.n	1dd3a <transfer_next_chunk+0x2a>
		error = -EIO;
   1dd76:	f06f 0404 	mvn.w	r4, #4
   1dd7a:	e7d1      	b.n	1dd20 <transfer_next_chunk+0x10>
   1dd7c:	4619      	mov	r1, r3
   1dd7e:	e7e3      	b.n	1dd48 <transfer_next_chunk+0x38>
		xfer.tx_length   = spi_context_tx_buf_on(ctx) ? chunk_len : 0;
   1dd80:	4622      	mov	r2, r4
   1dd82:	e7e8      	b.n	1dd56 <transfer_next_chunk+0x46>
		xfer.rx_length   = spi_context_rx_buf_on(ctx) ? chunk_len : 0;
   1dd84:	4613      	mov	r3, r2
   1dd86:	e7ed      	b.n	1dd64 <transfer_next_chunk+0x54>
   1dd88:	0bad0000 	.word	0x0bad0000

0001dd8c <event_handler>:
{
   1dd8c:	b510      	push	{r4, lr}
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1dd8e:	7803      	ldrb	r3, [r0, #0]
{
   1dd90:	460c      	mov	r4, r1
	if (p_event->type == NRFX_SPI_EVENT_DONE) {
   1dd92:	2b00      	cmp	r3, #0
   1dd94:	d14e      	bne.n	1de34 <event_handler+0xa8>
	if (!ctx->tx_len) {
   1dd96:	6d0b      	ldr	r3, [r1, #80]	; 0x50
   1dd98:	b163      	cbz	r3, 1ddb4 <event_handler+0x28>
		spi_context_update_tx(&dev_data->ctx, 1, dev_data->chunk_len);
   1dd9a:	6e0a      	ldr	r2, [r1, #96]	; 0x60
	if (len > ctx->tx_len) {
   1dd9c:	429a      	cmp	r2, r3
   1dd9e:	d91d      	bls.n	1dddc <event_handler+0x50>
   1dda0:	4925      	ldr	r1, [pc, #148]	; (1de38 <event_handler+0xac>)
   1dda2:	4b26      	ldr	r3, [pc, #152]	; (1de3c <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1dda4:	4826      	ldr	r0, [pc, #152]	; (1de40 <event_handler+0xb4>)
   1dda6:	1ac9      	subs	r1, r1, r3
   1dda8:	08c9      	lsrs	r1, r1, #3
   1ddaa:	0189      	lsls	r1, r1, #6
   1ddac:	f041 0101 	orr.w	r1, r1, #1
   1ddb0:	f004 fb4e 	bl	22450 <log_0>
	if (!ctx->rx_len) {
   1ddb4:	6da3      	ldr	r3, [r4, #88]	; 0x58
   1ddb6:	b163      	cbz	r3, 1ddd2 <event_handler+0x46>
		spi_context_update_rx(&dev_data->ctx, 1, dev_data->chunk_len);
   1ddb8:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (len > ctx->rx_len) {
   1ddba:	429a      	cmp	r2, r3
   1ddbc:	d924      	bls.n	1de08 <event_handler+0x7c>
   1ddbe:	491e      	ldr	r1, [pc, #120]	; (1de38 <event_handler+0xac>)
   1ddc0:	4b1e      	ldr	r3, [pc, #120]	; (1de3c <event_handler+0xb0>)
		LOG_ERR("Update exceeds current buffer");
   1ddc2:	481f      	ldr	r0, [pc, #124]	; (1de40 <event_handler+0xb4>)
   1ddc4:	1ac9      	subs	r1, r1, r3
   1ddc6:	08c9      	lsrs	r1, r1, #3
   1ddc8:	0189      	lsls	r1, r1, #6
   1ddca:	f041 0101 	orr.w	r1, r1, #1
   1ddce:	f004 fb3f 	bl	22450 <log_0>
		transfer_next_chunk(dev_data->dev);
   1ddd2:	6de0      	ldr	r0, [r4, #92]	; 0x5c
}
   1ddd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		transfer_next_chunk(dev_data->dev);
   1ddd8:	f7ff bf9a 	b.w	1dd10 <transfer_next_chunk>
	ctx->tx_len -= len;
   1dddc:	1a9b      	subs	r3, r3, r2
   1ddde:	650b      	str	r3, [r1, #80]	; 0x50
	if (!ctx->tx_len) {
   1dde0:	b963      	cbnz	r3, 1ddfc <event_handler+0x70>
		ctx->tx_count--;
   1dde2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
   1dde4:	3b01      	subs	r3, #1
   1dde6:	640b      	str	r3, [r1, #64]	; 0x40
		if (ctx->tx_count) {
   1dde8:	b163      	cbz	r3, 1de04 <event_handler+0x78>
			ctx->current_tx++;
   1ddea:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   1ddec:	f103 0208 	add.w	r2, r3, #8
   1ddf0:	63ca      	str	r2, [r1, #60]	; 0x3c
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1ddf2:	689a      	ldr	r2, [r3, #8]
			ctx->tx_len = ctx->current_tx->len / dfs;
   1ddf4:	68db      	ldr	r3, [r3, #12]
			ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1ddf6:	64ca      	str	r2, [r1, #76]	; 0x4c
			ctx->tx_len = ctx->current_tx->len / dfs;
   1ddf8:	650b      	str	r3, [r1, #80]	; 0x50
   1ddfa:	e7db      	b.n	1ddb4 <event_handler+0x28>
	} else if (ctx->tx_buf) {
   1ddfc:	6ccb      	ldr	r3, [r1, #76]	; 0x4c
   1ddfe:	2b00      	cmp	r3, #0
   1de00:	d0d8      	beq.n	1ddb4 <event_handler+0x28>
		ctx->tx_buf += dfs * len;
   1de02:	4413      	add	r3, r2
   1de04:	64e3      	str	r3, [r4, #76]	; 0x4c
   1de06:	e7d5      	b.n	1ddb4 <event_handler+0x28>
	ctx->rx_len -= len;
   1de08:	1a9b      	subs	r3, r3, r2
   1de0a:	65a3      	str	r3, [r4, #88]	; 0x58
	if (!ctx->rx_len) {
   1de0c:	b963      	cbnz	r3, 1de28 <event_handler+0x9c>
		ctx->rx_count--;
   1de0e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   1de10:	3b01      	subs	r3, #1
   1de12:	64a3      	str	r3, [r4, #72]	; 0x48
		if (ctx->rx_count) {
   1de14:	b163      	cbz	r3, 1de30 <event_handler+0xa4>
			ctx->current_rx++;
   1de16:	6c63      	ldr	r3, [r4, #68]	; 0x44
   1de18:	f103 0208 	add.w	r2, r3, #8
   1de1c:	6462      	str	r2, [r4, #68]	; 0x44
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1de1e:	689a      	ldr	r2, [r3, #8]
			ctx->rx_len = ctx->current_rx->len / dfs;
   1de20:	68db      	ldr	r3, [r3, #12]
			ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1de22:	6562      	str	r2, [r4, #84]	; 0x54
			ctx->rx_len = ctx->current_rx->len / dfs;
   1de24:	65a3      	str	r3, [r4, #88]	; 0x58
   1de26:	e7d4      	b.n	1ddd2 <event_handler+0x46>
	} else if (ctx->rx_buf) {
   1de28:	6d63      	ldr	r3, [r4, #84]	; 0x54
   1de2a:	2b00      	cmp	r3, #0
   1de2c:	d0d1      	beq.n	1ddd2 <event_handler+0x46>
		ctx->rx_buf += dfs * len;
   1de2e:	4413      	add	r3, r2
   1de30:	6563      	str	r3, [r4, #84]	; 0x54
   1de32:	e7ce      	b.n	1ddd2 <event_handler+0x46>
}
   1de34:	bd10      	pop	{r4, pc}
   1de36:	bf00      	nop
   1de38:	00027a18 	.word	0x00027a18
   1de3c:	000278c0 	.word	0x000278c0
   1de40:	0002d79b 	.word	0x0002d79b

0001de44 <spi_nrfx_transceive>:
{
   1de44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1de48:	461e      	mov	r6, r3
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1de4a:	888b      	ldrh	r3, [r1, #4]
	return dev->data;
   1de4c:	68c4      	ldr	r4, [r0, #12]
   1de4e:	045b      	lsls	r3, r3, #17
{
   1de50:	4680      	mov	r8, r0
   1de52:	460d      	mov	r5, r1
   1de54:	4617      	mov	r7, r2
   1de56:	d42d      	bmi.n	1deb4 <spi_nrfx_transceive+0x70>
	return z_impl_k_sem_take(sem, timeout);
   1de58:	f04f 32ff 	mov.w	r2, #4294967295
   1de5c:	f04f 33ff 	mov.w	r3, #4294967295
   1de60:	f104 0008 	add.w	r0, r4, #8
   1de64:	f002 fb24 	bl	204b0 <z_impl_k_sem_take>
	ctx->owner = spi_cfg;
   1de68:	6065      	str	r5, [r4, #4]
	return dev->data;
   1de6a:	f8d8 200c 	ldr.w	r2, [r8, #12]
	if (spi_context_configured(ctx, spi_cfg)) {
   1de6e:	6813      	ldr	r3, [r2, #0]
   1de70:	429d      	cmp	r5, r3
   1de72:	f000 80b1 	beq.w	1dfd8 <spi_nrfx_transceive+0x194>
	if (SPI_OP_MODE_GET(spi_cfg->operation) != SPI_OP_MODE_MASTER) {
   1de76:	88ab      	ldrh	r3, [r5, #4]
   1de78:	07d8      	lsls	r0, r3, #31
   1de7a:	d522      	bpl.n	1dec2 <spi_nrfx_transceive+0x7e>
   1de7c:	4a82      	ldr	r2, [pc, #520]	; (1e088 <spi_nrfx_transceive+0x244>)
   1de7e:	4b83      	ldr	r3, [pc, #524]	; (1e08c <spi_nrfx_transceive+0x248>)
		LOG_ERR("Slave mode is not supported on %s",
   1de80:	f8d8 1000 	ldr.w	r1, [r8]
   1de84:	4882      	ldr	r0, [pc, #520]	; (1e090 <spi_nrfx_transceive+0x24c>)
   1de86:	1ad2      	subs	r2, r2, r3
   1de88:	08d2      	lsrs	r2, r2, #3
   1de8a:	0192      	lsls	r2, r2, #6
   1de8c:	f042 0201 	orr.w	r2, r2, #1
   1de90:	f004 faeb 	bl	2246a <log_1>
		return -EINVAL;
   1de94:	f06f 0515 	mvn.w	r5, #21
	if (!(ctx->config->operation & SPI_LOCK_ON)) {
   1de98:	6823      	ldr	r3, [r4, #0]
   1de9a:	889b      	ldrh	r3, [r3, #4]
   1de9c:	f413 4380 	ands.w	r3, r3, #16384	; 0x4000
   1dea0:	d104      	bne.n	1deac <spi_nrfx_transceive+0x68>
		ctx->owner = NULL;
   1dea2:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   1dea4:	f104 0008 	add.w	r0, r4, #8
   1dea8:	f002 fadc 	bl	20464 <z_impl_k_sem_give>
}
   1deac:	4628      	mov	r0, r5
   1deae:	b003      	add	sp, #12
   1deb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if ((spi_cfg->operation & SPI_LOCK_ON) &&
   1deb4:	6923      	ldr	r3, [r4, #16]
   1deb6:	2b00      	cmp	r3, #0
   1deb8:	d1ce      	bne.n	1de58 <spi_nrfx_transceive+0x14>
		(k_sem_count_get(&ctx->lock) == 0) &&
   1deba:	6863      	ldr	r3, [r4, #4]
   1debc:	4299      	cmp	r1, r3
   1debe:	d1cb      	bne.n	1de58 <spi_nrfx_transceive+0x14>
   1dec0:	e7d3      	b.n	1de6a <spi_nrfx_transceive+0x26>
	if (spi_cfg->operation & SPI_MODE_LOOP) {
   1dec2:	0719      	lsls	r1, r3, #28
   1dec4:	d50a      	bpl.n	1dedc <spi_nrfx_transceive+0x98>
   1dec6:	4970      	ldr	r1, [pc, #448]	; (1e088 <spi_nrfx_transceive+0x244>)
   1dec8:	4b70      	ldr	r3, [pc, #448]	; (1e08c <spi_nrfx_transceive+0x248>)
		LOG_ERR("Loopback mode is not supported");
   1deca:	4872      	ldr	r0, [pc, #456]	; (1e094 <spi_nrfx_transceive+0x250>)
   1decc:	1ac9      	subs	r1, r1, r3
   1dece:	08c9      	lsrs	r1, r1, #3
   1ded0:	0189      	lsls	r1, r1, #6
   1ded2:	f041 0101 	orr.w	r1, r1, #1
		LOG_ERR("Word sizes other than 8 bits"
   1ded6:	f004 fabb 	bl	22450 <log_0>
   1deda:	e7db      	b.n	1de94 <spi_nrfx_transceive+0x50>
	if ((spi_cfg->operation & SPI_LINES_MASK) != SPI_LINES_SINGLE) {
   1dedc:	f413 5fc0 	tst.w	r3, #6144	; 0x1800
   1dee0:	d008      	beq.n	1def4 <spi_nrfx_transceive+0xb0>
   1dee2:	4969      	ldr	r1, [pc, #420]	; (1e088 <spi_nrfx_transceive+0x244>)
   1dee4:	4b69      	ldr	r3, [pc, #420]	; (1e08c <spi_nrfx_transceive+0x248>)
		LOG_ERR("Only single line mode is supported");
   1dee6:	486c      	ldr	r0, [pc, #432]	; (1e098 <spi_nrfx_transceive+0x254>)
   1dee8:	1ac9      	subs	r1, r1, r3
   1deea:	08c9      	lsrs	r1, r1, #3
   1deec:	0189      	lsls	r1, r1, #6
   1deee:	f041 0101 	orr.w	r1, r1, #1
   1def2:	e7f0      	b.n	1ded6 <spi_nrfx_transceive+0x92>
	if (SPI_WORD_SIZE_GET(spi_cfg->operation) != 8) {
   1def4:	f3c3 1345 	ubfx	r3, r3, #5, #6
   1def8:	2b08      	cmp	r3, #8
   1defa:	d008      	beq.n	1df0e <spi_nrfx_transceive+0xca>
   1defc:	4962      	ldr	r1, [pc, #392]	; (1e088 <spi_nrfx_transceive+0x244>)
   1defe:	4b63      	ldr	r3, [pc, #396]	; (1e08c <spi_nrfx_transceive+0x248>)
		LOG_ERR("Word sizes other than 8 bits"
   1df00:	4866      	ldr	r0, [pc, #408]	; (1e09c <spi_nrfx_transceive+0x258>)
   1df02:	1ac9      	subs	r1, r1, r3
   1df04:	08c9      	lsrs	r1, r1, #3
   1df06:	0189      	lsls	r1, r1, #6
   1df08:	f041 0101 	orr.w	r1, r1, #1
   1df0c:	e7e3      	b.n	1ded6 <spi_nrfx_transceive+0x92>
	if (spi_cfg->frequency < 125000) {
   1df0e:	6829      	ldr	r1, [r5, #0]
   1df10:	4b63      	ldr	r3, [pc, #396]	; (1e0a0 <spi_nrfx_transceive+0x25c>)
   1df12:	4299      	cmp	r1, r3
   1df14:	d808      	bhi.n	1df28 <spi_nrfx_transceive+0xe4>
   1df16:	495c      	ldr	r1, [pc, #368]	; (1e088 <spi_nrfx_transceive+0x244>)
   1df18:	4b5c      	ldr	r3, [pc, #368]	; (1e08c <spi_nrfx_transceive+0x248>)
		LOG_ERR("Frequencies lower than 125 kHz are not supported");
   1df1a:	4862      	ldr	r0, [pc, #392]	; (1e0a4 <spi_nrfx_transceive+0x260>)
   1df1c:	1ac9      	subs	r1, r1, r3
   1df1e:	08c9      	lsrs	r1, r1, #3
   1df20:	0189      	lsls	r1, r1, #6
   1df22:	f041 0101 	orr.w	r1, r1, #1
   1df26:	e7d6      	b.n	1ded6 <spi_nrfx_transceive+0x92>
	if (ctx->config->cs && ctx->config->cs->gpio_dev) {
   1df28:	68ab      	ldr	r3, [r5, #8]
	return dev->config;
   1df2a:	f8d8 9004 	ldr.w	r9, [r8, #4]
	ctx->config = spi_cfg;
   1df2e:	6015      	str	r5, [r2, #0]
   1df30:	2b00      	cmp	r3, #0
   1df32:	d07b      	beq.n	1e02c <spi_nrfx_transceive+0x1e8>
   1df34:	6818      	ldr	r0, [r3, #0]
   1df36:	2800      	cmp	r0, #0
   1df38:	d078      	beq.n	1e02c <spi_nrfx_transceive+0x1e8>
				   ctx->config->cs->gpio_dt_flags |
   1df3a:	f893 a009 	ldrb.w	sl, [r3, #9]
		gpio_pin_configure(ctx->config->cs->gpio_dev,
   1df3e:	7a19      	ldrb	r1, [r3, #8]
{
	const struct gpio_driver_api *api =
		(const struct gpio_driver_api *)port->api;
	const struct gpio_driver_config *const cfg =
		(const struct gpio_driver_config *)port->config;
	struct gpio_driver_data *data =
   1df40:	f8d0 b00c 	ldr.w	fp, [r0, #12]
		 != (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH),
		 "Output cannot be initialized low and high");

	if (((flags & GPIO_OUTPUT_INIT_LOGICAL) != 0)
	    && ((flags & (GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH)) != 0)
	    && ((flags & GPIO_ACTIVE_LOW) != 0)) {
   1df44:	f01a 0f01 	tst.w	sl, #1
   1df48:	bf0c      	ite	eq
   1df4a:	f44a 5ab0 	orreq.w	sl, sl, #5632	; 0x1600
		flags ^= GPIO_OUTPUT_INIT_LOW | GPIO_OUTPUT_INIT_HIGH
   1df4e:	f48a 6a20 	eorne.w	sl, sl, #2560	; 0xa00
	return api->pin_configure(port, pin, flags);
   1df52:	6883      	ldr	r3, [r0, #8]
   1df54:	9101      	str	r1, [sp, #4]
   1df56:	681b      	ldr	r3, [r3, #0]
   1df58:	4652      	mov	r2, sl
   1df5a:	4798      	blx	r3
	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	ret = gpio_config(port, pin, flags);
	if (ret != 0) {
   1df5c:	b960      	cbnz	r0, 1df78 <spi_nrfx_transceive+0x134>
		return ret;
	}

	if ((flags & GPIO_ACTIVE_LOW) != 0) {
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1df5e:	9901      	ldr	r1, [sp, #4]
   1df60:	f8db 3000 	ldr.w	r3, [fp]
   1df64:	2201      	movs	r2, #1
   1df66:	fa02 f101 	lsl.w	r1, r2, r1
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   1df6a:	f01a 0f01 	tst.w	sl, #1
		data->invert |= (gpio_port_pins_t)BIT(pin);
   1df6e:	bf14      	ite	ne
   1df70:	430b      	orrne	r3, r1
	} else {
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   1df72:	438b      	biceq	r3, r1
   1df74:	f8cb 3000 	str.w	r3, [fp]
	nrf_spi_configure(spi->p_reg,
   1df78:	88a9      	ldrh	r1, [r5, #4]
   1df7a:	f8d9 2000 	ldr.w	r2, [r9]
	if (SPI_MODE_GET(operation) & SPI_MODE_CPOL) {
   1df7e:	0788      	lsls	r0, r1, #30
   1df80:	f001 0304 	and.w	r3, r1, #4
   1df84:	d55d      	bpl.n	1e042 <spi_nrfx_transceive+0x1fe>
			return NRF_SPI_MODE_2;
   1df86:	2b00      	cmp	r3, #0
   1df88:	bf14      	ite	ne
   1df8a:	2303      	movne	r3, #3
   1df8c:	2302      	moveq	r3, #2
                                         nrf_spi_mode_t      spi_mode,
                                         nrf_spi_bit_order_t spi_bit_order)
{
    uint32_t config = (spi_bit_order == NRF_SPI_BIT_ORDER_MSB_FIRST ?
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
    switch (spi_mode)
   1df8e:	2b02      	cmp	r3, #2
	if (operation & SPI_TRANSFER_LSB) {
   1df90:	f3c1 1100 	ubfx	r1, r1, #4, #1
   1df94:	d059      	beq.n	1e04a <spi_nrfx_transceive+0x206>
   1df96:	2b03      	cmp	r3, #3
   1df98:	d05a      	beq.n	1e050 <spi_nrfx_transceive+0x20c>
   1df9a:	2b01      	cmp	r3, #1
   1df9c:	d101      	bne.n	1dfa2 <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Leading    << SPI_CONFIG_CPHA_Pos);
        break;

    case NRF_SPI_MODE_1:
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1df9e:	f041 0102 	orr.w	r1, r1, #2
	if (frequency < 250000) {
   1dfa2:	4b41      	ldr	r3, [pc, #260]	; (1e0a8 <spi_nrfx_transceive+0x264>)
    case NRF_SPI_MODE_3:
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
                  (SPI_CONFIG_CPHA_Trailing   << SPI_CONFIG_CPHA_Pos);
        break;
    }
    p_reg->CONFIG = config;
   1dfa4:	f8c2 1554 	str.w	r1, [r2, #1364]	; 0x554
	nrf_spi_frequency_set(spi->p_reg,
   1dfa8:	6829      	ldr	r1, [r5, #0]
	if (frequency < 250000) {
   1dfaa:	4299      	cmp	r1, r3
   1dfac:	d953      	bls.n	1e056 <spi_nrfx_transceive+0x212>
	} else if (frequency < 500000) {
   1dfae:	4b3f      	ldr	r3, [pc, #252]	; (1e0ac <spi_nrfx_transceive+0x268>)
   1dfb0:	4299      	cmp	r1, r3
   1dfb2:	d953      	bls.n	1e05c <spi_nrfx_transceive+0x218>
	} else if (frequency < 1000000) {
   1dfb4:	4b3e      	ldr	r3, [pc, #248]	; (1e0b0 <spi_nrfx_transceive+0x26c>)
   1dfb6:	4299      	cmp	r1, r3
   1dfb8:	d953      	bls.n	1e062 <spi_nrfx_transceive+0x21e>
	} else if (frequency < 2000000) {
   1dfba:	4b3e      	ldr	r3, [pc, #248]	; (1e0b4 <spi_nrfx_transceive+0x270>)
   1dfbc:	4299      	cmp	r1, r3
   1dfbe:	d953      	bls.n	1e068 <spi_nrfx_transceive+0x224>
	} else if (frequency < 4000000) {
   1dfc0:	4b3d      	ldr	r3, [pc, #244]	; (1e0b8 <spi_nrfx_transceive+0x274>)
   1dfc2:	4299      	cmp	r1, r3
   1dfc4:	d953      	bls.n	1e06e <spi_nrfx_transceive+0x22a>
		return NRF_SPI_FREQ_8M;
   1dfc6:	4b3d      	ldr	r3, [pc, #244]	; (1e0bc <spi_nrfx_transceive+0x278>)
   1dfc8:	4299      	cmp	r1, r3
   1dfca:	bf34      	ite	cc
   1dfcc:	f04f 4180 	movcc.w	r1, #1073741824	; 0x40000000
   1dfd0:	f04f 4100 	movcs.w	r1, #2147483648	; 0x80000000
    p_reg->FREQUENCY = (uint32_t)frequency;
   1dfd4:	f8c2 1524 	str.w	r1, [r2, #1316]	; 0x524
		dev_data->busy = true;
   1dfd8:	2301      	movs	r3, #1
   1dfda:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
	if (tx_bufs) {
   1dfde:	2f00      	cmp	r7, #0
   1dfe0:	d048      	beq.n	1e074 <spi_nrfx_transceive+0x230>
		ctx->current_tx = tx_bufs->buffers;
   1dfe2:	683b      	ldr	r3, [r7, #0]
		ctx->tx_count = tx_bufs->count;
   1dfe4:	687a      	ldr	r2, [r7, #4]
		ctx->current_tx = tx_bufs->buffers;
   1dfe6:	63e3      	str	r3, [r4, #60]	; 0x3c
		ctx->tx_count = tx_bufs->count;
   1dfe8:	6422      	str	r2, [r4, #64]	; 0x40
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1dfea:	681a      	ldr	r2, [r3, #0]
		ctx->tx_len = ctx->current_tx->len / dfs;
   1dfec:	685b      	ldr	r3, [r3, #4]
		ctx->tx_buf = (const uint8_t *)ctx->current_tx->buf;
   1dfee:	64e2      	str	r2, [r4, #76]	; 0x4c
		ctx->tx_len = ctx->current_tx->len / dfs;
   1dff0:	6523      	str	r3, [r4, #80]	; 0x50
	if (rx_bufs) {
   1dff2:	2e00      	cmp	r6, #0
   1dff4:	d043      	beq.n	1e07e <spi_nrfx_transceive+0x23a>
		ctx->current_rx = rx_bufs->buffers;
   1dff6:	6833      	ldr	r3, [r6, #0]
		ctx->rx_count = rx_bufs->count;
   1dff8:	6872      	ldr	r2, [r6, #4]
		ctx->current_rx = rx_bufs->buffers;
   1dffa:	6463      	str	r3, [r4, #68]	; 0x44
		ctx->rx_count = rx_bufs->count;
   1dffc:	64a2      	str	r2, [r4, #72]	; 0x48
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1dffe:	681a      	ldr	r2, [r3, #0]
		ctx->rx_len = ctx->current_rx->len / dfs;
   1e000:	685b      	ldr	r3, [r3, #4]
		ctx->rx_buf = (uint8_t *)ctx->current_rx->buf;
   1e002:	6562      	str	r2, [r4, #84]	; 0x54
		ctx->rx_len = ctx->current_rx->len / dfs;
   1e004:	65a3      	str	r3, [r4, #88]	; 0x58
	ctx->sync_status = 0;
   1e006:	2200      	movs	r2, #0
   1e008:	63a2      	str	r2, [r4, #56]	; 0x38
	_spi_context_cs_control(ctx, on, false);
   1e00a:	2101      	movs	r1, #1
   1e00c:	4620      	mov	r0, r4
   1e00e:	f008 fb83 	bl	26718 <_spi_context_cs_control>
		transfer_next_chunk(dev);
   1e012:	4640      	mov	r0, r8
   1e014:	f7ff fe7c 	bl	1dd10 <transfer_next_chunk>
	return z_impl_k_sem_take(sem, timeout);
   1e018:	f04f 32ff 	mov.w	r2, #4294967295
   1e01c:	f04f 33ff 	mov.w	r3, #4294967295
   1e020:	f104 0020 	add.w	r0, r4, #32
   1e024:	f002 fa44 	bl	204b0 <z_impl_k_sem_take>
	status = ctx->sync_status;
   1e028:	6ba5      	ldr	r5, [r4, #56]	; 0x38
	return status;
   1e02a:	e735      	b.n	1de98 <spi_nrfx_transceive+0x54>
   1e02c:	4b17      	ldr	r3, [pc, #92]	; (1e08c <spi_nrfx_transceive+0x248>)
   1e02e:	4916      	ldr	r1, [pc, #88]	; (1e088 <spi_nrfx_transceive+0x244>)
		LOG_INF("CS control inhibited (no GPIO device)");
   1e030:	4823      	ldr	r0, [pc, #140]	; (1e0c0 <spi_nrfx_transceive+0x27c>)
   1e032:	1ac9      	subs	r1, r1, r3
   1e034:	08c9      	lsrs	r1, r1, #3
   1e036:	0189      	lsls	r1, r1, #6
   1e038:	f041 0103 	orr.w	r1, r1, #3
   1e03c:	f004 fa08 	bl	22450 <log_0>
   1e040:	e79a      	b.n	1df78 <spi_nrfx_transceive+0x134>
			return NRF_SPI_MODE_0;
   1e042:	3b00      	subs	r3, #0
   1e044:	bf18      	it	ne
   1e046:	2301      	movne	r3, #1
   1e048:	e7a1      	b.n	1df8e <spi_nrfx_transceive+0x14a>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1e04a:	f041 0104 	orr.w	r1, r1, #4
        break;
   1e04e:	e7a8      	b.n	1dfa2 <spi_nrfx_transceive+0x15e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1e050:	f041 0106 	orr.w	r1, r1, #6
        break;
   1e054:	e7a5      	b.n	1dfa2 <spi_nrfx_transceive+0x15e>
		return NRF_SPI_FREQ_125K;
   1e056:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
   1e05a:	e7bb      	b.n	1dfd4 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_250K;
   1e05c:	f04f 6180 	mov.w	r1, #67108864	; 0x4000000
   1e060:	e7b8      	b.n	1dfd4 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_500K;
   1e062:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   1e066:	e7b5      	b.n	1dfd4 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_1M;
   1e068:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   1e06c:	e7b2      	b.n	1dfd4 <spi_nrfx_transceive+0x190>
		return NRF_SPI_FREQ_2M;
   1e06e:	f04f 5100 	mov.w	r1, #536870912	; 0x20000000
   1e072:	e7af      	b.n	1dfd4 <spi_nrfx_transceive+0x190>
		ctx->tx_count = 0;
   1e074:	e9c4 770f 	strd	r7, r7, [r4, #60]	; 0x3c
		ctx->tx_len = 0;
   1e078:	e9c4 7713 	strd	r7, r7, [r4, #76]	; 0x4c
   1e07c:	e7b9      	b.n	1dff2 <spi_nrfx_transceive+0x1ae>
		ctx->rx_count = 0;
   1e07e:	e9c4 6611 	strd	r6, r6, [r4, #68]	; 0x44
		ctx->rx_len = 0;
   1e082:	e9c4 6615 	strd	r6, r6, [r4, #84]	; 0x54
   1e086:	e7be      	b.n	1e006 <spi_nrfx_transceive+0x1c2>
   1e088:	00027a18 	.word	0x00027a18
   1e08c:	000278c0 	.word	0x000278c0
   1e090:	0002d7b9 	.word	0x0002d7b9
   1e094:	0002d7db 	.word	0x0002d7db
   1e098:	0002d7fa 	.word	0x0002d7fa
   1e09c:	0002d81d 	.word	0x0002d81d
   1e0a0:	0001e847 	.word	0x0001e847
   1e0a4:	0002d84c 	.word	0x0002d84c
   1e0a8:	0003d08f 	.word	0x0003d08f
   1e0ac:	0007a11f 	.word	0x0007a11f
   1e0b0:	000f423f 	.word	0x000f423f
   1e0b4:	001e847f 	.word	0x001e847f
   1e0b8:	003d08ff 	.word	0x003d08ff
   1e0bc:	007a1200 	.word	0x007a1200
   1e0c0:	0002d87d 	.word	0x0002d87d

0001e0c4 <flash_nrf_pages_layout>:

static void flash_nrf_pages_layout(const struct device *dev,
				     const struct flash_pages_layout **layout,
				     size_t *layout_size)
{
	*layout = &dev_layout;
   1e0c4:	4b02      	ldr	r3, [pc, #8]	; (1e0d0 <flash_nrf_pages_layout+0xc>)
   1e0c6:	600b      	str	r3, [r1, #0]
	*layout_size = 1;
   1e0c8:	2301      	movs	r3, #1
   1e0ca:	6013      	str	r3, [r2, #0]
}
   1e0cc:	4770      	bx	lr
   1e0ce:	bf00      	nop
   1e0d0:	2000eb9c 	.word	0x2000eb9c

0001e0d4 <flash_nrf_get_parameters>:
flash_nrf_get_parameters(const struct device *dev)
{
	ARG_UNUSED(dev);

	return &flash_nrf_parameters;
}
   1e0d4:	4800      	ldr	r0, [pc, #0]	; (1e0d8 <flash_nrf_get_parameters+0x4>)
   1e0d6:	4770      	bx	lr
   1e0d8:	00029284 	.word	0x00029284

0001e0dc <flash_nrf_read>:
{
   1e0dc:	b570      	push	{r4, r5, r6, lr}
   1e0de:	460d      	mov	r5, r1
	if (is_regular_addr_valid(addr, len)) {
   1e0e0:	4628      	mov	r0, r5
   1e0e2:	4619      	mov	r1, r3
{
   1e0e4:	4616      	mov	r6, r2
   1e0e6:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e0e8:	f008 fb5f 	bl	267aa <is_regular_addr_valid>
   1e0ec:	b970      	cbnz	r0, 1e10c <flash_nrf_read+0x30>
   1e0ee:	4a0c      	ldr	r2, [pc, #48]	; (1e120 <flash_nrf_read+0x44>)
   1e0f0:	4b0c      	ldr	r3, [pc, #48]	; (1e124 <flash_nrf_read+0x48>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e0f2:	480d      	ldr	r0, [pc, #52]	; (1e128 <flash_nrf_read+0x4c>)
   1e0f4:	1a9b      	subs	r3, r3, r2
   1e0f6:	08db      	lsrs	r3, r3, #3
   1e0f8:	019b      	lsls	r3, r3, #6
   1e0fa:	f043 0301 	orr.w	r3, r3, #1
   1e0fe:	4622      	mov	r2, r4
   1e100:	4629      	mov	r1, r5
   1e102:	f004 f9c6 	bl	22492 <log_2>
		return -EINVAL;
   1e106:	f06f 0015 	mvn.w	r0, #21
}
   1e10a:	bd70      	pop	{r4, r5, r6, pc}
	if (!len) {
   1e10c:	b134      	cbz	r4, 1e11c <flash_nrf_read+0x40>
	memcpy(data, (void *)addr, len);
   1e10e:	4622      	mov	r2, r4
   1e110:	4629      	mov	r1, r5
   1e112:	4630      	mov	r0, r6
   1e114:	f006 f9a8 	bl	24468 <memcpy>
	return 0;
   1e118:	2000      	movs	r0, #0
   1e11a:	e7f6      	b.n	1e10a <flash_nrf_read+0x2e>
		return 0;
   1e11c:	4620      	mov	r0, r4
   1e11e:	e7f4      	b.n	1e10a <flash_nrf_read+0x2e>
   1e120:	000278c0 	.word	0x000278c0
   1e124:	000279b8 	.word	0x000279b8
   1e128:	0002d8b0 	.word	0x0002d8b0

0001e12c <nrf_flash_init>:
	.page_layout = flash_nrf_pages_layout,
#endif
};

static int nrf_flash_init(const struct device *dev)
{
   1e12c:	b510      	push	{r4, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e12e:	2201      	movs	r2, #1
   1e130:	4611      	mov	r1, r2
   1e132:	4807      	ldr	r0, [pc, #28]	; (1e150 <nrf_flash_init+0x24>)
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
	nrf_flash_sync_init();
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */

#if defined(CONFIG_FLASH_PAGE_LAYOUT)
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e134:	4c07      	ldr	r4, [pc, #28]	; (1e154 <nrf_flash_init+0x28>)
   1e136:	f008 ffc4 	bl	270c2 <z_impl_k_sem_init>
	nrf_flash_sync_init();
   1e13a:	f000 f97d 	bl	1e438 <nrf_flash_sync_init>
	dev_layout.pages_count = nrfx_nvmc_flash_page_count_get();
   1e13e:	f008 fc72 	bl	26a26 <nrfx_nvmc_flash_page_count_get>
   1e142:	6020      	str	r0, [r4, #0]
	dev_layout.pages_size = nrfx_nvmc_flash_page_size_get();
   1e144:	f008 fc6b 	bl	26a1e <nrfx_nvmc_flash_page_size_get>
   1e148:	6060      	str	r0, [r4, #4]
#endif

	return 0;
}
   1e14a:	2000      	movs	r0, #0
   1e14c:	bd10      	pop	{r4, pc}
   1e14e:	bf00      	nop
   1e150:	2000eba4 	.word	0x2000eba4
   1e154:	2000eb9c 	.word	0x2000eb9c

0001e158 <flash_nrf_erase>:
{
   1e158:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e15a:	b087      	sub	sp, #28
   1e15c:	460e      	mov	r6, r1
   1e15e:	4615      	mov	r5, r2
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e160:	f008 fc5d 	bl	26a1e <nrfx_nvmc_flash_page_size_get>
	if (is_regular_addr_valid(addr, size)) {
   1e164:	4629      	mov	r1, r5
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   1e166:	4607      	mov	r7, r0
	if (is_regular_addr_valid(addr, size)) {
   1e168:	4630      	mov	r0, r6
   1e16a:	f008 fb1e 	bl	267aa <is_regular_addr_valid>
   1e16e:	b388      	cbz	r0, 1e1d4 <flash_nrf_erase+0x7c>
		if (((addr % pg_size) != 0) || ((size % pg_size) != 0)) {
   1e170:	fbb6 f3f7 	udiv	r3, r6, r7
   1e174:	fb07 6313 	mls	r3, r7, r3, r6
   1e178:	b923      	cbnz	r3, 1e184 <flash_nrf_erase+0x2c>
   1e17a:	fbb5 f4f7 	udiv	r4, r5, r7
   1e17e:	fb07 5414 	mls	r4, r7, r4, r5
   1e182:	b184      	cbz	r4, 1e1a6 <flash_nrf_erase+0x4e>
   1e184:	4a25      	ldr	r2, [pc, #148]	; (1e21c <flash_nrf_erase+0xc4>)
   1e186:	4b26      	ldr	r3, [pc, #152]	; (1e220 <flash_nrf_erase+0xc8>)
			LOG_ERR("unaligned address: 0x%08lx:%zu",
   1e188:	4826      	ldr	r0, [pc, #152]	; (1e224 <flash_nrf_erase+0xcc>)
   1e18a:	1a9b      	subs	r3, r3, r2
   1e18c:	08db      	lsrs	r3, r3, #3
   1e18e:	019b      	lsls	r3, r3, #6
   1e190:	f043 0301 	orr.w	r3, r3, #1
   1e194:	462a      	mov	r2, r5
   1e196:	4631      	mov	r1, r6
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e198:	f004 f97b 	bl	22492 <log_2>
		return -EINVAL;
   1e19c:	f06f 0415 	mvn.w	r4, #21
}
   1e1a0:	4620      	mov	r0, r4
   1e1a2:	b007      	add	sp, #28
   1e1a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!n_pages) {
   1e1a6:	42bd      	cmp	r5, r7
   1e1a8:	d3fa      	bcc.n	1e1a0 <flash_nrf_erase+0x48>
	return z_impl_k_sem_take(sem, timeout);
   1e1aa:	f04f 33ff 	mov.w	r3, #4294967295
   1e1ae:	f04f 32ff 	mov.w	r2, #4294967295
   1e1b2:	481d      	ldr	r0, [pc, #116]	; (1e228 <flash_nrf_erase+0xd0>)
   1e1b4:	f002 f97c 	bl	204b0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e1b8:	f008 fb2f 	bl	2681a <nrf_flash_sync_is_required>
   1e1bc:	ab02      	add	r3, sp, #8
   1e1be:	4601      	mov	r1, r0
   1e1c0:	b998      	cbnz	r0, 1e1ea <flash_nrf_erase+0x92>
	return FLASH_OP_DONE;
}

static int erase(uint32_t addr, uint32_t size)
{
	struct flash_context context = {
   1e1c2:	2210      	movs	r2, #16
   1e1c4:	4618      	mov	r0, r3
   1e1c6:	f006 f97a 	bl	244be <memset>
   1e1ca:	e9cd 6503 	strd	r6, r5, [sp, #12]
#if defined(CONFIG_SOC_FLASH_NRF_PARTIAL_ERASE)
		.flash_addr_next = addr
#endif
	};

	return	erase_op(&context);
   1e1ce:	f008 faff 	bl	267d0 <erase_op>
   1e1d2:	e01d      	b.n	1e210 <flash_nrf_erase+0xb8>
   1e1d4:	4a11      	ldr	r2, [pc, #68]	; (1e21c <flash_nrf_erase+0xc4>)
   1e1d6:	4b12      	ldr	r3, [pc, #72]	; (1e220 <flash_nrf_erase+0xc8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e1d8:	4814      	ldr	r0, [pc, #80]	; (1e22c <flash_nrf_erase+0xd4>)
   1e1da:	1a9b      	subs	r3, r3, r2
   1e1dc:	08db      	lsrs	r3, r3, #3
   1e1de:	019b      	lsls	r3, r3, #6
   1e1e0:	f043 0301 	orr.w	r3, r3, #1
   1e1e4:	462a      	mov	r2, r5
   1e1e6:	4631      	mov	r1, r6
   1e1e8:	e7d6      	b.n	1e198 <flash_nrf_erase+0x40>
	struct flash_context context = {
   1e1ea:	2210      	movs	r2, #16
   1e1ec:	4621      	mov	r1, r4
   1e1ee:	4618      	mov	r0, r3
   1e1f0:	f006 f965 	bl	244be <memset>
   1e1f4:	2201      	movs	r2, #1
   1e1f6:	f88d 2014 	strb.w	r2, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e1fa:	4a0d      	ldr	r2, [pc, #52]	; (1e230 <flash_nrf_erase+0xd8>)
   1e1fc:	e9cd 2000 	strd	r2, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e200:	480c      	ldr	r0, [pc, #48]	; (1e234 <flash_nrf_erase+0xdc>)
	struct flash_context context = {
   1e202:	e9cd 6503 	strd	r6, r5, [sp, #12]
	nrf_flash_sync_set_context(FLASH_SLOT_ERASE);
   1e206:	f000 f921 	bl	1e44c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e20a:	4668      	mov	r0, sp
   1e20c:	f7e4 fb88 	bl	2920 <nrf_flash_sync_exe>
	return	erase_op(&context);
   1e210:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e212:	4805      	ldr	r0, [pc, #20]	; (1e228 <flash_nrf_erase+0xd0>)
   1e214:	f002 f926 	bl	20464 <z_impl_k_sem_give>
}
   1e218:	e7c2      	b.n	1e1a0 <flash_nrf_erase+0x48>
   1e21a:	bf00      	nop
   1e21c:	000278c0 	.word	0x000278c0
   1e220:	000279b8 	.word	0x000279b8
   1e224:	0002d8cd 	.word	0x0002d8cd
   1e228:	2000eba4 	.word	0x2000eba4
   1e22c:	0002d8b0 	.word	0x0002d8b0
   1e230:	000267d1 	.word	0x000267d1
   1e234:	00015e64 	.word	0x00015e64

0001e238 <write_op>:
{
   1e238:	b538      	push	{r3, r4, r5, lr}
	if (w_ctx->enable_time_limit) {
   1e23a:	7b03      	ldrb	r3, [r0, #12]
{
   1e23c:	4604      	mov	r4, r0
	if (w_ctx->enable_time_limit) {
   1e23e:	b10b      	cbz	r3, 1e244 <write_op+0xc>
		nrf_flash_sync_get_timestamp_begin();
   1e240:	f000 f90c 	bl	1e45c <nrf_flash_sync_get_timestamp_begin>
{
   1e244:	2501      	movs	r5, #1
	while (w_ctx->len >= sizeof(uint32_t)) {
   1e246:	68a3      	ldr	r3, [r4, #8]
   1e248:	2b03      	cmp	r3, #3
   1e24a:	d806      	bhi.n	1e25a <write_op+0x22>

#ifndef NRF_DECLARE_ONLY

NRF_STATIC_INLINE bool nrf_nvmc_ready_check(NRF_NVMC_Type const * p_reg)
{
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1e24c:	4a12      	ldr	r2, [pc, #72]	; (1e298 <write_op+0x60>)
   1e24e:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e252:	07db      	lsls	r3, r3, #31
   1e254:	d5fb      	bpl.n	1e24e <write_op+0x16>
	return FLASH_OP_DONE;
   1e256:	2000      	movs	r0, #0
}
   1e258:	bd38      	pop	{r3, r4, r5, pc}
				     UNALIGNED_GET((uint32_t *)w_ctx->data_addr));
   1e25a:	6823      	ldr	r3, [r4, #0]
		nrfx_nvmc_word_write(w_ctx->flash_addr,
   1e25c:	6860      	ldr	r0, [r4, #4]
   1e25e:	6819      	ldr	r1, [r3, #0]
   1e260:	f000 fe68 	bl	1ef34 <nrfx_nvmc_word_write>
	w_ctx->flash_addr += shift;
   1e264:	6863      	ldr	r3, [r4, #4]
   1e266:	3304      	adds	r3, #4
   1e268:	6063      	str	r3, [r4, #4]
	w_ctx->data_addr += shift;
   1e26a:	6823      	ldr	r3, [r4, #0]
   1e26c:	3304      	adds	r3, #4
   1e26e:	6023      	str	r3, [r4, #0]
	w_ctx->len -= shift;
   1e270:	68a3      	ldr	r3, [r4, #8]
   1e272:	3b04      	subs	r3, #4
   1e274:	60a3      	str	r3, [r4, #8]
		if (w_ctx->enable_time_limit) {
   1e276:	7b23      	ldrb	r3, [r4, #12]
		i++;
   1e278:	3501      	adds	r5, #1
		if (w_ctx->enable_time_limit) {
   1e27a:	2b00      	cmp	r3, #0
   1e27c:	d0e3      	beq.n	1e246 <write_op+0xe>
			if (nrf_flash_sync_check_time_limit(i)) {
   1e27e:	4628      	mov	r0, r5
   1e280:	f7e4 fbca 	bl	2a18 <nrf_flash_sync_check_time_limit>
   1e284:	2800      	cmp	r0, #0
   1e286:	d0de      	beq.n	1e246 <write_op+0xe>
   1e288:	4a03      	ldr	r2, [pc, #12]	; (1e298 <write_op+0x60>)
   1e28a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
	while (!nrfx_nvmc_write_done_check()) {
   1e28e:	07d9      	lsls	r1, r3, #31
   1e290:	d5fb      	bpl.n	1e28a <write_op+0x52>
				return FLASH_OP_ONGOING;
   1e292:	f04f 30ff 	mov.w	r0, #4294967295
   1e296:	e7df      	b.n	1e258 <write_op+0x20>
   1e298:	4001e000 	.word	0x4001e000

0001e29c <flash_nrf_write>:
{
   1e29c:	b570      	push	{r4, r5, r6, lr}
   1e29e:	460d      	mov	r5, r1
   1e2a0:	b086      	sub	sp, #24
	if (is_regular_addr_valid(addr, len)) {
   1e2a2:	4619      	mov	r1, r3
   1e2a4:	4628      	mov	r0, r5
{
   1e2a6:	4616      	mov	r6, r2
   1e2a8:	461c      	mov	r4, r3
	if (is_regular_addr_valid(addr, len)) {
   1e2aa:	f008 fa7e 	bl	267aa <is_regular_addr_valid>
   1e2ae:	b980      	cbnz	r0, 1e2d2 <flash_nrf_write+0x36>
   1e2b0:	4a23      	ldr	r2, [pc, #140]	; (1e340 <flash_nrf_write+0xa4>)
   1e2b2:	4b24      	ldr	r3, [pc, #144]	; (1e344 <flash_nrf_write+0xa8>)
		LOG_ERR("invalid address: 0x%08lx:%zu",
   1e2b4:	4824      	ldr	r0, [pc, #144]	; (1e348 <flash_nrf_write+0xac>)
   1e2b6:	1a9b      	subs	r3, r3, r2
   1e2b8:	08db      	lsrs	r3, r3, #3
   1e2ba:	019b      	lsls	r3, r3, #6
   1e2bc:	f043 0301 	orr.w	r3, r3, #1
   1e2c0:	4622      	mov	r2, r4
   1e2c2:	4629      	mov	r1, r5
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e2c4:	f004 f8e5 	bl	22492 <log_2>
		return -EINVAL;
   1e2c8:	f06f 0415 	mvn.w	r4, #21
}
   1e2cc:	4620      	mov	r0, r4
   1e2ce:	b006      	add	sp, #24
   1e2d0:	bd70      	pop	{r4, r5, r6, pc}
	if (!is_aligned_32(addr) || (len % sizeof(uint32_t))) {
   1e2d2:	ea44 0305 	orr.w	r3, r4, r5
   1e2d6:	079b      	lsls	r3, r3, #30
   1e2d8:	d00a      	beq.n	1e2f0 <flash_nrf_write+0x54>
   1e2da:	4a19      	ldr	r2, [pc, #100]	; (1e340 <flash_nrf_write+0xa4>)
   1e2dc:	4b19      	ldr	r3, [pc, #100]	; (1e344 <flash_nrf_write+0xa8>)
		LOG_ERR("not word-aligned: 0x%08lx:%zu",
   1e2de:	481b      	ldr	r0, [pc, #108]	; (1e34c <flash_nrf_write+0xb0>)
   1e2e0:	1a9b      	subs	r3, r3, r2
   1e2e2:	08db      	lsrs	r3, r3, #3
   1e2e4:	019b      	lsls	r3, r3, #6
   1e2e6:	f043 0301 	orr.w	r3, r3, #1
   1e2ea:	4622      	mov	r2, r4
   1e2ec:	4629      	mov	r1, r5
   1e2ee:	e7e9      	b.n	1e2c4 <flash_nrf_write+0x28>
	if (!len) {
   1e2f0:	2c00      	cmp	r4, #0
   1e2f2:	d0eb      	beq.n	1e2cc <flash_nrf_write+0x30>
	return z_impl_k_sem_take(sem, timeout);
   1e2f4:	f04f 33ff 	mov.w	r3, #4294967295
   1e2f8:	f04f 32ff 	mov.w	r2, #4294967295
   1e2fc:	4814      	ldr	r0, [pc, #80]	; (1e350 <flash_nrf_write+0xb4>)
   1e2fe:	f002 f8d7 	bl	204b0 <z_impl_k_sem_take>
	if (nrf_flash_sync_is_required()) {
   1e302:	f008 fa8a 	bl	2681a <nrf_flash_sync_is_required>
   1e306:	4603      	mov	r3, r0
	struct flash_context context = {
   1e308:	e9cd 6502 	strd	r6, r5, [sp, #8]
   1e30c:	a802      	add	r0, sp, #8
   1e30e:	9404      	str	r4, [sp, #16]
	if (nrf_flash_sync_is_required()) {
   1e310:	b18b      	cbz	r3, 1e336 <flash_nrf_write+0x9a>
	struct flash_context context = {
   1e312:	2301      	movs	r3, #1
   1e314:	f88d 3014 	strb.w	r3, [sp, #20]
	struct flash_op_desc flash_op_desc = {
   1e318:	4b0e      	ldr	r3, [pc, #56]	; (1e354 <flash_nrf_write+0xb8>)
   1e31a:	e9cd 3000 	strd	r3, r0, [sp]
	nrf_flash_sync_set_context(FLASH_SLOT_WRITE);
   1e31e:	f641 504c 	movw	r0, #7500	; 0x1d4c
   1e322:	f000 f893 	bl	1e44c <nrf_flash_sync_set_context>
	return nrf_flash_sync_exe(&flash_op_desc);
   1e326:	4668      	mov	r0, sp
   1e328:	f7e4 fafa 	bl	2920 <nrf_flash_sync_exe>
#ifndef CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE
		.enable_time_limit = 0 /* disable time limit */
#endif /* !CONFIG_SOC_FLASH_NRF_RADIO_SYNC_NONE */
	};

	return write_op(&context);
   1e32c:	4604      	mov	r4, r0
	z_impl_k_sem_give(sem);
   1e32e:	4808      	ldr	r0, [pc, #32]	; (1e350 <flash_nrf_write+0xb4>)
   1e330:	f002 f898 	bl	20464 <z_impl_k_sem_give>
}
   1e334:	e7ca      	b.n	1e2cc <flash_nrf_write+0x30>
	struct flash_context context = {
   1e336:	f88d 3014 	strb.w	r3, [sp, #20]
	return write_op(&context);
   1e33a:	f7ff ff7d 	bl	1e238 <write_op>
   1e33e:	e7f5      	b.n	1e32c <flash_nrf_write+0x90>
   1e340:	000278c0 	.word	0x000278c0
   1e344:	000279b8 	.word	0x000279b8
   1e348:	0002d8b0 	.word	0x0002d8b0
   1e34c:	0002d8ec 	.word	0x0002d8ec
   1e350:	2000eba4 	.word	0x2000eba4
   1e354:	0001e239 	.word	0x0001e239

0001e358 <time_slot_callback_work>:
{
   1e358:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	if (op_desc->handler(op_desc->context) == FLASH_OP_DONE) {
   1e35a:	e9d3 2000 	ldrd	r2, r0, [r3]
   1e35e:	4790      	blx	r2
   1e360:	4604      	mov	r4, r0
   1e362:	b998      	cbnz	r0, 1e38c <time_slot_callback_work+0x34>
		ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e364:	f10d 010f 	add.w	r1, sp, #15
   1e368:	f10d 000e 	add.w	r0, sp, #14
   1e36c:	f7f6 f856 	bl	1441c <ll_timeslice_ticker_id_get>
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e370:	4623      	mov	r3, r4
   1e372:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1e376:	f89d 000e 	ldrb.w	r0, [sp, #14]
   1e37a:	9400      	str	r4, [sp, #0]
   1e37c:	4621      	mov	r1, r4
   1e37e:	f7f3 fc9d 	bl	11cbc <ticker_stop>
		_ticker_sync_context.result = 0;
   1e382:	4b03      	ldr	r3, [pc, #12]	; (1e390 <time_slot_callback_work+0x38>)
   1e384:	60dc      	str	r4, [r3, #12]
	z_impl_k_sem_give(sem);
   1e386:	4803      	ldr	r0, [pc, #12]	; (1e394 <time_slot_callback_work+0x3c>)
   1e388:	f002 f86c 	bl	20464 <z_impl_k_sem_give>
}
   1e38c:	b004      	add	sp, #16
   1e38e:	bd10      	pop	{r4, pc}
   1e390:	2000ebbc 	.word	0x2000ebbc
   1e394:	2000ebcc 	.word	0x2000ebcc

0001e398 <time_slot_delay>:
{
   1e398:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e39c:	b08d      	sub	sp, #52	; 0x34
   1e39e:	4606      	mov	r6, r0
   1e3a0:	460f      	mov	r7, r1
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e3a2:	f10d 002e 	add.w	r0, sp, #46	; 0x2e
   1e3a6:	f10d 012f 	add.w	r1, sp, #47	; 0x2f
{
   1e3aa:	4690      	mov	r8, r2
   1e3ac:	4699      	mov	r9, r3
	ll_timeslice_ticker_id_get(&instance_index, &ticker_id);
   1e3ae:	f7f6 f835 	bl	1441c <ll_timeslice_ticker_id_get>
			   (ticker_id + 1), /* ticker_id */
   1e3b2:	f89d 502f 	ldrb.w	r5, [sp, #47]	; 0x2f
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e3b6:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1e3ba:	9700      	str	r7, [sp, #0]
   1e3bc:	2400      	movs	r4, #0
			   (ticker_id + 1), /* ticker_id */
   1e3be:	3501      	adds	r5, #1
	err = ticker_start(instance_index, /* Radio instance ticker */
   1e3c0:	4633      	mov	r3, r6
   1e3c2:	e9cd 4407 	strd	r4, r4, [sp, #28]
   1e3c6:	e9cd 8905 	strd	r8, r9, [sp, #20]
   1e3ca:	e9cd 4403 	strd	r4, r4, [sp, #12]
   1e3ce:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1e3d2:	b2ea      	uxtb	r2, r5
   1e3d4:	4621      	mov	r1, r4
   1e3d6:	f7f3 fbe7 	bl	11ba8 <ticker_start>
	if (err != TICKER_STATUS_SUCCESS && err != TICKER_STATUS_BUSY) {
   1e3da:	f030 0302 	bics.w	r3, r0, #2
   1e3de:	d00d      	beq.n	1e3fc <time_slot_delay+0x64>
		_ticker_sync_context.result = 0;
   1e3e0:	4b08      	ldr	r3, [pc, #32]	; (1e404 <time_slot_delay+0x6c>)
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e3e2:	f89d 202f 	ldrb.w	r2, [sp, #47]	; 0x2f
		_ticker_sync_context.result = 0;
   1e3e6:	60dc      	str	r4, [r3, #12]
	int ret = ticker_stop(inst_idx, u_id, tic_id, NULL, NULL);
   1e3e8:	f89d 002e 	ldrb.w	r0, [sp, #46]	; 0x2e
   1e3ec:	9400      	str	r4, [sp, #0]
   1e3ee:	4623      	mov	r3, r4
   1e3f0:	4621      	mov	r1, r4
   1e3f2:	f7f3 fc63 	bl	11cbc <ticker_stop>
   1e3f6:	4804      	ldr	r0, [pc, #16]	; (1e408 <time_slot_delay+0x70>)
   1e3f8:	f002 f834 	bl	20464 <z_impl_k_sem_give>
}
   1e3fc:	b00d      	add	sp, #52	; 0x34
   1e3fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1e402:	bf00      	nop
   1e404:	2000ebbc 	.word	0x2000ebbc
   1e408:	2000ebcc 	.word	0x2000ebcc

0001e40c <time_slot_callback_prepare>:
	time_slot_delay(ticks_at_expire,
   1e40c:	4a01      	ldr	r2, [pc, #4]	; (1e414 <time_slot_callback_prepare+0x8>)
   1e40e:	2131      	movs	r1, #49	; 0x31
   1e410:	f7ff bfc2 	b.w	1e398 <time_slot_delay>
   1e414:	0001e419 	.word	0x0001e419

0001e418 <time_slot_callback_abort>:
{
   1e418:	b570      	push	{r4, r5, r6, lr}
   1e41a:	4604      	mov	r4, r0
   1e41c:	461d      	mov	r5, r3
	ll_radio_state_abort();
   1e41e:	f7f6 f803 	bl	14428 <ll_radio_state_abort>
	time_slot_delay(ticks_at_expire,
   1e422:	462b      	mov	r3, r5
   1e424:	4620      	mov	r0, r4
   1e426:	4a03      	ldr	r2, [pc, #12]	; (1e434 <time_slot_callback_abort+0x1c>)
}
   1e428:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	time_slot_delay(ticks_at_expire,
   1e42c:	2106      	movs	r1, #6
   1e42e:	f7ff bfb3 	b.w	1e398 <time_slot_delay>
   1e432:	bf00      	nop
   1e434:	0001e359 	.word	0x0001e359

0001e438 <nrf_flash_sync_init>:
{
   1e438:	b508      	push	{r3, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1e43a:	2201      	movs	r2, #1
   1e43c:	2100      	movs	r1, #0
   1e43e:	4802      	ldr	r0, [pc, #8]	; (1e448 <nrf_flash_sync_init+0x10>)
   1e440:	f008 fe3f 	bl	270c2 <z_impl_k_sem_init>
}
   1e444:	2000      	movs	r0, #0
   1e446:	bd08      	pop	{r3, pc}
   1e448:	2000ebcc 	.word	0x2000ebcc

0001e44c <nrf_flash_sync_set_context>:
	_ticker_sync_context.interval = duration - FLASH_SYNC_SWITCHING_TIME;
   1e44c:	4b02      	ldr	r3, [pc, #8]	; (1e458 <nrf_flash_sync_set_context+0xc>)
   1e44e:	f2a0 62a4 	subw	r2, r0, #1700	; 0x6a4
	_ticker_sync_context.slot = duration;
   1e452:	e9c3 2000 	strd	r2, r0, [r3]
}
   1e456:	4770      	bx	lr
   1e458:	2000ebbc 	.word	0x2000ebbc

0001e45c <nrf_flash_sync_get_timestamp_begin>:
{
   1e45c:	b508      	push	{r3, lr}
	_ticker_sync_context.ticks_begin = ticker_ticks_now_get();
   1e45e:	f7f3 fc6f 	bl	11d40 <ticker_ticks_now_get>
   1e462:	4b01      	ldr	r3, [pc, #4]	; (1e468 <nrf_flash_sync_get_timestamp_begin+0xc>)
   1e464:	6098      	str	r0, [r3, #8]
}
   1e466:	bd08      	pop	{r3, pc}
   1e468:	2000ebbc 	.word	0x2000ebbc

0001e46c <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1e46c:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1e46e:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1e472:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1e474:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1e476:	6002      	str	r2, [r0, #0]
}
   1e478:	4802      	ldr	r0, [pc, #8]	; (1e484 <nrf_gpio_pin_port_decode+0x18>)
   1e47a:	bf18      	it	ne
   1e47c:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1e480:	4770      	bx	lr
   1e482:	bf00      	nop
   1e484:	50000300 	.word	0x50000300

0001e488 <uarte_nrfx_configure>:
	return 0;
}

static int uarte_nrfx_configure(const struct device *dev,
				const struct uart_config *cfg)
{
   1e488:	b5f0      	push	{r4, r5, r6, r7, lr}
	nrf_uarte_config_t uarte_cfg;

#if defined(UARTE_CONFIG_STOP_Msk)
	switch (cfg->stop_bits) {
   1e48a:	794b      	ldrb	r3, [r1, #5]
   1e48c:	2b01      	cmp	r3, #1
   1e48e:	d029      	beq.n	1e4e4 <uarte_nrfx_configure+0x5c>
   1e490:	2b03      	cmp	r3, #3
   1e492:	d124      	bne.n	1e4de <uarte_nrfx_configure+0x56>
	case UART_CFG_STOP_BITS_1:
		uarte_cfg.stop = NRF_UARTE_STOP_ONE;
		break;
	case UART_CFG_STOP_BITS_2:
		uarte_cfg.stop = NRF_UARTE_STOP_TWO;
   1e494:	2610      	movs	r6, #16
	if (cfg->stop_bits != UART_CFG_STOP_BITS_1) {
		return -ENOTSUP;
	}
#endif

	if (cfg->data_bits != UART_CFG_DATA_BITS_8) {
   1e496:	798b      	ldrb	r3, [r1, #6]
   1e498:	2b03      	cmp	r3, #3
   1e49a:	d120      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		return -ENOTSUP;
	}

	switch (cfg->flow_ctrl) {
   1e49c:	79cc      	ldrb	r4, [r1, #7]
   1e49e:	b124      	cbz	r4, 1e4aa <uarte_nrfx_configure+0x22>
   1e4a0:	2c01      	cmp	r4, #1
   1e4a2:	d11c      	bne.n	1e4de <uarte_nrfx_configure+0x56>
	case UART_CFG_FLOW_CTRL_NONE:
		uarte_cfg.hwfc = NRF_UARTE_HWFC_DISABLED;
		break;
	case UART_CFG_FLOW_CTRL_RTS_CTS:
		if (get_dev_config(dev)->rts_cts_pins_set) {
   1e4a4:	6843      	ldr	r3, [r0, #4]
   1e4a6:	791b      	ldrb	r3, [r3, #4]
   1e4a8:	b1cb      	cbz	r3, 1e4de <uarte_nrfx_configure+0x56>
	}

#if defined(UARTE_CONFIG_PARITYTYPE_Msk)
	uarte_cfg.paritytype = NRF_UARTE_PARITYTYPE_EVEN;
#endif
	switch (cfg->parity) {
   1e4aa:	790a      	ldrb	r2, [r1, #4]
   1e4ac:	b112      	cbz	r2, 1e4b4 <uarte_nrfx_configure+0x2c>
   1e4ae:	2a02      	cmp	r2, #2
   1e4b0:	d115      	bne.n	1e4de <uarte_nrfx_configure+0x56>
	case UART_CFG_PARITY_NONE:
		uarte_cfg.parity = NRF_UARTE_PARITY_EXCLUDED;
		break;
	case UART_CFG_PARITY_EVEN:
		uarte_cfg.parity = NRF_UARTE_PARITY_INCLUDED;
   1e4b2:	220e      	movs	r2, #14
#endif
	default:
		return -ENOTSUP;
	}

	if (baudrate_set(dev, cfg->baudrate) != 0) {
   1e4b4:	680b      	ldr	r3, [r1, #0]
	return config->uarte_regs;
   1e4b6:	6845      	ldr	r5, [r0, #4]
	switch (baudrate) {
   1e4b8:	f5b3 4f16 	cmp.w	r3, #38400	; 0x9600
	return config->uarte_regs;
   1e4bc:	682d      	ldr	r5, [r5, #0]
	switch (baudrate) {
   1e4be:	d065      	beq.n	1e58c <uarte_nrfx_configure+0x104>
   1e4c0:	d82d      	bhi.n	1e51e <uarte_nrfx_configure+0x96>
   1e4c2:	f5b3 5f16 	cmp.w	r3, #9600	; 0x2580
   1e4c6:	d064      	beq.n	1e592 <uarte_nrfx_configure+0x10a>
   1e4c8:	d816      	bhi.n	1e4f8 <uarte_nrfx_configure+0x70>
   1e4ca:	f5b3 6f96 	cmp.w	r3, #1200	; 0x4b0
   1e4ce:	d062      	beq.n	1e596 <uarte_nrfx_configure+0x10e>
   1e4d0:	d80a      	bhi.n	1e4e8 <uarte_nrfx_configure+0x60>
   1e4d2:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
   1e4d6:	d061      	beq.n	1e59c <uarte_nrfx_configure+0x114>
   1e4d8:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
   1e4dc:	d061      	beq.n	1e5a2 <uarte_nrfx_configure+0x11a>
   1e4de:	f06f 0022 	mvn.w	r0, #34	; 0x22
   1e4e2:	e052      	b.n	1e58a <uarte_nrfx_configure+0x102>
	switch (cfg->stop_bits) {
   1e4e4:	2600      	movs	r6, #0
   1e4e6:	e7d6      	b.n	1e496 <uarte_nrfx_configure+0xe>
	switch (baudrate) {
   1e4e8:	f5b3 6f16 	cmp.w	r3, #2400	; 0x960
   1e4ec:	d05c      	beq.n	1e5a8 <uarte_nrfx_configure+0x120>
   1e4ee:	f5b3 5f96 	cmp.w	r3, #4800	; 0x12c0
   1e4f2:	d1f4      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_4800;
   1e4f4:	4b37      	ldr	r3, [pc, #220]	; (1e5d4 <uarte_nrfx_configure+0x14c>)
   1e4f6:	e03c      	b.n	1e572 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e4f8:	f5b3 4fe1 	cmp.w	r3, #28800	; 0x7080
   1e4fc:	d057      	beq.n	1e5ae <uarte_nrfx_configure+0x126>
   1e4fe:	d807      	bhi.n	1e510 <uarte_nrfx_configure+0x88>
   1e500:	f5b3 5f61 	cmp.w	r3, #14400	; 0x3840
   1e504:	d055      	beq.n	1e5b2 <uarte_nrfx_configure+0x12a>
   1e506:	f5b3 4f96 	cmp.w	r3, #19200	; 0x4b00
   1e50a:	d1e8      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_19200;
   1e50c:	4b32      	ldr	r3, [pc, #200]	; (1e5d8 <uarte_nrfx_configure+0x150>)
   1e50e:	e030      	b.n	1e572 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e510:	f647 2712 	movw	r7, #31250	; 0x7a12
   1e514:	42bb      	cmp	r3, r7
   1e516:	d1e2      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_31250;
   1e518:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
   1e51c:	e029      	b.n	1e572 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e51e:	f5b3 3f61 	cmp.w	r3, #230400	; 0x38400
   1e522:	d048      	beq.n	1e5b6 <uarte_nrfx_configure+0x12e>
   1e524:	d813      	bhi.n	1e54e <uarte_nrfx_configure+0xc6>
   1e526:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
   1e52a:	d047      	beq.n	1e5bc <uarte_nrfx_configure+0x134>
   1e52c:	d809      	bhi.n	1e542 <uarte_nrfx_configure+0xba>
   1e52e:	f64d 27c0 	movw	r7, #56000	; 0xdac0
   1e532:	42bb      	cmp	r3, r7
   1e534:	d044      	beq.n	1e5c0 <uarte_nrfx_configure+0x138>
   1e536:	f5b3 4f61 	cmp.w	r3, #57600	; 0xe100
   1e53a:	d1d0      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_57600;
   1e53c:	f44f 036b 	mov.w	r3, #15400960	; 0xeb0000
   1e540:	e017      	b.n	1e572 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e542:	f5b3 3fe1 	cmp.w	r3, #115200	; 0x1c200
   1e546:	d1ca      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_115200;
   1e548:	f04f 73eb 	mov.w	r3, #30801920	; 0x1d60000
   1e54c:	e011      	b.n	1e572 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e54e:	f5b3 2f61 	cmp.w	r3, #921600	; 0xe1000
   1e552:	d038      	beq.n	1e5c6 <uarte_nrfx_configure+0x13e>
   1e554:	d808      	bhi.n	1e568 <uarte_nrfx_configure+0xe0>
   1e556:	4f21      	ldr	r7, [pc, #132]	; (1e5dc <uarte_nrfx_configure+0x154>)
   1e558:	42bb      	cmp	r3, r7
   1e55a:	d037      	beq.n	1e5cc <uarte_nrfx_configure+0x144>
   1e55c:	f5b3 2fe1 	cmp.w	r3, #460800	; 0x70800
   1e560:	d1bd      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_460800;
   1e562:	f04f 63e8 	mov.w	r3, #121634816	; 0x7400000
   1e566:	e004      	b.n	1e572 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e568:	4f1d      	ldr	r7, [pc, #116]	; (1e5e0 <uarte_nrfx_configure+0x158>)
   1e56a:	42bb      	cmp	r3, r7
   1e56c:	d1b7      	bne.n	1e4de <uarte_nrfx_configure+0x56>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1000000;
   1e56e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                    | (uint32_t)p_cfg->hwfc;
}

NRF_STATIC_INLINE void nrf_uarte_baudrate_set(NRF_UARTE_Type * p_reg, nrf_uarte_baudrate_t baudrate)
{
    p_reg->BAUDRATE = baudrate;
   1e572:	f8c5 3524 	str.w	r3, [r5, #1316]	; 0x524
		return -ENOTSUP;
	}

	nrf_uarte_configure(get_uarte_instance(dev), &uarte_cfg);

	get_dev_data(dev)->uart_config = *cfg;
   1e576:	68c3      	ldr	r3, [r0, #12]
   1e578:	c903      	ldmia	r1, {r0, r1}
                    | (uint32_t)p_cfg->hwfc;
   1e57a:	4334      	orrs	r4, r6
   1e57c:	4322      	orrs	r2, r4
   1e57e:	3304      	adds	r3, #4
    p_reg->CONFIG = (uint32_t)p_cfg->parity
   1e580:	f8c5 256c 	str.w	r2, [r5, #1388]	; 0x56c
   1e584:	e883 0003 	stmia.w	r3, {r0, r1}

	return 0;
   1e588:	2000      	movs	r0, #0
}
   1e58a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		nrf_baudrate = NRF_UARTE_BAUDRATE_38400;
   1e58c:	f44f 031d 	mov.w	r3, #10289152	; 0x9d0000
   1e590:	e7ef      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_9600;
   1e592:	4b14      	ldr	r3, [pc, #80]	; (1e5e4 <uarte_nrfx_configure+0x15c>)
   1e594:	e7ed      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_1200;
   1e596:	f44f 239e 	mov.w	r3, #323584	; 0x4f000
   1e59a:	e7ea      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = 0x00014000;
   1e59c:	f44f 33a0 	mov.w	r3, #81920	; 0x14000
   1e5a0:	e7e7      	b.n	1e572 <uarte_nrfx_configure+0xea>
	switch (baudrate) {
   1e5a2:	f44f 331c 	mov.w	r3, #159744	; 0x27000
   1e5a6:	e7e4      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_2400;
   1e5a8:	f44f 231d 	mov.w	r3, #643072	; 0x9d000
   1e5ac:	e7e1      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_28800;
   1e5ae:	4b0e      	ldr	r3, [pc, #56]	; (1e5e8 <uarte_nrfx_configure+0x160>)
   1e5b0:	e7df      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_14400;
   1e5b2:	4b0e      	ldr	r3, [pc, #56]	; (1e5ec <uarte_nrfx_configure+0x164>)
   1e5b4:	e7dd      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_230400;
   1e5b6:	f04f 736c 	mov.w	r3, #61865984	; 0x3b00000
   1e5ba:	e7da      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_76800;
   1e5bc:	4b0c      	ldr	r3, [pc, #48]	; (1e5f0 <uarte_nrfx_configure+0x168>)
   1e5be:	e7d8      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_56000;
   1e5c0:	f44f 0365 	mov.w	r3, #15007744	; 0xe50000
   1e5c4:	e7d5      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_921600;
   1e5c6:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1e5ca:	e7d2      	b.n	1e572 <uarte_nrfx_configure+0xea>
		nrf_baudrate = NRF_UARTE_BAUDRATE_250000;
   1e5cc:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
   1e5d0:	e7cf      	b.n	1e572 <uarte_nrfx_configure+0xea>
   1e5d2:	bf00      	nop
   1e5d4:	0013b000 	.word	0x0013b000
   1e5d8:	004ea000 	.word	0x004ea000
   1e5dc:	0003d090 	.word	0x0003d090
   1e5e0:	000f4240 	.word	0x000f4240
   1e5e4:	00275000 	.word	0x00275000
   1e5e8:	0075c000 	.word	0x0075c000
   1e5ec:	003af000 	.word	0x003af000
   1e5f0:	013a9000 	.word	0x013a9000

0001e5f4 <uarte_nrfx_poll_out>:
 *
 * @param dev UARTE device struct
 * @param c Character to send
 */
static void uarte_nrfx_poll_out(const struct device *dev, unsigned char c)
{
   1e5f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return dev->data;
   1e5f8:	68c7      	ldr	r7, [r0, #12]
{
   1e5fa:	4606      	mov	r6, r0
   1e5fc:	4688      	mov	r8, r1
	struct uarte_nrfx_data *data = get_dev_data(dev);
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e5fe:	f008 fd70 	bl	270e2 <k_is_in_isr>
   1e602:	b9b8      	cbnz	r0, 1e634 <uarte_nrfx_poll_out+0x40>
	return !z_sys_post_kernel;
   1e604:	4b28      	ldr	r3, [pc, #160]	; (1e6a8 <uarte_nrfx_poll_out+0xb4>)
   1e606:	781b      	ldrb	r3, [r3, #0]
   1e608:	f083 0301 	eor.w	r3, r3, #1
	return config->uarte_regs;
   1e60c:	6872      	ldr	r2, [r6, #4]
   1e60e:	6815      	ldr	r5, [r2, #0]
#ifdef CONFIG_PM_DEVICE
	if (data->pm_state != DEVICE_PM_ACTIVE_STATE) {
		return;
	}
#endif
	if (isr_mode) {
   1e610:	b193      	cbz	r3, 1e638 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1e612:	f04f 0320 	mov.w	r3, #32
   1e616:	f3ef 8411 	mrs	r4, BASEPRI
   1e61a:	f383 8811 	msr	BASEPRI, r3
   1e61e:	f3bf 8f6f 	isb	sy
		while (1) {
			key = irq_lock();
			if (is_tx_ready(dev)) {
   1e622:	6870      	ldr	r0, [r6, #4]
   1e624:	f008 f98d 	bl	26942 <is_tx_ready.isra.0>
   1e628:	bb38      	cbnz	r0, 1e67a <uarte_nrfx_poll_out+0x86>
	__asm__ volatile(
   1e62a:	f384 8811 	msr	BASEPRI, r4
   1e62e:	f3bf 8f6f 	isb	sy
		"cpsie i;"
		: : : "memory", "cc");
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M_ARMV8_M_BASELINE */
}
   1e632:	e7ee      	b.n	1e612 <uarte_nrfx_poll_out+0x1e>
	bool isr_mode = k_is_in_isr() || k_is_pre_kernel();
   1e634:	2301      	movs	r3, #1
   1e636:	e7e9      	b.n	1e60c <uarte_nrfx_poll_out+0x18>
   1e638:	2464      	movs	r4, #100	; 0x64
		NRFX_WAIT_FOR(is_tx_ready(dev), 100, 1, res);
   1e63a:	6870      	ldr	r0, [r6, #4]
   1e63c:	f008 f981 	bl	26942 <is_tx_ready.isra.0>
   1e640:	b970      	cbnz	r0, 1e660 <uarte_nrfx_poll_out+0x6c>
   1e642:	2001      	movs	r0, #1
   1e644:	f008 f9ad 	bl	269a2 <nrfx_busy_wait>
   1e648:	3c01      	subs	r4, #1
   1e64a:	d1f6      	bne.n	1e63a <uarte_nrfx_poll_out+0x46>
	return z_impl_k_sleep(timeout);
   1e64c:	2100      	movs	r1, #0
   1e64e:	2021      	movs	r0, #33	; 0x21
   1e650:	f001 fee8 	bl	20424 <z_impl_k_sleep>
	return k_sleep(Z_TIMEOUT_MS(ms));
   1e654:	e7f0      	b.n	1e638 <uarte_nrfx_poll_out+0x44>
	__asm__ volatile(
   1e656:	f384 8811 	msr	BASEPRI, r4
   1e65a:	f3bf 8f6f 	isb	sy
}
   1e65e:	e7f5      	b.n	1e64c <uarte_nrfx_poll_out+0x58>
	__asm__ volatile(
   1e660:	f04f 0320 	mov.w	r3, #32
   1e664:	f3ef 8411 	mrs	r4, BASEPRI
   1e668:	f383 8811 	msr	BASEPRI, r3
   1e66c:	f3bf 8f6f 	isb	sy
			if (is_tx_ready(dev)) {
   1e670:	6870      	ldr	r0, [r6, #4]
   1e672:	f008 f966 	bl	26942 <is_tx_ready.isra.0>
   1e676:	2800      	cmp	r0, #0
   1e678:	d0ed      	beq.n	1e656 <uarte_nrfx_poll_out+0x62>
	}

	/* At this point we should have irq locked and any previous transfer
	 * completed. Transfer can be started, no need to wait for completion.
	 */
	data->char_out = c;
   1e67a:	f807 8f10 	strb.w	r8, [r7, #16]!
NRF_STATIC_INLINE void nrf_uarte_tx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t  const * p_buffer,
                                               size_t           length)
{
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
    p_reg->TXD.MAXCNT = length;
   1e67e:	2301      	movs	r3, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e680:	2200      	movs	r2, #0
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e682:	f8c5 7544 	str.w	r7, [r5, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e686:	f8c5 3548 	str.w	r3, [r5, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e68a:	f8c5 2120 	str.w	r2, [r5, #288]	; 0x120
   1e68e:	f8d5 1120 	ldr.w	r1, [r5, #288]	; 0x120
   1e692:	f8c5 2158 	str.w	r2, [r5, #344]	; 0x158
   1e696:	f8d5 2158 	ldr.w	r2, [r5, #344]	; 0x158
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e69a:	60ab      	str	r3, [r5, #8]
	__asm__ volatile(
   1e69c:	f384 8811 	msr	BASEPRI, r4
   1e6a0:	f3bf 8f6f 	isb	sy
	tx_start(uarte, &data->char_out, 1);

	irq_unlock(key);
}
   1e6a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1e6a8:	2000f323 	.word	0x2000f323

0001e6ac <uarte_instance_init.constprop.0>:
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));

	return 0;
}

static int uarte_instance_init(const struct device *dev,
   1e6ac:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	return config->uarte_regs;
   1e6b0:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   1e6b2:	68c7      	ldr	r7, [r0, #12]
	return config->uarte_regs;
   1e6b4:	681c      	ldr	r4, [r3, #0]
static int uarte_instance_init(const struct device *dev,
   1e6b6:	460d      	mov	r5, r1
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Disabled;
   1e6b8:	2100      	movs	r1, #0
   1e6ba:	682b      	ldr	r3, [r5, #0]
   1e6bc:	f8c4 1500 	str.w	r1, [r4, #1280]	; 0x500
   1e6c0:	4606      	mov	r6, r0
	NRF_UARTE_Type *uarte = get_uarte_instance(dev);
	struct uarte_nrfx_data *data = get_dev_data(dev);

	nrf_uarte_disable(uarte);

	data->dev = dev;
   1e6c2:	6038      	str	r0, [r7, #0]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e6c4:	a801      	add	r0, sp, #4
   1e6c6:	9301      	str	r3, [sp, #4]
   1e6c8:	f7ff fed0 	bl	1e46c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e6cc:	9a01      	ldr	r2, [sp, #4]
   1e6ce:	2301      	movs	r3, #1
   1e6d0:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e6d2:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e6d6:	682b      	ldr	r3, [r5, #0]
   1e6d8:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e6da:	a801      	add	r0, sp, #4
   1e6dc:	f7ff fec6 	bl	1e46c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e6e0:	9b01      	ldr	r3, [sp, #4]
   1e6e2:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e6e6:	2203      	movs	r2, #3
   1e6e8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]

	nrf_gpio_pin_write(config->pseltxd, 1);
	nrf_gpio_cfg_output(config->pseltxd);

	if (config->pselrxd !=  NRF_UARTE_PSEL_DISCONNECTED) {
   1e6ec:	686b      	ldr	r3, [r5, #4]
   1e6ee:	1c58      	adds	r0, r3, #1
   1e6f0:	d008      	beq.n	1e704 <uarte_instance_init.constprop.0+0x58>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e6f2:	a801      	add	r0, sp, #4
   1e6f4:	9301      	str	r3, [sp, #4]
   1e6f6:	f7ff feb9 	bl	1e46c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e6fa:	9b01      	ldr	r3, [sp, #4]
   1e6fc:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e700:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselrxd, NRF_GPIO_PIN_NOPULL);
	}

	nrf_uarte_txrx_pins_set(uarte, config->pseltxd, config->pselrxd);
   1e704:	e9d5 2300 	ldrd	r2, r3, [r5]
    p_reg->PSEL.TXD = pseltxd;
   1e708:	f8c4 250c 	str.w	r2, [r4, #1292]	; 0x50c
    p_reg->PSEL.RXD = pselrxd;
   1e70c:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	if (config->pselcts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e710:	68ab      	ldr	r3, [r5, #8]
   1e712:	1c59      	adds	r1, r3, #1
   1e714:	d009      	beq.n	1e72a <uarte_instance_init.constprop.0+0x7e>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e716:	a801      	add	r0, sp, #4
   1e718:	9301      	str	r3, [sp, #4]
   1e71a:	f7ff fea7 	bl	1e46c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e71e:	9b01      	ldr	r3, [sp, #4]
   1e720:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e724:	2200      	movs	r2, #0
   1e726:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_cfg_input(config->pselcts, NRF_GPIO_PIN_NOPULL);
	}

	if (config->pselrts != NRF_UARTE_PSEL_DISCONNECTED) {
   1e72a:	68eb      	ldr	r3, [r5, #12]
   1e72c:	1c5a      	adds	r2, r3, #1
   1e72e:	d013      	beq.n	1e758 <uarte_instance_init.constprop.0+0xac>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e730:	a801      	add	r0, sp, #4
   1e732:	9301      	str	r3, [sp, #4]
   1e734:	f7ff fe9a 	bl	1e46c <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   1e738:	9a01      	ldr	r2, [sp, #4]
   1e73a:	2301      	movs	r3, #1
   1e73c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   1e73e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    nrf_gpio_cfg(
   1e742:	68eb      	ldr	r3, [r5, #12]
   1e744:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1e746:	a801      	add	r0, sp, #4
   1e748:	f7ff fe90 	bl	1e46c <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1e74c:	9b01      	ldr	r3, [sp, #4]
   1e74e:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1e752:	2203      	movs	r2, #3
   1e754:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
		nrf_gpio_pin_write(config->pselrts, 1);
		nrf_gpio_cfg_output(config->pselrts);
	}

	nrf_uarte_hwfc_pins_set(uarte, config->pselrts, config->pselcts);
   1e758:	e9d5 3202 	ldrd	r3, r2, [r5, #8]

	err = uarte_nrfx_configure(dev, &get_dev_data(dev)->uart_config);
   1e75c:	68f1      	ldr	r1, [r6, #12]
    p_reg->PSEL.RTS = pselrts;
   1e75e:	f8c4 2508 	str.w	r2, [r4, #1288]	; 0x508
   1e762:	3104      	adds	r1, #4
    p_reg->PSEL.CTS = pselcts;
   1e764:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
   1e768:	4630      	mov	r0, r6
   1e76a:	f7ff fe8d 	bl	1e488 <uarte_nrfx_configure>
	if (err) {
   1e76e:	4680      	mov	r8, r0
   1e770:	b9a8      	cbnz	r0, 1e79e <uarte_instance_init.constprop.0+0xf2>

#ifdef CONFIG_PM_DEVICE
	data->pm_state = DEVICE_PM_ACTIVE_STATE;
#endif

	if (get_dev_config(dev)->ppi_endtx) {
   1e772:	6873      	ldr	r3, [r6, #4]
   1e774:	799b      	ldrb	r3, [r3, #6]
   1e776:	b34b      	cbz	r3, 1e7cc <uarte_instance_init.constprop.0+0x120>
	ret = gppi_channel_alloc(&data->ppi_ch_endtx);
   1e778:	f107 0012 	add.w	r0, r7, #18
   1e77c:	f000 fbe8 	bl	1ef50 <nrfx_ppi_channel_alloc>
	if (ret != NRFX_SUCCESS) {
   1e780:	4b24      	ldr	r3, [pc, #144]	; (1e814 <uarte_instance_init.constprop.0+0x168>)
   1e782:	4298      	cmp	r0, r3
   1e784:	d00f      	beq.n	1e7a6 <uarte_instance_init.constprop.0+0xfa>
   1e786:	4b24      	ldr	r3, [pc, #144]	; (1e818 <uarte_instance_init.constprop.0+0x16c>)
   1e788:	4924      	ldr	r1, [pc, #144]	; (1e81c <uarte_instance_init.constprop.0+0x170>)
		LOG_ERR("Failed to allocate PPI Channel");
   1e78a:	4825      	ldr	r0, [pc, #148]	; (1e820 <uarte_instance_init.constprop.0+0x174>)
   1e78c:	1ac9      	subs	r1, r1, r3
   1e78e:	08c9      	lsrs	r1, r1, #3
   1e790:	0189      	lsls	r1, r1, #6
   1e792:	f041 0101 	orr.w	r1, r1, #1
   1e796:	f003 fe5b 	bl	22450 <log_0>
		return -EIO;
   1e79a:	f06f 0804 	mvn.w	r8, #4

	/* switch off transmitter to save an energy */
	nrf_uarte_task_trigger(uarte, NRF_UARTE_TASK_STOPTX);

	return 0;
}
   1e79e:	4640      	mov	r0, r8
   1e7a0:	b002      	add	sp, #8
   1e7a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	nrfx_gppi_channel_endpoints_setup(data->ppi_ch_endtx,
   1e7a6:	7cb8      	ldrb	r0, [r7, #18]
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e7a8:	00c3      	lsls	r3, r0, #3
   1e7aa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
   1e7ae:	f503 33f8 	add.w	r3, r3, #126976	; 0x1f000
    return (uint32_t)p_reg + (uint32_t)task;
   1e7b2:	f104 020c 	add.w	r2, r4, #12
    return (uint32_t)((uint8_t *)p_reg + (uint32_t)event);
   1e7b6:	f504 7190 	add.w	r1, r4, #288	; 0x120
    p_reg->CH[(uint32_t) channel].EEP = eep;
   1e7ba:	f8c3 1510 	str.w	r1, [r3, #1296]	; 0x510
    p_reg->CH[(uint32_t) channel].TEP = tep;
   1e7be:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
    p_reg->CHENSET = mask;
   1e7c2:	4a18      	ldr	r2, [pc, #96]	; (1e824 <uarte_instance_init.constprop.0+0x178>)
	nrfx_gppi_channels_enable(BIT(data->ppi_ch_endtx));
   1e7c4:	2301      	movs	r3, #1
   1e7c6:	4083      	lsls	r3, r0
   1e7c8:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
    p_reg->ENABLE = UARTE_ENABLE_ENABLE_Enabled;
   1e7cc:	2308      	movs	r3, #8
   1e7ce:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
		if (config->pselrxd != NRF_UARTE_PSEL_DISCONNECTED) {
   1e7d2:	686b      	ldr	r3, [r5, #4]
   1e7d4:	3301      	adds	r3, #1
   1e7d6:	d00c      	beq.n	1e7f2 <uarte_instance_init.constprop.0+0x146>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1e7d8:	2300      	movs	r3, #0
   1e7da:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1e7de:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
			nrf_uarte_rx_buffer_set(uarte, &data->rx_data, 1);
   1e7e2:	f107 0311 	add.w	r3, r7, #17

NRF_STATIC_INLINE void nrf_uarte_rx_buffer_set(NRF_UARTE_Type * p_reg,
                                               uint8_t *        p_buffer,
                                               size_t           length)
{
    p_reg->RXD.PTR    = (uint32_t)p_buffer;
   1e7e6:	f8c4 3534 	str.w	r3, [r4, #1332]	; 0x534
    p_reg->RXD.MAXCNT = length;
   1e7ea:	2301      	movs	r3, #1
   1e7ec:	f8c4 3538 	str.w	r3, [r4, #1336]	; 0x538
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e7f0:	6023      	str	r3, [r4, #0]
	if (!get_dev_config(dev)->ppi_endtx) {
   1e7f2:	6873      	ldr	r3, [r6, #4]
   1e7f4:	799b      	ldrb	r3, [r3, #6]
   1e7f6:	b91b      	cbnz	r3, 1e800 <uarte_instance_init.constprop.0+0x154>
    p_reg->INTENSET = mask;
   1e7f8:	f44f 7380 	mov.w	r3, #256	; 0x100
   1e7fc:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
    p_reg->TXD.MAXCNT = length;
   1e800:	2300      	movs	r3, #0
	nrf_uarte_tx_buffer_set(uarte, &data->char_out, 0);
   1e802:	3710      	adds	r7, #16
    p_reg->TXD.PTR    = (uint32_t)p_buffer;
   1e804:	f8c4 7544 	str.w	r7, [r4, #1348]	; 0x544
    p_reg->TXD.MAXCNT = length;
   1e808:	f8c4 3548 	str.w	r3, [r4, #1352]	; 0x548
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1e80c:	2301      	movs	r3, #1
   1e80e:	60a3      	str	r3, [r4, #8]
   1e810:	60e3      	str	r3, [r4, #12]
	return 0;
   1e812:	e7c4      	b.n	1e79e <uarte_instance_init.constprop.0+0xf2>
   1e814:	0bad0000 	.word	0x0bad0000
   1e818:	000278c0 	.word	0x000278c0
   1e81c:	00027a20 	.word	0x00027a20
   1e820:	0002d914 	.word	0x0002d914
   1e824:	4001f000 	.word	0x4001f000

0001e828 <uarte_1_init>:
#ifdef CONFIG_UART_0_NRF_UARTE
UART_NRF_UARTE_DEVICE(0);
#endif

#ifdef CONFIG_UART_1_NRF_UARTE
UART_NRF_UARTE_DEVICE(1);
   1e828:	b530      	push	{r4, r5, lr}
   1e82a:	4b0a      	ldr	r3, [pc, #40]	; (1e854 <uarte_1_init+0x2c>)
   1e82c:	4605      	mov	r5, r0
   1e82e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e830:	b085      	sub	sp, #20
   1e832:	466c      	mov	r4, sp
   1e834:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1e838:	2200      	movs	r2, #0
   1e83a:	2101      	movs	r1, #1
   1e83c:	2028      	movs	r0, #40	; 0x28
   1e83e:	f7e8 ffb7 	bl	77b0 <z_arm_irq_priority_set>
   1e842:	2028      	movs	r0, #40	; 0x28
   1e844:	f7e8 ff82 	bl	774c <arch_irq_enable>
   1e848:	4621      	mov	r1, r4
   1e84a:	4628      	mov	r0, r5
   1e84c:	f7ff ff2e 	bl	1e6ac <uarte_instance_init.constprop.0>
   1e850:	b005      	add	sp, #20
   1e852:	bd30      	pop	{r4, r5, pc}
   1e854:	00027ad0 	.word	0x00027ad0

0001e858 <uarte_0_init>:
UART_NRF_UARTE_DEVICE(0);
   1e858:	b530      	push	{r4, r5, lr}
   1e85a:	4b0a      	ldr	r3, [pc, #40]	; (1e884 <uarte_0_init+0x2c>)
   1e85c:	4605      	mov	r5, r0
   1e85e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e860:	b085      	sub	sp, #20
   1e862:	466c      	mov	r4, sp
   1e864:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
   1e868:	2200      	movs	r2, #0
   1e86a:	2101      	movs	r1, #1
   1e86c:	2002      	movs	r0, #2
   1e86e:	f7e8 ff9f 	bl	77b0 <z_arm_irq_priority_set>
   1e872:	2002      	movs	r0, #2
   1e874:	f7e8 ff6a 	bl	774c <arch_irq_enable>
   1e878:	4621      	mov	r1, r4
   1e87a:	4628      	mov	r0, r5
   1e87c:	f7ff ff16 	bl	1e6ac <uarte_instance_init.constprop.0>
   1e880:	b005      	add	sp, #20
   1e882:	bd30      	pop	{r4, r5, pc}
   1e884:	00027ae0 	.word	0x00027ae0

0001e888 <random_byte_get>:
	__asm__ volatile(
   1e888:	f04f 0320 	mov.w	r3, #32
   1e88c:	f3ef 8211 	mrs	r2, BASEPRI
   1e890:	f383 8811 	msr	BASEPRI, r3
   1e894:	f3bf 8f6f 	isb	sy
    nrf_event_readback((uint8_t *)p_reg + (uint32_t)rng_event);
}

NRF_STATIC_INLINE bool nrf_rng_event_check(NRF_RNG_Type const * p_reg, nrf_rng_event_t rng_event)
{
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e898:	4b09      	ldr	r3, [pc, #36]	; (1e8c0 <random_byte_get+0x38>)
   1e89a:	f8d3 1100 	ldr.w	r1, [r3, #256]	; 0x100
	int retval = -EAGAIN;
	unsigned int key;

	key = irq_lock();

	if (nrf_rng_event_check(NRF_RNG, NRF_RNG_EVENT_VALRDY)) {
   1e89e:	b161      	cbz	r1, 1e8ba <random_byte_get+0x32>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e8a0:	2100      	movs	r1, #0
     p_reg->SHORTS &= ~mask;
}

NRF_STATIC_INLINE uint8_t nrf_rng_random_value_get(NRF_RNG_Type const * p_reg)
{
    return (uint8_t)(p_reg->VALUE & RNG_VALUE_VALUE_Msk);
   1e8a2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e8a6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
   1e8aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
		retval = nrf_rng_random_value_get(NRF_RNG);
   1e8ae:	b2c0      	uxtb	r0, r0
	__asm__ volatile(
   1e8b0:	f382 8811 	msr	BASEPRI, r2
   1e8b4:	f3bf 8f6f 	isb	sy
	}

	irq_unlock(key);

	return retval;
}
   1e8b8:	4770      	bx	lr
	int retval = -EAGAIN;
   1e8ba:	f06f 000a 	mvn.w	r0, #10
   1e8be:	e7f7      	b.n	1e8b0 <random_byte_get+0x28>
   1e8c0:	4000d000 	.word	0x4000d000

0001e8c4 <rng_pool_get>:
#pragma GCC push_options
#if defined(CONFIG_BT_CTLR_FAST_ENC)
#pragma GCC optimize ("Ofast")
#endif
static uint16_t rng_pool_get(struct rng_pool *rngp, uint8_t *buf, uint16_t len)
{
   1e8c4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e8c6:	4603      	mov	r3, r0
	uint32_t last  = rngp->last;
   1e8c8:	7884      	ldrb	r4, [r0, #2]
	uint32_t mask  = rngp->mask;
   1e8ca:	78c7      	ldrb	r7, [r0, #3]
	__asm__ volatile(
   1e8cc:	f04f 0020 	mov.w	r0, #32
   1e8d0:	f3ef 8e11 	mrs	lr, BASEPRI
   1e8d4:	f380 8811 	msr	BASEPRI, r0
   1e8d8:	f3bf 8f6f 	isb	sy
	uint32_t first, available;
	uint32_t other_read_in_progress;
	unsigned int key;

	key = irq_lock();
	first = rngp->first_alloc;
   1e8dc:	781e      	ldrb	r6, [r3, #0]
	/*
	 * The other_read_in_progress is non-zero if rngp->first_read != first,
	 * which means that lower-priority code (which was interrupted by this
	 * call) already allocated area for read.
	 */
	other_read_in_progress = (rngp->first_read ^ first);
   1e8de:	f893 c001 	ldrb.w	ip, [r3, #1]

	available = (last - first) & mask;
   1e8e2:	1ba4      	subs	r4, r4, r6
   1e8e4:	403c      	ands	r4, r7
	if (available < len) {
   1e8e6:	42a2      	cmp	r2, r4
		len = available;
   1e8e8:	bf88      	it	hi
   1e8ea:	b2a2      	uxthhi	r2, r4

	/*
	 * Move alloc index forward to signal, that part of the buffer is
	 * now reserved for this call.
	 */
	rngp->first_alloc = (first + len) & mask;
   1e8ec:	18b0      	adds	r0, r6, r2
   1e8ee:	4038      	ands	r0, r7
	first = rngp->first_alloc;
   1e8f0:	4635      	mov	r5, r6
	rngp->first_alloc = (first + len) & mask;
   1e8f2:	7018      	strb	r0, [r3, #0]
	__asm__ volatile(
   1e8f4:	f38e 8811 	msr	BASEPRI, lr
   1e8f8:	f3bf 8f6f 	isb	sy
   1e8fc:	1888      	adds	r0, r1, r2
	uint8_t *dst   = buf;
   1e8fe:	460a      	mov	r2, r1
	irq_unlock(key);

	while (likely(len--)) {
   1e900:	4290      	cmp	r0, r2
   1e902:	d119      	bne.n	1e938 <rng_pool_get+0x74>
	/*
	 * If this call is the last one accessing the pool, move read index
	 * to signal that all allocated regions are now read and could be
	 * overwritten.
	 */
	if (likely(!other_read_in_progress)) {
   1e904:	4566      	cmp	r6, ip
   1e906:	d10d      	bne.n	1e924 <rng_pool_get+0x60>
	__asm__ volatile(
   1e908:	f04f 0520 	mov.w	r5, #32
   1e90c:	f3ef 8011 	mrs	r0, BASEPRI
   1e910:	f385 8811 	msr	BASEPRI, r5
   1e914:	f3bf 8f6f 	isb	sy
		key = irq_lock();
		rngp->first_read = rngp->first_alloc;
   1e918:	781d      	ldrb	r5, [r3, #0]
   1e91a:	705d      	strb	r5, [r3, #1]
	__asm__ volatile(
   1e91c:	f380 8811 	msr	BASEPRI, r0
   1e920:	f3bf 8f6f 	isb	sy
		irq_unlock(key);
	}

	len = dst - buf;
   1e924:	1a52      	subs	r2, r2, r1
	available = available - len;
	if (available <= rngp->threshold) {
   1e926:	791b      	ldrb	r3, [r3, #4]
	len = dst - buf;
   1e928:	b290      	uxth	r0, r2
	available = available - len;
   1e92a:	1a22      	subs	r2, r4, r0
	if (available <= rngp->threshold) {
   1e92c:	4293      	cmp	r3, r2
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e92e:	bf22      	ittt	cs
   1e930:	4b06      	ldrcs	r3, [pc, #24]	; (1e94c <rng_pool_get+0x88>)
   1e932:	2201      	movcs	r2, #1
   1e934:	601a      	strcs	r2, [r3, #0]
		nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);
	}

	return len;
}
   1e936:	bdf0      	pop	{r4, r5, r6, r7, pc}
		*dst++ = rngp->buffer[first];
   1e938:	eb03 0e05 	add.w	lr, r3, r5
		first = (first + 1) & mask;
   1e93c:	3501      	adds	r5, #1
		*dst++ = rngp->buffer[first];
   1e93e:	f89e e005 	ldrb.w	lr, [lr, #5]
   1e942:	f802 eb01 	strb.w	lr, [r2], #1
		first = (first + 1) & mask;
   1e946:	403d      	ands	r5, r7
   1e948:	e7da      	b.n	1e900 <rng_pool_get+0x3c>
   1e94a:	bf00      	nop
   1e94c:	4000d000 	.word	0x4000d000

0001e950 <entropy_nrf5_get_entropy_isr>:
	uint16_t cnt = len;

	/* Check if this API is called on correct driver instance. */
	__ASSERT_NO_MSG(&entropy_nrf5_data == DEV_DATA(dev));

	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e950:	43db      	mvns	r3, r3
{
   1e952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e956:	f013 0501 	ands.w	r5, r3, #1
{
   1e95a:	460e      	mov	r6, r1
   1e95c:	4614      	mov	r4, r2
	if (likely((flags & ENTROPY_BUSYWAIT) == 0U)) {
   1e95e:	d004      	beq.n	1e96a <entropy_nrf5_get_entropy_isr+0x1a>
		return rng_pool_get((struct rng_pool *)(entropy_nrf5_data.isr),
   1e960:	4821      	ldr	r0, [pc, #132]	; (1e9e8 <entropy_nrf5_get_entropy_isr+0x98>)
   1e962:	f7ff ffaf 	bl	1e8c4 <rng_pool_get>
			irq_enable(IRQN);
		}
	}

	return cnt;
}
   1e966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (len) {
   1e96a:	b3a2      	cbz	r2, 1e9d6 <entropy_nrf5_get_entropy_isr+0x86>
	__asm__ volatile(
   1e96c:	f04f 0320 	mov.w	r3, #32
   1e970:	f3ef 8811 	mrs	r8, BASEPRI
   1e974:	f383 8811 	msr	BASEPRI, r3
   1e978:	f3bf 8f6f 	isb	sy
		irq_enabled = irq_is_enabled(IRQN);
   1e97c:	200d      	movs	r0, #13
   1e97e:	f7e8 ff09 	bl	7794 <arch_irq_is_enabled>
   1e982:	4607      	mov	r7, r0
		irq_disable(IRQN);
   1e984:	200d      	movs	r0, #13
   1e986:	f7e8 fef1 	bl	776c <arch_irq_disable>
	__asm__ volatile(
   1e98a:	f388 8811 	msr	BASEPRI, r8
   1e98e:	f3bf 8f6f 	isb	sy
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1e992:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1e9ec <entropy_nrf5_get_entropy_isr+0x9c>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
   1e996:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1e9f0 <entropy_nrf5_get_entropy_isr+0xa0>
   1e99a:	f8c8 5100 	str.w	r5, [r8, #256]	; 0x100
   1e99e:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
   1e9a2:	f44f 5a00 	mov.w	sl, #8192	; 0x2000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1e9a6:	2301      	movs	r3, #1
   1e9a8:	f8c8 3000 	str.w	r3, [r8]
   1e9ac:	4625      	mov	r5, r4
   1e9ae:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
    return (bool) * ((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event));
   1e9b2:	f8d8 3100 	ldr.w	r3, [r8, #256]	; 0x100
			while (!nrf_rng_event_check(NRF_RNG,
   1e9b6:	b183      	cbz	r3, 1e9da <entropy_nrf5_get_entropy_isr+0x8a>
			byte = random_byte_get();
   1e9b8:	f7ff ff66 	bl	1e888 <random_byte_get>
			if (byte < 0) {
   1e9bc:	1e03      	subs	r3, r0, #0
   1e9be:	f8c9 a180 	str.w	sl, [r9, #384]	; 0x180
   1e9c2:	dbf6      	blt.n	1e9b2 <entropy_nrf5_get_entropy_isr+0x62>
			buf[--len] = byte;
   1e9c4:	3d01      	subs	r5, #1
   1e9c6:	b2ad      	uxth	r5, r5
   1e9c8:	5573      	strb	r3, [r6, r5]
		} while (len);
   1e9ca:	2d00      	cmp	r5, #0
   1e9cc:	d1f1      	bne.n	1e9b2 <entropy_nrf5_get_entropy_isr+0x62>
		if (irq_enabled) {
   1e9ce:	b117      	cbz	r7, 1e9d6 <entropy_nrf5_get_entropy_isr+0x86>
			irq_enable(IRQN);
   1e9d0:	200d      	movs	r0, #13
   1e9d2:	f7e8 febb 	bl	774c <arch_irq_enable>
	return cnt;
   1e9d6:	4620      	mov	r0, r4
   1e9d8:	e7c5      	b.n	1e966 <entropy_nrf5_get_entropy_isr+0x16>
  __ASM volatile ("dsb 0xF":::"memory");
   1e9da:	f3bf 8f4f 	dsb	sy
				__WFE();
   1e9de:	bf20      	wfe
				__SEV();
   1e9e0:	bf40      	sev
				__WFE();
   1e9e2:	bf20      	wfe
   1e9e4:	e7e5      	b.n	1e9b2 <entropy_nrf5_get_entropy_isr+0x62>
   1e9e6:	bf00      	nop
   1e9e8:	2000ec14 	.word	0x2000ec14
   1e9ec:	4000d000 	.word	0x4000d000
   1e9f0:	e000e100 	.word	0xe000e100

0001e9f4 <entropy_nrf5_get_entropy>:
{
   1e9f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return z_impl_k_sem_take(sem, timeout);
   1e9f8:	4f13      	ldr	r7, [pc, #76]	; (1ea48 <entropy_nrf5_get_entropy+0x54>)
   1e9fa:	460d      	mov	r5, r1
   1e9fc:	4614      	mov	r4, r2
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1e9fe:	f107 0845 	add.w	r8, r7, #69	; 0x45
   1ea02:	f107 0918 	add.w	r9, r7, #24
	while (len) {
   1ea06:	b914      	cbnz	r4, 1ea0e <entropy_nrf5_get_entropy+0x1a>
}
   1ea08:	4620      	mov	r0, r4
   1ea0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1ea0e:	f04f 33ff 	mov.w	r3, #4294967295
   1ea12:	f04f 32ff 	mov.w	r2, #4294967295
   1ea16:	4638      	mov	r0, r7
   1ea18:	f001 fd4a 	bl	204b0 <z_impl_k_sem_take>
		bytes = rng_pool_get((struct rng_pool *)(entropy_nrf5_data.thr),
   1ea1c:	4622      	mov	r2, r4
   1ea1e:	4629      	mov	r1, r5
   1ea20:	4640      	mov	r0, r8
   1ea22:	f7ff ff4f 	bl	1e8c4 <rng_pool_get>
   1ea26:	4606      	mov	r6, r0
	z_impl_k_sem_give(sem);
   1ea28:	4638      	mov	r0, r7
   1ea2a:	f001 fd1b 	bl	20464 <z_impl_k_sem_give>
		if (bytes == 0U) {
   1ea2e:	b93e      	cbnz	r6, 1ea40 <entropy_nrf5_get_entropy+0x4c>
	return z_impl_k_sem_take(sem, timeout);
   1ea30:	f04f 32ff 	mov.w	r2, #4294967295
   1ea34:	f04f 33ff 	mov.w	r3, #4294967295
   1ea38:	4648      	mov	r0, r9
   1ea3a:	f001 fd39 	bl	204b0 <z_impl_k_sem_take>
			continue;
   1ea3e:	e7e2      	b.n	1ea06 <entropy_nrf5_get_entropy+0x12>
		len -= bytes;
   1ea40:	1ba4      	subs	r4, r4, r6
   1ea42:	b2a4      	uxth	r4, r4
		buf += bytes;
   1ea44:	4435      	add	r5, r6
   1ea46:	e7de      	b.n	1ea06 <entropy_nrf5_get_entropy+0x12>
   1ea48:	2000ebe4 	.word	0x2000ebe4

0001ea4c <entropy_nrf5_init>:
		    &entropy_nrf5_data, NULL,
		    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE,
		    &entropy_nrf5_api_funcs);

static int entropy_nrf5_init(const struct device *device)
{
   1ea4c:	b538      	push	{r3, r4, r5, lr}
	return z_impl_k_sem_init(sem, initial_count, limit);
   1ea4e:	4c19      	ldr	r4, [pc, #100]	; (1eab4 <entropy_nrf5_init+0x68>)
   1ea50:	2201      	movs	r2, #1
   1ea52:	4611      	mov	r1, r2
   1ea54:	4620      	mov	r0, r4
   1ea56:	f008 fb34 	bl	270c2 <z_impl_k_sem_init>
   1ea5a:	2201      	movs	r2, #1
   1ea5c:	2100      	movs	r1, #0
   1ea5e:	f104 0018 	add.w	r0, r4, #24
   1ea62:	f008 fb2e 	bl	270c2 <z_impl_k_sem_init>
	rngp->mask	  = size - 1;
   1ea66:	f240 4307 	movw	r3, #1031	; 0x407
   1ea6a:	f8a4 3048 	strh.w	r3, [r4, #72]	; 0x48
	rngp->first_alloc = 0U;
   1ea6e:	f04f 6370 	mov.w	r3, #251658240	; 0xf000000
   1ea72:	6323      	str	r3, [r4, #48]	; 0x30
	rngp->threshold	  = threshold;
   1ea74:	230c      	movs	r3, #12
   1ea76:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
	rngp->first_alloc = 0U;
   1ea7a:	2500      	movs	r5, #0
}

NRF_STATIC_INLINE void nrf_rng_error_correction_enable(NRF_RNG_Type * p_reg)
{
    p_reg->CONFIG |= RNG_CONFIG_DERCEN_Msk;
   1ea7c:	4b0e      	ldr	r3, [pc, #56]	; (1eab8 <entropy_nrf5_init+0x6c>)
   1ea7e:	f884 5045 	strb.w	r5, [r4, #69]	; 0x45
	rngp->first_read  = 0U;
   1ea82:	f8a4 5046 	strh.w	r5, [r4, #70]	; 0x46
   1ea86:	f8d3 2504 	ldr.w	r2, [r3, #1284]	; 0x504
   1ea8a:	f042 0201 	orr.w	r2, r2, #1
   1ea8e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    p_reg->INTENSET = mask;
   1ea92:	2101      	movs	r1, #1
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_event)) = 0x0UL;
   1ea94:	f8c3 5100 	str.w	r5, [r3, #256]	; 0x100
   1ea98:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   1ea9c:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304

	nrf_rng_event_clear(NRF_RNG, NRF_RNG_EVENT_VALRDY);
	nrf_rng_int_enable(NRF_RNG, NRF_RNG_INT_VALRDY_MASK);
	nrf_rng_task_trigger(NRF_RNG, NRF_RNG_TASK_START);

	IRQ_CONNECT(IRQN, IRQ_PRIO, isr, &entropy_nrf5_data, 0);
   1eaa0:	462a      	mov	r2, r5
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)rng_task)) = 0x1UL;
   1eaa2:	6019      	str	r1, [r3, #0]
   1eaa4:	200d      	movs	r0, #13
   1eaa6:	f7e8 fe83 	bl	77b0 <z_arm_irq_priority_set>
	irq_enable(IRQN);
   1eaaa:	200d      	movs	r0, #13
   1eaac:	f7e8 fe4e 	bl	774c <arch_irq_enable>

	return 0;
}
   1eab0:	4628      	mov	r0, r5
   1eab2:	bd38      	pop	{r3, r4, r5, pc}
   1eab4:	2000ebe4 	.word	0x2000ebe4
   1eab8:	4000d000 	.word	0x4000d000

0001eabc <isr>:
{
   1eabc:	b510      	push	{r4, lr}
	byte = random_byte_get();
   1eabe:	f7ff fee3 	bl	1e888 <random_byte_get>
	if (byte < 0) {
   1eac2:	2800      	cmp	r0, #0
   1eac4:	db20      	blt.n	1eb08 <isr+0x4c>
	uint8_t last  = rngp->last;
   1eac6:	4b17      	ldr	r3, [pc, #92]	; (1eb24 <isr+0x68>)
   1eac8:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
	if (((last - first) & mask) == mask) {
   1eacc:	f893 1031 	ldrb.w	r1, [r3, #49]	; 0x31
	uint8_t mask  = rngp->mask;
   1ead0:	f893 4033 	ldrb.w	r4, [r3, #51]	; 0x33
	if (((last - first) & mask) == mask) {
   1ead4:	1a51      	subs	r1, r2, r1
   1ead6:	ea34 0101 	bics.w	r1, r4, r1
	ret = rng_pool_put((struct rng_pool *)(entropy_nrf5_data.isr), byte);
   1eada:	b2c0      	uxtb	r0, r0
	if (((last - first) & mask) == mask) {
   1eadc:	d10d      	bne.n	1eafa <isr+0x3e>
	uint8_t last  = rngp->last;
   1eade:	f893 2047 	ldrb.w	r2, [r3, #71]	; 0x47
	if (((last - first) & mask) == mask) {
   1eae2:	f893 1046 	ldrb.w	r1, [r3, #70]	; 0x46
	uint8_t mask  = rngp->mask;
   1eae6:	f893 4048 	ldrb.w	r4, [r3, #72]	; 0x48
	if (((last - first) & mask) == mask) {
   1eaea:	1a51      	subs	r1, r2, r1
   1eaec:	ea34 0101 	bics.w	r1, r4, r1
   1eaf0:	d10b      	bne.n	1eb0a <isr+0x4e>
   1eaf2:	4b0d      	ldr	r3, [pc, #52]	; (1eb28 <isr+0x6c>)
   1eaf4:	2201      	movs	r2, #1
   1eaf6:	605a      	str	r2, [r3, #4]
}
   1eaf8:	e00e      	b.n	1eb18 <isr+0x5c>
	rngp->buffer[last] = byte;
   1eafa:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1eafc:	3201      	adds	r2, #1
   1eafe:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1eb00:	f881 0035 	strb.w	r0, [r1, #53]	; 0x35
	rngp->last = (last + 1) & mask;
   1eb04:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
}
   1eb08:	bd10      	pop	{r4, pc}
	rngp->buffer[last] = byte;
   1eb0a:	1899      	adds	r1, r3, r2
	rngp->last = (last + 1) & mask;
   1eb0c:	3201      	adds	r2, #1
   1eb0e:	4022      	ands	r2, r4
	rngp->buffer[last] = byte;
   1eb10:	f881 004a 	strb.w	r0, [r1, #74]	; 0x4a
	rngp->last = (last + 1) & mask;
   1eb14:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47
	z_impl_k_sem_give(sem);
   1eb18:	4804      	ldr	r0, [pc, #16]	; (1eb2c <isr+0x70>)
}
   1eb1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   1eb1e:	f001 bca1 	b.w	20464 <z_impl_k_sem_give>
   1eb22:	bf00      	nop
   1eb24:	2000ebe4 	.word	0x2000ebe4
   1eb28:	4000d000 	.word	0x4000d000
   1eb2c:	2000ebfc 	.word	0x2000ebfc

0001eb30 <nrf52_errata_136>:
         || defined (NRF52810_XXAA) || defined (DEVELOP_IN_NRF52810)\
         || defined (NRF52811_XXAA) || defined (DEVELOP_IN_NRF52811)\
         || defined (NRF52820_XXAA) || defined (DEVELOP_IN_NRF52820)\
         || defined (NRF52833_XXAA) || defined (DEVELOP_IN_NRF52833)\
         || defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1eb30:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
                        return true;
                }
            }
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1eb34:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1eb38:	2a08      	cmp	r2, #8
   1eb3a:	d106      	bne.n	1eb4a <nrf52_errata_136+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1eb3c:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1eb40:	2b05      	cmp	r3, #5
   1eb42:	d802      	bhi.n	1eb4a <nrf52_errata_136+0x1a>
   1eb44:	4a02      	ldr	r2, [pc, #8]	; (1eb50 <nrf52_errata_136+0x20>)
   1eb46:	5cd0      	ldrb	r0, [r2, r3]
   1eb48:	4770      	bx	lr
                    default:
                        return true;
                }
            }
        #endif
        return false;
   1eb4a:	2000      	movs	r0, #0
    #endif
}
   1eb4c:	4770      	bx	lr
   1eb4e:	bf00      	nop
   1eb50:	0002d94e 	.word	0x0002d94e

0001eb54 <nrf52_errata_103>:
{
    #ifndef NRF52_SERIES
        return false;
    #else
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            uint32_t var1 = *(uint32_t *)0x10000130ul;
   1eb54:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
            uint32_t var2 = *(uint32_t *)0x10000134ul;
        #endif
        #if defined (NRF52840_XXAA) || defined (DEVELOP_IN_NRF52840)
            if (var1 == 0x08)
   1eb58:	f8d3 2130 	ldr.w	r2, [r3, #304]	; 0x130
   1eb5c:	2a08      	cmp	r2, #8
   1eb5e:	d106      	bne.n	1eb6e <nrf52_errata_103+0x1a>
            uint32_t var2 = *(uint32_t *)0x10000134ul;
   1eb60:	f8d3 3134 	ldr.w	r3, [r3, #308]	; 0x134
            {
                switch(var2)
   1eb64:	2b05      	cmp	r3, #5
   1eb66:	d802      	bhi.n	1eb6e <nrf52_errata_103+0x1a>
   1eb68:	4a02      	ldr	r2, [pc, #8]	; (1eb74 <nrf52_errata_103+0x20>)
   1eb6a:	5cd0      	ldrb	r0, [r2, r3]
   1eb6c:	4770      	bx	lr
                    default:
                        return false;
                }
            }
        #endif
        return false;
   1eb6e:	2000      	movs	r0, #0
    #endif
}
   1eb70:	4770      	bx	lr
   1eb72:	bf00      	nop
   1eb74:	0002d954 	.word	0x0002d954

0001eb78 <nvmc_wait>:

/* -- NVMC utility functions -- */
/* Waits until NVMC is done with the current pending action */
void nvmc_wait(void)
{
    while (NRF_NVMC->READY == NVMC_READY_READY_Busy){}
   1eb78:	4a02      	ldr	r2, [pc, #8]	; (1eb84 <nvmc_wait+0xc>)
   1eb7a:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
   1eb7e:	2b00      	cmp	r3, #0
   1eb80:	d0fb      	beq.n	1eb7a <nvmc_wait+0x2>
}
   1eb82:	4770      	bx	lr
   1eb84:	4001e000 	.word	0x4001e000

0001eb88 <SystemInit>:
{
    SystemCoreClock = __SYSTEM_CLOCK_64M;
}

void SystemInit(void)
{
   1eb88:	b510      	push	{r4, lr}
    #endif

    #if NRF52_ERRATA_36_ENABLE_WORKAROUND
        /* Workaround for Errata 36 "CLOCK: Some registers are not reset when expected" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_36()){
   1eb8a:	f7ff ffd1 	bl	1eb30 <nrf52_errata_136>
   1eb8e:	b140      	cbz	r0, 1eba2 <SystemInit+0x1a>
            NRF_CLOCK->EVENTS_DONE = 0;
   1eb90:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1eb94:	2200      	movs	r2, #0
   1eb96:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
            NRF_CLOCK->EVENTS_CTTO = 0;
   1eb9a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            NRF_CLOCK->CTIV = 0;
   1eb9e:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
    #endif

    #if NRF52_ERRATA_66_ENABLE_WORKAROUND
        /* Workaround for Errata 66 "TEMP: Linearity specification not met with default settings" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_66()){
   1eba2:	f7ff ffc5 	bl	1eb30 <nrf52_errata_136>
   1eba6:	2800      	cmp	r0, #0
   1eba8:	d046      	beq.n	1ec38 <SystemInit+0xb0>
            NRF_TEMP->A0 = NRF_FICR->TEMP.A0;
   1ebaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   1ebae:	4b55      	ldr	r3, [pc, #340]	; (1ed04 <SystemInit+0x17c>)
   1ebb0:	f8d2 1404 	ldr.w	r1, [r2, #1028]	; 0x404
   1ebb4:	f8c3 1520 	str.w	r1, [r3, #1312]	; 0x520
            NRF_TEMP->A1 = NRF_FICR->TEMP.A1;
   1ebb8:	f8d2 1408 	ldr.w	r1, [r2, #1032]	; 0x408
   1ebbc:	f8c3 1524 	str.w	r1, [r3, #1316]	; 0x524
            NRF_TEMP->A2 = NRF_FICR->TEMP.A2;
   1ebc0:	f8d2 140c 	ldr.w	r1, [r2, #1036]	; 0x40c
   1ebc4:	f8c3 1528 	str.w	r1, [r3, #1320]	; 0x528
            NRF_TEMP->A3 = NRF_FICR->TEMP.A3;
   1ebc8:	f8d2 1410 	ldr.w	r1, [r2, #1040]	; 0x410
   1ebcc:	f8c3 152c 	str.w	r1, [r3, #1324]	; 0x52c
            NRF_TEMP->A4 = NRF_FICR->TEMP.A4;
   1ebd0:	f8d2 1414 	ldr.w	r1, [r2, #1044]	; 0x414
   1ebd4:	f8c3 1530 	str.w	r1, [r3, #1328]	; 0x530
            NRF_TEMP->A5 = NRF_FICR->TEMP.A5;
   1ebd8:	f8d2 1418 	ldr.w	r1, [r2, #1048]	; 0x418
   1ebdc:	f8c3 1534 	str.w	r1, [r3, #1332]	; 0x534
            NRF_TEMP->B0 = NRF_FICR->TEMP.B0;
   1ebe0:	f8d2 141c 	ldr.w	r1, [r2, #1052]	; 0x41c
   1ebe4:	f8c3 1540 	str.w	r1, [r3, #1344]	; 0x540
            NRF_TEMP->B1 = NRF_FICR->TEMP.B1;
   1ebe8:	f8d2 1420 	ldr.w	r1, [r2, #1056]	; 0x420
   1ebec:	f8c3 1544 	str.w	r1, [r3, #1348]	; 0x544
            NRF_TEMP->B2 = NRF_FICR->TEMP.B2;
   1ebf0:	f8d2 1424 	ldr.w	r1, [r2, #1060]	; 0x424
   1ebf4:	f8c3 1548 	str.w	r1, [r3, #1352]	; 0x548
            NRF_TEMP->B3 = NRF_FICR->TEMP.B3;
   1ebf8:	f8d2 1428 	ldr.w	r1, [r2, #1064]	; 0x428
   1ebfc:	f8c3 154c 	str.w	r1, [r3, #1356]	; 0x54c
            NRF_TEMP->B4 = NRF_FICR->TEMP.B4;
   1ec00:	f8d2 142c 	ldr.w	r1, [r2, #1068]	; 0x42c
   1ec04:	f8c3 1550 	str.w	r1, [r3, #1360]	; 0x550
            NRF_TEMP->B5 = NRF_FICR->TEMP.B5;
   1ec08:	f8d2 1430 	ldr.w	r1, [r2, #1072]	; 0x430
   1ec0c:	f8c3 1554 	str.w	r1, [r3, #1364]	; 0x554
            NRF_TEMP->T0 = NRF_FICR->TEMP.T0;
   1ec10:	f8d2 1434 	ldr.w	r1, [r2, #1076]	; 0x434
   1ec14:	f8c3 1560 	str.w	r1, [r3, #1376]	; 0x560
            NRF_TEMP->T1 = NRF_FICR->TEMP.T1;
   1ec18:	f8d2 1438 	ldr.w	r1, [r2, #1080]	; 0x438
   1ec1c:	f8c3 1564 	str.w	r1, [r3, #1380]	; 0x564
            NRF_TEMP->T2 = NRF_FICR->TEMP.T2;
   1ec20:	f8d2 143c 	ldr.w	r1, [r2, #1084]	; 0x43c
   1ec24:	f8c3 1568 	str.w	r1, [r3, #1384]	; 0x568
            NRF_TEMP->T3 = NRF_FICR->TEMP.T3;
   1ec28:	f8d2 1440 	ldr.w	r1, [r2, #1088]	; 0x440
   1ec2c:	f8c3 156c 	str.w	r1, [r3, #1388]	; 0x56c
            NRF_TEMP->T4 = NRF_FICR->TEMP.T4;
   1ec30:	f8d2 2444 	ldr.w	r2, [r2, #1092]	; 0x444
   1ec34:	f8c3 2570 	str.w	r2, [r3, #1392]	; 0x570
    #endif

    #if NRF52_ERRATA_98_ENABLE_WORKAROUND
        /* Workaround for Errata 98 "NFCT: Not able to communicate with the peer" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_98()){
   1ec38:	f7ff ff8c 	bl	1eb54 <nrf52_errata_103>
   1ec3c:	b118      	cbz	r0, 1ec46 <SystemInit+0xbe>
            *(volatile uint32_t *)0x4000568Cul = 0x00038148ul;
   1ec3e:	4b32      	ldr	r3, [pc, #200]	; (1ed08 <SystemInit+0x180>)
   1ec40:	4a32      	ldr	r2, [pc, #200]	; (1ed0c <SystemInit+0x184>)
   1ec42:	f8c3 268c 	str.w	r2, [r3, #1676]	; 0x68c
    #endif

    #if NRF52_ERRATA_103_ENABLE_WORKAROUND && defined(CCM_MAXPACKETSIZE_MAXPACKETSIZE_Pos)
        /* Workaround for Errata 103 "CCM: Wrong reset value of CCM MAXPACKETSIZE" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_103()){
   1ec46:	f7ff ff85 	bl	1eb54 <nrf52_errata_103>
   1ec4a:	b118      	cbz	r0, 1ec54 <SystemInit+0xcc>
            NRF_CCM->MAXPACKETSIZE = 0xFBul;
   1ec4c:	4b30      	ldr	r3, [pc, #192]	; (1ed10 <SystemInit+0x188>)
   1ec4e:	22fb      	movs	r2, #251	; 0xfb
   1ec50:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    #endif

    #if NRF52_ERRATA_115_ENABLE_WORKAROUND
        /* Workaround for Errata 115 "RAM: RAM content cannot be trusted upon waking up from System ON Idle or System OFF mode" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_115()){
   1ec54:	f7ff ff7e 	bl	1eb54 <nrf52_errata_103>
   1ec58:	b170      	cbz	r0, 1ec78 <SystemInit+0xf0>
            *(volatile uint32_t *)0x40000EE4 = (*(volatile uint32_t *)0x40000EE4 & 0xFFFFFFF0) | (*(uint32_t *)0x10000258 & 0x0000000F);
   1ec5a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
   1ec5e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1ec62:	f8d1 2ee4 	ldr.w	r2, [r1, #3812]	; 0xee4
   1ec66:	f8d3 3258 	ldr.w	r3, [r3, #600]	; 0x258
   1ec6a:	f022 020f 	bic.w	r2, r2, #15
   1ec6e:	f003 030f 	and.w	r3, r3, #15
   1ec72:	4313      	orrs	r3, r2
   1ec74:	f8c1 3ee4 	str.w	r3, [r1, #3812]	; 0xee4
    #endif

    #if NRF52_ERRATA_120_ENABLE_WORKAROUND
        /* Workaround for Errata 120 "QSPI: Data read or written is corrupted" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_120()){
   1ec78:	f7ff ff6c 	bl	1eb54 <nrf52_errata_103>
   1ec7c:	b120      	cbz	r0, 1ec88 <SystemInit+0x100>
            *(volatile uint32_t *)0x40029640ul = 0x200ul;
   1ec7e:	4b25      	ldr	r3, [pc, #148]	; (1ed14 <SystemInit+0x18c>)
   1ec80:	f44f 7200 	mov.w	r2, #512	; 0x200
   1ec84:	f8c3 2640 	str.w	r2, [r3, #1600]	; 0x640
    #endif

    #if NRF52_ERRATA_136_ENABLE_WORKAROUND
        /* Workaround for Errata 136 "System: Bits in RESETREAS are set when they should not be" found at the Errata document
           for your device located at https://infocenter.nordicsemi.com/index.jsp  */
        if (nrf52_errata_136()){
   1ec88:	f7ff ff52 	bl	1eb30 <nrf52_errata_136>
   1ec8c:	b148      	cbz	r0, 1eca2 <SystemInit+0x11a>
            if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk){
   1ec8e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1ec92:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
   1ec96:	07d2      	lsls	r2, r2, #31
                NRF_POWER->RESETREAS =  ~POWER_RESETREAS_RESETPIN_Msk;
   1ec98:	bf44      	itt	mi
   1ec9a:	f06f 0201 	mvnmi.w	r2, #1
   1ec9e:	f8c3 2400 	strmi.w	r2, [r3, #1024]	; 0x400

    /* Configure GPIO pads as pPin Reset pin if Pin Reset capabilities desired. If CONFIG_GPIO_AS_PINRESET is not
      defined, pin reset will not be available. One GPIO (see Product Specification to see which one) will then be
      reserved for PinReset and not available as normal GPIO. */
    #if defined (CONFIG_GPIO_AS_PINRESET)
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1eca2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   1eca6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1ecaa:	2a00      	cmp	r2, #0
   1ecac:	db03      	blt.n	1ecb6 <SystemInit+0x12e>
            ((NRF_UICR->PSELRESET[1] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))){
   1ecae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
        if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) != (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   1ecb2:	2b00      	cmp	r3, #0
   1ecb4:	da22      	bge.n	1ecfc <SystemInit+0x174>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ecb6:	4918      	ldr	r1, [pc, #96]	; (1ed18 <SystemInit+0x190>)
   1ecb8:	2301      	movs	r3, #1
            nvmc_config(NVMC_CONFIG_WEN_Wen);
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ecba:	f04f 2010 	mov.w	r0, #268439552	; 0x10001000
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ecbe:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ecc2:	2412      	movs	r4, #18
    nvmc_wait();
   1ecc4:	f7ff ff58 	bl	1eb78 <nvmc_wait>
            NRF_UICR->PSELRESET[0] = RESET_PIN;
   1ecc8:	f8c0 4200 	str.w	r4, [r0, #512]	; 0x200
            nvmc_wait();
   1eccc:	f7ff ff54 	bl	1eb78 <nvmc_wait>
            NRF_UICR->PSELRESET[1] = RESET_PIN;
   1ecd0:	f8c0 4204 	str.w	r4, [r0, #516]	; 0x204
            nvmc_wait();
   1ecd4:	f7ff ff50 	bl	1eb78 <nvmc_wait>
    NRF_NVMC->CONFIG = mode << NVMC_CONFIG_WEN_Pos;
   1ecd8:	2300      	movs	r3, #0
   1ecda:	f8c1 3504 	str.w	r3, [r1, #1284]	; 0x504
    nvmc_wait();
   1ecde:	f7ff ff4b 	bl	1eb78 <nvmc_wait>
   1ece2:	f3bf 8f4f 	dsb	sy
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   1ece6:	490d      	ldr	r1, [pc, #52]	; (1ed1c <SystemInit+0x194>)
   1ece8:	4b0d      	ldr	r3, [pc, #52]	; (1ed20 <SystemInit+0x198>)
   1ecea:	68ca      	ldr	r2, [r1, #12]
   1ecec:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
   1ecf0:	4313      	orrs	r3, r2
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   1ecf2:	60cb      	str	r3, [r1, #12]
   1ecf4:	f3bf 8f4f 	dsb	sy
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
   1ecf8:	bf00      	nop
  for(;;)                                                           /* wait until reset */
   1ecfa:	e7fd      	b.n	1ecf8 <SystemInit+0x170>
    SystemCoreClock = __SYSTEM_CLOCK_64M;
   1ecfc:	4b09      	ldr	r3, [pc, #36]	; (1ed24 <SystemInit+0x19c>)
   1ecfe:	4a0a      	ldr	r2, [pc, #40]	; (1ed28 <SystemInit+0x1a0>)
   1ed00:	601a      	str	r2, [r3, #0]
            NVIC_SystemReset();
        }
    #endif

    SystemCoreClockUpdate();
}
   1ed02:	bd10      	pop	{r4, pc}
   1ed04:	4000c000 	.word	0x4000c000
   1ed08:	40005000 	.word	0x40005000
   1ed0c:	00038148 	.word	0x00038148
   1ed10:	4000f000 	.word	0x4000f000
   1ed14:	40029000 	.word	0x40029000
   1ed18:	4001e000 	.word	0x4001e000
   1ed1c:	e000ed00 	.word	0xe000ed00
   1ed20:	05fa0004 	.word	0x05fa0004
   1ed24:	20000778 	.word	0x20000778
   1ed28:	03d09000 	.word	0x03d09000

0001ed2c <nrfx_clock_init>:
nrfx_err_t nrfx_clock_init(nrfx_clock_event_handler_t event_handler)
{
    NRFX_ASSERT(event_handler);

    nrfx_err_t err_code = NRFX_SUCCESS;
    if (m_clock_cb.module_initialized)
   1ed2c:	4b04      	ldr	r3, [pc, #16]	; (1ed40 <nrfx_clock_init+0x14>)
   1ed2e:	791a      	ldrb	r2, [r3, #4]
   1ed30:	b922      	cbnz	r2, 1ed3c <nrfx_clock_init+0x10>
    {
#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LF_CAL_ENABLED)
        m_clock_cb.cal_state = CAL_STATE_IDLE;
#endif
        m_clock_cb.event_handler = event_handler;
        m_clock_cb.module_initialized = true;
   1ed32:	2201      	movs	r2, #1
        m_clock_cb.event_handler = event_handler;
   1ed34:	6018      	str	r0, [r3, #0]
        m_clock_cb.module_initialized = true;
   1ed36:	809a      	strh	r2, [r3, #4]
    nrfx_err_t err_code = NRFX_SUCCESS;
   1ed38:	4802      	ldr	r0, [pc, #8]	; (1ed44 <nrfx_clock_init+0x18>)
   1ed3a:	4770      	bx	lr
        err_code = NRFX_ERROR_ALREADY_INITIALIZED;
   1ed3c:	4802      	ldr	r0, [pc, #8]	; (1ed48 <nrfx_clock_init+0x1c>)
#endif
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ed3e:	4770      	bx	lr
   1ed40:	2000ec38 	.word	0x2000ec38
   1ed44:	0bad0000 	.word	0x0bad0000
   1ed48:	0bad000c 	.word	0x0bad000c

0001ed4c <nrfx_clock_stop>:
            break;
    }
}

void nrfx_clock_stop(nrf_clock_domain_t domain)
{
   1ed4c:	b538      	push	{r3, r4, r5, lr}
    NRFX_ASSERT(m_clock_cb.module_initialized);
    switch (domain)
   1ed4e:	b110      	cbz	r0, 1ed56 <nrfx_clock_stop+0xa>
   1ed50:	2801      	cmp	r0, #1
   1ed52:	d017      	beq.n	1ed84 <nrfx_clock_stop+0x38>
    if (domain == NRF_CLOCK_DOMAIN_HFCLK)
    {
            m_clock_cb.hfclk_started = false;
    }
#endif
}
   1ed54:	bd38      	pop	{r3, r4, r5, pc}
    p_reg->INTENCLR = mask;
   1ed56:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
   1ed5a:	2302      	movs	r3, #2
   1ed5c:	f8c4 3308 	str.w	r3, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ed60:	f8c4 0104 	str.w	r0, [r4, #260]	; 0x104
   1ed64:	f8d4 3104 	ldr.w	r3, [r4, #260]	; 0x104
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ed68:	2301      	movs	r3, #1
   1ed6a:	60e3      	str	r3, [r4, #12]
   1ed6c:	f242 7510 	movw	r5, #10000	; 0x2710
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ed70:	f8d4 3418 	ldr.w	r3, [r4, #1048]	; 0x418
   1ed74:	03db      	lsls	r3, r3, #15
   1ed76:	d5ed      	bpl.n	1ed54 <nrfx_clock_stop+0x8>
        NRFX_WAIT_FOR(!nrfx_clock_is_running(domain, NULL), 10000, 1, stopped);
   1ed78:	2001      	movs	r0, #1
   1ed7a:	f007 fe12 	bl	269a2 <nrfx_busy_wait>
   1ed7e:	3d01      	subs	r5, #1
   1ed80:	d1f6      	bne.n	1ed70 <nrfx_clock_stop+0x24>
   1ed82:	e7e7      	b.n	1ed54 <nrfx_clock_stop+0x8>
    p_reg->INTENCLR = mask;
   1ed84:	f04f 4480 	mov.w	r4, #1073741824	; 0x40000000
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ed88:	2300      	movs	r3, #0
    p_reg->INTENCLR = mask;
   1ed8a:	f8c4 0308 	str.w	r0, [r4, #776]	; 0x308
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1ed8e:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
   1ed92:	f8d4 3100 	ldr.w	r3, [r4, #256]	; 0x100
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ed96:	6060      	str	r0, [r4, #4]
   1ed98:	f242 7510 	movw	r5, #10000	; 0x2710
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1ed9c:	f8d4 340c 	ldr.w	r3, [r4, #1036]	; 0x40c
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1eda0:	f8d4 240c 	ldr.w	r2, [r4, #1036]	; 0x40c
   1eda4:	03d2      	lsls	r2, r2, #15
                    (nrf_clock_hfclk_t)((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_SRC_Msk)
   1eda6:	f003 0301 	and.w	r3, r3, #1
            if ((p_reg->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk)
   1edaa:	d505      	bpl.n	1edb8 <nrfx_clock_stop+0x6c>
        NRFX_WAIT_FOR((!nrfx_clock_is_running(domain, &clk_src) ||
   1edac:	b123      	cbz	r3, 1edb8 <nrfx_clock_stop+0x6c>
   1edae:	2001      	movs	r0, #1
   1edb0:	f007 fdf7 	bl	269a2 <nrfx_busy_wait>
   1edb4:	3d01      	subs	r5, #1
   1edb6:	d1f1      	bne.n	1ed9c <nrfx_clock_stop+0x50>
            m_clock_cb.hfclk_started = false;
   1edb8:	4b01      	ldr	r3, [pc, #4]	; (1edc0 <nrfx_clock_stop+0x74>)
   1edba:	2200      	movs	r2, #0
   1edbc:	715a      	strb	r2, [r3, #5]
   1edbe:	e7c9      	b.n	1ed54 <nrfx_clock_stop+0x8>
   1edc0:	2000ec38 	.word	0x2000ec38

0001edc4 <nrfx_power_clock_irq_handler>:
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1edc4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    }
}
#endif

void nrfx_clock_irq_handler(void)
{
   1edc8:	b510      	push	{r4, lr}
   1edca:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED))
   1edce:	b16a      	cbz	r2, 1edec <nrfx_power_clock_irq_handler+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1edd0:	2200      	movs	r2, #0
   1edd2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1edd6:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENCLR = mask;
   1edda:	2201      	movs	r2, #1
   1eddc:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
        nrf_clock_event_clear(NRF_CLOCK, NRF_CLOCK_EVENT_HFCLKSTARTED);
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_HFCLKSTARTED");
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF_STARTED_MASK);

#if NRFX_CHECK(USE_WORKAROUND_FOR_ANOMALY_201)
        if (!m_clock_cb.hfclk_started)
   1ede0:	4b11      	ldr	r3, [pc, #68]	; (1ee28 <nrfx_power_clock_irq_handler+0x64>)
   1ede2:	7958      	ldrb	r0, [r3, #5]
   1ede4:	b910      	cbnz	r0, 1edec <nrfx_power_clock_irq_handler+0x28>
        {
            m_clock_cb.hfclk_started = true;
   1ede6:	715a      	strb	r2, [r3, #5]
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
   1ede8:	681b      	ldr	r3, [r3, #0]
   1edea:	4798      	blx	r3
    return (bool)*((volatile uint32_t *)((uint8_t *)p_reg + event));
   1edec:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   1edf0:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
        }
#else
        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK_STARTED);
#endif
    }
    if (nrf_clock_event_check(NRF_CLOCK, NRF_CLOCK_EVENT_LFCLKSTARTED))
   1edf4:	b172      	cbz	r2, 1ee14 <nrfx_power_clock_irq_handler+0x50>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1edf6:	2200      	movs	r2, #0
   1edf8:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   1edfc:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   1ee00:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   1ee04:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
        NRFX_LOG_DEBUG("Event: NRF_CLOCK_EVENT_LFCLKSTARTED");

#if NRFX_CHECK(NRFX_CLOCK_CONFIG_LFXO_TWO_STAGE_ENABLED)
        nrf_clock_lfclk_t lfclksrc;
        (void)nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc);
        if (lfclksrc == NRF_CLOCK_LFCLK_RC)
   1ee08:	0792      	lsls	r2, r2, #30
   1ee0a:	d104      	bne.n	1ee16 <nrfx_power_clock_irq_handler+0x52>
    p_reg->LFCLKSRC = (uint32_t)(source);
   1ee0c:	2201      	movs	r2, #1
   1ee0e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1ee12:	609a      	str	r2, [r3, #8]
        nrf_clock_int_disable(NRF_CLOCK, NRF_CLOCK_INT_HF192M_STARTED_MASK);

        m_clock_cb.event_handler(NRFX_CLOCK_EVT_HFCLK192M_STARTED);
    }
#endif
}
   1ee14:	bd10      	pop	{r4, pc}
    p_reg->INTENCLR = mask;
   1ee16:	2202      	movs	r2, #2
   1ee18:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ee1c:	4b02      	ldr	r3, [pc, #8]	; (1ee28 <nrfx_power_clock_irq_handler+0x64>)
}
   1ee1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            m_clock_cb.event_handler(NRFX_CLOCK_EVT_LFCLK_STARTED);
   1ee22:	681b      	ldr	r3, [r3, #0]
   1ee24:	2001      	movs	r0, #1
   1ee26:	4718      	bx	r3
   1ee28:	2000ec38 	.word	0x2000ec38

0001ee2c <nrfx_gpiote_channel_free>:
    return m_cb.allocated_channels_mask & (1UL << index);
}

static bool is_app_channel(uint8_t index)
{
    return NRFX_GPIOTE_APP_CHANNELS_MASK & (1UL << index);
   1ee2c:	2301      	movs	r3, #1
   1ee2e:	fa03 f000 	lsl.w	r0, r3, r0
   1ee32:	b2c3      	uxtb	r3, r0

nrfx_err_t nrfx_gpiote_channel_free(uint8_t channel)
{
    nrfx_err_t err_code = NRFX_SUCCESS;

    if (!is_app_channel(channel))
   1ee34:	b193      	cbz	r3, 1ee5c <nrfx_gpiote_channel_free+0x30>
	__asm__ volatile(
   1ee36:	f04f 0320 	mov.w	r3, #32
   1ee3a:	f3ef 8111 	mrs	r1, BASEPRI
   1ee3e:	f383 8811 	msr	BASEPRI, r3
   1ee42:	f3bf 8f6f 	isb	sy
    m_cb.allocated_channels_mask &= ~(1UL << index);
   1ee46:	4a06      	ldr	r2, [pc, #24]	; (1ee60 <nrfx_gpiote_channel_free+0x34>)
   1ee48:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   1ee4a:	ea23 0000 	bic.w	r0, r3, r0
   1ee4e:	65d0      	str	r0, [r2, #92]	; 0x5c
	__asm__ volatile(
   1ee50:	f381 8811 	msr	BASEPRI, r1
   1ee54:	f3bf 8f6f 	isb	sy
   1ee58:	4802      	ldr	r0, [pc, #8]	; (1ee64 <nrfx_gpiote_channel_free+0x38>)
   1ee5a:	4770      	bx	lr
    {
        err_code = NRFX_ERROR_INVALID_PARAM;
   1ee5c:	4802      	ldr	r0, [pc, #8]	; (1ee68 <nrfx_gpiote_channel_free+0x3c>)
        NRFX_CRITICAL_SECTION_EXIT();
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ee5e:	4770      	bx	lr
   1ee60:	2000ec40 	.word	0x2000ec40
   1ee64:	0bad0000 	.word	0x0bad0000
   1ee68:	0bad0004 	.word	0x0bad0004

0001ee6c <nrfx_gpiote_channel_alloc>:

nrfx_err_t nrfx_gpiote_channel_alloc(uint8_t * p_channel)
{
   1ee6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ee70:	4605      	mov	r5, r0
    return m_cb.allocated_channels_mask & (1UL << index);
   1ee72:	f8df e05c 	ldr.w	lr, [pc, #92]	; 1eed0 <nrfx_gpiote_channel_alloc+0x64>
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1ee76:	4817      	ldr	r0, [pc, #92]	; (1eed4 <nrfx_gpiote_channel_alloc+0x68>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
        {
            channel_allocated_set(ch_idx);
            *p_channel = ch_idx;
            err_code = NRFX_SUCCESS;
   1ee78:	f8df 805c 	ldr.w	r8, [pc, #92]	; 1eed8 <nrfx_gpiote_channel_alloc+0x6c>
{
   1ee7c:	2400      	movs	r4, #0
    uint32_t mask = NRFX_GPIOTE_APP_CHANNELS_MASK;
   1ee7e:	22ff      	movs	r2, #255	; 0xff
    return m_cb.allocated_channels_mask & (1UL << index);
   1ee80:	2601      	movs	r6, #1
   1ee82:	b2e3      	uxtb	r3, r4
	__asm__ volatile(
   1ee84:	f04f 0120 	mov.w	r1, #32
   1ee88:	f3ef 8c11 	mrs	ip, BASEPRI
   1ee8c:	f381 8811 	msr	BASEPRI, r1
   1ee90:	f3bf 8f6f 	isb	sy
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1ee94:	fa22 f103 	lsr.w	r1, r2, r3
   1ee98:	07c9      	lsls	r1, r1, #31
   1ee9a:	d50a      	bpl.n	1eeb2 <nrfx_gpiote_channel_alloc+0x46>
    return m_cb.allocated_channels_mask & (1UL << index);
   1ee9c:	f8de 105c 	ldr.w	r1, [lr, #92]	; 0x5c
   1eea0:	fa06 f703 	lsl.w	r7, r6, r3
        if ((mask & (1UL << ch_idx)) && (!is_allocated_channel(ch_idx)))
   1eea4:	4239      	tst	r1, r7
    m_cb.allocated_channels_mask |= (1UL << index);
   1eea6:	bf01      	itttt	eq
   1eea8:	4339      	orreq	r1, r7
   1eeaa:	f8ce 105c 	streq.w	r1, [lr, #92]	; 0x5c
            err_code = NRFX_SUCCESS;
   1eeae:	4640      	moveq	r0, r8
            *p_channel = ch_idx;
   1eeb0:	702b      	strbeq	r3, [r5, #0]
	__asm__ volatile(
   1eeb2:	f38c 8811 	msr	BASEPRI, ip
   1eeb6:	f3bf 8f6f 	isb	sy
        }
        NRFX_CRITICAL_SECTION_EXIT();

        if (err_code == NRFX_SUCCESS)
   1eeba:	4540      	cmp	r0, r8
   1eebc:	d005      	beq.n	1eeca <nrfx_gpiote_channel_alloc+0x5e>
        {
            NRFX_LOG_INFO("Allocated channel: %d.", ch_idx);
            break;
        }

        mask &= ~(1UL << ch_idx);
   1eebe:	fa06 f303 	lsl.w	r3, r6, r3
    for (uint8_t ch_idx = 0; mask != 0; ch_idx++)
   1eec2:	439a      	bics	r2, r3
   1eec4:	f104 0401 	add.w	r4, r4, #1
   1eec8:	d1db      	bne.n	1ee82 <nrfx_gpiote_channel_alloc+0x16>
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1eeca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1eece:	bf00      	nop
   1eed0:	2000ec40 	.word	0x2000ec40
   1eed4:	0bad0002 	.word	0x0bad0002
   1eed8:	0bad0000 	.word	0x0bad0000

0001eedc <nvmc_word_write>:
   1eedc:	4a04      	ldr	r2, [pc, #16]	; (1eef0 <nvmc_word_write+0x14>)
   1eede:	f8d2 3400 	ldr.w	r3, [r2, #1024]	; 0x400
{
#if defined(NRF9160_XXAA)
    while (!nrf_nvmc_write_ready_check(NRF_NVMC))
    {}
#else
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1eee2:	07db      	lsls	r3, r3, #31
   1eee4:	d5fb      	bpl.n	1eede <nvmc_word_write+0x2>
    {}
#endif

    *(volatile uint32_t *)addr = value;
   1eee6:	6001      	str	r1, [r0, #0]
  __ASM volatile ("dmb 0xF":::"memory");
   1eee8:	f3bf 8f5f 	dmb	sy
    __DMB();
}
   1eeec:	4770      	bx	lr
   1eeee:	bf00      	nop
   1eef0:	4001e000 	.word	0x4001e000

0001eef4 <nrfx_nvmc_page_erase>:
NRF_STATIC_INLINE uint32_t nrf_ficr_codepagesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODEPAGESIZE_CODEPAGESIZE_Msk)
    return p_reg->INFO.CODEPAGESIZE;
#else
    return p_reg->CODEPAGESIZE;
   1eef4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   1eef8:	691a      	ldr	r2, [r3, #16]
    return !(addr % flash_page_size_get());
   1eefa:	fbb0 f3f2 	udiv	r3, r0, r2
   1eefe:	fb02 0313 	mls	r3, r2, r3, r0

nrfx_err_t nrfx_nvmc_page_erase(uint32_t addr)
{
    NRFX_ASSERT(is_valid_address(addr, false));

    if (!is_page_aligned_check(addr))
   1ef02:	b973      	cbnz	r3, 1ef22 <nrfx_nvmc_page_erase+0x2e>
#endif

NRF_STATIC_INLINE void nrf_nvmc_mode_set(NRF_NVMC_Type * p_reg,
                                         nrf_nvmc_mode_t mode)
{
    p_reg->CONFIG = (uint32_t)mode;
   1ef04:	4b08      	ldr	r3, [pc, #32]	; (1ef28 <nrfx_nvmc_page_erase+0x34>)
   1ef06:	2202      	movs	r2, #2
   1ef08:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    else
    {
        p_reg->ERASEPCR1 = page_addr;
    }
#elif defined(NRF52_SERIES)
    p_reg->ERASEPAGE = page_addr;
   1ef0c:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    return (bool)(p_reg->READY & NVMC_READY_READY_Msk);
   1ef10:	f8d3 2400 	ldr.w	r2, [r3, #1024]	; 0x400
        return NRFX_ERROR_INVALID_ADDR;
    }

    nvmc_erase_mode_set();
    nrf_nvmc_page_erase_start(NRF_NVMC, addr);
    while (!nrf_nvmc_ready_check(NRF_NVMC))
   1ef14:	07d2      	lsls	r2, r2, #31
   1ef16:	d5fb      	bpl.n	1ef10 <nrfx_nvmc_page_erase+0x1c>
    p_reg->CONFIG = (uint32_t)mode;
   1ef18:	2200      	movs	r2, #0
    {}
    nvmc_readonly_mode_set();

    return NRFX_SUCCESS;
   1ef1a:	4804      	ldr	r0, [pc, #16]	; (1ef2c <nrfx_nvmc_page_erase+0x38>)
   1ef1c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
   1ef20:	4770      	bx	lr
        return NRFX_ERROR_INVALID_ADDR;
   1ef22:	4803      	ldr	r0, [pc, #12]	; (1ef30 <nrfx_nvmc_page_erase+0x3c>)
}
   1ef24:	4770      	bx	lr
   1ef26:	bf00      	nop
   1ef28:	4001e000 	.word	0x4001e000
   1ef2c:	0bad0000 	.word	0x0bad0000
   1ef30:	0bad000a 	.word	0x0bad000a

0001ef34 <nrfx_nvmc_word_write>:

    nrfx_nvmc_word_write(aligned_addr, partial_word_create(addr, (const uint8_t *)&value, 2));
}

void nrfx_nvmc_word_write(uint32_t addr, uint32_t value)
{
   1ef34:	b510      	push	{r4, lr}
   1ef36:	4c05      	ldr	r4, [pc, #20]	; (1ef4c <nrfx_nvmc_word_write+0x18>)
   1ef38:	2301      	movs	r3, #1
   1ef3a:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504
    NRFX_ASSERT(is_valid_address(addr, true));
    NRFX_ASSERT(nrfx_is_word_aligned((void const *)addr));

    nvmc_write_mode_set();

    nvmc_word_write(addr, value);
   1ef3e:	f7ff ffcd 	bl	1eedc <nvmc_word_write>
   1ef42:	2300      	movs	r3, #0
   1ef44:	f8c4 3504 	str.w	r3, [r4, #1284]	; 0x504

    nvmc_readonly_mode_set();
}
   1ef48:	bd10      	pop	{r4, pc}
   1ef4a:	bf00      	nop
   1ef4c:	4001e000 	.word	0x4001e000

0001ef50 <nrfx_ppi_channel_alloc>:


nrfx_err_t nrfx_ppi_channel_alloc(nrf_ppi_channel_t * p_channel)
{
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ef50:	4b18      	ldr	r3, [pc, #96]	; (1efb4 <nrfx_ppi_channel_alloc+0x64>)
        NRFX_CRITICAL_SECTION_ENTER();
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
        {
            channel_allocated_set(channel);
            *p_channel = channel;
            err_code   = NRFX_SUCCESS;
   1ef52:	f8df c064 	ldr.w	ip, [pc, #100]	; 1efb8 <nrfx_ppi_channel_alloc+0x68>
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ef56:	681b      	ldr	r3, [r3, #0]
{
   1ef58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ef5c:	43db      	mvns	r3, r3
{
   1ef5e:	4605      	mov	r5, r0
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1ef60:	4f16      	ldr	r7, [pc, #88]	; (1efbc <nrfx_ppi_channel_alloc+0x6c>)
    nrfx_err_t err_code = NRFX_ERROR_NO_MEM;
   1ef62:	4817      	ldr	r0, [pc, #92]	; (1efc0 <nrfx_ppi_channel_alloc+0x70>)
    uint32_t mask = NRFX_PPI_PROG_APP_CHANNELS_MASK;
   1ef64:	f3c3 0313 	ubfx	r3, r3, #0, #20
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1ef68:	2400      	movs	r4, #0
NRFX_STATIC_INLINE uint32_t nrfx_ppi_task_addr_group_disable_get(nrf_ppi_channel_group_t group);

#ifndef NRFX_DECLARE_ONLY
NRFX_STATIC_INLINE uint32_t nrfx_ppi_channel_to_mask(nrf_ppi_channel_t channel)
{
    return (1uL << (uint32_t) channel);
   1ef6a:	f04f 0e01 	mov.w	lr, #1
   1ef6e:	b2e6      	uxtb	r6, r4
   1ef70:	b90b      	cbnz	r3, 1ef76 <nrfx_ppi_channel_alloc+0x26>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
    }

    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1ef72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	__asm__ volatile(
   1ef76:	f04f 0220 	mov.w	r2, #32
   1ef7a:	f3ef 8811 	mrs	r8, BASEPRI
   1ef7e:	f382 8811 	msr	BASEPRI, r2
   1ef82:	f3bf 8f6f 	isb	sy
   1ef86:	fa0e f206 	lsl.w	r2, lr, r6
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1ef8a:	4213      	tst	r3, r2
   1ef8c:	d006      	beq.n	1ef9c <nrfx_ppi_channel_alloc+0x4c>
    return ((m_channels_allocated & nrfx_ppi_channel_to_mask(channel)) != 0);
   1ef8e:	6839      	ldr	r1, [r7, #0]
        if ((mask & nrfx_ppi_channel_to_mask(channel)) && (!is_allocated_channel(channel)))
   1ef90:	420a      	tst	r2, r1
    m_channels_allocated |= nrfx_ppi_channel_to_mask(channel);
   1ef92:	bf01      	itttt	eq
   1ef94:	4311      	orreq	r1, r2
   1ef96:	6039      	streq	r1, [r7, #0]
            *p_channel = channel;
   1ef98:	702e      	strbeq	r6, [r5, #0]
            err_code   = NRFX_SUCCESS;
   1ef9a:	4660      	moveq	r0, ip
	__asm__ volatile(
   1ef9c:	f388 8811 	msr	BASEPRI, r8
   1efa0:	f3bf 8f6f 	isb	sy
        if (err_code == NRFX_SUCCESS)
   1efa4:	4560      	cmp	r0, ip
   1efa6:	f104 0401 	add.w	r4, r4, #1
   1efaa:	d0e2      	beq.n	1ef72 <nrfx_ppi_channel_alloc+0x22>
        mask &= ~nrfx_ppi_channel_to_mask(channel);
   1efac:	ea23 0302 	bic.w	r3, r3, r2
    for (uint8_t ch_idx = NRF_PPI_CHANNEL0; mask != 0; ch_idx++)
   1efb0:	e7dd      	b.n	1ef6e <nrfx_ppi_channel_alloc+0x1e>
   1efb2:	bf00      	nop
   1efb4:	000290c8 	.word	0x000290c8
   1efb8:	0bad0000 	.word	0x0bad0000
   1efbc:	2000eca0 	.word	0x2000eca0
   1efc0:	0bad0002 	.word	0x0bad0002

0001efc4 <nrf_gpio_pin_port_decode>:
    uint32_t pin_number = *p_pin;
   1efc4:	6803      	ldr	r3, [r0, #0]
    *p_pin = pin_number & 0x1F;
   1efc6:	f003 021f 	and.w	r2, r3, #31
    return pin_number >> 5;
   1efca:	095b      	lsrs	r3, r3, #5
        case 1: return NRF_P1;
   1efcc:	2b01      	cmp	r3, #1
    *p_pin = pin_number & 0x1F;
   1efce:	6002      	str	r2, [r0, #0]
}
   1efd0:	4802      	ldr	r0, [pc, #8]	; (1efdc <nrf_gpio_pin_port_decode+0x18>)
   1efd2:	bf18      	it	ne
   1efd4:	f04f 40a0 	movne.w	r0, #1342177280	; 0x50000000
   1efd8:	4770      	bx	lr
   1efda:	bf00      	nop
   1efdc:	50000300 	.word	0x50000300

0001efe0 <nrfx_spi_init>:

nrfx_err_t nrfx_spi_init(nrfx_spi_t const *        p_instance,
                         nrfx_spi_config_t const * p_config,
                         nrfx_spi_evt_handler_t    handler,
                         void *                    p_context)
{
   1efe0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    NRFX_ASSERT(p_config);
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1efe4:	7907      	ldrb	r7, [r0, #4]
    nrfx_err_t err_code;

    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1efe6:	4c4c      	ldr	r4, [pc, #304]	; (1f118 <nrfx_spi_init+0x138>)
{
   1efe8:	4680      	mov	r8, r0
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1efea:	2028      	movs	r0, #40	; 0x28
   1efec:	4378      	muls	r0, r7
   1efee:	1825      	adds	r5, r4, r0
   1eff0:	7f2e      	ldrb	r6, [r5, #28]
   1eff2:	2e00      	cmp	r6, #0
   1eff4:	f040 808e 	bne.w	1f114 <nrfx_spi_init+0x134>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
#endif // NRFX_CHECK(NRFX_PRS_ENABLED)

    p_cb->handler = handler;
   1eff8:	5022      	str	r2, [r4, r0]
    p_cb->p_context = p_context;
   1effa:	606b      	str	r3, [r5, #4]
    // Configure pins used by the peripheral:
    // - SCK - output with initial value corresponding with the SPI mode used:
    //   0 - for modes 0 and 1 (CPOL = 0), 1 - for modes 2 and 3 (CPOL = 1);
    //   according to the reference manual guidelines this pin and its input
    //   buffer must always be connected for the SPI to work.
    if (p_config->mode <= NRF_SPI_MODE_1)
   1effc:	7b0b      	ldrb	r3, [r1, #12]
    {
        nrf_gpio_pin_clear(p_config->sck_pin);
   1effe:	7808      	ldrb	r0, [r1, #0]
    if (p_config->mode <= NRF_SPI_MODE_1)
   1f000:	2b01      	cmp	r3, #1
   1f002:	d878      	bhi.n	1f0f6 <nrfx_spi_init+0x116>
        nrf_gpio_pin_clear(p_config->sck_pin);
   1f004:	f007 fd20 	bl	26a48 <nrf_gpio_pin_clear>
    }
    else
    {
        nrf_gpio_pin_set(p_config->sck_pin);
    }
    nrf_gpio_cfg(p_config->sck_pin,
   1f008:	780b      	ldrb	r3, [r1, #0]
   1f00a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f00c:	a801      	add	r0, sp, #4
   1f00e:	f7ff ffd9 	bl	1efc4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f012:	9b01      	ldr	r3, [sp, #4]
   1f014:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f018:	2201      	movs	r2, #1
   1f01a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
                 NRF_GPIO_PIN_INPUT_CONNECT,
                 NRF_GPIO_PIN_NOPULL,
                 NRF_GPIO_PIN_S0S1,
                 NRF_GPIO_PIN_NOSENSE);
    // - MOSI (optional) - output with initial value 0,
    if (p_config->mosi_pin != NRFX_SPI_PIN_NOT_USED)
   1f01e:	784d      	ldrb	r5, [r1, #1]
   1f020:	2dff      	cmp	r5, #255	; 0xff
   1f022:	d06b      	beq.n	1f0fc <nrfx_spi_init+0x11c>
    {
        mosi_pin = p_config->mosi_pin;
        nrf_gpio_pin_clear(mosi_pin);
   1f024:	4628      	mov	r0, r5
   1f026:	f007 fd0f 	bl	26a48 <nrf_gpio_pin_clear>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f02a:	a801      	add	r0, sp, #4
   1f02c:	9501      	str	r5, [sp, #4]
   1f02e:	f7ff ffc9 	bl	1efc4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f032:	9b01      	ldr	r3, [sp, #4]
   1f034:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f038:	2203      	movs	r2, #3
   1f03a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - MISO (optional) - input,
    if (p_config->miso_pin != NRFX_SPI_PIN_NOT_USED)
   1f03e:	788e      	ldrb	r6, [r1, #2]
   1f040:	2eff      	cmp	r6, #255	; 0xff
   1f042:	d05e      	beq.n	1f102 <nrfx_spi_init+0x122>
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f044:	a801      	add	r0, sp, #4
    {
        miso_pin = p_config->miso_pin;
        nrf_gpio_cfg_input(miso_pin, p_config->miso_pull);
   1f046:	f891 900e 	ldrb.w	r9, [r1, #14]
    nrf_gpio_cfg(
   1f04a:	9601      	str	r6, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f04c:	f7ff ffba 	bl	1efc4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f050:	9b01      	ldr	r3, [sp, #4]
   1f052:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
                               | ((uint32_t)pull << GPIO_PIN_CNF_PULL_Pos)
   1f056:	ea4f 0289 	mov.w	r2, r9, lsl #2
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f05a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    else
    {
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
    }
    // - Slave Select (optional) - output with initial value 1 (inactive).
    if (p_config->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f05e:	78c8      	ldrb	r0, [r1, #3]
   1f060:	28ff      	cmp	r0, #255	; 0xff
   1f062:	d00c      	beq.n	1f07e <nrfx_spi_init+0x9e>
    {
        nrf_gpio_pin_set(p_config->ss_pin);
   1f064:	f007 fce3 	bl	26a2e <nrf_gpio_pin_set>
        nrf_gpio_cfg_output(p_config->ss_pin);
   1f068:	78cb      	ldrb	r3, [r1, #3]
   1f06a:	9301      	str	r3, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   1f06c:	a801      	add	r0, sp, #4
   1f06e:	f7ff ffa9 	bl	1efc4 <nrf_gpio_pin_port_decode>
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f072:	9b01      	ldr	r3, [sp, #4]
   1f074:	f503 73e0 	add.w	r3, r3, #448	; 0x1c0
   1f078:	2203      	movs	r2, #3
   1f07a:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
    }
    m_cb[p_instance->drv_inst_idx].ss_pin = p_config->ss_pin;
   1f07e:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f082:	78c8      	ldrb	r0, [r1, #3]
   1f084:	2328      	movs	r3, #40	; 0x28
   1f086:	fb03 4302 	mla	r3, r3, r2, r4
   1f08a:	7798      	strb	r0, [r3, #30]

    NRF_SPI_Type * p_spi = p_instance->p_reg;
   1f08c:	f8d8 0000 	ldr.w	r0, [r8]
    nrf_spi_pins_set(p_spi, p_config->sck_pin, mosi_pin, miso_pin);
   1f090:	780b      	ldrb	r3, [r1, #0]
    p_reg->PSEL.SCK = sck_pin;
   1f092:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f096:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.MOSI = mosi_pin;
   1f098:	f8c0 550c 	str.w	r5, [r0, #1292]	; 0x50c
    p_reg->PSEL.MISO = miso_pin;
   1f09c:	f8c0 6510 	str.w	r6, [r0, #1296]	; 0x510
    p_reg->FREQUENCY = (uint32_t)frequency;
   1f0a0:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
        SPI_CONFIG_ORDER_MsbFirst : SPI_CONFIG_ORDER_LsbFirst);
   1f0a4:	7b4b      	ldrb	r3, [r1, #13]
    nrf_spi_frequency_set(p_spi, p_config->frequency);
    nrf_spi_configure(p_spi, p_config->mode, p_config->bit_order);
   1f0a6:	7b0d      	ldrb	r5, [r1, #12]
   1f0a8:	3b00      	subs	r3, #0
   1f0aa:	bf18      	it	ne
   1f0ac:	2301      	movne	r3, #1
    switch (spi_mode)
   1f0ae:	2d02      	cmp	r5, #2
   1f0b0:	d02a      	beq.n	1f108 <nrfx_spi_init+0x128>
   1f0b2:	2d03      	cmp	r5, #3
   1f0b4:	d02b      	beq.n	1f10e <nrfx_spi_init+0x12e>
   1f0b6:	2d01      	cmp	r5, #1
   1f0b8:	d101      	bne.n	1f0be <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveHigh << SPI_CONFIG_CPOL_Pos) |
   1f0ba:	f043 0302 	orr.w	r3, r3, #2
    p_reg->CONFIG = config;
   1f0be:	f8c0 3554 	str.w	r3, [r0, #1364]	; 0x554

    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1f0c2:	2328      	movs	r3, #40	; 0x28
   1f0c4:	fb03 4202 	mla	r2, r3, r2, r4

    nrf_spi_enable(p_spi);

    if (p_cb->handler)
   1f0c8:	437b      	muls	r3, r7
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1f0ca:	7949      	ldrb	r1, [r1, #5]
    if (p_cb->handler)
   1f0cc:	58e3      	ldr	r3, [r4, r3]
    m_cb[p_instance->drv_inst_idx].orc = p_config->orc;
   1f0ce:	77d1      	strb	r1, [r2, #31]
    p_reg->ENABLE = (SPI_ENABLE_ENABLE_Enabled << SPI_ENABLE_ENABLE_Pos);
   1f0d0:	2201      	movs	r2, #1
   1f0d2:	f8c0 2500 	str.w	r2, [r0, #1280]	; 0x500
    if (p_cb->handler)
   1f0d6:	b11b      	cbz	r3, 1f0e0 <nrfx_spi_init+0x100>
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(p_instance->p_reg),
            p_config->irq_priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_reg));
   1f0d8:	f340 3007 	sbfx	r0, r0, #12, #8
   1f0dc:	f7e8 fb36 	bl	774c <arch_irq_enable>
    }

    p_cb->transfer_in_progress = false;
   1f0e0:	2328      	movs	r3, #40	; 0x28
   1f0e2:	fb03 4407 	mla	r4, r3, r7, r4
   1f0e6:	2300      	movs	r3, #0
   1f0e8:	7763      	strb	r3, [r4, #29]
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;

    err_code = NRFX_SUCCESS;
    NRFX_LOG_INFO("Function: %s, error code: %s.", __func__, NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1f0ea:	480c      	ldr	r0, [pc, #48]	; (1f11c <nrfx_spi_init+0x13c>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f0ec:	2301      	movs	r3, #1
   1f0ee:	7723      	strb	r3, [r4, #28]
}
   1f0f0:	b003      	add	sp, #12
   1f0f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        nrf_gpio_pin_set(p_config->sck_pin);
   1f0f6:	f007 fc9a 	bl	26a2e <nrf_gpio_pin_set>
   1f0fa:	e785      	b.n	1f008 <nrfx_spi_init+0x28>
        mosi_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1f0fc:	f04f 35ff 	mov.w	r5, #4294967295
   1f100:	e79d      	b.n	1f03e <nrfx_spi_init+0x5e>
        miso_pin = NRF_SPI_PIN_NOT_CONNECTED;
   1f102:	f04f 36ff 	mov.w	r6, #4294967295
   1f106:	e7aa      	b.n	1f05e <nrfx_spi_init+0x7e>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1f108:	f043 0304 	orr.w	r3, r3, #4
        break;
   1f10c:	e7d7      	b.n	1f0be <nrfx_spi_init+0xde>
        config |= (SPI_CONFIG_CPOL_ActiveLow  << SPI_CONFIG_CPOL_Pos) |
   1f10e:	f043 0306 	orr.w	r3, r3, #6
        break;
   1f112:	e7d4      	b.n	1f0be <nrfx_spi_init+0xde>
        return err_code;
   1f114:	4802      	ldr	r0, [pc, #8]	; (1f120 <nrfx_spi_init+0x140>)
   1f116:	e7eb      	b.n	1f0f0 <nrfx_spi_init+0x110>
   1f118:	2000eca4 	.word	0x2000eca4
   1f11c:	0bad0000 	.word	0x0bad0000
   1f120:	0bad0005 	.word	0x0bad0005

0001f124 <nrfx_spi_xfer>:
}

nrfx_err_t nrfx_spi_xfer(nrfx_spi_t const *           p_instance,
                         nrfx_spi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1f124:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f128:	7907      	ldrb	r7, [r0, #4]
    NRFX_ASSERT(p_xfer_desc->p_tx_buffer != NULL || p_xfer_desc->tx_length == 0);
    NRFX_ASSERT(p_xfer_desc->p_rx_buffer != NULL || p_xfer_desc->rx_length == 0);

    nrfx_err_t err_code = NRFX_SUCCESS;

    if (p_cb->transfer_in_progress)
   1f12a:	4c39      	ldr	r4, [pc, #228]	; (1f210 <nrfx_spi_xfer+0xec>)
   1f12c:	2328      	movs	r3, #40	; 0x28
   1f12e:	437b      	muls	r3, r7
{
   1f130:	4690      	mov	r8, r2
    if (p_cb->transfer_in_progress)
   1f132:	18e2      	adds	r2, r4, r3
{
   1f134:	460e      	mov	r6, r1
    if (p_cb->transfer_in_progress)
   1f136:	7f51      	ldrb	r1, [r2, #29]
{
   1f138:	4681      	mov	r9, r0
    if (p_cb->transfer_in_progress)
   1f13a:	2900      	cmp	r1, #0
   1f13c:	d165      	bne.n	1f20a <nrfx_spi_xfer+0xe6>
                         NRFX_LOG_ERROR_STRING_GET(err_code));
        return err_code;
    }
    else
    {
        if (p_cb->handler)
   1f13e:	58e3      	ldr	r3, [r4, r3]
   1f140:	b10b      	cbz	r3, 1f146 <nrfx_spi_xfer+0x22>
        {
            p_cb->transfer_in_progress = true;
   1f142:	2301      	movs	r3, #1
   1f144:	7753      	strb	r3, [r2, #29]
        }
    }

    p_cb->evt.xfer_desc = *p_xfer_desc;
   1f146:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
   1f14a:	2528      	movs	r5, #40	; 0x28
   1f14c:	fb05 4507 	mla	r5, r5, r7, r4
   1f150:	f105 0c0c 	add.w	ip, r5, #12
   1f154:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
    p_cb->abort = false;

    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f158:	7fa8      	ldrb	r0, [r5, #30]
    p_cb->abort = false;
   1f15a:	2300      	movs	r3, #0
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f15c:	28ff      	cmp	r0, #255	; 0xff
    p_cb->abort = false;
   1f15e:	f885 3024 	strb.w	r3, [r5, #36]	; 0x24
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f162:	d001      	beq.n	1f168 <nrfx_spi_xfer+0x44>
    {
        nrf_gpio_pin_clear(p_cb->ss_pin);
   1f164:	f007 fc70 	bl	26a48 <nrf_gpio_pin_clear>
    }
    if (flags)
   1f168:	2328      	movs	r3, #40	; 0x28
   1f16a:	f1b8 0f00 	cmp.w	r8, #0
   1f16e:	d006      	beq.n	1f17e <nrfx_spi_xfer+0x5a>
    {
        p_cb->transfer_in_progress = false;
   1f170:	fb03 4407 	mla	r4, r3, r7, r4
        err_code = NRFX_ERROR_NOT_SUPPORTED;
   1f174:	4827      	ldr	r0, [pc, #156]	; (1f214 <nrfx_spi_xfer+0xf0>)
        p_cb->transfer_in_progress = false;
   1f176:	2300      	movs	r3, #0
   1f178:	7763      	strb	r3, [r4, #29]
    }
    NRFX_LOG_INFO("Function: %s, error code: %s.",
                  __func__,
                  NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
}
   1f17a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        spi_xfer(p_instance->p_reg, p_cb, p_xfer_desc);
   1f17e:	f8d9 5000 	ldr.w	r5, [r9]
    p_cb->bytes_transferred = 0;
   1f182:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->INTENCLR = mask;
   1f186:	2204      	movs	r2, #4
   1f188:	f8c5 2308 	str.w	r2, [r5, #776]	; 0x308
   1f18c:	f8c3 8020 	str.w	r8, [r3, #32]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f190:	f8c5 8108 	str.w	r8, [r5, #264]	; 0x108
   1f194:	f8d5 2108 	ldr.w	r2, [r5, #264]	; 0x108
        (p_xfer_desc->tx_length > 0 ? p_xfer_desc->p_tx_buffer[0] : p_cb->orc));
   1f198:	6872      	ldr	r2, [r6, #4]
    nrf_spi_txd_set(p_spi,
   1f19a:	b192      	cbz	r2, 1f1c2 <nrfx_spi_xfer+0x9e>
   1f19c:	6833      	ldr	r3, [r6, #0]
   1f19e:	781b      	ldrb	r3, [r3, #0]
    p_reg->TXD = data;
   1f1a0:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_xfer_desc->tx_length > 1)
   1f1a4:	2a01      	cmp	r2, #1
   1f1a6:	d90e      	bls.n	1f1c6 <nrfx_spi_xfer+0xa2>
        nrf_spi_txd_set(p_spi, p_xfer_desc->p_tx_buffer[1]);
   1f1a8:	6833      	ldr	r3, [r6, #0]
   1f1aa:	785b      	ldrb	r3, [r3, #1]
   1f1ac:	f8c5 351c 	str.w	r3, [r5, #1308]	; 0x51c
    if (p_cb->handler)
   1f1b0:	2328      	movs	r3, #40	; 0x28
   1f1b2:	437b      	muls	r3, r7
   1f1b4:	58e6      	ldr	r6, [r4, r3]
   1f1b6:	b176      	cbz	r6, 1f1d6 <nrfx_spi_xfer+0xb2>
    p_reg->INTENSET = mask;
   1f1b8:	2304      	movs	r3, #4
   1f1ba:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304
    nrfx_err_t err_code = NRFX_SUCCESS;
   1f1be:	4816      	ldr	r0, [pc, #88]	; (1f218 <nrfx_spi_xfer+0xf4>)
   1f1c0:	e7db      	b.n	1f17a <nrfx_spi_xfer+0x56>
    nrf_spi_txd_set(p_spi,
   1f1c2:	7fdb      	ldrb	r3, [r3, #31]
   1f1c4:	e7ec      	b.n	1f1a0 <nrfx_spi_xfer+0x7c>
    else if (p_xfer_desc->rx_length > 1)
   1f1c6:	68f3      	ldr	r3, [r6, #12]
   1f1c8:	2b01      	cmp	r3, #1
   1f1ca:	d9f1      	bls.n	1f1b0 <nrfx_spi_xfer+0x8c>
        nrf_spi_txd_set(p_spi, p_cb->orc);
   1f1cc:	2328      	movs	r3, #40	; 0x28
   1f1ce:	fb03 4307 	mla	r3, r3, r7, r4
    p_reg->TXD = data;
   1f1d2:	7fdb      	ldrb	r3, [r3, #31]
   1f1d4:	e7ea      	b.n	1f1ac <nrfx_spi_xfer+0x88>
    spi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f1d6:	eb07 0187 	add.w	r1, r7, r7, lsl #2
   1f1da:	eb04 01c1 	add.w	r1, r4, r1, lsl #3
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   1f1de:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
            while (!nrf_spi_event_check(p_spi, NRF_SPI_EVENT_READY)) {}
   1f1e2:	2b00      	cmp	r3, #0
   1f1e4:	d0fb      	beq.n	1f1de <nrfx_spi_xfer+0xba>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f1e6:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
        } while (transfer_byte(p_spi, p_cb));
   1f1ea:	4628      	mov	r0, r5
   1f1ec:	f8d5 3108 	ldr.w	r3, [r5, #264]	; 0x108
   1f1f0:	f007 fc37 	bl	26a62 <transfer_byte>
   1f1f4:	2800      	cmp	r0, #0
   1f1f6:	d1f2      	bne.n	1f1de <nrfx_spi_xfer+0xba>
        if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f1f8:	2328      	movs	r3, #40	; 0x28
   1f1fa:	fb03 4407 	mla	r4, r3, r7, r4
   1f1fe:	7fa0      	ldrb	r0, [r4, #30]
   1f200:	28ff      	cmp	r0, #255	; 0xff
   1f202:	d0dc      	beq.n	1f1be <nrfx_spi_xfer+0x9a>
            nrf_gpio_pin_set(p_cb->ss_pin);
   1f204:	f007 fc13 	bl	26a2e <nrf_gpio_pin_set>
   1f208:	e7d9      	b.n	1f1be <nrfx_spi_xfer+0x9a>
        return err_code;
   1f20a:	4804      	ldr	r0, [pc, #16]	; (1f21c <nrfx_spi_xfer+0xf8>)
   1f20c:	e7b5      	b.n	1f17a <nrfx_spi_xfer+0x56>
   1f20e:	bf00      	nop
   1f210:	2000eca4 	.word	0x2000eca4
   1f214:	0bad0003 	.word	0x0bad0003
   1f218:	0bad0000 	.word	0x0bad0000
   1f21c:	0bad000b 	.word	0x0bad000b

0001f220 <nrfx_spi_2_irq_handler>:
   1f220:	480c      	ldr	r0, [pc, #48]	; (1f254 <nrfx_spi_2_irq_handler+0x34>)
    NRFX_ASSERT(p_cb->handler);

    nrf_spi_event_clear(p_spi, NRF_SPI_EVENT_READY);
    NRFX_LOG_DEBUG("Event: NRF_SPI_EVENT_READY.");

    if (!transfer_byte(p_spi, p_cb))
   1f222:	490d      	ldr	r1, [pc, #52]	; (1f258 <nrfx_spi_2_irq_handler+0x38>)
   1f224:	2300      	movs	r3, #0
}
#endif

#if NRFX_CHECK(NRFX_SPI2_ENABLED)
void nrfx_spi_2_irq_handler(void)
{
   1f226:	b510      	push	{r4, lr}
   1f228:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1f22c:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
    if (!transfer_byte(p_spi, p_cb))
   1f230:	f007 fc17 	bl	26a62 <transfer_byte>
   1f234:	b968      	cbnz	r0, 1f252 <nrfx_spi_2_irq_handler+0x32>
    if (p_cb->ss_pin != NRFX_SPI_PIN_NOT_USED)
   1f236:	7f88      	ldrb	r0, [r1, #30]
   1f238:	28ff      	cmp	r0, #255	; 0xff
   1f23a:	d001      	beq.n	1f240 <nrfx_spi_2_irq_handler+0x20>
        nrf_gpio_pin_set(p_cb->ss_pin);
   1f23c:	f007 fbf7 	bl	26a2e <nrf_gpio_pin_set>
    p_cb->transfer_in_progress = false;
   1f240:	2300      	movs	r3, #0
    p_cb->evt.type = NRFX_SPI_EVENT_DONE;
   1f242:	720b      	strb	r3, [r1, #8]
    p_cb->transfer_in_progress = false;
   1f244:	774b      	strb	r3, [r1, #29]
    irq_handler(NRF_SPI2, &m_cb[NRFX_SPI2_INST_IDX]);
}
   1f246:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    p_cb->handler(&p_cb->evt, p_cb->p_context);
   1f24a:	e9d1 3100 	ldrd	r3, r1, [r1]
   1f24e:	4803      	ldr	r0, [pc, #12]	; (1f25c <nrfx_spi_2_irq_handler+0x3c>)
   1f250:	4718      	bx	r3
}
   1f252:	bd10      	pop	{r4, pc}
   1f254:	40023000 	.word	0x40023000
   1f258:	2000eca4 	.word	0x2000eca4
   1f25c:	2000ecac 	.word	0x2000ecac

0001f260 <twi_tx_start_transfer>:
    return true;
}

static nrfx_err_t twi_tx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1f260:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1f262:	4b30      	ldr	r3, [pc, #192]	; (1f324 <twi_tx_start_transfer+0xc4>)
   1f264:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f266:	2300      	movs	r3, #0
   1f268:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1f26c:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1f270:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1f274:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1f278:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1f27c:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1f280:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1f284:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
}

NRF_STATIC_INLINE void nrf_twi_shorts_set(NRF_TWI_Type * p_reg,
                                          uint32_t       mask)
{
    p_reg->SHORTS = mask;
   1f288:	f8c0 3200 	str.w	r3, [r0, #512]	; 0x200
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);
    nrf_twi_shorts_set(p_twi, 0);

    p_cb->bytes_transferred = 0;
   1f28c:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1f28e:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f292:	2301      	movs	r3, #1
   1f294:	6203      	str	r3, [r0, #32]

    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1f296:	f891 202d 	ldrb.w	r2, [r1, #45]	; 0x2d
{
   1f29a:	460d      	mov	r5, r1
    if (p_cb->prev_suspend != TWI_SUSPEND_TX)
   1f29c:	429a      	cmp	r2, r3
   1f29e:	bf18      	it	ne
   1f2a0:	6083      	strne	r3, [r0, #8]
{
   1f2a2:	4604      	mov	r4, r0
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTTX);
    }

    (void)twi_send_byte(p_twi, p_cb);
   1f2a4:	f007 fc10 	bl	26ac8 <twi_send_byte>

    if (p_cb->handler)
   1f2a8:	682b      	ldr	r3, [r5, #0]
   1f2aa:	b183      	cbz	r3, 1f2ce <twi_tx_start_transfer+0x6e>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1f2ac:	f240 2386 	movw	r3, #646	; 0x286
   1f2b0:	60ab      	str	r3, [r5, #8]
                         NRF_TWI_INT_ERROR_MASK     |
                         NRF_TWI_INT_TXDSENT_MASK   |
                         NRF_TWI_INT_RXDREADY_MASK;

        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1f2b2:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f2b4:	481c      	ldr	r0, [pc, #112]	; (1f328 <twi_tx_start_transfer+0xc8>)
    p_reg->INTENSET = mask;
   1f2b6:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            ret_code = NRFX_ERROR_INTERNAL;
        }

    }
    return ret_code;
}
   1f2ba:	b003      	add	sp, #12
   1f2bc:	bd30      	pop	{r4, r5, pc}
               twi_transfer(p_twi, p_cb))
   1f2be:	4629      	mov	r1, r5
   1f2c0:	4620      	mov	r0, r4
   1f2c2:	f007 fc1e 	bl	26b02 <twi_transfer>
        while ((hw_timeout > 0) &&
   1f2c6:	b128      	cbz	r0, 1f2d4 <twi_tx_start_transfer+0x74>
            hw_timeout--;
   1f2c8:	9b01      	ldr	r3, [sp, #4]
   1f2ca:	3b01      	subs	r3, #1
   1f2cc:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1f2ce:	9b01      	ldr	r3, [sp, #4]
   1f2d0:	2b00      	cmp	r3, #0
   1f2d2:	dcf4      	bgt.n	1f2be <twi_tx_start_transfer+0x5e>
        if (p_cb->error)
   1f2d4:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1f2d8:	b95b      	cbnz	r3, 1f2f2 <twi_tx_start_transfer+0x92>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f2da:	4813      	ldr	r0, [pc, #76]	; (1f328 <twi_tx_start_transfer+0xc8>)
        if (hw_timeout <= 0)
   1f2dc:	9b01      	ldr	r3, [sp, #4]
   1f2de:	2b00      	cmp	r3, #0
   1f2e0:	dceb      	bgt.n	1f2ba <twi_tx_start_transfer+0x5a>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1f2e2:	2300      	movs	r3, #0
   1f2e4:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1f2e8:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1f2ea:	4810      	ldr	r0, [pc, #64]	; (1f32c <twi_tx_start_transfer+0xcc>)
   1f2ec:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1f2f0:	e7e3      	b.n	1f2ba <twi_tx_start_transfer+0x5a>
    uint32_t error_source = p_reg->ERRORSRC;
   1f2f2:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1f2f6:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1f2fa:	b18b      	cbz	r3, 1f320 <twi_tx_start_transfer+0xc0>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1f2fc:	4a0c      	ldr	r2, [pc, #48]	; (1f330 <twi_tx_start_transfer+0xd0>)
   1f2fe:	480b      	ldr	r0, [pc, #44]	; (1f32c <twi_tx_start_transfer+0xcc>)
   1f300:	f013 0f01 	tst.w	r3, #1
   1f304:	bf18      	it	ne
   1f306:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1f308:	f013 0f02 	tst.w	r3, #2
   1f30c:	f102 0201 	add.w	r2, r2, #1
   1f310:	bf18      	it	ne
   1f312:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1f314:	f013 0f04 	tst.w	r3, #4
   1f318:	4b06      	ldr	r3, [pc, #24]	; (1f334 <twi_tx_start_transfer+0xd4>)
   1f31a:	bf18      	it	ne
   1f31c:	4618      	movne	r0, r3
   1f31e:	e7dd      	b.n	1f2dc <twi_tx_start_transfer+0x7c>
                ret_code = NRFX_ERROR_INTERNAL;
   1f320:	4802      	ldr	r0, [pc, #8]	; (1f32c <twi_tx_start_transfer+0xcc>)
   1f322:	e7db      	b.n	1f2dc <twi_tx_start_transfer+0x7c>
   1f324:	000186a0 	.word	0x000186a0
   1f328:	0bad0000 	.word	0x0bad0000
   1f32c:	0bad0001 	.word	0x0bad0001
   1f330:	0bae0000 	.word	0x0bae0000
   1f334:	0bae0002 	.word	0x0bae0002

0001f338 <twi_rx_start_transfer>:

static nrfx_err_t twi_rx_start_transfer(NRF_TWI_Type        * p_twi,
                                        twi_control_block_t * p_cb)
{
   1f338:	b537      	push	{r0, r1, r2, r4, r5, lr}
    nrfx_err_t ret_code = NRFX_SUCCESS;
    volatile int32_t hw_timeout;

    hw_timeout = HW_TIMEOUT;
   1f33a:	4b34      	ldr	r3, [pc, #208]	; (1f40c <twi_rx_start_transfer+0xd4>)
   1f33c:	9301      	str	r3, [sp, #4]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   1f33e:	2300      	movs	r3, #0
   1f340:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   1f344:	f8d0 2104 	ldr.w	r2, [r0, #260]	; 0x104
   1f348:	f8c0 3124 	str.w	r3, [r0, #292]	; 0x124
   1f34c:	f8d0 2124 	ldr.w	r2, [r0, #292]	; 0x124
   1f350:	f8c0 311c 	str.w	r3, [r0, #284]	; 0x11c
   1f354:	f8d0 211c 	ldr.w	r2, [r0, #284]	; 0x11c
   1f358:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   1f35c:	f8d0 2108 	ldr.w	r2, [r0, #264]	; 0x108
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_STOPPED);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_ERROR);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_TXDSENT);
    nrf_twi_event_clear(p_twi, NRF_TWI_EVENT_RXDREADY);

    p_cb->bytes_transferred = 0;
   1f360:	634b      	str	r3, [r1, #52]	; 0x34
    p_cb->error             = false;
   1f362:	f881 302f 	strb.w	r3, [r1, #47]	; 0x2f

    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1f366:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   1f368:	2b01      	cmp	r3, #1
{
   1f36a:	4604      	mov	r4, r0
   1f36c:	460d      	mov	r5, r1
    if ((p_cb->curr_length == 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   1f36e:	d117      	bne.n	1f3a0 <twi_rx_start_transfer+0x68>
   1f370:	6a0b      	ldr	r3, [r1, #32]
   1f372:	065b      	lsls	r3, r3, #25
   1f374:	d414      	bmi.n	1f3a0 <twi_rx_start_transfer+0x68>
    p_reg->SHORTS = mask;
   1f376:	2302      	movs	r3, #2
   1f378:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   1f37c:	2301      	movs	r3, #1
   1f37e:	6223      	str	r3, [r4, #32]
        nrf_twi_shorts_set(p_twi, NRF_TWI_SHORT_BB_SUSPEND_MASK);
    }
    // In case TWI is suspended resume its operation.
    nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_RESUME);

    if (p_cb->prev_suspend != TWI_SUSPEND_RX)
   1f380:	f895 202d 	ldrb.w	r2, [r5, #45]	; 0x2d
   1f384:	2a02      	cmp	r2, #2
   1f386:	bf18      	it	ne
   1f388:	6023      	strne	r3, [r4, #0]
    {
        nrf_twi_task_trigger(p_twi, NRF_TWI_TASK_STARTRX);
    }

    if (p_cb->handler)
   1f38a:	682b      	ldr	r3, [r5, #0]
   1f38c:	b193      	cbz	r3, 1f3b4 <twi_rx_start_transfer+0x7c>
    {
        p_cb->int_mask = NRF_TWI_INT_STOPPED_MASK   |
   1f38e:	f240 2386 	movw	r3, #646	; 0x286
   1f392:	60ab      	str	r3, [r5, #8]
                        NRF_TWI_INT_ERROR_MASK     |
                        NRF_TWI_INT_TXDSENT_MASK   |
                        NRF_TWI_INT_RXDREADY_MASK;
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1f394:	68ab      	ldr	r3, [r5, #8]
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f396:	481e      	ldr	r0, [pc, #120]	; (1f410 <twi_rx_start_transfer+0xd8>)
    p_reg->INTENSET = mask;
   1f398:	f8c4 3304 	str.w	r3, [r4, #772]	; 0x304
            nrf_twi_enable(p_twi);
            ret_code = NRFX_ERROR_INTERNAL;
        }
    }
    return ret_code;
}
   1f39c:	b003      	add	sp, #12
   1f39e:	bd30      	pop	{r4, r5, pc}
    p_reg->SHORTS = mask;
   1f3a0:	2301      	movs	r3, #1
   1f3a2:	e7e9      	b.n	1f378 <twi_rx_start_transfer+0x40>
               twi_transfer(p_twi, p_cb))
   1f3a4:	4629      	mov	r1, r5
   1f3a6:	4620      	mov	r0, r4
   1f3a8:	f007 fbab 	bl	26b02 <twi_transfer>
        while ((hw_timeout > 0) &&
   1f3ac:	b128      	cbz	r0, 1f3ba <twi_rx_start_transfer+0x82>
               hw_timeout--;
   1f3ae:	9b01      	ldr	r3, [sp, #4]
   1f3b0:	3b01      	subs	r3, #1
   1f3b2:	9301      	str	r3, [sp, #4]
        while ((hw_timeout > 0) &&
   1f3b4:	9b01      	ldr	r3, [sp, #4]
   1f3b6:	2b00      	cmp	r3, #0
   1f3b8:	dcf4      	bgt.n	1f3a4 <twi_rx_start_transfer+0x6c>
        if (p_cb->error)
   1f3ba:	f895 302f 	ldrb.w	r3, [r5, #47]	; 0x2f
   1f3be:	b95b      	cbnz	r3, 1f3d8 <twi_rx_start_transfer+0xa0>
    nrfx_err_t ret_code = NRFX_SUCCESS;
   1f3c0:	4813      	ldr	r0, [pc, #76]	; (1f410 <twi_rx_start_transfer+0xd8>)
        if (hw_timeout <= 0)
   1f3c2:	9b01      	ldr	r3, [sp, #4]
   1f3c4:	2b00      	cmp	r3, #0
   1f3c6:	dce9      	bgt.n	1f39c <twi_rx_start_transfer+0x64>
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1f3c8:	2300      	movs	r3, #0
   1f3ca:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1f3ce:	2305      	movs	r3, #5
            ret_code = NRFX_ERROR_INTERNAL;
   1f3d0:	4810      	ldr	r0, [pc, #64]	; (1f414 <twi_rx_start_transfer+0xdc>)
   1f3d2:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
    return ret_code;
   1f3d6:	e7e1      	b.n	1f39c <twi_rx_start_transfer+0x64>
    uint32_t error_source = p_reg->ERRORSRC;
   1f3d8:	f8d4 34c4 	ldr.w	r3, [r4, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1f3dc:	f8c4 34c4 	str.w	r3, [r4, #1220]	; 0x4c4
            if (errorsrc)
   1f3e0:	b18b      	cbz	r3, 1f406 <twi_rx_start_transfer+0xce>
        ret = NRFX_ERROR_DRV_TWI_ERR_OVERRUN;
   1f3e2:	4a0d      	ldr	r2, [pc, #52]	; (1f418 <twi_rx_start_transfer+0xe0>)
   1f3e4:	480b      	ldr	r0, [pc, #44]	; (1f414 <twi_rx_start_transfer+0xdc>)
   1f3e6:	f013 0f01 	tst.w	r3, #1
   1f3ea:	bf18      	it	ne
   1f3ec:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_ANACK;
   1f3ee:	f013 0f02 	tst.w	r3, #2
   1f3f2:	f102 0201 	add.w	r2, r2, #1
   1f3f6:	bf18      	it	ne
   1f3f8:	4610      	movne	r0, r2
        ret = NRFX_ERROR_DRV_TWI_ERR_DNACK;
   1f3fa:	f013 0f04 	tst.w	r3, #4
   1f3fe:	4b07      	ldr	r3, [pc, #28]	; (1f41c <twi_rx_start_transfer+0xe4>)
   1f400:	bf18      	it	ne
   1f402:	4618      	movne	r0, r3
   1f404:	e7dd      	b.n	1f3c2 <twi_rx_start_transfer+0x8a>
                ret_code = NRFX_ERROR_INTERNAL;
   1f406:	4803      	ldr	r0, [pc, #12]	; (1f414 <twi_rx_start_transfer+0xdc>)
   1f408:	e7db      	b.n	1f3c2 <twi_rx_start_transfer+0x8a>
   1f40a:	bf00      	nop
   1f40c:	000186a0 	.word	0x000186a0
   1f410:	0bad0000 	.word	0x0bad0000
   1f414:	0bad0001 	.word	0x0bad0001
   1f418:	0bae0000 	.word	0x0bae0000
   1f41c:	0bae0002 	.word	0x0bae0002

0001f420 <nrfx_twi_init>:
{
   1f420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    twi_control_block_t * p_cb  = &m_cb[p_instance->drv_inst_idx];
   1f424:	f890 8004 	ldrb.w	r8, [r0, #4]
    if (p_cb->state != NRFX_DRV_STATE_UNINITIALIZED)
   1f428:	4d25      	ldr	r5, [pc, #148]	; (1f4c0 <nrfx_twi_init+0xa0>)
   1f42a:	273c      	movs	r7, #60	; 0x3c
   1f42c:	fb07 f708 	mul.w	r7, r7, r8
   1f430:	19ec      	adds	r4, r5, r7
   1f432:	f894 602e 	ldrb.w	r6, [r4, #46]	; 0x2e
   1f436:	2e00      	cmp	r6, #0
   1f438:	d13f      	bne.n	1f4ba <nrfx_twi_init+0x9a>
    p_cb->int_mask        = 0;
   1f43a:	60a6      	str	r6, [r4, #8]
    p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1f43c:	f884 602d 	strb.w	r6, [r4, #45]	; 0x2d
    p_cb->busy            = false;
   1f440:	f884 6030 	strb.w	r6, [r4, #48]	; 0x30
    p_cb->repeated        = false;
   1f444:	f884 6031 	strb.w	r6, [r4, #49]	; 0x31
    TWI_PIN_INIT(p_config->scl);
   1f448:	680e      	ldr	r6, [r1, #0]
    p_cb->p_context       = p_context;
   1f44a:	6063      	str	r3, [r4, #4]
    p_cb->hold_bus_uninit = p_config->hold_bus_uninit;
   1f44c:	7b4b      	ldrb	r3, [r1, #13]
   1f44e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
    p_cb->handler         = event_handler;
   1f452:	51ea      	str	r2, [r5, r7]
        case 1: return NRF_P1;
   1f454:	4b1b      	ldr	r3, [pc, #108]	; (1f4c4 <nrfx_twi_init+0xa4>)
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1f456:	6800      	ldr	r0, [r0, #0]
    return pin_number >> 5;
   1f458:	0977      	lsrs	r7, r6, #5
        case 1: return NRF_P1;
   1f45a:	2f01      	cmp	r7, #1
    *p_pin = pin_number & 0x1F;
   1f45c:	f006 041f 	and.w	r4, r6, #31
        case 1: return NRF_P1;
   1f460:	bf0c      	ite	eq
   1f462:	461f      	moveq	r7, r3
   1f464:	f04f 47a0 	movne.w	r7, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f468:	f504 74e0 	add.w	r4, r4, #448	; 0x1c0
   1f46c:	f240 6c0c 	movw	ip, #1548	; 0x60c
   1f470:	f847 c024 	str.w	ip, [r7, r4, lsl #2]
    TWI_PIN_INIT(p_config->sda);
   1f474:	684c      	ldr	r4, [r1, #4]
    return pin_number >> 5;
   1f476:	ea4f 1e54 	mov.w	lr, r4, lsr #5
    *p_pin = pin_number & 0x1F;
   1f47a:	f004 071f 	and.w	r7, r4, #31
        case 1: return NRF_P1;
   1f47e:	f1be 0f01 	cmp.w	lr, #1
   1f482:	bf18      	it	ne
   1f484:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
    reg->PIN_CNF[pin_number] = ((uint32_t)dir << GPIO_PIN_CNF_DIR_Pos)
   1f488:	f507 77e0 	add.w	r7, r7, #448	; 0x1c0
   1f48c:	f843 c027 	str.w	ip, [r3, r7, lsl #2]
        (nrf_twi_frequency_t)p_config->frequency);
   1f490:	688b      	ldr	r3, [r1, #8]
    p_reg->PSEL.SCL = scl_pin;
   1f492:	f8c0 6508 	str.w	r6, [r0, #1288]	; 0x508
    p_reg->PSEL.SDA = sda_pin;
   1f496:	f8c0 450c 	str.w	r4, [r0, #1292]	; 0x50c
    p_reg->FREQUENCY = frequency;
   1f49a:	f8c0 3524 	str.w	r3, [r0, #1316]	; 0x524
    if (p_cb->handler)
   1f49e:	b11a      	cbz	r2, 1f4a8 <nrfx_twi_init+0x88>
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(p_instance->p_twi));
   1f4a0:	f340 3007 	sbfx	r0, r0, #12, #8
   1f4a4:	f7e8 f952 	bl	774c <arch_irq_enable>
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f4a8:	233c      	movs	r3, #60	; 0x3c
   1f4aa:	fb03 5508 	mla	r5, r3, r8, r5
    return err_code;
   1f4ae:	4806      	ldr	r0, [pc, #24]	; (1f4c8 <nrfx_twi_init+0xa8>)
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f4b0:	2301      	movs	r3, #1
   1f4b2:	f885 302e 	strb.w	r3, [r5, #46]	; 0x2e
}
   1f4b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        return err_code;
   1f4ba:	4804      	ldr	r0, [pc, #16]	; (1f4cc <nrfx_twi_init+0xac>)
   1f4bc:	e7fb      	b.n	1f4b6 <nrfx_twi_init+0x96>
   1f4be:	bf00      	nop
   1f4c0:	2000eccc 	.word	0x2000eccc
   1f4c4:	50000300 	.word	0x50000300
   1f4c8:	0bad0000 	.word	0x0bad0000
   1f4cc:	0bad0005 	.word	0x0bad0005

0001f4d0 <nrfx_twi_enable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1f4d0:	6803      	ldr	r3, [r0, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f4d2:	7902      	ldrb	r2, [r0, #4]
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   1f4d4:	2105      	movs	r1, #5
   1f4d6:	f8c3 1500 	str.w	r1, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_POWERED_ON;
   1f4da:	4b04      	ldr	r3, [pc, #16]	; (1f4ec <nrfx_twi_enable+0x1c>)
   1f4dc:	213c      	movs	r1, #60	; 0x3c
   1f4de:	fb01 3302 	mla	r3, r1, r2, r3
   1f4e2:	2202      	movs	r2, #2
   1f4e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1f4e8:	4770      	bx	lr
   1f4ea:	bf00      	nop
   1f4ec:	2000eccc 	.word	0x2000eccc

0001f4f0 <nrfx_twi_disable>:
    NRF_TWI_Type * p_twi = p_instance->p_twi;
   1f4f0:	6803      	ldr	r3, [r0, #0]
    p_reg->INTENCLR = mask;
   1f4f2:	4a0a      	ldr	r2, [pc, #40]	; (1f51c <nrfx_twi_disable+0x2c>)
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f4f4:	7901      	ldrb	r1, [r0, #4]
   1f4f6:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    p_reg->SHORTS &= ~(mask);
   1f4fa:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
   1f4fe:	f022 0203 	bic.w	r2, r2, #3
   1f502:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   1f506:	2200      	movs	r2, #0
   1f508:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    p_cb->state = NRFX_DRV_STATE_INITIALIZED;
   1f50c:	4b04      	ldr	r3, [pc, #16]	; (1f520 <nrfx_twi_disable+0x30>)
   1f50e:	223c      	movs	r2, #60	; 0x3c
   1f510:	fb02 3301 	mla	r3, r2, r1, r3
   1f514:	2201      	movs	r2, #1
   1f516:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
}
   1f51a:	4770      	bx	lr
   1f51c:	00044286 	.word	0x00044286
   1f520:	2000eccc 	.word	0x2000eccc

0001f524 <nrfx_twi_xfer>:
}

nrfx_err_t nrfx_twi_xfer(nrfx_twi_t const *           p_instance,
                         nrfx_twi_xfer_desc_t const * p_xfer_desc,
                         uint32_t                     flags)
{
   1f524:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f528:	4f31      	ldr	r7, [pc, #196]	; (1f5f0 <nrfx_twi_xfer+0xcc>)

    nrfx_err_t err_code = NRFX_SUCCESS;
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f52a:	7904      	ldrb	r4, [r0, #4]
                           p_xfer_desc->primary_length * sizeof(p_xfer_desc->p_primary_buf[0]));
    NRFX_LOG_DEBUG("Secondary buffer data:");
    NRFX_LOG_HEXDUMP_DEBUG(p_xfer_desc->p_secondary_buf,
                           p_xfer_desc->secondary_length * sizeof(p_xfer_desc->p_secondary_buf[0]));

    err_code = twi_xfer((NRF_TWI_Type  *)p_instance->p_twi, p_cb, p_xfer_desc, flags);
   1f52c:	f8d0 9000 	ldr.w	r9, [r0]
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f530:	233c      	movs	r3, #60	; 0x3c
   1f532:	fb03 7304 	mla	r3, r3, r4, r7
{
   1f536:	460d      	mov	r5, r1
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f538:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
   1f53c:	2b01      	cmp	r3, #1
{
   1f53e:	4694      	mov	ip, r2
    if ((p_cb->prev_suspend == TWI_SUSPEND_TX) && (p_xfer_desc->type == NRFX_TWI_XFER_RX))
   1f540:	d104      	bne.n	1f54c <nrfx_twi_xfer+0x28>
   1f542:	780b      	ldrb	r3, [r1, #0]
   1f544:	2b01      	cmp	r3, #1
   1f546:	d106      	bne.n	1f556 <nrfx_twi_xfer+0x32>
        return NRFX_ERROR_INVALID_STATE;
   1f548:	482a      	ldr	r0, [pc, #168]	; (1f5f4 <nrfx_twi_xfer+0xd0>)
    NRFX_LOG_WARNING("Function: %s, error code: %s.",
                     __func__,
                     NRFX_LOG_ERROR_STRING_GET(err_code));
    return err_code;
   1f54a:	e011      	b.n	1f570 <nrfx_twi_xfer+0x4c>
    else if ((p_cb->prev_suspend == TWI_SUSPEND_RX) && (p_xfer_desc->type != NRFX_TWI_XFER_RX))
   1f54c:	2b02      	cmp	r3, #2
   1f54e:	d102      	bne.n	1f556 <nrfx_twi_xfer+0x32>
   1f550:	780b      	ldrb	r3, [r1, #0]
   1f552:	2b01      	cmp	r3, #1
   1f554:	d1f8      	bne.n	1f548 <nrfx_twi_xfer+0x24>
    if (p_cb->busy)
   1f556:	263c      	movs	r6, #60	; 0x3c
    p_reg->INTENCLR = mask;
   1f558:	4b27      	ldr	r3, [pc, #156]	; (1f5f8 <nrfx_twi_xfer+0xd4>)
   1f55a:	f8c9 3308 	str.w	r3, [r9, #776]	; 0x308
   1f55e:	fb06 7604 	mla	r6, r6, r4, r7
   1f562:	f896 3030 	ldrb.w	r3, [r6, #48]	; 0x30
   1f566:	b12b      	cbz	r3, 1f574 <nrfx_twi_xfer+0x50>
        nrf_twi_int_enable(p_twi, p_cb->int_mask);
   1f568:	68b3      	ldr	r3, [r6, #8]
        return err_code;
   1f56a:	4824      	ldr	r0, [pc, #144]	; (1f5fc <nrfx_twi_xfer+0xd8>)
    p_reg->INTENSET = mask;
   1f56c:	f8c9 3304 	str.w	r3, [r9, #772]	; 0x304
}
   1f570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        p_cb->busy = (TWI_FLAG_NO_HANDLER_IN_USE(flags)) ? false : true;
   1f574:	f08c 0304 	eor.w	r3, ip, #4
   1f578:	f3c3 0380 	ubfx	r3, r3, #2, #1
   1f57c:	f886 3030 	strb.w	r3, [r6, #48]	; 0x30
    p_cb->flags       = flags;
   1f580:	f8c6 c020 	str.w	ip, [r6, #32]
    p_cb->xfer_desc   = *p_xfer_desc;
   1f584:	46a8      	mov	r8, r5
   1f586:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
   1f58a:	f106 0e0c 	add.w	lr, r6, #12
   1f58e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f592:	f8d8 3000 	ldr.w	r3, [r8]
   1f596:	f8ce 3000 	str.w	r3, [lr]
    p_cb->curr_length = p_xfer_desc->primary_length;
   1f59a:	686b      	ldr	r3, [r5, #4]
   1f59c:	62b3      	str	r3, [r6, #40]	; 0x28
    p_cb->p_curr_buf  = p_xfer_desc->p_primary_buf;
   1f59e:	68eb      	ldr	r3, [r5, #12]
   1f5a0:	6273      	str	r3, [r6, #36]	; 0x24
    p_reg->ADDRESS = address;
   1f5a2:	786b      	ldrb	r3, [r5, #1]
   1f5a4:	f8c9 3588 	str.w	r3, [r9, #1416]	; 0x588
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1f5a8:	782b      	ldrb	r3, [r5, #0]
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f5aa:	ebc4 1a04 	rsb	sl, r4, r4, lsl #4
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1f5ae:	2b01      	cmp	r3, #1
    twi_control_block_t * p_cb = &m_cb[p_instance->drv_inst_idx];
   1f5b0:	eb07 0a8a 	add.w	sl, r7, sl, lsl #2
    if (p_xfer_desc->type != NRFX_TWI_XFER_RX)
   1f5b4:	d017      	beq.n	1f5e6 <nrfx_twi_xfer+0xc2>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1f5b6:	b99b      	cbnz	r3, 1f5e0 <nrfx_twi_xfer+0xbc>
   1f5b8:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_tx_no_stop = ((p_xfer_desc->type == NRFX_TWI_XFER_TX) &&
   1f5bc:	233c      	movs	r3, #60	; 0x3c
   1f5be:	fb03 7304 	mla	r3, r3, r4, r7
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1f5c2:	4651      	mov	r1, sl
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1f5c4:	f883 c02c 	strb.w	ip, [r3, #44]	; 0x2c
        err_code = twi_tx_start_transfer(p_twi, p_cb);
   1f5c8:	4648      	mov	r0, r9
   1f5ca:	f7ff fe49 	bl	1f260 <twi_tx_start_transfer>
    if (p_cb->handler == NULL)
   1f5ce:	233c      	movs	r3, #60	; 0x3c
   1f5d0:	435c      	muls	r4, r3
   1f5d2:	193a      	adds	r2, r7, r4
   1f5d4:	593b      	ldr	r3, [r7, r4]
   1f5d6:	2b00      	cmp	r3, #0
   1f5d8:	d1ca      	bne.n	1f570 <nrfx_twi_xfer+0x4c>
        p_cb->busy = false;
   1f5da:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
   1f5de:	e7c7      	b.n	1f570 <nrfx_twi_xfer+0x4c>
                                 !(flags & NRFX_TWI_FLAG_TX_NO_STOP)) ? false : true;
   1f5e0:	f04f 0c01 	mov.w	ip, #1
   1f5e4:	e7ea      	b.n	1f5bc <nrfx_twi_xfer+0x98>
        err_code = twi_rx_start_transfer(p_twi, p_cb);
   1f5e6:	4651      	mov	r1, sl
   1f5e8:	4648      	mov	r0, r9
   1f5ea:	f7ff fea5 	bl	1f338 <twi_rx_start_transfer>
   1f5ee:	e7ee      	b.n	1f5ce <nrfx_twi_xfer+0xaa>
   1f5f0:	2000eccc 	.word	0x2000eccc
   1f5f4:	0bad0005 	.word	0x0bad0005
   1f5f8:	00044286 	.word	0x00044286
   1f5fc:	0bad000b 	.word	0x0bad000b

0001f600 <nrfx_twi_0_irq_handler>:

}

#if NRFX_CHECK(NRFX_TWI0_ENABLED)
void nrfx_twi_0_irq_handler(void)
{
   1f600:	b5f0      	push	{r4, r5, r6, r7, lr}
    if (twi_transfer(p_twi, p_cb))
   1f602:	4c2b      	ldr	r4, [pc, #172]	; (1f6b0 <nrfx_twi_0_irq_handler+0xb0>)
   1f604:	482b      	ldr	r0, [pc, #172]	; (1f6b4 <nrfx_twi_0_irq_handler+0xb4>)
{
   1f606:	b087      	sub	sp, #28
    if (twi_transfer(p_twi, p_cb))
   1f608:	4621      	mov	r1, r4
   1f60a:	f007 fa7a 	bl	26b02 <twi_transfer>
   1f60e:	2800      	cmp	r0, #0
   1f610:	d140      	bne.n	1f694 <nrfx_twi_0_irq_handler+0x94>
    if (!p_cb->error &&
   1f612:	f894 702f 	ldrb.w	r7, [r4, #47]	; 0x2f
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1f616:	f8d4 c020 	ldr.w	ip, [r4, #32]
    if (!p_cb->error &&
   1f61a:	b9ff      	cbnz	r7, 1f65c <nrfx_twi_0_irq_handler+0x5c>
        ((p_cb->xfer_desc.type == NRFX_TWI_XFER_TXRX) ||
   1f61c:	7b23      	ldrb	r3, [r4, #12]
    if (!p_cb->error &&
   1f61e:	1e9a      	subs	r2, r3, #2
   1f620:	2a01      	cmp	r2, #1
   1f622:	d81b      	bhi.n	1f65c <nrfx_twi_0_irq_handler+0x5c>
         (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)) &&
   1f624:	6a61      	ldr	r1, [r4, #36]	; 0x24
   1f626:	69a2      	ldr	r2, [r4, #24]
   1f628:	4291      	cmp	r1, r2
   1f62a:	d117      	bne.n	1f65c <nrfx_twi_0_irq_handler+0x5c>
        p_cb->p_curr_buf      = p_cb->xfer_desc.p_secondary_buf;
   1f62c:	69e2      	ldr	r2, [r4, #28]
   1f62e:	6262      	str	r2, [r4, #36]	; 0x24
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1f630:	f3cc 1c40 	ubfx	ip, ip, #5, #1
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1f634:	6962      	ldr	r2, [r4, #20]
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1f636:	481f      	ldr	r0, [pc, #124]	; (1f6b4 <nrfx_twi_0_irq_handler+0xb4>)
        p_cb->curr_length     = p_cb->xfer_desc.secondary_length;
   1f638:	62a2      	str	r2, [r4, #40]	; 0x28
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1f63a:	2b03      	cmp	r3, #3
        p_cb->curr_tx_no_stop = (p_cb->flags & NRFX_TWI_FLAG_TX_NO_STOP);
   1f63c:	f884 c02c 	strb.w	ip, [r4, #44]	; 0x2c
        p_cb->prev_suspend    = TWI_NO_SUSPEND;
   1f640:	f884 702d 	strb.w	r7, [r4, #45]	; 0x2d
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1f644:	4621      	mov	r1, r4
        if (p_cb->xfer_desc.type == NRFX_TWI_XFER_TXTX)
   1f646:	d104      	bne.n	1f652 <nrfx_twi_0_irq_handler+0x52>
    twi_irq_handler(NRF_TWI0, &m_cb[NRFX_TWI0_INST_IDX]);
}
   1f648:	b007      	add	sp, #28
   1f64a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_tx_start_transfer(p_twi, p_cb);
   1f64e:	f7ff be07 	b.w	1f260 <twi_tx_start_transfer>
}
   1f652:	b007      	add	sp, #28
   1f654:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
            (void)twi_rx_start_transfer(p_twi, p_cb);
   1f658:	f7ff be6e 	b.w	1f338 <twi_rx_start_transfer>
        event.xfer_desc = p_cb->xfer_desc;
   1f65c:	4e16      	ldr	r6, [pc, #88]	; (1f6b8 <nrfx_twi_0_irq_handler+0xb8>)
   1f65e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f660:	ad01      	add	r5, sp, #4
   1f662:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f664:	6833      	ldr	r3, [r6, #0]
   1f666:	602b      	str	r3, [r5, #0]
        if (p_cb->error)
   1f668:	b1ff      	cbz	r7, 1f6aa <nrfx_twi_0_irq_handler+0xaa>
    uint32_t error_source = p_reg->ERRORSRC;
   1f66a:	4a12      	ldr	r2, [pc, #72]	; (1f6b4 <nrfx_twi_0_irq_handler+0xb4>)
   1f66c:	f8d2 34c4 	ldr.w	r3, [r2, #1220]	; 0x4c4
    p_reg->ERRORSRC = error_source;
   1f670:	f8c2 34c4 	str.w	r3, [r2, #1220]	; 0x4c4
            if (errorsrc & NRF_TWI_ERROR_ADDRESS_NACK)
   1f674:	0799      	lsls	r1, r3, #30
   1f676:	d50f      	bpl.n	1f698 <nrfx_twi_0_irq_handler+0x98>
                event.type = NRFX_TWI_EVT_ADDRESS_NACK;
   1f678:	2301      	movs	r3, #1
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1f67a:	f88d 3000 	strb.w	r3, [sp]
        p_cb->busy = false;
   1f67e:	2300      	movs	r3, #0
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1f680:	f01c 0f04 	tst.w	ip, #4
        p_cb->busy = false;
   1f684:	f884 3030 	strb.w	r3, [r4, #48]	; 0x30
        if (!(TWI_FLAG_NO_HANDLER_IN_USE(p_cb->flags)) || p_cb->error)
   1f688:	d000      	beq.n	1f68c <nrfx_twi_0_irq_handler+0x8c>
   1f68a:	b11f      	cbz	r7, 1f694 <nrfx_twi_0_irq_handler+0x94>
            p_cb->handler(&event, p_cb->p_context);
   1f68c:	e9d4 3100 	ldrd	r3, r1, [r4]
   1f690:	4668      	mov	r0, sp
   1f692:	4798      	blx	r3
}
   1f694:	b007      	add	sp, #28
   1f696:	bdf0      	pop	{r4, r5, r6, r7, pc}
            else if (errorsrc & NRF_TWI_ERROR_DATA_NACK)
   1f698:	075a      	lsls	r2, r3, #29
   1f69a:	d501      	bpl.n	1f6a0 <nrfx_twi_0_irq_handler+0xa0>
                event.type = NRFX_TWI_EVT_DATA_NACK;
   1f69c:	2302      	movs	r3, #2
   1f69e:	e7ec      	b.n	1f67a <nrfx_twi_0_irq_handler+0x7a>
            else if (errorsrc & NRF_TWI_ERROR_OVERRUN)
   1f6a0:	07db      	lsls	r3, r3, #31
                event.type = NRFX_TWI_EVT_OVERRUN;
   1f6a2:	bf4c      	ite	mi
   1f6a4:	2303      	movmi	r3, #3
                event.type = NRFX_TWI_EVT_BUS_ERROR;
   1f6a6:	2304      	movpl	r3, #4
   1f6a8:	e7e7      	b.n	1f67a <nrfx_twi_0_irq_handler+0x7a>
            event.type = NRFX_TWI_EVT_DONE;
   1f6aa:	f88d 7000 	strb.w	r7, [sp]
            NRFX_LOG_DEBUG("Event: %s.", EVT_TO_STR(NRFX_TWI_EVT_DONE));
   1f6ae:	e7e6      	b.n	1f67e <nrfx_twi_0_irq_handler+0x7e>
   1f6b0:	2000eccc 	.word	0x2000eccc
   1f6b4:	40003000 	.word	0x40003000
   1f6b8:	2000ecd8 	.word	0x2000ecd8

0001f6bc <z_sys_init_run_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void z_sys_init_run_level(int32_t level)
{
   1f6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		/* End marker */
		__init_end,
	};
	const struct init_entry *entry;

	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f6be:	4b10      	ldr	r3, [pc, #64]	; (1f700 <z_sys_init_run_level+0x44>)
			/* Initialization failed.
			 * Set the init status bit so device is not declared ready.
			 */
			sys_bitfield_set_bit(
				(mem_addr_t) __device_init_status_start,
				(dev - __device_start));
   1f6c0:	4f10      	ldr	r7, [pc, #64]	; (1f704 <z_sys_init_run_level+0x48>)
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f6c2:	f853 5020 	ldr.w	r5, [r3, r0, lsl #2]
   1f6c6:	3001      	adds	r0, #1
   1f6c8:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
   1f6cc:	42ae      	cmp	r6, r5
   1f6ce:	d800      	bhi.n	1f6d2 <z_sys_init_run_level+0x16>
		}
	}
}
   1f6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if ((entry->init(dev) != 0) && (dev != NULL)) {
   1f6d2:	e9d5 3400 	ldrd	r3, r4, [r5]
   1f6d6:	4620      	mov	r0, r4
   1f6d8:	4798      	blx	r3
   1f6da:	b170      	cbz	r0, 1f6fa <z_sys_init_run_level+0x3e>
   1f6dc:	b16c      	cbz	r4, 1f6fa <z_sys_init_run_level+0x3e>
				(dev - __device_start));
   1f6de:	1be4      	subs	r4, r4, r7
   1f6e0:	1124      	asrs	r4, r4, #4
	void sys_bitfield_set_bit(mem_addr_t addr, unsigned int bit)
{
	/* Doing memory offsets in terms of 32-bit values to prevent
	 * alignment issues
	 */
	sys_set_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f6e2:	0961      	lsrs	r1, r4, #5
   1f6e4:	4a08      	ldr	r2, [pc, #32]	; (1f708 <z_sys_init_run_level+0x4c>)
   1f6e6:	f004 041f 	and.w	r4, r4, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f6ea:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
	*(volatile uint32_t *)addr = temp | (1 << bit);
   1f6ee:	2301      	movs	r3, #1
   1f6f0:	fa03 f404 	lsl.w	r4, r3, r4
   1f6f4:	4304      	orrs	r4, r0
   1f6f6:	f842 4021 	str.w	r4, [r2, r1, lsl #2]
	for (entry = levels[level]; entry < levels[level+1]; entry++) {
   1f6fa:	3508      	adds	r5, #8
   1f6fc:	e7e6      	b.n	1f6cc <z_sys_init_run_level+0x10>
   1f6fe:	bf00      	nop
   1f700:	000292b8 	.word	0x000292b8
   1f704:	20009d88 	.word	0x20009d88
   1f708:	20009e28 	.word	0x20009e28

0001f70c <z_device_ready>:

bool z_device_ready(const struct device *dev)
{
	/* Set bit indicates device failed initialization */
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
					(dev - __device_start)));
   1f70c:	4b08      	ldr	r3, [pc, #32]	; (1f730 <z_device_ready+0x24>)
   1f70e:	1ac0      	subs	r0, r0, r3
   1f710:	1100      	asrs	r0, r0, #4
}

static ALWAYS_INLINE
	int sys_bitfield_test_bit(mem_addr_t addr, unsigned int bit)
{
	return sys_test_bit(addr + ((bit >> 5) << 2), bit & 0x1F);
   1f712:	4b08      	ldr	r3, [pc, #32]	; (1f734 <z_device_ready+0x28>)
   1f714:	0942      	lsrs	r2, r0, #5
   1f716:	f000 001f 	and.w	r0, r0, #31
	uint32_t temp = *(volatile uint32_t *)addr;
   1f71a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
	return temp & (1 << bit);
   1f71e:	2301      	movs	r3, #1
   1f720:	fa03 f000 	lsl.w	r0, r3, r0
	return !(sys_bitfield_test_bit((mem_addr_t)__device_init_status_start,
   1f724:	4210      	tst	r0, r2
}
   1f726:	bf0c      	ite	eq
   1f728:	4618      	moveq	r0, r3
   1f72a:	2000      	movne	r0, #0
   1f72c:	4770      	bx	lr
   1f72e:	bf00      	nop
   1f730:	20009d88 	.word	0x20009d88
   1f734:	20009e28 	.word	0x20009e28

0001f738 <z_impl_device_get_binding>:
{
   1f738:	b570      	push	{r4, r5, r6, lr}
	for (dev = __device_start; dev != __device_end; dev++) {
   1f73a:	4c10      	ldr	r4, [pc, #64]	; (1f77c <z_impl_device_get_binding+0x44>)
   1f73c:	4e10      	ldr	r6, [pc, #64]	; (1f780 <z_impl_device_get_binding+0x48>)
{
   1f73e:	4605      	mov	r5, r0
	for (dev = __device_start; dev != __device_end; dev++) {
   1f740:	42b4      	cmp	r4, r6
   1f742:	d104      	bne.n	1f74e <z_impl_device_get_binding+0x16>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f744:	4c0d      	ldr	r4, [pc, #52]	; (1f77c <z_impl_device_get_binding+0x44>)
   1f746:	42b4      	cmp	r4, r6
   1f748:	d10a      	bne.n	1f760 <z_impl_device_get_binding+0x28>
	return NULL;
   1f74a:	2400      	movs	r4, #0
   1f74c:	e014      	b.n	1f778 <z_impl_device_get_binding+0x40>
		if (z_device_ready(dev) && (dev->name == name)) {
   1f74e:	4620      	mov	r0, r4
   1f750:	f7ff ffdc 	bl	1f70c <z_device_ready>
   1f754:	b110      	cbz	r0, 1f75c <z_impl_device_get_binding+0x24>
   1f756:	6823      	ldr	r3, [r4, #0]
   1f758:	42ab      	cmp	r3, r5
   1f75a:	d00d      	beq.n	1f778 <z_impl_device_get_binding+0x40>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f75c:	3410      	adds	r4, #16
   1f75e:	e7ef      	b.n	1f740 <z_impl_device_get_binding+0x8>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f760:	4620      	mov	r0, r4
   1f762:	f7ff ffd3 	bl	1f70c <z_device_ready>
   1f766:	b908      	cbnz	r0, 1f76c <z_impl_device_get_binding+0x34>
	for (dev = __device_start; dev != __device_end; dev++) {
   1f768:	3410      	adds	r4, #16
   1f76a:	e7ec      	b.n	1f746 <z_impl_device_get_binding+0xe>
		if (z_device_ready(dev) && (strcmp(name, dev->name) == 0)) {
   1f76c:	6821      	ldr	r1, [r4, #0]
   1f76e:	4628      	mov	r0, r5
   1f770:	f004 fe4c 	bl	2440c <strcmp>
   1f774:	2800      	cmp	r0, #0
   1f776:	d1f7      	bne.n	1f768 <z_impl_device_get_binding+0x30>
}
   1f778:	4620      	mov	r0, r4
   1f77a:	bd70      	pop	{r4, r5, r6, pc}
   1f77c:	20009d88 	.word	0x20009d88
   1f780:	20009e28 	.word	0x20009e28

0001f784 <z_impl_z_errno>:
#include <syscalls/z_errno_mrsh.c>

#else
int *z_impl_z_errno(void)
{
	return &_current->errno_var;
   1f784:	4b01      	ldr	r3, [pc, #4]	; (1f78c <z_impl_z_errno+0x8>)
   1f786:	6898      	ldr	r0, [r3, #8]
}
   1f788:	3068      	adds	r0, #104	; 0x68
   1f78a:	4770      	bx	lr
   1f78c:	2000ed08 	.word	0x2000ed08

0001f790 <k_sys_fatal_error_handler>:
/* LCOV_EXCL_STOP */

/* LCOV_EXCL_START */
__weak void k_sys_fatal_error_handler(unsigned int reason,
				      const z_arch_esf_t *esf)
{
   1f790:	b510      	push	{r4, lr}
   1f792:	4604      	mov	r4, r0
	z_impl_log_panic();
   1f794:	f7e6 f8ea 	bl	596c <z_impl_log_panic>
   1f798:	4b06      	ldr	r3, [pc, #24]	; (1f7b4 <k_sys_fatal_error_handler+0x24>)
   1f79a:	4907      	ldr	r1, [pc, #28]	; (1f7b8 <k_sys_fatal_error_handler+0x28>)
	ARG_UNUSED(esf);

	LOG_PANIC();
	LOG_ERR("Halting system");
   1f79c:	4807      	ldr	r0, [pc, #28]	; (1f7bc <k_sys_fatal_error_handler+0x2c>)
   1f79e:	1ac9      	subs	r1, r1, r3
   1f7a0:	08c9      	lsrs	r1, r1, #3
   1f7a2:	0189      	lsls	r1, r1, #6
   1f7a4:	f041 0101 	orr.w	r1, r1, #1
   1f7a8:	f002 fe52 	bl	22450 <log_0>
	arch_system_halt(reason);
   1f7ac:	4620      	mov	r0, r4
   1f7ae:	f007 fa34 	bl	26c1a <arch_system_halt>
   1f7b2:	bf00      	nop
   1f7b4:	000278c0 	.word	0x000278c0
   1f7b8:	000279f8 	.word	0x000279f8
   1f7bc:	0002d95a 	.word	0x0002d95a

0001f7c0 <z_fatal_error>:
	return 0;
#endif
}

void z_fatal_error(unsigned int reason, const z_arch_esf_t *esf)
{
   1f7c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1f7c4:	4606      	mov	r6, r0
   1f7c6:	460f      	mov	r7, r1
	__asm__ volatile(
   1f7c8:	f04f 0320 	mov.w	r3, #32
   1f7cc:	f3ef 8811 	mrs	r8, BASEPRI
   1f7d0:	f383 8811 	msr	BASEPRI, r3
   1f7d4:	f3bf 8f6f 	isb	sy
	return z_impl_k_current_get();
   1f7d8:	f000 fe3e 	bl	20458 <z_impl_k_current_get>
   1f7dc:	4c1f      	ldr	r4, [pc, #124]	; (1f85c <z_fatal_error+0x9c>)
   1f7de:	4b20      	ldr	r3, [pc, #128]	; (1f860 <z_fatal_error+0xa0>)
   1f7e0:	1ae4      	subs	r4, r4, r3
   1f7e2:	2e04      	cmp	r6, #4
   1f7e4:	ea4f 04d4 	mov.w	r4, r4, lsr #3
   1f7e8:	bf96      	itet	ls
   1f7ea:	4a1e      	ldrls	r2, [pc, #120]	; (1f864 <z_fatal_error+0xa4>)
	struct k_thread *thread = k_current_get();

	/* twister looks for the "ZEPHYR FATAL ERROR" string, don't
	 * change it without also updating twister
	 */
	LOG_ERR(">>> ZEPHYR FATAL ERROR %d: %s on CPU %d", reason,
   1f7ec:	4a1e      	ldrhi	r2, [pc, #120]	; (1f868 <z_fatal_error+0xa8>)
   1f7ee:	f852 2026 	ldrls.w	r2, [r2, r6, lsl #2]
   1f7f2:	01a4      	lsls	r4, r4, #6
   1f7f4:	f044 0301 	orr.w	r3, r4, #1
   1f7f8:	4605      	mov	r5, r0
   1f7fa:	f8ad 3000 	strh.w	r3, [sp]
   1f7fe:	481b      	ldr	r0, [pc, #108]	; (1f86c <z_fatal_error+0xac>)
   1f800:	2300      	movs	r3, #0
   1f802:	4631      	mov	r1, r6
   1f804:	f002 fe5e 	bl	224c4 <log_3>
	 * an IRQ or exception was being handled, or thread context.
	 *
	 * See #17656
	 */
#if defined(CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION)
	if ((esf != NULL) && arch_is_in_nested_exception(esf)) {
   1f808:	b147      	cbz	r7, 1f81c <z_fatal_error+0x5c>
 * @return true if execution state was in handler mode, before
 *              the current exception occurred, otherwise false.
 */
static ALWAYS_INLINE bool arch_is_in_nested_exception(const z_arch_esf_t *esf)
{
	return (esf->basic.xpsr & IPSR_ISR_Msk) ? (true) : (false);
   1f80a:	69fb      	ldr	r3, [r7, #28]
   1f80c:	f3c3 0308 	ubfx	r3, r3, #0, #9
   1f810:	b123      	cbz	r3, 1f81c <z_fatal_error+0x5c>
		LOG_ERR("Fault during interrupt handling\n");
   1f812:	4817      	ldr	r0, [pc, #92]	; (1f870 <z_fatal_error+0xb0>)
   1f814:	f044 0101 	orr.w	r1, r4, #1
   1f818:	f002 fe1a 	bl	22450 <log_0>
	}
#endif

	LOG_ERR("Current thread: %p (%s)", thread,
   1f81c:	f044 0401 	orr.w	r4, r4, #1
	const char *thread_name = thread ? k_thread_name_get(thread) : NULL;
   1f820:	b12d      	cbz	r5, 1f82e <z_fatal_error+0x6e>
   1f822:	4628      	mov	r0, r5
   1f824:	f007 fc6a 	bl	270fc <k_thread_name_get>
	if (thread_name == NULL || thread_name[0] == '\0') {
   1f828:	b108      	cbz	r0, 1f82e <z_fatal_error+0x6e>
   1f82a:	7803      	ldrb	r3, [r0, #0]
   1f82c:	b903      	cbnz	r3, 1f830 <z_fatal_error+0x70>
		thread_name = "unknown";
   1f82e:	4811      	ldr	r0, [pc, #68]	; (1f874 <z_fatal_error+0xb4>)
	LOG_ERR("Current thread: %p (%s)", thread,
   1f830:	f7e5 ff18 	bl	5664 <log_strdup>
   1f834:	4623      	mov	r3, r4
   1f836:	4602      	mov	r2, r0
   1f838:	4629      	mov	r1, r5
   1f83a:	480f      	ldr	r0, [pc, #60]	; (1f878 <z_fatal_error+0xb8>)
   1f83c:	f002 fe29 	bl	22492 <log_2>
		log_strdup(thread_name_get(thread)));

	coredump(reason, esf, thread);

	k_sys_fatal_error_handler(reason, esf);
   1f840:	4639      	mov	r1, r7
   1f842:	4630      	mov	r0, r6
   1f844:	f7ff ffa4 	bl	1f790 <k_sys_fatal_error_handler>
	__asm__ volatile(
   1f848:	f388 8811 	msr	BASEPRI, r8
   1f84c:	f3bf 8f6f 	isb	sy
	z_impl_k_thread_abort(thread);
   1f850:	4628      	mov	r0, r5
#endif /*CONFIG_ARCH_HAS_NESTED_EXCEPTION_DETECTION */
	}

	arch_irq_unlock(key);
	k_thread_abort(thread);
}
   1f852:	b002      	add	sp, #8
   1f854:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   1f858:	f7e8 bb12 	b.w	7e80 <z_impl_k_thread_abort>
   1f85c:	000279f8 	.word	0x000279f8
   1f860:	000278c0 	.word	0x000278c0
   1f864:	000292d0 	.word	0x000292d0
   1f868:	0002d969 	.word	0x0002d969
   1f86c:	0002d977 	.word	0x0002d977
   1f870:	0002d99f 	.word	0x0002d99f
   1f874:	0002c064 	.word	0x0002c064
   1f878:	0002d9c0 	.word	0x0002d9c0

0001f87c <z_pm_save_idle_exit>:
}
#endif /* !SMP_FALLBACK */


void z_pm_save_idle_exit(int32_t ticks)
{
   1f87c:	b508      	push	{r3, lr}
	 * to allow any operations that needs to be done before kernel
	 * switches task or processes nested interrupts. This can be
	 * disabled by calling pm_idle_exit_notification_disable().
	 * Alternatively it can be simply ignored if not required.
	 */
	if (pm_idle_exit_notify) {
   1f87e:	4b04      	ldr	r3, [pc, #16]	; (1f890 <z_pm_save_idle_exit+0x14>)
   1f880:	781b      	ldrb	r3, [r3, #0]
   1f882:	b10b      	cbz	r3, 1f888 <z_pm_save_idle_exit+0xc>
		pm_system_resume();
   1f884:	f7e7 fa6c 	bl	6d60 <pm_system_resume>
	}
#endif	/* CONFIG_PM */
	z_clock_idle_exit();
}
   1f888:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_clock_idle_exit();
   1f88c:	f003 bbf5 	b.w	2307a <z_clock_idle_exit>
   1f890:	2000f322 	.word	0x2000f322

0001f894 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while (false)
#endif

void idle(void *p1, void *unused2, void *unused3)
{
   1f894:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
		 * saves no power and does not improve latency.  But it's an
		 * API we need to honor...
		 */
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
#ifdef CONFIG_PM
		_kernel.idle = ticks;
   1f898:	f8df 806c 	ldr.w	r8, [pc, #108]	; 1f908 <idle+0x74>
	pm_idle_exit_notify = 1U;
   1f89c:	4e1b      	ldr	r6, [pc, #108]	; (1f90c <idle+0x78>)
{
   1f89e:	4605      	mov	r5, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f8a0:	2701      	movs	r7, #1
	__asm__ volatile(
   1f8a2:	f04f 0220 	mov.w	r2, #32
   1f8a6:	f3ef 8311 	mrs	r3, BASEPRI
   1f8aa:	f382 8811 	msr	BASEPRI, r2
   1f8ae:	f3bf 8f6f 	isb	sy
		struct k_thread *to_abort = cpu->pending_abort;
   1f8b2:	6928      	ldr	r0, [r5, #16]
		if (to_abort) {
   1f8b4:	b190      	cbz	r0, 1f8dc <idle+0x48>
			cpu->pending_abort = NULL;
   1f8b6:	2200      	movs	r2, #0
   1f8b8:	612a      	str	r2, [r5, #16]
	__asm__ volatile(
   1f8ba:	f383 8811 	msr	BASEPRI, r3
   1f8be:	f3bf 8f6f 	isb	sy
			z_thread_single_abort(to_abort);
   1f8c2:	f000 fc05 	bl	200d0 <z_thread_single_abort>
	__asm__ volatile(
   1f8c6:	f04f 0320 	mov.w	r3, #32
   1f8ca:	f3ef 8011 	mrs	r0, BASEPRI
   1f8ce:	f383 8811 	msr	BASEPRI, r3
   1f8d2:	f3bf 8f6f 	isb	sy
   1f8d6:	f007 fb20 	bl	26f1a <z_reschedule_irqlock>
			continue;
   1f8da:	e7e2      	b.n	1f8a2 <idle+0xe>
		int32_t ticks = z_get_next_timeout_expiry();
   1f8dc:	f007 fc9e 	bl	2721c <z_get_next_timeout_expiry>
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f8e0:	2101      	movs	r1, #1
   1f8e2:	2802      	cmp	r0, #2
		int32_t ticks = z_get_next_timeout_expiry();
   1f8e4:	4604      	mov	r4, r0
		z_set_timeout_expiry((ticks < IDLE_THRESH) ? 1 : ticks, true);
   1f8e6:	bfd8      	it	le
   1f8e8:	4608      	movle	r0, r1
   1f8ea:	f007 fca7 	bl	2723c <z_set_timeout_expiry>
	idle_state = pm_system_suspend(ticks);
   1f8ee:	4620      	mov	r0, r4
		_kernel.idle = ticks;
   1f8f0:	f8c8 4024 	str.w	r4, [r8, #36]	; 0x24
	pm_idle_exit_notify = 1U;
   1f8f4:	7037      	strb	r7, [r6, #0]
	idle_state = pm_system_suspend(ticks);
   1f8f6:	f7e7 f9f7 	bl	6ce8 <pm_system_suspend>
	if (idle_state == PM_STATE_ACTIVE) {
   1f8fa:	2800      	cmp	r0, #0
   1f8fc:	d1d1      	bne.n	1f8a2 <idle+0xe>
		pm_idle_exit_notify = 0U;
   1f8fe:	7030      	strb	r0, [r6, #0]
	arch_cpu_idle();
   1f900:	f7e7 ffce 	bl	78a0 <arch_cpu_idle>
}
   1f904:	e7cd      	b.n	1f8a2 <idle+0xe>
   1f906:	bf00      	nop
   1f908:	2000ed08 	.word	0x2000ed08
   1f90c:	2000f322 	.word	0x2000f322

0001f910 <z_bss_zero>:
 *
 * @return N/A
 */
void z_bss_zero(void)
{
	(void)memset(__bss_start, 0, __bss_end - __bss_start);
   1f910:	4802      	ldr	r0, [pc, #8]	; (1f91c <z_bss_zero+0xc>)
   1f912:	4a03      	ldr	r2, [pc, #12]	; (1f920 <z_bss_zero+0x10>)
   1f914:	2100      	movs	r1, #0
   1f916:	1a12      	subs	r2, r2, r0
   1f918:	f004 bdd1 	b.w	244be <memset>
   1f91c:	2000a170 	.word	0x2000a170
   1f920:	2000f324 	.word	0x2000f324

0001f924 <bg_thread_main>:
 * init functions, then invokes application's main() routine.
 *
 * @return N/A
 */
static void bg_thread_main(void *unused1, void *unused2, void *unused3)
{
   1f924:	b508      	push	{r3, lr}
	 * may perform memory management tasks (except for z_phys_map() which
	 * is allowed at any time)
	 */
	z_mem_manage_init();
#endif /* CONFIG_MMU */
	z_sys_post_kernel = true;
   1f926:	4b0a      	ldr	r3, [pc, #40]	; (1f950 <bg_thread_main+0x2c>)
   1f928:	2201      	movs	r2, #1

	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f92a:	2002      	movs	r0, #2
	z_sys_post_kernel = true;
   1f92c:	701a      	strb	r2, [r3, #0]
	z_sys_init_run_level(_SYS_INIT_LEVEL_POST_KERNEL);
   1f92e:	f7ff fec5 	bl	1f6bc <z_sys_init_run_level>
#if CONFIG_STACK_POINTER_RANDOM
	z_stack_adjust_initialized = 1;
#endif
	boot_banner();
   1f932:	f000 ff31 	bl	20798 <boot_banner>
	__do_global_ctors_aux();
	__do_init_array_aux();
#endif

	/* Final init level before app starts */
	z_sys_init_run_level(_SYS_INIT_LEVEL_APPLICATION);
   1f936:	2003      	movs	r0, #3
   1f938:	f7ff fec0 	bl	1f6bc <z_sys_init_run_level>

	z_init_static_threads();
   1f93c:	f000 fe56 	bl	205ec <z_init_static_threads>
	z_timestamp_main = k_cycle_get_32();
#endif

	extern void main(void);

	main();
   1f940:	f7e3 f98e 	bl	2c60 <main>

	/* Mark nonessenrial since main() has no more work to do */
	z_main_thread.base.user_options &= ~K_ESSENTIAL;
   1f944:	4a03      	ldr	r2, [pc, #12]	; (1f954 <bg_thread_main+0x30>)
   1f946:	7b13      	ldrb	r3, [r2, #12]
   1f948:	f023 0301 	bic.w	r3, r3, #1
   1f94c:	7313      	strb	r3, [r2, #12]

#ifdef CONFIG_COVERAGE_DUMP
	/* Dump coverage data once the main() has exited. */
	gcov_coverage_dump();
#endif
} /* LCOV_EXCL_LINE ... because we just dumped final coverage data */
   1f94e:	bd08      	pop	{r3, pc}
   1f950:	2000f323 	.word	0x2000f323
   1f954:	2000ac20 	.word	0x2000ac20

0001f958 <z_cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void z_cstart(void)
{
   1f958:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
   1f95c:	b0a9      	sub	sp, #164	; 0xa4
	/* gcov hook needed to get the coverage report.*/
	gcov_static_init();

	LOG_CORE_INIT();
   1f95e:	f7e5 fdd9 	bl	5514 <log_core_init>
 *
 * @return N/A
 */
static ALWAYS_INLINE void z_arm_interrupt_stack_setup(void)
{
	uint32_t msp =
   1f962:	f8df 90d4 	ldr.w	r9, [pc, #212]	; 1fa38 <z_cstart+0xe0>
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
   1f966:	f389 8808 	msr	MSP, r9
	 * for Cortex-M3 and Cortex-M4 (ARMv7-M) MCUs. For the rest
	 * of ARM Cortex-M processors this setting is enforced by
	 * default and it is not configurable.
	 */
#if defined(CONFIG_CPU_CORTEX_M3) || defined(CONFIG_CPU_CORTEX_M4)
	SCB->CCR |= SCB_CCR_STKALIGN_Msk;
   1f96a:	4d34      	ldr	r5, [pc, #208]	; (1fa3c <z_cstart+0xe4>)
	_kernel.ready_q.cache = &z_main_thread;
   1f96c:	4e34      	ldr	r6, [pc, #208]	; (1fa40 <z_cstart+0xe8>)
   1f96e:	696b      	ldr	r3, [r5, #20]
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f970:	f8df a0d0 	ldr.w	sl, [pc, #208]	; 1fa44 <z_cstart+0xec>
	z_setup_new_thread(thread, stack,
   1f974:	4f34      	ldr	r7, [pc, #208]	; (1fa48 <z_cstart+0xf0>)
   1f976:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   1f97a:	2400      	movs	r4, #0
   1f97c:	616b      	str	r3, [r5, #20]
   1f97e:	23e0      	movs	r3, #224	; 0xe0
   1f980:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
   1f984:	77ec      	strb	r4, [r5, #31]
   1f986:	762c      	strb	r4, [r5, #24]
   1f988:	766c      	strb	r4, [r5, #25]
   1f98a:	76ac      	strb	r4, [r5, #26]
#if defined(CONFIG_ARM_SECURE_FIRMWARE)
	NVIC_SetPriority(SecureFault_IRQn, _EXC_FAULT_PRIO);
#endif /* CONFIG_ARM_SECURE_FIRMWARE */

	/* Enable Usage, Mem, & Bus Faults */
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   1f98c:	6a6b      	ldr	r3, [r5, #36]	; 0x24
   1f98e:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
   1f992:	626b      	str	r3, [r5, #36]	; 0x24

static ALWAYS_INLINE void arch_kernel_init(void)
{
	z_arm_interrupt_stack_setup();
	z_arm_exc_setup();
	z_arm_fault_init();
   1f994:	f7e8 fa52 	bl	7e3c <z_arm_fault_init>
	z_arm_cpu_idle_init();
   1f998:	f7e7 ff7c 	bl	7894 <z_arm_cpu_idle_init>
static ALWAYS_INLINE void z_arm_clear_faults(void)
{
#if defined(CONFIG_ARMV6_M_ARMV8_M_BASELINE)
#elif defined(CONFIG_ARMV7_M_ARMV8_M_MAINLINE)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   1f99c:	f04f 33ff 	mov.w	r3, #4294967295
   1f9a0:	62ab      	str	r3, [r5, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   1f9a2:	62eb      	str	r3, [r5, #44]	; 0x2c
#endif
#ifdef CONFIG_USERSPACE
	dummy_thread->mem_domain_info.mem_domain = &k_mem_domain_default;
#endif

	_current_cpu->current = dummy_thread;
   1f9a4:	4d29      	ldr	r5, [pc, #164]	; (1fa4c <z_cstart+0xf4>)
	dummy_thread->base.user_options = K_ESSENTIAL;
   1f9a6:	f240 1301 	movw	r3, #257	; 0x101
   1f9aa:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
	_current_cpu->current = dummy_thread;
   1f9ae:	ab06      	add	r3, sp, #24
   1f9b0:	60ab      	str	r3, [r5, #8]
#endif
#if defined(CONFIG_MMU) && defined(CONFIG_USERSPACE)
	z_kernel_map_fixup();
#endif
	/* perform basic hardware initialization */
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   1f9b2:	4620      	mov	r0, r4
	dummy_thread->stack_info.size = 0U;
   1f9b4:	e9cd 4421 	strd	r4, r4, [sp, #132]	; 0x84
   1f9b8:	f7ff fe80 	bl	1f6bc <z_sys_init_run_level>
	z_sys_init_run_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   1f9bc:	2001      	movs	r0, #1
   1f9be:	f7ff fe7d 	bl	1f6bc <z_sys_init_run_level>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f9c2:	f04f 0b01 	mov.w	fp, #1
	z_sched_init();
   1f9c6:	f000 fc99 	bl	202fc <z_sched_init>
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f9ca:	4b21      	ldr	r3, [pc, #132]	; (1fa50 <z_cstart+0xf8>)
	_kernel.ready_q.cache = &z_main_thread;
   1f9cc:	62ae      	str	r6, [r5, #40]	; 0x28
	stack_ptr = z_setup_new_thread(&z_main_thread, z_main_stack,
   1f9ce:	4921      	ldr	r1, [pc, #132]	; (1fa54 <z_cstart+0xfc>)
   1f9d0:	9305      	str	r3, [sp, #20]
   1f9d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   1f9d6:	4653      	mov	r3, sl
   1f9d8:	e9cd 4b03 	strd	r4, fp, [sp, #12]
   1f9dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
   1f9e0:	9400      	str	r4, [sp, #0]
   1f9e2:	4630      	mov	r0, r6
   1f9e4:	f000 fda4 	bl	20530 <z_setup_new_thread>
	sys_trace_thread_resume(thread);
}

static inline void z_mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1f9e8:	7b73      	ldrb	r3, [r6, #13]
   1f9ea:	4680      	mov	r8, r0
   1f9ec:	f023 0304 	bic.w	r3, r3, #4
	z_ready_thread(&z_main_thread);
   1f9f0:	4630      	mov	r0, r6
   1f9f2:	7373      	strb	r3, [r6, #13]
   1f9f4:	f007 facf 	bl	26f96 <z_ready_thread>
	z_setup_new_thread(thread, stack,
   1f9f8:	230f      	movs	r3, #15
   1f9fa:	e9cd 4302 	strd	r4, r3, [sp, #8]
   1f9fe:	4916      	ldr	r1, [pc, #88]	; (1fa58 <z_cstart+0x100>)
   1fa00:	4b16      	ldr	r3, [pc, #88]	; (1fa5c <z_cstart+0x104>)
   1fa02:	f44f 72a0 	mov.w	r2, #320	; 0x140
   1fa06:	e9cd b404 	strd	fp, r4, [sp, #16]
   1fa0a:	e9cd 5400 	strd	r5, r4, [sp]
   1fa0e:	4638      	mov	r0, r7
   1fa10:	f000 fd8e 	bl	20530 <z_setup_new_thread>
   1fa14:	7b7b      	ldrb	r3, [r7, #13]
		_kernel.cpus[i].idle_thread = &z_idle_threads[i];
   1fa16:	60ef      	str	r7, [r5, #12]
   1fa18:	f023 0304 	bic.w	r3, r3, #4
   1fa1c:	737b      	strb	r3, [r7, #13]
 * @return N/A
 */

static inline void sys_dlist_init(sys_dlist_t *list)
{
	list->head = (sys_dnode_t *)list;
   1fa1e:	f105 031c 	add.w	r3, r5, #28
	list->tail = (sys_dnode_t *)list;
   1fa22:	e9c5 3307 	strd	r3, r3, [r5, #28]
		_kernel.cpus[i].id = i;
   1fa26:	762c      	strb	r4, [r5, #24]
		_kernel.cpus[i].irq_stack =
   1fa28:	f8c5 9004 	str.w	r9, [r5, #4]
	arch_switch_to_main_thread(&z_main_thread, stack_ptr, bg_thread_main);
   1fa2c:	4652      	mov	r2, sl
   1fa2e:	4641      	mov	r1, r8
   1fa30:	4630      	mov	r0, r6
   1fa32:	f7e7 ff15 	bl	7860 <arch_switch_to_main_thread>
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   1fa36:	bf00      	nop
   1fa38:	20012280 	.word	0x20012280
   1fa3c:	e000ed00 	.word	0xe000ed00
   1fa40:	2000ac20 	.word	0x2000ac20
   1fa44:	0001f925 	.word	0x0001f925
   1fa48:	2000ab98 	.word	0x2000ab98
   1fa4c:	2000ed08 	.word	0x2000ed08
   1fa50:	0002da22 	.word	0x0002da22
   1fa54:	200114e0 	.word	0x200114e0
   1fa58:	20011900 	.word	0x20011900
   1fa5c:	0001f895 	.word	0x0001f895

0001fa60 <statics_init>:
	z_waitq_init(&h->wait_q);
	sys_heap_init(&h->heap, mem, bytes);
}

static int statics_init(const struct device *unused)
{
   1fa60:	b538      	push	{r3, r4, r5, lr}
	ARG_UNUSED(unused);
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1fa62:	4c06      	ldr	r4, [pc, #24]	; (1fa7c <statics_init+0x1c>)
   1fa64:	4d06      	ldr	r5, [pc, #24]	; (1fa80 <statics_init+0x20>)
   1fa66:	42ac      	cmp	r4, r5
   1fa68:	d301      	bcc.n	1fa6e <statics_init+0xe>
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
	}
	return 0;
}
   1fa6a:	2000      	movs	r0, #0
   1fa6c:	bd38      	pop	{r3, r4, r5, pc}
		k_heap_init(h, h->heap.init_mem, h->heap.init_bytes);
   1fa6e:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
   1fa72:	4620      	mov	r0, r4
   1fa74:	f007 f8da 	bl	26c2c <k_heap_init>
	Z_STRUCT_SECTION_FOREACH(k_heap, h) {
   1fa78:	3414      	adds	r4, #20
   1fa7a:	e7f4      	b.n	1fa66 <statics_init+0x6>
   1fa7c:	20009fa0 	.word	0x20009fa0
   1fa80:	20009fa0 	.word	0x20009fa0

0001fa84 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(const struct device *dev)
{
   1fa84:	b570      	push	{r4, r5, r6, lr}
	int rc = 0;
	ARG_UNUSED(dev);

	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1fa86:	4b0e      	ldr	r3, [pc, #56]	; (1fac0 <init_mem_slab_module+0x3c>)
   1fa88:	4c0e      	ldr	r4, [pc, #56]	; (1fac4 <init_mem_slab_module+0x40>)
   1fa8a:	42a3      	cmp	r3, r4
   1fa8c:	d301      	bcc.n	1fa92 <init_mem_slab_module+0xe>
		}
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
		z_object_init(slab);
	}

out:
   1fa8e:	2000      	movs	r0, #0
	return rc;
}
   1fa90:	bd70      	pop	{r4, r5, r6, pc}
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   1fa92:	e9d3 0103 	ldrd	r0, r1, [r3, #12]
   1fa96:	ea41 0200 	orr.w	r2, r1, r0
   1fa9a:	f012 0203 	ands.w	r2, r2, #3
   1fa9e:	d10b      	bne.n	1fab8 <init_mem_slab_module+0x34>
	for (j = 0U; j < slab->num_blocks; j++) {
   1faa0:	689d      	ldr	r5, [r3, #8]
	slab->free_list = NULL;
   1faa2:	615a      	str	r2, [r3, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   1faa4:	42aa      	cmp	r2, r5
   1faa6:	d101      	bne.n	1faac <init_mem_slab_module+0x28>
	Z_STRUCT_SECTION_FOREACH(k_mem_slab, slab) {
   1faa8:	331c      	adds	r3, #28
   1faaa:	e7ee      	b.n	1fa8a <init_mem_slab_module+0x6>
		*(char **)p = slab->free_list;
   1faac:	695e      	ldr	r6, [r3, #20]
   1faae:	600e      	str	r6, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   1fab0:	3201      	adds	r2, #1
		slab->free_list = p;
   1fab2:	6159      	str	r1, [r3, #20]
		p += slab->block_size;
   1fab4:	4401      	add	r1, r0
	for (j = 0U; j < slab->num_blocks; j++) {
   1fab6:	e7f5      	b.n	1faa4 <init_mem_slab_module+0x20>
	return rc;
   1fab8:	f06f 0015 	mvn.w	r0, #21
   1fabc:	e7e8      	b.n	1fa90 <init_mem_slab_module+0xc>
   1fabe:	bf00      	nop
   1fac0:	20009f4c 	.word	0x20009f4c
   1fac4:	20009fa0 	.word	0x20009fa0

0001fac8 <k_mem_slab_alloc>:
out:
	return rc;
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, k_timeout_t timeout)
{
   1fac8:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1faca:	460c      	mov	r4, r1
   1facc:	f04f 0520 	mov.w	r5, #32
   1fad0:	f3ef 8111 	mrs	r1, BASEPRI
   1fad4:	f385 8811 	msr	BASEPRI, r5
   1fad8:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int result;

	if (slab->free_list != NULL) {
   1fadc:	6945      	ldr	r5, [r0, #20]
   1fade:	b15d      	cbz	r5, 1faf8 <k_mem_slab_alloc+0x30>
		/* take a free block */
		*mem = slab->free_list;
   1fae0:	6025      	str	r5, [r4, #0]
		slab->free_list = *(char **)(slab->free_list);
   1fae2:	682b      	ldr	r3, [r5, #0]
   1fae4:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   1fae6:	6983      	ldr	r3, [r0, #24]
   1fae8:	3301      	adds	r3, #1
   1faea:	6183      	str	r3, [r0, #24]

#ifdef CONFIG_MEM_SLAB_TRACE_MAX_UTILIZATION
		slab->max_used = MAX(slab->num_used, slab->max_used);
#endif

		result = 0;
   1faec:	2000      	movs	r0, #0
	__asm__ volatile(
   1faee:	f381 8811 	msr	BASEPRI, r1
   1faf2:	f3bf 8f6f 	isb	sy
		return result;
	}

	k_spin_unlock(&lock, key);

	return result;
   1faf6:	e011      	b.n	1fb1c <k_mem_slab_alloc+0x54>
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1faf8:	ea52 0c03 	orrs.w	ip, r2, r3
   1fafc:	d103      	bne.n	1fb06 <k_mem_slab_alloc+0x3e>
		*mem = NULL;
   1fafe:	6025      	str	r5, [r4, #0]
		result = -ENOMEM;
   1fb00:	f06f 000b 	mvn.w	r0, #11
   1fb04:	e7f3      	b.n	1faee <k_mem_slab_alloc+0x26>
		result = z_pend_curr(&lock, key, &slab->wait_q, timeout);
   1fb06:	e9cd 2300 	strd	r2, r3, [sp]
   1fb0a:	4602      	mov	r2, r0
   1fb0c:	4804      	ldr	r0, [pc, #16]	; (1fb20 <k_mem_slab_alloc+0x58>)
   1fb0e:	f000 fba1 	bl	20254 <z_pend_curr>
		if (result == 0) {
   1fb12:	b918      	cbnz	r0, 1fb1c <k_mem_slab_alloc+0x54>
			*mem = _current->base.swap_data;
   1fb14:	4b03      	ldr	r3, [pc, #12]	; (1fb24 <k_mem_slab_alloc+0x5c>)
   1fb16:	689b      	ldr	r3, [r3, #8]
   1fb18:	695b      	ldr	r3, [r3, #20]
   1fb1a:	6023      	str	r3, [r4, #0]
}
   1fb1c:	b003      	add	sp, #12
   1fb1e:	bd30      	pop	{r4, r5, pc}
   1fb20:	2000f324 	.word	0x2000f324
   1fb24:	2000ed08 	.word	0x2000ed08

0001fb28 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   1fb28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fb2a:	4604      	mov	r4, r0
   1fb2c:	460d      	mov	r5, r1
	__asm__ volatile(
   1fb2e:	f04f 0320 	mov.w	r3, #32
   1fb32:	f3ef 8611 	mrs	r6, BASEPRI
   1fb36:	f383 8811 	msr	BASEPRI, r3
   1fb3a:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);

	if (slab->free_list == NULL) {
   1fb3e:	6947      	ldr	r7, [r0, #20]
   1fb40:	b977      	cbnz	r7, 1fb60 <k_mem_slab_free+0x38>
		struct k_thread *pending_thread = z_unpend_first_thread(&slab->wait_q);
   1fb42:	f007 fa95 	bl	27070 <z_unpend_first_thread>

		if (pending_thread != NULL) {
   1fb46:	b158      	cbz	r0, 1fb60 <k_mem_slab_free+0x38>
			z_thread_return_value_set_with_data(pending_thread, 0, *mem);
   1fb48:	682a      	ldr	r2, [r5, #0]
z_thread_return_value_set_with_data(struct k_thread *thread,
				   unsigned int value,
				   void *data)
{
	arch_thread_return_value_set(thread, value);
	thread->base.swap_data = data;
   1fb4a:	6142      	str	r2, [r0, #20]
}

static ALWAYS_INLINE void
arch_thread_return_value_set(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   1fb4c:	f8c0 7080 	str.w	r7, [r0, #128]	; 0x80
			z_ready_thread(pending_thread);
   1fb50:	f007 fa21 	bl	26f96 <z_ready_thread>
			z_reschedule(&lock, key);
   1fb54:	4631      	mov	r1, r6
   1fb56:	4809      	ldr	r0, [pc, #36]	; (1fb7c <k_mem_slab_free+0x54>)
	}
	**(char ***) mem = slab->free_list;
	slab->free_list = *(char **) mem;
	slab->num_used--;
	k_spin_unlock(&lock, key);
}
   1fb58:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			z_reschedule(&lock, key);
   1fb5c:	f000 b93a 	b.w	1fdd4 <z_reschedule>
	**(char ***) mem = slab->free_list;
   1fb60:	682b      	ldr	r3, [r5, #0]
   1fb62:	6962      	ldr	r2, [r4, #20]
   1fb64:	601a      	str	r2, [r3, #0]
	slab->free_list = *(char **) mem;
   1fb66:	682b      	ldr	r3, [r5, #0]
   1fb68:	6163      	str	r3, [r4, #20]
	slab->num_used--;
   1fb6a:	69a3      	ldr	r3, [r4, #24]
   1fb6c:	3b01      	subs	r3, #1
   1fb6e:	61a3      	str	r3, [r4, #24]
	__asm__ volatile(
   1fb70:	f386 8811 	msr	BASEPRI, r6
   1fb74:	f3bf 8f6f 	isb	sy
}
   1fb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fb7a:	bf00      	nop
   1fb7c:	2000f324 	.word	0x2000f324

0001fb80 <z_impl_k_mutex_lock>:
	}
	return false;
}

int z_impl_k_mutex_lock(struct k_mutex *mutex, k_timeout_t timeout)
{
   1fb80:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   1fb84:	4604      	mov	r4, r0
   1fb86:	4617      	mov	r7, r2
   1fb88:	461e      	mov	r6, r3
	__asm__ volatile(
   1fb8a:	f04f 0320 	mov.w	r3, #32
   1fb8e:	f3ef 8811 	mrs	r8, BASEPRI
   1fb92:	f383 8811 	msr	BASEPRI, r3
   1fb96:	f3bf 8f6f 	isb	sy
	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	sys_trace_mutex_lock(mutex);
	key = k_spin_lock(&lock);

	if (likely((mutex->lock_count == 0U) || (mutex->owner == _current))) {
   1fb9a:	68c3      	ldr	r3, [r0, #12]
   1fb9c:	4a2f      	ldr	r2, [pc, #188]	; (1fc5c <z_impl_k_mutex_lock+0xdc>)
   1fb9e:	b16b      	cbz	r3, 1fbbc <z_impl_k_mutex_lock+0x3c>
   1fba0:	6880      	ldr	r0, [r0, #8]
   1fba2:	6891      	ldr	r1, [r2, #8]
   1fba4:	4288      	cmp	r0, r1
   1fba6:	d019      	beq.n	1fbdc <z_impl_k_mutex_lock+0x5c>
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);

		return 0;
	}

	if (unlikely(K_TIMEOUT_EQ(timeout, K_NO_WAIT))) {
   1fba8:	ea57 0306 	orrs.w	r3, r7, r6
   1fbac:	d118      	bne.n	1fbe0 <z_impl_k_mutex_lock+0x60>
	__asm__ volatile(
   1fbae:	f388 8811 	msr	BASEPRI, r8
   1fbb2:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
		return -EBUSY;
   1fbb6:	f06f 000f 	mvn.w	r0, #15
   1fbba:	e00c      	b.n	1fbd6 <z_impl_k_mutex_lock+0x56>
					_current->base.prio :
   1fbbc:	6891      	ldr	r1, [r2, #8]
   1fbbe:	f991 100e 	ldrsb.w	r1, [r1, #14]
		mutex->owner_orig_prio = (mutex->lock_count == 0U) ?
   1fbc2:	6121      	str	r1, [r4, #16]
		mutex->lock_count++;
   1fbc4:	3301      	adds	r3, #1
   1fbc6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   1fbc8:	6893      	ldr	r3, [r2, #8]
   1fbca:	60a3      	str	r3, [r4, #8]
   1fbcc:	f388 8811 	msr	BASEPRI, r8
   1fbd0:	f3bf 8f6f 	isb	sy
		return 0;
   1fbd4:	2000      	movs	r0, #0
		k_spin_unlock(&lock, key);
	}

	sys_trace_end_call(SYS_TRACE_ID_MUTEX_LOCK);
	return -EAGAIN;
}
   1fbd6:	b002      	add	sp, #8
   1fbd8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
					_current->base.prio :
   1fbdc:	6921      	ldr	r1, [r4, #16]
   1fbde:	e7f0      	b.n	1fbc2 <z_impl_k_mutex_lock+0x42>
	new_prio = new_prio_for_inheritance(_current->base.prio,
   1fbe0:	f990 300e 	ldrsb.w	r3, [r0, #14]
   1fbe4:	f991 100e 	ldrsb.w	r1, [r1, #14]
   1fbe8:	4299      	cmp	r1, r3
   1fbea:	bfa8      	it	ge
   1fbec:	4619      	movge	r1, r3
   1fbee:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	if (z_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   1fbf2:	428b      	cmp	r3, r1
   1fbf4:	dd2b      	ble.n	1fc4e <z_impl_k_mutex_lock+0xce>
		resched = adjust_owner_prio(mutex, new_prio);
   1fbf6:	f007 f89a 	bl	26d2e <adjust_owner_prio.isra.0>
   1fbfa:	4605      	mov	r5, r0
	int got_mutex = z_pend_curr(&lock, key, &mutex->wait_q, timeout);
   1fbfc:	e9cd 7600 	strd	r7, r6, [sp]
   1fc00:	4817      	ldr	r0, [pc, #92]	; (1fc60 <z_impl_k_mutex_lock+0xe0>)
   1fc02:	4622      	mov	r2, r4
   1fc04:	4641      	mov	r1, r8
   1fc06:	f000 fb25 	bl	20254 <z_pend_curr>
	if (got_mutex == 0) {
   1fc0a:	2800      	cmp	r0, #0
   1fc0c:	d0e3      	beq.n	1fbd6 <z_impl_k_mutex_lock+0x56>
	__asm__ volatile(
   1fc0e:	f04f 0320 	mov.w	r3, #32
   1fc12:	f3ef 8611 	mrs	r6, BASEPRI
   1fc16:	f383 8811 	msr	BASEPRI, r3
   1fc1a:	f3bf 8f6f 	isb	sy
 * @return true if empty, false otherwise
 */

static inline bool sys_dlist_is_empty(sys_dlist_t *list)
{
	return list->head == list;
   1fc1e:	6823      	ldr	r3, [r4, #0]
   1fc20:	6921      	ldr	r1, [r4, #16]
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1fc22:	42a3      	cmp	r3, r4
   1fc24:	d007      	beq.n	1fc36 <z_impl_k_mutex_lock+0xb6>
		new_prio_for_inheritance(waiter->base.prio, mutex->owner_orig_prio) :
   1fc26:	b133      	cbz	r3, 1fc36 <z_impl_k_mutex_lock+0xb6>
   1fc28:	f993 300e 	ldrsb.w	r3, [r3, #14]
   1fc2c:	4299      	cmp	r1, r3
   1fc2e:	bfa8      	it	ge
   1fc30:	4619      	movge	r1, r3
   1fc32:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
	resched = adjust_owner_prio(mutex, new_prio) || resched;
   1fc36:	68a0      	ldr	r0, [r4, #8]
   1fc38:	f007 f879 	bl	26d2e <adjust_owner_prio.isra.0>
   1fc3c:	b900      	cbnz	r0, 1fc40 <z_impl_k_mutex_lock+0xc0>
	if (resched) {
   1fc3e:	b145      	cbz	r5, 1fc52 <z_impl_k_mutex_lock+0xd2>
		z_reschedule(&lock, key);
   1fc40:	4807      	ldr	r0, [pc, #28]	; (1fc60 <z_impl_k_mutex_lock+0xe0>)
   1fc42:	4631      	mov	r1, r6
   1fc44:	f000 f8c6 	bl	1fdd4 <z_reschedule>
	return -EAGAIN;
   1fc48:	f06f 000a 	mvn.w	r0, #10
   1fc4c:	e7c3      	b.n	1fbd6 <z_impl_k_mutex_lock+0x56>
	bool resched = false;
   1fc4e:	2500      	movs	r5, #0
   1fc50:	e7d4      	b.n	1fbfc <z_impl_k_mutex_lock+0x7c>
	__asm__ volatile(
   1fc52:	f386 8811 	msr	BASEPRI, r6
   1fc56:	f3bf 8f6f 	isb	sy
   1fc5a:	e7f5      	b.n	1fc48 <z_impl_k_mutex_lock+0xc8>
   1fc5c:	2000ed08 	.word	0x2000ed08
   1fc60:	2000f324 	.word	0x2000f324

0001fc64 <z_impl_k_mutex_unlock>:
}
#include <syscalls/k_mutex_lock_mrsh.c>
#endif

int z_impl_k_mutex_unlock(struct k_mutex *mutex)
{
   1fc64:	b538      	push	{r3, r4, r5, lr}
	struct k_thread *new_owner;

	__ASSERT(!arch_is_in_isr(), "mutexes cannot be used inside ISRs");

	CHECKIF(mutex->owner == NULL) {
   1fc66:	6883      	ldr	r3, [r0, #8]
{
   1fc68:	4604      	mov	r4, r0
	CHECKIF(mutex->owner == NULL) {
   1fc6a:	2b00      	cmp	r3, #0
   1fc6c:	d033      	beq.n	1fcd6 <z_impl_k_mutex_unlock+0x72>
		return -EINVAL;
	}
	/*
	 * The current thread does not own the mutex.
	 */
	CHECKIF(mutex->owner != _current) {
   1fc6e:	4a1d      	ldr	r2, [pc, #116]	; (1fce4 <z_impl_k_mutex_unlock+0x80>)
   1fc70:	6892      	ldr	r2, [r2, #8]
   1fc72:	4293      	cmp	r3, r2
   1fc74:	d132      	bne.n	1fcdc <z_impl_k_mutex_unlock+0x78>
{
#ifdef CONFIG_PREEMPT_ENABLED
	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(_current->base.sched_locked != 1, "");

	--_current->base.sched_locked;
   1fc76:	7bda      	ldrb	r2, [r3, #15]
   1fc78:	3a01      	subs	r2, #1
   1fc7a:	73da      	strb	r2, [r3, #15]

	/*
	 * If we are the owner and count is greater than 1, then decrement
	 * the count and return and keep current thread as the owner.
	 */
	if (mutex->lock_count - 1U != 0U) {
   1fc7c:	68c3      	ldr	r3, [r0, #12]
   1fc7e:	2b01      	cmp	r3, #1
   1fc80:	d005      	beq.n	1fc8e <z_impl_k_mutex_unlock+0x2a>
		mutex->lock_count--;
   1fc82:	3b01      	subs	r3, #1
   1fc84:	60c3      	str	r3, [r0, #12]
		k_spin_unlock(&lock, key);
	}


k_mutex_unlock_return:
	k_sched_unlock();
   1fc86:	f000 f909 	bl	1fe9c <k_sched_unlock>
	sys_trace_end_call(SYS_TRACE_ID_MUTEX_UNLOCK);

	return 0;
   1fc8a:	2000      	movs	r0, #0
}
   1fc8c:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile(
   1fc8e:	f04f 0320 	mov.w	r3, #32
   1fc92:	f3ef 8511 	mrs	r5, BASEPRI
   1fc96:	f383 8811 	msr	BASEPRI, r3
   1fc9a:	f3bf 8f6f 	isb	sy
	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   1fc9e:	6901      	ldr	r1, [r0, #16]
   1fca0:	6880      	ldr	r0, [r0, #8]
   1fca2:	f007 f844 	bl	26d2e <adjust_owner_prio.isra.0>
	new_owner = z_unpend_first_thread(&mutex->wait_q);
   1fca6:	4620      	mov	r0, r4
   1fca8:	f007 f9e2 	bl	27070 <z_unpend_first_thread>
	mutex->owner = new_owner;
   1fcac:	60a0      	str	r0, [r4, #8]
	if (new_owner != NULL) {
   1fcae:	b160      	cbz	r0, 1fcca <z_impl_k_mutex_unlock+0x66>
		mutex->owner_orig_prio = new_owner->base.prio;
   1fcb0:	f990 200e 	ldrsb.w	r2, [r0, #14]
   1fcb4:	6122      	str	r2, [r4, #16]
   1fcb6:	2200      	movs	r2, #0
   1fcb8:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		z_ready_thread(new_owner);
   1fcbc:	f007 f96b 	bl	26f96 <z_ready_thread>
		z_reschedule(&lock, key);
   1fcc0:	4809      	ldr	r0, [pc, #36]	; (1fce8 <z_impl_k_mutex_unlock+0x84>)
   1fcc2:	4629      	mov	r1, r5
   1fcc4:	f000 f886 	bl	1fdd4 <z_reschedule>
   1fcc8:	e7dd      	b.n	1fc86 <z_impl_k_mutex_unlock+0x22>
		mutex->lock_count = 0U;
   1fcca:	60e0      	str	r0, [r4, #12]
	__asm__ volatile(
   1fccc:	f385 8811 	msr	BASEPRI, r5
   1fcd0:	f3bf 8f6f 	isb	sy
   1fcd4:	e7d7      	b.n	1fc86 <z_impl_k_mutex_unlock+0x22>
		return -EINVAL;
   1fcd6:	f06f 0015 	mvn.w	r0, #21
   1fcda:	e7d7      	b.n	1fc8c <z_impl_k_mutex_unlock+0x28>
		return -EPERM;
   1fcdc:	f04f 30ff 	mov.w	r0, #4294967295
   1fce0:	e7d4      	b.n	1fc8c <z_impl_k_mutex_unlock+0x28>
   1fce2:	bf00      	nop
   1fce4:	2000ed08 	.word	0x2000ed08
   1fce8:	2000f324 	.word	0x2000f324

0001fcec <z_impl_k_queue_get>:

	return 0;
}

void *z_impl_k_queue_get(struct k_queue *queue, k_timeout_t timeout)
{
   1fcec:	b537      	push	{r0, r1, r2, r4, r5, lr}
   1fcee:	4611      	mov	r1, r2
	__asm__ volatile(
   1fcf0:	f04f 0220 	mov.w	r2, #32
   1fcf4:	f3ef 8511 	mrs	r5, BASEPRI
   1fcf8:	f382 8811 	msr	BASEPRI, r2
   1fcfc:	f3bf 8f6f 	isb	sy
 *
 * @return A pointer on the first node of the list (or NULL if none)
 */
static inline sys_sfnode_t *sys_sflist_peek_head(sys_sflist_t *list)
{
	return list->head;
   1fd00:	6804      	ldr	r4, [r0, #0]
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
	void *data;

	if (likely(!sys_sflist_is_empty(&queue->data_q))) {
   1fd02:	b19c      	cbz	r4, 1fd2c <z_impl_k_queue_get+0x40>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fd04:	6823      	ldr	r3, [r4, #0]
 *
 * @return A pointer to the first node of the list
 */
static inline sys_sfnode_t *sys_sflist_get_not_empty(sys_sflist_t *list);

Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fd06:	6842      	ldr	r2, [r0, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   1fd08:	f023 0303 	bic.w	r3, r3, #3
Z_GENLIST_GET_NOT_EMPTY(sflist, sfnode)
   1fd0c:	4294      	cmp	r4, r2
	list->head = node;
   1fd0e:	6003      	str	r3, [r0, #0]
	list->tail = node;
   1fd10:	bf08      	it	eq
   1fd12:	6043      	streq	r3, [r0, #4]
		sys_sfnode_t *node;

		node = sys_sflist_get_not_empty(&queue->data_q);
		data = z_queue_node_peek(node, true);
   1fd14:	2101      	movs	r1, #1
   1fd16:	4620      	mov	r0, r4
   1fd18:	f007 f87d 	bl	26e16 <z_queue_node_peek>
   1fd1c:	4604      	mov	r4, r0
	__asm__ volatile(
   1fd1e:	f385 8811 	msr	BASEPRI, r5
   1fd22:	f3bf 8f6f 	isb	sy
	}

	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);

	return (ret != 0) ? NULL : _current->base.swap_data;
}
   1fd26:	4620      	mov	r0, r4
   1fd28:	b003      	add	sp, #12
   1fd2a:	bd30      	pop	{r4, r5, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   1fd2c:	ea51 0203 	orrs.w	r2, r1, r3
   1fd30:	d0f5      	beq.n	1fd1e <z_impl_k_queue_get+0x32>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   1fd32:	f100 0208 	add.w	r2, r0, #8
	int ret = z_pend_curr(&queue->lock, key, &queue->wait_q, timeout);
   1fd36:	e9cd 1300 	strd	r1, r3, [sp]
   1fd3a:	4610      	mov	r0, r2
   1fd3c:	4629      	mov	r1, r5
   1fd3e:	f000 fa89 	bl	20254 <z_pend_curr>
	return (ret != 0) ? NULL : _current->base.swap_data;
   1fd42:	2800      	cmp	r0, #0
   1fd44:	d1ef      	bne.n	1fd26 <z_impl_k_queue_get+0x3a>
   1fd46:	4b02      	ldr	r3, [pc, #8]	; (1fd50 <z_impl_k_queue_get+0x64>)
   1fd48:	689b      	ldr	r3, [r3, #8]
   1fd4a:	695c      	ldr	r4, [r3, #20]
   1fd4c:	e7eb      	b.n	1fd26 <z_impl_k_queue_get+0x3a>
   1fd4e:	bf00      	nop
   1fd50:	2000ed08 	.word	0x2000ed08

0001fd54 <z_reset_time_slice>:
 */
static struct k_thread *pending_current;
#endif

void z_reset_time_slice(void)
{
   1fd54:	b510      	push	{r4, lr}
	/* Add the elapsed time since the last announced tick to the
	 * slice count, as we'll see those "expired" ticks arrive in a
	 * FUTURE z_time_slice() call.
	 */
	if (slice_time != 0) {
   1fd56:	4c08      	ldr	r4, [pc, #32]	; (1fd78 <z_reset_time_slice+0x24>)
   1fd58:	6823      	ldr	r3, [r4, #0]
   1fd5a:	b15b      	cbz	r3, 1fd74 <z_reset_time_slice+0x20>
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1fd5c:	f7e7 fabe 	bl	72dc <z_clock_elapsed>
   1fd60:	4603      	mov	r3, r0
   1fd62:	6820      	ldr	r0, [r4, #0]
   1fd64:	4a05      	ldr	r2, [pc, #20]	; (1fd7c <z_reset_time_slice+0x28>)
   1fd66:	4403      	add	r3, r0
		z_set_timeout_expiry(slice_time, false);
	}
}
   1fd68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		_current_cpu->slice_ticks = slice_time + z_clock_elapsed();
   1fd6c:	6153      	str	r3, [r2, #20]
		z_set_timeout_expiry(slice_time, false);
   1fd6e:	2100      	movs	r1, #0
   1fd70:	f007 ba64 	b.w	2723c <z_set_timeout_expiry>
}
   1fd74:	bd10      	pop	{r4, pc}
   1fd76:	bf00      	nop
   1fd78:	2000ed44 	.word	0x2000ed44
   1fd7c:	2000ed08 	.word	0x2000ed08

0001fd80 <k_sched_time_slice_set>:

void k_sched_time_slice_set(int32_t slice, int prio)
{
   1fd80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1fd82:	4604      	mov	r4, r0
   1fd84:	460d      	mov	r5, r1
	__asm__ volatile(
   1fd86:	f04f 0320 	mov.w	r3, #32
   1fd8a:	f3ef 8711 	mrs	r7, BASEPRI
   1fd8e:	f383 8811 	msr	BASEPRI, r3
   1fd92:	f3bf 8f6f 	isb	sy
	LOCKED(&sched_spinlock) {
		_current_cpu->slice_ticks = 0;
   1fd96:	4b0c      	ldr	r3, [pc, #48]	; (1fdc8 <k_sched_time_slice_set+0x48>)
   1fd98:	2100      	movs	r1, #0
			return (uint32_t)((t * to_hz + off) / from_hz);
   1fd9a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   1fd9e:	f240 30e7 	movw	r0, #999	; 0x3e7
   1fda2:	6159      	str	r1, [r3, #20]
   1fda4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fda8:	2300      	movs	r3, #0
   1fdaa:	fbe4 0106 	umlal	r0, r1, r4, r6
   1fdae:	f7e1 f8f3 	bl	f98 <__aeabi_uldivmod>
		slice_time = k_ms_to_ticks_ceil32(slice);
   1fdb2:	4b06      	ldr	r3, [pc, #24]	; (1fdcc <k_sched_time_slice_set+0x4c>)
   1fdb4:	6018      	str	r0, [r3, #0]
		slice_max_prio = prio;
   1fdb6:	4b06      	ldr	r3, [pc, #24]	; (1fdd0 <k_sched_time_slice_set+0x50>)
   1fdb8:	601d      	str	r5, [r3, #0]
		z_reset_time_slice();
   1fdba:	f7ff ffcb 	bl	1fd54 <z_reset_time_slice>
	__asm__ volatile(
   1fdbe:	f387 8811 	msr	BASEPRI, r7
   1fdc2:	f3bf 8f6f 	isb	sy
	}
}
   1fdc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1fdc8:	2000ed08 	.word	0x2000ed08
   1fdcc:	2000ed44 	.word	0x2000ed44
   1fdd0:	2000ed40 	.word	0x2000ed40

0001fdd4 <z_reschedule>:
{
#ifdef CONFIG_SMP
	_current_cpu->swap_ok = 0;
#endif

	return arch_irq_unlocked(key) && !arch_is_in_isr();
   1fdd4:	b949      	cbnz	r1, 1fdea <z_reschedule+0x16>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   1fdd6:	f3ef 8005 	mrs	r0, IPSR
   1fdda:	b930      	cbnz	r0, 1fdea <z_reschedule+0x16>
	return _kernel.ready_q.cache;
   1fddc:	4b05      	ldr	r3, [pc, #20]	; (1fdf4 <z_reschedule+0x20>)
#endif
}

void z_reschedule(struct k_spinlock *lock, k_spinlock_key_t key)
{
	if (resched(key.key) && need_swap()) {
   1fdde:	6a9a      	ldr	r2, [r3, #40]	; 0x28
   1fde0:	689b      	ldr	r3, [r3, #8]
   1fde2:	429a      	cmp	r2, r3
   1fde4:	d001      	beq.n	1fdea <z_reschedule+0x16>
	ret = arch_swap(key);
   1fde6:	f7e7 bc5b 	b.w	76a0 <arch_swap>
   1fdea:	f381 8811 	msr	BASEPRI, r1
   1fdee:	f3bf 8f6f 	isb	sy
		z_swap(lock, key);
	} else {
		k_spin_unlock(lock, key);
	}
}
   1fdf2:	4770      	bx	lr
   1fdf4:	2000ed08 	.word	0x2000ed08

0001fdf8 <k_sched_lock>:
	__asm__ volatile(
   1fdf8:	f04f 0320 	mov.w	r3, #32
   1fdfc:	f3ef 8111 	mrs	r1, BASEPRI
   1fe00:	f383 8811 	msr	BASEPRI, r3
   1fe04:	f3bf 8f6f 	isb	sy
	--_current->base.sched_locked;
   1fe08:	4b04      	ldr	r3, [pc, #16]	; (1fe1c <k_sched_lock+0x24>)
   1fe0a:	689a      	ldr	r2, [r3, #8]
   1fe0c:	7bd3      	ldrb	r3, [r2, #15]
   1fe0e:	3b01      	subs	r3, #1
   1fe10:	73d3      	strb	r3, [r2, #15]
	__asm__ volatile(
   1fe12:	f381 8811 	msr	BASEPRI, r1
   1fe16:	f3bf 8f6f 	isb	sy
void k_sched_lock(void)
{
	LOCKED(&sched_spinlock) {
		z_sched_lock();
	}
}
   1fe1a:	4770      	bx	lr
   1fe1c:	2000ed08 	.word	0x2000ed08

0001fe20 <z_priq_dumb_remove>:
}

void z_priq_dumb_remove(sys_dlist_t *pq, struct k_thread *thread)
{
#if defined(CONFIG_SWAP_NONATOMIC) && defined(CONFIG_SCHED_DUMB)
	if (pq == &_kernel.ready_q.runq && thread == _current &&
   1fe20:	4b09      	ldr	r3, [pc, #36]	; (1fe48 <z_priq_dumb_remove+0x28>)
   1fe22:	f103 022c 	add.w	r2, r3, #44	; 0x2c
   1fe26:	4282      	cmp	r2, r0
   1fe28:	d105      	bne.n	1fe36 <z_priq_dumb_remove+0x16>
   1fe2a:	689b      	ldr	r3, [r3, #8]
   1fe2c:	428b      	cmp	r3, r1
   1fe2e:	d102      	bne.n	1fe36 <z_priq_dumb_remove+0x16>
   1fe30:	7b4b      	ldrb	r3, [r1, #13]
   1fe32:	06db      	lsls	r3, r3, #27
   1fe34:	d106      	bne.n	1fe44 <z_priq_dumb_remove+0x24>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   1fe36:	e9d1 3200 	ldrd	r3, r2, [r1]
   1fe3a:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   1fe3c:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   1fe3e:	2300      	movs	r3, #0
	node->prev = NULL;
   1fe40:	e9c1 3300 	strd	r3, r3, [r1]
#endif

	__ASSERT_NO_MSG(!z_is_idle_thread_object(thread));

	sys_dlist_remove(&thread->base.qnode_dlist);
}
   1fe44:	4770      	bx	lr
   1fe46:	bf00      	nop
   1fe48:	2000ed08 	.word	0x2000ed08

0001fe4c <update_cache>:
{
   1fe4c:	b538      	push	{r3, r4, r5, lr}
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fe4e:	4d12      	ldr	r5, [pc, #72]	; (1fe98 <update_cache+0x4c>)
	if (_current_cpu->pending_abort != NULL) {
   1fe50:	692b      	ldr	r3, [r5, #16]
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fe52:	68aa      	ldr	r2, [r5, #8]
{
   1fe54:	4601      	mov	r1, r0
	if (_current_cpu->pending_abort != NULL) {
   1fe56:	b10b      	cbz	r3, 1fe5c <update_cache+0x10>
	return thread ? thread : _current_cpu->idle_thread;
   1fe58:	68ec      	ldr	r4, [r5, #12]
   1fe5a:	e00c      	b.n	1fe76 <update_cache+0x2a>
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fe5c:	f105 002c 	add.w	r0, r5, #44	; 0x2c
   1fe60:	f007 f893 	bl	26f8a <z_priq_dumb_best>
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fe64:	7b53      	ldrb	r3, [r2, #13]
	thread = _priq_run_best(&_kernel.ready_q.runq);
   1fe66:	4604      	mov	r4, r0
	if (_current->base.thread_state & _THREAD_ABORTING) {
   1fe68:	0698      	lsls	r0, r3, #26
		_current->base.thread_state |= _THREAD_DEAD;
   1fe6a:	bf44      	itt	mi
   1fe6c:	f043 0308 	orrmi.w	r3, r3, #8
   1fe70:	7353      	strbmi	r3, [r2, #13]
	return thread ? thread : _current_cpu->idle_thread;
   1fe72:	2c00      	cmp	r4, #0
   1fe74:	d0f0      	beq.n	1fe58 <update_cache+0xc>
	if (preempt_ok != 0) {
   1fe76:	b949      	cbnz	r1, 1fe8c <update_cache+0x40>
	if (z_is_thread_prevented_from_running(_current)) {
   1fe78:	7b53      	ldrb	r3, [r2, #13]
   1fe7a:	06db      	lsls	r3, r3, #27
   1fe7c:	d106      	bne.n	1fe8c <update_cache+0x40>
	if (IS_ENABLED(CONFIG_SWAP_NONATOMIC)
   1fe7e:	69a3      	ldr	r3, [r4, #24]
   1fe80:	b923      	cbnz	r3, 1fe8c <update_cache+0x40>
	if (is_preempt(_current) || is_metairq(thread)) {
   1fe82:	89d3      	ldrh	r3, [r2, #14]
   1fe84:	2b7f      	cmp	r3, #127	; 0x7f
   1fe86:	d901      	bls.n	1fe8c <update_cache+0x40>
		_kernel.ready_q.cache = _current;
   1fe88:	62aa      	str	r2, [r5, #40]	; 0x28
}
   1fe8a:	bd38      	pop	{r3, r4, r5, pc}
		if (thread != _current) {
   1fe8c:	4294      	cmp	r4, r2
   1fe8e:	d001      	beq.n	1fe94 <update_cache+0x48>
			z_reset_time_slice();
   1fe90:	f7ff ff60 	bl	1fd54 <z_reset_time_slice>
		_kernel.ready_q.cache = thread;
   1fe94:	62ac      	str	r4, [r5, #40]	; 0x28
}
   1fe96:	e7f8      	b.n	1fe8a <update_cache+0x3e>
   1fe98:	2000ed08 	.word	0x2000ed08

0001fe9c <k_sched_unlock>:
{
   1fe9c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1fe9e:	f04f 0320 	mov.w	r3, #32
   1fea2:	f3ef 8411 	mrs	r4, BASEPRI
   1fea6:	f383 8811 	msr	BASEPRI, r3
   1feaa:	f3bf 8f6f 	isb	sy
		++_current->base.sched_locked;
   1feae:	4b08      	ldr	r3, [pc, #32]	; (1fed0 <k_sched_unlock+0x34>)
   1feb0:	689a      	ldr	r2, [r3, #8]
   1feb2:	7bd3      	ldrb	r3, [r2, #15]
   1feb4:	3301      	adds	r3, #1
   1feb6:	73d3      	strb	r3, [r2, #15]
		update_cache(0);
   1feb8:	2000      	movs	r0, #0
   1feba:	f7ff ffc7 	bl	1fe4c <update_cache>
	__asm__ volatile(
   1febe:	f384 8811 	msr	BASEPRI, r4
   1fec2:	f3bf 8f6f 	isb	sy
}
   1fec6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule_unlocked();
   1feca:	f007 b832 	b.w	26f32 <z_reschedule_unlocked>
   1fece:	bf00      	nop
   1fed0:	2000ed08 	.word	0x2000ed08

0001fed4 <ready_thread>:
{
   1fed4:	b4f0      	push	{r4, r5, r6, r7}
	if (!z_is_thread_queued(thread) && z_is_thread_ready(thread)) {
   1fed6:	f990 300d 	ldrsb.w	r3, [r0, #13]
	return (thread->base.thread_state & state) != 0U;
   1feda:	7b41      	ldrb	r1, [r0, #13]
   1fedc:	2b00      	cmp	r3, #0
   1fede:	db28      	blt.n	1ff32 <ready_thread+0x5e>
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   1fee0:	06cb      	lsls	r3, r1, #27
   1fee2:	d126      	bne.n	1ff32 <ready_thread+0x5e>
   1fee4:	6983      	ldr	r3, [r0, #24]
   1fee6:	bb23      	cbnz	r3, 1ff32 <ready_thread+0x5e>
	return list->head == list;
   1fee8:	4a13      	ldr	r2, [pc, #76]	; (1ff38 <ready_thread+0x64>)
	return (node == list->tail) ? NULL : node->next;
   1feea:	e9d2 340b 	ldrd	r3, r4, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1feee:	f102 052c 	add.w	r5, r2, #44	; 0x2c
   1fef2:	42ab      	cmp	r3, r5
   1fef4:	d017      	beq.n	1ff26 <ready_thread+0x52>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1fef6:	b1b3      	cbz	r3, 1ff26 <ready_thread+0x52>
	if (thread_1->base.prio < thread_2->base.prio) {
   1fef8:	f990 600e 	ldrsb.w	r6, [r0, #14]
   1fefc:	f993 700e 	ldrsb.w	r7, [r3, #14]
   1ff00:	42b7      	cmp	r7, r6
   1ff02:	dd0b      	ble.n	1ff1c <ready_thread+0x48>
	node->prev = successor->prev;
   1ff04:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   1ff06:	e9c0 3200 	strd	r3, r2, [r0]
	successor->prev->next = node;
   1ff0a:	6010      	str	r0, [r2, #0]
	successor->prev = node;
   1ff0c:	6058      	str	r0, [r3, #4]
	thread->base.thread_state |= states;
   1ff0e:	f061 017f 	orn	r1, r1, #127	; 0x7f
   1ff12:	7341      	strb	r1, [r0, #13]
}
   1ff14:	bcf0      	pop	{r4, r5, r6, r7}
		update_cache(0);
   1ff16:	2000      	movs	r0, #0
   1ff18:	f7ff bf98 	b.w	1fe4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ff1c:	42a3      	cmp	r3, r4
   1ff1e:	d002      	beq.n	1ff26 <ready_thread+0x52>
   1ff20:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ff22:	2b00      	cmp	r3, #0
   1ff24:	d1ea      	bne.n	1fefc <ready_thread+0x28>
	node->prev = list->tail;
   1ff26:	e9c0 5400 	strd	r5, r4, [r0]
	list->tail->next = node;
   1ff2a:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ff2c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   1ff2e:	6310      	str	r0, [r2, #48]	; 0x30
}
   1ff30:	e7ed      	b.n	1ff0e <ready_thread+0x3a>
}
   1ff32:	bcf0      	pop	{r4, r5, r6, r7}
   1ff34:	4770      	bx	lr
   1ff36:	bf00      	nop
   1ff38:	2000ed08 	.word	0x2000ed08

0001ff3c <z_sched_start>:
{
   1ff3c:	b510      	push	{r4, lr}
	__asm__ volatile(
   1ff3e:	f04f 0220 	mov.w	r2, #32
   1ff42:	f3ef 8411 	mrs	r4, BASEPRI
   1ff46:	f382 8811 	msr	BASEPRI, r2
   1ff4a:	f3bf 8f6f 	isb	sy
	return (thread->base.thread_state & _THREAD_PRESTART) == 0U;
   1ff4e:	7b42      	ldrb	r2, [r0, #13]
	if (z_has_thread_started(thread)) {
   1ff50:	0751      	lsls	r1, r2, #29
   1ff52:	d404      	bmi.n	1ff5e <z_sched_start+0x22>
	__asm__ volatile(
   1ff54:	f384 8811 	msr	BASEPRI, r4
   1ff58:	f3bf 8f6f 	isb	sy
}
   1ff5c:	bd10      	pop	{r4, pc}
	thread->base.thread_state &= ~_THREAD_PRESTART;
   1ff5e:	f022 0204 	bic.w	r2, r2, #4
   1ff62:	7342      	strb	r2, [r0, #13]
	ready_thread(thread);
   1ff64:	f7ff ffb6 	bl	1fed4 <ready_thread>
	z_reschedule(&sched_spinlock, key);
   1ff68:	4621      	mov	r1, r4
   1ff6a:	4802      	ldr	r0, [pc, #8]	; (1ff74 <z_sched_start+0x38>)
}
   1ff6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	z_reschedule(&sched_spinlock, key);
   1ff70:	f7ff bf30 	b.w	1fdd4 <z_reschedule>
   1ff74:	2000f324 	.word	0x2000f324

0001ff78 <move_thread_to_end_of_prio_q>:
{
   1ff78:	b570      	push	{r4, r5, r6, lr}
	if (z_is_thread_queued(thread)) {
   1ff7a:	f990 300d 	ldrsb.w	r3, [r0, #13]
   1ff7e:	2b00      	cmp	r3, #0
{
   1ff80:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   1ff82:	da02      	bge.n	1ff8a <move_thread_to_end_of_prio_q+0x12>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   1ff84:	4816      	ldr	r0, [pc, #88]	; (1ffe0 <move_thread_to_end_of_prio_q+0x68>)
   1ff86:	f7ff ff4b 	bl	1fe20 <z_priq_dumb_remove>
	return list->head == list;
   1ff8a:	4a16      	ldr	r2, [pc, #88]	; (1ffe4 <move_thread_to_end_of_prio_q+0x6c>)
	return (node == list->tail) ? NULL : node->next;
   1ff8c:	e9d2 300b 	ldrd	r3, r0, [r2, #44]	; 0x2c
	return sys_dlist_is_empty(list) ? NULL : list->head;
   1ff90:	f102 042c 	add.w	r4, r2, #44	; 0x2c
   1ff94:	42a3      	cmp	r3, r4
   1ff96:	d01c      	beq.n	1ffd2 <move_thread_to_end_of_prio_q+0x5a>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ff98:	b1db      	cbz	r3, 1ffd2 <move_thread_to_end_of_prio_q+0x5a>
	if (thread_1->base.prio < thread_2->base.prio) {
   1ff9a:	f991 500e 	ldrsb.w	r5, [r1, #14]
   1ff9e:	f993 600e 	ldrsb.w	r6, [r3, #14]
   1ffa2:	42ae      	cmp	r6, r5
   1ffa4:	dd10      	ble.n	1ffc8 <move_thread_to_end_of_prio_q+0x50>
	node->prev = successor->prev;
   1ffa6:	6858      	ldr	r0, [r3, #4]
	node->next = successor;
   1ffa8:	e9c1 3000 	strd	r3, r0, [r1]
	successor->prev->next = node;
   1ffac:	6001      	str	r1, [r0, #0]
	successor->prev = node;
   1ffae:	6059      	str	r1, [r3, #4]
	thread->base.thread_state |= states;
   1ffb0:	7b4b      	ldrb	r3, [r1, #13]
	update_cache(thread == _current);
   1ffb2:	6890      	ldr	r0, [r2, #8]
   1ffb4:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1ffb8:	734b      	strb	r3, [r1, #13]
   1ffba:	1a43      	subs	r3, r0, r1
   1ffbc:	4258      	negs	r0, r3
}
   1ffbe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	update_cache(thread == _current);
   1ffc2:	4158      	adcs	r0, r3
   1ffc4:	f7ff bf42 	b.w	1fe4c <update_cache>
	return (node == list->tail) ? NULL : node->next;
   1ffc8:	4283      	cmp	r3, r0
   1ffca:	d002      	beq.n	1ffd2 <move_thread_to_end_of_prio_q+0x5a>
   1ffcc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   1ffce:	2b00      	cmp	r3, #0
   1ffd0:	d1e5      	bne.n	1ff9e <move_thread_to_end_of_prio_q+0x26>
	node->prev = list->tail;
   1ffd2:	e9c1 4000 	strd	r4, r0, [r1]
	list->tail->next = node;
   1ffd6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   1ffd8:	6019      	str	r1, [r3, #0]
	list->tail = node;
   1ffda:	6311      	str	r1, [r2, #48]	; 0x30
}
   1ffdc:	e7e8      	b.n	1ffb0 <move_thread_to_end_of_prio_q+0x38>
   1ffde:	bf00      	nop
   1ffe0:	2000ed34 	.word	0x2000ed34
   1ffe4:	2000ed08 	.word	0x2000ed08

0001ffe8 <z_time_slice>:
{
   1ffe8:	b538      	push	{r3, r4, r5, lr}
   1ffea:	4601      	mov	r1, r0
	__asm__ volatile(
   1ffec:	f04f 0320 	mov.w	r3, #32
   1fff0:	f3ef 8411 	mrs	r4, BASEPRI
   1fff4:	f383 8811 	msr	BASEPRI, r3
   1fff8:	f3bf 8f6f 	isb	sy
	if (pending_current == _current) {
   1fffc:	4b15      	ldr	r3, [pc, #84]	; (20054 <z_time_slice+0x6c>)
   1fffe:	4a16      	ldr	r2, [pc, #88]	; (20058 <z_time_slice+0x70>)
   20000:	6898      	ldr	r0, [r3, #8]
   20002:	6815      	ldr	r5, [r2, #0]
   20004:	42a8      	cmp	r0, r5
   20006:	d106      	bne.n	20016 <z_time_slice+0x2e>
			z_reset_time_slice();
   20008:	f7ff fea4 	bl	1fd54 <z_reset_time_slice>
	__asm__ volatile(
   2000c:	f384 8811 	msr	BASEPRI, r4
   20010:	f3bf 8f6f 	isb	sy
}
   20014:	bd38      	pop	{r3, r4, r5, pc}
	pending_current = NULL;
   20016:	2500      	movs	r5, #0
   20018:	6015      	str	r5, [r2, #0]
	if (slice_time && sliceable(_current)) {
   2001a:	4a10      	ldr	r2, [pc, #64]	; (2005c <z_time_slice+0x74>)
   2001c:	6812      	ldr	r2, [r2, #0]
   2001e:	b1ba      	cbz	r2, 20050 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   20020:	89c2      	ldrh	r2, [r0, #14]
   20022:	2a7f      	cmp	r2, #127	; 0x7f
   20024:	d814      	bhi.n	20050 <z_time_slice+0x68>
		&& !z_is_thread_prevented_from_running(thread)
   20026:	7b42      	ldrb	r2, [r0, #13]
   20028:	06d2      	lsls	r2, r2, #27
   2002a:	d111      	bne.n	20050 <z_time_slice+0x68>
		&& !z_is_prio_higher(thread->base.prio, slice_max_prio)
   2002c:	4a0c      	ldr	r2, [pc, #48]	; (20060 <z_time_slice+0x78>)
   2002e:	f990 500e 	ldrsb.w	r5, [r0, #14]
   20032:	6812      	ldr	r2, [r2, #0]
   20034:	4295      	cmp	r5, r2
   20036:	db0b      	blt.n	20050 <z_time_slice+0x68>
		&& !z_is_idle_thread_object(thread);
   20038:	4a0a      	ldr	r2, [pc, #40]	; (20064 <z_time_slice+0x7c>)
   2003a:	4290      	cmp	r0, r2
   2003c:	d008      	beq.n	20050 <z_time_slice+0x68>
		if (ticks >= _current_cpu->slice_ticks) {
   2003e:	695a      	ldr	r2, [r3, #20]
   20040:	428a      	cmp	r2, r1
   20042:	dc02      	bgt.n	2004a <z_time_slice+0x62>
			move_thread_to_end_of_prio_q(_current);
   20044:	f7ff ff98 	bl	1ff78 <move_thread_to_end_of_prio_q>
   20048:	e7de      	b.n	20008 <z_time_slice+0x20>
			_current_cpu->slice_ticks -= ticks;
   2004a:	1a52      	subs	r2, r2, r1
		_current_cpu->slice_ticks = 0;
   2004c:	615a      	str	r2, [r3, #20]
   2004e:	e7dd      	b.n	2000c <z_time_slice+0x24>
   20050:	2200      	movs	r2, #0
   20052:	e7fb      	b.n	2004c <z_time_slice+0x64>
   20054:	2000ed08 	.word	0x2000ed08
   20058:	2000ed3c 	.word	0x2000ed3c
   2005c:	2000ed44 	.word	0x2000ed44
   20060:	2000ed40 	.word	0x2000ed40
   20064:	2000ab98 	.word	0x2000ab98

00020068 <z_impl_k_thread_suspend>:
{
   20068:	b570      	push	{r4, r5, r6, lr}
   2006a:	4604      	mov	r4, r0
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
}

static inline int z_abort_thread_timeout(struct k_thread *thread)
{
	return z_abort_timeout(&thread->base.timeout);
   2006c:	3018      	adds	r0, #24
   2006e:	f007 f8bf 	bl	271f0 <z_abort_timeout>
	__asm__ volatile(
   20072:	f04f 0320 	mov.w	r3, #32
   20076:	f3ef 8611 	mrs	r6, BASEPRI
   2007a:	f383 8811 	msr	BASEPRI, r3
   2007e:	f3bf 8f6f 	isb	sy
		if (z_is_thread_queued(thread)) {
   20082:	f994 300d 	ldrsb.w	r3, [r4, #13]
   20086:	2b00      	cmp	r3, #0
   20088:	da07      	bge.n	2009a <z_impl_k_thread_suspend+0x32>
			_priq_run_remove(&_kernel.ready_q.runq, thread);
   2008a:	480f      	ldr	r0, [pc, #60]	; (200c8 <z_impl_k_thread_suspend+0x60>)
   2008c:	4621      	mov	r1, r4
   2008e:	f7ff fec7 	bl	1fe20 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20092:	7b63      	ldrb	r3, [r4, #13]
   20094:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   20098:	7363      	strb	r3, [r4, #13]
		update_cache(thread == _current);
   2009a:	4d0c      	ldr	r5, [pc, #48]	; (200cc <z_impl_k_thread_suspend+0x64>)
	thread->base.thread_state |= _THREAD_SUSPENDED;
   2009c:	7b63      	ldrb	r3, [r4, #13]
   2009e:	68a8      	ldr	r0, [r5, #8]
   200a0:	f043 0310 	orr.w	r3, r3, #16
   200a4:	7363      	strb	r3, [r4, #13]
   200a6:	1b03      	subs	r3, r0, r4
   200a8:	4258      	negs	r0, r3
   200aa:	4158      	adcs	r0, r3
   200ac:	f7ff fece 	bl	1fe4c <update_cache>
	__asm__ volatile(
   200b0:	f386 8811 	msr	BASEPRI, r6
   200b4:	f3bf 8f6f 	isb	sy
	if (thread == _current) {
   200b8:	68ab      	ldr	r3, [r5, #8]
   200ba:	42a3      	cmp	r3, r4
   200bc:	d103      	bne.n	200c6 <z_impl_k_thread_suspend+0x5e>
}
   200be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		z_reschedule_unlocked();
   200c2:	f006 bf36 	b.w	26f32 <z_reschedule_unlocked>
}
   200c6:	bd70      	pop	{r4, r5, r6, pc}
   200c8:	2000ed34 	.word	0x2000ed34
   200cc:	2000ed08 	.word	0x2000ed08

000200d0 <z_thread_single_abort>:
{
   200d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   200d4:	4604      	mov	r4, r0
	__asm__ volatile(
   200d6:	f04f 0320 	mov.w	r3, #32
   200da:	f3ef 8211 	mrs	r2, BASEPRI
   200de:	f383 8811 	msr	BASEPRI, r3
   200e2:	f3bf 8f6f 	isb	sy
	if ((thread->base.thread_state &
   200e6:	7b43      	ldrb	r3, [r0, #13]
   200e8:	f013 0f28 	tst.w	r3, #40	; 0x28
   200ec:	d005      	beq.n	200fa <z_thread_single_abort+0x2a>
	__asm__ volatile(
   200ee:	f382 8811 	msr	BASEPRI, r2
   200f2:	f3bf 8f6f 	isb	sy
}
   200f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	thread->base.thread_state |= _THREAD_ABORTING;
   200fa:	f043 0320 	orr.w	r3, r3, #32
   200fe:	7343      	strb	r3, [r0, #13]
   20100:	f382 8811 	msr	BASEPRI, r2
   20104:	f3bf 8f6f 	isb	sy
   20108:	3018      	adds	r0, #24
   2010a:	f007 f871 	bl	271f0 <z_abort_timeout>
	__asm__ volatile(
   2010e:	f04f 0320 	mov.w	r3, #32
   20112:	f3ef 8611 	mrs	r6, BASEPRI
   20116:	f383 8811 	msr	BASEPRI, r3
   2011a:	f3bf 8f6f 	isb	sy
	uint8_t state = thread->base.thread_state;
   2011e:	7b63      	ldrb	r3, [r4, #13]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20120:	06d8      	lsls	r0, r3, #27
   20122:	d116      	bne.n	20152 <z_thread_single_abort+0x82>
		if (z_is_thread_ready(thread)) {
   20124:	69a2      	ldr	r2, [r4, #24]
   20126:	b9a2      	cbnz	r2, 20152 <z_thread_single_abort+0x82>
			if (z_is_thread_queued(thread)) {
   20128:	0619      	lsls	r1, r3, #24
   2012a:	d507      	bpl.n	2013c <z_thread_single_abort+0x6c>
				_priq_run_remove(&_kernel.ready_q.runq,
   2012c:	4826      	ldr	r0, [pc, #152]	; (201c8 <z_thread_single_abort+0xf8>)
   2012e:	4621      	mov	r1, r4
   20130:	f7ff fe76 	bl	1fe20 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   20134:	7b63      	ldrb	r3, [r4, #13]
   20136:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   2013a:	7363      	strb	r3, [r4, #13]
			update_cache(thread == _current);
   2013c:	4b23      	ldr	r3, [pc, #140]	; (201cc <z_thread_single_abort+0xfc>)
   2013e:	6898      	ldr	r0, [r3, #8]
   20140:	1b02      	subs	r2, r0, r4
   20142:	4250      	negs	r0, r2
   20144:	4150      	adcs	r0, r2
   20146:	f7ff fe81 	bl	1fe4c <update_cache>
	sys_dlist_init(&w->waitq);
}

static inline struct k_thread *z_waitq_head(_wait_q_t *w)
{
	return (struct k_thread *)sys_dlist_peek_head(&w->waitq);
   2014a:	f104 0830 	add.w	r8, r4, #48	; 0x30
			waiter->base.pended_on = NULL;
   2014e:	2700      	movs	r7, #0
   20150:	e01e      	b.n	20190 <z_thread_single_abort+0xc0>
			if (z_is_thread_pending(thread)) {
   20152:	079b      	lsls	r3, r3, #30
   20154:	d5f9      	bpl.n	2014a <z_thread_single_abort+0x7a>
				_priq_wait_remove(&pended_on(thread)->waitq,
   20156:	68a0      	ldr	r0, [r4, #8]
   20158:	4621      	mov	r1, r4
   2015a:	f7ff fe61 	bl	1fe20 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   2015e:	7b63      	ldrb	r3, [r4, #13]
   20160:	f023 0302 	bic.w	r3, r3, #2
   20164:	7363      	strb	r3, [r4, #13]
				thread->base.pended_on = NULL;
   20166:	2300      	movs	r3, #0
   20168:	60a3      	str	r3, [r4, #8]
   2016a:	e7ee      	b.n	2014a <z_thread_single_abort+0x7a>
   2016c:	f105 0018 	add.w	r0, r5, #24
   20170:	f007 f83e 	bl	271f0 <z_abort_timeout>
			_priq_wait_remove(&pended_on(waiter)->waitq, waiter);
   20174:	68a8      	ldr	r0, [r5, #8]
   20176:	4629      	mov	r1, r5
   20178:	f7ff fe52 	bl	1fe20 <z_priq_dumb_remove>
   2017c:	7b6b      	ldrb	r3, [r5, #13]
			waiter->base.pended_on = NULL;
   2017e:	60af      	str	r7, [r5, #8]
   20180:	f023 0302 	bic.w	r3, r3, #2
   20184:	736b      	strb	r3, [r5, #13]
   20186:	f8c5 7080 	str.w	r7, [r5, #128]	; 0x80
			ready_thread(waiter);
   2018a:	4628      	mov	r0, r5
   2018c:	f7ff fea2 	bl	1fed4 <ready_thread>
	return list->head == list;
   20190:	6b25      	ldr	r5, [r4, #48]	; 0x30
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20192:	4545      	cmp	r5, r8
   20194:	d001      	beq.n	2019a <z_thread_single_abort+0xca>
		while ((waiter = z_waitq_head(&thread->base.join_waiters)) !=
   20196:	2d00      	cmp	r5, #0
   20198:	d1e8      	bne.n	2016c <z_thread_single_abort+0x9c>
		if (z_is_idle_thread_object(_current)) {
   2019a:	4b0c      	ldr	r3, [pc, #48]	; (201cc <z_thread_single_abort+0xfc>)
   2019c:	689a      	ldr	r2, [r3, #8]
   2019e:	4b0c      	ldr	r3, [pc, #48]	; (201d0 <z_thread_single_abort+0x100>)
   201a0:	429a      	cmp	r2, r3
   201a2:	d102      	bne.n	201aa <z_thread_single_abort+0xda>
			update_cache(1);
   201a4:	2001      	movs	r0, #1
   201a6:	f7ff fe51 	bl	1fe4c <update_cache>
		thread->base.thread_state |= _THREAD_DEAD;
   201aa:	7b63      	ldrb	r3, [r4, #13]
   201ac:	f043 0308 	orr.w	r3, r3, #8
   201b0:	7363      	strb	r3, [r4, #13]
		fn_abort = thread->fn_abort;
   201b2:	6e23      	ldr	r3, [r4, #96]	; 0x60
	__asm__ volatile(
   201b4:	f386 8811 	msr	BASEPRI, r6
   201b8:	f3bf 8f6f 	isb	sy
	if (fn_abort != NULL) {
   201bc:	2b00      	cmp	r3, #0
   201be:	d09a      	beq.n	200f6 <z_thread_single_abort+0x26>
		fn_abort(thread);
   201c0:	4620      	mov	r0, r4
}
   201c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		fn_abort(thread);
   201c6:	4718      	bx	r3
   201c8:	2000ed34 	.word	0x2000ed34
   201cc:	2000ed08 	.word	0x2000ed08
   201d0:	2000ab98 	.word	0x2000ab98

000201d4 <unready_thread>:
{
   201d4:	b508      	push	{r3, lr}
	if (z_is_thread_queued(thread)) {
   201d6:	f990 300d 	ldrsb.w	r3, [r0, #13]
   201da:	2b00      	cmp	r3, #0
{
   201dc:	4601      	mov	r1, r0
	if (z_is_thread_queued(thread)) {
   201de:	da06      	bge.n	201ee <unready_thread+0x1a>
		_priq_run_remove(&_kernel.ready_q.runq, thread);
   201e0:	4807      	ldr	r0, [pc, #28]	; (20200 <unready_thread+0x2c>)
   201e2:	f7ff fe1d 	bl	1fe20 <z_priq_dumb_remove>
	thread->base.thread_state &= ~states;
   201e6:	7b4b      	ldrb	r3, [r1, #13]
   201e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   201ec:	734b      	strb	r3, [r1, #13]
	update_cache(thread == _current);
   201ee:	4b05      	ldr	r3, [pc, #20]	; (20204 <unready_thread+0x30>)
   201f0:	6898      	ldr	r0, [r3, #8]
   201f2:	1a43      	subs	r3, r0, r1
   201f4:	4258      	negs	r0, r3
   201f6:	4158      	adcs	r0, r3
}
   201f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	update_cache(thread == _current);
   201fc:	f7ff be26 	b.w	1fe4c <update_cache>
   20200:	2000ed34 	.word	0x2000ed34
   20204:	2000ed08 	.word	0x2000ed08

00020208 <pend>:
{
   20208:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2020c:	4606      	mov	r6, r0
   2020e:	4615      	mov	r5, r2
   20210:	461c      	mov	r4, r3
	__asm__ volatile(
   20212:	f04f 0320 	mov.w	r3, #32
   20216:	f3ef 8711 	mrs	r7, BASEPRI
   2021a:	f383 8811 	msr	BASEPRI, r3
   2021e:	f3bf 8f6f 	isb	sy
		add_to_waitq_locked(thread, wait_q);
   20222:	f006 fee8 	bl	26ff6 <add_to_waitq_locked>
	__asm__ volatile(
   20226:	f387 8811 	msr	BASEPRI, r7
   2022a:	f3bf 8f6f 	isb	sy
	if (!K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2022e:	f1b4 3fff 	cmp.w	r4, #4294967295
   20232:	bf08      	it	eq
   20234:	f1b5 3fff 	cmpeq.w	r5, #4294967295
   20238:	d008      	beq.n	2024c <pend+0x44>
	z_add_timeout(&th->base.timeout, z_thread_timeout, ticks);
   2023a:	462a      	mov	r2, r5
   2023c:	4623      	mov	r3, r4
   2023e:	f106 0018 	add.w	r0, r6, #24
   20242:	4903      	ldr	r1, [pc, #12]	; (20250 <pend+0x48>)
}
   20244:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   20248:	f000 bb18 	b.w	2087c <z_add_timeout>
   2024c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20250:	00026fb7 	.word	0x00026fb7

00020254 <z_pend_curr>:
{
   20254:	b510      	push	{r4, lr}
	pending_current = _current;
   20256:	4b07      	ldr	r3, [pc, #28]	; (20274 <z_pend_curr+0x20>)
   20258:	6898      	ldr	r0, [r3, #8]
   2025a:	4b07      	ldr	r3, [pc, #28]	; (20278 <z_pend_curr+0x24>)
{
   2025c:	460c      	mov	r4, r1
	pending_current = _current;
   2025e:	6018      	str	r0, [r3, #0]
{
   20260:	4611      	mov	r1, r2
	pend(_current, wait_q, timeout);
   20262:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   20266:	f7ff ffcf 	bl	20208 <pend>
   2026a:	4620      	mov	r0, r4
}
   2026c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   20270:	f7e7 ba16 	b.w	76a0 <arch_swap>
   20274:	2000ed08 	.word	0x2000ed08
   20278:	2000ed3c 	.word	0x2000ed3c

0002027c <z_set_prio>:
{
   2027c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2027e:	4604      	mov	r4, r0
	__asm__ volatile(
   20280:	f04f 0320 	mov.w	r3, #32
   20284:	f3ef 8711 	mrs	r7, BASEPRI
   20288:	f383 8811 	msr	BASEPRI, r3
   2028c:	f3bf 8f6f 	isb	sy
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   20290:	7b43      	ldrb	r3, [r0, #13]
   20292:	06db      	lsls	r3, r3, #27
				thread->base.prio = prio;
   20294:	b24d      	sxtb	r5, r1
   20296:	d12b      	bne.n	202f0 <z_set_prio+0x74>
		if (need_sched) {
   20298:	6983      	ldr	r3, [r0, #24]
   2029a:	bb4b      	cbnz	r3, 202f0 <z_set_prio+0x74>
				_priq_run_remove(&_kernel.ready_q.runq, thread);
   2029c:	4e16      	ldr	r6, [pc, #88]	; (202f8 <z_set_prio+0x7c>)
   2029e:	4621      	mov	r1, r4
   202a0:	f106 002c 	add.w	r0, r6, #44	; 0x2c
   202a4:	f7ff fdbc 	bl	1fe20 <z_priq_dumb_remove>
	return list->head == list;
   202a8:	6af3      	ldr	r3, [r6, #44]	; 0x2c
				thread->base.prio = prio;
   202aa:	73a5      	strb	r5, [r4, #14]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   202ac:	4283      	cmp	r3, r0
   202ae:	d018      	beq.n	202e2 <z_set_prio+0x66>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   202b0:	b1bb      	cbz	r3, 202e2 <z_set_prio+0x66>
	return (node == list->tail) ? NULL : node->next;
   202b2:	6b32      	ldr	r2, [r6, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   202b4:	f993 100e 	ldrsb.w	r1, [r3, #14]
   202b8:	42a9      	cmp	r1, r5
   202ba:	dd0d      	ble.n	202d8 <z_set_prio+0x5c>
	node->prev = successor->prev;
   202bc:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   202be:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   202c2:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   202c4:	605c      	str	r4, [r3, #4]
			update_cache(1);
   202c6:	2001      	movs	r0, #1
   202c8:	f7ff fdc0 	bl	1fe4c <update_cache>
   202cc:	2001      	movs	r0, #1
	__asm__ volatile(
   202ce:	f387 8811 	msr	BASEPRI, r7
   202d2:	f3bf 8f6f 	isb	sy
}
   202d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return (node == list->tail) ? NULL : node->next;
   202d8:	4293      	cmp	r3, r2
   202da:	d002      	beq.n	202e2 <z_set_prio+0x66>
   202dc:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   202de:	2b00      	cmp	r3, #0
   202e0:	d1e8      	bne.n	202b4 <z_set_prio+0x38>
	node->prev = list->tail;
   202e2:	6b33      	ldr	r3, [r6, #48]	; 0x30
   202e4:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   202e6:	6b33      	ldr	r3, [r6, #48]	; 0x30
	node->next = list;
   202e8:	6020      	str	r0, [r4, #0]
	list->tail->next = node;
   202ea:	601c      	str	r4, [r3, #0]
	list->tail = node;
   202ec:	6334      	str	r4, [r6, #48]	; 0x30
}
   202ee:	e7ea      	b.n	202c6 <z_set_prio+0x4a>
			thread->base.prio = prio;
   202f0:	73a5      	strb	r5, [r4, #14]
   202f2:	2000      	movs	r0, #0
   202f4:	e7eb      	b.n	202ce <z_set_prio+0x52>
   202f6:	bf00      	nop
   202f8:	2000ed08 	.word	0x2000ed08

000202fc <z_sched_init>:
	list->head = (sys_dnode_t *)list;
   202fc:	4b04      	ldr	r3, [pc, #16]	; (20310 <z_sched_init+0x14>)
		sys_dlist_init(&_kernel.ready_q.runq.queues[i]);
	}
#endif

#ifdef CONFIG_TIMESLICING
	k_sched_time_slice_set(CONFIG_TIMESLICE_SIZE,
   202fe:	2100      	movs	r1, #0
   20300:	f103 022c 	add.w	r2, r3, #44	; 0x2c
	list->tail = (sys_dnode_t *)list;
   20304:	e9c3 220b 	strd	r2, r2, [r3, #44]	; 0x2c
   20308:	4608      	mov	r0, r1
   2030a:	f7ff bd39 	b.w	1fd80 <k_sched_time_slice_set>
   2030e:	bf00      	nop
   20310:	2000ed08 	.word	0x2000ed08

00020314 <z_impl_k_yield>:
#include <syscalls/k_thread_deadline_set_mrsh.c>
#endif
#endif

void z_impl_k_yield(void)
{
   20314:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__ASSERT(!arch_is_in_isr(), "");

	if (!z_is_idle_thread_object(_current)) {
   20316:	4c23      	ldr	r4, [pc, #140]	; (203a4 <z_impl_k_yield+0x90>)
   20318:	4b23      	ldr	r3, [pc, #140]	; (203a8 <z_impl_k_yield+0x94>)
   2031a:	68a2      	ldr	r2, [r4, #8]
   2031c:	429a      	cmp	r2, r3
   2031e:	d028      	beq.n	20372 <z_impl_k_yield+0x5e>
	__asm__ volatile(
   20320:	f04f 0320 	mov.w	r3, #32
   20324:	f3ef 8511 	mrs	r5, BASEPRI
   20328:	f383 8811 	msr	BASEPRI, r3
   2032c:	f3bf 8f6f 	isb	sy
		LOCKED(&sched_spinlock) {
			if (!IS_ENABLED(CONFIG_SMP) ||
			    z_is_thread_queued(_current)) {
				_priq_run_remove(&_kernel.ready_q.runq,
   20330:	f104 002c 	add.w	r0, r4, #44	; 0x2c
   20334:	68a1      	ldr	r1, [r4, #8]
   20336:	f7ff fd73 	bl	1fe20 <z_priq_dumb_remove>
	return list->head == list;
   2033a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
						 _current);
			}
			_priq_run_add(&_kernel.ready_q.runq, _current);
   2033c:	68a3      	ldr	r3, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2033e:	4282      	cmp	r2, r0
   20340:	d028      	beq.n	20394 <z_impl_k_yield+0x80>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20342:	b33a      	cbz	r2, 20394 <z_impl_k_yield+0x80>
	return (node == list->tail) ? NULL : node->next;
   20344:	6b21      	ldr	r1, [r4, #48]	; 0x30
	if (thread_1->base.prio < thread_2->base.prio) {
   20346:	f993 600e 	ldrsb.w	r6, [r3, #14]
   2034a:	f992 700e 	ldrsb.w	r7, [r2, #14]
   2034e:	42b7      	cmp	r7, r6
   20350:	dd1b      	ble.n	2038a <z_impl_k_yield+0x76>
	node->prev = successor->prev;
   20352:	6851      	ldr	r1, [r2, #4]
	node->next = successor;
   20354:	e9c3 2100 	strd	r2, r1, [r3]
	successor->prev->next = node;
   20358:	600b      	str	r3, [r1, #0]
	successor->prev = node;
   2035a:	6053      	str	r3, [r2, #4]
	thread->base.thread_state |= states;
   2035c:	7b5a      	ldrb	r2, [r3, #13]
   2035e:	f062 027f 	orn	r2, r2, #127	; 0x7f
   20362:	735a      	strb	r2, [r3, #13]
			z_mark_thread_as_queued(_current);
			update_cache(1);
   20364:	2001      	movs	r0, #1
   20366:	f7ff fd71 	bl	1fe4c <update_cache>
	__asm__ volatile(
   2036a:	f385 8811 	msr	BASEPRI, r5
   2036e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   20372:	f04f 0320 	mov.w	r3, #32
   20376:	f3ef 8011 	mrs	r0, BASEPRI
   2037a:	f383 8811 	msr	BASEPRI, r3
   2037e:	f3bf 8f6f 	isb	sy
		}
	}
	z_swap_unlocked();
}
   20382:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
   20386:	f7e7 b98b 	b.w	76a0 <arch_swap>
	return (node == list->tail) ? NULL : node->next;
   2038a:	428a      	cmp	r2, r1
   2038c:	d002      	beq.n	20394 <z_impl_k_yield+0x80>
   2038e:	6812      	ldr	r2, [r2, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   20390:	2a00      	cmp	r2, #0
   20392:	d1da      	bne.n	2034a <z_impl_k_yield+0x36>
	node->prev = list->tail;
   20394:	6b22      	ldr	r2, [r4, #48]	; 0x30
   20396:	605a      	str	r2, [r3, #4]
	list->tail->next = node;
   20398:	6b22      	ldr	r2, [r4, #48]	; 0x30
	node->next = list;
   2039a:	6018      	str	r0, [r3, #0]
	list->tail->next = node;
   2039c:	6013      	str	r3, [r2, #0]
	list->tail = node;
   2039e:	6323      	str	r3, [r4, #48]	; 0x30
}
   203a0:	e7dc      	b.n	2035c <z_impl_k_yield+0x48>
   203a2:	bf00      	nop
   203a4:	2000ed08 	.word	0x2000ed08
   203a8:	2000ab98 	.word	0x2000ab98

000203ac <z_tick_sleep>:
	 */
	LOG_DBG("thread %p for %u ticks", _current, ticks);
#endif

	/* wait of 0 ms is treated as a 'yield' */
	if (ticks == 0) {
   203ac:	ea50 0301 	orrs.w	r3, r0, r1
{
   203b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   203b4:	4605      	mov	r5, r0
   203b6:	460e      	mov	r6, r1
	if (ticks == 0) {
   203b8:	d104      	bne.n	203c4 <z_tick_sleep+0x18>
	z_impl_k_yield();
   203ba:	f7ff ffab 	bl	20314 <z_impl_k_yield>
		k_yield();
		return 0;
   203be:	2000      	movs	r0, #0
		return ticks;
	}
#endif

	return 0;
}
   203c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	expected_wakeup_ticks = ticks + z_tick_get_32();
   203c4:	f006 ff54 	bl	27270 <z_tick_get_32>
   203c8:	4604      	mov	r4, r0
   203ca:	f04f 0320 	mov.w	r3, #32
   203ce:	f3ef 8811 	mrs	r8, BASEPRI
   203d2:	f383 8811 	msr	BASEPRI, r3
   203d6:	f3bf 8f6f 	isb	sy
	pending_current = _current;
   203da:	4f0f      	ldr	r7, [pc, #60]	; (20418 <z_tick_sleep+0x6c>)
   203dc:	4b0f      	ldr	r3, [pc, #60]	; (2041c <z_tick_sleep+0x70>)
   203de:	68b8      	ldr	r0, [r7, #8]
   203e0:	6018      	str	r0, [r3, #0]
	unready_thread(_current);
   203e2:	f7ff fef7 	bl	201d4 <unready_thread>
	z_add_thread_timeout(_current, timeout);
   203e6:	68b8      	ldr	r0, [r7, #8]
   203e8:	490d      	ldr	r1, [pc, #52]	; (20420 <z_tick_sleep+0x74>)
   203ea:	462a      	mov	r2, r5
   203ec:	4633      	mov	r3, r6
   203ee:	3018      	adds	r0, #24
   203f0:	f000 fa44 	bl	2087c <z_add_timeout>
	z_mark_thread_as_suspended(_current);
   203f4:	68ba      	ldr	r2, [r7, #8]
	thread->base.thread_state |= _THREAD_SUSPENDED;
   203f6:	7b53      	ldrb	r3, [r2, #13]
   203f8:	f043 0310 	orr.w	r3, r3, #16
   203fc:	7353      	strb	r3, [r2, #13]
   203fe:	4640      	mov	r0, r8
   20400:	f7e7 f94e 	bl	76a0 <arch_swap>
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   20404:	f006 ff34 	bl	27270 <z_tick_get_32>
	expected_wakeup_ticks = ticks + z_tick_get_32();
   20408:	1962      	adds	r2, r4, r5
	ticks = (k_ticks_t)expected_wakeup_ticks - z_tick_get_32();
   2040a:	1a10      	subs	r0, r2, r0
   2040c:	eb63 0303 	sbc.w	r3, r3, r3
   20410:	2b00      	cmp	r3, #0
   20412:	bfb8      	it	lt
   20414:	2000      	movlt	r0, #0
   20416:	e7d3      	b.n	203c0 <z_tick_sleep+0x14>
   20418:	2000ed08 	.word	0x2000ed08
   2041c:	2000ed3c 	.word	0x2000ed3c
   20420:	00026fb7 	.word	0x00026fb7

00020424 <z_impl_k_sleep>:

	__ASSERT(!arch_is_in_isr(), "");
	sys_trace_void(SYS_TRACE_ID_SLEEP);

	/* in case of K_FOREVER, we suspend */
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20424:	f1b1 3fff 	cmp.w	r1, #4294967295
   20428:	bf08      	it	eq
   2042a:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   2042e:	b508      	push	{r3, lr}
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   20430:	d106      	bne.n	20440 <z_impl_k_sleep+0x1c>
		k_thread_suspend(_current);
   20432:	4b08      	ldr	r3, [pc, #32]	; (20454 <z_impl_k_sleep+0x30>)
   20434:	6898      	ldr	r0, [r3, #8]
	z_impl_k_thread_suspend(thread);
   20436:	f7ff fe17 	bl	20068 <z_impl_k_thread_suspend>
		return (int32_t) K_TICKS_FOREVER;
   2043a:	f04f 30ff 	mov.w	r0, #4294967295
	ticks = timeout.ticks;

	ticks = z_tick_sleep(ticks);
	sys_trace_end_call(SYS_TRACE_ID_SLEEP);
	return k_ticks_to_ms_floor64(ticks);
}
   2043e:	bd08      	pop	{r3, pc}
	ticks = z_tick_sleep(ticks);
   20440:	f7ff ffb4 	bl	203ac <z_tick_sleep>
			return (t * to_hz + off) / from_hz;
   20444:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   20448:	fb80 0303 	smull	r0, r3, r0, r3
   2044c:	0bc0      	lsrs	r0, r0, #15
   2044e:	ea40 4043 	orr.w	r0, r0, r3, lsl #17
	return k_ticks_to_ms_floor64(ticks);
   20452:	e7f4      	b.n	2043e <z_impl_k_sleep+0x1a>
   20454:	2000ed08 	.word	0x2000ed08

00020458 <z_impl_k_current_get>:

#ifdef CONFIG_SMP
	arch_irq_unlock(k);
#endif
	return ret;
}
   20458:	4b01      	ldr	r3, [pc, #4]	; (20460 <z_impl_k_current_get+0x8>)
   2045a:	6898      	ldr	r0, [r3, #8]
   2045c:	4770      	bx	lr
   2045e:	bf00      	nop
   20460:	2000ed08 	.word	0x2000ed08

00020464 <z_impl_k_sem_give>:
	ARG_UNUSED(sem);
#endif
}

void z_impl_k_sem_give(struct k_sem *sem)
{
   20464:	b538      	push	{r3, r4, r5, lr}
   20466:	4604      	mov	r4, r0
   20468:	f04f 0320 	mov.w	r3, #32
   2046c:	f3ef 8511 	mrs	r5, BASEPRI
   20470:	f383 8811 	msr	BASEPRI, r3
   20474:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_thread *thread;

	sys_trace_semaphore_give(sem);
	thread = z_unpend_first_thread(&sem->wait_q);
   20478:	f006 fdfa 	bl	27070 <z_unpend_first_thread>

	if (thread != NULL) {
   2047c:	b150      	cbz	r0, 20494 <z_impl_k_sem_give+0x30>
   2047e:	2200      	movs	r2, #0
   20480:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
		arch_thread_return_value_set(thread, 0);
		z_ready_thread(thread);
   20484:	f006 fd87 	bl	26f96 <z_ready_thread>
	} else {
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
		handle_poll_events(sem);
	}

	z_reschedule(&lock, key);
   20488:	4629      	mov	r1, r5
   2048a:	4808      	ldr	r0, [pc, #32]	; (204ac <z_impl_k_sem_give+0x48>)
	sys_trace_end_call(SYS_TRACE_ID_SEMA_GIVE);
}
   2048c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_reschedule(&lock, key);
   20490:	f7ff bca0 	b.w	1fdd4 <z_reschedule>
		sem->count += (sem->count != sem->limit) ? 1U : 0U;
   20494:	e9d4 3202 	ldrd	r3, r2, [r4, #8]
   20498:	429a      	cmp	r2, r3
   2049a:	bf18      	it	ne
   2049c:	3301      	addne	r3, #1
   2049e:	60a3      	str	r3, [r4, #8]
	z_handle_obj_poll_events(&sem->poll_events, K_POLL_STATE_SEM_AVAILABLE);
   204a0:	2102      	movs	r1, #2
   204a2:	f104 0010 	add.w	r0, r4, #16
   204a6:	f007 f87e 	bl	275a6 <z_handle_obj_poll_events>
}
   204aa:	e7ed      	b.n	20488 <z_impl_k_sem_give+0x24>
   204ac:	2000f324 	.word	0x2000f324

000204b0 <z_impl_k_sem_take>:
}
#include <syscalls/k_sem_give_mrsh.c>
#endif

int z_impl_k_sem_take(struct k_sem *sem, k_timeout_t timeout)
{
   204b0:	b513      	push	{r0, r1, r4, lr}
   204b2:	f04f 0420 	mov.w	r4, #32
   204b6:	f3ef 8111 	mrs	r1, BASEPRI
   204ba:	f384 8811 	msr	BASEPRI, r4
   204be:	f3bf 8f6f 	isb	sy
		  K_TIMEOUT_EQ(timeout, K_NO_WAIT)), "");

	k_spinlock_key_t key = k_spin_lock(&lock);
	sys_trace_semaphore_take(sem);

	if (likely(sem->count > 0U)) {
   204c2:	6884      	ldr	r4, [r0, #8]
   204c4:	b144      	cbz	r4, 204d8 <z_impl_k_sem_take+0x28>
		sem->count--;
   204c6:	3c01      	subs	r4, #1
   204c8:	6084      	str	r4, [r0, #8]
	__asm__ volatile(
   204ca:	f381 8811 	msr	BASEPRI, r1
   204ce:	f3bf 8f6f 	isb	sy
		k_spin_unlock(&lock, key);
		ret = 0;
   204d2:	2000      	movs	r0, #0
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);

out:
	sys_trace_end_call(SYS_TRACE_ID_SEMA_TAKE);
	return ret;
}
   204d4:	b002      	add	sp, #8
   204d6:	bd10      	pop	{r4, pc}
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   204d8:	ea52 0403 	orrs.w	r4, r2, r3
   204dc:	d106      	bne.n	204ec <z_impl_k_sem_take+0x3c>
   204de:	f381 8811 	msr	BASEPRI, r1
   204e2:	f3bf 8f6f 	isb	sy
		ret = -EBUSY;
   204e6:	f06f 000f 	mvn.w	r0, #15
   204ea:	e7f3      	b.n	204d4 <z_impl_k_sem_take+0x24>
	ret = z_pend_curr(&lock, key, &sem->wait_q, timeout);
   204ec:	e9cd 2300 	strd	r2, r3, [sp]
   204f0:	4602      	mov	r2, r0
   204f2:	4802      	ldr	r0, [pc, #8]	; (204fc <z_impl_k_sem_take+0x4c>)
   204f4:	f7ff feae 	bl	20254 <z_pend_curr>
	return ret;
   204f8:	e7ec      	b.n	204d4 <z_impl_k_sem_take+0x24>
   204fa:	bf00      	nop
   204fc:	2000f324 	.word	0x2000f324

00020500 <k_sys_work_q_init>:
K_KERNEL_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(const struct device *dev)
{
   20500:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   20502:	4c08      	ldr	r4, [pc, #32]	; (20524 <k_sys_work_q_init+0x24>)
   20504:	4908      	ldr	r1, [pc, #32]	; (20528 <k_sys_work_q_init+0x28>)
   20506:	f04f 33ff 	mov.w	r3, #4294967295
   2050a:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2050e:	4620      	mov	r0, r4
   20510:	f000 f8dc 	bl	206cc <k_work_q_start>
	return z_impl_k_thread_name_set(thread_id, value);
   20514:	4905      	ldr	r1, [pc, #20]	; (2052c <k_sys_work_q_init+0x2c>)
   20516:	f104 0018 	add.w	r0, r4, #24
   2051a:	f006 fdec 	bl	270f6 <z_impl_k_thread_name_set>
		       K_KERNEL_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);
	k_thread_name_set(&k_sys_work_q.thread, "sysworkq");

	return 0;
}
   2051e:	2000      	movs	r0, #0
   20520:	bd10      	pop	{r4, pc}
   20522:	bf00      	nop
   20524:	2000aca8 	.word	0x2000aca8
   20528:	20012280 	.word	0x20012280
   2052c:	0002da2a 	.word	0x0002da2a

00020530 <z_setup_new_thread>:
char *z_setup_new_thread(struct k_thread *new_thread,
			 k_thread_stack_t *stack, size_t stack_size,
			 k_thread_entry_t entry,
			 void *p1, void *p2, void *p3,
			 int prio, uint32_t options, const char *name)
{
   20530:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	sys_dlist_init(&w->waitq);
   20534:	f100 0530 	add.w	r5, r0, #48	; 0x30
	list->tail = (sys_dnode_t *)list;
   20538:	e9c0 550c 	strd	r5, r5, [r0, #48]	; 0x30
void z_init_thread_base(struct _thread_base *thread_base, int priority,
		       uint32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (uint8_t)options;
   2053c:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   2053e:	7305      	strb	r5, [r0, #12]
	thread_base->thread_state = (uint8_t)initial_state;
   20540:	2504      	movs	r5, #4
   20542:	7345      	strb	r5, [r0, #13]
{
   20544:	460f      	mov	r7, r1

	thread_base->prio = priority;
   20546:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   20548:	7385      	strb	r5, [r0, #14]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   2054a:	1dd6      	adds	r6, r2, #7

	thread_base->sched_locked = 0U;
   2054c:	2500      	movs	r5, #0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2054e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
	thread_base->sched_locked = 0U;
   20550:	73c5      	strb	r5, [r0, #15]
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20552:	f026 0607 	bic.w	r6, r6, #7

/** @} */

static inline char *Z_KERNEL_STACK_BUFFER(k_thread_stack_t *sym)
{
	return (char *)sym + K_KERNEL_STACK_RESERVED;
   20556:	3720      	adds	r7, #32
	node->prev = NULL;
   20558:	e9c0 5506 	strd	r5, r5, [r0, #24]
	new_thread->stack_info.size = stack_buf_size;
   2055c:	e9c0 761b 	strd	r7, r6, [r0, #108]	; 0x6c
	new_thread->stack_info.delta = delta;
   20560:	6745      	str	r5, [r0, #116]	; 0x74
		stack_obj_size = Z_KERNEL_STACK_SIZE_ADJUST(stack_size);
   20562:	f106 0820 	add.w	r8, r6, #32
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20566:	9202      	str	r2, [sp, #8]
   20568:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2056a:	9201      	str	r2, [sp, #4]
	stack_ptr = (char *)stack + stack_obj_size;
   2056c:	4488      	add	r8, r1
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   2056e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   20570:	9200      	str	r2, [sp, #0]
   20572:	4642      	mov	r2, r8
{
   20574:	4604      	mov	r4, r0
	arch_new_thread(new_thread, stack, stack_ptr, entry, p1, p2, p3);
   20576:	f7e7 f941 	bl	77fc <arch_new_thread>
	if (!_current) {
   2057a:	4b05      	ldr	r3, [pc, #20]	; (20590 <z_setup_new_thread+0x60>)
   2057c:	689b      	ldr	r3, [r3, #8]
	new_thread->fn_abort = NULL;
   2057e:	e9c4 5517 	strd	r5, r5, [r4, #92]	; 0x5c
	if (!_current) {
   20582:	b103      	cbz	r3, 20586 <z_setup_new_thread+0x56>
	new_thread->resource_pool = _current->resource_pool;
   20584:	6f9b      	ldr	r3, [r3, #120]	; 0x78
	return stack_ptr;
   20586:	67a3      	str	r3, [r4, #120]	; 0x78
}
   20588:	4640      	mov	r0, r8
   2058a:	b004      	add	sp, #16
   2058c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20590:	2000ed08 	.word	0x2000ed08

00020594 <z_impl_k_thread_create>:
{
   20594:	b5f0      	push	{r4, r5, r6, r7, lr}
   20596:	b087      	sub	sp, #28
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   20598:	2700      	movs	r7, #0
   2059a:	9705      	str	r7, [sp, #20]
   2059c:	9f10      	ldr	r7, [sp, #64]	; 0x40
   2059e:	9704      	str	r7, [sp, #16]
   205a0:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
   205a2:	9703      	str	r7, [sp, #12]
   205a4:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   205a6:	9702      	str	r7, [sp, #8]
{
   205a8:	e9dd 6512 	ldrd	r6, r5, [sp, #72]	; 0x48
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   205ac:	9f0d      	ldr	r7, [sp, #52]	; 0x34
   205ae:	9701      	str	r7, [sp, #4]
   205b0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   205b2:	9700      	str	r7, [sp, #0]
{
   205b4:	4604      	mov	r4, r0
	z_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   205b6:	f7ff ffbb 	bl	20530 <z_setup_new_thread>
	if (!K_TIMEOUT_EQ(delay, K_FOREVER)) {
   205ba:	f1b5 3fff 	cmp.w	r5, #4294967295
   205be:	bf08      	it	eq
   205c0:	f1b6 3fff 	cmpeq.w	r6, #4294967295
   205c4:	d005      	beq.n	205d2 <z_impl_k_thread_create+0x3e>
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   205c6:	ea55 0306 	orrs.w	r3, r5, r6
   205ca:	d105      	bne.n	205d8 <z_impl_k_thread_create+0x44>
	z_sched_start(thread);
   205cc:	4620      	mov	r0, r4
   205ce:	f7ff fcb5 	bl	1ff3c <z_sched_start>
}
   205d2:	4620      	mov	r0, r4
   205d4:	b007      	add	sp, #28
   205d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   205d8:	4903      	ldr	r1, [pc, #12]	; (205e8 <z_impl_k_thread_create+0x54>)
   205da:	4632      	mov	r2, r6
   205dc:	462b      	mov	r3, r5
   205de:	f104 0018 	add.w	r0, r4, #24
   205e2:	f000 f94b 	bl	2087c <z_add_timeout>
   205e6:	e7f4      	b.n	205d2 <z_impl_k_thread_create+0x3e>
   205e8:	00026fb7 	.word	0x00026fb7

000205ec <z_init_static_threads>:
{
   205ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   205f0:	4c29      	ldr	r4, [pc, #164]	; (20698 <z_init_static_threads+0xac>)
	_FOREACH_STATIC_THREAD(thread_data) {
   205f2:	4d2a      	ldr	r5, [pc, #168]	; (2069c <z_init_static_threads+0xb0>)
{
   205f4:	b087      	sub	sp, #28
   205f6:	4626      	mov	r6, r4
	_FOREACH_STATIC_THREAD(thread_data) {
   205f8:	42ae      	cmp	r6, r5
   205fa:	f104 0430 	add.w	r4, r4, #48	; 0x30
   205fe:	d30f      	bcc.n	20620 <z_init_static_threads+0x34>
	k_sched_lock();
   20600:	f7ff fbfa 	bl	1fdf8 <k_sched_lock>
	_FOREACH_STATIC_THREAD(thread_data) {
   20604:	4c24      	ldr	r4, [pc, #144]	; (20698 <z_init_static_threads+0xac>)
   20606:	f8df 9098 	ldr.w	r9, [pc, #152]	; 206a0 <z_init_static_threads+0xb4>
   2060a:	f44f 4600 	mov.w	r6, #32768	; 0x8000
   2060e:	f240 37e7 	movw	r7, #999	; 0x3e7
   20612:	42ac      	cmp	r4, r5
   20614:	d320      	bcc.n	20658 <z_init_static_threads+0x6c>
}
   20616:	b007      	add	sp, #28
   20618:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
	k_sched_unlock();
   2061c:	f7ff bc3e 	b.w	1fe9c <k_sched_unlock>
		z_setup_new_thread(
   20620:	f854 3c04 	ldr.w	r3, [r4, #-4]
   20624:	9305      	str	r3, [sp, #20]
   20626:	f854 3c10 	ldr.w	r3, [r4, #-16]
   2062a:	9304      	str	r3, [sp, #16]
   2062c:	f854 3c14 	ldr.w	r3, [r4, #-20]
   20630:	9303      	str	r3, [sp, #12]
   20632:	f854 3c18 	ldr.w	r3, [r4, #-24]
   20636:	9302      	str	r3, [sp, #8]
   20638:	f854 3c1c 	ldr.w	r3, [r4, #-28]
   2063c:	9301      	str	r3, [sp, #4]
   2063e:	f854 3c20 	ldr.w	r3, [r4, #-32]
   20642:	9300      	str	r3, [sp, #0]
   20644:	e954 010c 	ldrd	r0, r1, [r4, #-48]	; 0x30
   20648:	e954 230a 	ldrd	r2, r3, [r4, #-40]	; 0x28
   2064c:	f7ff ff70 	bl	20530 <z_setup_new_thread>
		thread_data->init_thread->init_data = thread_data;
   20650:	f854 3c30 	ldr.w	r3, [r4, #-48]
   20654:	65de      	str	r6, [r3, #92]	; 0x5c
	_FOREACH_STATIC_THREAD(thread_data) {
   20656:	e7ce      	b.n	205f6 <z_init_static_threads+0xa>
		if (thread_data->init_delay != K_TICKS_FOREVER) {
   20658:	6a63      	ldr	r3, [r4, #36]	; 0x24
   2065a:	1c5a      	adds	r2, r3, #1
   2065c:	d00d      	beq.n	2067a <z_init_static_threads+0x8e>
					    K_MSEC(thread_data->init_delay));
   2065e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   20662:	2100      	movs	r1, #0
   20664:	4638      	mov	r0, r7
   20666:	fbc3 0106 	smlal	r0, r1, r3, r6
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2066a:	ea51 33c3 	orrs.w	r3, r1, r3, lsl #15
			schedule_new_thread(thread_data->init_thread,
   2066e:	f8d4 8000 	ldr.w	r8, [r4]
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20672:	d104      	bne.n	2067e <z_init_static_threads+0x92>
	z_sched_start(thread);
   20674:	4640      	mov	r0, r8
   20676:	f7ff fc61 	bl	1ff3c <z_sched_start>
	_FOREACH_STATIC_THREAD(thread_data) {
   2067a:	3430      	adds	r4, #48	; 0x30
   2067c:	e7c9      	b.n	20612 <z_init_static_threads+0x26>
   2067e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20682:	2300      	movs	r3, #0
   20684:	f7e0 fc88 	bl	f98 <__aeabi_uldivmod>
   20688:	4602      	mov	r2, r0
   2068a:	460b      	mov	r3, r1
   2068c:	f108 0018 	add.w	r0, r8, #24
   20690:	4649      	mov	r1, r9
   20692:	f000 f8f3 	bl	2087c <z_add_timeout>
   20696:	e7f0      	b.n	2067a <z_init_static_threads+0x8e>
   20698:	20009e2c 	.word	0x20009e2c
   2069c:	20009f4c 	.word	0x20009f4c
   206a0:	00026fb7 	.word	0x00026fb7

000206a4 <z_self_abort>:
#include <syscall_handler.h>
#include <logging/log.h>
LOG_MODULE_DECLARE(os, CONFIG_KERNEL_LOG_LEVEL);

FUNC_NORETURN void z_self_abort(void)
{
   206a4:	b508      	push	{r3, lr}
	__asm__ volatile(
   206a6:	f04f 0320 	mov.w	r3, #32
   206aa:	f3ef 8411 	mrs	r4, BASEPRI
   206ae:	f383 8811 	msr	BASEPRI, r3
   206b2:	f3bf 8f6f 	isb	sy
	 * while we set this up
	 */
	key = arch_irq_lock();
	cpu = _current_cpu;
	__ASSERT(cpu->pending_abort == NULL, "already have a thread to abort");
	cpu->pending_abort = _current;
   206b6:	4b04      	ldr	r3, [pc, #16]	; (206c8 <z_self_abort+0x24>)
   206b8:	6898      	ldr	r0, [r3, #8]
   206ba:	6118      	str	r0, [r3, #16]
	z_impl_k_thread_suspend(thread);
   206bc:	f7ff fcd4 	bl	20068 <z_impl_k_thread_suspend>
   206c0:	4620      	mov	r0, r4
   206c2:	f7e6 ffed 	bl	76a0 <arch_swap>
		_current, cpu->idle_thread);

	k_thread_suspend(_current);
	z_swap_irqlock(key);
	__ASSERT(false, "should never get here");
	CODE_UNREACHABLE; /* LCOV_EXCL_LINE */
   206c6:	bf00      	nop
   206c8:	2000ed08 	.word	0x2000ed08

000206cc <k_work_q_start>:

extern void z_work_q_main(void *work_q_ptr, void *p2, void *p3);

void k_work_q_start(struct k_work_q *work_q, k_thread_stack_t *stack,
		    size_t stack_size, int prio)
{
   206cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   206d0:	4604      	mov	r4, r0
   206d2:	b088      	sub	sp, #32
   206d4:	460d      	mov	r5, r1
   206d6:	4616      	mov	r6, r2
   206d8:	461f      	mov	r7, r3
	z_impl_k_queue_init(queue);
   206da:	f006 fba8 	bl	26e2e <z_impl_k_queue_init>
	k_queue_init(&work_q->queue);
	(void)k_thread_create(&work_q->thread, stack, stack_size, z_work_q_main,
   206de:	f104 0818 	add.w	r8, r4, #24
	return z_impl_k_thread_create(new_thread, stack, stack_size, entry, p1, p2, p3, prio, options, delay);
   206e2:	2200      	movs	r2, #0
   206e4:	2300      	movs	r3, #0
   206e6:	e9cd 2306 	strd	r2, r3, [sp, #24]
   206ea:	e9cd 7203 	strd	r7, r2, [sp, #12]
   206ee:	e9cd 2201 	strd	r2, r2, [sp, #4]
   206f2:	4b07      	ldr	r3, [pc, #28]	; (20710 <k_work_q_start+0x44>)
   206f4:	9400      	str	r4, [sp, #0]
   206f6:	4632      	mov	r2, r6
   206f8:	4629      	mov	r1, r5
   206fa:	4640      	mov	r0, r8
   206fc:	f7ff ff4a 	bl	20594 <z_impl_k_thread_create>
	return z_impl_k_thread_name_set(thread_id, value);
   20700:	4904      	ldr	r1, [pc, #16]	; (20714 <k_work_q_start+0x48>)
   20702:	4640      	mov	r0, r8
			work_q, NULL, NULL, prio, 0, K_NO_WAIT);

	k_thread_name_set(&work_q->thread, WORKQUEUE_THREAD_NAME);
}
   20704:	b008      	add	sp, #32
   20706:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2070a:	f006 bcf4 	b.w	270f6 <z_impl_k_thread_name_set>
   2070e:	bf00      	nop
   20710:	00021d0d 	.word	0x00021d0d
   20714:	0002da33 	.word	0x0002da33

00020718 <k_delayed_work_submit_to_queue>:
}

int k_delayed_work_submit_to_queue(struct k_work_q *work_q,
				   struct k_delayed_work *work,
				   k_timeout_t delay)
{
   20718:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2071c:	4606      	mov	r6, r0
   2071e:	460d      	mov	r5, r1
   20720:	4690      	mov	r8, r2
   20722:	461f      	mov	r7, r3
   20724:	f04f 0320 	mov.w	r3, #32
   20728:	f3ef 8911 	mrs	r9, BASEPRI
   2072c:	f383 8811 	msr	BASEPRI, r3
   20730:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int err = 0;

	/* Work cannot be active in multiple queues */
	if (work->work_q != NULL && work->work_q != work_q) {
   20734:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   20736:	b17b      	cbz	r3, 20758 <k_delayed_work_submit_to_queue+0x40>
   20738:	4283      	cmp	r3, r0
   2073a:	d128      	bne.n	2078e <k_delayed_work_submit_to_queue+0x76>
		goto done;
	}

	/* Cancel if work has been submitted */
	if (work->work_q == work_q) {
		err = work_cancel(work);
   2073c:	4628      	mov	r0, r5
   2073e:	f006 fcfc 	bl	2713a <work_cancel>
		/* -EALREADY may indicate the work has already completed so
		 * this is likely a recurring work.  It may also indicate that
		 * the work handler is still executing.  But it's neither
		 * delayed nor pending, so it can be rescheduled.
		 */
		if (err == -EALREADY) {
   20742:	f110 0f45 	cmn.w	r0, #69	; 0x45
		err = work_cancel(work);
   20746:	4604      	mov	r4, r0
		if (err == -EALREADY) {
   20748:	d008      	beq.n	2075c <k_delayed_work_submit_to_queue+0x44>
			err = 0;
		} else if (err < 0) {
   2074a:	2800      	cmp	r0, #0
   2074c:	da07      	bge.n	2075e <k_delayed_work_submit_to_queue+0x46>
	__asm__ volatile(
   2074e:	f389 8811 	msr	BASEPRI, r9
   20752:	f3bf 8f6f 	isb	sy
	/* Add timeout */
	z_add_timeout(&work->timeout, work_timeout, delay);

done:
	k_spin_unlock(&lock, key);
	return err;
   20756:	e00f      	b.n	20778 <k_delayed_work_submit_to_queue+0x60>
	if (work->work_q == work_q) {
   20758:	2800      	cmp	r0, #0
   2075a:	d0ef      	beq.n	2073c <k_delayed_work_submit_to_queue+0x24>
	int err = 0;
   2075c:	2400      	movs	r4, #0
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   2075e:	ea58 0307 	orrs.w	r3, r8, r7
	work->work_q = work_q;
   20762:	62ae      	str	r6, [r5, #40]	; 0x28
	if (K_TIMEOUT_EQ(delay, K_NO_WAIT)) {
   20764:	d10b      	bne.n	2077e <k_delayed_work_submit_to_queue+0x66>
   20766:	f389 8811 	msr	BASEPRI, r9
   2076a:	f3bf 8f6f 	isb	sy
		k_work_submit_to_queue(work_q, &work->work);
   2076e:	4629      	mov	r1, r5
   20770:	4630      	mov	r0, r6
   20772:	f006 fcc5 	bl	27100 <k_work_submit_to_queue>
		return 0;
   20776:	2400      	movs	r4, #0
}
   20778:	4620      	mov	r0, r4
   2077a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	z_add_timeout(&work->timeout, work_timeout, delay);
   2077e:	4905      	ldr	r1, [pc, #20]	; (20794 <k_delayed_work_submit_to_queue+0x7c>)
   20780:	4642      	mov	r2, r8
   20782:	463b      	mov	r3, r7
   20784:	f105 0010 	add.w	r0, r5, #16
   20788:	f000 f878 	bl	2087c <z_add_timeout>
   2078c:	e7df      	b.n	2074e <k_delayed_work_submit_to_queue+0x36>
		err = -EADDRINUSE;
   2078e:	f06f 042f 	mvn.w	r4, #47	; 0x2f
   20792:	e7dc      	b.n	2074e <k_delayed_work_submit_to_queue+0x36>
   20794:	00027131 	.word	0x00027131

00020798 <boot_banner>:
		k_busy_wait(CONFIG_BOOT_DELAY * USEC_PER_MSEC);
	}

#if defined(CONFIG_BOOT_BANNER)
#ifdef BUILD_VERSION
	printk("*** Booting Zephyr OS build %s %s ***\n",
   20798:	4a02      	ldr	r2, [pc, #8]	; (207a4 <boot_banner+0xc>)
   2079a:	4903      	ldr	r1, [pc, #12]	; (207a8 <boot_banner+0x10>)
   2079c:	4803      	ldr	r0, [pc, #12]	; (207ac <boot_banner+0x14>)
   2079e:	f001 b9c1 	b.w	21b24 <printk>
   207a2:	bf00      	nop
   207a4:	000294a4 	.word	0x000294a4
   207a8:	0002da3d 	.word	0x0002da3d
   207ac:	0002da58 	.word	0x0002da58

000207b0 <z_data_copy>:
 * This routine copies the data section from ROM to RAM.
 *
 * @return N/A
 */
void z_data_copy(void)
{
   207b0:	b508      	push	{r3, lr}
	(void)memcpy(&__data_ram_start, &__data_rom_start,
		 __data_ram_end - __data_ram_start);
   207b2:	4806      	ldr	r0, [pc, #24]	; (207cc <z_data_copy+0x1c>)
	(void)memcpy(&__data_ram_start, &__data_rom_start,
   207b4:	4a06      	ldr	r2, [pc, #24]	; (207d0 <z_data_copy+0x20>)
   207b6:	4907      	ldr	r1, [pc, #28]	; (207d4 <z_data_copy+0x24>)
   207b8:	1a12      	subs	r2, r2, r0
   207ba:	f003 fe55 	bl	24468 <memcpy>
#else
	(void)memcpy(&_app_smem_start, &_app_smem_rom_start,
		 _app_smem_end - _app_smem_start);
#endif /* CONFIG_STACK_CANARIES */
#endif /* CONFIG_USERSPACE */
}
   207be:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)memcpy(&_ramfunc_ram_start, &_ramfunc_rom_start,
   207c2:	4a05      	ldr	r2, [pc, #20]	; (207d8 <z_data_copy+0x28>)
   207c4:	4905      	ldr	r1, [pc, #20]	; (207dc <z_data_copy+0x2c>)
   207c6:	4806      	ldr	r0, [pc, #24]	; (207e0 <z_data_copy+0x30>)
   207c8:	f003 be4e 	b.w	24468 <memcpy>
   207cc:	20000000 	.word	0x20000000
   207d0:	2000a170 	.word	0x2000a170
   207d4:	0002da80 	.word	0x0002da80
   207d8:	00000000 	.word	0x00000000
   207dc:	0002da80 	.word	0x0002da80
   207e0:	20000000 	.word	0x20000000

000207e4 <elapsed>:
	sys_dlist_remove(&t->node);
}

static int32_t elapsed(void)
{
	return announce_remaining == 0 ? z_clock_elapsed() : 0U;
   207e4:	4b03      	ldr	r3, [pc, #12]	; (207f4 <elapsed+0x10>)
   207e6:	681b      	ldr	r3, [r3, #0]
   207e8:	b90b      	cbnz	r3, 207ee <elapsed+0xa>
   207ea:	f7e6 bd77 	b.w	72dc <z_clock_elapsed>
}
   207ee:	2000      	movs	r0, #0
   207f0:	4770      	bx	lr
   207f2:	bf00      	nop
   207f4:	2000ed48 	.word	0x2000ed48

000207f8 <next_timeout>:
	return list->head == list;
   207f8:	4b11      	ldr	r3, [pc, #68]	; (20840 <next_timeout+0x48>)

static int32_t next_timeout(void)
{
   207fa:	b510      	push	{r4, lr}
   207fc:	681c      	ldr	r4, [r3, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   207fe:	429c      	cmp	r4, r3
   20800:	bf08      	it	eq
   20802:	2400      	moveq	r4, #0
	struct _timeout *to = first();
	int32_t ticks_elapsed = elapsed();
   20804:	f7ff ffee 	bl	207e4 <elapsed>
   20808:	4603      	mov	r3, r0
	int32_t ret = to == NULL ? MAX_WAIT
   2080a:	b16c      	cbz	r4, 20828 <next_timeout+0x30>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2080c:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
   20810:	1ac0      	subs	r0, r0, r3
   20812:	eb62 73e3 	sbc.w	r3, r2, r3, asr #31
	int32_t ret = to == NULL ? MAX_WAIT
   20816:	2801      	cmp	r0, #1
   20818:	f173 0200 	sbcs.w	r2, r3, #0
   2081c:	db0d      	blt.n	2083a <next_timeout+0x42>
		: CLAMP(to->dticks - ticks_elapsed, 0, MAX_WAIT);
   2081e:	f1b0 4f00 	cmp.w	r0, #2147483648	; 0x80000000
   20822:	f173 0300 	sbcs.w	r3, r3, #0
   20826:	db01      	blt.n	2082c <next_timeout+0x34>
	int32_t ret = to == NULL ? MAX_WAIT
   20828:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000

#ifdef CONFIG_TIMESLICING
	if (_current_cpu->slice_ticks && _current_cpu->slice_ticks < ret) {
   2082c:	4b05      	ldr	r3, [pc, #20]	; (20844 <next_timeout+0x4c>)
   2082e:	695b      	ldr	r3, [r3, #20]
   20830:	b113      	cbz	r3, 20838 <next_timeout+0x40>
   20832:	4298      	cmp	r0, r3
   20834:	bfa8      	it	ge
   20836:	4618      	movge	r0, r3
		ret = _current_cpu->slice_ticks;
	}
#endif
	return ret;
}
   20838:	bd10      	pop	{r4, pc}
	int32_t ret = to == NULL ? MAX_WAIT
   2083a:	2000      	movs	r0, #0
   2083c:	e7f6      	b.n	2082c <next_timeout+0x34>
   2083e:	bf00      	nop
   20840:	2000077c 	.word	0x2000077c
   20844:	2000ed08 	.word	0x2000ed08

00020848 <remove_timeout>:
{
   20848:	b530      	push	{r4, r5, lr}
	return (node == list->tail) ? NULL : node->next;
   2084a:	6803      	ldr	r3, [r0, #0]
	return (node != NULL) ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2084c:	b168      	cbz	r0, 2086a <remove_timeout+0x22>
	return (node == list->tail) ? NULL : node->next;
   2084e:	4a0a      	ldr	r2, [pc, #40]	; (20878 <remove_timeout+0x30>)
   20850:	6852      	ldr	r2, [r2, #4]
   20852:	4290      	cmp	r0, r2
   20854:	d009      	beq.n	2086a <remove_timeout+0x22>
	if (next(t) != NULL) {
   20856:	b143      	cbz	r3, 2086a <remove_timeout+0x22>
		next(t)->dticks += t->dticks;
   20858:	e9d3 2104 	ldrd	r2, r1, [r3, #16]
   2085c:	e9d0 4504 	ldrd	r4, r5, [r0, #16]
   20860:	1912      	adds	r2, r2, r4
   20862:	eb41 0105 	adc.w	r1, r1, r5
   20866:	e9c3 2104 	strd	r2, r1, [r3, #16]
	node->prev->next = node->next;
   2086a:	6842      	ldr	r2, [r0, #4]
   2086c:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   2086e:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20870:	2300      	movs	r3, #0
	node->prev = NULL;
   20872:	e9c0 3300 	strd	r3, r3, [r0]
}
   20876:	bd30      	pop	{r4, r5, pc}
   20878:	2000077c 	.word	0x2000077c

0002087c <z_add_timeout>:

void z_add_timeout(struct _timeout *to, _timeout_func_t fn,
		   k_timeout_t timeout)
{
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2087c:	f1b3 3fff 	cmp.w	r3, #4294967295
   20880:	bf08      	it	eq
   20882:	f1b2 3fff 	cmpeq.w	r2, #4294967295
{
   20886:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2088a:	4604      	mov	r4, r0
   2088c:	4688      	mov	r8, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2088e:	d064      	beq.n	2095a <z_add_timeout+0xde>

#ifdef CONFIG_KERNEL_COHERENCE
	__ASSERT_NO_MSG(arch_mem_coherent(to));
#endif

	k_ticks_t ticks = timeout.ticks + 1;
   20890:	1c55      	adds	r5, r2, #1

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   20892:	f06f 0701 	mvn.w	r7, #1
	k_ticks_t ticks = timeout.ticks + 1;
   20896:	f143 0600 	adc.w	r6, r3, #0
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(ticks) >= 0) {
   2089a:	f04f 39ff 	mov.w	r9, #4294967295
   2089e:	1b7b      	subs	r3, r7, r5
   208a0:	eb69 0306 	sbc.w	r3, r9, r6
   208a4:	2b00      	cmp	r3, #0
   208a6:	db0d      	blt.n	208c4 <z_add_timeout+0x48>
		ticks = Z_TICK_ABS(ticks) - (curr_tick + elapsed());
   208a8:	f7ff ff9c 	bl	207e4 <elapsed>
   208ac:	4b30      	ldr	r3, [pc, #192]	; (20970 <z_add_timeout+0xf4>)
   208ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   208b2:	1abf      	subs	r7, r7, r2
   208b4:	eb69 0303 	sbc.w	r3, r9, r3
   208b8:	1b7d      	subs	r5, r7, r5
   208ba:	eb63 0606 	sbc.w	r6, r3, r6
   208be:	1a2d      	subs	r5, r5, r0
   208c0:	eb66 76e0 	sbc.w	r6, r6, r0, asr #31
	}

	__ASSERT(!sys_dnode_is_linked(&to->node), "");
	to->fn = fn;
   208c4:	f8c4 8008 	str.w	r8, [r4, #8]
	__asm__ volatile(
   208c8:	f04f 0320 	mov.w	r3, #32
   208cc:	f3ef 8711 	mrs	r7, BASEPRI
   208d0:	f383 8811 	msr	BASEPRI, r3
   208d4:	f3bf 8f6f 	isb	sy
	ticks = MAX(1, ticks);

	LOCKED(&timeout_lock) {
		struct _timeout *t;

		to->dticks = ticks + elapsed();
   208d8:	f7ff ff84 	bl	207e4 <elapsed>
	ticks = MAX(1, ticks);
   208dc:	2d01      	cmp	r5, #1
	return list->head == list;
   208de:	4a25      	ldr	r2, [pc, #148]	; (20974 <z_add_timeout+0xf8>)
   208e0:	f176 0300 	sbcs.w	r3, r6, #0
   208e4:	bfb8      	it	lt
   208e6:	2501      	movlt	r5, #1
   208e8:	6813      	ldr	r3, [r2, #0]
   208ea:	bfb8      	it	lt
   208ec:	2600      	movlt	r6, #0
		to->dticks = ticks + elapsed();
   208ee:	182d      	adds	r5, r5, r0
   208f0:	eb46 76e0 	adc.w	r6, r6, r0, asr #31
	return sys_dlist_is_empty(list) ? NULL : list->head;
   208f4:	4293      	cmp	r3, r2
   208f6:	e9c4 5604 	strd	r5, r6, [r4, #16]
   208fa:	d002      	beq.n	20902 <z_add_timeout+0x86>
	return (node == list->tail) ? NULL : node->next;
   208fc:	f8d2 c004 	ldr.w	ip, [r2, #4]
		for (t = first(); t != NULL; t = next(t)) {
   20900:	b933      	cbnz	r3, 20910 <z_add_timeout+0x94>
	node->prev = list->tail;
   20902:	6853      	ldr	r3, [r2, #4]
   20904:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   20906:	6853      	ldr	r3, [r2, #4]
	node->next = list;
   20908:	6022      	str	r2, [r4, #0]
	list->tail->next = node;
   2090a:	601c      	str	r4, [r3, #0]
	list->tail = node;
   2090c:	6054      	str	r4, [r2, #4]
}
   2090e:	e011      	b.n	20934 <z_add_timeout+0xb8>
			if (t->dticks > to->dticks) {
   20910:	e9d3 0604 	ldrd	r0, r6, [r3, #16]
   20914:	e9d4 1504 	ldrd	r1, r5, [r4, #16]
   20918:	4281      	cmp	r1, r0
   2091a:	eb75 0e06 	sbcs.w	lr, r5, r6
   2091e:	da1e      	bge.n	2095e <z_add_timeout+0xe2>
				t->dticks -= to->dticks;
   20920:	1a41      	subs	r1, r0, r1
   20922:	eb66 0505 	sbc.w	r5, r6, r5
   20926:	e9c3 1504 	strd	r1, r5, [r3, #16]
	node->prev = successor->prev;
   2092a:	6859      	ldr	r1, [r3, #4]
	node->next = successor;
   2092c:	e9c4 3100 	strd	r3, r1, [r4]
	successor->prev->next = node;
   20930:	600c      	str	r4, [r1, #0]
	successor->prev = node;
   20932:	605c      	str	r4, [r3, #4]
	return list->head == list;
   20934:	6813      	ldr	r3, [r2, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20936:	4293      	cmp	r3, r2
   20938:	d00b      	beq.n	20952 <z_add_timeout+0xd6>

		if (t == NULL) {
			sys_dlist_append(&timeout_list, &to->node);
		}

		if (to == first()) {
   2093a:	429c      	cmp	r4, r3
   2093c:	d109      	bne.n	20952 <z_add_timeout+0xd6>
			 * last announcement, and slice_ticks is based
			 * on that. It means the that time remaining for
			 * the next announcement can be lesser than
			 * slice_ticks.
			 */
			int32_t next_time = next_timeout();
   2093e:	f7ff ff5b 	bl	207f8 <next_timeout>

			if (next_time == 0 ||
   20942:	b118      	cbz	r0, 2094c <z_add_timeout+0xd0>
			    _current_cpu->slice_ticks != next_time) {
   20944:	4b0c      	ldr	r3, [pc, #48]	; (20978 <z_add_timeout+0xfc>)
			if (next_time == 0 ||
   20946:	695b      	ldr	r3, [r3, #20]
   20948:	4283      	cmp	r3, r0
   2094a:	d002      	beq.n	20952 <z_add_timeout+0xd6>
				z_clock_set_timeout(next_time, false);
   2094c:	2100      	movs	r1, #0
   2094e:	f7e6 fc93 	bl	7278 <z_clock_set_timeout>
	__asm__ volatile(
   20952:	f387 8811 	msr	BASEPRI, r7
   20956:	f3bf 8f6f 	isb	sy
#else
			z_clock_set_timeout(next_timeout(), false);
#endif	/* CONFIG_TIMESLICING */
		}
	}
}
   2095a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			to->dticks -= t->dticks;
   2095e:	1a09      	subs	r1, r1, r0
   20960:	eb65 0506 	sbc.w	r5, r5, r6
	return (node == list->tail) ? NULL : node->next;
   20964:	4563      	cmp	r3, ip
   20966:	e9c4 1504 	strd	r1, r5, [r4, #16]
   2096a:	d0ca      	beq.n	20902 <z_add_timeout+0x86>
   2096c:	681b      	ldr	r3, [r3, #0]
   2096e:	e7c7      	b.n	20900 <z_add_timeout+0x84>
   20970:	2000ad48 	.word	0x2000ad48
   20974:	2000077c 	.word	0x2000077c
   20978:	2000ed08 	.word	0x2000ed08

0002097c <z_clock_announce>:
		}
	}
}

void z_clock_announce(int32_t ticks)
{
   2097c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   20980:	4605      	mov	r5, r0
#ifdef CONFIG_TIMESLICING
	z_time_slice(ticks);
   20982:	f7ff fb31 	bl	1ffe8 <z_time_slice>
	__asm__ volatile(
   20986:	f04f 0320 	mov.w	r3, #32
   2098a:	f3ef 8411 	mrs	r4, BASEPRI
   2098e:	f383 8811 	msr	BASEPRI, r3
   20992:	f3bf 8f6f 	isb	sy
#endif

	k_spinlock_key_t key = k_spin_lock(&timeout_lock);

	announce_remaining = ticks;
   20996:	4e24      	ldr	r6, [pc, #144]	; (20a28 <z_clock_announce+0xac>)
	return list->head == list;
   20998:	f8df 8090 	ldr.w	r8, [pc, #144]	; 20a2c <z_clock_announce+0xb0>
   2099c:	6035      	str	r5, [r6, #0]

	while (first() != NULL && first()->dticks <= announce_remaining) {
		struct _timeout *t = first();
		int dt = t->dticks;

		curr_tick += dt;
   2099e:	4d24      	ldr	r5, [pc, #144]	; (20a30 <z_clock_announce+0xb4>)
   209a0:	f8d8 0000 	ldr.w	r0, [r8]
	while (first() != NULL && first()->dticks <= announce_remaining) {
   209a4:	6832      	ldr	r2, [r6, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   209a6:	4540      	cmp	r0, r8
		curr_tick += dt;
   209a8:	e9d5 1e00 	ldrd	r1, lr, [r5]
   209ac:	ea4f 77e2 	mov.w	r7, r2, asr #31
   209b0:	d00b      	beq.n	209ca <z_clock_announce+0x4e>
	while (first() != NULL && first()->dticks <= announce_remaining) {
   209b2:	b150      	cbz	r0, 209ca <z_clock_announce+0x4e>
   209b4:	e9d0 3c04 	ldrd	r3, ip, [r0, #16]
   209b8:	429a      	cmp	r2, r3
   209ba:	eb77 090c 	sbcs.w	r9, r7, ip
   209be:	da16      	bge.n	209ee <z_clock_announce+0x72>
		t->fn(t);
		key = k_spin_lock(&timeout_lock);
	}

	if (first() != NULL) {
		first()->dticks -= announce_remaining;
   209c0:	1a9b      	subs	r3, r3, r2
   209c2:	eb6c 0c07 	sbc.w	ip, ip, r7
   209c6:	e9c0 3c04 	strd	r3, ip, [r0, #16]
	}

	curr_tick += announce_remaining;
   209ca:	1852      	adds	r2, r2, r1
   209cc:	eb4e 0707 	adc.w	r7, lr, r7
   209d0:	e9c5 2700 	strd	r2, r7, [r5]
	announce_remaining = 0;
   209d4:	2500      	movs	r5, #0
   209d6:	6035      	str	r5, [r6, #0]

	z_clock_set_timeout(next_timeout(), false);
   209d8:	f7ff ff0e 	bl	207f8 <next_timeout>
   209dc:	4629      	mov	r1, r5
   209de:	f7e6 fc4b 	bl	7278 <z_clock_set_timeout>
	__asm__ volatile(
   209e2:	f384 8811 	msr	BASEPRI, r4
   209e6:	f3bf 8f6f 	isb	sy

	k_spin_unlock(&timeout_lock, key);
}
   209ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		curr_tick += dt;
   209ee:	1859      	adds	r1, r3, r1
   209f0:	eb4e 77e3 	adc.w	r7, lr, r3, asr #31
		announce_remaining -= dt;
   209f4:	1ad3      	subs	r3, r2, r3
   209f6:	6033      	str	r3, [r6, #0]
		t->dticks = 0;
   209f8:	2200      	movs	r2, #0
   209fa:	2300      	movs	r3, #0
   209fc:	e9c0 2304 	strd	r2, r3, [r0, #16]
		curr_tick += dt;
   20a00:	e9c5 1700 	strd	r1, r7, [r5]
		remove_timeout(t);
   20a04:	f7ff ff20 	bl	20848 <remove_timeout>
   20a08:	f384 8811 	msr	BASEPRI, r4
   20a0c:	f3bf 8f6f 	isb	sy
		t->fn(t);
   20a10:	6883      	ldr	r3, [r0, #8]
   20a12:	4798      	blx	r3
	__asm__ volatile(
   20a14:	f04f 0320 	mov.w	r3, #32
   20a18:	f3ef 8411 	mrs	r4, BASEPRI
   20a1c:	f383 8811 	msr	BASEPRI, r3
   20a20:	f3bf 8f6f 	isb	sy
#endif

#ifdef CONFIG_SPIN_VALIDATE
	z_spin_lock_set_owner(l);
#endif
	return k;
   20a24:	e7bc      	b.n	209a0 <z_clock_announce+0x24>
   20a26:	bf00      	nop
   20a28:	2000ed48 	.word	0x2000ed48
   20a2c:	2000077c 	.word	0x2000077c
   20a30:	2000ad48 	.word	0x2000ad48

00020a34 <z_tick_get>:

int64_t z_tick_get(void)
{
   20a34:	b510      	push	{r4, lr}
   20a36:	f04f 0320 	mov.w	r3, #32
   20a3a:	f3ef 8411 	mrs	r4, BASEPRI
   20a3e:	f383 8811 	msr	BASEPRI, r3
   20a42:	f3bf 8f6f 	isb	sy
	uint64_t t = 0U;

	LOCKED(&timeout_lock) {
		t = curr_tick + z_clock_elapsed();
   20a46:	f7e6 fc49 	bl	72dc <z_clock_elapsed>
   20a4a:	4a05      	ldr	r2, [pc, #20]	; (20a60 <z_tick_get+0x2c>)
   20a4c:	e9d2 3100 	ldrd	r3, r1, [r2]
   20a50:	18c0      	adds	r0, r0, r3
   20a52:	f141 0100 	adc.w	r1, r1, #0
	__asm__ volatile(
   20a56:	f384 8811 	msr	BASEPRI, r4
   20a5a:	f3bf 8f6f 	isb	sy
	}
	return t;
}
   20a5e:	bd10      	pop	{r4, pc}
   20a60:	2000ad48 	.word	0x2000ad48

00020a64 <z_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void z_timer_expiration_handler(struct _timeout *t)
{
   20a64:	b538      	push	{r3, r4, r5, lr}

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20a66:	e9d0 320a 	ldrd	r3, r2, [r0, #40]	; 0x28
   20a6a:	3301      	adds	r3, #1
   20a6c:	f142 0200 	adc.w	r2, r2, #0
   20a70:	2b02      	cmp	r3, #2
   20a72:	f172 0300 	sbcs.w	r3, r2, #0
{
   20a76:	4604      	mov	r4, r0
	if (!K_TIMEOUT_EQ(timer->period, K_NO_WAIT) &&
   20a78:	d304      	bcc.n	20a84 <z_timer_expiration_handler+0x20>
	    !K_TIMEOUT_EQ(timer->period, K_FOREVER)) {
		z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20a7a:	e9d0 230a 	ldrd	r2, r3, [r0, #40]	; 0x28
   20a7e:	490c      	ldr	r1, [pc, #48]	; (20ab0 <z_timer_expiration_handler+0x4c>)
   20a80:	f7ff fefc 	bl	2087c <z_add_timeout>
			     timer->period);
	}

	/* update timer's status */
	timer->status += 1U;
   20a84:	6b23      	ldr	r3, [r4, #48]	; 0x30
   20a86:	3301      	adds	r3, #1
   20a88:	6323      	str	r3, [r4, #48]	; 0x30

	/* invoke timer expiry function */
	if (timer->expiry_fn != NULL) {
   20a8a:	6a23      	ldr	r3, [r4, #32]
   20a8c:	b10b      	cbz	r3, 20a92 <z_timer_expiration_handler+0x2e>
		timer->expiry_fn(timer);
   20a8e:	4620      	mov	r0, r4
   20a90:	4798      	blx	r3
	return list->head == list;
   20a92:	f854 5f18 	ldr.w	r5, [r4, #24]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   20a96:	42a5      	cmp	r5, r4
   20a98:	d009      	beq.n	20aae <z_timer_expiration_handler+0x4a>
	}

	thread = z_waitq_head(&timer->wait_q);

	if (thread == NULL) {
   20a9a:	b145      	cbz	r5, 20aae <z_timer_expiration_handler+0x4a>
	 * place a thread can be taken off this pend queue, and b) the
	 * only place a thread can be put on the pend queue is at
	 * thread level, which of course cannot interrupt the current
	 * context.
	 */
	z_unpend_thread_no_timeout(thread);
   20a9c:	4628      	mov	r0, r5
   20a9e:	f006 fa2c 	bl	26efa <z_unpend_thread_no_timeout>

	z_ready_thread(thread);
   20aa2:	4628      	mov	r0, r5
   20aa4:	f006 fa77 	bl	26f96 <z_ready_thread>
   20aa8:	2300      	movs	r3, #0
   20aaa:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80

	arch_thread_return_value_set(thread, 0);
}
   20aae:	bd38      	pop	{r3, r4, r5, pc}
   20ab0:	00020a65 	.word	0x00020a65

00020ab4 <z_impl_k_timer_start>:
}


void z_impl_k_timer_start(struct k_timer *timer, k_timeout_t duration,
			  k_timeout_t period)
{
   20ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20ab8:	4611      	mov	r1, r2
   20aba:	4605      	mov	r5, r0
   20abc:	4618      	mov	r0, r3
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20abe:	f1b0 3fff 	cmp.w	r0, #4294967295
   20ac2:	bf08      	it	eq
   20ac4:	f1b1 3fff 	cmpeq.w	r1, #4294967295
{
   20ac8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
   20acc:	4688      	mov	r8, r1
   20ace:	4607      	mov	r7, r0
	if (K_TIMEOUT_EQ(duration, K_FOREVER)) {
   20ad0:	d036      	beq.n	20b40 <z_impl_k_timer_start+0x8c>
   20ad2:	4614      	mov	r4, r2
	 * for backwards compatibility.  This is unfortunate
	 * (i.e. k_timer_start() doesn't treat its initial sleep
	 * argument the same way k_sleep() does), but historical.  The
	 * timer_api test relies on this behavior.
	 */
	if (period.ticks != 0 && Z_TICK_ABS(period.ticks) < 0) {
   20ad4:	431a      	orrs	r2, r3
   20ad6:	461e      	mov	r6, r3
   20ad8:	d011      	beq.n	20afe <z_impl_k_timer_start+0x4a>
   20ada:	f06f 0201 	mvn.w	r2, #1
   20ade:	1b12      	subs	r2, r2, r4
   20ae0:	f04f 32ff 	mov.w	r2, #4294967295
   20ae4:	eb62 0203 	sbc.w	r2, r2, r3
   20ae8:	2a00      	cmp	r2, #0
   20aea:	da08      	bge.n	20afe <z_impl_k_timer_start+0x4a>
		period.ticks = MAX(period.ticks - 1, 1);
   20aec:	3c01      	subs	r4, #1
   20aee:	f163 0600 	sbc.w	r6, r3, #0
   20af2:	2c01      	cmp	r4, #1
   20af4:	f176 0300 	sbcs.w	r3, r6, #0
   20af8:	bfbc      	itt	lt
   20afa:	2401      	movlt	r4, #1
   20afc:	2600      	movlt	r6, #0
	}
	if (Z_TICK_ABS(duration.ticks) < 0) {
   20afe:	f06f 0301 	mvn.w	r3, #1
   20b02:	1a5b      	subs	r3, r3, r1
   20b04:	f04f 33ff 	mov.w	r3, #4294967295
   20b08:	eb63 0300 	sbc.w	r3, r3, r0
   20b0c:	2b00      	cmp	r3, #0
   20b0e:	da08      	bge.n	20b22 <z_impl_k_timer_start+0x6e>
		duration.ticks = MAX(duration.ticks - 1, 0);
   20b10:	1e4a      	subs	r2, r1, #1
   20b12:	f160 0700 	sbc.w	r7, r0, #0
   20b16:	2f00      	cmp	r7, #0
   20b18:	4690      	mov	r8, r2
   20b1a:	bfbc      	itt	lt
   20b1c:	f04f 0800 	movlt.w	r8, #0
   20b20:	4647      	movlt	r7, r8
	}

	(void)z_abort_timeout(&timer->timeout);
   20b22:	4628      	mov	r0, r5
   20b24:	f006 fb64 	bl	271f0 <z_abort_timeout>
	timer->period = period;
	timer->status = 0U;
   20b28:	2300      	movs	r3, #0
   20b2a:	632b      	str	r3, [r5, #48]	; 0x30
	timer->period = period;
   20b2c:	e9c5 460a 	strd	r4, r6, [r5, #40]	; 0x28

	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20b30:	4642      	mov	r2, r8
   20b32:	463b      	mov	r3, r7
   20b34:	4628      	mov	r0, r5
   20b36:	4903      	ldr	r1, [pc, #12]	; (20b44 <z_impl_k_timer_start+0x90>)
		     duration);
}
   20b38:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	z_add_timeout(&timer->timeout, z_timer_expiration_handler,
   20b3c:	f7ff be9e 	b.w	2087c <z_add_timeout>
}
   20b40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   20b44:	00020a65 	.word	0x00020a65

00020b48 <z_impl_k_poll>:
	return 0;
}

int z_impl_k_poll(struct k_poll_event *events, int num_events,
		  k_timeout_t timeout)
{
   20b48:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20b4c:	461d      	mov	r5, r3
	int events_registered;
	k_spinlock_key_t key;
	struct z_poller *poller = &_current->poller;
   20b4e:	4b29      	ldr	r3, [pc, #164]	; (20bf4 <z_impl_k_poll+0xac>)
   20b50:	689f      	ldr	r7, [r3, #8]

	poller->is_polling = true;
   20b52:	2301      	movs	r3, #1
   20b54:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	poller->mode = MODE_POLL;
   20b58:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65

	__ASSERT(!arch_is_in_isr(), "");
	__ASSERT(events != NULL, "NULL events\n");
	__ASSERT(num_events >= 0, "<0 events\n");

	events_registered = register_events(events, num_events, poller,
   20b5c:	ea52 0305 	orrs.w	r3, r2, r5
{
   20b60:	4616      	mov	r6, r2
	events_registered = register_events(events, num_events, poller,
   20b62:	bf0c      	ite	eq
   20b64:	2301      	moveq	r3, #1
   20b66:	2300      	movne	r3, #0
   20b68:	f107 0264 	add.w	r2, r7, #100	; 0x64
{
   20b6c:	4680      	mov	r8, r0
	events_registered = register_events(events, num_events, poller,
   20b6e:	f006 fc7d 	bl	2746c <register_events>
   20b72:	4681      	mov	r9, r0
	__asm__ volatile(
   20b74:	f04f 0320 	mov.w	r3, #32
   20b78:	f3ef 8a11 	mrs	sl, BASEPRI
   20b7c:	f383 8811 	msr	BASEPRI, r3
   20b80:	f3bf 8f6f 	isb	sy
	/*
	 * If we're not polling anymore, it means that at least one event
	 * condition is met, either when looping through the events here or
	 * because one of the events registered has had its state changed.
	 */
	if (!poller->is_polling) {
   20b84:	f897 4064 	ldrb.w	r4, [r7, #100]	; 0x64
   20b88:	b964      	cbnz	r4, 20ba4 <z_impl_k_poll+0x5c>
		clear_event_registrations(events, events_registered, key);
   20b8a:	4601      	mov	r1, r0
   20b8c:	4652      	mov	r2, sl
   20b8e:	4640      	mov	r0, r8
   20b90:	f006 fccd 	bl	2752e <clear_event_registrations>
	__asm__ volatile(
   20b94:	f38a 8811 	msr	BASEPRI, sl
   20b98:	f3bf 8f6f 	isb	sy
	key = k_spin_lock(&lock);
	clear_event_registrations(events, events_registered, key);
	k_spin_unlock(&lock, key);

	return swap_rc;
}
   20b9c:	4620      	mov	r0, r4
   20b9e:	b002      	add	sp, #8
   20ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	poller->is_polling = false;
   20ba4:	2300      	movs	r3, #0
   20ba6:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
	if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   20baa:	ea56 0305 	orrs.w	r3, r6, r5
   20bae:	d106      	bne.n	20bbe <z_impl_k_poll+0x76>
   20bb0:	f38a 8811 	msr	BASEPRI, sl
   20bb4:	f3bf 8f6f 	isb	sy
		return -EAGAIN;
   20bb8:	f06f 040a 	mvn.w	r4, #10
   20bbc:	e7ee      	b.n	20b9c <z_impl_k_poll+0x54>
	int swap_rc = z_pend_curr(&lock, key, &wait_q, timeout);
   20bbe:	e9cd 6500 	strd	r6, r5, [sp]
   20bc2:	4a0d      	ldr	r2, [pc, #52]	; (20bf8 <z_impl_k_poll+0xb0>)
   20bc4:	480d      	ldr	r0, [pc, #52]	; (20bfc <z_impl_k_poll+0xb4>)
   20bc6:	4651      	mov	r1, sl
   20bc8:	f7ff fb44 	bl	20254 <z_pend_curr>
   20bcc:	4604      	mov	r4, r0
	__asm__ volatile(
   20bce:	f04f 0320 	mov.w	r3, #32
   20bd2:	f3ef 8511 	mrs	r5, BASEPRI
   20bd6:	f383 8811 	msr	BASEPRI, r3
   20bda:	f3bf 8f6f 	isb	sy
	clear_event_registrations(events, events_registered, key);
   20bde:	462a      	mov	r2, r5
   20be0:	4649      	mov	r1, r9
   20be2:	4640      	mov	r0, r8
   20be4:	f006 fca3 	bl	2752e <clear_event_registrations>
	__asm__ volatile(
   20be8:	f385 8811 	msr	BASEPRI, r5
   20bec:	f3bf 8f6f 	isb	sy
	return swap_rc;
   20bf0:	e7d4      	b.n	20b9c <z_impl_k_poll+0x54>
   20bf2:	bf00      	nop
   20bf4:	2000ed08 	.word	0x2000ed08
   20bf8:	20000784 	.word	0x20000784
   20bfc:	2000f324 	.word	0x2000f324

00020c00 <z_impl_k_poll_signal_raise>:
}
#include <syscalls/k_poll_signal_check_mrsh.c>
#endif

int z_impl_k_poll_signal_raise(struct k_poll_signal *signal, int result)
{
   20c00:	b538      	push	{r3, r4, r5, lr}
   20c02:	4603      	mov	r3, r0
	__asm__ volatile(
   20c04:	f04f 0220 	mov.w	r2, #32
   20c08:	f3ef 8511 	mrs	r5, BASEPRI
   20c0c:	f382 8811 	msr	BASEPRI, r2
   20c10:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	struct k_poll_event *poll_event;

	signal->result = result;
   20c14:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1U;
   20c16:	2101      	movs	r1, #1
   20c18:	6081      	str	r1, [r0, #8]
	return list->head == list;
   20c1a:	6800      	ldr	r0, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node = NULL;

	if (!sys_dlist_is_empty(list)) {
   20c1c:	4283      	cmp	r3, r0
   20c1e:	d106      	bne.n	20c2e <z_impl_k_poll_signal_raise+0x2e>
	__asm__ volatile(
   20c20:	f385 8811 	msr	BASEPRI, r5
   20c24:	f3bf 8f6f 	isb	sy

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (poll_event == NULL) {
		k_spin_unlock(&lock, key);
		return 0;
   20c28:	2400      	movs	r4, #0

	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);

	z_reschedule(&lock, key);
	return rc;
}
   20c2a:	4620      	mov	r0, r4
   20c2c:	bd38      	pop	{r3, r4, r5, pc}
	node->prev->next = node->next;
   20c2e:	e9d0 3200 	ldrd	r3, r2, [r0]
   20c32:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   20c34:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   20c36:	2300      	movs	r3, #0
	node->prev = NULL;
   20c38:	e9c0 3300 	strd	r3, r3, [r0]
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20c3c:	f006 fb8a 	bl	27354 <signal_poll_event>
	z_reschedule(&lock, key);
   20c40:	4629      	mov	r1, r5
	int rc = signal_poll_event(poll_event, K_POLL_STATE_SIGNALED);
   20c42:	4604      	mov	r4, r0
	z_reschedule(&lock, key);
   20c44:	4801      	ldr	r0, [pc, #4]	; (20c4c <z_impl_k_poll_signal_raise+0x4c>)
   20c46:	f7ff f8c5 	bl	1fdd4 <z_reschedule>
	return rc;
   20c4a:	e7ee      	b.n	20c2a <z_impl_k_poll_signal_raise+0x2a>
   20c4c:	2000f324 	.word	0x2000f324

00020c50 <z_thread_aligned_alloc>:
#else
#define _SYSTEM_HEAP	NULL
#endif

void *z_thread_aligned_alloc(size_t align, size_t size)
{
   20c50:	b573      	push	{r0, r1, r4, r5, r6, lr}
   20c52:	4606      	mov	r6, r0
   20c54:	460d      	mov	r5, r1
	void *ret;
	struct k_heap *heap;

	if (k_is_in_isr()) {
   20c56:	f006 fa44 	bl	270e2 <k_is_in_isr>
   20c5a:	b978      	cbnz	r0, 20c7c <z_thread_aligned_alloc+0x2c>
		heap = _SYSTEM_HEAP;
	} else {
		heap = _current->resource_pool;
   20c5c:	4b0b      	ldr	r3, [pc, #44]	; (20c8c <z_thread_aligned_alloc+0x3c>)
   20c5e:	689b      	ldr	r3, [r3, #8]
   20c60:	6f9c      	ldr	r4, [r3, #120]	; 0x78
	}

	if (heap) {
   20c62:	b17c      	cbz	r4, 20c84 <z_thread_aligned_alloc+0x34>
	return __builtin_add_overflow(a, b, result);
}

static inline bool size_add_overflow(size_t a, size_t b, size_t *result)
{
	return __builtin_add_overflow(a, b, result);
   20c64:	1d2a      	adds	r2, r5, #4
   20c66:	d209      	bcs.n	20c7c <z_thread_aligned_alloc+0x2c>
	mem = k_heap_aligned_alloc(heap, __align, size, K_NO_WAIT);
   20c68:	2000      	movs	r0, #0
   20c6a:	2100      	movs	r1, #0
   20c6c:	e9cd 0100 	strd	r0, r1, [sp]
   20c70:	f046 0104 	orr.w	r1, r6, #4
   20c74:	4620      	mov	r0, r4
   20c76:	f005 ffe1 	bl	26c3c <k_heap_aligned_alloc>
	if (mem == NULL) {
   20c7a:	b908      	cbnz	r0, 20c80 <z_thread_aligned_alloc+0x30>
		ret = z_heap_aligned_alloc(heap, align, size);
	} else {
		ret = NULL;
   20c7c:	2400      	movs	r4, #0
	}

	return ret;
   20c7e:	e001      	b.n	20c84 <z_thread_aligned_alloc+0x34>
	*heap_ref = heap;
   20c80:	6004      	str	r4, [r0, #0]
	mem = ++heap_ref;
   20c82:	1d04      	adds	r4, r0, #4
}
   20c84:	4620      	mov	r0, r4
   20c86:	b002      	add	sp, #8
   20c88:	bd70      	pop	{r4, r5, r6, pc}
   20c8a:	bf00      	nop
   20c8c:	2000ed08 	.word	0x2000ed08

00020c90 <write_without_rsp_vnd>:
{
   20c90:	b510      	push	{r4, lr}
   20c92:	4608      	mov	r0, r1
   20c94:	4611      	mov	r1, r2
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20c96:	f89d 200c 	ldrb.w	r2, [sp, #12]
	uint8_t *value = attr->user_data;
   20c9a:	68c0      	ldr	r0, [r0, #12]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20c9c:	0792      	lsls	r2, r2, #30
{
   20c9e:	461c      	mov	r4, r3
   20ca0:	f8bd 3008 	ldrh.w	r3, [sp, #8]
	if (!(flags & BT_GATT_WRITE_FLAG_CMD)) {
   20ca4:	d508      	bpl.n	20cb8 <write_without_rsp_vnd+0x28>
	if (offset + len > sizeof(vnd_value)) {
   20ca6:	191a      	adds	r2, r3, r4
   20ca8:	2a06      	cmp	r2, #6
   20caa:	dc08      	bgt.n	20cbe <write_without_rsp_vnd+0x2e>
	memcpy(value + offset, buf, len);
   20cac:	4622      	mov	r2, r4
   20cae:	4418      	add	r0, r3
   20cb0:	f003 fbda 	bl	24468 <memcpy>
}
   20cb4:	4620      	mov	r0, r4
   20cb6:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_WRITE_REQ_REJECTED);
   20cb8:	f06f 04fb 	mvn.w	r4, #251	; 0xfb
   20cbc:	e7fa      	b.n	20cb4 <write_without_rsp_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20cbe:	f06f 0406 	mvn.w	r4, #6
   20cc2:	e7f7      	b.n	20cb4 <write_without_rsp_vnd+0x24>

00020cc4 <write_signed>:
{
   20cc4:	b538      	push	{r3, r4, r5, lr}
   20cc6:	460c      	mov	r4, r1
   20cc8:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   20ccc:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(signed_value)) {
   20cce:	461c      	mov	r4, r3
   20cd0:	18c3      	adds	r3, r0, r3
   20cd2:	2b04      	cmp	r3, #4
{
   20cd4:	4611      	mov	r1, r2
	if (offset + len > sizeof(signed_value)) {
   20cd6:	dc05      	bgt.n	20ce4 <write_signed+0x20>
	memcpy(value + offset, buf, len);
   20cd8:	4622      	mov	r2, r4
   20cda:	4428      	add	r0, r5
   20cdc:	f003 fbc4 	bl	24468 <memcpy>
}
   20ce0:	4620      	mov	r0, r4
   20ce2:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20ce4:	f06f 0406 	mvn.w	r4, #6
   20ce8:	e7fa      	b.n	20ce0 <write_signed+0x1c>

00020cea <write_long_vnd>:
{
   20cea:	b538      	push	{r3, r4, r5, lr}
   20cec:	460d      	mov	r5, r1
   20cee:	4611      	mov	r1, r2
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   20cf0:	f89d 2014 	ldrb.w	r2, [sp, #20]
   20cf4:	07d2      	lsls	r2, r2, #31
{
   20cf6:	461c      	mov	r4, r3
   20cf8:	f8bd 3010 	ldrh.w	r3, [sp, #16]
	if (flags & BT_GATT_WRITE_FLAG_PREPARE) {
   20cfc:	d409      	bmi.n	20d12 <write_long_vnd+0x28>
	if (offset + len > sizeof(vnd_long_value)) {
   20cfe:	191a      	adds	r2, r3, r4
   20d00:	2a4a      	cmp	r2, #74	; 0x4a
   20d02:	dc08      	bgt.n	20d16 <write_long_vnd+0x2c>
	memcpy(value + offset, buf, len);
   20d04:	68e8      	ldr	r0, [r5, #12]
   20d06:	4622      	mov	r2, r4
   20d08:	4418      	add	r0, r3
   20d0a:	f003 fbad 	bl	24468 <memcpy>
}
   20d0e:	4620      	mov	r0, r4
   20d10:	bd38      	pop	{r3, r4, r5, pc}
		return 0;
   20d12:	2400      	movs	r4, #0
   20d14:	e7fb      	b.n	20d0e <write_long_vnd+0x24>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20d16:	f06f 0406 	mvn.w	r4, #6
   20d1a:	e7f8      	b.n	20d0e <write_long_vnd+0x24>

00020d1c <write_vnd>:
{
   20d1c:	b538      	push	{r3, r4, r5, lr}
   20d1e:	460c      	mov	r4, r1
   20d20:	f8bd 0010 	ldrh.w	r0, [sp, #16]
	uint8_t *value = attr->user_data;
   20d24:	68e5      	ldr	r5, [r4, #12]
	if (offset + len > sizeof(vnd_value)) {
   20d26:	461c      	mov	r4, r3
   20d28:	18c3      	adds	r3, r0, r3
   20d2a:	2b06      	cmp	r3, #6
{
   20d2c:	4611      	mov	r1, r2
	if (offset + len > sizeof(vnd_value)) {
   20d2e:	dc05      	bgt.n	20d3c <write_vnd+0x20>
	memcpy(value + offset, buf, len);
   20d30:	4622      	mov	r2, r4
   20d32:	4428      	add	r0, r5
   20d34:	f003 fb98 	bl	24468 <memcpy>
}
   20d38:	4620      	mov	r0, r4
   20d3a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   20d3c:	f06f 0406 	mvn.w	r4, #6
   20d40:	e7fa      	b.n	20d38 <write_vnd+0x1c>

00020d42 <read_signed>:
{
   20d42:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   20d44:	2404      	movs	r4, #4
   20d46:	9402      	str	r4, [sp, #8]
   20d48:	68cc      	ldr	r4, [r1, #12]
   20d4a:	9401      	str	r4, [sp, #4]
   20d4c:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   20d50:	9400      	str	r4, [sp, #0]
   20d52:	f004 fed7 	bl	25b04 <bt_gatt_attr_read>
}
   20d56:	b004      	add	sp, #16
   20d58:	bd10      	pop	{r4, pc}

00020d5a <read_long_vnd>:
{
   20d5a:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   20d5c:	244a      	movs	r4, #74	; 0x4a
   20d5e:	9402      	str	r4, [sp, #8]
   20d60:	68cc      	ldr	r4, [r1, #12]
   20d62:	9401      	str	r4, [sp, #4]
   20d64:	f8bd 4018 	ldrh.w	r4, [sp, #24]
   20d68:	9400      	str	r4, [sp, #0]
   20d6a:	f004 fecb 	bl	25b04 <bt_gatt_attr_read>
}
   20d6e:	b004      	add	sp, #16
   20d70:	bd10      	pop	{r4, pc}

00020d72 <read_vnd>:
{
   20d72:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	const char *value = attr->user_data;
   20d76:	f8d1 800c 	ldr.w	r8, [r1, #12]
{
   20d7a:	4605      	mov	r5, r0
				 strlen(value));
   20d7c:	4640      	mov	r0, r8
{
   20d7e:	461f      	mov	r7, r3
   20d80:	460c      	mov	r4, r1
   20d82:	4616      	mov	r6, r2
				 strlen(value));
   20d84:	f003 fb32 	bl	243ec <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, value,
   20d88:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   20d8c:	9300      	str	r3, [sp, #0]
   20d8e:	b280      	uxth	r0, r0
   20d90:	e9cd 8001 	strd	r8, r0, [sp, #4]
   20d94:	463b      	mov	r3, r7
   20d96:	4632      	mov	r2, r6
   20d98:	4621      	mov	r1, r4
   20d9a:	4628      	mov	r0, r5
   20d9c:	f004 feb2 	bl	25b04 <bt_gatt_attr_read>
}
   20da0:	b004      	add	sp, #16
   20da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00020da6 <k_msleep.isra.0>:
 * @param ms Number of milliseconds to sleep.
 *
 * @return Zero if the requested time has elapsed or the number of milliseconds
 * left to sleep, if thread was woken up by \ref k_wakeup call.
 */
static inline int32_t k_msleep(int32_t ms)
   20da6:	4601      	mov	r1, r0
		}
	} else {
		if (result32) {
			return (uint32_t)((t * to_hz + off) / from_hz);
		} else {
			return (t * to_hz + off) / from_hz;
   20da8:	f240 30e7 	movw	r0, #999	; 0x3e7
   20dac:	b508      	push	{r3, lr}
   20dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20db2:	2300      	movs	r3, #0
   20db4:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   20db8:	1449      	asrs	r1, r1, #17
   20dba:	f7e0 f8ed 	bl	f98 <__aeabi_uldivmod>
{
	return k_sleep(Z_TIMEOUT_MS(ms));
}
   20dbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   20dc2:	f7ff bb2f 	b.w	20424 <z_impl_k_sleep>

00020dc6 <bma_delay_us>:
	z_impl_k_busy_wait(usec_to_wait);
   20dc6:	f006 b992 	b.w	270ee <z_impl_k_busy_wait>

00020dca <null_pointer_check>:
 */
static int8_t null_pointer_check(const struct bma4_dev *dev)
{
    int8_t rslt = BMA4_OK;

    if ((dev == NULL) || (dev->bus_read == NULL) || (dev->bus_write == NULL) || (dev->intf_ptr == NULL))
   20dca:	b148      	cbz	r0, 20de0 <null_pointer_check+0x16>
   20dcc:	6a03      	ldr	r3, [r0, #32]
   20dce:	b13b      	cbz	r3, 20de0 <null_pointer_check+0x16>
   20dd0:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20dd2:	b12b      	cbz	r3, 20de0 <null_pointer_check+0x16>
   20dd4:	6840      	ldr	r0, [r0, #4]
   20dd6:	fab0 f080 	clz	r0, r0
   20dda:	0940      	lsrs	r0, r0, #5
   20ddc:	4240      	negs	r0, r0
   20dde:	4770      	bx	lr
    {
        rslt = BMA4_E_NULL_PTR;
   20de0:	f04f 30ff 	mov.w	r0, #4294967295
    {
        rslt = BMA4_OK;
    }

    return rslt;
}
   20de4:	4770      	bx	lr

00020de6 <write_regs>:
{
   20de6:	b570      	push	{r4, r5, r6, lr}
   20de8:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   20dea:	4618      	mov	r0, r3
{
   20dec:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   20dee:	f7ff ffec 	bl	20dca <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   20df2:	b9b8      	cbnz	r0, 20e24 <write_regs+0x3e>
   20df4:	b1b1      	cbz	r1, 20e24 <write_regs+0x3e>
        if (dev->intf == BMA4_SPI_INTF)
   20df6:	7a23      	ldrb	r3, [r4, #8]
   20df8:	b90b      	cbnz	r3, 20dfe <write_regs+0x18>
            addr = addr & BMA4_SPI_WR_MASK;
   20dfa:	f005 057f 	and.w	r5, r5, #127	; 0x7f
        dev->intf_rslt = dev->bus_write(addr, data, len, dev->intf_ptr);
   20dfe:	4628      	mov	r0, r5
   20e00:	6a66      	ldr	r6, [r4, #36]	; 0x24
   20e02:	6863      	ldr	r3, [r4, #4]
   20e04:	47b0      	blx	r6
   20e06:	4605      	mov	r5, r0
   20e08:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   20e0a:	b970      	cbnz	r0, 20e2a <write_regs+0x44>
            if (dev->perf_mode_status == BMA4_ENABLE)
   20e0c:	f894 202e 	ldrb.w	r2, [r4, #46]	; 0x2e
                dev->delay_us(2, dev->intf_ptr);
   20e10:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   20e12:	6861      	ldr	r1, [r4, #4]
            if (dev->perf_mode_status == BMA4_ENABLE)
   20e14:	2a01      	cmp	r2, #1
                dev->delay_us(2, dev->intf_ptr);
   20e16:	bf0c      	ite	eq
   20e18:	2002      	moveq	r0, #2
                dev->delay_us(450, dev->intf_ptr);
   20e1a:	f44f 70e1 	movne.w	r0, #450	; 0x1c2
   20e1e:	4798      	blx	r3
}
   20e20:	4628      	mov	r0, r5
   20e22:	bd70      	pop	{r4, r5, r6, pc}
        rslt = BMA4_E_NULL_PTR;
   20e24:	f04f 35ff 	mov.w	r5, #4294967295
   20e28:	e7fa      	b.n	20e20 <write_regs+0x3a>
            rslt = BMA4_E_COM_FAIL;
   20e2a:	f06f 0501 	mvn.w	r5, #1
   20e2e:	e7f7      	b.n	20e20 <write_regs+0x3a>

00020e30 <read_regs>:
{
   20e30:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20e34:	4683      	mov	fp, r0
   20e36:	af00      	add	r7, sp, #0
    rslt = null_pointer_check(dev);
   20e38:	4618      	mov	r0, r3
{
   20e3a:	4688      	mov	r8, r1
   20e3c:	4615      	mov	r5, r2
   20e3e:	461c      	mov	r4, r3
    rslt = null_pointer_check(dev);
   20e40:	f7ff ffc3 	bl	20dca <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   20e44:	bb40      	cbnz	r0, 20e98 <read_regs+0x68>
   20e46:	b339      	cbz	r1, 20e98 <read_regs+0x68>
        uint32_t temp_len = len + dev->dummy_byte;
   20e48:	7ae2      	ldrb	r2, [r4, #11]
   20e4a:	442a      	add	r2, r5
        uint8_t temp_buff[temp_len];
   20e4c:	1dd3      	adds	r3, r2, #7
   20e4e:	f023 0307 	bic.w	r3, r3, #7
    {
   20e52:	46e9      	mov	r9, sp
        uint8_t temp_buff[temp_len];
   20e54:	ebad 0d03 	sub.w	sp, sp, r3
        if (dev->intf == BMA4_SPI_INTF)
   20e58:	7a23      	ldrb	r3, [r4, #8]
        uint8_t temp_buff[temp_len];
   20e5a:	46ea      	mov	sl, sp
        if (dev->intf == BMA4_SPI_INTF)
   20e5c:	b90b      	cbnz	r3, 20e62 <read_regs+0x32>
            addr = addr | BMA4_SPI_RD_MASK;
   20e5e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
        dev->intf_rslt = dev->bus_read(addr, temp_buff, temp_len, dev->intf_ptr);
   20e62:	6a26      	ldr	r6, [r4, #32]
   20e64:	6863      	ldr	r3, [r4, #4]
   20e66:	4651      	mov	r1, sl
   20e68:	4658      	mov	r0, fp
   20e6a:	47b0      	blx	r6
   20e6c:	7260      	strb	r0, [r4, #9]
        if (dev->intf_rslt == BMA4_INTF_RET_SUCCESS)
   20e6e:	b188      	cbz	r0, 20e94 <read_regs+0x64>
            rslt = BMA4_E_COM_FAIL;
   20e70:	f06f 0001 	mvn.w	r0, #1
   20e74:	46cd      	mov	sp, r9
}
   20e76:	46bd      	mov	sp, r7
   20e78:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                data[indx] = temp_buff[indx + dev->dummy_byte];
   20e7c:	7ae1      	ldrb	r1, [r4, #11]
   20e7e:	eb0a 0602 	add.w	r6, sl, r2
   20e82:	5c71      	ldrb	r1, [r6, r1]
   20e84:	f808 1002 	strb.w	r1, [r8, r2]
            for (indx = 0; indx < len; indx++)
   20e88:	b29a      	uxth	r2, r3
   20e8a:	42aa      	cmp	r2, r5
   20e8c:	f103 0301 	add.w	r3, r3, #1
   20e90:	d3f4      	bcc.n	20e7c <read_regs+0x4c>
   20e92:	e7ef      	b.n	20e74 <read_regs+0x44>
   20e94:	4603      	mov	r3, r0
   20e96:	e7f7      	b.n	20e88 <read_regs+0x58>
        rslt = BMA4_E_NULL_PTR;
   20e98:	f04f 30ff 	mov.w	r0, #4294967295
   20e9c:	e7eb      	b.n	20e76 <read_regs+0x46>

00020e9e <increment_feature_config_addr>:
{
   20e9e:	b513      	push	{r0, r1, r4, lr}
    uint8_t asic_lsb = 0;
   20ea0:	2300      	movs	r3, #0
{
   20ea2:	4604      	mov	r4, r0
    uint8_t asic_lsb = 0;
   20ea4:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t asic_msb = 0;
   20ea8:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20eac:	f7ff ff8d 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
   20eb0:	b948      	cbnz	r0, 20ec6 <increment_feature_config_addr+0x28>
        rslt = read_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   20eb2:	4623      	mov	r3, r4
   20eb4:	2201      	movs	r2, #1
   20eb6:	f10d 0106 	add.w	r1, sp, #6
   20eba:	205b      	movs	r0, #91	; 0x5b
   20ebc:	f7ff ffb8 	bl	20e30 <read_regs>
        if (rslt == BMA4_OK)
   20ec0:	b118      	cbz	r0, 20eca <increment_feature_config_addr+0x2c>
            rslt = BMA4_E_COM_FAIL;
   20ec2:	f06f 0001 	mvn.w	r0, #1
}
   20ec6:	b002      	add	sp, #8
   20ec8:	bd10      	pop	{r4, pc}
            rslt = read_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   20eca:	4623      	mov	r3, r4
   20ecc:	2201      	movs	r2, #1
   20ece:	f10d 0107 	add.w	r1, sp, #7
   20ed2:	205c      	movs	r0, #92	; 0x5c
   20ed4:	f7ff ffac 	bl	20e30 <read_regs>
        if (rslt == BMA4_OK)
   20ed8:	2800      	cmp	r0, #0
   20eda:	d1f2      	bne.n	20ec2 <increment_feature_config_addr+0x24>
            asic_addr = (asic_msb << 4) | (asic_lsb & 0x0F);
   20edc:	f89d 2006 	ldrb.w	r2, [sp, #6]
   20ee0:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20ee4:	f002 020f 	and.w	r2, r2, #15
   20ee8:	ea42 1203 	orr.w	r2, r2, r3, lsl #4
            asic_addr = asic_addr + (dev->read_write_len / 2);
   20eec:	8aa3      	ldrh	r3, [r4, #20]
   20eee:	eb02 0253 	add.w	r2, r2, r3, lsr #1
            asic_lsb = asic_addr & 0x0F;
   20ef2:	f002 030f 	and.w	r3, r2, #15
            asic_msb = (uint8_t)(asic_addr >> 4);
   20ef6:	0912      	lsrs	r2, r2, #4
            asic_lsb = asic_addr & 0x0F;
   20ef8:	f88d 3006 	strb.w	r3, [sp, #6]
            asic_msb = (uint8_t)(asic_addr >> 4);
   20efc:	f88d 2007 	strb.w	r2, [sp, #7]
            rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &asic_lsb, 1, dev);
   20f00:	4623      	mov	r3, r4
   20f02:	2201      	movs	r2, #1
   20f04:	f10d 0106 	add.w	r1, sp, #6
   20f08:	205b      	movs	r0, #91	; 0x5b
   20f0a:	f7ff ff6c 	bl	20de6 <write_regs>
            if (rslt == BMA4_OK)
   20f0e:	2800      	cmp	r0, #0
   20f10:	d1d9      	bne.n	20ec6 <increment_feature_config_addr+0x28>
                rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &asic_msb, 1, dev);
   20f12:	4623      	mov	r3, r4
   20f14:	2201      	movs	r2, #1
   20f16:	f10d 0107 	add.w	r1, sp, #7
   20f1a:	205c      	movs	r0, #92	; 0x5c
   20f1c:	f7ff ff63 	bl	20de6 <write_regs>
   20f20:	e7d1      	b.n	20ec6 <increment_feature_config_addr+0x28>

00020f22 <set_feature_config_start_addr>:
{
   20f22:	b510      	push	{r4, lr}
   20f24:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   20f26:	f7ff ff50 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
   20f2a:	b980      	cbnz	r0, 20f4e <set_feature_config_start_addr+0x2c>
        rslt = write_regs(BMA4_RESERVED_REG_5B_ADDR, &dev->asic_data.asic_lsb, 1, dev);
   20f2c:	4623      	mov	r3, r4
   20f2e:	2201      	movs	r2, #1
   20f30:	f104 0117 	add.w	r1, r4, #23
   20f34:	205b      	movs	r0, #91	; 0x5b
   20f36:	f7ff ff56 	bl	20de6 <write_regs>
        if (rslt == BMA4_OK)
   20f3a:	b940      	cbnz	r0, 20f4e <set_feature_config_start_addr+0x2c>
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   20f3c:	4623      	mov	r3, r4
   20f3e:	f104 0118 	add.w	r1, r4, #24
   20f42:	2201      	movs	r2, #1
}
   20f44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            rslt = write_regs(BMA4_RESERVED_REG_5C_ADDR, &dev->asic_data.asic_msb, 1, dev);
   20f48:	205c      	movs	r0, #92	; 0x5c
   20f4a:	f7ff bf4c 	b.w	20de6 <write_regs>
}
   20f4e:	bd10      	pop	{r4, pc}

00020f50 <bma4_get_advance_power_save>:
{
   20f50:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   20f52:	2300      	movs	r3, #0
{
   20f54:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   20f56:	4608      	mov	r0, r1
    uint8_t data = 0;
   20f58:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20f5c:	f7ff ff35 	bl	20dca <null_pointer_check>
    if ((rslt == BMA4_OK) && (adv_pwr_save != NULL))
   20f60:	b978      	cbnz	r0, 20f82 <bma4_get_advance_power_save+0x32>
   20f62:	b174      	cbz	r4, 20f82 <bma4_get_advance_power_save+0x32>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   20f64:	460b      	mov	r3, r1
   20f66:	2201      	movs	r2, #1
   20f68:	f10d 0107 	add.w	r1, sp, #7
   20f6c:	207c      	movs	r0, #124	; 0x7c
   20f6e:	f000 f80b 	bl	20f88 <bma4_read_regs>
        if (rslt == BMA4_OK)
   20f72:	b920      	cbnz	r0, 20f7e <bma4_get_advance_power_save+0x2e>
            *adv_pwr_save = BMA4_GET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE);
   20f74:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20f78:	f003 0301 	and.w	r3, r3, #1
   20f7c:	7023      	strb	r3, [r4, #0]
}
   20f7e:	b002      	add	sp, #8
   20f80:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   20f82:	f04f 30ff 	mov.w	r0, #4294967295
   20f86:	e7fa      	b.n	20f7e <bma4_get_advance_power_save+0x2e>

00020f88 <bma4_read_regs>:
{
   20f88:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
   20f8c:	461d      	mov	r5, r3
   20f8e:	4607      	mov	r7, r0
    uint8_t adv_pwr_save = 0;
   20f90:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   20f92:	4628      	mov	r0, r5
    uint8_t adv_pwr_save = 0;
   20f94:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   20f98:	f7ff ff17 	bl	20dca <null_pointer_check>
{
   20f9c:	460e      	mov	r6, r1
   20f9e:	4614      	mov	r4, r2
    if ((rslt == BMA4_OK) && (data != NULL))
   20fa0:	4680      	mov	r8, r0
   20fa2:	2800      	cmp	r0, #0
   20fa4:	d172      	bne.n	2108c <bma4_read_regs+0x104>
   20fa6:	2900      	cmp	r1, #0
   20fa8:	d070      	beq.n	2108c <bma4_read_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   20faa:	2f5e      	cmp	r7, #94	; 0x5e
   20fac:	d168      	bne.n	21080 <bma4_read_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20fae:	4629      	mov	r1, r5
   20fb0:	f10d 0007 	add.w	r0, sp, #7
   20fb4:	f7ff ffcc 	bl	20f50 <bma4_get_advance_power_save>
            if (adv_pwr_save == BMA4_ENABLE)
   20fb8:	f89d 3007 	ldrb.w	r3, [sp, #7]
   20fbc:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   20fbe:	4607      	mov	r7, r0
            if (adv_pwr_save == BMA4_ENABLE)
   20fc0:	d109      	bne.n	20fd6 <bma4_read_regs+0x4e>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20fc2:	4629      	mov	r1, r5
   20fc4:	4640      	mov	r0, r8
   20fc6:	f000 f867 	bl	21098 <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   20fca:	6aab      	ldr	r3, [r5, #40]	; 0x28
   20fcc:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   20fce:	4607      	mov	r7, r0
                dev->delay_us(450, dev->intf_ptr);
   20fd0:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   20fd4:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   20fd6:	f014 0901 	ands.w	r9, r4, #1
   20fda:	d15a      	bne.n	21092 <bma4_read_regs+0x10a>
   20fdc:	7dab      	ldrb	r3, [r5, #22]
   20fde:	42a3      	cmp	r3, r4
   20fe0:	d357      	bcc.n	21092 <bma4_read_regs+0x10a>
   20fe2:	2f00      	cmp	r7, #0
   20fe4:	d155      	bne.n	21092 <bma4_read_regs+0x10a>
                if (dev->read_write_len < len)
   20fe6:	8aaf      	ldrh	r7, [r5, #20]
   20fe8:	42a7      	cmp	r7, r4
   20fea:	d242      	bcs.n	21072 <bma4_read_regs+0xea>
                    loop_count = len / dev->read_write_len;
   20fec:	fbb4 faf7 	udiv	sl, r4, r7
                    rslt = set_feature_config_start_addr(dev);
   20ff0:	4628      	mov	r0, r5
   20ff2:	f7ff ff96 	bl	20f22 <set_feature_config_start_addr>
                    overflow = len % dev->read_write_len;
   20ff6:	fb07 471a 	mls	r7, r7, sl, r4
                    index = 0;
   20ffa:	46c8      	mov	r8, r9
                    rslt = set_feature_config_start_addr(dev);
   20ffc:	4604      	mov	r4, r0
                    for (idx = 0; idx < loop_count; idx++)
   20ffe:	fa5f f389 	uxtb.w	r3, r9
   21002:	459a      	cmp	sl, r3
   21004:	d820      	bhi.n	21048 <bma4_read_regs+0xc0>
                    if ((overflow) && (rslt == BMA4_OK))
   21006:	b147      	cbz	r7, 2101a <bma4_read_regs+0x92>
   21008:	b9d4      	cbnz	r4, 21040 <bma4_read_regs+0xb8>
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   2100a:	462b      	mov	r3, r5
   2100c:	463a      	mov	r2, r7
   2100e:	eb06 0108 	add.w	r1, r6, r8
   21012:	205e      	movs	r0, #94	; 0x5e
   21014:	f7ff ff0c 	bl	20e30 <read_regs>
   21018:	4604      	mov	r4, r0
                    if (rslt == BMA4_OK)
   2101a:	b98c      	cbnz	r4, 21040 <bma4_read_regs+0xb8>
                        rslt = set_feature_config_start_addr(dev);
   2101c:	4628      	mov	r0, r5
   2101e:	f7ff ff80 	bl	20f22 <set_feature_config_start_addr>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   21022:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   21024:	b960      	cbnz	r0, 21040 <bma4_read_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   21026:	f89d 0007 	ldrb.w	r0, [sp, #7]
   2102a:	2801      	cmp	r0, #1
   2102c:	d108      	bne.n	21040 <bma4_read_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   2102e:	4629      	mov	r1, r5
   21030:	f000 f832 	bl	21098 <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   21034:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21036:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   21038:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   2103a:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   2103e:	4798      	blx	r3
}
   21040:	4620      	mov	r0, r4
   21042:	b002      	add	sp, #8
   21044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
                        rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   21048:	8aaa      	ldrh	r2, [r5, #20]
   2104a:	462b      	mov	r3, r5
   2104c:	eb06 0108 	add.w	r1, r6, r8
   21050:	205e      	movs	r0, #94	; 0x5e
   21052:	f7ff feed 	bl	20e30 <read_regs>
                        if (rslt == BMA4_OK)
   21056:	4604      	mov	r4, r0
   21058:	b940      	cbnz	r0, 2106c <bma4_read_regs+0xe4>
                            rslt = increment_feature_config_addr(dev);
   2105a:	4628      	mov	r0, r5
   2105c:	f7ff ff1f 	bl	20e9e <increment_feature_config_addr>
                            if (rslt == BMA4_OK)
   21060:	4604      	mov	r4, r0
   21062:	b918      	cbnz	r0, 2106c <bma4_read_regs+0xe4>
                                index = index + dev->read_write_len;
   21064:	8aab      	ldrh	r3, [r5, #20]
   21066:	4498      	add	r8, r3
   21068:	fa1f f888 	uxth.w	r8, r8
                    for (idx = 0; idx < loop_count; idx++)
   2106c:	f109 0901 	add.w	r9, r9, #1
   21070:	e7c5      	b.n	20ffe <bma4_read_regs+0x76>
                    rslt = read_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   21072:	462b      	mov	r3, r5
   21074:	4622      	mov	r2, r4
   21076:	4631      	mov	r1, r6
   21078:	205e      	movs	r0, #94	; 0x5e
   2107a:	f7ff fed9 	bl	20e30 <read_regs>
   2107e:	e7d0      	b.n	21022 <bma4_read_regs+0x9a>
            rslt = read_regs(addr, data, len, dev);
   21080:	462b      	mov	r3, r5
   21082:	4638      	mov	r0, r7
   21084:	f7ff fed4 	bl	20e30 <read_regs>
   21088:	4604      	mov	r4, r0
   2108a:	e7d9      	b.n	21040 <bma4_read_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   2108c:	f04f 34ff 	mov.w	r4, #4294967295
   21090:	e7d6      	b.n	21040 <bma4_read_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   21092:	f06f 0409 	mvn.w	r4, #9
   21096:	e7d3      	b.n	21040 <bma4_read_regs+0xb8>

00021098 <bma4_set_advance_power_save>:
{
   21098:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   2109a:	2300      	movs	r3, #0
{
   2109c:	4605      	mov	r5, r0
    rslt = null_pointer_check(dev);
   2109e:	4608      	mov	r0, r1
{
   210a0:	460c      	mov	r4, r1
    uint8_t data = 0;
   210a2:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   210a6:	f7ff fe90 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
   210aa:	b9b8      	cbnz	r0, 210dc <bma4_set_advance_power_save+0x44>
        rslt = bma4_read_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   210ac:	460b      	mov	r3, r1
   210ae:	2201      	movs	r2, #1
   210b0:	f10d 0107 	add.w	r1, sp, #7
   210b4:	207c      	movs	r0, #124	; 0x7c
   210b6:	f7ff ff67 	bl	20f88 <bma4_read_regs>
        if (rslt == BMA4_OK)
   210ba:	b978      	cbnz	r0, 210dc <bma4_set_advance_power_save+0x44>
            data = BMA4_SET_BITS_POS_0(data, BMA4_ADVANCE_POWER_SAVE, adv_pwr_save);
   210bc:	f89d 3007 	ldrb.w	r3, [sp, #7]
   210c0:	f005 0001 	and.w	r0, r5, #1
   210c4:	f023 0301 	bic.w	r3, r3, #1
   210c8:	4318      	orrs	r0, r3
   210ca:	f88d 0007 	strb.w	r0, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CONF_ADDR, &data, 1, dev);
   210ce:	4623      	mov	r3, r4
   210d0:	2201      	movs	r2, #1
   210d2:	f10d 0107 	add.w	r1, sp, #7
   210d6:	207c      	movs	r0, #124	; 0x7c
   210d8:	f000 f802 	bl	210e0 <bma4_write_regs>
}
   210dc:	b003      	add	sp, #12
   210de:	bd30      	pop	{r4, r5, pc}

000210e0 <bma4_write_regs>:
{
   210e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   210e4:	461d      	mov	r5, r3
   210e6:	4604      	mov	r4, r0
    uint8_t adv_pwr_save = 0;
   210e8:	2300      	movs	r3, #0
    rslt = null_pointer_check(dev);
   210ea:	4628      	mov	r0, r5
{
   210ec:	460f      	mov	r7, r1
   210ee:	4616      	mov	r6, r2
    uint8_t adv_pwr_save = 0;
   210f0:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   210f4:	f7ff fe69 	bl	20dca <null_pointer_check>
    if ((rslt == BMA4_OK) && (data != NULL))
   210f8:	2800      	cmp	r0, #0
   210fa:	d173      	bne.n	211e4 <bma4_write_regs+0x104>
   210fc:	2900      	cmp	r1, #0
   210fe:	d071      	beq.n	211e4 <bma4_write_regs+0x104>
        if (addr == BMA4_FEATURE_CONFIG_ADDR)
   21100:	2c5e      	cmp	r4, #94	; 0x5e
   21102:	d169      	bne.n	211d8 <bma4_write_regs+0xf8>
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   21104:	4629      	mov	r1, r5
   21106:	f10d 0007 	add.w	r0, sp, #7
   2110a:	f7ff ff21 	bl	20f50 <bma4_get_advance_power_save>
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   2110e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21112:	2b01      	cmp	r3, #1
            rslt = bma4_get_advance_power_save(&adv_pwr_save, dev);
   21114:	4604      	mov	r4, r0
            if ((adv_pwr_save == BMA4_ENABLE) && (rslt == BMA4_OK))
   21116:	d109      	bne.n	2112c <bma4_write_regs+0x4c>
   21118:	b940      	cbnz	r0, 2112c <bma4_write_regs+0x4c>
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   2111a:	4629      	mov	r1, r5
   2111c:	f7ff ffbc 	bl	21098 <bma4_set_advance_power_save>
                dev->delay_us(450, dev->intf_ptr);
   21120:	6aab      	ldr	r3, [r5, #40]	; 0x28
   21122:	6869      	ldr	r1, [r5, #4]
                rslt = bma4_set_advance_power_save(BMA4_DISABLE, dev);
   21124:	4604      	mov	r4, r0
                dev->delay_us(450, dev->intf_ptr);
   21126:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   2112a:	4798      	blx	r3
            if (((len % 2) == 0) && (len <= dev->feature_len) && (rslt == BMA4_OK))
   2112c:	f016 0a01 	ands.w	sl, r6, #1
   21130:	d15b      	bne.n	211ea <bma4_write_regs+0x10a>
   21132:	7dab      	ldrb	r3, [r5, #22]
   21134:	42b3      	cmp	r3, r6
   21136:	d358      	bcc.n	211ea <bma4_write_regs+0x10a>
   21138:	2c00      	cmp	r4, #0
   2113a:	d156      	bne.n	211ea <bma4_write_regs+0x10a>
                if (dev->read_write_len < len)
   2113c:	f8b5 b014 	ldrh.w	fp, [r5, #20]
   21140:	45b3      	cmp	fp, r6
   21142:	d242      	bcs.n	211ca <bma4_write_regs+0xea>
                    rslt = set_feature_config_start_addr(dev);
   21144:	4628      	mov	r0, r5
   21146:	f7ff feec 	bl	20f22 <set_feature_config_start_addr>
                    if (rslt == BMA4_OK)
   2114a:	4604      	mov	r4, r0
   2114c:	bb20      	cbnz	r0, 21198 <bma4_write_regs+0xb8>
                    loop_count = len / dev->read_write_len;
   2114e:	fbb6 f8fb 	udiv	r8, r6, fp
                    index = 0;
   21152:	46d1      	mov	r9, sl
                        for (i = 0; i < loop_count; i++)
   21154:	fa5f f38a 	uxtb.w	r3, sl
   21158:	4598      	cmp	r8, r3
   2115a:	d821      	bhi.n	211a0 <bma4_write_regs+0xc0>
                    overflow = len % dev->read_write_len;
   2115c:	fb0b 6218 	mls	r2, fp, r8, r6
                        if ((overflow) && (rslt == BMA4_OK))
   21160:	b13a      	cbz	r2, 21172 <bma4_write_regs+0x92>
   21162:	b9cc      	cbnz	r4, 21198 <bma4_write_regs+0xb8>
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, overflow, dev);
   21164:	462b      	mov	r3, r5
   21166:	eb07 0109 	add.w	r1, r7, r9
   2116a:	205e      	movs	r0, #94	; 0x5e
   2116c:	f7ff fe3b 	bl	20de6 <write_regs>
   21170:	4604      	mov	r4, r0
                        if (rslt == BMA4_OK)
   21172:	b98c      	cbnz	r4, 21198 <bma4_write_regs+0xb8>
                            rslt = set_feature_config_start_addr(dev);
   21174:	4628      	mov	r0, r5
   21176:	f7ff fed4 	bl	20f22 <set_feature_config_start_addr>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   2117a:	4604      	mov	r4, r0
            if (rslt == BMA4_OK)
   2117c:	b960      	cbnz	r0, 21198 <bma4_write_regs+0xb8>
                if (adv_pwr_save == BMA4_ENABLE)
   2117e:	f89d 0007 	ldrb.w	r0, [sp, #7]
   21182:	2801      	cmp	r0, #1
   21184:	d108      	bne.n	21198 <bma4_write_regs+0xb8>
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   21186:	4629      	mov	r1, r5
   21188:	f7ff ff86 	bl	21098 <bma4_set_advance_power_save>
                    dev->delay_us(450, dev->intf_ptr);
   2118c:	6aab      	ldr	r3, [r5, #40]	; 0x28
   2118e:	6869      	ldr	r1, [r5, #4]
                    rslt = bma4_set_advance_power_save(BMA4_ENABLE, dev);
   21190:	4604      	mov	r4, r0
                    dev->delay_us(450, dev->intf_ptr);
   21192:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
   21196:	4798      	blx	r3
}
   21198:	4620      	mov	r0, r4
   2119a:	b003      	add	sp, #12
   2119c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
                            rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data + index, dev->read_write_len, dev);
   211a0:	8aaa      	ldrh	r2, [r5, #20]
   211a2:	462b      	mov	r3, r5
   211a4:	eb07 0109 	add.w	r1, r7, r9
   211a8:	205e      	movs	r0, #94	; 0x5e
   211aa:	f7ff fe1c 	bl	20de6 <write_regs>
                            if (rslt == BMA4_OK)
   211ae:	4604      	mov	r4, r0
   211b0:	b940      	cbnz	r0, 211c4 <bma4_write_regs+0xe4>
                                rslt = increment_feature_config_addr(dev);
   211b2:	4628      	mov	r0, r5
   211b4:	f7ff fe73 	bl	20e9e <increment_feature_config_addr>
                                if (rslt == BMA4_OK)
   211b8:	4604      	mov	r4, r0
   211ba:	b918      	cbnz	r0, 211c4 <bma4_write_regs+0xe4>
                                    index = index + dev->read_write_len;
   211bc:	8aab      	ldrh	r3, [r5, #20]
   211be:	4499      	add	r9, r3
   211c0:	fa1f f989 	uxth.w	r9, r9
                        for (i = 0; i < loop_count; i++)
   211c4:	f10a 0a01 	add.w	sl, sl, #1
   211c8:	e7c4      	b.n	21154 <bma4_write_regs+0x74>
                    rslt = write_regs(BMA4_FEATURE_CONFIG_ADDR, data, len, dev);
   211ca:	462b      	mov	r3, r5
   211cc:	4632      	mov	r2, r6
   211ce:	4639      	mov	r1, r7
   211d0:	205e      	movs	r0, #94	; 0x5e
   211d2:	f7ff fe08 	bl	20de6 <write_regs>
   211d6:	e7d0      	b.n	2117a <bma4_write_regs+0x9a>
            rslt = write_regs(addr, data, len, dev);
   211d8:	4620      	mov	r0, r4
   211da:	462b      	mov	r3, r5
   211dc:	f7ff fe03 	bl	20de6 <write_regs>
   211e0:	4604      	mov	r4, r0
   211e2:	e7d9      	b.n	21198 <bma4_write_regs+0xb8>
        rslt = BMA4_E_NULL_PTR;
   211e4:	f04f 34ff 	mov.w	r4, #4294967295
   211e8:	e7d6      	b.n	21198 <bma4_write_regs+0xb8>
                rslt = BMA4_E_RD_WR_LENGTH_INVALID;
   211ea:	f06f 0409 	mvn.w	r4, #9
   211ee:	e7d3      	b.n	21198 <bma4_write_regs+0xb8>

000211f0 <bma4_init>:
{
   211f0:	b513      	push	{r0, r1, r4, lr}
    uint8_t data = 0;
   211f2:	2300      	movs	r3, #0
{
   211f4:	4604      	mov	r4, r0
    uint8_t data = 0;
   211f6:	f88d 3006 	strb.w	r3, [sp, #6]
    uint8_t dummy_read = 0;
   211fa:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   211fe:	f7ff fde4 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
   21202:	4602      	mov	r2, r0
   21204:	b9b0      	cbnz	r0, 21234 <bma4_init+0x44>
        if (dev->intf == BMA4_SPI_INTF)
   21206:	7a23      	ldrb	r3, [r4, #8]
   21208:	b9bb      	cbnz	r3, 2123a <bma4_init+0x4a>
            dev->dummy_byte = 1;
   2120a:	2201      	movs	r2, #1
   2120c:	72e2      	strb	r2, [r4, #11]
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &dummy_read, 1, dev);
   2120e:	4623      	mov	r3, r4
   21210:	f10d 0107 	add.w	r1, sp, #7
   21214:	f7ff feb8 	bl	20f88 <bma4_read_regs>
        if (rslt == BMA4_OK)
   21218:	4602      	mov	r2, r0
   2121a:	b958      	cbnz	r0, 21234 <bma4_init+0x44>
            rslt = bma4_read_regs(BMA4_CHIP_ID_ADDR, &data, 1, dev);
   2121c:	2201      	movs	r2, #1
   2121e:	4623      	mov	r3, r4
   21220:	f10d 0106 	add.w	r1, sp, #6
   21224:	2000      	movs	r0, #0
   21226:	f7ff feaf 	bl	20f88 <bma4_read_regs>
            if (rslt == BMA4_OK)
   2122a:	4602      	mov	r2, r0
   2122c:	b910      	cbnz	r0, 21234 <bma4_init+0x44>
                dev->chip_id = data;
   2122e:	f89d 3006 	ldrb.w	r3, [sp, #6]
   21232:	7023      	strb	r3, [r4, #0]
}
   21234:	4610      	mov	r0, r2
   21236:	b002      	add	sp, #8
   21238:	bd10      	pop	{r4, pc}
            dev->dummy_byte = 0;
   2123a:	72e0      	strb	r0, [r4, #11]
        if (rslt == BMA4_OK)
   2123c:	e7ee      	b.n	2121c <bma4_init+0x2c>

0002123e <bma4_set_accel_enable>:
{
   2123e:	b537      	push	{r0, r1, r2, r4, r5, lr}
    uint8_t data = 0;
   21240:	2300      	movs	r3, #0
{
   21242:	4604      	mov	r4, r0
    rslt = null_pointer_check(dev);
   21244:	4608      	mov	r0, r1
{
   21246:	460d      	mov	r5, r1
    uint8_t data = 0;
   21248:	f88d 3007 	strb.w	r3, [sp, #7]
    rslt = null_pointer_check(dev);
   2124c:	f7ff fdbd 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
   21250:	b9c0      	cbnz	r0, 21284 <bma4_set_accel_enable+0x46>
        rslt = bma4_read_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   21252:	460b      	mov	r3, r1
   21254:	2201      	movs	r2, #1
   21256:	f10d 0107 	add.w	r1, sp, #7
   2125a:	207d      	movs	r0, #125	; 0x7d
   2125c:	f7ff fe94 	bl	20f88 <bma4_read_regs>
        if (rslt == BMA4_OK)
   21260:	b980      	cbnz	r0, 21284 <bma4_set_accel_enable+0x46>
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   21262:	f89d 2007 	ldrb.w	r2, [sp, #7]
   21266:	00a4      	lsls	r4, r4, #2
   21268:	f022 0204 	bic.w	r2, r2, #4
   2126c:	f004 0404 	and.w	r4, r4, #4
   21270:	4314      	orrs	r4, r2
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   21272:	462b      	mov	r3, r5
   21274:	2201      	movs	r2, #1
   21276:	f10d 0107 	add.w	r1, sp, #7
   2127a:	207d      	movs	r0, #125	; 0x7d
            data = BMA4_SET_BITSLICE(data, BMA4_ACCEL_ENABLE, accel_en);
   2127c:	f88d 4007 	strb.w	r4, [sp, #7]
            rslt = bma4_write_regs(BMA4_POWER_CTRL_ADDR, &data, 1, dev);
   21280:	f7ff ff2e 	bl	210e0 <bma4_write_regs>
}
   21284:	b003      	add	sp, #12
   21286:	bd30      	pop	{r4, r5, pc}

00021288 <bma4_set_command_register>:
{
   21288:	b507      	push	{r0, r1, r2, lr}
   2128a:	f88d 0007 	strb.w	r0, [sp, #7]
    rslt = null_pointer_check(dev);
   2128e:	4608      	mov	r0, r1
   21290:	f7ff fd9b 	bl	20dca <null_pointer_check>
    if (rslt == BMA4_OK)
   21294:	b930      	cbnz	r0, 212a4 <bma4_set_command_register+0x1c>
        rslt = bma4_write_regs(BMA4_CMD_ADDR, &command_reg, 1, dev);
   21296:	460b      	mov	r3, r1
   21298:	2201      	movs	r2, #1
   2129a:	f10d 0107 	add.w	r1, sp, #7
   2129e:	207e      	movs	r0, #126	; 0x7e
   212a0:	f7ff ff1e 	bl	210e0 <bma4_write_regs>
}
   212a4:	b003      	add	sp, #12
   212a6:	f85d fb04 	ldr.w	pc, [sp], #4

000212aa <bma456_init>:
{
   212aa:	b510      	push	{r4, lr}
   212ac:	4604      	mov	r4, r0
    rslt = bma4_init(dev);
   212ae:	f7ff ff9f 	bl	211f0 <bma4_init>
    if (rslt == BMA4_OK)
   212b2:	b968      	cbnz	r0, 212d0 <bma456_init+0x26>
        if (dev->chip_id == BMA456_CHIP_ID)
   212b4:	7823      	ldrb	r3, [r4, #0]
   212b6:	2b16      	cmp	r3, #22
            dev->feature_len = BMA456_FEATURE_SIZE;
   212b8:	bf01      	itttt	eq
   212ba:	2346      	moveq	r3, #70	; 0x46
   212bc:	75a3      	strbeq	r3, [r4, #22]
            dev->resolution = 16;
   212be:	f44f 7304 	moveq.w	r3, #528	; 0x210
   212c2:	81a3      	strheq	r3, [r4, #12]
            dev->config_size = sizeof(bma456_config_file);
   212c4:	bf06      	itte	eq
   212c6:	f44f 53c0 	moveq.w	r3, #6144	; 0x1800
   212ca:	85a3      	strheq	r3, [r4, #44]	; 0x2c
            rslt = BMA4_E_INVALID_SENSOR;
   212cc:	f06f 0003 	mvnne.w	r0, #3
}
   212d0:	bd10      	pop	{r4, pc}

000212d2 <bma456_map_interrupt>:
/*!
 * @brief This API sets/un-sets the user provided interrupt to either interrupt
 * pin1 or pin2 in the sensor.
 */
int8_t bma456_map_interrupt(uint8_t int_line, uint16_t int_map, uint8_t enable, struct bma4_dev *dev)
{
   212d2:	b430      	push	{r4, r5}
    int8_t rslt = BMA4_OK;

    if (dev != NULL)
   212d4:	b13b      	cbz	r3, 212e6 <bma456_map_interrupt+0x14>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   212d6:	781c      	ldrb	r4, [r3, #0]
   212d8:	2c16      	cmp	r4, #22
   212da:	d108      	bne.n	212ee <bma456_map_interrupt+0x1c>
        {
            if (int_line <= 1)
   212dc:	2801      	cmp	r0, #1
   212de:	d809      	bhi.n	212f4 <bma456_map_interrupt+0x22>
    {
        rslt = BMA4_E_NULL_PTR;
    }

    return rslt;
}
   212e0:	bc30      	pop	{r4, r5}
                rslt = bma4_map_interrupt(int_line, int_map, enable, dev);
   212e2:	f7e2 b885 	b.w	33f0 <bma4_map_interrupt>
        rslt = BMA4_E_NULL_PTR;
   212e6:	f04f 30ff 	mov.w	r0, #4294967295
}
   212ea:	bc30      	pop	{r4, r5}
   212ec:	4770      	bx	lr
            rslt = BMA4_E_INVALID_SENSOR;
   212ee:	f06f 0003 	mvn.w	r0, #3
   212f2:	e7fa      	b.n	212ea <bma456_map_interrupt+0x18>
                rslt = BMA4_E_INT_LINE_INVALID;
   212f4:	f06f 0008 	mvn.w	r0, #8
   212f8:	e7f7      	b.n	212ea <bma456_map_interrupt+0x18>

000212fa <bma456_feature_enable>:

/*!
 * @brief This API enables/disables the features of the sensor.
 */
int8_t bma456_feature_enable(uint8_t feature, uint8_t enable, struct bma4_dev *dev)
{
   212fa:	b570      	push	{r4, r5, r6, lr}
   212fc:	b092      	sub	sp, #72	; 0x48
   212fe:	4615      	mov	r5, r2
   21300:	4604      	mov	r4, r0
   21302:	460e      	mov	r6, r1
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   21304:	2242      	movs	r2, #66	; 0x42
   21306:	2100      	movs	r1, #0
   21308:	a801      	add	r0, sp, #4
   2130a:	9100      	str	r1, [sp, #0]
   2130c:	f003 f8d7 	bl	244be <memset>
    int8_t rslt = BMA4_OK;
    uint8_t len = BMA456_FEATURE_SIZE;

    if (dev != NULL)
   21310:	2d00      	cmp	r5, #0
   21312:	d063      	beq.n	213dc <bma456_feature_enable+0xe2>
    {
        if (dev->chip_id == BMA456_CHIP_ID)
   21314:	782b      	ldrb	r3, [r5, #0]
   21316:	2b16      	cmp	r3, #22
   21318:	d163      	bne.n	213e2 <bma456_feature_enable+0xe8>
        {
            /* Read feature configuration data */
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   2131a:	462b      	mov	r3, r5
   2131c:	2246      	movs	r2, #70	; 0x46
   2131e:	4669      	mov	r1, sp
   21320:	205e      	movs	r0, #94	; 0x5e
   21322:	f7ff fe31 	bl	20f88 <bma4_read_regs>
            if (rslt == BMA4_OK)
   21326:	bba0      	cbnz	r0, 21392 <bma456_feature_enable+0x98>
            {
                if (enable == TRUE)
   21328:	2e01      	cmp	r6, #1
   2132a:	f004 0301 	and.w	r3, r4, #1
   2132e:	f004 0002 	and.w	r0, r4, #2
   21332:	f004 0104 	and.w	r1, r4, #4
   21336:	f004 0208 	and.w	r2, r4, #8
   2133a:	f004 0410 	and.w	r4, r4, #16
   2133e:	d12a      	bne.n	21396 <bma456_feature_enable+0x9c>
    int8_t rslt = BMA4_OK;

    if ((dev != NULL) && (feature_config != NULL))
    {
        /* Enable step counter */
        if ((feature & BMA456_STEP_CNTR) > 0)
   21340:	b12b      	cbz	r3, 2134e <bma456_feature_enable+0x54>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_CNTR_EN_MSK;
   21342:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21346:	f043 0310 	orr.w	r3, r3, #16
   2134a:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable step activity */
        if ((feature & BMA456_STEP_ACT) > 0)
   2134e:	b128      	cbz	r0, 2135c <bma456_feature_enable+0x62>
        {
            index = BMA456_STEP_CNTR_OFFSET + 1;
            feature_config[index] = feature_config[index] | BMA456_STEP_ACT_EN_MSK;
   21350:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   21354:	f043 0320 	orr.w	r3, r3, #32
   21358:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        }

        /* Enable wrist wear wakeup */
        if ((feature & BMA456_WRIST_WEAR) > 0)
   2135c:	b129      	cbz	r1, 2136a <bma456_feature_enable+0x70>
        {
            index = BMA456_WRIST_WEAR_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_WRIST_WEAR_EN_MSK;
   2135e:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   21362:	f043 0301 	orr.w	r3, r3, #1
   21366:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        }

        /* Enable single - tap */
        if ((feature & BMA456_SINGLE_TAP) > 0)
   2136a:	b12a      	cbz	r2, 21378 <bma456_feature_enable+0x7e>
        {
            index = BMA456_SINGLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_SINGLE_TAP_EN_MSK;
   2136c:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   21370:	f043 0301 	orr.w	r3, r3, #1
   21374:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        }

        /* Enable  double- tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   21378:	b12c      	cbz	r4, 21386 <bma456_feature_enable+0x8c>
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] | BMA456_DOUBLE_TAP_EN_MSK;
   2137a:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   2137e:	f043 0301 	orr.w	r3, r3, #1

        /* Disable double-tap */
        if ((feature & BMA456_DOUBLE_TAP) > 0)
        {
            index = BMA456_DOUBLE_TAP_OFFSET;
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   21382:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
        }

        /* Write the configured settings in the sensor */
        rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, len, dev);
   21386:	462b      	mov	r3, r5
   21388:	2246      	movs	r2, #70	; 0x46
   2138a:	4669      	mov	r1, sp
   2138c:	205e      	movs	r0, #94	; 0x5e
   2138e:	f7ff fea7 	bl	210e0 <bma4_write_regs>
}
   21392:	b012      	add	sp, #72	; 0x48
   21394:	bd70      	pop	{r4, r5, r6, pc}
        if ((feature & BMA456_STEP_CNTR) > 0)
   21396:	b12b      	cbz	r3, 213a4 <bma456_feature_enable+0xaa>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_CNTR_EN_MSK);
   21398:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   2139c:	f023 0310 	bic.w	r3, r3, #16
   213a0:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_STEP_ACT) > 0)
   213a4:	b128      	cbz	r0, 213b2 <bma456_feature_enable+0xb8>
            feature_config[index] = feature_config[index] & (~BMA456_STEP_ACT_EN_MSK);
   213a6:	f89d 303b 	ldrb.w	r3, [sp, #59]	; 0x3b
   213aa:	f023 0320 	bic.w	r3, r3, #32
   213ae:	f88d 303b 	strb.w	r3, [sp, #59]	; 0x3b
        if ((feature & BMA456_WRIST_WEAR) > 0)
   213b2:	b129      	cbz	r1, 213c0 <bma456_feature_enable+0xc6>
            feature_config[index] = feature_config[index] & (~BMA456_WRIST_WEAR_EN_MSK);
   213b4:	f89d 3040 	ldrb.w	r3, [sp, #64]	; 0x40
   213b8:	f023 0301 	bic.w	r3, r3, #1
   213bc:	f88d 3040 	strb.w	r3, [sp, #64]	; 0x40
        if ((feature & BMA456_SINGLE_TAP) > 0)
   213c0:	b12a      	cbz	r2, 213ce <bma456_feature_enable+0xd4>
            feature_config[index] = feature_config[index] & (~BMA456_SINGLE_TAP_EN_MSK);
   213c2:	f89d 303c 	ldrb.w	r3, [sp, #60]	; 0x3c
   213c6:	f023 0301 	bic.w	r3, r3, #1
   213ca:	f88d 303c 	strb.w	r3, [sp, #60]	; 0x3c
        if ((feature & BMA456_DOUBLE_TAP) > 0)
   213ce:	2c00      	cmp	r4, #0
   213d0:	d0d9      	beq.n	21386 <bma456_feature_enable+0x8c>
            feature_config[index] = feature_config[index] & (~BMA456_DOUBLE_TAP_EN_MSK);
   213d2:	f89d 303e 	ldrb.w	r3, [sp, #62]	; 0x3e
   213d6:	f023 0301 	bic.w	r3, r3, #1
   213da:	e7d2      	b.n	21382 <bma456_feature_enable+0x88>
        rslt = BMA4_E_NULL_PTR;
   213dc:	f04f 30ff 	mov.w	r0, #4294967295
   213e0:	e7d7      	b.n	21392 <bma456_feature_enable+0x98>
            rslt = BMA4_E_INVALID_SENSOR;
   213e2:	f06f 0003 	mvn.w	r0, #3
   213e6:	e7d4      	b.n	21392 <bma456_feature_enable+0x98>

000213e8 <bma456_step_counter_set_watermark>:
{
   213e8:	b530      	push	{r4, r5, lr}
   213ea:	b093      	sub	sp, #76	; 0x4c
   213ec:	460c      	mov	r4, r1
   213ee:	4605      	mov	r5, r0
    uint8_t feature_config[BMA456_FEATURE_SIZE] = { 0 };
   213f0:	2100      	movs	r1, #0
   213f2:	2242      	movs	r2, #66	; 0x42
   213f4:	a801      	add	r0, sp, #4
   213f6:	9100      	str	r1, [sp, #0]
   213f8:	f003 f861 	bl	244be <memset>
    if (dev != NULL)
   213fc:	b30c      	cbz	r4, 21442 <bma456_step_counter_set_watermark+0x5a>
        if (dev->chip_id == BMA456_CHIP_ID)
   213fe:	7823      	ldrb	r3, [r4, #0]
   21400:	2b16      	cmp	r3, #22
   21402:	d121      	bne.n	21448 <bma456_step_counter_set_watermark+0x60>
            rslt = bma4_read_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   21404:	4623      	mov	r3, r4
   21406:	2246      	movs	r2, #70	; 0x46
   21408:	4669      	mov	r1, sp
   2140a:	205e      	movs	r0, #94	; 0x5e
   2140c:	f7ff fdbc 	bl	20f88 <bma4_read_regs>
            if (rslt == BMA4_OK)
   21410:	b9a8      	cbnz	r0, 2143e <bma456_step_counter_set_watermark+0x56>
                data = BMA4_SET_BITS_POS_0(data, BMA456_STEP_CNTR_WM, step_counter_wm);
   21412:	f8bd 203a 	ldrh.w	r2, [sp, #58]	; 0x3a
   21416:	f422 727f 	bic.w	r2, r2, #1020	; 0x3fc
   2141a:	f022 0203 	bic.w	r2, r2, #3
   2141e:	f3c5 0509 	ubfx	r5, r5, #0, #10
   21422:	432a      	orrs	r2, r5
   21424:	b212      	sxth	r2, r2
                feature_config[index] = BMA4_GET_LSB(data);
   21426:	f88d 203a 	strb.w	r2, [sp, #58]	; 0x3a
                feature_config[index + 1] = BMA4_GET_MSB(data);
   2142a:	f3c2 2207 	ubfx	r2, r2, #8, #8
   2142e:	f88d 203b 	strb.w	r2, [sp, #59]	; 0x3b
                rslt = bma4_write_regs(BMA4_FEATURE_CONFIG_ADDR, feature_config, BMA456_FEATURE_SIZE, dev);
   21432:	4623      	mov	r3, r4
   21434:	2246      	movs	r2, #70	; 0x46
   21436:	4669      	mov	r1, sp
   21438:	205e      	movs	r0, #94	; 0x5e
   2143a:	f7ff fe51 	bl	210e0 <bma4_write_regs>
}
   2143e:	b013      	add	sp, #76	; 0x4c
   21440:	bd30      	pop	{r4, r5, pc}
        rslt = BMA4_E_NULL_PTR;
   21442:	f04f 30ff 	mov.w	r0, #4294967295
   21446:	e7fa      	b.n	2143e <bma456_step_counter_set_watermark+0x56>
            rslt = BMA4_E_INVALID_SENSOR;
   21448:	f06f 0003 	mvn.w	r0, #3
   2144c:	e7f7      	b.n	2143e <bma456_step_counter_set_watermark+0x56>

0002144e <bma456_step_counter_output>:
{
   2144e:	b513      	push	{r0, r1, r4, lr}
    uint8_t data[BMA456_STEP_CNTR_DATA_SIZE] = { 0 };
   21450:	2300      	movs	r3, #0
   21452:	9301      	str	r3, [sp, #4]
{
   21454:	4604      	mov	r4, r0
    if ((dev != NULL) && (step_count != NULL))
   21456:	460b      	mov	r3, r1
   21458:	b171      	cbz	r1, 21478 <bma456_step_counter_output+0x2a>
   2145a:	b168      	cbz	r0, 21478 <bma456_step_counter_output+0x2a>
        if (dev->chip_id == BMA456_CHIP_ID)
   2145c:	780a      	ldrb	r2, [r1, #0]
   2145e:	2a16      	cmp	r2, #22
   21460:	d10d      	bne.n	2147e <bma456_step_counter_output+0x30>
            rslt = bma4_read_regs(BMA4_STEP_CNT_OUT_0_ADDR, data, BMA456_STEP_CNTR_DATA_SIZE, dev);
   21462:	2204      	movs	r2, #4
   21464:	eb0d 0102 	add.w	r1, sp, r2
   21468:	201e      	movs	r0, #30
   2146a:	f7ff fd8d 	bl	20f88 <bma4_read_regs>
            if (rslt == BMA4_OK)
   2146e:	b908      	cbnz	r0, 21474 <bma456_step_counter_output+0x26>
                *step_count = step_count_0 | step_count_1 | step_count_2 | step_count_3;
   21470:	9b01      	ldr	r3, [sp, #4]
   21472:	6023      	str	r3, [r4, #0]
}
   21474:	b002      	add	sp, #8
   21476:	bd10      	pop	{r4, pc}
        rslt = BMA4_E_NULL_PTR;
   21478:	f04f 30ff 	mov.w	r0, #4294967295
   2147c:	e7fa      	b.n	21474 <bma456_step_counter_output+0x26>
            rslt = BMA4_E_INVALID_SENSOR;
   2147e:	f06f 0003 	mvn.w	r0, #3
   21482:	e7f7      	b.n	21474 <bma456_step_counter_output+0x26>

00021484 <set_max30102_for_reading_data>:
{
   21484:	b510      	push	{r4, lr}
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   21486:	2140      	movs	r1, #64	; 0x40
   21488:	2002      	movs	r0, #2
   2148a:	f7e2 f819 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   2148e:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT1_ENABLE, 0x40, 1);
   21490:	4604      	mov	r4, r0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   21492:	2003      	movs	r0, #3
   21494:	f7e2 f814 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   21498:	2100      	movs	r1, #0
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   2149a:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   2149c:	2004      	movs	r0, #4
   2149e:	f7e2 f80f 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_INT2_ENABLE, 0x00, 1);
   214a2:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   214a4:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   214a6:	2100      	movs	r1, #0
   214a8:	2005      	movs	r0, #5
   214aa:	f7e2 f809 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_W_POINTER, 0x00, 1);
   214ae:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   214b0:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   214b2:	2100      	movs	r1, #0
   214b4:	2006      	movs	r0, #6
   214b6:	f7e2 f803 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_OVR_COUNTER, 0x00, 1);
   214ba:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   214bc:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   214be:	210f      	movs	r1, #15
   214c0:	2008      	movs	r0, #8
   214c2:	f7e1 fffd 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_R_POINTER, 0x00, 1);
   214c6:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   214c8:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   214ca:	2103      	movs	r1, #3
   214cc:	2009      	movs	r0, #9
   214ce:	f7e1 fff7 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_FIFO_CONFIG, 0x0F, 1);
   214d2:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   214d4:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   214d6:	2127      	movs	r1, #39	; 0x27
   214d8:	200a      	movs	r0, #10
   214da:	f7e1 fff1 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_CONFIG, 0x03, 1);
   214de:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   214e0:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   214e2:	2124      	movs	r1, #36	; 0x24
   214e4:	200c      	movs	r0, #12
   214e6:	f7e1 ffeb 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_SPO2_CONFIG, 0x27, 1);
   214ea:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   214ec:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   214ee:	2124      	movs	r1, #36	; 0x24
   214f0:	200d      	movs	r0, #13
   214f2:	f7e1 ffe5 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_1, 0x24, 1);
   214f6:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   214f8:	4304      	orrs	r4, r0
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   214fa:	217f      	movs	r1, #127	; 0x7f
   214fc:	2010      	movs	r0, #16
   214fe:	f7e1 ffdf 	bl	34c0 <max30102_i2c_write.constprop.0>
    rslt |= max30102_i2c_write(MAX30102_LED_CONFIG_2, 0x24, 1);
   21502:	b2a4      	uxth	r4, r4
    rslt |= max30102_i2c_write(MAX30102_REG_PILOT_PA, 0x7F, 1);
   21504:	4320      	orrs	r0, r4
}
   21506:	b280      	uxth	r0, r0
   21508:	bd10      	pop	{r4, pc}

0002150a <gpio_pin_configure>:
{
   2150a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct gpio_driver_data *data =
   2150c:	68c5      	ldr	r5, [r0, #12]
{
   2150e:	460f      	mov	r7, r1
   21510:	4616      	mov	r6, r2
	return api->pin_configure(port, pin, flags);
   21512:	6883      	ldr	r3, [r0, #8]
   21514:	681b      	ldr	r3, [r3, #0]
   21516:	4798      	blx	r3
	if (ret != 0) {
   21518:	b948      	cbnz	r0, 2152e <gpio_pin_configure+0x24>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   2151a:	682c      	ldr	r4, [r5, #0]
   2151c:	2301      	movs	r3, #1
   2151e:	fa03 f107 	lsl.w	r1, r3, r7
	if ((flags & GPIO_ACTIVE_LOW) != 0) {
   21522:	07f3      	lsls	r3, r6, #31
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21524:	bf4c      	ite	mi
   21526:	4321      	orrmi	r1, r4
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21528:	ea24 0101 	bicpl.w	r1, r4, r1
   2152c:	6029      	str	r1, [r5, #0]
}
   2152e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00021530 <match_led_to_button>:

    return led;
}

bool match_led_to_button(struct device *button, struct device *led)
{
   21530:	b537      	push	{r0, r1, r2, r4, r5, lr}
	const struct gpio_driver_data *const data =
   21532:	68c5      	ldr	r5, [r0, #12]
   21534:	460c      	mov	r4, r1
	return api->port_get_raw(port, value);
   21536:	6883      	ldr	r3, [r0, #8]
   21538:	a901      	add	r1, sp, #4
   2153a:	685b      	ldr	r3, [r3, #4]
   2153c:	4798      	blx	r3
	if (ret == 0) {
   2153e:	b920      	cbnz	r0, 2154a <match_led_to_button+0x1a>
		*value ^= data->invert;
   21540:	6828      	ldr	r0, [r5, #0]
   21542:	9b01      	ldr	r3, [sp, #4]
   21544:	4058      	eors	r0, r3
		ret = (value & (gpio_port_pins_t)BIT(pin)) != 0 ? 1 : 0;
   21546:	f3c0 10c0 	ubfx	r0, r0, #7, #1
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2154a:	68e3      	ldr	r3, [r4, #12]
   2154c:	681b      	ldr	r3, [r3, #0]
    bool val;
    val = gpio_pin_get(button, SW0_GPIO_PIN);
   2154e:	1e05      	subs	r5, r0, #0
   21550:	bf18      	it	ne
   21552:	2501      	movne	r5, #1
   21554:	055b      	lsls	r3, r3, #21
   21556:	d509      	bpl.n	2156c <match_led_to_button+0x3c>
	if (value != 0)	{
   21558:	b150      	cbz	r0, 21570 <match_led_to_button+0x40>
	return api->port_set_bits_raw(port, pins);
   2155a:	68a3      	ldr	r3, [r4, #8]
   2155c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2155e:	f44f 6180 	mov.w	r1, #1024	; 0x400
   21562:	4620      	mov	r0, r4
   21564:	4798      	blx	r3
    gpio_pin_set(led, LED0_GPIO_PIN, !val);
    return val;
}
   21566:	4628      	mov	r0, r5
   21568:	b003      	add	sp, #12
   2156a:	bd30      	pop	{r4, r5, pc}
	if (value != 0)	{
   2156c:	2800      	cmp	r0, #0
   2156e:	d0f4      	beq.n	2155a <match_led_to_button+0x2a>
	return api->port_clear_bits_raw(port, pins);
   21570:	68a3      	ldr	r3, [r4, #8]
   21572:	691b      	ldr	r3, [r3, #16]
   21574:	e7f3      	b.n	2155e <match_led_to_button+0x2e>

00021576 <z_impl_i2c_transfer>:
{
   21576:	b410      	push	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   21578:	6884      	ldr	r4, [r0, #8]
   2157a:	6864      	ldr	r4, [r4, #4]
   2157c:	46a4      	mov	ip, r4
}
   2157e:	bc10      	pop	{r4}
	return api->transfer(dev, msgs, num_msgs, addr);
   21580:	4760      	bx	ip

00021582 <max30208_read_fifo>:
{
   21582:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
    *data = 0;
   21584:	2300      	movs	r3, #0
   21586:	6003      	str	r3, [r0, #0]
{
   21588:	4605      	mov	r5, r0
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   2158a:	21c1      	movs	r1, #193	; 0xc1
   2158c:	2014      	movs	r0, #20
   2158e:	f7e2 f9e1 	bl	3954 <max30208_i2c_write.constprop.0>
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   21592:	f10d 0107 	add.w	r1, sp, #7
    rslt |= max30208_i2c_write(MAX30208_TEMP_SETUP, 0xC1, 1);
   21596:	4604      	mov	r4, r0
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   21598:	2008      	movs	r0, #8
   2159a:	f7e2 f9f7 	bl	398c <max30208_i2c_read.constprop.0>
   2159e:	f10d 0107 	add.w	r1, sp, #7
   215a2:	2008      	movs	r0, #8
            temp_dat[i] = temp;
   215a4:	f89d 7007 	ldrb.w	r7, [sp, #7]
            max30208_i2c_read(MAX30208_FIFO_DATA_REG, &temp, 1);
   215a8:	f7e2 f9f0 	bl	398c <max30208_i2c_read.constprop.0>
            temp_dat[i] = temp;
   215ac:	f89d 6007 	ldrb.w	r6, [sp, #7]
        sum = sum + (temp_dat[0] << 8) + temp_dat[1];
   215b0:	eb06 2607 	add.w	r6, r6, r7, lsl #8
    *data = sum / samples;
   215b4:	602e      	str	r6, [r5, #0]
    max30208_i2c_read(MAX30208_FIFO_R_POINTER, &temp, 1);
   215b6:	f10d 0107 	add.w	r1, sp, #7
   215ba:	2005      	movs	r0, #5
   215bc:	f7e2 f9e6 	bl	398c <max30208_i2c_read.constprop.0>
}
   215c0:	4620      	mov	r0, r4
    *data = (temp_dat[0] << 8) + temp_dat[1];
   215c2:	602e      	str	r6, [r5, #0]
}
   215c4:	b003      	add	sp, #12
   215c6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000215c8 <mpu6050_read_Acc>:

u16_t mpu6050_read_Acc(uint16_t *value)
{
   215c8:	4601      	mov	r1, r0
    return mpu6050_i2c_read(0x3B, value, 2);
   215ca:	203b      	movs	r0, #59	; 0x3b
   215cc:	f7e2 ba18 	b.w	3a00 <mpu6050_i2c_read.constprop.0>

000215d0 <maxim_peaks_above_min_height>:
* \par          Details
*               Find all peaks above MIN_HEIGHT
*
* \retval       None
*/
{
   215d0:	4684      	mov	ip, r0
    int32_t i = 1, n_width;
    *pn_npks = 0;
   215d2:	2000      	movs	r0, #0
{
   215d4:	b5f0      	push	{r4, r5, r6, r7, lr}
    *pn_npks = 0;
   215d6:	6008      	str	r0, [r1, #0]
    int32_t i = 1, n_width;
   215d8:	2501      	movs	r5, #1

    while (i < n_size - 1)
   215da:	f103 3eff 	add.w	lr, r3, #4294967295
   215de:	45ae      	cmp	lr, r5
   215e0:	dc00      	bgt.n	215e4 <maxim_peaks_above_min_height+0x14>
                i += n_width;
        }
        else
            i++;
    }
}
   215e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if (pn_x[i] > n_min_height && pn_x[i] > pn_x[i - 1])
   215e4:	9c05      	ldr	r4, [sp, #20]
   215e6:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
   215ea:	42a0      	cmp	r0, r4
   215ec:	ea4f 0685 	mov.w	r6, r5, lsl #2
   215f0:	f105 0401 	add.w	r4, r5, #1
   215f4:	dd18      	ble.n	21628 <maxim_peaks_above_min_height+0x58>
   215f6:	4416      	add	r6, r2
   215f8:	f856 6c04 	ldr.w	r6, [r6, #-4]
   215fc:	42b0      	cmp	r0, r6
   215fe:	dd13      	ble.n	21628 <maxim_peaks_above_min_height+0x58>
   21600:	4626      	mov	r6, r4
            while (i + n_width < n_size && pn_x[i] == pn_x[i + n_width]) // find flat peaks
   21602:	429e      	cmp	r6, r3
   21604:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
   21608:	4634      	mov	r4, r6
   2160a:	da03      	bge.n	21614 <maxim_peaks_above_min_height+0x44>
   2160c:	42b8      	cmp	r0, r7
   2160e:	f106 0601 	add.w	r6, r6, #1
   21612:	d0f6      	beq.n	21602 <maxim_peaks_above_min_height+0x32>
            if (pn_x[i] > pn_x[i + n_width] && (*pn_npks) < 15)
   21614:	42b8      	cmp	r0, r7
   21616:	dd07      	ble.n	21628 <maxim_peaks_above_min_height+0x58>
   21618:	6808      	ldr	r0, [r1, #0]
   2161a:	280e      	cmp	r0, #14
                pn_locs[(*pn_npks)++] = i;
   2161c:	bfdf      	itttt	le
   2161e:	1c46      	addle	r6, r0, #1
   21620:	600e      	strle	r6, [r1, #0]
   21622:	f84c 5020 	strle.w	r5, [ip, r0, lsl #2]
                i += n_width + 1;
   21626:	3401      	addle	r4, #1
{
   21628:	4625      	mov	r5, r4
   2162a:	e7d8      	b.n	215de <maxim_peaks_above_min_height+0xe>

0002162c <maxim_sort_ascend>:
* \par          Details
*               Sort array in ascending order (insertion sort algorithm)
*
* \retval       None
*/
{
   2162c:	b5f0      	push	{r4, r5, r6, r7, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   2162e:	2301      	movs	r3, #1
   21630:	4604      	mov	r4, r0
   21632:	428b      	cmp	r3, r1
   21634:	db00      	blt.n	21638 <maxim_sort_ascend+0xc>
        n_temp = pn_x[i];
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
            pn_x[j] = pn_x[j - 1];
        pn_x[j] = n_temp;
    }
}
   21636:	bdf0      	pop	{r4, r5, r6, r7, pc}
        n_temp = pn_x[i];
   21638:	f854 6f04 	ldr.w	r6, [r4, #4]!
   2163c:	461a      	mov	r2, r3
   2163e:	4625      	mov	r5, r4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   21640:	f855 7c04 	ldr.w	r7, [r5, #-4]
   21644:	42b7      	cmp	r7, r6
   21646:	dd03      	ble.n	21650 <maxim_sort_ascend+0x24>
   21648:	3a01      	subs	r2, #1
            pn_x[j] = pn_x[j - 1];
   2164a:	f845 7904 	str.w	r7, [r5], #-4
        for (j = i; j > 0 && n_temp < pn_x[j - 1]; j--)
   2164e:	d1f7      	bne.n	21640 <maxim_sort_ascend+0x14>
        pn_x[j] = n_temp;
   21650:	f840 6022 	str.w	r6, [r0, r2, lsl #2]
    for (i = 1; i < n_size; i++)
   21654:	3301      	adds	r3, #1
   21656:	e7ec      	b.n	21632 <maxim_sort_ascend+0x6>

00021658 <maxim_sort_indices_descend>:
* \par          Details
*               Sort indices according to descending order (insertion sort algorithm)
*
* \retval       None
*/
{
   21658:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    int32_t i, j, n_temp;
    for (i = 1; i < n_size; i++)
   2165c:	2301      	movs	r3, #1
   2165e:	460d      	mov	r5, r1
   21660:	4293      	cmp	r3, r2
   21662:	db01      	blt.n	21668 <maxim_sort_indices_descend+0x10>
        n_temp = pn_indx[i];
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
            pn_indx[j] = pn_indx[j - 1];
        pn_indx[j] = n_temp;
    }
}
   21664:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        n_temp = pn_indx[i];
   21668:	f855 6f04 	ldr.w	r6, [r5, #4]!
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   2166c:	461c      	mov	r4, r3
   2166e:	eb00 0986 	add.w	r9, r0, r6, lsl #2
   21672:	46ac      	mov	ip, r5
   21674:	f85c 7c04 	ldr.w	r7, [ip, #-4]
   21678:	f8d9 e000 	ldr.w	lr, [r9]
   2167c:	f850 8027 	ldr.w	r8, [r0, r7, lsl #2]
   21680:	45c6      	cmp	lr, r8
   21682:	dd03      	ble.n	2168c <maxim_sort_indices_descend+0x34>
   21684:	3c01      	subs	r4, #1
            pn_indx[j] = pn_indx[j - 1];
   21686:	f84c 7904 	str.w	r7, [ip], #-4
        for (j = i; j > 0 && pn_x[n_temp] > pn_x[pn_indx[j - 1]]; j--)
   2168a:	d1f3      	bne.n	21674 <maxim_sort_indices_descend+0x1c>
        pn_indx[j] = n_temp;
   2168c:	f841 6024 	str.w	r6, [r1, r4, lsl #2]
    for (i = 1; i < n_size; i++)
   21690:	3301      	adds	r3, #1
   21692:	e7e5      	b.n	21660 <maxim_sort_indices_descend+0x8>

00021694 <maxim_remove_close_peaks>:
{
   21694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21696:	4604      	mov	r4, r0
   21698:	461e      	mov	r6, r3
   2169a:	4610      	mov	r0, r2
   2169c:	460d      	mov	r5, r1
    maxim_sort_indices_descend(pn_x, pn_locs, *pn_npks);
   2169e:	680a      	ldr	r2, [r1, #0]
   216a0:	4621      	mov	r1, r4
   216a2:	f7ff ffd9 	bl	21658 <maxim_sort_indices_descend>
    for (i = -1; i < *pn_npks; i++)
   216a6:	f04f 32ff 	mov.w	r2, #4294967295
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   216aa:	f1c6 0e00 	rsb	lr, r6, #0
    for (i = -1; i < *pn_npks; i++)
   216ae:	6829      	ldr	r1, [r5, #0]
   216b0:	4291      	cmp	r1, r2
   216b2:	dc04      	bgt.n	216be <maxim_remove_close_peaks+0x2a>
    maxim_sort_ascend(pn_locs, *pn_npks);
   216b4:	4620      	mov	r0, r4
}
   216b6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    maxim_sort_ascend(pn_locs, *pn_npks);
   216ba:	f7ff bfb7 	b.w	2162c <maxim_sort_ascend>
        *pn_npks = i + 1;
   216be:	1c57      	adds	r7, r2, #1
   216c0:	4638      	mov	r0, r7
   216c2:	602f      	str	r7, [r5, #0]
        for (j = i + 1; j < n_old_npks; j++)
   216c4:	4281      	cmp	r1, r0
   216c6:	d101      	bne.n	216cc <maxim_remove_close_peaks+0x38>
   216c8:	463a      	mov	r2, r7
   216ca:	e7f0      	b.n	216ae <maxim_remove_close_peaks+0x1a>
            n_dist = pn_locs[j] - (i == -1 ? -1 : pn_locs[i]); // lag-zero peak of autocorr is at index -1
   216cc:	f1b2 3fff 	cmp.w	r2, #4294967295
   216d0:	bf18      	it	ne
   216d2:	f854 c022 	ldrne.w	ip, [r4, r2, lsl #2]
   216d6:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   216da:	bf08      	it	eq
   216dc:	4694      	moveq	ip, r2
   216de:	eba3 030c 	sub.w	r3, r3, ip
            if (n_dist > n_min_distance || n_dist < -n_min_distance)
   216e2:	42b3      	cmp	r3, r6
   216e4:	dc01      	bgt.n	216ea <maxim_remove_close_peaks+0x56>
   216e6:	459e      	cmp	lr, r3
   216e8:	dd08      	ble.n	216fc <maxim_remove_close_peaks+0x68>
                pn_locs[(*pn_npks)++] = pn_locs[j];
   216ea:	f8d5 c000 	ldr.w	ip, [r5]
   216ee:	f10c 0301 	add.w	r3, ip, #1
   216f2:	602b      	str	r3, [r5, #0]
   216f4:	f854 3020 	ldr.w	r3, [r4, r0, lsl #2]
   216f8:	f844 302c 	str.w	r3, [r4, ip, lsl #2]
        for (j = i + 1; j < n_old_npks; j++)
   216fc:	3001      	adds	r0, #1
   216fe:	e7e1      	b.n	216c4 <maxim_remove_close_peaks+0x30>

00021700 <maxim_find_peaks>:
{
   21700:	b573      	push	{r0, r1, r4, r5, r6, lr}
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   21702:	9e06      	ldr	r6, [sp, #24]
   21704:	9600      	str	r6, [sp, #0]
{
   21706:	4605      	mov	r5, r0
   21708:	460c      	mov	r4, r1
    maxim_peaks_above_min_height(pn_locs, pn_npks, pn_x, n_size, n_min_height);
   2170a:	f7ff ff61 	bl	215d0 <maxim_peaks_above_min_height>
    maxim_remove_close_peaks(pn_locs, pn_npks, pn_x, n_min_distance);
   2170e:	9b07      	ldr	r3, [sp, #28]
   21710:	4628      	mov	r0, r5
   21712:	f7ff ffbf 	bl	21694 <maxim_remove_close_peaks>
    *pn_npks = min(*pn_npks, n_max_num);
   21716:	6822      	ldr	r2, [r4, #0]
   21718:	9b08      	ldr	r3, [sp, #32]
   2171a:	429a      	cmp	r2, r3
   2171c:	bfd4      	ite	le
   2171e:	6022      	strle	r2, [r4, #0]
   21720:	6023      	strgt	r3, [r4, #0]
}
   21722:	b002      	add	sp, #8
   21724:	bd70      	pop	{r4, r5, r6, pc}

00021726 <gpio_pin_set>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   21726:	2301      	movs	r3, #1
   21728:	fa03 f101 	lsl.w	r1, r3, r1
   2172c:	68c3      	ldr	r3, [r0, #12]
   2172e:	681b      	ldr	r3, [r3, #0]
   21730:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   21732:	bf18      	it	ne
   21734:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   21738:	b112      	cbz	r2, 21740 <gpio_pin_set+0x1a>
	return api->port_set_bits_raw(port, pins);
   2173a:	6883      	ldr	r3, [r0, #8]
   2173c:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   2173e:	4718      	bx	r3
   21740:	6883      	ldr	r3, [r0, #8]
   21742:	691b      	ldr	r3, [r3, #16]
   21744:	e7fb      	b.n	2173e <gpio_pin_set+0x18>

00021746 <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   21746:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   21748:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   2174a:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   2174c:	6883      	ldr	r3, [r0, #8]
   2174e:	f44f 7200 	mov.w	r2, #512	; 0x200
   21752:	681b      	ldr	r3, [r3, #0]
   21754:	4798      	blx	r3
	if (ret != 0) {
   21756:	b930      	cbnz	r0, 21766 <gpio_pin_configure.constprop.0+0x20>
		data->invert &= ~(gpio_port_pins_t)BIT(pin);
   21758:	2301      	movs	r3, #1
   2175a:	fa03 f104 	lsl.w	r1, r3, r4
   2175e:	682b      	ldr	r3, [r5, #0]
   21760:	ea23 0301 	bic.w	r3, r3, r1
   21764:	602b      	str	r3, [r5, #0]
}
   21766:	bd38      	pop	{r3, r4, r5, pc}

00021768 <k_msleep.isra.0>:
static inline int32_t k_msleep(int32_t ms)
   21768:	4601      	mov	r1, r0
   2176a:	f240 30e7 	movw	r0, #999	; 0x3e7
   2176e:	b508      	push	{r3, lr}
   21770:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   21774:	2300      	movs	r3, #0
   21776:	eb00 30c1 	add.w	r0, r0, r1, lsl #15
   2177a:	1449      	asrs	r1, r1, #17
   2177c:	f7df fc0c 	bl	f98 <__aeabi_uldivmod>
}
   21780:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	return z_impl_k_sleep(timeout);
   21784:	f7fe be4e 	b.w	20424 <z_impl_k_sleep>

00021788 <SetBrightness>:
{
   21788:	b510      	push	{r4, lr}
   2178a:	4604      	mov	r4, r0
	WriteComm(0x51);
   2178c:	2051      	movs	r0, #81	; 0x51
   2178e:	f7e2 fc53 	bl	4038 <WriteComm>
	WriteData(value);
   21792:	b2e0      	uxtb	r0, r4
}
   21794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	WriteData(value);
   21798:	f7e2 bc86 	b.w	40a8 <WriteData>

0002179c <BlockWrite>:
{
   2179c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2179e:	4607      	mov	r7, r0
	WriteComm(0x2A);
   217a0:	202a      	movs	r0, #42	; 0x2a
{
   217a2:	460e      	mov	r6, r1
   217a4:	4615      	mov	r5, r2
   217a6:	461c      	mov	r4, r3
	WriteComm(0x2A);
   217a8:	f7e2 fc46 	bl	4038 <WriteComm>
	WriteData(Xstart >> 8);
   217ac:	f3c7 2007 	ubfx	r0, r7, #8, #8
   217b0:	f7e2 fc7a 	bl	40a8 <WriteData>
	WriteData(Xstart);
   217b4:	b2f8      	uxtb	r0, r7
   217b6:	f7e2 fc77 	bl	40a8 <WriteData>
	WriteData(Xend >> 8);
   217ba:	f3c6 2007 	ubfx	r0, r6, #8, #8
   217be:	f7e2 fc73 	bl	40a8 <WriteData>
	WriteData(Xend);
   217c2:	b2f0      	uxtb	r0, r6
   217c4:	f7e2 fc70 	bl	40a8 <WriteData>
	WriteComm(0x2B);
   217c8:	202b      	movs	r0, #43	; 0x2b
   217ca:	f7e2 fc35 	bl	4038 <WriteComm>
	WriteData(Ystart >> 8);
   217ce:	f3c5 2007 	ubfx	r0, r5, #8, #8
   217d2:	f7e2 fc69 	bl	40a8 <WriteData>
	WriteData(Ystart);
   217d6:	b2e8      	uxtb	r0, r5
   217d8:	f7e2 fc66 	bl	40a8 <WriteData>
	WriteData(Yend >> 8);
   217dc:	f3c4 2007 	ubfx	r0, r4, #8, #8
   217e0:	f7e2 fc62 	bl	40a8 <WriteData>
	WriteData(Yend);
   217e4:	b2e0      	uxtb	r0, r4
   217e6:	f7e2 fc5f 	bl	40a8 <WriteData>
}
   217ea:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	WriteComm(0x2c);
   217ee:	202c      	movs	r0, #44	; 0x2c
   217f0:	f7e2 bc22 	b.w	4038 <WriteComm>

000217f4 <resetDisplay>:
	WriteComm(0x01);
   217f4:	2001      	movs	r0, #1
   217f6:	f7e2 bc1f 	b.w	4038 <WriteComm>

000217fa <setDisplay>:
{
   217fa:	b508      	push	{r3, lr}
	WriteComm(0xFE);
   217fc:	20fe      	movs	r0, #254	; 0xfe
   217fe:	f7e2 fc1b 	bl	4038 <WriteComm>
	WriteData(0x01);
   21802:	2001      	movs	r0, #1
   21804:	f7e2 fc50 	bl	40a8 <WriteData>
	WriteComm(0x04);
   21808:	2004      	movs	r0, #4
   2180a:	f7e2 fc15 	bl	4038 <WriteComm>
	WriteData(0xA0);
   2180e:	20a0      	movs	r0, #160	; 0xa0
   21810:	f7e2 fc4a 	bl	40a8 <WriteData>
	WriteComm(0x70);
   21814:	2070      	movs	r0, #112	; 0x70
   21816:	f7e2 fc0f 	bl	4038 <WriteComm>
	WriteData(0x55);
   2181a:	2055      	movs	r0, #85	; 0x55
   2181c:	f7e2 fc44 	bl	40a8 <WriteData>
	WriteComm(0xFE);
   21820:	20fe      	movs	r0, #254	; 0xfe
   21822:	f7e2 fc09 	bl	4038 <WriteComm>
	WriteData(0x0A);
   21826:	200a      	movs	r0, #10
   21828:	f7e2 fc3e 	bl	40a8 <WriteData>
	WriteComm(0x29);
   2182c:	2029      	movs	r0, #41	; 0x29
   2182e:	f7e2 fc03 	bl	4038 <WriteComm>
	WriteData(0x10);
   21832:	2010      	movs	r0, #16
   21834:	f7e2 fc38 	bl	40a8 <WriteData>
	WriteComm(0xFE);
   21838:	20fe      	movs	r0, #254	; 0xfe
   2183a:	f7e2 fbfd 	bl	4038 <WriteComm>
	WriteData(0x05);
   2183e:	2005      	movs	r0, #5
   21840:	f7e2 fc32 	bl	40a8 <WriteData>
	WriteComm(0x05);
   21844:	2005      	movs	r0, #5
   21846:	f7e2 fbf7 	bl	4038 <WriteComm>
	WriteData(0x00);
   2184a:	2000      	movs	r0, #0
   2184c:	f7e2 fc2c 	bl	40a8 <WriteData>
	WriteComm(0xFE);
   21850:	20fe      	movs	r0, #254	; 0xfe
   21852:	f7e2 fbf1 	bl	4038 <WriteComm>
	WriteData(0x00);
   21856:	2000      	movs	r0, #0
   21858:	f7e2 fc26 	bl	40a8 <WriteData>
	WriteComm(0x51);
   2185c:	2051      	movs	r0, #81	; 0x51
   2185e:	f7e2 fbeb 	bl	4038 <WriteComm>
	WriteData(0xaf);
   21862:	20af      	movs	r0, #175	; 0xaf
   21864:	f7e2 fc20 	bl	40a8 <WriteData>
	WriteComm(0x53);
   21868:	2053      	movs	r0, #83	; 0x53
   2186a:	f7e2 fbe5 	bl	4038 <WriteComm>
	WriteData(0x10);
   2186e:	2010      	movs	r0, #16
   21870:	f7e2 fc1a 	bl	40a8 <WriteData>
	WriteComm(0x53);
   21874:	2053      	movs	r0, #83	; 0x53
   21876:	f7e2 fbdf 	bl	4038 <WriteComm>
	WriteData(0x20);
   2187a:	2020      	movs	r0, #32
   2187c:	f7e2 fc14 	bl	40a8 <WriteData>
	WriteComm(0x35);
   21880:	2035      	movs	r0, #53	; 0x35
   21882:	f7e2 fbd9 	bl	4038 <WriteComm>
	WriteData(0x00);
   21886:	2000      	movs	r0, #0
   21888:	f7e2 fc0e 	bl	40a8 <WriteData>
	WriteComm(0x3A);
   2188c:	203a      	movs	r0, #58	; 0x3a
   2188e:	f7e2 fbd3 	bl	4038 <WriteComm>
	WriteData(0x55); //RGB565
   21892:	2055      	movs	r0, #85	; 0x55
   21894:	f7e2 fc08 	bl	40a8 <WriteData>
	WriteComm(0x2A);
   21898:	202a      	movs	r0, #42	; 0x2a
   2189a:	f7e2 fbcd 	bl	4038 <WriteComm>
	WriteData(0x00);
   2189e:	2000      	movs	r0, #0
   218a0:	f7e2 fc02 	bl	40a8 <WriteData>
	WriteData(0x10);
   218a4:	2010      	movs	r0, #16
   218a6:	f7e2 fbff 	bl	40a8 <WriteData>
	WriteData(0x01);
   218aa:	2001      	movs	r0, #1
   218ac:	f7e2 fbfc 	bl	40a8 <WriteData>
	WriteData(0x7F);
   218b0:	207f      	movs	r0, #127	; 0x7f
   218b2:	f7e2 fbf9 	bl	40a8 <WriteData>
	WriteComm(0x2B);
   218b6:	202b      	movs	r0, #43	; 0x2b
   218b8:	f7e2 fbbe 	bl	4038 <WriteComm>
	WriteData(0x00);
   218bc:	2000      	movs	r0, #0
   218be:	f7e2 fbf3 	bl	40a8 <WriteData>
	WriteData(0x00);
   218c2:	2000      	movs	r0, #0
   218c4:	f7e2 fbf0 	bl	40a8 <WriteData>
	WriteData(0x01);
   218c8:	2001      	movs	r0, #1
   218ca:	f7e2 fbed 	bl	40a8 <WriteData>
	WriteData(0xBF);
   218ce:	20bf      	movs	r0, #191	; 0xbf
   218d0:	f7e2 fbea 	bl	40a8 <WriteData>
	WriteComm(0x11);
   218d4:	2011      	movs	r0, #17
   218d6:	f7e2 fbaf 	bl	4038 <WriteComm>
	k_msleep(480);
   218da:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
   218de:	f7ff ff43 	bl	21768 <k_msleep.isra.0>
	WriteComm(0x29);
   218e2:	2029      	movs	r0, #41	; 0x29
   218e4:	f7e2 fba8 	bl	4038 <WriteComm>
}
   218e8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	k_msleep(80);
   218ec:	2050      	movs	r0, #80	; 0x50
   218ee:	f7ff bf3b 	b.w	21768 <k_msleep.isra.0>

000218f2 <ToOrd>:

//ascii 32~90(!~Z), (32~47)�ո�~/,(48~57)0~9,(58~64):~@,(65~126)A~~
//ord 0~95, (48~57)0~9,(65~126)A~z,(33~47)!~/,(58~64):~@
unsigned char ToOrd(unsigned char ch)
{
	if (ch < 32) {
   218f2:	281f      	cmp	r0, #31
{
   218f4:	4603      	mov	r3, r0
	if (ch < 32) {
   218f6:	d916      	bls.n	21926 <ToOrd+0x34>
		ch = 95;
	} else if ((ch >= 32) && (ch <= 47)) //(32~47)�ո�~/
   218f8:	f1a0 0220 	sub.w	r2, r0, #32
   218fc:	2a0f      	cmp	r2, #15
   218fe:	d802      	bhi.n	21906 <ToOrd+0x14>
	{
		ch = (ch - 32) + 10 + 62;
   21900:	3328      	adds	r3, #40	; 0x28
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
	{
		ch = ch - 48;
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
	{
		ch = (ch - 58) + 10 + 62 + 16;
   21902:	b2d8      	uxtb	r0, r3
   21904:	4770      	bx	lr
	} else if ((ch >= 48) && (ch <= 57)) //(48~57)0~9
   21906:	3830      	subs	r0, #48	; 0x30
   21908:	b2c0      	uxtb	r0, r0
   2190a:	2809      	cmp	r0, #9
   2190c:	d90c      	bls.n	21928 <ToOrd+0x36>
	} else if ((ch >= 58) && (ch <= 64)) //(58~64):~@
   2190e:	f1a3 023a 	sub.w	r2, r3, #58	; 0x3a
   21912:	2a06      	cmp	r2, #6
   21914:	d801      	bhi.n	2191a <ToOrd+0x28>
		ch = (ch - 58) + 10 + 62 + 16;
   21916:	331e      	adds	r3, #30
   21918:	e7f3      	b.n	21902 <ToOrd+0x10>
	} else if ((ch >= 65) && (ch <= 126)) //(65~126)A~~
   2191a:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
   2191e:	2a3d      	cmp	r2, #61	; 0x3d
   21920:	d801      	bhi.n	21926 <ToOrd+0x34>
	{
		ch = (ch - 65) + 10;
   21922:	3b37      	subs	r3, #55	; 0x37
   21924:	e7ed      	b.n	21902 <ToOrd+0x10>
		ch = 95;
   21926:	205f      	movs	r0, #95	; 0x5f
	} else if (ch > 126) {
		ch = 95;
	}
	return ch;
}
   21928:	4770      	bx	lr

0002192a <DispStr>:
{
   2192a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2192e:	f8dd 8020 	ldr.w	r8, [sp, #32]
   21932:	460d      	mov	r5, r1
   21934:	4614      	mov	r4, r2
   21936:	461f      	mov	r7, r3
   21938:	1e46      	subs	r6, r0, #1
	while (!(*str == '\0')) {
   2193a:	f816 2f01 	ldrb.w	r2, [r6, #1]!
   2193e:	b94a      	cbnz	r2, 21954 <DispStr+0x2a>
	BlockWrite(0, COL - 1, 0, ROW - 1);
   21940:	f240 13bf 	movw	r3, #447	; 0x1bf
   21944:	f240 116f 	movw	r1, #367	; 0x16f
   21948:	4610      	mov	r0, r2
}
   2194a:	b002      	add	sp, #8
   2194c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	BlockWrite(0, COL - 1, 0, ROW - 1);
   21950:	f7ff bf24 	b.w	2179c <BlockWrite>
		DispOneChar(ToOrd(*str++), Xstart, Ystart, TextColor,
   21954:	4610      	mov	r0, r2
   21956:	f7ff ffcc 	bl	218f2 <ToOrd>
   2195a:	4629      	mov	r1, r5
   2195c:	4622      	mov	r2, r4
   2195e:	f8cd 8000 	str.w	r8, [sp]
   21962:	463b      	mov	r3, r7
   21964:	f7e2 fd24 	bl	43b0 <DispOneChar>
		if (Xstart > ((COL - 1) - FONT_W)) {
   21968:	f5b5 7fb0 	cmp.w	r5, #352	; 0x160
			Ystart = Ystart + FONT_H;
   2196c:	bf26      	itte	cs
   2196e:	3415      	addcs	r4, #21
			Xstart = 0;
   21970:	2500      	movcs	r5, #0
			Xstart = Xstart + FONT_W;
   21972:	3510      	addcc	r5, #16
			Ystart = 0;
   21974:	f5b4 7fd5 	cmp.w	r4, #426	; 0x1aa
   21978:	bf88      	it	hi
   2197a:	2400      	movhi	r4, #0
   2197c:	e7dd      	b.n	2193a <DispStr+0x10>

0002197e <gpio_pin_configure.constprop.0>:
static inline int gpio_pin_configure(const struct device *port,
   2197e:	b538      	push	{r3, r4, r5, lr}
	struct gpio_driver_data *data =
   21980:	68c5      	ldr	r5, [r0, #12]
static inline int gpio_pin_configure(const struct device *port,
   21982:	460c      	mov	r4, r1
	return api->pin_configure(port, pin, flags);
   21984:	6883      	ldr	r3, [r0, #8]
   21986:	f240 2201 	movw	r2, #513	; 0x201
   2198a:	681b      	ldr	r3, [r3, #0]
   2198c:	4798      	blx	r3
	if (ret != 0) {
   2198e:	b928      	cbnz	r0, 2199c <gpio_pin_configure.constprop.0+0x1e>
		data->invert |= (gpio_port_pins_t)BIT(pin);
   21990:	2301      	movs	r3, #1
   21992:	fa03 f104 	lsl.w	r1, r3, r4
   21996:	682b      	ldr	r3, [r5, #0]
   21998:	430b      	orrs	r3, r1
   2199a:	602b      	str	r3, [r5, #0]
}
   2199c:	bd38      	pop	{r3, r4, r5, pc}

0002199e <gpio_pin_set.isra.0>:
	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   2199e:	2301      	movs	r3, #1
   219a0:	fa03 f101 	lsl.w	r1, r3, r1
   219a4:	68c3      	ldr	r3, [r0, #12]
   219a6:	681b      	ldr	r3, [r3, #0]
   219a8:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   219aa:	bf18      	it	ne
   219ac:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   219b0:	b112      	cbz	r2, 219b8 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   219b2:	6883      	ldr	r3, [r0, #8]
   219b4:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   219b6:	4718      	bx	r3
   219b8:	6883      	ldr	r3, [r0, #8]
   219ba:	691b      	ldr	r3, [r3, #16]
   219bc:	e7fb      	b.n	219b6 <gpio_pin_set.isra.0+0x18>

000219be <u8_to_dec>:
 */

#include <sys/util.h>

uint8_t u8_to_dec(char *buf, uint8_t buflen, uint8_t value)
{
   219be:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint8_t divisor = 100;
   219c0:	2364      	movs	r3, #100	; 0x64
{
   219c2:	4604      	mov	r4, r0
	uint8_t num_digits = 0;
	uint8_t digit;

	while (buflen > 0 && divisor > 0) {
   219c4:	2504      	movs	r5, #4
	uint8_t num_digits = 0;
   219c6:	2000      	movs	r0, #0
			buflen--;
			num_digits++;
		}

		value -= digit * divisor;
		divisor /= 10;
   219c8:	f04f 0c0a 	mov.w	ip, #10
	while (buflen > 0 && divisor > 0) {
   219cc:	b111      	cbz	r1, 219d4 <u8_to_dec+0x16>
   219ce:	3d01      	subs	r5, #1
   219d0:	d101      	bne.n	219d6 <u8_to_dec+0x18>
	}

	if (buflen) {
		*buf = '\0';
   219d2:	7025      	strb	r5, [r4, #0]
	}

	return num_digits;
}
   219d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   219d6:	429a      	cmp	r2, r3
		digit = value / divisor;
   219d8:	fbb2 f7f3 	udiv	r7, r2, r3
   219dc:	b2fe      	uxtb	r6, r7
		if (digit != 0 || divisor == 1 || num_digits != 0) {
   219de:	d202      	bcs.n	219e6 <u8_to_dec+0x28>
   219e0:	2b01      	cmp	r3, #1
   219e2:	d000      	beq.n	219e6 <u8_to_dec+0x28>
   219e4:	b130      	cbz	r0, 219f4 <u8_to_dec+0x36>
			*buf = (char)digit + '0';
   219e6:	3630      	adds	r6, #48	; 0x30
			buflen--;
   219e8:	3901      	subs	r1, #1
			num_digits++;
   219ea:	3001      	adds	r0, #1
			*buf = (char)digit + '0';
   219ec:	f804 6b01 	strb.w	r6, [r4], #1
			buflen--;
   219f0:	b2c9      	uxtb	r1, r1
			num_digits++;
   219f2:	b2c0      	uxtb	r0, r0
		value -= digit * divisor;
   219f4:	fb03 2217 	mls	r2, r3, r7, r2
   219f8:	b2d2      	uxtb	r2, r2
		divisor /= 10;
   219fa:	fbb3 f3fc 	udiv	r3, r3, ip
   219fe:	e7e5      	b.n	219cc <u8_to_dec+0xe>

00021a00 <char2hex>:
#include <errno.h>
#include <sys/util.h>

int char2hex(char c, uint8_t *x)
{
	if (c >= '0' && c <= '9') {
   21a00:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   21a04:	b2db      	uxtb	r3, r3
   21a06:	2b09      	cmp	r3, #9
   21a08:	d802      	bhi.n	21a10 <char2hex+0x10>
		*x = c - '0';
   21a0a:	700b      	strb	r3, [r1, #0]
		*x = c - 'A' + 10;
	} else {
		return -EINVAL;
	}

	return 0;
   21a0c:	2000      	movs	r0, #0
   21a0e:	4770      	bx	lr
	} else if (c >= 'a' && c <= 'f') {
   21a10:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
   21a14:	2b05      	cmp	r3, #5
   21a16:	d802      	bhi.n	21a1e <char2hex+0x1e>
		*x = c - 'a' + 10;
   21a18:	3857      	subs	r0, #87	; 0x57
   21a1a:	7008      	strb	r0, [r1, #0]
   21a1c:	e7f6      	b.n	21a0c <char2hex+0xc>
	} else if (c >= 'A' && c <= 'F') {
   21a1e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
   21a22:	2b05      	cmp	r3, #5
   21a24:	d801      	bhi.n	21a2a <char2hex+0x2a>
		*x = c - 'A' + 10;
   21a26:	3837      	subs	r0, #55	; 0x37
   21a28:	e7f7      	b.n	21a1a <char2hex+0x1a>
		return -EINVAL;
   21a2a:	f06f 0015 	mvn.w	r0, #21
}
   21a2e:	4770      	bx	lr

00021a30 <hex2bin>:
	hex[2 * buflen] = '\0';
	return 2 * buflen;
}

size_t hex2bin(const char *hex, size_t hexlen, uint8_t *buf, size_t buflen)
{
   21a30:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   21a32:	4604      	mov	r4, r0
	uint8_t dec;

	if (buflen < hexlen / 2 + hexlen % 2) {
   21a34:	f001 0001 	and.w	r0, r1, #1
   21a38:	eb00 0551 	add.w	r5, r0, r1, lsr #1
   21a3c:	429d      	cmp	r5, r3
   21a3e:	ea4f 0651 	mov.w	r6, r1, lsr #1
   21a42:	d903      	bls.n	21a4c <hex2bin+0x1c>
		return 0;
   21a44:	2500      	movs	r5, #0
		}
		buf[i] += dec;
	}

	return hexlen / 2 + hexlen % 2;
}
   21a46:	4628      	mov	r0, r5
   21a48:	b003      	add	sp, #12
   21a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (hexlen % 2) {
   21a4c:	b158      	cbz	r0, 21a66 <hex2bin+0x36>
		if (char2hex(hex[0], &dec) < 0) {
   21a4e:	7820      	ldrb	r0, [r4, #0]
   21a50:	f10d 0107 	add.w	r1, sp, #7
   21a54:	f7ff ffd4 	bl	21a00 <char2hex>
   21a58:	2800      	cmp	r0, #0
   21a5a:	dbf3      	blt.n	21a44 <hex2bin+0x14>
		buf[0] = dec;
   21a5c:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21a60:	f802 3b01 	strb.w	r3, [r2], #1
		hex++;
   21a64:	3401      	adds	r4, #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   21a66:	3401      	adds	r4, #1
   21a68:	4416      	add	r6, r2
   21a6a:	42b2      	cmp	r2, r6
   21a6c:	d0eb      	beq.n	21a46 <hex2bin+0x16>
		if (char2hex(hex[2 * i], &dec) < 0) {
   21a6e:	f814 0c01 	ldrb.w	r0, [r4, #-1]
   21a72:	f10d 0107 	add.w	r1, sp, #7
   21a76:	f7ff ffc3 	bl	21a00 <char2hex>
   21a7a:	2800      	cmp	r0, #0
   21a7c:	dbe2      	blt.n	21a44 <hex2bin+0x14>
		buf[i] = dec << 4;
   21a7e:	f89d 3007 	ldrb.w	r3, [sp, #7]
   21a82:	011b      	lsls	r3, r3, #4
   21a84:	7013      	strb	r3, [r2, #0]
		if (char2hex(hex[2 * i + 1], &dec) < 0) {
   21a86:	f814 0b02 	ldrb.w	r0, [r4], #2
   21a8a:	f7ff ffb9 	bl	21a00 <char2hex>
   21a8e:	2800      	cmp	r0, #0
   21a90:	dbd8      	blt.n	21a44 <hex2bin+0x14>
		buf[i] += dec;
   21a92:	7813      	ldrb	r3, [r2, #0]
   21a94:	f89d 1007 	ldrb.w	r1, [sp, #7]
   21a98:	440b      	add	r3, r1
   21a9a:	f802 3b01 	strb.w	r3, [r2], #1
	for (size_t i = 0; i < hexlen / 2; i++) {
   21a9e:	e7e4      	b.n	21a6a <hex2bin+0x3a>

00021aa0 <sys_notify_validate>:

int sys_notify_validate(struct sys_notify *notify)
{
	int rv = 0;

	if (notify == NULL) {
   21aa0:	4603      	mov	r3, r0
   21aa2:	b140      	cbz	r0, 21ab6 <sys_notify_validate+0x16>
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21aa4:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21aa6:	f002 0203 	and.w	r2, r2, #3
		return -EINVAL;
	}

	/* Validate configuration based on mode */
	switch (sys_notify_get_method(notify)) {
   21aaa:	2a02      	cmp	r2, #2
   21aac:	d006      	beq.n	21abc <sys_notify_validate+0x1c>
   21aae:	2a03      	cmp	r2, #3
   21ab0:	d004      	beq.n	21abc <sys_notify_validate+0x1c>
   21ab2:	2a01      	cmp	r2, #1
   21ab4:	d005      	beq.n	21ac2 <sys_notify_validate+0x22>
		return -EINVAL;
   21ab6:	f06f 0015 	mvn.w	r0, #21
	if (rv == 0) {
		notify->result = 0;
	}

	return rv;
}
   21aba:	4770      	bx	lr
		if (notify->method.signal == NULL) {
   21abc:	681a      	ldr	r2, [r3, #0]
   21abe:	2a00      	cmp	r2, #0
   21ac0:	d0f9      	beq.n	21ab6 <sys_notify_validate+0x16>
		notify->result = 0;
   21ac2:	2000      	movs	r0, #0
   21ac4:	6098      	str	r0, [r3, #8]
   21ac6:	4770      	bx	lr

00021ac8 <sys_notify_finalize>:
	uint32_t method = notify->flags >> SYS_NOTIFY_METHOD_POS;
   21ac8:	6842      	ldr	r2, [r0, #4]
	return method & SYS_NOTIFY_METHOD_MASK;
   21aca:	f002 0203 	and.w	r2, r2, #3

	/* Store the result and capture secondary notification
	 * information.
	 */
	notify->result = res;
	switch (method) {
   21ace:	2a02      	cmp	r2, #2
{
   21ad0:	b510      	push	{r4, lr}
   21ad2:	4603      	mov	r3, r0
	notify->result = res;
   21ad4:	6081      	str	r1, [r0, #8]
	switch (method) {
   21ad6:	d00a      	beq.n	21aee <sys_notify_finalize+0x26>
   21ad8:	2a03      	cmp	r2, #3
   21ada:	d10b      	bne.n	21af4 <sys_notify_finalize+0x2c>
	case SYS_NOTIFY_METHOD_SPINWAIT:
		break;
	case SYS_NOTIFY_METHOD_CALLBACK:
		rv = notify->method.callback;
   21adc:	6804      	ldr	r4, [r0, #0]
	struct k_poll_signal *sig = NULL;
   21ade:	2000      	movs	r0, #0
	/* Mark completion by clearing the flags field to the
	 * completed state, releasing any spin-waiters, then complete
	 * secondary notification.
	 */
	compiler_barrier();
	notify->flags = SYS_NOTIFY_METHOD_COMPLETED;
   21ae0:	2200      	movs	r2, #0
   21ae2:	605a      	str	r2, [r3, #4]

	if (IS_ENABLED(CONFIG_POLL) && (sig != NULL)) {
   21ae4:	b108      	cbz	r0, 21aea <sys_notify_finalize+0x22>
	return z_impl_k_poll_signal_raise(signal, result);
   21ae6:	f7ff f88b 	bl	20c00 <z_impl_k_poll_signal_raise>
		k_poll_signal_raise(sig, res);
	}

	return rv;
}
   21aea:	4620      	mov	r0, r4
   21aec:	bd10      	pop	{r4, pc}
		sig = notify->method.signal;
   21aee:	6800      	ldr	r0, [r0, #0]
	sys_notify_generic_callback rv = 0;
   21af0:	2400      	movs	r4, #0
		break;
   21af2:	e7f5      	b.n	21ae0 <sys_notify_finalize+0x18>
	switch (method) {
   21af4:	2400      	movs	r4, #0
   21af6:	4620      	mov	r0, r4
   21af8:	e7f2      	b.n	21ae0 <sys_notify_finalize+0x18>

00021afa <arch_printk_char_out>:
}
   21afa:	2000      	movs	r0, #0
   21afc:	4770      	bx	lr

00021afe <str_out>:
{
   21afe:	b530      	push	{r4, r5, lr}
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21b00:	688a      	ldr	r2, [r1, #8]
   21b02:	680c      	ldr	r4, [r1, #0]
		ctx->str[ctx->count++] = '\0';
   21b04:	1c55      	adds	r5, r2, #1
	if (ctx->str == NULL || ctx->count >= ctx->max) {
   21b06:	b114      	cbz	r4, 21b0e <str_out+0x10>
   21b08:	684b      	ldr	r3, [r1, #4]
   21b0a:	4293      	cmp	r3, r2
   21b0c:	dc01      	bgt.n	21b12 <str_out+0x14>
		ctx->count++;
   21b0e:	608d      	str	r5, [r1, #8]
}
   21b10:	bd30      	pop	{r4, r5, pc}
	if (ctx->count == ctx->max - 1) {
   21b12:	3b01      	subs	r3, #1
   21b14:	4293      	cmp	r3, r2
		ctx->str[ctx->count++] = '\0';
   21b16:	bf08      	it	eq
   21b18:	2200      	moveq	r2, #0
   21b1a:	608d      	str	r5, [r1, #8]
   21b1c:	bf0c      	ite	eq
   21b1e:	54e2      	strbeq	r2, [r4, r3]
		ctx->str[ctx->count++] = c;
   21b20:	54a0      	strbne	r0, [r4, r2]
   21b22:	e7f5      	b.n	21b10 <str_out+0x12>

00021b24 <printk>:
{
   21b24:	b40f      	push	{r0, r1, r2, r3}
   21b26:	b507      	push	{r0, r1, r2, lr}
   21b28:	a904      	add	r1, sp, #16
   21b2a:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
   21b2e:	9101      	str	r1, [sp, #4]
		vprintk(fmt, ap);
   21b30:	f7e2 fd36 	bl	45a0 <vprintk>
}
   21b34:	b003      	add	sp, #12
   21b36:	f85d eb04 	ldr.w	lr, [sp], #4
   21b3a:	b004      	add	sp, #16
   21b3c:	4770      	bx	lr

00021b3e <snprintk>:
{
   21b3e:	b40c      	push	{r2, r3}
   21b40:	b507      	push	{r0, r1, r2, lr}
   21b42:	ab04      	add	r3, sp, #16
   21b44:	f853 2b04 	ldr.w	r2, [r3], #4
	va_start(ap, fmt);
   21b48:	9301      	str	r3, [sp, #4]
	ret = vsnprintk(str, size, fmt, ap);
   21b4a:	f7e2 fd37 	bl	45bc <vsnprintk>
}
   21b4e:	b003      	add	sp, #12
   21b50:	f85d eb04 	ldr.w	lr, [sp], #4
   21b54:	b002      	add	sp, #8
   21b56:	4770      	bx	lr

00021b58 <process_recheck>:
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21b58:	8b03      	ldrh	r3, [r0, #24]
	if ((state == ONOFF_STATE_OFF)
   21b5a:	f013 0307 	ands.w	r3, r3, #7
   21b5e:	d105      	bne.n	21b6c <process_recheck+0x14>
	    && !sys_slist_is_empty(&mgr->clients)) {
   21b60:	6803      	ldr	r3, [r0, #0]
		evt = EVT_START;
   21b62:	2b00      	cmp	r3, #0
   21b64:	bf0c      	ite	eq
   21b66:	2000      	moveq	r0, #0
   21b68:	2003      	movne	r0, #3
   21b6a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ON)
   21b6c:	2b02      	cmp	r3, #2
   21b6e:	d105      	bne.n	21b7c <process_recheck+0x24>
		   && (mgr->refs == 0U)) {
   21b70:	8b43      	ldrh	r3, [r0, #26]
		evt = EVT_STOP;
   21b72:	2b00      	cmp	r3, #0
   21b74:	bf14      	ite	ne
   21b76:	2000      	movne	r0, #0
   21b78:	2004      	moveq	r0, #4
   21b7a:	4770      	bx	lr
	} else if ((state == ONOFF_STATE_ERROR)
   21b7c:	2b01      	cmp	r3, #1
   21b7e:	d105      	bne.n	21b8c <process_recheck+0x34>
		   && !sys_slist_is_empty(&mgr->clients)) {
   21b80:	6803      	ldr	r3, [r0, #0]
		evt = EVT_RESET;
   21b82:	2b00      	cmp	r3, #0
   21b84:	bf0c      	ite	eq
   21b86:	2000      	moveq	r0, #0
   21b88:	2005      	movne	r0, #5
   21b8a:	4770      	bx	lr
	int evt = EVT_NOP;
   21b8c:	2000      	movs	r0, #0
}
   21b8e:	4770      	bx	lr

00021b90 <notify_one>:
{
   21b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21b94:	460d      	mov	r5, r1
   21b96:	4607      	mov	r7, r0
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21b98:	4619      	mov	r1, r3
   21b9a:	1d28      	adds	r0, r5, #4
{
   21b9c:	4690      	mov	r8, r2
   21b9e:	461e      	mov	r6, r3
		(onoff_client_callback)sys_notify_finalize(&cli->notify, res);
   21ba0:	f7ff ff92 	bl	21ac8 <sys_notify_finalize>
	if (cb) {
   21ba4:	4604      	mov	r4, r0
   21ba6:	b138      	cbz	r0, 21bb8 <notify_one+0x28>
		cb(mgr, cli, state, res);
   21ba8:	4633      	mov	r3, r6
   21baa:	4642      	mov	r2, r8
   21bac:	4629      	mov	r1, r5
   21bae:	4638      	mov	r0, r7
   21bb0:	46a4      	mov	ip, r4
}
   21bb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		cb(mgr, cli, state, res);
   21bb6:	4760      	bx	ip
}
   21bb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021bbc <transition_complete>:
{
   21bbc:	b410      	push	{r4}
	__asm__ volatile(
   21bbe:	f04f 0420 	mov.w	r4, #32
   21bc2:	f3ef 8211 	mrs	r2, BASEPRI
   21bc6:	f384 8811 	msr	BASEPRI, r4
   21bca:	f3bf 8f6f 	isb	sy
	mgr->last_res = res;
   21bce:	6141      	str	r1, [r0, #20]
}
   21bd0:	bc10      	pop	{r4}
	process_event(mgr, EVT_COMPLETE, key);
   21bd2:	2101      	movs	r1, #1
   21bd4:	f7e2 bd06 	b.w	45e4 <process_event>

00021bd8 <validate_args>:
{
   21bd8:	b510      	push	{r4, lr}
   21bda:	460c      	mov	r4, r1
	if ((mgr == NULL) || (cli == NULL)) {
   21bdc:	b140      	cbz	r0, 21bf0 <validate_args+0x18>
   21bde:	b139      	cbz	r1, 21bf0 <validate_args+0x18>
	int rv = sys_notify_validate(&cli->notify);
   21be0:	1d08      	adds	r0, r1, #4
   21be2:	f7ff ff5d 	bl	21aa0 <sys_notify_validate>
	if ((rv == 0)
   21be6:	b928      	cbnz	r0, 21bf4 <validate_args+0x1c>
	    && ((cli->notify.flags
   21be8:	68a3      	ldr	r3, [r4, #8]
   21bea:	f033 0303 	bics.w	r3, r3, #3
   21bee:	d001      	beq.n	21bf4 <validate_args+0x1c>
		rv = -EINVAL;
   21bf0:	f06f 0015 	mvn.w	r0, #21
}
   21bf4:	bd10      	pop	{r4, pc}

00021bf6 <onoff_manager_init>:
{
   21bf6:	b538      	push	{r3, r4, r5, lr}
   21bf8:	460c      	mov	r4, r1
	if ((mgr == NULL)
   21bfa:	4605      	mov	r5, r0
   21bfc:	b158      	cbz	r0, 21c16 <onoff_manager_init+0x20>
	    || (transitions == NULL)
   21bfe:	b151      	cbz	r1, 21c16 <onoff_manager_init+0x20>
	    || (transitions->start == NULL)
   21c00:	680b      	ldr	r3, [r1, #0]
   21c02:	b143      	cbz	r3, 21c16 <onoff_manager_init+0x20>
	    || (transitions->stop == NULL)) {
   21c04:	684b      	ldr	r3, [r1, #4]
   21c06:	b133      	cbz	r3, 21c16 <onoff_manager_init+0x20>
	*mgr = (struct onoff_manager)ONOFF_MANAGER_INITIALIZER(transitions);
   21c08:	221c      	movs	r2, #28
   21c0a:	2100      	movs	r1, #0
   21c0c:	f002 fc57 	bl	244be <memset>
   21c10:	612c      	str	r4, [r5, #16]
	return 0;
   21c12:	2000      	movs	r0, #0
}
   21c14:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   21c16:	f06f 0015 	mvn.w	r0, #21
   21c1a:	e7fb      	b.n	21c14 <onoff_manager_init+0x1e>

00021c1c <onoff_request>:

int onoff_request(struct onoff_manager *mgr,
		  struct onoff_client *cli)
{
   21c1c:	b570      	push	{r4, r5, r6, lr}
   21c1e:	4604      	mov	r4, r0
   21c20:	460e      	mov	r6, r1
	bool add_client = false;        /* add client to pending list */
	bool start = false;             /* trigger a start transition */
	bool notify = false;            /* do client notification */
	int rv = validate_args(mgr, cli);
   21c22:	f7ff ffd9 	bl	21bd8 <validate_args>

	if (rv < 0) {
   21c26:	1e05      	subs	r5, r0, #0
   21c28:	db31      	blt.n	21c8e <onoff_request+0x72>
   21c2a:	f04f 0320 	mov.w	r3, #32
   21c2e:	f3ef 8111 	mrs	r1, BASEPRI
   21c32:	f383 8811 	msr	BASEPRI, r3
   21c36:	f3bf 8f6f 	isb	sy

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;

	/* Reject if this would overflow the reference count. */
	if (mgr->refs == SERVICE_REFS_MAX) {
   21c3a:	8b63      	ldrh	r3, [r4, #26]
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21c3c:	8b20      	ldrh	r0, [r4, #24]
	if (mgr->refs == SERVICE_REFS_MAX) {
   21c3e:	f64f 75ff 	movw	r5, #65535	; 0xffff
   21c42:	42ab      	cmp	r3, r5
   21c44:	f000 0207 	and.w	r2, r0, #7
   21c48:	d02e      	beq.n	21ca8 <onoff_request+0x8c>
		rv = -EAGAIN;
		goto out;
	}

	rv = state;
	if (state == ONOFF_STATE_ON) {
   21c4a:	2a02      	cmp	r2, #2
   21c4c:	d10e      	bne.n	21c6c <onoff_request+0x50>
		/* Increment reference count, notify in exit */
		notify = true;
		mgr->refs += 1U;
   21c4e:	3301      	adds	r3, #1
   21c50:	8363      	strh	r3, [r4, #26]
	rv = state;
   21c52:	4615      	mov	r5, r2
		notify = true;
   21c54:	2301      	movs	r3, #1
	__asm__ volatile(
   21c56:	f381 8811 	msr	BASEPRI, r1
   21c5a:	f3bf 8f6f 	isb	sy
	if (start) {
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);

		if (notify) {
   21c5e:	b1b3      	cbz	r3, 21c8e <onoff_request+0x72>
			notify_one(mgr, cli, state, 0);
   21c60:	2300      	movs	r3, #0
   21c62:	4631      	mov	r1, r6
   21c64:	4620      	mov	r0, r4
   21c66:	f7ff ff93 	bl	21b90 <notify_one>
   21c6a:	e010      	b.n	21c8e <onoff_request+0x72>
	} else if ((state == ONOFF_STATE_OFF)
   21c6c:	0783      	lsls	r3, r0, #30
   21c6e:	d001      	beq.n	21c74 <onoff_request+0x58>
		   || (state == ONOFF_STATE_TO_ON)) {
   21c70:	2a06      	cmp	r2, #6
   21c72:	d10e      	bne.n	21c92 <onoff_request+0x76>
	parent->next = child;
   21c74:	2300      	movs	r3, #0
   21c76:	6033      	str	r3, [r6, #0]
	return list->tail;
   21c78:	6863      	ldr	r3, [r4, #4]
Z_GENLIST_APPEND(slist, snode)
   21c7a:	b993      	cbnz	r3, 21ca2 <onoff_request+0x86>
	list->head = node;
   21c7c:	e9c4 6600 	strd	r6, r6, [r4]
	if (start) {
   21c80:	4615      	mov	r5, r2
   21c82:	b962      	cbnz	r2, 21c9e <onoff_request+0x82>
		process_event(mgr, EVT_RECHECK, key);
   21c84:	460a      	mov	r2, r1
   21c86:	4620      	mov	r0, r4
   21c88:	2102      	movs	r1, #2
   21c8a:	f7e2 fcab 	bl	45e4 <process_event>
		}
	}

	return rv;
}
   21c8e:	4628      	mov	r0, r5
   21c90:	bd70      	pop	{r4, r5, r6, pc}
		rv = -EIO;
   21c92:	2a05      	cmp	r2, #5
   21c94:	bf0c      	ite	eq
   21c96:	f06f 0522 	mvneq.w	r5, #34	; 0x22
   21c9a:	f06f 0504 	mvnne.w	r5, #4
   21c9e:	2300      	movs	r3, #0
   21ca0:	e7d9      	b.n	21c56 <onoff_request+0x3a>
	parent->next = child;
   21ca2:	601e      	str	r6, [r3, #0]
	list->tail = node;
   21ca4:	6066      	str	r6, [r4, #4]
}
   21ca6:	e7eb      	b.n	21c80 <onoff_request+0x64>
		rv = -EAGAIN;
   21ca8:	f06f 050a 	mvn.w	r5, #10
   21cac:	e7f7      	b.n	21c9e <onoff_request+0x82>

00021cae <onoff_release>:

int onoff_release(struct onoff_manager *mgr)
{
   21cae:	b510      	push	{r4, lr}
	__asm__ volatile(
   21cb0:	f04f 0320 	mov.w	r3, #32
   21cb4:	f3ef 8211 	mrs	r2, BASEPRI
   21cb8:	f383 8811 	msr	BASEPRI, r3
   21cbc:	f3bf 8f6f 	isb	sy
	bool stop = false;      /* trigger a stop transition */

	k_spinlock_key_t key = k_spin_lock(&mgr->lock);
	uint32_t state = mgr->flags & ONOFF_STATE_MASK;
   21cc0:	8b04      	ldrh	r4, [r0, #24]
   21cc2:	f004 0407 	and.w	r4, r4, #7
	int rv = state;

	if (state != ONOFF_STATE_ON) {
   21cc6:	2c02      	cmp	r4, #2
   21cc8:	d00a      	beq.n	21ce0 <onoff_release+0x32>
		if (state == ONOFF_STATE_ERROR) {
			rv = -EIO;
		} else {
			rv = -ENOTSUP;
   21cca:	2c01      	cmp	r4, #1
   21ccc:	bf0c      	ite	eq
   21cce:	f06f 0004 	mvneq.w	r0, #4
   21cd2:	f06f 0022 	mvnne.w	r0, #34	; 0x22
	__asm__ volatile(
   21cd6:	f382 8811 	msr	BASEPRI, r2
   21cda:	f3bf 8f6f 	isb	sy
		process_event(mgr, EVT_RECHECK, key);
	} else {
		k_spin_unlock(&mgr->lock, key);
	}

	return rv;
   21cde:	e008      	b.n	21cf2 <onoff_release+0x44>
	mgr->refs -= 1U;
   21ce0:	8b43      	ldrh	r3, [r0, #26]
   21ce2:	3b01      	subs	r3, #1
   21ce4:	b29b      	uxth	r3, r3
   21ce6:	8343      	strh	r3, [r0, #26]
	if (stop) {
   21ce8:	b923      	cbnz	r3, 21cf4 <onoff_release+0x46>
		process_event(mgr, EVT_RECHECK, key);
   21cea:	4621      	mov	r1, r4
   21cec:	f7e2 fc7a 	bl	45e4 <process_event>
	int rv = state;
   21cf0:	4620      	mov	r0, r4
}
   21cf2:	bd10      	pop	{r4, pc}
	int rv = state;
   21cf4:	4620      	mov	r0, r4
   21cf6:	e7ee      	b.n	21cd6 <onoff_release+0x28>

00021cf8 <z_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void z_thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   21cf8:	4604      	mov	r4, r0
   21cfa:	b508      	push	{r3, lr}
   21cfc:	4608      	mov	r0, r1
   21cfe:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   21d00:	461a      	mov	r2, r3
   21d02:	47a0      	blx	r4
	return z_impl_k_current_get();
   21d04:	f7fe fba8 	bl	20458 <z_impl_k_current_get>
	z_impl_k_thread_abort(thread);
   21d08:	f7e6 f8ba 	bl	7e80 <z_impl_k_thread_abort>

00021d0c <z_work_q_main>:

#include <kernel.h>
#define WORKQUEUE_THREAD_NAME	"workqueue"

void z_work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   21d0c:	b510      	push	{r4, lr}
   21d0e:	4604      	mov	r4, r0
	return z_impl_k_queue_get(queue, timeout);
   21d10:	f04f 33ff 	mov.w	r3, #4294967295
   21d14:	f04f 32ff 	mov.w	r2, #4294967295
   21d18:	4620      	mov	r0, r4
   21d1a:	f7fd ffe7 	bl	1fcec <z_impl_k_queue_get>
   21d1e:	4603      	mov	r3, r0
	while (true) {
		struct k_work *work;
		k_work_handler_t handler;

		work = k_queue_get(&work_q->queue, K_FOREVER);
		if (work == NULL) {
   21d20:	2800      	cmp	r0, #0
   21d22:	d0f5      	beq.n	21d10 <z_work_q_main+0x4>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   21d24:	3308      	adds	r3, #8
			continue;
		}

		handler = work->handler;
   21d26:	6842      	ldr	r2, [r0, #4]
   21d28:	f3bf 8f5b 	dmb	ish
   21d2c:	e853 1f00 	ldrex	r1, [r3]
   21d30:	f021 0c01 	bic.w	ip, r1, #1
   21d34:	e843 ce00 	strex	lr, ip, [r3]
   21d38:	f1be 0f00 	cmp.w	lr, #0
   21d3c:	d1f6      	bne.n	21d2c <z_work_q_main+0x20>
   21d3e:	f3bf 8f5b 	dmb	ish
		__ASSERT(handler != NULL, "handler must be provided");

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
   21d42:	07cb      	lsls	r3, r1, #31
   21d44:	d500      	bpl.n	21d48 <z_work_q_main+0x3c>
					      K_WORK_STATE_PENDING)) {
			handler(work);
   21d46:	4790      	blx	r2
	z_impl_k_yield();
   21d48:	f7fe fae4 	bl	20314 <z_impl_k_yield>
   21d4c:	e7e0      	b.n	21d10 <z_work_q_main+0x4>

00021d4e <chunk_field>:
				 enum chunk_fields f)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   21d4e:	6883      	ldr	r3, [r0, #8]
	void *cmem = &buf[c];
   21d50:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21d54:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
		return ((uint32_t *)cmem)[f];
   21d58:	bf2c      	ite	cs
   21d5a:	f851 0022 	ldrcs.w	r0, [r1, r2, lsl #2]
	} else {
		return ((uint16_t *)cmem)[f];
   21d5e:	f831 0012 	ldrhcc.w	r0, [r1, r2, lsl #1]
	}
}
   21d62:	4770      	bx	lr

00021d64 <chunk_set>:
			     enum chunk_fields f, chunkid_t val)
{
	CHECK(c <= h->len);

	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];
   21d64:	eb00 01c1 	add.w	r1, r0, r1, lsl #3

	if (big_heap(h)) {
   21d68:	6880      	ldr	r0, [r0, #8]
   21d6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
		CHECK(val == (uint32_t)val);
		((uint32_t *)cmem)[f] = val;
   21d6e:	bf2c      	ite	cs
   21d70:	f841 3022 	strcs.w	r3, [r1, r2, lsl #2]
	} else {
		CHECK(val == (uint16_t)val);
		((uint16_t *)cmem)[f] = val;
   21d74:	f821 3012 	strhcc.w	r3, [r1, r2, lsl #1]
	}
}
   21d78:	4770      	bx	lr

00021d7a <chunk_size>:
{
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
}

static inline size_t chunk_size(struct z_heap *h, chunkid_t c)
{
   21d7a:	b508      	push	{r3, lr}
	return chunk_field(h, c, SIZE_AND_USED) >> 1;
   21d7c:	2201      	movs	r2, #1
   21d7e:	f7ff ffe6 	bl	21d4e <chunk_field>
}
   21d82:	40d0      	lsrs	r0, r2
   21d84:	bd08      	pop	{r3, pc}

00021d86 <set_chunk_used>:
static inline void set_chunk_used(struct z_heap *h, chunkid_t c, bool used)
{
	chunk_unit_t *buf = chunk_buf(h);
	void *cmem = &buf[c];

	if (big_heap(h)) {
   21d86:	6883      	ldr	r3, [r0, #8]
   21d88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
	void *cmem = &buf[c];
   21d8c:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
	if (big_heap(h)) {
   21d90:	d308      	bcc.n	21da4 <set_chunk_used+0x1e>
		if (used) {
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21d92:	684b      	ldr	r3, [r1, #4]
		if (used) {
   21d94:	b11a      	cbz	r2, 21d9e <set_chunk_used+0x18>
			((uint32_t *)cmem)[SIZE_AND_USED] |= 1U;
   21d96:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint32_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21d9a:	604b      	str	r3, [r1, #4]
   21d9c:	4770      	bx	lr
   21d9e:	f023 0301 	bic.w	r3, r3, #1
   21da2:	e7fa      	b.n	21d9a <set_chunk_used+0x14>
		}
	} else {
		if (used) {
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21da4:	884b      	ldrh	r3, [r1, #2]
		if (used) {
   21da6:	b11a      	cbz	r2, 21db0 <set_chunk_used+0x2a>
			((uint16_t *)cmem)[SIZE_AND_USED] |= 1U;
   21da8:	f043 0301 	orr.w	r3, r3, #1
		} else {
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21dac:	804b      	strh	r3, [r1, #2]
		}
	}
}
   21dae:	4770      	bx	lr
			((uint16_t *)cmem)[SIZE_AND_USED] &= ~1U;
   21db0:	f023 0301 	bic.w	r3, r3, #1
   21db4:	e7fa      	b.n	21dac <set_chunk_used+0x26>

00021db6 <set_chunk_size>:
 * when its size is modified, and potential set_chunk_used() is always
 * invoked after set_chunk_size().
 */
static inline void set_chunk_size(struct z_heap *h, chunkid_t c, size_t size)
{
	chunk_set(h, c, SIZE_AND_USED, size << 1);
   21db6:	0053      	lsls	r3, r2, #1
   21db8:	2201      	movs	r2, #1
   21dba:	f7ff bfd3 	b.w	21d64 <chunk_set>

00021dbe <bucket_idx.isra.0>:
	return big_heap(h) && chunk_size(h, c) == 1U;
}

static inline size_t chunk_header_bytes(struct z_heap *h)
{
	return big_heap(h) ? 8 : 4;
   21dbe:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   21dc2:	bf2c      	ite	cs
   21dc4:	2008      	movcs	r0, #8
   21dc6:	2004      	movcc	r0, #4
	return bytes_to_chunksz(h, 1);
}

static inline int bucket_idx(struct z_heap *h, size_t sz)
{
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   21dc8:	3101      	adds	r1, #1
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   21dca:	3008      	adds	r0, #8
	size_t usable_sz = sz - min_chunk_size(h) + 1;
   21dcc:	eba1 00d0 	sub.w	r0, r1, r0, lsr #3
	return 31 - __builtin_clz(usable_sz);
   21dd0:	fab0 f080 	clz	r0, r0
}
   21dd4:	f1c0 001f 	rsb	r0, r0, #31
   21dd8:	4770      	bx	lr

00021dda <free_list_remove_bidx>:

	return ret;
}

static void free_list_remove_bidx(struct z_heap *h, chunkid_t c, int bidx)
{
   21dda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21dde:	4617      	mov	r7, r2
	return chunk_field(h, c, FREE_NEXT);
   21de0:	2203      	movs	r2, #3
   21de2:	460e      	mov	r6, r1
   21de4:	4604      	mov	r4, r0
   21de6:	f7ff ffb2 	bl	21d4e <chunk_field>

	CHECK(!chunk_used(h, c));
	CHECK(b->next != 0);
	CHECK(h->avail_buckets & (1 << bidx));

	if (next_free_chunk(h, c) == c) {
   21dea:	4286      	cmp	r6, r0
   21dec:	4605      	mov	r5, r0
   21dee:	f107 0804 	add.w	r8, r7, #4
   21df2:	d10b      	bne.n	21e0c <free_list_remove_bidx+0x32>
		/* this is the last chunk */
		h->avail_buckets &= ~(1 << bidx);
   21df4:	2301      	movs	r3, #1
   21df6:	fa03 f707 	lsl.w	r7, r3, r7
   21dfa:	68e3      	ldr	r3, [r4, #12]
   21dfc:	ea23 0307 	bic.w	r3, r3, r7
   21e00:	60e3      	str	r3, [r4, #12]
		b->next = 0;
   21e02:	2300      	movs	r3, #0
   21e04:	f844 3028 	str.w	r3, [r4, r8, lsl #2]

		b->next = second;
		set_next_free_chunk(h, first, second);
		set_prev_free_chunk(h, second, first);
	}
}
   21e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return chunk_field(h, c, FREE_PREV);
   21e0c:	4631      	mov	r1, r6
   21e0e:	2202      	movs	r2, #2
   21e10:	4620      	mov	r0, r4
   21e12:	f7ff ff9c 	bl	21d4e <chunk_field>
	chunk_set(h, c, FREE_NEXT, next);
   21e16:	462b      	mov	r3, r5
	return chunk_field(h, c, FREE_PREV);
   21e18:	4606      	mov	r6, r0
	chunk_set(h, c, FREE_NEXT, next);
   21e1a:	4601      	mov	r1, r0
		b->next = second;
   21e1c:	f844 5028 	str.w	r5, [r4, r8, lsl #2]
   21e20:	4620      	mov	r0, r4
   21e22:	2203      	movs	r2, #3
   21e24:	f7ff ff9e 	bl	21d64 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21e28:	4633      	mov	r3, r6
   21e2a:	4629      	mov	r1, r5
   21e2c:	4620      	mov	r0, r4
   21e2e:	2202      	movs	r2, #2
}
   21e30:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21e34:	f7ff bf96 	b.w	21d64 <chunk_set>

00021e38 <free_list_remove>:

static void free_list_remove(struct z_heap *h, chunkid_t c)
{
   21e38:	b570      	push	{r4, r5, r6, lr}
	return big_heap_chunks(h->len);
   21e3a:	6886      	ldr	r6, [r0, #8]
   21e3c:	460d      	mov	r5, r1
   21e3e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   21e40:	f7ff ff9b 	bl	21d7a <chunk_size>
   21e44:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21e48:	4601      	mov	r1, r0
   21e4a:	d301      	bcc.n	21e50 <free_list_remove+0x18>
	if (!solo_free_header(h, c)) {
   21e4c:	2801      	cmp	r0, #1
   21e4e:	d009      	beq.n	21e64 <free_list_remove+0x2c>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21e50:	4630      	mov	r0, r6
   21e52:	f7ff ffb4 	bl	21dbe <bucket_idx.isra.0>
		free_list_remove_bidx(h, c, bidx);
   21e56:	4629      	mov	r1, r5
		int bidx = bucket_idx(h, chunk_size(h, c));
   21e58:	4602      	mov	r2, r0
		free_list_remove_bidx(h, c, bidx);
   21e5a:	4620      	mov	r0, r4
	}
}
   21e5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		free_list_remove_bidx(h, c, bidx);
   21e60:	f7ff bfbb 	b.w	21dda <free_list_remove_bidx>
}
   21e64:	bd70      	pop	{r4, r5, r6, pc}

00021e66 <alloc_chunk>:
	free_chunk(h, c);
}

static chunkid_t alloc_chunk(struct z_heap *h, size_t sz)
{
	int bi = bucket_idx(h, sz);
   21e66:	6883      	ldr	r3, [r0, #8]
{
   21e68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   21e6c:	4604      	mov	r4, r0
	int bi = bucket_idx(h, sz);
   21e6e:	4618      	mov	r0, r3
{
   21e70:	4688      	mov	r8, r1
	int bi = bucket_idx(h, sz);
   21e72:	f7ff ffa4 	bl	21dbe <bucket_idx.isra.0>
	struct z_heap_bucket *b = &h->buckets[bi];

	if (bi > bucket_idx(h, h->len)) {
   21e76:	4619      	mov	r1, r3
	int bi = bucket_idx(h, sz);
   21e78:	4605      	mov	r5, r0
	if (bi > bucket_idx(h, h->len)) {
   21e7a:	4618      	mov	r0, r3
   21e7c:	f7ff ff9f 	bl	21dbe <bucket_idx.isra.0>
   21e80:	42a8      	cmp	r0, r5
   21e82:	da03      	bge.n	21e8c <alloc_chunk+0x26>
		return 0;
   21e84:	2600      	movs	r6, #0
		CHECK(chunk_size(h, c) >= sz);
		return c;
	}

	return 0;
}
   21e86:	4630      	mov	r0, r6
   21e88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (b->next) {
   21e8c:	eb04 0a85 	add.w	sl, r4, r5, lsl #2
   21e90:	f8da 9010 	ldr.w	r9, [sl, #16]
   21e94:	f1b9 0f00 	cmp.w	r9, #0
   21e98:	d019      	beq.n	21ece <alloc_chunk+0x68>
   21e9a:	2703      	movs	r7, #3
			chunkid_t c = b->next;
   21e9c:	f8da 6010 	ldr.w	r6, [sl, #16]
			if (chunk_size(h, c) >= sz) {
   21ea0:	4620      	mov	r0, r4
   21ea2:	4631      	mov	r1, r6
   21ea4:	f7ff ff69 	bl	21d7a <chunk_size>
   21ea8:	4540      	cmp	r0, r8
   21eaa:	d305      	bcc.n	21eb8 <alloc_chunk+0x52>
				free_list_remove_bidx(h, c, bi);
   21eac:	462a      	mov	r2, r5
		free_list_remove_bidx(h, c, minbucket);
   21eae:	4631      	mov	r1, r6
   21eb0:	4620      	mov	r0, r4
   21eb2:	f7ff ff92 	bl	21dda <free_list_remove_bidx>
		return c;
   21eb6:	e7e6      	b.n	21e86 <alloc_chunk+0x20>
	return chunk_field(h, c, FREE_NEXT);
   21eb8:	2203      	movs	r2, #3
   21eba:	4631      	mov	r1, r6
   21ebc:	4620      	mov	r0, r4
   21ebe:	f7ff ff46 	bl	21d4e <chunk_field>
		} while (--i && b->next != first);
   21ec2:	3f01      	subs	r7, #1
			b->next = next_free_chunk(h, c);
   21ec4:	f8ca 0010 	str.w	r0, [sl, #16]
		} while (--i && b->next != first);
   21ec8:	d001      	beq.n	21ece <alloc_chunk+0x68>
   21eca:	4581      	cmp	r9, r0
   21ecc:	d1e6      	bne.n	21e9c <alloc_chunk+0x36>
	size_t bmask = h->avail_buckets & ~((1 << (bi + 1)) - 1);
   21ece:	68e3      	ldr	r3, [r4, #12]
   21ed0:	3501      	adds	r5, #1
   21ed2:	f04f 32ff 	mov.w	r2, #4294967295
   21ed6:	40aa      	lsls	r2, r5
	if ((bmask & h->avail_buckets) != 0U) {
   21ed8:	401a      	ands	r2, r3
   21eda:	d0d3      	beq.n	21e84 <alloc_chunk+0x1e>
		int minbucket = __builtin_ctz(bmask & h->avail_buckets);
   21edc:	fa92 f2a2 	rbit	r2, r2
   21ee0:	fab2 f282 	clz	r2, r2
		chunkid_t c = h->buckets[minbucket].next;
   21ee4:	1d13      	adds	r3, r2, #4
   21ee6:	f854 6023 	ldr.w	r6, [r4, r3, lsl #2]
   21eea:	e7e0      	b.n	21eae <alloc_chunk+0x48>

00021eec <split_chunks>:
{
   21eec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21ef0:	4614      	mov	r4, r2
   21ef2:	4605      	mov	r5, r0
   21ef4:	460e      	mov	r6, r1
	size_t sz0 = chunk_size(h, lc);
   21ef6:	f7ff ff40 	bl	21d7a <chunk_size>
	size_t lsz = rc - lc;
   21efa:	eba4 0806 	sub.w	r8, r4, r6
	size_t rsz = sz0 - lsz;
   21efe:	1b37      	subs	r7, r6, r4
   21f00:	4407      	add	r7, r0
	set_chunk_size(h, lc, lsz);
   21f02:	4642      	mov	r2, r8
   21f04:	4631      	mov	r1, r6
   21f06:	4628      	mov	r0, r5
   21f08:	f7ff ff55 	bl	21db6 <set_chunk_size>
	set_chunk_size(h, rc, rsz);
   21f0c:	463a      	mov	r2, r7
   21f0e:	4621      	mov	r1, r4
   21f10:	4628      	mov	r0, r5
   21f12:	f7ff ff50 	bl	21db6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21f16:	4643      	mov	r3, r8
   21f18:	2200      	movs	r2, #0
   21f1a:	4621      	mov	r1, r4
   21f1c:	4628      	mov	r0, r5
   21f1e:	f7ff ff21 	bl	21d64 <chunk_set>
	return c + chunk_size(h, c);
   21f22:	4621      	mov	r1, r4
   21f24:	4628      	mov	r0, r5
   21f26:	f7ff ff28 	bl	21d7a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21f2a:	463b      	mov	r3, r7
   21f2c:	1821      	adds	r1, r4, r0
   21f2e:	2200      	movs	r2, #0
   21f30:	4628      	mov	r0, r5
}
   21f32:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21f36:	f7ff bf15 	b.w	21d64 <chunk_set>

00021f3a <merge_chunks>:
{
   21f3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21f3e:	4616      	mov	r6, r2
   21f40:	4604      	mov	r4, r0
   21f42:	460f      	mov	r7, r1
	size_t newsz = chunk_size(h, lc) + chunk_size(h, rc);
   21f44:	f7ff ff19 	bl	21d7a <chunk_size>
   21f48:	4631      	mov	r1, r6
   21f4a:	4605      	mov	r5, r0
   21f4c:	4620      	mov	r0, r4
   21f4e:	f7ff ff14 	bl	21d7a <chunk_size>
   21f52:	4405      	add	r5, r0
	set_chunk_size(h, lc, newsz);
   21f54:	462a      	mov	r2, r5
   21f56:	4639      	mov	r1, r7
   21f58:	4620      	mov	r0, r4
   21f5a:	f7ff ff2c 	bl	21db6 <set_chunk_size>
	return c + chunk_size(h, c);
   21f5e:	4631      	mov	r1, r6
   21f60:	4620      	mov	r0, r4
   21f62:	f7ff ff0a 	bl	21d7a <chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   21f66:	462b      	mov	r3, r5
   21f68:	1831      	adds	r1, r6, r0
   21f6a:	2200      	movs	r2, #0
   21f6c:	4620      	mov	r0, r4
}
   21f6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21f72:	f7ff bef7 	b.w	21d64 <chunk_set>

00021f76 <free_list_add>:
{
   21f76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return big_heap_chunks(h->len);
   21f7a:	6886      	ldr	r6, [r0, #8]
   21f7c:	460d      	mov	r5, r1
   21f7e:	4604      	mov	r4, r0
	return big_heap(h) && chunk_size(h, c) == 1U;
   21f80:	f7ff fefb 	bl	21d7a <chunk_size>
   21f84:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   21f88:	4601      	mov	r1, r0
   21f8a:	d301      	bcc.n	21f90 <free_list_add+0x1a>
	if (!solo_free_header(h, c)) {
   21f8c:	2801      	cmp	r0, #1
   21f8e:	d033      	beq.n	21ff8 <free_list_add+0x82>
		int bidx = bucket_idx(h, chunk_size(h, c));
   21f90:	4630      	mov	r0, r6
   21f92:	f7ff ff14 	bl	21dbe <bucket_idx.isra.0>
	if (b->next == 0U) {
   21f96:	eb04 0280 	add.w	r2, r4, r0, lsl #2
   21f9a:	6916      	ldr	r6, [r2, #16]
   21f9c:	b99e      	cbnz	r6, 21fc6 <free_list_add+0x50>
		h->avail_buckets |= (1 << bidx);
   21f9e:	2301      	movs	r3, #1
   21fa0:	fa03 f000 	lsl.w	r0, r3, r0
   21fa4:	68e3      	ldr	r3, [r4, #12]
   21fa6:	4303      	orrs	r3, r0
   21fa8:	60e3      	str	r3, [r4, #12]
	chunk_set(h, c, FREE_PREV, prev);
   21faa:	4629      	mov	r1, r5
		b->next = c;
   21fac:	6115      	str	r5, [r2, #16]
   21fae:	462b      	mov	r3, r5
   21fb0:	2202      	movs	r2, #2
   21fb2:	4620      	mov	r0, r4
   21fb4:	f7ff fed6 	bl	21d64 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   21fb8:	2203      	movs	r2, #3
   21fba:	4629      	mov	r1, r5
	chunk_set(h, c, FREE_PREV, prev);
   21fbc:	4620      	mov	r0, r4
}
   21fbe:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   21fc2:	f7ff becf 	b.w	21d64 <chunk_set>
	return chunk_field(h, c, FREE_PREV);
   21fc6:	2202      	movs	r2, #2
   21fc8:	4631      	mov	r1, r6
   21fca:	4620      	mov	r0, r4
   21fcc:	f7ff febf 	bl	21d4e <chunk_field>
	chunk_set(h, c, FREE_PREV, prev);
   21fd0:	4629      	mov	r1, r5
   21fd2:	4603      	mov	r3, r0
	return chunk_field(h, c, FREE_PREV);
   21fd4:	4607      	mov	r7, r0
	chunk_set(h, c, FREE_PREV, prev);
   21fd6:	4620      	mov	r0, r4
   21fd8:	f7ff fec4 	bl	21d64 <chunk_set>
	chunk_set(h, c, FREE_NEXT, next);
   21fdc:	2203      	movs	r2, #3
   21fde:	4633      	mov	r3, r6
   21fe0:	4629      	mov	r1, r5
   21fe2:	4620      	mov	r0, r4
   21fe4:	f7ff febe 	bl	21d64 <chunk_set>
   21fe8:	4639      	mov	r1, r7
   21fea:	462b      	mov	r3, r5
   21fec:	4620      	mov	r0, r4
   21fee:	f7ff feb9 	bl	21d64 <chunk_set>
	chunk_set(h, c, FREE_PREV, prev);
   21ff2:	2202      	movs	r2, #2
   21ff4:	4631      	mov	r1, r6
   21ff6:	e7e1      	b.n	21fbc <free_list_add+0x46>
   21ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00021ffc <free_chunk>:
{
   21ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   21ffe:	460c      	mov	r4, r1
   22000:	4605      	mov	r5, r0
	return c + chunk_size(h, c);
   22002:	f7ff feba 	bl	21d7a <chunk_size>
   22006:	1826      	adds	r6, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   22008:	2201      	movs	r2, #1
   2200a:	4631      	mov	r1, r6
   2200c:	4628      	mov	r0, r5
   2200e:	f7ff fe9e 	bl	21d4e <chunk_field>
	if (!chunk_used(h, right_chunk(h, c))) {
   22012:	07c3      	lsls	r3, r0, #31
   22014:	d40c      	bmi.n	22030 <free_chunk+0x34>
		free_list_remove(h, right_chunk(h, c));
   22016:	4631      	mov	r1, r6
   22018:	4628      	mov	r0, r5
   2201a:	f7ff ff0d 	bl	21e38 <free_list_remove>
	return c + chunk_size(h, c);
   2201e:	4621      	mov	r1, r4
   22020:	4628      	mov	r0, r5
   22022:	f7ff feaa 	bl	21d7a <chunk_size>
		merge_chunks(h, c, right_chunk(h, c));
   22026:	4621      	mov	r1, r4
   22028:	1822      	adds	r2, r4, r0
   2202a:	4628      	mov	r0, r5
   2202c:	f7ff ff85 	bl	21f3a <merge_chunks>
	return c - chunk_field(h, c, LEFT_SIZE);
   22030:	2200      	movs	r2, #0
   22032:	4621      	mov	r1, r4
   22034:	4628      	mov	r0, r5
   22036:	f7ff fe8a 	bl	21d4e <chunk_field>
   2203a:	1a27      	subs	r7, r4, r0
	return chunk_field(h, c, SIZE_AND_USED) & 1U;
   2203c:	2201      	movs	r2, #1
   2203e:	4639      	mov	r1, r7
   22040:	4628      	mov	r0, r5
   22042:	f7ff fe84 	bl	21d4e <chunk_field>
	if (!chunk_used(h, left_chunk(h, c))) {
   22046:	ea10 0602 	ands.w	r6, r0, r2
   2204a:	d113      	bne.n	22074 <free_chunk+0x78>
		free_list_remove(h, left_chunk(h, c));
   2204c:	4639      	mov	r1, r7
   2204e:	4628      	mov	r0, r5
   22050:	f7ff fef2 	bl	21e38 <free_list_remove>
	return c - chunk_field(h, c, LEFT_SIZE);
   22054:	4621      	mov	r1, r4
   22056:	4632      	mov	r2, r6
   22058:	4628      	mov	r0, r5
   2205a:	f7ff fe78 	bl	21d4e <chunk_field>
		merge_chunks(h, left_chunk(h, c), c);
   2205e:	4622      	mov	r2, r4
   22060:	1a21      	subs	r1, r4, r0
   22062:	4628      	mov	r0, r5
   22064:	f7ff ff69 	bl	21f3a <merge_chunks>
   22068:	4621      	mov	r1, r4
   2206a:	4632      	mov	r2, r6
   2206c:	4628      	mov	r0, r5
   2206e:	f7ff fe6e 	bl	21d4e <chunk_field>
   22072:	1a24      	subs	r4, r4, r0
	free_list_add(h, c);
   22074:	4621      	mov	r1, r4
   22076:	4628      	mov	r0, r5
}
   22078:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, c);
   2207c:	f7ff bf7b 	b.w	21f76 <free_list_add>

00022080 <sys_heap_free>:
{
   22080:	b510      	push	{r4, lr}
	if (mem == NULL) {
   22082:	b191      	cbz	r1, 220aa <sys_heap_free+0x2a>
   22084:	6800      	ldr	r0, [r0, #0]
	return big_heap(h) ? 8 : 4;
   22086:	6883      	ldr	r3, [r0, #8]
   22088:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2208c:	bf2c      	ite	cs
   2208e:	2408      	movcs	r4, #8
   22090:	2404      	movcc	r4, #4
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   22092:	1b0c      	subs	r4, r1, r4
   22094:	1a24      	subs	r4, r4, r0
   22096:	08e4      	lsrs	r4, r4, #3
	set_chunk_used(h, c, false);
   22098:	4621      	mov	r1, r4
   2209a:	2200      	movs	r2, #0
   2209c:	f7ff fe73 	bl	21d86 <set_chunk_used>
	free_chunk(h, c);
   220a0:	4621      	mov	r1, r4
}
   220a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	free_chunk(h, c);
   220a6:	f7ff bfa9 	b.w	21ffc <free_chunk>
}
   220aa:	bd10      	pop	{r4, pc}

000220ac <sys_heap_alloc>:

void *sys_heap_alloc(struct sys_heap *heap, size_t bytes)
{
   220ac:	b570      	push	{r4, r5, r6, lr}
	struct z_heap *h = heap->heap;
   220ae:	6806      	ldr	r6, [r0, #0]

	if (bytes == 0U || size_too_big(h, bytes)) {
   220b0:	b909      	cbnz	r1, 220b6 <sys_heap_alloc+0xa>
		return NULL;
   220b2:	2000      	movs	r0, #0
		free_list_add(h, c + chunk_sz);
	}

	set_chunk_used(h, c, true);
	return chunk_mem(h, c);
}
   220b4:	bd70      	pop	{r4, r5, r6, pc}
	/*
	 * Quick check to bail out early if size is too big.
	 * Also guards against potential arithmetic overflows elsewhere.
	 * There is a minimum of one chunk always in use by the heap header.
	 */
	return (bytes / CHUNK_UNIT) >= h->len;
   220b6:	68b3      	ldr	r3, [r6, #8]
	if (bytes == 0U || size_too_big(h, bytes)) {
   220b8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
   220bc:	d9f9      	bls.n	220b2 <sys_heap_alloc+0x6>
	return big_heap(h) ? 8 : 4;
   220be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   220c2:	bf2c      	ite	cs
   220c4:	2208      	movcs	r2, #8
   220c6:	2204      	movcc	r2, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   220c8:	1dcc      	adds	r4, r1, #7
   220ca:	4414      	add	r4, r2
   220cc:	08e4      	lsrs	r4, r4, #3
	chunkid_t c = alloc_chunk(h, chunk_sz);
   220ce:	4621      	mov	r1, r4
   220d0:	4630      	mov	r0, r6
   220d2:	f7ff fec8 	bl	21e66 <alloc_chunk>
	if (c == 0U) {
   220d6:	4605      	mov	r5, r0
   220d8:	2800      	cmp	r0, #0
   220da:	d0ea      	beq.n	220b2 <sys_heap_alloc+0x6>
	if (chunk_size(h, c) > chunk_sz) {
   220dc:	4601      	mov	r1, r0
   220de:	4630      	mov	r0, r6
   220e0:	f7ff fe4b 	bl	21d7a <chunk_size>
   220e4:	42a0      	cmp	r0, r4
   220e6:	d909      	bls.n	220fc <sys_heap_alloc+0x50>
		split_chunks(h, c, c + chunk_sz);
   220e8:	442c      	add	r4, r5
   220ea:	4629      	mov	r1, r5
   220ec:	4630      	mov	r0, r6
   220ee:	4622      	mov	r2, r4
   220f0:	f7ff fefc 	bl	21eec <split_chunks>
		free_list_add(h, c + chunk_sz);
   220f4:	4621      	mov	r1, r4
   220f6:	4630      	mov	r0, r6
   220f8:	f7ff ff3d 	bl	21f76 <free_list_add>
	set_chunk_used(h, c, true);
   220fc:	4629      	mov	r1, r5
   220fe:	4630      	mov	r0, r6
   22100:	2201      	movs	r2, #1
   22102:	f7ff fe40 	bl	21d86 <set_chunk_used>
	return big_heap(h) ? 8 : 4;
   22106:	68b3      	ldr	r3, [r6, #8]
   22108:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2210c:	bf2c      	ite	cs
   2210e:	2308      	movcs	r3, #8
   22110:	2304      	movcc	r3, #4
	uint8_t *ret = ((uint8_t *)&buf[c]) + chunk_header_bytes(h);
   22112:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
   22116:	4428      	add	r0, r5
	return chunk_mem(h, c);
   22118:	e7cc      	b.n	220b4 <sys_heap_alloc+0x8>

0002211a <sys_heap_aligned_alloc>:

void *sys_heap_aligned_alloc(struct sys_heap *heap, size_t align, size_t bytes)
{
   2211a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_heap *h = heap->heap;
   2211e:	6806      	ldr	r6, [r0, #0]
{
   22120:	4614      	mov	r4, r2
	 * We allow for one bit of rewind in addition to the alignment
	 * value to efficiently accommodate z_heap_aligned_alloc().
	 * So if e.g. align = 0x28 (32 | 8) this means we align to a 32-byte
	 * boundary and then rewind 8 bytes.
	 */
	rewind = align & -align;
   22122:	424a      	negs	r2, r1
   22124:	ea02 0701 	and.w	r7, r2, r1
	if (align != rewind) {
   22128:	ea31 0202 	bics.w	r2, r1, r2
	return big_heap_chunks(h->len);
   2212c:	68b5      	ldr	r5, [r6, #8]
{
   2212e:	460b      	mov	r3, r1
	if (align != rewind) {
   22130:	d00f      	beq.n	22152 <sys_heap_aligned_alloc+0x38>
	return big_heap(h) ? 8 : 4;
   22132:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   22136:	bf34      	ite	cc
   22138:	2104      	movcc	r1, #4
   2213a:	2108      	movcs	r1, #8
   2213c:	42b9      	cmp	r1, r7
   2213e:	460a      	mov	r2, r1
   22140:	46b9      	mov	r9, r7
   22142:	bf28      	it	cs
   22144:	463a      	movcs	r2, r7
		align -= rewind;
   22146:	1bdf      	subs	r7, r3, r7
		rewind = 0;
		gap = chunk_header_bytes(h);
	}
	__ASSERT((align & (align - 1)) == 0, "align must be a power of 2");

	if (bytes == 0 || size_too_big(h, bytes)) {
   22148:	b994      	cbnz	r4, 22170 <sys_heap_aligned_alloc+0x56>
		return NULL;
   2214a:	2500      	movs	r5, #0
		free_list_add(h, c_end);
	}

	set_chunk_used(h, c, true);
	return mem;
}
   2214c:	4628      	mov	r0, r5
   2214e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   22152:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   22156:	bf34      	ite	cc
   22158:	2204      	movcc	r2, #4
   2215a:	2208      	movcs	r2, #8
		if (align <= chunk_header_bytes(h)) {
   2215c:	4291      	cmp	r1, r2
   2215e:	d804      	bhi.n	2216a <sys_heap_aligned_alloc+0x50>
			return sys_heap_alloc(heap, bytes);
   22160:	4621      	mov	r1, r4
}
   22162:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
			return sys_heap_alloc(heap, bytes);
   22166:	f7ff bfa1 	b.w	220ac <sys_heap_alloc>
		rewind = 0;
   2216a:	f04f 0900 	mov.w	r9, #0
   2216e:	e7eb      	b.n	22148 <sys_heap_aligned_alloc+0x2e>
	if (bytes == 0 || size_too_big(h, bytes)) {
   22170:	ebb5 0fd4 	cmp.w	r5, r4, lsr #3
   22174:	d9e9      	bls.n	2214a <sys_heap_aligned_alloc+0x30>
	padded_sz = bytes_to_chunksz(h, bytes + align - gap);
   22176:	1de1      	adds	r1, r4, #7
   22178:	f5b5 4f00 	cmp.w	r5, #32768	; 0x8000
   2217c:	4439      	add	r1, r7
   2217e:	bf2c      	ite	cs
   22180:	2308      	movcs	r3, #8
   22182:	2304      	movcc	r3, #4
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22184:	1a89      	subs	r1, r1, r2
   22186:	4419      	add	r1, r3
	chunkid_t c0 = alloc_chunk(h, padded_sz);
   22188:	08c9      	lsrs	r1, r1, #3
   2218a:	4630      	mov	r0, r6
   2218c:	f7ff fe6b 	bl	21e66 <alloc_chunk>
	if (c0 == 0) {
   22190:	4680      	mov	r8, r0
   22192:	2800      	cmp	r0, #0
   22194:	d0d9      	beq.n	2214a <sys_heap_aligned_alloc+0x30>
	return big_heap(h) ? 8 : 4;
   22196:	68b3      	ldr	r3, [r6, #8]
   22198:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   2219c:	bf2c      	ite	cs
   2219e:	2308      	movcs	r3, #8
   221a0:	2304      	movcc	r3, #4
	mem = (uint8_t *) ROUND_UP(mem + rewind, align) - rewind;
   221a2:	eb09 05c0 	add.w	r5, r9, r0, lsl #3
   221a6:	441d      	add	r5, r3
   221a8:	1e7a      	subs	r2, r7, #1
   221aa:	4435      	add	r5, r6
   221ac:	427f      	negs	r7, r7
   221ae:	4415      	add	r5, r2
   221b0:	403d      	ands	r5, r7
   221b2:	eba5 0509 	sub.w	r5, r5, r9
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   221b6:	442c      	add	r4, r5
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   221b8:	1aeb      	subs	r3, r5, r3
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   221ba:	3407      	adds	r4, #7
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   221bc:	1b9b      	subs	r3, r3, r6
	chunk_unit_t *end = (chunk_unit_t *) ROUND_UP(mem + bytes, CHUNK_UNIT);
   221be:	f024 0407 	bic.w	r4, r4, #7
	chunkid_t c_end = end - chunk_buf(h);
   221c2:	1ba4      	subs	r4, r4, r6
	if (c > c0) {
   221c4:	ebb0 0fd3 	cmp.w	r0, r3, lsr #3
	return (mem - chunk_header_bytes(h) - base) / CHUNK_UNIT;
   221c8:	ea4f 07d3 	mov.w	r7, r3, lsr #3
	chunkid_t c_end = end - chunk_buf(h);
   221cc:	ea4f 04e4 	mov.w	r4, r4, asr #3
	if (c > c0) {
   221d0:	d208      	bcs.n	221e4 <sys_heap_aligned_alloc+0xca>
		split_chunks(h, c0, c);
   221d2:	4601      	mov	r1, r0
   221d4:	463a      	mov	r2, r7
   221d6:	4630      	mov	r0, r6
   221d8:	f7ff fe88 	bl	21eec <split_chunks>
		free_list_add(h, c0);
   221dc:	4641      	mov	r1, r8
   221de:	4630      	mov	r0, r6
   221e0:	f7ff fec9 	bl	21f76 <free_list_add>
	return c + chunk_size(h, c);
   221e4:	4639      	mov	r1, r7
   221e6:	4630      	mov	r0, r6
   221e8:	f7ff fdc7 	bl	21d7a <chunk_size>
   221ec:	4438      	add	r0, r7
	if (right_chunk(h, c) > c_end) {
   221ee:	4284      	cmp	r4, r0
   221f0:	d208      	bcs.n	22204 <sys_heap_aligned_alloc+0xea>
		split_chunks(h, c, c_end);
   221f2:	4639      	mov	r1, r7
   221f4:	4630      	mov	r0, r6
   221f6:	4622      	mov	r2, r4
   221f8:	f7ff fe78 	bl	21eec <split_chunks>
		free_list_add(h, c_end);
   221fc:	4621      	mov	r1, r4
   221fe:	4630      	mov	r0, r6
   22200:	f7ff feb9 	bl	21f76 <free_list_add>
	set_chunk_used(h, c, true);
   22204:	2201      	movs	r2, #1
   22206:	4639      	mov	r1, r7
   22208:	4630      	mov	r0, r6
   2220a:	f7ff fdbc 	bl	21d86 <set_chunk_used>
	return mem;
   2220e:	e79d      	b.n	2214c <sys_heap_aligned_alloc+0x32>

00022210 <sys_heap_init>:
	return big_heap_bytes(size) ? 8 : 4;
   22210:	f5b2 2f80 	cmp.w	r2, #262144	; 0x40000
	}
	return ptr2;
}

void sys_heap_init(struct sys_heap *heap, void *mem, size_t bytes)
{
   22214:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22216:	bf2c      	ite	cs
   22218:	2408      	movcs	r4, #8
   2221a:	2404      	movcc	r4, #4
	/* Must fit in a 31 bit count of HUNK_UNIT */
	__ASSERT(bytes / CHUNK_UNIT <= 0x7fffffffU, "heap size is too big");

	/* Reserve the final marker chunk's header */
	__ASSERT(bytes > heap_footer_bytes(bytes), "heap size is too small");
	bytes -= heap_footer_bytes(bytes);
   2221c:	1b14      	subs	r4, r2, r4

	/* Round the start up, the end down */
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   2221e:	1dce      	adds	r6, r1, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   22220:	440c      	add	r4, r1
	uintptr_t addr = ROUND_UP(mem, CHUNK_UNIT);
   22222:	f026 0607 	bic.w	r6, r6, #7
	uintptr_t end = ROUND_DOWN((uint8_t *)mem + bytes, CHUNK_UNIT);
   22226:	f024 0407 	bic.w	r4, r4, #7
	CHECK(end > addr);
	__ASSERT(buf_sz > chunksz(sizeof(struct z_heap)), "heap size is too small");

	struct z_heap *h = (struct z_heap *)addr;
	heap->heap = h;
	h->chunk0_hdr_area = 0;
   2222a:	2200      	movs	r2, #0
   2222c:	2300      	movs	r3, #0
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   2222e:	1ba4      	subs	r4, r4, r6
	heap->heap = h;
   22230:	6006      	str	r6, [r0, #0]
	size_t buf_sz = (end - addr) / CHUNK_UNIT;
   22232:	08e4      	lsrs	r4, r4, #3
	h->chunk0_hdr_area = 0;
   22234:	e9c6 2300 	strd	r2, r3, [r6]
	h->len = buf_sz;
	h->avail_buckets = 0;
   22238:	2300      	movs	r3, #0

	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   2223a:	4621      	mov	r1, r4
	h->len = buf_sz;
   2223c:	60b4      	str	r4, [r6, #8]
	h->avail_buckets = 0;
   2223e:	60f3      	str	r3, [r6, #12]
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   22240:	4620      	mov	r0, r4
   22242:	f7ff fdbc 	bl	21dbe <bucket_idx.isra.0>
	size_t chunk0_size = chunksz(sizeof(struct z_heap) +
   22246:	0085      	lsls	r5, r0, #2
	return (bytes + CHUNK_UNIT - 1U) / CHUNK_UNIT;
   22248:	351b      	adds	r5, #27
	int nb_buckets = bucket_idx(h, buf_sz) + 1;
   2224a:	1c41      	adds	r1, r0, #1
   2224c:	08ed      	lsrs	r5, r5, #3
				     nb_buckets * sizeof(struct z_heap_bucket));

	__ASSERT(chunk0_size + min_chunk_size(h) < buf_sz, "heap size is too small");

	for (int i = 0; i < nb_buckets; i++) {
   2224e:	f106 0210 	add.w	r2, r6, #16
		h->buckets[i].next = 0;
   22252:	4618      	mov	r0, r3
	for (int i = 0; i < nb_buckets; i++) {
   22254:	428b      	cmp	r3, r1
   22256:	db28      	blt.n	222aa <sys_heap_init+0x9a>
	}

	/* chunk containing our struct z_heap */
	set_chunk_size(h, 0, chunk0_size);
   22258:	462a      	mov	r2, r5
   2225a:	4630      	mov	r0, r6
   2225c:	2100      	movs	r1, #0
   2225e:	f7ff fdaa 	bl	21db6 <set_chunk_size>
	set_chunk_used(h, 0, true);

	/* chunk containing the free heap */
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   22262:	1b67      	subs	r7, r4, r5
	set_chunk_used(h, 0, true);
   22264:	4630      	mov	r0, r6
   22266:	2201      	movs	r2, #1
   22268:	2100      	movs	r1, #0
   2226a:	f7ff fd8c 	bl	21d86 <set_chunk_used>
	set_chunk_size(h, chunk0_size, buf_sz - chunk0_size);
   2226e:	463a      	mov	r2, r7
   22270:	4629      	mov	r1, r5
   22272:	f7ff fda0 	bl	21db6 <set_chunk_size>
	chunk_set(h, c, LEFT_SIZE, size);
   22276:	462b      	mov	r3, r5
   22278:	2200      	movs	r2, #0
   2227a:	4629      	mov	r1, r5
   2227c:	4630      	mov	r0, r6
   2227e:	f7ff fd71 	bl	21d64 <chunk_set>
	set_left_chunk_size(h, chunk0_size, chunk0_size);

	/* the end marker chunk */
	set_chunk_size(h, buf_sz, 0);
   22282:	4621      	mov	r1, r4
   22284:	4630      	mov	r0, r6
   22286:	f7ff fd96 	bl	21db6 <set_chunk_size>
   2228a:	463b      	mov	r3, r7
   2228c:	4621      	mov	r1, r4
   2228e:	4630      	mov	r0, r6
   22290:	2200      	movs	r2, #0
   22292:	f7ff fd67 	bl	21d64 <chunk_set>
	set_left_chunk_size(h, buf_sz, buf_sz - chunk0_size);
	set_chunk_used(h, buf_sz, true);
   22296:	4621      	mov	r1, r4
   22298:	4630      	mov	r0, r6
   2229a:	2201      	movs	r2, #1
   2229c:	f7ff fd73 	bl	21d86 <set_chunk_used>

	free_list_add(h, chunk0_size);
   222a0:	4629      	mov	r1, r5
}
   222a2:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	free_list_add(h, chunk0_size);
   222a6:	f7ff be66 	b.w	21f76 <free_list_add>
		h->buckets[i].next = 0;
   222aa:	f842 0b04 	str.w	r0, [r2], #4
	for (int i = 0; i < nb_buckets; i++) {
   222ae:	3301      	adds	r3, #1
   222b0:	e7d0      	b.n	22254 <sys_heap_init+0x44>

000222b2 <_ldiv5>:
	uint32_t v_lo = *v;
   222b2:	e9d0 2100 	ldrd	r2, r1, [r0]
{
   222b6:	b530      	push	{r4, r5, lr}
	__asm__ ("" : "+r" (m));
   222b8:	f04f 3333 	mov.w	r3, #858993459	; 0x33333333
	result += (uint64_t)v_lo * m;
   222bc:	fba2 2403 	umull	r2, r4, r2, r3
   222c0:	18d5      	adds	r5, r2, r3
   222c2:	eb43 0504 	adc.w	r5, r3, r4
	result += (uint64_t)v_hi * m;
   222c6:	fba1 1303 	umull	r1, r3, r1, r3
   222ca:	1852      	adds	r2, r2, r1
   222cc:	eb44 0403 	adc.w	r4, r4, r3
   222d0:	1952      	adds	r2, r2, r5
   222d2:	f144 0200 	adc.w	r2, r4, #0
	result += (uint64_t)v_hi * m;
   222d6:	1889      	adds	r1, r1, r2
   222d8:	f143 0300 	adc.w	r3, r3, #0
	*v = result;
   222dc:	e9c0 1300 	strd	r1, r3, [r0]
}
   222e0:	bd30      	pop	{r4, r5, pc}

000222e2 <_get_digit>:
	if (*digit_count > 0) {
   222e2:	680a      	ldr	r2, [r1, #0]
   222e4:	2a00      	cmp	r2, #0
{
   222e6:	b510      	push	{r4, lr}
   222e8:	4603      	mov	r3, r0
	if (*digit_count > 0) {
   222ea:	dd0f      	ble.n	2230c <_get_digit+0x2a>
		--*digit_count;
   222ec:	3a01      	subs	r2, #1
   222ee:	600a      	str	r2, [r1, #0]
		*fr *= 10U;
   222f0:	681a      	ldr	r2, [r3, #0]
   222f2:	6844      	ldr	r4, [r0, #4]
   222f4:	200a      	movs	r0, #10
   222f6:	fba2 1200 	umull	r1, r2, r2, r0
   222fa:	fb00 2204 	mla	r2, r0, r4, r2
		rval = ((*fr >> 60) & 0xF) + '0';
   222fe:	0f10      	lsrs	r0, r2, #28
		*fr &= (BIT64(60) - 1U);
   22300:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
   22304:	e9c3 1200 	strd	r1, r2, [r3]
		rval = ((*fr >> 60) & 0xF) + '0';
   22308:	3030      	adds	r0, #48	; 0x30
}
   2230a:	bd10      	pop	{r4, pc}
		rval = '0';
   2230c:	2030      	movs	r0, #48	; 0x30
   2230e:	e7fc      	b.n	2230a <_get_digit+0x28>

00022310 <encode_uint>:
{
   22310:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22314:	469a      	mov	sl, r3
	bool upcase = isupper((int)conv->specifier);
   22316:	78d3      	ldrb	r3, [r2, #3]
	switch (specifier) {
   22318:	2b6f      	cmp	r3, #111	; 0x6f
{
   2231a:	4680      	mov	r8, r0
   2231c:	460f      	mov	r7, r1
   2231e:	4615      	mov	r5, r2
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   22320:	f1a3 0b41 	sub.w	fp, r3, #65	; 0x41
	switch (specifier) {
   22324:	d029      	beq.n	2237a <encode_uint+0x6a>
   22326:	d824      	bhi.n	22372 <encode_uint+0x62>
		return 16;
   22328:	2b58      	cmp	r3, #88	; 0x58
   2232a:	bf14      	ite	ne
   2232c:	260a      	movne	r6, #10
   2232e:	2610      	moveq	r6, #16
	char *bp = bps + (bpe - bps);
   22330:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
		unsigned int lsv = (unsigned int)(value % radix);
   22334:	4632      	mov	r2, r6
   22336:	2300      	movs	r3, #0
   22338:	4640      	mov	r0, r8
   2233a:	4639      	mov	r1, r7
   2233c:	f7de fe2c 	bl	f98 <__aeabi_uldivmod>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22340:	2a09      	cmp	r2, #9
   22342:	b2d4      	uxtb	r4, r2
   22344:	d81e      	bhi.n	22384 <encode_uint+0x74>
   22346:	3430      	adds	r4, #48	; 0x30
	} while ((value != 0) && (bps < bp));
   22348:	45b0      	cmp	r8, r6
		*--bp = (lsv <= 9) ? ('0' + lsv)
   2234a:	b2e4      	uxtb	r4, r4
	} while ((value != 0) && (bps < bp));
   2234c:	f177 0300 	sbcs.w	r3, r7, #0
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22350:	f809 4d01 	strb.w	r4, [r9, #-1]!
	} while ((value != 0) && (bps < bp));
   22354:	d301      	bcc.n	2235a <encode_uint+0x4a>
   22356:	45d1      	cmp	r9, sl
   22358:	d811      	bhi.n	2237e <encode_uint+0x6e>
	if (conv->flag_hash) {
   2235a:	782b      	ldrb	r3, [r5, #0]
   2235c:	069b      	lsls	r3, r3, #26
   2235e:	d505      	bpl.n	2236c <encode_uint+0x5c>
		if (radix == 8) {
   22360:	2e08      	cmp	r6, #8
   22362:	d115      	bne.n	22390 <encode_uint+0x80>
			conv->altform_0 = true;
   22364:	78ab      	ldrb	r3, [r5, #2]
   22366:	f043 0308 	orr.w	r3, r3, #8
			conv->altform_0c = true;
   2236a:	70ab      	strb	r3, [r5, #2]
}
   2236c:	4648      	mov	r0, r9
   2236e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	switch (specifier) {
   22372:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
		return 16;
   22376:	2b70      	cmp	r3, #112	; 0x70
   22378:	e7d7      	b.n	2232a <encode_uint+0x1a>
	switch (specifier) {
   2237a:	2608      	movs	r6, #8
   2237c:	e7d8      	b.n	22330 <encode_uint+0x20>
		value /= radix;
   2237e:	4680      	mov	r8, r0
   22380:	460f      	mov	r7, r1
   22382:	e7d7      	b.n	22334 <encode_uint+0x24>
		*--bp = (lsv <= 9) ? ('0' + lsv)
   22384:	f1bb 0f19 	cmp.w	fp, #25
   22388:	bf94      	ite	ls
   2238a:	3437      	addls	r4, #55	; 0x37
   2238c:	3457      	addhi	r4, #87	; 0x57
   2238e:	e7db      	b.n	22348 <encode_uint+0x38>
		} else if (radix == 16) {
   22390:	2e10      	cmp	r6, #16
   22392:	d1eb      	bne.n	2236c <encode_uint+0x5c>
			conv->altform_0c = true;
   22394:	78ab      	ldrb	r3, [r5, #2]
   22396:	f043 0310 	orr.w	r3, r3, #16
   2239a:	e7e6      	b.n	2236a <encode_uint+0x5a>

0002239c <outs>:
{
   2239c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   223a0:	4607      	mov	r7, r0
   223a2:	4688      	mov	r8, r1
   223a4:	4615      	mov	r5, r2
   223a6:	461e      	mov	r6, r3
	while ((sp < ep) || ((ep == NULL) && *sp)) {
   223a8:	4614      	mov	r4, r2
   223aa:	42b4      	cmp	r4, r6
   223ac:	eba4 0005 	sub.w	r0, r4, r5
   223b0:	d302      	bcc.n	223b8 <outs+0x1c>
   223b2:	b93e      	cbnz	r6, 223c4 <outs+0x28>
   223b4:	7823      	ldrb	r3, [r4, #0]
   223b6:	b12b      	cbz	r3, 223c4 <outs+0x28>
		int rc = out((int)*sp++, ctx);
   223b8:	f814 0b01 	ldrb.w	r0, [r4], #1
   223bc:	4641      	mov	r1, r8
   223be:	47b8      	blx	r7
		if (rc < 0) {
   223c0:	2800      	cmp	r0, #0
   223c2:	daf2      	bge.n	223aa <outs+0xe>
}
   223c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000223c8 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_OUTPUT_PRINT_MEMORY_USAGE, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_BUILD_OUTPUT_BIN, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_DEPRECATED_ZEPHYR_INT_TYPES, 1);
GEN_ABSOLUTE_SYM_KCONFIG(CONFIG_COMPAT_INCLUDES, 1);

GEN_ABS_SYM_END
   223c8:	4770      	bx	lr

000223ca <log_list_init>:

#include "log_list.h"

void log_list_init(struct log_list_t *list)
{
	list->tail = NULL;
   223ca:	2300      	movs	r3, #0
	list->head = NULL;
   223cc:	e9c0 3300 	strd	r3, r3, [r0]
}
   223d0:	4770      	bx	lr

000223d2 <log_list_add_tail>:

void log_list_add_tail(struct log_list_t *list, struct log_msg *msg)
{
	if (list->head == NULL) {
   223d2:	6803      	ldr	r3, [r0, #0]
   223d4:	b923      	cbnz	r3, 223e0 <log_list_add_tail+0xe>
		list->head = msg;
   223d6:	6001      	str	r1, [r0, #0]
	} else {
		list->tail->next = msg;
	}

	list->tail = msg;
	msg->next = NULL;
   223d8:	2300      	movs	r3, #0
	list->tail = msg;
   223da:	6041      	str	r1, [r0, #4]
	msg->next = NULL;
   223dc:	600b      	str	r3, [r1, #0]
}
   223de:	4770      	bx	lr
		list->tail->next = msg;
   223e0:	6843      	ldr	r3, [r0, #4]
   223e2:	6019      	str	r1, [r3, #0]
   223e4:	e7f8      	b.n	223d8 <log_list_add_tail+0x6>

000223e6 <log_list_head_peek>:

struct log_msg *log_list_head_peek(struct log_list_t *list)
{
	return list->head;
}
   223e6:	6800      	ldr	r0, [r0, #0]
   223e8:	4770      	bx	lr

000223ea <log_list_head_get>:

struct log_msg *log_list_head_get(struct log_list_t *list)
{
   223ea:	4603      	mov	r3, r0
	struct log_msg *msg = list->head;
   223ec:	6800      	ldr	r0, [r0, #0]

	if (list->head != NULL) {
   223ee:	b108      	cbz	r0, 223f4 <log_list_head_get+0xa>
		list->head = list->head->next;
   223f0:	6802      	ldr	r2, [r0, #0]
   223f2:	601a      	str	r2, [r3, #0]
	}

	return msg;
}
   223f4:	4770      	bx	lr

000223f6 <z_log_msg_std_alloc>:
/** @brief Allocate chunk for standard log message.
 *
 *  @return Allocated chunk of NULL.
 */
static inline struct log_msg *z_log_msg_std_alloc(void)
{
   223f6:	b508      	push	{r3, lr}
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   223f8:	f7e3 fb18 	bl	5a2c <log_msg_chunk_alloc>

	if (msg != NULL) {
   223fc:	b118      	cbz	r0, 22406 <z_log_msg_std_alloc+0x10>
		/* all fields reset to 0, reference counter to 1 */
		msg->hdr.ref_cnt = 1;
   223fe:	2301      	movs	r3, #1
   22400:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   22402:	2300      	movs	r3, #0
   22404:	8103      	strh	r3, [r0, #8]
			msg->hdr.ids.source_id = 0;
		}
	}

	return msg;
}
   22406:	bd08      	pop	{r3, pc}

00022408 <k_cycle_get_32_wrapper>:
#ifndef _ASMLANGUAGE
extern uint32_t z_timer_cycle_get_32(void);

static inline uint32_t arch_k_cycle_get_32(void)
{
	return z_timer_cycle_get_32();
   22408:	f7e4 bf82 	b.w	7310 <z_timer_cycle_get_32>

0002240c <dummy_timestamp>:
   2240c:	2000      	movs	r0, #0
   2240e:	4770      	bx	lr

00022410 <z_log_get_s_mask>:
{
   22410:	b5f0      	push	{r4, r5, r6, r7, lr}
   22412:	4605      	mov	r5, r0
	uint32_t mask = 0;
   22414:	2000      	movs	r0, #0
	uint32_t arg = 0;
   22416:	4603      	mov	r3, r0
	bool arm = false;
   22418:	4602      	mov	r2, r0
				mask |= BIT(arg);
   2241a:	2701      	movs	r7, #1
	while ((curr = *str++) && arg < nargs) {
   2241c:	f815 4b01 	ldrb.w	r4, [r5], #1
   22420:	b10c      	cbz	r4, 22426 <z_log_get_s_mask+0x16>
   22422:	428b      	cmp	r3, r1
   22424:	d300      	bcc.n	22428 <z_log_get_s_mask+0x18>
}
   22426:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (curr == '%') {
   22428:	2c25      	cmp	r4, #37	; 0x25
   2242a:	d102      	bne.n	22432 <z_log_get_s_mask+0x22>
			arm = !arm;
   2242c:	f082 0201 	eor.w	r2, r2, #1
   22430:	e7f4      	b.n	2241c <z_log_get_s_mask+0xc>
		} else if (arm && isalpha((int)curr)) {
   22432:	2a00      	cmp	r2, #0
   22434:	d0f2      	beq.n	2241c <z_log_get_s_mask+0xc>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   22436:	f044 0620 	orr.w	r6, r4, #32
   2243a:	3e61      	subs	r6, #97	; 0x61
   2243c:	2e19      	cmp	r6, #25
   2243e:	d8ed      	bhi.n	2241c <z_log_get_s_mask+0xc>
			if (curr == 's') {
   22440:	2c73      	cmp	r4, #115	; 0x73
				mask |= BIT(arg);
   22442:	bf04      	itt	eq
   22444:	fa07 f203 	lsleq.w	r2, r7, r3
   22448:	4310      	orreq	r0, r2
			arg++;
   2244a:	3301      	adds	r3, #1
			arm = false;
   2244c:	2200      	movs	r2, #0
   2244e:	e7e5      	b.n	2241c <z_log_get_s_mask+0xc>

00022450 <log_0>:
{
   22450:	b538      	push	{r3, r4, r5, lr}
   22452:	4605      	mov	r5, r0
   22454:	460c      	mov	r4, r1
 *
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_0(const char *str)
{
	struct log_msg *msg = z_log_msg_std_alloc();
   22456:	f7ff ffce 	bl	223f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   2245a:	b128      	cbz	r0, 22468 <log_0+0x18>
		msg->str = str;
   2245c:	6105      	str	r5, [r0, #16]
		msg_finalize(msg, src_level);
   2245e:	4621      	mov	r1, r4
}
   22460:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		msg_finalize(msg, src_level);
   22464:	f7e3 ba20 	b.w	58a8 <msg_finalize>
}
   22468:	bd38      	pop	{r3, r4, r5, pc}

0002246a <log_1>:
{
   2246a:	b570      	push	{r4, r5, r6, lr}
   2246c:	4606      	mov	r6, r0
   2246e:	460d      	mov	r5, r1
   22470:	4614      	mov	r4, r2
 *  @return Pointer to allocated head of the message or NULL.
 */
static inline struct log_msg *log_msg_create_1(const char *str,
					       log_arg_t arg1)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   22472:	f7ff ffc0 	bl	223f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   22476:	b158      	cbz	r0, 22490 <log_1+0x26>
		msg->str = str;
		msg->hdr.params.std.nargs = 1U;
   22478:	7a42      	ldrb	r2, [r0, #9]
		msg->str = str;
   2247a:	6106      	str	r6, [r0, #16]
		msg->hdr.params.std.nargs = 1U;
   2247c:	2101      	movs	r1, #1
   2247e:	f361 1207 	bfi	r2, r1, #4, #4
   22482:	7242      	strb	r2, [r0, #9]
		msg->payload.single.args[0] = arg1;
   22484:	6145      	str	r5, [r0, #20]
		msg_finalize(msg, src_level);
   22486:	4621      	mov	r1, r4
}
   22488:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		msg_finalize(msg, src_level);
   2248c:	f7e3 ba0c 	b.w	58a8 <msg_finalize>
}
   22490:	bd70      	pop	{r4, r5, r6, pc}

00022492 <log_2>:
{
   22492:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22496:	4680      	mov	r8, r0
   22498:	460f      	mov	r7, r1
   2249a:	4616      	mov	r6, r2
   2249c:	461d      	mov	r5, r3
 */
static inline struct log_msg *log_msg_create_2(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   2249e:	f7ff ffaa 	bl	223f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   224a2:	b168      	cbz	r0, 224c0 <log_2+0x2e>
		msg->str = str;
		msg->hdr.params.std.nargs = 2U;
   224a4:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   224a6:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 2U;
   224aa:	2202      	movs	r2, #2
   224ac:	f362 1307 	bfi	r3, r2, #4, #4
   224b0:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   224b2:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg_finalize(msg, src_level);
   224b6:	4629      	mov	r1, r5
}
   224b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		msg_finalize(msg, src_level);
   224bc:	f7e3 b9f4 	b.w	58a8 <msg_finalize>
}
   224c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000224c4 <log_3>:
{
   224c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   224c8:	4680      	mov	r8, r0
   224ca:	f8bd 9020 	ldrh.w	r9, [sp, #32]
   224ce:	460f      	mov	r7, r1
   224d0:	4616      	mov	r6, r2
   224d2:	461d      	mov	r5, r3
static inline struct log_msg *log_msg_create_3(const char *str,
					       log_arg_t arg1,
					       log_arg_t arg2,
					       log_arg_t arg3)
{
	struct  log_msg *msg = z_log_msg_std_alloc();
   224d4:	f7ff ff8f 	bl	223f6 <z_log_msg_std_alloc>

	if (msg != NULL) {
   224d8:	b170      	cbz	r0, 224f8 <log_3+0x34>
		msg->str = str;
		msg->hdr.params.std.nargs = 3U;
   224da:	7a43      	ldrb	r3, [r0, #9]
		msg->str = str;
   224dc:	f8c0 8010 	str.w	r8, [r0, #16]
		msg->hdr.params.std.nargs = 3U;
   224e0:	2203      	movs	r2, #3
   224e2:	f362 1307 	bfi	r3, r2, #4, #4
   224e6:	7243      	strb	r3, [r0, #9]
		msg->payload.single.args[0] = arg1;
		msg->payload.single.args[1] = arg2;
   224e8:	e9c0 7605 	strd	r7, r6, [r0, #20]
		msg->payload.single.args[2] = arg3;
   224ec:	61c5      	str	r5, [r0, #28]
		msg_finalize(msg, src_level);
   224ee:	4649      	mov	r1, r9
}
   224f0:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
		msg_finalize(msg, src_level);
   224f4:	f7e3 b9d8 	b.w	58a8 <msg_finalize>
}
   224f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

000224fc <log_n>:
{
   224fc:	b510      	push	{r4, lr}
   224fe:	461c      	mov	r4, r3
		struct log_msg *msg = log_msg_create_n(str, args, narg);
   22500:	f000 f8a1 	bl	22646 <log_msg_create_n>
		if (msg == NULL) {
   22504:	b120      	cbz	r0, 22510 <log_n+0x14>
		msg_finalize(msg, src_level);
   22506:	4621      	mov	r1, r4
}
   22508:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		msg_finalize(msg, src_level);
   2250c:	f7e3 b9cc 	b.w	58a8 <msg_finalize>
}
   22510:	bd10      	pop	{r4, pc}

00022512 <log_msg_hexdump_data_op>:
static void log_msg_hexdump_data_op(struct log_msg *msg,
				    uint8_t *data,
				    size_t *length,
				    size_t offset,
				    bool put_op)
{
   22512:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   22516:	461c      	mov	r4, r3
	uint32_t available_len = msg->hdr.params.hexdump.length;
   22518:	8903      	ldrh	r3, [r0, #8]
{
   2251a:	f89d 7020 	ldrb.w	r7, [sp, #32]
   2251e:	460e      	mov	r6, r1
   22520:	4611      	mov	r1, r2
	uint32_t available_len = msg->hdr.params.hexdump.length;
   22522:	f3c3 028d 	ubfx	r2, r3, #2, #14
	uint8_t *head_data;
	uint32_t chunk_len;
	uint32_t req_len;
	uint32_t cpy_len;

	if (offset >= available_len) {
   22526:	42a2      	cmp	r2, r4
   22528:	d803      	bhi.n	22532 <log_msg_hexdump_data_op+0x20>
		*length = 0;
   2252a:	2300      	movs	r3, #0
   2252c:	600b      	str	r3, [r1, #0]
		offset = 0;
		cont = cont->next;
		req_len -= cpy_len;
		data += cpy_len;
	}
}
   2252e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	if ((offset + *length) > available_len) {
   22532:	680b      	ldr	r3, [r1, #0]
   22534:	4423      	add	r3, r4
   22536:	4293      	cmp	r3, r2
		*length = available_len - offset;
   22538:	bf84      	itt	hi
   2253a:	1b13      	subhi	r3, r2, r4
   2253c:	600b      	strhi	r3, [r1, #0]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   2253e:	2a0c      	cmp	r2, #12
	req_len = *length;
   22540:	f8d1 9000 	ldr.w	r9, [r1]
	if (available_len > LOG_MSG_HEXDUMP_BYTES_SINGLE_CHUNK) {
   22544:	d92a      	bls.n	2259c <log_msg_hexdump_data_op+0x8a>
	if (offset < chunk_len) {
   22546:	2c07      	cmp	r4, #7
		cont = msg->payload.ext.next;
   22548:	f8d0 8014 	ldr.w	r8, [r0, #20]
	if (offset < chunk_len) {
   2254c:	d82d      	bhi.n	225aa <log_msg_hexdump_data_op+0x98>
		head_data = msg->payload.ext.data.bytes;
   2254e:	3018      	adds	r0, #24
		chunk_len = LOG_MSG_HEXDUMP_BYTES_HEAD_CHUNK;
   22550:	2208      	movs	r2, #8
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   22552:	454a      	cmp	r2, r9
   22554:	bf28      	it	cs
   22556:	464a      	movcs	r2, r9
   22558:	4615      	mov	r5, r2
			(void)memcpy(&head_data[offset], data, cpy_len);
   2255a:	4420      	add	r0, r4
		if (put_op) {
   2255c:	b317      	cbz	r7, 225a4 <log_msg_hexdump_data_op+0x92>
			(void)memcpy(&head_data[offset], data, cpy_len);
   2255e:	4631      	mov	r1, r6
			(void)memcpy(data, &head_data[offset], cpy_len);
   22560:	f001 ff82 	bl	24468 <memcpy>
		req_len -= cpy_len;
   22564:	eba9 0905 	sub.w	r9, r9, r5
		data += cpy_len;
   22568:	442e      	add	r6, r5
	while ((req_len > 0) && (cont != NULL)) {
   2256a:	f1b9 0f00 	cmp.w	r9, #0
   2256e:	d0de      	beq.n	2252e <log_msg_hexdump_data_op+0x1c>
   22570:	f1b8 0f00 	cmp.w	r8, #0
   22574:	d0db      	beq.n	2252e <log_msg_hexdump_data_op+0x1c>
		chunk_len = HEXDUMP_BYTES_CONT_MSG - offset;
   22576:	f1c4 051c 	rsb	r5, r4, #28
		cpy_len = req_len > chunk_len ? chunk_len : req_len;
   2257a:	454d      	cmp	r5, r9
   2257c:	bf28      	it	cs
   2257e:	464d      	movcs	r5, r9
			(void)memcpy(&cont->payload.bytes[offset],
   22580:	1d20      	adds	r0, r4, #4
   22582:	4440      	add	r0, r8
   22584:	462a      	mov	r2, r5
		if (put_op) {
   22586:	b1bf      	cbz	r7, 225b8 <log_msg_hexdump_data_op+0xa6>
			(void)memcpy(&cont->payload.bytes[offset],
   22588:	4631      	mov	r1, r6
			(void)memcpy(data, &cont->payload.bytes[offset],
   2258a:	f001 ff6d 	bl	24468 <memcpy>
		req_len -= cpy_len;
   2258e:	eba9 0905 	sub.w	r9, r9, r5
		cont = cont->next;
   22592:	f8d8 8000 	ldr.w	r8, [r8]
		data += cpy_len;
   22596:	442e      	add	r6, r5
		offset = 0;
   22598:	2400      	movs	r4, #0
   2259a:	e7e6      	b.n	2256a <log_msg_hexdump_data_op+0x58>
		head_data = msg->payload.single.bytes;
   2259c:	3014      	adds	r0, #20
	struct log_msg_cont *cont = NULL;
   2259e:	f04f 0800 	mov.w	r8, #0
   225a2:	e7d6      	b.n	22552 <log_msg_hexdump_data_op+0x40>
			(void)memcpy(data, &head_data[offset], cpy_len);
   225a4:	4601      	mov	r1, r0
   225a6:	4630      	mov	r0, r6
   225a8:	e7da      	b.n	22560 <log_msg_hexdump_data_op+0x4e>
		offset -= chunk_len;
   225aa:	3c08      	subs	r4, #8
		while (offset >= chunk_len) {
   225ac:	2c1b      	cmp	r4, #27
   225ae:	d9dc      	bls.n	2256a <log_msg_hexdump_data_op+0x58>
			cont = cont->next;
   225b0:	f8d8 8000 	ldr.w	r8, [r8]
			offset -= chunk_len;
   225b4:	3c1c      	subs	r4, #28
   225b6:	e7f9      	b.n	225ac <log_msg_hexdump_data_op+0x9a>
			(void)memcpy(data, &cont->payload.bytes[offset],
   225b8:	4601      	mov	r1, r0
   225ba:	4630      	mov	r0, r6
   225bc:	e7e5      	b.n	2258a <log_msg_hexdump_data_op+0x78>

000225be <log_msg_get>:
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   225be:	3004      	adds	r0, #4
   225c0:	f3bf 8f5b 	dmb	ish
   225c4:	e850 3f00 	ldrex	r3, [r0]
   225c8:	3301      	adds	r3, #1
   225ca:	e840 3200 	strex	r2, r3, [r0]
   225ce:	2a00      	cmp	r2, #0
   225d0:	d1f8      	bne.n	225c4 <log_msg_get+0x6>
   225d2:	f3bf 8f5b 	dmb	ish
}
   225d6:	4770      	bx	lr

000225d8 <log_msg_nargs_get>:
	return msg->hdr.params.std.nargs;
   225d8:	7a40      	ldrb	r0, [r0, #9]
}
   225da:	0900      	lsrs	r0, r0, #4
   225dc:	4770      	bx	lr

000225de <log_msg_arg_get>:
	if (arg_idx >= msg->hdr.params.std.nargs) {
   225de:	7a43      	ldrb	r3, [r0, #9]
   225e0:	ebb1 1f13 	cmp.w	r1, r3, lsr #4
   225e4:	ea4f 1213 	mov.w	r2, r3, lsr #4
   225e8:	d216      	bcs.n	22618 <log_msg_arg_get+0x3a>
	if (msg->hdr.params.std.nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   225ea:	2a03      	cmp	r2, #3
   225ec:	d803      	bhi.n	225f6 <log_msg_arg_get+0x18>
		arg = msg->payload.single.args[arg_idx];
   225ee:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   225f2:	6940      	ldr	r0, [r0, #20]
   225f4:	4770      	bx	lr
	if (arg_idx < LOG_MSG_NARGS_HEAD_CHUNK) {
   225f6:	2901      	cmp	r1, #1
   225f8:	d803      	bhi.n	22602 <log_msg_arg_get+0x24>
		return msg->payload.ext.data.args[arg_idx];
   225fa:	eb00 0081 	add.w	r0, r0, r1, lsl #2
   225fe:	6980      	ldr	r0, [r0, #24]
   22600:	4770      	bx	lr
	cont = msg->payload.ext.next;
   22602:	6943      	ldr	r3, [r0, #20]
	arg_idx -= LOG_MSG_NARGS_HEAD_CHUNK;
   22604:	3902      	subs	r1, #2
	while (arg_idx >= ARGS_CONT_MSG) {
   22606:	2906      	cmp	r1, #6
   22608:	d803      	bhi.n	22612 <log_msg_arg_get+0x34>
	return cont->payload.args[arg_idx];
   2260a:	eb03 0181 	add.w	r1, r3, r1, lsl #2
   2260e:	6848      	ldr	r0, [r1, #4]
   22610:	4770      	bx	lr
		cont = cont->next;
   22612:	681b      	ldr	r3, [r3, #0]
		arg_idx -= ARGS_CONT_MSG;
   22614:	3907      	subs	r1, #7
		cont = cont->next;
   22616:	e7f6      	b.n	22606 <log_msg_arg_get+0x28>
		return 0;
   22618:	2000      	movs	r0, #0
}
   2261a:	4770      	bx	lr

0002261c <log_msg_put>:
{
   2261c:	4603      	mov	r3, r0
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   2261e:	1d02      	adds	r2, r0, #4
   22620:	f3bf 8f5b 	dmb	ish
   22624:	e852 1f00 	ldrex	r1, [r2]
   22628:	3901      	subs	r1, #1
   2262a:	e842 1c00 	strex	ip, r1, [r2]
   2262e:	f1bc 0f00 	cmp.w	ip, #0
   22632:	d1f7      	bne.n	22624 <log_msg_put+0x8>
   22634:	f3bf 8f5b 	dmb	ish
	if (msg->hdr.ref_cnt == 0) {
   22638:	685b      	ldr	r3, [r3, #4]
   2263a:	b90b      	cbnz	r3, 22640 <log_msg_put+0x24>
		msg_free(msg);
   2263c:	f7e3 ba0a 	b.w	5a54 <msg_free>
}
   22640:	4770      	bx	lr

00022642 <log_msg_str_get>:
}
   22642:	6900      	ldr	r0, [r0, #16]
   22644:	4770      	bx	lr

00022646 <log_msg_create_n>:
{
   22646:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2264a:	4680      	mov	r8, r0
   2264c:	460f      	mov	r7, r1
   2264e:	4615      	mov	r5, r2
	struct  log_msg *msg = (struct  log_msg *)log_msg_chunk_alloc();
   22650:	f7e3 f9ec 	bl	5a2c <log_msg_chunk_alloc>
	if (msg != NULL) {
   22654:	4604      	mov	r4, r0
   22656:	b358      	cbz	r0, 226b0 <log_msg_create_n+0x6a>
		msg->hdr.ref_cnt = 1;
   22658:	2301      	movs	r3, #1
		msg->hdr.params.raw = 0U;
   2265a:	f04f 0a00 	mov.w	sl, #0
	if ((msg == NULL) || nargs <= LOG_MSG_NARGS_SINGLE_CHUNK) {
   2265e:	2d03      	cmp	r5, #3
		msg->hdr.ref_cnt = 1;
   22660:	6043      	str	r3, [r0, #4]
		msg->hdr.params.raw = 0U;
   22662:	f8a0 a008 	strh.w	sl, [r0, #8]
   22666:	d90c      	bls.n	22682 <log_msg_create_n+0x3c>
	msg->hdr.params.generic.ext = 1;
   22668:	7a03      	ldrb	r3, [r0, #8]
	*next = NULL;
   2266a:	f8c0 a014 	str.w	sl, [r0, #20]
	msg->hdr.params.generic.ext = 1;
   2266e:	f043 0302 	orr.w	r3, r3, #2
   22672:	7203      	strb	r3, [r0, #8]
	n -= LOG_MSG_NARGS_HEAD_CHUNK;
   22674:	f1a5 0902 	sub.w	r9, r5, #2
	next = &msg->payload.ext.next;
   22678:	f100 0b14 	add.w	fp, r0, #20
	while (n > 0) {
   2267c:	f1b9 0f00 	cmp.w	r9, #0
   22680:	dc0e      	bgt.n	226a0 <log_msg_create_n+0x5a>
		msg->hdr.params.std.nargs = nargs;
   22682:	7a63      	ldrb	r3, [r4, #9]
		msg->str = str;
   22684:	f8c4 8010 	str.w	r8, [r4, #16]
		msg->hdr.params.std.nargs = nargs;
   22688:	f365 1307 	bfi	r3, r5, #4, #4
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   2268c:	2d03      	cmp	r5, #3
		msg->hdr.params.std.nargs = nargs;
   2268e:	7263      	strb	r3, [r4, #9]
	if (nargs > LOG_MSG_NARGS_SINGLE_CHUNK) {
   22690:	d819      	bhi.n	226c6 <log_msg_create_n+0x80>
		(void)memcpy(msg->payload.single.args, args,
   22692:	00aa      	lsls	r2, r5, #2
   22694:	4639      	mov	r1, r7
   22696:	f104 0014 	add.w	r0, r4, #20
   2269a:	f001 fee5 	bl	24468 <memcpy>
	while (nargs != 0U) {
   2269e:	e007      	b.n	226b0 <log_msg_create_n+0x6a>
		cont = (struct log_msg_cont *)log_msg_chunk_alloc();
   226a0:	f7e3 f9c4 	bl	5a2c <log_msg_chunk_alloc>
		if (cont == NULL) {
   226a4:	4606      	mov	r6, r0
   226a6:	b930      	cbnz	r0, 226b6 <log_msg_create_n+0x70>
			msg_free(msg);
   226a8:	4620      	mov	r0, r4
   226aa:	f7e3 f9d3 	bl	5a54 <msg_free>
			return NULL;
   226ae:	4634      	mov	r4, r6
}
   226b0:	4620      	mov	r0, r4
   226b2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*next = cont;
   226b6:	f8cb 0000 	str.w	r0, [fp]
		cont->next = NULL;
   226ba:	f1a9 0907 	sub.w	r9, r9, #7
   226be:	f8c0 a000 	str.w	sl, [r0]
		next = &cont->next;
   226c2:	4683      	mov	fp, r0
		n -= ARGS_CONT_MSG;
   226c4:	e7da      	b.n	2267c <log_msg_create_n+0x36>
		(void)memcpy(msg->payload.ext.data.args, args,
   226c6:	4639      	mov	r1, r7
   226c8:	2208      	movs	r2, #8
   226ca:	f104 0018 	add.w	r0, r4, #24
	struct log_msg_cont *cont = msg->payload.ext.next;
   226ce:	f8d4 8014 	ldr.w	r8, [r4, #20]
		(void)memcpy(msg->payload.ext.data.args, args,
   226d2:	f001 fec9 	bl	24468 <memcpy>
		nargs -= LOG_MSG_NARGS_HEAD_CHUNK;
   226d6:	3d02      	subs	r5, #2
		args += LOG_MSG_NARGS_HEAD_CHUNK;
   226d8:	3708      	adds	r7, #8
		uint32_t cpy_args = MIN(nargs, ARGS_CONT_MSG);
   226da:	2d07      	cmp	r5, #7
   226dc:	462e      	mov	r6, r5
   226de:	bf28      	it	cs
   226e0:	2607      	movcs	r6, #7
		(void)memcpy(cont->payload.args, args,
   226e2:	ea4f 0986 	mov.w	r9, r6, lsl #2
   226e6:	4639      	mov	r1, r7
   226e8:	f108 0004 	add.w	r0, r8, #4
   226ec:	464a      	mov	r2, r9
   226ee:	f001 febb 	bl	24468 <memcpy>
	while (nargs != 0U) {
   226f2:	1bad      	subs	r5, r5, r6
		cont = cont->next;
   226f4:	f8d8 8000 	ldr.w	r8, [r8]
		args += cpy_args;
   226f8:	444f      	add	r7, r9
	while (nargs != 0U) {
   226fa:	d1ee      	bne.n	226da <log_msg_create_n+0x94>
   226fc:	e7d8      	b.n	226b0 <log_msg_create_n+0x6a>

000226fe <log_msg_hexdump_data_get>:

void log_msg_hexdump_data_get(struct log_msg *msg,
			      uint8_t *data,
			      size_t *length,
			      size_t offset)
{
   226fe:	b513      	push	{r0, r1, r4, lr}
	log_msg_hexdump_data_op(msg, data, length, offset, false);
   22700:	2400      	movs	r4, #0
   22702:	9400      	str	r4, [sp, #0]
   22704:	f7ff ff05 	bl	22512 <log_msg_hexdump_data_op>
}
   22708:	b002      	add	sp, #8
   2270a:	bd10      	pop	{r4, pc}

0002270c <buffer_write>:
{
   2270c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2270e:	4606      	mov	r6, r0
   22710:	460d      	mov	r5, r1
   22712:	4614      	mov	r4, r2
   22714:	461f      	mov	r7, r3
		processed = outf(buf, len, ctx);
   22716:	4621      	mov	r1, r4
   22718:	4628      	mov	r0, r5
   2271a:	463a      	mov	r2, r7
   2271c:	47b0      	blx	r6
	} while (len != 0);
   2271e:	1a24      	subs	r4, r4, r0
		buf += processed;
   22720:	4405      	add	r5, r0
	} while (len != 0);
   22722:	d1f8      	bne.n	22716 <buffer_write+0xa>
}
   22724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022726 <std_print>:
{
   22726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2272a:	b08e      	sub	sp, #56	; 0x38
   2272c:	af0e      	add	r7, sp, #56	; 0x38
   2272e:	4680      	mov	r8, r0
   22730:	460d      	mov	r5, r1
	const char *str = log_msg_str_get(msg);
   22732:	f7ff ff86 	bl	22642 <log_msg_str_get>
   22736:	4606      	mov	r6, r0
	uint32_t nargs = log_msg_nargs_get(msg);
   22738:	4640      	mov	r0, r8
   2273a:	f7ff ff4d 	bl	225d8 <log_msg_nargs_get>
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2273e:	0083      	lsls	r3, r0, #2
   22740:	3307      	adds	r3, #7
   22742:	f023 0307 	bic.w	r3, r3, #7
   22746:	ebad 0d03 	sub.w	sp, sp, r3
	uint32_t nargs = log_msg_nargs_get(msg);
   2274a:	4682      	mov	sl, r0
	log_arg_t *args = alloca(sizeof(log_arg_t)*nargs);
   2274c:	ac0e      	add	r4, sp, #56	; 0x38
	for (i = 0; i < nargs; i++) {
   2274e:	f04f 0900 	mov.w	r9, #0
   22752:	45d1      	cmp	r9, sl
   22754:	d116      	bne.n	22784 <std_print+0x5e>
	switch (log_msg_nargs_get(msg)) {
   22756:	4640      	mov	r0, r8
   22758:	f7ff ff3e 	bl	225d8 <log_msg_nargs_get>
   2275c:	280f      	cmp	r0, #15
   2275e:	d81e      	bhi.n	2279e <std_print+0x78>
   22760:	e8df f010 	tbh	[pc, r0, lsl #1]
   22764:	00200019 	.word	0x00200019
   22768:	002d0026 	.word	0x002d0026
   2276c:	00410036 	.word	0x00410036
   22770:	005d004e 	.word	0x005d004e
   22774:	0081006e 	.word	0x0081006e
   22778:	00ad0096 	.word	0x00ad0096
   2277c:	00e100c6 	.word	0x00e100c6
   22780:	011d00fe 	.word	0x011d00fe
		args[i] = log_msg_arg_get(msg, i);
   22784:	4649      	mov	r1, r9
   22786:	4640      	mov	r0, r8
   22788:	f7ff ff29 	bl	225de <log_msg_arg_get>
   2278c:	f844 0029 	str.w	r0, [r4, r9, lsl #2]
	for (i = 0; i < nargs; i++) {
   22790:	f109 0901 	add.w	r9, r9, #1
   22794:	e7dd      	b.n	22752 <std_print+0x2c>
		print_formatted(log_output, str);
   22796:	4631      	mov	r1, r6
   22798:	4628      	mov	r0, r5
   2279a:	f7e3 f999 	bl	5ad0 <print_formatted>
}
   2279e:	46bd      	mov	sp, r7
   227a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		print_formatted(log_output, str, args[0]);
   227a4:	6822      	ldr	r2, [r4, #0]
   227a6:	4631      	mov	r1, r6
   227a8:	4628      	mov	r0, r5
   227aa:	f7e3 f991 	bl	5ad0 <print_formatted>
		break;
   227ae:	e7f6      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1]);
   227b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   227b4:	4631      	mov	r1, r6
   227b6:	4628      	mov	r0, r5
   227b8:	f7e3 f98a 	bl	5ad0 <print_formatted>
		break;
   227bc:	e7ef      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2]);
   227be:	68a3      	ldr	r3, [r4, #8]
   227c0:	9300      	str	r3, [sp, #0]
   227c2:	e9d4 2300 	ldrd	r2, r3, [r4]
   227c6:	4631      	mov	r1, r6
   227c8:	4628      	mov	r0, r5
   227ca:	f7e3 f981 	bl	5ad0 <print_formatted>
		break;
   227ce:	e7e6      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   227d0:	68e3      	ldr	r3, [r4, #12]
   227d2:	9301      	str	r3, [sp, #4]
   227d4:	68a3      	ldr	r3, [r4, #8]
   227d6:	9300      	str	r3, [sp, #0]
   227d8:	e9d4 2300 	ldrd	r2, r3, [r4]
   227dc:	4631      	mov	r1, r6
   227de:	4628      	mov	r0, r5
   227e0:	f7e3 f976 	bl	5ad0 <print_formatted>
		break;
   227e4:	e7db      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   227e6:	6923      	ldr	r3, [r4, #16]
   227e8:	9302      	str	r3, [sp, #8]
   227ea:	68e3      	ldr	r3, [r4, #12]
   227ec:	9301      	str	r3, [sp, #4]
   227ee:	68a3      	ldr	r3, [r4, #8]
   227f0:	9300      	str	r3, [sp, #0]
   227f2:	e9d4 2300 	ldrd	r2, r3, [r4]
   227f6:	4631      	mov	r1, r6
   227f8:	4628      	mov	r0, r5
   227fa:	f7e3 f969 	bl	5ad0 <print_formatted>
		break;
   227fe:	e7ce      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22800:	6963      	ldr	r3, [r4, #20]
   22802:	9303      	str	r3, [sp, #12]
   22804:	6923      	ldr	r3, [r4, #16]
   22806:	9302      	str	r3, [sp, #8]
   22808:	68e3      	ldr	r3, [r4, #12]
   2280a:	9301      	str	r3, [sp, #4]
   2280c:	68a3      	ldr	r3, [r4, #8]
   2280e:	9300      	str	r3, [sp, #0]
   22810:	e9d4 2300 	ldrd	r2, r3, [r4]
   22814:	4631      	mov	r1, r6
   22816:	4628      	mov	r0, r5
   22818:	f7e3 f95a 	bl	5ad0 <print_formatted>
		break;
   2281c:	e7bf      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2281e:	69a3      	ldr	r3, [r4, #24]
   22820:	9304      	str	r3, [sp, #16]
   22822:	6963      	ldr	r3, [r4, #20]
   22824:	9303      	str	r3, [sp, #12]
   22826:	6923      	ldr	r3, [r4, #16]
   22828:	9302      	str	r3, [sp, #8]
   2282a:	68e3      	ldr	r3, [r4, #12]
   2282c:	9301      	str	r3, [sp, #4]
   2282e:	68a3      	ldr	r3, [r4, #8]
   22830:	9300      	str	r3, [sp, #0]
   22832:	e9d4 2300 	ldrd	r2, r3, [r4]
   22836:	4631      	mov	r1, r6
   22838:	4628      	mov	r0, r5
   2283a:	f7e3 f949 	bl	5ad0 <print_formatted>
		break;
   2283e:	e7ae      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22840:	69e3      	ldr	r3, [r4, #28]
   22842:	9305      	str	r3, [sp, #20]
   22844:	69a3      	ldr	r3, [r4, #24]
   22846:	9304      	str	r3, [sp, #16]
   22848:	6963      	ldr	r3, [r4, #20]
   2284a:	9303      	str	r3, [sp, #12]
   2284c:	6923      	ldr	r3, [r4, #16]
   2284e:	9302      	str	r3, [sp, #8]
   22850:	68e3      	ldr	r3, [r4, #12]
   22852:	9301      	str	r3, [sp, #4]
   22854:	68a3      	ldr	r3, [r4, #8]
   22856:	9300      	str	r3, [sp, #0]
   22858:	e9d4 2300 	ldrd	r2, r3, [r4]
   2285c:	4631      	mov	r1, r6
   2285e:	4628      	mov	r0, r5
   22860:	f7e3 f936 	bl	5ad0 <print_formatted>
		break;
   22864:	e79b      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22866:	6a23      	ldr	r3, [r4, #32]
   22868:	9306      	str	r3, [sp, #24]
   2286a:	69e3      	ldr	r3, [r4, #28]
   2286c:	9305      	str	r3, [sp, #20]
   2286e:	69a3      	ldr	r3, [r4, #24]
   22870:	9304      	str	r3, [sp, #16]
   22872:	6963      	ldr	r3, [r4, #20]
   22874:	9303      	str	r3, [sp, #12]
   22876:	6923      	ldr	r3, [r4, #16]
   22878:	9302      	str	r3, [sp, #8]
   2287a:	68e3      	ldr	r3, [r4, #12]
   2287c:	9301      	str	r3, [sp, #4]
   2287e:	68a3      	ldr	r3, [r4, #8]
   22880:	9300      	str	r3, [sp, #0]
   22882:	e9d4 2300 	ldrd	r2, r3, [r4]
   22886:	4631      	mov	r1, r6
   22888:	4628      	mov	r0, r5
   2288a:	f7e3 f921 	bl	5ad0 <print_formatted>
		break;
   2288e:	e786      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22890:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22892:	9307      	str	r3, [sp, #28]
   22894:	6a23      	ldr	r3, [r4, #32]
   22896:	9306      	str	r3, [sp, #24]
   22898:	69e3      	ldr	r3, [r4, #28]
   2289a:	9305      	str	r3, [sp, #20]
   2289c:	69a3      	ldr	r3, [r4, #24]
   2289e:	9304      	str	r3, [sp, #16]
   228a0:	6963      	ldr	r3, [r4, #20]
   228a2:	9303      	str	r3, [sp, #12]
   228a4:	6923      	ldr	r3, [r4, #16]
   228a6:	9302      	str	r3, [sp, #8]
   228a8:	68e3      	ldr	r3, [r4, #12]
   228aa:	9301      	str	r3, [sp, #4]
   228ac:	68a3      	ldr	r3, [r4, #8]
   228ae:	9300      	str	r3, [sp, #0]
   228b0:	e9d4 2300 	ldrd	r2, r3, [r4]
   228b4:	4631      	mov	r1, r6
   228b6:	4628      	mov	r0, r5
   228b8:	f7e3 f90a 	bl	5ad0 <print_formatted>
		break;
   228bc:	e76f      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   228be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   228c0:	9308      	str	r3, [sp, #32]
   228c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   228c4:	9307      	str	r3, [sp, #28]
   228c6:	6a23      	ldr	r3, [r4, #32]
   228c8:	9306      	str	r3, [sp, #24]
   228ca:	69e3      	ldr	r3, [r4, #28]
   228cc:	9305      	str	r3, [sp, #20]
   228ce:	69a3      	ldr	r3, [r4, #24]
   228d0:	9304      	str	r3, [sp, #16]
   228d2:	6963      	ldr	r3, [r4, #20]
   228d4:	9303      	str	r3, [sp, #12]
   228d6:	6923      	ldr	r3, [r4, #16]
   228d8:	9302      	str	r3, [sp, #8]
   228da:	68e3      	ldr	r3, [r4, #12]
   228dc:	9301      	str	r3, [sp, #4]
   228de:	68a3      	ldr	r3, [r4, #8]
   228e0:	9300      	str	r3, [sp, #0]
   228e2:	e9d4 2300 	ldrd	r2, r3, [r4]
   228e6:	4631      	mov	r1, r6
   228e8:	4628      	mov	r0, r5
   228ea:	f7e3 f8f1 	bl	5ad0 <print_formatted>
		break;
   228ee:	e756      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   228f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   228f2:	9309      	str	r3, [sp, #36]	; 0x24
   228f4:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   228f6:	9308      	str	r3, [sp, #32]
   228f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
   228fa:	9307      	str	r3, [sp, #28]
   228fc:	6a23      	ldr	r3, [r4, #32]
   228fe:	9306      	str	r3, [sp, #24]
   22900:	69e3      	ldr	r3, [r4, #28]
   22902:	9305      	str	r3, [sp, #20]
   22904:	69a3      	ldr	r3, [r4, #24]
   22906:	9304      	str	r3, [sp, #16]
   22908:	6963      	ldr	r3, [r4, #20]
   2290a:	9303      	str	r3, [sp, #12]
   2290c:	6923      	ldr	r3, [r4, #16]
   2290e:	9302      	str	r3, [sp, #8]
   22910:	68e3      	ldr	r3, [r4, #12]
   22912:	9301      	str	r3, [sp, #4]
   22914:	68a3      	ldr	r3, [r4, #8]
   22916:	9300      	str	r3, [sp, #0]
   22918:	e9d4 2300 	ldrd	r2, r3, [r4]
   2291c:	4631      	mov	r1, r6
   2291e:	4628      	mov	r0, r5
   22920:	f7e3 f8d6 	bl	5ad0 <print_formatted>
		break;
   22924:	e73b      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22926:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22928:	930a      	str	r3, [sp, #40]	; 0x28
   2292a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2292c:	9309      	str	r3, [sp, #36]	; 0x24
   2292e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   22930:	9308      	str	r3, [sp, #32]
   22932:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22934:	9307      	str	r3, [sp, #28]
   22936:	6a23      	ldr	r3, [r4, #32]
   22938:	9306      	str	r3, [sp, #24]
   2293a:	69e3      	ldr	r3, [r4, #28]
   2293c:	9305      	str	r3, [sp, #20]
   2293e:	69a3      	ldr	r3, [r4, #24]
   22940:	9304      	str	r3, [sp, #16]
   22942:	6963      	ldr	r3, [r4, #20]
   22944:	9303      	str	r3, [sp, #12]
   22946:	6923      	ldr	r3, [r4, #16]
   22948:	9302      	str	r3, [sp, #8]
   2294a:	68e3      	ldr	r3, [r4, #12]
   2294c:	9301      	str	r3, [sp, #4]
   2294e:	68a3      	ldr	r3, [r4, #8]
   22950:	9300      	str	r3, [sp, #0]
   22952:	e9d4 2300 	ldrd	r2, r3, [r4]
   22956:	4631      	mov	r1, r6
   22958:	4628      	mov	r0, r5
   2295a:	f7e3 f8b9 	bl	5ad0 <print_formatted>
		break;
   2295e:	e71e      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   22960:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22962:	930b      	str	r3, [sp, #44]	; 0x2c
   22964:	6b23      	ldr	r3, [r4, #48]	; 0x30
   22966:	930a      	str	r3, [sp, #40]	; 0x28
   22968:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2296a:	9309      	str	r3, [sp, #36]	; 0x24
   2296c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   2296e:	9308      	str	r3, [sp, #32]
   22970:	6a63      	ldr	r3, [r4, #36]	; 0x24
   22972:	9307      	str	r3, [sp, #28]
   22974:	6a23      	ldr	r3, [r4, #32]
   22976:	9306      	str	r3, [sp, #24]
   22978:	69e3      	ldr	r3, [r4, #28]
   2297a:	9305      	str	r3, [sp, #20]
   2297c:	69a3      	ldr	r3, [r4, #24]
   2297e:	9304      	str	r3, [sp, #16]
   22980:	6963      	ldr	r3, [r4, #20]
   22982:	9303      	str	r3, [sp, #12]
   22984:	6923      	ldr	r3, [r4, #16]
   22986:	9302      	str	r3, [sp, #8]
   22988:	68e3      	ldr	r3, [r4, #12]
   2298a:	9301      	str	r3, [sp, #4]
   2298c:	68a3      	ldr	r3, [r4, #8]
   2298e:	9300      	str	r3, [sp, #0]
   22990:	e9d4 2300 	ldrd	r2, r3, [r4]
   22994:	4631      	mov	r1, r6
   22996:	4628      	mov	r0, r5
   22998:	f7e3 f89a 	bl	5ad0 <print_formatted>
		break;
   2299c:	e6ff      	b.n	2279e <std_print+0x78>
		print_formatted(log_output, str, args[0], args[1], args[2],
   2299e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   229a0:	930c      	str	r3, [sp, #48]	; 0x30
   229a2:	6b63      	ldr	r3, [r4, #52]	; 0x34
   229a4:	930b      	str	r3, [sp, #44]	; 0x2c
   229a6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   229a8:	930a      	str	r3, [sp, #40]	; 0x28
   229aa:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   229ac:	9309      	str	r3, [sp, #36]	; 0x24
   229ae:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   229b0:	9308      	str	r3, [sp, #32]
   229b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
   229b4:	9307      	str	r3, [sp, #28]
   229b6:	6a23      	ldr	r3, [r4, #32]
   229b8:	9306      	str	r3, [sp, #24]
   229ba:	69e3      	ldr	r3, [r4, #28]
   229bc:	9305      	str	r3, [sp, #20]
   229be:	69a3      	ldr	r3, [r4, #24]
   229c0:	9304      	str	r3, [sp, #16]
   229c2:	6963      	ldr	r3, [r4, #20]
   229c4:	9303      	str	r3, [sp, #12]
   229c6:	6923      	ldr	r3, [r4, #16]
   229c8:	9302      	str	r3, [sp, #8]
   229ca:	68e3      	ldr	r3, [r4, #12]
   229cc:	9301      	str	r3, [sp, #4]
   229ce:	68a3      	ldr	r3, [r4, #8]
   229d0:	9300      	str	r3, [sp, #0]
   229d2:	e9d4 2300 	ldrd	r2, r3, [r4]
   229d6:	4631      	mov	r1, r6
   229d8:	4628      	mov	r0, r5
   229da:	f7e3 f879 	bl	5ad0 <print_formatted>
}
   229de:	e6de      	b.n	2279e <std_print+0x78>

000229e0 <log_output_flush>:
		     log_output->control_block->offset,
   229e0:	6842      	ldr	r2, [r0, #4]
	buffer_write(log_output->func, log_output->buf,
   229e2:	6881      	ldr	r1, [r0, #8]
{
   229e4:	b510      	push	{r4, lr}
   229e6:	4604      	mov	r4, r0
	buffer_write(log_output->func, log_output->buf,
   229e8:	e9d2 2300 	ldrd	r2, r3, [r2]
   229ec:	6800      	ldr	r0, [r0, #0]
   229ee:	f7ff fe8d 	bl	2270c <buffer_write>
	log_output->control_block->offset = 0;
   229f2:	6863      	ldr	r3, [r4, #4]
   229f4:	2200      	movs	r2, #0
   229f6:	601a      	str	r2, [r3, #0]
}
   229f8:	bd10      	pop	{r4, pc}

000229fa <out_func>:
{
   229fa:	b538      	push	{r3, r4, r5, lr}
	if (out_ctx->control_block->offset == out_ctx->size) {
   229fc:	684b      	ldr	r3, [r1, #4]
   229fe:	681a      	ldr	r2, [r3, #0]
   22a00:	68cb      	ldr	r3, [r1, #12]
   22a02:	429a      	cmp	r2, r3
{
   22a04:	4605      	mov	r5, r0
   22a06:	460c      	mov	r4, r1
	if (out_ctx->control_block->offset == out_ctx->size) {
   22a08:	d102      	bne.n	22a10 <out_func+0x16>
		log_output_flush(out_ctx);
   22a0a:	4608      	mov	r0, r1
   22a0c:	f7ff ffe8 	bl	229e0 <log_output_flush>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   22a10:	6863      	ldr	r3, [r4, #4]
   22a12:	f3bf 8f5b 	dmb	ish
   22a16:	e853 2f00 	ldrex	r2, [r3]
   22a1a:	1c51      	adds	r1, r2, #1
   22a1c:	e843 1000 	strex	r0, r1, [r3]
   22a20:	2800      	cmp	r0, #0
   22a22:	d1f8      	bne.n	22a16 <out_func+0x1c>
   22a24:	f3bf 8f5b 	dmb	ish
	out_ctx->buf[idx] = (uint8_t)c;
   22a28:	68a3      	ldr	r3, [r4, #8]
   22a2a:	549d      	strb	r5, [r3, r2]
}
   22a2c:	2000      	movs	r0, #0
   22a2e:	bd38      	pop	{r3, r4, r5, pc}

00022a30 <flash_write_protection_set>:
	return api->write_protection(dev, enable);
   22a30:	6883      	ldr	r3, [r0, #8]
   22a32:	68db      	ldr	r3, [r3, #12]
   22a34:	4718      	bx	r3

00022a36 <nvs_flash_rd>:
{
   22a36:	b470      	push	{r4, r5, r6}
	offset += addr & ADDR_OFFS_MASK;
   22a38:	6806      	ldr	r6, [r0, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22a3a:	8984      	ldrh	r4, [r0, #12]
	rc = flash_read(fs->flash_device, offset, data, len);
   22a3c:	6a80      	ldr	r0, [r0, #40]	; 0x28
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22a3e:	0c0d      	lsrs	r5, r1, #16
	offset += addr & ADDR_OFFS_MASK;
   22a40:	fa16 f181 	uxtah	r1, r6, r1
   22a44:	fb05 1104 	mla	r1, r5, r4, r1
	return api->read(dev, offset, data, len);
   22a48:	6884      	ldr	r4, [r0, #8]
   22a4a:	6824      	ldr	r4, [r4, #0]
   22a4c:	46a4      	mov	ip, r4
}
   22a4e:	bc70      	pop	{r4, r5, r6}
   22a50:	4760      	bx	ip

00022a52 <nvs_flash_block_cmp>:
{
   22a52:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   22a56:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22a58:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22a5a:	681d      	ldr	r5, [r3, #0]
   22a5c:	426d      	negs	r5, r5
{
   22a5e:	b089      	sub	sp, #36	; 0x24
   22a60:	4681      	mov	r9, r0
   22a62:	460e      	mov	r6, r1
   22a64:	4617      	mov	r7, r2
	block_size =
   22a66:	f005 0520 	and.w	r5, r5, #32
	while (len) {
   22a6a:	b91c      	cbnz	r4, 22a74 <nvs_flash_block_cmp+0x22>
	return 0;
   22a6c:	4620      	mov	r0, r4
}
   22a6e:	b009      	add	sp, #36	; 0x24
   22a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		bytes_to_cmp = MIN(block_size, len);
   22a74:	42ac      	cmp	r4, r5
   22a76:	46a0      	mov	r8, r4
   22a78:	bf28      	it	cs
   22a7a:	46a8      	movcs	r8, r5
		rc = nvs_flash_rd(fs, addr, buf, bytes_to_cmp);
   22a7c:	4643      	mov	r3, r8
   22a7e:	466a      	mov	r2, sp
   22a80:	4631      	mov	r1, r6
   22a82:	4648      	mov	r0, r9
   22a84:	f7ff ffd7 	bl	22a36 <nvs_flash_rd>
		if (rc) {
   22a88:	2800      	cmp	r0, #0
   22a8a:	d1f0      	bne.n	22a6e <nvs_flash_block_cmp+0x1c>
		rc = memcmp(data8, buf, bytes_to_cmp);
   22a8c:	4642      	mov	r2, r8
   22a8e:	4669      	mov	r1, sp
   22a90:	4638      	mov	r0, r7
   22a92:	f001 fcd8 	bl	24446 <memcmp>
		if (rc) {
   22a96:	b920      	cbnz	r0, 22aa2 <nvs_flash_block_cmp+0x50>
		len -= bytes_to_cmp;
   22a98:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   22a9c:	4446      	add	r6, r8
		data8 += bytes_to_cmp;
   22a9e:	4447      	add	r7, r8
   22aa0:	e7e3      	b.n	22a6a <nvs_flash_block_cmp+0x18>
			return 1;
   22aa2:	2001      	movs	r0, #1
   22aa4:	e7e3      	b.n	22a6e <nvs_flash_block_cmp+0x1c>

00022aa6 <nvs_flash_cmp_const>:
{
   22aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22aaa:	461c      	mov	r4, r3
		NVS_BLOCK_SIZE & ~(fs->flash_parameters->write_block_size - 1U);
   22aac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   22aae:	681d      	ldr	r5, [r3, #0]
   22ab0:	426d      	negs	r5, r5
{
   22ab2:	b088      	sub	sp, #32
	block_size =
   22ab4:	f005 0520 	and.w	r5, r5, #32
{
   22ab8:	4607      	mov	r7, r0
   22aba:	460e      	mov	r6, r1
	(void)memset(cmp, value, block_size);
   22abc:	4668      	mov	r0, sp
{
   22abe:	4611      	mov	r1, r2
	(void)memset(cmp, value, block_size);
   22ac0:	462a      	mov	r2, r5
   22ac2:	f001 fcfc 	bl	244be <memset>
	while (len) {
   22ac6:	b91c      	cbnz	r4, 22ad0 <nvs_flash_cmp_const+0x2a>
	return 0;
   22ac8:	4620      	mov	r0, r4
}
   22aca:	b008      	add	sp, #32
   22acc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		bytes_to_cmp = MIN(block_size, len);
   22ad0:	42ac      	cmp	r4, r5
   22ad2:	46a0      	mov	r8, r4
   22ad4:	bf28      	it	cs
   22ad6:	46a8      	movcs	r8, r5
		rc = nvs_flash_block_cmp(fs, addr, cmp, bytes_to_cmp);
   22ad8:	4643      	mov	r3, r8
   22ada:	466a      	mov	r2, sp
   22adc:	4631      	mov	r1, r6
   22ade:	4638      	mov	r0, r7
   22ae0:	f7ff ffb7 	bl	22a52 <nvs_flash_block_cmp>
		if (rc) {
   22ae4:	2800      	cmp	r0, #0
   22ae6:	d1f0      	bne.n	22aca <nvs_flash_cmp_const+0x24>
		len -= bytes_to_cmp;
   22ae8:	eba4 0408 	sub.w	r4, r4, r8
		addr += bytes_to_cmp;
   22aec:	4446      	add	r6, r8
   22aee:	e7ea      	b.n	22ac6 <nvs_flash_cmp_const+0x20>

00022af0 <nvs_flash_erase_sector>:
{
   22af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   22af4:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   22af6:	8983      	ldrh	r3, [r0, #12]
   22af8:	7912      	ldrb	r2, [r2, #4]
	addr &= ADDR_SECT_MASK;
   22afa:	0c0e      	lsrs	r6, r1, #16
   22afc:	0436      	lsls	r6, r6, #16
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   22afe:	4631      	mov	r1, r6
{
   22b00:	4605      	mov	r5, r0
	rc = nvs_flash_cmp_const(fs, addr, fs->flash_parameters->erase_value,
   22b02:	f7ff ffd0 	bl	22aa6 <nvs_flash_cmp_const>
	if (rc <= 0) {
   22b06:	1e04      	subs	r4, r0, #0
   22b08:	dd16      	ble.n	22b38 <nvs_flash_erase_sector+0x48>
	rc = flash_write_protection_set(fs->flash_device, false);
   22b0a:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	offset = fs->offset;
   22b0c:	682f      	ldr	r7, [r5, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22b0e:	f8b5 800c 	ldrh.w	r8, [r5, #12]
	rc = flash_write_protection_set(fs->flash_device, false);
   22b12:	2100      	movs	r1, #0
   22b14:	f7ff ff8c 	bl	22a30 <flash_write_protection_set>
	if (rc) {
   22b18:	4604      	mov	r4, r0
   22b1a:	b968      	cbnz	r0, 22b38 <nvs_flash_erase_sector+0x48>
	rc = flash_erase(fs->flash_device, offset, fs->sector_size);
   22b1c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   22b1e:	89aa      	ldrh	r2, [r5, #12]
	return api->erase(dev, offset, size);
   22b20:	6883      	ldr	r3, [r0, #8]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22b22:	0c31      	lsrs	r1, r6, #16
   22b24:	689b      	ldr	r3, [r3, #8]
   22b26:	fb08 7101 	mla	r1, r8, r1, r7
   22b2a:	4798      	blx	r3
	if (rc) {
   22b2c:	4604      	mov	r4, r0
   22b2e:	b918      	cbnz	r0, 22b38 <nvs_flash_erase_sector+0x48>
	(void) flash_write_protection_set(fs->flash_device, true);
   22b30:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   22b32:	2101      	movs	r1, #1
   22b34:	f7ff ff7c 	bl	22a30 <flash_write_protection_set>
}
   22b38:	4620      	mov	r0, r4
   22b3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00022b3e <nvs_ate_crc8_check>:
{
   22b3e:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22b40:	4601      	mov	r1, r0
{
   22b42:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22b44:	2207      	movs	r2, #7
   22b46:	20ff      	movs	r0, #255	; 0xff
   22b48:	f7e1 fd04 	bl	4554 <crc8_ccitt>
	if (crc8 == entry->crc8) {
   22b4c:	79e3      	ldrb	r3, [r4, #7]
}
   22b4e:	1a18      	subs	r0, r3, r0
   22b50:	bf18      	it	ne
   22b52:	2001      	movne	r0, #1
   22b54:	bd10      	pop	{r4, pc}

00022b56 <nvs_ate_crc8_update>:
{
   22b56:	b510      	push	{r4, lr}
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22b58:	4601      	mov	r1, r0
{
   22b5a:	4604      	mov	r4, r0
	crc8 = crc8_ccitt(0xff, entry, offsetof(struct nvs_ate, crc8));
   22b5c:	2207      	movs	r2, #7
   22b5e:	20ff      	movs	r0, #255	; 0xff
   22b60:	f7e1 fcf8 	bl	4554 <crc8_ccitt>
	entry->crc8 = crc8;
   22b64:	71e0      	strb	r0, [r4, #7]
}
   22b66:	bd10      	pop	{r4, pc}

00022b68 <nvs_sector_advance.isra.0>:
	*addr += (1 << ADDR_SECT_SHIFT);
   22b68:	680b      	ldr	r3, [r1, #0]
   22b6a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
	if ((*addr >> ADDR_SECT_SHIFT) == fs->sector_count) {
   22b6e:	0c1a      	lsrs	r2, r3, #16
   22b70:	ebb0 4f13 	cmp.w	r0, r3, lsr #16
		*addr -= (fs->sector_count << ADDR_SECT_SHIFT);
   22b74:	bf08      	it	eq
   22b76:	eba3 4302 	subeq.w	r3, r3, r2, lsl #16
   22b7a:	600b      	str	r3, [r1, #0]
}
   22b7c:	4770      	bx	lr

00022b7e <nvs_al_size.isra.0>:
	if (write_block_size <= 1U) {
   22b7e:	7803      	ldrb	r3, [r0, #0]
   22b80:	2b01      	cmp	r3, #1
	return (len + (write_block_size - 1U)) & ~(write_block_size - 1U);
   22b82:	bf81      	itttt	hi
   22b84:	f101 31ff 	addhi.w	r1, r1, #4294967295
   22b88:	18c9      	addhi	r1, r1, r3
   22b8a:	425b      	neghi	r3, r3
   22b8c:	4019      	andhi	r1, r3
}
   22b8e:	4608      	mov	r0, r1
   22b90:	4770      	bx	lr

00022b92 <nvs_prev_ate>:
{
   22b92:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   22b94:	4604      	mov	r4, r0
   22b96:	460d      	mov	r5, r1
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   22b98:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
   22b9a:	2108      	movs	r1, #8
   22b9c:	f7ff ffef 	bl	22b7e <nvs_al_size.isra.0>
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   22ba0:	6829      	ldr	r1, [r5, #0]
	ate_size = nvs_al_size(fs, sizeof(struct nvs_ate));
   22ba2:	4606      	mov	r6, r0
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   22ba4:	2308      	movs	r3, #8
   22ba6:	4620      	mov	r0, r4
   22ba8:	f7ff ff45 	bl	22a36 <nvs_flash_rd>
	if (rc) {
   22bac:	2800      	cmp	r0, #0
   22bae:	d13e      	bne.n	22c2e <nvs_prev_ate+0x9c>
	*addr += ate_size;
   22bb0:	682b      	ldr	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   22bb2:	89a2      	ldrh	r2, [r4, #12]
	*addr += ate_size;
   22bb4:	4433      	add	r3, r6
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   22bb6:	b299      	uxth	r1, r3
   22bb8:	1b92      	subs	r2, r2, r6
   22bba:	4291      	cmp	r1, r2
	*addr += ate_size;
   22bbc:	602b      	str	r3, [r5, #0]
	if (((*addr) & ADDR_OFFS_MASK) != (fs->sector_size - ate_size)) {
   22bbe:	d136      	bne.n	22c2e <nvs_prev_ate+0x9c>
	if (((*addr) >> ADDR_SECT_SHIFT) == 0U) {
   22bc0:	0c1a      	lsrs	r2, r3, #16
		*addr += ((fs->sector_count - 1) << ADDR_SECT_SHIFT);
   22bc2:	bf03      	ittte	eq
   22bc4:	89e1      	ldrheq	r1, [r4, #14]
   22bc6:	f101 31ff 	addeq.w	r1, r1, #4294967295
   22bca:	eb03 4101 	addeq.w	r1, r3, r1, lsl #16
		*addr -= (1 << ADDR_SECT_SHIFT);
   22bce:	f5a3 3180 	subne.w	r1, r3, #65536	; 0x10000
   22bd2:	6029      	str	r1, [r5, #0]
	return nvs_flash_rd(fs, addr, entry, sizeof(struct nvs_ate));
   22bd4:	2308      	movs	r3, #8
   22bd6:	466a      	mov	r2, sp
   22bd8:	4620      	mov	r0, r4
   22bda:	f7ff ff2c 	bl	22a36 <nvs_flash_rd>
	if (rc) {
   22bde:	bb30      	cbnz	r0, 22c2e <nvs_prev_ate+0x9c>
	rc = nvs_ate_cmp_const(&close_ate, fs->flash_parameters->erase_value);
   22be0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   22be2:	466a      	mov	r2, sp
   22be4:	7919      	ldrb	r1, [r3, #4]
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   22be6:	4603      	mov	r3, r0
		if (data8[i] != value) {
   22be8:	f812 7b01 	ldrb.w	r7, [r2], #1
   22bec:	42b9      	cmp	r1, r7
   22bee:	d115      	bne.n	22c1c <nvs_prev_ate+0x8a>
	for (i = 0; i < sizeof(struct nvs_ate); i++) {
   22bf0:	3301      	adds	r3, #1
   22bf2:	2b08      	cmp	r3, #8
   22bf4:	d1f8      	bne.n	22be8 <nvs_prev_ate+0x56>
		*addr = fs->ate_wra;
   22bf6:	6863      	ldr	r3, [r4, #4]
   22bf8:	e00e      	b.n	22c18 <nvs_prev_ate+0x86>
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   22bfa:	89a3      	ldrh	r3, [r4, #12]
   22bfc:	f8bd 2002 	ldrh.w	r2, [sp, #2]
   22c00:	1b9b      	subs	r3, r3, r6
   22c02:	429a      	cmp	r2, r3
   22c04:	d20f      	bcs.n	22c26 <nvs_prev_ate+0x94>
		    !(close_ate.offset % ate_size)) {
   22c06:	fbb2 f3f6 	udiv	r3, r2, r6
   22c0a:	fb06 2613 	mls	r6, r6, r3, r2
		if (close_ate.offset < (fs->sector_size - ate_size) &&
   22c0e:	b956      	cbnz	r6, 22c26 <nvs_prev_ate+0x94>
			(*addr) &= ADDR_SECT_MASK;
   22c10:	682b      	ldr	r3, [r5, #0]
   22c12:	0c1b      	lsrs	r3, r3, #16
   22c14:	041b      	lsls	r3, r3, #16
			(*addr) += close_ate.offset;
   22c16:	4413      	add	r3, r2
		*addr = fs->ate_wra;
   22c18:	602b      	str	r3, [r5, #0]
		return 0;
   22c1a:	e008      	b.n	22c2e <nvs_prev_ate+0x9c>
	if (!nvs_ate_crc8_check(&close_ate)) {
   22c1c:	4668      	mov	r0, sp
   22c1e:	f7ff ff8e 	bl	22b3e <nvs_ate_crc8_check>
   22c22:	2800      	cmp	r0, #0
   22c24:	d0e9      	beq.n	22bfa <nvs_prev_ate+0x68>
	return nvs_recover_last_ate(fs, addr);
   22c26:	4629      	mov	r1, r5
   22c28:	4620      	mov	r0, r4
   22c2a:	f7e3 fa4d 	bl	60c8 <nvs_recover_last_ate>
}
   22c2e:	b003      	add	sp, #12
   22c30:	bdf0      	pop	{r4, r5, r6, r7, pc}

00022c32 <nvs_flash_al_wrt.part.0>:
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22c32:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	offset = fs->offset;
   22c36:	f8d0 a000 	ldr.w	sl, [r0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22c3a:	f8b0 900c 	ldrh.w	r9, [r0, #12]
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22c3e:	b088      	sub	sp, #32
   22c40:	4605      	mov	r5, r0
   22c42:	460c      	mov	r4, r1
	rc = flash_write_protection_set(fs->flash_device, false);
   22c44:	6a80      	ldr	r0, [r0, #40]	; 0x28
   22c46:	2100      	movs	r1, #0
static int nvs_flash_al_wrt(struct nvs_fs *fs, uint32_t addr, const void *data,
   22c48:	4690      	mov	r8, r2
   22c4a:	461e      	mov	r6, r3
	rc = flash_write_protection_set(fs->flash_device, false);
   22c4c:	f7ff fef0 	bl	22a30 <flash_write_protection_set>
	if (rc) {
   22c50:	2800      	cmp	r0, #0
   22c52:	d134      	bne.n	22cbe <nvs_flash_al_wrt.part.0+0x8c>
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   22c54:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22c56:	681b      	ldr	r3, [r3, #0]
	offset += fs->sector_size * (addr >> ADDR_SECT_SHIFT);
   22c58:	0c27      	lsrs	r7, r4, #16
	offset += addr & ADDR_OFFS_MASK;
   22c5a:	fa1a f484 	uxtah	r4, sl, r4
   22c5e:	fb09 4707 	mla	r7, r9, r7, r4
	blen = len & ~(fs->flash_parameters->write_block_size - 1U);
   22c62:	f1c3 0900 	rsb	r9, r3, #0
	if (blen > 0) {
   22c66:	ea19 0906 	ands.w	r9, r9, r6
   22c6a:	d00c      	beq.n	22c86 <nvs_flash_al_wrt.part.0+0x54>
		rc = flash_write(fs->flash_device, offset, data8, blen);
   22c6c:	6aa8      	ldr	r0, [r5, #40]	; 0x28
	return api->write(dev, offset, data, len);
   22c6e:	6883      	ldr	r3, [r0, #8]
   22c70:	4642      	mov	r2, r8
   22c72:	685c      	ldr	r4, [r3, #4]
   22c74:	4639      	mov	r1, r7
   22c76:	464b      	mov	r3, r9
   22c78:	47a0      	blx	r4
		if (rc) {
   22c7a:	4604      	mov	r4, r0
   22c7c:	b9d0      	cbnz	r0, 22cb4 <nvs_flash_al_wrt.part.0+0x82>
		len -= blen;
   22c7e:	eba6 0609 	sub.w	r6, r6, r9
		offset += blen;
   22c82:	444f      	add	r7, r9
		data8 += blen;
   22c84:	44c8      	add	r8, r9
	if (len) {
   22c86:	b1ee      	cbz	r6, 22cc4 <nvs_flash_al_wrt.part.0+0x92>
		memcpy(buf, data8, len);
   22c88:	4632      	mov	r2, r6
   22c8a:	4641      	mov	r1, r8
   22c8c:	4668      	mov	r0, sp
   22c8e:	f001 fbeb 	bl	24468 <memcpy>
		(void)memset(buf + len, fs->flash_parameters->erase_value,
   22c92:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
   22c94:	681a      	ldr	r2, [r3, #0]
   22c96:	7919      	ldrb	r1, [r3, #4]
   22c98:	1b92      	subs	r2, r2, r6
   22c9a:	eb0d 0006 	add.w	r0, sp, r6
   22c9e:	f001 fc0e 	bl	244be <memset>
		rc = flash_write(fs->flash_device, offset, buf,
   22ca2:	e9d5 030a 	ldrd	r0, r3, [r5, #40]	; 0x28
   22ca6:	681b      	ldr	r3, [r3, #0]
   22ca8:	6882      	ldr	r2, [r0, #8]
   22caa:	4639      	mov	r1, r7
   22cac:	6854      	ldr	r4, [r2, #4]
   22cae:	466a      	mov	r2, sp
   22cb0:	47a0      	blx	r4
   22cb2:	4604      	mov	r4, r0
	(void) flash_write_protection_set(fs->flash_device, true);
   22cb4:	6aa8      	ldr	r0, [r5, #40]	; 0x28
   22cb6:	2101      	movs	r1, #1
   22cb8:	f7ff feba 	bl	22a30 <flash_write_protection_set>
	return rc;
   22cbc:	4620      	mov	r0, r4
}
   22cbe:	b008      	add	sp, #32
   22cc0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
end:
   22cc4:	4634      	mov	r4, r6
   22cc6:	e7f5      	b.n	22cb4 <nvs_flash_al_wrt.part.0+0x82>

00022cc8 <nvs_flash_data_wrt>:
{
   22cc8:	b538      	push	{r3, r4, r5, lr}
   22cca:	4604      	mov	r4, r0
	if (!len) {
   22ccc:	4615      	mov	r5, r2
   22cce:	b12a      	cbz	r2, 22cdc <nvs_flash_data_wrt+0x14>
   22cd0:	4613      	mov	r3, r2
   22cd2:	460a      	mov	r2, r1
   22cd4:	6881      	ldr	r1, [r0, #8]
   22cd6:	f7ff ffac 	bl	22c32 <nvs_flash_al_wrt.part.0>
   22cda:	4602      	mov	r2, r0
	fs->data_wra += nvs_al_size(fs, len);
   22cdc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22cde:	4629      	mov	r1, r5
   22ce0:	f7ff ff4d 	bl	22b7e <nvs_al_size.isra.0>
   22ce4:	68a3      	ldr	r3, [r4, #8]
   22ce6:	4403      	add	r3, r0
   22ce8:	60a3      	str	r3, [r4, #8]
}
   22cea:	4610      	mov	r0, r2
   22cec:	bd38      	pop	{r3, r4, r5, pc}

00022cee <nvs_flash_ate_wrt>:
{
   22cee:	b510      	push	{r4, lr}
   22cf0:	460a      	mov	r2, r1
	if (!len) {
   22cf2:	2308      	movs	r3, #8
   22cf4:	6841      	ldr	r1, [r0, #4]
{
   22cf6:	4604      	mov	r4, r0
   22cf8:	f7ff ff9b 	bl	22c32 <nvs_flash_al_wrt.part.0>
	fs->ate_wra -= nvs_al_size(fs, sizeof(struct nvs_ate));
   22cfc:	2108      	movs	r1, #8
   22cfe:	4602      	mov	r2, r0
   22d00:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   22d02:	f7ff ff3c 	bl	22b7e <nvs_al_size.isra.0>
   22d06:	6863      	ldr	r3, [r4, #4]
   22d08:	1a1b      	subs	r3, r3, r0
   22d0a:	6063      	str	r3, [r4, #4]
}
   22d0c:	4610      	mov	r0, r2
   22d0e:	bd10      	pop	{r4, pc}

00022d10 <nvs_delete>:
	return nvs_write(fs, id, NULL, 0);
   22d10:	2300      	movs	r3, #0
   22d12:	461a      	mov	r2, r3
   22d14:	f7e3 bc1c 	b.w	6550 <nvs_write>

00022d18 <nvs_read>:

ssize_t nvs_read(struct nvs_fs *fs, uint16_t id, void *data, size_t len)
{
   22d18:	b513      	push	{r0, r1, r4, lr}
	int rc;

	rc = nvs_read_hist(fs, id, data, len, 0);
   22d1a:	2400      	movs	r4, #0
   22d1c:	9400      	str	r4, [sp, #0]
   22d1e:	f7e3 fceb 	bl	66f8 <nvs_read_hist>
	return rc;
}
   22d22:	b002      	add	sp, #8
   22d24:	bd10      	pop	{r4, pc}

00022d26 <device_get_binding>:
   22d26:	f7fc bd07 	b.w	1f738 <z_impl_device_get_binding>

00022d2a <get_sectors_cb>:
{
   22d2a:	b570      	push	{r4, r5, r6, lr}
	if (info->start_offset < data->area_off) {
   22d2c:	6802      	ldr	r2, [r0, #0]
   22d2e:	684c      	ldr	r4, [r1, #4]
   22d30:	42a2      	cmp	r2, r4
   22d32:	d316      	bcc.n	22d62 <get_sectors_cb+0x38>
	} else if (info->start_offset >= data->area_off + data->area_len) {
   22d34:	688b      	ldr	r3, [r1, #8]
   22d36:	4423      	add	r3, r4
   22d38:	429a      	cmp	r2, r3
   22d3a:	d206      	bcs.n	22d4a <get_sectors_cb+0x20>
	} else if (data->ret_idx >= data->ret_len) {
   22d3c:	e9d1 3504 	ldrd	r3, r5, [r1, #16]
   22d40:	42ab      	cmp	r3, r5
   22d42:	d304      	bcc.n	22d4e <get_sectors_cb+0x24>
		data->status = -ENOMEM;
   22d44:	f06f 030b 	mvn.w	r3, #11
   22d48:	618b      	str	r3, [r1, #24]
		*bail_value = false;
   22d4a:	2000      	movs	r0, #0
   22d4c:	e00a      	b.n	22d64 <get_sectors_cb+0x3a>
	ret[data->ret_idx].fs_off = info->start_offset - data->area_off;
   22d4e:	68cd      	ldr	r5, [r1, #12]
   22d50:	1b12      	subs	r2, r2, r4
   22d52:	eb05 06c3 	add.w	r6, r5, r3, lsl #3
   22d56:	f845 2033 	str.w	r2, [r5, r3, lsl #3]
	ret[data->ret_idx].fs_size = info->size;
   22d5a:	6842      	ldr	r2, [r0, #4]
   22d5c:	6072      	str	r2, [r6, #4]
	data->ret_idx++;
   22d5e:	3301      	adds	r3, #1
   22d60:	610b      	str	r3, [r1, #16]
		*bail_value = true;
   22d62:	2001      	movs	r0, #1
}
   22d64:	bd70      	pop	{r4, r5, r6, pc}

00022d66 <settings_load>:
	return settings_load_subtree(NULL);
   22d66:	2000      	movs	r0, #0
   22d68:	f7e3 bdba 	b.w	68e0 <settings_load_subtree>

00022d6c <settings_delete>:
	return settings_save_one(name, NULL, 0);
   22d6c:	2200      	movs	r2, #0
   22d6e:	4611      	mov	r1, r2
   22d70:	f7e3 bd7c 	b.w	686c <settings_save_one>

00022d74 <settings_name_steq>:
{
   22d74:	4603      	mov	r3, r0
   22d76:	b530      	push	{r4, r5, lr}
   22d78:	4608      	mov	r0, r1
	if (next) {
   22d7a:	b10a      	cbz	r2, 22d80 <settings_name_steq+0xc>
		*next = NULL;
   22d7c:	2100      	movs	r1, #0
   22d7e:	6011      	str	r1, [r2, #0]
	if ((!name) || (!key)) {
   22d80:	b163      	cbz	r3, 22d9c <settings_name_steq+0x28>
   22d82:	b190      	cbz	r0, 22daa <settings_name_steq+0x36>
   22d84:	1e41      	subs	r1, r0, #1
   22d86:	4618      	mov	r0, r3
	while ((*key != '\0') && (*key == *name) &&
   22d88:	f811 5f01 	ldrb.w	r5, [r1, #1]!
   22d8c:	4604      	mov	r4, r0
   22d8e:	f810 3b01 	ldrb.w	r3, [r0], #1
   22d92:	b15d      	cbz	r5, 22dac <settings_name_steq+0x38>
   22d94:	429d      	cmp	r5, r3
   22d96:	d101      	bne.n	22d9c <settings_name_steq+0x28>
	       (*name != '\0') && (*name != SETTINGS_NAME_END)) {
   22d98:	2d3d      	cmp	r5, #61	; 0x3d
   22d9a:	d1f5      	bne.n	22d88 <settings_name_steq+0x14>
	return 0;
   22d9c:	2000      	movs	r0, #0
   22d9e:	e004      	b.n	22daa <settings_name_steq+0x36>
	if ((*name == SETTINGS_NAME_END) || (*name == '\0')) {
   22da0:	2b3d      	cmp	r3, #61	; 0x3d
   22da2:	d008      	beq.n	22db6 <settings_name_steq+0x42>
   22da4:	fab3 f083 	clz	r0, r3
   22da8:	0940      	lsrs	r0, r0, #5
}
   22daa:	bd30      	pop	{r4, r5, pc}
	if (*name == SETTINGS_NAME_SEPARATOR) {
   22dac:	2b2f      	cmp	r3, #47	; 0x2f
   22dae:	d1f7      	bne.n	22da0 <settings_name_steq+0x2c>
		if (next) {
   22db0:	b10a      	cbz	r2, 22db6 <settings_name_steq+0x42>
			*next = name + 1;
   22db2:	3401      	adds	r4, #1
   22db4:	6014      	str	r4, [r2, #0]
		return 1;
   22db6:	2001      	movs	r0, #1
   22db8:	e7f7      	b.n	22daa <settings_name_steq+0x36>

00022dba <settings_name_next>:
{
   22dba:	b530      	push	{r4, r5, lr}
   22dbc:	4603      	mov	r3, r0
	if (next) {
   22dbe:	b109      	cbz	r1, 22dc4 <settings_name_next+0xa>
		*next = NULL;
   22dc0:	2200      	movs	r2, #0
   22dc2:	600a      	str	r2, [r1, #0]
	if (!name) {
   22dc4:	b16b      	cbz	r3, 22de2 <settings_name_next+0x28>
   22dc6:	461a      	mov	r2, r3
   22dc8:	4614      	mov	r4, r2
   22dca:	1ad0      	subs	r0, r2, r3
	while ((*name != '\0') && (*name != SETTINGS_NAME_END) &&
   22dcc:	f812 5b01 	ldrb.w	r5, [r2], #1
   22dd0:	b135      	cbz	r5, 22de0 <settings_name_next+0x26>
   22dd2:	2d3d      	cmp	r5, #61	; 0x3d
   22dd4:	d004      	beq.n	22de0 <settings_name_next+0x26>
   22dd6:	2d2f      	cmp	r5, #47	; 0x2f
   22dd8:	d1f6      	bne.n	22dc8 <settings_name_next+0xe>
		if (next) {
   22dda:	b109      	cbz	r1, 22de0 <settings_name_next+0x26>
			*next = name + 1;
   22ddc:	3401      	adds	r4, #1
   22dde:	600c      	str	r4, [r1, #0]
}
   22de0:	bd30      	pop	{r4, r5, pc}
		return 0;
   22de2:	4618      	mov	r0, r3
   22de4:	e7fc      	b.n	22de0 <settings_name_next+0x26>

00022de6 <settings_nvs_read_fn>:
{
   22de6:	b510      	push	{r4, lr}
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   22de8:	4613      	mov	r3, r2
{
   22dea:	4614      	mov	r4, r2
	rc = nvs_read(rd_fn_arg->fs, rd_fn_arg->id, data, len);
   22dec:	460a      	mov	r2, r1
   22dee:	8881      	ldrh	r1, [r0, #4]
   22df0:	6800      	ldr	r0, [r0, #0]
   22df2:	f7ff ff91 	bl	22d18 <nvs_read>
}
   22df6:	42a0      	cmp	r0, r4
   22df8:	bfa8      	it	ge
   22dfa:	4620      	movge	r0, r4
   22dfc:	bd10      	pop	{r4, pc}

00022dfe <settings_nvs_save>:
{
   22dfe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22e02:	b097      	sub	sp, #92	; 0x5c
   22e04:	4604      	mov	r4, r0
   22e06:	9201      	str	r2, [sp, #4]
   22e08:	469b      	mov	fp, r3
	if (!name) {
   22e0a:	4689      	mov	r9, r1
   22e0c:	2900      	cmp	r1, #0
   22e0e:	d069      	beq.n	22ee4 <settings_nvs_save+0xe6>
	delete = ((value == NULL) || (val_len == 0));
   22e10:	b1da      	cbz	r2, 22e4a <settings_nvs_save+0x4c>
   22e12:	fabb f78b 	clz	r7, fp
   22e16:	097f      	lsrs	r7, r7, #5
	name_id = cf->last_name_id + 1;
   22e18:	8f25      	ldrh	r5, [r4, #56]	; 0x38
   22e1a:	3501      	adds	r5, #1
   22e1c:	b2ad      	uxth	r5, r5
	write_name_id = cf->last_name_id + 1;
   22e1e:	46a8      	mov	r8, r5
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   22e20:	f104 0a08 	add.w	sl, r4, #8
		name_id--;
   22e24:	1e6e      	subs	r6, r5, #1
   22e26:	b2b6      	uxth	r6, r6
		if (name_id == NVS_NAMECNT_ID) {
   22e28:	f5b6 4f00 	cmp.w	r6, #32768	; 0x8000
   22e2c:	d02e      	beq.n	22e8c <settings_nvs_save+0x8e>
		rc = nvs_read(&cf->cf_nvs, name_id, &rdname, sizeof(rdname));
   22e2e:	234a      	movs	r3, #74	; 0x4a
   22e30:	aa03      	add	r2, sp, #12
   22e32:	4631      	mov	r1, r6
   22e34:	4650      	mov	r0, sl
   22e36:	f7ff ff6f 	bl	22d18 <nvs_read>
		if (rc < 0) {
   22e3a:	2800      	cmp	r0, #0
   22e3c:	da07      	bge.n	22e4e <settings_nvs_save+0x50>
			if (rc == -ENOENT) {
   22e3e:	f110 0f02 	cmn.w	r0, #2
   22e42:	bf08      	it	eq
   22e44:	46b0      	moveq	r8, r6
   22e46:	4635      	mov	r5, r6
   22e48:	e7ec      	b.n	22e24 <settings_nvs_save+0x26>
	delete = ((value == NULL) || (val_len == 0));
   22e4a:	2701      	movs	r7, #1
   22e4c:	e7e4      	b.n	22e18 <settings_nvs_save+0x1a>
		rdname[rc] = '\0';
   22e4e:	ab16      	add	r3, sp, #88	; 0x58
   22e50:	4418      	add	r0, r3
   22e52:	2300      	movs	r3, #0
   22e54:	f800 3c4c 	strb.w	r3, [r0, #-76]
		if (strcmp(name, rdname)) {
   22e58:	a903      	add	r1, sp, #12
   22e5a:	4648      	mov	r0, r9
   22e5c:	f001 fad6 	bl	2440c <strcmp>
   22e60:	2800      	cmp	r0, #0
   22e62:	d1f0      	bne.n	22e46 <settings_nvs_save+0x48>
		if ((delete) && (name_id == cf->last_name_id)) {
   22e64:	2f00      	cmp	r7, #0
   22e66:	d03b      	beq.n	22ee0 <settings_nvs_save+0xe2>
   22e68:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   22e6a:	42b3      	cmp	r3, r6
   22e6c:	d142      	bne.n	22ef4 <settings_nvs_save+0xf6>
			cf->last_name_id--;
   22e6e:	4622      	mov	r2, r4
   22e70:	1e73      	subs	r3, r6, #1
   22e72:	f822 3f38 	strh.w	r3, [r2, #56]!
			rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID,
   22e76:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22e7a:	2302      	movs	r3, #2
   22e7c:	4650      	mov	r0, sl
   22e7e:	f7e3 fb67 	bl	6550 <nvs_write>
			if (rc < 0) {
   22e82:	2800      	cmp	r0, #0
   22e84:	da36      	bge.n	22ef4 <settings_nvs_save+0xf6>
}
   22e86:	b017      	add	sp, #92	; 0x5c
   22e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (delete) {
   22e8c:	bb6f      	cbnz	r7, 22eea <settings_nvs_save+0xec>
	write_name = true;
   22e8e:	2701      	movs	r7, #1
	if (write_name_id == NVS_NAMECNT_ID + NVS_NAME_ID_OFFSET) {
   22e90:	f5b8 4f40 	cmp.w	r8, #49152	; 0xc000
   22e94:	d02b      	beq.n	22eee <settings_nvs_save+0xf0>
	rc = nvs_write(&cf->cf_nvs, write_name_id + NVS_NAME_ID_OFFSET,
   22e96:	f104 0508 	add.w	r5, r4, #8
   22e9a:	f508 4180 	add.w	r1, r8, #16384	; 0x4000
   22e9e:	9a01      	ldr	r2, [sp, #4]
   22ea0:	465b      	mov	r3, fp
   22ea2:	b289      	uxth	r1, r1
   22ea4:	4628      	mov	r0, r5
   22ea6:	f7e3 fb53 	bl	6550 <nvs_write>
	if (rc < 0) {
   22eaa:	2800      	cmp	r0, #0
   22eac:	dbeb      	blt.n	22e86 <settings_nvs_save+0x88>
	if (write_name) {
   22eae:	b157      	cbz	r7, 22ec6 <settings_nvs_save+0xc8>
		rc = nvs_write(&cf->cf_nvs, write_name_id, name, strlen(name));
   22eb0:	4648      	mov	r0, r9
   22eb2:	f001 fa9b 	bl	243ec <strlen>
   22eb6:	464a      	mov	r2, r9
   22eb8:	4603      	mov	r3, r0
   22eba:	4641      	mov	r1, r8
   22ebc:	4628      	mov	r0, r5
   22ebe:	f7e3 fb47 	bl	6550 <nvs_write>
		if (rc < 0) {
   22ec2:	2800      	cmp	r0, #0
   22ec4:	dbdf      	blt.n	22e86 <settings_nvs_save+0x88>
	if (write_name_id > cf->last_name_id) {
   22ec6:	8f23      	ldrh	r3, [r4, #56]	; 0x38
   22ec8:	4543      	cmp	r3, r8
   22eca:	d220      	bcs.n	22f0e <settings_nvs_save+0x110>
		cf->last_name_id = write_name_id;
   22ecc:	4622      	mov	r2, r4
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   22ece:	2302      	movs	r3, #2
		cf->last_name_id = write_name_id;
   22ed0:	f822 8f38 	strh.w	r8, [r2, #56]!
		rc = nvs_write(&cf->cf_nvs, NVS_NAMECNT_ID, &cf->last_name_id,
   22ed4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22ed8:	4628      	mov	r0, r5
   22eda:	f7e3 fb39 	bl	6550 <nvs_write>
   22ede:	e016      	b.n	22f0e <settings_nvs_save+0x110>
   22ee0:	46b0      	mov	r8, r6
   22ee2:	e7d5      	b.n	22e90 <settings_nvs_save+0x92>
		return -EINVAL;
   22ee4:	f06f 0015 	mvn.w	r0, #21
   22ee8:	e7cd      	b.n	22e86 <settings_nvs_save+0x88>
		return 0;
   22eea:	2000      	movs	r0, #0
   22eec:	e7cb      	b.n	22e86 <settings_nvs_save+0x88>
		return -ENOMEM;
   22eee:	f06f 000b 	mvn.w	r0, #11
   22ef2:	e7c8      	b.n	22e86 <settings_nvs_save+0x88>
			rc = nvs_delete(&cf->cf_nvs, name_id);
   22ef4:	4631      	mov	r1, r6
   22ef6:	4650      	mov	r0, sl
   22ef8:	f7ff ff0a 	bl	22d10 <nvs_delete>
			if (rc >= 0) {
   22efc:	2800      	cmp	r0, #0
   22efe:	dbc2      	blt.n	22e86 <settings_nvs_save+0x88>
				rc = nvs_delete(&cf->cf_nvs, name_id +
   22f00:	f505 517f 	add.w	r1, r5, #16320	; 0x3fc0
   22f04:	313f      	adds	r1, #63	; 0x3f
   22f06:	b289      	uxth	r1, r1
   22f08:	4650      	mov	r0, sl
   22f0a:	f7ff ff01 	bl	22d10 <nvs_delete>
	if (rc < 0) {
   22f0e:	ea00 70e0 	and.w	r0, r0, r0, asr #31
   22f12:	e7b8      	b.n	22e86 <settings_nvs_save+0x88>

00022f14 <settings_nvs_backend_init>:
{
   22f14:	b573      	push	{r0, r1, r4, r5, r6, lr}
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   22f16:	f100 0608 	add.w	r6, r0, #8
   22f1a:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
{
   22f1c:	4604      	mov	r4, r0
	rc = nvs_init(&cf->cf_nvs, cf->flash_dev_name);
   22f1e:	4630      	mov	r0, r6
   22f20:	f7e3 f9aa 	bl	6278 <nvs_init>
	if (rc) {
   22f24:	4605      	mov	r5, r0
   22f26:	b970      	cbnz	r0, 22f46 <settings_nvs_backend_init+0x32>
	rc = nvs_read(&cf->cf_nvs, NVS_NAMECNT_ID, &last_name_id,
   22f28:	2302      	movs	r3, #2
   22f2a:	f10d 0206 	add.w	r2, sp, #6
   22f2e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
   22f32:	4630      	mov	r0, r6
   22f34:	f7ff fef0 	bl	22d18 <nvs_read>
	if (rc < 0) {
   22f38:	2800      	cmp	r0, #0
		cf->last_name_id = last_name_id;
   22f3a:	bfac      	ite	ge
   22f3c:	f8bd 3006 	ldrhge.w	r3, [sp, #6]
		cf->last_name_id = NVS_NAMECNT_ID;
   22f40:	f44f 4300 	movlt.w	r3, #32768	; 0x8000
		cf->last_name_id = last_name_id;
   22f44:	8723      	strh	r3, [r4, #56]	; 0x38
}
   22f46:	4628      	mov	r0, r5
   22f48:	b002      	add	sp, #8
   22f4a:	bd70      	pop	{r4, r5, r6, pc}

00022f4c <pm_policy_next_state>:
			return pm_min_residency[i];
		}
	}

	LOG_DBG("No suitable power state found!");
	return (struct pm_state_info){PM_STATE_ACTIVE, 0, 0};
   22f4c:	2200      	movs	r2, #0
   22f4e:	8002      	strh	r2, [r0, #0]
   22f50:	6042      	str	r2, [r0, #4]
}
   22f52:	4770      	bx	lr

00022f54 <get_status>:
	return GET_STATUS(get_sub_data(dev, type)->flags);
   22f54:	68c3      	ldr	r3, [r0, #12]
   22f56:	b2c9      	uxtb	r1, r1
   22f58:	220c      	movs	r2, #12
   22f5a:	fb01 3302 	mla	r3, r1, r2, r3
   22f5e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
   22f60:	f000 0007 	and.w	r0, r0, #7
   22f64:	4770      	bx	lr

00022f66 <set_on_state>:
	__asm__ volatile(
   22f66:	f04f 0320 	mov.w	r3, #32
   22f6a:	f3ef 8211 	mrs	r2, BASEPRI
   22f6e:	f383 8811 	msr	BASEPRI, r3
   22f72:	f3bf 8f6f 	isb	sy
	*flags = CLOCK_CONTROL_STATUS_ON | GET_CTX(*flags);
   22f76:	6803      	ldr	r3, [r0, #0]
   22f78:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   22f7c:	f043 0302 	orr.w	r3, r3, #2
   22f80:	6003      	str	r3, [r0, #0]
	__asm__ volatile(
   22f82:	f382 8811 	msr	BASEPRI, r2
   22f86:	f3bf 8f6f 	isb	sy
}
   22f8a:	4770      	bx	lr

00022f8c <stop>:
{
   22f8c:	4603      	mov	r3, r0
   22f8e:	b570      	push	{r4, r5, r6, lr}
	struct nrf_clock_control_data *data = dev->data;
   22f90:	68c0      	ldr	r0, [r0, #12]
	return &data->subsys[type];
   22f92:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22f94:	f04f 0420 	mov.w	r4, #32
   22f98:	f3ef 8611 	mrs	r6, BASEPRI
   22f9c:	f384 8811 	msr	BASEPRI, r4
   22fa0:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   22fa4:	250c      	movs	r5, #12
   22fa6:	fb05 0401 	mla	r4, r5, r1, r0
   22faa:	6c24      	ldr	r4, [r4, #64]	; 0x40
	if ((current_ctx != 0) && (current_ctx != ctx)) {
   22fac:	f014 04c0 	ands.w	r4, r4, #192	; 0xc0
   22fb0:	d001      	beq.n	22fb6 <stop+0x2a>
   22fb2:	42a2      	cmp	r2, r4
   22fb4:	d111      	bne.n	22fda <stop+0x4e>
		*flags = CLOCK_CONTROL_STATUS_OFF;
   22fb6:	fb05 0001 	mla	r0, r5, r1, r0
   22fba:	2201      	movs	r2, #1
   22fbc:	6402      	str	r2, [r0, #64]	; 0x40
	int err = 0;
   22fbe:	2000      	movs	r0, #0
	__asm__ volatile(
   22fc0:	f386 8811 	msr	BASEPRI, r6
   22fc4:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   22fc8:	b930      	cbnz	r0, 22fd8 <stop+0x4c>
	get_sub_config(dev, type)->stop();
   22fca:	685b      	ldr	r3, [r3, #4]
   22fcc:	220c      	movs	r2, #12
   22fce:	fb02 3101 	mla	r1, r2, r1, r3
   22fd2:	684b      	ldr	r3, [r1, #4]
   22fd4:	4798      	blx	r3
	return 0;
   22fd6:	2000      	movs	r0, #0
}
   22fd8:	bd70      	pop	{r4, r5, r6, pc}
		err = -EPERM;
   22fda:	f04f 30ff 	mov.w	r0, #4294967295
   22fde:	e7ef      	b.n	22fc0 <stop+0x34>

00022fe0 <api_stop>:
	return stop(dev, subsys, CTX_API);
   22fe0:	2280      	movs	r2, #128	; 0x80
   22fe2:	f7ff bfd3 	b.w	22f8c <stop>

00022fe6 <async_start>:
{
   22fe6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22fe8:	9f06      	ldr	r7, [sp, #24]
	struct nrf_clock_control_data *data = dev->data;
   22fea:	68c4      	ldr	r4, [r0, #12]
{
   22fec:	4605      	mov	r5, r0
   22fee:	b2c9      	uxtb	r1, r1
	__asm__ volatile(
   22ff0:	f04f 0020 	mov.w	r0, #32
   22ff4:	f3ef 8c11 	mrs	ip, BASEPRI
   22ff8:	f380 8811 	msr	BASEPRI, r0
   22ffc:	f3bf 8f6f 	isb	sy
	uint32_t current_ctx = GET_CTX(*flags);
   23000:	260c      	movs	r6, #12
   23002:	fb06 4601 	mla	r6, r6, r1, r4
   23006:	6c30      	ldr	r0, [r6, #64]	; 0x40
	if ((*flags & (STATUS_MASK)) == CLOCK_CONTROL_STATUS_OFF) {
   23008:	f000 0e07 	and.w	lr, r0, #7
   2300c:	f1be 0f01 	cmp.w	lr, #1
   23010:	d110      	bne.n	23034 <async_start+0x4e>
		*flags = CLOCK_CONTROL_STATUS_STARTING | ctx;
   23012:	6437      	str	r7, [r6, #64]	; 0x40
	int err = 0;
   23014:	2600      	movs	r6, #0
	__asm__ volatile(
   23016:	f38c 8811 	msr	BASEPRI, ip
   2301a:	f3bf 8f6f 	isb	sy
	if (err < 0) {
   2301e:	b93e      	cbnz	r6, 23030 <async_start+0x4a>
	subdata->cb = cb;
   23020:	200c      	movs	r0, #12
   23022:	4341      	muls	r1, r0
   23024:	440c      	add	r4, r1
	subdata->user_data = user_data;
   23026:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
	 get_sub_config(dev, type)->start();
   2302a:	686b      	ldr	r3, [r5, #4]
   2302c:	585b      	ldr	r3, [r3, r1]
   2302e:	4798      	blx	r3
}
   23030:	4630      	mov	r0, r6
   23032:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uint32_t current_ctx = GET_CTX(*flags);
   23034:	f000 00c0 	and.w	r0, r0, #192	; 0xc0
		err = -EALREADY;
   23038:	4287      	cmp	r7, r0
   2303a:	bf14      	ite	ne
   2303c:	f04f 36ff 	movne.w	r6, #4294967295
   23040:	f06f 0644 	mvneq.w	r6, #68	; 0x44
   23044:	e7e7      	b.n	23016 <async_start+0x30>

00023046 <api_start>:
{
   23046:	b513      	push	{r0, r1, r4, lr}
	return async_start(dev, subsys, cb, user_data, CTX_API);
   23048:	2480      	movs	r4, #128	; 0x80
   2304a:	9400      	str	r4, [sp, #0]
   2304c:	f7ff ffcb 	bl	22fe6 <async_start>
}
   23050:	b002      	add	sp, #8
   23052:	bd10      	pop	{r4, pc}

00023054 <onoff_started_callback>:
	return &data->mgr[type];
   23054:	68c0      	ldr	r0, [r0, #12]
{
   23056:	b410      	push	{r4}
	return &data->mgr[type];
   23058:	b2cb      	uxtb	r3, r1
	notify(mgr, 0);
   2305a:	241c      	movs	r4, #28
   2305c:	fb03 0004 	mla	r0, r3, r4, r0
   23060:	2100      	movs	r1, #0
}
   23062:	bc10      	pop	{r4}
	notify(mgr, 0);
   23064:	4710      	bx	r2

00023066 <lfclk_start>:
    nrfx_clock_start(NRF_CLOCK_DOMAIN_LFCLK);
   23066:	2000      	movs	r0, #0
   23068:	f003 bca7 	b.w	269ba <nrfx_clock_start>

0002306c <lfclk_stop>:
    nrfx_clock_stop(NRF_CLOCK_DOMAIN_LFCLK);
   2306c:	2000      	movs	r0, #0
   2306e:	f7fb be6d 	b.w	1ed4c <nrfx_clock_stop>

00023072 <blocking_start_callback>:
{
   23072:	4610      	mov	r0, r2
	z_impl_k_sem_give(sem);
   23074:	f7fd b9f6 	b.w	20464 <z_impl_k_sem_give>

00023078 <z_clock_isr>:
/* Weak-linked noop defaults for optional driver interfaces: */

void __weak z_clock_isr(void *arg)
{
	__ASSERT_NO_MSG(false);
}
   23078:	4770      	bx	lr

0002307a <z_clock_idle_exit>:
{
}

void __weak z_clock_idle_exit(void)
{
}
   2307a:	4770      	bx	lr

0002307c <SEGGER_RTT_Init>:
*    Initializes the RTT Control Block.
*    Should be used in RAM targets, at start of the application.
*
*/
void SEGGER_RTT_Init (void) {
  _DoInit();
   2307c:	f7e4 b962 	b.w	7344 <_DoInit>

00023080 <rtt_init>:
 */

K_MUTEX_DEFINE(rtt_term_mutex);

static int rtt_init(const struct device *unused)
{
   23080:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	SEGGER_RTT_Init();
   23082:	f7ff fffb 	bl	2307c <SEGGER_RTT_Init>

	return 0;
}
   23086:	2000      	movs	r0, #0
   23088:	bd08      	pop	{r3, pc}

0002308a <_copy>:

#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
   2308a:	b538      	push	{r3, r4, r5, lr}
   2308c:	460d      	mov	r5, r1
	if (from_len <= to_len) {
   2308e:	42ab      	cmp	r3, r5
{
   23090:	4611      	mov	r1, r2
   23092:	461c      	mov	r4, r3
	if (from_len <= to_len) {
   23094:	d804      	bhi.n	230a0 <_copy+0x16>
		(void)memcpy(to, from, from_len);
   23096:	461a      	mov	r2, r3
   23098:	f001 f9e6 	bl	24468 <memcpy>
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
	}
}
   2309c:	4620      	mov	r0, r4
   2309e:	bd38      	pop	{r3, r4, r5, pc}
		return TC_CRYPTO_FAIL;
   230a0:	2400      	movs	r4, #0
   230a2:	e7fb      	b.n	2309c <_copy+0x12>

000230a4 <_set>:

void _set(void *to, uint8_t val, unsigned int len)
{
	(void)memset(to, val, len);
   230a4:	f001 ba0b 	b.w	244be <memset>

000230a8 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
   230a8:	09c3      	lsrs	r3, r0, #7
   230aa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   230ae:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   230b2:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
   230b6:	b2c0      	uxtb	r0, r0
   230b8:	4770      	bx	lr

000230ba <uECC_make_key>:
	}
	return 0;
}

int uECC_make_key(uint8_t *public_key, uint8_t *private_key, uECC_Curve curve)
{
   230ba:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   230be:	4606      	mov	r6, r0
   230c0:	b0a9      	sub	sp, #164	; 0xa4
   230c2:	4688      	mov	r8, r1
   230c4:	4614      	mov	r4, r2
   230c6:	2740      	movs	r7, #64	; 0x40
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
        		return 0;
		}

		/* computing modular reduction of _random (see FIPS 186.4 B.4.1): */
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   230c8:	f102 0924 	add.w	r9, r2, #36	; 0x24
		uECC_RNG_Function rng_function = uECC_get_rng();
   230cc:	f7e4 f9c0 	bl	7450 <uECC_get_rng>
		if (!rng_function ||
   230d0:	4603      	mov	r3, r0
   230d2:	2800      	cmp	r0, #0
   230d4:	d03e      	beq.n	23154 <uECC_make_key+0x9a>
			!rng_function((uint8_t *)_random, 2 * NUM_ECC_WORDS*uECC_WORD_SIZE)) {
   230d6:	2140      	movs	r1, #64	; 0x40
   230d8:	a808      	add	r0, sp, #32
   230da:	4798      	blx	r3
		if (!rng_function ||
   230dc:	b3d0      	cbz	r0, 23154 <uECC_make_key+0x9a>
		uECC_vli_mmod(_private, _random, curve->n, BITS_TO_WORDS(curve->num_n_bits));
   230de:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
   230e2:	f112 031f 	adds.w	r3, r2, #31
   230e6:	bf48      	it	mi
   230e8:	f102 033e 	addmi.w	r3, r2, #62	; 0x3e
   230ec:	466d      	mov	r5, sp
   230ee:	464a      	mov	r2, r9
   230f0:	a908      	add	r1, sp, #32
   230f2:	4628      	mov	r0, r5
   230f4:	f343 1347 	sbfx	r3, r3, #5, #8
   230f8:	f000 f9fa 	bl	234f0 <uECC_vli_mmod>

		/* Computing public-key from private: */
		if (EccPoint_compute_public_key(_public, _private, curve)) {
   230fc:	4622      	mov	r2, r4
   230fe:	4629      	mov	r1, r5
   23100:	a818      	add	r0, sp, #96	; 0x60
   23102:	f000 fe0f 	bl	23d24 <EccPoint_compute_public_key>
   23106:	b318      	cbz	r0, 23150 <uECC_make_key+0x96>

			/* Converting buffers to correct bit order: */
			uECC_vli_nativeToBytes(private_key,
					       BITS_TO_BYTES(curve->num_n_bits),
   23108:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
			uECC_vli_nativeToBytes(private_key,
   2310c:	1dd9      	adds	r1, r3, #7
   2310e:	bf48      	it	mi
   23110:	f103 010e 	addmi.w	r1, r3, #14
   23114:	462a      	mov	r2, r5
   23116:	4640      	mov	r0, r8
   23118:	10c9      	asrs	r1, r1, #3
   2311a:	f000 fe2b 	bl	23d74 <uECC_vli_nativeToBytes>
					       _private);
			uECC_vli_nativeToBytes(public_key,
   2311e:	f994 1001 	ldrsb.w	r1, [r4, #1]
   23122:	aa18      	add	r2, sp, #96	; 0x60
   23124:	4630      	mov	r0, r6
   23126:	f000 fe25 	bl	23d74 <uECC_vli_nativeToBytes>
					       curve->num_bytes,
					       _public);
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   2312a:	f994 1001 	ldrsb.w	r1, [r4, #1]
 					       curve->num_bytes,
					       _public + curve->num_words);
   2312e:	f994 2000 	ldrsb.w	r2, [r4]
			uECC_vli_nativeToBytes(public_key + curve->num_bytes,
   23132:	ab18      	add	r3, sp, #96	; 0x60
   23134:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   23138:	1870      	adds	r0, r6, r1
   2313a:	f000 fe1b 	bl	23d74 <uECC_vli_nativeToBytes>
#ifdef TINYCRYPT_ARCH_HAS_SET_SECURE
extern void _set_secure(void *to, uint8_t val, unsigned int len);
#else /* ! TINYCRYPT_ARCH_HAS_SET_SECURE */
static inline void _set_secure(void *to, uint8_t val, unsigned int len)
{
  (void) memset(to, val, len);
   2313e:	2220      	movs	r2, #32
   23140:	2100      	movs	r1, #0
   23142:	4628      	mov	r0, r5
   23144:	f001 f9bb 	bl	244be <memset>

			/* erasing temporary buffer that stored secret: */
			_set_secure(_private, 0, NUM_ECC_BYTES);

      			return 1;
   23148:	2001      	movs	r0, #1
    		}
  	}
	return 0;
}
   2314a:	b029      	add	sp, #164	; 0xa4
   2314c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (tries = 0; tries < uECC_RNG_MAX_TRIES; ++tries) {
   23150:	3f01      	subs	r7, #1
   23152:	d1bb      	bne.n	230cc <uECC_make_key+0x12>
        		return 0;
   23154:	2000      	movs	r0, #0
   23156:	e7f8      	b.n	2314a <uECC_make_key+0x90>

00023158 <uECC_shared_secret>:

int uECC_shared_secret(const uint8_t *public_key, const uint8_t *private_key,
		       uint8_t *secret, uECC_Curve curve)
{
   23158:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2315c:	461c      	mov	r4, r3
	uECC_word_t tmp[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {_private, tmp};
	uECC_word_t *initial_Z = 0;
	uECC_word_t carry;
	wordcount_t num_words = curve->num_words;
	wordcount_t num_bytes = curve->num_bytes;
   2315e:	f993 7001 	ldrsb.w	r7, [r3, #1]
	wordcount_t num_words = curve->num_words;
   23162:	f993 a000 	ldrsb.w	sl, [r3]
	int r;

	/* Converting buffers to correct bit order: */
	uECC_vli_bytesToNative(_private,
      			       private_key,
			       BITS_TO_BYTES(curve->num_n_bits));
   23166:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
{
   2316a:	b0a4      	sub	sp, #144	; 0x90
   2316c:	4690      	mov	r8, r2
	uECC_vli_bytesToNative(_private,
   2316e:	1dda      	adds	r2, r3, #7
   23170:	bf48      	it	mi
   23172:	f103 020e 	addmi.w	r2, r3, #14
	uECC_word_t *p2[2] = {_private, tmp};
   23176:	ad04      	add	r5, sp, #16
{
   23178:	4681      	mov	r9, r0
	uECC_word_t *p2[2] = {_private, tmp};
   2317a:	ae0c      	add	r6, sp, #48	; 0x30
	uECC_vli_bytesToNative(_private,
   2317c:	4628      	mov	r0, r5
   2317e:	10d2      	asrs	r2, r2, #3
	uECC_word_t *p2[2] = {_private, tmp};
   23180:	9502      	str	r5, [sp, #8]
   23182:	9603      	str	r6, [sp, #12]
	uECC_vli_bytesToNative(_private,
   23184:	f000 fe0a 	bl	23d9c <uECC_vli_bytesToNative>
	uECC_vli_bytesToNative(_public,
   23188:	463a      	mov	r2, r7
   2318a:	4649      	mov	r1, r9
   2318c:	a814      	add	r0, sp, #80	; 0x50
   2318e:	f000 fe05 	bl	23d9c <uECC_vli_bytesToNative>
      			       public_key,
			       num_bytes);
	uECC_vli_bytesToNative(_public + num_words,
   23192:	ab14      	add	r3, sp, #80	; 0x50
   23194:	eb09 0107 	add.w	r1, r9, r7
   23198:	eb03 008a 	add.w	r0, r3, sl, lsl #2
   2319c:	463a      	mov	r2, r7
   2319e:	f000 fdfd 	bl	23d9c <uECC_vli_bytesToNative>
			       public_key + num_bytes,
			       num_bytes);

	/* Regularize the bitcount for the private key so that attackers cannot use a
	 * side channel attack to learn the number of leading zeros. */
	carry = regularize_k(_private, _private, tmp, curve);
   231a2:	4623      	mov	r3, r4
   231a4:	4632      	mov	r2, r6
   231a6:	4629      	mov	r1, r5
   231a8:	4628      	mov	r0, r5
   231aa:	f000 fd8f 	bl	23ccc <regularize_k>
			goto clear_and_out;
    		}
    		initial_Z = p2[carry];
  	}

	EccPoint_mult(_public, _public, p2[!carry], initial_Z, curve->num_n_bits + 1,
   231ae:	fab0 f380 	clz	r3, r0
   231b2:	9401      	str	r4, [sp, #4]
   231b4:	aa24      	add	r2, sp, #144	; 0x90
   231b6:	095b      	lsrs	r3, r3, #5
   231b8:	eb02 0183 	add.w	r1, r2, r3, lsl #2
   231bc:	8863      	ldrh	r3, [r4, #2]
   231be:	3301      	adds	r3, #1
   231c0:	b21b      	sxth	r3, r3
   231c2:	9300      	str	r3, [sp, #0]
   231c4:	f851 2c88 	ldr.w	r2, [r1, #-136]
   231c8:	a914      	add	r1, sp, #80	; 0x50
   231ca:	2300      	movs	r3, #0
   231cc:	4608      	mov	r0, r1
   231ce:	f000 fcb0 	bl	23b32 <EccPoint_mult>
		      curve);

	uECC_vli_nativeToBytes(secret, num_bytes, _public);
   231d2:	aa14      	add	r2, sp, #80	; 0x50
   231d4:	4639      	mov	r1, r7
   231d6:	4640      	mov	r0, r8
   231d8:	f000 fdcc 	bl	23d74 <uECC_vli_nativeToBytes>
	r = !EccPoint_isZero(_public, curve);
   231dc:	4621      	mov	r1, r4
   231de:	a814      	add	r0, sp, #80	; 0x50
   231e0:	f000 fc1c 	bl	23a1c <EccPoint_isZero>
   231e4:	af02      	add	r7, sp, #8
   231e6:	4604      	mov	r4, r0
   231e8:	2208      	movs	r2, #8
   231ea:	2100      	movs	r1, #0
   231ec:	4638      	mov	r0, r7
   231ee:	f001 f966 	bl	244be <memset>
   231f2:	2220      	movs	r2, #32
   231f4:	2100      	movs	r1, #0
   231f6:	4630      	mov	r0, r6
   231f8:	f001 f961 	bl	244be <memset>
   231fc:	2220      	movs	r2, #32
   231fe:	2100      	movs	r1, #0
   23200:	4628      	mov	r0, r5
   23202:	f001 f95c 	bl	244be <memset>
	_set_secure(p2, 0, sizeof(p2));
	_set_secure(tmp, 0, sizeof(tmp));
	_set_secure(_private, 0, sizeof(_private));

	return r;
}
   23206:	fab4 f084 	clz	r0, r4
   2320a:	0940      	lsrs	r0, r0, #5
   2320c:	b024      	add	sp, #144	; 0x90
   2320e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023212 <uECC_vli_add>:
{
   23212:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   23214:	2400      	movs	r4, #0
{
   23216:	4606      	mov	r6, r0
	uECC_word_t carry = 0;
   23218:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2321a:	b265      	sxtb	r5, r4
   2321c:	42ab      	cmp	r3, r5
   2321e:	dc00      	bgt.n	23222 <uECC_vli_add+0x10>
}
   23220:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t sum = left[i] + right[i] + carry;
   23222:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   23226:	f852 5024 	ldr.w	r5, [r2, r4, lsl #2]
   2322a:	443d      	add	r5, r7
   2322c:	4405      	add	r5, r0
	return (p_true*(cond)) | (p_false*(!cond));
   2322e:	42af      	cmp	r7, r5
   23230:	f000 0001 	and.w	r0, r0, #1
   23234:	bf18      	it	ne
   23236:	2000      	movne	r0, #0
		result[i] = sum;
   23238:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   2323c:	bf88      	it	hi
   2323e:	f040 0001 	orrhi.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   23242:	3401      	adds	r4, #1
   23244:	e7e9      	b.n	2321a <uECC_vli_add+0x8>

00023246 <uECC_vli_rshift1>:
	vli += num_words;
   23246:	eb00 0181 	add.w	r1, r0, r1, lsl #2
	uECC_word_t carry = 0;
   2324a:	2300      	movs	r3, #0
	while (vli-- > end) {
   2324c:	4288      	cmp	r0, r1
   2324e:	d300      	bcc.n	23252 <uECC_vli_rshift1+0xc>
}
   23250:	4770      	bx	lr
		uECC_word_t temp = *vli;
   23252:	f851 2d04 	ldr.w	r2, [r1, #-4]!
		*vli = (temp >> 1) | carry;
   23256:	ea43 0352 	orr.w	r3, r3, r2, lsr #1
   2325a:	600b      	str	r3, [r1, #0]
		carry = temp << (uECC_WORD_BITS - 1);
   2325c:	07d3      	lsls	r3, r2, #31
   2325e:	e7f5      	b.n	2324c <uECC_vli_rshift1+0x6>

00023260 <vli_modInv_update>:
	if (!EVEN(uv)) {
   23260:	6803      	ldr	r3, [r0, #0]
{
   23262:	b570      	push	{r4, r5, r6, lr}
	if (!EVEN(uv)) {
   23264:	f013 0601 	ands.w	r6, r3, #1
{
   23268:	4605      	mov	r5, r0
   2326a:	4614      	mov	r4, r2
	if (!EVEN(uv)) {
   2326c:	d005      	beq.n	2327a <vli_modInv_update+0x1a>
		carry = uECC_vli_add(uv, uv, mod, num_words);
   2326e:	4613      	mov	r3, r2
   23270:	460a      	mov	r2, r1
   23272:	4601      	mov	r1, r0
   23274:	f7ff ffcd 	bl	23212 <uECC_vli_add>
   23278:	4606      	mov	r6, r0
	uECC_vli_rshift1(uv, num_words);
   2327a:	4621      	mov	r1, r4
   2327c:	4628      	mov	r0, r5
   2327e:	f7ff ffe2 	bl	23246 <uECC_vli_rshift1>
	if (carry) {
   23282:	b146      	cbz	r6, 23296 <vli_modInv_update+0x36>
		uv[num_words - 1] |= HIGH_BIT_SET;
   23284:	f104 4280 	add.w	r2, r4, #1073741824	; 0x40000000
   23288:	3a01      	subs	r2, #1
   2328a:	f855 3022 	ldr.w	r3, [r5, r2, lsl #2]
   2328e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   23292:	f845 3022 	str.w	r3, [r5, r2, lsl #2]
}
   23296:	bd70      	pop	{r4, r5, r6, pc}

00023298 <uECC_vli_mult>:
	for (k = 0; k < num_words; ++k) {
   23298:	f04f 0c00 	mov.w	ip, #0
{
   2329c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uECC_word_t r1 = 0;
   232a0:	4665      	mov	r5, ip
	uECC_word_t r0 = 0;
   232a2:	4664      	mov	r4, ip
	for (k = 0; k < num_words; ++k) {
   232a4:	fa4f f98c 	sxtb.w	r9, ip
   232a8:	454b      	cmp	r3, r9
   232aa:	dc16      	bgt.n	232da <uECC_vli_mult+0x42>
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   232ac:	f04f 36ff 	mov.w	r6, #4294967295
   232b0:	eb06 0643 	add.w	r6, r6, r3, lsl #1
   232b4:	9600      	str	r6, [sp, #0]
   232b6:	f04f 0800 	mov.w	r8, #0
   232ba:	9f00      	ldr	r7, [sp, #0]
   232bc:	fa53 fe88 	uxtab	lr, r3, r8
   232c0:	fa4f fe8e 	sxtb.w	lr, lr
   232c4:	45be      	cmp	lr, r7
   232c6:	fa5f f688 	uxtb.w	r6, r8
   232ca:	db26      	blt.n	2331a <uECC_vli_mult+0x82>
	result[num_words * 2 - 1] = r0;
   232cc:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   232d0:	f840 4c04 	str.w	r4, [r0, #-4]
}
   232d4:	b003      	add	sp, #12
   232d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	for (k = 0; k < num_words; ++k) {
   232da:	f04f 0e00 	mov.w	lr, #0
   232de:	eb02 0a8c 	add.w	sl, r2, ip, lsl #2
   232e2:	46f0      	mov	r8, lr
	uECC_dword_t p = (uECC_dword_t)a * b;
   232e4:	f851 702e 	ldr.w	r7, [r1, lr, lsl #2]
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   232e8:	f85a 6904 	ldr.w	r6, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   232ec:	fba6 6707 	umull	r6, r7, r6, r7
   232f0:	1934      	adds	r4, r6, r4
		for (i = 0; i <= k; ++i) {
   232f2:	f10e 0e01 	add.w	lr, lr, #1
   232f6:	417d      	adcs	r5, r7
   232f8:	fa4f f68e 	sxtb.w	r6, lr
   232fc:	f04f 0b00 	mov.w	fp, #0
   23300:	bf28      	it	cs
   23302:	f04f 0b01 	movcs.w	fp, #1
   23306:	454e      	cmp	r6, r9
	*r2 += (r01 < p);
   23308:	44d8      	add	r8, fp
		for (i = 0; i <= k; ++i) {
   2330a:	ddeb      	ble.n	232e4 <uECC_vli_mult+0x4c>
		result[k] = r0;
   2330c:	f840 402c 	str.w	r4, [r0, ip, lsl #2]
	*r1 = r01 >> uECC_WORD_BITS;
   23310:	462c      	mov	r4, r5
   23312:	f10c 0c01 	add.w	ip, ip, #1
	*r2 += (r01 < p);
   23316:	4645      	mov	r5, r8
   23318:	e7c4      	b.n	232a4 <uECC_vli_mult+0xc>
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2331a:	3601      	adds	r6, #1
   2331c:	fa4f fc86 	sxtb.w	ip, r6
   23320:	ebae 0a0c 	sub.w	sl, lr, ip
   23324:	46a9      	mov	r9, r5
   23326:	eb01 068c 	add.w	r6, r1, ip, lsl #2
   2332a:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
   2332e:	2500      	movs	r5, #0
   23330:	459c      	cmp	ip, r3
   23332:	db05      	blt.n	23340 <uECC_vli_mult+0xa8>
		result[k] = r0;
   23334:	f840 402e 	str.w	r4, [r0, lr, lsl #2]
	for (k = num_words; k < num_words * 2 - 1; ++k) {
   23338:	f108 0801 	add.w	r8, r8, #1
		result[k] = r0;
   2333c:	464c      	mov	r4, r9
   2333e:	e7bc      	b.n	232ba <uECC_vli_mult+0x22>
			muladd(left[i], right[k - i], &r0, &r1, &r2);
   23340:	f856 bb04 	ldr.w	fp, [r6], #4
   23344:	f85a 7904 	ldr.w	r7, [sl], #-4
	uECC_dword_t p = (uECC_dword_t)a * b;
   23348:	fbab 7b07 	umull	r7, fp, fp, r7
   2334c:	f8cd b004 	str.w	fp, [sp, #4]
   23350:	193c      	adds	r4, r7, r4
   23352:	9f01      	ldr	r7, [sp, #4]
   23354:	eb57 0909 	adcs.w	r9, r7, r9
   23358:	f04f 0b00 	mov.w	fp, #0
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   2335c:	f10c 0c01 	add.w	ip, ip, #1
   23360:	bf28      	it	cs
   23362:	f04f 0b01 	movcs.w	fp, #1
	*r2 += (r01 < p);
   23366:	445d      	add	r5, fp
		for (i = (k + 1) - num_words; i < num_words; ++i) {
   23368:	fa4f fc8c 	sxtb.w	ip, ip
   2336c:	e7e0      	b.n	23330 <uECC_vli_mult+0x98>

0002336e <uECC_vli_clear>:
	for (i = 0; i < num_words; ++i) {
   2336e:	2300      	movs	r3, #0
{
   23370:	b510      	push	{r4, lr}
		 vli[i] = 0;
   23372:	461c      	mov	r4, r3
	for (i = 0; i < num_words; ++i) {
   23374:	b25a      	sxtb	r2, r3
   23376:	4291      	cmp	r1, r2
   23378:	dc00      	bgt.n	2337c <uECC_vli_clear+0xe>
}
   2337a:	bd10      	pop	{r4, pc}
		 vli[i] = 0;
   2337c:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   23380:	3301      	adds	r3, #1
   23382:	e7f7      	b.n	23374 <uECC_vli_clear+0x6>

00023384 <uECC_vli_isZero>:
{
   23384:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   23386:	2300      	movs	r3, #0
	uECC_word_t bits = 0;
   23388:	461a      	mov	r2, r3
	for (i = 0; i < num_words; ++i) {
   2338a:	b25c      	sxtb	r4, r3
   2338c:	42a1      	cmp	r1, r4
   2338e:	dc03      	bgt.n	23398 <uECC_vli_isZero+0x14>
}
   23390:	fab2 f082 	clz	r0, r2
   23394:	0940      	lsrs	r0, r0, #5
   23396:	bd10      	pop	{r4, pc}
		bits |= vli[i];
   23398:	f850 4023 	ldr.w	r4, [r0, r3, lsl #2]
   2339c:	3301      	adds	r3, #1
   2339e:	4322      	orrs	r2, r4
	for (i = 0; i < num_words; ++i) {
   233a0:	e7f3      	b.n	2338a <uECC_vli_isZero+0x6>

000233a2 <uECC_vli_testBit>:
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   233a2:	114a      	asrs	r2, r1, #5
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   233a4:	2301      	movs	r3, #1
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   233a6:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
		((uECC_word_t)1 << (bit & uECC_WORD_BITS_MASK)));
   233aa:	f001 011f 	and.w	r1, r1, #31
   233ae:	fa03 f101 	lsl.w	r1, r3, r1
}
   233b2:	4008      	ands	r0, r1
   233b4:	4770      	bx	lr

000233b6 <uECC_vli_numBits>:
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   233b6:	3901      	subs	r1, #1
   233b8:	b24b      	sxtb	r3, r1
{
   233ba:	4602      	mov	r2, r0
   233bc:	eb00 0183 	add.w	r1, r0, r3, lsl #2
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   233c0:	2b00      	cmp	r3, #0
   233c2:	da03      	bge.n	233cc <uECC_vli_numBits+0x16>
	return (i + 1);
   233c4:	3301      	adds	r3, #1
   233c6:	b258      	sxtb	r0, r3
	if (num_digits == 0) {
   233c8:	b938      	cbnz	r0, 233da <uECC_vli_numBits+0x24>
   233ca:	4770      	bx	lr
	for (i = max_words - 1; i >= 0 && vli[i] == 0; --i) {
   233cc:	f851 0904 	ldr.w	r0, [r1], #-4
   233d0:	2800      	cmp	r0, #0
   233d2:	d1f7      	bne.n	233c4 <uECC_vli_numBits+0xe>
   233d4:	3b01      	subs	r3, #1
   233d6:	b25b      	sxtb	r3, r3
   233d8:	e7f2      	b.n	233c0 <uECC_vli_numBits+0xa>
	digit = vli[num_digits - 1];
   233da:	f100 4380 	add.w	r3, r0, #1073741824	; 0x40000000
   233de:	3b01      	subs	r3, #1
   233e0:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
	for (i = 0; digit; ++i) {
   233e4:	2300      	movs	r3, #0
   233e6:	b922      	cbnz	r2, 233f2 <uECC_vli_numBits+0x3c>
	return (((bitcount_t)(num_digits - 1) << uECC_WORD_BITS_SHIFT) + i);
   233e8:	3801      	subs	r0, #1
   233ea:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   233ee:	b200      	sxth	r0, r0
}
   233f0:	4770      	bx	lr
		digit >>= 1;
   233f2:	0852      	lsrs	r2, r2, #1
	for (i = 0; digit; ++i) {
   233f4:	3301      	adds	r3, #1
   233f6:	e7f6      	b.n	233e6 <uECC_vli_numBits+0x30>

000233f8 <uECC_vli_set>:
{
   233f8:	b510      	push	{r4, lr}
	for (i = 0; i < num_words; ++i) {
   233fa:	2300      	movs	r3, #0
   233fc:	b25c      	sxtb	r4, r3
   233fe:	42a2      	cmp	r2, r4
   23400:	dc00      	bgt.n	23404 <uECC_vli_set+0xc>
}
   23402:	bd10      	pop	{r4, pc}
		dest[i] = src[i];
   23404:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
   23408:	f840 4023 	str.w	r4, [r0, r3, lsl #2]
	for (i = 0; i < num_words; ++i) {
   2340c:	3301      	adds	r3, #1
   2340e:	e7f5      	b.n	233fc <uECC_vli_set+0x4>

00023410 <uECC_vli_cmp_unsafe>:
{
   23410:	b530      	push	{r4, r5, lr}
	for (i = num_words - 1; i >= 0; --i) {
   23412:	3a01      	subs	r2, #1
   23414:	b253      	sxtb	r3, r2
   23416:	009a      	lsls	r2, r3, #2
   23418:	2b00      	cmp	r3, #0
   2341a:	da01      	bge.n	23420 <uECC_vli_cmp_unsafe+0x10>
	return 0;
   2341c:	2000      	movs	r0, #0
}
   2341e:	bd30      	pop	{r4, r5, pc}
		if (left[i] > right[i]) {
   23420:	5885      	ldr	r5, [r0, r2]
   23422:	588c      	ldr	r4, [r1, r2]
   23424:	42a5      	cmp	r5, r4
   23426:	d805      	bhi.n	23434 <uECC_vli_cmp_unsafe+0x24>
		} else if (left[i] < right[i]) {
   23428:	f1a2 0204 	sub.w	r2, r2, #4
   2342c:	d304      	bcc.n	23438 <uECC_vli_cmp_unsafe+0x28>
	for (i = num_words - 1; i >= 0; --i) {
   2342e:	3b01      	subs	r3, #1
   23430:	b25b      	sxtb	r3, r3
   23432:	e7f1      	b.n	23418 <uECC_vli_cmp_unsafe+0x8>
			return 1;
   23434:	2001      	movs	r0, #1
   23436:	e7f2      	b.n	2341e <uECC_vli_cmp_unsafe+0xe>
			return -1;
   23438:	f04f 30ff 	mov.w	r0, #4294967295
   2343c:	e7ef      	b.n	2341e <uECC_vli_cmp_unsafe+0xe>

0002343e <uECC_vli_equal>:
	for (i = num_words - 1; i >= 0; --i) {
   2343e:	3a01      	subs	r2, #1
   23440:	b253      	sxtb	r3, r2
{
   23442:	b570      	push	{r4, r5, r6, lr}
   23444:	009a      	lsls	r2, r3, #2
	uECC_word_t diff = 0;
   23446:	2400      	movs	r4, #0
	for (i = num_words - 1; i >= 0; --i) {
   23448:	2b00      	cmp	r3, #0
   2344a:	da03      	bge.n	23454 <uECC_vli_equal+0x16>
}
   2344c:	1e20      	subs	r0, r4, #0
   2344e:	bf18      	it	ne
   23450:	2001      	movne	r0, #1
   23452:	bd70      	pop	{r4, r5, r6, pc}
		diff |= (left[i] ^ right[i]);
   23454:	5885      	ldr	r5, [r0, r2]
   23456:	588e      	ldr	r6, [r1, r2]
	for (i = num_words - 1; i >= 0; --i) {
   23458:	3b01      	subs	r3, #1
		diff |= (left[i] ^ right[i]);
   2345a:	4075      	eors	r5, r6
   2345c:	432c      	orrs	r4, r5
	for (i = num_words - 1; i >= 0; --i) {
   2345e:	b25b      	sxtb	r3, r3
   23460:	3a04      	subs	r2, #4
   23462:	e7f1      	b.n	23448 <uECC_vli_equal+0xa>

00023464 <uECC_vli_sub>:
{
   23464:	b5f0      	push	{r4, r5, r6, r7, lr}
	for (i = 0; i < num_words; ++i) {
   23466:	2400      	movs	r4, #0
{
   23468:	4606      	mov	r6, r0
   2346a:	469c      	mov	ip, r3
	uECC_word_t borrow = 0;
   2346c:	4620      	mov	r0, r4
	for (i = 0; i < num_words; ++i) {
   2346e:	b265      	sxtb	r5, r4
   23470:	4565      	cmp	r5, ip
   23472:	db00      	blt.n	23476 <uECC_vli_sub+0x12>
}
   23474:	bdf0      	pop	{r4, r5, r6, r7, pc}
		uECC_word_t diff = left[i] - right[i] - borrow;
   23476:	f851 7024 	ldr.w	r7, [r1, r4, lsl #2]
   2347a:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
   2347e:	1a3d      	subs	r5, r7, r0
   23480:	1aed      	subs	r5, r5, r3
	return (p_true*(cond)) | (p_false*(!cond));
   23482:	42af      	cmp	r7, r5
   23484:	f000 0001 	and.w	r0, r0, #1
   23488:	bf18      	it	ne
   2348a:	2000      	movne	r0, #0
		result[i] = diff;
   2348c:	f846 5024 	str.w	r5, [r6, r4, lsl #2]
	return (p_true*(cond)) | (p_false*(!cond));
   23490:	bf38      	it	cc
   23492:	f040 0001 	orrcc.w	r0, r0, #1
	for (i = 0; i < num_words; ++i) {
   23496:	3401      	adds	r4, #1
   23498:	e7e9      	b.n	2346e <uECC_vli_sub+0xa>

0002349a <uECC_vli_modAdd>:
{
   2349a:	b570      	push	{r4, r5, r6, lr}
   2349c:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   234a0:	461d      	mov	r5, r3
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   234a2:	4633      	mov	r3, r6
{
   234a4:	4604      	mov	r4, r0
	uECC_word_t carry = uECC_vli_add(result, left, right, num_words);
   234a6:	f7ff feb4 	bl	23212 <uECC_vli_add>
	if (carry || uECC_vli_cmp_unsafe(mod, result, num_words) != 1) {
   234aa:	b930      	cbnz	r0, 234ba <uECC_vli_modAdd+0x20>
   234ac:	4632      	mov	r2, r6
   234ae:	4621      	mov	r1, r4
   234b0:	4628      	mov	r0, r5
   234b2:	f7ff ffad 	bl	23410 <uECC_vli_cmp_unsafe>
   234b6:	2801      	cmp	r0, #1
   234b8:	d007      	beq.n	234ca <uECC_vli_modAdd+0x30>
		uECC_vli_sub(result, result, mod, num_words);
   234ba:	4633      	mov	r3, r6
   234bc:	462a      	mov	r2, r5
   234be:	4621      	mov	r1, r4
   234c0:	4620      	mov	r0, r4
}
   234c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_sub(result, result, mod, num_words);
   234c6:	f7ff bfcd 	b.w	23464 <uECC_vli_sub>
}
   234ca:	bd70      	pop	{r4, r5, r6, pc}

000234cc <uECC_vli_modSub>:
{
   234cc:	b570      	push	{r4, r5, r6, lr}
   234ce:	f99d 6010 	ldrsb.w	r6, [sp, #16]
   234d2:	461d      	mov	r5, r3
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   234d4:	4633      	mov	r3, r6
{
   234d6:	4604      	mov	r4, r0
	uECC_word_t l_borrow = uECC_vli_sub(result, left, right, num_words);
   234d8:	f7ff ffc4 	bl	23464 <uECC_vli_sub>
	if (l_borrow) {
   234dc:	b138      	cbz	r0, 234ee <uECC_vli_modSub+0x22>
		uECC_vli_add(result, result, mod, num_words);
   234de:	4633      	mov	r3, r6
   234e0:	462a      	mov	r2, r5
   234e2:	4621      	mov	r1, r4
   234e4:	4620      	mov	r0, r4
}
   234e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		uECC_vli_add(result, result, mod, num_words);
   234ea:	f7ff be92 	b.w	23212 <uECC_vli_add>
}
   234ee:	bd70      	pop	{r4, r5, r6, pc}

000234f0 <uECC_vli_mmod>:
{
   234f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   234f4:	b0a5      	sub	sp, #148	; 0x94
   234f6:	461d      	mov	r5, r3
	uECC_word_t *v[2] = {tmp, product};
   234f8:	ab14      	add	r3, sp, #80	; 0x50
   234fa:	e9cd 3102 	strd	r3, r1, [sp, #8]
{
   234fe:	4680      	mov	r8, r0
			   uECC_vli_numBits(mod, num_words);
   23500:	4629      	mov	r1, r5
   23502:	4610      	mov	r0, r2
{
   23504:	4617      	mov	r7, r2
			   uECC_vli_numBits(mod, num_words);
   23506:	f7ff ff56 	bl	233b6 <uECC_vli_numBits>
	bitcount_t shift = (num_words * 2 * uECC_WORD_BITS) -
   2350a:	ebc0 1485 	rsb	r4, r0, r5, lsl #6
   2350e:	b224      	sxth	r4, r4
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23510:	2c00      	cmp	r4, #0
   23512:	4621      	mov	r1, r4
   23514:	bfb8      	it	lt
   23516:	f104 011f 	addlt.w	r1, r4, #31
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2351a:	4263      	negs	r3, r4
   2351c:	f003 031f 	and.w	r3, r3, #31
	wordcount_t word_shift = shift / uECC_WORD_BITS;
   23520:	f341 1147 	sbfx	r1, r1, #5, #8
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   23524:	f004 061f 	and.w	r6, r4, #31
	uECC_vli_clear(mod_multiple, word_shift);
   23528:	a804      	add	r0, sp, #16
	wordcount_t bit_shift = shift % uECC_WORD_BITS;
   2352a:	bf58      	it	pl
   2352c:	425e      	negpl	r6, r3
	uECC_vli_clear(mod_multiple, word_shift);
   2352e:	f7ff ff1e 	bl	2336e <uECC_vli_clear>
	if (bit_shift > 0) {
   23532:	2e00      	cmp	r6, #0
   23534:	b208      	sxth	r0, r1
   23536:	dd2b      	ble.n	23590 <uECC_vli_mmod+0xa0>
   23538:	ab04      	add	r3, sp, #16
	uECC_word_t carry = 0;
   2353a:	2200      	movs	r2, #0
   2353c:	eb03 0080 	add.w	r0, r3, r0, lsl #2
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   23540:	f1c6 0e20 	rsb	lr, r6, #32
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23544:	4613      	mov	r3, r2
   23546:	429d      	cmp	r5, r3
   23548:	d817      	bhi.n	2357a <uECC_vli_mmod+0x8a>
		for (i = 0; i < num_words * 2; ++i) {
   2354a:	006b      	lsls	r3, r5, #1
   2354c:	9301      	str	r3, [sp, #4]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   2354e:	ab04      	add	r3, sp, #16
   23550:	eb03 0985 	add.w	r9, r3, r5, lsl #2
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   23554:	1e6f      	subs	r7, r5, #1
   23556:	ab24      	add	r3, sp, #144	; 0x90
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23558:	2601      	movs	r6, #1
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   2355a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
	for (index = 1; shift >= 0; --shift) {
   2355e:	2c00      	cmp	r4, #0
   23560:	da54      	bge.n	2360c <uECC_vli_mmod+0x11c>
	uECC_vli_set(result, v[index], num_words);
   23562:	ab24      	add	r3, sp, #144	; 0x90
   23564:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   23568:	462a      	mov	r2, r5
   2356a:	f856 1c88 	ldr.w	r1, [r6, #-136]
   2356e:	4640      	mov	r0, r8
   23570:	f7ff ff42 	bl	233f8 <uECC_vli_set>
}
   23574:	b025      	add	sp, #148	; 0x94
   23576:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			mod_multiple[word_shift + index] = (mod[index] << bit_shift) | carry;
   2357a:	f857 c023 	ldr.w	ip, [r7, r3, lsl #2]
   2357e:	fa0c f106 	lsl.w	r1, ip, r6
   23582:	430a      	orrs	r2, r1
   23584:	f840 2b04 	str.w	r2, [r0], #4
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   23588:	3301      	adds	r3, #1
			carry = mod[index] >> (uECC_WORD_BITS - bit_shift);
   2358a:	fa2c f20e 	lsr.w	r2, ip, lr
		for(index = 0; index < (uECC_word_t)num_words; ++index) {
   2358e:	e7da      	b.n	23546 <uECC_vli_mmod+0x56>
		uECC_vli_set(mod_multiple + word_shift, mod, num_words);
   23590:	ab04      	add	r3, sp, #16
   23592:	462a      	mov	r2, r5
   23594:	4639      	mov	r1, r7
   23596:	eb03 0080 	add.w	r0, r3, r0, lsl #2
   2359a:	f7ff ff2d 	bl	233f8 <uECC_vli_set>
   2359e:	e7d4      	b.n	2354a <uECC_vli_mmod+0x5a>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   235a0:	fa0f fe82 	sxth.w	lr, r2
   235a4:	f85a 3c88 	ldr.w	r3, [sl, #-136]
   235a8:	f853 b02e 	ldr.w	fp, [r3, lr, lsl #2]
   235ac:	ab24      	add	r3, sp, #144	; 0x90
   235ae:	eb03 0282 	add.w	r2, r3, r2, lsl #2
   235b2:	3001      	adds	r0, #1
   235b4:	f852 3c80 	ldr.w	r3, [r2, #-128]
   235b8:	440b      	add	r3, r1
   235ba:	ebbb 0303 	subs.w	r3, fp, r3
   235be:	bf34      	ite	cc
   235c0:	2201      	movcc	r2, #1
   235c2:	2200      	movcs	r2, #0
			if (diff != v[index][i]) {
   235c4:	459b      	cmp	fp, r3
				borrow = (diff > v[index][i]);
   235c6:	bf18      	it	ne
   235c8:	4611      	movne	r1, r2
			v[1 - index][i] = diff;
   235ca:	f85c 2c88 	ldr.w	r2, [ip, #-136]
   235ce:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
		for (i = 0; i < num_words * 2; ++i) {
   235d2:	9b01      	ldr	r3, [sp, #4]
   235d4:	b242      	sxtb	r2, r0
   235d6:	429a      	cmp	r2, r3
   235d8:	dbe2      	blt.n	235a0 <uECC_vli_mmod+0xb0>
		index = !(index ^ borrow);
   235da:	1a73      	subs	r3, r6, r1
   235dc:	425e      	negs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   235de:	4629      	mov	r1, r5
   235e0:	a804      	add	r0, sp, #16
		index = !(index ^ borrow);
   235e2:	415e      	adcs	r6, r3
		uECC_vli_rshift1(mod_multiple, num_words);
   235e4:	f7ff fe2f 	bl	23246 <uECC_vli_rshift1>
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   235e8:	ab24      	add	r3, sp, #144	; 0x90
   235ea:	eb03 0385 	add.w	r3, r3, r5, lsl #2
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   235ee:	4629      	mov	r1, r5
		mod_multiple[num_words - 1] |= mod_multiple[num_words] <<
   235f0:	f853 2c80 	ldr.w	r2, [r3, #-128]
   235f4:	f857 3c80 	ldr.w	r3, [r7, #-128]
   235f8:	ea43 73c2 	orr.w	r3, r3, r2, lsl #31
   235fc:	f847 3c80 	str.w	r3, [r7, #-128]
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23600:	4648      	mov	r0, r9
	for (index = 1; shift >= 0; --shift) {
   23602:	3c01      	subs	r4, #1
		uECC_vli_rshift1(mod_multiple + num_words, num_words);
   23604:	f7ff fe1f 	bl	23246 <uECC_vli_rshift1>
	for (index = 1; shift >= 0; --shift) {
   23608:	b224      	sxth	r4, r4
   2360a:	e7a8      	b.n	2355e <uECC_vli_mmod+0x6e>
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   2360c:	ab24      	add	r3, sp, #144	; 0x90
   2360e:	2000      	movs	r0, #0
			v[1 - index][i] = diff;
   23610:	f1c6 0c01 	rsb	ip, r6, #1
		uECC_word_t borrow = 0;
   23614:	4601      	mov	r1, r0
			uECC_word_t diff = v[index][i] - mod_multiple[i] - borrow;
   23616:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
			v[1 - index][i] = diff;
   2361a:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
   2361e:	e7d8      	b.n	235d2 <uECC_vli_mmod+0xe2>

00023620 <uECC_vli_modMult_fast>:
{
   23620:	b530      	push	{r4, r5, lr}
   23622:	461c      	mov	r4, r3
   23624:	b091      	sub	sp, #68	; 0x44
   23626:	4605      	mov	r5, r0
	uECC_vli_mult(product, left, right, curve->num_words);
   23628:	f993 3000 	ldrsb.w	r3, [r3]
   2362c:	4668      	mov	r0, sp
   2362e:	f7ff fe33 	bl	23298 <uECC_vli_mult>
	curve->mmod_fast(result, product);
   23632:	f8d4 30ac 	ldr.w	r3, [r4, #172]	; 0xac
   23636:	4669      	mov	r1, sp
   23638:	4628      	mov	r0, r5
   2363a:	4798      	blx	r3
}
   2363c:	b011      	add	sp, #68	; 0x44
   2363e:	bd30      	pop	{r4, r5, pc}

00023640 <uECC_vli_modSquare_fast>:
{
   23640:	4613      	mov	r3, r2
	uECC_vli_modMult_fast(result, left, left, curve);
   23642:	460a      	mov	r2, r1
   23644:	f7ff bfec 	b.w	23620 <uECC_vli_modMult_fast>

00023648 <double_jacobian_default>:
{
   23648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	wordcount_t num_words = curve->num_words;
   2364c:	f993 6000 	ldrsb.w	r6, [r3]
{
   23650:	b092      	sub	sp, #72	; 0x48
   23652:	4604      	mov	r4, r0
   23654:	4689      	mov	r9, r1
	if (uECC_vli_isZero(Z1, num_words)) {
   23656:	4610      	mov	r0, r2
   23658:	4631      	mov	r1, r6
{
   2365a:	4615      	mov	r5, r2
   2365c:	461f      	mov	r7, r3
	if (uECC_vli_isZero(Z1, num_words)) {
   2365e:	f7ff fe91 	bl	23384 <uECC_vli_isZero>
   23662:	2800      	cmp	r0, #0
   23664:	f040 8091 	bne.w	2378a <double_jacobian_default+0x142>
	uECC_vli_modSquare_fast(t4, Y1, curve);   /* t4 = y1^2 */
   23668:	463a      	mov	r2, r7
   2366a:	4649      	mov	r1, r9
   2366c:	a802      	add	r0, sp, #8
   2366e:	f7ff ffe7 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(t5, X1, t4, curve); /* t5 = x1*y1^2 = A */
   23672:	463b      	mov	r3, r7
   23674:	aa02      	add	r2, sp, #8
   23676:	4621      	mov	r1, r4
   23678:	a80a      	add	r0, sp, #40	; 0x28
   2367a:	f7ff ffd1 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modSquare_fast(t4, t4, curve);   /* t4 = y1^4 */
   2367e:	a902      	add	r1, sp, #8
   23680:	4608      	mov	r0, r1
   23682:	463a      	mov	r2, r7
   23684:	f7ff ffdc 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(Y1, Y1, Z1, curve); /* t2 = y1*z1 = z3 */
   23688:	463b      	mov	r3, r7
   2368a:	462a      	mov	r2, r5
   2368c:	4649      	mov	r1, r9
   2368e:	4648      	mov	r0, r9
   23690:	f7ff ffc6 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   23694:	f107 0804 	add.w	r8, r7, #4
	uECC_vli_modSquare_fast(Z1, Z1, curve);   /* t3 = z1^2 */
   23698:	463a      	mov	r2, r7
   2369a:	4629      	mov	r1, r5
   2369c:	4628      	mov	r0, r5
   2369e:	f7ff ffcf 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = x1 + z1^2 */
   236a2:	4643      	mov	r3, r8
   236a4:	462a      	mov	r2, r5
   236a6:	4621      	mov	r1, r4
   236a8:	4620      	mov	r0, r4
   236aa:	9600      	str	r6, [sp, #0]
   236ac:	f7ff fef5 	bl	2349a <uECC_vli_modAdd>
	uECC_vli_modAdd(Z1, Z1, Z1, curve->p, num_words); /* t3 = 2*z1^2 */
   236b0:	4643      	mov	r3, r8
   236b2:	462a      	mov	r2, r5
   236b4:	4629      	mov	r1, r5
   236b6:	4628      	mov	r0, r5
   236b8:	9600      	str	r6, [sp, #0]
   236ba:	f7ff feee 	bl	2349a <uECC_vli_modAdd>
	uECC_vli_modSub(Z1, X1, Z1, curve->p, num_words); /* t3 = x1 - z1^2 */
   236be:	4643      	mov	r3, r8
   236c0:	462a      	mov	r2, r5
   236c2:	4621      	mov	r1, r4
   236c4:	4628      	mov	r0, r5
   236c6:	9600      	str	r6, [sp, #0]
   236c8:	f7ff ff00 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, Z1, curve); /* t1 = x1^2 - z1^4 */
   236cc:	463b      	mov	r3, r7
   236ce:	462a      	mov	r2, r5
   236d0:	4621      	mov	r1, r4
   236d2:	4620      	mov	r0, r4
   236d4:	f7ff ffa4 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(Z1, X1, X1, curve->p, num_words); /* t3 = 2*(x1^2 - z1^4) */
   236d8:	4643      	mov	r3, r8
   236da:	4622      	mov	r2, r4
   236dc:	4621      	mov	r1, r4
   236de:	4628      	mov	r0, r5
   236e0:	9600      	str	r6, [sp, #0]
   236e2:	f7ff feda 	bl	2349a <uECC_vli_modAdd>
	uECC_vli_modAdd(X1, X1, Z1, curve->p, num_words); /* t1 = 3*(x1^2 - z1^4) */
   236e6:	4643      	mov	r3, r8
   236e8:	9600      	str	r6, [sp, #0]
   236ea:	462a      	mov	r2, r5
   236ec:	4621      	mov	r1, r4
   236ee:	4620      	mov	r0, r4
   236f0:	f7ff fed3 	bl	2349a <uECC_vli_modAdd>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   236f4:	6823      	ldr	r3, [r4, #0]
	if (uECC_vli_testBit(X1, 0)) {
   236f6:	07db      	lsls	r3, r3, #31
   236f8:	d54a      	bpl.n	23790 <double_jacobian_default+0x148>
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   236fa:	4633      	mov	r3, r6
   236fc:	4642      	mov	r2, r8
   236fe:	4621      	mov	r1, r4
   23700:	4620      	mov	r0, r4
   23702:	f7ff fd86 	bl	23212 <uECC_vli_add>
		uECC_vli_rshift1(X1, num_words);
   23706:	4631      	mov	r1, r6
		uECC_word_t l_carry = uECC_vli_add(X1, X1, curve->p, num_words);
   23708:	4682      	mov	sl, r0
		uECC_vli_rshift1(X1, num_words);
   2370a:	4620      	mov	r0, r4
   2370c:	f7ff fd9b 	bl	23246 <uECC_vli_rshift1>
		X1[num_words - 1] |= l_carry << (uECC_WORD_BITS - 1);
   23710:	f106 4380 	add.w	r3, r6, #1073741824	; 0x40000000
   23714:	3b01      	subs	r3, #1
   23716:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
   2371a:	ea42 72ca 	orr.w	r2, r2, sl, lsl #31
   2371e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
	uECC_vli_modSquare_fast(Z1, X1, curve); /* t3 = B^2 */
   23722:	463a      	mov	r2, r7
   23724:	4621      	mov	r1, r4
   23726:	4628      	mov	r0, r5
   23728:	f7ff ff8a 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - A */
   2372c:	4643      	mov	r3, r8
   2372e:	aa0a      	add	r2, sp, #40	; 0x28
   23730:	4629      	mov	r1, r5
   23732:	4628      	mov	r0, r5
   23734:	9600      	str	r6, [sp, #0]
   23736:	f7ff fec9 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSub(Z1, Z1, t5, curve->p, num_words); /* t3 = B^2 - 2A = x3 */
   2373a:	4643      	mov	r3, r8
   2373c:	aa0a      	add	r2, sp, #40	; 0x28
   2373e:	4629      	mov	r1, r5
   23740:	4628      	mov	r0, r5
   23742:	9600      	str	r6, [sp, #0]
   23744:	f7ff fec2 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, Z1, curve->p, num_words); /* t5 = A - x3 */
   23748:	a90a      	add	r1, sp, #40	; 0x28
   2374a:	4608      	mov	r0, r1
   2374c:	4643      	mov	r3, r8
   2374e:	462a      	mov	r2, r5
   23750:	9600      	str	r6, [sp, #0]
   23752:	f7ff febb 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = B * (A - x3) */
   23756:	463b      	mov	r3, r7
   23758:	aa0a      	add	r2, sp, #40	; 0x28
   2375a:	4621      	mov	r1, r4
   2375c:	4620      	mov	r0, r4
   2375e:	f7ff ff5f 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modSub(t4, X1, t4, curve->p, num_words);
   23762:	aa02      	add	r2, sp, #8
   23764:	4643      	mov	r3, r8
   23766:	4610      	mov	r0, r2
   23768:	4621      	mov	r1, r4
   2376a:	9600      	str	r6, [sp, #0]
   2376c:	f7ff feae 	bl	234cc <uECC_vli_modSub>
	uECC_vli_set(X1, Z1, num_words);
   23770:	4632      	mov	r2, r6
   23772:	4629      	mov	r1, r5
   23774:	4620      	mov	r0, r4
   23776:	f7ff fe3f 	bl	233f8 <uECC_vli_set>
	uECC_vli_set(Z1, Y1, num_words);
   2377a:	4649      	mov	r1, r9
   2377c:	4628      	mov	r0, r5
   2377e:	f7ff fe3b 	bl	233f8 <uECC_vli_set>
	uECC_vli_set(Y1, t4, num_words);
   23782:	a902      	add	r1, sp, #8
   23784:	4648      	mov	r0, r9
   23786:	f7ff fe37 	bl	233f8 <uECC_vli_set>
}
   2378a:	b012      	add	sp, #72	; 0x48
   2378c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		uECC_vli_rshift1(X1, num_words);
   23790:	4631      	mov	r1, r6
   23792:	4620      	mov	r0, r4
   23794:	f7ff fd57 	bl	23246 <uECC_vli_rshift1>
   23798:	e7c3      	b.n	23722 <double_jacobian_default+0xda>

0002379a <x_side_default>:
{
   2379a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2379e:	4615      	mov	r5, r2
   237a0:	b08a      	sub	sp, #40	; 0x28
   237a2:	4604      	mov	r4, r0
   237a4:	460e      	mov	r6, r1
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   237a6:	221c      	movs	r2, #28
   237a8:	2100      	movs	r1, #0
   237aa:	a803      	add	r0, sp, #12
   237ac:	f000 fe87 	bl	244be <memset>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   237b0:	1d2f      	adds	r7, r5, #4
	wordcount_t num_words = curve->num_words;
   237b2:	f995 8000 	ldrsb.w	r8, [r5]
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   237b6:	2303      	movs	r3, #3
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   237b8:	462a      	mov	r2, r5
   237ba:	4631      	mov	r1, r6
   237bc:	4620      	mov	r0, r4
	uECC_word_t _3[NUM_ECC_WORDS] = {3}; /* -a = 3 */
   237be:	9302      	str	r3, [sp, #8]
	uECC_vli_modSquare_fast(result, x, curve); /* r = x^2 */
   237c0:	f7ff ff3e 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(result, result, _3, curve->p, num_words); /* r = x^2 - 3 */
   237c4:	463b      	mov	r3, r7
   237c6:	aa02      	add	r2, sp, #8
   237c8:	4621      	mov	r1, r4
   237ca:	4620      	mov	r0, r4
   237cc:	f8cd 8000 	str.w	r8, [sp]
   237d0:	f7ff fe7c 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(result, result, x, curve); /* r = x^3 - 3x */
   237d4:	462b      	mov	r3, r5
   237d6:	4632      	mov	r2, r6
   237d8:	4621      	mov	r1, r4
   237da:	4620      	mov	r0, r4
   237dc:	f7ff ff20 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(result, result, curve->b, curve->p, num_words);
   237e0:	f8cd 8000 	str.w	r8, [sp]
   237e4:	463b      	mov	r3, r7
   237e6:	f105 0284 	add.w	r2, r5, #132	; 0x84
   237ea:	4621      	mov	r1, r4
   237ec:	4620      	mov	r0, r4
   237ee:	f7ff fe54 	bl	2349a <uECC_vli_modAdd>
}
   237f2:	b00a      	add	sp, #40	; 0x28
   237f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000237f8 <XYcZ_addC>:
   or P => P - Q, Q => P + Q
 */
static void XYcZ_addC(uECC_word_t * X1, uECC_word_t * Y1,
		      uECC_word_t * X2, uECC_word_t * Y2,
		      uECC_Curve curve)
{
   237f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   237fc:	b09a      	sub	sp, #104	; 0x68
   237fe:	4616      	mov	r6, r2
   23800:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
	/* t1 = X1, t2 = Y1, t3 = X2, t4 = Y2 */
	uECC_word_t t5[NUM_ECC_WORDS];
	uECC_word_t t6[NUM_ECC_WORDS];
	uECC_word_t t7[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23804:	4644      	mov	r4, r8
{
   23806:	4699      	mov	r9, r3
	wordcount_t num_words = curve->num_words;
   23808:	f914 5b04 	ldrsb.w	r5, [r4], #4

	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   2380c:	9500      	str	r5, [sp, #0]
{
   2380e:	4607      	mov	r7, r0
   23810:	468a      	mov	sl, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23812:	4623      	mov	r3, r4
   23814:	4602      	mov	r2, r0
   23816:	4631      	mov	r1, r6
   23818:	a802      	add	r0, sp, #8
   2381a:	f7ff fe57 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   2381e:	a902      	add	r1, sp, #8
   23820:	4642      	mov	r2, r8
   23822:	4608      	mov	r0, r1
   23824:	f7ff ff0c 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23828:	4643      	mov	r3, r8
   2382a:	aa02      	add	r2, sp, #8
   2382c:	4639      	mov	r1, r7
   2382e:	4638      	mov	r0, r7
   23830:	f7ff fef6 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   23834:	4643      	mov	r3, r8
   23836:	aa02      	add	r2, sp, #8
   23838:	4631      	mov	r1, r6
   2383a:	4630      	mov	r0, r6
   2383c:	f7ff fef0 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t5, Y2, Y1, curve->p, num_words); /* t5 = y2 + y1 */
   23840:	4623      	mov	r3, r4
   23842:	4652      	mov	r2, sl
   23844:	4649      	mov	r1, r9
   23846:	a802      	add	r0, sp, #8
   23848:	9500      	str	r5, [sp, #0]
   2384a:	f7ff fe26 	bl	2349a <uECC_vli_modAdd>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   2384e:	4623      	mov	r3, r4
   23850:	4652      	mov	r2, sl
   23852:	4649      	mov	r1, r9
   23854:	4648      	mov	r0, r9
   23856:	9500      	str	r5, [sp, #0]
   23858:	f7ff fe38 	bl	234cc <uECC_vli_modSub>

	uECC_vli_modSub(t6, X2, X1, curve->p, num_words); /* t6 = C - B */
   2385c:	4623      	mov	r3, r4
   2385e:	463a      	mov	r2, r7
   23860:	4631      	mov	r1, r6
   23862:	a80a      	add	r0, sp, #40	; 0x28
   23864:	9500      	str	r5, [sp, #0]
   23866:	f7ff fe31 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, t6, curve); /* t2 = y1 * (C - B) = E */
   2386a:	4643      	mov	r3, r8
   2386c:	aa0a      	add	r2, sp, #40	; 0x28
   2386e:	4651      	mov	r1, sl
   23870:	4650      	mov	r0, sl
   23872:	f7ff fed5 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modAdd(t6, X1, X2, curve->p, num_words); /* t6 = B + C */
   23876:	4623      	mov	r3, r4
   23878:	4632      	mov	r2, r6
   2387a:	4639      	mov	r1, r7
   2387c:	a80a      	add	r0, sp, #40	; 0x28
   2387e:	9500      	str	r5, [sp, #0]
   23880:	f7ff fe0b 	bl	2349a <uECC_vli_modAdd>
	uECC_vli_modSquare_fast(X2, Y2, curve); /* t3 = (y2 - y1)^2 = D */
   23884:	4642      	mov	r2, r8
   23886:	4649      	mov	r1, r9
   23888:	4630      	mov	r0, r6
   2388a:	f7ff fed9 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(X2, X2, t6, curve->p, num_words); /* t3 = D - (B + C) = x3 */
   2388e:	4623      	mov	r3, r4
   23890:	aa0a      	add	r2, sp, #40	; 0x28
   23892:	4631      	mov	r1, r6
   23894:	4630      	mov	r0, r6
   23896:	9500      	str	r5, [sp, #0]
   23898:	f7ff fe18 	bl	234cc <uECC_vli_modSub>

	uECC_vli_modSub(t7, X1, X2, curve->p, num_words); /* t7 = B - x3 */
   2389c:	4623      	mov	r3, r4
   2389e:	4632      	mov	r2, r6
   238a0:	4639      	mov	r1, r7
   238a2:	a812      	add	r0, sp, #72	; 0x48
   238a4:	9500      	str	r5, [sp, #0]
   238a6:	f7ff fe11 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, t7, curve); /* t4 = (y2 - y1)*(B - x3) */
   238aa:	4643      	mov	r3, r8
   238ac:	aa12      	add	r2, sp, #72	; 0x48
   238ae:	4649      	mov	r1, r9
   238b0:	4648      	mov	r0, r9
   238b2:	f7ff feb5 	bl	23620 <uECC_vli_modMult_fast>
	/* t4 = (y2 - y1)*(B - x3) - E = y3: */
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words);
   238b6:	4623      	mov	r3, r4
   238b8:	4652      	mov	r2, sl
   238ba:	4649      	mov	r1, r9
   238bc:	4648      	mov	r0, r9
   238be:	9500      	str	r5, [sp, #0]
   238c0:	f7ff fe04 	bl	234cc <uECC_vli_modSub>

	uECC_vli_modSquare_fast(t7, t5, curve); /* t7 = (y2 + y1)^2 = F */
   238c4:	4642      	mov	r2, r8
   238c6:	a902      	add	r1, sp, #8
   238c8:	a812      	add	r0, sp, #72	; 0x48
   238ca:	f7ff feb9 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t7, t7, t6, curve->p, num_words); /* t7 = F - (B + C) = x3' */
   238ce:	a912      	add	r1, sp, #72	; 0x48
   238d0:	4623      	mov	r3, r4
   238d2:	aa0a      	add	r2, sp, #40	; 0x28
   238d4:	4608      	mov	r0, r1
   238d6:	9500      	str	r5, [sp, #0]
   238d8:	f7ff fdf8 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSub(t6, t7, X1, curve->p, num_words); /* t6 = x3' - B */
   238dc:	4623      	mov	r3, r4
   238de:	463a      	mov	r2, r7
   238e0:	a912      	add	r1, sp, #72	; 0x48
   238e2:	a80a      	add	r0, sp, #40	; 0x28
   238e4:	9500      	str	r5, [sp, #0]
   238e6:	f7ff fdf1 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(t6, t6, t5, curve); /* t6 = (y2+y1)*(x3' - B) */
   238ea:	a90a      	add	r1, sp, #40	; 0x28
   238ec:	4643      	mov	r3, r8
   238ee:	aa02      	add	r2, sp, #8
   238f0:	4608      	mov	r0, r1
   238f2:	f7ff fe95 	bl	23620 <uECC_vli_modMult_fast>
	/* t2 = (y2+y1)*(x3' - B) - E = y3': */
	uECC_vli_modSub(Y1, t6, Y1, curve->p, num_words);
   238f6:	4623      	mov	r3, r4
   238f8:	4652      	mov	r2, sl
   238fa:	a90a      	add	r1, sp, #40	; 0x28
   238fc:	4650      	mov	r0, sl
   238fe:	9500      	str	r5, [sp, #0]
   23900:	f7ff fde4 	bl	234cc <uECC_vli_modSub>

	uECC_vli_set(X1, t7, num_words);
   23904:	462a      	mov	r2, r5
   23906:	a912      	add	r1, sp, #72	; 0x48
   23908:	4638      	mov	r0, r7
   2390a:	f7ff fd75 	bl	233f8 <uECC_vli_set>
}
   2390e:	b01a      	add	sp, #104	; 0x68
   23910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023914 <uECC_vli_modInv>:
{
   23914:	b5f0      	push	{r4, r5, r6, r7, lr}
   23916:	460f      	mov	r7, r1
   23918:	b0a1      	sub	sp, #132	; 0x84
   2391a:	4606      	mov	r6, r0
	if (uECC_vli_isZero(input, num_words)) {
   2391c:	4619      	mov	r1, r3
   2391e:	4638      	mov	r0, r7
{
   23920:	4615      	mov	r5, r2
   23922:	461c      	mov	r4, r3
	if (uECC_vli_isZero(input, num_words)) {
   23924:	f7ff fd2e 	bl	23384 <uECC_vli_isZero>
   23928:	b128      	cbz	r0, 23936 <uECC_vli_modInv+0x22>
		uECC_vli_clear(result, num_words);
   2392a:	4630      	mov	r0, r6
}
   2392c:	b021      	add	sp, #132	; 0x84
   2392e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
		uECC_vli_clear(result, num_words);
   23932:	f7ff bd1c 	b.w	2336e <uECC_vli_clear>
	uECC_vli_set(a, input, num_words);
   23936:	4622      	mov	r2, r4
   23938:	4639      	mov	r1, r7
   2393a:	4668      	mov	r0, sp
   2393c:	f7ff fd5c 	bl	233f8 <uECC_vli_set>
	uECC_vli_set(b, mod, num_words);
   23940:	4629      	mov	r1, r5
   23942:	a808      	add	r0, sp, #32
   23944:	f7ff fd58 	bl	233f8 <uECC_vli_set>
	uECC_vli_clear(u, num_words);
   23948:	a810      	add	r0, sp, #64	; 0x40
   2394a:	4621      	mov	r1, r4
   2394c:	f7ff fd0f 	bl	2336e <uECC_vli_clear>
	u[0] = 1;
   23950:	2301      	movs	r3, #1
	uECC_vli_clear(v, num_words);
   23952:	a818      	add	r0, sp, #96	; 0x60
	u[0] = 1;
   23954:	9310      	str	r3, [sp, #64]	; 0x40
	uECC_vli_clear(v, num_words);
   23956:	f7ff fd0a 	bl	2336e <uECC_vli_clear>
	while ((cmpResult = uECC_vli_cmp_unsafe(a, b, num_words)) != 0) {
   2395a:	4622      	mov	r2, r4
   2395c:	a908      	add	r1, sp, #32
   2395e:	4668      	mov	r0, sp
   23960:	f7ff fd56 	bl	23410 <uECC_vli_cmp_unsafe>
   23964:	b930      	cbnz	r0, 23974 <uECC_vli_modInv+0x60>
  	uECC_vli_set(result, u, num_words);
   23966:	4622      	mov	r2, r4
   23968:	a910      	add	r1, sp, #64	; 0x40
   2396a:	4630      	mov	r0, r6
   2396c:	f7ff fd44 	bl	233f8 <uECC_vli_set>
}
   23970:	b021      	add	sp, #132	; 0x84
   23972:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (EVEN(a)) {
   23974:	9b00      	ldr	r3, [sp, #0]
   23976:	07da      	lsls	r2, r3, #31
   23978:	d409      	bmi.n	2398e <uECC_vli_modInv+0x7a>
			uECC_vli_rshift1(a, num_words);
   2397a:	4621      	mov	r1, r4
   2397c:	4668      	mov	r0, sp
   2397e:	f7ff fc62 	bl	23246 <uECC_vli_rshift1>
      			vli_modInv_update(u, mod, num_words);
   23982:	4622      	mov	r2, r4
   23984:	4629      	mov	r1, r5
   23986:	a810      	add	r0, sp, #64	; 0x40
      			vli_modInv_update(v, mod, num_words);
   23988:	f7ff fc6a 	bl	23260 <vli_modInv_update>
   2398c:	e7e5      	b.n	2395a <uECC_vli_modInv+0x46>
    		} else if (EVEN(b)) {
   2398e:	9b08      	ldr	r3, [sp, #32]
   23990:	07db      	lsls	r3, r3, #31
   23992:	d407      	bmi.n	239a4 <uECC_vli_modInv+0x90>
			uECC_vli_rshift1(b, num_words);
   23994:	4621      	mov	r1, r4
   23996:	a808      	add	r0, sp, #32
   23998:	f7ff fc55 	bl	23246 <uECC_vli_rshift1>
      			vli_modInv_update(v, mod, num_words);
   2399c:	4622      	mov	r2, r4
   2399e:	4629      	mov	r1, r5
   239a0:	a818      	add	r0, sp, #96	; 0x60
   239a2:	e7f1      	b.n	23988 <uECC_vli_modInv+0x74>
		} else if (cmpResult > 0) {
   239a4:	2800      	cmp	r0, #0
			uECC_vli_sub(a, a, b, num_words);
   239a6:	4623      	mov	r3, r4
		} else if (cmpResult > 0) {
   239a8:	dd1c      	ble.n	239e4 <uECC_vli_modInv+0xd0>
			uECC_vli_sub(a, a, b, num_words);
   239aa:	aa08      	add	r2, sp, #32
   239ac:	4669      	mov	r1, sp
   239ae:	4668      	mov	r0, sp
   239b0:	f7ff fd58 	bl	23464 <uECC_vli_sub>
			uECC_vli_rshift1(a, num_words);
   239b4:	4621      	mov	r1, r4
   239b6:	4668      	mov	r0, sp
   239b8:	f7ff fc45 	bl	23246 <uECC_vli_rshift1>
			if (uECC_vli_cmp_unsafe(u, v, num_words) < 0) {
   239bc:	4622      	mov	r2, r4
   239be:	a918      	add	r1, sp, #96	; 0x60
   239c0:	a810      	add	r0, sp, #64	; 0x40
   239c2:	f7ff fd25 	bl	23410 <uECC_vli_cmp_unsafe>
   239c6:	2800      	cmp	r0, #0
   239c8:	da05      	bge.n	239d6 <uECC_vli_modInv+0xc2>
        			uECC_vli_add(u, u, mod, num_words);
   239ca:	a910      	add	r1, sp, #64	; 0x40
   239cc:	4623      	mov	r3, r4
   239ce:	462a      	mov	r2, r5
   239d0:	4608      	mov	r0, r1
   239d2:	f7ff fc1e 	bl	23212 <uECC_vli_add>
      			uECC_vli_sub(u, u, v, num_words);
   239d6:	a910      	add	r1, sp, #64	; 0x40
   239d8:	4623      	mov	r3, r4
   239da:	aa18      	add	r2, sp, #96	; 0x60
   239dc:	4608      	mov	r0, r1
   239de:	f7ff fd41 	bl	23464 <uECC_vli_sub>
   239e2:	e7ce      	b.n	23982 <uECC_vli_modInv+0x6e>
      			uECC_vli_sub(b, b, a, num_words);
   239e4:	466a      	mov	r2, sp
   239e6:	a808      	add	r0, sp, #32
   239e8:	f7ff fd3c 	bl	23464 <uECC_vli_sub>
      			uECC_vli_rshift1(b, num_words);
   239ec:	4621      	mov	r1, r4
   239ee:	a808      	add	r0, sp, #32
   239f0:	f7ff fc29 	bl	23246 <uECC_vli_rshift1>
      			if (uECC_vli_cmp_unsafe(v, u, num_words) < 0) {
   239f4:	4622      	mov	r2, r4
   239f6:	a910      	add	r1, sp, #64	; 0x40
   239f8:	a818      	add	r0, sp, #96	; 0x60
   239fa:	f7ff fd09 	bl	23410 <uECC_vli_cmp_unsafe>
   239fe:	2800      	cmp	r0, #0
   23a00:	da05      	bge.n	23a0e <uECC_vli_modInv+0xfa>
        			uECC_vli_add(v, v, mod, num_words);
   23a02:	a918      	add	r1, sp, #96	; 0x60
   23a04:	4623      	mov	r3, r4
   23a06:	462a      	mov	r2, r5
   23a08:	4608      	mov	r0, r1
   23a0a:	f7ff fc02 	bl	23212 <uECC_vli_add>
      			uECC_vli_sub(v, v, u, num_words);
   23a0e:	a918      	add	r1, sp, #96	; 0x60
   23a10:	4623      	mov	r3, r4
   23a12:	aa10      	add	r2, sp, #64	; 0x40
   23a14:	4608      	mov	r0, r1
   23a16:	f7ff fd25 	bl	23464 <uECC_vli_sub>
   23a1a:	e7bf      	b.n	2399c <uECC_vli_modInv+0x88>

00023a1c <EccPoint_isZero>:
	return uECC_vli_isZero(point, curve->num_words * 2);
   23a1c:	7809      	ldrb	r1, [r1, #0]
   23a1e:	0049      	lsls	r1, r1, #1
   23a20:	b249      	sxtb	r1, r1
   23a22:	f7ff bcaf 	b.w	23384 <uECC_vli_isZero>

00023a26 <apply_z>:
{
   23a26:	b5f0      	push	{r4, r5, r6, r7, lr}
   23a28:	4615      	mov	r5, r2
   23a2a:	b089      	sub	sp, #36	; 0x24
   23a2c:	461c      	mov	r4, r3
   23a2e:	4607      	mov	r7, r0
   23a30:	460e      	mov	r6, r1
	uECC_vli_modSquare_fast(t1, Z, curve);    /* z^2 */
   23a32:	461a      	mov	r2, r3
   23a34:	4629      	mov	r1, r5
   23a36:	4668      	mov	r0, sp
   23a38:	f7ff fe02 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t1, curve); /* x1 * z^2 */
   23a3c:	4623      	mov	r3, r4
   23a3e:	466a      	mov	r2, sp
   23a40:	4639      	mov	r1, r7
   23a42:	4638      	mov	r0, r7
   23a44:	f7ff fdec 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(t1, t1, Z, curve);  /* z^3 */
   23a48:	4623      	mov	r3, r4
   23a4a:	462a      	mov	r2, r5
   23a4c:	4669      	mov	r1, sp
   23a4e:	4668      	mov	r0, sp
   23a50:	f7ff fde6 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(Y1, Y1, t1, curve); /* y1 * z^3 */
   23a54:	4623      	mov	r3, r4
   23a56:	466a      	mov	r2, sp
   23a58:	4631      	mov	r1, r6
   23a5a:	4630      	mov	r0, r6
   23a5c:	f7ff fde0 	bl	23620 <uECC_vli_modMult_fast>
}
   23a60:	b009      	add	sp, #36	; 0x24
   23a62:	bdf0      	pop	{r4, r5, r6, r7, pc}

00023a64 <XYcZ_add>:
{
   23a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23a68:	b08a      	sub	sp, #40	; 0x28
   23a6a:	4614      	mov	r4, r2
   23a6c:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
	wordcount_t num_words = curve->num_words;
   23a70:	4655      	mov	r5, sl
{
   23a72:	461f      	mov	r7, r3
	wordcount_t num_words = curve->num_words;
   23a74:	f915 6b04 	ldrsb.w	r6, [r5], #4
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23a78:	9600      	str	r6, [sp, #0]
{
   23a7a:	4680      	mov	r8, r0
   23a7c:	4689      	mov	r9, r1
	uECC_vli_modSub(t5, X2, X1, curve->p, num_words); /* t5 = x2 - x1 */
   23a7e:	462b      	mov	r3, r5
   23a80:	4602      	mov	r2, r0
   23a82:	4621      	mov	r1, r4
   23a84:	a802      	add	r0, sp, #8
   23a86:	f7ff fd21 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, t5, curve); /* t5 = (x2 - x1)^2 = A */
   23a8a:	a902      	add	r1, sp, #8
   23a8c:	4652      	mov	r2, sl
   23a8e:	4608      	mov	r0, r1
   23a90:	f7ff fdd6 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modMult_fast(X1, X1, t5, curve); /* t1 = x1*A = B */
   23a94:	4653      	mov	r3, sl
   23a96:	aa02      	add	r2, sp, #8
   23a98:	4641      	mov	r1, r8
   23a9a:	4640      	mov	r0, r8
   23a9c:	f7ff fdc0 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(X2, X2, t5, curve); /* t3 = x2*A = C */
   23aa0:	4653      	mov	r3, sl
   23aa2:	aa02      	add	r2, sp, #8
   23aa4:	4621      	mov	r1, r4
   23aa6:	4620      	mov	r0, r4
   23aa8:	f7ff fdba 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y2 - y1 */
   23aac:	462b      	mov	r3, r5
   23aae:	464a      	mov	r2, r9
   23ab0:	4639      	mov	r1, r7
   23ab2:	4638      	mov	r0, r7
   23ab4:	9600      	str	r6, [sp, #0]
   23ab6:	f7ff fd09 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSquare_fast(t5, Y2, curve); /* t5 = (y2 - y1)^2 = D */
   23aba:	4652      	mov	r2, sl
   23abc:	4639      	mov	r1, r7
   23abe:	a802      	add	r0, sp, #8
   23ac0:	f7ff fdbe 	bl	23640 <uECC_vli_modSquare_fast>
	uECC_vli_modSub(t5, t5, X1, curve->p, num_words); /* t5 = D - B */
   23ac4:	a902      	add	r1, sp, #8
   23ac6:	462b      	mov	r3, r5
   23ac8:	4642      	mov	r2, r8
   23aca:	4608      	mov	r0, r1
   23acc:	9600      	str	r6, [sp, #0]
   23ace:	f7ff fcfd 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSub(t5, t5, X2, curve->p, num_words); /* t5 = D - B - C = x3 */
   23ad2:	a902      	add	r1, sp, #8
   23ad4:	462b      	mov	r3, r5
   23ad6:	4622      	mov	r2, r4
   23ad8:	4608      	mov	r0, r1
   23ada:	9600      	str	r6, [sp, #0]
   23adc:	f7ff fcf6 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modSub(X2, X2, X1, curve->p, num_words); /* t3 = C - B */
   23ae0:	462b      	mov	r3, r5
   23ae2:	4642      	mov	r2, r8
   23ae4:	4621      	mov	r1, r4
   23ae6:	4620      	mov	r0, r4
   23ae8:	9600      	str	r6, [sp, #0]
   23aea:	f7ff fcef 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y1, Y1, X2, curve); /* t2 = y1*(C - B) */
   23aee:	4653      	mov	r3, sl
   23af0:	4622      	mov	r2, r4
   23af2:	4649      	mov	r1, r9
   23af4:	4648      	mov	r0, r9
   23af6:	f7ff fd93 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modSub(X2, X1, t5, curve->p, num_words); /* t3 = B - x3 */
   23afa:	462b      	mov	r3, r5
   23afc:	aa02      	add	r2, sp, #8
   23afe:	4641      	mov	r1, r8
   23b00:	4620      	mov	r0, r4
   23b02:	9600      	str	r6, [sp, #0]
   23b04:	f7ff fce2 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(Y2, Y2, X2, curve); /* t4 = (y2 - y1)*(B - x3) */
   23b08:	4653      	mov	r3, sl
   23b0a:	4622      	mov	r2, r4
   23b0c:	4639      	mov	r1, r7
   23b0e:	4638      	mov	r0, r7
   23b10:	f7ff fd86 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modSub(Y2, Y2, Y1, curve->p, num_words); /* t4 = y3 */
   23b14:	462b      	mov	r3, r5
   23b16:	464a      	mov	r2, r9
   23b18:	4639      	mov	r1, r7
   23b1a:	4638      	mov	r0, r7
   23b1c:	9600      	str	r6, [sp, #0]
   23b1e:	f7ff fcd5 	bl	234cc <uECC_vli_modSub>
	uECC_vli_set(X2, t5, num_words);
   23b22:	4632      	mov	r2, r6
   23b24:	a902      	add	r1, sp, #8
   23b26:	4620      	mov	r0, r4
   23b28:	f7ff fc66 	bl	233f8 <uECC_vli_set>
}
   23b2c:	b00a      	add	sp, #40	; 0x28
   23b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00023b32 <EccPoint_mult>:

void EccPoint_mult(uECC_word_t * result, const uECC_word_t * point,
		   const uECC_word_t * scalar,
		   const uECC_word_t * initial_Z,
		   bitcount_t num_bits, uECC_Curve curve) 
{
   23b32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   23b36:	b0b1      	sub	sp, #196	; 0xc4
   23b38:	e9cd 0103 	strd	r0, r1, [sp, #12]
   23b3c:	9c3b      	ldr	r4, [sp, #236]	; 0xec
	uECC_word_t Rx[2][NUM_ECC_WORDS];
	uECC_word_t Ry[2][NUM_ECC_WORDS];
	uECC_word_t z[NUM_ECC_WORDS];
	bitcount_t i;
	uECC_word_t nb;
	wordcount_t num_words = curve->num_words;
   23b3e:	f994 7000 	ldrsb.w	r7, [r4]

	uECC_vli_set(Rx[1], point, num_words);
   23b42:	a818      	add	r0, sp, #96	; 0x60
{
   23b44:	4692      	mov	sl, r2
	uECC_vli_set(Rx[1], point, num_words);
   23b46:	463a      	mov	r2, r7
{
   23b48:	461d      	mov	r5, r3
	uECC_vli_set(Rx[1], point, num_words);
   23b4a:	f7ff fc55 	bl	233f8 <uECC_vli_set>
  	uECC_vli_set(Ry[1], point + num_words, num_words);
   23b4e:	00bb      	lsls	r3, r7, #2
   23b50:	9305      	str	r3, [sp, #20]
   23b52:	9b04      	ldr	r3, [sp, #16]
   23b54:	eb03 0387 	add.w	r3, r3, r7, lsl #2
   23b58:	4619      	mov	r1, r3
   23b5a:	a828      	add	r0, sp, #160	; 0xa0
   23b5c:	9302      	str	r3, [sp, #8]
   23b5e:	f7ff fc4b 	bl	233f8 <uECC_vli_set>
	wordcount_t num_words = curve->num_words;
   23b62:	f994 6000 	ldrsb.w	r6, [r4]
	if (initial_Z) {
   23b66:	2d00      	cmp	r5, #0
   23b68:	f000 8086 	beq.w	23c78 <EccPoint_mult+0x146>
		uECC_vli_set(z, initial_Z, num_words);
   23b6c:	4632      	mov	r2, r6
   23b6e:	4629      	mov	r1, r5
   23b70:	a808      	add	r0, sp, #32
   23b72:	f7ff fc41 	bl	233f8 <uECC_vli_set>
	uECC_vli_set(X2, X1, num_words);
   23b76:	f10d 0840 	add.w	r8, sp, #64	; 0x40
   23b7a:	4632      	mov	r2, r6
   23b7c:	a918      	add	r1, sp, #96	; 0x60
   23b7e:	4640      	mov	r0, r8
	uECC_vli_set(Y2, Y1, num_words);
   23b80:	f10d 0980 	add.w	r9, sp, #128	; 0x80
	uECC_vli_set(X2, X1, num_words);
   23b84:	f7ff fc38 	bl	233f8 <uECC_vli_set>
	uECC_vli_set(Y2, Y1, num_words);
   23b88:	a928      	add	r1, sp, #160	; 0xa0
   23b8a:	4648      	mov	r0, r9
   23b8c:	f7ff fc34 	bl	233f8 <uECC_vli_set>
	apply_z(X1, Y1, z, curve);
   23b90:	4623      	mov	r3, r4
   23b92:	aa08      	add	r2, sp, #32
   23b94:	a818      	add	r0, sp, #96	; 0x60
   23b96:	f7ff ff46 	bl	23a26 <apply_z>
	curve->double_jacobian(X1, Y1, z, curve);
   23b9a:	f8d4 50a4 	ldr.w	r5, [r4, #164]	; 0xa4
   23b9e:	4623      	mov	r3, r4
   23ba0:	aa08      	add	r2, sp, #32
   23ba2:	a928      	add	r1, sp, #160	; 0xa0
   23ba4:	a818      	add	r0, sp, #96	; 0x60
   23ba6:	47a8      	blx	r5
	apply_z(X2, Y2, z, curve);
   23ba8:	4623      	mov	r3, r4
   23baa:	aa08      	add	r2, sp, #32
   23bac:	4649      	mov	r1, r9
   23bae:	4640      	mov	r0, r8
   23bb0:	f7ff ff39 	bl	23a26 <apply_z>

	XYcZ_initial_double(Rx[1], Ry[1], Rx[0], Ry[0], initial_Z, curve);

	for (i = num_bits - 2; i > 0; --i) {
   23bb4:	f9bd 50e8 	ldrsh.w	r5, [sp, #232]	; 0xe8
   23bb8:	3d02      	subs	r5, #2
   23bba:	b22d      	sxth	r5, r5
   23bbc:	2d00      	cmp	r5, #0
   23bbe:	dc62      	bgt.n	23c86 <EccPoint_mult+0x154>
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23bc0:	f8da 5000 	ldr.w	r5, [sl]
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
	}

	nb = !uECC_vli_testBit(scalar, 0);
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23bc4:	9400      	str	r4, [sp, #0]
	return (vli[bit >> uECC_WORD_BITS_SHIFT] &
   23bc6:	f005 0601 	and.w	r6, r5, #1
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23bca:	ab10      	add	r3, sp, #64	; 0x40
   23bcc:	eb03 1846 	add.w	r8, r3, r6, lsl #5
   23bd0:	43ed      	mvns	r5, r5
   23bd2:	ab20      	add	r3, sp, #128	; 0x80
   23bd4:	eb03 1646 	add.w	r6, r3, r6, lsl #5
   23bd8:	f005 0501 	and.w	r5, r5, #1
   23bdc:	ab10      	add	r3, sp, #64	; 0x40
   23bde:	eb03 1945 	add.w	r9, r3, r5, lsl #5
   23be2:	ab20      	add	r3, sp, #128	; 0x80
   23be4:	eb03 1545 	add.w	r5, r3, r5, lsl #5
   23be8:	462b      	mov	r3, r5
   23bea:	464a      	mov	r2, r9
   23bec:	4631      	mov	r1, r6
   23bee:	4640      	mov	r0, r8

	/* Find final 1/Z value. */
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23bf0:	f104 0a04 	add.w	sl, r4, #4
	XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23bf4:	f7ff fe00 	bl	237f8 <XYcZ_addC>
	uECC_vli_modSub(z, Rx[1], Rx[0], curve->p, num_words); /* X1 - X0 */
   23bf8:	4653      	mov	r3, sl
   23bfa:	aa10      	add	r2, sp, #64	; 0x40
   23bfc:	a918      	add	r1, sp, #96	; 0x60
   23bfe:	a808      	add	r0, sp, #32
   23c00:	9700      	str	r7, [sp, #0]
   23c02:	f7ff fc63 	bl	234cc <uECC_vli_modSub>
	uECC_vli_modMult_fast(z, z, Ry[1 - nb], curve); /* Yb * (X1 - X0) */
   23c06:	a908      	add	r1, sp, #32
   23c08:	4623      	mov	r3, r4
   23c0a:	4632      	mov	r2, r6
   23c0c:	4608      	mov	r0, r1
   23c0e:	f7ff fd07 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modMult_fast(z, z, point, curve); /* xP * Yb * (X1 - X0) */
   23c12:	a908      	add	r1, sp, #32
   23c14:	9a04      	ldr	r2, [sp, #16]
   23c16:	4623      	mov	r3, r4
   23c18:	4608      	mov	r0, r1
   23c1a:	f7ff fd01 	bl	23620 <uECC_vli_modMult_fast>
	uECC_vli_modInv(z, z, curve->p, num_words); /* 1 / (xP * Yb * (X1 - X0))*/
   23c1e:	a908      	add	r1, sp, #32
   23c20:	463b      	mov	r3, r7
   23c22:	4652      	mov	r2, sl
   23c24:	4608      	mov	r0, r1
   23c26:	f7ff fe75 	bl	23914 <uECC_vli_modInv>
	/* yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, point + num_words, curve);
   23c2a:	a908      	add	r1, sp, #32
   23c2c:	9a02      	ldr	r2, [sp, #8]
   23c2e:	4623      	mov	r3, r4
   23c30:	4608      	mov	r0, r1
   23c32:	f7ff fcf5 	bl	23620 <uECC_vli_modMult_fast>
	/* Xb * yP / (xP * Yb * (X1 - X0)) */
	uECC_vli_modMult_fast(z, z, Rx[1 - nb], curve);
   23c36:	a908      	add	r1, sp, #32
   23c38:	4623      	mov	r3, r4
   23c3a:	4642      	mov	r2, r8
   23c3c:	4608      	mov	r0, r1
   23c3e:	f7ff fcef 	bl	23620 <uECC_vli_modMult_fast>
	/* End 1/Z calculation */

	XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23c42:	4633      	mov	r3, r6
   23c44:	4642      	mov	r2, r8
   23c46:	4629      	mov	r1, r5
   23c48:	4648      	mov	r0, r9
   23c4a:	9400      	str	r4, [sp, #0]
   23c4c:	f7ff ff0a 	bl	23a64 <XYcZ_add>
	apply_z(Rx[0], Ry[0], z, curve);
   23c50:	4623      	mov	r3, r4
   23c52:	aa08      	add	r2, sp, #32
   23c54:	a920      	add	r1, sp, #128	; 0x80
   23c56:	a810      	add	r0, sp, #64	; 0x40
   23c58:	f7ff fee5 	bl	23a26 <apply_z>

	uECC_vli_set(result, Rx[0], num_words);
   23c5c:	9803      	ldr	r0, [sp, #12]
   23c5e:	463a      	mov	r2, r7
   23c60:	a910      	add	r1, sp, #64	; 0x40
   23c62:	f7ff fbc9 	bl	233f8 <uECC_vli_set>
	uECC_vli_set(result + num_words, Ry[0], num_words);
   23c66:	9803      	ldr	r0, [sp, #12]
   23c68:	9b05      	ldr	r3, [sp, #20]
   23c6a:	a920      	add	r1, sp, #128	; 0x80
   23c6c:	4418      	add	r0, r3
   23c6e:	f7ff fbc3 	bl	233f8 <uECC_vli_set>
}
   23c72:	b031      	add	sp, #196	; 0xc4
   23c74:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		uECC_vli_clear(z, num_words);
   23c78:	4631      	mov	r1, r6
   23c7a:	a808      	add	r0, sp, #32
   23c7c:	f7ff fb77 	bl	2336e <uECC_vli_clear>
		z[0] = 1;
   23c80:	2301      	movs	r3, #1
   23c82:	9308      	str	r3, [sp, #32]
   23c84:	e777      	b.n	23b76 <EccPoint_mult+0x44>
		nb = !uECC_vli_testBit(scalar, i);
   23c86:	4629      	mov	r1, r5
   23c88:	4650      	mov	r0, sl
   23c8a:	f7ff fb8a 	bl	233a2 <uECC_vli_testBit>
   23c8e:	fab0 f680 	clz	r6, r0
   23c92:	0976      	lsrs	r6, r6, #5
		XYcZ_addC(Rx[1 - nb], Ry[1 - nb], Rx[nb], Ry[nb], curve);
   23c94:	f1c6 0101 	rsb	r1, r6, #1
   23c98:	eb08 1b46 	add.w	fp, r8, r6, lsl #5
   23c9c:	eb09 1646 	add.w	r6, r9, r6, lsl #5
   23ca0:	eb08 1041 	add.w	r0, r8, r1, lsl #5
   23ca4:	4633      	mov	r3, r6
   23ca6:	eb09 1141 	add.w	r1, r9, r1, lsl #5
   23caa:	465a      	mov	r2, fp
   23cac:	9400      	str	r4, [sp, #0]
   23cae:	e9cd 0106 	strd	r0, r1, [sp, #24]
   23cb2:	f7ff fda1 	bl	237f8 <XYcZ_addC>
		XYcZ_add(Rx[nb], Ry[nb], Rx[1 - nb], Ry[1 - nb], curve);
   23cb6:	9907      	ldr	r1, [sp, #28]
   23cb8:	9806      	ldr	r0, [sp, #24]
   23cba:	9400      	str	r4, [sp, #0]
   23cbc:	460b      	mov	r3, r1
   23cbe:	4602      	mov	r2, r0
   23cc0:	4631      	mov	r1, r6
   23cc2:	4658      	mov	r0, fp
   23cc4:	f7ff fece 	bl	23a64 <XYcZ_add>
	for (i = num_bits - 2; i > 0; --i) {
   23cc8:	3d01      	subs	r5, #1
   23cca:	e776      	b.n	23bba <EccPoint_mult+0x88>

00023ccc <regularize_k>:

uECC_word_t regularize_k(const uECC_word_t * const k, uECC_word_t *k0,
			 uECC_word_t *k1, uECC_Curve curve)
{
   23ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23cd0:	f9b3 9002 	ldrsh.w	r9, [r3, #2]
   23cd4:	f119 081f 	adds.w	r8, r9, #31
{
   23cd8:	461d      	mov	r5, r3
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23cda:	bf48      	it	mi
   23cdc:	f109 083e 	addmi.w	r8, r9, #62	; 0x3e
{
   23ce0:	460e      	mov	r6, r1
	wordcount_t num_n_words = BITS_TO_WORDS(curve->num_n_bits);
   23ce2:	f348 1847 	sbfx	r8, r8, #5, #8

	bitcount_t num_n_bits = curve->num_n_bits;

	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23ce6:	3524      	adds	r5, #36	; 0x24
   23ce8:	4601      	mov	r1, r0
{
   23cea:	4617      	mov	r7, r2
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23cec:	4643      	mov	r3, r8
   23cee:	462a      	mov	r2, r5
   23cf0:	4630      	mov	r0, r6
   23cf2:	f7ff fa8e 	bl	23212 <uECC_vli_add>
   23cf6:	4604      	mov	r4, r0
   23cf8:	b990      	cbnz	r0, 23d20 <regularize_k+0x54>
   23cfa:	ebb9 1f48 	cmp.w	r9, r8, lsl #5
   23cfe:	da06      	bge.n	23d0e <regularize_k+0x42>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
			     uECC_vli_testBit(k0, num_n_bits));
   23d00:	4649      	mov	r1, r9
   23d02:	4630      	mov	r0, r6
   23d04:	f7ff fb4d 	bl	233a2 <uECC_vli_testBit>
			     (num_n_bits < ((bitcount_t)num_n_words * uECC_WORD_SIZE * 8) &&
   23d08:	1e04      	subs	r4, r0, #0
   23d0a:	bf18      	it	ne
   23d0c:	2401      	movne	r4, #1

	uECC_vli_add(k1, k0, curve->n, num_n_words);
   23d0e:	4643      	mov	r3, r8
   23d10:	462a      	mov	r2, r5
   23d12:	4631      	mov	r1, r6
   23d14:	4638      	mov	r0, r7
   23d16:	f7ff fa7c 	bl	23212 <uECC_vli_add>

	return carry;
}
   23d1a:	4620      	mov	r0, r4
   23d1c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	uECC_word_t carry = uECC_vli_add(k0, k, curve->n, num_n_words) ||
   23d20:	2401      	movs	r4, #1
   23d22:	e7f4      	b.n	23d0e <regularize_k+0x42>

00023d24 <EccPoint_compute_public_key>:

uECC_word_t EccPoint_compute_public_key(uECC_word_t *result,
					uECC_word_t *private_key,
					uECC_Curve curve)
{
   23d24:	b530      	push	{r4, r5, lr}
   23d26:	4614      	mov	r4, r2
   23d28:	b095      	sub	sp, #84	; 0x54
   23d2a:	4605      	mov	r5, r0

	uECC_word_t tmp1[NUM_ECC_WORDS];
 	uECC_word_t tmp2[NUM_ECC_WORDS];
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23d2c:	aa0c      	add	r2, sp, #48	; 0x30
	uECC_word_t carry;

	/* Regularize the bitcount for the private key so that attackers cannot
	 * use a side channel attack to learn the number of leading zeros. */
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23d2e:	4623      	mov	r3, r4
{
   23d30:	4608      	mov	r0, r1
	uECC_word_t *p2[2] = {tmp1, tmp2};
   23d32:	a904      	add	r1, sp, #16
   23d34:	9102      	str	r1, [sp, #8]
   23d36:	9203      	str	r2, [sp, #12]
	carry = regularize_k(private_key, tmp1, tmp2, curve);
   23d38:	f7ff ffc8 	bl	23ccc <regularize_k>

	EccPoint_mult(result, curve->G, p2[!carry], 0, curve->num_n_bits + 1, curve);
   23d3c:	fab0 f380 	clz	r3, r0
   23d40:	095b      	lsrs	r3, r3, #5
   23d42:	aa14      	add	r2, sp, #80	; 0x50
   23d44:	eb02 0283 	add.w	r2, r2, r3, lsl #2
   23d48:	8863      	ldrh	r3, [r4, #2]
   23d4a:	9401      	str	r4, [sp, #4]
   23d4c:	3301      	adds	r3, #1
   23d4e:	b21b      	sxth	r3, r3
   23d50:	9300      	str	r3, [sp, #0]
   23d52:	f852 2c48 	ldr.w	r2, [r2, #-72]
   23d56:	2300      	movs	r3, #0
   23d58:	f104 0144 	add.w	r1, r4, #68	; 0x44
   23d5c:	4628      	mov	r0, r5
   23d5e:	f7ff fee8 	bl	23b32 <EccPoint_mult>

	if (EccPoint_isZero(result, curve)) {
   23d62:	4621      	mov	r1, r4
   23d64:	4628      	mov	r0, r5
   23d66:	f7ff fe59 	bl	23a1c <EccPoint_isZero>
		return 0;
	}
	return 1;
}
   23d6a:	fab0 f080 	clz	r0, r0
   23d6e:	0940      	lsrs	r0, r0, #5
   23d70:	b015      	add	sp, #84	; 0x54
   23d72:	bd30      	pop	{r4, r5, pc}

00023d74 <uECC_vli_nativeToBytes>:

/* Converts an integer in uECC native format to big-endian bytes. */
void uECC_vli_nativeToBytes(uint8_t *bytes, int num_bytes,
			    const unsigned int *native)
{
   23d74:	b5f0      	push	{r4, r5, r6, r7, lr}
	wordcount_t i;
	for (i = 0; i < num_bytes; ++i) {
   23d76:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   23d78:	1e4f      	subs	r7, r1, #1
   23d7a:	b26c      	sxtb	r4, r5
	for (i = 0; i < num_bytes; ++i) {
   23d7c:	428c      	cmp	r4, r1
   23d7e:	f105 0501 	add.w	r5, r5, #1
   23d82:	db00      	blt.n	23d86 <uECC_vli_nativeToBytes+0x12>
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
	}
}
   23d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23d86:	1b3b      	subs	r3, r7, r4
		bytes[i] = native[b / uECC_WORD_SIZE] >> (8 * (b % uECC_WORD_SIZE));
   23d88:	f023 0603 	bic.w	r6, r3, #3
   23d8c:	f003 0303 	and.w	r3, r3, #3
   23d90:	5996      	ldr	r6, [r2, r6]
   23d92:	00db      	lsls	r3, r3, #3
   23d94:	fa26 f303 	lsr.w	r3, r6, r3
   23d98:	5503      	strb	r3, [r0, r4]
	for (i = 0; i < num_bytes; ++i) {
   23d9a:	e7ee      	b.n	23d7a <uECC_vli_nativeToBytes+0x6>

00023d9c <uECC_vli_bytesToNative>:

/* Converts big-endian bytes to an integer in uECC native format. */
void uECC_vli_bytesToNative(unsigned int *native, const uint8_t *bytes,
			    int num_bytes)
{
   23d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23d9e:	460e      	mov	r6, r1
	wordcount_t i;
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   23da0:	1cd1      	adds	r1, r2, #3
   23da2:	bf48      	it	mi
   23da4:	1d91      	addmi	r1, r2, #6
   23da6:	f341 0187 	sbfx	r1, r1, #2, #8
{
   23daa:	4614      	mov	r4, r2
	uECC_vli_clear(native, (num_bytes + (uECC_WORD_SIZE - 1)) / uECC_WORD_SIZE);
   23dac:	f7ff fadf 	bl	2336e <uECC_vli_clear>
	for (i = 0; i < num_bytes; ++i) {
   23db0:	2500      	movs	r5, #0
		unsigned b = num_bytes - 1 - i;
   23db2:	1e67      	subs	r7, r4, #1
   23db4:	b26a      	sxtb	r2, r5
	for (i = 0; i < num_bytes; ++i) {
   23db6:	42a2      	cmp	r2, r4
   23db8:	f105 0501 	add.w	r5, r5, #1
   23dbc:	db00      	blt.n	23dc0 <uECC_vli_bytesToNative+0x24>
		native[b / uECC_WORD_SIZE] |=
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
  	}
}
   23dbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		unsigned b = num_bytes - 1 - i;
   23dc0:	1abb      	subs	r3, r7, r2
		native[b / uECC_WORD_SIZE] |=
   23dc2:	f023 0103 	bic.w	r1, r3, #3
			(uECC_word_t)bytes[i] << (8 * (b % uECC_WORD_SIZE));
   23dc6:	5cb2      	ldrb	r2, [r6, r2]
   23dc8:	f003 0303 	and.w	r3, r3, #3
   23dcc:	00db      	lsls	r3, r3, #3
   23dce:	fa02 f303 	lsl.w	r3, r2, r3
		native[b / uECC_WORD_SIZE] |=
   23dd2:	5842      	ldr	r2, [r0, r1]
   23dd4:	431a      	orrs	r2, r3
   23dd6:	5042      	str	r2, [r0, r1]
	for (i = 0; i < num_bytes; ++i) {
   23dd8:	e7ec      	b.n	23db4 <uECC_vli_bytesToNative+0x18>

00023dda <uECC_valid_point>:
	return 0;
}


int uECC_valid_point(const uECC_word_t *point, uECC_Curve curve)
{
   23dda:	b5f0      	push	{r4, r5, r6, r7, lr}
   23ddc:	b091      	sub	sp, #68	; 0x44
	uECC_word_t tmp1[NUM_ECC_WORDS];
	uECC_word_t tmp2[NUM_ECC_WORDS];
	wordcount_t num_words = curve->num_words;
   23dde:	f991 6000 	ldrsb.w	r6, [r1]
{
   23de2:	4605      	mov	r5, r0
   23de4:	460c      	mov	r4, r1

	/* The point at infinity is invalid. */
	if (EccPoint_isZero(point, curve)) {
   23de6:	f7ff fe19 	bl	23a1c <EccPoint_isZero>
   23dea:	bb28      	cbnz	r0, 23e38 <uECC_valid_point+0x5e>
		return -1;
	}

	/* x and y must be smaller than p. */
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23dec:	1d27      	adds	r7, r4, #4
   23dee:	4632      	mov	r2, r6
   23df0:	4629      	mov	r1, r5
   23df2:	4638      	mov	r0, r7
   23df4:	f7ff fb0c 	bl	23410 <uECC_vli_cmp_unsafe>
   23df8:	2801      	cmp	r0, #1
   23dfa:	d120      	bne.n	23e3e <uECC_valid_point+0x64>
		uECC_vli_cmp_unsafe(curve->p, point + num_words, num_words) != 1) {
   23dfc:	4632      	mov	r2, r6
   23dfe:	eb05 0186 	add.w	r1, r5, r6, lsl #2
   23e02:	4638      	mov	r0, r7
   23e04:	f7ff fb04 	bl	23410 <uECC_vli_cmp_unsafe>
	if (uECC_vli_cmp_unsafe(curve->p, point, num_words) != 1 ||
   23e08:	2801      	cmp	r0, #1
   23e0a:	d118      	bne.n	23e3e <uECC_valid_point+0x64>
		return -2;
	}

	uECC_vli_modSquare_fast(tmp1, point + num_words, curve);
   23e0c:	4622      	mov	r2, r4
   23e0e:	4668      	mov	r0, sp
   23e10:	f7ff fc16 	bl	23640 <uECC_vli_modSquare_fast>
	curve->x_side(tmp2, point, curve); /* tmp2 = x^3 + ax + b */
   23e14:	f8d4 30a8 	ldr.w	r3, [r4, #168]	; 0xa8
   23e18:	4622      	mov	r2, r4
   23e1a:	4629      	mov	r1, r5
   23e1c:	a808      	add	r0, sp, #32
   23e1e:	4798      	blx	r3

	/* Make sure that y^2 == x^3 + ax + b */
	if (uECC_vli_equal(tmp1, tmp2, num_words) != 0)
   23e20:	4632      	mov	r2, r6
   23e22:	a908      	add	r1, sp, #32
   23e24:	4668      	mov	r0, sp
   23e26:	f7ff fb0a 	bl	2343e <uECC_vli_equal>
		return -3;
   23e2a:	2800      	cmp	r0, #0
   23e2c:	bf0c      	ite	eq
   23e2e:	2000      	moveq	r0, #0
   23e30:	f06f 0002 	mvnne.w	r0, #2

	return 0;
}
   23e34:	b011      	add	sp, #68	; 0x44
   23e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -1;
   23e38:	f04f 30ff 	mov.w	r0, #4294967295
   23e3c:	e7fa      	b.n	23e34 <uECC_valid_point+0x5a>
		return -2;
   23e3e:	f06f 0001 	mvn.w	r0, #1
   23e42:	e7f7      	b.n	23e34 <uECC_valid_point+0x5a>

00023e44 <uECC_valid_public_key>:

int uECC_valid_public_key(const uint8_t *public_key, uECC_Curve curve)
{
   23e44:	b570      	push	{r4, r5, r6, lr}
   23e46:	460c      	mov	r4, r1
   23e48:	b090      	sub	sp, #64	; 0x40

	uECC_word_t _public[NUM_ECC_WORDS * 2];

	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
	uECC_vli_bytesToNative(
	_public + curve->num_words,
   23e4a:	4626      	mov	r6, r4
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23e4c:	f991 2001 	ldrsb.w	r2, [r1, #1]
{
   23e50:	4605      	mov	r5, r0
	uECC_vli_bytesToNative(_public, public_key, curve->num_bytes);
   23e52:	4601      	mov	r1, r0
   23e54:	4668      	mov	r0, sp
   23e56:	f7ff ffa1 	bl	23d9c <uECC_vli_bytesToNative>
	public_key + curve->num_bytes,
   23e5a:	f994 2001 	ldrsb.w	r2, [r4, #1]
	_public + curve->num_words,
   23e5e:	f916 0b44 	ldrsb.w	r0, [r6], #68
	uECC_vli_bytesToNative(
   23e62:	18a9      	adds	r1, r5, r2
   23e64:	eb0d 0080 	add.w	r0, sp, r0, lsl #2
   23e68:	f7ff ff98 	bl	23d9c <uECC_vli_bytesToNative>
	curve->num_bytes);

	if (uECC_vli_cmp_unsafe(_public, curve->G, NUM_ECC_WORDS * 2) == 0) {
   23e6c:	2210      	movs	r2, #16
   23e6e:	4631      	mov	r1, r6
   23e70:	4668      	mov	r0, sp
   23e72:	f7ff facd 	bl	23410 <uECC_vli_cmp_unsafe>
   23e76:	b128      	cbz	r0, 23e84 <uECC_valid_public_key+0x40>
		return -4;
	}

	return uECC_valid_point(_public, curve);
   23e78:	4621      	mov	r1, r4
   23e7a:	4668      	mov	r0, sp
   23e7c:	f7ff ffad 	bl	23dda <uECC_valid_point>
}
   23e80:	b010      	add	sp, #64	; 0x40
   23e82:	bd70      	pop	{r4, r5, r6, pc}
		return -4;
   23e84:	f06f 0003 	mvn.w	r0, #3
   23e88:	e7fa      	b.n	23e80 <uECC_valid_public_key+0x3c>

00023e8a <add_round_key>:
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
   23e8a:	78cb      	ldrb	r3, [r1, #3]
   23e8c:	7802      	ldrb	r2, [r0, #0]
   23e8e:	4053      	eors	r3, r2
   23e90:	7003      	strb	r3, [r0, #0]
   23e92:	884b      	ldrh	r3, [r1, #2]
   23e94:	7842      	ldrb	r2, [r0, #1]
   23e96:	4053      	eors	r3, r2
   23e98:	7043      	strb	r3, [r0, #1]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
   23e9a:	680a      	ldr	r2, [r1, #0]
   23e9c:	7883      	ldrb	r3, [r0, #2]
   23e9e:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23ea2:	7083      	strb	r3, [r0, #2]
   23ea4:	680a      	ldr	r2, [r1, #0]
   23ea6:	78c3      	ldrb	r3, [r0, #3]
   23ea8:	4053      	eors	r3, r2
   23eaa:	70c3      	strb	r3, [r0, #3]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
   23eac:	79cb      	ldrb	r3, [r1, #7]
   23eae:	7902      	ldrb	r2, [r0, #4]
   23eb0:	4053      	eors	r3, r2
   23eb2:	7103      	strb	r3, [r0, #4]
   23eb4:	88cb      	ldrh	r3, [r1, #6]
   23eb6:	7942      	ldrb	r2, [r0, #5]
   23eb8:	4053      	eors	r3, r2
   23eba:	7143      	strb	r3, [r0, #5]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
   23ebc:	684a      	ldr	r2, [r1, #4]
   23ebe:	7983      	ldrb	r3, [r0, #6]
   23ec0:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23ec4:	7183      	strb	r3, [r0, #6]
   23ec6:	684a      	ldr	r2, [r1, #4]
   23ec8:	79c3      	ldrb	r3, [r0, #7]
   23eca:	4053      	eors	r3, r2
   23ecc:	71c3      	strb	r3, [r0, #7]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
   23ece:	7acb      	ldrb	r3, [r1, #11]
   23ed0:	7a02      	ldrb	r2, [r0, #8]
   23ed2:	4053      	eors	r3, r2
   23ed4:	7203      	strb	r3, [r0, #8]
   23ed6:	7a42      	ldrb	r2, [r0, #9]
   23ed8:	894b      	ldrh	r3, [r1, #10]
   23eda:	4053      	eors	r3, r2
   23edc:	7243      	strb	r3, [r0, #9]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
   23ede:	688a      	ldr	r2, [r1, #8]
   23ee0:	7a83      	ldrb	r3, [r0, #10]
   23ee2:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23ee6:	7283      	strb	r3, [r0, #10]
   23ee8:	688a      	ldr	r2, [r1, #8]
   23eea:	7ac3      	ldrb	r3, [r0, #11]
   23eec:	4053      	eors	r3, r2
   23eee:	72c3      	strb	r3, [r0, #11]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
   23ef0:	7bcb      	ldrb	r3, [r1, #15]
   23ef2:	7b02      	ldrb	r2, [r0, #12]
   23ef4:	4053      	eors	r3, r2
   23ef6:	7303      	strb	r3, [r0, #12]
   23ef8:	89cb      	ldrh	r3, [r1, #14]
   23efa:	7b42      	ldrb	r2, [r0, #13]
   23efc:	4053      	eors	r3, r2
   23efe:	7343      	strb	r3, [r0, #13]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
   23f00:	68ca      	ldr	r2, [r1, #12]
   23f02:	7b83      	ldrb	r3, [r0, #14]
   23f04:	ea83 2312 	eor.w	r3, r3, r2, lsr #8
   23f08:	7383      	strb	r3, [r0, #14]
   23f0a:	68ca      	ldr	r2, [r1, #12]
   23f0c:	7bc3      	ldrb	r3, [r0, #15]
   23f0e:	4053      	eors	r3, r2
   23f10:	73c3      	strb	r3, [r0, #15]
}
   23f12:	4770      	bx	lr

00023f14 <shift_rows>:
/*
 * This shift_rows also implements the matrix flip required for mix_columns, but
 * performs it here to reduce the number of memory operations.
 */
static inline void shift_rows(uint8_t *s)
{
   23f14:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	uint8_t t[Nb * Nk];

	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
   23f16:	7802      	ldrb	r2, [r0, #0]
   23f18:	f88d 2000 	strb.w	r2, [sp]
   23f1c:	7942      	ldrb	r2, [r0, #5]
   23f1e:	f88d 2001 	strb.w	r2, [sp, #1]
   23f22:	7a82      	ldrb	r2, [r0, #10]
   23f24:	f88d 2002 	strb.w	r2, [sp, #2]
   23f28:	7bc2      	ldrb	r2, [r0, #15]
   23f2a:	f88d 2003 	strb.w	r2, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
   23f2e:	7902      	ldrb	r2, [r0, #4]
   23f30:	f88d 2004 	strb.w	r2, [sp, #4]
   23f34:	7a42      	ldrb	r2, [r0, #9]
   23f36:	f88d 2005 	strb.w	r2, [sp, #5]
   23f3a:	7b82      	ldrb	r2, [r0, #14]
   23f3c:	f88d 2006 	strb.w	r2, [sp, #6]
   23f40:	78c2      	ldrb	r2, [r0, #3]
   23f42:	f88d 2007 	strb.w	r2, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
   23f46:	7a02      	ldrb	r2, [r0, #8]
   23f48:	f88d 2008 	strb.w	r2, [sp, #8]
   23f4c:	7b42      	ldrb	r2, [r0, #13]
   23f4e:	f88d 2009 	strb.w	r2, [sp, #9]
   23f52:	7882      	ldrb	r2, [r0, #2]
   23f54:	f88d 200a 	strb.w	r2, [sp, #10]
   23f58:	79c2      	ldrb	r2, [r0, #7]
   23f5a:	f88d 200b 	strb.w	r2, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
   23f5e:	7b02      	ldrb	r2, [r0, #12]
   23f60:	f88d 200c 	strb.w	r2, [sp, #12]
   23f64:	7842      	ldrb	r2, [r0, #1]
   23f66:	7ac3      	ldrb	r3, [r0, #11]
   23f68:	f88d 200d 	strb.w	r2, [sp, #13]
   23f6c:	7982      	ldrb	r2, [r0, #6]
   23f6e:	f88d 200e 	strb.w	r2, [sp, #14]
   23f72:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
   23f76:	2310      	movs	r3, #16
   23f78:	466a      	mov	r2, sp
   23f7a:	4619      	mov	r1, r3
   23f7c:	f7ff f885 	bl	2308a <_copy>
}
   23f80:	b005      	add	sp, #20
   23f82:	f85d fb04 	ldr.w	pc, [sp], #4

00023f86 <mult_row_column>:
{
   23f86:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   23f88:	4606      	mov	r6, r0
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23f8a:	7808      	ldrb	r0, [r1, #0]
{
   23f8c:	460c      	mov	r4, r1
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
   23f8e:	f7ff f88b 	bl	230a8 <_double_byte>
   23f92:	4605      	mov	r5, r0
   23f94:	7860      	ldrb	r0, [r4, #1]
   23f96:	f7ff f887 	bl	230a8 <_double_byte>
   23f9a:	78a2      	ldrb	r2, [r4, #2]
   23f9c:	7863      	ldrb	r3, [r4, #1]
   23f9e:	4053      	eors	r3, r2
   23fa0:	78e2      	ldrb	r2, [r4, #3]
   23fa2:	4053      	eors	r3, r2
   23fa4:	405d      	eors	r5, r3
   23fa6:	4045      	eors	r5, r0
   23fa8:	7035      	strb	r5, [r6, #0]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
   23faa:	7860      	ldrb	r0, [r4, #1]
   23fac:	7827      	ldrb	r7, [r4, #0]
   23fae:	f7ff f87b 	bl	230a8 <_double_byte>
   23fb2:	4605      	mov	r5, r0
   23fb4:	78a0      	ldrb	r0, [r4, #2]
   23fb6:	f7ff f877 	bl	230a8 <_double_byte>
   23fba:	78a3      	ldrb	r3, [r4, #2]
   23fbc:	405f      	eors	r7, r3
   23fbe:	78e3      	ldrb	r3, [r4, #3]
   23fc0:	405f      	eors	r7, r3
   23fc2:	407d      	eors	r5, r7
   23fc4:	4045      	eors	r5, r0
   23fc6:	7075      	strb	r5, [r6, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
   23fc8:	78a0      	ldrb	r0, [r4, #2]
   23fca:	7865      	ldrb	r5, [r4, #1]
   23fcc:	7827      	ldrb	r7, [r4, #0]
   23fce:	f7ff f86b 	bl	230a8 <_double_byte>
   23fd2:	406f      	eors	r7, r5
   23fd4:	4605      	mov	r5, r0
   23fd6:	78e0      	ldrb	r0, [r4, #3]
   23fd8:	f7ff f866 	bl	230a8 <_double_byte>
   23fdc:	78e3      	ldrb	r3, [r4, #3]
   23fde:	405f      	eors	r7, r3
   23fe0:	407d      	eors	r5, r7
   23fe2:	4045      	eors	r5, r0
   23fe4:	70b5      	strb	r5, [r6, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
   23fe6:	7820      	ldrb	r0, [r4, #0]
   23fe8:	f7ff f85e 	bl	230a8 <_double_byte>
   23fec:	7863      	ldrb	r3, [r4, #1]
   23fee:	7825      	ldrb	r5, [r4, #0]
   23ff0:	405d      	eors	r5, r3
   23ff2:	78a3      	ldrb	r3, [r4, #2]
   23ff4:	405d      	eors	r5, r3
   23ff6:	4045      	eors	r5, r0
   23ff8:	78e0      	ldrb	r0, [r4, #3]
   23ffa:	f7ff f855 	bl	230a8 <_double_byte>
   23ffe:	b2ed      	uxtb	r5, r5
   24000:	4045      	eors	r5, r0
   24002:	70f5      	strb	r5, [r6, #3]
}
   24004:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024006 <tc_aes_encrypt>:

int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
   24006:	b570      	push	{r4, r5, r6, lr}
   24008:	4614      	mov	r4, r2
   2400a:	b088      	sub	sp, #32
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
   2400c:	4605      	mov	r5, r0
   2400e:	2800      	cmp	r0, #0
   24010:	d049      	beq.n	240a6 <tc_aes_encrypt+0xa0>
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
   24012:	2900      	cmp	r1, #0
   24014:	d049      	beq.n	240aa <tc_aes_encrypt+0xa4>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
   24016:	2a00      	cmp	r2, #0
   24018:	d049      	beq.n	240ae <tc_aes_encrypt+0xa8>
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
   2401a:	2310      	movs	r3, #16
   2401c:	460a      	mov	r2, r1
   2401e:	4668      	mov	r0, sp
   24020:	4619      	mov	r1, r3
   24022:	f7ff f832 	bl	2308a <_copy>
	add_round_key(state, s->words);
   24026:	4621      	mov	r1, r4
   24028:	4668      	mov	r0, sp
   2402a:	f7ff ff2e 	bl	23e8a <add_round_key>

	for (i = 0; i < (Nr - 1); ++i) {
   2402e:	3410      	adds	r4, #16
   24030:	f101 06a0 	add.w	r6, r1, #160	; 0xa0
		sub_bytes(state);
   24034:	4668      	mov	r0, sp
   24036:	f7e3 fad5 	bl	75e4 <sub_bytes>
		shift_rows(state);
   2403a:	4668      	mov	r0, sp
   2403c:	f7ff ff6a 	bl	23f14 <shift_rows>
	mult_row_column(t, s);
   24040:	4669      	mov	r1, sp
   24042:	a804      	add	r0, sp, #16
   24044:	f7ff ff9f 	bl	23f86 <mult_row_column>
	mult_row_column(&t[Nb], s+Nb);
   24048:	a901      	add	r1, sp, #4
   2404a:	a805      	add	r0, sp, #20
   2404c:	f7ff ff9b 	bl	23f86 <mult_row_column>
	mult_row_column(&t[2 * Nb], s + (2 * Nb));
   24050:	a902      	add	r1, sp, #8
   24052:	a806      	add	r0, sp, #24
   24054:	f7ff ff97 	bl	23f86 <mult_row_column>
	mult_row_column(&t[3 * Nb], s + (3 * Nb));
   24058:	a903      	add	r1, sp, #12
   2405a:	a807      	add	r0, sp, #28
   2405c:	f7ff ff93 	bl	23f86 <mult_row_column>
	(void) _copy(s, sizeof(t), t, sizeof(t));
   24060:	2310      	movs	r3, #16
   24062:	4619      	mov	r1, r3
   24064:	eb0d 0203 	add.w	r2, sp, r3
   24068:	4668      	mov	r0, sp
   2406a:	f7ff f80e 	bl	2308a <_copy>
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
   2406e:	4621      	mov	r1, r4
   24070:	4668      	mov	r0, sp
	for (i = 0; i < (Nr - 1); ++i) {
   24072:	3410      	adds	r4, #16
		add_round_key(state, s->words + Nb*(i+1));
   24074:	f7ff ff09 	bl	23e8a <add_round_key>
	for (i = 0; i < (Nr - 1); ++i) {
   24078:	42a6      	cmp	r6, r4
   2407a:	d1db      	bne.n	24034 <tc_aes_encrypt+0x2e>
	}

	sub_bytes(state);
   2407c:	f7e3 fab2 	bl	75e4 <sub_bytes>
	shift_rows(state);
   24080:	4668      	mov	r0, sp
   24082:	f7ff ff47 	bl	23f14 <shift_rows>
	add_round_key(state, s->words + Nb*(i+1));
   24086:	4631      	mov	r1, r6
   24088:	4668      	mov	r0, sp
   2408a:	f7ff fefe 	bl	23e8a <add_round_key>

	(void)_copy(out, sizeof(state), state, sizeof(state));
   2408e:	2310      	movs	r3, #16
   24090:	4619      	mov	r1, r3
   24092:	466a      	mov	r2, sp
   24094:	4628      	mov	r0, r5
   24096:	f7fe fff8 	bl	2308a <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
   2409a:	4668      	mov	r0, sp
   2409c:	2210      	movs	r2, #16
   2409e:	2100      	movs	r1, #0
   240a0:	f7ff f800 	bl	230a4 <_set>

	return TC_CRYPTO_SUCCESS;
   240a4:	2001      	movs	r0, #1
}
   240a6:	b008      	add	sp, #32
   240a8:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   240aa:	4608      	mov	r0, r1
   240ac:	e7fb      	b.n	240a6 <tc_aes_encrypt+0xa0>
   240ae:	4610      	mov	r0, r2
   240b0:	e7f9      	b.n	240a6 <tc_aes_encrypt+0xa0>

000240b2 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
   240b2:	b510      	push	{r4, lr}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   240b4:	460a      	mov	r2, r1

	out += (TC_AES_BLOCK_SIZE - 1);
   240b6:	300f      	adds	r0, #15
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
   240b8:	f912 3b10 	ldrsb.w	r3, [r2], #16
   240bc:	2b00      	cmp	r3, #0
   240be:	bfb4      	ite	lt
   240c0:	2387      	movlt	r3, #135	; 0x87
   240c2:	2300      	movge	r3, #0
	for (;;) {
		*out-- = (*x << 1) ^ carry;
   240c4:	f812 4d01 	ldrb.w	r4, [r2, #-1]!
   240c8:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
		if (x == in) {
   240cc:	4291      	cmp	r1, r2
		*out-- = (*x << 1) ^ carry;
   240ce:	f800 3901 	strb.w	r3, [r0], #-1
		if (x == in) {
   240d2:	d002      	beq.n	240da <gf_double+0x28>
			break;
		}
		carry = *x-- >> 7;
   240d4:	7813      	ldrb	r3, [r2, #0]
   240d6:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
   240d8:	e7f4      	b.n	240c4 <gf_double+0x12>
	}
}
   240da:	bd10      	pop	{r4, pc}

000240dc <tc_cmac_erase>:

	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
   240dc:	b508      	push	{r3, lr}
	if (s == (TCCmacState_t) 0) {
   240de:	b120      	cbz	r0, 240ea <tc_cmac_erase+0xe>
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
   240e0:	2258      	movs	r2, #88	; 0x58
   240e2:	2100      	movs	r1, #0
   240e4:	f7fe ffde 	bl	230a4 <_set>
   240e8:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   240ea:	bd08      	pop	{r3, pc}

000240ec <tc_cmac_init>:

int tc_cmac_init(TCCmacState_t s)
{
   240ec:	b510      	push	{r4, lr}
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   240ee:	4604      	mov	r4, r0
   240f0:	b188      	cbz	r0, 24116 <tc_cmac_init+0x2a>
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   240f2:	2210      	movs	r2, #16
   240f4:	2100      	movs	r1, #0
   240f6:	f7fe ffd5 	bl	230a4 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
   240fa:	2210      	movs	r2, #16
   240fc:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24100:	2100      	movs	r1, #0
   24102:	f7fe ffcf 	bl	230a4 <_set>
	s->leftover_offset = 0;
   24106:	2300      	movs	r3, #0
   24108:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
   2410a:	2200      	movs	r2, #0
   2410c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
   24110:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
   24114:	2001      	movs	r0, #1

	return TC_CRYPTO_SUCCESS;
}
   24116:	bd10      	pop	{r4, pc}

00024118 <tc_cmac_setup>:
{
   24118:	b570      	push	{r4, r5, r6, lr}
   2411a:	460d      	mov	r5, r1
   2411c:	4616      	mov	r6, r2
	if (s == (TCCmacState_t) 0 ||
   2411e:	4604      	mov	r4, r0
   24120:	b310      	cbz	r0, 24168 <tc_cmac_setup+0x50>
   24122:	b311      	cbz	r1, 2416a <tc_cmac_setup+0x52>
	_set(s, 0, sizeof(*s));
   24124:	2258      	movs	r2, #88	; 0x58
   24126:	2100      	movs	r1, #0
   24128:	f7fe ffbc 	bl	230a4 <_set>
	tc_aes128_set_encrypt_key(s->sched, key);
   2412c:	4629      	mov	r1, r5
	s->sched = sched;
   2412e:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
   24130:	4630      	mov	r0, r6
   24132:	f7e3 fa63 	bl	75fc <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
   24136:	2210      	movs	r2, #16
   24138:	2100      	movs	r1, #0
   2413a:	4620      	mov	r0, r4
   2413c:	f7fe ffb2 	bl	230a4 <_set>
	gf_double (s->K1, s->iv);
   24140:	f104 0510 	add.w	r5, r4, #16
	tc_aes_encrypt(s->iv, s->iv, s->sched);
   24144:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24146:	4621      	mov	r1, r4
   24148:	4620      	mov	r0, r4
   2414a:	f7ff ff5c 	bl	24006 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
   2414e:	4621      	mov	r1, r4
   24150:	4628      	mov	r0, r5
   24152:	f7ff ffae 	bl	240b2 <gf_double>
	gf_double (s->K2, s->K1);
   24156:	4629      	mov	r1, r5
   24158:	f104 0020 	add.w	r0, r4, #32
   2415c:	f7ff ffa9 	bl	240b2 <gf_double>
	tc_cmac_init(s);
   24160:	4620      	mov	r0, r4
   24162:	f7ff ffc3 	bl	240ec <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
   24166:	2001      	movs	r0, #1
}
   24168:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
   2416a:	4608      	mov	r0, r1
   2416c:	e7fc      	b.n	24168 <tc_cmac_setup+0x50>

0002416e <tc_cmac_update>:

int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
   2416e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24172:	460d      	mov	r5, r1
   24174:	4616      	mov	r6, r2
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
   24176:	4604      	mov	r4, r0
   24178:	2800      	cmp	r0, #0
   2417a:	d061      	beq.n	24240 <tc_cmac_update+0xd2>
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
   2417c:	b912      	cbnz	r2, 24184 <tc_cmac_update+0x16>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
   2417e:	2001      	movs	r0, #1
}
   24180:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (data == (const uint8_t *) 0) {
   24184:	2900      	cmp	r1, #0
   24186:	d05b      	beq.n	24240 <tc_cmac_update+0xd2>
	if (s->countdown == 0) {
   24188:	e9d0 3214 	ldrd	r3, r2, [r0, #80]	; 0x50
   2418c:	ea53 0102 	orrs.w	r1, r3, r2
   24190:	d056      	beq.n	24240 <tc_cmac_update+0xd2>
	s->countdown--;
   24192:	3b01      	subs	r3, #1
	if (s->leftover_offset > 0) {
   24194:	f8d0 8044 	ldr.w	r8, [r0, #68]	; 0x44
	s->countdown--;
   24198:	f142 32ff 	adc.w	r2, r2, #4294967295
   2419c:	e9c0 3214 	strd	r3, r2, [r0, #80]	; 0x50
	if (s->leftover_offset > 0) {
   241a0:	f1b8 0f00 	cmp.w	r8, #0
   241a4:	d02a      	beq.n	241fc <tc_cmac_update+0x8e>
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
   241a6:	f1c8 0710 	rsb	r7, r8, #16
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   241aa:	f108 0030 	add.w	r0, r8, #48	; 0x30
		if (data_length < remaining_space) {
   241ae:	42be      	cmp	r6, r7
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   241b0:	4420      	add	r0, r4
		if (data_length < remaining_space) {
   241b2:	d208      	bcs.n	241c6 <tc_cmac_update+0x58>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
   241b4:	462a      	mov	r2, r5
   241b6:	4633      	mov	r3, r6
   241b8:	4631      	mov	r1, r6
   241ba:	f7fe ff66 	bl	2308a <_copy>
			s->leftover_offset += data_length;
   241be:	6c62      	ldr	r2, [r4, #68]	; 0x44
   241c0:	4432      	add	r2, r6
   241c2:	6462      	str	r2, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
   241c4:	e7db      	b.n	2417e <tc_cmac_update+0x10>
		_copy(&s->leftover[s->leftover_offset],
   241c6:	463b      	mov	r3, r7
   241c8:	462a      	mov	r2, r5
   241ca:	4639      	mov	r1, r7
   241cc:	f7fe ff5d 	bl	2308a <_copy>
		data_length -= remaining_space;
   241d0:	3e10      	subs	r6, #16
		s->leftover_offset = 0;
   241d2:	2300      	movs	r3, #0
   241d4:	6463      	str	r3, [r4, #68]	; 0x44
		data_length -= remaining_space;
   241d6:	4446      	add	r6, r8
		data += remaining_space;
   241d8:	443d      	add	r5, r7
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   241da:	1e63      	subs	r3, r4, #1
   241dc:	f104 010f 	add.w	r1, r4, #15
			s->iv[i] ^= s->leftover[i];
   241e0:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   241e4:	f893 0030 	ldrb.w	r0, [r3, #48]	; 0x30
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   241e8:	428b      	cmp	r3, r1
			s->iv[i] ^= s->leftover[i];
   241ea:	ea82 0200 	eor.w	r2, r2, r0
   241ee:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   241f0:	d1f6      	bne.n	241e0 <tc_cmac_update+0x72>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   241f2:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   241f4:	4621      	mov	r1, r4
   241f6:	4620      	mov	r0, r4
   241f8:	f7ff ff05 	bl	24006 <tc_aes_encrypt>
   241fc:	f104 070f 	add.w	r7, r4, #15
	while (data_length > TC_AES_BLOCK_SIZE) {
   24200:	2e10      	cmp	r6, #16
   24202:	d80a      	bhi.n	2421a <tc_cmac_update+0xac>
	if (data_length > 0) {
   24204:	2e00      	cmp	r6, #0
   24206:	d0ba      	beq.n	2417e <tc_cmac_update+0x10>
		_copy(s->leftover, data_length, data, data_length);
   24208:	4633      	mov	r3, r6
   2420a:	462a      	mov	r2, r5
   2420c:	4631      	mov	r1, r6
   2420e:	f104 0030 	add.w	r0, r4, #48	; 0x30
   24212:	f7fe ff3a 	bl	2308a <_copy>
		s->leftover_offset = data_length;
   24216:	6466      	str	r6, [r4, #68]	; 0x44
   24218:	e7b1      	b.n	2417e <tc_cmac_update+0x10>
   2421a:	1e63      	subs	r3, r4, #1
   2421c:	1e69      	subs	r1, r5, #1
			s->iv[i] ^= data[i];
   2421e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24222:	f811 0f01 	ldrb.w	r0, [r1, #1]!
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24226:	42bb      	cmp	r3, r7
			s->iv[i] ^= data[i];
   24228:	ea82 0200 	eor.w	r2, r2, r0
   2422c:	701a      	strb	r2, [r3, #0]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2422e:	d1f6      	bne.n	2421e <tc_cmac_update+0xb0>
		tc_aes_encrypt(s->iv, s->iv, s->sched);
   24230:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24232:	4621      	mov	r1, r4
   24234:	4620      	mov	r0, r4
   24236:	f7ff fee6 	bl	24006 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
   2423a:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
   2423c:	3e10      	subs	r6, #16
   2423e:	e7df      	b.n	24200 <tc_cmac_update+0x92>
		return TC_CRYPTO_FAIL;
   24240:	2000      	movs	r0, #0
   24242:	e79d      	b.n	24180 <tc_cmac_update+0x12>

00024244 <tc_cmac_final>:

int tc_cmac_final(uint8_t *tag, TCCmacState_t s)
{
   24244:	b570      	push	{r4, r5, r6, lr}
   24246:	460c      	mov	r4, r1
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
   24248:	4605      	mov	r5, r0
   2424a:	b1e8      	cbz	r0, 24288 <tc_cmac_final+0x44>
   2424c:	b369      	cbz	r1, 242aa <tc_cmac_final+0x66>
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
   2424e:	6c4a      	ldr	r2, [r1, #68]	; 0x44
   24250:	2a10      	cmp	r2, #16
   24252:	d11a      	bne.n	2428a <tc_cmac_final+0x46>
		/* the last message block is a full-sized block */
		k = (uint8_t *) s->K1;
   24254:	3110      	adds	r1, #16

		_set(&s->leftover[s->leftover_offset], 0, remaining);
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
		k = (uint8_t *) s->K2;
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24256:	1e63      	subs	r3, r4, #1
   24258:	3901      	subs	r1, #1
   2425a:	f104 000f 	add.w	r0, r4, #15
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2425e:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24262:	f893 6030 	ldrb.w	r6, [r3, #48]	; 0x30
   24266:	4072      	eors	r2, r6
   24268:	f811 6f01 	ldrb.w	r6, [r1, #1]!
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   2426c:	4298      	cmp	r0, r3
		s->iv[i] ^= s->leftover[i] ^ k[i];
   2426e:	ea82 0206 	eor.w	r2, r2, r6
   24272:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
   24274:	d1f3      	bne.n	2425e <tc_cmac_final+0x1a>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
   24276:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   24278:	4621      	mov	r1, r4
   2427a:	4628      	mov	r0, r5
   2427c:	f7ff fec3 	bl	24006 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
   24280:	4620      	mov	r0, r4
   24282:	f7ff ff2b 	bl	240dc <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
   24286:	2001      	movs	r0, #1
}
   24288:	bd70      	pop	{r4, r5, r6, pc}
		_set(&s->leftover[s->leftover_offset], 0, remaining);
   2428a:	f102 0030 	add.w	r0, r2, #48	; 0x30
   2428e:	2100      	movs	r1, #0
   24290:	f1c2 0210 	rsb	r2, r2, #16
   24294:	4420      	add	r0, r4
   24296:	f7fe ff05 	bl	230a4 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
   2429a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   2429c:	4423      	add	r3, r4
   2429e:	2280      	movs	r2, #128	; 0x80
   242a0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
   242a4:	f104 0120 	add.w	r1, r4, #32
   242a8:	e7d5      	b.n	24256 <tc_cmac_final+0x12>
		return TC_CRYPTO_FAIL;
   242aa:	4608      	mov	r0, r1
   242ac:	e7ec      	b.n	24288 <tc_cmac_final+0x44>

000242ae <z_irq_spurious>:
	z_arm_fatal_error(K_ERR_SPURIOUS_IRQ, NULL);
   242ae:	2100      	movs	r1, #0
   242b0:	2001      	movs	r0, #1
   242b2:	f7e3 bb0d 	b.w	78d0 <z_arm_fatal_error>

000242b6 <z_do_kernel_oops>:
 *   fault handler will executed insted of the SVC.
 *
 * @param esf exception frame
 */
void z_do_kernel_oops(const z_arch_esf_t *esf)
{
   242b6:	4601      	mov	r1, r0
	}

#endif /* CONFIG_USERSPACE */

#if !defined(CONFIG_EXTRA_EXCEPTION_INFO)
	z_arm_fatal_error(reason, esf);
   242b8:	6800      	ldr	r0, [r0, #0]
   242ba:	f7e3 bb09 	b.w	78d0 <z_arm_fatal_error>

000242be <z_arm_nmi>:
 *
 * @return N/A
 */

void z_arm_nmi(void)
{
   242be:	b508      	push	{r3, lr}
	handler();
   242c0:	f7e3 fb3e 	bl	7940 <z_SysNmiOnReset>
	z_arm_int_exit();
}
   242c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	z_arm_int_exit();
   242c8:	f7e3 bdc0 	b.w	7e4c <z_arm_exc_exit>

000242cc <strtol>:
 *
 * Ignores `locale' stuff.  Assumes that the upper and lower case
 * alphabets and digits are each contiguous.
 */
long strtol(const char *nptr, char **endptr, register int base)
{
   242cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   242d0:	4684      	mov	ip, r0
   242d2:	4688      	mov	r8, r1
	register const char *s = nptr;
   242d4:	4604      	mov	r4, r0
	 * Skip white space and pick up leading +/- sign if any.
	 * If base is 0, allow 0x for hex and 0 for octal, else
	 * assume decimal; if base is already 16, allow 0x.
	 */
	do {
		c = *s++;
   242d6:	4621      	mov	r1, r4
   242d8:	f814 3b01 	ldrb.w	r3, [r4], #1
	return (int)(c == (int)' ' || ((unsigned)c-(unsigned)'\t') < 5U);
   242dc:	2b20      	cmp	r3, #32
   242de:	d0fa      	beq.n	242d6 <strtol+0xa>
   242e0:	f1a3 0009 	sub.w	r0, r3, #9
   242e4:	2804      	cmp	r0, #4
   242e6:	d9f6      	bls.n	242d6 <strtol+0xa>
	} while (isspace(c));
	if (c == '-') {
   242e8:	2b2d      	cmp	r3, #45	; 0x2d
   242ea:	d12d      	bne.n	24348 <strtol+0x7c>
		neg = 1;
		c = *s++;
   242ec:	784b      	ldrb	r3, [r1, #1]
   242ee:	1c8c      	adds	r4, r1, #2
		neg = 1;
   242f0:	2101      	movs	r1, #1
	} else if (c == '+') {
		c = *s++;
	}

	if ((base == 0 || base == 16) &&
   242f2:	2a00      	cmp	r2, #0
   242f4:	d05a      	beq.n	243ac <strtol+0xe0>
   242f6:	2a10      	cmp	r2, #16
   242f8:	d109      	bne.n	2430e <strtol+0x42>
   242fa:	2b30      	cmp	r3, #48	; 0x30
   242fc:	d107      	bne.n	2430e <strtol+0x42>
	    c == '0' && (*s == 'x' || *s == 'X')) {
   242fe:	7823      	ldrb	r3, [r4, #0]
   24300:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   24304:	2b58      	cmp	r3, #88	; 0x58
   24306:	d14c      	bne.n	243a2 <strtol+0xd6>
		c = s[1];
   24308:	7863      	ldrb	r3, [r4, #1]
		s += 2;
		base = 16;
   2430a:	2210      	movs	r2, #16
		s += 2;
   2430c:	3402      	adds	r4, #2
	 * the number is too big, and we will return a range error.
	 *
	 * Set any if any `digits' consumed; make it negative to indicate
	 * overflow.
	 */
	cutoff = neg ? -(unsigned long)LONG_MIN : LONG_MAX;
   2430e:	f101 4700 	add.w	r7, r1, #2147483648	; 0x80000000
   24312:	3f01      	subs	r7, #1
	cutlim = cutoff % (unsigned long)base;
	cutoff /= (unsigned long)base;
	for (acc = 0, any = 0;; c = *s++) {
   24314:	2600      	movs	r6, #0
	cutlim = cutoff % (unsigned long)base;
   24316:	fbb7 fef2 	udiv	lr, r7, r2
	for (acc = 0, any = 0;; c = *s++) {
   2431a:	4630      	mov	r0, r6
	cutlim = cutoff % (unsigned long)base;
   2431c:	fb02 791e 	mls	r9, r2, lr, r7
	return (int)(((unsigned)(a)-(unsigned)'0') < 10U);
   24320:	f1a3 0530 	sub.w	r5, r3, #48	; 0x30
		if (isdigit(c)) {
   24324:	2d09      	cmp	r5, #9
   24326:	d815      	bhi.n	24354 <strtol+0x88>
			c -= '0';
   24328:	462b      	mov	r3, r5
		} else if (isalpha(c)) {
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
		} else {
			break;
		}
		if (c >= base) {
   2432a:	429a      	cmp	r2, r3
   2432c:	dd22      	ble.n	24374 <strtol+0xa8>
			break;
		}
		if (any < 0 || acc > cutoff || (acc == cutoff && c > cutlim)) {
   2432e:	1c75      	adds	r5, r6, #1
   24330:	d007      	beq.n	24342 <strtol+0x76>
   24332:	4570      	cmp	r0, lr
   24334:	d81b      	bhi.n	2436e <strtol+0xa2>
   24336:	d101      	bne.n	2433c <strtol+0x70>
   24338:	454b      	cmp	r3, r9
   2433a:	dc18      	bgt.n	2436e <strtol+0xa2>
			any = -1;
		} else {
			any = 1;
			acc *= base;
			acc += c;
   2433c:	fb00 3002 	mla	r0, r0, r2, r3
			any = 1;
   24340:	2601      	movs	r6, #1
	for (acc = 0, any = 0;; c = *s++) {
   24342:	f814 3b01 	ldrb.w	r3, [r4], #1
		if (isdigit(c)) {
   24346:	e7eb      	b.n	24320 <strtol+0x54>
	} else if (c == '+') {
   24348:	2b2b      	cmp	r3, #43	; 0x2b
		c = *s++;
   2434a:	bf04      	itt	eq
   2434c:	784b      	ldrbeq	r3, [r1, #1]
   2434e:	1c8c      	addeq	r4, r1, #2
	register int neg = 0, any, cutlim;
   24350:	2100      	movs	r1, #0
   24352:	e7ce      	b.n	242f2 <strtol+0x26>
	return (int)((((unsigned)c|32u)-(unsigned)'a') < 26U);
   24354:	f043 0520 	orr.w	r5, r3, #32
   24358:	3d61      	subs	r5, #97	; 0x61
		} else if (isalpha(c)) {
   2435a:	2d19      	cmp	r5, #25
   2435c:	d80a      	bhi.n	24374 <strtol+0xa8>
	return (int)(((unsigned)(a)-(unsigned)'A') < 26U);
   2435e:	f1a3 0541 	sub.w	r5, r3, #65	; 0x41
			c -= isupper(c) ? 'A' - 10 : 'a' - 10;
   24362:	2d1a      	cmp	r5, #26
   24364:	bf34      	ite	cc
   24366:	2537      	movcc	r5, #55	; 0x37
   24368:	2557      	movcs	r5, #87	; 0x57
   2436a:	1b5b      	subs	r3, r3, r5
   2436c:	e7dd      	b.n	2432a <strtol+0x5e>
			any = -1;
   2436e:	f04f 36ff 	mov.w	r6, #4294967295
   24372:	e7e6      	b.n	24342 <strtol+0x76>
		}
	}

	if (any < 0) {
   24374:	1c73      	adds	r3, r6, #1
   24376:	d109      	bne.n	2438c <strtol+0xc0>
	if (z_syscall_trap()) {
		return (int *) arch_syscall_invoke0(K_SYSCALL_Z_ERRNO);
	}
#endif
	compiler_barrier();
	return z_impl_z_errno();
   24378:	f7fb fa04 	bl	1f784 <z_impl_z_errno>
		acc = neg ? LONG_MIN : LONG_MAX;
		errno = ERANGE;
   2437c:	2326      	movs	r3, #38	; 0x26
   2437e:	6003      	str	r3, [r0, #0]
		acc = neg ? LONG_MIN : LONG_MAX;
   24380:	4638      	mov	r0, r7
	} else if (neg) {
		acc = -acc;
	}

	if (endptr != NULL) {
   24382:	f1b8 0f00 	cmp.w	r8, #0
   24386:	d107      	bne.n	24398 <strtol+0xcc>
		*endptr = (char *)(any ? s - 1 : nptr);
	}
	return acc;
}
   24388:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	} else if (neg) {
   2438c:	b101      	cbz	r1, 24390 <strtol+0xc4>
		acc = -acc;
   2438e:	4240      	negs	r0, r0
	if (endptr != NULL) {
   24390:	f1b8 0f00 	cmp.w	r8, #0
   24394:	d0f8      	beq.n	24388 <strtol+0xbc>
		*endptr = (char *)(any ? s - 1 : nptr);
   24396:	b10e      	cbz	r6, 2439c <strtol+0xd0>
   24398:	f104 3cff 	add.w	ip, r4, #4294967295
   2439c:	f8c8 c000 	str.w	ip, [r8]
	return acc;
   243a0:	e7f2      	b.n	24388 <strtol+0xbc>
	if (base == 0) {
   243a2:	2330      	movs	r3, #48	; 0x30
   243a4:	2a00      	cmp	r2, #0
   243a6:	d1b2      	bne.n	2430e <strtol+0x42>
		base = c == '0' ? 8 : 10;
   243a8:	2208      	movs	r2, #8
   243aa:	e7b0      	b.n	2430e <strtol+0x42>
	if ((base == 0 || base == 16) &&
   243ac:	2b30      	cmp	r3, #48	; 0x30
   243ae:	d0a6      	beq.n	242fe <strtol+0x32>
		base = c == '0' ? 8 : 10;
   243b0:	220a      	movs	r2, #10
   243b2:	e7ac      	b.n	2430e <strtol+0x42>

000243b4 <strcpy>:

char *strcpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s)
{
	char *dest = d;

	while (*s != '\0') {
   243b4:	3901      	subs	r1, #1
   243b6:	4603      	mov	r3, r0
   243b8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   243bc:	b90a      	cbnz	r2, 243c2 <strcpy+0xe>
		*d = *s;
		d++;
		s++;
	}

	*d = '\0';
   243be:	701a      	strb	r2, [r3, #0]

	return dest;
}
   243c0:	4770      	bx	lr
		*d = *s;
   243c2:	f803 2b01 	strb.w	r2, [r3], #1
		s++;
   243c6:	e7f7      	b.n	243b8 <strcpy+0x4>

000243c8 <strncpy>:
 *
 * @return pointer to destination buffer <d>
 */

char *strncpy(char *_MLIBC_RESTRICT d, const char *_MLIBC_RESTRICT s, size_t n)
{
   243c8:	b570      	push	{r4, r5, r6, lr}
   243ca:	4605      	mov	r5, r0
   243cc:	462b      	mov	r3, r5
	char *dest = d;

	while ((n > 0) && *s != '\0') {
   243ce:	b142      	cbz	r2, 243e2 <strncpy+0x1a>
   243d0:	f811 4b01 	ldrb.w	r4, [r1], #1
		*d = *s;
		s++;
		d++;
		n--;
   243d4:	1e56      	subs	r6, r2, #1
	while ((n > 0) && *s != '\0') {
   243d6:	b92c      	cbnz	r4, 243e4 <strncpy+0x1c>
   243d8:	442a      	add	r2, r5
	}

	while (n > 0) {
		*d = '\0';
   243da:	f803 4b01 	strb.w	r4, [r3], #1
	while (n > 0) {
   243de:	429a      	cmp	r2, r3
   243e0:	d1fb      	bne.n	243da <strncpy+0x12>
		d++;
		n--;
	}

	return dest;
}
   243e2:	bd70      	pop	{r4, r5, r6, pc}
		*d = *s;
   243e4:	f805 4b01 	strb.w	r4, [r5], #1
		n--;
   243e8:	4632      	mov	r2, r6
   243ea:	e7ef      	b.n	243cc <strncpy+0x4>

000243ec <strlen>:
 *
 * @return number of bytes in string <s>
 */

size_t strlen(const char *s)
{
   243ec:	4603      	mov	r3, r0
	size_t n = 0;
   243ee:	2000      	movs	r0, #0

	while (*s != '\0') {
   243f0:	5c1a      	ldrb	r2, [r3, r0]
   243f2:	b902      	cbnz	r2, 243f6 <strlen+0xa>
		s++;
		n++;
	}

	return n;
}
   243f4:	4770      	bx	lr
		n++;
   243f6:	3001      	adds	r0, #1
   243f8:	e7fa      	b.n	243f0 <strlen+0x4>

000243fa <strnlen>:
 *
 * @return number of bytes in fixed-size string <s>
 */

size_t strnlen(const char *s, size_t maxlen)
{
   243fa:	4603      	mov	r3, r0
	size_t n = 0;
   243fc:	2000      	movs	r0, #0

	while (*s != '\0' && n < maxlen) {
   243fe:	5c1a      	ldrb	r2, [r3, r0]
   24400:	b10a      	cbz	r2, 24406 <strnlen+0xc>
   24402:	4288      	cmp	r0, r1
   24404:	d100      	bne.n	24408 <strnlen+0xe>
		s++;
		n++;
	}

	return n;
}
   24406:	4770      	bx	lr
		n++;
   24408:	3001      	adds	r0, #1
   2440a:	e7f8      	b.n	243fe <strnlen+0x4>

0002440c <strcmp>:
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strcmp(const char *s1, const char *s2)
{
	while ((*s1 == *s2) && (*s1 != '\0')) {
   2440c:	1e43      	subs	r3, r0, #1
   2440e:	3901      	subs	r1, #1
   24410:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   24414:	f811 0f01 	ldrb.w	r0, [r1, #1]!
   24418:	4282      	cmp	r2, r0
   2441a:	d101      	bne.n	24420 <strcmp+0x14>
   2441c:	2a00      	cmp	r2, #0
   2441e:	d1f7      	bne.n	24410 <strcmp+0x4>
		s1++;
		s2++;
	}

	return *s1 - *s2;
}
   24420:	1a10      	subs	r0, r2, r0
   24422:	4770      	bx	lr

00024424 <strncmp>:
 *
 * @return negative # if <s1> < <s2>, 0 if <s1> == <s2>, else positive #
 */

int strncmp(const char *s1, const char *s2, size_t n)
{
   24424:	b510      	push	{r4, lr}
   24426:	3901      	subs	r1, #1
   24428:	4402      	add	r2, r0
	while ((n > 0) && (*s1 == *s2) && (*s1 != '\0')) {
   2442a:	4282      	cmp	r2, r0
   2442c:	d009      	beq.n	24442 <strncmp+0x1e>
   2442e:	7803      	ldrb	r3, [r0, #0]
   24430:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   24434:	42a3      	cmp	r3, r4
   24436:	d100      	bne.n	2443a <strncmp+0x16>
   24438:	b90b      	cbnz	r3, 2443e <strncmp+0x1a>
		s1++;
		s2++;
		n--;
	}

	return (n == 0) ? 0 : (*s1 - *s2);
   2443a:	1b18      	subs	r0, r3, r4
   2443c:	e002      	b.n	24444 <strncmp+0x20>
		s1++;
   2443e:	3001      	adds	r0, #1
		n--;
   24440:	e7f3      	b.n	2442a <strncmp+0x6>
	return (n == 0) ? 0 : (*s1 - *s2);
   24442:	2000      	movs	r0, #0
}
   24444:	bd10      	pop	{r4, pc}

00024446 <memcmp>:
 * @brief Compare two memory areas
 *
 * @return negative # if <m1> < <m2>, 0 if <m1> == <m2>, else positive #
 */
int memcmp(const void *m1, const void *m2, size_t n)
{
   24446:	b510      	push	{r4, lr}
   24448:	4603      	mov	r3, r0
	const char *c1 = m1;
	const char *c2 = m2;

	if (!n) {
   2444a:	b15a      	cbz	r2, 24464 <memcmp+0x1e>
   2444c:	3901      	subs	r1, #1
   2444e:	1884      	adds	r4, r0, r2
		return 0;
	}

	while ((--n > 0) && (*c1 == *c2)) {
   24450:	f813 0b01 	ldrb.w	r0, [r3], #1
   24454:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   24458:	42a3      	cmp	r3, r4
   2445a:	d001      	beq.n	24460 <memcmp+0x1a>
   2445c:	4290      	cmp	r0, r2
   2445e:	d0f7      	beq.n	24450 <memcmp+0xa>
		c1++;
		c2++;
	}

	return *c1 - *c2;
   24460:	1a80      	subs	r0, r0, r2
}
   24462:	bd10      	pop	{r4, pc}
		return 0;
   24464:	4610      	mov	r0, r2
   24466:	e7fc      	b.n	24462 <memcmp+0x1c>

00024468 <memcpy>:
 *
 * @return pointer to start of destination buffer
 */

void *memcpy(void *_MLIBC_RESTRICT d, const void *_MLIBC_RESTRICT s, size_t n)
{
   24468:	b5f0      	push	{r4, r5, r6, r7, lr}

	unsigned char *d_byte = (unsigned char *)d;
	const unsigned char *s_byte = (const unsigned char *)s;
	const uintptr_t mask = sizeof(mem_word_t) - 1;

	if ((((uintptr_t)d ^ (uintptr_t)s_byte) & mask) == 0) {
   2446a:	ea81 0400 	eor.w	r4, r1, r0
   2446e:	07a5      	lsls	r5, r4, #30
   24470:	4603      	mov	r3, r0
   24472:	d00b      	beq.n	2448c <memcpy+0x24>
   24474:	3b01      	subs	r3, #1
   24476:	440a      	add	r2, r1
		s_byte = (unsigned char *)s_word;
	}

	/* do byte-sized copying until finished */

	while (n > 0) {
   24478:	4291      	cmp	r1, r2
   2447a:	d11b      	bne.n	244b4 <memcpy+0x4c>
		*(d_byte++) = *(s_byte++);
		n--;
	}

	return d;
}
   2447c:	bdf0      	pop	{r4, r5, r6, r7, pc}
			if (n == 0) {
   2447e:	2a00      	cmp	r2, #0
   24480:	d0fc      	beq.n	2447c <memcpy+0x14>
			*(d_byte++) = *(s_byte++);
   24482:	f811 4b01 	ldrb.w	r4, [r1], #1
   24486:	f803 4b01 	strb.w	r4, [r3], #1
			n--;
   2448a:	3a01      	subs	r2, #1
		while (((uintptr_t)d_byte) & mask) {
   2448c:	079c      	lsls	r4, r3, #30
   2448e:	d1f6      	bne.n	2447e <memcpy+0x16>
   24490:	f022 0403 	bic.w	r4, r2, #3
   24494:	1f1d      	subs	r5, r3, #4
   24496:	0896      	lsrs	r6, r2, #2
   24498:	190f      	adds	r7, r1, r4
		while (n >= sizeof(mem_word_t)) {
   2449a:	42b9      	cmp	r1, r7
   2449c:	d105      	bne.n	244aa <memcpy+0x42>
   2449e:	f06f 0503 	mvn.w	r5, #3
   244a2:	fb05 2206 	mla	r2, r5, r6, r2
		d_byte = (unsigned char *)d_word;
   244a6:	4423      	add	r3, r4
   244a8:	e7e4      	b.n	24474 <memcpy+0xc>
			*(d_word++) = *(s_word++);
   244aa:	f851 cb04 	ldr.w	ip, [r1], #4
   244ae:	f845 cf04 	str.w	ip, [r5, #4]!
			n -= sizeof(mem_word_t);
   244b2:	e7f2      	b.n	2449a <memcpy+0x32>
		*(d_byte++) = *(s_byte++);
   244b4:	f811 4b01 	ldrb.w	r4, [r1], #1
   244b8:	f803 4f01 	strb.w	r4, [r3, #1]!
		n--;
   244bc:	e7dc      	b.n	24478 <memcpy+0x10>

000244be <memset>:
 *
 * @return pointer to start of buffer
 */

void *memset(void *buf, int c, size_t n)
{
   244be:	b570      	push	{r4, r5, r6, lr}
	/* do byte-sized initialization until word-aligned or finished */

	unsigned char *d_byte = (unsigned char *)buf;
	unsigned char c_byte = (unsigned char)c;
   244c0:	b2c9      	uxtb	r1, r1
	unsigned char *d_byte = (unsigned char *)buf;
   244c2:	4604      	mov	r4, r0

	while (((uintptr_t)d_byte) & (sizeof(mem_word_t) - 1)) {
   244c4:	07a3      	lsls	r3, r4, #30
   244c6:	d111      	bne.n	244ec <memset+0x2e>
	/* do word-sized initialization as long as possible */

	mem_word_t *d_word = (mem_word_t *)d_byte;
	mem_word_t c_word = (mem_word_t)c_byte;

	c_word |= c_word << 8;
   244c8:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
	c_word |= c_word << 16;
   244cc:	ea43 4503 	orr.w	r5, r3, r3, lsl #16
#if Z_MEM_WORD_T_WIDTH > 32
	c_word |= c_word << 32;
#endif

	while (n >= sizeof(mem_word_t)) {
   244d0:	f022 0303 	bic.w	r3, r2, #3
   244d4:	0896      	lsrs	r6, r2, #2
   244d6:	4423      	add	r3, r4
   244d8:	429c      	cmp	r4, r3
   244da:	d10d      	bne.n	244f8 <memset+0x3a>
   244dc:	f06f 0403 	mvn.w	r4, #3
   244e0:	fb04 2206 	mla	r2, r4, r6, r2
   244e4:	441a      	add	r2, r3

	/* do byte-sized initialization until finished */

	d_byte = (unsigned char *)d_word;

	while (n > 0) {
   244e6:	4293      	cmp	r3, r2
   244e8:	d109      	bne.n	244fe <memset+0x40>
		*(d_byte++) = c_byte;
		n--;
	}

	return buf;
}
   244ea:	bd70      	pop	{r4, r5, r6, pc}
		if (n == 0) {
   244ec:	2a00      	cmp	r2, #0
   244ee:	d0fc      	beq.n	244ea <memset+0x2c>
		*(d_byte++) = c_byte;
   244f0:	f804 1b01 	strb.w	r1, [r4], #1
		n--;
   244f4:	3a01      	subs	r2, #1
   244f6:	e7e5      	b.n	244c4 <memset+0x6>
		*(d_word++) = c_word;
   244f8:	f844 5b04 	str.w	r5, [r4], #4
		n -= sizeof(mem_word_t);
   244fc:	e7ec      	b.n	244d8 <memset+0x1a>
		*(d_byte++) = c_byte;
   244fe:	f803 1b01 	strb.w	r1, [r3], #1
		n--;
   24502:	e7f0      	b.n	244e6 <memset+0x28>

00024504 <_stdout_hook_default>:
}
   24504:	f04f 30ff 	mov.w	r0, #4294967295
   24508:	4770      	bx	lr

0002450a <fputc>:
	if (z_syscall_trap()) {
		return (int) arch_syscall_invoke2(*(uintptr_t *)&c, *(uintptr_t *)&stream, K_SYSCALL_ZEPHYR_FPUTC);
	}
#endif
	compiler_barrier();
	return z_impl_zephyr_fputc(c, stream);
   2450a:	f7e3 bdc5 	b.w	8098 <z_impl_zephyr_fputc>

0002450e <sprintf_out>:
	if (p->len > 1) { /* need to reserve a byte for EOS */
   2450e:	684b      	ldr	r3, [r1, #4]
   24510:	2b01      	cmp	r3, #1
   24512:	dd07      	ble.n	24524 <sprintf_out+0x16>
		*(p->ptr) = c;
   24514:	680b      	ldr	r3, [r1, #0]
   24516:	7018      	strb	r0, [r3, #0]
		p->ptr += 1;
   24518:	680b      	ldr	r3, [r1, #0]
   2451a:	3301      	adds	r3, #1
   2451c:	600b      	str	r3, [r1, #0]
		p->len -= 1;
   2451e:	684b      	ldr	r3, [r1, #4]
   24520:	3b01      	subs	r3, #1
   24522:	604b      	str	r3, [r1, #4]
}
   24524:	2000      	movs	r0, #0
   24526:	4770      	bx	lr

00024528 <z_platform_init>:

void z_platform_init(void)
{
	SystemInit();
   24528:	f7fa bb2e 	b.w	1eb88 <SystemInit>

0002452c <pm_power_state_set>:
#include <logging/log.h>
LOG_MODULE_DECLARE(soc, CONFIG_SOC_LOG_LEVEL);

/* Invoke Low Power/System Off specific Tasks */
void pm_power_state_set(struct pm_state_info info)
{
   2452c:	b082      	sub	sp, #8
   2452e:	ab02      	add	r3, sp, #8
   24530:	e903 0003 	stmdb	r3, {r0, r1}
	switch (info.state) {
   24534:	f89d 3000 	ldrb.w	r3, [sp]
   24538:	2b06      	cmp	r3, #6
   2453a:	d108      	bne.n	2454e <pm_power_state_set+0x22>
    p_reg->SYSTEMOFF = POWER_SYSTEMOFF_SYSTEMOFF_Enter;
   2453c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   24540:	2201      	movs	r2, #1
   24542:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  __ASM volatile ("dsb 0xF":::"memory");
   24546:	f3bf 8f4f 	dsb	sy
        __WFE();
   2454a:	bf20      	wfe
    while (true)
   2454c:	e7fd      	b.n	2454a <pm_power_state_set+0x1e>
		break;
	default:
		LOG_DBG("Unsupported power state %u", info.state);
		break;
	}
}
   2454e:	b002      	add	sp, #8
   24550:	4770      	bx	lr

00024552 <pm_power_state_exit_post_ops>:

/* Handle SOC specific activity after Low Power Mode Exit */
void pm_power_state_exit_post_ops(struct pm_state_info info)
{
   24552:	b082      	sub	sp, #8
   24554:	ab02      	add	r3, sp, #8
   24556:	e903 0003 	stmdb	r3, {r0, r1}
   2455a:	2300      	movs	r3, #0
   2455c:	f383 8811 	msr	BASEPRI, r3
   24560:	f3bf 8f6f 	isb	sy
	/*
	 * System is now in active mode. Reenable interrupts which were disabled
	 * when OS started idling code.
	 */
	irq_unlock(0);
}
   24564:	b002      	add	sp, #8
   24566:	4770      	bx	lr

00024568 <ah>:
	return bt_encrypt_le(key, plaintext, enc_data);
#endif
}

static int ah(const uint8_t irk[16], const uint8_t r[3], uint8_t out[3])
{
   24568:	b530      	push	{r4, r5, lr}
   2456a:	b085      	sub	sp, #20
   2456c:	4604      	mov	r4, r0
   2456e:	4615      	mov	r5, r2

	BT_DBG("irk %s", bt_hex(irk, 16));
	BT_DBG("r %s", bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
   24570:	4668      	mov	r0, sp
   24572:	2203      	movs	r2, #3
   24574:	f7ff ff78 	bl	24468 <memcpy>
	(void)memset(res + 3, 0, 13);
   24578:	220d      	movs	r2, #13
   2457a:	2100      	movs	r1, #0
   2457c:	f10d 0003 	add.w	r0, sp, #3
   24580:	f7ff ff9d 	bl	244be <memset>
	return bt_encrypt_le(key, plaintext, enc_data);
   24584:	4620      	mov	r0, r4
   24586:	466a      	mov	r2, sp
   24588:	4669      	mov	r1, sp
   2458a:	f7ee ffc5 	bl	13518 <bt_encrypt_le>

	err = internal_encrypt_le(irk, res, res);
	if (err) {
   2458e:	4604      	mov	r4, r0
   24590:	b920      	cbnz	r0, 2459c <ah+0x34>
	 *      ah(h, r) = e(k, r') mod 2^24
	 * The output of the security function e is then truncated to 24 bits
	 * by taking the least significant 24 bits of the output of e as the
	 * result of ah.
	 */
	memcpy(out, res, 3);
   24592:	2203      	movs	r2, #3
   24594:	4669      	mov	r1, sp
   24596:	4628      	mov	r0, r5
   24598:	f7ff ff66 	bl	24468 <memcpy>

	return 0;
}
   2459c:	4620      	mov	r0, r4
   2459e:	b005      	add	sp, #20
   245a0:	bd30      	pop	{r4, r5, pc}

000245a2 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const uint8_t irk[16], const bt_addr_t *addr)
{
   245a2:	b513      	push	{r0, r1, r4, lr}
   245a4:	460c      	mov	r4, r1
	uint8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
   245a6:	aa01      	add	r2, sp, #4
   245a8:	3103      	adds	r1, #3
   245aa:	f7ff ffdd 	bl	24568 <ah>
	if (err) {
   245ae:	b948      	cbnz	r0, 245c4 <bt_rpa_irk_matches+0x22>
		return false;
	}

	return !memcmp(addr->val, hash, 3);
   245b0:	2203      	movs	r2, #3
   245b2:	a901      	add	r1, sp, #4
   245b4:	4620      	mov	r0, r4
   245b6:	f7ff ff46 	bl	24446 <memcmp>
   245ba:	fab0 f080 	clz	r0, r0
   245be:	0940      	lsrs	r0, r0, #5
}
   245c0:	b002      	add	sp, #8
   245c2:	bd10      	pop	{r4, pc}
		return false;
   245c4:	2000      	movs	r0, #0
   245c6:	e7fb      	b.n	245c0 <bt_rpa_irk_matches+0x1e>

000245c8 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const uint8_t irk[16], bt_addr_t *rpa)
{
   245c8:	b570      	push	{r4, r5, r6, lr}
	int err;

	err = internal_rand(rpa->val + 3, 3);
   245ca:	1cce      	adds	r6, r1, #3
{
   245cc:	4605      	mov	r5, r0
   245ce:	460c      	mov	r4, r1
	return bt_rand(buf, len);
   245d0:	4630      	mov	r0, r6
   245d2:	2103      	movs	r1, #3
   245d4:	f7ee ff9e 	bl	13514 <bt_rand>
	if (err) {
   245d8:	b960      	cbnz	r0, 245f4 <bt_rpa_create+0x2c>
		return err;
	}

	BT_ADDR_SET_RPA(rpa);
   245da:	7963      	ldrb	r3, [r4, #5]
   245dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   245e0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   245e4:	7163      	strb	r3, [r4, #5]

	err = ah(irk, rpa->val + 3, rpa->val);
   245e6:	4622      	mov	r2, r4
   245e8:	4631      	mov	r1, r6
   245ea:	4628      	mov	r0, r5
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
   245ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	err = ah(irk, rpa->val + 3, rpa->val);
   245f0:	f7ff bfba 	b.w	24568 <ah>
}
   245f4:	bd70      	pop	{r4, r5, r6, pc}

000245f6 <send_cmd_status>:
{
   245f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   245fa:	f04f 32ff 	mov.w	r2, #4294967295
{
   245fe:	4606      	mov	r6, r0
   24600:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(BT_HCI_EVT_CMD_STATUS, false, K_FOREVER);
   24602:	f04f 33ff 	mov.w	r3, #4294967295
   24606:	2100      	movs	r1, #0
   24608:	200f      	movs	r0, #15
   2460a:	f7e4 f981 	bl	8910 <bt_buf_get_evt>
	((struct bt_buf_data *)net_buf_user_data(buf))->type = type;
   2460e:	2701      	movs	r7, #1
	return net_buf_simple_add(&buf->b, len);
   24610:	f100 0808 	add.w	r8, r0, #8
   24614:	4604      	mov	r4, r0
   24616:	7507      	strb	r7, [r0, #20]
   24618:	2102      	movs	r1, #2
   2461a:	4640      	mov	r0, r8
   2461c:	f001 ff78 	bl	26510 <net_buf_simple_add>
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24620:	230f      	movs	r3, #15
	hdr->len = sizeof(*evt);
   24622:	2104      	movs	r1, #4
	hdr->evt = BT_HCI_EVT_CMD_STATUS;
   24624:	7003      	strb	r3, [r0, #0]
	hdr->len = sizeof(*evt);
   24626:	7041      	strb	r1, [r0, #1]
   24628:	4640      	mov	r0, r8
   2462a:	f001 ff71 	bl	26510 <net_buf_simple_add>
	evt->ncmd = 1U;
   2462e:	7047      	strb	r7, [r0, #1]
	evt->status = status;
   24630:	7005      	strb	r5, [r0, #0]
	evt->opcode = sys_cpu_to_le16(opcode);
   24632:	8046      	strh	r6, [r0, #2]
		bt_recv_prio(buf);
   24634:	4620      	mov	r0, r4
}
   24636:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		bt_recv_prio(buf);
   2463a:	f7e5 bf45 	b.w	a4c8 <bt_recv_prio>

0002463e <sys_memcpy_swap.constprop.0>:
	for (; length > 0; length--) {
   2463e:	f101 0320 	add.w	r3, r1, #32
   24642:	3801      	subs	r0, #1
		*pdst++ = *psrc--;
   24644:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   24648:	f800 2f01 	strb.w	r2, [r0, #1]!
	for (; length > 0; length--) {
   2464c:	428b      	cmp	r3, r1
   2464e:	d1f9      	bne.n	24644 <sys_memcpy_swap.constprop.0+0x6>
}
   24650:	4770      	bx	lr

00024652 <default_CSPRNG>:
{
   24652:	b508      	push	{r3, lr}
	return !bt_rand(dst, len);
   24654:	f7ee ff5e 	bl	13514 <bt_rand>
}
   24658:	fab0 f080 	clz	r0, r0
   2465c:	0940      	lsrs	r0, r0, #5
   2465e:	bd08      	pop	{r3, pc}

00024660 <bt_settings_decode_key>:
{
   24660:	b570      	push	{r4, r5, r6, lr}
   24662:	460d      	mov	r5, r1
	if (settings_name_next(key, NULL) != 13) {
   24664:	2100      	movs	r1, #0
{
   24666:	4604      	mov	r4, r0
	if (settings_name_next(key, NULL) != 13) {
   24668:	f7fe fba7 	bl	22dba <settings_name_next>
   2466c:	280d      	cmp	r0, #13
   2466e:	d118      	bne.n	246a2 <bt_settings_decode_key+0x42>
	if (key[12] == '0') {
   24670:	7b23      	ldrb	r3, [r4, #12]
   24672:	2b30      	cmp	r3, #48	; 0x30
   24674:	d111      	bne.n	2469a <bt_settings_decode_key+0x3a>
		addr->type = BT_ADDR_LE_PUBLIC;
   24676:	2300      	movs	r3, #0
   24678:	702b      	strb	r3, [r5, #0]
   2467a:	f104 060c 	add.w	r6, r4, #12
   2467e:	3506      	adds	r5, #6
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   24680:	462a      	mov	r2, r5
   24682:	4620      	mov	r0, r4
   24684:	2301      	movs	r3, #1
   24686:	2102      	movs	r1, #2
	for (uint8_t i = 0; i < 6; i++) {
   24688:	3402      	adds	r4, #2
		hex2bin(&key[i * 2], 2, &addr->a.val[5 - i], 1);
   2468a:	f7fd f9d1 	bl	21a30 <hex2bin>
	for (uint8_t i = 0; i < 6; i++) {
   2468e:	42b4      	cmp	r4, r6
   24690:	f105 35ff 	add.w	r5, r5, #4294967295
   24694:	d1f4      	bne.n	24680 <bt_settings_decode_key+0x20>
	return 0;
   24696:	2000      	movs	r0, #0
}
   24698:	bd70      	pop	{r4, r5, r6, pc}
	} else if (key[12] == '1') {
   2469a:	2b31      	cmp	r3, #49	; 0x31
   2469c:	d101      	bne.n	246a2 <bt_settings_decode_key+0x42>
		addr->type = BT_ADDR_LE_RANDOM;
   2469e:	2301      	movs	r3, #1
   246a0:	e7ea      	b.n	24678 <bt_settings_decode_key+0x18>
		return -EINVAL;
   246a2:	f06f 0015 	mvn.w	r0, #21
   246a6:	e7f7      	b.n	24698 <bt_settings_decode_key+0x38>

000246a8 <bt_uuid_cmp>:

	return memcmp(uuid1.val, uuid2.val, 16);
}

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
   246a8:	b510      	push	{r4, lr}
   246aa:	460c      	mov	r4, r1
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type) {
   246ac:	7801      	ldrb	r1, [r0, #0]
   246ae:	7822      	ldrb	r2, [r4, #0]
   246b0:	428a      	cmp	r2, r1
{
   246b2:	b08a      	sub	sp, #40	; 0x28
	if (u1->type != u2->type) {
   246b4:	d00f      	beq.n	246d6 <bt_uuid_cmp+0x2e>
	uuid_to_uuid128(u1, &uuid1);
   246b6:	4669      	mov	r1, sp
   246b8:	f7e4 f8be 	bl	8838 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
   246bc:	a905      	add	r1, sp, #20
   246be:	4620      	mov	r0, r4
   246c0:	f7e4 f8ba 	bl	8838 <uuid_to_uuid128>
	return memcmp(uuid1.val, uuid2.val, 16);
   246c4:	2210      	movs	r2, #16
   246c6:	f10d 0115 	add.w	r1, sp, #21
   246ca:	f10d 0001 	add.w	r0, sp, #1
   246ce:	f7ff feba 	bl	24446 <memcmp>
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
}
   246d2:	b00a      	add	sp, #40	; 0x28
   246d4:	bd10      	pop	{r4, pc}
	switch (u1->type) {
   246d6:	2a01      	cmp	r2, #1
   246d8:	d006      	beq.n	246e8 <bt_uuid_cmp+0x40>
   246da:	2a02      	cmp	r2, #2
   246dc:	d007      	beq.n	246ee <bt_uuid_cmp+0x46>
   246de:	b972      	cbnz	r2, 246fe <bt_uuid_cmp+0x56>
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
   246e0:	8840      	ldrh	r0, [r0, #2]
   246e2:	8863      	ldrh	r3, [r4, #2]
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
   246e4:	1ac0      	subs	r0, r0, r3
   246e6:	e7f4      	b.n	246d2 <bt_uuid_cmp+0x2a>
   246e8:	6840      	ldr	r0, [r0, #4]
   246ea:	6863      	ldr	r3, [r4, #4]
   246ec:	e7fa      	b.n	246e4 <bt_uuid_cmp+0x3c>
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   246ee:	2210      	movs	r2, #16
   246f0:	1c61      	adds	r1, r4, #1
   246f2:	3001      	adds	r0, #1
}
   246f4:	b00a      	add	sp, #40	; 0x28
   246f6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
   246fa:	f7ff bea4 	b.w	24446 <memcmp>
	switch (u1->type) {
   246fe:	f06f 0015 	mvn.w	r0, #21
   24702:	e7e6      	b.n	246d2 <bt_uuid_cmp+0x2a>

00024704 <bt_uuid_create>:

bool bt_uuid_create(struct bt_uuid *uuid, const uint8_t *data, uint8_t data_len)
{
	/* Copy UUID from packet data/internal variable to internal bt_uuid */
	switch (data_len) {
   24704:	2a04      	cmp	r2, #4
{
   24706:	b510      	push	{r4, lr}
	switch (data_len) {
   24708:	d00a      	beq.n	24720 <bt_uuid_create+0x1c>
   2470a:	2a10      	cmp	r2, #16
   2470c:	d00d      	beq.n	2472a <bt_uuid_create+0x26>
   2470e:	2a02      	cmp	r2, #2
   24710:	f04f 0300 	mov.w	r3, #0
   24714:	d10f      	bne.n	24736 <bt_uuid_create+0x32>
	case 2:
		uuid->type = BT_UUID_TYPE_16;
   24716:	7003      	strb	r3, [r0, #0]
	return ((uint16_t)src[1] << 8) | src[0];
   24718:	880b      	ldrh	r3, [r1, #0]
		BT_UUID_16(uuid)->val = sys_get_le16(data);
   2471a:	8043      	strh	r3, [r0, #2]
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
		break;
	default:
		return false;
	}
	return true;
   2471c:	2001      	movs	r0, #1
}
   2471e:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_32;
   24720:	2301      	movs	r3, #1
   24722:	7003      	strb	r3, [r0, #0]
	return ((uint32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
   24724:	680a      	ldr	r2, [r1, #0]
		BT_UUID_32(uuid)->val = sys_get_le32(data);
   24726:	6042      	str	r2, [r0, #4]
		break;
   24728:	e7f8      	b.n	2471c <bt_uuid_create+0x18>
		uuid->type = BT_UUID_TYPE_128;
   2472a:	2302      	movs	r3, #2
   2472c:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(&BT_UUID_128(uuid)->val, data, 16);
   24730:	f7ff fe9a 	bl	24468 <memcpy>
		break;
   24734:	e7f2      	b.n	2471c <bt_uuid_create+0x18>
	switch (data_len) {
   24736:	4618      	mov	r0, r3
   24738:	e7f1      	b.n	2471e <bt_uuid_create+0x1a>

0002473a <bt_addr_le_create_static>:
#include <bluetooth/addr.h>
#include <bluetooth/crypto.h>

static inline int create_random_addr(bt_addr_le_t *addr)
{
	addr->type = BT_ADDR_LE_RANDOM;
   2473a:	2301      	movs	r3, #1

	return 0;
}

int bt_addr_le_create_static(bt_addr_le_t *addr)
{
   2473c:	b510      	push	{r4, lr}
	return bt_rand(addr->a.val, 6);
   2473e:	2106      	movs	r1, #6
{
   24740:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
   24742:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
   24746:	f7ee fee5 	bl	13514 <bt_rand>
	int err;

	err = create_random_addr(addr);
	if (err) {
   2474a:	b918      	cbnz	r0, 24754 <bt_addr_le_create_static+0x1a>
		return err;
	}

	BT_ADDR_SET_STATIC(&addr->a);
   2474c:	79a3      	ldrb	r3, [r4, #6]
   2474e:	f063 033f 	orn	r3, r3, #63	; 0x3f
   24752:	71a3      	strb	r3, [r4, #6]

	return 0;
}
   24754:	bd10      	pop	{r4, pc}

00024756 <bt_hci_evt_get_flags>:
 *
 * @return HCI event flags for the specified event.
 */
static inline uint8_t bt_hci_evt_get_flags(uint8_t evt)
{
	switch (evt) {
   24756:	280f      	cmp	r0, #15
   24758:	d806      	bhi.n	24768 <bt_hci_evt_get_flags+0x12>
   2475a:	280d      	cmp	r0, #13
   2475c:	d80b      	bhi.n	24776 <bt_hci_evt_get_flags+0x20>
	case BT_HCI_EVT_DISCONN_COMPLETE:
		return BT_HCI_EVT_FLAG_RECV | BT_HCI_EVT_FLAG_RECV_PRIO;
   2475e:	2805      	cmp	r0, #5
   24760:	bf14      	ite	ne
   24762:	2002      	movne	r0, #2
   24764:	2003      	moveq	r0, #3
   24766:	4770      	bx	lr
	switch (evt) {
   24768:	2813      	cmp	r0, #19
   2476a:	d004      	beq.n	24776 <bt_hci_evt_get_flags+0x20>
   2476c:	281a      	cmp	r0, #26
   2476e:	bf14      	ite	ne
   24770:	2002      	movne	r0, #2
   24772:	2001      	moveq	r0, #1
   24774:	4770      	bx	lr
   24776:	2001      	movs	r0, #1
	case BT_HCI_EVT_CMD_STATUS:
		return BT_HCI_EVT_FLAG_RECV_PRIO;
	default:
		return BT_HCI_EVT_FLAG_RECV;
	}
}
   24778:	4770      	bx	lr

0002477a <update_sec_level>:
	if (conn->le.keys && (conn->le.keys->flags & BT_KEYS_AUTHENTICATED)) {
   2477a:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
   2477e:	b193      	cbz	r3, 247a6 <update_sec_level+0x2c>
   24780:	7b5a      	ldrb	r2, [r3, #13]
   24782:	07d1      	lsls	r1, r2, #31
   24784:	d50f      	bpl.n	247a6 <update_sec_level+0x2c>
		if (conn->le.keys->flags & BT_KEYS_SC &&
   24786:	06d2      	lsls	r2, r2, #27
   24788:	d50b      	bpl.n	247a2 <update_sec_level+0x28>
   2478a:	7b1b      	ldrb	r3, [r3, #12]
   2478c:	2b10      	cmp	r3, #16
   2478e:	d108      	bne.n	247a2 <update_sec_level+0x28>
			conn->sec_level = BT_SECURITY_L4;
   24790:	2304      	movs	r3, #4
		conn->sec_level = BT_SECURITY_L2;
   24792:	7243      	strb	r3, [r0, #9]
	return !(conn->required_sec_level > conn->sec_level);
   24794:	7a82      	ldrb	r2, [r0, #10]
   24796:	7a40      	ldrb	r0, [r0, #9]
}
   24798:	4282      	cmp	r2, r0
   2479a:	bf8c      	ite	hi
   2479c:	2000      	movhi	r0, #0
   2479e:	2001      	movls	r0, #1
   247a0:	4770      	bx	lr
			conn->sec_level = BT_SECURITY_L3;
   247a2:	2303      	movs	r3, #3
   247a4:	e7f5      	b.n	24792 <update_sec_level+0x18>
		conn->sec_level = BT_SECURITY_L2;
   247a6:	2302      	movs	r3, #2
   247a8:	e7f3      	b.n	24792 <update_sec_level+0x18>

000247aa <get_adv_channel_map>:
{
   247aa:	4603      	mov	r3, r0
		channel_map &= ~0x01;
   247ac:	f410 4f00 	tst.w	r0, #32768	; 0x8000
   247b0:	bf0c      	ite	eq
   247b2:	2007      	moveq	r0, #7
   247b4:	2006      	movne	r0, #6
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_38) {
   247b6:	03da      	lsls	r2, r3, #15
		channel_map &= ~0x02;
   247b8:	bf48      	it	mi
   247ba:	f000 0005 	andmi.w	r0, r0, #5
	if (options & BT_LE_ADV_OPT_DISABLE_CHAN_39) {
   247be:	039b      	lsls	r3, r3, #14
		channel_map &= ~0x04;
   247c0:	bf48      	it	mi
   247c2:	f000 00fb 	andmi.w	r0, r0, #251	; 0xfb
}
   247c6:	4770      	bx	lr

000247c8 <atomic_and>:
{
   247c8:	4603      	mov	r3, r0
}
   247ca:	f3bf 8f5b 	dmb	ish
   247ce:	e853 0f00 	ldrex	r0, [r3]
   247d2:	ea00 0201 	and.w	r2, r0, r1
   247d6:	e843 2c00 	strex	ip, r2, [r3]
   247da:	f1bc 0f00 	cmp.w	ip, #0
   247de:	d1f6      	bne.n	247ce <atomic_and+0x6>
   247e0:	f3bf 8f5b 	dmb	ish
   247e4:	4770      	bx	lr

000247e6 <atomic_get>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   247e6:	f3bf 8f5b 	dmb	ish
   247ea:	6800      	ldr	r0, [r0, #0]
   247ec:	f3bf 8f5b 	dmb	ish
}
   247f0:	4770      	bx	lr

000247f2 <bt_addr_le_cmp>:
	return memcmp(a, b, sizeof(*a));
   247f2:	2207      	movs	r2, #7
   247f4:	f7ff be27 	b.w	24446 <memcmp>

000247f8 <bt_addr_copy>:
	memcpy(dst, src, sizeof(*dst));
   247f8:	2206      	movs	r2, #6
   247fa:	f7ff be35 	b.w	24468 <memcpy>

000247fe <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   247fe:	2207      	movs	r2, #7
   24800:	f7ff be32 	b.w	24468 <memcpy>

00024804 <atomic_or>:
{
   24804:	4603      	mov	r3, r0
}
   24806:	f3bf 8f5b 	dmb	ish
   2480a:	e853 0f00 	ldrex	r0, [r3]
   2480e:	ea40 0201 	orr.w	r2, r0, r1
   24812:	e843 2c00 	strex	ip, r2, [r3]
   24816:	f1bc 0f00 	cmp.w	ip, #0
   2481a:	d1f6      	bne.n	2480a <atomic_or+0x6>
   2481c:	f3bf 8f5b 	dmb	ish
   24820:	4770      	bx	lr

00024822 <atomic_test_and_set_bit>:
{
   24822:	b508      	push	{r3, lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   24824:	2301      	movs	r3, #1
   24826:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_or(ATOMIC_ELEM(target, bit), mask);
   2482a:	f7ff ffeb 	bl	24804 <atomic_or>
	return (old & mask) != 0;
   2482e:	4201      	tst	r1, r0
}
   24830:	bf14      	ite	ne
   24832:	2001      	movne	r0, #1
   24834:	2000      	moveq	r0, #0
   24836:	bd08      	pop	{r3, pc}

00024838 <atomic_set_bit_to>:
 * @param val true for 1, false for 0.
 *
 * @return N/A
 */
static inline void atomic_set_bit_to(atomic_t *target, int bit, bool val)
{
   24838:	460b      	mov	r3, r1
   2483a:	b410      	push	{r4}
	atomic_val_t mask = ATOMIC_MASK(bit);

	if (val) {
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2483c:	095b      	lsrs	r3, r3, #5
	atomic_val_t mask = ATOMIC_MASK(bit);
   2483e:	f001 041f 	and.w	r4, r1, #31
   24842:	2101      	movs	r1, #1
   24844:	40a1      	lsls	r1, r4
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24846:	eb00 0083 	add.w	r0, r0, r3, lsl #2
	if (val) {
   2484a:	b112      	cbz	r2, 24852 <atomic_set_bit_to+0x1a>
	} else {
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
	}
}
   2484c:	bc10      	pop	{r4}
		(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   2484e:	f7ff bfd9 	b.w	24804 <atomic_or>
}
   24852:	bc10      	pop	{r4}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24854:	43c9      	mvns	r1, r1
   24856:	f7ff bfb7 	b.w	247c8 <atomic_and>

0002485a <unpair_remote>:
{
   2485a:	460b      	mov	r3, r1
	unpair(*id, &info->addr);
   2485c:	4601      	mov	r1, r0
   2485e:	7818      	ldrb	r0, [r3, #0]
   24860:	f7e4 b960 	b.w	8b24 <unpair>

00024864 <sys_put_le64>:
	dst[1] = val >> 8;
   24864:	f3c0 2307 	ubfx	r3, r0, #8, #8
	dst[0] = val;
   24868:	7010      	strb	r0, [r2, #0]
	dst[1] = val >> 8;
   2486a:	0e00      	lsrs	r0, r0, #24
   2486c:	7053      	strb	r3, [r2, #1]
   2486e:	70d0      	strb	r0, [r2, #3]
	dst[0] = val;
   24870:	2300      	movs	r3, #0
	dst[1] = val >> 8;
   24872:	f3c1 2007 	ubfx	r0, r1, #8, #8
   24876:	0e09      	lsrs	r1, r1, #24
	dst[0] = val;
   24878:	7093      	strb	r3, [r2, #2]
   2487a:	7113      	strb	r3, [r2, #4]
	dst[1] = val >> 8;
   2487c:	7150      	strb	r0, [r2, #5]
	dst[0] = val;
   2487e:	7193      	strb	r3, [r2, #6]
	dst[1] = val >> 8;
   24880:	71d1      	strb	r1, [r2, #7]
}
   24882:	4770      	bx	lr

00024884 <adv_id_check_connectable_func>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   24884:	f100 0210 	add.w	r2, r0, #16
{
   24888:	b508      	push	{r3, lr}
   2488a:	4603      	mov	r3, r0
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   2488c:	4610      	mov	r0, r2
   2488e:	f7ff ffaa 	bl	247e6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   24892:	0640      	lsls	r0, r0, #25
   24894:	d50a      	bpl.n	248ac <adv_id_check_connectable_func+0x28>
   24896:	4610      	mov	r0, r2
   24898:	f7ff ffa5 	bl	247e6 <atomic_get>
   2489c:	05c2      	lsls	r2, r0, #23
   2489e:	d505      	bpl.n	248ac <adv_id_check_connectable_func+0x28>
	    atomic_test_bit(adv->flags, BT_ADV_CONNECTABLE) &&
   248a0:	781a      	ldrb	r2, [r3, #0]
   248a2:	780b      	ldrb	r3, [r1, #0]
   248a4:	429a      	cmp	r2, r3
		check_data->adv_enabled = true;
   248a6:	bf1c      	itt	ne
   248a8:	2301      	movne	r3, #1
   248aa:	704b      	strbne	r3, [r1, #1]
}
   248ac:	bd08      	pop	{r3, pc}

000248ae <adv_rpa_invalidate>:
{
   248ae:	b508      	push	{r3, lr}
	if (!atomic_test_bit(adv->flags, BT_ADV_LIMITED)) {
   248b0:	f100 0310 	add.w	r3, r0, #16
   248b4:	4618      	mov	r0, r3
   248b6:	f7ff ff96 	bl	247e6 <atomic_get>
   248ba:	0682      	lsls	r2, r0, #26
   248bc:	d406      	bmi.n	248cc <adv_rpa_invalidate+0x1e>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   248be:	4618      	mov	r0, r3
   248c0:	f06f 0110 	mvn.w	r1, #16
}
   248c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   248c8:	f7ff bf7e 	b.w	247c8 <atomic_and>
   248cc:	bd08      	pop	{r3, pc}

000248ce <adv_is_private_enabled>:
{
   248ce:	b508      	push	{r3, lr}
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED) &&
   248d0:	f100 0310 	add.w	r3, r0, #16
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));
   248d4:	4618      	mov	r0, r3
   248d6:	f7ff ff86 	bl	247e6 <atomic_get>
   248da:	0642      	lsls	r2, r0, #25
   248dc:	d506      	bpl.n	248ec <adv_is_private_enabled+0x1e>
   248de:	4618      	mov	r0, r3
   248e0:	f7ff ff81 	bl	247e6 <atomic_get>
   248e4:	0503      	lsls	r3, r0, #20
		*adv_enabled = true;
   248e6:	bf5c      	itt	pl
   248e8:	2301      	movpl	r3, #1
   248ea:	700b      	strbpl	r3, [r1, #0]
}
   248ec:	bd08      	pop	{r3, pc}

000248ee <adv_pause_enabled>:
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   248ee:	f100 0310 	add.w	r3, r0, #16
{
   248f2:	b510      	push	{r4, lr}
   248f4:	4604      	mov	r4, r0
   248f6:	4618      	mov	r0, r3
   248f8:	f7ff ff75 	bl	247e6 <atomic_get>
	if (atomic_test_bit(adv->flags, BT_ADV_ENABLED)) {
   248fc:	0642      	lsls	r2, r0, #25
   248fe:	d50a      	bpl.n	24916 <adv_pause_enabled+0x28>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   24900:	f44f 5100 	mov.w	r1, #8192	; 0x2000
   24904:	4618      	mov	r0, r3
   24906:	f7ff ff7d 	bl	24804 <atomic_or>
	return set_le_adv_enable_legacy(adv, enable);
   2490a:	4620      	mov	r0, r4
   2490c:	2100      	movs	r1, #0
}
   2490e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   24912:	f7e4 bff1 	b.w	98f8 <set_le_adv_enable_legacy>
}
   24916:	bd10      	pop	{r4, pc}

00024918 <adv_unpause_enabled>:
{
   24918:	b510      	push	{r4, lr}
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   2491a:	f46f 5100 	mvn.w	r1, #8192	; 0x2000
   2491e:	4604      	mov	r4, r0
   24920:	3010      	adds	r0, #16
   24922:	f7ff ff51 	bl	247c8 <atomic_and>
	if (atomic_test_and_clear_bit(adv->flags, BT_ADV_PAUSED)) {
   24926:	0483      	lsls	r3, r0, #18
   24928:	d505      	bpl.n	24936 <adv_unpause_enabled+0x1e>
	return set_le_adv_enable_legacy(adv, enable);
   2492a:	4620      	mov	r0, r4
   2492c:	2101      	movs	r1, #1
}
   2492e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	return set_le_adv_enable_legacy(adv, enable);
   24932:	f7e4 bfe1 	b.w	98f8 <set_le_adv_enable_legacy>
}
   24936:	bd10      	pop	{r4, pc}

00024938 <keys_add_id>:
	if (keys->state & BT_KEYS_ID_ADDED) {
   24938:	7a03      	ldrb	r3, [r0, #8]
   2493a:	075b      	lsls	r3, r3, #29
{
   2493c:	4602      	mov	r2, r0
	if (keys->state & BT_KEYS_ID_ADDED) {
   2493e:	d505      	bpl.n	2494c <keys_add_id+0x14>
		hci_id_add(keys->id, &keys->addr, keys->irk.val);
   24940:	4601      	mov	r1, r0
   24942:	322a      	adds	r2, #42	; 0x2a
   24944:	f811 0b01 	ldrb.w	r0, [r1], #1
   24948:	f7e5 b892 	b.w	9a70 <hci_id_add>
}
   2494c:	4770      	bx	lr

0002494e <addr_res_enable>:
{
   2494e:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24950:	2101      	movs	r1, #1
{
   24952:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE, 1);
   24954:	f242 002d 	movw	r0, #8237	; 0x202d
   24958:	f7e4 fd30 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
   2495c:	4604      	mov	r4, r0
   2495e:	b158      	cbz	r0, 24978 <addr_res_enable+0x2a>
	return net_buf_simple_add_u8(&buf->b, val);
   24960:	4629      	mov	r1, r5
   24962:	3008      	adds	r0, #8
   24964:	f001 fde3 	bl	2652e <net_buf_simple_add_u8>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24968:	4621      	mov	r1, r4
   2496a:	2200      	movs	r2, #0
}
   2496c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADDR_RES_ENABLE,
   24970:	f242 002d 	movw	r0, #8237	; 0x202d
   24974:	f7e4 be82 	b.w	967c <bt_hci_cmd_send_sync>
}
   24978:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2497c:	bd38      	pop	{r3, r4, r5, pc}

0002497e <bt_lookup_id_addr>:
{
   2497e:	b510      	push	{r4, lr}
   24980:	460c      	mov	r4, r1
		keys = bt_keys_find_irk(id, addr);
   24982:	f7eb fd23 	bl	103cc <bt_keys_find_irk>
		if (keys) {
   24986:	b100      	cbz	r0, 2498a <bt_lookup_id_addr+0xc>
			return &keys->addr;
   24988:	1c44      	adds	r4, r0, #1
}
   2498a:	4620      	mov	r0, r4
   2498c:	bd10      	pop	{r4, pc}

0002498e <bt_hci_disconnect>:
{
   2498e:	b570      	push	{r4, r5, r6, lr}
   24990:	4606      	mov	r6, r0
   24992:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
   24994:	f240 4006 	movw	r0, #1030	; 0x406
   24998:	2103      	movs	r1, #3
   2499a:	f7e4 fd0f 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
   2499e:	4604      	mov	r4, r0
   249a0:	b168      	cbz	r0, 249be <bt_hci_disconnect+0x30>
	return net_buf_simple_add(&buf->b, len);
   249a2:	2103      	movs	r1, #3
   249a4:	3008      	adds	r0, #8
   249a6:	f001 fdb3 	bl	26510 <net_buf_simple_add>
	disconn->reason = reason;
   249aa:	7085      	strb	r5, [r0, #2]
	disconn->handle = sys_cpu_to_le16(handle);
   249ac:	8006      	strh	r6, [r0, #0]
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   249ae:	4621      	mov	r1, r4
   249b0:	2200      	movs	r2, #0
}
   249b2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_DISCONNECT, buf, NULL);
   249b6:	f240 4006 	movw	r0, #1030	; 0x406
   249ba:	f7e4 be5f 	b.w	967c <bt_hci_cmd_send_sync>
}
   249be:	f06f 0036 	mvn.w	r0, #54	; 0x36
   249c2:	bd70      	pop	{r4, r5, r6, pc}

000249c4 <bt_le_set_data_len>:
{
   249c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   249c6:	4607      	mov	r7, r0
   249c8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   249ca:	f242 0022 	movw	r0, #8226	; 0x2022
   249ce:	2106      	movs	r1, #6
{
   249d0:	4615      	mov	r5, r2
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
   249d2:	f7e4 fcf3 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
   249d6:	4604      	mov	r4, r0
   249d8:	b170      	cbz	r0, 249f8 <bt_le_set_data_len+0x34>
   249da:	2106      	movs	r1, #6
   249dc:	3008      	adds	r0, #8
   249de:	f001 fd97 	bl	26510 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   249e2:	883b      	ldrh	r3, [r7, #0]
   249e4:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
   249e6:	8046      	strh	r6, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
   249e8:	8085      	strh	r5, [r0, #4]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   249ea:	4621      	mov	r1, r4
   249ec:	f242 0022 	movw	r0, #8226	; 0x2022
}
   249f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
   249f4:	f7e4 bd1c 	b.w	9430 <bt_hci_cmd_send>
}
   249f8:	f06f 0036 	mvn.w	r0, #54	; 0x36
   249fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000249fe <bt_le_set_phy>:
{
   249fe:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24a02:	4680      	mov	r8, r0
   24a04:	460f      	mov	r7, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24a06:	f242 0032 	movw	r0, #8242	; 0x2032
   24a0a:	2107      	movs	r1, #7
{
   24a0c:	f89d 9020 	ldrb.w	r9, [sp, #32]
   24a10:	4616      	mov	r6, r2
   24a12:	461d      	mov	r5, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
   24a14:	f7e4 fcd2 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
   24a18:	4604      	mov	r4, r0
   24a1a:	b190      	cbz	r0, 24a42 <bt_le_set_phy+0x44>
   24a1c:	2107      	movs	r1, #7
   24a1e:	3008      	adds	r0, #8
   24a20:	f001 fd76 	bl	26510 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
   24a24:	f8b8 3000 	ldrh.w	r3, [r8]
	cp->all_phys = all_phys;
   24a28:	7087      	strb	r7, [r0, #2]
	cp->tx_phys = pref_tx_phy;
   24a2a:	70c6      	strb	r6, [r0, #3]
	cp->rx_phys = pref_rx_phy;
   24a2c:	7105      	strb	r5, [r0, #4]
	cp->handle = sys_cpu_to_le16(conn->handle);
   24a2e:	8003      	strh	r3, [r0, #0]
	cp->phy_opts = phy_opts;
   24a30:	f8a0 9005 	strh.w	r9, [r0, #5]
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24a34:	4621      	mov	r1, r4
   24a36:	f242 0032 	movw	r0, #8242	; 0x2032
}
   24a3a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	return bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
   24a3e:	f7e4 bcf7 	b.w	9430 <bt_hci_cmd_send>
}
   24a42:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24a46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00024a4a <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
   24a4a:	8803      	ldrh	r3, [r0, #0]
   24a4c:	8842      	ldrh	r2, [r0, #2]
   24a4e:	4293      	cmp	r3, r2
{
   24a50:	b510      	push	{r4, lr}
	if (param->interval_min > param->interval_max ||
   24a52:	d819      	bhi.n	24a88 <bt_le_conn_params_valid+0x3e>
   24a54:	2b05      	cmp	r3, #5
   24a56:	d917      	bls.n	24a88 <bt_le_conn_params_valid+0x3e>
	    param->interval_min < 6 || param->interval_max > 3200) {
   24a58:	f5b2 6f48 	cmp.w	r2, #3200	; 0xc80
   24a5c:	d814      	bhi.n	24a88 <bt_le_conn_params_valid+0x3e>
	if (param->latency > 499) {
   24a5e:	8883      	ldrh	r3, [r0, #4]
   24a60:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
   24a64:	d210      	bcs.n	24a88 <bt_le_conn_params_valid+0x3e>
	if (param->timeout < 10 || param->timeout > 3200 ||
   24a66:	88c0      	ldrh	r0, [r0, #6]
   24a68:	f1a0 010a 	sub.w	r1, r0, #10
   24a6c:	b289      	uxth	r1, r1
   24a6e:	f640 4476 	movw	r4, #3190	; 0xc76
   24a72:	42a1      	cmp	r1, r4
   24a74:	d808      	bhi.n	24a88 <bt_le_conn_params_valid+0x3e>
	     ((1U + param->latency) * param->interval_max))) {
   24a76:	3301      	adds	r3, #1
   24a78:	b29b      	uxth	r3, r3
   24a7a:	4353      	muls	r3, r2
	if (param->timeout < 10 || param->timeout > 3200 ||
   24a7c:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
   24a80:	bf34      	ite	cc
   24a82:	2001      	movcc	r0, #1
   24a84:	2000      	movcs	r0, #0
}
   24a86:	bd10      	pop	{r4, pc}
		return false;
   24a88:	2000      	movs	r0, #0
   24a8a:	e7fc      	b.n	24a86 <bt_le_conn_params_valid+0x3c>

00024a8c <pending_id_update>:
	if (keys->state & BT_KEYS_ID_PENDING_ADD) {
   24a8c:	7a03      	ldrb	r3, [r0, #8]
   24a8e:	07d9      	lsls	r1, r3, #31
   24a90:	d504      	bpl.n	24a9c <pending_id_update+0x10>
		keys->state &= ~BT_KEYS_ID_PENDING_ADD;
   24a92:	f023 0301 	bic.w	r3, r3, #1
   24a96:	7203      	strb	r3, [r0, #8]
		bt_id_add(keys);
   24a98:	f7e5 bab2 	b.w	a000 <bt_id_add>
	if (keys->state & BT_KEYS_ID_PENDING_DEL) {
   24a9c:	0799      	lsls	r1, r3, #30
   24a9e:	d504      	bpl.n	24aaa <pending_id_update+0x1e>
		keys->state &= ~BT_KEYS_ID_PENDING_DEL;
   24aa0:	f023 0302 	bic.w	r3, r3, #2
   24aa4:	7203      	strb	r3, [r0, #8]
		bt_id_del(keys);
   24aa6:	f7e5 bb7d 	b.w	a1a4 <bt_id_del>
}
   24aaa:	4770      	bx	lr

00024aac <bt_send>:
		return bt_hci_ecc_send(buf);
   24aac:	f7e3 bc8c 	b.w	83c8 <bt_hci_ecc_send>

00024ab0 <bt_addr_le_is_bonded>:
{
   24ab0:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(id, addr);
   24ab2:	f7eb fcc3 	bl	1043c <bt_keys_find_addr>
		return keys && keys->keys;
   24ab6:	b118      	cbz	r0, 24ac0 <bt_addr_le_is_bonded+0x10>
   24ab8:	89c0      	ldrh	r0, [r0, #14]
   24aba:	3800      	subs	r0, #0
   24abc:	bf18      	it	ne
   24abe:	2001      	movne	r0, #1
}
   24ac0:	bd08      	pop	{r3, pc}

00024ac2 <le_enh_conn_complete>:
	enh_conn_complete((void *)buf->data);
   24ac2:	6880      	ldr	r0, [r0, #8]
   24ac4:	f7e6 b980 	b.w	adc8 <enh_conn_complete>

00024ac8 <bt_hci_evt_create>:
#include <stdint.h>
#include <sys/byteorder.h>
#include <drivers/bluetooth/hci_driver.h>

struct net_buf *bt_hci_evt_create(uint8_t evt, uint8_t len)
{
   24ac8:	b570      	push	{r4, r5, r6, lr}
	struct bt_hci_evt_hdr *hdr;
	struct net_buf *buf;

	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24aca:	f04f 32ff 	mov.w	r2, #4294967295
{
   24ace:	460d      	mov	r5, r1
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24ad0:	f04f 33ff 	mov.w	r3, #4294967295
   24ad4:	2100      	movs	r1, #0
{
   24ad6:	4606      	mov	r6, r0
	buf = bt_buf_get_evt(evt, false, K_FOREVER);
   24ad8:	f7e3 ff1a 	bl	8910 <bt_buf_get_evt>
   24adc:	2102      	movs	r1, #2
   24ade:	4604      	mov	r4, r0
   24ae0:	3008      	adds	r0, #8
   24ae2:	f001 fd15 	bl	26510 <net_buf_simple_add>

	hdr = net_buf_add(buf, sizeof(*hdr));
	hdr->evt = evt;
   24ae6:	7006      	strb	r6, [r0, #0]
	hdr->len = len;
   24ae8:	7045      	strb	r5, [r0, #1]

	return buf;
}
   24aea:	4620      	mov	r0, r4
   24aec:	bd70      	pop	{r4, r5, r6, pc}

00024aee <bt_hci_cmd_complete_create>:
struct net_buf *bt_hci_cmd_complete_create(uint16_t op, uint8_t plen)
{
	struct net_buf *buf;
	struct bt_hci_evt_cmd_complete *cc;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24aee:	3103      	adds	r1, #3
{
   24af0:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24af2:	b2c9      	uxtb	r1, r1
{
   24af4:	4605      	mov	r5, r0
	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
   24af6:	200e      	movs	r0, #14
   24af8:	f7ff ffe6 	bl	24ac8 <bt_hci_evt_create>
   24afc:	2103      	movs	r1, #3
   24afe:	4604      	mov	r4, r0
   24b00:	3008      	adds	r0, #8
   24b02:	f001 fd05 	bl	26510 <net_buf_simple_add>

	cc = net_buf_add(buf, sizeof(*cc));
	cc->ncmd = 1U;
   24b06:	2301      	movs	r3, #1
   24b08:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(op);
   24b0a:	f8a0 5001 	strh.w	r5, [r0, #1]

	return buf;
}
   24b0e:	4620      	mov	r0, r4
   24b10:	bd38      	pop	{r3, r4, r5, pc}

00024b12 <bt_hci_cmd_status_create>:

struct net_buf *bt_hci_cmd_status_create(uint16_t op, uint8_t status)
{
   24b12:	b570      	push	{r4, r5, r6, lr}
   24b14:	4605      	mov	r5, r0
   24b16:	460e      	mov	r6, r1
	struct net_buf *buf;
	struct bt_hci_evt_cmd_status *cs;

	buf = bt_hci_evt_create(BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
   24b18:	200f      	movs	r0, #15
   24b1a:	2104      	movs	r1, #4
   24b1c:	f7ff ffd4 	bl	24ac8 <bt_hci_evt_create>
   24b20:	2104      	movs	r1, #4
   24b22:	4604      	mov	r4, r0
   24b24:	3008      	adds	r0, #8
   24b26:	f001 fcf3 	bl	26510 <net_buf_simple_add>

	cs = net_buf_add(buf, sizeof(*cs));
	cs->status = status;
	cs->ncmd = 1U;
   24b2a:	2201      	movs	r2, #1
	cs->status = status;
   24b2c:	7006      	strb	r6, [r0, #0]
	cs->ncmd = 1U;
   24b2e:	7042      	strb	r2, [r0, #1]
	cs->opcode = sys_cpu_to_le16(op);
   24b30:	8045      	strh	r5, [r0, #2]

	return buf;
}
   24b32:	4620      	mov	r0, r4
   24b34:	bd70      	pop	{r4, r5, r6, pc}

00024b36 <atomic_and>:
{
   24b36:	4603      	mov	r3, r0
}
   24b38:	f3bf 8f5b 	dmb	ish
   24b3c:	e853 0f00 	ldrex	r0, [r3]
   24b40:	ea00 0201 	and.w	r2, r0, r1
   24b44:	e843 2c00 	strex	ip, r2, [r3]
   24b48:	f1bc 0f00 	cmp.w	ip, #0
   24b4c:	d1f6      	bne.n	24b3c <atomic_and+0x6>
   24b4e:	f3bf 8f5b 	dmb	ish
   24b52:	4770      	bx	lr

00024b54 <tx_notify>:
{
   24b54:	b570      	push	{r4, r5, r6, lr}
   24b56:	4604      	mov	r4, r0
	__asm__ volatile(
   24b58:	f04f 0220 	mov.w	r2, #32
   24b5c:	f3ef 8311 	mrs	r3, BASEPRI
   24b60:	f382 8811 	msr	BASEPRI, r2
   24b64:	f3bf 8f6f 	isb	sy
	return list->head;
   24b68:	6a20      	ldr	r0, [r4, #32]
		if (sys_slist_is_empty(&conn->tx_complete)) {
   24b6a:	b920      	cbnz	r0, 24b76 <tx_notify+0x22>
	__asm__ volatile(
   24b6c:	f383 8811 	msr	BASEPRI, r3
   24b70:	f3bf 8f6f 	isb	sy
}
   24b74:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24b76:	6a61      	ldr	r1, [r4, #36]	; 0x24
	return node->next;
   24b78:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24b7a:	6222      	str	r2, [r4, #32]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24b7c:	4288      	cmp	r0, r1
	list->tail = node;
   24b7e:	bf08      	it	eq
   24b80:	6262      	streq	r2, [r4, #36]	; 0x24
   24b82:	f383 8811 	msr	BASEPRI, r3
   24b86:	f3bf 8f6f 	isb	sy
		user_data = tx->user_data;
   24b8a:	e9d0 5601 	ldrd	r5, r6, [r0, #4]
		tx_free(tx);
   24b8e:	f7e6 faf5 	bl	b17c <tx_free>
		cb(conn, user_data);
   24b92:	4631      	mov	r1, r6
   24b94:	4620      	mov	r0, r4
   24b96:	47a8      	blx	r5
	while (1) {
   24b98:	e7de      	b.n	24b58 <tx_notify+0x4>

00024b9a <tx_complete_work>:
	tx_notify(conn);
   24b9a:	3828      	subs	r0, #40	; 0x28
   24b9c:	f7ff bfda 	b.w	24b54 <tx_notify>

00024ba0 <bt_conn_new>:
{
   24ba0:	b538      	push	{r3, r4, r5, lr}
   24ba2:	4604      	mov	r4, r0
	for (i = 0; i < size; i++) {
   24ba4:	2300      	movs	r3, #0
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24ba6:	2501      	movs	r5, #1
   24ba8:	428b      	cmp	r3, r1
   24baa:	d102      	bne.n	24bb2 <bt_conn_new+0x12>
		return NULL;
   24bac:	2400      	movs	r4, #0
}
   24bae:	4620      	mov	r0, r4
   24bb0:	bd38      	pop	{r3, r4, r5, pc}
   24bb2:	f104 02b8 	add.w	r2, r4, #184	; 0xb8
   24bb6:	f3bf 8f5b 	dmb	ish
   24bba:	e852 0f00 	ldrex	r0, [r2]
   24bbe:	2800      	cmp	r0, #0
   24bc0:	d104      	bne.n	24bcc <bt_conn_new+0x2c>
   24bc2:	e842 5c00 	strex	ip, r5, [r2]
   24bc6:	f1bc 0f00 	cmp.w	ip, #0
   24bca:	d1f6      	bne.n	24bba <bt_conn_new+0x1a>
   24bcc:	f3bf 8f5b 	dmb	ish
		if (atomic_cas(&conns[i].ref, 0, 1)) {
   24bd0:	f104 00c0 	add.w	r0, r4, #192	; 0xc0
   24bd4:	d002      	beq.n	24bdc <bt_conn_new+0x3c>
	for (i = 0; i < size; i++) {
   24bd6:	3301      	adds	r3, #1
   24bd8:	4604      	mov	r4, r0
   24bda:	e7e5      	b.n	24ba8 <bt_conn_new+0x8>
	if (!conn) {
   24bdc:	2c00      	cmp	r4, #0
   24bde:	d0e6      	beq.n	24bae <bt_conn_new+0xe>
	(void)memset(conn, 0, offsetof(struct bt_conn, ref));
   24be0:	22b8      	movs	r2, #184	; 0xb8
   24be2:	2100      	movs	r1, #0
   24be4:	4620      	mov	r0, r4
   24be6:	f7ff fc6a 	bl	244be <memset>
	return conn;
   24bea:	e7e0      	b.n	24bae <bt_conn_new+0xe>

00024bec <bt_conn_set_security>:
{
   24bec:	b538      	push	{r3, r4, r5, lr}
	if (conn->state != BT_CONN_CONNECTED) {
   24bee:	7b43      	ldrb	r3, [r0, #13]
   24bf0:	2b07      	cmp	r3, #7
{
   24bf2:	4604      	mov	r4, r0
   24bf4:	460d      	mov	r5, r1
	if (conn->state != BT_CONN_CONNECTED) {
   24bf6:	d124      	bne.n	24c42 <bt_conn_set_security+0x56>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
   24bf8:	7a43      	ldrb	r3, [r0, #9]
   24bfa:	428b      	cmp	r3, r1
   24bfc:	d224      	bcs.n	24c48 <bt_conn_set_security+0x5c>
   24bfe:	7a83      	ldrb	r3, [r0, #10]
   24c00:	428b      	cmp	r3, r1
   24c02:	d221      	bcs.n	24c48 <bt_conn_set_security+0x5c>
	if (val) {
   24c04:	060b      	lsls	r3, r1, #24
	atomic_set_bit_to(conn->flags, BT_CONN_FORCE_PAIR,
   24c06:	f100 0004 	add.w	r0, r0, #4
   24c0a:	d515      	bpl.n	24c38 <bt_conn_set_security+0x4c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   24c0c:	f3bf 8f5b 	dmb	ish
   24c10:	e850 3f00 	ldrex	r3, [r0]
   24c14:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   24c18:	e840 3200 	strex	r2, r3, [r0]
   24c1c:	2a00      	cmp	r2, #0
   24c1e:	d1f7      	bne.n	24c10 <bt_conn_set_security+0x24>
   24c20:	f3bf 8f5b 	dmb	ish
	conn->required_sec_level = sec & ~BT_SECURITY_FORCE_PAIR;
   24c24:	f005 057f 	and.w	r5, r5, #127	; 0x7f
   24c28:	72a5      	strb	r5, [r4, #10]
		return bt_smp_start_security(conn);
   24c2a:	4620      	mov	r0, r4
   24c2c:	f7ea fd98 	bl	f760 <bt_smp_start_security>
	if (err) {
   24c30:	b108      	cbz	r0, 24c36 <bt_conn_set_security+0x4a>
		conn->required_sec_level = conn->sec_level;
   24c32:	7a63      	ldrb	r3, [r4, #9]
   24c34:	72a3      	strb	r3, [r4, #10]
}
   24c36:	bd38      	pop	{r3, r4, r5, pc}
		(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   24c38:	f46f 6100 	mvn.w	r1, #2048	; 0x800
   24c3c:	f7ff ff7b 	bl	24b36 <atomic_and>
   24c40:	e7f0      	b.n	24c24 <bt_conn_set_security+0x38>
		return -ENOTCONN;
   24c42:	f06f 0038 	mvn.w	r0, #56	; 0x38
   24c46:	e7f6      	b.n	24c36 <bt_conn_set_security+0x4a>
		return 0;
   24c48:	2000      	movs	r0, #0
   24c4a:	e7f4      	b.n	24c36 <bt_conn_set_security+0x4a>

00024c4c <bt_conn_get_security>:
}
   24c4c:	7a40      	ldrb	r0, [r0, #9]
   24c4e:	4770      	bx	lr

00024c50 <bt_conn_reset_rx_state>:
{
   24c50:	b510      	push	{r4, lr}
   24c52:	4604      	mov	r4, r0
	if (!conn->rx) {
   24c54:	6900      	ldr	r0, [r0, #16]
   24c56:	b118      	cbz	r0, 24c60 <bt_conn_reset_rx_state+0x10>
	net_buf_unref(conn->rx);
   24c58:	f7f8 fd28 	bl	1d6ac <net_buf_unref>
	conn->rx = NULL;
   24c5c:	2300      	movs	r3, #0
   24c5e:	6123      	str	r3, [r4, #16]
}
   24c60:	bd10      	pop	{r4, pc}

00024c62 <bt_conn_is_peer_addr_le>:
{
   24c62:	b538      	push	{r3, r4, r5, lr}
	if (id != conn->id) {
   24c64:	7a03      	ldrb	r3, [r0, #8]
   24c66:	428b      	cmp	r3, r1
{
   24c68:	4604      	mov	r4, r0
   24c6a:	4615      	mov	r5, r2
	if (id != conn->id) {
   24c6c:	d115      	bne.n	24c9a <bt_conn_is_peer_addr_le+0x38>
	return memcmp(a, b, sizeof(*a));
   24c6e:	f100 0188 	add.w	r1, r0, #136	; 0x88
   24c72:	2207      	movs	r2, #7
   24c74:	4628      	mov	r0, r5
   24c76:	f7ff fbe6 	bl	24446 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
   24c7a:	b180      	cbz	r0, 24c9e <bt_conn_is_peer_addr_le+0x3c>
	if (conn->role == BT_HCI_ROLE_MASTER) {
   24c7c:	78e3      	ldrb	r3, [r4, #3]
   24c7e:	2207      	movs	r2, #7
   24c80:	b943      	cbnz	r3, 24c94 <bt_conn_is_peer_addr_le+0x32>
   24c82:	f104 0196 	add.w	r1, r4, #150	; 0x96
   24c86:	4628      	mov	r0, r5
   24c88:	f7ff fbdd 	bl	24446 <memcmp>
	return bt_addr_le_cmp(peer, &conn->le.init_addr) == 0;
   24c8c:	fab0 f080 	clz	r0, r0
   24c90:	0940      	lsrs	r0, r0, #5
}
   24c92:	bd38      	pop	{r3, r4, r5, pc}
   24c94:	f104 018f 	add.w	r1, r4, #143	; 0x8f
   24c98:	e7f5      	b.n	24c86 <bt_conn_is_peer_addr_le+0x24>
		return false;
   24c9a:	2000      	movs	r0, #0
   24c9c:	e7f9      	b.n	24c92 <bt_conn_is_peer_addr_le+0x30>
		return true;
   24c9e:	2001      	movs	r0, #1
   24ca0:	e7f7      	b.n	24c92 <bt_conn_is_peer_addr_le+0x30>

00024ca2 <bt_conn_ref>:
{
   24ca2:	b510      	push	{r4, lr}
		old = atomic_get(&conn->ref);
   24ca4:	f100 02b8 	add.w	r2, r0, #184	; 0xb8
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24ca8:	f3bf 8f5b 	dmb	ish
   24cac:	6813      	ldr	r3, [r2, #0]
   24cae:	f3bf 8f5b 	dmb	ish
		if (!old) {
   24cb2:	b17b      	cbz	r3, 24cd4 <bt_conn_ref+0x32>
	return __atomic_compare_exchange_n(target, &old_value, new_value,
   24cb4:	f3bf 8f5b 	dmb	ish
	} while (!atomic_cas(&conn->ref, old, old + 1));
   24cb8:	1c59      	adds	r1, r3, #1
   24cba:	e852 4f00 	ldrex	r4, [r2]
   24cbe:	429c      	cmp	r4, r3
   24cc0:	d104      	bne.n	24ccc <bt_conn_ref+0x2a>
   24cc2:	e842 1c00 	strex	ip, r1, [r2]
   24cc6:	f1bc 0f00 	cmp.w	ip, #0
   24cca:	d1f6      	bne.n	24cba <bt_conn_ref+0x18>
   24ccc:	f3bf 8f5b 	dmb	ish
   24cd0:	d1ea      	bne.n	24ca8 <bt_conn_ref+0x6>
}
   24cd2:	bd10      	pop	{r4, pc}
			return NULL;
   24cd4:	4618      	mov	r0, r3
   24cd6:	e7fc      	b.n	24cd2 <bt_conn_ref+0x30>

00024cd8 <bt_conn_unref>:
	atomic_val_t old = atomic_dec(&conn->ref);
   24cd8:	f100 03b8 	add.w	r3, r0, #184	; 0xb8
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   24cdc:	f3bf 8f5b 	dmb	ish
   24ce0:	e853 2f00 	ldrex	r2, [r3]
   24ce4:	3a01      	subs	r2, #1
   24ce6:	e843 2100 	strex	r1, r2, [r3]
   24cea:	2900      	cmp	r1, #0
   24cec:	d1f8      	bne.n	24ce0 <bt_conn_unref+0x8>
   24cee:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   24cf2:	f3bf 8f5b 	dmb	ish
   24cf6:	f8d0 30b8 	ldr.w	r3, [r0, #184]	; 0xb8
   24cfa:	f3bf 8f5b 	dmb	ish
	if (IS_ENABLED(CONFIG_BT_PERIPHERAL) &&
   24cfe:	b90b      	cbnz	r3, 24d04 <bt_conn_unref+0x2c>
		bt_le_adv_resume();
   24d00:	f7e6 b81c 	b.w	ad3c <bt_le_adv_resume>
}
   24d04:	4770      	bx	lr

00024d06 <conn_lookup_handle>:
{
   24d06:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24d0a:	4607      	mov	r7, r0
   24d0c:	460e      	mov	r6, r1
   24d0e:	4690      	mov	r8, r2
	for (i = 0; i < size; i++) {
   24d10:	2400      	movs	r4, #0
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24d12:	f04f 09c0 	mov.w	r9, #192	; 0xc0
	for (i = 0; i < size; i++) {
   24d16:	42b4      	cmp	r4, r6
   24d18:	d103      	bne.n	24d22 <conn_lookup_handle+0x1c>
	return NULL;
   24d1a:	2300      	movs	r3, #0
}
   24d1c:	4618      	mov	r0, r3
   24d1e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = bt_conn_ref(&conns[i]);
   24d22:	fb09 7004 	mla	r0, r9, r4, r7
   24d26:	f7ff ffbc 	bl	24ca2 <bt_conn_ref>
   24d2a:	4603      	mov	r3, r0
		if (!conn) {
   24d2c:	b158      	cbz	r0, 24d46 <conn_lookup_handle+0x40>
		if (!bt_conn_is_handle_valid(conn)) {
   24d2e:	7b45      	ldrb	r5, [r0, #13]
/* Look up an existing connection */
struct bt_conn *bt_conn_lookup_handle(uint16_t handle);

static inline bool bt_conn_is_handle_valid(struct bt_conn *conn)
{
	switch (conn->state) {
   24d30:	2d01      	cmp	r5, #1
   24d32:	d002      	beq.n	24d3a <conn_lookup_handle+0x34>
   24d34:	3d07      	subs	r5, #7
   24d36:	2d01      	cmp	r5, #1
   24d38:	d803      	bhi.n	24d42 <conn_lookup_handle+0x3c>
		if (conn->handle != handle) {
   24d3a:	881a      	ldrh	r2, [r3, #0]
   24d3c:	4542      	cmp	r2, r8
   24d3e:	d0ed      	beq.n	24d1c <conn_lookup_handle+0x16>
			bt_conn_unref(conn);
   24d40:	4618      	mov	r0, r3
   24d42:	f7ff ffc9 	bl	24cd8 <bt_conn_unref>
	for (i = 0; i < size; i++) {
   24d46:	3401      	adds	r4, #1
   24d48:	e7e5      	b.n	24d16 <conn_lookup_handle+0x10>

00024d4a <bt_conn_get_dst>:
}
   24d4a:	3088      	adds	r0, #136	; 0x88
   24d4c:	4770      	bx	lr

00024d4e <bt_conn_disconnect>:
{
   24d4e:	b538      	push	{r3, r4, r5, lr}
   24d50:	7b43      	ldrb	r3, [r0, #13]
   24d52:	3b02      	subs	r3, #2
   24d54:	4605      	mov	r5, r0
   24d56:	2b06      	cmp	r3, #6
   24d58:	d805      	bhi.n	24d66 <bt_conn_disconnect+0x18>
   24d5a:	e8df f003 	tbb	[pc, r3]
   24d5e:	0408      	.short	0x0408
   24d60:	0e0c0404 	.word	0x0e0c0404
   24d64:	0c          	.byte	0x0c
   24d65:	00          	.byte	0x00
	switch (conn->state) {
   24d66:	f06f 0438 	mvn.w	r4, #56	; 0x38
}
   24d6a:	4620      	mov	r0, r4
   24d6c:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
   24d6e:	7301      	strb	r1, [r0, #12]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
   24d70:	2100      	movs	r1, #0
   24d72:	f7e6 fcd7 	bl	b724 <bt_conn_set_state>
		return 0;
   24d76:	2400      	movs	r4, #0
   24d78:	e7f7      	b.n	24d6a <bt_conn_disconnect+0x1c>
	err = bt_hci_disconnect(conn->handle, reason);
   24d7a:	8800      	ldrh	r0, [r0, #0]
   24d7c:	f7ff fe07 	bl	2498e <bt_hci_disconnect>
	if (err) {
   24d80:	4604      	mov	r4, r0
   24d82:	2800      	cmp	r0, #0
   24d84:	d1f1      	bne.n	24d6a <bt_conn_disconnect+0x1c>
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
   24d86:	2108      	movs	r1, #8
   24d88:	4628      	mov	r0, r5
   24d8a:	f7e6 fccb 	bl	b724 <bt_conn_set_state>
	return 0;
   24d8e:	e7ec      	b.n	24d6a <bt_conn_disconnect+0x1c>

00024d90 <bt_conn_le_conn_update>:
{
   24d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   24d92:	4607      	mov	r7, r0
   24d94:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
   24d96:	f242 0013 	movw	r0, #8211	; 0x2013
   24d9a:	210e      	movs	r1, #14
   24d9c:	f7e4 fb0e 	bl	93bc <bt_hci_cmd_create>
	if (!buf) {
   24da0:	4606      	mov	r6, r0
   24da2:	b1d0      	cbz	r0, 24dda <bt_conn_le_conn_update+0x4a>
   24da4:	210e      	movs	r1, #14
   24da6:	3008      	adds	r0, #8
   24da8:	f001 fbb2 	bl	26510 <net_buf_simple_add>
	(void)memset(conn_update, 0, sizeof(*conn_update));
   24dac:	220e      	movs	r2, #14
   24dae:	4604      	mov	r4, r0
   24db0:	2100      	movs	r1, #0
   24db2:	f7ff fb84 	bl	244be <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
   24db6:	883b      	ldrh	r3, [r7, #0]
   24db8:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
   24dba:	882b      	ldrh	r3, [r5, #0]
   24dbc:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
   24dbe:	886b      	ldrh	r3, [r5, #2]
   24dc0:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
   24dc2:	88ab      	ldrh	r3, [r5, #4]
   24dc4:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
   24dc6:	88eb      	ldrh	r3, [r5, #6]
   24dc8:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24dca:	4631      	mov	r1, r6
   24dcc:	2200      	movs	r2, #0
}
   24dce:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CONN_UPDATE, buf, NULL);
   24dd2:	f242 0013 	movw	r0, #8211	; 0x2013
   24dd6:	f7e4 bc51 	b.w	967c <bt_hci_cmd_send_sync>
}
   24dda:	f06f 0036 	mvn.w	r0, #54	; 0x36
   24dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00024de0 <l2cap_connected>:
}
   24de0:	4770      	bx	lr

00024de2 <l2cap_disconnected>:
   24de2:	4770      	bx	lr

00024de4 <bt_l2cap_chan_remove>:
	return list->head;
   24de4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24de6:	b530      	push	{r4, r5, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24de8:	b17b      	cbz	r3, 24e0a <bt_l2cap_chan_remove+0x26>
   24dea:	3b08      	subs	r3, #8
   24dec:	2200      	movs	r2, #0
   24dee:	b163      	cbz	r3, 24e0a <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
   24df0:	428b      	cmp	r3, r1
			sys_slist_remove(&conn->channels, prev, &chan->node);
   24df2:	f103 0408 	add.w	r4, r3, #8
		if (chan == ch) {
   24df6:	d10e      	bne.n	24e16 <bt_l2cap_chan_remove+0x32>
	return node->next;
   24df8:	6899      	ldr	r1, [r3, #8]
	return list->tail;
   24dfa:	6d05      	ldr	r5, [r0, #80]	; 0x50
Z_GENLIST_REMOVE(slist, snode)
   24dfc:	b932      	cbnz	r2, 24e0c <bt_l2cap_chan_remove+0x28>
   24dfe:	42ac      	cmp	r4, r5
	list->head = node;
   24e00:	64c1      	str	r1, [r0, #76]	; 0x4c
Z_GENLIST_REMOVE(slist, snode)
   24e02:	d100      	bne.n	24e06 <bt_l2cap_chan_remove+0x22>
	list->tail = node;
   24e04:	6501      	str	r1, [r0, #80]	; 0x50
	parent->next = child;
   24e06:	2200      	movs	r2, #0
   24e08:	609a      	str	r2, [r3, #8]
}
   24e0a:	bd30      	pop	{r4, r5, pc}
Z_GENLIST_REMOVE(slist, snode)
   24e0c:	42ac      	cmp	r4, r5
	parent->next = child;
   24e0e:	6011      	str	r1, [r2, #0]
	list->tail = node;
   24e10:	bf08      	it	eq
   24e12:	6502      	streq	r2, [r0, #80]	; 0x50
}
   24e14:	e7f7      	b.n	24e06 <bt_l2cap_chan_remove+0x22>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24e16:	2c00      	cmp	r4, #0
   24e18:	d0f7      	beq.n	24e0a <bt_l2cap_chan_remove+0x26>
	return node->next;
   24e1a:	689b      	ldr	r3, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24e1c:	2b00      	cmp	r3, #0
   24e1e:	d0f4      	beq.n	24e0a <bt_l2cap_chan_remove+0x26>
   24e20:	3b08      	subs	r3, #8
   24e22:	4622      	mov	r2, r4
   24e24:	e7e3      	b.n	24dee <bt_l2cap_chan_remove+0xa>

00024e26 <bt_l2cap_chan_del>:
{
   24e26:	b570      	push	{r4, r5, r6, lr}
	if (!chan->conn) {
   24e28:	e9d0 3500 	ldrd	r3, r5, [r0]
{
   24e2c:	4604      	mov	r4, r0
	if (!chan->conn) {
   24e2e:	b123      	cbz	r3, 24e3a <bt_l2cap_chan_del+0x14>
	if (ops->disconnected) {
   24e30:	686b      	ldr	r3, [r5, #4]
   24e32:	b103      	cbz	r3, 24e36 <bt_l2cap_chan_del+0x10>
		ops->disconnected(chan);
   24e34:	4798      	blx	r3
	chan->conn = NULL;
   24e36:	2300      	movs	r3, #0
   24e38:	6023      	str	r3, [r4, #0]
	if (chan->destroy) {
   24e3a:	68e3      	ldr	r3, [r4, #12]
   24e3c:	b10b      	cbz	r3, 24e42 <bt_l2cap_chan_del+0x1c>
		chan->destroy(chan);
   24e3e:	4620      	mov	r0, r4
   24e40:	4798      	blx	r3
	if (ops->released) {
   24e42:	69eb      	ldr	r3, [r5, #28]
   24e44:	b11b      	cbz	r3, 24e4e <bt_l2cap_chan_del+0x28>
		ops->released(chan);
   24e46:	4620      	mov	r0, r4
}
   24e48:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		ops->released(chan);
   24e4c:	4718      	bx	r3
}
   24e4e:	bd70      	pop	{r4, r5, r6, pc}

00024e50 <bt_l2cap_disconnected>:
	return list->head;
   24e50:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
{
   24e52:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24e54:	b18b      	cbz	r3, 24e7a <bt_l2cap_disconnected+0x2a>
   24e56:	f1b3 0008 	subs.w	r0, r3, #8
   24e5a:	d00e      	beq.n	24e7a <bt_l2cap_disconnected+0x2a>
	return node->next;
   24e5c:	681c      	ldr	r4, [r3, #0]
   24e5e:	b104      	cbz	r4, 24e62 <bt_l2cap_disconnected+0x12>
   24e60:	3c08      	subs	r4, #8
		bt_l2cap_chan_del(chan);
   24e62:	f7ff ffe0 	bl	24e26 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24e66:	b144      	cbz	r4, 24e7a <bt_l2cap_disconnected+0x2a>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24e68:	f114 0308 	adds.w	r3, r4, #8
   24e6c:	d002      	beq.n	24e74 <bt_l2cap_disconnected+0x24>
	return node->next;
   24e6e:	68a3      	ldr	r3, [r4, #8]
   24e70:	b103      	cbz	r3, 24e74 <bt_l2cap_disconnected+0x24>
   24e72:	3b08      	subs	r3, #8
{
   24e74:	4620      	mov	r0, r4
   24e76:	461c      	mov	r4, r3
   24e78:	e7f3      	b.n	24e62 <bt_l2cap_disconnected+0x12>
}
   24e7a:	bd10      	pop	{r4, pc}

00024e7c <bt_l2cap_security_changed>:
{
   24e7c:	b538      	push	{r3, r4, r5, lr}
	return list->head;
   24e7e:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   24e80:	460d      	mov	r5, r1
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24e82:	b1a3      	cbz	r3, 24eae <bt_l2cap_security_changed+0x32>
   24e84:	f1b3 0008 	subs.w	r0, r3, #8
   24e88:	d011      	beq.n	24eae <bt_l2cap_security_changed+0x32>
	return node->next;
   24e8a:	681c      	ldr	r4, [r3, #0]
   24e8c:	b104      	cbz	r4, 24e90 <bt_l2cap_security_changed+0x14>
   24e8e:	3c08      	subs	r4, #8
		if (chan->ops->encrypt_change) {
   24e90:	6843      	ldr	r3, [r0, #4]
   24e92:	689b      	ldr	r3, [r3, #8]
   24e94:	b10b      	cbz	r3, 24e9a <bt_l2cap_security_changed+0x1e>
			chan->ops->encrypt_change(chan, hci_status);
   24e96:	4629      	mov	r1, r5
   24e98:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
   24e9a:	b144      	cbz	r4, 24eae <bt_l2cap_security_changed+0x32>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24e9c:	f114 0308 	adds.w	r3, r4, #8
   24ea0:	d002      	beq.n	24ea8 <bt_l2cap_security_changed+0x2c>
	return node->next;
   24ea2:	68a3      	ldr	r3, [r4, #8]
   24ea4:	b103      	cbz	r3, 24ea8 <bt_l2cap_security_changed+0x2c>
   24ea6:	3b08      	subs	r3, #8
{
   24ea8:	4620      	mov	r0, r4
   24eaa:	461c      	mov	r4, r3
   24eac:	e7f0      	b.n	24e90 <bt_l2cap_security_changed+0x14>
}
   24eae:	bd38      	pop	{r3, r4, r5, pc}

00024eb0 <bt_l2cap_create_pdu_timeout>:
	return bt_conn_create_pdu_timeout(pool,
   24eb0:	3104      	adds	r1, #4
   24eb2:	f7e6 be0f 	b.w	bad4 <bt_conn_create_pdu_timeout>

00024eb6 <bt_l2cap_send_cb>:
{
   24eb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   24eba:	4614      	mov	r4, r2
   24ebc:	4605      	mov	r5, r0
   24ebe:	460f      	mov	r7, r1
	return net_buf_simple_push(&buf->b, len);
   24ec0:	f102 0008 	add.w	r0, r2, #8
   24ec4:	2104      	movs	r1, #4
   24ec6:	461e      	mov	r6, r3
   24ec8:	f8dd 8018 	ldr.w	r8, [sp, #24]
   24ecc:	f001 fb37 	bl	2653e <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24ed0:	89a2      	ldrh	r2, [r4, #12]
	hdr->cid = sys_cpu_to_le16(cid);
   24ed2:	8047      	strh	r7, [r0, #2]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
   24ed4:	3a04      	subs	r2, #4
   24ed6:	8002      	strh	r2, [r0, #0]
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24ed8:	4643      	mov	r3, r8
   24eda:	4632      	mov	r2, r6
   24edc:	4621      	mov	r1, r4
   24ede:	4628      	mov	r0, r5
}
   24ee0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	return bt_conn_send_cb(conn, buf, cb, user_data);
   24ee4:	f7e6 bb46 	b.w	b574 <bt_conn_send_cb>

00024ee8 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
   24ee8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24eea:	b160      	cbz	r0, 24f06 <bt_l2cap_le_lookup_tx_cid+0x1e>
   24eec:	3808      	subs	r0, #8
   24eee:	b900      	cbnz	r0, 24ef2 <bt_l2cap_le_lookup_tx_cid+0xa>
   24ef0:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
   24ef2:	f8b0 3054 	ldrh.w	r3, [r0, #84]	; 0x54
   24ef6:	428b      	cmp	r3, r1
   24ef8:	d005      	beq.n	24f06 <bt_l2cap_le_lookup_tx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24efa:	f110 0308 	adds.w	r3, r0, #8
   24efe:	d001      	beq.n	24f04 <bt_l2cap_le_lookup_tx_cid+0x1c>
	return node->next;
   24f00:	6880      	ldr	r0, [r0, #8]
   24f02:	e7f2      	b.n	24eea <bt_l2cap_le_lookup_tx_cid+0x2>
	return NULL;
   24f04:	4618      	mov	r0, r3
}
   24f06:	4770      	bx	lr

00024f08 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
   24f08:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
   24f0a:	b160      	cbz	r0, 24f26 <bt_l2cap_le_lookup_rx_cid+0x1e>
   24f0c:	3808      	subs	r0, #8
   24f0e:	b900      	cbnz	r0, 24f12 <bt_l2cap_le_lookup_rx_cid+0xa>
   24f10:	4770      	bx	lr
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
   24f12:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
   24f16:	428b      	cmp	r3, r1
   24f18:	d005      	beq.n	24f26 <bt_l2cap_le_lookup_rx_cid+0x1e>
Z_GENLIST_PEEK_NEXT(slist, snode)
   24f1a:	f110 0308 	adds.w	r3, r0, #8
   24f1e:	d001      	beq.n	24f24 <bt_l2cap_le_lookup_rx_cid+0x1c>
	return node->next;
   24f20:	6880      	ldr	r0, [r0, #8]
   24f22:	e7f2      	b.n	24f0a <bt_l2cap_le_lookup_rx_cid+0x2>
	return NULL;
   24f24:	4618      	mov	r0, r3
}
   24f26:	4770      	bx	lr

00024f28 <bt_l2cap_init>:
void bt_l2cap_init(void)
{
	if (IS_ENABLED(CONFIG_BT_BREDR)) {
		bt_l2cap_br_init();
	}
}
   24f28:	4770      	bx	lr

00024f2a <sys_slist_get>:
Z_GENLIST_GET(slist, snode)
   24f2a:	4603      	mov	r3, r0
	return list->head;
   24f2c:	6800      	ldr	r0, [r0, #0]
Z_GENLIST_GET(slist, snode)
   24f2e:	b128      	cbz	r0, 24f3c <sys_slist_get+0x12>
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24f30:	6859      	ldr	r1, [r3, #4]
	return node->next;
   24f32:	6802      	ldr	r2, [r0, #0]
	list->head = node;
   24f34:	601a      	str	r2, [r3, #0]
Z_GENLIST_GET_NOT_EMPTY(slist, snode)
   24f36:	4288      	cmp	r0, r1
	list->tail = node;
   24f38:	bf08      	it	eq
   24f3a:	605a      	streq	r2, [r3, #4]
Z_GENLIST_GET(slist, snode)
   24f3c:	4770      	bx	lr

00024f3e <net_buf_frags_len>:
 * @param buf Buffer to start off with.
 *
 * @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
   24f3e:	4603      	mov	r3, r0
	size_t bytes = 0;
   24f40:	2000      	movs	r0, #0

	while (buf) {
   24f42:	b903      	cbnz	r3, 24f46 <net_buf_frags_len+0x8>
		bytes += buf->len;
		buf = buf->frags;
	}

	return bytes;
}
   24f44:	4770      	bx	lr
		bytes += buf->len;
   24f46:	899a      	ldrh	r2, [r3, #12]
		buf = buf->frags;
   24f48:	681b      	ldr	r3, [r3, #0]
		bytes += buf->len;
   24f4a:	4410      	add	r0, r2
		buf = buf->frags;
   24f4c:	e7f9      	b.n	24f42 <net_buf_frags_len+0x4>

00024f4e <att_sent>:
	if (chan->ops->sent) {
   24f4e:	684b      	ldr	r3, [r1, #4]
   24f50:	695b      	ldr	r3, [r3, #20]
{
   24f52:	4608      	mov	r0, r1
	if (chan->ops->sent) {
   24f54:	b103      	cbz	r3, 24f58 <att_sent+0xa>
		chan->ops->sent(chan);
   24f56:	4718      	bx	r3
}
   24f58:	4770      	bx	lr

00024f5a <attr_read_type_cb>:
{
   24f5a:	b510      	push	{r4, lr}
	if (!data->rsp->len) {
   24f5c:	68d4      	ldr	r4, [r2, #12]
   24f5e:	7823      	ldrb	r3, [r4, #0]
   24f60:	3102      	adds	r1, #2
   24f62:	b913      	cbnz	r3, 24f6a <attr_read_type_cb+0x10>
		data->rsp->len = read + sizeof(*data->item);
   24f64:	7021      	strb	r1, [r4, #0]
	return true;
   24f66:	2001      	movs	r0, #1
   24f68:	e006      	b.n	24f78 <attr_read_type_cb+0x1e>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
   24f6a:	428b      	cmp	r3, r1
   24f6c:	d0fb      	beq.n	24f66 <attr_read_type_cb+0xc>
		frag->len -= sizeof(*data->item);
   24f6e:	8983      	ldrh	r3, [r0, #12]
   24f70:	3b02      	subs	r3, #2
   24f72:	8183      	strh	r3, [r0, #12]
		data->item = NULL;
   24f74:	2000      	movs	r0, #0
   24f76:	6110      	str	r0, [r2, #16]
}
   24f78:	bd10      	pop	{r4, pc}

00024f7a <att_op_get_type>:
	switch (op) {
   24f7a:	281e      	cmp	r0, #30
   24f7c:	d816      	bhi.n	24fac <att_op_get_type+0x32>
   24f7e:	b308      	cbz	r0, 24fc4 <att_op_get_type+0x4a>
   24f80:	1e43      	subs	r3, r0, #1
   24f82:	2b1d      	cmp	r3, #29
   24f84:	d81e      	bhi.n	24fc4 <att_op_get_type+0x4a>
   24f86:	e8df f003 	tbb	[pc, r3]
   24f8a:	2317      	.short	0x2317
   24f8c:	23172317 	.word	0x23172317
   24f90:	23172317 	.word	0x23172317
   24f94:	23172317 	.word	0x23172317
   24f98:	23172317 	.word	0x23172317
   24f9c:	231d1d17 	.word	0x231d1d17
   24fa0:	1d172317 	.word	0x1d172317
   24fa4:	0f1b1d19 	.word	0x0f1b1d19
   24fa8:	2004      	movs	r0, #4
   24faa:	4770      	bx	lr
   24fac:	f000 037f 	and.w	r3, r0, #127	; 0x7f
   24fb0:	2b52      	cmp	r3, #82	; 0x52
   24fb2:	d107      	bne.n	24fc4 <att_op_get_type+0x4a>
		return ATT_COMMAND;
   24fb4:	2000      	movs	r0, #0
}
   24fb6:	4770      	bx	lr
		return ATT_RESPONSE;
   24fb8:	2002      	movs	r0, #2
   24fba:	4770      	bx	lr
		return ATT_NOTIFICATION;
   24fbc:	2003      	movs	r0, #3
   24fbe:	4770      	bx	lr
		return ATT_INDICATION;
   24fc0:	2005      	movs	r0, #5
   24fc2:	4770      	bx	lr
		return ATT_COMMAND;
   24fc4:	f010 0f40 	tst.w	r0, #64	; 0x40
   24fc8:	bf0c      	ite	eq
   24fca:	2006      	moveq	r0, #6
   24fcc:	2000      	movne	r0, #0
   24fce:	4770      	bx	lr
		return ATT_REQUEST;
   24fd0:	2001      	movs	r0, #1
   24fd2:	4770      	bx	lr

00024fd4 <bt_gatt_foreach_attr>:
{
   24fd4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   24fd6:	e9cd 2301 	strd	r2, r3, [sp, #4]
   24fda:	2300      	movs	r3, #0
   24fdc:	9300      	str	r3, [sp, #0]
   24fde:	461a      	mov	r2, r3
   24fe0:	f7e8 fe82 	bl	dce8 <bt_gatt_foreach_attr_type>
}
   24fe4:	b005      	add	sp, #20
   24fe6:	f85d fb04 	ldr.w	pc, [sp], #4

00024fea <find_info_cb>:
{
   24fea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (!data->rsp) {
   24fec:	6893      	ldr	r3, [r2, #8]
	struct bt_att_chan *chan = data->chan;
   24fee:	6817      	ldr	r7, [r2, #0]
{
   24ff0:	4605      	mov	r5, r0
   24ff2:	460e      	mov	r6, r1
   24ff4:	4614      	mov	r4, r2
	if (!data->rsp) {
   24ff6:	b963      	cbnz	r3, 25012 <find_info_cb+0x28>
	return net_buf_simple_add(&buf->b, len);
   24ff8:	6850      	ldr	r0, [r2, #4]
   24ffa:	2101      	movs	r1, #1
   24ffc:	3008      	adds	r0, #8
   24ffe:	f001 fa87 	bl	26510 <net_buf_simple_add>
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25002:	682b      	ldr	r3, [r5, #0]
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
   25004:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
   25006:	781b      	ldrb	r3, [r3, #0]
   25008:	2b00      	cmp	r3, #0
   2500a:	bf0c      	ite	eq
   2500c:	2301      	moveq	r3, #1
   2500e:	2302      	movne	r3, #2
   25010:	7003      	strb	r3, [r0, #0]
	switch (data->rsp->format) {
   25012:	68a3      	ldr	r3, [r4, #8]
   25014:	781b      	ldrb	r3, [r3, #0]
   25016:	2b01      	cmp	r3, #1
   25018:	d003      	beq.n	25022 <find_info_cb+0x38>
   2501a:	2b02      	cmp	r3, #2
   2501c:	d019      	beq.n	25052 <find_info_cb+0x68>
			return BT_GATT_ITER_STOP;
   2501e:	2000      	movs	r0, #0
   25020:	e016      	b.n	25050 <find_info_cb+0x66>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
   25022:	682b      	ldr	r3, [r5, #0]
   25024:	781b      	ldrb	r3, [r3, #0]
   25026:	2b00      	cmp	r3, #0
   25028:	d1f9      	bne.n	2501e <find_info_cb+0x34>
   2502a:	6860      	ldr	r0, [r4, #4]
   2502c:	2104      	movs	r1, #4
   2502e:	3008      	adds	r0, #8
   25030:	f001 fa6e 	bl	26510 <net_buf_simple_add>
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25034:	682b      	ldr	r3, [r5, #0]
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
   25036:	60e0      	str	r0, [r4, #12]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
   25038:	885b      	ldrh	r3, [r3, #2]
   2503a:	8043      	strh	r3, [r0, #2]
		if (chan->chan.tx.mtu - data->buf->len >
   2503c:	6863      	ldr	r3, [r4, #4]
		data->info16->handle = sys_cpu_to_le16(handle);
   2503e:	8006      	strh	r6, [r0, #0]
		if (chan->chan.tx.mtu - data->buf->len >
   25040:	899b      	ldrh	r3, [r3, #12]
   25042:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   25046:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   25048:	2804      	cmp	r0, #4
   2504a:	bf94      	ite	ls
   2504c:	2000      	movls	r0, #0
   2504e:	2001      	movhi	r0, #1
}
   25050:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
   25052:	682b      	ldr	r3, [r5, #0]
   25054:	781b      	ldrb	r3, [r3, #0]
   25056:	2b02      	cmp	r3, #2
   25058:	d1e1      	bne.n	2501e <find_info_cb+0x34>
   2505a:	6860      	ldr	r0, [r4, #4]
   2505c:	2112      	movs	r1, #18
   2505e:	3008      	adds	r0, #8
   25060:	f001 fa56 	bl	26510 <net_buf_simple_add>
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25064:	6829      	ldr	r1, [r5, #0]
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
   25066:	60e0      	str	r0, [r4, #12]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   25068:	2210      	movs	r2, #16
		data->info128->handle = sys_cpu_to_le16(handle);
   2506a:	f820 6b02 	strh.w	r6, [r0], #2
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
   2506e:	3101      	adds	r1, #1
   25070:	f7ff f9fa 	bl	24468 <memcpy>
		if (chan->chan.tx.mtu - data->buf->len >
   25074:	6863      	ldr	r3, [r4, #4]
   25076:	f8b7 005e 	ldrh.w	r0, [r7, #94]	; 0x5e
   2507a:	899b      	ldrh	r3, [r3, #12]
   2507c:	1ac0      	subs	r0, r0, r3
			return BT_GATT_ITER_STOP;
   2507e:	2812      	cmp	r0, #18
   25080:	e7e3      	b.n	2504a <find_info_cb+0x60>

00025082 <attr_read_group_cb>:
	if (!data->rsp->len) {
   25082:	68d0      	ldr	r0, [r2, #12]
   25084:	7803      	ldrb	r3, [r0, #0]
   25086:	3104      	adds	r1, #4
   25088:	b913      	cbnz	r3, 25090 <attr_read_group_cb+0xe>
		data->rsp->len = read + sizeof(*data->group);
   2508a:	7001      	strb	r1, [r0, #0]
	return true;
   2508c:	2001      	movs	r0, #1
}
   2508e:	4770      	bx	lr
	} else if (data->rsp->len != read + sizeof(*data->group)) {
   25090:	428b      	cmp	r3, r1
   25092:	d0fb      	beq.n	2508c <attr_read_group_cb+0xa>
		data->buf->len -= sizeof(*data->group);
   25094:	6891      	ldr	r1, [r2, #8]
   25096:	898b      	ldrh	r3, [r1, #12]
		data->group = NULL;
   25098:	2000      	movs	r0, #0
		data->buf->len -= sizeof(*data->group);
   2509a:	3b04      	subs	r3, #4
   2509c:	818b      	strh	r3, [r1, #12]
		data->group = NULL;
   2509e:	6110      	str	r0, [r2, #16]
		return false;
   250a0:	4770      	bx	lr

000250a2 <write_cb>:
{
   250a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   250a4:	4614      	mov	r4, r2
	data->err = bt_gatt_check_perm(data->conn, attr,
   250a6:	4601      	mov	r1, r0
{
   250a8:	4606      	mov	r6, r0
	data->err = bt_gatt_check_perm(data->conn, attr,
   250aa:	222a      	movs	r2, #42	; 0x2a
   250ac:	6820      	ldr	r0, [r4, #0]
   250ae:	f000 fdb7 	bl	25c20 <bt_gatt_check_perm>
   250b2:	4605      	mov	r5, r0
   250b4:	7520      	strb	r0, [r4, #20]
	if (data->err) {
   250b6:	bb00      	cbnz	r0, 250fa <write_cb+0x58>
	if (!data->req) {
   250b8:	7a23      	ldrb	r3, [r4, #8]
	write = attr->write(data->conn, attr, data->value, data->len,
   250ba:	68b7      	ldr	r7, [r6, #8]
   250bc:	68e2      	ldr	r2, [r4, #12]
   250be:	6820      	ldr	r0, [r4, #0]
		flags |= BT_GATT_WRITE_FLAG_CMD;
   250c0:	2b00      	cmp	r3, #0
   250c2:	bf14      	ite	ne
   250c4:	2300      	movne	r3, #0
   250c6:	2302      	moveq	r3, #2
	write = attr->write(data->conn, attr, data->value, data->len,
   250c8:	9301      	str	r3, [sp, #4]
   250ca:	8a63      	ldrh	r3, [r4, #18]
   250cc:	9300      	str	r3, [sp, #0]
   250ce:	4631      	mov	r1, r6
   250d0:	8a23      	ldrh	r3, [r4, #16]
   250d2:	47b8      	blx	r7
	if (write < 0 || write != data->len) {
   250d4:	1e03      	subs	r3, r0, #0
   250d6:	db05      	blt.n	250e4 <write_cb+0x42>
   250d8:	8a22      	ldrh	r2, [r4, #16]
   250da:	4293      	cmp	r3, r2
   250dc:	d10b      	bne.n	250f6 <write_cb+0x54>
	data->err = 0U;
   250de:	7525      	strb	r5, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
   250e0:	2501      	movs	r5, #1
   250e2:	e005      	b.n	250f0 <write_cb+0x4e>
	if (err < 0 && err >= -0xff) {
   250e4:	f113 0fff 	cmn.w	r3, #255	; 0xff
   250e8:	d305      	bcc.n	250f6 <write_cb+0x54>
		return -err;
   250ea:	425b      	negs	r3, r3
   250ec:	b2db      	uxtb	r3, r3
		data->err = err_to_att(write);
   250ee:	7523      	strb	r3, [r4, #20]
}
   250f0:	4628      	mov	r0, r5
   250f2:	b003      	add	sp, #12
   250f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return BT_ATT_ERR_UNLIKELY;
   250f6:	230e      	movs	r3, #14
   250f8:	e7f9      	b.n	250ee <write_cb+0x4c>
		return BT_GATT_ITER_STOP;
   250fa:	2500      	movs	r5, #0
   250fc:	e7f8      	b.n	250f0 <write_cb+0x4e>

000250fe <chan_req_send>:
{
   250fe:	b570      	push	{r4, r5, r6, lr}
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25100:	688e      	ldr	r6, [r1, #8]
{
   25102:	4605      	mov	r5, r0
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25104:	4630      	mov	r0, r6
   25106:	f7ff ff1a 	bl	24f3e <net_buf_frags_len>
   2510a:	f8b5 305e 	ldrh.w	r3, [r5, #94]	; 0x5e
   2510e:	4283      	cmp	r3, r0
{
   25110:	460c      	mov	r4, r1
	if (chan->chan.tx.mtu < net_buf_frags_len(req->buf)) {
   25112:	d30a      	bcc.n	2512a <chan_req_send+0x2c>
	req->buf = NULL;
   25114:	2200      	movs	r2, #0
	chan->req = req;
   25116:	f8c5 10c4 	str.w	r1, [r5, #196]	; 0xc4
	err = chan_send(chan, buf, NULL);
   2511a:	4628      	mov	r0, r5
	req->buf = NULL;
   2511c:	608a      	str	r2, [r1, #8]
	err = chan_send(chan, buf, NULL);
   2511e:	4631      	mov	r1, r6
   25120:	f7e7 f8a2 	bl	c268 <chan_send>
	if (err) {
   25124:	b100      	cbz	r0, 25128 <chan_req_send+0x2a>
		req->buf = buf;
   25126:	60a6      	str	r6, [r4, #8]
}
   25128:	bd70      	pop	{r4, r5, r6, pc}
		return -EMSGSIZE;
   2512a:	f06f 0023 	mvn.w	r0, #35	; 0x23
   2512e:	e7fb      	b.n	25128 <chan_req_send+0x2a>

00025130 <process_queue>:
{
   25130:	b570      	push	{r4, r5, r6, lr}
	buf = net_buf_get(queue, K_NO_WAIT);
   25132:	2200      	movs	r2, #0
{
   25134:	4604      	mov	r4, r0
	buf = net_buf_get(queue, K_NO_WAIT);
   25136:	2300      	movs	r3, #0
   25138:	4608      	mov	r0, r1
{
   2513a:	460e      	mov	r6, r1
	buf = net_buf_get(queue, K_NO_WAIT);
   2513c:	f001 f997 	bl	2646e <net_buf_get>
	if (buf) {
   25140:	4605      	mov	r5, r0
   25142:	b160      	cbz	r0, 2515e <process_queue+0x2e>
		err = chan_send(chan, buf, NULL);
   25144:	4601      	mov	r1, r0
   25146:	2200      	movs	r2, #0
   25148:	4620      	mov	r0, r4
   2514a:	f7e7 f88d 	bl	c268 <chan_send>
		if (err) {
   2514e:	4604      	mov	r4, r0
   25150:	b118      	cbz	r0, 2515a <process_queue+0x2a>
			k_queue_prepend(&queue->_queue, buf);
   25152:	4629      	mov	r1, r5
   25154:	4630      	mov	r0, r6
   25156:	f001 fe81 	bl	26e5c <k_queue_prepend>
}
   2515a:	4620      	mov	r0, r4
   2515c:	bd70      	pop	{r4, r5, r6, pc}
	return -ENOENT;
   2515e:	f06f 0401 	mvn.w	r4, #1
   25162:	e7fa      	b.n	2515a <process_queue+0x2a>

00025164 <sys_slist_find_and_remove.isra.0>:
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25164:	b510      	push	{r4, lr}
	return list->head;
   25166:	6803      	ldr	r3, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25168:	2200      	movs	r2, #0
   2516a:	b153      	cbz	r3, 25182 <sys_slist_find_and_remove.isra.0+0x1e>
   2516c:	428b      	cmp	r3, r1
   2516e:	d10e      	bne.n	2518e <sys_slist_find_and_remove.isra.0+0x2a>
	return node->next;
   25170:	680b      	ldr	r3, [r1, #0]
	return list->tail;
   25172:	6844      	ldr	r4, [r0, #4]
Z_GENLIST_REMOVE(slist, snode)
   25174:	b932      	cbnz	r2, 25184 <sys_slist_find_and_remove.isra.0+0x20>
   25176:	42a1      	cmp	r1, r4
	list->head = node;
   25178:	6003      	str	r3, [r0, #0]
Z_GENLIST_REMOVE(slist, snode)
   2517a:	d100      	bne.n	2517e <sys_slist_find_and_remove.isra.0+0x1a>
	list->tail = node;
   2517c:	6043      	str	r3, [r0, #4]
	parent->next = child;
   2517e:	2300      	movs	r3, #0
   25180:	600b      	str	r3, [r1, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25182:	bd10      	pop	{r4, pc}
Z_GENLIST_REMOVE(slist, snode)
   25184:	42a1      	cmp	r1, r4
	parent->next = child;
   25186:	6013      	str	r3, [r2, #0]
	list->tail = node;
   25188:	bf08      	it	eq
   2518a:	6042      	streq	r2, [r0, #4]
}
   2518c:	e7f7      	b.n	2517e <sys_slist_find_and_remove.isra.0+0x1a>
	return node->next;
   2518e:	461a      	mov	r2, r3
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   25190:	681b      	ldr	r3, [r3, #0]
   25192:	e7ea      	b.n	2516a <sys_slist_find_and_remove.isra.0+0x6>

00025194 <att_chan_read>:
{
   25194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   25198:	4680      	mov	r8, r0
   2519a:	b085      	sub	sp, #20
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   2519c:	4610      	mov	r0, r2
{
   2519e:	4699      	mov	r9, r3
   251a0:	4616      	mov	r6, r2
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   251a2:	f7ff fecc 	bl	24f3e <net_buf_frags_len>
   251a6:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
   251aa:	4283      	cmp	r3, r0
{
   251ac:	468b      	mov	fp, r1
	if (chan->chan.tx.mtu <= net_buf_frags_len(buf)) {
   251ae:	d97a      	bls.n	252a6 <att_chan_read+0x112>
	struct bt_conn *conn = chan->chan.chan.conn;
   251b0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   251b4:	9303      	str	r3, [sp, #12]
	frag = net_buf_frag_last(buf);
   251b6:	4630      	mov	r0, r6
   251b8:	f001 f988 	bl	264cc <net_buf_frag_last>
	size_t len, total = 0;
   251bc:	f04f 0a00 	mov.w	sl, #0
	frag = net_buf_frag_last(buf);
   251c0:	4605      	mov	r5, r0
		len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   251c2:	4630      	mov	r0, r6
   251c4:	f7ff febb 	bl	24f3e <net_buf_frags_len>
   251c8:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
	return net_buf_simple_tailroom(&buf->b);
   251cc:	f105 0708 	add.w	r7, r5, #8
   251d0:	1a24      	subs	r4, r4, r0
   251d2:	4638      	mov	r0, r7
   251d4:	f001 f9d7 	bl	26586 <net_buf_simple_tailroom>
   251d8:	4284      	cmp	r4, r0
   251da:	d211      	bcs.n	25200 <att_chan_read+0x6c>
   251dc:	4630      	mov	r0, r6
   251de:	f7ff feae 	bl	24f3e <net_buf_frags_len>
   251e2:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   251e6:	1a24      	subs	r4, r4, r0
		if (!len) {
   251e8:	bb34      	cbnz	r4, 25238 <att_chan_read+0xa4>
			frag = net_buf_alloc(net_buf_pool_get(buf->pool_id),
   251ea:	79b0      	ldrb	r0, [r6, #6]
   251ec:	f7f8 f9a0 	bl	1d530 <net_buf_pool_get>
	return net_buf_alloc_fixed(pool, timeout);
   251f0:	2200      	movs	r2, #0
   251f2:	2300      	movs	r3, #0
   251f4:	f001 f936 	bl	26464 <net_buf_alloc_fixed>
			if (!frag) {
   251f8:	4605      	mov	r5, r0
   251fa:	b930      	cbnz	r0, 2520a <att_chan_read+0x76>
	return total;
   251fc:	4657      	mov	r7, sl
   251fe:	e02c      	b.n	2525a <att_chan_read+0xc6>
	return net_buf_simple_tailroom(&buf->b);
   25200:	4638      	mov	r0, r7
   25202:	f001 f9c0 	bl	26586 <net_buf_simple_tailroom>
   25206:	4604      	mov	r4, r0
   25208:	e7ee      	b.n	251e8 <att_chan_read+0x54>
			net_buf_frag_add(buf, frag);
   2520a:	4601      	mov	r1, r0
   2520c:	4630      	mov	r0, r6
   2520e:	f001 f96e 	bl	264ee <net_buf_frag_add>
			len = MIN(chan->chan.tx.mtu - net_buf_frags_len(buf),
   25212:	4630      	mov	r0, r6
   25214:	f7ff fe93 	bl	24f3e <net_buf_frags_len>
   25218:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   2521c:	f105 0708 	add.w	r7, r5, #8
   25220:	1a24      	subs	r4, r4, r0
   25222:	4638      	mov	r0, r7
   25224:	f001 f9af 	bl	26586 <net_buf_simple_tailroom>
   25228:	4284      	cmp	r4, r0
   2522a:	d21a      	bcs.n	25262 <att_chan_read+0xce>
   2522c:	4630      	mov	r0, r6
   2522e:	f7ff fe86 	bl	24f3e <net_buf_frags_len>
   25232:	f8b8 405e 	ldrh.w	r4, [r8, #94]	; 0x5e
   25236:	1a24      	subs	r4, r4, r0
		read = attr->read(conn, attr, frag->data + frag->len, len,
   25238:	68a9      	ldr	r1, [r5, #8]
   2523a:	89aa      	ldrh	r2, [r5, #12]
   2523c:	f8db 7004 	ldr.w	r7, [fp, #4]
   25240:	9803      	ldr	r0, [sp, #12]
   25242:	f8cd 9000 	str.w	r9, [sp]
   25246:	440a      	add	r2, r1
   25248:	b2a3      	uxth	r3, r4
   2524a:	4659      	mov	r1, fp
   2524c:	47b8      	blx	r7
		if (read < 0) {
   2524e:	1e07      	subs	r7, r0, #0
   25250:	da0c      	bge.n	2526c <att_chan_read+0xd8>
				return total;
   25252:	f1ba 0f00 	cmp.w	sl, #0
   25256:	bf18      	it	ne
   25258:	4657      	movne	r7, sl
}
   2525a:	4638      	mov	r0, r7
   2525c:	b005      	add	sp, #20
   2525e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   25262:	4638      	mov	r0, r7
   25264:	f001 f98f 	bl	26586 <net_buf_simple_tailroom>
   25268:	4604      	mov	r4, r0
   2526a:	e7e5      	b.n	25238 <att_chan_read+0xa4>
		if (cb && !cb(frag, read, user_data)) {
   2526c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2526e:	b993      	cbnz	r3, 25296 <att_chan_read+0x102>
	return net_buf_simple_add(&buf->b, len);
   25270:	4639      	mov	r1, r7
   25272:	f105 0008 	add.w	r0, r5, #8
   25276:	f001 f94b 	bl	26510 <net_buf_simple_add>
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2527a:	4630      	mov	r0, r6
   2527c:	f7ff fe5f 	bl	24f3e <net_buf_frags_len>
   25280:	f8b8 305e 	ldrh.w	r3, [r8, #94]	; 0x5e
		offset += read;
   25284:	44b9      	add	r9, r7
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   25286:	4283      	cmp	r3, r0
		total += read;
   25288:	44ba      	add	sl, r7
		offset += read;
   2528a:	fa1f f989 	uxth.w	r9, r9
	} while (chan->chan.tx.mtu > net_buf_frags_len(buf) && read == len);
   2528e:	d9b5      	bls.n	251fc <att_chan_read+0x68>
   25290:	42a7      	cmp	r7, r4
   25292:	d096      	beq.n	251c2 <att_chan_read+0x2e>
   25294:	e7b2      	b.n	251fc <att_chan_read+0x68>
		if (cb && !cb(frag, read, user_data)) {
   25296:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   25298:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2529a:	4639      	mov	r1, r7
   2529c:	4628      	mov	r0, r5
   2529e:	4798      	blx	r3
   252a0:	2800      	cmp	r0, #0
   252a2:	d1e5      	bne.n	25270 <att_chan_read+0xdc>
   252a4:	e7aa      	b.n	251fc <att_chan_read+0x68>
		return 0;
   252a6:	2700      	movs	r7, #0
   252a8:	e7d7      	b.n	2525a <att_chan_read+0xc6>

000252aa <chan_cfm_sent>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   252aa:	30c0      	adds	r0, #192	; 0xc0
   252ac:	f3bf 8f5b 	dmb	ish
   252b0:	e850 3f00 	ldrex	r3, [r0]
   252b4:	f023 0302 	bic.w	r3, r3, #2
   252b8:	e840 3200 	strex	r2, r3, [r0]
   252bc:	2a00      	cmp	r2, #0
   252be:	d1f7      	bne.n	252b0 <chan_cfm_sent+0x6>
   252c0:	f3bf 8f5b 	dmb	ish
}
   252c4:	4770      	bx	lr

000252c6 <chan_rsp_sent>:
   252c6:	30c0      	adds	r0, #192	; 0xc0
   252c8:	f3bf 8f5b 	dmb	ish
   252cc:	e850 3f00 	ldrex	r3, [r0]
   252d0:	f023 0301 	bic.w	r3, r3, #1
   252d4:	e840 3200 	strex	r2, r3, [r0]
   252d8:	2a00      	cmp	r2, #0
   252da:	d1f7      	bne.n	252cc <chan_rsp_sent+0x6>
   252dc:	f3bf 8f5b 	dmb	ish
}
   252e0:	4770      	bx	lr

000252e2 <read_cb>:
{
   252e2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	struct bt_att_chan *chan = data->chan;
   252e6:	f8d2 8000 	ldr.w	r8, [r2]
{
   252ea:	4606      	mov	r6, r0
	data->err = 0x00;
   252ec:	2700      	movs	r7, #0
	struct bt_conn *conn = chan->chan.chan.conn;
   252ee:	f8d8 0008 	ldr.w	r0, [r8, #8]
	data->err = 0x00;
   252f2:	7317      	strb	r7, [r2, #12]
{
   252f4:	4615      	mov	r5, r2
	data->err = bt_gatt_check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
   252f6:	4631      	mov	r1, r6
   252f8:	2215      	movs	r2, #21
   252fa:	f000 fc91 	bl	25c20 <bt_gatt_check_perm>
   252fe:	4604      	mov	r4, r0
   25300:	7328      	strb	r0, [r5, #12]
	if (data->err) {
   25302:	b9a0      	cbnz	r0, 2532e <read_cb+0x4c>
	ret = att_chan_read(chan, attr, data->buf, data->offset, NULL, NULL);
   25304:	e9cd 0000 	strd	r0, r0, [sp]
   25308:	88ab      	ldrh	r3, [r5, #4]
   2530a:	68aa      	ldr	r2, [r5, #8]
   2530c:	4631      	mov	r1, r6
   2530e:	4640      	mov	r0, r8
   25310:	f7ff ff40 	bl	25194 <att_chan_read>
	if (ret < 0) {
   25314:	1e03      	subs	r3, r0, #0
   25316:	da0c      	bge.n	25332 <read_cb+0x50>
	if (err < 0 && err >= -0xff) {
   25318:	f113 0fff 	cmn.w	r3, #255	; 0xff
		return -err;
   2531c:	bf26      	itte	cs
   2531e:	425b      	negcs	r3, r3
   25320:	b2db      	uxtbcs	r3, r3
	return BT_ATT_ERR_UNLIKELY;
   25322:	230e      	movcc	r3, #14
		data->err = err_to_att(ret);
   25324:	732b      	strb	r3, [r5, #12]
}
   25326:	4620      	mov	r0, r4
   25328:	b002      	add	sp, #8
   2532a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ITER_STOP;
   2532e:	463c      	mov	r4, r7
   25330:	e7f9      	b.n	25326 <read_cb+0x44>
	return BT_GATT_ITER_CONTINUE;
   25332:	2401      	movs	r4, #1
   25334:	e7f7      	b.n	25326 <read_cb+0x44>

00025336 <bt_att_sent>:
{
   25336:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (chan->sent) {
   25338:	f8d0 3108 	ldr.w	r3, [r0, #264]	; 0x108
	struct bt_att *att = chan->att;
   2533c:	f850 4c08 	ldr.w	r4, [r0, #-8]
{
   25340:	4605      	mov	r5, r0
	struct bt_att_chan *chan = ATT_CHAN(ch);
   25342:	f1a0 0708 	sub.w	r7, r0, #8
	if (chan->sent) {
   25346:	b10b      	cbz	r3, 2534c <bt_att_sent+0x16>
		chan->sent(chan);
   25348:	4638      	mov	r0, r7
   2534a:	4798      	blx	r3
   2534c:	f3bf 8f5b 	dmb	ish
   25350:	f105 03b8 	add.w	r3, r5, #184	; 0xb8
   25354:	e853 2f00 	ldrex	r2, [r3]
   25358:	f022 0210 	bic.w	r2, r2, #16
   2535c:	e843 2100 	strex	r1, r2, [r3]
   25360:	2900      	cmp	r1, #0
   25362:	d1f7      	bne.n	25354 <bt_att_sent+0x1e>
   25364:	f3bf 8f5b 	dmb	ish
	if (!att) {
   25368:	b30c      	cbz	r4, 253ae <bt_att_sent+0x78>
	if (!chan->req && !sys_slist_is_empty(&att->reqs)) {
   2536a:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   2536e:	b98b      	cbnz	r3, 25394 <bt_att_sent+0x5e>
   25370:	6863      	ldr	r3, [r4, #4]
   25372:	b17b      	cbz	r3, 25394 <bt_att_sent+0x5e>
		sys_snode_t *node = sys_slist_get(&att->reqs);
   25374:	1d20      	adds	r0, r4, #4
   25376:	f7ff fdd8 	bl	24f2a <sys_slist_get>
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2537a:	4601      	mov	r1, r0
		sys_snode_t *node = sys_slist_get(&att->reqs);
   2537c:	4606      	mov	r6, r0
		if (chan_req_send(chan, ATT_REQ(node)) >= 0) {
   2537e:	4638      	mov	r0, r7
   25380:	f7ff febd 	bl	250fe <chan_req_send>
   25384:	2800      	cmp	r0, #0
   25386:	da12      	bge.n	253ae <bt_att_sent+0x78>
	parent->next = child;
   25388:	6863      	ldr	r3, [r4, #4]
   2538a:	6033      	str	r3, [r6, #0]
Z_GENLIST_PREPEND(slist, snode)
   2538c:	68a3      	ldr	r3, [r4, #8]
	list->head = node;
   2538e:	6066      	str	r6, [r4, #4]
Z_GENLIST_PREPEND(slist, snode)
   25390:	b903      	cbnz	r3, 25394 <bt_att_sent+0x5e>
	list->tail = node;
   25392:	60a6      	str	r6, [r4, #8]
	err = process_queue(chan, &chan->tx_queue);
   25394:	f105 01c0 	add.w	r1, r5, #192	; 0xc0
   25398:	4638      	mov	r0, r7
   2539a:	f7ff fec9 	bl	25130 <process_queue>
	if (!err) {
   2539e:	b130      	cbz	r0, 253ae <bt_att_sent+0x78>
	(void)process_queue(chan, &att->tx_queue);
   253a0:	f104 010c 	add.w	r1, r4, #12
   253a4:	4638      	mov	r0, r7
}
   253a6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
	(void)process_queue(chan, &att->tx_queue);
   253aa:	f7ff bec1 	b.w	25130 <process_queue>
}
   253ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000253b0 <bt_att_status>:
{
   253b0:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   253b2:	f3bf 8f5b 	dmb	ish
   253b6:	680b      	ldr	r3, [r1, #0]
   253b8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   253bc:	07db      	lsls	r3, r3, #31
{
   253be:	4605      	mov	r5, r0
	if (!atomic_test_bit(status, BT_L2CAP_STATUS_OUT)) {
   253c0:	d519      	bpl.n	253f6 <bt_att_status+0x46>
	if (!chan->att) {
   253c2:	f850 0c08 	ldr.w	r0, [r0, #-8]
   253c6:	b1b0      	cbz	r0, 253f6 <bt_att_status+0x46>
	if (chan->req) {
   253c8:	f8d5 30bc 	ldr.w	r3, [r5, #188]	; 0xbc
   253cc:	b99b      	cbnz	r3, 253f6 <bt_att_status+0x46>
	node = sys_slist_get(&chan->att->reqs);
   253ce:	3004      	adds	r0, #4
   253d0:	f7ff fdab 	bl	24f2a <sys_slist_get>
	if (!node) {
   253d4:	4604      	mov	r4, r0
   253d6:	b170      	cbz	r0, 253f6 <bt_att_status+0x46>
	return chan_req_send(chan, req);
   253d8:	4601      	mov	r1, r0
   253da:	f1a5 0008 	sub.w	r0, r5, #8
   253de:	f7ff fe8e 	bl	250fe <chan_req_send>
	if (bt_att_chan_req_send(chan, ATT_REQ(node)) >= 0) {
   253e2:	2800      	cmp	r0, #0
   253e4:	da07      	bge.n	253f6 <bt_att_status+0x46>
	sys_slist_prepend(&chan->att->reqs, node);
   253e6:	f855 3c08 	ldr.w	r3, [r5, #-8]
	parent->next = child;
   253ea:	685a      	ldr	r2, [r3, #4]
   253ec:	6022      	str	r2, [r4, #0]
Z_GENLIST_PREPEND(slist, snode)
   253ee:	689a      	ldr	r2, [r3, #8]
	list->head = node;
   253f0:	605c      	str	r4, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   253f2:	b902      	cbnz	r2, 253f6 <bt_att_status+0x46>
	list->tail = node;
   253f4:	609c      	str	r4, [r3, #8]
}
   253f6:	bd38      	pop	{r3, r4, r5, pc}

000253f8 <send_err_rsp.part.0>:
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   253f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   253fc:	4688      	mov	r8, r1
   253fe:	4617      	mov	r7, r2
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25400:	2101      	movs	r1, #1
   25402:	2204      	movs	r2, #4
static void send_err_rsp(struct bt_att_chan *chan, uint8_t req, uint16_t handle,
   25404:	4605      	mov	r5, r0
   25406:	461e      	mov	r6, r3
	buf = bt_att_chan_create_pdu(chan, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
   25408:	f7e7 f932 	bl	c670 <bt_att_chan_create_pdu>
	if (!buf) {
   2540c:	4604      	mov	r4, r0
   2540e:	b170      	cbz	r0, 2542e <send_err_rsp.part.0+0x36>
   25410:	2104      	movs	r1, #4
   25412:	3008      	adds	r0, #8
   25414:	f001 f87c 	bl	26510 <net_buf_simple_add>
	rsp->request = req;
   25418:	f880 8000 	strb.w	r8, [r0]
	rsp->error = err;
   2541c:	70c6      	strb	r6, [r0, #3]
	rsp->handle = sys_cpu_to_le16(handle);
   2541e:	f8a0 7001 	strh.w	r7, [r0, #1]
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   25422:	4621      	mov	r1, r4
   25424:	4628      	mov	r0, r5
}
   25426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   2542a:	f7e6 bf8b 	b.w	c344 <bt_att_chan_send_rsp.constprop.0>
}
   2542e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00025432 <att_write_cmd>:
{
   25432:	b530      	push	{r4, r5, lr}
   25434:	460c      	mov	r4, r1
   25436:	b085      	sub	sp, #20
   25438:	4605      	mov	r5, r0
	return net_buf_simple_pull_le16(&buf->b);
   2543a:	f101 0008 	add.w	r0, r1, #8
   2543e:	f001 f896 	bl	2656e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, 0, 0, handle, 0, buf->data, buf->len);
   25442:	89a2      	ldrh	r2, [r4, #12]
   25444:	9202      	str	r2, [sp, #8]
   25446:	68a2      	ldr	r2, [r4, #8]
   25448:	9201      	str	r2, [sp, #4]
   2544a:	2200      	movs	r2, #0
   2544c:	4603      	mov	r3, r0
   2544e:	9200      	str	r2, [sp, #0]
   25450:	4611      	mov	r1, r2
   25452:	4628      	mov	r0, r5
   25454:	f7e7 fa00 	bl	c858 <att_write_rsp>
}
   25458:	b005      	add	sp, #20
   2545a:	bd30      	pop	{r4, r5, pc}

0002545c <att_write_req>:
{
   2545c:	b530      	push	{r4, r5, lr}
   2545e:	460c      	mov	r4, r1
   25460:	b085      	sub	sp, #20
   25462:	4605      	mov	r5, r0
   25464:	f101 0008 	add.w	r0, r1, #8
   25468:	f001 f881 	bl	2656e <net_buf_simple_pull_le16>
	return att_write_rsp(chan, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
   2546c:	89a2      	ldrh	r2, [r4, #12]
   2546e:	9202      	str	r2, [sp, #8]
   25470:	68a2      	ldr	r2, [r4, #8]
   25472:	9201      	str	r2, [sp, #4]
   25474:	2200      	movs	r2, #0
   25476:	4603      	mov	r3, r0
   25478:	9200      	str	r2, [sp, #0]
   2547a:	2112      	movs	r1, #18
   2547c:	2213      	movs	r2, #19
   2547e:	4628      	mov	r0, r5
   25480:	f7e7 f9ea 	bl	c858 <att_write_rsp>
}
   25484:	b005      	add	sp, #20
   25486:	bd30      	pop	{r4, r5, pc}

00025488 <att_exec_write_req>:
{
   25488:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
	return att_exec_write_rsp(chan, req->flags);
   2548c:	688b      	ldr	r3, [r1, #8]
	struct bt_conn *conn = chan->chan.chan.conn;
   2548e:	6887      	ldr	r7, [r0, #8]
	return att_exec_write_rsp(chan, req->flags);
   25490:	f893 8000 	ldrb.w	r8, [r3]
{
   25494:	4606      	mov	r6, r0
	uint8_t err = 0U;
   25496:	2400      	movs	r4, #0
	while ((buf = net_buf_get(&chan->att->prep_queue, K_NO_WAIT))) {
   25498:	6830      	ldr	r0, [r6, #0]
   2549a:	2200      	movs	r2, #0
   2549c:	2300      	movs	r3, #0
   2549e:	3024      	adds	r0, #36	; 0x24
   254a0:	f000 ffe5 	bl	2646e <net_buf_get>
   254a4:	4605      	mov	r5, r0
   254a6:	b970      	cbnz	r0, 254c6 <att_exec_write_req+0x3e>
	if (err) {
   254a8:	bb4c      	cbnz	r4, 254fe <att_exec_write_req+0x76>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_EXEC_WRITE_RSP, 0);
   254aa:	2119      	movs	r1, #25
   254ac:	4622      	mov	r2, r4
   254ae:	4638      	mov	r0, r7
   254b0:	f7e7 fa74 	bl	c99c <bt_att_create_pdu>
	if (!buf) {
   254b4:	4601      	mov	r1, r0
   254b6:	b320      	cbz	r0, 25502 <att_exec_write_req+0x7a>
	bt_att_chan_send_rsp(chan, buf, chan_rsp_sent);
   254b8:	4630      	mov	r0, r6
   254ba:	f7e6 ff43 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
}
   254be:	4620      	mov	r0, r4
   254c0:	b004      	add	sp, #16
   254c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!err && flags == BT_ATT_FLAG_EXEC) {
   254c6:	b9b4      	cbnz	r4, 254f6 <att_exec_write_req+0x6e>
   254c8:	f1b8 0f01 	cmp.w	r8, #1
   254cc:	d113      	bne.n	254f6 <att_exec_write_req+0x6e>
			err = att_write_rsp(chan, BT_ATT_OP_EXEC_WRITE_REQ, 0,
   254ce:	89aa      	ldrh	r2, [r5, #12]
   254d0:	8aab      	ldrh	r3, [r5, #20]
   254d2:	9202      	str	r2, [sp, #8]
   254d4:	68aa      	ldr	r2, [r5, #8]
   254d6:	9201      	str	r2, [sp, #4]
   254d8:	8aea      	ldrh	r2, [r5, #22]
   254da:	9200      	str	r2, [sp, #0]
   254dc:	2118      	movs	r1, #24
   254de:	4622      	mov	r2, r4
   254e0:	4630      	mov	r0, r6
   254e2:	f7e7 f9b9 	bl	c858 <att_write_rsp>
			if (err) {
   254e6:	4604      	mov	r4, r0
   254e8:	b128      	cbz	r0, 254f6 <att_exec_write_req+0x6e>
	if (!req) {
   254ea:	4603      	mov	r3, r0
   254ec:	8aaa      	ldrh	r2, [r5, #20]
   254ee:	2118      	movs	r1, #24
   254f0:	4630      	mov	r0, r6
   254f2:	f7ff ff81 	bl	253f8 <send_err_rsp.part.0>
		net_buf_unref(buf);
   254f6:	4628      	mov	r0, r5
   254f8:	f7f8 f8d8 	bl	1d6ac <net_buf_unref>
   254fc:	e7cc      	b.n	25498 <att_exec_write_req+0x10>
		return 0;
   254fe:	4604      	mov	r4, r0
   25500:	e7dd      	b.n	254be <att_exec_write_req+0x36>
		return BT_ATT_ERR_UNLIKELY;
   25502:	240e      	movs	r4, #14
   25504:	e7db      	b.n	254be <att_exec_write_req+0x36>

00025506 <att_read_blob_req>:
{
   25506:	b507      	push	{r0, r1, r2, lr}
	req = (void *)buf->data;
   25508:	688a      	ldr	r2, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_BLOB_REQ,
   2550a:	8813      	ldrh	r3, [r2, #0]
   2550c:	8852      	ldrh	r2, [r2, #2]
   2550e:	9200      	str	r2, [sp, #0]
   25510:	210c      	movs	r1, #12
   25512:	220d      	movs	r2, #13
   25514:	f7e7 fbac 	bl	cc70 <att_read_rsp>
}
   25518:	b003      	add	sp, #12
   2551a:	f85d fb04 	ldr.w	pc, [sp], #4

0002551e <att_read_req>:
{
   2551e:	b507      	push	{r0, r1, r2, lr}
	handle = sys_le16_to_cpu(req->handle);
   25520:	688b      	ldr	r3, [r1, #8]
	return att_read_rsp(chan, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
   25522:	2200      	movs	r2, #0
   25524:	881b      	ldrh	r3, [r3, #0]
   25526:	9200      	str	r2, [sp, #0]
   25528:	210a      	movs	r1, #10
   2552a:	220b      	movs	r2, #11
   2552c:	f7e7 fba0 	bl	cc70 <att_read_rsp>
}
   25530:	b003      	add	sp, #12
   25532:	f85d fb04 	ldr.w	pc, [sp], #4

00025536 <att_mtu_req>:
{
   25536:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = chan->att->conn;
   25538:	6803      	ldr	r3, [r0, #0]
{
   2553a:	4605      	mov	r5, r0
	struct bt_conn *conn = chan->att->conn;
   2553c:	6818      	ldr	r0, [r3, #0]
   2553e:	f3bf 8f5b 	dmb	ish
   25542:	f8d5 30c0 	ldr.w	r3, [r5, #192]	; 0xc0
   25546:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(chan->flags, ATT_ENHANCED)) {
   2554a:	f3c3 04c0 	ubfx	r4, r3, #3, #1
   2554e:	071b      	lsls	r3, r3, #28
   25550:	d41d      	bmi.n	2558e <att_mtu_req+0x58>
	mtu_client = sys_le16_to_cpu(req->mtu);
   25552:	688b      	ldr	r3, [r1, #8]
   25554:	881e      	ldrh	r6, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
   25556:	2e16      	cmp	r6, #22
   25558:	d91b      	bls.n	25592 <att_mtu_req+0x5c>
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
   2555a:	2202      	movs	r2, #2
   2555c:	2103      	movs	r1, #3
   2555e:	f7e7 fa1d 	bl	c99c <bt_att_create_pdu>
	if (!pdu) {
   25562:	4607      	mov	r7, r0
   25564:	b1b8      	cbz	r0, 25596 <att_mtu_req+0x60>
	return net_buf_simple_add(&buf->b, len);
   25566:	2102      	movs	r1, #2
   25568:	3008      	adds	r0, #8
   2556a:	f000 ffd1 	bl	26510 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
   2556e:	2341      	movs	r3, #65	; 0x41
   25570:	7003      	strb	r3, [r0, #0]
   25572:	7044      	strb	r4, [r0, #1]
	bt_att_chan_send_rsp(chan, pdu, chan_rsp_sent);
   25574:	4639      	mov	r1, r7
   25576:	4628      	mov	r0, r5
   25578:	f7e6 fee4 	bl	c344 <bt_att_chan_send_rsp.constprop.0>
	chan->chan.rx.mtu = MIN(mtu_client, mtu_server);
   2557c:	2e41      	cmp	r6, #65	; 0x41
   2557e:	bf28      	it	cs
   25580:	2641      	movcs	r6, #65	; 0x41
   25582:	f8a5 6052 	strh.w	r6, [r5, #82]	; 0x52
	chan->chan.tx.mtu = chan->chan.rx.mtu;
   25586:	f8a5 605e 	strh.w	r6, [r5, #94]	; 0x5e
	return 0;
   2558a:	4620      	mov	r0, r4
}
   2558c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_ATT_ERR_NOT_SUPPORTED;
   2558e:	2006      	movs	r0, #6
   25590:	e7fc      	b.n	2558c <att_mtu_req+0x56>
		return BT_ATT_ERR_INVALID_PDU;
   25592:	2004      	movs	r0, #4
   25594:	e7fa      	b.n	2558c <att_mtu_req+0x56>
		return BT_ATT_ERR_UNLIKELY;
   25596:	200e      	movs	r0, #14
   25598:	e7f8      	b.n	2558c <att_mtu_req+0x56>

0002559a <bt_att_init>:
	bt_gatt_init();
   2559a:	f7e8 bb13 	b.w	dbc4 <bt_gatt_init>

0002559e <att_confirm>:
	return att_handle_rsp(chan, buf->data, buf->len, 0);
   2559e:	898a      	ldrh	r2, [r1, #12]
   255a0:	6889      	ldr	r1, [r1, #8]
   255a2:	2300      	movs	r3, #0
   255a4:	f7e7 bcd6 	b.w	cf54 <att_handle_rsp>

000255a8 <bt_att_encrypt_change>:
	if (!att_chan->att) {
   255a8:	f850 3c08 	ldr.w	r3, [r0, #-8]
{
   255ac:	b570      	push	{r4, r5, r6, lr}
   255ae:	4604      	mov	r4, r0
	struct bt_att_chan *att_chan = ATT_CHAN(chan);
   255b0:	f1a0 0608 	sub.w	r6, r0, #8
	if (!att_chan->att) {
   255b4:	2b00      	cmp	r3, #0
   255b6:	d037      	beq.n	25628 <bt_att_encrypt_change+0x80>
	if (hci_status) {
   255b8:	b171      	cbz	r1, 255d8 <bt_att_encrypt_change+0x30>
		if (att_chan->req && att_chan->req->retrying) {
   255ba:	f8d0 30bc 	ldr.w	r3, [r0, #188]	; 0xbc
   255be:	2b00      	cmp	r3, #0
   255c0:	d032      	beq.n	25628 <bt_att_encrypt_change+0x80>
   255c2:	7c1b      	ldrb	r3, [r3, #16]
   255c4:	07da      	lsls	r2, r3, #31
   255c6:	d52f      	bpl.n	25628 <bt_att_encrypt_change+0x80>
		return BT_ATT_ERR_AUTHENTICATION;
   255c8:	2305      	movs	r3, #5
		att_handle_rsp(att_chan, NULL, 0, err);
   255ca:	2200      	movs	r2, #0
   255cc:	4630      	mov	r0, r6
   255ce:	4611      	mov	r1, r2
}
   255d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		att_handle_rsp(att_chan, NULL, 0, err);
   255d4:	f7e7 bcbe 	b.w	cf54 <att_handle_rsp>
	struct bt_conn *conn = ch->chan.conn;
   255d8:	6805      	ldr	r5, [r0, #0]
	bt_gatt_encrypt_change(conn);
   255da:	4628      	mov	r0, r5
   255dc:	f7e8 fef4 	bl	e3c8 <bt_gatt_encrypt_change>
	if (conn->sec_level == BT_SECURITY_L1) {
   255e0:	7a6b      	ldrb	r3, [r5, #9]
   255e2:	2b01      	cmp	r3, #1
   255e4:	d020      	beq.n	25628 <bt_att_encrypt_change+0x80>
	if (!(att_chan->req && att_chan->req->retrying)) {
   255e6:	f8d4 40bc 	ldr.w	r4, [r4, #188]	; 0xbc
   255ea:	b1ec      	cbz	r4, 25628 <bt_att_encrypt_change+0x80>
   255ec:	7c23      	ldrb	r3, [r4, #16]
   255ee:	07db      	lsls	r3, r3, #31
   255f0:	d51a      	bpl.n	25628 <bt_att_encrypt_change+0x80>
	if (!req->encode) {
   255f2:	68e3      	ldr	r3, [r4, #12]
   255f4:	2b00      	cmp	r3, #0
   255f6:	d0e7      	beq.n	255c8 <bt_att_encrypt_change+0x20>
	buf = bt_att_chan_create_pdu(att_chan, req->att_op, req->len);
   255f8:	6962      	ldr	r2, [r4, #20]
   255fa:	7c61      	ldrb	r1, [r4, #17]
   255fc:	4630      	mov	r0, r6
   255fe:	f7e7 f837 	bl	c670 <bt_att_chan_create_pdu>
	if (!buf) {
   25602:	4605      	mov	r5, r0
   25604:	b140      	cbz	r0, 25618 <bt_att_encrypt_change+0x70>
	if (req->encode(buf, req->len, req->user_data)) {
   25606:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
   2560a:	68e3      	ldr	r3, [r4, #12]
   2560c:	4798      	blx	r3
   2560e:	4602      	mov	r2, r0
   25610:	b120      	cbz	r0, 2561c <bt_att_encrypt_change+0x74>
		net_buf_unref(buf);
   25612:	4628      	mov	r0, r5
   25614:	f7f8 f84a 	bl	1d6ac <net_buf_unref>
		return BT_ATT_ERR_UNLIKELY;
   25618:	230e      	movs	r3, #14
   2561a:	e7d6      	b.n	255ca <bt_att_encrypt_change+0x22>
	if (chan_send(att_chan, buf, NULL)) {
   2561c:	4629      	mov	r1, r5
   2561e:	4630      	mov	r0, r6
   25620:	f7e6 fe22 	bl	c268 <chan_send>
   25624:	2800      	cmp	r0, #0
   25626:	d1f4      	bne.n	25612 <bt_att_encrypt_change+0x6a>
}
   25628:	bd70      	pop	{r4, r5, r6, pc}

0002562a <bt_att_send>:

int bt_att_send(struct bt_conn *conn, struct net_buf *buf, bt_conn_tx_cb_t cb,
		void *user_data)
{
   2562a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   2562e:	4605      	mov	r5, r0
   25630:	460e      	mov	r6, r1
   25632:	4614      	mov	r4, r2
   25634:	4698      	mov	r8, r3
	int ret;

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(buf);

	att = att_get(conn);
   25636:	f7e6 fd0b 	bl	c050 <att_get>
	if (!att) {
   2563a:	4607      	mov	r7, r0
   2563c:	b938      	cbnz	r0, 2564e <bt_att_send+0x24>
		net_buf_unref(buf);
   2563e:	4630      	mov	r0, r6
   25640:	f7f8 f834 	bl	1d6ac <net_buf_unref>
		return -ENOTCONN;
   25644:	f06f 0038 	mvn.w	r0, #56	; 0x38
		BT_DBG("Queueing buffer %p", buf);
		net_buf_put(&att->tx_queue, buf);
	}

	return 0;
}
   25648:	b002      	add	sp, #8
   2564a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (cb) {
   2564e:	b144      	cbz	r4, 25662 <bt_att_send+0x38>
		return bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, cb,
   25650:	f8cd 8000 	str.w	r8, [sp]
   25654:	4623      	mov	r3, r4
   25656:	4632      	mov	r2, r6
   25658:	2104      	movs	r1, #4
   2565a:	4628      	mov	r0, r5
   2565c:	f7ff fc2b 	bl	24eb6 <bt_l2cap_send_cb>
   25660:	e7f2      	b.n	25648 <bt_att_send+0x1e>
	return list->head;
   25662:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25664:	b184      	cbz	r4, 25688 <bt_att_send+0x5e>
   25666:	f5b4 758a 	subs.w	r5, r4, #276	; 0x114
   2566a:	d00f      	beq.n	2568c <bt_att_send+0x62>
	return node->next;
   2566c:	6824      	ldr	r4, [r4, #0]
   2566e:	b10c      	cbz	r4, 25674 <bt_att_send+0x4a>
   25670:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
   25674:	2000      	movs	r0, #0
   25676:	b95d      	cbnz	r5, 25690 <bt_att_send+0x66>
	if (ret < 0) {
   25678:	b188      	cbz	r0, 2569e <bt_att_send+0x74>
		net_buf_put(&att->tx_queue, buf);
   2567a:	f107 000c 	add.w	r0, r7, #12
   2567e:	4631      	mov	r1, r6
   25680:	f000 ff13 	bl	264aa <net_buf_put>
	return 0;
   25684:	4628      	mov	r0, r5
   25686:	e7df      	b.n	25648 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   25688:	4625      	mov	r5, r4
   2568a:	e7f3      	b.n	25674 <bt_att_send+0x4a>
   2568c:	462c      	mov	r4, r5
   2568e:	e7f1      	b.n	25674 <bt_att_send+0x4a>
	return chan_send(chan, buf, cb);
   25690:	2200      	movs	r2, #0
   25692:	4631      	mov	r1, r6
   25694:	4628      	mov	r0, r5
   25696:	f7e6 fde7 	bl	c268 <chan_send>
		if (ret >= 0) {
   2569a:	2800      	cmp	r0, #0
   2569c:	db01      	blt.n	256a2 <bt_att_send+0x78>
	return 0;
   2569e:	2000      	movs	r0, #0
   256a0:	e7d2      	b.n	25648 <bt_att_send+0x1e>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   256a2:	b154      	cbz	r4, 256ba <bt_att_send+0x90>
Z_GENLIST_PEEK_NEXT(slist, snode)
   256a4:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   256a8:	d004      	beq.n	256b4 <bt_att_send+0x8a>
	return node->next;
   256aa:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
   256ae:	b10b      	cbz	r3, 256b4 <bt_att_send+0x8a>
   256b0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
   256b4:	4625      	mov	r5, r4
   256b6:	461c      	mov	r4, r3
   256b8:	e7dd      	b.n	25676 <bt_att_send+0x4c>
   256ba:	4623      	mov	r3, r4
   256bc:	e7fa      	b.n	256b4 <bt_att_send+0x8a>

000256be <bt_att_req_send>:

int bt_att_req_send(struct bt_conn *conn, struct bt_att_req *req)
{
   256be:	b570      	push	{r4, r5, r6, lr}
   256c0:	460e      	mov	r6, r1
	BT_DBG("conn %p req %p", conn, req);

	__ASSERT_NO_MSG(conn);
	__ASSERT_NO_MSG(req);

	att = att_get(conn);
   256c2:	f7e6 fcc5 	bl	c050 <att_get>
	if (!att) {
   256c6:	4605      	mov	r5, r0
   256c8:	b340      	cbz	r0, 2571c <bt_att_req_send+0x5e>
	return list->head;
   256ca:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return -ENOTCONN;
	}

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   256cc:	b153      	cbz	r3, 256e4 <bt_att_req_send+0x26>
   256ce:	f5b3 708a 	subs.w	r0, r3, #276	; 0x114
   256d2:	d007      	beq.n	256e4 <bt_att_req_send+0x26>
	return node->next;
   256d4:	681c      	ldr	r4, [r3, #0]
   256d6:	b10c      	cbz	r4, 256dc <bt_att_req_send+0x1e>
   256d8:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
		/* If there is nothing pending use the channel */
		if (!chan->req) {
   256dc:	f8d0 30c4 	ldr.w	r3, [r0, #196]	; 0xc4
   256e0:	b143      	cbz	r3, 256f4 <bt_att_req_send+0x36>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   256e2:	b96c      	cbnz	r4, 25700 <bt_att_req_send+0x42>
	return list->tail;
   256e4:	68ab      	ldr	r3, [r5, #8]
	parent->next = child;
   256e6:	2000      	movs	r0, #0
   256e8:	6030      	str	r0, [r6, #0]
Z_GENLIST_APPEND(slist, snode)
   256ea:	b9a3      	cbnz	r3, 25716 <bt_att_req_send+0x58>
	list->head = node;
   256ec:	e9c5 6601 	strd	r6, r6, [r5, #4]
	/* Queue the request to be send later */
	sys_slist_append(&att->reqs, &req->node);

	BT_DBG("req %p queued", req);

	return 0;
   256f0:	4618      	mov	r0, r3
}
   256f2:	e004      	b.n	256fe <bt_att_req_send+0x40>
	return chan_req_send(chan, req);
   256f4:	4631      	mov	r1, r6
   256f6:	f7ff fd02 	bl	250fe <chan_req_send>
			if (ret >= 0) {
   256fa:	2800      	cmp	r0, #0
   256fc:	dbf1      	blt.n	256e2 <bt_att_req_send+0x24>
}
   256fe:	bd70      	pop	{r4, r5, r6, pc}
Z_GENLIST_PEEK_NEXT(slist, snode)
   25700:	f514 738a 	adds.w	r3, r4, #276	; 0x114
   25704:	d004      	beq.n	25710 <bt_att_req_send+0x52>
	return node->next;
   25706:	f8d4 3114 	ldr.w	r3, [r4, #276]	; 0x114
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->chans, chan, tmp, node) {
   2570a:	b10b      	cbz	r3, 25710 <bt_att_req_send+0x52>
   2570c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
{
   25710:	4620      	mov	r0, r4
   25712:	461c      	mov	r4, r3
   25714:	e7e2      	b.n	256dc <bt_att_req_send+0x1e>
	parent->next = child;
   25716:	601e      	str	r6, [r3, #0]
	list->tail = node;
   25718:	60ae      	str	r6, [r5, #8]
}
   2571a:	e7f0      	b.n	256fe <bt_att_req_send+0x40>
		return -ENOTCONN;
   2571c:	f06f 0038 	mvn.w	r0, #56	; 0x38
   25720:	e7ed      	b.n	256fe <bt_att_req_send+0x40>

00025722 <gatt_ccc_changed>:
{
   25722:	460b      	mov	r3, r1
		if (ccc->cfg[i].value > value) {
   25724:	8909      	ldrh	r1, [r1, #8]
	if (value != ccc->value) {
   25726:	895a      	ldrh	r2, [r3, #10]
   25728:	428a      	cmp	r2, r1
   2572a:	d003      	beq.n	25734 <gatt_ccc_changed+0x12>
		ccc->value = value;
   2572c:	8159      	strh	r1, [r3, #10]
		if (ccc->cfg_changed) {
   2572e:	68db      	ldr	r3, [r3, #12]
   25730:	b103      	cbz	r3, 25734 <gatt_ccc_changed+0x12>
			ccc->cfg_changed(attr, value);
   25732:	4718      	bx	r3
}
   25734:	4770      	bx	lr

00025736 <gatt_indicate_rsp>:
{
   25736:	b510      	push	{r4, lr}
   25738:	9c02      	ldr	r4, [sp, #8]
	if (params->func) {
   2573a:	68a3      	ldr	r3, [r4, #8]
{
   2573c:	460a      	mov	r2, r1
	if (params->func) {
   2573e:	b10b      	cbz	r3, 25744 <gatt_indicate_rsp+0xe>
		params->func(conn, params, err);
   25740:	4621      	mov	r1, r4
   25742:	4798      	blx	r3
	params->_ref--;
   25744:	7da3      	ldrb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   25746:	68e2      	ldr	r2, [r4, #12]
	params->_ref--;
   25748:	3b01      	subs	r3, #1
   2574a:	b2db      	uxtb	r3, r3
   2574c:	75a3      	strb	r3, [r4, #22]
	if (params->destroy && (params->_ref == 0)) {
   2574e:	b122      	cbz	r2, 2575a <gatt_indicate_rsp+0x24>
   25750:	b91b      	cbnz	r3, 2575a <gatt_indicate_rsp+0x24>
		params->destroy(params);
   25752:	4620      	mov	r0, r4
}
   25754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		params->destroy(params);
   25758:	4710      	bx	r2
}
   2575a:	bd10      	pop	{r4, pc}

0002575c <match_uuid>:
	data->attr = attr;
   2575c:	6010      	str	r0, [r2, #0]
	data->handle = handle;
   2575e:	8091      	strh	r1, [r2, #4]
}
   25760:	2000      	movs	r0, #0
   25762:	4770      	bx	lr

00025764 <ccc_set_cb>:
}
   25764:	2000      	movs	r0, #0
   25766:	4770      	bx	lr

00025768 <bt_addr_le_copy>:
	memcpy(dst, src, sizeof(*dst));
   25768:	2207      	movs	r2, #7
   2576a:	f7fe be7d 	b.w	24468 <memcpy>

0002576e <clear_ccc_cfg>:
{
   2576e:	b537      	push	{r0, r1, r2, r4, r5, lr}
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25770:	2500      	movs	r5, #0
{
   25772:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25774:	4669      	mov	r1, sp
   25776:	3001      	adds	r0, #1
   25778:	9500      	str	r5, [sp, #0]
   2577a:	f8cd 5003 	str.w	r5, [sp, #3]
   2577e:	f7ff fff3 	bl	25768 <bt_addr_le_copy>
	cfg->id = 0U;
   25782:	7025      	strb	r5, [r4, #0]
	cfg->value = 0U;
   25784:	8125      	strh	r5, [r4, #8]
}
   25786:	b003      	add	sp, #12
   25788:	bd30      	pop	{r4, r5, pc}

0002578a <write_name>:
{
   2578a:	b570      	push	{r4, r5, r6, lr}
   2578c:	b092      	sub	sp, #72	; 0x48
   2578e:	4615      	mov	r5, r2
   25790:	f8bd 6058 	ldrh.w	r6, [sp, #88]	; 0x58
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   25794:	2100      	movs	r1, #0
   25796:	223d      	movs	r2, #61	; 0x3d
   25798:	a802      	add	r0, sp, #8
{
   2579a:	461c      	mov	r4, r3
	char value[CONFIG_BT_DEVICE_NAME_MAX] = {};
   2579c:	9101      	str	r1, [sp, #4]
   2579e:	f7fe fe8e 	bl	244be <memset>
	if (offset) {
   257a2:	b966      	cbnz	r6, 257be <write_name+0x34>
	if (len >= sizeof(value)) {
   257a4:	2c40      	cmp	r4, #64	; 0x40
   257a6:	d80d      	bhi.n	257c4 <write_name+0x3a>
	memcpy(value, buf, len);
   257a8:	4622      	mov	r2, r4
   257aa:	4629      	mov	r1, r5
   257ac:	a801      	add	r0, sp, #4
   257ae:	f7fe fe5b 	bl	24468 <memcpy>
	bt_set_name(value);
   257b2:	a801      	add	r0, sp, #4
   257b4:	f7e4 ffac 	bl	a710 <bt_set_name>
	return len;
   257b8:	4620      	mov	r0, r4
}
   257ba:	b012      	add	sp, #72	; 0x48
   257bc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   257be:	f06f 0006 	mvn.w	r0, #6
   257c2:	e7fa      	b.n	257ba <write_name+0x30>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
   257c4:	f06f 000c 	mvn.w	r0, #12
   257c8:	e7f7      	b.n	257ba <write_name+0x30>

000257ca <gen_hash_m>:
{
   257ca:	b5f0      	push	{r4, r5, r6, r7, lr}
	if (attr->uuid->type != BT_UUID_TYPE_16)
   257cc:	6807      	ldr	r7, [r0, #0]
   257ce:	783d      	ldrb	r5, [r7, #0]
{
   257d0:	b089      	sub	sp, #36	; 0x24
   257d2:	4606      	mov	r6, r0
   257d4:	4614      	mov	r4, r2
	if (attr->uuid->type != BT_UUID_TYPE_16)
   257d6:	b10d      	cbz	r5, 257dc <gen_hash_m+0x12>
	switch (u16->val) {
   257d8:	2501      	movs	r5, #1
   257da:	e014      	b.n	25806 <gen_hash_m+0x3c>
   257dc:	887b      	ldrh	r3, [r7, #2]
   257de:	f5b3 5f24 	cmp.w	r3, #10496	; 0x2900
   257e2:	d004      	beq.n	257ee <gen_hash_m+0x24>
   257e4:	d812      	bhi.n	2580c <gen_hash_m+0x42>
   257e6:	f5a3 5320 	sub.w	r3, r3, #10240	; 0x2800
   257ea:	2b03      	cmp	r3, #3
   257ec:	d8f4      	bhi.n	257d8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   257ee:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   257f2:	2202      	movs	r2, #2
   257f4:	f10d 010e 	add.w	r1, sp, #14
   257f8:	4620      	mov	r0, r4
   257fa:	f7fe fcb8 	bl	2416e <tc_cmac_update>
   257fe:	b9e0      	cbnz	r0, 2583a <gen_hash_m+0x70>
			state->err = -EINVAL;
   25800:	f06f 0315 	mvn.w	r3, #21
   25804:	65a3      	str	r3, [r4, #88]	; 0x58
}
   25806:	4628      	mov	r0, r5
   25808:	b009      	add	sp, #36	; 0x24
   2580a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	switch (u16->val) {
   2580c:	f503 4356 	add.w	r3, r3, #54784	; 0xd600
   25810:	33ff      	adds	r3, #255	; 0xff
   25812:	b29b      	uxth	r3, r3
   25814:	2b04      	cmp	r3, #4
   25816:	d8df      	bhi.n	257d8 <gen_hash_m+0xe>
		value = sys_cpu_to_le16(handle);
   25818:	f8ad 100e 	strh.w	r1, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2581c:	2202      	movs	r2, #2
   2581e:	f10d 010e 	add.w	r1, sp, #14
   25822:	4620      	mov	r0, r4
   25824:	f7fe fca3 	bl	2416e <tc_cmac_update>
   25828:	2800      	cmp	r0, #0
   2582a:	d0e9      	beq.n	25800 <gen_hash_m+0x36>
		value = sys_cpu_to_le16(u16->val);
   2582c:	887b      	ldrh	r3, [r7, #2]
   2582e:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25832:	2202      	movs	r2, #2
   25834:	f10d 010e 	add.w	r1, sp, #14
   25838:	e017      	b.n	2586a <gen_hash_m+0xa0>
		value = sys_cpu_to_le16(u16->val);
   2583a:	887b      	ldrh	r3, [r7, #2]
   2583c:	f8ad 300e 	strh.w	r3, [sp, #14]
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   25840:	2202      	movs	r2, #2
   25842:	f10d 010e 	add.w	r1, sp, #14
   25846:	4620      	mov	r0, r4
   25848:	f7fe fc91 	bl	2416e <tc_cmac_update>
   2584c:	2800      	cmp	r0, #0
   2584e:	d0d7      	beq.n	25800 <gen_hash_m+0x36>
		len = attr->read(NULL, attr, data, sizeof(data), 0);
   25850:	2000      	movs	r0, #0
   25852:	2310      	movs	r3, #16
   25854:	eb0d 0203 	add.w	r2, sp, r3
   25858:	6877      	ldr	r7, [r6, #4]
   2585a:	9000      	str	r0, [sp, #0]
   2585c:	4631      	mov	r1, r6
   2585e:	47b8      	blx	r7
		if (len < 0) {
   25860:	1e02      	subs	r2, r0, #0
   25862:	da01      	bge.n	25868 <gen_hash_m+0x9e>
			state->err = len;
   25864:	65a2      	str	r2, [r4, #88]	; 0x58
			return BT_GATT_ITER_STOP;
   25866:	e7ce      	b.n	25806 <gen_hash_m+0x3c>
		if (tc_cmac_update(&state->state, data, len) ==
   25868:	a904      	add	r1, sp, #16
		if (tc_cmac_update(&state->state, (uint8_t *)&value,
   2586a:	4620      	mov	r0, r4
   2586c:	f7fe fc7f 	bl	2416e <tc_cmac_update>
   25870:	2800      	cmp	r0, #0
   25872:	d1b1      	bne.n	257d8 <gen_hash_m+0xe>
   25874:	e7c4      	b.n	25800 <gen_hash_m+0x36>

00025876 <atomic_or>:
{
   25876:	4603      	mov	r3, r0
}
   25878:	f3bf 8f5b 	dmb	ish
   2587c:	e853 0f00 	ldrex	r0, [r3]
   25880:	ea40 0201 	orr.w	r2, r0, r1
   25884:	e843 2c00 	strex	ip, r2, [r3]
   25888:	f1bc 0f00 	cmp.w	ip, #0
   2588c:	d1f6      	bne.n	2587c <atomic_or+0x6>
   2588e:	f3bf 8f5b 	dmb	ish
   25892:	4770      	bx	lr

00025894 <clear_cf_cfg>:
{
   25894:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25896:	4604      	mov	r4, r0
	bt_addr_le_copy(&cfg->peer, BT_ADDR_LE_ANY);
   25898:	2500      	movs	r5, #0
   2589a:	4669      	mov	r1, sp
   2589c:	3001      	adds	r0, #1
   2589e:	9500      	str	r5, [sp, #0]
   258a0:	f8cd 5003 	str.w	r5, [sp, #3]
   258a4:	f7ff ff60 	bl	25768 <bt_addr_le_copy>
	memset(cfg->data, 0, sizeof(cfg->data));
   258a8:	f104 0008 	add.w	r0, r4, #8
   258ac:	2201      	movs	r2, #1
   258ae:	4629      	mov	r1, r5
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   258b0:	340c      	adds	r4, #12
   258b2:	f7fe fe04 	bl	244be <memset>
   258b6:	f3bf 8f5b 	dmb	ish
   258ba:	e854 3f00 	ldrex	r3, [r4]
   258be:	e844 5200 	strex	r2, r5, [r4]
   258c2:	2a00      	cmp	r2, #0
   258c4:	d1f9      	bne.n	258ba <clear_cf_cfg+0x26>
   258c6:	f3bf 8f5b 	dmb	ish
}
   258ca:	b003      	add	sp, #12
   258cc:	bd30      	pop	{r4, r5, pc}

000258ce <atomic_and.isra.0>:
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   258ce:	f3bf 8f5b 	dmb	ish
   258d2:	e850 3f00 	ldrex	r3, [r0]
   258d6:	400b      	ands	r3, r1
   258d8:	e840 3200 	strex	r2, r3, [r0]
   258dc:	2a00      	cmp	r2, #0
   258de:	d1f8      	bne.n	258d2 <atomic_and.isra.0+0x4>
   258e0:	f3bf 8f5b 	dmb	ish
}
   258e4:	4770      	bx	lr

000258e6 <read_ppcp>:
{
   258e6:	b513      	push	{r0, r1, r4, lr}
   258e8:	4610      	mov	r0, r2
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   258ea:	2218      	movs	r2, #24
{
   258ec:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	ppcp.min_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MIN_INT);
   258f0:	f8ad 2000 	strh.w	r2, [sp]
	ppcp.max_int = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_MAX_INT);
   258f4:	2228      	movs	r2, #40	; 0x28
   258f6:	f8ad 2002 	strh.w	r2, [sp, #2]
	ppcp.latency = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_SLAVE_LATENCY);
   258fa:	2200      	movs	r2, #0
   258fc:	f8ad 2004 	strh.w	r2, [sp, #4]
	if (offset > value_len) {
   25900:	2908      	cmp	r1, #8
	ppcp.timeout = sys_cpu_to_le16(CONFIG_BT_PERIPHERAL_PREF_TIMEOUT);
   25902:	f04f 022a 	mov.w	r2, #42	; 0x2a
   25906:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2590a:	d80b      	bhi.n	25924 <read_ppcp+0x3e>
	len = MIN(buf_len, value_len - offset);
   2590c:	f1c1 0408 	rsb	r4, r1, #8
   25910:	429c      	cmp	r4, r3
   25912:	bfa8      	it	ge
   25914:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25916:	4622      	mov	r2, r4
   25918:	4469      	add	r1, sp
   2591a:	f7fe fda5 	bl	24468 <memcpy>
}
   2591e:	4620      	mov	r0, r4
   25920:	b002      	add	sp, #8
   25922:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25924:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &ppcp,
   25928:	e7f9      	b.n	2591e <read_ppcp+0x38>

0002592a <read_appearance>:
{
   2592a:	b513      	push	{r0, r1, r4, lr}
   2592c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   25930:	4610      	mov	r0, r2
	if (offset > value_len) {
   25932:	2902      	cmp	r1, #2
	uint16_t appearance = sys_cpu_to_le16(gap_appearance);
   25934:	f240 3241 	movw	r2, #833	; 0x341
   25938:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   2593c:	d80d      	bhi.n	2595a <read_appearance+0x30>
	len = MIN(buf_len, value_len - offset);
   2593e:	f1c1 0402 	rsb	r4, r1, #2
   25942:	429c      	cmp	r4, r3
   25944:	bfa8      	it	ge
   25946:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25948:	f10d 0306 	add.w	r3, sp, #6
   2594c:	4622      	mov	r2, r4
   2594e:	4419      	add	r1, r3
   25950:	f7fe fd8a 	bl	24468 <memcpy>
}
   25954:	4620      	mov	r0, r4
   25956:	b002      	add	sp, #8
   25958:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   2595a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
   2595e:	e7f9      	b.n	25954 <read_appearance+0x2a>

00025960 <read_name>:
{
   25960:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   25964:	4698      	mov	r8, r3
   25966:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   2596a:	4615      	mov	r5, r2
	const char *name = bt_get_name();
   2596c:	f7e4 ff22 	bl	a7b4 <bt_get_name>
   25970:	4607      	mov	r7, r0
				 strlen(name));
   25972:	f7fe fd3b 	bl	243ec <strlen>
	if (offset > value_len) {
   25976:	b283      	uxth	r3, r0
   25978:	42b3      	cmp	r3, r6
   2597a:	d30c      	bcc.n	25996 <read_name+0x36>
	len = MIN(buf_len, value_len - offset);
   2597c:	1b9c      	subs	r4, r3, r6
   2597e:	4544      	cmp	r4, r8
   25980:	bfa8      	it	ge
   25982:	4644      	movge	r4, r8
   25984:	b2a4      	uxth	r4, r4
	memcpy(buf, (uint8_t *)value + offset, len);
   25986:	4622      	mov	r2, r4
   25988:	19b9      	adds	r1, r7, r6
   2598a:	4628      	mov	r0, r5
   2598c:	f7fe fd6c 	bl	24468 <memcpy>
}
   25990:	4620      	mov	r0, r4
   25992:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25996:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, name,
   2599a:	e7f9      	b.n	25990 <read_name+0x30>

0002599c <cf_read>:
{
   2599c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   2599e:	461f      	mov	r7, r3
	uint8_t data[1] = {};
   259a0:	2300      	movs	r3, #0
{
   259a2:	f8bd 6020 	ldrh.w	r6, [sp, #32]
	uint8_t data[1] = {};
   259a6:	f88d 3004 	strb.w	r3, [sp, #4]
{
   259aa:	4615      	mov	r5, r2
	cfg = find_cf_cfg(conn);
   259ac:	f7e7 fbfe 	bl	d1ac <find_cf_cfg>
	if (cfg) {
   259b0:	b128      	cbz	r0, 259be <cf_read+0x22>
		memcpy(data, cfg->data, sizeof(data));
   259b2:	f100 0108 	add.w	r1, r0, #8
   259b6:	2201      	movs	r2, #1
   259b8:	a801      	add	r0, sp, #4
   259ba:	f7fe fd55 	bl	24468 <memcpy>
	if (offset > value_len) {
   259be:	2e01      	cmp	r6, #1
   259c0:	d80d      	bhi.n	259de <cf_read+0x42>
	len = MIN(buf_len, value_len - offset);
   259c2:	f1c6 0401 	rsb	r4, r6, #1
   259c6:	42bc      	cmp	r4, r7
   259c8:	bfa8      	it	ge
   259ca:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   259cc:	ab01      	add	r3, sp, #4
   259ce:	4622      	mov	r2, r4
   259d0:	1999      	adds	r1, r3, r6
   259d2:	4628      	mov	r0, r5
   259d4:	f7fe fd48 	bl	24468 <memcpy>
}
   259d8:	4620      	mov	r0, r4
   259da:	b003      	add	sp, #12
   259dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   259de:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, data,
   259e2:	e7f9      	b.n	259d8 <cf_read+0x3c>

000259e4 <bt_gatt_attr_read_service>:
{
   259e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
	struct bt_uuid *uuid = attr->user_data;
   259e6:	68c9      	ldr	r1, [r1, #12]
{
   259e8:	f8bd 5018 	ldrh.w	r5, [sp, #24]
   259ec:	461c      	mov	r4, r3
	if (uuid->type == BT_UUID_TYPE_16) {
   259ee:	780b      	ldrb	r3, [r1, #0]
{
   259f0:	4610      	mov	r0, r2
	if (uuid->type == BT_UUID_TYPE_16) {
   259f2:	b993      	cbnz	r3, 25a1a <bt_gatt_attr_read_service+0x36>
		uint16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
   259f4:	884b      	ldrh	r3, [r1, #2]
   259f6:	f8ad 3006 	strh.w	r3, [sp, #6]
	if (offset > value_len) {
   259fa:	2d02      	cmp	r5, #2
   259fc:	d819      	bhi.n	25a32 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   259fe:	f1c5 0202 	rsb	r2, r5, #2
   25a02:	4294      	cmp	r4, r2
   25a04:	bfa8      	it	ge
   25a06:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25a08:	f10d 0306 	add.w	r3, sp, #6
   25a0c:	4622      	mov	r2, r4
   25a0e:	1959      	adds	r1, r3, r5
   25a10:	f7fe fd2a 	bl	24468 <memcpy>
}
   25a14:	4620      	mov	r0, r4
   25a16:	b003      	add	sp, #12
   25a18:	bd30      	pop	{r4, r5, pc}
	if (offset > value_len) {
   25a1a:	2d10      	cmp	r5, #16
				 BT_UUID_128(uuid)->val, 16);
   25a1c:	f101 0101 	add.w	r1, r1, #1
	if (offset > value_len) {
   25a20:	d807      	bhi.n	25a32 <bt_gatt_attr_read_service+0x4e>
	len = MIN(buf_len, value_len - offset);
   25a22:	f1c5 0210 	rsb	r2, r5, #16
   25a26:	4294      	cmp	r4, r2
   25a28:	bfa8      	it	ge
   25a2a:	4614      	movge	r4, r2
	memcpy(buf, (uint8_t *)value + offset, len);
   25a2c:	4622      	mov	r2, r4
   25a2e:	4429      	add	r1, r5
   25a30:	e7ee      	b.n	25a10 <bt_gatt_attr_read_service+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25a32:	f06f 0406 	mvn.w	r4, #6
   25a36:	e7ed      	b.n	25a14 <bt_gatt_attr_read_service+0x30>

00025a38 <ccc_find_cfg>:
{
   25a38:	b510      	push	{r4, lr}
		if (id == ccc->cfg[i].id &&
   25a3a:	7803      	ldrb	r3, [r0, #0]
   25a3c:	4293      	cmp	r3, r2
{
   25a3e:	4604      	mov	r4, r0
		if (id == ccc->cfg[i].id &&
   25a40:	d001      	beq.n	25a46 <ccc_find_cfg+0xe>
	return NULL;
   25a42:	2000      	movs	r0, #0
}
   25a44:	bd10      	pop	{r4, pc}
	return memcmp(a, b, sizeof(*a));
   25a46:	2207      	movs	r2, #7
   25a48:	3001      	adds	r0, #1
   25a4a:	f7fe fcfc 	bl	24446 <memcmp>
		if (id == ccc->cfg[i].id &&
   25a4e:	2800      	cmp	r0, #0
   25a50:	d1f7      	bne.n	25a42 <ccc_find_cfg+0xa>
			return &ccc->cfg[i];
   25a52:	4620      	mov	r0, r4
   25a54:	e7f6      	b.n	25a44 <ccc_find_cfg+0xc>

00025a56 <find_ccc_cfg>:
{
   25a56:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25a58:	460c      	mov	r4, r1
						    &cfg->peer)) {
   25a5a:	1c4d      	adds	r5, r1, #1
		if (conn) {
   25a5c:	b148      	cbz	r0, 25a72 <find_ccc_cfg+0x1c>
			if (bt_conn_is_peer_addr_le(conn, cfg->id,
   25a5e:	7809      	ldrb	r1, [r1, #0]
   25a60:	462a      	mov	r2, r5
   25a62:	f7ff f8fe 	bl	24c62 <bt_conn_is_peer_addr_le>
	return NULL;
   25a66:	2800      	cmp	r0, #0
   25a68:	bf08      	it	eq
   25a6a:	2400      	moveq	r4, #0
}
   25a6c:	4620      	mov	r0, r4
   25a6e:	b003      	add	sp, #12
   25a70:	bd30      	pop	{r4, r5, pc}
		} else if (!bt_addr_le_cmp(&cfg->peer, BT_ADDR_LE_ANY)) {
   25a72:	9000      	str	r0, [sp, #0]
   25a74:	2207      	movs	r2, #7
   25a76:	f8cd 0003 	str.w	r0, [sp, #3]
   25a7a:	4669      	mov	r1, sp
   25a7c:	4628      	mov	r0, r5
   25a7e:	f7fe fce2 	bl	24446 <memcmp>
	return NULL;
   25a82:	2800      	cmp	r0, #0
   25a84:	bf18      	it	ne
   25a86:	2400      	movne	r4, #0
   25a88:	e7f0      	b.n	25a6c <find_ccc_cfg+0x16>

00025a8a <bt_gatt_attr_read_ccc>:
{
   25a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	cfg = find_ccc_cfg(conn, ccc);
   25a8c:	68c9      	ldr	r1, [r1, #12]
{
   25a8e:	f8bd 6020 	ldrh.w	r6, [sp, #32]
   25a92:	4615      	mov	r5, r2
   25a94:	461f      	mov	r7, r3
	cfg = find_ccc_cfg(conn, ccc);
   25a96:	f7ff ffde 	bl	25a56 <find_ccc_cfg>
	if (cfg) {
   25a9a:	b100      	cbz	r0, 25a9e <bt_gatt_attr_read_ccc+0x14>
		value = sys_cpu_to_le16(cfg->value);
   25a9c:	8900      	ldrh	r0, [r0, #8]
   25a9e:	f8ad 0006 	strh.w	r0, [sp, #6]
	if (offset > value_len) {
   25aa2:	2e02      	cmp	r6, #2
   25aa4:	d80e      	bhi.n	25ac4 <bt_gatt_attr_read_ccc+0x3a>
	len = MIN(buf_len, value_len - offset);
   25aa6:	f1c6 0402 	rsb	r4, r6, #2
   25aaa:	42bc      	cmp	r4, r7
   25aac:	bfa8      	it	ge
   25aae:	463c      	movge	r4, r7
	memcpy(buf, (uint8_t *)value + offset, len);
   25ab0:	f10d 0306 	add.w	r3, sp, #6
   25ab4:	4622      	mov	r2, r4
   25ab6:	1999      	adds	r1, r3, r6
   25ab8:	4628      	mov	r0, r5
   25aba:	f7fe fcd5 	bl	24468 <memcpy>
}
   25abe:	4620      	mov	r0, r4
   25ac0:	b003      	add	sp, #12
   25ac2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25ac4:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
   25ac8:	e7f9      	b.n	25abe <bt_gatt_attr_read_ccc+0x34>

00025aca <sc_ccc_cfg_write>:
	if (value == BT_GATT_CCC_INDICATE) {
   25aca:	2a02      	cmp	r2, #2
{
   25acc:	b510      	push	{r4, lr}
	if (value == BT_GATT_CCC_INDICATE) {
   25ace:	d108      	bne.n	25ae2 <sc_ccc_cfg_write+0x18>
		sc_save(conn->id, &conn->le.dst, 0, 0);
   25ad0:	2300      	movs	r3, #0
   25ad2:	f100 0188 	add.w	r1, r0, #136	; 0x88
   25ad6:	461a      	mov	r2, r3
   25ad8:	7a00      	ldrb	r0, [r0, #8]
   25ada:	f7e7 fe47 	bl	d76c <sc_save>
}
   25ade:	2002      	movs	r0, #2
   25ae0:	bd10      	pop	{r4, pc}
		sc_clear(conn);
   25ae2:	f7e7 ff31 	bl	d948 <sc_clear>
   25ae6:	e7fa      	b.n	25ade <sc_ccc_cfg_write+0x14>

00025ae8 <sc_restore_rsp>:
{
   25ae8:	b508      	push	{r3, lr}
	cfg = find_cf_cfg(conn);
   25aea:	f7e7 fb5f 	bl	d1ac <find_cf_cfg>
	if (cfg && CF_ROBUST_CACHING(cfg)) {
   25aee:	b140      	cbz	r0, 25b02 <sc_restore_rsp+0x1a>
   25af0:	7a03      	ldrb	r3, [r0, #8]
   25af2:	07db      	lsls	r3, r3, #31
   25af4:	d505      	bpl.n	25b02 <sc_restore_rsp+0x1a>
}
   25af6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25afa:	2101      	movs	r1, #1
   25afc:	300c      	adds	r0, #12
   25afe:	f7ff beba 	b.w	25876 <atomic_or>
   25b02:	bd08      	pop	{r3, pc}

00025b04 <bt_gatt_attr_read>:
{
   25b04:	b538      	push	{r3, r4, r5, lr}
   25b06:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   25b0a:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	if (offset > value_len) {
   25b0e:	42a9      	cmp	r1, r5
{
   25b10:	4610      	mov	r0, r2
	if (offset > value_len) {
   25b12:	d80b      	bhi.n	25b2c <bt_gatt_attr_read+0x28>
	len = MIN(buf_len, value_len - offset);
   25b14:	1a6d      	subs	r5, r5, r1
   25b16:	429d      	cmp	r5, r3
   25b18:	bfa8      	it	ge
   25b1a:	461d      	movge	r5, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25b1c:	9b05      	ldr	r3, [sp, #20]
   25b1e:	b2ad      	uxth	r5, r5
   25b20:	462a      	mov	r2, r5
   25b22:	4419      	add	r1, r3
   25b24:	f7fe fca0 	bl	24468 <memcpy>
}
   25b28:	4628      	mov	r0, r5
   25b2a:	bd38      	pop	{r3, r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25b2c:	f06f 0506 	mvn.w	r5, #6
   25b30:	e7fa      	b.n	25b28 <bt_gatt_attr_read+0x24>

00025b32 <bt_gatt_attr_value_handle>:
{
   25b32:	b513      	push	{r0, r1, r4, lr}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25b34:	4604      	mov	r4, r0
   25b36:	b910      	cbnz	r0, 25b3e <bt_gatt_attr_value_handle+0xc>
	uint16_t handle = 0;
   25b38:	2000      	movs	r0, #0
}
   25b3a:	b002      	add	sp, #8
   25b3c:	bd10      	pop	{r4, pc}
	if (attr != NULL && bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC) == 0) {
   25b3e:	2300      	movs	r3, #0
   25b40:	f88d 3004 	strb.w	r3, [sp, #4]
   25b44:	6800      	ldr	r0, [r0, #0]
   25b46:	f642 0303 	movw	r3, #10243	; 0x2803
   25b4a:	a901      	add	r1, sp, #4
   25b4c:	f8ad 3006 	strh.w	r3, [sp, #6]
   25b50:	f7fe fdaa 	bl	246a8 <bt_uuid_cmp>
   25b54:	2800      	cmp	r0, #0
   25b56:	d1ef      	bne.n	25b38 <bt_gatt_attr_value_handle+0x6>
		handle = chrc->value_handle;
   25b58:	68e3      	ldr	r3, [r4, #12]
   25b5a:	8898      	ldrh	r0, [r3, #4]
		if (handle == 0) {
   25b5c:	2800      	cmp	r0, #0
   25b5e:	d1ec      	bne.n	25b3a <bt_gatt_attr_value_handle+0x8>
			handle = bt_gatt_attr_get_handle(attr) + 1U;
   25b60:	4620      	mov	r0, r4
   25b62:	f7e8 f891 	bl	dc88 <bt_gatt_attr_get_handle>
   25b66:	3001      	adds	r0, #1
   25b68:	b280      	uxth	r0, r0
	return handle;
   25b6a:	e7e6      	b.n	25b3a <bt_gatt_attr_value_handle+0x8>

00025b6c <bt_gatt_attr_read_chrc>:
{
   25b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
	struct bt_gatt_chrc *chrc = attr->user_data;
   25b6e:	68cf      	ldr	r7, [r1, #12]
{
   25b70:	b087      	sub	sp, #28
   25b72:	4608      	mov	r0, r1
   25b74:	461c      	mov	r4, r3
	pdu.properties = chrc->properties;
   25b76:	79bb      	ldrb	r3, [r7, #6]
   25b78:	f88d 3004 	strb.w	r3, [sp, #4]
{
   25b7c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   25b80:	4615      	mov	r5, r2
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25b82:	f7ff ffd6 	bl	25b32 <bt_gatt_attr_value_handle>
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25b86:	6839      	ldr	r1, [r7, #0]
	pdu.value_handle = sys_cpu_to_le16(bt_gatt_attr_value_handle(attr));
   25b88:	f8ad 0005 	strh.w	r0, [sp, #5]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
   25b8c:	780b      	ldrb	r3, [r1, #0]
   25b8e:	b99b      	cbnz	r3, 25bb8 <bt_gatt_attr_read_chrc+0x4c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
   25b90:	884b      	ldrh	r3, [r1, #2]
   25b92:	f8ad 3007 	strh.w	r3, [sp, #7]
		value_len += 2U;
   25b96:	2105      	movs	r1, #5
	if (offset > value_len) {
   25b98:	42b1      	cmp	r1, r6
   25b9a:	d315      	bcc.n	25bc8 <bt_gatt_attr_read_chrc+0x5c>
	len = MIN(buf_len, value_len - offset);
   25b9c:	1b89      	subs	r1, r1, r6
   25b9e:	42a1      	cmp	r1, r4
   25ba0:	bfa8      	it	ge
   25ba2:	4621      	movge	r1, r4
   25ba4:	b28c      	uxth	r4, r1
	memcpy(buf, (uint8_t *)value + offset, len);
   25ba6:	ab01      	add	r3, sp, #4
   25ba8:	4622      	mov	r2, r4
   25baa:	1999      	adds	r1, r3, r6
   25bac:	4628      	mov	r0, r5
   25bae:	f7fe fc5b 	bl	24468 <memcpy>
}
   25bb2:	4620      	mov	r0, r4
   25bb4:	b007      	add	sp, #28
   25bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
   25bb8:	3101      	adds	r1, #1
   25bba:	2210      	movs	r2, #16
   25bbc:	f10d 0007 	add.w	r0, sp, #7
   25bc0:	f7fe fc52 	bl	24468 <memcpy>
		value_len += 16U;
   25bc4:	2113      	movs	r1, #19
   25bc6:	e7e7      	b.n	25b98 <bt_gatt_attr_read_chrc+0x2c>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25bc8:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
   25bcc:	e7f1      	b.n	25bb2 <bt_gatt_attr_read_chrc+0x46>

00025bce <bt_gatt_foreach_attr>:
{
   25bce:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	bt_gatt_foreach_attr_type(start_handle, end_handle, NULL, NULL, 0, func,
   25bd0:	e9cd 2301 	strd	r2, r3, [sp, #4]
   25bd4:	2300      	movs	r3, #0
   25bd6:	9300      	str	r3, [sp, #0]
   25bd8:	461a      	mov	r2, r3
   25bda:	f7e8 f885 	bl	dce8 <bt_gatt_foreach_attr_type>
}
   25bde:	b005      	add	sp, #20
   25be0:	f85d fb04 	ldr.w	pc, [sp], #4

00025be4 <db_hash_process>:
	db_hash_gen(true);
   25be4:	2001      	movs	r0, #1
   25be6:	f7e8 b8d9 	b.w	dd9c <db_hash_gen>

00025bea <bt_gatt_attr_read_cep>:
{
   25bea:	b537      	push	{r0, r1, r2, r4, r5, lr}
   25bec:	4610      	mov	r0, r2
   25bee:	f8bd 5018 	ldrh.w	r5, [sp, #24]
	uint16_t props = sys_cpu_to_le16(value->properties);
   25bf2:	68ca      	ldr	r2, [r1, #12]
	if (offset > value_len) {
   25bf4:	2d02      	cmp	r5, #2
	uint16_t props = sys_cpu_to_le16(value->properties);
   25bf6:	8812      	ldrh	r2, [r2, #0]
   25bf8:	f8ad 2006 	strh.w	r2, [sp, #6]
	if (offset > value_len) {
   25bfc:	d80d      	bhi.n	25c1a <bt_gatt_attr_read_cep+0x30>
	len = MIN(buf_len, value_len - offset);
   25bfe:	f1c5 0402 	rsb	r4, r5, #2
   25c02:	429c      	cmp	r4, r3
   25c04:	bfa8      	it	ge
   25c06:	461c      	movge	r4, r3
	memcpy(buf, (uint8_t *)value + offset, len);
   25c08:	f10d 0306 	add.w	r3, sp, #6
   25c0c:	4622      	mov	r2, r4
   25c0e:	1959      	adds	r1, r3, r5
   25c10:	f7fe fc2a 	bl	24468 <memcpy>
}
   25c14:	4620      	mov	r0, r4
   25c16:	b003      	add	sp, #12
   25c18:	bd30      	pop	{r4, r5, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
   25c1a:	f06f 0406 	mvn.w	r4, #6
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &props,
   25c1e:	e7f9      	b.n	25c14 <bt_gatt_attr_read_cep+0x2a>

00025c20 <bt_gatt_check_perm>:
{
   25c20:	b538      	push	{r3, r4, r5, lr}
	if ((mask & BT_GATT_PERM_READ) &&
   25c22:	07d4      	lsls	r4, r2, #31
{
   25c24:	4605      	mov	r5, r0
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25c26:	7c88      	ldrb	r0, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
   25c28:	d504      	bpl.n	25c34 <bt_gatt_check_perm+0x14>
   25c2a:	f010 0f15 	tst.w	r0, #21
   25c2e:	d01e      	beq.n	25c6e <bt_gatt_check_perm+0x4e>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
   25c30:	684b      	ldr	r3, [r1, #4]
   25c32:	b1e3      	cbz	r3, 25c6e <bt_gatt_check_perm+0x4e>
	if ((mask & BT_GATT_PERM_WRITE) &&
   25c34:	0793      	lsls	r3, r2, #30
   25c36:	d504      	bpl.n	25c42 <bt_gatt_check_perm+0x22>
   25c38:	f010 0f2a 	tst.w	r0, #42	; 0x2a
   25c3c:	d019      	beq.n	25c72 <bt_gatt_check_perm+0x52>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
   25c3e:	688b      	ldr	r3, [r1, #8]
   25c40:	b1bb      	cbz	r3, 25c72 <bt_gatt_check_perm+0x52>
	mask &= attr->perm;
   25c42:	ea02 0400 	and.w	r4, r2, r0
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
   25c46:	f014 0f30 	tst.w	r4, #48	; 0x30
   25c4a:	d103      	bne.n	25c54 <bt_gatt_check_perm+0x34>
	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
   25c4c:	f014 000c 	ands.w	r0, r4, #12
   25c50:	d107      	bne.n	25c62 <bt_gatt_check_perm+0x42>
}
   25c52:	bd38      	pop	{r3, r4, r5, pc}
		if (bt_conn_get_security(conn) < BT_SECURITY_L3) {
   25c54:	4628      	mov	r0, r5
   25c56:	f7fe fff9 	bl	24c4c <bt_conn_get_security>
   25c5a:	2802      	cmp	r0, #2
   25c5c:	d8f6      	bhi.n	25c4c <bt_gatt_check_perm+0x2c>
			return BT_ATT_ERR_AUTHENTICATION;
   25c5e:	2005      	movs	r0, #5
   25c60:	e7f7      	b.n	25c52 <bt_gatt_check_perm+0x32>
		if (!conn->encrypt) {
   25c62:	7aeb      	ldrb	r3, [r5, #11]
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
   25c64:	2b00      	cmp	r3, #0
   25c66:	bf14      	ite	ne
   25c68:	2000      	movne	r0, #0
   25c6a:	200f      	moveq	r0, #15
   25c6c:	e7f1      	b.n	25c52 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
   25c6e:	2002      	movs	r0, #2
   25c70:	e7ef      	b.n	25c52 <bt_gatt_check_perm+0x32>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
   25c72:	2003      	movs	r0, #3
   25c74:	e7ed      	b.n	25c52 <bt_gatt_check_perm+0x32>

00025c76 <bt_gatt_change_aware>:
{
   25c76:	b510      	push	{r4, lr}
   25c78:	460c      	mov	r4, r1
	cfg = find_cf_cfg(conn);
   25c7a:	f7e7 fa97 	bl	d1ac <find_cf_cfg>
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25c7e:	4603      	mov	r3, r0
   25c80:	b910      	cbnz	r0, 25c88 <bt_gatt_change_aware+0x12>
		return true;
   25c82:	2401      	movs	r4, #1
}
   25c84:	4620      	mov	r0, r4
   25c86:	bd10      	pop	{r4, pc}
	if (!cfg || !CF_ROBUST_CACHING(cfg)) {
   25c88:	7a02      	ldrb	r2, [r0, #8]
   25c8a:	07d1      	lsls	r1, r2, #31
   25c8c:	d5f9      	bpl.n	25c82 <bt_gatt_change_aware+0xc>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25c8e:	f3bf 8f5b 	dmb	ish
   25c92:	68da      	ldr	r2, [r3, #12]
   25c94:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(cfg->flags, CF_CHANGE_AWARE)) {
   25c98:	07d2      	lsls	r2, r2, #31
   25c9a:	f100 000c 	add.w	r0, r0, #12
   25c9e:	d4f0      	bmi.n	25c82 <bt_gatt_change_aware+0xc>
	if (!req) {
   25ca0:	2c00      	cmp	r4, #0
   25ca2:	d0ef      	beq.n	25c84 <bt_gatt_change_aware+0xe>
   25ca4:	f3bf 8f5b 	dmb	ish
   25ca8:	68db      	ldr	r3, [r3, #12]
   25caa:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25cae:	f3c3 0440 	ubfx	r4, r3, #1, #1
	if (atomic_test_bit(cfg->flags, CF_OUT_OF_SYNC)) {
   25cb2:	079b      	lsls	r3, r3, #30
   25cb4:	d507      	bpl.n	25cc6 <bt_gatt_change_aware+0x50>
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25cb6:	f06f 0102 	mvn.w	r1, #2
   25cba:	f7ff fe08 	bl	258ce <atomic_and.isra.0>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25cbe:	2101      	movs	r1, #1
   25cc0:	f7ff fdd9 	bl	25876 <atomic_or>
}
   25cc4:	e7de      	b.n	25c84 <bt_gatt_change_aware+0xe>
	(void)atomic_or(ATOMIC_ELEM(target, bit), mask);
   25cc6:	2102      	movs	r1, #2
   25cc8:	e7fa      	b.n	25cc0 <bt_gatt_change_aware+0x4a>

00025cca <sys_memcpy_swap>:
	psrc += length - 1;
   25cca:	1e53      	subs	r3, r2, #1
   25ccc:	4419      	add	r1, r3
	for (; length > 0; length--) {
   25cce:	4402      	add	r2, r0
		*pdst++ = *psrc--;
   25cd0:	f811 3901 	ldrb.w	r3, [r1], #-1
   25cd4:	f800 3b01 	strb.w	r3, [r0], #1
	for (; length > 0; length--) {
   25cd8:	4290      	cmp	r0, r2
   25cda:	d1f9      	bne.n	25cd0 <sys_memcpy_swap+0x6>
}
   25cdc:	4770      	bx	lr

00025cde <sys_mem_swap>:
{
   25cde:	b510      	push	{r4, lr}
   25ce0:	1843      	adds	r3, r0, r1
   25ce2:	eb00 0151 	add.w	r1, r0, r1, lsr #1
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   25ce6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
		uint8_t tmp = ((uint8_t *)buf)[i];
   25cea:	7802      	ldrb	r2, [r0, #0]
		((uint8_t *)buf)[i] = ((uint8_t *)buf)[length - 1 - i];
   25cec:	f800 4b01 	strb.w	r4, [r0], #1
	for (i = 0; i < (length/2); i++) {
   25cf0:	4288      	cmp	r0, r1
		((uint8_t *)buf)[length - 1 - i] = tmp;
   25cf2:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < (length/2); i++) {
   25cf4:	d1f7      	bne.n	25ce6 <sys_mem_swap+0x8>
	}
}
   25cf6:	bd10      	pop	{r4, pc}

00025cf8 <smp_pairing_rsp>:
}
   25cf8:	2007      	movs	r0, #7
   25cfa:	4770      	bx	lr

00025cfc <bt_smp_aes_cmac>:
{
   25cfc:	b570      	push	{r4, r5, r6, lr}
   25cfe:	b0c2      	sub	sp, #264	; 0x108
   25d00:	460d      	mov	r5, r1
   25d02:	4616      	mov	r6, r2
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25d04:	4601      	mov	r1, r0
   25d06:	aa16      	add	r2, sp, #88	; 0x58
   25d08:	4668      	mov	r0, sp
{
   25d0a:	461c      	mov	r4, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
   25d0c:	f7fe fa04 	bl	24118 <tc_cmac_setup>
   25d10:	b150      	cbz	r0, 25d28 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
   25d12:	4632      	mov	r2, r6
   25d14:	4629      	mov	r1, r5
   25d16:	4668      	mov	r0, sp
   25d18:	f7fe fa29 	bl	2416e <tc_cmac_update>
   25d1c:	b120      	cbz	r0, 25d28 <bt_smp_aes_cmac+0x2c>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
   25d1e:	4669      	mov	r1, sp
   25d20:	4620      	mov	r0, r4
   25d22:	f7fe fa8f 	bl	24244 <tc_cmac_final>
   25d26:	b918      	cbnz	r0, 25d30 <bt_smp_aes_cmac+0x34>
		return -EIO;
   25d28:	f06f 0004 	mvn.w	r0, #4
}
   25d2c:	b042      	add	sp, #264	; 0x108
   25d2e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   25d30:	2000      	movs	r0, #0
   25d32:	e7fb      	b.n	25d2c <bt_smp_aes_cmac+0x30>

00025d34 <smp_f4>:
{
   25d34:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d36:	b097      	sub	sp, #92	; 0x5c
   25d38:	4614      	mov	r4, r2
   25d3a:	460e      	mov	r6, r1
	sys_memcpy_swap(m, u, 32);
   25d3c:	2220      	movs	r2, #32
   25d3e:	4601      	mov	r1, r0
   25d40:	a805      	add	r0, sp, #20
{
   25d42:	461d      	mov	r5, r3
   25d44:	9f1c      	ldr	r7, [sp, #112]	; 0x70
	sys_memcpy_swap(m, u, 32);
   25d46:	f7ff ffc0 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, v, 32);
   25d4a:	2220      	movs	r2, #32
   25d4c:	4631      	mov	r1, r6
   25d4e:	a80d      	add	r0, sp, #52	; 0x34
   25d50:	f7ff ffbb 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(xs, x, 16);
   25d54:	4621      	mov	r1, r4
   25d56:	2210      	movs	r2, #16
   25d58:	a801      	add	r0, sp, #4
	m[64] = z;
   25d5a:	f88d 5054 	strb.w	r5, [sp, #84]	; 0x54
	sys_memcpy_swap(xs, x, 16);
   25d5e:	f7ff ffb4 	bl	25cca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
   25d62:	463b      	mov	r3, r7
   25d64:	2241      	movs	r2, #65	; 0x41
   25d66:	a905      	add	r1, sp, #20
   25d68:	a801      	add	r0, sp, #4
   25d6a:	f7ff ffc7 	bl	25cfc <bt_smp_aes_cmac>
	if (err) {
   25d6e:	4604      	mov	r4, r0
   25d70:	b918      	cbnz	r0, 25d7a <smp_f4+0x46>
	sys_mem_swap(res, 16);
   25d72:	2110      	movs	r1, #16
   25d74:	4638      	mov	r0, r7
   25d76:	f7ff ffb2 	bl	25cde <sys_mem_swap>
}
   25d7a:	4620      	mov	r0, r4
   25d7c:	b017      	add	sp, #92	; 0x5c
   25d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025d80 <smp_f6>:
{
   25d80:	b5f0      	push	{r4, r5, r6, r7, lr}
   25d82:	b097      	sub	sp, #92	; 0x5c
   25d84:	4605      	mov	r5, r0
   25d86:	4616      	mov	r6, r2
	sys_memcpy_swap(m, n1, 16);
   25d88:	a805      	add	r0, sp, #20
   25d8a:	2210      	movs	r2, #16
{
   25d8c:	461c      	mov	r4, r3
   25d8e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	sys_memcpy_swap(m, n1, 16);
   25d90:	f7ff ff9b 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(m + 16, n2, 16);
   25d94:	2210      	movs	r2, #16
   25d96:	4631      	mov	r1, r6
   25d98:	a809      	add	r0, sp, #36	; 0x24
   25d9a:	f7ff ff96 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(m + 32, r, 16);
   25d9e:	4621      	mov	r1, r4
   25da0:	2210      	movs	r2, #16
   25da2:	a80d      	add	r0, sp, #52	; 0x34
   25da4:	f7ff ff91 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(m + 48, iocap, 3);
   25da8:	991c      	ldr	r1, [sp, #112]	; 0x70
   25daa:	2203      	movs	r2, #3
   25dac:	a811      	add	r0, sp, #68	; 0x44
   25dae:	f7ff ff8c 	bl	25cca <sys_memcpy_swap>
	m[51] = a1->type;
   25db2:	9c1d      	ldr	r4, [sp, #116]	; 0x74
   25db4:	f814 3b01 	ldrb.w	r3, [r4], #1
   25db8:	f88d 3047 	strb.w	r3, [sp, #71]	; 0x47
	memcpy(m + 52, a1->a.val, 6);
   25dbc:	4621      	mov	r1, r4
   25dbe:	2206      	movs	r2, #6
   25dc0:	a812      	add	r0, sp, #72	; 0x48
   25dc2:	f7fe fb51 	bl	24468 <memcpy>
	sys_memcpy_swap(m + 52, a1->a.val, 6);
   25dc6:	4621      	mov	r1, r4
   25dc8:	2206      	movs	r2, #6
   25dca:	a812      	add	r0, sp, #72	; 0x48
   25dcc:	f7ff ff7d 	bl	25cca <sys_memcpy_swap>
	m[58] = a2->type;
   25dd0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
   25dd2:	f814 3b01 	ldrb.w	r3, [r4], #1
   25dd6:	f88d 304e 	strb.w	r3, [sp, #78]	; 0x4e
	memcpy(m + 59, a2->a.val, 6);
   25dda:	4621      	mov	r1, r4
   25ddc:	2206      	movs	r2, #6
   25dde:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   25de2:	f7fe fb41 	bl	24468 <memcpy>
	sys_memcpy_swap(m + 59, a2->a.val, 6);
   25de6:	4621      	mov	r1, r4
   25de8:	2206      	movs	r2, #6
   25dea:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
   25dee:	f7ff ff6c 	bl	25cca <sys_memcpy_swap>
	sys_memcpy_swap(ws, w, 16);
   25df2:	2210      	movs	r2, #16
   25df4:	4629      	mov	r1, r5
   25df6:	a801      	add	r0, sp, #4
   25df8:	f7ff ff67 	bl	25cca <sys_memcpy_swap>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
   25dfc:	463b      	mov	r3, r7
   25dfe:	2241      	movs	r2, #65	; 0x41
   25e00:	a905      	add	r1, sp, #20
   25e02:	a801      	add	r0, sp, #4
   25e04:	f7ff ff7a 	bl	25cfc <bt_smp_aes_cmac>
	if (err) {
   25e08:	4604      	mov	r4, r0
   25e0a:	b918      	cbnz	r0, 25e14 <smp_f6+0x94>
	sys_mem_swap(check, 16);
   25e0c:	2110      	movs	r1, #16
   25e0e:	4638      	mov	r0, r7
   25e10:	f7ff ff65 	bl	25cde <sys_mem_swap>
}
   25e14:	4620      	mov	r0, r4
   25e16:	b017      	add	sp, #92	; 0x5c
   25e18:	bdf0      	pop	{r4, r5, r6, r7, pc}

00025e1a <atomic_clear_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25e1a:	2301      	movs	r3, #1
   25e1c:	408b      	lsls	r3, r1
	(void)atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25e1e:	43db      	mvns	r3, r3
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25e20:	f3bf 8f5b 	dmb	ish
   25e24:	e850 2f00 	ldrex	r2, [r0]
   25e28:	401a      	ands	r2, r3
   25e2a:	e840 2100 	strex	r1, r2, [r0]
   25e2e:	2900      	cmp	r1, #0
   25e30:	d1f8      	bne.n	25e24 <atomic_clear_bit+0xa>
   25e32:	f3bf 8f5b 	dmb	ish
}
   25e36:	4770      	bx	lr

00025e38 <atomic_set_bit>:
	atomic_val_t mask = ATOMIC_MASK(bit);
   25e38:	2301      	movs	r3, #1
   25e3a:	408b      	lsls	r3, r1
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   25e3c:	f3bf 8f5b 	dmb	ish
   25e40:	e850 2f00 	ldrex	r2, [r0]
   25e44:	431a      	orrs	r2, r3
   25e46:	e840 2100 	strex	r1, r2, [r0]
   25e4a:	2900      	cmp	r1, #0
   25e4c:	d1f8      	bne.n	25e40 <atomic_set_bit+0x8>
   25e4e:	f3bf 8f5b 	dmb	ish
}
   25e52:	4770      	bx	lr

00025e54 <smp_keypress_notif>:
{
   25e54:	b508      	push	{r3, lr}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_KEYPRESS_NOTIFICATION);
   25e56:	210e      	movs	r1, #14
   25e58:	30b8      	adds	r0, #184	; 0xb8
   25e5a:	f7ff ffed 	bl	25e38 <atomic_set_bit>
}
   25e5e:	2000      	movs	r0, #0
   25e60:	bd08      	pop	{r3, pc}

00025e62 <smp_security_request>:
   25e62:	2007      	movs	r0, #7
   25e64:	4770      	bx	lr

00025e66 <atomic_test_bit>:
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   25e66:	f3bf 8f5b 	dmb	ish
   25e6a:	6800      	ldr	r0, [r0, #0]
   25e6c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1)))) != 0;
   25e70:	4108      	asrs	r0, r1
}
   25e72:	f000 0001 	and.w	r0, r0, #1
   25e76:	4770      	bx	lr

00025e78 <smp_create_pdu.constprop.0>:
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   25e78:	b570      	push	{r4, r5, r6, lr}
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   25e7a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
static struct net_buf *smp_create_pdu(struct bt_smp *smp, uint8_t op, size_t len)
   25e7e:	460e      	mov	r6, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
   25e80:	4628      	mov	r0, r5
   25e82:	2104      	movs	r1, #4
   25e84:	f7ff ffef 	bl	25e66 <atomic_test_bit>
   25e88:	b168      	cbz	r0, 25ea6 <smp_create_pdu.constprop.0+0x2e>
		timeout = K_NO_WAIT;
   25e8a:	2200      	movs	r2, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   25e8c:	2100      	movs	r1, #0
		timeout = SMP_TIMEOUT;
   25e8e:	2300      	movs	r3, #0
	buf = bt_l2cap_create_pdu_timeout(NULL, 0, timeout);
   25e90:	4608      	mov	r0, r1
   25e92:	f7ff f80d 	bl	24eb0 <bt_l2cap_create_pdu_timeout>
	if (!buf) {
   25e96:	4604      	mov	r4, r0
   25e98:	b940      	cbnz	r0, 25eac <smp_create_pdu.constprop.0+0x34>
		atomic_set_bit(smp->flags, SMP_FLAG_TIMEOUT);
   25e9a:	2104      	movs	r1, #4
   25e9c:	4628      	mov	r0, r5
   25e9e:	f7ff ffcb 	bl	25e38 <atomic_set_bit>
}
   25ea2:	4620      	mov	r0, r4
   25ea4:	bd70      	pop	{r4, r5, r6, pc}
		timeout = SMP_TIMEOUT;
   25ea6:	f44f 2270 	mov.w	r2, #983040	; 0xf0000
   25eaa:	e7ef      	b.n	25e8c <smp_create_pdu.constprop.0+0x14>
   25eac:	2101      	movs	r1, #1
   25eae:	3008      	adds	r0, #8
   25eb0:	f000 fb2e 	bl	26510 <net_buf_simple_add>
	hdr->code = op;
   25eb4:	7006      	strb	r6, [r0, #0]
	return buf;
   25eb6:	e7f4      	b.n	25ea2 <smp_create_pdu.constprop.0+0x2a>

00025eb8 <send_pairing_rsp>:
{
   25eb8:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   25eba:	2102      	movs	r1, #2
{
   25ebc:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
   25ebe:	f7ff ffdb 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   25ec2:	4604      	mov	r4, r0
   25ec4:	b178      	cbz	r0, 25ee6 <send_pairing_rsp+0x2e>
   25ec6:	2106      	movs	r1, #6
   25ec8:	3008      	adds	r0, #8
   25eca:	f000 fb21 	bl	26510 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
   25ece:	2206      	movs	r2, #6
   25ed0:	f105 01c9 	add.w	r1, r5, #201	; 0xc9
   25ed4:	f7fe fac8 	bl	24468 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   25ed8:	4628      	mov	r0, r5
   25eda:	2200      	movs	r2, #0
   25edc:	4621      	mov	r1, r4
   25ede:	f7e8 fc83 	bl	e7e8 <smp_send.constprop.0>
	return 0;
   25ee2:	2000      	movs	r0, #0
}
   25ee4:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   25ee6:	2008      	movs	r0, #8
   25ee8:	e7fc      	b.n	25ee4 <send_pairing_rsp+0x2c>

00025eea <smp_send_pairing_random>:
{
   25eea:	b538      	push	{r3, r4, r5, lr}
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   25eec:	2104      	movs	r1, #4
{
   25eee:	4605      	mov	r5, r0
	rsp_buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
   25ef0:	f7ff ffc2 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!rsp_buf) {
   25ef4:	4604      	mov	r4, r0
   25ef6:	b178      	cbz	r0, 25f18 <smp_send_pairing_random+0x2e>
   25ef8:	2110      	movs	r1, #16
   25efa:	3008      	adds	r0, #8
   25efc:	f000 fb08 	bl	26510 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
   25f00:	2210      	movs	r2, #16
   25f02:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   25f06:	f7fe faaf 	bl	24468 <memcpy>
	smp_send(smp, rsp_buf, NULL, NULL);
   25f0a:	4628      	mov	r0, r5
   25f0c:	2200      	movs	r2, #0
   25f0e:	4621      	mov	r1, r4
   25f10:	f7e8 fc6a 	bl	e7e8 <smp_send.constprop.0>
	return 0;
   25f14:	2000      	movs	r0, #0
}
   25f16:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
   25f18:	2008      	movs	r0, #8
   25f1a:	e7fc      	b.n	25f16 <smp_send_pairing_random+0x2c>

00025f1c <smp_dhkey_check>:
{
   25f1c:	b570      	push	{r4, r5, r6, lr}
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   25f1e:	6803      	ldr	r3, [r0, #0]
   25f20:	78db      	ldrb	r3, [r3, #3]
   25f22:	2b01      	cmp	r3, #1
{
   25f24:	4604      	mov	r4, r0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
   25f26:	d115      	bne.n	25f54 <smp_dhkey_check+0x38>
	struct bt_smp_dhkey_check *req = (void *)buf->data;
   25f28:	688e      	ldr	r6, [r1, #8]
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
   25f2a:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   25f2e:	2110      	movs	r1, #16
   25f30:	4628      	mov	r0, r5
   25f32:	f7ff ff72 	bl	25e1a <atomic_clear_bit>
		memcpy(smp->e, req->e, sizeof(smp->e));
   25f36:	4631      	mov	r1, r6
   25f38:	2210      	movs	r2, #16
   25f3a:	f204 106f 	addw	r0, r4, #367	; 0x16f
   25f3e:	f7fe fa93 	bl	24468 <memcpy>
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
   25f42:	2107      	movs	r1, #7
   25f44:	4628      	mov	r0, r5
   25f46:	f7ff ff8e 	bl	25e66 <atomic_test_bit>
   25f4a:	b128      	cbz	r0, 25f58 <smp_dhkey_check+0x3c>
			atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   25f4c:	2109      	movs	r1, #9
   25f4e:	4628      	mov	r0, r5
   25f50:	f7ff ff72 	bl	25e38 <atomic_set_bit>
}
   25f54:	2000      	movs	r0, #0
   25f56:	bd70      	pop	{r4, r5, r6, pc}
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   25f58:	210a      	movs	r1, #10
   25f5a:	4628      	mov	r0, r5
   25f5c:	f7ff ff83 	bl	25e66 <atomic_test_bit>
   25f60:	2800      	cmp	r0, #0
   25f62:	d1f3      	bne.n	25f4c <smp_dhkey_check+0x30>
		return compute_and_check_and_send_slave_dhcheck(smp);
   25f64:	4620      	mov	r0, r4
}
   25f66:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		return compute_and_check_and_send_slave_dhcheck(smp);
   25f6a:	f7e8 bf11 	b.w	ed90 <compute_and_check_and_send_slave_dhcheck>

00025f6e <atomic_test_and_clear_bit>:
{
   25f6e:	b500      	push	{lr}
	atomic_val_t mask = ATOMIC_MASK(bit);
   25f70:	2301      	movs	r3, #1
   25f72:	fa03 f101 	lsl.w	r1, r3, r1
	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
   25f76:	43ca      	mvns	r2, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   25f78:	f3bf 8f5b 	dmb	ish
   25f7c:	e850 3f00 	ldrex	r3, [r0]
   25f80:	ea03 0c02 	and.w	ip, r3, r2
   25f84:	e840 ce00 	strex	lr, ip, [r0]
   25f88:	f1be 0f00 	cmp.w	lr, #0
   25f8c:	d1f6      	bne.n	25f7c <atomic_test_and_clear_bit+0xe>
   25f8e:	f3bf 8f5b 	dmb	ish
	return (old & mask) != 0;
   25f92:	420b      	tst	r3, r1
}
   25f94:	bf14      	ite	ne
   25f96:	2001      	movne	r0, #1
   25f98:	2000      	moveq	r0, #0
   25f9a:	f85d fb04 	ldr.w	pc, [sp], #4

00025f9e <smp_reset>:
{
   25f9e:	b510      	push	{r4, lr}
   25fa0:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   25fa2:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
   25fa6:	f001 f90e 	bl	271c6 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
   25faa:	2300      	movs	r3, #0
   25fac:	f884 30c0 	strb.w	r3, [r4, #192]	; 0xc0
	atomic_set(&smp->allowed_cmds, 0);
   25fb0:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   25fb4:	f3bf 8f5b 	dmb	ish
   25fb8:	e850 2f00 	ldrex	r2, [r0]
   25fbc:	e840 3100 	strex	r1, r3, [r0]
   25fc0:	2900      	cmp	r1, #0
   25fc2:	d1f9      	bne.n	25fb8 <smp_reset+0x1a>
   25fc4:	f3bf 8f5b 	dmb	ish
   25fc8:	f3bf 8f5b 	dmb	ish
   25fcc:	34bc      	adds	r4, #188	; 0xbc
   25fce:	e854 2f00 	ldrex	r2, [r4]
   25fd2:	e844 3100 	strex	r1, r3, [r4]
   25fd6:	2900      	cmp	r1, #0
   25fd8:	d1f9      	bne.n	25fce <smp_reset+0x30>
   25fda:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   25fde:	2101      	movs	r1, #1
}
   25fe0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_REQ);
   25fe4:	f7ff bf28 	b.w	25e38 <atomic_set_bit>

00025fe8 <smp_c1>:
{
   25fe8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25fec:	b089      	sub	sp, #36	; 0x24
   25fee:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   25ff2:	4699      	mov	r9, r3
	p1[0] = ia->type;
   25ff4:	783b      	ldrb	r3, [r7, #0]
{
   25ff6:	9d12      	ldr	r5, [sp, #72]	; 0x48
	p1[0] = ia->type;
   25ff8:	f88d 3000 	strb.w	r3, [sp]
{
   25ffc:	460c      	mov	r4, r1
	p1[1] = ra->type;
   25ffe:	f898 3000 	ldrb.w	r3, [r8]
   26002:	f88d 3001 	strb.w	r3, [sp, #1]
{
   26006:	4611      	mov	r1, r2
   26008:	4606      	mov	r6, r0
	memcpy(p1 + 2, preq, 7);
   2600a:	2207      	movs	r2, #7
   2600c:	f10d 0002 	add.w	r0, sp, #2
   26010:	f7fe fa2a 	bl	24468 <memcpy>
	memcpy(p1 + 9, pres, 7);
   26014:	2207      	movs	r2, #7
   26016:	4649      	mov	r1, r9
   26018:	f10d 0009 	add.w	r0, sp, #9
   2601c:	f7fe fa24 	bl	24468 <memcpy>
	while (len--) {
   26020:	f104 0010 	add.w	r0, r4, #16
   26024:	4629      	mov	r1, r5
   26026:	466a      	mov	r2, sp
   26028:	42a0      	cmp	r0, r4
   2602a:	d127      	bne.n	2607c <smp_c1+0x94>
	err = bt_encrypt_le(k, enc_data, enc_data);
   2602c:	462a      	mov	r2, r5
   2602e:	4629      	mov	r1, r5
   26030:	4630      	mov	r0, r6
   26032:	f7ed fa71 	bl	13518 <bt_encrypt_le>
	if (err) {
   26036:	4604      	mov	r4, r0
   26038:	b9e0      	cbnz	r0, 26074 <smp_c1+0x8c>
	memcpy(p2, ra->a.val, 6);
   2603a:	2206      	movs	r2, #6
   2603c:	f108 0101 	add.w	r1, r8, #1
   26040:	a804      	add	r0, sp, #16
   26042:	f7fe fa11 	bl	24468 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
   26046:	2206      	movs	r2, #6
   26048:	1c79      	adds	r1, r7, #1
   2604a:	f10d 0016 	add.w	r0, sp, #22
   2604e:	f7fe fa0b 	bl	24468 <memcpy>
	(void)memset(p2 + 12, 0, 4);
   26052:	2204      	movs	r2, #4
   26054:	4621      	mov	r1, r4
   26056:	a807      	add	r0, sp, #28
   26058:	f7fe fa31 	bl	244be <memset>
	while (len--) {
   2605c:	f105 0010 	add.w	r0, r5, #16
   26060:	462a      	mov	r2, r5
   26062:	ab04      	add	r3, sp, #16
   26064:	4282      	cmp	r2, r0
   26066:	d112      	bne.n	2608e <smp_c1+0xa6>
	return bt_encrypt_le(k, enc_data, enc_data);
   26068:	462a      	mov	r2, r5
   2606a:	4629      	mov	r1, r5
   2606c:	4630      	mov	r0, r6
   2606e:	f7ed fa53 	bl	13518 <bt_encrypt_le>
   26072:	4604      	mov	r4, r0
}
   26074:	4620      	mov	r0, r4
   26076:	b009      	add	sp, #36	; 0x24
   26078:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		*r++ = *p++ ^ *q++;
   2607c:	f814 3b01 	ldrb.w	r3, [r4], #1
   26080:	f812 cb01 	ldrb.w	ip, [r2], #1
   26084:	ea83 030c 	eor.w	r3, r3, ip
   26088:	f801 3b01 	strb.w	r3, [r1], #1
   2608c:	e7cc      	b.n	26028 <smp_c1+0x40>
   2608e:	f812 1b01 	ldrb.w	r1, [r2], #1
   26092:	f813 4b01 	ldrb.w	r4, [r3], #1
   26096:	4061      	eors	r1, r4
   26098:	f802 1c01 	strb.w	r1, [r2, #-1]
   2609c:	e7e2      	b.n	26064 <smp_c1+0x7c>

0002609e <legacy_pairing_confirm>:
{
   2609e:	b5f0      	push	{r4, r5, r6, r7, lr}
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   260a0:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
{
   260a4:	b085      	sub	sp, #20
   260a6:	4605      	mov	r5, r0
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   260a8:	210a      	movs	r1, #10
   260aa:	4638      	mov	r0, r7
   260ac:	f7ff fedb 	bl	25e66 <atomic_test_bit>
   260b0:	bb90      	cbnz	r0, 26118 <legacy_pairing_confirm+0x7a>
			atomic_set_bit(&smp->allowed_cmds,
   260b2:	2104      	movs	r1, #4
   260b4:	f105 00b8 	add.w	r0, r5, #184	; 0xb8
   260b8:	f7ff febe 	bl	25e38 <atomic_set_bit>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   260bc:	2103      	movs	r1, #3
   260be:	4628      	mov	r0, r5
	struct bt_conn *conn = smp->chan.chan.conn;
   260c0:	682c      	ldr	r4, [r5, #0]
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
   260c2:	f7ff fed9 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!buf) {
   260c6:	4606      	mov	r6, r0
   260c8:	b1c0      	cbz	r0, 260fc <legacy_pairing_confirm+0x5e>
   260ca:	2110      	movs	r1, #16
   260cc:	3008      	adds	r0, #8
   260ce:	f000 fa1f 	bl	26510 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
   260d2:	f104 0396 	add.w	r3, r4, #150	; 0x96
   260d6:	348f      	adds	r4, #143	; 0x8f
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
   260d8:	9002      	str	r0, [sp, #8]
   260da:	9301      	str	r3, [sp, #4]
   260dc:	9400      	str	r4, [sp, #0]
   260de:	f105 03c8 	add.w	r3, r5, #200	; 0xc8
   260e2:	f105 02c1 	add.w	r2, r5, #193	; 0xc1
   260e6:	f105 01df 	add.w	r1, r5, #223	; 0xdf
   260ea:	f105 00ff 	add.w	r0, r5, #255	; 0xff
   260ee:	f7ff ff7b 	bl	25fe8 <smp_c1>
   260f2:	4604      	mov	r4, r0
   260f4:	b120      	cbz	r0, 26100 <legacy_pairing_confirm+0x62>
		net_buf_unref(buf);
   260f6:	4630      	mov	r0, r6
   260f8:	f7f7 fad8 	bl	1d6ac <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
   260fc:	2008      	movs	r0, #8
   260fe:	e009      	b.n	26114 <legacy_pairing_confirm+0x76>
	smp_send(smp, buf, NULL, NULL);
   26100:	4602      	mov	r2, r0
   26102:	4631      	mov	r1, r6
   26104:	4628      	mov	r0, r5
   26106:	f7e8 fb6f 	bl	e7e8 <smp_send.constprop.0>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   2610a:	4621      	mov	r1, r4
   2610c:	4638      	mov	r0, r7
   2610e:	f7ff fe84 	bl	25e1a <atomic_clear_bit>
	return 0;
   26112:	2000      	movs	r0, #0
}
   26114:	b005      	add	sp, #20
   26116:	bdf0      	pop	{r4, r5, r6, r7, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
   26118:	2100      	movs	r1, #0
   2611a:	4638      	mov	r0, r7
   2611c:	f7ff fe8c 	bl	25e38 <atomic_set_bit>
   26120:	e7f7      	b.n	26112 <legacy_pairing_confirm+0x74>

00026122 <bt_smp_request_ltk>:
{
   26122:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
   26126:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
   2612a:	e9cd 2300 	strd	r2, r3, [sp]
   2612e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
   26130:	f7e8 fb02 	bl	e738 <smp_chan_get>
	if (!smp) {
   26134:	4605      	mov	r5, r0
   26136:	2800      	cmp	r0, #0
   26138:	f000 8093 	beq.w	26262 <bt_smp_request_ltk+0x140>
	if (ediv == 0U && rand == 0U &&
   2613c:	f8bd 9028 	ldrh.w	r9, [sp, #40]	; 0x28
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26140:	f100 07bc 	add.w	r7, r0, #188	; 0xbc
	if (ediv == 0U && rand == 0U &&
   26144:	f1b9 0f00 	cmp.w	r9, #0
   26148:	d12c      	bne.n	261a4 <bt_smp_request_ltk+0x82>
   2614a:	e9dd 2300 	ldrd	r2, r3, [sp]
   2614e:	4313      	orrs	r3, r2
   26150:	d128      	bne.n	261a4 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26152:	2103      	movs	r1, #3
   26154:	4638      	mov	r0, r7
   26156:	f7ff fe86 	bl	25e66 <atomic_test_bit>
	if (ediv == 0U && rand == 0U &&
   2615a:	b318      	cbz	r0, 261a4 <bt_smp_request_ltk+0x82>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
   2615c:	2101      	movs	r1, #1
   2615e:	4638      	mov	r0, r7
   26160:	f7ff fe81 	bl	25e66 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) &&
   26164:	4606      	mov	r6, r0
   26166:	b1e8      	cbz	r0, 261a4 <bt_smp_request_ltk+0x82>
	return MIN(req->max_key_size, rsp->max_key_size);
   26168:	f895 40cc 	ldrb.w	r4, [r5, #204]	; 0xcc
   2616c:	f895 30c5 	ldrb.w	r3, [r5, #197]	; 0xc5
   26170:	429c      	cmp	r4, r3
   26172:	bf28      	it	cs
   26174:	461c      	movcs	r4, r3
		memcpy(ltk, smp->tk, enc_size);
   26176:	4622      	mov	r2, r4
   26178:	f105 01ff 	add.w	r1, r5, #255	; 0xff
   2617c:	4640      	mov	r0, r8
   2617e:	f7fe f973 	bl	24468 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   26182:	2c0f      	cmp	r4, #15
   26184:	d806      	bhi.n	26194 <bt_smp_request_ltk+0x72>
			(void)memset(ltk + enc_size, 0,
   26186:	f1c4 0210 	rsb	r2, r4, #16
   2618a:	4649      	mov	r1, r9
   2618c:	eb08 0004 	add.w	r0, r8, r4
   26190:	f7fe f995 	bl	244be <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26194:	2101      	movs	r1, #1
   26196:	4638      	mov	r0, r7
   26198:	f7ff fe4e 	bl	25e38 <atomic_set_bit>
}
   2619c:	4630      	mov	r0, r6
   2619e:	b003      	add	sp, #12
   261a0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	if (!conn->le.keys) {
   261a4:	f8d4 30b4 	ldr.w	r3, [r4, #180]	; 0xb4
   261a8:	b983      	cbnz	r3, 261cc <bt_smp_request_ltk+0xaa>
					     &conn->le.dst);
   261aa:	f104 0688 	add.w	r6, r4, #136	; 0x88
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, conn->id,
   261ae:	7a21      	ldrb	r1, [r4, #8]
   261b0:	4632      	mov	r2, r6
   261b2:	2020      	movs	r0, #32
   261b4:	f7ea f8f4 	bl	103a0 <bt_keys_find>
   261b8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
		if (!conn->le.keys) {
   261bc:	b930      	cbnz	r0, 261cc <bt_smp_request_ltk+0xaa>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
   261be:	7a21      	ldrb	r1, [r4, #8]
   261c0:	4632      	mov	r2, r6
   261c2:	2001      	movs	r0, #1
   261c4:	f7ea f8ec 	bl	103a0 <bt_keys_find>
   261c8:	f8c4 00b4 	str.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   261cc:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   261d0:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
	if (ediv == 0U && rand == 0U &&
   261d4:	b9ee      	cbnz	r6, 26212 <bt_smp_request_ltk+0xf0>
   261d6:	e9dd 2300 	ldrd	r2, r3, [sp]
   261da:	4313      	orrs	r3, r2
   261dc:	d119      	bne.n	26212 <bt_smp_request_ltk+0xf0>
   261de:	b388      	cbz	r0, 26244 <bt_smp_request_ltk+0x122>
	    conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256)) {
   261e0:	89c3      	ldrh	r3, [r0, #14]
   261e2:	069a      	lsls	r2, r3, #26
   261e4:	d516      	bpl.n	26214 <bt_smp_request_ltk+0xf2>
		enc_size = conn->le.keys->enc_size;
   261e6:	7b04      	ldrb	r4, [r0, #12]
		memcpy(ltk, conn->le.keys->ltk.val, enc_size);
   261e8:	f100 011a 	add.w	r1, r0, #26
   261ec:	4622      	mov	r2, r4
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   261ee:	4640      	mov	r0, r8
   261f0:	f7fe f93a 	bl	24468 <memcpy>
		if (enc_size < BT_SMP_MAX_ENC_KEY_SIZE) {
   261f4:	2c0f      	cmp	r4, #15
   261f6:	d806      	bhi.n	26206 <bt_smp_request_ltk+0xe4>
			(void)memset(ltk + enc_size, 0,
   261f8:	f1c4 0210 	rsb	r2, r4, #16
   261fc:	4631      	mov	r1, r6
   261fe:	eb08 0004 	add.w	r0, r8, r4
   26202:	f7fe f95c 	bl	244be <memset>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
   26206:	2101      	movs	r1, #1
   26208:	4638      	mov	r0, r7
   2620a:	f7ff fe15 	bl	25e38 <atomic_set_bit>
		return true;
   2620e:	2601      	movs	r6, #1
   26210:	e7c4      	b.n	2619c <bt_smp_request_ltk+0x7a>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   26212:	b1b8      	cbz	r0, 26244 <bt_smp_request_ltk+0x122>
   26214:	89c3      	ldrh	r3, [r0, #14]
   26216:	07db      	lsls	r3, r3, #31
   26218:	d514      	bpl.n	26244 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   2621a:	2208      	movs	r2, #8
   2621c:	4669      	mov	r1, sp
   2621e:	3068      	adds	r0, #104	; 0x68
   26220:	f7fe f911 	bl	24446 <memcmp>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
   26224:	b970      	cbnz	r0, 26244 <bt_smp_request_ltk+0x122>
	    !memcmp(conn->le.keys->slave_ltk.ediv, &ediv, 2)) {
   26226:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   2622a:	2202      	movs	r2, #2
   2622c:	a90a      	add	r1, sp, #40	; 0x28
   2622e:	3070      	adds	r0, #112	; 0x70
   26230:	f7fe f909 	bl	24446 <memcmp>
	    !memcmp(conn->le.keys->slave_ltk.rand, &rand, 8) &&
   26234:	4606      	mov	r6, r0
   26236:	b928      	cbnz	r0, 26244 <bt_smp_request_ltk+0x122>
		enc_size = conn->le.keys->enc_size;
   26238:	f8d4 10b4 	ldr.w	r1, [r4, #180]	; 0xb4
   2623c:	7b0c      	ldrb	r4, [r1, #12]
		memcpy(ltk, conn->le.keys->slave_ltk.val, enc_size);
   2623e:	3172      	adds	r1, #114	; 0x72
   26240:	4622      	mov	r2, r4
   26242:	e7d4      	b.n	261ee <bt_smp_request_ltk+0xcc>
	if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26244:	210f      	movs	r1, #15
   26246:	4638      	mov	r0, r7
   26248:	f7ff fe0d 	bl	25e66 <atomic_test_bit>
   2624c:	b120      	cbz	r0, 26258 <bt_smp_request_ltk+0x136>
		bt_conn_security_changed(conn, BT_HCI_ERR_PIN_OR_KEY_MISSING,
   2624e:	2202      	movs	r2, #2
   26250:	2106      	movs	r1, #6
   26252:	4620      	mov	r0, r4
   26254:	f7e5 f8ba 	bl	b3cc <bt_conn_security_changed>
	smp_reset(smp);
   26258:	4628      	mov	r0, r5
   2625a:	f7ff fea0 	bl	25f9e <smp_reset>
	return false;
   2625e:	2600      	movs	r6, #0
   26260:	e79c      	b.n	2619c <bt_smp_request_ltk+0x7a>
		return false;
   26262:	4606      	mov	r6, r0
   26264:	e79a      	b.n	2619c <bt_smp_request_ltk+0x7a>

00026266 <bt_smp_irk_get>:
{
   26266:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	uint8_t invalid_ir[16] = { 0 };
   26268:	2500      	movs	r5, #0
{
   2626a:	460c      	mov	r4, r1
	if (!memcmp(ir, invalid_ir, 16)) {
   2626c:	2210      	movs	r2, #16
   2626e:	4669      	mov	r1, sp
	uint8_t invalid_ir[16] = { 0 };
   26270:	e9cd 5500 	strd	r5, r5, [sp]
   26274:	e9cd 5502 	strd	r5, r5, [sp, #8]
{
   26278:	4606      	mov	r6, r0
	if (!memcmp(ir, invalid_ir, 16)) {
   2627a:	f7fe f8e4 	bl	24446 <memcmp>
   2627e:	b180      	cbz	r0, 262a2 <bt_smp_irk_get+0x3c>
	dst[0] = val;
   26280:	2301      	movs	r3, #1
	memset(&res[4], 0, 16 - 4);
   26282:	220c      	movs	r2, #12
   26284:	4629      	mov	r1, r5
   26286:	7023      	strb	r3, [r4, #0]
	dst[1] = val >> 8;
   26288:	7065      	strb	r5, [r4, #1]
	dst[0] = val;
   2628a:	70a5      	strb	r5, [r4, #2]
	dst[1] = val >> 8;
   2628c:	70e5      	strb	r5, [r4, #3]
   2628e:	1d20      	adds	r0, r4, #4
   26290:	f7fe f915 	bl	244be <memset>
	err = bt_encrypt_le(key, res, res);
   26294:	4622      	mov	r2, r4
   26296:	4621      	mov	r1, r4
   26298:	4630      	mov	r0, r6
   2629a:	f7ed f93d 	bl	13518 <bt_encrypt_le>
}
   2629e:	b004      	add	sp, #16
   262a0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   262a2:	f06f 0015 	mvn.w	r0, #21
   262a6:	e7fa      	b.n	2629e <bt_smp_irk_get+0x38>

000262a8 <smp_error>:
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   262a8:	f100 03bc 	add.w	r3, r0, #188	; 0xbc
{
   262ac:	b573      	push	{r0, r1, r4, r5, r6, lr}
   262ae:	4605      	mov	r5, r0
   262b0:	460c      	mov	r4, r1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   262b2:	4618      	mov	r0, r3
   262b4:	2103      	movs	r1, #3
   262b6:	f7ff fdd6 	bl	25e66 <atomic_test_bit>
   262ba:	b1c8      	cbz	r0, 262f0 <smp_error+0x48>
		smp_pairing_complete(smp, reason);
   262bc:	4621      	mov	r1, r4
   262be:	4628      	mov	r0, r5
   262c0:	f7e9 fb0a 	bl	f8d8 <smp_pairing_complete>
	buf = smp_create_pdu(smp, BT_SMP_CMD_PAIRING_FAIL, sizeof(*rsp));
   262c4:	2105      	movs	r1, #5
   262c6:	4628      	mov	r0, r5
   262c8:	f7ff fdd6 	bl	25e78 <smp_create_pdu.constprop.0>
	if (!buf) {
   262cc:	4606      	mov	r6, r0
   262ce:	b1e0      	cbz	r0, 2630a <smp_error+0x62>
   262d0:	2101      	movs	r1, #1
   262d2:	3008      	adds	r0, #8
   262d4:	f000 f91c 	bl	26510 <net_buf_simple_add>
	rsp->reason = reason;
   262d8:	7004      	strb	r4, [r0, #0]
   262da:	2400      	movs	r4, #0
   262dc:	6828      	ldr	r0, [r5, #0]
   262de:	9400      	str	r4, [sp, #0]
   262e0:	4623      	mov	r3, r4
   262e2:	4632      	mov	r2, r6
   262e4:	2106      	movs	r1, #6
   262e6:	f7fe fde6 	bl	24eb6 <bt_l2cap_send_cb>
	return 0;
   262ea:	4620      	mov	r0, r4
}
   262ec:	b002      	add	sp, #8
   262ee:	bd70      	pop	{r4, r5, r6, pc}
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   262f0:	2101      	movs	r1, #1
   262f2:	4618      	mov	r0, r3
   262f4:	f7ff fdb7 	bl	25e66 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   262f8:	2800      	cmp	r0, #0
   262fa:	d1df      	bne.n	262bc <smp_error+0x14>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   262fc:	210f      	movs	r1, #15
   262fe:	4618      	mov	r0, r3
   26300:	f7ff fdb1 	bl	25e66 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26304:	2800      	cmp	r0, #0
   26306:	d1d9      	bne.n	262bc <smp_error+0x14>
   26308:	e7dc      	b.n	262c4 <smp_error+0x1c>
		return -ENOBUFS;
   2630a:	f06f 0036 	mvn.w	r0, #54	; 0x36
   2630e:	e7ed      	b.n	262ec <smp_error+0x44>

00026310 <bt_smp_dhkey_ready>:
{
   26310:	b570      	push	{r4, r5, r6, lr}
   26312:	4606      	mov	r6, r0
	struct bt_smp *smp = smp_find(SMP_FLAG_DHKEY_GEN);
   26314:	2008      	movs	r0, #8
   26316:	f7e8 fac3 	bl	e8a0 <smp_find>
	if (smp) {
   2631a:	4604      	mov	r4, r0
   2631c:	b1c0      	cbz	r0, 26350 <bt_smp_dhkey_ready+0x40>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_GEN);
   2631e:	f100 05bc 	add.w	r5, r0, #188	; 0xbc
   26322:	2108      	movs	r1, #8
   26324:	4628      	mov	r0, r5
   26326:	f7ff fd78 	bl	25e1a <atomic_clear_bit>
	if (!dhkey) {
   2632a:	b38e      	cbz	r6, 26390 <bt_smp_dhkey_ready+0x80>
	atomic_clear_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
   2632c:	2107      	movs	r1, #7
   2632e:	f7ff fd74 	bl	25e1a <atomic_clear_bit>
	memcpy(smp->dhkey, dhkey, 32);
   26332:	4631      	mov	r1, r6
   26334:	2220      	movs	r2, #32
   26336:	f204 104f 	addw	r0, r4, #335	; 0x14f
   2633a:	f7fe f895 	bl	24468 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
   2633e:	210a      	movs	r1, #10
   26340:	4628      	mov	r0, r5
   26342:	f7ff fd90 	bl	25e66 <atomic_test_bit>
   26346:	b168      	cbz	r0, 26364 <bt_smp_dhkey_ready+0x54>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   26348:	2109      	movs	r1, #9
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2634a:	4628      	mov	r0, r5
   2634c:	f7ff fd74 	bl	25e38 <atomic_set_bit>
		smp = smp_find(SMP_FLAG_DHKEY_PENDING);
   26350:	2007      	movs	r0, #7
   26352:	f7e8 faa5 	bl	e8a0 <smp_find>
		if (smp) {
   26356:	4604      	mov	r4, r0
   26358:	b118      	cbz	r0, 26362 <bt_smp_dhkey_ready+0x52>
			err = smp_dhkey_generate(smp);
   2635a:	f7e8 fa7b 	bl	e854 <smp_dhkey_generate>
			if (err) {
   2635e:	4601      	mov	r1, r0
   26360:	b990      	cbnz	r0, 26388 <bt_smp_dhkey_ready+0x78>
}
   26362:	bd70      	pop	{r4, r5, r6, pc}
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   26364:	2110      	movs	r1, #16
   26366:	4628      	mov	r0, r5
   26368:	f7ff fd7d 	bl	25e66 <atomic_test_bit>
		atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_SEND);
   2636c:	2109      	movs	r1, #9
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
   2636e:	2800      	cmp	r0, #0
   26370:	d1eb      	bne.n	2634a <bt_smp_dhkey_ready+0x3a>
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
   26372:	4628      	mov	r0, r5
   26374:	f7ff fd77 	bl	25e66 <atomic_test_bit>
   26378:	2800      	cmp	r0, #0
   2637a:	d0e9      	beq.n	26350 <bt_smp_dhkey_ready+0x40>
		return  compute_and_check_and_send_slave_dhcheck(smp);
   2637c:	4620      	mov	r0, r4
   2637e:	f7e8 fd07 	bl	ed90 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
   26382:	4601      	mov	r1, r0
   26384:	2800      	cmp	r0, #0
   26386:	d0e3      	beq.n	26350 <bt_smp_dhkey_ready+0x40>
			smp_error(smp, err);
   26388:	4620      	mov	r0, r4
   2638a:	f7ff ff8d 	bl	262a8 <smp_error>
   2638e:	e7df      	b.n	26350 <bt_smp_dhkey_ready+0x40>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
   26390:	210b      	movs	r1, #11
   26392:	e7f9      	b.n	26388 <bt_smp_dhkey_ready+0x78>

00026394 <smp_check_complete>:
{
   26394:	b510      	push	{r4, lr}
	if (conn->type == BT_CONN_TYPE_LE) {
   26396:	7883      	ldrb	r3, [r0, #2]
   26398:	2b01      	cmp	r3, #1
{
   2639a:	460c      	mov	r4, r1
	if (conn->type == BT_CONN_TYPE_LE) {
   2639c:	d10f      	bne.n	263be <smp_check_complete+0x2a>
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
   2639e:	2106      	movs	r1, #6
   263a0:	f7fe fda2 	bl	24ee8 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
   263a4:	f890 21a0 	ldrb.w	r2, [r0, #416]	; 0x1a0
   263a8:	ea22 0104 	bic.w	r1, r2, r4
   263ac:	f880 11a0 	strb.w	r1, [r0, #416]	; 0x1a0
		if (!smp->local_dist && !smp->remote_dist) {
   263b0:	f8b0 11a0 	ldrh.w	r1, [r0, #416]	; 0x1a0
   263b4:	b919      	cbnz	r1, 263be <smp_check_complete+0x2a>
}
   263b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			smp_pairing_complete(smp, 0);
   263ba:	f7e9 ba8d 	b.w	f8d8 <smp_pairing_complete>
}
   263be:	bd10      	pop	{r4, pc}

000263c0 <smp_sign_info_sent>:
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
   263c0:	2104      	movs	r1, #4
   263c2:	f7ff bfe7 	b.w	26394 <smp_check_complete>

000263c6 <smp_id_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ID_KEY);
   263c6:	2102      	movs	r1, #2
   263c8:	f7ff bfe4 	b.w	26394 <smp_check_complete>

000263cc <smp_ident_sent>:
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
   263cc:	2101      	movs	r1, #1
   263ce:	f7ff bfe1 	b.w	26394 <smp_check_complete>

000263d2 <bt_smp_disconnected>:
{
   263d2:	b538      	push	{r3, r4, r5, lr}
	struct bt_keys *keys = chan->conn->le.keys;
   263d4:	6803      	ldr	r3, [r0, #0]
{
   263d6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&smp->work);
   263d8:	f500 70d4 	add.w	r0, r0, #424	; 0x1a8
	struct bt_keys *keys = chan->conn->le.keys;
   263dc:	f8d3 50b4 	ldr.w	r5, [r3, #180]	; 0xb4
	k_delayed_work_cancel(&smp->work);
   263e0:	f000 fef1 	bl	271c6 <k_delayed_work_cancel>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   263e4:	f104 03bc 	add.w	r3, r4, #188	; 0xbc
   263e8:	2103      	movs	r1, #3
   263ea:	4618      	mov	r0, r3
   263ec:	f7ff fd3b 	bl	25e66 <atomic_test_bit>
   263f0:	b1a0      	cbz	r0, 2641c <bt_smp_disconnected+0x4a>
		smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
   263f2:	2108      	movs	r1, #8
   263f4:	4620      	mov	r0, r4
   263f6:	f7e9 fa6f 	bl	f8d8 <smp_pairing_complete>
	if (keys) {
   263fa:	b13d      	cbz	r5, 2640c <bt_smp_disconnected+0x3a>
		if (!keys->keys || (!IS_ENABLED(CONFIG_BT_STORE_DEBUG_KEYS) &&
   263fc:	89eb      	ldrh	r3, [r5, #14]
   263fe:	b113      	cbz	r3, 26406 <bt_smp_disconnected+0x34>
   26400:	7b6b      	ldrb	r3, [r5, #13]
   26402:	079b      	lsls	r3, r3, #30
   26404:	d502      	bpl.n	2640c <bt_smp_disconnected+0x3a>
			bt_keys_clear(keys);
   26406:	4628      	mov	r0, r5
   26408:	f7ea f828 	bl	1045c <bt_keys_clear>
	(void)memset(smp, 0, sizeof(*smp));
   2640c:	4620      	mov	r0, r4
   2640e:	f44f 72ec 	mov.w	r2, #472	; 0x1d8
}
   26412:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	(void)memset(smp, 0, sizeof(*smp));
   26416:	2100      	movs	r1, #0
   26418:	f7fe b851 	b.w	244be <memset>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   2641c:	2101      	movs	r1, #1
   2641e:	4618      	mov	r0, r3
   26420:	f7ff fd21 	bl	25e66 <atomic_test_bit>
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING) ||
   26424:	2800      	cmp	r0, #0
   26426:	d1e4      	bne.n	263f2 <bt_smp_disconnected+0x20>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ)) {
   26428:	210f      	movs	r1, #15
   2642a:	4618      	mov	r0, r3
   2642c:	f7ff fd1b 	bl	25e66 <atomic_test_bit>
	    atomic_test_bit(smp->flags, SMP_FLAG_ENC_PENDING) ||
   26430:	2800      	cmp	r0, #0
   26432:	d1de      	bne.n	263f2 <bt_smp_disconnected+0x20>
   26434:	e7e1      	b.n	263fa <bt_smp_disconnected+0x28>

00026436 <id_add>:
	bt_id_add(keys);
   26436:	f7e3 bde3 	b.w	a000 <bt_id_add>

0002643a <bt_keys_get_type>:
{
   2643a:	b570      	push	{r4, r5, r6, lr}
   2643c:	4604      	mov	r4, r0
   2643e:	460d      	mov	r5, r1
   26440:	4616      	mov	r6, r2
	keys = bt_keys_find(type, id, addr);
   26442:	f7e9 ffad 	bl	103a0 <bt_keys_find>
	if (keys) {
   26446:	b938      	cbnz	r0, 26458 <bt_keys_get_type+0x1e>
	keys = bt_keys_get_addr(id, addr);
   26448:	4631      	mov	r1, r6
   2644a:	4628      	mov	r0, r5
   2644c:	f7e9 ff32 	bl	102b4 <bt_keys_get_addr>
	if (!keys) {
   26450:	b110      	cbz	r0, 26458 <bt_keys_get_type+0x1e>
	keys->keys |= type;
   26452:	89c3      	ldrh	r3, [r0, #14]
   26454:	431c      	orrs	r4, r3
   26456:	81c4      	strh	r4, [r0, #14]
}
   26458:	bd70      	pop	{r4, r5, r6, pc}

0002645a <bt_keys_add_type>:
	keys->keys |= type;
   2645a:	89c3      	ldrh	r3, [r0, #14]
   2645c:	4319      	orrs	r1, r3
   2645e:	81c1      	strh	r1, [r0, #14]
}
   26460:	4770      	bx	lr

00026462 <fixed_data_unref>:
}
   26462:	4770      	bx	lr

00026464 <net_buf_alloc_fixed>:
	const struct net_buf_pool_fixed *fixed = pool->alloc->alloc_data;
   26464:	6a01      	ldr	r1, [r0, #32]
	return net_buf_alloc_len(pool, fixed->data_size, timeout);
   26466:	6849      	ldr	r1, [r1, #4]
   26468:	6809      	ldr	r1, [r1, #0]
   2646a:	f7f7 b891 	b.w	1d590 <net_buf_alloc_len>

0002646e <net_buf_get>:
{
   2646e:	b570      	push	{r4, r5, r6, lr}
   26470:	4606      	mov	r6, r0
	return z_impl_k_queue_get(queue, timeout);
   26472:	f7f9 fc3b 	bl	1fcec <z_impl_k_queue_get>
	if (!buf) {
   26476:	4605      	mov	r5, r0
   26478:	b128      	cbz	r0, 26486 <net_buf_get+0x18>
   2647a:	4604      	mov	r4, r0
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2647c:	7963      	ldrb	r3, [r4, #5]
   2647e:	f013 0301 	ands.w	r3, r3, #1
   26482:	d102      	bne.n	2648a <net_buf_get+0x1c>
	frag->frags = NULL;
   26484:	6023      	str	r3, [r4, #0]
}
   26486:	4628      	mov	r0, r5
   26488:	bd70      	pop	{r4, r5, r6, pc}
   2648a:	2300      	movs	r3, #0
   2648c:	2200      	movs	r2, #0
   2648e:	4630      	mov	r0, r6
   26490:	f7f9 fc2c 	bl	1fcec <z_impl_k_queue_get>
		frag->flags &= ~NET_BUF_FRAGS;
   26494:	7963      	ldrb	r3, [r4, #5]
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   26496:	6020      	str	r0, [r4, #0]
		frag->flags &= ~NET_BUF_FRAGS;
   26498:	f023 0301 	bic.w	r3, r3, #1
   2649c:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   2649e:	4604      	mov	r4, r0
   264a0:	e7ec      	b.n	2647c <net_buf_get+0xe>

000264a2 <net_buf_simple_reserve>:
	buf->data = buf->__buf + reserve;
   264a2:	6883      	ldr	r3, [r0, #8]
   264a4:	440b      	add	r3, r1
   264a6:	6003      	str	r3, [r0, #0]
}
   264a8:	4770      	bx	lr

000264aa <net_buf_put>:
{
   264aa:	b410      	push	{r4}
	for (tail = buf; tail->frags; tail = tail->frags) {
   264ac:	460a      	mov	r2, r1
   264ae:	6814      	ldr	r4, [r2, #0]
   264b0:	b914      	cbnz	r4, 264b8 <net_buf_put+0xe>
}
   264b2:	bc10      	pop	{r4}
	k_fifo_put_list(fifo, buf, tail);
   264b4:	f000 bcdc 	b.w	26e70 <k_queue_append_list>
		tail->flags |= NET_BUF_FRAGS;
   264b8:	7953      	ldrb	r3, [r2, #5]
   264ba:	f043 0301 	orr.w	r3, r3, #1
   264be:	7153      	strb	r3, [r2, #5]
   264c0:	4622      	mov	r2, r4
   264c2:	e7f4      	b.n	264ae <net_buf_put+0x4>

000264c4 <net_buf_ref>:
{
	__ASSERT_NO_MSG(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   264c4:	7902      	ldrb	r2, [r0, #4]
   264c6:	3201      	adds	r2, #1
   264c8:	7102      	strb	r2, [r0, #4]
	return buf;
}
   264ca:	4770      	bx	lr

000264cc <net_buf_frag_last>:

	return clone;
}

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
   264cc:	4603      	mov	r3, r0
	__ASSERT_NO_MSG(buf);

	while (buf->frags) {
   264ce:	4618      	mov	r0, r3
   264d0:	681b      	ldr	r3, [r3, #0]
   264d2:	2b00      	cmp	r3, #0
   264d4:	d1fb      	bne.n	264ce <net_buf_frag_last+0x2>
		buf = buf->frags;
	}

	return buf;
}
   264d6:	4770      	bx	lr

000264d8 <net_buf_frag_insert>:
void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
	__ASSERT_NO_MSG(parent);
	__ASSERT_NO_MSG(frag);

	if (parent->frags) {
   264d8:	6802      	ldr	r2, [r0, #0]
{
   264da:	b510      	push	{r4, lr}
	if (parent->frags) {
   264dc:	b12a      	cbz	r2, 264ea <net_buf_frag_insert+0x12>
   264de:	460b      	mov	r3, r1
	while (buf->frags) {
   264e0:	461c      	mov	r4, r3
   264e2:	681b      	ldr	r3, [r3, #0]
   264e4:	2b00      	cmp	r3, #0
   264e6:	d1fb      	bne.n	264e0 <net_buf_frag_insert+0x8>
		net_buf_frag_last(frag)->frags = parent->frags;
   264e8:	6022      	str	r2, [r4, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   264ea:	6001      	str	r1, [r0, #0]
}
   264ec:	bd10      	pop	{r4, pc}

000264ee <net_buf_frag_add>:

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   264ee:	b510      	push	{r4, lr}
	__ASSERT_NO_MSG(frag);

	if (!head) {
   264f0:	4604      	mov	r4, r0
   264f2:	b920      	cbnz	r0, 264fe <net_buf_frag_add+0x10>
	buf->ref++;
   264f4:	790b      	ldrb	r3, [r1, #4]
   264f6:	3301      	adds	r3, #1
   264f8:	710b      	strb	r3, [r1, #4]
		return net_buf_ref(frag);
   264fa:	4608      	mov	r0, r1
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);

	return head;
}
   264fc:	bd10      	pop	{r4, pc}
   264fe:	4603      	mov	r3, r0
	while (buf->frags) {
   26500:	4618      	mov	r0, r3
   26502:	681b      	ldr	r3, [r3, #0]
   26504:	2b00      	cmp	r3, #0
   26506:	d1fb      	bne.n	26500 <net_buf_frag_add+0x12>
	net_buf_frag_insert(net_buf_frag_last(head), frag);
   26508:	f7ff ffe6 	bl	264d8 <net_buf_frag_insert>
   2650c:	4620      	mov	r0, r4
   2650e:	e7f5      	b.n	264fc <net_buf_frag_add+0xe>

00026510 <net_buf_simple_add>:
	return buf->data + buf->len;
   26510:	8883      	ldrh	r3, [r0, #4]
   26512:	6802      	ldr	r2, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   26514:	4419      	add	r1, r3
   26516:	8081      	strh	r1, [r0, #4]
	return tail;
}
   26518:	18d0      	adds	r0, r2, r3
   2651a:	4770      	bx	lr

0002651c <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   2651c:	b430      	push	{r4, r5}
   2651e:	8884      	ldrh	r4, [r0, #4]
   26520:	6805      	ldr	r5, [r0, #0]
	buf->len += len;
   26522:	18a3      	adds	r3, r4, r2
   26524:	8083      	strh	r3, [r0, #4]
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   26526:	1928      	adds	r0, r5, r4
}
   26528:	bc30      	pop	{r4, r5}
	return memcpy(net_buf_simple_add(buf, len), mem, len);
   2652a:	f7fd bf9d 	b.w	24468 <memcpy>

0002652e <net_buf_simple_add_u8>:
   2652e:	8883      	ldrh	r3, [r0, #4]
   26530:	6802      	ldr	r2, [r0, #0]

uint8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, uint8_t val)
{
   26532:	b510      	push	{r4, lr}
	buf->len += len;
   26534:	1c5c      	adds	r4, r3, #1
   26536:	8084      	strh	r4, [r0, #4]
	uint8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
	*u8 = val;
   26538:	54d1      	strb	r1, [r2, r3]

	return u8;
}
   2653a:	18d0      	adds	r0, r2, r3
   2653c:	bd10      	pop	{r4, pc}

0002653e <net_buf_simple_push>:

	return sys_be64_to_cpu(val);
}

void *net_buf_simple_push(struct net_buf_simple *buf, size_t len)
{
   2653e:	4603      	mov	r3, r0
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   26540:	6800      	ldr	r0, [r0, #0]
	buf->len += len;
   26542:	889a      	ldrh	r2, [r3, #4]
	buf->data -= len;
   26544:	1a40      	subs	r0, r0, r1
	buf->len += len;
   26546:	4411      	add	r1, r2
	buf->data -= len;
   26548:	6018      	str	r0, [r3, #0]
	buf->len += len;
   2654a:	8099      	strh	r1, [r3, #4]
	return buf->data;
}
   2654c:	4770      	bx	lr

0002654e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   2654e:	8882      	ldrh	r2, [r0, #4]
   26550:	1a52      	subs	r2, r2, r1
{
   26552:	4603      	mov	r3, r0
	buf->len -= len;
   26554:	8082      	strh	r2, [r0, #4]
	return buf->data += len;
   26556:	6800      	ldr	r0, [r0, #0]
   26558:	4408      	add	r0, r1
   2655a:	6018      	str	r0, [r3, #0]
}
   2655c:	4770      	bx	lr

0002655e <net_buf_simple_pull_mem>:

void *net_buf_simple_pull_mem(struct net_buf_simple *buf, size_t len)
{
   2655e:	4603      	mov	r3, r0
	void *data = buf->data;
   26560:	6800      	ldr	r0, [r0, #0]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	__ASSERT_NO_MSG(buf->len >= len);

	buf->len -= len;
   26562:	889a      	ldrh	r2, [r3, #4]
   26564:	1a52      	subs	r2, r2, r1
	buf->data += len;
   26566:	4401      	add	r1, r0
	buf->len -= len;
   26568:	809a      	strh	r2, [r3, #4]
	buf->data += len;
   2656a:	6019      	str	r1, [r3, #0]

	return data;
}
   2656c:	4770      	bx	lr

0002656e <net_buf_simple_pull_le16>:

	return val;
}

uint16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   2656e:	b510      	push	{r4, lr}
	uint16_t val;

	val = UNALIGNED_GET((uint16_t *)buf->data);
   26570:	6803      	ldr	r3, [r0, #0]
   26572:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   26574:	2102      	movs	r1, #2
   26576:	f7ff ffea 	bl	2654e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   2657a:	4620      	mov	r0, r4
   2657c:	bd10      	pop	{r4, pc}

0002657e <net_buf_simple_headroom>:
	return sys_be64_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   2657e:	6802      	ldr	r2, [r0, #0]
   26580:	6880      	ldr	r0, [r0, #8]
}
   26582:	1a10      	subs	r0, r2, r0
   26584:	4770      	bx	lr

00026586 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   26586:	8883      	ldrh	r3, [r0, #4]
   26588:	88c2      	ldrh	r2, [r0, #6]
   2658a:	1ad2      	subs	r2, r2, r3
	return buf->data - buf->__buf;
   2658c:	6803      	ldr	r3, [r0, #0]
   2658e:	6880      	ldr	r0, [r0, #8]
   26590:	1a18      	subs	r0, r3, r0
}
   26592:	1a10      	subs	r0, r2, r0
   26594:	4770      	bx	lr

00026596 <gpio_nrfx_port_get_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   26596:	6843      	ldr	r3, [r0, #4]
   26598:	685b      	ldr	r3, [r3, #4]
    return p_reg->IN;
   2659a:	f8d3 3510 	ldr.w	r3, [r3, #1296]	; 0x510
	*value = nrf_gpio_port_in_read(reg);
   2659e:	600b      	str	r3, [r1, #0]
}
   265a0:	2000      	movs	r0, #0
   265a2:	4770      	bx	lr

000265a4 <gpio_nrfx_port_set_masked_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   265a4:	6843      	ldr	r3, [r0, #4]
   265a6:	685b      	ldr	r3, [r3, #4]
    return p_reg->OUT;
   265a8:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value_tmp | (mask & value));
   265ac:	4042      	eors	r2, r0
   265ae:	400a      	ands	r2, r1
   265b0:	4042      	eors	r2, r0
    p_reg->OUT = value;
   265b2:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
}
   265b6:	2000      	movs	r0, #0
   265b8:	4770      	bx	lr

000265ba <gpio_nrfx_port_set_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   265ba:	6843      	ldr	r3, [r0, #4]
   265bc:	685b      	ldr	r3, [r3, #4]
}
   265be:	2000      	movs	r0, #0
    p_reg->OUTSET = set_mask;
   265c0:	f8c3 1508 	str.w	r1, [r3, #1288]	; 0x508
   265c4:	4770      	bx	lr

000265c6 <gpio_nrfx_port_clear_bits_raw>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   265c6:	6843      	ldr	r3, [r0, #4]
   265c8:	685b      	ldr	r3, [r3, #4]
}
   265ca:	2000      	movs	r0, #0
    p_reg->OUTCLR = clr_mask;
   265cc:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
   265d0:	4770      	bx	lr

000265d2 <gpio_nrfx_port_toggle_bits>:
	NRF_GPIO_Type *reg = get_port_cfg(port)->port;
   265d2:	6843      	ldr	r3, [r0, #4]
   265d4:	685a      	ldr	r2, [r3, #4]
    return p_reg->OUT;
   265d6:	f8d2 3504 	ldr.w	r3, [r2, #1284]	; 0x504
	nrf_gpio_port_out_write(reg, value ^ mask);
   265da:	404b      	eors	r3, r1
    p_reg->OUT = value;
   265dc:	f8c2 3504 	str.w	r3, [r2, #1284]	; 0x504
}
   265e0:	2000      	movs	r0, #0
   265e2:	4770      	bx	lr

000265e4 <gpio_nrfx_manage_callback>:
	return port->data;
   265e4:	68c3      	ldr	r3, [r0, #12]
	return list->head;
   265e6:	6858      	ldr	r0, [r3, #4]
{
   265e8:	b530      	push	{r4, r5, lr}
					bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (!sys_slist_is_empty(callbacks)) {
   265ea:	b158      	cbz	r0, 26604 <gpio_nrfx_manage_callback+0x20>
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   265ec:	2400      	movs	r4, #0
   265ee:	4281      	cmp	r1, r0
   265f0:	d112      	bne.n	26618 <gpio_nrfx_manage_callback+0x34>
	return node->next;
   265f2:	6808      	ldr	r0, [r1, #0]
	return list->tail;
   265f4:	689d      	ldr	r5, [r3, #8]
Z_GENLIST_REMOVE(slist, snode)
   265f6:	b954      	cbnz	r4, 2660e <gpio_nrfx_manage_callback+0x2a>
   265f8:	428d      	cmp	r5, r1
	list->head = node;
   265fa:	6058      	str	r0, [r3, #4]
Z_GENLIST_REMOVE(slist, snode)
   265fc:	d100      	bne.n	26600 <gpio_nrfx_manage_callback+0x1c>
	list->tail = node;
   265fe:	6098      	str	r0, [r3, #8]
	parent->next = child;
   26600:	2000      	movs	r0, #0
   26602:	6008      	str	r0, [r1, #0]
				return -EINVAL;
			}
		}
	}

	if (set) {
   26604:	b96a      	cbnz	r2, 26622 <gpio_nrfx_manage_callback+0x3e>
		sys_slist_prepend(callbacks, &callback->node);
	}

	return 0;
   26606:	2000      	movs	r0, #0
}
   26608:	bd30      	pop	{r4, r5, pc}
   2660a:	4628      	mov	r0, r5
   2660c:	e7ef      	b.n	265ee <gpio_nrfx_manage_callback+0xa>
Z_GENLIST_REMOVE(slist, snode)
   2660e:	428d      	cmp	r5, r1
	parent->next = child;
   26610:	6020      	str	r0, [r4, #0]
	list->tail = node;
   26612:	bf08      	it	eq
   26614:	609c      	streq	r4, [r3, #8]
}
   26616:	e7f3      	b.n	26600 <gpio_nrfx_manage_callback+0x1c>
	return node->next;
   26618:	6805      	ldr	r5, [r0, #0]
Z_GENLIST_FIND_AND_REMOVE(slist, snode)
   2661a:	4604      	mov	r4, r0
   2661c:	2d00      	cmp	r5, #0
   2661e:	d1f4      	bne.n	2660a <gpio_nrfx_manage_callback+0x26>
			if (!set) {
   26620:	b13a      	cbz	r2, 26632 <gpio_nrfx_manage_callback+0x4e>
Z_GENLIST_PREPEND(slist, snode)
   26622:	6898      	ldr	r0, [r3, #8]
	parent->next = child;
   26624:	685a      	ldr	r2, [r3, #4]
   26626:	600a      	str	r2, [r1, #0]
	list->head = node;
   26628:	6059      	str	r1, [r3, #4]
Z_GENLIST_PREPEND(slist, snode)
   2662a:	2800      	cmp	r0, #0
   2662c:	d1eb      	bne.n	26606 <gpio_nrfx_manage_callback+0x22>
	list->tail = node;
   2662e:	6099      	str	r1, [r3, #8]
}
   26630:	e7ea      	b.n	26608 <gpio_nrfx_manage_callback+0x24>
				return -EINVAL;
   26632:	f06f 0015 	mvn.w	r0, #21
	return gpio_manage_callback(&get_port_data(port)->callbacks,
   26636:	e7e7      	b.n	26608 <gpio_nrfx_manage_callback+0x24>

00026638 <gpio_fire_callbacks.isra.0>:
 *
 * @param list A pointer on the gpio callback list
 * @param port A pointer on the gpio driver instance
 * @param pins The actual pin mask that triggered the interrupt
 */
static inline void gpio_fire_callbacks(sys_slist_t *list,
   26638:	b570      	push	{r4, r5, r6, lr}
   2663a:	460e      	mov	r6, r1
   2663c:	4615      	mov	r5, r2
					const struct device *port,
					uint32_t pins)
{
	struct gpio_callback *cb, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   2663e:	4601      	mov	r1, r0
   26640:	b150      	cbz	r0, 26658 <gpio_fire_callbacks.isra.0+0x20>
	return node->next;
   26642:	6804      	ldr	r4, [r0, #0]
		if (cb->pin_mask & pins) {
   26644:	688a      	ldr	r2, [r1, #8]
   26646:	402a      	ands	r2, r5
   26648:	d002      	beq.n	26650 <gpio_fire_callbacks.isra.0+0x18>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, cb->pin_mask & pins);
   2664a:	684b      	ldr	r3, [r1, #4]
   2664c:	4630      	mov	r0, r6
   2664e:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(list, cb, tmp, node) {
   26650:	b114      	cbz	r4, 26658 <gpio_fire_callbacks.isra.0+0x20>
   26652:	4621      	mov	r1, r4
   26654:	6824      	ldr	r4, [r4, #0]
   26656:	e7f5      	b.n	26644 <gpio_fire_callbacks.isra.0+0xc>
		}
	}
}
   26658:	bd70      	pop	{r4, r5, r6, pc}

0002665a <cfg_level_pins>:
{
   2665a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	return port->data;
   2665e:	68c7      	ldr	r7, [r0, #12]
	return port->config;
   26660:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t out = data->pin_int_en;
   26664:	68fc      	ldr	r4, [r7, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   26666:	e9d7 3205 	ldrd	r3, r2, [r7, #20]
   2666a:	4313      	orrs	r3, r2
   2666c:	ea24 0403 	bic.w	r4, r4, r3
	uint32_t bit = 1U << pin;
   26670:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   26672:	2500      	movs	r5, #0
	while (level_pins) {
   26674:	b90c      	cbnz	r4, 2667a <cfg_level_pins+0x20>
}
   26676:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   2667a:	4226      	tst	r6, r4
   2667c:	d010      	beq.n	266a0 <cfg_level_pins+0x46>
	if ((BIT(pin) & data->int_active_level) != 0U) {
   2667e:	6939      	ldr	r1, [r7, #16]
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   26680:	f898 3008 	ldrb.w	r3, [r8, #8]
	if ((BIT(pin) & data->int_active_level) != 0U) {
   26684:	40e9      	lsrs	r1, r5
   26686:	f001 0101 	and.w	r1, r1, #1
   2668a:	f1c1 0103 	rsb	r1, r1, #3
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   2668e:	f005 001f 	and.w	r0, r5, #31
			nrf_gpio_cfg_sense_set(abs_pin, sense);
   26692:	b2c9      	uxtb	r1, r1
   26694:	ea40 1043 	orr.w	r0, r0, r3, lsl #5
   26698:	f7f7 f8b4 	bl	1d804 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   2669c:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   266a0:	3501      	adds	r5, #1
		bit <<= 1;
   266a2:	0076      	lsls	r6, r6, #1
   266a4:	e7e6      	b.n	26674 <cfg_level_pins+0x1a>

000266a6 <check_level_trigger_pins>:
	return port->data;
   266a6:	68c3      	ldr	r3, [r0, #12]
	out &= ~data->trig_edge & ~data->double_edge;
   266a8:	e9d3 2105 	ldrd	r2, r1, [r3, #20]
{
   266ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t out = data->pin_int_en;
   266b0:	68dc      	ldr	r4, [r3, #12]
	return port->config;
   266b2:	f8d0 8004 	ldr.w	r8, [r0, #4]
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   266b6:	691b      	ldr	r3, [r3, #16]
	out &= ~data->trig_edge & ~data->double_edge;
   266b8:	430a      	orrs	r2, r1
   266ba:	ea24 0402 	bic.w	r4, r4, r2
	uint32_t port_in = nrf_gpio_port_in_read(cfg->port);
   266be:	f8d8 2004 	ldr.w	r2, [r8, #4]
    return p_reg->IN;
   266c2:	f8d2 5510 	ldr.w	r5, [r2, #1296]	; 0x510
	uint32_t pin_states = ~(port_in ^ data->int_active_level);
   266c6:	405d      	eors	r5, r3
	uint32_t out = pin_states & level_pins;
   266c8:	ea24 0505 	bic.w	r5, r4, r5
	uint32_t bit = 1U << pin;
   266cc:	2601      	movs	r6, #1
	uint32_t pin = 0U;
   266ce:	2700      	movs	r7, #0
	while (level_pins) {
   266d0:	b914      	cbnz	r4, 266d8 <check_level_trigger_pins+0x32>
}
   266d2:	4628      	mov	r0, r5
   266d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (level_pins & bit) {
   266d8:	4234      	tst	r4, r6
   266da:	d00a      	beq.n	266f2 <check_level_trigger_pins+0x4c>
			uint32_t abs_pin = NRF_GPIO_PIN_MAP(cfg->port_num, pin);
   266dc:	f898 0008 	ldrb.w	r0, [r8, #8]
   266e0:	f007 031f 	and.w	r3, r7, #31
			nrf_gpio_cfg_sense_set(abs_pin, NRF_GPIO_PIN_NOSENSE);
   266e4:	2100      	movs	r1, #0
   266e6:	ea43 1040 	orr.w	r0, r3, r0, lsl #5
   266ea:	f7f7 f88b 	bl	1d804 <nrf_gpio_cfg_sense_set>
			level_pins &= ~bit;
   266ee:	ea24 0406 	bic.w	r4, r4, r6
		++pin;
   266f2:	3701      	adds	r7, #1
		bit <<= 1;
   266f4:	0076      	lsls	r6, r6, #1
   266f6:	e7eb      	b.n	266d0 <check_level_trigger_pins+0x2a>

000266f8 <gpio_pin_set.isra.0>:

	(void)cfg;
	__ASSERT((cfg->port_pin_mask & (gpio_port_pins_t)BIT(pin)) != 0U,
		 "Unsupported pin");

	if (data->invert & (gpio_port_pins_t)BIT(pin)) {
   266f8:	2301      	movs	r3, #1
   266fa:	fa03 f101 	lsl.w	r1, r3, r1
   266fe:	68c3      	ldr	r3, [r0, #12]
   26700:	681b      	ldr	r3, [r3, #0]
   26702:	4219      	tst	r1, r3
		value = (value != 0) ? 0 : 1;
   26704:	bf18      	it	ne
   26706:	f082 0201 	eorne.w	r2, r2, #1
	if (value != 0)	{
   2670a:	b112      	cbz	r2, 26712 <gpio_pin_set.isra.0+0x1a>
	return api->port_set_bits_raw(port, pins);
   2670c:	6883      	ldr	r3, [r0, #8]
   2670e:	68db      	ldr	r3, [r3, #12]
	return api->port_clear_bits_raw(port, pins);
   26710:	4718      	bx	r3
   26712:	6883      	ldr	r3, [r0, #8]
   26714:	691b      	ldr	r3, [r3, #16]
   26716:	e7fb      	b.n	26710 <gpio_pin_set.isra.0+0x18>

00026718 <_spi_context_cs_control>:
{
   26718:	b538      	push	{r3, r4, r5, lr}
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2671a:	6805      	ldr	r5, [r0, #0]
{
   2671c:	4604      	mov	r4, r0
	if (ctx->config && ctx->config->cs && ctx->config->cs->gpio_dev) {
   2671e:	b1fd      	cbz	r5, 26760 <_spi_context_cs_control+0x48>
   26720:	68ab      	ldr	r3, [r5, #8]
   26722:	b1eb      	cbz	r3, 26760 <_spi_context_cs_control+0x48>
   26724:	6818      	ldr	r0, [r3, #0]
   26726:	b1d8      	cbz	r0, 26760 <_spi_context_cs_control+0x48>
		if (on) {
   26728:	b151      	cbz	r1, 26740 <_spi_context_cs_control+0x28>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2672a:	7a19      	ldrb	r1, [r3, #8]
   2672c:	2201      	movs	r2, #1
   2672e:	f7ff ffe3 	bl	266f8 <gpio_pin_set.isra.0>
			k_busy_wait(ctx->config->cs->delay);
   26732:	6823      	ldr	r3, [r4, #0]
   26734:	689b      	ldr	r3, [r3, #8]
   26736:	6858      	ldr	r0, [r3, #4]
}
   26738:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
	z_impl_k_busy_wait(usec_to_wait);
   2673c:	f000 bcd7 	b.w	270ee <z_impl_k_busy_wait>
			if (!force_off &&
   26740:	b912      	cbnz	r2, 26748 <_spi_context_cs_control+0x30>
   26742:	88aa      	ldrh	r2, [r5, #4]
   26744:	0492      	lsls	r2, r2, #18
   26746:	d40b      	bmi.n	26760 <_spi_context_cs_control+0x48>
			k_busy_wait(ctx->config->cs->delay);
   26748:	6858      	ldr	r0, [r3, #4]
   2674a:	f000 fcd0 	bl	270ee <z_impl_k_busy_wait>
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2674e:	6823      	ldr	r3, [r4, #0]
   26750:	689b      	ldr	r3, [r3, #8]
   26752:	2200      	movs	r2, #0
   26754:	7a19      	ldrb	r1, [r3, #8]
   26756:	6818      	ldr	r0, [r3, #0]
}
   26758:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
			gpio_pin_set(ctx->config->cs->gpio_dev,
   2675c:	f7ff bfcc 	b.w	266f8 <gpio_pin_set.isra.0>
}
   26760:	bd38      	pop	{r3, r4, r5, pc}

00026762 <spi_context_unlock_unconditionally>:
{
   26762:	b510      	push	{r4, lr}
	_spi_context_cs_control(ctx, false, true);
   26764:	2201      	movs	r2, #1
   26766:	2100      	movs	r1, #0
{
   26768:	4604      	mov	r4, r0
	_spi_context_cs_control(ctx, false, true);
   2676a:	f7ff ffd5 	bl	26718 <_spi_context_cs_control>
	if (!k_sem_count_get(&ctx->lock)) {
   2676e:	6923      	ldr	r3, [r4, #16]
   26770:	b933      	cbnz	r3, 26780 <spi_context_unlock_unconditionally+0x1e>
		ctx->owner = NULL;
   26772:	6063      	str	r3, [r4, #4]
	z_impl_k_sem_give(sem);
   26774:	f104 0008 	add.w	r0, r4, #8
}
   26778:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   2677c:	f7f9 be72 	b.w	20464 <z_impl_k_sem_give>
   26780:	bd10      	pop	{r4, pc}

00026782 <spi_nrfx_release>:
	return dev->data;
   26782:	68c0      	ldr	r0, [r0, #12]
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   26784:	6803      	ldr	r3, [r0, #0]
   26786:	428b      	cmp	r3, r1
{
   26788:	b510      	push	{r4, lr}
	if (!spi_context_configured(&dev_data->ctx, spi_cfg)) {
   2678a:	d106      	bne.n	2679a <spi_nrfx_release+0x18>
	if (dev_data->busy) {
   2678c:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
   26790:	b934      	cbnz	r4, 267a0 <spi_nrfx_release+0x1e>
	spi_context_unlock_unconditionally(&dev_data->ctx);
   26792:	f7ff ffe6 	bl	26762 <spi_context_unlock_unconditionally>
	return 0;
   26796:	4620      	mov	r0, r4
}
   26798:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2679a:	f06f 0015 	mvn.w	r0, #21
   2679e:	e7fb      	b.n	26798 <spi_nrfx_release+0x16>
		return -EBUSY;
   267a0:	f06f 000f 	mvn.w	r0, #15
   267a4:	e7f8      	b.n	26798 <spi_nrfx_release+0x16>

000267a6 <flash_nrf_write_protection>:
}
   267a6:	2000      	movs	r0, #0
   267a8:	4770      	bx	lr

000267aa <is_regular_addr_valid>:
{
   267aa:	b538      	push	{r3, r4, r5, lr}
   267ac:	4604      	mov	r4, r0
   267ae:	460d      	mov	r5, r1
	size_t flash_size = nrfx_nvmc_flash_size_get();
   267b0:	f000 f92f 	bl	26a12 <nrfx_nvmc_flash_size_get>
	if (addr >= flash_size ||
   267b4:	4284      	cmp	r4, r0
   267b6:	d209      	bcs.n	267cc <is_regular_addr_valid+0x22>
   267b8:	2c00      	cmp	r4, #0
   267ba:	db07      	blt.n	267cc <is_regular_addr_valid+0x22>
	    addr < 0 ||
   267bc:	42a8      	cmp	r0, r5
   267be:	d305      	bcc.n	267cc <is_regular_addr_valid+0x22>
	    (addr) + len > flash_size) {
   267c0:	442c      	add	r4, r5
	    len > flash_size ||
   267c2:	4284      	cmp	r4, r0
   267c4:	bf8c      	ite	hi
   267c6:	2000      	movhi	r0, #0
   267c8:	2001      	movls	r0, #1
}
   267ca:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   267cc:	2000      	movs	r0, #0
   267ce:	e7fc      	b.n	267ca <is_regular_addr_valid+0x20>

000267d0 <erase_op>:
{
   267d0:	b570      	push	{r4, r5, r6, lr}
   267d2:	4604      	mov	r4, r0
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   267d4:	f000 f923 	bl	26a1e <nrfx_nvmc_flash_page_size_get>
	if (e_ctx->enable_time_limit) {
   267d8:	7b23      	ldrb	r3, [r4, #12]
	uint32_t pg_size = nrfx_nvmc_flash_page_size_get();
   267da:	4605      	mov	r5, r0
	if (e_ctx->enable_time_limit) {
   267dc:	b10b      	cbz	r3, 267e2 <erase_op+0x12>
		nrf_flash_sync_get_timestamp_begin();
   267de:	f7f7 fe3d 	bl	1e45c <nrf_flash_sync_get_timestamp_begin>
{
   267e2:	2600      	movs	r6, #0
		(void)nrfx_nvmc_page_erase(e_ctx->flash_addr);
   267e4:	6860      	ldr	r0, [r4, #4]
   267e6:	f7f8 fb85 	bl	1eef4 <nrfx_nvmc_page_erase>
		e_ctx->len -= pg_size;
   267ea:	68a3      	ldr	r3, [r4, #8]
   267ec:	1b5b      	subs	r3, r3, r5
   267ee:	60a3      	str	r3, [r4, #8]
		e_ctx->flash_addr += pg_size;
   267f0:	6863      	ldr	r3, [r4, #4]
   267f2:	442b      	add	r3, r5
   267f4:	6063      	str	r3, [r4, #4]
		if (e_ctx->enable_time_limit) {
   267f6:	7b23      	ldrb	r3, [r4, #12]
		i++;
   267f8:	3601      	adds	r6, #1
		if (e_ctx->enable_time_limit) {
   267fa:	b943      	cbnz	r3, 2680e <erase_op+0x3e>
	} while (e_ctx->len > 0);
   267fc:	68a3      	ldr	r3, [r4, #8]
   267fe:	2b00      	cmp	r3, #0
   26800:	d1f0      	bne.n	267e4 <erase_op+0x14>
	return (e_ctx->len > 0) ? FLASH_OP_ONGOING : FLASH_OP_DONE;
   26802:	68a0      	ldr	r0, [r4, #8]
   26804:	3800      	subs	r0, #0
   26806:	bf18      	it	ne
   26808:	2001      	movne	r0, #1
}
   2680a:	4240      	negs	r0, r0
   2680c:	bd70      	pop	{r4, r5, r6, pc}
			if (nrf_flash_sync_check_time_limit(i)) {
   2680e:	4630      	mov	r0, r6
   26810:	f7dc f902 	bl	2a18 <nrf_flash_sync_check_time_limit>
   26814:	2800      	cmp	r0, #0
   26816:	d0f1      	beq.n	267fc <erase_op+0x2c>
   26818:	e7f3      	b.n	26802 <erase_op+0x32>

0002681a <nrf_flash_sync_is_required>:
	return ticker_is_initialized(0);
   2681a:	2000      	movs	r0, #0
   2681c:	f7eb b94a 	b.w	11ab4 <ticker_is_initialized>

00026820 <flash_get_page_info>:

#include <drivers/flash.h>

static int flash_get_page_info(const struct device *dev, off_t offs,
				   bool use_addr, struct flash_pages_info *info)
{
   26820:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
   26824:	461e      	mov	r6, r3
	off_t group_offs = 0;
	uint32_t num_in_group;
	off_t end = 0;
	size_t layout_size;

	api->page_layout(dev, &layout, &layout_size);
   26826:	6883      	ldr	r3, [r0, #8]
{
   26828:	460c      	mov	r4, r1
	api->page_layout(dev, &layout, &layout_size);
   2682a:	695b      	ldr	r3, [r3, #20]
   2682c:	4669      	mov	r1, sp
{
   2682e:	4617      	mov	r7, r2
	api->page_layout(dev, &layout, &layout_size);
   26830:	aa01      	add	r2, sp, #4
   26832:	4798      	blx	r3

	while (layout_size--) {
   26834:	e9dd 1000 	ldrd	r1, r0, [sp]
   26838:	2300      	movs	r3, #0
   2683a:	3801      	subs	r0, #1
	off_t end = 0;
   2683c:	461d      	mov	r5, r3
	off_t group_offs = 0;
   2683e:	469e      	mov	lr, r3
	size_t page_count = 0;
   26840:	469c      	mov	ip, r3
	while (layout_size--) {
   26842:	1c42      	adds	r2, r0, #1
   26844:	d102      	bne.n	2684c <flash_get_page_info+0x2c>
		page_count += layout->pages_count;

		layout++;
	}

	return -EINVAL; /* page of the index doesn't exist */
   26846:	f06f 0015 	mvn.w	r0, #21
   2684a:	e019      	b.n	26880 <flash_get_page_info+0x60>
			end += layout->pages_count * layout->pages_size;
   2684c:	680a      	ldr	r2, [r1, #0]
		if (use_addr) {
   2684e:	b1d7      	cbz	r7, 26886 <flash_get_page_info+0x66>
			end += layout->pages_count * layout->pages_size;
   26850:	f8d1 8004 	ldr.w	r8, [r1, #4]
   26854:	fb08 5502 	mla	r5, r8, r2, r5
		if (offs < end) {
   26858:	42a5      	cmp	r5, r4
   2685a:	f100 30ff 	add.w	r0, r0, #4294967295
   2685e:	dd17      	ble.n	26890 <flash_get_page_info+0x70>
   26860:	b103      	cbz	r3, 26864 <flash_get_page_info+0x44>
   26862:	9100      	str	r1, [sp, #0]
			info->size = layout->pages_size;
   26864:	9b00      	ldr	r3, [sp, #0]
   26866:	685b      	ldr	r3, [r3, #4]
   26868:	6073      	str	r3, [r6, #4]
			if (use_addr) {
   2686a:	b177      	cbz	r7, 2688a <flash_get_page_info+0x6a>
				num_in_group = (offs - group_offs) /
   2686c:	eba4 040e 	sub.w	r4, r4, lr
   26870:	fbb4 f4f3 	udiv	r4, r4, r3
			info->start_offset = group_offs +
   26874:	fb04 e303 	mla	r3, r4, r3, lr
			info->index = page_count + num_in_group;
   26878:	4464      	add	r4, ip
			info->start_offset = group_offs +
   2687a:	6033      	str	r3, [r6, #0]
			info->index = page_count + num_in_group;
   2687c:	60b4      	str	r4, [r6, #8]
			return 0;
   2687e:	2000      	movs	r0, #0
}
   26880:	b002      	add	sp, #8
   26882:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			end += layout->pages_count;
   26886:	4415      	add	r5, r2
   26888:	e7e6      	b.n	26858 <flash_get_page_info+0x38>
				num_in_group = offs - page_count;
   2688a:	eba4 040c 	sub.w	r4, r4, ip
   2688e:	e7f1      	b.n	26874 <flash_get_page_info+0x54>
		group_offs += layout->pages_count * layout->pages_size;
   26890:	684b      	ldr	r3, [r1, #4]
		page_count += layout->pages_count;
   26892:	4494      	add	ip, r2
		group_offs += layout->pages_count * layout->pages_size;
   26894:	fb03 ee02 	mla	lr, r3, r2, lr
		layout++;
   26898:	3108      	adds	r1, #8
   2689a:	2301      	movs	r3, #1
   2689c:	e7d1      	b.n	26842 <flash_get_page_info+0x22>

0002689e <z_impl_flash_get_page_info_by_offs>:

int z_impl_flash_get_page_info_by_offs(const struct device *dev, off_t offs,
				       struct flash_pages_info *info)
{
   2689e:	4613      	mov	r3, r2
	return flash_get_page_info(dev, offs, true, info);
   268a0:	2201      	movs	r2, #1
   268a2:	f7ff bfbd 	b.w	26820 <flash_get_page_info>

000268a6 <flash_page_foreach>:
	return count;
}

void flash_page_foreach(const struct device *dev, flash_page_cb cb,
			void *data)
{
   268a6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	const struct flash_pages_layout *layout;
	struct flash_pages_info page_info;
	size_t block, num_blocks, page = 0, i;
	off_t off = 0;

	api->page_layout(dev, &layout, &num_blocks);
   268aa:	6883      	ldr	r3, [r0, #8]
{
   268ac:	b086      	sub	sp, #24
	api->page_layout(dev, &layout, &num_blocks);
   268ae:	695b      	ldr	r3, [r3, #20]
{
   268b0:	4688      	mov	r8, r1
   268b2:	4691      	mov	r9, r2
	api->page_layout(dev, &layout, &num_blocks);
   268b4:	a901      	add	r1, sp, #4
   268b6:	aa02      	add	r2, sp, #8
   268b8:	4798      	blx	r3
	off_t off = 0;
   268ba:	2400      	movs	r4, #0
	size_t block, num_blocks, page = 0, i;
   268bc:	46a2      	mov	sl, r4

	for (block = 0; block < num_blocks; block++) {
   268be:	4625      	mov	r5, r4
   268c0:	9b02      	ldr	r3, [sp, #8]
   268c2:	42ab      	cmp	r3, r5
   268c4:	d802      	bhi.n	268cc <flash_page_foreach+0x26>

			off += page_info.size;
			page++;
		}
	}
}
   268c6:	b006      	add	sp, #24
   268c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		const struct flash_pages_layout *l = &layout[block];
   268cc:	9f01      	ldr	r7, [sp, #4]
   268ce:	eb07 07c5 	add.w	r7, r7, r5, lsl #3
		for (i = 0; i < l->pages_count; i++) {
   268d2:	2600      	movs	r6, #0
		page_info.size = l->pages_size;
   268d4:	687b      	ldr	r3, [r7, #4]
   268d6:	9304      	str	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   268d8:	683a      	ldr	r2, [r7, #0]
   268da:	42b2      	cmp	r2, r6
   268dc:	eb0a 0306 	add.w	r3, sl, r6
   268e0:	d802      	bhi.n	268e8 <flash_page_foreach+0x42>
	for (block = 0; block < num_blocks; block++) {
   268e2:	3501      	adds	r5, #1
   268e4:	469a      	mov	sl, r3
   268e6:	e7eb      	b.n	268c0 <flash_page_foreach+0x1a>
			if (!cb(&page_info, data)) {
   268e8:	4649      	mov	r1, r9
   268ea:	a803      	add	r0, sp, #12
			page_info.start_offset = off;
   268ec:	9403      	str	r4, [sp, #12]
			page_info.index = page;
   268ee:	9305      	str	r3, [sp, #20]
			if (!cb(&page_info, data)) {
   268f0:	47c0      	blx	r8
   268f2:	2800      	cmp	r0, #0
   268f4:	d0e7      	beq.n	268c6 <flash_page_foreach+0x20>
			off += page_info.size;
   268f6:	9b04      	ldr	r3, [sp, #16]
		for (i = 0; i < l->pages_count; i++) {
   268f8:	3601      	adds	r6, #1
			off += page_info.size;
   268fa:	441c      	add	r4, r3
		for (i = 0; i < l->pages_count; i++) {
   268fc:	e7ec      	b.n	268d8 <flash_page_foreach+0x32>

000268fe <uarte_nrfx_config_get>:
	*cfg = get_dev_data(dev)->uart_config;
   268fe:	68c2      	ldr	r2, [r0, #12]
{
   26900:	460b      	mov	r3, r1
	*cfg = get_dev_data(dev)->uart_config;
   26902:	e9d2 0101 	ldrd	r0, r1, [r2, #4]
   26906:	e883 0003 	stmia.w	r3, {r0, r1}
}
   2690a:	2000      	movs	r0, #0
   2690c:	4770      	bx	lr

0002690e <uarte_nrfx_err_check>:
	return config->uarte_regs;
   2690e:	6843      	ldr	r3, [r0, #4]
   26910:	681b      	ldr	r3, [r3, #0]
    uint32_t errsrc_mask = p_reg->ERRORSRC;
   26912:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480
    p_reg->ERRORSRC = errsrc_mask;
   26916:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
}
   2691a:	4770      	bx	lr

0002691c <uarte_nrfx_poll_in>:
	return config->uarte_regs;
   2691c:	6843      	ldr	r3, [r0, #4]
	return dev->data;
   2691e:	68c2      	ldr	r2, [r0, #12]
	return config->uarte_regs;
   26920:	681b      	ldr	r3, [r3, #0]
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26922:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
	if (!nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDRX)) {
   26926:	b148      	cbz	r0, 2693c <uarte_nrfx_poll_in+0x20>
	*c = data->rx_data;
   26928:	7c52      	ldrb	r2, [r2, #17]
   2692a:	700a      	strb	r2, [r1, #0]
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   2692c:	2000      	movs	r0, #0
   2692e:	f8c3 0110 	str.w	r0, [r3, #272]	; 0x110
   26932:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26936:	2201      	movs	r2, #1
   26938:	601a      	str	r2, [r3, #0]
	return 0;
   2693a:	4770      	bx	lr
		return -1;
   2693c:	f04f 30ff 	mov.w	r0, #4294967295
}
   26940:	4770      	bx	lr

00026942 <is_tx_ready.isra.0>:
	return config->uarte_regs;
   26942:	6802      	ldr	r2, [r0, #0]
static bool is_tx_ready(const struct device *dev)
   26944:	4603      	mov	r3, r0
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26946:	f8d2 0158 	ldr.w	r0, [r2, #344]	; 0x158
	return nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_TXSTOPPED) ||
   2694a:	b938      	cbnz	r0, 2695c <is_tx_ready.isra.0+0x1a>
   2694c:	799b      	ldrb	r3, [r3, #6]
   2694e:	b933      	cbnz	r3, 2695e <is_tx_ready.isra.0+0x1c>
   26950:	f8d2 0120 	ldr.w	r0, [r2, #288]	; 0x120
   26954:	3800      	subs	r0, #0
   26956:	bf18      	it	ne
   26958:	2001      	movne	r0, #1
   2695a:	4770      	bx	lr
   2695c:	2001      	movs	r0, #1
}
   2695e:	4770      	bx	lr

00026960 <uarte_nrfx_isr_int>:
	return config->uarte_regs;
   26960:	6843      	ldr	r3, [r0, #4]
   26962:	681b      	ldr	r3, [r3, #0]
    return p_reg->INTENSET & mask;
   26964:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	if (nrf_uarte_int_enable_check(uarte, NRF_UARTE_INT_ENDTX_MASK) &&
   26968:	05d2      	lsls	r2, r2, #23
   2696a:	d518      	bpl.n	2699e <uarte_nrfx_isr_int+0x3e>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   2696c:	f8d3 2120 	ldr.w	r2, [r3, #288]	; 0x120
   26970:	b1aa      	cbz	r2, 2699e <uarte_nrfx_isr_int+0x3e>
	__asm__ volatile(
   26972:	f04f 0120 	mov.w	r1, #32
   26976:	f3ef 8211 	mrs	r2, BASEPRI
   2697a:	f381 8811 	msr	BASEPRI, r1
   2697e:	f3bf 8f6f 	isb	sy
   26982:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
	if (nrf_uarte_event_check(uarte, NRF_UARTE_EVENT_ENDTX)) {
   26986:	b131      	cbz	r1, 26996 <uarte_nrfx_isr_int+0x36>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26988:	2100      	movs	r1, #0
   2698a:	f8c3 1120 	str.w	r1, [r3, #288]	; 0x120
   2698e:	f8d3 1120 	ldr.w	r1, [r3, #288]	; 0x120
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26992:	2101      	movs	r1, #1
   26994:	60d9      	str	r1, [r3, #12]
	__asm__ volatile(
   26996:	f382 8811 	msr	BASEPRI, r2
   2699a:	f3bf 8f6f 	isb	sy
}
   2699e:	4770      	bx	lr

000269a0 <nrfx_isr>:
#include <nrfx.h>
#include <kernel.h>

void nrfx_isr(const void *irq_handler)
{
	((nrfx_irq_handler_t)irq_handler)();
   269a0:	4700      	bx	r0

000269a2 <nrfx_busy_wait>:
	z_impl_k_busy_wait(usec_to_wait);
   269a2:	f000 bba4 	b.w	270ee <z_impl_k_busy_wait>

000269a6 <nrfx_clock_enable>:
{
   269a6:	b508      	push	{r3, lr}
    priority = NRFX_CLOCK_DEFAULT_CONFIG_IRQ_PRIORITY;
#else
    #error "This code is not supposed to be compiled when neither POWER nor CLOCK is enabled."
#endif

    if (!NRFX_IRQ_IS_ENABLED(nrfx_get_irq_number(NRF_CLOCK)))
   269a8:	2000      	movs	r0, #0
   269aa:	f7e0 fef3 	bl	7794 <arch_irq_is_enabled>
   269ae:	b918      	cbnz	r0, 269b8 <nrfx_clock_enable+0x12>
}
   269b0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    {
        NRFX_IRQ_PRIORITY_SET(nrfx_get_irq_number(NRF_CLOCK), priority);
        NRFX_IRQ_ENABLE(nrfx_get_irq_number(NRF_CLOCK));
   269b4:	f7e0 beca 	b.w	774c <arch_irq_enable>
   269b8:	bd08      	pop	{r3, pc}

000269ba <nrfx_clock_start>:
    switch (domain)
   269ba:	b110      	cbz	r0, 269c2 <nrfx_clock_start+0x8>
   269bc:	2801      	cmp	r0, #1
   269be:	d01d      	beq.n	269fc <nrfx_clock_start+0x42>
   269c0:	4770      	bx	lr
                    (nrf_clock_lfclk_t)((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_SRC_Msk)
   269c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   269c6:	f8d3 2418 	ldr.w	r2, [r3, #1048]	; 0x418
            if ((p_reg->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk)
   269ca:	f8d3 1418 	ldr.w	r1, [r3, #1048]	; 0x418
   269ce:	03c9      	lsls	r1, r1, #15
   269d0:	d512      	bpl.n	269f8 <nrfx_clock_start+0x3e>
                                        >> CLOCK_LFCLKSTAT_SRC_Pos);
   269d2:	f002 0203 	and.w	r2, r2, #3
                if (nrf_clock_is_running(NRF_CLOCK, NRF_CLOCK_DOMAIN_LFCLK, &lfclksrc) &&
   269d6:	2a01      	cmp	r2, #1
   269d8:	d10e      	bne.n	269f8 <nrfx_clock_start+0x3e>
    p_reg->LFCLKSRC = (uint32_t)(source);
   269da:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   269de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   269e2:	2200      	movs	r2, #0
   269e4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
   269e8:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
    p_reg->INTENSET = mask;
   269ec:	2202      	movs	r2, #2
   269ee:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   269f2:	2201      	movs	r2, #1
   269f4:	609a      	str	r2, [r3, #8]
}
   269f6:	4770      	bx	lr
    p_reg->LFCLKSRC = (uint32_t)(source);
   269f8:	2200      	movs	r2, #0
   269fa:	e7ee      	b.n	269da <nrfx_clock_start+0x20>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   269fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26a00:	2200      	movs	r2, #0
   26a02:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   26a06:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    p_reg->INTENSET = mask;
   26a0a:	f8c3 0304 	str.w	r0, [r3, #772]	; 0x304
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26a0e:	6018      	str	r0, [r3, #0]
}
   26a10:	4770      	bx	lr

00026a12 <nrfx_nvmc_flash_size_get>:
   26a12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26a16:	691a      	ldr	r2, [r3, #16]
NRF_STATIC_INLINE uint32_t nrf_ficr_codesize_get(NRF_FICR_Type const * p_reg)
{
#if defined(FICR_INFO_CODESIZE_CODESIZE_Msk)
    return p_reg->INFO.CODESIZE;
#else
    return p_reg->CODESIZE;
   26a18:	6958      	ldr	r0, [r3, #20]
}

uint32_t nrfx_nvmc_flash_size_get(void)
{
    return flash_total_size_get();
}
   26a1a:	4350      	muls	r0, r2
   26a1c:	4770      	bx	lr

00026a1e <nrfx_nvmc_flash_page_size_get>:
    return p_reg->CODEPAGESIZE;
   26a1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26a22:	6918      	ldr	r0, [r3, #16]

uint32_t nrfx_nvmc_flash_page_size_get(void)
{
    return flash_page_size_get();
}
   26a24:	4770      	bx	lr

00026a26 <nrfx_nvmc_flash_page_count_get>:
    return p_reg->CODESIZE;
   26a26:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
   26a2a:	6958      	ldr	r0, [r3, #20]

uint32_t nrfx_nvmc_flash_page_count_get(void)
{
    return flash_page_count_get();
}
   26a2c:	4770      	bx	lr

00026a2e <nrf_gpio_pin_set>:
{
   26a2e:	b507      	push	{r0, r1, r2, lr}
   26a30:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26a32:	a801      	add	r0, sp, #4
   26a34:	f7f8 fac6 	bl	1efc4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_set(reg, 1UL << pin_number);
   26a38:	9a01      	ldr	r2, [sp, #4]
   26a3a:	2301      	movs	r3, #1
   26a3c:	4093      	lsls	r3, r2
    p_reg->OUTSET = set_mask;
   26a3e:	f8c0 3508 	str.w	r3, [r0, #1288]	; 0x508
}
   26a42:	b003      	add	sp, #12
   26a44:	f85d fb04 	ldr.w	pc, [sp], #4

00026a48 <nrf_gpio_pin_clear>:
{
   26a48:	b507      	push	{r0, r1, r2, lr}
   26a4a:	9001      	str	r0, [sp, #4]
    NRF_GPIO_Type * reg = nrf_gpio_pin_port_decode(&pin_number);
   26a4c:	a801      	add	r0, sp, #4
   26a4e:	f7f8 fab9 	bl	1efc4 <nrf_gpio_pin_port_decode>
    nrf_gpio_port_out_clear(reg, 1UL << pin_number);
   26a52:	9a01      	ldr	r2, [sp, #4]
   26a54:	2301      	movs	r3, #1
   26a56:	4093      	lsls	r3, r2
    p_reg->OUTCLR = clr_mask;
   26a58:	f8c0 350c 	str.w	r3, [r0, #1292]	; 0x50c
}
   26a5c:	b003      	add	sp, #12
   26a5e:	f85d fb04 	ldr.w	pc, [sp], #4

00026a62 <transfer_byte>:
{
   26a62:	b537      	push	{r0, r1, r2, r4, r5, lr}
    return p_reg->RXD;
   26a64:	f8d0 3518 	ldr.w	r3, [r0, #1304]	; 0x518
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   26a68:	698a      	ldr	r2, [r1, #24]
   26a6a:	b2db      	uxtb	r3, r3
    volatile uint8_t rx_data = nrf_spi_rxd_get(p_spi);
   26a6c:	f88d 3007 	strb.w	r3, [sp, #7]
    if (p_cb->bytes_transferred < p_cb->evt.xfer_desc.rx_length)
   26a70:	6a0b      	ldr	r3, [r1, #32]
   26a72:	4293      	cmp	r3, r2
        p_cb->evt.xfer_desc.p_rx_buffer[p_cb->bytes_transferred] = rx_data;
   26a74:	bf3e      	ittt	cc
   26a76:	694a      	ldrcc	r2, [r1, #20]
   26a78:	f89d 4007 	ldrbcc.w	r4, [sp, #7]
   26a7c:	54d4      	strbcc	r4, [r2, r3]
    ++p_cb->bytes_transferred;
   26a7e:	6a0a      	ldr	r2, [r1, #32]
    if (p_cb->abort)
   26a80:	f891 4024 	ldrb.w	r4, [r1, #36]	; 0x24
    ++p_cb->bytes_transferred;
   26a84:	1c53      	adds	r3, r2, #1
   26a86:	620b      	str	r3, [r1, #32]
    size_t bytes_used = p_cb->bytes_transferred + 1;
   26a88:	3202      	adds	r2, #2
    if (p_cb->abort)
   26a8a:	b13c      	cbz	r4, 26a9c <transfer_byte+0x3a>
        if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   26a8c:	690c      	ldr	r4, [r1, #16]
   26a8e:	42a2      	cmp	r2, r4
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   26a90:	698c      	ldr	r4, [r1, #24]
            p_cb->evt.xfer_desc.tx_length = bytes_used;
   26a92:	bf38      	it	cc
   26a94:	610a      	strcc	r2, [r1, #16]
        if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   26a96:	4294      	cmp	r4, r2
            p_cb->evt.xfer_desc.rx_length = bytes_used;
   26a98:	bf88      	it	hi
   26a9a:	618a      	strhi	r2, [r1, #24]
    if (bytes_used < p_cb->evt.xfer_desc.tx_length)
   26a9c:	690d      	ldr	r5, [r1, #16]
   26a9e:	4295      	cmp	r5, r2
   26aa0:	d905      	bls.n	26aae <transfer_byte+0x4c>
        nrf_spi_txd_set(p_spi, p_cb->evt.xfer_desc.p_tx_buffer[bytes_used]);
   26aa2:	68cb      	ldr	r3, [r1, #12]
    p_reg->TXD = data;
   26aa4:	5c9b      	ldrb	r3, [r3, r2]
   26aa6:	f8c0 351c 	str.w	r3, [r0, #1308]	; 0x51c
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   26aaa:	2001      	movs	r0, #1
   26aac:	e00a      	b.n	26ac4 <transfer_byte+0x62>
    else if (bytes_used < p_cb->evt.xfer_desc.rx_length)
   26aae:	698c      	ldr	r4, [r1, #24]
   26ab0:	4294      	cmp	r4, r2
   26ab2:	d901      	bls.n	26ab8 <transfer_byte+0x56>
   26ab4:	7fcb      	ldrb	r3, [r1, #31]
   26ab6:	e7f6      	b.n	26aa6 <transfer_byte+0x44>
    return (p_cb->bytes_transferred < p_cb->evt.xfer_desc.tx_length ||
   26ab8:	42ab      	cmp	r3, r5
   26aba:	d3f6      	bcc.n	26aaa <transfer_byte+0x48>
   26abc:	42a3      	cmp	r3, r4
   26abe:	bf2c      	ite	cs
   26ac0:	2000      	movcs	r0, #0
   26ac2:	2001      	movcc	r0, #1
}
   26ac4:	b003      	add	sp, #12
   26ac6:	bd30      	pop	{r4, r5, pc}

00026ac8 <twi_send_byte>:
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26ac8:	6a8b      	ldr	r3, [r1, #40]	; 0x28
{
   26aca:	4602      	mov	r2, r0
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26acc:	6b48      	ldr	r0, [r1, #52]	; 0x34
   26ace:	4298      	cmp	r0, r3
{
   26ad0:	b510      	push	{r4, lr}
   26ad2:	f04f 0301 	mov.w	r3, #1
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26ad6:	d205      	bcs.n	26ae4 <twi_send_byte+0x1c>
        nrf_twi_txd_set(p_twi, p_cb->p_curr_buf[p_cb->bytes_transferred]);
   26ad8:	6a49      	ldr	r1, [r1, #36]	; 0x24
    p_reg->TXD = data;
   26ada:	5c09      	ldrb	r1, [r1, r0]
   26adc:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c
    return true;
   26ae0:	4618      	mov	r0, r3
}
   26ae2:	e004      	b.n	26aee <twi_send_byte+0x26>
        if (p_cb->curr_tx_no_stop)
   26ae4:	f891 002c 	ldrb.w	r0, [r1, #44]	; 0x2c
   26ae8:	b110      	cbz	r0, 26af0 <twi_send_byte+0x28>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26aea:	61d3      	str	r3, [r2, #28]
            return false;
   26aec:	2000      	movs	r0, #0
}
   26aee:	bd10      	pop	{r4, pc}
        else if(TWI_FLAG_SUSPEND(p_cb->flags))
   26af0:	6a0c      	ldr	r4, [r1, #32]
   26af2:	0664      	lsls	r4, r4, #25
   26af4:	d503      	bpl.n	26afe <twi_send_byte+0x36>
   26af6:	61d3      	str	r3, [r2, #28]
            p_cb->prev_suspend = TWI_SUSPEND_TX;
   26af8:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
            return false;
   26afc:	e7f7      	b.n	26aee <twi_send_byte+0x26>
   26afe:	6153      	str	r3, [r2, #20]
   26b00:	e7ee      	b.n	26ae0 <twi_send_byte+0x18>

00026b02 <twi_transfer>:
{
   26b02:	b570      	push	{r4, r5, r6, lr}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b04:	f8d0 6104 	ldr.w	r6, [r0, #260]	; 0x104
   26b08:	4604      	mov	r4, r0
   26b0a:	460d      	mov	r5, r1
    if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_STOPPED))
   26b0c:	b12e      	cbz	r6, 26b1a <twi_transfer+0x18>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b0e:	2300      	movs	r3, #0
   26b10:	f8c0 3104 	str.w	r3, [r0, #260]	; 0x104
   26b14:	f8d0 3104 	ldr.w	r3, [r0, #260]	; 0x104
        stopped = true;
   26b18:	2601      	movs	r6, #1
    if (p_cb->error)
   26b1a:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
   26b1e:	b320      	cbz	r0, 26b6a <twi_transfer+0x68>
   26b20:	2300      	movs	r3, #0
   26b22:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   26b26:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
   26b2a:	f8c4 311c 	str.w	r3, [r4, #284]	; 0x11c
   26b2e:	f8d4 211c 	ldr.w	r2, [r4, #284]	; 0x11c
   26b32:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   26b36:	f8d4 3108 	ldr.w	r3, [r4, #264]	; 0x108
    if (stopped)
   26b3a:	2e00      	cmp	r6, #0
   26b3c:	d068      	beq.n	26c10 <twi_transfer+0x10e>
        if (!p_cb->error)
   26b3e:	f895 002f 	ldrb.w	r0, [r5, #47]	; 0x2f
        p_cb->prev_suspend = TWI_NO_SUSPEND;
   26b42:	2300      	movs	r3, #0
   26b44:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
        if (!p_cb->error)
   26b48:	bb88      	cbnz	r0, 26bae <twi_transfer+0xac>
    if (p_cb->bytes_transferred != p_cb->curr_length)
   26b4a:	6aab      	ldr	r3, [r5, #40]	; 0x28
   26b4c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
   26b4e:	429a      	cmp	r2, r3
        return false;
   26b50:	bf1c      	itt	ne
   26b52:	4606      	movne	r6, r0
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   26b54:	2305      	movne	r3, #5
            p_cb->error = !xfer_completeness_check(p_twi, p_cb);
   26b56:	f086 0601 	eor.w	r6, r6, #1
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Disabled << TWI_ENABLE_ENABLE_Pos);
   26b5a:	bf1c      	itt	ne
   26b5c:	f8c4 0500 	strne.w	r0, [r4, #1280]	; 0x500
    p_reg->ENABLE = (TWI_ENABLE_ENABLE_Enabled << TWI_ENABLE_ENABLE_Pos);
   26b60:	f8c4 3500 	strne.w	r3, [r4, #1280]	; 0x500
   26b64:	f885 602f 	strb.w	r6, [r5, #47]	; 0x2f
   26b68:	e022      	b.n	26bb0 <twi_transfer+0xae>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b6a:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
    else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   26b6e:	b142      	cbz	r2, 26b82 <twi_transfer+0x80>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b70:	f8c4 0124 	str.w	r0, [r4, #292]	; 0x124
   26b74:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26b78:	2301      	movs	r3, #1
   26b7a:	6163      	str	r3, [r4, #20]
                p_cb->error = true;
   26b7c:	f885 302f 	strb.w	r3, [r5, #47]	; 0x2f
   26b80:	e7db      	b.n	26b3a <twi_transfer+0x38>
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b82:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
        if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_TXDSENT))
   26b86:	b1a3      	cbz	r3, 26bb2 <twi_transfer+0xb0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b88:	f8c4 211c 	str.w	r2, [r4, #284]	; 0x11c
   26b8c:	f8d4 311c 	ldr.w	r3, [r4, #284]	; 0x11c
            ++(p_cb->bytes_transferred);
   26b90:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26b92:	3301      	adds	r3, #1
   26b94:	636b      	str	r3, [r5, #52]	; 0x34
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26b96:	f8d4 3124 	ldr.w	r3, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   26b9a:	b113      	cbz	r3, 26ba2 <twi_transfer+0xa0>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26b9c:	f8c4 2124 	str.w	r2, [r4, #292]	; 0x124
   26ba0:	e7e8      	b.n	26b74 <twi_transfer+0x72>
                if (!twi_send_byte(p_twi, p_cb))
   26ba2:	4629      	mov	r1, r5
   26ba4:	4620      	mov	r0, r4
   26ba6:	f7ff ff8f 	bl	26ac8 <twi_send_byte>
   26baa:	2800      	cmp	r0, #0
   26bac:	d1c5      	bne.n	26b3a <twi_transfer+0x38>
                    return false;
   26bae:	2000      	movs	r0, #0
}
   26bb0:	bd70      	pop	{r4, r5, r6, pc}
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26bb2:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
        else if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_RXDREADY))
   26bb6:	2a00      	cmp	r2, #0
   26bb8:	d0bf      	beq.n	26b3a <twi_transfer+0x38>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26bba:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108
   26bbe:	f8d4 2108 	ldr.w	r2, [r4, #264]	; 0x108
    return (bool)*(volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event);
   26bc2:	f8d4 2124 	ldr.w	r2, [r4, #292]	; 0x124
            if (nrf_twi_event_check(p_twi, NRF_TWI_EVENT_ERROR))
   26bc6:	b112      	cbz	r2, 26bce <twi_transfer+0xcc>
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)event)) = 0x0UL;
   26bc8:	f8c4 3124 	str.w	r3, [r4, #292]	; 0x124
   26bcc:	e7d2      	b.n	26b74 <twi_transfer+0x72>
    if (p_cb->bytes_transferred < p_cb->curr_length)
   26bce:	6b6b      	ldr	r3, [r5, #52]	; 0x34
   26bd0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
   26bd2:	4293      	cmp	r3, r2
   26bd4:	d2b1      	bcs.n	26b3a <twi_transfer+0x38>
        p_cb->p_curr_buf[p_cb->bytes_transferred] = nrf_twi_rxd_get(p_twi);
   26bd6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
    return (uint8_t)p_reg->RXD;
   26bd8:	f8d4 1518 	ldr.w	r1, [r4, #1304]	; 0x518
   26bdc:	54d1      	strb	r1, [r2, r3]
        ++(p_cb->bytes_transferred);
   26bde:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26be0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
        ++(p_cb->bytes_transferred);
   26be2:	3301      	adds	r3, #1
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26be4:	1e51      	subs	r1, r2, #1
   26be6:	428b      	cmp	r3, r1
        ++(p_cb->bytes_transferred);
   26be8:	636b      	str	r3, [r5, #52]	; 0x34
        if ((p_cb->bytes_transferred == p_cb->curr_length - 1) && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26bea:	d108      	bne.n	26bfe <twi_transfer+0xfc>
   26bec:	6a29      	ldr	r1, [r5, #32]
   26bee:	0649      	lsls	r1, r1, #25
   26bf0:	d410      	bmi.n	26c14 <twi_transfer+0x112>
    p_reg->SHORTS = mask;
   26bf2:	2302      	movs	r3, #2
   26bf4:	f8c4 3200 	str.w	r3, [r4, #512]	; 0x200
    *((volatile uint32_t *)((uint8_t *)p_reg + (uint32_t)task)) = 0x1UL;
   26bf8:	2301      	movs	r3, #1
   26bfa:	6223      	str	r3, [r4, #32]
   26bfc:	e79d      	b.n	26b3a <twi_transfer+0x38>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26bfe:	4293      	cmp	r3, r2
   26c00:	d1fa      	bne.n	26bf8 <twi_transfer+0xf6>
   26c02:	6a2b      	ldr	r3, [r5, #32]
   26c04:	065b      	lsls	r3, r3, #25
   26c06:	d598      	bpl.n	26b3a <twi_transfer+0x38>
            p_cb->prev_suspend = TWI_SUSPEND_RX;
   26c08:	2302      	movs	r3, #2
   26c0a:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
            return false;
   26c0e:	e7cf      	b.n	26bb0 <twi_transfer+0xae>
    return true;
   26c10:	2001      	movs	r0, #1
   26c12:	e7cd      	b.n	26bb0 <twi_transfer+0xae>
        else if (p_cb->bytes_transferred == p_cb->curr_length && (!TWI_FLAG_SUSPEND(p_cb->flags)))
   26c14:	4293      	cmp	r3, r2
   26c16:	d1ef      	bne.n	26bf8 <twi_transfer+0xf6>
   26c18:	e7f6      	b.n	26c08 <twi_transfer+0x106>

00026c1a <arch_system_halt>:
	__asm__ volatile(
   26c1a:	f04f 0220 	mov.w	r2, #32
   26c1e:	f3ef 8311 	mrs	r3, BASEPRI
   26c22:	f382 8811 	msr	BASEPRI, r2
   26c26:	f3bf 8f6f 	isb	sy
	for (;;) {
   26c2a:	e7fe      	b.n	26c2a <arch_system_halt+0x10>

00026c2c <k_heap_init>:
{
   26c2c:	b410      	push	{r4}
   26c2e:	f100 040c 	add.w	r4, r0, #12
	list->tail = (sys_dnode_t *)list;
   26c32:	e9c0 4403 	strd	r4, r4, [r0, #12]
}
   26c36:	bc10      	pop	{r4}
	sys_heap_init(&h->heap, mem, bytes);
   26c38:	f7fb baea 	b.w	22210 <sys_heap_init>

00026c3c <k_heap_aligned_alloc>:

SYS_INIT(statics_init, PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_OBJECTS);

void *k_heap_aligned_alloc(struct k_heap *h, size_t align, size_t bytes,
			k_timeout_t timeout)
{
   26c3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26c40:	b085      	sub	sp, #20
   26c42:	4606      	mov	r6, r0
   26c44:	4688      	mov	r8, r1
	int64_t now, end = z_timeout_end_calc(timeout);
   26c46:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
{
   26c4a:	4691      	mov	r9, r2
	int64_t now, end = z_timeout_end_calc(timeout);
   26c4c:	f000 fb16 	bl	2727c <z_timeout_end_calc>
	void *ret = NULL;
	k_spinlock_key_t key = k_spin_lock(&h->lock);
   26c50:	f106 0a14 	add.w	sl, r6, #20
	int64_t now, end = z_timeout_end_calc(timeout);
   26c54:	4605      	mov	r5, r0
   26c56:	460f      	mov	r7, r1
   26c58:	f04f 0320 	mov.w	r3, #32
   26c5c:	f3ef 8411 	mrs	r4, BASEPRI
   26c60:	f383 8811 	msr	BASEPRI, r3
   26c64:	f3bf 8f6f 	isb	sy
		now = z_tick_get();
		if ((ret != NULL) || ((end - now) <= 0)) {
			break;
		}

		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   26c68:	f106 0b0c 	add.w	fp, r6, #12
		ret = sys_heap_aligned_alloc(&h->heap, align, bytes);
   26c6c:	464a      	mov	r2, r9
   26c6e:	4641      	mov	r1, r8
   26c70:	4630      	mov	r0, r6
   26c72:	f7fb fa52 	bl	2211a <sys_heap_aligned_alloc>
   26c76:	9003      	str	r0, [sp, #12]
		now = z_tick_get();
   26c78:	f7f9 fedc 	bl	20a34 <z_tick_get>
		if ((ret != NULL) || ((end - now) <= 0)) {
   26c7c:	9b03      	ldr	r3, [sp, #12]
   26c7e:	b13b      	cbz	r3, 26c90 <k_heap_aligned_alloc+0x54>
	__asm__ volatile(
   26c80:	f384 8811 	msr	BASEPRI, r4
   26c84:	f3bf 8f6f 	isb	sy
		key = k_spin_lock(&h->lock);
	}

	k_spin_unlock(&h->lock, key);
	return ret;
}
   26c88:	4618      	mov	r0, r3
   26c8a:	b005      	add	sp, #20
   26c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if ((ret != NULL) || ((end - now) <= 0)) {
   26c90:	1a28      	subs	r0, r5, r0
   26c92:	eb67 0101 	sbc.w	r1, r7, r1
   26c96:	2801      	cmp	r0, #1
   26c98:	f171 0200 	sbcs.w	r2, r1, #0
   26c9c:	dbf0      	blt.n	26c80 <k_heap_aligned_alloc+0x44>
		(void) z_pend_curr(&h->lock, key, &h->wait_q,
   26c9e:	e9cd 0100 	strd	r0, r1, [sp]
   26ca2:	465a      	mov	r2, fp
   26ca4:	4621      	mov	r1, r4
   26ca6:	4650      	mov	r0, sl
   26ca8:	f7f9 fad4 	bl	20254 <z_pend_curr>
	__asm__ volatile(
   26cac:	f04f 0320 	mov.w	r3, #32
   26cb0:	f3ef 8411 	mrs	r4, BASEPRI
   26cb4:	f383 8811 	msr	BASEPRI, r3
   26cb8:	f3bf 8f6f 	isb	sy
   26cbc:	e7d6      	b.n	26c6c <k_heap_aligned_alloc+0x30>

00026cbe <k_heap_free>:

void k_heap_free(struct k_heap *h, void *mem)
{
   26cbe:	b538      	push	{r3, r4, r5, lr}
   26cc0:	4604      	mov	r4, r0
   26cc2:	f04f 0320 	mov.w	r3, #32
   26cc6:	f3ef 8511 	mrs	r5, BASEPRI
   26cca:	f383 8811 	msr	BASEPRI, r3
   26cce:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&h->lock);

	sys_heap_free(&h->heap, mem);
   26cd2:	f7fb f9d5 	bl	22080 <sys_heap_free>

	if (z_unpend_all(&h->wait_q) != 0) {
   26cd6:	f104 000c 	add.w	r0, r4, #12
   26cda:	f000 f9e2 	bl	270a2 <z_unpend_all>
   26cde:	b130      	cbz	r0, 26cee <k_heap_free+0x30>
		z_reschedule(&h->lock, key);
   26ce0:	4629      	mov	r1, r5
   26ce2:	f104 0014 	add.w	r0, r4, #20
	} else {
		k_spin_unlock(&h->lock, key);
	}
}
   26ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		z_reschedule(&h->lock, key);
   26cea:	f7f9 b873 	b.w	1fdd4 <z_reschedule>
	__asm__ volatile(
   26cee:	f385 8811 	msr	BASEPRI, r5
   26cf2:	f3bf 8f6f 	isb	sy
}
   26cf6:	bd38      	pop	{r3, r4, r5, pc}

00026cf8 <k_mem_slab_init>:
{
   26cf8:	b530      	push	{r4, r5, lr}
	slab->num_used = 0U;
   26cfa:	2400      	movs	r4, #0
   26cfc:	6184      	str	r4, [r0, #24]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26cfe:	ea41 0402 	orr.w	r4, r1, r2
   26d02:	f014 0403 	ands.w	r4, r4, #3
	slab->block_size = block_size;
   26d06:	e9c0 3202 	strd	r3, r2, [r0, #8]
	slab->buffer = buffer;
   26d0a:	6101      	str	r1, [r0, #16]
	CHECKIF(((slab->block_size | (uintptr_t)slab->buffer) &
   26d0c:	d10c      	bne.n	26d28 <k_mem_slab_init+0x30>
	slab->free_list = NULL;
   26d0e:	6144      	str	r4, [r0, #20]
	for (j = 0U; j < slab->num_blocks; j++) {
   26d10:	42a3      	cmp	r3, r4
   26d12:	d103      	bne.n	26d1c <k_mem_slab_init+0x24>
   26d14:	e9c0 0000 	strd	r0, r0, [r0]
}
   26d18:	2000      	movs	r0, #0
}
   26d1a:	bd30      	pop	{r4, r5, pc}
		*(char **)p = slab->free_list;
   26d1c:	6945      	ldr	r5, [r0, #20]
   26d1e:	600d      	str	r5, [r1, #0]
	for (j = 0U; j < slab->num_blocks; j++) {
   26d20:	3401      	adds	r4, #1
		slab->free_list = p;
   26d22:	6141      	str	r1, [r0, #20]
		p += slab->block_size;
   26d24:	4411      	add	r1, r2
	for (j = 0U; j < slab->num_blocks; j++) {
   26d26:	e7f3      	b.n	26d10 <k_mem_slab_init+0x18>
		return -EINVAL;
   26d28:	f06f 0015 	mvn.w	r0, #21
	return rc;
   26d2c:	e7f5      	b.n	26d1a <k_mem_slab_init+0x22>

00026d2e <adjust_owner_prio.isra.0>:
	if (mutex->owner->base.prio != new_prio) {
   26d2e:	f990 300e 	ldrsb.w	r3, [r0, #14]
   26d32:	428b      	cmp	r3, r1
   26d34:	d001      	beq.n	26d3a <adjust_owner_prio.isra.0+0xc>
		return z_set_prio(mutex->owner, new_prio);
   26d36:	f7f9 baa1 	b.w	2027c <z_set_prio>
}
   26d3a:	2000      	movs	r0, #0
   26d3c:	4770      	bx	lr

00026d3e <z_impl_k_mutex_init>:
{
   26d3e:	4603      	mov	r3, r0
	mutex->owner = NULL;
   26d40:	2000      	movs	r0, #0
	mutex->lock_count = 0U;
   26d42:	e9c3 0002 	strd	r0, r0, [r3, #8]
   26d46:	e9c3 3300 	strd	r3, r3, [r3]
}
   26d4a:	4770      	bx	lr

00026d4c <queue_insert>:
{
   26d4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26d50:	4699      	mov	r9, r3
   26d52:	4604      	mov	r4, r0
   26d54:	f89d 3020 	ldrb.w	r3, [sp, #32]
   26d58:	460d      	mov	r5, r1
   26d5a:	4690      	mov	r8, r2
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26d5c:	f100 0608 	add.w	r6, r0, #8
	__asm__ volatile(
   26d60:	f04f 0220 	mov.w	r2, #32
   26d64:	f3ef 8711 	mrs	r7, BASEPRI
   26d68:	f382 8811 	msr	BASEPRI, r2
   26d6c:	f3bf 8f6f 	isb	sy
	if (is_append) {
   26d70:	b103      	cbz	r3, 26d74 <queue_insert+0x28>
	return list->tail;
   26d72:	6845      	ldr	r5, [r0, #4]
	first_pending_thread = z_unpend_first_thread(&queue->wait_q);
   26d74:	4630      	mov	r0, r6
   26d76:	f000 f97b 	bl	27070 <z_unpend_first_thread>
	if (first_pending_thread != NULL) {
   26d7a:	b160      	cbz	r0, 26d96 <queue_insert+0x4a>
   26d7c:	2400      	movs	r4, #0
   26d7e:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80
   26d82:	f8c0 8014 	str.w	r8, [r0, #20]
	z_ready_thread(thread);
   26d86:	f000 f906 	bl	26f96 <z_ready_thread>
	z_reschedule(&queue->lock, key);
   26d8a:	4630      	mov	r0, r6
   26d8c:	4639      	mov	r1, r7
   26d8e:	f7f9 f821 	bl	1fdd4 <z_reschedule>
	return 0;
   26d92:	2000      	movs	r0, #0
   26d94:	e00c      	b.n	26db0 <queue_insert+0x64>
	if (alloc) {
   26d96:	f1b9 0f00 	cmp.w	r9, #0
   26d9a:	d01b      	beq.n	26dd4 <queue_insert+0x88>
	return z_thread_aligned_alloc(0, size);
   26d9c:	2108      	movs	r1, #8
   26d9e:	f7f9 ff57 	bl	20c50 <z_thread_aligned_alloc>
		if (anode == NULL) {
   26da2:	b938      	cbnz	r0, 26db4 <queue_insert+0x68>
	__asm__ volatile(
   26da4:	f387 8811 	msr	BASEPRI, r7
   26da8:	f3bf 8f6f 	isb	sy
			return -ENOMEM;
   26dac:	f06f 000b 	mvn.w	r0, #11
}
   26db0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	node->next_and_flags = flags;
   26db4:	2301      	movs	r3, #1
		anode->data = data;
   26db6:	f8c0 8004 	str.w	r8, [r0, #4]
   26dba:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26dbc:	6803      	ldr	r3, [r0, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26dbe:	f003 0203 	and.w	r2, r3, #3
Z_GENLIST_INSERT(sflist, sfnode)
   26dc2:	b95d      	cbnz	r5, 26ddc <queue_insert+0x90>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26dc4:	6823      	ldr	r3, [r4, #0]
   26dc6:	4313      	orrs	r3, r2
   26dc8:	6003      	str	r3, [r0, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26dca:	6863      	ldr	r3, [r4, #4]
	list->head = node;
   26dcc:	6020      	str	r0, [r4, #0]
Z_GENLIST_PREPEND(sflist, sfnode)
   26dce:	b973      	cbnz	r3, 26dee <queue_insert+0xa2>
	list->tail = node;
   26dd0:	6060      	str	r0, [r4, #4]
}
   26dd2:	e00c      	b.n	26dee <queue_insert+0xa2>
	node->next_and_flags = flags;
   26dd4:	f8c8 9000 	str.w	r9, [r8]
}
   26dd8:	4640      	mov	r0, r8
   26dda:	e7ef      	b.n	26dbc <queue_insert+0x70>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   26ddc:	682b      	ldr	r3, [r5, #0]
Z_GENLIST_INSERT(sflist, sfnode)
   26dde:	f033 0303 	bics.w	r3, r3, #3
   26de2:	d110      	bne.n	26e06 <queue_insert+0xba>
	parent->next_and_flags = cur_flags | (unative_t)child;
   26de4:	6002      	str	r2, [r0, #0]
	return list->tail;
   26de6:	6862      	ldr	r2, [r4, #4]
Z_GENLIST_APPEND(sflist, sfnode)
   26de8:	b93a      	cbnz	r2, 26dfa <queue_insert+0xae>
	list->head = node;
   26dea:	e9c4 0000 	strd	r0, r0, [r4]
	z_handle_obj_poll_events(&queue->poll_events, state);
   26dee:	2104      	movs	r1, #4
   26df0:	f104 0010 	add.w	r0, r4, #16
   26df4:	f000 fbd7 	bl	275a6 <z_handle_obj_poll_events>
   26df8:	e7c7      	b.n	26d8a <queue_insert+0x3e>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26dfa:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26dfc:	f003 0303 	and.w	r3, r3, #3
   26e00:	4303      	orrs	r3, r0
   26e02:	6013      	str	r3, [r2, #0]
   26e04:	e7e4      	b.n	26dd0 <queue_insert+0x84>
   26e06:	4313      	orrs	r3, r2
   26e08:	6003      	str	r3, [r0, #0]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26e0a:	682b      	ldr	r3, [r5, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26e0c:	f003 0303 	and.w	r3, r3, #3
   26e10:	4303      	orrs	r3, r0
   26e12:	602b      	str	r3, [r5, #0]
}
   26e14:	e7eb      	b.n	26dee <queue_insert+0xa2>

00026e16 <z_queue_node_peek>:
{
   26e16:	b510      	push	{r4, lr}
	if ((node != NULL) && (sys_sfnode_flags_get(node) != (uint8_t)0)) {
   26e18:	4604      	mov	r4, r0
   26e1a:	b130      	cbz	r0, 26e2a <z_queue_node_peek+0x14>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26e1c:	6802      	ldr	r2, [r0, #0]
   26e1e:	0793      	lsls	r3, r2, #30
   26e20:	d003      	beq.n	26e2a <z_queue_node_peek+0x14>
		ret = anode->data;
   26e22:	6844      	ldr	r4, [r0, #4]
		if (needs_free) {
   26e24:	b109      	cbz	r1, 26e2a <z_queue_node_peek+0x14>
			k_free(anode);
   26e26:	f000 fbcc 	bl	275c2 <k_free>
}
   26e2a:	4620      	mov	r0, r4
   26e2c:	bd10      	pop	{r4, pc}

00026e2e <z_impl_k_queue_init>:
	list->head = NULL;
   26e2e:	2300      	movs	r3, #0
	list->tail = NULL;
   26e30:	e9c0 3300 	strd	r3, r3, [r0]
	sys_dlist_init(&w->waitq);
   26e34:	f100 0308 	add.w	r3, r0, #8
   26e38:	e9c0 3302 	strd	r3, r3, [r0, #8]
	sys_dlist_init(&queue->poll_events);
   26e3c:	f100 0310 	add.w	r3, r0, #16
   26e40:	e9c0 3304 	strd	r3, r3, [r0, #16]
}
   26e44:	4770      	bx	lr

00026e46 <k_queue_append>:
{
   26e46:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, true);
   26e48:	2301      	movs	r3, #1
   26e4a:	9300      	str	r3, [sp, #0]
   26e4c:	2300      	movs	r3, #0
{
   26e4e:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, true);
   26e50:	4619      	mov	r1, r3
   26e52:	f7ff ff7b 	bl	26d4c <queue_insert>
}
   26e56:	b003      	add	sp, #12
   26e58:	f85d fb04 	ldr.w	pc, [sp], #4

00026e5c <k_queue_prepend>:
{
   26e5c:	b507      	push	{r0, r1, r2, lr}
	(void)queue_insert(queue, NULL, data, false, false);
   26e5e:	2300      	movs	r3, #0
{
   26e60:	460a      	mov	r2, r1
	(void)queue_insert(queue, NULL, data, false, false);
   26e62:	9300      	str	r3, [sp, #0]
   26e64:	4619      	mov	r1, r3
   26e66:	f7ff ff71 	bl	26d4c <queue_insert>
}
   26e6a:	b003      	add	sp, #12
   26e6c:	f85d fb04 	ldr.w	pc, [sp], #4

00026e70 <k_queue_append_list>:
{
   26e70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   26e74:	4605      	mov	r5, r0
   26e76:	4616      	mov	r6, r2
	CHECKIF(head == NULL || tail == NULL) {
   26e78:	460c      	mov	r4, r1
   26e7a:	b391      	cbz	r1, 26ee2 <k_queue_append_list+0x72>
   26e7c:	b38a      	cbz	r2, 26ee2 <k_queue_append_list+0x72>
	k_spinlock_key_t key = k_spin_lock(&queue->lock);
   26e7e:	f100 0708 	add.w	r7, r0, #8
	__asm__ volatile(
   26e82:	f04f 0320 	mov.w	r3, #32
   26e86:	f3ef 8811 	mrs	r8, BASEPRI
   26e8a:	f383 8811 	msr	BASEPRI, r3
   26e8e:	f3bf 8f6f 	isb	sy
		thread = z_unpend_first_thread(&queue->wait_q);
   26e92:	4638      	mov	r0, r7
   26e94:	f000 f8ec 	bl	27070 <z_unpend_first_thread>
   26e98:	f04f 0900 	mov.w	r9, #0
	while ((head != NULL) && (thread != NULL)) {
   26e9c:	b920      	cbnz	r0, 26ea8 <k_queue_append_list+0x38>
	return list->tail;
   26e9e:	686a      	ldr	r2, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   26ea0:	b9ca      	cbnz	r2, 26ed6 <k_queue_append_list+0x66>
	list->head = node;
   26ea2:	602c      	str	r4, [r5, #0]
	list->tail = node;
   26ea4:	606e      	str	r6, [r5, #4]
Z_GENLIST_APPEND_LIST(sflist, sfnode)
   26ea6:	e00a      	b.n	26ebe <k_queue_append_list+0x4e>
	thread->base.swap_data = data;
   26ea8:	6144      	str	r4, [r0, #20]
   26eaa:	f8c0 9080 	str.w	r9, [r0, #128]	; 0x80
	z_ready_thread(thread);
   26eae:	f000 f872 	bl	26f96 <z_ready_thread>
		head = *(void **)head;
   26eb2:	6824      	ldr	r4, [r4, #0]
		thread = z_unpend_first_thread(&queue->wait_q);
   26eb4:	4638      	mov	r0, r7
   26eb6:	f000 f8db 	bl	27070 <z_unpend_first_thread>
	while ((head != NULL) && (thread != NULL)) {
   26eba:	2c00      	cmp	r4, #0
   26ebc:	d1ee      	bne.n	26e9c <k_queue_append_list+0x2c>
	z_handle_obj_poll_events(&queue->poll_events, state);
   26ebe:	2104      	movs	r1, #4
   26ec0:	f105 0010 	add.w	r0, r5, #16
   26ec4:	f000 fb6f 	bl	275a6 <z_handle_obj_poll_events>
	z_reschedule(&queue->lock, key);
   26ec8:	4638      	mov	r0, r7
   26eca:	4641      	mov	r1, r8
   26ecc:	f7f8 ff82 	bl	1fdd4 <z_reschedule>
	return 0;
   26ed0:	2000      	movs	r0, #0
}
   26ed2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   26ed6:	6813      	ldr	r3, [r2, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   26ed8:	f003 0303 	and.w	r3, r3, #3
   26edc:	431c      	orrs	r4, r3
   26ede:	6014      	str	r4, [r2, #0]
}
   26ee0:	e7e0      	b.n	26ea4 <k_queue_append_list+0x34>
		return -EINVAL;
   26ee2:	f06f 0015 	mvn.w	r0, #21
   26ee6:	e7f4      	b.n	26ed2 <k_queue_append_list+0x62>

00026ee8 <z_is_t1_higher_prio_than_t2>:
	if (thread_1->base.prio < thread_2->base.prio) {
   26ee8:	f990 000e 	ldrsb.w	r0, [r0, #14]
   26eec:	f991 300e 	ldrsb.w	r3, [r1, #14]
}
   26ef0:	4298      	cmp	r0, r3
   26ef2:	bfac      	ite	ge
   26ef4:	2000      	movge	r0, #0
   26ef6:	2001      	movlt	r0, #1
   26ef8:	4770      	bx	lr

00026efa <z_unpend_thread_no_timeout>:
{
   26efa:	b510      	push	{r4, lr}
   26efc:	f04f 0320 	mov.w	r3, #32
   26f00:	f3ef 8411 	mrs	r4, BASEPRI
   26f04:	f383 8811 	msr	BASEPRI, r3
   26f08:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26f0c:	f000 f81b 	bl	26f46 <unpend_thread_no_timeout>
	__asm__ volatile(
   26f10:	f384 8811 	msr	BASEPRI, r4
   26f14:	f3bf 8f6f 	isb	sy
}
   26f18:	bd10      	pop	{r4, pc}

00026f1a <z_reschedule_irqlock>:
	return arch_irq_unlocked(key) && !arch_is_in_isr();
   26f1a:	4603      	mov	r3, r0
   26f1c:	b920      	cbnz	r0, 26f28 <z_reschedule_irqlock+0xe>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
   26f1e:	f3ef 8205 	mrs	r2, IPSR
   26f22:	b90a      	cbnz	r2, 26f28 <z_reschedule_irqlock+0xe>
   26f24:	f7e0 bbbc 	b.w	76a0 <arch_swap>
   26f28:	f383 8811 	msr	BASEPRI, r3
   26f2c:	f3bf 8f6f 	isb	sy
}
   26f30:	4770      	bx	lr

00026f32 <z_reschedule_unlocked>:
	__asm__ volatile(
   26f32:	f04f 0320 	mov.w	r3, #32
   26f36:	f3ef 8011 	mrs	r0, BASEPRI
   26f3a:	f383 8811 	msr	BASEPRI, r3
   26f3e:	f3bf 8f6f 	isb	sy
	(void) z_reschedule_irqlock(arch_irq_lock());
   26f42:	f7ff bfea 	b.w	26f1a <z_reschedule_irqlock>

00026f46 <unpend_thread_no_timeout>:
{
   26f46:	4601      	mov	r1, r0
   26f48:	b508      	push	{r3, lr}
	_priq_wait_remove(&pended_on(thread)->waitq, thread);
   26f4a:	6880      	ldr	r0, [r0, #8]
   26f4c:	f7f8 ff68 	bl	1fe20 <z_priq_dumb_remove>
	thread->base.thread_state &= ~_THREAD_PENDING;
   26f50:	7b4b      	ldrb	r3, [r1, #13]
   26f52:	f023 0302 	bic.w	r3, r3, #2
   26f56:	734b      	strb	r3, [r1, #13]
	thread->base.pended_on = NULL;
   26f58:	2300      	movs	r3, #0
   26f5a:	608b      	str	r3, [r1, #8]
}
   26f5c:	bd08      	pop	{r3, pc}

00026f5e <z_unpend_thread>:
{
   26f5e:	b538      	push	{r3, r4, r5, lr}
   26f60:	4604      	mov	r4, r0
   26f62:	f04f 0320 	mov.w	r3, #32
   26f66:	f3ef 8511 	mrs	r5, BASEPRI
   26f6a:	f383 8811 	msr	BASEPRI, r3
   26f6e:	f3bf 8f6f 	isb	sy
		unpend_thread_no_timeout(thread);
   26f72:	f7ff ffe8 	bl	26f46 <unpend_thread_no_timeout>
	__asm__ volatile(
   26f76:	f385 8811 	msr	BASEPRI, r5
   26f7a:	f3bf 8f6f 	isb	sy
	return z_abort_timeout(&thread->base.timeout);
   26f7e:	f104 0018 	add.w	r0, r4, #24
}
   26f82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   26f86:	f000 b933 	b.w	271f0 <z_abort_timeout>

00026f8a <z_priq_dumb_best>:
{
   26f8a:	4603      	mov	r3, r0
	return list->head == list;
   26f8c:	6800      	ldr	r0, [r0, #0]
}
   26f8e:	4283      	cmp	r3, r0
   26f90:	bf08      	it	eq
   26f92:	2000      	moveq	r0, #0
   26f94:	4770      	bx	lr

00026f96 <z_ready_thread>:
{
   26f96:	b510      	push	{r4, lr}
	__asm__ volatile(
   26f98:	f04f 0320 	mov.w	r3, #32
   26f9c:	f3ef 8411 	mrs	r4, BASEPRI
   26fa0:	f383 8811 	msr	BASEPRI, r3
   26fa4:	f3bf 8f6f 	isb	sy
		ready_thread(thread);
   26fa8:	f7f8 ff94 	bl	1fed4 <ready_thread>
	__asm__ volatile(
   26fac:	f384 8811 	msr	BASEPRI, r4
   26fb0:	f3bf 8f6f 	isb	sy
}
   26fb4:	bd10      	pop	{r4, pc}

00026fb6 <z_thread_timeout>:
{
   26fb6:	b570      	push	{r4, r5, r6, lr}
   26fb8:	4604      	mov	r4, r0
	__asm__ volatile(
   26fba:	f04f 0320 	mov.w	r3, #32
   26fbe:	f3ef 8611 	mrs	r6, BASEPRI
   26fc2:	f383 8811 	msr	BASEPRI, r3
   26fc6:	f3bf 8f6f 	isb	sy
		if (thread->base.pended_on != NULL) {
   26fca:	f850 3c10 	ldr.w	r3, [r0, #-16]
		struct k_thread *thread = CONTAINER_OF(timeout,
   26fce:	f1a0 0518 	sub.w	r5, r0, #24
		if (thread->base.pended_on != NULL) {
   26fd2:	b113      	cbz	r3, 26fda <z_thread_timeout+0x24>
			unpend_thread_no_timeout(thread);
   26fd4:	4628      	mov	r0, r5
   26fd6:	f7ff ffb6 	bl	26f46 <unpend_thread_no_timeout>
	thread->base.thread_state &= ~_THREAD_SUSPENDED;
   26fda:	f814 3c0b 	ldrb.w	r3, [r4, #-11]
   26fde:	f023 0314 	bic.w	r3, r3, #20
   26fe2:	f804 3c0b 	strb.w	r3, [r4, #-11]
		ready_thread(thread);
   26fe6:	4628      	mov	r0, r5
   26fe8:	f7f8 ff74 	bl	1fed4 <ready_thread>
	__asm__ volatile(
   26fec:	f386 8811 	msr	BASEPRI, r6
   26ff0:	f3bf 8f6f 	isb	sy
}
   26ff4:	bd70      	pop	{r4, r5, r6, pc}

00026ff6 <add_to_waitq_locked>:
{
   26ff6:	b538      	push	{r3, r4, r5, lr}
   26ff8:	4604      	mov	r4, r0
   26ffa:	460d      	mov	r5, r1
	unready_thread(thread);
   26ffc:	f7f9 f8ea 	bl	201d4 <unready_thread>
	thread->base.thread_state |= _THREAD_PENDING;
   27000:	7b63      	ldrb	r3, [r4, #13]
   27002:	f043 0302 	orr.w	r3, r3, #2
   27006:	7363      	strb	r3, [r4, #13]
	if (wait_q != NULL) {
   27008:	b17d      	cbz	r5, 2702a <add_to_waitq_locked+0x34>
   2700a:	682b      	ldr	r3, [r5, #0]
		thread->base.pended_on = wait_q;
   2700c:	60a5      	str	r5, [r4, #8]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2700e:	429d      	cmp	r5, r3
   27010:	d012      	beq.n	27038 <add_to_waitq_locked+0x42>
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27012:	b18b      	cbz	r3, 27038 <add_to_waitq_locked+0x42>
	if (thread_1->base.prio < thread_2->base.prio) {
   27014:	f994 200e 	ldrsb.w	r2, [r4, #14]
   27018:	f993 100e 	ldrsb.w	r1, [r3, #14]
   2701c:	4291      	cmp	r1, r2
   2701e:	dd05      	ble.n	2702c <add_to_waitq_locked+0x36>
	node->prev = successor->prev;
   27020:	685a      	ldr	r2, [r3, #4]
	node->next = successor;
   27022:	e9c4 3200 	strd	r3, r2, [r4]
	successor->prev->next = node;
   27026:	6014      	str	r4, [r2, #0]
	successor->prev = node;
   27028:	605c      	str	r4, [r3, #4]
}
   2702a:	bd38      	pop	{r3, r4, r5, pc}
	return (node == list->tail) ? NULL : node->next;
   2702c:	6869      	ldr	r1, [r5, #4]
   2702e:	428b      	cmp	r3, r1
   27030:	d002      	beq.n	27038 <add_to_waitq_locked+0x42>
   27032:	681b      	ldr	r3, [r3, #0]
	SYS_DLIST_FOR_EACH_CONTAINER(pq, t, base.qnode_dlist) {
   27034:	2b00      	cmp	r3, #0
   27036:	d1ef      	bne.n	27018 <add_to_waitq_locked+0x22>
	node->prev = list->tail;
   27038:	686b      	ldr	r3, [r5, #4]
   2703a:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   2703c:	686b      	ldr	r3, [r5, #4]
	node->next = list;
   2703e:	6025      	str	r5, [r4, #0]
	list->tail->next = node;
   27040:	601c      	str	r4, [r3, #0]
	list->tail = node;
   27042:	606c      	str	r4, [r5, #4]
}
   27044:	e7f1      	b.n	2702a <add_to_waitq_locked+0x34>

00027046 <z_unpend1_no_timeout>:
{
   27046:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27048:	f04f 0320 	mov.w	r3, #32
   2704c:	f3ef 8511 	mrs	r5, BASEPRI
   27050:	f383 8811 	msr	BASEPRI, r3
   27054:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   27058:	f7ff ff97 	bl	26f8a <z_priq_dumb_best>
		if (thread != NULL) {
   2705c:	4604      	mov	r4, r0
   2705e:	b108      	cbz	r0, 27064 <z_unpend1_no_timeout+0x1e>
			unpend_thread_no_timeout(thread);
   27060:	f7ff ff71 	bl	26f46 <unpend_thread_no_timeout>
	__asm__ volatile(
   27064:	f385 8811 	msr	BASEPRI, r5
   27068:	f3bf 8f6f 	isb	sy
}
   2706c:	4620      	mov	r0, r4
   2706e:	bd38      	pop	{r3, r4, r5, pc}

00027070 <z_unpend_first_thread>:
{
   27070:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27072:	f04f 0320 	mov.w	r3, #32
   27076:	f3ef 8511 	mrs	r5, BASEPRI
   2707a:	f383 8811 	msr	BASEPRI, r3
   2707e:	f3bf 8f6f 	isb	sy
		thread = _priq_wait_best(&wait_q->waitq);
   27082:	f7ff ff82 	bl	26f8a <z_priq_dumb_best>
		if (thread != NULL) {
   27086:	4604      	mov	r4, r0
   27088:	b128      	cbz	r0, 27096 <z_unpend_first_thread+0x26>
			unpend_thread_no_timeout(thread);
   2708a:	f7ff ff5c 	bl	26f46 <unpend_thread_no_timeout>
   2708e:	f104 0018 	add.w	r0, r4, #24
   27092:	f000 f8ad 	bl	271f0 <z_abort_timeout>
	__asm__ volatile(
   27096:	f385 8811 	msr	BASEPRI, r5
   2709a:	f3bf 8f6f 	isb	sy
}
   2709e:	4620      	mov	r0, r4
   270a0:	bd38      	pop	{r3, r4, r5, pc}

000270a2 <z_unpend_all>:
{
   270a2:	b538      	push	{r3, r4, r5, lr}
   270a4:	4605      	mov	r5, r0
	int need_sched = 0;
   270a6:	2000      	movs	r0, #0
	return list->head == list;
   270a8:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   270aa:	42a5      	cmp	r5, r4
   270ac:	d000      	beq.n	270b0 <z_unpend_all+0xe>
	while ((thread = z_waitq_head(wait_q)) != NULL) {
   270ae:	b904      	cbnz	r4, 270b2 <z_unpend_all+0x10>
}
   270b0:	bd38      	pop	{r3, r4, r5, pc}
		z_unpend_thread(thread);
   270b2:	4620      	mov	r0, r4
   270b4:	f7ff ff53 	bl	26f5e <z_unpend_thread>
		z_ready_thread(thread);
   270b8:	4620      	mov	r0, r4
   270ba:	f7ff ff6c 	bl	26f96 <z_ready_thread>
		need_sched = 1;
   270be:	2001      	movs	r0, #1
   270c0:	e7f2      	b.n	270a8 <z_unpend_all+0x6>

000270c2 <z_impl_k_sem_init>:
	CHECKIF(limit == 0U || initial_count > limit) {
   270c2:	b15a      	cbz	r2, 270dc <z_impl_k_sem_init+0x1a>
   270c4:	428a      	cmp	r2, r1
   270c6:	d309      	bcc.n	270dc <z_impl_k_sem_init+0x1a>
	sys_dlist_init(&sem->poll_events);
   270c8:	f100 0310 	add.w	r3, r0, #16
	sem->limit = limit;
   270cc:	e9c0 1202 	strd	r1, r2, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   270d0:	e9c0 0000 	strd	r0, r0, [r0]
   270d4:	e9c0 3304 	strd	r3, r3, [r0, #16]
	return 0;
   270d8:	2000      	movs	r0, #0
   270da:	4770      	bx	lr
		return -EINVAL;
   270dc:	f06f 0015 	mvn.w	r0, #21
}
   270e0:	4770      	bx	lr

000270e2 <k_is_in_isr>:
   270e2:	f3ef 8005 	mrs	r0, IPSR
}
   270e6:	3800      	subs	r0, #0
   270e8:	bf18      	it	ne
   270ea:	2001      	movne	r0, #1
   270ec:	4770      	bx	lr

000270ee <z_impl_k_busy_wait>:
	if (usec_to_wait == 0) {
   270ee:	b108      	cbz	r0, 270f4 <z_impl_k_busy_wait+0x6>
	arch_busy_wait(usec_to_wait);
   270f0:	f7e1 b820 	b.w	8134 <arch_busy_wait>
}
   270f4:	4770      	bx	lr

000270f6 <z_impl_k_thread_name_set>:
}
   270f6:	f06f 0046 	mvn.w	r0, #70	; 0x46
   270fa:	4770      	bx	lr

000270fc <k_thread_name_get>:
}
   270fc:	2000      	movs	r0, #0
   270fe:	4770      	bx	lr

00027100 <k_work_submit_to_queue>:
{
   27100:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27102:	f101 0308 	add.w	r3, r1, #8
   27106:	f3bf 8f5b 	dmb	ish
   2710a:	e853 2f00 	ldrex	r2, [r3]
   2710e:	f042 0c01 	orr.w	ip, r2, #1
   27112:	e843 ce00 	strex	lr, ip, [r3]
   27116:	f1be 0f00 	cmp.w	lr, #0
   2711a:	d1f6      	bne.n	2710a <k_work_submit_to_queue+0xa>
   2711c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   27120:	07d3      	lsls	r3, r2, #31
   27122:	d403      	bmi.n	2712c <k_work_submit_to_queue+0x2c>
}
   27124:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   27128:	f7ff be8d 	b.w	26e46 <k_queue_append>
}
   2712c:	f85d fb04 	ldr.w	pc, [sp], #4

00027130 <work_timeout>:
	k_work_submit_to_queue(w->work_q, &w->work);
   27130:	f1a0 0110 	sub.w	r1, r0, #16
   27134:	6980      	ldr	r0, [r0, #24]
   27136:	f7ff bfe3 	b.w	27100 <k_work_submit_to_queue>

0002713a <work_cancel>:
{
   2713a:	b570      	push	{r4, r5, r6, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   2713c:	f3bf 8f5b 	dmb	ish
   27140:	6883      	ldr	r3, [r0, #8]
   27142:	f3bf 8f5b 	dmb	ish
	if (k_work_pending(&work->work)) {
   27146:	07db      	lsls	r3, r3, #31
{
   27148:	4604      	mov	r4, r0
	return atomic_test_bit(work->flags, K_WORK_STATE_PENDING);
   2714a:	f100 0508 	add.w	r5, r0, #8
	if (k_work_pending(&work->work)) {
   2714e:	d532      	bpl.n	271b6 <work_cancel+0x7c>
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   27150:	6a82      	ldr	r2, [r0, #40]	; 0x28
	return list->head;
   27152:	6813      	ldr	r3, [r2, #0]
 * @return true if node was removed
 */
static inline bool sys_sflist_find_and_remove(sys_sflist_t *list,
					      sys_sfnode_t *node);

Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   27154:	2100      	movs	r1, #0
   27156:	b913      	cbnz	r3, 2715e <work_cancel+0x24>
			return -EINVAL;
   27158:	f06f 0015 	mvn.w	r0, #21
}
   2715c:	bd70      	pop	{r4, r5, r6, pc}
   2715e:	429c      	cmp	r4, r3
   27160:	d124      	bne.n	271ac <work_cancel+0x72>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27162:	6823      	ldr	r3, [r4, #0]
	return list->tail;
   27164:	6856      	ldr	r6, [r2, #4]
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   27166:	f023 0003 	bic.w	r0, r3, #3
Z_GENLIST_REMOVE(sflist, sfnode)
   2716a:	b9b1      	cbnz	r1, 2719a <work_cancel+0x60>
   2716c:	42b4      	cmp	r4, r6
	list->head = node;
   2716e:	6010      	str	r0, [r2, #0]
Z_GENLIST_REMOVE(sflist, sfnode)
   27170:	d100      	bne.n	27174 <work_cancel+0x3a>
	list->tail = node;
   27172:	6050      	str	r0, [r2, #4]
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   27174:	6823      	ldr	r3, [r4, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   27176:	f003 0303 	and.w	r3, r3, #3
   2717a:	6023      	str	r3, [r4, #0]
	work->work_q = NULL;
   2717c:	2000      	movs	r0, #0
   2717e:	62a0      	str	r0, [r4, #40]	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   27180:	f3bf 8f5b 	dmb	ish
   27184:	e855 3f00 	ldrex	r3, [r5]
   27188:	f023 0301 	bic.w	r3, r3, #1
   2718c:	e845 3200 	strex	r2, r3, [r5]
   27190:	2a00      	cmp	r2, #0
   27192:	d1f7      	bne.n	27184 <work_cancel+0x4a>
   27194:	f3bf 8f5b 	dmb	ish
   27198:	e7e0      	b.n	2715c <work_cancel+0x22>
	return node->next_and_flags & SYS_SFLIST_FLAGS_MASK;
   2719a:	680b      	ldr	r3, [r1, #0]
	parent->next_and_flags = cur_flags | (unative_t)child;
   2719c:	f003 0303 	and.w	r3, r3, #3
   271a0:	4303      	orrs	r3, r0
Z_GENLIST_REMOVE(sflist, sfnode)
   271a2:	42b4      	cmp	r4, r6
	parent->next_and_flags = cur_flags | (unative_t)child;
   271a4:	600b      	str	r3, [r1, #0]
	list->tail = node;
   271a6:	bf08      	it	eq
   271a8:	6051      	streq	r1, [r2, #4]
}
   271aa:	e7e3      	b.n	27174 <work_cancel+0x3a>
	return (sys_sfnode_t *)(node->next_and_flags & ~SYS_SFLIST_FLAGS_MASK);
   271ac:	6818      	ldr	r0, [r3, #0]
   271ae:	4619      	mov	r1, r3
Z_GENLIST_FIND_AND_REMOVE(sflist, sfnode)
   271b0:	f020 0303 	bic.w	r3, r0, #3
   271b4:	e7cf      	b.n	27156 <work_cancel+0x1c>
		int err = z_abort_timeout(&work->timeout);
   271b6:	3010      	adds	r0, #16
   271b8:	f000 f81a 	bl	271f0 <z_abort_timeout>
		if (err) {
   271bc:	2800      	cmp	r0, #0
   271be:	d0dd      	beq.n	2717c <work_cancel+0x42>
			return -EALREADY;
   271c0:	f06f 0044 	mvn.w	r0, #68	; 0x44
   271c4:	e7ca      	b.n	2715c <work_cancel+0x22>

000271c6 <k_delayed_work_cancel>:

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   271c6:	b510      	push	{r4, lr}
	__asm__ volatile(
   271c8:	f04f 0220 	mov.w	r2, #32
   271cc:	f3ef 8411 	mrs	r4, BASEPRI
   271d0:	f382 8811 	msr	BASEPRI, r2
   271d4:	f3bf 8f6f 	isb	sy
	k_spinlock_key_t key = k_spin_lock(&lock);
	int ret = -EINVAL;

	if (work->work_q != NULL) {
   271d8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   271da:	b133      	cbz	r3, 271ea <k_delayed_work_cancel+0x24>
		ret = work_cancel(work);
   271dc:	f7ff ffad 	bl	2713a <work_cancel>
	__asm__ volatile(
   271e0:	f384 8811 	msr	BASEPRI, r4
   271e4:	f3bf 8f6f 	isb	sy
	}

	k_spin_unlock(&lock, key);
	return ret;
}
   271e8:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   271ea:	f06f 0015 	mvn.w	r0, #21
   271ee:	e7f7      	b.n	271e0 <k_delayed_work_cancel+0x1a>

000271f0 <z_abort_timeout>:
{
   271f0:	b510      	push	{r4, lr}
	__asm__ volatile(
   271f2:	f04f 0220 	mov.w	r2, #32
   271f6:	f3ef 8411 	mrs	r4, BASEPRI
   271fa:	f382 8811 	msr	BASEPRI, r2
   271fe:	f3bf 8f6f 	isb	sy
		if (sys_dnode_is_linked(&to->node)) {
   27202:	6803      	ldr	r3, [r0, #0]
   27204:	b13b      	cbz	r3, 27216 <z_abort_timeout+0x26>
			remove_timeout(to);
   27206:	f7f9 fb1f 	bl	20848 <remove_timeout>
			ret = 0;
   2720a:	2000      	movs	r0, #0
	__asm__ volatile(
   2720c:	f384 8811 	msr	BASEPRI, r4
   27210:	f3bf 8f6f 	isb	sy
}
   27214:	bd10      	pop	{r4, pc}
	int ret = -EINVAL;
   27216:	f06f 0015 	mvn.w	r0, #21
   2721a:	e7f7      	b.n	2720c <z_abort_timeout+0x1c>

0002721c <z_get_next_timeout_expiry>:
{
   2721c:	b510      	push	{r4, lr}
	__asm__ volatile(
   2721e:	f04f 0320 	mov.w	r3, #32
   27222:	f3ef 8411 	mrs	r4, BASEPRI
   27226:	f383 8811 	msr	BASEPRI, r3
   2722a:	f3bf 8f6f 	isb	sy
		ret = next_timeout();
   2722e:	f7f9 fae3 	bl	207f8 <next_timeout>
	__asm__ volatile(
   27232:	f384 8811 	msr	BASEPRI, r4
   27236:	f3bf 8f6f 	isb	sy
}
   2723a:	bd10      	pop	{r4, pc}

0002723c <z_set_timeout_expiry>:
{
   2723c:	b570      	push	{r4, r5, r6, lr}
   2723e:	4604      	mov	r4, r0
   27240:	460d      	mov	r5, r1
	__asm__ volatile(
   27242:	f04f 0320 	mov.w	r3, #32
   27246:	f3ef 8611 	mrs	r6, BASEPRI
   2724a:	f383 8811 	msr	BASEPRI, r3
   2724e:	f3bf 8f6f 	isb	sy
		int next_to = next_timeout();
   27252:	f7f9 fad1 	bl	207f8 <next_timeout>
		if (!imminent && (sooner || IS_ENABLED(CONFIG_SMP))) {
   27256:	2801      	cmp	r0, #1
   27258:	dd05      	ble.n	27266 <z_set_timeout_expiry+0x2a>
   2725a:	42a0      	cmp	r0, r4
   2725c:	db03      	blt.n	27266 <z_set_timeout_expiry+0x2a>
			z_clock_set_timeout(ticks, is_idle);
   2725e:	4629      	mov	r1, r5
   27260:	4620      	mov	r0, r4
   27262:	f7e0 f809 	bl	7278 <z_clock_set_timeout>
	__asm__ volatile(
   27266:	f386 8811 	msr	BASEPRI, r6
   2726a:	f3bf 8f6f 	isb	sy
}
   2726e:	bd70      	pop	{r4, r5, r6, pc}

00027270 <z_tick_get_32>:

uint32_t z_tick_get_32(void)
{
   27270:	b508      	push	{r3, lr}
#ifdef CONFIG_TICKLESS_KERNEL
	return (uint32_t)z_tick_get();
   27272:	f7f9 fbdf 	bl	20a34 <z_tick_get>
#else
	return (uint32_t)curr_tick;
#endif
}
   27276:	bd08      	pop	{r3, pc}

00027278 <z_impl_k_uptime_ticks>:

int64_t z_impl_k_uptime_ticks(void)
{
	return z_tick_get();
   27278:	f7f9 bbdc 	b.w	20a34 <z_tick_get>

0002727c <z_timeout_end_calc>:
 */
uint64_t z_timeout_end_calc(k_timeout_t timeout)
{
	k_ticks_t dt;

	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2727c:	f1b1 3fff 	cmp.w	r1, #4294967295
   27280:	bf08      	it	eq
   27282:	f1b0 3fff 	cmpeq.w	r0, #4294967295
{
   27286:	b538      	push	{r3, r4, r5, lr}
   27288:	4605      	mov	r5, r0
   2728a:	460c      	mov	r4, r1
	if (K_TIMEOUT_EQ(timeout, K_FOREVER)) {
   2728c:	d01d      	beq.n	272ca <z_timeout_end_calc+0x4e>
		return UINT64_MAX;
	} else if (K_TIMEOUT_EQ(timeout, K_NO_WAIT)) {
   2728e:	ea51 0300 	orrs.w	r3, r1, r0
   27292:	d103      	bne.n	2729c <z_timeout_end_calc+0x20>

	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
		return Z_TICK_ABS(dt);
	}
	return z_tick_get() + MAX(1, dt);
}
   27294:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		return z_tick_get();
   27298:	f7f9 bbcc 	b.w	20a34 <z_tick_get>
	if (IS_ENABLED(CONFIG_TIMEOUT_64BIT) && Z_TICK_ABS(dt) >= 0) {
   2729c:	f06f 0301 	mvn.w	r3, #1
   272a0:	1a18      	subs	r0, r3, r0
   272a2:	f04f 33ff 	mov.w	r3, #4294967295
   272a6:	eb63 0101 	sbc.w	r1, r3, r1
   272aa:	2900      	cmp	r1, #0
   272ac:	da0c      	bge.n	272c8 <z_timeout_end_calc+0x4c>
	return z_tick_get() + MAX(1, dt);
   272ae:	f7f9 fbc1 	bl	20a34 <z_tick_get>
   272b2:	2d01      	cmp	r5, #1
   272b4:	4622      	mov	r2, r4
   272b6:	f174 0400 	sbcs.w	r4, r4, #0
   272ba:	462b      	mov	r3, r5
   272bc:	bfbc      	itt	lt
   272be:	2301      	movlt	r3, #1
   272c0:	2200      	movlt	r2, #0
   272c2:	1818      	adds	r0, r3, r0
   272c4:	eb41 0102 	adc.w	r1, r1, r2
}
   272c8:	bd38      	pop	{r3, r4, r5, pc}
		return UINT64_MAX;
   272ca:	f04f 30ff 	mov.w	r0, #4294967295
   272ce:	4601      	mov	r1, r0
   272d0:	e7fa      	b.n	272c8 <z_timeout_end_calc+0x4c>

000272d2 <k_timer_init>:
	timer->status = 0U;
   272d2:	2300      	movs	r3, #0
	timer->stop_fn = stop_fn;
   272d4:	e9c0 1208 	strd	r1, r2, [r0, #32]
   272d8:	f100 0218 	add.w	r2, r0, #24
   272dc:	e9c0 2206 	strd	r2, r2, [r0, #24]
	node->prev = NULL;
   272e0:	e9c0 3300 	strd	r3, r3, [r0]
	timer->status = 0U;
   272e4:	6303      	str	r3, [r0, #48]	; 0x30
	timer->user_data = NULL;
   272e6:	6343      	str	r3, [r0, #52]	; 0x34
}
   272e8:	4770      	bx	lr

000272ea <z_impl_k_timer_stop>:
}
#include <syscalls/k_timer_start_mrsh.c>
#endif

void z_impl_k_timer_stop(struct k_timer *timer)
{
   272ea:	b510      	push	{r4, lr}
   272ec:	4604      	mov	r4, r0
	int inactive = z_abort_timeout(&timer->timeout) != 0;
   272ee:	f7ff ff7f 	bl	271f0 <z_abort_timeout>

	if (inactive) {
   272f2:	b9b0      	cbnz	r0, 27322 <z_impl_k_timer_stop+0x38>
		return;
	}

	if (timer->stop_fn != NULL) {
   272f4:	6a63      	ldr	r3, [r4, #36]	; 0x24
   272f6:	b10b      	cbz	r3, 272fc <z_impl_k_timer_stop+0x12>
		timer->stop_fn(timer);
   272f8:	4620      	mov	r0, r4
   272fa:	4798      	blx	r3
	}

	struct k_thread *pending_thread = z_unpend1_no_timeout(&timer->wait_q);
   272fc:	f104 0018 	add.w	r0, r4, #24
   27300:	f7ff fea1 	bl	27046 <z_unpend1_no_timeout>

	if (pending_thread != NULL) {
   27304:	b168      	cbz	r0, 27322 <z_impl_k_timer_stop+0x38>
		z_ready_thread(pending_thread);
   27306:	f7ff fe46 	bl	26f96 <z_ready_thread>
	__asm__ volatile(
   2730a:	f04f 0320 	mov.w	r3, #32
   2730e:	f3ef 8011 	mrs	r0, BASEPRI
   27312:	f383 8811 	msr	BASEPRI, r3
   27316:	f3bf 8f6f 	isb	sy
		z_reschedule_unlocked();
	}
}
   2731a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	(void) z_reschedule_irqlock(arch_irq_lock());
   2731e:	f7ff bdfc 	b.w	26f1a <z_reschedule_irqlock>
   27322:	bd10      	pop	{r4, pc}

00027324 <k_work_submit_to_queue>:
{
   27324:	b500      	push	{lr}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   27326:	f101 0308 	add.w	r3, r1, #8
   2732a:	f3bf 8f5b 	dmb	ish
   2732e:	e853 2f00 	ldrex	r2, [r3]
   27332:	f042 0c01 	orr.w	ip, r2, #1
   27336:	e843 ce00 	strex	lr, ip, [r3]
   2733a:	f1be 0f00 	cmp.w	lr, #0
   2733e:	d1f6      	bne.n	2732e <k_work_submit_to_queue+0xa>
   27340:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   27344:	07d3      	lsls	r3, r2, #31
   27346:	d403      	bmi.n	27350 <k_work_submit_to_queue+0x2c>
}
   27348:	f85d eb04 	ldr.w	lr, [sp], #4
		k_queue_append(&work_q->queue, work);
   2734c:	f7ff bd7b 	b.w	26e46 <k_queue_append>
}
   27350:	f85d fb04 	ldr.w	pc, [sp], #4

00027354 <signal_poll_event>:
{
   27354:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct z_poller *poller = event->poller;
   27358:	6884      	ldr	r4, [r0, #8]
{
   2735a:	4605      	mov	r5, r0
   2735c:	460e      	mov	r6, r1
	if (poller) {
   2735e:	b144      	cbz	r4, 27372 <signal_poll_event+0x1e>
		if (poller->mode == MODE_POLL) {
   27360:	7863      	ldrb	r3, [r4, #1]
   27362:	2b01      	cmp	r3, #1
   27364:	d136      	bne.n	273d4 <signal_poll_event+0x80>
	if (!z_is_thread_pending(thread)) {
   27366:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   2736a:	f013 0302 	ands.w	r3, r3, #2
   2736e:	d10a      	bne.n	27386 <signal_poll_event+0x32>
		poller->is_polling = false;
   27370:	7023      	strb	r3, [r4, #0]
	event->state |= state;
   27372:	68eb      	ldr	r3, [r5, #12]
   27374:	f3c3 3104 	ubfx	r1, r3, #12, #5
   27378:	430e      	orrs	r6, r1
	event->poller = NULL;
   2737a:	2000      	movs	r0, #0
	event->state |= state;
   2737c:	f366 3310 	bfi	r3, r6, #12, #5
	event->poller = NULL;
   27380:	60a8      	str	r0, [r5, #8]
	event->state |= state;
   27382:	60eb      	str	r3, [r5, #12]
	return retcode;
   27384:	e00b      	b.n	2739e <signal_poll_event+0x4a>
	if (z_is_thread_timeout_expired(thread)) {
   27386:	e954 230f 	ldrd	r2, r3, [r4, #-60]	; 0x3c
   2738a:	f1b3 3fff 	cmp.w	r3, #4294967295
   2738e:	bf08      	it	eq
   27390:	f112 0f02 	cmneq.w	r2, #2
   27394:	d105      	bne.n	273a2 <signal_poll_event+0x4e>
		poller->is_polling = false;
   27396:	2300      	movs	r3, #0
   27398:	7023      	strb	r3, [r4, #0]
		return -EAGAIN;
   2739a:	f06f 000a 	mvn.w	r0, #10
}
   2739e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   273a2:	f1a4 0864 	sub.w	r8, r4, #100	; 0x64
	z_unpend_thread(thread);
   273a6:	4640      	mov	r0, r8
   273a8:	f7ff fdd9 	bl	26f5e <z_unpend_thread>
	arch_thread_return_value_set(thread,
   273ac:	2e08      	cmp	r6, #8
   273ae:	bf0c      	ite	eq
   273b0:	f06f 0303 	mvneq.w	r3, #3
   273b4:	2300      	movne	r3, #0
   273b6:	61e3      	str	r3, [r4, #28]
	return !((z_is_thread_prevented_from_running(thread)) != 0U ||
   273b8:	f814 3c57 	ldrb.w	r3, [r4, #-87]
   273bc:	06db      	lsls	r3, r3, #27
   273be:	d102      	bne.n	273c6 <signal_poll_event+0x72>
	if (!z_is_thread_ready(thread)) {
   273c0:	f854 7c4c 	ldr.w	r7, [r4, #-76]
   273c4:	b10f      	cbz	r7, 273ca <signal_poll_event+0x76>
		poller->is_polling = false;
   273c6:	2300      	movs	r3, #0
   273c8:	e7d2      	b.n	27370 <signal_poll_event+0x1c>
	z_ready_thread(thread);
   273ca:	4640      	mov	r0, r8
   273cc:	f7ff fde3 	bl	26f96 <z_ready_thread>
		poller->is_polling = false;
   273d0:	7027      	strb	r7, [r4, #0]
		if (retcode < 0) {
   273d2:	e7ce      	b.n	27372 <signal_poll_event+0x1e>
		} else if (poller->mode == MODE_TRIGGERED) {
   273d4:	2b02      	cmp	r3, #2
   273d6:	d1f6      	bne.n	273c6 <signal_poll_event+0x72>
{
	struct z_poller *poller = event->poller;
	struct k_work_poll *twork =
		CONTAINER_OF(poller, struct k_work_poll, poller);

	if (poller->is_polling && twork->workq != NULL) {
   273d8:	7823      	ldrb	r3, [r4, #0]
   273da:	2b00      	cmp	r3, #0
   273dc:	d0c9      	beq.n	27372 <signal_poll_event+0x1e>
   273de:	f854 7c04 	ldr.w	r7, [r4, #-4]
   273e2:	2f00      	cmp	r7, #0
   273e4:	d0f4      	beq.n	273d0 <signal_poll_event+0x7c>
		struct k_work_q *work_q = twork->workq;

		z_abort_timeout(&twork->timeout);
		twork->poll_result = 0;
   273e6:	f04f 0800 	mov.w	r8, #0
		z_abort_timeout(&twork->timeout);
   273ea:	f1a4 0910 	sub.w	r9, r4, #16
   273ee:	f104 0010 	add.w	r0, r4, #16
   273f2:	f7ff fefd 	bl	271f0 <z_abort_timeout>
		twork->poll_result = 0;
   273f6:	f8c4 8028 	str.w	r8, [r4, #40]	; 0x28
		k_work_submit_to_queue(work_q, &twork->work);
   273fa:	4649      	mov	r1, r9
   273fc:	4638      	mov	r0, r7
   273fe:	f7ff ff91 	bl	27324 <k_work_submit_to_queue>
		poller->is_polling = false;
   27402:	f884 8000 	strb.w	r8, [r4]
		if (retcode < 0) {
   27406:	e7b4      	b.n	27372 <signal_poll_event+0x1e>

00027408 <add_event>:
{
   27408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2740a:	4617      	mov	r7, r2
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2740c:	e9d0 2300 	ldrd	r2, r3, [r0]
   27410:	4290      	cmp	r0, r2
   27412:	4604      	mov	r4, r0
   27414:	460d      	mov	r5, r1
   27416:	d106      	bne.n	27426 <add_event+0x1e>
	node->prev = list->tail;
   27418:	6863      	ldr	r3, [r4, #4]
   2741a:	606b      	str	r3, [r5, #4]
	list->tail->next = node;
   2741c:	6863      	ldr	r3, [r4, #4]
	node->next = list;
   2741e:	602c      	str	r4, [r5, #0]
	list->tail->next = node;
   27420:	601d      	str	r5, [r3, #0]
	list->tail = node;
   27422:	6065      	str	r5, [r4, #4]
}
   27424:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	if ((pending == NULL) ||
   27426:	2b00      	cmp	r3, #0
   27428:	d0f6      	beq.n	27418 <add_event+0x10>
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   2742a:	6898      	ldr	r0, [r3, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2742c:	b100      	cbz	r0, 27430 <add_event+0x28>
   2742e:	3864      	subs	r0, #100	; 0x64
   27430:	b107      	cbz	r7, 27434 <add_event+0x2c>
   27432:	3f64      	subs	r7, #100	; 0x64
	    z_is_t1_higher_prio_than_t2(poller_thread(pending->poller),
   27434:	4639      	mov	r1, r7
   27436:	f7ff fd57 	bl	26ee8 <z_is_t1_higher_prio_than_t2>
	if ((pending == NULL) ||
   2743a:	2800      	cmp	r0, #0
   2743c:	d1ec      	bne.n	27418 <add_event+0x10>
	return list->head == list;
   2743e:	6826      	ldr	r6, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27440:	42b4      	cmp	r4, r6
   27442:	d0e9      	beq.n	27418 <add_event+0x10>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27444:	2e00      	cmp	r6, #0
   27446:	d0e7      	beq.n	27418 <add_event+0x10>
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   27448:	68b1      	ldr	r1, [r6, #8]
	return p ? CONTAINER_OF(p, struct k_thread, poller) : NULL;
   2744a:	b101      	cbz	r1, 2744e <add_event+0x46>
   2744c:	3964      	subs	r1, #100	; 0x64
		if (z_is_t1_higher_prio_than_t2(poller_thread(poller),
   2744e:	4638      	mov	r0, r7
   27450:	f7ff fd4a 	bl	26ee8 <z_is_t1_higher_prio_than_t2>
   27454:	b128      	cbz	r0, 27462 <add_event+0x5a>
	node->prev = successor->prev;
   27456:	6873      	ldr	r3, [r6, #4]
	node->next = successor;
   27458:	e9c5 6300 	strd	r6, r3, [r5]
	successor->prev->next = node;
   2745c:	601d      	str	r5, [r3, #0]
	successor->prev = node;
   2745e:	6075      	str	r5, [r6, #4]
			return;
   27460:	e7e0      	b.n	27424 <add_event+0x1c>
	return (node == list->tail) ? NULL : node->next;
   27462:	6863      	ldr	r3, [r4, #4]
   27464:	429e      	cmp	r6, r3
   27466:	d0d7      	beq.n	27418 <add_event+0x10>
   27468:	6836      	ldr	r6, [r6, #0]
   2746a:	e7eb      	b.n	27444 <add_event+0x3c>

0002746c <register_events>:
{
   2746c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (int ii = 0; ii < num_events; ii++) {
   27470:	f04f 0a00 	mov.w	sl, #0
{
   27474:	460e      	mov	r6, r1
   27476:	4614      	mov	r4, r2
   27478:	461f      	mov	r7, r3
   2747a:	4683      	mov	fp, r0
	int events_registered = 0;
   2747c:	4655      	mov	r5, sl
	event->poller = NULL;
   2747e:	46d0      	mov	r8, sl
	for (int ii = 0; ii < num_events; ii++) {
   27480:	45b2      	cmp	sl, r6
   27482:	db02      	blt.n	2748a <register_events+0x1e>
}
   27484:	4628      	mov	r0, r5
   27486:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2748a:	f04f 0320 	mov.w	r3, #32
   2748e:	f3ef 8911 	mrs	r9, BASEPRI
   27492:	f383 8811 	msr	BASEPRI, r3
   27496:	f3bf 8f6f 	isb	sy
	switch (event->type) {
   2749a:	f89b 200d 	ldrb.w	r2, [fp, #13]
   2749e:	f002 020f 	and.w	r2, r2, #15
   274a2:	2a02      	cmp	r2, #2
   274a4:	d006      	beq.n	274b4 <register_events+0x48>
   274a6:	2a04      	cmp	r2, #4
   274a8:	d008      	beq.n	274bc <register_events+0x50>
   274aa:	2a01      	cmp	r2, #1
   274ac:	d120      	bne.n	274f0 <register_events+0x84>
		if (event->signal->signaled != 0U) {
   274ae:	f8db 3010 	ldr.w	r3, [fp, #16]
   274b2:	e001      	b.n	274b8 <register_events+0x4c>
		if (k_sem_count_get(event->sem) > 0U) {
   274b4:	f8db 3010 	ldr.w	r3, [fp, #16]
		if (event->signal->signaled != 0U) {
   274b8:	689b      	ldr	r3, [r3, #8]
   274ba:	e002      	b.n	274c2 <register_events+0x56>
		if (!k_queue_is_empty(event->queue)) {
   274bc:	f8db 3010 	ldr.w	r3, [fp, #16]
   274c0:	681b      	ldr	r3, [r3, #0]
		if (event->signal->signaled != 0U) {
   274c2:	b1ab      	cbz	r3, 274f0 <register_events+0x84>
	event->state |= state;
   274c4:	f8db 300c 	ldr.w	r3, [fp, #12]
	event->poller = NULL;
   274c8:	f8cb 8008 	str.w	r8, [fp, #8]
	event->state |= state;
   274cc:	f3c3 3104 	ubfx	r1, r3, #12, #5
   274d0:	430a      	orrs	r2, r1
   274d2:	f362 3310 	bfi	r3, r2, #12, #5
   274d6:	f8cb 300c 	str.w	r3, [fp, #12]
			poller->is_polling = false;
   274da:	f884 8000 	strb.w	r8, [r4]
	__asm__ volatile(
   274de:	f389 8811 	msr	BASEPRI, r9
   274e2:	f3bf 8f6f 	isb	sy
	for (int ii = 0; ii < num_events; ii++) {
   274e6:	f10a 0a01 	add.w	sl, sl, #1
   274ea:	f10b 0b14 	add.w	fp, fp, #20
   274ee:	e7c7      	b.n	27480 <register_events+0x14>
		} else if (!just_check && poller->is_polling) {
   274f0:	2f00      	cmp	r7, #0
   274f2:	d1f4      	bne.n	274de <register_events+0x72>
   274f4:	7823      	ldrb	r3, [r4, #0]
   274f6:	2b00      	cmp	r3, #0
   274f8:	d0f1      	beq.n	274de <register_events+0x72>
	switch (event->type) {
   274fa:	f89b 300d 	ldrb.w	r3, [fp, #13]
   274fe:	f003 030f 	and.w	r3, r3, #15
   27502:	2b02      	cmp	r3, #2
   27504:	d008      	beq.n	27518 <register_events+0xac>
   27506:	2b04      	cmp	r3, #4
   27508:	d006      	beq.n	27518 <register_events+0xac>
   2750a:	2b01      	cmp	r3, #1
   2750c:	d10b      	bne.n	27526 <register_events+0xba>
		add_event(&event->signal->poll_events, event, poller);
   2750e:	f8db 0010 	ldr.w	r0, [fp, #16]
   27512:	4622      	mov	r2, r4
   27514:	4659      	mov	r1, fp
   27516:	e004      	b.n	27522 <register_events+0xb6>
		add_event(&event->queue->poll_events, event, poller);
   27518:	f8db 0010 	ldr.w	r0, [fp, #16]
   2751c:	4622      	mov	r2, r4
   2751e:	4659      	mov	r1, fp
   27520:	3010      	adds	r0, #16
		add_event(&event->signal->poll_events, event, poller);
   27522:	f7ff ff71 	bl	27408 <add_event>
	event->poller = poller;
   27526:	f8cb 4008 	str.w	r4, [fp, #8]
			events_registered += 1;
   2752a:	3501      	adds	r5, #1
   2752c:	e7d7      	b.n	274de <register_events+0x72>

0002752e <clear_event_registrations>:
	while (num_events--) {
   2752e:	2314      	movs	r3, #20
{
   27530:	b570      	push	{r4, r5, r6, lr}
   27532:	fb03 0001 	mla	r0, r3, r1, r0
	event->poller = NULL;
   27536:	2400      	movs	r4, #0
	while (num_events--) {
   27538:	b901      	cbnz	r1, 2753c <clear_event_registrations+0xe>
}
   2753a:	bd70      	pop	{r4, r5, r6, pc}
	switch (event->type) {
   2753c:	f810 3c07 	ldrb.w	r3, [r0, #-7]
	event->poller = NULL;
   27540:	f840 4c0c 	str.w	r4, [r0, #-12]
	switch (event->type) {
   27544:	f003 030f 	and.w	r3, r3, #15
   27548:	2b02      	cmp	r3, #2
   2754a:	f1a0 0614 	sub.w	r6, r0, #20
   2754e:	d80a      	bhi.n	27566 <clear_event_registrations+0x38>
   27550:	b15b      	cbz	r3, 2756a <clear_event_registrations+0x3c>
	return node->next != NULL;
   27552:	f850 3c14 	ldr.w	r3, [r0, #-20]
	if (remove && sys_dnode_is_linked(&event->_node)) {
   27556:	b143      	cbz	r3, 2756a <clear_event_registrations+0x3c>
	node->prev->next = node->next;
   27558:	f850 5c10 	ldr.w	r5, [r0, #-16]
   2755c:	602b      	str	r3, [r5, #0]
	node->next->prev = node->prev;
   2755e:	605d      	str	r5, [r3, #4]
	node->prev = NULL;
   27560:	e940 4405 	strd	r4, r4, [r0, #-20]
}
   27564:	e001      	b.n	2756a <clear_event_registrations+0x3c>
	switch (event->type) {
   27566:	2b04      	cmp	r3, #4
   27568:	d0f3      	beq.n	27552 <clear_event_registrations+0x24>
   2756a:	f382 8811 	msr	BASEPRI, r2
   2756e:	f3bf 8f6f 	isb	sy
	__asm__ volatile(
   27572:	f04f 0320 	mov.w	r3, #32
   27576:	f3ef 8211 	mrs	r2, BASEPRI
   2757a:	f383 8811 	msr	BASEPRI, r3
   2757e:	f3bf 8f6f 	isb	sy
   27582:	3901      	subs	r1, #1
   27584:	4630      	mov	r0, r6
   27586:	e7d7      	b.n	27538 <clear_event_registrations+0xa>

00027588 <k_poll_event_init>:
{
   27588:	b510      	push	{r4, lr}
	event->type = type;
   2758a:	0452      	lsls	r2, r2, #17
   2758c:	0209      	lsls	r1, r1, #8
   2758e:	f401 6170 	and.w	r1, r1, #3840	; 0xf00
   27592:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
   27596:	430a      	orrs	r2, r1
   27598:	7b01      	ldrb	r1, [r0, #12]
	event->poller = NULL;
   2759a:	2400      	movs	r4, #0
	event->type = type;
   2759c:	430a      	orrs	r2, r1
	event->obj = obj;
   2759e:	e9c0 2303 	strd	r2, r3, [r0, #12]
	event->poller = NULL;
   275a2:	6084      	str	r4, [r0, #8]
}
   275a4:	bd10      	pop	{r4, pc}

000275a6 <z_handle_obj_poll_events>:
{
   275a6:	4603      	mov	r3, r0
	return list->head == list;
   275a8:	6800      	ldr	r0, [r0, #0]
	if (!sys_dlist_is_empty(list)) {
   275aa:	4283      	cmp	r3, r0
   275ac:	d008      	beq.n	275c0 <z_handle_obj_poll_events+0x1a>
	node->prev->next = node->next;
   275ae:	e9d0 3200 	ldrd	r3, r2, [r0]
   275b2:	6013      	str	r3, [r2, #0]
	node->next->prev = node->prev;
   275b4:	605a      	str	r2, [r3, #4]
	node->next = NULL;
   275b6:	2300      	movs	r3, #0
	node->prev = NULL;
   275b8:	e9c0 3300 	strd	r3, r3, [r0]
		(void) signal_poll_event(poll_event, state);
   275bc:	f7ff beca 	b.w	27354 <signal_poll_event>
}
   275c0:	4770      	bx	lr

000275c2 <k_free>:
	if (ptr != NULL) {
   275c2:	b120      	cbz	r0, 275ce <k_free+0xc>
		k_heap_free(*heap_ref, ptr);
   275c4:	1f01      	subs	r1, r0, #4
   275c6:	f850 0c04 	ldr.w	r0, [r0, #-4]
   275ca:	f7ff bb78 	b.w	26cbe <k_heap_free>
}
   275ce:	4770      	bx	lr

000275d0 <_OffsetAbsSyms>:
#include "offsets_aarch64.c"
#else
#include "offsets_aarch32.c"
#endif

GEN_ABS_SYM_END
   275d0:	4770      	bx	lr
